
./build/kernel.bin:     file format elf32-i386


Disassembly of section .text:

c0001500 <main>:
main():
/work/x86_os_my/kernel/main.c:34
用户进程
u_prog_a 的地址是在 0xc0000000 以上，位于内核空间，但这并不表示它无法模拟用户进程。
*/
void init(void);

int main(void) {
c0001500:	8d 4c 24 04          	lea    0x4(%esp),%ecx
c0001504:	83 e4 f0             	and    $0xfffffff0,%esp
c0001507:	ff 71 fc             	pushl  -0x4(%ecx)
c000150a:	55                   	push   %ebp
c000150b:	89 e5                	mov    %esp,%ebp
c000150d:	51                   	push   %ecx
c000150e:	83 ec 04             	sub    $0x4,%esp
/work/x86_os_my/kernel/main.c:35
   put_str("I am kernel\n");
c0001511:	83 ec 0c             	sub    $0xc,%esp
c0001514:	68 c4 b4 00 c0       	push   $0xc000b4c4
c0001519:	e8 52 0c 00 00       	call   c0002170 <put_str>
c000151e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:36
   init_all();
c0001521:	e8 4f 00 00 00       	call   c0001575 <init_all>
/work/x86_os_my/kernel/main.c:37
   cls_screen();
c0001526:	e8 30 0d 00 00       	call   c000225b <cls_screen>
/work/x86_os_my/kernel/main.c:38
   console_put_str("[rabbit@localhost /]$ ");
c000152b:	83 ec 0c             	sub    $0xc,%esp
c000152e:	68 d1 b4 00 c0       	push   $0xc000b4d1
c0001533:	e8 d8 2f 00 00       	call   c0004510 <console_put_str>
c0001538:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:39 (discriminator 1)
   while(1);
c000153b:	eb fe                	jmp    c000153b <main+0x3b>

c000153d <init>:
init():
/work/x86_os_my/kernel/main.c:44
   return 0;
}

/* init进程 */
void init(void) {
c000153d:	55                   	push   %ebp
c000153e:	89 e5                	mov    %esp,%ebp
c0001540:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/main.c:45
   uint32_t ret_pid = fork();
c0001543:	e8 a1 3e 00 00       	call   c00053e9 <fork>
c0001548:	98                   	cwtl   
c0001549:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/main.c:46
   if(ret_pid) {  // 父进程
c000154c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0001550:	74 02                	je     c0001554 <init+0x17>
/work/x86_os_my/kernel/main.c:47 (discriminator 1)
      while(1);
c0001552:	eb fe                	jmp    c0001552 <init+0x15>
/work/x86_os_my/kernel/main.c:49
   } else {	  // 子进程
      my_shell();
c0001554:	e8 52 9e 00 00       	call   c000b3ab <my_shell>
/work/x86_os_my/kernel/main.c:51
   }
   panic("init: should not be here");
c0001559:	68 e8 b4 00 c0       	push   $0xc000b4e8
c000155e:	68 10 b5 00 c0       	push   $0xc000b510
c0001563:	6a 33                	push   $0x33
c0001565:	68 01 b5 00 c0       	push   $0xc000b501
c000156a:	e8 31 9f 00 00       	call   c000b4a0 <user_spin>
c000156f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:52
}
c0001572:	90                   	nop
c0001573:	c9                   	leave  
c0001574:	c3                   	ret    

c0001575 <init_all>:
init_all():
/work/x86_os_my/kernel/init.c:15
#include "syscall-init.h"
#include "ide.h"
#include "fs.h"

/*负责初始化所有模块 */
void init_all() {
c0001575:	55                   	push   %ebp
c0001576:	89 e5                	mov    %esp,%ebp
c0001578:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/kernel/init.c:16
	put_str("init_all\n");
c000157b:	83 ec 0c             	sub    $0xc,%esp
c000157e:	68 15 b5 00 c0       	push   $0xc000b515
c0001583:	e8 e8 0b 00 00       	call   c0002170 <put_str>
c0001588:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/init.c:17
	idt_init();			// 初始化中断
c000158b:	e8 38 04 00 00       	call   c00019c8 <idt_init>
/work/x86_os_my/kernel/init.c:18
	mem_init();			// 初始化内存管理系统
c0001590:	e8 dd 21 00 00       	call   c0003772 <mem_init>
/work/x86_os_my/kernel/init.c:19
	thread_init();		// 初始化线程相关结构
c0001595:	e8 94 2c 00 00       	call   c000422e <thread_init>
/work/x86_os_my/kernel/init.c:20
	timer_init();		// 初始化PIT
c000159a:	e8 16 06 00 00       	call   c0001bb5 <timer_init>
/work/x86_os_my/kernel/init.c:21
	console_init();		// 控制台初始化最好放在开中断之前
c000159f:	e8 21 2f 00 00       	call   c00044c5 <console_init>
/work/x86_os_my/kernel/init.c:22
	keyboard_init();	// 键盘初始化
c00015a4:	e8 9a 35 00 00       	call   c0004b43 <keyboard_init>
/work/x86_os_my/kernel/init.c:23
	tss_init();			// tss初始化
c00015a9:	e8 50 39 00 00       	call   c0004efe <tss_init>
/work/x86_os_my/kernel/init.c:24
	syscall_init();		// 初始化系统调用
c00015ae:	e8 b7 3e 00 00       	call   c000546a <syscall_init>
/work/x86_os_my/kernel/init.c:25
	intr_enable();		// 后面的ide_init需要打开中断
c00015b3:	e8 5f 03 00 00       	call   c0001917 <intr_enable>
/work/x86_os_my/kernel/init.c:26
	ide_init();			// 初始化硬盘
c00015b8:	e8 3e 4d 00 00       	call   c00062fb <ide_init>
/work/x86_os_my/kernel/init.c:27
	filesys_init();		// 初始化文件系统
c00015bd:	e8 15 6e 00 00       	call   c00083d7 <filesys_init>
/work/x86_os_my/kernel/init.c:28
}
c00015c2:	90                   	nop
c00015c3:	c9                   	leave  
c00015c4:	c3                   	ret    

c00015c5 <outb>:
outb():
/work/x86_os_my/lib/kernel/io.h:17
#define __LIB_IO_H
#include "stdint.h"
//inline省去了函数调用开支

/* 向端口port写入一个字节*/
static inline void outb(uint16_t port, uint8_t data) {
c00015c5:	55                   	push   %ebp
c00015c6:	89 e5                	mov    %esp,%ebp
c00015c8:	83 ec 08             	sub    $0x8,%esp
c00015cb:	8b 55 08             	mov    0x8(%ebp),%edx
c00015ce:	8b 45 0c             	mov    0xc(%ebp),%eax
c00015d1:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c00015d5:	88 45 f8             	mov    %al,-0x8(%ebp)
/work/x86_os_my/lib/kernel/io.h:21
/*********************************************************
 a表示用寄存器al或ax或eax,对端口指定N表示0~255, d表示用dx存储端口号, 
 %b0表示对应al,%w1表示对应dx */ 
   asm volatile ( "outb %b0, %w1" : : "a" (data), "Nd" (port));    
c00015d8:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c00015dc:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c00015e0:	ee                   	out    %al,(%dx)
/work/x86_os_my/lib/kernel/io.h:23
/******************************************************/
}
c00015e1:	90                   	nop
c00015e2:	c9                   	leave  
c00015e3:	c3                   	ret    

c00015e4 <pic_init>:
pic_init():
/work/x86_os_my/kernel/interrupt.c:41
//自定义类型 intr_handler = void*
extern intr_handler intr_entry_table[IDT_DESC_CNT];	    // 声明引用汇编kernel.S中的中断处理函数入口数组

/* 初始化可编程中断控制器8259A */
// outb 来着 lib/kernel/io.h 内联汇编写法
static void pic_init(void) {
c00015e4:	55                   	push   %ebp
c00015e5:	89 e5                	mov    %esp,%ebp
c00015e7:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:43
	/* 初始化主片 */
	outb (PIC_M_CTRL, 0x11);	// ICW1: 边沿触发,级联8259, 需要ICW4.
c00015ea:	6a 11                	push   $0x11
c00015ec:	6a 20                	push   $0x20
c00015ee:	e8 d2 ff ff ff       	call   c00015c5 <outb>
c00015f3:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:44
	outb (PIC_M_DATA, 0x20);	// ICW2: 起始中断向量号为0x20,也就是IR[0-7] 为 0x20 ~ 0x27.
c00015f6:	6a 20                	push   $0x20
c00015f8:	6a 21                	push   $0x21
c00015fa:	e8 c6 ff ff ff       	call   c00015c5 <outb>
c00015ff:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:45
	outb (PIC_M_DATA, 0x04);	// ICW3: IR2接从片. 
c0001602:	6a 04                	push   $0x4
c0001604:	6a 21                	push   $0x21
c0001606:	e8 ba ff ff ff       	call   c00015c5 <outb>
c000160b:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:46
	outb (PIC_M_DATA, 0x01);	// ICW4: 8086模式, 正常EOI
c000160e:	6a 01                	push   $0x1
c0001610:	6a 21                	push   $0x21
c0001612:	e8 ae ff ff ff       	call   c00015c5 <outb>
c0001617:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:49

	/* 初始化从片 */
	outb (PIC_S_CTRL, 0x11);	// ICW1: 边沿触发,级联8259, 需要ICW4.
c000161a:	6a 11                	push   $0x11
c000161c:	68 a0 00 00 00       	push   $0xa0
c0001621:	e8 9f ff ff ff       	call   c00015c5 <outb>
c0001626:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:50
	outb (PIC_S_DATA, 0x28);	// ICW2: 起始中断向量号为0x28,也就是IR[8-15] 为 0x28 ~ 0x2F.
c0001629:	6a 28                	push   $0x28
c000162b:	68 a1 00 00 00       	push   $0xa1
c0001630:	e8 90 ff ff ff       	call   c00015c5 <outb>
c0001635:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:51
	outb (PIC_S_DATA, 0x02);	// ICW3: 设置从片连接到主片的IR2引脚
c0001638:	6a 02                	push   $0x2
c000163a:	68 a1 00 00 00       	push   $0xa1
c000163f:	e8 81 ff ff ff       	call   c00015c5 <outb>
c0001644:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:52
	outb (PIC_S_DATA, 0x01);	// ICW4: 8086模式, 正常EOI
c0001647:	6a 01                	push   $0x1
c0001649:	68 a1 00 00 00       	push   $0xa1
c000164e:	e8 72 ff ff ff       	call   c00015c5 <outb>
c0001653:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:56

	/* IRQ2用于级联从片,必须打开,否则无法响应从片上的中断
	主片上打开的中断有IRQ0的时钟,IRQ1的键盘和级联从片的IRQ2,其它全部关闭 */
	outb (PIC_M_DATA, 0xf8);
c0001656:	68 f8 00 00 00       	push   $0xf8
c000165b:	6a 21                	push   $0x21
c000165d:	e8 63 ff ff ff       	call   c00015c5 <outb>
c0001662:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:58
	/* 打开从片上的IRQ14,此引脚接收硬盘控制器的中断 */
	outb (PIC_S_DATA, 0xbf);
c0001665:	68 bf 00 00 00       	push   $0xbf
c000166a:	68 a1 00 00 00       	push   $0xa1
c000166f:	e8 51 ff ff ff       	call   c00015c5 <outb>
c0001674:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:60

	put_str("   pic_init done\n");
c0001677:	83 ec 0c             	sub    $0xc,%esp
c000167a:	68 20 b5 00 c0       	push   $0xc000b520
c000167f:	e8 ec 0a 00 00       	call   c0002170 <put_str>
c0001684:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:61
}
c0001687:	90                   	nop
c0001688:	c9                   	leave  
c0001689:	c3                   	ret    

c000168a <make_idt_desc>:
make_idt_desc():
/work/x86_os_my/kernel/interrupt.c:64

/* 创建中断门描述符 */
static void make_idt_desc(struct gate_desc* p_gdesc, uint8_t attr, intr_handler function) { 
c000168a:	55                   	push   %ebp
c000168b:	89 e5                	mov    %esp,%ebp
c000168d:	83 ec 04             	sub    $0x4,%esp
c0001690:	8b 45 0c             	mov    0xc(%ebp),%eax
c0001693:	88 45 fc             	mov    %al,-0x4(%ebp)
/work/x86_os_my/kernel/interrupt.c:65
	p_gdesc->func_offset_low_word = (uint32_t)function & 0x0000FFFF;
c0001696:	8b 45 10             	mov    0x10(%ebp),%eax
c0001699:	89 c2                	mov    %eax,%edx
c000169b:	8b 45 08             	mov    0x8(%ebp),%eax
c000169e:	66 89 10             	mov    %dx,(%eax)
/work/x86_os_my/kernel/interrupt.c:66
	p_gdesc->selector = SELECTOR_K_CODE;
c00016a1:	8b 45 08             	mov    0x8(%ebp),%eax
c00016a4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
/work/x86_os_my/kernel/interrupt.c:67
	p_gdesc->dcount = 0;
c00016aa:	8b 45 08             	mov    0x8(%ebp),%eax
c00016ad:	c6 40 04 00          	movb   $0x0,0x4(%eax)
/work/x86_os_my/kernel/interrupt.c:68
	p_gdesc->attribute = attr;
c00016b1:	8b 45 08             	mov    0x8(%ebp),%eax
c00016b4:	0f b6 55 fc          	movzbl -0x4(%ebp),%edx
c00016b8:	88 50 05             	mov    %dl,0x5(%eax)
/work/x86_os_my/kernel/interrupt.c:69
	p_gdesc->func_offset_high_word = ((uint32_t)function & 0xFFFF0000) >> 16;
c00016bb:	8b 45 10             	mov    0x10(%ebp),%eax
c00016be:	c1 e8 10             	shr    $0x10,%eax
c00016c1:	89 c2                	mov    %eax,%edx
c00016c3:	8b 45 08             	mov    0x8(%ebp),%eax
c00016c6:	66 89 50 06          	mov    %dx,0x6(%eax)
/work/x86_os_my/kernel/interrupt.c:70
}
c00016ca:	90                   	nop
c00016cb:	c9                   	leave  
c00016cc:	c3                   	ret    

c00016cd <idt_desc_init>:
idt_desc_init():
/work/x86_os_my/kernel/interrupt.c:73

/*初始化中断描述符表*/
static void idt_desc_init(void) {
c00016cd:	55                   	push   %ebp
c00016ce:	89 e5                	mov    %esp,%ebp
c00016d0:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/interrupt.c:75
	int i;
	int lastindex = IDT_DESC_CNT - 1;
c00016d3:	c7 45 f0 80 00 00 00 	movl   $0x80,-0x10(%ebp)
/work/x86_os_my/kernel/interrupt.c:76
	for (i = 0; i < IDT_DESC_CNT; i++) {
c00016da:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c00016e1:	eb 29                	jmp    c000170c <idt_desc_init+0x3f>
/work/x86_os_my/kernel/interrupt.c:77 (discriminator 3)
		make_idt_desc(&idt[i], IDT_DESC_ATTR_DPL0, intr_entry_table[i]); 
c00016e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00016e6:	8b 04 85 e0 02 01 c0 	mov    -0x3ffefd20(,%eax,4),%eax
c00016ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
c00016f0:	c1 e2 03             	shl    $0x3,%edx
c00016f3:	81 c2 40 04 01 c0    	add    $0xc0010440,%edx
c00016f9:	50                   	push   %eax
c00016fa:	68 8e 00 00 00       	push   $0x8e
c00016ff:	52                   	push   %edx
c0001700:	e8 85 ff ff ff       	call   c000168a <make_idt_desc>
c0001705:	83 c4 0c             	add    $0xc,%esp
/work/x86_os_my/kernel/interrupt.c:76 (discriminator 3)

/*初始化中断描述符表*/
static void idt_desc_init(void) {
	int i;
	int lastindex = IDT_DESC_CNT - 1;
	for (i = 0; i < IDT_DESC_CNT; i++) {
c0001708:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:76 (discriminator 1)
c000170c:	81 7d f4 80 00 00 00 	cmpl   $0x80,-0xc(%ebp)
c0001713:	7e ce                	jle    c00016e3 <idt_desc_init+0x16>
/work/x86_os_my/kernel/interrupt.c:81
		make_idt_desc(&idt[i], IDT_DESC_ATTR_DPL0, intr_entry_table[i]); 
	}
	/* 系统调用对应的中断门dpl为3！
	 * 中断处理程序为单独的syscall_handler */
	make_idt_desc(&idt[lastindex], IDT_DESC_ATTR_DPL3, syscall_handler);
c0001715:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0001718:	c1 e0 03             	shl    $0x3,%eax
c000171b:	05 40 04 01 c0       	add    $0xc0010440,%eax
c0001720:	68 47 21 00 c0       	push   $0xc0002147
c0001725:	68 ee 00 00 00       	push   $0xee
c000172a:	50                   	push   %eax
c000172b:	e8 5a ff ff ff       	call   c000168a <make_idt_desc>
c0001730:	83 c4 0c             	add    $0xc,%esp
/work/x86_os_my/kernel/interrupt.c:82
	put_str("   idt_desc_init done\n");
c0001733:	83 ec 0c             	sub    $0xc,%esp
c0001736:	68 32 b5 00 c0       	push   $0xc000b532
c000173b:	e8 30 0a 00 00       	call   c0002170 <put_str>
c0001740:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:83
}
c0001743:	90                   	nop
c0001744:	c9                   	leave  
c0001745:	c3                   	ret    

c0001746 <general_intr_handler>:
general_intr_handler():
/work/x86_os_my/kernel/interrupt.c:86

/* 通用的中断处理函数,一般用在异常出现时的处理 */
static void general_intr_handler(uint8_t vec_nr) {
c0001746:	55                   	push   %ebp
c0001747:	89 e5                	mov    %esp,%ebp
c0001749:	83 ec 28             	sub    $0x28,%esp
c000174c:	8b 45 08             	mov    0x8(%ebp),%eax
c000174f:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/kernel/interrupt.c:87
	if (vec_nr == 0x27 || vec_nr == 0x2f) {	// 0x2f是从片8259A上的最后一个irq引脚，保留
c0001752:	80 7d e4 27          	cmpb   $0x27,-0x1c(%ebp)
c0001756:	0f 84 bf 00 00 00    	je     c000181b <general_intr_handler+0xd5>
/work/x86_os_my/kernel/interrupt.c:87 (discriminator 1)
c000175c:	80 7d e4 2f          	cmpb   $0x2f,-0x1c(%ebp)
c0001760:	0f 84 b5 00 00 00    	je     c000181b <general_intr_handler+0xd5>
/work/x86_os_my/kernel/interrupt.c:92
		return;	//IRQ7和IRQ15会产生伪中断(spurious interrupt),无须处理。
	}
	
	/* 将光标置为左上角 并清空一片区域 */
	set_cursor(0);
c0001766:	83 ec 0c             	sub    $0xc,%esp
c0001769:	6a 00                	push   $0x0
c000176b:	e8 8d 0b 00 00       	call   c00022fd <set_cursor>
c0001770:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:93
	int cursor_pos = 0;
c0001773:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:94
	while(cursor_pos < 320) {
c000177a:	eb 11                	jmp    c000178d <general_intr_handler+0x47>
/work/x86_os_my/kernel/interrupt.c:95
		put_char(' ');
c000177c:	83 ec 0c             	sub    $0xc,%esp
c000177f:	6a 20                	push   $0x20
c0001781:	e8 08 0a 00 00       	call   c000218e <put_char>
c0001786:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:96
		cursor_pos++;
c0001789:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:94
	}
	
	/* 将光标置为左上角 并清空一片区域 */
	set_cursor(0);
	int cursor_pos = 0;
	while(cursor_pos < 320) {
c000178d:	81 7d f4 3f 01 00 00 	cmpl   $0x13f,-0xc(%ebp)
c0001794:	7e e6                	jle    c000177c <general_intr_handler+0x36>
/work/x86_os_my/kernel/interrupt.c:100
		put_char(' ');
		cursor_pos++;
	}

	/* 将光标置为左上角 打印信息 */
	set_cursor(0);
c0001796:	83 ec 0c             	sub    $0xc,%esp
c0001799:	6a 00                	push   $0x0
c000179b:	e8 5d 0b 00 00       	call   c00022fd <set_cursor>
c00017a0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:101
	put_str("!!!!!!!      excetion message begin  !!!!!!!!\n");
c00017a3:	83 ec 0c             	sub    $0xc,%esp
c00017a6:	68 4c b5 00 c0       	push   $0xc000b54c
c00017ab:	e8 c0 09 00 00       	call   c0002170 <put_str>
c00017b0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:102
	set_cursor(88);			// 第2行第8个字符
c00017b3:	83 ec 0c             	sub    $0xc,%esp
c00017b6:	6a 58                	push   $0x58
c00017b8:	e8 40 0b 00 00       	call   c00022fd <set_cursor>
c00017bd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:103
	put_str(intr_name[vec_nr]);
c00017c0:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c00017c4:	8b 04 85 00 0f 01 c0 	mov    -0x3ffef100(,%eax,4),%eax
c00017cb:	83 ec 0c             	sub    $0xc,%esp
c00017ce:	50                   	push   %eax
c00017cf:	e8 9c 09 00 00       	call   c0002170 <put_str>
c00017d4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:104
	if (vec_nr == 14) {		// 若为Pagefault,将缺失的地址打印出来并悬停
c00017d7:	80 7d e4 0e          	cmpb   $0xe,-0x1c(%ebp)
c00017db:	75 2c                	jne    c0001809 <general_intr_handler+0xc3>
/work/x86_os_my/kernel/interrupt.c:105
		int page_fault_vaddr = 0; 
c00017dd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/kernel/interrupt.c:106
		asm ("movl %%cr2, %0" : "=r" (page_fault_vaddr));	  // cr2是存放造成page_fault的地址
c00017e4:	0f 20 d0             	mov    %cr2,%eax
c00017e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/interrupt.c:107
		put_str("\npage fault addr is 0x");
c00017ea:	83 ec 0c             	sub    $0xc,%esp
c00017ed:	68 7b b5 00 c0       	push   $0xc000b57b
c00017f2:	e8 79 09 00 00       	call   c0002170 <put_str>
c00017f7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:108
		put_int(page_fault_vaddr); 
c00017fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00017fd:	83 ec 0c             	sub    $0xc,%esp
c0001800:	50                   	push   %eax
c0001801:	e8 94 0a 00 00       	call   c000229a <put_int>
c0001806:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:110
	}
	put_str("\n!!!!!!!      excetion message end    !!!!!!!!\n");
c0001809:	83 ec 0c             	sub    $0xc,%esp
c000180c:	68 94 b5 00 c0       	push   $0xc000b594
c0001811:	e8 5a 09 00 00       	call   c0002170 <put_str>
c0001816:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:113 (discriminator 1)
	// 能进入中断处理程序就表示已经处在关中断情况下, IF=0
	// 不会出现调度进程的情况。故下面的死循环不会再被中断，会卡死在这里。
	while(1);
c0001819:	eb fe                	jmp    c0001819 <general_intr_handler+0xd3>
/work/x86_os_my/kernel/interrupt.c:88
}

/* 通用的中断处理函数,一般用在异常出现时的处理 */
static void general_intr_handler(uint8_t vec_nr) {
	if (vec_nr == 0x27 || vec_nr == 0x2f) {	// 0x2f是从片8259A上的最后一个irq引脚，保留
		return;	//IRQ7和IRQ15会产生伪中断(spurious interrupt),无须处理。
c000181b:	90                   	nop
/work/x86_os_my/kernel/interrupt.c:114
	}
	put_str("\n!!!!!!!      excetion message end    !!!!!!!!\n");
	// 能进入中断处理程序就表示已经处在关中断情况下, IF=0
	// 不会出现调度进程的情况。故下面的死循环不会再被中断，会卡死在这里。
	while(1);
}
c000181c:	c9                   	leave  
c000181d:	c3                   	ret    

c000181e <exception_init>:
exception_init():
/work/x86_os_my/kernel/interrupt.c:117

/* 完成一般中断处理函数注册及异常名称注册 */
static void exception_init(void) {
c000181e:	55                   	push   %ebp
c000181f:	89 e5                	mov    %esp,%ebp
c0001821:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:119
	int i;
	for (i = 0; i < IDT_DESC_CNT; i++) {
c0001824:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c000182b:	eb 20                	jmp    c000184d <exception_init+0x2f>
/work/x86_os_my/kernel/interrupt.c:122 (discriminator 3)
	/* idt_table数组中的函数是在进入中断后根据中断向量号调用的,
	 * 见kernel/kernel.S的call [idt_table + %1*4] */
		idt_table[i] = general_intr_handler;		// 默认为general_intr_handler，以后会由register_handler来注册具体处理函数。
c000182d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0001830:	c7 04 85 20 11 01 c0 	movl   $0xc0001746,-0x3ffeeee0(,%eax,4)
c0001837:	46 17 00 c0 
/work/x86_os_my/kernel/interrupt.c:123 (discriminator 3)
		intr_name[i] = "unknown";					// 先统一赋值为unknown 
c000183b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000183e:	c7 04 85 00 0f 01 c0 	movl   $0xc000b5c4,-0x3ffef100(,%eax,4)
c0001845:	c4 b5 00 c0 
/work/x86_os_my/kernel/interrupt.c:119 (discriminator 3)
}

/* 完成一般中断处理函数注册及异常名称注册 */
static void exception_init(void) {
	int i;
	for (i = 0; i < IDT_DESC_CNT; i++) {
c0001849:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
/work/x86_os_my/kernel/interrupt.c:119 (discriminator 1)
c000184d:	81 7d fc 80 00 00 00 	cmpl   $0x80,-0x4(%ebp)
c0001854:	7e d7                	jle    c000182d <exception_init+0xf>
/work/x86_os_my/kernel/interrupt.c:125
	/* idt_table数组中的函数是在进入中断后根据中断向量号调用的,
	 * 见kernel/kernel.S的call [idt_table + %1*4] */
		idt_table[i] = general_intr_handler;		// 默认为general_intr_handler，以后会由register_handler来注册具体处理函数。
		intr_name[i] = "unknown";					// 先统一赋值为unknown 
	}
	intr_name[0] = "#DE Divide Error";
c0001856:	c7 05 00 0f 01 c0 cc 	movl   $0xc000b5cc,0xc0010f00
c000185d:	b5 00 c0 
/work/x86_os_my/kernel/interrupt.c:126
	intr_name[1] = "#DB Debug Exception";
c0001860:	c7 05 04 0f 01 c0 dd 	movl   $0xc000b5dd,0xc0010f04
c0001867:	b5 00 c0 
/work/x86_os_my/kernel/interrupt.c:127
	intr_name[2] = "NMI Interrupt";
c000186a:	c7 05 08 0f 01 c0 f1 	movl   $0xc000b5f1,0xc0010f08
c0001871:	b5 00 c0 
/work/x86_os_my/kernel/interrupt.c:128
	intr_name[3] = "#BP Breakpoint Exception";
c0001874:	c7 05 0c 0f 01 c0 ff 	movl   $0xc000b5ff,0xc0010f0c
c000187b:	b5 00 c0 
/work/x86_os_my/kernel/interrupt.c:129
	intr_name[4] = "#OF Overflow Exception";
c000187e:	c7 05 10 0f 01 c0 18 	movl   $0xc000b618,0xc0010f10
c0001885:	b6 00 c0 
/work/x86_os_my/kernel/interrupt.c:130
	intr_name[5] = "#BR BOUND Range Exceeded Exception";
c0001888:	c7 05 14 0f 01 c0 30 	movl   $0xc000b630,0xc0010f14
c000188f:	b6 00 c0 
/work/x86_os_my/kernel/interrupt.c:131
	intr_name[6] = "#UD Invalid Opcode Exception";
c0001892:	c7 05 18 0f 01 c0 53 	movl   $0xc000b653,0xc0010f18
c0001899:	b6 00 c0 
/work/x86_os_my/kernel/interrupt.c:132
	intr_name[7] = "#NM Device Not Available Exception";
c000189c:	c7 05 1c 0f 01 c0 70 	movl   $0xc000b670,0xc0010f1c
c00018a3:	b6 00 c0 
/work/x86_os_my/kernel/interrupt.c:133
	intr_name[8] = "#DF Double Fault Exception";
c00018a6:	c7 05 20 0f 01 c0 93 	movl   $0xc000b693,0xc0010f20
c00018ad:	b6 00 c0 
/work/x86_os_my/kernel/interrupt.c:134
	intr_name[9] = "Coprocessor Segment Overrun";
c00018b0:	c7 05 24 0f 01 c0 ae 	movl   $0xc000b6ae,0xc0010f24
c00018b7:	b6 00 c0 
/work/x86_os_my/kernel/interrupt.c:135
	intr_name[10] = "#TS Invalid TSS Exception";
c00018ba:	c7 05 28 0f 01 c0 ca 	movl   $0xc000b6ca,0xc0010f28
c00018c1:	b6 00 c0 
/work/x86_os_my/kernel/interrupt.c:136
	intr_name[11] = "#NP Segment Not Present";
c00018c4:	c7 05 2c 0f 01 c0 e4 	movl   $0xc000b6e4,0xc0010f2c
c00018cb:	b6 00 c0 
/work/x86_os_my/kernel/interrupt.c:137
	intr_name[12] = "#SS Stack Fault Exception";
c00018ce:	c7 05 30 0f 01 c0 fc 	movl   $0xc000b6fc,0xc0010f30
c00018d5:	b6 00 c0 
/work/x86_os_my/kernel/interrupt.c:138
	intr_name[13] = "#GP General Protection Exception";
c00018d8:	c7 05 34 0f 01 c0 18 	movl   $0xc000b718,0xc0010f34
c00018df:	b7 00 c0 
/work/x86_os_my/kernel/interrupt.c:139
	intr_name[14] = "#PF Page-Fault Exception";
c00018e2:	c7 05 38 0f 01 c0 39 	movl   $0xc000b739,0xc0010f38
c00018e9:	b7 00 c0 
/work/x86_os_my/kernel/interrupt.c:141
	// intr_name[15] 第15项是intel保留项，未使用
	intr_name[16] = "#MF x87 FPU Floating-Point Error";
c00018ec:	c7 05 40 0f 01 c0 54 	movl   $0xc000b754,0xc0010f40
c00018f3:	b7 00 c0 
/work/x86_os_my/kernel/interrupt.c:142
	intr_name[17] = "#AC Alignment Check Exception";
c00018f6:	c7 05 44 0f 01 c0 75 	movl   $0xc000b775,0xc0010f44
c00018fd:	b7 00 c0 
/work/x86_os_my/kernel/interrupt.c:143
	intr_name[18] = "#MC Machine-Check Exception";
c0001900:	c7 05 48 0f 01 c0 93 	movl   $0xc000b793,0xc0010f48
c0001907:	b7 00 c0 
/work/x86_os_my/kernel/interrupt.c:144
	intr_name[19] = "#XF SIMD Floating-Point Exception";
c000190a:	c7 05 4c 0f 01 c0 b0 	movl   $0xc000b7b0,0xc0010f4c
c0001911:	b7 00 c0 
/work/x86_os_my/kernel/interrupt.c:145
}
c0001914:	90                   	nop
c0001915:	c9                   	leave  
c0001916:	c3                   	ret    

c0001917 <intr_enable>:
intr_enable():
/work/x86_os_my/kernel/interrupt.c:148

/* 开中断并返回开中断前的状态*/
enum intr_status intr_enable() {
c0001917:	55                   	push   %ebp
c0001918:	89 e5                	mov    %esp,%ebp
c000191a:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/interrupt.c:150
	enum intr_status old_status;
	if (INTR_ON == intr_get_status()) {
c000191d:	e8 65 00 00 00       	call   c0001987 <intr_get_status>
c0001922:	83 f8 01             	cmp    $0x1,%eax
c0001925:	75 0c                	jne    c0001933 <intr_enable+0x1c>
/work/x86_os_my/kernel/interrupt.c:151
		old_status = INTR_ON;
c0001927:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:152
		return old_status;
c000192e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001931:	eb 0b                	jmp    c000193e <intr_enable+0x27>
/work/x86_os_my/kernel/interrupt.c:154
	} else {
		old_status = INTR_OFF;
c0001933:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:155
		asm volatile("sti");	 // 开中断,sti指令将IF位置1
c000193a:	fb                   	sti    
/work/x86_os_my/kernel/interrupt.c:156
		return old_status;
c000193b:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/kernel/interrupt.c:158
	}
}
c000193e:	c9                   	leave  
c000193f:	c3                   	ret    

c0001940 <intr_disable>:
intr_disable():
/work/x86_os_my/kernel/interrupt.c:161

/* 关中断,并且返回关中断前的状态 */
enum intr_status intr_disable() {     
c0001940:	55                   	push   %ebp
c0001941:	89 e5                	mov    %esp,%ebp
c0001943:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/interrupt.c:163
	enum intr_status old_status;
	if (INTR_ON == intr_get_status()) {
c0001946:	e8 3c 00 00 00       	call   c0001987 <intr_get_status>
c000194b:	83 f8 01             	cmp    $0x1,%eax
c000194e:	75 0d                	jne    c000195d <intr_disable+0x1d>
/work/x86_os_my/kernel/interrupt.c:164
		old_status = INTR_ON;
c0001950:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:165
		asm volatile("cli" : : : "memory"); // 关中断,cli指令将IF位置0
c0001957:	fa                   	cli    
/work/x86_os_my/kernel/interrupt.c:166
		return old_status;
c0001958:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000195b:	eb 0a                	jmp    c0001967 <intr_disable+0x27>
/work/x86_os_my/kernel/interrupt.c:168
	} else {
		old_status = INTR_OFF;
c000195d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:169
		return old_status;
c0001964:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/kernel/interrupt.c:171
	}
}
c0001967:	c9                   	leave  
c0001968:	c3                   	ret    

c0001969 <intr_set_status>:
intr_set_status():
/work/x86_os_my/kernel/interrupt.c:174

/* 将中断状态设置为status */
enum intr_status intr_set_status(enum intr_status status) {
c0001969:	55                   	push   %ebp
c000196a:	89 e5                	mov    %esp,%ebp
c000196c:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:175
	return status & INTR_ON ? intr_enable() : intr_disable();
c000196f:	8b 45 08             	mov    0x8(%ebp),%eax
c0001972:	83 e0 01             	and    $0x1,%eax
c0001975:	85 c0                	test   %eax,%eax
c0001977:	74 07                	je     c0001980 <intr_set_status+0x17>
/work/x86_os_my/kernel/interrupt.c:175 (discriminator 1)
c0001979:	e8 99 ff ff ff       	call   c0001917 <intr_enable>
c000197e:	eb 05                	jmp    c0001985 <intr_set_status+0x1c>
/work/x86_os_my/kernel/interrupt.c:175 (discriminator 2)
c0001980:	e8 bb ff ff ff       	call   c0001940 <intr_disable>
/work/x86_os_my/kernel/interrupt.c:176 (discriminator 5)
}
c0001985:	c9                   	leave  
c0001986:	c3                   	ret    

c0001987 <intr_get_status>:
intr_get_status():
/work/x86_os_my/kernel/interrupt.c:179

/* 获取当前中断状态 */
enum intr_status intr_get_status() {
c0001987:	55                   	push   %ebp
c0001988:	89 e5                	mov    %esp,%ebp
c000198a:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:180
	uint32_t eflags = 0; 
c000198d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
/work/x86_os_my/kernel/interrupt.c:181
	GET_EFLAGS(eflags);
c0001994:	9c                   	pushf  
c0001995:	58                   	pop    %eax
c0001996:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/kernel/interrupt.c:182
	return (EFLAGS_IF & eflags) ? INTR_ON : INTR_OFF;
c0001999:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000199c:	25 00 02 00 00       	and    $0x200,%eax
c00019a1:	85 c0                	test   %eax,%eax
c00019a3:	0f 95 c0             	setne  %al
c00019a6:	0f b6 c0             	movzbl %al,%eax
/work/x86_os_my/kernel/interrupt.c:183
}
c00019a9:	c9                   	leave  
c00019aa:	c3                   	ret    

c00019ab <register_handler>:
register_handler():
/work/x86_os_my/kernel/interrupt.c:186

/* 在中断处理程序数组第vector_no个元素中注册安装中断处理程序function */
void register_handler(uint8_t vector_no, intr_handler function) {
c00019ab:	55                   	push   %ebp
c00019ac:	89 e5                	mov    %esp,%ebp
c00019ae:	83 ec 04             	sub    $0x4,%esp
c00019b1:	8b 45 08             	mov    0x8(%ebp),%eax
c00019b4:	88 45 fc             	mov    %al,-0x4(%ebp)
/work/x86_os_my/kernel/interrupt.c:189
/* idt_table数组中的函数是在进入中断后根据中断向量号调用的,
 * 见kernel/kernel.S的call [idt_table + %1*4] */
   idt_table[vector_no] = function; 
c00019b7:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c00019bb:	8b 55 0c             	mov    0xc(%ebp),%edx
c00019be:	89 14 85 20 11 01 c0 	mov    %edx,-0x3ffeeee0(,%eax,4)
/work/x86_os_my/kernel/interrupt.c:190
}
c00019c5:	90                   	nop
c00019c6:	c9                   	leave  
c00019c7:	c3                   	ret    

c00019c8 <idt_init>:
idt_init():
/work/x86_os_my/kernel/interrupt.c:193

/*完成有关中断的所有初始化工作*/
void idt_init() {
c00019c8:	55                   	push   %ebp
c00019c9:	89 e5                	mov    %esp,%ebp
c00019cb:	56                   	push   %esi
c00019cc:	53                   	push   %ebx
c00019cd:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:194
	put_str("idt_init start\n");
c00019d0:	83 ec 0c             	sub    $0xc,%esp
c00019d3:	68 d2 b7 00 c0       	push   $0xc000b7d2
c00019d8:	e8 93 07 00 00       	call   c0002170 <put_str>
c00019dd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:195
	idt_desc_init();	// 初始化中断描述符表
c00019e0:	e8 e8 fc ff ff       	call   c00016cd <idt_desc_init>
/work/x86_os_my/kernel/interrupt.c:196
	exception_init();	// 异常名初始化并注册通常的中断处理函数
c00019e5:	e8 34 fe ff ff       	call   c000181e <exception_init>
/work/x86_os_my/kernel/interrupt.c:197
	pic_init();			// 初始化8259A
c00019ea:	e8 f5 fb ff ff       	call   c00015e4 <pic_init>
/work/x86_os_my/kernel/interrupt.c:201

	/* 加载idt */
	// IDTR 是 48 位的寄存器，低 16 位是 IDT 的界限 = IDT 尺寸大小-1，高 32 位是 IDT 的线性基地址
	uint64_t idt_operand = ((sizeof(idt) - 1) | ((uint64_t)(uint32_t)idt << 16));
c00019ef:	b8 40 04 01 c0       	mov    $0xc0010440,%eax
c00019f4:	ba 00 00 00 00       	mov    $0x0,%edx
c00019f9:	0f a4 c2 10          	shld   $0x10,%eax,%edx
c00019fd:	c1 e0 10             	shl    $0x10,%eax
c0001a00:	89 c1                	mov    %eax,%ecx
c0001a02:	81 c9 07 04 00 00    	or     $0x407,%ecx
c0001a08:	89 cb                	mov    %ecx,%ebx
c0001a0a:	89 d0                	mov    %edx,%eax
c0001a0c:	80 cc 00             	or     $0x0,%ah
c0001a0f:	89 c6                	mov    %eax,%esi
c0001a11:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c0001a14:	89 75 f4             	mov    %esi,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:202
	asm volatile("lidt %0" : : "m" (idt_operand));
c0001a17:	0f 01 5d f0          	lidtl  -0x10(%ebp)
/work/x86_os_my/kernel/interrupt.c:203
	put_str("idt_init done\n");
c0001a1b:	83 ec 0c             	sub    $0xc,%esp
c0001a1e:	68 e2 b7 00 c0       	push   $0xc000b7e2
c0001a23:	e8 48 07 00 00       	call   c0002170 <put_str>
c0001a28:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:204
}
c0001a2b:	90                   	nop
c0001a2c:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0001a2f:	5b                   	pop    %ebx
c0001a30:	5e                   	pop    %esi
c0001a31:	5d                   	pop    %ebp
c0001a32:	c3                   	ret    

c0001a33 <outb>:
outb():
/work/x86_os_my/lib/kernel/io.h:17
#define __LIB_IO_H
#include "stdint.h"
//inline省去了函数调用开支

/* 向端口port写入一个字节*/
static inline void outb(uint16_t port, uint8_t data) {
c0001a33:	55                   	push   %ebp
c0001a34:	89 e5                	mov    %esp,%ebp
c0001a36:	83 ec 08             	sub    $0x8,%esp
c0001a39:	8b 55 08             	mov    0x8(%ebp),%edx
c0001a3c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0001a3f:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c0001a43:	88 45 f8             	mov    %al,-0x8(%ebp)
/work/x86_os_my/lib/kernel/io.h:21
/*********************************************************
 a表示用寄存器al或ax或eax,对端口指定N表示0~255, d表示用dx存储端口号, 
 %b0表示对应al,%w1表示对应dx */ 
   asm volatile ( "outb %b0, %w1" : : "a" (data), "Nd" (port));    
c0001a46:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c0001a4a:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0001a4e:	ee                   	out    %al,(%dx)
/work/x86_os_my/lib/kernel/io.h:23
/******************************************************/
}
c0001a4f:	90                   	nop
c0001a50:	c9                   	leave  
c0001a51:	c3                   	ret    

c0001a52 <frequency_set>:
frequency_set():
/work/x86_os_my/device/timer.c:27
/* 把操作的计数器counter_no、读写锁属性rwl、计数器模式counter_mode写入模式控制寄存器并赋予初始值counter_value */
static void frequency_set(uint8_t counter_port, \
		uint8_t counter_no, \
		uint8_t rwl, \
		uint8_t counter_mode, \
		uint16_t counter_value) {
c0001a52:	55                   	push   %ebp
c0001a53:	89 e5                	mov    %esp,%ebp
c0001a55:	56                   	push   %esi
c0001a56:	53                   	push   %ebx
c0001a57:	83 ec 14             	sub    $0x14,%esp
c0001a5a:	8b 45 08             	mov    0x8(%ebp),%eax
c0001a5d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c0001a60:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0001a63:	8b 55 14             	mov    0x14(%ebp),%edx
c0001a66:	8b 75 18             	mov    0x18(%ebp),%esi
c0001a69:	88 45 f4             	mov    %al,-0xc(%ebp)
c0001a6c:	88 5d f0             	mov    %bl,-0x10(%ebp)
c0001a6f:	88 4d ec             	mov    %cl,-0x14(%ebp)
c0001a72:	88 55 e8             	mov    %dl,-0x18(%ebp)
c0001a75:	66 89 75 e4          	mov    %si,-0x1c(%ebp)
/work/x86_os_my/device/timer.c:29
	/* 往控制字寄存器端口0x43中写入控制字 */
	outb(PIT_CONTROL_PORT, (uint8_t)(counter_no << 6 | rwl << 4 | counter_mode << 1));
c0001a79:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c0001a7d:	c1 e0 06             	shl    $0x6,%eax
c0001a80:	89 c2                	mov    %eax,%edx
c0001a82:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0001a86:	c1 e0 04             	shl    $0x4,%eax
c0001a89:	09 c2                	or     %eax,%edx
c0001a8b:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c0001a8f:	01 c0                	add    %eax,%eax
c0001a91:	09 d0                	or     %edx,%eax
c0001a93:	0f b6 c0             	movzbl %al,%eax
c0001a96:	50                   	push   %eax
c0001a97:	6a 43                	push   $0x43
c0001a99:	e8 95 ff ff ff       	call   c0001a33 <outb>
c0001a9e:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/timer.c:31
	/* 先写入counter_value的低8位 */
	outb(counter_port, (uint8_t)counter_value);
c0001aa1:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
c0001aa5:	0f b6 d0             	movzbl %al,%edx
c0001aa8:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0001aac:	52                   	push   %edx
c0001aad:	50                   	push   %eax
c0001aae:	e8 80 ff ff ff       	call   c0001a33 <outb>
c0001ab3:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/timer.c:33
	/* 再写入counter_value的高8位 */
	outb(counter_port, (uint8_t)counter_value >> 8);
c0001ab6:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0001aba:	6a 00                	push   $0x0
c0001abc:	50                   	push   %eax
c0001abd:	e8 71 ff ff ff       	call   c0001a33 <outb>
c0001ac2:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/timer.c:34
}
c0001ac5:	90                   	nop
c0001ac6:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0001ac9:	5b                   	pop    %ebx
c0001aca:	5e                   	pop    %esi
c0001acb:	5d                   	pop    %ebp
c0001acc:	c3                   	ret    

c0001acd <intr_timer_handler>:
intr_timer_handler():
/work/x86_os_my/device/timer.c:37

/* 时钟的中断处理函数 */
static void intr_timer_handler(void) {
c0001acd:	55                   	push   %ebp
c0001ace:	89 e5                	mov    %esp,%ebp
c0001ad0:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/timer.c:38
	struct task_struct* cur_thread = running_thread();		// 返回线程PCB
c0001ad3:	e8 d2 20 00 00       	call   c0003baa <running_thread>
c0001ad8:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/timer.c:40

	ASSERT(cur_thread->stack_magic == 0x19870916);			// 检查栈是否溢出
c0001adb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001ade:	8b 80 14 01 00 00    	mov    0x114(%eax),%eax
c0001ae4:	3d 16 09 87 19       	cmp    $0x19870916,%eax
c0001ae9:	74 19                	je     c0001b04 <intr_timer_handler+0x37>
/work/x86_os_my/device/timer.c:40 (discriminator 1)
c0001aeb:	68 f4 b7 00 c0       	push   $0xc000b7f4
c0001af0:	68 5c b8 00 c0       	push   $0xc000b85c
c0001af5:	6a 28                	push   $0x28
c0001af7:	68 1a b8 00 c0       	push   $0xc000b81a
c0001afc:	e8 20 08 00 00       	call   c0002321 <panic_spin>
c0001b01:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:42

	cur_thread->elapsed_ticks++;// 记录此线程占用的cpu时间
c0001b04:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001b07:	8b 40 20             	mov    0x20(%eax),%eax
c0001b0a:	8d 50 01             	lea    0x1(%eax),%edx
c0001b0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001b10:	89 50 20             	mov    %edx,0x20(%eax)
/work/x86_os_my/device/timer.c:43
	ticks++;	//从内核第一次处理时间中断开始,至今的滴哒数,是内核态和用户态总共的嘀哒数
c0001b13:	a1 24 13 01 c0       	mov    0xc0011324,%eax
c0001b18:	83 c0 01             	add    $0x1,%eax
c0001b1b:	a3 24 13 01 c0       	mov    %eax,0xc0011324
/work/x86_os_my/device/timer.c:45

	if (cur_thread->ticks == 0) {
c0001b20:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001b23:	0f b6 40 1d          	movzbl 0x1d(%eax),%eax
c0001b27:	84 c0                	test   %al,%al
c0001b29:	75 07                	jne    c0001b32 <intr_timer_handler+0x65>
/work/x86_os_my/device/timer.c:46
		schedule();				// 若进程时间片用完就开始调度新的进程上cpu
c0001b2b:	e8 d0 23 00 00       	call   c0003f00 <schedule>
/work/x86_os_my/device/timer.c:50
	} else {
		cur_thread->ticks--;	// 将当前进程的时间片-1
	}
}
c0001b30:	eb 10                	jmp    c0001b42 <intr_timer_handler+0x75>
/work/x86_os_my/device/timer.c:48
	ticks++;	//从内核第一次处理时间中断开始,至今的滴哒数,是内核态和用户态总共的嘀哒数

	if (cur_thread->ticks == 0) {
		schedule();				// 若进程时间片用完就开始调度新的进程上cpu
	} else {
		cur_thread->ticks--;	// 将当前进程的时间片-1
c0001b32:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001b35:	0f b6 40 1d          	movzbl 0x1d(%eax),%eax
c0001b39:	8d 50 ff             	lea    -0x1(%eax),%edx
c0001b3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001b3f:	88 50 1d             	mov    %dl,0x1d(%eax)
/work/x86_os_my/device/timer.c:50
	}
}
c0001b42:	90                   	nop
c0001b43:	c9                   	leave  
c0001b44:	c3                   	ret    

c0001b45 <ticks_to_sleep>:
ticks_to_sleep():
/work/x86_os_my/device/timer.c:53

/* 以tick为单位的sleep,任何时间形式的sleep会转换此ticks形式 */
static void ticks_to_sleep(uint32_t sleep_ticks) {
c0001b45:	55                   	push   %ebp
c0001b46:	89 e5                	mov    %esp,%ebp
c0001b48:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/timer.c:54
	uint32_t start_tick = ticks;
c0001b4b:	a1 24 13 01 c0       	mov    0xc0011324,%eax
c0001b50:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/timer.c:57

	/* 若间隔的ticks数不够便让出cpu */
	while (ticks - start_tick < sleep_ticks) {
c0001b53:	eb 05                	jmp    c0001b5a <ticks_to_sleep+0x15>
/work/x86_os_my/device/timer.c:58
		thread_yield();
c0001b55:	e8 50 26 00 00       	call   c00041aa <thread_yield>
/work/x86_os_my/device/timer.c:57
/* 以tick为单位的sleep,任何时间形式的sleep会转换此ticks形式 */
static void ticks_to_sleep(uint32_t sleep_ticks) {
	uint32_t start_tick = ticks;

	/* 若间隔的ticks数不够便让出cpu */
	while (ticks - start_tick < sleep_ticks) {
c0001b5a:	a1 24 13 01 c0       	mov    0xc0011324,%eax
c0001b5f:	2b 45 f4             	sub    -0xc(%ebp),%eax
c0001b62:	3b 45 08             	cmp    0x8(%ebp),%eax
c0001b65:	72 ee                	jb     c0001b55 <ticks_to_sleep+0x10>
/work/x86_os_my/device/timer.c:60
		thread_yield();
	}
}
c0001b67:	90                   	nop
c0001b68:	c9                   	leave  
c0001b69:	c3                   	ret    

c0001b6a <mtime_sleep>:
mtime_sleep():
/work/x86_os_my/device/timer.c:62

void mtime_sleep(uint32_t m_seconds) {
c0001b6a:	55                   	push   %ebp
c0001b6b:	89 e5                	mov    %esp,%ebp
c0001b6d:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/timer.c:63
	uint32_t sleep_ticks = DIV_ROUND_UP(m_seconds, mil_seconds_per_intr);
c0001b70:	8b 45 08             	mov    0x8(%ebp),%eax
c0001b73:	83 c0 09             	add    $0x9,%eax
c0001b76:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
c0001b7b:	f7 e2                	mul    %edx
c0001b7d:	89 d0                	mov    %edx,%eax
c0001b7f:	c1 e8 03             	shr    $0x3,%eax
c0001b82:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/timer.c:64
	ASSERT(sleep_ticks > 0);
c0001b85:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0001b89:	75 19                	jne    c0001ba4 <mtime_sleep+0x3a>
/work/x86_os_my/device/timer.c:64 (discriminator 1)
c0001b8b:	68 29 b8 00 c0       	push   $0xc000b829
c0001b90:	68 70 b8 00 c0       	push   $0xc000b870
c0001b95:	6a 40                	push   $0x40
c0001b97:	68 1a b8 00 c0       	push   $0xc000b81a
c0001b9c:	e8 80 07 00 00       	call   c0002321 <panic_spin>
c0001ba1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:65
	ticks_to_sleep(sleep_ticks); 
c0001ba4:	83 ec 0c             	sub    $0xc,%esp
c0001ba7:	ff 75 f4             	pushl  -0xc(%ebp)
c0001baa:	e8 96 ff ff ff       	call   c0001b45 <ticks_to_sleep>
c0001baf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:66
}
c0001bb2:	90                   	nop
c0001bb3:	c9                   	leave  
c0001bb4:	c3                   	ret    

c0001bb5 <timer_init>:
timer_init():
/work/x86_os_my/device/timer.c:69

/* 初始化PIT8253 */
void timer_init() {
c0001bb5:	55                   	push   %ebp
c0001bb6:	89 e5                	mov    %esp,%ebp
c0001bb8:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/timer.c:70
	put_str("timer_init start\n");
c0001bbb:	83 ec 0c             	sub    $0xc,%esp
c0001bbe:	68 39 b8 00 c0       	push   $0xc000b839
c0001bc3:	e8 a8 05 00 00       	call   c0002170 <put_str>
c0001bc8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:72
	/* 设置8253的定时周期,也就是发中断的周期 */
	frequency_set(CONTRER0_PORT, COUNTER0_NO, READ_WRITE_LATCH, COUNTER_MODE, COUNTER0_VALUE);
c0001bcb:	83 ec 0c             	sub    $0xc,%esp
c0001bce:	68 9b 2e 00 00       	push   $0x2e9b
c0001bd3:	6a 02                	push   $0x2
c0001bd5:	6a 03                	push   $0x3
c0001bd7:	6a 00                	push   $0x0
c0001bd9:	6a 40                	push   $0x40
c0001bdb:	e8 72 fe ff ff       	call   c0001a52 <frequency_set>
c0001be0:	83 c4 20             	add    $0x20,%esp
/work/x86_os_my/device/timer.c:73
	register_handler(0x20, intr_timer_handler);
c0001be3:	83 ec 08             	sub    $0x8,%esp
c0001be6:	68 cd 1a 00 c0       	push   $0xc0001acd
c0001beb:	6a 20                	push   $0x20
c0001bed:	e8 b9 fd ff ff       	call   c00019ab <register_handler>
c0001bf2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:74
	put_str("timer_init done\n");
c0001bf5:	83 ec 0c             	sub    $0xc,%esp
c0001bf8:	68 4b b8 00 c0       	push   $0xc000b84b
c0001bfd:	e8 6e 05 00 00       	call   c0002170 <put_str>
c0001c02:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:75
}
c0001c05:	90                   	nop
c0001c06:	c9                   	leave  
c0001c07:	c3                   	ret    
c0001c08:	66 90                	xchg   %ax,%ax
c0001c0a:	66 90                	xchg   %ax,%ax
c0001c0c:	66 90                	xchg   %ax,%ax
c0001c0e:	66 90                	xchg   %ax,%ax

c0001c10 <intr_exit>:
intr_exit():
c0001c10:	83 c4 04             	add    $0x4,%esp
c0001c13:	61                   	popa   
c0001c14:	0f a9                	pop    %gs
c0001c16:	0f a1                	pop    %fs
c0001c18:	07                   	pop    %es
c0001c19:	1f                   	pop    %ds
c0001c1a:	83 c4 04             	add    $0x4,%esp
c0001c1d:	cf                   	iret   

c0001c1e <intr0x00entry>:
intr0x00entry():
c0001c1e:	6a 00                	push   $0x0
c0001c20:	1e                   	push   %ds
c0001c21:	06                   	push   %es
c0001c22:	0f a0                	push   %fs
c0001c24:	0f a8                	push   %gs
c0001c26:	60                   	pusha  
c0001c27:	b0 20                	mov    $0x20,%al
c0001c29:	e6 a0                	out    %al,$0xa0
c0001c2b:	e6 20                	out    %al,$0x20
c0001c2d:	6a 00                	push   $0x0
c0001c2f:	ff 15 20 11 01 c0    	call   *0xc0011120
c0001c35:	eb d9                	jmp    c0001c10 <intr_exit>

c0001c37 <intr0x01entry>:
intr0x01entry():
c0001c37:	6a 00                	push   $0x0
c0001c39:	1e                   	push   %ds
c0001c3a:	06                   	push   %es
c0001c3b:	0f a0                	push   %fs
c0001c3d:	0f a8                	push   %gs
c0001c3f:	60                   	pusha  
c0001c40:	b0 20                	mov    $0x20,%al
c0001c42:	e6 a0                	out    %al,$0xa0
c0001c44:	e6 20                	out    %al,$0x20
c0001c46:	6a 01                	push   $0x1
c0001c48:	ff 15 24 11 01 c0    	call   *0xc0011124
c0001c4e:	eb c0                	jmp    c0001c10 <intr_exit>

c0001c50 <intr0x02entry>:
intr0x02entry():
c0001c50:	6a 00                	push   $0x0
c0001c52:	1e                   	push   %ds
c0001c53:	06                   	push   %es
c0001c54:	0f a0                	push   %fs
c0001c56:	0f a8                	push   %gs
c0001c58:	60                   	pusha  
c0001c59:	b0 20                	mov    $0x20,%al
c0001c5b:	e6 a0                	out    %al,$0xa0
c0001c5d:	e6 20                	out    %al,$0x20
c0001c5f:	6a 02                	push   $0x2
c0001c61:	ff 15 28 11 01 c0    	call   *0xc0011128
c0001c67:	eb a7                	jmp    c0001c10 <intr_exit>

c0001c69 <intr0x03entry>:
intr0x03entry():
c0001c69:	6a 00                	push   $0x0
c0001c6b:	1e                   	push   %ds
c0001c6c:	06                   	push   %es
c0001c6d:	0f a0                	push   %fs
c0001c6f:	0f a8                	push   %gs
c0001c71:	60                   	pusha  
c0001c72:	b0 20                	mov    $0x20,%al
c0001c74:	e6 a0                	out    %al,$0xa0
c0001c76:	e6 20                	out    %al,$0x20
c0001c78:	6a 03                	push   $0x3
c0001c7a:	ff 15 2c 11 01 c0    	call   *0xc001112c
c0001c80:	eb 8e                	jmp    c0001c10 <intr_exit>

c0001c82 <intr0x04entry>:
intr0x04entry():
c0001c82:	6a 00                	push   $0x0
c0001c84:	1e                   	push   %ds
c0001c85:	06                   	push   %es
c0001c86:	0f a0                	push   %fs
c0001c88:	0f a8                	push   %gs
c0001c8a:	60                   	pusha  
c0001c8b:	b0 20                	mov    $0x20,%al
c0001c8d:	e6 a0                	out    %al,$0xa0
c0001c8f:	e6 20                	out    %al,$0x20
c0001c91:	6a 04                	push   $0x4
c0001c93:	ff 15 30 11 01 c0    	call   *0xc0011130
c0001c99:	e9 72 ff ff ff       	jmp    c0001c10 <intr_exit>

c0001c9e <intr0x05entry>:
intr0x05entry():
c0001c9e:	6a 00                	push   $0x0
c0001ca0:	1e                   	push   %ds
c0001ca1:	06                   	push   %es
c0001ca2:	0f a0                	push   %fs
c0001ca4:	0f a8                	push   %gs
c0001ca6:	60                   	pusha  
c0001ca7:	b0 20                	mov    $0x20,%al
c0001ca9:	e6 a0                	out    %al,$0xa0
c0001cab:	e6 20                	out    %al,$0x20
c0001cad:	6a 05                	push   $0x5
c0001caf:	ff 15 34 11 01 c0    	call   *0xc0011134
c0001cb5:	e9 56 ff ff ff       	jmp    c0001c10 <intr_exit>

c0001cba <intr0x06entry>:
intr0x06entry():
c0001cba:	6a 00                	push   $0x0
c0001cbc:	1e                   	push   %ds
c0001cbd:	06                   	push   %es
c0001cbe:	0f a0                	push   %fs
c0001cc0:	0f a8                	push   %gs
c0001cc2:	60                   	pusha  
c0001cc3:	b0 20                	mov    $0x20,%al
c0001cc5:	e6 a0                	out    %al,$0xa0
c0001cc7:	e6 20                	out    %al,$0x20
c0001cc9:	6a 06                	push   $0x6
c0001ccb:	ff 15 38 11 01 c0    	call   *0xc0011138
c0001cd1:	e9 3a ff ff ff       	jmp    c0001c10 <intr_exit>

c0001cd6 <intr0x07entry>:
intr0x07entry():
c0001cd6:	6a 00                	push   $0x0
c0001cd8:	1e                   	push   %ds
c0001cd9:	06                   	push   %es
c0001cda:	0f a0                	push   %fs
c0001cdc:	0f a8                	push   %gs
c0001cde:	60                   	pusha  
c0001cdf:	b0 20                	mov    $0x20,%al
c0001ce1:	e6 a0                	out    %al,$0xa0
c0001ce3:	e6 20                	out    %al,$0x20
c0001ce5:	6a 07                	push   $0x7
c0001ce7:	ff 15 3c 11 01 c0    	call   *0xc001113c
c0001ced:	e9 1e ff ff ff       	jmp    c0001c10 <intr_exit>

c0001cf2 <intr0x08entry>:
intr0x08entry():
c0001cf2:	90                   	nop
c0001cf3:	1e                   	push   %ds
c0001cf4:	06                   	push   %es
c0001cf5:	0f a0                	push   %fs
c0001cf7:	0f a8                	push   %gs
c0001cf9:	60                   	pusha  
c0001cfa:	b0 20                	mov    $0x20,%al
c0001cfc:	e6 a0                	out    %al,$0xa0
c0001cfe:	e6 20                	out    %al,$0x20
c0001d00:	6a 08                	push   $0x8
c0001d02:	ff 15 40 11 01 c0    	call   *0xc0011140
c0001d08:	e9 03 ff ff ff       	jmp    c0001c10 <intr_exit>

c0001d0d <intr0x09entry>:
intr0x09entry():
c0001d0d:	6a 00                	push   $0x0
c0001d0f:	1e                   	push   %ds
c0001d10:	06                   	push   %es
c0001d11:	0f a0                	push   %fs
c0001d13:	0f a8                	push   %gs
c0001d15:	60                   	pusha  
c0001d16:	b0 20                	mov    $0x20,%al
c0001d18:	e6 a0                	out    %al,$0xa0
c0001d1a:	e6 20                	out    %al,$0x20
c0001d1c:	6a 09                	push   $0x9
c0001d1e:	ff 15 44 11 01 c0    	call   *0xc0011144
c0001d24:	e9 e7 fe ff ff       	jmp    c0001c10 <intr_exit>

c0001d29 <intr0x0aentry>:
intr0x0aentry():
c0001d29:	90                   	nop
c0001d2a:	1e                   	push   %ds
c0001d2b:	06                   	push   %es
c0001d2c:	0f a0                	push   %fs
c0001d2e:	0f a8                	push   %gs
c0001d30:	60                   	pusha  
c0001d31:	b0 20                	mov    $0x20,%al
c0001d33:	e6 a0                	out    %al,$0xa0
c0001d35:	e6 20                	out    %al,$0x20
c0001d37:	6a 0a                	push   $0xa
c0001d39:	ff 15 48 11 01 c0    	call   *0xc0011148
c0001d3f:	e9 cc fe ff ff       	jmp    c0001c10 <intr_exit>

c0001d44 <intr0x0bentry>:
intr0x0bentry():
c0001d44:	90                   	nop
c0001d45:	1e                   	push   %ds
c0001d46:	06                   	push   %es
c0001d47:	0f a0                	push   %fs
c0001d49:	0f a8                	push   %gs
c0001d4b:	60                   	pusha  
c0001d4c:	b0 20                	mov    $0x20,%al
c0001d4e:	e6 a0                	out    %al,$0xa0
c0001d50:	e6 20                	out    %al,$0x20
c0001d52:	6a 0b                	push   $0xb
c0001d54:	ff 15 4c 11 01 c0    	call   *0xc001114c
c0001d5a:	e9 b1 fe ff ff       	jmp    c0001c10 <intr_exit>

c0001d5f <intr0x0centry>:
intr0x0centry():
c0001d5f:	6a 00                	push   $0x0
c0001d61:	1e                   	push   %ds
c0001d62:	06                   	push   %es
c0001d63:	0f a0                	push   %fs
c0001d65:	0f a8                	push   %gs
c0001d67:	60                   	pusha  
c0001d68:	b0 20                	mov    $0x20,%al
c0001d6a:	e6 a0                	out    %al,$0xa0
c0001d6c:	e6 20                	out    %al,$0x20
c0001d6e:	6a 0c                	push   $0xc
c0001d70:	ff 15 50 11 01 c0    	call   *0xc0011150
c0001d76:	e9 95 fe ff ff       	jmp    c0001c10 <intr_exit>

c0001d7b <intr0x0dentry>:
intr0x0dentry():
c0001d7b:	90                   	nop
c0001d7c:	1e                   	push   %ds
c0001d7d:	06                   	push   %es
c0001d7e:	0f a0                	push   %fs
c0001d80:	0f a8                	push   %gs
c0001d82:	60                   	pusha  
c0001d83:	b0 20                	mov    $0x20,%al
c0001d85:	e6 a0                	out    %al,$0xa0
c0001d87:	e6 20                	out    %al,$0x20
c0001d89:	6a 0d                	push   $0xd
c0001d8b:	ff 15 54 11 01 c0    	call   *0xc0011154
c0001d91:	e9 7a fe ff ff       	jmp    c0001c10 <intr_exit>

c0001d96 <intr0x0eentry>:
intr0x0eentry():
c0001d96:	90                   	nop
c0001d97:	1e                   	push   %ds
c0001d98:	06                   	push   %es
c0001d99:	0f a0                	push   %fs
c0001d9b:	0f a8                	push   %gs
c0001d9d:	60                   	pusha  
c0001d9e:	b0 20                	mov    $0x20,%al
c0001da0:	e6 a0                	out    %al,$0xa0
c0001da2:	e6 20                	out    %al,$0x20
c0001da4:	6a 0e                	push   $0xe
c0001da6:	ff 15 58 11 01 c0    	call   *0xc0011158
c0001dac:	e9 5f fe ff ff       	jmp    c0001c10 <intr_exit>

c0001db1 <intr0x0fentry>:
intr0x0fentry():
c0001db1:	6a 00                	push   $0x0
c0001db3:	1e                   	push   %ds
c0001db4:	06                   	push   %es
c0001db5:	0f a0                	push   %fs
c0001db7:	0f a8                	push   %gs
c0001db9:	60                   	pusha  
c0001dba:	b0 20                	mov    $0x20,%al
c0001dbc:	e6 a0                	out    %al,$0xa0
c0001dbe:	e6 20                	out    %al,$0x20
c0001dc0:	6a 0f                	push   $0xf
c0001dc2:	ff 15 5c 11 01 c0    	call   *0xc001115c
c0001dc8:	e9 43 fe ff ff       	jmp    c0001c10 <intr_exit>

c0001dcd <intr0x10entry>:
intr0x10entry():
c0001dcd:	6a 00                	push   $0x0
c0001dcf:	1e                   	push   %ds
c0001dd0:	06                   	push   %es
c0001dd1:	0f a0                	push   %fs
c0001dd3:	0f a8                	push   %gs
c0001dd5:	60                   	pusha  
c0001dd6:	b0 20                	mov    $0x20,%al
c0001dd8:	e6 a0                	out    %al,$0xa0
c0001dda:	e6 20                	out    %al,$0x20
c0001ddc:	6a 10                	push   $0x10
c0001dde:	ff 15 60 11 01 c0    	call   *0xc0011160
c0001de4:	e9 27 fe ff ff       	jmp    c0001c10 <intr_exit>

c0001de9 <intr0x11entry>:
intr0x11entry():
c0001de9:	90                   	nop
c0001dea:	1e                   	push   %ds
c0001deb:	06                   	push   %es
c0001dec:	0f a0                	push   %fs
c0001dee:	0f a8                	push   %gs
c0001df0:	60                   	pusha  
c0001df1:	b0 20                	mov    $0x20,%al
c0001df3:	e6 a0                	out    %al,$0xa0
c0001df5:	e6 20                	out    %al,$0x20
c0001df7:	6a 11                	push   $0x11
c0001df9:	ff 15 64 11 01 c0    	call   *0xc0011164
c0001dff:	e9 0c fe ff ff       	jmp    c0001c10 <intr_exit>

c0001e04 <intr0x12entry>:
intr0x12entry():
c0001e04:	6a 00                	push   $0x0
c0001e06:	1e                   	push   %ds
c0001e07:	06                   	push   %es
c0001e08:	0f a0                	push   %fs
c0001e0a:	0f a8                	push   %gs
c0001e0c:	60                   	pusha  
c0001e0d:	b0 20                	mov    $0x20,%al
c0001e0f:	e6 a0                	out    %al,$0xa0
c0001e11:	e6 20                	out    %al,$0x20
c0001e13:	6a 12                	push   $0x12
c0001e15:	ff 15 68 11 01 c0    	call   *0xc0011168
c0001e1b:	e9 f0 fd ff ff       	jmp    c0001c10 <intr_exit>

c0001e20 <intr0x13entry>:
intr0x13entry():
c0001e20:	6a 00                	push   $0x0
c0001e22:	1e                   	push   %ds
c0001e23:	06                   	push   %es
c0001e24:	0f a0                	push   %fs
c0001e26:	0f a8                	push   %gs
c0001e28:	60                   	pusha  
c0001e29:	b0 20                	mov    $0x20,%al
c0001e2b:	e6 a0                	out    %al,$0xa0
c0001e2d:	e6 20                	out    %al,$0x20
c0001e2f:	6a 13                	push   $0x13
c0001e31:	ff 15 6c 11 01 c0    	call   *0xc001116c
c0001e37:	e9 d4 fd ff ff       	jmp    c0001c10 <intr_exit>

c0001e3c <intr0x14entry>:
intr0x14entry():
c0001e3c:	6a 00                	push   $0x0
c0001e3e:	1e                   	push   %ds
c0001e3f:	06                   	push   %es
c0001e40:	0f a0                	push   %fs
c0001e42:	0f a8                	push   %gs
c0001e44:	60                   	pusha  
c0001e45:	b0 20                	mov    $0x20,%al
c0001e47:	e6 a0                	out    %al,$0xa0
c0001e49:	e6 20                	out    %al,$0x20
c0001e4b:	6a 14                	push   $0x14
c0001e4d:	ff 15 70 11 01 c0    	call   *0xc0011170
c0001e53:	e9 b8 fd ff ff       	jmp    c0001c10 <intr_exit>

c0001e58 <intr0x15entry>:
intr0x15entry():
c0001e58:	6a 00                	push   $0x0
c0001e5a:	1e                   	push   %ds
c0001e5b:	06                   	push   %es
c0001e5c:	0f a0                	push   %fs
c0001e5e:	0f a8                	push   %gs
c0001e60:	60                   	pusha  
c0001e61:	b0 20                	mov    $0x20,%al
c0001e63:	e6 a0                	out    %al,$0xa0
c0001e65:	e6 20                	out    %al,$0x20
c0001e67:	6a 15                	push   $0x15
c0001e69:	ff 15 74 11 01 c0    	call   *0xc0011174
c0001e6f:	e9 9c fd ff ff       	jmp    c0001c10 <intr_exit>

c0001e74 <intr0x16entry>:
intr0x16entry():
c0001e74:	6a 00                	push   $0x0
c0001e76:	1e                   	push   %ds
c0001e77:	06                   	push   %es
c0001e78:	0f a0                	push   %fs
c0001e7a:	0f a8                	push   %gs
c0001e7c:	60                   	pusha  
c0001e7d:	b0 20                	mov    $0x20,%al
c0001e7f:	e6 a0                	out    %al,$0xa0
c0001e81:	e6 20                	out    %al,$0x20
c0001e83:	6a 16                	push   $0x16
c0001e85:	ff 15 78 11 01 c0    	call   *0xc0011178
c0001e8b:	e9 80 fd ff ff       	jmp    c0001c10 <intr_exit>

c0001e90 <intr0x17entry>:
intr0x17entry():
c0001e90:	6a 00                	push   $0x0
c0001e92:	1e                   	push   %ds
c0001e93:	06                   	push   %es
c0001e94:	0f a0                	push   %fs
c0001e96:	0f a8                	push   %gs
c0001e98:	60                   	pusha  
c0001e99:	b0 20                	mov    $0x20,%al
c0001e9b:	e6 a0                	out    %al,$0xa0
c0001e9d:	e6 20                	out    %al,$0x20
c0001e9f:	6a 17                	push   $0x17
c0001ea1:	ff 15 7c 11 01 c0    	call   *0xc001117c
c0001ea7:	e9 64 fd ff ff       	jmp    c0001c10 <intr_exit>

c0001eac <intr0x18entry>:
intr0x18entry():
c0001eac:	90                   	nop
c0001ead:	1e                   	push   %ds
c0001eae:	06                   	push   %es
c0001eaf:	0f a0                	push   %fs
c0001eb1:	0f a8                	push   %gs
c0001eb3:	60                   	pusha  
c0001eb4:	b0 20                	mov    $0x20,%al
c0001eb6:	e6 a0                	out    %al,$0xa0
c0001eb8:	e6 20                	out    %al,$0x20
c0001eba:	6a 18                	push   $0x18
c0001ebc:	ff 15 80 11 01 c0    	call   *0xc0011180
c0001ec2:	e9 49 fd ff ff       	jmp    c0001c10 <intr_exit>

c0001ec7 <intr0x19entry>:
intr0x19entry():
c0001ec7:	6a 00                	push   $0x0
c0001ec9:	1e                   	push   %ds
c0001eca:	06                   	push   %es
c0001ecb:	0f a0                	push   %fs
c0001ecd:	0f a8                	push   %gs
c0001ecf:	60                   	pusha  
c0001ed0:	b0 20                	mov    $0x20,%al
c0001ed2:	e6 a0                	out    %al,$0xa0
c0001ed4:	e6 20                	out    %al,$0x20
c0001ed6:	6a 19                	push   $0x19
c0001ed8:	ff 15 84 11 01 c0    	call   *0xc0011184
c0001ede:	e9 2d fd ff ff       	jmp    c0001c10 <intr_exit>

c0001ee3 <intr0x1aentry>:
intr0x1aentry():
c0001ee3:	90                   	nop
c0001ee4:	1e                   	push   %ds
c0001ee5:	06                   	push   %es
c0001ee6:	0f a0                	push   %fs
c0001ee8:	0f a8                	push   %gs
c0001eea:	60                   	pusha  
c0001eeb:	b0 20                	mov    $0x20,%al
c0001eed:	e6 a0                	out    %al,$0xa0
c0001eef:	e6 20                	out    %al,$0x20
c0001ef1:	6a 1a                	push   $0x1a
c0001ef3:	ff 15 88 11 01 c0    	call   *0xc0011188
c0001ef9:	e9 12 fd ff ff       	jmp    c0001c10 <intr_exit>

c0001efe <intr0x1bentry>:
intr0x1bentry():
c0001efe:	90                   	nop
c0001eff:	1e                   	push   %ds
c0001f00:	06                   	push   %es
c0001f01:	0f a0                	push   %fs
c0001f03:	0f a8                	push   %gs
c0001f05:	60                   	pusha  
c0001f06:	b0 20                	mov    $0x20,%al
c0001f08:	e6 a0                	out    %al,$0xa0
c0001f0a:	e6 20                	out    %al,$0x20
c0001f0c:	6a 1b                	push   $0x1b
c0001f0e:	ff 15 8c 11 01 c0    	call   *0xc001118c
c0001f14:	e9 f7 fc ff ff       	jmp    c0001c10 <intr_exit>

c0001f19 <intr0x1centry>:
intr0x1centry():
c0001f19:	6a 00                	push   $0x0
c0001f1b:	1e                   	push   %ds
c0001f1c:	06                   	push   %es
c0001f1d:	0f a0                	push   %fs
c0001f1f:	0f a8                	push   %gs
c0001f21:	60                   	pusha  
c0001f22:	b0 20                	mov    $0x20,%al
c0001f24:	e6 a0                	out    %al,$0xa0
c0001f26:	e6 20                	out    %al,$0x20
c0001f28:	6a 1c                	push   $0x1c
c0001f2a:	ff 15 90 11 01 c0    	call   *0xc0011190
c0001f30:	e9 db fc ff ff       	jmp    c0001c10 <intr_exit>

c0001f35 <intr0x1dentry>:
intr0x1dentry():
c0001f35:	90                   	nop
c0001f36:	1e                   	push   %ds
c0001f37:	06                   	push   %es
c0001f38:	0f a0                	push   %fs
c0001f3a:	0f a8                	push   %gs
c0001f3c:	60                   	pusha  
c0001f3d:	b0 20                	mov    $0x20,%al
c0001f3f:	e6 a0                	out    %al,$0xa0
c0001f41:	e6 20                	out    %al,$0x20
c0001f43:	6a 1d                	push   $0x1d
c0001f45:	ff 15 94 11 01 c0    	call   *0xc0011194
c0001f4b:	e9 c0 fc ff ff       	jmp    c0001c10 <intr_exit>

c0001f50 <intr0x1eentry>:
intr0x1eentry():
c0001f50:	90                   	nop
c0001f51:	1e                   	push   %ds
c0001f52:	06                   	push   %es
c0001f53:	0f a0                	push   %fs
c0001f55:	0f a8                	push   %gs
c0001f57:	60                   	pusha  
c0001f58:	b0 20                	mov    $0x20,%al
c0001f5a:	e6 a0                	out    %al,$0xa0
c0001f5c:	e6 20                	out    %al,$0x20
c0001f5e:	6a 1e                	push   $0x1e
c0001f60:	ff 15 98 11 01 c0    	call   *0xc0011198
c0001f66:	e9 a5 fc ff ff       	jmp    c0001c10 <intr_exit>

c0001f6b <intr0x1fentry>:
intr0x1fentry():
c0001f6b:	6a 00                	push   $0x0
c0001f6d:	1e                   	push   %ds
c0001f6e:	06                   	push   %es
c0001f6f:	0f a0                	push   %fs
c0001f71:	0f a8                	push   %gs
c0001f73:	60                   	pusha  
c0001f74:	b0 20                	mov    $0x20,%al
c0001f76:	e6 a0                	out    %al,$0xa0
c0001f78:	e6 20                	out    %al,$0x20
c0001f7a:	6a 1f                	push   $0x1f
c0001f7c:	ff 15 9c 11 01 c0    	call   *0xc001119c
c0001f82:	e9 89 fc ff ff       	jmp    c0001c10 <intr_exit>

c0001f87 <intr0x20entry>:
intr0x20entry():
c0001f87:	6a 00                	push   $0x0
c0001f89:	1e                   	push   %ds
c0001f8a:	06                   	push   %es
c0001f8b:	0f a0                	push   %fs
c0001f8d:	0f a8                	push   %gs
c0001f8f:	60                   	pusha  
c0001f90:	b0 20                	mov    $0x20,%al
c0001f92:	e6 a0                	out    %al,$0xa0
c0001f94:	e6 20                	out    %al,$0x20
c0001f96:	6a 20                	push   $0x20
c0001f98:	ff 15 a0 11 01 c0    	call   *0xc00111a0
c0001f9e:	e9 6d fc ff ff       	jmp    c0001c10 <intr_exit>

c0001fa3 <intr0x21entry>:
intr0x21entry():
c0001fa3:	6a 00                	push   $0x0
c0001fa5:	1e                   	push   %ds
c0001fa6:	06                   	push   %es
c0001fa7:	0f a0                	push   %fs
c0001fa9:	0f a8                	push   %gs
c0001fab:	60                   	pusha  
c0001fac:	b0 20                	mov    $0x20,%al
c0001fae:	e6 a0                	out    %al,$0xa0
c0001fb0:	e6 20                	out    %al,$0x20
c0001fb2:	6a 21                	push   $0x21
c0001fb4:	ff 15 a4 11 01 c0    	call   *0xc00111a4
c0001fba:	e9 51 fc ff ff       	jmp    c0001c10 <intr_exit>

c0001fbf <intr0x22entry>:
intr0x22entry():
c0001fbf:	6a 00                	push   $0x0
c0001fc1:	1e                   	push   %ds
c0001fc2:	06                   	push   %es
c0001fc3:	0f a0                	push   %fs
c0001fc5:	0f a8                	push   %gs
c0001fc7:	60                   	pusha  
c0001fc8:	b0 20                	mov    $0x20,%al
c0001fca:	e6 a0                	out    %al,$0xa0
c0001fcc:	e6 20                	out    %al,$0x20
c0001fce:	6a 22                	push   $0x22
c0001fd0:	ff 15 a8 11 01 c0    	call   *0xc00111a8
c0001fd6:	e9 35 fc ff ff       	jmp    c0001c10 <intr_exit>

c0001fdb <intr0x23entry>:
intr0x23entry():
c0001fdb:	6a 00                	push   $0x0
c0001fdd:	1e                   	push   %ds
c0001fde:	06                   	push   %es
c0001fdf:	0f a0                	push   %fs
c0001fe1:	0f a8                	push   %gs
c0001fe3:	60                   	pusha  
c0001fe4:	b0 20                	mov    $0x20,%al
c0001fe6:	e6 a0                	out    %al,$0xa0
c0001fe8:	e6 20                	out    %al,$0x20
c0001fea:	6a 23                	push   $0x23
c0001fec:	ff 15 ac 11 01 c0    	call   *0xc00111ac
c0001ff2:	e9 19 fc ff ff       	jmp    c0001c10 <intr_exit>

c0001ff7 <intr0x24entry>:
intr0x24entry():
c0001ff7:	6a 00                	push   $0x0
c0001ff9:	1e                   	push   %ds
c0001ffa:	06                   	push   %es
c0001ffb:	0f a0                	push   %fs
c0001ffd:	0f a8                	push   %gs
c0001fff:	60                   	pusha  
c0002000:	b0 20                	mov    $0x20,%al
c0002002:	e6 a0                	out    %al,$0xa0
c0002004:	e6 20                	out    %al,$0x20
c0002006:	6a 24                	push   $0x24
c0002008:	ff 15 b0 11 01 c0    	call   *0xc00111b0
c000200e:	e9 fd fb ff ff       	jmp    c0001c10 <intr_exit>

c0002013 <intr0x25entry>:
intr0x25entry():
c0002013:	6a 00                	push   $0x0
c0002015:	1e                   	push   %ds
c0002016:	06                   	push   %es
c0002017:	0f a0                	push   %fs
c0002019:	0f a8                	push   %gs
c000201b:	60                   	pusha  
c000201c:	b0 20                	mov    $0x20,%al
c000201e:	e6 a0                	out    %al,$0xa0
c0002020:	e6 20                	out    %al,$0x20
c0002022:	6a 25                	push   $0x25
c0002024:	ff 15 b4 11 01 c0    	call   *0xc00111b4
c000202a:	e9 e1 fb ff ff       	jmp    c0001c10 <intr_exit>

c000202f <intr0x26entry>:
intr0x26entry():
c000202f:	6a 00                	push   $0x0
c0002031:	1e                   	push   %ds
c0002032:	06                   	push   %es
c0002033:	0f a0                	push   %fs
c0002035:	0f a8                	push   %gs
c0002037:	60                   	pusha  
c0002038:	b0 20                	mov    $0x20,%al
c000203a:	e6 a0                	out    %al,$0xa0
c000203c:	e6 20                	out    %al,$0x20
c000203e:	6a 26                	push   $0x26
c0002040:	ff 15 b8 11 01 c0    	call   *0xc00111b8
c0002046:	e9 c5 fb ff ff       	jmp    c0001c10 <intr_exit>

c000204b <intr0x27entry>:
intr0x27entry():
c000204b:	6a 00                	push   $0x0
c000204d:	1e                   	push   %ds
c000204e:	06                   	push   %es
c000204f:	0f a0                	push   %fs
c0002051:	0f a8                	push   %gs
c0002053:	60                   	pusha  
c0002054:	b0 20                	mov    $0x20,%al
c0002056:	e6 a0                	out    %al,$0xa0
c0002058:	e6 20                	out    %al,$0x20
c000205a:	6a 27                	push   $0x27
c000205c:	ff 15 bc 11 01 c0    	call   *0xc00111bc
c0002062:	e9 a9 fb ff ff       	jmp    c0001c10 <intr_exit>

c0002067 <intr0x28entry>:
intr0x28entry():
c0002067:	6a 00                	push   $0x0
c0002069:	1e                   	push   %ds
c000206a:	06                   	push   %es
c000206b:	0f a0                	push   %fs
c000206d:	0f a8                	push   %gs
c000206f:	60                   	pusha  
c0002070:	b0 20                	mov    $0x20,%al
c0002072:	e6 a0                	out    %al,$0xa0
c0002074:	e6 20                	out    %al,$0x20
c0002076:	6a 28                	push   $0x28
c0002078:	ff 15 c0 11 01 c0    	call   *0xc00111c0
c000207e:	e9 8d fb ff ff       	jmp    c0001c10 <intr_exit>

c0002083 <intr0x29entry>:
intr0x29entry():
c0002083:	6a 00                	push   $0x0
c0002085:	1e                   	push   %ds
c0002086:	06                   	push   %es
c0002087:	0f a0                	push   %fs
c0002089:	0f a8                	push   %gs
c000208b:	60                   	pusha  
c000208c:	b0 20                	mov    $0x20,%al
c000208e:	e6 a0                	out    %al,$0xa0
c0002090:	e6 20                	out    %al,$0x20
c0002092:	6a 29                	push   $0x29
c0002094:	ff 15 c4 11 01 c0    	call   *0xc00111c4
c000209a:	e9 71 fb ff ff       	jmp    c0001c10 <intr_exit>

c000209f <intr0x2aentry>:
intr0x2aentry():
c000209f:	6a 00                	push   $0x0
c00020a1:	1e                   	push   %ds
c00020a2:	06                   	push   %es
c00020a3:	0f a0                	push   %fs
c00020a5:	0f a8                	push   %gs
c00020a7:	60                   	pusha  
c00020a8:	b0 20                	mov    $0x20,%al
c00020aa:	e6 a0                	out    %al,$0xa0
c00020ac:	e6 20                	out    %al,$0x20
c00020ae:	6a 2a                	push   $0x2a
c00020b0:	ff 15 c8 11 01 c0    	call   *0xc00111c8
c00020b6:	e9 55 fb ff ff       	jmp    c0001c10 <intr_exit>

c00020bb <intr0x2bentry>:
intr0x2bentry():
c00020bb:	6a 00                	push   $0x0
c00020bd:	1e                   	push   %ds
c00020be:	06                   	push   %es
c00020bf:	0f a0                	push   %fs
c00020c1:	0f a8                	push   %gs
c00020c3:	60                   	pusha  
c00020c4:	b0 20                	mov    $0x20,%al
c00020c6:	e6 a0                	out    %al,$0xa0
c00020c8:	e6 20                	out    %al,$0x20
c00020ca:	6a 2b                	push   $0x2b
c00020cc:	ff 15 cc 11 01 c0    	call   *0xc00111cc
c00020d2:	e9 39 fb ff ff       	jmp    c0001c10 <intr_exit>

c00020d7 <intr0x2centry>:
intr0x2centry():
c00020d7:	6a 00                	push   $0x0
c00020d9:	1e                   	push   %ds
c00020da:	06                   	push   %es
c00020db:	0f a0                	push   %fs
c00020dd:	0f a8                	push   %gs
c00020df:	60                   	pusha  
c00020e0:	b0 20                	mov    $0x20,%al
c00020e2:	e6 a0                	out    %al,$0xa0
c00020e4:	e6 20                	out    %al,$0x20
c00020e6:	6a 2c                	push   $0x2c
c00020e8:	ff 15 d0 11 01 c0    	call   *0xc00111d0
c00020ee:	e9 1d fb ff ff       	jmp    c0001c10 <intr_exit>

c00020f3 <intr0x2dentry>:
intr0x2dentry():
c00020f3:	6a 00                	push   $0x0
c00020f5:	1e                   	push   %ds
c00020f6:	06                   	push   %es
c00020f7:	0f a0                	push   %fs
c00020f9:	0f a8                	push   %gs
c00020fb:	60                   	pusha  
c00020fc:	b0 20                	mov    $0x20,%al
c00020fe:	e6 a0                	out    %al,$0xa0
c0002100:	e6 20                	out    %al,$0x20
c0002102:	6a 2d                	push   $0x2d
c0002104:	ff 15 d4 11 01 c0    	call   *0xc00111d4
c000210a:	e9 01 fb ff ff       	jmp    c0001c10 <intr_exit>

c000210f <intr0x2eentry>:
intr0x2eentry():
c000210f:	6a 00                	push   $0x0
c0002111:	1e                   	push   %ds
c0002112:	06                   	push   %es
c0002113:	0f a0                	push   %fs
c0002115:	0f a8                	push   %gs
c0002117:	60                   	pusha  
c0002118:	b0 20                	mov    $0x20,%al
c000211a:	e6 a0                	out    %al,$0xa0
c000211c:	e6 20                	out    %al,$0x20
c000211e:	6a 2e                	push   $0x2e
c0002120:	ff 15 d8 11 01 c0    	call   *0xc00111d8
c0002126:	e9 e5 fa ff ff       	jmp    c0001c10 <intr_exit>

c000212b <intr0x2fentry>:
intr0x2fentry():
c000212b:	6a 00                	push   $0x0
c000212d:	1e                   	push   %ds
c000212e:	06                   	push   %es
c000212f:	0f a0                	push   %fs
c0002131:	0f a8                	push   %gs
c0002133:	60                   	pusha  
c0002134:	b0 20                	mov    $0x20,%al
c0002136:	e6 a0                	out    %al,$0xa0
c0002138:	e6 20                	out    %al,$0x20
c000213a:	6a 2f                	push   $0x2f
c000213c:	ff 15 dc 11 01 c0    	call   *0xc00111dc
c0002142:	e9 c9 fa ff ff       	jmp    c0001c10 <intr_exit>

c0002147 <syscall_handler>:
syscall_handler():
c0002147:	6a 00                	push   $0x0
c0002149:	1e                   	push   %ds
c000214a:	06                   	push   %es
c000214b:	0f a0                	push   %fs
c000214d:	0f a8                	push   %gs
c000214f:	60                   	pusha  
c0002150:	68 80 00 00 00       	push   $0x80
c0002155:	52                   	push   %edx
c0002156:	51                   	push   %ecx
c0002157:	53                   	push   %ebx
c0002158:	ff 14 85 40 15 01 c0 	call   *-0x3ffeeac0(,%eax,4)
c000215f:	83 c4 0c             	add    $0xc,%esp
c0002162:	89 44 24 20          	mov    %eax,0x20(%esp)
c0002166:	e9 a5 fa ff ff       	jmp    c0001c10 <intr_exit>
c000216b:	66 90                	xchg   %ax,%ax
c000216d:	66 90                	xchg   %ax,%ax
c000216f:	90                   	nop

c0002170 <put_str>:
put_str():
c0002170:	53                   	push   %ebx
c0002171:	51                   	push   %ecx
c0002172:	31 c9                	xor    %ecx,%ecx
c0002174:	8b 5c 24 0c          	mov    0xc(%esp),%ebx

c0002178 <put_str.goon>:
put_str.goon():
c0002178:	8a 0b                	mov    (%ebx),%cl
c000217a:	80 f9 00             	cmp    $0x0,%cl
c000217d:	74 0c                	je     c000218b <put_str.str_over>
c000217f:	51                   	push   %ecx
c0002180:	e8 09 00 00 00       	call   c000218e <put_char>
c0002185:	83 c4 04             	add    $0x4,%esp
c0002188:	43                   	inc    %ebx
c0002189:	eb ed                	jmp    c0002178 <put_str.goon>

c000218b <put_str.str_over>:
put_str.str_over():
c000218b:	59                   	pop    %ecx
c000218c:	5b                   	pop    %ebx
c000218d:	c3                   	ret    

c000218e <put_char>:
put_char():
c000218e:	60                   	pusha  
c000218f:	66 b8 18 00          	mov    $0x18,%ax
c0002193:	8e e8                	mov    %eax,%gs
c0002195:	66 ba d4 03          	mov    $0x3d4,%dx
c0002199:	b0 0e                	mov    $0xe,%al
c000219b:	ee                   	out    %al,(%dx)
c000219c:	66 ba d5 03          	mov    $0x3d5,%dx
c00021a0:	ec                   	in     (%dx),%al
c00021a1:	88 c4                	mov    %al,%ah
c00021a3:	66 ba d4 03          	mov    $0x3d4,%dx
c00021a7:	b0 0f                	mov    $0xf,%al
c00021a9:	ee                   	out    %al,(%dx)
c00021aa:	66 ba d5 03          	mov    $0x3d5,%dx
c00021ae:	ec                   	in     (%dx),%al
c00021af:	66 89 c3             	mov    %ax,%bx
c00021b2:	8b 4c 24 24          	mov    0x24(%esp),%ecx
c00021b6:	80 f9 0d             	cmp    $0xd,%cl
c00021b9:	74 3c                	je     c00021f7 <put_char.is_carriage_return>
c00021bb:	80 f9 0a             	cmp    $0xa,%cl
c00021be:	74 37                	je     c00021f7 <put_char.is_carriage_return>
c00021c0:	80 f9 08             	cmp    $0x8,%cl
c00021c3:	74 02                	je     c00021c7 <put_char.is_backspace>
c00021c5:	eb 16                	jmp    c00021dd <put_char.put_other>

c00021c7 <put_char.is_backspace>:
put_char.is_backspace():
c00021c7:	66 4b                	dec    %bx
c00021c9:	66 d1 e3             	shl    %bx
c00021cc:	65 67 c6 07 20       	movb   $0x20,%gs:(%bx)
c00021d1:	66 43                	inc    %bx
c00021d3:	65 67 c6 07 07       	movb   $0x7,%gs:(%bx)
c00021d8:	66 d1 eb             	shr    %bx
c00021db:	eb 60                	jmp    c000223d <put_char.set_cursor>

c00021dd <put_char.put_other>:
put_char.put_other():
c00021dd:	66 d1 e3             	shl    %bx
c00021e0:	65 67 88 0f          	mov    %cl,%gs:(%bx)
c00021e4:	66 43                	inc    %bx
c00021e6:	65 67 c6 07 07       	movb   $0x7,%gs:(%bx)
c00021eb:	66 d1 eb             	shr    %bx
c00021ee:	66 43                	inc    %bx
c00021f0:	66 81 fb d0 07       	cmp    $0x7d0,%bx
c00021f5:	7c 46                	jl     c000223d <put_char.set_cursor>

c00021f7 <put_char.is_carriage_return>:
put_char.is_line_feed():
c00021f7:	66 31 d2             	xor    %dx,%dx
c00021fa:	66 89 d8             	mov    %bx,%ax
c00021fd:	66 be 50 00          	mov    $0x50,%si
c0002201:	66 f7 f6             	div    %si
c0002204:	66 29 d3             	sub    %dx,%bx

c0002207 <put_char.is_carriage_return_end>:
put_char.is_carriage_return_end():
c0002207:	66 83 c3 50          	add    $0x50,%bx
c000220b:	66 81 fb d0 07       	cmp    $0x7d0,%bx

c0002210 <put_char.is_line_feed_end>:
put_char.is_line_feed_end():
c0002210:	7c 2b                	jl     c000223d <put_char.set_cursor>

c0002212 <put_char.roll_screen>:
put_char.roll_screen():
c0002212:	fc                   	cld    
c0002213:	b9 c0 03 00 00       	mov    $0x3c0,%ecx
c0002218:	be a0 80 0b c0       	mov    $0xc00b80a0,%esi
c000221d:	bf 00 80 0b c0       	mov    $0xc00b8000,%edi
c0002222:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c0002224:	bb 00 0f 00 00       	mov    $0xf00,%ebx
c0002229:	b9 50 00 00 00       	mov    $0x50,%ecx

c000222e <put_char.cls>:
put_char.cls():
c000222e:	65 66 c7 03 20 07    	movw   $0x720,%gs:(%ebx)
c0002234:	83 c3 02             	add    $0x2,%ebx
c0002237:	e2 f5                	loop   c000222e <put_char.cls>
c0002239:	66 bb 80 07          	mov    $0x780,%bx

c000223d <put_char.set_cursor>:
put_char.set_cursor():
c000223d:	66 ba d4 03          	mov    $0x3d4,%dx
c0002241:	b0 0e                	mov    $0xe,%al
c0002243:	ee                   	out    %al,(%dx)
c0002244:	66 ba d5 03          	mov    $0x3d5,%dx
c0002248:	88 f8                	mov    %bh,%al
c000224a:	ee                   	out    %al,(%dx)
c000224b:	66 ba d4 03          	mov    $0x3d4,%dx
c000224f:	b0 0f                	mov    $0xf,%al
c0002251:	ee                   	out    %al,(%dx)
c0002252:	66 ba d5 03          	mov    $0x3d5,%dx
c0002256:	88 d8                	mov    %bl,%al
c0002258:	ee                   	out    %al,(%dx)

c0002259 <put_char.put_char_done>:
put_char.put_char_done():
c0002259:	61                   	popa   
c000225a:	c3                   	ret    

c000225b <cls_screen>:
cls_screen():
c000225b:	60                   	pusha  
c000225c:	66 b8 18 00          	mov    $0x18,%ax
c0002260:	8e e8                	mov    %eax,%gs
c0002262:	bb 00 00 00 00       	mov    $0x0,%ebx
c0002267:	b9 d0 07 00 00       	mov    $0x7d0,%ecx

c000226c <cls_screen.cls>:
cls_screen.cls():
c000226c:	65 66 c7 03 20 07    	movw   $0x720,%gs:(%ebx)
c0002272:	83 c3 02             	add    $0x2,%ebx
c0002275:	e2 f5                	loop   c000226c <cls_screen.cls>
c0002277:	bb 00 00 00 00       	mov    $0x0,%ebx

c000227c <cls_screen.set_cursor>:
cls_screen.set_cursor():
c000227c:	66 ba d4 03          	mov    $0x3d4,%dx
c0002280:	b0 0e                	mov    $0xe,%al
c0002282:	ee                   	out    %al,(%dx)
c0002283:	66 ba d5 03          	mov    $0x3d5,%dx
c0002287:	88 f8                	mov    %bh,%al
c0002289:	ee                   	out    %al,(%dx)
c000228a:	66 ba d4 03          	mov    $0x3d4,%dx
c000228e:	b0 0f                	mov    $0xf,%al
c0002290:	ee                   	out    %al,(%dx)
c0002291:	66 ba d5 03          	mov    $0x3d5,%dx
c0002295:	88 d8                	mov    %bl,%al
c0002297:	ee                   	out    %al,(%dx)
c0002298:	61                   	popa   
c0002299:	c3                   	ret    

c000229a <put_int>:
put_int():
c000229a:	60                   	pusha  
c000229b:	89 e5                	mov    %esp,%ebp
c000229d:	8b 45 24             	mov    0x24(%ebp),%eax
c00022a0:	89 c2                	mov    %eax,%edx
c00022a2:	bf 07 00 00 00       	mov    $0x7,%edi
c00022a7:	b9 08 00 00 00       	mov    $0x8,%ecx
c00022ac:	bb a0 03 01 c0       	mov    $0xc00103a0,%ebx

c00022b1 <put_int.16based_4bits>:
put_int.16based_4bits():
c00022b1:	83 e2 0f             	and    $0xf,%edx
c00022b4:	83 fa 09             	cmp    $0x9,%edx
c00022b7:	7f 05                	jg     c00022be <put_int.is_A2F>
c00022b9:	83 c2 30             	add    $0x30,%edx
c00022bc:	eb 06                	jmp    c00022c4 <put_int.store>

c00022be <put_int.is_A2F>:
put_int.is_A2F():
c00022be:	83 ea 0a             	sub    $0xa,%edx
c00022c1:	83 c2 41             	add    $0x41,%edx

c00022c4 <put_int.store>:
put_int.store():
c00022c4:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
c00022c7:	4f                   	dec    %edi
c00022c8:	c1 e8 04             	shr    $0x4,%eax
c00022cb:	89 c2                	mov    %eax,%edx
c00022cd:	e2 e2                	loop   c00022b1 <put_int.16based_4bits>

c00022cf <put_int.ready_to_print>:
put_int.ready_to_print():
c00022cf:	47                   	inc    %edi

c00022d0 <put_int.skip_prefix_0>:
put_int.skip_prefix_0():
c00022d0:	83 ff 08             	cmp    $0x8,%edi
c00022d3:	74 0f                	je     c00022e4 <put_int.full0>

c00022d5 <put_int.go_on_skip>:
put_int.go_on_skip():
c00022d5:	8a 8f a0 03 01 c0    	mov    -0x3ffefc60(%edi),%cl
c00022db:	47                   	inc    %edi
c00022dc:	80 f9 30             	cmp    $0x30,%cl
c00022df:	74 ef                	je     c00022d0 <put_int.skip_prefix_0>
c00022e1:	4f                   	dec    %edi
c00022e2:	eb 02                	jmp    c00022e6 <put_int.put_each_num>

c00022e4 <put_int.full0>:
put_int.full0():
c00022e4:	b1 30                	mov    $0x30,%cl

c00022e6 <put_int.put_each_num>:
put_int.put_each_num():
c00022e6:	51                   	push   %ecx
c00022e7:	e8 a2 fe ff ff       	call   c000218e <put_char>
c00022ec:	83 c4 04             	add    $0x4,%esp
c00022ef:	47                   	inc    %edi
c00022f0:	8a 8f a0 03 01 c0    	mov    -0x3ffefc60(%edi),%cl
c00022f6:	83 ff 08             	cmp    $0x8,%edi
c00022f9:	7c eb                	jl     c00022e6 <put_int.put_each_num>
c00022fb:	61                   	popa   
c00022fc:	c3                   	ret    

c00022fd <set_cursor>:
set_cursor():
c00022fd:	60                   	pusha  
c00022fe:	66 8b 5c 24 24       	mov    0x24(%esp),%bx
c0002303:	66 ba d4 03          	mov    $0x3d4,%dx
c0002307:	b0 0e                	mov    $0xe,%al
c0002309:	ee                   	out    %al,(%dx)
c000230a:	66 ba d5 03          	mov    $0x3d5,%dx
c000230e:	88 f8                	mov    %bh,%al
c0002310:	ee                   	out    %al,(%dx)
c0002311:	66 ba d4 03          	mov    $0x3d4,%dx
c0002315:	b0 0f                	mov    $0xf,%al
c0002317:	ee                   	out    %al,(%dx)
c0002318:	66 ba d5 03          	mov    $0x3d5,%dx
c000231c:	88 d8                	mov    %bl,%al
c000231e:	ee                   	out    %al,(%dx)
c000231f:	61                   	popa   
c0002320:	c3                   	ret    

c0002321 <panic_spin>:
panic_spin():
/work/x86_os_my/kernel/debug.c:10
/* 打印文件名,行号,函数名,条件并使程序悬停 */
void panic_spin(char* filename,	       \
	        int line,	       \
		const char* func,      \
		const char* condition) \
{
c0002321:	55                   	push   %ebp
c0002322:	89 e5                	mov    %esp,%ebp
c0002324:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/kernel/debug.c:11
   intr_disable();	// 因为有时候会单独调用panic_spin,所以在此处关中断。
c0002327:	e8 14 f6 ff ff       	call   c0001940 <intr_disable>
/work/x86_os_my/kernel/debug.c:12
   put_str("\n\n\n!!!!! error !!!!!\n");
c000232c:	83 ec 0c             	sub    $0xc,%esp
c000232f:	68 7c b8 00 c0       	push   $0xc000b87c
c0002334:	e8 37 fe ff ff       	call   c0002170 <put_str>
c0002339:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/debug.c:13
   put_str("filename:");put_str(filename);put_str("\n");
c000233c:	83 ec 0c             	sub    $0xc,%esp
c000233f:	68 92 b8 00 c0       	push   $0xc000b892
c0002344:	e8 27 fe ff ff       	call   c0002170 <put_str>
c0002349:	83 c4 10             	add    $0x10,%esp
c000234c:	83 ec 0c             	sub    $0xc,%esp
c000234f:	ff 75 08             	pushl  0x8(%ebp)
c0002352:	e8 19 fe ff ff       	call   c0002170 <put_str>
c0002357:	83 c4 10             	add    $0x10,%esp
c000235a:	83 ec 0c             	sub    $0xc,%esp
c000235d:	68 9c b8 00 c0       	push   $0xc000b89c
c0002362:	e8 09 fe ff ff       	call   c0002170 <put_str>
c0002367:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/debug.c:14
   put_str("line:0x");put_int(line);put_str("\n");
c000236a:	83 ec 0c             	sub    $0xc,%esp
c000236d:	68 9e b8 00 c0       	push   $0xc000b89e
c0002372:	e8 f9 fd ff ff       	call   c0002170 <put_str>
c0002377:	83 c4 10             	add    $0x10,%esp
c000237a:	8b 45 0c             	mov    0xc(%ebp),%eax
c000237d:	83 ec 0c             	sub    $0xc,%esp
c0002380:	50                   	push   %eax
c0002381:	e8 14 ff ff ff       	call   c000229a <put_int>
c0002386:	83 c4 10             	add    $0x10,%esp
c0002389:	83 ec 0c             	sub    $0xc,%esp
c000238c:	68 9c b8 00 c0       	push   $0xc000b89c
c0002391:	e8 da fd ff ff       	call   c0002170 <put_str>
c0002396:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/debug.c:15
   put_str("function:");put_str((char*)func);put_str("\n");
c0002399:	83 ec 0c             	sub    $0xc,%esp
c000239c:	68 a6 b8 00 c0       	push   $0xc000b8a6
c00023a1:	e8 ca fd ff ff       	call   c0002170 <put_str>
c00023a6:	83 c4 10             	add    $0x10,%esp
c00023a9:	83 ec 0c             	sub    $0xc,%esp
c00023ac:	ff 75 10             	pushl  0x10(%ebp)
c00023af:	e8 bc fd ff ff       	call   c0002170 <put_str>
c00023b4:	83 c4 10             	add    $0x10,%esp
c00023b7:	83 ec 0c             	sub    $0xc,%esp
c00023ba:	68 9c b8 00 c0       	push   $0xc000b89c
c00023bf:	e8 ac fd ff ff       	call   c0002170 <put_str>
c00023c4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/debug.c:16
   put_str("condition:");put_str((char*)condition);put_str("\n");
c00023c7:	83 ec 0c             	sub    $0xc,%esp
c00023ca:	68 b0 b8 00 c0       	push   $0xc000b8b0
c00023cf:	e8 9c fd ff ff       	call   c0002170 <put_str>
c00023d4:	83 c4 10             	add    $0x10,%esp
c00023d7:	83 ec 0c             	sub    $0xc,%esp
c00023da:	ff 75 14             	pushl  0x14(%ebp)
c00023dd:	e8 8e fd ff ff       	call   c0002170 <put_str>
c00023e2:	83 c4 10             	add    $0x10,%esp
c00023e5:	83 ec 0c             	sub    $0xc,%esp
c00023e8:	68 9c b8 00 c0       	push   $0xc000b89c
c00023ed:	e8 7e fd ff ff       	call   c0002170 <put_str>
c00023f2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/debug.c:17 (discriminator 1)
   while(1);
c00023f5:	eb fe                	jmp    c00023f5 <panic_spin+0xd4>

c00023f7 <bitmap_init>:
bitmap_init():
/work/x86_os_my/lib/kernel/bitmap.c:16
	uint8_t* bits;				位图空间
};
*/

/* 将位图btmp初始化 */
void bitmap_init(struct bitmap* btmp) {
c00023f7:	55                   	push   %ebp
c00023f8:	89 e5                	mov    %esp,%ebp
c00023fa:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/lib/kernel/bitmap.c:17
	memset(btmp->bits, 0, btmp->btmp_bytes_len);   
c00023fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0002400:	8b 10                	mov    (%eax),%edx
c0002402:	8b 45 08             	mov    0x8(%ebp),%eax
c0002405:	8b 40 04             	mov    0x4(%eax),%eax
c0002408:	83 ec 04             	sub    $0x4,%esp
c000240b:	52                   	push   %edx
c000240c:	6a 00                	push   $0x0
c000240e:	50                   	push   %eax
c000240f:	e8 af 13 00 00       	call   c00037c3 <memset>
c0002414:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/bitmap.c:18
}
c0002417:	90                   	nop
c0002418:	c9                   	leave  
c0002419:	c3                   	ret    

c000241a <bitmap_scan_test>:
bitmap_scan_test():
/work/x86_os_my/lib/kernel/bitmap.c:23

/* 判断bit_idx位是否为1
若为1则返回true
否则返回false */
bool bitmap_scan_test(struct bitmap* btmp, uint32_t bit_idx) {
c000241a:	55                   	push   %ebp
c000241b:	89 e5                	mov    %esp,%ebp
c000241d:	53                   	push   %ebx
c000241e:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/kernel/bitmap.c:24
	uint32_t byte_idx = bit_idx / 8;    // 向下取整用于索引数组下标
c0002421:	8b 45 0c             	mov    0xc(%ebp),%eax
c0002424:	c1 e8 03             	shr    $0x3,%eax
c0002427:	89 45 f8             	mov    %eax,-0x8(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:25
	uint32_t bit_odd  = bit_idx % 8;    // 取余用于索引数组内的位
c000242a:	8b 45 0c             	mov    0xc(%ebp),%eax
c000242d:	83 e0 07             	and    $0x7,%eax
c0002430:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:26
	return (btmp->bits[byte_idx] & (BITMAP_MASK << bit_odd));
c0002433:	8b 45 08             	mov    0x8(%ebp),%eax
c0002436:	8b 50 04             	mov    0x4(%eax),%edx
c0002439:	8b 45 f8             	mov    -0x8(%ebp),%eax
c000243c:	01 d0                	add    %edx,%eax
c000243e:	0f b6 00             	movzbl (%eax),%eax
c0002441:	0f b6 d0             	movzbl %al,%edx
c0002444:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002447:	bb 01 00 00 00       	mov    $0x1,%ebx
c000244c:	89 c1                	mov    %eax,%ecx
c000244e:	d3 e3                	shl    %cl,%ebx
c0002450:	89 d8                	mov    %ebx,%eax
c0002452:	21 d0                	and    %edx,%eax
/work/x86_os_my/lib/kernel/bitmap.c:27
}
c0002454:	83 c4 10             	add    $0x10,%esp
c0002457:	5b                   	pop    %ebx
c0002458:	5d                   	pop    %ebp
c0002459:	c3                   	ret    

c000245a <bitmap_scan>:
bitmap_scan():
/work/x86_os_my/lib/kernel/bitmap.c:32

/* 在位图中申请连续cnt个位
成功：返回其起始位下标
失败：返回-1 */
int bitmap_scan(struct bitmap* btmp, uint32_t cnt) {
c000245a:	55                   	push   %ebp
c000245b:	89 e5                	mov    %esp,%ebp
c000245d:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/lib/kernel/bitmap.c:33
	uint32_t idx_byte = 0;	 // 用于记录空闲位所在的字节
c0002460:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:35
	/* 先逐字节比较,蛮力法 */
	while (( 0xff == btmp->bits[idx_byte]) && (idx_byte < btmp->btmp_bytes_len)) {
c0002467:	eb 04                	jmp    c000246d <bitmap_scan+0x13>
/work/x86_os_my/lib/kernel/bitmap.c:37
		/* 1表示该位已分配,所以若为0xff,则表示该字节内已无空闲位,向下一字节继续找 */
		idx_byte++;
c0002469:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:35
成功：返回其起始位下标
失败：返回-1 */
int bitmap_scan(struct bitmap* btmp, uint32_t cnt) {
	uint32_t idx_byte = 0;	 // 用于记录空闲位所在的字节
	/* 先逐字节比较,蛮力法 */
	while (( 0xff == btmp->bits[idx_byte]) && (idx_byte < btmp->btmp_bytes_len)) {
c000246d:	8b 45 08             	mov    0x8(%ebp),%eax
c0002470:	8b 50 04             	mov    0x4(%eax),%edx
c0002473:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002476:	01 d0                	add    %edx,%eax
c0002478:	0f b6 00             	movzbl (%eax),%eax
c000247b:	3c ff                	cmp    $0xff,%al
c000247d:	75 0a                	jne    c0002489 <bitmap_scan+0x2f>
/work/x86_os_my/lib/kernel/bitmap.c:35 (discriminator 1)
c000247f:	8b 45 08             	mov    0x8(%ebp),%eax
c0002482:	8b 00                	mov    (%eax),%eax
c0002484:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0002487:	77 e0                	ja     c0002469 <bitmap_scan+0xf>
/work/x86_os_my/lib/kernel/bitmap.c:39
		/* 1表示该位已分配,所以若为0xff,则表示该字节内已无空闲位,向下一字节继续找 */
		idx_byte++;
	}
	ASSERT(idx_byte < btmp->btmp_bytes_len);	//这里应该是"<="
c0002489:	8b 45 08             	mov    0x8(%ebp),%eax
c000248c:	8b 00                	mov    (%eax),%eax
c000248e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0002491:	77 19                	ja     c00024ac <bitmap_scan+0x52>
/work/x86_os_my/lib/kernel/bitmap.c:39 (discriminator 1)
c0002493:	68 bc b8 00 c0       	push   $0xc000b8bc
c0002498:	68 10 b9 00 c0       	push   $0xc000b910
c000249d:	6a 27                	push   $0x27
c000249f:	68 dc b8 00 c0       	push   $0xc000b8dc
c00024a4:	e8 78 fe ff ff       	call   c0002321 <panic_spin>
c00024a9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/bitmap.c:40
	if (idx_byte == btmp->btmp_bytes_len) {		// 若该内存池找不到可用空间		
c00024ac:	8b 45 08             	mov    0x8(%ebp),%eax
c00024af:	8b 00                	mov    (%eax),%eax
c00024b1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c00024b4:	75 0a                	jne    c00024c0 <bitmap_scan+0x66>
/work/x86_os_my/lib/kernel/bitmap.c:41
		return -1;
c00024b6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00024bb:	e9 cd 00 00 00       	jmp    c000258d <bitmap_scan+0x133>
/work/x86_os_my/lib/kernel/bitmap.c:46
	}

	/* 若在位图数组范围内的某字节内找到了空闲位，
	 * 在该字节内逐位比对,返回空闲位的索引。*/
	int idx_bit = 0;
c00024c0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:48
	/* 和btmp->bits[idx_byte]这个字节逐位对比 */
	while ((uint8_t)(BITMAP_MASK << idx_bit) & btmp->bits[idx_byte]) { 
c00024c7:	eb 04                	jmp    c00024cd <bitmap_scan+0x73>
/work/x86_os_my/lib/kernel/bitmap.c:49
		idx_bit++;
c00024c9:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:48

	/* 若在位图数组范围内的某字节内找到了空闲位，
	 * 在该字节内逐位比对,返回空闲位的索引。*/
	int idx_bit = 0;
	/* 和btmp->bits[idx_byte]这个字节逐位对比 */
	while ((uint8_t)(BITMAP_MASK << idx_bit) & btmp->bits[idx_byte]) { 
c00024cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00024d0:	ba 01 00 00 00       	mov    $0x1,%edx
c00024d5:	89 c1                	mov    %eax,%ecx
c00024d7:	d3 e2                	shl    %cl,%edx
c00024d9:	89 d0                	mov    %edx,%eax
c00024db:	0f b6 d0             	movzbl %al,%edx
c00024de:	8b 45 08             	mov    0x8(%ebp),%eax
c00024e1:	8b 48 04             	mov    0x4(%eax),%ecx
c00024e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00024e7:	01 c8                	add    %ecx,%eax
c00024e9:	0f b6 00             	movzbl (%eax),%eax
c00024ec:	0f b6 c0             	movzbl %al,%eax
c00024ef:	21 d0                	and    %edx,%eax
c00024f1:	85 c0                	test   %eax,%eax
c00024f3:	75 d4                	jne    c00024c9 <bitmap_scan+0x6f>
/work/x86_os_my/lib/kernel/bitmap.c:52
		idx_bit++;
	}
	
	int bit_idx_start = idx_byte * 8 + idx_bit;		// 空闲位在位图内的下标
c00024f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00024f8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c00024ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002502:	01 d0                	add    %edx,%eax
c0002504:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:53
	if (cnt == 1) {
c0002507:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c000250b:	75 05                	jne    c0002512 <bitmap_scan+0xb8>
/work/x86_os_my/lib/kernel/bitmap.c:54
		return bit_idx_start;
c000250d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002510:	eb 7b                	jmp    c000258d <bitmap_scan+0x133>
/work/x86_os_my/lib/kernel/bitmap.c:57
	}

	uint32_t bit_left = (btmp->btmp_bytes_len * 8 - bit_idx_start);	// 记录还有多少位可以判断
c0002512:	8b 45 08             	mov    0x8(%ebp),%eax
c0002515:	8b 00                	mov    (%eax),%eax
c0002517:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c000251e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002521:	29 c2                	sub    %eax,%edx
c0002523:	89 d0                	mov    %edx,%eax
c0002525:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:58
	uint32_t next_bit = bit_idx_start + 1;
c0002528:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000252b:	83 c0 01             	add    $0x1,%eax
c000252e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:59
	uint32_t count = 1;			// 用于记录找到的空闲位的个数
c0002531:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:61

	bit_idx_start = -1;			// 初始化为-1，若找不到连续的位就直接返回-1
c0002538:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:62
	while (bit_left-- > 0) {
c000253f:	eb 3c                	jmp    c000257d <bitmap_scan+0x123>
/work/x86_os_my/lib/kernel/bitmap.c:63
		if (!(bitmap_scan_test(btmp, next_bit))) {	// 判断next_bit位是否为1,=1返回true，=0返回false
c0002541:	83 ec 08             	sub    $0x8,%esp
c0002544:	ff 75 e4             	pushl  -0x1c(%ebp)
c0002547:	ff 75 08             	pushl  0x8(%ebp)
c000254a:	e8 cb fe ff ff       	call   c000241a <bitmap_scan_test>
c000254f:	83 c4 10             	add    $0x10,%esp
c0002552:	85 c0                	test   %eax,%eax
c0002554:	75 06                	jne    c000255c <bitmap_scan+0x102>
/work/x86_os_my/lib/kernel/bitmap.c:64
			count++;
c0002556:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
c000255a:	eb 07                	jmp    c0002563 <bitmap_scan+0x109>
/work/x86_os_my/lib/kernel/bitmap.c:66
		} else {
			count = 0;			// 重新从0找cnt个连续的bit
c000255c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:69
		}
		
		if (count == cnt) {		// 已找到连续的cnt个空位
c0002563:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0002566:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0002569:	75 0e                	jne    c0002579 <bitmap_scan+0x11f>
/work/x86_os_my/lib/kernel/bitmap.c:70
			bit_idx_start = next_bit - cnt + 1;
c000256b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000256e:	2b 45 0c             	sub    0xc(%ebp),%eax
c0002571:	83 c0 01             	add    $0x1,%eax
c0002574:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:71
			break;
c0002577:	eb 11                	jmp    c000258a <bitmap_scan+0x130>
/work/x86_os_my/lib/kernel/bitmap.c:73
		}
		next_bit++;
c0002579:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:62
	uint32_t bit_left = (btmp->btmp_bytes_len * 8 - bit_idx_start);	// 记录还有多少位可以判断
	uint32_t next_bit = bit_idx_start + 1;
	uint32_t count = 1;			// 用于记录找到的空闲位的个数

	bit_idx_start = -1;			// 初始化为-1，若找不到连续的位就直接返回-1
	while (bit_left-- > 0) {
c000257d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002580:	8d 50 ff             	lea    -0x1(%eax),%edx
c0002583:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0002586:	85 c0                	test   %eax,%eax
c0002588:	75 b7                	jne    c0002541 <bitmap_scan+0xe7>
/work/x86_os_my/lib/kernel/bitmap.c:75
			bit_idx_start = next_bit - cnt + 1;
			break;
		}
		next_bit++;
	}
	return bit_idx_start;
c000258a:	8b 45 ec             	mov    -0x14(%ebp),%eax
/work/x86_os_my/lib/kernel/bitmap.c:76
}
c000258d:	c9                   	leave  
c000258e:	c3                   	ret    

c000258f <bitmap_set>:
bitmap_set():
/work/x86_os_my/lib/kernel/bitmap.c:79

/* 将位图btmp的bit_idx位设置为value */
void bitmap_set(struct bitmap* btmp, uint32_t bit_idx, int8_t value) {
c000258f:	55                   	push   %ebp
c0002590:	89 e5                	mov    %esp,%ebp
c0002592:	56                   	push   %esi
c0002593:	53                   	push   %ebx
c0002594:	83 ec 20             	sub    $0x20,%esp
c0002597:	8b 45 10             	mov    0x10(%ebp),%eax
c000259a:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:80
	ASSERT((value == 0) || (value == 1));
c000259d:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c00025a1:	74 1f                	je     c00025c2 <bitmap_set+0x33>
/work/x86_os_my/lib/kernel/bitmap.c:80 (discriminator 1)
c00025a3:	80 7d e4 01          	cmpb   $0x1,-0x1c(%ebp)
c00025a7:	74 19                	je     c00025c2 <bitmap_set+0x33>
/work/x86_os_my/lib/kernel/bitmap.c:80 (discriminator 2)
c00025a9:	68 f0 b8 00 c0       	push   $0xc000b8f0
c00025ae:	68 1c b9 00 c0       	push   $0xc000b91c
c00025b3:	6a 50                	push   $0x50
c00025b5:	68 dc b8 00 c0       	push   $0xc000b8dc
c00025ba:	e8 62 fd ff ff       	call   c0002321 <panic_spin>
c00025bf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/bitmap.c:81
	uint32_t byte_idx = bit_idx / 8;    // 向下取整用于索引数组下标
c00025c2:	8b 45 0c             	mov    0xc(%ebp),%eax
c00025c5:	c1 e8 03             	shr    $0x3,%eax
c00025c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:82
	uint32_t bit_odd  = bit_idx % 8;    // 取余用于索引数组内的位
c00025cb:	8b 45 0c             	mov    0xc(%ebp),%eax
c00025ce:	83 e0 07             	and    $0x7,%eax
c00025d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:86

	/* 一般都会用个0x1这样的数对字节中的位操作,
	* 将1任意移动后再取反,或者先取反再移位,可用来对位置0操作。*/
	if (value) {
c00025d4:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c00025d8:	74 2f                	je     c0002609 <bitmap_set+0x7a>
/work/x86_os_my/lib/kernel/bitmap.c:87
		btmp->bits[byte_idx] |= (BITMAP_MASK << bit_odd);
c00025da:	8b 45 08             	mov    0x8(%ebp),%eax
c00025dd:	8b 50 04             	mov    0x4(%eax),%edx
c00025e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00025e3:	01 c2                	add    %eax,%edx
c00025e5:	8b 45 08             	mov    0x8(%ebp),%eax
c00025e8:	8b 48 04             	mov    0x4(%eax),%ecx
c00025eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00025ee:	01 c8                	add    %ecx,%eax
c00025f0:	0f b6 00             	movzbl (%eax),%eax
c00025f3:	89 c6                	mov    %eax,%esi
c00025f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00025f8:	bb 01 00 00 00       	mov    $0x1,%ebx
c00025fd:	89 c1                	mov    %eax,%ecx
c00025ff:	d3 e3                	shl    %cl,%ebx
c0002601:	89 d8                	mov    %ebx,%eax
c0002603:	09 f0                	or     %esi,%eax
c0002605:	88 02                	mov    %al,(%edx)
/work/x86_os_my/lib/kernel/bitmap.c:91
	} else {
		btmp->bits[byte_idx] &= ~(BITMAP_MASK << bit_odd);
	}
}
c0002607:	eb 2f                	jmp    c0002638 <bitmap_set+0xa9>
/work/x86_os_my/lib/kernel/bitmap.c:89
	/* 一般都会用个0x1这样的数对字节中的位操作,
	* 将1任意移动后再取反,或者先取反再移位,可用来对位置0操作。*/
	if (value) {
		btmp->bits[byte_idx] |= (BITMAP_MASK << bit_odd);
	} else {
		btmp->bits[byte_idx] &= ~(BITMAP_MASK << bit_odd);
c0002609:	8b 45 08             	mov    0x8(%ebp),%eax
c000260c:	8b 50 04             	mov    0x4(%eax),%edx
c000260f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002612:	01 c2                	add    %eax,%edx
c0002614:	8b 45 08             	mov    0x8(%ebp),%eax
c0002617:	8b 48 04             	mov    0x4(%eax),%ecx
c000261a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000261d:	01 c8                	add    %ecx,%eax
c000261f:	0f b6 00             	movzbl (%eax),%eax
c0002622:	89 c3                	mov    %eax,%ebx
c0002624:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002627:	be 01 00 00 00       	mov    $0x1,%esi
c000262c:	89 c1                	mov    %eax,%ecx
c000262e:	d3 e6                	shl    %cl,%esi
c0002630:	89 f0                	mov    %esi,%eax
c0002632:	f7 d0                	not    %eax
c0002634:	21 d8                	and    %ebx,%eax
c0002636:	88 02                	mov    %al,(%edx)
/work/x86_os_my/lib/kernel/bitmap.c:91
	}
}
c0002638:	90                   	nop
c0002639:	8d 65 f8             	lea    -0x8(%ebp),%esp
c000263c:	5b                   	pop    %ebx
c000263d:	5e                   	pop    %esi
c000263e:	5d                   	pop    %ebp
c000263f:	c3                   	ret    

c0002640 <vaddr_get>:
vaddr_get():
/work/x86_os_my/kernel/memory.c:66
struct pool kernel_pool, user_pool;		// 生成内核内存池和用户内存池
struct virtual_addr kernel_vaddr;		// 此结构是用来给内核分配虚拟地址

/* 在pf表示的虚拟内存池中申请pg_cnt个虚拟页,
 * 成功则返回虚拟页的起始地址, 失败则返回NULL */
static void* vaddr_get(enum pool_flags pf, uint32_t pg_cnt) {
c0002640:	55                   	push   %ebp
c0002641:	89 e5                	mov    %esp,%ebp
c0002643:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:67
	int vaddr_start = 0, bit_idx_start = -1;
c0002646:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c000264d:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:68
	uint32_t cnt = 0;
c0002654:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:69
	if (pf == PF_KERNEL) {
c000265b:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c000265f:	75 64                	jne    c00026c5 <vaddr_get+0x85>
/work/x86_os_my/kernel/memory.c:71
		// 在位图中申请连续cnt个位 成功：返回其起始位下标
		bit_idx_start  = bitmap_scan(&kernel_vaddr.vaddr_bitmap, pg_cnt);
c0002661:	83 ec 08             	sub    $0x8,%esp
c0002664:	ff 75 0c             	pushl  0xc(%ebp)
c0002667:	68 28 14 01 c0       	push   $0xc0011428
c000266c:	e8 e9 fd ff ff       	call   c000245a <bitmap_scan>
c0002671:	83 c4 10             	add    $0x10,%esp
c0002674:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:72
		if (bit_idx_start == -1) {	//失败
c0002677:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%ebp)
c000267b:	75 2b                	jne    c00026a8 <vaddr_get+0x68>
/work/x86_os_my/kernel/memory.c:73
			return NULL;
c000267d:	b8 00 00 00 00       	mov    $0x0,%eax
c0002682:	e9 cd 00 00 00       	jmp    c0002754 <vaddr_get+0x114>
/work/x86_os_my/kernel/memory.c:77
		}
		while(cnt < pg_cnt) {
			// 设置位图中的位，表示内存已被占用
			bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 1);
c0002687:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000268a:	8d 50 01             	lea    0x1(%eax),%edx
c000268d:	89 55 f0             	mov    %edx,-0x10(%ebp)
c0002690:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0002693:	01 d0                	add    %edx,%eax
c0002695:	83 ec 04             	sub    $0x4,%esp
c0002698:	6a 01                	push   $0x1
c000269a:	50                   	push   %eax
c000269b:	68 28 14 01 c0       	push   $0xc0011428
c00026a0:	e8 ea fe ff ff       	call   c000258f <bitmap_set>
c00026a5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:75
		// 在位图中申请连续cnt个位 成功：返回其起始位下标
		bit_idx_start  = bitmap_scan(&kernel_vaddr.vaddr_bitmap, pg_cnt);
		if (bit_idx_start == -1) {	//失败
			return NULL;
		}
		while(cnt < pg_cnt) {
c00026a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00026ab:	3b 45 0c             	cmp    0xc(%ebp),%eax
c00026ae:	72 d7                	jb     c0002687 <vaddr_get+0x47>
/work/x86_os_my/kernel/memory.c:79
			// 设置位图中的位，表示内存已被占用
			bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 1);
		}
		vaddr_start = kernel_vaddr.vaddr_start + bit_idx_start * PG_SIZE;
c00026b0:	a1 30 14 01 c0       	mov    0xc0011430,%eax
c00026b5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c00026b8:	c1 e2 0c             	shl    $0xc,%edx
c00026bb:	01 d0                	add    %edx,%eax
c00026bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00026c0:	e9 8c 00 00 00       	jmp    c0002751 <vaddr_get+0x111>
/work/x86_os_my/kernel/memory.c:81
	} else {
		struct task_struct* cur = running_thread();
c00026c5:	e8 e0 14 00 00       	call   c0003baa <running_thread>
c00026ca:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:82
		bit_idx_start  = bitmap_scan(&cur->userprog_vaddr.vaddr_bitmap, pg_cnt);
c00026cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00026d0:	83 c0 58             	add    $0x58,%eax
c00026d3:	83 ec 08             	sub    $0x8,%esp
c00026d6:	ff 75 0c             	pushl  0xc(%ebp)
c00026d9:	50                   	push   %eax
c00026da:	e8 7b fd ff ff       	call   c000245a <bitmap_scan>
c00026df:	83 c4 10             	add    $0x10,%esp
c00026e2:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:83
		if (bit_idx_start == -1) {
c00026e5:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%ebp)
c00026e9:	75 2a                	jne    c0002715 <vaddr_get+0xd5>
/work/x86_os_my/kernel/memory.c:84
			return NULL;
c00026eb:	b8 00 00 00 00       	mov    $0x0,%eax
c00026f0:	eb 62                	jmp    c0002754 <vaddr_get+0x114>
/work/x86_os_my/kernel/memory.c:87
		}
		while(cnt < pg_cnt) {
			bitmap_set(&cur->userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 1);
c00026f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00026f5:	8d 50 01             	lea    0x1(%eax),%edx
c00026f8:	89 55 f0             	mov    %edx,-0x10(%ebp)
c00026fb:	8b 55 ec             	mov    -0x14(%ebp),%edx
c00026fe:	01 c2                	add    %eax,%edx
c0002700:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002703:	83 c0 58             	add    $0x58,%eax
c0002706:	83 ec 04             	sub    $0x4,%esp
c0002709:	6a 01                	push   $0x1
c000270b:	52                   	push   %edx
c000270c:	50                   	push   %eax
c000270d:	e8 7d fe ff ff       	call   c000258f <bitmap_set>
c0002712:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:86
		struct task_struct* cur = running_thread();
		bit_idx_start  = bitmap_scan(&cur->userprog_vaddr.vaddr_bitmap, pg_cnt);
		if (bit_idx_start == -1) {
			return NULL;
		}
		while(cnt < pg_cnt) {
c0002715:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002718:	3b 45 0c             	cmp    0xc(%ebp),%eax
c000271b:	72 d5                	jb     c00026f2 <vaddr_get+0xb2>
/work/x86_os_my/kernel/memory.c:89
			bitmap_set(&cur->userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 1);
		}
		vaddr_start = cur->userprog_vaddr.vaddr_start + bit_idx_start * PG_SIZE;
c000271d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002720:	8b 40 60             	mov    0x60(%eax),%eax
c0002723:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0002726:	c1 e2 0c             	shl    $0xc,%edx
c0002729:	01 d0                	add    %edx,%eax
c000272b:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:92

		/* (0xc0000000 - PG_SIZE)做为用户3级栈已经在start_process被分配 */
		ASSERT((uint32_t)vaddr_start < (0xc0000000 - PG_SIZE));
c000272e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002731:	3d ff ef ff bf       	cmp    $0xbfffefff,%eax
c0002736:	76 19                	jbe    c0002751 <vaddr_get+0x111>
/work/x86_os_my/kernel/memory.c:92 (discriminator 1)
c0002738:	68 28 b9 00 c0       	push   $0xc000b928
c000273d:	68 90 bc 00 c0       	push   $0xc000bc90
c0002742:	6a 5c                	push   $0x5c
c0002744:	68 57 b9 00 c0       	push   $0xc000b957
c0002749:	e8 d3 fb ff ff       	call   c0002321 <panic_spin>
c000274e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:95
		
	}
	return (void*)vaddr_start;
c0002751:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/kernel/memory.c:96
}
c0002754:	c9                   	leave  
c0002755:	c3                   	ret    

c0002756 <pte_ptr>:
pte_ptr():
/work/x86_os_my/kernel/memory.c:103
// 页表项 page table
/* 得到虚拟地址vaddr对应的pte指针*/
// 虚拟地址 vaddr 所在 pte 的"虚拟地址"!!!
// *pte 代表的是 pte 页表项的内容,
// 也就是 vaddr 最终所映射到的物理页框的 32 位地址中的高 20 位和 12 位的"页表项"属性
uint32_t* pte_ptr(uint32_t vaddr) {
c0002756:	55                   	push   %ebp
c0002757:	89 e5                	mov    %esp,%ebp
c0002759:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/memory.c:108
	/* 先找到页目录表 + \
	* 再用vaddr的pde部分做为索引，找到某一个页表 + \
	* 再用vaddr的pte部分作为索引，找到某一个页表项*/
	uint32_t* pte = (uint32_t*)(0xffc00000 + \
					((vaddr & 0xffc00000) >> 10) + \
c000275c:	8b 45 08             	mov    0x8(%ebp),%eax
c000275f:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0002764:	c1 e8 0a             	shr    $0xa,%eax
c0002767:	89 c2                	mov    %eax,%edx
/work/x86_os_my/kernel/memory.c:109
					PTE_IDX(vaddr) * 4);
c0002769:	8b 45 08             	mov    0x8(%ebp),%eax
c000276c:	25 00 f0 3f 00       	and    $0x3ff000,%eax
c0002771:	c1 e8 0c             	shr    $0xc,%eax
c0002774:	c1 e0 02             	shl    $0x2,%eax
/work/x86_os_my/kernel/memory.c:108
uint32_t* pte_ptr(uint32_t vaddr) {
	/* 先找到页目录表 + \
	* 再用vaddr的pde部分做为索引，找到某一个页表 + \
	* 再用vaddr的pte部分作为索引，找到某一个页表项*/
	uint32_t* pte = (uint32_t*)(0xffc00000 + \
					((vaddr & 0xffc00000) >> 10) + \
c0002777:	01 d0                	add    %edx,%eax
c0002779:	2d 00 00 40 00       	sub    $0x400000,%eax
/work/x86_os_my/kernel/memory.c:107
// 也就是 vaddr 最终所映射到的物理页框的 32 位地址中的高 20 位和 12 位的"页表项"属性
uint32_t* pte_ptr(uint32_t vaddr) {
	/* 先找到页目录表 + \
	* 再用vaddr的pde部分做为索引，找到某一个页表 + \
	* 再用vaddr的pte部分作为索引，找到某一个页表项*/
	uint32_t* pte = (uint32_t*)(0xffc00000 + \
c000277e:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/kernel/memory.c:110
					((vaddr & 0xffc00000) >> 10) + \
					PTE_IDX(vaddr) * 4);
	return pte;
c0002781:	8b 45 fc             	mov    -0x4(%ebp),%eax
/work/x86_os_my/kernel/memory.c:111
}
c0002784:	c9                   	leave  
c0002785:	c3                   	ret    

c0002786 <pde_ptr>:
pde_ptr():
/work/x86_os_my/kernel/memory.c:118
// 页目录表项 page Directory table entry
/* 得到虚拟地址vaddr对应的pde的指针 */
// 虚拟地址 vaddr 所在 pde 的"虚拟地址"!!!
// *pde 代表的是 pde 页目录项的内容
// 也就是 vaddr 最终所映射到的物理页框的 32 位地址中的高 20 位和 12 位的"页目录项"属性
uint32_t* pde_ptr(uint32_t vaddr) {
c0002786:	55                   	push   %ebp
c0002787:	89 e5                	mov    %esp,%ebp
c0002789:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/memory.c:120
	/* 0xfffff是用来访问到页目录表本身所在的地址 */
	uint32_t* pde = (uint32_t*)((0xfffff000) + PDE_IDX(vaddr) * 4);
c000278c:	8b 45 08             	mov    0x8(%ebp),%eax
c000278f:	c1 e8 16             	shr    $0x16,%eax
c0002792:	05 00 fc ff 3f       	add    $0x3ffffc00,%eax
c0002797:	c1 e0 02             	shl    $0x2,%eax
c000279a:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/kernel/memory.c:121
	return pde;
c000279d:	8b 45 fc             	mov    -0x4(%ebp),%eax
/work/x86_os_my/kernel/memory.c:122
}
c00027a0:	c9                   	leave  
c00027a1:	c3                   	ret    

c00027a2 <palloc>:
palloc():
/work/x86_os_my/kernel/memory.c:126

/* 在m_pool指向的物理内存池中分配1个物理页,
 * 成功则返回页框的物理地址,失败则返回NULL */
static void* palloc(struct pool* m_pool) {
c00027a2:	55                   	push   %ebp
c00027a3:	89 e5                	mov    %esp,%ebp
c00027a5:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:128
	/* 扫描或设置位图要保证原子操作 */
	int bit_idx = bitmap_scan(&m_pool->pool_bitmap, 1);    // 找一个物理页面
c00027a8:	8b 45 08             	mov    0x8(%ebp),%eax
c00027ab:	83 ec 08             	sub    $0x8,%esp
c00027ae:	6a 01                	push   $0x1
c00027b0:	50                   	push   %eax
c00027b1:	e8 a4 fc ff ff       	call   c000245a <bitmap_scan>
c00027b6:	83 c4 10             	add    $0x10,%esp
c00027b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:129
	if (bit_idx == -1 ) {
c00027bc:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c00027c0:	75 07                	jne    c00027c9 <palloc+0x27>
/work/x86_os_my/kernel/memory.c:130
		return NULL;
c00027c2:	b8 00 00 00 00       	mov    $0x0,%eax
c00027c7:	eb 2b                	jmp    c00027f4 <palloc+0x52>
/work/x86_os_my/kernel/memory.c:132
	}
	bitmap_set(&m_pool->pool_bitmap, bit_idx, 1);	// 将此位bit_idx置1
c00027c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c00027cc:	8b 45 08             	mov    0x8(%ebp),%eax
c00027cf:	83 ec 04             	sub    $0x4,%esp
c00027d2:	6a 01                	push   $0x1
c00027d4:	52                   	push   %edx
c00027d5:	50                   	push   %eax
c00027d6:	e8 b4 fd ff ff       	call   c000258f <bitmap_set>
c00027db:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:133
	uint32_t page_phyaddr = ((bit_idx * PG_SIZE) + m_pool->phy_addr_start);
c00027de:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00027e1:	c1 e0 0c             	shl    $0xc,%eax
c00027e4:	89 c2                	mov    %eax,%edx
c00027e6:	8b 45 08             	mov    0x8(%ebp),%eax
c00027e9:	8b 40 08             	mov    0x8(%eax),%eax
c00027ec:	01 d0                	add    %edx,%eax
c00027ee:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:134
	return (void*)page_phyaddr;
c00027f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
/work/x86_os_my/kernel/memory.c:135
}
c00027f4:	c9                   	leave  
c00027f5:	c3                   	ret    

c00027f6 <page_table_add>:
page_table_add():
/work/x86_os_my/kernel/memory.c:138

/* 页表中添加虚拟地址_vaddr与物理地址_page_phyaddr的映射 */
static void page_table_add(void* _vaddr, void* _page_phyaddr) {
c00027f6:	55                   	push   %ebp
c00027f7:	89 e5                	mov    %esp,%ebp
c00027f9:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/kernel/memory.c:139
	uint32_t vaddr = (uint32_t)_vaddr, page_phyaddr = (uint32_t)_page_phyaddr;
c00027fc:	8b 45 08             	mov    0x8(%ebp),%eax
c00027ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0002802:	8b 45 0c             	mov    0xc(%ebp),%eax
c0002805:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:140
	uint32_t* pde = pde_ptr(vaddr);	//变量pde是虚拟地址!!!
c0002808:	ff 75 f4             	pushl  -0xc(%ebp)
c000280b:	e8 76 ff ff ff       	call   c0002786 <pde_ptr>
c0002810:	83 c4 04             	add    $0x4,%esp
c0002813:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:141
	uint32_t* pte = pte_ptr(vaddr);	//变量pte是虚拟地址!!!
c0002816:	ff 75 f4             	pushl  -0xc(%ebp)
c0002819:	e8 38 ff ff ff       	call   c0002756 <pte_ptr>
c000281e:	83 c4 04             	add    $0x4,%esp
c0002821:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:149
	* pde页目录项 pte页表项
	* 执行*pte可能会访问到空的pde。所以确保pde创建完成后才能执行*pte，否则会引发page_fault。
	* 因此在*pde为0时，*pte只能出现在下面else语句块中的*pde后面。
	* *********************************************************/
	/* 先在页目录内判断目录项的P位，若为1,则表示该表已存在 */
	if (*pde & 0x00000001) {			// 页目录项 存在
c0002824:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002827:	8b 00                	mov    (%eax),%eax
c0002829:	83 e0 01             	and    $0x1,%eax
c000282c:	85 c0                	test   %eax,%eax
c000282e:	74 64                	je     c0002894 <page_table_add+0x9e>
/work/x86_os_my/kernel/memory.c:150
		ASSERT(!(*pte & 0x00000001));	// 页表项不存在才能往下执行，否则panic
c0002830:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002833:	8b 00                	mov    (%eax),%eax
c0002835:	83 e0 01             	and    $0x1,%eax
c0002838:	85 c0                	test   %eax,%eax
c000283a:	74 1c                	je     c0002858 <page_table_add+0x62>
/work/x86_os_my/kernel/memory.c:150 (discriminator 1)
c000283c:	68 67 b9 00 c0       	push   $0xc000b967
c0002841:	68 9c bc 00 c0       	push   $0xc000bc9c
c0002846:	68 96 00 00 00       	push   $0x96
c000284b:	68 57 b9 00 c0       	push   $0xc000b957
c0002850:	e8 cc fa ff ff       	call   c0002321 <panic_spin>
c0002855:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:152

		if (!(*pte & 0x00000001)) {		// 页表项pte不存在，创建PTE
c0002858:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000285b:	8b 00                	mov    (%eax),%eax
c000285d:	83 e0 01             	and    $0x1,%eax
c0002860:	85 c0                	test   %eax,%eax
c0002862:	75 12                	jne    c0002876 <page_table_add+0x80>
/work/x86_os_my/kernel/memory.c:153
			*pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);		// 物理地址 | US=1,RW=1,P=1
c0002864:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002867:	83 c8 07             	or     $0x7,%eax
c000286a:	89 c2                	mov    %eax,%edx
c000286c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000286f:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/kernel/memory.c:173
		memset((void*)((int)pte & 0xfffff000), 0, PG_SIZE);

		ASSERT(!(*pte & 0x00000001));	// 页表项不存在才能往下执行，否则panic
		*pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);			// 物理地址 | US=1,RW=1,P=1
	}
}
c0002871:	e9 8e 00 00 00       	jmp    c0002904 <page_table_add+0x10e>
/work/x86_os_my/kernel/memory.c:155
		ASSERT(!(*pte & 0x00000001));	// 页表项不存在才能往下执行，否则panic

		if (!(*pte & 0x00000001)) {		// 页表项pte不存在，创建PTE
			*pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);		// 物理地址 | US=1,RW=1,P=1
		} else {						// 不会执行到这，因为上面的ASSERT
			PANIC("pte repeat");
c0002876:	68 7c b9 00 c0       	push   $0xc000b97c
c000287b:	68 9c bc 00 c0       	push   $0xc000bc9c
c0002880:	68 9b 00 00 00       	push   $0x9b
c0002885:	68 57 b9 00 c0       	push   $0xc000b957
c000288a:	e8 92 fa ff ff       	call   c0002321 <panic_spin>
c000288f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:173
		memset((void*)((int)pte & 0xfffff000), 0, PG_SIZE);

		ASSERT(!(*pte & 0x00000001));	// 页表项不存在才能往下执行，否则panic
		*pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);			// 物理地址 | US=1,RW=1,P=1
	}
}
c0002892:	eb 70                	jmp    c0002904 <page_table_add+0x10e>
/work/x86_os_my/kernel/memory.c:159
		} else {						// 不会执行到这，因为上面的ASSERT
			PANIC("pte repeat");
		}
	} else {							// 页目录项不存在，先创建页目录，再创建页表项
		/* 页表中用到的页一律从内核空间分配 */
		uint32_t pde_phyaddr = (uint32_t)palloc(&kernel_pool);
c0002894:	83 ec 0c             	sub    $0xc,%esp
c0002897:	68 40 14 01 c0       	push   $0xc0011440
c000289c:	e8 01 ff ff ff       	call   c00027a2 <palloc>
c00028a1:	83 c4 10             	add    $0x10,%esp
c00028a4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/kernel/memory.c:160
		*pde = (pde_phyaddr | PG_US_U | PG_RW_W | PG_P_1);			// 注意这行是pde_phyaddr，不是page_phyaddr!!!
c00028a7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00028aa:	83 c8 07             	or     $0x7,%eax
c00028ad:	89 c2                	mov    %eax,%edx
c00028af:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00028b2:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/kernel/memory.c:168
		 * 访问物理地址 pde_phyaddr，需要找到它的虚拟地址！
		 * 只要用_vaddr的 PTE 取高20位即可。
		   搞得这么难理解，其实就是0xffc00000找到页目录表，然后加上vaddr的PDE在页目录表中的索引
		   (uint32_t*)(0xffc00000 + ((vaddr & 0xffc00000) >> 10))
		 */
		memset((void*)((int)pte & 0xfffff000), 0, PG_SIZE);
c00028b4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00028b7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c00028bc:	83 ec 04             	sub    $0x4,%esp
c00028bf:	68 00 10 00 00       	push   $0x1000
c00028c4:	6a 00                	push   $0x0
c00028c6:	50                   	push   %eax
c00028c7:	e8 f7 0e 00 00       	call   c00037c3 <memset>
c00028cc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:170

		ASSERT(!(*pte & 0x00000001));	// 页表项不存在才能往下执行，否则panic
c00028cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00028d2:	8b 00                	mov    (%eax),%eax
c00028d4:	83 e0 01             	and    $0x1,%eax
c00028d7:	85 c0                	test   %eax,%eax
c00028d9:	74 1c                	je     c00028f7 <page_table_add+0x101>
/work/x86_os_my/kernel/memory.c:170 (discriminator 1)
c00028db:	68 67 b9 00 c0       	push   $0xc000b967
c00028e0:	68 9c bc 00 c0       	push   $0xc000bc9c
c00028e5:	68 aa 00 00 00       	push   $0xaa
c00028ea:	68 57 b9 00 c0       	push   $0xc000b957
c00028ef:	e8 2d fa ff ff       	call   c0002321 <panic_spin>
c00028f4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:171
		*pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);			// 物理地址 | US=1,RW=1,P=1
c00028f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00028fa:	83 c8 07             	or     $0x7,%eax
c00028fd:	89 c2                	mov    %eax,%edx
c00028ff:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002902:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/kernel/memory.c:173
	}
}
c0002904:	90                   	nop
c0002905:	c9                   	leave  
c0002906:	c3                   	ret    

c0002907 <malloc_page>:
malloc_page():
/work/x86_os_my/kernel/memory.c:176

/* 分配pg_cnt个页空间,成功则返回起始虚拟地址,失败时返回NULL */
void* malloc_page(enum pool_flags pf, uint32_t pg_cnt) {
c0002907:	55                   	push   %ebp
c0002908:	89 e5                	mov    %esp,%ebp
c000290a:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/kernel/memory.c:177
	ASSERT(pg_cnt > 0 && pg_cnt < 3840);
c000290d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0002911:	74 09                	je     c000291c <malloc_page+0x15>
/work/x86_os_my/kernel/memory.c:177 (discriminator 1)
c0002913:	81 7d 0c ff 0e 00 00 	cmpl   $0xeff,0xc(%ebp)
c000291a:	76 1c                	jbe    c0002938 <malloc_page+0x31>
/work/x86_os_my/kernel/memory.c:177 (discriminator 3)
c000291c:	68 87 b9 00 c0       	push   $0xc000b987
c0002921:	68 ac bc 00 c0       	push   $0xc000bcac
c0002926:	68 b1 00 00 00       	push   $0xb1
c000292b:	68 57 b9 00 c0       	push   $0xc000b957
c0002930:	e8 ec f9 ff ff       	call   c0002321 <panic_spin>
c0002935:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:183
	/***********   malloc_page的原理是三个动作的合成:   ***********
		1 通过vaddr_get在虚拟内存池中申请虚拟地址
		2 通过palloc在物理内存池中申请物理页
		3 通过page_table_add将以上得到的虚拟地址和物理地址在页表中完成映射
	***************************************************************/
	void* vaddr_start = vaddr_get(pf, pg_cnt);
c0002938:	83 ec 08             	sub    $0x8,%esp
c000293b:	ff 75 0c             	pushl  0xc(%ebp)
c000293e:	ff 75 08             	pushl  0x8(%ebp)
c0002941:	e8 fa fc ff ff       	call   c0002640 <vaddr_get>
c0002946:	83 c4 10             	add    $0x10,%esp
c0002949:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:184
	if (vaddr_start == NULL) {
c000294c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0002950:	75 07                	jne    c0002959 <malloc_page+0x52>
/work/x86_os_my/kernel/memory.c:185
		return NULL;
c0002952:	b8 00 00 00 00       	mov    $0x0,%eax
c0002957:	eb 6e                	jmp    c00029c7 <malloc_page+0xc0>
/work/x86_os_my/kernel/memory.c:188
	}

	uint32_t vaddr = (uint32_t)vaddr_start, cnt = pg_cnt;
c0002959:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000295c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c000295f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0002962:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:189
	struct pool* mem_pool = pf & PF_KERNEL ? &kernel_pool : &user_pool;
c0002965:	8b 45 08             	mov    0x8(%ebp),%eax
c0002968:	83 e0 01             	and    $0x1,%eax
c000296b:	85 c0                	test   %eax,%eax
c000296d:	74 07                	je     c0002976 <malloc_page+0x6f>
/work/x86_os_my/kernel/memory.c:189 (discriminator 1)
c000296f:	b8 40 14 01 c0       	mov    $0xc0011440,%eax
c0002974:	eb 05                	jmp    c000297b <malloc_page+0x74>
/work/x86_os_my/kernel/memory.c:189 (discriminator 2)
c0002976:	b8 40 13 01 c0       	mov    $0xc0011340,%eax
/work/x86_os_my/kernel/memory.c:189 (discriminator 4)
c000297b:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:192 (discriminator 4)

	/* 因为虚拟地址是连续的,但物理地址可以是不连续的,所以逐个做映射*/
	while (cnt-- > 0) {
c000297e:	eb 37                	jmp    c00029b7 <malloc_page+0xb0>
/work/x86_os_my/kernel/memory.c:193
		void* page_phyaddr = palloc(mem_pool);
c0002980:	83 ec 0c             	sub    $0xc,%esp
c0002983:	ff 75 e8             	pushl  -0x18(%ebp)
c0002986:	e8 17 fe ff ff       	call   c00027a2 <palloc>
c000298b:	83 c4 10             	add    $0x10,%esp
c000298e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/kernel/memory.c:194
		if (page_phyaddr == NULL) {  // 失败时要将曾经已申请的虚拟地址和物理页全部回滚，在将来完成内存回收时再补充
c0002991:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0002995:	75 07                	jne    c000299e <malloc_page+0x97>
/work/x86_os_my/kernel/memory.c:195
			return NULL;
c0002997:	b8 00 00 00 00       	mov    $0x0,%eax
c000299c:	eb 29                	jmp    c00029c7 <malloc_page+0xc0>
/work/x86_os_my/kernel/memory.c:197
		}
		page_table_add((void*)vaddr, page_phyaddr); // 在页表中做映射 
c000299e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00029a1:	83 ec 08             	sub    $0x8,%esp
c00029a4:	ff 75 e4             	pushl  -0x1c(%ebp)
c00029a7:	50                   	push   %eax
c00029a8:	e8 49 fe ff ff       	call   c00027f6 <page_table_add>
c00029ad:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:198
		vaddr += PG_SIZE;		 // 下一个虚拟页
c00029b0:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:192

	uint32_t vaddr = (uint32_t)vaddr_start, cnt = pg_cnt;
	struct pool* mem_pool = pf & PF_KERNEL ? &kernel_pool : &user_pool;

	/* 因为虚拟地址是连续的,但物理地址可以是不连续的,所以逐个做映射*/
	while (cnt-- > 0) {
c00029b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00029ba:	8d 50 ff             	lea    -0x1(%eax),%edx
c00029bd:	89 55 f0             	mov    %edx,-0x10(%ebp)
c00029c0:	85 c0                	test   %eax,%eax
c00029c2:	75 bc                	jne    c0002980 <malloc_page+0x79>
/work/x86_os_my/kernel/memory.c:200
			return NULL;
		}
		page_table_add((void*)vaddr, page_phyaddr); // 在页表中做映射 
		vaddr += PG_SIZE;		 // 下一个虚拟页
	}
	return vaddr_start;
c00029c4:	8b 45 ec             	mov    -0x14(%ebp),%eax
/work/x86_os_my/kernel/memory.c:201
}
c00029c7:	c9                   	leave  
c00029c8:	c3                   	ret    

c00029c9 <get_kernel_pages>:
get_kernel_pages():
/work/x86_os_my/kernel/memory.c:204

/* 从内核物理内存池中申请pg_cnt页内存,成功则返回其虚拟地址,失败则返回NULL */
void* get_kernel_pages(uint32_t pg_cnt) {
c00029c9:	55                   	push   %ebp
c00029ca:	89 e5                	mov    %esp,%ebp
c00029cc:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:205
	lock_acquire(&kernel_pool.lock);
c00029cf:	83 ec 0c             	sub    $0xc,%esp
c00029d2:	68 50 14 01 c0       	push   $0xc0011450
c00029d7:	e8 a3 1d 00 00       	call   c000477f <lock_acquire>
c00029dc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:206
	void* vaddr =  malloc_page(PF_KERNEL, pg_cnt);
c00029df:	83 ec 08             	sub    $0x8,%esp
c00029e2:	ff 75 08             	pushl  0x8(%ebp)
c00029e5:	6a 01                	push   $0x1
c00029e7:	e8 1b ff ff ff       	call   c0002907 <malloc_page>
c00029ec:	83 c4 10             	add    $0x10,%esp
c00029ef:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:207
	if (vaddr != NULL) {
c00029f2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c00029f6:	74 17                	je     c0002a0f <get_kernel_pages+0x46>
/work/x86_os_my/kernel/memory.c:208
		memset(vaddr, 0, pg_cnt * PG_SIZE);
c00029f8:	8b 45 08             	mov    0x8(%ebp),%eax
c00029fb:	c1 e0 0c             	shl    $0xc,%eax
c00029fe:	83 ec 04             	sub    $0x4,%esp
c0002a01:	50                   	push   %eax
c0002a02:	6a 00                	push   $0x0
c0002a04:	ff 75 f4             	pushl  -0xc(%ebp)
c0002a07:	e8 b7 0d 00 00       	call   c00037c3 <memset>
c0002a0c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:210
	}
	lock_release(&kernel_pool.lock);
c0002a0f:	83 ec 0c             	sub    $0xc,%esp
c0002a12:	68 50 14 01 c0       	push   $0xc0011450
c0002a17:	e8 da 1d 00 00       	call   c00047f6 <lock_release>
c0002a1c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:211
	return vaddr;
c0002a1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/kernel/memory.c:212
}
c0002a22:	c9                   	leave  
c0002a23:	c3                   	ret    

c0002a24 <get_user_pages>:
get_user_pages():
/work/x86_os_my/kernel/memory.c:215

/* 在用户空间中申请4k内存,并返回其虚拟地址 */
void* get_user_pages(uint32_t pg_cnt) {
c0002a24:	55                   	push   %ebp
c0002a25:	89 e5                	mov    %esp,%ebp
c0002a27:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:216
	lock_acquire(&user_pool.lock);
c0002a2a:	83 ec 0c             	sub    $0xc,%esp
c0002a2d:	68 50 13 01 c0       	push   $0xc0011350
c0002a32:	e8 48 1d 00 00       	call   c000477f <lock_acquire>
c0002a37:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:217
	void* vaddr = malloc_page(PF_USER, pg_cnt);
c0002a3a:	83 ec 08             	sub    $0x8,%esp
c0002a3d:	ff 75 08             	pushl  0x8(%ebp)
c0002a40:	6a 02                	push   $0x2
c0002a42:	e8 c0 fe ff ff       	call   c0002907 <malloc_page>
c0002a47:	83 c4 10             	add    $0x10,%esp
c0002a4a:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:218
	if (vaddr != NULL) {
c0002a4d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0002a51:	74 17                	je     c0002a6a <get_user_pages+0x46>
/work/x86_os_my/kernel/memory.c:219
		memset(vaddr, 0, pg_cnt * PG_SIZE);
c0002a53:	8b 45 08             	mov    0x8(%ebp),%eax
c0002a56:	c1 e0 0c             	shl    $0xc,%eax
c0002a59:	83 ec 04             	sub    $0x4,%esp
c0002a5c:	50                   	push   %eax
c0002a5d:	6a 00                	push   $0x0
c0002a5f:	ff 75 f4             	pushl  -0xc(%ebp)
c0002a62:	e8 5c 0d 00 00       	call   c00037c3 <memset>
c0002a67:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:221
	}
	lock_release(&user_pool.lock);
c0002a6a:	83 ec 0c             	sub    $0xc,%esp
c0002a6d:	68 50 13 01 c0       	push   $0xc0011350
c0002a72:	e8 7f 1d 00 00       	call   c00047f6 <lock_release>
c0002a77:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:222
	return vaddr;
c0002a7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/kernel/memory.c:223
}
c0002a7d:	c9                   	leave  
c0002a7e:	c3                   	ret    

c0002a7f <get_a_page>:
get_a_page():
/work/x86_os_my/kernel/memory.c:227

/* 将虚拟地址vaddr与pf池中的物理地址关联,仅支持一页空间分配
 * 功能是，可以指定虚拟地址的内存分配 */
void* get_a_page(enum pool_flags pf, uint32_t vaddr) {
c0002a7f:	55                   	push   %ebp
c0002a80:	89 e5                	mov    %esp,%ebp
c0002a82:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:228
	struct pool* mem_pool = pf & PF_KERNEL ? &kernel_pool : &user_pool;
c0002a85:	8b 45 08             	mov    0x8(%ebp),%eax
c0002a88:	83 e0 01             	and    $0x1,%eax
c0002a8b:	85 c0                	test   %eax,%eax
c0002a8d:	74 07                	je     c0002a96 <get_a_page+0x17>
/work/x86_os_my/kernel/memory.c:228 (discriminator 1)
c0002a8f:	b8 40 14 01 c0       	mov    $0xc0011440,%eax
c0002a94:	eb 05                	jmp    c0002a9b <get_a_page+0x1c>
/work/x86_os_my/kernel/memory.c:228 (discriminator 2)
c0002a96:	b8 40 13 01 c0       	mov    $0xc0011340,%eax
/work/x86_os_my/kernel/memory.c:228 (discriminator 4)
c0002a9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:229 (discriminator 4)
	lock_acquire(&mem_pool->lock);
c0002a9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002aa1:	83 c0 10             	add    $0x10,%eax
c0002aa4:	83 ec 0c             	sub    $0xc,%esp
c0002aa7:	50                   	push   %eax
c0002aa8:	e8 d2 1c 00 00       	call   c000477f <lock_acquire>
c0002aad:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:232 (discriminator 4)

	/* 先将虚拟地址对应的位图置1 */
	struct task_struct* cur = running_thread();
c0002ab0:	e8 f5 10 00 00       	call   c0003baa <running_thread>
c0002ab5:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:233 (discriminator 4)
	int32_t bit_idx = -1;
c0002ab8:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:235 (discriminator 4)

	if (cur->pgdir != NULL && pf == PF_USER) {
c0002abf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002ac2:	8b 40 54             	mov    0x54(%eax),%eax
c0002ac5:	85 c0                	test   %eax,%eax
c0002ac7:	74 55                	je     c0002b1e <get_a_page+0x9f>
/work/x86_os_my/kernel/memory.c:235 (discriminator 1)
c0002ac9:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c0002acd:	75 4f                	jne    c0002b1e <get_a_page+0x9f>
/work/x86_os_my/kernel/memory.c:237
		/* 若当前是用户进程申请用户内存,就修改用户进程自己的虚拟地址池的 位图 */
		bit_idx = (vaddr - cur->userprog_vaddr.vaddr_start) / PG_SIZE;
c0002acf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002ad2:	8b 40 60             	mov    0x60(%eax),%eax
c0002ad5:	8b 55 0c             	mov    0xc(%ebp),%edx
c0002ad8:	29 c2                	sub    %eax,%edx
c0002ada:	89 d0                	mov    %edx,%eax
c0002adc:	c1 e8 0c             	shr    $0xc,%eax
c0002adf:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:238
		ASSERT(bit_idx > 0);
c0002ae2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0002ae6:	7f 1c                	jg     c0002b04 <get_a_page+0x85>
/work/x86_os_my/kernel/memory.c:238 (discriminator 1)
c0002ae8:	68 a3 b9 00 c0       	push   $0xc000b9a3
c0002aed:	68 b8 bc 00 c0       	push   $0xc000bcb8
c0002af2:	68 ee 00 00 00       	push   $0xee
c0002af7:	68 57 b9 00 c0       	push   $0xc000b957
c0002afc:	e8 20 f8 ff ff       	call   c0002321 <panic_spin>
c0002b01:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:239
		bitmap_set(&cur->userprog_vaddr.vaddr_bitmap, bit_idx, 1);
c0002b04:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002b07:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0002b0a:	83 c2 58             	add    $0x58,%edx
c0002b0d:	83 ec 04             	sub    $0x4,%esp
c0002b10:	6a 01                	push   $0x1
c0002b12:	50                   	push   %eax
c0002b13:	52                   	push   %edx
c0002b14:	e8 76 fa ff ff       	call   c000258f <bitmap_set>
c0002b19:	83 c4 10             	add    $0x10,%esp
c0002b1c:	eb 78                	jmp    c0002b96 <get_a_page+0x117>
/work/x86_os_my/kernel/memory.c:241

	} else if (cur->pgdir == NULL && pf == PF_KERNEL) {
c0002b1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002b21:	8b 40 54             	mov    0x54(%eax),%eax
c0002b24:	85 c0                	test   %eax,%eax
c0002b26:	75 52                	jne    c0002b7a <get_a_page+0xfb>
/work/x86_os_my/kernel/memory.c:241 (discriminator 1)
c0002b28:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c0002b2c:	75 4c                	jne    c0002b7a <get_a_page+0xfb>
/work/x86_os_my/kernel/memory.c:243
		/* 如果是内核线程申请内核内存,就修改 kernel_vaddr */
		bit_idx = (vaddr - kernel_vaddr.vaddr_start) / PG_SIZE;
c0002b2e:	a1 30 14 01 c0       	mov    0xc0011430,%eax
c0002b33:	8b 55 0c             	mov    0xc(%ebp),%edx
c0002b36:	29 c2                	sub    %eax,%edx
c0002b38:	89 d0                	mov    %edx,%eax
c0002b3a:	c1 e8 0c             	shr    $0xc,%eax
c0002b3d:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:244
		ASSERT(bit_idx > 0);
c0002b40:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0002b44:	7f 1c                	jg     c0002b62 <get_a_page+0xe3>
/work/x86_os_my/kernel/memory.c:244 (discriminator 1)
c0002b46:	68 a3 b9 00 c0       	push   $0xc000b9a3
c0002b4b:	68 b8 bc 00 c0       	push   $0xc000bcb8
c0002b50:	68 f4 00 00 00       	push   $0xf4
c0002b55:	68 57 b9 00 c0       	push   $0xc000b957
c0002b5a:	e8 c2 f7 ff ff       	call   c0002321 <panic_spin>
c0002b5f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:245
		bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx, 1);
c0002b62:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002b65:	83 ec 04             	sub    $0x4,%esp
c0002b68:	6a 01                	push   $0x1
c0002b6a:	50                   	push   %eax
c0002b6b:	68 28 14 01 c0       	push   $0xc0011428
c0002b70:	e8 1a fa ff ff       	call   c000258f <bitmap_set>
c0002b75:	83 c4 10             	add    $0x10,%esp
c0002b78:	eb 1c                	jmp    c0002b96 <get_a_page+0x117>
/work/x86_os_my/kernel/memory.c:248

	} else {
		PANIC("get_a_page:not allow kernel alloc userspace or user alloc kernelspace by get_a_page");
c0002b7a:	68 b0 b9 00 c0       	push   $0xc000b9b0
c0002b7f:	68 b8 bc 00 c0       	push   $0xc000bcb8
c0002b84:	68 f8 00 00 00       	push   $0xf8
c0002b89:	68 57 b9 00 c0       	push   $0xc000b957
c0002b8e:	e8 8e f7 ff ff       	call   c0002321 <panic_spin>
c0002b93:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:251
	}

	void* page_phyaddr = palloc(mem_pool);
c0002b96:	83 ec 0c             	sub    $0xc,%esp
c0002b99:	ff 75 f4             	pushl  -0xc(%ebp)
c0002b9c:	e8 01 fc ff ff       	call   c00027a2 <palloc>
c0002ba1:	83 c4 10             	add    $0x10,%esp
c0002ba4:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:252
	if (page_phyaddr == NULL) {
c0002ba7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0002bab:	75 19                	jne    c0002bc6 <get_a_page+0x147>
/work/x86_os_my/kernel/memory.c:253
		lock_release(&mem_pool->lock);	//哈哈
c0002bad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002bb0:	83 c0 10             	add    $0x10,%eax
c0002bb3:	83 ec 0c             	sub    $0xc,%esp
c0002bb6:	50                   	push   %eax
c0002bb7:	e8 3a 1c 00 00       	call   c00047f6 <lock_release>
c0002bbc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:254
		return NULL;
c0002bbf:	b8 00 00 00 00       	mov    $0x0,%eax
c0002bc4:	eb 27                	jmp    c0002bed <get_a_page+0x16e>
/work/x86_os_my/kernel/memory.c:256
	}
	page_table_add((void*)vaddr, page_phyaddr);
c0002bc6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0002bc9:	83 ec 08             	sub    $0x8,%esp
c0002bcc:	ff 75 e8             	pushl  -0x18(%ebp)
c0002bcf:	50                   	push   %eax
c0002bd0:	e8 21 fc ff ff       	call   c00027f6 <page_table_add>
c0002bd5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:258
	
	lock_release(&mem_pool->lock);
c0002bd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002bdb:	83 c0 10             	add    $0x10,%eax
c0002bde:	83 ec 0c             	sub    $0xc,%esp
c0002be1:	50                   	push   %eax
c0002be2:	e8 0f 1c 00 00       	call   c00047f6 <lock_release>
c0002be7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:259
	return (void*)vaddr;
c0002bea:	8b 45 0c             	mov    0xc(%ebp),%eax
/work/x86_os_my/kernel/memory.c:260
}
c0002bed:	c9                   	leave  
c0002bee:	c3                   	ret    

c0002bef <get_a_page_without_opvaddrbitmap>:
get_a_page_without_opvaddrbitmap():
/work/x86_os_my/kernel/memory.c:265

/* 安装1页大小的vaddr，专门针对fork时不修改虚拟地址位图的情况
 * 函数功能和 get_a_page 类似，为 vaddr 分配一物理页，只是少了虚拟地址池位图的操作
 */
void* get_a_page_without_opvaddrbitmap(enum pool_flags pf, uint32_t vaddr) {
c0002bef:	55                   	push   %ebp
c0002bf0:	89 e5                	mov    %esp,%ebp
c0002bf2:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:266
	struct pool* mem_pool = pf & PF_KERNEL ? &kernel_pool : &user_pool;
c0002bf5:	8b 45 08             	mov    0x8(%ebp),%eax
c0002bf8:	83 e0 01             	and    $0x1,%eax
c0002bfb:	85 c0                	test   %eax,%eax
c0002bfd:	74 07                	je     c0002c06 <get_a_page_without_opvaddrbitmap+0x17>
/work/x86_os_my/kernel/memory.c:266 (discriminator 1)
c0002bff:	b8 40 14 01 c0       	mov    $0xc0011440,%eax
c0002c04:	eb 05                	jmp    c0002c0b <get_a_page_without_opvaddrbitmap+0x1c>
/work/x86_os_my/kernel/memory.c:266 (discriminator 2)
c0002c06:	b8 40 13 01 c0       	mov    $0xc0011340,%eax
/work/x86_os_my/kernel/memory.c:266 (discriminator 4)
c0002c0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:267 (discriminator 4)
	lock_acquire(&mem_pool->lock);
c0002c0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002c11:	83 c0 10             	add    $0x10,%eax
c0002c14:	83 ec 0c             	sub    $0xc,%esp
c0002c17:	50                   	push   %eax
c0002c18:	e8 62 1b 00 00       	call   c000477f <lock_acquire>
c0002c1d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:268 (discriminator 4)
	void* page_phyaddr = palloc(mem_pool);
c0002c20:	83 ec 0c             	sub    $0xc,%esp
c0002c23:	ff 75 f4             	pushl  -0xc(%ebp)
c0002c26:	e8 77 fb ff ff       	call   c00027a2 <palloc>
c0002c2b:	83 c4 10             	add    $0x10,%esp
c0002c2e:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:269 (discriminator 4)
	if (page_phyaddr == NULL) {
c0002c31:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0002c35:	75 19                	jne    c0002c50 <get_a_page_without_opvaddrbitmap+0x61>
/work/x86_os_my/kernel/memory.c:270
		lock_release(&mem_pool->lock);
c0002c37:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002c3a:	83 c0 10             	add    $0x10,%eax
c0002c3d:	83 ec 0c             	sub    $0xc,%esp
c0002c40:	50                   	push   %eax
c0002c41:	e8 b0 1b 00 00       	call   c00047f6 <lock_release>
c0002c46:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:271
		return NULL;
c0002c49:	b8 00 00 00 00       	mov    $0x0,%eax
c0002c4e:	eb 27                	jmp    c0002c77 <get_a_page_without_opvaddrbitmap+0x88>
/work/x86_os_my/kernel/memory.c:273
	}
	page_table_add((void*)vaddr, page_phyaddr);
c0002c50:	8b 45 0c             	mov    0xc(%ebp),%eax
c0002c53:	83 ec 08             	sub    $0x8,%esp
c0002c56:	ff 75 f0             	pushl  -0x10(%ebp)
c0002c59:	50                   	push   %eax
c0002c5a:	e8 97 fb ff ff       	call   c00027f6 <page_table_add>
c0002c5f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:274
	lock_release(&mem_pool->lock);
c0002c62:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002c65:	83 c0 10             	add    $0x10,%eax
c0002c68:	83 ec 0c             	sub    $0xc,%esp
c0002c6b:	50                   	push   %eax
c0002c6c:	e8 85 1b 00 00       	call   c00047f6 <lock_release>
c0002c71:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:275
	return (void*)vaddr;
c0002c74:	8b 45 0c             	mov    0xc(%ebp),%eax
/work/x86_os_my/kernel/memory.c:276
}
c0002c77:	c9                   	leave  
c0002c78:	c3                   	ret    

c0002c79 <addr_v2p>:
addr_v2p():
/work/x86_os_my/kernel/memory.c:279

/* 得到虚拟地址映射到的物理地址 */
uint32_t addr_v2p(uint32_t vaddr) {
c0002c79:	55                   	push   %ebp
c0002c7a:	89 e5                	mov    %esp,%ebp
c0002c7c:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/memory.c:280
	uint32_t* pte = pte_ptr(vaddr);
c0002c7f:	ff 75 08             	pushl  0x8(%ebp)
c0002c82:	e8 cf fa ff ff       	call   c0002756 <pte_ptr>
c0002c87:	83 c4 04             	add    $0x4,%esp
c0002c8a:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/kernel/memory.c:284
	/* (*pte)的内容是 vaddr 所在 pte 的内容，也就是 vaddr 最终所映射到的物理页框的 32 位地址中的高 20 位和 12 位的页表项属性，
	 * 因为页框都是自然页，低 12 位地址是 0，所以页表项 pte（和页目录项 pde）中只需要记录页框的高 20 位地址即可。
	 */
	return ((*pte & 0xfffff000) + (vaddr & 0x00000fff));
c0002c8d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0002c90:	8b 00                	mov    (%eax),%eax
c0002c92:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0002c97:	89 c2                	mov    %eax,%edx
c0002c99:	8b 45 08             	mov    0x8(%ebp),%eax
c0002c9c:	25 ff 0f 00 00       	and    $0xfff,%eax
c0002ca1:	01 d0                	add    %edx,%eax
/work/x86_os_my/kernel/memory.c:285
}
c0002ca3:	c9                   	leave  
c0002ca4:	c3                   	ret    

c0002ca5 <arena2block>:
arena2block():
/work/x86_os_my/kernel/memory.c:299
|                     |
| +-----------------+ |
+-+  mem_block_desc |←+
  +-----------------+
*/
static struct mem_block* arena2block(struct arena* a, uint32_t idx) {
c0002ca5:	55                   	push   %ebp
c0002ca6:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/kernel/memory.c:300
	return (struct mem_block*)((uint32_t)a + sizeof(struct arena) + idx * a->desc->block_size);
c0002ca8:	8b 45 08             	mov    0x8(%ebp),%eax
c0002cab:	8b 00                	mov    (%eax),%eax
c0002cad:	8b 00                	mov    (%eax),%eax
c0002caf:	0f af 45 0c          	imul   0xc(%ebp),%eax
c0002cb3:	89 c2                	mov    %eax,%edx
c0002cb5:	8b 45 08             	mov    0x8(%ebp),%eax
c0002cb8:	01 d0                	add    %edx,%eax
c0002cba:	83 c0 0c             	add    $0xc,%eax
/work/x86_os_my/kernel/memory.c:301
}
c0002cbd:	5d                   	pop    %ebp
c0002cbe:	c3                   	ret    

c0002cbf <block2arena>:
block2arena():
/work/x86_os_my/kernel/memory.c:306

/* 返回内存块mem_block所在的arena地址
 * 取到了虚拟地址mem_block那一整页的地址
 */
static struct arena* block2arena(struct mem_block* b) {
c0002cbf:	55                   	push   %ebp
c0002cc0:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/kernel/memory.c:307
	return (struct arena*)((uint32_t)b & 0xfffff000);
c0002cc2:	8b 45 08             	mov    0x8(%ebp),%eax
c0002cc5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
/work/x86_os_my/kernel/memory.c:308
}
c0002cca:	5d                   	pop    %ebp
c0002ccb:	c3                   	ret    

c0002ccc <sys_malloc>:
sys_malloc():
/work/x86_os_my/kernel/memory.c:319
 * 3.内存块地址被返回给用户后，用户可以自由使用此内存块 mem_block
 *   会把此内存块中的 list_elem 型变量 free_elem 覆盖
 *   不过 arena->mem_block_desc->free_list 中的元素已经记录了 mem_block->list_elem 的地址
 *   使用时覆盖的，只是 mem_block 的内容。
 */
void* sys_malloc(uint32_t size) {
c0002ccc:	55                   	push   %ebp
c0002ccd:	89 e5                	mov    %esp,%ebp
c0002ccf:	83 ec 38             	sub    $0x38,%esp
/work/x86_os_my/kernel/memory.c:324
	enum pool_flags PF;
	struct pool* mem_pool;
	uint32_t pool_size;
	struct mem_block_desc* descs;
	struct task_struct* cur_thread = running_thread();
c0002cd2:	e8 d3 0e 00 00       	call   c0003baa <running_thread>
c0002cd7:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/kernel/memory.c:327

	/* 判断用哪个内存池*/
	if (cur_thread->pgdir == NULL) {	// 是内核线程
c0002cda:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0002cdd:	8b 40 54             	mov    0x54(%eax),%eax
c0002ce0:	85 c0                	test   %eax,%eax
c0002ce2:	75 1f                	jne    c0002d03 <sys_malloc+0x37>
/work/x86_os_my/kernel/memory.c:328
		PF = PF_KERNEL;
c0002ce4:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:329
		pool_size = kernel_pool.pool_size;
c0002ceb:	a1 4c 14 01 c0       	mov    0xc001144c,%eax
c0002cf0:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:330
		mem_pool = &kernel_pool;
c0002cf3:	c7 45 f0 40 14 01 c0 	movl   $0xc0011440,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:331
		descs = k_block_descs;
c0002cfa:	c7 45 e8 80 13 01 c0 	movl   $0xc0011380,-0x18(%ebp)
c0002d01:	eb 1f                	jmp    c0002d22 <sys_malloc+0x56>
/work/x86_os_my/kernel/memory.c:333
	} else {							// 用户进程pcb中的pgdir（页目录表）会在为其分配页表时创建【create_page_dir】
		PF = PF_USER;
c0002d03:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:334
		pool_size = user_pool.pool_size;
c0002d0a:	a1 4c 13 01 c0       	mov    0xc001134c,%eax
c0002d0f:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:335
		mem_pool = &user_pool;
c0002d12:	c7 45 f0 40 13 01 c0 	movl   $0xc0011340,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:336
		descs = cur_thread->u_block_desc;
c0002d19:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0002d1c:	83 c0 64             	add    $0x64,%eax
c0002d1f:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:340
	}

	/* 若申请的内存不在内存池容量范围内则直接返回NULL */
	if (!(size > 0 && size < pool_size)) {
c0002d22:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0002d26:	74 08                	je     c0002d30 <sys_malloc+0x64>
/work/x86_os_my/kernel/memory.c:340 (discriminator 1)
c0002d28:	8b 45 08             	mov    0x8(%ebp),%eax
c0002d2b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0002d2e:	72 0a                	jb     c0002d3a <sys_malloc+0x6e>
/work/x86_os_my/kernel/memory.c:341
		return NULL;
c0002d30:	b8 00 00 00 00       	mov    $0x0,%eax
c0002d35:	e9 c5 02 00 00       	jmp    c0002fff <sys_malloc+0x333>
/work/x86_os_my/kernel/memory.c:346
	}

	struct arena* a;
	struct mem_block* b;
	lock_acquire(&mem_pool->lock);
c0002d3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002d3d:	83 c0 10             	add    $0x10,%eax
c0002d40:	83 ec 0c             	sub    $0xc,%esp
c0002d43:	50                   	push   %eax
c0002d44:	e8 36 1a 00 00       	call   c000477f <lock_acquire>
c0002d49:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:349

	/* 超过最大内存块1024, 就分配页框 */
	if (size > 1024) {
c0002d4c:	81 7d 08 00 04 00 00 	cmpl   $0x400,0x8(%ebp)
c0002d53:	0f 86 94 00 00 00    	jbe    c0002ded <sys_malloc+0x121>
/work/x86_os_my/kernel/memory.c:350
		uint32_t page_cnt = DIV_ROUND_UP(size + sizeof(struct arena), PG_SIZE);	// 向上取整需要的页框数
c0002d59:	8b 45 08             	mov    0x8(%ebp),%eax
c0002d5c:	05 0b 10 00 00       	add    $0x100b,%eax
c0002d61:	c1 e8 0c             	shr    $0xc,%eax
c0002d64:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/kernel/memory.c:352

		a = malloc_page(PF, page_cnt);
c0002d67:	83 ec 08             	sub    $0x8,%esp
c0002d6a:	ff 75 d8             	pushl  -0x28(%ebp)
c0002d6d:	ff 75 f4             	pushl  -0xc(%ebp)
c0002d70:	e8 92 fb ff ff       	call   c0002907 <malloc_page>
c0002d75:	83 c4 10             	add    $0x10,%esp
c0002d78:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/kernel/memory.c:353
		if (a != NULL) {
c0002d7b:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0002d7f:	74 50                	je     c0002dd1 <sys_malloc+0x105>
/work/x86_os_my/kernel/memory.c:354
			memset(a, 0, page_cnt * PG_SIZE);
c0002d81:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0002d84:	c1 e0 0c             	shl    $0xc,%eax
c0002d87:	83 ec 04             	sub    $0x4,%esp
c0002d8a:	50                   	push   %eax
c0002d8b:	6a 00                	push   $0x0
c0002d8d:	ff 75 d4             	pushl  -0x2c(%ebp)
c0002d90:	e8 2e 0a 00 00       	call   c00037c3 <memset>
c0002d95:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:358

			// 【arena结构体初始化，情况1】
			/* 对于分配的大块页框,将desc置为NULL, cnt置为页框数, large置为true */
			a->desc = NULL;
c0002d98:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002d9b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/kernel/memory.c:359
			a->cnt = page_cnt;
c0002da1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002da4:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0002da7:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/kernel/memory.c:360
			a->large = true;
c0002daa:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002dad:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/kernel/memory.c:362

			lock_release(&mem_pool->lock);
c0002db4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002db7:	83 c0 10             	add    $0x10,%eax
c0002dba:	83 ec 0c             	sub    $0xc,%esp
c0002dbd:	50                   	push   %eax
c0002dbe:	e8 33 1a 00 00       	call   c00047f6 <lock_release>
c0002dc3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:363
			return (void*)(a + 1);	// 跨过arena大小，把剩下的内存返回
c0002dc6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002dc9:	83 c0 0c             	add    $0xc,%eax
c0002dcc:	e9 2e 02 00 00       	jmp    c0002fff <sys_malloc+0x333>
/work/x86_os_my/kernel/memory.c:365
		} else {
			lock_release(&mem_pool->lock);
c0002dd1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002dd4:	83 c0 10             	add    $0x10,%eax
c0002dd7:	83 ec 0c             	sub    $0xc,%esp
c0002dda:	50                   	push   %eax
c0002ddb:	e8 16 1a 00 00       	call   c00047f6 <lock_release>
c0002de0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:366
			return NULL;
c0002de3:	b8 00 00 00 00       	mov    $0x0,%eax
c0002de8:	e9 12 02 00 00       	jmp    c0002fff <sys_malloc+0x333>
/work/x86_os_my/kernel/memory.c:374
	} else {
	/* 若申请的内存小于等于1024,可在各种规格的mem_block_desc中去适配 */
		uint8_t desc_idx;

		/* 从内存块描述符中匹配合适的内存块规格 */
		for (desc_idx = 0; desc_idx < DESC_CNT; desc_idx++) {
c0002ded:	c6 45 e7 00          	movb   $0x0,-0x19(%ebp)
c0002df1:	eb 25                	jmp    c0002e18 <sys_malloc+0x14c>
/work/x86_os_my/kernel/memory.c:375
			if (size <= descs[desc_idx].block_size) {	// 从小往大后,找到后退出
c0002df3:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0002df7:	89 d0                	mov    %edx,%eax
c0002df9:	01 c0                	add    %eax,%eax
c0002dfb:	01 d0                	add    %edx,%eax
c0002dfd:	c1 e0 03             	shl    $0x3,%eax
c0002e00:	89 c2                	mov    %eax,%edx
c0002e02:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002e05:	01 d0                	add    %edx,%eax
c0002e07:	8b 00                	mov    (%eax),%eax
c0002e09:	3b 45 08             	cmp    0x8(%ebp),%eax
c0002e0c:	73 12                	jae    c0002e20 <sys_malloc+0x154>
/work/x86_os_my/kernel/memory.c:374 (discriminator 2)
	} else {
	/* 若申请的内存小于等于1024,可在各种规格的mem_block_desc中去适配 */
		uint8_t desc_idx;

		/* 从内存块描述符中匹配合适的内存块规格 */
		for (desc_idx = 0; desc_idx < DESC_CNT; desc_idx++) {
c0002e0e:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c0002e12:	83 c0 01             	add    $0x1,%eax
c0002e15:	88 45 e7             	mov    %al,-0x19(%ebp)
/work/x86_os_my/kernel/memory.c:374 (discriminator 1)
c0002e18:	80 7d e7 06          	cmpb   $0x6,-0x19(%ebp)
c0002e1c:	76 d5                	jbe    c0002df3 <sys_malloc+0x127>
c0002e1e:	eb 01                	jmp    c0002e21 <sys_malloc+0x155>
/work/x86_os_my/kernel/memory.c:376
			if (size <= descs[desc_idx].block_size) {	// 从小往大后,找到后退出
				break;
c0002e20:	90                   	nop
/work/x86_os_my/kernel/memory.c:382
			}
		}

		/* 若mem_block_desc的free_list中已经没有可用的mem_block,
		 * 就创建新的arena提供mem_block */
		if (list_empty(&descs[desc_idx].free_list)) {
c0002e21:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0002e25:	89 d0                	mov    %edx,%eax
c0002e27:	01 c0                	add    %eax,%eax
c0002e29:	01 d0                	add    %edx,%eax
c0002e2b:	c1 e0 03             	shl    $0x3,%eax
c0002e2e:	89 c2                	mov    %eax,%edx
c0002e30:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002e33:	01 d0                	add    %edx,%eax
c0002e35:	83 c0 08             	add    $0x8,%eax
c0002e38:	83 ec 0c             	sub    $0xc,%esp
c0002e3b:	50                   	push   %eax
c0002e3c:	e8 53 16 00 00       	call   c0004494 <list_empty>
c0002e41:	83 c4 10             	add    $0x10,%esp
c0002e44:	85 c0                	test   %eax,%eax
c0002e46:	0f 84 31 01 00 00    	je     c0002f7d <sys_malloc+0x2b1>
/work/x86_os_my/kernel/memory.c:383
			a = malloc_page(PF, 1);       // 分配1页框做为arena
c0002e4c:	83 ec 08             	sub    $0x8,%esp
c0002e4f:	6a 01                	push   $0x1
c0002e51:	ff 75 f4             	pushl  -0xc(%ebp)
c0002e54:	e8 ae fa ff ff       	call   c0002907 <malloc_page>
c0002e59:	83 c4 10             	add    $0x10,%esp
c0002e5c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/kernel/memory.c:384
			if (a == NULL) {
c0002e5f:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0002e63:	75 1c                	jne    c0002e81 <sys_malloc+0x1b5>
/work/x86_os_my/kernel/memory.c:385
				lock_release(&mem_pool->lock);
c0002e65:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002e68:	83 c0 10             	add    $0x10,%eax
c0002e6b:	83 ec 0c             	sub    $0xc,%esp
c0002e6e:	50                   	push   %eax
c0002e6f:	e8 82 19 00 00       	call   c00047f6 <lock_release>
c0002e74:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:386
				return NULL;
c0002e77:	b8 00 00 00 00       	mov    $0x0,%eax
c0002e7c:	e9 7e 01 00 00       	jmp    c0002fff <sys_malloc+0x333>
/work/x86_os_my/kernel/memory.c:388
			}
			memset(a, 0, PG_SIZE);
c0002e81:	83 ec 04             	sub    $0x4,%esp
c0002e84:	68 00 10 00 00       	push   $0x1000
c0002e89:	6a 00                	push   $0x0
c0002e8b:	ff 75 d4             	pushl  -0x2c(%ebp)
c0002e8e:	e8 30 09 00 00       	call   c00037c3 <memset>
c0002e93:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:392

			// 【arena结构体初始化，情况2】
			/* 对于分配的小块内存,将desc置为相应内存块描述符, cnt置为此arena可用的内存块数, large置为false */
			a->desc = &descs[desc_idx];
c0002e96:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0002e9a:	89 d0                	mov    %edx,%eax
c0002e9c:	01 c0                	add    %eax,%eax
c0002e9e:	01 d0                	add    %edx,%eax
c0002ea0:	c1 e0 03             	shl    $0x3,%eax
c0002ea3:	89 c2                	mov    %eax,%edx
c0002ea5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002ea8:	01 c2                	add    %eax,%edx
c0002eaa:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002ead:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/kernel/memory.c:393
			a->large = false;
c0002eaf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002eb2:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
/work/x86_os_my/kernel/memory.c:394
			a->cnt = descs[desc_idx].blocks_per_arena;
c0002eb9:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0002ebd:	89 d0                	mov    %edx,%eax
c0002ebf:	01 c0                	add    %eax,%eax
c0002ec1:	01 d0                	add    %edx,%eax
c0002ec3:	c1 e0 03             	shl    $0x3,%eax
c0002ec6:	89 c2                	mov    %eax,%edx
c0002ec8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002ecb:	01 d0                	add    %edx,%eax
c0002ecd:	8b 50 04             	mov    0x4(%eax),%edx
c0002ed0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002ed3:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/kernel/memory.c:396

			enum intr_status old_status = intr_disable();
c0002ed6:	e8 65 ea ff ff       	call   c0001940 <intr_disable>
c0002edb:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/kernel/memory.c:399
			/* 开始将arena拆分成内存块,并添加到内存块描述符的free_list中 */
			uint32_t block_idx;
			for (block_idx = 0; block_idx < descs[desc_idx].blocks_per_arena; block_idx++) {
c0002ede:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c0002ee5:	eb 68                	jmp    c0002f4f <sys_malloc+0x283>
/work/x86_os_my/kernel/memory.c:400
				b = arena2block(a, block_idx);
c0002ee7:	83 ec 08             	sub    $0x8,%esp
c0002eea:	ff 75 e0             	pushl  -0x20(%ebp)
c0002eed:	ff 75 d4             	pushl  -0x2c(%ebp)
c0002ef0:	e8 b0 fd ff ff       	call   c0002ca5 <arena2block>
c0002ef5:	83 c4 10             	add    $0x10,%esp
c0002ef8:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/kernel/memory.c:401
				ASSERT(!elem_find(&a->desc->free_list, &b->free_elem));
c0002efb:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0002efe:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0002f01:	8b 12                	mov    (%edx),%edx
c0002f03:	83 c2 08             	add    $0x8,%edx
c0002f06:	83 ec 08             	sub    $0x8,%esp
c0002f09:	50                   	push   %eax
c0002f0a:	52                   	push   %edx
c0002f0b:	e8 b7 14 00 00       	call   c00043c7 <elem_find>
c0002f10:	83 c4 10             	add    $0x10,%esp
c0002f13:	85 c0                	test   %eax,%eax
c0002f15:	74 1c                	je     c0002f33 <sys_malloc+0x267>
/work/x86_os_my/kernel/memory.c:401 (discriminator 1)
c0002f17:	68 04 ba 00 c0       	push   $0xc000ba04
c0002f1c:	68 c4 bc 00 c0       	push   $0xc000bcc4
c0002f21:	68 91 01 00 00       	push   $0x191
c0002f26:	68 57 b9 00 c0       	push   $0xc000b957
c0002f2b:	e8 f1 f3 ff ff       	call   c0002321 <panic_spin>
c0002f30:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:402 (discriminator 2)
				list_append(&a->desc->free_list, &b->free_elem);
c0002f33:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0002f36:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0002f39:	8b 12                	mov    (%edx),%edx
c0002f3b:	83 c2 08             	add    $0x8,%edx
c0002f3e:	83 ec 08             	sub    $0x8,%esp
c0002f41:	50                   	push   %eax
c0002f42:	52                   	push   %edx
c0002f43:	e8 05 14 00 00       	call   c000434d <list_append>
c0002f48:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:399 (discriminator 2)
			a->cnt = descs[desc_idx].blocks_per_arena;

			enum intr_status old_status = intr_disable();
			/* 开始将arena拆分成内存块,并添加到内存块描述符的free_list中 */
			uint32_t block_idx;
			for (block_idx = 0; block_idx < descs[desc_idx].blocks_per_arena; block_idx++) {
c0002f4b:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
/work/x86_os_my/kernel/memory.c:399 (discriminator 1)
c0002f4f:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0002f53:	89 d0                	mov    %edx,%eax
c0002f55:	01 c0                	add    %eax,%eax
c0002f57:	01 d0                	add    %edx,%eax
c0002f59:	c1 e0 03             	shl    $0x3,%eax
c0002f5c:	89 c2                	mov    %eax,%edx
c0002f5e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002f61:	01 d0                	add    %edx,%eax
c0002f63:	8b 40 04             	mov    0x4(%eax),%eax
c0002f66:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0002f69:	0f 87 78 ff ff ff    	ja     c0002ee7 <sys_malloc+0x21b>
/work/x86_os_my/kernel/memory.c:404
				b = arena2block(a, block_idx);
				ASSERT(!elem_find(&a->desc->free_list, &b->free_elem));
				list_append(&a->desc->free_list, &b->free_elem);
			}
			intr_set_status(old_status);
c0002f6f:	83 ec 0c             	sub    $0xc,%esp
c0002f72:	ff 75 d0             	pushl  -0x30(%ebp)
c0002f75:	e8 ef e9 ff ff       	call   c0001969 <intr_set_status>
c0002f7a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:408
		}

		/* 开始分配内存块 */
		b = elem2entry(struct mem_block, free_elem, list_pop(&(descs[desc_idx].free_list)));
c0002f7d:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0002f81:	89 d0                	mov    %edx,%eax
c0002f83:	01 c0                	add    %eax,%eax
c0002f85:	01 d0                	add    %edx,%eax
c0002f87:	c1 e0 03             	shl    $0x3,%eax
c0002f8a:	89 c2                	mov    %eax,%edx
c0002f8c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002f8f:	01 d0                	add    %edx,%eax
c0002f91:	83 c0 08             	add    $0x8,%eax
c0002f94:	83 ec 0c             	sub    $0xc,%esp
c0002f97:	50                   	push   %eax
c0002f98:	e8 08 14 00 00       	call   c00043a5 <list_pop>
c0002f9d:	83 c4 10             	add    $0x10,%esp
c0002fa0:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/kernel/memory.c:409
		memset(b, 0, descs[desc_idx].block_size);
c0002fa3:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0002fa7:	89 d0                	mov    %edx,%eax
c0002fa9:	01 c0                	add    %eax,%eax
c0002fab:	01 d0                	add    %edx,%eax
c0002fad:	c1 e0 03             	shl    $0x3,%eax
c0002fb0:	89 c2                	mov    %eax,%edx
c0002fb2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002fb5:	01 d0                	add    %edx,%eax
c0002fb7:	8b 00                	mov    (%eax),%eax
c0002fb9:	83 ec 04             	sub    $0x4,%esp
c0002fbc:	50                   	push   %eax
c0002fbd:	6a 00                	push   $0x0
c0002fbf:	ff 75 cc             	pushl  -0x34(%ebp)
c0002fc2:	e8 fc 07 00 00       	call   c00037c3 <memset>
c0002fc7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:411

		a = block2arena(b);	// 获取内存块b所在的arena
c0002fca:	83 ec 0c             	sub    $0xc,%esp
c0002fcd:	ff 75 cc             	pushl  -0x34(%ebp)
c0002fd0:	e8 ea fc ff ff       	call   c0002cbf <block2arena>
c0002fd5:	83 c4 10             	add    $0x10,%esp
c0002fd8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/kernel/memory.c:412
		a->cnt--;			// 将此arena中的空闲内存块数减1
c0002fdb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002fde:	8b 40 04             	mov    0x4(%eax),%eax
c0002fe1:	8d 50 ff             	lea    -0x1(%eax),%edx
c0002fe4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002fe7:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/kernel/memory.c:414

		lock_release(&mem_pool->lock);
c0002fea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002fed:	83 c0 10             	add    $0x10,%eax
c0002ff0:	83 ec 0c             	sub    $0xc,%esp
c0002ff3:	50                   	push   %eax
c0002ff4:	e8 fd 17 00 00       	call   c00047f6 <lock_release>
c0002ff9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:415
		return (void*)b;
c0002ffc:	8b 45 cc             	mov    -0x34(%ebp),%eax
/work/x86_os_my/kernel/memory.c:417
	}
}
c0002fff:	c9                   	leave  
c0003000:	c3                   	ret    

c0003001 <pfree>:
pfree():
/work/x86_os_my/kernel/memory.c:422

/* 将物理地址pg_phy_addr回收到物理内存池
 * 清理物理地址池位图
 */
void pfree(uint32_t pg_phy_addr) {
c0003001:	55                   	push   %ebp
c0003002:	89 e5                	mov    %esp,%ebp
c0003004:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:424
	struct pool* mem_pool;
	uint32_t bit_idx = 0;
c0003007:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:425
	if (pg_phy_addr >= user_pool.phy_addr_start) {	// 用户物理内存池
c000300e:	a1 48 13 01 c0       	mov    0xc0011348,%eax
c0003013:	3b 45 08             	cmp    0x8(%ebp),%eax
c0003016:	77 1b                	ja     c0003033 <pfree+0x32>
/work/x86_os_my/kernel/memory.c:426
		mem_pool = &user_pool;
c0003018:	c7 45 f4 40 13 01 c0 	movl   $0xc0011340,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:427
		bit_idx = (pg_phy_addr - user_pool.phy_addr_start) / PG_SIZE;
c000301f:	a1 48 13 01 c0       	mov    0xc0011348,%eax
c0003024:	8b 55 08             	mov    0x8(%ebp),%edx
c0003027:	29 c2                	sub    %eax,%edx
c0003029:	89 d0                	mov    %edx,%eax
c000302b:	c1 e8 0c             	shr    $0xc,%eax
c000302e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0003031:	eb 19                	jmp    c000304c <pfree+0x4b>
/work/x86_os_my/kernel/memory.c:429
	} else {	// 内核物理内存池
		mem_pool = &kernel_pool;
c0003033:	c7 45 f4 40 14 01 c0 	movl   $0xc0011440,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:430
		bit_idx = (pg_phy_addr - kernel_pool.phy_addr_start) / PG_SIZE;
c000303a:	a1 48 14 01 c0       	mov    0xc0011448,%eax
c000303f:	8b 55 08             	mov    0x8(%ebp),%edx
c0003042:	29 c2                	sub    %eax,%edx
c0003044:	89 d0                	mov    %edx,%eax
c0003046:	c1 e8 0c             	shr    $0xc,%eax
c0003049:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:432
	}
	bitmap_set(&mem_pool->pool_bitmap, bit_idx, 0);	// 将位图中该位清0
c000304c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000304f:	83 ec 04             	sub    $0x4,%esp
c0003052:	6a 00                	push   $0x0
c0003054:	ff 75 f0             	pushl  -0x10(%ebp)
c0003057:	50                   	push   %eax
c0003058:	e8 32 f5 ff ff       	call   c000258f <bitmap_set>
c000305d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:433
}
c0003060:	90                   	nop
c0003061:	c9                   	leave  
c0003062:	c3                   	ret    

c0003063 <page_table_pte_remove>:
page_table_pte_remove():
/work/x86_os_my/kernel/memory.c:436

/* 去掉页表中虚拟地址vaddr的映射,只去掉vaddr对应的pte */
static void page_table_pte_remove(uint32_t vaddr) {
c0003063:	55                   	push   %ebp
c0003064:	89 e5                	mov    %esp,%ebp
c0003066:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/memory.c:437
	uint32_t* pte = pte_ptr(vaddr);
c0003069:	8b 45 08             	mov    0x8(%ebp),%eax
c000306c:	50                   	push   %eax
c000306d:	e8 e4 f6 ff ff       	call   c0002756 <pte_ptr>
c0003072:	83 c4 04             	add    $0x4,%esp
c0003075:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/kernel/memory.c:438
	*pte &= ~PG_P_1;	// 将页表项pte的P位置0
c0003078:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000307b:	8b 00                	mov    (%eax),%eax
c000307d:	83 e0 fe             	and    $0xfffffffe,%eax
c0003080:	89 c2                	mov    %eax,%edx
c0003082:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003085:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/kernel/memory.c:439
	asm volatile ("invlpg %0"::"m" (vaddr):"memory");	//更新tlb
c0003087:	0f 01 7d 08          	invlpg 0x8(%ebp)
/work/x86_os_my/kernel/memory.c:442
	/*更新 TLB 有两种方式，一是用 invlpg 指令更新单条虚拟地址条目，
	另外一个是重新加载 cr3 寄存器，这将直接清空 TLB，相当于更新整个页表。*/
}
c000308b:	90                   	nop
c000308c:	c9                   	leave  
c000308d:	c3                   	ret    

c000308e <vaddr_remove>:
vaddr_remove():
/work/x86_os_my/kernel/memory.c:447

/* 在虚拟地址池中释放以_vaddr起始的连续pg_cnt个虚拟页地址
 * 清理虚拟地址池位图
 */
static void vaddr_remove(enum pool_flags pf, void* _vaddr, uint32_t pg_cnt) {
c000308e:	55                   	push   %ebp
c000308f:	89 e5                	mov    %esp,%ebp
c0003091:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:448
	uint32_t bit_idx_start = 0, vaddr = (uint32_t)_vaddr, cnt = 0;
c0003094:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c000309b:	8b 45 0c             	mov    0xc(%ebp),%eax
c000309e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c00030a1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:450

	if (pf == PF_KERNEL) {	// 内核虚拟内存池
c00030a8:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c00030ac:	75 3f                	jne    c00030ed <vaddr_remove+0x5f>
/work/x86_os_my/kernel/memory.c:451
		bit_idx_start = (vaddr - kernel_vaddr.vaddr_start) / PG_SIZE;
c00030ae:	a1 30 14 01 c0       	mov    0xc0011430,%eax
c00030b3:	8b 55 ec             	mov    -0x14(%ebp),%edx
c00030b6:	29 c2                	sub    %eax,%edx
c00030b8:	89 d0                	mov    %edx,%eax
c00030ba:	c1 e8 0c             	shr    $0xc,%eax
c00030bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:452
		while(cnt < pg_cnt) {
c00030c0:	eb 21                	jmp    c00030e3 <vaddr_remove+0x55>
/work/x86_os_my/kernel/memory.c:453
			bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
c00030c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00030c5:	8d 50 01             	lea    0x1(%eax),%edx
c00030c8:	89 55 f4             	mov    %edx,-0xc(%ebp)
c00030cb:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00030ce:	01 d0                	add    %edx,%eax
c00030d0:	83 ec 04             	sub    $0x4,%esp
c00030d3:	6a 00                	push   $0x0
c00030d5:	50                   	push   %eax
c00030d6:	68 28 14 01 c0       	push   $0xc0011428
c00030db:	e8 af f4 ff ff       	call   c000258f <bitmap_set>
c00030e0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:452
static void vaddr_remove(enum pool_flags pf, void* _vaddr, uint32_t pg_cnt) {
	uint32_t bit_idx_start = 0, vaddr = (uint32_t)_vaddr, cnt = 0;

	if (pf == PF_KERNEL) {	// 内核虚拟内存池
		bit_idx_start = (vaddr - kernel_vaddr.vaddr_start) / PG_SIZE;
		while(cnt < pg_cnt) {
c00030e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00030e6:	3b 45 10             	cmp    0x10(%ebp),%eax
c00030e9:	72 d7                	jb     c00030c2 <vaddr_remove+0x34>
/work/x86_os_my/kernel/memory.c:462
		bit_idx_start = (vaddr - cur_thread->userprog_vaddr.vaddr_start) / PG_SIZE;
		while(cnt < pg_cnt) {
			bitmap_set(&cur_thread->userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
		}
	}
}
c00030eb:	eb 48                	jmp    c0003135 <vaddr_remove+0xa7>
/work/x86_os_my/kernel/memory.c:456
		bit_idx_start = (vaddr - kernel_vaddr.vaddr_start) / PG_SIZE;
		while(cnt < pg_cnt) {
			bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
		}
	} else {	// 用户虚拟内存池
		struct task_struct* cur_thread = running_thread();
c00030ed:	e8 b8 0a 00 00       	call   c0003baa <running_thread>
c00030f2:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:457
		bit_idx_start = (vaddr - cur_thread->userprog_vaddr.vaddr_start) / PG_SIZE;
c00030f5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00030f8:	8b 40 60             	mov    0x60(%eax),%eax
c00030fb:	8b 55 ec             	mov    -0x14(%ebp),%edx
c00030fe:	29 c2                	sub    %eax,%edx
c0003100:	89 d0                	mov    %edx,%eax
c0003102:	c1 e8 0c             	shr    $0xc,%eax
c0003105:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:458
		while(cnt < pg_cnt) {
c0003108:	eb 23                	jmp    c000312d <vaddr_remove+0x9f>
/work/x86_os_my/kernel/memory.c:459
			bitmap_set(&cur_thread->userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
c000310a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000310d:	8d 50 01             	lea    0x1(%eax),%edx
c0003110:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0003113:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0003116:	01 c2                	add    %eax,%edx
c0003118:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000311b:	83 c0 58             	add    $0x58,%eax
c000311e:	83 ec 04             	sub    $0x4,%esp
c0003121:	6a 00                	push   $0x0
c0003123:	52                   	push   %edx
c0003124:	50                   	push   %eax
c0003125:	e8 65 f4 ff ff       	call   c000258f <bitmap_set>
c000312a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:458
			bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
		}
	} else {	// 用户虚拟内存池
		struct task_struct* cur_thread = running_thread();
		bit_idx_start = (vaddr - cur_thread->userprog_vaddr.vaddr_start) / PG_SIZE;
		while(cnt < pg_cnt) {
c000312d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003130:	3b 45 10             	cmp    0x10(%ebp),%eax
c0003133:	72 d5                	jb     c000310a <vaddr_remove+0x7c>
/work/x86_os_my/kernel/memory.c:462
			bitmap_set(&cur_thread->userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
		}
	}
}
c0003135:	90                   	nop
c0003136:	c9                   	leave  
c0003137:	c3                   	ret    

c0003138 <mfree_page>:
mfree_page():
/work/x86_os_my/kernel/memory.c:465

/* 释放以虚拟地址vaddr为起始的cnt个物理页框 */
void mfree_page(enum pool_flags pf, void* _vaddr, uint32_t pg_cnt) {
c0003138:	55                   	push   %ebp
c0003139:	89 e5                	mov    %esp,%ebp
c000313b:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:467
	uint32_t pg_phy_addr;
	uint32_t vaddr = (int32_t)_vaddr, page_cnt = 0;
c000313e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003141:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0003144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:468
	ASSERT(pg_cnt >=1 && vaddr % PG_SIZE == 0);
c000314b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c000314f:	74 0c                	je     c000315d <mfree_page+0x25>
/work/x86_os_my/kernel/memory.c:468 (discriminator 1)
c0003151:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003154:	25 ff 0f 00 00       	and    $0xfff,%eax
c0003159:	85 c0                	test   %eax,%eax
c000315b:	74 1c                	je     c0003179 <mfree_page+0x41>
/work/x86_os_my/kernel/memory.c:468 (discriminator 3)
c000315d:	68 34 ba 00 c0       	push   $0xc000ba34
c0003162:	68 d0 bc 00 c0       	push   $0xc000bcd0
c0003167:	68 d4 01 00 00       	push   $0x1d4
c000316c:	68 57 b9 00 c0       	push   $0xc000b957
c0003171:	e8 ab f1 ff ff       	call   c0002321 <panic_spin>
c0003176:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:469
	pg_phy_addr = addr_v2p(vaddr);
c0003179:	83 ec 0c             	sub    $0xc,%esp
c000317c:	ff 75 f4             	pushl  -0xc(%ebp)
c000317f:	e8 f5 fa ff ff       	call   c0002c79 <addr_v2p>
c0003184:	83 c4 10             	add    $0x10,%esp
c0003187:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:472

	/* 确保待释放的物理内存在低端1M+1k大小的页目录+1k大小的页表地址范围外【内核空间】 */
	ASSERT((pg_phy_addr % PG_SIZE) == 0 && pg_phy_addr >= 0x102000);
c000318a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000318d:	25 ff 0f 00 00       	and    $0xfff,%eax
c0003192:	85 c0                	test   %eax,%eax
c0003194:	75 09                	jne    c000319f <mfree_page+0x67>
/work/x86_os_my/kernel/memory.c:472 (discriminator 1)
c0003196:	81 7d ec ff 1f 10 00 	cmpl   $0x101fff,-0x14(%ebp)
c000319d:	77 1c                	ja     c00031bb <mfree_page+0x83>
/work/x86_os_my/kernel/memory.c:472 (discriminator 3)
c000319f:	68 58 ba 00 c0       	push   $0xc000ba58
c00031a4:	68 d0 bc 00 c0       	push   $0xc000bcd0
c00031a9:	68 d8 01 00 00       	push   $0x1d8
c00031ae:	68 57 b9 00 c0       	push   $0xc000b957
c00031b3:	e8 69 f1 ff ff       	call   c0002321 <panic_spin>
c00031b8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:476

	/* 判断pg_phy_addr属于用户物理内存池还是内核物理内存池 */
	/* 位于user_pool内存池 */
	if (pg_phy_addr >= user_pool.phy_addr_start) {
c00031bb:	a1 48 13 01 c0       	mov    0xc0011348,%eax
c00031c0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c00031c3:	0f 87 94 00 00 00    	ja     c000325d <mfree_page+0x125>
/work/x86_os_my/kernel/memory.c:477
		vaddr -= PG_SIZE;
c00031c9:	81 6d f4 00 10 00 00 	subl   $0x1000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:478
		while (page_cnt < pg_cnt) {
c00031d0:	eb 6a                	jmp    c000323c <mfree_page+0x104>
/work/x86_os_my/kernel/memory.c:479
			vaddr += PG_SIZE;
c00031d2:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:480
			pg_phy_addr = addr_v2p(vaddr);
c00031d9:	83 ec 0c             	sub    $0xc,%esp
c00031dc:	ff 75 f4             	pushl  -0xc(%ebp)
c00031df:	e8 95 fa ff ff       	call   c0002c79 <addr_v2p>
c00031e4:	83 c4 10             	add    $0x10,%esp
c00031e7:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:483

			/* 确保物理地址属于用户物理内存池 */
			ASSERT((pg_phy_addr % PG_SIZE) == 0 && pg_phy_addr >= user_pool.phy_addr_start);
c00031ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00031ed:	25 ff 0f 00 00       	and    $0xfff,%eax
c00031f2:	85 c0                	test   %eax,%eax
c00031f4:	75 0a                	jne    c0003200 <mfree_page+0xc8>
/work/x86_os_my/kernel/memory.c:483 (discriminator 1)
c00031f6:	a1 48 13 01 c0       	mov    0xc0011348,%eax
c00031fb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c00031fe:	76 1c                	jbe    c000321c <mfree_page+0xe4>
/work/x86_os_my/kernel/memory.c:483 (discriminator 3)
c0003200:	68 90 ba 00 c0       	push   $0xc000ba90
c0003205:	68 d0 bc 00 c0       	push   $0xc000bcd0
c000320a:	68 e3 01 00 00       	push   $0x1e3
c000320f:	68 57 b9 00 c0       	push   $0xc000b957
c0003214:	e8 08 f1 ff ff       	call   c0002321 <panic_spin>
c0003219:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:486

			/* 先将对应的物理页框归还到内存池 */
			pfree(pg_phy_addr);
c000321c:	83 ec 0c             	sub    $0xc,%esp
c000321f:	ff 75 ec             	pushl  -0x14(%ebp)
c0003222:	e8 da fd ff ff       	call   c0003001 <pfree>
c0003227:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:489

			/* 再从页表中清除此虚拟地址所在的页表项pte */
			page_table_pte_remove(vaddr);
c000322a:	83 ec 0c             	sub    $0xc,%esp
c000322d:	ff 75 f4             	pushl  -0xc(%ebp)
c0003230:	e8 2e fe ff ff       	call   c0003063 <page_table_pte_remove>
c0003235:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:491

			page_cnt++;
c0003238:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:478

	/* 判断pg_phy_addr属于用户物理内存池还是内核物理内存池 */
	/* 位于user_pool内存池 */
	if (pg_phy_addr >= user_pool.phy_addr_start) {
		vaddr -= PG_SIZE;
		while (page_cnt < pg_cnt) {
c000323c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000323f:	3b 45 10             	cmp    0x10(%ebp),%eax
c0003242:	72 8e                	jb     c00031d2 <mfree_page+0x9a>
/work/x86_os_my/kernel/memory.c:494
			page_table_pte_remove(vaddr);

			page_cnt++;
		}
		/* 清空虚拟地址的位图中的相应位 */
		vaddr_remove(pf, _vaddr, pg_cnt);
c0003244:	83 ec 04             	sub    $0x4,%esp
c0003247:	ff 75 10             	pushl  0x10(%ebp)
c000324a:	ff 75 0c             	pushl  0xc(%ebp)
c000324d:	ff 75 08             	pushl  0x8(%ebp)
c0003250:	e8 39 fe ff ff       	call   c000308e <vaddr_remove>
c0003255:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:518
			page_cnt++;
		}
		/* 清空虚拟地址的位图中的相应位 */
		vaddr_remove(pf, _vaddr, pg_cnt);
	}
}
c0003258:	e9 99 00 00 00       	jmp    c00032f6 <mfree_page+0x1be>
/work/x86_os_my/kernel/memory.c:498
		/* 清空虚拟地址的位图中的相应位 */
		vaddr_remove(pf, _vaddr, pg_cnt);

	} else {
		/* 位于kernel_pool内存池 */
		vaddr -= PG_SIZE;
c000325d:	81 6d f4 00 10 00 00 	subl   $0x1000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:499
		while (page_cnt < pg_cnt) {
c0003264:	eb 74                	jmp    c00032da <mfree_page+0x1a2>
/work/x86_os_my/kernel/memory.c:500
			vaddr += PG_SIZE;
c0003266:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:501
			pg_phy_addr = addr_v2p(vaddr);
c000326d:	83 ec 0c             	sub    $0xc,%esp
c0003270:	ff 75 f4             	pushl  -0xc(%ebp)
c0003273:	e8 01 fa ff ff       	call   c0002c79 <addr_v2p>
c0003278:	83 c4 10             	add    $0x10,%esp
c000327b:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:504

			/* 确保待释放的物理内存只属于内核物理内存池 */
			ASSERT((pg_phy_addr % PG_SIZE) == 0 && pg_phy_addr >= kernel_pool.phy_addr_start && \
c000327e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0003281:	25 ff 0f 00 00       	and    $0xfff,%eax
c0003286:	85 c0                	test   %eax,%eax
c0003288:	75 14                	jne    c000329e <mfree_page+0x166>
/work/x86_os_my/kernel/memory.c:504 (discriminator 1)
c000328a:	a1 48 14 01 c0       	mov    0xc0011448,%eax
c000328f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0003292:	77 0a                	ja     c000329e <mfree_page+0x166>
/work/x86_os_my/kernel/memory.c:504 (discriminator 3)
c0003294:	a1 48 13 01 c0       	mov    0xc0011348,%eax
c0003299:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c000329c:	77 1c                	ja     c00032ba <mfree_page+0x182>
/work/x86_os_my/kernel/memory.c:504 (discriminator 5)
c000329e:	68 d8 ba 00 c0       	push   $0xc000bad8
c00032a3:	68 d0 bc 00 c0       	push   $0xc000bcd0
c00032a8:	68 f9 01 00 00       	push   $0x1f9
c00032ad:	68 57 b9 00 c0       	push   $0xc000b957
c00032b2:	e8 6a f0 ff ff       	call   c0002321 <panic_spin>
c00032b7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:508
					pg_phy_addr < user_pool.phy_addr_start);

			/* 先将对应的物理页框归还到内存池 */
			pfree(pg_phy_addr);
c00032ba:	83 ec 0c             	sub    $0xc,%esp
c00032bd:	ff 75 ec             	pushl  -0x14(%ebp)
c00032c0:	e8 3c fd ff ff       	call   c0003001 <pfree>
c00032c5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:511

			/* 再从页表中清除此虚拟地址所在的页表项pte */
			page_table_pte_remove(vaddr);
c00032c8:	83 ec 0c             	sub    $0xc,%esp
c00032cb:	ff 75 f4             	pushl  -0xc(%ebp)
c00032ce:	e8 90 fd ff ff       	call   c0003063 <page_table_pte_remove>
c00032d3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:513

			page_cnt++;
c00032d6:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:499
		vaddr_remove(pf, _vaddr, pg_cnt);

	} else {
		/* 位于kernel_pool内存池 */
		vaddr -= PG_SIZE;
		while (page_cnt < pg_cnt) {
c00032da:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00032dd:	3b 45 10             	cmp    0x10(%ebp),%eax
c00032e0:	72 84                	jb     c0003266 <mfree_page+0x12e>
/work/x86_os_my/kernel/memory.c:516
			page_table_pte_remove(vaddr);

			page_cnt++;
		}
		/* 清空虚拟地址的位图中的相应位 */
		vaddr_remove(pf, _vaddr, pg_cnt);
c00032e2:	83 ec 04             	sub    $0x4,%esp
c00032e5:	ff 75 10             	pushl  0x10(%ebp)
c00032e8:	ff 75 0c             	pushl  0xc(%ebp)
c00032eb:	ff 75 08             	pushl  0x8(%ebp)
c00032ee:	e8 9b fd ff ff       	call   c000308e <vaddr_remove>
c00032f3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:518
	}
}
c00032f6:	90                   	nop
c00032f7:	c9                   	leave  
c00032f8:	c3                   	ret    

c00032f9 <sys_free>:
sys_free():
/work/x86_os_my/kernel/memory.c:521

/* 回收内存ptr */
void sys_free(void* ptr) {
c00032f9:	55                   	push   %ebp
c00032fa:	89 e5                	mov    %esp,%ebp
c00032fc:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/kernel/memory.c:522
	ASSERT(ptr != NULL);
c00032ff:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003303:	75 1c                	jne    c0003321 <sys_free+0x28>
/work/x86_os_my/kernel/memory.c:522 (discriminator 1)
c0003305:	68 4c bb 00 c0       	push   $0xc000bb4c
c000330a:	68 dc bc 00 c0       	push   $0xc000bcdc
c000330f:	68 0a 02 00 00       	push   $0x20a
c0003314:	68 57 b9 00 c0       	push   $0xc000b957
c0003319:	e8 03 f0 ff ff       	call   c0002321 <panic_spin>
c000331e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:523
	if (ptr != NULL) {
c0003321:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003325:	0f 84 b2 01 00 00    	je     c00034dd <sys_free+0x1e4>
/work/x86_os_my/kernel/memory.c:528
		enum pool_flags PF;
		struct pool* mem_pool;

		/* 判断是线程还是进程 */
		if (running_thread()->pgdir == NULL) {
c000332b:	e8 7a 08 00 00       	call   c0003baa <running_thread>
c0003330:	8b 40 54             	mov    0x54(%eax),%eax
c0003333:	85 c0                	test   %eax,%eax
c0003335:	75 36                	jne    c000336d <sys_free+0x74>
/work/x86_os_my/kernel/memory.c:529
			ASSERT((uint32_t)ptr >= K_HEAP_START);
c0003337:	8b 45 08             	mov    0x8(%ebp),%eax
c000333a:	3d ff ff 0f c0       	cmp    $0xc00fffff,%eax
c000333f:	77 1c                	ja     c000335d <sys_free+0x64>
/work/x86_os_my/kernel/memory.c:529 (discriminator 1)
c0003341:	68 58 bb 00 c0       	push   $0xc000bb58
c0003346:	68 dc bc 00 c0       	push   $0xc000bcdc
c000334b:	68 11 02 00 00       	push   $0x211
c0003350:	68 57 b9 00 c0       	push   $0xc000b957
c0003355:	e8 c7 ef ff ff       	call   c0002321 <panic_spin>
c000335a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:530
			PF = PF_KERNEL;
c000335d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:531
			mem_pool = &kernel_pool;
c0003364:	c7 45 f0 40 14 01 c0 	movl   $0xc0011440,-0x10(%ebp)
c000336b:	eb 0e                	jmp    c000337b <sys_free+0x82>
/work/x86_os_my/kernel/memory.c:533
		} else {
			PF = PF_USER;
c000336d:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:534
			mem_pool = &user_pool;
c0003374:	c7 45 f0 40 13 01 c0 	movl   $0xc0011340,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:537
		}

		lock_acquire(&mem_pool->lock);
c000337b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000337e:	83 c0 10             	add    $0x10,%eax
c0003381:	83 ec 0c             	sub    $0xc,%esp
c0003384:	50                   	push   %eax
c0003385:	e8 f5 13 00 00       	call   c000477f <lock_acquire>
c000338a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:538
		struct mem_block* b = ptr;
c000338d:	8b 45 08             	mov    0x8(%ebp),%eax
c0003390:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:539
		struct arena* a = block2arena(b);			// 把mem_block转换成arena,获取元信息
c0003393:	83 ec 0c             	sub    $0xc,%esp
c0003396:	ff 75 e8             	pushl  -0x18(%ebp)
c0003399:	e8 21 f9 ff ff       	call   c0002cbf <block2arena>
c000339e:	83 c4 10             	add    $0x10,%esp
c00033a1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/kernel/memory.c:540
		ASSERT(a->large == 0 || a->large == 1);
c00033a4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00033a7:	8b 40 08             	mov    0x8(%eax),%eax
c00033aa:	85 c0                	test   %eax,%eax
c00033ac:	74 27                	je     c00033d5 <sys_free+0xdc>
/work/x86_os_my/kernel/memory.c:540 (discriminator 1)
c00033ae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00033b1:	8b 40 08             	mov    0x8(%eax),%eax
c00033b4:	83 f8 01             	cmp    $0x1,%eax
c00033b7:	74 1c                	je     c00033d5 <sys_free+0xdc>
/work/x86_os_my/kernel/memory.c:540 (discriminator 2)
c00033b9:	68 78 bb 00 c0       	push   $0xc000bb78
c00033be:	68 dc bc 00 c0       	push   $0xc000bcdc
c00033c3:	68 1c 02 00 00       	push   $0x21c
c00033c8:	68 57 b9 00 c0       	push   $0xc000b957
c00033cd:	e8 4f ef ff ff       	call   c0002321 <panic_spin>
c00033d2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:541
		if (a->desc == NULL && a->large == true) {	// 大于1024的内存
c00033d5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00033d8:	8b 00                	mov    (%eax),%eax
c00033da:	85 c0                	test   %eax,%eax
c00033dc:	75 28                	jne    c0003406 <sys_free+0x10d>
/work/x86_os_my/kernel/memory.c:541 (discriminator 1)
c00033de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00033e1:	8b 40 08             	mov    0x8(%eax),%eax
c00033e4:	83 f8 01             	cmp    $0x1,%eax
c00033e7:	75 1d                	jne    c0003406 <sys_free+0x10d>
/work/x86_os_my/kernel/memory.c:542
			mfree_page(PF, a, a->cnt);
c00033e9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00033ec:	8b 40 04             	mov    0x4(%eax),%eax
c00033ef:	83 ec 04             	sub    $0x4,%esp
c00033f2:	50                   	push   %eax
c00033f3:	ff 75 e4             	pushl  -0x1c(%ebp)
c00033f6:	ff 75 f4             	pushl  -0xc(%ebp)
c00033f9:	e8 3a fd ff ff       	call   c0003138 <mfree_page>
c00033fe:	83 c4 10             	add    $0x10,%esp
c0003401:	e9 c5 00 00 00       	jmp    c00034cb <sys_free+0x1d2>
/work/x86_os_my/kernel/memory.c:546
		} else {									// 小于等于1024的内存块
			/* 先将内存块回收到free_list */
			// &b->free_elem == &b
			list_append(&a->desc->free_list, &b->free_elem);
c0003406:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0003409:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c000340c:	8b 12                	mov    (%edx),%edx
c000340e:	83 c2 08             	add    $0x8,%edx
c0003411:	83 ec 08             	sub    $0x8,%esp
c0003414:	50                   	push   %eax
c0003415:	52                   	push   %edx
c0003416:	e8 32 0f 00 00       	call   c000434d <list_append>
c000341b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:549

			/* 再判断此arena中的内存块是否都是空闲,如果是就释放arena */
			if (++a->cnt == a->desc->blocks_per_arena) {
c000341e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0003421:	8b 40 04             	mov    0x4(%eax),%eax
c0003424:	8d 50 01             	lea    0x1(%eax),%edx
c0003427:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000342a:	89 50 04             	mov    %edx,0x4(%eax)
c000342d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0003430:	8b 50 04             	mov    0x4(%eax),%edx
c0003433:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0003436:	8b 00                	mov    (%eax),%eax
c0003438:	8b 40 04             	mov    0x4(%eax),%eax
c000343b:	39 c2                	cmp    %eax,%edx
c000343d:	0f 85 88 00 00 00    	jne    c00034cb <sys_free+0x1d2>
/work/x86_os_my/kernel/memory.c:551
				uint32_t block_idx;
				for (block_idx = 0; block_idx < a->desc->blocks_per_arena; block_idx++) {
c0003443:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c000344a:	eb 5f                	jmp    c00034ab <sys_free+0x1b2>
/work/x86_os_my/kernel/memory.c:552
					struct mem_block*  b = arena2block(a, block_idx);
c000344c:	83 ec 08             	sub    $0x8,%esp
c000344f:	ff 75 ec             	pushl  -0x14(%ebp)
c0003452:	ff 75 e4             	pushl  -0x1c(%ebp)
c0003455:	e8 4b f8 ff ff       	call   c0002ca5 <arena2block>
c000345a:	83 c4 10             	add    $0x10,%esp
c000345d:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/kernel/memory.c:553
					ASSERT(elem_find(&a->desc->free_list, &b->free_elem));
c0003460:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0003463:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0003466:	8b 12                	mov    (%edx),%edx
c0003468:	83 c2 08             	add    $0x8,%edx
c000346b:	83 ec 08             	sub    $0x8,%esp
c000346e:	50                   	push   %eax
c000346f:	52                   	push   %edx
c0003470:	e8 52 0f 00 00       	call   c00043c7 <elem_find>
c0003475:	83 c4 10             	add    $0x10,%esp
c0003478:	85 c0                	test   %eax,%eax
c000347a:	75 1c                	jne    c0003498 <sys_free+0x19f>
/work/x86_os_my/kernel/memory.c:553 (discriminator 1)
c000347c:	68 98 bb 00 c0       	push   $0xc000bb98
c0003481:	68 dc bc 00 c0       	push   $0xc000bcdc
c0003486:	68 29 02 00 00       	push   $0x229
c000348b:	68 57 b9 00 c0       	push   $0xc000b957
c0003490:	e8 8c ee ff ff       	call   c0002321 <panic_spin>
c0003495:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:554 (discriminator 2)
					list_remove(&b->free_elem);
c0003498:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000349b:	83 ec 0c             	sub    $0xc,%esp
c000349e:	50                   	push   %eax
c000349f:	e8 c7 0e 00 00       	call   c000436b <list_remove>
c00034a4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:551 (discriminator 2)
			list_append(&a->desc->free_list, &b->free_elem);

			/* 再判断此arena中的内存块是否都是空闲,如果是就释放arena */
			if (++a->cnt == a->desc->blocks_per_arena) {
				uint32_t block_idx;
				for (block_idx = 0; block_idx < a->desc->blocks_per_arena; block_idx++) {
c00034a7:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:551 (discriminator 1)
c00034ab:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00034ae:	8b 00                	mov    (%eax),%eax
c00034b0:	8b 40 04             	mov    0x4(%eax),%eax
c00034b3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c00034b6:	77 94                	ja     c000344c <sys_free+0x153>
/work/x86_os_my/kernel/memory.c:556
					struct mem_block*  b = arena2block(a, block_idx);
					ASSERT(elem_find(&a->desc->free_list, &b->free_elem));
					list_remove(&b->free_elem);
				}
				mfree_page(PF, a, 1);
c00034b8:	83 ec 04             	sub    $0x4,%esp
c00034bb:	6a 01                	push   $0x1
c00034bd:	ff 75 e4             	pushl  -0x1c(%ebp)
c00034c0:	ff 75 f4             	pushl  -0xc(%ebp)
c00034c3:	e8 70 fc ff ff       	call   c0003138 <mfree_page>
c00034c8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:559
			}
		}
		lock_release(&mem_pool->lock);
c00034cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00034ce:	83 c0 10             	add    $0x10,%eax
c00034d1:	83 ec 0c             	sub    $0xc,%esp
c00034d4:	50                   	push   %eax
c00034d5:	e8 1c 13 00 00       	call   c00047f6 <lock_release>
c00034da:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:561
	}
}
c00034dd:	90                   	nop
c00034de:	c9                   	leave  
c00034df:	c3                   	ret    

c00034e0 <mem_pool_init>:
mem_pool_init():
/work/x86_os_my/kernel/memory.c:564

/* 初始化内存池 */
static void mem_pool_init(uint32_t all_mem) {
c00034e0:	55                   	push   %ebp
c00034e1:	89 e5                	mov    %esp,%ebp
c00034e3:	83 ec 38             	sub    $0x38,%esp
/work/x86_os_my/kernel/memory.c:565
	put_str("   mem_pool_init start\n");
c00034e6:	83 ec 0c             	sub    $0xc,%esp
c00034e9:	68 c6 bb 00 c0       	push   $0xc000bbc6
c00034ee:	e8 7d ec ff ff       	call   c0002170 <put_str>
c00034f3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:566
	uint32_t page_table_size = PG_SIZE * 256;		// 页表大小= 1页的页目录表+第0和第768个页目录项指向同一个页表+
c00034f6:	c7 45 f4 00 00 10 00 	movl   $0x100000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:568
													// 第769~1022个页目录项共指向254个页表,共256个页框
	uint32_t used_mem = page_table_size + 0x100000;	// 0x100000为低端1M内存
c00034fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003500:	05 00 00 10 00       	add    $0x100000,%eax
c0003505:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:569
	uint32_t free_mem = all_mem - used_mem;
c0003508:	8b 45 08             	mov    0x8(%ebp),%eax
c000350b:	2b 45 f0             	sub    -0x10(%ebp),%eax
c000350e:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:570
	uint16_t all_free_pages = free_mem / PG_SIZE;	// 1页为4k,不管总内存是不是4k的倍数,
c0003511:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0003514:	c1 e8 0c             	shr    $0xc,%eax
c0003517:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
/work/x86_os_my/kernel/memory.c:572
													// 对于以页为单位的内存分配策略，不足1页的内存不用考虑了。
	uint16_t kernel_free_pages = all_free_pages / 2;
c000351b:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c000351f:	66 d1 e8             	shr    %ax
c0003522:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:573
	uint16_t user_free_pages = all_free_pages - kernel_free_pages;
c0003526:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c000352a:	66 2b 45 e8          	sub    -0x18(%ebp),%ax
c000352e:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
/work/x86_os_my/kernel/memory.c:577

	/* 为简化位图操作，余数不处理，坏处是这样做会丢内存。
	好处是不用做内存的越界检查,因为位图表示的内存少于实际物理内存*/
	uint32_t kbm_length = kernel_free_pages / 8;	// Kernel BitMap的长度,位图中的一位表示一页,以字节为单位
c0003532:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
c0003536:	66 c1 e8 03          	shr    $0x3,%ax
c000353a:	0f b7 c0             	movzwl %ax,%eax
c000353d:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/kernel/memory.c:578
	uint32_t ubm_length = user_free_pages / 8;		// User BitMap的长度.
c0003540:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0003544:	66 c1 e8 03          	shr    $0x3,%ax
c0003548:	0f b7 c0             	movzwl %ax,%eax
c000354b:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/kernel/memory.c:580

	uint32_t kp_start = used_mem;								// Kernel Pool start,内核内存池的起始地址
c000354e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003551:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/kernel/memory.c:581
	uint32_t up_start = kp_start + kernel_free_pages * PG_SIZE;	// User Pool start,用户内存池的起始地址
c0003554:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
c0003558:	c1 e0 0c             	shl    $0xc,%eax
c000355b:	89 c2                	mov    %eax,%edx
c000355d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0003560:	01 d0                	add    %edx,%eax
c0003562:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/kernel/memory.c:583

	kernel_pool.phy_addr_start = kp_start;
c0003565:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0003568:	a3 48 14 01 c0       	mov    %eax,0xc0011448
/work/x86_os_my/kernel/memory.c:584
	user_pool.phy_addr_start   = up_start;
c000356d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0003570:	a3 48 13 01 c0       	mov    %eax,0xc0011348
/work/x86_os_my/kernel/memory.c:586

	kernel_pool.pool_size = kernel_free_pages * PG_SIZE;
c0003575:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
c0003579:	c1 e0 0c             	shl    $0xc,%eax
c000357c:	a3 4c 14 01 c0       	mov    %eax,0xc001144c
/work/x86_os_my/kernel/memory.c:587
	user_pool.pool_size	 = user_free_pages * PG_SIZE;
c0003581:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0003585:	c1 e0 0c             	shl    $0xc,%eax
c0003588:	a3 4c 13 01 c0       	mov    %eax,0xc001134c
/work/x86_os_my/kernel/memory.c:589

	kernel_pool.pool_bitmap.btmp_bytes_len = kbm_length;
c000358d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0003590:	a3 40 14 01 c0       	mov    %eax,0xc0011440
/work/x86_os_my/kernel/memory.c:590
	user_pool.pool_bitmap.btmp_bytes_len	  = ubm_length;
c0003595:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0003598:	a3 40 13 01 c0       	mov    %eax,0xc0011340
/work/x86_os_my/kernel/memory.c:599
	*	而我们需要根据总内存大小在运行时，计算出位图的数组需要多少字节。
	*   所以改为指定一块内存来生成位图.
	*   ************************************************/
	// 内核使用的最高地址是0xc009f000,这是主线程的栈地址.(内核的大小预计为70K左右)
	// 32M内存占用的位图是2k.内核内存池的位图先定在MEM_BITMAP_BASE(0xc009a000)处.
	kernel_pool.pool_bitmap.bits = (void*)MEM_BITMAP_BASE;
c000359d:	c7 05 44 14 01 c0 00 	movl   $0xc009a000,0xc0011444
c00035a4:	a0 09 c0 
/work/x86_os_my/kernel/memory.c:601
	/* 用户内存池的位图紧跟在内核内存池位图之后 */
	user_pool.pool_bitmap.bits = (void*)(MEM_BITMAP_BASE + kbm_length);
c00035a7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00035aa:	2d 00 60 f6 3f       	sub    $0x3ff66000,%eax
c00035af:	a3 44 13 01 c0       	mov    %eax,0xc0011344
/work/x86_os_my/kernel/memory.c:604
	
	/******************** 输出内存池信息 **********************/
	put_str("      kernel_pool_bitmap_start:");put_int((int)kernel_pool.pool_bitmap.bits);
c00035b4:	83 ec 0c             	sub    $0xc,%esp
c00035b7:	68 e0 bb 00 c0       	push   $0xc000bbe0
c00035bc:	e8 af eb ff ff       	call   c0002170 <put_str>
c00035c1:	83 c4 10             	add    $0x10,%esp
c00035c4:	a1 44 14 01 c0       	mov    0xc0011444,%eax
c00035c9:	83 ec 0c             	sub    $0xc,%esp
c00035cc:	50                   	push   %eax
c00035cd:	e8 c8 ec ff ff       	call   c000229a <put_int>
c00035d2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:605
	put_str(" kernel_pool_phy_addr_start:");put_int(kernel_pool.phy_addr_start);
c00035d5:	83 ec 0c             	sub    $0xc,%esp
c00035d8:	68 00 bc 00 c0       	push   $0xc000bc00
c00035dd:	e8 8e eb ff ff       	call   c0002170 <put_str>
c00035e2:	83 c4 10             	add    $0x10,%esp
c00035e5:	a1 48 14 01 c0       	mov    0xc0011448,%eax
c00035ea:	83 ec 0c             	sub    $0xc,%esp
c00035ed:	50                   	push   %eax
c00035ee:	e8 a7 ec ff ff       	call   c000229a <put_int>
c00035f3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:606
	put_str("\n");
c00035f6:	83 ec 0c             	sub    $0xc,%esp
c00035f9:	68 1d bc 00 c0       	push   $0xc000bc1d
c00035fe:	e8 6d eb ff ff       	call   c0002170 <put_str>
c0003603:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:607
	put_str("      user_pool_bitmap_start:");put_int((int)user_pool.pool_bitmap.bits);
c0003606:	83 ec 0c             	sub    $0xc,%esp
c0003609:	68 1f bc 00 c0       	push   $0xc000bc1f
c000360e:	e8 5d eb ff ff       	call   c0002170 <put_str>
c0003613:	83 c4 10             	add    $0x10,%esp
c0003616:	a1 44 13 01 c0       	mov    0xc0011344,%eax
c000361b:	83 ec 0c             	sub    $0xc,%esp
c000361e:	50                   	push   %eax
c000361f:	e8 76 ec ff ff       	call   c000229a <put_int>
c0003624:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:608
	put_str(" user_pool_phy_addr_start:");put_int(user_pool.phy_addr_start);
c0003627:	83 ec 0c             	sub    $0xc,%esp
c000362a:	68 3d bc 00 c0       	push   $0xc000bc3d
c000362f:	e8 3c eb ff ff       	call   c0002170 <put_str>
c0003634:	83 c4 10             	add    $0x10,%esp
c0003637:	a1 48 13 01 c0       	mov    0xc0011348,%eax
c000363c:	83 ec 0c             	sub    $0xc,%esp
c000363f:	50                   	push   %eax
c0003640:	e8 55 ec ff ff       	call   c000229a <put_int>
c0003645:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:609
	put_str("\n");
c0003648:	83 ec 0c             	sub    $0xc,%esp
c000364b:	68 1d bc 00 c0       	push   $0xc000bc1d
c0003650:	e8 1b eb ff ff       	call   c0002170 <put_str>
c0003655:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:612

	/* 将位图置0*/
	bitmap_init(&kernel_pool.pool_bitmap);
c0003658:	83 ec 0c             	sub    $0xc,%esp
c000365b:	68 40 14 01 c0       	push   $0xc0011440
c0003660:	e8 92 ed ff ff       	call   c00023f7 <bitmap_init>
c0003665:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:613
	bitmap_init(&user_pool.pool_bitmap);
c0003668:	83 ec 0c             	sub    $0xc,%esp
c000366b:	68 40 13 01 c0       	push   $0xc0011340
c0003670:	e8 82 ed ff ff       	call   c00023f7 <bitmap_init>
c0003675:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:615

	lock_init(&kernel_pool.lock);
c0003678:	83 ec 0c             	sub    $0xc,%esp
c000367b:	68 50 14 01 c0       	push   $0xc0011450
c0003680:	e8 20 0f 00 00       	call   c00045a5 <lock_init>
c0003685:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:616
	lock_init(&user_pool.lock);
c0003688:	83 ec 0c             	sub    $0xc,%esp
c000368b:	68 50 13 01 c0       	push   $0xc0011350
c0003690:	e8 10 0f 00 00       	call   c00045a5 <lock_init>
c0003695:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:620
	
	/* 下面初始化内核虚拟地址的位图(bp_len + bits数组),按实际物理内存大小生成数组。*/
	// 用于维护内核堆的虚拟地址,所以要和内核内存池大小一致
	kernel_vaddr.vaddr_bitmap.btmp_bytes_len = kbm_length;
c0003698:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000369b:	a3 28 14 01 c0       	mov    %eax,0xc0011428
/work/x86_os_my/kernel/memory.c:622
	/* 位图的数组指向一块未使用的内存,目前定位在内核内存池和用户内存池之外*/
	kernel_vaddr.vaddr_bitmap.bits = (void*)(MEM_BITMAP_BASE + kbm_length + ubm_length);
c00036a0:	8b 55 e0             	mov    -0x20(%ebp),%edx
c00036a3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c00036a6:	01 d0                	add    %edx,%eax
c00036a8:	2d 00 60 f6 3f       	sub    $0x3ff66000,%eax
c00036ad:	a3 2c 14 01 c0       	mov    %eax,0xc001142c
/work/x86_os_my/kernel/memory.c:624

	kernel_vaddr.vaddr_start = K_HEAP_START;
c00036b2:	c7 05 30 14 01 c0 00 	movl   $0xc0100000,0xc0011430
c00036b9:	00 10 c0 
/work/x86_os_my/kernel/memory.c:625
	bitmap_init(&kernel_vaddr.vaddr_bitmap);
c00036bc:	83 ec 0c             	sub    $0xc,%esp
c00036bf:	68 28 14 01 c0       	push   $0xc0011428
c00036c4:	e8 2e ed ff ff       	call   c00023f7 <bitmap_init>
c00036c9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:626
	put_str("   mem_pool_init done\n");
c00036cc:	83 ec 0c             	sub    $0xc,%esp
c00036cf:	68 58 bc 00 c0       	push   $0xc000bc58
c00036d4:	e8 97 ea ff ff       	call   c0002170 <put_str>
c00036d9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:627
}
c00036dc:	90                   	nop
c00036dd:	c9                   	leave  
c00036de:	c3                   	ret    

c00036df <block_desc_init>:
block_desc_init():
/work/x86_os_my/kernel/memory.c:630

/* 为malloc做准备 */
void block_desc_init(struct mem_block_desc* desc_array) {
c00036df:	55                   	push   %ebp
c00036e0:	89 e5                	mov    %esp,%ebp
c00036e2:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:631
   uint16_t desc_idx, block_size = 16;
c00036e5:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:634

   /* 初始化每个mem_block_desc描述符 */
   for (desc_idx = 0; desc_idx < DESC_CNT; desc_idx++) {
c00036eb:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c00036f1:	eb 75                	jmp    c0003768 <block_desc_init+0x89>
/work/x86_os_my/kernel/memory.c:635 (discriminator 3)
      desc_array[desc_idx].block_size = block_size;
c00036f3:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c00036f7:	89 d0                	mov    %edx,%eax
c00036f9:	01 c0                	add    %eax,%eax
c00036fb:	01 d0                	add    %edx,%eax
c00036fd:	c1 e0 03             	shl    $0x3,%eax
c0003700:	89 c2                	mov    %eax,%edx
c0003702:	8b 45 08             	mov    0x8(%ebp),%eax
c0003705:	01 c2                	add    %eax,%edx
c0003707:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c000370b:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/kernel/memory.c:638 (discriminator 3)

      /* 初始化arena中的内存块数量【注意计算方法】 */
      desc_array[desc_idx].blocks_per_arena = (PG_SIZE - sizeof(struct arena)) / block_size;
c000370d:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0003711:	89 d0                	mov    %edx,%eax
c0003713:	01 c0                	add    %eax,%eax
c0003715:	01 d0                	add    %edx,%eax
c0003717:	c1 e0 03             	shl    $0x3,%eax
c000371a:	89 c2                	mov    %eax,%edx
c000371c:	8b 45 08             	mov    0x8(%ebp),%eax
c000371f:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
c0003722:	b8 f4 0f 00 00       	mov    $0xff4,%eax
c0003727:	ba 00 00 00 00       	mov    $0x0,%edx
c000372c:	66 f7 75 f4          	divw   -0xc(%ebp)
c0003730:	0f b7 c0             	movzwl %ax,%eax
c0003733:	89 41 04             	mov    %eax,0x4(%ecx)
/work/x86_os_my/kernel/memory.c:640 (discriminator 3)

      list_init(&desc_array[desc_idx].free_list);
c0003736:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c000373a:	89 d0                	mov    %edx,%eax
c000373c:	01 c0                	add    %eax,%eax
c000373e:	01 d0                	add    %edx,%eax
c0003740:	c1 e0 03             	shl    $0x3,%eax
c0003743:	89 c2                	mov    %eax,%edx
c0003745:	8b 45 08             	mov    0x8(%ebp),%eax
c0003748:	01 d0                	add    %edx,%eax
c000374a:	83 c0 08             	add    $0x8,%eax
c000374d:	83 ec 0c             	sub    $0xc,%esp
c0003750:	50                   	push   %eax
c0003751:	e8 66 0b 00 00       	call   c00042bc <list_init>
c0003756:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:642 (discriminator 3)

      block_size *= 2;		// 下一个规格内存块！
c0003759:	66 d1 65 f4          	shlw   -0xc(%ebp)
/work/x86_os_my/kernel/memory.c:634 (discriminator 3)
/* 为malloc做准备 */
void block_desc_init(struct mem_block_desc* desc_array) {
   uint16_t desc_idx, block_size = 16;

   /* 初始化每个mem_block_desc描述符 */
   for (desc_idx = 0; desc_idx < DESC_CNT; desc_idx++) {
c000375d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0003761:	83 c0 01             	add    $0x1,%eax
c0003764:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
/work/x86_os_my/kernel/memory.c:634 (discriminator 1)
c0003768:	66 83 7d f6 06       	cmpw   $0x6,-0xa(%ebp)
c000376d:	76 84                	jbe    c00036f3 <block_desc_init+0x14>
/work/x86_os_my/kernel/memory.c:645
      list_init(&desc_array[desc_idx].free_list);

      block_size *= 2;		// 下一个规格内存块！
	  // 16/32/64/128/256/512/1024 总共 7 种规格
   }
}
c000376f:	90                   	nop
c0003770:	c9                   	leave  
c0003771:	c3                   	ret    

c0003772 <mem_init>:
mem_init():
/work/x86_os_my/kernel/memory.c:648

/* 内存管理部分初始化入口 */
void mem_init() {
c0003772:	55                   	push   %ebp
c0003773:	89 e5                	mov    %esp,%ebp
c0003775:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:649
	put_str("mem_init start\n");
c0003778:	83 ec 0c             	sub    $0xc,%esp
c000377b:	68 6f bc 00 c0       	push   $0xc000bc6f
c0003780:	e8 eb e9 ff ff       	call   c0002170 <put_str>
c0003785:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:650
	uint32_t mem_bytes_total = (*(uint32_t*)(0xb00));	//内存总数在汇编中获取，放到了地址0xb00处。
c0003788:	b8 00 0b 00 00       	mov    $0xb00,%eax
c000378d:	8b 00                	mov    (%eax),%eax
c000378f:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:651
	mem_pool_init(mem_bytes_total);	// 初始化内存池
c0003792:	83 ec 0c             	sub    $0xc,%esp
c0003795:	ff 75 f4             	pushl  -0xc(%ebp)
c0003798:	e8 43 fd ff ff       	call   c00034e0 <mem_pool_init>
c000379d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:652
	block_desc_init(k_block_descs);	// 初始化mem_block_desc数组descs,为malloc做准备
c00037a0:	83 ec 0c             	sub    $0xc,%esp
c00037a3:	68 80 13 01 c0       	push   $0xc0011380
c00037a8:	e8 32 ff ff ff       	call   c00036df <block_desc_init>
c00037ad:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:653
	put_str("mem_init done\n");
c00037b0:	83 ec 0c             	sub    $0xc,%esp
c00037b3:	68 7f bc 00 c0       	push   $0xc000bc7f
c00037b8:	e8 b3 e9 ff ff       	call   c0002170 <put_str>
c00037bd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:654
}
c00037c0:	90                   	nop
c00037c1:	c9                   	leave  
c00037c2:	c3                   	ret    

c00037c3 <memset>:
memset():
/work/x86_os_my/lib/string.c:6
#include "string.h"
#include "global.h"
#include "debug.h"

/* 将dst_起始的size个字节置为value */
void memset(void* dst_, uint8_t value, uint32_t size) {
c00037c3:	55                   	push   %ebp
c00037c4:	89 e5                	mov    %esp,%ebp
c00037c6:	83 ec 28             	sub    $0x28,%esp
c00037c9:	8b 45 0c             	mov    0xc(%ebp),%eax
c00037cc:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/lib/string.c:7
   ASSERT(dst_ != NULL);
c00037cf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00037d3:	75 19                	jne    c00037ee <memset+0x2b>
/work/x86_os_my/lib/string.c:7 (discriminator 1)
c00037d5:	68 e8 bc 00 c0       	push   $0xc000bce8
c00037da:	68 5c bd 00 c0       	push   $0xc000bd5c
c00037df:	6a 07                	push   $0x7
c00037e1:	68 f5 bc 00 c0       	push   $0xc000bcf5
c00037e6:	e8 36 eb ff ff       	call   c0002321 <panic_spin>
c00037eb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:8
   uint8_t* dst = (uint8_t*)dst_;
c00037ee:	8b 45 08             	mov    0x8(%ebp),%eax
c00037f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:9
   while (size-- > 0)
c00037f4:	eb 0f                	jmp    c0003805 <memset+0x42>
/work/x86_os_my/lib/string.c:10
      *dst++ = value;
c00037f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00037f9:	8d 50 01             	lea    0x1(%eax),%edx
c00037fc:	89 55 f4             	mov    %edx,-0xc(%ebp)
c00037ff:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c0003803:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/string.c:9

/* 将dst_起始的size个字节置为value */
void memset(void* dst_, uint8_t value, uint32_t size) {
   ASSERT(dst_ != NULL);
   uint8_t* dst = (uint8_t*)dst_;
   while (size-- > 0)
c0003805:	8b 45 10             	mov    0x10(%ebp),%eax
c0003808:	8d 50 ff             	lea    -0x1(%eax),%edx
c000380b:	89 55 10             	mov    %edx,0x10(%ebp)
c000380e:	85 c0                	test   %eax,%eax
c0003810:	75 e4                	jne    c00037f6 <memset+0x33>
/work/x86_os_my/lib/string.c:11
      *dst++ = value;
}
c0003812:	90                   	nop
c0003813:	c9                   	leave  
c0003814:	c3                   	ret    

c0003815 <memcpy>:
memcpy():
/work/x86_os_my/lib/string.c:14

/* 将src_起始的size个字节复制到dst_ */
void memcpy(void* dst_, const void* src_, uint32_t size) {
c0003815:	55                   	push   %ebp
c0003816:	89 e5                	mov    %esp,%ebp
c0003818:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/string.c:15
   ASSERT(dst_ != NULL && src_ != NULL);
c000381b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c000381f:	74 06                	je     c0003827 <memcpy+0x12>
/work/x86_os_my/lib/string.c:15 (discriminator 1)
c0003821:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0003825:	75 19                	jne    c0003840 <memcpy+0x2b>
/work/x86_os_my/lib/string.c:15 (discriminator 3)
c0003827:	68 02 bd 00 c0       	push   $0xc000bd02
c000382c:	68 64 bd 00 c0       	push   $0xc000bd64
c0003831:	6a 0f                	push   $0xf
c0003833:	68 f5 bc 00 c0       	push   $0xc000bcf5
c0003838:	e8 e4 ea ff ff       	call   c0002321 <panic_spin>
c000383d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:16
   uint8_t* dst = dst_;
c0003840:	8b 45 08             	mov    0x8(%ebp),%eax
c0003843:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:17
   const uint8_t* src = src_;
c0003846:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003849:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/string.c:18
   while (size-- > 0)
c000384c:	eb 17                	jmp    c0003865 <memcpy+0x50>
/work/x86_os_my/lib/string.c:19
      *dst++ = *src++;
c000384e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003851:	8d 50 01             	lea    0x1(%eax),%edx
c0003854:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0003857:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000385a:	8d 4a 01             	lea    0x1(%edx),%ecx
c000385d:	89 4d f0             	mov    %ecx,-0x10(%ebp)
c0003860:	0f b6 12             	movzbl (%edx),%edx
c0003863:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/string.c:18
/* 将src_起始的size个字节复制到dst_ */
void memcpy(void* dst_, const void* src_, uint32_t size) {
   ASSERT(dst_ != NULL && src_ != NULL);
   uint8_t* dst = dst_;
   const uint8_t* src = src_;
   while (size-- > 0)
c0003865:	8b 45 10             	mov    0x10(%ebp),%eax
c0003868:	8d 50 ff             	lea    -0x1(%eax),%edx
c000386b:	89 55 10             	mov    %edx,0x10(%ebp)
c000386e:	85 c0                	test   %eax,%eax
c0003870:	75 dc                	jne    c000384e <memcpy+0x39>
/work/x86_os_my/lib/string.c:20
      *dst++ = *src++;
}
c0003872:	90                   	nop
c0003873:	c9                   	leave  
c0003874:	c3                   	ret    

c0003875 <memcmp>:
memcmp():
/work/x86_os_my/lib/string.c:23

/* 连续比较以地址a_和地址b_开头的size个字节,若相等则返回0,若a_大于b_返回+1,否则返回-1 */
int memcmp(const void* a_, const void* b_, uint32_t size) {
c0003875:	55                   	push   %ebp
c0003876:	89 e5                	mov    %esp,%ebp
c0003878:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/string.c:24
   const char* a = a_;
c000387b:	8b 45 08             	mov    0x8(%ebp),%eax
c000387e:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:25
   const char* b = b_;
c0003881:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003884:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/string.c:26
   ASSERT(a != NULL || b != NULL);
c0003887:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c000388b:	75 57                	jne    c00038e4 <memcmp+0x6f>
/work/x86_os_my/lib/string.c:26 (discriminator 1)
c000388d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0003891:	75 51                	jne    c00038e4 <memcmp+0x6f>
/work/x86_os_my/lib/string.c:26 (discriminator 2)
c0003893:	68 1f bd 00 c0       	push   $0xc000bd1f
c0003898:	68 6c bd 00 c0       	push   $0xc000bd6c
c000389d:	6a 1a                	push   $0x1a
c000389f:	68 f5 bc 00 c0       	push   $0xc000bcf5
c00038a4:	e8 78 ea ff ff       	call   c0002321 <panic_spin>
c00038a9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:27 (discriminator 2)
   while (size-- > 0) {
c00038ac:	eb 36                	jmp    c00038e4 <memcmp+0x6f>
/work/x86_os_my/lib/string.c:28
      if(*a != *b) {
c00038ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00038b1:	0f b6 10             	movzbl (%eax),%edx
c00038b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00038b7:	0f b6 00             	movzbl (%eax),%eax
c00038ba:	38 c2                	cmp    %al,%dl
c00038bc:	74 1e                	je     c00038dc <memcmp+0x67>
/work/x86_os_my/lib/string.c:29
	 return *a > *b ? 1 : -1; 
c00038be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00038c1:	0f b6 10             	movzbl (%eax),%edx
c00038c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00038c7:	0f b6 00             	movzbl (%eax),%eax
c00038ca:	38 c2                	cmp    %al,%dl
c00038cc:	7e 07                	jle    c00038d5 <memcmp+0x60>
/work/x86_os_my/lib/string.c:29 (discriminator 1)
c00038ce:	b8 01 00 00 00       	mov    $0x1,%eax
c00038d3:	eb 21                	jmp    c00038f6 <memcmp+0x81>
/work/x86_os_my/lib/string.c:29 (discriminator 2)
c00038d5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00038da:	eb 1a                	jmp    c00038f6 <memcmp+0x81>
/work/x86_os_my/lib/string.c:31
      }
      a++;
c00038dc:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/lib/string.c:32
      b++;
c00038e0:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/lib/string.c:27
/* 连续比较以地址a_和地址b_开头的size个字节,若相等则返回0,若a_大于b_返回+1,否则返回-1 */
int memcmp(const void* a_, const void* b_, uint32_t size) {
   const char* a = a_;
   const char* b = b_;
   ASSERT(a != NULL || b != NULL);
   while (size-- > 0) {
c00038e4:	8b 45 10             	mov    0x10(%ebp),%eax
c00038e7:	8d 50 ff             	lea    -0x1(%eax),%edx
c00038ea:	89 55 10             	mov    %edx,0x10(%ebp)
c00038ed:	85 c0                	test   %eax,%eax
c00038ef:	75 bd                	jne    c00038ae <memcmp+0x39>
/work/x86_os_my/lib/string.c:34
	 return *a > *b ? 1 : -1; 
      }
      a++;
      b++;
   }
   return 0;
c00038f1:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/lib/string.c:35
}
c00038f6:	c9                   	leave  
c00038f7:	c3                   	ret    

c00038f8 <strcpy>:
strcpy():
/work/x86_os_my/lib/string.c:38

/* 将字符串从src_复制到dst_ */
char* strcpy(char* dst_, const char* src_) {
c00038f8:	55                   	push   %ebp
c00038f9:	89 e5                	mov    %esp,%ebp
c00038fb:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/string.c:39
   ASSERT(dst_ != NULL && src_ != NULL);
c00038fe:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003902:	74 06                	je     c000390a <strcpy+0x12>
/work/x86_os_my/lib/string.c:39 (discriminator 1)
c0003904:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0003908:	75 19                	jne    c0003923 <strcpy+0x2b>
/work/x86_os_my/lib/string.c:39 (discriminator 3)
c000390a:	68 02 bd 00 c0       	push   $0xc000bd02
c000390f:	68 74 bd 00 c0       	push   $0xc000bd74
c0003914:	6a 27                	push   $0x27
c0003916:	68 f5 bc 00 c0       	push   $0xc000bcf5
c000391b:	e8 01 ea ff ff       	call   c0002321 <panic_spin>
c0003920:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:40
   char* r = dst_;		       // 用来返回目的字符串起始地址
c0003923:	8b 45 08             	mov    0x8(%ebp),%eax
c0003926:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:41
   while((*dst_++ = *src_++));
c0003929:	90                   	nop
/work/x86_os_my/lib/string.c:41 (discriminator 1)
c000392a:	8b 45 08             	mov    0x8(%ebp),%eax
c000392d:	8d 50 01             	lea    0x1(%eax),%edx
c0003930:	89 55 08             	mov    %edx,0x8(%ebp)
c0003933:	8b 55 0c             	mov    0xc(%ebp),%edx
c0003936:	8d 4a 01             	lea    0x1(%edx),%ecx
c0003939:	89 4d 0c             	mov    %ecx,0xc(%ebp)
c000393c:	0f b6 12             	movzbl (%edx),%edx
c000393f:	88 10                	mov    %dl,(%eax)
c0003941:	0f b6 00             	movzbl (%eax),%eax
c0003944:	84 c0                	test   %al,%al
c0003946:	75 e2                	jne    c000392a <strcpy+0x32>
/work/x86_os_my/lib/string.c:42
   return r;
c0003948:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/lib/string.c:43
}
c000394b:	c9                   	leave  
c000394c:	c3                   	ret    

c000394d <strlen>:
strlen():
/work/x86_os_my/lib/string.c:46

/* 返回字符串长度 */
uint32_t strlen(const char* str) {
c000394d:	55                   	push   %ebp
c000394e:	89 e5                	mov    %esp,%ebp
c0003950:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/string.c:47
   ASSERT(str != NULL);
c0003953:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003957:	75 19                	jne    c0003972 <strlen+0x25>
/work/x86_os_my/lib/string.c:47 (discriminator 1)
c0003959:	68 36 bd 00 c0       	push   $0xc000bd36
c000395e:	68 7c bd 00 c0       	push   $0xc000bd7c
c0003963:	6a 2f                	push   $0x2f
c0003965:	68 f5 bc 00 c0       	push   $0xc000bcf5
c000396a:	e8 b2 e9 ff ff       	call   c0002321 <panic_spin>
c000396f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:48
   const char* p = str;
c0003972:	8b 45 08             	mov    0x8(%ebp),%eax
c0003975:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:49
   while(*p++);
c0003978:	90                   	nop
/work/x86_os_my/lib/string.c:49 (discriminator 1)
c0003979:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000397c:	8d 50 01             	lea    0x1(%eax),%edx
c000397f:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0003982:	0f b6 00             	movzbl (%eax),%eax
c0003985:	84 c0                	test   %al,%al
c0003987:	75 f0                	jne    c0003979 <strlen+0x2c>
/work/x86_os_my/lib/string.c:50
   return (p - str - 1);
c0003989:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000398c:	8b 45 08             	mov    0x8(%ebp),%eax
c000398f:	29 c2                	sub    %eax,%edx
c0003991:	89 d0                	mov    %edx,%eax
c0003993:	83 e8 01             	sub    $0x1,%eax
/work/x86_os_my/lib/string.c:51
}
c0003996:	c9                   	leave  
c0003997:	c3                   	ret    

c0003998 <strcmp>:
strcmp():
/work/x86_os_my/lib/string.c:54

/* 比较两个字符串,若a_中的字符大于b_中的字符返回1,相等时返回0,否则返回-1. */
int8_t strcmp (const char* a, const char* b) {
c0003998:	55                   	push   %ebp
c0003999:	89 e5                	mov    %esp,%ebp
c000399b:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/lib/string.c:55
   ASSERT(a != NULL && b != NULL);
c000399e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00039a2:	74 06                	je     c00039aa <strcmp+0x12>
/work/x86_os_my/lib/string.c:55 (discriminator 1)
c00039a4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c00039a8:	75 19                	jne    c00039c3 <strcmp+0x2b>
/work/x86_os_my/lib/string.c:55 (discriminator 3)
c00039aa:	68 42 bd 00 c0       	push   $0xc000bd42
c00039af:	68 84 bd 00 c0       	push   $0xc000bd84
c00039b4:	6a 37                	push   $0x37
c00039b6:	68 f5 bc 00 c0       	push   $0xc000bcf5
c00039bb:	e8 61 e9 ff ff       	call   c0002321 <panic_spin>
c00039c0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:56 (discriminator 1)
   while (*a != 0 && *a == *b) {
c00039c3:	eb 08                	jmp    c00039cd <strcmp+0x35>
/work/x86_os_my/lib/string.c:57
      a++;
c00039c5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
/work/x86_os_my/lib/string.c:58
      b++;
c00039c9:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
/work/x86_os_my/lib/string.c:56
}

/* 比较两个字符串,若a_中的字符大于b_中的字符返回1,相等时返回0,否则返回-1. */
int8_t strcmp (const char* a, const char* b) {
   ASSERT(a != NULL && b != NULL);
   while (*a != 0 && *a == *b) {
c00039cd:	8b 45 08             	mov    0x8(%ebp),%eax
c00039d0:	0f b6 00             	movzbl (%eax),%eax
c00039d3:	84 c0                	test   %al,%al
c00039d5:	74 10                	je     c00039e7 <strcmp+0x4f>
/work/x86_os_my/lib/string.c:56 (discriminator 1)
c00039d7:	8b 45 08             	mov    0x8(%ebp),%eax
c00039da:	0f b6 10             	movzbl (%eax),%edx
c00039dd:	8b 45 0c             	mov    0xc(%ebp),%eax
c00039e0:	0f b6 00             	movzbl (%eax),%eax
c00039e3:	38 c2                	cmp    %al,%dl
c00039e5:	74 de                	je     c00039c5 <strcmp+0x2d>
/work/x86_os_my/lib/string.c:62
      a++;
      b++;
   }
/* 如果*a小于*b就返回-1,否则就属于*a大于等于*b的情况。在后面的布尔表达式"*a > *b"中,
 * 若*a大于*b,表达式就等于1,否则就表达式不成立,也就是布尔值为0,恰恰表示*a等于*b */
   return *a < *b ? -1 : *a > *b;
c00039e7:	8b 45 08             	mov    0x8(%ebp),%eax
c00039ea:	0f b6 10             	movzbl (%eax),%edx
c00039ed:	8b 45 0c             	mov    0xc(%ebp),%eax
c00039f0:	0f b6 00             	movzbl (%eax),%eax
c00039f3:	38 c2                	cmp    %al,%dl
c00039f5:	7c 13                	jl     c0003a0a <strcmp+0x72>
/work/x86_os_my/lib/string.c:62 (discriminator 1)
c00039f7:	8b 45 08             	mov    0x8(%ebp),%eax
c00039fa:	0f b6 10             	movzbl (%eax),%edx
c00039fd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003a00:	0f b6 00             	movzbl (%eax),%eax
c0003a03:	38 c2                	cmp    %al,%dl
c0003a05:	0f 9f c0             	setg   %al
c0003a08:	eb 05                	jmp    c0003a0f <strcmp+0x77>
/work/x86_os_my/lib/string.c:62 (discriminator 2)
c0003a0a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
/work/x86_os_my/lib/string.c:63 (discriminator 5)
}
c0003a0f:	c9                   	leave  
c0003a10:	c3                   	ret    

c0003a11 <strchr>:
strchr():
/work/x86_os_my/lib/string.c:66

/* 从左到右查找字符串str中首次出现字符ch的地址(不是下标,是地址) */
char* strchr(const char* str, const uint8_t ch) {
c0003a11:	55                   	push   %ebp
c0003a12:	89 e5                	mov    %esp,%ebp
c0003a14:	83 ec 18             	sub    $0x18,%esp
c0003a17:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003a1a:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/lib/string.c:67
   ASSERT(str != NULL);
c0003a1d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003a21:	75 35                	jne    c0003a58 <strchr+0x47>
/work/x86_os_my/lib/string.c:67 (discriminator 1)
c0003a23:	68 36 bd 00 c0       	push   $0xc000bd36
c0003a28:	68 8c bd 00 c0       	push   $0xc000bd8c
c0003a2d:	6a 43                	push   $0x43
c0003a2f:	68 f5 bc 00 c0       	push   $0xc000bcf5
c0003a34:	e8 e8 e8 ff ff       	call   c0002321 <panic_spin>
c0003a39:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:68 (discriminator 1)
   while (*str != 0) {
c0003a3c:	eb 1a                	jmp    c0003a58 <strchr+0x47>
/work/x86_os_my/lib/string.c:69
      if (*str == ch) {
c0003a3e:	8b 45 08             	mov    0x8(%ebp),%eax
c0003a41:	0f b6 00             	movzbl (%eax),%eax
c0003a44:	0f be d0             	movsbl %al,%edx
c0003a47:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0003a4b:	39 c2                	cmp    %eax,%edx
c0003a4d:	75 05                	jne    c0003a54 <strchr+0x43>
/work/x86_os_my/lib/string.c:70
	 return (char*)str;	    // 需要强制转化成和返回值类型一样,否则编译器会报const属性丢失,下同.
c0003a4f:	8b 45 08             	mov    0x8(%ebp),%eax
c0003a52:	eb 13                	jmp    c0003a67 <strchr+0x56>
/work/x86_os_my/lib/string.c:72
      }
      str++;
c0003a54:	83 45 08 01          	addl   $0x1,0x8(%ebp)
/work/x86_os_my/lib/string.c:68
}

/* 从左到右查找字符串str中首次出现字符ch的地址(不是下标,是地址) */
char* strchr(const char* str, const uint8_t ch) {
   ASSERT(str != NULL);
   while (*str != 0) {
c0003a58:	8b 45 08             	mov    0x8(%ebp),%eax
c0003a5b:	0f b6 00             	movzbl (%eax),%eax
c0003a5e:	84 c0                	test   %al,%al
c0003a60:	75 dc                	jne    c0003a3e <strchr+0x2d>
/work/x86_os_my/lib/string.c:74
      if (*str == ch) {
	 return (char*)str;	    // 需要强制转化成和返回值类型一样,否则编译器会报const属性丢失,下同.
      }
      str++;
   }
   return NULL;
c0003a62:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/lib/string.c:75
}
c0003a67:	c9                   	leave  
c0003a68:	c3                   	ret    

c0003a69 <strrchr>:
strrchr():
/work/x86_os_my/lib/string.c:78

/* 从后往前查找字符串str中首次出现字符ch的地址(不是下标,是地址) */
char* strrchr(const char* str, const uint8_t ch) {
c0003a69:	55                   	push   %ebp
c0003a6a:	89 e5                	mov    %esp,%ebp
c0003a6c:	83 ec 28             	sub    $0x28,%esp
c0003a6f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003a72:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/lib/string.c:79
   ASSERT(str != NULL);
c0003a75:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003a79:	75 19                	jne    c0003a94 <strrchr+0x2b>
/work/x86_os_my/lib/string.c:79 (discriminator 1)
c0003a7b:	68 36 bd 00 c0       	push   $0xc000bd36
c0003a80:	68 94 bd 00 c0       	push   $0xc000bd94
c0003a85:	6a 4f                	push   $0x4f
c0003a87:	68 f5 bc 00 c0       	push   $0xc000bcf5
c0003a8c:	e8 90 e8 ff ff       	call   c0002321 <panic_spin>
c0003a91:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:80
   const char* last_char = NULL;
c0003a94:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/string.c:82
   /* 从头到尾遍历一次,若存在ch字符,last_char总是该字符最后一次出现在串中的地址(不是下标,是地址)*/
   while (*str != 0) {
c0003a9b:	eb 1b                	jmp    c0003ab8 <strrchr+0x4f>
/work/x86_os_my/lib/string.c:83
      if (*str == ch) {
c0003a9d:	8b 45 08             	mov    0x8(%ebp),%eax
c0003aa0:	0f b6 00             	movzbl (%eax),%eax
c0003aa3:	0f be d0             	movsbl %al,%edx
c0003aa6:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0003aaa:	39 c2                	cmp    %eax,%edx
c0003aac:	75 06                	jne    c0003ab4 <strrchr+0x4b>
/work/x86_os_my/lib/string.c:84
	 last_char = str;
c0003aae:	8b 45 08             	mov    0x8(%ebp),%eax
c0003ab1:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:86
      }
      str++;
c0003ab4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
/work/x86_os_my/lib/string.c:82
/* 从后往前查找字符串str中首次出现字符ch的地址(不是下标,是地址) */
char* strrchr(const char* str, const uint8_t ch) {
   ASSERT(str != NULL);
   const char* last_char = NULL;
   /* 从头到尾遍历一次,若存在ch字符,last_char总是该字符最后一次出现在串中的地址(不是下标,是地址)*/
   while (*str != 0) {
c0003ab8:	8b 45 08             	mov    0x8(%ebp),%eax
c0003abb:	0f b6 00             	movzbl (%eax),%eax
c0003abe:	84 c0                	test   %al,%al
c0003ac0:	75 db                	jne    c0003a9d <strrchr+0x34>
/work/x86_os_my/lib/string.c:88
      if (*str == ch) {
	 last_char = str;
      }
      str++;
   }
   return (char*)last_char;
c0003ac2:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/lib/string.c:89
}
c0003ac5:	c9                   	leave  
c0003ac6:	c3                   	ret    

c0003ac7 <strcat>:
strcat():
/work/x86_os_my/lib/string.c:92

/* 将字符串src_拼接到dst_后,将回拼接的串地址 */
char* strcat(char* dst_, const char* src_) {
c0003ac7:	55                   	push   %ebp
c0003ac8:	89 e5                	mov    %esp,%ebp
c0003aca:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/string.c:93
   ASSERT(dst_ != NULL && src_ != NULL);
c0003acd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003ad1:	74 06                	je     c0003ad9 <strcat+0x12>
/work/x86_os_my/lib/string.c:93 (discriminator 1)
c0003ad3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0003ad7:	75 19                	jne    c0003af2 <strcat+0x2b>
/work/x86_os_my/lib/string.c:93 (discriminator 3)
c0003ad9:	68 02 bd 00 c0       	push   $0xc000bd02
c0003ade:	68 9c bd 00 c0       	push   $0xc000bd9c
c0003ae3:	6a 5d                	push   $0x5d
c0003ae5:	68 f5 bc 00 c0       	push   $0xc000bcf5
c0003aea:	e8 32 e8 ff ff       	call   c0002321 <panic_spin>
c0003aef:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:94
   char* str = dst_;
c0003af2:	8b 45 08             	mov    0x8(%ebp),%eax
c0003af5:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:95
   while (*str++);
c0003af8:	90                   	nop
/work/x86_os_my/lib/string.c:95 (discriminator 1)
c0003af9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003afc:	8d 50 01             	lea    0x1(%eax),%edx
c0003aff:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0003b02:	0f b6 00             	movzbl (%eax),%eax
c0003b05:	84 c0                	test   %al,%al
c0003b07:	75 f0                	jne    c0003af9 <strcat+0x32>
/work/x86_os_my/lib/string.c:96
   --str;      // 别看错了，--str是独立的一句，并不是while的循环体
c0003b09:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
/work/x86_os_my/lib/string.c:97
   while((*str++ = *src_++));	 // 当*str被赋值为0时,此时表达式不成立,正好添加了字符串结尾的0.
c0003b0d:	90                   	nop
/work/x86_os_my/lib/string.c:97 (discriminator 1)
c0003b0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003b11:	8d 50 01             	lea    0x1(%eax),%edx
c0003b14:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0003b17:	8b 55 0c             	mov    0xc(%ebp),%edx
c0003b1a:	8d 4a 01             	lea    0x1(%edx),%ecx
c0003b1d:	89 4d 0c             	mov    %ecx,0xc(%ebp)
c0003b20:	0f b6 12             	movzbl (%edx),%edx
c0003b23:	88 10                	mov    %dl,(%eax)
c0003b25:	0f b6 00             	movzbl (%eax),%eax
c0003b28:	84 c0                	test   %al,%al
c0003b2a:	75 e2                	jne    c0003b0e <strcat+0x47>
/work/x86_os_my/lib/string.c:98
   return dst_;
c0003b2c:	8b 45 08             	mov    0x8(%ebp),%eax
/work/x86_os_my/lib/string.c:99
}
c0003b2f:	c9                   	leave  
c0003b30:	c3                   	ret    

c0003b31 <strchrs>:
strchrs():
/work/x86_os_my/lib/string.c:102

/* 在字符串str中查找指定字符ch出现的次数 */
uint32_t strchrs(const char* str, uint8_t ch) {
c0003b31:	55                   	push   %ebp
c0003b32:	89 e5                	mov    %esp,%ebp
c0003b34:	83 ec 28             	sub    $0x28,%esp
c0003b37:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003b3a:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/lib/string.c:103
   ASSERT(str != NULL);
c0003b3d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003b41:	75 19                	jne    c0003b5c <strchrs+0x2b>
/work/x86_os_my/lib/string.c:103 (discriminator 1)
c0003b43:	68 36 bd 00 c0       	push   $0xc000bd36
c0003b48:	68 a4 bd 00 c0       	push   $0xc000bda4
c0003b4d:	6a 67                	push   $0x67
c0003b4f:	68 f5 bc 00 c0       	push   $0xc000bcf5
c0003b54:	e8 c8 e7 ff ff       	call   c0002321 <panic_spin>
c0003b59:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:104
   uint32_t ch_cnt = 0;
c0003b5c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/string.c:105
   const char* p = str;
c0003b63:	8b 45 08             	mov    0x8(%ebp),%eax
c0003b66:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/string.c:106
   while(*p != 0) {
c0003b69:	eb 19                	jmp    c0003b84 <strchrs+0x53>
/work/x86_os_my/lib/string.c:107
      if (*p == ch) {
c0003b6b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003b6e:	0f b6 00             	movzbl (%eax),%eax
c0003b71:	0f be d0             	movsbl %al,%edx
c0003b74:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0003b78:	39 c2                	cmp    %eax,%edx
c0003b7a:	75 04                	jne    c0003b80 <strchrs+0x4f>
/work/x86_os_my/lib/string.c:108
	 ch_cnt++;
c0003b7c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/lib/string.c:110
      }
      p++;
c0003b80:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/lib/string.c:106
/* 在字符串str中查找指定字符ch出现的次数 */
uint32_t strchrs(const char* str, uint8_t ch) {
   ASSERT(str != NULL);
   uint32_t ch_cnt = 0;
   const char* p = str;
   while(*p != 0) {
c0003b84:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003b87:	0f b6 00             	movzbl (%eax),%eax
c0003b8a:	84 c0                	test   %al,%al
c0003b8c:	75 dd                	jne    c0003b6b <strchrs+0x3a>
/work/x86_os_my/lib/string.c:112
      if (*p == ch) {
	 ch_cnt++;
      }
      p++;
   }
   return ch_cnt;
c0003b8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/lib/string.c:113
}
c0003b91:	c9                   	leave  
c0003b92:	c3                   	ret    

c0003b93 <idle>:
idle():
/work/x86_os_my/thread/thread.c:27

extern void switch_to(struct task_struct* cur, struct task_struct* next);
extern void init(void);

/* idle线程 */
static void idle(void* arg UNUSED) {
c0003b93:	55                   	push   %ebp
c0003b94:	89 e5                	mov    %esp,%ebp
c0003b96:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:29 (discriminator 1)
	while(1) {
		thread_block(TASK_BLOCKED);
c0003b99:	83 ec 0c             	sub    $0xc,%esp
c0003b9c:	6a 02                	push   $0x2
c0003b9e:	e8 aa 04 00 00       	call   c000404d <thread_block>
c0003ba3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:33 (discriminator 1)
		//CPU停机
		//唯一能唤醒处理器的就是外部中断
		//执行hlt时必须要保证目前处在开中断的情况下
		asm volatile ("sti; hlt" : : : "memory");
c0003ba6:	fb                   	sti    
c0003ba7:	f4                   	hlt    
/work/x86_os_my/thread/thread.c:34 (discriminator 1)
	}
c0003ba8:	eb ef                	jmp    c0003b99 <idle+0x6>

c0003baa <running_thread>:
running_thread():
/work/x86_os_my/thread/thread.c:41

/* 返回线程 PCB 地址。
 * 各个线程所用的 0 级栈都是在自己的 PCB 当中，
 * 取当前栈指针的高 20 位，就是当前运行线程的 PCB（PCB是在自然页的起始地址！）
 */
struct task_struct* running_thread() {
c0003baa:	55                   	push   %ebp
c0003bab:	89 e5                	mov    %esp,%ebp
c0003bad:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/thread/thread.c:43
	uint32_t esp;
	asm ("mov %%esp, %0" : "=g" (esp));	//esp寄存器的值，放入变量esp
c0003bb0:	89 e0                	mov    %esp,%eax
c0003bb2:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/thread/thread.c:44
	return (struct task_struct*)(esp & 0xfffff000);
c0003bb5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003bb8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
/work/x86_os_my/thread/thread.c:45
}
c0003bbd:	c9                   	leave  
c0003bbe:	c3                   	ret    

c0003bbf <kernel_thread>:
kernel_thread():
/work/x86_os_my/thread/thread.c:48

/* 由kernel_thread去执行function(func_arg) */
static void kernel_thread(thread_func* function, void* func_arg) {
c0003bbf:	55                   	push   %ebp
c0003bc0:	89 e5                	mov    %esp,%ebp
c0003bc2:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:54
	/* 线程的首次运行是由时钟中断处理函数调用任务调度器 schedule 完成的，
	 * 进入中断后处理器会自动关中断，
	 * 因此在执行 function 前要打开中断，否则 kernel_thread 中的 function 在关中断的情况下运行，
	 * 也就是时钟中断被屏蔽了，再也不会调度到新的线程，function 会独享处理器。
	 */
	intr_enable();
c0003bc5:	e8 4d dd ff ff       	call   c0001917 <intr_enable>
/work/x86_os_my/thread/thread.c:55
	function(func_arg); 
c0003bca:	83 ec 0c             	sub    $0xc,%esp
c0003bcd:	ff 75 0c             	pushl  0xc(%ebp)
c0003bd0:	8b 45 08             	mov    0x8(%ebp),%eax
c0003bd3:	ff d0                	call   *%eax
c0003bd5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:56
}
c0003bd8:	90                   	nop
c0003bd9:	c9                   	leave  
c0003bda:	c3                   	ret    

c0003bdb <allocate_pid>:
allocate_pid():
/work/x86_os_my/thread/thread.c:59

/* 分配pid */
static pid_t allocate_pid(void) {
c0003bdb:	55                   	push   %ebp
c0003bdc:	89 e5                	mov    %esp,%ebp
c0003bde:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:61
   static pid_t next_pid = 0;
   lock_acquire(&pid_lock);
c0003be1:	83 ec 0c             	sub    $0xc,%esp
c0003be4:	68 94 14 01 c0       	push   $0xc0011494
c0003be9:	e8 91 0b 00 00       	call   c000477f <lock_acquire>
c0003bee:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:62
   next_pid++;
c0003bf1:	0f b7 05 4c 08 01 c0 	movzwl 0xc001084c,%eax
c0003bf8:	83 c0 01             	add    $0x1,%eax
c0003bfb:	66 a3 4c 08 01 c0    	mov    %ax,0xc001084c
/work/x86_os_my/thread/thread.c:63
   lock_release(&pid_lock);
c0003c01:	83 ec 0c             	sub    $0xc,%esp
c0003c04:	68 94 14 01 c0       	push   $0xc0011494
c0003c09:	e8 e8 0b 00 00       	call   c00047f6 <lock_release>
c0003c0e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:64
   return next_pid;
c0003c11:	0f b7 05 4c 08 01 c0 	movzwl 0xc001084c,%eax
/work/x86_os_my/thread/thread.c:65
}
c0003c18:	c9                   	leave  
c0003c19:	c3                   	ret    

c0003c1a <fork_pid>:
fork_pid():
/work/x86_os_my/thread/thread.c:68

/* fork进程时为其分配pid，只是再封装一次 allocate_pid */
pid_t fork_pid(void) {
c0003c1a:	55                   	push   %ebp
c0003c1b:	89 e5                	mov    %esp,%ebp
c0003c1d:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:69
	return allocate_pid();
c0003c20:	e8 b6 ff ff ff       	call   c0003bdb <allocate_pid>
/work/x86_os_my/thread/thread.c:70
}
c0003c25:	c9                   	leave  
c0003c26:	c3                   	ret    

c0003c27 <thread_create>:
thread_create():
/work/x86_os_my/thread/thread.c:73

/* 初始化线程栈结构体 struct thread_stack */
void thread_create(struct task_struct* pthread, thread_func function, void* func_arg) {
c0003c27:	55                   	push   %ebp
c0003c28:	89 e5                	mov    %esp,%ebp
c0003c2a:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/thread/thread.c:77
	/* 先预留中断使用栈的空间 
	 *（1）将来线程进入中断后，位于 kernel.S 中的中断代码会通过此栈来保存上下文。
	 *（2）将来实现用户进程时，会将用户进程的初始信息放在中断栈中。*/
	pthread->self_kstack -= sizeof(struct intr_stack);
c0003c2d:	8b 45 08             	mov    0x8(%ebp),%eax
c0003c30:	8b 00                	mov    (%eax),%eax
c0003c32:	8d 90 d0 fe ff ff    	lea    -0x130(%eax),%edx
c0003c38:	8b 45 08             	mov    0x8(%ebp),%eax
c0003c3b:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/thread/thread.c:80

	/* 再留出线程栈空间（unused_retaddr 所在的栈）*/
	pthread->self_kstack -= sizeof(struct thread_stack);
c0003c3d:	8b 45 08             	mov    0x8(%ebp),%eax
c0003c40:	8b 00                	mov    (%eax),%eax
c0003c42:	8d 50 80             	lea    -0x80(%eax),%edx
c0003c45:	8b 45 08             	mov    0x8(%ebp),%eax
c0003c48:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/thread/thread.c:81
	struct thread_stack* kthread_stack = (struct thread_stack*)pthread->self_kstack;
c0003c4a:	8b 45 08             	mov    0x8(%ebp),%eax
c0003c4d:	8b 00                	mov    (%eax),%eax
c0003c4f:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/thread/thread.c:89
	 * kernel_thread 并不是通过 call 指令调用的，而是通过 ret 来执行的，
	 * 因此无法按照正常的函数调用形式传递 kernel_thread 所需要的参数，
	 * 这样调用是不行的： kernel_thread(function, func_arg)，
	 * 只能将参数放在 kernel_thread 所用的栈中，即处理器进入 kernel_thread 函数体时，
	 * 栈顶为返回地址，栈顶+4 为参数function，栈顶+8 为参数func_arg */
	kthread_stack->eip = kernel_thread;
c0003c52:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003c55:	c7 40 10 bf 3b 00 c0 	movl   $0xc0003bbf,0x10(%eax)
/work/x86_os_my/thread/thread.c:90
	kthread_stack->function = function;
c0003c5c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003c5f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0003c62:	89 50 18             	mov    %edx,0x18(%eax)
/work/x86_os_my/thread/thread.c:91
	kthread_stack->func_arg = func_arg;
c0003c65:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003c68:	8b 55 10             	mov    0x10(%ebp),%edx
c0003c6b:	89 50 1c             	mov    %edx,0x1c(%eax)
/work/x86_os_my/thread/thread.c:92
	kthread_stack->ebp = kthread_stack->ebx = kthread_stack->esi = kthread_stack->edi = 0;
c0003c6e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003c71:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0003c78:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003c7b:	8b 50 08             	mov    0x8(%eax),%edx
c0003c7e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003c81:	89 50 0c             	mov    %edx,0xc(%eax)
c0003c84:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003c87:	8b 50 0c             	mov    0xc(%eax),%edx
c0003c8a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003c8d:	89 50 04             	mov    %edx,0x4(%eax)
c0003c90:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003c93:	8b 50 04             	mov    0x4(%eax),%edx
c0003c96:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003c99:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/thread/thread.c:93
}
c0003c9b:	90                   	nop
c0003c9c:	c9                   	leave  
c0003c9d:	c3                   	ret    

c0003c9e <init_thread>:
init_thread():
/work/x86_os_my/thread/thread.c:96

/* 初始化线程PCB结构体 struct task_struct */
void init_thread(struct task_struct* pthread, char* name, int prio) {
c0003c9e:	55                   	push   %ebp
c0003c9f:	89 e5                	mov    %esp,%ebp
c0003ca1:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:97
	memset(pthread, 0, sizeof(*pthread));	//清空PCB
c0003ca4:	83 ec 04             	sub    $0x4,%esp
c0003ca7:	68 18 01 00 00       	push   $0x118
c0003cac:	6a 00                	push   $0x0
c0003cae:	ff 75 08             	pushl  0x8(%ebp)
c0003cb1:	e8 0d fb ff ff       	call   c00037c3 <memset>
c0003cb6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:98
	pthread->pid = allocate_pid();
c0003cb9:	e8 1d ff ff ff       	call   c0003bdb <allocate_pid>
c0003cbe:	89 c2                	mov    %eax,%edx
c0003cc0:	8b 45 08             	mov    0x8(%ebp),%eax
c0003cc3:	66 89 50 04          	mov    %dx,0x4(%eax)
/work/x86_os_my/thread/thread.c:99
	strcpy(pthread->name, name);
c0003cc7:	8b 45 08             	mov    0x8(%ebp),%eax
c0003cca:	83 c0 0c             	add    $0xc,%eax
c0003ccd:	83 ec 08             	sub    $0x8,%esp
c0003cd0:	ff 75 0c             	pushl  0xc(%ebp)
c0003cd3:	50                   	push   %eax
c0003cd4:	e8 1f fc ff ff       	call   c00038f8 <strcpy>
c0003cd9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:101

	if (pthread == g_main_thread) {
c0003cdc:	a1 90 14 01 c0       	mov    0xc0011490,%eax
c0003ce1:	39 45 08             	cmp    %eax,0x8(%ebp)
c0003ce4:	75 0c                	jne    c0003cf2 <init_thread+0x54>
/work/x86_os_my/thread/thread.c:103
		/* 由于把main函数也封装成一个线程,并且它一直是运行的,故将其直接设为TASK_RUNNING */
		pthread->status = TASK_RUNNING;
c0003ce6:	8b 45 08             	mov    0x8(%ebp),%eax
c0003ce9:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0003cf0:	eb 0a                	jmp    c0003cfc <init_thread+0x5e>
/work/x86_os_my/thread/thread.c:105
	} else {
		pthread->status = TASK_READY;
c0003cf2:	8b 45 08             	mov    0x8(%ebp),%eax
c0003cf5:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/thread/thread.c:111
	}

	/* self_kstack是线程自己在内核态下使用的栈顶地址 
	 * 线程自己在 0 特权级下所用的栈，在线程创建之初，
	 * 它被初始化为线程 PCB 的最顶端，即(uint32_t)pthread + PG_SIZE。*/
	pthread->self_kstack = (uint32_t*)((uint32_t)pthread + PG_SIZE);
c0003cfc:	8b 45 08             	mov    0x8(%ebp),%eax
c0003cff:	05 00 10 00 00       	add    $0x1000,%eax
c0003d04:	89 c2                	mov    %eax,%edx
c0003d06:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d09:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/thread/thread.c:112
	pthread->priority = prio;
c0003d0b:	8b 45 10             	mov    0x10(%ebp),%eax
c0003d0e:	89 c2                	mov    %eax,%edx
c0003d10:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d13:	88 50 1c             	mov    %dl,0x1c(%eax)
/work/x86_os_my/thread/thread.c:113
	pthread->ticks = prio;
c0003d16:	8b 45 10             	mov    0x10(%ebp),%eax
c0003d19:	89 c2                	mov    %eax,%edx
c0003d1b:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d1e:	88 50 1d             	mov    %dl,0x1d(%eax)
/work/x86_os_my/thread/thread.c:114
	pthread->elapsed_ticks = 0;
c0003d21:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d24:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
/work/x86_os_my/thread/thread.c:115
	pthread->pgdir = NULL;
c0003d2b:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d2e:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
/work/x86_os_my/thread/thread.c:118

	/* 预留标准输入输出 */
	pthread->fd_table[0] = 0;
c0003d35:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d38:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
/work/x86_os_my/thread/thread.c:119
	pthread->fd_table[1] = 1;
c0003d3f:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d42:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
/work/x86_os_my/thread/thread.c:120
	pthread->fd_table[2] = 2;
c0003d49:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d4c:	c7 40 2c 02 00 00 00 	movl   $0x2,0x2c(%eax)
/work/x86_os_my/thread/thread.c:122
	/* 其余的全置为-1 */
	uint8_t fd_idx = 3;
c0003d53:	c6 45 f7 03          	movb   $0x3,-0x9(%ebp)
/work/x86_os_my/thread/thread.c:123
	while (fd_idx < MAX_FILES_OPEN_PER_PROC) {
c0003d57:	eb 1c                	jmp    c0003d75 <init_thread+0xd7>
/work/x86_os_my/thread/thread.c:124
		pthread->fd_table[fd_idx] = -1;
c0003d59:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c0003d5d:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d60:	83 c2 08             	add    $0x8,%edx
c0003d63:	c7 44 90 04 ff ff ff 	movl   $0xffffffff,0x4(%eax,%edx,4)
c0003d6a:	ff 
/work/x86_os_my/thread/thread.c:125
		fd_idx++;
c0003d6b:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0003d6f:	83 c0 01             	add    $0x1,%eax
c0003d72:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/thread/thread.c:123
	pthread->fd_table[0] = 0;
	pthread->fd_table[1] = 1;
	pthread->fd_table[2] = 2;
	/* 其余的全置为-1 */
	uint8_t fd_idx = 3;
	while (fd_idx < MAX_FILES_OPEN_PER_PROC) {
c0003d75:	80 7d f7 07          	cmpb   $0x7,-0x9(%ebp)
c0003d79:	76 de                	jbe    c0003d59 <init_thread+0xbb>
/work/x86_os_my/thread/thread.c:128
		pthread->fd_table[fd_idx] = -1;
		fd_idx++;
	}

	pthread->cwd_inode_nr = 0;			// 以根目录做为默认工作路径
c0003d7b:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d7e:	c7 80 0c 01 00 00 00 	movl   $0x0,0x10c(%eax)
c0003d85:	00 00 00 
/work/x86_os_my/thread/thread.c:129
	pthread->parent_pid = -1;			// -1表示没有父进程
c0003d88:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d8b:	66 c7 80 10 01 00 00 	movw   $0xffff,0x110(%eax)
c0003d92:	ff ff 
/work/x86_os_my/thread/thread.c:130
	pthread->stack_magic = 0x19870916;	// 自定义的魔数
c0003d94:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d97:	c7 80 14 01 00 00 16 	movl   $0x19870916,0x114(%eax)
c0003d9e:	09 87 19 
/work/x86_os_my/thread/thread.c:131
}
c0003da1:	90                   	nop
c0003da2:	c9                   	leave  
c0003da3:	c3                   	ret    

c0003da4 <thread_start>:
thread_start():
/work/x86_os_my/thread/thread.c:134

/* 创建线程 */
struct task_struct* thread_start(char* name, int prio, thread_func function, void* func_arg) {
c0003da4:	55                   	push   %ebp
c0003da5:	89 e5                	mov    %esp,%ebp
c0003da7:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:136
	/* pcb都位于内核空间,包括用户进程的pcb也是在内核空间 */
	struct task_struct* thread = get_kernel_pages(1);
c0003daa:	83 ec 0c             	sub    $0xc,%esp
c0003dad:	6a 01                	push   $0x1
c0003daf:	e8 15 ec ff ff       	call   c00029c9 <get_kernel_pages>
c0003db4:	83 c4 10             	add    $0x10,%esp
c0003db7:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:138

	init_thread(thread, name, prio);			//初始化线程PCB
c0003dba:	83 ec 04             	sub    $0x4,%esp
c0003dbd:	ff 75 0c             	pushl  0xc(%ebp)
c0003dc0:	ff 75 08             	pushl  0x8(%ebp)
c0003dc3:	ff 75 f4             	pushl  -0xc(%ebp)
c0003dc6:	e8 d3 fe ff ff       	call   c0003c9e <init_thread>
c0003dcb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:139
	thread_create(thread, function, func_arg);	//初始化线程栈结构体
c0003dce:	83 ec 04             	sub    $0x4,%esp
c0003dd1:	ff 75 14             	pushl  0x14(%ebp)
c0003dd4:	ff 75 10             	pushl  0x10(%ebp)
c0003dd7:	ff 75 f4             	pushl  -0xc(%ebp)
c0003dda:	e8 48 fe ff ff       	call   c0003c27 <thread_create>
c0003ddf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:141
	
	ASSERT(!elem_find(&thread_ready_list, &thread->general_tag));	// 确保之前不在队列中
c0003de2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003de5:	83 c0 44             	add    $0x44,%eax
c0003de8:	83 ec 08             	sub    $0x8,%esp
c0003deb:	50                   	push   %eax
c0003dec:	68 6c 14 01 c0       	push   $0xc001146c
c0003df1:	e8 d1 05 00 00       	call   c00043c7 <elem_find>
c0003df6:	83 c4 10             	add    $0x10,%esp
c0003df9:	85 c0                	test   %eax,%eax
c0003dfb:	74 1c                	je     c0003e19 <thread_start+0x75>
/work/x86_os_my/thread/thread.c:141 (discriminator 1)
c0003dfd:	68 ac bd 00 c0       	push   $0xc000bdac
c0003e02:	68 38 c0 00 c0       	push   $0xc000c038
c0003e07:	68 8d 00 00 00       	push   $0x8d
c0003e0c:	68 e1 bd 00 c0       	push   $0xc000bde1
c0003e11:	e8 0b e5 ff ff       	call   c0002321 <panic_spin>
c0003e16:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:142
	list_append(&thread_ready_list, &thread->general_tag);			// 加入就绪线程队列
c0003e19:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003e1c:	83 c0 44             	add    $0x44,%eax
c0003e1f:	83 ec 08             	sub    $0x8,%esp
c0003e22:	50                   	push   %eax
c0003e23:	68 6c 14 01 c0       	push   $0xc001146c
c0003e28:	e8 20 05 00 00       	call   c000434d <list_append>
c0003e2d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:144

	ASSERT(!elem_find(&thread_all_list, &thread->all_list_tag));
c0003e30:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003e33:	83 c0 4c             	add    $0x4c,%eax
c0003e36:	83 ec 08             	sub    $0x8,%esp
c0003e39:	50                   	push   %eax
c0003e3a:	68 7c 14 01 c0       	push   $0xc001147c
c0003e3f:	e8 83 05 00 00       	call   c00043c7 <elem_find>
c0003e44:	83 c4 10             	add    $0x10,%esp
c0003e47:	85 c0                	test   %eax,%eax
c0003e49:	74 1c                	je     c0003e67 <thread_start+0xc3>
/work/x86_os_my/thread/thread.c:144 (discriminator 1)
c0003e4b:	68 f4 bd 00 c0       	push   $0xc000bdf4
c0003e50:	68 38 c0 00 c0       	push   $0xc000c038
c0003e55:	68 90 00 00 00       	push   $0x90
c0003e5a:	68 e1 bd 00 c0       	push   $0xc000bde1
c0003e5f:	e8 bd e4 ff ff       	call   c0002321 <panic_spin>
c0003e64:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:145
	list_append(&thread_all_list, &thread->all_list_tag);			// 加入全部线程队列
c0003e67:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003e6a:	83 c0 4c             	add    $0x4c,%eax
c0003e6d:	83 ec 08             	sub    $0x8,%esp
c0003e70:	50                   	push   %eax
c0003e71:	68 7c 14 01 c0       	push   $0xc001147c
c0003e76:	e8 d2 04 00 00       	call   c000434d <list_append>
c0003e7b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:161
	 * 在执行 ret 后，esp 指向的数值被弹岀到 eip。
	 * 处理器会去执行 kernel_thread 函数。
	 * 在执行 kernel_thread 时，处理器以为栈顶是返回地址，其实只是一个假的占位置的变量 unused_retaddr！
	 * 接着会调用函数 function(func_arg) */
	//asm volatile ("movl %0, %%esp; pop %%ebp; pop %%ebx; pop %%edi; pop %%esi; ret" : : "g" (thread->self_kstack) : "memory");
	return thread;
c0003e7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/thread/thread.c:162
}
c0003e81:	c9                   	leave  
c0003e82:	c3                   	ret    

c0003e83 <make_main_thread>:
make_main_thread():
/work/x86_os_my/thread/thread.c:166


/* 将kernel中的main函数完善为主线程 */
static void make_main_thread(void) {
c0003e83:	55                   	push   %ebp
c0003e84:	89 e5                	mov    %esp,%ebp
c0003e86:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:171
	/* 因为main线程早已运行,咱们在loader.S中进入内核时的mov esp, 0xc009f000设置了栈顶，也预留了pcb, 地址为0xc009e000
	 * 主线程不需要再为PCB申请页，只需要通过 init_thread 填充PCB成员：名称和优先级等。
	 * 也不需要再通过 thread_create 构造它的线程栈。
	 */
	g_main_thread = running_thread();	//用栈指针的高20位，当做当前线程的PCB
c0003e89:	e8 1c fd ff ff       	call   c0003baa <running_thread>
c0003e8e:	a3 90 14 01 c0       	mov    %eax,0xc0011490
/work/x86_os_my/thread/thread.c:172
	init_thread(g_main_thread, "main", 31);
c0003e93:	a1 90 14 01 c0       	mov    0xc0011490,%eax
c0003e98:	83 ec 04             	sub    $0x4,%esp
c0003e9b:	6a 1f                	push   $0x1f
c0003e9d:	68 28 be 00 c0       	push   $0xc000be28
c0003ea2:	50                   	push   %eax
c0003ea3:	e8 f6 fd ff ff       	call   c0003c9e <init_thread>
c0003ea8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:176

	/* main函数是当前线程,当前线程不在thread_ready_list中,
	 * 所以只将其加在thread_all_list中. */
	ASSERT(!elem_find(&thread_all_list, &g_main_thread->all_list_tag));
c0003eab:	a1 90 14 01 c0       	mov    0xc0011490,%eax
c0003eb0:	83 c0 4c             	add    $0x4c,%eax
c0003eb3:	83 ec 08             	sub    $0x8,%esp
c0003eb6:	50                   	push   %eax
c0003eb7:	68 7c 14 01 c0       	push   $0xc001147c
c0003ebc:	e8 06 05 00 00       	call   c00043c7 <elem_find>
c0003ec1:	83 c4 10             	add    $0x10,%esp
c0003ec4:	85 c0                	test   %eax,%eax
c0003ec6:	74 1c                	je     c0003ee4 <make_main_thread+0x61>
/work/x86_os_my/thread/thread.c:176 (discriminator 1)
c0003ec8:	68 30 be 00 c0       	push   $0xc000be30
c0003ecd:	68 48 c0 00 c0       	push   $0xc000c048
c0003ed2:	68 b0 00 00 00       	push   $0xb0
c0003ed7:	68 e1 bd 00 c0       	push   $0xc000bde1
c0003edc:	e8 40 e4 ff ff       	call   c0002321 <panic_spin>
c0003ee1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:177
	list_append(&thread_all_list, &g_main_thread->all_list_tag);
c0003ee4:	a1 90 14 01 c0       	mov    0xc0011490,%eax
c0003ee9:	83 c0 4c             	add    $0x4c,%eax
c0003eec:	83 ec 08             	sub    $0x8,%esp
c0003eef:	50                   	push   %eax
c0003ef0:	68 7c 14 01 c0       	push   $0xc001147c
c0003ef5:	e8 53 04 00 00       	call   c000434d <list_append>
c0003efa:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:178
}
c0003efd:	90                   	nop
c0003efe:	c9                   	leave  
c0003eff:	c3                   	ret    

c0003f00 <schedule>:
schedule():
/work/x86_os_my/thread/thread.c:188
（2）调度器 schedule。
（3）任务切换函数 switch_to。
*/
/* 实现任务调度 */
void schedule()
{
c0003f00:	55                   	push   %ebp
c0003f01:	89 e5                	mov    %esp,%ebp
c0003f03:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:189
	ASSERT(intr_get_status() == INTR_OFF);
c0003f06:	e8 7c da ff ff       	call   c0001987 <intr_get_status>
c0003f0b:	85 c0                	test   %eax,%eax
c0003f0d:	74 1c                	je     c0003f2b <schedule+0x2b>
/work/x86_os_my/thread/thread.c:189 (discriminator 1)
c0003f0f:	68 6b be 00 c0       	push   $0xc000be6b
c0003f14:	68 5c c0 00 c0       	push   $0xc000c05c
c0003f19:	68 bd 00 00 00       	push   $0xbd
c0003f1e:	68 e1 bd 00 c0       	push   $0xc000bde1
c0003f23:	e8 f9 e3 ff ff       	call   c0002321 <panic_spin>
c0003f28:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:192

	/* 换下 */
	struct task_struct* cur = running_thread(); 
c0003f2b:	e8 7a fc ff ff       	call   c0003baa <running_thread>
c0003f30:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:193
	if (cur->status == TASK_RUNNING) { // 若此线程只是cpu时间片到了,将其加入到就绪队列尾
c0003f33:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003f36:	8b 40 08             	mov    0x8(%eax),%eax
c0003f39:	85 c0                	test   %eax,%eax
c0003f3b:	75 65                	jne    c0003fa2 <schedule+0xa2>
/work/x86_os_my/thread/thread.c:194
		ASSERT(!elem_find(&thread_ready_list, &cur->general_tag));
c0003f3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003f40:	83 c0 44             	add    $0x44,%eax
c0003f43:	83 ec 08             	sub    $0x8,%esp
c0003f46:	50                   	push   %eax
c0003f47:	68 6c 14 01 c0       	push   $0xc001146c
c0003f4c:	e8 76 04 00 00       	call   c00043c7 <elem_find>
c0003f51:	83 c4 10             	add    $0x10,%esp
c0003f54:	85 c0                	test   %eax,%eax
c0003f56:	74 1c                	je     c0003f74 <schedule+0x74>
/work/x86_os_my/thread/thread.c:194 (discriminator 1)
c0003f58:	68 8c be 00 c0       	push   $0xc000be8c
c0003f5d:	68 5c c0 00 c0       	push   $0xc000c05c
c0003f62:	68 c2 00 00 00       	push   $0xc2
c0003f67:	68 e1 bd 00 c0       	push   $0xc000bde1
c0003f6c:	e8 b0 e3 ff ff       	call   c0002321 <panic_spin>
c0003f71:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:195
		list_append(&thread_ready_list, &cur->general_tag);
c0003f74:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003f77:	83 c0 44             	add    $0x44,%eax
c0003f7a:	83 ec 08             	sub    $0x8,%esp
c0003f7d:	50                   	push   %eax
c0003f7e:	68 6c 14 01 c0       	push   $0xc001146c
c0003f83:	e8 c5 03 00 00       	call   c000434d <list_append>
c0003f88:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:196
		cur->ticks = cur->priority;     // 重新将当前线程的ticks再重置为其priority;
c0003f8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003f8e:	0f b6 50 1c          	movzbl 0x1c(%eax),%edx
c0003f92:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003f95:	88 50 1d             	mov    %dl,0x1d(%eax)
/work/x86_os_my/thread/thread.c:197
		cur->status = TASK_READY;
c0003f98:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003f9b:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/thread/thread.c:204
		/* 若此线程需要某事件发生后才能继续上cpu运行,
		不需要将其加入队列,因为当前线程不在就绪队列中。*/
	}

	/* 如果就绪队列中没有可运行的任务,就唤醒idle */
	if (list_empty(&thread_ready_list)) {
c0003fa2:	83 ec 0c             	sub    $0xc,%esp
c0003fa5:	68 6c 14 01 c0       	push   $0xc001146c
c0003faa:	e8 e5 04 00 00       	call   c0004494 <list_empty>
c0003faf:	83 c4 10             	add    $0x10,%esp
c0003fb2:	85 c0                	test   %eax,%eax
c0003fb4:	74 11                	je     c0003fc7 <schedule+0xc7>
/work/x86_os_my/thread/thread.c:205
		thread_unblock(idle_thread);
c0003fb6:	a1 8c 14 01 c0       	mov    0xc001148c,%eax
c0003fbb:	83 ec 0c             	sub    $0xc,%esp
c0003fbe:	50                   	push   %eax
c0003fbf:	e8 ec 00 00 00       	call   c00040b0 <thread_unblock>
c0003fc4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:209
	}
	
	/* 换上 */
	ASSERT(!list_empty(&thread_ready_list));
c0003fc7:	83 ec 0c             	sub    $0xc,%esp
c0003fca:	68 6c 14 01 c0       	push   $0xc001146c
c0003fcf:	e8 c0 04 00 00       	call   c0004494 <list_empty>
c0003fd4:	83 c4 10             	add    $0x10,%esp
c0003fd7:	85 c0                	test   %eax,%eax
c0003fd9:	74 1c                	je     c0003ff7 <schedule+0xf7>
/work/x86_os_my/thread/thread.c:209 (discriminator 1)
c0003fdb:	68 c0 be 00 c0       	push   $0xc000bec0
c0003fe0:	68 5c c0 00 c0       	push   $0xc000c05c
c0003fe5:	68 d1 00 00 00       	push   $0xd1
c0003fea:	68 e1 bd 00 c0       	push   $0xc000bde1
c0003fef:	e8 2d e3 ff ff       	call   c0002321 <panic_spin>
c0003ff4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:210
	g_thread_tag = NULL;	  // g_thread_tag清空
c0003ff7:	c7 05 48 08 01 c0 00 	movl   $0x0,0xc0010848
c0003ffe:	00 00 00 
/work/x86_os_my/thread/thread.c:212
	/* 将thread_ready_list队列中的第一个就绪线程弹出,准备将其调度上cpu. */
	g_thread_tag = list_pop(&thread_ready_list);   
c0004001:	83 ec 0c             	sub    $0xc,%esp
c0004004:	68 6c 14 01 c0       	push   $0xc001146c
c0004009:	e8 97 03 00 00       	call   c00043a5 <list_pop>
c000400e:	83 c4 10             	add    $0x10,%esp
c0004011:	a3 48 08 01 c0       	mov    %eax,0xc0010848
/work/x86_os_my/thread/thread.c:213
	struct task_struct* next = elem2entry(struct task_struct, general_tag, g_thread_tag);
c0004016:	a1 48 08 01 c0       	mov    0xc0010848,%eax
c000401b:	83 e8 44             	sub    $0x44,%eax
c000401e:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/thread/thread.c:214
	next->status = TASK_RUNNING;
c0004021:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0004024:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
/work/x86_os_my/thread/thread.c:218
	
	/* 1.激活线程或进程的页表,【更新CR3寄存器】
	 * 2.用户进程，更新tss中的esp0为进程的特权级0的栈 */
	process_activate(next);
c000402b:	83 ec 0c             	sub    $0xc,%esp
c000402e:	ff 75 f0             	pushl  -0x10(%ebp)
c0004031:	e8 0c 11 00 00       	call   c0005142 <process_activate>
c0004036:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:220

	switch_to(cur, next);
c0004039:	83 ec 08             	sub    $0x8,%esp
c000403c:	ff 75 f0             	pushl  -0x10(%ebp)
c000403f:	ff 75 f4             	pushl  -0xc(%ebp)
c0004042:	e8 69 04 00 00       	call   c00044b0 <switch_to>
c0004047:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:221
}
c000404a:	90                   	nop
c000404b:	c9                   	leave  
c000404c:	c3                   	ret    

c000404d <thread_block>:
thread_block():
/work/x86_os_my/thread/thread.c:224

/* 当前线程将自己阻塞,标志其状态为stat. */
void thread_block(enum task_status stat) {
c000404d:	55                   	push   %ebp
c000404e:	89 e5                	mov    %esp,%ebp
c0004050:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:226
	/* stat取值为TASK_BLOCKED,TASK_WAITING,TASK_HANGING,也就是只有这三种状态才不会被调度*/
	ASSERT(((stat == TASK_BLOCKED) || (stat == TASK_WAITING) || (stat == TASK_HANGING)));
c0004053:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c0004057:	74 28                	je     c0004081 <thread_block+0x34>
/work/x86_os_my/thread/thread.c:226 (discriminator 1)
c0004059:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
c000405d:	74 22                	je     c0004081 <thread_block+0x34>
/work/x86_os_my/thread/thread.c:226 (discriminator 2)
c000405f:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
c0004063:	74 1c                	je     c0004081 <thread_block+0x34>
/work/x86_os_my/thread/thread.c:226 (discriminator 3)
c0004065:	68 e0 be 00 c0       	push   $0xc000bee0
c000406a:	68 68 c0 00 c0       	push   $0xc000c068
c000406f:	68 e2 00 00 00       	push   $0xe2
c0004074:	68 e1 bd 00 c0       	push   $0xc000bde1
c0004079:	e8 a3 e2 ff ff       	call   c0002321 <panic_spin>
c000407e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:227
	enum intr_status old_status = intr_disable();
c0004081:	e8 ba d8 ff ff       	call   c0001940 <intr_disable>
c0004086:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:229
	
	struct task_struct* cur_thread = running_thread();
c0004089:	e8 1c fb ff ff       	call   c0003baa <running_thread>
c000408e:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/thread/thread.c:230
	cur_thread->status = stat;
c0004091:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0004094:	8b 55 08             	mov    0x8(%ebp),%edx
c0004097:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/thread/thread.c:231
	schedule();
c000409a:	e8 61 fe ff ff       	call   c0003f00 <schedule>
/work/x86_os_my/thread/thread.c:234
	
	/* 待当前线程被解除阻塞后才继续运行下面的intr_set_status */
	intr_set_status(old_status);
c000409f:	83 ec 0c             	sub    $0xc,%esp
c00040a2:	ff 75 f4             	pushl  -0xc(%ebp)
c00040a5:	e8 bf d8 ff ff       	call   c0001969 <intr_set_status>
c00040aa:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:235
}
c00040ad:	90                   	nop
c00040ae:	c9                   	leave  
c00040af:	c3                   	ret    

c00040b0 <thread_unblock>:
thread_unblock():
/work/x86_os_my/thread/thread.c:238

/* 将线程pthread解除阻塞 */
void thread_unblock(struct task_struct* pthread) {
c00040b0:	55                   	push   %ebp
c00040b1:	89 e5                	mov    %esp,%ebp
c00040b3:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:239
	enum intr_status old_status = intr_disable();
c00040b6:	e8 85 d8 ff ff       	call   c0001940 <intr_disable>
c00040bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:240
	ASSERT(((pthread->status == TASK_BLOCKED) || (pthread->status == TASK_WAITING) || (pthread->status == TASK_HANGING)));
c00040be:	8b 45 08             	mov    0x8(%ebp),%eax
c00040c1:	8b 40 08             	mov    0x8(%eax),%eax
c00040c4:	83 f8 02             	cmp    $0x2,%eax
c00040c7:	74 32                	je     c00040fb <thread_unblock+0x4b>
/work/x86_os_my/thread/thread.c:240 (discriminator 1)
c00040c9:	8b 45 08             	mov    0x8(%ebp),%eax
c00040cc:	8b 40 08             	mov    0x8(%eax),%eax
c00040cf:	83 f8 03             	cmp    $0x3,%eax
c00040d2:	74 27                	je     c00040fb <thread_unblock+0x4b>
/work/x86_os_my/thread/thread.c:240 (discriminator 2)
c00040d4:	8b 45 08             	mov    0x8(%ebp),%eax
c00040d7:	8b 40 08             	mov    0x8(%eax),%eax
c00040da:	83 f8 04             	cmp    $0x4,%eax
c00040dd:	74 1c                	je     c00040fb <thread_unblock+0x4b>
/work/x86_os_my/thread/thread.c:240 (discriminator 3)
c00040df:	68 30 bf 00 c0       	push   $0xc000bf30
c00040e4:	68 78 c0 00 c0       	push   $0xc000c078
c00040e9:	68 f0 00 00 00       	push   $0xf0
c00040ee:	68 e1 bd 00 c0       	push   $0xc000bde1
c00040f3:	e8 29 e2 ff ff       	call   c0002321 <panic_spin>
c00040f8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:242
	
	if (pthread->status != TASK_READY) {
c00040fb:	8b 45 08             	mov    0x8(%ebp),%eax
c00040fe:	8b 40 08             	mov    0x8(%eax),%eax
c0004101:	83 f8 01             	cmp    $0x1,%eax
c0004104:	0f 84 8f 00 00 00    	je     c0004199 <thread_unblock+0xe9>
/work/x86_os_my/thread/thread.c:243
		ASSERT(!elem_find(&thread_ready_list, &pthread->general_tag));
c000410a:	8b 45 08             	mov    0x8(%ebp),%eax
c000410d:	83 c0 44             	add    $0x44,%eax
c0004110:	83 ec 08             	sub    $0x8,%esp
c0004113:	50                   	push   %eax
c0004114:	68 6c 14 01 c0       	push   $0xc001146c
c0004119:	e8 a9 02 00 00       	call   c00043c7 <elem_find>
c000411e:	83 c4 10             	add    $0x10,%esp
c0004121:	85 c0                	test   %eax,%eax
c0004123:	74 1c                	je     c0004141 <thread_unblock+0x91>
/work/x86_os_my/thread/thread.c:243 (discriminator 1)
c0004125:	68 a0 bf 00 c0       	push   $0xc000bfa0
c000412a:	68 78 c0 00 c0       	push   $0xc000c078
c000412f:	68 f3 00 00 00       	push   $0xf3
c0004134:	68 e1 bd 00 c0       	push   $0xc000bde1
c0004139:	e8 e3 e1 ff ff       	call   c0002321 <panic_spin>
c000413e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:244
		if (elem_find(&thread_ready_list, &pthread->general_tag)) {
c0004141:	8b 45 08             	mov    0x8(%ebp),%eax
c0004144:	83 c0 44             	add    $0x44,%eax
c0004147:	83 ec 08             	sub    $0x8,%esp
c000414a:	50                   	push   %eax
c000414b:	68 6c 14 01 c0       	push   $0xc001146c
c0004150:	e8 72 02 00 00       	call   c00043c7 <elem_find>
c0004155:	83 c4 10             	add    $0x10,%esp
c0004158:	85 c0                	test   %eax,%eax
c000415a:	74 1c                	je     c0004178 <thread_unblock+0xc8>
/work/x86_os_my/thread/thread.c:245
			PANIC("thread_unblock: blocked thread in ready_list\n");
c000415c:	68 d8 bf 00 c0       	push   $0xc000bfd8
c0004161:	68 78 c0 00 c0       	push   $0xc000c078
c0004166:	68 f5 00 00 00       	push   $0xf5
c000416b:	68 e1 bd 00 c0       	push   $0xc000bde1
c0004170:	e8 ac e1 ff ff       	call   c0002321 <panic_spin>
c0004175:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:247
		}
		list_push(&thread_ready_list, &pthread->general_tag);	// 放到队列的最前面,使其尽快得到调度
c0004178:	8b 45 08             	mov    0x8(%ebp),%eax
c000417b:	83 c0 44             	add    $0x44,%eax
c000417e:	83 ec 08             	sub    $0x8,%esp
c0004181:	50                   	push   %eax
c0004182:	68 6c 14 01 c0       	push   $0xc001146c
c0004187:	e8 a3 01 00 00       	call   c000432f <list_push>
c000418c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:248
		pthread->status = TASK_READY;
c000418f:	8b 45 08             	mov    0x8(%ebp),%eax
c0004192:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/thread/thread.c:251
	}
	
	intr_set_status(old_status);
c0004199:	83 ec 0c             	sub    $0xc,%esp
c000419c:	ff 75 f4             	pushl  -0xc(%ebp)
c000419f:	e8 c5 d7 ff ff       	call   c0001969 <intr_set_status>
c00041a4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:252
}
c00041a7:	90                   	nop
c00041a8:	c9                   	leave  
c00041a9:	c3                   	ret    

c00041aa <thread_yield>:
thread_yield():
/work/x86_os_my/thread/thread.c:255

/* 主动让出cpu，换其它线程运行，但状态仍是ready */
void thread_yield(void) {
c00041aa:	55                   	push   %ebp
c00041ab:	89 e5                	mov    %esp,%ebp
c00041ad:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:256
	struct task_struct* cur = running_thread();
c00041b0:	e8 f5 f9 ff ff       	call   c0003baa <running_thread>
c00041b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:257
	enum intr_status old_status = intr_disable();
c00041b8:	e8 83 d7 ff ff       	call   c0001940 <intr_disable>
c00041bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/thread/thread.c:258
	ASSERT(!elem_find(&thread_ready_list, &cur->general_tag));
c00041c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00041c3:	83 c0 44             	add    $0x44,%eax
c00041c6:	83 ec 08             	sub    $0x8,%esp
c00041c9:	50                   	push   %eax
c00041ca:	68 6c 14 01 c0       	push   $0xc001146c
c00041cf:	e8 f3 01 00 00       	call   c00043c7 <elem_find>
c00041d4:	83 c4 10             	add    $0x10,%esp
c00041d7:	85 c0                	test   %eax,%eax
c00041d9:	74 1c                	je     c00041f7 <thread_yield+0x4d>
/work/x86_os_my/thread/thread.c:258 (discriminator 1)
c00041db:	68 8c be 00 c0       	push   $0xc000be8c
c00041e0:	68 88 c0 00 c0       	push   $0xc000c088
c00041e5:	68 02 01 00 00       	push   $0x102
c00041ea:	68 e1 bd 00 c0       	push   $0xc000bde1
c00041ef:	e8 2d e1 ff ff       	call   c0002321 <panic_spin>
c00041f4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:259
	list_append(&thread_ready_list, &cur->general_tag);
c00041f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00041fa:	83 c0 44             	add    $0x44,%eax
c00041fd:	83 ec 08             	sub    $0x8,%esp
c0004200:	50                   	push   %eax
c0004201:	68 6c 14 01 c0       	push   $0xc001146c
c0004206:	e8 42 01 00 00       	call   c000434d <list_append>
c000420b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:260
	cur->status = TASK_READY;
c000420e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004211:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/thread/thread.c:261
	schedule();
c0004218:	e8 e3 fc ff ff       	call   c0003f00 <schedule>
/work/x86_os_my/thread/thread.c:262
	intr_set_status(old_status);
c000421d:	83 ec 0c             	sub    $0xc,%esp
c0004220:	ff 75 f0             	pushl  -0x10(%ebp)
c0004223:	e8 41 d7 ff ff       	call   c0001969 <intr_set_status>
c0004228:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:263
}
c000422b:	90                   	nop
c000422c:	c9                   	leave  
c000422d:	c3                   	ret    

c000422e <thread_init>:
thread_init():
/work/x86_os_my/thread/thread.c:266

/* 初始化线程环境 */
void thread_init(void) {
c000422e:	55                   	push   %ebp
c000422f:	89 e5                	mov    %esp,%ebp
c0004231:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:267
	put_str("thread_init start\n");
c0004234:	83 ec 0c             	sub    $0xc,%esp
c0004237:	68 06 c0 00 c0       	push   $0xc000c006
c000423c:	e8 2f df ff ff       	call   c0002170 <put_str>
c0004241:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:268
	list_init(&thread_ready_list);
c0004244:	83 ec 0c             	sub    $0xc,%esp
c0004247:	68 6c 14 01 c0       	push   $0xc001146c
c000424c:	e8 6b 00 00 00       	call   c00042bc <list_init>
c0004251:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:269
	list_init(&thread_all_list);
c0004254:	83 ec 0c             	sub    $0xc,%esp
c0004257:	68 7c 14 01 c0       	push   $0xc001147c
c000425c:	e8 5b 00 00 00       	call   c00042bc <list_init>
c0004261:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:270
	lock_init(&pid_lock);
c0004264:	83 ec 0c             	sub    $0xc,%esp
c0004267:	68 94 14 01 c0       	push   $0xc0011494
c000426c:	e8 34 03 00 00       	call   c00045a5 <lock_init>
c0004271:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:272
	/* 先创建第一个用户进程:init */
	process_execute(init, "init");	// 放在第一个初始化,这是第一个进程,init进程的pid为1
c0004274:	83 ec 08             	sub    $0x8,%esp
c0004277:	68 19 c0 00 c0       	push   $0xc000c019
c000427c:	68 3d 15 00 c0       	push   $0xc000153d
c0004281:	e8 ce 0f 00 00       	call   c0005254 <process_execute>
c0004286:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:274
	/* 将当前main函数创建为线程 */
	make_main_thread();
c0004289:	e8 f5 fb ff ff       	call   c0003e83 <make_main_thread>
/work/x86_os_my/thread/thread.c:276
	/* 创建idle线程 */
	idle_thread = thread_start("idle", 10, idle, NULL);
c000428e:	6a 00                	push   $0x0
c0004290:	68 93 3b 00 c0       	push   $0xc0003b93
c0004295:	6a 0a                	push   $0xa
c0004297:	68 1e c0 00 c0       	push   $0xc000c01e
c000429c:	e8 03 fb ff ff       	call   c0003da4 <thread_start>
c00042a1:	83 c4 10             	add    $0x10,%esp
c00042a4:	a3 8c 14 01 c0       	mov    %eax,0xc001148c
/work/x86_os_my/thread/thread.c:277
	put_str("thread_init done\n");
c00042a9:	83 ec 0c             	sub    $0xc,%esp
c00042ac:	68 23 c0 00 c0       	push   $0xc000c023
c00042b1:	e8 ba de ff ff       	call   c0002170 <put_str>
c00042b6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:278
}
c00042b9:	90                   	nop
c00042ba:	c9                   	leave  
c00042bb:	c3                   	ret    

c00042bc <list_init>:
list_init():
/work/x86_os_my/lib/kernel/list.c:6
#include "list.h"
#include "interrupt.h"
/* 注意关中断的操作：临界区 */

/* 初始化双向链表list */
void list_init (struct list* list) {
c00042bc:	55                   	push   %ebp
c00042bd:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/lib/kernel/list.c:7
	list->head.prev = NULL;
c00042bf:	8b 45 08             	mov    0x8(%ebp),%eax
c00042c2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/lib/kernel/list.c:8
	list->head.next = &list->tail;
c00042c8:	8b 45 08             	mov    0x8(%ebp),%eax
c00042cb:	8d 50 08             	lea    0x8(%eax),%edx
c00042ce:	8b 45 08             	mov    0x8(%ebp),%eax
c00042d1:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/lib/kernel/list.c:9
	list->tail.prev = &list->head;
c00042d4:	8b 55 08             	mov    0x8(%ebp),%edx
c00042d7:	8b 45 08             	mov    0x8(%ebp),%eax
c00042da:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/lib/kernel/list.c:10
	list->tail.next = NULL;
c00042dd:	8b 45 08             	mov    0x8(%ebp),%eax
c00042e0:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
/work/x86_os_my/lib/kernel/list.c:11
}
c00042e7:	90                   	nop
c00042e8:	5d                   	pop    %ebp
c00042e9:	c3                   	ret    

c00042ea <list_insert_before>:
list_insert_before():
/work/x86_os_my/lib/kernel/list.c:14

/* 把链表元素elem插入在元素before之前 */
void list_insert_before(struct list_elem* before, struct list_elem* elem) { 
c00042ea:	55                   	push   %ebp
c00042eb:	89 e5                	mov    %esp,%ebp
c00042ed:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/kernel/list.c:15
	enum intr_status old_status = intr_disable();
c00042f0:	e8 4b d6 ff ff       	call   c0001940 <intr_disable>
c00042f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/list.c:18

	/* 将before前驱元素的后继元素更新为elem, 暂时使before脱离链表*/ 
	before->prev->next = elem; 
c00042f8:	8b 45 08             	mov    0x8(%ebp),%eax
c00042fb:	8b 00                	mov    (%eax),%eax
c00042fd:	8b 55 0c             	mov    0xc(%ebp),%edx
c0004300:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/lib/kernel/list.c:22

	/* 更新elem自己的前驱结点为before的前驱,
	* 更新elem自己的后继结点为before, 于是before又回到链表 */
	elem->prev = before->prev;
c0004303:	8b 45 08             	mov    0x8(%ebp),%eax
c0004306:	8b 10                	mov    (%eax),%edx
c0004308:	8b 45 0c             	mov    0xc(%ebp),%eax
c000430b:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/lib/kernel/list.c:23
	elem->next = before;
c000430d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0004310:	8b 55 08             	mov    0x8(%ebp),%edx
c0004313:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/lib/kernel/list.c:26

	/* 更新before的前驱结点为elem */
	before->prev = elem;
c0004316:	8b 45 08             	mov    0x8(%ebp),%eax
c0004319:	8b 55 0c             	mov    0xc(%ebp),%edx
c000431c:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/lib/kernel/list.c:28

	intr_set_status(old_status);
c000431e:	83 ec 0c             	sub    $0xc,%esp
c0004321:	ff 75 f4             	pushl  -0xc(%ebp)
c0004324:	e8 40 d6 ff ff       	call   c0001969 <intr_set_status>
c0004329:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:29
}
c000432c:	90                   	nop
c000432d:	c9                   	leave  
c000432e:	c3                   	ret    

c000432f <list_push>:
list_push():
/work/x86_os_my/lib/kernel/list.c:32

/* 添加元素到列表队首,类似栈push操作 */
void list_push(struct list* plist, struct list_elem* elem) {
c000432f:	55                   	push   %ebp
c0004330:	89 e5                	mov    %esp,%ebp
c0004332:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/lib/kernel/list.c:33
	list_insert_before(plist->head.next, elem); // 在队头插入elem
c0004335:	8b 45 08             	mov    0x8(%ebp),%eax
c0004338:	8b 40 04             	mov    0x4(%eax),%eax
c000433b:	83 ec 08             	sub    $0x8,%esp
c000433e:	ff 75 0c             	pushl  0xc(%ebp)
c0004341:	50                   	push   %eax
c0004342:	e8 a3 ff ff ff       	call   c00042ea <list_insert_before>
c0004347:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:34
}
c000434a:	90                   	nop
c000434b:	c9                   	leave  
c000434c:	c3                   	ret    

c000434d <list_append>:
list_append():
/work/x86_os_my/lib/kernel/list.c:37

/* 追加元素到链表队尾,类似队列的先进先出操作 */
void list_append(struct list* plist, struct list_elem* elem) {
c000434d:	55                   	push   %ebp
c000434e:	89 e5                	mov    %esp,%ebp
c0004350:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/lib/kernel/list.c:38
	list_insert_before(&plist->tail, elem);     // 在队尾的前面插入
c0004353:	8b 45 08             	mov    0x8(%ebp),%eax
c0004356:	83 c0 08             	add    $0x8,%eax
c0004359:	83 ec 08             	sub    $0x8,%esp
c000435c:	ff 75 0c             	pushl  0xc(%ebp)
c000435f:	50                   	push   %eax
c0004360:	e8 85 ff ff ff       	call   c00042ea <list_insert_before>
c0004365:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:39
}
c0004368:	90                   	nop
c0004369:	c9                   	leave  
c000436a:	c3                   	ret    

c000436b <list_remove>:
list_remove():
/work/x86_os_my/lib/kernel/list.c:42

/* 使元素pelem脱离链表 */
void list_remove(struct list_elem* pelem) {
c000436b:	55                   	push   %ebp
c000436c:	89 e5                	mov    %esp,%ebp
c000436e:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/kernel/list.c:43
	enum intr_status old_status = intr_disable();
c0004371:	e8 ca d5 ff ff       	call   c0001940 <intr_disable>
c0004376:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/list.c:45

	pelem->prev->next = pelem->next;
c0004379:	8b 45 08             	mov    0x8(%ebp),%eax
c000437c:	8b 00                	mov    (%eax),%eax
c000437e:	8b 55 08             	mov    0x8(%ebp),%edx
c0004381:	8b 52 04             	mov    0x4(%edx),%edx
c0004384:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/lib/kernel/list.c:46
	pelem->next->prev = pelem->prev;
c0004387:	8b 45 08             	mov    0x8(%ebp),%eax
c000438a:	8b 40 04             	mov    0x4(%eax),%eax
c000438d:	8b 55 08             	mov    0x8(%ebp),%edx
c0004390:	8b 12                	mov    (%edx),%edx
c0004392:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/lib/kernel/list.c:48

	intr_set_status(old_status);
c0004394:	83 ec 0c             	sub    $0xc,%esp
c0004397:	ff 75 f4             	pushl  -0xc(%ebp)
c000439a:	e8 ca d5 ff ff       	call   c0001969 <intr_set_status>
c000439f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:49
}
c00043a2:	90                   	nop
c00043a3:	c9                   	leave  
c00043a4:	c3                   	ret    

c00043a5 <list_pop>:
list_pop():
/work/x86_os_my/lib/kernel/list.c:52

/* 将链表第一个元素弹出并返回,类似栈的pop操作 */
struct list_elem* list_pop(struct list* plist) {
c00043a5:	55                   	push   %ebp
c00043a6:	89 e5                	mov    %esp,%ebp
c00043a8:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/kernel/list.c:53
	struct list_elem* elem = plist->head.next;
c00043ab:	8b 45 08             	mov    0x8(%ebp),%eax
c00043ae:	8b 40 04             	mov    0x4(%eax),%eax
c00043b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/list.c:54
	list_remove(elem);
c00043b4:	83 ec 0c             	sub    $0xc,%esp
c00043b7:	ff 75 f4             	pushl  -0xc(%ebp)
c00043ba:	e8 ac ff ff ff       	call   c000436b <list_remove>
c00043bf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:55
	return elem;
c00043c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/lib/kernel/list.c:56
} 
c00043c5:	c9                   	leave  
c00043c6:	c3                   	ret    

c00043c7 <elem_find>:
elem_find():
/work/x86_os_my/lib/kernel/list.c:59

/* 从链表中查找元素obj_elem,成功时返回true,失败时返回false */
bool elem_find(struct list* plist, struct list_elem* obj_elem) {
c00043c7:	55                   	push   %ebp
c00043c8:	89 e5                	mov    %esp,%ebp
c00043ca:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:60
	struct list_elem* elem = plist->head.next;
c00043cd:	8b 45 08             	mov    0x8(%ebp),%eax
c00043d0:	8b 40 04             	mov    0x4(%eax),%eax
c00043d3:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/kernel/list.c:61
	while (elem != &plist->tail) {
c00043d6:	eb 18                	jmp    c00043f0 <elem_find+0x29>
/work/x86_os_my/lib/kernel/list.c:62
	if (elem == obj_elem) {
c00043d8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c00043db:	3b 45 0c             	cmp    0xc(%ebp),%eax
c00043de:	75 07                	jne    c00043e7 <elem_find+0x20>
/work/x86_os_my/lib/kernel/list.c:63
		return true;
c00043e0:	b8 01 00 00 00       	mov    $0x1,%eax
c00043e5:	eb 19                	jmp    c0004400 <elem_find+0x39>
/work/x86_os_my/lib/kernel/list.c:65
	}
		elem = elem->next;
c00043e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c00043ea:	8b 40 04             	mov    0x4(%eax),%eax
c00043ed:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/kernel/list.c:61
} 

/* 从链表中查找元素obj_elem,成功时返回true,失败时返回false */
bool elem_find(struct list* plist, struct list_elem* obj_elem) {
	struct list_elem* elem = plist->head.next;
	while (elem != &plist->tail) {
c00043f0:	8b 45 08             	mov    0x8(%ebp),%eax
c00043f3:	83 c0 08             	add    $0x8,%eax
c00043f6:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c00043f9:	75 dd                	jne    c00043d8 <elem_find+0x11>
/work/x86_os_my/lib/kernel/list.c:67
	if (elem == obj_elem) {
		return true;
	}
		elem = elem->next;
	}
	return false;
c00043fb:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/lib/kernel/list.c:68
}
c0004400:	c9                   	leave  
c0004401:	c3                   	ret    

c0004402 <list_traversal>:
list_traversal():
/work/x86_os_my/lib/kernel/list.c:74

/* 把列表plist中的每个元素elem和arg传给回调函数func,
 * arg给func用来判断elem是否符合条件.
 * 本函数的功能是遍历列表内所有元素,逐个判断是否有符合条件的元素。
 * 找到符合条件的元素返回元素指针,否则返回NULL. */
struct list_elem* list_traversal(struct list* plist, function func, int arg) {
c0004402:	55                   	push   %ebp
c0004403:	89 e5                	mov    %esp,%ebp
c0004405:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/kernel/list.c:75
	struct list_elem* elem = plist->head.next;
c0004408:	8b 45 08             	mov    0x8(%ebp),%eax
c000440b:	8b 40 04             	mov    0x4(%eax),%eax
c000440e:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/list.c:77
	/* 如果队列为空,就必然没有符合条件的结点,故直接返回NULL */
	if (list_empty(plist)) { 
c0004411:	83 ec 0c             	sub    $0xc,%esp
c0004414:	ff 75 08             	pushl  0x8(%ebp)
c0004417:	e8 78 00 00 00       	call   c0004494 <list_empty>
c000441c:	83 c4 10             	add    $0x10,%esp
c000441f:	85 c0                	test   %eax,%eax
c0004421:	74 2a                	je     c000444d <list_traversal+0x4b>
/work/x86_os_my/lib/kernel/list.c:78
		return NULL;
c0004423:	b8 00 00 00 00       	mov    $0x0,%eax
c0004428:	eb 33                	jmp    c000445d <list_traversal+0x5b>
/work/x86_os_my/lib/kernel/list.c:82
	}

	while (elem != &plist->tail) {
	if (func(elem, arg)) {		// func返回ture则认为该元素在回调函数中符合条件,命中,故停止继续遍历
c000442a:	83 ec 08             	sub    $0x8,%esp
c000442d:	ff 75 10             	pushl  0x10(%ebp)
c0004430:	ff 75 f4             	pushl  -0xc(%ebp)
c0004433:	8b 45 0c             	mov    0xc(%ebp),%eax
c0004436:	ff d0                	call   *%eax
c0004438:	83 c4 10             	add    $0x10,%esp
c000443b:	85 c0                	test   %eax,%eax
c000443d:	74 05                	je     c0004444 <list_traversal+0x42>
/work/x86_os_my/lib/kernel/list.c:83
		return elem;
c000443f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004442:	eb 19                	jmp    c000445d <list_traversal+0x5b>
/work/x86_os_my/lib/kernel/list.c:85
	}
		elem = elem->next;		// 若回调函数func返回false,则继续遍历
c0004444:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004447:	8b 40 04             	mov    0x4(%eax),%eax
c000444a:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/list.c:81
	/* 如果队列为空,就必然没有符合条件的结点,故直接返回NULL */
	if (list_empty(plist)) { 
		return NULL;
	}

	while (elem != &plist->tail) {
c000444d:	8b 45 08             	mov    0x8(%ebp),%eax
c0004450:	83 c0 08             	add    $0x8,%eax
c0004453:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0004456:	75 d2                	jne    c000442a <list_traversal+0x28>
/work/x86_os_my/lib/kernel/list.c:87
	if (func(elem, arg)) {		// func返回ture则认为该元素在回调函数中符合条件,命中,故停止继续遍历
		return elem;
	}
		elem = elem->next;		// 若回调函数func返回false,则继续遍历
	}
	return NULL;
c0004458:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/lib/kernel/list.c:88
}
c000445d:	c9                   	leave  
c000445e:	c3                   	ret    

c000445f <list_len>:
list_len():
/work/x86_os_my/lib/kernel/list.c:91

/* 返回链表长度 */
uint32_t list_len(struct list* plist) {
c000445f:	55                   	push   %ebp
c0004460:	89 e5                	mov    %esp,%ebp
c0004462:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:92
	struct list_elem* elem = plist->head.next;
c0004465:	8b 45 08             	mov    0x8(%ebp),%eax
c0004468:	8b 40 04             	mov    0x4(%eax),%eax
c000446b:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/kernel/list.c:93
	uint32_t length = 0;
c000446e:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
/work/x86_os_my/lib/kernel/list.c:94
	while (elem != &plist->tail) {
c0004475:	eb 0d                	jmp    c0004484 <list_len+0x25>
/work/x86_os_my/lib/kernel/list.c:95
		length++; 
c0004477:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
/work/x86_os_my/lib/kernel/list.c:96
		elem = elem->next;
c000447b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000447e:	8b 40 04             	mov    0x4(%eax),%eax
c0004481:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/kernel/list.c:94

/* 返回链表长度 */
uint32_t list_len(struct list* plist) {
	struct list_elem* elem = plist->head.next;
	uint32_t length = 0;
	while (elem != &plist->tail) {
c0004484:	8b 45 08             	mov    0x8(%ebp),%eax
c0004487:	83 c0 08             	add    $0x8,%eax
c000448a:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c000448d:	75 e8                	jne    c0004477 <list_len+0x18>
/work/x86_os_my/lib/kernel/list.c:98
		length++; 
		elem = elem->next;
	}
	return length;
c000448f:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/kernel/list.c:99
}
c0004492:	c9                   	leave  
c0004493:	c3                   	ret    

c0004494 <list_empty>:
list_empty():
/work/x86_os_my/lib/kernel/list.c:102

/* 判断链表是否为空,空时返回true,否则返回false */
bool list_empty(struct list* plist) {		// 判断队列是否为空
c0004494:	55                   	push   %ebp
c0004495:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/lib/kernel/list.c:103
	return (plist->head.next == &plist->tail ? true : false);
c0004497:	8b 45 08             	mov    0x8(%ebp),%eax
c000449a:	8b 40 04             	mov    0x4(%eax),%eax
c000449d:	8b 55 08             	mov    0x8(%ebp),%edx
c00044a0:	83 c2 08             	add    $0x8,%edx
c00044a3:	39 d0                	cmp    %edx,%eax
c00044a5:	0f 94 c0             	sete   %al
c00044a8:	0f b6 c0             	movzbl %al,%eax
/work/x86_os_my/lib/kernel/list.c:104
}
c00044ab:	5d                   	pop    %ebp
c00044ac:	c3                   	ret    
c00044ad:	66 90                	xchg   %ax,%ax
c00044af:	90                   	nop

c00044b0 <switch_to>:
switch_to():
c00044b0:	56                   	push   %esi
c00044b1:	57                   	push   %edi
c00044b2:	53                   	push   %ebx
c00044b3:	55                   	push   %ebp
c00044b4:	8b 44 24 14          	mov    0x14(%esp),%eax
c00044b8:	89 20                	mov    %esp,(%eax)
c00044ba:	8b 44 24 18          	mov    0x18(%esp),%eax
c00044be:	8b 20                	mov    (%eax),%esp
c00044c0:	5d                   	pop    %ebp
c00044c1:	5b                   	pop    %ebx
c00044c2:	5f                   	pop    %edi
c00044c3:	5e                   	pop    %esi
c00044c4:	c3                   	ret    

c00044c5 <console_init>:
console_init():
/work/x86_os_my/device/console.c:9
#include "sync.h"
#include "thread.h"
static struct lock console_lock;	// 控制台锁

/* 初始化终端 */
void console_init() {
c00044c5:	55                   	push   %ebp
c00044c6:	89 e5                	mov    %esp,%ebp
c00044c8:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/console.c:10
	lock_init(&console_lock);
c00044cb:	83 ec 0c             	sub    $0xc,%esp
c00044ce:	68 50 08 01 c0       	push   $0xc0010850
c00044d3:	e8 cd 00 00 00       	call   c00045a5 <lock_init>
c00044d8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:11
}
c00044db:	90                   	nop
c00044dc:	c9                   	leave  
c00044dd:	c3                   	ret    

c00044de <console_acquire>:
console_acquire():
/work/x86_os_my/device/console.c:14

/* 获取终端 */
void console_acquire() {
c00044de:	55                   	push   %ebp
c00044df:	89 e5                	mov    %esp,%ebp
c00044e1:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/console.c:15
	lock_acquire(&console_lock);
c00044e4:	83 ec 0c             	sub    $0xc,%esp
c00044e7:	68 50 08 01 c0       	push   $0xc0010850
c00044ec:	e8 8e 02 00 00       	call   c000477f <lock_acquire>
c00044f1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:16
}
c00044f4:	90                   	nop
c00044f5:	c9                   	leave  
c00044f6:	c3                   	ret    

c00044f7 <console_release>:
console_release():
/work/x86_os_my/device/console.c:19

/* 释放终端 */
void console_release() {
c00044f7:	55                   	push   %ebp
c00044f8:	89 e5                	mov    %esp,%ebp
c00044fa:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/console.c:20
	lock_release(&console_lock);
c00044fd:	83 ec 0c             	sub    $0xc,%esp
c0004500:	68 50 08 01 c0       	push   $0xc0010850
c0004505:	e8 ec 02 00 00       	call   c00047f6 <lock_release>
c000450a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:21
}
c000450d:	90                   	nop
c000450e:	c9                   	leave  
c000450f:	c3                   	ret    

c0004510 <console_put_str>:
console_put_str():
/work/x86_os_my/device/console.c:24

/* 终端中输出字符串 */
void console_put_str(char* str) {
c0004510:	55                   	push   %ebp
c0004511:	89 e5                	mov    %esp,%ebp
c0004513:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/console.c:25
	console_acquire();
c0004516:	e8 c3 ff ff ff       	call   c00044de <console_acquire>
/work/x86_os_my/device/console.c:26
	put_str(str);
c000451b:	83 ec 0c             	sub    $0xc,%esp
c000451e:	ff 75 08             	pushl  0x8(%ebp)
c0004521:	e8 4a dc ff ff       	call   c0002170 <put_str>
c0004526:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:27
	console_release();
c0004529:	e8 c9 ff ff ff       	call   c00044f7 <console_release>
/work/x86_os_my/device/console.c:28
}
c000452e:	90                   	nop
c000452f:	c9                   	leave  
c0004530:	c3                   	ret    

c0004531 <console_put_char>:
console_put_char():
/work/x86_os_my/device/console.c:31

/* 终端中输出字符 */
void console_put_char(uint8_t char_asci) {
c0004531:	55                   	push   %ebp
c0004532:	89 e5                	mov    %esp,%ebp
c0004534:	83 ec 18             	sub    $0x18,%esp
c0004537:	8b 45 08             	mov    0x8(%ebp),%eax
c000453a:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/device/console.c:32
	console_acquire();
c000453d:	e8 9c ff ff ff       	call   c00044de <console_acquire>
/work/x86_os_my/device/console.c:33
	put_char(char_asci);
c0004542:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0004546:	83 ec 0c             	sub    $0xc,%esp
c0004549:	50                   	push   %eax
c000454a:	e8 3f dc ff ff       	call   c000218e <put_char>
c000454f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:34
	console_release();
c0004552:	e8 a0 ff ff ff       	call   c00044f7 <console_release>
/work/x86_os_my/device/console.c:35
}
c0004557:	90                   	nop
c0004558:	c9                   	leave  
c0004559:	c3                   	ret    

c000455a <console_put_int>:
console_put_int():
/work/x86_os_my/device/console.c:38

/* 终端中输出16进制整数 */
void console_put_int(uint32_t num) {
c000455a:	55                   	push   %ebp
c000455b:	89 e5                	mov    %esp,%ebp
c000455d:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/console.c:39
	console_acquire();
c0004560:	e8 79 ff ff ff       	call   c00044de <console_acquire>
/work/x86_os_my/device/console.c:40
	put_int(num);
c0004565:	83 ec 0c             	sub    $0xc,%esp
c0004568:	ff 75 08             	pushl  0x8(%ebp)
c000456b:	e8 2a dd ff ff       	call   c000229a <put_int>
c0004570:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:41
	console_release();
c0004573:	e8 7f ff ff ff       	call   c00044f7 <console_release>
/work/x86_os_my/device/console.c:42
}
c0004578:	90                   	nop
c0004579:	c9                   	leave  
c000457a:	c3                   	ret    

c000457b <sema_init>:
sema_init():
/work/x86_os_my/thread/sync.c:8
#include "global.h"
#include "debug.h"
#include "interrupt.h"

/* 初始化信号量 */
void sema_init(struct semaphore* psema, uint8_t value) {
c000457b:	55                   	push   %ebp
c000457c:	89 e5                	mov    %esp,%ebp
c000457e:	83 ec 18             	sub    $0x18,%esp
c0004581:	8b 45 0c             	mov    0xc(%ebp),%eax
c0004584:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/thread/sync.c:9
	psema->value = value;       // 为信号量赋初值
c0004587:	8b 45 08             	mov    0x8(%ebp),%eax
c000458a:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
c000458e:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/thread/sync.c:10
	list_init(&psema->waiters); //初始化信号量的等待队列
c0004590:	8b 45 08             	mov    0x8(%ebp),%eax
c0004593:	83 c0 04             	add    $0x4,%eax
c0004596:	83 ec 0c             	sub    $0xc,%esp
c0004599:	50                   	push   %eax
c000459a:	e8 1d fd ff ff       	call   c00042bc <list_init>
c000459f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:11
}
c00045a2:	90                   	nop
c00045a3:	c9                   	leave  
c00045a4:	c3                   	ret    

c00045a5 <lock_init>:
lock_init():
/work/x86_os_my/thread/sync.c:14

/* 初始化锁plock */
void lock_init(struct lock* plock) {
c00045a5:	55                   	push   %ebp
c00045a6:	89 e5                	mov    %esp,%ebp
c00045a8:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/sync.c:15
	plock->holder = NULL;
c00045ab:	8b 45 08             	mov    0x8(%ebp),%eax
c00045ae:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/thread/sync.c:16
	plock->holder_repeat_nr = 0;
c00045b4:	8b 45 08             	mov    0x8(%ebp),%eax
c00045b7:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
/work/x86_os_my/thread/sync.c:17
	sema_init(&plock->semaphore, 1);  // 信号量初值为1
c00045be:	8b 45 08             	mov    0x8(%ebp),%eax
c00045c1:	83 c0 04             	add    $0x4,%eax
c00045c4:	83 ec 08             	sub    $0x8,%esp
c00045c7:	6a 01                	push   $0x1
c00045c9:	50                   	push   %eax
c00045ca:	e8 ac ff ff ff       	call   c000457b <sema_init>
c00045cf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:18
}
c00045d2:	90                   	nop
c00045d3:	c9                   	leave  
c00045d4:	c3                   	ret    

c00045d5 <sema_down>:
sema_down():
/work/x86_os_my/thread/sync.c:21

/* 信号量down操作 */
void sema_down(struct semaphore* psema) {
c00045d5:	55                   	push   %ebp
c00045d6:	89 e5                	mov    %esp,%ebp
c00045d8:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/sync.c:23
	/* 关中断来保证原子操作 */
	enum intr_status old_status = intr_disable();
c00045db:	e8 60 d3 ff ff       	call   c0001940 <intr_disable>
c00045e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/sync.c:25
	
	while(psema->value == 0) {			// 若value为0,表示已经被别人持有【while多次判断】
c00045e3:	e9 98 00 00 00       	jmp    c0004680 <sema_down+0xab>
/work/x86_os_my/thread/sync.c:26
		ASSERT(!elem_find(&psema->waiters, &running_thread()->general_tag));
c00045e8:	e8 bd f5 ff ff       	call   c0003baa <running_thread>
c00045ed:	8d 50 44             	lea    0x44(%eax),%edx
c00045f0:	8b 45 08             	mov    0x8(%ebp),%eax
c00045f3:	83 c0 04             	add    $0x4,%eax
c00045f6:	83 ec 08             	sub    $0x8,%esp
c00045f9:	52                   	push   %edx
c00045fa:	50                   	push   %eax
c00045fb:	e8 c7 fd ff ff       	call   c00043c7 <elem_find>
c0004600:	83 c4 10             	add    $0x10,%esp
c0004603:	85 c0                	test   %eax,%eax
c0004605:	74 19                	je     c0004620 <sema_down+0x4b>
/work/x86_os_my/thread/sync.c:26 (discriminator 1)
c0004607:	68 98 c0 00 c0       	push   $0xc000c098
c000460c:	68 9c c1 00 c0       	push   $0xc000c19c
c0004611:	6a 1a                	push   $0x1a
c0004613:	68 d4 c0 00 c0       	push   $0xc000c0d4
c0004618:	e8 04 dd ff ff       	call   c0002321 <panic_spin>
c000461d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:28
		/* 当前线程不应该已在信号量的waiters队列中 */
		if (elem_find(&psema->waiters, &running_thread()->general_tag)) {
c0004620:	e8 85 f5 ff ff       	call   c0003baa <running_thread>
c0004625:	8d 50 44             	lea    0x44(%eax),%edx
c0004628:	8b 45 08             	mov    0x8(%ebp),%eax
c000462b:	83 c0 04             	add    $0x4,%eax
c000462e:	83 ec 08             	sub    $0x8,%esp
c0004631:	52                   	push   %edx
c0004632:	50                   	push   %eax
c0004633:	e8 8f fd ff ff       	call   c00043c7 <elem_find>
c0004638:	83 c4 10             	add    $0x10,%esp
c000463b:	85 c0                	test   %eax,%eax
c000463d:	74 19                	je     c0004658 <sema_down+0x83>
/work/x86_os_my/thread/sync.c:29
			PANIC("sema_down: thread blocked has been in waiters_list\n");
c000463f:	68 e4 c0 00 c0       	push   $0xc000c0e4
c0004644:	68 9c c1 00 c0       	push   $0xc000c19c
c0004649:	6a 1d                	push   $0x1d
c000464b:	68 d4 c0 00 c0       	push   $0xc000c0d4
c0004650:	e8 cc dc ff ff       	call   c0002321 <panic_spin>
c0004655:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:32
		}
		/* 若信号量的值等于0,则当前线程把自己加入该锁的等待队列,然后阻塞自己 */
		list_append(&psema->waiters, &running_thread()->general_tag);
c0004658:	e8 4d f5 ff ff       	call   c0003baa <running_thread>
c000465d:	8d 50 44             	lea    0x44(%eax),%edx
c0004660:	8b 45 08             	mov    0x8(%ebp),%eax
c0004663:	83 c0 04             	add    $0x4,%eax
c0004666:	83 ec 08             	sub    $0x8,%esp
c0004669:	52                   	push   %edx
c000466a:	50                   	push   %eax
c000466b:	e8 dd fc ff ff       	call   c000434d <list_append>
c0004670:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:33
		thread_block(TASK_BLOCKED);		// 阻塞线程,直到被唤醒
c0004673:	83 ec 0c             	sub    $0xc,%esp
c0004676:	6a 02                	push   $0x2
c0004678:	e8 d0 f9 ff ff       	call   c000404d <thread_block>
c000467d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:25
/* 信号量down操作 */
void sema_down(struct semaphore* psema) {
	/* 关中断来保证原子操作 */
	enum intr_status old_status = intr_disable();
	
	while(psema->value == 0) {			// 若value为0,表示已经被别人持有【while多次判断】
c0004680:	8b 45 08             	mov    0x8(%ebp),%eax
c0004683:	0f b6 00             	movzbl (%eax),%eax
c0004686:	84 c0                	test   %al,%al
c0004688:	0f 84 5a ff ff ff    	je     c00045e8 <sema_down+0x13>
/work/x86_os_my/thread/sync.c:36
		/* 若信号量的值等于0,则当前线程把自己加入该锁的等待队列,然后阻塞自己 */
		list_append(&psema->waiters, &running_thread()->general_tag);
		thread_block(TASK_BLOCKED);		// 阻塞线程,直到被唤醒
	}
	/* 若value为1或被唤醒后,会执行下面的代码,也就是获得了锁。*/
	psema->value--;
c000468e:	8b 45 08             	mov    0x8(%ebp),%eax
c0004691:	0f b6 00             	movzbl (%eax),%eax
c0004694:	8d 50 ff             	lea    -0x1(%eax),%edx
c0004697:	8b 45 08             	mov    0x8(%ebp),%eax
c000469a:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/thread/sync.c:37
	ASSERT(psema->value == 0);
c000469c:	8b 45 08             	mov    0x8(%ebp),%eax
c000469f:	0f b6 00             	movzbl (%eax),%eax
c00046a2:	84 c0                	test   %al,%al
c00046a4:	74 19                	je     c00046bf <sema_down+0xea>
/work/x86_os_my/thread/sync.c:37 (discriminator 1)
c00046a6:	68 18 c1 00 c0       	push   $0xc000c118
c00046ab:	68 9c c1 00 c0       	push   $0xc000c19c
c00046b0:	6a 25                	push   $0x25
c00046b2:	68 d4 c0 00 c0       	push   $0xc000c0d4
c00046b7:	e8 65 dc ff ff       	call   c0002321 <panic_spin>
c00046bc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:40
	
	/* 恢复之前的中断状态 */
	intr_set_status(old_status);
c00046bf:	83 ec 0c             	sub    $0xc,%esp
c00046c2:	ff 75 f4             	pushl  -0xc(%ebp)
c00046c5:	e8 9f d2 ff ff       	call   c0001969 <intr_set_status>
c00046ca:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:41
}
c00046cd:	90                   	nop
c00046ce:	c9                   	leave  
c00046cf:	c3                   	ret    

c00046d0 <sema_up>:
sema_up():
/work/x86_os_my/thread/sync.c:44

/* 信号量的up操作 */
void sema_up(struct semaphore* psema) {
c00046d0:	55                   	push   %ebp
c00046d1:	89 e5                	mov    %esp,%ebp
c00046d3:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/sync.c:46
	/* 关中断,保证原子操作 */
	enum intr_status old_status = intr_disable();
c00046d6:	e8 65 d2 ff ff       	call   c0001940 <intr_disable>
c00046db:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/sync.c:48
	
	ASSERT(psema->value == 0);
c00046de:	8b 45 08             	mov    0x8(%ebp),%eax
c00046e1:	0f b6 00             	movzbl (%eax),%eax
c00046e4:	84 c0                	test   %al,%al
c00046e6:	74 19                	je     c0004701 <sema_up+0x31>
/work/x86_os_my/thread/sync.c:48 (discriminator 1)
c00046e8:	68 18 c1 00 c0       	push   $0xc000c118
c00046ed:	68 a8 c1 00 c0       	push   $0xc000c1a8
c00046f2:	6a 30                	push   $0x30
c00046f4:	68 d4 c0 00 c0       	push   $0xc000c0d4
c00046f9:	e8 23 dc ff ff       	call   c0002321 <panic_spin>
c00046fe:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:49
	if (!list_empty(&psema->waiters)) {
c0004701:	8b 45 08             	mov    0x8(%ebp),%eax
c0004704:	83 c0 04             	add    $0x4,%eax
c0004707:	83 ec 0c             	sub    $0xc,%esp
c000470a:	50                   	push   %eax
c000470b:	e8 84 fd ff ff       	call   c0004494 <list_empty>
c0004710:	83 c4 10             	add    $0x10,%esp
c0004713:	85 c0                	test   %eax,%eax
c0004715:	75 26                	jne    c000473d <sema_up+0x6d>
/work/x86_os_my/thread/sync.c:50
		struct task_struct* thread_blocked = elem2entry(struct task_struct, general_tag, list_pop(&psema->waiters));
c0004717:	8b 45 08             	mov    0x8(%ebp),%eax
c000471a:	83 c0 04             	add    $0x4,%eax
c000471d:	83 ec 0c             	sub    $0xc,%esp
c0004720:	50                   	push   %eax
c0004721:	e8 7f fc ff ff       	call   c00043a5 <list_pop>
c0004726:	83 c4 10             	add    $0x10,%esp
c0004729:	83 e8 44             	sub    $0x44,%eax
c000472c:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/thread/sync.c:51
		thread_unblock(thread_blocked);
c000472f:	83 ec 0c             	sub    $0xc,%esp
c0004732:	ff 75 f0             	pushl  -0x10(%ebp)
c0004735:	e8 76 f9 ff ff       	call   c00040b0 <thread_unblock>
c000473a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:53
	}
	psema->value++;
c000473d:	8b 45 08             	mov    0x8(%ebp),%eax
c0004740:	0f b6 00             	movzbl (%eax),%eax
c0004743:	8d 50 01             	lea    0x1(%eax),%edx
c0004746:	8b 45 08             	mov    0x8(%ebp),%eax
c0004749:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/thread/sync.c:54
	ASSERT(psema->value == 1);
c000474b:	8b 45 08             	mov    0x8(%ebp),%eax
c000474e:	0f b6 00             	movzbl (%eax),%eax
c0004751:	3c 01                	cmp    $0x1,%al
c0004753:	74 19                	je     c000476e <sema_up+0x9e>
/work/x86_os_my/thread/sync.c:54 (discriminator 1)
c0004755:	68 2a c1 00 c0       	push   $0xc000c12a
c000475a:	68 a8 c1 00 c0       	push   $0xc000c1a8
c000475f:	6a 36                	push   $0x36
c0004761:	68 d4 c0 00 c0       	push   $0xc000c0d4
c0004766:	e8 b6 db ff ff       	call   c0002321 <panic_spin>
c000476b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:57
	
	/* 恢复之前的中断状态 */
	intr_set_status(old_status);
c000476e:	83 ec 0c             	sub    $0xc,%esp
c0004771:	ff 75 f4             	pushl  -0xc(%ebp)
c0004774:	e8 f0 d1 ff ff       	call   c0001969 <intr_set_status>
c0004779:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:58
}
c000477c:	90                   	nop
c000477d:	c9                   	leave  
c000477e:	c3                   	ret    

c000477f <lock_acquire>:
lock_acquire():
/work/x86_os_my/thread/sync.c:61

/* 获取锁plock */
void lock_acquire(struct lock* plock) {
c000477f:	55                   	push   %ebp
c0004780:	89 e5                	mov    %esp,%ebp
c0004782:	53                   	push   %ebx
c0004783:	83 ec 04             	sub    $0x4,%esp
/work/x86_os_my/thread/sync.c:63
	/* 排除曾经自己已经持有锁但还未将其释放的情况。*/
	if (plock->holder != running_thread()) {
c0004786:	8b 45 08             	mov    0x8(%ebp),%eax
c0004789:	8b 18                	mov    (%eax),%ebx
c000478b:	e8 1a f4 ff ff       	call   c0003baa <running_thread>
c0004790:	39 c3                	cmp    %eax,%ebx
c0004792:	74 4d                	je     c00047e1 <lock_acquire+0x62>
/work/x86_os_my/thread/sync.c:64
		sema_down(&plock->semaphore);	// 对信号量P操作,原子操作
c0004794:	8b 45 08             	mov    0x8(%ebp),%eax
c0004797:	83 c0 04             	add    $0x4,%eax
c000479a:	83 ec 0c             	sub    $0xc,%esp
c000479d:	50                   	push   %eax
c000479e:	e8 32 fe ff ff       	call   c00045d5 <sema_down>
c00047a3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:65
		plock->holder = running_thread();
c00047a6:	e8 ff f3 ff ff       	call   c0003baa <running_thread>
c00047ab:	89 c2                	mov    %eax,%edx
c00047ad:	8b 45 08             	mov    0x8(%ebp),%eax
c00047b0:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/thread/sync.c:66
		ASSERT(plock->holder_repeat_nr == 0);
c00047b2:	8b 45 08             	mov    0x8(%ebp),%eax
c00047b5:	8b 40 18             	mov    0x18(%eax),%eax
c00047b8:	85 c0                	test   %eax,%eax
c00047ba:	74 19                	je     c00047d5 <lock_acquire+0x56>
/work/x86_os_my/thread/sync.c:66 (discriminator 1)
c00047bc:	68 3c c1 00 c0       	push   $0xc000c13c
c00047c1:	68 b0 c1 00 c0       	push   $0xc000c1b0
c00047c6:	6a 42                	push   $0x42
c00047c8:	68 d4 c0 00 c0       	push   $0xc000c0d4
c00047cd:	e8 4f db ff ff       	call   c0002321 <panic_spin>
c00047d2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:67
		plock->holder_repeat_nr = 1;
c00047d5:	8b 45 08             	mov    0x8(%ebp),%eax
c00047d8:	c7 40 18 01 00 00 00 	movl   $0x1,0x18(%eax)
/work/x86_os_my/thread/sync.c:71
	} else {
		plock->holder_repeat_nr++;
	}
}
c00047df:	eb 0f                	jmp    c00047f0 <lock_acquire+0x71>
/work/x86_os_my/thread/sync.c:69
		sema_down(&plock->semaphore);	// 对信号量P操作,原子操作
		plock->holder = running_thread();
		ASSERT(plock->holder_repeat_nr == 0);
		plock->holder_repeat_nr = 1;
	} else {
		plock->holder_repeat_nr++;
c00047e1:	8b 45 08             	mov    0x8(%ebp),%eax
c00047e4:	8b 40 18             	mov    0x18(%eax),%eax
c00047e7:	8d 50 01             	lea    0x1(%eax),%edx
c00047ea:	8b 45 08             	mov    0x8(%ebp),%eax
c00047ed:	89 50 18             	mov    %edx,0x18(%eax)
/work/x86_os_my/thread/sync.c:71
	}
}
c00047f0:	90                   	nop
c00047f1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c00047f4:	c9                   	leave  
c00047f5:	c3                   	ret    

c00047f6 <lock_release>:
lock_release():
/work/x86_os_my/thread/sync.c:74

/* 释放锁plock */
void lock_release(struct lock* plock) {
c00047f6:	55                   	push   %ebp
c00047f7:	89 e5                	mov    %esp,%ebp
c00047f9:	53                   	push   %ebx
c00047fa:	83 ec 04             	sub    $0x4,%esp
/work/x86_os_my/thread/sync.c:75
	ASSERT(plock->holder == running_thread());
c00047fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0004800:	8b 18                	mov    (%eax),%ebx
c0004802:	e8 a3 f3 ff ff       	call   c0003baa <running_thread>
c0004807:	39 c3                	cmp    %eax,%ebx
c0004809:	74 19                	je     c0004824 <lock_release+0x2e>
/work/x86_os_my/thread/sync.c:75 (discriminator 1)
c000480b:	68 5c c1 00 c0       	push   $0xc000c15c
c0004810:	68 c0 c1 00 c0       	push   $0xc000c1c0
c0004815:	6a 4b                	push   $0x4b
c0004817:	68 d4 c0 00 c0       	push   $0xc000c0d4
c000481c:	e8 00 db ff ff       	call   c0002321 <panic_spin>
c0004821:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:76
	if (plock->holder_repeat_nr > 1) {
c0004824:	8b 45 08             	mov    0x8(%ebp),%eax
c0004827:	8b 40 18             	mov    0x18(%eax),%eax
c000482a:	83 f8 01             	cmp    $0x1,%eax
c000482d:	76 11                	jbe    c0004840 <lock_release+0x4a>
/work/x86_os_my/thread/sync.c:77
		plock->holder_repeat_nr--;
c000482f:	8b 45 08             	mov    0x8(%ebp),%eax
c0004832:	8b 40 18             	mov    0x18(%eax),%eax
c0004835:	8d 50 ff             	lea    -0x1(%eax),%edx
c0004838:	8b 45 08             	mov    0x8(%ebp),%eax
c000483b:	89 50 18             	mov    %edx,0x18(%eax)
/work/x86_os_my/thread/sync.c:78
		return;
c000483e:	eb 49                	jmp    c0004889 <lock_release+0x93>
/work/x86_os_my/thread/sync.c:80
	}
	ASSERT(plock->holder_repeat_nr == 1);
c0004840:	8b 45 08             	mov    0x8(%ebp),%eax
c0004843:	8b 40 18             	mov    0x18(%eax),%eax
c0004846:	83 f8 01             	cmp    $0x1,%eax
c0004849:	74 19                	je     c0004864 <lock_release+0x6e>
/work/x86_os_my/thread/sync.c:80 (discriminator 1)
c000484b:	68 7e c1 00 c0       	push   $0xc000c17e
c0004850:	68 c0 c1 00 c0       	push   $0xc000c1c0
c0004855:	6a 50                	push   $0x50
c0004857:	68 d4 c0 00 c0       	push   $0xc000c0d4
c000485c:	e8 c0 da ff ff       	call   c0002321 <panic_spin>
c0004861:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:82

	plock->holder = NULL;			// 把锁的持有者置空放在V操作之前
c0004864:	8b 45 08             	mov    0x8(%ebp),%eax
c0004867:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/thread/sync.c:83
	plock->holder_repeat_nr = 0;
c000486d:	8b 45 08             	mov    0x8(%ebp),%eax
c0004870:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
/work/x86_os_my/thread/sync.c:84
	sema_up(&plock->semaphore);		// 信号量的V操作,也是原子操作
c0004877:	8b 45 08             	mov    0x8(%ebp),%eax
c000487a:	83 c0 04             	add    $0x4,%eax
c000487d:	83 ec 0c             	sub    $0xc,%esp
c0004880:	50                   	push   %eax
c0004881:	e8 4a fe ff ff       	call   c00046d0 <sema_up>
c0004886:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:85
}
c0004889:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c000488c:	c9                   	leave  
c000488d:	c3                   	ret    

c000488e <inb>:
inb():
/work/x86_os_my/lib/kernel/io.h:36
   asm volatile ("cld; rep outsw" : "+S" (addr), "+c" (word_cnt) : "d" (port));
/******************************************************/
}

/* 将从端口port读入的一个字节返回 */
static inline uint8_t inb(uint16_t port) {
c000488e:	55                   	push   %ebp
c000488f:	89 e5                	mov    %esp,%ebp
c0004891:	83 ec 14             	sub    $0x14,%esp
c0004894:	8b 45 08             	mov    0x8(%ebp),%eax
c0004897:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
/work/x86_os_my/lib/kernel/io.h:38
   uint8_t data;
   asm volatile ("inb %w1, %b0" : "=a" (data) : "Nd" (port));
c000489b:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c000489f:	89 c2                	mov    %eax,%edx
c00048a1:	ec                   	in     (%dx),%al
c00048a2:	88 45 ff             	mov    %al,-0x1(%ebp)
/work/x86_os_my/lib/kernel/io.h:39
   return data;
c00048a5:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
/work/x86_os_my/lib/kernel/io.h:40
}
c00048a9:	c9                   	leave  
c00048aa:	c3                   	ret    

c00048ab <intr_keyboard_handler>:
intr_keyboard_handler():
/work/x86_os_my/device/keyboard.c:111
/* 0x3A */	{caps_lock_char, caps_lock_char}
/*其它按键暂不处理*/
};

/* 键盘中断处理程序 */
static void intr_keyboard_handler(void) {
c00048ab:	55                   	push   %ebp
c00048ac:	89 e5                	mov    %esp,%ebp
c00048ae:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/device/keyboard.c:114

/* 这次中断发生前的上一次中断,以下任意三个键是否有按下 */
   bool ctrl_down_last = ctrl_status;	  
c00048b1:	a1 6c 08 01 c0       	mov    0xc001086c,%eax
c00048b6:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/device/keyboard.c:115
   bool shift_down_last = shift_status;
c00048b9:	a1 70 08 01 c0       	mov    0xc0010870,%eax
c00048be:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/device/keyboard.c:116
   bool caps_lock_last = caps_lock_status;
c00048c1:	a1 78 08 01 c0       	mov    0xc0010878,%eax
c00048c6:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/device/keyboard.c:119

   bool break_code;
   uint16_t scancode = inb(KBD_BUF_PORT);
c00048c9:	6a 60                	push   $0x60
c00048cb:	e8 be ff ff ff       	call   c000488e <inb>
c00048d0:	83 c4 04             	add    $0x4,%esp
c00048d3:	0f b6 c0             	movzbl %al,%eax
c00048d6:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
/work/x86_os_my/device/keyboard.c:123

/* 若扫描码是e0开头的,表示此键的按下将产生多个扫描码,
 * 所以马上结束此次中断处理函数,等待下一个扫描码进来*/ 
   if (scancode == 0xe0) { 
c00048da:	66 81 7d f6 e0 00    	cmpw   $0xe0,-0xa(%ebp)
c00048e0:	75 0f                	jne    c00048f1 <intr_keyboard_handler+0x46>
/work/x86_os_my/device/keyboard.c:124
      ext_scancode = true;    // 打开e0标记
c00048e2:	c7 05 7c 08 01 c0 01 	movl   $0x1,0xc001087c
c00048e9:	00 00 00 
/work/x86_os_my/device/keyboard.c:125
      return;
c00048ec:	e9 50 02 00 00       	jmp    c0004b41 <intr_keyboard_handler+0x296>
/work/x86_os_my/device/keyboard.c:129
   }

/* 如果上次是以0xe0开头,将扫描码合并 */
   if (ext_scancode) {
c00048f1:	a1 7c 08 01 c0       	mov    0xc001087c,%eax
c00048f6:	85 c0                	test   %eax,%eax
c00048f8:	74 10                	je     c000490a <intr_keyboard_handler+0x5f>
/work/x86_os_my/device/keyboard.c:130
      scancode = ((0xe000) | scancode);
c00048fa:	66 81 4d f6 00 e0    	orw    $0xe000,-0xa(%ebp)
/work/x86_os_my/device/keyboard.c:131
      ext_scancode = false;   // 关闭e0标记
c0004900:	c7 05 7c 08 01 c0 00 	movl   $0x0,0xc001087c
c0004907:	00 00 00 
/work/x86_os_my/device/keyboard.c:134
   }   

   break_code = ((scancode & 0x0080) != 0);   // 获取break_code
c000490a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c000490e:	25 80 00 00 00       	and    $0x80,%eax
c0004913:	85 c0                	test   %eax,%eax
c0004915:	0f 95 c0             	setne  %al
c0004918:	0f b6 c0             	movzbl %al,%eax
c000491b:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/device/keyboard.c:136
   
   if (break_code) {   // 若是断码break_code(按键弹起时产生的扫描码)
c000491e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0004922:	74 6a                	je     c000498e <intr_keyboard_handler+0xe3>
/work/x86_os_my/device/keyboard.c:140

   /* 由于ctrl_r 和alt_r的make_code和break_code都是两字节,
   所以可用下面的方法取make_code,多字节的扫描码暂不处理 */
      uint16_t make_code = (scancode &= 0xff7f);   // 得到其make_code(按键按下时产生的扫描码)
c0004924:	66 81 65 f6 7f ff    	andw   $0xff7f,-0xa(%ebp)
c000492a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c000492e:	66 89 45 da          	mov    %ax,-0x26(%ebp)
/work/x86_os_my/device/keyboard.c:143

   /* 若是任意以下三个键弹起了,将状态置为false */
      if (make_code == ctrl_l_make || make_code == ctrl_r_make) {
c0004932:	66 83 7d da 1d       	cmpw   $0x1d,-0x26(%ebp)
c0004937:	74 08                	je     c0004941 <intr_keyboard_handler+0x96>
/work/x86_os_my/device/keyboard.c:143 (discriminator 1)
c0004939:	66 81 7d da 1d e0    	cmpw   $0xe01d,-0x26(%ebp)
c000493f:	75 0c                	jne    c000494d <intr_keyboard_handler+0xa2>
/work/x86_os_my/device/keyboard.c:144
	 ctrl_status = false;
c0004941:	c7 05 6c 08 01 c0 00 	movl   $0x0,0xc001086c
c0004948:	00 00 00 
c000494b:	eb 3c                	jmp    c0004989 <intr_keyboard_handler+0xde>
/work/x86_os_my/device/keyboard.c:145
      } else if (make_code == shift_l_make || make_code == shift_r_make) {
c000494d:	66 83 7d da 2a       	cmpw   $0x2a,-0x26(%ebp)
c0004952:	74 07                	je     c000495b <intr_keyboard_handler+0xb0>
/work/x86_os_my/device/keyboard.c:145 (discriminator 1)
c0004954:	66 83 7d da 36       	cmpw   $0x36,-0x26(%ebp)
c0004959:	75 0c                	jne    c0004967 <intr_keyboard_handler+0xbc>
/work/x86_os_my/device/keyboard.c:146
	 shift_status = false;
c000495b:	c7 05 70 08 01 c0 00 	movl   $0x0,0xc0010870
c0004962:	00 00 00 
c0004965:	eb 22                	jmp    c0004989 <intr_keyboard_handler+0xde>
/work/x86_os_my/device/keyboard.c:147
      } else if (make_code == alt_l_make || make_code == alt_r_make) {
c0004967:	66 83 7d da 38       	cmpw   $0x38,-0x26(%ebp)
c000496c:	74 0c                	je     c000497a <intr_keyboard_handler+0xcf>
/work/x86_os_my/device/keyboard.c:147 (discriminator 1)
c000496e:	66 81 7d da 38 e0    	cmpw   $0xe038,-0x26(%ebp)
c0004974:	0f 85 c0 01 00 00    	jne    c0004b3a <intr_keyboard_handler+0x28f>
/work/x86_os_my/device/keyboard.c:148
	 alt_status = false;
c000497a:	c7 05 74 08 01 c0 00 	movl   $0x0,0xc0010874
c0004981:	00 00 00 
/work/x86_os_my/device/keyboard.c:151
      } /* 由于caps_lock不是弹起后关闭,所以需要单独处理 */

      return;   // 直接返回结束此次中断处理程序
c0004984:	e9 b1 01 00 00       	jmp    c0004b3a <intr_keyboard_handler+0x28f>
c0004989:	e9 ac 01 00 00       	jmp    c0004b3a <intr_keyboard_handler+0x28f>
/work/x86_os_my/device/keyboard.c:155

   } 
   /* 若为通码,只处理数组中定义的键以及alt_right和ctrl键,全是make_code */
   else if ((scancode > 0x00 && scancode < 0x3b) || \
c000498e:	66 83 7d f6 00       	cmpw   $0x0,-0xa(%ebp)
c0004993:	74 07                	je     c000499c <intr_keyboard_handler+0xf1>
/work/x86_os_my/device/keyboard.c:155 (discriminator 1)
c0004995:	66 83 7d f6 3a       	cmpw   $0x3a,-0xa(%ebp)
c000499a:	76 14                	jbe    c00049b0 <intr_keyboard_handler+0x105>
/work/x86_os_my/device/keyboard.c:155 (discriminator 3)
c000499c:	66 81 7d f6 38 e0    	cmpw   $0xe038,-0xa(%ebp)
c00049a2:	74 0c                	je     c00049b0 <intr_keyboard_handler+0x105>
/work/x86_os_my/device/keyboard.c:156
	       (scancode == alt_r_make) || \
c00049a4:	66 81 7d f6 1d e0    	cmpw   $0xe01d,-0xa(%ebp)
c00049aa:	0f 85 78 01 00 00    	jne    c0004b28 <intr_keyboard_handler+0x27d>
/work/x86_os_my/device/keyboard.c:158
	       (scancode == ctrl_r_make)) {
      bool shift = false;  // 判断是否与shift组合,用来在一维数组中索引对应的字符
c00049b0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/device/keyboard.c:159
      if ((scancode < 0x0e) || (scancode == 0x29) || \
c00049b7:	66 83 7d f6 0d       	cmpw   $0xd,-0xa(%ebp)
c00049bc:	76 3f                	jbe    c00049fd <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:159 (discriminator 1)
c00049be:	66 83 7d f6 29       	cmpw   $0x29,-0xa(%ebp)
c00049c3:	74 38                	je     c00049fd <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:159 (discriminator 2)
c00049c5:	66 83 7d f6 1a       	cmpw   $0x1a,-0xa(%ebp)
c00049ca:	74 31                	je     c00049fd <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:160
	 (scancode == 0x1a) || (scancode == 0x1b) || \
c00049cc:	66 83 7d f6 1b       	cmpw   $0x1b,-0xa(%ebp)
c00049d1:	74 2a                	je     c00049fd <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:160 (discriminator 1)
c00049d3:	66 83 7d f6 2b       	cmpw   $0x2b,-0xa(%ebp)
c00049d8:	74 23                	je     c00049fd <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:161
	 (scancode == 0x2b) || (scancode == 0x27) || \
c00049da:	66 83 7d f6 27       	cmpw   $0x27,-0xa(%ebp)
c00049df:	74 1c                	je     c00049fd <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:161 (discriminator 1)
c00049e1:	66 83 7d f6 28       	cmpw   $0x28,-0xa(%ebp)
c00049e6:	74 15                	je     c00049fd <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:162
	 (scancode == 0x28) || (scancode == 0x33) || \
c00049e8:	66 83 7d f6 33       	cmpw   $0x33,-0xa(%ebp)
c00049ed:	74 0e                	je     c00049fd <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:162 (discriminator 1)
c00049ef:	66 83 7d f6 34       	cmpw   $0x34,-0xa(%ebp)
c00049f4:	74 07                	je     c00049fd <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:163
	 (scancode == 0x34) || (scancode == 0x35)) {  
c00049f6:	66 83 7d f6 35       	cmpw   $0x35,-0xa(%ebp)
c00049fb:	75 0f                	jne    c0004a0c <intr_keyboard_handler+0x161>
/work/x86_os_my/device/keyboard.c:176
		     0x28 字符'\''
		     0x33 字符','
		     0x34 字符'.'
		     0x35 字符'/' 
	    *******************************/
	 if (shift_down_last) {  // 如果同时按下了shift键
c00049fd:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0004a01:	74 3a                	je     c0004a3d <intr_keyboard_handler+0x192>
/work/x86_os_my/device/keyboard.c:177
	    shift = true;
c0004a03:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
/work/x86_os_my/device/keyboard.c:176
		     0x28 字符'\''
		     0x33 字符','
		     0x34 字符'.'
		     0x35 字符'/' 
	    *******************************/
	 if (shift_down_last) {  // 如果同时按下了shift键
c0004a0a:	eb 31                	jmp    c0004a3d <intr_keyboard_handler+0x192>
/work/x86_os_my/device/keyboard.c:180
	    shift = true;
	 }
      } else {	  // 默认为字母键
	 if (shift_down_last && caps_lock_last) {  // 如果shift和capslock同时按下
c0004a0c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0004a10:	74 0f                	je     c0004a21 <intr_keyboard_handler+0x176>
/work/x86_os_my/device/keyboard.c:180 (discriminator 1)
c0004a12:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0004a16:	74 09                	je     c0004a21 <intr_keyboard_handler+0x176>
/work/x86_os_my/device/keyboard.c:181
	    shift = false;
c0004a18:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0004a1f:	eb 1c                	jmp    c0004a3d <intr_keyboard_handler+0x192>
/work/x86_os_my/device/keyboard.c:182
	 } else if (shift_down_last || caps_lock_last) { // 如果shift和capslock任意被按下
c0004a21:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0004a25:	75 06                	jne    c0004a2d <intr_keyboard_handler+0x182>
/work/x86_os_my/device/keyboard.c:182 (discriminator 1)
c0004a27:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0004a2b:	74 09                	je     c0004a36 <intr_keyboard_handler+0x18b>
/work/x86_os_my/device/keyboard.c:183
	    shift = true;
c0004a2d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c0004a34:	eb 07                	jmp    c0004a3d <intr_keyboard_handler+0x192>
/work/x86_os_my/device/keyboard.c:185
	 } else {
	    shift = false;
c0004a36:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/device/keyboard.c:189
	 }
      }

      uint8_t index = (scancode &= 0x00ff);  // 将扫描码的高字节置0,主要是针对高字节是e0的扫描码.
c0004a3d:	66 81 65 f6 ff 00    	andw   $0xff,-0xa(%ebp)
c0004a43:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0004a47:	88 45 d9             	mov    %al,-0x27(%ebp)
/work/x86_os_my/device/keyboard.c:190
      char cur_char = keymap[index][shift];  // 在数组中找到对应的字符
c0004a4a:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0004a4e:	8d 14 00             	lea    (%eax,%eax,1),%edx
c0004a51:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0004a54:	01 d0                	add    %edx,%eax
c0004a56:	05 c0 03 01 c0       	add    $0xc00103c0,%eax
c0004a5b:	0f b6 00             	movzbl (%eax),%eax
c0004a5e:	88 45 ef             	mov    %al,-0x11(%ebp)
/work/x86_os_my/device/keyboard.c:193

   /* 如果cur_char不为0,也就是ascii码为除'\0'外的字符就加入键盘缓冲区中 */
      if (cur_char) {
c0004a61:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
c0004a65:	74 54                	je     c0004abb <intr_keyboard_handler+0x210>
/work/x86_os_my/device/keyboard.c:200
     /*****************  快捷键ctrl+l和ctrl+u的处理 *********************
      * 下面是把ctrl+l和ctrl+u这两种组合键产生的字符置为:
      * cur_char的asc码-字符a的asc码, 此差值比较小,
      * 属于asc码表中不可见的字符部分.故不会产生可见字符.
      * 我们在shell中将ascii值为l-a和u-a的分别处理为清屏和删除输入的快捷键*/
	 if ((ctrl_down_last && cur_char == 'l') || (ctrl_down_last && cur_char == 'u')) {
c0004a67:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0004a6b:	74 06                	je     c0004a73 <intr_keyboard_handler+0x1c8>
/work/x86_os_my/device/keyboard.c:200 (discriminator 1)
c0004a6d:	80 7d ef 6c          	cmpb   $0x6c,-0x11(%ebp)
c0004a71:	74 0c                	je     c0004a7f <intr_keyboard_handler+0x1d4>
/work/x86_os_my/device/keyboard.c:200 (discriminator 3)
c0004a73:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0004a77:	74 10                	je     c0004a89 <intr_keyboard_handler+0x1de>
/work/x86_os_my/device/keyboard.c:200 (discriminator 4)
c0004a79:	80 7d ef 75          	cmpb   $0x75,-0x11(%ebp)
c0004a7d:	75 0a                	jne    c0004a89 <intr_keyboard_handler+0x1de>
/work/x86_os_my/device/keyboard.c:201
	    cur_char -= 'a';
c0004a7f:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c0004a83:	83 e8 61             	sub    $0x61,%eax
c0004a86:	88 45 ef             	mov    %al,-0x11(%ebp)
/work/x86_os_my/device/keyboard.c:207
	 }
      /****************************************************************/
      
   /* 若kbd_buf中未满并且待加入的cur_char不为0,
    * 则将其加入到缓冲区kbd_buf中 */
	 if (!ioq_full(&kbd_buf)) {
c0004a89:	83 ec 0c             	sub    $0xc,%esp
c0004a8c:	68 c0 14 01 c0       	push   $0xc00114c0
c0004a91:	e8 58 01 00 00       	call   c0004bee <ioq_full>
c0004a96:	83 c4 10             	add    $0x10,%esp
c0004a99:	85 c0                	test   %eax,%eax
c0004a9b:	0f 85 9c 00 00 00    	jne    c0004b3d <intr_keyboard_handler+0x292>
/work/x86_os_my/device/keyboard.c:208
	    ioq_putchar(&kbd_buf, cur_char);
c0004aa1:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
c0004aa5:	83 ec 08             	sub    $0x8,%esp
c0004aa8:	50                   	push   %eax
c0004aa9:	68 c0 14 01 c0       	push   $0xc00114c0
c0004aae:	e8 0d 03 00 00       	call   c0004dc0 <ioq_putchar>
c0004ab3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/keyboard.c:210
	 }
	 return;
c0004ab6:	e9 82 00 00 00       	jmp    c0004b3d <intr_keyboard_handler+0x292>
/work/x86_os_my/device/keyboard.c:214
      }

      /* 记录本次是否按下了下面几类控制键之一,供下次键入时判断组合键 */
      if (scancode == ctrl_l_make || scancode == ctrl_r_make) {
c0004abb:	66 83 7d f6 1d       	cmpw   $0x1d,-0xa(%ebp)
c0004ac0:	74 08                	je     c0004aca <intr_keyboard_handler+0x21f>
/work/x86_os_my/device/keyboard.c:214 (discriminator 1)
c0004ac2:	66 81 7d f6 1d e0    	cmpw   $0xe01d,-0xa(%ebp)
c0004ac8:	75 0c                	jne    c0004ad6 <intr_keyboard_handler+0x22b>
/work/x86_os_my/device/keyboard.c:215
	 ctrl_status = true;
c0004aca:	c7 05 6c 08 01 c0 01 	movl   $0x1,0xc001086c
c0004ad1:	00 00 00 
c0004ad4:	eb 50                	jmp    c0004b26 <intr_keyboard_handler+0x27b>
/work/x86_os_my/device/keyboard.c:216
      } else if (scancode == shift_l_make || scancode == shift_r_make) {
c0004ad6:	66 83 7d f6 2a       	cmpw   $0x2a,-0xa(%ebp)
c0004adb:	74 07                	je     c0004ae4 <intr_keyboard_handler+0x239>
/work/x86_os_my/device/keyboard.c:216 (discriminator 1)
c0004add:	66 83 7d f6 36       	cmpw   $0x36,-0xa(%ebp)
c0004ae2:	75 0c                	jne    c0004af0 <intr_keyboard_handler+0x245>
/work/x86_os_my/device/keyboard.c:217
	 shift_status = true;
c0004ae4:	c7 05 70 08 01 c0 01 	movl   $0x1,0xc0010870
c0004aeb:	00 00 00 
c0004aee:	eb 36                	jmp    c0004b26 <intr_keyboard_handler+0x27b>
/work/x86_os_my/device/keyboard.c:218
      } else if (scancode == alt_l_make || scancode == alt_r_make) {
c0004af0:	66 83 7d f6 38       	cmpw   $0x38,-0xa(%ebp)
c0004af5:	74 08                	je     c0004aff <intr_keyboard_handler+0x254>
/work/x86_os_my/device/keyboard.c:218 (discriminator 1)
c0004af7:	66 81 7d f6 38 e0    	cmpw   $0xe038,-0xa(%ebp)
c0004afd:	75 0c                	jne    c0004b0b <intr_keyboard_handler+0x260>
/work/x86_os_my/device/keyboard.c:219
	 alt_status = true;
c0004aff:	c7 05 74 08 01 c0 01 	movl   $0x1,0xc0010874
c0004b06:	00 00 00 
c0004b09:	eb 1b                	jmp    c0004b26 <intr_keyboard_handler+0x27b>
/work/x86_os_my/device/keyboard.c:220
      } else if (scancode == caps_lock_make) {
c0004b0b:	66 83 7d f6 3a       	cmpw   $0x3a,-0xa(%ebp)
c0004b10:	75 2e                	jne    c0004b40 <intr_keyboard_handler+0x295>
/work/x86_os_my/device/keyboard.c:223
      /* 不管之前是否有按下caps_lock键,当再次按下时则状态取反,
       * 即:已经开启时,再按下同样的键是关闭。关闭时按下表示开启。*/
	 caps_lock_status = !caps_lock_status;
c0004b12:	a1 78 08 01 c0       	mov    0xc0010878,%eax
c0004b17:	85 c0                	test   %eax,%eax
c0004b19:	0f 94 c0             	sete   %al
c0004b1c:	0f b6 c0             	movzbl %al,%eax
c0004b1f:	a3 78 08 01 c0       	mov    %eax,0xc0010878
/work/x86_os_my/device/keyboard.c:157

   } 
   /* 若为通码,只处理数组中定义的键以及alt_right和ctrl键,全是make_code */
   else if ((scancode > 0x00 && scancode < 0x3b) || \
	       (scancode == alt_r_make) || \
	       (scancode == ctrl_r_make)) {
c0004b24:	eb 1a                	jmp    c0004b40 <intr_keyboard_handler+0x295>
/work/x86_os_my/device/keyboard.c:157 (discriminator 3)
c0004b26:	eb 18                	jmp    c0004b40 <intr_keyboard_handler+0x295>
/work/x86_os_my/device/keyboard.c:226
      /* 不管之前是否有按下caps_lock键,当再次按下时则状态取反,
       * 即:已经开启时,再按下同样的键是关闭。关闭时按下表示开启。*/
	 caps_lock_status = !caps_lock_status;
      }
   } else {
      put_str("unknown key\n");
c0004b28:	83 ec 0c             	sub    $0xc,%esp
c0004b2b:	68 cd c1 00 c0       	push   $0xc000c1cd
c0004b30:	e8 3b d6 ff ff       	call   c0002170 <put_str>
c0004b35:	83 c4 10             	add    $0x10,%esp
c0004b38:	eb 07                	jmp    c0004b41 <intr_keyboard_handler+0x296>
/work/x86_os_my/device/keyboard.c:151
	 shift_status = false;
      } else if (make_code == alt_l_make || make_code == alt_r_make) {
	 alt_status = false;
      } /* 由于caps_lock不是弹起后关闭,所以需要单独处理 */

      return;   // 直接返回结束此次中断处理程序
c0004b3a:	90                   	nop
c0004b3b:	eb 04                	jmp    c0004b41 <intr_keyboard_handler+0x296>
/work/x86_os_my/device/keyboard.c:210
   /* 若kbd_buf中未满并且待加入的cur_char不为0,
    * 则将其加入到缓冲区kbd_buf中 */
	 if (!ioq_full(&kbd_buf)) {
	    ioq_putchar(&kbd_buf, cur_char);
	 }
	 return;
c0004b3d:	90                   	nop
c0004b3e:	eb 01                	jmp    c0004b41 <intr_keyboard_handler+0x296>
/work/x86_os_my/device/keyboard.c:157

   } 
   /* 若为通码,只处理数组中定义的键以及alt_right和ctrl键,全是make_code */
   else if ((scancode > 0x00 && scancode < 0x3b) || \
	       (scancode == alt_r_make) || \
	       (scancode == ctrl_r_make)) {
c0004b40:	90                   	nop
/work/x86_os_my/device/keyboard.c:228
	 caps_lock_status = !caps_lock_status;
      }
   } else {
      put_str("unknown key\n");
   }
}
c0004b41:	c9                   	leave  
c0004b42:	c3                   	ret    

c0004b43 <keyboard_init>:
keyboard_init():
/work/x86_os_my/device/keyboard.c:231

/* 键盘初始化 */
void keyboard_init() {
c0004b43:	55                   	push   %ebp
c0004b44:	89 e5                	mov    %esp,%ebp
c0004b46:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/keyboard.c:232
   put_str("keyboard init start\n");
c0004b49:	83 ec 0c             	sub    $0xc,%esp
c0004b4c:	68 da c1 00 c0       	push   $0xc000c1da
c0004b51:	e8 1a d6 ff ff       	call   c0002170 <put_str>
c0004b56:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/keyboard.c:233
   ioqueue_init(&kbd_buf);
c0004b59:	83 ec 0c             	sub    $0xc,%esp
c0004b5c:	68 c0 14 01 c0       	push   $0xc00114c0
c0004b61:	e8 28 00 00 00       	call   c0004b8e <ioqueue_init>
c0004b66:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/keyboard.c:234
   register_handler(0x21, intr_keyboard_handler);
c0004b69:	83 ec 08             	sub    $0x8,%esp
c0004b6c:	68 ab 48 00 c0       	push   $0xc00048ab
c0004b71:	6a 21                	push   $0x21
c0004b73:	e8 33 ce ff ff       	call   c00019ab <register_handler>
c0004b78:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/keyboard.c:235
   put_str("keyboard init done\n");
c0004b7b:	83 ec 0c             	sub    $0xc,%esp
c0004b7e:	68 ef c1 00 c0       	push   $0xc000c1ef
c0004b83:	e8 e8 d5 ff ff       	call   c0002170 <put_str>
c0004b88:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/keyboard.c:236
}
c0004b8b:	90                   	nop
c0004b8c:	c9                   	leave  
c0004b8d:	c3                   	ret    

c0004b8e <ioqueue_init>:
ioqueue_init():
/work/x86_os_my/device/ioqueue.c:7
#include "interrupt.h"
#include "global.h"
#include "debug.h"

/* 初始化io队列ioq */
void ioqueue_init(struct ioqueue* ioq) {
c0004b8e:	55                   	push   %ebp
c0004b8f:	89 e5                	mov    %esp,%ebp
c0004b91:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/ioqueue.c:8
   lock_init(&ioq->lock);     // 初始化io队列的锁
c0004b94:	8b 45 08             	mov    0x8(%ebp),%eax
c0004b97:	83 ec 0c             	sub    $0xc,%esp
c0004b9a:	50                   	push   %eax
c0004b9b:	e8 05 fa ff ff       	call   c00045a5 <lock_init>
c0004ba0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:9
   ioq->producer = ioq->consumer = NULL;  // 生产者和消费者置空
c0004ba3:	8b 45 08             	mov    0x8(%ebp),%eax
c0004ba6:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
c0004bad:	8b 45 08             	mov    0x8(%ebp),%eax
c0004bb0:	8b 50 20             	mov    0x20(%eax),%edx
c0004bb3:	8b 45 08             	mov    0x8(%ebp),%eax
c0004bb6:	89 50 1c             	mov    %edx,0x1c(%eax)
/work/x86_os_my/device/ioqueue.c:10
   ioq->head = ioq->tail = 0; // 队列的首尾指针指向缓冲区数组第0个位置
c0004bb9:	8b 45 08             	mov    0x8(%ebp),%eax
c0004bbc:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)
c0004bc3:	8b 45 08             	mov    0x8(%ebp),%eax
c0004bc6:	8b 50 68             	mov    0x68(%eax),%edx
c0004bc9:	8b 45 08             	mov    0x8(%ebp),%eax
c0004bcc:	89 50 64             	mov    %edx,0x64(%eax)
/work/x86_os_my/device/ioqueue.c:11
}
c0004bcf:	90                   	nop
c0004bd0:	c9                   	leave  
c0004bd1:	c3                   	ret    

c0004bd2 <next_pos>:
next_pos():
/work/x86_os_my/device/ioqueue.c:14

/* 返回pos在缓冲区中的下一个位置值 */
static int32_t next_pos(int32_t pos) {
c0004bd2:	55                   	push   %ebp
c0004bd3:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/device/ioqueue.c:15
   return (pos + 1) % bufsize; 
c0004bd5:	8b 45 08             	mov    0x8(%ebp),%eax
c0004bd8:	8d 50 01             	lea    0x1(%eax),%edx
c0004bdb:	89 d0                	mov    %edx,%eax
c0004bdd:	c1 f8 1f             	sar    $0x1f,%eax
c0004be0:	c1 e8 1a             	shr    $0x1a,%eax
c0004be3:	01 c2                	add    %eax,%edx
c0004be5:	83 e2 3f             	and    $0x3f,%edx
c0004be8:	29 c2                	sub    %eax,%edx
c0004bea:	89 d0                	mov    %edx,%eax
/work/x86_os_my/device/ioqueue.c:16
}
c0004bec:	5d                   	pop    %ebp
c0004bed:	c3                   	ret    

c0004bee <ioq_full>:
ioq_full():
/work/x86_os_my/device/ioqueue.c:19

/* 判断队列是否已满 */
bool ioq_full(struct ioqueue* ioq) {
c0004bee:	55                   	push   %ebp
c0004bef:	89 e5                	mov    %esp,%ebp
c0004bf1:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/ioqueue.c:20
   ASSERT(intr_get_status() == INTR_OFF);
c0004bf4:	e8 8e cd ff ff       	call   c0001987 <intr_get_status>
c0004bf9:	85 c0                	test   %eax,%eax
c0004bfb:	74 19                	je     c0004c16 <ioq_full+0x28>
/work/x86_os_my/device/ioqueue.c:20 (discriminator 1)
c0004bfd:	68 04 c2 00 c0       	push   $0xc000c204
c0004c02:	68 68 c2 00 c0       	push   $0xc000c268
c0004c07:	6a 14                	push   $0x14
c0004c09:	68 22 c2 00 c0       	push   $0xc000c222
c0004c0e:	e8 0e d7 ff ff       	call   c0002321 <panic_spin>
c0004c13:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:21
   return next_pos(ioq->head) == ioq->tail;
c0004c16:	8b 45 08             	mov    0x8(%ebp),%eax
c0004c19:	8b 40 64             	mov    0x64(%eax),%eax
c0004c1c:	83 ec 0c             	sub    $0xc,%esp
c0004c1f:	50                   	push   %eax
c0004c20:	e8 ad ff ff ff       	call   c0004bd2 <next_pos>
c0004c25:	83 c4 10             	add    $0x10,%esp
c0004c28:	89 c2                	mov    %eax,%edx
c0004c2a:	8b 45 08             	mov    0x8(%ebp),%eax
c0004c2d:	8b 40 68             	mov    0x68(%eax),%eax
c0004c30:	39 c2                	cmp    %eax,%edx
c0004c32:	0f 94 c0             	sete   %al
c0004c35:	0f b6 c0             	movzbl %al,%eax
/work/x86_os_my/device/ioqueue.c:22
}
c0004c38:	c9                   	leave  
c0004c39:	c3                   	ret    

c0004c3a <ioq_empty>:
ioq_empty():
/work/x86_os_my/device/ioqueue.c:25

/* 判断队列是否已空 */
static bool ioq_empty(struct ioqueue* ioq) {
c0004c3a:	55                   	push   %ebp
c0004c3b:	89 e5                	mov    %esp,%ebp
c0004c3d:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/ioqueue.c:26
   ASSERT(intr_get_status() == INTR_OFF);
c0004c40:	e8 42 cd ff ff       	call   c0001987 <intr_get_status>
c0004c45:	85 c0                	test   %eax,%eax
c0004c47:	74 19                	je     c0004c62 <ioq_empty+0x28>
/work/x86_os_my/device/ioqueue.c:26 (discriminator 1)
c0004c49:	68 04 c2 00 c0       	push   $0xc000c204
c0004c4e:	68 74 c2 00 c0       	push   $0xc000c274
c0004c53:	6a 1a                	push   $0x1a
c0004c55:	68 22 c2 00 c0       	push   $0xc000c222
c0004c5a:	e8 c2 d6 ff ff       	call   c0002321 <panic_spin>
c0004c5f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:27
   return ioq->head == ioq->tail;
c0004c62:	8b 45 08             	mov    0x8(%ebp),%eax
c0004c65:	8b 50 64             	mov    0x64(%eax),%edx
c0004c68:	8b 45 08             	mov    0x8(%ebp),%eax
c0004c6b:	8b 40 68             	mov    0x68(%eax),%eax
c0004c6e:	39 c2                	cmp    %eax,%edx
c0004c70:	0f 94 c0             	sete   %al
c0004c73:	0f b6 c0             	movzbl %al,%eax
/work/x86_os_my/device/ioqueue.c:28
}
c0004c76:	c9                   	leave  
c0004c77:	c3                   	ret    

c0004c78 <ioq_wait>:
ioq_wait():
/work/x86_os_my/device/ioqueue.c:31

/* 使当前生产者或消费者在此缓冲区上等待 */
static void ioq_wait(struct task_struct** waiter) {
c0004c78:	55                   	push   %ebp
c0004c79:	89 e5                	mov    %esp,%ebp
c0004c7b:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/ioqueue.c:32
   ASSERT(*waiter == NULL && waiter != NULL);
c0004c7e:	8b 45 08             	mov    0x8(%ebp),%eax
c0004c81:	8b 00                	mov    (%eax),%eax
c0004c83:	85 c0                	test   %eax,%eax
c0004c85:	75 06                	jne    c0004c8d <ioq_wait+0x15>
/work/x86_os_my/device/ioqueue.c:32 (discriminator 1)
c0004c87:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0004c8b:	75 19                	jne    c0004ca6 <ioq_wait+0x2e>
/work/x86_os_my/device/ioqueue.c:32 (discriminator 3)
c0004c8d:	68 34 c2 00 c0       	push   $0xc000c234
c0004c92:	68 80 c2 00 c0       	push   $0xc000c280
c0004c97:	6a 20                	push   $0x20
c0004c99:	68 22 c2 00 c0       	push   $0xc000c222
c0004c9e:	e8 7e d6 ff ff       	call   c0002321 <panic_spin>
c0004ca3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:33
   *waiter = running_thread();
c0004ca6:	e8 ff ee ff ff       	call   c0003baa <running_thread>
c0004cab:	89 c2                	mov    %eax,%edx
c0004cad:	8b 45 08             	mov    0x8(%ebp),%eax
c0004cb0:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/device/ioqueue.c:34
   thread_block(TASK_BLOCKED);
c0004cb2:	83 ec 0c             	sub    $0xc,%esp
c0004cb5:	6a 02                	push   $0x2
c0004cb7:	e8 91 f3 ff ff       	call   c000404d <thread_block>
c0004cbc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:35
}
c0004cbf:	90                   	nop
c0004cc0:	c9                   	leave  
c0004cc1:	c3                   	ret    

c0004cc2 <wakeup>:
wakeup():
/work/x86_os_my/device/ioqueue.c:38

/* 唤醒waiter */
static void wakeup(struct task_struct** waiter) {
c0004cc2:	55                   	push   %ebp
c0004cc3:	89 e5                	mov    %esp,%ebp
c0004cc5:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/ioqueue.c:39
   ASSERT(*waiter != NULL);
c0004cc8:	8b 45 08             	mov    0x8(%ebp),%eax
c0004ccb:	8b 00                	mov    (%eax),%eax
c0004ccd:	85 c0                	test   %eax,%eax
c0004ccf:	75 19                	jne    c0004cea <wakeup+0x28>
/work/x86_os_my/device/ioqueue.c:39 (discriminator 1)
c0004cd1:	68 56 c2 00 c0       	push   $0xc000c256
c0004cd6:	68 8c c2 00 c0       	push   $0xc000c28c
c0004cdb:	6a 27                	push   $0x27
c0004cdd:	68 22 c2 00 c0       	push   $0xc000c222
c0004ce2:	e8 3a d6 ff ff       	call   c0002321 <panic_spin>
c0004ce7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:40
   thread_unblock(*waiter); 
c0004cea:	8b 45 08             	mov    0x8(%ebp),%eax
c0004ced:	8b 00                	mov    (%eax),%eax
c0004cef:	83 ec 0c             	sub    $0xc,%esp
c0004cf2:	50                   	push   %eax
c0004cf3:	e8 b8 f3 ff ff       	call   c00040b0 <thread_unblock>
c0004cf8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:41
   *waiter = NULL;
c0004cfb:	8b 45 08             	mov    0x8(%ebp),%eax
c0004cfe:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/device/ioqueue.c:42
}
c0004d04:	90                   	nop
c0004d05:	c9                   	leave  
c0004d06:	c3                   	ret    

c0004d07 <ioq_getchar>:
ioq_getchar():
/work/x86_os_my/device/ioqueue.c:45

/* 消费者从ioq队列中获取一个字符 */
char ioq_getchar(struct ioqueue* ioq) {
c0004d07:	55                   	push   %ebp
c0004d08:	89 e5                	mov    %esp,%ebp
c0004d0a:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/ioqueue.c:46
   ASSERT(intr_get_status() == INTR_OFF);
c0004d0d:	e8 75 cc ff ff       	call   c0001987 <intr_get_status>
c0004d12:	85 c0                	test   %eax,%eax
c0004d14:	74 4b                	je     c0004d61 <ioq_getchar+0x5a>
/work/x86_os_my/device/ioqueue.c:46 (discriminator 1)
c0004d16:	68 04 c2 00 c0       	push   $0xc000c204
c0004d1b:	68 94 c2 00 c0       	push   $0xc000c294
c0004d20:	6a 2e                	push   $0x2e
c0004d22:	68 22 c2 00 c0       	push   $0xc000c222
c0004d27:	e8 f5 d5 ff ff       	call   c0002321 <panic_spin>
c0004d2c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:51 (discriminator 1)

/* 若缓冲区(队列)为空,把消费者ioq->consumer记为当前线程自己,
 * 目的是将来生产者往缓冲区里装商品后,生产者知道唤醒哪个消费者,
 * 也就是唤醒当前线程自己*/
   while (ioq_empty(ioq)) {
c0004d2f:	eb 30                	jmp    c0004d61 <ioq_getchar+0x5a>
/work/x86_os_my/device/ioqueue.c:52
      lock_acquire(&ioq->lock);	 
c0004d31:	8b 45 08             	mov    0x8(%ebp),%eax
c0004d34:	83 ec 0c             	sub    $0xc,%esp
c0004d37:	50                   	push   %eax
c0004d38:	e8 42 fa ff ff       	call   c000477f <lock_acquire>
c0004d3d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:53
      ioq_wait(&ioq->consumer);
c0004d40:	8b 45 08             	mov    0x8(%ebp),%eax
c0004d43:	83 c0 20             	add    $0x20,%eax
c0004d46:	83 ec 0c             	sub    $0xc,%esp
c0004d49:	50                   	push   %eax
c0004d4a:	e8 29 ff ff ff       	call   c0004c78 <ioq_wait>
c0004d4f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:54
      lock_release(&ioq->lock);
c0004d52:	8b 45 08             	mov    0x8(%ebp),%eax
c0004d55:	83 ec 0c             	sub    $0xc,%esp
c0004d58:	50                   	push   %eax
c0004d59:	e8 98 fa ff ff       	call   c00047f6 <lock_release>
c0004d5e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:51
   ASSERT(intr_get_status() == INTR_OFF);

/* 若缓冲区(队列)为空,把消费者ioq->consumer记为当前线程自己,
 * 目的是将来生产者往缓冲区里装商品后,生产者知道唤醒哪个消费者,
 * 也就是唤醒当前线程自己*/
   while (ioq_empty(ioq)) {
c0004d61:	83 ec 0c             	sub    $0xc,%esp
c0004d64:	ff 75 08             	pushl  0x8(%ebp)
c0004d67:	e8 ce fe ff ff       	call   c0004c3a <ioq_empty>
c0004d6c:	83 c4 10             	add    $0x10,%esp
c0004d6f:	85 c0                	test   %eax,%eax
c0004d71:	75 be                	jne    c0004d31 <ioq_getchar+0x2a>
/work/x86_os_my/device/ioqueue.c:57
      lock_acquire(&ioq->lock);	 
      ioq_wait(&ioq->consumer);
      lock_release(&ioq->lock);
   }

   char byte = ioq->buf[ioq->tail];	  // 从缓冲区中取出
c0004d73:	8b 45 08             	mov    0x8(%ebp),%eax
c0004d76:	8b 40 68             	mov    0x68(%eax),%eax
c0004d79:	8b 55 08             	mov    0x8(%ebp),%edx
c0004d7c:	0f b6 44 02 24       	movzbl 0x24(%edx,%eax,1),%eax
c0004d81:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/device/ioqueue.c:58
   ioq->tail = next_pos(ioq->tail);	  // 把读游标移到下一位置
c0004d84:	8b 45 08             	mov    0x8(%ebp),%eax
c0004d87:	8b 40 68             	mov    0x68(%eax),%eax
c0004d8a:	83 ec 0c             	sub    $0xc,%esp
c0004d8d:	50                   	push   %eax
c0004d8e:	e8 3f fe ff ff       	call   c0004bd2 <next_pos>
c0004d93:	83 c4 10             	add    $0x10,%esp
c0004d96:	89 c2                	mov    %eax,%edx
c0004d98:	8b 45 08             	mov    0x8(%ebp),%eax
c0004d9b:	89 50 68             	mov    %edx,0x68(%eax)
/work/x86_os_my/device/ioqueue.c:60

   if (ioq->producer != NULL) {
c0004d9e:	8b 45 08             	mov    0x8(%ebp),%eax
c0004da1:	8b 40 1c             	mov    0x1c(%eax),%eax
c0004da4:	85 c0                	test   %eax,%eax
c0004da6:	74 12                	je     c0004dba <ioq_getchar+0xb3>
/work/x86_os_my/device/ioqueue.c:61
      wakeup(&ioq->producer);		  // 唤醒生产者
c0004da8:	8b 45 08             	mov    0x8(%ebp),%eax
c0004dab:	83 c0 1c             	add    $0x1c,%eax
c0004dae:	83 ec 0c             	sub    $0xc,%esp
c0004db1:	50                   	push   %eax
c0004db2:	e8 0b ff ff ff       	call   c0004cc2 <wakeup>
c0004db7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:64
   }

   return byte; 
c0004dba:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
/work/x86_os_my/device/ioqueue.c:65
}
c0004dbe:	c9                   	leave  
c0004dbf:	c3                   	ret    

c0004dc0 <ioq_putchar>:
ioq_putchar():
/work/x86_os_my/device/ioqueue.c:68

/* 生产者往ioq队列中写入一个字符byte */
void ioq_putchar(struct ioqueue* ioq, char byte) {
c0004dc0:	55                   	push   %ebp
c0004dc1:	89 e5                	mov    %esp,%ebp
c0004dc3:	83 ec 18             	sub    $0x18,%esp
c0004dc6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0004dc9:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/device/ioqueue.c:69
   ASSERT(intr_get_status() == INTR_OFF);
c0004dcc:	e8 b6 cb ff ff       	call   c0001987 <intr_get_status>
c0004dd1:	85 c0                	test   %eax,%eax
c0004dd3:	74 4b                	je     c0004e20 <ioq_putchar+0x60>
/work/x86_os_my/device/ioqueue.c:69 (discriminator 1)
c0004dd5:	68 04 c2 00 c0       	push   $0xc000c204
c0004dda:	68 a0 c2 00 c0       	push   $0xc000c2a0
c0004ddf:	6a 45                	push   $0x45
c0004de1:	68 22 c2 00 c0       	push   $0xc000c222
c0004de6:	e8 36 d5 ff ff       	call   c0002321 <panic_spin>
c0004deb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:74 (discriminator 1)

/* 若缓冲区(队列)已经满了,把生产者ioq->producer记为自己,
 * 为的是当缓冲区里的东西被消费者取完后让消费者知道唤醒哪个生产者,
 * 也就是唤醒当前线程自己*/
   while (ioq_full(ioq)) {
c0004dee:	eb 30                	jmp    c0004e20 <ioq_putchar+0x60>
/work/x86_os_my/device/ioqueue.c:75
      lock_acquire(&ioq->lock);
c0004df0:	8b 45 08             	mov    0x8(%ebp),%eax
c0004df3:	83 ec 0c             	sub    $0xc,%esp
c0004df6:	50                   	push   %eax
c0004df7:	e8 83 f9 ff ff       	call   c000477f <lock_acquire>
c0004dfc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:76
      ioq_wait(&ioq->producer);
c0004dff:	8b 45 08             	mov    0x8(%ebp),%eax
c0004e02:	83 c0 1c             	add    $0x1c,%eax
c0004e05:	83 ec 0c             	sub    $0xc,%esp
c0004e08:	50                   	push   %eax
c0004e09:	e8 6a fe ff ff       	call   c0004c78 <ioq_wait>
c0004e0e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:77
      lock_release(&ioq->lock);
c0004e11:	8b 45 08             	mov    0x8(%ebp),%eax
c0004e14:	83 ec 0c             	sub    $0xc,%esp
c0004e17:	50                   	push   %eax
c0004e18:	e8 d9 f9 ff ff       	call   c00047f6 <lock_release>
c0004e1d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:74
   ASSERT(intr_get_status() == INTR_OFF);

/* 若缓冲区(队列)已经满了,把生产者ioq->producer记为自己,
 * 为的是当缓冲区里的东西被消费者取完后让消费者知道唤醒哪个生产者,
 * 也就是唤醒当前线程自己*/
   while (ioq_full(ioq)) {
c0004e20:	83 ec 0c             	sub    $0xc,%esp
c0004e23:	ff 75 08             	pushl  0x8(%ebp)
c0004e26:	e8 c3 fd ff ff       	call   c0004bee <ioq_full>
c0004e2b:	83 c4 10             	add    $0x10,%esp
c0004e2e:	85 c0                	test   %eax,%eax
c0004e30:	75 be                	jne    c0004df0 <ioq_putchar+0x30>
/work/x86_os_my/device/ioqueue.c:79
      lock_acquire(&ioq->lock);
      ioq_wait(&ioq->producer);
      lock_release(&ioq->lock);
   }
   ioq->buf[ioq->head] = byte;      // 把字节放入缓冲区中
c0004e32:	8b 45 08             	mov    0x8(%ebp),%eax
c0004e35:	8b 40 64             	mov    0x64(%eax),%eax
c0004e38:	8b 55 08             	mov    0x8(%ebp),%edx
c0004e3b:	0f b6 4d f4          	movzbl -0xc(%ebp),%ecx
c0004e3f:	88 4c 02 24          	mov    %cl,0x24(%edx,%eax,1)
/work/x86_os_my/device/ioqueue.c:80
   ioq->head = next_pos(ioq->head); // 把写游标移到下一位置
c0004e43:	8b 45 08             	mov    0x8(%ebp),%eax
c0004e46:	8b 40 64             	mov    0x64(%eax),%eax
c0004e49:	83 ec 0c             	sub    $0xc,%esp
c0004e4c:	50                   	push   %eax
c0004e4d:	e8 80 fd ff ff       	call   c0004bd2 <next_pos>
c0004e52:	83 c4 10             	add    $0x10,%esp
c0004e55:	89 c2                	mov    %eax,%edx
c0004e57:	8b 45 08             	mov    0x8(%ebp),%eax
c0004e5a:	89 50 64             	mov    %edx,0x64(%eax)
/work/x86_os_my/device/ioqueue.c:82

   if (ioq->consumer != NULL) {
c0004e5d:	8b 45 08             	mov    0x8(%ebp),%eax
c0004e60:	8b 40 20             	mov    0x20(%eax),%eax
c0004e63:	85 c0                	test   %eax,%eax
c0004e65:	74 12                	je     c0004e79 <ioq_putchar+0xb9>
/work/x86_os_my/device/ioqueue.c:83
      wakeup(&ioq->consumer);          // 唤醒消费者
c0004e67:	8b 45 08             	mov    0x8(%ebp),%eax
c0004e6a:	83 c0 20             	add    $0x20,%eax
c0004e6d:	83 ec 0c             	sub    $0xc,%esp
c0004e70:	50                   	push   %eax
c0004e71:	e8 4c fe ff ff       	call   c0004cc2 <wakeup>
c0004e76:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:85
   }
}
c0004e79:	90                   	nop
c0004e7a:	c9                   	leave  
c0004e7b:	c3                   	ret    

c0004e7c <update_tss_esp>:
update_tss_esp():
/work/x86_os_my/userprog/tss.c:40
	uint32_t io_base;
}; 
static struct tss g_tss;

/* 更新tss中esp0字段的值为pthread的0级栈 */
void update_tss_esp(struct task_struct* pthread) {
c0004e7c:	55                   	push   %ebp
c0004e7d:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/userprog/tss.c:41
	g_tss.esp0 = (uint32_t*)((uint32_t)pthread + PG_SIZE);
c0004e7f:	8b 45 08             	mov    0x8(%ebp),%eax
c0004e82:	05 00 10 00 00       	add    $0x1000,%eax
c0004e87:	a3 84 08 01 c0       	mov    %eax,0xc0010884
/work/x86_os_my/userprog/tss.c:42
}
c0004e8c:	90                   	nop
c0004e8d:	5d                   	pop    %ebp
c0004e8e:	c3                   	ret    

c0004e8f <make_gdt_desc>:
make_gdt_desc():
/work/x86_os_my/userprog/tss.c:45

/* c语言方式，创建gdt描述符 */
static struct gdt_desc make_gdt_desc(uint32_t* desc_addr, uint32_t limit, uint8_t attr_low, uint8_t attr_high) {
c0004e8f:	55                   	push   %ebp
c0004e90:	89 e5                	mov    %esp,%ebp
c0004e92:	83 ec 18             	sub    $0x18,%esp
c0004e95:	8b 55 14             	mov    0x14(%ebp),%edx
c0004e98:	8b 45 18             	mov    0x18(%ebp),%eax
c0004e9b:	88 55 ec             	mov    %dl,-0x14(%ebp)
c0004e9e:	88 45 e8             	mov    %al,-0x18(%ebp)
/work/x86_os_my/userprog/tss.c:46
	uint32_t desc_base = (uint32_t)desc_addr;
c0004ea1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0004ea4:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/userprog/tss.c:48
	struct gdt_desc desc;
	desc.limit_low_word = limit & 0x0000ffff;
c0004ea7:	8b 45 10             	mov    0x10(%ebp),%eax
c0004eaa:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
/work/x86_os_my/userprog/tss.c:49
	desc.base_low_word = desc_base & 0x0000ffff;
c0004eae:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0004eb1:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
/work/x86_os_my/userprog/tss.c:50
	desc.base_mid_byte = ((desc_base & 0x00ff0000) >> 16);
c0004eb5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0004eb8:	25 00 00 ff 00       	and    $0xff0000,%eax
c0004ebd:	c1 e8 10             	shr    $0x10,%eax
c0004ec0:	88 45 f8             	mov    %al,-0x8(%ebp)
/work/x86_os_my/userprog/tss.c:51
	desc.attr_low_byte = (uint8_t)(attr_low);
c0004ec3:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0004ec7:	88 45 f9             	mov    %al,-0x7(%ebp)
/work/x86_os_my/userprog/tss.c:52
	desc.limit_high_attr_high = (((limit & 0x000f0000) >> 16) + (uint8_t)(attr_high));
c0004eca:	8b 45 10             	mov    0x10(%ebp),%eax
c0004ecd:	25 00 00 0f 00       	and    $0xf0000,%eax
c0004ed2:	c1 e8 10             	shr    $0x10,%eax
c0004ed5:	89 c2                	mov    %eax,%edx
c0004ed7:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c0004edb:	01 d0                	add    %edx,%eax
c0004edd:	88 45 fa             	mov    %al,-0x6(%ebp)
/work/x86_os_my/userprog/tss.c:53
	desc.base_high_byte = desc_base >> 24;
c0004ee0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0004ee3:	c1 e8 18             	shr    $0x18,%eax
c0004ee6:	88 45 fb             	mov    %al,-0x5(%ebp)
/work/x86_os_my/userprog/tss.c:54
	return desc;
c0004ee9:	8b 4d 08             	mov    0x8(%ebp),%ecx
c0004eec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004eef:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0004ef2:	89 01                	mov    %eax,(%ecx)
c0004ef4:	89 51 04             	mov    %edx,0x4(%ecx)
/work/x86_os_my/userprog/tss.c:55
}
c0004ef7:	8b 45 08             	mov    0x8(%ebp),%eax
c0004efa:	c9                   	leave  
c0004efb:	c2 04 00             	ret    $0x4

c0004efe <tss_init>:
tss_init():
/work/x86_os_my/userprog/tss.c:61

/* 在gdt中创建tss描述符
 * 重新加载 gdt
 * 加载 tr
 */
void tss_init() {
c0004efe:	55                   	push   %ebp
c0004eff:	89 e5                	mov    %esp,%ebp
c0004f01:	53                   	push   %ebx
c0004f02:	83 ec 24             	sub    $0x24,%esp
/work/x86_os_my/userprog/tss.c:62
	put_str("tss_init start\n");
c0004f05:	83 ec 0c             	sub    $0xc,%esp
c0004f08:	68 ac c2 00 c0       	push   $0xc000c2ac
c0004f0d:	e8 5e d2 ff ff       	call   c0002170 <put_str>
c0004f12:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/tss.c:63
	uint32_t tss_size = sizeof(g_tss);
c0004f15:	c7 45 f4 6c 00 00 00 	movl   $0x6c,-0xc(%ebp)
/work/x86_os_my/userprog/tss.c:64
	memset(&g_tss, 0, tss_size);
c0004f1c:	83 ec 04             	sub    $0x4,%esp
c0004f1f:	ff 75 f4             	pushl  -0xc(%ebp)
c0004f22:	6a 00                	push   $0x0
c0004f24:	68 80 08 01 c0       	push   $0xc0010880
c0004f29:	e8 95 e8 ff ff       	call   c00037c3 <memset>
c0004f2e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/tss.c:66
	
	g_tss.ss0 = SELECTOR_K_STACK;	// 0 级栈段的选择子 
c0004f31:	c7 05 88 08 01 c0 10 	movl   $0x10,0xc0010888
c0004f38:	00 00 00 
/work/x86_os_my/userprog/tss.c:67
	g_tss.io_base = tss_size;		// 当 IO 位图的偏移地址大于等于 TSS 大小减 1 时，就表示没有 IO 位图。
c0004f3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004f3e:	a3 e8 08 01 c0       	mov    %eax,0xc00108e8
/work/x86_os_my/userprog/tss.c:75
	 * 内核地址 0xC000_0900 是映射到 0x900 的 
	 * 在GDT中，第 0 个段描述符不可用，第 1 个为代码段，第 2 个为数据段和栈，第 3 个为显存段
	 */

	/* 在gdt中添加dpl为0的TSS描述符 */
	*((struct gdt_desc*)0xc0000920) = make_gdt_desc((uint32_t*)&g_tss, tss_size - 1, TSS_ATTR_LOW, TSS_ATTR_HIGH);
c0004f43:	bb 20 09 00 c0       	mov    $0xc0000920,%ebx
c0004f48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004f4b:	8d 50 ff             	lea    -0x1(%eax),%edx
c0004f4e:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0004f51:	83 ec 0c             	sub    $0xc,%esp
c0004f54:	68 80 00 00 00       	push   $0x80
c0004f59:	68 89 00 00 00       	push   $0x89
c0004f5e:	52                   	push   %edx
c0004f5f:	68 80 08 01 c0       	push   $0xc0010880
c0004f64:	50                   	push   %eax
c0004f65:	e8 25 ff ff ff       	call   c0004e8f <make_gdt_desc>
c0004f6a:	83 c4 1c             	add    $0x1c,%esp
c0004f6d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0004f70:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0004f73:	89 03                	mov    %eax,(%ebx)
c0004f75:	89 53 04             	mov    %edx,0x4(%ebx)
/work/x86_os_my/userprog/tss.c:78

	/* 在gdt中添加dpl为3的,用户级,数据段和代码段描述符 */
	*((struct gdt_desc*)0xc0000928) = make_gdt_desc((uint32_t*)0, 0xfffff, GDT_CODE_ATTR_LOW_DPL3, GDT_ATTR_HIGH);
c0004f78:	bb 28 09 00 c0       	mov    $0xc0000928,%ebx
c0004f7d:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0004f80:	83 ec 0c             	sub    $0xc,%esp
c0004f83:	68 c0 00 00 00       	push   $0xc0
c0004f88:	68 f8 00 00 00       	push   $0xf8
c0004f8d:	68 ff ff 0f 00       	push   $0xfffff
c0004f92:	6a 00                	push   $0x0
c0004f94:	50                   	push   %eax
c0004f95:	e8 f5 fe ff ff       	call   c0004e8f <make_gdt_desc>
c0004f9a:	83 c4 1c             	add    $0x1c,%esp
c0004f9d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0004fa0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0004fa3:	89 03                	mov    %eax,(%ebx)
c0004fa5:	89 53 04             	mov    %edx,0x4(%ebx)
/work/x86_os_my/userprog/tss.c:79
	*((struct gdt_desc*)0xc0000930) = make_gdt_desc((uint32_t*)0, 0xfffff, GDT_DATA_ATTR_LOW_DPL3, GDT_ATTR_HIGH);
c0004fa8:	bb 30 09 00 c0       	mov    $0xc0000930,%ebx
c0004fad:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0004fb0:	83 ec 0c             	sub    $0xc,%esp
c0004fb3:	68 c0 00 00 00       	push   $0xc0
c0004fb8:	68 f2 00 00 00       	push   $0xf2
c0004fbd:	68 ff ff 0f 00       	push   $0xfffff
c0004fc2:	6a 00                	push   $0x0
c0004fc4:	50                   	push   %eax
c0004fc5:	e8 c5 fe ff ff       	call   c0004e8f <make_gdt_desc>
c0004fca:	83 c4 1c             	add    $0x1c,%esp
c0004fcd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0004fd0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0004fd3:	89 03                	mov    %eax,(%ebx)
c0004fd5:	89 53 04             	mov    %edx,0x4(%ebx)
/work/x86_os_my/userprog/tss.c:83

	/* GDTR 16位的limit、32位的段基址 */
	// 先转换成 uint32_t 后，再将其转换成 uint64_t 位（不可一步到位转为 uint64_t）
	uint64_t gdt_operand = ((8 * 7 - 1) | ((uint64_t)(uint32_t)0xc0000900 << 16));   // 7个描述符大小
c0004fd8:	c7 45 e8 37 00 00 09 	movl   $0x9000037,-0x18(%ebp)
c0004fdf:	c7 45 ec 00 c0 00 00 	movl   $0xc000,-0x14(%ebp)
/work/x86_os_my/userprog/tss.c:84
	asm volatile ("lgdt %0" : : "m" (gdt_operand));
c0004fe6:	0f 01 55 e8          	lgdtl  -0x18(%ebp)
/work/x86_os_my/userprog/tss.c:85
	asm volatile ("ltr %w0" : : "r" (SELECTOR_TSS));
c0004fea:	b8 20 00 00 00       	mov    $0x20,%eax
c0004fef:	0f 00 d8             	ltr    %ax
/work/x86_os_my/userprog/tss.c:86
	put_str("tss_init and ltr done\n");
c0004ff2:	83 ec 0c             	sub    $0xc,%esp
c0004ff5:	68 bc c2 00 c0       	push   $0xc000c2bc
c0004ffa:	e8 71 d1 ff ff       	call   c0002170 <put_str>
c0004fff:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/tss.c:87
}
c0005002:	90                   	nop
c0005003:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0005006:	c9                   	leave  
c0005007:	c3                   	ret    

c0005008 <start_process>:
start_process():
/work/x86_os_my/userprog/process.c:17
extern void intr_exit(void);

/* 构建用户进程初始上下文信息
 * 填充用户进程的中断栈，并将中断栈的信息，利用iretd填充到 CPU 中
 */
void start_process(void* filename_) {
c0005008:	55                   	push   %ebp
c0005009:	89 e5                	mov    %esp,%ebp
c000500b:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/process.c:18
	void* function = filename_;
c000500e:	8b 45 08             	mov    0x8(%ebp),%eax
c0005011:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:19
	struct task_struct* cur = running_thread();
c0005014:	e8 91 eb ff ff       	call   c0003baa <running_thread>
c0005019:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/process.c:20
	cur->self_kstack += sizeof(struct thread_stack);
c000501c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000501f:	8b 00                	mov    (%eax),%eax
c0005021:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
c0005027:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000502a:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/userprog/process.c:21
	struct intr_stack* proc_stack = (struct intr_stack*)cur->self_kstack;	 
c000502c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000502f:	8b 00                	mov    (%eax),%eax
c0005031:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/userprog/process.c:22
	proc_stack->edi = proc_stack->esi = proc_stack->ebp = proc_stack->esp_dummy = 0;
c0005034:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005037:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
c000503e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005041:	8b 50 10             	mov    0x10(%eax),%edx
c0005044:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005047:	89 50 0c             	mov    %edx,0xc(%eax)
c000504a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000504d:	8b 50 0c             	mov    0xc(%eax),%edx
c0005050:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005053:	89 50 08             	mov    %edx,0x8(%eax)
c0005056:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005059:	8b 50 08             	mov    0x8(%eax),%edx
c000505c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000505f:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/userprog/process.c:23
	proc_stack->ebx = proc_stack->edx = proc_stack->ecx = proc_stack->eax = 0;
c0005062:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005065:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
c000506c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000506f:	8b 50 20             	mov    0x20(%eax),%edx
c0005072:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005075:	89 50 1c             	mov    %edx,0x1c(%eax)
c0005078:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000507b:	8b 50 1c             	mov    0x1c(%eax),%edx
c000507e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005081:	89 50 18             	mov    %edx,0x18(%eax)
c0005084:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005087:	8b 50 18             	mov    0x18(%eax),%edx
c000508a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000508d:	89 50 14             	mov    %edx,0x14(%eax)
/work/x86_os_my/userprog/process.c:28
	/* 在iretd返回时，如果发现未来的 CPL（也就是内核栈中 CS.RPL，或者说是返回到的用户进程的代码段CS.CPL）
	 * 权限低于（数值上大于） CPU 中段寄存器（如 DS、 ES、 FS、 GS）中选择子指向的内存段的 DPL，
	 * CPU 会自动将相应段寄存器的选择子置为 0 
	 * 这里gs的选择子在iretd返回后，会被自动清零。*/
	proc_stack->gs = 0;					// 用户态用不上,直接初始为0
c0005090:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005093:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
/work/x86_os_my/userprog/process.c:29
	proc_stack->ds = proc_stack->es = proc_stack->fs = SELECTOR_U_DATA;		// 用户级数据段
c000509a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000509d:	c7 40 28 33 00 00 00 	movl   $0x33,0x28(%eax)
c00050a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00050a7:	8b 50 28             	mov    0x28(%eax),%edx
c00050aa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00050ad:	89 50 2c             	mov    %edx,0x2c(%eax)
c00050b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00050b3:	8b 50 2c             	mov    0x2c(%eax),%edx
c00050b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00050b9:	89 50 30             	mov    %edx,0x30(%eax)
/work/x86_os_my/userprog/process.c:33

	/* 中断栈中，上边几个是中断处理函数手动压栈的，下边几个是硬件自动压栈的 */

	proc_stack->eip = function;			// 待执行的用户程序地址
c00050bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c00050bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00050c2:	89 50 38             	mov    %edx,0x38(%eax)
/work/x86_os_my/userprog/process.c:34
	proc_stack->cs = SELECTOR_U_CODE;	// 用户级代码段
c00050c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00050c8:	c7 40 3c 2b 00 00 00 	movl   $0x2b,0x3c(%eax)
/work/x86_os_my/userprog/process.c:35
	proc_stack->eflags = (EFLAGS_IOPL_0 | EFLAGS_MBS | EFLAGS_IF_1);
c00050cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00050d2:	c7 40 40 02 02 00 00 	movl   $0x202,0x40(%eax)
/work/x86_os_my/userprog/process.c:44
	 * process_activate 使用户进程页表生效【已经把CR3寄存器 更新为 用户进程的页表了】
	 * start_process    为用户进程创建3特权级栈【所以申请的内存空间来自用户进程的页表】
	 * 
	 * USER_STACK3_VADDR=(0xc0000000 - 0x1000)
	 */
	proc_stack->esp = (void*)((uint32_t)get_a_page(PF_USER, USER_STACK3_VADDR) + PG_SIZE) ;
c00050d9:	83 ec 08             	sub    $0x8,%esp
c00050dc:	68 00 f0 ff bf       	push   $0xbffff000
c00050e1:	6a 02                	push   $0x2
c00050e3:	e8 97 d9 ff ff       	call   c0002a7f <get_a_page>
c00050e8:	83 c4 10             	add    $0x10,%esp
c00050eb:	05 00 10 00 00       	add    $0x1000,%eax
c00050f0:	89 c2                	mov    %eax,%edx
c00050f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00050f5:	89 50 44             	mov    %edx,0x44(%eax)
/work/x86_os_my/userprog/process.c:45
	proc_stack->ss = SELECTOR_U_DATA;
c00050f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00050fb:	c7 40 48 33 00 00 00 	movl   $0x33,0x48(%eax)
/work/x86_os_my/userprog/process.c:52
	/* 将 esp 替换为 proc_stack
	 * 通过 jmp intr_exit 那里的一系列 pop 指令和 iretd 指令，
	 * 将 proc_stack 中的数据载入 CPU 的寄存器，
	 * 从而使程序“假装”退出中断，进入特权级 3
	 */
	asm volatile ("movl %0, %%esp; jmp intr_exit" : : "g" (proc_stack) : "memory");
c0005102:	8b 65 ec             	mov    -0x14(%ebp),%esp
c0005105:	e9 06 cb ff ff       	jmp    c0001c10 <intr_exit>
/work/x86_os_my/userprog/process.c:53
}
c000510a:	90                   	nop
c000510b:	c9                   	leave  
c000510c:	c3                   	ret    

c000510d <page_dir_activate>:
page_dir_activate():
/work/x86_os_my/userprog/process.c:56

/* 更新CR3寄存器，激活页目录表 */
void page_dir_activate(struct task_struct* p_thread) {
c000510d:	55                   	push   %ebp
c000510e:	89 e5                	mov    %esp,%ebp
c0005110:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/process.c:59
	
	/* 若为"内核线程",需要重新填充页表为0x100000 */
	uint32_t pagedir_phy_addr = 0x100000;	// 默认为内核的页目录物理地址,也就是内核线程所用的页目录表
c0005113:	c7 45 f4 00 00 10 00 	movl   $0x100000,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:62
	
	/* "用户态进程"有自己的页目录表 */
	if (p_thread->pgdir != NULL) {
c000511a:	8b 45 08             	mov    0x8(%ebp),%eax
c000511d:	8b 40 54             	mov    0x54(%eax),%eax
c0005120:	85 c0                	test   %eax,%eax
c0005122:	74 15                	je     c0005139 <page_dir_activate+0x2c>
/work/x86_os_my/userprog/process.c:63
		pagedir_phy_addr = addr_v2p((uint32_t)p_thread->pgdir);
c0005124:	8b 45 08             	mov    0x8(%ebp),%eax
c0005127:	8b 40 54             	mov    0x54(%eax),%eax
c000512a:	83 ec 0c             	sub    $0xc,%esp
c000512d:	50                   	push   %eax
c000512e:	e8 46 db ff ff       	call   c0002c79 <addr_v2p>
c0005133:	83 c4 10             	add    $0x10,%esp
c0005136:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:69
	}

	/* 更新页目录寄存器cr3,使新页表生效
	 * 实现进程间，虚拟地址空间的隔离。
	 */
	asm volatile ("movl %0, %%cr3" : : "r" (pagedir_phy_addr) : "memory");
c0005139:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000513c:	0f 22 d8             	mov    %eax,%cr3
/work/x86_os_my/userprog/process.c:70
}
c000513f:	90                   	nop
c0005140:	c9                   	leave  
c0005141:	c3                   	ret    

c0005142 <process_activate>:
process_activate():
/work/x86_os_my/userprog/process.c:76

/* 1.激活线程或进程的页表,【更新CR3寄存器】
 * 2.用户进程，更新tss中的esp0为进程的特权级0的栈
 * 【只有在任务调度时（中断时），才会切换页表及更新 0 级栈，因此 process_activate 是被"中断执行流"的 schedule 调用的！】
 */
void process_activate(struct task_struct* p_thread) {
c0005142:	55                   	push   %ebp
c0005143:	89 e5                	mov    %esp,%ebp
c0005145:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/userprog/process.c:77
	ASSERT(p_thread != NULL);
c0005148:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c000514c:	75 19                	jne    c0005167 <process_activate+0x25>
/work/x86_os_my/userprog/process.c:77 (discriminator 1)
c000514e:	68 d4 c2 00 c0       	push   $0xc000c2d4
c0005153:	68 90 c3 00 c0       	push   $0xc000c390
c0005158:	6a 4d                	push   $0x4d
c000515a:	68 e5 c2 00 c0       	push   $0xc000c2e5
c000515f:	e8 bd d1 ff ff       	call   c0002321 <panic_spin>
c0005164:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:80
	
	/* 激活该进程或线程的页目录表【重新加载了CR3】 */
	page_dir_activate(p_thread);
c0005167:	83 ec 0c             	sub    $0xc,%esp
c000516a:	ff 75 08             	pushl  0x8(%ebp)
c000516d:	e8 9b ff ff ff       	call   c000510d <page_dir_activate>
c0005172:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:83

	/* 内核线程特权级本身就是0,处理器进入中断时并不会从tss中获取0特权级栈地址,故不需要更新esp0 */
	if (p_thread->pgdir != NULL) {
c0005175:	8b 45 08             	mov    0x8(%ebp),%eax
c0005178:	8b 40 54             	mov    0x54(%eax),%eax
c000517b:	85 c0                	test   %eax,%eax
c000517d:	74 0e                	je     c000518d <process_activate+0x4b>
/work/x86_os_my/userprog/process.c:86
		/* 若为用户进程,更新该进程的esp0,用于此进程被中断时保留上下文 
		 * 需要从tss中获取0特权级栈地址 */
		update_tss_esp(p_thread);	//就一行：g_tss.esp0 = (uint32_t*)((uint32_t)pthread + PG_SIZE);
c000517f:	83 ec 0c             	sub    $0xc,%esp
c0005182:	ff 75 08             	pushl  0x8(%ebp)
c0005185:	e8 f2 fc ff ff       	call   c0004e7c <update_tss_esp>
c000518a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:88
	}
}
c000518d:	90                   	nop
c000518e:	c9                   	leave  
c000518f:	c3                   	ret    

c0005190 <create_page_dir>:
create_page_dir():
/work/x86_os_my/userprog/process.c:97
 * 
 * 要确保用户进程，在自己的地址空间中，能够访问到内核。
 * 即：任意进程的页目录表中，用户进程占第 0~767 个页目录项，内核占第 768~1023 个页目录项。
 * 0x300 = 768
 */
uint32_t* create_page_dir(void) {
c0005190:	55                   	push   %ebp
c0005191:	89 e5                	mov    %esp,%ebp
c0005193:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/process.c:100

	/* 用户进程的页表不能让用户直接访问到,所以在内核空间来申请 */
	uint32_t* page_dir_vaddr = get_kernel_pages(1);
c0005196:	83 ec 0c             	sub    $0xc,%esp
c0005199:	6a 01                	push   $0x1
c000519b:	e8 29 d8 ff ff       	call   c00029c9 <get_kernel_pages>
c00051a0:	83 c4 10             	add    $0x10,%esp
c00051a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:101
	if (page_dir_vaddr == NULL) {
c00051a6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c00051aa:	75 17                	jne    c00051c3 <create_page_dir+0x33>
/work/x86_os_my/userprog/process.c:102
		console_put_str("create_page_dir: get_kernel_page failed!");
c00051ac:	83 ec 0c             	sub    $0xc,%esp
c00051af:	68 f8 c2 00 c0       	push   $0xc000c2f8
c00051b4:	e8 57 f3 ff ff       	call   c0004510 <console_put_str>
c00051b9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:103
		return NULL;
c00051bc:	b8 00 00 00 00       	mov    $0x0,%eax
c00051c1:	eb 43                	jmp    c0005206 <create_page_dir+0x76>
/work/x86_os_my/userprog/process.c:109
	}

	/*** 1 复制内核的页目录表  ***/
	// page_dir_vaddr + 0x300*4 是内核页目录的第768项
	// 复制的页目录项个数=1024/4
	memcpy((uint32_t*)((uint32_t)page_dir_vaddr + 0x300*4), (uint32_t*)(0xfffff000+0x300*4), 1024);
c00051c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00051c6:	05 00 0c 00 00       	add    $0xc00,%eax
c00051cb:	83 ec 04             	sub    $0x4,%esp
c00051ce:	68 00 04 00 00       	push   $0x400
c00051d3:	68 00 fc ff ff       	push   $0xfffffc00
c00051d8:	50                   	push   %eax
c00051d9:	e8 37 e6 ff ff       	call   c0003815 <memcpy>
c00051de:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:113

	/*** 2 更新页目录表地址 ***/
	// 页目录表地址是页目录的最后一项
	uint32_t new_page_dir_phy_addr = addr_v2p((uint32_t)page_dir_vaddr);
c00051e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00051e4:	83 ec 0c             	sub    $0xc,%esp
c00051e7:	50                   	push   %eax
c00051e8:	e8 8c da ff ff       	call   c0002c79 <addr_v2p>
c00051ed:	83 c4 10             	add    $0x10,%esp
c00051f0:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/process.c:114
	page_dir_vaddr[1023] = new_page_dir_phy_addr | PG_US_U | PG_RW_W | PG_P_1;
c00051f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00051f6:	05 fc 0f 00 00       	add    $0xffc,%eax
c00051fb:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00051fe:	83 ca 07             	or     $0x7,%edx
c0005201:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/userprog/process.c:116

	return page_dir_vaddr;
c0005203:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/userprog/process.c:117
}
c0005206:	c9                   	leave  
c0005207:	c3                   	ret    

c0005208 <create_user_vaddr_bitmap>:
create_user_vaddr_bitmap():
/work/x86_os_my/userprog/process.c:120

/* 创建用户进程虚拟地址位图 */
void create_user_vaddr_bitmap(struct task_struct* user_prog) {
c0005208:	55                   	push   %ebp
c0005209:	89 e5                	mov    %esp,%ebp
c000520b:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/process.c:121
   user_prog->userprog_vaddr.vaddr_start = USER_VADDR_START;	// linux用户程序入口地址 0x80480000
c000520e:	8b 45 08             	mov    0x8(%ebp),%eax
c0005211:	c7 40 60 00 80 04 08 	movl   $0x8048000,0x60(%eax)
/work/x86_os_my/userprog/process.c:122
   uint32_t bitmap_pg_cnt = DIV_ROUND_UP((0xc0000000 - USER_VADDR_START) / PG_SIZE / 8 , PG_SIZE);
c0005218:	c7 45 f4 17 00 00 00 	movl   $0x17,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:123
   user_prog->userprog_vaddr.vaddr_bitmap.bits = get_kernel_pages(bitmap_pg_cnt);
c000521f:	83 ec 0c             	sub    $0xc,%esp
c0005222:	ff 75 f4             	pushl  -0xc(%ebp)
c0005225:	e8 9f d7 ff ff       	call   c00029c9 <get_kernel_pages>
c000522a:	83 c4 10             	add    $0x10,%esp
c000522d:	89 c2                	mov    %eax,%edx
c000522f:	8b 45 08             	mov    0x8(%ebp),%eax
c0005232:	89 50 5c             	mov    %edx,0x5c(%eax)
/work/x86_os_my/userprog/process.c:124
   user_prog->userprog_vaddr.vaddr_bitmap.btmp_bytes_len = (0xc0000000 - USER_VADDR_START) / PG_SIZE / 8;
c0005235:	8b 45 08             	mov    0x8(%ebp),%eax
c0005238:	c7 40 58 f7 6f 01 00 	movl   $0x16ff7,0x58(%eax)
/work/x86_os_my/userprog/process.c:125
   bitmap_init(&user_prog->userprog_vaddr.vaddr_bitmap);
c000523f:	8b 45 08             	mov    0x8(%ebp),%eax
c0005242:	83 c0 58             	add    $0x58,%eax
c0005245:	83 ec 0c             	sub    $0xc,%esp
c0005248:	50                   	push   %eax
c0005249:	e8 a9 d1 ff ff       	call   c00023f7 <bitmap_init>
c000524e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:126
}
c0005251:	90                   	nop
c0005252:	c9                   	leave  
c0005253:	c3                   	ret    

c0005254 <process_execute>:
process_execute():
/work/x86_os_my/userprog/process.c:129

/* 创建用户进程 */
void process_execute(void* filename, char* name) {
c0005254:	55                   	push   %ebp
c0005255:	89 e5                	mov    %esp,%ebp
c0005257:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/process.c:131
   /* pcb内核的数据结构,由内核来维护进程信息,因此要在内核内存池中申请 */
   struct task_struct* thread = get_kernel_pages(1);
c000525a:	83 ec 0c             	sub    $0xc,%esp
c000525d:	6a 01                	push   $0x1
c000525f:	e8 65 d7 ff ff       	call   c00029c9 <get_kernel_pages>
c0005264:	83 c4 10             	add    $0x10,%esp
c0005267:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:132
   init_thread(thread, name, default_prio);			//初始化线程PCB结构体 struct task_struct
c000526a:	83 ec 04             	sub    $0x4,%esp
c000526d:	6a 1f                	push   $0x1f
c000526f:	ff 75 0c             	pushl  0xc(%ebp)
c0005272:	ff 75 f4             	pushl  -0xc(%ebp)
c0005275:	e8 24 ea ff ff       	call   c0003c9e <init_thread>
c000527a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:133
   create_user_vaddr_bitmap(thread);				//【进程新增】创建用户进程，虚拟地址空间位图
c000527d:	83 ec 0c             	sub    $0xc,%esp
c0005280:	ff 75 f4             	pushl  -0xc(%ebp)
c0005283:	e8 80 ff ff ff       	call   c0005208 <create_user_vaddr_bitmap>
c0005288:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:134
   thread_create(thread, start_process, filename);	//初始化线程栈结构体 struct thread_stack
c000528b:	83 ec 04             	sub    $0x4,%esp
c000528e:	ff 75 08             	pushl  0x8(%ebp)
c0005291:	68 08 50 00 c0       	push   $0xc0005008
c0005296:	ff 75 f4             	pushl  -0xc(%ebp)
c0005299:	e8 89 e9 ff ff       	call   c0003c27 <thread_create>
c000529e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:135
   thread->pgdir = create_page_dir();				//【进程新增】创建用户进程，页目录表
c00052a1:	e8 ea fe ff ff       	call   c0005190 <create_page_dir>
c00052a6:	89 c2                	mov    %eax,%edx
c00052a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00052ab:	89 50 54             	mov    %edx,0x54(%eax)
/work/x86_os_my/userprog/process.c:136
   block_desc_init(thread->u_block_desc);
c00052ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00052b1:	83 c0 64             	add    $0x64,%eax
c00052b4:	83 ec 0c             	sub    $0xc,%esp
c00052b7:	50                   	push   %eax
c00052b8:	e8 22 e4 ff ff       	call   c00036df <block_desc_init>
c00052bd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:138
   
   enum intr_status old_status = intr_disable();
c00052c0:	e8 7b c6 ff ff       	call   c0001940 <intr_disable>
c00052c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/process.c:139
   ASSERT(!elem_find(&thread_ready_list, &thread->general_tag));
c00052c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00052cb:	83 c0 44             	add    $0x44,%eax
c00052ce:	83 ec 08             	sub    $0x8,%esp
c00052d1:	50                   	push   %eax
c00052d2:	68 6c 14 01 c0       	push   $0xc001146c
c00052d7:	e8 eb f0 ff ff       	call   c00043c7 <elem_find>
c00052dc:	83 c4 10             	add    $0x10,%esp
c00052df:	85 c0                	test   %eax,%eax
c00052e1:	74 1c                	je     c00052ff <process_execute+0xab>
/work/x86_os_my/userprog/process.c:139 (discriminator 1)
c00052e3:	68 24 c3 00 c0       	push   $0xc000c324
c00052e8:	68 a4 c3 00 c0       	push   $0xc000c3a4
c00052ed:	68 8b 00 00 00       	push   $0x8b
c00052f2:	68 e5 c2 00 c0       	push   $0xc000c2e5
c00052f7:	e8 25 d0 ff ff       	call   c0002321 <panic_spin>
c00052fc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:140
   list_append(&thread_ready_list, &thread->general_tag);
c00052ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005302:	83 c0 44             	add    $0x44,%eax
c0005305:	83 ec 08             	sub    $0x8,%esp
c0005308:	50                   	push   %eax
c0005309:	68 6c 14 01 c0       	push   $0xc001146c
c000530e:	e8 3a f0 ff ff       	call   c000434d <list_append>
c0005313:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:141
   ASSERT(!elem_find(&thread_all_list, &thread->all_list_tag));
c0005316:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005319:	83 c0 4c             	add    $0x4c,%eax
c000531c:	83 ec 08             	sub    $0x8,%esp
c000531f:	50                   	push   %eax
c0005320:	68 7c 14 01 c0       	push   $0xc001147c
c0005325:	e8 9d f0 ff ff       	call   c00043c7 <elem_find>
c000532a:	83 c4 10             	add    $0x10,%esp
c000532d:	85 c0                	test   %eax,%eax
c000532f:	74 1c                	je     c000534d <process_execute+0xf9>
/work/x86_os_my/userprog/process.c:141 (discriminator 1)
c0005331:	68 5c c3 00 c0       	push   $0xc000c35c
c0005336:	68 a4 c3 00 c0       	push   $0xc000c3a4
c000533b:	68 8d 00 00 00       	push   $0x8d
c0005340:	68 e5 c2 00 c0       	push   $0xc000c2e5
c0005345:	e8 d7 cf ff ff       	call   c0002321 <panic_spin>
c000534a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:142
   list_append(&thread_all_list, &thread->all_list_tag);
c000534d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005350:	83 c0 4c             	add    $0x4c,%eax
c0005353:	83 ec 08             	sub    $0x8,%esp
c0005356:	50                   	push   %eax
c0005357:	68 7c 14 01 c0       	push   $0xc001147c
c000535c:	e8 ec ef ff ff       	call   c000434d <list_append>
c0005361:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:143
   intr_set_status(old_status);
c0005364:	83 ec 0c             	sub    $0xc,%esp
c0005367:	ff 75 f0             	pushl  -0x10(%ebp)
c000536a:	e8 fa c5 ff ff       	call   c0001969 <intr_set_status>
c000536f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:144
}
c0005372:	90                   	nop
c0005373:	c9                   	leave  
c0005374:	c3                   	ret    

c0005375 <getpid>:
getpid():
/work/x86_os_my/lib/user/syscall.c:53
   );							       \
   retval;						       \
})

/* 返回当前任务pid */
uint32_t getpid() {
c0005375:	55                   	push   %ebp
c0005376:	89 e5                	mov    %esp,%ebp
c0005378:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:54
	return _syscall0(SYS_GETPID);
c000537b:	b8 00 00 00 00       	mov    $0x0,%eax
c0005380:	cd 80                	int    $0x80
c0005382:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0005385:	8b 45 fc             	mov    -0x4(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:55
}
c0005388:	c9                   	leave  
c0005389:	c3                   	ret    

c000538a <write>:
write():
/work/x86_os_my/lib/user/syscall.c:58

/* 把buf中count个字符写入文件描述符fd */
uint32_t write(int32_t fd, const void* buf, uint32_t count) {
c000538a:	55                   	push   %ebp
c000538b:	89 e5                	mov    %esp,%ebp
c000538d:	53                   	push   %ebx
c000538e:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:59
	return _syscall3(SYS_WRITE, fd, buf, count);
c0005391:	b8 01 00 00 00       	mov    $0x1,%eax
c0005396:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0005399:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c000539c:	8b 55 10             	mov    0x10(%ebp),%edx
c000539f:	cd 80                	int    $0x80
c00053a1:	89 45 f8             	mov    %eax,-0x8(%ebp)
c00053a4:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:60
}
c00053a7:	83 c4 10             	add    $0x10,%esp
c00053aa:	5b                   	pop    %ebx
c00053ab:	5d                   	pop    %ebp
c00053ac:	c3                   	ret    

c00053ad <malloc>:
malloc():
/work/x86_os_my/lib/user/syscall.c:63

/* 申请size字节大小的内存,并返回结果 */
void* malloc(uint32_t size) {
c00053ad:	55                   	push   %ebp
c00053ae:	89 e5                	mov    %esp,%ebp
c00053b0:	53                   	push   %ebx
c00053b1:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:64
	return (void*)_syscall1(SYS_MALLOC, size);
c00053b4:	b8 02 00 00 00       	mov    $0x2,%eax
c00053b9:	8b 55 08             	mov    0x8(%ebp),%edx
c00053bc:	89 d3                	mov    %edx,%ebx
c00053be:	cd 80                	int    $0x80
c00053c0:	89 45 f8             	mov    %eax,-0x8(%ebp)
c00053c3:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:65
}
c00053c6:	83 c4 10             	add    $0x10,%esp
c00053c9:	5b                   	pop    %ebx
c00053ca:	5d                   	pop    %ebp
c00053cb:	c3                   	ret    

c00053cc <free>:
free():
/work/x86_os_my/lib/user/syscall.c:68

/* 释放ptr指向的内存 */
void free(void* ptr) {
c00053cc:	55                   	push   %ebp
c00053cd:	89 e5                	mov    %esp,%ebp
c00053cf:	53                   	push   %ebx
c00053d0:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:69
	_syscall1(SYS_FREE, ptr);
c00053d3:	b8 03 00 00 00       	mov    $0x3,%eax
c00053d8:	8b 55 08             	mov    0x8(%ebp),%edx
c00053db:	89 d3                	mov    %edx,%ebx
c00053dd:	cd 80                	int    $0x80
c00053df:	89 45 f8             	mov    %eax,-0x8(%ebp)
/work/x86_os_my/lib/user/syscall.c:70
}
c00053e2:	90                   	nop
c00053e3:	83 c4 10             	add    $0x10,%esp
c00053e6:	5b                   	pop    %ebx
c00053e7:	5d                   	pop    %ebp
c00053e8:	c3                   	ret    

c00053e9 <fork>:
fork():
/work/x86_os_my/lib/user/syscall.c:73

/* 派生子进程,返回子进程pid */
pid_t fork(void){
c00053e9:	55                   	push   %ebp
c00053ea:	89 e5                	mov    %esp,%ebp
c00053ec:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:74
	return _syscall0(SYS_FORK);
c00053ef:	b8 04 00 00 00       	mov    $0x4,%eax
c00053f4:	cd 80                	int    $0x80
c00053f6:	89 45 fc             	mov    %eax,-0x4(%ebp)
c00053f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:75
}
c00053fc:	c9                   	leave  
c00053fd:	c3                   	ret    

c00053fe <read>:
read():
/work/x86_os_my/lib/user/syscall.c:78

/* 从文件描述符fd中读取count个字节到buf */
int32_t read(int32_t fd, void* buf, uint32_t count) {
c00053fe:	55                   	push   %ebp
c00053ff:	89 e5                	mov    %esp,%ebp
c0005401:	53                   	push   %ebx
c0005402:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:79
	return _syscall3(SYS_READ, fd, buf, count);
c0005405:	b8 05 00 00 00       	mov    $0x5,%eax
c000540a:	8b 5d 08             	mov    0x8(%ebp),%ebx
c000540d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0005410:	8b 55 10             	mov    0x10(%ebp),%edx
c0005413:	cd 80                	int    $0x80
c0005415:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0005418:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:80
}
c000541b:	83 c4 10             	add    $0x10,%esp
c000541e:	5b                   	pop    %ebx
c000541f:	5d                   	pop    %ebp
c0005420:	c3                   	ret    

c0005421 <putchar>:
putchar():
/work/x86_os_my/lib/user/syscall.c:83

/* 输出一个字符 */
void putchar(char char_asci) {
c0005421:	55                   	push   %ebp
c0005422:	89 e5                	mov    %esp,%ebp
c0005424:	53                   	push   %ebx
c0005425:	83 ec 14             	sub    $0x14,%esp
c0005428:	8b 45 08             	mov    0x8(%ebp),%eax
c000542b:	88 45 e8             	mov    %al,-0x18(%ebp)
/work/x86_os_my/lib/user/syscall.c:84
	_syscall1(SYS_PUTCHAR, char_asci);
c000542e:	b8 06 00 00 00       	mov    $0x6,%eax
c0005433:	0f b6 55 e8          	movzbl -0x18(%ebp),%edx
c0005437:	89 d3                	mov    %edx,%ebx
c0005439:	cd 80                	int    $0x80
c000543b:	89 45 f8             	mov    %eax,-0x8(%ebp)
/work/x86_os_my/lib/user/syscall.c:85
}
c000543e:	90                   	nop
c000543f:	83 c4 14             	add    $0x14,%esp
c0005442:	5b                   	pop    %ebx
c0005443:	5d                   	pop    %ebp
c0005444:	c3                   	ret    

c0005445 <clear>:
clear():
/work/x86_os_my/lib/user/syscall.c:88

/* 清空屏幕 */
void clear(void) {
c0005445:	55                   	push   %ebp
c0005446:	89 e5                	mov    %esp,%ebp
c0005448:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:89
	_syscall0(SYS_CLEAR);
c000544b:	b8 07 00 00 00       	mov    $0x7,%eax
c0005450:	cd 80                	int    $0x80
c0005452:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/user/syscall.c:90
}
c0005455:	90                   	nop
c0005456:	c9                   	leave  
c0005457:	c3                   	ret    

c0005458 <sys_getpid>:
sys_getpid():
/work/x86_os_my/userprog/syscall-init.c:17
#define syscall_nr 32 
typedef void* syscall;
syscall syscall_table[syscall_nr];

/* 返回当前任务的pid */
uint32_t sys_getpid(void) {
c0005458:	55                   	push   %ebp
c0005459:	89 e5                	mov    %esp,%ebp
c000545b:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/userprog/syscall-init.c:18
	return running_thread()->pid;
c000545e:	e8 47 e7 ff ff       	call   c0003baa <running_thread>
c0005463:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0005467:	98                   	cwtl   
/work/x86_os_my/userprog/syscall-init.c:19
}
c0005468:	c9                   	leave  
c0005469:	c3                   	ret    

c000546a <syscall_init>:
syscall_init():
/work/x86_os_my/userprog/syscall-init.c:22

/* 初始化系统调用 */
void syscall_init(void) {
c000546a:	55                   	push   %ebp
c000546b:	89 e5                	mov    %esp,%ebp
c000546d:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/userprog/syscall-init.c:23
	put_str("syscall_init start\n");
c0005470:	83 ec 0c             	sub    $0xc,%esp
c0005473:	68 b4 c3 00 c0       	push   $0xc000c3b4
c0005478:	e8 f3 cc ff ff       	call   c0002170 <put_str>
c000547d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/syscall-init.c:24
	syscall_table[SYS_GETPID]	= sys_getpid;
c0005480:	c7 05 40 15 01 c0 58 	movl   $0xc0005458,0xc0011540
c0005487:	54 00 c0 
/work/x86_os_my/userprog/syscall-init.c:25
	syscall_table[SYS_WRITE]	= sys_write;
c000548a:	c7 05 44 15 01 c0 2e 	movl   $0xc000722e,0xc0011544
c0005491:	72 00 c0 
/work/x86_os_my/userprog/syscall-init.c:26
	syscall_table[SYS_MALLOC]	= sys_malloc;
c0005494:	c7 05 48 15 01 c0 cc 	movl   $0xc0002ccc,0xc0011548
c000549b:	2c 00 c0 
/work/x86_os_my/userprog/syscall-init.c:27
	syscall_table[SYS_FREE]		= sys_free;
c000549e:	c7 05 4c 15 01 c0 f9 	movl   $0xc00032f9,0xc001154c
c00054a5:	32 00 c0 
/work/x86_os_my/userprog/syscall-init.c:28
	syscall_table[SYS_FORK]		= sys_fork;
c00054a8:	c7 05 50 15 01 c0 61 	movl   $0xc000b061,0xc0011550
c00054af:	b0 00 c0 
/work/x86_os_my/userprog/syscall-init.c:29
	syscall_table[SYS_READ]		= sys_read;
c00054b2:	c7 05 54 15 01 c0 17 	movl   $0xc0007317,0xc0011554
c00054b9:	73 00 c0 
/work/x86_os_my/userprog/syscall-init.c:30
	syscall_table[SYS_PUTCHAR]	= sys_putchar;
c00054bc:	c7 05 58 15 01 c0 b5 	movl   $0xc00083b5,0xc0011558
c00054c3:	83 00 c0 
/work/x86_os_my/userprog/syscall-init.c:31
	syscall_table[SYS_CLEAR]	= cls_screen;
c00054c6:	c7 05 5c 15 01 c0 5b 	movl   $0xc000225b,0xc001155c
c00054cd:	22 00 c0 
/work/x86_os_my/userprog/syscall-init.c:32
	put_str("syscall_init done\n");
c00054d0:	83 ec 0c             	sub    $0xc,%esp
c00054d3:	68 c8 c3 00 c0       	push   $0xc000c3c8
c00054d8:	e8 93 cc ff ff       	call   c0002170 <put_str>
c00054dd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/syscall-init.c:33
}
c00054e0:	90                   	nop
c00054e1:	c9                   	leave  
c00054e2:	c3                   	ret    

c00054e3 <itoa>:
itoa():
/work/x86_os_my/lib/stdio.c:13
#define va_start(ap, v) ap = (va_list)&v	// 把ap指向第一个固定参数v
#define va_arg(ap, t) *((t*)(ap += 4))		// ap指向下一个参数并返回其值
#define va_end(ap) ap = NULL				// 清除ap

/* 将整型转换成字符(integer to ascii) */
static void itoa(uint32_t value, char** buf_ptr_addr, uint8_t base) {
c00054e3:	55                   	push   %ebp
c00054e4:	89 e5                	mov    %esp,%ebp
c00054e6:	83 ec 28             	sub    $0x28,%esp
c00054e9:	8b 45 10             	mov    0x10(%ebp),%eax
c00054ec:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/lib/stdio.c:14
	uint32_t m = value % base;	// 求模,最先掉下来的是最低位【比如base是16代表16进制】 
c00054ef:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
c00054f3:	8b 45 08             	mov    0x8(%ebp),%eax
c00054f6:	ba 00 00 00 00       	mov    $0x0,%edx
c00054fb:	f7 f1                	div    %ecx
c00054fd:	89 55 f4             	mov    %edx,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:15
	uint32_t i = value / base;	// 取整
c0005500:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
c0005504:	8b 45 08             	mov    0x8(%ebp),%eax
c0005507:	ba 00 00 00 00       	mov    $0x0,%edx
c000550c:	f7 f1                	div    %ecx
c000550e:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/stdio.c:16
	if (i) {
c0005511:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0005515:	74 16                	je     c000552d <itoa+0x4a>
/work/x86_os_my/lib/stdio.c:17
		itoa(i, buf_ptr_addr, base);	// 如果倍数不为0则递归调用。
c0005517:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c000551b:	83 ec 04             	sub    $0x4,%esp
c000551e:	50                   	push   %eax
c000551f:	ff 75 0c             	pushl  0xc(%ebp)
c0005522:	ff 75 f0             	pushl  -0x10(%ebp)
c0005525:	e8 b9 ff ff ff       	call   c00054e3 <itoa>
c000552a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:19
	}
	if (m < 10) {	// 如果余数是0~9
c000552d:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
c0005531:	77 17                	ja     c000554a <itoa+0x67>
/work/x86_os_my/lib/stdio.c:20
		*((*buf_ptr_addr)++) = m + '0';			// 将数字0~9转换为字符'0'~'9'
c0005533:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005536:	8b 00                	mov    (%eax),%eax
c0005538:	8d 48 01             	lea    0x1(%eax),%ecx
c000553b:	8b 55 0c             	mov    0xc(%ebp),%edx
c000553e:	89 0a                	mov    %ecx,(%edx)
c0005540:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0005543:	83 c2 30             	add    $0x30,%edx
c0005546:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/stdio.c:24
	} else {		// 否则余数是A~F
		*((*buf_ptr_addr)++) = m - 10 + 'A';	// 将数字A~F转换为字符'A'~'F'
	}
}
c0005548:	eb 15                	jmp    c000555f <itoa+0x7c>
/work/x86_os_my/lib/stdio.c:22
		itoa(i, buf_ptr_addr, base);	// 如果倍数不为0则递归调用。
	}
	if (m < 10) {	// 如果余数是0~9
		*((*buf_ptr_addr)++) = m + '0';			// 将数字0~9转换为字符'0'~'9'
	} else {		// 否则余数是A~F
		*((*buf_ptr_addr)++) = m - 10 + 'A';	// 将数字A~F转换为字符'A'~'F'
c000554a:	8b 45 0c             	mov    0xc(%ebp),%eax
c000554d:	8b 00                	mov    (%eax),%eax
c000554f:	8d 48 01             	lea    0x1(%eax),%ecx
c0005552:	8b 55 0c             	mov    0xc(%ebp),%edx
c0005555:	89 0a                	mov    %ecx,(%edx)
c0005557:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000555a:	83 c2 37             	add    $0x37,%edx
c000555d:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/stdio.c:24
	}
}
c000555f:	90                   	nop
c0005560:	c9                   	leave  
c0005561:	c3                   	ret    

c0005562 <vsprintf>:
vsprintf():
/work/x86_os_my/lib/stdio.c:27

/* 将参数ap按照格式format输出到字符串str,并返回替换后str长度 */
uint32_t vsprintf(char* str, const char* format, va_list ap) {
c0005562:	55                   	push   %ebp
c0005563:	89 e5                	mov    %esp,%ebp
c0005565:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/lib/stdio.c:28
	char* buf_ptr = str;
c0005568:	8b 45 08             	mov    0x8(%ebp),%eax
c000556b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/lib/stdio.c:29
	const char* index_ptr = format;
c000556e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005571:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:30
	char index_char = *index_ptr;
c0005574:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005577:	0f b6 00             	movzbl (%eax),%eax
c000557a:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:33
	int32_t arg_int;
	char* arg_str;
	while(index_char) {
c000557d:	e9 43 01 00 00       	jmp    c00056c5 <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:34
		if (index_char != '%') {
c0005582:	80 7d f3 25          	cmpb   $0x25,-0xd(%ebp)
c0005586:	74 21                	je     c00055a9 <vsprintf+0x47>
/work/x86_os_my/lib/stdio.c:35
			*(buf_ptr++) = index_char;
c0005588:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000558b:	8d 50 01             	lea    0x1(%eax),%edx
c000558e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0005591:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
c0005595:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/stdio.c:36
			index_char = *(++index_ptr);
c0005597:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c000559b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000559e:	0f b6 00             	movzbl (%eax),%eax
c00055a1:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:37
			continue;
c00055a4:	e9 1c 01 00 00       	jmp    c00056c5 <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:39
		}
		index_char = *(++index_ptr);	 // 得到%后面的字符
c00055a9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c00055ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00055b0:	0f b6 00             	movzbl (%eax),%eax
c00055b3:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:40
		switch(index_char) {
c00055b6:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c00055ba:	83 f8 64             	cmp    $0x64,%eax
c00055bd:	0f 84 8e 00 00 00    	je     c0005651 <vsprintf+0xef>
c00055c3:	83 f8 64             	cmp    $0x64,%eax
c00055c6:	7f 0a                	jg     c00055d2 <vsprintf+0x70>
c00055c8:	83 f8 63             	cmp    $0x63,%eax
c00055cb:	74 60                	je     c000562d <vsprintf+0xcb>
c00055cd:	e9 f3 00 00 00       	jmp    c00056c5 <vsprintf+0x163>
c00055d2:	83 f8 73             	cmp    $0x73,%eax
c00055d5:	74 0e                	je     c00055e5 <vsprintf+0x83>
c00055d7:	83 f8 78             	cmp    $0x78,%eax
c00055da:	0f 84 b6 00 00 00    	je     c0005696 <vsprintf+0x134>
c00055e0:	e9 e0 00 00 00       	jmp    c00056c5 <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:42
			case 's':
			arg_str = va_arg(ap, char*);
c00055e5:	83 45 10 04          	addl   $0x4,0x10(%ebp)
c00055e9:	8b 45 10             	mov    0x10(%ebp),%eax
c00055ec:	8b 00                	mov    (%eax),%eax
c00055ee:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/lib/stdio.c:43
			strcpy(buf_ptr, arg_str);
c00055f1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00055f4:	83 ec 08             	sub    $0x8,%esp
c00055f7:	ff 75 e8             	pushl  -0x18(%ebp)
c00055fa:	50                   	push   %eax
c00055fb:	e8 f8 e2 ff ff       	call   c00038f8 <strcpy>
c0005600:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:44
			buf_ptr += strlen(arg_str);
c0005603:	83 ec 0c             	sub    $0xc,%esp
c0005606:	ff 75 e8             	pushl  -0x18(%ebp)
c0005609:	e8 3f e3 ff ff       	call   c000394d <strlen>
c000560e:	83 c4 10             	add    $0x10,%esp
c0005611:	89 c2                	mov    %eax,%edx
c0005613:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0005616:	01 d0                	add    %edx,%eax
c0005618:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/lib/stdio.c:45
			index_char = *(++index_ptr);
c000561b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c000561f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005622:	0f b6 00             	movzbl (%eax),%eax
c0005625:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:46
			break;
c0005628:	e9 98 00 00 00       	jmp    c00056c5 <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:49

			case 'c':
			*(buf_ptr++) = va_arg(ap, char);
c000562d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0005630:	8d 50 01             	lea    0x1(%eax),%edx
c0005633:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0005636:	83 45 10 04          	addl   $0x4,0x10(%ebp)
c000563a:	8b 55 10             	mov    0x10(%ebp),%edx
c000563d:	0f b6 12             	movzbl (%edx),%edx
c0005640:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/stdio.c:50
			index_char = *(++index_ptr);
c0005642:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0005646:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005649:	0f b6 00             	movzbl (%eax),%eax
c000564c:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:51
			break;
c000564f:	eb 74                	jmp    c00056c5 <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:54

			case 'd':
			arg_int = va_arg(ap, int);
c0005651:	83 45 10 04          	addl   $0x4,0x10(%ebp)
c0005655:	8b 45 10             	mov    0x10(%ebp),%eax
c0005658:	8b 00                	mov    (%eax),%eax
c000565a:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/lib/stdio.c:56
			/* 若是负数, 将其转为正数后,再正数前面输出个负号'-'. */
			if (arg_int < 0) {
c000565d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0005661:	79 0f                	jns    c0005672 <vsprintf+0x110>
/work/x86_os_my/lib/stdio.c:57
				arg_int = 0 - arg_int;
c0005663:	f7 5d ec             	negl   -0x14(%ebp)
/work/x86_os_my/lib/stdio.c:58
				*buf_ptr++ = '-';
c0005666:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0005669:	8d 50 01             	lea    0x1(%eax),%edx
c000566c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c000566f:	c6 00 2d             	movb   $0x2d,(%eax)
/work/x86_os_my/lib/stdio.c:60
			}
			itoa(arg_int, &buf_ptr, 10); 
c0005672:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005675:	83 ec 04             	sub    $0x4,%esp
c0005678:	6a 0a                	push   $0xa
c000567a:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c000567d:	52                   	push   %edx
c000567e:	50                   	push   %eax
c000567f:	e8 5f fe ff ff       	call   c00054e3 <itoa>
c0005684:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:61
			index_char = *(++index_ptr);
c0005687:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c000568b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000568e:	0f b6 00             	movzbl (%eax),%eax
c0005691:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:62
			break;
c0005694:	eb 2f                	jmp    c00056c5 <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:65

			case 'x':
			arg_int = va_arg(ap, int);
c0005696:	83 45 10 04          	addl   $0x4,0x10(%ebp)
c000569a:	8b 45 10             	mov    0x10(%ebp),%eax
c000569d:	8b 00                	mov    (%eax),%eax
c000569f:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/lib/stdio.c:66
			itoa(arg_int, &buf_ptr, 16); 
c00056a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00056a5:	83 ec 04             	sub    $0x4,%esp
c00056a8:	6a 10                	push   $0x10
c00056aa:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c00056ad:	52                   	push   %edx
c00056ae:	50                   	push   %eax
c00056af:	e8 2f fe ff ff       	call   c00054e3 <itoa>
c00056b4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:67
			index_char = *(++index_ptr); // 跳过格式字符并更新index_char
c00056b7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c00056bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00056be:	0f b6 00             	movzbl (%eax),%eax
c00056c1:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:68
			break;
c00056c4:	90                   	nop
/work/x86_os_my/lib/stdio.c:33
	char* buf_ptr = str;
	const char* index_ptr = format;
	char index_char = *index_ptr;
	int32_t arg_int;
	char* arg_str;
	while(index_char) {
c00056c5:	80 7d f3 00          	cmpb   $0x0,-0xd(%ebp)
c00056c9:	0f 85 b3 fe ff ff    	jne    c0005582 <vsprintf+0x20>
/work/x86_os_my/lib/stdio.c:71
			itoa(arg_int, &buf_ptr, 16); 
			index_char = *(++index_ptr); // 跳过格式字符并更新index_char
			break;
		}
	}
	return strlen(str);
c00056cf:	83 ec 0c             	sub    $0xc,%esp
c00056d2:	ff 75 08             	pushl  0x8(%ebp)
c00056d5:	e8 73 e2 ff ff       	call   c000394d <strlen>
c00056da:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:72
}
c00056dd:	c9                   	leave  
c00056de:	c3                   	ret    

c00056df <sprintf>:
sprintf():
/work/x86_os_my/lib/stdio.c:75

/* 同printf不同的地方就是字符串不是写到终端,而是写到buf中 */
uint32_t sprintf(char* buf, const char* format, ...) {
c00056df:	55                   	push   %ebp
c00056e0:	89 e5                	mov    %esp,%ebp
c00056e2:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/stdio.c:78
	va_list args;
	uint32_t retval;
	va_start(args, format);
c00056e5:	8d 45 0c             	lea    0xc(%ebp),%eax
c00056e8:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:79
	retval = vsprintf(buf, format, args);
c00056eb:	8b 45 0c             	mov    0xc(%ebp),%eax
c00056ee:	83 ec 04             	sub    $0x4,%esp
c00056f1:	ff 75 f4             	pushl  -0xc(%ebp)
c00056f4:	50                   	push   %eax
c00056f5:	ff 75 08             	pushl  0x8(%ebp)
c00056f8:	e8 65 fe ff ff       	call   c0005562 <vsprintf>
c00056fd:	83 c4 10             	add    $0x10,%esp
c0005700:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/stdio.c:80
	va_end(args);
c0005703:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:81
	return retval;
c000570a:	8b 45 f0             	mov    -0x10(%ebp),%eax
/work/x86_os_my/lib/stdio.c:82
}
c000570d:	c9                   	leave  
c000570e:	c3                   	ret    

c000570f <printf>:
printf():
/work/x86_os_my/lib/stdio.c:85

/* 格式化输出字符串format */
uint32_t printf(const char* format, ...) {
c000570f:	55                   	push   %ebp
c0005710:	89 e5                	mov    %esp,%ebp
c0005712:	57                   	push   %edi
c0005713:	81 ec 14 04 00 00    	sub    $0x414,%esp
/work/x86_os_my/lib/stdio.c:87
	va_list args;
	va_start(args, format);	       // 使args指向format
c0005719:	8d 45 08             	lea    0x8(%ebp),%eax
c000571c:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:88
	char buf[1024] = {0};	       // 用于存储拼接后的字符串
c000571f:	8d 95 f4 fb ff ff    	lea    -0x40c(%ebp),%edx
c0005725:	b8 00 00 00 00       	mov    $0x0,%eax
c000572a:	b9 00 01 00 00       	mov    $0x100,%ecx
c000572f:	89 d7                	mov    %edx,%edi
c0005731:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/lib/stdio.c:89
	vsprintf(buf, format, args);
c0005733:	8b 45 08             	mov    0x8(%ebp),%eax
c0005736:	83 ec 04             	sub    $0x4,%esp
c0005739:	ff 75 f4             	pushl  -0xc(%ebp)
c000573c:	50                   	push   %eax
c000573d:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c0005743:	50                   	push   %eax
c0005744:	e8 19 fe ff ff       	call   c0005562 <vsprintf>
c0005749:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:90
	va_end(args);
c000574c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:91
	return write(1, buf, strlen(buf));
c0005753:	83 ec 0c             	sub    $0xc,%esp
c0005756:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c000575c:	50                   	push   %eax
c000575d:	e8 eb e1 ff ff       	call   c000394d <strlen>
c0005762:	83 c4 10             	add    $0x10,%esp
c0005765:	83 ec 04             	sub    $0x4,%esp
c0005768:	50                   	push   %eax
c0005769:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c000576f:	50                   	push   %eax
c0005770:	6a 01                	push   $0x1
c0005772:	e8 13 fc ff ff       	call   c000538a <write>
c0005777:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:92
}
c000577a:	8b 7d fc             	mov    -0x4(%ebp),%edi
c000577d:	c9                   	leave  
c000577e:	c3                   	ret    

c000577f <outb>:
outb():
/work/x86_os_my/lib/kernel/io.h:17
#define __LIB_IO_H
#include "stdint.h"
//inline省去了函数调用开支

/* 向端口port写入一个字节*/
static inline void outb(uint16_t port, uint8_t data) {
c000577f:	55                   	push   %ebp
c0005780:	89 e5                	mov    %esp,%ebp
c0005782:	83 ec 08             	sub    $0x8,%esp
c0005785:	8b 55 08             	mov    0x8(%ebp),%edx
c0005788:	8b 45 0c             	mov    0xc(%ebp),%eax
c000578b:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c000578f:	88 45 f8             	mov    %al,-0x8(%ebp)
/work/x86_os_my/lib/kernel/io.h:21
/*********************************************************
 a表示用寄存器al或ax或eax,对端口指定N表示0~255, d表示用dx存储端口号, 
 %b0表示对应al,%w1表示对应dx */ 
   asm volatile ( "outb %b0, %w1" : : "a" (data), "Nd" (port));    
c0005792:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c0005796:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c000579a:	ee                   	out    %al,(%dx)
/work/x86_os_my/lib/kernel/io.h:23
/******************************************************/
}
c000579b:	90                   	nop
c000579c:	c9                   	leave  
c000579d:	c3                   	ret    

c000579e <outsw>:
outsw():
/work/x86_os_my/lib/kernel/io.h:26

/* 将addr处起始的word_cnt个字写入端口port */
static inline void outsw(uint16_t port, const void* addr, uint32_t word_cnt) {
c000579e:	55                   	push   %ebp
c000579f:	89 e5                	mov    %esp,%ebp
c00057a1:	56                   	push   %esi
c00057a2:	53                   	push   %ebx
c00057a3:	83 ec 04             	sub    $0x4,%esp
c00057a6:	8b 45 08             	mov    0x8(%ebp),%eax
c00057a9:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/io.h:31
/*********************************************************
   +表示此限制即做输入又做输出.
   outsw是把ds:esi处的16位的内容写入port端口, 我们在设置段描述符时, 
   已经将ds,es,ss段的选择子都设置为相同的值了,此时不用担心数据错乱。*/
   asm volatile ("cld; rep outsw" : "+S" (addr), "+c" (word_cnt) : "d" (port));
c00057ad:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c00057b1:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c00057b4:	8b 45 10             	mov    0x10(%ebp),%eax
c00057b7:	89 cb                	mov    %ecx,%ebx
c00057b9:	89 de                	mov    %ebx,%esi
c00057bb:	89 c1                	mov    %eax,%ecx
c00057bd:	fc                   	cld    
c00057be:	66 f3 6f             	rep outsw %ds:(%esi),(%dx)
c00057c1:	89 c8                	mov    %ecx,%eax
c00057c3:	89 f3                	mov    %esi,%ebx
c00057c5:	89 5d 0c             	mov    %ebx,0xc(%ebp)
c00057c8:	89 45 10             	mov    %eax,0x10(%ebp)
/work/x86_os_my/lib/kernel/io.h:33
/******************************************************/
}
c00057cb:	90                   	nop
c00057cc:	83 c4 04             	add    $0x4,%esp
c00057cf:	5b                   	pop    %ebx
c00057d0:	5e                   	pop    %esi
c00057d1:	5d                   	pop    %ebp
c00057d2:	c3                   	ret    

c00057d3 <inb>:
inb():
/work/x86_os_my/lib/kernel/io.h:36

/* 将从端口port读入的一个字节返回 */
static inline uint8_t inb(uint16_t port) {
c00057d3:	55                   	push   %ebp
c00057d4:	89 e5                	mov    %esp,%ebp
c00057d6:	83 ec 14             	sub    $0x14,%esp
c00057d9:	8b 45 08             	mov    0x8(%ebp),%eax
c00057dc:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
/work/x86_os_my/lib/kernel/io.h:38
   uint8_t data;
   asm volatile ("inb %w1, %b0" : "=a" (data) : "Nd" (port));
c00057e0:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c00057e4:	89 c2                	mov    %eax,%edx
c00057e6:	ec                   	in     (%dx),%al
c00057e7:	88 45 ff             	mov    %al,-0x1(%ebp)
/work/x86_os_my/lib/kernel/io.h:39
   return data;
c00057ea:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
/work/x86_os_my/lib/kernel/io.h:40
}
c00057ee:	c9                   	leave  
c00057ef:	c3                   	ret    

c00057f0 <insw>:
insw():
/work/x86_os_my/lib/kernel/io.h:43

/* 将从端口port读入的word_cnt个字写入addr */
static inline void insw(uint16_t port, void* addr, uint32_t word_cnt) {
c00057f0:	55                   	push   %ebp
c00057f1:	89 e5                	mov    %esp,%ebp
c00057f3:	57                   	push   %edi
c00057f4:	53                   	push   %ebx
c00057f5:	83 ec 04             	sub    $0x4,%esp
c00057f8:	8b 45 08             	mov    0x8(%ebp),%eax
c00057fb:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/io.h:48
/******************************************************
   insw是将从端口port处读入的16位内容写入es:edi指向的内存,
   我们在设置段描述符时, 已经将ds,es,ss段的选择子都设置为相同的值了,
   此时不用担心数据错乱。*/
   asm volatile ("cld; rep insw" : "+D" (addr), "+c" (word_cnt) : "d" (port) : "memory");
c00057ff:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c0005803:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0005806:	8b 45 10             	mov    0x10(%ebp),%eax
c0005809:	89 cb                	mov    %ecx,%ebx
c000580b:	89 df                	mov    %ebx,%edi
c000580d:	89 c1                	mov    %eax,%ecx
c000580f:	fc                   	cld    
c0005810:	66 f3 6d             	rep insw (%dx),%es:(%edi)
c0005813:	89 c8                	mov    %ecx,%eax
c0005815:	89 fb                	mov    %edi,%ebx
c0005817:	89 5d 0c             	mov    %ebx,0xc(%ebp)
c000581a:	89 45 10             	mov    %eax,0x10(%ebp)
/work/x86_os_my/lib/kernel/io.h:50
/******************************************************/
}
c000581d:	90                   	nop
c000581e:	83 c4 04             	add    $0x4,%esp
c0005821:	5b                   	pop    %ebx
c0005822:	5f                   	pop    %edi
c0005823:	5d                   	pop    %ebp
c0005824:	c3                   	ret    

c0005825 <select_disk>:
select_disk():
/work/x86_os_my/device/ide.c:78
} __attribute__ ((packed));


/////////////////////////////////////// ide驱动部分 ////////////////////////////////////////////////
/* 选择读写的硬盘 */
static void select_disk(struct disk* hd) {
c0005825:	55                   	push   %ebp
c0005826:	89 e5                	mov    %esp,%ebp
c0005828:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/device/ide.c:79
	uint8_t reg_device = BIT_DEV_MBS | BIT_DEV_LBA;
c000582b:	c6 45 ff e0          	movb   $0xe0,-0x1(%ebp)
/work/x86_os_my/device/ide.c:80
	if (hd->dev_no == 1) {	// 若是从盘就置DEV位为1
c000582f:	8b 45 08             	mov    0x8(%ebp),%eax
c0005832:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
c0005836:	3c 01                	cmp    $0x1,%al
c0005838:	75 04                	jne    c000583e <select_disk+0x19>
/work/x86_os_my/device/ide.c:81
		reg_device |= BIT_DEV_DEV;
c000583a:	80 4d ff 10          	orb    $0x10,-0x1(%ebp)
/work/x86_os_my/device/ide.c:83
	}
	outb(reg_dev(hd->my_channel), reg_device);
c000583e:	0f b6 55 ff          	movzbl -0x1(%ebp),%edx
c0005842:	8b 45 08             	mov    0x8(%ebp),%eax
c0005845:	8b 40 08             	mov    0x8(%eax),%eax
c0005848:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c000584c:	83 c0 06             	add    $0x6,%eax
c000584f:	0f b7 c0             	movzwl %ax,%eax
c0005852:	52                   	push   %edx
c0005853:	50                   	push   %eax
c0005854:	e8 26 ff ff ff       	call   c000577f <outb>
c0005859:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/ide.c:84
}
c000585c:	90                   	nop
c000585d:	c9                   	leave  
c000585e:	c3                   	ret    

c000585f <select_sector>:
select_sector():
/work/x86_os_my/device/ide.c:87

/* 向硬盘控制器写入起始扇区地址及要读写的扇区数 */
static void select_sector(struct disk* hd, uint32_t lba, uint8_t sec_cnt) {
c000585f:	55                   	push   %ebp
c0005860:	89 e5                	mov    %esp,%ebp
c0005862:	83 ec 28             	sub    $0x28,%esp
c0005865:	8b 45 10             	mov    0x10(%ebp),%eax
c0005868:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/device/ide.c:88
	ASSERT(lba <= max_lba);
c000586b:	81 7d 0c ff 7f 02 00 	cmpl   $0x27fff,0xc(%ebp)
c0005872:	76 19                	jbe    c000588d <select_sector+0x2e>
/work/x86_os_my/device/ide.c:88 (discriminator 1)
c0005874:	68 dc c3 00 c0       	push   $0xc000c3dc
c0005879:	68 74 c5 00 c0       	push   $0xc000c574
c000587e:	6a 58                	push   $0x58
c0005880:	68 eb c3 00 c0       	push   $0xc000c3eb
c0005885:	e8 97 ca ff ff       	call   c0002321 <panic_spin>
c000588a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:89
	struct ide_channel* channel = hd->my_channel;
c000588d:	8b 45 08             	mov    0x8(%ebp),%eax
c0005890:	8b 40 08             	mov    0x8(%eax),%eax
c0005893:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/ide.c:92

	/* 写入要读写的扇区数*/
	outb(reg_sect_cnt(channel), sec_cnt);	// 如果sec_cnt为0,则表示写入256个扇区
c0005896:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c000589a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000589d:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c00058a1:	83 c0 02             	add    $0x2,%eax
c00058a4:	0f b7 c0             	movzwl %ax,%eax
c00058a7:	83 ec 08             	sub    $0x8,%esp
c00058aa:	52                   	push   %edx
c00058ab:	50                   	push   %eax
c00058ac:	e8 ce fe ff ff       	call   c000577f <outb>
c00058b1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:95

	/* 写入lba地址(即扇区号) */
	outb(reg_lba_l(channel), lba);			// lba地址的低8位,不用单独取出低8位.outb函数中的汇编指令outb %b0, %w1会只用al。
c00058b4:	8b 45 0c             	mov    0xc(%ebp),%eax
c00058b7:	0f b6 d0             	movzbl %al,%edx
c00058ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00058bd:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c00058c1:	83 c0 03             	add    $0x3,%eax
c00058c4:	0f b7 c0             	movzwl %ax,%eax
c00058c7:	83 ec 08             	sub    $0x8,%esp
c00058ca:	52                   	push   %edx
c00058cb:	50                   	push   %eax
c00058cc:	e8 ae fe ff ff       	call   c000577f <outb>
c00058d1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:96
	outb(reg_lba_m(channel), lba >> 8);		// lba地址的8~15位
c00058d4:	8b 45 0c             	mov    0xc(%ebp),%eax
c00058d7:	c1 e8 08             	shr    $0x8,%eax
c00058da:	0f b6 d0             	movzbl %al,%edx
c00058dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00058e0:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c00058e4:	83 c0 04             	add    $0x4,%eax
c00058e7:	0f b7 c0             	movzwl %ax,%eax
c00058ea:	83 ec 08             	sub    $0x8,%esp
c00058ed:	52                   	push   %edx
c00058ee:	50                   	push   %eax
c00058ef:	e8 8b fe ff ff       	call   c000577f <outb>
c00058f4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:97
	outb(reg_lba_h(channel), lba >> 16);	// lba地址的16~23位
c00058f7:	8b 45 0c             	mov    0xc(%ebp),%eax
c00058fa:	c1 e8 10             	shr    $0x10,%eax
c00058fd:	0f b6 d0             	movzbl %al,%edx
c0005900:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005903:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005907:	83 c0 05             	add    $0x5,%eax
c000590a:	0f b7 c0             	movzwl %ax,%eax
c000590d:	83 ec 08             	sub    $0x8,%esp
c0005910:	52                   	push   %edx
c0005911:	50                   	push   %eax
c0005912:	e8 68 fe ff ff       	call   c000577f <outb>
c0005917:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:101

	/* 因为lba地址的24~27位要存储在device寄存器的0～3位,
	* 无法单独写入这4位,所以在此处把device寄存器再重新写入一次*/
	outb(reg_dev(channel), BIT_DEV_MBS | BIT_DEV_LBA | (hd->dev_no == 1 ? BIT_DEV_DEV : 0) | lba >> 24);
c000591a:	8b 45 08             	mov    0x8(%ebp),%eax
c000591d:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
c0005921:	3c 01                	cmp    $0x1,%al
c0005923:	75 07                	jne    c000592c <select_sector+0xcd>
/work/x86_os_my/device/ide.c:101 (discriminator 1)
c0005925:	ba f0 ff ff ff       	mov    $0xfffffff0,%edx
c000592a:	eb 05                	jmp    c0005931 <select_sector+0xd2>
/work/x86_os_my/device/ide.c:101 (discriminator 2)
c000592c:	ba e0 ff ff ff       	mov    $0xffffffe0,%edx
/work/x86_os_my/device/ide.c:101 (discriminator 4)
c0005931:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005934:	c1 e8 18             	shr    $0x18,%eax
c0005937:	09 d0                	or     %edx,%eax
c0005939:	0f b6 d0             	movzbl %al,%edx
c000593c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000593f:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005943:	83 c0 06             	add    $0x6,%eax
c0005946:	0f b7 c0             	movzwl %ax,%eax
c0005949:	83 ec 08             	sub    $0x8,%esp
c000594c:	52                   	push   %edx
c000594d:	50                   	push   %eax
c000594e:	e8 2c fe ff ff       	call   c000577f <outb>
c0005953:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:102 (discriminator 4)
}
c0005956:	90                   	nop
c0005957:	c9                   	leave  
c0005958:	c3                   	ret    

c0005959 <cmd_out>:
cmd_out():
/work/x86_os_my/device/ide.c:105

/* 向通道channel发命令cmd */
static void cmd_out(struct ide_channel* channel, uint8_t cmd) {
c0005959:	55                   	push   %ebp
c000595a:	89 e5                	mov    %esp,%ebp
c000595c:	83 ec 04             	sub    $0x4,%esp
c000595f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005962:	88 45 fc             	mov    %al,-0x4(%ebp)
/work/x86_os_my/device/ide.c:107
	/* 只要向硬盘发出了命令便将此标记置为true,硬盘中断处理程序需要根据它来判断 */
	channel->expecting_intr = true;
c0005965:	8b 45 08             	mov    0x8(%ebp),%eax
c0005968:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
/work/x86_os_my/device/ide.c:108
	outb(reg_cmd(channel), cmd);
c000596f:	0f b6 55 fc          	movzbl -0x4(%ebp),%edx
c0005973:	8b 45 08             	mov    0x8(%ebp),%eax
c0005976:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c000597a:	83 c0 07             	add    $0x7,%eax
c000597d:	0f b7 c0             	movzwl %ax,%eax
c0005980:	52                   	push   %edx
c0005981:	50                   	push   %eax
c0005982:	e8 f8 fd ff ff       	call   c000577f <outb>
c0005987:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/ide.c:109
}
c000598a:	90                   	nop
c000598b:	c9                   	leave  
c000598c:	c3                   	ret    

c000598d <read_from_sector>:
read_from_sector():
/work/x86_os_my/device/ide.c:112

/* 硬盘读入sec_cnt个扇区的数据到buf */
static void read_from_sector(struct disk* hd, void* buf, uint8_t sec_cnt) {
c000598d:	55                   	push   %ebp
c000598e:	89 e5                	mov    %esp,%ebp
c0005990:	83 ec 14             	sub    $0x14,%esp
c0005993:	8b 45 10             	mov    0x10(%ebp),%eax
c0005996:	88 45 ec             	mov    %al,-0x14(%ebp)
/work/x86_os_my/device/ide.c:114
	uint32_t size_in_byte;
	if (sec_cnt == 0) {
c0005999:	80 7d ec 00          	cmpb   $0x0,-0x14(%ebp)
c000599d:	75 09                	jne    c00059a8 <read_from_sector+0x1b>
/work/x86_os_my/device/ide.c:116
		/* 因为sec_cnt是8位变量,由主调函数将其赋值时,若为256则会将最高位的1丢掉变为0 */
		size_in_byte = 256 * 512;
c000599f:	c7 45 fc 00 00 02 00 	movl   $0x20000,-0x4(%ebp)
c00059a6:	eb 0a                	jmp    c00059b2 <read_from_sector+0x25>
/work/x86_os_my/device/ide.c:118
	} else { 
		size_in_byte = sec_cnt * 512; 
c00059a8:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c00059ac:	c1 e0 09             	shl    $0x9,%eax
c00059af:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/device/ide.c:120
	}
	insw(reg_data(hd->my_channel), buf, size_in_byte / 2);
c00059b2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c00059b5:	d1 e8                	shr    %eax
c00059b7:	89 c2                	mov    %eax,%edx
c00059b9:	8b 45 08             	mov    0x8(%ebp),%eax
c00059bc:	8b 40 08             	mov    0x8(%eax),%eax
c00059bf:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c00059c3:	0f b7 c0             	movzwl %ax,%eax
c00059c6:	52                   	push   %edx
c00059c7:	ff 75 0c             	pushl  0xc(%ebp)
c00059ca:	50                   	push   %eax
c00059cb:	e8 20 fe ff ff       	call   c00057f0 <insw>
c00059d0:	83 c4 0c             	add    $0xc,%esp
/work/x86_os_my/device/ide.c:121
}
c00059d3:	90                   	nop
c00059d4:	c9                   	leave  
c00059d5:	c3                   	ret    

c00059d6 <write2sector>:
write2sector():
/work/x86_os_my/device/ide.c:124

/* 将buf中sec_cnt扇区的数据写入硬盘 */
static void write2sector(struct disk* hd, void* buf, uint8_t sec_cnt) {
c00059d6:	55                   	push   %ebp
c00059d7:	89 e5                	mov    %esp,%ebp
c00059d9:	83 ec 14             	sub    $0x14,%esp
c00059dc:	8b 45 10             	mov    0x10(%ebp),%eax
c00059df:	88 45 ec             	mov    %al,-0x14(%ebp)
/work/x86_os_my/device/ide.c:126
	uint32_t size_in_byte;
	if (sec_cnt == 0) {
c00059e2:	80 7d ec 00          	cmpb   $0x0,-0x14(%ebp)
c00059e6:	75 09                	jne    c00059f1 <write2sector+0x1b>
/work/x86_os_my/device/ide.c:128
		/* 因为sec_cnt是8位变量,由主调函数将其赋值时,若为256则会将最高位的1丢掉变为0 */
		size_in_byte = 256 * 512;
c00059e8:	c7 45 fc 00 00 02 00 	movl   $0x20000,-0x4(%ebp)
c00059ef:	eb 0a                	jmp    c00059fb <write2sector+0x25>
/work/x86_os_my/device/ide.c:130
	} else { 
		size_in_byte = sec_cnt * 512; 
c00059f1:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c00059f5:	c1 e0 09             	shl    $0x9,%eax
c00059f8:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/device/ide.c:132
	}
	outsw(reg_data(hd->my_channel), buf, size_in_byte / 2);
c00059fb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c00059fe:	d1 e8                	shr    %eax
c0005a00:	89 c2                	mov    %eax,%edx
c0005a02:	8b 45 08             	mov    0x8(%ebp),%eax
c0005a05:	8b 40 08             	mov    0x8(%eax),%eax
c0005a08:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005a0c:	0f b7 c0             	movzwl %ax,%eax
c0005a0f:	52                   	push   %edx
c0005a10:	ff 75 0c             	pushl  0xc(%ebp)
c0005a13:	50                   	push   %eax
c0005a14:	e8 85 fd ff ff       	call   c000579e <outsw>
c0005a19:	83 c4 0c             	add    $0xc,%esp
/work/x86_os_my/device/ide.c:133
}
c0005a1c:	90                   	nop
c0005a1d:	c9                   	leave  
c0005a1e:	c3                   	ret    

c0005a1f <busy_wait>:
busy_wait():
/work/x86_os_my/device/ide.c:136

/* 等待30秒 */
static bool busy_wait(struct disk* hd) {
c0005a1f:	55                   	push   %ebp
c0005a20:	89 e5                	mov    %esp,%ebp
c0005a22:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/ide.c:137
	struct ide_channel* channel = hd->my_channel;
c0005a25:	8b 45 08             	mov    0x8(%ebp),%eax
c0005a28:	8b 40 08             	mov    0x8(%eax),%eax
c0005a2b:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:138
	uint16_t time_limit = 30 * 1000;	// 可以等待30000毫秒
c0005a2e:	66 c7 45 f6 30 75    	movw   $0x7530,-0xa(%ebp)
/work/x86_os_my/device/ide.c:139
	while (time_limit -= 10 >= 0) {
c0005a34:	eb 45                	jmp    c0005a7b <busy_wait+0x5c>
/work/x86_os_my/device/ide.c:140
		if (!(inb(reg_status(channel)) & BIT_STAT_BSY)) {
c0005a36:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0005a39:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005a3d:	83 c0 07             	add    $0x7,%eax
c0005a40:	0f b7 c0             	movzwl %ax,%eax
c0005a43:	50                   	push   %eax
c0005a44:	e8 8a fd ff ff       	call   c00057d3 <inb>
c0005a49:	83 c4 04             	add    $0x4,%esp
c0005a4c:	84 c0                	test   %al,%al
c0005a4e:	78 1e                	js     c0005a6e <busy_wait+0x4f>
/work/x86_os_my/device/ide.c:141
			return (inb(reg_status(channel)) & BIT_STAT_DRQ);
c0005a50:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0005a53:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005a57:	83 c0 07             	add    $0x7,%eax
c0005a5a:	0f b7 c0             	movzwl %ax,%eax
c0005a5d:	50                   	push   %eax
c0005a5e:	e8 70 fd ff ff       	call   c00057d3 <inb>
c0005a63:	83 c4 04             	add    $0x4,%esp
c0005a66:	0f b6 c0             	movzbl %al,%eax
c0005a69:	83 e0 08             	and    $0x8,%eax
c0005a6c:	eb 1e                	jmp    c0005a8c <busy_wait+0x6d>
/work/x86_os_my/device/ide.c:143
		} else {
			mtime_sleep(10);			// 睡眠10毫秒
c0005a6e:	83 ec 0c             	sub    $0xc,%esp
c0005a71:	6a 0a                	push   $0xa
c0005a73:	e8 f2 c0 ff ff       	call   c0001b6a <mtime_sleep>
c0005a78:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:139

/* 等待30秒 */
static bool busy_wait(struct disk* hd) {
	struct ide_channel* channel = hd->my_channel;
	uint16_t time_limit = 30 * 1000;	// 可以等待30000毫秒
	while (time_limit -= 10 >= 0) {
c0005a7b:	66 83 6d f6 01       	subw   $0x1,-0xa(%ebp)
c0005a80:	66 83 7d f6 00       	cmpw   $0x0,-0xa(%ebp)
c0005a85:	75 af                	jne    c0005a36 <busy_wait+0x17>
/work/x86_os_my/device/ide.c:146
			return (inb(reg_status(channel)) & BIT_STAT_DRQ);
		} else {
			mtime_sleep(10);			// 睡眠10毫秒
		}
	}
	return false;
c0005a87:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/device/ide.c:147
}
c0005a8c:	c9                   	leave  
c0005a8d:	c3                   	ret    

c0005a8e <ide_read>:
ide_read():
/work/x86_os_my/device/ide.c:150

/* 从硬盘读取sec_cnt个扇区到buf */
void ide_read(struct disk* hd, uint32_t lba, void* buf, uint32_t sec_cnt) { 
c0005a8e:	55                   	push   %ebp
c0005a8f:	89 e5                	mov    %esp,%ebp
c0005a91:	83 ec 58             	sub    $0x58,%esp
/work/x86_os_my/device/ide.c:151
	ASSERT(lba <= max_lba);
c0005a94:	81 7d 0c ff 7f 02 00 	cmpl   $0x27fff,0xc(%ebp)
c0005a9b:	76 1c                	jbe    c0005ab9 <ide_read+0x2b>
/work/x86_os_my/device/ide.c:151 (discriminator 1)
c0005a9d:	68 dc c3 00 c0       	push   $0xc000c3dc
c0005aa2:	68 84 c5 00 c0       	push   $0xc000c584
c0005aa7:	68 97 00 00 00       	push   $0x97
c0005aac:	68 eb c3 00 c0       	push   $0xc000c3eb
c0005ab1:	e8 6b c8 ff ff       	call   c0002321 <panic_spin>
c0005ab6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:152
	ASSERT(sec_cnt > 0);
c0005ab9:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0005abd:	75 1c                	jne    c0005adb <ide_read+0x4d>
/work/x86_os_my/device/ide.c:152 (discriminator 1)
c0005abf:	68 f8 c3 00 c0       	push   $0xc000c3f8
c0005ac4:	68 84 c5 00 c0       	push   $0xc000c584
c0005ac9:	68 98 00 00 00       	push   $0x98
c0005ace:	68 eb c3 00 c0       	push   $0xc000c3eb
c0005ad3:	e8 49 c8 ff ff       	call   c0002321 <panic_spin>
c0005ad8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:153
	lock_acquire (&hd->my_channel->lock);
c0005adb:	8b 45 08             	mov    0x8(%ebp),%eax
c0005ade:	8b 40 08             	mov    0x8(%eax),%eax
c0005ae1:	83 c0 0c             	add    $0xc,%eax
c0005ae4:	83 ec 0c             	sub    $0xc,%esp
c0005ae7:	50                   	push   %eax
c0005ae8:	e8 92 ec ff ff       	call   c000477f <lock_acquire>
c0005aed:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:156

	/* 1 先选择操作的硬盘 */
	select_disk(hd);
c0005af0:	83 ec 0c             	sub    $0xc,%esp
c0005af3:	ff 75 08             	pushl  0x8(%ebp)
c0005af6:	e8 2a fd ff ff       	call   c0005825 <select_disk>
c0005afb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:159

	uint32_t secs_op;		// 每次操作的扇区数
	uint32_t secs_done = 0;	// 已完成的扇区数
c0005afe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/device/ide.c:160
	while(secs_done < sec_cnt) {
c0005b05:	e9 d4 00 00 00       	jmp    c0005bde <ide_read+0x150>
/work/x86_os_my/device/ide.c:161
		if ((secs_done + 256) <= sec_cnt) {
c0005b0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0005b0d:	05 00 01 00 00       	add    $0x100,%eax
c0005b12:	3b 45 14             	cmp    0x14(%ebp),%eax
c0005b15:	77 09                	ja     c0005b20 <ide_read+0x92>
/work/x86_os_my/device/ide.c:162
			secs_op = 256;
c0005b17:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
c0005b1e:	eb 09                	jmp    c0005b29 <ide_read+0x9b>
/work/x86_os_my/device/ide.c:164
		} else {
			secs_op = sec_cnt - secs_done;
c0005b20:	8b 45 14             	mov    0x14(%ebp),%eax
c0005b23:	2b 45 f0             	sub    -0x10(%ebp),%eax
c0005b26:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/ide.c:168
		}

		/* 2 写入待读入的扇区数和起始扇区号 */
		select_sector(hd, lba + secs_done, secs_op);
c0005b29:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005b2c:	0f b6 c0             	movzbl %al,%eax
c0005b2f:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0005b32:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0005b35:	01 ca                	add    %ecx,%edx
c0005b37:	83 ec 04             	sub    $0x4,%esp
c0005b3a:	50                   	push   %eax
c0005b3b:	52                   	push   %edx
c0005b3c:	ff 75 08             	pushl  0x8(%ebp)
c0005b3f:	e8 1b fd ff ff       	call   c000585f <select_sector>
c0005b44:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:171

		/* 3 执行的命令写入reg_cmd寄存器 */
		cmd_out(hd->my_channel, CMD_READ_SECTOR);	// 准备开始读数据
c0005b47:	8b 45 08             	mov    0x8(%ebp),%eax
c0005b4a:	8b 40 08             	mov    0x8(%eax),%eax
c0005b4d:	83 ec 08             	sub    $0x8,%esp
c0005b50:	6a 20                	push   $0x20
c0005b52:	50                   	push   %eax
c0005b53:	e8 01 fe ff ff       	call   c0005959 <cmd_out>
c0005b58:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:176

		/*********************   阻塞自己的时机  ***********************
		在硬盘已经开始工作(开始在内部读数据或写数据)后才能阻塞自己,现在硬盘已经开始忙了,
		将自己阻塞,等待硬盘完成读操作后通过中断处理程序唤醒自己*/
		sema_down(&hd->my_channel->disk_done);
c0005b5b:	8b 45 08             	mov    0x8(%ebp),%eax
c0005b5e:	8b 40 08             	mov    0x8(%eax),%eax
c0005b61:	83 c0 2c             	add    $0x2c,%eax
c0005b64:	83 ec 0c             	sub    $0xc,%esp
c0005b67:	50                   	push   %eax
c0005b68:	e8 68 ea ff ff       	call   c00045d5 <sema_down>
c0005b6d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:181
		/*************************************************************/

		/* 4 检测硬盘状态是否可读 */
		/* 醒来后开始执行下面代码*/
		if (!busy_wait(hd)) {	// 若失败
c0005b70:	83 ec 0c             	sub    $0xc,%esp
c0005b73:	ff 75 08             	pushl  0x8(%ebp)
c0005b76:	e8 a4 fe ff ff       	call   c0005a1f <busy_wait>
c0005b7b:	83 c4 10             	add    $0x10,%esp
c0005b7e:	85 c0                	test   %eax,%eax
c0005b80:	75 33                	jne    c0005bb5 <ide_read+0x127>
/work/x86_os_my/device/ide.c:183
			char error[64];
			sprintf(error, "%s read sector %d failed!!!!!!\n", hd->name, lba);
c0005b82:	8b 45 08             	mov    0x8(%ebp),%eax
c0005b85:	ff 75 0c             	pushl  0xc(%ebp)
c0005b88:	50                   	push   %eax
c0005b89:	68 04 c4 00 c0       	push   $0xc000c404
c0005b8e:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0005b91:	50                   	push   %eax
c0005b92:	e8 48 fb ff ff       	call   c00056df <sprintf>
c0005b97:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:184
			PANIC(error);
c0005b9a:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0005b9d:	50                   	push   %eax
c0005b9e:	68 84 c5 00 c0       	push   $0xc000c584
c0005ba3:	68 b8 00 00 00       	push   $0xb8
c0005ba8:	68 eb c3 00 c0       	push   $0xc000c3eb
c0005bad:	e8 6f c7 ff ff       	call   c0002321 <panic_spin>
c0005bb2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:188
		}

		/* 5 把数据从硬盘的缓冲区中读出 */
		read_from_sector(hd, (void*)((uint32_t)buf + secs_done * 512), secs_op);
c0005bb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005bb8:	0f b6 c0             	movzbl %al,%eax
c0005bbb:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0005bbe:	89 d1                	mov    %edx,%ecx
c0005bc0:	c1 e1 09             	shl    $0x9,%ecx
c0005bc3:	8b 55 10             	mov    0x10(%ebp),%edx
c0005bc6:	01 ca                	add    %ecx,%edx
c0005bc8:	83 ec 04             	sub    $0x4,%esp
c0005bcb:	50                   	push   %eax
c0005bcc:	52                   	push   %edx
c0005bcd:	ff 75 08             	pushl  0x8(%ebp)
c0005bd0:	e8 b8 fd ff ff       	call   c000598d <read_from_sector>
c0005bd5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:189
		secs_done += secs_op;
c0005bd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005bdb:	01 45 f0             	add    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:160
	/* 1 先选择操作的硬盘 */
	select_disk(hd);

	uint32_t secs_op;		// 每次操作的扇区数
	uint32_t secs_done = 0;	// 已完成的扇区数
	while(secs_done < sec_cnt) {
c0005bde:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0005be1:	3b 45 14             	cmp    0x14(%ebp),%eax
c0005be4:	0f 82 20 ff ff ff    	jb     c0005b0a <ide_read+0x7c>
/work/x86_os_my/device/ide.c:191

		/* 5 把数据从硬盘的缓冲区中读出 */
		read_from_sector(hd, (void*)((uint32_t)buf + secs_done * 512), secs_op);
		secs_done += secs_op;
	}
	lock_release(&hd->my_channel->lock);
c0005bea:	8b 45 08             	mov    0x8(%ebp),%eax
c0005bed:	8b 40 08             	mov    0x8(%eax),%eax
c0005bf0:	83 c0 0c             	add    $0xc,%eax
c0005bf3:	83 ec 0c             	sub    $0xc,%esp
c0005bf6:	50                   	push   %eax
c0005bf7:	e8 fa eb ff ff       	call   c00047f6 <lock_release>
c0005bfc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:192
}
c0005bff:	90                   	nop
c0005c00:	c9                   	leave  
c0005c01:	c3                   	ret    

c0005c02 <ide_write>:
ide_write():
/work/x86_os_my/device/ide.c:195

/* 将buf中sec_cnt扇区数据写入硬盘 */
void ide_write(struct disk* hd, uint32_t lba, void* buf, uint32_t sec_cnt) {
c0005c02:	55                   	push   %ebp
c0005c03:	89 e5                	mov    %esp,%ebp
c0005c05:	83 ec 58             	sub    $0x58,%esp
/work/x86_os_my/device/ide.c:196
	ASSERT(lba <= max_lba);
c0005c08:	81 7d 0c ff 7f 02 00 	cmpl   $0x27fff,0xc(%ebp)
c0005c0f:	76 1c                	jbe    c0005c2d <ide_write+0x2b>
/work/x86_os_my/device/ide.c:196 (discriminator 1)
c0005c11:	68 dc c3 00 c0       	push   $0xc000c3dc
c0005c16:	68 90 c5 00 c0       	push   $0xc000c590
c0005c1b:	68 c4 00 00 00       	push   $0xc4
c0005c20:	68 eb c3 00 c0       	push   $0xc000c3eb
c0005c25:	e8 f7 c6 ff ff       	call   c0002321 <panic_spin>
c0005c2a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:197
	ASSERT(sec_cnt > 0);
c0005c2d:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0005c31:	75 1c                	jne    c0005c4f <ide_write+0x4d>
/work/x86_os_my/device/ide.c:197 (discriminator 1)
c0005c33:	68 f8 c3 00 c0       	push   $0xc000c3f8
c0005c38:	68 90 c5 00 c0       	push   $0xc000c590
c0005c3d:	68 c5 00 00 00       	push   $0xc5
c0005c42:	68 eb c3 00 c0       	push   $0xc000c3eb
c0005c47:	e8 d5 c6 ff ff       	call   c0002321 <panic_spin>
c0005c4c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:198
	lock_acquire (&hd->my_channel->lock);
c0005c4f:	8b 45 08             	mov    0x8(%ebp),%eax
c0005c52:	8b 40 08             	mov    0x8(%eax),%eax
c0005c55:	83 c0 0c             	add    $0xc,%eax
c0005c58:	83 ec 0c             	sub    $0xc,%esp
c0005c5b:	50                   	push   %eax
c0005c5c:	e8 1e eb ff ff       	call   c000477f <lock_acquire>
c0005c61:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:201

	/* 1 先选择操作的硬盘 */
	select_disk(hd);
c0005c64:	83 ec 0c             	sub    $0xc,%esp
c0005c67:	ff 75 08             	pushl  0x8(%ebp)
c0005c6a:	e8 b6 fb ff ff       	call   c0005825 <select_disk>
c0005c6f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:204

	uint32_t secs_op;		// 每次操作的扇区数
	uint32_t secs_done = 0;	// 已完成的扇区数
c0005c72:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/device/ide.c:205
	while(secs_done < sec_cnt) {
c0005c79:	e9 d4 00 00 00       	jmp    c0005d52 <ide_write+0x150>
/work/x86_os_my/device/ide.c:206
		if ((secs_done + 256) <= sec_cnt) {
c0005c7e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0005c81:	05 00 01 00 00       	add    $0x100,%eax
c0005c86:	3b 45 14             	cmp    0x14(%ebp),%eax
c0005c89:	77 09                	ja     c0005c94 <ide_write+0x92>
/work/x86_os_my/device/ide.c:207
			secs_op = 256;
c0005c8b:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
c0005c92:	eb 09                	jmp    c0005c9d <ide_write+0x9b>
/work/x86_os_my/device/ide.c:209
		} else {
			secs_op = sec_cnt - secs_done;
c0005c94:	8b 45 14             	mov    0x14(%ebp),%eax
c0005c97:	2b 45 f0             	sub    -0x10(%ebp),%eax
c0005c9a:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/ide.c:213
		}

		/* 2 写入待写入的扇区数和起始扇区号 */
		select_sector(hd, lba + secs_done, secs_op);
c0005c9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005ca0:	0f b6 c0             	movzbl %al,%eax
c0005ca3:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0005ca6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0005ca9:	01 ca                	add    %ecx,%edx
c0005cab:	83 ec 04             	sub    $0x4,%esp
c0005cae:	50                   	push   %eax
c0005caf:	52                   	push   %edx
c0005cb0:	ff 75 08             	pushl  0x8(%ebp)
c0005cb3:	e8 a7 fb ff ff       	call   c000585f <select_sector>
c0005cb8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:216

		/* 3 执行的命令写入reg_cmd寄存器 */
		cmd_out(hd->my_channel, CMD_WRITE_SECTOR);	// 准备开始写数据
c0005cbb:	8b 45 08             	mov    0x8(%ebp),%eax
c0005cbe:	8b 40 08             	mov    0x8(%eax),%eax
c0005cc1:	83 ec 08             	sub    $0x8,%esp
c0005cc4:	6a 30                	push   $0x30
c0005cc6:	50                   	push   %eax
c0005cc7:	e8 8d fc ff ff       	call   c0005959 <cmd_out>
c0005ccc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:219

		/* 4 检测硬盘状态是否可读 */
		if (!busy_wait(hd)) {	// 若失败
c0005ccf:	83 ec 0c             	sub    $0xc,%esp
c0005cd2:	ff 75 08             	pushl  0x8(%ebp)
c0005cd5:	e8 45 fd ff ff       	call   c0005a1f <busy_wait>
c0005cda:	83 c4 10             	add    $0x10,%esp
c0005cdd:	85 c0                	test   %eax,%eax
c0005cdf:	75 33                	jne    c0005d14 <ide_write+0x112>
/work/x86_os_my/device/ide.c:221
			char error[64];
			sprintf(error, "%s write sector %d failed!!!!!!\n", hd->name, lba);
c0005ce1:	8b 45 08             	mov    0x8(%ebp),%eax
c0005ce4:	ff 75 0c             	pushl  0xc(%ebp)
c0005ce7:	50                   	push   %eax
c0005ce8:	68 24 c4 00 c0       	push   $0xc000c424
c0005ced:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0005cf0:	50                   	push   %eax
c0005cf1:	e8 e9 f9 ff ff       	call   c00056df <sprintf>
c0005cf6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:222
			PANIC(error);
c0005cf9:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0005cfc:	50                   	push   %eax
c0005cfd:	68 90 c5 00 c0       	push   $0xc000c590
c0005d02:	68 de 00 00 00       	push   $0xde
c0005d07:	68 eb c3 00 c0       	push   $0xc000c3eb
c0005d0c:	e8 10 c6 ff ff       	call   c0002321 <panic_spin>
c0005d11:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:226
		}

		/* 5 将数据写入硬盘 */
		write2sector(hd, (void*)((uint32_t)buf + secs_done * 512), secs_op);
c0005d14:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005d17:	0f b6 c0             	movzbl %al,%eax
c0005d1a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0005d1d:	89 d1                	mov    %edx,%ecx
c0005d1f:	c1 e1 09             	shl    $0x9,%ecx
c0005d22:	8b 55 10             	mov    0x10(%ebp),%edx
c0005d25:	01 ca                	add    %ecx,%edx
c0005d27:	83 ec 04             	sub    $0x4,%esp
c0005d2a:	50                   	push   %eax
c0005d2b:	52                   	push   %edx
c0005d2c:	ff 75 08             	pushl  0x8(%ebp)
c0005d2f:	e8 a2 fc ff ff       	call   c00059d6 <write2sector>
c0005d34:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:229

		/* 在硬盘响应期间阻塞自己 */
		sema_down(&hd->my_channel->disk_done);
c0005d37:	8b 45 08             	mov    0x8(%ebp),%eax
c0005d3a:	8b 40 08             	mov    0x8(%eax),%eax
c0005d3d:	83 c0 2c             	add    $0x2c,%eax
c0005d40:	83 ec 0c             	sub    $0xc,%esp
c0005d43:	50                   	push   %eax
c0005d44:	e8 8c e8 ff ff       	call   c00045d5 <sema_down>
c0005d49:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:230
		secs_done += secs_op;
c0005d4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005d4f:	01 45 f0             	add    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:205
	/* 1 先选择操作的硬盘 */
	select_disk(hd);

	uint32_t secs_op;		// 每次操作的扇区数
	uint32_t secs_done = 0;	// 已完成的扇区数
	while(secs_done < sec_cnt) {
c0005d52:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0005d55:	3b 45 14             	cmp    0x14(%ebp),%eax
c0005d58:	0f 82 20 ff ff ff    	jb     c0005c7e <ide_write+0x7c>
/work/x86_os_my/device/ide.c:233
		/* 在硬盘响应期间阻塞自己 */
		sema_down(&hd->my_channel->disk_done);
		secs_done += secs_op;
	}
	/* 醒来后开始释放锁*/
	lock_release(&hd->my_channel->lock);
c0005d5e:	8b 45 08             	mov    0x8(%ebp),%eax
c0005d61:	8b 40 08             	mov    0x8(%eax),%eax
c0005d64:	83 c0 0c             	add    $0xc,%eax
c0005d67:	83 ec 0c             	sub    $0xc,%esp
c0005d6a:	50                   	push   %eax
c0005d6b:	e8 86 ea ff ff       	call   c00047f6 <lock_release>
c0005d70:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:234
}
c0005d73:	90                   	nop
c0005d74:	c9                   	leave  
c0005d75:	c3                   	ret    

c0005d76 <swap_pairs_bytes>:
swap_pairs_bytes():
/work/x86_os_my/device/ide.c:238

/////////////////////////////////////// 读取分区表部分 ////////////////////////////////////////////////
/* 将dst中len个相邻字节交换位置后存入buf */
static void swap_pairs_bytes(const char* dst, char* buf, uint32_t len) {
c0005d76:	55                   	push   %ebp
c0005d77:	89 e5                	mov    %esp,%ebp
c0005d79:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/device/ide.c:240
	uint8_t idx;
	for (idx = 0; idx < len; idx += 2) {
c0005d7c:	c6 45 ff 00          	movb   $0x0,-0x1(%ebp)
c0005d80:	eb 37                	jmp    c0005db9 <swap_pairs_bytes+0x43>
/work/x86_os_my/device/ide.c:242 (discriminator 3)
		/* buf中存储dst中两相邻元素交换位置后的字符串*/
		buf[idx + 1] = *dst++;
c0005d82:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
c0005d86:	8d 50 01             	lea    0x1(%eax),%edx
c0005d89:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005d8c:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
c0005d8f:	8b 45 08             	mov    0x8(%ebp),%eax
c0005d92:	8d 50 01             	lea    0x1(%eax),%edx
c0005d95:	89 55 08             	mov    %edx,0x8(%ebp)
c0005d98:	0f b6 00             	movzbl (%eax),%eax
c0005d9b:	88 01                	mov    %al,(%ecx)
/work/x86_os_my/device/ide.c:243 (discriminator 3)
		buf[idx]     = *dst++;
c0005d9d:	0f b6 55 ff          	movzbl -0x1(%ebp),%edx
c0005da1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005da4:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
c0005da7:	8b 45 08             	mov    0x8(%ebp),%eax
c0005daa:	8d 50 01             	lea    0x1(%eax),%edx
c0005dad:	89 55 08             	mov    %edx,0x8(%ebp)
c0005db0:	0f b6 00             	movzbl (%eax),%eax
c0005db3:	88 01                	mov    %al,(%ecx)
/work/x86_os_my/device/ide.c:240 (discriminator 3)

/////////////////////////////////////// 读取分区表部分 ////////////////////////////////////////////////
/* 将dst中len个相邻字节交换位置后存入buf */
static void swap_pairs_bytes(const char* dst, char* buf, uint32_t len) {
	uint8_t idx;
	for (idx = 0; idx < len; idx += 2) {
c0005db5:	80 45 ff 02          	addb   $0x2,-0x1(%ebp)
/work/x86_os_my/device/ide.c:240 (discriminator 1)
c0005db9:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
c0005dbd:	3b 45 10             	cmp    0x10(%ebp),%eax
c0005dc0:	72 c0                	jb     c0005d82 <swap_pairs_bytes+0xc>
/work/x86_os_my/device/ide.c:245
		/* buf中存储dst中两相邻元素交换位置后的字符串*/
		buf[idx + 1] = *dst++;
		buf[idx]     = *dst++;
	}
	buf[idx] = '\0';
c0005dc2:	0f b6 55 ff          	movzbl -0x1(%ebp),%edx
c0005dc6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005dc9:	01 d0                	add    %edx,%eax
c0005dcb:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/device/ide.c:246
}
c0005dce:	90                   	nop
c0005dcf:	c9                   	leave  
c0005dd0:	c3                   	ret    

c0005dd1 <identify_disk>:
identify_disk():
/work/x86_os_my/device/ide.c:249

/* 获得硬盘参数信息 */
static void identify_disk(struct disk* hd) {
c0005dd1:	55                   	push   %ebp
c0005dd2:	89 e5                	mov    %esp,%ebp
c0005dd4:	81 ec 98 02 00 00    	sub    $0x298,%esp
/work/x86_os_my/device/ide.c:251
	char id_info[512];
	select_disk(hd);
c0005dda:	ff 75 08             	pushl  0x8(%ebp)
c0005ddd:	e8 43 fa ff ff       	call   c0005825 <select_disk>
c0005de2:	83 c4 04             	add    $0x4,%esp
/work/x86_os_my/device/ide.c:252
	cmd_out(hd->my_channel, CMD_IDENTIFY);
c0005de5:	8b 45 08             	mov    0x8(%ebp),%eax
c0005de8:	8b 40 08             	mov    0x8(%eax),%eax
c0005deb:	68 ec 00 00 00       	push   $0xec
c0005df0:	50                   	push   %eax
c0005df1:	e8 63 fb ff ff       	call   c0005959 <cmd_out>
c0005df6:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/ide.c:255
	/* 向硬盘发送指令后便通过信号量阻塞自己,
	* 待硬盘处理完成后,通过中断处理程序将自己唤醒 */
	sema_down(&hd->my_channel->disk_done);
c0005df9:	8b 45 08             	mov    0x8(%ebp),%eax
c0005dfc:	8b 40 08             	mov    0x8(%eax),%eax
c0005dff:	83 c0 2c             	add    $0x2c,%eax
c0005e02:	83 ec 0c             	sub    $0xc,%esp
c0005e05:	50                   	push   %eax
c0005e06:	e8 ca e7 ff ff       	call   c00045d5 <sema_down>
c0005e0b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:258

	/* 醒来后开始执行下面代码*/
	if (!busy_wait(hd)) {     //  若失败
c0005e0e:	83 ec 0c             	sub    $0xc,%esp
c0005e11:	ff 75 08             	pushl  0x8(%ebp)
c0005e14:	e8 06 fc ff ff       	call   c0005a1f <busy_wait>
c0005e19:	83 c4 10             	add    $0x10,%esp
c0005e1c:	85 c0                	test   %eax,%eax
c0005e1e:	75 39                	jne    c0005e59 <identify_disk+0x88>
/work/x86_os_my/device/ide.c:260
		char error[64];
		sprintf(error, "%s identify failed!!!!!!\n", hd->name);
c0005e20:	8b 45 08             	mov    0x8(%ebp),%eax
c0005e23:	83 ec 04             	sub    $0x4,%esp
c0005e26:	50                   	push   %eax
c0005e27:	68 45 c4 00 c0       	push   $0xc000c445
c0005e2c:	8d 85 70 fd ff ff    	lea    -0x290(%ebp),%eax
c0005e32:	50                   	push   %eax
c0005e33:	e8 a7 f8 ff ff       	call   c00056df <sprintf>
c0005e38:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:261
		PANIC(error);
c0005e3b:	8d 85 70 fd ff ff    	lea    -0x290(%ebp),%eax
c0005e41:	50                   	push   %eax
c0005e42:	68 9c c5 00 c0       	push   $0xc000c59c
c0005e47:	68 05 01 00 00       	push   $0x105
c0005e4c:	68 eb c3 00 c0       	push   $0xc000c3eb
c0005e51:	e8 cb c4 ff ff       	call   c0002321 <panic_spin>
c0005e56:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:263
	}
	read_from_sector(hd, id_info, 1);
c0005e59:	83 ec 04             	sub    $0x4,%esp
c0005e5c:	6a 01                	push   $0x1
c0005e5e:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
c0005e64:	50                   	push   %eax
c0005e65:	ff 75 08             	pushl  0x8(%ebp)
c0005e68:	e8 20 fb ff ff       	call   c000598d <read_from_sector>
c0005e6d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:266

	char buf[64];
	uint8_t sn_start = 10 * 2, sn_len = 20, md_start = 27 * 2, md_len = 40;
c0005e70:	c6 45 f7 14          	movb   $0x14,-0x9(%ebp)
c0005e74:	c6 45 f6 14          	movb   $0x14,-0xa(%ebp)
c0005e78:	c6 45 f5 36          	movb   $0x36,-0xb(%ebp)
c0005e7c:	c6 45 f4 28          	movb   $0x28,-0xc(%ebp)
/work/x86_os_my/device/ide.c:267
	swap_pairs_bytes(&id_info[sn_start], buf, sn_len);
c0005e80:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0005e84:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c0005e88:	8d 8d f0 fd ff ff    	lea    -0x210(%ebp),%ecx
c0005e8e:	01 ca                	add    %ecx,%edx
c0005e90:	83 ec 04             	sub    $0x4,%esp
c0005e93:	50                   	push   %eax
c0005e94:	8d 85 b0 fd ff ff    	lea    -0x250(%ebp),%eax
c0005e9a:	50                   	push   %eax
c0005e9b:	52                   	push   %edx
c0005e9c:	e8 d5 fe ff ff       	call   c0005d76 <swap_pairs_bytes>
c0005ea1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:268
	printk("   disk %s info:\n      SN: %s\n", hd->name, buf);
c0005ea4:	8b 45 08             	mov    0x8(%ebp),%eax
c0005ea7:	83 ec 04             	sub    $0x4,%esp
c0005eaa:	8d 95 b0 fd ff ff    	lea    -0x250(%ebp),%edx
c0005eb0:	52                   	push   %edx
c0005eb1:	50                   	push   %eax
c0005eb2:	68 60 c4 00 c0       	push   $0xc000c460
c0005eb7:	e8 4b 06 00 00       	call   c0006507 <printk>
c0005ebc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:269
	memset(buf, 0, sizeof(buf));
c0005ebf:	83 ec 04             	sub    $0x4,%esp
c0005ec2:	6a 40                	push   $0x40
c0005ec4:	6a 00                	push   $0x0
c0005ec6:	8d 85 b0 fd ff ff    	lea    -0x250(%ebp),%eax
c0005ecc:	50                   	push   %eax
c0005ecd:	e8 f1 d8 ff ff       	call   c00037c3 <memset>
c0005ed2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:270
	swap_pairs_bytes(&id_info[md_start], buf, md_len);
c0005ed5:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0005ed9:	0f b6 55 f5          	movzbl -0xb(%ebp),%edx
c0005edd:	8d 8d f0 fd ff ff    	lea    -0x210(%ebp),%ecx
c0005ee3:	01 ca                	add    %ecx,%edx
c0005ee5:	83 ec 04             	sub    $0x4,%esp
c0005ee8:	50                   	push   %eax
c0005ee9:	8d 85 b0 fd ff ff    	lea    -0x250(%ebp),%eax
c0005eef:	50                   	push   %eax
c0005ef0:	52                   	push   %edx
c0005ef1:	e8 80 fe ff ff       	call   c0005d76 <swap_pairs_bytes>
c0005ef6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:271
	printk("      MODULE: %s\n", buf);
c0005ef9:	83 ec 08             	sub    $0x8,%esp
c0005efc:	8d 85 b0 fd ff ff    	lea    -0x250(%ebp),%eax
c0005f02:	50                   	push   %eax
c0005f03:	68 7f c4 00 c0       	push   $0xc000c47f
c0005f08:	e8 fa 05 00 00       	call   c0006507 <printk>
c0005f0d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:272
	uint32_t sectors = *(uint32_t*)&id_info[60 * 2];
c0005f10:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
c0005f16:	83 c0 78             	add    $0x78,%eax
c0005f19:	8b 00                	mov    (%eax),%eax
c0005f1b:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:273
	printk("      SECTORS: %d\n", sectors);
c0005f1e:	83 ec 08             	sub    $0x8,%esp
c0005f21:	ff 75 f0             	pushl  -0x10(%ebp)
c0005f24:	68 91 c4 00 c0       	push   $0xc000c491
c0005f29:	e8 d9 05 00 00       	call   c0006507 <printk>
c0005f2e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:274
	printk("      CAPACITY: %dMB\n", sectors * 512 / 1024 / 1024);
c0005f31:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0005f34:	c1 e0 09             	shl    $0x9,%eax
c0005f37:	c1 e8 14             	shr    $0x14,%eax
c0005f3a:	83 ec 08             	sub    $0x8,%esp
c0005f3d:	50                   	push   %eax
c0005f3e:	68 a4 c4 00 c0       	push   $0xc000c4a4
c0005f43:	e8 bf 05 00 00       	call   c0006507 <printk>
c0005f48:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:275
}
c0005f4b:	90                   	nop
c0005f4c:	c9                   	leave  
c0005f4d:	c3                   	ret    

c0005f4e <partition_scan>:
partition_scan():
/work/x86_os_my/device/ide.c:278

/* 扫描硬盘hd中地址为ext_lba的扇区中的所有分区 */
static void partition_scan(struct disk* hd, uint32_t ext_lba) {
c0005f4e:	55                   	push   %ebp
c0005f4f:	89 e5                	mov    %esp,%ebp
c0005f51:	53                   	push   %ebx
c0005f52:	83 ec 14             	sub    $0x14,%esp
/work/x86_os_my/device/ide.c:279
	struct boot_sector* bs = sys_malloc(sizeof(struct boot_sector));
c0005f55:	83 ec 0c             	sub    $0xc,%esp
c0005f58:	68 00 02 00 00       	push   $0x200
c0005f5d:	e8 6a cd ff ff       	call   c0002ccc <sys_malloc>
c0005f62:	83 c4 10             	add    $0x10,%esp
c0005f65:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/device/ide.c:280
	ide_read(hd, ext_lba, bs, 1);
c0005f68:	6a 01                	push   $0x1
c0005f6a:	ff 75 ec             	pushl  -0x14(%ebp)
c0005f6d:	ff 75 0c             	pushl  0xc(%ebp)
c0005f70:	ff 75 08             	pushl  0x8(%ebp)
c0005f73:	e8 16 fb ff ff       	call   c0005a8e <ide_read>
c0005f78:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:281
	uint8_t part_idx = 0;
c0005f7b:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/device/ide.c:282
	struct partition_table_entry* p = bs->partition_table;
c0005f7f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005f82:	05 be 01 00 00       	add    $0x1be,%eax
c0005f87:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:285

	/* 遍历分区表4个分区表项 */
	while (part_idx++ < 4) {
c0005f8a:	e9 53 02 00 00       	jmp    c00061e2 <partition_scan+0x294>
/work/x86_os_my/device/ide.c:286
		if (p->fs_type == 0x5) {	// 若为扩展分区
c0005f8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0005f92:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0005f96:	3c 05                	cmp    $0x5,%al
c0005f98:	75 50                	jne    c0005fea <partition_scan+0x9c>
/work/x86_os_my/device/ide.c:287
			if (ext_lba_base != 0) {
c0005f9a:	a1 ec 08 01 c0       	mov    0xc00108ec,%eax
c0005f9f:	85 c0                	test   %eax,%eax
c0005fa1:	74 22                	je     c0005fc5 <partition_scan+0x77>
/work/x86_os_my/device/ide.c:289
				/* 子扩展分区的start_lba是相对于主引导扇区中的总扩展分区地址 */
				partition_scan(hd, p->start_lba + ext_lba_base);
c0005fa3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0005fa6:	8b 40 08             	mov    0x8(%eax),%eax
c0005fa9:	8b 15 ec 08 01 c0    	mov    0xc00108ec,%edx
c0005faf:	01 d0                	add    %edx,%eax
c0005fb1:	83 ec 08             	sub    $0x8,%esp
c0005fb4:	50                   	push   %eax
c0005fb5:	ff 75 08             	pushl  0x8(%ebp)
c0005fb8:	e8 91 ff ff ff       	call   c0005f4e <partition_scan>
c0005fbd:	83 c4 10             	add    $0x10,%esp
c0005fc0:	e9 19 02 00 00       	jmp    c00061de <partition_scan+0x290>
/work/x86_os_my/device/ide.c:292
			} else {	// ext_lba_base为0表示是第一次读取引导块,也就是主引导记录所在的扇区
				/* 记录下扩展分区的起始lba地址,后面所有的扩展分区地址都相对于此 */
				ext_lba_base = p->start_lba;
c0005fc5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0005fc8:	8b 40 08             	mov    0x8(%eax),%eax
c0005fcb:	a3 ec 08 01 c0       	mov    %eax,0xc00108ec
/work/x86_os_my/device/ide.c:293
				partition_scan(hd, p->start_lba);
c0005fd0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0005fd3:	8b 40 08             	mov    0x8(%eax),%eax
c0005fd6:	83 ec 08             	sub    $0x8,%esp
c0005fd9:	50                   	push   %eax
c0005fda:	ff 75 08             	pushl  0x8(%ebp)
c0005fdd:	e8 6c ff ff ff       	call   c0005f4e <partition_scan>
c0005fe2:	83 c4 10             	add    $0x10,%esp
c0005fe5:	e9 f4 01 00 00       	jmp    c00061de <partition_scan+0x290>
/work/x86_os_my/device/ide.c:295
			}
		} else if (p->fs_type != 0) {	// 若是有效的分区类型
c0005fea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0005fed:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0005ff1:	84 c0                	test   %al,%al
c0005ff3:	0f 84 e5 01 00 00    	je     c00061de <partition_scan+0x290>
/work/x86_os_my/device/ide.c:296
			if (ext_lba == 0) {	// 此时全是主分区
c0005ff9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0005ffd:	0f 85 f9 00 00 00    	jne    c00060fc <partition_scan+0x1ae>
/work/x86_os_my/device/ide.c:297
				hd->prim_parts[p_no].start_lba = ext_lba + p->start_lba;
c0006003:	0f b6 05 f0 08 01 c0 	movzbl 0xc00108f0,%eax
c000600a:	0f b6 c8             	movzbl %al,%ecx
c000600d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006010:	8b 50 08             	mov    0x8(%eax),%edx
c0006013:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006016:	01 c2                	add    %eax,%edx
c0006018:	8b 45 08             	mov    0x8(%ebp),%eax
c000601b:	c1 e1 06             	shl    $0x6,%ecx
c000601e:	01 c8                	add    %ecx,%eax
c0006020:	83 c0 10             	add    $0x10,%eax
c0006023:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/device/ide.c:298
				hd->prim_parts[p_no].sec_cnt = p->sec_cnt;
c0006025:	0f b6 05 f0 08 01 c0 	movzbl 0xc00108f0,%eax
c000602c:	0f b6 c8             	movzbl %al,%ecx
c000602f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006032:	8b 40 0c             	mov    0xc(%eax),%eax
c0006035:	8b 55 08             	mov    0x8(%ebp),%edx
c0006038:	c1 e1 06             	shl    $0x6,%ecx
c000603b:	01 ca                	add    %ecx,%edx
c000603d:	83 c2 14             	add    $0x14,%edx
c0006040:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/device/ide.c:299
				hd->prim_parts[p_no].my_disk = hd;
c0006042:	0f b6 05 f0 08 01 c0 	movzbl 0xc00108f0,%eax
c0006049:	0f b6 d0             	movzbl %al,%edx
c000604c:	8b 45 08             	mov    0x8(%ebp),%eax
c000604f:	c1 e2 06             	shl    $0x6,%edx
c0006052:	01 d0                	add    %edx,%eax
c0006054:	8d 50 18             	lea    0x18(%eax),%edx
c0006057:	8b 45 08             	mov    0x8(%ebp),%eax
c000605a:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/device/ide.c:300
				list_append(&partition_list, &hd->prim_parts[p_no].part_tag);
c000605c:	0f b6 05 f0 08 01 c0 	movzbl 0xc00108f0,%eax
c0006063:	0f b6 c0             	movzbl %al,%eax
c0006066:	c1 e0 06             	shl    $0x6,%eax
c0006069:	8d 50 10             	lea    0x10(%eax),%edx
c000606c:	8b 45 08             	mov    0x8(%ebp),%eax
c000606f:	01 d0                	add    %edx,%eax
c0006071:	83 c0 0c             	add    $0xc,%eax
c0006074:	83 ec 08             	sub    $0x8,%esp
c0006077:	50                   	push   %eax
c0006078:	68 a0 22 01 c0       	push   $0xc00122a0
c000607d:	e8 cb e2 ff ff       	call   c000434d <list_append>
c0006082:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:301
				sprintf(hd->prim_parts[p_no].name, "%s%d", hd->name, p_no + 1);
c0006085:	0f b6 05 f0 08 01 c0 	movzbl 0xc00108f0,%eax
c000608c:	0f b6 c0             	movzbl %al,%eax
c000608f:	8d 48 01             	lea    0x1(%eax),%ecx
c0006092:	8b 45 08             	mov    0x8(%ebp),%eax
c0006095:	0f b6 15 f0 08 01 c0 	movzbl 0xc00108f0,%edx
c000609c:	0f b6 d2             	movzbl %dl,%edx
c000609f:	c1 e2 06             	shl    $0x6,%edx
c00060a2:	8d 5a 20             	lea    0x20(%edx),%ebx
c00060a5:	8b 55 08             	mov    0x8(%ebp),%edx
c00060a8:	01 da                	add    %ebx,%edx
c00060aa:	83 c2 04             	add    $0x4,%edx
c00060ad:	51                   	push   %ecx
c00060ae:	50                   	push   %eax
c00060af:	68 ba c4 00 c0       	push   $0xc000c4ba
c00060b4:	52                   	push   %edx
c00060b5:	e8 25 f6 ff ff       	call   c00056df <sprintf>
c00060ba:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:302
				p_no++;
c00060bd:	0f b6 05 f0 08 01 c0 	movzbl 0xc00108f0,%eax
c00060c4:	83 c0 01             	add    $0x1,%eax
c00060c7:	a2 f0 08 01 c0       	mov    %al,0xc00108f0
/work/x86_os_my/device/ide.c:303
				ASSERT(p_no < 4);	// 0,1,2,3
c00060cc:	0f b6 05 f0 08 01 c0 	movzbl 0xc00108f0,%eax
c00060d3:	3c 03                	cmp    $0x3,%al
c00060d5:	0f 86 03 01 00 00    	jbe    c00061de <partition_scan+0x290>
/work/x86_os_my/device/ide.c:303 (discriminator 1)
c00060db:	68 bf c4 00 c0       	push   $0xc000c4bf
c00060e0:	68 ac c5 00 c0       	push   $0xc000c5ac
c00060e5:	68 2f 01 00 00       	push   $0x12f
c00060ea:	68 eb c3 00 c0       	push   $0xc000c3eb
c00060ef:	e8 2d c2 ff ff       	call   c0002321 <panic_spin>
c00060f4:	83 c4 10             	add    $0x10,%esp
c00060f7:	e9 e2 00 00 00       	jmp    c00061de <partition_scan+0x290>
/work/x86_os_my/device/ide.c:305
			} else {
				hd->logic_parts[l_no].start_lba = ext_lba + p->start_lba;
c00060fc:	0f b6 05 f1 08 01 c0 	movzbl 0xc00108f1,%eax
c0006103:	0f b6 c8             	movzbl %al,%ecx
c0006106:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006109:	8b 50 08             	mov    0x8(%eax),%edx
c000610c:	8b 45 0c             	mov    0xc(%ebp),%eax
c000610f:	01 c2                	add    %eax,%edx
c0006111:	8b 45 08             	mov    0x8(%ebp),%eax
c0006114:	c1 e1 06             	shl    $0x6,%ecx
c0006117:	01 c8                	add    %ecx,%eax
c0006119:	05 10 01 00 00       	add    $0x110,%eax
c000611e:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/device/ide.c:306
				hd->logic_parts[l_no].sec_cnt = p->sec_cnt;
c0006120:	0f b6 05 f1 08 01 c0 	movzbl 0xc00108f1,%eax
c0006127:	0f b6 c8             	movzbl %al,%ecx
c000612a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000612d:	8b 40 0c             	mov    0xc(%eax),%eax
c0006130:	8b 55 08             	mov    0x8(%ebp),%edx
c0006133:	c1 e1 06             	shl    $0x6,%ecx
c0006136:	01 ca                	add    %ecx,%edx
c0006138:	81 c2 14 01 00 00    	add    $0x114,%edx
c000613e:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/device/ide.c:307
				hd->logic_parts[l_no].my_disk = hd;
c0006140:	0f b6 05 f1 08 01 c0 	movzbl 0xc00108f1,%eax
c0006147:	0f b6 d0             	movzbl %al,%edx
c000614a:	8b 45 08             	mov    0x8(%ebp),%eax
c000614d:	c1 e2 06             	shl    $0x6,%edx
c0006150:	01 d0                	add    %edx,%eax
c0006152:	8d 90 18 01 00 00    	lea    0x118(%eax),%edx
c0006158:	8b 45 08             	mov    0x8(%ebp),%eax
c000615b:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/device/ide.c:308
				list_append(&partition_list, &hd->logic_parts[l_no].part_tag);
c000615d:	0f b6 05 f1 08 01 c0 	movzbl 0xc00108f1,%eax
c0006164:	0f b6 c0             	movzbl %al,%eax
c0006167:	c1 e0 06             	shl    $0x6,%eax
c000616a:	8d 90 10 01 00 00    	lea    0x110(%eax),%edx
c0006170:	8b 45 08             	mov    0x8(%ebp),%eax
c0006173:	01 d0                	add    %edx,%eax
c0006175:	83 c0 0c             	add    $0xc,%eax
c0006178:	83 ec 08             	sub    $0x8,%esp
c000617b:	50                   	push   %eax
c000617c:	68 a0 22 01 c0       	push   $0xc00122a0
c0006181:	e8 c7 e1 ff ff       	call   c000434d <list_append>
c0006186:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:309
				sprintf(hd->logic_parts[l_no].name, "%s%d", hd->name, l_no + 5);	// 逻辑分区数字是从5开始,主分区是1～4.
c0006189:	0f b6 05 f1 08 01 c0 	movzbl 0xc00108f1,%eax
c0006190:	0f b6 c0             	movzbl %al,%eax
c0006193:	8d 48 05             	lea    0x5(%eax),%ecx
c0006196:	8b 45 08             	mov    0x8(%ebp),%eax
c0006199:	0f b6 15 f1 08 01 c0 	movzbl 0xc00108f1,%edx
c00061a0:	0f b6 d2             	movzbl %dl,%edx
c00061a3:	c1 e2 06             	shl    $0x6,%edx
c00061a6:	8d 9a 20 01 00 00    	lea    0x120(%edx),%ebx
c00061ac:	8b 55 08             	mov    0x8(%ebp),%edx
c00061af:	01 da                	add    %ebx,%edx
c00061b1:	83 c2 04             	add    $0x4,%edx
c00061b4:	51                   	push   %ecx
c00061b5:	50                   	push   %eax
c00061b6:	68 ba c4 00 c0       	push   $0xc000c4ba
c00061bb:	52                   	push   %edx
c00061bc:	e8 1e f5 ff ff       	call   c00056df <sprintf>
c00061c1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:310
				l_no++;
c00061c4:	0f b6 05 f1 08 01 c0 	movzbl 0xc00108f1,%eax
c00061cb:	83 c0 01             	add    $0x1,%eax
c00061ce:	a2 f1 08 01 c0       	mov    %al,0xc00108f1
/work/x86_os_my/device/ide.c:311
				if (l_no >= 8)	// 只支持8个逻辑分区,避免数组越界
c00061d3:	0f b6 05 f1 08 01 c0 	movzbl 0xc00108f1,%eax
c00061da:	3c 07                	cmp    $0x7,%al
c00061dc:	77 26                	ja     c0006204 <partition_scan+0x2b6>
/work/x86_os_my/device/ide.c:315
					return;
			}
		}
		p++;
c00061de:	83 45 f0 10          	addl   $0x10,-0x10(%ebp)
/work/x86_os_my/device/ide.c:285
	ide_read(hd, ext_lba, bs, 1);
	uint8_t part_idx = 0;
	struct partition_table_entry* p = bs->partition_table;

	/* 遍历分区表4个分区表项 */
	while (part_idx++ < 4) {
c00061e2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00061e6:	8d 50 01             	lea    0x1(%eax),%edx
c00061e9:	88 55 f7             	mov    %dl,-0x9(%ebp)
c00061ec:	3c 03                	cmp    $0x3,%al
c00061ee:	0f 86 9b fd ff ff    	jbe    c0005f8f <partition_scan+0x41>
/work/x86_os_my/device/ide.c:317
					return;
			}
		}
		p++;
	}
	sys_free(bs);
c00061f4:	83 ec 0c             	sub    $0xc,%esp
c00061f7:	ff 75 ec             	pushl  -0x14(%ebp)
c00061fa:	e8 fa d0 ff ff       	call   c00032f9 <sys_free>
c00061ff:	83 c4 10             	add    $0x10,%esp
c0006202:	eb 01                	jmp    c0006205 <partition_scan+0x2b7>
/work/x86_os_my/device/ide.c:312
				hd->logic_parts[l_no].my_disk = hd;
				list_append(&partition_list, &hd->logic_parts[l_no].part_tag);
				sprintf(hd->logic_parts[l_no].name, "%s%d", hd->name, l_no + 5);	// 逻辑分区数字是从5开始,主分区是1～4.
				l_no++;
				if (l_no >= 8)	// 只支持8个逻辑分区,避免数组越界
					return;
c0006204:	90                   	nop
/work/x86_os_my/device/ide.c:318
			}
		}
		p++;
	}
	sys_free(bs);
}
c0006205:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0006208:	c9                   	leave  
c0006209:	c3                   	ret    

c000620a <partition_info>:
partition_info():
/work/x86_os_my/device/ide.c:321

/* 打印分区信息 */
static bool partition_info(struct list_elem* pelem, int arg UNUSED) {
c000620a:	55                   	push   %ebp
c000620b:	89 e5                	mov    %esp,%ebp
c000620d:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/ide.c:322
	struct partition* part = elem2entry(struct partition, part_tag, pelem);
c0006210:	8b 45 08             	mov    0x8(%ebp),%eax
c0006213:	83 e8 0c             	sub    $0xc,%eax
c0006216:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/ide.c:323
	printk("   %s start_lba:0x%x, sec_cnt:0x%x\n",part->name, part->start_lba, part->sec_cnt);
c0006219:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000621c:	8b 50 04             	mov    0x4(%eax),%edx
c000621f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0006222:	8b 00                	mov    (%eax),%eax
c0006224:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0006227:	83 c1 14             	add    $0x14,%ecx
c000622a:	52                   	push   %edx
c000622b:	50                   	push   %eax
c000622c:	51                   	push   %ecx
c000622d:	68 c8 c4 00 c0       	push   $0xc000c4c8
c0006232:	e8 d0 02 00 00       	call   c0006507 <printk>
c0006237:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:327

	/* 在此处return false与函数本身功能无关,
	 * 只是为了让主调函数list_traversal继续向下遍历元素 */
	return false;
c000623a:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/device/ide.c:328
}
c000623f:	c9                   	leave  
c0006240:	c3                   	ret    

c0006241 <intr_hd_handler>:
intr_hd_handler():
/work/x86_os_my/device/ide.c:331

/* 硬盘中断处理程序 */
void intr_hd_handler(uint8_t irq_no) {
c0006241:	55                   	push   %ebp
c0006242:	89 e5                	mov    %esp,%ebp
c0006244:	83 ec 28             	sub    $0x28,%esp
c0006247:	8b 45 08             	mov    0x8(%ebp),%eax
c000624a:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/device/ide.c:332
	ASSERT(irq_no == 0x2e || irq_no == 0x2f);
c000624d:	80 7d e4 2e          	cmpb   $0x2e,-0x1c(%ebp)
c0006251:	74 22                	je     c0006275 <intr_hd_handler+0x34>
/work/x86_os_my/device/ide.c:332 (discriminator 1)
c0006253:	80 7d e4 2f          	cmpb   $0x2f,-0x1c(%ebp)
c0006257:	74 1c                	je     c0006275 <intr_hd_handler+0x34>
/work/x86_os_my/device/ide.c:332 (discriminator 2)
c0006259:	68 ec c4 00 c0       	push   $0xc000c4ec
c000625e:	68 bc c5 00 c0       	push   $0xc000c5bc
c0006263:	68 4c 01 00 00       	push   $0x14c
c0006268:	68 eb c3 00 c0       	push   $0xc000c3eb
c000626d:	e8 af c0 ff ff       	call   c0002321 <panic_spin>
c0006272:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:333
	uint8_t ch_no = irq_no - 0x2e;
c0006275:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0006279:	83 e8 2e             	sub    $0x2e,%eax
c000627c:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/device/ide.c:334
	struct ide_channel* channel = &channels[ch_no];
c000627f:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0006283:	69 c0 60 06 00 00    	imul   $0x660,%eax,%eax
c0006289:	05 e0 15 01 c0       	add    $0xc00115e0,%eax
c000628e:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:335
	ASSERT(channel->irq_no == irq_no);
c0006291:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006294:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
c0006298:	3a 45 e4             	cmp    -0x1c(%ebp),%al
c000629b:	74 1c                	je     c00062b9 <intr_hd_handler+0x78>
/work/x86_os_my/device/ide.c:335 (discriminator 1)
c000629d:	68 0d c5 00 c0       	push   $0xc000c50d
c00062a2:	68 bc c5 00 c0       	push   $0xc000c5bc
c00062a7:	68 4f 01 00 00       	push   $0x14f
c00062ac:	68 eb c3 00 c0       	push   $0xc000c3eb
c00062b1:	e8 6b c0 ff ff       	call   c0002321 <panic_spin>
c00062b6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:338
	/* 不必担心此中断是否对应的是这一次的expecting_intr,
	* 每次读写硬盘时会申请锁,从而保证了同步一致性 */
	if (channel->expecting_intr) {
c00062b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00062bc:	8b 40 28             	mov    0x28(%eax),%eax
c00062bf:	85 c0                	test   %eax,%eax
c00062c1:	74 35                	je     c00062f8 <intr_hd_handler+0xb7>
/work/x86_os_my/device/ide.c:339
		channel->expecting_intr = false;
c00062c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00062c6:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
/work/x86_os_my/device/ide.c:340
		sema_up(&channel->disk_done);
c00062cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00062d0:	83 c0 2c             	add    $0x2c,%eax
c00062d3:	83 ec 0c             	sub    $0xc,%esp
c00062d6:	50                   	push   %eax
c00062d7:	e8 f4 e3 ff ff       	call   c00046d0 <sema_up>
c00062dc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:343

		/* 读取状态寄存器使硬盘控制器认为此次的中断已被处理,从而硬盘可以继续执行新的读写 */
		inb(reg_status(channel));
c00062df:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00062e2:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c00062e6:	83 c0 07             	add    $0x7,%eax
c00062e9:	0f b7 c0             	movzwl %ax,%eax
c00062ec:	83 ec 0c             	sub    $0xc,%esp
c00062ef:	50                   	push   %eax
c00062f0:	e8 de f4 ff ff       	call   c00057d3 <inb>
c00062f5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:345
	}
}
c00062f8:	90                   	nop
c00062f9:	c9                   	leave  
c00062fa:	c3                   	ret    

c00062fb <ide_init>:
ide_init():
/work/x86_os_my/device/ide.c:348

/* 硬盘数据结构初始化 */
void ide_init() {
c00062fb:	55                   	push   %ebp
c00062fc:	89 e5                	mov    %esp,%ebp
c00062fe:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/ide.c:349
	printk("ide_init start\n");
c0006301:	83 ec 0c             	sub    $0xc,%esp
c0006304:	68 27 c5 00 c0       	push   $0xc000c527
c0006309:	e8 f9 01 00 00       	call   c0006507 <printk>
c000630e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:350
	uint8_t hd_cnt = *((uint8_t*)(0x475));	// 获取硬盘的数量
c0006311:	b8 75 04 00 00       	mov    $0x475,%eax
c0006316:	0f b6 00             	movzbl (%eax),%eax
c0006319:	88 45 f5             	mov    %al,-0xb(%ebp)
/work/x86_os_my/device/ide.c:351
	ASSERT(hd_cnt > 0);
c000631c:	80 7d f5 00          	cmpb   $0x0,-0xb(%ebp)
c0006320:	75 1c                	jne    c000633e <ide_init+0x43>
/work/x86_os_my/device/ide.c:351 (discriminator 1)
c0006322:	68 37 c5 00 c0       	push   $0xc000c537
c0006327:	68 cc c5 00 c0       	push   $0xc000c5cc
c000632c:	68 5f 01 00 00       	push   $0x15f
c0006331:	68 eb c3 00 c0       	push   $0xc000c3eb
c0006336:	e8 e6 bf ff ff       	call   c0002321 <panic_spin>
c000633b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:352
	list_init(&partition_list);
c000633e:	83 ec 0c             	sub    $0xc,%esp
c0006341:	68 a0 22 01 c0       	push   $0xc00122a0
c0006346:	e8 71 df ff ff       	call   c00042bc <list_init>
c000634b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:353
	channel_cnt = DIV_ROUND_UP(hd_cnt, 2);	// 一个ide通道上有两个硬盘,根据硬盘数量反推有几个ide通道
c000634e:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0006352:	83 c0 01             	add    $0x1,%eax
c0006355:	89 c2                	mov    %eax,%edx
c0006357:	c1 ea 1f             	shr    $0x1f,%edx
c000635a:	01 d0                	add    %edx,%eax
c000635c:	d1 f8                	sar    %eax
c000635e:	a2 c0 15 01 c0       	mov    %al,0xc00115c0
/work/x86_os_my/device/ide.c:355
	struct ide_channel* channel;
	uint8_t channel_no = 0, dev_no = 0;
c0006363:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
c0006367:	c6 45 f6 00          	movb   $0x0,-0xa(%ebp)
/work/x86_os_my/device/ide.c:358

	/* 处理每个通道上的硬盘 */
	while (channel_no < channel_cnt) {
c000636b:	e9 4d 01 00 00       	jmp    c00064bd <ide_init+0x1c2>
/work/x86_os_my/device/ide.c:359
		channel = &channels[channel_no];
c0006370:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0006374:	69 c0 60 06 00 00    	imul   $0x660,%eax,%eax
c000637a:	05 e0 15 01 c0       	add    $0xc00115e0,%eax
c000637f:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:360
		sprintf(channel->name, "ide%d", channel_no);
c0006382:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c0006386:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006389:	83 ec 04             	sub    $0x4,%esp
c000638c:	52                   	push   %edx
c000638d:	68 42 c5 00 c0       	push   $0xc000c542
c0006392:	50                   	push   %eax
c0006393:	e8 47 f3 ff ff       	call   c00056df <sprintf>
c0006398:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:363

		/* 为每个ide通道初始化端口基址及中断向量 */
		switch (channel_no) {
c000639b:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000639f:	85 c0                	test   %eax,%eax
c00063a1:	74 07                	je     c00063aa <ide_init+0xaf>
c00063a3:	83 f8 01             	cmp    $0x1,%eax
c00063a6:	74 14                	je     c00063bc <ide_init+0xc1>
c00063a8:	eb 23                	jmp    c00063cd <ide_init+0xd2>
/work/x86_os_my/device/ide.c:365
			case 0:
			channel->port_base	 = 0x1f0;	// ide0通道的起始端口号是0x1f0
c00063aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00063ad:	66 c7 40 08 f0 01    	movw   $0x1f0,0x8(%eax)
/work/x86_os_my/device/ide.c:366
			channel->irq_no	 = 0x20 + 14;	// 从片8259a上倒数第二的中断引脚,温盘,也就是ide0通道的的中断向量号
c00063b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00063b6:	c6 40 0a 2e          	movb   $0x2e,0xa(%eax)
/work/x86_os_my/device/ide.c:367
			break;
c00063ba:	eb 11                	jmp    c00063cd <ide_init+0xd2>
/work/x86_os_my/device/ide.c:370
			
			case 1:
			channel->port_base	 = 0x170;	// ide1通道的起始端口号是0x170
c00063bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00063bf:	66 c7 40 08 70 01    	movw   $0x170,0x8(%eax)
/work/x86_os_my/device/ide.c:371
			channel->irq_no	 = 0x20 + 15;	// 从8259A上的最后一个中断引脚,我们用来响应ide1通道上的硬盘中断
c00063c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00063c8:	c6 40 0a 2f          	movb   $0x2f,0xa(%eax)
/work/x86_os_my/device/ide.c:372
			break;
c00063cc:	90                   	nop
/work/x86_os_my/device/ide.c:375
		}

		channel->expecting_intr = false;	// 未向硬盘写入指令时不期待硬盘的中断
c00063cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00063d0:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
/work/x86_os_my/device/ide.c:376
		lock_init(&channel->lock);
c00063d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00063da:	83 c0 0c             	add    $0xc,%eax
c00063dd:	83 ec 0c             	sub    $0xc,%esp
c00063e0:	50                   	push   %eax
c00063e1:	e8 bf e1 ff ff       	call   c00045a5 <lock_init>
c00063e6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:380

		/* 初始化为0,目的是向硬盘控制器请求数据后,硬盘驱动sema_down此信号量会阻塞线程,
		直到硬盘完成后通过发中断,由中断处理程序将此信号量sema_up,唤醒线程. */
		sema_init(&channel->disk_done, 0);
c00063e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00063ec:	83 c0 2c             	add    $0x2c,%eax
c00063ef:	83 ec 08             	sub    $0x8,%esp
c00063f2:	6a 00                	push   $0x0
c00063f4:	50                   	push   %eax
c00063f5:	e8 81 e1 ff ff       	call   c000457b <sema_init>
c00063fa:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:381
		register_handler(channel->irq_no, intr_hd_handler);
c00063fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006400:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
c0006404:	0f b6 c0             	movzbl %al,%eax
c0006407:	83 ec 08             	sub    $0x8,%esp
c000640a:	68 41 62 00 c0       	push   $0xc0006241
c000640f:	50                   	push   %eax
c0006410:	e8 96 b5 ff ff       	call   c00019ab <register_handler>
c0006415:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:384

		/* 分别获取两个硬盘的参数及分区信息 */
		while (dev_no < 2) {
c0006418:	e9 88 00 00 00       	jmp    c00064a5 <ide_init+0x1aa>
/work/x86_os_my/device/ide.c:385
			struct disk* hd = &channel->devices[dev_no];
c000641d:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0006421:	69 c0 10 03 00 00    	imul   $0x310,%eax,%eax
c0006427:	8d 50 40             	lea    0x40(%eax),%edx
c000642a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000642d:	01 d0                	add    %edx,%eax
c000642f:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/device/ide.c:386
			hd->my_channel = channel;
c0006432:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0006435:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0006438:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/device/ide.c:387
			hd->dev_no = dev_no;
c000643b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000643e:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
c0006442:	88 50 0c             	mov    %dl,0xc(%eax)
/work/x86_os_my/device/ide.c:388
			sprintf(hd->name, "sd%c", 'a' + channel_no * 2 + dev_no);
c0006445:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0006449:	01 c0                	add    %eax,%eax
c000644b:	8d 50 61             	lea    0x61(%eax),%edx
c000644e:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0006452:	01 c2                	add    %eax,%edx
c0006454:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0006457:	83 ec 04             	sub    $0x4,%esp
c000645a:	52                   	push   %edx
c000645b:	68 48 c5 00 c0       	push   $0xc000c548
c0006460:	50                   	push   %eax
c0006461:	e8 79 f2 ff ff       	call   c00056df <sprintf>
c0006466:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:389
			identify_disk(hd);		// 获取硬盘参数
c0006469:	83 ec 0c             	sub    $0xc,%esp
c000646c:	ff 75 ec             	pushl  -0x14(%ebp)
c000646f:	e8 5d f9 ff ff       	call   c0005dd1 <identify_disk>
c0006474:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:390
			if (dev_no != 0) {		// 内核本身的裸硬盘(hd60M.img)不处理
c0006477:	80 7d f6 00          	cmpb   $0x0,-0xa(%ebp)
c000647b:	74 10                	je     c000648d <ide_init+0x192>
/work/x86_os_my/device/ide.c:391
				partition_scan(hd, 0);	// 扫描该硬盘上的分区
c000647d:	83 ec 08             	sub    $0x8,%esp
c0006480:	6a 00                	push   $0x0
c0006482:	ff 75 ec             	pushl  -0x14(%ebp)
c0006485:	e8 c4 fa ff ff       	call   c0005f4e <partition_scan>
c000648a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:393
			}
			p_no = 0, l_no = 0;
c000648d:	c6 05 f0 08 01 c0 00 	movb   $0x0,0xc00108f0
c0006494:	c6 05 f1 08 01 c0 00 	movb   $0x0,0xc00108f1
/work/x86_os_my/device/ide.c:394
			dev_no++;
c000649b:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c000649f:	83 c0 01             	add    $0x1,%eax
c00064a2:	88 45 f6             	mov    %al,-0xa(%ebp)
/work/x86_os_my/device/ide.c:384
		直到硬盘完成后通过发中断,由中断处理程序将此信号量sema_up,唤醒线程. */
		sema_init(&channel->disk_done, 0);
		register_handler(channel->irq_no, intr_hd_handler);

		/* 分别获取两个硬盘的参数及分区信息 */
		while (dev_no < 2) {
c00064a5:	80 7d f6 01          	cmpb   $0x1,-0xa(%ebp)
c00064a9:	0f 86 6e ff ff ff    	jbe    c000641d <ide_init+0x122>
/work/x86_os_my/device/ide.c:396
				partition_scan(hd, 0);	// 扫描该硬盘上的分区
			}
			p_no = 0, l_no = 0;
			dev_no++;
		}
		dev_no = 0;		// 将硬盘驱动器号置0,为下一个channel的两个硬盘初始化。
c00064af:	c6 45 f6 00          	movb   $0x0,-0xa(%ebp)
/work/x86_os_my/device/ide.c:397
		channel_no++;	// 下一个channel
c00064b3:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00064b7:	83 c0 01             	add    $0x1,%eax
c00064ba:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/device/ide.c:358
	channel_cnt = DIV_ROUND_UP(hd_cnt, 2);	// 一个ide通道上有两个硬盘,根据硬盘数量反推有几个ide通道
	struct ide_channel* channel;
	uint8_t channel_no = 0, dev_no = 0;

	/* 处理每个通道上的硬盘 */
	while (channel_no < channel_cnt) {
c00064bd:	0f b6 05 c0 15 01 c0 	movzbl 0xc00115c0,%eax
c00064c4:	38 45 f7             	cmp    %al,-0x9(%ebp)
c00064c7:	0f 82 a3 fe ff ff    	jb     c0006370 <ide_init+0x75>
/work/x86_os_my/device/ide.c:400
		}
		dev_no = 0;		// 将硬盘驱动器号置0,为下一个channel的两个硬盘初始化。
		channel_no++;	// 下一个channel
	}

	printk("\n   all partition info\n");
c00064cd:	83 ec 0c             	sub    $0xc,%esp
c00064d0:	68 4d c5 00 c0       	push   $0xc000c54d
c00064d5:	e8 2d 00 00 00       	call   c0006507 <printk>
c00064da:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:402
	/* 打印所有分区信息 */
	list_traversal(&partition_list, partition_info, (int)NULL);
c00064dd:	83 ec 04             	sub    $0x4,%esp
c00064e0:	6a 00                	push   $0x0
c00064e2:	68 0a 62 00 c0       	push   $0xc000620a
c00064e7:	68 a0 22 01 c0       	push   $0xc00122a0
c00064ec:	e8 11 df ff ff       	call   c0004402 <list_traversal>
c00064f1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:403
	printk("ide_init done\n");
c00064f4:	83 ec 0c             	sub    $0xc,%esp
c00064f7:	68 65 c5 00 c0       	push   $0xc000c565
c00064fc:	e8 06 00 00 00       	call   c0006507 <printk>
c0006501:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:404
}
c0006504:	90                   	nop
c0006505:	c9                   	leave  
c0006506:	c3                   	ret    

c0006507 <printk>:
printk():
/work/x86_os_my/lib/kernel/stdio-kernel.c:11

#define va_start(args, first_fix) args = (va_list)&first_fix
#define va_end(args) args = NULL

/* 供内核使用的格式化输出函数 */
void printk(const char* format, ...) {
c0006507:	55                   	push   %ebp
c0006508:	89 e5                	mov    %esp,%ebp
c000650a:	57                   	push   %edi
c000650b:	81 ec 14 04 00 00    	sub    $0x414,%esp
/work/x86_os_my/lib/kernel/stdio-kernel.c:13
	va_list args;
	va_start(args, format);
c0006511:	8d 45 08             	lea    0x8(%ebp),%eax
c0006514:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/stdio-kernel.c:14
	char buf[1024] = {0};
c0006517:	8d 95 f4 fb ff ff    	lea    -0x40c(%ebp),%edx
c000651d:	b8 00 00 00 00       	mov    $0x0,%eax
c0006522:	b9 00 01 00 00       	mov    $0x100,%ecx
c0006527:	89 d7                	mov    %edx,%edi
c0006529:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/lib/kernel/stdio-kernel.c:15
	vsprintf(buf, format, args);
c000652b:	8b 45 08             	mov    0x8(%ebp),%eax
c000652e:	83 ec 04             	sub    $0x4,%esp
c0006531:	ff 75 f4             	pushl  -0xc(%ebp)
c0006534:	50                   	push   %eax
c0006535:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c000653b:	50                   	push   %eax
c000653c:	e8 21 f0 ff ff       	call   c0005562 <vsprintf>
c0006541:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/stdio-kernel.c:16
	va_end(args);
c0006544:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/kernel/stdio-kernel.c:17
	console_put_str(buf);
c000654b:	83 ec 0c             	sub    $0xc,%esp
c000654e:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c0006554:	50                   	push   %eax
c0006555:	e8 b6 df ff ff       	call   c0004510 <console_put_str>
c000655a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/stdio-kernel.c:18
}
c000655d:	90                   	nop
c000655e:	8b 7d fc             	mov    -0x4(%ebp),%edi
c0006561:	c9                   	leave  
c0006562:	c3                   	ret    

c0006563 <mount_partition>:
mount_partition():
/work/x86_os_my/fs/fs.c:27
把该分区文件系统的元信息从硬盘上读出来加载到内存中，
这样硬盘资源的变化都用内存中元信息来跟踪，
如果有写操作，及时将内存中的元信息同步写入到硬盘以持久化。
*/
//sb_buf没释放！
static bool mount_partition(struct list_elem* pelem, int arg) {
c0006563:	55                   	push   %ebp
c0006564:	89 e5                	mov    %esp,%ebp
c0006566:	53                   	push   %ebx
c0006567:	83 ec 14             	sub    $0x14,%esp
/work/x86_os_my/fs/fs.c:28
	char* part_name = (char*)arg;	// sdb1
c000656a:	8b 45 0c             	mov    0xc(%ebp),%eax
c000656d:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:29
	struct partition* part = elem2entry(struct partition, part_tag, pelem);	// 根据pelem找到partition
c0006570:	8b 45 08             	mov    0x8(%ebp),%eax
c0006573:	83 e8 0c             	sub    $0xc,%eax
c0006576:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:30
	if (!strcmp(part->name, part_name)) {	//名字一致
c0006579:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000657c:	83 c0 14             	add    $0x14,%eax
c000657f:	83 ec 08             	sub    $0x8,%esp
c0006582:	ff 75 f4             	pushl  -0xc(%ebp)
c0006585:	50                   	push   %eax
c0006586:	e8 0d d4 ff ff       	call   c0003998 <strcmp>
c000658b:	83 c4 10             	add    $0x10,%esp
c000658e:	84 c0                	test   %al,%al
c0006590:	0f 85 ce 01 00 00    	jne    c0006764 <mount_partition+0x201>
/work/x86_os_my/fs/fs.c:31
		cur_part = part;
c0006596:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006599:	a3 b0 22 01 c0       	mov    %eax,0xc00122b0
/work/x86_os_my/fs/fs.c:32
		struct disk* hd = cur_part->my_disk;
c000659e:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c00065a3:	8b 40 08             	mov    0x8(%eax),%eax
c00065a6:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:33
		struct super_block* sb_buf = (struct super_block*)sys_malloc(SECTOR_SIZE);
c00065a9:	83 ec 0c             	sub    $0xc,%esp
c00065ac:	68 00 02 00 00       	push   $0x200
c00065b1:	e8 16 c7 ff ff       	call   c0002ccc <sys_malloc>
c00065b6:	83 c4 10             	add    $0x10,%esp
c00065b9:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:37

		/* 在内存中创建分区cur_part的超级块 */
		// super_block 占用了1个扇区，但是它后边有很多数据是pad只做填充用
		cur_part->sb = (struct super_block*)sys_malloc(sizeof(struct super_block));
c00065bc:	8b 1d b0 22 01 c0    	mov    0xc00122b0,%ebx
c00065c2:	83 ec 0c             	sub    $0xc,%esp
c00065c5:	68 00 02 00 00       	push   $0x200
c00065ca:	e8 fd c6 ff ff       	call   c0002ccc <sys_malloc>
c00065cf:	83 c4 10             	add    $0x10,%esp
c00065d2:	89 43 1c             	mov    %eax,0x1c(%ebx)
/work/x86_os_my/fs/fs.c:38
		if (cur_part->sb == NULL) {
c00065d5:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c00065da:	8b 40 1c             	mov    0x1c(%eax),%eax
c00065dd:	85 c0                	test   %eax,%eax
c00065df:	75 19                	jne    c00065fa <mount_partition+0x97>
/work/x86_os_my/fs/fs.c:39
			PANIC("alloc memory failed!");
c00065e1:	68 d8 c5 00 c0       	push   $0xc000c5d8
c00065e6:	68 ac cd 00 c0       	push   $0xc000cdac
c00065eb:	6a 27                	push   $0x27
c00065ed:	68 ed c5 00 c0       	push   $0xc000c5ed
c00065f2:	e8 2a bd ff ff       	call   c0002321 <panic_spin>
c00065f7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:43
		}

		/* 读入超级块 */
		memset(sb_buf, 0, SECTOR_SIZE);
c00065fa:	83 ec 04             	sub    $0x4,%esp
c00065fd:	68 00 02 00 00       	push   $0x200
c0006602:	6a 00                	push   $0x0
c0006604:	ff 75 e8             	pushl  -0x18(%ebp)
c0006607:	e8 b7 d1 ff ff       	call   c00037c3 <memset>
c000660c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:44
		ide_read(hd, cur_part->start_lba + 1, sb_buf, 1);
c000660f:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c0006614:	8b 00                	mov    (%eax),%eax
c0006616:	83 c0 01             	add    $0x1,%eax
c0006619:	6a 01                	push   $0x1
c000661b:	ff 75 e8             	pushl  -0x18(%ebp)
c000661e:	50                   	push   %eax
c000661f:	ff 75 ec             	pushl  -0x14(%ebp)
c0006622:	e8 67 f4 ff ff       	call   c0005a8e <ide_read>
c0006627:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:46
		// 拷贝给 cur_part->sb
		memcpy(cur_part->sb, sb_buf, sizeof(struct super_block));
c000662a:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c000662f:	8b 40 1c             	mov    0x1c(%eax),%eax
c0006632:	83 ec 04             	sub    $0x4,%esp
c0006635:	68 00 02 00 00       	push   $0x200
c000663a:	ff 75 e8             	pushl  -0x18(%ebp)
c000663d:	50                   	push   %eax
c000663e:	e8 d2 d1 ff ff       	call   c0003815 <memcpy>
c0006643:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:49

		/* 读入块位图 */
		cur_part->block_bitmap.bits = (uint8_t*)sys_malloc(sb_buf->block_bitmap_sects * SECTOR_SIZE);
c0006646:	8b 1d b0 22 01 c0    	mov    0xc00122b0,%ebx
c000664c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000664f:	8b 40 14             	mov    0x14(%eax),%eax
c0006652:	c1 e0 09             	shl    $0x9,%eax
c0006655:	83 ec 0c             	sub    $0xc,%esp
c0006658:	50                   	push   %eax
c0006659:	e8 6e c6 ff ff       	call   c0002ccc <sys_malloc>
c000665e:	83 c4 10             	add    $0x10,%esp
c0006661:	89 43 24             	mov    %eax,0x24(%ebx)
/work/x86_os_my/fs/fs.c:50
		if (cur_part->block_bitmap.bits == NULL) {
c0006664:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c0006669:	8b 40 24             	mov    0x24(%eax),%eax
c000666c:	85 c0                	test   %eax,%eax
c000666e:	75 19                	jne    c0006689 <mount_partition+0x126>
/work/x86_os_my/fs/fs.c:51
			PANIC("alloc memory failed!");
c0006670:	68 d8 c5 00 c0       	push   $0xc000c5d8
c0006675:	68 ac cd 00 c0       	push   $0xc000cdac
c000667a:	6a 33                	push   $0x33
c000667c:	68 ed c5 00 c0       	push   $0xc000c5ed
c0006681:	e8 9b bc ff ff       	call   c0002321 <panic_spin>
c0006686:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:53
		}
		cur_part->block_bitmap.btmp_bytes_len = sb_buf->block_bitmap_sects * SECTOR_SIZE;
c0006689:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c000668e:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0006691:	8b 52 14             	mov    0x14(%edx),%edx
c0006694:	c1 e2 09             	shl    $0x9,%edx
c0006697:	89 50 20             	mov    %edx,0x20(%eax)
/work/x86_os_my/fs/fs.c:54
		ide_read(hd, sb_buf->block_bitmap_lba, cur_part->block_bitmap.bits, sb_buf->block_bitmap_sects);
c000669a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000669d:	8b 48 14             	mov    0x14(%eax),%ecx
c00066a0:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c00066a5:	8b 50 24             	mov    0x24(%eax),%edx
c00066a8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00066ab:	8b 40 10             	mov    0x10(%eax),%eax
c00066ae:	51                   	push   %ecx
c00066af:	52                   	push   %edx
c00066b0:	50                   	push   %eax
c00066b1:	ff 75 ec             	pushl  -0x14(%ebp)
c00066b4:	e8 d5 f3 ff ff       	call   c0005a8e <ide_read>
c00066b9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:57

		/* 读入inode位图 */
		cur_part->inode_bitmap.bits = (uint8_t*)sys_malloc(sb_buf->inode_bitmap_sects * SECTOR_SIZE);
c00066bc:	8b 1d b0 22 01 c0    	mov    0xc00122b0,%ebx
c00066c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00066c5:	8b 40 1c             	mov    0x1c(%eax),%eax
c00066c8:	c1 e0 09             	shl    $0x9,%eax
c00066cb:	83 ec 0c             	sub    $0xc,%esp
c00066ce:	50                   	push   %eax
c00066cf:	e8 f8 c5 ff ff       	call   c0002ccc <sys_malloc>
c00066d4:	83 c4 10             	add    $0x10,%esp
c00066d7:	89 43 2c             	mov    %eax,0x2c(%ebx)
/work/x86_os_my/fs/fs.c:58
		if (cur_part->inode_bitmap.bits == NULL) {
c00066da:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c00066df:	8b 40 2c             	mov    0x2c(%eax),%eax
c00066e2:	85 c0                	test   %eax,%eax
c00066e4:	75 19                	jne    c00066ff <mount_partition+0x19c>
/work/x86_os_my/fs/fs.c:59
			PANIC("alloc memory failed!");
c00066e6:	68 d8 c5 00 c0       	push   $0xc000c5d8
c00066eb:	68 ac cd 00 c0       	push   $0xc000cdac
c00066f0:	6a 3b                	push   $0x3b
c00066f2:	68 ed c5 00 c0       	push   $0xc000c5ed
c00066f7:	e8 25 bc ff ff       	call   c0002321 <panic_spin>
c00066fc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:61
		}
		cur_part->inode_bitmap.btmp_bytes_len = sb_buf->inode_bitmap_sects * SECTOR_SIZE;
c00066ff:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c0006704:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0006707:	8b 52 1c             	mov    0x1c(%edx),%edx
c000670a:	c1 e2 09             	shl    $0x9,%edx
c000670d:	89 50 28             	mov    %edx,0x28(%eax)
/work/x86_os_my/fs/fs.c:62
		ide_read(hd, sb_buf->inode_bitmap_lba, cur_part->inode_bitmap.bits, sb_buf->inode_bitmap_sects);
c0006710:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0006713:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0006716:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c000671b:	8b 50 2c             	mov    0x2c(%eax),%edx
c000671e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0006721:	8b 40 18             	mov    0x18(%eax),%eax
c0006724:	51                   	push   %ecx
c0006725:	52                   	push   %edx
c0006726:	50                   	push   %eax
c0006727:	ff 75 ec             	pushl  -0x14(%ebp)
c000672a:	e8 5f f3 ff ff       	call   c0005a8e <ide_read>
c000672f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:65


		list_init(&cur_part->open_inodes);	// 本分区打开的inode队列！
c0006732:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c0006737:	83 c0 30             	add    $0x30,%eax
c000673a:	83 ec 0c             	sub    $0xc,%esp
c000673d:	50                   	push   %eax
c000673e:	e8 79 db ff ff       	call   c00042bc <list_init>
c0006743:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:68


		printk("mount %s done!\n", part->name);
c0006746:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006749:	83 c0 14             	add    $0x14,%eax
c000674c:	83 ec 08             	sub    $0x8,%esp
c000674f:	50                   	push   %eax
c0006750:	68 f5 c5 00 c0       	push   $0xc000c5f5
c0006755:	e8 ad fd ff ff       	call   c0006507 <printk>
c000675a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:70
		/* 返回true时list_traversal才会停止遍历,减少了后面元素无意义的遍历. */
		return true;
c000675d:	b8 01 00 00 00       	mov    $0x1,%eax
c0006762:	eb 05                	jmp    c0006769 <mount_partition+0x206>
/work/x86_os_my/fs/fs.c:72
	}//if (!strcmp(part->name, part_name))
	return false;	// list_traversal继续遍历
c0006764:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/fs.c:73
}
c0006769:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c000676c:	c9                   	leave  
c000676d:	c3                   	ret    

c000676e <partition_format>:
partition_format():
/work/x86_os_my/fs/fs.c:89
	| 操作系统引导块，超级块，空闲块位图，inode位图，inode数组，根目录，空闲块区域 |
	+------------------------------------------------------------------------------+
	partition结构见ide.h
	MAX_FILES_PER_PART == 4096
****************************************************************************************/
static void partition_format(struct partition* part) {
c000676e:	55                   	push   %ebp
c000676f:	89 e5                	mov    %esp,%ebp
c0006771:	57                   	push   %edi
c0006772:	56                   	push   %esi
c0006773:	53                   	push   %ebx
c0006774:	81 ec 7c 02 00 00    	sub    $0x27c,%esp
/work/x86_os_my/fs/fs.c:91
	/* 为方便实现，inode管理的数据块，一个块大小是一扇区 */
	uint32_t boot_sector_sects = 1;		//引导块
c000677a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
/work/x86_os_my/fs/fs.c:92
	uint32_t super_block_sects = 1;		//超级块
c0006781:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
/work/x86_os_my/fs/fs.c:93
	uint32_t inode_bitmap_sects = DIV_ROUND_UP(MAX_FILES_PER_PART, BITS_PER_SECTOR);	// inode位图占几个扇区.最多支持4096个文件
c0006788:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
/work/x86_os_my/fs/fs.c:94
	uint32_t inode_table_sects = DIV_ROUND_UP((sizeof(struct inode) * MAX_FILES_PER_PART), SECTOR_SIZE);	//inode数组占几个扇区
c000678f:	c7 45 d4 60 02 00 00 	movl   $0x260,-0x2c(%ebp)
/work/x86_os_my/fs/fs.c:95
	uint32_t used_sects = boot_sector_sects + super_block_sects + inode_bitmap_sects + inode_table_sects;
c0006796:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0006799:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000679c:	01 c2                	add    %eax,%edx
c000679e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c00067a1:	01 c2                	add    %eax,%edx
c00067a3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c00067a6:	01 d0                	add    %edx,%eax
c00067a8:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/fs/fs.c:96
	uint32_t free_sects = part->sec_cnt - used_sects;  
c00067ab:	8b 45 08             	mov    0x8(%ebp),%eax
c00067ae:	8b 40 04             	mov    0x4(%eax),%eax
c00067b1:	2b 45 d0             	sub    -0x30(%ebp),%eax
c00067b4:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/fs/fs.c:100

	/************** 简单处理块位图占据的扇区数 ***************/
	uint32_t block_bitmap_sects;	//空闲块位图占几个扇区
	block_bitmap_sects = DIV_ROUND_UP(free_sects, BITS_PER_SECTOR);		//free_sects空闲块位图要占几个扇区
c00067b7:	8b 45 cc             	mov    -0x34(%ebp),%eax
c00067ba:	05 ff 0f 00 00       	add    $0xfff,%eax
c00067bf:	c1 e8 0c             	shr    $0xc,%eax
c00067c2:	89 45 c8             	mov    %eax,-0x38(%ebp)
/work/x86_os_my/fs/fs.c:102
	/* 再算一次空闲块数量 */
	uint32_t block_bitmap_bit_len = free_sects - block_bitmap_sects;	//block_bitmap_bit_len 是位图长度，也是空闲块数量
c00067c5:	8b 45 cc             	mov    -0x34(%ebp),%eax
c00067c8:	2b 45 c8             	sub    -0x38(%ebp),%eax
c00067cb:	89 45 c4             	mov    %eax,-0x3c(%ebp)
/work/x86_os_my/fs/fs.c:103
	block_bitmap_sects = DIV_ROUND_UP(block_bitmap_bit_len, BITS_PER_SECTOR); 
c00067ce:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c00067d1:	05 ff 0f 00 00       	add    $0xfff,%eax
c00067d6:	c1 e8 0c             	shr    $0xc,%eax
c00067d9:	89 45 c8             	mov    %eax,-0x38(%ebp)
/work/x86_os_my/fs/fs.c:108
	/*********************************************************/

	/* 超级块初始化 */
	struct super_block sb;		//局部变量在栈中512字节
	sb.magic = 0x19590318;
c00067dc:	c7 85 a4 fd ff ff 18 	movl   $0x19590318,-0x25c(%ebp)
c00067e3:	03 59 19 
/work/x86_os_my/fs/fs.c:109
	sb.sec_cnt = part->sec_cnt;
c00067e6:	8b 45 08             	mov    0x8(%ebp),%eax
c00067e9:	8b 40 04             	mov    0x4(%eax),%eax
c00067ec:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
/work/x86_os_my/fs/fs.c:110
	sb.inode_cnt = MAX_FILES_PER_PART;
c00067f2:	c7 85 ac fd ff ff 00 	movl   $0x1000,-0x254(%ebp)
c00067f9:	10 00 00 
/work/x86_os_my/fs/fs.c:111
	sb.part_lba_base = part->start_lba;
c00067fc:	8b 45 08             	mov    0x8(%ebp),%eax
c00067ff:	8b 00                	mov    (%eax),%eax
c0006801:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
/work/x86_os_my/fs/fs.c:113

	sb.block_bitmap_lba = sb.part_lba_base + 2;	// 第0块是引导块,第1块是超级块
c0006807:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
c000680d:	83 c0 02             	add    $0x2,%eax
c0006810:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
/work/x86_os_my/fs/fs.c:114
	sb.block_bitmap_sects = block_bitmap_sects;	// 空闲块位图占几个扇区
c0006816:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0006819:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
/work/x86_os_my/fs/fs.c:116

	sb.inode_bitmap_lba = sb.block_bitmap_lba + sb.block_bitmap_sects;
c000681f:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
c0006825:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
c000682b:	01 d0                	add    %edx,%eax
c000682d:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
/work/x86_os_my/fs/fs.c:117
	sb.inode_bitmap_sects = inode_bitmap_sects;	// inode位图占几个扇区
c0006833:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0006836:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
/work/x86_os_my/fs/fs.c:119

	sb.inode_table_lba = sb.inode_bitmap_lba + sb.inode_bitmap_sects;
c000683c:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
c0006842:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
c0006848:	01 d0                	add    %edx,%eax
c000684a:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
/work/x86_os_my/fs/fs.c:120
	sb.inode_table_sects = inode_table_sects;	// inode数组占几个扇区
c0006850:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0006853:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
/work/x86_os_my/fs/fs.c:122

	sb.data_start_lba = sb.inode_table_lba + sb.inode_table_sects;	// 数据区开始的第一个扇区号
c0006859:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
c000685f:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
c0006865:	01 d0                	add    %edx,%eax
c0006867:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
/work/x86_os_my/fs/fs.c:124

	sb.root_inode_no = 0;	//根目录的inode号是0
c000686d:	c7 85 d0 fd ff ff 00 	movl   $0x0,-0x230(%ebp)
c0006874:	00 00 00 
/work/x86_os_my/fs/fs.c:125
	sb.dir_entry_size = sizeof(struct dir_entry);
c0006877:	c7 85 d4 fd ff ff 18 	movl   $0x18,-0x22c(%ebp)
c000687e:	00 00 00 
/work/x86_os_my/fs/fs.c:127

	printk("%s info:\n", part->name);
c0006881:	8b 45 08             	mov    0x8(%ebp),%eax
c0006884:	83 c0 14             	add    $0x14,%eax
c0006887:	83 ec 08             	sub    $0x8,%esp
c000688a:	50                   	push   %eax
c000688b:	68 05 c6 00 c0       	push   $0xc000c605
c0006890:	e8 72 fc ff ff       	call   c0006507 <printk>
c0006895:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:128
	printk("   magic:0x%x\n   part_lba_base:0x%x\n   all_sectors:0x%x\n   inode_cnt:0x%x\n   block_bitmap_lba:0x%x\n   block_bitmap_sectors:0x%x\n   inode_bitmap_lba:0x%x\n   inode_bitmap_sectors:0x%x\n   inode_table_lba:0x%x\n   inode_table_sectors:0x%x\n   data_start_lba:0x%x\n", sb.magic, sb.part_lba_base, sb.sec_cnt, sb.inode_cnt, sb.block_bitmap_lba, sb.block_bitmap_sects, sb.inode_bitmap_lba, sb.inode_bitmap_sects, sb.inode_table_lba, sb.inode_table_sects, sb.data_start_lba);
c0006898:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
c000689e:	8b 9d c8 fd ff ff    	mov    -0x238(%ebp),%ebx
c00068a4:	8b bd c4 fd ff ff    	mov    -0x23c(%ebp),%edi
c00068aa:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
c00068b0:	89 85 94 fd ff ff    	mov    %eax,-0x26c(%ebp)
c00068b6:	8b b5 bc fd ff ff    	mov    -0x244(%ebp),%esi
c00068bc:	89 b5 90 fd ff ff    	mov    %esi,-0x270(%ebp)
c00068c2:	8b 8d b8 fd ff ff    	mov    -0x248(%ebp),%ecx
c00068c8:	89 8d 8c fd ff ff    	mov    %ecx,-0x274(%ebp)
c00068ce:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
c00068d4:	89 85 88 fd ff ff    	mov    %eax,-0x278(%ebp)
c00068da:	8b b5 ac fd ff ff    	mov    -0x254(%ebp),%esi
c00068e0:	89 b5 84 fd ff ff    	mov    %esi,-0x27c(%ebp)
c00068e6:	8b b5 a8 fd ff ff    	mov    -0x258(%ebp),%esi
c00068ec:	8b 8d b0 fd ff ff    	mov    -0x250(%ebp),%ecx
c00068f2:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
c00068f8:	52                   	push   %edx
c00068f9:	53                   	push   %ebx
c00068fa:	57                   	push   %edi
c00068fb:	ff b5 94 fd ff ff    	pushl  -0x26c(%ebp)
c0006901:	ff b5 90 fd ff ff    	pushl  -0x270(%ebp)
c0006907:	ff b5 8c fd ff ff    	pushl  -0x274(%ebp)
c000690d:	ff b5 88 fd ff ff    	pushl  -0x278(%ebp)
c0006913:	ff b5 84 fd ff ff    	pushl  -0x27c(%ebp)
c0006919:	56                   	push   %esi
c000691a:	51                   	push   %ecx
c000691b:	50                   	push   %eax
c000691c:	68 10 c6 00 c0       	push   $0xc000c610
c0006921:	e8 e1 fb ff ff       	call   c0006507 <printk>
c0006926:	83 c4 30             	add    $0x30,%esp
/work/x86_os_my/fs/fs.c:132


	/***** 1 将超级块写入本分区的1号扇区 *****/
	struct disk* hd = part->my_disk;	// 分区所属的硬盘
c0006929:	8b 45 08             	mov    0x8(%ebp),%eax
c000692c:	8b 40 08             	mov    0x8(%eax),%eax
c000692f:	89 45 c0             	mov    %eax,-0x40(%ebp)
/work/x86_os_my/fs/fs.c:134
	// void ide_write(struct disk* hd, uint32_t lba, void* buf, uint32_t sec_cnt);
	ide_write(hd, part->start_lba + 1, &sb, 1);
c0006932:	8b 45 08             	mov    0x8(%ebp),%eax
c0006935:	8b 00                	mov    (%eax),%eax
c0006937:	8d 50 01             	lea    0x1(%eax),%edx
c000693a:	6a 01                	push   $0x1
c000693c:	8d 85 a4 fd ff ff    	lea    -0x25c(%ebp),%eax
c0006942:	50                   	push   %eax
c0006943:	52                   	push   %edx
c0006944:	ff 75 c0             	pushl  -0x40(%ebp)
c0006947:	e8 b6 f2 ff ff       	call   c0005c02 <ide_write>
c000694c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:135
	printk("   super_block_lba:0x%x\n", part->start_lba + 1);
c000694f:	8b 45 08             	mov    0x8(%ebp),%eax
c0006952:	8b 00                	mov    (%eax),%eax
c0006954:	83 c0 01             	add    $0x1,%eax
c0006957:	83 ec 08             	sub    $0x8,%esp
c000695a:	50                   	push   %eax
c000695b:	68 12 c7 00 c0       	push   $0xc000c712
c0006960:	e8 a2 fb ff ff       	call   c0006507 <printk>
c0006965:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:139


	/* 他们三个写到硬盘上：block_bitmap_sects/inode_bitmap_sects/inode_table_sects 缓冲区选三者最大的 */
	uint32_t buf_size = (sb.block_bitmap_sects >= sb.inode_bitmap_sects ? sb.block_bitmap_sects : sb.inode_bitmap_sects);
c0006968:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
c000696e:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
c0006974:	39 c2                	cmp    %eax,%edx
c0006976:	0f 43 c2             	cmovae %edx,%eax
c0006979:	89 45 bc             	mov    %eax,-0x44(%ebp)
/work/x86_os_my/fs/fs.c:140
	buf_size = (buf_size >= sb.inode_table_sects ? buf_size : sb.inode_table_sects) * SECTOR_SIZE;
c000697c:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
c0006982:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0006985:	39 c2                	cmp    %eax,%edx
c0006987:	0f 43 c2             	cmovae %edx,%eax
c000698a:	c1 e0 09             	shl    $0x9,%eax
c000698d:	89 45 bc             	mov    %eax,-0x44(%ebp)
/work/x86_os_my/fs/fs.c:141
	uint8_t* buf = (uint8_t*)sys_malloc(buf_size);	// 申请的内存由内存管理系统清0后返回
c0006990:	83 ec 0c             	sub    $0xc,%esp
c0006993:	ff 75 bc             	pushl  -0x44(%ebp)
c0006996:	e8 31 c3 ff ff       	call   c0002ccc <sys_malloc>
c000699b:	83 c4 10             	add    $0x10,%esp
c000699e:	89 45 b8             	mov    %eax,-0x48(%ebp)
/work/x86_os_my/fs/fs.c:146


	/***** 2 将块位图初始化并写入sb.block_bitmap_lba *****/
	/* 初始化块位图 block_bitmap */
	buf[0] |= 0x01;	// 第0个块预留给根目录,位图中先占位
c00069a1:	8b 45 b8             	mov    -0x48(%ebp),%eax
c00069a4:	0f b6 00             	movzbl (%eax),%eax
c00069a7:	83 c8 01             	or     $0x1,%eax
c00069aa:	89 c2                	mov    %eax,%edx
c00069ac:	8b 45 b8             	mov    -0x48(%ebp),%eax
c00069af:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/fs/fs.c:147
	uint32_t block_bitmap_last_byte = block_bitmap_bit_len / 8;		//block_bitmap_bit_len 是位图长度，也是空闲块数量
c00069b1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c00069b4:	c1 e8 03             	shr    $0x3,%eax
c00069b7:	89 45 b4             	mov    %eax,-0x4c(%ebp)
/work/x86_os_my/fs/fs.c:148
	uint8_t  block_bitmap_last_bit  = block_bitmap_bit_len % 8;
c00069ba:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c00069bd:	83 e0 07             	and    $0x7,%eax
c00069c0:	88 45 b3             	mov    %al,-0x4d(%ebp)
/work/x86_os_my/fs/fs.c:149
	uint32_t last_size = SECTOR_SIZE - (block_bitmap_last_byte % SECTOR_SIZE);	// last_size是位图占用的最后一个扇区中，不足一扇区的空闲部分
c00069c3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c00069c6:	25 ff 01 00 00       	and    $0x1ff,%eax
c00069cb:	ba 00 02 00 00       	mov    $0x200,%edx
c00069d0:	29 c2                	sub    %eax,%edx
c00069d2:	89 d0                	mov    %edx,%eax
c00069d4:	89 45 ac             	mov    %eax,-0x54(%ebp)
/work/x86_os_my/fs/fs.c:152

	// 1 空闲块位图最后一字节，到最后一字节所在扇区的末尾，全置为占用（空闲块位图所在扇区的空闲部分）
	memset(&buf[block_bitmap_last_byte], 0xff, last_size);
c00069d7:	8b 55 b8             	mov    -0x48(%ebp),%edx
c00069da:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c00069dd:	01 d0                	add    %edx,%eax
c00069df:	83 ec 04             	sub    $0x4,%esp
c00069e2:	ff 75 ac             	pushl  -0x54(%ebp)
c00069e5:	68 ff 00 00 00       	push   $0xff
c00069ea:	50                   	push   %eax
c00069eb:	e8 d3 cd ff ff       	call   c00037c3 <memset>
c00069f0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:155

	// 2 上一步中最后一字节内，有效的位重新置0
	uint8_t bit_idx = 0;
c00069f3:	c6 45 e7 00          	movb   $0x0,-0x19(%ebp)
/work/x86_os_my/fs/fs.c:156
	while (bit_idx <= block_bitmap_last_bit) {
c00069f7:	eb 37                	jmp    c0006a30 <partition_format+0x2c2>
/work/x86_os_my/fs/fs.c:157
		buf[block_bitmap_last_byte] &= ~(1 << bit_idx++);
c00069f9:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c00069fd:	8d 50 01             	lea    0x1(%eax),%edx
c0006a00:	88 55 e7             	mov    %dl,-0x19(%ebp)
c0006a03:	0f b6 c0             	movzbl %al,%eax
c0006a06:	ba 01 00 00 00       	mov    $0x1,%edx
c0006a0b:	89 c1                	mov    %eax,%ecx
c0006a0d:	d3 e2                	shl    %cl,%edx
c0006a0f:	89 d0                	mov    %edx,%eax
c0006a11:	f7 d0                	not    %eax
c0006a13:	89 c3                	mov    %eax,%ebx
c0006a15:	8b 55 b8             	mov    -0x48(%ebp),%edx
c0006a18:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0006a1b:	01 d0                	add    %edx,%eax
c0006a1d:	8b 4d b8             	mov    -0x48(%ebp),%ecx
c0006a20:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0006a23:	01 ca                	add    %ecx,%edx
c0006a25:	0f b6 12             	movzbl (%edx),%edx
c0006a28:	89 d1                	mov    %edx,%ecx
c0006a2a:	89 da                	mov    %ebx,%edx
c0006a2c:	21 ca                	and    %ecx,%edx
c0006a2e:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/fs/fs.c:156
	// 1 空闲块位图最后一字节，到最后一字节所在扇区的末尾，全置为占用（空闲块位图所在扇区的空闲部分）
	memset(&buf[block_bitmap_last_byte], 0xff, last_size);

	// 2 上一步中最后一字节内，有效的位重新置0
	uint8_t bit_idx = 0;
	while (bit_idx <= block_bitmap_last_bit) {
c0006a30:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c0006a34:	3a 45 b3             	cmp    -0x4d(%ebp),%al
c0006a37:	76 c0                	jbe    c00069f9 <partition_format+0x28b>
/work/x86_os_my/fs/fs.c:160
		buf[block_bitmap_last_byte] &= ~(1 << bit_idx++);
	}
	// 3 写回到硬盘 空闲块位图 区域
	ide_write(hd, sb.block_bitmap_lba, buf, sb.block_bitmap_sects);
c0006a39:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
c0006a3f:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
c0006a45:	52                   	push   %edx
c0006a46:	ff 75 b8             	pushl  -0x48(%ebp)
c0006a49:	50                   	push   %eax
c0006a4a:	ff 75 c0             	pushl  -0x40(%ebp)
c0006a4d:	e8 b0 f1 ff ff       	call   c0005c02 <ide_write>
c0006a52:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:164


	/***** 3 将inode位图初始化并写入sb.inode_bitmap_lba *****/
	memset(buf, 0, buf_size);
c0006a55:	83 ec 04             	sub    $0x4,%esp
c0006a58:	ff 75 bc             	pushl  -0x44(%ebp)
c0006a5b:	6a 00                	push   $0x0
c0006a5d:	ff 75 b8             	pushl  -0x48(%ebp)
c0006a60:	e8 5e cd ff ff       	call   c00037c3 <memset>
c0006a65:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:165
	buf[0] |= 0x1;	// 第0个inode分给了根目录
c0006a68:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0006a6b:	0f b6 00             	movzbl (%eax),%eax
c0006a6e:	83 c8 01             	or     $0x1,%eax
c0006a71:	89 c2                	mov    %eax,%edx
c0006a73:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0006a76:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/fs/fs.c:169
	/* 最多4096个文件，inode位图4096个bit，正好占用1扇区，inode_bitmap_sects等于1
	 * 不像block_bitmap，在inode_bitmap的扇区中，没有多余的空闲无效位 */
	// 写回到硬盘 inode位图 区域
	ide_write(hd, sb.inode_bitmap_lba, buf, sb.inode_bitmap_sects);
c0006a78:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
c0006a7e:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
c0006a84:	52                   	push   %edx
c0006a85:	ff 75 b8             	pushl  -0x48(%ebp)
c0006a88:	50                   	push   %eax
c0006a89:	ff 75 c0             	pushl  -0x40(%ebp)
c0006a8c:	e8 71 f1 ff ff       	call   c0005c02 <ide_write>
c0006a91:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:174


	/***** 4 将inode数组初始化并写入sb.inode_table_lba *****/
	/* 处理inode_table中的第0项，即根目录所在的inode */
	memset(buf, 0, buf_size);
c0006a94:	83 ec 04             	sub    $0x4,%esp
c0006a97:	ff 75 bc             	pushl  -0x44(%ebp)
c0006a9a:	6a 00                	push   $0x0
c0006a9c:	ff 75 b8             	pushl  -0x48(%ebp)
c0006a9f:	e8 1f cd ff ff       	call   c00037c3 <memset>
c0006aa4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:175
	struct inode* i = (struct inode*)buf;
c0006aa7:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0006aaa:	89 45 a8             	mov    %eax,-0x58(%ebp)
/work/x86_os_my/fs/fs.c:176
	i->i_size = sb.dir_entry_size * 2;		// .和..	// 所有目录项大小之和
c0006aad:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
c0006ab3:	8d 14 00             	lea    (%eax,%eax,1),%edx
c0006ab6:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0006ab9:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/fs.c:177
	i->i_no = 0;   // 根目录占inode数组中第0个inode
c0006abc:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0006abf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/fs/fs.c:181
	// inode管理的是数据块（对于我们来说就是扇区）
	// 此处是指定根目录这个inode管理的数据块的位置
	// i_sectors数组后边的元素都是0 没用到
	i->i_sectors[0] = sb.data_start_lba;
c0006ac5:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
c0006acb:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0006ace:	89 50 10             	mov    %edx,0x10(%eax)
/work/x86_os_my/fs/fs.c:184
	// 写到硬盘 inode数组
	// 其实我们只处理了第0项
	ide_write(hd, sb.inode_table_lba, buf, sb.inode_table_sects);
c0006ad1:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
c0006ad7:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
c0006add:	52                   	push   %edx
c0006ade:	ff 75 b8             	pushl  -0x48(%ebp)
c0006ae1:	50                   	push   %eax
c0006ae2:	ff 75 c0             	pushl  -0x40(%ebp)
c0006ae5:	e8 18 f1 ff ff       	call   c0005c02 <ide_write>
c0006aea:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:190


	/***** 5 将根目录初始化并写入sb.data_start_lba *****/
	/* 写入根目录的两个目录项.和.. */
	// inode不知道数据块中是普通文件，还是目录。但是目录项知道。
	memset(buf, 0, buf_size);
c0006aed:	83 ec 04             	sub    $0x4,%esp
c0006af0:	ff 75 bc             	pushl  -0x44(%ebp)
c0006af3:	6a 00                	push   $0x0
c0006af5:	ff 75 b8             	pushl  -0x48(%ebp)
c0006af8:	e8 c6 cc ff ff       	call   c00037c3 <memset>
c0006afd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:191
	struct dir_entry* p_de = (struct dir_entry*)buf;
c0006b00:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0006b03:	89 45 a4             	mov    %eax,-0x5c(%ebp)
/work/x86_os_my/fs/fs.c:194

	/* 初始化当前目录"." */
	memcpy(p_de->filename, ".", 1);
c0006b06:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0006b09:	83 ec 04             	sub    $0x4,%esp
c0006b0c:	6a 01                	push   $0x1
c0006b0e:	68 2b c7 00 c0       	push   $0xc000c72b
c0006b13:	50                   	push   %eax
c0006b14:	e8 fc cc ff ff       	call   c0003815 <memcpy>
c0006b19:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:195
	p_de->i_no = 0;	// 目录或文件对应的inode编号
c0006b1c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0006b1f:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
/work/x86_os_my/fs/fs.c:196
	p_de->f_type = FT_DIRECTORY;
c0006b26:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0006b29:	c7 40 14 02 00 00 00 	movl   $0x2,0x14(%eax)
/work/x86_os_my/fs/fs.c:198

	p_de++;
c0006b30:	83 45 a4 18          	addl   $0x18,-0x5c(%ebp)
/work/x86_os_my/fs/fs.c:201

	/* 初始化当前目录父目录".." */
	memcpy(p_de->filename, "..", 2);
c0006b34:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0006b37:	83 ec 04             	sub    $0x4,%esp
c0006b3a:	6a 02                	push   $0x2
c0006b3c:	68 2d c7 00 c0       	push   $0xc000c72d
c0006b41:	50                   	push   %eax
c0006b42:	e8 ce cc ff ff       	call   c0003815 <memcpy>
c0006b47:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:202
	p_de->i_no = 0;	// 根目录的父目录依然是根目录自己
c0006b4a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0006b4d:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
/work/x86_os_my/fs/fs.c:203
	p_de->f_type = FT_DIRECTORY;
c0006b54:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0006b57:	c7 40 14 02 00 00 00 	movl   $0x2,0x14(%eax)
/work/x86_os_my/fs/fs.c:206

	/* sb.data_start_lba已经分配给了根目录，我们把根目录的目录项放进去 */
	ide_write(hd, sb.data_start_lba, buf, 1);
c0006b5e:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
c0006b64:	6a 01                	push   $0x1
c0006b66:	ff 75 b8             	pushl  -0x48(%ebp)
c0006b69:	50                   	push   %eax
c0006b6a:	ff 75 c0             	pushl  -0x40(%ebp)
c0006b6d:	e8 90 f0 ff ff       	call   c0005c02 <ide_write>
c0006b72:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:209


	printk("   root_dir_lba:0x%x\n", sb.data_start_lba);
c0006b75:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
c0006b7b:	83 ec 08             	sub    $0x8,%esp
c0006b7e:	50                   	push   %eax
c0006b7f:	68 30 c7 00 c0       	push   $0xc000c730
c0006b84:	e8 7e f9 ff ff       	call   c0006507 <printk>
c0006b89:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:210
	printk("%s format done\n", part->name);
c0006b8c:	8b 45 08             	mov    0x8(%ebp),%eax
c0006b8f:	83 c0 14             	add    $0x14,%eax
c0006b92:	83 ec 08             	sub    $0x8,%esp
c0006b95:	50                   	push   %eax
c0006b96:	68 46 c7 00 c0       	push   $0xc000c746
c0006b9b:	e8 67 f9 ff ff       	call   c0006507 <printk>
c0006ba0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:211
	sys_free(buf);
c0006ba3:	83 ec 0c             	sub    $0xc,%esp
c0006ba6:	ff 75 b8             	pushl  -0x48(%ebp)
c0006ba9:	e8 4b c7 ff ff       	call   c00032f9 <sys_free>
c0006bae:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:212
}
c0006bb1:	90                   	nop
c0006bb2:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0006bb5:	5b                   	pop    %ebx
c0006bb6:	5e                   	pop    %esi
c0006bb7:	5f                   	pop    %edi
c0006bb8:	5d                   	pop    %ebp
c0006bb9:	c3                   	ret    

c0006bba <path_parse>:
path_parse():
/work/x86_os_my/fs/fs.c:217


/* 将最上层路径名称解析出来，比如pathname="a/b/c"得到name_store="a"
 * 返回剩下的目录 "b/c" */
char* path_parse(char* pathname, char* name_store) {
c0006bba:	55                   	push   %ebp
c0006bbb:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/fs/fs.c:218
	if (pathname[0] == '/') {	// 根目录不需要单独解析
c0006bbd:	8b 45 08             	mov    0x8(%ebp),%eax
c0006bc0:	0f b6 00             	movzbl (%eax),%eax
c0006bc3:	3c 2f                	cmp    $0x2f,%al
c0006bc5:	75 27                	jne    c0006bee <path_parse+0x34>
/work/x86_os_my/fs/fs.c:220 (discriminator 1)
		/* 路径中出现1个或多个连续的字符'/',将这些'/'跳过,如"///a/b" */
		while(*(++pathname) == '/');
c0006bc7:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0006bcb:	8b 45 08             	mov    0x8(%ebp),%eax
c0006bce:	0f b6 00             	movzbl (%eax),%eax
c0006bd1:	3c 2f                	cmp    $0x2f,%al
c0006bd3:	74 f2                	je     c0006bc7 <path_parse+0xd>
/work/x86_os_my/fs/fs.c:224
	}

	/* 开始一般的路径解析 */
	while (*pathname != '/' && *pathname != 0) {
c0006bd5:	eb 17                	jmp    c0006bee <path_parse+0x34>
/work/x86_os_my/fs/fs.c:225
		*name_store++ = *pathname++;
c0006bd7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006bda:	8d 50 01             	lea    0x1(%eax),%edx
c0006bdd:	89 55 0c             	mov    %edx,0xc(%ebp)
c0006be0:	8b 55 08             	mov    0x8(%ebp),%edx
c0006be3:	8d 4a 01             	lea    0x1(%edx),%ecx
c0006be6:	89 4d 08             	mov    %ecx,0x8(%ebp)
c0006be9:	0f b6 12             	movzbl (%edx),%edx
c0006bec:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/fs/fs.c:224
		/* 路径中出现1个或多个连续的字符'/',将这些'/'跳过,如"///a/b" */
		while(*(++pathname) == '/');
	}

	/* 开始一般的路径解析 */
	while (*pathname != '/' && *pathname != 0) {
c0006bee:	8b 45 08             	mov    0x8(%ebp),%eax
c0006bf1:	0f b6 00             	movzbl (%eax),%eax
c0006bf4:	3c 2f                	cmp    $0x2f,%al
c0006bf6:	74 0a                	je     c0006c02 <path_parse+0x48>
/work/x86_os_my/fs/fs.c:224 (discriminator 1)
c0006bf8:	8b 45 08             	mov    0x8(%ebp),%eax
c0006bfb:	0f b6 00             	movzbl (%eax),%eax
c0006bfe:	84 c0                	test   %al,%al
c0006c00:	75 d5                	jne    c0006bd7 <path_parse+0x1d>
/work/x86_os_my/fs/fs.c:228
		*name_store++ = *pathname++;
	}

	if (pathname[0] == 0) {   // 若路径字符串为空则返回NULL
c0006c02:	8b 45 08             	mov    0x8(%ebp),%eax
c0006c05:	0f b6 00             	movzbl (%eax),%eax
c0006c08:	84 c0                	test   %al,%al
c0006c0a:	75 07                	jne    c0006c13 <path_parse+0x59>
/work/x86_os_my/fs/fs.c:229
		return NULL;
c0006c0c:	b8 00 00 00 00       	mov    $0x0,%eax
c0006c11:	eb 03                	jmp    c0006c16 <path_parse+0x5c>
/work/x86_os_my/fs/fs.c:231
	}
	return pathname;
c0006c13:	8b 45 08             	mov    0x8(%ebp),%eax
/work/x86_os_my/fs/fs.c:232
}
c0006c16:	5d                   	pop    %ebp
c0006c17:	c3                   	ret    

c0006c18 <path_depth_cnt>:
path_depth_cnt():
/work/x86_os_my/fs/fs.c:235

/* 返回路径深度,比如/a/b/c,深度为3 */
int32_t path_depth_cnt(char* pathname) {
c0006c18:	55                   	push   %ebp
c0006c19:	89 e5                	mov    %esp,%ebp
c0006c1b:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/fs/fs.c:236
	ASSERT(pathname != NULL);
c0006c1e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0006c22:	75 1c                	jne    c0006c40 <path_depth_cnt+0x28>
/work/x86_os_my/fs/fs.c:236 (discriminator 1)
c0006c24:	68 56 c7 00 c0       	push   $0xc000c756
c0006c29:	68 bc cd 00 c0       	push   $0xc000cdbc
c0006c2e:	68 ec 00 00 00       	push   $0xec
c0006c33:	68 ed c5 00 c0       	push   $0xc000c5ed
c0006c38:	e8 e4 b6 ff ff       	call   c0002321 <panic_spin>
c0006c3d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:237
	char* p = pathname;
c0006c40:	8b 45 08             	mov    0x8(%ebp),%eax
c0006c43:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:239
	char name[MAX_FILE_NAME_LEN];	// 用于path_parse的参数做路径解析
	uint32_t depth = 0;
c0006c46:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:242

	/* 解析路径,从中拆分出各级名称 */
	p = path_parse(p, name);
c0006c4d:	83 ec 08             	sub    $0x8,%esp
c0006c50:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0006c53:	50                   	push   %eax
c0006c54:	ff 75 f4             	pushl  -0xc(%ebp)
c0006c57:	e8 5e ff ff ff       	call   c0006bba <path_parse>
c0006c5c:	83 c4 10             	add    $0x10,%esp
c0006c5f:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:243
	while (name[0]) {
c0006c62:	eb 32                	jmp    c0006c96 <path_depth_cnt+0x7e>
/work/x86_os_my/fs/fs.c:244
		depth++;
c0006c64:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:245
		memset(name, 0, MAX_FILE_NAME_LEN);
c0006c68:	83 ec 04             	sub    $0x4,%esp
c0006c6b:	6a 10                	push   $0x10
c0006c6d:	6a 00                	push   $0x0
c0006c6f:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0006c72:	50                   	push   %eax
c0006c73:	e8 4b cb ff ff       	call   c00037c3 <memset>
c0006c78:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:246
		if (p) {	// 如果p不等于NULL,继续分析路径
c0006c7b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0006c7f:	74 15                	je     c0006c96 <path_depth_cnt+0x7e>
/work/x86_os_my/fs/fs.c:247
			p  = path_parse(p, name);
c0006c81:	83 ec 08             	sub    $0x8,%esp
c0006c84:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0006c87:	50                   	push   %eax
c0006c88:	ff 75 f4             	pushl  -0xc(%ebp)
c0006c8b:	e8 2a ff ff ff       	call   c0006bba <path_parse>
c0006c90:	83 c4 10             	add    $0x10,%esp
c0006c93:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:243
	char name[MAX_FILE_NAME_LEN];	// 用于path_parse的参数做路径解析
	uint32_t depth = 0;

	/* 解析路径,从中拆分出各级名称 */
	p = path_parse(p, name);
	while (name[0]) {
c0006c96:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c0006c9a:	84 c0                	test   %al,%al
c0006c9c:	75 c6                	jne    c0006c64 <path_depth_cnt+0x4c>
/work/x86_os_my/fs/fs.c:250
		memset(name, 0, MAX_FILE_NAME_LEN);
		if (p) {	// 如果p不等于NULL,继续分析路径
			p  = path_parse(p, name);
		}
	}
	return depth;
c0006c9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
/work/x86_os_my/fs/fs.c:251
}
c0006ca1:	c9                   	leave  
c0006ca2:	c3                   	ret    

c0006ca3 <search_file>:
search_file():
/work/x86_os_my/fs/fs.c:260
 * 全局变量 struct dir root_dir 定义在 dir.c
 * 也支持 /./a 或者 /../b 会把.和..当做一个目录项继续往下层找
 * /a/b/c若c不存在，那么 searched_record.searched_path 是 /a/b/c
 * 注意下边三种return的地方，是三种情况！
 */
static int search_file(const char* pathname, struct path_search_record* searched_record) {
c0006ca3:	55                   	push   %ebp
c0006ca4:	89 e5                	mov    %esp,%ebp
c0006ca6:	83 ec 48             	sub    $0x48,%esp
/work/x86_os_my/fs/fs.c:262
	/* 如果待查找的是根目录,为避免下面无用的查找,直接返回已知根目录信息 */
	if (!strcmp(pathname, "/") || !strcmp(pathname, "/.") || !strcmp(pathname, "/..")) {
c0006ca9:	83 ec 08             	sub    $0x8,%esp
c0006cac:	68 67 c7 00 c0       	push   $0xc000c767
c0006cb1:	ff 75 08             	pushl  0x8(%ebp)
c0006cb4:	e8 df cc ff ff       	call   c0003998 <strcmp>
c0006cb9:	83 c4 10             	add    $0x10,%esp
c0006cbc:	84 c0                	test   %al,%al
c0006cbe:	74 2e                	je     c0006cee <search_file+0x4b>
/work/x86_os_my/fs/fs.c:262 (discriminator 1)
c0006cc0:	83 ec 08             	sub    $0x8,%esp
c0006cc3:	68 69 c7 00 c0       	push   $0xc000c769
c0006cc8:	ff 75 08             	pushl  0x8(%ebp)
c0006ccb:	e8 c8 cc ff ff       	call   c0003998 <strcmp>
c0006cd0:	83 c4 10             	add    $0x10,%esp
c0006cd3:	84 c0                	test   %al,%al
c0006cd5:	74 17                	je     c0006cee <search_file+0x4b>
/work/x86_os_my/fs/fs.c:262 (discriminator 2)
c0006cd7:	83 ec 08             	sub    $0x8,%esp
c0006cda:	68 6c c7 00 c0       	push   $0xc000c76c
c0006cdf:	ff 75 08             	pushl  0x8(%ebp)
c0006ce2:	e8 b1 cc ff ff       	call   c0003998 <strcmp>
c0006ce7:	83 c4 10             	add    $0x10,%esp
c0006cea:	84 c0                	test   %al,%al
c0006cec:	75 2a                	jne    c0006d18 <search_file+0x75>
/work/x86_os_my/fs/fs.c:263
		searched_record->parent_dir = &root_dir;	// 直接父目录
c0006cee:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006cf1:	c7 80 00 02 00 00 40 	movl   $0xc0012440,0x200(%eax)
c0006cf8:	24 01 c0 
/work/x86_os_my/fs/fs.c:264
		searched_record->file_type = FT_DIRECTORY;	// FT_UNKNOWN代表没找到，找到才有类型是文件或目录
c0006cfb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006cfe:	c7 80 04 02 00 00 02 	movl   $0x2,0x204(%eax)
c0006d05:	00 00 00 
/work/x86_os_my/fs/fs.c:265
		searched_record->searched_path[0] = 0;		// 搜索过的路径置空
c0006d08:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006d0b:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/fs/fs.c:266
		return 0;
c0006d0e:	b8 00 00 00 00       	mov    $0x0,%eax
c0006d13:	e9 08 02 00 00       	jmp    c0006f20 <search_file+0x27d>
/work/x86_os_my/fs/fs.c:269
	}

	uint32_t path_len = strlen(pathname);
c0006d18:	83 ec 0c             	sub    $0xc,%esp
c0006d1b:	ff 75 08             	pushl  0x8(%ebp)
c0006d1e:	e8 2a cc ff ff       	call   c000394d <strlen>
c0006d23:	83 c4 10             	add    $0x10,%esp
c0006d26:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:271
	/* 保证pathname至少是这样的路径/x且小于最大长度 */
	ASSERT(pathname[0] == '/' && path_len > 1 && path_len < MAX_PATH_LEN);
c0006d29:	8b 45 08             	mov    0x8(%ebp),%eax
c0006d2c:	0f b6 00             	movzbl (%eax),%eax
c0006d2f:	3c 2f                	cmp    $0x2f,%al
c0006d31:	75 0f                	jne    c0006d42 <search_file+0x9f>
/work/x86_os_my/fs/fs.c:271 (discriminator 1)
c0006d33:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
c0006d37:	76 09                	jbe    c0006d42 <search_file+0x9f>
/work/x86_os_my/fs/fs.c:271 (discriminator 3)
c0006d39:	81 7d e8 ff 01 00 00 	cmpl   $0x1ff,-0x18(%ebp)
c0006d40:	76 1c                	jbe    c0006d5e <search_file+0xbb>
/work/x86_os_my/fs/fs.c:271 (discriminator 5)
c0006d42:	68 70 c7 00 c0       	push   $0xc000c770
c0006d47:	68 cc cd 00 c0       	push   $0xc000cdcc
c0006d4c:	68 0f 01 00 00       	push   $0x10f
c0006d51:	68 ed c5 00 c0       	push   $0xc000c5ed
c0006d56:	e8 c6 b5 ff ff       	call   c0002321 <panic_spin>
c0006d5b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:272
	char* sub_path = (char*)pathname;
c0006d5e:	8b 45 08             	mov    0x8(%ebp),%eax
c0006d61:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:273
	struct dir* parent_dir = &root_dir;
c0006d64:	c7 45 f0 40 24 01 c0 	movl   $0xc0012440,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:277
	struct dir_entry dir_e;

	/* 数组name每次的值分别是各级目录的名字："a","b","c" */
	char name[MAX_FILE_NAME_LEN] = {0};
c0006d6b:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
c0006d72:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
c0006d79:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
c0006d80:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
/work/x86_os_my/fs/fs.c:279

	searched_record->parent_dir = parent_dir;	// 直接父目录
c0006d87:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006d8a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0006d8d:	89 90 00 02 00 00    	mov    %edx,0x200(%eax)
/work/x86_os_my/fs/fs.c:280
	searched_record->file_type = FT_UNKNOWN;	// 初始值代表没找到，找到才有类型是文件或目录
c0006d93:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006d96:	c7 80 04 02 00 00 00 	movl   $0x0,0x204(%eax)
c0006d9d:	00 00 00 
/work/x86_os_my/fs/fs.c:281
	uint32_t parent_inode_no = 0;  // 备份各层解析出来的路径，的父目录，的inode号
c0006da0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:283

	sub_path = path_parse(sub_path, name);
c0006da7:	83 ec 08             	sub    $0x8,%esp
c0006daa:	8d 45 c0             	lea    -0x40(%ebp),%eax
c0006dad:	50                   	push   %eax
c0006dae:	ff 75 f4             	pushl  -0xc(%ebp)
c0006db1:	e8 04 fe ff ff       	call   c0006bba <path_parse>
c0006db6:	83 c4 10             	add    $0x10,%esp
c0006db9:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:284
	while (name[0]) {	   // 若第一个字符就是结束符,结束循环
c0006dbc:	e9 0f 01 00 00       	jmp    c0006ed0 <search_file+0x22d>
/work/x86_os_my/fs/fs.c:286
		/* 记录查找过的路径,但不能超过searched_path的长度512字节 */
		ASSERT(strlen(searched_record->searched_path) < 512);
c0006dc1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006dc4:	83 ec 0c             	sub    $0xc,%esp
c0006dc7:	50                   	push   %eax
c0006dc8:	e8 80 cb ff ff       	call   c000394d <strlen>
c0006dcd:	83 c4 10             	add    $0x10,%esp
c0006dd0:	3d ff 01 00 00       	cmp    $0x1ff,%eax
c0006dd5:	76 1c                	jbe    c0006df3 <search_file+0x150>
/work/x86_os_my/fs/fs.c:286 (discriminator 1)
c0006dd7:	68 b0 c7 00 c0       	push   $0xc000c7b0
c0006ddc:	68 cc cd 00 c0       	push   $0xc000cdcc
c0006de1:	68 1e 01 00 00       	push   $0x11e
c0006de6:	68 ed c5 00 c0       	push   $0xc000c5ed
c0006deb:	e8 31 b5 ff ff       	call   c0002321 <panic_spin>
c0006df0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:289

		/* 追加到已存在的父目录 */
		strcat(searched_record->searched_path, "/");
c0006df3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006df6:	83 ec 08             	sub    $0x8,%esp
c0006df9:	68 67 c7 00 c0       	push   $0xc000c767
c0006dfe:	50                   	push   %eax
c0006dff:	e8 c3 cc ff ff       	call   c0003ac7 <strcat>
c0006e04:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:290
		strcat(searched_record->searched_path, name);
c0006e07:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006e0a:	83 ec 08             	sub    $0x8,%esp
c0006e0d:	8d 55 c0             	lea    -0x40(%ebp),%edx
c0006e10:	52                   	push   %edx
c0006e11:	50                   	push   %eax
c0006e12:	e8 b0 cc ff ff       	call   c0003ac7 <strcat>
c0006e17:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:293

		/* 在所给的目录中查找目录项，找到后将目录项填入dir_e */
		if (false != search_dir_entry(cur_part, parent_dir, name, &dir_e)) {
c0006e1a:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c0006e1f:	8d 55 d0             	lea    -0x30(%ebp),%edx
c0006e22:	52                   	push   %edx
c0006e23:	8d 55 c0             	lea    -0x40(%ebp),%edx
c0006e26:	52                   	push   %edx
c0006e27:	ff 75 f0             	pushl  -0x10(%ebp)
c0006e2a:	50                   	push   %eax
c0006e2b:	e8 70 30 00 00       	call   c0009ea0 <search_dir_entry>
c0006e30:	83 c4 10             	add    $0x10,%esp
c0006e33:	85 c0                	test   %eax,%eax
c0006e35:	0f 84 8e 00 00 00    	je     c0006ec9 <search_file+0x226>
/work/x86_os_my/fs/fs.c:294
			memset(name, 0, MAX_FILE_NAME_LEN);
c0006e3b:	83 ec 04             	sub    $0x4,%esp
c0006e3e:	6a 10                	push   $0x10
c0006e40:	6a 00                	push   $0x0
c0006e42:	8d 45 c0             	lea    -0x40(%ebp),%eax
c0006e45:	50                   	push   %eax
c0006e46:	e8 78 c9 ff ff       	call   c00037c3 <memset>
c0006e4b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:296
			/* 若sub_path不等于NULL，也就是搜索未结束，继续拆分路径 */
			if (sub_path) {
c0006e4e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0006e52:	74 15                	je     c0006e69 <search_file+0x1c6>
/work/x86_os_my/fs/fs.c:297
				sub_path = path_parse(sub_path, name);
c0006e54:	83 ec 08             	sub    $0x8,%esp
c0006e57:	8d 45 c0             	lea    -0x40(%ebp),%eax
c0006e5a:	50                   	push   %eax
c0006e5b:	ff 75 f4             	pushl  -0xc(%ebp)
c0006e5e:	e8 57 fd ff ff       	call   c0006bba <path_parse>
c0006e63:	83 c4 10             	add    $0x10,%esp
c0006e66:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:300
			}

			if (FT_DIRECTORY == dir_e.f_type) {			// 如果被打开的是目录
c0006e69:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0006e6c:	83 f8 02             	cmp    $0x2,%eax
c0006e6f:	75 3e                	jne    c0006eaf <search_file+0x20c>
/work/x86_os_my/fs/fs.c:301
				parent_inode_no = parent_dir->inode->i_no;
c0006e71:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006e74:	8b 00                	mov    (%eax),%eax
c0006e76:	8b 00                	mov    (%eax),%eax
c0006e78:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:302
				dir_close(parent_dir);
c0006e7b:	83 ec 0c             	sub    $0xc,%esp
c0006e7e:	ff 75 f0             	pushl  -0x10(%ebp)
c0006e81:	e8 f2 31 00 00       	call   c000a078 <dir_close>
c0006e86:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:304

				parent_dir = dir_open(cur_part, dir_e.i_no);
c0006e89:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0006e8c:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c0006e91:	83 ec 08             	sub    $0x8,%esp
c0006e94:	52                   	push   %edx
c0006e95:	50                   	push   %eax
c0006e96:	e8 c5 2f 00 00       	call   c0009e60 <dir_open>
c0006e9b:	83 c4 10             	add    $0x10,%esp
c0006e9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:305
				searched_record->parent_dir = parent_dir;	// 更新直接父目录
c0006ea1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006ea4:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0006ea7:	89 90 00 02 00 00    	mov    %edx,0x200(%eax)
/work/x86_os_my/fs/fs.c:306
				continue;
c0006ead:	eb 21                	jmp    c0006ed0 <search_file+0x22d>
/work/x86_os_my/fs/fs.c:307
			} else if (FT_REGULAR == dir_e.f_type) {	// 若是普通文件
c0006eaf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0006eb2:	83 f8 01             	cmp    $0x1,%eax
c0006eb5:	75 19                	jne    c0006ed0 <search_file+0x22d>
/work/x86_os_my/fs/fs.c:312
				/* 如果搜索路径为 /a/b 但是目录下只有文件a 此时也会返回文件a的inode号【中间某个目录不存在】
				 * 由主调函数根据 searched_record.searched_path 判断："提供的 pathname 是否正确，是否处理完了"
				 * 【情况1】
				 */
				searched_record->file_type = FT_REGULAR;
c0006eb7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006eba:	c7 80 04 02 00 00 01 	movl   $0x1,0x204(%eax)
c0006ec1:	00 00 00 
/work/x86_os_my/fs/fs.c:313
				return dir_e.i_no;
c0006ec4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0006ec7:	eb 57                	jmp    c0006f20 <search_file+0x27d>
/work/x86_os_my/fs/fs.c:321
			/* 找不到目录项时，要留着 parent_dir 不要关闭，
			 * 主调函数需要据此知道在哪个目录中创建文件，此时的 searched_record->parent_dir 指向父目录，主调函数负责关闭该目录
			 * 主调函数，创建新文件的话需要在 parent_dir 中创建
			 * 【情况2】
			 */
			return -1;
c0006ec9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0006ece:	eb 50                	jmp    c0006f20 <search_file+0x27d>
/work/x86_os_my/fs/fs.c:284
	searched_record->parent_dir = parent_dir;	// 直接父目录
	searched_record->file_type = FT_UNKNOWN;	// 初始值代表没找到，找到才有类型是文件或目录
	uint32_t parent_inode_no = 0;  // 备份各层解析出来的路径，的父目录，的inode号

	sub_path = path_parse(sub_path, name);
	while (name[0]) {	   // 若第一个字符就是结束符,结束循环
c0006ed0:	0f b6 45 c0          	movzbl -0x40(%ebp),%eax
c0006ed4:	84 c0                	test   %al,%al
c0006ed6:	0f 85 e5 fe ff ff    	jne    c0006dc1 <search_file+0x11e>
/work/x86_os_my/fs/fs.c:332
	 * 此时 searched_record-> parent_dir 是路径 pathname 中的最后一级目录 c，并不是倒数第二级的父目录 b
	 * 要保证，无论搜索目标是普通文件，还是目录，searched_record->parent_dir 中记录的都应该是父目录！
	 * 因此要关闭目录c，重新打开目录b
	 * 【情况3】
	 */
	dir_close(searched_record->parent_dir);
c0006edc:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006edf:	8b 80 00 02 00 00    	mov    0x200(%eax),%eax
c0006ee5:	83 ec 0c             	sub    $0xc,%esp
c0006ee8:	50                   	push   %eax
c0006ee9:	e8 8a 31 00 00       	call   c000a078 <dir_close>
c0006eee:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:333
	searched_record->parent_dir = dir_open(cur_part, parent_inode_no);
c0006ef1:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c0006ef6:	83 ec 08             	sub    $0x8,%esp
c0006ef9:	ff 75 ec             	pushl  -0x14(%ebp)
c0006efc:	50                   	push   %eax
c0006efd:	e8 5e 2f 00 00       	call   c0009e60 <dir_open>
c0006f02:	83 c4 10             	add    $0x10,%esp
c0006f05:	89 c2                	mov    %eax,%edx
c0006f07:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006f0a:	89 90 00 02 00 00    	mov    %edx,0x200(%eax)
/work/x86_os_my/fs/fs.c:334
	searched_record->file_type = FT_DIRECTORY;
c0006f10:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006f13:	c7 80 04 02 00 00 02 	movl   $0x2,0x204(%eax)
c0006f1a:	00 00 00 
/work/x86_os_my/fs/fs.c:335
	return dir_e.i_no;	//目录c的inode号
c0006f1d:	8b 45 e0             	mov    -0x20(%ebp),%eax
/work/x86_os_my/fs/fs.c:336 (discriminator 1)
}
c0006f20:	c9                   	leave  
c0006f21:	c3                   	ret    

c0006f22 <sys_open>:
sys_open():
/work/x86_os_my/fs/fs.c:343
/* 打开或创建文件成功后,返回文件描述符,否则返回-1
 * 对应 file.c 中的 file_create
 *
 * open(const char * pathname, (O_CREAT|O_WRONLY|O_TRUNC));
 */
int32_t sys_open(const char* pathname, uint8_t flags) {
c0006f22:	55                   	push   %ebp
c0006f23:	89 e5                	mov    %esp,%ebp
c0006f25:	53                   	push   %ebx
c0006f26:	81 ec 34 02 00 00    	sub    $0x234,%esp
c0006f2c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006f2f:	88 85 d4 fd ff ff    	mov    %al,-0x22c(%ebp)
/work/x86_os_my/fs/fs.c:345
	/* 对目录要用dir_open,这里只有open文件 */
	if (pathname[strlen(pathname) - 1] == '/') {
c0006f35:	83 ec 0c             	sub    $0xc,%esp
c0006f38:	ff 75 08             	pushl  0x8(%ebp)
c0006f3b:	e8 0d ca ff ff       	call   c000394d <strlen>
c0006f40:	83 c4 10             	add    $0x10,%esp
c0006f43:	8d 50 ff             	lea    -0x1(%eax),%edx
c0006f46:	8b 45 08             	mov    0x8(%ebp),%eax
c0006f49:	01 d0                	add    %edx,%eax
c0006f4b:	0f b6 00             	movzbl (%eax),%eax
c0006f4e:	3c 2f                	cmp    $0x2f,%al
c0006f50:	75 1d                	jne    c0006f6f <sys_open+0x4d>
/work/x86_os_my/fs/fs.c:346
		printk("can`t open a directory %s\n", pathname);
c0006f52:	83 ec 08             	sub    $0x8,%esp
c0006f55:	ff 75 08             	pushl  0x8(%ebp)
c0006f58:	68 dd c7 00 c0       	push   $0xc000c7dd
c0006f5d:	e8 a5 f5 ff ff       	call   c0006507 <printk>
c0006f62:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:347
		return -1;
c0006f65:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0006f6a:	e9 10 02 00 00       	jmp    c000717f <sys_open+0x25d>
/work/x86_os_my/fs/fs.c:349
	}
	ASSERT(flags <= 7);
c0006f6f:	80 bd d4 fd ff ff 07 	cmpb   $0x7,-0x22c(%ebp)
c0006f76:	76 1c                	jbe    c0006f94 <sys_open+0x72>
/work/x86_os_my/fs/fs.c:349 (discriminator 1)
c0006f78:	68 f8 c7 00 c0       	push   $0xc000c7f8
c0006f7d:	68 d8 cd 00 c0       	push   $0xc000cdd8
c0006f82:	68 5d 01 00 00       	push   $0x15d
c0006f87:	68 ed c5 00 c0       	push   $0xc000c5ed
c0006f8c:	e8 90 b3 ff ff       	call   c0002321 <panic_spin>
c0006f91:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:350
	int32_t fd = -1;	// 默认为找不到
c0006f94:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:353

	struct path_search_record searched_record;
	memset(&searched_record, 0, sizeof(struct path_search_record));
c0006f9b:	83 ec 04             	sub    $0x4,%esp
c0006f9e:	68 08 02 00 00       	push   $0x208
c0006fa3:	6a 00                	push   $0x0
c0006fa5:	8d 85 dc fd ff ff    	lea    -0x224(%ebp),%eax
c0006fab:	50                   	push   %eax
c0006fac:	e8 12 c8 ff ff       	call   c00037c3 <memset>
c0006fb1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:356

	/* 记录目录深度.帮助判断中间某个目录不存在的情况 */
	uint32_t pathname_depth = path_depth_cnt((char*)pathname);
c0006fb4:	83 ec 0c             	sub    $0xc,%esp
c0006fb7:	ff 75 08             	pushl  0x8(%ebp)
c0006fba:	e8 59 fc ff ff       	call   c0006c18 <path_depth_cnt>
c0006fbf:	83 c4 10             	add    $0x10,%esp
c0006fc2:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:359

	/* 先检查文件是否存在 */
	int inode_no = search_file(pathname, &searched_record);
c0006fc5:	83 ec 08             	sub    $0x8,%esp
c0006fc8:	8d 85 dc fd ff ff    	lea    -0x224(%ebp),%eax
c0006fce:	50                   	push   %eax
c0006fcf:	ff 75 08             	pushl  0x8(%ebp)
c0006fd2:	e8 cc fc ff ff       	call   c0006ca3 <search_file>
c0006fd7:	83 c4 10             	add    $0x10,%esp
c0006fda:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:360
	bool found = (inode_no != -1 ? true : false);
c0006fdd:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%ebp)
c0006fe1:	0f 95 c0             	setne  %al
c0006fe4:	0f b6 c0             	movzbl %al,%eax
c0006fe7:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:362

	if (searched_record.file_type == FT_DIRECTORY) {
c0006fea:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0006fed:	83 f8 02             	cmp    $0x2,%eax
c0006ff0:	75 29                	jne    c000701b <sys_open+0xf9>
/work/x86_os_my/fs/fs.c:363
		printk("can`t open a direcotry with open(), use opendir() to instead\n");
c0006ff2:	83 ec 0c             	sub    $0xc,%esp
c0006ff5:	68 04 c8 00 c0       	push   $0xc000c804
c0006ffa:	e8 08 f5 ff ff       	call   c0006507 <printk>
c0006fff:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:364
		dir_close(searched_record.parent_dir);	//主调函数负责关闭该目录
c0007002:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0007005:	83 ec 0c             	sub    $0xc,%esp
c0007008:	50                   	push   %eax
c0007009:	e8 6a 30 00 00       	call   c000a078 <dir_close>
c000700e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:365
		return -1;
c0007011:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007016:	e9 64 01 00 00       	jmp    c000717f <sys_open+0x25d>
/work/x86_os_my/fs/fs.c:368
	}

	uint32_t path_searched_depth = path_depth_cnt(searched_record.searched_path);
c000701b:	83 ec 0c             	sub    $0xc,%esp
c000701e:	8d 85 dc fd ff ff    	lea    -0x224(%ebp),%eax
c0007024:	50                   	push   %eax
c0007025:	e8 ee fb ff ff       	call   c0006c18 <path_depth_cnt>
c000702a:	83 c4 10             	add    $0x10,%esp
c000702d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/fs.c:372

	/* 先判断是否把pathname的各层目录都访问到了 */
	// 【search_file情况1】说明并没有访问到全部的路径,某个中间目录是不存在的【是一个同名的普通文件】
	if (pathname_depth != path_searched_depth) {
c0007030:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0007033:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c0007036:	74 33                	je     c000706b <sys_open+0x149>
/work/x86_os_my/fs/fs.c:373
		printk("cannot access %s: Not a directory, subpath %s is`t exist\n",
c0007038:	83 ec 04             	sub    $0x4,%esp
c000703b:	8d 85 dc fd ff ff    	lea    -0x224(%ebp),%eax
c0007041:	50                   	push   %eax
c0007042:	ff 75 08             	pushl  0x8(%ebp)
c0007045:	68 44 c8 00 c0       	push   $0xc000c844
c000704a:	e8 b8 f4 ff ff       	call   c0006507 <printk>
c000704f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:375
			pathname, searched_record.searched_path);
		dir_close(searched_record.parent_dir);
c0007052:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0007055:	83 ec 0c             	sub    $0xc,%esp
c0007058:	50                   	push   %eax
c0007059:	e8 1a 30 00 00       	call   c000a078 <dir_close>
c000705e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:376
		return -1;
c0007061:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007066:	e9 14 01 00 00       	jmp    c000717f <sys_open+0x25d>
/work/x86_os_my/fs/fs.c:381
	}

	// 【search_file情况2】若是在最后一个路径上没找到
	// 并且此时也不是要创建文件,直接返回-1 */
	if (!found && !(flags & O_CREAT)) {
c000706b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c000706f:	75 56                	jne    c00070c7 <sys_open+0x1a5>
/work/x86_os_my/fs/fs.c:381 (discriminator 1)
c0007071:	0f b6 85 d4 fd ff ff 	movzbl -0x22c(%ebp),%eax
c0007078:	83 e0 04             	and    $0x4,%eax
c000707b:	85 c0                	test   %eax,%eax
c000707d:	75 48                	jne    c00070c7 <sys_open+0x1a5>
/work/x86_os_my/fs/fs.c:383
		printk("in path %s, file %s is`t exist\n",
			searched_record.searched_path, (strrchr(searched_record.searched_path, '/') + 1));
c000707f:	83 ec 08             	sub    $0x8,%esp
c0007082:	6a 2f                	push   $0x2f
c0007084:	8d 85 dc fd ff ff    	lea    -0x224(%ebp),%eax
c000708a:	50                   	push   %eax
c000708b:	e8 d9 c9 ff ff       	call   c0003a69 <strrchr>
c0007090:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:382
	}

	// 【search_file情况2】若是在最后一个路径上没找到
	// 并且此时也不是要创建文件,直接返回-1 */
	if (!found && !(flags & O_CREAT)) {
		printk("in path %s, file %s is`t exist\n",
c0007093:	83 c0 01             	add    $0x1,%eax
c0007096:	83 ec 04             	sub    $0x4,%esp
c0007099:	50                   	push   %eax
c000709a:	8d 85 dc fd ff ff    	lea    -0x224(%ebp),%eax
c00070a0:	50                   	push   %eax
c00070a1:	68 80 c8 00 c0       	push   $0xc000c880
c00070a6:	e8 5c f4 ff ff       	call   c0006507 <printk>
c00070ab:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:384
			searched_record.searched_path, (strrchr(searched_record.searched_path, '/') + 1));
		dir_close(searched_record.parent_dir);
c00070ae:	8b 45 dc             	mov    -0x24(%ebp),%eax
c00070b1:	83 ec 0c             	sub    $0xc,%esp
c00070b4:	50                   	push   %eax
c00070b5:	e8 be 2f 00 00       	call   c000a078 <dir_close>
c00070ba:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:385
		return -1;
c00070bd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00070c2:	e9 b8 00 00 00       	jmp    c000717f <sys_open+0x25d>
/work/x86_os_my/fs/fs.c:386
	} else if (found && flags & O_CREAT) {	// 若要创建的文件已存在，相同目录下不可以有同名文件，返回-1
c00070c7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c00070cb:	74 37                	je     c0007104 <sys_open+0x1e2>
/work/x86_os_my/fs/fs.c:386 (discriminator 1)
c00070cd:	0f b6 85 d4 fd ff ff 	movzbl -0x22c(%ebp),%eax
c00070d4:	83 e0 04             	and    $0x4,%eax
c00070d7:	85 c0                	test   %eax,%eax
c00070d9:	74 29                	je     c0007104 <sys_open+0x1e2>
/work/x86_os_my/fs/fs.c:387
		printk("%s has already exist!\n", pathname);
c00070db:	83 ec 08             	sub    $0x8,%esp
c00070de:	ff 75 08             	pushl  0x8(%ebp)
c00070e1:	68 a0 c8 00 c0       	push   $0xc000c8a0
c00070e6:	e8 1c f4 ff ff       	call   c0006507 <printk>
c00070eb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:388
		dir_close(searched_record.parent_dir);
c00070ee:	8b 45 dc             	mov    -0x24(%ebp),%eax
c00070f1:	83 ec 0c             	sub    $0xc,%esp
c00070f4:	50                   	push   %eax
c00070f5:	e8 7e 2f 00 00       	call   c000a078 <dir_close>
c00070fa:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:389
		return -1;
c00070fd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007102:	eb 7b                	jmp    c000717f <sys_open+0x25d>
/work/x86_os_my/fs/fs.c:392
	}

	switch (flags & O_CREAT) {	// sys_open("xxx", O_CREAT|O_XXX)
c0007104:	0f b6 85 d4 fd ff ff 	movzbl -0x22c(%ebp),%eax
c000710b:	83 e0 04             	and    $0x4,%eax
c000710e:	83 f8 04             	cmp    $0x4,%eax
c0007111:	75 4f                	jne    c0007162 <sys_open+0x240>
/work/x86_os_my/fs/fs.c:394
		case O_CREAT:
		printk("creating file\n");
c0007113:	83 ec 0c             	sub    $0xc,%esp
c0007116:	68 b7 c8 00 c0       	push   $0xc000c8b7
c000711b:	e8 e7 f3 ff ff       	call   c0006507 <printk>
c0007120:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:396
		// 【search_file情况3】主调函数用到此目录，在该目录下创建文件
		fd = file_create(searched_record.parent_dir, (strrchr(pathname, '/') + 1), flags);
c0007123:	0f b6 9d d4 fd ff ff 	movzbl -0x22c(%ebp),%ebx
c000712a:	83 ec 08             	sub    $0x8,%esp
c000712d:	6a 2f                	push   $0x2f
c000712f:	ff 75 08             	pushl  0x8(%ebp)
c0007132:	e8 32 c9 ff ff       	call   c0003a69 <strrchr>
c0007137:	83 c4 10             	add    $0x10,%esp
c000713a:	8d 50 01             	lea    0x1(%eax),%edx
c000713d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0007140:	83 ec 04             	sub    $0x4,%esp
c0007143:	53                   	push   %ebx
c0007144:	52                   	push   %edx
c0007145:	50                   	push   %eax
c0007146:	e8 8a 1d 00 00       	call   c0008ed5 <file_create>
c000714b:	83 c4 10             	add    $0x10,%esp
c000714e:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:397
		dir_close(searched_record.parent_dir);
c0007151:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0007154:	83 ec 0c             	sub    $0xc,%esp
c0007157:	50                   	push   %eax
c0007158:	e8 1b 2f 00 00       	call   c000a078 <dir_close>
c000715d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:398
		break;
c0007160:	eb 1a                	jmp    c000717c <sys_open+0x25a>
/work/x86_os_my/fs/fs.c:402

		default:
		/* 其余情况均为打开已存在文件: O_RDONLY,O_WRONLY,O_RDWR */
		fd = file_open(inode_no, flags);
c0007162:	0f b6 95 d4 fd ff ff 	movzbl -0x22c(%ebp),%edx
c0007169:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000716c:	83 ec 08             	sub    $0x8,%esp
c000716f:	52                   	push   %edx
c0007170:	50                   	push   %eax
c0007171:	e8 21 20 00 00       	call   c0009197 <file_open>
c0007176:	83 c4 10             	add    $0x10,%esp
c0007179:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:407
	}

	/* 此fd是指任务pcb->fd_table数组中的元素下标,
	 * 并不是指全局file_table中的下标 */
	return fd;
c000717c:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:408 (discriminator 1)
}
c000717f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0007182:	c9                   	leave  
c0007183:	c3                   	ret    

c0007184 <fd_local2global>:
fd_local2global():
/work/x86_os_my/fs/fs.c:411

/* 将文件描述符转化为文件表的下标 */
static uint32_t fd_local2global(uint32_t local_fd) {
c0007184:	55                   	push   %ebp
c0007185:	89 e5                	mov    %esp,%ebp
c0007187:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/fs.c:412
	struct task_struct* cur = running_thread();
c000718a:	e8 1b ca ff ff       	call   c0003baa <running_thread>
c000718f:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:413
	int32_t global_fd = cur->fd_table[local_fd];
c0007192:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0007195:	8b 55 08             	mov    0x8(%ebp),%edx
c0007198:	83 c2 08             	add    $0x8,%edx
c000719b:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
c000719f:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:414
	ASSERT(global_fd >= 0 && global_fd < MAX_FILE_OPEN);
c00071a2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c00071a6:	78 06                	js     c00071ae <fd_local2global+0x2a>
/work/x86_os_my/fs/fs.c:414 (discriminator 1)
c00071a8:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c00071ac:	7e 1c                	jle    c00071ca <fd_local2global+0x46>
/work/x86_os_my/fs/fs.c:414 (discriminator 3)
c00071ae:	68 c8 c8 00 c0       	push   $0xc000c8c8
c00071b3:	68 e4 cd 00 c0       	push   $0xc000cde4
c00071b8:	68 9e 01 00 00       	push   $0x19e
c00071bd:	68 ed c5 00 c0       	push   $0xc000c5ed
c00071c2:	e8 5a b1 ff ff       	call   c0002321 <panic_spin>
c00071c7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:415
	return (uint32_t)global_fd;
c00071ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
/work/x86_os_my/fs/fs.c:416
}
c00071cd:	c9                   	leave  
c00071ce:	c3                   	ret    

c00071cf <sys_close>:
sys_close():
/work/x86_os_my/fs/fs.c:419

/* 关闭文件描述符fd指向的文件,成功返回0,否则返回-1 */
int32_t sys_close(int32_t fd) {
c00071cf:	55                   	push   %ebp
c00071d0:	89 e5                	mov    %esp,%ebp
c00071d2:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/fs.c:420
	int32_t ret = -1;   // 返回值默认为-1,即失败
c00071d5:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:421
	if (fd > 2) {
c00071dc:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c00071e0:	7e 47                	jle    c0007229 <sys_close+0x5a>
/work/x86_os_my/fs/fs.c:422
		uint32_t _fd = fd_local2global(fd);
c00071e2:	8b 45 08             	mov    0x8(%ebp),%eax
c00071e5:	83 ec 0c             	sub    $0xc,%esp
c00071e8:	50                   	push   %eax
c00071e9:	e8 96 ff ff ff       	call   c0007184 <fd_local2global>
c00071ee:	83 c4 10             	add    $0x10,%esp
c00071f1:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:423
		ret = file_close(&file_table[_fd]);
c00071f4:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00071f7:	89 d0                	mov    %edx,%eax
c00071f9:	01 c0                	add    %eax,%eax
c00071fb:	01 d0                	add    %edx,%eax
c00071fd:	c1 e0 02             	shl    $0x2,%eax
c0007200:	05 c0 22 01 c0       	add    $0xc00122c0,%eax
c0007205:	83 ec 0c             	sub    $0xc,%esp
c0007208:	50                   	push   %eax
c0007209:	e8 a2 20 00 00       	call   c00092b0 <file_close>
c000720e:	83 c4 10             	add    $0x10,%esp
c0007211:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:424
		running_thread()->fd_table[fd] = -1; // 使该文件描述符位可用
c0007214:	e8 91 c9 ff ff       	call   c0003baa <running_thread>
c0007219:	89 c2                	mov    %eax,%edx
c000721b:	8b 45 08             	mov    0x8(%ebp),%eax
c000721e:	83 c0 08             	add    $0x8,%eax
c0007221:	c7 44 82 04 ff ff ff 	movl   $0xffffffff,0x4(%edx,%eax,4)
c0007228:	ff 
/work/x86_os_my/fs/fs.c:426
	}
	return ret;
c0007229:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:427
}
c000722c:	c9                   	leave  
c000722d:	c3                   	ret    

c000722e <sys_write>:
sys_write():
/work/x86_os_my/fs/fs.c:430

/* 将buf中连续count个字节写入文件描述符fd,成功则返回写入的字节数,失败返回-1 */
int32_t sys_write(int32_t fd, const void* buf, uint32_t count) {
c000722e:	55                   	push   %ebp
c000722f:	89 e5                	mov    %esp,%ebp
c0007231:	57                   	push   %edi
c0007232:	81 ec 14 04 00 00    	sub    $0x414,%esp
/work/x86_os_my/fs/fs.c:431
   if (fd < 0) {
c0007238:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c000723c:	79 1a                	jns    c0007258 <sys_write+0x2a>
/work/x86_os_my/fs/fs.c:432
      printk("sys_write: fd error\n");
c000723e:	83 ec 0c             	sub    $0xc,%esp
c0007241:	68 f4 c8 00 c0       	push   $0xc000c8f4
c0007246:	e8 bc f2 ff ff       	call   c0006507 <printk>
c000724b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:433
      return -1;
c000724e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007253:	e9 ba 00 00 00       	jmp    c0007312 <sys_write+0xe4>
/work/x86_os_my/fs/fs.c:435
   }
   if (fd == stdout_no) {
c0007258:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c000725c:	75 43                	jne    c00072a1 <sys_write+0x73>
/work/x86_os_my/fs/fs.c:436
      char tmp_buf[1024] = {0};
c000725e:	8d 95 ec fb ff ff    	lea    -0x414(%ebp),%edx
c0007264:	b8 00 00 00 00       	mov    $0x0,%eax
c0007269:	b9 00 01 00 00       	mov    $0x100,%ecx
c000726e:	89 d7                	mov    %edx,%edi
c0007270:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/fs/fs.c:437
      memcpy(tmp_buf, buf, count);
c0007272:	83 ec 04             	sub    $0x4,%esp
c0007275:	ff 75 10             	pushl  0x10(%ebp)
c0007278:	ff 75 0c             	pushl  0xc(%ebp)
c000727b:	8d 85 ec fb ff ff    	lea    -0x414(%ebp),%eax
c0007281:	50                   	push   %eax
c0007282:	e8 8e c5 ff ff       	call   c0003815 <memcpy>
c0007287:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:438
      console_put_str(tmp_buf);
c000728a:	83 ec 0c             	sub    $0xc,%esp
c000728d:	8d 85 ec fb ff ff    	lea    -0x414(%ebp),%eax
c0007293:	50                   	push   %eax
c0007294:	e8 77 d2 ff ff       	call   c0004510 <console_put_str>
c0007299:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:439
      return count;
c000729c:	8b 45 10             	mov    0x10(%ebp),%eax
c000729f:	eb 71                	jmp    c0007312 <sys_write+0xe4>
/work/x86_os_my/fs/fs.c:441
   }
   uint32_t _fd = fd_local2global(fd);
c00072a1:	8b 45 08             	mov    0x8(%ebp),%eax
c00072a4:	83 ec 0c             	sub    $0xc,%esp
c00072a7:	50                   	push   %eax
c00072a8:	e8 d7 fe ff ff       	call   c0007184 <fd_local2global>
c00072ad:	83 c4 10             	add    $0x10,%esp
c00072b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:442
   struct file* wr_file = &file_table[_fd];
c00072b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c00072b6:	89 d0                	mov    %edx,%eax
c00072b8:	01 c0                	add    %eax,%eax
c00072ba:	01 d0                	add    %edx,%eax
c00072bc:	c1 e0 02             	shl    $0x2,%eax
c00072bf:	05 c0 22 01 c0       	add    $0xc00122c0,%eax
c00072c4:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:443
   if (wr_file->fd_flag & O_WRONLY || wr_file->fd_flag & O_RDWR) {
c00072c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00072ca:	8b 40 04             	mov    0x4(%eax),%eax
c00072cd:	83 e0 01             	and    $0x1,%eax
c00072d0:	85 c0                	test   %eax,%eax
c00072d2:	75 0d                	jne    c00072e1 <sys_write+0xb3>
/work/x86_os_my/fs/fs.c:443 (discriminator 1)
c00072d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00072d7:	8b 40 04             	mov    0x4(%eax),%eax
c00072da:	83 e0 02             	and    $0x2,%eax
c00072dd:	85 c0                	test   %eax,%eax
c00072df:	74 1c                	je     c00072fd <sys_write+0xcf>
/work/x86_os_my/fs/fs.c:444
      uint32_t bytes_written  = file_write(wr_file, buf, count);
c00072e1:	83 ec 04             	sub    $0x4,%esp
c00072e4:	ff 75 10             	pushl  0x10(%ebp)
c00072e7:	ff 75 0c             	pushl  0xc(%ebp)
c00072ea:	ff 75 f0             	pushl  -0x10(%ebp)
c00072ed:	e8 01 20 00 00       	call   c00092f3 <file_write>
c00072f2:	83 c4 10             	add    $0x10,%esp
c00072f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:445
      return bytes_written;
c00072f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00072fb:	eb 15                	jmp    c0007312 <sys_write+0xe4>
/work/x86_os_my/fs/fs.c:447
   } else {
      console_put_str("sys_write: not allowed to write file without flag O_RDWR or O_WRONLY\n");
c00072fd:	83 ec 0c             	sub    $0xc,%esp
c0007300:	68 0c c9 00 c0       	push   $0xc000c90c
c0007305:	e8 06 d2 ff ff       	call   c0004510 <console_put_str>
c000730a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:448
      return -1;
c000730d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
/work/x86_os_my/fs/fs.c:450 (discriminator 1)
   }
}
c0007312:	8b 7d fc             	mov    -0x4(%ebp),%edi
c0007315:	c9                   	leave  
c0007316:	c3                   	ret    

c0007317 <sys_read>:
sys_read():
/work/x86_os_my/fs/fs.c:453

/* 从文件描述符fd指向的文件中读取count个字节到buf,若成功则返回读出的字节数,到文件尾则返回-1 */
int32_t sys_read(int32_t fd, void* buf, uint32_t count) {
c0007317:	55                   	push   %ebp
c0007318:	89 e5                	mov    %esp,%ebp
c000731a:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/fs.c:454
	ASSERT(buf != NULL);
c000731d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0007321:	75 1c                	jne    c000733f <sys_read+0x28>
/work/x86_os_my/fs/fs.c:454 (discriminator 1)
c0007323:	68 52 c9 00 c0       	push   $0xc000c952
c0007328:	68 f4 cd 00 c0       	push   $0xc000cdf4
c000732d:	68 c6 01 00 00       	push   $0x1c6
c0007332:	68 ed c5 00 c0       	push   $0xc000c5ed
c0007337:	e8 e5 af ff ff       	call   c0002321 <panic_spin>
c000733c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:455
	int32_t ret = -1;
c000733f:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:456
	if (fd < 0 || fd == stdout_no || fd == stderr_no) {
c0007346:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c000734a:	78 0c                	js     c0007358 <sys_read+0x41>
/work/x86_os_my/fs/fs.c:456 (discriminator 1)
c000734c:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c0007350:	74 06                	je     c0007358 <sys_read+0x41>
/work/x86_os_my/fs/fs.c:456 (discriminator 2)
c0007352:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c0007356:	75 15                	jne    c000736d <sys_read+0x56>
/work/x86_os_my/fs/fs.c:457
		printk("sys_read: fd error\n");
c0007358:	83 ec 0c             	sub    $0xc,%esp
c000735b:	68 5e c9 00 c0       	push   $0xc000c95e
c0007360:	e8 a2 f1 ff ff       	call   c0006507 <printk>
c0007365:	83 c4 10             	add    $0x10,%esp
c0007368:	e9 89 00 00 00       	jmp    c00073f6 <sys_read+0xdf>
/work/x86_os_my/fs/fs.c:458
	} else if (fd == stdin_no) {
c000736d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0007371:	75 4b                	jne    c00073be <sys_read+0xa7>
/work/x86_os_my/fs/fs.c:459
		char* buffer = buf;
c0007373:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007376:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:460
		uint32_t bytes_read = 0;
c0007379:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:461
		while (bytes_read < count) {
c0007380:	eb 1f                	jmp    c00073a1 <sys_read+0x8a>
/work/x86_os_my/fs/fs.c:462
			*buffer = ioq_getchar(&kbd_buf);
c0007382:	83 ec 0c             	sub    $0xc,%esp
c0007385:	68 c0 14 01 c0       	push   $0xc00114c0
c000738a:	e8 78 d9 ff ff       	call   c0004d07 <ioq_getchar>
c000738f:	83 c4 10             	add    $0x10,%esp
c0007392:	89 c2                	mov    %eax,%edx
c0007394:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0007397:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/fs/fs.c:463
			bytes_read++;
c0007399:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:464
			buffer++;
c000739d:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:461
	if (fd < 0 || fd == stdout_no || fd == stderr_no) {
		printk("sys_read: fd error\n");
	} else if (fd == stdin_no) {
		char* buffer = buf;
		uint32_t bytes_read = 0;
		while (bytes_read < count) {
c00073a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00073a4:	3b 45 10             	cmp    0x10(%ebp),%eax
c00073a7:	72 d9                	jb     c0007382 <sys_read+0x6b>
/work/x86_os_my/fs/fs.c:466
			*buffer = ioq_getchar(&kbd_buf);
			bytes_read++;
			buffer++;
		}
		ret = (bytes_read == 0 ? -1 : (int32_t)bytes_read);
c00073a9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c00073ad:	74 05                	je     c00073b4 <sys_read+0x9d>
/work/x86_os_my/fs/fs.c:466 (discriminator 1)
c00073af:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00073b2:	eb 05                	jmp    c00073b9 <sys_read+0xa2>
/work/x86_os_my/fs/fs.c:466 (discriminator 2)
c00073b4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
/work/x86_os_my/fs/fs.c:466 (discriminator 4)
c00073b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00073bc:	eb 38                	jmp    c00073f6 <sys_read+0xdf>
/work/x86_os_my/fs/fs.c:468
	} else {
		uint32_t _fd = fd_local2global(fd);
c00073be:	8b 45 08             	mov    0x8(%ebp),%eax
c00073c1:	83 ec 0c             	sub    $0xc,%esp
c00073c4:	50                   	push   %eax
c00073c5:	e8 ba fd ff ff       	call   c0007184 <fd_local2global>
c00073ca:	83 c4 10             	add    $0x10,%esp
c00073cd:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:469
		ret = file_read(&file_table[_fd], buf, count);
c00073d0:	8b 55 e8             	mov    -0x18(%ebp),%edx
c00073d3:	89 d0                	mov    %edx,%eax
c00073d5:	01 c0                	add    %eax,%eax
c00073d7:	01 d0                	add    %edx,%eax
c00073d9:	c1 e0 02             	shl    $0x2,%eax
c00073dc:	05 c0 22 01 c0       	add    $0xc00122c0,%eax
c00073e1:	83 ec 04             	sub    $0x4,%esp
c00073e4:	ff 75 10             	pushl  0x10(%ebp)
c00073e7:	ff 75 0c             	pushl  0xc(%ebp)
c00073ea:	50                   	push   %eax
c00073eb:	e8 97 26 00 00       	call   c0009a87 <file_read>
c00073f0:	83 c4 10             	add    $0x10,%esp
c00073f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:471
	}
	return ret;
c00073f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:472
}
c00073f9:	c9                   	leave  
c00073fa:	c3                   	ret    

c00073fb <sys_lseek>:
sys_lseek():
/work/x86_os_my/fs/fs.c:476


/* 重置用于文件读写指针,成功时返回新的偏移量,出错时返回-1 */
int32_t sys_lseek(int32_t fd, int32_t offset, uint8_t whence) {
c00073fb:	55                   	push   %ebp
c00073fc:	89 e5                	mov    %esp,%ebp
c00073fe:	83 ec 28             	sub    $0x28,%esp
c0007401:	8b 45 10             	mov    0x10(%ebp),%eax
c0007404:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/fs/fs.c:477
	if (fd < 0) {
c0007407:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c000740b:	79 1a                	jns    c0007427 <sys_lseek+0x2c>
/work/x86_os_my/fs/fs.c:478
		printk("sys_lseek: fd error\n");
c000740d:	83 ec 0c             	sub    $0xc,%esp
c0007410:	68 72 c9 00 c0       	push   $0xc000c972
c0007415:	e8 ed f0 ff ff       	call   c0006507 <printk>
c000741a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:479
		return -1;
c000741d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007422:	e9 bd 00 00 00       	jmp    c00074e4 <sys_lseek+0xe9>
/work/x86_os_my/fs/fs.c:481
	}
	ASSERT(whence > 0 && whence < 4);
c0007427:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c000742b:	74 06                	je     c0007433 <sys_lseek+0x38>
/work/x86_os_my/fs/fs.c:481 (discriminator 1)
c000742d:	80 7d e4 03          	cmpb   $0x3,-0x1c(%ebp)
c0007431:	76 1c                	jbe    c000744f <sys_lseek+0x54>
/work/x86_os_my/fs/fs.c:481 (discriminator 3)
c0007433:	68 87 c9 00 c0       	push   $0xc000c987
c0007438:	68 00 ce 00 c0       	push   $0xc000ce00
c000743d:	68 e1 01 00 00       	push   $0x1e1
c0007442:	68 ed c5 00 c0       	push   $0xc000c5ed
c0007447:	e8 d5 ae ff ff       	call   c0002321 <panic_spin>
c000744c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:482
	uint32_t _fd = fd_local2global(fd);
c000744f:	8b 45 08             	mov    0x8(%ebp),%eax
c0007452:	83 ec 0c             	sub    $0xc,%esp
c0007455:	50                   	push   %eax
c0007456:	e8 29 fd ff ff       	call   c0007184 <fd_local2global>
c000745b:	83 c4 10             	add    $0x10,%esp
c000745e:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:483
	struct file* pf = &file_table[_fd];
c0007461:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0007464:	89 d0                	mov    %edx,%eax
c0007466:	01 c0                	add    %eax,%eax
c0007468:	01 d0                	add    %edx,%eax
c000746a:	c1 e0 02             	shl    $0x2,%eax
c000746d:	05 c0 22 01 c0       	add    $0xc00122c0,%eax
c0007472:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:484
	int32_t new_pos = 0;	//新的偏移量必须位于文件大小之内
c0007475:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:485
	int32_t file_size = (int32_t)pf->fd_inode->i_size;
c000747c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000747f:	8b 40 08             	mov    0x8(%eax),%eax
c0007482:	8b 40 04             	mov    0x4(%eax),%eax
c0007485:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:486
	switch (whence) {
c0007488:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c000748c:	83 f8 02             	cmp    $0x2,%eax
c000748f:	74 12                	je     c00074a3 <sys_lseek+0xa8>
c0007491:	83 f8 03             	cmp    $0x3,%eax
c0007494:	74 1e                	je     c00074b4 <sys_lseek+0xb9>
c0007496:	83 f8 01             	cmp    $0x1,%eax
c0007499:	75 24                	jne    c00074bf <sys_lseek+0xc4>
/work/x86_os_my/fs/fs.c:489
		/* SEEK_SET 新的读写位置是相对于文件开头再增加offset个位移量 */
		case SEEK_SET:
		new_pos = offset;
c000749b:	8b 45 0c             	mov    0xc(%ebp),%eax
c000749e:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:490
		break;
c00074a1:	eb 1c                	jmp    c00074bf <sys_lseek+0xc4>
/work/x86_os_my/fs/fs.c:494

		/* SEEK_CUR 新的读写位置是相对于当前的位置增加offset个位移量 */
		case SEEK_CUR:	// offse可正可负
		new_pos = (int32_t)pf->fd_pos + offset;
c00074a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00074a6:	8b 00                	mov    (%eax),%eax
c00074a8:	89 c2                	mov    %eax,%edx
c00074aa:	8b 45 0c             	mov    0xc(%ebp),%eax
c00074ad:	01 d0                	add    %edx,%eax
c00074af:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:495
		break;
c00074b2:	eb 0b                	jmp    c00074bf <sys_lseek+0xc4>
/work/x86_os_my/fs/fs.c:499

		/* SEEK_END 新的读写位置是相对于文件尺寸再增加offset个位移量 */
		case SEEK_END:	// 此情况下,offset应该为负值
		new_pos = file_size + offset;
c00074b4:	8b 55 e8             	mov    -0x18(%ebp),%edx
c00074b7:	8b 45 0c             	mov    0xc(%ebp),%eax
c00074ba:	01 d0                	add    %edx,%eax
c00074bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:501
	}
	if (new_pos < 0 || new_pos > (file_size - 1)) {
c00074bf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c00074c3:	78 0b                	js     c00074d0 <sys_lseek+0xd5>
/work/x86_os_my/fs/fs.c:501 (discriminator 1)
c00074c5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00074c8:	83 e8 01             	sub    $0x1,%eax
c00074cb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c00074ce:	7d 07                	jge    c00074d7 <sys_lseek+0xdc>
/work/x86_os_my/fs/fs.c:502
		return -1;
c00074d0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00074d5:	eb 0d                	jmp    c00074e4 <sys_lseek+0xe9>
/work/x86_os_my/fs/fs.c:504
	}
	pf->fd_pos = new_pos;
c00074d7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c00074da:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00074dd:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/fs/fs.c:505
	return pf->fd_pos;
c00074df:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00074e2:	8b 00                	mov    (%eax),%eax
/work/x86_os_my/fs/fs.c:506
}
c00074e4:	c9                   	leave  
c00074e5:	c3                   	ret    

c00074e6 <sys_unlink>:
sys_unlink():
/work/x86_os_my/fs/fs.c:510

/* 删除文件(非目录),成功返回0,失败返回-1 */
// 全局变量 file_table 定义在 file.h
int32_t sys_unlink(const char* pathname) {
c00074e6:	55                   	push   %ebp
c00074e7:	89 e5                	mov    %esp,%ebp
c00074e9:	81 ec 28 02 00 00    	sub    $0x228,%esp
/work/x86_os_my/fs/fs.c:511
	ASSERT(strlen(pathname) < MAX_PATH_LEN);
c00074ef:	83 ec 0c             	sub    $0xc,%esp
c00074f2:	ff 75 08             	pushl  0x8(%ebp)
c00074f5:	e8 53 c4 ff ff       	call   c000394d <strlen>
c00074fa:	83 c4 10             	add    $0x10,%esp
c00074fd:	3d ff 01 00 00       	cmp    $0x1ff,%eax
c0007502:	76 1c                	jbe    c0007520 <sys_unlink+0x3a>
/work/x86_os_my/fs/fs.c:511 (discriminator 1)
c0007504:	68 a0 c9 00 c0       	push   $0xc000c9a0
c0007509:	68 0c ce 00 c0       	push   $0xc000ce0c
c000750e:	68 ff 01 00 00       	push   $0x1ff
c0007513:	68 ed c5 00 c0       	push   $0xc000c5ed
c0007518:	e8 04 ae ff ff       	call   c0002321 <panic_spin>
c000751d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:515

	/* 先检查待删除的文件是否存在 */
	struct path_search_record searched_record;
	memset(&searched_record, 0, sizeof(struct path_search_record));
c0007520:	83 ec 04             	sub    $0x4,%esp
c0007523:	68 08 02 00 00       	push   $0x208
c0007528:	6a 00                	push   $0x0
c000752a:	8d 85 e0 fd ff ff    	lea    -0x220(%ebp),%eax
c0007530:	50                   	push   %eax
c0007531:	e8 8d c2 ff ff       	call   c00037c3 <memset>
c0007536:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:516
	int inode_no = search_file(pathname, &searched_record);
c0007539:	83 ec 08             	sub    $0x8,%esp
c000753c:	8d 85 e0 fd ff ff    	lea    -0x220(%ebp),%eax
c0007542:	50                   	push   %eax
c0007543:	ff 75 08             	pushl  0x8(%ebp)
c0007546:	e8 58 f7 ff ff       	call   c0006ca3 <search_file>
c000754b:	83 c4 10             	add    $0x10,%esp
c000754e:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:517
	ASSERT(inode_no != 0);
c0007551:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0007555:	75 1c                	jne    c0007573 <sys_unlink+0x8d>
/work/x86_os_my/fs/fs.c:517 (discriminator 1)
c0007557:	68 c0 c9 00 c0       	push   $0xc000c9c0
c000755c:	68 0c ce 00 c0       	push   $0xc000ce0c
c0007561:	68 05 02 00 00       	push   $0x205
c0007566:	68 ed c5 00 c0       	push   $0xc000c5ed
c000756b:	e8 b1 ad ff ff       	call   c0002321 <panic_spin>
c0007570:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:518
	if (inode_no == -1) {
c0007573:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c0007577:	75 2c                	jne    c00075a5 <sys_unlink+0xbf>
/work/x86_os_my/fs/fs.c:519
		printk("file %s not found!\n", pathname);
c0007579:	83 ec 08             	sub    $0x8,%esp
c000757c:	ff 75 08             	pushl  0x8(%ebp)
c000757f:	68 ce c9 00 c0       	push   $0xc000c9ce
c0007584:	e8 7e ef ff ff       	call   c0006507 <printk>
c0007589:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:520
		dir_close(searched_record.parent_dir);
c000758c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000758f:	83 ec 0c             	sub    $0xc,%esp
c0007592:	50                   	push   %eax
c0007593:	e8 e0 2a 00 00       	call   c000a078 <dir_close>
c0007598:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:521
		return -1;
c000759b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00075a0:	e9 62 01 00 00       	jmp    c0007707 <sys_unlink+0x221>
/work/x86_os_my/fs/fs.c:523
	}
	if (searched_record.file_type == FT_DIRECTORY) {	//存在同名的目录，而不是文件
c00075a5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00075a8:	83 f8 02             	cmp    $0x2,%eax
c00075ab:	75 29                	jne    c00075d6 <sys_unlink+0xf0>
/work/x86_os_my/fs/fs.c:524
		printk("can`t delete a direcotry with unlink(), use rmdir() to instead\n");
c00075ad:	83 ec 0c             	sub    $0xc,%esp
c00075b0:	68 e4 c9 00 c0       	push   $0xc000c9e4
c00075b5:	e8 4d ef ff ff       	call   c0006507 <printk>
c00075ba:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:525
		dir_close(searched_record.parent_dir);
c00075bd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00075c0:	83 ec 0c             	sub    $0xc,%esp
c00075c3:	50                   	push   %eax
c00075c4:	e8 af 2a 00 00       	call   c000a078 <dir_close>
c00075c9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:526
		return -1;
c00075cc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00075d1:	e9 31 01 00 00       	jmp    c0007707 <sys_unlink+0x221>
/work/x86_os_my/fs/fs.c:530
	}

	/* 检查是否在已打开文件列表(文件表)中 */
	uint32_t file_idx = 0;
c00075d6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:531
	while (file_idx < MAX_FILE_OPEN) {
c00075dd:	eb 37                	jmp    c0007616 <sys_unlink+0x130>
/work/x86_os_my/fs/fs.c:532
		if (file_table[file_idx].fd_inode != NULL && (uint32_t)inode_no == file_table[file_idx].fd_inode->i_no) {
c00075df:	8b 55 f4             	mov    -0xc(%ebp),%edx
c00075e2:	89 d0                	mov    %edx,%eax
c00075e4:	01 c0                	add    %eax,%eax
c00075e6:	01 d0                	add    %edx,%eax
c00075e8:	c1 e0 02             	shl    $0x2,%eax
c00075eb:	05 c8 22 01 c0       	add    $0xc00122c8,%eax
c00075f0:	8b 00                	mov    (%eax),%eax
c00075f2:	85 c0                	test   %eax,%eax
c00075f4:	74 1c                	je     c0007612 <sys_unlink+0x12c>
/work/x86_os_my/fs/fs.c:532 (discriminator 1)
c00075f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c00075f9:	89 d0                	mov    %edx,%eax
c00075fb:	01 c0                	add    %eax,%eax
c00075fd:	01 d0                	add    %edx,%eax
c00075ff:	c1 e0 02             	shl    $0x2,%eax
c0007602:	05 c8 22 01 c0       	add    $0xc00122c8,%eax
c0007607:	8b 00                	mov    (%eax),%eax
c0007609:	8b 10                	mov    (%eax),%edx
c000760b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000760e:	39 c2                	cmp    %eax,%edx
c0007610:	74 0c                	je     c000761e <sys_unlink+0x138>
/work/x86_os_my/fs/fs.c:535
			break;
		}
		file_idx++;
c0007612:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:531
		return -1;
	}

	/* 检查是否在已打开文件列表(文件表)中 */
	uint32_t file_idx = 0;
	while (file_idx < MAX_FILE_OPEN) {
c0007616:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c000761a:	76 c3                	jbe    c00075df <sys_unlink+0xf9>
c000761c:	eb 01                	jmp    c000761f <sys_unlink+0x139>
/work/x86_os_my/fs/fs.c:533
		if (file_table[file_idx].fd_inode != NULL && (uint32_t)inode_no == file_table[file_idx].fd_inode->i_no) {
			break;
c000761e:	90                   	nop
/work/x86_os_my/fs/fs.c:537
		}
		file_idx++;
	}
	if (file_idx < MAX_FILE_OPEN) {
c000761f:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c0007623:	77 2c                	ja     c0007651 <sys_unlink+0x16b>
/work/x86_os_my/fs/fs.c:538
		dir_close(searched_record.parent_dir);
c0007625:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0007628:	83 ec 0c             	sub    $0xc,%esp
c000762b:	50                   	push   %eax
c000762c:	e8 47 2a 00 00       	call   c000a078 <dir_close>
c0007631:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:539
		printk("file %s is in use, not allow to delete!\n", pathname);
c0007634:	83 ec 08             	sub    $0x8,%esp
c0007637:	ff 75 08             	pushl  0x8(%ebp)
c000763a:	68 24 ca 00 c0       	push   $0xc000ca24
c000763f:	e8 c3 ee ff ff       	call   c0006507 <printk>
c0007644:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:540
		return -1;
c0007647:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000764c:	e9 b6 00 00 00       	jmp    c0007707 <sys_unlink+0x221>
/work/x86_os_my/fs/fs.c:542
	}
	ASSERT(file_idx == MAX_FILE_OPEN);
c0007651:	83 7d f4 20          	cmpl   $0x20,-0xc(%ebp)
c0007655:	74 1c                	je     c0007673 <sys_unlink+0x18d>
/work/x86_os_my/fs/fs.c:542 (discriminator 1)
c0007657:	68 4d ca 00 c0       	push   $0xc000ca4d
c000765c:	68 0c ce 00 c0       	push   $0xc000ce0c
c0007661:	68 1e 02 00 00       	push   $0x21e
c0007666:	68 ed c5 00 c0       	push   $0xc000c5ed
c000766b:	e8 b1 ac ff ff       	call   c0002321 <panic_spin>
c0007670:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:545

	/* 为delete_dir_entry申请缓冲区 */
	void* io_buf = sys_malloc(SECTOR_SIZE + SECTOR_SIZE);
c0007673:	83 ec 0c             	sub    $0xc,%esp
c0007676:	68 00 04 00 00       	push   $0x400
c000767b:	e8 4c b6 ff ff       	call   c0002ccc <sys_malloc>
c0007680:	83 c4 10             	add    $0x10,%esp
c0007683:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:546
	if (io_buf == NULL) {
c0007686:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c000768a:	75 26                	jne    c00076b2 <sys_unlink+0x1cc>
/work/x86_os_my/fs/fs.c:547
		dir_close(searched_record.parent_dir);
c000768c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000768f:	83 ec 0c             	sub    $0xc,%esp
c0007692:	50                   	push   %eax
c0007693:	e8 e0 29 00 00       	call   c000a078 <dir_close>
c0007698:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:548
		printk("sys_unlink: malloc for io_buf failed\n");
c000769b:	83 ec 0c             	sub    $0xc,%esp
c000769e:	68 68 ca 00 c0       	push   $0xc000ca68
c00076a3:	e8 5f ee ff ff       	call   c0006507 <printk>
c00076a8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:549
		return -1;
c00076ab:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00076b0:	eb 55                	jmp    c0007707 <sys_unlink+0x221>
/work/x86_os_my/fs/fs.c:552
	}

	struct dir* parent_dir = searched_record.parent_dir;
c00076b2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00076b5:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:553
	delete_dir_entry(cur_part, parent_dir, inode_no, io_buf);	// 删除目录项 dir.c
c00076b8:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00076bb:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c00076c0:	ff 75 ec             	pushl  -0x14(%ebp)
c00076c3:	52                   	push   %edx
c00076c4:	ff 75 e8             	pushl  -0x18(%ebp)
c00076c7:	50                   	push   %eax
c00076c8:	e8 6a 2e 00 00       	call   c000a537 <delete_dir_entry>
c00076cd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:554
	inode_release(cur_part, inode_no);							// 删除inode inode.c
c00076d0:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00076d3:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c00076d8:	83 ec 08             	sub    $0x8,%esp
c00076db:	52                   	push   %edx
c00076dc:	50                   	push   %eax
c00076dd:	e8 81 13 00 00       	call   c0008a63 <inode_release>
c00076e2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:555
	sys_free(io_buf);
c00076e5:	83 ec 0c             	sub    $0xc,%esp
c00076e8:	ff 75 ec             	pushl  -0x14(%ebp)
c00076eb:	e8 09 bc ff ff       	call   c00032f9 <sys_free>
c00076f0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:556
	dir_close(searched_record.parent_dir);
c00076f3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00076f6:	83 ec 0c             	sub    $0xc,%esp
c00076f9:	50                   	push   %eax
c00076fa:	e8 79 29 00 00       	call   c000a078 <dir_close>
c00076ff:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:557
	return 0;	// 成功删除文件
c0007702:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/fs.c:558 (discriminator 1)
}
c0007707:	c9                   	leave  
c0007708:	c3                   	ret    

c0007709 <sys_mkdir>:
sys_mkdir():
/work/x86_os_my/fs/fs.c:569
（3）为新目录分配 1 个块存储该目录中的目录项。
（4）在新目录中创建两个目录项“.”和“..”，这是每个目录都必须存在的两个目录项。
（5）在新目录的父目录中添加新目录的目录项。
（6）将以上资源的变更同步到硬盘。
 */
int32_t sys_mkdir(const char* pathname) {
c0007709:	55                   	push   %ebp
c000770a:	89 e5                	mov    %esp,%ebp
c000770c:	81 ec a8 02 00 00    	sub    $0x2a8,%esp
/work/x86_os_my/fs/fs.c:570
	uint8_t rollback_step = 0;	       // 用于操作失败时回滚各资源状态
c0007712:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:571
	void* io_buf = sys_malloc(SECTOR_SIZE * 2);
c0007716:	83 ec 0c             	sub    $0xc,%esp
c0007719:	68 00 04 00 00       	push   $0x400
c000771e:	e8 a9 b5 ff ff       	call   c0002ccc <sys_malloc>
c0007723:	83 c4 10             	add    $0x10,%esp
c0007726:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:572
	if (io_buf == NULL) {
c0007729:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c000772d:	75 1a                	jne    c0007749 <sys_mkdir+0x40>
/work/x86_os_my/fs/fs.c:573
		printk("sys_mkdir: sys_malloc for io_buf failed\n");
c000772f:	83 ec 0c             	sub    $0xc,%esp
c0007732:	68 90 ca 00 c0       	push   $0xc000ca90
c0007737:	e8 cb ed ff ff       	call   c0006507 <printk>
c000773c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:574
		return -1;
c000773f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007744:	e9 ae 03 00 00       	jmp    c0007af7 <sys_mkdir+0x3ee>
/work/x86_os_my/fs/fs.c:578
	}

	struct path_search_record searched_record;
	memset(&searched_record, 0, sizeof(struct path_search_record));
c0007749:	83 ec 04             	sub    $0x4,%esp
c000774c:	68 08 02 00 00       	push   $0x208
c0007751:	6a 00                	push   $0x0
c0007753:	8d 85 c8 fd ff ff    	lea    -0x238(%ebp),%eax
c0007759:	50                   	push   %eax
c000775a:	e8 64 c0 ff ff       	call   c00037c3 <memset>
c000775f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:579
	int inode_no = -1;
c0007762:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:580
	inode_no = search_file(pathname, &searched_record);
c0007769:	83 ec 08             	sub    $0x8,%esp
c000776c:	8d 85 c8 fd ff ff    	lea    -0x238(%ebp),%eax
c0007772:	50                   	push   %eax
c0007773:	ff 75 08             	pushl  0x8(%ebp)
c0007776:	e8 28 f5 ff ff       	call   c0006ca3 <search_file>
c000777b:	83 c4 10             	add    $0x10,%esp
c000777e:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:581
	if (inode_no != -1) {      // 如果找到了同名目录或文件,失败返回
c0007781:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c0007785:	74 1c                	je     c00077a3 <sys_mkdir+0x9a>
/work/x86_os_my/fs/fs.c:582
		printk("sys_mkdir: file or directory %s exist!\n", pathname);
c0007787:	83 ec 08             	sub    $0x8,%esp
c000778a:	ff 75 08             	pushl  0x8(%ebp)
c000778d:	68 bc ca 00 c0       	push   $0xc000cabc
c0007792:	e8 70 ed ff ff       	call   c0006507 <printk>
c0007797:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:583
		rollback_step = 1;
c000779a:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:584
		goto rollback;
c000779e:	e9 08 03 00 00       	jmp    c0007aab <sys_mkdir+0x3a2>
/work/x86_os_my/fs/fs.c:586
	} else {	     // 若未找到,也要判断是在最终目录没找到还是某个中间目录不存在
		uint32_t pathname_depth = path_depth_cnt((char*)pathname);
c00077a3:	83 ec 0c             	sub    $0xc,%esp
c00077a6:	ff 75 08             	pushl  0x8(%ebp)
c00077a9:	e8 6a f4 ff ff       	call   c0006c18 <path_depth_cnt>
c00077ae:	83 c4 10             	add    $0x10,%esp
c00077b1:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:587
		uint32_t path_searched_depth = path_depth_cnt(searched_record.searched_path);
c00077b4:	83 ec 0c             	sub    $0xc,%esp
c00077b7:	8d 85 c8 fd ff ff    	lea    -0x238(%ebp),%eax
c00077bd:	50                   	push   %eax
c00077be:	e8 55 f4 ff ff       	call   c0006c18 <path_depth_cnt>
c00077c3:	83 c4 10             	add    $0x10,%esp
c00077c6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/fs.c:589
		/* 先判断是否把pathname的各层目录都访问到了,即是否在某个中间目录就失败了 */
		if (pathname_depth != path_searched_depth) {   // 说明并没有访问到全部的路径,某个中间目录是不存在的
c00077c9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00077cc:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c00077cf:	74 23                	je     c00077f4 <sys_mkdir+0xeb>
/work/x86_os_my/fs/fs.c:590
			printk("sys_mkdir: can`t access %s, subpath %s is`t exist\n", pathname, searched_record.searched_path);
c00077d1:	83 ec 04             	sub    $0x4,%esp
c00077d4:	8d 85 c8 fd ff ff    	lea    -0x238(%ebp),%eax
c00077da:	50                   	push   %eax
c00077db:	ff 75 08             	pushl  0x8(%ebp)
c00077de:	68 e4 ca 00 c0       	push   $0xc000cae4
c00077e3:	e8 1f ed ff ff       	call   c0006507 <printk>
c00077e8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:591
			rollback_step = 1;
c00077eb:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:592
			goto rollback;
c00077ef:	e9 b7 02 00 00       	jmp    c0007aab <sys_mkdir+0x3a2>
/work/x86_os_my/fs/fs.c:596
		}
	}

	struct dir* parent_dir = searched_record.parent_dir;	//被创建目录所在的父目录
c00077f4:	8b 45 c8             	mov    -0x38(%ebp),%eax
c00077f7:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/fs.c:598
	/* 目录名称后可能会有字符'/',所以最好直接用searched_record.searched_path,无'/' */
	char* dirname = strrchr(searched_record.searched_path, '/') + 1;	//获取 pathname 的最后一级目录名
c00077fa:	83 ec 08             	sub    $0x8,%esp
c00077fd:	6a 2f                	push   $0x2f
c00077ff:	8d 85 c8 fd ff ff    	lea    -0x238(%ebp),%eax
c0007805:	50                   	push   %eax
c0007806:	e8 5e c2 ff ff       	call   c0003a69 <strrchr>
c000780b:	83 c4 10             	add    $0x10,%esp
c000780e:	83 c0 01             	add    $0x1,%eax
c0007811:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/fs.c:600

	inode_no = inode_bitmap_alloc(cur_part);
c0007814:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c0007819:	83 ec 0c             	sub    $0xc,%esp
c000781c:	50                   	push   %eax
c000781d:	e8 92 15 00 00       	call   c0008db4 <inode_bitmap_alloc>
c0007822:	83 c4 10             	add    $0x10,%esp
c0007825:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:601
	if (inode_no == -1) {
c0007828:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c000782c:	75 19                	jne    c0007847 <sys_mkdir+0x13e>
/work/x86_os_my/fs/fs.c:602
		printk("sys_mkdir: allocate inode failed\n");
c000782e:	83 ec 0c             	sub    $0xc,%esp
c0007831:	68 18 cb 00 c0       	push   $0xc000cb18
c0007836:	e8 cc ec ff ff       	call   c0006507 <printk>
c000783b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:603
		rollback_step = 1;
c000783e:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:604
		goto rollback;
c0007842:	e9 64 02 00 00       	jmp    c0007aab <sys_mkdir+0x3a2>
/work/x86_os_my/fs/fs.c:608
	}

	struct inode new_dir_inode;
	inode_init(inode_no, &new_dir_inode);	    // 初始化i结点
c0007847:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000784a:	83 ec 08             	sub    $0x8,%esp
c000784d:	8d 95 7c fd ff ff    	lea    -0x284(%ebp),%edx
c0007853:	52                   	push   %edx
c0007854:	50                   	push   %eax
c0007855:	e8 42 14 00 00       	call   c0008c9c <inode_init>
c000785a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:610

	uint32_t block_bitmap_idx = 0;     // 用来记录block对应于block_bitmap中的索引
c000785d:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
/work/x86_os_my/fs/fs.c:611
	int32_t block_lba = -1;
c0007864:	c7 45 d4 ff ff ff ff 	movl   $0xffffffff,-0x2c(%ebp)
/work/x86_os_my/fs/fs.c:613
	/* 为目录分配一个块,用来写入目录.和.. */
	block_lba = block_bitmap_alloc(cur_part);
c000786b:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c0007870:	83 ec 0c             	sub    $0xc,%esp
c0007873:	50                   	push   %eax
c0007874:	e8 82 15 00 00       	call   c0008dfb <block_bitmap_alloc>
c0007879:	83 c4 10             	add    $0x10,%esp
c000787c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/fs/fs.c:614
	if (block_lba == -1) {
c000787f:	83 7d d4 ff          	cmpl   $0xffffffff,-0x2c(%ebp)
c0007883:	75 19                	jne    c000789e <sys_mkdir+0x195>
/work/x86_os_my/fs/fs.c:615
		printk("sys_mkdir: block_bitmap_alloc for create directory failed\n");
c0007885:	83 ec 0c             	sub    $0xc,%esp
c0007888:	68 3c cb 00 c0       	push   $0xc000cb3c
c000788d:	e8 75 ec ff ff       	call   c0006507 <printk>
c0007892:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:616
		rollback_step = 2;
c0007895:	c6 45 f7 02          	movb   $0x2,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:617
		goto rollback;
c0007899:	e9 0d 02 00 00       	jmp    c0007aab <sys_mkdir+0x3a2>
/work/x86_os_my/fs/fs.c:619
	}
	new_dir_inode.i_sectors[0] = block_lba;
c000789e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c00078a1:	89 85 8c fd ff ff    	mov    %eax,-0x274(%ebp)
/work/x86_os_my/fs/fs.c:621
	/* 每分配一个块就将位图同步到硬盘 */
	block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
c00078a7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c00078aa:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c00078af:	8b 40 1c             	mov    0x1c(%eax),%eax
c00078b2:	8b 40 28             	mov    0x28(%eax),%eax
c00078b5:	29 c2                	sub    %eax,%edx
c00078b7:	89 d0                	mov    %edx,%eax
c00078b9:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/fs.c:622
	ASSERT(block_bitmap_idx != 0);
c00078bc:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c00078c0:	75 1c                	jne    c00078de <sys_mkdir+0x1d5>
/work/x86_os_my/fs/fs.c:622 (discriminator 1)
c00078c2:	68 77 cb 00 c0       	push   $0xc000cb77
c00078c7:	68 18 ce 00 c0       	push   $0xc000ce18
c00078cc:	68 6e 02 00 00       	push   $0x26e
c00078d1:	68 ed c5 00 c0       	push   $0xc000c5ed
c00078d6:	e8 46 aa ff ff       	call   c0002321 <panic_spin>
c00078db:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:623
	bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c00078de:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c00078e3:	83 ec 04             	sub    $0x4,%esp
c00078e6:	6a 01                	push   $0x1
c00078e8:	ff 75 d8             	pushl  -0x28(%ebp)
c00078eb:	50                   	push   %eax
c00078ec:	e8 5c 15 00 00       	call   c0008e4d <bitmap_sync>
c00078f1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:626

	/* 将当前目录的目录项'.'和'..'写入目录 */
	memset(io_buf, 0, SECTOR_SIZE * 2);	 // 清空io_buf
c00078f4:	83 ec 04             	sub    $0x4,%esp
c00078f7:	68 00 04 00 00       	push   $0x400
c00078fc:	6a 00                	push   $0x0
c00078fe:	ff 75 ec             	pushl  -0x14(%ebp)
c0007901:	e8 bd be ff ff       	call   c00037c3 <memset>
c0007906:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:627
	struct dir_entry* p_de = (struct dir_entry*)io_buf;
c0007909:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000790c:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/fs/fs.c:630

	/* 初始化当前目录"." */
	memcpy(p_de->filename, ".", 1);
c000790f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0007912:	83 ec 04             	sub    $0x4,%esp
c0007915:	6a 01                	push   $0x1
c0007917:	68 2b c7 00 c0       	push   $0xc000c72b
c000791c:	50                   	push   %eax
c000791d:	e8 f3 be ff ff       	call   c0003815 <memcpy>
c0007922:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:631
	p_de->i_no = inode_no ;
c0007925:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0007928:	8b 45 d0             	mov    -0x30(%ebp),%eax
c000792b:	89 50 10             	mov    %edx,0x10(%eax)
/work/x86_os_my/fs/fs.c:632
	p_de->f_type = FT_DIRECTORY;
c000792e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0007931:	c7 40 14 02 00 00 00 	movl   $0x2,0x14(%eax)
/work/x86_os_my/fs/fs.c:634

	p_de++;
c0007938:	83 45 d0 18          	addl   $0x18,-0x30(%ebp)
/work/x86_os_my/fs/fs.c:636
	/* 初始化当前目录".." */
	memcpy(p_de->filename, "..", 2);
c000793c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c000793f:	83 ec 04             	sub    $0x4,%esp
c0007942:	6a 02                	push   $0x2
c0007944:	68 2d c7 00 c0       	push   $0xc000c72d
c0007949:	50                   	push   %eax
c000794a:	e8 c6 be ff ff       	call   c0003815 <memcpy>
c000794f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:637
	p_de->i_no = parent_dir->inode->i_no;
c0007952:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0007955:	8b 00                	mov    (%eax),%eax
c0007957:	8b 10                	mov    (%eax),%edx
c0007959:	8b 45 d0             	mov    -0x30(%ebp),%eax
c000795c:	89 50 10             	mov    %edx,0x10(%eax)
/work/x86_os_my/fs/fs.c:638
	p_de->f_type = FT_DIRECTORY;
c000795f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0007962:	c7 40 14 02 00 00 00 	movl   $0x2,0x14(%eax)
/work/x86_os_my/fs/fs.c:639
	ide_write(cur_part->my_disk, new_dir_inode.i_sectors[0], io_buf, 1);
c0007969:	8b 95 8c fd ff ff    	mov    -0x274(%ebp),%edx
c000796f:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c0007974:	8b 40 08             	mov    0x8(%eax),%eax
c0007977:	6a 01                	push   $0x1
c0007979:	ff 75 ec             	pushl  -0x14(%ebp)
c000797c:	52                   	push   %edx
c000797d:	50                   	push   %eax
c000797e:	e8 7f e2 ff ff       	call   c0005c02 <ide_write>
c0007983:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:641

	new_dir_inode.i_size = 2 * cur_part->sb->dir_entry_size;
c0007986:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c000798b:	8b 40 1c             	mov    0x1c(%eax),%eax
c000798e:	8b 40 30             	mov    0x30(%eax),%eax
c0007991:	01 c0                	add    %eax,%eax
c0007993:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)
/work/x86_os_my/fs/fs.c:645

	/* 在父目录中添加自己的目录项 */
	struct dir_entry new_dir_entry;
	memset(&new_dir_entry, 0, sizeof(struct dir_entry));
c0007999:	83 ec 04             	sub    $0x4,%esp
c000799c:	6a 18                	push   $0x18
c000799e:	6a 00                	push   $0x0
c00079a0:	8d 85 64 fd ff ff    	lea    -0x29c(%ebp),%eax
c00079a6:	50                   	push   %eax
c00079a7:	e8 17 be ff ff       	call   c00037c3 <memset>
c00079ac:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:646
	create_dir_entry(dirname, inode_no, FT_DIRECTORY, &new_dir_entry);
c00079af:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00079b2:	8d 95 64 fd ff ff    	lea    -0x29c(%ebp),%edx
c00079b8:	52                   	push   %edx
c00079b9:	6a 02                	push   $0x2
c00079bb:	50                   	push   %eax
c00079bc:	ff 75 dc             	pushl  -0x24(%ebp)
c00079bf:	e8 e7 26 00 00       	call   c000a0ab <create_dir_entry>
c00079c4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:647
	memset(io_buf, 0, SECTOR_SIZE * 2);	 // 清空io_buf
c00079c7:	83 ec 04             	sub    $0x4,%esp
c00079ca:	68 00 04 00 00       	push   $0x400
c00079cf:	6a 00                	push   $0x0
c00079d1:	ff 75 ec             	pushl  -0x14(%ebp)
c00079d4:	e8 ea bd ff ff       	call   c00037c3 <memset>
c00079d9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:648
	if (!sync_dir_entry(parent_dir, &new_dir_entry, io_buf)) {	  // sync_dir_entry中将block_bitmap通过bitmap_sync同步到硬盘
c00079dc:	83 ec 04             	sub    $0x4,%esp
c00079df:	ff 75 ec             	pushl  -0x14(%ebp)
c00079e2:	8d 85 64 fd ff ff    	lea    -0x29c(%ebp),%eax
c00079e8:	50                   	push   %eax
c00079e9:	ff 75 e0             	pushl  -0x20(%ebp)
c00079ec:	e8 2b 27 00 00       	call   c000a11c <sync_dir_entry>
c00079f1:	83 c4 10             	add    $0x10,%esp
c00079f4:	85 c0                	test   %eax,%eax
c00079f6:	75 19                	jne    c0007a11 <sys_mkdir+0x308>
/work/x86_os_my/fs/fs.c:649
		printk("sys_mkdir: sync_dir_entry to disk failed!\n");
c00079f8:	83 ec 0c             	sub    $0xc,%esp
c00079fb:	68 90 cb 00 c0       	push   $0xc000cb90
c0007a00:	e8 02 eb ff ff       	call   c0006507 <printk>
c0007a05:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:650
		rollback_step = 2;
c0007a08:	c6 45 f7 02          	movb   $0x2,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:651
		goto rollback;
c0007a0c:	e9 9a 00 00 00       	jmp    c0007aab <sys_mkdir+0x3a2>
/work/x86_os_my/fs/fs.c:655
	}

	/* 父目录的inode同步到硬盘 */
	memset(io_buf, 0, SECTOR_SIZE * 2);
c0007a11:	83 ec 04             	sub    $0x4,%esp
c0007a14:	68 00 04 00 00       	push   $0x400
c0007a19:	6a 00                	push   $0x0
c0007a1b:	ff 75 ec             	pushl  -0x14(%ebp)
c0007a1e:	e8 a0 bd ff ff       	call   c00037c3 <memset>
c0007a23:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:656
	inode_sync(cur_part, parent_dir->inode, io_buf);
c0007a26:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0007a29:	8b 10                	mov    (%eax),%edx
c0007a2b:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c0007a30:	83 ec 04             	sub    $0x4,%esp
c0007a33:	ff 75 ec             	pushl  -0x14(%ebp)
c0007a36:	52                   	push   %edx
c0007a37:	50                   	push   %eax
c0007a38:	e8 2b 0c 00 00       	call   c0008668 <inode_sync>
c0007a3d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:659

	/* 将新创建目录的inode同步到硬盘 */
	memset(io_buf, 0, SECTOR_SIZE * 2);
c0007a40:	83 ec 04             	sub    $0x4,%esp
c0007a43:	68 00 04 00 00       	push   $0x400
c0007a48:	6a 00                	push   $0x0
c0007a4a:	ff 75 ec             	pushl  -0x14(%ebp)
c0007a4d:	e8 71 bd ff ff       	call   c00037c3 <memset>
c0007a52:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:660
	inode_sync(cur_part, &new_dir_inode, io_buf);
c0007a55:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c0007a5a:	83 ec 04             	sub    $0x4,%esp
c0007a5d:	ff 75 ec             	pushl  -0x14(%ebp)
c0007a60:	8d 95 7c fd ff ff    	lea    -0x284(%ebp),%edx
c0007a66:	52                   	push   %edx
c0007a67:	50                   	push   %eax
c0007a68:	e8 fb 0b 00 00       	call   c0008668 <inode_sync>
c0007a6d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:663

	/* 将inode位图同步到硬盘 */
	bitmap_sync(cur_part, inode_no, INODE_BITMAP);
c0007a70:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0007a73:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c0007a78:	83 ec 04             	sub    $0x4,%esp
c0007a7b:	6a 00                	push   $0x0
c0007a7d:	52                   	push   %edx
c0007a7e:	50                   	push   %eax
c0007a7f:	e8 c9 13 00 00       	call   c0008e4d <bitmap_sync>
c0007a84:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:665

	sys_free(io_buf);
c0007a87:	83 ec 0c             	sub    $0xc,%esp
c0007a8a:	ff 75 ec             	pushl  -0x14(%ebp)
c0007a8d:	e8 67 b8 ff ff       	call   c00032f9 <sys_free>
c0007a92:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:668

	/* 关闭所创建目录的父目录 */
	dir_close(searched_record.parent_dir);
c0007a95:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0007a98:	83 ec 0c             	sub    $0xc,%esp
c0007a9b:	50                   	push   %eax
c0007a9c:	e8 d7 25 00 00       	call   c000a078 <dir_close>
c0007aa1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:669
	return 0;
c0007aa4:	b8 00 00 00 00       	mov    $0x0,%eax
c0007aa9:	eb 4c                	jmp    c0007af7 <sys_mkdir+0x3ee>
/work/x86_os_my/fs/fs.c:673

	/*创建文件或目录需要创建相关的多个资源,若某步失败则会执行到下面的回滚步骤 */
rollback:	     // 因为某步骤操作失败而回滚
	switch (rollback_step) {
c0007aab:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0007aaf:	83 f8 01             	cmp    $0x1,%eax
c0007ab2:	74 20                	je     c0007ad4 <sys_mkdir+0x3cb>
c0007ab4:	83 f8 02             	cmp    $0x2,%eax
c0007ab7:	75 2b                	jne    c0007ae4 <sys_mkdir+0x3db>
/work/x86_os_my/fs/fs.c:675
		case 2:
		bitmap_set(&cur_part->inode_bitmap, inode_no, 0);	 // 如果新文件的inode创建失败,之前位图中分配的inode_no也要恢复
c0007ab9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0007abc:	8b 15 b0 22 01 c0    	mov    0xc00122b0,%edx
c0007ac2:	83 c2 28             	add    $0x28,%edx
c0007ac5:	83 ec 04             	sub    $0x4,%esp
c0007ac8:	6a 00                	push   $0x0
c0007aca:	50                   	push   %eax
c0007acb:	52                   	push   %edx
c0007acc:	e8 be aa ff ff       	call   c000258f <bitmap_set>
c0007ad1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:678
		case 1:
		/* 关闭所创建目录的父目录 */
		dir_close(searched_record.parent_dir);
c0007ad4:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0007ad7:	83 ec 0c             	sub    $0xc,%esp
c0007ada:	50                   	push   %eax
c0007adb:	e8 98 25 00 00       	call   c000a078 <dir_close>
c0007ae0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:679
		break;
c0007ae3:	90                   	nop
/work/x86_os_my/fs/fs.c:681
	}
	sys_free(io_buf);
c0007ae4:	83 ec 0c             	sub    $0xc,%esp
c0007ae7:	ff 75 ec             	pushl  -0x14(%ebp)
c0007aea:	e8 0a b8 ff ff       	call   c00032f9 <sys_free>
c0007aef:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:682
	return -1;
c0007af2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
/work/x86_os_my/fs/fs.c:683 (discriminator 1)
}
c0007af7:	c9                   	leave  
c0007af8:	c3                   	ret    

c0007af9 <sys_opendir>:
sys_opendir():
/work/x86_os_my/fs/fs.c:686

/* 目录打开成功后返回目录指针,失败返回NULL */
struct dir* sys_opendir(const char* name) {
c0007af9:	55                   	push   %ebp
c0007afa:	89 e5                	mov    %esp,%ebp
c0007afc:	81 ec 18 02 00 00    	sub    $0x218,%esp
/work/x86_os_my/fs/fs.c:687
	ASSERT(strlen(name) < MAX_PATH_LEN);
c0007b02:	83 ec 0c             	sub    $0xc,%esp
c0007b05:	ff 75 08             	pushl  0x8(%ebp)
c0007b08:	e8 40 be ff ff       	call   c000394d <strlen>
c0007b0d:	83 c4 10             	add    $0x10,%esp
c0007b10:	3d ff 01 00 00       	cmp    $0x1ff,%eax
c0007b15:	76 1c                	jbe    c0007b33 <sys_opendir+0x3a>
/work/x86_os_my/fs/fs.c:687 (discriminator 1)
c0007b17:	68 bb cb 00 c0       	push   $0xc000cbbb
c0007b1c:	68 24 ce 00 c0       	push   $0xc000ce24
c0007b21:	68 af 02 00 00       	push   $0x2af
c0007b26:	68 ed c5 00 c0       	push   $0xc000c5ed
c0007b2b:	e8 f1 a7 ff ff       	call   c0002321 <panic_spin>
c0007b30:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:689
	/* 如果是根目录'/',直接返回&root_dir */
	if (name[0] == '/' && (name[1] == 0 || name[0] == '.')) {
c0007b33:	8b 45 08             	mov    0x8(%ebp),%eax
c0007b36:	0f b6 00             	movzbl (%eax),%eax
c0007b39:	3c 2f                	cmp    $0x2f,%al
c0007b3b:	75 21                	jne    c0007b5e <sys_opendir+0x65>
/work/x86_os_my/fs/fs.c:689 (discriminator 1)
c0007b3d:	8b 45 08             	mov    0x8(%ebp),%eax
c0007b40:	83 c0 01             	add    $0x1,%eax
c0007b43:	0f b6 00             	movzbl (%eax),%eax
c0007b46:	84 c0                	test   %al,%al
c0007b48:	74 0a                	je     c0007b54 <sys_opendir+0x5b>
/work/x86_os_my/fs/fs.c:689 (discriminator 2)
c0007b4a:	8b 45 08             	mov    0x8(%ebp),%eax
c0007b4d:	0f b6 00             	movzbl (%eax),%eax
c0007b50:	3c 2e                	cmp    $0x2e,%al
c0007b52:	75 0a                	jne    c0007b5e <sys_opendir+0x65>
/work/x86_os_my/fs/fs.c:690
		return &root_dir;
c0007b54:	b8 40 24 01 c0       	mov    $0xc0012440,%eax
c0007b59:	e9 a9 00 00 00       	jmp    c0007c07 <sys_opendir+0x10e>
/work/x86_os_my/fs/fs.c:695
	}

	/* 先检查待打开的目录是否存在 */
	struct path_search_record searched_record;
	memset(&searched_record, 0, sizeof(struct path_search_record));
c0007b5e:	83 ec 04             	sub    $0x4,%esp
c0007b61:	68 08 02 00 00       	push   $0x208
c0007b66:	6a 00                	push   $0x0
c0007b68:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
c0007b6e:	50                   	push   %eax
c0007b6f:	e8 4f bc ff ff       	call   c00037c3 <memset>
c0007b74:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:696
	int inode_no = search_file(name, &searched_record);
c0007b77:	83 ec 08             	sub    $0x8,%esp
c0007b7a:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
c0007b80:	50                   	push   %eax
c0007b81:	ff 75 08             	pushl  0x8(%ebp)
c0007b84:	e8 1a f1 ff ff       	call   c0006ca3 <search_file>
c0007b89:	83 c4 10             	add    $0x10,%esp
c0007b8c:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:697
	struct dir* ret = NULL;
c0007b8f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:698
	if (inode_no == -1) {	 // 如果找不到目录,提示不存在的路径
c0007b96:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c0007b9a:	75 1c                	jne    c0007bb8 <sys_opendir+0xbf>
/work/x86_os_my/fs/fs.c:699
		printk("In %s, sub path %s not exist\n", name, searched_record.searched_path);
c0007b9c:	83 ec 04             	sub    $0x4,%esp
c0007b9f:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
c0007ba5:	50                   	push   %eax
c0007ba6:	ff 75 08             	pushl  0x8(%ebp)
c0007ba9:	68 d7 cb 00 c0       	push   $0xc000cbd7
c0007bae:	e8 54 e9 ff ff       	call   c0006507 <printk>
c0007bb3:	83 c4 10             	add    $0x10,%esp
c0007bb6:	eb 3d                	jmp    c0007bf5 <sys_opendir+0xfc>
/work/x86_os_my/fs/fs.c:701
	} else {
		if (searched_record.file_type == FT_REGULAR) {
c0007bb8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0007bbb:	83 f8 01             	cmp    $0x1,%eax
c0007bbe:	75 15                	jne    c0007bd5 <sys_opendir+0xdc>
/work/x86_os_my/fs/fs.c:702
			printk("%s is regular file!\n", name);
c0007bc0:	83 ec 08             	sub    $0x8,%esp
c0007bc3:	ff 75 08             	pushl  0x8(%ebp)
c0007bc6:	68 f5 cb 00 c0       	push   $0xc000cbf5
c0007bcb:	e8 37 e9 ff ff       	call   c0006507 <printk>
c0007bd0:	83 c4 10             	add    $0x10,%esp
c0007bd3:	eb 20                	jmp    c0007bf5 <sys_opendir+0xfc>
/work/x86_os_my/fs/fs.c:703
		} else if (searched_record.file_type == FT_DIRECTORY) {
c0007bd5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0007bd8:	83 f8 02             	cmp    $0x2,%eax
c0007bdb:	75 18                	jne    c0007bf5 <sys_opendir+0xfc>
/work/x86_os_my/fs/fs.c:704
			ret = dir_open(cur_part, inode_no);
c0007bdd:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0007be0:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c0007be5:	83 ec 08             	sub    $0x8,%esp
c0007be8:	52                   	push   %edx
c0007be9:	50                   	push   %eax
c0007bea:	e8 71 22 00 00       	call   c0009e60 <dir_open>
c0007bef:	83 c4 10             	add    $0x10,%esp
c0007bf2:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:707
		}
	}
	dir_close(searched_record.parent_dir);
c0007bf5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0007bf8:	83 ec 0c             	sub    $0xc,%esp
c0007bfb:	50                   	push   %eax
c0007bfc:	e8 77 24 00 00       	call   c000a078 <dir_close>
c0007c01:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:708
	return ret;
c0007c04:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:709 (discriminator 1)
}
c0007c07:	c9                   	leave  
c0007c08:	c3                   	ret    

c0007c09 <sys_closedir>:
sys_closedir():
/work/x86_os_my/fs/fs.c:712

/* 成功关闭目录dir返回0,失败返回-1 */
int32_t sys_closedir(struct dir* dir) {
c0007c09:	55                   	push   %ebp
c0007c0a:	89 e5                	mov    %esp,%ebp
c0007c0c:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/fs.c:713
	int32_t ret = -1;
c0007c0f:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:714
	if (dir != NULL) {
c0007c16:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0007c1a:	74 15                	je     c0007c31 <sys_closedir+0x28>
/work/x86_os_my/fs/fs.c:715
		dir_close(dir);
c0007c1c:	83 ec 0c             	sub    $0xc,%esp
c0007c1f:	ff 75 08             	pushl  0x8(%ebp)
c0007c22:	e8 51 24 00 00       	call   c000a078 <dir_close>
c0007c27:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:716
		ret = 0;
c0007c2a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:718
	}
	return ret;
c0007c31:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:719
}
c0007c34:	c9                   	leave  
c0007c35:	c3                   	ret    

c0007c36 <sys_readdir>:
sys_readdir():
/work/x86_os_my/fs/fs.c:722

/* 读取目录dir的1个目录项,成功后返回其目录项地址,到目录尾时或出错时返回NULL */
struct dir_entry* sys_readdir(struct dir* dir) {
c0007c36:	55                   	push   %ebp
c0007c37:	89 e5                	mov    %esp,%ebp
c0007c39:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/fs/fs.c:723
	ASSERT(dir != NULL);
c0007c3c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0007c40:	75 1c                	jne    c0007c5e <sys_readdir+0x28>
/work/x86_os_my/fs/fs.c:723 (discriminator 1)
c0007c42:	68 0a cc 00 c0       	push   $0xc000cc0a
c0007c47:	68 30 ce 00 c0       	push   $0xc000ce30
c0007c4c:	68 d3 02 00 00       	push   $0x2d3
c0007c51:	68 ed c5 00 c0       	push   $0xc000c5ed
c0007c56:	e8 c6 a6 ff ff       	call   c0002321 <panic_spin>
c0007c5b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:724
	return dir_read(dir);
c0007c5e:	83 ec 0c             	sub    $0xc,%esp
c0007c61:	ff 75 08             	pushl  0x8(%ebp)
c0007c64:	e8 36 2d 00 00       	call   c000a99f <dir_read>
c0007c69:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:725
}
c0007c6c:	c9                   	leave  
c0007c6d:	c3                   	ret    

c0007c6e <sys_rewinddir>:
sys_rewinddir():
/work/x86_os_my/fs/fs.c:728

/* 把目录dir的指针dir_pos置0 */
void sys_rewinddir(struct dir* dir) {
c0007c6e:	55                   	push   %ebp
c0007c6f:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/fs/fs.c:729
	dir->dir_pos = 0;
c0007c71:	8b 45 08             	mov    0x8(%ebp),%eax
c0007c74:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
/work/x86_os_my/fs/fs.c:730
}
c0007c7b:	90                   	nop
c0007c7c:	5d                   	pop    %ebp
c0007c7d:	c3                   	ret    

c0007c7e <sys_rmdir>:
sys_rmdir():
/work/x86_os_my/fs/fs.c:733

/* 删除空目录,成功时返回0,失败时返回-1*/
int32_t sys_rmdir(const char* pathname) {
c0007c7e:	55                   	push   %ebp
c0007c7f:	89 e5                	mov    %esp,%ebp
c0007c81:	81 ec 28 02 00 00    	sub    $0x228,%esp
/work/x86_os_my/fs/fs.c:736
	/* 先检查待删除的文件是否存在 */
	struct path_search_record searched_record;
	memset(&searched_record, 0, sizeof(struct path_search_record));
c0007c87:	83 ec 04             	sub    $0x4,%esp
c0007c8a:	68 08 02 00 00       	push   $0x208
c0007c8f:	6a 00                	push   $0x0
c0007c91:	8d 85 e4 fd ff ff    	lea    -0x21c(%ebp),%eax
c0007c97:	50                   	push   %eax
c0007c98:	e8 26 bb ff ff       	call   c00037c3 <memset>
c0007c9d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:737
	int32_t inode_no = search_file(pathname, &searched_record);
c0007ca0:	83 ec 08             	sub    $0x8,%esp
c0007ca3:	8d 85 e4 fd ff ff    	lea    -0x21c(%ebp),%eax
c0007ca9:	50                   	push   %eax
c0007caa:	ff 75 08             	pushl  0x8(%ebp)
c0007cad:	e8 f1 ef ff ff       	call   c0006ca3 <search_file>
c0007cb2:	83 c4 10             	add    $0x10,%esp
c0007cb5:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:738
	ASSERT(inode_no != 0);
c0007cb8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0007cbc:	75 1c                	jne    c0007cda <sys_rmdir+0x5c>
/work/x86_os_my/fs/fs.c:738 (discriminator 1)
c0007cbe:	68 c0 c9 00 c0       	push   $0xc000c9c0
c0007cc3:	68 3c ce 00 c0       	push   $0xc000ce3c
c0007cc8:	68 e2 02 00 00       	push   $0x2e2
c0007ccd:	68 ed c5 00 c0       	push   $0xc000c5ed
c0007cd2:	e8 4a a6 ff ff       	call   c0002321 <panic_spin>
c0007cd7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:739
	int32_t retval = -1;	// 默认返回值
c0007cda:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:740
	if (inode_no == -1) {
c0007ce1:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c0007ce5:	75 1f                	jne    c0007d06 <sys_rmdir+0x88>
/work/x86_os_my/fs/fs.c:741
		printk("In %s, sub path %s not exist\n", pathname, searched_record.searched_path);
c0007ce7:	83 ec 04             	sub    $0x4,%esp
c0007cea:	8d 85 e4 fd ff ff    	lea    -0x21c(%ebp),%eax
c0007cf0:	50                   	push   %eax
c0007cf1:	ff 75 08             	pushl  0x8(%ebp)
c0007cf4:	68 d7 cb 00 c0       	push   $0xc000cbd7
c0007cf9:	e8 09 e8 ff ff       	call   c0006507 <printk>
c0007cfe:	83 c4 10             	add    $0x10,%esp
c0007d01:	e9 87 00 00 00       	jmp    c0007d8d <sys_rmdir+0x10f>
/work/x86_os_my/fs/fs.c:743
	} else {
		if (searched_record.file_type == FT_REGULAR) {
c0007d06:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0007d09:	83 f8 01             	cmp    $0x1,%eax
c0007d0c:	75 15                	jne    c0007d23 <sys_rmdir+0xa5>
/work/x86_os_my/fs/fs.c:744
			printk("%s is regular file!\n", pathname);
c0007d0e:	83 ec 08             	sub    $0x8,%esp
c0007d11:	ff 75 08             	pushl  0x8(%ebp)
c0007d14:	68 f5 cb 00 c0       	push   $0xc000cbf5
c0007d19:	e8 e9 e7 ff ff       	call   c0006507 <printk>
c0007d1e:	83 c4 10             	add    $0x10,%esp
c0007d21:	eb 6a                	jmp    c0007d8d <sys_rmdir+0x10f>
/work/x86_os_my/fs/fs.c:746
		} else {
			struct dir* dir = dir_open(cur_part, inode_no);
c0007d23:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0007d26:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c0007d2b:	83 ec 08             	sub    $0x8,%esp
c0007d2e:	52                   	push   %edx
c0007d2f:	50                   	push   %eax
c0007d30:	e8 2b 21 00 00       	call   c0009e60 <dir_open>
c0007d35:	83 c4 10             	add    $0x10,%esp
c0007d38:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:747
			if (!dir_is_empty(dir)) {	 // 非空目录不可删除
c0007d3b:	83 ec 0c             	sub    $0xc,%esp
c0007d3e:	ff 75 ec             	pushl  -0x14(%ebp)
c0007d41:	e8 41 2e 00 00       	call   c000ab87 <dir_is_empty>
c0007d46:	83 c4 10             	add    $0x10,%esp
c0007d49:	85 c0                	test   %eax,%eax
c0007d4b:	75 15                	jne    c0007d62 <sys_rmdir+0xe4>
/work/x86_os_my/fs/fs.c:748
				printk("dir %s is not empty, it is not allowed to delete a nonempty directory!\n", pathname);
c0007d4d:	83 ec 08             	sub    $0x8,%esp
c0007d50:	ff 75 08             	pushl  0x8(%ebp)
c0007d53:	68 18 cc 00 c0       	push   $0xc000cc18
c0007d58:	e8 aa e7 ff ff       	call   c0006507 <printk>
c0007d5d:	83 c4 10             	add    $0x10,%esp
c0007d60:	eb 1d                	jmp    c0007d7f <sys_rmdir+0x101>
/work/x86_os_my/fs/fs.c:750
			} else {
				if (!dir_remove(searched_record.parent_dir, dir)) {
c0007d62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0007d65:	83 ec 08             	sub    $0x8,%esp
c0007d68:	ff 75 ec             	pushl  -0x14(%ebp)
c0007d6b:	50                   	push   %eax
c0007d6c:	e8 41 2e 00 00       	call   c000abb2 <dir_remove>
c0007d71:	83 c4 10             	add    $0x10,%esp
c0007d74:	85 c0                	test   %eax,%eax
c0007d76:	75 07                	jne    c0007d7f <sys_rmdir+0x101>
/work/x86_os_my/fs/fs.c:751
					retval = 0;
c0007d78:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:754
				}
			}
			dir_close(dir);
c0007d7f:	83 ec 0c             	sub    $0xc,%esp
c0007d82:	ff 75 ec             	pushl  -0x14(%ebp)
c0007d85:	e8 ee 22 00 00       	call   c000a078 <dir_close>
c0007d8a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:757
		}
	}
	dir_close(searched_record.parent_dir);
c0007d8d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0007d90:	83 ec 0c             	sub    $0xc,%esp
c0007d93:	50                   	push   %eax
c0007d94:	e8 df 22 00 00       	call   c000a078 <dir_close>
c0007d99:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:758
	return retval;
c0007d9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:759
}
c0007d9f:	c9                   	leave  
c0007da0:	c3                   	ret    

c0007da1 <get_parent_dir_inode_nr>:
get_parent_dir_inode_nr():
/work/x86_os_my/fs/fs.c:762

/* 获得父目录的inode编号 */
static uint32_t get_parent_dir_inode_nr(uint32_t child_inode_nr, void* io_buf) {
c0007da1:	55                   	push   %ebp
c0007da2:	89 e5                	mov    %esp,%ebp
c0007da4:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/fs.c:763
   struct inode* child_dir_inode = inode_open(cur_part, child_inode_nr);
c0007da7:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c0007dac:	83 ec 08             	sub    $0x8,%esp
c0007daf:	ff 75 08             	pushl  0x8(%ebp)
c0007db2:	50                   	push   %eax
c0007db3:	e8 d7 09 00 00       	call   c000878f <inode_open>
c0007db8:	83 c4 10             	add    $0x10,%esp
c0007dbb:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:765
   /* 目录中的目录项".."中包括父目录inode编号,".."位于目录的第0块 */
   uint32_t block_lba = child_dir_inode->i_sectors[0];
c0007dbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0007dc1:	8b 40 10             	mov    0x10(%eax),%eax
c0007dc4:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:766
   ASSERT(block_lba >= cur_part->sb->data_start_lba);
c0007dc7:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c0007dcc:	8b 40 1c             	mov    0x1c(%eax),%eax
c0007dcf:	8b 40 28             	mov    0x28(%eax),%eax
c0007dd2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0007dd5:	76 1c                	jbe    c0007df3 <get_parent_dir_inode_nr+0x52>
/work/x86_os_my/fs/fs.c:766 (discriminator 1)
c0007dd7:	68 60 cc 00 c0       	push   $0xc000cc60
c0007ddc:	68 48 ce 00 c0       	push   $0xc000ce48
c0007de1:	68 fe 02 00 00       	push   $0x2fe
c0007de6:	68 ed c5 00 c0       	push   $0xc000c5ed
c0007deb:	e8 31 a5 ff ff       	call   c0002321 <panic_spin>
c0007df0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:767
   inode_close(child_dir_inode);
c0007df3:	83 ec 0c             	sub    $0xc,%esp
c0007df6:	ff 75 f4             	pushl  -0xc(%ebp)
c0007df9:	e8 d7 0a 00 00       	call   c00088d5 <inode_close>
c0007dfe:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:768
   ide_read(cur_part->my_disk, block_lba, io_buf, 1);
c0007e01:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c0007e06:	8b 40 08             	mov    0x8(%eax),%eax
c0007e09:	6a 01                	push   $0x1
c0007e0b:	ff 75 0c             	pushl  0xc(%ebp)
c0007e0e:	ff 75 f0             	pushl  -0x10(%ebp)
c0007e11:	50                   	push   %eax
c0007e12:	e8 77 dc ff ff       	call   c0005a8e <ide_read>
c0007e17:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:769
   struct dir_entry* dir_e = (struct dir_entry*)io_buf;
c0007e1a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007e1d:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:771
   /* 第0个目录项是".",第1个目录项是".." */
   ASSERT(dir_e[1].i_no < 4096 && dir_e[1].f_type == FT_DIRECTORY);
c0007e20:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0007e23:	83 c0 18             	add    $0x18,%eax
c0007e26:	8b 40 10             	mov    0x10(%eax),%eax
c0007e29:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0007e2e:	77 0e                	ja     c0007e3e <get_parent_dir_inode_nr+0x9d>
/work/x86_os_my/fs/fs.c:771 (discriminator 1)
c0007e30:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0007e33:	83 c0 18             	add    $0x18,%eax
c0007e36:	8b 40 14             	mov    0x14(%eax),%eax
c0007e39:	83 f8 02             	cmp    $0x2,%eax
c0007e3c:	74 1c                	je     c0007e5a <get_parent_dir_inode_nr+0xb9>
/work/x86_os_my/fs/fs.c:771 (discriminator 3)
c0007e3e:	68 8c cc 00 c0       	push   $0xc000cc8c
c0007e43:	68 48 ce 00 c0       	push   $0xc000ce48
c0007e48:	68 03 03 00 00       	push   $0x303
c0007e4d:	68 ed c5 00 c0       	push   $0xc000c5ed
c0007e52:	e8 ca a4 ff ff       	call   c0002321 <panic_spin>
c0007e57:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:772
   return dir_e[1].i_no;	// 返回..即父目录的inode编号
c0007e5a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0007e5d:	83 c0 18             	add    $0x18,%eax
c0007e60:	8b 40 10             	mov    0x10(%eax),%eax
/work/x86_os_my/fs/fs.c:773
}
c0007e63:	c9                   	leave  
c0007e64:	c3                   	ret    

c0007e65 <get_child_dir_name>:
get_child_dir_name():
/work/x86_os_my/fs/fs.c:777

/* 在inode编号为p_inode_nr的目录中查找inode编号为c_inode_nr的子目录的名字,
 * 将名字存入缓冲区path.成功返回0,失败返-1 */
static int get_child_dir_name(uint32_t p_inode_nr, uint32_t c_inode_nr, char* path, void* io_buf) {
c0007e65:	55                   	push   %ebp
c0007e66:	89 e5                	mov    %esp,%ebp
c0007e68:	57                   	push   %edi
c0007e69:	81 ec 54 02 00 00    	sub    $0x254,%esp
/work/x86_os_my/fs/fs.c:778
	struct inode* parent_dir_inode = inode_open(cur_part, p_inode_nr);
c0007e6f:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c0007e74:	83 ec 08             	sub    $0x8,%esp
c0007e77:	ff 75 08             	pushl  0x8(%ebp)
c0007e7a:	50                   	push   %eax
c0007e7b:	e8 0f 09 00 00       	call   c000878f <inode_open>
c0007e80:	83 c4 10             	add    $0x10,%esp
c0007e83:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:780
	/* 填充all_blocks,将该目录的所占扇区地址全部写入all_blocks */
	uint8_t block_idx = 0;
c0007e86:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:781
	uint32_t all_blocks[140] = {0}, block_cnt = 12;
c0007e8a:	8d 95 ac fd ff ff    	lea    -0x254(%ebp),%edx
c0007e90:	b8 00 00 00 00       	mov    $0x0,%eax
c0007e95:	b9 8c 00 00 00       	mov    $0x8c,%ecx
c0007e9a:	89 d7                	mov    %edx,%edi
c0007e9c:	f3 ab                	rep stos %eax,%es:(%edi)
c0007e9e:	c7 45 f0 0c 00 00 00 	movl   $0xc,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:782
	while (block_idx < 12) {
c0007ea5:	eb 22                	jmp    c0007ec9 <get_child_dir_name+0x64>
/work/x86_os_my/fs/fs.c:783
		all_blocks[block_idx] = parent_dir_inode->i_sectors[block_idx];
c0007ea7:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0007eab:	0f b6 4d f7          	movzbl -0x9(%ebp),%ecx
c0007eaf:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0007eb2:	83 c1 04             	add    $0x4,%ecx
c0007eb5:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
c0007eb8:	89 94 85 ac fd ff ff 	mov    %edx,-0x254(%ebp,%eax,4)
/work/x86_os_my/fs/fs.c:784
		block_idx++;
c0007ebf:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0007ec3:	83 c0 01             	add    $0x1,%eax
c0007ec6:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:782
static int get_child_dir_name(uint32_t p_inode_nr, uint32_t c_inode_nr, char* path, void* io_buf) {
	struct inode* parent_dir_inode = inode_open(cur_part, p_inode_nr);
	/* 填充all_blocks,将该目录的所占扇区地址全部写入all_blocks */
	uint8_t block_idx = 0;
	uint32_t all_blocks[140] = {0}, block_cnt = 12;
	while (block_idx < 12) {
c0007ec9:	80 7d f7 0b          	cmpb   $0xb,-0x9(%ebp)
c0007ecd:	76 d8                	jbe    c0007ea7 <get_child_dir_name+0x42>
/work/x86_os_my/fs/fs.c:786
		all_blocks[block_idx] = parent_dir_inode->i_sectors[block_idx];
		block_idx++;
	}
	if (parent_dir_inode->i_sectors[12]) {	// 若包含了一级间接块表,将共读入all_blocks.
c0007ecf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0007ed2:	8b 40 40             	mov    0x40(%eax),%eax
c0007ed5:	85 c0                	test   %eax,%eax
c0007ed7:	74 2c                	je     c0007f05 <get_child_dir_name+0xa0>
/work/x86_os_my/fs/fs.c:787
		ide_read(cur_part->my_disk, parent_dir_inode->i_sectors[12], all_blocks + 12, 1);
c0007ed9:	8d 85 ac fd ff ff    	lea    -0x254(%ebp),%eax
c0007edf:	83 c0 30             	add    $0x30,%eax
c0007ee2:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0007ee5:	8b 4a 40             	mov    0x40(%edx),%ecx
c0007ee8:	8b 15 b0 22 01 c0    	mov    0xc00122b0,%edx
c0007eee:	8b 52 08             	mov    0x8(%edx),%edx
c0007ef1:	6a 01                	push   $0x1
c0007ef3:	50                   	push   %eax
c0007ef4:	51                   	push   %ecx
c0007ef5:	52                   	push   %edx
c0007ef6:	e8 93 db ff ff       	call   c0005a8e <ide_read>
c0007efb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:788
		block_cnt = 140;
c0007efe:	c7 45 f0 8c 00 00 00 	movl   $0x8c,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:790
	}
	inode_close(parent_dir_inode);
c0007f05:	83 ec 0c             	sub    $0xc,%esp
c0007f08:	ff 75 e8             	pushl  -0x18(%ebp)
c0007f0b:	e8 c5 09 00 00       	call   c00088d5 <inode_close>
c0007f10:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:792

	struct dir_entry* dir_e = (struct dir_entry*)io_buf;
c0007f13:	8b 45 14             	mov    0x14(%ebp),%eax
c0007f16:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/fs.c:793
	uint32_t dir_entry_size = cur_part->sb->dir_entry_size;
c0007f19:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c0007f1e:	8b 40 1c             	mov    0x1c(%eax),%eax
c0007f21:	8b 40 30             	mov    0x30(%eax),%eax
c0007f24:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/fs.c:794
	uint32_t dir_entrys_per_sec = (512 / dir_entry_size);
c0007f27:	b8 00 02 00 00       	mov    $0x200,%eax
c0007f2c:	ba 00 00 00 00       	mov    $0x0,%edx
c0007f31:	f7 75 e0             	divl   -0x20(%ebp)
c0007f34:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/fs.c:795
	block_idx = 0;
c0007f37:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:797
	/* 遍历所有块 */
	while(block_idx < block_cnt) {
c0007f3b:	e9 b1 00 00 00       	jmp    c0007ff1 <get_child_dir_name+0x18c>
/work/x86_os_my/fs/fs.c:798
		if(all_blocks[block_idx]) {      // 如果相应块不为空则读入相应块
c0007f40:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0007f44:	8b 84 85 ac fd ff ff 	mov    -0x254(%ebp,%eax,4),%eax
c0007f4b:	85 c0                	test   %eax,%eax
c0007f4d:	0f 84 94 00 00 00    	je     c0007fe7 <get_child_dir_name+0x182>
/work/x86_os_my/fs/fs.c:799
			ide_read(cur_part->my_disk, all_blocks[block_idx], io_buf, 1);
c0007f53:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0007f57:	8b 94 85 ac fd ff ff 	mov    -0x254(%ebp,%eax,4),%edx
c0007f5e:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c0007f63:	8b 40 08             	mov    0x8(%eax),%eax
c0007f66:	6a 01                	push   $0x1
c0007f68:	ff 75 14             	pushl  0x14(%ebp)
c0007f6b:	52                   	push   %edx
c0007f6c:	50                   	push   %eax
c0007f6d:	e8 1c db ff ff       	call   c0005a8e <ide_read>
c0007f72:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:800
			uint8_t dir_e_idx = 0;
c0007f75:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
/work/x86_os_my/fs/fs.c:802
			/* 遍历每个目录项 */
			while(dir_e_idx < dir_entrys_per_sec) {
c0007f79:	eb 63                	jmp    c0007fde <get_child_dir_name+0x179>
/work/x86_os_my/fs/fs.c:803
				if ((dir_e + dir_e_idx)->i_no == c_inode_nr) {
c0007f7b:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c0007f7f:	89 d0                	mov    %edx,%eax
c0007f81:	01 c0                	add    %eax,%eax
c0007f83:	01 d0                	add    %edx,%eax
c0007f85:	c1 e0 03             	shl    $0x3,%eax
c0007f88:	89 c2                	mov    %eax,%edx
c0007f8a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0007f8d:	01 d0                	add    %edx,%eax
c0007f8f:	8b 40 10             	mov    0x10(%eax),%eax
c0007f92:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0007f95:	75 3d                	jne    c0007fd4 <get_child_dir_name+0x16f>
/work/x86_os_my/fs/fs.c:804
					strcat(path, "/");
c0007f97:	83 ec 08             	sub    $0x8,%esp
c0007f9a:	68 67 c7 00 c0       	push   $0xc000c767
c0007f9f:	ff 75 10             	pushl  0x10(%ebp)
c0007fa2:	e8 20 bb ff ff       	call   c0003ac7 <strcat>
c0007fa7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:805
					strcat(path, (dir_e + dir_e_idx)->filename);
c0007faa:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c0007fae:	89 d0                	mov    %edx,%eax
c0007fb0:	01 c0                	add    %eax,%eax
c0007fb2:	01 d0                	add    %edx,%eax
c0007fb4:	c1 e0 03             	shl    $0x3,%eax
c0007fb7:	89 c2                	mov    %eax,%edx
c0007fb9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0007fbc:	01 d0                	add    %edx,%eax
c0007fbe:	83 ec 08             	sub    $0x8,%esp
c0007fc1:	50                   	push   %eax
c0007fc2:	ff 75 10             	pushl  0x10(%ebp)
c0007fc5:	e8 fd ba ff ff       	call   c0003ac7 <strcat>
c0007fca:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:806
					return 0;
c0007fcd:	b8 00 00 00 00       	mov    $0x0,%eax
c0007fd2:	eb 2f                	jmp    c0008003 <get_child_dir_name+0x19e>
/work/x86_os_my/fs/fs.c:808
				}
				dir_e_idx++;
c0007fd4:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c0007fd8:	83 c0 01             	add    $0x1,%eax
c0007fdb:	88 45 ef             	mov    %al,-0x11(%ebp)
/work/x86_os_my/fs/fs.c:802
	while(block_idx < block_cnt) {
		if(all_blocks[block_idx]) {      // 如果相应块不为空则读入相应块
			ide_read(cur_part->my_disk, all_blocks[block_idx], io_buf, 1);
			uint8_t dir_e_idx = 0;
			/* 遍历每个目录项 */
			while(dir_e_idx < dir_entrys_per_sec) {
c0007fde:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c0007fe2:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0007fe5:	72 94                	jb     c0007f7b <get_child_dir_name+0x116>
/work/x86_os_my/fs/fs.c:811
					return 0;
				}
				dir_e_idx++;
			}
		}
		block_idx++;
c0007fe7:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0007feb:	83 c0 01             	add    $0x1,%eax
c0007fee:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:797
	struct dir_entry* dir_e = (struct dir_entry*)io_buf;
	uint32_t dir_entry_size = cur_part->sb->dir_entry_size;
	uint32_t dir_entrys_per_sec = (512 / dir_entry_size);
	block_idx = 0;
	/* 遍历所有块 */
	while(block_idx < block_cnt) {
c0007ff1:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0007ff5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0007ff8:	0f 82 42 ff ff ff    	jb     c0007f40 <get_child_dir_name+0xdb>
/work/x86_os_my/fs/fs.c:813
				dir_e_idx++;
			}
		}
		block_idx++;
	}
	return -1;
c0007ffe:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
/work/x86_os_my/fs/fs.c:814 (discriminator 1)
}
c0008003:	8b 7d fc             	mov    -0x4(%ebp),%edi
c0008006:	c9                   	leave  
c0008007:	c3                   	ret    

c0008008 <sys_getcwd>:
sys_getcwd():
/work/x86_os_my/fs/fs.c:819

/* 把当前工作目录绝对路径写入buf, size是buf的大小.
 当buf为NULL时,由操作系统分配存储工作路径的空间并返回地址
 失败则返回NULL */
char* sys_getcwd(char* buf, uint32_t size) {
c0008008:	55                   	push   %ebp
c0008009:	89 e5                	mov    %esp,%ebp
c000800b:	57                   	push   %edi
c000800c:	53                   	push   %ebx
c000800d:	81 ec 20 02 00 00    	sub    $0x220,%esp
/work/x86_os_my/fs/fs.c:822
	/* 确保buf不为空,若用户进程提供的buf为NULL,
	系统调用getcwd中要为用户进程通过malloc分配内存 */
	ASSERT(buf != NULL);
c0008013:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0008017:	75 1c                	jne    c0008035 <sys_getcwd+0x2d>
/work/x86_os_my/fs/fs.c:822 (discriminator 1)
c0008019:	68 52 c9 00 c0       	push   $0xc000c952
c000801e:	68 60 ce 00 c0       	push   $0xc000ce60
c0008023:	68 36 03 00 00       	push   $0x336
c0008028:	68 ed c5 00 c0       	push   $0xc000c5ed
c000802d:	e8 ef a2 ff ff       	call   c0002321 <panic_spin>
c0008032:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:823
	void* io_buf = sys_malloc(SECTOR_SIZE);
c0008035:	83 ec 0c             	sub    $0xc,%esp
c0008038:	68 00 02 00 00       	push   $0x200
c000803d:	e8 8a ac ff ff       	call   c0002ccc <sys_malloc>
c0008042:	83 c4 10             	add    $0x10,%esp
c0008045:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:824
	if (io_buf == NULL) {
c0008048:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c000804c:	75 0a                	jne    c0008058 <sys_getcwd+0x50>
/work/x86_os_my/fs/fs.c:825
		return NULL;
c000804e:	b8 00 00 00 00       	mov    $0x0,%eax
c0008053:	e9 9d 01 00 00       	jmp    c00081f5 <sys_getcwd+0x1ed>
/work/x86_os_my/fs/fs.c:828
	}

	struct task_struct* cur_thread = running_thread();
c0008058:	e8 4d bb ff ff       	call   c0003baa <running_thread>
c000805d:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:829
	int32_t parent_inode_nr = 0;
c0008060:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:830
	int32_t child_inode_nr = cur_thread->cwd_inode_nr;
c0008067:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000806a:	8b 80 0c 01 00 00    	mov    0x10c(%eax),%eax
c0008070:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:831
	ASSERT(child_inode_nr >= 0 && child_inode_nr < 4096);	// inode位图，最大支持4096个inode
c0008073:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0008077:	78 09                	js     c0008082 <sys_getcwd+0x7a>
/work/x86_os_my/fs/fs.c:831 (discriminator 1)
c0008079:	81 7d f4 ff 0f 00 00 	cmpl   $0xfff,-0xc(%ebp)
c0008080:	7e 1c                	jle    c000809e <sys_getcwd+0x96>
/work/x86_os_my/fs/fs.c:831 (discriminator 3)
c0008082:	68 c4 cc 00 c0       	push   $0xc000ccc4
c0008087:	68 60 ce 00 c0       	push   $0xc000ce60
c000808c:	68 3f 03 00 00       	push   $0x33f
c0008091:	68 ed c5 00 c0       	push   $0xc000c5ed
c0008096:	e8 86 a2 ff ff       	call   c0002321 <panic_spin>
c000809b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:833
	/* 若当前目录是根目录,直接返回'/' */
	if (child_inode_nr == 0) {
c000809e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c00080a2:	75 25                	jne    c00080c9 <sys_getcwd+0xc1>
/work/x86_os_my/fs/fs.c:834
		buf[0] = '/';
c00080a4:	8b 45 08             	mov    0x8(%ebp),%eax
c00080a7:	c6 00 2f             	movb   $0x2f,(%eax)
/work/x86_os_my/fs/fs.c:835
		buf[1] = 0;
c00080aa:	8b 45 08             	mov    0x8(%ebp),%eax
c00080ad:	83 c0 01             	add    $0x1,%eax
c00080b0:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/fs/fs.c:836
		sys_free(io_buf);
c00080b3:	83 ec 0c             	sub    $0xc,%esp
c00080b6:	ff 75 f0             	pushl  -0x10(%ebp)
c00080b9:	e8 3b b2 ff ff       	call   c00032f9 <sys_free>
c00080be:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:837
		return buf;
c00080c1:	8b 45 08             	mov    0x8(%ebp),%eax
c00080c4:	e9 2c 01 00 00       	jmp    c00081f5 <sys_getcwd+0x1ed>
/work/x86_os_my/fs/fs.c:840
	}

	memset(buf, 0, size);
c00080c9:	83 ec 04             	sub    $0x4,%esp
c00080cc:	ff 75 0c             	pushl  0xc(%ebp)
c00080cf:	6a 00                	push   $0x0
c00080d1:	ff 75 08             	pushl  0x8(%ebp)
c00080d4:	e8 ea b6 ff ff       	call   c00037c3 <memset>
c00080d9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:841
	char full_path_reverse[MAX_PATH_LEN] = {0};	// 用来做全路径缓冲区
c00080dc:	8d 85 e2 fd ff ff    	lea    -0x21e(%ebp),%eax
c00080e2:	b9 00 02 00 00       	mov    $0x200,%ecx
c00080e7:	bb 00 00 00 00       	mov    $0x0,%ebx
c00080ec:	89 18                	mov    %ebx,(%eax)
c00080ee:	89 5c 08 fc          	mov    %ebx,-0x4(%eax,%ecx,1)
c00080f2:	8d 50 04             	lea    0x4(%eax),%edx
c00080f5:	83 e2 fc             	and    $0xfffffffc,%edx
c00080f8:	29 d0                	sub    %edx,%eax
c00080fa:	01 c1                	add    %eax,%ecx
c00080fc:	83 e1 fc             	and    $0xfffffffc,%ecx
c00080ff:	c1 e9 02             	shr    $0x2,%ecx
c0008102:	89 d7                	mov    %edx,%edi
c0008104:	89 d8                	mov    %ebx,%eax
c0008106:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/fs/fs.c:846

	/* 从下往上逐层找父目录,直到找到根目录为止.
	 * 当child_inode_nr为根目录的inode编号(0)时停止,
	 * 即已经查看完根目录中的目录项 */
	while ((child_inode_nr)) {
c0008108:	eb 52                	jmp    c000815c <sys_getcwd+0x154>
/work/x86_os_my/fs/fs.c:847
		parent_inode_nr = get_parent_dir_inode_nr(child_inode_nr, io_buf);
c000810a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000810d:	83 ec 08             	sub    $0x8,%esp
c0008110:	ff 75 f0             	pushl  -0x10(%ebp)
c0008113:	50                   	push   %eax
c0008114:	e8 88 fc ff ff       	call   c0007da1 <get_parent_dir_inode_nr>
c0008119:	83 c4 10             	add    $0x10,%esp
c000811c:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:848
		if (get_child_dir_name(parent_inode_nr, child_inode_nr, full_path_reverse, io_buf) == -1) {	// 或未找到名字,失败退出
c000811f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0008122:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0008125:	ff 75 f0             	pushl  -0x10(%ebp)
c0008128:	8d 8d e2 fd ff ff    	lea    -0x21e(%ebp),%ecx
c000812e:	51                   	push   %ecx
c000812f:	52                   	push   %edx
c0008130:	50                   	push   %eax
c0008131:	e8 2f fd ff ff       	call   c0007e65 <get_child_dir_name>
c0008136:	83 c4 10             	add    $0x10,%esp
c0008139:	83 f8 ff             	cmp    $0xffffffff,%eax
c000813c:	75 18                	jne    c0008156 <sys_getcwd+0x14e>
/work/x86_os_my/fs/fs.c:849
			sys_free(io_buf);
c000813e:	83 ec 0c             	sub    $0xc,%esp
c0008141:	ff 75 f0             	pushl  -0x10(%ebp)
c0008144:	e8 b0 b1 ff ff       	call   c00032f9 <sys_free>
c0008149:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:850
			return NULL;
c000814c:	b8 00 00 00 00       	mov    $0x0,%eax
c0008151:	e9 9f 00 00 00       	jmp    c00081f5 <sys_getcwd+0x1ed>
/work/x86_os_my/fs/fs.c:852
		}
		child_inode_nr = parent_inode_nr;
c0008156:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0008159:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:846
	char full_path_reverse[MAX_PATH_LEN] = {0};	// 用来做全路径缓冲区

	/* 从下往上逐层找父目录,直到找到根目录为止.
	 * 当child_inode_nr为根目录的inode编号(0)时停止,
	 * 即已经查看完根目录中的目录项 */
	while ((child_inode_nr)) {
c000815c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0008160:	75 a8                	jne    c000810a <sys_getcwd+0x102>
/work/x86_os_my/fs/fs.c:854
			sys_free(io_buf);
			return NULL;
		}
		child_inode_nr = parent_inode_nr;
	}
	ASSERT(strlen(full_path_reverse) <= size);
c0008162:	83 ec 0c             	sub    $0xc,%esp
c0008165:	8d 85 e2 fd ff ff    	lea    -0x21e(%ebp),%eax
c000816b:	50                   	push   %eax
c000816c:	e8 dc b7 ff ff       	call   c000394d <strlen>
c0008171:	83 c4 10             	add    $0x10,%esp
c0008174:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0008177:	76 4e                	jbe    c00081c7 <sys_getcwd+0x1bf>
/work/x86_os_my/fs/fs.c:854 (discriminator 1)
c0008179:	68 f4 cc 00 c0       	push   $0xc000ccf4
c000817e:	68 60 ce 00 c0       	push   $0xc000ce60
c0008183:	68 56 03 00 00       	push   $0x356
c0008188:	68 ed c5 00 c0       	push   $0xc000c5ed
c000818d:	e8 8f a1 ff ff       	call   c0002321 <panic_spin>
c0008192:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:859 (discriminator 1)
	/* 至此 full_path_reverse 中的路径是反着的,
	 * 即子目录在前(左),父目录在后(右) ,
	 * 现将full_path_reverse中的路径反置 */
	char* last_slash;	// 用于记录字符串中最后一个斜杠地址
	while ((last_slash = strrchr(full_path_reverse, '/'))) {
c0008195:	eb 30                	jmp    c00081c7 <sys_getcwd+0x1bf>
/work/x86_os_my/fs/fs.c:860
		uint16_t len = strlen(buf);
c0008197:	83 ec 0c             	sub    $0xc,%esp
c000819a:	ff 75 08             	pushl  0x8(%ebp)
c000819d:	e8 ab b7 ff ff       	call   c000394d <strlen>
c00081a2:	83 c4 10             	add    $0x10,%esp
c00081a5:	66 89 45 e2          	mov    %ax,-0x1e(%ebp)
/work/x86_os_my/fs/fs.c:861
		strcpy(buf + len, last_slash);
c00081a9:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c00081ad:	8b 45 08             	mov    0x8(%ebp),%eax
c00081b0:	01 d0                	add    %edx,%eax
c00081b2:	83 ec 08             	sub    $0x8,%esp
c00081b5:	ff 75 e4             	pushl  -0x1c(%ebp)
c00081b8:	50                   	push   %eax
c00081b9:	e8 3a b7 ff ff       	call   c00038f8 <strcpy>
c00081be:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:863
		/* 在full_path_reverse中添加结束字符,做为下一次执行strcpy中last_slash的边界 */
		*last_slash = 0;
c00081c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00081c4:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/fs/fs.c:859
	ASSERT(strlen(full_path_reverse) <= size);
	/* 至此 full_path_reverse 中的路径是反着的,
	 * 即子目录在前(左),父目录在后(右) ,
	 * 现将full_path_reverse中的路径反置 */
	char* last_slash;	// 用于记录字符串中最后一个斜杠地址
	while ((last_slash = strrchr(full_path_reverse, '/'))) {
c00081c7:	83 ec 08             	sub    $0x8,%esp
c00081ca:	6a 2f                	push   $0x2f
c00081cc:	8d 85 e2 fd ff ff    	lea    -0x21e(%ebp),%eax
c00081d2:	50                   	push   %eax
c00081d3:	e8 91 b8 ff ff       	call   c0003a69 <strrchr>
c00081d8:	83 c4 10             	add    $0x10,%esp
c00081db:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c00081de:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c00081e2:	75 b3                	jne    c0008197 <sys_getcwd+0x18f>
/work/x86_os_my/fs/fs.c:865
		uint16_t len = strlen(buf);
		strcpy(buf + len, last_slash);
		/* 在full_path_reverse中添加结束字符,做为下一次执行strcpy中last_slash的边界 */
		*last_slash = 0;
	}
	sys_free(io_buf);
c00081e4:	83 ec 0c             	sub    $0xc,%esp
c00081e7:	ff 75 f0             	pushl  -0x10(%ebp)
c00081ea:	e8 0a b1 ff ff       	call   c00032f9 <sys_free>
c00081ef:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:866
	return buf;
c00081f2:	8b 45 08             	mov    0x8(%ebp),%eax
/work/x86_os_my/fs/fs.c:867 (discriminator 2)
}
c00081f5:	8d 65 f8             	lea    -0x8(%ebp),%esp
c00081f8:	5b                   	pop    %ebx
c00081f9:	5f                   	pop    %edi
c00081fa:	5d                   	pop    %ebp
c00081fb:	c3                   	ret    

c00081fc <sys_chdir>:
sys_chdir():
/work/x86_os_my/fs/fs.c:870

/* 更改当前工作目录为绝对路径path,成功则返回0,失败返回-1 */
int32_t sys_chdir(const char* path) {
c00081fc:	55                   	push   %ebp
c00081fd:	89 e5                	mov    %esp,%ebp
c00081ff:	81 ec 18 02 00 00    	sub    $0x218,%esp
/work/x86_os_my/fs/fs.c:871
	int32_t ret = -1;
c0008205:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:873
	struct path_search_record searched_record;
	memset(&searched_record, 0, sizeof(struct path_search_record));
c000820c:	83 ec 04             	sub    $0x4,%esp
c000820f:	68 08 02 00 00       	push   $0x208
c0008214:	6a 00                	push   $0x0
c0008216:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
c000821c:	50                   	push   %eax
c000821d:	e8 a1 b5 ff ff       	call   c00037c3 <memset>
c0008222:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:874
	int inode_no = search_file(path, &searched_record);
c0008225:	83 ec 08             	sub    $0x8,%esp
c0008228:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
c000822e:	50                   	push   %eax
c000822f:	ff 75 08             	pushl  0x8(%ebp)
c0008232:	e8 6c ea ff ff       	call   c0006ca3 <search_file>
c0008237:	83 c4 10             	add    $0x10,%esp
c000823a:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:875
	if (inode_no != -1) {
c000823d:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c0008241:	74 34                	je     c0008277 <sys_chdir+0x7b>
/work/x86_os_my/fs/fs.c:876
		if (searched_record.file_type == FT_DIRECTORY) {
c0008243:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008246:	83 f8 02             	cmp    $0x2,%eax
c0008249:	75 19                	jne    c0008264 <sys_chdir+0x68>
/work/x86_os_my/fs/fs.c:877
			running_thread()->cwd_inode_nr = inode_no;
c000824b:	e8 5a b9 ff ff       	call   c0003baa <running_thread>
c0008250:	89 c2                	mov    %eax,%edx
c0008252:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008255:	89 82 0c 01 00 00    	mov    %eax,0x10c(%edx)
/work/x86_os_my/fs/fs.c:878
			ret = 0;
c000825b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0008262:	eb 13                	jmp    c0008277 <sys_chdir+0x7b>
/work/x86_os_my/fs/fs.c:880
		} else {
			printk("sys_chdir: %s is regular file or other!\n", path);
c0008264:	83 ec 08             	sub    $0x8,%esp
c0008267:	ff 75 08             	pushl  0x8(%ebp)
c000826a:	68 18 cd 00 c0       	push   $0xc000cd18
c000826f:	e8 93 e2 ff ff       	call   c0006507 <printk>
c0008274:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:883
		}
	}
	dir_close(searched_record.parent_dir);
c0008277:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000827a:	83 ec 0c             	sub    $0xc,%esp
c000827d:	50                   	push   %eax
c000827e:	e8 f5 1d 00 00       	call   c000a078 <dir_close>
c0008283:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:884
	return ret;
c0008286:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:885
}
c0008289:	c9                   	leave  
c000828a:	c3                   	ret    

c000828b <sys_stat>:
sys_stat():
/work/x86_os_my/fs/fs.c:888

/* 在buf中填充文件结构相关信息,成功时返回0,失败返回-1 */
int32_t sys_stat(const char* path, struct stat* buf) {
c000828b:	55                   	push   %ebp
c000828c:	89 e5                	mov    %esp,%ebp
c000828e:	81 ec 28 02 00 00    	sub    $0x228,%esp
/work/x86_os_my/fs/fs.c:890
	/* 若直接查看根目录'/' */
	if (!strcmp(path, "/") || !strcmp(path, "/.") || !strcmp(path, "/..")) {
c0008294:	83 ec 08             	sub    $0x8,%esp
c0008297:	68 67 c7 00 c0       	push   $0xc000c767
c000829c:	ff 75 08             	pushl  0x8(%ebp)
c000829f:	e8 f4 b6 ff ff       	call   c0003998 <strcmp>
c00082a4:	83 c4 10             	add    $0x10,%esp
c00082a7:	84 c0                	test   %al,%al
c00082a9:	74 2e                	je     c00082d9 <sys_stat+0x4e>
/work/x86_os_my/fs/fs.c:890 (discriminator 1)
c00082ab:	83 ec 08             	sub    $0x8,%esp
c00082ae:	68 69 c7 00 c0       	push   $0xc000c769
c00082b3:	ff 75 08             	pushl  0x8(%ebp)
c00082b6:	e8 dd b6 ff ff       	call   c0003998 <strcmp>
c00082bb:	83 c4 10             	add    $0x10,%esp
c00082be:	84 c0                	test   %al,%al
c00082c0:	74 17                	je     c00082d9 <sys_stat+0x4e>
/work/x86_os_my/fs/fs.c:890 (discriminator 2)
c00082c2:	83 ec 08             	sub    $0x8,%esp
c00082c5:	68 6c c7 00 c0       	push   $0xc000c76c
c00082ca:	ff 75 08             	pushl  0x8(%ebp)
c00082cd:	e8 c6 b6 ff ff       	call   c0003998 <strcmp>
c00082d2:	83 c4 10             	add    $0x10,%esp
c00082d5:	84 c0                	test   %al,%al
c00082d7:	75 2b                	jne    c0008304 <sys_stat+0x79>
/work/x86_os_my/fs/fs.c:891
		buf->st_filetype = FT_DIRECTORY;
c00082d9:	8b 45 0c             	mov    0xc(%ebp),%eax
c00082dc:	c7 40 08 02 00 00 00 	movl   $0x2,0x8(%eax)
/work/x86_os_my/fs/fs.c:892
		buf->st_ino = 0;
c00082e3:	8b 45 0c             	mov    0xc(%ebp),%eax
c00082e6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/fs/fs.c:893
		buf->st_size = root_dir.inode->i_size;
c00082ec:	a1 40 24 01 c0       	mov    0xc0012440,%eax
c00082f1:	8b 50 04             	mov    0x4(%eax),%edx
c00082f4:	8b 45 0c             	mov    0xc(%ebp),%eax
c00082f7:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/fs.c:894
		return 0;
c00082fa:	b8 00 00 00 00       	mov    $0x0,%eax
c00082ff:	e9 af 00 00 00       	jmp    c00083b3 <sys_stat+0x128>
/work/x86_os_my/fs/fs.c:897
	}

	int32_t ret = -1;	// 默认返回值
c0008304:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:899
	struct path_search_record searched_record;
	memset(&searched_record, 0, sizeof(struct path_search_record));   // 记得初始化或清0,否则栈中信息不知道是什么
c000830b:	83 ec 04             	sub    $0x4,%esp
c000830e:	68 08 02 00 00       	push   $0x208
c0008313:	6a 00                	push   $0x0
c0008315:	8d 85 e4 fd ff ff    	lea    -0x21c(%ebp),%eax
c000831b:	50                   	push   %eax
c000831c:	e8 a2 b4 ff ff       	call   c00037c3 <memset>
c0008321:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:900
	int inode_no = search_file(path, &searched_record);
c0008324:	83 ec 08             	sub    $0x8,%esp
c0008327:	8d 85 e4 fd ff ff    	lea    -0x21c(%ebp),%eax
c000832d:	50                   	push   %eax
c000832e:	ff 75 08             	pushl  0x8(%ebp)
c0008331:	e8 6d e9 ff ff       	call   c0006ca3 <search_file>
c0008336:	83 c4 10             	add    $0x10,%esp
c0008339:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:901
	if (inode_no != -1) {
c000833c:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c0008340:	74 4c                	je     c000838e <sys_stat+0x103>
/work/x86_os_my/fs/fs.c:902
		struct inode* obj_inode = inode_open(cur_part, inode_no);   // 只为获得文件大小
c0008342:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0008345:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c000834a:	83 ec 08             	sub    $0x8,%esp
c000834d:	52                   	push   %edx
c000834e:	50                   	push   %eax
c000834f:	e8 3b 04 00 00       	call   c000878f <inode_open>
c0008354:	83 c4 10             	add    $0x10,%esp
c0008357:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:903
		buf->st_size = obj_inode->i_size;
c000835a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000835d:	8b 50 04             	mov    0x4(%eax),%edx
c0008360:	8b 45 0c             	mov    0xc(%ebp),%eax
c0008363:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/fs.c:904
		inode_close(obj_inode);
c0008366:	83 ec 0c             	sub    $0xc,%esp
c0008369:	ff 75 ec             	pushl  -0x14(%ebp)
c000836c:	e8 64 05 00 00       	call   c00088d5 <inode_close>
c0008371:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:905
		buf->st_filetype = searched_record.file_type;
c0008374:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0008377:	8b 45 0c             	mov    0xc(%ebp),%eax
c000837a:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/fs/fs.c:906
		buf->st_ino = inode_no;
c000837d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0008380:	8b 45 0c             	mov    0xc(%ebp),%eax
c0008383:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/fs/fs.c:907
		ret = 0;
c0008385:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c000838c:	eb 13                	jmp    c00083a1 <sys_stat+0x116>
/work/x86_os_my/fs/fs.c:909
	} else {
		printk("sys_stat: %s not found\n", path);
c000838e:	83 ec 08             	sub    $0x8,%esp
c0008391:	ff 75 08             	pushl  0x8(%ebp)
c0008394:	68 41 cd 00 c0       	push   $0xc000cd41
c0008399:	e8 69 e1 ff ff       	call   c0006507 <printk>
c000839e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:911
	}
	dir_close(searched_record.parent_dir);
c00083a1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00083a4:	83 ec 0c             	sub    $0xc,%esp
c00083a7:	50                   	push   %eax
c00083a8:	e8 cb 1c 00 00       	call   c000a078 <dir_close>
c00083ad:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:912
	return ret;
c00083b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:913 (discriminator 1)
}
c00083b3:	c9                   	leave  
c00083b4:	c3                   	ret    

c00083b5 <sys_putchar>:
sys_putchar():
/work/x86_os_my/fs/fs.c:916

/* 向屏幕输出一个字符 */
void sys_putchar(char char_asci) {
c00083b5:	55                   	push   %ebp
c00083b6:	89 e5                	mov    %esp,%ebp
c00083b8:	83 ec 18             	sub    $0x18,%esp
c00083bb:	8b 45 08             	mov    0x8(%ebp),%eax
c00083be:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:917
	console_put_char(char_asci);
c00083c1:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c00083c5:	0f b6 c0             	movzbl %al,%eax
c00083c8:	83 ec 0c             	sub    $0xc,%esp
c00083cb:	50                   	push   %eax
c00083cc:	e8 60 c1 ff ff       	call   c0004531 <console_put_char>
c00083d1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:918
}
c00083d4:	90                   	nop
c00083d5:	c9                   	leave  
c00083d6:	c3                   	ret    

c00083d7 <filesys_init>:
filesys_init():
/work/x86_os_my/fs/fs.c:930
 * 只支持 partition_format 函数创建的文件系统，其魔数等于 0x19590318
 * 三层循环：遍历通道，遍历通道中的硬盘，遍历硬盘上的分区
 * 全局变量 channel_cnt 通道数，定义在 ide.c
 * 全局变量 channels 结构体，定义在 ide.c
 */
void filesys_init() {
c00083d7:	55                   	push   %ebp
c00083d8:	89 e5                	mov    %esp,%ebp
c00083da:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/fs/fs.c:931
	uint8_t channel_no = 0, dev_no, part_idx = 0;
c00083dd:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
c00083e1:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
/work/x86_os_my/fs/fs.c:934

	/* sb_buf用来存储从硬盘上读入的超级块 */
	struct super_block* sb_buf = (struct super_block*)sys_malloc(SECTOR_SIZE);
c00083e5:	83 ec 0c             	sub    $0xc,%esp
c00083e8:	68 00 02 00 00       	push   $0x200
c00083ed:	e8 da a8 ff ff       	call   c0002ccc <sys_malloc>
c00083f2:	83 c4 10             	add    $0x10,%esp
c00083f5:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:935
	if (sb_buf == NULL) {
c00083f8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c00083fc:	75 1c                	jne    c000841a <filesys_init+0x43>
/work/x86_os_my/fs/fs.c:936
		PANIC("alloc memory failed!");
c00083fe:	68 d8 c5 00 c0       	push   $0xc000c5d8
c0008403:	68 6c ce 00 c0       	push   $0xc000ce6c
c0008408:	68 a8 03 00 00       	push   $0x3a8
c000840d:	68 ed c5 00 c0       	push   $0xc000c5ed
c0008412:	e8 0a 9f ff ff       	call   c0002321 <panic_spin>
c0008417:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:939
	}

	printk("searching filesystem......\n");
c000841a:	83 ec 0c             	sub    $0xc,%esp
c000841d:	68 59 cd 00 c0       	push   $0xc000cd59
c0008422:	e8 e0 e0 ff ff       	call   c0006507 <printk>
c0008427:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:941
	/* 遍历通道 */
	while (channel_no < channel_cnt) {
c000842a:	e9 1a 01 00 00       	jmp    c0008549 <filesys_init+0x172>
/work/x86_os_my/fs/fs.c:942
		dev_no = 0;
c000842f:	c6 45 f6 00          	movb   $0x0,-0xa(%ebp)
/work/x86_os_my/fs/fs.c:944
		/* 遍历通道里的硬盘 */
		while(dev_no < 2) {
c0008433:	e9 fd 00 00 00       	jmp    c0008535 <filesys_init+0x15e>
/work/x86_os_my/fs/fs.c:945
			if (dev_no == 0) {		// 跨过裸盘hd60M.img
c0008438:	80 7d f6 00          	cmpb   $0x0,-0xa(%ebp)
c000843c:	75 0f                	jne    c000844d <filesys_init+0x76>
/work/x86_os_my/fs/fs.c:946
				dev_no++;
c000843e:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0008442:	83 c0 01             	add    $0x1,%eax
c0008445:	88 45 f6             	mov    %al,-0xa(%ebp)
/work/x86_os_my/fs/fs.c:947
				continue;
c0008448:	e9 e8 00 00 00       	jmp    c0008535 <filesys_init+0x15e>
/work/x86_os_my/fs/fs.c:949
			}
			struct disk* hd = &channels[channel_no].devices[dev_no];
c000844d:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0008451:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
c0008455:	69 d2 10 03 00 00    	imul   $0x310,%edx,%edx
c000845b:	69 c0 60 06 00 00    	imul   $0x660,%eax,%eax
c0008461:	01 d0                	add    %edx,%eax
c0008463:	83 c0 40             	add    $0x40,%eax
c0008466:	05 e0 15 01 c0       	add    $0xc00115e0,%eax
c000846b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/fs.c:950
			struct partition* part = hd->prim_parts;	// 主分区数组
c000846e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0008471:	83 c0 10             	add    $0x10,%eax
c0008474:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:952
			/* 遍历硬盘里的分区 */
			while(part_idx < 12) {						// 4个主分区+8个逻辑
c0008477:	e9 a5 00 00 00       	jmp    c0008521 <filesys_init+0x14a>
/work/x86_os_my/fs/fs.c:953
				if (part_idx == 4) {
c000847c:	80 7d f5 04          	cmpb   $0x4,-0xb(%ebp)
c0008480:	75 0b                	jne    c000848d <filesys_init+0xb6>
/work/x86_os_my/fs/fs.c:954
					part = hd->logic_parts;				// 逻辑分区数组
c0008482:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0008485:	05 10 01 00 00       	add    $0x110,%eax
c000848a:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:959
				}

				/* channels数组是全局变量,默认值为0
				 * 固 channels.disk.partition.sec_cnt 在未初始化时，也为0 */
				if (part->sec_cnt != 0) {	// 如果分区存在，以sec_cnt是否为0当判断依据
c000848d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008490:	8b 40 04             	mov    0x4(%eax),%eax
c0008493:	85 c0                	test   %eax,%eax
c0008495:	74 7c                	je     c0008513 <filesys_init+0x13c>
/work/x86_os_my/fs/fs.c:960
					memset(sb_buf, 0, SECTOR_SIZE);
c0008497:	83 ec 04             	sub    $0x4,%esp
c000849a:	68 00 02 00 00       	push   $0x200
c000849f:	6a 00                	push   $0x0
c00084a1:	ff 75 e8             	pushl  -0x18(%ebp)
c00084a4:	e8 1a b3 ff ff       	call   c00037c3 <memset>
c00084a9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:963

					/* 读出分区的超级块，根据魔数判断是否存在我们定义的文件系统  */
					ide_read(hd, part->start_lba + 1, sb_buf, 1);
c00084ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00084af:	8b 00                	mov    (%eax),%eax
c00084b1:	83 c0 01             	add    $0x1,%eax
c00084b4:	6a 01                	push   $0x1
c00084b6:	ff 75 e8             	pushl  -0x18(%ebp)
c00084b9:	50                   	push   %eax
c00084ba:	ff 75 e4             	pushl  -0x1c(%ebp)
c00084bd:	e8 cc d5 ff ff       	call   c0005a8e <ide_read>
c00084c2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:964
					if (sb_buf->magic == 0x19590318) {
c00084c5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00084c8:	8b 00                	mov    (%eax),%eax
c00084ca:	3d 18 03 59 19       	cmp    $0x19590318,%eax
c00084cf:	75 19                	jne    c00084ea <filesys_init+0x113>
/work/x86_os_my/fs/fs.c:965
						printk("%s has filesystem\n", part->name);
c00084d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00084d4:	83 c0 14             	add    $0x14,%eax
c00084d7:	83 ec 08             	sub    $0x8,%esp
c00084da:	50                   	push   %eax
c00084db:	68 75 cd 00 c0       	push   $0xc000cd75
c00084e0:	e8 22 e0 ff ff       	call   c0006507 <printk>
c00084e5:	83 c4 10             	add    $0x10,%esp
c00084e8:	eb 29                	jmp    c0008513 <filesys_init+0x13c>
/work/x86_os_my/fs/fs.c:968
					} else {
						// 不存在我们的文件系统，则进行格式化
						printk("formatting %s`s partition %s......\n", hd->name, part->name);
c00084ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00084ed:	8d 50 14             	lea    0x14(%eax),%edx
c00084f0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00084f3:	83 ec 04             	sub    $0x4,%esp
c00084f6:	52                   	push   %edx
c00084f7:	50                   	push   %eax
c00084f8:	68 88 cd 00 c0       	push   $0xc000cd88
c00084fd:	e8 05 e0 ff ff       	call   c0006507 <printk>
c0008502:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:969
						partition_format(part);
c0008505:	83 ec 0c             	sub    $0xc,%esp
c0008508:	ff 75 f0             	pushl  -0x10(%ebp)
c000850b:	e8 5e e2 ff ff       	call   c000676e <partition_format>
c0008510:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:972
					}
				}
				part_idx++;
c0008513:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0008517:	83 c0 01             	add    $0x1,%eax
c000851a:	88 45 f5             	mov    %al,-0xb(%ebp)
/work/x86_os_my/fs/fs.c:973
				part++;
c000851d:	83 45 f0 40          	addl   $0x40,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:952
				continue;
			}
			struct disk* hd = &channels[channel_no].devices[dev_no];
			struct partition* part = hd->prim_parts;	// 主分区数组
			/* 遍历硬盘里的分区 */
			while(part_idx < 12) {						// 4个主分区+8个逻辑
c0008521:	80 7d f5 0b          	cmpb   $0xb,-0xb(%ebp)
c0008525:	0f 86 51 ff ff ff    	jbe    c000847c <filesys_init+0xa5>
/work/x86_os_my/fs/fs.c:975
					}
				}
				part_idx++;
				part++;
			}	/* end of 遍历分区 */
			dev_no++;
c000852b:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c000852f:	83 c0 01             	add    $0x1,%eax
c0008532:	88 45 f6             	mov    %al,-0xa(%ebp)
/work/x86_os_my/fs/fs.c:944
	printk("searching filesystem......\n");
	/* 遍历通道 */
	while (channel_no < channel_cnt) {
		dev_no = 0;
		/* 遍历通道里的硬盘 */
		while(dev_no < 2) {
c0008535:	80 7d f6 01          	cmpb   $0x1,-0xa(%ebp)
c0008539:	0f 86 f9 fe ff ff    	jbe    c0008438 <filesys_init+0x61>
/work/x86_os_my/fs/fs.c:977
				part_idx++;
				part++;
			}	/* end of 遍历分区 */
			dev_no++;
		}	/* end of 遍历硬盘 */
		channel_no++;
c000853f:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0008543:	83 c0 01             	add    $0x1,%eax
c0008546:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:941
		PANIC("alloc memory failed!");
	}

	printk("searching filesystem......\n");
	/* 遍历通道 */
	while (channel_no < channel_cnt) {
c0008549:	0f b6 05 c0 15 01 c0 	movzbl 0xc00115c0,%eax
c0008550:	38 45 f7             	cmp    %al,-0x9(%ebp)
c0008553:	0f 82 d6 fe ff ff    	jb     c000842f <filesys_init+0x58>
/work/x86_os_my/fs/fs.c:979
			}	/* end of 遍历分区 */
			dev_no++;
		}	/* end of 遍历硬盘 */
		channel_no++;
	}	/* end of 遍历通道 */
	sys_free(sb_buf);
c0008559:	83 ec 0c             	sub    $0xc,%esp
c000855c:	ff 75 e8             	pushl  -0x18(%ebp)
c000855f:	e8 95 ad ff ff       	call   c00032f9 <sys_free>
c0008564:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:984


	/* 挂载分区 */
	/* 默认操作的分区 */
	char default_part[8] = "sdb1";
c0008567:	c7 45 dc 73 64 62 31 	movl   $0x31626473,-0x24(%ebp)
c000856e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
/work/x86_os_my/fs/fs.c:995
	参数：
	partition_list 是所有分区的链表
	mount_partition 是挂载分区的函数
	(int)default_part 将数组地址转换成整型作为 mount_partition 的参数
	*/
	list_traversal(&partition_list, mount_partition, (int)default_part);
c0008575:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0008578:	83 ec 04             	sub    $0x4,%esp
c000857b:	50                   	push   %eax
c000857c:	68 63 65 00 c0       	push   $0xc0006563
c0008581:	68 a0 22 01 c0       	push   $0xc00122a0
c0008586:	e8 77 be ff ff       	call   c0004402 <list_traversal>
c000858b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:999


	/* 将当前分区的根目录打开 + 初始化文件表 */
	open_root_dir(cur_part);
c000858e:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c0008593:	83 ec 0c             	sub    $0xc,%esp
c0008596:	50                   	push   %eax
c0008597:	e8 94 18 00 00       	call   c0009e30 <open_root_dir>
c000859c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:1000
	uint32_t fd_idx = 0;
c000859f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:1001
	while (fd_idx < MAX_FILE_OPEN) {
c00085a6:	eb 1d                	jmp    c00085c5 <filesys_init+0x1ee>
/work/x86_os_my/fs/fs.c:1002
		file_table[fd_idx++].fd_inode = NULL;
c00085a8:	8b 55 ec             	mov    -0x14(%ebp),%edx
c00085ab:	8d 42 01             	lea    0x1(%edx),%eax
c00085ae:	89 45 ec             	mov    %eax,-0x14(%ebp)
c00085b1:	89 d0                	mov    %edx,%eax
c00085b3:	01 c0                	add    %eax,%eax
c00085b5:	01 d0                	add    %edx,%eax
c00085b7:	c1 e0 02             	shl    $0x2,%eax
c00085ba:	05 c8 22 01 c0       	add    $0xc00122c8,%eax
c00085bf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/fs/fs.c:1001


	/* 将当前分区的根目录打开 + 初始化文件表 */
	open_root_dir(cur_part);
	uint32_t fd_idx = 0;
	while (fd_idx < MAX_FILE_OPEN) {
c00085c5:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
c00085c9:	76 dd                	jbe    c00085a8 <filesys_init+0x1d1>
/work/x86_os_my/fs/fs.c:1004
		file_table[fd_idx++].fd_inode = NULL;
	}
}
c00085cb:	90                   	nop
c00085cc:	c9                   	leave  
c00085cd:	c3                   	ret    

c00085ce <inode_locate>:
inode_locate():
/work/x86_os_my/fs/inode.c:23
};

/* 获取inode所在的扇区和扇区内的偏移量
 * out: inode_pos
 */
static void inode_locate(struct partition* part, uint32_t inode_no, struct inode_position* inode_pos) {
c00085ce:	55                   	push   %ebp
c00085cf:	89 e5                	mov    %esp,%ebp
c00085d1:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/fs/inode.c:25
	/* inode_table在硬盘上是连续的 */
	ASSERT(inode_no < 4096);
c00085d4:	81 7d 0c ff 0f 00 00 	cmpl   $0xfff,0xc(%ebp)
c00085db:	76 19                	jbe    c00085f6 <inode_locate+0x28>
/work/x86_os_my/fs/inode.c:25 (discriminator 1)
c00085dd:	68 7c ce 00 c0       	push   $0xc000ce7c
c00085e2:	68 04 cf 00 c0       	push   $0xc000cf04
c00085e7:	6a 19                	push   $0x19
c00085e9:	68 8c ce 00 c0       	push   $0xc000ce8c
c00085ee:	e8 2e 9d ff ff       	call   c0002321 <panic_spin>
c00085f3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:26
	uint32_t inode_table_lba = part->sb->inode_table_lba;
c00085f6:	8b 45 08             	mov    0x8(%ebp),%eax
c00085f9:	8b 40 1c             	mov    0x1c(%eax),%eax
c00085fc:	8b 40 20             	mov    0x20(%eax),%eax
c00085ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/inode.c:28

	uint32_t inode_size = sizeof(struct inode);
c0008602:	c7 45 f0 4c 00 00 00 	movl   $0x4c,-0x10(%ebp)
/work/x86_os_my/fs/inode.c:29
	uint32_t off_size = inode_no * inode_size;	// 第inode_no号inode相对于inode_table_lba的字节偏移量
c0008609:	8b 45 0c             	mov    0xc(%ebp),%eax
c000860c:	0f af 45 f0          	imul   -0x10(%ebp),%eax
c0008610:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/inode.c:30
	uint32_t off_sec  = off_size / 512;			// 第inode_no号inode相对于inode_table_lba的扇区偏移量
c0008613:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008616:	c1 e8 09             	shr    $0x9,%eax
c0008619:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/inode.c:31
	uint32_t off_size_in_sec = off_size % 512;	// 待查找的inode所在扇区中的起始地址
c000861c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000861f:	25 ff 01 00 00       	and    $0x1ff,%eax
c0008624:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/inode.c:34

	/* 判断此inode是否跨越2个扇区 */
	uint32_t left_in_sec = 512 - off_size_in_sec;
c0008627:	b8 00 02 00 00       	mov    $0x200,%eax
c000862c:	2b 45 e4             	sub    -0x1c(%ebp),%eax
c000862f:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/inode.c:36
	// 若扇区内剩下的空间不足以容纳一个inode,必然是inode跨越了2个扇区
	if (left_in_sec < inode_size ) {
c0008632:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0008635:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0008638:	73 0b                	jae    c0008645 <inode_locate+0x77>
/work/x86_os_my/fs/inode.c:37
		inode_pos->two_sec = true;	//跨越了
c000863a:	8b 45 10             	mov    0x10(%ebp),%eax
c000863d:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0008643:	eb 09                	jmp    c000864e <inode_locate+0x80>
/work/x86_os_my/fs/inode.c:39
	} else {
		inode_pos->two_sec = false;
c0008645:	8b 45 10             	mov    0x10(%ebp),%eax
c0008648:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/fs/inode.c:41
	}
	inode_pos->sec_lba = inode_table_lba + off_sec;
c000864e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0008651:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0008654:	01 c2                	add    %eax,%edx
c0008656:	8b 45 10             	mov    0x10(%ebp),%eax
c0008659:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/inode.c:42
	inode_pos->off_size = off_size_in_sec;
c000865c:	8b 45 10             	mov    0x10(%ebp),%eax
c000865f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0008662:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/fs/inode.c:43
}
c0008665:	90                   	nop
c0008666:	c9                   	leave  
c0008667:	c3                   	ret    

c0008668 <inode_sync>:
inode_sync():
/work/x86_os_my/fs/inode.c:51
io_buf是用于硬盘io的缓冲区，它由主调函数提供！
原因是
一般情况下把内存中的数据同步到硬盘都是最后的操作，其前已经做了大量工作，
若到这最后一步时才申请内存失败，前面的所有操作都白费了，还要回滚到之前的旧状态，代价太大
*/
void inode_sync(struct partition* part, struct inode* inode, void* io_buf) {
c0008668:	55                   	push   %ebp
c0008669:	89 e5                	mov    %esp,%ebp
c000866b:	83 ec 68             	sub    $0x68,%esp
/work/x86_os_my/fs/inode.c:52
	uint8_t inode_no = inode->i_no;
c000866e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0008671:	8b 00                	mov    (%eax),%eax
c0008673:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/inode.c:54
	struct inode_position inode_pos;
	inode_locate(part, inode_no, &inode_pos);	// inode位置信息会存入inode_pos
c0008676:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000867a:	83 ec 04             	sub    $0x4,%esp
c000867d:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0008680:	52                   	push   %edx
c0008681:	50                   	push   %eax
c0008682:	ff 75 08             	pushl  0x8(%ebp)
c0008685:	e8 44 ff ff ff       	call   c00085ce <inode_locate>
c000868a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:55
	ASSERT(inode_pos.sec_lba <= (part->start_lba + part->sec_cnt));
c000868d:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0008690:	8b 45 08             	mov    0x8(%ebp),%eax
c0008693:	8b 08                	mov    (%eax),%ecx
c0008695:	8b 45 08             	mov    0x8(%ebp),%eax
c0008698:	8b 40 04             	mov    0x4(%eax),%eax
c000869b:	01 c8                	add    %ecx,%eax
c000869d:	39 c2                	cmp    %eax,%edx
c000869f:	76 19                	jbe    c00086ba <inode_sync+0x52>
/work/x86_os_my/fs/inode.c:55 (discriminator 1)
c00086a1:	68 98 ce 00 c0       	push   $0xc000ce98
c00086a6:	68 14 cf 00 c0       	push   $0xc000cf14
c00086ab:	6a 37                	push   $0x37
c00086ad:	68 8c ce 00 c0       	push   $0xc000ce8c
c00086b2:	e8 6a 9c ff ff       	call   c0002321 <panic_spin>
c00086b7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:62
	/* 硬盘中的inode中的成员inode_tag和i_open_cnts是不需要的，
	* 它们只在内存中有效，记录链表位置和被多少进程共享，
	* 将inode同步到硬盘时,清掉这三项即可。
	*/
	struct inode pure_inode;
	memcpy(&pure_inode, inode, sizeof(struct inode));
c00086ba:	83 ec 04             	sub    $0x4,%esp
c00086bd:	6a 4c                	push   $0x4c
c00086bf:	ff 75 0c             	pushl  0xc(%ebp)
c00086c2:	8d 45 98             	lea    -0x68(%ebp),%eax
c00086c5:	50                   	push   %eax
c00086c6:	e8 4a b1 ff ff       	call   c0003815 <memcpy>
c00086cb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:63
	pure_inode.i_open_cnts = 0;
c00086ce:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
/work/x86_os_my/fs/inode.c:64
	pure_inode.write_deny = false;	// 置为false,以保证在硬盘中读出时为可写
c00086d5:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
/work/x86_os_my/fs/inode.c:65
	pure_inode.inode_tag.prev = pure_inode.inode_tag.next = NULL;
c00086dc:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c00086e3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00086e6:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/inode.c:67

	char* inode_buf = (char*)io_buf;
c00086e9:	8b 45 10             	mov    0x10(%ebp),%eax
c00086ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/inode.c:69
	// 若inode结构，跨了两个扇区,就要读出两个扇区再写入两个扇区
	if (inode_pos.two_sec) {
c00086ef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00086f2:	85 c0                	test   %eax,%eax
c00086f4:	74 4c                	je     c0008742 <inode_sync+0xda>
/work/x86_os_my/fs/inode.c:72
		/* 读写硬盘是以扇区为单位的
		所以需要将待写入的inode结构拼入到这2个扇区的中间位置 */
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 2);	// inode_table在格式化时，写入硬盘是连续写入的，所以读入2块扇区
c00086f6:	8b 55 e8             	mov    -0x18(%ebp),%edx
c00086f9:	8b 45 08             	mov    0x8(%ebp),%eax
c00086fc:	8b 40 08             	mov    0x8(%eax),%eax
c00086ff:	6a 02                	push   $0x2
c0008701:	ff 75 f0             	pushl  -0x10(%ebp)
c0008704:	52                   	push   %edx
c0008705:	50                   	push   %eax
c0008706:	e8 83 d3 ff ff       	call   c0005a8e <ide_read>
c000870b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:73
		memcpy((inode_buf + inode_pos.off_size), &pure_inode, sizeof(struct inode));	// inode_buf+inode在扇区中的偏移
c000870e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0008711:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008714:	01 c2                	add    %eax,%edx
c0008716:	83 ec 04             	sub    $0x4,%esp
c0008719:	6a 4c                	push   $0x4c
c000871b:	8d 45 98             	lea    -0x68(%ebp),%eax
c000871e:	50                   	push   %eax
c000871f:	52                   	push   %edx
c0008720:	e8 f0 b0 ff ff       	call   c0003815 <memcpy>
c0008725:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:74
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 2);
c0008728:	8b 55 e8             	mov    -0x18(%ebp),%edx
c000872b:	8b 45 08             	mov    0x8(%ebp),%eax
c000872e:	8b 40 08             	mov    0x8(%eax),%eax
c0008731:	6a 02                	push   $0x2
c0008733:	ff 75 f0             	pushl  -0x10(%ebp)
c0008736:	52                   	push   %edx
c0008737:	50                   	push   %eax
c0008738:	e8 c5 d4 ff ff       	call   c0005c02 <ide_write>
c000873d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:81
		// 若inode结构，只在一个扇区中
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
		memcpy((inode_buf + inode_pos.off_size), &pure_inode, sizeof(struct inode));	// inode_buf+inode在扇区中的偏移
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
	}
}
c0008740:	eb 4a                	jmp    c000878c <inode_sync+0x124>
/work/x86_os_my/fs/inode.c:77
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 2);	// inode_table在格式化时，写入硬盘是连续写入的，所以读入2块扇区
		memcpy((inode_buf + inode_pos.off_size), &pure_inode, sizeof(struct inode));	// inode_buf+inode在扇区中的偏移
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 2);
	} else {
		// 若inode结构，只在一个扇区中
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
c0008742:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0008745:	8b 45 08             	mov    0x8(%ebp),%eax
c0008748:	8b 40 08             	mov    0x8(%eax),%eax
c000874b:	6a 01                	push   $0x1
c000874d:	ff 75 f0             	pushl  -0x10(%ebp)
c0008750:	52                   	push   %edx
c0008751:	50                   	push   %eax
c0008752:	e8 37 d3 ff ff       	call   c0005a8e <ide_read>
c0008757:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:78
		memcpy((inode_buf + inode_pos.off_size), &pure_inode, sizeof(struct inode));	// inode_buf+inode在扇区中的偏移
c000875a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c000875d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008760:	01 c2                	add    %eax,%edx
c0008762:	83 ec 04             	sub    $0x4,%esp
c0008765:	6a 4c                	push   $0x4c
c0008767:	8d 45 98             	lea    -0x68(%ebp),%eax
c000876a:	50                   	push   %eax
c000876b:	52                   	push   %edx
c000876c:	e8 a4 b0 ff ff       	call   c0003815 <memcpy>
c0008771:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:79
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
c0008774:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0008777:	8b 45 08             	mov    0x8(%ebp),%eax
c000877a:	8b 40 08             	mov    0x8(%eax),%eax
c000877d:	6a 01                	push   $0x1
c000877f:	ff 75 f0             	pushl  -0x10(%ebp)
c0008782:	52                   	push   %edx
c0008783:	50                   	push   %eax
c0008784:	e8 79 d4 ff ff       	call   c0005c02 <ide_write>
c0008789:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:81
	}
}
c000878c:	90                   	nop
c000878d:	c9                   	leave  
c000878e:	c3                   	ret    

c000878f <inode_open>:
inode_open():
/work/x86_os_my/fs/inode.c:84

/* 根据i结点号，获取到相应的inode结构，插入到inode缓存队列，并返回它 */
struct inode* inode_open(struct partition* part, uint32_t inode_no) {
c000878f:	55                   	push   %ebp
c0008790:	89 e5                	mov    %esp,%ebp
c0008792:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/fs/inode.c:86
	/* 1.先在已打开inode链表中找inode，此链表作用是提速 */
	struct list_elem* elem = part->open_inodes.head.next;
c0008795:	8b 45 08             	mov    0x8(%ebp),%eax
c0008798:	8b 40 34             	mov    0x34(%eax),%eax
c000879b:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/inode.c:88
	struct inode* inode_found;
	while (elem != &part->open_inodes.tail) {
c000879e:	eb 33                	jmp    c00087d3 <inode_open+0x44>
/work/x86_os_my/fs/inode.c:89
		inode_found = elem2entry(struct inode, inode_tag, elem);
c00087a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00087a3:	83 e8 44             	sub    $0x44,%eax
c00087a6:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/inode.c:90
		if (inode_found->i_no == inode_no) {
c00087a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00087ac:	8b 00                	mov    (%eax),%eax
c00087ae:	3b 45 0c             	cmp    0xc(%ebp),%eax
c00087b1:	75 17                	jne    c00087ca <inode_open+0x3b>
/work/x86_os_my/fs/inode.c:91
			inode_found->i_open_cnts++;
c00087b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00087b6:	8b 40 08             	mov    0x8(%eax),%eax
c00087b9:	8d 50 01             	lea    0x1(%eax),%edx
c00087bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00087bf:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/fs/inode.c:92
			return inode_found;
c00087c2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00087c5:	e9 09 01 00 00       	jmp    c00088d3 <inode_open+0x144>
/work/x86_os_my/fs/inode.c:94
		}
		elem = elem->next;
c00087ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00087cd:	8b 40 04             	mov    0x4(%eax),%eax
c00087d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/inode.c:88
/* 根据i结点号，获取到相应的inode结构，插入到inode缓存队列，并返回它 */
struct inode* inode_open(struct partition* part, uint32_t inode_no) {
	/* 1.先在已打开inode链表中找inode，此链表作用是提速 */
	struct list_elem* elem = part->open_inodes.head.next;
	struct inode* inode_found;
	while (elem != &part->open_inodes.tail) {
c00087d3:	8b 45 08             	mov    0x8(%ebp),%eax
c00087d6:	83 c0 38             	add    $0x38,%eax
c00087d9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c00087dc:	75 c2                	jne    c00087a0 <inode_open+0x11>
/work/x86_os_my/fs/inode.c:100
	}

	
	/* 2.open_inodes链表中找不到，从硬盘上读入此inode并加入到inode缓存链表 */
	struct inode_position inode_pos;	// 记录inode位置的结构
	inode_locate(part, inode_no, &inode_pos);
c00087de:	83 ec 04             	sub    $0x4,%esp
c00087e1:	8d 45 d8             	lea    -0x28(%ebp),%eax
c00087e4:	50                   	push   %eax
c00087e5:	ff 75 0c             	pushl  0xc(%ebp)
c00087e8:	ff 75 08             	pushl  0x8(%ebp)
c00087eb:	e8 de fd ff ff       	call   c00085ce <inode_locate>
c00087f0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:104

	/* 为使通过sys_malloc创建的新inode被所有任务共享，需要将inode置于内核空间
	故临时将cur_pbc->pgdir置为NULL，sys_malloc就会以为是从内核空间分配 */
	struct task_struct* cur = running_thread();
c00087f3:	e8 b2 b3 ff ff       	call   c0003baa <running_thread>
c00087f8:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/inode.c:105
	uint32_t* cur_pagedir_bak = cur->pgdir;
c00087fb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00087fe:	8b 40 54             	mov    0x54(%eax),%eax
c0008801:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/inode.c:106
	cur->pgdir = NULL;
c0008804:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0008807:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
/work/x86_os_my/fs/inode.c:107
	inode_found = (struct inode*)sys_malloc(sizeof(struct inode));
c000880e:	83 ec 0c             	sub    $0xc,%esp
c0008811:	6a 4c                	push   $0x4c
c0008813:	e8 b4 a4 ff ff       	call   c0002ccc <sys_malloc>
c0008818:	83 c4 10             	add    $0x10,%esp
c000881b:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/inode.c:108
	cur->pgdir = cur_pagedir_bak;	// 恢复pgdir
c000881e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0008821:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0008824:	89 50 54             	mov    %edx,0x54(%eax)
/work/x86_os_my/fs/inode.c:111

	char* inode_buf;
	if (inode_pos.two_sec) {	// inode结构跨扇区了
c0008827:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000882a:	85 c0                	test   %eax,%eax
c000882c:	74 2d                	je     c000885b <inode_open+0xcc>
/work/x86_os_my/fs/inode.c:112
		inode_buf = (char*)sys_malloc(1024);
c000882e:	83 ec 0c             	sub    $0xc,%esp
c0008831:	68 00 04 00 00       	push   $0x400
c0008836:	e8 91 a4 ff ff       	call   c0002ccc <sys_malloc>
c000883b:	83 c4 10             	add    $0x10,%esp
c000883e:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/inode.c:114
		// inode_table在格式化时，写入硬盘是连续写入的，所以可以连续读入2块扇区
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 2);
c0008841:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0008844:	8b 45 08             	mov    0x8(%ebp),%eax
c0008847:	8b 40 08             	mov    0x8(%eax),%eax
c000884a:	6a 02                	push   $0x2
c000884c:	ff 75 f0             	pushl  -0x10(%ebp)
c000884f:	52                   	push   %edx
c0008850:	50                   	push   %eax
c0008851:	e8 38 d2 ff ff       	call   c0005a8e <ide_read>
c0008856:	83 c4 10             	add    $0x10,%esp
c0008859:	eb 2b                	jmp    c0008886 <inode_open+0xf7>
/work/x86_os_my/fs/inode.c:116
	} else {
		inode_buf = (char*)sys_malloc(512);
c000885b:	83 ec 0c             	sub    $0xc,%esp
c000885e:	68 00 02 00 00       	push   $0x200
c0008863:	e8 64 a4 ff ff       	call   c0002ccc <sys_malloc>
c0008868:	83 c4 10             	add    $0x10,%esp
c000886b:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/inode.c:117
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
c000886e:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0008871:	8b 45 08             	mov    0x8(%ebp),%eax
c0008874:	8b 40 08             	mov    0x8(%eax),%eax
c0008877:	6a 01                	push   $0x1
c0008879:	ff 75 f0             	pushl  -0x10(%ebp)
c000887c:	52                   	push   %edx
c000887d:	50                   	push   %eax
c000887e:	e8 0b d2 ff ff       	call   c0005a8e <ide_read>
c0008883:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:119
	}
	memcpy(inode_found, inode_buf + inode_pos.off_size, sizeof(struct inode));	// inode_buf+inode在扇区中的偏移
c0008886:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0008889:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000888c:	01 d0                	add    %edx,%eax
c000888e:	83 ec 04             	sub    $0x4,%esp
c0008891:	6a 4c                	push   $0x4c
c0008893:	50                   	push   %eax
c0008894:	ff 75 ec             	pushl  -0x14(%ebp)
c0008897:	e8 79 af ff ff       	call   c0003815 <memcpy>
c000889c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:123

	
	/* 3.马上要用这个inode，固插入到队首 */
	list_push(&part->open_inodes, &inode_found->inode_tag);
c000889f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00088a2:	8d 50 44             	lea    0x44(%eax),%edx
c00088a5:	8b 45 08             	mov    0x8(%ebp),%eax
c00088a8:	83 c0 30             	add    $0x30,%eax
c00088ab:	83 ec 08             	sub    $0x8,%esp
c00088ae:	52                   	push   %edx
c00088af:	50                   	push   %eax
c00088b0:	e8 7a ba ff ff       	call   c000432f <list_push>
c00088b5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:124
	inode_found->i_open_cnts = 1;
c00088b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00088bb:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/fs/inode.c:126

	sys_free(inode_buf);
c00088c2:	83 ec 0c             	sub    $0xc,%esp
c00088c5:	ff 75 f0             	pushl  -0x10(%ebp)
c00088c8:	e8 2c aa ff ff       	call   c00032f9 <sys_free>
c00088cd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:127
	return inode_found;
c00088d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
/work/x86_os_my/fs/inode.c:128 (discriminator 1)
}
c00088d3:	c9                   	leave  
c00088d4:	c3                   	ret    

c00088d5 <inode_close>:
inode_close():
/work/x86_os_my/fs/inode.c:132

/* 关闭inode或减少inode的打开数 */
//1.从inode队列踢掉 2.释放内核内存池中的这个inode内存
void inode_close(struct inode* inode) {
c00088d5:	55                   	push   %ebp
c00088d6:	89 e5                	mov    %esp,%ebp
c00088d8:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/inode.c:134
	/* 若没有进程再打开此文件,将此inode去掉并释放空间 */
	enum intr_status old_status = intr_disable();
c00088db:	e8 60 90 ff ff       	call   c0001940 <intr_disable>
c00088e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/inode.c:135
	if (--inode->i_open_cnts == 0) {
c00088e3:	8b 45 08             	mov    0x8(%ebp),%eax
c00088e6:	8b 40 08             	mov    0x8(%eax),%eax
c00088e9:	8d 50 ff             	lea    -0x1(%eax),%edx
c00088ec:	8b 45 08             	mov    0x8(%ebp),%eax
c00088ef:	89 50 08             	mov    %edx,0x8(%eax)
c00088f2:	8b 45 08             	mov    0x8(%ebp),%eax
c00088f5:	8b 40 08             	mov    0x8(%eax),%eax
c00088f8:	85 c0                	test   %eax,%eax
c00088fa:	75 44                	jne    c0008940 <inode_close+0x6b>
/work/x86_os_my/fs/inode.c:136
		list_remove(&inode->inode_tag);
c00088fc:	8b 45 08             	mov    0x8(%ebp),%eax
c00088ff:	83 c0 44             	add    $0x44,%eax
c0008902:	83 ec 0c             	sub    $0xc,%esp
c0008905:	50                   	push   %eax
c0008906:	e8 60 ba ff ff       	call   c000436b <list_remove>
c000890b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:139
		/* inode结构在内核空间，释放时要释放到内核内存池。
		pgdir为NULL时，sys_free认为是内核空间 */
		struct task_struct* cur = running_thread();
c000890e:	e8 97 b2 ff ff       	call   c0003baa <running_thread>
c0008913:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/inode.c:140
		uint32_t* cur_pagedir_bak = cur->pgdir;	// 进程自己页目录表的虚拟地址，加载到cr3时需转成物理地址
c0008916:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008919:	8b 40 54             	mov    0x54(%eax),%eax
c000891c:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/inode.c:141
		cur->pgdir = NULL;
c000891f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008922:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
/work/x86_os_my/fs/inode.c:142
		sys_free(inode);
c0008929:	83 ec 0c             	sub    $0xc,%esp
c000892c:	ff 75 08             	pushl  0x8(%ebp)
c000892f:	e8 c5 a9 ff ff       	call   c00032f9 <sys_free>
c0008934:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:143
		cur->pgdir = cur_pagedir_bak;
c0008937:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000893a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c000893d:	89 50 54             	mov    %edx,0x54(%eax)
/work/x86_os_my/fs/inode.c:145
	}
	intr_set_status(old_status);
c0008940:	83 ec 0c             	sub    $0xc,%esp
c0008943:	ff 75 f4             	pushl  -0xc(%ebp)
c0008946:	e8 1e 90 ff ff       	call   c0001969 <intr_set_status>
c000894b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:146
}
c000894e:	90                   	nop
c000894f:	c9                   	leave  
c0008950:	c3                   	ret    

c0008951 <inode_delete>:
inode_delete():
/work/x86_os_my/fs/inode.c:149

/* 将硬盘分区part上，inode管理的数据块清空 */
void inode_delete(struct partition* part, uint32_t inode_no, void* io_buf) {
c0008951:	55                   	push   %ebp
c0008952:	89 e5                	mov    %esp,%ebp
c0008954:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/inode.c:150
	ASSERT(inode_no < 4096);
c0008957:	81 7d 0c ff 0f 00 00 	cmpl   $0xfff,0xc(%ebp)
c000895e:	76 1c                	jbe    c000897c <inode_delete+0x2b>
/work/x86_os_my/fs/inode.c:150 (discriminator 1)
c0008960:	68 7c ce 00 c0       	push   $0xc000ce7c
c0008965:	68 20 cf 00 c0       	push   $0xc000cf20
c000896a:	68 96 00 00 00       	push   $0x96
c000896f:	68 8c ce 00 c0       	push   $0xc000ce8c
c0008974:	e8 a8 99 ff ff       	call   c0002321 <panic_spin>
c0008979:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:152
	struct inode_position inode_pos;
	inode_locate(part, inode_no, &inode_pos);	// 获取inode所在的扇区和扇区内的偏移量【这里是 inode_table 的空间】
c000897c:	83 ec 04             	sub    $0x4,%esp
c000897f:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0008982:	50                   	push   %eax
c0008983:	ff 75 0c             	pushl  0xc(%ebp)
c0008986:	ff 75 08             	pushl  0x8(%ebp)
c0008989:	e8 40 fc ff ff       	call   c00085ce <inode_locate>
c000898e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:153
	ASSERT(inode_pos.sec_lba <= (part->start_lba + part->sec_cnt));
c0008991:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0008994:	8b 45 08             	mov    0x8(%ebp),%eax
c0008997:	8b 08                	mov    (%eax),%ecx
c0008999:	8b 45 08             	mov    0x8(%ebp),%eax
c000899c:	8b 40 04             	mov    0x4(%eax),%eax
c000899f:	01 c8                	add    %ecx,%eax
c00089a1:	39 c2                	cmp    %eax,%edx
c00089a3:	76 1c                	jbe    c00089c1 <inode_delete+0x70>
/work/x86_os_my/fs/inode.c:153 (discriminator 1)
c00089a5:	68 98 ce 00 c0       	push   $0xc000ce98
c00089aa:	68 20 cf 00 c0       	push   $0xc000cf20
c00089af:	68 99 00 00 00       	push   $0x99
c00089b4:	68 8c ce 00 c0       	push   $0xc000ce8c
c00089b9:	e8 63 99 ff ff       	call   c0002321 <panic_spin>
c00089be:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:155

	char* inode_buf = (char*)io_buf;
c00089c1:	8b 45 10             	mov    0x10(%ebp),%eax
c00089c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/inode.c:156
	if (inode_pos.two_sec) {	// inode跨扇区,读入2个扇区
c00089c7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00089ca:	85 c0                	test   %eax,%eax
c00089cc:	74 4a                	je     c0008a18 <inode_delete+0xc7>
/work/x86_os_my/fs/inode.c:158
		/* 将原硬盘上的内容先读出来 */
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 2);
c00089ce:	8b 55 ec             	mov    -0x14(%ebp),%edx
c00089d1:	8b 45 08             	mov    0x8(%ebp),%eax
c00089d4:	8b 40 08             	mov    0x8(%eax),%eax
c00089d7:	6a 02                	push   $0x2
c00089d9:	ff 75 f4             	pushl  -0xc(%ebp)
c00089dc:	52                   	push   %edx
c00089dd:	50                   	push   %eax
c00089de:	e8 ab d0 ff ff       	call   c0005a8e <ide_read>
c00089e3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:160
		/* 将inode_buf清0 */
		memset((inode_buf + inode_pos.off_size), 0, sizeof(struct inode));	//清零 inode_table 中的一个 inode 结构
c00089e6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00089e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00089ec:	01 d0                	add    %edx,%eax
c00089ee:	83 ec 04             	sub    $0x4,%esp
c00089f1:	6a 4c                	push   $0x4c
c00089f3:	6a 00                	push   $0x0
c00089f5:	50                   	push   %eax
c00089f6:	e8 c8 ad ff ff       	call   c00037c3 <memset>
c00089fb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:162
		/* 用清0的内存数据覆盖磁盘 */
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 2);
c00089fe:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0008a01:	8b 45 08             	mov    0x8(%ebp),%eax
c0008a04:	8b 40 08             	mov    0x8(%eax),%eax
c0008a07:	6a 02                	push   $0x2
c0008a09:	ff 75 f4             	pushl  -0xc(%ebp)
c0008a0c:	52                   	push   %edx
c0008a0d:	50                   	push   %eax
c0008a0e:	e8 ef d1 ff ff       	call   c0005c02 <ide_write>
c0008a13:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:171
		/* 将inode_buf清0 */
		memset((inode_buf + inode_pos.off_size), 0, sizeof(struct inode));
		/* 用清0的内存数据覆盖磁盘 */
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
	}
}
c0008a16:	eb 48                	jmp    c0008a60 <inode_delete+0x10f>
/work/x86_os_my/fs/inode.c:165
		memset((inode_buf + inode_pos.off_size), 0, sizeof(struct inode));	//清零 inode_table 中的一个 inode 结构
		/* 用清0的内存数据覆盖磁盘 */
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 2);
	} else {	// 未跨扇区,只读入1个扇区就好
		/* 将原硬盘上的内容先读出来 */
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
c0008a18:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0008a1b:	8b 45 08             	mov    0x8(%ebp),%eax
c0008a1e:	8b 40 08             	mov    0x8(%eax),%eax
c0008a21:	6a 01                	push   $0x1
c0008a23:	ff 75 f4             	pushl  -0xc(%ebp)
c0008a26:	52                   	push   %edx
c0008a27:	50                   	push   %eax
c0008a28:	e8 61 d0 ff ff       	call   c0005a8e <ide_read>
c0008a2d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:167
		/* 将inode_buf清0 */
		memset((inode_buf + inode_pos.off_size), 0, sizeof(struct inode));
c0008a30:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0008a33:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0008a36:	01 d0                	add    %edx,%eax
c0008a38:	83 ec 04             	sub    $0x4,%esp
c0008a3b:	6a 4c                	push   $0x4c
c0008a3d:	6a 00                	push   $0x0
c0008a3f:	50                   	push   %eax
c0008a40:	e8 7e ad ff ff       	call   c00037c3 <memset>
c0008a45:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:169
		/* 用清0的内存数据覆盖磁盘 */
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
c0008a48:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0008a4b:	8b 45 08             	mov    0x8(%ebp),%eax
c0008a4e:	8b 40 08             	mov    0x8(%eax),%eax
c0008a51:	6a 01                	push   $0x1
c0008a53:	ff 75 f4             	pushl  -0xc(%ebp)
c0008a56:	52                   	push   %edx
c0008a57:	50                   	push   %eax
c0008a58:	e8 a5 d1 ff ff       	call   c0005c02 <ide_write>
c0008a5d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:171
	}
}
c0008a60:	90                   	nop
c0008a61:	c9                   	leave  
c0008a62:	c3                   	ret    

c0008a63 <inode_release>:
inode_release():
/work/x86_os_my/fs/inode.c:179
（1）inode 位图
（2）inode_table
（3）inode 中 i_sectors[0～11]中的直接块和一级间接索引块表 i_sectors[12]中的间接块
（4）一级间接索引块表本身的扇区地址
 */
void inode_release(struct partition* part, uint32_t inode_no) {
c0008a63:	55                   	push   %ebp
c0008a64:	89 e5                	mov    %esp,%ebp
c0008a66:	57                   	push   %edi
c0008a67:	81 ec 44 02 00 00    	sub    $0x244,%esp
/work/x86_os_my/fs/inode.c:180
	struct inode* inode_to_del = inode_open(part, inode_no);
c0008a6d:	83 ec 08             	sub    $0x8,%esp
c0008a70:	ff 75 0c             	pushl  0xc(%ebp)
c0008a73:	ff 75 08             	pushl  0x8(%ebp)
c0008a76:	e8 14 fd ff ff       	call   c000878f <inode_open>
c0008a7b:	83 c4 10             	add    $0x10,%esp
c0008a7e:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/inode.c:181
	ASSERT(inode_to_del->i_no == inode_no);
c0008a81:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008a84:	8b 00                	mov    (%eax),%eax
c0008a86:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0008a89:	74 1c                	je     c0008aa7 <inode_release+0x44>
/work/x86_os_my/fs/inode.c:181 (discriminator 1)
c0008a8b:	68 d0 ce 00 c0       	push   $0xc000ced0
c0008a90:	68 30 cf 00 c0       	push   $0xc000cf30
c0008a95:	68 b5 00 00 00       	push   $0xb5
c0008a9a:	68 8c ce 00 c0       	push   $0xc000ce8c
c0008a9f:	e8 7d 98 ff ff       	call   c0002321 <panic_spin>
c0008aa4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:184

	/* 1 回收inode占用的所有块 */
	uint8_t block_idx = 0, block_cnt = 12;
c0008aa7:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
c0008aab:	c6 45 f6 0c          	movb   $0xc,-0xa(%ebp)
/work/x86_os_my/fs/inode.c:186
	uint32_t block_bitmap_idx;
	uint32_t all_blocks[140] = {0};	  //12个直接块+128个间接块
c0008aaf:	8d 95 b8 fd ff ff    	lea    -0x248(%ebp),%edx
c0008ab5:	b8 00 00 00 00       	mov    $0x0,%eax
c0008aba:	b9 8c 00 00 00       	mov    $0x8c,%ecx
c0008abf:	89 d7                	mov    %edx,%edi
c0008ac1:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/fs/inode.c:189

	/* a 先将前12个直接块存入all_blocks */
	while (block_idx < 12) {
c0008ac3:	eb 22                	jmp    c0008ae7 <inode_release+0x84>
/work/x86_os_my/fs/inode.c:190
		all_blocks[block_idx] = inode_to_del->i_sectors[block_idx];
c0008ac5:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0008ac9:	0f b6 4d f7          	movzbl -0x9(%ebp),%ecx
c0008acd:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0008ad0:	83 c1 04             	add    $0x4,%ecx
c0008ad3:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
c0008ad6:	89 94 85 b8 fd ff ff 	mov    %edx,-0x248(%ebp,%eax,4)
/work/x86_os_my/fs/inode.c:191
		block_idx++;
c0008add:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0008ae1:	83 c0 01             	add    $0x1,%eax
c0008ae4:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/inode.c:189
	uint8_t block_idx = 0, block_cnt = 12;
	uint32_t block_bitmap_idx;
	uint32_t all_blocks[140] = {0};	  //12个直接块+128个间接块

	/* a 先将前12个直接块存入all_blocks */
	while (block_idx < 12) {
c0008ae7:	80 7d f7 0b          	cmpb   $0xb,-0x9(%ebp)
c0008aeb:	76 d8                	jbe    c0008ac5 <inode_release+0x62>
/work/x86_os_my/fs/inode.c:194
		all_blocks[block_idx] = inode_to_del->i_sectors[block_idx];
		block_idx++;
	}
	/* b 如果一级间接块表存在，将其128个间接块读到all_blocks[12~]，并释放一级间接块表所占的扇区 */
	if (inode_to_del->i_sectors[12] != 0) {
c0008aed:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008af0:	8b 40 40             	mov    0x40(%eax),%eax
c0008af3:	85 c0                	test   %eax,%eax
c0008af5:	0f 84 8b 00 00 00    	je     c0008b86 <inode_release+0x123>
/work/x86_os_my/fs/inode.c:195
		ide_read(part->my_disk, inode_to_del->i_sectors[12], all_blocks + 12, 1);
c0008afb:	8d 85 b8 fd ff ff    	lea    -0x248(%ebp),%eax
c0008b01:	83 c0 30             	add    $0x30,%eax
c0008b04:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0008b07:	8b 4a 40             	mov    0x40(%edx),%ecx
c0008b0a:	8b 55 08             	mov    0x8(%ebp),%edx
c0008b0d:	8b 52 08             	mov    0x8(%edx),%edx
c0008b10:	6a 01                	push   $0x1
c0008b12:	50                   	push   %eax
c0008b13:	51                   	push   %ecx
c0008b14:	52                   	push   %edx
c0008b15:	e8 74 cf ff ff       	call   c0005a8e <ide_read>
c0008b1a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:196
		block_cnt = 140;
c0008b1d:	c6 45 f6 8c          	movb   $0x8c,-0xa(%ebp)
/work/x86_os_my/fs/inode.c:199

		/* 回收一级间接块表占用的扇区 */
		block_bitmap_idx = inode_to_del->i_sectors[12] - part->sb->data_start_lba;
c0008b21:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008b24:	8b 50 40             	mov    0x40(%eax),%edx
c0008b27:	8b 45 08             	mov    0x8(%ebp),%eax
c0008b2a:	8b 40 1c             	mov    0x1c(%eax),%eax
c0008b2d:	8b 40 28             	mov    0x28(%eax),%eax
c0008b30:	29 c2                	sub    %eax,%edx
c0008b32:	89 d0                	mov    %edx,%eax
c0008b34:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/inode.c:200
		ASSERT(block_bitmap_idx > 0);
c0008b37:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0008b3b:	75 1c                	jne    c0008b59 <inode_release+0xf6>
/work/x86_os_my/fs/inode.c:200 (discriminator 1)
c0008b3d:	68 ef ce 00 c0       	push   $0xc000ceef
c0008b42:	68 30 cf 00 c0       	push   $0xc000cf30
c0008b47:	68 c8 00 00 00       	push   $0xc8
c0008b4c:	68 8c ce 00 c0       	push   $0xc000ce8c
c0008b51:	e8 cb 97 ff ff       	call   c0002321 <panic_spin>
c0008b56:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:201
		bitmap_set(&part->block_bitmap, block_bitmap_idx, 0);
c0008b59:	8b 45 08             	mov    0x8(%ebp),%eax
c0008b5c:	83 c0 20             	add    $0x20,%eax
c0008b5f:	83 ec 04             	sub    $0x4,%esp
c0008b62:	6a 00                	push   $0x0
c0008b64:	ff 75 ec             	pushl  -0x14(%ebp)
c0008b67:	50                   	push   %eax
c0008b68:	e8 22 9a ff ff       	call   c000258f <bitmap_set>
c0008b6d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:202
		bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c0008b70:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c0008b75:	83 ec 04             	sub    $0x4,%esp
c0008b78:	6a 01                	push   $0x1
c0008b7a:	ff 75 ec             	pushl  -0x14(%ebp)
c0008b7d:	50                   	push   %eax
c0008b7e:	e8 ca 02 00 00       	call   c0008e4d <bitmap_sync>
c0008b83:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:205
	}
	/* c inode所有的块地址已经收集到all_blocks中，下面逐个回收 */
	block_idx = 0;
c0008b86:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/fs/inode.c:206
	while (block_idx < block_cnt) {
c0008b8a:	e9 8a 00 00 00       	jmp    c0008c19 <inode_release+0x1b6>
/work/x86_os_my/fs/inode.c:207
		if (all_blocks[block_idx] != 0) {
c0008b8f:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0008b93:	8b 84 85 b8 fd ff ff 	mov    -0x248(%ebp,%eax,4),%eax
c0008b9a:	85 c0                	test   %eax,%eax
c0008b9c:	74 71                	je     c0008c0f <inode_release+0x1ac>
/work/x86_os_my/fs/inode.c:208
			block_bitmap_idx = 0;
c0008b9e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/inode.c:209
			block_bitmap_idx = all_blocks[block_idx] - part->sb->data_start_lba;
c0008ba5:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0008ba9:	8b 94 85 b8 fd ff ff 	mov    -0x248(%ebp,%eax,4),%edx
c0008bb0:	8b 45 08             	mov    0x8(%ebp),%eax
c0008bb3:	8b 40 1c             	mov    0x1c(%eax),%eax
c0008bb6:	8b 40 28             	mov    0x28(%eax),%eax
c0008bb9:	29 c2                	sub    %eax,%edx
c0008bbb:	89 d0                	mov    %edx,%eax
c0008bbd:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/inode.c:210
			ASSERT(block_bitmap_idx > 0);
c0008bc0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0008bc4:	75 1c                	jne    c0008be2 <inode_release+0x17f>
/work/x86_os_my/fs/inode.c:210 (discriminator 1)
c0008bc6:	68 ef ce 00 c0       	push   $0xc000ceef
c0008bcb:	68 30 cf 00 c0       	push   $0xc000cf30
c0008bd0:	68 d2 00 00 00       	push   $0xd2
c0008bd5:	68 8c ce 00 c0       	push   $0xc000ce8c
c0008bda:	e8 42 97 ff ff       	call   c0002321 <panic_spin>
c0008bdf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:211
			bitmap_set(&part->block_bitmap, block_bitmap_idx, 0);
c0008be2:	8b 45 08             	mov    0x8(%ebp),%eax
c0008be5:	83 c0 20             	add    $0x20,%eax
c0008be8:	83 ec 04             	sub    $0x4,%esp
c0008beb:	6a 00                	push   $0x0
c0008bed:	ff 75 ec             	pushl  -0x14(%ebp)
c0008bf0:	50                   	push   %eax
c0008bf1:	e8 99 99 ff ff       	call   c000258f <bitmap_set>
c0008bf6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:212
			bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c0008bf9:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c0008bfe:	83 ec 04             	sub    $0x4,%esp
c0008c01:	6a 01                	push   $0x1
c0008c03:	ff 75 ec             	pushl  -0x14(%ebp)
c0008c06:	50                   	push   %eax
c0008c07:	e8 41 02 00 00       	call   c0008e4d <bitmap_sync>
c0008c0c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:214
		}
		block_idx++;
c0008c0f:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0008c13:	83 c0 01             	add    $0x1,%eax
c0008c16:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/inode.c:206
		bitmap_set(&part->block_bitmap, block_bitmap_idx, 0);
		bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
	}
	/* c inode所有的块地址已经收集到all_blocks中，下面逐个回收 */
	block_idx = 0;
	while (block_idx < block_cnt) {
c0008c19:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0008c1d:	3a 45 f6             	cmp    -0xa(%ebp),%al
c0008c20:	0f 82 69 ff ff ff    	jb     c0008b8f <inode_release+0x12c>
/work/x86_os_my/fs/inode.c:218
		}
		block_idx++;
	}

	/*2 回收该inode所占用的inode */
	bitmap_set(&part->inode_bitmap, inode_no, 0);
c0008c26:	8b 45 08             	mov    0x8(%ebp),%eax
c0008c29:	83 c0 28             	add    $0x28,%eax
c0008c2c:	83 ec 04             	sub    $0x4,%esp
c0008c2f:	6a 00                	push   $0x0
c0008c31:	ff 75 0c             	pushl  0xc(%ebp)
c0008c34:	50                   	push   %eax
c0008c35:	e8 55 99 ff ff       	call   c000258f <bitmap_set>
c0008c3a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:219
	bitmap_sync(cur_part, inode_no, INODE_BITMAP);
c0008c3d:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c0008c42:	83 ec 04             	sub    $0x4,%esp
c0008c45:	6a 00                	push   $0x0
c0008c47:	ff 75 0c             	pushl  0xc(%ebp)
c0008c4a:	50                   	push   %eax
c0008c4b:	e8 fd 01 00 00       	call   c0008e4d <bitmap_sync>
c0008c50:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:225

	/******     以下inode_delete是调试用的    ******
	 * 此函数会在 inode_table 中将此inode清0，
	 * 但实际上只需要在inode位图中清零相应位即可。
	 * 硬盘上的数据更不需要清0，可以直接覆盖 */
	void* io_buf = sys_malloc(1024);
c0008c53:	83 ec 0c             	sub    $0xc,%esp
c0008c56:	68 00 04 00 00       	push   $0x400
c0008c5b:	e8 6c a0 ff ff       	call   c0002ccc <sys_malloc>
c0008c60:	83 c4 10             	add    $0x10,%esp
c0008c63:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/inode.c:226
	inode_delete(part, inode_no, io_buf);
c0008c66:	83 ec 04             	sub    $0x4,%esp
c0008c69:	ff 75 e8             	pushl  -0x18(%ebp)
c0008c6c:	ff 75 0c             	pushl  0xc(%ebp)
c0008c6f:	ff 75 08             	pushl  0x8(%ebp)
c0008c72:	e8 da fc ff ff       	call   c0008951 <inode_delete>
c0008c77:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:227
	sys_free(io_buf);
c0008c7a:	83 ec 0c             	sub    $0xc,%esp
c0008c7d:	ff 75 e8             	pushl  -0x18(%ebp)
c0008c80:	e8 74 a6 ff ff       	call   c00032f9 <sys_free>
c0008c85:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:230
	/***********************************************/

	inode_close(inode_to_del);
c0008c88:	83 ec 0c             	sub    $0xc,%esp
c0008c8b:	ff 75 f0             	pushl  -0x10(%ebp)
c0008c8e:	e8 42 fc ff ff       	call   c00088d5 <inode_close>
c0008c93:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:231
}
c0008c96:	90                   	nop
c0008c97:	8b 7d fc             	mov    -0x4(%ebp),%edi
c0008c9a:	c9                   	leave  
c0008c9b:	c3                   	ret    

c0008c9c <inode_init>:
inode_init():
/work/x86_os_my/fs/inode.c:234

/* 初始化一个inode结构，inode号是inode_no */
void inode_init(uint32_t inode_no, struct inode* new_inode) {
c0008c9c:	55                   	push   %ebp
c0008c9d:	89 e5                	mov    %esp,%ebp
c0008c9f:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/fs/inode.c:235
	new_inode->i_no = inode_no;
c0008ca2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0008ca5:	8b 55 08             	mov    0x8(%ebp),%edx
c0008ca8:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/fs/inode.c:236
	new_inode->i_size = 0;
c0008caa:	8b 45 0c             	mov    0xc(%ebp),%eax
c0008cad:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
/work/x86_os_my/fs/inode.c:237
	new_inode->i_open_cnts = 0;
c0008cb4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0008cb7:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
/work/x86_os_my/fs/inode.c:238
	new_inode->write_deny = false;
c0008cbe:	8b 45 0c             	mov    0xc(%ebp),%eax
c0008cc1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
/work/x86_os_my/fs/inode.c:241

	/* 初始化块索引数组i_sector */
	uint8_t sec_idx = 0;
c0008cc8:	c6 45 ff 00          	movb   $0x0,-0x1(%ebp)
/work/x86_os_my/fs/inode.c:242
	while (sec_idx < 13) {
c0008ccc:	eb 1b                	jmp    c0008ce9 <inode_init+0x4d>
/work/x86_os_my/fs/inode.c:244
		/* i_sectors[12]为一级间接块地址 */
		new_inode->i_sectors[sec_idx] = 0;
c0008cce:	0f b6 55 ff          	movzbl -0x1(%ebp),%edx
c0008cd2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0008cd5:	83 c2 04             	add    $0x4,%edx
c0008cd8:	c7 04 90 00 00 00 00 	movl   $0x0,(%eax,%edx,4)
/work/x86_os_my/fs/inode.c:245
		sec_idx++;
c0008cdf:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
c0008ce3:	83 c0 01             	add    $0x1,%eax
c0008ce6:	88 45 ff             	mov    %al,-0x1(%ebp)
/work/x86_os_my/fs/inode.c:242
	new_inode->i_open_cnts = 0;
	new_inode->write_deny = false;

	/* 初始化块索引数组i_sector */
	uint8_t sec_idx = 0;
	while (sec_idx < 13) {
c0008ce9:	80 7d ff 0c          	cmpb   $0xc,-0x1(%ebp)
c0008ced:	76 df                	jbe    c0008cce <inode_init+0x32>
/work/x86_os_my/fs/inode.c:250
		sec_idx++;
	}
	/*为什么不提前分配inode管理的数据块（对我们来说是块=扇区）
	1.不知道文件大小，因此不知道分配多少个扇区合适
	2.文件创建后未必马上会写数据*/
}
c0008cef:	90                   	nop
c0008cf0:	c9                   	leave  
c0008cf1:	c3                   	ret    

c0008cf2 <get_free_slot_in_global>:
get_free_slot_in_global():
/work/x86_os_my/fs/file.c:19

/* 文件表 */
struct file file_table[MAX_FILE_OPEN];

/* 从文件表 file_table 中获取一个空闲位,成功返回下标,失败返回-1 */
int32_t get_free_slot_in_global(void) {
c0008cf2:	55                   	push   %ebp
c0008cf3:	89 e5                	mov    %esp,%ebp
c0008cf5:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/file.c:20
	uint32_t fd_idx = 3;
c0008cf8:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
/work/x86_os_my/fs/file.c:21
	while (fd_idx < MAX_FILE_OPEN) {
c0008cff:	eb 1b                	jmp    c0008d1c <get_free_slot_in_global+0x2a>
/work/x86_os_my/fs/file.c:22
		if (file_table[fd_idx].fd_inode == NULL) {
c0008d01:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0008d04:	89 d0                	mov    %edx,%eax
c0008d06:	01 c0                	add    %eax,%eax
c0008d08:	01 d0                	add    %edx,%eax
c0008d0a:	c1 e0 02             	shl    $0x2,%eax
c0008d0d:	05 c8 22 01 c0       	add    $0xc00122c8,%eax
c0008d12:	8b 00                	mov    (%eax),%eax
c0008d14:	85 c0                	test   %eax,%eax
c0008d16:	74 0c                	je     c0008d24 <get_free_slot_in_global+0x32>
/work/x86_os_my/fs/file.c:25
			break;
		}
		fd_idx++;
c0008d18:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/file.c:21
struct file file_table[MAX_FILE_OPEN];

/* 从文件表 file_table 中获取一个空闲位,成功返回下标,失败返回-1 */
int32_t get_free_slot_in_global(void) {
	uint32_t fd_idx = 3;
	while (fd_idx < MAX_FILE_OPEN) {
c0008d1c:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c0008d20:	76 df                	jbe    c0008d01 <get_free_slot_in_global+0xf>
c0008d22:	eb 01                	jmp    c0008d25 <get_free_slot_in_global+0x33>
/work/x86_os_my/fs/file.c:23
		if (file_table[fd_idx].fd_inode == NULL) {
			break;
c0008d24:	90                   	nop
/work/x86_os_my/fs/file.c:27
		}
		fd_idx++;
	}
	if (fd_idx == MAX_FILE_OPEN) {
c0008d25:	83 7d f4 20          	cmpl   $0x20,-0xc(%ebp)
c0008d29:	75 17                	jne    c0008d42 <get_free_slot_in_global+0x50>
/work/x86_os_my/fs/file.c:28
		printk("exceed max open files\n");
c0008d2b:	83 ec 0c             	sub    $0xc,%esp
c0008d2e:	68 40 cf 00 c0       	push   $0xc000cf40
c0008d33:	e8 cf d7 ff ff       	call   c0006507 <printk>
c0008d38:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:29
		return -1;
c0008d3b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0008d40:	eb 03                	jmp    c0008d45 <get_free_slot_in_global+0x53>
/work/x86_os_my/fs/file.c:31
	}
	return fd_idx;
c0008d42:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/file.c:32
}
c0008d45:	c9                   	leave  
c0008d46:	c3                   	ret    

c0008d47 <pcb_fd_install>:
pcb_fd_install():
/work/x86_os_my/fs/file.c:36

/* 将 file_table 的下标，安装到，线程PCB中文件描述符数组 fd_table
 * 成功返回 fd_table 的下标（即文件描述符）,失败返回-1 */
int32_t pcb_fd_install(int32_t globa_fd_idx) {
c0008d47:	55                   	push   %ebp
c0008d48:	89 e5                	mov    %esp,%ebp
c0008d4a:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/file.c:37
	struct task_struct* cur = running_thread();
c0008d4d:	e8 58 ae ff ff       	call   c0003baa <running_thread>
c0008d52:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:38
	uint8_t local_fd_idx = 3;	// 跨过stdin,stdout,stderr
c0008d55:	c6 45 f7 03          	movb   $0x3,-0x9(%ebp)
/work/x86_os_my/fs/file.c:39
	while (local_fd_idx < MAX_FILES_OPEN_PER_PROC) {
c0008d59:	eb 30                	jmp    c0008d8b <pcb_fd_install+0x44>
/work/x86_os_my/fs/file.c:40
		if (cur->fd_table[local_fd_idx] == -1) {	// -1表示free_slot,可用
c0008d5b:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c0008d5f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008d62:	83 c2 08             	add    $0x8,%edx
c0008d65:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
c0008d69:	83 f8 ff             	cmp    $0xffffffff,%eax
c0008d6c:	75 13                	jne    c0008d81 <pcb_fd_install+0x3a>
/work/x86_os_my/fs/file.c:41
			cur->fd_table[local_fd_idx] = globa_fd_idx;
c0008d6e:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c0008d72:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008d75:	8d 4a 08             	lea    0x8(%edx),%ecx
c0008d78:	8b 55 08             	mov    0x8(%ebp),%edx
c0008d7b:	89 54 88 04          	mov    %edx,0x4(%eax,%ecx,4)
/work/x86_os_my/fs/file.c:42
			break;
c0008d7f:	eb 10                	jmp    c0008d91 <pcb_fd_install+0x4a>
/work/x86_os_my/fs/file.c:44
		}
		local_fd_idx++;
c0008d81:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0008d85:	83 c0 01             	add    $0x1,%eax
c0008d88:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/file.c:39
/* 将 file_table 的下标，安装到，线程PCB中文件描述符数组 fd_table
 * 成功返回 fd_table 的下标（即文件描述符）,失败返回-1 */
int32_t pcb_fd_install(int32_t globa_fd_idx) {
	struct task_struct* cur = running_thread();
	uint8_t local_fd_idx = 3;	// 跨过stdin,stdout,stderr
	while (local_fd_idx < MAX_FILES_OPEN_PER_PROC) {
c0008d8b:	80 7d f7 07          	cmpb   $0x7,-0x9(%ebp)
c0008d8f:	76 ca                	jbe    c0008d5b <pcb_fd_install+0x14>
/work/x86_os_my/fs/file.c:46
			cur->fd_table[local_fd_idx] = globa_fd_idx;
			break;
		}
		local_fd_idx++;
	}
	if (local_fd_idx == MAX_FILES_OPEN_PER_PROC) {
c0008d91:	80 7d f7 08          	cmpb   $0x8,-0x9(%ebp)
c0008d95:	75 17                	jne    c0008dae <pcb_fd_install+0x67>
/work/x86_os_my/fs/file.c:47
		printk("exceed max open files_per_proc\n");
c0008d97:	83 ec 0c             	sub    $0xc,%esp
c0008d9a:	68 58 cf 00 c0       	push   $0xc000cf58
c0008d9f:	e8 63 d7 ff ff       	call   c0006507 <printk>
c0008da4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:48
		return -1;
c0008da7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0008dac:	eb 04                	jmp    c0008db2 <pcb_fd_install+0x6b>
/work/x86_os_my/fs/file.c:50
	}
	return local_fd_idx;
c0008dae:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
/work/x86_os_my/fs/file.c:51
}
c0008db2:	c9                   	leave  
c0008db3:	c3                   	ret    

c0008db4 <inode_bitmap_alloc>:
inode_bitmap_alloc():
/work/x86_os_my/fs/file.c:54

/* 从分区的inode位图中，分配一个i结点，返回"inode号" */
int32_t inode_bitmap_alloc(struct partition* part) {
c0008db4:	55                   	push   %ebp
c0008db5:	89 e5                	mov    %esp,%ebp
c0008db7:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/file.c:55
	int32_t bit_idx = bitmap_scan(&part->inode_bitmap, 1);
c0008dba:	8b 45 08             	mov    0x8(%ebp),%eax
c0008dbd:	83 c0 28             	add    $0x28,%eax
c0008dc0:	83 ec 08             	sub    $0x8,%esp
c0008dc3:	6a 01                	push   $0x1
c0008dc5:	50                   	push   %eax
c0008dc6:	e8 8f 96 ff ff       	call   c000245a <bitmap_scan>
c0008dcb:	83 c4 10             	add    $0x10,%esp
c0008dce:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:56
	if (bit_idx == -1) {
c0008dd1:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c0008dd5:	75 07                	jne    c0008dde <inode_bitmap_alloc+0x2a>
/work/x86_os_my/fs/file.c:57
		return -1;
c0008dd7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0008ddc:	eb 1b                	jmp    c0008df9 <inode_bitmap_alloc+0x45>
/work/x86_os_my/fs/file.c:59
	}
	bitmap_set(&part->inode_bitmap, bit_idx, 1);
c0008dde:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0008de1:	8b 55 08             	mov    0x8(%ebp),%edx
c0008de4:	83 c2 28             	add    $0x28,%edx
c0008de7:	83 ec 04             	sub    $0x4,%esp
c0008dea:	6a 01                	push   $0x1
c0008dec:	50                   	push   %eax
c0008ded:	52                   	push   %edx
c0008dee:	e8 9c 97 ff ff       	call   c000258f <bitmap_set>
c0008df3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:60
	return bit_idx;
c0008df6:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/file.c:61
}
c0008df9:	c9                   	leave  
c0008dfa:	c3                   	ret    

c0008dfb <block_bitmap_alloc>:
block_bitmap_alloc():
/work/x86_os_my/fs/file.c:64
   
/* 从分区的block位图中，分配1个扇区，返回"扇区地址" 【操作的是 空闲块区域 】*/
int32_t block_bitmap_alloc(struct partition* part) {
c0008dfb:	55                   	push   %ebp
c0008dfc:	89 e5                	mov    %esp,%ebp
c0008dfe:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/file.c:65
	int32_t bit_idx = bitmap_scan(&part->block_bitmap, 1);
c0008e01:	8b 45 08             	mov    0x8(%ebp),%eax
c0008e04:	83 c0 20             	add    $0x20,%eax
c0008e07:	83 ec 08             	sub    $0x8,%esp
c0008e0a:	6a 01                	push   $0x1
c0008e0c:	50                   	push   %eax
c0008e0d:	e8 48 96 ff ff       	call   c000245a <bitmap_scan>
c0008e12:	83 c4 10             	add    $0x10,%esp
c0008e15:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:66
	if (bit_idx == -1) {
c0008e18:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c0008e1c:	75 07                	jne    c0008e25 <block_bitmap_alloc+0x2a>
/work/x86_os_my/fs/file.c:67
		return -1;
c0008e1e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0008e23:	eb 26                	jmp    c0008e4b <block_bitmap_alloc+0x50>
/work/x86_os_my/fs/file.c:69
	}
	bitmap_set(&part->block_bitmap, bit_idx, 1);
c0008e25:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0008e28:	8b 55 08             	mov    0x8(%ebp),%edx
c0008e2b:	83 c2 20             	add    $0x20,%edx
c0008e2e:	83 ec 04             	sub    $0x4,%esp
c0008e31:	6a 01                	push   $0x1
c0008e33:	50                   	push   %eax
c0008e34:	52                   	push   %edx
c0008e35:	e8 55 97 ff ff       	call   c000258f <bitmap_set>
c0008e3a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:71
	/* 和inode_bitmap_malloc不同,此处返回的不是位图索引,而是具体可用的扇区地址 */
	return (part->sb->data_start_lba + bit_idx);
c0008e3d:	8b 45 08             	mov    0x8(%ebp),%eax
c0008e40:	8b 40 1c             	mov    0x1c(%eax),%eax
c0008e43:	8b 50 28             	mov    0x28(%eax),%edx
c0008e46:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0008e49:	01 d0                	add    %edx,%eax
/work/x86_os_my/fs/file.c:72
} 
c0008e4b:	c9                   	leave  
c0008e4c:	c3                   	ret    

c0008e4d <bitmap_sync>:
bitmap_sync():
/work/x86_os_my/fs/file.c:76

/* 将内存中bitmap第bit_idx位所在的那个512字节，同步到硬盘中bitmap第bit_idx位所在的扇区 */
// 硬盘以扇区为读写单位
void bitmap_sync(struct partition* part, uint32_t bit_idx, uint8_t btmp_type) {
c0008e4d:	55                   	push   %ebp
c0008e4e:	89 e5                	mov    %esp,%ebp
c0008e50:	83 ec 28             	sub    $0x28,%esp
c0008e53:	8b 45 10             	mov    0x10(%ebp),%eax
c0008e56:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/fs/file.c:77
	uint32_t off_sec = bit_idx / 4096;			// dst(硬盘中): bit_idx 相对于位图起始lba，在后边的第几个扇区(512*8=4096)
c0008e59:	8b 45 0c             	mov    0xc(%ebp),%eax
c0008e5c:	c1 e8 0c             	shr    $0xc,%eax
c0008e5f:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/file.c:78
	uint32_t off_size = off_sec * BLOCK_SIZE;	// src(内存中): bit_idx 相对于位图数组bits，以512字节为单位，在后边的第几个单位处
c0008e62:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008e65:	c1 e0 09             	shl    $0x9,%eax
c0008e68:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/file.c:84
												// off_size是，第 bit_idx位所在位图中以 512 字节为单位的起始地址。BLOCK_SIZE=512
	uint32_t sec_lba;
	uint8_t* bitmap_off;

	/* 需要被同步到硬盘的位图只有inode_bitmap和block_bitmap */
	switch (btmp_type) {
c0008e6b:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0008e6f:	85 c0                	test   %eax,%eax
c0008e71:	74 07                	je     c0008e7a <bitmap_sync+0x2d>
c0008e73:	83 f8 01             	cmp    $0x1,%eax
c0008e76:	74 23                	je     c0008e9b <bitmap_sync+0x4e>
c0008e78:	eb 41                	jmp    c0008ebb <bitmap_sync+0x6e>
/work/x86_os_my/fs/file.c:86
		case INODE_BITMAP:
		sec_lba = part->sb->inode_bitmap_lba + off_sec;
c0008e7a:	8b 45 08             	mov    0x8(%ebp),%eax
c0008e7d:	8b 40 1c             	mov    0x1c(%eax),%eax
c0008e80:	8b 50 18             	mov    0x18(%eax),%edx
c0008e83:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008e86:	01 d0                	add    %edx,%eax
c0008e88:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:87
		bitmap_off = part->inode_bitmap.bits + off_size;
c0008e8b:	8b 45 08             	mov    0x8(%ebp),%eax
c0008e8e:	8b 50 2c             	mov    0x2c(%eax),%edx
c0008e91:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0008e94:	01 d0                	add    %edx,%eax
c0008e96:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:88
		break;
c0008e99:	eb 20                	jmp    c0008ebb <bitmap_sync+0x6e>
/work/x86_os_my/fs/file.c:91

		case BLOCK_BITMAP: 
		sec_lba = part->sb->block_bitmap_lba + off_sec;
c0008e9b:	8b 45 08             	mov    0x8(%ebp),%eax
c0008e9e:	8b 40 1c             	mov    0x1c(%eax),%eax
c0008ea1:	8b 50 10             	mov    0x10(%eax),%edx
c0008ea4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008ea7:	01 d0                	add    %edx,%eax
c0008ea9:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:92
		bitmap_off = part->block_bitmap.bits + off_size;
c0008eac:	8b 45 08             	mov    0x8(%ebp),%eax
c0008eaf:	8b 50 24             	mov    0x24(%eax),%edx
c0008eb2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0008eb5:	01 d0                	add    %edx,%eax
c0008eb7:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:93
		break;
c0008eba:	90                   	nop
/work/x86_os_my/fs/file.c:95
	}
	ide_write(part->my_disk, sec_lba, bitmap_off, 1);	// 将bitmap_off中1个扇区的数据写入硬盘sec_lba处
c0008ebb:	8b 45 08             	mov    0x8(%ebp),%eax
c0008ebe:	8b 40 08             	mov    0x8(%eax),%eax
c0008ec1:	6a 01                	push   $0x1
c0008ec3:	ff 75 f0             	pushl  -0x10(%ebp)
c0008ec6:	ff 75 f4             	pushl  -0xc(%ebp)
c0008ec9:	50                   	push   %eax
c0008eca:	e8 33 cd ff ff       	call   c0005c02 <ide_write>
c0008ecf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:96
}
c0008ed2:	90                   	nop
c0008ed3:	c9                   	leave  
c0008ed4:	c3                   	ret    

c0008ed5 <file_create>:
file_create():
/work/x86_os_my/fs/file.c:114
此新增加的文件对应的目录项，需要写入该目录的 inode->i_sectors[]中的某个扇区，
原有扇区可能已满，所以有可能要申请新扇区来存储目录项。【sync_dir_entry】
4. 若其中某步操作失败，需要回滚之前已成功的操作。
5. inode_bitmap、 block_bitmap、新文件的 inode 及文件所在目录的 inode，这些位于内存中已经被改变的数据要同步到硬盘。
*/
int32_t file_create(struct dir* parent_dir, char* filename, uint8_t flag) {
c0008ed5:	55                   	push   %ebp
c0008ed6:	89 e5                	mov    %esp,%ebp
c0008ed8:	83 ec 48             	sub    $0x48,%esp
c0008edb:	8b 45 10             	mov    0x10(%ebp),%eax
c0008ede:	88 45 c4             	mov    %al,-0x3c(%ebp)
/work/x86_os_my/fs/file.c:116
	/* 后续操作的公共缓冲区 */
	void* io_buf = sys_malloc(1024);	//跨扇区的数据，会操作2个扇区
c0008ee1:	83 ec 0c             	sub    $0xc,%esp
c0008ee4:	68 00 04 00 00       	push   $0x400
c0008ee9:	e8 de 9d ff ff       	call   c0002ccc <sys_malloc>
c0008eee:	83 c4 10             	add    $0x10,%esp
c0008ef1:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/file.c:117
	if (io_buf == NULL) {
c0008ef4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0008ef8:	75 1a                	jne    c0008f14 <file_create+0x3f>
/work/x86_os_my/fs/file.c:118
		printk("in file_creat: sys_malloc for io_buf failed\n");
c0008efa:	83 ec 0c             	sub    $0xc,%esp
c0008efd:	68 78 cf 00 c0       	push   $0xc000cf78
c0008f02:	e8 00 d6 ff ff       	call   c0006507 <printk>
c0008f07:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:119
		return -1;
c0008f0a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0008f0f:	e9 81 02 00 00       	jmp    c0009195 <file_create+0x2c0>
/work/x86_os_my/fs/file.c:122
	}

	uint8_t rollback_step = 0;	// 用于操作失败时回滚各资源状态
c0008f14:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/fs/file.c:125

	/* 1.为新文件从分区inode位图中，分配inode号 */
	int32_t inode_no = inode_bitmap_alloc(cur_part); 
c0008f18:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c0008f1d:	83 ec 0c             	sub    $0xc,%esp
c0008f20:	50                   	push   %eax
c0008f21:	e8 8e fe ff ff       	call   c0008db4 <inode_bitmap_alloc>
c0008f26:	83 c4 10             	add    $0x10,%esp
c0008f29:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/file.c:126
	if (inode_no == -1) {
c0008f2c:	83 7d e8 ff          	cmpl   $0xffffffff,-0x18(%ebp)
c0008f30:	75 1a                	jne    c0008f4c <file_create+0x77>
/work/x86_os_my/fs/file.c:127
		printk("in file_creat: allocate inode failed\n");
c0008f32:	83 ec 0c             	sub    $0xc,%esp
c0008f35:	68 a8 cf 00 c0       	push   $0xc000cfa8
c0008f3a:	e8 c8 d5 ff ff       	call   c0006507 <printk>
c0008f3f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:128
		return -1;
c0008f42:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0008f47:	e9 49 02 00 00       	jmp    c0009195 <file_create+0x2c0>
/work/x86_os_my/fs/file.c:133
	}

	/* 2.堆中分配inode节点，不可以是栈中的局部变量！
	 * 因为 file_table 中的 fd_inode 指针要指向它. */
	struct inode* new_file_inode = (struct inode*)sys_malloc(sizeof(struct inode)); 
c0008f4c:	83 ec 0c             	sub    $0xc,%esp
c0008f4f:	6a 4c                	push   $0x4c
c0008f51:	e8 76 9d ff ff       	call   c0002ccc <sys_malloc>
c0008f56:	83 c4 10             	add    $0x10,%esp
c0008f59:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/file.c:134
	if (new_file_inode == NULL) {
c0008f5c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0008f60:	75 19                	jne    c0008f7b <file_create+0xa6>
/work/x86_os_my/fs/file.c:135
		printk("file_create: sys_malloc for inode failded\n");
c0008f62:	83 ec 0c             	sub    $0xc,%esp
c0008f65:	68 d0 cf 00 c0       	push   $0xc000cfd0
c0008f6a:	e8 98 d5 ff ff       	call   c0006507 <printk>
c0008f6f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:136
		rollback_step = 1;
c0008f72:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)
/work/x86_os_my/fs/file.c:137
		goto rollback;
c0008f76:	e9 a7 01 00 00       	jmp    c0009122 <file_create+0x24d>
/work/x86_os_my/fs/file.c:139
	}
	inode_init(inode_no, new_file_inode);	    // 初始化inode
c0008f7b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0008f7e:	83 ec 08             	sub    $0x8,%esp
c0008f81:	ff 75 e4             	pushl  -0x1c(%ebp)
c0008f84:	50                   	push   %eax
c0008f85:	e8 12 fd ff ff       	call   c0008c9c <inode_init>
c0008f8a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:142

	/* 3.申请一个file_table数组的下标 */
	int fd_idx = get_free_slot_in_global();
c0008f8d:	e8 60 fd ff ff       	call   c0008cf2 <get_free_slot_in_global>
c0008f92:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:143
	if (fd_idx == -1) {
c0008f95:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c0008f99:	75 19                	jne    c0008fb4 <file_create+0xdf>
/work/x86_os_my/fs/file.c:144
		printk("exceed max open files\n");
c0008f9b:	83 ec 0c             	sub    $0xc,%esp
c0008f9e:	68 40 cf 00 c0       	push   $0xc000cf40
c0008fa3:	e8 5f d5 ff ff       	call   c0006507 <printk>
c0008fa8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:145
		rollback_step = 2;
c0008fab:	c6 45 f7 02          	movb   $0x2,-0x9(%ebp)
/work/x86_os_my/fs/file.c:146
		goto rollback;
c0008faf:	e9 6e 01 00 00       	jmp    c0009122 <file_create+0x24d>
/work/x86_os_my/fs/file.c:150
	}

	// 4.填充文件表中的文件结构
	file_table[fd_idx].fd_inode = new_file_inode;
c0008fb4:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0008fb7:	89 d0                	mov    %edx,%eax
c0008fb9:	01 c0                	add    %eax,%eax
c0008fbb:	01 d0                	add    %edx,%eax
c0008fbd:	c1 e0 02             	shl    $0x2,%eax
c0008fc0:	8d 90 c8 22 01 c0    	lea    -0x3ffedd38(%eax),%edx
c0008fc6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0008fc9:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/file.c:151
	file_table[fd_idx].fd_pos = 0;
c0008fcb:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0008fce:	89 d0                	mov    %edx,%eax
c0008fd0:	01 c0                	add    %eax,%eax
c0008fd2:	01 d0                	add    %edx,%eax
c0008fd4:	c1 e0 02             	shl    $0x2,%eax
c0008fd7:	05 c0 22 01 c0       	add    $0xc00122c0,%eax
c0008fdc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/fs/file.c:152
	file_table[fd_idx].fd_flag = flag;
c0008fe2:	0f b6 4d c4          	movzbl -0x3c(%ebp),%ecx
c0008fe6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0008fe9:	89 d0                	mov    %edx,%eax
c0008feb:	01 c0                	add    %eax,%eax
c0008fed:	01 d0                	add    %edx,%eax
c0008fef:	c1 e0 02             	shl    $0x2,%eax
c0008ff2:	05 c4 22 01 c0       	add    $0xc00122c4,%eax
c0008ff7:	89 08                	mov    %ecx,(%eax)
/work/x86_os_my/fs/file.c:153
	file_table[fd_idx].fd_inode->write_deny = false;
c0008ff9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0008ffc:	89 d0                	mov    %edx,%eax
c0008ffe:	01 c0                	add    %eax,%eax
c0009000:	01 d0                	add    %edx,%eax
c0009002:	c1 e0 02             	shl    $0x2,%eax
c0009005:	05 c8 22 01 c0       	add    $0xc00122c8,%eax
c000900a:	8b 00                	mov    (%eax),%eax
c000900c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
/work/x86_os_my/fs/file.c:156

	struct dir_entry new_dir_entry;
	memset(&new_dir_entry, 0, sizeof(struct dir_entry));
c0009013:	83 ec 04             	sub    $0x4,%esp
c0009016:	6a 18                	push   $0x18
c0009018:	6a 00                	push   $0x0
c000901a:	8d 45 cc             	lea    -0x34(%ebp),%eax
c000901d:	50                   	push   %eax
c000901e:	e8 a0 a7 ff ff       	call   c00037c3 <memset>
c0009023:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:159

	// create_dir_entry在内存中初始化目录项p_de，只是内存操作不会返回失败
	create_dir_entry(filename, inode_no, FT_REGULAR, &new_dir_entry);
c0009026:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0009029:	8d 55 cc             	lea    -0x34(%ebp),%edx
c000902c:	52                   	push   %edx
c000902d:	6a 01                	push   $0x1
c000902f:	50                   	push   %eax
c0009030:	ff 75 0c             	pushl  0xc(%ebp)
c0009033:	e8 73 10 00 00       	call   c000a0ab <create_dir_entry>
c0009038:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:164


	/* 同步内存数据到硬盘 */
	/* a 在目录parent_dir下安装目录项new_dir_entry, 写入硬盘后返回true, 否则false【dir.c】 */
	if (!sync_dir_entry(parent_dir, &new_dir_entry, io_buf)) {
c000903b:	83 ec 04             	sub    $0x4,%esp
c000903e:	ff 75 ec             	pushl  -0x14(%ebp)
c0009041:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0009044:	50                   	push   %eax
c0009045:	ff 75 08             	pushl  0x8(%ebp)
c0009048:	e8 cf 10 00 00       	call   c000a11c <sync_dir_entry>
c000904d:	83 c4 10             	add    $0x10,%esp
c0009050:	85 c0                	test   %eax,%eax
c0009052:	75 19                	jne    c000906d <file_create+0x198>
/work/x86_os_my/fs/file.c:165
		printk("sync dir_entry to disk failed\n");
c0009054:	83 ec 0c             	sub    $0xc,%esp
c0009057:	68 fc cf 00 c0       	push   $0xc000cffc
c000905c:	e8 a6 d4 ff ff       	call   c0006507 <printk>
c0009061:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:166
		rollback_step = 3;
c0009064:	c6 45 f7 03          	movb   $0x3,-0x9(%ebp)
/work/x86_os_my/fs/file.c:167
		goto rollback;
c0009068:	e9 b5 00 00 00       	jmp    c0009122 <file_create+0x24d>
/work/x86_os_my/fs/file.c:171
	}

	/* b sync_dir_entry 会改变父目录 inode 中的信息，因此，将父目录inode的内容同步到硬盘【inode.c】 */
	memset(io_buf, 0, 1024);
c000906d:	83 ec 04             	sub    $0x4,%esp
c0009070:	68 00 04 00 00       	push   $0x400
c0009075:	6a 00                	push   $0x0
c0009077:	ff 75 ec             	pushl  -0x14(%ebp)
c000907a:	e8 44 a7 ff ff       	call   c00037c3 <memset>
c000907f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:172
	inode_sync(cur_part, parent_dir->inode, io_buf);
c0009082:	8b 45 08             	mov    0x8(%ebp),%eax
c0009085:	8b 10                	mov    (%eax),%edx
c0009087:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c000908c:	83 ec 04             	sub    $0x4,%esp
c000908f:	ff 75 ec             	pushl  -0x14(%ebp)
c0009092:	52                   	push   %edx
c0009093:	50                   	push   %eax
c0009094:	e8 cf f5 ff ff       	call   c0008668 <inode_sync>
c0009099:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:175

	/* c 将新创建文件的inode内容同步到硬盘 */
	memset(io_buf, 0, 1024);
c000909c:	83 ec 04             	sub    $0x4,%esp
c000909f:	68 00 04 00 00       	push   $0x400
c00090a4:	6a 00                	push   $0x0
c00090a6:	ff 75 ec             	pushl  -0x14(%ebp)
c00090a9:	e8 15 a7 ff ff       	call   c00037c3 <memset>
c00090ae:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:176
	inode_sync(cur_part, new_file_inode, io_buf);
c00090b1:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c00090b6:	83 ec 04             	sub    $0x4,%esp
c00090b9:	ff 75 ec             	pushl  -0x14(%ebp)
c00090bc:	ff 75 e4             	pushl  -0x1c(%ebp)
c00090bf:	50                   	push   %eax
c00090c0:	e8 a3 f5 ff ff       	call   c0008668 <inode_sync>
c00090c5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:179

	/* d 将inode_bitmap位图同步到硬盘【file.c】 */
	bitmap_sync(cur_part, inode_no, INODE_BITMAP);
c00090c8:	8b 55 e8             	mov    -0x18(%ebp),%edx
c00090cb:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c00090d0:	83 ec 04             	sub    $0x4,%esp
c00090d3:	6a 00                	push   $0x0
c00090d5:	52                   	push   %edx
c00090d6:	50                   	push   %eax
c00090d7:	e8 71 fd ff ff       	call   c0008e4d <bitmap_sync>
c00090dc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:182

	/* e 将创建的文件i结点添加到open_inodes链表 */
	list_push(&cur_part->open_inodes, &new_file_inode->inode_tag);
c00090df:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00090e2:	8d 50 44             	lea    0x44(%eax),%edx
c00090e5:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c00090ea:	83 c0 30             	add    $0x30,%eax
c00090ed:	83 ec 08             	sub    $0x8,%esp
c00090f0:	52                   	push   %edx
c00090f1:	50                   	push   %eax
c00090f2:	e8 38 b2 ff ff       	call   c000432f <list_push>
c00090f7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:183
	new_file_inode->i_open_cnts = 1;
c00090fa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00090fd:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/fs/file.c:186


	sys_free(io_buf);
c0009104:	83 ec 0c             	sub    $0xc,%esp
c0009107:	ff 75 ec             	pushl  -0x14(%ebp)
c000910a:	e8 ea a1 ff ff       	call   c00032f9 <sys_free>
c000910f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:187
	return pcb_fd_install(fd_idx);	// 将 file_table 的下标，安装到，线程PCB中文件描述符数组 fd_table【file.c】
c0009112:	83 ec 0c             	sub    $0xc,%esp
c0009115:	ff 75 f0             	pushl  -0x10(%ebp)
c0009118:	e8 2a fc ff ff       	call   c0008d47 <pcb_fd_install>
c000911d:	83 c4 10             	add    $0x10,%esp
c0009120:	eb 73                	jmp    c0009195 <file_create+0x2c0>
/work/x86_os_my/fs/file.c:191


rollback:
	switch (rollback_step) {
c0009122:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0009126:	83 f8 02             	cmp    $0x2,%eax
c0009129:	74 2d                	je     c0009158 <file_create+0x283>
c000912b:	83 f8 03             	cmp    $0x3,%eax
c000912e:	74 07                	je     c0009137 <file_create+0x262>
c0009130:	83 f8 01             	cmp    $0x1,%eax
c0009133:	74 31                	je     c0009166 <file_create+0x291>
c0009135:	eb 4b                	jmp    c0009182 <file_create+0x2ad>
/work/x86_os_my/fs/file.c:194
		case 3:
		/* file_table 相应位清空 */
		memset(&file_table[fd_idx], 0, sizeof(struct file)); 
c0009137:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000913a:	89 d0                	mov    %edx,%eax
c000913c:	01 c0                	add    %eax,%eax
c000913e:	01 d0                	add    %edx,%eax
c0009140:	c1 e0 02             	shl    $0x2,%eax
c0009143:	05 c0 22 01 c0       	add    $0xc00122c0,%eax
c0009148:	83 ec 04             	sub    $0x4,%esp
c000914b:	6a 0c                	push   $0xc
c000914d:	6a 00                	push   $0x0
c000914f:	50                   	push   %eax
c0009150:	e8 6e a6 ff ff       	call   c00037c3 <memset>
c0009155:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:196
		case 2:
		sys_free(new_file_inode);
c0009158:	83 ec 0c             	sub    $0xc,%esp
c000915b:	ff 75 e4             	pushl  -0x1c(%ebp)
c000915e:	e8 96 a1 ff ff       	call   c00032f9 <sys_free>
c0009163:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:199
		case 1:
		/* inode位图 恢复 */
		bitmap_set(&cur_part->inode_bitmap, inode_no, 0);
c0009166:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0009169:	8b 15 b0 22 01 c0    	mov    0xc00122b0,%edx
c000916f:	83 c2 28             	add    $0x28,%edx
c0009172:	83 ec 04             	sub    $0x4,%esp
c0009175:	6a 00                	push   $0x0
c0009177:	50                   	push   %eax
c0009178:	52                   	push   %edx
c0009179:	e8 11 94 ff ff       	call   c000258f <bitmap_set>
c000917e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:200
		break;
c0009181:	90                   	nop
/work/x86_os_my/fs/file.c:202
	}
	sys_free(io_buf);
c0009182:	83 ec 0c             	sub    $0xc,%esp
c0009185:	ff 75 ec             	pushl  -0x14(%ebp)
c0009188:	e8 6c a1 ff ff       	call   c00032f9 <sys_free>
c000918d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:203
	return -1;
c0009190:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
/work/x86_os_my/fs/file.c:204 (discriminator 1)
}
c0009195:	c9                   	leave  
c0009196:	c3                   	ret    

c0009197 <file_open>:
file_open():
/work/x86_os_my/fs/file.c:207

/* 打开编号为inode_no的inode对应的文件,若成功则返回文件描述符,否则返回-1 */
int32_t file_open(uint32_t inode_no, uint8_t flag) {
c0009197:	55                   	push   %ebp
c0009198:	89 e5                	mov    %esp,%ebp
c000919a:	83 ec 28             	sub    $0x28,%esp
c000919d:	8b 45 0c             	mov    0xc(%ebp),%eax
c00091a0:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/fs/file.c:208
	int fd_idx = get_free_slot_in_global();
c00091a3:	e8 4a fb ff ff       	call   c0008cf2 <get_free_slot_in_global>
c00091a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:209
	if (fd_idx == -1) {
c00091ab:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c00091af:	75 1a                	jne    c00091cb <file_open+0x34>
/work/x86_os_my/fs/file.c:210
		printk("exceed max open files\n");
c00091b1:	83 ec 0c             	sub    $0xc,%esp
c00091b4:	68 40 cf 00 c0       	push   $0xc000cf40
c00091b9:	e8 49 d3 ff ff       	call   c0006507 <printk>
c00091be:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:211
		return -1;
c00091c1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00091c6:	e9 e3 00 00 00       	jmp    c00092ae <file_open+0x117>
/work/x86_os_my/fs/file.c:213
	}
	file_table[fd_idx].fd_inode = inode_open(cur_part, inode_no);
c00091cb:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c00091d0:	83 ec 08             	sub    $0x8,%esp
c00091d3:	ff 75 08             	pushl  0x8(%ebp)
c00091d6:	50                   	push   %eax
c00091d7:	e8 b3 f5 ff ff       	call   c000878f <inode_open>
c00091dc:	83 c4 10             	add    $0x10,%esp
c00091df:	89 c1                	mov    %eax,%ecx
c00091e1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c00091e4:	89 d0                	mov    %edx,%eax
c00091e6:	01 c0                	add    %eax,%eax
c00091e8:	01 d0                	add    %edx,%eax
c00091ea:	c1 e0 02             	shl    $0x2,%eax
c00091ed:	05 c8 22 01 c0       	add    $0xc00122c8,%eax
c00091f2:	89 08                	mov    %ecx,(%eax)
/work/x86_os_my/fs/file.c:214
	file_table[fd_idx].fd_pos = 0;		// 每次打开文件,要将fd_pos还原为0,即让文件内的指针指向开头
c00091f4:	8b 55 f4             	mov    -0xc(%ebp),%edx
c00091f7:	89 d0                	mov    %edx,%eax
c00091f9:	01 c0                	add    %eax,%eax
c00091fb:	01 d0                	add    %edx,%eax
c00091fd:	c1 e0 02             	shl    $0x2,%eax
c0009200:	05 c0 22 01 c0       	add    $0xc00122c0,%eax
c0009205:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/fs/file.c:215
	file_table[fd_idx].fd_flag = flag;
c000920b:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
c000920f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0009212:	89 d0                	mov    %edx,%eax
c0009214:	01 c0                	add    %eax,%eax
c0009216:	01 d0                	add    %edx,%eax
c0009218:	c1 e0 02             	shl    $0x2,%eax
c000921b:	05 c4 22 01 c0       	add    $0xc00122c4,%eax
c0009220:	89 08                	mov    %ecx,(%eax)
/work/x86_os_my/fs/file.c:216
	bool* write_deny = &file_table[fd_idx].fd_inode->write_deny;
c0009222:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0009225:	89 d0                	mov    %edx,%eax
c0009227:	01 c0                	add    %eax,%eax
c0009229:	01 d0                	add    %edx,%eax
c000922b:	c1 e0 02             	shl    $0x2,%eax
c000922e:	05 c8 22 01 c0       	add    $0xc00122c8,%eax
c0009233:	8b 00                	mov    (%eax),%eax
c0009235:	83 c0 0c             	add    $0xc,%eax
c0009238:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:218

	if (flag & O_WRONLY || flag & O_RDWR) {	// 要写文件,需要判断是否有其它进程正写此文件。创建文件、读文件不考虑write_deny。
c000923b:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c000923f:	83 e0 01             	and    $0x1,%eax
c0009242:	85 c0                	test   %eax,%eax
c0009244:	75 0b                	jne    c0009251 <file_open+0xba>
/work/x86_os_my/fs/file.c:218 (discriminator 1)
c0009246:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c000924a:	83 e0 02             	and    $0x2,%eax
c000924d:	85 c0                	test   %eax,%eax
c000924f:	74 4f                	je     c00092a0 <file_open+0x109>
/work/x86_os_my/fs/file.c:220
		/* 以下进入临界区前先关中断 */
		enum intr_status old_status = intr_disable();
c0009251:	e8 ea 86 ff ff       	call   c0001940 <intr_disable>
c0009256:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/file.c:221
		if (!(*write_deny)) {	// 若当前没有其它进程写该文件,将其占用.
c0009259:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000925c:	8b 00                	mov    (%eax),%eax
c000925e:	85 c0                	test   %eax,%eax
c0009260:	75 19                	jne    c000927b <file_open+0xe4>
/work/x86_os_my/fs/file.c:222
			*write_deny = true;
c0009262:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0009265:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
/work/x86_os_my/fs/file.c:223
			intr_set_status(old_status);
c000926b:	83 ec 0c             	sub    $0xc,%esp
c000926e:	ff 75 ec             	pushl  -0x14(%ebp)
c0009271:	e8 f3 86 ff ff       	call   c0001969 <intr_set_status>
c0009276:	83 c4 10             	add    $0x10,%esp
c0009279:	eb 25                	jmp    c00092a0 <file_open+0x109>
/work/x86_os_my/fs/file.c:225
		} else {
			intr_set_status(old_status);
c000927b:	83 ec 0c             	sub    $0xc,%esp
c000927e:	ff 75 ec             	pushl  -0x14(%ebp)
c0009281:	e8 e3 86 ff ff       	call   c0001969 <intr_set_status>
c0009286:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:226
			printk("file can`t be write now, try again later\n");
c0009289:	83 ec 0c             	sub    $0xc,%esp
c000928c:	68 1c d0 00 c0       	push   $0xc000d01c
c0009291:	e8 71 d2 ff ff       	call   c0006507 <printk>
c0009296:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:227
			return -1;
c0009299:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000929e:	eb 0e                	jmp    c00092ae <file_open+0x117>
/work/x86_os_my/fs/file.c:230
		}
	}
	return pcb_fd_install(fd_idx);
c00092a0:	83 ec 0c             	sub    $0xc,%esp
c00092a3:	ff 75 f4             	pushl  -0xc(%ebp)
c00092a6:	e8 9c fa ff ff       	call   c0008d47 <pcb_fd_install>
c00092ab:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:231
}
c00092ae:	c9                   	leave  
c00092af:	c3                   	ret    

c00092b0 <file_close>:
file_close():
/work/x86_os_my/fs/file.c:234

/* 关闭文件 */
int32_t file_close(struct file* file) {
c00092b0:	55                   	push   %ebp
c00092b1:	89 e5                	mov    %esp,%ebp
c00092b3:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/fs/file.c:235
	if (file == NULL) {
c00092b6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00092ba:	75 07                	jne    c00092c3 <file_close+0x13>
/work/x86_os_my/fs/file.c:236
		return -1;
c00092bc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00092c1:	eb 2e                	jmp    c00092f1 <file_close+0x41>
/work/x86_os_my/fs/file.c:238
	}
	file->fd_inode->write_deny = false;
c00092c3:	8b 45 08             	mov    0x8(%ebp),%eax
c00092c6:	8b 40 08             	mov    0x8(%eax),%eax
c00092c9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
/work/x86_os_my/fs/file.c:239
	inode_close(file->fd_inode);
c00092d0:	8b 45 08             	mov    0x8(%ebp),%eax
c00092d3:	8b 40 08             	mov    0x8(%eax),%eax
c00092d6:	83 ec 0c             	sub    $0xc,%esp
c00092d9:	50                   	push   %eax
c00092da:	e8 f6 f5 ff ff       	call   c00088d5 <inode_close>
c00092df:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:240
	file->fd_inode = NULL;   // 使文件结构可用
c00092e2:	8b 45 08             	mov    0x8(%ebp),%eax
c00092e5:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
/work/x86_os_my/fs/file.c:241
	return 0;
c00092ec:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/file.c:242
}
c00092f1:	c9                   	leave  
c00092f2:	c3                   	ret    

c00092f3 <file_write>:
file_write():
/work/x86_os_my/fs/file.c:245

/* 把buf中的count个字节写入file,成功则返回写入的字节数,失败则返回-1 */
int32_t file_write(struct file* file, const void* buf, uint32_t count) {
c00092f3:	55                   	push   %ebp
c00092f4:	89 e5                	mov    %esp,%ebp
c00092f6:	83 ec 58             	sub    $0x58,%esp
/work/x86_os_my/fs/file.c:246
	if ((file->fd_inode->i_size + count) > (BLOCK_SIZE * 140))	{	// 文件目前最大只支持512B*140块=71680字节【12直接块+128间接块】
c00092f9:	8b 45 08             	mov    0x8(%ebp),%eax
c00092fc:	8b 40 08             	mov    0x8(%eax),%eax
c00092ff:	8b 50 04             	mov    0x4(%eax),%edx
c0009302:	8b 45 10             	mov    0x10(%ebp),%eax
c0009305:	01 d0                	add    %edx,%eax
c0009307:	3d 00 18 01 00       	cmp    $0x11800,%eax
c000930c:	76 1a                	jbe    c0009328 <file_write+0x35>
/work/x86_os_my/fs/file.c:247
		printk("exceed max file_size 71680 bytes, write file failed\n");
c000930e:	83 ec 0c             	sub    $0xc,%esp
c0009311:	68 48 d0 00 c0       	push   $0xc000d048
c0009316:	e8 ec d1 ff ff       	call   c0006507 <printk>
c000931b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:248
		return -1;
c000931e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009323:	e9 5d 07 00 00       	jmp    c0009a85 <file_write+0x792>
/work/x86_os_my/fs/file.c:250
	}
	uint8_t* io_buf = sys_malloc(BLOCK_SIZE);
c0009328:	83 ec 0c             	sub    $0xc,%esp
c000932b:	68 00 02 00 00       	push   $0x200
c0009330:	e8 97 99 ff ff       	call   c0002ccc <sys_malloc>
c0009335:	83 c4 10             	add    $0x10,%esp
c0009338:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/file.c:251
	if (io_buf == NULL) {
c000933b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c000933f:	75 1a                	jne    c000935b <file_write+0x68>
/work/x86_os_my/fs/file.c:252
		printk("file_write: sys_malloc for io_buf failed\n");
c0009341:	83 ec 0c             	sub    $0xc,%esp
c0009344:	68 80 d0 00 c0       	push   $0xc000d080
c0009349:	e8 b9 d1 ff ff       	call   c0006507 <printk>
c000934e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:253
		return -1;
c0009351:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009356:	e9 2a 07 00 00       	jmp    c0009a85 <file_write+0x792>
/work/x86_os_my/fs/file.c:255
	}
	uint32_t* all_blocks = (uint32_t*)sys_malloc(BLOCK_SIZE + 48);	  // 用来记录文件所有的块地址【560/4=160】
c000935b:	83 ec 0c             	sub    $0xc,%esp
c000935e:	68 30 02 00 00       	push   $0x230
c0009363:	e8 64 99 ff ff       	call   c0002ccc <sys_malloc>
c0009368:	83 c4 10             	add    $0x10,%esp
c000936b:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/file.c:256
	if (all_blocks == NULL) {
c000936e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0009372:	75 1a                	jne    c000938e <file_write+0x9b>
/work/x86_os_my/fs/file.c:257
		printk("file_write: sys_malloc for all_blocks failed\n");
c0009374:	83 ec 0c             	sub    $0xc,%esp
c0009377:	68 ac d0 00 c0       	push   $0xc000d0ac
c000937c:	e8 86 d1 ff ff       	call   c0006507 <printk>
c0009381:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:258
		return -1;
c0009384:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009389:	e9 f7 06 00 00       	jmp    c0009a85 <file_write+0x792>
/work/x86_os_my/fs/file.c:261
	}

	int32_t block_lba = -1;			// 块地址
c000938e:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
/work/x86_os_my/fs/file.c:262
	uint32_t block_bitmap_idx = 0;	// block_bitmap中的索引,做为参数传给bitmap_sync
c0009395:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
/work/x86_os_my/fs/file.c:267
	int32_t indirect_block_table;	// 一级间接表地址
	uint32_t block_idx;				// 块索引

	/* 判断文件是否是第一次写，如果是，先为其分配一个块 */
	if (file->fd_inode->i_sectors[0] == 0) {
c000939c:	8b 45 08             	mov    0x8(%ebp),%eax
c000939f:	8b 40 08             	mov    0x8(%eax),%eax
c00093a2:	8b 40 10             	mov    0x10(%eax),%eax
c00093a5:	85 c0                	test   %eax,%eax
c00093a7:	0f 85 8d 00 00 00    	jne    c000943a <file_write+0x147>
/work/x86_os_my/fs/file.c:268
		block_lba = block_bitmap_alloc(cur_part);
c00093ad:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c00093b2:	83 ec 0c             	sub    $0xc,%esp
c00093b5:	50                   	push   %eax
c00093b6:	e8 40 fa ff ff       	call   c0008dfb <block_bitmap_alloc>
c00093bb:	83 c4 10             	add    $0x10,%esp
c00093be:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/file.c:269
		if (block_lba == -1) {
c00093c1:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
c00093c5:	75 1a                	jne    c00093e1 <file_write+0xee>
/work/x86_os_my/fs/file.c:270
			printk("file_write: block_bitmap_alloc failed\n");
c00093c7:	83 ec 0c             	sub    $0xc,%esp
c00093ca:	68 dc d0 00 c0       	push   $0xc000d0dc
c00093cf:	e8 33 d1 ff ff       	call   c0006507 <printk>
c00093d4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:271
			return -1;
c00093d7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00093dc:	e9 a4 06 00 00       	jmp    c0009a85 <file_write+0x792>
/work/x86_os_my/fs/file.c:273
		}
		file->fd_inode->i_sectors[0] = block_lba;
c00093e1:	8b 45 08             	mov    0x8(%ebp),%eax
c00093e4:	8b 40 08             	mov    0x8(%eax),%eax
c00093e7:	8b 55 d8             	mov    -0x28(%ebp),%edx
c00093ea:	89 50 10             	mov    %edx,0x10(%eax)
/work/x86_os_my/fs/file.c:276

		/* 每分配一个块就将位图同步到硬盘 */
		block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
c00093ed:	8b 55 d8             	mov    -0x28(%ebp),%edx
c00093f0:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c00093f5:	8b 40 1c             	mov    0x1c(%eax),%eax
c00093f8:	8b 40 28             	mov    0x28(%eax),%eax
c00093fb:	29 c2                	sub    %eax,%edx
c00093fd:	89 d0                	mov    %edx,%eax
c00093ff:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/fs/file.c:277
		ASSERT(block_bitmap_idx != 0);
c0009402:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0009406:	75 1c                	jne    c0009424 <file_write+0x131>
/work/x86_os_my/fs/file.c:277 (discriminator 1)
c0009408:	68 03 d1 00 c0       	push   $0xc000d103
c000940d:	68 48 d3 00 c0       	push   $0xc000d348
c0009412:	68 15 01 00 00       	push   $0x115
c0009417:	68 19 d1 00 c0       	push   $0xc000d119
c000941c:	e8 00 8f ff ff       	call   c0002321 <panic_spin>
c0009421:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:278
		bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c0009424:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c0009429:	83 ec 04             	sub    $0x4,%esp
c000942c:	6a 01                	push   $0x1
c000942e:	ff 75 d4             	pushl  -0x2c(%ebp)
c0009431:	50                   	push   %eax
c0009432:	e8 16 fa ff ff       	call   c0008e4d <bitmap_sync>
c0009437:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:282
	}

	/* 写入count个字节前，该文件已占用的块数 */
	uint32_t file_has_used_blocks = file->fd_inode->i_size / BLOCK_SIZE + 1;
c000943a:	8b 45 08             	mov    0x8(%ebp),%eax
c000943d:	8b 40 08             	mov    0x8(%eax),%eax
c0009440:	8b 40 04             	mov    0x4(%eax),%eax
c0009443:	c1 e8 09             	shr    $0x9,%eax
c0009446:	83 c0 01             	add    $0x1,%eax
c0009449:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/fs/file.c:284
	/* 写入count个字节后，该文件将占用的块数 */
	uint32_t file_will_use_blocks = (file->fd_inode->i_size + count) / BLOCK_SIZE + 1;
c000944c:	8b 45 08             	mov    0x8(%ebp),%eax
c000944f:	8b 40 08             	mov    0x8(%eax),%eax
c0009452:	8b 50 04             	mov    0x4(%eax),%edx
c0009455:	8b 45 10             	mov    0x10(%ebp),%eax
c0009458:	01 d0                	add    %edx,%eax
c000945a:	c1 e8 09             	shr    $0x9,%eax
c000945d:	83 c0 01             	add    $0x1,%eax
c0009460:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/fs/file.c:285
	ASSERT(file_will_use_blocks <= 140);
c0009463:	81 7d cc 8c 00 00 00 	cmpl   $0x8c,-0x34(%ebp)
c000946a:	76 1c                	jbe    c0009488 <file_write+0x195>
/work/x86_os_my/fs/file.c:285 (discriminator 1)
c000946c:	68 23 d1 00 c0       	push   $0xc000d123
c0009471:	68 48 d3 00 c0       	push   $0xc000d348
c0009476:	68 1d 01 00 00       	push   $0x11d
c000947b:	68 19 d1 00 c0       	push   $0xc000d119
c0009480:	e8 9c 8e ff ff       	call   c0002321 <panic_spin>
c0009485:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:287
	/* 通过此增量判断是否需要分配扇区，若增量为0，表示原扇区够用 */
	uint32_t add_blocks = file_will_use_blocks - file_has_used_blocks;
c0009488:	8b 45 cc             	mov    -0x34(%ebp),%eax
c000948b:	2b 45 d0             	sub    -0x30(%ebp),%eax
c000948e:	89 45 c8             	mov    %eax,-0x38(%ebp)
/work/x86_os_my/fs/file.c:294
	/* 将文件所有块地址收集到all_blocks，后面都统一在all_blocks中获取要写入的扇区地址
	 * 没有新增的数据块时，只更新 all_blocks
	 * 需要新增数据块时，除了 all_blocks 还要更新 file->fd_inode->i_sectors[x]
	 */
	/* 在同一数据块（扇区）内写入数据，不涉及到分配新扇区 */
	if (add_blocks == 0) {
c0009491:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0009495:	0f 85 8c 00 00 00    	jne    c0009527 <file_write+0x234>
/work/x86_os_my/fs/file.c:295
		if (file_has_used_blocks <= 12 ) {	// 文件数据量将在12块之内
c000949b:	83 7d d0 0c          	cmpl   $0xc,-0x30(%ebp)
c000949f:	77 2e                	ja     c00094cf <file_write+0x1dc>
/work/x86_os_my/fs/file.c:296
			block_idx = file_has_used_blocks - 1;	// 指向最后一个已占用的数据块（扇区）
c00094a1:	8b 45 d0             	mov    -0x30(%ebp),%eax
c00094a4:	83 e8 01             	sub    $0x1,%eax
c00094a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:297
			all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];
c00094aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00094ad:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c00094b4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c00094b7:	01 c2                	add    %eax,%edx
c00094b9:	8b 45 08             	mov    0x8(%ebp),%eax
c00094bc:	8b 40 08             	mov    0x8(%eax),%eax
c00094bf:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c00094c2:	83 c1 04             	add    $0x4,%ecx
c00094c5:	8b 04 88             	mov    (%eax,%ecx,4),%eax
c00094c8:	89 02                	mov    %eax,(%edx)
c00094ca:	e9 4e 04 00 00       	jmp    c000991d <file_write+0x62a>
/work/x86_os_my/fs/file.c:300
		} else {
			/* 未写入新数据之前已经占用了间接块,需要将间接块地址读进来 */
			ASSERT(file->fd_inode->i_sectors[12] != 0);	//一级间接表存在
c00094cf:	8b 45 08             	mov    0x8(%ebp),%eax
c00094d2:	8b 40 08             	mov    0x8(%eax),%eax
c00094d5:	8b 40 40             	mov    0x40(%eax),%eax
c00094d8:	85 c0                	test   %eax,%eax
c00094da:	75 1c                	jne    c00094f8 <file_write+0x205>
/work/x86_os_my/fs/file.c:300 (discriminator 1)
c00094dc:	68 40 d1 00 c0       	push   $0xc000d140
c00094e1:	68 48 d3 00 c0       	push   $0xc000d348
c00094e6:	68 2c 01 00 00       	push   $0x12c
c00094eb:	68 19 d1 00 c0       	push   $0xc000d119
c00094f0:	e8 2c 8e ff ff       	call   c0002321 <panic_spin>
c00094f5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:301
			indirect_block_table = file->fd_inode->i_sectors[12];
c00094f8:	8b 45 08             	mov    0x8(%ebp),%eax
c00094fb:	8b 40 08             	mov    0x8(%eax),%eax
c00094fe:	8b 40 40             	mov    0x40(%eax),%eax
c0009501:	89 45 c4             	mov    %eax,-0x3c(%ebp)
/work/x86_os_my/fs/file.c:302
			ide_read(cur_part->my_disk, indirect_block_table, all_blocks + 12, 1);	//读出整个一级间接表512字节（128个间接块的地址）
c0009504:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009507:	8d 48 30             	lea    0x30(%eax),%ecx
c000950a:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c000950d:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c0009512:	8b 40 08             	mov    0x8(%eax),%eax
c0009515:	6a 01                	push   $0x1
c0009517:	51                   	push   %ecx
c0009518:	52                   	push   %edx
c0009519:	50                   	push   %eax
c000951a:	e8 6f c5 ff ff       	call   c0005a8e <ide_read>
c000951f:	83 c4 10             	add    $0x10,%esp
c0009522:	e9 f6 03 00 00       	jmp    c000991d <file_write+0x62a>
/work/x86_os_my/fs/file.c:308
		}
	} else {
	/* 若有增量，便涉及到分配新数据块（扇区），以及是否分配一级间接块表。
	 * 分三种情况处理： */
		/* 第一种情况：12个直接块够用*/
		if (file_will_use_blocks <= 12 ) {
c0009527:	83 7d cc 0c          	cmpl   $0xc,-0x34(%ebp)
c000952b:	0f 87 2b 01 00 00    	ja     c000965c <file_write+0x369>
/work/x86_os_my/fs/file.c:310
			/* 将有剩余空间的可继续用的数据块（扇区）地址写入all_blocks */
			block_idx = file_has_used_blocks - 1;	// 指向最后一个已占用的数据块（扇区）
c0009531:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0009534:	83 e8 01             	sub    $0x1,%eax
c0009537:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:311
			ASSERT(file->fd_inode->i_sectors[block_idx] != 0);
c000953a:	8b 45 08             	mov    0x8(%ebp),%eax
c000953d:	8b 40 08             	mov    0x8(%eax),%eax
c0009540:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0009543:	83 c2 04             	add    $0x4,%edx
c0009546:	8b 04 90             	mov    (%eax,%edx,4),%eax
c0009549:	85 c0                	test   %eax,%eax
c000954b:	75 1c                	jne    c0009569 <file_write+0x276>
/work/x86_os_my/fs/file.c:311 (discriminator 1)
c000954d:	68 64 d1 00 c0       	push   $0xc000d164
c0009552:	68 48 d3 00 c0       	push   $0xc000d348
c0009557:	68 37 01 00 00       	push   $0x137
c000955c:	68 19 d1 00 c0       	push   $0xc000d119
c0009561:	e8 bb 8d ff ff       	call   c0002321 <panic_spin>
c0009566:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:312
			all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];
c0009569:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000956c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0009573:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009576:	01 c2                	add    %eax,%edx
c0009578:	8b 45 08             	mov    0x8(%ebp),%eax
c000957b:	8b 40 08             	mov    0x8(%eax),%eax
c000957e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0009581:	83 c1 04             	add    $0x4,%ecx
c0009584:	8b 04 88             	mov    (%eax,%ecx,4),%eax
c0009587:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/file.c:315

			/* 将未来要用的新数据块（扇区）分配好后写入all_blocks */
			block_idx = file_has_used_blocks;		// 指向第一个要分配的新数据块（扇区）
c0009589:	8b 45 d0             	mov    -0x30(%ebp),%eax
c000958c:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:316
			while (block_idx < file_will_use_blocks) {
c000958f:	e9 b7 00 00 00       	jmp    c000964b <file_write+0x358>
/work/x86_os_my/fs/file.c:317
				block_lba = block_bitmap_alloc(cur_part);
c0009594:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c0009599:	83 ec 0c             	sub    $0xc,%esp
c000959c:	50                   	push   %eax
c000959d:	e8 59 f8 ff ff       	call   c0008dfb <block_bitmap_alloc>
c00095a2:	83 c4 10             	add    $0x10,%esp
c00095a5:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/file.c:318
				if (block_lba == -1) {
c00095a8:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
c00095ac:	75 1a                	jne    c00095c8 <file_write+0x2d5>
/work/x86_os_my/fs/file.c:319
					printk("file_write: block_bitmap_alloc for situation 1 failed\n");
c00095ae:	83 ec 0c             	sub    $0xc,%esp
c00095b1:	68 90 d1 00 c0       	push   $0xc000d190
c00095b6:	e8 4c cf ff ff       	call   c0006507 <printk>
c00095bb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:320
					return -1;
c00095be:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00095c3:	e9 bd 04 00 00       	jmp    c0009a85 <file_write+0x792>
/work/x86_os_my/fs/file.c:324
				}

				/* 写文件时，数据块未使用时肯定有 i_sectors[x]==0。因为文件删除时，会把i_sectors[x]里的数据块地址清0 */
				ASSERT(file->fd_inode->i_sectors[block_idx] == 0);	// 确保尚未分配扇区地址
c00095c8:	8b 45 08             	mov    0x8(%ebp),%eax
c00095cb:	8b 40 08             	mov    0x8(%eax),%eax
c00095ce:	8b 55 f4             	mov    -0xc(%ebp),%edx
c00095d1:	83 c2 04             	add    $0x4,%edx
c00095d4:	8b 04 90             	mov    (%eax,%edx,4),%eax
c00095d7:	85 c0                	test   %eax,%eax
c00095d9:	74 1c                	je     c00095f7 <file_write+0x304>
/work/x86_os_my/fs/file.c:324 (discriminator 1)
c00095db:	68 c8 d1 00 c0       	push   $0xc000d1c8
c00095e0:	68 48 d3 00 c0       	push   $0xc000d348
c00095e5:	68 44 01 00 00       	push   $0x144
c00095ea:	68 19 d1 00 c0       	push   $0xc000d119
c00095ef:	e8 2d 8d ff ff       	call   c0002321 <panic_spin>
c00095f4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:325
				file->fd_inode->i_sectors[block_idx] = all_blocks[block_idx] = block_lba;		//处理直接块
c00095f7:	8b 45 08             	mov    0x8(%ebp),%eax
c00095fa:	8b 50 08             	mov    0x8(%eax),%edx
c00095fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009600:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
c0009607:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000960a:	01 c8                	add    %ecx,%eax
c000960c:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c000960f:	89 08                	mov    %ecx,(%eax)
c0009611:	8b 00                	mov    (%eax),%eax
c0009613:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0009616:	83 c1 04             	add    $0x4,%ecx
c0009619:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
/work/x86_os_my/fs/file.c:328

				/* 每分配一个块就将位图同步到硬盘 */
				block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
c000961c:	8b 55 d8             	mov    -0x28(%ebp),%edx
c000961f:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c0009624:	8b 40 1c             	mov    0x1c(%eax),%eax
c0009627:	8b 40 28             	mov    0x28(%eax),%eax
c000962a:	29 c2                	sub    %eax,%edx
c000962c:	89 d0                	mov    %edx,%eax
c000962e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/fs/file.c:330
				// 这回怎么没有这句了：ASSERT(block_bitmap_idx != 0);
				bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c0009631:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c0009636:	83 ec 04             	sub    $0x4,%esp
c0009639:	6a 01                	push   $0x1
c000963b:	ff 75 d4             	pushl  -0x2c(%ebp)
c000963e:	50                   	push   %eax
c000963f:	e8 09 f8 ff ff       	call   c0008e4d <bitmap_sync>
c0009644:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:332

				block_idx++;   // 下一个分配的新扇区
c0009647:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/file.c:316
			ASSERT(file->fd_inode->i_sectors[block_idx] != 0);
			all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];

			/* 将未来要用的新数据块（扇区）分配好后写入all_blocks */
			block_idx = file_has_used_blocks;		// 指向第一个要分配的新数据块（扇区）
			while (block_idx < file_will_use_blocks) {
c000964b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000964e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c0009651:	0f 82 3d ff ff ff    	jb     c0009594 <file_write+0x2a1>
c0009657:	e9 c1 02 00 00       	jmp    c000991d <file_write+0x62a>
/work/x86_os_my/fs/file.c:334
				// 这回怎么没有这句了：ASSERT(block_bitmap_idx != 0);
				bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);

				block_idx++;   // 下一个分配的新扇区
			}
		} else if (file_has_used_blocks <= 12 && file_will_use_blocks > 12) {
c000965c:	83 7d d0 0c          	cmpl   $0xc,-0x30(%ebp)
c0009660:	0f 87 af 01 00 00    	ja     c0009815 <file_write+0x522>
/work/x86_os_my/fs/file.c:334 (discriminator 1)
c0009666:	83 7d cc 0c          	cmpl   $0xc,-0x34(%ebp)
c000966a:	0f 86 a5 01 00 00    	jbe    c0009815 <file_write+0x522>
/work/x86_os_my/fs/file.c:338
		/* 第二种情况：旧数据在12个直接块内，新数据将使用间接块【可能也使用一些直接块】 */

			/* 先将有剩余空间的可继续用的扇区地址收集到all_blocks */
			block_idx = file_has_used_blocks - 1;	// 指向最后一个已占用的数据块（扇区）
c0009670:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0009673:	83 e8 01             	sub    $0x1,%eax
c0009676:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:339
			all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];						//处理直接块
c0009679:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000967c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0009683:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009686:	01 c2                	add    %eax,%edx
c0009688:	8b 45 08             	mov    0x8(%ebp),%eax
c000968b:	8b 40 08             	mov    0x8(%eax),%eax
c000968e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0009691:	83 c1 04             	add    $0x4,%ecx
c0009694:	8b 04 88             	mov    (%eax,%ecx,4),%eax
c0009697:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/file.c:342

			/* 创建一级间接块表 */
			block_lba = block_bitmap_alloc(cur_part);
c0009699:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c000969e:	83 ec 0c             	sub    $0xc,%esp
c00096a1:	50                   	push   %eax
c00096a2:	e8 54 f7 ff ff       	call   c0008dfb <block_bitmap_alloc>
c00096a7:	83 c4 10             	add    $0x10,%esp
c00096aa:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/file.c:343
			if (block_lba == -1) {
c00096ad:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
c00096b1:	75 1a                	jne    c00096cd <file_write+0x3da>
/work/x86_os_my/fs/file.c:344
				printk("file_write: block_bitmap_alloc for situation 2 failed\n");
c00096b3:	83 ec 0c             	sub    $0xc,%esp
c00096b6:	68 f4 d1 00 c0       	push   $0xc000d1f4
c00096bb:	e8 47 ce ff ff       	call   c0006507 <printk>
c00096c0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:345
				return -1;
c00096c3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00096c8:	e9 b8 03 00 00       	jmp    c0009a85 <file_write+0x792>
/work/x86_os_my/fs/file.c:347
			}
			ASSERT(file->fd_inode->i_sectors[12] == 0);  // 一级间接块表未建立
c00096cd:	8b 45 08             	mov    0x8(%ebp),%eax
c00096d0:	8b 40 08             	mov    0x8(%eax),%eax
c00096d3:	8b 40 40             	mov    0x40(%eax),%eax
c00096d6:	85 c0                	test   %eax,%eax
c00096d8:	74 1c                	je     c00096f6 <file_write+0x403>
/work/x86_os_my/fs/file.c:347 (discriminator 1)
c00096da:	68 2c d2 00 c0       	push   $0xc000d22c
c00096df:	68 48 d3 00 c0       	push   $0xc000d348
c00096e4:	68 5b 01 00 00       	push   $0x15b
c00096e9:	68 19 d1 00 c0       	push   $0xc000d119
c00096ee:	e8 2e 8c ff ff       	call   c0002321 <panic_spin>
c00096f3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:348
			indirect_block_table = file->fd_inode->i_sectors[12] = block_lba;	// 一级间接块索引表建立了！
c00096f6:	8b 45 08             	mov    0x8(%ebp),%eax
c00096f9:	8b 40 08             	mov    0x8(%eax),%eax
c00096fc:	8b 55 d8             	mov    -0x28(%ebp),%edx
c00096ff:	89 50 40             	mov    %edx,0x40(%eax)
c0009702:	8b 40 40             	mov    0x40(%eax),%eax
c0009705:	89 45 c4             	mov    %eax,-0x3c(%ebp)
/work/x86_os_my/fs/file.c:351
			//这里怎么没有同步一级间接块表占用的数据块到硬盘？？不是：每分配一个块就将位图同步到硬盘 吗？

			block_idx = file_has_used_blocks;		// 指向第一个要分配的新数据块（扇区）
c0009708:	8b 45 d0             	mov    -0x30(%ebp),%eax
c000970b:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:352
			while (block_idx < file_will_use_blocks) {
c000970e:	e9 d3 00 00 00       	jmp    c00097e6 <file_write+0x4f3>
/work/x86_os_my/fs/file.c:353
				block_lba = block_bitmap_alloc(cur_part);
c0009713:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c0009718:	83 ec 0c             	sub    $0xc,%esp
c000971b:	50                   	push   %eax
c000971c:	e8 da f6 ff ff       	call   c0008dfb <block_bitmap_alloc>
c0009721:	83 c4 10             	add    $0x10,%esp
c0009724:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/file.c:354
				if (block_lba == -1) {
c0009727:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
c000972b:	75 1a                	jne    c0009747 <file_write+0x454>
/work/x86_os_my/fs/file.c:355
					printk("file_write: block_bitmap_alloc for situation 2 failed\n");
c000972d:	83 ec 0c             	sub    $0xc,%esp
c0009730:	68 f4 d1 00 c0       	push   $0xc000d1f4
c0009735:	e8 cd cd ff ff       	call   c0006507 <printk>
c000973a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:356
					return -1;
c000973d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009742:	e9 3e 03 00 00       	jmp    c0009a85 <file_write+0x792>
/work/x86_os_my/fs/file.c:359
				}

				if (block_idx < 12) {	// 新创建的数据块仍然是直接块！
c0009747:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
c000974b:	77 56                	ja     c00097a3 <file_write+0x4b0>
/work/x86_os_my/fs/file.c:360
					ASSERT(file->fd_inode->i_sectors[block_idx] == 0);
c000974d:	8b 45 08             	mov    0x8(%ebp),%eax
c0009750:	8b 40 08             	mov    0x8(%eax),%eax
c0009753:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0009756:	83 c2 04             	add    $0x4,%edx
c0009759:	8b 04 90             	mov    (%eax,%edx,4),%eax
c000975c:	85 c0                	test   %eax,%eax
c000975e:	74 1c                	je     c000977c <file_write+0x489>
/work/x86_os_my/fs/file.c:360 (discriminator 1)
c0009760:	68 c8 d1 00 c0       	push   $0xc000d1c8
c0009765:	68 48 d3 00 c0       	push   $0xc000d348
c000976a:	68 68 01 00 00       	push   $0x168
c000976f:	68 19 d1 00 c0       	push   $0xc000d119
c0009774:	e8 a8 8b ff ff       	call   c0002321 <panic_spin>
c0009779:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:361
					file->fd_inode->i_sectors[block_idx] = all_blocks[block_idx] = block_lba;	//处理直接块
c000977c:	8b 45 08             	mov    0x8(%ebp),%eax
c000977f:	8b 50 08             	mov    0x8(%eax),%edx
c0009782:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009785:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
c000978c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000978f:	01 c8                	add    %ecx,%eax
c0009791:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0009794:	89 08                	mov    %ecx,(%eax)
c0009796:	8b 00                	mov    (%eax),%eax
c0009798:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c000979b:	83 c1 04             	add    $0x4,%ecx
c000979e:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
c00097a1:	eb 14                	jmp    c00097b7 <file_write+0x4c4>
/work/x86_os_my/fs/file.c:363
				} else {	// 新创建的数据块，是间接块。间接块只写入到all_block数组中,待全部分配完成后一次性同步到硬盘
					all_blocks[block_idx] = block_lba;											//处理间接块
c00097a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00097a6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c00097ad:	8b 45 dc             	mov    -0x24(%ebp),%eax
c00097b0:	01 c2                	add    %eax,%edx
c00097b2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c00097b5:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/file.c:367
				}

				/* 每分配一个块就将位图同步到硬盘 */
				block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
c00097b7:	8b 55 d8             	mov    -0x28(%ebp),%edx
c00097ba:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c00097bf:	8b 40 1c             	mov    0x1c(%eax),%eax
c00097c2:	8b 40 28             	mov    0x28(%eax),%eax
c00097c5:	29 c2                	sub    %eax,%edx
c00097c7:	89 d0                	mov    %edx,%eax
c00097c9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/fs/file.c:368
				bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c00097cc:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c00097d1:	83 ec 04             	sub    $0x4,%esp
c00097d4:	6a 01                	push   $0x1
c00097d6:	ff 75 d4             	pushl  -0x2c(%ebp)
c00097d9:	50                   	push   %eax
c00097da:	e8 6e f6 ff ff       	call   c0008e4d <bitmap_sync>
c00097df:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:370

				block_idx++;   // 下一个新扇区
c00097e2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/file.c:352
			ASSERT(file->fd_inode->i_sectors[12] == 0);  // 一级间接块表未建立
			indirect_block_table = file->fd_inode->i_sectors[12] = block_lba;	// 一级间接块索引表建立了！
			//这里怎么没有同步一级间接块表占用的数据块到硬盘？？不是：每分配一个块就将位图同步到硬盘 吗？

			block_idx = file_has_used_blocks;		// 指向第一个要分配的新数据块（扇区）
			while (block_idx < file_will_use_blocks) {
c00097e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00097e9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c00097ec:	0f 82 21 ff ff ff    	jb     c0009713 <file_write+0x420>
/work/x86_os_my/fs/file.c:372
				block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
				bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);

				block_idx++;   // 下一个新扇区
			}
			ide_write(cur_part->my_disk, indirect_block_table, all_blocks + 12, 1);	// 整个一级间接块表的内容，同步到硬盘
c00097f2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c00097f5:	8d 48 30             	lea    0x30(%eax),%ecx
c00097f8:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c00097fb:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c0009800:	8b 40 08             	mov    0x8(%eax),%eax
c0009803:	6a 01                	push   $0x1
c0009805:	51                   	push   %ecx
c0009806:	52                   	push   %edx
c0009807:	50                   	push   %eax
c0009808:	e8 f5 c3 ff ff       	call   c0005c02 <ide_write>
c000980d:	83 c4 10             	add    $0x10,%esp
c0009810:	e9 08 01 00 00       	jmp    c000991d <file_write+0x62a>
/work/x86_os_my/fs/file.c:373
		} else if (file_has_used_blocks > 12) {
c0009815:	83 7d d0 0c          	cmpl   $0xc,-0x30(%ebp)
c0009819:	0f 86 fe 00 00 00    	jbe    c000991d <file_write+0x62a>
/work/x86_os_my/fs/file.c:375
		/* 第三种情况：新数据使用间接块*/
			ASSERT(file->fd_inode->i_sectors[12] != 0);				// 一级间接块表已建立
c000981f:	8b 45 08             	mov    0x8(%ebp),%eax
c0009822:	8b 40 08             	mov    0x8(%eax),%eax
c0009825:	8b 40 40             	mov    0x40(%eax),%eax
c0009828:	85 c0                	test   %eax,%eax
c000982a:	75 1c                	jne    c0009848 <file_write+0x555>
/work/x86_os_my/fs/file.c:375 (discriminator 1)
c000982c:	68 40 d1 00 c0       	push   $0xc000d140
c0009831:	68 48 d3 00 c0       	push   $0xc000d348
c0009836:	68 77 01 00 00       	push   $0x177
c000983b:	68 19 d1 00 c0       	push   $0xc000d119
c0009840:	e8 dc 8a ff ff       	call   c0002321 <panic_spin>
c0009845:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:376
			indirect_block_table = file->fd_inode->i_sectors[12];	// 一级间接表地址
c0009848:	8b 45 08             	mov    0x8(%ebp),%eax
c000984b:	8b 40 08             	mov    0x8(%eax),%eax
c000984e:	8b 40 40             	mov    0x40(%eax),%eax
c0009851:	89 45 c4             	mov    %eax,-0x3c(%ebp)
/work/x86_os_my/fs/file.c:379

			/* 已使用的间接块也将被读入all_blocks，无须单独收录 */
			ide_read(cur_part->my_disk, indirect_block_table, all_blocks + 12, 1);	// 获取所有间接块地址
c0009854:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009857:	8d 48 30             	lea    0x30(%eax),%ecx
c000985a:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c000985d:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c0009862:	8b 40 08             	mov    0x8(%eax),%eax
c0009865:	6a 01                	push   $0x1
c0009867:	51                   	push   %ecx
c0009868:	52                   	push   %edx
c0009869:	50                   	push   %eax
c000986a:	e8 1f c2 ff ff       	call   c0005a8e <ide_read>
c000986f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:381

			block_idx = file_has_used_blocks;		// 指向第一个要分配的新数据块（扇区）
c0009872:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0009875:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:382
			while (block_idx < file_will_use_blocks) {
c0009878:	eb 79                	jmp    c00098f3 <file_write+0x600>
/work/x86_os_my/fs/file.c:383
				block_lba = block_bitmap_alloc(cur_part);
c000987a:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c000987f:	83 ec 0c             	sub    $0xc,%esp
c0009882:	50                   	push   %eax
c0009883:	e8 73 f5 ff ff       	call   c0008dfb <block_bitmap_alloc>
c0009888:	83 c4 10             	add    $0x10,%esp
c000988b:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/file.c:384
				if (block_lba == -1) {
c000988e:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
c0009892:	75 1a                	jne    c00098ae <file_write+0x5bb>
/work/x86_os_my/fs/file.c:385
					printk("file_write: block_bitmap_alloc for situation 3 failed\n");
c0009894:	83 ec 0c             	sub    $0xc,%esp
c0009897:	68 50 d2 00 c0       	push   $0xc000d250
c000989c:	e8 66 cc ff ff       	call   c0006507 <printk>
c00098a1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:386
					return -1;
c00098a4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00098a9:	e9 d7 01 00 00       	jmp    c0009a85 <file_write+0x792>
/work/x86_os_my/fs/file.c:388
				}
				all_blocks[block_idx++] = block_lba;											//处理间接块
c00098ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00098b1:	8d 50 01             	lea    0x1(%eax),%edx
c00098b4:	89 55 f4             	mov    %edx,-0xc(%ebp)
c00098b7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c00098be:	8b 45 dc             	mov    -0x24(%ebp),%eax
c00098c1:	01 c2                	add    %eax,%edx
c00098c3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c00098c6:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/file.c:391

				/* 每分配一个块就将位图同步到硬盘 */
				block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
c00098c8:	8b 55 d8             	mov    -0x28(%ebp),%edx
c00098cb:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c00098d0:	8b 40 1c             	mov    0x1c(%eax),%eax
c00098d3:	8b 40 28             	mov    0x28(%eax),%eax
c00098d6:	29 c2                	sub    %eax,%edx
c00098d8:	89 d0                	mov    %edx,%eax
c00098da:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/fs/file.c:392
				bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c00098dd:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c00098e2:	83 ec 04             	sub    $0x4,%esp
c00098e5:	6a 01                	push   $0x1
c00098e7:	ff 75 d4             	pushl  -0x2c(%ebp)
c00098ea:	50                   	push   %eax
c00098eb:	e8 5d f5 ff ff       	call   c0008e4d <bitmap_sync>
c00098f0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:382

			/* 已使用的间接块也将被读入all_blocks，无须单独收录 */
			ide_read(cur_part->my_disk, indirect_block_table, all_blocks + 12, 1);	// 获取所有间接块地址

			block_idx = file_has_used_blocks;		// 指向第一个要分配的新数据块（扇区）
			while (block_idx < file_will_use_blocks) {
c00098f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00098f6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c00098f9:	0f 82 7b ff ff ff    	jb     c000987a <file_write+0x587>
/work/x86_os_my/fs/file.c:394

				/* 每分配一个块就将位图同步到硬盘 */
				block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
				bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
			}
			ide_write(cur_part->my_disk, indirect_block_table, all_blocks + 12, 1);	// 整个一级间接块表的内容，同步到硬盘
c00098ff:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009902:	8d 48 30             	lea    0x30(%eax),%ecx
c0009905:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0009908:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c000990d:	8b 40 08             	mov    0x8(%eax),%eax
c0009910:	6a 01                	push   $0x1
c0009912:	51                   	push   %ecx
c0009913:	52                   	push   %edx
c0009914:	50                   	push   %eax
c0009915:	e8 e8 c2 ff ff       	call   c0005c02 <ide_write>
c000991a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:400
		}
	}//块地址已经收集到all_blocks中


	/* 写数据 */
	const uint8_t* src = buf;		// 用src指向buf中待写入的数据
c000991d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0009920:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:401
	uint32_t bytes_written = 0;		// 已写入数据的大小
c0009923:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/file.c:407
	uint32_t sec_idx;				// 扇区索引
	uint32_t sec_lba;				// 扇区地址
	uint32_t sec_off_bytes;			// 扇区内字节偏移量
	uint32_t sec_left_bytes;		// 扇区内剩余字节量
	uint32_t chunk_size;			// 每次写入硬盘的数据块大小
	uint32_t size_left = count;		// 未写入数据的大小
c000992a:	8b 45 10             	mov    0x10(%ebp),%eax
c000992d:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/file.c:408
	bool first_write_block = true;	// 数据块（扇区）含有剩余空间的标识
c0009930:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
/work/x86_os_my/fs/file.c:409
	file->fd_pos = file->fd_inode->i_size - 1;	// 文件读写指针fd_pos为"文件大小-1"
c0009937:	8b 45 08             	mov    0x8(%ebp),%eax
c000993a:	8b 40 08             	mov    0x8(%eax),%eax
c000993d:	8b 40 04             	mov    0x4(%eax),%eax
c0009940:	8d 50 ff             	lea    -0x1(%eax),%edx
c0009943:	8b 45 08             	mov    0x8(%ebp),%eax
c0009946:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/fs/file.c:410
	while (bytes_written < count) {	// 直到写完所有数据
c0009948:	e9 f2 00 00 00       	jmp    c0009a3f <file_write+0x74c>
/work/x86_os_my/fs/file.c:411
		memset(io_buf, 0, BLOCK_SIZE);
c000994d:	83 ec 04             	sub    $0x4,%esp
c0009950:	68 00 02 00 00       	push   $0x200
c0009955:	6a 00                	push   $0x0
c0009957:	ff 75 e0             	pushl  -0x20(%ebp)
c000995a:	e8 64 9e ff ff       	call   c00037c3 <memset>
c000995f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:412
		sec_idx = file->fd_inode->i_size / BLOCK_SIZE;	// 文件已占用的最后一个数据块
c0009962:	8b 45 08             	mov    0x8(%ebp),%eax
c0009965:	8b 40 08             	mov    0x8(%eax),%eax
c0009968:	8b 40 04             	mov    0x4(%eax),%eax
c000996b:	c1 e8 09             	shr    $0x9,%eax
c000996e:	89 45 c0             	mov    %eax,-0x40(%ebp)
/work/x86_os_my/fs/file.c:413
		sec_lba = all_blocks[sec_idx];
c0009971:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0009974:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000997b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000997e:	01 d0                	add    %edx,%eax
c0009980:	8b 00                	mov    (%eax),%eax
c0009982:	89 45 bc             	mov    %eax,-0x44(%ebp)
/work/x86_os_my/fs/file.c:414
		sec_off_bytes = file->fd_inode->i_size % BLOCK_SIZE;
c0009985:	8b 45 08             	mov    0x8(%ebp),%eax
c0009988:	8b 40 08             	mov    0x8(%eax),%eax
c000998b:	8b 40 04             	mov    0x4(%eax),%eax
c000998e:	25 ff 01 00 00       	and    $0x1ff,%eax
c0009993:	89 45 b8             	mov    %eax,-0x48(%ebp)
/work/x86_os_my/fs/file.c:415
		sec_left_bytes = BLOCK_SIZE - sec_off_bytes;
c0009996:	b8 00 02 00 00       	mov    $0x200,%eax
c000999b:	2b 45 b8             	sub    -0x48(%ebp),%eax
c000999e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
/work/x86_os_my/fs/file.c:418

		/* 判断此次写入硬盘的数据大小 */
		chunk_size = size_left < sec_left_bytes ? size_left : sec_left_bytes;
c00099a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00099a4:	39 45 b4             	cmp    %eax,-0x4c(%ebp)
c00099a7:	0f 46 45 b4          	cmovbe -0x4c(%ebp),%eax
c00099ab:	89 45 b0             	mov    %eax,-0x50(%ebp)
/work/x86_os_my/fs/file.c:419
		if (first_write_block) {
c00099ae:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c00099b2:	74 20                	je     c00099d4 <file_write+0x6e1>
/work/x86_os_my/fs/file.c:420
			ide_read(cur_part->my_disk, sec_lba, io_buf, 1);	//先读出
c00099b4:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c00099b9:	8b 40 08             	mov    0x8(%eax),%eax
c00099bc:	6a 01                	push   $0x1
c00099be:	ff 75 e0             	pushl  -0x20(%ebp)
c00099c1:	ff 75 bc             	pushl  -0x44(%ebp)
c00099c4:	50                   	push   %eax
c00099c5:	e8 c4 c0 ff ff       	call   c0005a8e <ide_read>
c00099ca:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:421
			first_write_block = false;
c00099cd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
/work/x86_os_my/fs/file.c:423
		}
		memcpy(io_buf + sec_off_bytes, src, chunk_size);		//再写入
c00099d4:	8b 55 e0             	mov    -0x20(%ebp),%edx
c00099d7:	8b 45 b8             	mov    -0x48(%ebp),%eax
c00099da:	01 d0                	add    %edx,%eax
c00099dc:	83 ec 04             	sub    $0x4,%esp
c00099df:	ff 75 b0             	pushl  -0x50(%ebp)
c00099e2:	ff 75 f0             	pushl  -0x10(%ebp)
c00099e5:	50                   	push   %eax
c00099e6:	e8 2a 9e ff ff       	call   c0003815 <memcpy>
c00099eb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:424
		ide_write(cur_part->my_disk, sec_lba, io_buf, 1);
c00099ee:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c00099f3:	8b 40 08             	mov    0x8(%eax),%eax
c00099f6:	6a 01                	push   $0x1
c00099f8:	ff 75 e0             	pushl  -0x20(%ebp)
c00099fb:	ff 75 bc             	pushl  -0x44(%ebp)
c00099fe:	50                   	push   %eax
c00099ff:	e8 fe c1 ff ff       	call   c0005c02 <ide_write>
c0009a04:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:427
		//printk("file write at lba 0x%x\n", sec_lba);

		src += chunk_size;
c0009a07:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0009a0a:	01 45 f0             	add    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:428
		file->fd_inode->i_size += chunk_size;	// 文件大小
c0009a0d:	8b 45 08             	mov    0x8(%ebp),%eax
c0009a10:	8b 40 08             	mov    0x8(%eax),%eax
c0009a13:	8b 55 08             	mov    0x8(%ebp),%edx
c0009a16:	8b 52 08             	mov    0x8(%edx),%edx
c0009a19:	8b 4a 04             	mov    0x4(%edx),%ecx
c0009a1c:	8b 55 b0             	mov    -0x50(%ebp),%edx
c0009a1f:	01 ca                	add    %ecx,%edx
c0009a21:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/file.c:429
		file->fd_pos += chunk_size;				// 文件指针位置
c0009a24:	8b 45 08             	mov    0x8(%ebp),%eax
c0009a27:	8b 10                	mov    (%eax),%edx
c0009a29:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0009a2c:	01 c2                	add    %eax,%edx
c0009a2e:	8b 45 08             	mov    0x8(%ebp),%eax
c0009a31:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/fs/file.c:430
		bytes_written += chunk_size;
c0009a33:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0009a36:	01 45 ec             	add    %eax,-0x14(%ebp)
/work/x86_os_my/fs/file.c:431
		size_left -= chunk_size;
c0009a39:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0009a3c:	29 45 e8             	sub    %eax,-0x18(%ebp)
/work/x86_os_my/fs/file.c:410
	uint32_t sec_left_bytes;		// 扇区内剩余字节量
	uint32_t chunk_size;			// 每次写入硬盘的数据块大小
	uint32_t size_left = count;		// 未写入数据的大小
	bool first_write_block = true;	// 数据块（扇区）含有剩余空间的标识
	file->fd_pos = file->fd_inode->i_size - 1;	// 文件读写指针fd_pos为"文件大小-1"
	while (bytes_written < count) {	// 直到写完所有数据
c0009a3f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0009a42:	3b 45 10             	cmp    0x10(%ebp),%eax
c0009a45:	0f 82 02 ff ff ff    	jb     c000994d <file_write+0x65a>
/work/x86_os_my/fs/file.c:433
		file->fd_inode->i_size += chunk_size;	// 文件大小
		file->fd_pos += chunk_size;				// 文件指针位置
		bytes_written += chunk_size;
		size_left -= chunk_size;
	}
	inode_sync(cur_part, file->fd_inode, io_buf);	// 更新文件对应的inode结构，io_buf只是个缓冲区
c0009a4b:	8b 45 08             	mov    0x8(%ebp),%eax
c0009a4e:	8b 50 08             	mov    0x8(%eax),%edx
c0009a51:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c0009a56:	83 ec 04             	sub    $0x4,%esp
c0009a59:	ff 75 e0             	pushl  -0x20(%ebp)
c0009a5c:	52                   	push   %edx
c0009a5d:	50                   	push   %eax
c0009a5e:	e8 05 ec ff ff       	call   c0008668 <inode_sync>
c0009a63:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:434
	sys_free(all_blocks);
c0009a66:	83 ec 0c             	sub    $0xc,%esp
c0009a69:	ff 75 dc             	pushl  -0x24(%ebp)
c0009a6c:	e8 88 98 ff ff       	call   c00032f9 <sys_free>
c0009a71:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:435
	sys_free(io_buf);
c0009a74:	83 ec 0c             	sub    $0xc,%esp
c0009a77:	ff 75 e0             	pushl  -0x20(%ebp)
c0009a7a:	e8 7a 98 ff ff       	call   c00032f9 <sys_free>
c0009a7f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:436
	return bytes_written;
c0009a82:	8b 45 ec             	mov    -0x14(%ebp),%eax
/work/x86_os_my/fs/file.c:437
}
c0009a85:	c9                   	leave  
c0009a86:	c3                   	ret    

c0009a87 <file_read>:
file_read():
/work/x86_os_my/fs/file.c:441


/* 从文件file中读取count个字节写入buf, 返回读出的字节数,若到文件尾则返回-1 */
int32_t file_read(struct file* file, void* buf, uint32_t count) {
c0009a87:	55                   	push   %ebp
c0009a88:	89 e5                	mov    %esp,%ebp
c0009a8a:	83 ec 48             	sub    $0x48,%esp
/work/x86_os_my/fs/file.c:442
	uint8_t* buf_dst = (uint8_t*)buf;
c0009a8d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0009a90:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:443
	uint32_t size = count, size_left = size;
c0009a93:	8b 45 10             	mov    0x10(%ebp),%eax
c0009a96:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0009a99:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0009a9c:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/file.c:446

	/* 若要读取的字节数超过了文件可读的剩余量, 就用剩余量做为待读取的字节数 */
	if ((file->fd_pos + count) > file->fd_inode->i_size) {
c0009a9f:	8b 45 08             	mov    0x8(%ebp),%eax
c0009aa2:	8b 10                	mov    (%eax),%edx
c0009aa4:	8b 45 10             	mov    0x10(%ebp),%eax
c0009aa7:	01 c2                	add    %eax,%edx
c0009aa9:	8b 45 08             	mov    0x8(%ebp),%eax
c0009aac:	8b 40 08             	mov    0x8(%eax),%eax
c0009aaf:	8b 40 04             	mov    0x4(%eax),%eax
c0009ab2:	39 c2                	cmp    %eax,%edx
c0009ab4:	76 2b                	jbe    c0009ae1 <file_read+0x5a>
/work/x86_os_my/fs/file.c:447
		size = file->fd_inode->i_size - file->fd_pos;
c0009ab6:	8b 45 08             	mov    0x8(%ebp),%eax
c0009ab9:	8b 40 08             	mov    0x8(%eax),%eax
c0009abc:	8b 50 04             	mov    0x4(%eax),%edx
c0009abf:	8b 45 08             	mov    0x8(%ebp),%eax
c0009ac2:	8b 00                	mov    (%eax),%eax
c0009ac4:	29 c2                	sub    %eax,%edx
c0009ac6:	89 d0                	mov    %edx,%eax
c0009ac8:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:448
		size_left = size;
c0009acb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0009ace:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/file.c:449
		if (size == 0) {	// 若到文件尾则返回-1
c0009ad1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0009ad5:	75 0a                	jne    c0009ae1 <file_read+0x5a>
/work/x86_os_my/fs/file.c:450
			return -1;
c0009ad7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009adc:	e9 4d 03 00 00       	jmp    c0009e2e <file_read+0x3a7>
/work/x86_os_my/fs/file.c:454
		}
	}

	uint8_t* io_buf = sys_malloc(BLOCK_SIZE);
c0009ae1:	83 ec 0c             	sub    $0xc,%esp
c0009ae4:	68 00 02 00 00       	push   $0x200
c0009ae9:	e8 de 91 ff ff       	call   c0002ccc <sys_malloc>
c0009aee:	83 c4 10             	add    $0x10,%esp
c0009af1:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/file.c:455
	if (io_buf == NULL) {
c0009af4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0009af8:	75 10                	jne    c0009b0a <file_read+0x83>
/work/x86_os_my/fs/file.c:456
		printk("file_read: sys_malloc for io_buf failed\n");
c0009afa:	83 ec 0c             	sub    $0xc,%esp
c0009afd:	68 88 d2 00 c0       	push   $0xc000d288
c0009b02:	e8 00 ca ff ff       	call   c0006507 <printk>
c0009b07:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:458
	}
	uint32_t* all_blocks = (uint32_t*)sys_malloc(BLOCK_SIZE + 48);		// 用来记录文件所有的块地址【140*4=560字节】
c0009b0a:	83 ec 0c             	sub    $0xc,%esp
c0009b0d:	68 30 02 00 00       	push   $0x230
c0009b12:	e8 b5 91 ff ff       	call   c0002ccc <sys_malloc>
c0009b17:	83 c4 10             	add    $0x10,%esp
c0009b1a:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/file.c:459
	if (all_blocks == NULL) {
c0009b1d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0009b21:	75 1a                	jne    c0009b3d <file_read+0xb6>
/work/x86_os_my/fs/file.c:460
		printk("file_read: sys_malloc for all_blocks failed\n");
c0009b23:	83 ec 0c             	sub    $0xc,%esp
c0009b26:	68 b4 d2 00 c0       	push   $0xc000d2b4
c0009b2b:	e8 d7 c9 ff ff       	call   c0006507 <printk>
c0009b30:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:461
		return -1;
c0009b33:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009b38:	e9 f1 02 00 00       	jmp    c0009e2e <file_read+0x3a7>
/work/x86_os_my/fs/file.c:464
	}

	uint32_t block_read_start_idx = file->fd_pos / BLOCK_SIZE;			// 数据所在块的起始地址
c0009b3d:	8b 45 08             	mov    0x8(%ebp),%eax
c0009b40:	8b 00                	mov    (%eax),%eax
c0009b42:	c1 e8 09             	shr    $0x9,%eax
c0009b45:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/file.c:465
	uint32_t block_read_end_idx = (file->fd_pos + size) / BLOCK_SIZE;	// 数据所在块的终止地址
c0009b48:	8b 45 08             	mov    0x8(%ebp),%eax
c0009b4b:	8b 10                	mov    (%eax),%edx
c0009b4d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0009b50:	01 d0                	add    %edx,%eax
c0009b52:	c1 e8 09             	shr    $0x9,%eax
c0009b55:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/fs/file.c:466
	uint32_t read_blocks = block_read_start_idx - block_read_end_idx;	// 如增量为0,表示数据在同一扇区
c0009b58:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0009b5b:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c0009b5e:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/fs/file.c:467
	ASSERT(block_read_start_idx < 139 && block_read_end_idx < 139);
c0009b61:	81 7d d8 8a 00 00 00 	cmpl   $0x8a,-0x28(%ebp)
c0009b68:	77 09                	ja     c0009b73 <file_read+0xec>
/work/x86_os_my/fs/file.c:467 (discriminator 1)
c0009b6a:	81 7d d4 8a 00 00 00 	cmpl   $0x8a,-0x2c(%ebp)
c0009b71:	76 1c                	jbe    c0009b8f <file_read+0x108>
/work/x86_os_my/fs/file.c:467 (discriminator 3)
c0009b73:	68 e4 d2 00 c0       	push   $0xc000d2e4
c0009b78:	68 54 d3 00 c0       	push   $0xc000d354
c0009b7d:	68 d3 01 00 00       	push   $0x1d3
c0009b82:	68 19 d1 00 c0       	push   $0xc000d119
c0009b87:	e8 95 87 ff ff       	call   c0002321 <panic_spin>
c0009b8c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:474
	int32_t indirect_block_table;	// 获取一级间接表地址
	uint32_t block_idx;				// 获取待读的块地址

	/* 以下开始构建all_blocks块地址数组，专门存储用到的块地址 */
	// 在同一扇区内读数据,不涉及到跨扇区读取
	if (read_blocks == 0) {
c0009b8f:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c0009b93:	0f 85 84 00 00 00    	jne    c0009c1d <file_read+0x196>
/work/x86_os_my/fs/file.c:475
		ASSERT(block_read_end_idx == block_read_start_idx);
c0009b99:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0009b9c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
c0009b9f:	74 1c                	je     c0009bbd <file_read+0x136>
/work/x86_os_my/fs/file.c:475 (discriminator 1)
c0009ba1:	68 1c d3 00 c0       	push   $0xc000d31c
c0009ba6:	68 54 d3 00 c0       	push   $0xc000d354
c0009bab:	68 db 01 00 00       	push   $0x1db
c0009bb0:	68 19 d1 00 c0       	push   $0xc000d119
c0009bb5:	e8 67 87 ff ff       	call   c0002321 <panic_spin>
c0009bba:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:476
		if (block_read_end_idx < 12 ) {	// 待读的数据在12个直接块之内
c0009bbd:	83 7d d4 0b          	cmpl   $0xb,-0x2c(%ebp)
c0009bc1:	77 2b                	ja     c0009bee <file_read+0x167>
/work/x86_os_my/fs/file.c:477
			block_idx = block_read_end_idx;
c0009bc3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0009bc6:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/file.c:478
			all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];
c0009bc9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0009bcc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0009bd3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009bd6:	01 c2                	add    %eax,%edx
c0009bd8:	8b 45 08             	mov    0x8(%ebp),%eax
c0009bdb:	8b 40 08             	mov    0x8(%eax),%eax
c0009bde:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0009be1:	83 c1 04             	add    $0x4,%ecx
c0009be4:	8b 04 88             	mov    (%eax,%ecx,4),%eax
c0009be7:	89 02                	mov    %eax,(%edx)
c0009be9:	e9 5c 01 00 00       	jmp    c0009d4a <file_read+0x2c3>
/work/x86_os_my/fs/file.c:480
		} else {	// 若用到了一级间接块表,需要将表中间接块读进来
			indirect_block_table = file->fd_inode->i_sectors[12];
c0009bee:	8b 45 08             	mov    0x8(%ebp),%eax
c0009bf1:	8b 40 08             	mov    0x8(%eax),%eax
c0009bf4:	8b 40 40             	mov    0x40(%eax),%eax
c0009bf7:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/fs/file.c:481
			ide_read(cur_part->my_disk, indirect_block_table, all_blocks + 12, 1);
c0009bfa:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009bfd:	8d 48 30             	lea    0x30(%eax),%ecx
c0009c00:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0009c03:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c0009c08:	8b 40 08             	mov    0x8(%eax),%eax
c0009c0b:	6a 01                	push   $0x1
c0009c0d:	51                   	push   %ecx
c0009c0e:	52                   	push   %edx
c0009c0f:	50                   	push   %eax
c0009c10:	e8 79 be ff ff       	call   c0005a8e <ide_read>
c0009c15:	83 c4 10             	add    $0x10,%esp
c0009c18:	e9 2d 01 00 00       	jmp    c0009d4a <file_read+0x2c3>
/work/x86_os_my/fs/file.c:486
		}
	} else {
	// 若要读多个数据块（扇区）
		/* 第一种情况: 起始块和终止块属于直接块*/
		if (block_read_end_idx < 12 ) {	  // 数据结束所在的块属于直接块
c0009c1d:	83 7d d4 0b          	cmpl   $0xb,-0x2c(%ebp)
c0009c21:	77 39                	ja     c0009c5c <file_read+0x1d5>
/work/x86_os_my/fs/file.c:487
			block_idx = block_read_start_idx;
c0009c23:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0009c26:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/file.c:488
			while (block_idx <= block_read_end_idx) {
c0009c29:	eb 24                	jmp    c0009c4f <file_read+0x1c8>
/work/x86_os_my/fs/file.c:489
				all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];
c0009c2b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0009c2e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0009c35:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009c38:	01 c2                	add    %eax,%edx
c0009c3a:	8b 45 08             	mov    0x8(%ebp),%eax
c0009c3d:	8b 40 08             	mov    0x8(%eax),%eax
c0009c40:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0009c43:	83 c1 04             	add    $0x4,%ecx
c0009c46:	8b 04 88             	mov    (%eax,%ecx,4),%eax
c0009c49:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/file.c:490
				block_idx++;
c0009c4b:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
/work/x86_os_my/fs/file.c:488
	} else {
	// 若要读多个数据块（扇区）
		/* 第一种情况: 起始块和终止块属于直接块*/
		if (block_read_end_idx < 12 ) {	  // 数据结束所在的块属于直接块
			block_idx = block_read_start_idx;
			while (block_idx <= block_read_end_idx) {
c0009c4f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0009c52:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0009c55:	76 d4                	jbe    c0009c2b <file_read+0x1a4>
c0009c57:	e9 ee 00 00 00       	jmp    c0009d4a <file_read+0x2c3>
/work/x86_os_my/fs/file.c:492
				all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];
				block_idx++;
			}
		} else if (block_read_start_idx < 12 && block_read_end_idx >= 12) {
c0009c5c:	83 7d d8 0b          	cmpl   $0xb,-0x28(%ebp)
c0009c60:	0f 87 91 00 00 00    	ja     c0009cf7 <file_read+0x270>
/work/x86_os_my/fs/file.c:492 (discriminator 1)
c0009c66:	83 7d d4 0b          	cmpl   $0xb,-0x2c(%ebp)
c0009c6a:	0f 86 87 00 00 00    	jbe    c0009cf7 <file_read+0x270>
/work/x86_os_my/fs/file.c:495
		/* 第二种情况: 待读入的数据跨越直接块和间接块两类*/
			/* 先将直接块地址写入all_blocks */
			block_idx = block_read_start_idx;
c0009c70:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0009c73:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/file.c:496
			while (block_idx < 12) {
c0009c76:	eb 24                	jmp    c0009c9c <file_read+0x215>
/work/x86_os_my/fs/file.c:497
				all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];
c0009c78:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0009c7b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0009c82:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009c85:	01 c2                	add    %eax,%edx
c0009c87:	8b 45 08             	mov    0x8(%ebp),%eax
c0009c8a:	8b 40 08             	mov    0x8(%eax),%eax
c0009c8d:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0009c90:	83 c1 04             	add    $0x4,%ecx
c0009c93:	8b 04 88             	mov    (%eax,%ecx,4),%eax
c0009c96:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/file.c:498
				block_idx++;
c0009c98:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
/work/x86_os_my/fs/file.c:496
			}
		} else if (block_read_start_idx < 12 && block_read_end_idx >= 12) {
		/* 第二种情况: 待读入的数据跨越直接块和间接块两类*/
			/* 先将直接块地址写入all_blocks */
			block_idx = block_read_start_idx;
			while (block_idx < 12) {
c0009c9c:	83 7d e8 0b          	cmpl   $0xb,-0x18(%ebp)
c0009ca0:	76 d6                	jbe    c0009c78 <file_read+0x1f1>
/work/x86_os_my/fs/file.c:500
				all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];
				block_idx++;
			}
			ASSERT(file->fd_inode->i_sectors[12] != 0);	    // 确保已经分配了一级间接块表
c0009ca2:	8b 45 08             	mov    0x8(%ebp),%eax
c0009ca5:	8b 40 08             	mov    0x8(%eax),%eax
c0009ca8:	8b 40 40             	mov    0x40(%eax),%eax
c0009cab:	85 c0                	test   %eax,%eax
c0009cad:	75 1c                	jne    c0009ccb <file_read+0x244>
/work/x86_os_my/fs/file.c:500 (discriminator 1)
c0009caf:	68 40 d1 00 c0       	push   $0xc000d140
c0009cb4:	68 54 d3 00 c0       	push   $0xc000d354
c0009cb9:	68 f4 01 00 00       	push   $0x1f4
c0009cbe:	68 19 d1 00 c0       	push   $0xc000d119
c0009cc3:	e8 59 86 ff ff       	call   c0002321 <panic_spin>
c0009cc8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:503

			/* 再将间接块地址写入all_blocks */
			indirect_block_table = file->fd_inode->i_sectors[12];
c0009ccb:	8b 45 08             	mov    0x8(%ebp),%eax
c0009cce:	8b 40 08             	mov    0x8(%eax),%eax
c0009cd1:	8b 40 40             	mov    0x40(%eax),%eax
c0009cd4:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/fs/file.c:504
			ide_read(cur_part->my_disk, indirect_block_table, all_blocks + 12, 1);	      // 将一级间接块表读进来写入到第13个块的位置之后
c0009cd7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009cda:	8d 48 30             	lea    0x30(%eax),%ecx
c0009cdd:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0009ce0:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c0009ce5:	8b 40 08             	mov    0x8(%eax),%eax
c0009ce8:	6a 01                	push   $0x1
c0009cea:	51                   	push   %ecx
c0009ceb:	52                   	push   %edx
c0009cec:	50                   	push   %eax
c0009ced:	e8 9c bd ff ff       	call   c0005a8e <ide_read>
c0009cf2:	83 c4 10             	add    $0x10,%esp
c0009cf5:	eb 53                	jmp    c0009d4a <file_read+0x2c3>
/work/x86_os_my/fs/file.c:507
		} else {
		/* 第三种情况: 数据在间接块中*/
			ASSERT(file->fd_inode->i_sectors[12] != 0);	    // 确保已经分配了一级间接块表
c0009cf7:	8b 45 08             	mov    0x8(%ebp),%eax
c0009cfa:	8b 40 08             	mov    0x8(%eax),%eax
c0009cfd:	8b 40 40             	mov    0x40(%eax),%eax
c0009d00:	85 c0                	test   %eax,%eax
c0009d02:	75 1c                	jne    c0009d20 <file_read+0x299>
/work/x86_os_my/fs/file.c:507 (discriminator 1)
c0009d04:	68 40 d1 00 c0       	push   $0xc000d140
c0009d09:	68 54 d3 00 c0       	push   $0xc000d354
c0009d0e:	68 fb 01 00 00       	push   $0x1fb
c0009d13:	68 19 d1 00 c0       	push   $0xc000d119
c0009d18:	e8 04 86 ff ff       	call   c0002321 <panic_spin>
c0009d1d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:508
			indirect_block_table = file->fd_inode->i_sectors[12];	      // 获取一级间接表地址
c0009d20:	8b 45 08             	mov    0x8(%ebp),%eax
c0009d23:	8b 40 08             	mov    0x8(%eax),%eax
c0009d26:	8b 40 40             	mov    0x40(%eax),%eax
c0009d29:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/fs/file.c:509
			ide_read(cur_part->my_disk, indirect_block_table, all_blocks + 12, 1);	      // 将一级间接块表读进来写入到第13个块的位置之后
c0009d2c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009d2f:	8d 48 30             	lea    0x30(%eax),%ecx
c0009d32:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0009d35:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c0009d3a:	8b 40 08             	mov    0x8(%eax),%eax
c0009d3d:	6a 01                	push   $0x1
c0009d3f:	51                   	push   %ecx
c0009d40:	52                   	push   %edx
c0009d41:	50                   	push   %eax
c0009d42:	e8 47 bd ff ff       	call   c0005a8e <ide_read>
c0009d47:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:516
	}//块地址已经收集到all_blocks中


	/* 读数据 */
	uint32_t sec_idx, sec_lba, sec_off_bytes, sec_left_bytes, chunk_size;
	uint32_t bytes_read = 0;
c0009d4a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
/work/x86_os_my/fs/file.c:517
	while (bytes_read < size) {	// 直到读完为止
c0009d51:	e9 ad 00 00 00       	jmp    c0009e03 <file_read+0x37c>
/work/x86_os_my/fs/file.c:518
		sec_idx = file->fd_pos / BLOCK_SIZE;
c0009d56:	8b 45 08             	mov    0x8(%ebp),%eax
c0009d59:	8b 00                	mov    (%eax),%eax
c0009d5b:	c1 e8 09             	shr    $0x9,%eax
c0009d5e:	89 45 c8             	mov    %eax,-0x38(%ebp)
/work/x86_os_my/fs/file.c:519
		sec_lba = all_blocks[sec_idx];
c0009d61:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0009d64:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0009d6b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009d6e:	01 d0                	add    %edx,%eax
c0009d70:	8b 00                	mov    (%eax),%eax
c0009d72:	89 45 c4             	mov    %eax,-0x3c(%ebp)
/work/x86_os_my/fs/file.c:520
		sec_off_bytes = file->fd_pos % BLOCK_SIZE;
c0009d75:	8b 45 08             	mov    0x8(%ebp),%eax
c0009d78:	8b 00                	mov    (%eax),%eax
c0009d7a:	25 ff 01 00 00       	and    $0x1ff,%eax
c0009d7f:	89 45 c0             	mov    %eax,-0x40(%ebp)
/work/x86_os_my/fs/file.c:521
		sec_left_bytes = BLOCK_SIZE - sec_off_bytes;
c0009d82:	b8 00 02 00 00       	mov    $0x200,%eax
c0009d87:	2b 45 c0             	sub    -0x40(%ebp),%eax
c0009d8a:	89 45 bc             	mov    %eax,-0x44(%ebp)
/work/x86_os_my/fs/file.c:522
		chunk_size = size_left < sec_left_bytes ? size_left : sec_left_bytes;	// 待读入的数据大小
c0009d8d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0009d90:	39 45 bc             	cmp    %eax,-0x44(%ebp)
c0009d93:	0f 46 45 bc          	cmovbe -0x44(%ebp),%eax
c0009d97:	89 45 b8             	mov    %eax,-0x48(%ebp)
/work/x86_os_my/fs/file.c:524

		memset(io_buf, 0, BLOCK_SIZE);
c0009d9a:	83 ec 04             	sub    $0x4,%esp
c0009d9d:	68 00 02 00 00       	push   $0x200
c0009da2:	6a 00                	push   $0x0
c0009da4:	ff 75 e0             	pushl  -0x20(%ebp)
c0009da7:	e8 17 9a ff ff       	call   c00037c3 <memset>
c0009dac:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:525
		ide_read(cur_part->my_disk, sec_lba, io_buf, 1);
c0009daf:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c0009db4:	8b 40 08             	mov    0x8(%eax),%eax
c0009db7:	6a 01                	push   $0x1
c0009db9:	ff 75 e0             	pushl  -0x20(%ebp)
c0009dbc:	ff 75 c4             	pushl  -0x3c(%ebp)
c0009dbf:	50                   	push   %eax
c0009dc0:	e8 c9 bc ff ff       	call   c0005a8e <ide_read>
c0009dc5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:526
		memcpy(buf_dst, io_buf + sec_off_bytes, chunk_size);
c0009dc8:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0009dcb:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0009dce:	01 d0                	add    %edx,%eax
c0009dd0:	83 ec 04             	sub    $0x4,%esp
c0009dd3:	ff 75 b8             	pushl  -0x48(%ebp)
c0009dd6:	50                   	push   %eax
c0009dd7:	ff 75 f4             	pushl  -0xc(%ebp)
c0009dda:	e8 36 9a ff ff       	call   c0003815 <memcpy>
c0009ddf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:528

		buf_dst += chunk_size;
c0009de2:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0009de5:	01 45 f4             	add    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:529
		file->fd_pos += chunk_size;
c0009de8:	8b 45 08             	mov    0x8(%ebp),%eax
c0009deb:	8b 10                	mov    (%eax),%edx
c0009ded:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0009df0:	01 c2                	add    %eax,%edx
c0009df2:	8b 45 08             	mov    0x8(%ebp),%eax
c0009df5:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/fs/file.c:530
		bytes_read += chunk_size;
c0009df7:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0009dfa:	01 45 e4             	add    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/file.c:531
		size_left -= chunk_size;
c0009dfd:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0009e00:	29 45 ec             	sub    %eax,-0x14(%ebp)
/work/x86_os_my/fs/file.c:517


	/* 读数据 */
	uint32_t sec_idx, sec_lba, sec_off_bytes, sec_left_bytes, chunk_size;
	uint32_t bytes_read = 0;
	while (bytes_read < size) {	// 直到读完为止
c0009e03:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0009e06:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0009e09:	0f 82 47 ff ff ff    	jb     c0009d56 <file_read+0x2cf>
/work/x86_os_my/fs/file.c:533
		buf_dst += chunk_size;
		file->fd_pos += chunk_size;
		bytes_read += chunk_size;
		size_left -= chunk_size;
	}
	sys_free(all_blocks);
c0009e0f:	83 ec 0c             	sub    $0xc,%esp
c0009e12:	ff 75 dc             	pushl  -0x24(%ebp)
c0009e15:	e8 df 94 ff ff       	call   c00032f9 <sys_free>
c0009e1a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:534
	sys_free(io_buf);
c0009e1d:	83 ec 0c             	sub    $0xc,%esp
c0009e20:	ff 75 e0             	pushl  -0x20(%ebp)
c0009e23:	e8 d1 94 ff ff       	call   c00032f9 <sys_free>
c0009e28:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:535
	return bytes_read;
c0009e2b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
/work/x86_os_my/fs/file.c:536
}
c0009e2e:	c9                   	leave  
c0009e2f:	c3                   	ret    

c0009e30 <open_root_dir>:
open_root_dir():
/work/x86_os_my/fs/dir.c:17
#include "super_block.h"

struct dir root_dir;	// 根目录

/* 打开根目录 */
void open_root_dir(struct partition* part) {
c0009e30:	55                   	push   %ebp
c0009e31:	89 e5                	mov    %esp,%ebp
c0009e33:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/fs/dir.c:18
	root_dir.inode = inode_open(part, part->sb->root_inode_no);
c0009e36:	8b 45 08             	mov    0x8(%ebp),%eax
c0009e39:	8b 40 1c             	mov    0x1c(%eax),%eax
c0009e3c:	8b 40 2c             	mov    0x2c(%eax),%eax
c0009e3f:	83 ec 08             	sub    $0x8,%esp
c0009e42:	50                   	push   %eax
c0009e43:	ff 75 08             	pushl  0x8(%ebp)
c0009e46:	e8 44 e9 ff ff       	call   c000878f <inode_open>
c0009e4b:	83 c4 10             	add    $0x10,%esp
c0009e4e:	a3 40 24 01 c0       	mov    %eax,0xc0012440
/work/x86_os_my/fs/dir.c:19
	root_dir.dir_pos = 0;
c0009e53:	c7 05 44 24 01 c0 00 	movl   $0x0,0xc0012444
c0009e5a:	00 00 00 
/work/x86_os_my/fs/dir.c:20
}
c0009e5d:	90                   	nop
c0009e5e:	c9                   	leave  
c0009e5f:	c3                   	ret    

c0009e60 <dir_open>:
dir_open():
/work/x86_os_my/fs/dir.c:23

/* 在分区part上打开i结点为inode_no的目录，并返回目录指针 */
struct dir* dir_open(struct partition* part, uint32_t inode_no) {
c0009e60:	55                   	push   %ebp
c0009e61:	89 e5                	mov    %esp,%ebp
c0009e63:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/dir.c:24
	struct dir* pdir = (struct dir*)sys_malloc(sizeof(struct dir));	//除根目录以外的其他目录，要分配内存
c0009e66:	83 ec 0c             	sub    $0xc,%esp
c0009e69:	68 08 02 00 00       	push   $0x208
c0009e6e:	e8 59 8e ff ff       	call   c0002ccc <sys_malloc>
c0009e73:	83 c4 10             	add    $0x10,%esp
c0009e76:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:25
	pdir->inode = inode_open(part, inode_no);
c0009e79:	83 ec 08             	sub    $0x8,%esp
c0009e7c:	ff 75 0c             	pushl  0xc(%ebp)
c0009e7f:	ff 75 08             	pushl  0x8(%ebp)
c0009e82:	e8 08 e9 ff ff       	call   c000878f <inode_open>
c0009e87:	83 c4 10             	add    $0x10,%esp
c0009e8a:	89 c2                	mov    %eax,%edx
c0009e8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009e8f:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/fs/dir.c:26
	pdir->dir_pos = 0;
c0009e91:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009e94:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
/work/x86_os_my/fs/dir.c:27
	return pdir;
c0009e9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/dir.c:28
}
c0009e9e:	c9                   	leave  
c0009e9f:	c3                   	ret    

c0009ea0 <search_dir_entry>:
search_dir_entry():
/work/x86_os_my/fs/dir.c:32

/* 在part分区内的pdir目录内，寻找名为name的目录项，
 * 找到后返回true，并将其目录项存入dir_e；否则返回false */
bool search_dir_entry(struct partition* part, struct dir* pdir, const char* name, struct dir_entry* dir_e) {
c0009ea0:	55                   	push   %ebp
c0009ea1:	89 e5                	mov    %esp,%ebp
c0009ea3:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/fs/dir.c:34
	/* 1分配 */
	uint32_t block_cnt = 140;	 // 12个直接块+128个一级间接块 = 目录的inode管理的所有块 = 140块
c0009ea6:	c7 45 e8 8c 00 00 00 	movl   $0x8c,-0x18(%ebp)
/work/x86_os_my/fs/dir.c:39

	/* 12个直接块大小+128个间接块,共560字节（140个块，inode需要管理块的地址，每个4字节）
	注意: all_blocks 里面并没有一级间接表的地址，只有直接块+间接块的地址！
	用all_blocks检索inode管理的所有块地址 */
	uint32_t* all_blocks = (uint32_t*)sys_malloc(48 + 512);
c0009ead:	83 ec 0c             	sub    $0xc,%esp
c0009eb0:	68 30 02 00 00       	push   $0x230
c0009eb5:	e8 12 8e ff ff       	call   c0002ccc <sys_malloc>
c0009eba:	83 c4 10             	add    $0x10,%esp
c0009ebd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/dir.c:40
	if (all_blocks == NULL) {
c0009ec0:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0009ec4:	75 1a                	jne    c0009ee0 <search_dir_entry+0x40>
/work/x86_os_my/fs/dir.c:41
		printk("search_dir_entry: sys_malloc for all_blocks failed");
c0009ec6:	83 ec 0c             	sub    $0xc,%esp
c0009ec9:	68 60 d3 00 c0       	push   $0xc000d360
c0009ece:	e8 34 c6 ff ff       	call   c0006507 <printk>
c0009ed3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:42
		return false;
c0009ed6:	b8 00 00 00 00       	mov    $0x0,%eax
c0009edb:	e9 96 01 00 00       	jmp    c000a076 <search_dir_entry+0x1d6>
/work/x86_os_my/fs/dir.c:45
	}

	uint32_t block_idx = 0;
c0009ee0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:46
	while (block_idx < 12) {
c0009ee7:	eb 23                	jmp    c0009f0c <search_dir_entry+0x6c>
/work/x86_os_my/fs/dir.c:47
		all_blocks[block_idx] = pdir->inode->i_sectors[block_idx];
c0009ee9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009eec:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0009ef3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0009ef6:	01 c2                	add    %eax,%edx
c0009ef8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0009efb:	8b 00                	mov    (%eax),%eax
c0009efd:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0009f00:	83 c1 04             	add    $0x4,%ecx
c0009f03:	8b 04 88             	mov    (%eax,%ecx,4),%eax
c0009f06:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/dir.c:48
		block_idx++;
c0009f08:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:46
		printk("search_dir_entry: sys_malloc for all_blocks failed");
		return false;
	}

	uint32_t block_idx = 0;
	while (block_idx < 12) {
c0009f0c:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
c0009f10:	76 d7                	jbe    c0009ee9 <search_dir_entry+0x49>
/work/x86_os_my/fs/dir.c:50
		all_blocks[block_idx] = pdir->inode->i_sectors[block_idx];
		block_idx++;
	}
	block_idx = 0;
c0009f12:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:52

	if (pdir->inode->i_sectors[12] != 0) {	// i_sectors[12] != 0代表含有一级间接块表
c0009f19:	8b 45 0c             	mov    0xc(%ebp),%eax
c0009f1c:	8b 00                	mov    (%eax),%eax
c0009f1e:	8b 40 40             	mov    0x40(%eax),%eax
c0009f21:	85 c0                	test   %eax,%eax
c0009f23:	74 21                	je     c0009f46 <search_dir_entry+0xa6>
/work/x86_os_my/fs/dir.c:54
		//从硬盘的扇区地址i_sectors[12]处获取 1 扇区数据，就是 128 个间接块的地址，将其复制到 all_blocks+12 处【复制的是整个一级间接表】
		ide_read(part->my_disk, pdir->inode->i_sectors[12], all_blocks + 12, 1);
c0009f25:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0009f28:	8d 48 30             	lea    0x30(%eax),%ecx
c0009f2b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0009f2e:	8b 00                	mov    (%eax),%eax
c0009f30:	8b 50 40             	mov    0x40(%eax),%edx
c0009f33:	8b 45 08             	mov    0x8(%ebp),%eax
c0009f36:	8b 40 08             	mov    0x8(%eax),%eax
c0009f39:	6a 01                	push   $0x1
c0009f3b:	51                   	push   %ecx
c0009f3c:	52                   	push   %edx
c0009f3d:	50                   	push   %eax
c0009f3e:	e8 4b bb ff ff       	call   c0005a8e <ide_read>
c0009f43:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:62


	/* 2查找 */
	/* 写目录项的时候已保证目录项不跨扇区，这样读目录项时容易处理，只申请容纳1个扇区的内存
	 * 和处理inode_table不同，在往目录中写目录项的时候(sync_dir_entry)，避免了某个目录项 跨扇区的情况 */
	uint8_t* buf = (uint8_t*)sys_malloc(SECTOR_SIZE);
c0009f46:	83 ec 0c             	sub    $0xc,%esp
c0009f49:	68 00 02 00 00       	push   $0x200
c0009f4e:	e8 79 8d ff ff       	call   c0002ccc <sys_malloc>
c0009f53:	83 c4 10             	add    $0x10,%esp
c0009f56:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/dir.c:63
	struct dir_entry* p_de = (struct dir_entry*)buf;		// p_de为指向目录项的指针,值为buf起始地址
c0009f59:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0009f5c:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:64
	uint32_t dir_entry_size = part->sb->dir_entry_size;
c0009f5f:	8b 45 08             	mov    0x8(%ebp),%eax
c0009f62:	8b 40 1c             	mov    0x1c(%eax),%eax
c0009f65:	8b 40 30             	mov    0x30(%eax),%eax
c0009f68:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:65
	uint32_t dir_entry_cnt = SECTOR_SIZE / dir_entry_size;	// 1扇区内可容纳的目录项个数
c0009f6b:	b8 00 02 00 00       	mov    $0x200,%eax
c0009f70:	ba 00 00 00 00       	mov    $0x0,%edx
c0009f75:	f7 75 dc             	divl   -0x24(%ebp)
c0009f78:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/dir.c:67
	/* 在所有块中查找目录项 */
	while (block_idx < block_cnt) {
c0009f7b:	e9 c9 00 00 00       	jmp    c000a049 <search_dir_entry+0x1a9>
/work/x86_os_my/fs/dir.c:69
		/* 块地址为0时表示该块中无数据,继续在其它块中找 */
		if (all_blocks[block_idx] == 0) {
c0009f80:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009f83:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0009f8a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0009f8d:	01 d0                	add    %edx,%eax
c0009f8f:	8b 00                	mov    (%eax),%eax
c0009f91:	85 c0                	test   %eax,%eax
c0009f93:	75 09                	jne    c0009f9e <search_dir_entry+0xfe>
/work/x86_os_my/fs/dir.c:70
			block_idx++;
c0009f95:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:71
			continue;
c0009f99:	e9 ab 00 00 00       	jmp    c000a049 <search_dir_entry+0x1a9>
/work/x86_os_my/fs/dir.c:73
		}
		ide_read(part->my_disk, all_blocks[block_idx], buf, 1);
c0009f9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009fa1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0009fa8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0009fab:	01 d0                	add    %edx,%eax
c0009fad:	8b 10                	mov    (%eax),%edx
c0009faf:	8b 45 08             	mov    0x8(%ebp),%eax
c0009fb2:	8b 40 08             	mov    0x8(%eax),%eax
c0009fb5:	6a 01                	push   $0x1
c0009fb7:	ff 75 e0             	pushl  -0x20(%ebp)
c0009fba:	52                   	push   %edx
c0009fbb:	50                   	push   %eax
c0009fbc:	e8 cd ba ff ff       	call   c0005a8e <ide_read>
c0009fc1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:75

		uint32_t dir_entry_idx = 0;
c0009fc4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:77
		/* 遍历扇区中所有目录项 */
		while (dir_entry_idx < dir_entry_cnt) {
c0009fcb:	eb 55                	jmp    c000a022 <search_dir_entry+0x182>
/work/x86_os_my/fs/dir.c:79
			/* 若找到了,就直接复制整个目录项 */
			if (!strcmp(p_de->filename, name)) {
c0009fcd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0009fd0:	83 ec 08             	sub    $0x8,%esp
c0009fd3:	ff 75 10             	pushl  0x10(%ebp)
c0009fd6:	50                   	push   %eax
c0009fd7:	e8 bc 99 ff ff       	call   c0003998 <strcmp>
c0009fdc:	83 c4 10             	add    $0x10,%esp
c0009fdf:	84 c0                	test   %al,%al
c0009fe1:	75 37                	jne    c000a01a <search_dir_entry+0x17a>
/work/x86_os_my/fs/dir.c:80
				memcpy(dir_e, p_de, dir_entry_size);
c0009fe3:	83 ec 04             	sub    $0x4,%esp
c0009fe6:	ff 75 dc             	pushl  -0x24(%ebp)
c0009fe9:	ff 75 f0             	pushl  -0x10(%ebp)
c0009fec:	ff 75 14             	pushl  0x14(%ebp)
c0009fef:	e8 21 98 ff ff       	call   c0003815 <memcpy>
c0009ff4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:81
				sys_free(buf);
c0009ff7:	83 ec 0c             	sub    $0xc,%esp
c0009ffa:	ff 75 e0             	pushl  -0x20(%ebp)
c0009ffd:	e8 f7 92 ff ff       	call   c00032f9 <sys_free>
c000a002:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:82
				sys_free(all_blocks);
c000a005:	83 ec 0c             	sub    $0xc,%esp
c000a008:	ff 75 e4             	pushl  -0x1c(%ebp)
c000a00b:	e8 e9 92 ff ff       	call   c00032f9 <sys_free>
c000a010:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:83
				return true;
c000a013:	b8 01 00 00 00       	mov    $0x1,%eax
c000a018:	eb 5c                	jmp    c000a076 <search_dir_entry+0x1d6>
/work/x86_os_my/fs/dir.c:85
			}
			dir_entry_idx++;
c000a01a:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:86
			p_de++;
c000a01e:	83 45 f0 18          	addl   $0x18,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:77
		}
		ide_read(part->my_disk, all_blocks[block_idx], buf, 1);

		uint32_t dir_entry_idx = 0;
		/* 遍历扇区中所有目录项 */
		while (dir_entry_idx < dir_entry_cnt) {
c000a022:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000a025:	3b 45 d8             	cmp    -0x28(%ebp),%eax
c000a028:	72 a3                	jb     c0009fcd <search_dir_entry+0x12d>
/work/x86_os_my/fs/dir.c:89
			}
			dir_entry_idx++;
			p_de++;
		}

		block_idx++;					// 目录inode管理的下一个数据块（扇区）【目录里面是目录项，所以buf赋给p_de】
c000a02a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:90
		p_de = (struct dir_entry*)buf;	// p_de已经指向上一个扇区内，最后一个目录项，需要恢复p_de指向为buf
c000a02e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000a031:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:91
		memset(buf, 0, SECTOR_SIZE);	// 将buf清0,下次再用
c000a034:	83 ec 04             	sub    $0x4,%esp
c000a037:	68 00 02 00 00       	push   $0x200
c000a03c:	6a 00                	push   $0x0
c000a03e:	ff 75 e0             	pushl  -0x20(%ebp)
c000a041:	e8 7d 97 ff ff       	call   c00037c3 <memset>
c000a046:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:67
	uint8_t* buf = (uint8_t*)sys_malloc(SECTOR_SIZE);
	struct dir_entry* p_de = (struct dir_entry*)buf;		// p_de为指向目录项的指针,值为buf起始地址
	uint32_t dir_entry_size = part->sb->dir_entry_size;
	uint32_t dir_entry_cnt = SECTOR_SIZE / dir_entry_size;	// 1扇区内可容纳的目录项个数
	/* 在所有块中查找目录项 */
	while (block_idx < block_cnt) {
c000a049:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000a04c:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c000a04f:	0f 82 2b ff ff ff    	jb     c0009f80 <search_dir_entry+0xe0>
/work/x86_os_my/fs/dir.c:93

		block_idx++;					// 目录inode管理的下一个数据块（扇区）【目录里面是目录项，所以buf赋给p_de】
		p_de = (struct dir_entry*)buf;	// p_de已经指向上一个扇区内，最后一个目录项，需要恢复p_de指向为buf
		memset(buf, 0, SECTOR_SIZE);	// 将buf清0,下次再用
	}
	sys_free(buf);
c000a055:	83 ec 0c             	sub    $0xc,%esp
c000a058:	ff 75 e0             	pushl  -0x20(%ebp)
c000a05b:	e8 99 92 ff ff       	call   c00032f9 <sys_free>
c000a060:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:94
	sys_free(all_blocks);
c000a063:	83 ec 0c             	sub    $0xc,%esp
c000a066:	ff 75 e4             	pushl  -0x1c(%ebp)
c000a069:	e8 8b 92 ff ff       	call   c00032f9 <sys_free>
c000a06e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:95
	return false;
c000a071:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/dir.c:96
}
c000a076:	c9                   	leave  
c000a077:	c3                   	ret    

c000a078 <dir_close>:
dir_close():
/work/x86_os_my/fs/dir.c:99

/* 关闭目录 */
void dir_close(struct dir* dir) {
c000a078:	55                   	push   %ebp
c000a079:	89 e5                	mov    %esp,%ebp
c000a07b:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/fs/dir.c:103
	/*************      根目录不能关闭     ***************
	*1 根目录自打开后就不应该关闭,否则还需要再次open_root_dir();
	*2 root_dir所在的内存是低端1M之内,并非在堆中,free会出问题 */
	if (dir == &root_dir) {
c000a07e:	81 7d 08 40 24 01 c0 	cmpl   $0xc0012440,0x8(%ebp)
c000a085:	74 21                	je     c000a0a8 <dir_close+0x30>
/work/x86_os_my/fs/dir.c:106
		return;
	}
	inode_close(dir->inode);
c000a087:	8b 45 08             	mov    0x8(%ebp),%eax
c000a08a:	8b 00                	mov    (%eax),%eax
c000a08c:	83 ec 0c             	sub    $0xc,%esp
c000a08f:	50                   	push   %eax
c000a090:	e8 40 e8 ff ff       	call   c00088d5 <inode_close>
c000a095:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:107
	sys_free(dir);
c000a098:	83 ec 0c             	sub    $0xc,%esp
c000a09b:	ff 75 08             	pushl  0x8(%ebp)
c000a09e:	e8 56 92 ff ff       	call   c00032f9 <sys_free>
c000a0a3:	83 c4 10             	add    $0x10,%esp
c000a0a6:	eb 01                	jmp    c000a0a9 <dir_close+0x31>
/work/x86_os_my/fs/dir.c:104
void dir_close(struct dir* dir) {
	/*************      根目录不能关闭     ***************
	*1 根目录自打开后就不应该关闭,否则还需要再次open_root_dir();
	*2 root_dir所在的内存是低端1M之内,并非在堆中,free会出问题 */
	if (dir == &root_dir) {
		return;
c000a0a8:	90                   	nop
/work/x86_os_my/fs/dir.c:108
	}
	inode_close(dir->inode);
	sys_free(dir);
}
c000a0a9:	c9                   	leave  
c000a0aa:	c3                   	ret    

c000a0ab <create_dir_entry>:
create_dir_entry():
/work/x86_os_my/fs/dir.c:111

/* 在内存中初始化目录项p_de */
void create_dir_entry(char* filename, uint32_t inode_no, uint8_t file_type, struct dir_entry* p_de) {
c000a0ab:	55                   	push   %ebp
c000a0ac:	89 e5                	mov    %esp,%ebp
c000a0ae:	83 ec 18             	sub    $0x18,%esp
c000a0b1:	8b 45 10             	mov    0x10(%ebp),%eax
c000a0b4:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:112
	ASSERT(strlen(filename) <=  MAX_FILE_NAME_LEN);
c000a0b7:	83 ec 0c             	sub    $0xc,%esp
c000a0ba:	ff 75 08             	pushl  0x8(%ebp)
c000a0bd:	e8 8b 98 ff ff       	call   c000394d <strlen>
c000a0c2:	83 c4 10             	add    $0x10,%esp
c000a0c5:	83 f8 10             	cmp    $0x10,%eax
c000a0c8:	76 19                	jbe    c000a0e3 <create_dir_entry+0x38>
/work/x86_os_my/fs/dir.c:112 (discriminator 1)
c000a0ca:	68 94 d3 00 c0       	push   $0xc000d394
c000a0cf:	68 20 d5 00 c0       	push   $0xc000d520
c000a0d4:	6a 70                	push   $0x70
c000a0d6:	68 ba d3 00 c0       	push   $0xc000d3ba
c000a0db:	e8 41 82 ff ff       	call   c0002321 <panic_spin>
c000a0e0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:115

	/* 初始化目录项 */
	memcpy(p_de->filename, filename, strlen(filename));
c000a0e3:	83 ec 0c             	sub    $0xc,%esp
c000a0e6:	ff 75 08             	pushl  0x8(%ebp)
c000a0e9:	e8 5f 98 ff ff       	call   c000394d <strlen>
c000a0ee:	83 c4 10             	add    $0x10,%esp
c000a0f1:	89 c2                	mov    %eax,%edx
c000a0f3:	8b 45 14             	mov    0x14(%ebp),%eax
c000a0f6:	83 ec 04             	sub    $0x4,%esp
c000a0f9:	52                   	push   %edx
c000a0fa:	ff 75 08             	pushl  0x8(%ebp)
c000a0fd:	50                   	push   %eax
c000a0fe:	e8 12 97 ff ff       	call   c0003815 <memcpy>
c000a103:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:116
	p_de->i_no = inode_no;
c000a106:	8b 45 14             	mov    0x14(%ebp),%eax
c000a109:	8b 55 0c             	mov    0xc(%ebp),%edx
c000a10c:	89 50 10             	mov    %edx,0x10(%eax)
/work/x86_os_my/fs/dir.c:117
	p_de->f_type = file_type;
c000a10f:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
c000a113:	8b 45 14             	mov    0x14(%ebp),%eax
c000a116:	89 50 14             	mov    %edx,0x14(%eax)
/work/x86_os_my/fs/dir.c:118
}
c000a119:	90                   	nop
c000a11a:	c9                   	leave  
c000a11b:	c3                   	ret    

c000a11c <sync_dir_entry>:
sync_dir_entry():
/work/x86_os_my/fs/dir.c:128
 * io_buf是由主调函数提供的，里面是一个一个的目录项
 */
// 全局变量 cur_part 定义在fs.c中
// 临时变量 all_blocks 保存目录中 所有数据块的地址【4*140=560字节，去掉前12个直接块的地址48字节，后边全是间接块，后边正好是512字节】
// 注意: all_blocks 里面并没有一级间接表的地址，只有直接块+间接块的地址！
bool sync_dir_entry(struct dir* parent_dir, struct dir_entry* p_de, void* io_buf) {
c000a11c:	55                   	push   %ebp
c000a11d:	89 e5                	mov    %esp,%ebp
c000a11f:	57                   	push   %edi
c000a120:	81 ec 54 02 00 00    	sub    $0x254,%esp
/work/x86_os_my/fs/dir.c:129
	struct inode* dir_inode = parent_dir->inode;	//dir->inode：“已打开的 inode 队列”part->open_inodes 中的节点
c000a126:	8b 45 08             	mov    0x8(%ebp),%eax
c000a129:	8b 00                	mov    (%eax),%eax
c000a12b:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:130
	uint32_t dir_size = dir_inode->i_size;			//inode->i_size：当inode是目录时，代表 目录下所有目录项大小之和
c000a12e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a131:	8b 40 04             	mov    0x4(%eax),%eax
c000a134:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:131
	uint32_t dir_entry_size = cur_part->sb->dir_entry_size;
c000a137:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c000a13c:	8b 40 1c             	mov    0x1c(%eax),%eax
c000a13f:	8b 40 30             	mov    0x30(%eax),%eax
c000a142:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/dir.c:133

	ASSERT(dir_size % dir_entry_size == 0);	// dir_size应该是dir_entry_size的整数倍
c000a145:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000a148:	ba 00 00 00 00       	mov    $0x0,%edx
c000a14d:	f7 75 e8             	divl   -0x18(%ebp)
c000a150:	89 d0                	mov    %edx,%eax
c000a152:	85 c0                	test   %eax,%eax
c000a154:	74 1c                	je     c000a172 <sync_dir_entry+0x56>
/work/x86_os_my/fs/dir.c:133 (discriminator 1)
c000a156:	68 c4 d3 00 c0       	push   $0xc000d3c4
c000a15b:	68 34 d5 00 c0       	push   $0xc000d534
c000a160:	68 85 00 00 00       	push   $0x85
c000a165:	68 ba d3 00 c0       	push   $0xc000d3ba
c000a16a:	e8 b2 81 ff ff       	call   c0002321 <panic_spin>
c000a16f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:135

	uint32_t dir_entrys_per_sec = (512 / dir_entry_size);	// 每扇区最多有几个目录项【保证了：写入目录项时不会跨扇区】
c000a172:	b8 00 02 00 00       	mov    $0x200,%eax
c000a177:	ba 00 00 00 00       	mov    $0x0,%edx
c000a17c:	f7 75 e8             	divl   -0x18(%ebp)
c000a17f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/dir.c:136
	int32_t block_lba = -1;
c000a182:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
/work/x86_os_my/fs/dir.c:140


	/* 将该目录inode管理的所有块(扇区)地址(12个直接块+ 128个间接块)存入all_blocks */
	uint8_t block_idx = 0;
c000a189:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/fs/dir.c:143
	// all_blocks 保存目录中 所有数据块的地址【4*140=560字节，去掉前12个直接块的地址48字节，后边全是间接块，后边正好是512字节】
	// 注意: all_blocks 里面并没有一级间接表的地址，只有直接块+间接块的地址！
	uint32_t all_blocks[140] = {0};
c000a18d:	8d 95 a8 fd ff ff    	lea    -0x258(%ebp),%edx
c000a193:	b8 00 00 00 00       	mov    $0x0,%eax
c000a198:	b9 8c 00 00 00       	mov    $0x8c,%ecx
c000a19d:	89 d7                	mov    %edx,%edi
c000a19f:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/fs/dir.c:144
	while (block_idx < 12) {
c000a1a1:	eb 22                	jmp    c000a1c5 <sync_dir_entry+0xa9>
/work/x86_os_my/fs/dir.c:145
		all_blocks[block_idx] = dir_inode->i_sectors[block_idx];
c000a1a3:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000a1a7:	0f b6 4d f7          	movzbl -0x9(%ebp),%ecx
c000a1ab:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000a1ae:	83 c1 04             	add    $0x4,%ecx
c000a1b1:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
c000a1b4:	89 94 85 a8 fd ff ff 	mov    %edx,-0x258(%ebp,%eax,4)
/work/x86_os_my/fs/dir.c:146
		block_idx++;
c000a1bb:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000a1bf:	83 c0 01             	add    $0x1,%eax
c000a1c2:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/dir.c:144
	/* 将该目录inode管理的所有块(扇区)地址(12个直接块+ 128个间接块)存入all_blocks */
	uint8_t block_idx = 0;
	// all_blocks 保存目录中 所有数据块的地址【4*140=560字节，去掉前12个直接块的地址48字节，后边全是间接块，后边正好是512字节】
	// 注意: all_blocks 里面并没有一级间接表的地址，只有直接块+间接块的地址！
	uint32_t all_blocks[140] = {0};
	while (block_idx < 12) {
c000a1c5:	80 7d f7 0b          	cmpb   $0xb,-0x9(%ebp)
c000a1c9:	76 d8                	jbe    c000a1a3 <sync_dir_entry+0x87>
/work/x86_os_my/fs/dir.c:151
		block_idx++;
	}


	/* 开始遍历所有块以寻找目录项空位 */
	block_idx = 0;
c000a1cb:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/fs/dir.c:152
	while (block_idx < 140) {	// 文件(包括目录)最多管理140个块
c000a1cf:	e9 3f 03 00 00       	jmp    c000a513 <sync_dir_entry+0x3f7>
/work/x86_os_my/fs/dir.c:155
		/* 一、若inode管理的第block_idx块是不存在的，需要分配。
		   下边是需要分配块的三种情况 @1 @2 @3 */
		int32_t block_bitmap_idx = -1;
c000a1d4:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:156
		if (all_blocks[block_idx] == 0) {
c000a1db:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000a1df:	8b 84 85 a8 fd ff ff 	mov    -0x258(%ebp,%eax,4),%eax
c000a1e6:	85 c0                	test   %eax,%eax
c000a1e8:	0f 85 58 02 00 00    	jne    c000a446 <sync_dir_entry+0x32a>
/work/x86_os_my/fs/dir.c:157
			block_lba = block_bitmap_alloc(cur_part);	// #1 从分区的block位图中，分配1个扇区，返回"扇区地址"
c000a1ee:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c000a1f3:	83 ec 0c             	sub    $0xc,%esp
c000a1f6:	50                   	push   %eax
c000a1f7:	e8 ff eb ff ff       	call   c0008dfb <block_bitmap_alloc>
c000a1fc:	83 c4 10             	add    $0x10,%esp
c000a1ff:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/dir.c:158
			if (block_lba == -1) {
c000a202:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
c000a206:	75 1a                	jne    c000a222 <sync_dir_entry+0x106>
/work/x86_os_my/fs/dir.c:159
				printk("alloc block bitmap for sync_dir_entry failed\n");
c000a208:	83 ec 0c             	sub    $0xc,%esp
c000a20b:	68 e4 d3 00 c0       	push   $0xc000d3e4
c000a210:	e8 f2 c2 ff ff       	call   c0006507 <printk>
c000a215:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:160
				return false;
c000a218:	b8 00 00 00 00       	mov    $0x0,%eax
c000a21d:	e9 10 03 00 00       	jmp    c000a532 <sync_dir_entry+0x416>
/work/x86_os_my/fs/dir.c:163
			}
			/* 每分配一个块就同步一次block_bitmap */
			block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
c000a222:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000a225:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c000a22a:	8b 40 1c             	mov    0x1c(%eax),%eax
c000a22d:	8b 40 28             	mov    0x28(%eax),%eax
c000a230:	29 c2                	sub    %eax,%edx
c000a232:	89 d0                	mov    %edx,%eax
c000a234:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:164
			ASSERT(block_bitmap_idx != -1);	//怎么可能是-1啊。。。？
c000a237:	83 7d dc ff          	cmpl   $0xffffffff,-0x24(%ebp)
c000a23b:	75 1c                	jne    c000a259 <sync_dir_entry+0x13d>
/work/x86_os_my/fs/dir.c:164 (discriminator 1)
c000a23d:	68 12 d4 00 c0       	push   $0xc000d412
c000a242:	68 34 d5 00 c0       	push   $0xc000d534
c000a247:	68 a4 00 00 00       	push   $0xa4
c000a24c:	68 ba d3 00 c0       	push   $0xc000d3ba
c000a251:	e8 cb 80 ff ff       	call   c0002321 <panic_spin>
c000a256:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:165
			bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c000a259:	8b 55 dc             	mov    -0x24(%ebp),%edx
c000a25c:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c000a261:	83 ec 04             	sub    $0x4,%esp
c000a264:	6a 01                	push   $0x1
c000a266:	52                   	push   %edx
c000a267:	50                   	push   %eax
c000a268:	e8 e0 eb ff ff       	call   c0008e4d <bitmap_sync>
c000a26d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:167

			block_bitmap_idx = -1;
c000a270:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:168
			if (block_idx < 12) {			// @1 若是直接块
c000a277:	80 7d f7 0b          	cmpb   $0xb,-0x9(%ebp)
c000a27b:	77 27                	ja     c000a2a4 <sync_dir_entry+0x188>
/work/x86_os_my/fs/dir.c:169
				dir_inode->i_sectors[block_idx] = all_blocks[block_idx] = block_lba;
c000a27d:	0f b6 4d f7          	movzbl -0x9(%ebp),%ecx
c000a281:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000a285:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000a288:	89 94 85 a8 fd ff ff 	mov    %edx,-0x258(%ebp,%eax,4)
c000a28f:	8b 94 85 a8 fd ff ff 	mov    -0x258(%ebp,%eax,4),%edx
c000a296:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a299:	83 c1 04             	add    $0x4,%ecx
c000a29c:	89 14 88             	mov    %edx,(%eax,%ecx,4)
c000a29f:	e9 3c 01 00 00       	jmp    c000a3e0 <sync_dir_entry+0x2c4>
/work/x86_os_my/fs/dir.c:170
			} else if (block_idx == 12) {	// @2 若是未分配 一级间接块表(block_idx==12表示第0个间接块)
c000a2a4:	80 7d f7 0c          	cmpb   $0xc,-0x9(%ebp)
c000a2a8:	0f 85 ff 00 00 00    	jne    c000a3ad <sync_dir_entry+0x291>
/work/x86_os_my/fs/dir.c:171
				dir_inode->i_sectors[12] = block_lba;		// 将 #1 分配的块做为"一级间接块表"地址
c000a2ae:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000a2b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a2b4:	89 50 40             	mov    %edx,0x40(%eax)
/work/x86_os_my/fs/dir.c:173
				
				block_lba = -1;
c000a2b7:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
/work/x86_os_my/fs/dir.c:174
				block_lba = block_bitmap_alloc(cur_part);	// #2 再分配一个块做为"第0个间接块"
c000a2be:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c000a2c3:	83 ec 0c             	sub    $0xc,%esp
c000a2c6:	50                   	push   %eax
c000a2c7:	e8 2f eb ff ff       	call   c0008dfb <block_bitmap_alloc>
c000a2cc:	83 c4 10             	add    $0x10,%esp
c000a2cf:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/dir.c:175
				if (block_lba == -1) {
c000a2d2:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
c000a2d6:	75 57                	jne    c000a32f <sync_dir_entry+0x213>
/work/x86_os_my/fs/dir.c:177
					// 回滚block_bitmap
					block_bitmap_idx = dir_inode->i_sectors[12] - cur_part->sb->data_start_lba;
c000a2d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a2db:	8b 50 40             	mov    0x40(%eax),%edx
c000a2de:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c000a2e3:	8b 40 1c             	mov    0x1c(%eax),%eax
c000a2e6:	8b 40 28             	mov    0x28(%eax),%eax
c000a2e9:	29 c2                	sub    %eax,%edx
c000a2eb:	89 d0                	mov    %edx,%eax
c000a2ed:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:178
					bitmap_set(&cur_part->block_bitmap, block_bitmap_idx, 0);	//释放 #1
c000a2f0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a2f3:	8b 15 b0 22 01 c0    	mov    0xc00122b0,%edx
c000a2f9:	83 c2 20             	add    $0x20,%edx
c000a2fc:	83 ec 04             	sub    $0x4,%esp
c000a2ff:	6a 00                	push   $0x0
c000a301:	50                   	push   %eax
c000a302:	52                   	push   %edx
c000a303:	e8 87 82 ff ff       	call   c000258f <bitmap_set>
c000a308:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:180
					// 取消掉这个一级间接块表
					dir_inode->i_sectors[12] = 0;
c000a30b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a30e:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)
/work/x86_os_my/fs/dir.c:181
					printk("alloc block bitmap for sync_dir_entry failed\n");
c000a315:	83 ec 0c             	sub    $0xc,%esp
c000a318:	68 e4 d3 00 c0       	push   $0xc000d3e4
c000a31d:	e8 e5 c1 ff ff       	call   c0006507 <printk>
c000a322:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:182
					return false;
c000a325:	b8 00 00 00 00       	mov    $0x0,%eax
c000a32a:	e9 03 02 00 00       	jmp    c000a532 <sync_dir_entry+0x416>
/work/x86_os_my/fs/dir.c:185
				}
				/* 每分配一个块就同步一次block_bitmap */
				block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
c000a32f:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000a332:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c000a337:	8b 40 1c             	mov    0x1c(%eax),%eax
c000a33a:	8b 40 28             	mov    0x28(%eax),%eax
c000a33d:	29 c2                	sub    %eax,%edx
c000a33f:	89 d0                	mov    %edx,%eax
c000a341:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:186
				ASSERT(block_bitmap_idx != -1);
c000a344:	83 7d dc ff          	cmpl   $0xffffffff,-0x24(%ebp)
c000a348:	75 1c                	jne    c000a366 <sync_dir_entry+0x24a>
/work/x86_os_my/fs/dir.c:186 (discriminator 1)
c000a34a:	68 12 d4 00 c0       	push   $0xc000d412
c000a34f:	68 34 d5 00 c0       	push   $0xc000d534
c000a354:	68 ba 00 00 00       	push   $0xba
c000a359:	68 ba d3 00 c0       	push   $0xc000d3ba
c000a35e:	e8 be 7f ff ff       	call   c0002321 <panic_spin>
c000a363:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:187
				bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c000a366:	8b 55 dc             	mov    -0x24(%ebp),%edx
c000a369:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c000a36e:	83 ec 04             	sub    $0x4,%esp
c000a371:	6a 01                	push   $0x1
c000a373:	52                   	push   %edx
c000a374:	50                   	push   %eax
c000a375:	e8 d3 ea ff ff       	call   c0008e4d <bitmap_sync>
c000a37a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:190

				/* 把新分配的"第0个间接块地址"写入硬盘中"一级间接块表" */
				all_blocks[12] = block_lba;
c000a37d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000a380:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
/work/x86_os_my/fs/dir.c:194
				// all_blocks 共有4*140=560字节，去掉前12个直接块的地址48字节，后边全是间接块，后边正好是512字节】
				// 注意: all_blocks 里面并没有一级间接表的地址，只有直接块+间接块的地址！
				// 我们的一级间接表大小是和普通数据块大小一样的512字节，可以容纳128个数据块的地址！
				ide_write(cur_part->my_disk, dir_inode->i_sectors[12], all_blocks + 12, 1);
c000a386:	8d 85 a8 fd ff ff    	lea    -0x258(%ebp),%eax
c000a38c:	83 c0 30             	add    $0x30,%eax
c000a38f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000a392:	8b 4a 40             	mov    0x40(%edx),%ecx
c000a395:	8b 15 b0 22 01 c0    	mov    0xc00122b0,%edx
c000a39b:	8b 52 08             	mov    0x8(%edx),%edx
c000a39e:	6a 01                	push   $0x1
c000a3a0:	50                   	push   %eax
c000a3a1:	51                   	push   %ecx
c000a3a2:	52                   	push   %edx
c000a3a3:	e8 5a b8 ff ff       	call   c0005c02 <ide_write>
c000a3a8:	83 c4 10             	add    $0x10,%esp
c000a3ab:	eb 33                	jmp    c000a3e0 <sync_dir_entry+0x2c4>
/work/x86_os_my/fs/dir.c:197
			} else {						// @3 若是未分配 间接块【父目录inode管理的只有前13个数据块需要特殊处理，后边的全是间接块】
				/* 把新分配的第(block_idx-12)个间接块地址"写入硬盘中"一级间接块表 */
				all_blocks[block_idx] = block_lba;
c000a3ad:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000a3b1:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000a3b4:	89 94 85 a8 fd ff ff 	mov    %edx,-0x258(%ebp,%eax,4)
/work/x86_os_my/fs/dir.c:198
				ide_write(cur_part->my_disk, dir_inode->i_sectors[12], all_blocks + 12, 1);
c000a3bb:	8d 85 a8 fd ff ff    	lea    -0x258(%ebp),%eax
c000a3c1:	83 c0 30             	add    $0x30,%eax
c000a3c4:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000a3c7:	8b 4a 40             	mov    0x40(%edx),%ecx
c000a3ca:	8b 15 b0 22 01 c0    	mov    0xc00122b0,%edx
c000a3d0:	8b 52 08             	mov    0x8(%edx),%edx
c000a3d3:	6a 01                	push   $0x1
c000a3d5:	50                   	push   %eax
c000a3d6:	51                   	push   %ecx
c000a3d7:	52                   	push   %edx
c000a3d8:	e8 25 b8 ff ff       	call   c0005c02 <ide_write>
c000a3dd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:204
			}


			/* 这里才是重点，前边只是处理，父目录indoe管理的某个数据块为空的情况，需要新分配数据块，包括一级间接块表、间接块 */
			/* 再将硬盘中，新目录项p_de写入新分配的间接块 */
			memset(io_buf, 0, 512);
c000a3e0:	83 ec 04             	sub    $0x4,%esp
c000a3e3:	68 00 02 00 00       	push   $0x200
c000a3e8:	6a 00                	push   $0x0
c000a3ea:	ff 75 10             	pushl  0x10(%ebp)
c000a3ed:	e8 d1 93 ff ff       	call   c00037c3 <memset>
c000a3f2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:205
			memcpy(io_buf, p_de, dir_entry_size);
c000a3f5:	83 ec 04             	sub    $0x4,%esp
c000a3f8:	ff 75 e8             	pushl  -0x18(%ebp)
c000a3fb:	ff 75 0c             	pushl  0xc(%ebp)
c000a3fe:	ff 75 10             	pushl  0x10(%ebp)
c000a401:	e8 0f 94 ff ff       	call   c0003815 <memcpy>
c000a406:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:206
			ide_write(cur_part->my_disk, all_blocks[block_idx], io_buf, 1);
c000a409:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000a40d:	8b 94 85 a8 fd ff ff 	mov    -0x258(%ebp,%eax,4),%edx
c000a414:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c000a419:	8b 40 08             	mov    0x8(%eax),%eax
c000a41c:	6a 01                	push   $0x1
c000a41e:	ff 75 10             	pushl  0x10(%ebp)
c000a421:	52                   	push   %edx
c000a422:	50                   	push   %eax
c000a423:	e8 da b7 ff ff       	call   c0005c02 <ide_write>
c000a428:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:207
			dir_inode->i_size += dir_entry_size;	//struct inode* dir_inode = parent_dir->inode;更新的是父目录的inode结构
c000a42b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a42e:	8b 50 04             	mov    0x4(%eax),%edx
c000a431:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000a434:	01 c2                	add    %eax,%edx
c000a436:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a439:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/dir.c:208
			return true;
c000a43c:	b8 01 00 00 00       	mov    $0x1,%eax
c000a441:	e9 ec 00 00 00       	jmp    c000a532 <sync_dir_entry+0x416>
/work/x86_os_my/fs/dir.c:213
		}//if (all_blocks[block_idx] == 0)


		/* 二、若inode管理的第block_idx块是存在的，不需要分配，将其读进内存，然后在该块中查找空目录项，将p_de填入 */
		ide_read(cur_part->my_disk, all_blocks[block_idx], io_buf, 1); 
c000a446:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000a44a:	8b 94 85 a8 fd ff ff 	mov    -0x258(%ebp,%eax,4),%edx
c000a451:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c000a456:	8b 40 08             	mov    0x8(%eax),%eax
c000a459:	6a 01                	push   $0x1
c000a45b:	ff 75 10             	pushl  0x10(%ebp)
c000a45e:	52                   	push   %edx
c000a45f:	50                   	push   %eax
c000a460:	e8 29 b6 ff ff       	call   c0005a8e <ide_read>
c000a465:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:215
		/* 在扇区内查找空目录项 */
		uint8_t dir_entry_idx = 0;
c000a468:	c6 45 f6 00          	movb   $0x0,-0xa(%ebp)
/work/x86_os_my/fs/dir.c:216
		struct dir_entry* dir_e = (struct dir_entry*)io_buf;		// dir_e用来在io_buf中遍历目录项【io_buf里面是一个一个的目录项】
c000a46c:	8b 45 10             	mov    0x10(%ebp),%eax
c000a46f:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/dir.c:217
		while (dir_entry_idx < dir_entrys_per_sec) {
c000a472:	e9 85 00 00 00       	jmp    c000a4fc <sync_dir_entry+0x3e0>
/work/x86_os_my/fs/dir.c:218
			if ((dir_e + dir_entry_idx)->f_type == FT_UNKNOWN) {	// 无论是初始化或是删除文件，都会将f_type置为FT_UNKNOWN.
c000a477:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
c000a47b:	89 d0                	mov    %edx,%eax
c000a47d:	01 c0                	add    %eax,%eax
c000a47f:	01 d0                	add    %edx,%eax
c000a481:	c1 e0 03             	shl    $0x3,%eax
c000a484:	89 c2                	mov    %eax,%edx
c000a486:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000a489:	01 d0                	add    %edx,%eax
c000a48b:	8b 40 14             	mov    0x14(%eax),%eax
c000a48e:	85 c0                	test   %eax,%eax
c000a490:	75 60                	jne    c000a4f2 <sync_dir_entry+0x3d6>
/work/x86_os_my/fs/dir.c:219
				memcpy(dir_e + dir_entry_idx, p_de, dir_entry_size);    
c000a492:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
c000a496:	89 d0                	mov    %edx,%eax
c000a498:	01 c0                	add    %eax,%eax
c000a49a:	01 d0                	add    %edx,%eax
c000a49c:	c1 e0 03             	shl    $0x3,%eax
c000a49f:	89 c2                	mov    %eax,%edx
c000a4a1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000a4a4:	01 d0                	add    %edx,%eax
c000a4a6:	83 ec 04             	sub    $0x4,%esp
c000a4a9:	ff 75 e8             	pushl  -0x18(%ebp)
c000a4ac:	ff 75 0c             	pushl  0xc(%ebp)
c000a4af:	50                   	push   %eax
c000a4b0:	e8 60 93 ff ff       	call   c0003815 <memcpy>
c000a4b5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:220
				ide_write(cur_part->my_disk, all_blocks[block_idx], io_buf, 1);
c000a4b8:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000a4bc:	8b 94 85 a8 fd ff ff 	mov    -0x258(%ebp,%eax,4),%edx
c000a4c3:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c000a4c8:	8b 40 08             	mov    0x8(%eax),%eax
c000a4cb:	6a 01                	push   $0x1
c000a4cd:	ff 75 10             	pushl  0x10(%ebp)
c000a4d0:	52                   	push   %edx
c000a4d1:	50                   	push   %eax
c000a4d2:	e8 2b b7 ff ff       	call   c0005c02 <ide_write>
c000a4d7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:222

				dir_inode->i_size += dir_entry_size;
c000a4da:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a4dd:	8b 50 04             	mov    0x4(%eax),%edx
c000a4e0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000a4e3:	01 c2                	add    %eax,%edx
c000a4e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a4e8:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/dir.c:223
				return true;
c000a4eb:	b8 01 00 00 00       	mov    $0x1,%eax
c000a4f0:	eb 40                	jmp    c000a532 <sync_dir_entry+0x416>
/work/x86_os_my/fs/dir.c:225
			}
			dir_entry_idx++;
c000a4f2:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c000a4f6:	83 c0 01             	add    $0x1,%eax
c000a4f9:	88 45 f6             	mov    %al,-0xa(%ebp)
/work/x86_os_my/fs/dir.c:217
		/* 二、若inode管理的第block_idx块是存在的，不需要分配，将其读进内存，然后在该块中查找空目录项，将p_de填入 */
		ide_read(cur_part->my_disk, all_blocks[block_idx], io_buf, 1); 
		/* 在扇区内查找空目录项 */
		uint8_t dir_entry_idx = 0;
		struct dir_entry* dir_e = (struct dir_entry*)io_buf;		// dir_e用来在io_buf中遍历目录项【io_buf里面是一个一个的目录项】
		while (dir_entry_idx < dir_entrys_per_sec) {
c000a4fc:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c000a500:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c000a503:	0f 82 6e ff ff ff    	jb     c000a477 <sync_dir_entry+0x35b>
/work/x86_os_my/fs/dir.c:230
			dir_entry_idx++;
		}


		/* 三、若inode管理的第block_idx块是存在的，不需要分配，但是都不是空闲(FT_UNKNOWN)的 */
		block_idx++;	//下一个inode管理的block
c000a509:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000a50d:	83 c0 01             	add    $0x1,%eax
c000a510:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/dir.c:152
	}


	/* 开始遍历所有块以寻找目录项空位 */
	block_idx = 0;
	while (block_idx < 140) {	// 文件(包括目录)最多管理140个块
c000a513:	80 7d f7 8b          	cmpb   $0x8b,-0x9(%ebp)
c000a517:	0f 86 b7 fc ff ff    	jbe    c000a1d4 <sync_dir_entry+0xb8>
/work/x86_os_my/fs/dir.c:233

		/* 三、若inode管理的第block_idx块是存在的，不需要分配，但是都不是空闲(FT_UNKNOWN)的 */
		block_idx++;	//下一个inode管理的block
	}//while (block_idx < 140)

	printk("directory is full!\n");
c000a51d:	83 ec 0c             	sub    $0xc,%esp
c000a520:	68 29 d4 00 c0       	push   $0xc000d429
c000a525:	e8 dd bf ff ff       	call   c0006507 <printk>
c000a52a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:234
	return false;
c000a52d:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/dir.c:235 (discriminator 1)
}
c000a532:	8b 7d fc             	mov    -0x4(%ebp),%edi
c000a535:	c9                   	leave  
c000a536:	c3                   	ret    

c000a537 <delete_dir_entry>:
delete_dir_entry():
/work/x86_os_my/fs/dir.c:244
（2）根目录是必须存在的，它是文件读写的根基，不应该被清空，它至少要保留 1 个块。
	 如果目录项独占 1个块，并且该块不是根目录最后一个块的话，将其回收。
（3）目录 inode 的 i_size 是目录项大小的总和，因此还要将 i_size 减去一个目录项的单位大小。
（4）目录 inode 改变后，要同步到硬盘。
 */
bool delete_dir_entry(struct partition* part, struct dir* pdir, uint32_t inode_no, void* io_buf) {
c000a537:	55                   	push   %ebp
c000a538:	89 e5                	mov    %esp,%ebp
c000a53a:	57                   	push   %edi
c000a53b:	81 ec 64 02 00 00    	sub    $0x264,%esp
/work/x86_os_my/fs/dir.c:245
	struct inode* dir_inode = pdir->inode;
c000a541:	8b 45 0c             	mov    0xc(%ebp),%eax
c000a544:	8b 00                	mov    (%eax),%eax
c000a546:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/dir.c:246
	uint32_t block_idx = 0, all_blocks[140] = {0};
c000a549:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c000a550:	8d 95 9c fd ff ff    	lea    -0x264(%ebp),%edx
c000a556:	b8 00 00 00 00       	mov    $0x0,%eax
c000a55b:	b9 8c 00 00 00       	mov    $0x8c,%ecx
c000a560:	89 d7                	mov    %edx,%edi
c000a562:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/fs/dir.c:249

	/* 收集目录全部块地址，存到到 all_blocks */
	while (block_idx < 12) {
c000a564:	eb 1a                	jmp    c000a580 <delete_dir_entry+0x49>
/work/x86_os_my/fs/dir.c:250
		all_blocks[block_idx] = dir_inode->i_sectors[block_idx];
c000a566:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000a569:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000a56c:	83 c2 04             	add    $0x4,%edx
c000a56f:	8b 14 90             	mov    (%eax,%edx,4),%edx
c000a572:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000a575:	89 94 85 9c fd ff ff 	mov    %edx,-0x264(%ebp,%eax,4)
/work/x86_os_my/fs/dir.c:251
		block_idx++;
c000a57c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:249
bool delete_dir_entry(struct partition* part, struct dir* pdir, uint32_t inode_no, void* io_buf) {
	struct inode* dir_inode = pdir->inode;
	uint32_t block_idx = 0, all_blocks[140] = {0};

	/* 收集目录全部块地址，存到到 all_blocks */
	while (block_idx < 12) {
c000a580:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
c000a584:	76 e0                	jbe    c000a566 <delete_dir_entry+0x2f>
/work/x86_os_my/fs/dir.c:253
		all_blocks[block_idx] = dir_inode->i_sectors[block_idx];
		block_idx++;
	}
	if (dir_inode->i_sectors[12]) {
c000a586:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000a589:	8b 40 40             	mov    0x40(%eax),%eax
c000a58c:	85 c0                	test   %eax,%eax
c000a58e:	74 22                	je     c000a5b2 <delete_dir_entry+0x7b>
/work/x86_os_my/fs/dir.c:254
		ide_read(part->my_disk, dir_inode->i_sectors[12], all_blocks + 12, 1);
c000a590:	8d 85 9c fd ff ff    	lea    -0x264(%ebp),%eax
c000a596:	83 c0 30             	add    $0x30,%eax
c000a599:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000a59c:	8b 4a 40             	mov    0x40(%edx),%ecx
c000a59f:	8b 55 08             	mov    0x8(%ebp),%edx
c000a5a2:	8b 52 08             	mov    0x8(%edx),%edx
c000a5a5:	6a 01                	push   $0x1
c000a5a7:	50                   	push   %eax
c000a5a8:	51                   	push   %ecx
c000a5a9:	52                   	push   %edx
c000a5aa:	e8 df b4 ff ff       	call   c0005a8e <ide_read>
c000a5af:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:258
	}

	/* 目录项在存储时保证不会跨扇区 */
	uint32_t dir_entry_size = part->sb->dir_entry_size;
c000a5b2:	8b 45 08             	mov    0x8(%ebp),%eax
c000a5b5:	8b 40 1c             	mov    0x1c(%eax),%eax
c000a5b8:	8b 40 30             	mov    0x30(%eax),%eax
c000a5bb:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:259
	uint32_t dir_entrys_per_sec = (SECTOR_SIZE / dir_entry_size);	// 每扇区最大的目录项数目
c000a5be:	b8 00 02 00 00       	mov    $0x200,%eax
c000a5c3:	ba 00 00 00 00       	mov    $0x0,%edx
c000a5c8:	f7 75 dc             	divl   -0x24(%ebp)
c000a5cb:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/dir.c:260
	struct dir_entry* dir_e = (struct dir_entry*)io_buf;
c000a5ce:	8b 45 14             	mov    0x14(%ebp),%eax
c000a5d1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/fs/dir.c:261
	struct dir_entry* dir_entry_found = NULL;
c000a5d4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:263
	uint8_t dir_entry_idx, dir_entry_cnt;
	bool is_dir_first_block = false;	// 目录的第1个块
c000a5db:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
/work/x86_os_my/fs/dir.c:266

	/* 遍历所有块，寻找目录项 */
	block_idx = 0;
c000a5e2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:267
	while (block_idx < 140) {
c000a5e9:	e9 9a 03 00 00       	jmp    c000a988 <delete_dir_entry+0x451>
/work/x86_os_my/fs/dir.c:268
		is_dir_first_block = false;
c000a5ee:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
/work/x86_os_my/fs/dir.c:269
		if (all_blocks[block_idx] == 0) {
c000a5f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000a5f8:	8b 84 85 9c fd ff ff 	mov    -0x264(%ebp,%eax,4),%eax
c000a5ff:	85 c0                	test   %eax,%eax
c000a601:	75 09                	jne    c000a60c <delete_dir_entry+0xd5>
/work/x86_os_my/fs/dir.c:270
			block_idx++;
c000a603:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:271
			continue;
c000a607:	e9 7c 03 00 00       	jmp    c000a988 <delete_dir_entry+0x451>
/work/x86_os_my/fs/dir.c:273
		}
		dir_entry_idx = dir_entry_cnt = 0;
c000a60c:	c6 45 ee 00          	movb   $0x0,-0x12(%ebp)
c000a610:	0f b6 45 ee          	movzbl -0x12(%ebp),%eax
c000a614:	88 45 ef             	mov    %al,-0x11(%ebp)
/work/x86_os_my/fs/dir.c:274
		memset(io_buf, 0, SECTOR_SIZE);
c000a617:	83 ec 04             	sub    $0x4,%esp
c000a61a:	68 00 02 00 00       	push   $0x200
c000a61f:	6a 00                	push   $0x0
c000a621:	ff 75 14             	pushl  0x14(%ebp)
c000a624:	e8 9a 91 ff ff       	call   c00037c3 <memset>
c000a629:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:276
		/* 读取目录inode管理的各个数据块（扇区），里面是目录项 */
		ide_read(part->my_disk, all_blocks[block_idx], io_buf, 1);	//dir_e = io_buf
c000a62c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000a62f:	8b 94 85 9c fd ff ff 	mov    -0x264(%ebp,%eax,4),%edx
c000a636:	8b 45 08             	mov    0x8(%ebp),%eax
c000a639:	8b 40 08             	mov    0x8(%eax),%eax
c000a63c:	6a 01                	push   $0x1
c000a63e:	ff 75 14             	pushl  0x14(%ebp)
c000a641:	52                   	push   %edx
c000a642:	50                   	push   %eax
c000a643:	e8 46 b4 ff ff       	call   c0005a8e <ide_read>
c000a648:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:279

		/* 遍历所有的目录项，统计该扇区的目录项数量 + 是否找到要删除的目录项 */
		while (dir_entry_idx < dir_entrys_per_sec) {
c000a64b:	e9 13 01 00 00       	jmp    c000a763 <delete_dir_entry+0x22c>
/work/x86_os_my/fs/dir.c:280
			if ((dir_e + dir_entry_idx)->f_type != FT_UNKNOWN) {	// 初始化或是删除文件，会将f_type置为FT_UNKNOWN.
c000a650:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c000a654:	89 d0                	mov    %edx,%eax
c000a656:	01 c0                	add    %eax,%eax
c000a658:	01 d0                	add    %edx,%eax
c000a65a:	c1 e0 03             	shl    $0x3,%eax
c000a65d:	89 c2                	mov    %eax,%edx
c000a65f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000a662:	01 d0                	add    %edx,%eax
c000a664:	8b 40 14             	mov    0x14(%eax),%eax
c000a667:	85 c0                	test   %eax,%eax
c000a669:	0f 84 ea 00 00 00    	je     c000a759 <delete_dir_entry+0x222>
/work/x86_os_my/fs/dir.c:281
				if (!strcmp((dir_e + dir_entry_idx)->filename, ".")) {
c000a66f:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c000a673:	89 d0                	mov    %edx,%eax
c000a675:	01 c0                	add    %eax,%eax
c000a677:	01 d0                	add    %edx,%eax
c000a679:	c1 e0 03             	shl    $0x3,%eax
c000a67c:	89 c2                	mov    %eax,%edx
c000a67e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000a681:	01 d0                	add    %edx,%eax
c000a683:	83 ec 08             	sub    $0x8,%esp
c000a686:	68 3d d4 00 c0       	push   $0xc000d43d
c000a68b:	50                   	push   %eax
c000a68c:	e8 07 93 ff ff       	call   c0003998 <strcmp>
c000a691:	83 c4 10             	add    $0x10,%esp
c000a694:	84 c0                	test   %al,%al
c000a696:	75 0c                	jne    c000a6a4 <delete_dir_entry+0x16d>
/work/x86_os_my/fs/dir.c:282
					is_dir_first_block = true;
c000a698:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
c000a69f:	e9 b5 00 00 00       	jmp    c000a759 <delete_dir_entry+0x222>
/work/x86_os_my/fs/dir.c:283
				} else if (strcmp((dir_e + dir_entry_idx)->filename, ".") && strcmp((dir_e + dir_entry_idx)->filename, "..")) {	//不是.和..
c000a6a4:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c000a6a8:	89 d0                	mov    %edx,%eax
c000a6aa:	01 c0                	add    %eax,%eax
c000a6ac:	01 d0                	add    %edx,%eax
c000a6ae:	c1 e0 03             	shl    $0x3,%eax
c000a6b1:	89 c2                	mov    %eax,%edx
c000a6b3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000a6b6:	01 d0                	add    %edx,%eax
c000a6b8:	83 ec 08             	sub    $0x8,%esp
c000a6bb:	68 3d d4 00 c0       	push   $0xc000d43d
c000a6c0:	50                   	push   %eax
c000a6c1:	e8 d2 92 ff ff       	call   c0003998 <strcmp>
c000a6c6:	83 c4 10             	add    $0x10,%esp
c000a6c9:	84 c0                	test   %al,%al
c000a6cb:	0f 84 88 00 00 00    	je     c000a759 <delete_dir_entry+0x222>
/work/x86_os_my/fs/dir.c:283 (discriminator 1)
c000a6d1:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c000a6d5:	89 d0                	mov    %edx,%eax
c000a6d7:	01 c0                	add    %eax,%eax
c000a6d9:	01 d0                	add    %edx,%eax
c000a6db:	c1 e0 03             	shl    $0x3,%eax
c000a6de:	89 c2                	mov    %eax,%edx
c000a6e0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000a6e3:	01 d0                	add    %edx,%eax
c000a6e5:	83 ec 08             	sub    $0x8,%esp
c000a6e8:	68 3f d4 00 c0       	push   $0xc000d43f
c000a6ed:	50                   	push   %eax
c000a6ee:	e8 a5 92 ff ff       	call   c0003998 <strcmp>
c000a6f3:	83 c4 10             	add    $0x10,%esp
c000a6f6:	84 c0                	test   %al,%al
c000a6f8:	74 5f                	je     c000a759 <delete_dir_entry+0x222>
/work/x86_os_my/fs/dir.c:284
					dir_entry_cnt++;     // 统计此扇区内的目录项个数，用来判断删除目录项后是否回收该扇区
c000a6fa:	0f b6 45 ee          	movzbl -0x12(%ebp),%eax
c000a6fe:	83 c0 01             	add    $0x1,%eax
c000a701:	88 45 ee             	mov    %al,-0x12(%ebp)
/work/x86_os_my/fs/dir.c:286
					// 目录项的成员inode号和目标inode号一致，就将其记录在dir_entry_found！！！
					if ((dir_e + dir_entry_idx)->i_no == inode_no) {
c000a704:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c000a708:	89 d0                	mov    %edx,%eax
c000a70a:	01 c0                	add    %eax,%eax
c000a70c:	01 d0                	add    %edx,%eax
c000a70e:	c1 e0 03             	shl    $0x3,%eax
c000a711:	89 c2                	mov    %eax,%edx
c000a713:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000a716:	01 d0                	add    %edx,%eax
c000a718:	8b 40 10             	mov    0x10(%eax),%eax
c000a71b:	3b 45 10             	cmp    0x10(%ebp),%eax
c000a71e:	75 39                	jne    c000a759 <delete_dir_entry+0x222>
/work/x86_os_my/fs/dir.c:287
						ASSERT(dir_entry_found == NULL);  // 确保目录中只有一个编号为inode_no的inode,找到一次后dir_entry_found就不再是NULL
c000a720:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c000a724:	74 1c                	je     c000a742 <delete_dir_entry+0x20b>
/work/x86_os_my/fs/dir.c:287 (discriminator 1)
c000a726:	68 42 d4 00 c0       	push   $0xc000d442
c000a72b:	68 44 d5 00 c0       	push   $0xc000d544
c000a730:	68 1f 01 00 00       	push   $0x11f
c000a735:	68 ba d3 00 c0       	push   $0xc000d3ba
c000a73a:	e8 e2 7b ff ff       	call   c0002321 <panic_spin>
c000a73f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:288
						dir_entry_found = dir_e + dir_entry_idx;
c000a742:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c000a746:	89 d0                	mov    %edx,%eax
c000a748:	01 c0                	add    %eax,%eax
c000a74a:	01 d0                	add    %edx,%eax
c000a74c:	c1 e0 03             	shl    $0x3,%eax
c000a74f:	89 c2                	mov    %eax,%edx
c000a751:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000a754:	01 d0                	add    %edx,%eax
c000a756:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:293
						/* 找到后也继续遍历,统计总共的目录项数 */
					}
				}
			}
			dir_entry_idx++;
c000a759:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c000a75d:	83 c0 01             	add    $0x1,%eax
c000a760:	88 45 ef             	mov    %al,-0x11(%ebp)
/work/x86_os_my/fs/dir.c:279
		memset(io_buf, 0, SECTOR_SIZE);
		/* 读取目录inode管理的各个数据块（扇区），里面是目录项 */
		ide_read(part->my_disk, all_blocks[block_idx], io_buf, 1);	//dir_e = io_buf

		/* 遍历所有的目录项，统计该扇区的目录项数量 + 是否找到要删除的目录项 */
		while (dir_entry_idx < dir_entrys_per_sec) {
c000a763:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c000a767:	3b 45 d8             	cmp    -0x28(%ebp),%eax
c000a76a:	0f 82 e0 fe ff ff    	jb     c000a650 <delete_dir_entry+0x119>
/work/x86_os_my/fs/dir.c:297
			}
			dir_entry_idx++;
		}

		/* 若此扇区未找到该目录项,继续在下个扇区中找 */
		if (dir_entry_found == NULL) {
c000a770:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c000a774:	75 09                	jne    c000a77f <delete_dir_entry+0x248>
/work/x86_os_my/fs/dir.c:298
			block_idx++;
c000a776:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:299
			continue;
c000a77a:	e9 09 02 00 00       	jmp    c000a988 <delete_dir_entry+0x451>
/work/x86_os_my/fs/dir.c:303
		}

		/* 在此扇区中找到目录项后，清除该目录项并判断是否回收扇区，随后退出循环直接返回 */
		ASSERT(dir_entry_cnt >= 1);	//此扇区内的目录项个数
c000a77f:	80 7d ee 00          	cmpb   $0x0,-0x12(%ebp)
c000a783:	75 1c                	jne    c000a7a1 <delete_dir_entry+0x26a>
/work/x86_os_my/fs/dir.c:303 (discriminator 1)
c000a785:	68 5a d4 00 c0       	push   $0xc000d45a
c000a78a:	68 44 d5 00 c0       	push   $0xc000d544
c000a78f:	68 2f 01 00 00       	push   $0x12f
c000a794:	68 ba d3 00 c0       	push   $0xc000d3ba
c000a799:	e8 83 7b ff ff       	call   c0002321 <panic_spin>
c000a79e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:305
		/* 若该扇区上只有该目录项自己，则将整个扇区回收。如果目录只有第1个扇区，则不能回收 */
		if (dir_entry_cnt == 1 && !is_dir_first_block) {
c000a7a1:	80 7d ee 01          	cmpb   $0x1,-0x12(%ebp)
c000a7a5:	0f 85 43 01 00 00    	jne    c000a8ee <delete_dir_entry+0x3b7>
/work/x86_os_my/fs/dir.c:305 (discriminator 1)
c000a7ab:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c000a7af:	0f 85 39 01 00 00    	jne    c000a8ee <delete_dir_entry+0x3b7>
/work/x86_os_my/fs/dir.c:307
			/* a 在块位图中回收该块 */
			uint32_t block_bitmap_idx = all_blocks[block_idx] - part->sb->data_start_lba;
c000a7b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000a7b8:	8b 94 85 9c fd ff ff 	mov    -0x264(%ebp,%eax,4),%edx
c000a7bf:	8b 45 08             	mov    0x8(%ebp),%eax
c000a7c2:	8b 40 1c             	mov    0x1c(%eax),%eax
c000a7c5:	8b 40 28             	mov    0x28(%eax),%eax
c000a7c8:	29 c2                	sub    %eax,%edx
c000a7ca:	89 d0                	mov    %edx,%eax
c000a7cc:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/fs/dir.c:308
			bitmap_set(&part->block_bitmap, block_bitmap_idx, 0);
c000a7cf:	8b 45 08             	mov    0x8(%ebp),%eax
c000a7d2:	83 c0 20             	add    $0x20,%eax
c000a7d5:	83 ec 04             	sub    $0x4,%esp
c000a7d8:	6a 00                	push   $0x0
c000a7da:	ff 75 d0             	pushl  -0x30(%ebp)
c000a7dd:	50                   	push   %eax
c000a7de:	e8 ac 7d ff ff       	call   c000258f <bitmap_set>
c000a7e3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:309
			bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c000a7e6:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c000a7eb:	83 ec 04             	sub    $0x4,%esp
c000a7ee:	6a 01                	push   $0x1
c000a7f0:	ff 75 d0             	pushl  -0x30(%ebp)
c000a7f3:	50                   	push   %eax
c000a7f4:	e8 54 e6 ff ff       	call   c0008e4d <bitmap_sync>
c000a7f9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:312

			/* b 将块地址从数组 i_sectors 或 从一级间接索引表中去掉 */
			if (block_idx < 12) {	//直接块
c000a7fc:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
c000a800:	77 15                	ja     c000a817 <delete_dir_entry+0x2e0>
/work/x86_os_my/fs/dir.c:313
				dir_inode->i_sectors[block_idx] = 0;
c000a802:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000a805:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000a808:	83 c2 04             	add    $0x4,%edx
c000a80b:	c7 04 90 00 00 00 00 	movl   $0x0,(%eax,%edx,4)
/work/x86_os_my/fs/dir.c:305
		}

		/* 在此扇区中找到目录项后，清除该目录项并判断是否回收扇区，随后退出循环直接返回 */
		ASSERT(dir_entry_cnt >= 1);	//此扇区内的目录项个数
		/* 若该扇区上只有该目录项自己，则将整个扇区回收。如果目录只有第1个扇区，则不能回收 */
		if (dir_entry_cnt == 1 && !is_dir_first_block) {
c000a812:	e9 09 01 00 00       	jmp    c000a920 <delete_dir_entry+0x3e9>
/work/x86_os_my/fs/dir.c:316
			/* b 将块地址从数组 i_sectors 或 从一级间接索引表中去掉 */
			if (block_idx < 12) {	//直接块
				dir_inode->i_sectors[block_idx] = 0;
			} else {	// 在一级间接索引表中擦除该间接块地址
				/*先判断一级间接索引表中间接块的数量：如果仅有这1个间接块，连同间接索引表所在的块一同回收 */
				uint32_t indirect_blocks = 0;
c000a817:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
/work/x86_os_my/fs/dir.c:317
				uint32_t indirect_block_idx = 12;
c000a81e:	c7 45 cc 0c 00 00 00 	movl   $0xc,-0x34(%ebp)
/work/x86_os_my/fs/dir.c:318
				while (indirect_block_idx < 140) {
c000a825:	eb 12                	jmp    c000a839 <delete_dir_entry+0x302>
/work/x86_os_my/fs/dir.c:319
					if (all_blocks[indirect_block_idx] != 0) {
c000a827:	8b 45 cc             	mov    -0x34(%ebp),%eax
c000a82a:	8b 84 85 9c fd ff ff 	mov    -0x264(%ebp,%eax,4),%eax
c000a831:	85 c0                	test   %eax,%eax
c000a833:	74 04                	je     c000a839 <delete_dir_entry+0x302>
/work/x86_os_my/fs/dir.c:320
						indirect_blocks++;	//间接块的数量
c000a835:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
/work/x86_os_my/fs/dir.c:318
				dir_inode->i_sectors[block_idx] = 0;
			} else {	// 在一级间接索引表中擦除该间接块地址
				/*先判断一级间接索引表中间接块的数量：如果仅有这1个间接块，连同间接索引表所在的块一同回收 */
				uint32_t indirect_blocks = 0;
				uint32_t indirect_block_idx = 12;
				while (indirect_block_idx < 140) {
c000a839:	81 7d cc 8b 00 00 00 	cmpl   $0x8b,-0x34(%ebp)
c000a840:	76 e5                	jbe    c000a827 <delete_dir_entry+0x2f0>
/work/x86_os_my/fs/dir.c:323
					if (all_blocks[indirect_block_idx] != 0) {
						indirect_blocks++;	//间接块的数量
					}
				}
				ASSERT(indirect_blocks >= 1);	// 包括当前间接块
c000a842:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c000a846:	75 1c                	jne    c000a864 <delete_dir_entry+0x32d>
/work/x86_os_my/fs/dir.c:323 (discriminator 1)
c000a848:	68 6d d4 00 c0       	push   $0xc000d46d
c000a84d:	68 44 d5 00 c0       	push   $0xc000d544
c000a852:	68 43 01 00 00       	push   $0x143
c000a857:	68 ba d3 00 c0       	push   $0xc000d3ba
c000a85c:	e8 c0 7a ff ff       	call   c0002321 <panic_spin>
c000a861:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:325

				if (indirect_blocks > 1) {	  // 一级间接索引表中还包括其它间接块,仅在索引表中擦除当前间接块地址
c000a864:	83 7d e4 01          	cmpl   $0x1,-0x1c(%ebp)
c000a868:	76 35                	jbe    c000a89f <delete_dir_entry+0x368>
/work/x86_os_my/fs/dir.c:326
					all_blocks[block_idx] = 0;
c000a86a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000a86d:	c7 84 85 9c fd ff ff 	movl   $0x0,-0x264(%ebp,%eax,4)
c000a874:	00 00 00 00 
/work/x86_os_my/fs/dir.c:327
					ide_write(part->my_disk, dir_inode->i_sectors[12], all_blocks + 12, 1);
c000a878:	8d 85 9c fd ff ff    	lea    -0x264(%ebp),%eax
c000a87e:	83 c0 30             	add    $0x30,%eax
c000a881:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000a884:	8b 4a 40             	mov    0x40(%edx),%ecx
c000a887:	8b 55 08             	mov    0x8(%ebp),%edx
c000a88a:	8b 52 08             	mov    0x8(%edx),%edx
c000a88d:	6a 01                	push   $0x1
c000a88f:	50                   	push   %eax
c000a890:	51                   	push   %ecx
c000a891:	52                   	push   %edx
c000a892:	e8 6b b3 ff ff       	call   c0005c02 <ide_write>
c000a897:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:305
		}

		/* 在此扇区中找到目录项后，清除该目录项并判断是否回收扇区，随后退出循环直接返回 */
		ASSERT(dir_entry_cnt >= 1);	//此扇区内的目录项个数
		/* 若该扇区上只有该目录项自己，则将整个扇区回收。如果目录只有第1个扇区，则不能回收 */
		if (dir_entry_cnt == 1 && !is_dir_first_block) {
c000a89a:	e9 81 00 00 00       	jmp    c000a920 <delete_dir_entry+0x3e9>
/work/x86_os_my/fs/dir.c:330
				if (indirect_blocks > 1) {	  // 一级间接索引表中还包括其它间接块,仅在索引表中擦除当前间接块地址
					all_blocks[block_idx] = 0;
					ide_write(part->my_disk, dir_inode->i_sectors[12], all_blocks + 12, 1);
				} else {	// 间接索引表中就当前这1个间接块,直接把间接索引表所在的块回收,然后擦除间接索引表块地址
					/* 回收一级间接索引表所在的块 */
					block_bitmap_idx = dir_inode->i_sectors[12] - part->sb->data_start_lba;
c000a89f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000a8a2:	8b 50 40             	mov    0x40(%eax),%edx
c000a8a5:	8b 45 08             	mov    0x8(%ebp),%eax
c000a8a8:	8b 40 1c             	mov    0x1c(%eax),%eax
c000a8ab:	8b 40 28             	mov    0x28(%eax),%eax
c000a8ae:	29 c2                	sub    %eax,%edx
c000a8b0:	89 d0                	mov    %edx,%eax
c000a8b2:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/fs/dir.c:331
					bitmap_set(&part->block_bitmap, block_bitmap_idx, 0);
c000a8b5:	8b 45 08             	mov    0x8(%ebp),%eax
c000a8b8:	83 c0 20             	add    $0x20,%eax
c000a8bb:	83 ec 04             	sub    $0x4,%esp
c000a8be:	6a 00                	push   $0x0
c000a8c0:	ff 75 d0             	pushl  -0x30(%ebp)
c000a8c3:	50                   	push   %eax
c000a8c4:	e8 c6 7c ff ff       	call   c000258f <bitmap_set>
c000a8c9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:332
					bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c000a8cc:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c000a8d1:	83 ec 04             	sub    $0x4,%esp
c000a8d4:	6a 01                	push   $0x1
c000a8d6:	ff 75 d0             	pushl  -0x30(%ebp)
c000a8d9:	50                   	push   %eax
c000a8da:	e8 6e e5 ff ff       	call   c0008e4d <bitmap_sync>
c000a8df:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:335

					/* 将间接索引表地址清0 */
					dir_inode->i_sectors[12] = 0;
c000a8e2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000a8e5:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)
/work/x86_os_my/fs/dir.c:305
		}

		/* 在此扇区中找到目录项后，清除该目录项并判断是否回收扇区，随后退出循环直接返回 */
		ASSERT(dir_entry_cnt >= 1);	//此扇区内的目录项个数
		/* 若该扇区上只有该目录项自己，则将整个扇区回收。如果目录只有第1个扇区，则不能回收 */
		if (dir_entry_cnt == 1 && !is_dir_first_block) {
c000a8ec:	eb 32                	jmp    c000a920 <delete_dir_entry+0x3e9>
/work/x86_os_my/fs/dir.c:340
					dir_inode->i_sectors[12] = 0;
				}
			}
		} else {
		/* 仅将该目录项清空 */
			memset(dir_entry_found, 0, dir_entry_size);	//要删除的目录项在 dir_entry_found 中
c000a8ee:	83 ec 04             	sub    $0x4,%esp
c000a8f1:	ff 75 dc             	pushl  -0x24(%ebp)
c000a8f4:	6a 00                	push   $0x0
c000a8f6:	ff 75 f0             	pushl  -0x10(%ebp)
c000a8f9:	e8 c5 8e ff ff       	call   c00037c3 <memset>
c000a8fe:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:341
			ide_write(part->my_disk, all_blocks[block_idx], io_buf, 1);	//io_buf中是所有的目录项
c000a901:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000a904:	8b 94 85 9c fd ff ff 	mov    -0x264(%ebp,%eax,4),%edx
c000a90b:	8b 45 08             	mov    0x8(%ebp),%eax
c000a90e:	8b 40 08             	mov    0x8(%eax),%eax
c000a911:	6a 01                	push   $0x1
c000a913:	ff 75 14             	pushl  0x14(%ebp)
c000a916:	52                   	push   %edx
c000a917:	50                   	push   %eax
c000a918:	e8 e5 b2 ff ff       	call   c0005c02 <ide_write>
c000a91d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:345
		}

		/* 更新inode信息并同步到硬盘 */
		ASSERT(dir_inode->i_size >= dir_entry_size);
c000a920:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000a923:	8b 40 04             	mov    0x4(%eax),%eax
c000a926:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c000a929:	73 1c                	jae    c000a947 <delete_dir_entry+0x410>
/work/x86_os_my/fs/dir.c:345 (discriminator 1)
c000a92b:	68 84 d4 00 c0       	push   $0xc000d484
c000a930:	68 44 d5 00 c0       	push   $0xc000d544
c000a935:	68 59 01 00 00       	push   $0x159
c000a93a:	68 ba d3 00 c0       	push   $0xc000d3ba
c000a93f:	e8 dd 79 ff ff       	call   c0002321 <panic_spin>
c000a944:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:346
		dir_inode->i_size -= dir_entry_size;
c000a947:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000a94a:	8b 40 04             	mov    0x4(%eax),%eax
c000a94d:	2b 45 dc             	sub    -0x24(%ebp),%eax
c000a950:	89 c2                	mov    %eax,%edx
c000a952:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000a955:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/dir.c:347
		memset(io_buf, 0, SECTOR_SIZE * 2);
c000a958:	83 ec 04             	sub    $0x4,%esp
c000a95b:	68 00 04 00 00       	push   $0x400
c000a960:	6a 00                	push   $0x0
c000a962:	ff 75 14             	pushl  0x14(%ebp)
c000a965:	e8 59 8e ff ff       	call   c00037c3 <memset>
c000a96a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:349
		// 同步目录文件的inode到硬盘
		inode_sync(part, dir_inode, io_buf);
c000a96d:	83 ec 04             	sub    $0x4,%esp
c000a970:	ff 75 14             	pushl  0x14(%ebp)
c000a973:	ff 75 e0             	pushl  -0x20(%ebp)
c000a976:	ff 75 08             	pushl  0x8(%ebp)
c000a979:	e8 ea dc ff ff       	call   c0008668 <inode_sync>
c000a97e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:351

		return true;
c000a981:	b8 01 00 00 00       	mov    $0x1,%eax
c000a986:	eb 12                	jmp    c000a99a <delete_dir_entry+0x463>
/work/x86_os_my/fs/dir.c:267
	uint8_t dir_entry_idx, dir_entry_cnt;
	bool is_dir_first_block = false;	// 目录的第1个块

	/* 遍历所有块，寻找目录项 */
	block_idx = 0;
	while (block_idx < 140) {
c000a988:	81 7d f4 8b 00 00 00 	cmpl   $0x8b,-0xc(%ebp)
c000a98f:	0f 86 59 fc ff ff    	jbe    c000a5ee <delete_dir_entry+0xb7>
/work/x86_os_my/fs/dir.c:355

		return true;
	}//while (block_idx < 140)

	/* 所有块中未找到则返回false，若出现这种情况应该是 serarch_file 出错了 */
	return false;
c000a995:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/dir.c:356 (discriminator 1)
}
c000a99a:	8b 7d fc             	mov    -0x4(%ebp),%edi
c000a99d:	c9                   	leave  
c000a99e:	c3                   	ret    

c000a99f <dir_read>:
dir_read():
/work/x86_os_my/fs/dir.c:361


/* 读取目录,成功返回1个目录项,失败返回NULL */
// dir->dir_pos 记录遍历目录时，"游标"在目录内的偏移【以前读到的目录项】
struct dir_entry* dir_read(struct dir* dir) {
c000a99f:	55                   	push   %ebp
c000a9a0:	89 e5                	mov    %esp,%ebp
c000a9a2:	57                   	push   %edi
c000a9a3:	81 ec 54 02 00 00    	sub    $0x254,%esp
/work/x86_os_my/fs/dir.c:362
	struct dir_entry* dir_e = (struct dir_entry*)dir->dir_buf;
c000a9a9:	8b 45 08             	mov    0x8(%ebp),%eax
c000a9ac:	83 c0 08             	add    $0x8,%eax
c000a9af:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/dir.c:363
	struct inode* dir_inode = dir->inode;
c000a9b2:	8b 45 08             	mov    0x8(%ebp),%eax
c000a9b5:	8b 00                	mov    (%eax),%eax
c000a9b7:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/dir.c:364
	uint32_t all_blocks[140] = {0}, block_cnt = 12;
c000a9ba:	8d 95 a8 fd ff ff    	lea    -0x258(%ebp),%edx
c000a9c0:	b8 00 00 00 00       	mov    $0x0,%eax
c000a9c5:	b9 8c 00 00 00       	mov    $0x8c,%ecx
c000a9ca:	89 d7                	mov    %edx,%edi
c000a9cc:	f3 ab                	rep stos %eax,%es:(%edi)
c000a9ce:	c7 45 f4 0c 00 00 00 	movl   $0xc,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:365
	uint32_t block_idx = 0, dir_entry_idx = 0;
c000a9d5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c000a9dc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:367
	// 所有数据块的地址，汇集到 all_blocks 中
	while (block_idx < 12) {
c000a9e3:	eb 1a                	jmp    c000a9ff <dir_read+0x60>
/work/x86_os_my/fs/dir.c:368
		all_blocks[block_idx] = dir_inode->i_sectors[block_idx];
c000a9e5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000a9e8:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000a9eb:	83 c2 04             	add    $0x4,%edx
c000a9ee:	8b 14 90             	mov    (%eax,%edx,4),%edx
c000a9f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a9f4:	89 94 85 a8 fd ff ff 	mov    %edx,-0x258(%ebp,%eax,4)
/work/x86_os_my/fs/dir.c:369
		block_idx++;
c000a9fb:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:367
	struct dir_entry* dir_e = (struct dir_entry*)dir->dir_buf;
	struct inode* dir_inode = dir->inode;
	uint32_t all_blocks[140] = {0}, block_cnt = 12;
	uint32_t block_idx = 0, dir_entry_idx = 0;
	// 所有数据块的地址，汇集到 all_blocks 中
	while (block_idx < 12) {
c000a9ff:	83 7d f0 0b          	cmpl   $0xb,-0x10(%ebp)
c000aa03:	76 e0                	jbe    c000a9e5 <dir_read+0x46>
/work/x86_os_my/fs/dir.c:371
		all_blocks[block_idx] = dir_inode->i_sectors[block_idx];
		block_idx++;
	}
	if (dir_inode->i_sectors[12] != 0) {
c000aa05:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000aa08:	8b 40 40             	mov    0x40(%eax),%eax
c000aa0b:	85 c0                	test   %eax,%eax
c000aa0d:	74 2c                	je     c000aa3b <dir_read+0x9c>
/work/x86_os_my/fs/dir.c:372
		ide_read(cur_part->my_disk, dir_inode->i_sectors[12], all_blocks + 12, 1);
c000aa0f:	8d 85 a8 fd ff ff    	lea    -0x258(%ebp),%eax
c000aa15:	83 c0 30             	add    $0x30,%eax
c000aa18:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000aa1b:	8b 4a 40             	mov    0x40(%edx),%ecx
c000aa1e:	8b 15 b0 22 01 c0    	mov    0xc00122b0,%edx
c000aa24:	8b 52 08             	mov    0x8(%edx),%edx
c000aa27:	6a 01                	push   $0x1
c000aa29:	50                   	push   %eax
c000aa2a:	51                   	push   %ecx
c000aa2b:	52                   	push   %edx
c000aa2c:	e8 5d b0 ff ff       	call   c0005a8e <ide_read>
c000aa31:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:373
		block_cnt = 140;
c000aa34:	c7 45 f4 8c 00 00 00 	movl   $0x8c,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:375
	}
	block_idx = 0;
c000aa3b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:377

	uint32_t cur_dir_entry_pos = 0;	// 当前目录项的偏移,此项用来判断是否是之前已经返回过的目录项
c000aa42:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
/work/x86_os_my/fs/dir.c:378
	uint32_t dir_entry_size = cur_part->sb->dir_entry_size;
c000aa49:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c000aa4e:	8b 40 1c             	mov    0x1c(%eax),%eax
c000aa51:	8b 40 30             	mov    0x30(%eax),%eax
c000aa54:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:379
	uint32_t dir_entrys_per_sec = SECTOR_SIZE / dir_entry_size;	// 1扇区内可容纳的目录项个数
c000aa57:	b8 00 02 00 00       	mov    $0x200,%eax
c000aa5c:	ba 00 00 00 00       	mov    $0x0,%edx
c000aa61:	f7 75 dc             	divl   -0x24(%ebp)
c000aa64:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/dir.c:381
	/* 因为此目录内可能删除了某些文件或子目录,所以要遍历所有块 */
	while (block_idx < block_cnt) {
c000aa67:	e9 05 01 00 00       	jmp    c000ab71 <dir_read+0x1d2>
/work/x86_os_my/fs/dir.c:382
		if (dir->dir_pos >= dir_inode->i_size) {	//dir_pos 记录遍历目录时，"游标"在目录内的偏移
c000aa6c:	8b 45 08             	mov    0x8(%ebp),%eax
c000aa6f:	8b 50 04             	mov    0x4(%eax),%edx
c000aa72:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000aa75:	8b 40 04             	mov    0x4(%eax),%eax
c000aa78:	39 c2                	cmp    %eax,%edx
c000aa7a:	72 0a                	jb     c000aa86 <dir_read+0xe7>
/work/x86_os_my/fs/dir.c:383
			return NULL;
c000aa7c:	b8 00 00 00 00       	mov    $0x0,%eax
c000aa81:	e9 fc 00 00 00       	jmp    c000ab82 <dir_read+0x1e3>
/work/x86_os_my/fs/dir.c:385
		}
		if (all_blocks[block_idx] == 0) {	// 如果此块地址为0,即空块,继续读出下一块
c000aa86:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000aa89:	8b 84 85 a8 fd ff ff 	mov    -0x258(%ebp,%eax,4),%eax
c000aa90:	85 c0                	test   %eax,%eax
c000aa92:	75 09                	jne    c000aa9d <dir_read+0xfe>
/work/x86_os_my/fs/dir.c:386
			block_idx++;
c000aa94:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:387
			continue;
c000aa98:	e9 d4 00 00 00       	jmp    c000ab71 <dir_read+0x1d2>
/work/x86_os_my/fs/dir.c:389
		}
		memset(dir_e, 0, SECTOR_SIZE);
c000aa9d:	83 ec 04             	sub    $0x4,%esp
c000aaa0:	68 00 02 00 00       	push   $0x200
c000aaa5:	6a 00                	push   $0x0
c000aaa7:	ff 75 e4             	pushl  -0x1c(%ebp)
c000aaaa:	e8 14 8d ff ff       	call   c00037c3 <memset>
c000aaaf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:390
		ide_read(cur_part->my_disk, all_blocks[block_idx], dir_e, 1);
c000aab2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000aab5:	8b 94 85 a8 fd ff ff 	mov    -0x258(%ebp,%eax,4),%edx
c000aabc:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c000aac1:	8b 40 08             	mov    0x8(%eax),%eax
c000aac4:	6a 01                	push   $0x1
c000aac6:	ff 75 e4             	pushl  -0x1c(%ebp)
c000aac9:	52                   	push   %edx
c000aaca:	50                   	push   %eax
c000aacb:	e8 be af ff ff       	call   c0005a8e <ide_read>
c000aad0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:391
		dir_entry_idx = 0;
c000aad3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:393
		/* 遍历扇区内所有目录项 */
		while (dir_entry_idx < dir_entrys_per_sec) {
c000aada:	e9 82 00 00 00       	jmp    c000ab61 <dir_read+0x1c2>
/work/x86_os_my/fs/dir.c:394
			if ((dir_e + dir_entry_idx)->f_type) {	 // 如果f_type不等于0,即不等于FT_UNKNOWN
c000aadf:	8b 55 ec             	mov    -0x14(%ebp),%edx
c000aae2:	89 d0                	mov    %edx,%eax
c000aae4:	01 c0                	add    %eax,%eax
c000aae6:	01 d0                	add    %edx,%eax
c000aae8:	c1 e0 03             	shl    $0x3,%eax
c000aaeb:	89 c2                	mov    %eax,%edx
c000aaed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000aaf0:	01 d0                	add    %edx,%eax
c000aaf2:	8b 40 14             	mov    0x14(%eax),%eax
c000aaf5:	85 c0                	test   %eax,%eax
c000aaf7:	74 64                	je     c000ab5d <dir_read+0x1be>
/work/x86_os_my/fs/dir.c:396
				/* 判断是不是最新的目录项,避免返回曾经已经返回过的目录项 */
				if (cur_dir_entry_pos < dir->dir_pos) {
c000aaf9:	8b 45 08             	mov    0x8(%ebp),%eax
c000aafc:	8b 40 04             	mov    0x4(%eax),%eax
c000aaff:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c000ab02:	76 0c                	jbe    c000ab10 <dir_read+0x171>
/work/x86_os_my/fs/dir.c:397
					cur_dir_entry_pos += dir_entry_size;
c000ab04:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000ab07:	01 45 e8             	add    %eax,-0x18(%ebp)
/work/x86_os_my/fs/dir.c:398
					dir_entry_idx++;
c000ab0a:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:399
					continue;
c000ab0e:	eb 51                	jmp    c000ab61 <dir_read+0x1c2>
/work/x86_os_my/fs/dir.c:401
				}
				ASSERT(cur_dir_entry_pos == dir->dir_pos);
c000ab10:	8b 45 08             	mov    0x8(%ebp),%eax
c000ab13:	8b 40 04             	mov    0x4(%eax),%eax
c000ab16:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c000ab19:	74 1c                	je     c000ab37 <dir_read+0x198>
/work/x86_os_my/fs/dir.c:401 (discriminator 1)
c000ab1b:	68 a8 d4 00 c0       	push   $0xc000d4a8
c000ab20:	68 58 d5 00 c0       	push   $0xc000d558
c000ab25:	68 91 01 00 00       	push   $0x191
c000ab2a:	68 ba d3 00 c0       	push   $0xc000d3ba
c000ab2f:	e8 ed 77 ff ff       	call   c0002321 <panic_spin>
c000ab34:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:402
				dir->dir_pos += dir_entry_size;	      // 更新为新位置,即下一个返回的目录项地址
c000ab37:	8b 45 08             	mov    0x8(%ebp),%eax
c000ab3a:	8b 50 04             	mov    0x4(%eax),%edx
c000ab3d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000ab40:	01 c2                	add    %eax,%edx
c000ab42:	8b 45 08             	mov    0x8(%ebp),%eax
c000ab45:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/dir.c:403
				return dir_e + dir_entry_idx;
c000ab48:	8b 55 ec             	mov    -0x14(%ebp),%edx
c000ab4b:	89 d0                	mov    %edx,%eax
c000ab4d:	01 c0                	add    %eax,%eax
c000ab4f:	01 d0                	add    %edx,%eax
c000ab51:	c1 e0 03             	shl    $0x3,%eax
c000ab54:	89 c2                	mov    %eax,%edx
c000ab56:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000ab59:	01 d0                	add    %edx,%eax
c000ab5b:	eb 25                	jmp    c000ab82 <dir_read+0x1e3>
/work/x86_os_my/fs/dir.c:405
			}
			dir_entry_idx++;
c000ab5d:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:393
		}
		memset(dir_e, 0, SECTOR_SIZE);
		ide_read(cur_part->my_disk, all_blocks[block_idx], dir_e, 1);
		dir_entry_idx = 0;
		/* 遍历扇区内所有目录项 */
		while (dir_entry_idx < dir_entrys_per_sec) {
c000ab61:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000ab64:	3b 45 d8             	cmp    -0x28(%ebp),%eax
c000ab67:	0f 82 72 ff ff ff    	jb     c000aadf <dir_read+0x140>
/work/x86_os_my/fs/dir.c:407
				dir->dir_pos += dir_entry_size;	      // 更新为新位置,即下一个返回的目录项地址
				return dir_e + dir_entry_idx;
			}
			dir_entry_idx++;
		}
		block_idx++;
c000ab6d:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:381

	uint32_t cur_dir_entry_pos = 0;	// 当前目录项的偏移,此项用来判断是否是之前已经返回过的目录项
	uint32_t dir_entry_size = cur_part->sb->dir_entry_size;
	uint32_t dir_entrys_per_sec = SECTOR_SIZE / dir_entry_size;	// 1扇区内可容纳的目录项个数
	/* 因为此目录内可能删除了某些文件或子目录,所以要遍历所有块 */
	while (block_idx < block_cnt) {
c000ab71:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000ab74:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c000ab77:	0f 82 ef fe ff ff    	jb     c000aa6c <dir_read+0xcd>
/work/x86_os_my/fs/dir.c:409
			}
			dir_entry_idx++;
		}
		block_idx++;
	}
	return NULL;
c000ab7d:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/dir.c:410 (discriminator 1)
}
c000ab82:	8b 7d fc             	mov    -0x4(%ebp),%edi
c000ab85:	c9                   	leave  
c000ab86:	c3                   	ret    

c000ab87 <dir_is_empty>:
dir_is_empty():
/work/x86_os_my/fs/dir.c:413

/* 判断目录是否为空 */
bool dir_is_empty(struct dir* dir) {
c000ab87:	55                   	push   %ebp
c000ab88:	89 e5                	mov    %esp,%ebp
c000ab8a:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/fs/dir.c:414
	struct inode* dir_inode = dir->inode;
c000ab8d:	8b 45 08             	mov    0x8(%ebp),%eax
c000ab90:	8b 00                	mov    (%eax),%eax
c000ab92:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/fs/dir.c:416
	/* 若目录下只有.和..这两个目录项则目录为空 */
	return (dir_inode->i_size == cur_part->sb->dir_entry_size * 2);
c000ab95:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000ab98:	8b 50 04             	mov    0x4(%eax),%edx
c000ab9b:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c000aba0:	8b 40 1c             	mov    0x1c(%eax),%eax
c000aba3:	8b 40 30             	mov    0x30(%eax),%eax
c000aba6:	01 c0                	add    %eax,%eax
c000aba8:	39 c2                	cmp    %eax,%edx
c000abaa:	0f 94 c0             	sete   %al
c000abad:	0f b6 c0             	movzbl %al,%eax
/work/x86_os_my/fs/dir.c:417
}
c000abb0:	c9                   	leave  
c000abb1:	c3                   	ret    

c000abb2 <dir_remove>:
dir_remove():
/work/x86_os_my/fs/dir.c:420

/* 在父目录parent_dir中删除child_dir */
int32_t dir_remove(struct dir* parent_dir, struct dir* child_dir) {
c000abb2:	55                   	push   %ebp
c000abb3:	89 e5                	mov    %esp,%ebp
c000abb5:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/dir.c:421
	struct inode* child_dir_inode  = child_dir->inode;
c000abb8:	8b 45 0c             	mov    0xc(%ebp),%eax
c000abbb:	8b 00                	mov    (%eax),%eax
c000abbd:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:423
	/* 空目录只在inode->i_sectors[0]中有扇区,其它扇区都应该为空 */
	int32_t block_idx = 1;
c000abc0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:424
	while (block_idx < 13) {
c000abc7:	eb 30                	jmp    c000abf9 <dir_remove+0x47>
/work/x86_os_my/fs/dir.c:425
		ASSERT(child_dir_inode->i_sectors[block_idx] == 0);
c000abc9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000abcc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000abcf:	83 c2 04             	add    $0x4,%edx
c000abd2:	8b 04 90             	mov    (%eax,%edx,4),%eax
c000abd5:	85 c0                	test   %eax,%eax
c000abd7:	74 1c                	je     c000abf5 <dir_remove+0x43>
/work/x86_os_my/fs/dir.c:425 (discriminator 1)
c000abd9:	68 cc d4 00 c0       	push   $0xc000d4cc
c000abde:	68 64 d5 00 c0       	push   $0xc000d564
c000abe3:	68 a9 01 00 00       	push   $0x1a9
c000abe8:	68 ba d3 00 c0       	push   $0xc000d3ba
c000abed:	e8 2f 77 ff ff       	call   c0002321 <panic_spin>
c000abf2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:426
		block_idx++;
c000abf5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:424
/* 在父目录parent_dir中删除child_dir */
int32_t dir_remove(struct dir* parent_dir, struct dir* child_dir) {
	struct inode* child_dir_inode  = child_dir->inode;
	/* 空目录只在inode->i_sectors[0]中有扇区,其它扇区都应该为空 */
	int32_t block_idx = 1;
	while (block_idx < 13) {
c000abf9:	83 7d f4 0c          	cmpl   $0xc,-0xc(%ebp)
c000abfd:	7e ca                	jle    c000abc9 <dir_remove+0x17>
/work/x86_os_my/fs/dir.c:428
		ASSERT(child_dir_inode->i_sectors[block_idx] == 0);
		block_idx++;
	}
	void* io_buf = sys_malloc(SECTOR_SIZE * 2);
c000abff:	83 ec 0c             	sub    $0xc,%esp
c000ac02:	68 00 04 00 00       	push   $0x400
c000ac07:	e8 c0 80 ff ff       	call   c0002ccc <sys_malloc>
c000ac0c:	83 c4 10             	add    $0x10,%esp
c000ac0f:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:429
	if (io_buf == NULL) {
c000ac12:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c000ac16:	75 17                	jne    c000ac2f <dir_remove+0x7d>
/work/x86_os_my/fs/dir.c:430
		printk("dir_remove: malloc for io_buf failed\n");
c000ac18:	83 ec 0c             	sub    $0xc,%esp
c000ac1b:	68 f8 d4 00 c0       	push   $0xc000d4f8
c000ac20:	e8 e2 b8 ff ff       	call   c0006507 <printk>
c000ac25:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:431
		return -1;
c000ac28:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000ac2d:	eb 44                	jmp    c000ac73 <dir_remove+0xc1>
/work/x86_os_my/fs/dir.c:435
	}

	/* 在父目录parent_dir中删除子目录child_dir对应的"目录项" */
	delete_dir_entry(cur_part, parent_dir, child_dir_inode->i_no, io_buf);
c000ac2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000ac32:	8b 10                	mov    (%eax),%edx
c000ac34:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c000ac39:	ff 75 ec             	pushl  -0x14(%ebp)
c000ac3c:	52                   	push   %edx
c000ac3d:	ff 75 08             	pushl  0x8(%ebp)
c000ac40:	50                   	push   %eax
c000ac41:	e8 f1 f8 ff ff       	call   c000a537 <delete_dir_entry>
c000ac46:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:438

	/* 回收inode中i_secotrs中所占用的扇区,并同步inode_bitmap和block_bitmap */
	inode_release(cur_part, child_dir_inode->i_no);
c000ac49:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000ac4c:	8b 10                	mov    (%eax),%edx
c000ac4e:	a1 b0 22 01 c0       	mov    0xc00122b0,%eax
c000ac53:	83 ec 08             	sub    $0x8,%esp
c000ac56:	52                   	push   %edx
c000ac57:	50                   	push   %eax
c000ac58:	e8 06 de ff ff       	call   c0008a63 <inode_release>
c000ac5d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:439
	sys_free(io_buf);
c000ac60:	83 ec 0c             	sub    $0xc,%esp
c000ac63:	ff 75 ec             	pushl  -0x14(%ebp)
c000ac66:	e8 8e 86 ff ff       	call   c00032f9 <sys_free>
c000ac6b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:440
	return 0;
c000ac6e:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/dir.c:441
}
c000ac73:	c9                   	leave  
c000ac74:	c3                   	ret    

c000ac75 <copy_pcb_vaddrbitmap_stack0>:
copy_pcb_vaddrbitmap_stack0():
/work/x86_os_my/userprog/fork.c:13
#include "file.h"

extern void intr_exit(void);

/* 将父进程的pcb、虚拟地址位图拷贝给子进程 */
static int32_t copy_pcb_vaddrbitmap_stack0(struct task_struct* child_thread, struct task_struct* parent_thread) {
c000ac75:	55                   	push   %ebp
c000ac76:	89 e5                	mov    %esp,%ebp
c000ac78:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/fork.c:17
	/* a 复制pcb所在的整个页,里面包含进程pcb信息 + 0特权级的栈
	栈里面包含了返回地址
	然后再单独修改个别部分 */
	memcpy(child_thread, parent_thread, PG_SIZE);
c000ac7b:	83 ec 04             	sub    $0x4,%esp
c000ac7e:	68 00 10 00 00       	push   $0x1000
c000ac83:	ff 75 0c             	pushl  0xc(%ebp)
c000ac86:	ff 75 08             	pushl  0x8(%ebp)
c000ac89:	e8 87 8b ff ff       	call   c0003815 <memcpy>
c000ac8e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:19
	// 初始化PCB部分
	child_thread->pid = fork_pid();
c000ac91:	e8 84 8f ff ff       	call   c0003c1a <fork_pid>
c000ac96:	89 c2                	mov    %eax,%edx
c000ac98:	8b 45 08             	mov    0x8(%ebp),%eax
c000ac9b:	66 89 50 04          	mov    %dx,0x4(%eax)
/work/x86_os_my/userprog/fork.c:20
	child_thread->elapsed_ticks = 0;
c000ac9f:	8b 45 08             	mov    0x8(%ebp),%eax
c000aca2:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
/work/x86_os_my/userprog/fork.c:21
	child_thread->status = TASK_READY;
c000aca9:	8b 45 08             	mov    0x8(%ebp),%eax
c000acac:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/userprog/fork.c:22
	child_thread->ticks = child_thread->priority;   // 为新进程把时间片充满
c000acb3:	8b 45 08             	mov    0x8(%ebp),%eax
c000acb6:	0f b6 50 1c          	movzbl 0x1c(%eax),%edx
c000acba:	8b 45 08             	mov    0x8(%ebp),%eax
c000acbd:	88 50 1d             	mov    %dl,0x1d(%eax)
/work/x86_os_my/userprog/fork.c:23
	child_thread->parent_pid = parent_thread->pid;
c000acc0:	8b 45 0c             	mov    0xc(%ebp),%eax
c000acc3:	0f b7 50 04          	movzwl 0x4(%eax),%edx
c000acc7:	8b 45 08             	mov    0x8(%ebp),%eax
c000acca:	66 89 90 10 01 00 00 	mov    %dx,0x110(%eax)
/work/x86_os_my/userprog/fork.c:24
	child_thread->general_tag.prev = child_thread->general_tag.next = NULL;
c000acd1:	8b 45 08             	mov    0x8(%ebp),%eax
c000acd4:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
c000acdb:	8b 45 08             	mov    0x8(%ebp),%eax
c000acde:	8b 50 48             	mov    0x48(%eax),%edx
c000ace1:	8b 45 08             	mov    0x8(%ebp),%eax
c000ace4:	89 50 44             	mov    %edx,0x44(%eax)
/work/x86_os_my/userprog/fork.c:25
	child_thread->all_list_tag.prev = child_thread->all_list_tag.next = NULL;
c000ace7:	8b 45 08             	mov    0x8(%ebp),%eax
c000acea:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
c000acf1:	8b 45 08             	mov    0x8(%ebp),%eax
c000acf4:	8b 50 50             	mov    0x50(%eax),%edx
c000acf7:	8b 45 08             	mov    0x8(%ebp),%eax
c000acfa:	89 50 4c             	mov    %edx,0x4c(%eax)
/work/x86_os_my/userprog/fork.c:27
	// 子进程内存块（堆内存）
	block_desc_init(child_thread->u_block_desc);
c000acfd:	8b 45 08             	mov    0x8(%ebp),%eax
c000ad00:	83 c0 64             	add    $0x64,%eax
c000ad03:	83 ec 0c             	sub    $0xc,%esp
c000ad06:	50                   	push   %eax
c000ad07:	e8 d3 89 ff ff       	call   c00036df <block_desc_init>
c000ad0c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:29
	/* b 复制父进程的虚拟地址池的位图  可执行程序入口地址：USER_VADDR_START==0x8048000 */
	uint32_t bitmap_pg_cnt = DIV_ROUND_UP((0xc0000000 - USER_VADDR_START) / PG_SIZE / 8 , PG_SIZE);
c000ad0f:	c7 45 f4 17 00 00 00 	movl   $0x17,-0xc(%ebp)
/work/x86_os_my/userprog/fork.c:30
	void* vaddr_btmp = get_kernel_pages(bitmap_pg_cnt);
c000ad16:	83 ec 0c             	sub    $0xc,%esp
c000ad19:	ff 75 f4             	pushl  -0xc(%ebp)
c000ad1c:	e8 a8 7c ff ff       	call   c00029c9 <get_kernel_pages>
c000ad21:	83 c4 10             	add    $0x10,%esp
c000ad24:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/fork.c:31
	if (vaddr_btmp == NULL)
c000ad27:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c000ad2b:	75 07                	jne    c000ad34 <copy_pcb_vaddrbitmap_stack0+0xbf>
/work/x86_os_my/userprog/fork.c:32
		return -1;
c000ad2d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000ad32:	eb 73                	jmp    c000ada7 <copy_pcb_vaddrbitmap_stack0+0x132>
/work/x86_os_my/userprog/fork.c:35
	/* 此时child_thread->userprog_vaddr.vaddr_bitmap.bits还是指向父进程虚拟地址的位图地址
	 * 下面将child_thread->userprog_vaddr.vaddr_bitmap.bits指向自己的位图vaddr_btmp */
	memcpy(vaddr_btmp, child_thread->userprog_vaddr.vaddr_bitmap.bits, bitmap_pg_cnt * PG_SIZE);	//复制父进程的虚拟地址位图
c000ad34:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000ad37:	c1 e0 0c             	shl    $0xc,%eax
c000ad3a:	89 c2                	mov    %eax,%edx
c000ad3c:	8b 45 08             	mov    0x8(%ebp),%eax
c000ad3f:	8b 40 5c             	mov    0x5c(%eax),%eax
c000ad42:	83 ec 04             	sub    $0x4,%esp
c000ad45:	52                   	push   %edx
c000ad46:	50                   	push   %eax
c000ad47:	ff 75 f0             	pushl  -0x10(%ebp)
c000ad4a:	e8 c6 8a ff ff       	call   c0003815 <memcpy>
c000ad4f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:36
	child_thread->userprog_vaddr.vaddr_bitmap.bits = vaddr_btmp;	//指向子进程自己的了
c000ad52:	8b 45 08             	mov    0x8(%ebp),%eax
c000ad55:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000ad58:	89 50 5c             	mov    %edx,0x5c(%eax)
/work/x86_os_my/userprog/fork.c:38
	/* 调试用 */
	ASSERT(strlen(child_thread->name) < 11);	// pcb.name的长度是16,为避免下面strcat越界
c000ad5b:	8b 45 08             	mov    0x8(%ebp),%eax
c000ad5e:	83 c0 0c             	add    $0xc,%eax
c000ad61:	83 ec 0c             	sub    $0xc,%esp
c000ad64:	50                   	push   %eax
c000ad65:	e8 e3 8b ff ff       	call   c000394d <strlen>
c000ad6a:	83 c4 10             	add    $0x10,%esp
c000ad6d:	83 f8 0a             	cmp    $0xa,%eax
c000ad70:	76 19                	jbe    c000ad8b <copy_pcb_vaddrbitmap_stack0+0x116>
/work/x86_os_my/userprog/fork.c:38 (discriminator 1)
c000ad72:	68 70 d5 00 c0       	push   $0xc000d570
c000ad77:	68 78 d6 00 c0       	push   $0xc000d678
c000ad7c:	6a 26                	push   $0x26
c000ad7e:	68 90 d5 00 c0       	push   $0xc000d590
c000ad83:	e8 99 75 ff ff       	call   c0002321 <panic_spin>
c000ad88:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:39
	strcat(child_thread->name,"_fork");
c000ad8b:	8b 45 08             	mov    0x8(%ebp),%eax
c000ad8e:	83 c0 0c             	add    $0xc,%eax
c000ad91:	83 ec 08             	sub    $0x8,%esp
c000ad94:	68 a0 d5 00 c0       	push   $0xc000d5a0
c000ad99:	50                   	push   %eax
c000ad9a:	e8 28 8d ff ff       	call   c0003ac7 <strcat>
c000ad9f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:40
	return 0;
c000ada2:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/userprog/fork.c:41
}
c000ada7:	c9                   	leave  
c000ada8:	c3                   	ret    

c000ada9 <copy_body_stack3>:
copy_body_stack3():
/work/x86_os_my/userprog/fork.c:74
+----------------------+
|          text        |
+----------------------+ 0
    C程序内存布局
*/
static void copy_body_stack3(struct task_struct* child_thread, struct task_struct* parent_thread, void* buf_page) {
c000ada9:	55                   	push   %ebp
c000adaa:	89 e5                	mov    %esp,%ebp
c000adac:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/userprog/fork.c:75
	uint8_t* vaddr_btmp = parent_thread->userprog_vaddr.vaddr_bitmap.bits;
c000adaf:	8b 45 0c             	mov    0xc(%ebp),%eax
c000adb2:	8b 40 5c             	mov    0x5c(%eax),%eax
c000adb5:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/userprog/fork.c:76
	uint32_t btmp_bytes_len = parent_thread->userprog_vaddr.vaddr_bitmap.btmp_bytes_len;
c000adb8:	8b 45 0c             	mov    0xc(%ebp),%eax
c000adbb:	8b 40 58             	mov    0x58(%eax),%eax
c000adbe:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/userprog/fork.c:77
	uint32_t vaddr_start = parent_thread->userprog_vaddr.vaddr_start;
c000adc1:	8b 45 0c             	mov    0xc(%ebp),%eax
c000adc4:	8b 40 60             	mov    0x60(%eax),%eax
c000adc7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/userprog/fork.c:78
	uint32_t idx_byte = 0;
c000adca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/userprog/fork.c:79
	uint32_t idx_bit = 0;
c000add1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/userprog/fork.c:80
	uint32_t prog_vaddr = 0;
c000add8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
/work/x86_os_my/userprog/fork.c:83

	/* 在父进程的用户空间中查找已有数据的页，按页一一拷贝给子进程 */
	while (idx_byte < btmp_bytes_len) {
c000addf:	e9 c5 00 00 00       	jmp    c000aea9 <copy_body_stack3+0x100>
/work/x86_os_my/userprog/fork.c:84
		if (vaddr_btmp[idx_byte]) {
c000ade4:	8b 55 ec             	mov    -0x14(%ebp),%edx
c000ade7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000adea:	01 d0                	add    %edx,%eax
c000adec:	0f b6 00             	movzbl (%eax),%eax
c000adef:	84 c0                	test   %al,%al
c000adf1:	0f 84 ae 00 00 00    	je     c000aea5 <copy_body_stack3+0xfc>
/work/x86_os_my/userprog/fork.c:85
			idx_bit = 0;
c000adf7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/userprog/fork.c:86
			while (idx_bit < 8) {
c000adfe:	e9 98 00 00 00       	jmp    c000ae9b <copy_body_stack3+0xf2>
/work/x86_os_my/userprog/fork.c:87
				if ((BITMAP_MASK << idx_bit) & vaddr_btmp[idx_byte]) {	//BITMAP_MASK=1
c000ae03:	8b 55 ec             	mov    -0x14(%ebp),%edx
c000ae06:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000ae09:	01 d0                	add    %edx,%eax
c000ae0b:	0f b6 00             	movzbl (%eax),%eax
c000ae0e:	0f b6 d0             	movzbl %al,%edx
c000ae11:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000ae14:	89 c1                	mov    %eax,%ecx
c000ae16:	d3 fa                	sar    %cl,%edx
c000ae18:	89 d0                	mov    %edx,%eax
c000ae1a:	83 e0 01             	and    $0x1,%eax
c000ae1d:	85 c0                	test   %eax,%eax
c000ae1f:	74 76                	je     c000ae97 <copy_body_stack3+0xee>
/work/x86_os_my/userprog/fork.c:88
					prog_vaddr = (idx_byte * 8 + idx_bit) * PG_SIZE + vaddr_start;
c000ae21:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000ae24:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c000ae2b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000ae2e:	01 d0                	add    %edx,%eax
c000ae30:	c1 e0 0c             	shl    $0xc,%eax
c000ae33:	89 c2                	mov    %eax,%edx
c000ae35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000ae38:	01 d0                	add    %edx,%eax
c000ae3a:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/userprog/fork.c:93
					/* 下面的操作是将父进程用户空间中的数据通过内核空间做中转,最终复制到子进程的用户空间 */

					/* a 将父进程在用户空间中的数据复制到"内核缓冲区buf_page"
					目的：下面切换到子进程的页表后,还能访问到父进程的数据*/
					memcpy(buf_page, (void*)prog_vaddr, PG_SIZE);
c000ae3d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000ae40:	83 ec 04             	sub    $0x4,%esp
c000ae43:	68 00 10 00 00       	push   $0x1000
c000ae48:	50                   	push   %eax
c000ae49:	ff 75 10             	pushl  0x10(%ebp)
c000ae4c:	e8 c4 89 ff ff       	call   c0003815 <memcpy>
c000ae51:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:96

					/* b 将页表切换到子进程，下面申请内存的函数，将pte及pde安装在子进程的页表中 */
					page_dir_activate(child_thread);
c000ae54:	83 ec 0c             	sub    $0xc,%esp
c000ae57:	ff 75 08             	pushl  0x8(%ebp)
c000ae5a:	e8 ae a2 ff ff       	call   c000510d <page_dir_activate>
c000ae5f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:98
					/* c 申请虚拟地址prog_vaddr */
					get_a_page_without_opvaddrbitmap(PF_USER, prog_vaddr);	//位图已经拷贝过了，当然不用再操作了...
c000ae62:	83 ec 08             	sub    $0x8,%esp
c000ae65:	ff 75 e0             	pushl  -0x20(%ebp)
c000ae68:	6a 02                	push   $0x2
c000ae6a:	e8 80 7d ff ff       	call   c0002bef <get_a_page_without_opvaddrbitmap>
c000ae6f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:101

					/* d 从内核缓冲区中将父进程数据复制到子进程的用户空间 */
					memcpy((void*)prog_vaddr, buf_page, PG_SIZE);
c000ae72:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000ae75:	83 ec 04             	sub    $0x4,%esp
c000ae78:	68 00 10 00 00       	push   $0x1000
c000ae7d:	ff 75 10             	pushl  0x10(%ebp)
c000ae80:	50                   	push   %eax
c000ae81:	e8 8f 89 ff ff       	call   c0003815 <memcpy>
c000ae86:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:104

					/* e 恢复父进程页表 */
					page_dir_activate(parent_thread);
c000ae89:	83 ec 0c             	sub    $0xc,%esp
c000ae8c:	ff 75 0c             	pushl  0xc(%ebp)
c000ae8f:	e8 79 a2 ff ff       	call   c000510d <page_dir_activate>
c000ae94:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:106
				}
				idx_bit++;
c000ae97:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/userprog/fork.c:86

	/* 在父进程的用户空间中查找已有数据的页，按页一一拷贝给子进程 */
	while (idx_byte < btmp_bytes_len) {
		if (vaddr_btmp[idx_byte]) {
			idx_bit = 0;
			while (idx_bit < 8) {
c000ae9b:	83 7d f0 07          	cmpl   $0x7,-0x10(%ebp)
c000ae9f:	0f 86 5e ff ff ff    	jbe    c000ae03 <copy_body_stack3+0x5a>
/work/x86_os_my/userprog/fork.c:109
					page_dir_activate(parent_thread);
				}
				idx_bit++;
			}
		}
		idx_byte++;
c000aea5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/userprog/fork.c:83
	uint32_t idx_byte = 0;
	uint32_t idx_bit = 0;
	uint32_t prog_vaddr = 0;

	/* 在父进程的用户空间中查找已有数据的页，按页一一拷贝给子进程 */
	while (idx_byte < btmp_bytes_len) {
c000aea9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000aeac:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c000aeaf:	0f 82 2f ff ff ff    	jb     c000ade4 <copy_body_stack3+0x3b>
/work/x86_os_my/userprog/fork.c:111
				idx_bit++;
			}
		}
		idx_byte++;
	}
}
c000aeb5:	90                   	nop
c000aeb6:	c9                   	leave  
c000aeb7:	c3                   	ret    

c000aeb8 <build_child_stack>:
build_child_stack():
/work/x86_os_my/userprog/fork.c:174
为了让子进程也能继续 fork 之后的代码运行，必须让它同父进程一样，从中断退出，也就是要经过 intr_exit。

子进程是由调度器 schedule 调度执行的，它要用到 switch_to 函数，
而 switch_to 函数要从栈 thread_stack 中恢复上下文，因此我们要想办法构建出合适的 thread_stack
*/
static int32_t build_child_stack(struct task_struct* child_thread) {
c000aeb8:	55                   	push   %ebp
c000aeb9:	89 e5                	mov    %esp,%ebp
c000aebb:	83 ec 20             	sub    $0x20,%esp
/work/x86_os_my/userprog/fork.c:177
	/* a 使子进程pid返回值为0 */
	/* 获取子进程0级栈栈顶 */
	struct intr_stack* intr_0_stack = (struct intr_stack*)((uint32_t)child_thread + PG_SIZE - sizeof(struct intr_stack));
c000aebe:	8b 45 08             	mov    0x8(%ebp),%eax
c000aec1:	05 b4 0f 00 00       	add    $0xfb4,%eax
c000aec6:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/userprog/fork.c:179
	/* 修改子进程的返回值为0 */
	intr_0_stack->eax = 0;	//根据 abi 约定，eax 寄存器中是函数返回值!!!
c000aec9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000aecc:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
/work/x86_os_my/userprog/fork.c:182

	/* b 为 switch_to 构建线程栈 struct thread_stack,将其构建在紧临intr_stack之下的空间*/
	uint32_t* ret_addr_in_thread_stack  = (uint32_t*)intr_0_stack - 1;	// 任务切换后新任务的返回地址 eip
c000aed3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000aed6:	83 e8 04             	sub    $0x4,%eax
c000aed9:	89 45 f8             	mov    %eax,-0x8(%ebp)
/work/x86_os_my/userprog/fork.c:185

	/***   这三行不是必要的,只是为了梳理 thread_stack 中的关系 ***/
	uint32_t* esi_ptr_in_thread_stack = (uint32_t*)intr_0_stack - 2;
c000aedc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000aedf:	83 e8 08             	sub    $0x8,%eax
c000aee2:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/fork.c:186
	uint32_t* edi_ptr_in_thread_stack = (uint32_t*)intr_0_stack - 3;
c000aee5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000aee8:	83 e8 0c             	sub    $0xc,%eax
c000aeeb:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/fork.c:187
	uint32_t* ebx_ptr_in_thread_stack = (uint32_t*)intr_0_stack - 4;
c000aeee:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000aef1:	83 e8 10             	sub    $0x10,%eax
c000aef4:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/userprog/fork.c:194

	/* ebp 在 thread_stack 中的地址便是当时的esp(0级栈的栈顶)，即栈顶esp = (uint32_t*)intr_0_stack - 5 */
	/* 指针 ebp_ptr_in_thread_stack，它是 thread_stack 的栈顶，
	 * 必须把它的值存放在 pcb 中偏移为 0 的地方，即 task_struct 中的 self_kstack 处，
	 * 将来 switch_to 要用它作为栈顶，并且执行一系列的 pop 来恢复上下文。 */
	uint32_t* ebp_ptr_in_thread_stack = (uint32_t*)intr_0_stack - 5;
c000aef7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000aefa:	83 e8 14             	sub    $0x14,%eax
c000aefd:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/userprog/fork.c:197

	/* switch_to的返回地址更新为intr_exit，直接从中断返回 */
	*ret_addr_in_thread_stack = (uint32_t)intr_exit;	// kernel.S
c000af00:	ba 10 1c 00 c0       	mov    $0xc0001c10,%edx
c000af05:	8b 45 f8             	mov    -0x8(%ebp),%eax
c000af08:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/userprog/fork.c:201

	/* 下面这个赋值只是为了使构建的 thread_stack 更加清晰,其实也不需要,
	 * 因为在进入intr_exit后一系列的pop会把寄存器中的数据覆盖 */
	*ebp_ptr_in_thread_stack = *ebx_ptr_in_thread_stack = *edi_ptr_in_thread_stack = *esi_ptr_in_thread_stack = 0;
c000af0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000af0d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c000af13:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000af16:	8b 10                	mov    (%eax),%edx
c000af18:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000af1b:	89 10                	mov    %edx,(%eax)
c000af1d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000af20:	8b 10                	mov    (%eax),%edx
c000af22:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000af25:	89 10                	mov    %edx,(%eax)
c000af27:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000af2a:	8b 10                	mov    (%eax),%edx
c000af2c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000af2f:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/userprog/fork.c:205
	/*********************************************************/

	/* 把构建的 thread_stack 的栈顶做为 switch_to 恢复数据时的栈顶 */
	child_thread->self_kstack = ebp_ptr_in_thread_stack;	//线程内核栈栈顶 self_kstack 总是和 esp 来回赋值~
c000af31:	8b 45 08             	mov    0x8(%ebp),%eax
c000af34:	8b 55 e8             	mov    -0x18(%ebp),%edx
c000af37:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/userprog/fork.c:212
	在被换下处理器前，我们会把线程的上下文信息保存在 0 特权级栈中，
	self_kstack 便用来记录 0 特权级栈在保存线程上下文后，新的栈顶，
	在下一次此线程又被调度到处理器上时，
	把 self_kstack 的值加载到 esp 寄存器，这样便从 0 特权级栈中获取了线程上下文，从而可以加载到处理器中运行。
	*/
	return 0;
c000af39:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/userprog/fork.c:213
}
c000af3e:	c9                   	leave  
c000af3f:	c3                   	ret    

c000af40 <update_inode_open_cnts>:
update_inode_open_cnts():
/work/x86_os_my/userprog/fork.c:216

/* 更新inode打开数 */
static void update_inode_open_cnts(struct task_struct* thread) {
c000af40:	55                   	push   %ebp
c000af41:	89 e5                	mov    %esp,%ebp
c000af43:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/fork.c:217
	int32_t local_fd = 3, global_fd = 0;
c000af46:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
c000af4d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/userprog/fork.c:218
	while (local_fd < MAX_FILES_OPEN_PER_PROC) {	//遍历线程打开的所有文件
c000af54:	eb 58                	jmp    c000afae <update_inode_open_cnts+0x6e>
/work/x86_os_my/userprog/fork.c:219
		global_fd = thread->fd_table[local_fd];
c000af56:	8b 45 08             	mov    0x8(%ebp),%eax
c000af59:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000af5c:	83 c2 08             	add    $0x8,%edx
c000af5f:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
c000af63:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/fork.c:220
		ASSERT(global_fd < MAX_FILE_OPEN);
c000af66:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c000af6a:	7e 1c                	jle    c000af88 <update_inode_open_cnts+0x48>
/work/x86_os_my/userprog/fork.c:220 (discriminator 1)
c000af6c:	68 a6 d5 00 c0       	push   $0xc000d5a6
c000af71:	68 94 d6 00 c0       	push   $0xc000d694
c000af76:	68 dc 00 00 00       	push   $0xdc
c000af7b:	68 90 d5 00 c0       	push   $0xc000d590
c000af80:	e8 9c 73 ff ff       	call   c0002321 <panic_spin>
c000af85:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:221
		if (global_fd != -1) {
c000af88:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c000af8c:	74 1c                	je     c000afaa <update_inode_open_cnts+0x6a>
/work/x86_os_my/userprog/fork.c:222
			file_table[global_fd].fd_inode->i_open_cnts++;	//线程打开的所有文件的inode->open_cnt加一
c000af8e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000af91:	89 d0                	mov    %edx,%eax
c000af93:	01 c0                	add    %eax,%eax
c000af95:	01 d0                	add    %edx,%eax
c000af97:	c1 e0 02             	shl    $0x2,%eax
c000af9a:	05 c8 22 01 c0       	add    $0xc00122c8,%eax
c000af9f:	8b 00                	mov    (%eax),%eax
c000afa1:	8b 50 08             	mov    0x8(%eax),%edx
c000afa4:	83 c2 01             	add    $0x1,%edx
c000afa7:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/userprog/fork.c:224
		}
		local_fd++;
c000afaa:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/userprog/fork.c:218
}

/* 更新inode打开数 */
static void update_inode_open_cnts(struct task_struct* thread) {
	int32_t local_fd = 3, global_fd = 0;
	while (local_fd < MAX_FILES_OPEN_PER_PROC) {	//遍历线程打开的所有文件
c000afae:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
c000afb2:	7e a2                	jle    c000af56 <update_inode_open_cnts+0x16>
/work/x86_os_my/userprog/fork.c:226
		if (global_fd != -1) {
			file_table[global_fd].fd_inode->i_open_cnts++;	//线程打开的所有文件的inode->open_cnt加一
		}
		local_fd++;
	}
}
c000afb4:	90                   	nop
c000afb5:	c9                   	leave  
c000afb6:	c3                   	ret    

c000afb7 <copy_process>:
copy_process():
/work/x86_os_my/userprog/fork.c:229

/* 拷贝父进程本身所占资源给子进程 */
static int32_t copy_process(struct task_struct* child_thread, struct task_struct* parent_thread) {
c000afb7:	55                   	push   %ebp
c000afb8:	89 e5                	mov    %esp,%ebp
c000afba:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/fork.c:231
	/* 内核缓冲区,作为父进程用户空间的数据，复制到子进程用户空间，的中转 */
	void* buf_page = get_kernel_pages(1);
c000afbd:	83 ec 0c             	sub    $0xc,%esp
c000afc0:	6a 01                	push   $0x1
c000afc2:	e8 02 7a ff ff       	call   c00029c9 <get_kernel_pages>
c000afc7:	83 c4 10             	add    $0x10,%esp
c000afca:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/fork.c:232
	if (buf_page == NULL) {
c000afcd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c000afd1:	75 0a                	jne    c000afdd <copy_process+0x26>
/work/x86_os_my/userprog/fork.c:233
		return -1;
c000afd3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000afd8:	e9 82 00 00 00       	jmp    c000b05f <copy_process+0xa8>
/work/x86_os_my/userprog/fork.c:237
	}

	/* a 复制父进程的pcb、虚拟地址位图、内核栈到子进程 */
	if (copy_pcb_vaddrbitmap_stack0(child_thread, parent_thread) == -1) {
c000afdd:	83 ec 08             	sub    $0x8,%esp
c000afe0:	ff 75 0c             	pushl  0xc(%ebp)
c000afe3:	ff 75 08             	pushl  0x8(%ebp)
c000afe6:	e8 8a fc ff ff       	call   c000ac75 <copy_pcb_vaddrbitmap_stack0>
c000afeb:	83 c4 10             	add    $0x10,%esp
c000afee:	83 f8 ff             	cmp    $0xffffffff,%eax
c000aff1:	75 07                	jne    c000affa <copy_process+0x43>
/work/x86_os_my/userprog/fork.c:238
		return -1;
c000aff3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000aff8:	eb 65                	jmp    c000b05f <copy_process+0xa8>
/work/x86_os_my/userprog/fork.c:242
	}

	/* b 为子进程创建页表,此页表仅包括内核空间 */
	child_thread->pgdir = create_page_dir();
c000affa:	e8 91 a1 ff ff       	call   c0005190 <create_page_dir>
c000afff:	89 c2                	mov    %eax,%edx
c000b001:	8b 45 08             	mov    0x8(%ebp),%eax
c000b004:	89 50 54             	mov    %edx,0x54(%eax)
/work/x86_os_my/userprog/fork.c:243
	if(child_thread->pgdir == NULL) {
c000b007:	8b 45 08             	mov    0x8(%ebp),%eax
c000b00a:	8b 40 54             	mov    0x54(%eax),%eax
c000b00d:	85 c0                	test   %eax,%eax
c000b00f:	75 07                	jne    c000b018 <copy_process+0x61>
/work/x86_os_my/userprog/fork.c:244
		return -1;
c000b011:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000b016:	eb 47                	jmp    c000b05f <copy_process+0xa8>
/work/x86_os_my/userprog/fork.c:248
	}

	/* c 复制父进程进程体及用户栈给子进程 */
	copy_body_stack3(child_thread, parent_thread, buf_page);
c000b018:	83 ec 04             	sub    $0x4,%esp
c000b01b:	ff 75 f4             	pushl  -0xc(%ebp)
c000b01e:	ff 75 0c             	pushl  0xc(%ebp)
c000b021:	ff 75 08             	pushl  0x8(%ebp)
c000b024:	e8 80 fd ff ff       	call   c000ada9 <copy_body_stack3>
c000b029:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:251

	/* d 构建子进程 thread_stack 和修改返回值pid */
	build_child_stack(child_thread);
c000b02c:	83 ec 0c             	sub    $0xc,%esp
c000b02f:	ff 75 08             	pushl  0x8(%ebp)
c000b032:	e8 81 fe ff ff       	call   c000aeb8 <build_child_stack>
c000b037:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:254

	/* e 更新文件inode的打开数 */
	update_inode_open_cnts(child_thread);
c000b03a:	83 ec 0c             	sub    $0xc,%esp
c000b03d:	ff 75 08             	pushl  0x8(%ebp)
c000b040:	e8 fb fe ff ff       	call   c000af40 <update_inode_open_cnts>
c000b045:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:256

	mfree_page(PF_KERNEL, buf_page, 1);
c000b048:	83 ec 04             	sub    $0x4,%esp
c000b04b:	6a 01                	push   $0x1
c000b04d:	ff 75 f4             	pushl  -0xc(%ebp)
c000b050:	6a 01                	push   $0x1
c000b052:	e8 e1 80 ff ff       	call   c0003138 <mfree_page>
c000b057:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:257
	return 0;
c000b05a:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/userprog/fork.c:258
}
c000b05f:	c9                   	leave  
c000b060:	c3                   	ret    

c000b061 <sys_fork>:
sys_fork():
/work/x86_os_my/userprog/fork.c:261

/* fork子进程，内核线程不可直接调用 */
pid_t sys_fork(void) {
c000b061:	55                   	push   %ebp
c000b062:	89 e5                	mov    %esp,%ebp
c000b064:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/fork.c:262
	struct task_struct* parent_thread = running_thread();
c000b067:	e8 3e 8b ff ff       	call   c0003baa <running_thread>
c000b06c:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/fork.c:263
	struct task_struct* child_thread = get_kernel_pages(1);	// 为子进程创建pcb(task_struct结构)
c000b06f:	83 ec 0c             	sub    $0xc,%esp
c000b072:	6a 01                	push   $0x1
c000b074:	e8 50 79 ff ff       	call   c00029c9 <get_kernel_pages>
c000b079:	83 c4 10             	add    $0x10,%esp
c000b07c:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/fork.c:264
	if (child_thread == NULL) {
c000b07f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c000b083:	75 0a                	jne    c000b08f <sys_fork+0x2e>
/work/x86_os_my/userprog/fork.c:265
		return -1;
c000b085:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000b08a:	e9 f2 00 00 00       	jmp    c000b181 <sys_fork+0x120>
/work/x86_os_my/userprog/fork.c:267
	}
	ASSERT(INTR_OFF == intr_get_status() && parent_thread->pgdir != NULL);	//中断关了，并且是用户线程
c000b08f:	e8 f3 68 ff ff       	call   c0001987 <intr_get_status>
c000b094:	85 c0                	test   %eax,%eax
c000b096:	75 0a                	jne    c000b0a2 <sys_fork+0x41>
/work/x86_os_my/userprog/fork.c:267 (discriminator 1)
c000b098:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b09b:	8b 40 54             	mov    0x54(%eax),%eax
c000b09e:	85 c0                	test   %eax,%eax
c000b0a0:	75 1c                	jne    c000b0be <sys_fork+0x5d>
/work/x86_os_my/userprog/fork.c:267 (discriminator 3)
c000b0a2:	68 c0 d5 00 c0       	push   $0xc000d5c0
c000b0a7:	68 ac d6 00 c0       	push   $0xc000d6ac
c000b0ac:	68 0b 01 00 00       	push   $0x10b
c000b0b1:	68 90 d5 00 c0       	push   $0xc000d590
c000b0b6:	e8 66 72 ff ff       	call   c0002321 <panic_spin>
c000b0bb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:269

	if (copy_process(child_thread, parent_thread) == -1) {
c000b0be:	83 ec 08             	sub    $0x8,%esp
c000b0c1:	ff 75 f4             	pushl  -0xc(%ebp)
c000b0c4:	ff 75 f0             	pushl  -0x10(%ebp)
c000b0c7:	e8 eb fe ff ff       	call   c000afb7 <copy_process>
c000b0cc:	83 c4 10             	add    $0x10,%esp
c000b0cf:	83 f8 ff             	cmp    $0xffffffff,%eax
c000b0d2:	75 0a                	jne    c000b0de <sys_fork+0x7d>
/work/x86_os_my/userprog/fork.c:270
		return -1;
c000b0d4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000b0d9:	e9 a3 00 00 00       	jmp    c000b181 <sys_fork+0x120>
/work/x86_os_my/userprog/fork.c:274
	}

	/* 添加到就绪线程队列和所有线程队列，子进程由调度器安排运行 */
	ASSERT(!elem_find(&thread_ready_list, &child_thread->general_tag));
c000b0de:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b0e1:	83 c0 44             	add    $0x44,%eax
c000b0e4:	83 ec 08             	sub    $0x8,%esp
c000b0e7:	50                   	push   %eax
c000b0e8:	68 6c 14 01 c0       	push   $0xc001146c
c000b0ed:	e8 d5 92 ff ff       	call   c00043c7 <elem_find>
c000b0f2:	83 c4 10             	add    $0x10,%esp
c000b0f5:	85 c0                	test   %eax,%eax
c000b0f7:	74 1c                	je     c000b115 <sys_fork+0xb4>
/work/x86_os_my/userprog/fork.c:274 (discriminator 1)
c000b0f9:	68 00 d6 00 c0       	push   $0xc000d600
c000b0fe:	68 ac d6 00 c0       	push   $0xc000d6ac
c000b103:	68 12 01 00 00       	push   $0x112
c000b108:	68 90 d5 00 c0       	push   $0xc000d590
c000b10d:	e8 0f 72 ff ff       	call   c0002321 <panic_spin>
c000b112:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:275
	list_append(&thread_ready_list, &child_thread->general_tag);
c000b115:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b118:	83 c0 44             	add    $0x44,%eax
c000b11b:	83 ec 08             	sub    $0x8,%esp
c000b11e:	50                   	push   %eax
c000b11f:	68 6c 14 01 c0       	push   $0xc001146c
c000b124:	e8 24 92 ff ff       	call   c000434d <list_append>
c000b129:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:276
	ASSERT(!elem_find(&thread_all_list, &child_thread->all_list_tag));
c000b12c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b12f:	83 c0 4c             	add    $0x4c,%eax
c000b132:	83 ec 08             	sub    $0x8,%esp
c000b135:	50                   	push   %eax
c000b136:	68 7c 14 01 c0       	push   $0xc001147c
c000b13b:	e8 87 92 ff ff       	call   c00043c7 <elem_find>
c000b140:	83 c4 10             	add    $0x10,%esp
c000b143:	85 c0                	test   %eax,%eax
c000b145:	74 1c                	je     c000b163 <sys_fork+0x102>
/work/x86_os_my/userprog/fork.c:276 (discriminator 1)
c000b147:	68 3c d6 00 c0       	push   $0xc000d63c
c000b14c:	68 ac d6 00 c0       	push   $0xc000d6ac
c000b151:	68 14 01 00 00       	push   $0x114
c000b156:	68 90 d5 00 c0       	push   $0xc000d590
c000b15b:	e8 c1 71 ff ff       	call   c0002321 <panic_spin>
c000b160:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:277
	list_append(&thread_all_list, &child_thread->all_list_tag);
c000b163:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b166:	83 c0 4c             	add    $0x4c,%eax
c000b169:	83 ec 08             	sub    $0x8,%esp
c000b16c:	50                   	push   %eax
c000b16d:	68 7c 14 01 c0       	push   $0xc001147c
c000b172:	e8 d6 91 ff ff       	call   c000434d <list_append>
c000b177:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:279

	return child_thread->pid;	// 父进程返回子进程的pid
c000b17a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b17d:	0f b7 40 04          	movzwl 0x4(%eax),%eax
/work/x86_os_my/userprog/fork.c:280
}
c000b181:	c9                   	leave  
c000b182:	c3                   	ret    

c000b183 <print_prompt>:
print_prompt():
/work/x86_os_my/shell/shell.c:20

/* 用来记录当前目录,是当前目录的缓存,每次执行cd命令时会更新此内容 */
char cwd_cache[MAX_PATH_LEN] = {0};

/* 输出提示符 */
void print_prompt(void) {
c000b183:	55                   	push   %ebp
c000b184:	89 e5                	mov    %esp,%ebp
c000b186:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/shell/shell.c:21
	printf("[rabbit@localhost %s]$ ", cwd_cache);
c000b189:	83 ec 08             	sub    $0x8,%esp
c000b18c:	68 00 0b 01 c0       	push   $0xc0010b00
c000b191:	68 b8 d6 00 c0       	push   $0xc000d6b8
c000b196:	e8 74 a5 ff ff       	call   c000570f <printf>
c000b19b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:22
}
c000b19e:	90                   	nop
c000b19f:	c9                   	leave  
c000b1a0:	c3                   	ret    

c000b1a1 <readline>:
readline():
/work/x86_os_my/shell/shell.c:25

/* 从键盘缓冲区中最多读入count个字节到buf */
static void readline(char* buf, int32_t count) {
c000b1a1:	55                   	push   %ebp
c000b1a2:	89 e5                	mov    %esp,%ebp
c000b1a4:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/shell/shell.c:26
	assert(buf != NULL && count > 0);
c000b1a7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c000b1ab:	74 06                	je     c000b1b3 <readline+0x12>
/work/x86_os_my/shell/shell.c:26 (discriminator 2)
c000b1ad:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c000b1b1:	7f 19                	jg     c000b1cc <readline+0x2b>
/work/x86_os_my/shell/shell.c:26 (discriminator 3)
c000b1b3:	68 d0 d6 00 c0       	push   $0xc000d6d0
c000b1b8:	68 ac d7 00 c0       	push   $0xc000d7ac
c000b1bd:	6a 1a                	push   $0x1a
c000b1bf:	68 e9 d6 00 c0       	push   $0xc000d6e9
c000b1c4:	e8 d7 02 00 00       	call   c000b4a0 <user_spin>
c000b1c9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:27
	char* pos = buf;
c000b1cc:	8b 45 08             	mov    0x8(%ebp),%eax
c000b1cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/shell/shell.c:28
	while (read(stdin_no, pos, 1) != -1 && (pos - buf) < count) {	// 每次读1个字符。在不出错情况下,直到找到回车符才返回
c000b1d2:	e9 b5 00 00 00       	jmp    c000b28c <readline+0xeb>
/work/x86_os_my/shell/shell.c:29
		switch (*pos) {
c000b1d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b1da:	0f b6 00             	movzbl (%eax),%eax
c000b1dd:	0f be c0             	movsbl %al,%eax
c000b1e0:	83 e8 08             	sub    $0x8,%eax
c000b1e3:	83 f8 0c             	cmp    $0xc,%eax
c000b1e6:	0f 87 87 00 00 00    	ja     c000b273 <readline+0xd2>
c000b1ec:	8b 04 85 44 d7 00 c0 	mov    -0x3fff28bc(,%eax,4),%eax
c000b1f3:	ff e0                	jmp    *%eax
/work/x86_os_my/shell/shell.c:33
			/* 找到回车或换行符后认为键入的命令结束,直接返回 */
			case '\n':
			case '\r':
			*pos = 0;		// 添加cmd_line的终止字符0
c000b1f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b1f8:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/shell/shell.c:34
			putchar('\n');
c000b1fb:	83 ec 0c             	sub    $0xc,%esp
c000b1fe:	6a 0a                	push   $0xa
c000b200:	e8 1c a2 ff ff       	call   c0005421 <putchar>
c000b205:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:35
			return;
c000b208:	e9 b9 00 00 00       	jmp    c000b2c6 <readline+0x125>
/work/x86_os_my/shell/shell.c:38

			case '\b':
			if (cmd_line[0] != '\b') {	// 阻止删除非本次输入的信息
c000b20d:	0f b6 05 00 0d 01 c0 	movzbl 0xc0010d00,%eax
c000b214:	3c 08                	cmp    $0x8,%al
c000b216:	74 74                	je     c000b28c <readline+0xeb>
/work/x86_os_my/shell/shell.c:39
				--pos;				// 退回到缓冲区cmd_line中上一个字符
c000b218:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
/work/x86_os_my/shell/shell.c:40
				putchar('\b');		// 屏幕显示也删掉前一个字符
c000b21c:	83 ec 0c             	sub    $0xc,%esp
c000b21f:	6a 08                	push   $0x8
c000b221:	e8 fb a1 ff ff       	call   c0005421 <putchar>
c000b226:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:42
			}
			break;
c000b229:	eb 61                	jmp    c000b28c <readline+0xeb>
/work/x86_os_my/shell/shell.c:47

			/* ctrl+l 清屏 */
			case 'l' - 'a':
			/* 1 先将当前的字符'l'-'a'置为0 */
			*pos = 0;
c000b22b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b22e:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/shell/shell.c:49
			/* 2 再将屏幕清空 */
			clear();
c000b231:	e8 0f a2 ff ff       	call   c0005445 <clear>
/work/x86_os_my/shell/shell.c:51
			/* 3 打印提示符 */
			print_prompt();
c000b236:	e8 48 ff ff ff       	call   c000b183 <print_prompt>
/work/x86_os_my/shell/shell.c:53
			/* 4 将之前键入的内容再次打印 */
			printf("%s", buf);
c000b23b:	83 ec 08             	sub    $0x8,%esp
c000b23e:	ff 75 08             	pushl  0x8(%ebp)
c000b241:	68 f7 d6 00 c0       	push   $0xc000d6f7
c000b246:	e8 c4 a4 ff ff       	call   c000570f <printf>
c000b24b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:54
			break;
c000b24e:	eb 3c                	jmp    c000b28c <readline+0xeb>
/work/x86_os_my/shell/shell.c:59

			/* ctrl+u 清掉输入 */
			case 'u' - 'a':
			while (buf != pos) {
				putchar('\b');
c000b250:	83 ec 0c             	sub    $0xc,%esp
c000b253:	6a 08                	push   $0x8
c000b255:	e8 c7 a1 ff ff       	call   c0005421 <putchar>
c000b25a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:60
				*(pos--) = 0;
c000b25d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b260:	8d 50 ff             	lea    -0x1(%eax),%edx
c000b263:	89 55 f4             	mov    %edx,-0xc(%ebp)
c000b266:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/shell/shell.c:58
			printf("%s", buf);
			break;

			/* ctrl+u 清掉输入 */
			case 'u' - 'a':
			while (buf != pos) {
c000b269:	8b 45 08             	mov    0x8(%ebp),%eax
c000b26c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c000b26f:	75 df                	jne    c000b250 <readline+0xaf>
/work/x86_os_my/shell/shell.c:62
				putchar('\b');
				*(pos--) = 0;
			}
			break;
c000b271:	eb 19                	jmp    c000b28c <readline+0xeb>
/work/x86_os_my/shell/shell.c:66

			/* 非控制键则输出字符 */
			default:
			putchar(*pos);			// 屏幕显示
c000b273:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b276:	0f b6 00             	movzbl (%eax),%eax
c000b279:	0f be c0             	movsbl %al,%eax
c000b27c:	83 ec 0c             	sub    $0xc,%esp
c000b27f:	50                   	push   %eax
c000b280:	e8 9c a1 ff ff       	call   c0005421 <putchar>
c000b285:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:67
			pos++;
c000b288:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/shell/shell.c:28

/* 从键盘缓冲区中最多读入count个字节到buf */
static void readline(char* buf, int32_t count) {
	assert(buf != NULL && count > 0);
	char* pos = buf;
	while (read(stdin_no, pos, 1) != -1 && (pos - buf) < count) {	// 每次读1个字符。在不出错情况下,直到找到回车符才返回
c000b28c:	83 ec 04             	sub    $0x4,%esp
c000b28f:	6a 01                	push   $0x1
c000b291:	ff 75 f4             	pushl  -0xc(%ebp)
c000b294:	6a 00                	push   $0x0
c000b296:	e8 63 a1 ff ff       	call   c00053fe <read>
c000b29b:	83 c4 10             	add    $0x10,%esp
c000b29e:	83 f8 ff             	cmp    $0xffffffff,%eax
c000b2a1:	74 13                	je     c000b2b6 <readline+0x115>
/work/x86_os_my/shell/shell.c:28 (discriminator 1)
c000b2a3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000b2a6:	8b 45 08             	mov    0x8(%ebp),%eax
c000b2a9:	29 c2                	sub    %eax,%edx
c000b2ab:	89 d0                	mov    %edx,%eax
c000b2ad:	3b 45 0c             	cmp    0xc(%ebp),%eax
c000b2b0:	0f 8c 21 ff ff ff    	jl     c000b1d7 <readline+0x36>
/work/x86_os_my/shell/shell.c:70
			default:
			putchar(*pos);			// 屏幕显示
			pos++;
		}
	}
	printf("readline: can`t find enter_key in the cmd_line, max num of char is 128\n");
c000b2b6:	83 ec 0c             	sub    $0xc,%esp
c000b2b9:	68 fc d6 00 c0       	push   $0xc000d6fc
c000b2be:	e8 4c a4 ff ff       	call   c000570f <printf>
c000b2c3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:71
}
c000b2c6:	c9                   	leave  
c000b2c7:	c3                   	ret    

c000b2c8 <cmd_parse>:
cmd_parse():
/work/x86_os_my/shell/shell.c:74

/* 分析字符串cmd_str中以token为分隔符的单词,将各单词的指针存入argv数组 */
static int32_t cmd_parse(char* cmd_str, char** argv, char token) {
c000b2c8:	55                   	push   %ebp
c000b2c9:	89 e5                	mov    %esp,%ebp
c000b2cb:	83 ec 28             	sub    $0x28,%esp
c000b2ce:	8b 45 10             	mov    0x10(%ebp),%eax
c000b2d1:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/shell/shell.c:75
	assert(cmd_str != NULL);
c000b2d4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c000b2d8:	75 19                	jne    c000b2f3 <cmd_parse+0x2b>
/work/x86_os_my/shell/shell.c:75 (discriminator 1)
c000b2da:	68 78 d7 00 c0       	push   $0xc000d778
c000b2df:	68 b8 d7 00 c0       	push   $0xc000d7b8
c000b2e4:	6a 4b                	push   $0x4b
c000b2e6:	68 e9 d6 00 c0       	push   $0xc000d6e9
c000b2eb:	e8 b0 01 00 00       	call   c000b4a0 <user_spin>
c000b2f0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:76
	int32_t arg_idx = 0;
c000b2f3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/shell/shell.c:77
	while(arg_idx < MAX_ARG_NR) {
c000b2fa:	eb 19                	jmp    c000b315 <cmd_parse+0x4d>
/work/x86_os_my/shell/shell.c:78
		argv[arg_idx] = NULL;
c000b2fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b2ff:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000b306:	8b 45 0c             	mov    0xc(%ebp),%eax
c000b309:	01 d0                	add    %edx,%eax
c000b30b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/shell/shell.c:79
		arg_idx++;
c000b311:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/shell/shell.c:77

/* 分析字符串cmd_str中以token为分隔符的单词,将各单词的指针存入argv数组 */
static int32_t cmd_parse(char* cmd_str, char** argv, char token) {
	assert(cmd_str != NULL);
	int32_t arg_idx = 0;
	while(arg_idx < MAX_ARG_NR) {
c000b315:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c000b319:	7e e1                	jle    c000b2fc <cmd_parse+0x34>
/work/x86_os_my/shell/shell.c:81
		argv[arg_idx] = NULL;
		arg_idx++;
	}
	char* next = cmd_str;
c000b31b:	8b 45 08             	mov    0x8(%ebp),%eax
c000b31e:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/shell/shell.c:82
	int32_t argc = 0;
c000b321:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/shell/shell.c:84
	/* 外层循环处理整个命令行 */
	while(*next) {
c000b328:	eb 6f                	jmp    c000b399 <cmd_parse+0xd1>
/work/x86_os_my/shell/shell.c:87
		/* 去除命令字或参数之间的空格 */
		while(*next == token) {
			next++;
c000b32a:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/shell/shell.c:86
	char* next = cmd_str;
	int32_t argc = 0;
	/* 外层循环处理整个命令行 */
	while(*next) {
		/* 去除命令字或参数之间的空格 */
		while(*next == token) {
c000b32e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b331:	0f b6 00             	movzbl (%eax),%eax
c000b334:	3a 45 e4             	cmp    -0x1c(%ebp),%al
c000b337:	74 f1                	je     c000b32a <cmd_parse+0x62>
/work/x86_os_my/shell/shell.c:90
			next++;
		}
		/* 处理最后一个参数后接空格的情况,如"ls dir2 " */
		if (*next == 0) {
c000b339:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b33c:	0f b6 00             	movzbl (%eax),%eax
c000b33f:	84 c0                	test   %al,%al
c000b341:	74 62                	je     c000b3a5 <cmd_parse+0xdd>
/work/x86_os_my/shell/shell.c:93
			break; 
		}
		argv[argc] = next;
c000b343:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000b346:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000b34d:	8b 45 0c             	mov    0xc(%ebp),%eax
c000b350:	01 c2                	add    %eax,%edx
c000b352:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b355:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/shell/shell.c:96

		/* 内层循环处理命令行中的每个命令字及参数 */
		while (*next && *next != token) {	  // 在字符串结束前找单词分隔符
c000b357:	eb 04                	jmp    c000b35d <cmd_parse+0x95>
/work/x86_os_my/shell/shell.c:97
			next++;
c000b359:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/shell/shell.c:96
			break; 
		}
		argv[argc] = next;

		/* 内层循环处理命令行中的每个命令字及参数 */
		while (*next && *next != token) {	  // 在字符串结束前找单词分隔符
c000b35d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b360:	0f b6 00             	movzbl (%eax),%eax
c000b363:	84 c0                	test   %al,%al
c000b365:	74 0b                	je     c000b372 <cmd_parse+0xaa>
/work/x86_os_my/shell/shell.c:96 (discriminator 1)
c000b367:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b36a:	0f b6 00             	movzbl (%eax),%eax
c000b36d:	3a 45 e4             	cmp    -0x1c(%ebp),%al
c000b370:	75 e7                	jne    c000b359 <cmd_parse+0x91>
/work/x86_os_my/shell/shell.c:101
			next++;
		}

		/* 如果未结束(是token字符),使tocken变成0 */
		if (*next) {
c000b372:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b375:	0f b6 00             	movzbl (%eax),%eax
c000b378:	84 c0                	test   %al,%al
c000b37a:	74 0c                	je     c000b388 <cmd_parse+0xc0>
/work/x86_os_my/shell/shell.c:102
			*next++ = 0;	// 将token字符替换为字符串结束符0,做为一个单词的结束,并将字符指针next指向下一个字符
c000b37c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b37f:	8d 50 01             	lea    0x1(%eax),%edx
c000b382:	89 55 f0             	mov    %edx,-0x10(%ebp)
c000b385:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/shell/shell.c:106
		}

		/* 避免argv数组访问越界,参数过多则返回0 */
		if (argc > MAX_ARG_NR) {
c000b388:	83 7d ec 10          	cmpl   $0x10,-0x14(%ebp)
c000b38c:	7e 07                	jle    c000b395 <cmd_parse+0xcd>
/work/x86_os_my/shell/shell.c:107
			return -1;
c000b38e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000b393:	eb 14                	jmp    c000b3a9 <cmd_parse+0xe1>
/work/x86_os_my/shell/shell.c:109
		}
		argc++;
c000b395:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
/work/x86_os_my/shell/shell.c:84
		arg_idx++;
	}
	char* next = cmd_str;
	int32_t argc = 0;
	/* 外层循环处理整个命令行 */
	while(*next) {
c000b399:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b39c:	0f b6 00             	movzbl (%eax),%eax
c000b39f:	84 c0                	test   %al,%al
c000b3a1:	75 8b                	jne    c000b32e <cmd_parse+0x66>
c000b3a3:	eb 01                	jmp    c000b3a6 <cmd_parse+0xde>
/work/x86_os_my/shell/shell.c:91
		while(*next == token) {
			next++;
		}
		/* 处理最后一个参数后接空格的情况,如"ls dir2 " */
		if (*next == 0) {
			break; 
c000b3a5:	90                   	nop
/work/x86_os_my/shell/shell.c:111
		if (argc > MAX_ARG_NR) {
			return -1;
		}
		argc++;
	}
	return argc;
c000b3a6:	8b 45 ec             	mov    -0x14(%ebp),%eax
/work/x86_os_my/shell/shell.c:112
}
c000b3a9:	c9                   	leave  
c000b3aa:	c3                   	ret    

c000b3ab <my_shell>:
my_shell():
/work/x86_os_my/shell/shell.c:117

char* argv[MAX_ARG_NR];    // argv必须为全局变量，为了以后exec的程序可访问参数
int32_t argc = -1;
/* 简单的shell */
void my_shell(void) {
c000b3ab:	55                   	push   %ebp
c000b3ac:	89 e5                	mov    %esp,%ebp
c000b3ae:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/shell/shell.c:118
	cwd_cache[0] = '/';
c000b3b1:	c6 05 00 0b 01 c0 2f 	movb   $0x2f,0xc0010b00
/work/x86_os_my/shell/shell.c:120
	while (1) {
		print_prompt(); 
c000b3b8:	e8 c6 fd ff ff       	call   c000b183 <print_prompt>
/work/x86_os_my/shell/shell.c:121
		memset(final_path, 0, MAX_PATH_LEN);
c000b3bd:	83 ec 04             	sub    $0x4,%esp
c000b3c0:	68 00 02 00 00       	push   $0x200
c000b3c5:	6a 00                	push   $0x0
c000b3c7:	68 00 09 01 c0       	push   $0xc0010900
c000b3cc:	e8 f2 83 ff ff       	call   c00037c3 <memset>
c000b3d1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:122
		memset(cmd_line, 0, MAX_PATH_LEN);
c000b3d4:	83 ec 04             	sub    $0x4,%esp
c000b3d7:	68 00 02 00 00       	push   $0x200
c000b3dc:	6a 00                	push   $0x0
c000b3de:	68 00 0d 01 c0       	push   $0xc0010d00
c000b3e3:	e8 db 83 ff ff       	call   c00037c3 <memset>
c000b3e8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:123
		readline(cmd_line, MAX_PATH_LEN);
c000b3eb:	83 ec 08             	sub    $0x8,%esp
c000b3ee:	68 00 02 00 00       	push   $0x200
c000b3f3:	68 00 0d 01 c0       	push   $0xc0010d00
c000b3f8:	e8 a4 fd ff ff       	call   c000b1a1 <readline>
c000b3fd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:124
		if (cmd_line[0] == 0) {	 // 若只键入了一个回车
c000b400:	0f b6 05 00 0d 01 c0 	movzbl 0xc0010d00,%eax
c000b407:	84 c0                	test   %al,%al
c000b409:	0f 84 8b 00 00 00    	je     c000b49a <my_shell+0xef>
/work/x86_os_my/shell/shell.c:127
			continue;
		}
		argc = -1;
c000b40f:	c7 05 38 04 01 c0 ff 	movl   $0xffffffff,0xc0010438
c000b416:	ff ff ff 
/work/x86_os_my/shell/shell.c:128
		argc = cmd_parse(cmd_line, argv, ' ');
c000b419:	83 ec 04             	sub    $0x4,%esp
c000b41c:	6a 20                	push   $0x20
c000b41e:	68 60 26 01 c0       	push   $0xc0012660
c000b423:	68 00 0d 01 c0       	push   $0xc0010d00
c000b428:	e8 9b fe ff ff       	call   c000b2c8 <cmd_parse>
c000b42d:	83 c4 10             	add    $0x10,%esp
c000b430:	a3 38 04 01 c0       	mov    %eax,0xc0010438
/work/x86_os_my/shell/shell.c:129
		if (argc == -1) {
c000b435:	a1 38 04 01 c0       	mov    0xc0010438,%eax
c000b43a:	83 f8 ff             	cmp    $0xffffffff,%eax
c000b43d:	75 14                	jne    c000b453 <my_shell+0xa8>
/work/x86_os_my/shell/shell.c:130
			printf("num of arguments exceed %d\n", MAX_ARG_NR);
c000b43f:	83 ec 08             	sub    $0x8,%esp
c000b442:	6a 10                	push   $0x10
c000b444:	68 88 d7 00 c0       	push   $0xc000d788
c000b449:	e8 c1 a2 ff ff       	call   c000570f <printf>
c000b44e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:131
			continue;
c000b451:	eb 48                	jmp    c000b49b <my_shell+0xf0>
/work/x86_os_my/shell/shell.c:134
		}

		int32_t arg_idx = 0;
c000b453:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/shell/shell.c:135
		while(arg_idx < argc) {
c000b45a:	eb 1f                	jmp    c000b47b <my_shell+0xd0>
/work/x86_os_my/shell/shell.c:136
			printf("%s ", argv[arg_idx]); 
c000b45c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b45f:	8b 04 85 60 26 01 c0 	mov    -0x3ffed9a0(,%eax,4),%eax
c000b466:	83 ec 08             	sub    $0x8,%esp
c000b469:	50                   	push   %eax
c000b46a:	68 a4 d7 00 c0       	push   $0xc000d7a4
c000b46f:	e8 9b a2 ff ff       	call   c000570f <printf>
c000b474:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:137
			arg_idx++;
c000b477:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/shell/shell.c:135
			printf("num of arguments exceed %d\n", MAX_ARG_NR);
			continue;
		}

		int32_t arg_idx = 0;
		while(arg_idx < argc) {
c000b47b:	a1 38 04 01 c0       	mov    0xc0010438,%eax
c000b480:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c000b483:	7c d7                	jl     c000b45c <my_shell+0xb1>
/work/x86_os_my/shell/shell.c:139
			printf("%s ", argv[arg_idx]); 
			arg_idx++;
		}
		printf("\n");
c000b485:	83 ec 0c             	sub    $0xc,%esp
c000b488:	68 a8 d7 00 c0       	push   $0xc000d7a8
c000b48d:	e8 7d a2 ff ff       	call   c000570f <printf>
c000b492:	83 c4 10             	add    $0x10,%esp
c000b495:	e9 1e ff ff ff       	jmp    c000b3b8 <my_shell+0xd>
/work/x86_os_my/shell/shell.c:125
		print_prompt(); 
		memset(final_path, 0, MAX_PATH_LEN);
		memset(cmd_line, 0, MAX_PATH_LEN);
		readline(cmd_line, MAX_PATH_LEN);
		if (cmd_line[0] == 0) {	 // 若只键入了一个回车
			continue;
c000b49a:	90                   	nop
/work/x86_os_my/shell/shell.c:140
		while(arg_idx < argc) {
			printf("%s ", argv[arg_idx]); 
			arg_idx++;
		}
		printf("\n");
	}
c000b49b:	e9 18 ff ff ff       	jmp    c000b3b8 <my_shell+0xd>

c000b4a0 <user_spin>:
user_spin():
/work/x86_os_my/lib/user/assert.c:3
#include "assert.h"
#include "stdio.h"
void user_spin(char* filename, int line, const char* func, const char* condition) {
c000b4a0:	55                   	push   %ebp
c000b4a1:	89 e5                	mov    %esp,%ebp
c000b4a3:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/lib/user/assert.c:4
	printf("\n\n\n\nfilename %s\nline %d\nfunction %s\ncondition %s\n", filename, line, func, condition);
c000b4a6:	83 ec 0c             	sub    $0xc,%esp
c000b4a9:	ff 75 14             	pushl  0x14(%ebp)
c000b4ac:	ff 75 10             	pushl  0x10(%ebp)
c000b4af:	ff 75 0c             	pushl  0xc(%ebp)
c000b4b2:	ff 75 08             	pushl  0x8(%ebp)
c000b4b5:	68 c4 d7 00 c0       	push   $0xc000d7c4
c000b4ba:	e8 50 a2 ff ff       	call   c000570f <printf>
c000b4bf:	83 c4 20             	add    $0x20,%esp
/work/x86_os_my/lib/user/assert.c:5 (discriminator 1)
	while(1);
c000b4c2:	eb fe                	jmp    c000b4c2 <user_spin+0x22>
