
./build/kernel.bin:     file format elf32-i386


Disassembly of section .text:

c0001500 <main>:
main():
/work/x86_os_my/kernel/main.c:33
void k_thread_a(void*);
void k_thread_b(void*);
void u_prog_a(void);
void u_prog_b(void);

int main(void) {
c0001500:	8d 4c 24 04          	lea    0x4(%esp),%ecx
c0001504:	83 e4 f0             	and    $0xfffffff0,%esp
c0001507:	ff 71 fc             	pushl  -0x4(%ecx)
c000150a:	55                   	push   %ebp
c000150b:	89 e5                	mov    %esp,%ebp
c000150d:	51                   	push   %ecx
c000150e:	83 ec 04             	sub    $0x4,%esp
/work/x86_os_my/kernel/main.c:34
	put_str("I am kernel\n");
c0001511:	83 ec 0c             	sub    $0xc,%esp
c0001514:	68 78 84 00 c0       	push   $0xc0008478
c0001519:	e8 72 0f 00 00       	call   c0002490 <put_str>
c000151e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:35
	init_all();
c0001521:	e8 6a 03 00 00       	call   c0001890 <init_all>
/work/x86_os_my/kernel/main.c:36
	process_execute(u_prog_a, "u_prog_a");
c0001526:	83 ec 08             	sub    $0x8,%esp
c0001529:	68 85 84 00 c0       	push   $0xc0008485
c000152e:	68 5e 17 00 c0       	push   $0xc000175e
c0001533:	e8 3c 3f 00 00       	call   c0005474 <process_execute>
c0001538:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:37
	process_execute(u_prog_b, "u_prog_b");
c000153b:	83 ec 08             	sub    $0x8,%esp
c000153e:	68 8e 84 00 c0       	push   $0xc000848e
c0001543:	68 f7 17 00 c0       	push   $0xc00017f7
c0001548:	e8 27 3f 00 00       	call   c0005474 <process_execute>
c000154d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:38
	thread_start("k_thread_a", 31, k_thread_a, "I am thread_a");
c0001550:	68 97 84 00 c0       	push   $0xc0008497
c0001555:	68 96 15 00 c0       	push   $0xc0001596
c000155a:	6a 1f                	push   $0x1f
c000155c:	68 a5 84 00 c0       	push   $0xc00084a5
c0001561:	e8 6f 2a 00 00       	call   c0003fd5 <thread_start>
c0001566:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:39
	thread_start("k_thread_b", 31, k_thread_b, "I am thread_b");
c0001569:	68 b0 84 00 c0       	push   $0xc00084b0
c000156e:	68 7a 16 00 c0       	push   $0xc000167a
c0001573:	6a 1f                	push   $0x1f
c0001575:	68 be 84 00 c0       	push   $0xc00084be
c000157a:	e8 56 2a 00 00       	call   c0003fd5 <thread_start>
c000157f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:40
	sys_open("/file1", O_CREAT);
c0001582:	83 ec 08             	sub    $0x8,%esp
c0001585:	6a 04                	push   $0x4
c0001587:	68 c9 84 00 c0       	push   $0xc00084c9
c000158c:	e8 25 5b 00 00       	call   c00070b6 <sys_open>
c0001591:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:41 (discriminator 1)
	while(1);
c0001594:	eb fe                	jmp    c0001594 <main+0x94>

c0001596 <k_thread_a>:
k_thread_a():
/work/x86_os_my/kernel/main.c:46
	return 0;
}

/* 在线程中运行的函数 */
void k_thread_a(void* arg) {     
c0001596:	55                   	push   %ebp
c0001597:	89 e5                	mov    %esp,%ebp
c0001599:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/main.c:47
	void* addr1 = sys_malloc(256);
c000159c:	83 ec 0c             	sub    $0xc,%esp
c000159f:	68 00 01 00 00       	push   $0x100
c00015a4:	e8 7a 19 00 00       	call   c0002f23 <sys_malloc>
c00015a9:	83 c4 10             	add    $0x10,%esp
c00015ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/main.c:48
	void* addr2 = sys_malloc(255);
c00015af:	83 ec 0c             	sub    $0xc,%esp
c00015b2:	68 ff 00 00 00       	push   $0xff
c00015b7:	e8 67 19 00 00       	call   c0002f23 <sys_malloc>
c00015bc:	83 c4 10             	add    $0x10,%esp
c00015bf:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/main.c:49
	void* addr3 = sys_malloc(254);
c00015c2:	83 ec 0c             	sub    $0xc,%esp
c00015c5:	68 fe 00 00 00       	push   $0xfe
c00015ca:	e8 54 19 00 00       	call   c0002f23 <sys_malloc>
c00015cf:	83 c4 10             	add    $0x10,%esp
c00015d2:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/main.c:50
	console_put_str(" thread_a malloc addr:0x");
c00015d5:	83 ec 0c             	sub    $0xc,%esp
c00015d8:	68 d0 84 00 c0       	push   $0xc00084d0
c00015dd:	e8 4e 31 00 00       	call   c0004730 <console_put_str>
c00015e2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:51
	console_put_int((int)addr1);
c00015e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00015e8:	83 ec 0c             	sub    $0xc,%esp
c00015eb:	50                   	push   %eax
c00015ec:	e8 89 31 00 00       	call   c000477a <console_put_int>
c00015f1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:52
	console_put_char(',');
c00015f4:	83 ec 0c             	sub    $0xc,%esp
c00015f7:	6a 2c                	push   $0x2c
c00015f9:	e8 53 31 00 00       	call   c0004751 <console_put_char>
c00015fe:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:53
	console_put_int((int)addr2);
c0001601:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0001604:	83 ec 0c             	sub    $0xc,%esp
c0001607:	50                   	push   %eax
c0001608:	e8 6d 31 00 00       	call   c000477a <console_put_int>
c000160d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:54
	console_put_char(',');
c0001610:	83 ec 0c             	sub    $0xc,%esp
c0001613:	6a 2c                	push   $0x2c
c0001615:	e8 37 31 00 00       	call   c0004751 <console_put_char>
c000161a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:55
	console_put_int((int)addr3);
c000161d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0001620:	83 ec 0c             	sub    $0xc,%esp
c0001623:	50                   	push   %eax
c0001624:	e8 51 31 00 00       	call   c000477a <console_put_int>
c0001629:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:56
	console_put_char('\n');
c000162c:	83 ec 0c             	sub    $0xc,%esp
c000162f:	6a 0a                	push   $0xa
c0001631:	e8 1b 31 00 00       	call   c0004751 <console_put_char>
c0001636:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:58

	int cpu_delay = 100000;
c0001639:	c7 45 f4 a0 86 01 00 	movl   $0x186a0,-0xc(%ebp)
/work/x86_os_my/kernel/main.c:59
	while(cpu_delay-- > 0);
c0001640:	90                   	nop
/work/x86_os_my/kernel/main.c:59 (discriminator 1)
c0001641:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001644:	8d 50 ff             	lea    -0x1(%eax),%edx
c0001647:	89 55 f4             	mov    %edx,-0xc(%ebp)
c000164a:	85 c0                	test   %eax,%eax
c000164c:	7f f3                	jg     c0001641 <k_thread_a+0xab>
/work/x86_os_my/kernel/main.c:60
	sys_free(addr1);
c000164e:	83 ec 0c             	sub    $0xc,%esp
c0001651:	ff 75 f0             	pushl  -0x10(%ebp)
c0001654:	e8 f7 1e 00 00       	call   c0003550 <sys_free>
c0001659:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:61
	sys_free(addr2);
c000165c:	83 ec 0c             	sub    $0xc,%esp
c000165f:	ff 75 ec             	pushl  -0x14(%ebp)
c0001662:	e8 e9 1e 00 00       	call   c0003550 <sys_free>
c0001667:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:62
	sys_free(addr3);
c000166a:	83 ec 0c             	sub    $0xc,%esp
c000166d:	ff 75 e8             	pushl  -0x18(%ebp)
c0001670:	e8 db 1e 00 00       	call   c0003550 <sys_free>
c0001675:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:63 (discriminator 1)
	while(1);
c0001678:	eb fe                	jmp    c0001678 <k_thread_a+0xe2>

c000167a <k_thread_b>:
k_thread_b():
/work/x86_os_my/kernel/main.c:67
}

/* 在线程中运行的函数 */
void k_thread_b(void* arg) {     
c000167a:	55                   	push   %ebp
c000167b:	89 e5                	mov    %esp,%ebp
c000167d:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/main.c:68
	void* addr1 = sys_malloc(256);
c0001680:	83 ec 0c             	sub    $0xc,%esp
c0001683:	68 00 01 00 00       	push   $0x100
c0001688:	e8 96 18 00 00       	call   c0002f23 <sys_malloc>
c000168d:	83 c4 10             	add    $0x10,%esp
c0001690:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/main.c:69
	void* addr2 = sys_malloc(255);
c0001693:	83 ec 0c             	sub    $0xc,%esp
c0001696:	68 ff 00 00 00       	push   $0xff
c000169b:	e8 83 18 00 00       	call   c0002f23 <sys_malloc>
c00016a0:	83 c4 10             	add    $0x10,%esp
c00016a3:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/main.c:70
	void* addr3 = sys_malloc(254);
c00016a6:	83 ec 0c             	sub    $0xc,%esp
c00016a9:	68 fe 00 00 00       	push   $0xfe
c00016ae:	e8 70 18 00 00       	call   c0002f23 <sys_malloc>
c00016b3:	83 c4 10             	add    $0x10,%esp
c00016b6:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/main.c:71
	console_put_str(" thread_b malloc addr:0x");
c00016b9:	83 ec 0c             	sub    $0xc,%esp
c00016bc:	68 e9 84 00 c0       	push   $0xc00084e9
c00016c1:	e8 6a 30 00 00       	call   c0004730 <console_put_str>
c00016c6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:72
	console_put_int((int)addr1);
c00016c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00016cc:	83 ec 0c             	sub    $0xc,%esp
c00016cf:	50                   	push   %eax
c00016d0:	e8 a5 30 00 00       	call   c000477a <console_put_int>
c00016d5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:73
	console_put_char(',');
c00016d8:	83 ec 0c             	sub    $0xc,%esp
c00016db:	6a 2c                	push   $0x2c
c00016dd:	e8 6f 30 00 00       	call   c0004751 <console_put_char>
c00016e2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:74
	console_put_int((int)addr2);
c00016e5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00016e8:	83 ec 0c             	sub    $0xc,%esp
c00016eb:	50                   	push   %eax
c00016ec:	e8 89 30 00 00       	call   c000477a <console_put_int>
c00016f1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:75
	console_put_char(',');
c00016f4:	83 ec 0c             	sub    $0xc,%esp
c00016f7:	6a 2c                	push   $0x2c
c00016f9:	e8 53 30 00 00       	call   c0004751 <console_put_char>
c00016fe:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:76
	console_put_int((int)addr3);
c0001701:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0001704:	83 ec 0c             	sub    $0xc,%esp
c0001707:	50                   	push   %eax
c0001708:	e8 6d 30 00 00       	call   c000477a <console_put_int>
c000170d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:77
	console_put_char('\n');
c0001710:	83 ec 0c             	sub    $0xc,%esp
c0001713:	6a 0a                	push   $0xa
c0001715:	e8 37 30 00 00       	call   c0004751 <console_put_char>
c000171a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:79

	int cpu_delay = 100000;
c000171d:	c7 45 f4 a0 86 01 00 	movl   $0x186a0,-0xc(%ebp)
/work/x86_os_my/kernel/main.c:80
	while(cpu_delay-- > 0);
c0001724:	90                   	nop
/work/x86_os_my/kernel/main.c:80 (discriminator 1)
c0001725:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001728:	8d 50 ff             	lea    -0x1(%eax),%edx
c000172b:	89 55 f4             	mov    %edx,-0xc(%ebp)
c000172e:	85 c0                	test   %eax,%eax
c0001730:	7f f3                	jg     c0001725 <k_thread_b+0xab>
/work/x86_os_my/kernel/main.c:81
	sys_free(addr1);
c0001732:	83 ec 0c             	sub    $0xc,%esp
c0001735:	ff 75 f0             	pushl  -0x10(%ebp)
c0001738:	e8 13 1e 00 00       	call   c0003550 <sys_free>
c000173d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:82
	sys_free(addr2);
c0001740:	83 ec 0c             	sub    $0xc,%esp
c0001743:	ff 75 ec             	pushl  -0x14(%ebp)
c0001746:	e8 05 1e 00 00       	call   c0003550 <sys_free>
c000174b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:83
	sys_free(addr3);
c000174e:	83 ec 0c             	sub    $0xc,%esp
c0001751:	ff 75 e8             	pushl  -0x18(%ebp)
c0001754:	e8 f7 1d 00 00       	call   c0003550 <sys_free>
c0001759:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:84 (discriminator 1)
	while(1);
c000175c:	eb fe                	jmp    c000175c <k_thread_b+0xe2>

c000175e <u_prog_a>:
u_prog_a():
/work/x86_os_my/kernel/main.c:88
}

/* 测试用户进程 */
void u_prog_a(void) {
c000175e:	55                   	push   %ebp
c000175f:	89 e5                	mov    %esp,%ebp
c0001761:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/main.c:89
	void* addr1 = malloc(256);
c0001764:	83 ec 0c             	sub    $0xc,%esp
c0001767:	68 00 01 00 00       	push   $0x100
c000176c:	e8 58 3e 00 00       	call   c00055c9 <malloc>
c0001771:	83 c4 10             	add    $0x10,%esp
c0001774:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/main.c:90
	void* addr2 = malloc(255);
c0001777:	83 ec 0c             	sub    $0xc,%esp
c000177a:	68 ff 00 00 00       	push   $0xff
c000177f:	e8 45 3e 00 00       	call   c00055c9 <malloc>
c0001784:	83 c4 10             	add    $0x10,%esp
c0001787:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/main.c:91
	void* addr3 = malloc(254);
c000178a:	83 ec 0c             	sub    $0xc,%esp
c000178d:	68 fe 00 00 00       	push   $0xfe
c0001792:	e8 32 3e 00 00       	call   c00055c9 <malloc>
c0001797:	83 c4 10             	add    $0x10,%esp
c000179a:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/main.c:92
	printf(" prog_a malloc addr:0x%x,0x%x,0x%x\n", (int)addr1, (int)addr2, (int)addr3);
c000179d:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c00017a0:	8b 55 ec             	mov    -0x14(%ebp),%edx
c00017a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00017a6:	51                   	push   %ecx
c00017a7:	52                   	push   %edx
c00017a8:	50                   	push   %eax
c00017a9:	68 04 85 00 c0       	push   $0xc0008504
c00017ae:	e8 05 41 00 00       	call   c00058b8 <printf>
c00017b3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:94

	int cpu_delay = 100000;
c00017b6:	c7 45 f4 a0 86 01 00 	movl   $0x186a0,-0xc(%ebp)
/work/x86_os_my/kernel/main.c:95
	while(cpu_delay-- > 0);
c00017bd:	90                   	nop
/work/x86_os_my/kernel/main.c:95 (discriminator 1)
c00017be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00017c1:	8d 50 ff             	lea    -0x1(%eax),%edx
c00017c4:	89 55 f4             	mov    %edx,-0xc(%ebp)
c00017c7:	85 c0                	test   %eax,%eax
c00017c9:	7f f3                	jg     c00017be <u_prog_a+0x60>
/work/x86_os_my/kernel/main.c:96
	free(addr1);
c00017cb:	83 ec 0c             	sub    $0xc,%esp
c00017ce:	ff 75 f0             	pushl  -0x10(%ebp)
c00017d1:	e8 12 3e 00 00       	call   c00055e8 <free>
c00017d6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:97
	free(addr2);
c00017d9:	83 ec 0c             	sub    $0xc,%esp
c00017dc:	ff 75 ec             	pushl  -0x14(%ebp)
c00017df:	e8 04 3e 00 00       	call   c00055e8 <free>
c00017e4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:98
	free(addr3);
c00017e7:	83 ec 0c             	sub    $0xc,%esp
c00017ea:	ff 75 e8             	pushl  -0x18(%ebp)
c00017ed:	e8 f6 3d 00 00       	call   c00055e8 <free>
c00017f2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:99 (discriminator 1)
	while(1);
c00017f5:	eb fe                	jmp    c00017f5 <u_prog_a+0x97>

c00017f7 <u_prog_b>:
u_prog_b():
/work/x86_os_my/kernel/main.c:103
}

/* 测试用户进程 */
void u_prog_b(void) {
c00017f7:	55                   	push   %ebp
c00017f8:	89 e5                	mov    %esp,%ebp
c00017fa:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/main.c:104
	void* addr1 = malloc(256);
c00017fd:	83 ec 0c             	sub    $0xc,%esp
c0001800:	68 00 01 00 00       	push   $0x100
c0001805:	e8 bf 3d 00 00       	call   c00055c9 <malloc>
c000180a:	83 c4 10             	add    $0x10,%esp
c000180d:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/main.c:105
	void* addr2 = malloc(255);
c0001810:	83 ec 0c             	sub    $0xc,%esp
c0001813:	68 ff 00 00 00       	push   $0xff
c0001818:	e8 ac 3d 00 00       	call   c00055c9 <malloc>
c000181d:	83 c4 10             	add    $0x10,%esp
c0001820:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/main.c:106
	void* addr3 = malloc(254);
c0001823:	83 ec 0c             	sub    $0xc,%esp
c0001826:	68 fe 00 00 00       	push   $0xfe
c000182b:	e8 99 3d 00 00       	call   c00055c9 <malloc>
c0001830:	83 c4 10             	add    $0x10,%esp
c0001833:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/main.c:107
	printf(" prog_b malloc addr:0x%x,0x%x,0x%x\n", (int)addr1, (int)addr2, (int)addr3);
c0001836:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0001839:	8b 55 ec             	mov    -0x14(%ebp),%edx
c000183c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000183f:	51                   	push   %ecx
c0001840:	52                   	push   %edx
c0001841:	50                   	push   %eax
c0001842:	68 28 85 00 c0       	push   $0xc0008528
c0001847:	e8 6c 40 00 00       	call   c00058b8 <printf>
c000184c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:109

	int cpu_delay = 100000;
c000184f:	c7 45 f4 a0 86 01 00 	movl   $0x186a0,-0xc(%ebp)
/work/x86_os_my/kernel/main.c:110
	while(cpu_delay-- > 0);
c0001856:	90                   	nop
/work/x86_os_my/kernel/main.c:110 (discriminator 1)
c0001857:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000185a:	8d 50 ff             	lea    -0x1(%eax),%edx
c000185d:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0001860:	85 c0                	test   %eax,%eax
c0001862:	7f f3                	jg     c0001857 <u_prog_b+0x60>
/work/x86_os_my/kernel/main.c:111
	free(addr1);
c0001864:	83 ec 0c             	sub    $0xc,%esp
c0001867:	ff 75 f0             	pushl  -0x10(%ebp)
c000186a:	e8 79 3d 00 00       	call   c00055e8 <free>
c000186f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:112
	free(addr2);
c0001872:	83 ec 0c             	sub    $0xc,%esp
c0001875:	ff 75 ec             	pushl  -0x14(%ebp)
c0001878:	e8 6b 3d 00 00       	call   c00055e8 <free>
c000187d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:113
	free(addr3);
c0001880:	83 ec 0c             	sub    $0xc,%esp
c0001883:	ff 75 e8             	pushl  -0x18(%ebp)
c0001886:	e8 5d 3d 00 00       	call   c00055e8 <free>
c000188b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:114 (discriminator 1)
	while(1);
c000188e:	eb fe                	jmp    c000188e <u_prog_b+0x97>

c0001890 <init_all>:
init_all():
/work/x86_os_my/kernel/init.c:15
#include "syscall-init.h"
#include "ide.h"
#include "fs.h"

/*负责初始化所有模块 */
void init_all() {
c0001890:	55                   	push   %ebp
c0001891:	89 e5                	mov    %esp,%ebp
c0001893:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/kernel/init.c:16
	put_str("init_all\n");
c0001896:	83 ec 0c             	sub    $0xc,%esp
c0001899:	68 4c 85 00 c0       	push   $0xc000854c
c000189e:	e8 ed 0b 00 00       	call   c0002490 <put_str>
c00018a3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/init.c:17
	idt_init();			// 初始化中断
c00018a6:	e8 38 04 00 00       	call   c0001ce3 <idt_init>
/work/x86_os_my/kernel/init.c:18
	mem_init();			// 初始化内存管理系统
c00018ab:	e8 19 21 00 00       	call   c00039c9 <mem_init>
/work/x86_os_my/kernel/init.c:19
	thread_init();		// 初始化线程相关结构
c00018b0:	e8 aa 2b 00 00       	call   c000445f <thread_init>
/work/x86_os_my/kernel/init.c:20
	timer_init();		// 初始化PIT
c00018b5:	e8 16 06 00 00       	call   c0001ed0 <timer_init>
/work/x86_os_my/kernel/init.c:21
	console_init();		// 控制台初始化最好放在开中断之前
c00018ba:	e8 26 2e 00 00       	call   c00046e5 <console_init>
/work/x86_os_my/kernel/init.c:22
	keyboard_init();	// 键盘初始化
c00018bf:	e8 9f 34 00 00       	call   c0004d63 <keyboard_init>
/work/x86_os_my/kernel/init.c:23
	tss_init();			// tss初始化
c00018c4:	e8 55 38 00 00       	call   c000511e <tss_init>
/work/x86_os_my/kernel/init.c:24
	syscall_init();		// 初始化系统调用
c00018c9:	e8 6d 3d 00 00       	call   c000563b <syscall_init>
/work/x86_os_my/kernel/init.c:25
	intr_enable();		// 后面的ide_init需要打开中断
c00018ce:	e8 5f 03 00 00       	call   c0001c32 <intr_enable>
/work/x86_os_my/kernel/init.c:26
	ide_init();			// 初始化硬盘
c00018d3:	e8 b7 4b 00 00       	call   c000648f <ide_init>
/work/x86_os_my/kernel/init.c:27
	filesys_init();		// 初始化文件系统
c00018d8:	e8 1f 5a 00 00       	call   c00072fc <filesys_init>
/work/x86_os_my/kernel/init.c:28
}
c00018dd:	90                   	nop
c00018de:	c9                   	leave  
c00018df:	c3                   	ret    

c00018e0 <outb>:
outb():
/work/x86_os_my/lib/kernel/io.h:17
#define __LIB_IO_H
#include "stdint.h"
//inline省去了函数调用开支

/* 向端口port写入一个字节*/
static inline void outb(uint16_t port, uint8_t data) {
c00018e0:	55                   	push   %ebp
c00018e1:	89 e5                	mov    %esp,%ebp
c00018e3:	83 ec 08             	sub    $0x8,%esp
c00018e6:	8b 55 08             	mov    0x8(%ebp),%edx
c00018e9:	8b 45 0c             	mov    0xc(%ebp),%eax
c00018ec:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c00018f0:	88 45 f8             	mov    %al,-0x8(%ebp)
/work/x86_os_my/lib/kernel/io.h:21
/*********************************************************
 a表示用寄存器al或ax或eax,对端口指定N表示0~255, d表示用dx存储端口号, 
 %b0表示对应al,%w1表示对应dx */ 
   asm volatile ( "outb %b0, %w1" : : "a" (data), "Nd" (port));    
c00018f3:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c00018f7:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c00018fb:	ee                   	out    %al,(%dx)
/work/x86_os_my/lib/kernel/io.h:23
/******************************************************/
}
c00018fc:	90                   	nop
c00018fd:	c9                   	leave  
c00018fe:	c3                   	ret    

c00018ff <pic_init>:
pic_init():
/work/x86_os_my/kernel/interrupt.c:41
//自定义类型 intr_handler = void*
extern intr_handler intr_entry_table[IDT_DESC_CNT];	    // 声明引用汇编kernel.S中的中断处理函数入口数组

/* 初始化可编程中断控制器8259A */
// outb 来着 lib/kernel/io.h 内联汇编写法
static void pic_init(void) {
c00018ff:	55                   	push   %ebp
c0001900:	89 e5                	mov    %esp,%ebp
c0001902:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:43
	/* 初始化主片 */
	outb (PIC_M_CTRL, 0x11);	// ICW1: 边沿触发,级联8259, 需要ICW4.
c0001905:	6a 11                	push   $0x11
c0001907:	6a 20                	push   $0x20
c0001909:	e8 d2 ff ff ff       	call   c00018e0 <outb>
c000190e:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:44
	outb (PIC_M_DATA, 0x20);	// ICW2: 起始中断向量号为0x20,也就是IR[0-7] 为 0x20 ~ 0x27.
c0001911:	6a 20                	push   $0x20
c0001913:	6a 21                	push   $0x21
c0001915:	e8 c6 ff ff ff       	call   c00018e0 <outb>
c000191a:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:45
	outb (PIC_M_DATA, 0x04);	// ICW3: IR2接从片. 
c000191d:	6a 04                	push   $0x4
c000191f:	6a 21                	push   $0x21
c0001921:	e8 ba ff ff ff       	call   c00018e0 <outb>
c0001926:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:46
	outb (PIC_M_DATA, 0x01);	// ICW4: 8086模式, 正常EOI
c0001929:	6a 01                	push   $0x1
c000192b:	6a 21                	push   $0x21
c000192d:	e8 ae ff ff ff       	call   c00018e0 <outb>
c0001932:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:49

	/* 初始化从片 */
	outb (PIC_S_CTRL, 0x11);	// ICW1: 边沿触发,级联8259, 需要ICW4.
c0001935:	6a 11                	push   $0x11
c0001937:	68 a0 00 00 00       	push   $0xa0
c000193c:	e8 9f ff ff ff       	call   c00018e0 <outb>
c0001941:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:50
	outb (PIC_S_DATA, 0x28);	// ICW2: 起始中断向量号为0x28,也就是IR[8-15] 为 0x28 ~ 0x2F.
c0001944:	6a 28                	push   $0x28
c0001946:	68 a1 00 00 00       	push   $0xa1
c000194b:	e8 90 ff ff ff       	call   c00018e0 <outb>
c0001950:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:51
	outb (PIC_S_DATA, 0x02);	// ICW3: 设置从片连接到主片的IR2引脚
c0001953:	6a 02                	push   $0x2
c0001955:	68 a1 00 00 00       	push   $0xa1
c000195a:	e8 81 ff ff ff       	call   c00018e0 <outb>
c000195f:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:52
	outb (PIC_S_DATA, 0x01);	// ICW4: 8086模式, 正常EOI
c0001962:	6a 01                	push   $0x1
c0001964:	68 a1 00 00 00       	push   $0xa1
c0001969:	e8 72 ff ff ff       	call   c00018e0 <outb>
c000196e:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:56

	/* IRQ2用于级联从片,必须打开,否则无法响应从片上的中断
	主片上打开的中断有IRQ0的时钟,IRQ1的键盘和级联从片的IRQ2,其它全部关闭 */
	outb (PIC_M_DATA, 0xf8);
c0001971:	68 f8 00 00 00       	push   $0xf8
c0001976:	6a 21                	push   $0x21
c0001978:	e8 63 ff ff ff       	call   c00018e0 <outb>
c000197d:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:58
	/* 打开从片上的IRQ14,此引脚接收硬盘控制器的中断 */
	outb (PIC_S_DATA, 0xbf);
c0001980:	68 bf 00 00 00       	push   $0xbf
c0001985:	68 a1 00 00 00       	push   $0xa1
c000198a:	e8 51 ff ff ff       	call   c00018e0 <outb>
c000198f:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:60

	put_str("   pic_init done\n");
c0001992:	83 ec 0c             	sub    $0xc,%esp
c0001995:	68 58 85 00 c0       	push   $0xc0008558
c000199a:	e8 f1 0a 00 00       	call   c0002490 <put_str>
c000199f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:61
}
c00019a2:	90                   	nop
c00019a3:	c9                   	leave  
c00019a4:	c3                   	ret    

c00019a5 <make_idt_desc>:
make_idt_desc():
/work/x86_os_my/kernel/interrupt.c:64

/* 创建中断门描述符 */
static void make_idt_desc(struct gate_desc* p_gdesc, uint8_t attr, intr_handler function) { 
c00019a5:	55                   	push   %ebp
c00019a6:	89 e5                	mov    %esp,%ebp
c00019a8:	83 ec 04             	sub    $0x4,%esp
c00019ab:	8b 45 0c             	mov    0xc(%ebp),%eax
c00019ae:	88 45 fc             	mov    %al,-0x4(%ebp)
/work/x86_os_my/kernel/interrupt.c:65
	p_gdesc->func_offset_low_word = (uint32_t)function & 0x0000FFFF;
c00019b1:	8b 45 10             	mov    0x10(%ebp),%eax
c00019b4:	89 c2                	mov    %eax,%edx
c00019b6:	8b 45 08             	mov    0x8(%ebp),%eax
c00019b9:	66 89 10             	mov    %dx,(%eax)
/work/x86_os_my/kernel/interrupt.c:66
	p_gdesc->selector = SELECTOR_K_CODE;
c00019bc:	8b 45 08             	mov    0x8(%ebp),%eax
c00019bf:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
/work/x86_os_my/kernel/interrupt.c:67
	p_gdesc->dcount = 0;
c00019c5:	8b 45 08             	mov    0x8(%ebp),%eax
c00019c8:	c6 40 04 00          	movb   $0x0,0x4(%eax)
/work/x86_os_my/kernel/interrupt.c:68
	p_gdesc->attribute = attr;
c00019cc:	8b 45 08             	mov    0x8(%ebp),%eax
c00019cf:	0f b6 55 fc          	movzbl -0x4(%ebp),%edx
c00019d3:	88 50 05             	mov    %dl,0x5(%eax)
/work/x86_os_my/kernel/interrupt.c:69
	p_gdesc->func_offset_high_word = ((uint32_t)function & 0xFFFF0000) >> 16;
c00019d6:	8b 45 10             	mov    0x10(%ebp),%eax
c00019d9:	c1 e8 10             	shr    $0x10,%eax
c00019dc:	89 c2                	mov    %eax,%edx
c00019de:	8b 45 08             	mov    0x8(%ebp),%eax
c00019e1:	66 89 50 06          	mov    %dx,0x6(%eax)
/work/x86_os_my/kernel/interrupt.c:70
}
c00019e5:	90                   	nop
c00019e6:	c9                   	leave  
c00019e7:	c3                   	ret    

c00019e8 <idt_desc_init>:
idt_desc_init():
/work/x86_os_my/kernel/interrupt.c:73

/*初始化中断描述符表*/
static void idt_desc_init(void) {
c00019e8:	55                   	push   %ebp
c00019e9:	89 e5                	mov    %esp,%ebp
c00019eb:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/interrupt.c:75
	int i;
	int lastindex = IDT_DESC_CNT - 1;
c00019ee:	c7 45 f0 80 00 00 00 	movl   $0x80,-0x10(%ebp)
/work/x86_os_my/kernel/interrupt.c:76
	for (i = 0; i < IDT_DESC_CNT; i++) {
c00019f5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c00019fc:	eb 29                	jmp    c0001a27 <idt_desc_init+0x3f>
/work/x86_os_my/kernel/interrupt.c:77 (discriminator 3)
		make_idt_desc(&idt[i], IDT_DESC_ATTR_DPL0, intr_entry_table[i]); 
c00019fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001a01:	8b 04 85 80 c1 00 c0 	mov    -0x3fff3e80(,%eax,4),%eax
c0001a08:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0001a0b:	c1 e2 03             	shl    $0x3,%edx
c0001a0e:	81 c2 e0 c2 00 c0    	add    $0xc000c2e0,%edx
c0001a14:	50                   	push   %eax
c0001a15:	68 8e 00 00 00       	push   $0x8e
c0001a1a:	52                   	push   %edx
c0001a1b:	e8 85 ff ff ff       	call   c00019a5 <make_idt_desc>
c0001a20:	83 c4 0c             	add    $0xc,%esp
/work/x86_os_my/kernel/interrupt.c:76 (discriminator 3)

/*初始化中断描述符表*/
static void idt_desc_init(void) {
	int i;
	int lastindex = IDT_DESC_CNT - 1;
	for (i = 0; i < IDT_DESC_CNT; i++) {
c0001a23:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:76 (discriminator 1)
c0001a27:	81 7d f4 80 00 00 00 	cmpl   $0x80,-0xc(%ebp)
c0001a2e:	7e ce                	jle    c00019fe <idt_desc_init+0x16>
/work/x86_os_my/kernel/interrupt.c:81
		make_idt_desc(&idt[i], IDT_DESC_ATTR_DPL0, intr_entry_table[i]); 
	}
	/* 系统调用对应的中断门dpl为3！
	 * 中断处理程序为单独的syscall_handler */
	make_idt_desc(&idt[lastindex], IDT_DESC_ATTR_DPL3, syscall_handler);
c0001a30:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0001a33:	c1 e0 03             	shl    $0x3,%eax
c0001a36:	05 e0 c2 00 c0       	add    $0xc000c2e0,%eax
c0001a3b:	68 67 24 00 c0       	push   $0xc0002467
c0001a40:	68 ee 00 00 00       	push   $0xee
c0001a45:	50                   	push   %eax
c0001a46:	e8 5a ff ff ff       	call   c00019a5 <make_idt_desc>
c0001a4b:	83 c4 0c             	add    $0xc,%esp
/work/x86_os_my/kernel/interrupt.c:82
	put_str("   idt_desc_init done\n");
c0001a4e:	83 ec 0c             	sub    $0xc,%esp
c0001a51:	68 6a 85 00 c0       	push   $0xc000856a
c0001a56:	e8 35 0a 00 00       	call   c0002490 <put_str>
c0001a5b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:83
}
c0001a5e:	90                   	nop
c0001a5f:	c9                   	leave  
c0001a60:	c3                   	ret    

c0001a61 <general_intr_handler>:
general_intr_handler():
/work/x86_os_my/kernel/interrupt.c:86

/* 通用的中断处理函数,一般用在异常出现时的处理 */
static void general_intr_handler(uint8_t vec_nr) {
c0001a61:	55                   	push   %ebp
c0001a62:	89 e5                	mov    %esp,%ebp
c0001a64:	83 ec 28             	sub    $0x28,%esp
c0001a67:	8b 45 08             	mov    0x8(%ebp),%eax
c0001a6a:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/kernel/interrupt.c:87
	if (vec_nr == 0x27 || vec_nr == 0x2f) {	// 0x2f是从片8259A上的最后一个irq引脚，保留
c0001a6d:	80 7d e4 27          	cmpb   $0x27,-0x1c(%ebp)
c0001a71:	0f 84 bf 00 00 00    	je     c0001b36 <general_intr_handler+0xd5>
/work/x86_os_my/kernel/interrupt.c:87 (discriminator 1)
c0001a77:	80 7d e4 2f          	cmpb   $0x2f,-0x1c(%ebp)
c0001a7b:	0f 84 b5 00 00 00    	je     c0001b36 <general_intr_handler+0xd5>
/work/x86_os_my/kernel/interrupt.c:92
		return;	//IRQ7和IRQ15会产生伪中断(spurious interrupt),无须处理。
	}
	
	/* 将光标置为左上角 并清空一片区域 */
	set_cursor(0);
c0001a81:	83 ec 0c             	sub    $0xc,%esp
c0001a84:	6a 00                	push   $0x0
c0001a86:	e8 53 0b 00 00       	call   c00025de <set_cursor>
c0001a8b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:93
	int cursor_pos = 0;
c0001a8e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:94
	while(cursor_pos < 320) {
c0001a95:	eb 11                	jmp    c0001aa8 <general_intr_handler+0x47>
/work/x86_os_my/kernel/interrupt.c:95
		put_char(' ');
c0001a97:	83 ec 0c             	sub    $0xc,%esp
c0001a9a:	6a 20                	push   $0x20
c0001a9c:	e8 0d 0a 00 00       	call   c00024ae <put_char>
c0001aa1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:96
		cursor_pos++;
c0001aa4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:94
	}
	
	/* 将光标置为左上角 并清空一片区域 */
	set_cursor(0);
	int cursor_pos = 0;
	while(cursor_pos < 320) {
c0001aa8:	81 7d f4 3f 01 00 00 	cmpl   $0x13f,-0xc(%ebp)
c0001aaf:	7e e6                	jle    c0001a97 <general_intr_handler+0x36>
/work/x86_os_my/kernel/interrupt.c:100
		put_char(' ');
		cursor_pos++;
	}

	/* 将光标置为左上角 打印信息 */
	set_cursor(0);
c0001ab1:	83 ec 0c             	sub    $0xc,%esp
c0001ab4:	6a 00                	push   $0x0
c0001ab6:	e8 23 0b 00 00       	call   c00025de <set_cursor>
c0001abb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:101
	put_str("!!!!!!!      excetion message begin  !!!!!!!!\n");
c0001abe:	83 ec 0c             	sub    $0xc,%esp
c0001ac1:	68 84 85 00 c0       	push   $0xc0008584
c0001ac6:	e8 c5 09 00 00       	call   c0002490 <put_str>
c0001acb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:102
	set_cursor(88);			// 第2行第8个字符
c0001ace:	83 ec 0c             	sub    $0xc,%esp
c0001ad1:	6a 58                	push   $0x58
c0001ad3:	e8 06 0b 00 00       	call   c00025de <set_cursor>
c0001ad8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:103
	put_str(intr_name[vec_nr]);
c0001adb:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0001adf:	8b 04 85 a0 c7 00 c0 	mov    -0x3fff3860(,%eax,4),%eax
c0001ae6:	83 ec 0c             	sub    $0xc,%esp
c0001ae9:	50                   	push   %eax
c0001aea:	e8 a1 09 00 00       	call   c0002490 <put_str>
c0001aef:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:104
	if (vec_nr == 14) {		// 若为Pagefault,将缺失的地址打印出来并悬停
c0001af2:	80 7d e4 0e          	cmpb   $0xe,-0x1c(%ebp)
c0001af6:	75 2c                	jne    c0001b24 <general_intr_handler+0xc3>
/work/x86_os_my/kernel/interrupt.c:105
		int page_fault_vaddr = 0; 
c0001af8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/kernel/interrupt.c:106
		asm ("movl %%cr2, %0" : "=r" (page_fault_vaddr));	  // cr2是存放造成page_fault的地址
c0001aff:	0f 20 d0             	mov    %cr2,%eax
c0001b02:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/interrupt.c:107
		put_str("\npage fault addr is ");
c0001b05:	83 ec 0c             	sub    $0xc,%esp
c0001b08:	68 b3 85 00 c0       	push   $0xc00085b3
c0001b0d:	e8 7e 09 00 00       	call   c0002490 <put_str>
c0001b12:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:108
		put_int(page_fault_vaddr); 
c0001b15:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0001b18:	83 ec 0c             	sub    $0xc,%esp
c0001b1b:	50                   	push   %eax
c0001b1c:	e8 5a 0a 00 00       	call   c000257b <put_int>
c0001b21:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:110
	}
	put_str("\n!!!!!!!      excetion message end    !!!!!!!!\n");
c0001b24:	83 ec 0c             	sub    $0xc,%esp
c0001b27:	68 c8 85 00 c0       	push   $0xc00085c8
c0001b2c:	e8 5f 09 00 00       	call   c0002490 <put_str>
c0001b31:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:113 (discriminator 1)
	// 能进入中断处理程序就表示已经处在关中断情况下, IF=0
	// 不会出现调度进程的情况。故下面的死循环不会再被中断，会卡死在这里。
	while(1);
c0001b34:	eb fe                	jmp    c0001b34 <general_intr_handler+0xd3>
/work/x86_os_my/kernel/interrupt.c:88
}

/* 通用的中断处理函数,一般用在异常出现时的处理 */
static void general_intr_handler(uint8_t vec_nr) {
	if (vec_nr == 0x27 || vec_nr == 0x2f) {	// 0x2f是从片8259A上的最后一个irq引脚，保留
		return;	//IRQ7和IRQ15会产生伪中断(spurious interrupt),无须处理。
c0001b36:	90                   	nop
/work/x86_os_my/kernel/interrupt.c:114
	}
	put_str("\n!!!!!!!      excetion message end    !!!!!!!!\n");
	// 能进入中断处理程序就表示已经处在关中断情况下, IF=0
	// 不会出现调度进程的情况。故下面的死循环不会再被中断，会卡死在这里。
	while(1);
}
c0001b37:	c9                   	leave  
c0001b38:	c3                   	ret    

c0001b39 <exception_init>:
exception_init():
/work/x86_os_my/kernel/interrupt.c:117

/* 完成一般中断处理函数注册及异常名称注册 */
static void exception_init(void) {
c0001b39:	55                   	push   %ebp
c0001b3a:	89 e5                	mov    %esp,%ebp
c0001b3c:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:119
	int i;
	for (i = 0; i < IDT_DESC_CNT; i++) {
c0001b3f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0001b46:	eb 20                	jmp    c0001b68 <exception_init+0x2f>
/work/x86_os_my/kernel/interrupt.c:122 (discriminator 3)
	/* idt_table数组中的函数是在进入中断后根据中断向量号调用的,
	 * 见kernel/kernel.S的call [idt_table + %1*4] */
		idt_table[i] = general_intr_handler;		// 默认为general_intr_handler，以后会由register_handler来注册具体处理函数。
c0001b48:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0001b4b:	c7 04 85 c0 c9 00 c0 	movl   $0xc0001a61,-0x3fff3640(,%eax,4)
c0001b52:	61 1a 00 c0 
/work/x86_os_my/kernel/interrupt.c:123 (discriminator 3)
		intr_name[i] = "unknown";					// 先统一赋值为unknown 
c0001b56:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0001b59:	c7 04 85 a0 c7 00 c0 	movl   $0xc00085f8,-0x3fff3860(,%eax,4)
c0001b60:	f8 85 00 c0 
/work/x86_os_my/kernel/interrupt.c:119 (discriminator 3)
}

/* 完成一般中断处理函数注册及异常名称注册 */
static void exception_init(void) {
	int i;
	for (i = 0; i < IDT_DESC_CNT; i++) {
c0001b64:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
/work/x86_os_my/kernel/interrupt.c:119 (discriminator 1)
c0001b68:	81 7d fc 80 00 00 00 	cmpl   $0x80,-0x4(%ebp)
c0001b6f:	7e d7                	jle    c0001b48 <exception_init+0xf>
/work/x86_os_my/kernel/interrupt.c:125
	/* idt_table数组中的函数是在进入中断后根据中断向量号调用的,
	 * 见kernel/kernel.S的call [idt_table + %1*4] */
		idt_table[i] = general_intr_handler;		// 默认为general_intr_handler，以后会由register_handler来注册具体处理函数。
		intr_name[i] = "unknown";					// 先统一赋值为unknown 
	}
	intr_name[0] = "#DE Divide Error";
c0001b71:	c7 05 a0 c7 00 c0 00 	movl   $0xc0008600,0xc000c7a0
c0001b78:	86 00 c0 
/work/x86_os_my/kernel/interrupt.c:126
	intr_name[1] = "#DB Debug Exception";
c0001b7b:	c7 05 a4 c7 00 c0 11 	movl   $0xc0008611,0xc000c7a4
c0001b82:	86 00 c0 
/work/x86_os_my/kernel/interrupt.c:127
	intr_name[2] = "NMI Interrupt";
c0001b85:	c7 05 a8 c7 00 c0 25 	movl   $0xc0008625,0xc000c7a8
c0001b8c:	86 00 c0 
/work/x86_os_my/kernel/interrupt.c:128
	intr_name[3] = "#BP Breakpoint Exception";
c0001b8f:	c7 05 ac c7 00 c0 33 	movl   $0xc0008633,0xc000c7ac
c0001b96:	86 00 c0 
/work/x86_os_my/kernel/interrupt.c:129
	intr_name[4] = "#OF Overflow Exception";
c0001b99:	c7 05 b0 c7 00 c0 4c 	movl   $0xc000864c,0xc000c7b0
c0001ba0:	86 00 c0 
/work/x86_os_my/kernel/interrupt.c:130
	intr_name[5] = "#BR BOUND Range Exceeded Exception";
c0001ba3:	c7 05 b4 c7 00 c0 64 	movl   $0xc0008664,0xc000c7b4
c0001baa:	86 00 c0 
/work/x86_os_my/kernel/interrupt.c:131
	intr_name[6] = "#UD Invalid Opcode Exception";
c0001bad:	c7 05 b8 c7 00 c0 87 	movl   $0xc0008687,0xc000c7b8
c0001bb4:	86 00 c0 
/work/x86_os_my/kernel/interrupt.c:132
	intr_name[7] = "#NM Device Not Available Exception";
c0001bb7:	c7 05 bc c7 00 c0 a4 	movl   $0xc00086a4,0xc000c7bc
c0001bbe:	86 00 c0 
/work/x86_os_my/kernel/interrupt.c:133
	intr_name[8] = "#DF Double Fault Exception";
c0001bc1:	c7 05 c0 c7 00 c0 c7 	movl   $0xc00086c7,0xc000c7c0
c0001bc8:	86 00 c0 
/work/x86_os_my/kernel/interrupt.c:134
	intr_name[9] = "Coprocessor Segment Overrun";
c0001bcb:	c7 05 c4 c7 00 c0 e2 	movl   $0xc00086e2,0xc000c7c4
c0001bd2:	86 00 c0 
/work/x86_os_my/kernel/interrupt.c:135
	intr_name[10] = "#TS Invalid TSS Exception";
c0001bd5:	c7 05 c8 c7 00 c0 fe 	movl   $0xc00086fe,0xc000c7c8
c0001bdc:	86 00 c0 
/work/x86_os_my/kernel/interrupt.c:136
	intr_name[11] = "#NP Segment Not Present";
c0001bdf:	c7 05 cc c7 00 c0 18 	movl   $0xc0008718,0xc000c7cc
c0001be6:	87 00 c0 
/work/x86_os_my/kernel/interrupt.c:137
	intr_name[12] = "#SS Stack Fault Exception";
c0001be9:	c7 05 d0 c7 00 c0 30 	movl   $0xc0008730,0xc000c7d0
c0001bf0:	87 00 c0 
/work/x86_os_my/kernel/interrupt.c:138
	intr_name[13] = "#GP General Protection Exception";
c0001bf3:	c7 05 d4 c7 00 c0 4c 	movl   $0xc000874c,0xc000c7d4
c0001bfa:	87 00 c0 
/work/x86_os_my/kernel/interrupt.c:139
	intr_name[14] = "#PF Page-Fault Exception";
c0001bfd:	c7 05 d8 c7 00 c0 6d 	movl   $0xc000876d,0xc000c7d8
c0001c04:	87 00 c0 
/work/x86_os_my/kernel/interrupt.c:141
	// intr_name[15] 第15项是intel保留项，未使用
	intr_name[16] = "#MF x87 FPU Floating-Point Error";
c0001c07:	c7 05 e0 c7 00 c0 88 	movl   $0xc0008788,0xc000c7e0
c0001c0e:	87 00 c0 
/work/x86_os_my/kernel/interrupt.c:142
	intr_name[17] = "#AC Alignment Check Exception";
c0001c11:	c7 05 e4 c7 00 c0 a9 	movl   $0xc00087a9,0xc000c7e4
c0001c18:	87 00 c0 
/work/x86_os_my/kernel/interrupt.c:143
	intr_name[18] = "#MC Machine-Check Exception";
c0001c1b:	c7 05 e8 c7 00 c0 c7 	movl   $0xc00087c7,0xc000c7e8
c0001c22:	87 00 c0 
/work/x86_os_my/kernel/interrupt.c:144
	intr_name[19] = "#XF SIMD Floating-Point Exception";
c0001c25:	c7 05 ec c7 00 c0 e4 	movl   $0xc00087e4,0xc000c7ec
c0001c2c:	87 00 c0 
/work/x86_os_my/kernel/interrupt.c:145
}
c0001c2f:	90                   	nop
c0001c30:	c9                   	leave  
c0001c31:	c3                   	ret    

c0001c32 <intr_enable>:
intr_enable():
/work/x86_os_my/kernel/interrupt.c:148

/* 开中断并返回开中断前的状态*/
enum intr_status intr_enable() {
c0001c32:	55                   	push   %ebp
c0001c33:	89 e5                	mov    %esp,%ebp
c0001c35:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/interrupt.c:150
	enum intr_status old_status;
	if (INTR_ON == intr_get_status()) {
c0001c38:	e8 65 00 00 00       	call   c0001ca2 <intr_get_status>
c0001c3d:	83 f8 01             	cmp    $0x1,%eax
c0001c40:	75 0c                	jne    c0001c4e <intr_enable+0x1c>
/work/x86_os_my/kernel/interrupt.c:151
		old_status = INTR_ON;
c0001c42:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:152
		return old_status;
c0001c49:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001c4c:	eb 0b                	jmp    c0001c59 <intr_enable+0x27>
/work/x86_os_my/kernel/interrupt.c:154
	} else {
		old_status = INTR_OFF;
c0001c4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:155
		asm volatile("sti");	 // 开中断,sti指令将IF位置1
c0001c55:	fb                   	sti    
/work/x86_os_my/kernel/interrupt.c:156
		return old_status;
c0001c56:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/kernel/interrupt.c:158
	}
}
c0001c59:	c9                   	leave  
c0001c5a:	c3                   	ret    

c0001c5b <intr_disable>:
intr_disable():
/work/x86_os_my/kernel/interrupt.c:161

/* 关中断,并且返回关中断前的状态 */
enum intr_status intr_disable() {     
c0001c5b:	55                   	push   %ebp
c0001c5c:	89 e5                	mov    %esp,%ebp
c0001c5e:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/interrupt.c:163
	enum intr_status old_status;
	if (INTR_ON == intr_get_status()) {
c0001c61:	e8 3c 00 00 00       	call   c0001ca2 <intr_get_status>
c0001c66:	83 f8 01             	cmp    $0x1,%eax
c0001c69:	75 0d                	jne    c0001c78 <intr_disable+0x1d>
/work/x86_os_my/kernel/interrupt.c:164
		old_status = INTR_ON;
c0001c6b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:165
		asm volatile("cli" : : : "memory"); // 关中断,cli指令将IF位置0
c0001c72:	fa                   	cli    
/work/x86_os_my/kernel/interrupt.c:166
		return old_status;
c0001c73:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001c76:	eb 0a                	jmp    c0001c82 <intr_disable+0x27>
/work/x86_os_my/kernel/interrupt.c:168
	} else {
		old_status = INTR_OFF;
c0001c78:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:169
		return old_status;
c0001c7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/kernel/interrupt.c:171
	}
}
c0001c82:	c9                   	leave  
c0001c83:	c3                   	ret    

c0001c84 <intr_set_status>:
intr_set_status():
/work/x86_os_my/kernel/interrupt.c:174

/* 将中断状态设置为status */
enum intr_status intr_set_status(enum intr_status status) {
c0001c84:	55                   	push   %ebp
c0001c85:	89 e5                	mov    %esp,%ebp
c0001c87:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:175
	return status & INTR_ON ? intr_enable() : intr_disable();
c0001c8a:	8b 45 08             	mov    0x8(%ebp),%eax
c0001c8d:	83 e0 01             	and    $0x1,%eax
c0001c90:	85 c0                	test   %eax,%eax
c0001c92:	74 07                	je     c0001c9b <intr_set_status+0x17>
/work/x86_os_my/kernel/interrupt.c:175 (discriminator 1)
c0001c94:	e8 99 ff ff ff       	call   c0001c32 <intr_enable>
c0001c99:	eb 05                	jmp    c0001ca0 <intr_set_status+0x1c>
/work/x86_os_my/kernel/interrupt.c:175 (discriminator 2)
c0001c9b:	e8 bb ff ff ff       	call   c0001c5b <intr_disable>
/work/x86_os_my/kernel/interrupt.c:176 (discriminator 5)
}
c0001ca0:	c9                   	leave  
c0001ca1:	c3                   	ret    

c0001ca2 <intr_get_status>:
intr_get_status():
/work/x86_os_my/kernel/interrupt.c:179

/* 获取当前中断状态 */
enum intr_status intr_get_status() {
c0001ca2:	55                   	push   %ebp
c0001ca3:	89 e5                	mov    %esp,%ebp
c0001ca5:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:180
	uint32_t eflags = 0; 
c0001ca8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
/work/x86_os_my/kernel/interrupt.c:181
	GET_EFLAGS(eflags);
c0001caf:	9c                   	pushf  
c0001cb0:	58                   	pop    %eax
c0001cb1:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/kernel/interrupt.c:182
	return (EFLAGS_IF & eflags) ? INTR_ON : INTR_OFF;
c0001cb4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0001cb7:	25 00 02 00 00       	and    $0x200,%eax
c0001cbc:	85 c0                	test   %eax,%eax
c0001cbe:	0f 95 c0             	setne  %al
c0001cc1:	0f b6 c0             	movzbl %al,%eax
/work/x86_os_my/kernel/interrupt.c:183
}
c0001cc4:	c9                   	leave  
c0001cc5:	c3                   	ret    

c0001cc6 <register_handler>:
register_handler():
/work/x86_os_my/kernel/interrupt.c:186

/* 在中断处理程序数组第vector_no个元素中注册安装中断处理程序function */
void register_handler(uint8_t vector_no, intr_handler function) {
c0001cc6:	55                   	push   %ebp
c0001cc7:	89 e5                	mov    %esp,%ebp
c0001cc9:	83 ec 04             	sub    $0x4,%esp
c0001ccc:	8b 45 08             	mov    0x8(%ebp),%eax
c0001ccf:	88 45 fc             	mov    %al,-0x4(%ebp)
/work/x86_os_my/kernel/interrupt.c:189
/* idt_table数组中的函数是在进入中断后根据中断向量号调用的,
 * 见kernel/kernel.S的call [idt_table + %1*4] */
   idt_table[vector_no] = function; 
c0001cd2:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c0001cd6:	8b 55 0c             	mov    0xc(%ebp),%edx
c0001cd9:	89 14 85 c0 c9 00 c0 	mov    %edx,-0x3fff3640(,%eax,4)
/work/x86_os_my/kernel/interrupt.c:190
}
c0001ce0:	90                   	nop
c0001ce1:	c9                   	leave  
c0001ce2:	c3                   	ret    

c0001ce3 <idt_init>:
idt_init():
/work/x86_os_my/kernel/interrupt.c:193

/*完成有关中断的所有初始化工作*/
void idt_init() {
c0001ce3:	55                   	push   %ebp
c0001ce4:	89 e5                	mov    %esp,%ebp
c0001ce6:	56                   	push   %esi
c0001ce7:	53                   	push   %ebx
c0001ce8:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:194
	put_str("idt_init start\n");
c0001ceb:	83 ec 0c             	sub    $0xc,%esp
c0001cee:	68 06 88 00 c0       	push   $0xc0008806
c0001cf3:	e8 98 07 00 00       	call   c0002490 <put_str>
c0001cf8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:195
	idt_desc_init();	// 初始化中断描述符表
c0001cfb:	e8 e8 fc ff ff       	call   c00019e8 <idt_desc_init>
/work/x86_os_my/kernel/interrupt.c:196
	exception_init();	// 异常名初始化并注册通常的中断处理函数
c0001d00:	e8 34 fe ff ff       	call   c0001b39 <exception_init>
/work/x86_os_my/kernel/interrupt.c:197
	pic_init();			// 初始化8259A
c0001d05:	e8 f5 fb ff ff       	call   c00018ff <pic_init>
/work/x86_os_my/kernel/interrupt.c:201

	/* 加载idt */
	// IDTR 是 48 位的寄存器，低 16 位是 IDT 的界限 = IDT 尺寸大小-1，高 32 位是 IDT 的线性基地址
	uint64_t idt_operand = ((sizeof(idt) - 1) | ((uint64_t)(uint32_t)idt << 16));
c0001d0a:	b8 e0 c2 00 c0       	mov    $0xc000c2e0,%eax
c0001d0f:	ba 00 00 00 00       	mov    $0x0,%edx
c0001d14:	0f a4 c2 10          	shld   $0x10,%eax,%edx
c0001d18:	c1 e0 10             	shl    $0x10,%eax
c0001d1b:	89 c1                	mov    %eax,%ecx
c0001d1d:	81 c9 07 04 00 00    	or     $0x407,%ecx
c0001d23:	89 cb                	mov    %ecx,%ebx
c0001d25:	89 d0                	mov    %edx,%eax
c0001d27:	80 cc 00             	or     $0x0,%ah
c0001d2a:	89 c6                	mov    %eax,%esi
c0001d2c:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c0001d2f:	89 75 f4             	mov    %esi,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:202
	asm volatile("lidt %0" : : "m" (idt_operand));
c0001d32:	0f 01 5d f0          	lidtl  -0x10(%ebp)
/work/x86_os_my/kernel/interrupt.c:203
	put_str("idt_init done\n");
c0001d36:	83 ec 0c             	sub    $0xc,%esp
c0001d39:	68 16 88 00 c0       	push   $0xc0008816
c0001d3e:	e8 4d 07 00 00       	call   c0002490 <put_str>
c0001d43:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:204
}
c0001d46:	90                   	nop
c0001d47:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0001d4a:	5b                   	pop    %ebx
c0001d4b:	5e                   	pop    %esi
c0001d4c:	5d                   	pop    %ebp
c0001d4d:	c3                   	ret    

c0001d4e <outb>:
outb():
/work/x86_os_my/lib/kernel/io.h:17
#define __LIB_IO_H
#include "stdint.h"
//inline省去了函数调用开支

/* 向端口port写入一个字节*/
static inline void outb(uint16_t port, uint8_t data) {
c0001d4e:	55                   	push   %ebp
c0001d4f:	89 e5                	mov    %esp,%ebp
c0001d51:	83 ec 08             	sub    $0x8,%esp
c0001d54:	8b 55 08             	mov    0x8(%ebp),%edx
c0001d57:	8b 45 0c             	mov    0xc(%ebp),%eax
c0001d5a:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c0001d5e:	88 45 f8             	mov    %al,-0x8(%ebp)
/work/x86_os_my/lib/kernel/io.h:21
/*********************************************************
 a表示用寄存器al或ax或eax,对端口指定N表示0~255, d表示用dx存储端口号, 
 %b0表示对应al,%w1表示对应dx */ 
   asm volatile ( "outb %b0, %w1" : : "a" (data), "Nd" (port));    
c0001d61:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c0001d65:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0001d69:	ee                   	out    %al,(%dx)
/work/x86_os_my/lib/kernel/io.h:23
/******************************************************/
}
c0001d6a:	90                   	nop
c0001d6b:	c9                   	leave  
c0001d6c:	c3                   	ret    

c0001d6d <frequency_set>:
frequency_set():
/work/x86_os_my/device/timer.c:27
/* 把操作的计数器counter_no、读写锁属性rwl、计数器模式counter_mode写入模式控制寄存器并赋予初始值counter_value */
static void frequency_set(uint8_t counter_port, \
		uint8_t counter_no, \
		uint8_t rwl, \
		uint8_t counter_mode, \
		uint16_t counter_value) {
c0001d6d:	55                   	push   %ebp
c0001d6e:	89 e5                	mov    %esp,%ebp
c0001d70:	56                   	push   %esi
c0001d71:	53                   	push   %ebx
c0001d72:	83 ec 14             	sub    $0x14,%esp
c0001d75:	8b 45 08             	mov    0x8(%ebp),%eax
c0001d78:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c0001d7b:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0001d7e:	8b 55 14             	mov    0x14(%ebp),%edx
c0001d81:	8b 75 18             	mov    0x18(%ebp),%esi
c0001d84:	88 45 f4             	mov    %al,-0xc(%ebp)
c0001d87:	88 5d f0             	mov    %bl,-0x10(%ebp)
c0001d8a:	88 4d ec             	mov    %cl,-0x14(%ebp)
c0001d8d:	88 55 e8             	mov    %dl,-0x18(%ebp)
c0001d90:	66 89 75 e4          	mov    %si,-0x1c(%ebp)
/work/x86_os_my/device/timer.c:29
	/* 往控制字寄存器端口0x43中写入控制字 */
	outb(PIT_CONTROL_PORT, (uint8_t)(counter_no << 6 | rwl << 4 | counter_mode << 1));
c0001d94:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c0001d98:	c1 e0 06             	shl    $0x6,%eax
c0001d9b:	89 c2                	mov    %eax,%edx
c0001d9d:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0001da1:	c1 e0 04             	shl    $0x4,%eax
c0001da4:	09 c2                	or     %eax,%edx
c0001da6:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c0001daa:	01 c0                	add    %eax,%eax
c0001dac:	09 d0                	or     %edx,%eax
c0001dae:	0f b6 c0             	movzbl %al,%eax
c0001db1:	50                   	push   %eax
c0001db2:	6a 43                	push   $0x43
c0001db4:	e8 95 ff ff ff       	call   c0001d4e <outb>
c0001db9:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/timer.c:31
	/* 先写入counter_value的低8位 */
	outb(counter_port, (uint8_t)counter_value);
c0001dbc:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
c0001dc0:	0f b6 d0             	movzbl %al,%edx
c0001dc3:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0001dc7:	52                   	push   %edx
c0001dc8:	50                   	push   %eax
c0001dc9:	e8 80 ff ff ff       	call   c0001d4e <outb>
c0001dce:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/timer.c:33
	/* 再写入counter_value的高8位 */
	outb(counter_port, (uint8_t)counter_value >> 8);
c0001dd1:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0001dd5:	6a 00                	push   $0x0
c0001dd7:	50                   	push   %eax
c0001dd8:	e8 71 ff ff ff       	call   c0001d4e <outb>
c0001ddd:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/timer.c:34
}
c0001de0:	90                   	nop
c0001de1:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0001de4:	5b                   	pop    %ebx
c0001de5:	5e                   	pop    %esi
c0001de6:	5d                   	pop    %ebp
c0001de7:	c3                   	ret    

c0001de8 <intr_timer_handler>:
intr_timer_handler():
/work/x86_os_my/device/timer.c:37

/* 时钟的中断处理函数 */
static void intr_timer_handler(void) {
c0001de8:	55                   	push   %ebp
c0001de9:	89 e5                	mov    %esp,%ebp
c0001deb:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/timer.c:38
	struct task_struct* cur_thread = running_thread();		// 返回线程PCB
c0001dee:	e8 0e 20 00 00       	call   c0003e01 <running_thread>
c0001df3:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/timer.c:40

	ASSERT(cur_thread->stack_magic == 0x19870916);			// 检查栈是否溢出
c0001df6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001df9:	8b 80 0c 01 00 00    	mov    0x10c(%eax),%eax
c0001dff:	3d 16 09 87 19       	cmp    $0x19870916,%eax
c0001e04:	74 19                	je     c0001e1f <intr_timer_handler+0x37>
/work/x86_os_my/device/timer.c:40 (discriminator 1)
c0001e06:	68 28 88 00 c0       	push   $0xc0008828
c0001e0b:	68 90 88 00 c0       	push   $0xc0008890
c0001e10:	6a 28                	push   $0x28
c0001e12:	68 4e 88 00 c0       	push   $0xc000884e
c0001e17:	e8 e6 07 00 00       	call   c0002602 <panic_spin>
c0001e1c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:42

	cur_thread->elapsed_ticks++;// 记录此线程占用的cpu时间
c0001e1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001e22:	8b 40 20             	mov    0x20(%eax),%eax
c0001e25:	8d 50 01             	lea    0x1(%eax),%edx
c0001e28:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001e2b:	89 50 20             	mov    %edx,0x20(%eax)
/work/x86_os_my/device/timer.c:43
	ticks++;	//从内核第一次处理时间中断开始,至今的滴哒数,是内核态和用户态总共的嘀哒数
c0001e2e:	a1 c4 cb 00 c0       	mov    0xc000cbc4,%eax
c0001e33:	83 c0 01             	add    $0x1,%eax
c0001e36:	a3 c4 cb 00 c0       	mov    %eax,0xc000cbc4
/work/x86_os_my/device/timer.c:45

	if (cur_thread->ticks == 0) {
c0001e3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001e3e:	0f b6 40 1d          	movzbl 0x1d(%eax),%eax
c0001e42:	84 c0                	test   %al,%al
c0001e44:	75 07                	jne    c0001e4d <intr_timer_handler+0x65>
/work/x86_os_my/device/timer.c:46
		schedule();				// 若进程时间片用完就开始调度新的进程上cpu
c0001e46:	e8 e6 22 00 00       	call   c0004131 <schedule>
/work/x86_os_my/device/timer.c:50
	} else {
		cur_thread->ticks--;	// 将当前进程的时间片-1
	}
}
c0001e4b:	eb 10                	jmp    c0001e5d <intr_timer_handler+0x75>
/work/x86_os_my/device/timer.c:48
	ticks++;	//从内核第一次处理时间中断开始,至今的滴哒数,是内核态和用户态总共的嘀哒数

	if (cur_thread->ticks == 0) {
		schedule();				// 若进程时间片用完就开始调度新的进程上cpu
	} else {
		cur_thread->ticks--;	// 将当前进程的时间片-1
c0001e4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001e50:	0f b6 40 1d          	movzbl 0x1d(%eax),%eax
c0001e54:	8d 50 ff             	lea    -0x1(%eax),%edx
c0001e57:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001e5a:	88 50 1d             	mov    %dl,0x1d(%eax)
/work/x86_os_my/device/timer.c:50
	}
}
c0001e5d:	90                   	nop
c0001e5e:	c9                   	leave  
c0001e5f:	c3                   	ret    

c0001e60 <ticks_to_sleep>:
ticks_to_sleep():
/work/x86_os_my/device/timer.c:53

/* 以tick为单位的sleep,任何时间形式的sleep会转换此ticks形式 */
static void ticks_to_sleep(uint32_t sleep_ticks) {
c0001e60:	55                   	push   %ebp
c0001e61:	89 e5                	mov    %esp,%ebp
c0001e63:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/timer.c:54
	uint32_t start_tick = ticks;
c0001e66:	a1 c4 cb 00 c0       	mov    0xc000cbc4,%eax
c0001e6b:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/timer.c:57

	/* 若间隔的ticks数不够便让出cpu */
	while (ticks - start_tick < sleep_ticks) {
c0001e6e:	eb 05                	jmp    c0001e75 <ticks_to_sleep+0x15>
/work/x86_os_my/device/timer.c:58
		thread_yield();
c0001e70:	e8 66 25 00 00       	call   c00043db <thread_yield>
/work/x86_os_my/device/timer.c:57
/* 以tick为单位的sleep,任何时间形式的sleep会转换此ticks形式 */
static void ticks_to_sleep(uint32_t sleep_ticks) {
	uint32_t start_tick = ticks;

	/* 若间隔的ticks数不够便让出cpu */
	while (ticks - start_tick < sleep_ticks) {
c0001e75:	a1 c4 cb 00 c0       	mov    0xc000cbc4,%eax
c0001e7a:	2b 45 f4             	sub    -0xc(%ebp),%eax
c0001e7d:	3b 45 08             	cmp    0x8(%ebp),%eax
c0001e80:	72 ee                	jb     c0001e70 <ticks_to_sleep+0x10>
/work/x86_os_my/device/timer.c:60
		thread_yield();
	}
}
c0001e82:	90                   	nop
c0001e83:	c9                   	leave  
c0001e84:	c3                   	ret    

c0001e85 <mtime_sleep>:
mtime_sleep():
/work/x86_os_my/device/timer.c:62

void mtime_sleep(uint32_t m_seconds) {
c0001e85:	55                   	push   %ebp
c0001e86:	89 e5                	mov    %esp,%ebp
c0001e88:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/timer.c:63
	uint32_t sleep_ticks = DIV_ROUND_UP(m_seconds, mil_seconds_per_intr);
c0001e8b:	8b 45 08             	mov    0x8(%ebp),%eax
c0001e8e:	83 c0 09             	add    $0x9,%eax
c0001e91:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
c0001e96:	f7 e2                	mul    %edx
c0001e98:	89 d0                	mov    %edx,%eax
c0001e9a:	c1 e8 03             	shr    $0x3,%eax
c0001e9d:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/timer.c:64
	ASSERT(sleep_ticks > 0);
c0001ea0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0001ea4:	75 19                	jne    c0001ebf <mtime_sleep+0x3a>
/work/x86_os_my/device/timer.c:64 (discriminator 1)
c0001ea6:	68 5d 88 00 c0       	push   $0xc000885d
c0001eab:	68 a4 88 00 c0       	push   $0xc00088a4
c0001eb0:	6a 40                	push   $0x40
c0001eb2:	68 4e 88 00 c0       	push   $0xc000884e
c0001eb7:	e8 46 07 00 00       	call   c0002602 <panic_spin>
c0001ebc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:65
	ticks_to_sleep(sleep_ticks); 
c0001ebf:	83 ec 0c             	sub    $0xc,%esp
c0001ec2:	ff 75 f4             	pushl  -0xc(%ebp)
c0001ec5:	e8 96 ff ff ff       	call   c0001e60 <ticks_to_sleep>
c0001eca:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:66
}
c0001ecd:	90                   	nop
c0001ece:	c9                   	leave  
c0001ecf:	c3                   	ret    

c0001ed0 <timer_init>:
timer_init():
/work/x86_os_my/device/timer.c:69

/* 初始化PIT8253 */
void timer_init() {
c0001ed0:	55                   	push   %ebp
c0001ed1:	89 e5                	mov    %esp,%ebp
c0001ed3:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/timer.c:70
	put_str("timer_init start\n");
c0001ed6:	83 ec 0c             	sub    $0xc,%esp
c0001ed9:	68 6d 88 00 c0       	push   $0xc000886d
c0001ede:	e8 ad 05 00 00       	call   c0002490 <put_str>
c0001ee3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:72
	/* 设置8253的定时周期,也就是发中断的周期 */
	frequency_set(CONTRER0_PORT, COUNTER0_NO, READ_WRITE_LATCH, COUNTER_MODE, COUNTER0_VALUE);
c0001ee6:	83 ec 0c             	sub    $0xc,%esp
c0001ee9:	68 9b 2e 00 00       	push   $0x2e9b
c0001eee:	6a 02                	push   $0x2
c0001ef0:	6a 03                	push   $0x3
c0001ef2:	6a 00                	push   $0x0
c0001ef4:	6a 40                	push   $0x40
c0001ef6:	e8 72 fe ff ff       	call   c0001d6d <frequency_set>
c0001efb:	83 c4 20             	add    $0x20,%esp
/work/x86_os_my/device/timer.c:73
	register_handler(0x20, intr_timer_handler);
c0001efe:	83 ec 08             	sub    $0x8,%esp
c0001f01:	68 e8 1d 00 c0       	push   $0xc0001de8
c0001f06:	6a 20                	push   $0x20
c0001f08:	e8 b9 fd ff ff       	call   c0001cc6 <register_handler>
c0001f0d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:74
	put_str("timer_init done\n");
c0001f10:	83 ec 0c             	sub    $0xc,%esp
c0001f13:	68 7f 88 00 c0       	push   $0xc000887f
c0001f18:	e8 73 05 00 00       	call   c0002490 <put_str>
c0001f1d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:75
}
c0001f20:	90                   	nop
c0001f21:	c9                   	leave  
c0001f22:	c3                   	ret    
c0001f23:	66 90                	xchg   %ax,%ax
c0001f25:	66 90                	xchg   %ax,%ax
c0001f27:	66 90                	xchg   %ax,%ax
c0001f29:	66 90                	xchg   %ax,%ax
c0001f2b:	66 90                	xchg   %ax,%ax
c0001f2d:	66 90                	xchg   %ax,%ax
c0001f2f:	90                   	nop

c0001f30 <intr_exit>:
intr_exit():
c0001f30:	83 c4 04             	add    $0x4,%esp
c0001f33:	61                   	popa   
c0001f34:	0f a9                	pop    %gs
c0001f36:	0f a1                	pop    %fs
c0001f38:	07                   	pop    %es
c0001f39:	1f                   	pop    %ds
c0001f3a:	83 c4 04             	add    $0x4,%esp
c0001f3d:	cf                   	iret   

c0001f3e <intr0x00entry>:
intr0x00entry():
c0001f3e:	6a 00                	push   $0x0
c0001f40:	1e                   	push   %ds
c0001f41:	06                   	push   %es
c0001f42:	0f a0                	push   %fs
c0001f44:	0f a8                	push   %gs
c0001f46:	60                   	pusha  
c0001f47:	b0 20                	mov    $0x20,%al
c0001f49:	e6 a0                	out    %al,$0xa0
c0001f4b:	e6 20                	out    %al,$0x20
c0001f4d:	6a 00                	push   $0x0
c0001f4f:	ff 15 c0 c9 00 c0    	call   *0xc000c9c0
c0001f55:	eb d9                	jmp    c0001f30 <intr_exit>

c0001f57 <intr0x01entry>:
intr0x01entry():
c0001f57:	6a 00                	push   $0x0
c0001f59:	1e                   	push   %ds
c0001f5a:	06                   	push   %es
c0001f5b:	0f a0                	push   %fs
c0001f5d:	0f a8                	push   %gs
c0001f5f:	60                   	pusha  
c0001f60:	b0 20                	mov    $0x20,%al
c0001f62:	e6 a0                	out    %al,$0xa0
c0001f64:	e6 20                	out    %al,$0x20
c0001f66:	6a 01                	push   $0x1
c0001f68:	ff 15 c4 c9 00 c0    	call   *0xc000c9c4
c0001f6e:	eb c0                	jmp    c0001f30 <intr_exit>

c0001f70 <intr0x02entry>:
intr0x02entry():
c0001f70:	6a 00                	push   $0x0
c0001f72:	1e                   	push   %ds
c0001f73:	06                   	push   %es
c0001f74:	0f a0                	push   %fs
c0001f76:	0f a8                	push   %gs
c0001f78:	60                   	pusha  
c0001f79:	b0 20                	mov    $0x20,%al
c0001f7b:	e6 a0                	out    %al,$0xa0
c0001f7d:	e6 20                	out    %al,$0x20
c0001f7f:	6a 02                	push   $0x2
c0001f81:	ff 15 c8 c9 00 c0    	call   *0xc000c9c8
c0001f87:	eb a7                	jmp    c0001f30 <intr_exit>

c0001f89 <intr0x03entry>:
intr0x03entry():
c0001f89:	6a 00                	push   $0x0
c0001f8b:	1e                   	push   %ds
c0001f8c:	06                   	push   %es
c0001f8d:	0f a0                	push   %fs
c0001f8f:	0f a8                	push   %gs
c0001f91:	60                   	pusha  
c0001f92:	b0 20                	mov    $0x20,%al
c0001f94:	e6 a0                	out    %al,$0xa0
c0001f96:	e6 20                	out    %al,$0x20
c0001f98:	6a 03                	push   $0x3
c0001f9a:	ff 15 cc c9 00 c0    	call   *0xc000c9cc
c0001fa0:	eb 8e                	jmp    c0001f30 <intr_exit>

c0001fa2 <intr0x04entry>:
intr0x04entry():
c0001fa2:	6a 00                	push   $0x0
c0001fa4:	1e                   	push   %ds
c0001fa5:	06                   	push   %es
c0001fa6:	0f a0                	push   %fs
c0001fa8:	0f a8                	push   %gs
c0001faa:	60                   	pusha  
c0001fab:	b0 20                	mov    $0x20,%al
c0001fad:	e6 a0                	out    %al,$0xa0
c0001faf:	e6 20                	out    %al,$0x20
c0001fb1:	6a 04                	push   $0x4
c0001fb3:	ff 15 d0 c9 00 c0    	call   *0xc000c9d0
c0001fb9:	e9 72 ff ff ff       	jmp    c0001f30 <intr_exit>

c0001fbe <intr0x05entry>:
intr0x05entry():
c0001fbe:	6a 00                	push   $0x0
c0001fc0:	1e                   	push   %ds
c0001fc1:	06                   	push   %es
c0001fc2:	0f a0                	push   %fs
c0001fc4:	0f a8                	push   %gs
c0001fc6:	60                   	pusha  
c0001fc7:	b0 20                	mov    $0x20,%al
c0001fc9:	e6 a0                	out    %al,$0xa0
c0001fcb:	e6 20                	out    %al,$0x20
c0001fcd:	6a 05                	push   $0x5
c0001fcf:	ff 15 d4 c9 00 c0    	call   *0xc000c9d4
c0001fd5:	e9 56 ff ff ff       	jmp    c0001f30 <intr_exit>

c0001fda <intr0x06entry>:
intr0x06entry():
c0001fda:	6a 00                	push   $0x0
c0001fdc:	1e                   	push   %ds
c0001fdd:	06                   	push   %es
c0001fde:	0f a0                	push   %fs
c0001fe0:	0f a8                	push   %gs
c0001fe2:	60                   	pusha  
c0001fe3:	b0 20                	mov    $0x20,%al
c0001fe5:	e6 a0                	out    %al,$0xa0
c0001fe7:	e6 20                	out    %al,$0x20
c0001fe9:	6a 06                	push   $0x6
c0001feb:	ff 15 d8 c9 00 c0    	call   *0xc000c9d8
c0001ff1:	e9 3a ff ff ff       	jmp    c0001f30 <intr_exit>

c0001ff6 <intr0x07entry>:
intr0x07entry():
c0001ff6:	6a 00                	push   $0x0
c0001ff8:	1e                   	push   %ds
c0001ff9:	06                   	push   %es
c0001ffa:	0f a0                	push   %fs
c0001ffc:	0f a8                	push   %gs
c0001ffe:	60                   	pusha  
c0001fff:	b0 20                	mov    $0x20,%al
c0002001:	e6 a0                	out    %al,$0xa0
c0002003:	e6 20                	out    %al,$0x20
c0002005:	6a 07                	push   $0x7
c0002007:	ff 15 dc c9 00 c0    	call   *0xc000c9dc
c000200d:	e9 1e ff ff ff       	jmp    c0001f30 <intr_exit>

c0002012 <intr0x08entry>:
intr0x08entry():
c0002012:	90                   	nop
c0002013:	1e                   	push   %ds
c0002014:	06                   	push   %es
c0002015:	0f a0                	push   %fs
c0002017:	0f a8                	push   %gs
c0002019:	60                   	pusha  
c000201a:	b0 20                	mov    $0x20,%al
c000201c:	e6 a0                	out    %al,$0xa0
c000201e:	e6 20                	out    %al,$0x20
c0002020:	6a 08                	push   $0x8
c0002022:	ff 15 e0 c9 00 c0    	call   *0xc000c9e0
c0002028:	e9 03 ff ff ff       	jmp    c0001f30 <intr_exit>

c000202d <intr0x09entry>:
intr0x09entry():
c000202d:	6a 00                	push   $0x0
c000202f:	1e                   	push   %ds
c0002030:	06                   	push   %es
c0002031:	0f a0                	push   %fs
c0002033:	0f a8                	push   %gs
c0002035:	60                   	pusha  
c0002036:	b0 20                	mov    $0x20,%al
c0002038:	e6 a0                	out    %al,$0xa0
c000203a:	e6 20                	out    %al,$0x20
c000203c:	6a 09                	push   $0x9
c000203e:	ff 15 e4 c9 00 c0    	call   *0xc000c9e4
c0002044:	e9 e7 fe ff ff       	jmp    c0001f30 <intr_exit>

c0002049 <intr0x0aentry>:
intr0x0aentry():
c0002049:	90                   	nop
c000204a:	1e                   	push   %ds
c000204b:	06                   	push   %es
c000204c:	0f a0                	push   %fs
c000204e:	0f a8                	push   %gs
c0002050:	60                   	pusha  
c0002051:	b0 20                	mov    $0x20,%al
c0002053:	e6 a0                	out    %al,$0xa0
c0002055:	e6 20                	out    %al,$0x20
c0002057:	6a 0a                	push   $0xa
c0002059:	ff 15 e8 c9 00 c0    	call   *0xc000c9e8
c000205f:	e9 cc fe ff ff       	jmp    c0001f30 <intr_exit>

c0002064 <intr0x0bentry>:
intr0x0bentry():
c0002064:	90                   	nop
c0002065:	1e                   	push   %ds
c0002066:	06                   	push   %es
c0002067:	0f a0                	push   %fs
c0002069:	0f a8                	push   %gs
c000206b:	60                   	pusha  
c000206c:	b0 20                	mov    $0x20,%al
c000206e:	e6 a0                	out    %al,$0xa0
c0002070:	e6 20                	out    %al,$0x20
c0002072:	6a 0b                	push   $0xb
c0002074:	ff 15 ec c9 00 c0    	call   *0xc000c9ec
c000207a:	e9 b1 fe ff ff       	jmp    c0001f30 <intr_exit>

c000207f <intr0x0centry>:
intr0x0centry():
c000207f:	6a 00                	push   $0x0
c0002081:	1e                   	push   %ds
c0002082:	06                   	push   %es
c0002083:	0f a0                	push   %fs
c0002085:	0f a8                	push   %gs
c0002087:	60                   	pusha  
c0002088:	b0 20                	mov    $0x20,%al
c000208a:	e6 a0                	out    %al,$0xa0
c000208c:	e6 20                	out    %al,$0x20
c000208e:	6a 0c                	push   $0xc
c0002090:	ff 15 f0 c9 00 c0    	call   *0xc000c9f0
c0002096:	e9 95 fe ff ff       	jmp    c0001f30 <intr_exit>

c000209b <intr0x0dentry>:
intr0x0dentry():
c000209b:	90                   	nop
c000209c:	1e                   	push   %ds
c000209d:	06                   	push   %es
c000209e:	0f a0                	push   %fs
c00020a0:	0f a8                	push   %gs
c00020a2:	60                   	pusha  
c00020a3:	b0 20                	mov    $0x20,%al
c00020a5:	e6 a0                	out    %al,$0xa0
c00020a7:	e6 20                	out    %al,$0x20
c00020a9:	6a 0d                	push   $0xd
c00020ab:	ff 15 f4 c9 00 c0    	call   *0xc000c9f4
c00020b1:	e9 7a fe ff ff       	jmp    c0001f30 <intr_exit>

c00020b6 <intr0x0eentry>:
intr0x0eentry():
c00020b6:	90                   	nop
c00020b7:	1e                   	push   %ds
c00020b8:	06                   	push   %es
c00020b9:	0f a0                	push   %fs
c00020bb:	0f a8                	push   %gs
c00020bd:	60                   	pusha  
c00020be:	b0 20                	mov    $0x20,%al
c00020c0:	e6 a0                	out    %al,$0xa0
c00020c2:	e6 20                	out    %al,$0x20
c00020c4:	6a 0e                	push   $0xe
c00020c6:	ff 15 f8 c9 00 c0    	call   *0xc000c9f8
c00020cc:	e9 5f fe ff ff       	jmp    c0001f30 <intr_exit>

c00020d1 <intr0x0fentry>:
intr0x0fentry():
c00020d1:	6a 00                	push   $0x0
c00020d3:	1e                   	push   %ds
c00020d4:	06                   	push   %es
c00020d5:	0f a0                	push   %fs
c00020d7:	0f a8                	push   %gs
c00020d9:	60                   	pusha  
c00020da:	b0 20                	mov    $0x20,%al
c00020dc:	e6 a0                	out    %al,$0xa0
c00020de:	e6 20                	out    %al,$0x20
c00020e0:	6a 0f                	push   $0xf
c00020e2:	ff 15 fc c9 00 c0    	call   *0xc000c9fc
c00020e8:	e9 43 fe ff ff       	jmp    c0001f30 <intr_exit>

c00020ed <intr0x10entry>:
intr0x10entry():
c00020ed:	6a 00                	push   $0x0
c00020ef:	1e                   	push   %ds
c00020f0:	06                   	push   %es
c00020f1:	0f a0                	push   %fs
c00020f3:	0f a8                	push   %gs
c00020f5:	60                   	pusha  
c00020f6:	b0 20                	mov    $0x20,%al
c00020f8:	e6 a0                	out    %al,$0xa0
c00020fa:	e6 20                	out    %al,$0x20
c00020fc:	6a 10                	push   $0x10
c00020fe:	ff 15 00 ca 00 c0    	call   *0xc000ca00
c0002104:	e9 27 fe ff ff       	jmp    c0001f30 <intr_exit>

c0002109 <intr0x11entry>:
intr0x11entry():
c0002109:	90                   	nop
c000210a:	1e                   	push   %ds
c000210b:	06                   	push   %es
c000210c:	0f a0                	push   %fs
c000210e:	0f a8                	push   %gs
c0002110:	60                   	pusha  
c0002111:	b0 20                	mov    $0x20,%al
c0002113:	e6 a0                	out    %al,$0xa0
c0002115:	e6 20                	out    %al,$0x20
c0002117:	6a 11                	push   $0x11
c0002119:	ff 15 04 ca 00 c0    	call   *0xc000ca04
c000211f:	e9 0c fe ff ff       	jmp    c0001f30 <intr_exit>

c0002124 <intr0x12entry>:
intr0x12entry():
c0002124:	6a 00                	push   $0x0
c0002126:	1e                   	push   %ds
c0002127:	06                   	push   %es
c0002128:	0f a0                	push   %fs
c000212a:	0f a8                	push   %gs
c000212c:	60                   	pusha  
c000212d:	b0 20                	mov    $0x20,%al
c000212f:	e6 a0                	out    %al,$0xa0
c0002131:	e6 20                	out    %al,$0x20
c0002133:	6a 12                	push   $0x12
c0002135:	ff 15 08 ca 00 c0    	call   *0xc000ca08
c000213b:	e9 f0 fd ff ff       	jmp    c0001f30 <intr_exit>

c0002140 <intr0x13entry>:
intr0x13entry():
c0002140:	6a 00                	push   $0x0
c0002142:	1e                   	push   %ds
c0002143:	06                   	push   %es
c0002144:	0f a0                	push   %fs
c0002146:	0f a8                	push   %gs
c0002148:	60                   	pusha  
c0002149:	b0 20                	mov    $0x20,%al
c000214b:	e6 a0                	out    %al,$0xa0
c000214d:	e6 20                	out    %al,$0x20
c000214f:	6a 13                	push   $0x13
c0002151:	ff 15 0c ca 00 c0    	call   *0xc000ca0c
c0002157:	e9 d4 fd ff ff       	jmp    c0001f30 <intr_exit>

c000215c <intr0x14entry>:
intr0x14entry():
c000215c:	6a 00                	push   $0x0
c000215e:	1e                   	push   %ds
c000215f:	06                   	push   %es
c0002160:	0f a0                	push   %fs
c0002162:	0f a8                	push   %gs
c0002164:	60                   	pusha  
c0002165:	b0 20                	mov    $0x20,%al
c0002167:	e6 a0                	out    %al,$0xa0
c0002169:	e6 20                	out    %al,$0x20
c000216b:	6a 14                	push   $0x14
c000216d:	ff 15 10 ca 00 c0    	call   *0xc000ca10
c0002173:	e9 b8 fd ff ff       	jmp    c0001f30 <intr_exit>

c0002178 <intr0x15entry>:
intr0x15entry():
c0002178:	6a 00                	push   $0x0
c000217a:	1e                   	push   %ds
c000217b:	06                   	push   %es
c000217c:	0f a0                	push   %fs
c000217e:	0f a8                	push   %gs
c0002180:	60                   	pusha  
c0002181:	b0 20                	mov    $0x20,%al
c0002183:	e6 a0                	out    %al,$0xa0
c0002185:	e6 20                	out    %al,$0x20
c0002187:	6a 15                	push   $0x15
c0002189:	ff 15 14 ca 00 c0    	call   *0xc000ca14
c000218f:	e9 9c fd ff ff       	jmp    c0001f30 <intr_exit>

c0002194 <intr0x16entry>:
intr0x16entry():
c0002194:	6a 00                	push   $0x0
c0002196:	1e                   	push   %ds
c0002197:	06                   	push   %es
c0002198:	0f a0                	push   %fs
c000219a:	0f a8                	push   %gs
c000219c:	60                   	pusha  
c000219d:	b0 20                	mov    $0x20,%al
c000219f:	e6 a0                	out    %al,$0xa0
c00021a1:	e6 20                	out    %al,$0x20
c00021a3:	6a 16                	push   $0x16
c00021a5:	ff 15 18 ca 00 c0    	call   *0xc000ca18
c00021ab:	e9 80 fd ff ff       	jmp    c0001f30 <intr_exit>

c00021b0 <intr0x17entry>:
intr0x17entry():
c00021b0:	6a 00                	push   $0x0
c00021b2:	1e                   	push   %ds
c00021b3:	06                   	push   %es
c00021b4:	0f a0                	push   %fs
c00021b6:	0f a8                	push   %gs
c00021b8:	60                   	pusha  
c00021b9:	b0 20                	mov    $0x20,%al
c00021bb:	e6 a0                	out    %al,$0xa0
c00021bd:	e6 20                	out    %al,$0x20
c00021bf:	6a 17                	push   $0x17
c00021c1:	ff 15 1c ca 00 c0    	call   *0xc000ca1c
c00021c7:	e9 64 fd ff ff       	jmp    c0001f30 <intr_exit>

c00021cc <intr0x18entry>:
intr0x18entry():
c00021cc:	90                   	nop
c00021cd:	1e                   	push   %ds
c00021ce:	06                   	push   %es
c00021cf:	0f a0                	push   %fs
c00021d1:	0f a8                	push   %gs
c00021d3:	60                   	pusha  
c00021d4:	b0 20                	mov    $0x20,%al
c00021d6:	e6 a0                	out    %al,$0xa0
c00021d8:	e6 20                	out    %al,$0x20
c00021da:	6a 18                	push   $0x18
c00021dc:	ff 15 20 ca 00 c0    	call   *0xc000ca20
c00021e2:	e9 49 fd ff ff       	jmp    c0001f30 <intr_exit>

c00021e7 <intr0x19entry>:
intr0x19entry():
c00021e7:	6a 00                	push   $0x0
c00021e9:	1e                   	push   %ds
c00021ea:	06                   	push   %es
c00021eb:	0f a0                	push   %fs
c00021ed:	0f a8                	push   %gs
c00021ef:	60                   	pusha  
c00021f0:	b0 20                	mov    $0x20,%al
c00021f2:	e6 a0                	out    %al,$0xa0
c00021f4:	e6 20                	out    %al,$0x20
c00021f6:	6a 19                	push   $0x19
c00021f8:	ff 15 24 ca 00 c0    	call   *0xc000ca24
c00021fe:	e9 2d fd ff ff       	jmp    c0001f30 <intr_exit>

c0002203 <intr0x1aentry>:
intr0x1aentry():
c0002203:	90                   	nop
c0002204:	1e                   	push   %ds
c0002205:	06                   	push   %es
c0002206:	0f a0                	push   %fs
c0002208:	0f a8                	push   %gs
c000220a:	60                   	pusha  
c000220b:	b0 20                	mov    $0x20,%al
c000220d:	e6 a0                	out    %al,$0xa0
c000220f:	e6 20                	out    %al,$0x20
c0002211:	6a 1a                	push   $0x1a
c0002213:	ff 15 28 ca 00 c0    	call   *0xc000ca28
c0002219:	e9 12 fd ff ff       	jmp    c0001f30 <intr_exit>

c000221e <intr0x1bentry>:
intr0x1bentry():
c000221e:	90                   	nop
c000221f:	1e                   	push   %ds
c0002220:	06                   	push   %es
c0002221:	0f a0                	push   %fs
c0002223:	0f a8                	push   %gs
c0002225:	60                   	pusha  
c0002226:	b0 20                	mov    $0x20,%al
c0002228:	e6 a0                	out    %al,$0xa0
c000222a:	e6 20                	out    %al,$0x20
c000222c:	6a 1b                	push   $0x1b
c000222e:	ff 15 2c ca 00 c0    	call   *0xc000ca2c
c0002234:	e9 f7 fc ff ff       	jmp    c0001f30 <intr_exit>

c0002239 <intr0x1centry>:
intr0x1centry():
c0002239:	6a 00                	push   $0x0
c000223b:	1e                   	push   %ds
c000223c:	06                   	push   %es
c000223d:	0f a0                	push   %fs
c000223f:	0f a8                	push   %gs
c0002241:	60                   	pusha  
c0002242:	b0 20                	mov    $0x20,%al
c0002244:	e6 a0                	out    %al,$0xa0
c0002246:	e6 20                	out    %al,$0x20
c0002248:	6a 1c                	push   $0x1c
c000224a:	ff 15 30 ca 00 c0    	call   *0xc000ca30
c0002250:	e9 db fc ff ff       	jmp    c0001f30 <intr_exit>

c0002255 <intr0x1dentry>:
intr0x1dentry():
c0002255:	90                   	nop
c0002256:	1e                   	push   %ds
c0002257:	06                   	push   %es
c0002258:	0f a0                	push   %fs
c000225a:	0f a8                	push   %gs
c000225c:	60                   	pusha  
c000225d:	b0 20                	mov    $0x20,%al
c000225f:	e6 a0                	out    %al,$0xa0
c0002261:	e6 20                	out    %al,$0x20
c0002263:	6a 1d                	push   $0x1d
c0002265:	ff 15 34 ca 00 c0    	call   *0xc000ca34
c000226b:	e9 c0 fc ff ff       	jmp    c0001f30 <intr_exit>

c0002270 <intr0x1eentry>:
intr0x1eentry():
c0002270:	90                   	nop
c0002271:	1e                   	push   %ds
c0002272:	06                   	push   %es
c0002273:	0f a0                	push   %fs
c0002275:	0f a8                	push   %gs
c0002277:	60                   	pusha  
c0002278:	b0 20                	mov    $0x20,%al
c000227a:	e6 a0                	out    %al,$0xa0
c000227c:	e6 20                	out    %al,$0x20
c000227e:	6a 1e                	push   $0x1e
c0002280:	ff 15 38 ca 00 c0    	call   *0xc000ca38
c0002286:	e9 a5 fc ff ff       	jmp    c0001f30 <intr_exit>

c000228b <intr0x1fentry>:
intr0x1fentry():
c000228b:	6a 00                	push   $0x0
c000228d:	1e                   	push   %ds
c000228e:	06                   	push   %es
c000228f:	0f a0                	push   %fs
c0002291:	0f a8                	push   %gs
c0002293:	60                   	pusha  
c0002294:	b0 20                	mov    $0x20,%al
c0002296:	e6 a0                	out    %al,$0xa0
c0002298:	e6 20                	out    %al,$0x20
c000229a:	6a 1f                	push   $0x1f
c000229c:	ff 15 3c ca 00 c0    	call   *0xc000ca3c
c00022a2:	e9 89 fc ff ff       	jmp    c0001f30 <intr_exit>

c00022a7 <intr0x20entry>:
intr0x20entry():
c00022a7:	6a 00                	push   $0x0
c00022a9:	1e                   	push   %ds
c00022aa:	06                   	push   %es
c00022ab:	0f a0                	push   %fs
c00022ad:	0f a8                	push   %gs
c00022af:	60                   	pusha  
c00022b0:	b0 20                	mov    $0x20,%al
c00022b2:	e6 a0                	out    %al,$0xa0
c00022b4:	e6 20                	out    %al,$0x20
c00022b6:	6a 20                	push   $0x20
c00022b8:	ff 15 40 ca 00 c0    	call   *0xc000ca40
c00022be:	e9 6d fc ff ff       	jmp    c0001f30 <intr_exit>

c00022c3 <intr0x21entry>:
intr0x21entry():
c00022c3:	6a 00                	push   $0x0
c00022c5:	1e                   	push   %ds
c00022c6:	06                   	push   %es
c00022c7:	0f a0                	push   %fs
c00022c9:	0f a8                	push   %gs
c00022cb:	60                   	pusha  
c00022cc:	b0 20                	mov    $0x20,%al
c00022ce:	e6 a0                	out    %al,$0xa0
c00022d0:	e6 20                	out    %al,$0x20
c00022d2:	6a 21                	push   $0x21
c00022d4:	ff 15 44 ca 00 c0    	call   *0xc000ca44
c00022da:	e9 51 fc ff ff       	jmp    c0001f30 <intr_exit>

c00022df <intr0x22entry>:
intr0x22entry():
c00022df:	6a 00                	push   $0x0
c00022e1:	1e                   	push   %ds
c00022e2:	06                   	push   %es
c00022e3:	0f a0                	push   %fs
c00022e5:	0f a8                	push   %gs
c00022e7:	60                   	pusha  
c00022e8:	b0 20                	mov    $0x20,%al
c00022ea:	e6 a0                	out    %al,$0xa0
c00022ec:	e6 20                	out    %al,$0x20
c00022ee:	6a 22                	push   $0x22
c00022f0:	ff 15 48 ca 00 c0    	call   *0xc000ca48
c00022f6:	e9 35 fc ff ff       	jmp    c0001f30 <intr_exit>

c00022fb <intr0x23entry>:
intr0x23entry():
c00022fb:	6a 00                	push   $0x0
c00022fd:	1e                   	push   %ds
c00022fe:	06                   	push   %es
c00022ff:	0f a0                	push   %fs
c0002301:	0f a8                	push   %gs
c0002303:	60                   	pusha  
c0002304:	b0 20                	mov    $0x20,%al
c0002306:	e6 a0                	out    %al,$0xa0
c0002308:	e6 20                	out    %al,$0x20
c000230a:	6a 23                	push   $0x23
c000230c:	ff 15 4c ca 00 c0    	call   *0xc000ca4c
c0002312:	e9 19 fc ff ff       	jmp    c0001f30 <intr_exit>

c0002317 <intr0x24entry>:
intr0x24entry():
c0002317:	6a 00                	push   $0x0
c0002319:	1e                   	push   %ds
c000231a:	06                   	push   %es
c000231b:	0f a0                	push   %fs
c000231d:	0f a8                	push   %gs
c000231f:	60                   	pusha  
c0002320:	b0 20                	mov    $0x20,%al
c0002322:	e6 a0                	out    %al,$0xa0
c0002324:	e6 20                	out    %al,$0x20
c0002326:	6a 24                	push   $0x24
c0002328:	ff 15 50 ca 00 c0    	call   *0xc000ca50
c000232e:	e9 fd fb ff ff       	jmp    c0001f30 <intr_exit>

c0002333 <intr0x25entry>:
intr0x25entry():
c0002333:	6a 00                	push   $0x0
c0002335:	1e                   	push   %ds
c0002336:	06                   	push   %es
c0002337:	0f a0                	push   %fs
c0002339:	0f a8                	push   %gs
c000233b:	60                   	pusha  
c000233c:	b0 20                	mov    $0x20,%al
c000233e:	e6 a0                	out    %al,$0xa0
c0002340:	e6 20                	out    %al,$0x20
c0002342:	6a 25                	push   $0x25
c0002344:	ff 15 54 ca 00 c0    	call   *0xc000ca54
c000234a:	e9 e1 fb ff ff       	jmp    c0001f30 <intr_exit>

c000234f <intr0x26entry>:
intr0x26entry():
c000234f:	6a 00                	push   $0x0
c0002351:	1e                   	push   %ds
c0002352:	06                   	push   %es
c0002353:	0f a0                	push   %fs
c0002355:	0f a8                	push   %gs
c0002357:	60                   	pusha  
c0002358:	b0 20                	mov    $0x20,%al
c000235a:	e6 a0                	out    %al,$0xa0
c000235c:	e6 20                	out    %al,$0x20
c000235e:	6a 26                	push   $0x26
c0002360:	ff 15 58 ca 00 c0    	call   *0xc000ca58
c0002366:	e9 c5 fb ff ff       	jmp    c0001f30 <intr_exit>

c000236b <intr0x27entry>:
intr0x27entry():
c000236b:	6a 00                	push   $0x0
c000236d:	1e                   	push   %ds
c000236e:	06                   	push   %es
c000236f:	0f a0                	push   %fs
c0002371:	0f a8                	push   %gs
c0002373:	60                   	pusha  
c0002374:	b0 20                	mov    $0x20,%al
c0002376:	e6 a0                	out    %al,$0xa0
c0002378:	e6 20                	out    %al,$0x20
c000237a:	6a 27                	push   $0x27
c000237c:	ff 15 5c ca 00 c0    	call   *0xc000ca5c
c0002382:	e9 a9 fb ff ff       	jmp    c0001f30 <intr_exit>

c0002387 <intr0x28entry>:
intr0x28entry():
c0002387:	6a 00                	push   $0x0
c0002389:	1e                   	push   %ds
c000238a:	06                   	push   %es
c000238b:	0f a0                	push   %fs
c000238d:	0f a8                	push   %gs
c000238f:	60                   	pusha  
c0002390:	b0 20                	mov    $0x20,%al
c0002392:	e6 a0                	out    %al,$0xa0
c0002394:	e6 20                	out    %al,$0x20
c0002396:	6a 28                	push   $0x28
c0002398:	ff 15 60 ca 00 c0    	call   *0xc000ca60
c000239e:	e9 8d fb ff ff       	jmp    c0001f30 <intr_exit>

c00023a3 <intr0x29entry>:
intr0x29entry():
c00023a3:	6a 00                	push   $0x0
c00023a5:	1e                   	push   %ds
c00023a6:	06                   	push   %es
c00023a7:	0f a0                	push   %fs
c00023a9:	0f a8                	push   %gs
c00023ab:	60                   	pusha  
c00023ac:	b0 20                	mov    $0x20,%al
c00023ae:	e6 a0                	out    %al,$0xa0
c00023b0:	e6 20                	out    %al,$0x20
c00023b2:	6a 29                	push   $0x29
c00023b4:	ff 15 64 ca 00 c0    	call   *0xc000ca64
c00023ba:	e9 71 fb ff ff       	jmp    c0001f30 <intr_exit>

c00023bf <intr0x2aentry>:
intr0x2aentry():
c00023bf:	6a 00                	push   $0x0
c00023c1:	1e                   	push   %ds
c00023c2:	06                   	push   %es
c00023c3:	0f a0                	push   %fs
c00023c5:	0f a8                	push   %gs
c00023c7:	60                   	pusha  
c00023c8:	b0 20                	mov    $0x20,%al
c00023ca:	e6 a0                	out    %al,$0xa0
c00023cc:	e6 20                	out    %al,$0x20
c00023ce:	6a 2a                	push   $0x2a
c00023d0:	ff 15 68 ca 00 c0    	call   *0xc000ca68
c00023d6:	e9 55 fb ff ff       	jmp    c0001f30 <intr_exit>

c00023db <intr0x2bentry>:
intr0x2bentry():
c00023db:	6a 00                	push   $0x0
c00023dd:	1e                   	push   %ds
c00023de:	06                   	push   %es
c00023df:	0f a0                	push   %fs
c00023e1:	0f a8                	push   %gs
c00023e3:	60                   	pusha  
c00023e4:	b0 20                	mov    $0x20,%al
c00023e6:	e6 a0                	out    %al,$0xa0
c00023e8:	e6 20                	out    %al,$0x20
c00023ea:	6a 2b                	push   $0x2b
c00023ec:	ff 15 6c ca 00 c0    	call   *0xc000ca6c
c00023f2:	e9 39 fb ff ff       	jmp    c0001f30 <intr_exit>

c00023f7 <intr0x2centry>:
intr0x2centry():
c00023f7:	6a 00                	push   $0x0
c00023f9:	1e                   	push   %ds
c00023fa:	06                   	push   %es
c00023fb:	0f a0                	push   %fs
c00023fd:	0f a8                	push   %gs
c00023ff:	60                   	pusha  
c0002400:	b0 20                	mov    $0x20,%al
c0002402:	e6 a0                	out    %al,$0xa0
c0002404:	e6 20                	out    %al,$0x20
c0002406:	6a 2c                	push   $0x2c
c0002408:	ff 15 70 ca 00 c0    	call   *0xc000ca70
c000240e:	e9 1d fb ff ff       	jmp    c0001f30 <intr_exit>

c0002413 <intr0x2dentry>:
intr0x2dentry():
c0002413:	6a 00                	push   $0x0
c0002415:	1e                   	push   %ds
c0002416:	06                   	push   %es
c0002417:	0f a0                	push   %fs
c0002419:	0f a8                	push   %gs
c000241b:	60                   	pusha  
c000241c:	b0 20                	mov    $0x20,%al
c000241e:	e6 a0                	out    %al,$0xa0
c0002420:	e6 20                	out    %al,$0x20
c0002422:	6a 2d                	push   $0x2d
c0002424:	ff 15 74 ca 00 c0    	call   *0xc000ca74
c000242a:	e9 01 fb ff ff       	jmp    c0001f30 <intr_exit>

c000242f <intr0x2eentry>:
intr0x2eentry():
c000242f:	6a 00                	push   $0x0
c0002431:	1e                   	push   %ds
c0002432:	06                   	push   %es
c0002433:	0f a0                	push   %fs
c0002435:	0f a8                	push   %gs
c0002437:	60                   	pusha  
c0002438:	b0 20                	mov    $0x20,%al
c000243a:	e6 a0                	out    %al,$0xa0
c000243c:	e6 20                	out    %al,$0x20
c000243e:	6a 2e                	push   $0x2e
c0002440:	ff 15 78 ca 00 c0    	call   *0xc000ca78
c0002446:	e9 e5 fa ff ff       	jmp    c0001f30 <intr_exit>

c000244b <intr0x2fentry>:
intr0x2fentry():
c000244b:	6a 00                	push   $0x0
c000244d:	1e                   	push   %ds
c000244e:	06                   	push   %es
c000244f:	0f a0                	push   %fs
c0002451:	0f a8                	push   %gs
c0002453:	60                   	pusha  
c0002454:	b0 20                	mov    $0x20,%al
c0002456:	e6 a0                	out    %al,$0xa0
c0002458:	e6 20                	out    %al,$0x20
c000245a:	6a 2f                	push   $0x2f
c000245c:	ff 15 7c ca 00 c0    	call   *0xc000ca7c
c0002462:	e9 c9 fa ff ff       	jmp    c0001f30 <intr_exit>

c0002467 <syscall_handler>:
syscall_handler():
c0002467:	6a 00                	push   $0x0
c0002469:	1e                   	push   %ds
c000246a:	06                   	push   %es
c000246b:	0f a0                	push   %fs
c000246d:	0f a8                	push   %gs
c000246f:	60                   	pusha  
c0002470:	68 80 00 00 00       	push   $0x80
c0002475:	52                   	push   %edx
c0002476:	51                   	push   %ecx
c0002477:	53                   	push   %ebx
c0002478:	ff 14 85 e0 cd 00 c0 	call   *-0x3fff3220(,%eax,4)
c000247f:	83 c4 0c             	add    $0xc,%esp
c0002482:	89 44 24 20          	mov    %eax,0x20(%esp)
c0002486:	e9 a5 fa ff ff       	jmp    c0001f30 <intr_exit>
c000248b:	66 90                	xchg   %ax,%ax
c000248d:	66 90                	xchg   %ax,%ax
c000248f:	90                   	nop

c0002490 <put_str>:
put_str():
c0002490:	53                   	push   %ebx
c0002491:	51                   	push   %ecx
c0002492:	31 c9                	xor    %ecx,%ecx
c0002494:	8b 5c 24 0c          	mov    0xc(%esp),%ebx

c0002498 <put_str.goon>:
put_str.goon():
c0002498:	8a 0b                	mov    (%ebx),%cl
c000249a:	80 f9 00             	cmp    $0x0,%cl
c000249d:	74 0c                	je     c00024ab <put_str.str_over>
c000249f:	51                   	push   %ecx
c00024a0:	e8 09 00 00 00       	call   c00024ae <put_char>
c00024a5:	83 c4 04             	add    $0x4,%esp
c00024a8:	43                   	inc    %ebx
c00024a9:	eb ed                	jmp    c0002498 <put_str.goon>

c00024ab <put_str.str_over>:
put_str.str_over():
c00024ab:	59                   	pop    %ecx
c00024ac:	5b                   	pop    %ebx
c00024ad:	c3                   	ret    

c00024ae <put_char>:
put_char():
c00024ae:	60                   	pusha  
c00024af:	66 b8 18 00          	mov    $0x18,%ax
c00024b3:	8e e8                	mov    %eax,%gs
c00024b5:	66 ba d4 03          	mov    $0x3d4,%dx
c00024b9:	b0 0e                	mov    $0xe,%al
c00024bb:	ee                   	out    %al,(%dx)
c00024bc:	66 ba d5 03          	mov    $0x3d5,%dx
c00024c0:	ec                   	in     (%dx),%al
c00024c1:	88 c4                	mov    %al,%ah
c00024c3:	66 ba d4 03          	mov    $0x3d4,%dx
c00024c7:	b0 0f                	mov    $0xf,%al
c00024c9:	ee                   	out    %al,(%dx)
c00024ca:	66 ba d5 03          	mov    $0x3d5,%dx
c00024ce:	ec                   	in     (%dx),%al
c00024cf:	66 89 c3             	mov    %ax,%bx
c00024d2:	8b 4c 24 24          	mov    0x24(%esp),%ecx
c00024d6:	80 f9 0d             	cmp    $0xd,%cl
c00024d9:	74 3c                	je     c0002517 <put_char.is_carriage_return>
c00024db:	80 f9 0a             	cmp    $0xa,%cl
c00024de:	74 37                	je     c0002517 <put_char.is_carriage_return>
c00024e0:	80 f9 08             	cmp    $0x8,%cl
c00024e3:	74 02                	je     c00024e7 <put_char.is_backspace>
c00024e5:	eb 16                	jmp    c00024fd <put_char.put_other>

c00024e7 <put_char.is_backspace>:
put_char.is_backspace():
c00024e7:	66 4b                	dec    %bx
c00024e9:	66 d1 e3             	shl    %bx
c00024ec:	65 67 c6 07 20       	movb   $0x20,%gs:(%bx)
c00024f1:	66 43                	inc    %bx
c00024f3:	65 67 c6 07 07       	movb   $0x7,%gs:(%bx)
c00024f8:	66 d1 eb             	shr    %bx
c00024fb:	eb 60                	jmp    c000255d <put_char.set_cursor>

c00024fd <put_char.put_other>:
put_char.put_other():
c00024fd:	66 d1 e3             	shl    %bx
c0002500:	65 67 88 0f          	mov    %cl,%gs:(%bx)
c0002504:	66 43                	inc    %bx
c0002506:	65 67 c6 07 07       	movb   $0x7,%gs:(%bx)
c000250b:	66 d1 eb             	shr    %bx
c000250e:	66 43                	inc    %bx
c0002510:	66 81 fb d0 07       	cmp    $0x7d0,%bx
c0002515:	7c 46                	jl     c000255d <put_char.set_cursor>

c0002517 <put_char.is_carriage_return>:
put_char.is_line_feed():
c0002517:	66 31 d2             	xor    %dx,%dx
c000251a:	66 89 d8             	mov    %bx,%ax
c000251d:	66 be 50 00          	mov    $0x50,%si
c0002521:	66 f7 f6             	div    %si
c0002524:	66 29 d3             	sub    %dx,%bx

c0002527 <put_char.is_carriage_return_end>:
put_char.is_carriage_return_end():
c0002527:	66 83 c3 50          	add    $0x50,%bx
c000252b:	66 81 fb d0 07       	cmp    $0x7d0,%bx

c0002530 <put_char.is_line_feed_end>:
put_char.is_line_feed_end():
c0002530:	7c 2b                	jl     c000255d <put_char.set_cursor>

c0002532 <put_char.roll_screen>:
put_char.roll_screen():
c0002532:	fc                   	cld    
c0002533:	b9 c0 03 00 00       	mov    $0x3c0,%ecx
c0002538:	be a0 80 0b c0       	mov    $0xc00b80a0,%esi
c000253d:	bf 00 80 0b c0       	mov    $0xc00b8000,%edi
c0002542:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c0002544:	bb 00 0f 00 00       	mov    $0xf00,%ebx
c0002549:	b9 50 00 00 00       	mov    $0x50,%ecx

c000254e <put_char.cls>:
put_char.cls():
c000254e:	65 66 c7 03 20 07    	movw   $0x720,%gs:(%ebx)
c0002554:	83 c3 02             	add    $0x2,%ebx
c0002557:	e2 f5                	loop   c000254e <put_char.cls>
c0002559:	66 bb 80 07          	mov    $0x780,%bx

c000255d <put_char.set_cursor>:
put_char.set_cursor():
c000255d:	66 ba d4 03          	mov    $0x3d4,%dx
c0002561:	b0 0e                	mov    $0xe,%al
c0002563:	ee                   	out    %al,(%dx)
c0002564:	66 ba d5 03          	mov    $0x3d5,%dx
c0002568:	88 f8                	mov    %bh,%al
c000256a:	ee                   	out    %al,(%dx)
c000256b:	66 ba d4 03          	mov    $0x3d4,%dx
c000256f:	b0 0f                	mov    $0xf,%al
c0002571:	ee                   	out    %al,(%dx)
c0002572:	66 ba d5 03          	mov    $0x3d5,%dx
c0002576:	88 d8                	mov    %bl,%al
c0002578:	ee                   	out    %al,(%dx)

c0002579 <put_char.put_char_done>:
put_char.put_char_done():
c0002579:	61                   	popa   
c000257a:	c3                   	ret    

c000257b <put_int>:
put_int():
c000257b:	60                   	pusha  
c000257c:	89 e5                	mov    %esp,%ebp
c000257e:	8b 45 24             	mov    0x24(%ebp),%eax
c0002581:	89 c2                	mov    %eax,%edx
c0002583:	bf 07 00 00 00       	mov    $0x7,%edi
c0002588:	b9 08 00 00 00       	mov    $0x8,%ecx
c000258d:	bb 40 c2 00 c0       	mov    $0xc000c240,%ebx

c0002592 <put_int.16based_4bits>:
put_int.16based_4bits():
c0002592:	83 e2 0f             	and    $0xf,%edx
c0002595:	83 fa 09             	cmp    $0x9,%edx
c0002598:	7f 05                	jg     c000259f <put_int.is_A2F>
c000259a:	83 c2 30             	add    $0x30,%edx
c000259d:	eb 06                	jmp    c00025a5 <put_int.store>

c000259f <put_int.is_A2F>:
put_int.is_A2F():
c000259f:	83 ea 0a             	sub    $0xa,%edx
c00025a2:	83 c2 41             	add    $0x41,%edx

c00025a5 <put_int.store>:
put_int.store():
c00025a5:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
c00025a8:	4f                   	dec    %edi
c00025a9:	c1 e8 04             	shr    $0x4,%eax
c00025ac:	89 c2                	mov    %eax,%edx
c00025ae:	e2 e2                	loop   c0002592 <put_int.16based_4bits>

c00025b0 <put_int.ready_to_print>:
put_int.ready_to_print():
c00025b0:	47                   	inc    %edi

c00025b1 <put_int.skip_prefix_0>:
put_int.skip_prefix_0():
c00025b1:	83 ff 08             	cmp    $0x8,%edi
c00025b4:	74 0f                	je     c00025c5 <put_int.full0>

c00025b6 <put_int.go_on_skip>:
put_int.go_on_skip():
c00025b6:	8a 8f 40 c2 00 c0    	mov    -0x3fff3dc0(%edi),%cl
c00025bc:	47                   	inc    %edi
c00025bd:	80 f9 30             	cmp    $0x30,%cl
c00025c0:	74 ef                	je     c00025b1 <put_int.skip_prefix_0>
c00025c2:	4f                   	dec    %edi
c00025c3:	eb 02                	jmp    c00025c7 <put_int.put_each_num>

c00025c5 <put_int.full0>:
put_int.full0():
c00025c5:	b1 30                	mov    $0x30,%cl

c00025c7 <put_int.put_each_num>:
put_int.put_each_num():
c00025c7:	51                   	push   %ecx
c00025c8:	e8 e1 fe ff ff       	call   c00024ae <put_char>
c00025cd:	83 c4 04             	add    $0x4,%esp
c00025d0:	47                   	inc    %edi
c00025d1:	8a 8f 40 c2 00 c0    	mov    -0x3fff3dc0(%edi),%cl
c00025d7:	83 ff 08             	cmp    $0x8,%edi
c00025da:	7c eb                	jl     c00025c7 <put_int.put_each_num>
c00025dc:	61                   	popa   
c00025dd:	c3                   	ret    

c00025de <set_cursor>:
set_cursor():
c00025de:	60                   	pusha  
c00025df:	66 8b 5c 24 24       	mov    0x24(%esp),%bx
c00025e4:	66 ba d4 03          	mov    $0x3d4,%dx
c00025e8:	b0 0e                	mov    $0xe,%al
c00025ea:	ee                   	out    %al,(%dx)
c00025eb:	66 ba d5 03          	mov    $0x3d5,%dx
c00025ef:	88 f8                	mov    %bh,%al
c00025f1:	ee                   	out    %al,(%dx)
c00025f2:	66 ba d4 03          	mov    $0x3d4,%dx
c00025f6:	b0 0f                	mov    $0xf,%al
c00025f8:	ee                   	out    %al,(%dx)
c00025f9:	66 ba d5 03          	mov    $0x3d5,%dx
c00025fd:	88 d8                	mov    %bl,%al
c00025ff:	ee                   	out    %al,(%dx)
c0002600:	61                   	popa   
c0002601:	c3                   	ret    

c0002602 <panic_spin>:
panic_spin():
/work/x86_os_my/kernel/debug.c:10
/* 打印文件名,行号,函数名,条件并使程序悬停 */
void panic_spin(char* filename,	       \
	        int line,	       \
		const char* func,      \
		const char* condition) \
{
c0002602:	55                   	push   %ebp
c0002603:	89 e5                	mov    %esp,%ebp
c0002605:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/kernel/debug.c:11
   intr_disable();	// 因为有时候会单独调用panic_spin,所以在此处关中断。
c0002608:	e8 4e f6 ff ff       	call   c0001c5b <intr_disable>
/work/x86_os_my/kernel/debug.c:12
   put_str("\n\n\n!!!!! error !!!!!\n");
c000260d:	83 ec 0c             	sub    $0xc,%esp
c0002610:	68 b0 88 00 c0       	push   $0xc00088b0
c0002615:	e8 76 fe ff ff       	call   c0002490 <put_str>
c000261a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/debug.c:13
   put_str("filename:");put_str(filename);put_str("\n");
c000261d:	83 ec 0c             	sub    $0xc,%esp
c0002620:	68 c6 88 00 c0       	push   $0xc00088c6
c0002625:	e8 66 fe ff ff       	call   c0002490 <put_str>
c000262a:	83 c4 10             	add    $0x10,%esp
c000262d:	83 ec 0c             	sub    $0xc,%esp
c0002630:	ff 75 08             	pushl  0x8(%ebp)
c0002633:	e8 58 fe ff ff       	call   c0002490 <put_str>
c0002638:	83 c4 10             	add    $0x10,%esp
c000263b:	83 ec 0c             	sub    $0xc,%esp
c000263e:	68 d0 88 00 c0       	push   $0xc00088d0
c0002643:	e8 48 fe ff ff       	call   c0002490 <put_str>
c0002648:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/debug.c:14
   put_str("line:0x");put_int(line);put_str("\n");
c000264b:	83 ec 0c             	sub    $0xc,%esp
c000264e:	68 d2 88 00 c0       	push   $0xc00088d2
c0002653:	e8 38 fe ff ff       	call   c0002490 <put_str>
c0002658:	83 c4 10             	add    $0x10,%esp
c000265b:	8b 45 0c             	mov    0xc(%ebp),%eax
c000265e:	83 ec 0c             	sub    $0xc,%esp
c0002661:	50                   	push   %eax
c0002662:	e8 14 ff ff ff       	call   c000257b <put_int>
c0002667:	83 c4 10             	add    $0x10,%esp
c000266a:	83 ec 0c             	sub    $0xc,%esp
c000266d:	68 d0 88 00 c0       	push   $0xc00088d0
c0002672:	e8 19 fe ff ff       	call   c0002490 <put_str>
c0002677:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/debug.c:15
   put_str("function:");put_str((char*)func);put_str("\n");
c000267a:	83 ec 0c             	sub    $0xc,%esp
c000267d:	68 da 88 00 c0       	push   $0xc00088da
c0002682:	e8 09 fe ff ff       	call   c0002490 <put_str>
c0002687:	83 c4 10             	add    $0x10,%esp
c000268a:	83 ec 0c             	sub    $0xc,%esp
c000268d:	ff 75 10             	pushl  0x10(%ebp)
c0002690:	e8 fb fd ff ff       	call   c0002490 <put_str>
c0002695:	83 c4 10             	add    $0x10,%esp
c0002698:	83 ec 0c             	sub    $0xc,%esp
c000269b:	68 d0 88 00 c0       	push   $0xc00088d0
c00026a0:	e8 eb fd ff ff       	call   c0002490 <put_str>
c00026a5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/debug.c:16
   put_str("condition:");put_str((char*)condition);put_str("\n");
c00026a8:	83 ec 0c             	sub    $0xc,%esp
c00026ab:	68 e4 88 00 c0       	push   $0xc00088e4
c00026b0:	e8 db fd ff ff       	call   c0002490 <put_str>
c00026b5:	83 c4 10             	add    $0x10,%esp
c00026b8:	83 ec 0c             	sub    $0xc,%esp
c00026bb:	ff 75 14             	pushl  0x14(%ebp)
c00026be:	e8 cd fd ff ff       	call   c0002490 <put_str>
c00026c3:	83 c4 10             	add    $0x10,%esp
c00026c6:	83 ec 0c             	sub    $0xc,%esp
c00026c9:	68 d0 88 00 c0       	push   $0xc00088d0
c00026ce:	e8 bd fd ff ff       	call   c0002490 <put_str>
c00026d3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/debug.c:17 (discriminator 1)
   while(1);
c00026d6:	eb fe                	jmp    c00026d6 <panic_spin+0xd4>

c00026d8 <bitmap_init>:
bitmap_init():
/work/x86_os_my/lib/kernel/bitmap.c:16
	uint8_t* bits;				位图空间
};
*/

/* 将位图btmp初始化 */
void bitmap_init(struct bitmap* btmp) {
c00026d8:	55                   	push   %ebp
c00026d9:	89 e5                	mov    %esp,%ebp
c00026db:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/lib/kernel/bitmap.c:17
	memset(btmp->bits, 0, btmp->btmp_bytes_len);   
c00026de:	8b 45 08             	mov    0x8(%ebp),%eax
c00026e1:	8b 10                	mov    (%eax),%edx
c00026e3:	8b 45 08             	mov    0x8(%ebp),%eax
c00026e6:	8b 40 04             	mov    0x4(%eax),%eax
c00026e9:	83 ec 04             	sub    $0x4,%esp
c00026ec:	52                   	push   %edx
c00026ed:	6a 00                	push   $0x0
c00026ef:	50                   	push   %eax
c00026f0:	e8 25 13 00 00       	call   c0003a1a <memset>
c00026f5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/bitmap.c:18
}
c00026f8:	90                   	nop
c00026f9:	c9                   	leave  
c00026fa:	c3                   	ret    

c00026fb <bitmap_scan_test>:
bitmap_scan_test():
/work/x86_os_my/lib/kernel/bitmap.c:23

/* 判断bit_idx位是否为1
若为1则返回true
否则返回false */
bool bitmap_scan_test(struct bitmap* btmp, uint32_t bit_idx) {
c00026fb:	55                   	push   %ebp
c00026fc:	89 e5                	mov    %esp,%ebp
c00026fe:	53                   	push   %ebx
c00026ff:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/kernel/bitmap.c:24
	uint32_t byte_idx = bit_idx / 8;    // 向下取整用于索引数组下标
c0002702:	8b 45 0c             	mov    0xc(%ebp),%eax
c0002705:	c1 e8 03             	shr    $0x3,%eax
c0002708:	89 45 f8             	mov    %eax,-0x8(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:25
	uint32_t bit_odd  = bit_idx % 8;    // 取余用于索引数组内的位
c000270b:	8b 45 0c             	mov    0xc(%ebp),%eax
c000270e:	83 e0 07             	and    $0x7,%eax
c0002711:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:26
	return (btmp->bits[byte_idx] & (BITMAP_MASK << bit_odd));
c0002714:	8b 45 08             	mov    0x8(%ebp),%eax
c0002717:	8b 50 04             	mov    0x4(%eax),%edx
c000271a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c000271d:	01 d0                	add    %edx,%eax
c000271f:	0f b6 00             	movzbl (%eax),%eax
c0002722:	0f b6 d0             	movzbl %al,%edx
c0002725:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002728:	bb 01 00 00 00       	mov    $0x1,%ebx
c000272d:	89 c1                	mov    %eax,%ecx
c000272f:	d3 e3                	shl    %cl,%ebx
c0002731:	89 d8                	mov    %ebx,%eax
c0002733:	21 d0                	and    %edx,%eax
/work/x86_os_my/lib/kernel/bitmap.c:27
}
c0002735:	83 c4 10             	add    $0x10,%esp
c0002738:	5b                   	pop    %ebx
c0002739:	5d                   	pop    %ebp
c000273a:	c3                   	ret    

c000273b <bitmap_scan>:
bitmap_scan():
/work/x86_os_my/lib/kernel/bitmap.c:32

/* 在位图中申请连续cnt个位
成功：返回其起始位下标
失败：返回-1 */
int bitmap_scan(struct bitmap* btmp, uint32_t cnt) {
c000273b:	55                   	push   %ebp
c000273c:	89 e5                	mov    %esp,%ebp
c000273e:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/lib/kernel/bitmap.c:33
	uint32_t idx_byte = 0;	 // 用于记录空闲位所在的字节
c0002741:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:35
	/* 先逐字节比较,蛮力法 */
	while (( 0xff == btmp->bits[idx_byte]) && (idx_byte < btmp->btmp_bytes_len)) {
c0002748:	eb 04                	jmp    c000274e <bitmap_scan+0x13>
/work/x86_os_my/lib/kernel/bitmap.c:37
		/* 1表示该位已分配,所以若为0xff,则表示该字节内已无空闲位,向下一字节继续找 */
		idx_byte++;
c000274a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:35
成功：返回其起始位下标
失败：返回-1 */
int bitmap_scan(struct bitmap* btmp, uint32_t cnt) {
	uint32_t idx_byte = 0;	 // 用于记录空闲位所在的字节
	/* 先逐字节比较,蛮力法 */
	while (( 0xff == btmp->bits[idx_byte]) && (idx_byte < btmp->btmp_bytes_len)) {
c000274e:	8b 45 08             	mov    0x8(%ebp),%eax
c0002751:	8b 50 04             	mov    0x4(%eax),%edx
c0002754:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002757:	01 d0                	add    %edx,%eax
c0002759:	0f b6 00             	movzbl (%eax),%eax
c000275c:	3c ff                	cmp    $0xff,%al
c000275e:	75 0a                	jne    c000276a <bitmap_scan+0x2f>
/work/x86_os_my/lib/kernel/bitmap.c:35 (discriminator 1)
c0002760:	8b 45 08             	mov    0x8(%ebp),%eax
c0002763:	8b 00                	mov    (%eax),%eax
c0002765:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0002768:	77 e0                	ja     c000274a <bitmap_scan+0xf>
/work/x86_os_my/lib/kernel/bitmap.c:39
		/* 1表示该位已分配,所以若为0xff,则表示该字节内已无空闲位,向下一字节继续找 */
		idx_byte++;
	}
	ASSERT(idx_byte < btmp->btmp_bytes_len);	//这里应该是"<="
c000276a:	8b 45 08             	mov    0x8(%ebp),%eax
c000276d:	8b 00                	mov    (%eax),%eax
c000276f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0002772:	77 19                	ja     c000278d <bitmap_scan+0x52>
/work/x86_os_my/lib/kernel/bitmap.c:39 (discriminator 1)
c0002774:	68 f0 88 00 c0       	push   $0xc00088f0
c0002779:	68 44 89 00 c0       	push   $0xc0008944
c000277e:	6a 27                	push   $0x27
c0002780:	68 10 89 00 c0       	push   $0xc0008910
c0002785:	e8 78 fe ff ff       	call   c0002602 <panic_spin>
c000278a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/bitmap.c:40
	if (idx_byte == btmp->btmp_bytes_len) {		// 若该内存池找不到可用空间		
c000278d:	8b 45 08             	mov    0x8(%ebp),%eax
c0002790:	8b 00                	mov    (%eax),%eax
c0002792:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0002795:	75 0a                	jne    c00027a1 <bitmap_scan+0x66>
/work/x86_os_my/lib/kernel/bitmap.c:41
		return -1;
c0002797:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000279c:	e9 cd 00 00 00       	jmp    c000286e <bitmap_scan+0x133>
/work/x86_os_my/lib/kernel/bitmap.c:46
	}

	/* 若在位图数组范围内的某字节内找到了空闲位，
	 * 在该字节内逐位比对,返回空闲位的索引。*/
	int idx_bit = 0;
c00027a1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:48
	/* 和btmp->bits[idx_byte]这个字节逐位对比 */
	while ((uint8_t)(BITMAP_MASK << idx_bit) & btmp->bits[idx_byte]) { 
c00027a8:	eb 04                	jmp    c00027ae <bitmap_scan+0x73>
/work/x86_os_my/lib/kernel/bitmap.c:49
		idx_bit++;
c00027aa:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:48

	/* 若在位图数组范围内的某字节内找到了空闲位，
	 * 在该字节内逐位比对,返回空闲位的索引。*/
	int idx_bit = 0;
	/* 和btmp->bits[idx_byte]这个字节逐位对比 */
	while ((uint8_t)(BITMAP_MASK << idx_bit) & btmp->bits[idx_byte]) { 
c00027ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00027b1:	ba 01 00 00 00       	mov    $0x1,%edx
c00027b6:	89 c1                	mov    %eax,%ecx
c00027b8:	d3 e2                	shl    %cl,%edx
c00027ba:	89 d0                	mov    %edx,%eax
c00027bc:	0f b6 d0             	movzbl %al,%edx
c00027bf:	8b 45 08             	mov    0x8(%ebp),%eax
c00027c2:	8b 48 04             	mov    0x4(%eax),%ecx
c00027c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00027c8:	01 c8                	add    %ecx,%eax
c00027ca:	0f b6 00             	movzbl (%eax),%eax
c00027cd:	0f b6 c0             	movzbl %al,%eax
c00027d0:	21 d0                	and    %edx,%eax
c00027d2:	85 c0                	test   %eax,%eax
c00027d4:	75 d4                	jne    c00027aa <bitmap_scan+0x6f>
/work/x86_os_my/lib/kernel/bitmap.c:52
		idx_bit++;
	}
	
	int bit_idx_start = idx_byte * 8 + idx_bit;		// 空闲位在位图内的下标
c00027d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00027d9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c00027e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00027e3:	01 d0                	add    %edx,%eax
c00027e5:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:53
	if (cnt == 1) {
c00027e8:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c00027ec:	75 05                	jne    c00027f3 <bitmap_scan+0xb8>
/work/x86_os_my/lib/kernel/bitmap.c:54
		return bit_idx_start;
c00027ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00027f1:	eb 7b                	jmp    c000286e <bitmap_scan+0x133>
/work/x86_os_my/lib/kernel/bitmap.c:57
	}

	uint32_t bit_left = (btmp->btmp_bytes_len * 8 - bit_idx_start);	// 记录还有多少位可以判断
c00027f3:	8b 45 08             	mov    0x8(%ebp),%eax
c00027f6:	8b 00                	mov    (%eax),%eax
c00027f8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c00027ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002802:	29 c2                	sub    %eax,%edx
c0002804:	89 d0                	mov    %edx,%eax
c0002806:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:58
	uint32_t next_bit = bit_idx_start + 1;
c0002809:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000280c:	83 c0 01             	add    $0x1,%eax
c000280f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:59
	uint32_t count = 1;			// 用于记录找到的空闲位的个数
c0002812:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:61

	bit_idx_start = -1;			// 初始化为-1，若找不到连续的位就直接返回-1
c0002819:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:62
	while (bit_left-- > 0) {
c0002820:	eb 3c                	jmp    c000285e <bitmap_scan+0x123>
/work/x86_os_my/lib/kernel/bitmap.c:63
		if (!(bitmap_scan_test(btmp, next_bit))) {	// 判断next_bit位是否为1,=1返回true，=0返回false
c0002822:	83 ec 08             	sub    $0x8,%esp
c0002825:	ff 75 e4             	pushl  -0x1c(%ebp)
c0002828:	ff 75 08             	pushl  0x8(%ebp)
c000282b:	e8 cb fe ff ff       	call   c00026fb <bitmap_scan_test>
c0002830:	83 c4 10             	add    $0x10,%esp
c0002833:	85 c0                	test   %eax,%eax
c0002835:	75 06                	jne    c000283d <bitmap_scan+0x102>
/work/x86_os_my/lib/kernel/bitmap.c:64
			count++;
c0002837:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
c000283b:	eb 07                	jmp    c0002844 <bitmap_scan+0x109>
/work/x86_os_my/lib/kernel/bitmap.c:66
		} else {
			count = 0;			// 重新从0找cnt个连续的bit
c000283d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:69
		}
		
		if (count == cnt) {		// 已找到连续的cnt个空位
c0002844:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0002847:	3b 45 0c             	cmp    0xc(%ebp),%eax
c000284a:	75 0e                	jne    c000285a <bitmap_scan+0x11f>
/work/x86_os_my/lib/kernel/bitmap.c:70
			bit_idx_start = next_bit - cnt + 1;
c000284c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000284f:	2b 45 0c             	sub    0xc(%ebp),%eax
c0002852:	83 c0 01             	add    $0x1,%eax
c0002855:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:71
			break;
c0002858:	eb 11                	jmp    c000286b <bitmap_scan+0x130>
/work/x86_os_my/lib/kernel/bitmap.c:73
		}
		next_bit++;
c000285a:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:62
	uint32_t bit_left = (btmp->btmp_bytes_len * 8 - bit_idx_start);	// 记录还有多少位可以判断
	uint32_t next_bit = bit_idx_start + 1;
	uint32_t count = 1;			// 用于记录找到的空闲位的个数

	bit_idx_start = -1;			// 初始化为-1，若找不到连续的位就直接返回-1
	while (bit_left-- > 0) {
c000285e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002861:	8d 50 ff             	lea    -0x1(%eax),%edx
c0002864:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0002867:	85 c0                	test   %eax,%eax
c0002869:	75 b7                	jne    c0002822 <bitmap_scan+0xe7>
/work/x86_os_my/lib/kernel/bitmap.c:75
			bit_idx_start = next_bit - cnt + 1;
			break;
		}
		next_bit++;
	}
	return bit_idx_start;
c000286b:	8b 45 ec             	mov    -0x14(%ebp),%eax
/work/x86_os_my/lib/kernel/bitmap.c:76
}
c000286e:	c9                   	leave  
c000286f:	c3                   	ret    

c0002870 <bitmap_set>:
bitmap_set():
/work/x86_os_my/lib/kernel/bitmap.c:79

/* 将位图btmp的bit_idx位设置为value */
void bitmap_set(struct bitmap* btmp, uint32_t bit_idx, int8_t value) {
c0002870:	55                   	push   %ebp
c0002871:	89 e5                	mov    %esp,%ebp
c0002873:	56                   	push   %esi
c0002874:	53                   	push   %ebx
c0002875:	83 ec 20             	sub    $0x20,%esp
c0002878:	8b 45 10             	mov    0x10(%ebp),%eax
c000287b:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:80
	ASSERT((value == 0) || (value == 1));
c000287e:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c0002882:	74 1f                	je     c00028a3 <bitmap_set+0x33>
/work/x86_os_my/lib/kernel/bitmap.c:80 (discriminator 1)
c0002884:	80 7d e4 01          	cmpb   $0x1,-0x1c(%ebp)
c0002888:	74 19                	je     c00028a3 <bitmap_set+0x33>
/work/x86_os_my/lib/kernel/bitmap.c:80 (discriminator 2)
c000288a:	68 24 89 00 c0       	push   $0xc0008924
c000288f:	68 50 89 00 c0       	push   $0xc0008950
c0002894:	6a 50                	push   $0x50
c0002896:	68 10 89 00 c0       	push   $0xc0008910
c000289b:	e8 62 fd ff ff       	call   c0002602 <panic_spin>
c00028a0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/bitmap.c:81
	uint32_t byte_idx = bit_idx / 8;    // 向下取整用于索引数组下标
c00028a3:	8b 45 0c             	mov    0xc(%ebp),%eax
c00028a6:	c1 e8 03             	shr    $0x3,%eax
c00028a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:82
	uint32_t bit_odd  = bit_idx % 8;    // 取余用于索引数组内的位
c00028ac:	8b 45 0c             	mov    0xc(%ebp),%eax
c00028af:	83 e0 07             	and    $0x7,%eax
c00028b2:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:86

	/* 一般都会用个0x1这样的数对字节中的位操作,
	* 将1任意移动后再取反,或者先取反再移位,可用来对位置0操作。*/
	if (value) {
c00028b5:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c00028b9:	74 2f                	je     c00028ea <bitmap_set+0x7a>
/work/x86_os_my/lib/kernel/bitmap.c:87
		btmp->bits[byte_idx] |= (BITMAP_MASK << bit_odd);
c00028bb:	8b 45 08             	mov    0x8(%ebp),%eax
c00028be:	8b 50 04             	mov    0x4(%eax),%edx
c00028c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00028c4:	01 c2                	add    %eax,%edx
c00028c6:	8b 45 08             	mov    0x8(%ebp),%eax
c00028c9:	8b 48 04             	mov    0x4(%eax),%ecx
c00028cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00028cf:	01 c8                	add    %ecx,%eax
c00028d1:	0f b6 00             	movzbl (%eax),%eax
c00028d4:	89 c6                	mov    %eax,%esi
c00028d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00028d9:	bb 01 00 00 00       	mov    $0x1,%ebx
c00028de:	89 c1                	mov    %eax,%ecx
c00028e0:	d3 e3                	shl    %cl,%ebx
c00028e2:	89 d8                	mov    %ebx,%eax
c00028e4:	09 f0                	or     %esi,%eax
c00028e6:	88 02                	mov    %al,(%edx)
/work/x86_os_my/lib/kernel/bitmap.c:91
	} else {
		btmp->bits[byte_idx] &= ~(BITMAP_MASK << bit_odd);
	}
}
c00028e8:	eb 2f                	jmp    c0002919 <bitmap_set+0xa9>
/work/x86_os_my/lib/kernel/bitmap.c:89
	/* 一般都会用个0x1这样的数对字节中的位操作,
	* 将1任意移动后再取反,或者先取反再移位,可用来对位置0操作。*/
	if (value) {
		btmp->bits[byte_idx] |= (BITMAP_MASK << bit_odd);
	} else {
		btmp->bits[byte_idx] &= ~(BITMAP_MASK << bit_odd);
c00028ea:	8b 45 08             	mov    0x8(%ebp),%eax
c00028ed:	8b 50 04             	mov    0x4(%eax),%edx
c00028f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00028f3:	01 c2                	add    %eax,%edx
c00028f5:	8b 45 08             	mov    0x8(%ebp),%eax
c00028f8:	8b 48 04             	mov    0x4(%eax),%ecx
c00028fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00028fe:	01 c8                	add    %ecx,%eax
c0002900:	0f b6 00             	movzbl (%eax),%eax
c0002903:	89 c3                	mov    %eax,%ebx
c0002905:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002908:	be 01 00 00 00       	mov    $0x1,%esi
c000290d:	89 c1                	mov    %eax,%ecx
c000290f:	d3 e6                	shl    %cl,%esi
c0002911:	89 f0                	mov    %esi,%eax
c0002913:	f7 d0                	not    %eax
c0002915:	21 d8                	and    %ebx,%eax
c0002917:	88 02                	mov    %al,(%edx)
/work/x86_os_my/lib/kernel/bitmap.c:91
	}
}
c0002919:	90                   	nop
c000291a:	8d 65 f8             	lea    -0x8(%ebp),%esp
c000291d:	5b                   	pop    %ebx
c000291e:	5e                   	pop    %esi
c000291f:	5d                   	pop    %ebp
c0002920:	c3                   	ret    

c0002921 <vaddr_get>:
vaddr_get():
/work/x86_os_my/kernel/memory.c:66
struct pool kernel_pool, user_pool;		// 生成内核内存池和用户内存池
struct virtual_addr kernel_vaddr;		// 此结构是用来给内核分配虚拟地址

/* 在pf表示的虚拟内存池中申请pg_cnt个虚拟页,
 * 成功则返回虚拟页的起始地址, 失败则返回NULL */
static void* vaddr_get(enum pool_flags pf, uint32_t pg_cnt) {
c0002921:	55                   	push   %ebp
c0002922:	89 e5                	mov    %esp,%ebp
c0002924:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:67
	int vaddr_start = 0, bit_idx_start = -1;
c0002927:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c000292e:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:68
	uint32_t cnt = 0;
c0002935:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:69
	if (pf == PF_KERNEL) {
c000293c:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c0002940:	75 64                	jne    c00029a6 <vaddr_get+0x85>
/work/x86_os_my/kernel/memory.c:71
		// 在位图中申请连续cnt个位 成功：返回其起始位下标
		bit_idx_start  = bitmap_scan(&kernel_vaddr.vaddr_bitmap, pg_cnt);
c0002942:	83 ec 08             	sub    $0x8,%esp
c0002945:	ff 75 0c             	pushl  0xc(%ebp)
c0002948:	68 c8 cc 00 c0       	push   $0xc000ccc8
c000294d:	e8 e9 fd ff ff       	call   c000273b <bitmap_scan>
c0002952:	83 c4 10             	add    $0x10,%esp
c0002955:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:72
		if (bit_idx_start == -1) {	//失败
c0002958:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%ebp)
c000295c:	75 2b                	jne    c0002989 <vaddr_get+0x68>
/work/x86_os_my/kernel/memory.c:73
			return NULL;
c000295e:	b8 00 00 00 00       	mov    $0x0,%eax
c0002963:	e9 cd 00 00 00       	jmp    c0002a35 <vaddr_get+0x114>
/work/x86_os_my/kernel/memory.c:77
		}
		while(cnt < pg_cnt) {
			// 设置位图中的位，表示内存已被占用
			bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 1);
c0002968:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000296b:	8d 50 01             	lea    0x1(%eax),%edx
c000296e:	89 55 f0             	mov    %edx,-0x10(%ebp)
c0002971:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0002974:	01 d0                	add    %edx,%eax
c0002976:	83 ec 04             	sub    $0x4,%esp
c0002979:	6a 01                	push   $0x1
c000297b:	50                   	push   %eax
c000297c:	68 c8 cc 00 c0       	push   $0xc000ccc8
c0002981:	e8 ea fe ff ff       	call   c0002870 <bitmap_set>
c0002986:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:75
		// 在位图中申请连续cnt个位 成功：返回其起始位下标
		bit_idx_start  = bitmap_scan(&kernel_vaddr.vaddr_bitmap, pg_cnt);
		if (bit_idx_start == -1) {	//失败
			return NULL;
		}
		while(cnt < pg_cnt) {
c0002989:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000298c:	3b 45 0c             	cmp    0xc(%ebp),%eax
c000298f:	72 d7                	jb     c0002968 <vaddr_get+0x47>
/work/x86_os_my/kernel/memory.c:79
			// 设置位图中的位，表示内存已被占用
			bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 1);
		}
		vaddr_start = kernel_vaddr.vaddr_start + bit_idx_start * PG_SIZE;
c0002991:	a1 d0 cc 00 c0       	mov    0xc000ccd0,%eax
c0002996:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0002999:	c1 e2 0c             	shl    $0xc,%edx
c000299c:	01 d0                	add    %edx,%eax
c000299e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00029a1:	e9 8c 00 00 00       	jmp    c0002a32 <vaddr_get+0x111>
/work/x86_os_my/kernel/memory.c:81
	} else {
		struct task_struct* cur = running_thread();
c00029a6:	e8 56 14 00 00       	call   c0003e01 <running_thread>
c00029ab:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:82
		bit_idx_start  = bitmap_scan(&cur->userprog_vaddr.vaddr_bitmap, pg_cnt);
c00029ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00029b1:	83 c0 58             	add    $0x58,%eax
c00029b4:	83 ec 08             	sub    $0x8,%esp
c00029b7:	ff 75 0c             	pushl  0xc(%ebp)
c00029ba:	50                   	push   %eax
c00029bb:	e8 7b fd ff ff       	call   c000273b <bitmap_scan>
c00029c0:	83 c4 10             	add    $0x10,%esp
c00029c3:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:83
		if (bit_idx_start == -1) {
c00029c6:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%ebp)
c00029ca:	75 2a                	jne    c00029f6 <vaddr_get+0xd5>
/work/x86_os_my/kernel/memory.c:84
			return NULL;
c00029cc:	b8 00 00 00 00       	mov    $0x0,%eax
c00029d1:	eb 62                	jmp    c0002a35 <vaddr_get+0x114>
/work/x86_os_my/kernel/memory.c:87
		}
		while(cnt < pg_cnt) {
			bitmap_set(&cur->userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 1);
c00029d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00029d6:	8d 50 01             	lea    0x1(%eax),%edx
c00029d9:	89 55 f0             	mov    %edx,-0x10(%ebp)
c00029dc:	8b 55 ec             	mov    -0x14(%ebp),%edx
c00029df:	01 c2                	add    %eax,%edx
c00029e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00029e4:	83 c0 58             	add    $0x58,%eax
c00029e7:	83 ec 04             	sub    $0x4,%esp
c00029ea:	6a 01                	push   $0x1
c00029ec:	52                   	push   %edx
c00029ed:	50                   	push   %eax
c00029ee:	e8 7d fe ff ff       	call   c0002870 <bitmap_set>
c00029f3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:86
		struct task_struct* cur = running_thread();
		bit_idx_start  = bitmap_scan(&cur->userprog_vaddr.vaddr_bitmap, pg_cnt);
		if (bit_idx_start == -1) {
			return NULL;
		}
		while(cnt < pg_cnt) {
c00029f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00029f9:	3b 45 0c             	cmp    0xc(%ebp),%eax
c00029fc:	72 d5                	jb     c00029d3 <vaddr_get+0xb2>
/work/x86_os_my/kernel/memory.c:89
			bitmap_set(&cur->userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 1);
		}
		vaddr_start = cur->userprog_vaddr.vaddr_start + bit_idx_start * PG_SIZE;
c00029fe:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002a01:	8b 40 60             	mov    0x60(%eax),%eax
c0002a04:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0002a07:	c1 e2 0c             	shl    $0xc,%edx
c0002a0a:	01 d0                	add    %edx,%eax
c0002a0c:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:92

		/* (0xc0000000 - PG_SIZE)做为用户3级栈已经在start_process被分配 */
		ASSERT((uint32_t)vaddr_start < (0xc0000000 - PG_SIZE));
c0002a0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002a12:	3d ff ef ff bf       	cmp    $0xbfffefff,%eax
c0002a17:	76 19                	jbe    c0002a32 <vaddr_get+0x111>
/work/x86_os_my/kernel/memory.c:92 (discriminator 1)
c0002a19:	68 5c 89 00 c0       	push   $0xc000895c
c0002a1e:	68 c4 8c 00 c0       	push   $0xc0008cc4
c0002a23:	6a 5c                	push   $0x5c
c0002a25:	68 8b 89 00 c0       	push   $0xc000898b
c0002a2a:	e8 d3 fb ff ff       	call   c0002602 <panic_spin>
c0002a2f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:95
		
	}
	return (void*)vaddr_start;
c0002a32:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/kernel/memory.c:96
}
c0002a35:	c9                   	leave  
c0002a36:	c3                   	ret    

c0002a37 <pte_ptr>:
pte_ptr():
/work/x86_os_my/kernel/memory.c:103
// 页表项 page table
/* 得到虚拟地址vaddr对应的pte指针*/
// 虚拟地址 vaddr 所在 pte 的"虚拟地址"!!!
// *pte 代表的是 pte 页表项的内容,
// 也就是 vaddr 最终所映射到的物理页框的 32 位地址中的高 20 位和 12 位的"页表项"属性
uint32_t* pte_ptr(uint32_t vaddr) {
c0002a37:	55                   	push   %ebp
c0002a38:	89 e5                	mov    %esp,%ebp
c0002a3a:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/memory.c:108
	/* 先找到页目录表 + \
	* 再用vaddr的pde部分做为索引，找到某一个页表 + \
	* 再用vaddr的pte部分作为索引，找到某一个页表项*/
	uint32_t* pte = (uint32_t*)(0xffc00000 + \
					((vaddr & 0xffc00000) >> 10) + \
c0002a3d:	8b 45 08             	mov    0x8(%ebp),%eax
c0002a40:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0002a45:	c1 e8 0a             	shr    $0xa,%eax
c0002a48:	89 c2                	mov    %eax,%edx
/work/x86_os_my/kernel/memory.c:109
					PTE_IDX(vaddr) * 4);
c0002a4a:	8b 45 08             	mov    0x8(%ebp),%eax
c0002a4d:	25 00 f0 3f 00       	and    $0x3ff000,%eax
c0002a52:	c1 e8 0c             	shr    $0xc,%eax
c0002a55:	c1 e0 02             	shl    $0x2,%eax
/work/x86_os_my/kernel/memory.c:108
uint32_t* pte_ptr(uint32_t vaddr) {
	/* 先找到页目录表 + \
	* 再用vaddr的pde部分做为索引，找到某一个页表 + \
	* 再用vaddr的pte部分作为索引，找到某一个页表项*/
	uint32_t* pte = (uint32_t*)(0xffc00000 + \
					((vaddr & 0xffc00000) >> 10) + \
c0002a58:	01 d0                	add    %edx,%eax
c0002a5a:	2d 00 00 40 00       	sub    $0x400000,%eax
/work/x86_os_my/kernel/memory.c:107
// 也就是 vaddr 最终所映射到的物理页框的 32 位地址中的高 20 位和 12 位的"页表项"属性
uint32_t* pte_ptr(uint32_t vaddr) {
	/* 先找到页目录表 + \
	* 再用vaddr的pde部分做为索引，找到某一个页表 + \
	* 再用vaddr的pte部分作为索引，找到某一个页表项*/
	uint32_t* pte = (uint32_t*)(0xffc00000 + \
c0002a5f:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/kernel/memory.c:110
					((vaddr & 0xffc00000) >> 10) + \
					PTE_IDX(vaddr) * 4);
	return pte;
c0002a62:	8b 45 fc             	mov    -0x4(%ebp),%eax
/work/x86_os_my/kernel/memory.c:111
}
c0002a65:	c9                   	leave  
c0002a66:	c3                   	ret    

c0002a67 <pde_ptr>:
pde_ptr():
/work/x86_os_my/kernel/memory.c:118
// 页目录表项 page Directory table entry
/* 得到虚拟地址vaddr对应的pde的指针 */
// 虚拟地址 vaddr 所在 pde 的"虚拟地址"!!!
// *pde 代表的是 pde 页目录项的内容
// 也就是 vaddr 最终所映射到的物理页框的 32 位地址中的高 20 位和 12 位的"页目录项"属性
uint32_t* pde_ptr(uint32_t vaddr) {
c0002a67:	55                   	push   %ebp
c0002a68:	89 e5                	mov    %esp,%ebp
c0002a6a:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/memory.c:120
	/* 0xfffff是用来访问到页目录表本身所在的地址 */
	uint32_t* pde = (uint32_t*)((0xfffff000) + PDE_IDX(vaddr) * 4);
c0002a6d:	8b 45 08             	mov    0x8(%ebp),%eax
c0002a70:	c1 e8 16             	shr    $0x16,%eax
c0002a73:	05 00 fc ff 3f       	add    $0x3ffffc00,%eax
c0002a78:	c1 e0 02             	shl    $0x2,%eax
c0002a7b:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/kernel/memory.c:121
	return pde;
c0002a7e:	8b 45 fc             	mov    -0x4(%ebp),%eax
/work/x86_os_my/kernel/memory.c:122
}
c0002a81:	c9                   	leave  
c0002a82:	c3                   	ret    

c0002a83 <palloc>:
palloc():
/work/x86_os_my/kernel/memory.c:126

/* 在m_pool指向的物理内存池中分配1个物理页,
 * 成功则返回页框的物理地址,失败则返回NULL */
static void* palloc(struct pool* m_pool) {
c0002a83:	55                   	push   %ebp
c0002a84:	89 e5                	mov    %esp,%ebp
c0002a86:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:128
	/* 扫描或设置位图要保证原子操作 */
	int bit_idx = bitmap_scan(&m_pool->pool_bitmap, 1);    // 找一个物理页面
c0002a89:	8b 45 08             	mov    0x8(%ebp),%eax
c0002a8c:	83 ec 08             	sub    $0x8,%esp
c0002a8f:	6a 01                	push   $0x1
c0002a91:	50                   	push   %eax
c0002a92:	e8 a4 fc ff ff       	call   c000273b <bitmap_scan>
c0002a97:	83 c4 10             	add    $0x10,%esp
c0002a9a:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:129
	if (bit_idx == -1 ) {
c0002a9d:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c0002aa1:	75 07                	jne    c0002aaa <palloc+0x27>
/work/x86_os_my/kernel/memory.c:130
		return NULL;
c0002aa3:	b8 00 00 00 00       	mov    $0x0,%eax
c0002aa8:	eb 2b                	jmp    c0002ad5 <palloc+0x52>
/work/x86_os_my/kernel/memory.c:132
	}
	bitmap_set(&m_pool->pool_bitmap, bit_idx, 1);	// 将此位bit_idx置1
c0002aaa:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0002aad:	8b 45 08             	mov    0x8(%ebp),%eax
c0002ab0:	83 ec 04             	sub    $0x4,%esp
c0002ab3:	6a 01                	push   $0x1
c0002ab5:	52                   	push   %edx
c0002ab6:	50                   	push   %eax
c0002ab7:	e8 b4 fd ff ff       	call   c0002870 <bitmap_set>
c0002abc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:133
	uint32_t page_phyaddr = ((bit_idx * PG_SIZE) + m_pool->phy_addr_start);
c0002abf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002ac2:	c1 e0 0c             	shl    $0xc,%eax
c0002ac5:	89 c2                	mov    %eax,%edx
c0002ac7:	8b 45 08             	mov    0x8(%ebp),%eax
c0002aca:	8b 40 08             	mov    0x8(%eax),%eax
c0002acd:	01 d0                	add    %edx,%eax
c0002acf:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:134
	return (void*)page_phyaddr;
c0002ad2:	8b 45 f0             	mov    -0x10(%ebp),%eax
/work/x86_os_my/kernel/memory.c:135
}
c0002ad5:	c9                   	leave  
c0002ad6:	c3                   	ret    

c0002ad7 <page_table_add>:
page_table_add():
/work/x86_os_my/kernel/memory.c:138

/* 页表中添加虚拟地址_vaddr与物理地址_page_phyaddr的映射 */
static void page_table_add(void* _vaddr, void* _page_phyaddr) {
c0002ad7:	55                   	push   %ebp
c0002ad8:	89 e5                	mov    %esp,%ebp
c0002ada:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/kernel/memory.c:139
	uint32_t vaddr = (uint32_t)_vaddr, page_phyaddr = (uint32_t)_page_phyaddr;
c0002add:	8b 45 08             	mov    0x8(%ebp),%eax
c0002ae0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0002ae3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0002ae6:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:140
	uint32_t* pde = pde_ptr(vaddr);	//变量pde是虚拟地址!!!
c0002ae9:	ff 75 f4             	pushl  -0xc(%ebp)
c0002aec:	e8 76 ff ff ff       	call   c0002a67 <pde_ptr>
c0002af1:	83 c4 04             	add    $0x4,%esp
c0002af4:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:141
	uint32_t* pte = pte_ptr(vaddr);	//变量pte是虚拟地址!!!
c0002af7:	ff 75 f4             	pushl  -0xc(%ebp)
c0002afa:	e8 38 ff ff ff       	call   c0002a37 <pte_ptr>
c0002aff:	83 c4 04             	add    $0x4,%esp
c0002b02:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:149
	* pde页目录项 pte页表项
	* 执行*pte可能会访问到空的pde。所以确保pde创建完成后才能执行*pte，否则会引发page_fault。
	* 因此在*pde为0时，*pte只能出现在下面else语句块中的*pde后面。
	* *********************************************************/
	/* 先在页目录内判断目录项的P位，若为1,则表示该表已存在 */
	if (*pde & 0x00000001) {			// 页目录项 存在
c0002b05:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002b08:	8b 00                	mov    (%eax),%eax
c0002b0a:	83 e0 01             	and    $0x1,%eax
c0002b0d:	85 c0                	test   %eax,%eax
c0002b0f:	74 64                	je     c0002b75 <page_table_add+0x9e>
/work/x86_os_my/kernel/memory.c:150
		ASSERT(!(*pte & 0x00000001));	// 页表项不存在才能往下执行，否则panic
c0002b11:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002b14:	8b 00                	mov    (%eax),%eax
c0002b16:	83 e0 01             	and    $0x1,%eax
c0002b19:	85 c0                	test   %eax,%eax
c0002b1b:	74 1c                	je     c0002b39 <page_table_add+0x62>
/work/x86_os_my/kernel/memory.c:150 (discriminator 1)
c0002b1d:	68 9b 89 00 c0       	push   $0xc000899b
c0002b22:	68 d0 8c 00 c0       	push   $0xc0008cd0
c0002b27:	68 96 00 00 00       	push   $0x96
c0002b2c:	68 8b 89 00 c0       	push   $0xc000898b
c0002b31:	e8 cc fa ff ff       	call   c0002602 <panic_spin>
c0002b36:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:152

		if (!(*pte & 0x00000001)) {		// 页表项pte不存在，创建PTE
c0002b39:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002b3c:	8b 00                	mov    (%eax),%eax
c0002b3e:	83 e0 01             	and    $0x1,%eax
c0002b41:	85 c0                	test   %eax,%eax
c0002b43:	75 12                	jne    c0002b57 <page_table_add+0x80>
/work/x86_os_my/kernel/memory.c:153
			*pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);		// 物理地址 | US=1,RW=1,P=1
c0002b45:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002b48:	83 c8 07             	or     $0x7,%eax
c0002b4b:	89 c2                	mov    %eax,%edx
c0002b4d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002b50:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/kernel/memory.c:173
		memset((void*)((int)pte & 0xfffff000), 0, PG_SIZE);

		ASSERT(!(*pte & 0x00000001));	// 页表项不存在才能往下执行，否则panic
		*pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);			// 物理地址 | US=1,RW=1,P=1
	}
}
c0002b52:	e9 8e 00 00 00       	jmp    c0002be5 <page_table_add+0x10e>
/work/x86_os_my/kernel/memory.c:155
		ASSERT(!(*pte & 0x00000001));	// 页表项不存在才能往下执行，否则panic

		if (!(*pte & 0x00000001)) {		// 页表项pte不存在，创建PTE
			*pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);		// 物理地址 | US=1,RW=1,P=1
		} else {						// 不会执行到这，因为上面的ASSERT
			PANIC("pte repeat");
c0002b57:	68 b0 89 00 c0       	push   $0xc00089b0
c0002b5c:	68 d0 8c 00 c0       	push   $0xc0008cd0
c0002b61:	68 9b 00 00 00       	push   $0x9b
c0002b66:	68 8b 89 00 c0       	push   $0xc000898b
c0002b6b:	e8 92 fa ff ff       	call   c0002602 <panic_spin>
c0002b70:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:173
		memset((void*)((int)pte & 0xfffff000), 0, PG_SIZE);

		ASSERT(!(*pte & 0x00000001));	// 页表项不存在才能往下执行，否则panic
		*pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);			// 物理地址 | US=1,RW=1,P=1
	}
}
c0002b73:	eb 70                	jmp    c0002be5 <page_table_add+0x10e>
/work/x86_os_my/kernel/memory.c:159
		} else {						// 不会执行到这，因为上面的ASSERT
			PANIC("pte repeat");
		}
	} else {							// 页目录项不存在，先创建页目录，再创建页表项
		/* 页表中用到的页一律从内核空间分配 */
		uint32_t pde_phyaddr = (uint32_t)palloc(&kernel_pool);
c0002b75:	83 ec 0c             	sub    $0xc,%esp
c0002b78:	68 e0 cc 00 c0       	push   $0xc000cce0
c0002b7d:	e8 01 ff ff ff       	call   c0002a83 <palloc>
c0002b82:	83 c4 10             	add    $0x10,%esp
c0002b85:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/kernel/memory.c:160
		*pde = (pde_phyaddr | PG_US_U | PG_RW_W | PG_P_1);			// 注意这行是pde_phyaddr，不是page_phyaddr!!!
c0002b88:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0002b8b:	83 c8 07             	or     $0x7,%eax
c0002b8e:	89 c2                	mov    %eax,%edx
c0002b90:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002b93:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/kernel/memory.c:168
		 * 访问物理地址 pde_phyaddr，需要找到它的虚拟地址！
		 * 只要用_vaddr的 PTE 取高20位即可。
		   搞得这么难理解，其实就是0xffc00000找到页目录表，然后加上vaddr的PDE在页目录表中的索引
		   (uint32_t*)(0xffc00000 + ((vaddr & 0xffc00000) >> 10))
		 */
		memset((void*)((int)pte & 0xfffff000), 0, PG_SIZE);
c0002b95:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002b98:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0002b9d:	83 ec 04             	sub    $0x4,%esp
c0002ba0:	68 00 10 00 00       	push   $0x1000
c0002ba5:	6a 00                	push   $0x0
c0002ba7:	50                   	push   %eax
c0002ba8:	e8 6d 0e 00 00       	call   c0003a1a <memset>
c0002bad:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:170

		ASSERT(!(*pte & 0x00000001));	// 页表项不存在才能往下执行，否则panic
c0002bb0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002bb3:	8b 00                	mov    (%eax),%eax
c0002bb5:	83 e0 01             	and    $0x1,%eax
c0002bb8:	85 c0                	test   %eax,%eax
c0002bba:	74 1c                	je     c0002bd8 <page_table_add+0x101>
/work/x86_os_my/kernel/memory.c:170 (discriminator 1)
c0002bbc:	68 9b 89 00 c0       	push   $0xc000899b
c0002bc1:	68 d0 8c 00 c0       	push   $0xc0008cd0
c0002bc6:	68 aa 00 00 00       	push   $0xaa
c0002bcb:	68 8b 89 00 c0       	push   $0xc000898b
c0002bd0:	e8 2d fa ff ff       	call   c0002602 <panic_spin>
c0002bd5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:171
		*pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);			// 物理地址 | US=1,RW=1,P=1
c0002bd8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002bdb:	83 c8 07             	or     $0x7,%eax
c0002bde:	89 c2                	mov    %eax,%edx
c0002be0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002be3:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/kernel/memory.c:173
	}
}
c0002be5:	90                   	nop
c0002be6:	c9                   	leave  
c0002be7:	c3                   	ret    

c0002be8 <malloc_page>:
malloc_page():
/work/x86_os_my/kernel/memory.c:176

/* 分配pg_cnt个页空间,成功则返回起始虚拟地址,失败时返回NULL */
void* malloc_page(enum pool_flags pf, uint32_t pg_cnt) {
c0002be8:	55                   	push   %ebp
c0002be9:	89 e5                	mov    %esp,%ebp
c0002beb:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/kernel/memory.c:177
	ASSERT(pg_cnt > 0 && pg_cnt < 3840);
c0002bee:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0002bf2:	74 09                	je     c0002bfd <malloc_page+0x15>
/work/x86_os_my/kernel/memory.c:177 (discriminator 1)
c0002bf4:	81 7d 0c ff 0e 00 00 	cmpl   $0xeff,0xc(%ebp)
c0002bfb:	76 1c                	jbe    c0002c19 <malloc_page+0x31>
/work/x86_os_my/kernel/memory.c:177 (discriminator 3)
c0002bfd:	68 bb 89 00 c0       	push   $0xc00089bb
c0002c02:	68 e0 8c 00 c0       	push   $0xc0008ce0
c0002c07:	68 b1 00 00 00       	push   $0xb1
c0002c0c:	68 8b 89 00 c0       	push   $0xc000898b
c0002c11:	e8 ec f9 ff ff       	call   c0002602 <panic_spin>
c0002c16:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:183
	/***********   malloc_page的原理是三个动作的合成:   ***********
		1 通过vaddr_get在虚拟内存池中申请虚拟地址
		2 通过palloc在物理内存池中申请物理页
		3 通过page_table_add将以上得到的虚拟地址和物理地址在页表中完成映射
	***************************************************************/
	void* vaddr_start = vaddr_get(pf, pg_cnt);
c0002c19:	83 ec 08             	sub    $0x8,%esp
c0002c1c:	ff 75 0c             	pushl  0xc(%ebp)
c0002c1f:	ff 75 08             	pushl  0x8(%ebp)
c0002c22:	e8 fa fc ff ff       	call   c0002921 <vaddr_get>
c0002c27:	83 c4 10             	add    $0x10,%esp
c0002c2a:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:184
	if (vaddr_start == NULL) {
c0002c2d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0002c31:	75 07                	jne    c0002c3a <malloc_page+0x52>
/work/x86_os_my/kernel/memory.c:185
		return NULL;
c0002c33:	b8 00 00 00 00       	mov    $0x0,%eax
c0002c38:	eb 6e                	jmp    c0002ca8 <malloc_page+0xc0>
/work/x86_os_my/kernel/memory.c:188
	}

	uint32_t vaddr = (uint32_t)vaddr_start, cnt = pg_cnt;
c0002c3a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002c3d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0002c40:	8b 45 0c             	mov    0xc(%ebp),%eax
c0002c43:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:189
	struct pool* mem_pool = pf & PF_KERNEL ? &kernel_pool : &user_pool;
c0002c46:	8b 45 08             	mov    0x8(%ebp),%eax
c0002c49:	83 e0 01             	and    $0x1,%eax
c0002c4c:	85 c0                	test   %eax,%eax
c0002c4e:	74 07                	je     c0002c57 <malloc_page+0x6f>
/work/x86_os_my/kernel/memory.c:189 (discriminator 1)
c0002c50:	b8 e0 cc 00 c0       	mov    $0xc000cce0,%eax
c0002c55:	eb 05                	jmp    c0002c5c <malloc_page+0x74>
/work/x86_os_my/kernel/memory.c:189 (discriminator 2)
c0002c57:	b8 e0 cb 00 c0       	mov    $0xc000cbe0,%eax
/work/x86_os_my/kernel/memory.c:189 (discriminator 4)
c0002c5c:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:192 (discriminator 4)

	/* 因为虚拟地址是连续的,但物理地址可以是不连续的,所以逐个做映射*/
	while (cnt-- > 0) {
c0002c5f:	eb 37                	jmp    c0002c98 <malloc_page+0xb0>
/work/x86_os_my/kernel/memory.c:193
		void* page_phyaddr = palloc(mem_pool);
c0002c61:	83 ec 0c             	sub    $0xc,%esp
c0002c64:	ff 75 e8             	pushl  -0x18(%ebp)
c0002c67:	e8 17 fe ff ff       	call   c0002a83 <palloc>
c0002c6c:	83 c4 10             	add    $0x10,%esp
c0002c6f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/kernel/memory.c:194
		if (page_phyaddr == NULL) {  // 失败时要将曾经已申请的虚拟地址和物理页全部回滚，在将来完成内存回收时再补充
c0002c72:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0002c76:	75 07                	jne    c0002c7f <malloc_page+0x97>
/work/x86_os_my/kernel/memory.c:195
			return NULL;
c0002c78:	b8 00 00 00 00       	mov    $0x0,%eax
c0002c7d:	eb 29                	jmp    c0002ca8 <malloc_page+0xc0>
/work/x86_os_my/kernel/memory.c:197
		}
		page_table_add((void*)vaddr, page_phyaddr); // 在页表中做映射 
c0002c7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002c82:	83 ec 08             	sub    $0x8,%esp
c0002c85:	ff 75 e4             	pushl  -0x1c(%ebp)
c0002c88:	50                   	push   %eax
c0002c89:	e8 49 fe ff ff       	call   c0002ad7 <page_table_add>
c0002c8e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:198
		vaddr += PG_SIZE;		 // 下一个虚拟页
c0002c91:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:192

	uint32_t vaddr = (uint32_t)vaddr_start, cnt = pg_cnt;
	struct pool* mem_pool = pf & PF_KERNEL ? &kernel_pool : &user_pool;

	/* 因为虚拟地址是连续的,但物理地址可以是不连续的,所以逐个做映射*/
	while (cnt-- > 0) {
c0002c98:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002c9b:	8d 50 ff             	lea    -0x1(%eax),%edx
c0002c9e:	89 55 f0             	mov    %edx,-0x10(%ebp)
c0002ca1:	85 c0                	test   %eax,%eax
c0002ca3:	75 bc                	jne    c0002c61 <malloc_page+0x79>
/work/x86_os_my/kernel/memory.c:200
			return NULL;
		}
		page_table_add((void*)vaddr, page_phyaddr); // 在页表中做映射 
		vaddr += PG_SIZE;		 // 下一个虚拟页
	}
	return vaddr_start;
c0002ca5:	8b 45 ec             	mov    -0x14(%ebp),%eax
/work/x86_os_my/kernel/memory.c:201
}
c0002ca8:	c9                   	leave  
c0002ca9:	c3                   	ret    

c0002caa <get_kernel_pages>:
get_kernel_pages():
/work/x86_os_my/kernel/memory.c:204

/* 从内核物理内存池中申请pg_cnt页内存,成功则返回其虚拟地址,失败则返回NULL */
void* get_kernel_pages(uint32_t pg_cnt) {
c0002caa:	55                   	push   %ebp
c0002cab:	89 e5                	mov    %esp,%ebp
c0002cad:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:205
	lock_acquire(&kernel_pool.lock);
c0002cb0:	83 ec 0c             	sub    $0xc,%esp
c0002cb3:	68 f0 cc 00 c0       	push   $0xc000ccf0
c0002cb8:	e8 e2 1c 00 00       	call   c000499f <lock_acquire>
c0002cbd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:206
	void* vaddr =  malloc_page(PF_KERNEL, pg_cnt);
c0002cc0:	83 ec 08             	sub    $0x8,%esp
c0002cc3:	ff 75 08             	pushl  0x8(%ebp)
c0002cc6:	6a 01                	push   $0x1
c0002cc8:	e8 1b ff ff ff       	call   c0002be8 <malloc_page>
c0002ccd:	83 c4 10             	add    $0x10,%esp
c0002cd0:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:207
	if (vaddr != NULL) {
c0002cd3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0002cd7:	74 17                	je     c0002cf0 <get_kernel_pages+0x46>
/work/x86_os_my/kernel/memory.c:208
		memset(vaddr, 0, pg_cnt * PG_SIZE);
c0002cd9:	8b 45 08             	mov    0x8(%ebp),%eax
c0002cdc:	c1 e0 0c             	shl    $0xc,%eax
c0002cdf:	83 ec 04             	sub    $0x4,%esp
c0002ce2:	50                   	push   %eax
c0002ce3:	6a 00                	push   $0x0
c0002ce5:	ff 75 f4             	pushl  -0xc(%ebp)
c0002ce8:	e8 2d 0d 00 00       	call   c0003a1a <memset>
c0002ced:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:210
	}
	lock_release(&kernel_pool.lock);
c0002cf0:	83 ec 0c             	sub    $0xc,%esp
c0002cf3:	68 f0 cc 00 c0       	push   $0xc000ccf0
c0002cf8:	e8 19 1d 00 00       	call   c0004a16 <lock_release>
c0002cfd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:211
	return vaddr;
c0002d00:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/kernel/memory.c:212
}
c0002d03:	c9                   	leave  
c0002d04:	c3                   	ret    

c0002d05 <get_user_pages>:
get_user_pages():
/work/x86_os_my/kernel/memory.c:215

/* 在用户空间中申请4k内存,并返回其虚拟地址 */
void* get_user_pages(uint32_t pg_cnt) {
c0002d05:	55                   	push   %ebp
c0002d06:	89 e5                	mov    %esp,%ebp
c0002d08:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:216
	lock_acquire(&user_pool.lock);
c0002d0b:	83 ec 0c             	sub    $0xc,%esp
c0002d0e:	68 f0 cb 00 c0       	push   $0xc000cbf0
c0002d13:	e8 87 1c 00 00       	call   c000499f <lock_acquire>
c0002d18:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:217
	void* vaddr = malloc_page(PF_USER, pg_cnt);
c0002d1b:	83 ec 08             	sub    $0x8,%esp
c0002d1e:	ff 75 08             	pushl  0x8(%ebp)
c0002d21:	6a 02                	push   $0x2
c0002d23:	e8 c0 fe ff ff       	call   c0002be8 <malloc_page>
c0002d28:	83 c4 10             	add    $0x10,%esp
c0002d2b:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:218
	if (vaddr != NULL) {
c0002d2e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0002d32:	74 17                	je     c0002d4b <get_user_pages+0x46>
/work/x86_os_my/kernel/memory.c:219
		memset(vaddr, 0, pg_cnt * PG_SIZE);
c0002d34:	8b 45 08             	mov    0x8(%ebp),%eax
c0002d37:	c1 e0 0c             	shl    $0xc,%eax
c0002d3a:	83 ec 04             	sub    $0x4,%esp
c0002d3d:	50                   	push   %eax
c0002d3e:	6a 00                	push   $0x0
c0002d40:	ff 75 f4             	pushl  -0xc(%ebp)
c0002d43:	e8 d2 0c 00 00       	call   c0003a1a <memset>
c0002d48:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:221
	}
	lock_release(&user_pool.lock);
c0002d4b:	83 ec 0c             	sub    $0xc,%esp
c0002d4e:	68 f0 cb 00 c0       	push   $0xc000cbf0
c0002d53:	e8 be 1c 00 00       	call   c0004a16 <lock_release>
c0002d58:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:222
	return vaddr;
c0002d5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/kernel/memory.c:223
}
c0002d5e:	c9                   	leave  
c0002d5f:	c3                   	ret    

c0002d60 <get_a_page>:
get_a_page():
/work/x86_os_my/kernel/memory.c:227

/* 将虚拟地址vaddr与pf池中的物理地址关联,仅支持一页空间分配
 * 功能是，可以指定虚拟地址的内存分配 */
void* get_a_page(enum pool_flags pf, uint32_t vaddr) {
c0002d60:	55                   	push   %ebp
c0002d61:	89 e5                	mov    %esp,%ebp
c0002d63:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:228
	struct pool* mem_pool = pf & PF_KERNEL ? &kernel_pool : &user_pool;
c0002d66:	8b 45 08             	mov    0x8(%ebp),%eax
c0002d69:	83 e0 01             	and    $0x1,%eax
c0002d6c:	85 c0                	test   %eax,%eax
c0002d6e:	74 07                	je     c0002d77 <get_a_page+0x17>
/work/x86_os_my/kernel/memory.c:228 (discriminator 1)
c0002d70:	b8 e0 cc 00 c0       	mov    $0xc000cce0,%eax
c0002d75:	eb 05                	jmp    c0002d7c <get_a_page+0x1c>
/work/x86_os_my/kernel/memory.c:228 (discriminator 2)
c0002d77:	b8 e0 cb 00 c0       	mov    $0xc000cbe0,%eax
/work/x86_os_my/kernel/memory.c:228 (discriminator 4)
c0002d7c:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:229 (discriminator 4)
	lock_acquire(&mem_pool->lock);
c0002d7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002d82:	83 c0 10             	add    $0x10,%eax
c0002d85:	83 ec 0c             	sub    $0xc,%esp
c0002d88:	50                   	push   %eax
c0002d89:	e8 11 1c 00 00       	call   c000499f <lock_acquire>
c0002d8e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:232 (discriminator 4)

	/* 先将虚拟地址对应的位图置1 */
	struct task_struct* cur = running_thread();
c0002d91:	e8 6b 10 00 00       	call   c0003e01 <running_thread>
c0002d96:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:233 (discriminator 4)
	int32_t bit_idx = -1;
c0002d99:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:235 (discriminator 4)

	if (cur->pgdir != NULL && pf == PF_USER) {
c0002da0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002da3:	8b 40 54             	mov    0x54(%eax),%eax
c0002da6:	85 c0                	test   %eax,%eax
c0002da8:	74 55                	je     c0002dff <get_a_page+0x9f>
/work/x86_os_my/kernel/memory.c:235 (discriminator 1)
c0002daa:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c0002dae:	75 4f                	jne    c0002dff <get_a_page+0x9f>
/work/x86_os_my/kernel/memory.c:237
		/* 若当前是用户进程申请用户内存,就修改用户进程自己的虚拟地址池的 位图 */
		bit_idx = (vaddr - cur->userprog_vaddr.vaddr_start) / PG_SIZE;
c0002db0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002db3:	8b 40 60             	mov    0x60(%eax),%eax
c0002db6:	8b 55 0c             	mov    0xc(%ebp),%edx
c0002db9:	29 c2                	sub    %eax,%edx
c0002dbb:	89 d0                	mov    %edx,%eax
c0002dbd:	c1 e8 0c             	shr    $0xc,%eax
c0002dc0:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:238
		ASSERT(bit_idx > 0);
c0002dc3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0002dc7:	7f 1c                	jg     c0002de5 <get_a_page+0x85>
/work/x86_os_my/kernel/memory.c:238 (discriminator 1)
c0002dc9:	68 d7 89 00 c0       	push   $0xc00089d7
c0002dce:	68 ec 8c 00 c0       	push   $0xc0008cec
c0002dd3:	68 ee 00 00 00       	push   $0xee
c0002dd8:	68 8b 89 00 c0       	push   $0xc000898b
c0002ddd:	e8 20 f8 ff ff       	call   c0002602 <panic_spin>
c0002de2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:239
		bitmap_set(&cur->userprog_vaddr.vaddr_bitmap, bit_idx, 1);
c0002de5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002de8:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0002deb:	83 c2 58             	add    $0x58,%edx
c0002dee:	83 ec 04             	sub    $0x4,%esp
c0002df1:	6a 01                	push   $0x1
c0002df3:	50                   	push   %eax
c0002df4:	52                   	push   %edx
c0002df5:	e8 76 fa ff ff       	call   c0002870 <bitmap_set>
c0002dfa:	83 c4 10             	add    $0x10,%esp
c0002dfd:	eb 78                	jmp    c0002e77 <get_a_page+0x117>
/work/x86_os_my/kernel/memory.c:241

	} else if (cur->pgdir == NULL && pf == PF_KERNEL) {
c0002dff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002e02:	8b 40 54             	mov    0x54(%eax),%eax
c0002e05:	85 c0                	test   %eax,%eax
c0002e07:	75 52                	jne    c0002e5b <get_a_page+0xfb>
/work/x86_os_my/kernel/memory.c:241 (discriminator 1)
c0002e09:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c0002e0d:	75 4c                	jne    c0002e5b <get_a_page+0xfb>
/work/x86_os_my/kernel/memory.c:243
		/* 如果是内核线程申请内核内存,就修改 kernel_vaddr */
		bit_idx = (vaddr - kernel_vaddr.vaddr_start) / PG_SIZE;
c0002e0f:	a1 d0 cc 00 c0       	mov    0xc000ccd0,%eax
c0002e14:	8b 55 0c             	mov    0xc(%ebp),%edx
c0002e17:	29 c2                	sub    %eax,%edx
c0002e19:	89 d0                	mov    %edx,%eax
c0002e1b:	c1 e8 0c             	shr    $0xc,%eax
c0002e1e:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:244
		ASSERT(bit_idx > 0);
c0002e21:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0002e25:	7f 1c                	jg     c0002e43 <get_a_page+0xe3>
/work/x86_os_my/kernel/memory.c:244 (discriminator 1)
c0002e27:	68 d7 89 00 c0       	push   $0xc00089d7
c0002e2c:	68 ec 8c 00 c0       	push   $0xc0008cec
c0002e31:	68 f4 00 00 00       	push   $0xf4
c0002e36:	68 8b 89 00 c0       	push   $0xc000898b
c0002e3b:	e8 c2 f7 ff ff       	call   c0002602 <panic_spin>
c0002e40:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:245
		bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx, 1);
c0002e43:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002e46:	83 ec 04             	sub    $0x4,%esp
c0002e49:	6a 01                	push   $0x1
c0002e4b:	50                   	push   %eax
c0002e4c:	68 c8 cc 00 c0       	push   $0xc000ccc8
c0002e51:	e8 1a fa ff ff       	call   c0002870 <bitmap_set>
c0002e56:	83 c4 10             	add    $0x10,%esp
c0002e59:	eb 1c                	jmp    c0002e77 <get_a_page+0x117>
/work/x86_os_my/kernel/memory.c:248

	} else {
		PANIC("get_a_page:not allow kernel alloc userspace or user alloc kernelspace by get_a_page");
c0002e5b:	68 e4 89 00 c0       	push   $0xc00089e4
c0002e60:	68 ec 8c 00 c0       	push   $0xc0008cec
c0002e65:	68 f8 00 00 00       	push   $0xf8
c0002e6a:	68 8b 89 00 c0       	push   $0xc000898b
c0002e6f:	e8 8e f7 ff ff       	call   c0002602 <panic_spin>
c0002e74:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:251
	}

	void* page_phyaddr = palloc(mem_pool);
c0002e77:	83 ec 0c             	sub    $0xc,%esp
c0002e7a:	ff 75 f4             	pushl  -0xc(%ebp)
c0002e7d:	e8 01 fc ff ff       	call   c0002a83 <palloc>
c0002e82:	83 c4 10             	add    $0x10,%esp
c0002e85:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:252
	if (page_phyaddr == NULL) {
c0002e88:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0002e8c:	75 19                	jne    c0002ea7 <get_a_page+0x147>
/work/x86_os_my/kernel/memory.c:253
		lock_release(&mem_pool->lock);	//哈哈
c0002e8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002e91:	83 c0 10             	add    $0x10,%eax
c0002e94:	83 ec 0c             	sub    $0xc,%esp
c0002e97:	50                   	push   %eax
c0002e98:	e8 79 1b 00 00       	call   c0004a16 <lock_release>
c0002e9d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:254
		return NULL;
c0002ea0:	b8 00 00 00 00       	mov    $0x0,%eax
c0002ea5:	eb 27                	jmp    c0002ece <get_a_page+0x16e>
/work/x86_os_my/kernel/memory.c:256
	}
	page_table_add((void*)vaddr, page_phyaddr);
c0002ea7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0002eaa:	83 ec 08             	sub    $0x8,%esp
c0002ead:	ff 75 e8             	pushl  -0x18(%ebp)
c0002eb0:	50                   	push   %eax
c0002eb1:	e8 21 fc ff ff       	call   c0002ad7 <page_table_add>
c0002eb6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:258
	
	lock_release(&mem_pool->lock);
c0002eb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002ebc:	83 c0 10             	add    $0x10,%eax
c0002ebf:	83 ec 0c             	sub    $0xc,%esp
c0002ec2:	50                   	push   %eax
c0002ec3:	e8 4e 1b 00 00       	call   c0004a16 <lock_release>
c0002ec8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:259
	return (void*)vaddr;
c0002ecb:	8b 45 0c             	mov    0xc(%ebp),%eax
/work/x86_os_my/kernel/memory.c:260
}
c0002ece:	c9                   	leave  
c0002ecf:	c3                   	ret    

c0002ed0 <addr_v2p>:
addr_v2p():
/work/x86_os_my/kernel/memory.c:263

/* 得到虚拟地址映射到的物理地址 */
uint32_t addr_v2p(uint32_t vaddr) {
c0002ed0:	55                   	push   %ebp
c0002ed1:	89 e5                	mov    %esp,%ebp
c0002ed3:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/memory.c:264
	uint32_t* pte = pte_ptr(vaddr);
c0002ed6:	ff 75 08             	pushl  0x8(%ebp)
c0002ed9:	e8 59 fb ff ff       	call   c0002a37 <pte_ptr>
c0002ede:	83 c4 04             	add    $0x4,%esp
c0002ee1:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/kernel/memory.c:268
	/* (*pte)的内容是 vaddr 所在 pte 的内容，也就是 vaddr 最终所映射到的物理页框的 32 位地址中的高 20 位和 12 位的页表项属性，
	 * 因为页框都是自然页，低 12 位地址是 0，所以页表项 pte（和页目录项 pde）中只需要记录页框的高 20 位地址即可。
	 */
	return ((*pte & 0xfffff000) + (vaddr & 0x00000fff));
c0002ee4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0002ee7:	8b 00                	mov    (%eax),%eax
c0002ee9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0002eee:	89 c2                	mov    %eax,%edx
c0002ef0:	8b 45 08             	mov    0x8(%ebp),%eax
c0002ef3:	25 ff 0f 00 00       	and    $0xfff,%eax
c0002ef8:	01 d0                	add    %edx,%eax
/work/x86_os_my/kernel/memory.c:269
}
c0002efa:	c9                   	leave  
c0002efb:	c3                   	ret    

c0002efc <arena2block>:
arena2block():
/work/x86_os_my/kernel/memory.c:283
|                     |
| +-----------------+ |
+-+  mem_block_desc |←+
  +-----------------+
*/
static struct mem_block* arena2block(struct arena* a, uint32_t idx) {
c0002efc:	55                   	push   %ebp
c0002efd:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/kernel/memory.c:284
	return (struct mem_block*)((uint32_t)a + sizeof(struct arena) + idx * a->desc->block_size);
c0002eff:	8b 45 08             	mov    0x8(%ebp),%eax
c0002f02:	8b 00                	mov    (%eax),%eax
c0002f04:	8b 00                	mov    (%eax),%eax
c0002f06:	0f af 45 0c          	imul   0xc(%ebp),%eax
c0002f0a:	89 c2                	mov    %eax,%edx
c0002f0c:	8b 45 08             	mov    0x8(%ebp),%eax
c0002f0f:	01 d0                	add    %edx,%eax
c0002f11:	83 c0 0c             	add    $0xc,%eax
/work/x86_os_my/kernel/memory.c:285
}
c0002f14:	5d                   	pop    %ebp
c0002f15:	c3                   	ret    

c0002f16 <block2arena>:
block2arena():
/work/x86_os_my/kernel/memory.c:290

/* 返回内存块mem_block所在的arena地址
 * 取到了虚拟地址mem_block那一整页的地址
 */
static struct arena* block2arena(struct mem_block* b) {
c0002f16:	55                   	push   %ebp
c0002f17:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/kernel/memory.c:291
	return (struct arena*)((uint32_t)b & 0xfffff000);
c0002f19:	8b 45 08             	mov    0x8(%ebp),%eax
c0002f1c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
/work/x86_os_my/kernel/memory.c:292
}
c0002f21:	5d                   	pop    %ebp
c0002f22:	c3                   	ret    

c0002f23 <sys_malloc>:
sys_malloc():
/work/x86_os_my/kernel/memory.c:303
 * 3.内存块地址被返回给用户后，用户可以自由使用此内存块 mem_block
 *   会把此内存块中的 list_elem 型变量 free_elem 覆盖
 *   不过 arena->mem_block_desc->free_list 中的元素已经记录了 mem_block->list_elem 的地址
 *   使用时覆盖的，只是 mem_block 的内容。
 */
void* sys_malloc(uint32_t size) {
c0002f23:	55                   	push   %ebp
c0002f24:	89 e5                	mov    %esp,%ebp
c0002f26:	83 ec 38             	sub    $0x38,%esp
/work/x86_os_my/kernel/memory.c:308
	enum pool_flags PF;
	struct pool* mem_pool;
	uint32_t pool_size;
	struct mem_block_desc* descs;
	struct task_struct* cur_thread = running_thread();
c0002f29:	e8 d3 0e 00 00       	call   c0003e01 <running_thread>
c0002f2e:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/kernel/memory.c:311

	/* 判断用哪个内存池*/
	if (cur_thread->pgdir == NULL) {	// 是内核线程
c0002f31:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0002f34:	8b 40 54             	mov    0x54(%eax),%eax
c0002f37:	85 c0                	test   %eax,%eax
c0002f39:	75 1f                	jne    c0002f5a <sys_malloc+0x37>
/work/x86_os_my/kernel/memory.c:312
		PF = PF_KERNEL;
c0002f3b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:313
		pool_size = kernel_pool.pool_size;
c0002f42:	a1 ec cc 00 c0       	mov    0xc000ccec,%eax
c0002f47:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:314
		mem_pool = &kernel_pool;
c0002f4a:	c7 45 f0 e0 cc 00 c0 	movl   $0xc000cce0,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:315
		descs = k_block_descs;
c0002f51:	c7 45 e8 20 cc 00 c0 	movl   $0xc000cc20,-0x18(%ebp)
c0002f58:	eb 1f                	jmp    c0002f79 <sys_malloc+0x56>
/work/x86_os_my/kernel/memory.c:317
	} else {							// 用户进程pcb中的pgdir（页目录表）会在为其分配页表时创建【create_page_dir】
		PF = PF_USER;
c0002f5a:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:318
		pool_size = user_pool.pool_size;
c0002f61:	a1 ec cb 00 c0       	mov    0xc000cbec,%eax
c0002f66:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:319
		mem_pool = &user_pool;
c0002f69:	c7 45 f0 e0 cb 00 c0 	movl   $0xc000cbe0,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:320
		descs = cur_thread->u_block_desc;
c0002f70:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0002f73:	83 c0 64             	add    $0x64,%eax
c0002f76:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:324
	}

	/* 若申请的内存不在内存池容量范围内则直接返回NULL */
	if (!(size > 0 && size < pool_size)) {
c0002f79:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0002f7d:	74 08                	je     c0002f87 <sys_malloc+0x64>
/work/x86_os_my/kernel/memory.c:324 (discriminator 1)
c0002f7f:	8b 45 08             	mov    0x8(%ebp),%eax
c0002f82:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0002f85:	72 0a                	jb     c0002f91 <sys_malloc+0x6e>
/work/x86_os_my/kernel/memory.c:325
		return NULL;
c0002f87:	b8 00 00 00 00       	mov    $0x0,%eax
c0002f8c:	e9 c5 02 00 00       	jmp    c0003256 <sys_malloc+0x333>
/work/x86_os_my/kernel/memory.c:330
	}

	struct arena* a;
	struct mem_block* b;
	lock_acquire(&mem_pool->lock);
c0002f91:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002f94:	83 c0 10             	add    $0x10,%eax
c0002f97:	83 ec 0c             	sub    $0xc,%esp
c0002f9a:	50                   	push   %eax
c0002f9b:	e8 ff 19 00 00       	call   c000499f <lock_acquire>
c0002fa0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:333

	/* 超过最大内存块1024, 就分配页框 */
	if (size > 1024) {
c0002fa3:	81 7d 08 00 04 00 00 	cmpl   $0x400,0x8(%ebp)
c0002faa:	0f 86 94 00 00 00    	jbe    c0003044 <sys_malloc+0x121>
/work/x86_os_my/kernel/memory.c:334
		uint32_t page_cnt = DIV_ROUND_UP(size + sizeof(struct arena), PG_SIZE);	// 向上取整需要的页框数
c0002fb0:	8b 45 08             	mov    0x8(%ebp),%eax
c0002fb3:	05 0b 10 00 00       	add    $0x100b,%eax
c0002fb8:	c1 e8 0c             	shr    $0xc,%eax
c0002fbb:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/kernel/memory.c:336

		a = malloc_page(PF, page_cnt);
c0002fbe:	83 ec 08             	sub    $0x8,%esp
c0002fc1:	ff 75 d8             	pushl  -0x28(%ebp)
c0002fc4:	ff 75 f4             	pushl  -0xc(%ebp)
c0002fc7:	e8 1c fc ff ff       	call   c0002be8 <malloc_page>
c0002fcc:	83 c4 10             	add    $0x10,%esp
c0002fcf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/kernel/memory.c:337
		if (a != NULL) {
c0002fd2:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0002fd6:	74 50                	je     c0003028 <sys_malloc+0x105>
/work/x86_os_my/kernel/memory.c:338
			memset(a, 0, page_cnt * PG_SIZE);
c0002fd8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0002fdb:	c1 e0 0c             	shl    $0xc,%eax
c0002fde:	83 ec 04             	sub    $0x4,%esp
c0002fe1:	50                   	push   %eax
c0002fe2:	6a 00                	push   $0x0
c0002fe4:	ff 75 d4             	pushl  -0x2c(%ebp)
c0002fe7:	e8 2e 0a 00 00       	call   c0003a1a <memset>
c0002fec:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:342

			// 【arena结构体初始化，情况1】
			/* 对于分配的大块页框,将desc置为NULL, cnt置为页框数, large置为true */
			a->desc = NULL;
c0002fef:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002ff2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/kernel/memory.c:343
			a->cnt = page_cnt;
c0002ff8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002ffb:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0002ffe:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/kernel/memory.c:344
			a->large = true;
c0003001:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0003004:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/kernel/memory.c:346

			lock_release(&mem_pool->lock);
c000300b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000300e:	83 c0 10             	add    $0x10,%eax
c0003011:	83 ec 0c             	sub    $0xc,%esp
c0003014:	50                   	push   %eax
c0003015:	e8 fc 19 00 00       	call   c0004a16 <lock_release>
c000301a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:347
			return (void*)(a + 1);	// 跨过arena大小，把剩下的内存返回
c000301d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0003020:	83 c0 0c             	add    $0xc,%eax
c0003023:	e9 2e 02 00 00       	jmp    c0003256 <sys_malloc+0x333>
/work/x86_os_my/kernel/memory.c:349
		} else {
			lock_release(&mem_pool->lock);
c0003028:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000302b:	83 c0 10             	add    $0x10,%eax
c000302e:	83 ec 0c             	sub    $0xc,%esp
c0003031:	50                   	push   %eax
c0003032:	e8 df 19 00 00       	call   c0004a16 <lock_release>
c0003037:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:350
			return NULL;
c000303a:	b8 00 00 00 00       	mov    $0x0,%eax
c000303f:	e9 12 02 00 00       	jmp    c0003256 <sys_malloc+0x333>
/work/x86_os_my/kernel/memory.c:358
	} else {
	/* 若申请的内存小于等于1024,可在各种规格的mem_block_desc中去适配 */
		uint8_t desc_idx;

		/* 从内存块描述符中匹配合适的内存块规格 */
		for (desc_idx = 0; desc_idx < DESC_CNT; desc_idx++) {
c0003044:	c6 45 e7 00          	movb   $0x0,-0x19(%ebp)
c0003048:	eb 25                	jmp    c000306f <sys_malloc+0x14c>
/work/x86_os_my/kernel/memory.c:359
			if (size <= descs[desc_idx].block_size) {	// 从小往大后,找到后退出
c000304a:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c000304e:	89 d0                	mov    %edx,%eax
c0003050:	01 c0                	add    %eax,%eax
c0003052:	01 d0                	add    %edx,%eax
c0003054:	c1 e0 03             	shl    $0x3,%eax
c0003057:	89 c2                	mov    %eax,%edx
c0003059:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000305c:	01 d0                	add    %edx,%eax
c000305e:	8b 00                	mov    (%eax),%eax
c0003060:	3b 45 08             	cmp    0x8(%ebp),%eax
c0003063:	73 12                	jae    c0003077 <sys_malloc+0x154>
/work/x86_os_my/kernel/memory.c:358 (discriminator 2)
	} else {
	/* 若申请的内存小于等于1024,可在各种规格的mem_block_desc中去适配 */
		uint8_t desc_idx;

		/* 从内存块描述符中匹配合适的内存块规格 */
		for (desc_idx = 0; desc_idx < DESC_CNT; desc_idx++) {
c0003065:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c0003069:	83 c0 01             	add    $0x1,%eax
c000306c:	88 45 e7             	mov    %al,-0x19(%ebp)
/work/x86_os_my/kernel/memory.c:358 (discriminator 1)
c000306f:	80 7d e7 06          	cmpb   $0x6,-0x19(%ebp)
c0003073:	76 d5                	jbe    c000304a <sys_malloc+0x127>
c0003075:	eb 01                	jmp    c0003078 <sys_malloc+0x155>
/work/x86_os_my/kernel/memory.c:360
			if (size <= descs[desc_idx].block_size) {	// 从小往大后,找到后退出
				break;
c0003077:	90                   	nop
/work/x86_os_my/kernel/memory.c:366
			}
		}

		/* 若mem_block_desc的free_list中已经没有可用的mem_block,
		 * 就创建新的arena提供mem_block */
		if (list_empty(&descs[desc_idx].free_list)) {
c0003078:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c000307c:	89 d0                	mov    %edx,%eax
c000307e:	01 c0                	add    %eax,%eax
c0003080:	01 d0                	add    %edx,%eax
c0003082:	c1 e0 03             	shl    $0x3,%eax
c0003085:	89 c2                	mov    %eax,%edx
c0003087:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000308a:	01 d0                	add    %edx,%eax
c000308c:	83 c0 08             	add    $0x8,%eax
c000308f:	83 ec 0c             	sub    $0xc,%esp
c0003092:	50                   	push   %eax
c0003093:	e8 18 16 00 00       	call   c00046b0 <list_empty>
c0003098:	83 c4 10             	add    $0x10,%esp
c000309b:	85 c0                	test   %eax,%eax
c000309d:	0f 84 31 01 00 00    	je     c00031d4 <sys_malloc+0x2b1>
/work/x86_os_my/kernel/memory.c:367
			a = malloc_page(PF, 1);       // 分配1页框做为arena
c00030a3:	83 ec 08             	sub    $0x8,%esp
c00030a6:	6a 01                	push   $0x1
c00030a8:	ff 75 f4             	pushl  -0xc(%ebp)
c00030ab:	e8 38 fb ff ff       	call   c0002be8 <malloc_page>
c00030b0:	83 c4 10             	add    $0x10,%esp
c00030b3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/kernel/memory.c:368
			if (a == NULL) {
c00030b6:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c00030ba:	75 1c                	jne    c00030d8 <sys_malloc+0x1b5>
/work/x86_os_my/kernel/memory.c:369
				lock_release(&mem_pool->lock);
c00030bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00030bf:	83 c0 10             	add    $0x10,%eax
c00030c2:	83 ec 0c             	sub    $0xc,%esp
c00030c5:	50                   	push   %eax
c00030c6:	e8 4b 19 00 00       	call   c0004a16 <lock_release>
c00030cb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:370
				return NULL;
c00030ce:	b8 00 00 00 00       	mov    $0x0,%eax
c00030d3:	e9 7e 01 00 00       	jmp    c0003256 <sys_malloc+0x333>
/work/x86_os_my/kernel/memory.c:372
			}
			memset(a, 0, PG_SIZE);
c00030d8:	83 ec 04             	sub    $0x4,%esp
c00030db:	68 00 10 00 00       	push   $0x1000
c00030e0:	6a 00                	push   $0x0
c00030e2:	ff 75 d4             	pushl  -0x2c(%ebp)
c00030e5:	e8 30 09 00 00       	call   c0003a1a <memset>
c00030ea:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:376

			// 【arena结构体初始化，情况2】
			/* 对于分配的小块内存,将desc置为相应内存块描述符, cnt置为此arena可用的内存块数, large置为false */
			a->desc = &descs[desc_idx];
c00030ed:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c00030f1:	89 d0                	mov    %edx,%eax
c00030f3:	01 c0                	add    %eax,%eax
c00030f5:	01 d0                	add    %edx,%eax
c00030f7:	c1 e0 03             	shl    $0x3,%eax
c00030fa:	89 c2                	mov    %eax,%edx
c00030fc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00030ff:	01 c2                	add    %eax,%edx
c0003101:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0003104:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/kernel/memory.c:377
			a->large = false;
c0003106:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0003109:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
/work/x86_os_my/kernel/memory.c:378
			a->cnt = descs[desc_idx].blocks_per_arena;
c0003110:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0003114:	89 d0                	mov    %edx,%eax
c0003116:	01 c0                	add    %eax,%eax
c0003118:	01 d0                	add    %edx,%eax
c000311a:	c1 e0 03             	shl    $0x3,%eax
c000311d:	89 c2                	mov    %eax,%edx
c000311f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0003122:	01 d0                	add    %edx,%eax
c0003124:	8b 50 04             	mov    0x4(%eax),%edx
c0003127:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000312a:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/kernel/memory.c:380

			enum intr_status old_status = intr_disable();
c000312d:	e8 29 eb ff ff       	call   c0001c5b <intr_disable>
c0003132:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/kernel/memory.c:383
			/* 开始将arena拆分成内存块,并添加到内存块描述符的free_list中 */
			uint32_t block_idx;
			for (block_idx = 0; block_idx < descs[desc_idx].blocks_per_arena; block_idx++) {
c0003135:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c000313c:	eb 68                	jmp    c00031a6 <sys_malloc+0x283>
/work/x86_os_my/kernel/memory.c:384
				b = arena2block(a, block_idx);
c000313e:	83 ec 08             	sub    $0x8,%esp
c0003141:	ff 75 e0             	pushl  -0x20(%ebp)
c0003144:	ff 75 d4             	pushl  -0x2c(%ebp)
c0003147:	e8 b0 fd ff ff       	call   c0002efc <arena2block>
c000314c:	83 c4 10             	add    $0x10,%esp
c000314f:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/kernel/memory.c:385
				ASSERT(!elem_find(&a->desc->free_list, &b->free_elem));
c0003152:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0003155:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0003158:	8b 12                	mov    (%edx),%edx
c000315a:	83 c2 08             	add    $0x8,%edx
c000315d:	83 ec 08             	sub    $0x8,%esp
c0003160:	50                   	push   %eax
c0003161:	52                   	push   %edx
c0003162:	e8 7c 14 00 00       	call   c00045e3 <elem_find>
c0003167:	83 c4 10             	add    $0x10,%esp
c000316a:	85 c0                	test   %eax,%eax
c000316c:	74 1c                	je     c000318a <sys_malloc+0x267>
/work/x86_os_my/kernel/memory.c:385 (discriminator 1)
c000316e:	68 38 8a 00 c0       	push   $0xc0008a38
c0003173:	68 f8 8c 00 c0       	push   $0xc0008cf8
c0003178:	68 81 01 00 00       	push   $0x181
c000317d:	68 8b 89 00 c0       	push   $0xc000898b
c0003182:	e8 7b f4 ff ff       	call   c0002602 <panic_spin>
c0003187:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:386 (discriminator 2)
				list_append(&a->desc->free_list, &b->free_elem);
c000318a:	8b 45 cc             	mov    -0x34(%ebp),%eax
c000318d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0003190:	8b 12                	mov    (%edx),%edx
c0003192:	83 c2 08             	add    $0x8,%edx
c0003195:	83 ec 08             	sub    $0x8,%esp
c0003198:	50                   	push   %eax
c0003199:	52                   	push   %edx
c000319a:	e8 ca 13 00 00       	call   c0004569 <list_append>
c000319f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:383 (discriminator 2)
			a->cnt = descs[desc_idx].blocks_per_arena;

			enum intr_status old_status = intr_disable();
			/* 开始将arena拆分成内存块,并添加到内存块描述符的free_list中 */
			uint32_t block_idx;
			for (block_idx = 0; block_idx < descs[desc_idx].blocks_per_arena; block_idx++) {
c00031a2:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
/work/x86_os_my/kernel/memory.c:383 (discriminator 1)
c00031a6:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c00031aa:	89 d0                	mov    %edx,%eax
c00031ac:	01 c0                	add    %eax,%eax
c00031ae:	01 d0                	add    %edx,%eax
c00031b0:	c1 e0 03             	shl    $0x3,%eax
c00031b3:	89 c2                	mov    %eax,%edx
c00031b5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00031b8:	01 d0                	add    %edx,%eax
c00031ba:	8b 40 04             	mov    0x4(%eax),%eax
c00031bd:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c00031c0:	0f 87 78 ff ff ff    	ja     c000313e <sys_malloc+0x21b>
/work/x86_os_my/kernel/memory.c:388
				b = arena2block(a, block_idx);
				ASSERT(!elem_find(&a->desc->free_list, &b->free_elem));
				list_append(&a->desc->free_list, &b->free_elem);
			}
			intr_set_status(old_status);
c00031c6:	83 ec 0c             	sub    $0xc,%esp
c00031c9:	ff 75 d0             	pushl  -0x30(%ebp)
c00031cc:	e8 b3 ea ff ff       	call   c0001c84 <intr_set_status>
c00031d1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:392
		}

		/* 开始分配内存块 */
		b = elem2entry(struct mem_block, free_elem, list_pop(&(descs[desc_idx].free_list)));
c00031d4:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c00031d8:	89 d0                	mov    %edx,%eax
c00031da:	01 c0                	add    %eax,%eax
c00031dc:	01 d0                	add    %edx,%eax
c00031de:	c1 e0 03             	shl    $0x3,%eax
c00031e1:	89 c2                	mov    %eax,%edx
c00031e3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00031e6:	01 d0                	add    %edx,%eax
c00031e8:	83 c0 08             	add    $0x8,%eax
c00031eb:	83 ec 0c             	sub    $0xc,%esp
c00031ee:	50                   	push   %eax
c00031ef:	e8 cd 13 00 00       	call   c00045c1 <list_pop>
c00031f4:	83 c4 10             	add    $0x10,%esp
c00031f7:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/kernel/memory.c:393
		memset(b, 0, descs[desc_idx].block_size);
c00031fa:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c00031fe:	89 d0                	mov    %edx,%eax
c0003200:	01 c0                	add    %eax,%eax
c0003202:	01 d0                	add    %edx,%eax
c0003204:	c1 e0 03             	shl    $0x3,%eax
c0003207:	89 c2                	mov    %eax,%edx
c0003209:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000320c:	01 d0                	add    %edx,%eax
c000320e:	8b 00                	mov    (%eax),%eax
c0003210:	83 ec 04             	sub    $0x4,%esp
c0003213:	50                   	push   %eax
c0003214:	6a 00                	push   $0x0
c0003216:	ff 75 cc             	pushl  -0x34(%ebp)
c0003219:	e8 fc 07 00 00       	call   c0003a1a <memset>
c000321e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:395

		a = block2arena(b);	// 获取内存块b所在的arena
c0003221:	83 ec 0c             	sub    $0xc,%esp
c0003224:	ff 75 cc             	pushl  -0x34(%ebp)
c0003227:	e8 ea fc ff ff       	call   c0002f16 <block2arena>
c000322c:	83 c4 10             	add    $0x10,%esp
c000322f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/kernel/memory.c:396
		a->cnt--;			// 将此arena中的空闲内存块数减1
c0003232:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0003235:	8b 40 04             	mov    0x4(%eax),%eax
c0003238:	8d 50 ff             	lea    -0x1(%eax),%edx
c000323b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000323e:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/kernel/memory.c:398

		lock_release(&mem_pool->lock);
c0003241:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003244:	83 c0 10             	add    $0x10,%eax
c0003247:	83 ec 0c             	sub    $0xc,%esp
c000324a:	50                   	push   %eax
c000324b:	e8 c6 17 00 00       	call   c0004a16 <lock_release>
c0003250:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:399
		return (void*)b;
c0003253:	8b 45 cc             	mov    -0x34(%ebp),%eax
/work/x86_os_my/kernel/memory.c:401
	}
}
c0003256:	c9                   	leave  
c0003257:	c3                   	ret    

c0003258 <pfree>:
pfree():
/work/x86_os_my/kernel/memory.c:406

/* 将物理地址pg_phy_addr回收到物理内存池
 * 清理物理地址池位图
 */
void pfree(uint32_t pg_phy_addr) {
c0003258:	55                   	push   %ebp
c0003259:	89 e5                	mov    %esp,%ebp
c000325b:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:408
	struct pool* mem_pool;
	uint32_t bit_idx = 0;
c000325e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:409
	if (pg_phy_addr >= user_pool.phy_addr_start) {	// 用户物理内存池
c0003265:	a1 e8 cb 00 c0       	mov    0xc000cbe8,%eax
c000326a:	3b 45 08             	cmp    0x8(%ebp),%eax
c000326d:	77 1b                	ja     c000328a <pfree+0x32>
/work/x86_os_my/kernel/memory.c:410
		mem_pool = &user_pool;
c000326f:	c7 45 f4 e0 cb 00 c0 	movl   $0xc000cbe0,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:411
		bit_idx = (pg_phy_addr - user_pool.phy_addr_start) / PG_SIZE;
c0003276:	a1 e8 cb 00 c0       	mov    0xc000cbe8,%eax
c000327b:	8b 55 08             	mov    0x8(%ebp),%edx
c000327e:	29 c2                	sub    %eax,%edx
c0003280:	89 d0                	mov    %edx,%eax
c0003282:	c1 e8 0c             	shr    $0xc,%eax
c0003285:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0003288:	eb 19                	jmp    c00032a3 <pfree+0x4b>
/work/x86_os_my/kernel/memory.c:413
	} else {	// 内核物理内存池
		mem_pool = &kernel_pool;
c000328a:	c7 45 f4 e0 cc 00 c0 	movl   $0xc000cce0,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:414
		bit_idx = (pg_phy_addr - kernel_pool.phy_addr_start) / PG_SIZE;
c0003291:	a1 e8 cc 00 c0       	mov    0xc000cce8,%eax
c0003296:	8b 55 08             	mov    0x8(%ebp),%edx
c0003299:	29 c2                	sub    %eax,%edx
c000329b:	89 d0                	mov    %edx,%eax
c000329d:	c1 e8 0c             	shr    $0xc,%eax
c00032a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:416
	}
	bitmap_set(&mem_pool->pool_bitmap, bit_idx, 0);	// 将位图中该位清0
c00032a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00032a6:	83 ec 04             	sub    $0x4,%esp
c00032a9:	6a 00                	push   $0x0
c00032ab:	ff 75 f0             	pushl  -0x10(%ebp)
c00032ae:	50                   	push   %eax
c00032af:	e8 bc f5 ff ff       	call   c0002870 <bitmap_set>
c00032b4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:417
}
c00032b7:	90                   	nop
c00032b8:	c9                   	leave  
c00032b9:	c3                   	ret    

c00032ba <page_table_pte_remove>:
page_table_pte_remove():
/work/x86_os_my/kernel/memory.c:420

/* 去掉页表中虚拟地址vaddr的映射,只去掉vaddr对应的pte */
static void page_table_pte_remove(uint32_t vaddr) {
c00032ba:	55                   	push   %ebp
c00032bb:	89 e5                	mov    %esp,%ebp
c00032bd:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/memory.c:421
	uint32_t* pte = pte_ptr(vaddr);
c00032c0:	8b 45 08             	mov    0x8(%ebp),%eax
c00032c3:	50                   	push   %eax
c00032c4:	e8 6e f7 ff ff       	call   c0002a37 <pte_ptr>
c00032c9:	83 c4 04             	add    $0x4,%esp
c00032cc:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/kernel/memory.c:422
	*pte &= ~PG_P_1;	// 将页表项pte的P位置0
c00032cf:	8b 45 fc             	mov    -0x4(%ebp),%eax
c00032d2:	8b 00                	mov    (%eax),%eax
c00032d4:	83 e0 fe             	and    $0xfffffffe,%eax
c00032d7:	89 c2                	mov    %eax,%edx
c00032d9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c00032dc:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/kernel/memory.c:423
	asm volatile ("invlpg %0"::"m" (vaddr):"memory");	//更新tlb
c00032de:	0f 01 7d 08          	invlpg 0x8(%ebp)
/work/x86_os_my/kernel/memory.c:426
	/*更新 TLB 有两种方式，一是用 invlpg 指令更新单条虚拟地址条目，
	另外一个是重新加载 cr3 寄存器，这将直接清空 TLB，相当于更新整个页表。*/
}
c00032e2:	90                   	nop
c00032e3:	c9                   	leave  
c00032e4:	c3                   	ret    

c00032e5 <vaddr_remove>:
vaddr_remove():
/work/x86_os_my/kernel/memory.c:431

/* 在虚拟地址池中释放以_vaddr起始的连续pg_cnt个虚拟页地址
 * 清理虚拟地址池位图
 */
static void vaddr_remove(enum pool_flags pf, void* _vaddr, uint32_t pg_cnt) {
c00032e5:	55                   	push   %ebp
c00032e6:	89 e5                	mov    %esp,%ebp
c00032e8:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:432
	uint32_t bit_idx_start = 0, vaddr = (uint32_t)_vaddr, cnt = 0;
c00032eb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c00032f2:	8b 45 0c             	mov    0xc(%ebp),%eax
c00032f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c00032f8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:434

	if (pf == PF_KERNEL) {	// 内核虚拟内存池
c00032ff:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c0003303:	75 3f                	jne    c0003344 <vaddr_remove+0x5f>
/work/x86_os_my/kernel/memory.c:435
		bit_idx_start = (vaddr - kernel_vaddr.vaddr_start) / PG_SIZE;
c0003305:	a1 d0 cc 00 c0       	mov    0xc000ccd0,%eax
c000330a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c000330d:	29 c2                	sub    %eax,%edx
c000330f:	89 d0                	mov    %edx,%eax
c0003311:	c1 e8 0c             	shr    $0xc,%eax
c0003314:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:436
		while(cnt < pg_cnt) {
c0003317:	eb 21                	jmp    c000333a <vaddr_remove+0x55>
/work/x86_os_my/kernel/memory.c:437
			bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
c0003319:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000331c:	8d 50 01             	lea    0x1(%eax),%edx
c000331f:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0003322:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0003325:	01 d0                	add    %edx,%eax
c0003327:	83 ec 04             	sub    $0x4,%esp
c000332a:	6a 00                	push   $0x0
c000332c:	50                   	push   %eax
c000332d:	68 c8 cc 00 c0       	push   $0xc000ccc8
c0003332:	e8 39 f5 ff ff       	call   c0002870 <bitmap_set>
c0003337:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:436
static void vaddr_remove(enum pool_flags pf, void* _vaddr, uint32_t pg_cnt) {
	uint32_t bit_idx_start = 0, vaddr = (uint32_t)_vaddr, cnt = 0;

	if (pf == PF_KERNEL) {	// 内核虚拟内存池
		bit_idx_start = (vaddr - kernel_vaddr.vaddr_start) / PG_SIZE;
		while(cnt < pg_cnt) {
c000333a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000333d:	3b 45 10             	cmp    0x10(%ebp),%eax
c0003340:	72 d7                	jb     c0003319 <vaddr_remove+0x34>
/work/x86_os_my/kernel/memory.c:446
		bit_idx_start = (vaddr - cur_thread->userprog_vaddr.vaddr_start) / PG_SIZE;
		while(cnt < pg_cnt) {
			bitmap_set(&cur_thread->userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
		}
	}
}
c0003342:	eb 48                	jmp    c000338c <vaddr_remove+0xa7>
/work/x86_os_my/kernel/memory.c:440
		bit_idx_start = (vaddr - kernel_vaddr.vaddr_start) / PG_SIZE;
		while(cnt < pg_cnt) {
			bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
		}
	} else {	// 用户虚拟内存池
		struct task_struct* cur_thread = running_thread();
c0003344:	e8 b8 0a 00 00       	call   c0003e01 <running_thread>
c0003349:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:441
		bit_idx_start = (vaddr - cur_thread->userprog_vaddr.vaddr_start) / PG_SIZE;
c000334c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000334f:	8b 40 60             	mov    0x60(%eax),%eax
c0003352:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0003355:	29 c2                	sub    %eax,%edx
c0003357:	89 d0                	mov    %edx,%eax
c0003359:	c1 e8 0c             	shr    $0xc,%eax
c000335c:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:442
		while(cnt < pg_cnt) {
c000335f:	eb 23                	jmp    c0003384 <vaddr_remove+0x9f>
/work/x86_os_my/kernel/memory.c:443
			bitmap_set(&cur_thread->userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
c0003361:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003364:	8d 50 01             	lea    0x1(%eax),%edx
c0003367:	89 55 f4             	mov    %edx,-0xc(%ebp)
c000336a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000336d:	01 c2                	add    %eax,%edx
c000336f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0003372:	83 c0 58             	add    $0x58,%eax
c0003375:	83 ec 04             	sub    $0x4,%esp
c0003378:	6a 00                	push   $0x0
c000337a:	52                   	push   %edx
c000337b:	50                   	push   %eax
c000337c:	e8 ef f4 ff ff       	call   c0002870 <bitmap_set>
c0003381:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:442
			bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
		}
	} else {	// 用户虚拟内存池
		struct task_struct* cur_thread = running_thread();
		bit_idx_start = (vaddr - cur_thread->userprog_vaddr.vaddr_start) / PG_SIZE;
		while(cnt < pg_cnt) {
c0003384:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003387:	3b 45 10             	cmp    0x10(%ebp),%eax
c000338a:	72 d5                	jb     c0003361 <vaddr_remove+0x7c>
/work/x86_os_my/kernel/memory.c:446
			bitmap_set(&cur_thread->userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
		}
	}
}
c000338c:	90                   	nop
c000338d:	c9                   	leave  
c000338e:	c3                   	ret    

c000338f <mfree_page>:
mfree_page():
/work/x86_os_my/kernel/memory.c:449

/* 释放以虚拟地址vaddr为起始的cnt个物理页框 */
void mfree_page(enum pool_flags pf, void* _vaddr, uint32_t pg_cnt) {
c000338f:	55                   	push   %ebp
c0003390:	89 e5                	mov    %esp,%ebp
c0003392:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:451
	uint32_t pg_phy_addr;
	uint32_t vaddr = (int32_t)_vaddr, page_cnt = 0;
c0003395:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003398:	89 45 f4             	mov    %eax,-0xc(%ebp)
c000339b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:452
	ASSERT(pg_cnt >=1 && vaddr % PG_SIZE == 0);
c00033a2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c00033a6:	74 0c                	je     c00033b4 <mfree_page+0x25>
/work/x86_os_my/kernel/memory.c:452 (discriminator 1)
c00033a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00033ab:	25 ff 0f 00 00       	and    $0xfff,%eax
c00033b0:	85 c0                	test   %eax,%eax
c00033b2:	74 1c                	je     c00033d0 <mfree_page+0x41>
/work/x86_os_my/kernel/memory.c:452 (discriminator 3)
c00033b4:	68 68 8a 00 c0       	push   $0xc0008a68
c00033b9:	68 04 8d 00 c0       	push   $0xc0008d04
c00033be:	68 c4 01 00 00       	push   $0x1c4
c00033c3:	68 8b 89 00 c0       	push   $0xc000898b
c00033c8:	e8 35 f2 ff ff       	call   c0002602 <panic_spin>
c00033cd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:453
	pg_phy_addr = addr_v2p(vaddr);
c00033d0:	83 ec 0c             	sub    $0xc,%esp
c00033d3:	ff 75 f4             	pushl  -0xc(%ebp)
c00033d6:	e8 f5 fa ff ff       	call   c0002ed0 <addr_v2p>
c00033db:	83 c4 10             	add    $0x10,%esp
c00033de:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:456

	/* 确保待释放的物理内存在低端1M+1k大小的页目录+1k大小的页表地址范围外【内核空间】 */
	ASSERT((pg_phy_addr % PG_SIZE) == 0 && pg_phy_addr >= 0x102000);
c00033e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00033e4:	25 ff 0f 00 00       	and    $0xfff,%eax
c00033e9:	85 c0                	test   %eax,%eax
c00033eb:	75 09                	jne    c00033f6 <mfree_page+0x67>
/work/x86_os_my/kernel/memory.c:456 (discriminator 1)
c00033ed:	81 7d ec ff 1f 10 00 	cmpl   $0x101fff,-0x14(%ebp)
c00033f4:	77 1c                	ja     c0003412 <mfree_page+0x83>
/work/x86_os_my/kernel/memory.c:456 (discriminator 3)
c00033f6:	68 8c 8a 00 c0       	push   $0xc0008a8c
c00033fb:	68 04 8d 00 c0       	push   $0xc0008d04
c0003400:	68 c8 01 00 00       	push   $0x1c8
c0003405:	68 8b 89 00 c0       	push   $0xc000898b
c000340a:	e8 f3 f1 ff ff       	call   c0002602 <panic_spin>
c000340f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:460

	/* 判断pg_phy_addr属于用户物理内存池还是内核物理内存池 */
	/* 位于user_pool内存池 */
	if (pg_phy_addr >= user_pool.phy_addr_start) {
c0003412:	a1 e8 cb 00 c0       	mov    0xc000cbe8,%eax
c0003417:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c000341a:	0f 87 94 00 00 00    	ja     c00034b4 <mfree_page+0x125>
/work/x86_os_my/kernel/memory.c:461
		vaddr -= PG_SIZE;
c0003420:	81 6d f4 00 10 00 00 	subl   $0x1000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:462
		while (page_cnt < pg_cnt) {
c0003427:	eb 6a                	jmp    c0003493 <mfree_page+0x104>
/work/x86_os_my/kernel/memory.c:463
			vaddr += PG_SIZE;
c0003429:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:464
			pg_phy_addr = addr_v2p(vaddr);
c0003430:	83 ec 0c             	sub    $0xc,%esp
c0003433:	ff 75 f4             	pushl  -0xc(%ebp)
c0003436:	e8 95 fa ff ff       	call   c0002ed0 <addr_v2p>
c000343b:	83 c4 10             	add    $0x10,%esp
c000343e:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:467

			/* 确保物理地址属于用户物理内存池 */
			ASSERT((pg_phy_addr % PG_SIZE) == 0 && pg_phy_addr >= user_pool.phy_addr_start);
c0003441:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0003444:	25 ff 0f 00 00       	and    $0xfff,%eax
c0003449:	85 c0                	test   %eax,%eax
c000344b:	75 0a                	jne    c0003457 <mfree_page+0xc8>
/work/x86_os_my/kernel/memory.c:467 (discriminator 1)
c000344d:	a1 e8 cb 00 c0       	mov    0xc000cbe8,%eax
c0003452:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0003455:	76 1c                	jbe    c0003473 <mfree_page+0xe4>
/work/x86_os_my/kernel/memory.c:467 (discriminator 3)
c0003457:	68 c4 8a 00 c0       	push   $0xc0008ac4
c000345c:	68 04 8d 00 c0       	push   $0xc0008d04
c0003461:	68 d3 01 00 00       	push   $0x1d3
c0003466:	68 8b 89 00 c0       	push   $0xc000898b
c000346b:	e8 92 f1 ff ff       	call   c0002602 <panic_spin>
c0003470:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:470

			/* 先将对应的物理页框归还到内存池 */
			pfree(pg_phy_addr);
c0003473:	83 ec 0c             	sub    $0xc,%esp
c0003476:	ff 75 ec             	pushl  -0x14(%ebp)
c0003479:	e8 da fd ff ff       	call   c0003258 <pfree>
c000347e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:473

			/* 再从页表中清除此虚拟地址所在的页表项pte */
			page_table_pte_remove(vaddr);
c0003481:	83 ec 0c             	sub    $0xc,%esp
c0003484:	ff 75 f4             	pushl  -0xc(%ebp)
c0003487:	e8 2e fe ff ff       	call   c00032ba <page_table_pte_remove>
c000348c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:475

			page_cnt++;
c000348f:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:462

	/* 判断pg_phy_addr属于用户物理内存池还是内核物理内存池 */
	/* 位于user_pool内存池 */
	if (pg_phy_addr >= user_pool.phy_addr_start) {
		vaddr -= PG_SIZE;
		while (page_cnt < pg_cnt) {
c0003493:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003496:	3b 45 10             	cmp    0x10(%ebp),%eax
c0003499:	72 8e                	jb     c0003429 <mfree_page+0x9a>
/work/x86_os_my/kernel/memory.c:478
			page_table_pte_remove(vaddr);

			page_cnt++;
		}
		/* 清空虚拟地址的位图中的相应位 */
		vaddr_remove(pf, _vaddr, pg_cnt);
c000349b:	83 ec 04             	sub    $0x4,%esp
c000349e:	ff 75 10             	pushl  0x10(%ebp)
c00034a1:	ff 75 0c             	pushl  0xc(%ebp)
c00034a4:	ff 75 08             	pushl  0x8(%ebp)
c00034a7:	e8 39 fe ff ff       	call   c00032e5 <vaddr_remove>
c00034ac:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:502
			page_cnt++;
		}
		/* 清空虚拟地址的位图中的相应位 */
		vaddr_remove(pf, _vaddr, pg_cnt);
	}
}
c00034af:	e9 99 00 00 00       	jmp    c000354d <mfree_page+0x1be>
/work/x86_os_my/kernel/memory.c:482
		/* 清空虚拟地址的位图中的相应位 */
		vaddr_remove(pf, _vaddr, pg_cnt);

	} else {
		/* 位于kernel_pool内存池 */
		vaddr -= PG_SIZE;
c00034b4:	81 6d f4 00 10 00 00 	subl   $0x1000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:483
		while (page_cnt < pg_cnt) {
c00034bb:	eb 74                	jmp    c0003531 <mfree_page+0x1a2>
/work/x86_os_my/kernel/memory.c:484
			vaddr += PG_SIZE;
c00034bd:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:485
			pg_phy_addr = addr_v2p(vaddr);
c00034c4:	83 ec 0c             	sub    $0xc,%esp
c00034c7:	ff 75 f4             	pushl  -0xc(%ebp)
c00034ca:	e8 01 fa ff ff       	call   c0002ed0 <addr_v2p>
c00034cf:	83 c4 10             	add    $0x10,%esp
c00034d2:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:488

			/* 确保待释放的物理内存只属于内核物理内存池 */
			ASSERT((pg_phy_addr % PG_SIZE) == 0 && pg_phy_addr >= kernel_pool.phy_addr_start && \
c00034d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00034d8:	25 ff 0f 00 00       	and    $0xfff,%eax
c00034dd:	85 c0                	test   %eax,%eax
c00034df:	75 14                	jne    c00034f5 <mfree_page+0x166>
/work/x86_os_my/kernel/memory.c:488 (discriminator 1)
c00034e1:	a1 e8 cc 00 c0       	mov    0xc000cce8,%eax
c00034e6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c00034e9:	77 0a                	ja     c00034f5 <mfree_page+0x166>
/work/x86_os_my/kernel/memory.c:488 (discriminator 3)
c00034eb:	a1 e8 cb 00 c0       	mov    0xc000cbe8,%eax
c00034f0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c00034f3:	77 1c                	ja     c0003511 <mfree_page+0x182>
/work/x86_os_my/kernel/memory.c:488 (discriminator 5)
c00034f5:	68 0c 8b 00 c0       	push   $0xc0008b0c
c00034fa:	68 04 8d 00 c0       	push   $0xc0008d04
c00034ff:	68 e9 01 00 00       	push   $0x1e9
c0003504:	68 8b 89 00 c0       	push   $0xc000898b
c0003509:	e8 f4 f0 ff ff       	call   c0002602 <panic_spin>
c000350e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:492
					pg_phy_addr < user_pool.phy_addr_start);

			/* 先将对应的物理页框归还到内存池 */
			pfree(pg_phy_addr);
c0003511:	83 ec 0c             	sub    $0xc,%esp
c0003514:	ff 75 ec             	pushl  -0x14(%ebp)
c0003517:	e8 3c fd ff ff       	call   c0003258 <pfree>
c000351c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:495

			/* 再从页表中清除此虚拟地址所在的页表项pte */
			page_table_pte_remove(vaddr);
c000351f:	83 ec 0c             	sub    $0xc,%esp
c0003522:	ff 75 f4             	pushl  -0xc(%ebp)
c0003525:	e8 90 fd ff ff       	call   c00032ba <page_table_pte_remove>
c000352a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:497

			page_cnt++;
c000352d:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:483
		vaddr_remove(pf, _vaddr, pg_cnt);

	} else {
		/* 位于kernel_pool内存池 */
		vaddr -= PG_SIZE;
		while (page_cnt < pg_cnt) {
c0003531:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003534:	3b 45 10             	cmp    0x10(%ebp),%eax
c0003537:	72 84                	jb     c00034bd <mfree_page+0x12e>
/work/x86_os_my/kernel/memory.c:500
			page_table_pte_remove(vaddr);

			page_cnt++;
		}
		/* 清空虚拟地址的位图中的相应位 */
		vaddr_remove(pf, _vaddr, pg_cnt);
c0003539:	83 ec 04             	sub    $0x4,%esp
c000353c:	ff 75 10             	pushl  0x10(%ebp)
c000353f:	ff 75 0c             	pushl  0xc(%ebp)
c0003542:	ff 75 08             	pushl  0x8(%ebp)
c0003545:	e8 9b fd ff ff       	call   c00032e5 <vaddr_remove>
c000354a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:502
	}
}
c000354d:	90                   	nop
c000354e:	c9                   	leave  
c000354f:	c3                   	ret    

c0003550 <sys_free>:
sys_free():
/work/x86_os_my/kernel/memory.c:505

/* 回收内存ptr */
void sys_free(void* ptr) {
c0003550:	55                   	push   %ebp
c0003551:	89 e5                	mov    %esp,%ebp
c0003553:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/kernel/memory.c:506
	ASSERT(ptr != NULL);
c0003556:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c000355a:	75 1c                	jne    c0003578 <sys_free+0x28>
/work/x86_os_my/kernel/memory.c:506 (discriminator 1)
c000355c:	68 80 8b 00 c0       	push   $0xc0008b80
c0003561:	68 10 8d 00 c0       	push   $0xc0008d10
c0003566:	68 fa 01 00 00       	push   $0x1fa
c000356b:	68 8b 89 00 c0       	push   $0xc000898b
c0003570:	e8 8d f0 ff ff       	call   c0002602 <panic_spin>
c0003575:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:507
	if (ptr != NULL) {
c0003578:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c000357c:	0f 84 b2 01 00 00    	je     c0003734 <sys_free+0x1e4>
/work/x86_os_my/kernel/memory.c:512
		enum pool_flags PF;
		struct pool* mem_pool;

		/* 判断是线程还是进程 */
		if (running_thread()->pgdir == NULL) {
c0003582:	e8 7a 08 00 00       	call   c0003e01 <running_thread>
c0003587:	8b 40 54             	mov    0x54(%eax),%eax
c000358a:	85 c0                	test   %eax,%eax
c000358c:	75 36                	jne    c00035c4 <sys_free+0x74>
/work/x86_os_my/kernel/memory.c:513
			ASSERT((uint32_t)ptr >= K_HEAP_START);
c000358e:	8b 45 08             	mov    0x8(%ebp),%eax
c0003591:	3d ff ff 0f c0       	cmp    $0xc00fffff,%eax
c0003596:	77 1c                	ja     c00035b4 <sys_free+0x64>
/work/x86_os_my/kernel/memory.c:513 (discriminator 1)
c0003598:	68 8c 8b 00 c0       	push   $0xc0008b8c
c000359d:	68 10 8d 00 c0       	push   $0xc0008d10
c00035a2:	68 01 02 00 00       	push   $0x201
c00035a7:	68 8b 89 00 c0       	push   $0xc000898b
c00035ac:	e8 51 f0 ff ff       	call   c0002602 <panic_spin>
c00035b1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:514
			PF = PF_KERNEL;
c00035b4:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:515
			mem_pool = &kernel_pool;
c00035bb:	c7 45 f0 e0 cc 00 c0 	movl   $0xc000cce0,-0x10(%ebp)
c00035c2:	eb 0e                	jmp    c00035d2 <sys_free+0x82>
/work/x86_os_my/kernel/memory.c:517
		} else {
			PF = PF_USER;
c00035c4:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:518
			mem_pool = &user_pool;
c00035cb:	c7 45 f0 e0 cb 00 c0 	movl   $0xc000cbe0,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:521
		}

		lock_acquire(&mem_pool->lock);
c00035d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00035d5:	83 c0 10             	add    $0x10,%eax
c00035d8:	83 ec 0c             	sub    $0xc,%esp
c00035db:	50                   	push   %eax
c00035dc:	e8 be 13 00 00       	call   c000499f <lock_acquire>
c00035e1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:522
		struct mem_block* b = ptr;
c00035e4:	8b 45 08             	mov    0x8(%ebp),%eax
c00035e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:523
		struct arena* a = block2arena(b);			// 把mem_block转换成arena,获取元信息
c00035ea:	83 ec 0c             	sub    $0xc,%esp
c00035ed:	ff 75 e8             	pushl  -0x18(%ebp)
c00035f0:	e8 21 f9 ff ff       	call   c0002f16 <block2arena>
c00035f5:	83 c4 10             	add    $0x10,%esp
c00035f8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/kernel/memory.c:524
		ASSERT(a->large == 0 || a->large == 1);
c00035fb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00035fe:	8b 40 08             	mov    0x8(%eax),%eax
c0003601:	85 c0                	test   %eax,%eax
c0003603:	74 27                	je     c000362c <sys_free+0xdc>
/work/x86_os_my/kernel/memory.c:524 (discriminator 1)
c0003605:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0003608:	8b 40 08             	mov    0x8(%eax),%eax
c000360b:	83 f8 01             	cmp    $0x1,%eax
c000360e:	74 1c                	je     c000362c <sys_free+0xdc>
/work/x86_os_my/kernel/memory.c:524 (discriminator 2)
c0003610:	68 ac 8b 00 c0       	push   $0xc0008bac
c0003615:	68 10 8d 00 c0       	push   $0xc0008d10
c000361a:	68 0c 02 00 00       	push   $0x20c
c000361f:	68 8b 89 00 c0       	push   $0xc000898b
c0003624:	e8 d9 ef ff ff       	call   c0002602 <panic_spin>
c0003629:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:525
		if (a->desc == NULL && a->large == true) {	// 大于1024的内存
c000362c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000362f:	8b 00                	mov    (%eax),%eax
c0003631:	85 c0                	test   %eax,%eax
c0003633:	75 28                	jne    c000365d <sys_free+0x10d>
/work/x86_os_my/kernel/memory.c:525 (discriminator 1)
c0003635:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0003638:	8b 40 08             	mov    0x8(%eax),%eax
c000363b:	83 f8 01             	cmp    $0x1,%eax
c000363e:	75 1d                	jne    c000365d <sys_free+0x10d>
/work/x86_os_my/kernel/memory.c:526
			mfree_page(PF, a, a->cnt);
c0003640:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0003643:	8b 40 04             	mov    0x4(%eax),%eax
c0003646:	83 ec 04             	sub    $0x4,%esp
c0003649:	50                   	push   %eax
c000364a:	ff 75 e4             	pushl  -0x1c(%ebp)
c000364d:	ff 75 f4             	pushl  -0xc(%ebp)
c0003650:	e8 3a fd ff ff       	call   c000338f <mfree_page>
c0003655:	83 c4 10             	add    $0x10,%esp
c0003658:	e9 c5 00 00 00       	jmp    c0003722 <sys_free+0x1d2>
/work/x86_os_my/kernel/memory.c:530
		} else {									// 小于等于1024的内存块
			/* 先将内存块回收到free_list */
			// &b->free_elem == &b
			list_append(&a->desc->free_list, &b->free_elem);
c000365d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0003660:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0003663:	8b 12                	mov    (%edx),%edx
c0003665:	83 c2 08             	add    $0x8,%edx
c0003668:	83 ec 08             	sub    $0x8,%esp
c000366b:	50                   	push   %eax
c000366c:	52                   	push   %edx
c000366d:	e8 f7 0e 00 00       	call   c0004569 <list_append>
c0003672:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:533

			/* 再判断此arena中的内存块是否都是空闲,如果是就释放arena */
			if (++a->cnt == a->desc->blocks_per_arena) {
c0003675:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0003678:	8b 40 04             	mov    0x4(%eax),%eax
c000367b:	8d 50 01             	lea    0x1(%eax),%edx
c000367e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0003681:	89 50 04             	mov    %edx,0x4(%eax)
c0003684:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0003687:	8b 50 04             	mov    0x4(%eax),%edx
c000368a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000368d:	8b 00                	mov    (%eax),%eax
c000368f:	8b 40 04             	mov    0x4(%eax),%eax
c0003692:	39 c2                	cmp    %eax,%edx
c0003694:	0f 85 88 00 00 00    	jne    c0003722 <sys_free+0x1d2>
/work/x86_os_my/kernel/memory.c:535
				uint32_t block_idx;
				for (block_idx = 0; block_idx < a->desc->blocks_per_arena; block_idx++) {
c000369a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c00036a1:	eb 5f                	jmp    c0003702 <sys_free+0x1b2>
/work/x86_os_my/kernel/memory.c:536
					struct mem_block*  b = arena2block(a, block_idx);
c00036a3:	83 ec 08             	sub    $0x8,%esp
c00036a6:	ff 75 ec             	pushl  -0x14(%ebp)
c00036a9:	ff 75 e4             	pushl  -0x1c(%ebp)
c00036ac:	e8 4b f8 ff ff       	call   c0002efc <arena2block>
c00036b1:	83 c4 10             	add    $0x10,%esp
c00036b4:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/kernel/memory.c:537
					ASSERT(elem_find(&a->desc->free_list, &b->free_elem));
c00036b7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00036ba:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c00036bd:	8b 12                	mov    (%edx),%edx
c00036bf:	83 c2 08             	add    $0x8,%edx
c00036c2:	83 ec 08             	sub    $0x8,%esp
c00036c5:	50                   	push   %eax
c00036c6:	52                   	push   %edx
c00036c7:	e8 17 0f 00 00       	call   c00045e3 <elem_find>
c00036cc:	83 c4 10             	add    $0x10,%esp
c00036cf:	85 c0                	test   %eax,%eax
c00036d1:	75 1c                	jne    c00036ef <sys_free+0x19f>
/work/x86_os_my/kernel/memory.c:537 (discriminator 1)
c00036d3:	68 cc 8b 00 c0       	push   $0xc0008bcc
c00036d8:	68 10 8d 00 c0       	push   $0xc0008d10
c00036dd:	68 19 02 00 00       	push   $0x219
c00036e2:	68 8b 89 00 c0       	push   $0xc000898b
c00036e7:	e8 16 ef ff ff       	call   c0002602 <panic_spin>
c00036ec:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:538 (discriminator 2)
					list_remove(&b->free_elem);
c00036ef:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00036f2:	83 ec 0c             	sub    $0xc,%esp
c00036f5:	50                   	push   %eax
c00036f6:	e8 8c 0e 00 00       	call   c0004587 <list_remove>
c00036fb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:535 (discriminator 2)
			list_append(&a->desc->free_list, &b->free_elem);

			/* 再判断此arena中的内存块是否都是空闲,如果是就释放arena */
			if (++a->cnt == a->desc->blocks_per_arena) {
				uint32_t block_idx;
				for (block_idx = 0; block_idx < a->desc->blocks_per_arena; block_idx++) {
c00036fe:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:535 (discriminator 1)
c0003702:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0003705:	8b 00                	mov    (%eax),%eax
c0003707:	8b 40 04             	mov    0x4(%eax),%eax
c000370a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c000370d:	77 94                	ja     c00036a3 <sys_free+0x153>
/work/x86_os_my/kernel/memory.c:540
					struct mem_block*  b = arena2block(a, block_idx);
					ASSERT(elem_find(&a->desc->free_list, &b->free_elem));
					list_remove(&b->free_elem);
				}
				mfree_page(PF, a, 1);
c000370f:	83 ec 04             	sub    $0x4,%esp
c0003712:	6a 01                	push   $0x1
c0003714:	ff 75 e4             	pushl  -0x1c(%ebp)
c0003717:	ff 75 f4             	pushl  -0xc(%ebp)
c000371a:	e8 70 fc ff ff       	call   c000338f <mfree_page>
c000371f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:543
			}
		}
		lock_release(&mem_pool->lock);
c0003722:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003725:	83 c0 10             	add    $0x10,%eax
c0003728:	83 ec 0c             	sub    $0xc,%esp
c000372b:	50                   	push   %eax
c000372c:	e8 e5 12 00 00       	call   c0004a16 <lock_release>
c0003731:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:545
	}
}
c0003734:	90                   	nop
c0003735:	c9                   	leave  
c0003736:	c3                   	ret    

c0003737 <mem_pool_init>:
mem_pool_init():
/work/x86_os_my/kernel/memory.c:548

/* 初始化内存池 */
static void mem_pool_init(uint32_t all_mem) {
c0003737:	55                   	push   %ebp
c0003738:	89 e5                	mov    %esp,%ebp
c000373a:	83 ec 38             	sub    $0x38,%esp
/work/x86_os_my/kernel/memory.c:549
	put_str("   mem_pool_init start\n");
c000373d:	83 ec 0c             	sub    $0xc,%esp
c0003740:	68 fa 8b 00 c0       	push   $0xc0008bfa
c0003745:	e8 46 ed ff ff       	call   c0002490 <put_str>
c000374a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:550
	uint32_t page_table_size = PG_SIZE * 256;		// 页表大小= 1页的页目录表+第0和第768个页目录项指向同一个页表+
c000374d:	c7 45 f4 00 00 10 00 	movl   $0x100000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:552
													// 第769~1022个页目录项共指向254个页表,共256个页框
	uint32_t used_mem = page_table_size + 0x100000;	// 0x100000为低端1M内存
c0003754:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003757:	05 00 00 10 00       	add    $0x100000,%eax
c000375c:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:553
	uint32_t free_mem = all_mem - used_mem;
c000375f:	8b 45 08             	mov    0x8(%ebp),%eax
c0003762:	2b 45 f0             	sub    -0x10(%ebp),%eax
c0003765:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:554
	uint16_t all_free_pages = free_mem / PG_SIZE;	// 1页为4k,不管总内存是不是4k的倍数,
c0003768:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000376b:	c1 e8 0c             	shr    $0xc,%eax
c000376e:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
/work/x86_os_my/kernel/memory.c:556
													// 对于以页为单位的内存分配策略，不足1页的内存不用考虑了。
	uint16_t kernel_free_pages = all_free_pages / 2;
c0003772:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0003776:	66 d1 e8             	shr    %ax
c0003779:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:557
	uint16_t user_free_pages = all_free_pages - kernel_free_pages;
c000377d:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0003781:	66 2b 45 e8          	sub    -0x18(%ebp),%ax
c0003785:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
/work/x86_os_my/kernel/memory.c:561

	/* 为简化位图操作，余数不处理，坏处是这样做会丢内存。
	好处是不用做内存的越界检查,因为位图表示的内存少于实际物理内存*/
	uint32_t kbm_length = kernel_free_pages / 8;	// Kernel BitMap的长度,位图中的一位表示一页,以字节为单位
c0003789:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
c000378d:	66 c1 e8 03          	shr    $0x3,%ax
c0003791:	0f b7 c0             	movzwl %ax,%eax
c0003794:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/kernel/memory.c:562
	uint32_t ubm_length = user_free_pages / 8;		// User BitMap的长度.
c0003797:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c000379b:	66 c1 e8 03          	shr    $0x3,%ax
c000379f:	0f b7 c0             	movzwl %ax,%eax
c00037a2:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/kernel/memory.c:564

	uint32_t kp_start = used_mem;								// Kernel Pool start,内核内存池的起始地址
c00037a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00037a8:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/kernel/memory.c:565
	uint32_t up_start = kp_start + kernel_free_pages * PG_SIZE;	// User Pool start,用户内存池的起始地址
c00037ab:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
c00037af:	c1 e0 0c             	shl    $0xc,%eax
c00037b2:	89 c2                	mov    %eax,%edx
c00037b4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c00037b7:	01 d0                	add    %edx,%eax
c00037b9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/kernel/memory.c:567

	kernel_pool.phy_addr_start = kp_start;
c00037bc:	8b 45 d8             	mov    -0x28(%ebp),%eax
c00037bf:	a3 e8 cc 00 c0       	mov    %eax,0xc000cce8
/work/x86_os_my/kernel/memory.c:568
	user_pool.phy_addr_start   = up_start;
c00037c4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c00037c7:	a3 e8 cb 00 c0       	mov    %eax,0xc000cbe8
/work/x86_os_my/kernel/memory.c:570

	kernel_pool.pool_size = kernel_free_pages * PG_SIZE;
c00037cc:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
c00037d0:	c1 e0 0c             	shl    $0xc,%eax
c00037d3:	a3 ec cc 00 c0       	mov    %eax,0xc000ccec
/work/x86_os_my/kernel/memory.c:571
	user_pool.pool_size	 = user_free_pages * PG_SIZE;
c00037d8:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c00037dc:	c1 e0 0c             	shl    $0xc,%eax
c00037df:	a3 ec cb 00 c0       	mov    %eax,0xc000cbec
/work/x86_os_my/kernel/memory.c:573

	kernel_pool.pool_bitmap.btmp_bytes_len = kbm_length;
c00037e4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00037e7:	a3 e0 cc 00 c0       	mov    %eax,0xc000cce0
/work/x86_os_my/kernel/memory.c:574
	user_pool.pool_bitmap.btmp_bytes_len	  = ubm_length;
c00037ec:	8b 45 dc             	mov    -0x24(%ebp),%eax
c00037ef:	a3 e0 cb 00 c0       	mov    %eax,0xc000cbe0
/work/x86_os_my/kernel/memory.c:583
	*	而我们需要根据总内存大小在运行时，计算出位图的数组需要多少字节。
	*   所以改为指定一块内存来生成位图.
	*   ************************************************/
	// 内核使用的最高地址是0xc009f000,这是主线程的栈地址.(内核的大小预计为70K左右)
	// 32M内存占用的位图是2k.内核内存池的位图先定在MEM_BITMAP_BASE(0xc009a000)处.
	kernel_pool.pool_bitmap.bits = (void*)MEM_BITMAP_BASE;
c00037f4:	c7 05 e4 cc 00 c0 00 	movl   $0xc009a000,0xc000cce4
c00037fb:	a0 09 c0 
/work/x86_os_my/kernel/memory.c:585
	/* 用户内存池的位图紧跟在内核内存池位图之后 */
	user_pool.pool_bitmap.bits = (void*)(MEM_BITMAP_BASE + kbm_length);
c00037fe:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0003801:	2d 00 60 f6 3f       	sub    $0x3ff66000,%eax
c0003806:	a3 e4 cb 00 c0       	mov    %eax,0xc000cbe4
/work/x86_os_my/kernel/memory.c:588
	
	/******************** 输出内存池信息 **********************/
	put_str("      kernel_pool_bitmap_start:");put_int((int)kernel_pool.pool_bitmap.bits);
c000380b:	83 ec 0c             	sub    $0xc,%esp
c000380e:	68 14 8c 00 c0       	push   $0xc0008c14
c0003813:	e8 78 ec ff ff       	call   c0002490 <put_str>
c0003818:	83 c4 10             	add    $0x10,%esp
c000381b:	a1 e4 cc 00 c0       	mov    0xc000cce4,%eax
c0003820:	83 ec 0c             	sub    $0xc,%esp
c0003823:	50                   	push   %eax
c0003824:	e8 52 ed ff ff       	call   c000257b <put_int>
c0003829:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:589
	put_str(" kernel_pool_phy_addr_start:");put_int(kernel_pool.phy_addr_start);
c000382c:	83 ec 0c             	sub    $0xc,%esp
c000382f:	68 34 8c 00 c0       	push   $0xc0008c34
c0003834:	e8 57 ec ff ff       	call   c0002490 <put_str>
c0003839:	83 c4 10             	add    $0x10,%esp
c000383c:	a1 e8 cc 00 c0       	mov    0xc000cce8,%eax
c0003841:	83 ec 0c             	sub    $0xc,%esp
c0003844:	50                   	push   %eax
c0003845:	e8 31 ed ff ff       	call   c000257b <put_int>
c000384a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:590
	put_str("\n");
c000384d:	83 ec 0c             	sub    $0xc,%esp
c0003850:	68 51 8c 00 c0       	push   $0xc0008c51
c0003855:	e8 36 ec ff ff       	call   c0002490 <put_str>
c000385a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:591
	put_str("      user_pool_bitmap_start:");put_int((int)user_pool.pool_bitmap.bits);
c000385d:	83 ec 0c             	sub    $0xc,%esp
c0003860:	68 53 8c 00 c0       	push   $0xc0008c53
c0003865:	e8 26 ec ff ff       	call   c0002490 <put_str>
c000386a:	83 c4 10             	add    $0x10,%esp
c000386d:	a1 e4 cb 00 c0       	mov    0xc000cbe4,%eax
c0003872:	83 ec 0c             	sub    $0xc,%esp
c0003875:	50                   	push   %eax
c0003876:	e8 00 ed ff ff       	call   c000257b <put_int>
c000387b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:592
	put_str(" user_pool_phy_addr_start:");put_int(user_pool.phy_addr_start);
c000387e:	83 ec 0c             	sub    $0xc,%esp
c0003881:	68 71 8c 00 c0       	push   $0xc0008c71
c0003886:	e8 05 ec ff ff       	call   c0002490 <put_str>
c000388b:	83 c4 10             	add    $0x10,%esp
c000388e:	a1 e8 cb 00 c0       	mov    0xc000cbe8,%eax
c0003893:	83 ec 0c             	sub    $0xc,%esp
c0003896:	50                   	push   %eax
c0003897:	e8 df ec ff ff       	call   c000257b <put_int>
c000389c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:593
	put_str("\n");
c000389f:	83 ec 0c             	sub    $0xc,%esp
c00038a2:	68 51 8c 00 c0       	push   $0xc0008c51
c00038a7:	e8 e4 eb ff ff       	call   c0002490 <put_str>
c00038ac:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:596

	/* 将位图置0*/
	bitmap_init(&kernel_pool.pool_bitmap);
c00038af:	83 ec 0c             	sub    $0xc,%esp
c00038b2:	68 e0 cc 00 c0       	push   $0xc000cce0
c00038b7:	e8 1c ee ff ff       	call   c00026d8 <bitmap_init>
c00038bc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:597
	bitmap_init(&user_pool.pool_bitmap);
c00038bf:	83 ec 0c             	sub    $0xc,%esp
c00038c2:	68 e0 cb 00 c0       	push   $0xc000cbe0
c00038c7:	e8 0c ee ff ff       	call   c00026d8 <bitmap_init>
c00038cc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:599

	lock_init(&kernel_pool.lock);
c00038cf:	83 ec 0c             	sub    $0xc,%esp
c00038d2:	68 f0 cc 00 c0       	push   $0xc000ccf0
c00038d7:	e8 e9 0e 00 00       	call   c00047c5 <lock_init>
c00038dc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:600
	lock_init(&user_pool.lock);
c00038df:	83 ec 0c             	sub    $0xc,%esp
c00038e2:	68 f0 cb 00 c0       	push   $0xc000cbf0
c00038e7:	e8 d9 0e 00 00       	call   c00047c5 <lock_init>
c00038ec:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:604
	
	/* 下面初始化内核虚拟地址的位图(bp_len + bits数组),按实际物理内存大小生成数组。*/
	// 用于维护内核堆的虚拟地址,所以要和内核内存池大小一致
	kernel_vaddr.vaddr_bitmap.btmp_bytes_len = kbm_length;
c00038ef:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00038f2:	a3 c8 cc 00 c0       	mov    %eax,0xc000ccc8
/work/x86_os_my/kernel/memory.c:606
	/* 位图的数组指向一块未使用的内存,目前定位在内核内存池和用户内存池之外*/
	kernel_vaddr.vaddr_bitmap.bits = (void*)(MEM_BITMAP_BASE + kbm_length + ubm_length);
c00038f7:	8b 55 e0             	mov    -0x20(%ebp),%edx
c00038fa:	8b 45 dc             	mov    -0x24(%ebp),%eax
c00038fd:	01 d0                	add    %edx,%eax
c00038ff:	2d 00 60 f6 3f       	sub    $0x3ff66000,%eax
c0003904:	a3 cc cc 00 c0       	mov    %eax,0xc000cccc
/work/x86_os_my/kernel/memory.c:608

	kernel_vaddr.vaddr_start = K_HEAP_START;
c0003909:	c7 05 d0 cc 00 c0 00 	movl   $0xc0100000,0xc000ccd0
c0003910:	00 10 c0 
/work/x86_os_my/kernel/memory.c:609
	bitmap_init(&kernel_vaddr.vaddr_bitmap);
c0003913:	83 ec 0c             	sub    $0xc,%esp
c0003916:	68 c8 cc 00 c0       	push   $0xc000ccc8
c000391b:	e8 b8 ed ff ff       	call   c00026d8 <bitmap_init>
c0003920:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:610
	put_str("   mem_pool_init done\n");
c0003923:	83 ec 0c             	sub    $0xc,%esp
c0003926:	68 8c 8c 00 c0       	push   $0xc0008c8c
c000392b:	e8 60 eb ff ff       	call   c0002490 <put_str>
c0003930:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:611
}
c0003933:	90                   	nop
c0003934:	c9                   	leave  
c0003935:	c3                   	ret    

c0003936 <block_desc_init>:
block_desc_init():
/work/x86_os_my/kernel/memory.c:614

/* 为malloc做准备 */
void block_desc_init(struct mem_block_desc* desc_array) {
c0003936:	55                   	push   %ebp
c0003937:	89 e5                	mov    %esp,%ebp
c0003939:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:615
   uint16_t desc_idx, block_size = 16;
c000393c:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:618

   /* 初始化每个mem_block_desc描述符 */
   for (desc_idx = 0; desc_idx < DESC_CNT; desc_idx++) {
c0003942:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c0003948:	eb 75                	jmp    c00039bf <block_desc_init+0x89>
/work/x86_os_my/kernel/memory.c:619 (discriminator 3)
      desc_array[desc_idx].block_size = block_size;
c000394a:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c000394e:	89 d0                	mov    %edx,%eax
c0003950:	01 c0                	add    %eax,%eax
c0003952:	01 d0                	add    %edx,%eax
c0003954:	c1 e0 03             	shl    $0x3,%eax
c0003957:	89 c2                	mov    %eax,%edx
c0003959:	8b 45 08             	mov    0x8(%ebp),%eax
c000395c:	01 c2                	add    %eax,%edx
c000395e:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0003962:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/kernel/memory.c:622 (discriminator 3)

      /* 初始化arena中的内存块数量【注意计算方法】 */
      desc_array[desc_idx].blocks_per_arena = (PG_SIZE - sizeof(struct arena)) / block_size;
c0003964:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0003968:	89 d0                	mov    %edx,%eax
c000396a:	01 c0                	add    %eax,%eax
c000396c:	01 d0                	add    %edx,%eax
c000396e:	c1 e0 03             	shl    $0x3,%eax
c0003971:	89 c2                	mov    %eax,%edx
c0003973:	8b 45 08             	mov    0x8(%ebp),%eax
c0003976:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
c0003979:	b8 f4 0f 00 00       	mov    $0xff4,%eax
c000397e:	ba 00 00 00 00       	mov    $0x0,%edx
c0003983:	66 f7 75 f4          	divw   -0xc(%ebp)
c0003987:	0f b7 c0             	movzwl %ax,%eax
c000398a:	89 41 04             	mov    %eax,0x4(%ecx)
/work/x86_os_my/kernel/memory.c:624 (discriminator 3)

      list_init(&desc_array[desc_idx].free_list);
c000398d:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0003991:	89 d0                	mov    %edx,%eax
c0003993:	01 c0                	add    %eax,%eax
c0003995:	01 d0                	add    %edx,%eax
c0003997:	c1 e0 03             	shl    $0x3,%eax
c000399a:	89 c2                	mov    %eax,%edx
c000399c:	8b 45 08             	mov    0x8(%ebp),%eax
c000399f:	01 d0                	add    %edx,%eax
c00039a1:	83 c0 08             	add    $0x8,%eax
c00039a4:	83 ec 0c             	sub    $0xc,%esp
c00039a7:	50                   	push   %eax
c00039a8:	e8 2b 0b 00 00       	call   c00044d8 <list_init>
c00039ad:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:626 (discriminator 3)

      block_size *= 2;		// 下一个规格内存块！
c00039b0:	66 d1 65 f4          	shlw   -0xc(%ebp)
/work/x86_os_my/kernel/memory.c:618 (discriminator 3)
/* 为malloc做准备 */
void block_desc_init(struct mem_block_desc* desc_array) {
   uint16_t desc_idx, block_size = 16;

   /* 初始化每个mem_block_desc描述符 */
   for (desc_idx = 0; desc_idx < DESC_CNT; desc_idx++) {
c00039b4:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c00039b8:	83 c0 01             	add    $0x1,%eax
c00039bb:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
/work/x86_os_my/kernel/memory.c:618 (discriminator 1)
c00039bf:	66 83 7d f6 06       	cmpw   $0x6,-0xa(%ebp)
c00039c4:	76 84                	jbe    c000394a <block_desc_init+0x14>
/work/x86_os_my/kernel/memory.c:629
      list_init(&desc_array[desc_idx].free_list);

      block_size *= 2;		// 下一个规格内存块！
	  // 16/32/64/128/256/512/1024 总共 7 种规格
   }
}
c00039c6:	90                   	nop
c00039c7:	c9                   	leave  
c00039c8:	c3                   	ret    

c00039c9 <mem_init>:
mem_init():
/work/x86_os_my/kernel/memory.c:632

/* 内存管理部分初始化入口 */
void mem_init() {
c00039c9:	55                   	push   %ebp
c00039ca:	89 e5                	mov    %esp,%ebp
c00039cc:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:633
	put_str("mem_init start\n");
c00039cf:	83 ec 0c             	sub    $0xc,%esp
c00039d2:	68 a3 8c 00 c0       	push   $0xc0008ca3
c00039d7:	e8 b4 ea ff ff       	call   c0002490 <put_str>
c00039dc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:634
	uint32_t mem_bytes_total = (*(uint32_t*)(0xb00));	//内存总数在汇编中获取，放到了地址0xb00处。
c00039df:	b8 00 0b 00 00       	mov    $0xb00,%eax
c00039e4:	8b 00                	mov    (%eax),%eax
c00039e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:635
	mem_pool_init(mem_bytes_total);	// 初始化内存池
c00039e9:	83 ec 0c             	sub    $0xc,%esp
c00039ec:	ff 75 f4             	pushl  -0xc(%ebp)
c00039ef:	e8 43 fd ff ff       	call   c0003737 <mem_pool_init>
c00039f4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:636
	block_desc_init(k_block_descs);	// 初始化mem_block_desc数组descs,为malloc做准备
c00039f7:	83 ec 0c             	sub    $0xc,%esp
c00039fa:	68 20 cc 00 c0       	push   $0xc000cc20
c00039ff:	e8 32 ff ff ff       	call   c0003936 <block_desc_init>
c0003a04:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:637
	put_str("mem_init done\n");
c0003a07:	83 ec 0c             	sub    $0xc,%esp
c0003a0a:	68 b3 8c 00 c0       	push   $0xc0008cb3
c0003a0f:	e8 7c ea ff ff       	call   c0002490 <put_str>
c0003a14:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:638
}
c0003a17:	90                   	nop
c0003a18:	c9                   	leave  
c0003a19:	c3                   	ret    

c0003a1a <memset>:
memset():
/work/x86_os_my/lib/string.c:6
#include "string.h"
#include "global.h"
#include "debug.h"

/* 将dst_起始的size个字节置为value */
void memset(void* dst_, uint8_t value, uint32_t size) {
c0003a1a:	55                   	push   %ebp
c0003a1b:	89 e5                	mov    %esp,%ebp
c0003a1d:	83 ec 28             	sub    $0x28,%esp
c0003a20:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003a23:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/lib/string.c:7
   ASSERT(dst_ != NULL);
c0003a26:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003a2a:	75 19                	jne    c0003a45 <memset+0x2b>
/work/x86_os_my/lib/string.c:7 (discriminator 1)
c0003a2c:	68 1c 8d 00 c0       	push   $0xc0008d1c
c0003a31:	68 90 8d 00 c0       	push   $0xc0008d90
c0003a36:	6a 07                	push   $0x7
c0003a38:	68 29 8d 00 c0       	push   $0xc0008d29
c0003a3d:	e8 c0 eb ff ff       	call   c0002602 <panic_spin>
c0003a42:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:8
   uint8_t* dst = (uint8_t*)dst_;
c0003a45:	8b 45 08             	mov    0x8(%ebp),%eax
c0003a48:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:9
   while (size-- > 0)
c0003a4b:	eb 0f                	jmp    c0003a5c <memset+0x42>
/work/x86_os_my/lib/string.c:10
      *dst++ = value;
c0003a4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003a50:	8d 50 01             	lea    0x1(%eax),%edx
c0003a53:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0003a56:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c0003a5a:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/string.c:9

/* 将dst_起始的size个字节置为value */
void memset(void* dst_, uint8_t value, uint32_t size) {
   ASSERT(dst_ != NULL);
   uint8_t* dst = (uint8_t*)dst_;
   while (size-- > 0)
c0003a5c:	8b 45 10             	mov    0x10(%ebp),%eax
c0003a5f:	8d 50 ff             	lea    -0x1(%eax),%edx
c0003a62:	89 55 10             	mov    %edx,0x10(%ebp)
c0003a65:	85 c0                	test   %eax,%eax
c0003a67:	75 e4                	jne    c0003a4d <memset+0x33>
/work/x86_os_my/lib/string.c:11
      *dst++ = value;
}
c0003a69:	90                   	nop
c0003a6a:	c9                   	leave  
c0003a6b:	c3                   	ret    

c0003a6c <memcpy>:
memcpy():
/work/x86_os_my/lib/string.c:14

/* 将src_起始的size个字节复制到dst_ */
void memcpy(void* dst_, const void* src_, uint32_t size) {
c0003a6c:	55                   	push   %ebp
c0003a6d:	89 e5                	mov    %esp,%ebp
c0003a6f:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/string.c:15
   ASSERT(dst_ != NULL && src_ != NULL);
c0003a72:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003a76:	74 06                	je     c0003a7e <memcpy+0x12>
/work/x86_os_my/lib/string.c:15 (discriminator 1)
c0003a78:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0003a7c:	75 19                	jne    c0003a97 <memcpy+0x2b>
/work/x86_os_my/lib/string.c:15 (discriminator 3)
c0003a7e:	68 36 8d 00 c0       	push   $0xc0008d36
c0003a83:	68 98 8d 00 c0       	push   $0xc0008d98
c0003a88:	6a 0f                	push   $0xf
c0003a8a:	68 29 8d 00 c0       	push   $0xc0008d29
c0003a8f:	e8 6e eb ff ff       	call   c0002602 <panic_spin>
c0003a94:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:16
   uint8_t* dst = dst_;
c0003a97:	8b 45 08             	mov    0x8(%ebp),%eax
c0003a9a:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:17
   const uint8_t* src = src_;
c0003a9d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003aa0:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/string.c:18
   while (size-- > 0)
c0003aa3:	eb 17                	jmp    c0003abc <memcpy+0x50>
/work/x86_os_my/lib/string.c:19
      *dst++ = *src++;
c0003aa5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003aa8:	8d 50 01             	lea    0x1(%eax),%edx
c0003aab:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0003aae:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0003ab1:	8d 4a 01             	lea    0x1(%edx),%ecx
c0003ab4:	89 4d f0             	mov    %ecx,-0x10(%ebp)
c0003ab7:	0f b6 12             	movzbl (%edx),%edx
c0003aba:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/string.c:18
/* 将src_起始的size个字节复制到dst_ */
void memcpy(void* dst_, const void* src_, uint32_t size) {
   ASSERT(dst_ != NULL && src_ != NULL);
   uint8_t* dst = dst_;
   const uint8_t* src = src_;
   while (size-- > 0)
c0003abc:	8b 45 10             	mov    0x10(%ebp),%eax
c0003abf:	8d 50 ff             	lea    -0x1(%eax),%edx
c0003ac2:	89 55 10             	mov    %edx,0x10(%ebp)
c0003ac5:	85 c0                	test   %eax,%eax
c0003ac7:	75 dc                	jne    c0003aa5 <memcpy+0x39>
/work/x86_os_my/lib/string.c:20
      *dst++ = *src++;
}
c0003ac9:	90                   	nop
c0003aca:	c9                   	leave  
c0003acb:	c3                   	ret    

c0003acc <memcmp>:
memcmp():
/work/x86_os_my/lib/string.c:23

/* 连续比较以地址a_和地址b_开头的size个字节,若相等则返回0,若a_大于b_返回+1,否则返回-1 */
int memcmp(const void* a_, const void* b_, uint32_t size) {
c0003acc:	55                   	push   %ebp
c0003acd:	89 e5                	mov    %esp,%ebp
c0003acf:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/string.c:24
   const char* a = a_;
c0003ad2:	8b 45 08             	mov    0x8(%ebp),%eax
c0003ad5:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:25
   const char* b = b_;
c0003ad8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003adb:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/string.c:26
   ASSERT(a != NULL || b != NULL);
c0003ade:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0003ae2:	75 57                	jne    c0003b3b <memcmp+0x6f>
/work/x86_os_my/lib/string.c:26 (discriminator 1)
c0003ae4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0003ae8:	75 51                	jne    c0003b3b <memcmp+0x6f>
/work/x86_os_my/lib/string.c:26 (discriminator 2)
c0003aea:	68 53 8d 00 c0       	push   $0xc0008d53
c0003aef:	68 a0 8d 00 c0       	push   $0xc0008da0
c0003af4:	6a 1a                	push   $0x1a
c0003af6:	68 29 8d 00 c0       	push   $0xc0008d29
c0003afb:	e8 02 eb ff ff       	call   c0002602 <panic_spin>
c0003b00:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:27 (discriminator 2)
   while (size-- > 0) {
c0003b03:	eb 36                	jmp    c0003b3b <memcmp+0x6f>
/work/x86_os_my/lib/string.c:28
      if(*a != *b) {
c0003b05:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003b08:	0f b6 10             	movzbl (%eax),%edx
c0003b0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003b0e:	0f b6 00             	movzbl (%eax),%eax
c0003b11:	38 c2                	cmp    %al,%dl
c0003b13:	74 1e                	je     c0003b33 <memcmp+0x67>
/work/x86_os_my/lib/string.c:29
	 return *a > *b ? 1 : -1; 
c0003b15:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003b18:	0f b6 10             	movzbl (%eax),%edx
c0003b1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003b1e:	0f b6 00             	movzbl (%eax),%eax
c0003b21:	38 c2                	cmp    %al,%dl
c0003b23:	7e 07                	jle    c0003b2c <memcmp+0x60>
/work/x86_os_my/lib/string.c:29 (discriminator 1)
c0003b25:	b8 01 00 00 00       	mov    $0x1,%eax
c0003b2a:	eb 21                	jmp    c0003b4d <memcmp+0x81>
/work/x86_os_my/lib/string.c:29 (discriminator 2)
c0003b2c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0003b31:	eb 1a                	jmp    c0003b4d <memcmp+0x81>
/work/x86_os_my/lib/string.c:31
      }
      a++;
c0003b33:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/lib/string.c:32
      b++;
c0003b37:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/lib/string.c:27
/* 连续比较以地址a_和地址b_开头的size个字节,若相等则返回0,若a_大于b_返回+1,否则返回-1 */
int memcmp(const void* a_, const void* b_, uint32_t size) {
   const char* a = a_;
   const char* b = b_;
   ASSERT(a != NULL || b != NULL);
   while (size-- > 0) {
c0003b3b:	8b 45 10             	mov    0x10(%ebp),%eax
c0003b3e:	8d 50 ff             	lea    -0x1(%eax),%edx
c0003b41:	89 55 10             	mov    %edx,0x10(%ebp)
c0003b44:	85 c0                	test   %eax,%eax
c0003b46:	75 bd                	jne    c0003b05 <memcmp+0x39>
/work/x86_os_my/lib/string.c:34
	 return *a > *b ? 1 : -1; 
      }
      a++;
      b++;
   }
   return 0;
c0003b48:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/lib/string.c:35
}
c0003b4d:	c9                   	leave  
c0003b4e:	c3                   	ret    

c0003b4f <strcpy>:
strcpy():
/work/x86_os_my/lib/string.c:38

/* 将字符串从src_复制到dst_ */
char* strcpy(char* dst_, const char* src_) {
c0003b4f:	55                   	push   %ebp
c0003b50:	89 e5                	mov    %esp,%ebp
c0003b52:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/string.c:39
   ASSERT(dst_ != NULL && src_ != NULL);
c0003b55:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003b59:	74 06                	je     c0003b61 <strcpy+0x12>
/work/x86_os_my/lib/string.c:39 (discriminator 1)
c0003b5b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0003b5f:	75 19                	jne    c0003b7a <strcpy+0x2b>
/work/x86_os_my/lib/string.c:39 (discriminator 3)
c0003b61:	68 36 8d 00 c0       	push   $0xc0008d36
c0003b66:	68 a8 8d 00 c0       	push   $0xc0008da8
c0003b6b:	6a 27                	push   $0x27
c0003b6d:	68 29 8d 00 c0       	push   $0xc0008d29
c0003b72:	e8 8b ea ff ff       	call   c0002602 <panic_spin>
c0003b77:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:40
   char* r = dst_;		       // 用来返回目的字符串起始地址
c0003b7a:	8b 45 08             	mov    0x8(%ebp),%eax
c0003b7d:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:41
   while((*dst_++ = *src_++));
c0003b80:	90                   	nop
/work/x86_os_my/lib/string.c:41 (discriminator 1)
c0003b81:	8b 45 08             	mov    0x8(%ebp),%eax
c0003b84:	8d 50 01             	lea    0x1(%eax),%edx
c0003b87:	89 55 08             	mov    %edx,0x8(%ebp)
c0003b8a:	8b 55 0c             	mov    0xc(%ebp),%edx
c0003b8d:	8d 4a 01             	lea    0x1(%edx),%ecx
c0003b90:	89 4d 0c             	mov    %ecx,0xc(%ebp)
c0003b93:	0f b6 12             	movzbl (%edx),%edx
c0003b96:	88 10                	mov    %dl,(%eax)
c0003b98:	0f b6 00             	movzbl (%eax),%eax
c0003b9b:	84 c0                	test   %al,%al
c0003b9d:	75 e2                	jne    c0003b81 <strcpy+0x32>
/work/x86_os_my/lib/string.c:42
   return r;
c0003b9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/lib/string.c:43
}
c0003ba2:	c9                   	leave  
c0003ba3:	c3                   	ret    

c0003ba4 <strlen>:
strlen():
/work/x86_os_my/lib/string.c:46

/* 返回字符串长度 */
uint32_t strlen(const char* str) {
c0003ba4:	55                   	push   %ebp
c0003ba5:	89 e5                	mov    %esp,%ebp
c0003ba7:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/string.c:47
   ASSERT(str != NULL);
c0003baa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003bae:	75 19                	jne    c0003bc9 <strlen+0x25>
/work/x86_os_my/lib/string.c:47 (discriminator 1)
c0003bb0:	68 6a 8d 00 c0       	push   $0xc0008d6a
c0003bb5:	68 b0 8d 00 c0       	push   $0xc0008db0
c0003bba:	6a 2f                	push   $0x2f
c0003bbc:	68 29 8d 00 c0       	push   $0xc0008d29
c0003bc1:	e8 3c ea ff ff       	call   c0002602 <panic_spin>
c0003bc6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:48
   const char* p = str;
c0003bc9:	8b 45 08             	mov    0x8(%ebp),%eax
c0003bcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:49
   while(*p++);
c0003bcf:	90                   	nop
/work/x86_os_my/lib/string.c:49 (discriminator 1)
c0003bd0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003bd3:	8d 50 01             	lea    0x1(%eax),%edx
c0003bd6:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0003bd9:	0f b6 00             	movzbl (%eax),%eax
c0003bdc:	84 c0                	test   %al,%al
c0003bde:	75 f0                	jne    c0003bd0 <strlen+0x2c>
/work/x86_os_my/lib/string.c:50
   return (p - str - 1);
c0003be0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0003be3:	8b 45 08             	mov    0x8(%ebp),%eax
c0003be6:	29 c2                	sub    %eax,%edx
c0003be8:	89 d0                	mov    %edx,%eax
c0003bea:	83 e8 01             	sub    $0x1,%eax
/work/x86_os_my/lib/string.c:51
}
c0003bed:	c9                   	leave  
c0003bee:	c3                   	ret    

c0003bef <strcmp>:
strcmp():
/work/x86_os_my/lib/string.c:54

/* 比较两个字符串,若a_中的字符大于b_中的字符返回1,相等时返回0,否则返回-1. */
int8_t strcmp (const char* a, const char* b) {
c0003bef:	55                   	push   %ebp
c0003bf0:	89 e5                	mov    %esp,%ebp
c0003bf2:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/lib/string.c:55
   ASSERT(a != NULL && b != NULL);
c0003bf5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003bf9:	74 06                	je     c0003c01 <strcmp+0x12>
/work/x86_os_my/lib/string.c:55 (discriminator 1)
c0003bfb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0003bff:	75 19                	jne    c0003c1a <strcmp+0x2b>
/work/x86_os_my/lib/string.c:55 (discriminator 3)
c0003c01:	68 76 8d 00 c0       	push   $0xc0008d76
c0003c06:	68 b8 8d 00 c0       	push   $0xc0008db8
c0003c0b:	6a 37                	push   $0x37
c0003c0d:	68 29 8d 00 c0       	push   $0xc0008d29
c0003c12:	e8 eb e9 ff ff       	call   c0002602 <panic_spin>
c0003c17:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:56 (discriminator 1)
   while (*a != 0 && *a == *b) {
c0003c1a:	eb 08                	jmp    c0003c24 <strcmp+0x35>
/work/x86_os_my/lib/string.c:57
      a++;
c0003c1c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
/work/x86_os_my/lib/string.c:58
      b++;
c0003c20:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
/work/x86_os_my/lib/string.c:56
}

/* 比较两个字符串,若a_中的字符大于b_中的字符返回1,相等时返回0,否则返回-1. */
int8_t strcmp (const char* a, const char* b) {
   ASSERT(a != NULL && b != NULL);
   while (*a != 0 && *a == *b) {
c0003c24:	8b 45 08             	mov    0x8(%ebp),%eax
c0003c27:	0f b6 00             	movzbl (%eax),%eax
c0003c2a:	84 c0                	test   %al,%al
c0003c2c:	74 10                	je     c0003c3e <strcmp+0x4f>
/work/x86_os_my/lib/string.c:56 (discriminator 1)
c0003c2e:	8b 45 08             	mov    0x8(%ebp),%eax
c0003c31:	0f b6 10             	movzbl (%eax),%edx
c0003c34:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003c37:	0f b6 00             	movzbl (%eax),%eax
c0003c3a:	38 c2                	cmp    %al,%dl
c0003c3c:	74 de                	je     c0003c1c <strcmp+0x2d>
/work/x86_os_my/lib/string.c:62
      a++;
      b++;
   }
/* 如果*a小于*b就返回-1,否则就属于*a大于等于*b的情况。在后面的布尔表达式"*a > *b"中,
 * 若*a大于*b,表达式就等于1,否则就表达式不成立,也就是布尔值为0,恰恰表示*a等于*b */
   return *a < *b ? -1 : *a > *b;
c0003c3e:	8b 45 08             	mov    0x8(%ebp),%eax
c0003c41:	0f b6 10             	movzbl (%eax),%edx
c0003c44:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003c47:	0f b6 00             	movzbl (%eax),%eax
c0003c4a:	38 c2                	cmp    %al,%dl
c0003c4c:	7c 13                	jl     c0003c61 <strcmp+0x72>
/work/x86_os_my/lib/string.c:62 (discriminator 1)
c0003c4e:	8b 45 08             	mov    0x8(%ebp),%eax
c0003c51:	0f b6 10             	movzbl (%eax),%edx
c0003c54:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003c57:	0f b6 00             	movzbl (%eax),%eax
c0003c5a:	38 c2                	cmp    %al,%dl
c0003c5c:	0f 9f c0             	setg   %al
c0003c5f:	eb 05                	jmp    c0003c66 <strcmp+0x77>
/work/x86_os_my/lib/string.c:62 (discriminator 2)
c0003c61:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
/work/x86_os_my/lib/string.c:63 (discriminator 5)
}
c0003c66:	c9                   	leave  
c0003c67:	c3                   	ret    

c0003c68 <strchr>:
strchr():
/work/x86_os_my/lib/string.c:66

/* 从左到右查找字符串str中首次出现字符ch的地址(不是下标,是地址) */
char* strchr(const char* str, const uint8_t ch) {
c0003c68:	55                   	push   %ebp
c0003c69:	89 e5                	mov    %esp,%ebp
c0003c6b:	83 ec 18             	sub    $0x18,%esp
c0003c6e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003c71:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/lib/string.c:67
   ASSERT(str != NULL);
c0003c74:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003c78:	75 35                	jne    c0003caf <strchr+0x47>
/work/x86_os_my/lib/string.c:67 (discriminator 1)
c0003c7a:	68 6a 8d 00 c0       	push   $0xc0008d6a
c0003c7f:	68 c0 8d 00 c0       	push   $0xc0008dc0
c0003c84:	6a 43                	push   $0x43
c0003c86:	68 29 8d 00 c0       	push   $0xc0008d29
c0003c8b:	e8 72 e9 ff ff       	call   c0002602 <panic_spin>
c0003c90:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:68 (discriminator 1)
   while (*str != 0) {
c0003c93:	eb 1a                	jmp    c0003caf <strchr+0x47>
/work/x86_os_my/lib/string.c:69
      if (*str == ch) {
c0003c95:	8b 45 08             	mov    0x8(%ebp),%eax
c0003c98:	0f b6 00             	movzbl (%eax),%eax
c0003c9b:	0f be d0             	movsbl %al,%edx
c0003c9e:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0003ca2:	39 c2                	cmp    %eax,%edx
c0003ca4:	75 05                	jne    c0003cab <strchr+0x43>
/work/x86_os_my/lib/string.c:70
	 return (char*)str;	    // 需要强制转化成和返回值类型一样,否则编译器会报const属性丢失,下同.
c0003ca6:	8b 45 08             	mov    0x8(%ebp),%eax
c0003ca9:	eb 13                	jmp    c0003cbe <strchr+0x56>
/work/x86_os_my/lib/string.c:72
      }
      str++;
c0003cab:	83 45 08 01          	addl   $0x1,0x8(%ebp)
/work/x86_os_my/lib/string.c:68
}

/* 从左到右查找字符串str中首次出现字符ch的地址(不是下标,是地址) */
char* strchr(const char* str, const uint8_t ch) {
   ASSERT(str != NULL);
   while (*str != 0) {
c0003caf:	8b 45 08             	mov    0x8(%ebp),%eax
c0003cb2:	0f b6 00             	movzbl (%eax),%eax
c0003cb5:	84 c0                	test   %al,%al
c0003cb7:	75 dc                	jne    c0003c95 <strchr+0x2d>
/work/x86_os_my/lib/string.c:74
      if (*str == ch) {
	 return (char*)str;	    // 需要强制转化成和返回值类型一样,否则编译器会报const属性丢失,下同.
      }
      str++;
   }
   return NULL;
c0003cb9:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/lib/string.c:75
}
c0003cbe:	c9                   	leave  
c0003cbf:	c3                   	ret    

c0003cc0 <strrchr>:
strrchr():
/work/x86_os_my/lib/string.c:78

/* 从后往前查找字符串str中首次出现字符ch的地址(不是下标,是地址) */
char* strrchr(const char* str, const uint8_t ch) {
c0003cc0:	55                   	push   %ebp
c0003cc1:	89 e5                	mov    %esp,%ebp
c0003cc3:	83 ec 28             	sub    $0x28,%esp
c0003cc6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003cc9:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/lib/string.c:79
   ASSERT(str != NULL);
c0003ccc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003cd0:	75 19                	jne    c0003ceb <strrchr+0x2b>
/work/x86_os_my/lib/string.c:79 (discriminator 1)
c0003cd2:	68 6a 8d 00 c0       	push   $0xc0008d6a
c0003cd7:	68 c8 8d 00 c0       	push   $0xc0008dc8
c0003cdc:	6a 4f                	push   $0x4f
c0003cde:	68 29 8d 00 c0       	push   $0xc0008d29
c0003ce3:	e8 1a e9 ff ff       	call   c0002602 <panic_spin>
c0003ce8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:80
   const char* last_char = NULL;
c0003ceb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/string.c:82
   /* 从头到尾遍历一次,若存在ch字符,last_char总是该字符最后一次出现在串中的地址(不是下标,是地址)*/
   while (*str != 0) {
c0003cf2:	eb 1b                	jmp    c0003d0f <strrchr+0x4f>
/work/x86_os_my/lib/string.c:83
      if (*str == ch) {
c0003cf4:	8b 45 08             	mov    0x8(%ebp),%eax
c0003cf7:	0f b6 00             	movzbl (%eax),%eax
c0003cfa:	0f be d0             	movsbl %al,%edx
c0003cfd:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0003d01:	39 c2                	cmp    %eax,%edx
c0003d03:	75 06                	jne    c0003d0b <strrchr+0x4b>
/work/x86_os_my/lib/string.c:84
	 last_char = str;
c0003d05:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d08:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:86
      }
      str++;
c0003d0b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
/work/x86_os_my/lib/string.c:82
/* 从后往前查找字符串str中首次出现字符ch的地址(不是下标,是地址) */
char* strrchr(const char* str, const uint8_t ch) {
   ASSERT(str != NULL);
   const char* last_char = NULL;
   /* 从头到尾遍历一次,若存在ch字符,last_char总是该字符最后一次出现在串中的地址(不是下标,是地址)*/
   while (*str != 0) {
c0003d0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d12:	0f b6 00             	movzbl (%eax),%eax
c0003d15:	84 c0                	test   %al,%al
c0003d17:	75 db                	jne    c0003cf4 <strrchr+0x34>
/work/x86_os_my/lib/string.c:88
      if (*str == ch) {
	 last_char = str;
      }
      str++;
   }
   return (char*)last_char;
c0003d19:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/lib/string.c:89
}
c0003d1c:	c9                   	leave  
c0003d1d:	c3                   	ret    

c0003d1e <strcat>:
strcat():
/work/x86_os_my/lib/string.c:92

/* 将字符串src_拼接到dst_后,将回拼接的串地址 */
char* strcat(char* dst_, const char* src_) {
c0003d1e:	55                   	push   %ebp
c0003d1f:	89 e5                	mov    %esp,%ebp
c0003d21:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/string.c:93
   ASSERT(dst_ != NULL && src_ != NULL);
c0003d24:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003d28:	74 06                	je     c0003d30 <strcat+0x12>
/work/x86_os_my/lib/string.c:93 (discriminator 1)
c0003d2a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0003d2e:	75 19                	jne    c0003d49 <strcat+0x2b>
/work/x86_os_my/lib/string.c:93 (discriminator 3)
c0003d30:	68 36 8d 00 c0       	push   $0xc0008d36
c0003d35:	68 d0 8d 00 c0       	push   $0xc0008dd0
c0003d3a:	6a 5d                	push   $0x5d
c0003d3c:	68 29 8d 00 c0       	push   $0xc0008d29
c0003d41:	e8 bc e8 ff ff       	call   c0002602 <panic_spin>
c0003d46:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:94
   char* str = dst_;
c0003d49:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d4c:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:95
   while (*str++);
c0003d4f:	90                   	nop
/work/x86_os_my/lib/string.c:95 (discriminator 1)
c0003d50:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003d53:	8d 50 01             	lea    0x1(%eax),%edx
c0003d56:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0003d59:	0f b6 00             	movzbl (%eax),%eax
c0003d5c:	84 c0                	test   %al,%al
c0003d5e:	75 f0                	jne    c0003d50 <strcat+0x32>
/work/x86_os_my/lib/string.c:96
   --str;      // 别看错了，--str是独立的一句，并不是while的循环体
c0003d60:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
/work/x86_os_my/lib/string.c:97
   while((*str++ = *src_++));	 // 当*str被赋值为0时,此时表达式不成立,正好添加了字符串结尾的0.
c0003d64:	90                   	nop
/work/x86_os_my/lib/string.c:97 (discriminator 1)
c0003d65:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003d68:	8d 50 01             	lea    0x1(%eax),%edx
c0003d6b:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0003d6e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0003d71:	8d 4a 01             	lea    0x1(%edx),%ecx
c0003d74:	89 4d 0c             	mov    %ecx,0xc(%ebp)
c0003d77:	0f b6 12             	movzbl (%edx),%edx
c0003d7a:	88 10                	mov    %dl,(%eax)
c0003d7c:	0f b6 00             	movzbl (%eax),%eax
c0003d7f:	84 c0                	test   %al,%al
c0003d81:	75 e2                	jne    c0003d65 <strcat+0x47>
/work/x86_os_my/lib/string.c:98
   return dst_;
c0003d83:	8b 45 08             	mov    0x8(%ebp),%eax
/work/x86_os_my/lib/string.c:99
}
c0003d86:	c9                   	leave  
c0003d87:	c3                   	ret    

c0003d88 <strchrs>:
strchrs():
/work/x86_os_my/lib/string.c:102

/* 在字符串str中查找指定字符ch出现的次数 */
uint32_t strchrs(const char* str, uint8_t ch) {
c0003d88:	55                   	push   %ebp
c0003d89:	89 e5                	mov    %esp,%ebp
c0003d8b:	83 ec 28             	sub    $0x28,%esp
c0003d8e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003d91:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/lib/string.c:103
   ASSERT(str != NULL);
c0003d94:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003d98:	75 19                	jne    c0003db3 <strchrs+0x2b>
/work/x86_os_my/lib/string.c:103 (discriminator 1)
c0003d9a:	68 6a 8d 00 c0       	push   $0xc0008d6a
c0003d9f:	68 d8 8d 00 c0       	push   $0xc0008dd8
c0003da4:	6a 67                	push   $0x67
c0003da6:	68 29 8d 00 c0       	push   $0xc0008d29
c0003dab:	e8 52 e8 ff ff       	call   c0002602 <panic_spin>
c0003db0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:104
   uint32_t ch_cnt = 0;
c0003db3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/string.c:105
   const char* p = str;
c0003dba:	8b 45 08             	mov    0x8(%ebp),%eax
c0003dbd:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/string.c:106
   while(*p != 0) {
c0003dc0:	eb 19                	jmp    c0003ddb <strchrs+0x53>
/work/x86_os_my/lib/string.c:107
      if (*p == ch) {
c0003dc2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003dc5:	0f b6 00             	movzbl (%eax),%eax
c0003dc8:	0f be d0             	movsbl %al,%edx
c0003dcb:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0003dcf:	39 c2                	cmp    %eax,%edx
c0003dd1:	75 04                	jne    c0003dd7 <strchrs+0x4f>
/work/x86_os_my/lib/string.c:108
	 ch_cnt++;
c0003dd3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/lib/string.c:110
      }
      p++;
c0003dd7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/lib/string.c:106
/* 在字符串str中查找指定字符ch出现的次数 */
uint32_t strchrs(const char* str, uint8_t ch) {
   ASSERT(str != NULL);
   uint32_t ch_cnt = 0;
   const char* p = str;
   while(*p != 0) {
c0003ddb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003dde:	0f b6 00             	movzbl (%eax),%eax
c0003de1:	84 c0                	test   %al,%al
c0003de3:	75 dd                	jne    c0003dc2 <strchrs+0x3a>
/work/x86_os_my/lib/string.c:112
      if (*p == ch) {
	 ch_cnt++;
      }
      p++;
   }
   return ch_cnt;
c0003de5:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/lib/string.c:113
}
c0003de8:	c9                   	leave  
c0003de9:	c3                   	ret    

c0003dea <idle>:
idle():
/work/x86_os_my/thread/thread.c:22
static struct list_elem* g_thread_tag;// 用于临时保存队列中的线程结点

extern void switch_to(struct task_struct* cur, struct task_struct* next);

/* idle线程 */
static void idle(void* arg UNUSED) {
c0003dea:	55                   	push   %ebp
c0003deb:	89 e5                	mov    %esp,%ebp
c0003ded:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:24 (discriminator 1)
	while(1) {
		thread_block(TASK_BLOCKED);
c0003df0:	83 ec 0c             	sub    $0xc,%esp
c0003df3:	6a 02                	push   $0x2
c0003df5:	e8 84 04 00 00       	call   c000427e <thread_block>
c0003dfa:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:28 (discriminator 1)
		//CPU停机
		//唯一能唤醒处理器的就是外部中断
		//执行hlt时必须要保证目前处在开中断的情况下
		asm volatile ("sti; hlt" : : : "memory");
c0003dfd:	fb                   	sti    
c0003dfe:	f4                   	hlt    
/work/x86_os_my/thread/thread.c:29 (discriminator 1)
	}
c0003dff:	eb ef                	jmp    c0003df0 <idle+0x6>

c0003e01 <running_thread>:
running_thread():
/work/x86_os_my/thread/thread.c:36

/* 返回线程 PCB 地址。
 * 各个线程所用的 0 级栈都是在自己的 PCB 当中，
 * 取当前栈指针的高 20 位，就是当前运行线程的 PCB（PCB是在自然页的起始地址！）
 */
struct task_struct* running_thread() {
c0003e01:	55                   	push   %ebp
c0003e02:	89 e5                	mov    %esp,%ebp
c0003e04:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/thread/thread.c:38
	uint32_t esp;
	asm ("mov %%esp, %0" : "=g" (esp));	//esp寄存器的值，放入变量esp
c0003e07:	89 e0                	mov    %esp,%eax
c0003e09:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/thread/thread.c:39
	return (struct task_struct*)(esp & 0xfffff000);
c0003e0c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003e0f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
/work/x86_os_my/thread/thread.c:40
}
c0003e14:	c9                   	leave  
c0003e15:	c3                   	ret    

c0003e16 <kernel_thread>:
kernel_thread():
/work/x86_os_my/thread/thread.c:43

/* 由kernel_thread去执行function(func_arg) */
static void kernel_thread(thread_func* function, void* func_arg) {
c0003e16:	55                   	push   %ebp
c0003e17:	89 e5                	mov    %esp,%ebp
c0003e19:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:49
	/* 线程的首次运行是由时钟中断处理函数调用任务调度器 schedule 完成的，
	 * 进入中断后处理器会自动关中断，
	 * 因此在执行 function 前要打开中断，否则 kernel_thread 中的 function 在关中断的情况下运行，
	 * 也就是时钟中断被屏蔽了，再也不会调度到新的线程，function 会独享处理器。
	 */
	intr_enable();
c0003e1c:	e8 11 de ff ff       	call   c0001c32 <intr_enable>
/work/x86_os_my/thread/thread.c:50
	function(func_arg); 
c0003e21:	83 ec 0c             	sub    $0xc,%esp
c0003e24:	ff 75 0c             	pushl  0xc(%ebp)
c0003e27:	8b 45 08             	mov    0x8(%ebp),%eax
c0003e2a:	ff d0                	call   *%eax
c0003e2c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:51
}
c0003e2f:	90                   	nop
c0003e30:	c9                   	leave  
c0003e31:	c3                   	ret    

c0003e32 <allocate_pid>:
allocate_pid():
/work/x86_os_my/thread/thread.c:54

/* 分配pid */
static pid_t allocate_pid(void) {
c0003e32:	55                   	push   %ebp
c0003e33:	89 e5                	mov    %esp,%ebp
c0003e35:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:56
   static pid_t next_pid = 0;
   lock_acquire(&pid_lock);
c0003e38:	83 ec 0c             	sub    $0xc,%esp
c0003e3b:	68 34 cd 00 c0       	push   $0xc000cd34
c0003e40:	e8 5a 0b 00 00       	call   c000499f <lock_acquire>
c0003e45:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:57
   next_pid++;
c0003e48:	0f b7 05 ec c6 00 c0 	movzwl 0xc000c6ec,%eax
c0003e4f:	83 c0 01             	add    $0x1,%eax
c0003e52:	66 a3 ec c6 00 c0    	mov    %ax,0xc000c6ec
/work/x86_os_my/thread/thread.c:58
   lock_release(&pid_lock);
c0003e58:	83 ec 0c             	sub    $0xc,%esp
c0003e5b:	68 34 cd 00 c0       	push   $0xc000cd34
c0003e60:	e8 b1 0b 00 00       	call   c0004a16 <lock_release>
c0003e65:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:59
   return next_pid;
c0003e68:	0f b7 05 ec c6 00 c0 	movzwl 0xc000c6ec,%eax
/work/x86_os_my/thread/thread.c:60
}
c0003e6f:	c9                   	leave  
c0003e70:	c3                   	ret    

c0003e71 <thread_create>:
thread_create():
/work/x86_os_my/thread/thread.c:63

/* 初始化线程栈结构体 struct thread_stack */
void thread_create(struct task_struct* pthread, thread_func function, void* func_arg) {
c0003e71:	55                   	push   %ebp
c0003e72:	89 e5                	mov    %esp,%ebp
c0003e74:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/thread/thread.c:67
	/* 先预留中断使用栈的空间 
	 *（1）将来线程进入中断后，位于 kernel.S 中的中断代码会通过此栈来保存上下文。
	 *（2）将来实现用户进程时，会将用户进程的初始信息放在中断栈中。*/
	pthread->self_kstack -= sizeof(struct intr_stack);
c0003e77:	8b 45 08             	mov    0x8(%ebp),%eax
c0003e7a:	8b 00                	mov    (%eax),%eax
c0003e7c:	8d 90 d0 fe ff ff    	lea    -0x130(%eax),%edx
c0003e82:	8b 45 08             	mov    0x8(%ebp),%eax
c0003e85:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/thread/thread.c:70

	/* 再留出线程栈空间（unused_retaddr 所在的栈）*/
	pthread->self_kstack -= sizeof(struct thread_stack);
c0003e87:	8b 45 08             	mov    0x8(%ebp),%eax
c0003e8a:	8b 00                	mov    (%eax),%eax
c0003e8c:	8d 50 80             	lea    -0x80(%eax),%edx
c0003e8f:	8b 45 08             	mov    0x8(%ebp),%eax
c0003e92:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/thread/thread.c:71
	struct thread_stack* kthread_stack = (struct thread_stack*)pthread->self_kstack;
c0003e94:	8b 45 08             	mov    0x8(%ebp),%eax
c0003e97:	8b 00                	mov    (%eax),%eax
c0003e99:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/thread/thread.c:79
	 * kernel_thread 并不是通过 call 指令调用的，而是通过 ret 来执行的，
	 * 因此无法按照正常的函数调用形式传递 kernel_thread 所需要的参数，
	 * 这样调用是不行的： kernel_thread(function, func_arg)，
	 * 只能将参数放在 kernel_thread 所用的栈中，即处理器进入 kernel_thread 函数体时，
	 * 栈顶为返回地址，栈顶+4 为参数function，栈顶+8 为参数func_arg */
	kthread_stack->eip = kernel_thread;
c0003e9c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003e9f:	c7 40 10 16 3e 00 c0 	movl   $0xc0003e16,0x10(%eax)
/work/x86_os_my/thread/thread.c:80
	kthread_stack->function = function;
c0003ea6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003ea9:	8b 55 0c             	mov    0xc(%ebp),%edx
c0003eac:	89 50 18             	mov    %edx,0x18(%eax)
/work/x86_os_my/thread/thread.c:81
	kthread_stack->func_arg = func_arg;
c0003eaf:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003eb2:	8b 55 10             	mov    0x10(%ebp),%edx
c0003eb5:	89 50 1c             	mov    %edx,0x1c(%eax)
/work/x86_os_my/thread/thread.c:82
	kthread_stack->ebp = kthread_stack->ebx = kthread_stack->esi = kthread_stack->edi = 0;
c0003eb8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003ebb:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0003ec2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003ec5:	8b 50 08             	mov    0x8(%eax),%edx
c0003ec8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003ecb:	89 50 0c             	mov    %edx,0xc(%eax)
c0003ece:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003ed1:	8b 50 0c             	mov    0xc(%eax),%edx
c0003ed4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003ed7:	89 50 04             	mov    %edx,0x4(%eax)
c0003eda:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003edd:	8b 50 04             	mov    0x4(%eax),%edx
c0003ee0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003ee3:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/thread/thread.c:83
}
c0003ee5:	90                   	nop
c0003ee6:	c9                   	leave  
c0003ee7:	c3                   	ret    

c0003ee8 <init_thread>:
init_thread():
/work/x86_os_my/thread/thread.c:86

/* 初始化线程PCB结构体 struct task_struct */
void init_thread(struct task_struct* pthread, char* name, int prio) {
c0003ee8:	55                   	push   %ebp
c0003ee9:	89 e5                	mov    %esp,%ebp
c0003eeb:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:87
	memset(pthread, 0, sizeof(*pthread));	//清空PCB
c0003eee:	83 ec 04             	sub    $0x4,%esp
c0003ef1:	68 10 01 00 00       	push   $0x110
c0003ef6:	6a 00                	push   $0x0
c0003ef8:	ff 75 08             	pushl  0x8(%ebp)
c0003efb:	e8 1a fb ff ff       	call   c0003a1a <memset>
c0003f00:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:88
	pthread->pid = allocate_pid();
c0003f03:	e8 2a ff ff ff       	call   c0003e32 <allocate_pid>
c0003f08:	89 c2                	mov    %eax,%edx
c0003f0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0003f0d:	66 89 50 04          	mov    %dx,0x4(%eax)
/work/x86_os_my/thread/thread.c:89
	strcpy(pthread->name, name);
c0003f11:	8b 45 08             	mov    0x8(%ebp),%eax
c0003f14:	83 c0 0c             	add    $0xc,%eax
c0003f17:	83 ec 08             	sub    $0x8,%esp
c0003f1a:	ff 75 0c             	pushl  0xc(%ebp)
c0003f1d:	50                   	push   %eax
c0003f1e:	e8 2c fc ff ff       	call   c0003b4f <strcpy>
c0003f23:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:91

	if (pthread == g_main_thread) {
c0003f26:	a1 30 cd 00 c0       	mov    0xc000cd30,%eax
c0003f2b:	39 45 08             	cmp    %eax,0x8(%ebp)
c0003f2e:	75 0c                	jne    c0003f3c <init_thread+0x54>
/work/x86_os_my/thread/thread.c:93
		/* 由于把main函数也封装成一个线程,并且它一直是运行的,故将其直接设为TASK_RUNNING */
		pthread->status = TASK_RUNNING;
c0003f30:	8b 45 08             	mov    0x8(%ebp),%eax
c0003f33:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0003f3a:	eb 0a                	jmp    c0003f46 <init_thread+0x5e>
/work/x86_os_my/thread/thread.c:95
	} else {
		pthread->status = TASK_READY;
c0003f3c:	8b 45 08             	mov    0x8(%ebp),%eax
c0003f3f:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/thread/thread.c:101
	}

	/* self_kstack是线程自己在内核态下使用的栈顶地址 
	 * 线程自己在 0 特权级下所用的栈，在线程创建之初，
	 * 它被初始化为线程 PCB 的最顶端，即(uint32_t)pthread + PG_SIZE。*/
	pthread->self_kstack = (uint32_t*)((uint32_t)pthread + PG_SIZE);
c0003f46:	8b 45 08             	mov    0x8(%ebp),%eax
c0003f49:	05 00 10 00 00       	add    $0x1000,%eax
c0003f4e:	89 c2                	mov    %eax,%edx
c0003f50:	8b 45 08             	mov    0x8(%ebp),%eax
c0003f53:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/thread/thread.c:102
	pthread->priority = prio;
c0003f55:	8b 45 10             	mov    0x10(%ebp),%eax
c0003f58:	89 c2                	mov    %eax,%edx
c0003f5a:	8b 45 08             	mov    0x8(%ebp),%eax
c0003f5d:	88 50 1c             	mov    %dl,0x1c(%eax)
/work/x86_os_my/thread/thread.c:103
	pthread->ticks = prio;
c0003f60:	8b 45 10             	mov    0x10(%ebp),%eax
c0003f63:	89 c2                	mov    %eax,%edx
c0003f65:	8b 45 08             	mov    0x8(%ebp),%eax
c0003f68:	88 50 1d             	mov    %dl,0x1d(%eax)
/work/x86_os_my/thread/thread.c:104
	pthread->elapsed_ticks = 0;
c0003f6b:	8b 45 08             	mov    0x8(%ebp),%eax
c0003f6e:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
/work/x86_os_my/thread/thread.c:105
	pthread->pgdir = NULL;
c0003f75:	8b 45 08             	mov    0x8(%ebp),%eax
c0003f78:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
/work/x86_os_my/thread/thread.c:108

	/* 预留标准输入输出 */
	pthread->fd_table[0] = 0;
c0003f7f:	8b 45 08             	mov    0x8(%ebp),%eax
c0003f82:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
/work/x86_os_my/thread/thread.c:109
	pthread->fd_table[1] = 1;
c0003f89:	8b 45 08             	mov    0x8(%ebp),%eax
c0003f8c:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
/work/x86_os_my/thread/thread.c:110
	pthread->fd_table[2] = 2;
c0003f93:	8b 45 08             	mov    0x8(%ebp),%eax
c0003f96:	c7 40 2c 02 00 00 00 	movl   $0x2,0x2c(%eax)
/work/x86_os_my/thread/thread.c:112
	/* 其余的全置为-1 */
	uint8_t fd_idx = 3;
c0003f9d:	c6 45 f7 03          	movb   $0x3,-0x9(%ebp)
/work/x86_os_my/thread/thread.c:113
	while (fd_idx < MAX_FILES_OPEN_PER_PROC) {
c0003fa1:	eb 1c                	jmp    c0003fbf <init_thread+0xd7>
/work/x86_os_my/thread/thread.c:114
		pthread->fd_table[fd_idx] = -1;
c0003fa3:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c0003fa7:	8b 45 08             	mov    0x8(%ebp),%eax
c0003faa:	83 c2 08             	add    $0x8,%edx
c0003fad:	c7 44 90 04 ff ff ff 	movl   $0xffffffff,0x4(%eax,%edx,4)
c0003fb4:	ff 
/work/x86_os_my/thread/thread.c:115
		fd_idx++;
c0003fb5:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0003fb9:	83 c0 01             	add    $0x1,%eax
c0003fbc:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/thread/thread.c:113
	pthread->fd_table[0] = 0;
	pthread->fd_table[1] = 1;
	pthread->fd_table[2] = 2;
	/* 其余的全置为-1 */
	uint8_t fd_idx = 3;
	while (fd_idx < MAX_FILES_OPEN_PER_PROC) {
c0003fbf:	80 7d f7 07          	cmpb   $0x7,-0x9(%ebp)
c0003fc3:	76 de                	jbe    c0003fa3 <init_thread+0xbb>
/work/x86_os_my/thread/thread.c:118
		pthread->fd_table[fd_idx] = -1;
		fd_idx++;
	}

	pthread->stack_magic = 0x19870916;	  // 自定义的魔数
c0003fc5:	8b 45 08             	mov    0x8(%ebp),%eax
c0003fc8:	c7 80 0c 01 00 00 16 	movl   $0x19870916,0x10c(%eax)
c0003fcf:	09 87 19 
/work/x86_os_my/thread/thread.c:119
}
c0003fd2:	90                   	nop
c0003fd3:	c9                   	leave  
c0003fd4:	c3                   	ret    

c0003fd5 <thread_start>:
thread_start():
/work/x86_os_my/thread/thread.c:122

/* 创建线程 */
struct task_struct* thread_start(char* name, int prio, thread_func function, void* func_arg) {
c0003fd5:	55                   	push   %ebp
c0003fd6:	89 e5                	mov    %esp,%ebp
c0003fd8:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:124
	/* pcb都位于内核空间,包括用户进程的pcb也是在内核空间 */
	struct task_struct* thread = get_kernel_pages(1);
c0003fdb:	83 ec 0c             	sub    $0xc,%esp
c0003fde:	6a 01                	push   $0x1
c0003fe0:	e8 c5 ec ff ff       	call   c0002caa <get_kernel_pages>
c0003fe5:	83 c4 10             	add    $0x10,%esp
c0003fe8:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:126

	init_thread(thread, name, prio);			//初始化线程PCB
c0003feb:	83 ec 04             	sub    $0x4,%esp
c0003fee:	ff 75 0c             	pushl  0xc(%ebp)
c0003ff1:	ff 75 08             	pushl  0x8(%ebp)
c0003ff4:	ff 75 f4             	pushl  -0xc(%ebp)
c0003ff7:	e8 ec fe ff ff       	call   c0003ee8 <init_thread>
c0003ffc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:127
	thread_create(thread, function, func_arg);	//初始化线程栈结构体
c0003fff:	83 ec 04             	sub    $0x4,%esp
c0004002:	ff 75 14             	pushl  0x14(%ebp)
c0004005:	ff 75 10             	pushl  0x10(%ebp)
c0004008:	ff 75 f4             	pushl  -0xc(%ebp)
c000400b:	e8 61 fe ff ff       	call   c0003e71 <thread_create>
c0004010:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:129
	
	ASSERT(!elem_find(&thread_ready_list, &thread->general_tag));	// 确保之前不在队列中
c0004013:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004016:	83 c0 44             	add    $0x44,%eax
c0004019:	83 ec 08             	sub    $0x8,%esp
c000401c:	50                   	push   %eax
c000401d:	68 0c cd 00 c0       	push   $0xc000cd0c
c0004022:	e8 bc 05 00 00       	call   c00045e3 <elem_find>
c0004027:	83 c4 10             	add    $0x10,%esp
c000402a:	85 c0                	test   %eax,%eax
c000402c:	74 1c                	je     c000404a <thread_start+0x75>
/work/x86_os_my/thread/thread.c:129 (discriminator 1)
c000402e:	68 e0 8d 00 c0       	push   $0xc0008de0
c0004033:	68 64 90 00 c0       	push   $0xc0009064
c0004038:	68 81 00 00 00       	push   $0x81
c000403d:	68 15 8e 00 c0       	push   $0xc0008e15
c0004042:	e8 bb e5 ff ff       	call   c0002602 <panic_spin>
c0004047:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:130
	list_append(&thread_ready_list, &thread->general_tag);			// 加入就绪线程队列
c000404a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000404d:	83 c0 44             	add    $0x44,%eax
c0004050:	83 ec 08             	sub    $0x8,%esp
c0004053:	50                   	push   %eax
c0004054:	68 0c cd 00 c0       	push   $0xc000cd0c
c0004059:	e8 0b 05 00 00       	call   c0004569 <list_append>
c000405e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:132

	ASSERT(!elem_find(&thread_all_list, &thread->all_list_tag));
c0004061:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004064:	83 c0 4c             	add    $0x4c,%eax
c0004067:	83 ec 08             	sub    $0x8,%esp
c000406a:	50                   	push   %eax
c000406b:	68 1c cd 00 c0       	push   $0xc000cd1c
c0004070:	e8 6e 05 00 00       	call   c00045e3 <elem_find>
c0004075:	83 c4 10             	add    $0x10,%esp
c0004078:	85 c0                	test   %eax,%eax
c000407a:	74 1c                	je     c0004098 <thread_start+0xc3>
/work/x86_os_my/thread/thread.c:132 (discriminator 1)
c000407c:	68 28 8e 00 c0       	push   $0xc0008e28
c0004081:	68 64 90 00 c0       	push   $0xc0009064
c0004086:	68 84 00 00 00       	push   $0x84
c000408b:	68 15 8e 00 c0       	push   $0xc0008e15
c0004090:	e8 6d e5 ff ff       	call   c0002602 <panic_spin>
c0004095:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:133
	list_append(&thread_all_list, &thread->all_list_tag);			// 加入全部线程队列
c0004098:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000409b:	83 c0 4c             	add    $0x4c,%eax
c000409e:	83 ec 08             	sub    $0x8,%esp
c00040a1:	50                   	push   %eax
c00040a2:	68 1c cd 00 c0       	push   $0xc000cd1c
c00040a7:	e8 bd 04 00 00       	call   c0004569 <list_append>
c00040ac:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:149
	 * 在执行 ret 后，esp 指向的数值被弹岀到 eip。
	 * 处理器会去执行 kernel_thread 函数。
	 * 在执行 kernel_thread 时，处理器以为栈顶是返回地址，其实只是一个假的占位置的变量 unused_retaddr！
	 * 接着会调用函数 function(func_arg) */
	//asm volatile ("movl %0, %%esp; pop %%ebp; pop %%ebx; pop %%edi; pop %%esi; ret" : : "g" (thread->self_kstack) : "memory");
	return thread;
c00040af:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/thread/thread.c:150
}
c00040b2:	c9                   	leave  
c00040b3:	c3                   	ret    

c00040b4 <make_main_thread>:
make_main_thread():
/work/x86_os_my/thread/thread.c:154


/* 将kernel中的main函数完善为主线程 */
static void make_main_thread(void) {
c00040b4:	55                   	push   %ebp
c00040b5:	89 e5                	mov    %esp,%ebp
c00040b7:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:159
	/* 因为main线程早已运行,咱们在loader.S中进入内核时的mov esp, 0xc009f000设置了栈顶，也预留了pcb, 地址为0xc009e000
	 * 主线程不需要再为PCB申请页，只需要通过 init_thread 填充PCB成员：名称和优先级等。
	 * 也不需要再通过 thread_create 构造它的线程栈。
	 */
	g_main_thread = running_thread();	//用栈指针的高20位，当做当前线程的PCB
c00040ba:	e8 42 fd ff ff       	call   c0003e01 <running_thread>
c00040bf:	a3 30 cd 00 c0       	mov    %eax,0xc000cd30
/work/x86_os_my/thread/thread.c:160
	init_thread(g_main_thread, "main", 31);
c00040c4:	a1 30 cd 00 c0       	mov    0xc000cd30,%eax
c00040c9:	83 ec 04             	sub    $0x4,%esp
c00040cc:	6a 1f                	push   $0x1f
c00040ce:	68 5c 8e 00 c0       	push   $0xc0008e5c
c00040d3:	50                   	push   %eax
c00040d4:	e8 0f fe ff ff       	call   c0003ee8 <init_thread>
c00040d9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:164

	/* main函数是当前线程,当前线程不在thread_ready_list中,
	 * 所以只将其加在thread_all_list中. */
	ASSERT(!elem_find(&thread_all_list, &g_main_thread->all_list_tag));
c00040dc:	a1 30 cd 00 c0       	mov    0xc000cd30,%eax
c00040e1:	83 c0 4c             	add    $0x4c,%eax
c00040e4:	83 ec 08             	sub    $0x8,%esp
c00040e7:	50                   	push   %eax
c00040e8:	68 1c cd 00 c0       	push   $0xc000cd1c
c00040ed:	e8 f1 04 00 00       	call   c00045e3 <elem_find>
c00040f2:	83 c4 10             	add    $0x10,%esp
c00040f5:	85 c0                	test   %eax,%eax
c00040f7:	74 1c                	je     c0004115 <make_main_thread+0x61>
/work/x86_os_my/thread/thread.c:164 (discriminator 1)
c00040f9:	68 64 8e 00 c0       	push   $0xc0008e64
c00040fe:	68 74 90 00 c0       	push   $0xc0009074
c0004103:	68 a4 00 00 00       	push   $0xa4
c0004108:	68 15 8e 00 c0       	push   $0xc0008e15
c000410d:	e8 f0 e4 ff ff       	call   c0002602 <panic_spin>
c0004112:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:165
	list_append(&thread_all_list, &g_main_thread->all_list_tag);
c0004115:	a1 30 cd 00 c0       	mov    0xc000cd30,%eax
c000411a:	83 c0 4c             	add    $0x4c,%eax
c000411d:	83 ec 08             	sub    $0x8,%esp
c0004120:	50                   	push   %eax
c0004121:	68 1c cd 00 c0       	push   $0xc000cd1c
c0004126:	e8 3e 04 00 00       	call   c0004569 <list_append>
c000412b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:166
}
c000412e:	90                   	nop
c000412f:	c9                   	leave  
c0004130:	c3                   	ret    

c0004131 <schedule>:
schedule():
/work/x86_os_my/thread/thread.c:176
（2）调度器 schedule。
（3）任务切换函数 switch_to。
*/
/* 实现任务调度 */
void schedule()
{
c0004131:	55                   	push   %ebp
c0004132:	89 e5                	mov    %esp,%ebp
c0004134:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:177
	ASSERT(intr_get_status() == INTR_OFF);
c0004137:	e8 66 db ff ff       	call   c0001ca2 <intr_get_status>
c000413c:	85 c0                	test   %eax,%eax
c000413e:	74 1c                	je     c000415c <schedule+0x2b>
/work/x86_os_my/thread/thread.c:177 (discriminator 1)
c0004140:	68 9f 8e 00 c0       	push   $0xc0008e9f
c0004145:	68 88 90 00 c0       	push   $0xc0009088
c000414a:	68 b1 00 00 00       	push   $0xb1
c000414f:	68 15 8e 00 c0       	push   $0xc0008e15
c0004154:	e8 a9 e4 ff ff       	call   c0002602 <panic_spin>
c0004159:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:180

	/* 换下 */
	struct task_struct* cur = running_thread(); 
c000415c:	e8 a0 fc ff ff       	call   c0003e01 <running_thread>
c0004161:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:181
	if (cur->status == TASK_RUNNING) { // 若此线程只是cpu时间片到了,将其加入到就绪队列尾
c0004164:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004167:	8b 40 08             	mov    0x8(%eax),%eax
c000416a:	85 c0                	test   %eax,%eax
c000416c:	75 65                	jne    c00041d3 <schedule+0xa2>
/work/x86_os_my/thread/thread.c:182
		ASSERT(!elem_find(&thread_ready_list, &cur->general_tag));
c000416e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004171:	83 c0 44             	add    $0x44,%eax
c0004174:	83 ec 08             	sub    $0x8,%esp
c0004177:	50                   	push   %eax
c0004178:	68 0c cd 00 c0       	push   $0xc000cd0c
c000417d:	e8 61 04 00 00       	call   c00045e3 <elem_find>
c0004182:	83 c4 10             	add    $0x10,%esp
c0004185:	85 c0                	test   %eax,%eax
c0004187:	74 1c                	je     c00041a5 <schedule+0x74>
/work/x86_os_my/thread/thread.c:182 (discriminator 1)
c0004189:	68 c0 8e 00 c0       	push   $0xc0008ec0
c000418e:	68 88 90 00 c0       	push   $0xc0009088
c0004193:	68 b6 00 00 00       	push   $0xb6
c0004198:	68 15 8e 00 c0       	push   $0xc0008e15
c000419d:	e8 60 e4 ff ff       	call   c0002602 <panic_spin>
c00041a2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:183
		list_append(&thread_ready_list, &cur->general_tag);
c00041a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00041a8:	83 c0 44             	add    $0x44,%eax
c00041ab:	83 ec 08             	sub    $0x8,%esp
c00041ae:	50                   	push   %eax
c00041af:	68 0c cd 00 c0       	push   $0xc000cd0c
c00041b4:	e8 b0 03 00 00       	call   c0004569 <list_append>
c00041b9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:184
		cur->ticks = cur->priority;     // 重新将当前线程的ticks再重置为其priority;
c00041bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00041bf:	0f b6 50 1c          	movzbl 0x1c(%eax),%edx
c00041c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00041c6:	88 50 1d             	mov    %dl,0x1d(%eax)
/work/x86_os_my/thread/thread.c:185
		cur->status = TASK_READY;
c00041c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00041cc:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/thread/thread.c:192
		/* 若此线程需要某事件发生后才能继续上cpu运行,
		不需要将其加入队列,因为当前线程不在就绪队列中。*/
	}

	/* 如果就绪队列中没有可运行的任务,就唤醒idle */
	if (list_empty(&thread_ready_list)) {
c00041d3:	83 ec 0c             	sub    $0xc,%esp
c00041d6:	68 0c cd 00 c0       	push   $0xc000cd0c
c00041db:	e8 d0 04 00 00       	call   c00046b0 <list_empty>
c00041e0:	83 c4 10             	add    $0x10,%esp
c00041e3:	85 c0                	test   %eax,%eax
c00041e5:	74 11                	je     c00041f8 <schedule+0xc7>
/work/x86_os_my/thread/thread.c:193
		thread_unblock(idle_thread);
c00041e7:	a1 2c cd 00 c0       	mov    0xc000cd2c,%eax
c00041ec:	83 ec 0c             	sub    $0xc,%esp
c00041ef:	50                   	push   %eax
c00041f0:	e8 ec 00 00 00       	call   c00042e1 <thread_unblock>
c00041f5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:197
	}
	
	/* 换上 */
	ASSERT(!list_empty(&thread_ready_list));
c00041f8:	83 ec 0c             	sub    $0xc,%esp
c00041fb:	68 0c cd 00 c0       	push   $0xc000cd0c
c0004200:	e8 ab 04 00 00       	call   c00046b0 <list_empty>
c0004205:	83 c4 10             	add    $0x10,%esp
c0004208:	85 c0                	test   %eax,%eax
c000420a:	74 1c                	je     c0004228 <schedule+0xf7>
/work/x86_os_my/thread/thread.c:197 (discriminator 1)
c000420c:	68 f4 8e 00 c0       	push   $0xc0008ef4
c0004211:	68 88 90 00 c0       	push   $0xc0009088
c0004216:	68 c5 00 00 00       	push   $0xc5
c000421b:	68 15 8e 00 c0       	push   $0xc0008e15
c0004220:	e8 dd e3 ff ff       	call   c0002602 <panic_spin>
c0004225:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:198
	g_thread_tag = NULL;	  // g_thread_tag清空
c0004228:	c7 05 e8 c6 00 c0 00 	movl   $0x0,0xc000c6e8
c000422f:	00 00 00 
/work/x86_os_my/thread/thread.c:200
	/* 将thread_ready_list队列中的第一个就绪线程弹出,准备将其调度上cpu. */
	g_thread_tag = list_pop(&thread_ready_list);   
c0004232:	83 ec 0c             	sub    $0xc,%esp
c0004235:	68 0c cd 00 c0       	push   $0xc000cd0c
c000423a:	e8 82 03 00 00       	call   c00045c1 <list_pop>
c000423f:	83 c4 10             	add    $0x10,%esp
c0004242:	a3 e8 c6 00 c0       	mov    %eax,0xc000c6e8
/work/x86_os_my/thread/thread.c:201
	struct task_struct* next = elem2entry(struct task_struct, general_tag, g_thread_tag);
c0004247:	a1 e8 c6 00 c0       	mov    0xc000c6e8,%eax
c000424c:	83 e8 44             	sub    $0x44,%eax
c000424f:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/thread/thread.c:202
	next->status = TASK_RUNNING;
c0004252:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0004255:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
/work/x86_os_my/thread/thread.c:206
	
	/* 1.激活线程或进程的页表,【更新CR3寄存器】
	 * 2.用户进程，更新tss中的esp0为进程的特权级0的栈 */
	process_activate(next);
c000425c:	83 ec 0c             	sub    $0xc,%esp
c000425f:	ff 75 f0             	pushl  -0x10(%ebp)
c0004262:	e8 fb 10 00 00       	call   c0005362 <process_activate>
c0004267:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:208

	switch_to(cur, next);
c000426a:	83 ec 08             	sub    $0x8,%esp
c000426d:	ff 75 f0             	pushl  -0x10(%ebp)
c0004270:	ff 75 f4             	pushl  -0xc(%ebp)
c0004273:	e8 58 04 00 00       	call   c00046d0 <switch_to>
c0004278:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:209
}
c000427b:	90                   	nop
c000427c:	c9                   	leave  
c000427d:	c3                   	ret    

c000427e <thread_block>:
thread_block():
/work/x86_os_my/thread/thread.c:212

/* 当前线程将自己阻塞,标志其状态为stat. */
void thread_block(enum task_status stat) {
c000427e:	55                   	push   %ebp
c000427f:	89 e5                	mov    %esp,%ebp
c0004281:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:214
	/* stat取值为TASK_BLOCKED,TASK_WAITING,TASK_HANGING,也就是只有这三种状态才不会被调度*/
	ASSERT(((stat == TASK_BLOCKED) || (stat == TASK_WAITING) || (stat == TASK_HANGING)));
c0004284:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c0004288:	74 28                	je     c00042b2 <thread_block+0x34>
/work/x86_os_my/thread/thread.c:214 (discriminator 1)
c000428a:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
c000428e:	74 22                	je     c00042b2 <thread_block+0x34>
/work/x86_os_my/thread/thread.c:214 (discriminator 2)
c0004290:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
c0004294:	74 1c                	je     c00042b2 <thread_block+0x34>
/work/x86_os_my/thread/thread.c:214 (discriminator 3)
c0004296:	68 14 8f 00 c0       	push   $0xc0008f14
c000429b:	68 94 90 00 c0       	push   $0xc0009094
c00042a0:	68 d6 00 00 00       	push   $0xd6
c00042a5:	68 15 8e 00 c0       	push   $0xc0008e15
c00042aa:	e8 53 e3 ff ff       	call   c0002602 <panic_spin>
c00042af:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:215
	enum intr_status old_status = intr_disable();
c00042b2:	e8 a4 d9 ff ff       	call   c0001c5b <intr_disable>
c00042b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:217
	
	struct task_struct* cur_thread = running_thread();
c00042ba:	e8 42 fb ff ff       	call   c0003e01 <running_thread>
c00042bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/thread/thread.c:218
	cur_thread->status = stat;
c00042c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00042c5:	8b 55 08             	mov    0x8(%ebp),%edx
c00042c8:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/thread/thread.c:219
	schedule();
c00042cb:	e8 61 fe ff ff       	call   c0004131 <schedule>
/work/x86_os_my/thread/thread.c:222
	
	/* 待当前线程被解除阻塞后才继续运行下面的intr_set_status */
	intr_set_status(old_status);
c00042d0:	83 ec 0c             	sub    $0xc,%esp
c00042d3:	ff 75 f4             	pushl  -0xc(%ebp)
c00042d6:	e8 a9 d9 ff ff       	call   c0001c84 <intr_set_status>
c00042db:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:223
}
c00042de:	90                   	nop
c00042df:	c9                   	leave  
c00042e0:	c3                   	ret    

c00042e1 <thread_unblock>:
thread_unblock():
/work/x86_os_my/thread/thread.c:226

/* 将线程pthread解除阻塞 */
void thread_unblock(struct task_struct* pthread) {
c00042e1:	55                   	push   %ebp
c00042e2:	89 e5                	mov    %esp,%ebp
c00042e4:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:227
	enum intr_status old_status = intr_disable();
c00042e7:	e8 6f d9 ff ff       	call   c0001c5b <intr_disable>
c00042ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:228
	ASSERT(((pthread->status == TASK_BLOCKED) || (pthread->status == TASK_WAITING) || (pthread->status == TASK_HANGING)));
c00042ef:	8b 45 08             	mov    0x8(%ebp),%eax
c00042f2:	8b 40 08             	mov    0x8(%eax),%eax
c00042f5:	83 f8 02             	cmp    $0x2,%eax
c00042f8:	74 32                	je     c000432c <thread_unblock+0x4b>
/work/x86_os_my/thread/thread.c:228 (discriminator 1)
c00042fa:	8b 45 08             	mov    0x8(%ebp),%eax
c00042fd:	8b 40 08             	mov    0x8(%eax),%eax
c0004300:	83 f8 03             	cmp    $0x3,%eax
c0004303:	74 27                	je     c000432c <thread_unblock+0x4b>
/work/x86_os_my/thread/thread.c:228 (discriminator 2)
c0004305:	8b 45 08             	mov    0x8(%ebp),%eax
c0004308:	8b 40 08             	mov    0x8(%eax),%eax
c000430b:	83 f8 04             	cmp    $0x4,%eax
c000430e:	74 1c                	je     c000432c <thread_unblock+0x4b>
/work/x86_os_my/thread/thread.c:228 (discriminator 3)
c0004310:	68 64 8f 00 c0       	push   $0xc0008f64
c0004315:	68 a4 90 00 c0       	push   $0xc00090a4
c000431a:	68 e4 00 00 00       	push   $0xe4
c000431f:	68 15 8e 00 c0       	push   $0xc0008e15
c0004324:	e8 d9 e2 ff ff       	call   c0002602 <panic_spin>
c0004329:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:230
	
	if (pthread->status != TASK_READY) {
c000432c:	8b 45 08             	mov    0x8(%ebp),%eax
c000432f:	8b 40 08             	mov    0x8(%eax),%eax
c0004332:	83 f8 01             	cmp    $0x1,%eax
c0004335:	0f 84 8f 00 00 00    	je     c00043ca <thread_unblock+0xe9>
/work/x86_os_my/thread/thread.c:231
		ASSERT(!elem_find(&thread_ready_list, &pthread->general_tag));
c000433b:	8b 45 08             	mov    0x8(%ebp),%eax
c000433e:	83 c0 44             	add    $0x44,%eax
c0004341:	83 ec 08             	sub    $0x8,%esp
c0004344:	50                   	push   %eax
c0004345:	68 0c cd 00 c0       	push   $0xc000cd0c
c000434a:	e8 94 02 00 00       	call   c00045e3 <elem_find>
c000434f:	83 c4 10             	add    $0x10,%esp
c0004352:	85 c0                	test   %eax,%eax
c0004354:	74 1c                	je     c0004372 <thread_unblock+0x91>
/work/x86_os_my/thread/thread.c:231 (discriminator 1)
c0004356:	68 d4 8f 00 c0       	push   $0xc0008fd4
c000435b:	68 a4 90 00 c0       	push   $0xc00090a4
c0004360:	68 e7 00 00 00       	push   $0xe7
c0004365:	68 15 8e 00 c0       	push   $0xc0008e15
c000436a:	e8 93 e2 ff ff       	call   c0002602 <panic_spin>
c000436f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:232
		if (elem_find(&thread_ready_list, &pthread->general_tag)) {
c0004372:	8b 45 08             	mov    0x8(%ebp),%eax
c0004375:	83 c0 44             	add    $0x44,%eax
c0004378:	83 ec 08             	sub    $0x8,%esp
c000437b:	50                   	push   %eax
c000437c:	68 0c cd 00 c0       	push   $0xc000cd0c
c0004381:	e8 5d 02 00 00       	call   c00045e3 <elem_find>
c0004386:	83 c4 10             	add    $0x10,%esp
c0004389:	85 c0                	test   %eax,%eax
c000438b:	74 1c                	je     c00043a9 <thread_unblock+0xc8>
/work/x86_os_my/thread/thread.c:233
			PANIC("thread_unblock: blocked thread in ready_list\n");
c000438d:	68 0c 90 00 c0       	push   $0xc000900c
c0004392:	68 a4 90 00 c0       	push   $0xc00090a4
c0004397:	68 e9 00 00 00       	push   $0xe9
c000439c:	68 15 8e 00 c0       	push   $0xc0008e15
c00043a1:	e8 5c e2 ff ff       	call   c0002602 <panic_spin>
c00043a6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:235
		}
		list_push(&thread_ready_list, &pthread->general_tag);	// 放到队列的最前面,使其尽快得到调度
c00043a9:	8b 45 08             	mov    0x8(%ebp),%eax
c00043ac:	83 c0 44             	add    $0x44,%eax
c00043af:	83 ec 08             	sub    $0x8,%esp
c00043b2:	50                   	push   %eax
c00043b3:	68 0c cd 00 c0       	push   $0xc000cd0c
c00043b8:	e8 8e 01 00 00       	call   c000454b <list_push>
c00043bd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:236
		pthread->status = TASK_READY;
c00043c0:	8b 45 08             	mov    0x8(%ebp),%eax
c00043c3:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/thread/thread.c:239
	}
	
	intr_set_status(old_status);
c00043ca:	83 ec 0c             	sub    $0xc,%esp
c00043cd:	ff 75 f4             	pushl  -0xc(%ebp)
c00043d0:	e8 af d8 ff ff       	call   c0001c84 <intr_set_status>
c00043d5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:240
}
c00043d8:	90                   	nop
c00043d9:	c9                   	leave  
c00043da:	c3                   	ret    

c00043db <thread_yield>:
thread_yield():
/work/x86_os_my/thread/thread.c:243

/* 主动让出cpu，换其它线程运行，但状态仍是ready */
void thread_yield(void) {
c00043db:	55                   	push   %ebp
c00043dc:	89 e5                	mov    %esp,%ebp
c00043de:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:244
	struct task_struct* cur = running_thread();
c00043e1:	e8 1b fa ff ff       	call   c0003e01 <running_thread>
c00043e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:245
	enum intr_status old_status = intr_disable();
c00043e9:	e8 6d d8 ff ff       	call   c0001c5b <intr_disable>
c00043ee:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/thread/thread.c:246
	ASSERT(!elem_find(&thread_ready_list, &cur->general_tag));
c00043f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00043f4:	83 c0 44             	add    $0x44,%eax
c00043f7:	83 ec 08             	sub    $0x8,%esp
c00043fa:	50                   	push   %eax
c00043fb:	68 0c cd 00 c0       	push   $0xc000cd0c
c0004400:	e8 de 01 00 00       	call   c00045e3 <elem_find>
c0004405:	83 c4 10             	add    $0x10,%esp
c0004408:	85 c0                	test   %eax,%eax
c000440a:	74 1c                	je     c0004428 <thread_yield+0x4d>
/work/x86_os_my/thread/thread.c:246 (discriminator 1)
c000440c:	68 c0 8e 00 c0       	push   $0xc0008ec0
c0004411:	68 b4 90 00 c0       	push   $0xc00090b4
c0004416:	68 f6 00 00 00       	push   $0xf6
c000441b:	68 15 8e 00 c0       	push   $0xc0008e15
c0004420:	e8 dd e1 ff ff       	call   c0002602 <panic_spin>
c0004425:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:247
	list_append(&thread_ready_list, &cur->general_tag);
c0004428:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000442b:	83 c0 44             	add    $0x44,%eax
c000442e:	83 ec 08             	sub    $0x8,%esp
c0004431:	50                   	push   %eax
c0004432:	68 0c cd 00 c0       	push   $0xc000cd0c
c0004437:	e8 2d 01 00 00       	call   c0004569 <list_append>
c000443c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:248
	cur->status = TASK_READY;
c000443f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004442:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/thread/thread.c:249
	schedule();
c0004449:	e8 e3 fc ff ff       	call   c0004131 <schedule>
/work/x86_os_my/thread/thread.c:250
	intr_set_status(old_status);
c000444e:	83 ec 0c             	sub    $0xc,%esp
c0004451:	ff 75 f0             	pushl  -0x10(%ebp)
c0004454:	e8 2b d8 ff ff       	call   c0001c84 <intr_set_status>
c0004459:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:251
}
c000445c:	90                   	nop
c000445d:	c9                   	leave  
c000445e:	c3                   	ret    

c000445f <thread_init>:
thread_init():
/work/x86_os_my/thread/thread.c:254

/* 初始化线程环境 */
void thread_init(void) {
c000445f:	55                   	push   %ebp
c0004460:	89 e5                	mov    %esp,%ebp
c0004462:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:255
	put_str("thread_init start\n");
c0004465:	83 ec 0c             	sub    $0xc,%esp
c0004468:	68 3a 90 00 c0       	push   $0xc000903a
c000446d:	e8 1e e0 ff ff       	call   c0002490 <put_str>
c0004472:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:256
	list_init(&thread_ready_list);
c0004475:	83 ec 0c             	sub    $0xc,%esp
c0004478:	68 0c cd 00 c0       	push   $0xc000cd0c
c000447d:	e8 56 00 00 00       	call   c00044d8 <list_init>
c0004482:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:257
	list_init(&thread_all_list);
c0004485:	83 ec 0c             	sub    $0xc,%esp
c0004488:	68 1c cd 00 c0       	push   $0xc000cd1c
c000448d:	e8 46 00 00 00       	call   c00044d8 <list_init>
c0004492:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:258
	lock_init(&pid_lock);
c0004495:	83 ec 0c             	sub    $0xc,%esp
c0004498:	68 34 cd 00 c0       	push   $0xc000cd34
c000449d:	e8 23 03 00 00       	call   c00047c5 <lock_init>
c00044a2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:260
	/* 将当前main函数创建为线程 */
	make_main_thread();
c00044a5:	e8 0a fc ff ff       	call   c00040b4 <make_main_thread>
/work/x86_os_my/thread/thread.c:262
	/* 创建idle线程 */
	idle_thread = thread_start("idle", 10, idle, NULL);
c00044aa:	6a 00                	push   $0x0
c00044ac:	68 ea 3d 00 c0       	push   $0xc0003dea
c00044b1:	6a 0a                	push   $0xa
c00044b3:	68 4d 90 00 c0       	push   $0xc000904d
c00044b8:	e8 18 fb ff ff       	call   c0003fd5 <thread_start>
c00044bd:	83 c4 10             	add    $0x10,%esp
c00044c0:	a3 2c cd 00 c0       	mov    %eax,0xc000cd2c
/work/x86_os_my/thread/thread.c:263
	put_str("thread_init done\n");
c00044c5:	83 ec 0c             	sub    $0xc,%esp
c00044c8:	68 52 90 00 c0       	push   $0xc0009052
c00044cd:	e8 be df ff ff       	call   c0002490 <put_str>
c00044d2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:264
}
c00044d5:	90                   	nop
c00044d6:	c9                   	leave  
c00044d7:	c3                   	ret    

c00044d8 <list_init>:
list_init():
/work/x86_os_my/lib/kernel/list.c:6
#include "list.h"
#include "interrupt.h"
/* 注意关中断的操作：临界区 */

/* 初始化双向链表list */
void list_init (struct list* list) {
c00044d8:	55                   	push   %ebp
c00044d9:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/lib/kernel/list.c:7
	list->head.prev = NULL;
c00044db:	8b 45 08             	mov    0x8(%ebp),%eax
c00044de:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/lib/kernel/list.c:8
	list->head.next = &list->tail;
c00044e4:	8b 45 08             	mov    0x8(%ebp),%eax
c00044e7:	8d 50 08             	lea    0x8(%eax),%edx
c00044ea:	8b 45 08             	mov    0x8(%ebp),%eax
c00044ed:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/lib/kernel/list.c:9
	list->tail.prev = &list->head;
c00044f0:	8b 55 08             	mov    0x8(%ebp),%edx
c00044f3:	8b 45 08             	mov    0x8(%ebp),%eax
c00044f6:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/lib/kernel/list.c:10
	list->tail.next = NULL;
c00044f9:	8b 45 08             	mov    0x8(%ebp),%eax
c00044fc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
/work/x86_os_my/lib/kernel/list.c:11
}
c0004503:	90                   	nop
c0004504:	5d                   	pop    %ebp
c0004505:	c3                   	ret    

c0004506 <list_insert_before>:
list_insert_before():
/work/x86_os_my/lib/kernel/list.c:14

/* 把链表元素elem插入在元素before之前 */
void list_insert_before(struct list_elem* before, struct list_elem* elem) { 
c0004506:	55                   	push   %ebp
c0004507:	89 e5                	mov    %esp,%ebp
c0004509:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/kernel/list.c:15
	enum intr_status old_status = intr_disable();
c000450c:	e8 4a d7 ff ff       	call   c0001c5b <intr_disable>
c0004511:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/list.c:18

	/* 将before前驱元素的后继元素更新为elem, 暂时使before脱离链表*/ 
	before->prev->next = elem; 
c0004514:	8b 45 08             	mov    0x8(%ebp),%eax
c0004517:	8b 00                	mov    (%eax),%eax
c0004519:	8b 55 0c             	mov    0xc(%ebp),%edx
c000451c:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/lib/kernel/list.c:22

	/* 更新elem自己的前驱结点为before的前驱,
	* 更新elem自己的后继结点为before, 于是before又回到链表 */
	elem->prev = before->prev;
c000451f:	8b 45 08             	mov    0x8(%ebp),%eax
c0004522:	8b 10                	mov    (%eax),%edx
c0004524:	8b 45 0c             	mov    0xc(%ebp),%eax
c0004527:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/lib/kernel/list.c:23
	elem->next = before;
c0004529:	8b 45 0c             	mov    0xc(%ebp),%eax
c000452c:	8b 55 08             	mov    0x8(%ebp),%edx
c000452f:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/lib/kernel/list.c:26

	/* 更新before的前驱结点为elem */
	before->prev = elem;
c0004532:	8b 45 08             	mov    0x8(%ebp),%eax
c0004535:	8b 55 0c             	mov    0xc(%ebp),%edx
c0004538:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/lib/kernel/list.c:28

	intr_set_status(old_status);
c000453a:	83 ec 0c             	sub    $0xc,%esp
c000453d:	ff 75 f4             	pushl  -0xc(%ebp)
c0004540:	e8 3f d7 ff ff       	call   c0001c84 <intr_set_status>
c0004545:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:29
}
c0004548:	90                   	nop
c0004549:	c9                   	leave  
c000454a:	c3                   	ret    

c000454b <list_push>:
list_push():
/work/x86_os_my/lib/kernel/list.c:32

/* 添加元素到列表队首,类似栈push操作 */
void list_push(struct list* plist, struct list_elem* elem) {
c000454b:	55                   	push   %ebp
c000454c:	89 e5                	mov    %esp,%ebp
c000454e:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/lib/kernel/list.c:33
	list_insert_before(plist->head.next, elem); // 在队头插入elem
c0004551:	8b 45 08             	mov    0x8(%ebp),%eax
c0004554:	8b 40 04             	mov    0x4(%eax),%eax
c0004557:	83 ec 08             	sub    $0x8,%esp
c000455a:	ff 75 0c             	pushl  0xc(%ebp)
c000455d:	50                   	push   %eax
c000455e:	e8 a3 ff ff ff       	call   c0004506 <list_insert_before>
c0004563:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:34
}
c0004566:	90                   	nop
c0004567:	c9                   	leave  
c0004568:	c3                   	ret    

c0004569 <list_append>:
list_append():
/work/x86_os_my/lib/kernel/list.c:37

/* 追加元素到链表队尾,类似队列的先进先出操作 */
void list_append(struct list* plist, struct list_elem* elem) {
c0004569:	55                   	push   %ebp
c000456a:	89 e5                	mov    %esp,%ebp
c000456c:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/lib/kernel/list.c:38
	list_insert_before(&plist->tail, elem);     // 在队尾的前面插入
c000456f:	8b 45 08             	mov    0x8(%ebp),%eax
c0004572:	83 c0 08             	add    $0x8,%eax
c0004575:	83 ec 08             	sub    $0x8,%esp
c0004578:	ff 75 0c             	pushl  0xc(%ebp)
c000457b:	50                   	push   %eax
c000457c:	e8 85 ff ff ff       	call   c0004506 <list_insert_before>
c0004581:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:39
}
c0004584:	90                   	nop
c0004585:	c9                   	leave  
c0004586:	c3                   	ret    

c0004587 <list_remove>:
list_remove():
/work/x86_os_my/lib/kernel/list.c:42

/* 使元素pelem脱离链表 */
void list_remove(struct list_elem* pelem) {
c0004587:	55                   	push   %ebp
c0004588:	89 e5                	mov    %esp,%ebp
c000458a:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/kernel/list.c:43
	enum intr_status old_status = intr_disable();
c000458d:	e8 c9 d6 ff ff       	call   c0001c5b <intr_disable>
c0004592:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/list.c:45

	pelem->prev->next = pelem->next;
c0004595:	8b 45 08             	mov    0x8(%ebp),%eax
c0004598:	8b 00                	mov    (%eax),%eax
c000459a:	8b 55 08             	mov    0x8(%ebp),%edx
c000459d:	8b 52 04             	mov    0x4(%edx),%edx
c00045a0:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/lib/kernel/list.c:46
	pelem->next->prev = pelem->prev;
c00045a3:	8b 45 08             	mov    0x8(%ebp),%eax
c00045a6:	8b 40 04             	mov    0x4(%eax),%eax
c00045a9:	8b 55 08             	mov    0x8(%ebp),%edx
c00045ac:	8b 12                	mov    (%edx),%edx
c00045ae:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/lib/kernel/list.c:48

	intr_set_status(old_status);
c00045b0:	83 ec 0c             	sub    $0xc,%esp
c00045b3:	ff 75 f4             	pushl  -0xc(%ebp)
c00045b6:	e8 c9 d6 ff ff       	call   c0001c84 <intr_set_status>
c00045bb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:49
}
c00045be:	90                   	nop
c00045bf:	c9                   	leave  
c00045c0:	c3                   	ret    

c00045c1 <list_pop>:
list_pop():
/work/x86_os_my/lib/kernel/list.c:52

/* 将链表第一个元素弹出并返回,类似栈的pop操作 */
struct list_elem* list_pop(struct list* plist) {
c00045c1:	55                   	push   %ebp
c00045c2:	89 e5                	mov    %esp,%ebp
c00045c4:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/kernel/list.c:53
	struct list_elem* elem = plist->head.next;
c00045c7:	8b 45 08             	mov    0x8(%ebp),%eax
c00045ca:	8b 40 04             	mov    0x4(%eax),%eax
c00045cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/list.c:54
	list_remove(elem);
c00045d0:	83 ec 0c             	sub    $0xc,%esp
c00045d3:	ff 75 f4             	pushl  -0xc(%ebp)
c00045d6:	e8 ac ff ff ff       	call   c0004587 <list_remove>
c00045db:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:55
	return elem;
c00045de:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/lib/kernel/list.c:56
} 
c00045e1:	c9                   	leave  
c00045e2:	c3                   	ret    

c00045e3 <elem_find>:
elem_find():
/work/x86_os_my/lib/kernel/list.c:59

/* 从链表中查找元素obj_elem,成功时返回true,失败时返回false */
bool elem_find(struct list* plist, struct list_elem* obj_elem) {
c00045e3:	55                   	push   %ebp
c00045e4:	89 e5                	mov    %esp,%ebp
c00045e6:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:60
	struct list_elem* elem = plist->head.next;
c00045e9:	8b 45 08             	mov    0x8(%ebp),%eax
c00045ec:	8b 40 04             	mov    0x4(%eax),%eax
c00045ef:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/kernel/list.c:61
	while (elem != &plist->tail) {
c00045f2:	eb 18                	jmp    c000460c <elem_find+0x29>
/work/x86_os_my/lib/kernel/list.c:62
	if (elem == obj_elem) {
c00045f4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c00045f7:	3b 45 0c             	cmp    0xc(%ebp),%eax
c00045fa:	75 07                	jne    c0004603 <elem_find+0x20>
/work/x86_os_my/lib/kernel/list.c:63
		return true;
c00045fc:	b8 01 00 00 00       	mov    $0x1,%eax
c0004601:	eb 19                	jmp    c000461c <elem_find+0x39>
/work/x86_os_my/lib/kernel/list.c:65
	}
		elem = elem->next;
c0004603:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0004606:	8b 40 04             	mov    0x4(%eax),%eax
c0004609:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/kernel/list.c:61
} 

/* 从链表中查找元素obj_elem,成功时返回true,失败时返回false */
bool elem_find(struct list* plist, struct list_elem* obj_elem) {
	struct list_elem* elem = plist->head.next;
	while (elem != &plist->tail) {
c000460c:	8b 45 08             	mov    0x8(%ebp),%eax
c000460f:	83 c0 08             	add    $0x8,%eax
c0004612:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0004615:	75 dd                	jne    c00045f4 <elem_find+0x11>
/work/x86_os_my/lib/kernel/list.c:67
	if (elem == obj_elem) {
		return true;
	}
		elem = elem->next;
	}
	return false;
c0004617:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/lib/kernel/list.c:68
}
c000461c:	c9                   	leave  
c000461d:	c3                   	ret    

c000461e <list_traversal>:
list_traversal():
/work/x86_os_my/lib/kernel/list.c:74

/* 把列表plist中的每个元素elem和arg传给回调函数func,
 * arg给func用来判断elem是否符合条件.
 * 本函数的功能是遍历列表内所有元素,逐个判断是否有符合条件的元素。
 * 找到符合条件的元素返回元素指针,否则返回NULL. */
struct list_elem* list_traversal(struct list* plist, function func, int arg) {
c000461e:	55                   	push   %ebp
c000461f:	89 e5                	mov    %esp,%ebp
c0004621:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/kernel/list.c:75
	struct list_elem* elem = plist->head.next;
c0004624:	8b 45 08             	mov    0x8(%ebp),%eax
c0004627:	8b 40 04             	mov    0x4(%eax),%eax
c000462a:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/list.c:77
	/* 如果队列为空,就必然没有符合条件的结点,故直接返回NULL */
	if (list_empty(plist)) { 
c000462d:	83 ec 0c             	sub    $0xc,%esp
c0004630:	ff 75 08             	pushl  0x8(%ebp)
c0004633:	e8 78 00 00 00       	call   c00046b0 <list_empty>
c0004638:	83 c4 10             	add    $0x10,%esp
c000463b:	85 c0                	test   %eax,%eax
c000463d:	74 2a                	je     c0004669 <list_traversal+0x4b>
/work/x86_os_my/lib/kernel/list.c:78
		return NULL;
c000463f:	b8 00 00 00 00       	mov    $0x0,%eax
c0004644:	eb 33                	jmp    c0004679 <list_traversal+0x5b>
/work/x86_os_my/lib/kernel/list.c:82
	}

	while (elem != &plist->tail) {
	if (func(elem, arg)) {		// func返回ture则认为该元素在回调函数中符合条件,命中,故停止继续遍历
c0004646:	83 ec 08             	sub    $0x8,%esp
c0004649:	ff 75 10             	pushl  0x10(%ebp)
c000464c:	ff 75 f4             	pushl  -0xc(%ebp)
c000464f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0004652:	ff d0                	call   *%eax
c0004654:	83 c4 10             	add    $0x10,%esp
c0004657:	85 c0                	test   %eax,%eax
c0004659:	74 05                	je     c0004660 <list_traversal+0x42>
/work/x86_os_my/lib/kernel/list.c:83
		return elem;
c000465b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000465e:	eb 19                	jmp    c0004679 <list_traversal+0x5b>
/work/x86_os_my/lib/kernel/list.c:85
	}
		elem = elem->next;		// 若回调函数func返回false,则继续遍历
c0004660:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004663:	8b 40 04             	mov    0x4(%eax),%eax
c0004666:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/list.c:81
	/* 如果队列为空,就必然没有符合条件的结点,故直接返回NULL */
	if (list_empty(plist)) { 
		return NULL;
	}

	while (elem != &plist->tail) {
c0004669:	8b 45 08             	mov    0x8(%ebp),%eax
c000466c:	83 c0 08             	add    $0x8,%eax
c000466f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0004672:	75 d2                	jne    c0004646 <list_traversal+0x28>
/work/x86_os_my/lib/kernel/list.c:87
	if (func(elem, arg)) {		// func返回ture则认为该元素在回调函数中符合条件,命中,故停止继续遍历
		return elem;
	}
		elem = elem->next;		// 若回调函数func返回false,则继续遍历
	}
	return NULL;
c0004674:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/lib/kernel/list.c:88
}
c0004679:	c9                   	leave  
c000467a:	c3                   	ret    

c000467b <list_len>:
list_len():
/work/x86_os_my/lib/kernel/list.c:91

/* 返回链表长度 */
uint32_t list_len(struct list* plist) {
c000467b:	55                   	push   %ebp
c000467c:	89 e5                	mov    %esp,%ebp
c000467e:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:92
	struct list_elem* elem = plist->head.next;
c0004681:	8b 45 08             	mov    0x8(%ebp),%eax
c0004684:	8b 40 04             	mov    0x4(%eax),%eax
c0004687:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/kernel/list.c:93
	uint32_t length = 0;
c000468a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
/work/x86_os_my/lib/kernel/list.c:94
	while (elem != &plist->tail) {
c0004691:	eb 0d                	jmp    c00046a0 <list_len+0x25>
/work/x86_os_my/lib/kernel/list.c:95
		length++; 
c0004693:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
/work/x86_os_my/lib/kernel/list.c:96
		elem = elem->next;
c0004697:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000469a:	8b 40 04             	mov    0x4(%eax),%eax
c000469d:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/kernel/list.c:94

/* 返回链表长度 */
uint32_t list_len(struct list* plist) {
	struct list_elem* elem = plist->head.next;
	uint32_t length = 0;
	while (elem != &plist->tail) {
c00046a0:	8b 45 08             	mov    0x8(%ebp),%eax
c00046a3:	83 c0 08             	add    $0x8,%eax
c00046a6:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c00046a9:	75 e8                	jne    c0004693 <list_len+0x18>
/work/x86_os_my/lib/kernel/list.c:98
		length++; 
		elem = elem->next;
	}
	return length;
c00046ab:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/kernel/list.c:99
}
c00046ae:	c9                   	leave  
c00046af:	c3                   	ret    

c00046b0 <list_empty>:
list_empty():
/work/x86_os_my/lib/kernel/list.c:102

/* 判断链表是否为空,空时返回true,否则返回false */
bool list_empty(struct list* plist) {		// 判断队列是否为空
c00046b0:	55                   	push   %ebp
c00046b1:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/lib/kernel/list.c:103
	return (plist->head.next == &plist->tail ? true : false);
c00046b3:	8b 45 08             	mov    0x8(%ebp),%eax
c00046b6:	8b 40 04             	mov    0x4(%eax),%eax
c00046b9:	8b 55 08             	mov    0x8(%ebp),%edx
c00046bc:	83 c2 08             	add    $0x8,%edx
c00046bf:	39 d0                	cmp    %edx,%eax
c00046c1:	0f 94 c0             	sete   %al
c00046c4:	0f b6 c0             	movzbl %al,%eax
/work/x86_os_my/lib/kernel/list.c:104
}
c00046c7:	5d                   	pop    %ebp
c00046c8:	c3                   	ret    
c00046c9:	66 90                	xchg   %ax,%ax
c00046cb:	66 90                	xchg   %ax,%ax
c00046cd:	66 90                	xchg   %ax,%ax
c00046cf:	90                   	nop

c00046d0 <switch_to>:
switch_to():
c00046d0:	56                   	push   %esi
c00046d1:	57                   	push   %edi
c00046d2:	53                   	push   %ebx
c00046d3:	55                   	push   %ebp
c00046d4:	8b 44 24 14          	mov    0x14(%esp),%eax
c00046d8:	89 20                	mov    %esp,(%eax)
c00046da:	8b 44 24 18          	mov    0x18(%esp),%eax
c00046de:	8b 20                	mov    (%eax),%esp
c00046e0:	5d                   	pop    %ebp
c00046e1:	5b                   	pop    %ebx
c00046e2:	5f                   	pop    %edi
c00046e3:	5e                   	pop    %esi
c00046e4:	c3                   	ret    

c00046e5 <console_init>:
console_init():
/work/x86_os_my/device/console.c:9
#include "sync.h"
#include "thread.h"
static struct lock console_lock;	// 控制台锁

/* 初始化终端 */
void console_init() {
c00046e5:	55                   	push   %ebp
c00046e6:	89 e5                	mov    %esp,%ebp
c00046e8:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/console.c:10
	lock_init(&console_lock);
c00046eb:	83 ec 0c             	sub    $0xc,%esp
c00046ee:	68 f0 c6 00 c0       	push   $0xc000c6f0
c00046f3:	e8 cd 00 00 00       	call   c00047c5 <lock_init>
c00046f8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:11
}
c00046fb:	90                   	nop
c00046fc:	c9                   	leave  
c00046fd:	c3                   	ret    

c00046fe <console_acquire>:
console_acquire():
/work/x86_os_my/device/console.c:14

/* 获取终端 */
void console_acquire() {
c00046fe:	55                   	push   %ebp
c00046ff:	89 e5                	mov    %esp,%ebp
c0004701:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/console.c:15
	lock_acquire(&console_lock);
c0004704:	83 ec 0c             	sub    $0xc,%esp
c0004707:	68 f0 c6 00 c0       	push   $0xc000c6f0
c000470c:	e8 8e 02 00 00       	call   c000499f <lock_acquire>
c0004711:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:16
}
c0004714:	90                   	nop
c0004715:	c9                   	leave  
c0004716:	c3                   	ret    

c0004717 <console_release>:
console_release():
/work/x86_os_my/device/console.c:19

/* 释放终端 */
void console_release() {
c0004717:	55                   	push   %ebp
c0004718:	89 e5                	mov    %esp,%ebp
c000471a:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/console.c:20
	lock_release(&console_lock);
c000471d:	83 ec 0c             	sub    $0xc,%esp
c0004720:	68 f0 c6 00 c0       	push   $0xc000c6f0
c0004725:	e8 ec 02 00 00       	call   c0004a16 <lock_release>
c000472a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:21
}
c000472d:	90                   	nop
c000472e:	c9                   	leave  
c000472f:	c3                   	ret    

c0004730 <console_put_str>:
console_put_str():
/work/x86_os_my/device/console.c:24

/* 终端中输出字符串 */
void console_put_str(char* str) {
c0004730:	55                   	push   %ebp
c0004731:	89 e5                	mov    %esp,%ebp
c0004733:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/console.c:25
	console_acquire();
c0004736:	e8 c3 ff ff ff       	call   c00046fe <console_acquire>
/work/x86_os_my/device/console.c:26
	put_str(str);
c000473b:	83 ec 0c             	sub    $0xc,%esp
c000473e:	ff 75 08             	pushl  0x8(%ebp)
c0004741:	e8 4a dd ff ff       	call   c0002490 <put_str>
c0004746:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:27
	console_release();
c0004749:	e8 c9 ff ff ff       	call   c0004717 <console_release>
/work/x86_os_my/device/console.c:28
}
c000474e:	90                   	nop
c000474f:	c9                   	leave  
c0004750:	c3                   	ret    

c0004751 <console_put_char>:
console_put_char():
/work/x86_os_my/device/console.c:31

/* 终端中输出字符 */
void console_put_char(uint8_t char_asci) {
c0004751:	55                   	push   %ebp
c0004752:	89 e5                	mov    %esp,%ebp
c0004754:	83 ec 18             	sub    $0x18,%esp
c0004757:	8b 45 08             	mov    0x8(%ebp),%eax
c000475a:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/device/console.c:32
	console_acquire();
c000475d:	e8 9c ff ff ff       	call   c00046fe <console_acquire>
/work/x86_os_my/device/console.c:33
	put_char(char_asci);
c0004762:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0004766:	83 ec 0c             	sub    $0xc,%esp
c0004769:	50                   	push   %eax
c000476a:	e8 3f dd ff ff       	call   c00024ae <put_char>
c000476f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:34
	console_release();
c0004772:	e8 a0 ff ff ff       	call   c0004717 <console_release>
/work/x86_os_my/device/console.c:35
}
c0004777:	90                   	nop
c0004778:	c9                   	leave  
c0004779:	c3                   	ret    

c000477a <console_put_int>:
console_put_int():
/work/x86_os_my/device/console.c:38

/* 终端中输出16进制整数 */
void console_put_int(uint32_t num) {
c000477a:	55                   	push   %ebp
c000477b:	89 e5                	mov    %esp,%ebp
c000477d:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/console.c:39
	console_acquire();
c0004780:	e8 79 ff ff ff       	call   c00046fe <console_acquire>
/work/x86_os_my/device/console.c:40
	put_int(num);
c0004785:	83 ec 0c             	sub    $0xc,%esp
c0004788:	ff 75 08             	pushl  0x8(%ebp)
c000478b:	e8 eb dd ff ff       	call   c000257b <put_int>
c0004790:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:41
	console_release();
c0004793:	e8 7f ff ff ff       	call   c0004717 <console_release>
/work/x86_os_my/device/console.c:42
}
c0004798:	90                   	nop
c0004799:	c9                   	leave  
c000479a:	c3                   	ret    

c000479b <sema_init>:
sema_init():
/work/x86_os_my/thread/sync.c:8
#include "global.h"
#include "debug.h"
#include "interrupt.h"

/* 初始化信号量 */
void sema_init(struct semaphore* psema, uint8_t value) {
c000479b:	55                   	push   %ebp
c000479c:	89 e5                	mov    %esp,%ebp
c000479e:	83 ec 18             	sub    $0x18,%esp
c00047a1:	8b 45 0c             	mov    0xc(%ebp),%eax
c00047a4:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/thread/sync.c:9
	psema->value = value;       // 为信号量赋初值
c00047a7:	8b 45 08             	mov    0x8(%ebp),%eax
c00047aa:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
c00047ae:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/thread/sync.c:10
	list_init(&psema->waiters); //初始化信号量的等待队列
c00047b0:	8b 45 08             	mov    0x8(%ebp),%eax
c00047b3:	83 c0 04             	add    $0x4,%eax
c00047b6:	83 ec 0c             	sub    $0xc,%esp
c00047b9:	50                   	push   %eax
c00047ba:	e8 19 fd ff ff       	call   c00044d8 <list_init>
c00047bf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:11
}
c00047c2:	90                   	nop
c00047c3:	c9                   	leave  
c00047c4:	c3                   	ret    

c00047c5 <lock_init>:
lock_init():
/work/x86_os_my/thread/sync.c:14

/* 初始化锁plock */
void lock_init(struct lock* plock) {
c00047c5:	55                   	push   %ebp
c00047c6:	89 e5                	mov    %esp,%ebp
c00047c8:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/sync.c:15
	plock->holder = NULL;
c00047cb:	8b 45 08             	mov    0x8(%ebp),%eax
c00047ce:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/thread/sync.c:16
	plock->holder_repeat_nr = 0;
c00047d4:	8b 45 08             	mov    0x8(%ebp),%eax
c00047d7:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
/work/x86_os_my/thread/sync.c:17
	sema_init(&plock->semaphore, 1);  // 信号量初值为1
c00047de:	8b 45 08             	mov    0x8(%ebp),%eax
c00047e1:	83 c0 04             	add    $0x4,%eax
c00047e4:	83 ec 08             	sub    $0x8,%esp
c00047e7:	6a 01                	push   $0x1
c00047e9:	50                   	push   %eax
c00047ea:	e8 ac ff ff ff       	call   c000479b <sema_init>
c00047ef:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:18
}
c00047f2:	90                   	nop
c00047f3:	c9                   	leave  
c00047f4:	c3                   	ret    

c00047f5 <sema_down>:
sema_down():
/work/x86_os_my/thread/sync.c:21

/* 信号量down操作 */
void sema_down(struct semaphore* psema) {
c00047f5:	55                   	push   %ebp
c00047f6:	89 e5                	mov    %esp,%ebp
c00047f8:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/sync.c:23
	/* 关中断来保证原子操作 */
	enum intr_status old_status = intr_disable();
c00047fb:	e8 5b d4 ff ff       	call   c0001c5b <intr_disable>
c0004800:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/sync.c:25
	
	while(psema->value == 0) {			// 若value为0,表示已经被别人持有【while多次判断】
c0004803:	e9 98 00 00 00       	jmp    c00048a0 <sema_down+0xab>
/work/x86_os_my/thread/sync.c:26
		ASSERT(!elem_find(&psema->waiters, &running_thread()->general_tag));
c0004808:	e8 f4 f5 ff ff       	call   c0003e01 <running_thread>
c000480d:	8d 50 44             	lea    0x44(%eax),%edx
c0004810:	8b 45 08             	mov    0x8(%ebp),%eax
c0004813:	83 c0 04             	add    $0x4,%eax
c0004816:	83 ec 08             	sub    $0x8,%esp
c0004819:	52                   	push   %edx
c000481a:	50                   	push   %eax
c000481b:	e8 c3 fd ff ff       	call   c00045e3 <elem_find>
c0004820:	83 c4 10             	add    $0x10,%esp
c0004823:	85 c0                	test   %eax,%eax
c0004825:	74 19                	je     c0004840 <sema_down+0x4b>
/work/x86_os_my/thread/sync.c:26 (discriminator 1)
c0004827:	68 c4 90 00 c0       	push   $0xc00090c4
c000482c:	68 c8 91 00 c0       	push   $0xc00091c8
c0004831:	6a 1a                	push   $0x1a
c0004833:	68 00 91 00 c0       	push   $0xc0009100
c0004838:	e8 c5 dd ff ff       	call   c0002602 <panic_spin>
c000483d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:28
		/* 当前线程不应该已在信号量的waiters队列中 */
		if (elem_find(&psema->waiters, &running_thread()->general_tag)) {
c0004840:	e8 bc f5 ff ff       	call   c0003e01 <running_thread>
c0004845:	8d 50 44             	lea    0x44(%eax),%edx
c0004848:	8b 45 08             	mov    0x8(%ebp),%eax
c000484b:	83 c0 04             	add    $0x4,%eax
c000484e:	83 ec 08             	sub    $0x8,%esp
c0004851:	52                   	push   %edx
c0004852:	50                   	push   %eax
c0004853:	e8 8b fd ff ff       	call   c00045e3 <elem_find>
c0004858:	83 c4 10             	add    $0x10,%esp
c000485b:	85 c0                	test   %eax,%eax
c000485d:	74 19                	je     c0004878 <sema_down+0x83>
/work/x86_os_my/thread/sync.c:29
			PANIC("sema_down: thread blocked has been in waiters_list\n");
c000485f:	68 10 91 00 c0       	push   $0xc0009110
c0004864:	68 c8 91 00 c0       	push   $0xc00091c8
c0004869:	6a 1d                	push   $0x1d
c000486b:	68 00 91 00 c0       	push   $0xc0009100
c0004870:	e8 8d dd ff ff       	call   c0002602 <panic_spin>
c0004875:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:32
		}
		/* 若信号量的值等于0,则当前线程把自己加入该锁的等待队列,然后阻塞自己 */
		list_append(&psema->waiters, &running_thread()->general_tag);
c0004878:	e8 84 f5 ff ff       	call   c0003e01 <running_thread>
c000487d:	8d 50 44             	lea    0x44(%eax),%edx
c0004880:	8b 45 08             	mov    0x8(%ebp),%eax
c0004883:	83 c0 04             	add    $0x4,%eax
c0004886:	83 ec 08             	sub    $0x8,%esp
c0004889:	52                   	push   %edx
c000488a:	50                   	push   %eax
c000488b:	e8 d9 fc ff ff       	call   c0004569 <list_append>
c0004890:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:33
		thread_block(TASK_BLOCKED);		// 阻塞线程,直到被唤醒
c0004893:	83 ec 0c             	sub    $0xc,%esp
c0004896:	6a 02                	push   $0x2
c0004898:	e8 e1 f9 ff ff       	call   c000427e <thread_block>
c000489d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:25
/* 信号量down操作 */
void sema_down(struct semaphore* psema) {
	/* 关中断来保证原子操作 */
	enum intr_status old_status = intr_disable();
	
	while(psema->value == 0) {			// 若value为0,表示已经被别人持有【while多次判断】
c00048a0:	8b 45 08             	mov    0x8(%ebp),%eax
c00048a3:	0f b6 00             	movzbl (%eax),%eax
c00048a6:	84 c0                	test   %al,%al
c00048a8:	0f 84 5a ff ff ff    	je     c0004808 <sema_down+0x13>
/work/x86_os_my/thread/sync.c:36
		/* 若信号量的值等于0,则当前线程把自己加入该锁的等待队列,然后阻塞自己 */
		list_append(&psema->waiters, &running_thread()->general_tag);
		thread_block(TASK_BLOCKED);		// 阻塞线程,直到被唤醒
	}
	/* 若value为1或被唤醒后,会执行下面的代码,也就是获得了锁。*/
	psema->value--;
c00048ae:	8b 45 08             	mov    0x8(%ebp),%eax
c00048b1:	0f b6 00             	movzbl (%eax),%eax
c00048b4:	8d 50 ff             	lea    -0x1(%eax),%edx
c00048b7:	8b 45 08             	mov    0x8(%ebp),%eax
c00048ba:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/thread/sync.c:37
	ASSERT(psema->value == 0);
c00048bc:	8b 45 08             	mov    0x8(%ebp),%eax
c00048bf:	0f b6 00             	movzbl (%eax),%eax
c00048c2:	84 c0                	test   %al,%al
c00048c4:	74 19                	je     c00048df <sema_down+0xea>
/work/x86_os_my/thread/sync.c:37 (discriminator 1)
c00048c6:	68 44 91 00 c0       	push   $0xc0009144
c00048cb:	68 c8 91 00 c0       	push   $0xc00091c8
c00048d0:	6a 25                	push   $0x25
c00048d2:	68 00 91 00 c0       	push   $0xc0009100
c00048d7:	e8 26 dd ff ff       	call   c0002602 <panic_spin>
c00048dc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:40
	
	/* 恢复之前的中断状态 */
	intr_set_status(old_status);
c00048df:	83 ec 0c             	sub    $0xc,%esp
c00048e2:	ff 75 f4             	pushl  -0xc(%ebp)
c00048e5:	e8 9a d3 ff ff       	call   c0001c84 <intr_set_status>
c00048ea:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:41
}
c00048ed:	90                   	nop
c00048ee:	c9                   	leave  
c00048ef:	c3                   	ret    

c00048f0 <sema_up>:
sema_up():
/work/x86_os_my/thread/sync.c:44

/* 信号量的up操作 */
void sema_up(struct semaphore* psema) {
c00048f0:	55                   	push   %ebp
c00048f1:	89 e5                	mov    %esp,%ebp
c00048f3:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/sync.c:46
	/* 关中断,保证原子操作 */
	enum intr_status old_status = intr_disable();
c00048f6:	e8 60 d3 ff ff       	call   c0001c5b <intr_disable>
c00048fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/sync.c:48
	
	ASSERT(psema->value == 0);
c00048fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0004901:	0f b6 00             	movzbl (%eax),%eax
c0004904:	84 c0                	test   %al,%al
c0004906:	74 19                	je     c0004921 <sema_up+0x31>
/work/x86_os_my/thread/sync.c:48 (discriminator 1)
c0004908:	68 44 91 00 c0       	push   $0xc0009144
c000490d:	68 d4 91 00 c0       	push   $0xc00091d4
c0004912:	6a 30                	push   $0x30
c0004914:	68 00 91 00 c0       	push   $0xc0009100
c0004919:	e8 e4 dc ff ff       	call   c0002602 <panic_spin>
c000491e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:49
	if (!list_empty(&psema->waiters)) {
c0004921:	8b 45 08             	mov    0x8(%ebp),%eax
c0004924:	83 c0 04             	add    $0x4,%eax
c0004927:	83 ec 0c             	sub    $0xc,%esp
c000492a:	50                   	push   %eax
c000492b:	e8 80 fd ff ff       	call   c00046b0 <list_empty>
c0004930:	83 c4 10             	add    $0x10,%esp
c0004933:	85 c0                	test   %eax,%eax
c0004935:	75 26                	jne    c000495d <sema_up+0x6d>
/work/x86_os_my/thread/sync.c:50
		struct task_struct* thread_blocked = elem2entry(struct task_struct, general_tag, list_pop(&psema->waiters));
c0004937:	8b 45 08             	mov    0x8(%ebp),%eax
c000493a:	83 c0 04             	add    $0x4,%eax
c000493d:	83 ec 0c             	sub    $0xc,%esp
c0004940:	50                   	push   %eax
c0004941:	e8 7b fc ff ff       	call   c00045c1 <list_pop>
c0004946:	83 c4 10             	add    $0x10,%esp
c0004949:	83 e8 44             	sub    $0x44,%eax
c000494c:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/thread/sync.c:51
		thread_unblock(thread_blocked);
c000494f:	83 ec 0c             	sub    $0xc,%esp
c0004952:	ff 75 f0             	pushl  -0x10(%ebp)
c0004955:	e8 87 f9 ff ff       	call   c00042e1 <thread_unblock>
c000495a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:53
	}
	psema->value++;
c000495d:	8b 45 08             	mov    0x8(%ebp),%eax
c0004960:	0f b6 00             	movzbl (%eax),%eax
c0004963:	8d 50 01             	lea    0x1(%eax),%edx
c0004966:	8b 45 08             	mov    0x8(%ebp),%eax
c0004969:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/thread/sync.c:54
	ASSERT(psema->value == 1);
c000496b:	8b 45 08             	mov    0x8(%ebp),%eax
c000496e:	0f b6 00             	movzbl (%eax),%eax
c0004971:	3c 01                	cmp    $0x1,%al
c0004973:	74 19                	je     c000498e <sema_up+0x9e>
/work/x86_os_my/thread/sync.c:54 (discriminator 1)
c0004975:	68 56 91 00 c0       	push   $0xc0009156
c000497a:	68 d4 91 00 c0       	push   $0xc00091d4
c000497f:	6a 36                	push   $0x36
c0004981:	68 00 91 00 c0       	push   $0xc0009100
c0004986:	e8 77 dc ff ff       	call   c0002602 <panic_spin>
c000498b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:57
	
	/* 恢复之前的中断状态 */
	intr_set_status(old_status);
c000498e:	83 ec 0c             	sub    $0xc,%esp
c0004991:	ff 75 f4             	pushl  -0xc(%ebp)
c0004994:	e8 eb d2 ff ff       	call   c0001c84 <intr_set_status>
c0004999:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:58
}
c000499c:	90                   	nop
c000499d:	c9                   	leave  
c000499e:	c3                   	ret    

c000499f <lock_acquire>:
lock_acquire():
/work/x86_os_my/thread/sync.c:61

/* 获取锁plock */
void lock_acquire(struct lock* plock) {
c000499f:	55                   	push   %ebp
c00049a0:	89 e5                	mov    %esp,%ebp
c00049a2:	53                   	push   %ebx
c00049a3:	83 ec 04             	sub    $0x4,%esp
/work/x86_os_my/thread/sync.c:63
	/* 排除曾经自己已经持有锁但还未将其释放的情况。*/
	if (plock->holder != running_thread()) {
c00049a6:	8b 45 08             	mov    0x8(%ebp),%eax
c00049a9:	8b 18                	mov    (%eax),%ebx
c00049ab:	e8 51 f4 ff ff       	call   c0003e01 <running_thread>
c00049b0:	39 c3                	cmp    %eax,%ebx
c00049b2:	74 4d                	je     c0004a01 <lock_acquire+0x62>
/work/x86_os_my/thread/sync.c:64
		sema_down(&plock->semaphore);	// 对信号量P操作,原子操作
c00049b4:	8b 45 08             	mov    0x8(%ebp),%eax
c00049b7:	83 c0 04             	add    $0x4,%eax
c00049ba:	83 ec 0c             	sub    $0xc,%esp
c00049bd:	50                   	push   %eax
c00049be:	e8 32 fe ff ff       	call   c00047f5 <sema_down>
c00049c3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:65
		plock->holder = running_thread();
c00049c6:	e8 36 f4 ff ff       	call   c0003e01 <running_thread>
c00049cb:	89 c2                	mov    %eax,%edx
c00049cd:	8b 45 08             	mov    0x8(%ebp),%eax
c00049d0:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/thread/sync.c:66
		ASSERT(plock->holder_repeat_nr == 0);
c00049d2:	8b 45 08             	mov    0x8(%ebp),%eax
c00049d5:	8b 40 18             	mov    0x18(%eax),%eax
c00049d8:	85 c0                	test   %eax,%eax
c00049da:	74 19                	je     c00049f5 <lock_acquire+0x56>
/work/x86_os_my/thread/sync.c:66 (discriminator 1)
c00049dc:	68 68 91 00 c0       	push   $0xc0009168
c00049e1:	68 dc 91 00 c0       	push   $0xc00091dc
c00049e6:	6a 42                	push   $0x42
c00049e8:	68 00 91 00 c0       	push   $0xc0009100
c00049ed:	e8 10 dc ff ff       	call   c0002602 <panic_spin>
c00049f2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:67
		plock->holder_repeat_nr = 1;
c00049f5:	8b 45 08             	mov    0x8(%ebp),%eax
c00049f8:	c7 40 18 01 00 00 00 	movl   $0x1,0x18(%eax)
/work/x86_os_my/thread/sync.c:71
	} else {
		plock->holder_repeat_nr++;
	}
}
c00049ff:	eb 0f                	jmp    c0004a10 <lock_acquire+0x71>
/work/x86_os_my/thread/sync.c:69
		sema_down(&plock->semaphore);	// 对信号量P操作,原子操作
		plock->holder = running_thread();
		ASSERT(plock->holder_repeat_nr == 0);
		plock->holder_repeat_nr = 1;
	} else {
		plock->holder_repeat_nr++;
c0004a01:	8b 45 08             	mov    0x8(%ebp),%eax
c0004a04:	8b 40 18             	mov    0x18(%eax),%eax
c0004a07:	8d 50 01             	lea    0x1(%eax),%edx
c0004a0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0004a0d:	89 50 18             	mov    %edx,0x18(%eax)
/work/x86_os_my/thread/sync.c:71
	}
}
c0004a10:	90                   	nop
c0004a11:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0004a14:	c9                   	leave  
c0004a15:	c3                   	ret    

c0004a16 <lock_release>:
lock_release():
/work/x86_os_my/thread/sync.c:74

/* 释放锁plock */
void lock_release(struct lock* plock) {
c0004a16:	55                   	push   %ebp
c0004a17:	89 e5                	mov    %esp,%ebp
c0004a19:	53                   	push   %ebx
c0004a1a:	83 ec 04             	sub    $0x4,%esp
/work/x86_os_my/thread/sync.c:75
	ASSERT(plock->holder == running_thread());
c0004a1d:	8b 45 08             	mov    0x8(%ebp),%eax
c0004a20:	8b 18                	mov    (%eax),%ebx
c0004a22:	e8 da f3 ff ff       	call   c0003e01 <running_thread>
c0004a27:	39 c3                	cmp    %eax,%ebx
c0004a29:	74 19                	je     c0004a44 <lock_release+0x2e>
/work/x86_os_my/thread/sync.c:75 (discriminator 1)
c0004a2b:	68 88 91 00 c0       	push   $0xc0009188
c0004a30:	68 ec 91 00 c0       	push   $0xc00091ec
c0004a35:	6a 4b                	push   $0x4b
c0004a37:	68 00 91 00 c0       	push   $0xc0009100
c0004a3c:	e8 c1 db ff ff       	call   c0002602 <panic_spin>
c0004a41:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:76
	if (plock->holder_repeat_nr > 1) {
c0004a44:	8b 45 08             	mov    0x8(%ebp),%eax
c0004a47:	8b 40 18             	mov    0x18(%eax),%eax
c0004a4a:	83 f8 01             	cmp    $0x1,%eax
c0004a4d:	76 11                	jbe    c0004a60 <lock_release+0x4a>
/work/x86_os_my/thread/sync.c:77
		plock->holder_repeat_nr--;
c0004a4f:	8b 45 08             	mov    0x8(%ebp),%eax
c0004a52:	8b 40 18             	mov    0x18(%eax),%eax
c0004a55:	8d 50 ff             	lea    -0x1(%eax),%edx
c0004a58:	8b 45 08             	mov    0x8(%ebp),%eax
c0004a5b:	89 50 18             	mov    %edx,0x18(%eax)
/work/x86_os_my/thread/sync.c:78
		return;
c0004a5e:	eb 49                	jmp    c0004aa9 <lock_release+0x93>
/work/x86_os_my/thread/sync.c:80
	}
	ASSERT(plock->holder_repeat_nr == 1);
c0004a60:	8b 45 08             	mov    0x8(%ebp),%eax
c0004a63:	8b 40 18             	mov    0x18(%eax),%eax
c0004a66:	83 f8 01             	cmp    $0x1,%eax
c0004a69:	74 19                	je     c0004a84 <lock_release+0x6e>
/work/x86_os_my/thread/sync.c:80 (discriminator 1)
c0004a6b:	68 aa 91 00 c0       	push   $0xc00091aa
c0004a70:	68 ec 91 00 c0       	push   $0xc00091ec
c0004a75:	6a 50                	push   $0x50
c0004a77:	68 00 91 00 c0       	push   $0xc0009100
c0004a7c:	e8 81 db ff ff       	call   c0002602 <panic_spin>
c0004a81:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:82

	plock->holder = NULL;			// 把锁的持有者置空放在V操作之前
c0004a84:	8b 45 08             	mov    0x8(%ebp),%eax
c0004a87:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/thread/sync.c:83
	plock->holder_repeat_nr = 0;
c0004a8d:	8b 45 08             	mov    0x8(%ebp),%eax
c0004a90:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
/work/x86_os_my/thread/sync.c:84
	sema_up(&plock->semaphore);		// 信号量的V操作,也是原子操作
c0004a97:	8b 45 08             	mov    0x8(%ebp),%eax
c0004a9a:	83 c0 04             	add    $0x4,%eax
c0004a9d:	83 ec 0c             	sub    $0xc,%esp
c0004aa0:	50                   	push   %eax
c0004aa1:	e8 4a fe ff ff       	call   c00048f0 <sema_up>
c0004aa6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:85
}
c0004aa9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0004aac:	c9                   	leave  
c0004aad:	c3                   	ret    

c0004aae <inb>:
inb():
/work/x86_os_my/lib/kernel/io.h:36
   asm volatile ("cld; rep outsw" : "+S" (addr), "+c" (word_cnt) : "d" (port));
/******************************************************/
}

/* 将从端口port读入的一个字节返回 */
static inline uint8_t inb(uint16_t port) {
c0004aae:	55                   	push   %ebp
c0004aaf:	89 e5                	mov    %esp,%ebp
c0004ab1:	83 ec 14             	sub    $0x14,%esp
c0004ab4:	8b 45 08             	mov    0x8(%ebp),%eax
c0004ab7:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
/work/x86_os_my/lib/kernel/io.h:38
   uint8_t data;
   asm volatile ("inb %w1, %b0" : "=a" (data) : "Nd" (port));
c0004abb:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0004abf:	89 c2                	mov    %eax,%edx
c0004ac1:	ec                   	in     (%dx),%al
c0004ac2:	88 45 ff             	mov    %al,-0x1(%ebp)
/work/x86_os_my/lib/kernel/io.h:39
   return data;
c0004ac5:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
/work/x86_os_my/lib/kernel/io.h:40
}
c0004ac9:	c9                   	leave  
c0004aca:	c3                   	ret    

c0004acb <intr_keyboard_handler>:
intr_keyboard_handler():
/work/x86_os_my/device/keyboard.c:111
/* 0x3A */	{caps_lock_char, caps_lock_char}
/*其它按键暂不处理*/
};

/* 键盘中断处理程序 */
static void intr_keyboard_handler(void) {
c0004acb:	55                   	push   %ebp
c0004acc:	89 e5                	mov    %esp,%ebp
c0004ace:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/device/keyboard.c:114

/* 这次中断发生前的上一次中断,以下任意三个键是否有按下 */
   bool ctrl_down_last = ctrl_status;	  
c0004ad1:	a1 0c c7 00 c0       	mov    0xc000c70c,%eax
c0004ad6:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/device/keyboard.c:115
   bool shift_down_last = shift_status;
c0004ad9:	a1 10 c7 00 c0       	mov    0xc000c710,%eax
c0004ade:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/device/keyboard.c:116
   bool caps_lock_last = caps_lock_status;
c0004ae1:	a1 18 c7 00 c0       	mov    0xc000c718,%eax
c0004ae6:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/device/keyboard.c:119

   bool break_code;
   uint16_t scancode = inb(KBD_BUF_PORT);
c0004ae9:	6a 60                	push   $0x60
c0004aeb:	e8 be ff ff ff       	call   c0004aae <inb>
c0004af0:	83 c4 04             	add    $0x4,%esp
c0004af3:	0f b6 c0             	movzbl %al,%eax
c0004af6:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
/work/x86_os_my/device/keyboard.c:123

/* 若扫描码是e0开头的,表示此键的按下将产生多个扫描码,
 * 所以马上结束此次中断处理函数,等待下一个扫描码进来*/ 
   if (scancode == 0xe0) { 
c0004afa:	66 81 7d f6 e0 00    	cmpw   $0xe0,-0xa(%ebp)
c0004b00:	75 0f                	jne    c0004b11 <intr_keyboard_handler+0x46>
/work/x86_os_my/device/keyboard.c:124
      ext_scancode = true;    // 打开e0标记
c0004b02:	c7 05 1c c7 00 c0 01 	movl   $0x1,0xc000c71c
c0004b09:	00 00 00 
/work/x86_os_my/device/keyboard.c:125
      return;
c0004b0c:	e9 50 02 00 00       	jmp    c0004d61 <intr_keyboard_handler+0x296>
/work/x86_os_my/device/keyboard.c:129
   }

/* 如果上次是以0xe0开头,将扫描码合并 */
   if (ext_scancode) {
c0004b11:	a1 1c c7 00 c0       	mov    0xc000c71c,%eax
c0004b16:	85 c0                	test   %eax,%eax
c0004b18:	74 10                	je     c0004b2a <intr_keyboard_handler+0x5f>
/work/x86_os_my/device/keyboard.c:130
      scancode = ((0xe000) | scancode);
c0004b1a:	66 81 4d f6 00 e0    	orw    $0xe000,-0xa(%ebp)
/work/x86_os_my/device/keyboard.c:131
      ext_scancode = false;   // 关闭e0标记
c0004b20:	c7 05 1c c7 00 c0 00 	movl   $0x0,0xc000c71c
c0004b27:	00 00 00 
/work/x86_os_my/device/keyboard.c:134
   }   

   break_code = ((scancode & 0x0080) != 0);   // 获取break_code
c0004b2a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0004b2e:	25 80 00 00 00       	and    $0x80,%eax
c0004b33:	85 c0                	test   %eax,%eax
c0004b35:	0f 95 c0             	setne  %al
c0004b38:	0f b6 c0             	movzbl %al,%eax
c0004b3b:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/device/keyboard.c:136
   
   if (break_code) {   // 若是断码break_code(按键弹起时产生的扫描码)
c0004b3e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0004b42:	74 6a                	je     c0004bae <intr_keyboard_handler+0xe3>
/work/x86_os_my/device/keyboard.c:140

   /* 由于ctrl_r 和alt_r的make_code和break_code都是两字节,
   所以可用下面的方法取make_code,多字节的扫描码暂不处理 */
      uint16_t make_code = (scancode &= 0xff7f);   // 得到其make_code(按键按下时产生的扫描码)
c0004b44:	66 81 65 f6 7f ff    	andw   $0xff7f,-0xa(%ebp)
c0004b4a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0004b4e:	66 89 45 da          	mov    %ax,-0x26(%ebp)
/work/x86_os_my/device/keyboard.c:143

   /* 若是任意以下三个键弹起了,将状态置为false */
      if (make_code == ctrl_l_make || make_code == ctrl_r_make) {
c0004b52:	66 83 7d da 1d       	cmpw   $0x1d,-0x26(%ebp)
c0004b57:	74 08                	je     c0004b61 <intr_keyboard_handler+0x96>
/work/x86_os_my/device/keyboard.c:143 (discriminator 1)
c0004b59:	66 81 7d da 1d e0    	cmpw   $0xe01d,-0x26(%ebp)
c0004b5f:	75 0c                	jne    c0004b6d <intr_keyboard_handler+0xa2>
/work/x86_os_my/device/keyboard.c:144
	 ctrl_status = false;
c0004b61:	c7 05 0c c7 00 c0 00 	movl   $0x0,0xc000c70c
c0004b68:	00 00 00 
c0004b6b:	eb 3c                	jmp    c0004ba9 <intr_keyboard_handler+0xde>
/work/x86_os_my/device/keyboard.c:145
      } else if (make_code == shift_l_make || make_code == shift_r_make) {
c0004b6d:	66 83 7d da 2a       	cmpw   $0x2a,-0x26(%ebp)
c0004b72:	74 07                	je     c0004b7b <intr_keyboard_handler+0xb0>
/work/x86_os_my/device/keyboard.c:145 (discriminator 1)
c0004b74:	66 83 7d da 36       	cmpw   $0x36,-0x26(%ebp)
c0004b79:	75 0c                	jne    c0004b87 <intr_keyboard_handler+0xbc>
/work/x86_os_my/device/keyboard.c:146
	 shift_status = false;
c0004b7b:	c7 05 10 c7 00 c0 00 	movl   $0x0,0xc000c710
c0004b82:	00 00 00 
c0004b85:	eb 22                	jmp    c0004ba9 <intr_keyboard_handler+0xde>
/work/x86_os_my/device/keyboard.c:147
      } else if (make_code == alt_l_make || make_code == alt_r_make) {
c0004b87:	66 83 7d da 38       	cmpw   $0x38,-0x26(%ebp)
c0004b8c:	74 0c                	je     c0004b9a <intr_keyboard_handler+0xcf>
/work/x86_os_my/device/keyboard.c:147 (discriminator 1)
c0004b8e:	66 81 7d da 38 e0    	cmpw   $0xe038,-0x26(%ebp)
c0004b94:	0f 85 c0 01 00 00    	jne    c0004d5a <intr_keyboard_handler+0x28f>
/work/x86_os_my/device/keyboard.c:148
	 alt_status = false;
c0004b9a:	c7 05 14 c7 00 c0 00 	movl   $0x0,0xc000c714
c0004ba1:	00 00 00 
/work/x86_os_my/device/keyboard.c:151
      } /* 由于caps_lock不是弹起后关闭,所以需要单独处理 */

      return;   // 直接返回结束此次中断处理程序
c0004ba4:	e9 b1 01 00 00       	jmp    c0004d5a <intr_keyboard_handler+0x28f>
c0004ba9:	e9 ac 01 00 00       	jmp    c0004d5a <intr_keyboard_handler+0x28f>
/work/x86_os_my/device/keyboard.c:155

   } 
   /* 若为通码,只处理数组中定义的键以及alt_right和ctrl键,全是make_code */
   else if ((scancode > 0x00 && scancode < 0x3b) || \
c0004bae:	66 83 7d f6 00       	cmpw   $0x0,-0xa(%ebp)
c0004bb3:	74 07                	je     c0004bbc <intr_keyboard_handler+0xf1>
/work/x86_os_my/device/keyboard.c:155 (discriminator 1)
c0004bb5:	66 83 7d f6 3a       	cmpw   $0x3a,-0xa(%ebp)
c0004bba:	76 14                	jbe    c0004bd0 <intr_keyboard_handler+0x105>
/work/x86_os_my/device/keyboard.c:155 (discriminator 3)
c0004bbc:	66 81 7d f6 38 e0    	cmpw   $0xe038,-0xa(%ebp)
c0004bc2:	74 0c                	je     c0004bd0 <intr_keyboard_handler+0x105>
/work/x86_os_my/device/keyboard.c:156
	       (scancode == alt_r_make) || \
c0004bc4:	66 81 7d f6 1d e0    	cmpw   $0xe01d,-0xa(%ebp)
c0004bca:	0f 85 78 01 00 00    	jne    c0004d48 <intr_keyboard_handler+0x27d>
/work/x86_os_my/device/keyboard.c:158
	       (scancode == ctrl_r_make)) {
      bool shift = false;  // 判断是否与shift组合,用来在一维数组中索引对应的字符
c0004bd0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/device/keyboard.c:159
      if ((scancode < 0x0e) || (scancode == 0x29) || \
c0004bd7:	66 83 7d f6 0d       	cmpw   $0xd,-0xa(%ebp)
c0004bdc:	76 3f                	jbe    c0004c1d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:159 (discriminator 1)
c0004bde:	66 83 7d f6 29       	cmpw   $0x29,-0xa(%ebp)
c0004be3:	74 38                	je     c0004c1d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:159 (discriminator 2)
c0004be5:	66 83 7d f6 1a       	cmpw   $0x1a,-0xa(%ebp)
c0004bea:	74 31                	je     c0004c1d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:160
	 (scancode == 0x1a) || (scancode == 0x1b) || \
c0004bec:	66 83 7d f6 1b       	cmpw   $0x1b,-0xa(%ebp)
c0004bf1:	74 2a                	je     c0004c1d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:160 (discriminator 1)
c0004bf3:	66 83 7d f6 2b       	cmpw   $0x2b,-0xa(%ebp)
c0004bf8:	74 23                	je     c0004c1d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:161
	 (scancode == 0x2b) || (scancode == 0x27) || \
c0004bfa:	66 83 7d f6 27       	cmpw   $0x27,-0xa(%ebp)
c0004bff:	74 1c                	je     c0004c1d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:161 (discriminator 1)
c0004c01:	66 83 7d f6 28       	cmpw   $0x28,-0xa(%ebp)
c0004c06:	74 15                	je     c0004c1d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:162
	 (scancode == 0x28) || (scancode == 0x33) || \
c0004c08:	66 83 7d f6 33       	cmpw   $0x33,-0xa(%ebp)
c0004c0d:	74 0e                	je     c0004c1d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:162 (discriminator 1)
c0004c0f:	66 83 7d f6 34       	cmpw   $0x34,-0xa(%ebp)
c0004c14:	74 07                	je     c0004c1d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:163
	 (scancode == 0x34) || (scancode == 0x35)) {  
c0004c16:	66 83 7d f6 35       	cmpw   $0x35,-0xa(%ebp)
c0004c1b:	75 0f                	jne    c0004c2c <intr_keyboard_handler+0x161>
/work/x86_os_my/device/keyboard.c:176
		     0x28 字符'\''
		     0x33 字符','
		     0x34 字符'.'
		     0x35 字符'/' 
	    *******************************/
	 if (shift_down_last) {  // 如果同时按下了shift键
c0004c1d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0004c21:	74 3a                	je     c0004c5d <intr_keyboard_handler+0x192>
/work/x86_os_my/device/keyboard.c:177
	    shift = true;
c0004c23:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
/work/x86_os_my/device/keyboard.c:176
		     0x28 字符'\''
		     0x33 字符','
		     0x34 字符'.'
		     0x35 字符'/' 
	    *******************************/
	 if (shift_down_last) {  // 如果同时按下了shift键
c0004c2a:	eb 31                	jmp    c0004c5d <intr_keyboard_handler+0x192>
/work/x86_os_my/device/keyboard.c:180
	    shift = true;
	 }
      } else {	  // 默认为字母键
	 if (shift_down_last && caps_lock_last) {  // 如果shift和capslock同时按下
c0004c2c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0004c30:	74 0f                	je     c0004c41 <intr_keyboard_handler+0x176>
/work/x86_os_my/device/keyboard.c:180 (discriminator 1)
c0004c32:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0004c36:	74 09                	je     c0004c41 <intr_keyboard_handler+0x176>
/work/x86_os_my/device/keyboard.c:181
	    shift = false;
c0004c38:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0004c3f:	eb 1c                	jmp    c0004c5d <intr_keyboard_handler+0x192>
/work/x86_os_my/device/keyboard.c:182
	 } else if (shift_down_last || caps_lock_last) { // 如果shift和capslock任意被按下
c0004c41:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0004c45:	75 06                	jne    c0004c4d <intr_keyboard_handler+0x182>
/work/x86_os_my/device/keyboard.c:182 (discriminator 1)
c0004c47:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0004c4b:	74 09                	je     c0004c56 <intr_keyboard_handler+0x18b>
/work/x86_os_my/device/keyboard.c:183
	    shift = true;
c0004c4d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c0004c54:	eb 07                	jmp    c0004c5d <intr_keyboard_handler+0x192>
/work/x86_os_my/device/keyboard.c:185
	 } else {
	    shift = false;
c0004c56:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/device/keyboard.c:189
	 }
      }

      uint8_t index = (scancode &= 0x00ff);  // 将扫描码的高字节置0,主要是针对高字节是e0的扫描码.
c0004c5d:	66 81 65 f6 ff 00    	andw   $0xff,-0xa(%ebp)
c0004c63:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0004c67:	88 45 d9             	mov    %al,-0x27(%ebp)
/work/x86_os_my/device/keyboard.c:190
      char cur_char = keymap[index][shift];  // 在数组中找到对应的字符
c0004c6a:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0004c6e:	8d 14 00             	lea    (%eax,%eax,1),%edx
c0004c71:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0004c74:	01 d0                	add    %edx,%eax
c0004c76:	05 60 c2 00 c0       	add    $0xc000c260,%eax
c0004c7b:	0f b6 00             	movzbl (%eax),%eax
c0004c7e:	88 45 ef             	mov    %al,-0x11(%ebp)
/work/x86_os_my/device/keyboard.c:193

   /* 如果cur_char不为0,也就是ascii码为除'\0'外的字符就加入键盘缓冲区中 */
      if (cur_char) {
c0004c81:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
c0004c85:	74 54                	je     c0004cdb <intr_keyboard_handler+0x210>
/work/x86_os_my/device/keyboard.c:200
     /*****************  快捷键ctrl+l和ctrl+u的处理 *********************
      * 下面是把ctrl+l和ctrl+u这两种组合键产生的字符置为:
      * cur_char的asc码-字符a的asc码, 此差值比较小,
      * 属于asc码表中不可见的字符部分.故不会产生可见字符.
      * 我们在shell中将ascii值为l-a和u-a的分别处理为清屏和删除输入的快捷键*/
	 if ((ctrl_down_last && cur_char == 'l') || (ctrl_down_last && cur_char == 'u')) {
c0004c87:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0004c8b:	74 06                	je     c0004c93 <intr_keyboard_handler+0x1c8>
/work/x86_os_my/device/keyboard.c:200 (discriminator 1)
c0004c8d:	80 7d ef 6c          	cmpb   $0x6c,-0x11(%ebp)
c0004c91:	74 0c                	je     c0004c9f <intr_keyboard_handler+0x1d4>
/work/x86_os_my/device/keyboard.c:200 (discriminator 3)
c0004c93:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0004c97:	74 10                	je     c0004ca9 <intr_keyboard_handler+0x1de>
/work/x86_os_my/device/keyboard.c:200 (discriminator 4)
c0004c99:	80 7d ef 75          	cmpb   $0x75,-0x11(%ebp)
c0004c9d:	75 0a                	jne    c0004ca9 <intr_keyboard_handler+0x1de>
/work/x86_os_my/device/keyboard.c:201
	    cur_char -= 'a';
c0004c9f:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c0004ca3:	83 e8 61             	sub    $0x61,%eax
c0004ca6:	88 45 ef             	mov    %al,-0x11(%ebp)
/work/x86_os_my/device/keyboard.c:207
	 }
      /****************************************************************/
      
   /* 若kbd_buf中未满并且待加入的cur_char不为0,
    * 则将其加入到缓冲区kbd_buf中 */
	 if (!ioq_full(&kbd_buf)) {
c0004ca9:	83 ec 0c             	sub    $0xc,%esp
c0004cac:	68 60 cd 00 c0       	push   $0xc000cd60
c0004cb1:	e8 58 01 00 00       	call   c0004e0e <ioq_full>
c0004cb6:	83 c4 10             	add    $0x10,%esp
c0004cb9:	85 c0                	test   %eax,%eax
c0004cbb:	0f 85 9c 00 00 00    	jne    c0004d5d <intr_keyboard_handler+0x292>
/work/x86_os_my/device/keyboard.c:208
	    ioq_putchar(&kbd_buf, cur_char);
c0004cc1:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
c0004cc5:	83 ec 08             	sub    $0x8,%esp
c0004cc8:	50                   	push   %eax
c0004cc9:	68 60 cd 00 c0       	push   $0xc000cd60
c0004cce:	e8 0d 03 00 00       	call   c0004fe0 <ioq_putchar>
c0004cd3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/keyboard.c:210
	 }
	 return;
c0004cd6:	e9 82 00 00 00       	jmp    c0004d5d <intr_keyboard_handler+0x292>
/work/x86_os_my/device/keyboard.c:214
      }

      /* 记录本次是否按下了下面几类控制键之一,供下次键入时判断组合键 */
      if (scancode == ctrl_l_make || scancode == ctrl_r_make) {
c0004cdb:	66 83 7d f6 1d       	cmpw   $0x1d,-0xa(%ebp)
c0004ce0:	74 08                	je     c0004cea <intr_keyboard_handler+0x21f>
/work/x86_os_my/device/keyboard.c:214 (discriminator 1)
c0004ce2:	66 81 7d f6 1d e0    	cmpw   $0xe01d,-0xa(%ebp)
c0004ce8:	75 0c                	jne    c0004cf6 <intr_keyboard_handler+0x22b>
/work/x86_os_my/device/keyboard.c:215
	 ctrl_status = true;
c0004cea:	c7 05 0c c7 00 c0 01 	movl   $0x1,0xc000c70c
c0004cf1:	00 00 00 
c0004cf4:	eb 50                	jmp    c0004d46 <intr_keyboard_handler+0x27b>
/work/x86_os_my/device/keyboard.c:216
      } else if (scancode == shift_l_make || scancode == shift_r_make) {
c0004cf6:	66 83 7d f6 2a       	cmpw   $0x2a,-0xa(%ebp)
c0004cfb:	74 07                	je     c0004d04 <intr_keyboard_handler+0x239>
/work/x86_os_my/device/keyboard.c:216 (discriminator 1)
c0004cfd:	66 83 7d f6 36       	cmpw   $0x36,-0xa(%ebp)
c0004d02:	75 0c                	jne    c0004d10 <intr_keyboard_handler+0x245>
/work/x86_os_my/device/keyboard.c:217
	 shift_status = true;
c0004d04:	c7 05 10 c7 00 c0 01 	movl   $0x1,0xc000c710
c0004d0b:	00 00 00 
c0004d0e:	eb 36                	jmp    c0004d46 <intr_keyboard_handler+0x27b>
/work/x86_os_my/device/keyboard.c:218
      } else if (scancode == alt_l_make || scancode == alt_r_make) {
c0004d10:	66 83 7d f6 38       	cmpw   $0x38,-0xa(%ebp)
c0004d15:	74 08                	je     c0004d1f <intr_keyboard_handler+0x254>
/work/x86_os_my/device/keyboard.c:218 (discriminator 1)
c0004d17:	66 81 7d f6 38 e0    	cmpw   $0xe038,-0xa(%ebp)
c0004d1d:	75 0c                	jne    c0004d2b <intr_keyboard_handler+0x260>
/work/x86_os_my/device/keyboard.c:219
	 alt_status = true;
c0004d1f:	c7 05 14 c7 00 c0 01 	movl   $0x1,0xc000c714
c0004d26:	00 00 00 
c0004d29:	eb 1b                	jmp    c0004d46 <intr_keyboard_handler+0x27b>
/work/x86_os_my/device/keyboard.c:220
      } else if (scancode == caps_lock_make) {
c0004d2b:	66 83 7d f6 3a       	cmpw   $0x3a,-0xa(%ebp)
c0004d30:	75 2e                	jne    c0004d60 <intr_keyboard_handler+0x295>
/work/x86_os_my/device/keyboard.c:223
      /* 不管之前是否有按下caps_lock键,当再次按下时则状态取反,
       * 即:已经开启时,再按下同样的键是关闭。关闭时按下表示开启。*/
	 caps_lock_status = !caps_lock_status;
c0004d32:	a1 18 c7 00 c0       	mov    0xc000c718,%eax
c0004d37:	85 c0                	test   %eax,%eax
c0004d39:	0f 94 c0             	sete   %al
c0004d3c:	0f b6 c0             	movzbl %al,%eax
c0004d3f:	a3 18 c7 00 c0       	mov    %eax,0xc000c718
/work/x86_os_my/device/keyboard.c:157

   } 
   /* 若为通码,只处理数组中定义的键以及alt_right和ctrl键,全是make_code */
   else if ((scancode > 0x00 && scancode < 0x3b) || \
	       (scancode == alt_r_make) || \
	       (scancode == ctrl_r_make)) {
c0004d44:	eb 1a                	jmp    c0004d60 <intr_keyboard_handler+0x295>
/work/x86_os_my/device/keyboard.c:157 (discriminator 3)
c0004d46:	eb 18                	jmp    c0004d60 <intr_keyboard_handler+0x295>
/work/x86_os_my/device/keyboard.c:226
      /* 不管之前是否有按下caps_lock键,当再次按下时则状态取反,
       * 即:已经开启时,再按下同样的键是关闭。关闭时按下表示开启。*/
	 caps_lock_status = !caps_lock_status;
      }
   } else {
      put_str("unknown key\n");
c0004d48:	83 ec 0c             	sub    $0xc,%esp
c0004d4b:	68 f9 91 00 c0       	push   $0xc00091f9
c0004d50:	e8 3b d7 ff ff       	call   c0002490 <put_str>
c0004d55:	83 c4 10             	add    $0x10,%esp
c0004d58:	eb 07                	jmp    c0004d61 <intr_keyboard_handler+0x296>
/work/x86_os_my/device/keyboard.c:151
	 shift_status = false;
      } else if (make_code == alt_l_make || make_code == alt_r_make) {
	 alt_status = false;
      } /* 由于caps_lock不是弹起后关闭,所以需要单独处理 */

      return;   // 直接返回结束此次中断处理程序
c0004d5a:	90                   	nop
c0004d5b:	eb 04                	jmp    c0004d61 <intr_keyboard_handler+0x296>
/work/x86_os_my/device/keyboard.c:210
   /* 若kbd_buf中未满并且待加入的cur_char不为0,
    * 则将其加入到缓冲区kbd_buf中 */
	 if (!ioq_full(&kbd_buf)) {
	    ioq_putchar(&kbd_buf, cur_char);
	 }
	 return;
c0004d5d:	90                   	nop
c0004d5e:	eb 01                	jmp    c0004d61 <intr_keyboard_handler+0x296>
/work/x86_os_my/device/keyboard.c:157

   } 
   /* 若为通码,只处理数组中定义的键以及alt_right和ctrl键,全是make_code */
   else if ((scancode > 0x00 && scancode < 0x3b) || \
	       (scancode == alt_r_make) || \
	       (scancode == ctrl_r_make)) {
c0004d60:	90                   	nop
/work/x86_os_my/device/keyboard.c:228
	 caps_lock_status = !caps_lock_status;
      }
   } else {
      put_str("unknown key\n");
   }
}
c0004d61:	c9                   	leave  
c0004d62:	c3                   	ret    

c0004d63 <keyboard_init>:
keyboard_init():
/work/x86_os_my/device/keyboard.c:231

/* 键盘初始化 */
void keyboard_init() {
c0004d63:	55                   	push   %ebp
c0004d64:	89 e5                	mov    %esp,%ebp
c0004d66:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/keyboard.c:232
   put_str("keyboard init start\n");
c0004d69:	83 ec 0c             	sub    $0xc,%esp
c0004d6c:	68 06 92 00 c0       	push   $0xc0009206
c0004d71:	e8 1a d7 ff ff       	call   c0002490 <put_str>
c0004d76:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/keyboard.c:233
   ioqueue_init(&kbd_buf);
c0004d79:	83 ec 0c             	sub    $0xc,%esp
c0004d7c:	68 60 cd 00 c0       	push   $0xc000cd60
c0004d81:	e8 28 00 00 00       	call   c0004dae <ioqueue_init>
c0004d86:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/keyboard.c:234
   register_handler(0x21, intr_keyboard_handler);
c0004d89:	83 ec 08             	sub    $0x8,%esp
c0004d8c:	68 cb 4a 00 c0       	push   $0xc0004acb
c0004d91:	6a 21                	push   $0x21
c0004d93:	e8 2e cf ff ff       	call   c0001cc6 <register_handler>
c0004d98:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/keyboard.c:235
   put_str("keyboard init done\n");
c0004d9b:	83 ec 0c             	sub    $0xc,%esp
c0004d9e:	68 1b 92 00 c0       	push   $0xc000921b
c0004da3:	e8 e8 d6 ff ff       	call   c0002490 <put_str>
c0004da8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/keyboard.c:236
}
c0004dab:	90                   	nop
c0004dac:	c9                   	leave  
c0004dad:	c3                   	ret    

c0004dae <ioqueue_init>:
ioqueue_init():
/work/x86_os_my/device/ioqueue.c:7
#include "interrupt.h"
#include "global.h"
#include "debug.h"

/* 初始化io队列ioq */
void ioqueue_init(struct ioqueue* ioq) {
c0004dae:	55                   	push   %ebp
c0004daf:	89 e5                	mov    %esp,%ebp
c0004db1:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/ioqueue.c:8
   lock_init(&ioq->lock);     // 初始化io队列的锁
c0004db4:	8b 45 08             	mov    0x8(%ebp),%eax
c0004db7:	83 ec 0c             	sub    $0xc,%esp
c0004dba:	50                   	push   %eax
c0004dbb:	e8 05 fa ff ff       	call   c00047c5 <lock_init>
c0004dc0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:9
   ioq->producer = ioq->consumer = NULL;  // 生产者和消费者置空
c0004dc3:	8b 45 08             	mov    0x8(%ebp),%eax
c0004dc6:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
c0004dcd:	8b 45 08             	mov    0x8(%ebp),%eax
c0004dd0:	8b 50 20             	mov    0x20(%eax),%edx
c0004dd3:	8b 45 08             	mov    0x8(%ebp),%eax
c0004dd6:	89 50 1c             	mov    %edx,0x1c(%eax)
/work/x86_os_my/device/ioqueue.c:10
   ioq->head = ioq->tail = 0; // 队列的首尾指针指向缓冲区数组第0个位置
c0004dd9:	8b 45 08             	mov    0x8(%ebp),%eax
c0004ddc:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)
c0004de3:	8b 45 08             	mov    0x8(%ebp),%eax
c0004de6:	8b 50 68             	mov    0x68(%eax),%edx
c0004de9:	8b 45 08             	mov    0x8(%ebp),%eax
c0004dec:	89 50 64             	mov    %edx,0x64(%eax)
/work/x86_os_my/device/ioqueue.c:11
}
c0004def:	90                   	nop
c0004df0:	c9                   	leave  
c0004df1:	c3                   	ret    

c0004df2 <next_pos>:
next_pos():
/work/x86_os_my/device/ioqueue.c:14

/* 返回pos在缓冲区中的下一个位置值 */
static int32_t next_pos(int32_t pos) {
c0004df2:	55                   	push   %ebp
c0004df3:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/device/ioqueue.c:15
   return (pos + 1) % bufsize; 
c0004df5:	8b 45 08             	mov    0x8(%ebp),%eax
c0004df8:	8d 50 01             	lea    0x1(%eax),%edx
c0004dfb:	89 d0                	mov    %edx,%eax
c0004dfd:	c1 f8 1f             	sar    $0x1f,%eax
c0004e00:	c1 e8 1a             	shr    $0x1a,%eax
c0004e03:	01 c2                	add    %eax,%edx
c0004e05:	83 e2 3f             	and    $0x3f,%edx
c0004e08:	29 c2                	sub    %eax,%edx
c0004e0a:	89 d0                	mov    %edx,%eax
/work/x86_os_my/device/ioqueue.c:16
}
c0004e0c:	5d                   	pop    %ebp
c0004e0d:	c3                   	ret    

c0004e0e <ioq_full>:
ioq_full():
/work/x86_os_my/device/ioqueue.c:19

/* 判断队列是否已满 */
bool ioq_full(struct ioqueue* ioq) {
c0004e0e:	55                   	push   %ebp
c0004e0f:	89 e5                	mov    %esp,%ebp
c0004e11:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/ioqueue.c:20
   ASSERT(intr_get_status() == INTR_OFF);
c0004e14:	e8 89 ce ff ff       	call   c0001ca2 <intr_get_status>
c0004e19:	85 c0                	test   %eax,%eax
c0004e1b:	74 19                	je     c0004e36 <ioq_full+0x28>
/work/x86_os_my/device/ioqueue.c:20 (discriminator 1)
c0004e1d:	68 30 92 00 c0       	push   $0xc0009230
c0004e22:	68 94 92 00 c0       	push   $0xc0009294
c0004e27:	6a 14                	push   $0x14
c0004e29:	68 4e 92 00 c0       	push   $0xc000924e
c0004e2e:	e8 cf d7 ff ff       	call   c0002602 <panic_spin>
c0004e33:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:21
   return next_pos(ioq->head) == ioq->tail;
c0004e36:	8b 45 08             	mov    0x8(%ebp),%eax
c0004e39:	8b 40 64             	mov    0x64(%eax),%eax
c0004e3c:	83 ec 0c             	sub    $0xc,%esp
c0004e3f:	50                   	push   %eax
c0004e40:	e8 ad ff ff ff       	call   c0004df2 <next_pos>
c0004e45:	83 c4 10             	add    $0x10,%esp
c0004e48:	89 c2                	mov    %eax,%edx
c0004e4a:	8b 45 08             	mov    0x8(%ebp),%eax
c0004e4d:	8b 40 68             	mov    0x68(%eax),%eax
c0004e50:	39 c2                	cmp    %eax,%edx
c0004e52:	0f 94 c0             	sete   %al
c0004e55:	0f b6 c0             	movzbl %al,%eax
/work/x86_os_my/device/ioqueue.c:22
}
c0004e58:	c9                   	leave  
c0004e59:	c3                   	ret    

c0004e5a <ioq_empty>:
ioq_empty():
/work/x86_os_my/device/ioqueue.c:25

/* 判断队列是否已空 */
static bool ioq_empty(struct ioqueue* ioq) {
c0004e5a:	55                   	push   %ebp
c0004e5b:	89 e5                	mov    %esp,%ebp
c0004e5d:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/ioqueue.c:26
   ASSERT(intr_get_status() == INTR_OFF);
c0004e60:	e8 3d ce ff ff       	call   c0001ca2 <intr_get_status>
c0004e65:	85 c0                	test   %eax,%eax
c0004e67:	74 19                	je     c0004e82 <ioq_empty+0x28>
/work/x86_os_my/device/ioqueue.c:26 (discriminator 1)
c0004e69:	68 30 92 00 c0       	push   $0xc0009230
c0004e6e:	68 a0 92 00 c0       	push   $0xc00092a0
c0004e73:	6a 1a                	push   $0x1a
c0004e75:	68 4e 92 00 c0       	push   $0xc000924e
c0004e7a:	e8 83 d7 ff ff       	call   c0002602 <panic_spin>
c0004e7f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:27
   return ioq->head == ioq->tail;
c0004e82:	8b 45 08             	mov    0x8(%ebp),%eax
c0004e85:	8b 50 64             	mov    0x64(%eax),%edx
c0004e88:	8b 45 08             	mov    0x8(%ebp),%eax
c0004e8b:	8b 40 68             	mov    0x68(%eax),%eax
c0004e8e:	39 c2                	cmp    %eax,%edx
c0004e90:	0f 94 c0             	sete   %al
c0004e93:	0f b6 c0             	movzbl %al,%eax
/work/x86_os_my/device/ioqueue.c:28
}
c0004e96:	c9                   	leave  
c0004e97:	c3                   	ret    

c0004e98 <ioq_wait>:
ioq_wait():
/work/x86_os_my/device/ioqueue.c:31

/* 使当前生产者或消费者在此缓冲区上等待 */
static void ioq_wait(struct task_struct** waiter) {
c0004e98:	55                   	push   %ebp
c0004e99:	89 e5                	mov    %esp,%ebp
c0004e9b:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/ioqueue.c:32
   ASSERT(*waiter == NULL && waiter != NULL);
c0004e9e:	8b 45 08             	mov    0x8(%ebp),%eax
c0004ea1:	8b 00                	mov    (%eax),%eax
c0004ea3:	85 c0                	test   %eax,%eax
c0004ea5:	75 06                	jne    c0004ead <ioq_wait+0x15>
/work/x86_os_my/device/ioqueue.c:32 (discriminator 1)
c0004ea7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0004eab:	75 19                	jne    c0004ec6 <ioq_wait+0x2e>
/work/x86_os_my/device/ioqueue.c:32 (discriminator 3)
c0004ead:	68 60 92 00 c0       	push   $0xc0009260
c0004eb2:	68 ac 92 00 c0       	push   $0xc00092ac
c0004eb7:	6a 20                	push   $0x20
c0004eb9:	68 4e 92 00 c0       	push   $0xc000924e
c0004ebe:	e8 3f d7 ff ff       	call   c0002602 <panic_spin>
c0004ec3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:33
   *waiter = running_thread();
c0004ec6:	e8 36 ef ff ff       	call   c0003e01 <running_thread>
c0004ecb:	89 c2                	mov    %eax,%edx
c0004ecd:	8b 45 08             	mov    0x8(%ebp),%eax
c0004ed0:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/device/ioqueue.c:34
   thread_block(TASK_BLOCKED);
c0004ed2:	83 ec 0c             	sub    $0xc,%esp
c0004ed5:	6a 02                	push   $0x2
c0004ed7:	e8 a2 f3 ff ff       	call   c000427e <thread_block>
c0004edc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:35
}
c0004edf:	90                   	nop
c0004ee0:	c9                   	leave  
c0004ee1:	c3                   	ret    

c0004ee2 <wakeup>:
wakeup():
/work/x86_os_my/device/ioqueue.c:38

/* 唤醒waiter */
static void wakeup(struct task_struct** waiter) {
c0004ee2:	55                   	push   %ebp
c0004ee3:	89 e5                	mov    %esp,%ebp
c0004ee5:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/ioqueue.c:39
   ASSERT(*waiter != NULL);
c0004ee8:	8b 45 08             	mov    0x8(%ebp),%eax
c0004eeb:	8b 00                	mov    (%eax),%eax
c0004eed:	85 c0                	test   %eax,%eax
c0004eef:	75 19                	jne    c0004f0a <wakeup+0x28>
/work/x86_os_my/device/ioqueue.c:39 (discriminator 1)
c0004ef1:	68 82 92 00 c0       	push   $0xc0009282
c0004ef6:	68 b8 92 00 c0       	push   $0xc00092b8
c0004efb:	6a 27                	push   $0x27
c0004efd:	68 4e 92 00 c0       	push   $0xc000924e
c0004f02:	e8 fb d6 ff ff       	call   c0002602 <panic_spin>
c0004f07:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:40
   thread_unblock(*waiter); 
c0004f0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0004f0d:	8b 00                	mov    (%eax),%eax
c0004f0f:	83 ec 0c             	sub    $0xc,%esp
c0004f12:	50                   	push   %eax
c0004f13:	e8 c9 f3 ff ff       	call   c00042e1 <thread_unblock>
c0004f18:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:41
   *waiter = NULL;
c0004f1b:	8b 45 08             	mov    0x8(%ebp),%eax
c0004f1e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/device/ioqueue.c:42
}
c0004f24:	90                   	nop
c0004f25:	c9                   	leave  
c0004f26:	c3                   	ret    

c0004f27 <ioq_getchar>:
ioq_getchar():
/work/x86_os_my/device/ioqueue.c:45

/* 消费者从ioq队列中获取一个字符 */
char ioq_getchar(struct ioqueue* ioq) {
c0004f27:	55                   	push   %ebp
c0004f28:	89 e5                	mov    %esp,%ebp
c0004f2a:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/ioqueue.c:46
   ASSERT(intr_get_status() == INTR_OFF);
c0004f2d:	e8 70 cd ff ff       	call   c0001ca2 <intr_get_status>
c0004f32:	85 c0                	test   %eax,%eax
c0004f34:	74 4b                	je     c0004f81 <ioq_getchar+0x5a>
/work/x86_os_my/device/ioqueue.c:46 (discriminator 1)
c0004f36:	68 30 92 00 c0       	push   $0xc0009230
c0004f3b:	68 c0 92 00 c0       	push   $0xc00092c0
c0004f40:	6a 2e                	push   $0x2e
c0004f42:	68 4e 92 00 c0       	push   $0xc000924e
c0004f47:	e8 b6 d6 ff ff       	call   c0002602 <panic_spin>
c0004f4c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:51 (discriminator 1)

/* 若缓冲区(队列)为空,把消费者ioq->consumer记为当前线程自己,
 * 目的是将来生产者往缓冲区里装商品后,生产者知道唤醒哪个消费者,
 * 也就是唤醒当前线程自己*/
   while (ioq_empty(ioq)) {
c0004f4f:	eb 30                	jmp    c0004f81 <ioq_getchar+0x5a>
/work/x86_os_my/device/ioqueue.c:52
      lock_acquire(&ioq->lock);	 
c0004f51:	8b 45 08             	mov    0x8(%ebp),%eax
c0004f54:	83 ec 0c             	sub    $0xc,%esp
c0004f57:	50                   	push   %eax
c0004f58:	e8 42 fa ff ff       	call   c000499f <lock_acquire>
c0004f5d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:53
      ioq_wait(&ioq->consumer);
c0004f60:	8b 45 08             	mov    0x8(%ebp),%eax
c0004f63:	83 c0 20             	add    $0x20,%eax
c0004f66:	83 ec 0c             	sub    $0xc,%esp
c0004f69:	50                   	push   %eax
c0004f6a:	e8 29 ff ff ff       	call   c0004e98 <ioq_wait>
c0004f6f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:54
      lock_release(&ioq->lock);
c0004f72:	8b 45 08             	mov    0x8(%ebp),%eax
c0004f75:	83 ec 0c             	sub    $0xc,%esp
c0004f78:	50                   	push   %eax
c0004f79:	e8 98 fa ff ff       	call   c0004a16 <lock_release>
c0004f7e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:51
   ASSERT(intr_get_status() == INTR_OFF);

/* 若缓冲区(队列)为空,把消费者ioq->consumer记为当前线程自己,
 * 目的是将来生产者往缓冲区里装商品后,生产者知道唤醒哪个消费者,
 * 也就是唤醒当前线程自己*/
   while (ioq_empty(ioq)) {
c0004f81:	83 ec 0c             	sub    $0xc,%esp
c0004f84:	ff 75 08             	pushl  0x8(%ebp)
c0004f87:	e8 ce fe ff ff       	call   c0004e5a <ioq_empty>
c0004f8c:	83 c4 10             	add    $0x10,%esp
c0004f8f:	85 c0                	test   %eax,%eax
c0004f91:	75 be                	jne    c0004f51 <ioq_getchar+0x2a>
/work/x86_os_my/device/ioqueue.c:57
      lock_acquire(&ioq->lock);	 
      ioq_wait(&ioq->consumer);
      lock_release(&ioq->lock);
   }

   char byte = ioq->buf[ioq->tail];	  // 从缓冲区中取出
c0004f93:	8b 45 08             	mov    0x8(%ebp),%eax
c0004f96:	8b 40 68             	mov    0x68(%eax),%eax
c0004f99:	8b 55 08             	mov    0x8(%ebp),%edx
c0004f9c:	0f b6 44 02 24       	movzbl 0x24(%edx,%eax,1),%eax
c0004fa1:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/device/ioqueue.c:58
   ioq->tail = next_pos(ioq->tail);	  // 把读游标移到下一位置
c0004fa4:	8b 45 08             	mov    0x8(%ebp),%eax
c0004fa7:	8b 40 68             	mov    0x68(%eax),%eax
c0004faa:	83 ec 0c             	sub    $0xc,%esp
c0004fad:	50                   	push   %eax
c0004fae:	e8 3f fe ff ff       	call   c0004df2 <next_pos>
c0004fb3:	83 c4 10             	add    $0x10,%esp
c0004fb6:	89 c2                	mov    %eax,%edx
c0004fb8:	8b 45 08             	mov    0x8(%ebp),%eax
c0004fbb:	89 50 68             	mov    %edx,0x68(%eax)
/work/x86_os_my/device/ioqueue.c:60

   if (ioq->producer != NULL) {
c0004fbe:	8b 45 08             	mov    0x8(%ebp),%eax
c0004fc1:	8b 40 1c             	mov    0x1c(%eax),%eax
c0004fc4:	85 c0                	test   %eax,%eax
c0004fc6:	74 12                	je     c0004fda <ioq_getchar+0xb3>
/work/x86_os_my/device/ioqueue.c:61
      wakeup(&ioq->producer);		  // 唤醒生产者
c0004fc8:	8b 45 08             	mov    0x8(%ebp),%eax
c0004fcb:	83 c0 1c             	add    $0x1c,%eax
c0004fce:	83 ec 0c             	sub    $0xc,%esp
c0004fd1:	50                   	push   %eax
c0004fd2:	e8 0b ff ff ff       	call   c0004ee2 <wakeup>
c0004fd7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:64
   }

   return byte; 
c0004fda:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
/work/x86_os_my/device/ioqueue.c:65
}
c0004fde:	c9                   	leave  
c0004fdf:	c3                   	ret    

c0004fe0 <ioq_putchar>:
ioq_putchar():
/work/x86_os_my/device/ioqueue.c:68

/* 生产者往ioq队列中写入一个字符byte */
void ioq_putchar(struct ioqueue* ioq, char byte) {
c0004fe0:	55                   	push   %ebp
c0004fe1:	89 e5                	mov    %esp,%ebp
c0004fe3:	83 ec 18             	sub    $0x18,%esp
c0004fe6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0004fe9:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/device/ioqueue.c:69
   ASSERT(intr_get_status() == INTR_OFF);
c0004fec:	e8 b1 cc ff ff       	call   c0001ca2 <intr_get_status>
c0004ff1:	85 c0                	test   %eax,%eax
c0004ff3:	74 4b                	je     c0005040 <ioq_putchar+0x60>
/work/x86_os_my/device/ioqueue.c:69 (discriminator 1)
c0004ff5:	68 30 92 00 c0       	push   $0xc0009230
c0004ffa:	68 cc 92 00 c0       	push   $0xc00092cc
c0004fff:	6a 45                	push   $0x45
c0005001:	68 4e 92 00 c0       	push   $0xc000924e
c0005006:	e8 f7 d5 ff ff       	call   c0002602 <panic_spin>
c000500b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:74 (discriminator 1)

/* 若缓冲区(队列)已经满了,把生产者ioq->producer记为自己,
 * 为的是当缓冲区里的东西被消费者取完后让消费者知道唤醒哪个生产者,
 * 也就是唤醒当前线程自己*/
   while (ioq_full(ioq)) {
c000500e:	eb 30                	jmp    c0005040 <ioq_putchar+0x60>
/work/x86_os_my/device/ioqueue.c:75
      lock_acquire(&ioq->lock);
c0005010:	8b 45 08             	mov    0x8(%ebp),%eax
c0005013:	83 ec 0c             	sub    $0xc,%esp
c0005016:	50                   	push   %eax
c0005017:	e8 83 f9 ff ff       	call   c000499f <lock_acquire>
c000501c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:76
      ioq_wait(&ioq->producer);
c000501f:	8b 45 08             	mov    0x8(%ebp),%eax
c0005022:	83 c0 1c             	add    $0x1c,%eax
c0005025:	83 ec 0c             	sub    $0xc,%esp
c0005028:	50                   	push   %eax
c0005029:	e8 6a fe ff ff       	call   c0004e98 <ioq_wait>
c000502e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:77
      lock_release(&ioq->lock);
c0005031:	8b 45 08             	mov    0x8(%ebp),%eax
c0005034:	83 ec 0c             	sub    $0xc,%esp
c0005037:	50                   	push   %eax
c0005038:	e8 d9 f9 ff ff       	call   c0004a16 <lock_release>
c000503d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:74
   ASSERT(intr_get_status() == INTR_OFF);

/* 若缓冲区(队列)已经满了,把生产者ioq->producer记为自己,
 * 为的是当缓冲区里的东西被消费者取完后让消费者知道唤醒哪个生产者,
 * 也就是唤醒当前线程自己*/
   while (ioq_full(ioq)) {
c0005040:	83 ec 0c             	sub    $0xc,%esp
c0005043:	ff 75 08             	pushl  0x8(%ebp)
c0005046:	e8 c3 fd ff ff       	call   c0004e0e <ioq_full>
c000504b:	83 c4 10             	add    $0x10,%esp
c000504e:	85 c0                	test   %eax,%eax
c0005050:	75 be                	jne    c0005010 <ioq_putchar+0x30>
/work/x86_os_my/device/ioqueue.c:79
      lock_acquire(&ioq->lock);
      ioq_wait(&ioq->producer);
      lock_release(&ioq->lock);
   }
   ioq->buf[ioq->head] = byte;      // 把字节放入缓冲区中
c0005052:	8b 45 08             	mov    0x8(%ebp),%eax
c0005055:	8b 40 64             	mov    0x64(%eax),%eax
c0005058:	8b 55 08             	mov    0x8(%ebp),%edx
c000505b:	0f b6 4d f4          	movzbl -0xc(%ebp),%ecx
c000505f:	88 4c 02 24          	mov    %cl,0x24(%edx,%eax,1)
/work/x86_os_my/device/ioqueue.c:80
   ioq->head = next_pos(ioq->head); // 把写游标移到下一位置
c0005063:	8b 45 08             	mov    0x8(%ebp),%eax
c0005066:	8b 40 64             	mov    0x64(%eax),%eax
c0005069:	83 ec 0c             	sub    $0xc,%esp
c000506c:	50                   	push   %eax
c000506d:	e8 80 fd ff ff       	call   c0004df2 <next_pos>
c0005072:	83 c4 10             	add    $0x10,%esp
c0005075:	89 c2                	mov    %eax,%edx
c0005077:	8b 45 08             	mov    0x8(%ebp),%eax
c000507a:	89 50 64             	mov    %edx,0x64(%eax)
/work/x86_os_my/device/ioqueue.c:82

   if (ioq->consumer != NULL) {
c000507d:	8b 45 08             	mov    0x8(%ebp),%eax
c0005080:	8b 40 20             	mov    0x20(%eax),%eax
c0005083:	85 c0                	test   %eax,%eax
c0005085:	74 12                	je     c0005099 <ioq_putchar+0xb9>
/work/x86_os_my/device/ioqueue.c:83
      wakeup(&ioq->consumer);          // 唤醒消费者
c0005087:	8b 45 08             	mov    0x8(%ebp),%eax
c000508a:	83 c0 20             	add    $0x20,%eax
c000508d:	83 ec 0c             	sub    $0xc,%esp
c0005090:	50                   	push   %eax
c0005091:	e8 4c fe ff ff       	call   c0004ee2 <wakeup>
c0005096:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:85
   }
}
c0005099:	90                   	nop
c000509a:	c9                   	leave  
c000509b:	c3                   	ret    

c000509c <update_tss_esp>:
update_tss_esp():
/work/x86_os_my/userprog/tss.c:40
	uint32_t io_base;
}; 
static struct tss g_tss;

/* 更新tss中esp0字段的值为pthread的0级栈 */
void update_tss_esp(struct task_struct* pthread) {
c000509c:	55                   	push   %ebp
c000509d:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/userprog/tss.c:41
	g_tss.esp0 = (uint32_t*)((uint32_t)pthread + PG_SIZE);
c000509f:	8b 45 08             	mov    0x8(%ebp),%eax
c00050a2:	05 00 10 00 00       	add    $0x1000,%eax
c00050a7:	a3 24 c7 00 c0       	mov    %eax,0xc000c724
/work/x86_os_my/userprog/tss.c:42
}
c00050ac:	90                   	nop
c00050ad:	5d                   	pop    %ebp
c00050ae:	c3                   	ret    

c00050af <make_gdt_desc>:
make_gdt_desc():
/work/x86_os_my/userprog/tss.c:45

/* c语言方式，创建gdt描述符 */
static struct gdt_desc make_gdt_desc(uint32_t* desc_addr, uint32_t limit, uint8_t attr_low, uint8_t attr_high) {
c00050af:	55                   	push   %ebp
c00050b0:	89 e5                	mov    %esp,%ebp
c00050b2:	83 ec 18             	sub    $0x18,%esp
c00050b5:	8b 55 14             	mov    0x14(%ebp),%edx
c00050b8:	8b 45 18             	mov    0x18(%ebp),%eax
c00050bb:	88 55 ec             	mov    %dl,-0x14(%ebp)
c00050be:	88 45 e8             	mov    %al,-0x18(%ebp)
/work/x86_os_my/userprog/tss.c:46
	uint32_t desc_base = (uint32_t)desc_addr;
c00050c1:	8b 45 0c             	mov    0xc(%ebp),%eax
c00050c4:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/userprog/tss.c:48
	struct gdt_desc desc;
	desc.limit_low_word = limit & 0x0000ffff;
c00050c7:	8b 45 10             	mov    0x10(%ebp),%eax
c00050ca:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
/work/x86_os_my/userprog/tss.c:49
	desc.base_low_word = desc_base & 0x0000ffff;
c00050ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
c00050d1:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
/work/x86_os_my/userprog/tss.c:50
	desc.base_mid_byte = ((desc_base & 0x00ff0000) >> 16);
c00050d5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c00050d8:	25 00 00 ff 00       	and    $0xff0000,%eax
c00050dd:	c1 e8 10             	shr    $0x10,%eax
c00050e0:	88 45 f8             	mov    %al,-0x8(%ebp)
/work/x86_os_my/userprog/tss.c:51
	desc.attr_low_byte = (uint8_t)(attr_low);
c00050e3:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c00050e7:	88 45 f9             	mov    %al,-0x7(%ebp)
/work/x86_os_my/userprog/tss.c:52
	desc.limit_high_attr_high = (((limit & 0x000f0000) >> 16) + (uint8_t)(attr_high));
c00050ea:	8b 45 10             	mov    0x10(%ebp),%eax
c00050ed:	25 00 00 0f 00       	and    $0xf0000,%eax
c00050f2:	c1 e8 10             	shr    $0x10,%eax
c00050f5:	89 c2                	mov    %eax,%edx
c00050f7:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c00050fb:	01 d0                	add    %edx,%eax
c00050fd:	88 45 fa             	mov    %al,-0x6(%ebp)
/work/x86_os_my/userprog/tss.c:53
	desc.base_high_byte = desc_base >> 24;
c0005100:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0005103:	c1 e8 18             	shr    $0x18,%eax
c0005106:	88 45 fb             	mov    %al,-0x5(%ebp)
/work/x86_os_my/userprog/tss.c:54
	return desc;
c0005109:	8b 4d 08             	mov    0x8(%ebp),%ecx
c000510c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000510f:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0005112:	89 01                	mov    %eax,(%ecx)
c0005114:	89 51 04             	mov    %edx,0x4(%ecx)
/work/x86_os_my/userprog/tss.c:55
}
c0005117:	8b 45 08             	mov    0x8(%ebp),%eax
c000511a:	c9                   	leave  
c000511b:	c2 04 00             	ret    $0x4

c000511e <tss_init>:
tss_init():
/work/x86_os_my/userprog/tss.c:61

/* 在gdt中创建tss描述符
 * 重新加载 gdt
 * 加载 tr
 */
void tss_init() {
c000511e:	55                   	push   %ebp
c000511f:	89 e5                	mov    %esp,%ebp
c0005121:	53                   	push   %ebx
c0005122:	83 ec 24             	sub    $0x24,%esp
/work/x86_os_my/userprog/tss.c:62
	put_str("tss_init start\n");
c0005125:	83 ec 0c             	sub    $0xc,%esp
c0005128:	68 d8 92 00 c0       	push   $0xc00092d8
c000512d:	e8 5e d3 ff ff       	call   c0002490 <put_str>
c0005132:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/tss.c:63
	uint32_t tss_size = sizeof(g_tss);
c0005135:	c7 45 f4 6c 00 00 00 	movl   $0x6c,-0xc(%ebp)
/work/x86_os_my/userprog/tss.c:64
	memset(&g_tss, 0, tss_size);
c000513c:	83 ec 04             	sub    $0x4,%esp
c000513f:	ff 75 f4             	pushl  -0xc(%ebp)
c0005142:	6a 00                	push   $0x0
c0005144:	68 20 c7 00 c0       	push   $0xc000c720
c0005149:	e8 cc e8 ff ff       	call   c0003a1a <memset>
c000514e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/tss.c:66
	
	g_tss.ss0 = SELECTOR_K_STACK;	// 0 级栈段的选择子 
c0005151:	c7 05 28 c7 00 c0 10 	movl   $0x10,0xc000c728
c0005158:	00 00 00 
/work/x86_os_my/userprog/tss.c:67
	g_tss.io_base = tss_size;		// 当 IO 位图的偏移地址大于等于 TSS 大小减 1 时，就表示没有 IO 位图。
c000515b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000515e:	a3 88 c7 00 c0       	mov    %eax,0xc000c788
/work/x86_os_my/userprog/tss.c:75
	 * 内核地址 0xC000_0900 是映射到 0x900 的 
	 * 在GDT中，第 0 个段描述符不可用，第 1 个为代码段，第 2 个为数据段和栈，第 3 个为显存段
	 */

	/* 在gdt中添加dpl为0的TSS描述符 */
	*((struct gdt_desc*)0xc0000920) = make_gdt_desc((uint32_t*)&g_tss, tss_size - 1, TSS_ATTR_LOW, TSS_ATTR_HIGH);
c0005163:	bb 20 09 00 c0       	mov    $0xc0000920,%ebx
c0005168:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000516b:	8d 50 ff             	lea    -0x1(%eax),%edx
c000516e:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0005171:	83 ec 0c             	sub    $0xc,%esp
c0005174:	68 80 00 00 00       	push   $0x80
c0005179:	68 89 00 00 00       	push   $0x89
c000517e:	52                   	push   %edx
c000517f:	68 20 c7 00 c0       	push   $0xc000c720
c0005184:	50                   	push   %eax
c0005185:	e8 25 ff ff ff       	call   c00050af <make_gdt_desc>
c000518a:	83 c4 1c             	add    $0x1c,%esp
c000518d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0005190:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0005193:	89 03                	mov    %eax,(%ebx)
c0005195:	89 53 04             	mov    %edx,0x4(%ebx)
/work/x86_os_my/userprog/tss.c:78

	/* 在gdt中添加dpl为3的,用户级,数据段和代码段描述符 */
	*((struct gdt_desc*)0xc0000928) = make_gdt_desc((uint32_t*)0, 0xfffff, GDT_CODE_ATTR_LOW_DPL3, GDT_ATTR_HIGH);
c0005198:	bb 28 09 00 c0       	mov    $0xc0000928,%ebx
c000519d:	8d 45 e0             	lea    -0x20(%ebp),%eax
c00051a0:	83 ec 0c             	sub    $0xc,%esp
c00051a3:	68 c0 00 00 00       	push   $0xc0
c00051a8:	68 f8 00 00 00       	push   $0xf8
c00051ad:	68 ff ff 0f 00       	push   $0xfffff
c00051b2:	6a 00                	push   $0x0
c00051b4:	50                   	push   %eax
c00051b5:	e8 f5 fe ff ff       	call   c00050af <make_gdt_desc>
c00051ba:	83 c4 1c             	add    $0x1c,%esp
c00051bd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00051c0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c00051c3:	89 03                	mov    %eax,(%ebx)
c00051c5:	89 53 04             	mov    %edx,0x4(%ebx)
/work/x86_os_my/userprog/tss.c:79
	*((struct gdt_desc*)0xc0000930) = make_gdt_desc((uint32_t*)0, 0xfffff, GDT_DATA_ATTR_LOW_DPL3, GDT_ATTR_HIGH);
c00051c8:	bb 30 09 00 c0       	mov    $0xc0000930,%ebx
c00051cd:	8d 45 e0             	lea    -0x20(%ebp),%eax
c00051d0:	83 ec 0c             	sub    $0xc,%esp
c00051d3:	68 c0 00 00 00       	push   $0xc0
c00051d8:	68 f2 00 00 00       	push   $0xf2
c00051dd:	68 ff ff 0f 00       	push   $0xfffff
c00051e2:	6a 00                	push   $0x0
c00051e4:	50                   	push   %eax
c00051e5:	e8 c5 fe ff ff       	call   c00050af <make_gdt_desc>
c00051ea:	83 c4 1c             	add    $0x1c,%esp
c00051ed:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00051f0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c00051f3:	89 03                	mov    %eax,(%ebx)
c00051f5:	89 53 04             	mov    %edx,0x4(%ebx)
/work/x86_os_my/userprog/tss.c:83

	/* GDTR 16位的limit、32位的段基址 */
	// 先转换成 uint32_t 后，再将其转换成 uint64_t 位（不可一步到位转为 uint64_t）
	uint64_t gdt_operand = ((8 * 7 - 1) | ((uint64_t)(uint32_t)0xc0000900 << 16));   // 7个描述符大小
c00051f8:	c7 45 e8 37 00 00 09 	movl   $0x9000037,-0x18(%ebp)
c00051ff:	c7 45 ec 00 c0 00 00 	movl   $0xc000,-0x14(%ebp)
/work/x86_os_my/userprog/tss.c:84
	asm volatile ("lgdt %0" : : "m" (gdt_operand));
c0005206:	0f 01 55 e8          	lgdtl  -0x18(%ebp)
/work/x86_os_my/userprog/tss.c:85
	asm volatile ("ltr %w0" : : "r" (SELECTOR_TSS));
c000520a:	b8 20 00 00 00       	mov    $0x20,%eax
c000520f:	0f 00 d8             	ltr    %ax
/work/x86_os_my/userprog/tss.c:86
	put_str("tss_init and ltr done\n");
c0005212:	83 ec 0c             	sub    $0xc,%esp
c0005215:	68 e8 92 00 c0       	push   $0xc00092e8
c000521a:	e8 71 d2 ff ff       	call   c0002490 <put_str>
c000521f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/tss.c:87
}
c0005222:	90                   	nop
c0005223:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0005226:	c9                   	leave  
c0005227:	c3                   	ret    

c0005228 <start_process>:
start_process():
/work/x86_os_my/userprog/process.c:17
extern void intr_exit(void);

/* 构建用户进程初始上下文信息
 * 填充用户进程的中断栈，并将中断栈的信息，利用iretd填充到 CPU 中
 */
void start_process(void* filename_) {
c0005228:	55                   	push   %ebp
c0005229:	89 e5                	mov    %esp,%ebp
c000522b:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/process.c:18
	void* function = filename_;
c000522e:	8b 45 08             	mov    0x8(%ebp),%eax
c0005231:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:19
	struct task_struct* cur = running_thread();
c0005234:	e8 c8 eb ff ff       	call   c0003e01 <running_thread>
c0005239:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/process.c:20
	cur->self_kstack += sizeof(struct thread_stack);
c000523c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000523f:	8b 00                	mov    (%eax),%eax
c0005241:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
c0005247:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000524a:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/userprog/process.c:21
	struct intr_stack* proc_stack = (struct intr_stack*)cur->self_kstack;	 
c000524c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000524f:	8b 00                	mov    (%eax),%eax
c0005251:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/userprog/process.c:22
	proc_stack->edi = proc_stack->esi = proc_stack->ebp = proc_stack->esp_dummy = 0;
c0005254:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005257:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
c000525e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005261:	8b 50 10             	mov    0x10(%eax),%edx
c0005264:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005267:	89 50 0c             	mov    %edx,0xc(%eax)
c000526a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000526d:	8b 50 0c             	mov    0xc(%eax),%edx
c0005270:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005273:	89 50 08             	mov    %edx,0x8(%eax)
c0005276:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005279:	8b 50 08             	mov    0x8(%eax),%edx
c000527c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000527f:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/userprog/process.c:23
	proc_stack->ebx = proc_stack->edx = proc_stack->ecx = proc_stack->eax = 0;
c0005282:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005285:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
c000528c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000528f:	8b 50 20             	mov    0x20(%eax),%edx
c0005292:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005295:	89 50 1c             	mov    %edx,0x1c(%eax)
c0005298:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000529b:	8b 50 1c             	mov    0x1c(%eax),%edx
c000529e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00052a1:	89 50 18             	mov    %edx,0x18(%eax)
c00052a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00052a7:	8b 50 18             	mov    0x18(%eax),%edx
c00052aa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00052ad:	89 50 14             	mov    %edx,0x14(%eax)
/work/x86_os_my/userprog/process.c:28
	/* 在iretd返回时，如果发现未来的 CPL（也就是内核栈中 CS.RPL，或者说是返回到的用户进程的代码段CS.CPL）
	 * 权限低于（数值上大于） CPU 中段寄存器（如 DS、 ES、 FS、 GS）中选择子指向的内存段的 DPL，
	 * CPU 会自动将相应段寄存器的选择子置为 0 
	 * 这里gs的选择子在iretd返回后，会被自动清零。*/
	proc_stack->gs = 0;					// 用户态用不上,直接初始为0
c00052b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00052b3:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
/work/x86_os_my/userprog/process.c:29
	proc_stack->ds = proc_stack->es = proc_stack->fs = SELECTOR_U_DATA;		// 用户级数据段
c00052ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00052bd:	c7 40 28 33 00 00 00 	movl   $0x33,0x28(%eax)
c00052c4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00052c7:	8b 50 28             	mov    0x28(%eax),%edx
c00052ca:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00052cd:	89 50 2c             	mov    %edx,0x2c(%eax)
c00052d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00052d3:	8b 50 2c             	mov    0x2c(%eax),%edx
c00052d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00052d9:	89 50 30             	mov    %edx,0x30(%eax)
/work/x86_os_my/userprog/process.c:30
	proc_stack->eip = function;			// 待执行的用户程序地址
c00052dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c00052df:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00052e2:	89 50 38             	mov    %edx,0x38(%eax)
/work/x86_os_my/userprog/process.c:31
	proc_stack->cs = SELECTOR_U_CODE;	// 用户级代码段
c00052e5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00052e8:	c7 40 3c 2b 00 00 00 	movl   $0x2b,0x3c(%eax)
/work/x86_os_my/userprog/process.c:32
	proc_stack->eflags = (EFLAGS_IOPL_0 | EFLAGS_MBS | EFLAGS_IF_1);
c00052ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00052f2:	c7 40 40 02 02 00 00 	movl   $0x202,0x40(%eax)
/work/x86_os_my/userprog/process.c:41
	 * process_activate 使用户进程页表生效【已经把CR3寄存器 更新为 用户进程的页表了】
	 * start_process    为用户进程创建3特权级栈【所以申请的内存空间来自用户进程的页表】
	 * 
	 * USER_STACK3_VADDR=(0xc0000000 - 0x1000)
	 */
	proc_stack->esp = (void*)((uint32_t)get_a_page(PF_USER, USER_STACK3_VADDR) + PG_SIZE) ;
c00052f9:	83 ec 08             	sub    $0x8,%esp
c00052fc:	68 00 f0 ff bf       	push   $0xbffff000
c0005301:	6a 02                	push   $0x2
c0005303:	e8 58 da ff ff       	call   c0002d60 <get_a_page>
c0005308:	83 c4 10             	add    $0x10,%esp
c000530b:	05 00 10 00 00       	add    $0x1000,%eax
c0005310:	89 c2                	mov    %eax,%edx
c0005312:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005315:	89 50 44             	mov    %edx,0x44(%eax)
/work/x86_os_my/userprog/process.c:42
	proc_stack->ss = SELECTOR_U_DATA;
c0005318:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000531b:	c7 40 48 33 00 00 00 	movl   $0x33,0x48(%eax)
/work/x86_os_my/userprog/process.c:49
	/* 将 esp 替换为 proc_stack
	 * 通过 jmp intr_exit 那里的一系列 pop 指令和 iretd 指令，
	 * 将 proc_stack 中的数据载入 CPU 的寄存器，
	 * 从而使程序“假装”退出中断，进入特权级 3
	 */
	asm volatile ("movl %0, %%esp; jmp intr_exit" : : "g" (proc_stack) : "memory");
c0005322:	8b 65 ec             	mov    -0x14(%ebp),%esp
c0005325:	e9 06 cc ff ff       	jmp    c0001f30 <intr_exit>
/work/x86_os_my/userprog/process.c:50
}
c000532a:	90                   	nop
c000532b:	c9                   	leave  
c000532c:	c3                   	ret    

c000532d <page_dir_activate>:
page_dir_activate():
/work/x86_os_my/userprog/process.c:53

/* 更新CR3寄存器，激活页目录表 */
void page_dir_activate(struct task_struct* p_thread) {
c000532d:	55                   	push   %ebp
c000532e:	89 e5                	mov    %esp,%ebp
c0005330:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/process.c:56
	
	/* 若为"内核线程",需要重新填充页表为0x100000 */
	uint32_t pagedir_phy_addr = 0x100000;	// 默认为内核的页目录物理地址,也就是内核线程所用的页目录表
c0005333:	c7 45 f4 00 00 10 00 	movl   $0x100000,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:59
	
	/* "用户态进程"有自己的页目录表 */
	if (p_thread->pgdir != NULL) {
c000533a:	8b 45 08             	mov    0x8(%ebp),%eax
c000533d:	8b 40 54             	mov    0x54(%eax),%eax
c0005340:	85 c0                	test   %eax,%eax
c0005342:	74 15                	je     c0005359 <page_dir_activate+0x2c>
/work/x86_os_my/userprog/process.c:60
		pagedir_phy_addr = addr_v2p((uint32_t)p_thread->pgdir);
c0005344:	8b 45 08             	mov    0x8(%ebp),%eax
c0005347:	8b 40 54             	mov    0x54(%eax),%eax
c000534a:	83 ec 0c             	sub    $0xc,%esp
c000534d:	50                   	push   %eax
c000534e:	e8 7d db ff ff       	call   c0002ed0 <addr_v2p>
c0005353:	83 c4 10             	add    $0x10,%esp
c0005356:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:66
	}

	/* 更新页目录寄存器cr3,使新页表生效
	 * 实现进程间，虚拟地址空间的隔离。
	 */
	asm volatile ("movl %0, %%cr3" : : "r" (pagedir_phy_addr) : "memory");
c0005359:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000535c:	0f 22 d8             	mov    %eax,%cr3
/work/x86_os_my/userprog/process.c:67
}
c000535f:	90                   	nop
c0005360:	c9                   	leave  
c0005361:	c3                   	ret    

c0005362 <process_activate>:
process_activate():
/work/x86_os_my/userprog/process.c:73

/* 1.激活线程或进程的页表,【更新CR3寄存器】
 * 2.用户进程，更新tss中的esp0为进程的特权级0的栈
 * 【只有在任务调度时（中断时），才会切换页表及更新 0 级栈，因此 process_activate 是被"中断执行流"的 schedule 调用的！】
 */
void process_activate(struct task_struct* p_thread) {
c0005362:	55                   	push   %ebp
c0005363:	89 e5                	mov    %esp,%ebp
c0005365:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/userprog/process.c:74
	ASSERT(p_thread != NULL);
c0005368:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c000536c:	75 19                	jne    c0005387 <process_activate+0x25>
/work/x86_os_my/userprog/process.c:74 (discriminator 1)
c000536e:	68 00 93 00 c0       	push   $0xc0009300
c0005373:	68 bc 93 00 c0       	push   $0xc00093bc
c0005378:	6a 4a                	push   $0x4a
c000537a:	68 11 93 00 c0       	push   $0xc0009311
c000537f:	e8 7e d2 ff ff       	call   c0002602 <panic_spin>
c0005384:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:77
	
	/* 激活该进程或线程的页目录表【重新加载了CR3】 */
	page_dir_activate(p_thread);
c0005387:	83 ec 0c             	sub    $0xc,%esp
c000538a:	ff 75 08             	pushl  0x8(%ebp)
c000538d:	e8 9b ff ff ff       	call   c000532d <page_dir_activate>
c0005392:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:80

	/* 内核线程特权级本身就是0,处理器进入中断时并不会从tss中获取0特权级栈地址,故不需要更新esp0 */
	if (p_thread->pgdir != NULL) {
c0005395:	8b 45 08             	mov    0x8(%ebp),%eax
c0005398:	8b 40 54             	mov    0x54(%eax),%eax
c000539b:	85 c0                	test   %eax,%eax
c000539d:	74 0e                	je     c00053ad <process_activate+0x4b>
/work/x86_os_my/userprog/process.c:83
		/* 若为用户进程,更新该进程的esp0,用于此进程被中断时保留上下文 
		 * 需要从tss中获取0特权级栈地址 */
		update_tss_esp(p_thread);	//就一行：g_tss.esp0 = (uint32_t*)((uint32_t)pthread + PG_SIZE);
c000539f:	83 ec 0c             	sub    $0xc,%esp
c00053a2:	ff 75 08             	pushl  0x8(%ebp)
c00053a5:	e8 f2 fc ff ff       	call   c000509c <update_tss_esp>
c00053aa:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:85
	}
}
c00053ad:	90                   	nop
c00053ae:	c9                   	leave  
c00053af:	c3                   	ret    

c00053b0 <create_page_dir>:
create_page_dir():
/work/x86_os_my/userprog/process.c:94
 * 
 * 要确保用户进程，在自己的地址空间中，能够访问到内核。
 * 即：任意进程的页目录表中，用户进程占第 0~767 个页目录项，内核占第 768~1023 个页目录项。
 * 0x300 = 768
 */
uint32_t* create_page_dir(void) {
c00053b0:	55                   	push   %ebp
c00053b1:	89 e5                	mov    %esp,%ebp
c00053b3:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/process.c:97

	/* 用户进程的页表不能让用户直接访问到,所以在内核空间来申请 */
	uint32_t* page_dir_vaddr = get_kernel_pages(1);
c00053b6:	83 ec 0c             	sub    $0xc,%esp
c00053b9:	6a 01                	push   $0x1
c00053bb:	e8 ea d8 ff ff       	call   c0002caa <get_kernel_pages>
c00053c0:	83 c4 10             	add    $0x10,%esp
c00053c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:98
	if (page_dir_vaddr == NULL) {
c00053c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c00053ca:	75 17                	jne    c00053e3 <create_page_dir+0x33>
/work/x86_os_my/userprog/process.c:99
		console_put_str("create_page_dir: get_kernel_page failed!");
c00053cc:	83 ec 0c             	sub    $0xc,%esp
c00053cf:	68 24 93 00 c0       	push   $0xc0009324
c00053d4:	e8 57 f3 ff ff       	call   c0004730 <console_put_str>
c00053d9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:100
		return NULL;
c00053dc:	b8 00 00 00 00       	mov    $0x0,%eax
c00053e1:	eb 43                	jmp    c0005426 <create_page_dir+0x76>
/work/x86_os_my/userprog/process.c:106
	}

	/*** 1 复制内核的页目录表  ***/
	// page_dir_vaddr + 0x300*4 是内核页目录的第768项
	// 复制的页目录项个数=1024/4
	memcpy((uint32_t*)((uint32_t)page_dir_vaddr + 0x300*4), (uint32_t*)(0xfffff000+0x300*4), 1024);
c00053e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00053e6:	05 00 0c 00 00       	add    $0xc00,%eax
c00053eb:	83 ec 04             	sub    $0x4,%esp
c00053ee:	68 00 04 00 00       	push   $0x400
c00053f3:	68 00 fc ff ff       	push   $0xfffffc00
c00053f8:	50                   	push   %eax
c00053f9:	e8 6e e6 ff ff       	call   c0003a6c <memcpy>
c00053fe:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:110

	/*** 2 更新页目录表地址 ***/
	// 页目录表地址是页目录的最后一项
	uint32_t new_page_dir_phy_addr = addr_v2p((uint32_t)page_dir_vaddr);
c0005401:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005404:	83 ec 0c             	sub    $0xc,%esp
c0005407:	50                   	push   %eax
c0005408:	e8 c3 da ff ff       	call   c0002ed0 <addr_v2p>
c000540d:	83 c4 10             	add    $0x10,%esp
c0005410:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/process.c:111
	page_dir_vaddr[1023] = new_page_dir_phy_addr | PG_US_U | PG_RW_W | PG_P_1;
c0005413:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005416:	05 fc 0f 00 00       	add    $0xffc,%eax
c000541b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000541e:	83 ca 07             	or     $0x7,%edx
c0005421:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/userprog/process.c:113

	return page_dir_vaddr;
c0005423:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/userprog/process.c:114
}
c0005426:	c9                   	leave  
c0005427:	c3                   	ret    

c0005428 <create_user_vaddr_bitmap>:
create_user_vaddr_bitmap():
/work/x86_os_my/userprog/process.c:117

/* 创建用户进程虚拟地址位图 */
void create_user_vaddr_bitmap(struct task_struct* user_prog) {
c0005428:	55                   	push   %ebp
c0005429:	89 e5                	mov    %esp,%ebp
c000542b:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/process.c:118
   user_prog->userprog_vaddr.vaddr_start = USER_VADDR_START;	// linux用户程序入口地址 0x80480000
c000542e:	8b 45 08             	mov    0x8(%ebp),%eax
c0005431:	c7 40 60 00 80 04 08 	movl   $0x8048000,0x60(%eax)
/work/x86_os_my/userprog/process.c:119
   uint32_t bitmap_pg_cnt = DIV_ROUND_UP((0xc0000000 - USER_VADDR_START) / PG_SIZE / 8 , PG_SIZE);
c0005438:	c7 45 f4 17 00 00 00 	movl   $0x17,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:120
   user_prog->userprog_vaddr.vaddr_bitmap.bits = get_kernel_pages(bitmap_pg_cnt);
c000543f:	83 ec 0c             	sub    $0xc,%esp
c0005442:	ff 75 f4             	pushl  -0xc(%ebp)
c0005445:	e8 60 d8 ff ff       	call   c0002caa <get_kernel_pages>
c000544a:	83 c4 10             	add    $0x10,%esp
c000544d:	89 c2                	mov    %eax,%edx
c000544f:	8b 45 08             	mov    0x8(%ebp),%eax
c0005452:	89 50 5c             	mov    %edx,0x5c(%eax)
/work/x86_os_my/userprog/process.c:121
   user_prog->userprog_vaddr.vaddr_bitmap.btmp_bytes_len = (0xc0000000 - USER_VADDR_START) / PG_SIZE / 8;
c0005455:	8b 45 08             	mov    0x8(%ebp),%eax
c0005458:	c7 40 58 f7 6f 01 00 	movl   $0x16ff7,0x58(%eax)
/work/x86_os_my/userprog/process.c:122
   bitmap_init(&user_prog->userprog_vaddr.vaddr_bitmap);
c000545f:	8b 45 08             	mov    0x8(%ebp),%eax
c0005462:	83 c0 58             	add    $0x58,%eax
c0005465:	83 ec 0c             	sub    $0xc,%esp
c0005468:	50                   	push   %eax
c0005469:	e8 6a d2 ff ff       	call   c00026d8 <bitmap_init>
c000546e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:123
}
c0005471:	90                   	nop
c0005472:	c9                   	leave  
c0005473:	c3                   	ret    

c0005474 <process_execute>:
process_execute():
/work/x86_os_my/userprog/process.c:126

/* 创建用户进程 */
void process_execute(void* filename, char* name) {
c0005474:	55                   	push   %ebp
c0005475:	89 e5                	mov    %esp,%ebp
c0005477:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/process.c:128
   /* pcb内核的数据结构,由内核来维护进程信息,因此要在内核内存池中申请 */
   struct task_struct* thread = get_kernel_pages(1);
c000547a:	83 ec 0c             	sub    $0xc,%esp
c000547d:	6a 01                	push   $0x1
c000547f:	e8 26 d8 ff ff       	call   c0002caa <get_kernel_pages>
c0005484:	83 c4 10             	add    $0x10,%esp
c0005487:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:129
   init_thread(thread, name, default_prio);			//初始化线程PCB结构体 struct task_struct
c000548a:	83 ec 04             	sub    $0x4,%esp
c000548d:	6a 1f                	push   $0x1f
c000548f:	ff 75 0c             	pushl  0xc(%ebp)
c0005492:	ff 75 f4             	pushl  -0xc(%ebp)
c0005495:	e8 4e ea ff ff       	call   c0003ee8 <init_thread>
c000549a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:130
   create_user_vaddr_bitmap(thread);				//【进程新增】创建用户进程，虚拟地址空间位图
c000549d:	83 ec 0c             	sub    $0xc,%esp
c00054a0:	ff 75 f4             	pushl  -0xc(%ebp)
c00054a3:	e8 80 ff ff ff       	call   c0005428 <create_user_vaddr_bitmap>
c00054a8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:131
   thread_create(thread, start_process, filename);	//初始化线程栈结构体 struct thread_stack
c00054ab:	83 ec 04             	sub    $0x4,%esp
c00054ae:	ff 75 08             	pushl  0x8(%ebp)
c00054b1:	68 28 52 00 c0       	push   $0xc0005228
c00054b6:	ff 75 f4             	pushl  -0xc(%ebp)
c00054b9:	e8 b3 e9 ff ff       	call   c0003e71 <thread_create>
c00054be:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:132
   thread->pgdir = create_page_dir();				//【进程新增】创建用户进程，页目录表
c00054c1:	e8 ea fe ff ff       	call   c00053b0 <create_page_dir>
c00054c6:	89 c2                	mov    %eax,%edx
c00054c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00054cb:	89 50 54             	mov    %edx,0x54(%eax)
/work/x86_os_my/userprog/process.c:133
   block_desc_init(thread->u_block_desc);
c00054ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00054d1:	83 c0 64             	add    $0x64,%eax
c00054d4:	83 ec 0c             	sub    $0xc,%esp
c00054d7:	50                   	push   %eax
c00054d8:	e8 59 e4 ff ff       	call   c0003936 <block_desc_init>
c00054dd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:135
   
   enum intr_status old_status = intr_disable();
c00054e0:	e8 76 c7 ff ff       	call   c0001c5b <intr_disable>
c00054e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/process.c:136
   ASSERT(!elem_find(&thread_ready_list, &thread->general_tag));
c00054e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00054eb:	83 c0 44             	add    $0x44,%eax
c00054ee:	83 ec 08             	sub    $0x8,%esp
c00054f1:	50                   	push   %eax
c00054f2:	68 0c cd 00 c0       	push   $0xc000cd0c
c00054f7:	e8 e7 f0 ff ff       	call   c00045e3 <elem_find>
c00054fc:	83 c4 10             	add    $0x10,%esp
c00054ff:	85 c0                	test   %eax,%eax
c0005501:	74 1c                	je     c000551f <process_execute+0xab>
/work/x86_os_my/userprog/process.c:136 (discriminator 1)
c0005503:	68 50 93 00 c0       	push   $0xc0009350
c0005508:	68 d0 93 00 c0       	push   $0xc00093d0
c000550d:	68 88 00 00 00       	push   $0x88
c0005512:	68 11 93 00 c0       	push   $0xc0009311
c0005517:	e8 e6 d0 ff ff       	call   c0002602 <panic_spin>
c000551c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:137
   list_append(&thread_ready_list, &thread->general_tag);
c000551f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005522:	83 c0 44             	add    $0x44,%eax
c0005525:	83 ec 08             	sub    $0x8,%esp
c0005528:	50                   	push   %eax
c0005529:	68 0c cd 00 c0       	push   $0xc000cd0c
c000552e:	e8 36 f0 ff ff       	call   c0004569 <list_append>
c0005533:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:138
   ASSERT(!elem_find(&thread_all_list, &thread->all_list_tag));
c0005536:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005539:	83 c0 4c             	add    $0x4c,%eax
c000553c:	83 ec 08             	sub    $0x8,%esp
c000553f:	50                   	push   %eax
c0005540:	68 1c cd 00 c0       	push   $0xc000cd1c
c0005545:	e8 99 f0 ff ff       	call   c00045e3 <elem_find>
c000554a:	83 c4 10             	add    $0x10,%esp
c000554d:	85 c0                	test   %eax,%eax
c000554f:	74 1c                	je     c000556d <process_execute+0xf9>
/work/x86_os_my/userprog/process.c:138 (discriminator 1)
c0005551:	68 88 93 00 c0       	push   $0xc0009388
c0005556:	68 d0 93 00 c0       	push   $0xc00093d0
c000555b:	68 8a 00 00 00       	push   $0x8a
c0005560:	68 11 93 00 c0       	push   $0xc0009311
c0005565:	e8 98 d0 ff ff       	call   c0002602 <panic_spin>
c000556a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:139
   list_append(&thread_all_list, &thread->all_list_tag);
c000556d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005570:	83 c0 4c             	add    $0x4c,%eax
c0005573:	83 ec 08             	sub    $0x8,%esp
c0005576:	50                   	push   %eax
c0005577:	68 1c cd 00 c0       	push   $0xc000cd1c
c000557c:	e8 e8 ef ff ff       	call   c0004569 <list_append>
c0005581:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:140
   intr_set_status(old_status);
c0005584:	83 ec 0c             	sub    $0xc,%esp
c0005587:	ff 75 f0             	pushl  -0x10(%ebp)
c000558a:	e8 f5 c6 ff ff       	call   c0001c84 <intr_set_status>
c000558f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:141
}
c0005592:	90                   	nop
c0005593:	c9                   	leave  
c0005594:	c3                   	ret    

c0005595 <getpid>:
getpid():
/work/x86_os_my/lib/user/syscall.c:52
   );							       \
   retval;						       \
})

/* 返回当前任务pid */
uint32_t getpid() {
c0005595:	55                   	push   %ebp
c0005596:	89 e5                	mov    %esp,%ebp
c0005598:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:53
   return _syscall0(SYS_GETPID);
c000559b:	b8 00 00 00 00       	mov    $0x0,%eax
c00055a0:	cd 80                	int    $0x80
c00055a2:	89 45 fc             	mov    %eax,-0x4(%ebp)
c00055a5:	8b 45 fc             	mov    -0x4(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:54
}
c00055a8:	c9                   	leave  
c00055a9:	c3                   	ret    

c00055aa <write>:
write():
/work/x86_os_my/lib/user/syscall.c:57

/* 打印字符串str */
uint32_t write(char* str) {
c00055aa:	55                   	push   %ebp
c00055ab:	89 e5                	mov    %esp,%ebp
c00055ad:	53                   	push   %ebx
c00055ae:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:58
	return _syscall1(SYS_WRITE, str);
c00055b1:	b8 01 00 00 00       	mov    $0x1,%eax
c00055b6:	8b 55 08             	mov    0x8(%ebp),%edx
c00055b9:	89 d3                	mov    %edx,%ebx
c00055bb:	cd 80                	int    $0x80
c00055bd:	89 45 f8             	mov    %eax,-0x8(%ebp)
c00055c0:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:59
}
c00055c3:	83 c4 10             	add    $0x10,%esp
c00055c6:	5b                   	pop    %ebx
c00055c7:	5d                   	pop    %ebp
c00055c8:	c3                   	ret    

c00055c9 <malloc>:
malloc():
/work/x86_os_my/lib/user/syscall.c:62

/* 申请size字节大小的内存,并返回结果 */
void* malloc(uint32_t size) {
c00055c9:	55                   	push   %ebp
c00055ca:	89 e5                	mov    %esp,%ebp
c00055cc:	53                   	push   %ebx
c00055cd:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:63
	return (void*)_syscall1(SYS_MALLOC, size);
c00055d0:	b8 02 00 00 00       	mov    $0x2,%eax
c00055d5:	8b 55 08             	mov    0x8(%ebp),%edx
c00055d8:	89 d3                	mov    %edx,%ebx
c00055da:	cd 80                	int    $0x80
c00055dc:	89 45 f8             	mov    %eax,-0x8(%ebp)
c00055df:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:64
}
c00055e2:	83 c4 10             	add    $0x10,%esp
c00055e5:	5b                   	pop    %ebx
c00055e6:	5d                   	pop    %ebp
c00055e7:	c3                   	ret    

c00055e8 <free>:
free():
/work/x86_os_my/lib/user/syscall.c:67

/* 释放ptr指向的内存 */
void free(void* ptr) {
c00055e8:	55                   	push   %ebp
c00055e9:	89 e5                	mov    %esp,%ebp
c00055eb:	53                   	push   %ebx
c00055ec:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:68
	_syscall1(SYS_FREE, ptr);
c00055ef:	b8 03 00 00 00       	mov    $0x3,%eax
c00055f4:	8b 55 08             	mov    0x8(%ebp),%edx
c00055f7:	89 d3                	mov    %edx,%ebx
c00055f9:	cd 80                	int    $0x80
c00055fb:	89 45 f8             	mov    %eax,-0x8(%ebp)
/work/x86_os_my/lib/user/syscall.c:69
}
c00055fe:	90                   	nop
c00055ff:	83 c4 10             	add    $0x10,%esp
c0005602:	5b                   	pop    %ebx
c0005603:	5d                   	pop    %ebp
c0005604:	c3                   	ret    

c0005605 <sys_getpid>:
sys_getpid():
/work/x86_os_my/userprog/syscall-init.c:15
#define syscall_nr 32 
typedef void* syscall;
syscall syscall_table[syscall_nr];

/* 返回当前任务的pid */
uint32_t sys_getpid(void) {
c0005605:	55                   	push   %ebp
c0005606:	89 e5                	mov    %esp,%ebp
c0005608:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/userprog/syscall-init.c:16
	return running_thread()->pid;
c000560b:	e8 f1 e7 ff ff       	call   c0003e01 <running_thread>
c0005610:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0005614:	98                   	cwtl   
/work/x86_os_my/userprog/syscall-init.c:17
}
c0005615:	c9                   	leave  
c0005616:	c3                   	ret    

c0005617 <sys_write>:
sys_write():
/work/x86_os_my/userprog/syscall-init.c:20

/* 打印字符串str(未实现文件系统前的版本) */
uint32_t sys_write(char* str) {
c0005617:	55                   	push   %ebp
c0005618:	89 e5                	mov    %esp,%ebp
c000561a:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/userprog/syscall-init.c:21
	console_put_str(str);
c000561d:	83 ec 0c             	sub    $0xc,%esp
c0005620:	ff 75 08             	pushl  0x8(%ebp)
c0005623:	e8 08 f1 ff ff       	call   c0004730 <console_put_str>
c0005628:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/syscall-init.c:22
	return strlen(str);
c000562b:	83 ec 0c             	sub    $0xc,%esp
c000562e:	ff 75 08             	pushl  0x8(%ebp)
c0005631:	e8 6e e5 ff ff       	call   c0003ba4 <strlen>
c0005636:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/syscall-init.c:23
}
c0005639:	c9                   	leave  
c000563a:	c3                   	ret    

c000563b <syscall_init>:
syscall_init():
/work/x86_os_my/userprog/syscall-init.c:26

/* 初始化系统调用 */
void syscall_init(void) {
c000563b:	55                   	push   %ebp
c000563c:	89 e5                	mov    %esp,%ebp
c000563e:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/userprog/syscall-init.c:27
	put_str("syscall_init start\n");
c0005641:	83 ec 0c             	sub    $0xc,%esp
c0005644:	68 e0 93 00 c0       	push   $0xc00093e0
c0005649:	e8 42 ce ff ff       	call   c0002490 <put_str>
c000564e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/syscall-init.c:28
	syscall_table[SYS_GETPID] = sys_getpid;
c0005651:	c7 05 e0 cd 00 c0 05 	movl   $0xc0005605,0xc000cde0
c0005658:	56 00 c0 
/work/x86_os_my/userprog/syscall-init.c:29
	syscall_table[SYS_WRITE] = sys_write;
c000565b:	c7 05 e4 cd 00 c0 17 	movl   $0xc0005617,0xc000cde4
c0005662:	56 00 c0 
/work/x86_os_my/userprog/syscall-init.c:30
	syscall_table[SYS_MALLOC] = sys_malloc;
c0005665:	c7 05 e8 cd 00 c0 23 	movl   $0xc0002f23,0xc000cde8
c000566c:	2f 00 c0 
/work/x86_os_my/userprog/syscall-init.c:31
	syscall_table[SYS_FREE] = sys_free;
c000566f:	c7 05 ec cd 00 c0 50 	movl   $0xc0003550,0xc000cdec
c0005676:	35 00 c0 
/work/x86_os_my/userprog/syscall-init.c:32
	put_str("syscall_init done\n");
c0005679:	83 ec 0c             	sub    $0xc,%esp
c000567c:	68 f4 93 00 c0       	push   $0xc00093f4
c0005681:	e8 0a ce ff ff       	call   c0002490 <put_str>
c0005686:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/syscall-init.c:33
}
c0005689:	90                   	nop
c000568a:	c9                   	leave  
c000568b:	c3                   	ret    

c000568c <itoa>:
itoa():
/work/x86_os_my/lib/stdio.c:13
#define va_start(ap, v) ap = (va_list)&v	// 把ap指向第一个固定参数v
#define va_arg(ap, t) *((t*)(ap += 4))		// ap指向下一个参数并返回其值
#define va_end(ap) ap = NULL				// 清除ap

/* 将整型转换成字符(integer to ascii) */
static void itoa(uint32_t value, char** buf_ptr_addr, uint8_t base) {
c000568c:	55                   	push   %ebp
c000568d:	89 e5                	mov    %esp,%ebp
c000568f:	83 ec 28             	sub    $0x28,%esp
c0005692:	8b 45 10             	mov    0x10(%ebp),%eax
c0005695:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/lib/stdio.c:14
	uint32_t m = value % base;	// 求模,最先掉下来的是最低位【比如base是16代表16进制】 
c0005698:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
c000569c:	8b 45 08             	mov    0x8(%ebp),%eax
c000569f:	ba 00 00 00 00       	mov    $0x0,%edx
c00056a4:	f7 f1                	div    %ecx
c00056a6:	89 55 f4             	mov    %edx,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:15
	uint32_t i = value / base;	// 取整
c00056a9:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
c00056ad:	8b 45 08             	mov    0x8(%ebp),%eax
c00056b0:	ba 00 00 00 00       	mov    $0x0,%edx
c00056b5:	f7 f1                	div    %ecx
c00056b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/stdio.c:16
	if (i) {
c00056ba:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c00056be:	74 16                	je     c00056d6 <itoa+0x4a>
/work/x86_os_my/lib/stdio.c:17
		itoa(i, buf_ptr_addr, base);	// 如果倍数不为0则递归调用。
c00056c0:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c00056c4:	83 ec 04             	sub    $0x4,%esp
c00056c7:	50                   	push   %eax
c00056c8:	ff 75 0c             	pushl  0xc(%ebp)
c00056cb:	ff 75 f0             	pushl  -0x10(%ebp)
c00056ce:	e8 b9 ff ff ff       	call   c000568c <itoa>
c00056d3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:19
	}
	if (m < 10) {	// 如果余数是0~9
c00056d6:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
c00056da:	77 17                	ja     c00056f3 <itoa+0x67>
/work/x86_os_my/lib/stdio.c:20
		*((*buf_ptr_addr)++) = m + '0';			// 将数字0~9转换为字符'0'~'9'
c00056dc:	8b 45 0c             	mov    0xc(%ebp),%eax
c00056df:	8b 00                	mov    (%eax),%eax
c00056e1:	8d 48 01             	lea    0x1(%eax),%ecx
c00056e4:	8b 55 0c             	mov    0xc(%ebp),%edx
c00056e7:	89 0a                	mov    %ecx,(%edx)
c00056e9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c00056ec:	83 c2 30             	add    $0x30,%edx
c00056ef:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/stdio.c:24
	} else {		// 否则余数是A~F
		*((*buf_ptr_addr)++) = m - 10 + 'A';	// 将数字A~F转换为字符'A'~'F'
	}
}
c00056f1:	eb 15                	jmp    c0005708 <itoa+0x7c>
/work/x86_os_my/lib/stdio.c:22
		itoa(i, buf_ptr_addr, base);	// 如果倍数不为0则递归调用。
	}
	if (m < 10) {	// 如果余数是0~9
		*((*buf_ptr_addr)++) = m + '0';			// 将数字0~9转换为字符'0'~'9'
	} else {		// 否则余数是A~F
		*((*buf_ptr_addr)++) = m - 10 + 'A';	// 将数字A~F转换为字符'A'~'F'
c00056f3:	8b 45 0c             	mov    0xc(%ebp),%eax
c00056f6:	8b 00                	mov    (%eax),%eax
c00056f8:	8d 48 01             	lea    0x1(%eax),%ecx
c00056fb:	8b 55 0c             	mov    0xc(%ebp),%edx
c00056fe:	89 0a                	mov    %ecx,(%edx)
c0005700:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0005703:	83 c2 37             	add    $0x37,%edx
c0005706:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/stdio.c:24
	}
}
c0005708:	90                   	nop
c0005709:	c9                   	leave  
c000570a:	c3                   	ret    

c000570b <vsprintf>:
vsprintf():
/work/x86_os_my/lib/stdio.c:27

/* 将参数ap按照格式format输出到字符串str,并返回替换后str长度 */
uint32_t vsprintf(char* str, const char* format, va_list ap) {
c000570b:	55                   	push   %ebp
c000570c:	89 e5                	mov    %esp,%ebp
c000570e:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/lib/stdio.c:28
	char* buf_ptr = str;
c0005711:	8b 45 08             	mov    0x8(%ebp),%eax
c0005714:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/lib/stdio.c:29
	const char* index_ptr = format;
c0005717:	8b 45 0c             	mov    0xc(%ebp),%eax
c000571a:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:30
	char index_char = *index_ptr;
c000571d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005720:	0f b6 00             	movzbl (%eax),%eax
c0005723:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:33
	int32_t arg_int;
	char* arg_str;
	while(index_char) {
c0005726:	e9 43 01 00 00       	jmp    c000586e <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:34
		if (index_char != '%') {
c000572b:	80 7d f3 25          	cmpb   $0x25,-0xd(%ebp)
c000572f:	74 21                	je     c0005752 <vsprintf+0x47>
/work/x86_os_my/lib/stdio.c:35
			*(buf_ptr++) = index_char;
c0005731:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0005734:	8d 50 01             	lea    0x1(%eax),%edx
c0005737:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c000573a:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
c000573e:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/stdio.c:36
			index_char = *(++index_ptr);
c0005740:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0005744:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005747:	0f b6 00             	movzbl (%eax),%eax
c000574a:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:37
			continue;
c000574d:	e9 1c 01 00 00       	jmp    c000586e <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:39
		}
		index_char = *(++index_ptr);	 // 得到%后面的字符
c0005752:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0005756:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005759:	0f b6 00             	movzbl (%eax),%eax
c000575c:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:40
		switch(index_char) {
c000575f:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c0005763:	83 f8 64             	cmp    $0x64,%eax
c0005766:	0f 84 8e 00 00 00    	je     c00057fa <vsprintf+0xef>
c000576c:	83 f8 64             	cmp    $0x64,%eax
c000576f:	7f 0a                	jg     c000577b <vsprintf+0x70>
c0005771:	83 f8 63             	cmp    $0x63,%eax
c0005774:	74 60                	je     c00057d6 <vsprintf+0xcb>
c0005776:	e9 f3 00 00 00       	jmp    c000586e <vsprintf+0x163>
c000577b:	83 f8 73             	cmp    $0x73,%eax
c000577e:	74 0e                	je     c000578e <vsprintf+0x83>
c0005780:	83 f8 78             	cmp    $0x78,%eax
c0005783:	0f 84 b6 00 00 00    	je     c000583f <vsprintf+0x134>
c0005789:	e9 e0 00 00 00       	jmp    c000586e <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:42
			case 's':
			arg_str = va_arg(ap, char*);
c000578e:	83 45 10 04          	addl   $0x4,0x10(%ebp)
c0005792:	8b 45 10             	mov    0x10(%ebp),%eax
c0005795:	8b 00                	mov    (%eax),%eax
c0005797:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/lib/stdio.c:43
			strcpy(buf_ptr, arg_str);
c000579a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000579d:	83 ec 08             	sub    $0x8,%esp
c00057a0:	ff 75 e8             	pushl  -0x18(%ebp)
c00057a3:	50                   	push   %eax
c00057a4:	e8 a6 e3 ff ff       	call   c0003b4f <strcpy>
c00057a9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:44
			buf_ptr += strlen(arg_str);
c00057ac:	83 ec 0c             	sub    $0xc,%esp
c00057af:	ff 75 e8             	pushl  -0x18(%ebp)
c00057b2:	e8 ed e3 ff ff       	call   c0003ba4 <strlen>
c00057b7:	83 c4 10             	add    $0x10,%esp
c00057ba:	89 c2                	mov    %eax,%edx
c00057bc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00057bf:	01 d0                	add    %edx,%eax
c00057c1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/lib/stdio.c:45
			index_char = *(++index_ptr);
c00057c4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c00057c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00057cb:	0f b6 00             	movzbl (%eax),%eax
c00057ce:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:46
			break;
c00057d1:	e9 98 00 00 00       	jmp    c000586e <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:49

			case 'c':
			*(buf_ptr++) = va_arg(ap, char);
c00057d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00057d9:	8d 50 01             	lea    0x1(%eax),%edx
c00057dc:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c00057df:	83 45 10 04          	addl   $0x4,0x10(%ebp)
c00057e3:	8b 55 10             	mov    0x10(%ebp),%edx
c00057e6:	0f b6 12             	movzbl (%edx),%edx
c00057e9:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/stdio.c:50
			index_char = *(++index_ptr);
c00057eb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c00057ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00057f2:	0f b6 00             	movzbl (%eax),%eax
c00057f5:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:51
			break;
c00057f8:	eb 74                	jmp    c000586e <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:54

			case 'd':
			arg_int = va_arg(ap, int);
c00057fa:	83 45 10 04          	addl   $0x4,0x10(%ebp)
c00057fe:	8b 45 10             	mov    0x10(%ebp),%eax
c0005801:	8b 00                	mov    (%eax),%eax
c0005803:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/lib/stdio.c:56
			/* 若是负数, 将其转为正数后,再正数前面输出个负号'-'. */
			if (arg_int < 0) {
c0005806:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c000580a:	79 0f                	jns    c000581b <vsprintf+0x110>
/work/x86_os_my/lib/stdio.c:57
				arg_int = 0 - arg_int;
c000580c:	f7 5d ec             	negl   -0x14(%ebp)
/work/x86_os_my/lib/stdio.c:58
				*buf_ptr++ = '-';
c000580f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0005812:	8d 50 01             	lea    0x1(%eax),%edx
c0005815:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0005818:	c6 00 2d             	movb   $0x2d,(%eax)
/work/x86_os_my/lib/stdio.c:60
			}
			itoa(arg_int, &buf_ptr, 10); 
c000581b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000581e:	83 ec 04             	sub    $0x4,%esp
c0005821:	6a 0a                	push   $0xa
c0005823:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0005826:	52                   	push   %edx
c0005827:	50                   	push   %eax
c0005828:	e8 5f fe ff ff       	call   c000568c <itoa>
c000582d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:61
			index_char = *(++index_ptr);
c0005830:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0005834:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005837:	0f b6 00             	movzbl (%eax),%eax
c000583a:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:62
			break;
c000583d:	eb 2f                	jmp    c000586e <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:65

			case 'x':
			arg_int = va_arg(ap, int);
c000583f:	83 45 10 04          	addl   $0x4,0x10(%ebp)
c0005843:	8b 45 10             	mov    0x10(%ebp),%eax
c0005846:	8b 00                	mov    (%eax),%eax
c0005848:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/lib/stdio.c:66
			itoa(arg_int, &buf_ptr, 16); 
c000584b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000584e:	83 ec 04             	sub    $0x4,%esp
c0005851:	6a 10                	push   $0x10
c0005853:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0005856:	52                   	push   %edx
c0005857:	50                   	push   %eax
c0005858:	e8 2f fe ff ff       	call   c000568c <itoa>
c000585d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:67
			index_char = *(++index_ptr); // 跳过格式字符并更新index_char
c0005860:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0005864:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005867:	0f b6 00             	movzbl (%eax),%eax
c000586a:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:68
			break;
c000586d:	90                   	nop
/work/x86_os_my/lib/stdio.c:33
	char* buf_ptr = str;
	const char* index_ptr = format;
	char index_char = *index_ptr;
	int32_t arg_int;
	char* arg_str;
	while(index_char) {
c000586e:	80 7d f3 00          	cmpb   $0x0,-0xd(%ebp)
c0005872:	0f 85 b3 fe ff ff    	jne    c000572b <vsprintf+0x20>
/work/x86_os_my/lib/stdio.c:71
			itoa(arg_int, &buf_ptr, 16); 
			index_char = *(++index_ptr); // 跳过格式字符并更新index_char
			break;
		}
	}
	return strlen(str);
c0005878:	83 ec 0c             	sub    $0xc,%esp
c000587b:	ff 75 08             	pushl  0x8(%ebp)
c000587e:	e8 21 e3 ff ff       	call   c0003ba4 <strlen>
c0005883:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:72
}
c0005886:	c9                   	leave  
c0005887:	c3                   	ret    

c0005888 <sprintf>:
sprintf():
/work/x86_os_my/lib/stdio.c:75

/* 同printf不同的地方就是字符串不是写到终端,而是写到buf中 */
uint32_t sprintf(char* buf, const char* format, ...) {
c0005888:	55                   	push   %ebp
c0005889:	89 e5                	mov    %esp,%ebp
c000588b:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/stdio.c:78
	va_list args;
	uint32_t retval;
	va_start(args, format);
c000588e:	8d 45 0c             	lea    0xc(%ebp),%eax
c0005891:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:79
	retval = vsprintf(buf, format, args);
c0005894:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005897:	83 ec 04             	sub    $0x4,%esp
c000589a:	ff 75 f4             	pushl  -0xc(%ebp)
c000589d:	50                   	push   %eax
c000589e:	ff 75 08             	pushl  0x8(%ebp)
c00058a1:	e8 65 fe ff ff       	call   c000570b <vsprintf>
c00058a6:	83 c4 10             	add    $0x10,%esp
c00058a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/stdio.c:80
	va_end(args);
c00058ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:81
	return retval;
c00058b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
/work/x86_os_my/lib/stdio.c:82
}
c00058b6:	c9                   	leave  
c00058b7:	c3                   	ret    

c00058b8 <printf>:
printf():
/work/x86_os_my/lib/stdio.c:85

/* 格式化输出字符串format */
uint32_t printf(const char* format, ...) {
c00058b8:	55                   	push   %ebp
c00058b9:	89 e5                	mov    %esp,%ebp
c00058bb:	57                   	push   %edi
c00058bc:	81 ec 14 04 00 00    	sub    $0x414,%esp
/work/x86_os_my/lib/stdio.c:87
	va_list args;
	va_start(args, format);	       // 使args指向format
c00058c2:	8d 45 08             	lea    0x8(%ebp),%eax
c00058c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:88
	char buf[1024] = {0};	       // 用于存储拼接后的字符串
c00058c8:	8d 95 f4 fb ff ff    	lea    -0x40c(%ebp),%edx
c00058ce:	b8 00 00 00 00       	mov    $0x0,%eax
c00058d3:	b9 00 01 00 00       	mov    $0x100,%ecx
c00058d8:	89 d7                	mov    %edx,%edi
c00058da:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/lib/stdio.c:89
	vsprintf(buf, format, args);
c00058dc:	8b 45 08             	mov    0x8(%ebp),%eax
c00058df:	83 ec 04             	sub    $0x4,%esp
c00058e2:	ff 75 f4             	pushl  -0xc(%ebp)
c00058e5:	50                   	push   %eax
c00058e6:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c00058ec:	50                   	push   %eax
c00058ed:	e8 19 fe ff ff       	call   c000570b <vsprintf>
c00058f2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:90
	va_end(args);
c00058f5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:91
	return write(buf);
c00058fc:	83 ec 0c             	sub    $0xc,%esp
c00058ff:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c0005905:	50                   	push   %eax
c0005906:	e8 9f fc ff ff       	call   c00055aa <write>
c000590b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:92
}
c000590e:	8b 7d fc             	mov    -0x4(%ebp),%edi
c0005911:	c9                   	leave  
c0005912:	c3                   	ret    

c0005913 <outb>:
outb():
/work/x86_os_my/lib/kernel/io.h:17
#define __LIB_IO_H
#include "stdint.h"
//inline省去了函数调用开支

/* 向端口port写入一个字节*/
static inline void outb(uint16_t port, uint8_t data) {
c0005913:	55                   	push   %ebp
c0005914:	89 e5                	mov    %esp,%ebp
c0005916:	83 ec 08             	sub    $0x8,%esp
c0005919:	8b 55 08             	mov    0x8(%ebp),%edx
c000591c:	8b 45 0c             	mov    0xc(%ebp),%eax
c000591f:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c0005923:	88 45 f8             	mov    %al,-0x8(%ebp)
/work/x86_os_my/lib/kernel/io.h:21
/*********************************************************
 a表示用寄存器al或ax或eax,对端口指定N表示0~255, d表示用dx存储端口号, 
 %b0表示对应al,%w1表示对应dx */ 
   asm volatile ( "outb %b0, %w1" : : "a" (data), "Nd" (port));    
c0005926:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c000592a:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c000592e:	ee                   	out    %al,(%dx)
/work/x86_os_my/lib/kernel/io.h:23
/******************************************************/
}
c000592f:	90                   	nop
c0005930:	c9                   	leave  
c0005931:	c3                   	ret    

c0005932 <outsw>:
outsw():
/work/x86_os_my/lib/kernel/io.h:26

/* 将addr处起始的word_cnt个字写入端口port */
static inline void outsw(uint16_t port, const void* addr, uint32_t word_cnt) {
c0005932:	55                   	push   %ebp
c0005933:	89 e5                	mov    %esp,%ebp
c0005935:	56                   	push   %esi
c0005936:	53                   	push   %ebx
c0005937:	83 ec 04             	sub    $0x4,%esp
c000593a:	8b 45 08             	mov    0x8(%ebp),%eax
c000593d:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/io.h:31
/*********************************************************
   +表示此限制即做输入又做输出.
   outsw是把ds:esi处的16位的内容写入port端口, 我们在设置段描述符时, 
   已经将ds,es,ss段的选择子都设置为相同的值了,此时不用担心数据错乱。*/
   asm volatile ("cld; rep outsw" : "+S" (addr), "+c" (word_cnt) : "d" (port));
c0005941:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c0005945:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0005948:	8b 45 10             	mov    0x10(%ebp),%eax
c000594b:	89 cb                	mov    %ecx,%ebx
c000594d:	89 de                	mov    %ebx,%esi
c000594f:	89 c1                	mov    %eax,%ecx
c0005951:	fc                   	cld    
c0005952:	66 f3 6f             	rep outsw %ds:(%esi),(%dx)
c0005955:	89 c8                	mov    %ecx,%eax
c0005957:	89 f3                	mov    %esi,%ebx
c0005959:	89 5d 0c             	mov    %ebx,0xc(%ebp)
c000595c:	89 45 10             	mov    %eax,0x10(%ebp)
/work/x86_os_my/lib/kernel/io.h:33
/******************************************************/
}
c000595f:	90                   	nop
c0005960:	83 c4 04             	add    $0x4,%esp
c0005963:	5b                   	pop    %ebx
c0005964:	5e                   	pop    %esi
c0005965:	5d                   	pop    %ebp
c0005966:	c3                   	ret    

c0005967 <inb>:
inb():
/work/x86_os_my/lib/kernel/io.h:36

/* 将从端口port读入的一个字节返回 */
static inline uint8_t inb(uint16_t port) {
c0005967:	55                   	push   %ebp
c0005968:	89 e5                	mov    %esp,%ebp
c000596a:	83 ec 14             	sub    $0x14,%esp
c000596d:	8b 45 08             	mov    0x8(%ebp),%eax
c0005970:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
/work/x86_os_my/lib/kernel/io.h:38
   uint8_t data;
   asm volatile ("inb %w1, %b0" : "=a" (data) : "Nd" (port));
c0005974:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0005978:	89 c2                	mov    %eax,%edx
c000597a:	ec                   	in     (%dx),%al
c000597b:	88 45 ff             	mov    %al,-0x1(%ebp)
/work/x86_os_my/lib/kernel/io.h:39
   return data;
c000597e:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
/work/x86_os_my/lib/kernel/io.h:40
}
c0005982:	c9                   	leave  
c0005983:	c3                   	ret    

c0005984 <insw>:
insw():
/work/x86_os_my/lib/kernel/io.h:43

/* 将从端口port读入的word_cnt个字写入addr */
static inline void insw(uint16_t port, void* addr, uint32_t word_cnt) {
c0005984:	55                   	push   %ebp
c0005985:	89 e5                	mov    %esp,%ebp
c0005987:	57                   	push   %edi
c0005988:	53                   	push   %ebx
c0005989:	83 ec 04             	sub    $0x4,%esp
c000598c:	8b 45 08             	mov    0x8(%ebp),%eax
c000598f:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/io.h:48
/******************************************************
   insw是将从端口port处读入的16位内容写入es:edi指向的内存,
   我们在设置段描述符时, 已经将ds,es,ss段的选择子都设置为相同的值了,
   此时不用担心数据错乱。*/
   asm volatile ("cld; rep insw" : "+D" (addr), "+c" (word_cnt) : "d" (port) : "memory");
c0005993:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c0005997:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c000599a:	8b 45 10             	mov    0x10(%ebp),%eax
c000599d:	89 cb                	mov    %ecx,%ebx
c000599f:	89 df                	mov    %ebx,%edi
c00059a1:	89 c1                	mov    %eax,%ecx
c00059a3:	fc                   	cld    
c00059a4:	66 f3 6d             	rep insw (%dx),%es:(%edi)
c00059a7:	89 c8                	mov    %ecx,%eax
c00059a9:	89 fb                	mov    %edi,%ebx
c00059ab:	89 5d 0c             	mov    %ebx,0xc(%ebp)
c00059ae:	89 45 10             	mov    %eax,0x10(%ebp)
/work/x86_os_my/lib/kernel/io.h:50
/******************************************************/
}
c00059b1:	90                   	nop
c00059b2:	83 c4 04             	add    $0x4,%esp
c00059b5:	5b                   	pop    %ebx
c00059b6:	5f                   	pop    %edi
c00059b7:	5d                   	pop    %ebp
c00059b8:	c3                   	ret    

c00059b9 <select_disk>:
select_disk():
/work/x86_os_my/device/ide.c:78
} __attribute__ ((packed));


/////////////////////////////////////// ide驱动部分 ////////////////////////////////////////////////
/* 选择读写的硬盘 */
static void select_disk(struct disk* hd) {
c00059b9:	55                   	push   %ebp
c00059ba:	89 e5                	mov    %esp,%ebp
c00059bc:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/device/ide.c:79
	uint8_t reg_device = BIT_DEV_MBS | BIT_DEV_LBA;
c00059bf:	c6 45 ff e0          	movb   $0xe0,-0x1(%ebp)
/work/x86_os_my/device/ide.c:80
	if (hd->dev_no == 1) {	// 若是从盘就置DEV位为1
c00059c3:	8b 45 08             	mov    0x8(%ebp),%eax
c00059c6:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
c00059ca:	3c 01                	cmp    $0x1,%al
c00059cc:	75 04                	jne    c00059d2 <select_disk+0x19>
/work/x86_os_my/device/ide.c:81
		reg_device |= BIT_DEV_DEV;
c00059ce:	80 4d ff 10          	orb    $0x10,-0x1(%ebp)
/work/x86_os_my/device/ide.c:83
	}
	outb(reg_dev(hd->my_channel), reg_device);
c00059d2:	0f b6 55 ff          	movzbl -0x1(%ebp),%edx
c00059d6:	8b 45 08             	mov    0x8(%ebp),%eax
c00059d9:	8b 40 08             	mov    0x8(%eax),%eax
c00059dc:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c00059e0:	83 c0 06             	add    $0x6,%eax
c00059e3:	0f b7 c0             	movzwl %ax,%eax
c00059e6:	52                   	push   %edx
c00059e7:	50                   	push   %eax
c00059e8:	e8 26 ff ff ff       	call   c0005913 <outb>
c00059ed:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/ide.c:84
}
c00059f0:	90                   	nop
c00059f1:	c9                   	leave  
c00059f2:	c3                   	ret    

c00059f3 <select_sector>:
select_sector():
/work/x86_os_my/device/ide.c:87

/* 向硬盘控制器写入起始扇区地址及要读写的扇区数 */
static void select_sector(struct disk* hd, uint32_t lba, uint8_t sec_cnt) {
c00059f3:	55                   	push   %ebp
c00059f4:	89 e5                	mov    %esp,%ebp
c00059f6:	83 ec 28             	sub    $0x28,%esp
c00059f9:	8b 45 10             	mov    0x10(%ebp),%eax
c00059fc:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/device/ide.c:88
	ASSERT(lba <= max_lba);
c00059ff:	81 7d 0c ff 7f 02 00 	cmpl   $0x27fff,0xc(%ebp)
c0005a06:	76 19                	jbe    c0005a21 <select_sector+0x2e>
/work/x86_os_my/device/ide.c:88 (discriminator 1)
c0005a08:	68 08 94 00 c0       	push   $0xc0009408
c0005a0d:	68 a0 95 00 c0       	push   $0xc00095a0
c0005a12:	6a 58                	push   $0x58
c0005a14:	68 17 94 00 c0       	push   $0xc0009417
c0005a19:	e8 e4 cb ff ff       	call   c0002602 <panic_spin>
c0005a1e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:89
	struct ide_channel* channel = hd->my_channel;
c0005a21:	8b 45 08             	mov    0x8(%ebp),%eax
c0005a24:	8b 40 08             	mov    0x8(%eax),%eax
c0005a27:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/ide.c:92

	/* 写入要读写的扇区数*/
	outb(reg_sect_cnt(channel), sec_cnt);	// 如果sec_cnt为0,则表示写入256个扇区
c0005a2a:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c0005a2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005a31:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005a35:	83 c0 02             	add    $0x2,%eax
c0005a38:	0f b7 c0             	movzwl %ax,%eax
c0005a3b:	83 ec 08             	sub    $0x8,%esp
c0005a3e:	52                   	push   %edx
c0005a3f:	50                   	push   %eax
c0005a40:	e8 ce fe ff ff       	call   c0005913 <outb>
c0005a45:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:95

	/* 写入lba地址(即扇区号) */
	outb(reg_lba_l(channel), lba);			// lba地址的低8位,不用单独取出低8位.outb函数中的汇编指令outb %b0, %w1会只用al。
c0005a48:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005a4b:	0f b6 d0             	movzbl %al,%edx
c0005a4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005a51:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005a55:	83 c0 03             	add    $0x3,%eax
c0005a58:	0f b7 c0             	movzwl %ax,%eax
c0005a5b:	83 ec 08             	sub    $0x8,%esp
c0005a5e:	52                   	push   %edx
c0005a5f:	50                   	push   %eax
c0005a60:	e8 ae fe ff ff       	call   c0005913 <outb>
c0005a65:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:96
	outb(reg_lba_m(channel), lba >> 8);		// lba地址的8~15位
c0005a68:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005a6b:	c1 e8 08             	shr    $0x8,%eax
c0005a6e:	0f b6 d0             	movzbl %al,%edx
c0005a71:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005a74:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005a78:	83 c0 04             	add    $0x4,%eax
c0005a7b:	0f b7 c0             	movzwl %ax,%eax
c0005a7e:	83 ec 08             	sub    $0x8,%esp
c0005a81:	52                   	push   %edx
c0005a82:	50                   	push   %eax
c0005a83:	e8 8b fe ff ff       	call   c0005913 <outb>
c0005a88:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:97
	outb(reg_lba_h(channel), lba >> 16);	// lba地址的16~23位
c0005a8b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005a8e:	c1 e8 10             	shr    $0x10,%eax
c0005a91:	0f b6 d0             	movzbl %al,%edx
c0005a94:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005a97:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005a9b:	83 c0 05             	add    $0x5,%eax
c0005a9e:	0f b7 c0             	movzwl %ax,%eax
c0005aa1:	83 ec 08             	sub    $0x8,%esp
c0005aa4:	52                   	push   %edx
c0005aa5:	50                   	push   %eax
c0005aa6:	e8 68 fe ff ff       	call   c0005913 <outb>
c0005aab:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:101

	/* 因为lba地址的24~27位要存储在device寄存器的0～3位,
	* 无法单独写入这4位,所以在此处把device寄存器再重新写入一次*/
	outb(reg_dev(channel), BIT_DEV_MBS | BIT_DEV_LBA | (hd->dev_no == 1 ? BIT_DEV_DEV : 0) | lba >> 24);
c0005aae:	8b 45 08             	mov    0x8(%ebp),%eax
c0005ab1:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
c0005ab5:	3c 01                	cmp    $0x1,%al
c0005ab7:	75 07                	jne    c0005ac0 <select_sector+0xcd>
/work/x86_os_my/device/ide.c:101 (discriminator 1)
c0005ab9:	ba f0 ff ff ff       	mov    $0xfffffff0,%edx
c0005abe:	eb 05                	jmp    c0005ac5 <select_sector+0xd2>
/work/x86_os_my/device/ide.c:101 (discriminator 2)
c0005ac0:	ba e0 ff ff ff       	mov    $0xffffffe0,%edx
/work/x86_os_my/device/ide.c:101 (discriminator 4)
c0005ac5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005ac8:	c1 e8 18             	shr    $0x18,%eax
c0005acb:	09 d0                	or     %edx,%eax
c0005acd:	0f b6 d0             	movzbl %al,%edx
c0005ad0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005ad3:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005ad7:	83 c0 06             	add    $0x6,%eax
c0005ada:	0f b7 c0             	movzwl %ax,%eax
c0005add:	83 ec 08             	sub    $0x8,%esp
c0005ae0:	52                   	push   %edx
c0005ae1:	50                   	push   %eax
c0005ae2:	e8 2c fe ff ff       	call   c0005913 <outb>
c0005ae7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:102 (discriminator 4)
}
c0005aea:	90                   	nop
c0005aeb:	c9                   	leave  
c0005aec:	c3                   	ret    

c0005aed <cmd_out>:
cmd_out():
/work/x86_os_my/device/ide.c:105

/* 向通道channel发命令cmd */
static void cmd_out(struct ide_channel* channel, uint8_t cmd) {
c0005aed:	55                   	push   %ebp
c0005aee:	89 e5                	mov    %esp,%ebp
c0005af0:	83 ec 04             	sub    $0x4,%esp
c0005af3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005af6:	88 45 fc             	mov    %al,-0x4(%ebp)
/work/x86_os_my/device/ide.c:107
	/* 只要向硬盘发出了命令便将此标记置为true,硬盘中断处理程序需要根据它来判断 */
	channel->expecting_intr = true;
c0005af9:	8b 45 08             	mov    0x8(%ebp),%eax
c0005afc:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
/work/x86_os_my/device/ide.c:108
	outb(reg_cmd(channel), cmd);
c0005b03:	0f b6 55 fc          	movzbl -0x4(%ebp),%edx
c0005b07:	8b 45 08             	mov    0x8(%ebp),%eax
c0005b0a:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005b0e:	83 c0 07             	add    $0x7,%eax
c0005b11:	0f b7 c0             	movzwl %ax,%eax
c0005b14:	52                   	push   %edx
c0005b15:	50                   	push   %eax
c0005b16:	e8 f8 fd ff ff       	call   c0005913 <outb>
c0005b1b:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/ide.c:109
}
c0005b1e:	90                   	nop
c0005b1f:	c9                   	leave  
c0005b20:	c3                   	ret    

c0005b21 <read_from_sector>:
read_from_sector():
/work/x86_os_my/device/ide.c:112

/* 硬盘读入sec_cnt个扇区的数据到buf */
static void read_from_sector(struct disk* hd, void* buf, uint8_t sec_cnt) {
c0005b21:	55                   	push   %ebp
c0005b22:	89 e5                	mov    %esp,%ebp
c0005b24:	83 ec 14             	sub    $0x14,%esp
c0005b27:	8b 45 10             	mov    0x10(%ebp),%eax
c0005b2a:	88 45 ec             	mov    %al,-0x14(%ebp)
/work/x86_os_my/device/ide.c:114
	uint32_t size_in_byte;
	if (sec_cnt == 0) {
c0005b2d:	80 7d ec 00          	cmpb   $0x0,-0x14(%ebp)
c0005b31:	75 09                	jne    c0005b3c <read_from_sector+0x1b>
/work/x86_os_my/device/ide.c:116
		/* 因为sec_cnt是8位变量,由主调函数将其赋值时,若为256则会将最高位的1丢掉变为0 */
		size_in_byte = 256 * 512;
c0005b33:	c7 45 fc 00 00 02 00 	movl   $0x20000,-0x4(%ebp)
c0005b3a:	eb 0a                	jmp    c0005b46 <read_from_sector+0x25>
/work/x86_os_my/device/ide.c:118
	} else { 
		size_in_byte = sec_cnt * 512; 
c0005b3c:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0005b40:	c1 e0 09             	shl    $0x9,%eax
c0005b43:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/device/ide.c:120
	}
	insw(reg_data(hd->my_channel), buf, size_in_byte / 2);
c0005b46:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0005b49:	d1 e8                	shr    %eax
c0005b4b:	89 c2                	mov    %eax,%edx
c0005b4d:	8b 45 08             	mov    0x8(%ebp),%eax
c0005b50:	8b 40 08             	mov    0x8(%eax),%eax
c0005b53:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005b57:	0f b7 c0             	movzwl %ax,%eax
c0005b5a:	52                   	push   %edx
c0005b5b:	ff 75 0c             	pushl  0xc(%ebp)
c0005b5e:	50                   	push   %eax
c0005b5f:	e8 20 fe ff ff       	call   c0005984 <insw>
c0005b64:	83 c4 0c             	add    $0xc,%esp
/work/x86_os_my/device/ide.c:121
}
c0005b67:	90                   	nop
c0005b68:	c9                   	leave  
c0005b69:	c3                   	ret    

c0005b6a <write2sector>:
write2sector():
/work/x86_os_my/device/ide.c:124

/* 将buf中sec_cnt扇区的数据写入硬盘 */
static void write2sector(struct disk* hd, void* buf, uint8_t sec_cnt) {
c0005b6a:	55                   	push   %ebp
c0005b6b:	89 e5                	mov    %esp,%ebp
c0005b6d:	83 ec 14             	sub    $0x14,%esp
c0005b70:	8b 45 10             	mov    0x10(%ebp),%eax
c0005b73:	88 45 ec             	mov    %al,-0x14(%ebp)
/work/x86_os_my/device/ide.c:126
	uint32_t size_in_byte;
	if (sec_cnt == 0) {
c0005b76:	80 7d ec 00          	cmpb   $0x0,-0x14(%ebp)
c0005b7a:	75 09                	jne    c0005b85 <write2sector+0x1b>
/work/x86_os_my/device/ide.c:128
		/* 因为sec_cnt是8位变量,由主调函数将其赋值时,若为256则会将最高位的1丢掉变为0 */
		size_in_byte = 256 * 512;
c0005b7c:	c7 45 fc 00 00 02 00 	movl   $0x20000,-0x4(%ebp)
c0005b83:	eb 0a                	jmp    c0005b8f <write2sector+0x25>
/work/x86_os_my/device/ide.c:130
	} else { 
		size_in_byte = sec_cnt * 512; 
c0005b85:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0005b89:	c1 e0 09             	shl    $0x9,%eax
c0005b8c:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/device/ide.c:132
	}
	outsw(reg_data(hd->my_channel), buf, size_in_byte / 2);
c0005b8f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0005b92:	d1 e8                	shr    %eax
c0005b94:	89 c2                	mov    %eax,%edx
c0005b96:	8b 45 08             	mov    0x8(%ebp),%eax
c0005b99:	8b 40 08             	mov    0x8(%eax),%eax
c0005b9c:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005ba0:	0f b7 c0             	movzwl %ax,%eax
c0005ba3:	52                   	push   %edx
c0005ba4:	ff 75 0c             	pushl  0xc(%ebp)
c0005ba7:	50                   	push   %eax
c0005ba8:	e8 85 fd ff ff       	call   c0005932 <outsw>
c0005bad:	83 c4 0c             	add    $0xc,%esp
/work/x86_os_my/device/ide.c:133
}
c0005bb0:	90                   	nop
c0005bb1:	c9                   	leave  
c0005bb2:	c3                   	ret    

c0005bb3 <busy_wait>:
busy_wait():
/work/x86_os_my/device/ide.c:136

/* 等待30秒 */
static bool busy_wait(struct disk* hd) {
c0005bb3:	55                   	push   %ebp
c0005bb4:	89 e5                	mov    %esp,%ebp
c0005bb6:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/ide.c:137
	struct ide_channel* channel = hd->my_channel;
c0005bb9:	8b 45 08             	mov    0x8(%ebp),%eax
c0005bbc:	8b 40 08             	mov    0x8(%eax),%eax
c0005bbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:138
	uint16_t time_limit = 30 * 1000;	// 可以等待30000毫秒
c0005bc2:	66 c7 45 f6 30 75    	movw   $0x7530,-0xa(%ebp)
/work/x86_os_my/device/ide.c:139
	while (time_limit -= 10 >= 0) {
c0005bc8:	eb 45                	jmp    c0005c0f <busy_wait+0x5c>
/work/x86_os_my/device/ide.c:140
		if (!(inb(reg_status(channel)) & BIT_STAT_BSY)) {
c0005bca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0005bcd:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005bd1:	83 c0 07             	add    $0x7,%eax
c0005bd4:	0f b7 c0             	movzwl %ax,%eax
c0005bd7:	50                   	push   %eax
c0005bd8:	e8 8a fd ff ff       	call   c0005967 <inb>
c0005bdd:	83 c4 04             	add    $0x4,%esp
c0005be0:	84 c0                	test   %al,%al
c0005be2:	78 1e                	js     c0005c02 <busy_wait+0x4f>
/work/x86_os_my/device/ide.c:141
			return (inb(reg_status(channel)) & BIT_STAT_DRQ);
c0005be4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0005be7:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005beb:	83 c0 07             	add    $0x7,%eax
c0005bee:	0f b7 c0             	movzwl %ax,%eax
c0005bf1:	50                   	push   %eax
c0005bf2:	e8 70 fd ff ff       	call   c0005967 <inb>
c0005bf7:	83 c4 04             	add    $0x4,%esp
c0005bfa:	0f b6 c0             	movzbl %al,%eax
c0005bfd:	83 e0 08             	and    $0x8,%eax
c0005c00:	eb 1e                	jmp    c0005c20 <busy_wait+0x6d>
/work/x86_os_my/device/ide.c:143
		} else {
			mtime_sleep(10);			// 睡眠10毫秒
c0005c02:	83 ec 0c             	sub    $0xc,%esp
c0005c05:	6a 0a                	push   $0xa
c0005c07:	e8 79 c2 ff ff       	call   c0001e85 <mtime_sleep>
c0005c0c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:139

/* 等待30秒 */
static bool busy_wait(struct disk* hd) {
	struct ide_channel* channel = hd->my_channel;
	uint16_t time_limit = 30 * 1000;	// 可以等待30000毫秒
	while (time_limit -= 10 >= 0) {
c0005c0f:	66 83 6d f6 01       	subw   $0x1,-0xa(%ebp)
c0005c14:	66 83 7d f6 00       	cmpw   $0x0,-0xa(%ebp)
c0005c19:	75 af                	jne    c0005bca <busy_wait+0x17>
/work/x86_os_my/device/ide.c:146
			return (inb(reg_status(channel)) & BIT_STAT_DRQ);
		} else {
			mtime_sleep(10);			// 睡眠10毫秒
		}
	}
	return false;
c0005c1b:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/device/ide.c:147
}
c0005c20:	c9                   	leave  
c0005c21:	c3                   	ret    

c0005c22 <ide_read>:
ide_read():
/work/x86_os_my/device/ide.c:150

/* 从硬盘读取sec_cnt个扇区到buf */
void ide_read(struct disk* hd, uint32_t lba, void* buf, uint32_t sec_cnt) { 
c0005c22:	55                   	push   %ebp
c0005c23:	89 e5                	mov    %esp,%ebp
c0005c25:	83 ec 58             	sub    $0x58,%esp
/work/x86_os_my/device/ide.c:151
	ASSERT(lba <= max_lba);
c0005c28:	81 7d 0c ff 7f 02 00 	cmpl   $0x27fff,0xc(%ebp)
c0005c2f:	76 1c                	jbe    c0005c4d <ide_read+0x2b>
/work/x86_os_my/device/ide.c:151 (discriminator 1)
c0005c31:	68 08 94 00 c0       	push   $0xc0009408
c0005c36:	68 b0 95 00 c0       	push   $0xc00095b0
c0005c3b:	68 97 00 00 00       	push   $0x97
c0005c40:	68 17 94 00 c0       	push   $0xc0009417
c0005c45:	e8 b8 c9 ff ff       	call   c0002602 <panic_spin>
c0005c4a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:152
	ASSERT(sec_cnt > 0);
c0005c4d:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0005c51:	75 1c                	jne    c0005c6f <ide_read+0x4d>
/work/x86_os_my/device/ide.c:152 (discriminator 1)
c0005c53:	68 24 94 00 c0       	push   $0xc0009424
c0005c58:	68 b0 95 00 c0       	push   $0xc00095b0
c0005c5d:	68 98 00 00 00       	push   $0x98
c0005c62:	68 17 94 00 c0       	push   $0xc0009417
c0005c67:	e8 96 c9 ff ff       	call   c0002602 <panic_spin>
c0005c6c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:153
	lock_acquire (&hd->my_channel->lock);
c0005c6f:	8b 45 08             	mov    0x8(%ebp),%eax
c0005c72:	8b 40 08             	mov    0x8(%eax),%eax
c0005c75:	83 c0 0c             	add    $0xc,%eax
c0005c78:	83 ec 0c             	sub    $0xc,%esp
c0005c7b:	50                   	push   %eax
c0005c7c:	e8 1e ed ff ff       	call   c000499f <lock_acquire>
c0005c81:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:156

	/* 1 先选择操作的硬盘 */
	select_disk(hd);
c0005c84:	83 ec 0c             	sub    $0xc,%esp
c0005c87:	ff 75 08             	pushl  0x8(%ebp)
c0005c8a:	e8 2a fd ff ff       	call   c00059b9 <select_disk>
c0005c8f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:159

	uint32_t secs_op;		// 每次操作的扇区数
	uint32_t secs_done = 0;	// 已完成的扇区数
c0005c92:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/device/ide.c:160
	while(secs_done < sec_cnt) {
c0005c99:	e9 d4 00 00 00       	jmp    c0005d72 <ide_read+0x150>
/work/x86_os_my/device/ide.c:161
		if ((secs_done + 256) <= sec_cnt) {
c0005c9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0005ca1:	05 00 01 00 00       	add    $0x100,%eax
c0005ca6:	3b 45 14             	cmp    0x14(%ebp),%eax
c0005ca9:	77 09                	ja     c0005cb4 <ide_read+0x92>
/work/x86_os_my/device/ide.c:162
			secs_op = 256;
c0005cab:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
c0005cb2:	eb 09                	jmp    c0005cbd <ide_read+0x9b>
/work/x86_os_my/device/ide.c:164
		} else {
			secs_op = sec_cnt - secs_done;
c0005cb4:	8b 45 14             	mov    0x14(%ebp),%eax
c0005cb7:	2b 45 f0             	sub    -0x10(%ebp),%eax
c0005cba:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/ide.c:168
		}

		/* 2 写入待读入的扇区数和起始扇区号 */
		select_sector(hd, lba + secs_done, secs_op);
c0005cbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005cc0:	0f b6 c0             	movzbl %al,%eax
c0005cc3:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0005cc6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0005cc9:	01 ca                	add    %ecx,%edx
c0005ccb:	83 ec 04             	sub    $0x4,%esp
c0005cce:	50                   	push   %eax
c0005ccf:	52                   	push   %edx
c0005cd0:	ff 75 08             	pushl  0x8(%ebp)
c0005cd3:	e8 1b fd ff ff       	call   c00059f3 <select_sector>
c0005cd8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:171

		/* 3 执行的命令写入reg_cmd寄存器 */
		cmd_out(hd->my_channel, CMD_READ_SECTOR);	// 准备开始读数据
c0005cdb:	8b 45 08             	mov    0x8(%ebp),%eax
c0005cde:	8b 40 08             	mov    0x8(%eax),%eax
c0005ce1:	83 ec 08             	sub    $0x8,%esp
c0005ce4:	6a 20                	push   $0x20
c0005ce6:	50                   	push   %eax
c0005ce7:	e8 01 fe ff ff       	call   c0005aed <cmd_out>
c0005cec:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:176

		/*********************   阻塞自己的时机  ***********************
		在硬盘已经开始工作(开始在内部读数据或写数据)后才能阻塞自己,现在硬盘已经开始忙了,
		将自己阻塞,等待硬盘完成读操作后通过中断处理程序唤醒自己*/
		sema_down(&hd->my_channel->disk_done);
c0005cef:	8b 45 08             	mov    0x8(%ebp),%eax
c0005cf2:	8b 40 08             	mov    0x8(%eax),%eax
c0005cf5:	83 c0 2c             	add    $0x2c,%eax
c0005cf8:	83 ec 0c             	sub    $0xc,%esp
c0005cfb:	50                   	push   %eax
c0005cfc:	e8 f4 ea ff ff       	call   c00047f5 <sema_down>
c0005d01:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:181
		/*************************************************************/

		/* 4 检测硬盘状态是否可读 */
		/* 醒来后开始执行下面代码*/
		if (!busy_wait(hd)) {	// 若失败
c0005d04:	83 ec 0c             	sub    $0xc,%esp
c0005d07:	ff 75 08             	pushl  0x8(%ebp)
c0005d0a:	e8 a4 fe ff ff       	call   c0005bb3 <busy_wait>
c0005d0f:	83 c4 10             	add    $0x10,%esp
c0005d12:	85 c0                	test   %eax,%eax
c0005d14:	75 33                	jne    c0005d49 <ide_read+0x127>
/work/x86_os_my/device/ide.c:183
			char error[64];
			sprintf(error, "%s read sector %d failed!!!!!!\n", hd->name, lba);
c0005d16:	8b 45 08             	mov    0x8(%ebp),%eax
c0005d19:	ff 75 0c             	pushl  0xc(%ebp)
c0005d1c:	50                   	push   %eax
c0005d1d:	68 30 94 00 c0       	push   $0xc0009430
c0005d22:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0005d25:	50                   	push   %eax
c0005d26:	e8 5d fb ff ff       	call   c0005888 <sprintf>
c0005d2b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:184
			PANIC(error);
c0005d2e:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0005d31:	50                   	push   %eax
c0005d32:	68 b0 95 00 c0       	push   $0xc00095b0
c0005d37:	68 b8 00 00 00       	push   $0xb8
c0005d3c:	68 17 94 00 c0       	push   $0xc0009417
c0005d41:	e8 bc c8 ff ff       	call   c0002602 <panic_spin>
c0005d46:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:188
		}

		/* 5 把数据从硬盘的缓冲区中读出 */
		read_from_sector(hd, (void*)((uint32_t)buf + secs_done * 512), secs_op);
c0005d49:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005d4c:	0f b6 c0             	movzbl %al,%eax
c0005d4f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0005d52:	89 d1                	mov    %edx,%ecx
c0005d54:	c1 e1 09             	shl    $0x9,%ecx
c0005d57:	8b 55 10             	mov    0x10(%ebp),%edx
c0005d5a:	01 ca                	add    %ecx,%edx
c0005d5c:	83 ec 04             	sub    $0x4,%esp
c0005d5f:	50                   	push   %eax
c0005d60:	52                   	push   %edx
c0005d61:	ff 75 08             	pushl  0x8(%ebp)
c0005d64:	e8 b8 fd ff ff       	call   c0005b21 <read_from_sector>
c0005d69:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:189
		secs_done += secs_op;
c0005d6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005d6f:	01 45 f0             	add    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:160
	/* 1 先选择操作的硬盘 */
	select_disk(hd);

	uint32_t secs_op;		// 每次操作的扇区数
	uint32_t secs_done = 0;	// 已完成的扇区数
	while(secs_done < sec_cnt) {
c0005d72:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0005d75:	3b 45 14             	cmp    0x14(%ebp),%eax
c0005d78:	0f 82 20 ff ff ff    	jb     c0005c9e <ide_read+0x7c>
/work/x86_os_my/device/ide.c:191

		/* 5 把数据从硬盘的缓冲区中读出 */
		read_from_sector(hd, (void*)((uint32_t)buf + secs_done * 512), secs_op);
		secs_done += secs_op;
	}
	lock_release(&hd->my_channel->lock);
c0005d7e:	8b 45 08             	mov    0x8(%ebp),%eax
c0005d81:	8b 40 08             	mov    0x8(%eax),%eax
c0005d84:	83 c0 0c             	add    $0xc,%eax
c0005d87:	83 ec 0c             	sub    $0xc,%esp
c0005d8a:	50                   	push   %eax
c0005d8b:	e8 86 ec ff ff       	call   c0004a16 <lock_release>
c0005d90:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:192
}
c0005d93:	90                   	nop
c0005d94:	c9                   	leave  
c0005d95:	c3                   	ret    

c0005d96 <ide_write>:
ide_write():
/work/x86_os_my/device/ide.c:195

/* 将buf中sec_cnt扇区数据写入硬盘 */
void ide_write(struct disk* hd, uint32_t lba, void* buf, uint32_t sec_cnt) {
c0005d96:	55                   	push   %ebp
c0005d97:	89 e5                	mov    %esp,%ebp
c0005d99:	83 ec 58             	sub    $0x58,%esp
/work/x86_os_my/device/ide.c:196
	ASSERT(lba <= max_lba);
c0005d9c:	81 7d 0c ff 7f 02 00 	cmpl   $0x27fff,0xc(%ebp)
c0005da3:	76 1c                	jbe    c0005dc1 <ide_write+0x2b>
/work/x86_os_my/device/ide.c:196 (discriminator 1)
c0005da5:	68 08 94 00 c0       	push   $0xc0009408
c0005daa:	68 bc 95 00 c0       	push   $0xc00095bc
c0005daf:	68 c4 00 00 00       	push   $0xc4
c0005db4:	68 17 94 00 c0       	push   $0xc0009417
c0005db9:	e8 44 c8 ff ff       	call   c0002602 <panic_spin>
c0005dbe:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:197
	ASSERT(sec_cnt > 0);
c0005dc1:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0005dc5:	75 1c                	jne    c0005de3 <ide_write+0x4d>
/work/x86_os_my/device/ide.c:197 (discriminator 1)
c0005dc7:	68 24 94 00 c0       	push   $0xc0009424
c0005dcc:	68 bc 95 00 c0       	push   $0xc00095bc
c0005dd1:	68 c5 00 00 00       	push   $0xc5
c0005dd6:	68 17 94 00 c0       	push   $0xc0009417
c0005ddb:	e8 22 c8 ff ff       	call   c0002602 <panic_spin>
c0005de0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:198
	lock_acquire (&hd->my_channel->lock);
c0005de3:	8b 45 08             	mov    0x8(%ebp),%eax
c0005de6:	8b 40 08             	mov    0x8(%eax),%eax
c0005de9:	83 c0 0c             	add    $0xc,%eax
c0005dec:	83 ec 0c             	sub    $0xc,%esp
c0005def:	50                   	push   %eax
c0005df0:	e8 aa eb ff ff       	call   c000499f <lock_acquire>
c0005df5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:201

	/* 1 先选择操作的硬盘 */
	select_disk(hd);
c0005df8:	83 ec 0c             	sub    $0xc,%esp
c0005dfb:	ff 75 08             	pushl  0x8(%ebp)
c0005dfe:	e8 b6 fb ff ff       	call   c00059b9 <select_disk>
c0005e03:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:204

	uint32_t secs_op;		// 每次操作的扇区数
	uint32_t secs_done = 0;	// 已完成的扇区数
c0005e06:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/device/ide.c:205
	while(secs_done < sec_cnt) {
c0005e0d:	e9 d4 00 00 00       	jmp    c0005ee6 <ide_write+0x150>
/work/x86_os_my/device/ide.c:206
		if ((secs_done + 256) <= sec_cnt) {
c0005e12:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0005e15:	05 00 01 00 00       	add    $0x100,%eax
c0005e1a:	3b 45 14             	cmp    0x14(%ebp),%eax
c0005e1d:	77 09                	ja     c0005e28 <ide_write+0x92>
/work/x86_os_my/device/ide.c:207
			secs_op = 256;
c0005e1f:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
c0005e26:	eb 09                	jmp    c0005e31 <ide_write+0x9b>
/work/x86_os_my/device/ide.c:209
		} else {
			secs_op = sec_cnt - secs_done;
c0005e28:	8b 45 14             	mov    0x14(%ebp),%eax
c0005e2b:	2b 45 f0             	sub    -0x10(%ebp),%eax
c0005e2e:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/ide.c:213
		}

		/* 2 写入待写入的扇区数和起始扇区号 */
		select_sector(hd, lba + secs_done, secs_op);
c0005e31:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005e34:	0f b6 c0             	movzbl %al,%eax
c0005e37:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0005e3a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0005e3d:	01 ca                	add    %ecx,%edx
c0005e3f:	83 ec 04             	sub    $0x4,%esp
c0005e42:	50                   	push   %eax
c0005e43:	52                   	push   %edx
c0005e44:	ff 75 08             	pushl  0x8(%ebp)
c0005e47:	e8 a7 fb ff ff       	call   c00059f3 <select_sector>
c0005e4c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:216

		/* 3 执行的命令写入reg_cmd寄存器 */
		cmd_out(hd->my_channel, CMD_WRITE_SECTOR);	// 准备开始写数据
c0005e4f:	8b 45 08             	mov    0x8(%ebp),%eax
c0005e52:	8b 40 08             	mov    0x8(%eax),%eax
c0005e55:	83 ec 08             	sub    $0x8,%esp
c0005e58:	6a 30                	push   $0x30
c0005e5a:	50                   	push   %eax
c0005e5b:	e8 8d fc ff ff       	call   c0005aed <cmd_out>
c0005e60:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:219

		/* 4 检测硬盘状态是否可读 */
		if (!busy_wait(hd)) {	// 若失败
c0005e63:	83 ec 0c             	sub    $0xc,%esp
c0005e66:	ff 75 08             	pushl  0x8(%ebp)
c0005e69:	e8 45 fd ff ff       	call   c0005bb3 <busy_wait>
c0005e6e:	83 c4 10             	add    $0x10,%esp
c0005e71:	85 c0                	test   %eax,%eax
c0005e73:	75 33                	jne    c0005ea8 <ide_write+0x112>
/work/x86_os_my/device/ide.c:221
			char error[64];
			sprintf(error, "%s write sector %d failed!!!!!!\n", hd->name, lba);
c0005e75:	8b 45 08             	mov    0x8(%ebp),%eax
c0005e78:	ff 75 0c             	pushl  0xc(%ebp)
c0005e7b:	50                   	push   %eax
c0005e7c:	68 50 94 00 c0       	push   $0xc0009450
c0005e81:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0005e84:	50                   	push   %eax
c0005e85:	e8 fe f9 ff ff       	call   c0005888 <sprintf>
c0005e8a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:222
			PANIC(error);
c0005e8d:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0005e90:	50                   	push   %eax
c0005e91:	68 bc 95 00 c0       	push   $0xc00095bc
c0005e96:	68 de 00 00 00       	push   $0xde
c0005e9b:	68 17 94 00 c0       	push   $0xc0009417
c0005ea0:	e8 5d c7 ff ff       	call   c0002602 <panic_spin>
c0005ea5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:226
		}

		/* 5 将数据写入硬盘 */
		write2sector(hd, (void*)((uint32_t)buf + secs_done * 512), secs_op);
c0005ea8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005eab:	0f b6 c0             	movzbl %al,%eax
c0005eae:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0005eb1:	89 d1                	mov    %edx,%ecx
c0005eb3:	c1 e1 09             	shl    $0x9,%ecx
c0005eb6:	8b 55 10             	mov    0x10(%ebp),%edx
c0005eb9:	01 ca                	add    %ecx,%edx
c0005ebb:	83 ec 04             	sub    $0x4,%esp
c0005ebe:	50                   	push   %eax
c0005ebf:	52                   	push   %edx
c0005ec0:	ff 75 08             	pushl  0x8(%ebp)
c0005ec3:	e8 a2 fc ff ff       	call   c0005b6a <write2sector>
c0005ec8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:229

		/* 在硬盘响应期间阻塞自己 */
		sema_down(&hd->my_channel->disk_done);
c0005ecb:	8b 45 08             	mov    0x8(%ebp),%eax
c0005ece:	8b 40 08             	mov    0x8(%eax),%eax
c0005ed1:	83 c0 2c             	add    $0x2c,%eax
c0005ed4:	83 ec 0c             	sub    $0xc,%esp
c0005ed7:	50                   	push   %eax
c0005ed8:	e8 18 e9 ff ff       	call   c00047f5 <sema_down>
c0005edd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:230
		secs_done += secs_op;
c0005ee0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005ee3:	01 45 f0             	add    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:205
	/* 1 先选择操作的硬盘 */
	select_disk(hd);

	uint32_t secs_op;		// 每次操作的扇区数
	uint32_t secs_done = 0;	// 已完成的扇区数
	while(secs_done < sec_cnt) {
c0005ee6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0005ee9:	3b 45 14             	cmp    0x14(%ebp),%eax
c0005eec:	0f 82 20 ff ff ff    	jb     c0005e12 <ide_write+0x7c>
/work/x86_os_my/device/ide.c:233
		/* 在硬盘响应期间阻塞自己 */
		sema_down(&hd->my_channel->disk_done);
		secs_done += secs_op;
	}
	/* 醒来后开始释放锁*/
	lock_release(&hd->my_channel->lock);
c0005ef2:	8b 45 08             	mov    0x8(%ebp),%eax
c0005ef5:	8b 40 08             	mov    0x8(%eax),%eax
c0005ef8:	83 c0 0c             	add    $0xc,%eax
c0005efb:	83 ec 0c             	sub    $0xc,%esp
c0005efe:	50                   	push   %eax
c0005eff:	e8 12 eb ff ff       	call   c0004a16 <lock_release>
c0005f04:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:234
}
c0005f07:	90                   	nop
c0005f08:	c9                   	leave  
c0005f09:	c3                   	ret    

c0005f0a <swap_pairs_bytes>:
swap_pairs_bytes():
/work/x86_os_my/device/ide.c:238

/////////////////////////////////////// 读取分区表部分 ////////////////////////////////////////////////
/* 将dst中len个相邻字节交换位置后存入buf */
static void swap_pairs_bytes(const char* dst, char* buf, uint32_t len) {
c0005f0a:	55                   	push   %ebp
c0005f0b:	89 e5                	mov    %esp,%ebp
c0005f0d:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/device/ide.c:240
	uint8_t idx;
	for (idx = 0; idx < len; idx += 2) {
c0005f10:	c6 45 ff 00          	movb   $0x0,-0x1(%ebp)
c0005f14:	eb 37                	jmp    c0005f4d <swap_pairs_bytes+0x43>
/work/x86_os_my/device/ide.c:242 (discriminator 3)
		/* buf中存储dst中两相邻元素交换位置后的字符串*/
		buf[idx + 1] = *dst++;
c0005f16:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
c0005f1a:	8d 50 01             	lea    0x1(%eax),%edx
c0005f1d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005f20:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
c0005f23:	8b 45 08             	mov    0x8(%ebp),%eax
c0005f26:	8d 50 01             	lea    0x1(%eax),%edx
c0005f29:	89 55 08             	mov    %edx,0x8(%ebp)
c0005f2c:	0f b6 00             	movzbl (%eax),%eax
c0005f2f:	88 01                	mov    %al,(%ecx)
/work/x86_os_my/device/ide.c:243 (discriminator 3)
		buf[idx]     = *dst++;
c0005f31:	0f b6 55 ff          	movzbl -0x1(%ebp),%edx
c0005f35:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005f38:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
c0005f3b:	8b 45 08             	mov    0x8(%ebp),%eax
c0005f3e:	8d 50 01             	lea    0x1(%eax),%edx
c0005f41:	89 55 08             	mov    %edx,0x8(%ebp)
c0005f44:	0f b6 00             	movzbl (%eax),%eax
c0005f47:	88 01                	mov    %al,(%ecx)
/work/x86_os_my/device/ide.c:240 (discriminator 3)

/////////////////////////////////////// 读取分区表部分 ////////////////////////////////////////////////
/* 将dst中len个相邻字节交换位置后存入buf */
static void swap_pairs_bytes(const char* dst, char* buf, uint32_t len) {
	uint8_t idx;
	for (idx = 0; idx < len; idx += 2) {
c0005f49:	80 45 ff 02          	addb   $0x2,-0x1(%ebp)
/work/x86_os_my/device/ide.c:240 (discriminator 1)
c0005f4d:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
c0005f51:	3b 45 10             	cmp    0x10(%ebp),%eax
c0005f54:	72 c0                	jb     c0005f16 <swap_pairs_bytes+0xc>
/work/x86_os_my/device/ide.c:245
		/* buf中存储dst中两相邻元素交换位置后的字符串*/
		buf[idx + 1] = *dst++;
		buf[idx]     = *dst++;
	}
	buf[idx] = '\0';
c0005f56:	0f b6 55 ff          	movzbl -0x1(%ebp),%edx
c0005f5a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005f5d:	01 d0                	add    %edx,%eax
c0005f5f:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/device/ide.c:246
}
c0005f62:	90                   	nop
c0005f63:	c9                   	leave  
c0005f64:	c3                   	ret    

c0005f65 <identify_disk>:
identify_disk():
/work/x86_os_my/device/ide.c:249

/* 获得硬盘参数信息 */
static void identify_disk(struct disk* hd) {
c0005f65:	55                   	push   %ebp
c0005f66:	89 e5                	mov    %esp,%ebp
c0005f68:	81 ec 98 02 00 00    	sub    $0x298,%esp
/work/x86_os_my/device/ide.c:251
	char id_info[512];
	select_disk(hd);
c0005f6e:	ff 75 08             	pushl  0x8(%ebp)
c0005f71:	e8 43 fa ff ff       	call   c00059b9 <select_disk>
c0005f76:	83 c4 04             	add    $0x4,%esp
/work/x86_os_my/device/ide.c:252
	cmd_out(hd->my_channel, CMD_IDENTIFY);
c0005f79:	8b 45 08             	mov    0x8(%ebp),%eax
c0005f7c:	8b 40 08             	mov    0x8(%eax),%eax
c0005f7f:	68 ec 00 00 00       	push   $0xec
c0005f84:	50                   	push   %eax
c0005f85:	e8 63 fb ff ff       	call   c0005aed <cmd_out>
c0005f8a:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/ide.c:255
	/* 向硬盘发送指令后便通过信号量阻塞自己,
	* 待硬盘处理完成后,通过中断处理程序将自己唤醒 */
	sema_down(&hd->my_channel->disk_done);
c0005f8d:	8b 45 08             	mov    0x8(%ebp),%eax
c0005f90:	8b 40 08             	mov    0x8(%eax),%eax
c0005f93:	83 c0 2c             	add    $0x2c,%eax
c0005f96:	83 ec 0c             	sub    $0xc,%esp
c0005f99:	50                   	push   %eax
c0005f9a:	e8 56 e8 ff ff       	call   c00047f5 <sema_down>
c0005f9f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:258

	/* 醒来后开始执行下面代码*/
	if (!busy_wait(hd)) {     //  若失败
c0005fa2:	83 ec 0c             	sub    $0xc,%esp
c0005fa5:	ff 75 08             	pushl  0x8(%ebp)
c0005fa8:	e8 06 fc ff ff       	call   c0005bb3 <busy_wait>
c0005fad:	83 c4 10             	add    $0x10,%esp
c0005fb0:	85 c0                	test   %eax,%eax
c0005fb2:	75 39                	jne    c0005fed <identify_disk+0x88>
/work/x86_os_my/device/ide.c:260
		char error[64];
		sprintf(error, "%s identify failed!!!!!!\n", hd->name);
c0005fb4:	8b 45 08             	mov    0x8(%ebp),%eax
c0005fb7:	83 ec 04             	sub    $0x4,%esp
c0005fba:	50                   	push   %eax
c0005fbb:	68 71 94 00 c0       	push   $0xc0009471
c0005fc0:	8d 85 70 fd ff ff    	lea    -0x290(%ebp),%eax
c0005fc6:	50                   	push   %eax
c0005fc7:	e8 bc f8 ff ff       	call   c0005888 <sprintf>
c0005fcc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:261
		PANIC(error);
c0005fcf:	8d 85 70 fd ff ff    	lea    -0x290(%ebp),%eax
c0005fd5:	50                   	push   %eax
c0005fd6:	68 c8 95 00 c0       	push   $0xc00095c8
c0005fdb:	68 05 01 00 00       	push   $0x105
c0005fe0:	68 17 94 00 c0       	push   $0xc0009417
c0005fe5:	e8 18 c6 ff ff       	call   c0002602 <panic_spin>
c0005fea:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:263
	}
	read_from_sector(hd, id_info, 1);
c0005fed:	83 ec 04             	sub    $0x4,%esp
c0005ff0:	6a 01                	push   $0x1
c0005ff2:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
c0005ff8:	50                   	push   %eax
c0005ff9:	ff 75 08             	pushl  0x8(%ebp)
c0005ffc:	e8 20 fb ff ff       	call   c0005b21 <read_from_sector>
c0006001:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:266

	char buf[64];
	uint8_t sn_start = 10 * 2, sn_len = 20, md_start = 27 * 2, md_len = 40;
c0006004:	c6 45 f7 14          	movb   $0x14,-0x9(%ebp)
c0006008:	c6 45 f6 14          	movb   $0x14,-0xa(%ebp)
c000600c:	c6 45 f5 36          	movb   $0x36,-0xb(%ebp)
c0006010:	c6 45 f4 28          	movb   $0x28,-0xc(%ebp)
/work/x86_os_my/device/ide.c:267
	swap_pairs_bytes(&id_info[sn_start], buf, sn_len);
c0006014:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0006018:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c000601c:	8d 8d f0 fd ff ff    	lea    -0x210(%ebp),%ecx
c0006022:	01 ca                	add    %ecx,%edx
c0006024:	83 ec 04             	sub    $0x4,%esp
c0006027:	50                   	push   %eax
c0006028:	8d 85 b0 fd ff ff    	lea    -0x250(%ebp),%eax
c000602e:	50                   	push   %eax
c000602f:	52                   	push   %edx
c0006030:	e8 d5 fe ff ff       	call   c0005f0a <swap_pairs_bytes>
c0006035:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:268
	printk("   disk %s info:\n      SN: %s\n", hd->name, buf);
c0006038:	8b 45 08             	mov    0x8(%ebp),%eax
c000603b:	83 ec 04             	sub    $0x4,%esp
c000603e:	8d 95 b0 fd ff ff    	lea    -0x250(%ebp),%edx
c0006044:	52                   	push   %edx
c0006045:	50                   	push   %eax
c0006046:	68 8c 94 00 c0       	push   $0xc000948c
c000604b:	e8 4b 06 00 00       	call   c000669b <printk>
c0006050:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:269
	memset(buf, 0, sizeof(buf));
c0006053:	83 ec 04             	sub    $0x4,%esp
c0006056:	6a 40                	push   $0x40
c0006058:	6a 00                	push   $0x0
c000605a:	8d 85 b0 fd ff ff    	lea    -0x250(%ebp),%eax
c0006060:	50                   	push   %eax
c0006061:	e8 b4 d9 ff ff       	call   c0003a1a <memset>
c0006066:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:270
	swap_pairs_bytes(&id_info[md_start], buf, md_len);
c0006069:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c000606d:	0f b6 55 f5          	movzbl -0xb(%ebp),%edx
c0006071:	8d 8d f0 fd ff ff    	lea    -0x210(%ebp),%ecx
c0006077:	01 ca                	add    %ecx,%edx
c0006079:	83 ec 04             	sub    $0x4,%esp
c000607c:	50                   	push   %eax
c000607d:	8d 85 b0 fd ff ff    	lea    -0x250(%ebp),%eax
c0006083:	50                   	push   %eax
c0006084:	52                   	push   %edx
c0006085:	e8 80 fe ff ff       	call   c0005f0a <swap_pairs_bytes>
c000608a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:271
	printk("      MODULE: %s\n", buf);
c000608d:	83 ec 08             	sub    $0x8,%esp
c0006090:	8d 85 b0 fd ff ff    	lea    -0x250(%ebp),%eax
c0006096:	50                   	push   %eax
c0006097:	68 ab 94 00 c0       	push   $0xc00094ab
c000609c:	e8 fa 05 00 00       	call   c000669b <printk>
c00060a1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:272
	uint32_t sectors = *(uint32_t*)&id_info[60 * 2];
c00060a4:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
c00060aa:	83 c0 78             	add    $0x78,%eax
c00060ad:	8b 00                	mov    (%eax),%eax
c00060af:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:273
	printk("      SECTORS: %d\n", sectors);
c00060b2:	83 ec 08             	sub    $0x8,%esp
c00060b5:	ff 75 f0             	pushl  -0x10(%ebp)
c00060b8:	68 bd 94 00 c0       	push   $0xc00094bd
c00060bd:	e8 d9 05 00 00       	call   c000669b <printk>
c00060c2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:274
	printk("      CAPACITY: %dMB\n", sectors * 512 / 1024 / 1024);
c00060c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00060c8:	c1 e0 09             	shl    $0x9,%eax
c00060cb:	c1 e8 14             	shr    $0x14,%eax
c00060ce:	83 ec 08             	sub    $0x8,%esp
c00060d1:	50                   	push   %eax
c00060d2:	68 d0 94 00 c0       	push   $0xc00094d0
c00060d7:	e8 bf 05 00 00       	call   c000669b <printk>
c00060dc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:275
}
c00060df:	90                   	nop
c00060e0:	c9                   	leave  
c00060e1:	c3                   	ret    

c00060e2 <partition_scan>:
partition_scan():
/work/x86_os_my/device/ide.c:278

/* 扫描硬盘hd中地址为ext_lba的扇区中的所有分区 */
static void partition_scan(struct disk* hd, uint32_t ext_lba) {
c00060e2:	55                   	push   %ebp
c00060e3:	89 e5                	mov    %esp,%ebp
c00060e5:	53                   	push   %ebx
c00060e6:	83 ec 14             	sub    $0x14,%esp
/work/x86_os_my/device/ide.c:279
	struct boot_sector* bs = sys_malloc(sizeof(struct boot_sector));
c00060e9:	83 ec 0c             	sub    $0xc,%esp
c00060ec:	68 00 02 00 00       	push   $0x200
c00060f1:	e8 2d ce ff ff       	call   c0002f23 <sys_malloc>
c00060f6:	83 c4 10             	add    $0x10,%esp
c00060f9:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/device/ide.c:280
	ide_read(hd, ext_lba, bs, 1);
c00060fc:	6a 01                	push   $0x1
c00060fe:	ff 75 ec             	pushl  -0x14(%ebp)
c0006101:	ff 75 0c             	pushl  0xc(%ebp)
c0006104:	ff 75 08             	pushl  0x8(%ebp)
c0006107:	e8 16 fb ff ff       	call   c0005c22 <ide_read>
c000610c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:281
	uint8_t part_idx = 0;
c000610f:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/device/ide.c:282
	struct partition_table_entry* p = bs->partition_table;
c0006113:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0006116:	05 be 01 00 00       	add    $0x1be,%eax
c000611b:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:285

	/* 遍历分区表4个分区表项 */
	while (part_idx++ < 4) {
c000611e:	e9 53 02 00 00       	jmp    c0006376 <partition_scan+0x294>
/work/x86_os_my/device/ide.c:286
		if (p->fs_type == 0x5) {	// 若为扩展分区
c0006123:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006126:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c000612a:	3c 05                	cmp    $0x5,%al
c000612c:	75 50                	jne    c000617e <partition_scan+0x9c>
/work/x86_os_my/device/ide.c:287
			if (ext_lba_base != 0) {
c000612e:	a1 8c c7 00 c0       	mov    0xc000c78c,%eax
c0006133:	85 c0                	test   %eax,%eax
c0006135:	74 22                	je     c0006159 <partition_scan+0x77>
/work/x86_os_my/device/ide.c:289
				/* 子扩展分区的start_lba是相对于主引导扇区中的总扩展分区地址 */
				partition_scan(hd, p->start_lba + ext_lba_base);
c0006137:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000613a:	8b 40 08             	mov    0x8(%eax),%eax
c000613d:	8b 15 8c c7 00 c0    	mov    0xc000c78c,%edx
c0006143:	01 d0                	add    %edx,%eax
c0006145:	83 ec 08             	sub    $0x8,%esp
c0006148:	50                   	push   %eax
c0006149:	ff 75 08             	pushl  0x8(%ebp)
c000614c:	e8 91 ff ff ff       	call   c00060e2 <partition_scan>
c0006151:	83 c4 10             	add    $0x10,%esp
c0006154:	e9 19 02 00 00       	jmp    c0006372 <partition_scan+0x290>
/work/x86_os_my/device/ide.c:292
			} else {	// ext_lba_base为0表示是第一次读取引导块,也就是主引导记录所在的扇区
				/* 记录下扩展分区的起始lba地址,后面所有的扩展分区地址都相对于此 */
				ext_lba_base = p->start_lba;
c0006159:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000615c:	8b 40 08             	mov    0x8(%eax),%eax
c000615f:	a3 8c c7 00 c0       	mov    %eax,0xc000c78c
/work/x86_os_my/device/ide.c:293
				partition_scan(hd, p->start_lba);
c0006164:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006167:	8b 40 08             	mov    0x8(%eax),%eax
c000616a:	83 ec 08             	sub    $0x8,%esp
c000616d:	50                   	push   %eax
c000616e:	ff 75 08             	pushl  0x8(%ebp)
c0006171:	e8 6c ff ff ff       	call   c00060e2 <partition_scan>
c0006176:	83 c4 10             	add    $0x10,%esp
c0006179:	e9 f4 01 00 00       	jmp    c0006372 <partition_scan+0x290>
/work/x86_os_my/device/ide.c:295
			}
		} else if (p->fs_type != 0) {	// 若是有效的分区类型
c000617e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006181:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0006185:	84 c0                	test   %al,%al
c0006187:	0f 84 e5 01 00 00    	je     c0006372 <partition_scan+0x290>
/work/x86_os_my/device/ide.c:296
			if (ext_lba == 0) {	// 此时全是主分区
c000618d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0006191:	0f 85 f9 00 00 00    	jne    c0006290 <partition_scan+0x1ae>
/work/x86_os_my/device/ide.c:297
				hd->prim_parts[p_no].start_lba = ext_lba + p->start_lba;
c0006197:	0f b6 05 90 c7 00 c0 	movzbl 0xc000c790,%eax
c000619e:	0f b6 c8             	movzbl %al,%ecx
c00061a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00061a4:	8b 50 08             	mov    0x8(%eax),%edx
c00061a7:	8b 45 0c             	mov    0xc(%ebp),%eax
c00061aa:	01 c2                	add    %eax,%edx
c00061ac:	8b 45 08             	mov    0x8(%ebp),%eax
c00061af:	c1 e1 06             	shl    $0x6,%ecx
c00061b2:	01 c8                	add    %ecx,%eax
c00061b4:	83 c0 10             	add    $0x10,%eax
c00061b7:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/device/ide.c:298
				hd->prim_parts[p_no].sec_cnt = p->sec_cnt;
c00061b9:	0f b6 05 90 c7 00 c0 	movzbl 0xc000c790,%eax
c00061c0:	0f b6 c8             	movzbl %al,%ecx
c00061c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00061c6:	8b 40 0c             	mov    0xc(%eax),%eax
c00061c9:	8b 55 08             	mov    0x8(%ebp),%edx
c00061cc:	c1 e1 06             	shl    $0x6,%ecx
c00061cf:	01 ca                	add    %ecx,%edx
c00061d1:	83 c2 14             	add    $0x14,%edx
c00061d4:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/device/ide.c:299
				hd->prim_parts[p_no].my_disk = hd;
c00061d6:	0f b6 05 90 c7 00 c0 	movzbl 0xc000c790,%eax
c00061dd:	0f b6 d0             	movzbl %al,%edx
c00061e0:	8b 45 08             	mov    0x8(%ebp),%eax
c00061e3:	c1 e2 06             	shl    $0x6,%edx
c00061e6:	01 d0                	add    %edx,%eax
c00061e8:	8d 50 18             	lea    0x18(%eax),%edx
c00061eb:	8b 45 08             	mov    0x8(%ebp),%eax
c00061ee:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/device/ide.c:300
				list_append(&partition_list, &hd->prim_parts[p_no].part_tag);
c00061f0:	0f b6 05 90 c7 00 c0 	movzbl 0xc000c790,%eax
c00061f7:	0f b6 c0             	movzbl %al,%eax
c00061fa:	c1 e0 06             	shl    $0x6,%eax
c00061fd:	8d 50 10             	lea    0x10(%eax),%edx
c0006200:	8b 45 08             	mov    0x8(%ebp),%eax
c0006203:	01 d0                	add    %edx,%eax
c0006205:	83 c0 0c             	add    $0xc,%eax
c0006208:	83 ec 08             	sub    $0x8,%esp
c000620b:	50                   	push   %eax
c000620c:	68 40 db 00 c0       	push   $0xc000db40
c0006211:	e8 53 e3 ff ff       	call   c0004569 <list_append>
c0006216:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:301
				sprintf(hd->prim_parts[p_no].name, "%s%d", hd->name, p_no + 1);
c0006219:	0f b6 05 90 c7 00 c0 	movzbl 0xc000c790,%eax
c0006220:	0f b6 c0             	movzbl %al,%eax
c0006223:	8d 48 01             	lea    0x1(%eax),%ecx
c0006226:	8b 45 08             	mov    0x8(%ebp),%eax
c0006229:	0f b6 15 90 c7 00 c0 	movzbl 0xc000c790,%edx
c0006230:	0f b6 d2             	movzbl %dl,%edx
c0006233:	c1 e2 06             	shl    $0x6,%edx
c0006236:	8d 5a 20             	lea    0x20(%edx),%ebx
c0006239:	8b 55 08             	mov    0x8(%ebp),%edx
c000623c:	01 da                	add    %ebx,%edx
c000623e:	83 c2 04             	add    $0x4,%edx
c0006241:	51                   	push   %ecx
c0006242:	50                   	push   %eax
c0006243:	68 e6 94 00 c0       	push   $0xc00094e6
c0006248:	52                   	push   %edx
c0006249:	e8 3a f6 ff ff       	call   c0005888 <sprintf>
c000624e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:302
				p_no++;
c0006251:	0f b6 05 90 c7 00 c0 	movzbl 0xc000c790,%eax
c0006258:	83 c0 01             	add    $0x1,%eax
c000625b:	a2 90 c7 00 c0       	mov    %al,0xc000c790
/work/x86_os_my/device/ide.c:303
				ASSERT(p_no < 4);	// 0,1,2,3
c0006260:	0f b6 05 90 c7 00 c0 	movzbl 0xc000c790,%eax
c0006267:	3c 03                	cmp    $0x3,%al
c0006269:	0f 86 03 01 00 00    	jbe    c0006372 <partition_scan+0x290>
/work/x86_os_my/device/ide.c:303 (discriminator 1)
c000626f:	68 eb 94 00 c0       	push   $0xc00094eb
c0006274:	68 d8 95 00 c0       	push   $0xc00095d8
c0006279:	68 2f 01 00 00       	push   $0x12f
c000627e:	68 17 94 00 c0       	push   $0xc0009417
c0006283:	e8 7a c3 ff ff       	call   c0002602 <panic_spin>
c0006288:	83 c4 10             	add    $0x10,%esp
c000628b:	e9 e2 00 00 00       	jmp    c0006372 <partition_scan+0x290>
/work/x86_os_my/device/ide.c:305
			} else {
				hd->logic_parts[l_no].start_lba = ext_lba + p->start_lba;
c0006290:	0f b6 05 91 c7 00 c0 	movzbl 0xc000c791,%eax
c0006297:	0f b6 c8             	movzbl %al,%ecx
c000629a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000629d:	8b 50 08             	mov    0x8(%eax),%edx
c00062a0:	8b 45 0c             	mov    0xc(%ebp),%eax
c00062a3:	01 c2                	add    %eax,%edx
c00062a5:	8b 45 08             	mov    0x8(%ebp),%eax
c00062a8:	c1 e1 06             	shl    $0x6,%ecx
c00062ab:	01 c8                	add    %ecx,%eax
c00062ad:	05 10 01 00 00       	add    $0x110,%eax
c00062b2:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/device/ide.c:306
				hd->logic_parts[l_no].sec_cnt = p->sec_cnt;
c00062b4:	0f b6 05 91 c7 00 c0 	movzbl 0xc000c791,%eax
c00062bb:	0f b6 c8             	movzbl %al,%ecx
c00062be:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00062c1:	8b 40 0c             	mov    0xc(%eax),%eax
c00062c4:	8b 55 08             	mov    0x8(%ebp),%edx
c00062c7:	c1 e1 06             	shl    $0x6,%ecx
c00062ca:	01 ca                	add    %ecx,%edx
c00062cc:	81 c2 14 01 00 00    	add    $0x114,%edx
c00062d2:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/device/ide.c:307
				hd->logic_parts[l_no].my_disk = hd;
c00062d4:	0f b6 05 91 c7 00 c0 	movzbl 0xc000c791,%eax
c00062db:	0f b6 d0             	movzbl %al,%edx
c00062de:	8b 45 08             	mov    0x8(%ebp),%eax
c00062e1:	c1 e2 06             	shl    $0x6,%edx
c00062e4:	01 d0                	add    %edx,%eax
c00062e6:	8d 90 18 01 00 00    	lea    0x118(%eax),%edx
c00062ec:	8b 45 08             	mov    0x8(%ebp),%eax
c00062ef:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/device/ide.c:308
				list_append(&partition_list, &hd->logic_parts[l_no].part_tag);
c00062f1:	0f b6 05 91 c7 00 c0 	movzbl 0xc000c791,%eax
c00062f8:	0f b6 c0             	movzbl %al,%eax
c00062fb:	c1 e0 06             	shl    $0x6,%eax
c00062fe:	8d 90 10 01 00 00    	lea    0x110(%eax),%edx
c0006304:	8b 45 08             	mov    0x8(%ebp),%eax
c0006307:	01 d0                	add    %edx,%eax
c0006309:	83 c0 0c             	add    $0xc,%eax
c000630c:	83 ec 08             	sub    $0x8,%esp
c000630f:	50                   	push   %eax
c0006310:	68 40 db 00 c0       	push   $0xc000db40
c0006315:	e8 4f e2 ff ff       	call   c0004569 <list_append>
c000631a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:309
				sprintf(hd->logic_parts[l_no].name, "%s%d", hd->name, l_no + 5);	// 逻辑分区数字是从5开始,主分区是1～4.
c000631d:	0f b6 05 91 c7 00 c0 	movzbl 0xc000c791,%eax
c0006324:	0f b6 c0             	movzbl %al,%eax
c0006327:	8d 48 05             	lea    0x5(%eax),%ecx
c000632a:	8b 45 08             	mov    0x8(%ebp),%eax
c000632d:	0f b6 15 91 c7 00 c0 	movzbl 0xc000c791,%edx
c0006334:	0f b6 d2             	movzbl %dl,%edx
c0006337:	c1 e2 06             	shl    $0x6,%edx
c000633a:	8d 9a 20 01 00 00    	lea    0x120(%edx),%ebx
c0006340:	8b 55 08             	mov    0x8(%ebp),%edx
c0006343:	01 da                	add    %ebx,%edx
c0006345:	83 c2 04             	add    $0x4,%edx
c0006348:	51                   	push   %ecx
c0006349:	50                   	push   %eax
c000634a:	68 e6 94 00 c0       	push   $0xc00094e6
c000634f:	52                   	push   %edx
c0006350:	e8 33 f5 ff ff       	call   c0005888 <sprintf>
c0006355:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:310
				l_no++;
c0006358:	0f b6 05 91 c7 00 c0 	movzbl 0xc000c791,%eax
c000635f:	83 c0 01             	add    $0x1,%eax
c0006362:	a2 91 c7 00 c0       	mov    %al,0xc000c791
/work/x86_os_my/device/ide.c:311
				if (l_no >= 8)	// 只支持8个逻辑分区,避免数组越界
c0006367:	0f b6 05 91 c7 00 c0 	movzbl 0xc000c791,%eax
c000636e:	3c 07                	cmp    $0x7,%al
c0006370:	77 26                	ja     c0006398 <partition_scan+0x2b6>
/work/x86_os_my/device/ide.c:315
					return;
			}
		}
		p++;
c0006372:	83 45 f0 10          	addl   $0x10,-0x10(%ebp)
/work/x86_os_my/device/ide.c:285
	ide_read(hd, ext_lba, bs, 1);
	uint8_t part_idx = 0;
	struct partition_table_entry* p = bs->partition_table;

	/* 遍历分区表4个分区表项 */
	while (part_idx++ < 4) {
c0006376:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000637a:	8d 50 01             	lea    0x1(%eax),%edx
c000637d:	88 55 f7             	mov    %dl,-0x9(%ebp)
c0006380:	3c 03                	cmp    $0x3,%al
c0006382:	0f 86 9b fd ff ff    	jbe    c0006123 <partition_scan+0x41>
/work/x86_os_my/device/ide.c:317
					return;
			}
		}
		p++;
	}
	sys_free(bs);
c0006388:	83 ec 0c             	sub    $0xc,%esp
c000638b:	ff 75 ec             	pushl  -0x14(%ebp)
c000638e:	e8 bd d1 ff ff       	call   c0003550 <sys_free>
c0006393:	83 c4 10             	add    $0x10,%esp
c0006396:	eb 01                	jmp    c0006399 <partition_scan+0x2b7>
/work/x86_os_my/device/ide.c:312
				hd->logic_parts[l_no].my_disk = hd;
				list_append(&partition_list, &hd->logic_parts[l_no].part_tag);
				sprintf(hd->logic_parts[l_no].name, "%s%d", hd->name, l_no + 5);	// 逻辑分区数字是从5开始,主分区是1～4.
				l_no++;
				if (l_no >= 8)	// 只支持8个逻辑分区,避免数组越界
					return;
c0006398:	90                   	nop
/work/x86_os_my/device/ide.c:318
			}
		}
		p++;
	}
	sys_free(bs);
}
c0006399:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c000639c:	c9                   	leave  
c000639d:	c3                   	ret    

c000639e <partition_info>:
partition_info():
/work/x86_os_my/device/ide.c:321

/* 打印分区信息 */
static bool partition_info(struct list_elem* pelem, int arg UNUSED) {
c000639e:	55                   	push   %ebp
c000639f:	89 e5                	mov    %esp,%ebp
c00063a1:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/ide.c:322
	struct partition* part = elem2entry(struct partition, part_tag, pelem);
c00063a4:	8b 45 08             	mov    0x8(%ebp),%eax
c00063a7:	83 e8 0c             	sub    $0xc,%eax
c00063aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/ide.c:323
	printk("   %s start_lba:0x%x, sec_cnt:0x%x\n",part->name, part->start_lba, part->sec_cnt);
c00063ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00063b0:	8b 50 04             	mov    0x4(%eax),%edx
c00063b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00063b6:	8b 00                	mov    (%eax),%eax
c00063b8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c00063bb:	83 c1 14             	add    $0x14,%ecx
c00063be:	52                   	push   %edx
c00063bf:	50                   	push   %eax
c00063c0:	51                   	push   %ecx
c00063c1:	68 f4 94 00 c0       	push   $0xc00094f4
c00063c6:	e8 d0 02 00 00       	call   c000669b <printk>
c00063cb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:327

	/* 在此处return false与函数本身功能无关,
	 * 只是为了让主调函数list_traversal继续向下遍历元素 */
	return false;
c00063ce:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/device/ide.c:328
}
c00063d3:	c9                   	leave  
c00063d4:	c3                   	ret    

c00063d5 <intr_hd_handler>:
intr_hd_handler():
/work/x86_os_my/device/ide.c:331

/* 硬盘中断处理程序 */
void intr_hd_handler(uint8_t irq_no) {
c00063d5:	55                   	push   %ebp
c00063d6:	89 e5                	mov    %esp,%ebp
c00063d8:	83 ec 28             	sub    $0x28,%esp
c00063db:	8b 45 08             	mov    0x8(%ebp),%eax
c00063de:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/device/ide.c:332
	ASSERT(irq_no == 0x2e || irq_no == 0x2f);
c00063e1:	80 7d e4 2e          	cmpb   $0x2e,-0x1c(%ebp)
c00063e5:	74 22                	je     c0006409 <intr_hd_handler+0x34>
/work/x86_os_my/device/ide.c:332 (discriminator 1)
c00063e7:	80 7d e4 2f          	cmpb   $0x2f,-0x1c(%ebp)
c00063eb:	74 1c                	je     c0006409 <intr_hd_handler+0x34>
/work/x86_os_my/device/ide.c:332 (discriminator 2)
c00063ed:	68 18 95 00 c0       	push   $0xc0009518
c00063f2:	68 e8 95 00 c0       	push   $0xc00095e8
c00063f7:	68 4c 01 00 00       	push   $0x14c
c00063fc:	68 17 94 00 c0       	push   $0xc0009417
c0006401:	e8 fc c1 ff ff       	call   c0002602 <panic_spin>
c0006406:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:333
	uint8_t ch_no = irq_no - 0x2e;
c0006409:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c000640d:	83 e8 2e             	sub    $0x2e,%eax
c0006410:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/device/ide.c:334
	struct ide_channel* channel = &channels[ch_no];
c0006413:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0006417:	69 c0 60 06 00 00    	imul   $0x660,%eax,%eax
c000641d:	05 80 ce 00 c0       	add    $0xc000ce80,%eax
c0006422:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:335
	ASSERT(channel->irq_no == irq_no);
c0006425:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006428:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
c000642c:	3a 45 e4             	cmp    -0x1c(%ebp),%al
c000642f:	74 1c                	je     c000644d <intr_hd_handler+0x78>
/work/x86_os_my/device/ide.c:335 (discriminator 1)
c0006431:	68 39 95 00 c0       	push   $0xc0009539
c0006436:	68 e8 95 00 c0       	push   $0xc00095e8
c000643b:	68 4f 01 00 00       	push   $0x14f
c0006440:	68 17 94 00 c0       	push   $0xc0009417
c0006445:	e8 b8 c1 ff ff       	call   c0002602 <panic_spin>
c000644a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:338
	/* 不必担心此中断是否对应的是这一次的expecting_intr,
	* 每次读写硬盘时会申请锁,从而保证了同步一致性 */
	if (channel->expecting_intr) {
c000644d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006450:	8b 40 28             	mov    0x28(%eax),%eax
c0006453:	85 c0                	test   %eax,%eax
c0006455:	74 35                	je     c000648c <intr_hd_handler+0xb7>
/work/x86_os_my/device/ide.c:339
		channel->expecting_intr = false;
c0006457:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000645a:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
/work/x86_os_my/device/ide.c:340
		sema_up(&channel->disk_done);
c0006461:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006464:	83 c0 2c             	add    $0x2c,%eax
c0006467:	83 ec 0c             	sub    $0xc,%esp
c000646a:	50                   	push   %eax
c000646b:	e8 80 e4 ff ff       	call   c00048f0 <sema_up>
c0006470:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:343

		/* 读取状态寄存器使硬盘控制器认为此次的中断已被处理,从而硬盘可以继续执行新的读写 */
		inb(reg_status(channel));
c0006473:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006476:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c000647a:	83 c0 07             	add    $0x7,%eax
c000647d:	0f b7 c0             	movzwl %ax,%eax
c0006480:	83 ec 0c             	sub    $0xc,%esp
c0006483:	50                   	push   %eax
c0006484:	e8 de f4 ff ff       	call   c0005967 <inb>
c0006489:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:345
	}
}
c000648c:	90                   	nop
c000648d:	c9                   	leave  
c000648e:	c3                   	ret    

c000648f <ide_init>:
ide_init():
/work/x86_os_my/device/ide.c:348

/* 硬盘数据结构初始化 */
void ide_init() {
c000648f:	55                   	push   %ebp
c0006490:	89 e5                	mov    %esp,%ebp
c0006492:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/ide.c:349
	printk("ide_init start\n");
c0006495:	83 ec 0c             	sub    $0xc,%esp
c0006498:	68 53 95 00 c0       	push   $0xc0009553
c000649d:	e8 f9 01 00 00       	call   c000669b <printk>
c00064a2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:350
	uint8_t hd_cnt = *((uint8_t*)(0x475));	// 获取硬盘的数量
c00064a5:	b8 75 04 00 00       	mov    $0x475,%eax
c00064aa:	0f b6 00             	movzbl (%eax),%eax
c00064ad:	88 45 f5             	mov    %al,-0xb(%ebp)
/work/x86_os_my/device/ide.c:351
	ASSERT(hd_cnt > 0);
c00064b0:	80 7d f5 00          	cmpb   $0x0,-0xb(%ebp)
c00064b4:	75 1c                	jne    c00064d2 <ide_init+0x43>
/work/x86_os_my/device/ide.c:351 (discriminator 1)
c00064b6:	68 63 95 00 c0       	push   $0xc0009563
c00064bb:	68 f8 95 00 c0       	push   $0xc00095f8
c00064c0:	68 5f 01 00 00       	push   $0x15f
c00064c5:	68 17 94 00 c0       	push   $0xc0009417
c00064ca:	e8 33 c1 ff ff       	call   c0002602 <panic_spin>
c00064cf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:352
	list_init(&partition_list);
c00064d2:	83 ec 0c             	sub    $0xc,%esp
c00064d5:	68 40 db 00 c0       	push   $0xc000db40
c00064da:	e8 f9 df ff ff       	call   c00044d8 <list_init>
c00064df:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:353
	channel_cnt = DIV_ROUND_UP(hd_cnt, 2);	// 一个ide通道上有两个硬盘,根据硬盘数量反推有几个ide通道
c00064e2:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c00064e6:	83 c0 01             	add    $0x1,%eax
c00064e9:	89 c2                	mov    %eax,%edx
c00064eb:	c1 ea 1f             	shr    $0x1f,%edx
c00064ee:	01 d0                	add    %edx,%eax
c00064f0:	d1 f8                	sar    %eax
c00064f2:	a2 60 ce 00 c0       	mov    %al,0xc000ce60
/work/x86_os_my/device/ide.c:355
	struct ide_channel* channel;
	uint8_t channel_no = 0, dev_no = 0;
c00064f7:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
c00064fb:	c6 45 f6 00          	movb   $0x0,-0xa(%ebp)
/work/x86_os_my/device/ide.c:358

	/* 处理每个通道上的硬盘 */
	while (channel_no < channel_cnt) {
c00064ff:	e9 4d 01 00 00       	jmp    c0006651 <ide_init+0x1c2>
/work/x86_os_my/device/ide.c:359
		channel = &channels[channel_no];
c0006504:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0006508:	69 c0 60 06 00 00    	imul   $0x660,%eax,%eax
c000650e:	05 80 ce 00 c0       	add    $0xc000ce80,%eax
c0006513:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:360
		sprintf(channel->name, "ide%d", channel_no);
c0006516:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c000651a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000651d:	83 ec 04             	sub    $0x4,%esp
c0006520:	52                   	push   %edx
c0006521:	68 6e 95 00 c0       	push   $0xc000956e
c0006526:	50                   	push   %eax
c0006527:	e8 5c f3 ff ff       	call   c0005888 <sprintf>
c000652c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:363

		/* 为每个ide通道初始化端口基址及中断向量 */
		switch (channel_no) {
c000652f:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0006533:	85 c0                	test   %eax,%eax
c0006535:	74 07                	je     c000653e <ide_init+0xaf>
c0006537:	83 f8 01             	cmp    $0x1,%eax
c000653a:	74 14                	je     c0006550 <ide_init+0xc1>
c000653c:	eb 23                	jmp    c0006561 <ide_init+0xd2>
/work/x86_os_my/device/ide.c:365
			case 0:
			channel->port_base	 = 0x1f0;	// ide0通道的起始端口号是0x1f0
c000653e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006541:	66 c7 40 08 f0 01    	movw   $0x1f0,0x8(%eax)
/work/x86_os_my/device/ide.c:366
			channel->irq_no	 = 0x20 + 14;	// 从片8259a上倒数第二的中断引脚,温盘,也就是ide0通道的的中断向量号
c0006547:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000654a:	c6 40 0a 2e          	movb   $0x2e,0xa(%eax)
/work/x86_os_my/device/ide.c:367
			break;
c000654e:	eb 11                	jmp    c0006561 <ide_init+0xd2>
/work/x86_os_my/device/ide.c:370
			
			case 1:
			channel->port_base	 = 0x170;	// ide1通道的起始端口号是0x170
c0006550:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006553:	66 c7 40 08 70 01    	movw   $0x170,0x8(%eax)
/work/x86_os_my/device/ide.c:371
			channel->irq_no	 = 0x20 + 15;	// 从8259A上的最后一个中断引脚,我们用来响应ide1通道上的硬盘中断
c0006559:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000655c:	c6 40 0a 2f          	movb   $0x2f,0xa(%eax)
/work/x86_os_my/device/ide.c:372
			break;
c0006560:	90                   	nop
/work/x86_os_my/device/ide.c:375
		}

		channel->expecting_intr = false;	// 未向硬盘写入指令时不期待硬盘的中断
c0006561:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006564:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
/work/x86_os_my/device/ide.c:376
		lock_init(&channel->lock);
c000656b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000656e:	83 c0 0c             	add    $0xc,%eax
c0006571:	83 ec 0c             	sub    $0xc,%esp
c0006574:	50                   	push   %eax
c0006575:	e8 4b e2 ff ff       	call   c00047c5 <lock_init>
c000657a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:380

		/* 初始化为0,目的是向硬盘控制器请求数据后,硬盘驱动sema_down此信号量会阻塞线程,
		直到硬盘完成后通过发中断,由中断处理程序将此信号量sema_up,唤醒线程. */
		sema_init(&channel->disk_done, 0);
c000657d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006580:	83 c0 2c             	add    $0x2c,%eax
c0006583:	83 ec 08             	sub    $0x8,%esp
c0006586:	6a 00                	push   $0x0
c0006588:	50                   	push   %eax
c0006589:	e8 0d e2 ff ff       	call   c000479b <sema_init>
c000658e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:381
		register_handler(channel->irq_no, intr_hd_handler);
c0006591:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006594:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
c0006598:	0f b6 c0             	movzbl %al,%eax
c000659b:	83 ec 08             	sub    $0x8,%esp
c000659e:	68 d5 63 00 c0       	push   $0xc00063d5
c00065a3:	50                   	push   %eax
c00065a4:	e8 1d b7 ff ff       	call   c0001cc6 <register_handler>
c00065a9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:384

		/* 分别获取两个硬盘的参数及分区信息 */
		while (dev_no < 2) {
c00065ac:	e9 88 00 00 00       	jmp    c0006639 <ide_init+0x1aa>
/work/x86_os_my/device/ide.c:385
			struct disk* hd = &channel->devices[dev_no];
c00065b1:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c00065b5:	69 c0 10 03 00 00    	imul   $0x310,%eax,%eax
c00065bb:	8d 50 40             	lea    0x40(%eax),%edx
c00065be:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00065c1:	01 d0                	add    %edx,%eax
c00065c3:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/device/ide.c:386
			hd->my_channel = channel;
c00065c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00065c9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00065cc:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/device/ide.c:387
			hd->dev_no = dev_no;
c00065cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00065d2:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
c00065d6:	88 50 0c             	mov    %dl,0xc(%eax)
/work/x86_os_my/device/ide.c:388
			sprintf(hd->name, "sd%c", 'a' + channel_no * 2 + dev_no);
c00065d9:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00065dd:	01 c0                	add    %eax,%eax
c00065df:	8d 50 61             	lea    0x61(%eax),%edx
c00065e2:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c00065e6:	01 c2                	add    %eax,%edx
c00065e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00065eb:	83 ec 04             	sub    $0x4,%esp
c00065ee:	52                   	push   %edx
c00065ef:	68 74 95 00 c0       	push   $0xc0009574
c00065f4:	50                   	push   %eax
c00065f5:	e8 8e f2 ff ff       	call   c0005888 <sprintf>
c00065fa:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:389
			identify_disk(hd);		// 获取硬盘参数
c00065fd:	83 ec 0c             	sub    $0xc,%esp
c0006600:	ff 75 ec             	pushl  -0x14(%ebp)
c0006603:	e8 5d f9 ff ff       	call   c0005f65 <identify_disk>
c0006608:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:390
			if (dev_no != 0) {		// 内核本身的裸硬盘(hd60M.img)不处理
c000660b:	80 7d f6 00          	cmpb   $0x0,-0xa(%ebp)
c000660f:	74 10                	je     c0006621 <ide_init+0x192>
/work/x86_os_my/device/ide.c:391
				partition_scan(hd, 0);	// 扫描该硬盘上的分区
c0006611:	83 ec 08             	sub    $0x8,%esp
c0006614:	6a 00                	push   $0x0
c0006616:	ff 75 ec             	pushl  -0x14(%ebp)
c0006619:	e8 c4 fa ff ff       	call   c00060e2 <partition_scan>
c000661e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:393
			}
			p_no = 0, l_no = 0;
c0006621:	c6 05 90 c7 00 c0 00 	movb   $0x0,0xc000c790
c0006628:	c6 05 91 c7 00 c0 00 	movb   $0x0,0xc000c791
/work/x86_os_my/device/ide.c:394
			dev_no++;
c000662f:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0006633:	83 c0 01             	add    $0x1,%eax
c0006636:	88 45 f6             	mov    %al,-0xa(%ebp)
/work/x86_os_my/device/ide.c:384
		直到硬盘完成后通过发中断,由中断处理程序将此信号量sema_up,唤醒线程. */
		sema_init(&channel->disk_done, 0);
		register_handler(channel->irq_no, intr_hd_handler);

		/* 分别获取两个硬盘的参数及分区信息 */
		while (dev_no < 2) {
c0006639:	80 7d f6 01          	cmpb   $0x1,-0xa(%ebp)
c000663d:	0f 86 6e ff ff ff    	jbe    c00065b1 <ide_init+0x122>
/work/x86_os_my/device/ide.c:396
				partition_scan(hd, 0);	// 扫描该硬盘上的分区
			}
			p_no = 0, l_no = 0;
			dev_no++;
		}
		dev_no = 0;		// 将硬盘驱动器号置0,为下一个channel的两个硬盘初始化。
c0006643:	c6 45 f6 00          	movb   $0x0,-0xa(%ebp)
/work/x86_os_my/device/ide.c:397
		channel_no++;	// 下一个channel
c0006647:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000664b:	83 c0 01             	add    $0x1,%eax
c000664e:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/device/ide.c:358
	channel_cnt = DIV_ROUND_UP(hd_cnt, 2);	// 一个ide通道上有两个硬盘,根据硬盘数量反推有几个ide通道
	struct ide_channel* channel;
	uint8_t channel_no = 0, dev_no = 0;

	/* 处理每个通道上的硬盘 */
	while (channel_no < channel_cnt) {
c0006651:	0f b6 05 60 ce 00 c0 	movzbl 0xc000ce60,%eax
c0006658:	38 45 f7             	cmp    %al,-0x9(%ebp)
c000665b:	0f 82 a3 fe ff ff    	jb     c0006504 <ide_init+0x75>
/work/x86_os_my/device/ide.c:400
		}
		dev_no = 0;		// 将硬盘驱动器号置0,为下一个channel的两个硬盘初始化。
		channel_no++;	// 下一个channel
	}

	printk("\n   all partition info\n");
c0006661:	83 ec 0c             	sub    $0xc,%esp
c0006664:	68 79 95 00 c0       	push   $0xc0009579
c0006669:	e8 2d 00 00 00       	call   c000669b <printk>
c000666e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:402
	/* 打印所有分区信息 */
	list_traversal(&partition_list, partition_info, (int)NULL);
c0006671:	83 ec 04             	sub    $0x4,%esp
c0006674:	6a 00                	push   $0x0
c0006676:	68 9e 63 00 c0       	push   $0xc000639e
c000667b:	68 40 db 00 c0       	push   $0xc000db40
c0006680:	e8 99 df ff ff       	call   c000461e <list_traversal>
c0006685:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:403
	printk("ide_init done\n");
c0006688:	83 ec 0c             	sub    $0xc,%esp
c000668b:	68 91 95 00 c0       	push   $0xc0009591
c0006690:	e8 06 00 00 00       	call   c000669b <printk>
c0006695:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:404
}
c0006698:	90                   	nop
c0006699:	c9                   	leave  
c000669a:	c3                   	ret    

c000669b <printk>:
printk():
/work/x86_os_my/lib/kernel/stdio-kernel.c:11

#define va_start(args, first_fix) args = (va_list)&first_fix
#define va_end(args) args = NULL

/* 供内核使用的格式化输出函数 */
void printk(const char* format, ...) {
c000669b:	55                   	push   %ebp
c000669c:	89 e5                	mov    %esp,%ebp
c000669e:	57                   	push   %edi
c000669f:	81 ec 14 04 00 00    	sub    $0x414,%esp
/work/x86_os_my/lib/kernel/stdio-kernel.c:13
	va_list args;
	va_start(args, format);
c00066a5:	8d 45 08             	lea    0x8(%ebp),%eax
c00066a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/stdio-kernel.c:14
	char buf[1024] = {0};
c00066ab:	8d 95 f4 fb ff ff    	lea    -0x40c(%ebp),%edx
c00066b1:	b8 00 00 00 00       	mov    $0x0,%eax
c00066b6:	b9 00 01 00 00       	mov    $0x100,%ecx
c00066bb:	89 d7                	mov    %edx,%edi
c00066bd:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/lib/kernel/stdio-kernel.c:15
	vsprintf(buf, format, args);
c00066bf:	8b 45 08             	mov    0x8(%ebp),%eax
c00066c2:	83 ec 04             	sub    $0x4,%esp
c00066c5:	ff 75 f4             	pushl  -0xc(%ebp)
c00066c8:	50                   	push   %eax
c00066c9:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c00066cf:	50                   	push   %eax
c00066d0:	e8 36 f0 ff ff       	call   c000570b <vsprintf>
c00066d5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/stdio-kernel.c:16
	va_end(args);
c00066d8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/kernel/stdio-kernel.c:17
	console_put_str(buf);
c00066df:	83 ec 0c             	sub    $0xc,%esp
c00066e2:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c00066e8:	50                   	push   %eax
c00066e9:	e8 42 e0 ff ff       	call   c0004730 <console_put_str>
c00066ee:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/stdio-kernel.c:18
}
c00066f1:	90                   	nop
c00066f2:	8b 7d fc             	mov    -0x4(%ebp),%edi
c00066f5:	c9                   	leave  
c00066f6:	c3                   	ret    

c00066f7 <mount_partition>:
mount_partition():
/work/x86_os_my/fs/fs.c:24
把该分区文件系统的元信息从硬盘上读出来加载到内存中，
这样硬盘资源的变化都用内存中元信息来跟踪，
如果有写操作，及时将内存中的元信息同步写入到硬盘以持久化。
*/
//sb_buf没释放！
static bool mount_partition(struct list_elem* pelem, int arg) {
c00066f7:	55                   	push   %ebp
c00066f8:	89 e5                	mov    %esp,%ebp
c00066fa:	53                   	push   %ebx
c00066fb:	83 ec 14             	sub    $0x14,%esp
/work/x86_os_my/fs/fs.c:25
	char* part_name = (char*)arg;	// sdb1
c00066fe:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006701:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:26
	struct partition* part = elem2entry(struct partition, part_tag, pelem);	// 根据pelem找到partition
c0006704:	8b 45 08             	mov    0x8(%ebp),%eax
c0006707:	83 e8 0c             	sub    $0xc,%eax
c000670a:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:27
	if (!strcmp(part->name, part_name)) {	//名字一致
c000670d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006710:	83 c0 14             	add    $0x14,%eax
c0006713:	83 ec 08             	sub    $0x8,%esp
c0006716:	ff 75 f4             	pushl  -0xc(%ebp)
c0006719:	50                   	push   %eax
c000671a:	e8 d0 d4 ff ff       	call   c0003bef <strcmp>
c000671f:	83 c4 10             	add    $0x10,%esp
c0006722:	84 c0                	test   %al,%al
c0006724:	0f 85 ce 01 00 00    	jne    c00068f8 <mount_partition+0x201>
/work/x86_os_my/fs/fs.c:28
		cur_part = part;
c000672a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000672d:	a3 50 db 00 c0       	mov    %eax,0xc000db50
/work/x86_os_my/fs/fs.c:29
		struct disk* hd = cur_part->my_disk;
c0006732:	a1 50 db 00 c0       	mov    0xc000db50,%eax
c0006737:	8b 40 08             	mov    0x8(%eax),%eax
c000673a:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:30
		struct super_block* sb_buf = (struct super_block*)sys_malloc(SECTOR_SIZE);
c000673d:	83 ec 0c             	sub    $0xc,%esp
c0006740:	68 00 02 00 00       	push   $0x200
c0006745:	e8 d9 c7 ff ff       	call   c0002f23 <sys_malloc>
c000674a:	83 c4 10             	add    $0x10,%esp
c000674d:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:34

		/* 在内存中创建分区cur_part的超级块 */
		// super_block 占用了1个扇区，但是它后边有很多数据是pad只做填充用
		cur_part->sb = (struct super_block*)sys_malloc(sizeof(struct super_block));
c0006750:	8b 1d 50 db 00 c0    	mov    0xc000db50,%ebx
c0006756:	83 ec 0c             	sub    $0xc,%esp
c0006759:	68 00 02 00 00       	push   $0x200
c000675e:	e8 c0 c7 ff ff       	call   c0002f23 <sys_malloc>
c0006763:	83 c4 10             	add    $0x10,%esp
c0006766:	89 43 1c             	mov    %eax,0x1c(%ebx)
/work/x86_os_my/fs/fs.c:35
		if (cur_part->sb == NULL) {
c0006769:	a1 50 db 00 c0       	mov    0xc000db50,%eax
c000676e:	8b 40 1c             	mov    0x1c(%eax),%eax
c0006771:	85 c0                	test   %eax,%eax
c0006773:	75 19                	jne    c000678e <mount_partition+0x97>
/work/x86_os_my/fs/fs.c:36
			PANIC("alloc memory failed!");
c0006775:	68 04 96 00 c0       	push   $0xc0009604
c000677a:	68 48 99 00 c0       	push   $0xc0009948
c000677f:	6a 24                	push   $0x24
c0006781:	68 19 96 00 c0       	push   $0xc0009619
c0006786:	e8 77 be ff ff       	call   c0002602 <panic_spin>
c000678b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:40
		}

		/* 读入超级块 */
		memset(sb_buf, 0, SECTOR_SIZE);
c000678e:	83 ec 04             	sub    $0x4,%esp
c0006791:	68 00 02 00 00       	push   $0x200
c0006796:	6a 00                	push   $0x0
c0006798:	ff 75 e8             	pushl  -0x18(%ebp)
c000679b:	e8 7a d2 ff ff       	call   c0003a1a <memset>
c00067a0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:41
		ide_read(hd, cur_part->start_lba + 1, sb_buf, 1);
c00067a3:	a1 50 db 00 c0       	mov    0xc000db50,%eax
c00067a8:	8b 00                	mov    (%eax),%eax
c00067aa:	83 c0 01             	add    $0x1,%eax
c00067ad:	6a 01                	push   $0x1
c00067af:	ff 75 e8             	pushl  -0x18(%ebp)
c00067b2:	50                   	push   %eax
c00067b3:	ff 75 ec             	pushl  -0x14(%ebp)
c00067b6:	e8 67 f4 ff ff       	call   c0005c22 <ide_read>
c00067bb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:43
		// 拷贝给 cur_part->sb
		memcpy(cur_part->sb, sb_buf, sizeof(struct super_block));
c00067be:	a1 50 db 00 c0       	mov    0xc000db50,%eax
c00067c3:	8b 40 1c             	mov    0x1c(%eax),%eax
c00067c6:	83 ec 04             	sub    $0x4,%esp
c00067c9:	68 00 02 00 00       	push   $0x200
c00067ce:	ff 75 e8             	pushl  -0x18(%ebp)
c00067d1:	50                   	push   %eax
c00067d2:	e8 95 d2 ff ff       	call   c0003a6c <memcpy>
c00067d7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:46

		/* 读入块位图 */
		cur_part->block_bitmap.bits = (uint8_t*)sys_malloc(sb_buf->block_bitmap_sects * SECTOR_SIZE);
c00067da:	8b 1d 50 db 00 c0    	mov    0xc000db50,%ebx
c00067e0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00067e3:	8b 40 14             	mov    0x14(%eax),%eax
c00067e6:	c1 e0 09             	shl    $0x9,%eax
c00067e9:	83 ec 0c             	sub    $0xc,%esp
c00067ec:	50                   	push   %eax
c00067ed:	e8 31 c7 ff ff       	call   c0002f23 <sys_malloc>
c00067f2:	83 c4 10             	add    $0x10,%esp
c00067f5:	89 43 24             	mov    %eax,0x24(%ebx)
/work/x86_os_my/fs/fs.c:47
		if (cur_part->block_bitmap.bits == NULL) {
c00067f8:	a1 50 db 00 c0       	mov    0xc000db50,%eax
c00067fd:	8b 40 24             	mov    0x24(%eax),%eax
c0006800:	85 c0                	test   %eax,%eax
c0006802:	75 19                	jne    c000681d <mount_partition+0x126>
/work/x86_os_my/fs/fs.c:48
			PANIC("alloc memory failed!");
c0006804:	68 04 96 00 c0       	push   $0xc0009604
c0006809:	68 48 99 00 c0       	push   $0xc0009948
c000680e:	6a 30                	push   $0x30
c0006810:	68 19 96 00 c0       	push   $0xc0009619
c0006815:	e8 e8 bd ff ff       	call   c0002602 <panic_spin>
c000681a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:50
		}
		cur_part->block_bitmap.btmp_bytes_len = sb_buf->block_bitmap_sects * SECTOR_SIZE;
c000681d:	a1 50 db 00 c0       	mov    0xc000db50,%eax
c0006822:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0006825:	8b 52 14             	mov    0x14(%edx),%edx
c0006828:	c1 e2 09             	shl    $0x9,%edx
c000682b:	89 50 20             	mov    %edx,0x20(%eax)
/work/x86_os_my/fs/fs.c:51
		ide_read(hd, sb_buf->block_bitmap_lba, cur_part->block_bitmap.bits, sb_buf->block_bitmap_sects);
c000682e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0006831:	8b 48 14             	mov    0x14(%eax),%ecx
c0006834:	a1 50 db 00 c0       	mov    0xc000db50,%eax
c0006839:	8b 50 24             	mov    0x24(%eax),%edx
c000683c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000683f:	8b 40 10             	mov    0x10(%eax),%eax
c0006842:	51                   	push   %ecx
c0006843:	52                   	push   %edx
c0006844:	50                   	push   %eax
c0006845:	ff 75 ec             	pushl  -0x14(%ebp)
c0006848:	e8 d5 f3 ff ff       	call   c0005c22 <ide_read>
c000684d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:54

		/* 读入inode位图 */
		cur_part->inode_bitmap.bits = (uint8_t*)sys_malloc(sb_buf->inode_bitmap_sects * SECTOR_SIZE);
c0006850:	8b 1d 50 db 00 c0    	mov    0xc000db50,%ebx
c0006856:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0006859:	8b 40 1c             	mov    0x1c(%eax),%eax
c000685c:	c1 e0 09             	shl    $0x9,%eax
c000685f:	83 ec 0c             	sub    $0xc,%esp
c0006862:	50                   	push   %eax
c0006863:	e8 bb c6 ff ff       	call   c0002f23 <sys_malloc>
c0006868:	83 c4 10             	add    $0x10,%esp
c000686b:	89 43 2c             	mov    %eax,0x2c(%ebx)
/work/x86_os_my/fs/fs.c:55
		if (cur_part->inode_bitmap.bits == NULL) {
c000686e:	a1 50 db 00 c0       	mov    0xc000db50,%eax
c0006873:	8b 40 2c             	mov    0x2c(%eax),%eax
c0006876:	85 c0                	test   %eax,%eax
c0006878:	75 19                	jne    c0006893 <mount_partition+0x19c>
/work/x86_os_my/fs/fs.c:56
			PANIC("alloc memory failed!");
c000687a:	68 04 96 00 c0       	push   $0xc0009604
c000687f:	68 48 99 00 c0       	push   $0xc0009948
c0006884:	6a 38                	push   $0x38
c0006886:	68 19 96 00 c0       	push   $0xc0009619
c000688b:	e8 72 bd ff ff       	call   c0002602 <panic_spin>
c0006890:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:58
		}
		cur_part->inode_bitmap.btmp_bytes_len = sb_buf->inode_bitmap_sects * SECTOR_SIZE;
c0006893:	a1 50 db 00 c0       	mov    0xc000db50,%eax
c0006898:	8b 55 e8             	mov    -0x18(%ebp),%edx
c000689b:	8b 52 1c             	mov    0x1c(%edx),%edx
c000689e:	c1 e2 09             	shl    $0x9,%edx
c00068a1:	89 50 28             	mov    %edx,0x28(%eax)
/work/x86_os_my/fs/fs.c:59
		ide_read(hd, sb_buf->inode_bitmap_lba, cur_part->inode_bitmap.bits, sb_buf->inode_bitmap_sects);
c00068a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00068a7:	8b 48 1c             	mov    0x1c(%eax),%ecx
c00068aa:	a1 50 db 00 c0       	mov    0xc000db50,%eax
c00068af:	8b 50 2c             	mov    0x2c(%eax),%edx
c00068b2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00068b5:	8b 40 18             	mov    0x18(%eax),%eax
c00068b8:	51                   	push   %ecx
c00068b9:	52                   	push   %edx
c00068ba:	50                   	push   %eax
c00068bb:	ff 75 ec             	pushl  -0x14(%ebp)
c00068be:	e8 5f f3 ff ff       	call   c0005c22 <ide_read>
c00068c3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:62


		list_init(&cur_part->open_inodes);	// 本分区打开的inode队列！
c00068c6:	a1 50 db 00 c0       	mov    0xc000db50,%eax
c00068cb:	83 c0 30             	add    $0x30,%eax
c00068ce:	83 ec 0c             	sub    $0xc,%esp
c00068d1:	50                   	push   %eax
c00068d2:	e8 01 dc ff ff       	call   c00044d8 <list_init>
c00068d7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:65


		printk("mount %s done!\n", part->name);
c00068da:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00068dd:	83 c0 14             	add    $0x14,%eax
c00068e0:	83 ec 08             	sub    $0x8,%esp
c00068e3:	50                   	push   %eax
c00068e4:	68 21 96 00 c0       	push   $0xc0009621
c00068e9:	e8 ad fd ff ff       	call   c000669b <printk>
c00068ee:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:67
		/* 返回true时list_traversal才会停止遍历,减少了后面元素无意义的遍历. */
		return true;
c00068f1:	b8 01 00 00 00       	mov    $0x1,%eax
c00068f6:	eb 05                	jmp    c00068fd <mount_partition+0x206>
/work/x86_os_my/fs/fs.c:69
	}//if (!strcmp(part->name, part_name))
	return false;	// list_traversal继续遍历
c00068f8:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/fs.c:70
}
c00068fd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0006900:	c9                   	leave  
c0006901:	c3                   	ret    

c0006902 <partition_format>:
partition_format():
/work/x86_os_my/fs/fs.c:86
	| 操作系统引导块，超级块，空闲块位图，inode位图，inode数组，根目录，空闲块区域 |
	+------------------------------------------------------------------------------+
	partition结构见ide.h
	MAX_FILES_PER_PART == 4096
****************************************************************************************/
static void partition_format(struct partition* part) {
c0006902:	55                   	push   %ebp
c0006903:	89 e5                	mov    %esp,%ebp
c0006905:	57                   	push   %edi
c0006906:	56                   	push   %esi
c0006907:	53                   	push   %ebx
c0006908:	81 ec 7c 02 00 00    	sub    $0x27c,%esp
/work/x86_os_my/fs/fs.c:88
	/* 为方便实现，inode管理的数据块，一个块大小是一扇区 */
	uint32_t boot_sector_sects = 1;		//引导块
c000690e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
/work/x86_os_my/fs/fs.c:89
	uint32_t super_block_sects = 1;		//超级块
c0006915:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
/work/x86_os_my/fs/fs.c:90
	uint32_t inode_bitmap_sects = DIV_ROUND_UP(MAX_FILES_PER_PART, BITS_PER_SECTOR);	// inode位图占几个扇区.最多支持4096个文件
c000691c:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
/work/x86_os_my/fs/fs.c:91
	uint32_t inode_table_sects = DIV_ROUND_UP((sizeof(struct inode) * MAX_FILES_PER_PART), SECTOR_SIZE);	//inode数组占几个扇区
c0006923:	c7 45 d4 60 02 00 00 	movl   $0x260,-0x2c(%ebp)
/work/x86_os_my/fs/fs.c:92
	uint32_t used_sects = boot_sector_sects + super_block_sects + inode_bitmap_sects + inode_table_sects;
c000692a:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000692d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0006930:	01 c2                	add    %eax,%edx
c0006932:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0006935:	01 c2                	add    %eax,%edx
c0006937:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000693a:	01 d0                	add    %edx,%eax
c000693c:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/fs/fs.c:93
	uint32_t free_sects = part->sec_cnt - used_sects;  
c000693f:	8b 45 08             	mov    0x8(%ebp),%eax
c0006942:	8b 40 04             	mov    0x4(%eax),%eax
c0006945:	2b 45 d0             	sub    -0x30(%ebp),%eax
c0006948:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/fs/fs.c:97

	/************** 简单处理块位图占据的扇区数 ***************/
	uint32_t block_bitmap_sects;	//空闲块位图占几个扇区
	block_bitmap_sects = DIV_ROUND_UP(free_sects, BITS_PER_SECTOR);		//free_sects空闲块位图要占几个扇区
c000694b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c000694e:	05 ff 0f 00 00       	add    $0xfff,%eax
c0006953:	c1 e8 0c             	shr    $0xc,%eax
c0006956:	89 45 c8             	mov    %eax,-0x38(%ebp)
/work/x86_os_my/fs/fs.c:99
	/* 再算一次空闲块数量 */
	uint32_t block_bitmap_bit_len = free_sects - block_bitmap_sects;	//block_bitmap_bit_len 是位图长度，也是空闲块数量
c0006959:	8b 45 cc             	mov    -0x34(%ebp),%eax
c000695c:	2b 45 c8             	sub    -0x38(%ebp),%eax
c000695f:	89 45 c4             	mov    %eax,-0x3c(%ebp)
/work/x86_os_my/fs/fs.c:100
	block_bitmap_sects = DIV_ROUND_UP(block_bitmap_bit_len, BITS_PER_SECTOR); 
c0006962:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0006965:	05 ff 0f 00 00       	add    $0xfff,%eax
c000696a:	c1 e8 0c             	shr    $0xc,%eax
c000696d:	89 45 c8             	mov    %eax,-0x38(%ebp)
/work/x86_os_my/fs/fs.c:105
	/*********************************************************/

	/* 超级块初始化 */
	struct super_block sb;		//局部变量在栈中512字节
	sb.magic = 0x19590318;
c0006970:	c7 85 a4 fd ff ff 18 	movl   $0x19590318,-0x25c(%ebp)
c0006977:	03 59 19 
/work/x86_os_my/fs/fs.c:106
	sb.sec_cnt = part->sec_cnt;
c000697a:	8b 45 08             	mov    0x8(%ebp),%eax
c000697d:	8b 40 04             	mov    0x4(%eax),%eax
c0006980:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
/work/x86_os_my/fs/fs.c:107
	sb.inode_cnt = MAX_FILES_PER_PART;
c0006986:	c7 85 ac fd ff ff 00 	movl   $0x1000,-0x254(%ebp)
c000698d:	10 00 00 
/work/x86_os_my/fs/fs.c:108
	sb.part_lba_base = part->start_lba;
c0006990:	8b 45 08             	mov    0x8(%ebp),%eax
c0006993:	8b 00                	mov    (%eax),%eax
c0006995:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
/work/x86_os_my/fs/fs.c:110

	sb.block_bitmap_lba = sb.part_lba_base + 2;	// 第0块是引导块,第1块是超级块
c000699b:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
c00069a1:	83 c0 02             	add    $0x2,%eax
c00069a4:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
/work/x86_os_my/fs/fs.c:111
	sb.block_bitmap_sects = block_bitmap_sects;	// 空闲块位图占几个扇区
c00069aa:	8b 45 c8             	mov    -0x38(%ebp),%eax
c00069ad:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
/work/x86_os_my/fs/fs.c:113

	sb.inode_bitmap_lba = sb.block_bitmap_lba + sb.block_bitmap_sects;
c00069b3:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
c00069b9:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
c00069bf:	01 d0                	add    %edx,%eax
c00069c1:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
/work/x86_os_my/fs/fs.c:114
	sb.inode_bitmap_sects = inode_bitmap_sects;	// inode位图占几个扇区
c00069c7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c00069ca:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
/work/x86_os_my/fs/fs.c:116

	sb.inode_table_lba = sb.inode_bitmap_lba + sb.inode_bitmap_sects;
c00069d0:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
c00069d6:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
c00069dc:	01 d0                	add    %edx,%eax
c00069de:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
/work/x86_os_my/fs/fs.c:117
	sb.inode_table_sects = inode_table_sects;	// inode数组占几个扇区
c00069e4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c00069e7:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
/work/x86_os_my/fs/fs.c:119

	sb.data_start_lba = sb.inode_table_lba + sb.inode_table_sects;	// 数据区开始的第一个扇区号
c00069ed:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
c00069f3:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
c00069f9:	01 d0                	add    %edx,%eax
c00069fb:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
/work/x86_os_my/fs/fs.c:121

	sb.root_inode_no = 0;	//根目录的inode号是0
c0006a01:	c7 85 d0 fd ff ff 00 	movl   $0x0,-0x230(%ebp)
c0006a08:	00 00 00 
/work/x86_os_my/fs/fs.c:122
	sb.dir_entry_size = sizeof(struct dir_entry);
c0006a0b:	c7 85 d4 fd ff ff 18 	movl   $0x18,-0x22c(%ebp)
c0006a12:	00 00 00 
/work/x86_os_my/fs/fs.c:124

	printk("%s info:\n", part->name);
c0006a15:	8b 45 08             	mov    0x8(%ebp),%eax
c0006a18:	83 c0 14             	add    $0x14,%eax
c0006a1b:	83 ec 08             	sub    $0x8,%esp
c0006a1e:	50                   	push   %eax
c0006a1f:	68 31 96 00 c0       	push   $0xc0009631
c0006a24:	e8 72 fc ff ff       	call   c000669b <printk>
c0006a29:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:125
	printk("   magic:0x%x\n   part_lba_base:0x%x\n   all_sectors:0x%x\n   inode_cnt:0x%x\n   block_bitmap_lba:0x%x\n   block_bitmap_sectors:0x%x\n   inode_bitmap_lba:0x%x\n   inode_bitmap_sectors:0x%x\n   inode_table_lba:0x%x\n   inode_table_sectors:0x%x\n   data_start_lba:0x%x\n", sb.magic, sb.part_lba_base, sb.sec_cnt, sb.inode_cnt, sb.block_bitmap_lba, sb.block_bitmap_sects, sb.inode_bitmap_lba, sb.inode_bitmap_sects, sb.inode_table_lba, sb.inode_table_sects, sb.data_start_lba);
c0006a2c:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
c0006a32:	8b 9d c8 fd ff ff    	mov    -0x238(%ebp),%ebx
c0006a38:	8b bd c4 fd ff ff    	mov    -0x23c(%ebp),%edi
c0006a3e:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
c0006a44:	89 85 94 fd ff ff    	mov    %eax,-0x26c(%ebp)
c0006a4a:	8b b5 bc fd ff ff    	mov    -0x244(%ebp),%esi
c0006a50:	89 b5 90 fd ff ff    	mov    %esi,-0x270(%ebp)
c0006a56:	8b 8d b8 fd ff ff    	mov    -0x248(%ebp),%ecx
c0006a5c:	89 8d 8c fd ff ff    	mov    %ecx,-0x274(%ebp)
c0006a62:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
c0006a68:	89 85 88 fd ff ff    	mov    %eax,-0x278(%ebp)
c0006a6e:	8b b5 ac fd ff ff    	mov    -0x254(%ebp),%esi
c0006a74:	89 b5 84 fd ff ff    	mov    %esi,-0x27c(%ebp)
c0006a7a:	8b b5 a8 fd ff ff    	mov    -0x258(%ebp),%esi
c0006a80:	8b 8d b0 fd ff ff    	mov    -0x250(%ebp),%ecx
c0006a86:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
c0006a8c:	52                   	push   %edx
c0006a8d:	53                   	push   %ebx
c0006a8e:	57                   	push   %edi
c0006a8f:	ff b5 94 fd ff ff    	pushl  -0x26c(%ebp)
c0006a95:	ff b5 90 fd ff ff    	pushl  -0x270(%ebp)
c0006a9b:	ff b5 8c fd ff ff    	pushl  -0x274(%ebp)
c0006aa1:	ff b5 88 fd ff ff    	pushl  -0x278(%ebp)
c0006aa7:	ff b5 84 fd ff ff    	pushl  -0x27c(%ebp)
c0006aad:	56                   	push   %esi
c0006aae:	51                   	push   %ecx
c0006aaf:	50                   	push   %eax
c0006ab0:	68 3c 96 00 c0       	push   $0xc000963c
c0006ab5:	e8 e1 fb ff ff       	call   c000669b <printk>
c0006aba:	83 c4 30             	add    $0x30,%esp
/work/x86_os_my/fs/fs.c:129


	/***** 1 将超级块写入本分区的1号扇区 *****/
	struct disk* hd = part->my_disk;	// 分区所属的硬盘
c0006abd:	8b 45 08             	mov    0x8(%ebp),%eax
c0006ac0:	8b 40 08             	mov    0x8(%eax),%eax
c0006ac3:	89 45 c0             	mov    %eax,-0x40(%ebp)
/work/x86_os_my/fs/fs.c:131
	// void ide_write(struct disk* hd, uint32_t lba, void* buf, uint32_t sec_cnt);
	ide_write(hd, part->start_lba + 1, &sb, 1);
c0006ac6:	8b 45 08             	mov    0x8(%ebp),%eax
c0006ac9:	8b 00                	mov    (%eax),%eax
c0006acb:	8d 50 01             	lea    0x1(%eax),%edx
c0006ace:	6a 01                	push   $0x1
c0006ad0:	8d 85 a4 fd ff ff    	lea    -0x25c(%ebp),%eax
c0006ad6:	50                   	push   %eax
c0006ad7:	52                   	push   %edx
c0006ad8:	ff 75 c0             	pushl  -0x40(%ebp)
c0006adb:	e8 b6 f2 ff ff       	call   c0005d96 <ide_write>
c0006ae0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:132
	printk("   super_block_lba:0x%x\n", part->start_lba + 1);
c0006ae3:	8b 45 08             	mov    0x8(%ebp),%eax
c0006ae6:	8b 00                	mov    (%eax),%eax
c0006ae8:	83 c0 01             	add    $0x1,%eax
c0006aeb:	83 ec 08             	sub    $0x8,%esp
c0006aee:	50                   	push   %eax
c0006aef:	68 3e 97 00 c0       	push   $0xc000973e
c0006af4:	e8 a2 fb ff ff       	call   c000669b <printk>
c0006af9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:136


	/* 他们三个写到硬盘上：block_bitmap_sects/inode_bitmap_sects/inode_table_sects 缓冲区选三者最大的 */
	uint32_t buf_size = (sb.block_bitmap_sects >= sb.inode_bitmap_sects ? sb.block_bitmap_sects : sb.inode_bitmap_sects);
c0006afc:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
c0006b02:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
c0006b08:	39 c2                	cmp    %eax,%edx
c0006b0a:	0f 43 c2             	cmovae %edx,%eax
c0006b0d:	89 45 bc             	mov    %eax,-0x44(%ebp)
/work/x86_os_my/fs/fs.c:137
	buf_size = (buf_size >= sb.inode_table_sects ? buf_size : sb.inode_table_sects) * SECTOR_SIZE;
c0006b10:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
c0006b16:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0006b19:	39 c2                	cmp    %eax,%edx
c0006b1b:	0f 43 c2             	cmovae %edx,%eax
c0006b1e:	c1 e0 09             	shl    $0x9,%eax
c0006b21:	89 45 bc             	mov    %eax,-0x44(%ebp)
/work/x86_os_my/fs/fs.c:138
	uint8_t* buf = (uint8_t*)sys_malloc(buf_size);	// 申请的内存由内存管理系统清0后返回
c0006b24:	83 ec 0c             	sub    $0xc,%esp
c0006b27:	ff 75 bc             	pushl  -0x44(%ebp)
c0006b2a:	e8 f4 c3 ff ff       	call   c0002f23 <sys_malloc>
c0006b2f:	83 c4 10             	add    $0x10,%esp
c0006b32:	89 45 b8             	mov    %eax,-0x48(%ebp)
/work/x86_os_my/fs/fs.c:143


	/***** 2 将块位图初始化并写入sb.block_bitmap_lba *****/
	/* 初始化块位图 block_bitmap */
	buf[0] |= 0x01;	// 第0个块预留给根目录,位图中先占位
c0006b35:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0006b38:	0f b6 00             	movzbl (%eax),%eax
c0006b3b:	83 c8 01             	or     $0x1,%eax
c0006b3e:	89 c2                	mov    %eax,%edx
c0006b40:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0006b43:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/fs/fs.c:144
	uint32_t block_bitmap_last_byte = block_bitmap_bit_len / 8;		//block_bitmap_bit_len 是位图长度，也是空闲块数量
c0006b45:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0006b48:	c1 e8 03             	shr    $0x3,%eax
c0006b4b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
/work/x86_os_my/fs/fs.c:145
	uint8_t  block_bitmap_last_bit  = block_bitmap_bit_len % 8;
c0006b4e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0006b51:	83 e0 07             	and    $0x7,%eax
c0006b54:	88 45 b3             	mov    %al,-0x4d(%ebp)
/work/x86_os_my/fs/fs.c:146
	uint32_t last_size = SECTOR_SIZE - (block_bitmap_last_byte % SECTOR_SIZE);	// last_size是位图占用的最后一个扇区中，不足一扇区的空闲部分
c0006b57:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0006b5a:	25 ff 01 00 00       	and    $0x1ff,%eax
c0006b5f:	ba 00 02 00 00       	mov    $0x200,%edx
c0006b64:	29 c2                	sub    %eax,%edx
c0006b66:	89 d0                	mov    %edx,%eax
c0006b68:	89 45 ac             	mov    %eax,-0x54(%ebp)
/work/x86_os_my/fs/fs.c:149

	// 1 空闲块位图最后一字节，到最后一字节所在扇区的末尾，全置为占用（空闲块位图所在扇区的空闲部分）
	memset(&buf[block_bitmap_last_byte], 0xff, last_size);
c0006b6b:	8b 55 b8             	mov    -0x48(%ebp),%edx
c0006b6e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0006b71:	01 d0                	add    %edx,%eax
c0006b73:	83 ec 04             	sub    $0x4,%esp
c0006b76:	ff 75 ac             	pushl  -0x54(%ebp)
c0006b79:	68 ff 00 00 00       	push   $0xff
c0006b7e:	50                   	push   %eax
c0006b7f:	e8 96 ce ff ff       	call   c0003a1a <memset>
c0006b84:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:152

	// 2 上一步中最后一字节内，有效的位重新置0
	uint8_t bit_idx = 0;
c0006b87:	c6 45 e7 00          	movb   $0x0,-0x19(%ebp)
/work/x86_os_my/fs/fs.c:153
	while (bit_idx <= block_bitmap_last_bit) {
c0006b8b:	eb 37                	jmp    c0006bc4 <partition_format+0x2c2>
/work/x86_os_my/fs/fs.c:154
		buf[block_bitmap_last_byte] &= ~(1 << bit_idx++);
c0006b8d:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c0006b91:	8d 50 01             	lea    0x1(%eax),%edx
c0006b94:	88 55 e7             	mov    %dl,-0x19(%ebp)
c0006b97:	0f b6 c0             	movzbl %al,%eax
c0006b9a:	ba 01 00 00 00       	mov    $0x1,%edx
c0006b9f:	89 c1                	mov    %eax,%ecx
c0006ba1:	d3 e2                	shl    %cl,%edx
c0006ba3:	89 d0                	mov    %edx,%eax
c0006ba5:	f7 d0                	not    %eax
c0006ba7:	89 c3                	mov    %eax,%ebx
c0006ba9:	8b 55 b8             	mov    -0x48(%ebp),%edx
c0006bac:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0006baf:	01 d0                	add    %edx,%eax
c0006bb1:	8b 4d b8             	mov    -0x48(%ebp),%ecx
c0006bb4:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0006bb7:	01 ca                	add    %ecx,%edx
c0006bb9:	0f b6 12             	movzbl (%edx),%edx
c0006bbc:	89 d1                	mov    %edx,%ecx
c0006bbe:	89 da                	mov    %ebx,%edx
c0006bc0:	21 ca                	and    %ecx,%edx
c0006bc2:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/fs/fs.c:153
	// 1 空闲块位图最后一字节，到最后一字节所在扇区的末尾，全置为占用（空闲块位图所在扇区的空闲部分）
	memset(&buf[block_bitmap_last_byte], 0xff, last_size);

	// 2 上一步中最后一字节内，有效的位重新置0
	uint8_t bit_idx = 0;
	while (bit_idx <= block_bitmap_last_bit) {
c0006bc4:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c0006bc8:	3a 45 b3             	cmp    -0x4d(%ebp),%al
c0006bcb:	76 c0                	jbe    c0006b8d <partition_format+0x28b>
/work/x86_os_my/fs/fs.c:157
		buf[block_bitmap_last_byte] &= ~(1 << bit_idx++);
	}
	// 3 写回到硬盘 空闲块位图 区域
	ide_write(hd, sb.block_bitmap_lba, buf, sb.block_bitmap_sects);
c0006bcd:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
c0006bd3:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
c0006bd9:	52                   	push   %edx
c0006bda:	ff 75 b8             	pushl  -0x48(%ebp)
c0006bdd:	50                   	push   %eax
c0006bde:	ff 75 c0             	pushl  -0x40(%ebp)
c0006be1:	e8 b0 f1 ff ff       	call   c0005d96 <ide_write>
c0006be6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:161


	/***** 3 将inode位图初始化并写入sb.inode_bitmap_lba *****/
	memset(buf, 0, buf_size);
c0006be9:	83 ec 04             	sub    $0x4,%esp
c0006bec:	ff 75 bc             	pushl  -0x44(%ebp)
c0006bef:	6a 00                	push   $0x0
c0006bf1:	ff 75 b8             	pushl  -0x48(%ebp)
c0006bf4:	e8 21 ce ff ff       	call   c0003a1a <memset>
c0006bf9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:162
	buf[0] |= 0x1;	// 第0个inode分给了根目录
c0006bfc:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0006bff:	0f b6 00             	movzbl (%eax),%eax
c0006c02:	83 c8 01             	or     $0x1,%eax
c0006c05:	89 c2                	mov    %eax,%edx
c0006c07:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0006c0a:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/fs/fs.c:166
	/* 最多4096个文件，inode位图4096个bit，正好占用1扇区，inode_bitmap_sects等于1
	 * 不像block_bitmap，在inode_bitmap的扇区中，没有多余的空闲无效位 */
	// 写回到硬盘 inode位图 区域
	ide_write(hd, sb.inode_bitmap_lba, buf, sb.inode_bitmap_sects);
c0006c0c:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
c0006c12:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
c0006c18:	52                   	push   %edx
c0006c19:	ff 75 b8             	pushl  -0x48(%ebp)
c0006c1c:	50                   	push   %eax
c0006c1d:	ff 75 c0             	pushl  -0x40(%ebp)
c0006c20:	e8 71 f1 ff ff       	call   c0005d96 <ide_write>
c0006c25:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:171


	/***** 4 将inode数组初始化并写入sb.inode_table_lba *****/
	/* 处理inode_table中的第0项，即根目录所在的inode */
	memset(buf, 0, buf_size);
c0006c28:	83 ec 04             	sub    $0x4,%esp
c0006c2b:	ff 75 bc             	pushl  -0x44(%ebp)
c0006c2e:	6a 00                	push   $0x0
c0006c30:	ff 75 b8             	pushl  -0x48(%ebp)
c0006c33:	e8 e2 cd ff ff       	call   c0003a1a <memset>
c0006c38:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:172
	struct inode* i = (struct inode*)buf;
c0006c3b:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0006c3e:	89 45 a8             	mov    %eax,-0x58(%ebp)
/work/x86_os_my/fs/fs.c:173
	i->i_size = sb.dir_entry_size * 2;		// .和..	// 所有目录项大小之和
c0006c41:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
c0006c47:	8d 14 00             	lea    (%eax,%eax,1),%edx
c0006c4a:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0006c4d:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/fs.c:174
	i->i_no = 0;   // 根目录占inode数组中第0个inode
c0006c50:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0006c53:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/fs/fs.c:178
	// inode管理的是数据块（对于我们来说就是扇区）
	// 此处是指定根目录这个inode管理的数据块的位置
	// i_sectors数组后边的元素都是0 没用到
	i->i_sectors[0] = sb.data_start_lba;
c0006c59:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
c0006c5f:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0006c62:	89 50 10             	mov    %edx,0x10(%eax)
/work/x86_os_my/fs/fs.c:181
	// 写到硬盘 inode数组
	// 其实我们只处理了第0项
	ide_write(hd, sb.inode_table_lba, buf, sb.inode_table_sects);
c0006c65:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
c0006c6b:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
c0006c71:	52                   	push   %edx
c0006c72:	ff 75 b8             	pushl  -0x48(%ebp)
c0006c75:	50                   	push   %eax
c0006c76:	ff 75 c0             	pushl  -0x40(%ebp)
c0006c79:	e8 18 f1 ff ff       	call   c0005d96 <ide_write>
c0006c7e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:187


	/***** 5 将根目录初始化并写入sb.data_start_lba *****/
	/* 写入根目录的两个目录项.和.. */
	// inode不知道数据块中是普通文件，还是目录。但是目录项知道。
	memset(buf, 0, buf_size);
c0006c81:	83 ec 04             	sub    $0x4,%esp
c0006c84:	ff 75 bc             	pushl  -0x44(%ebp)
c0006c87:	6a 00                	push   $0x0
c0006c89:	ff 75 b8             	pushl  -0x48(%ebp)
c0006c8c:	e8 89 cd ff ff       	call   c0003a1a <memset>
c0006c91:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:188
	struct dir_entry* p_de = (struct dir_entry*)buf;
c0006c94:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0006c97:	89 45 a4             	mov    %eax,-0x5c(%ebp)
/work/x86_os_my/fs/fs.c:191

	/* 初始化当前目录"." */
	memcpy(p_de->filename, ".", 1);
c0006c9a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0006c9d:	83 ec 04             	sub    $0x4,%esp
c0006ca0:	6a 01                	push   $0x1
c0006ca2:	68 57 97 00 c0       	push   $0xc0009757
c0006ca7:	50                   	push   %eax
c0006ca8:	e8 bf cd ff ff       	call   c0003a6c <memcpy>
c0006cad:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:192
	p_de->i_no = 0;	// 目录或文件对应的inode编号
c0006cb0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0006cb3:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
/work/x86_os_my/fs/fs.c:193
	p_de->f_type = FT_DIRECTORY;
c0006cba:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0006cbd:	c7 40 14 02 00 00 00 	movl   $0x2,0x14(%eax)
/work/x86_os_my/fs/fs.c:195

	p_de++;
c0006cc4:	83 45 a4 18          	addl   $0x18,-0x5c(%ebp)
/work/x86_os_my/fs/fs.c:198

	/* 初始化当前目录父目录".." */
	memcpy(p_de->filename, "..", 2);
c0006cc8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0006ccb:	83 ec 04             	sub    $0x4,%esp
c0006cce:	6a 02                	push   $0x2
c0006cd0:	68 59 97 00 c0       	push   $0xc0009759
c0006cd5:	50                   	push   %eax
c0006cd6:	e8 91 cd ff ff       	call   c0003a6c <memcpy>
c0006cdb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:199
	p_de->i_no = 0;	// 根目录的父目录依然是根目录自己
c0006cde:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0006ce1:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
/work/x86_os_my/fs/fs.c:200
	p_de->f_type = FT_DIRECTORY;
c0006ce8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0006ceb:	c7 40 14 02 00 00 00 	movl   $0x2,0x14(%eax)
/work/x86_os_my/fs/fs.c:203

	/* sb.data_start_lba已经分配给了根目录，我们把根目录的目录项放进去 */
	ide_write(hd, sb.data_start_lba, buf, 1);
c0006cf2:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
c0006cf8:	6a 01                	push   $0x1
c0006cfa:	ff 75 b8             	pushl  -0x48(%ebp)
c0006cfd:	50                   	push   %eax
c0006cfe:	ff 75 c0             	pushl  -0x40(%ebp)
c0006d01:	e8 90 f0 ff ff       	call   c0005d96 <ide_write>
c0006d06:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:206


	printk("   root_dir_lba:0x%x\n", sb.data_start_lba);
c0006d09:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
c0006d0f:	83 ec 08             	sub    $0x8,%esp
c0006d12:	50                   	push   %eax
c0006d13:	68 5c 97 00 c0       	push   $0xc000975c
c0006d18:	e8 7e f9 ff ff       	call   c000669b <printk>
c0006d1d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:207
	printk("%s format done\n", part->name);
c0006d20:	8b 45 08             	mov    0x8(%ebp),%eax
c0006d23:	83 c0 14             	add    $0x14,%eax
c0006d26:	83 ec 08             	sub    $0x8,%esp
c0006d29:	50                   	push   %eax
c0006d2a:	68 72 97 00 c0       	push   $0xc0009772
c0006d2f:	e8 67 f9 ff ff       	call   c000669b <printk>
c0006d34:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:208
	sys_free(buf);
c0006d37:	83 ec 0c             	sub    $0xc,%esp
c0006d3a:	ff 75 b8             	pushl  -0x48(%ebp)
c0006d3d:	e8 0e c8 ff ff       	call   c0003550 <sys_free>
c0006d42:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:209
}
c0006d45:	90                   	nop
c0006d46:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0006d49:	5b                   	pop    %ebx
c0006d4a:	5e                   	pop    %esi
c0006d4b:	5f                   	pop    %edi
c0006d4c:	5d                   	pop    %ebp
c0006d4d:	c3                   	ret    

c0006d4e <path_parse>:
path_parse():
/work/x86_os_my/fs/fs.c:214


/* 将最上层路径名称解析出来，比如pathname="a/b/c"得到name_store="a"
 * 返回剩下的目录 "b/c" */
static char* path_parse(char* pathname, char* name_store) {
c0006d4e:	55                   	push   %ebp
c0006d4f:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/fs/fs.c:215
	if (pathname[0] == '/') {	// 根目录不需要单独解析
c0006d51:	8b 45 08             	mov    0x8(%ebp),%eax
c0006d54:	0f b6 00             	movzbl (%eax),%eax
c0006d57:	3c 2f                	cmp    $0x2f,%al
c0006d59:	75 27                	jne    c0006d82 <path_parse+0x34>
/work/x86_os_my/fs/fs.c:217 (discriminator 1)
		/* 路径中出现1个或多个连续的字符'/',将这些'/'跳过,如"///a/b" */
		while(*(++pathname) == '/');
c0006d5b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0006d5f:	8b 45 08             	mov    0x8(%ebp),%eax
c0006d62:	0f b6 00             	movzbl (%eax),%eax
c0006d65:	3c 2f                	cmp    $0x2f,%al
c0006d67:	74 f2                	je     c0006d5b <path_parse+0xd>
/work/x86_os_my/fs/fs.c:221
	}

	/* 开始一般的路径解析 */
	while (*pathname != '/' && *pathname != 0) {
c0006d69:	eb 17                	jmp    c0006d82 <path_parse+0x34>
/work/x86_os_my/fs/fs.c:222
		*name_store++ = *pathname++;
c0006d6b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006d6e:	8d 50 01             	lea    0x1(%eax),%edx
c0006d71:	89 55 0c             	mov    %edx,0xc(%ebp)
c0006d74:	8b 55 08             	mov    0x8(%ebp),%edx
c0006d77:	8d 4a 01             	lea    0x1(%edx),%ecx
c0006d7a:	89 4d 08             	mov    %ecx,0x8(%ebp)
c0006d7d:	0f b6 12             	movzbl (%edx),%edx
c0006d80:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/fs/fs.c:221
		/* 路径中出现1个或多个连续的字符'/',将这些'/'跳过,如"///a/b" */
		while(*(++pathname) == '/');
	}

	/* 开始一般的路径解析 */
	while (*pathname != '/' && *pathname != 0) {
c0006d82:	8b 45 08             	mov    0x8(%ebp),%eax
c0006d85:	0f b6 00             	movzbl (%eax),%eax
c0006d88:	3c 2f                	cmp    $0x2f,%al
c0006d8a:	74 0a                	je     c0006d96 <path_parse+0x48>
/work/x86_os_my/fs/fs.c:221 (discriminator 1)
c0006d8c:	8b 45 08             	mov    0x8(%ebp),%eax
c0006d8f:	0f b6 00             	movzbl (%eax),%eax
c0006d92:	84 c0                	test   %al,%al
c0006d94:	75 d5                	jne    c0006d6b <path_parse+0x1d>
/work/x86_os_my/fs/fs.c:225
		*name_store++ = *pathname++;
	}

	if (pathname[0] == 0) {   // 若路径字符串为空则返回NULL
c0006d96:	8b 45 08             	mov    0x8(%ebp),%eax
c0006d99:	0f b6 00             	movzbl (%eax),%eax
c0006d9c:	84 c0                	test   %al,%al
c0006d9e:	75 07                	jne    c0006da7 <path_parse+0x59>
/work/x86_os_my/fs/fs.c:226
		return NULL;
c0006da0:	b8 00 00 00 00       	mov    $0x0,%eax
c0006da5:	eb 03                	jmp    c0006daa <path_parse+0x5c>
/work/x86_os_my/fs/fs.c:228
	}
	return pathname;
c0006da7:	8b 45 08             	mov    0x8(%ebp),%eax
/work/x86_os_my/fs/fs.c:229
}
c0006daa:	5d                   	pop    %ebp
c0006dab:	c3                   	ret    

c0006dac <path_depth_cnt>:
path_depth_cnt():
/work/x86_os_my/fs/fs.c:232

/* 返回路径深度,比如/a/b/c,深度为3 */
int32_t path_depth_cnt(char* pathname) {
c0006dac:	55                   	push   %ebp
c0006dad:	89 e5                	mov    %esp,%ebp
c0006daf:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/fs/fs.c:233
	ASSERT(pathname != NULL);
c0006db2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0006db6:	75 1c                	jne    c0006dd4 <path_depth_cnt+0x28>
/work/x86_os_my/fs/fs.c:233 (discriminator 1)
c0006db8:	68 82 97 00 c0       	push   $0xc0009782
c0006dbd:	68 58 99 00 c0       	push   $0xc0009958
c0006dc2:	68 e9 00 00 00       	push   $0xe9
c0006dc7:	68 19 96 00 c0       	push   $0xc0009619
c0006dcc:	e8 31 b8 ff ff       	call   c0002602 <panic_spin>
c0006dd1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:234
	char* p = pathname;
c0006dd4:	8b 45 08             	mov    0x8(%ebp),%eax
c0006dd7:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:236
	char name[MAX_FILE_NAME_LEN];	// 用于path_parse的参数做路径解析
	uint32_t depth = 0;
c0006dda:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:239

	/* 解析路径,从中拆分出各级名称 */ 
	p = path_parse(p, name);
c0006de1:	83 ec 08             	sub    $0x8,%esp
c0006de4:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0006de7:	50                   	push   %eax
c0006de8:	ff 75 f4             	pushl  -0xc(%ebp)
c0006deb:	e8 5e ff ff ff       	call   c0006d4e <path_parse>
c0006df0:	83 c4 10             	add    $0x10,%esp
c0006df3:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:240
	while (name[0]) {
c0006df6:	eb 32                	jmp    c0006e2a <path_depth_cnt+0x7e>
/work/x86_os_my/fs/fs.c:241
		depth++;
c0006df8:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:242
		memset(name, 0, MAX_FILE_NAME_LEN);
c0006dfc:	83 ec 04             	sub    $0x4,%esp
c0006dff:	6a 10                	push   $0x10
c0006e01:	6a 00                	push   $0x0
c0006e03:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0006e06:	50                   	push   %eax
c0006e07:	e8 0e cc ff ff       	call   c0003a1a <memset>
c0006e0c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:243
		if (p) {	// 如果p不等于NULL,继续分析路径
c0006e0f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0006e13:	74 15                	je     c0006e2a <path_depth_cnt+0x7e>
/work/x86_os_my/fs/fs.c:244
			p  = path_parse(p, name);
c0006e15:	83 ec 08             	sub    $0x8,%esp
c0006e18:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0006e1b:	50                   	push   %eax
c0006e1c:	ff 75 f4             	pushl  -0xc(%ebp)
c0006e1f:	e8 2a ff ff ff       	call   c0006d4e <path_parse>
c0006e24:	83 c4 10             	add    $0x10,%esp
c0006e27:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:240
	char name[MAX_FILE_NAME_LEN];	// 用于path_parse的参数做路径解析
	uint32_t depth = 0;

	/* 解析路径,从中拆分出各级名称 */ 
	p = path_parse(p, name);
	while (name[0]) {
c0006e2a:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c0006e2e:	84 c0                	test   %al,%al
c0006e30:	75 c6                	jne    c0006df8 <path_depth_cnt+0x4c>
/work/x86_os_my/fs/fs.c:247
		memset(name, 0, MAX_FILE_NAME_LEN);
		if (p) {	// 如果p不等于NULL,继续分析路径
			p  = path_parse(p, name);
		}
	}
	return depth;
c0006e32:	8b 45 f0             	mov    -0x10(%ebp),%eax
/work/x86_os_my/fs/fs.c:248
}
c0006e35:	c9                   	leave  
c0006e36:	c3                   	ret    

c0006e37 <search_file>:
search_file():
/work/x86_os_my/fs/fs.c:257
 * 全局变量 struct dir root_dir 定义在 dir.c
 * 也支持 /./a 或者 /../b 会把.和..当做一个目录项继续往下层找
 * /a/b/c若c不存在，那么 searched_record.searched_path 是 /a/b/c
 * 注意下边三种return的地方，是三种情况！
 */
static int search_file(const char* pathname, struct path_search_record* searched_record) {
c0006e37:	55                   	push   %ebp
c0006e38:	89 e5                	mov    %esp,%ebp
c0006e3a:	83 ec 48             	sub    $0x48,%esp
/work/x86_os_my/fs/fs.c:259
	/* 如果待查找的是根目录,为避免下面无用的查找,直接返回已知根目录信息 */
	if (!strcmp(pathname, "/") || !strcmp(pathname, "/.") || !strcmp(pathname, "/..")) {
c0006e3d:	83 ec 08             	sub    $0x8,%esp
c0006e40:	68 93 97 00 c0       	push   $0xc0009793
c0006e45:	ff 75 08             	pushl  0x8(%ebp)
c0006e48:	e8 a2 cd ff ff       	call   c0003bef <strcmp>
c0006e4d:	83 c4 10             	add    $0x10,%esp
c0006e50:	84 c0                	test   %al,%al
c0006e52:	74 2e                	je     c0006e82 <search_file+0x4b>
/work/x86_os_my/fs/fs.c:259 (discriminator 1)
c0006e54:	83 ec 08             	sub    $0x8,%esp
c0006e57:	68 95 97 00 c0       	push   $0xc0009795
c0006e5c:	ff 75 08             	pushl  0x8(%ebp)
c0006e5f:	e8 8b cd ff ff       	call   c0003bef <strcmp>
c0006e64:	83 c4 10             	add    $0x10,%esp
c0006e67:	84 c0                	test   %al,%al
c0006e69:	74 17                	je     c0006e82 <search_file+0x4b>
/work/x86_os_my/fs/fs.c:259 (discriminator 2)
c0006e6b:	83 ec 08             	sub    $0x8,%esp
c0006e6e:	68 98 97 00 c0       	push   $0xc0009798
c0006e73:	ff 75 08             	pushl  0x8(%ebp)
c0006e76:	e8 74 cd ff ff       	call   c0003bef <strcmp>
c0006e7b:	83 c4 10             	add    $0x10,%esp
c0006e7e:	84 c0                	test   %al,%al
c0006e80:	75 2a                	jne    c0006eac <search_file+0x75>
/work/x86_os_my/fs/fs.c:260
		searched_record->parent_dir = &root_dir;	// 直接父目录
c0006e82:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006e85:	c7 80 00 02 00 00 e0 	movl   $0xc000dce0,0x200(%eax)
c0006e8c:	dc 00 c0 
/work/x86_os_my/fs/fs.c:261
		searched_record->file_type = FT_DIRECTORY;	// FT_UNKNOWN代表没找到，找到才有类型是文件或目录
c0006e8f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006e92:	c7 80 04 02 00 00 02 	movl   $0x2,0x204(%eax)
c0006e99:	00 00 00 
/work/x86_os_my/fs/fs.c:262
		searched_record->searched_path[0] = 0;		// 搜索过的路径置空
c0006e9c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006e9f:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/fs/fs.c:263
		return 0;
c0006ea2:	b8 00 00 00 00       	mov    $0x0,%eax
c0006ea7:	e9 08 02 00 00       	jmp    c00070b4 <search_file+0x27d>
/work/x86_os_my/fs/fs.c:266
	}

	uint32_t path_len = strlen(pathname);
c0006eac:	83 ec 0c             	sub    $0xc,%esp
c0006eaf:	ff 75 08             	pushl  0x8(%ebp)
c0006eb2:	e8 ed cc ff ff       	call   c0003ba4 <strlen>
c0006eb7:	83 c4 10             	add    $0x10,%esp
c0006eba:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:268
	/* 保证pathname至少是这样的路径/x且小于最大长度 */
	ASSERT(pathname[0] == '/' && path_len > 1 && path_len < MAX_PATH_LEN);
c0006ebd:	8b 45 08             	mov    0x8(%ebp),%eax
c0006ec0:	0f b6 00             	movzbl (%eax),%eax
c0006ec3:	3c 2f                	cmp    $0x2f,%al
c0006ec5:	75 0f                	jne    c0006ed6 <search_file+0x9f>
/work/x86_os_my/fs/fs.c:268 (discriminator 1)
c0006ec7:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
c0006ecb:	76 09                	jbe    c0006ed6 <search_file+0x9f>
/work/x86_os_my/fs/fs.c:268 (discriminator 3)
c0006ecd:	81 7d e8 ff 01 00 00 	cmpl   $0x1ff,-0x18(%ebp)
c0006ed4:	76 1c                	jbe    c0006ef2 <search_file+0xbb>
/work/x86_os_my/fs/fs.c:268 (discriminator 5)
c0006ed6:	68 9c 97 00 c0       	push   $0xc000979c
c0006edb:	68 68 99 00 c0       	push   $0xc0009968
c0006ee0:	68 0c 01 00 00       	push   $0x10c
c0006ee5:	68 19 96 00 c0       	push   $0xc0009619
c0006eea:	e8 13 b7 ff ff       	call   c0002602 <panic_spin>
c0006eef:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:269
	char* sub_path = (char*)pathname;
c0006ef2:	8b 45 08             	mov    0x8(%ebp),%eax
c0006ef5:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:270
	struct dir* parent_dir = &root_dir;	
c0006ef8:	c7 45 f0 e0 dc 00 c0 	movl   $0xc000dce0,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:274
	struct dir_entry dir_e;

	/* 数组name每次的值分别是各级目录的名字："a","b","c" */
	char name[MAX_FILE_NAME_LEN] = {0};
c0006eff:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
c0006f06:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
c0006f0d:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
c0006f14:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
/work/x86_os_my/fs/fs.c:276

	searched_record->parent_dir = parent_dir;	// 直接父目录
c0006f1b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006f1e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0006f21:	89 90 00 02 00 00    	mov    %edx,0x200(%eax)
/work/x86_os_my/fs/fs.c:277
	searched_record->file_type = FT_UNKNOWN;	// 初始值代表没找到，找到才有类型是文件或目录
c0006f27:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006f2a:	c7 80 04 02 00 00 00 	movl   $0x0,0x204(%eax)
c0006f31:	00 00 00 
/work/x86_os_my/fs/fs.c:278
	uint32_t parent_inode_no = 0;  // 备份各层解析出来的路径，的父目录，的inode号
c0006f34:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:280

	sub_path = path_parse(sub_path, name);
c0006f3b:	83 ec 08             	sub    $0x8,%esp
c0006f3e:	8d 45 c0             	lea    -0x40(%ebp),%eax
c0006f41:	50                   	push   %eax
c0006f42:	ff 75 f4             	pushl  -0xc(%ebp)
c0006f45:	e8 04 fe ff ff       	call   c0006d4e <path_parse>
c0006f4a:	83 c4 10             	add    $0x10,%esp
c0006f4d:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:281
	while (name[0]) {	   // 若第一个字符就是结束符,结束循环
c0006f50:	e9 0f 01 00 00       	jmp    c0007064 <search_file+0x22d>
/work/x86_os_my/fs/fs.c:283
		/* 记录查找过的路径,但不能超过searched_path的长度512字节 */
		ASSERT(strlen(searched_record->searched_path) < 512);
c0006f55:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006f58:	83 ec 0c             	sub    $0xc,%esp
c0006f5b:	50                   	push   %eax
c0006f5c:	e8 43 cc ff ff       	call   c0003ba4 <strlen>
c0006f61:	83 c4 10             	add    $0x10,%esp
c0006f64:	3d ff 01 00 00       	cmp    $0x1ff,%eax
c0006f69:	76 1c                	jbe    c0006f87 <search_file+0x150>
/work/x86_os_my/fs/fs.c:283 (discriminator 1)
c0006f6b:	68 dc 97 00 c0       	push   $0xc00097dc
c0006f70:	68 68 99 00 c0       	push   $0xc0009968
c0006f75:	68 1b 01 00 00       	push   $0x11b
c0006f7a:	68 19 96 00 c0       	push   $0xc0009619
c0006f7f:	e8 7e b6 ff ff       	call   c0002602 <panic_spin>
c0006f84:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:286

		/* 追加到已存在的父目录 */
		strcat(searched_record->searched_path, "/");
c0006f87:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006f8a:	83 ec 08             	sub    $0x8,%esp
c0006f8d:	68 93 97 00 c0       	push   $0xc0009793
c0006f92:	50                   	push   %eax
c0006f93:	e8 86 cd ff ff       	call   c0003d1e <strcat>
c0006f98:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:287
		strcat(searched_record->searched_path, name);
c0006f9b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006f9e:	83 ec 08             	sub    $0x8,%esp
c0006fa1:	8d 55 c0             	lea    -0x40(%ebp),%edx
c0006fa4:	52                   	push   %edx
c0006fa5:	50                   	push   %eax
c0006fa6:	e8 73 cd ff ff       	call   c0003d1e <strcat>
c0006fab:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:290

		/* 在所给的目录中查找目录项，找到后将目录项填入dir_e */
		if (false != search_dir_entry(cur_part, parent_dir, name, &dir_e)) {
c0006fae:	a1 50 db 00 c0       	mov    0xc000db50,%eax
c0006fb3:	8d 55 d0             	lea    -0x30(%ebp),%edx
c0006fb6:	52                   	push   %edx
c0006fb7:	8d 55 c0             	lea    -0x40(%ebp),%edx
c0006fba:	52                   	push   %edx
c0006fbb:	ff 75 f0             	pushl  -0x10(%ebp)
c0006fbe:	50                   	push   %eax
c0006fbf:	e8 1d 0e 00 00       	call   c0007de1 <search_dir_entry>
c0006fc4:	83 c4 10             	add    $0x10,%esp
c0006fc7:	85 c0                	test   %eax,%eax
c0006fc9:	0f 84 8e 00 00 00    	je     c000705d <search_file+0x226>
/work/x86_os_my/fs/fs.c:291
			memset(name, 0, MAX_FILE_NAME_LEN);
c0006fcf:	83 ec 04             	sub    $0x4,%esp
c0006fd2:	6a 10                	push   $0x10
c0006fd4:	6a 00                	push   $0x0
c0006fd6:	8d 45 c0             	lea    -0x40(%ebp),%eax
c0006fd9:	50                   	push   %eax
c0006fda:	e8 3b ca ff ff       	call   c0003a1a <memset>
c0006fdf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:293
			/* 若sub_path不等于NULL，也就是搜索未结束，继续拆分路径 */
			if (sub_path) {
c0006fe2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0006fe6:	74 15                	je     c0006ffd <search_file+0x1c6>
/work/x86_os_my/fs/fs.c:294
				sub_path = path_parse(sub_path, name);
c0006fe8:	83 ec 08             	sub    $0x8,%esp
c0006feb:	8d 45 c0             	lea    -0x40(%ebp),%eax
c0006fee:	50                   	push   %eax
c0006fef:	ff 75 f4             	pushl  -0xc(%ebp)
c0006ff2:	e8 57 fd ff ff       	call   c0006d4e <path_parse>
c0006ff7:	83 c4 10             	add    $0x10,%esp
c0006ffa:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:297
			}

			if (FT_DIRECTORY == dir_e.f_type) {			// 如果被打开的是目录
c0006ffd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0007000:	83 f8 02             	cmp    $0x2,%eax
c0007003:	75 3e                	jne    c0007043 <search_file+0x20c>
/work/x86_os_my/fs/fs.c:298
				parent_inode_no = parent_dir->inode->i_no;
c0007005:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0007008:	8b 00                	mov    (%eax),%eax
c000700a:	8b 00                	mov    (%eax),%eax
c000700c:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:299
				dir_close(parent_dir);
c000700f:	83 ec 0c             	sub    $0xc,%esp
c0007012:	ff 75 f0             	pushl  -0x10(%ebp)
c0007015:	e8 9f 0f 00 00       	call   c0007fb9 <dir_close>
c000701a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:301
				
				parent_dir = dir_open(cur_part, dir_e.i_no);
c000701d:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0007020:	a1 50 db 00 c0       	mov    0xc000db50,%eax
c0007025:	83 ec 08             	sub    $0x8,%esp
c0007028:	52                   	push   %edx
c0007029:	50                   	push   %eax
c000702a:	e8 72 0d 00 00       	call   c0007da1 <dir_open>
c000702f:	83 c4 10             	add    $0x10,%esp
c0007032:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:302
				searched_record->parent_dir = parent_dir;	// 更新直接父目录
c0007035:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007038:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000703b:	89 90 00 02 00 00    	mov    %edx,0x200(%eax)
/work/x86_os_my/fs/fs.c:303
				continue;
c0007041:	eb 21                	jmp    c0007064 <search_file+0x22d>
/work/x86_os_my/fs/fs.c:304
			} else if (FT_REGULAR == dir_e.f_type) {	// 若是普通文件
c0007043:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0007046:	83 f8 01             	cmp    $0x1,%eax
c0007049:	75 19                	jne    c0007064 <search_file+0x22d>
/work/x86_os_my/fs/fs.c:309
				/* 如果搜索路径为 /a/b 但是目录下只有文件a 此时也会返回文件a的inode号【中间某个目录不存在】
				 * 由主调函数根据 searched_record.searched_path 判断："提供的 pathname 是否正确，是否处理完了"
				 * 【情况1】
				 */
				searched_record->file_type = FT_REGULAR;
c000704b:	8b 45 0c             	mov    0xc(%ebp),%eax
c000704e:	c7 80 04 02 00 00 01 	movl   $0x1,0x204(%eax)
c0007055:	00 00 00 
/work/x86_os_my/fs/fs.c:310
				return dir_e.i_no;
c0007058:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000705b:	eb 57                	jmp    c00070b4 <search_file+0x27d>
/work/x86_os_my/fs/fs.c:318
			/* 找不到目录项时，要留着 parent_dir 不要关闭，
			 * 主调函数需要据此知道在哪个目录中创建文件，此时的 searched_record->parent_dir 指向父目录，主调函数负责关闭该目录
			 * 主调函数，创建新文件的话需要在 parent_dir 中创建
			 * 【情况2】
			 */
			return -1;
c000705d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007062:	eb 50                	jmp    c00070b4 <search_file+0x27d>
/work/x86_os_my/fs/fs.c:281
	searched_record->parent_dir = parent_dir;	// 直接父目录
	searched_record->file_type = FT_UNKNOWN;	// 初始值代表没找到，找到才有类型是文件或目录
	uint32_t parent_inode_no = 0;  // 备份各层解析出来的路径，的父目录，的inode号

	sub_path = path_parse(sub_path, name);
	while (name[0]) {	   // 若第一个字符就是结束符,结束循环
c0007064:	0f b6 45 c0          	movzbl -0x40(%ebp),%eax
c0007068:	84 c0                	test   %al,%al
c000706a:	0f 85 e5 fe ff ff    	jne    c0006f55 <search_file+0x11e>
/work/x86_os_my/fs/fs.c:329
	 * 此时 searched_record-> parent_dir 是路径 pathname 中的最后一级目录 c，并不是倒数第二级的父目录 b
	 * 要保证，无论搜索目标是普通文件，还是目录，searched_record->parent_dir 中记录的都应该是父目录！
	 * 因此要关闭目录c，重新打开目录b
	 * 【情况3】
	 */
	dir_close(searched_record->parent_dir);
c0007070:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007073:	8b 80 00 02 00 00    	mov    0x200(%eax),%eax
c0007079:	83 ec 0c             	sub    $0xc,%esp
c000707c:	50                   	push   %eax
c000707d:	e8 37 0f 00 00       	call   c0007fb9 <dir_close>
c0007082:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:330
	searched_record->parent_dir = dir_open(cur_part, parent_inode_no);	   
c0007085:	a1 50 db 00 c0       	mov    0xc000db50,%eax
c000708a:	83 ec 08             	sub    $0x8,%esp
c000708d:	ff 75 ec             	pushl  -0x14(%ebp)
c0007090:	50                   	push   %eax
c0007091:	e8 0b 0d 00 00       	call   c0007da1 <dir_open>
c0007096:	83 c4 10             	add    $0x10,%esp
c0007099:	89 c2                	mov    %eax,%edx
c000709b:	8b 45 0c             	mov    0xc(%ebp),%eax
c000709e:	89 90 00 02 00 00    	mov    %edx,0x200(%eax)
/work/x86_os_my/fs/fs.c:331
	searched_record->file_type = FT_DIRECTORY;
c00070a4:	8b 45 0c             	mov    0xc(%ebp),%eax
c00070a7:	c7 80 04 02 00 00 02 	movl   $0x2,0x204(%eax)
c00070ae:	00 00 00 
/work/x86_os_my/fs/fs.c:332
	return dir_e.i_no;	//目录c的inode号
c00070b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
/work/x86_os_my/fs/fs.c:333 (discriminator 1)
}
c00070b4:	c9                   	leave  
c00070b5:	c3                   	ret    

c00070b6 <sys_open>:
sys_open():
/work/x86_os_my/fs/fs.c:340
/* 打开或创建文件成功后,返回文件描述符,否则返回-1 
 * 对应 file.c 中的 file_create
 *
 * open(const char * pathname, (O_CREAT|O_WRONLY|O_TRUNC));
 */
int32_t sys_open(const char* pathname, uint8_t flags) {
c00070b6:	55                   	push   %ebp
c00070b7:	89 e5                	mov    %esp,%ebp
c00070b9:	53                   	push   %ebx
c00070ba:	81 ec 34 02 00 00    	sub    $0x234,%esp
c00070c0:	8b 45 0c             	mov    0xc(%ebp),%eax
c00070c3:	88 85 d4 fd ff ff    	mov    %al,-0x22c(%ebp)
/work/x86_os_my/fs/fs.c:342
	/* 对目录要用dir_open,这里只有open文件 */
	if (pathname[strlen(pathname) - 1] == '/') {
c00070c9:	83 ec 0c             	sub    $0xc,%esp
c00070cc:	ff 75 08             	pushl  0x8(%ebp)
c00070cf:	e8 d0 ca ff ff       	call   c0003ba4 <strlen>
c00070d4:	83 c4 10             	add    $0x10,%esp
c00070d7:	8d 50 ff             	lea    -0x1(%eax),%edx
c00070da:	8b 45 08             	mov    0x8(%ebp),%eax
c00070dd:	01 d0                	add    %edx,%eax
c00070df:	0f b6 00             	movzbl (%eax),%eax
c00070e2:	3c 2f                	cmp    $0x2f,%al
c00070e4:	75 1d                	jne    c0007103 <sys_open+0x4d>
/work/x86_os_my/fs/fs.c:343
		printk("can`t open a directory %s\n", pathname);
c00070e6:	83 ec 08             	sub    $0x8,%esp
c00070e9:	ff 75 08             	pushl  0x8(%ebp)
c00070ec:	68 09 98 00 c0       	push   $0xc0009809
c00070f1:	e8 a5 f5 ff ff       	call   c000669b <printk>
c00070f6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:344
		return -1;
c00070f9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00070fe:	e9 f4 01 00 00       	jmp    c00072f7 <sys_open+0x241>
/work/x86_os_my/fs/fs.c:346
	}
	ASSERT(flags <= 7);
c0007103:	80 bd d4 fd ff ff 07 	cmpb   $0x7,-0x22c(%ebp)
c000710a:	76 1c                	jbe    c0007128 <sys_open+0x72>
/work/x86_os_my/fs/fs.c:346 (discriminator 1)
c000710c:	68 24 98 00 c0       	push   $0xc0009824
c0007111:	68 74 99 00 c0       	push   $0xc0009974
c0007116:	68 5a 01 00 00       	push   $0x15a
c000711b:	68 19 96 00 c0       	push   $0xc0009619
c0007120:	e8 dd b4 ff ff       	call   c0002602 <panic_spin>
c0007125:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:347
	int32_t fd = -1;	// 默认为找不到
c0007128:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:350

	struct path_search_record searched_record;
	memset(&searched_record, 0, sizeof(struct path_search_record));
c000712f:	83 ec 04             	sub    $0x4,%esp
c0007132:	68 08 02 00 00       	push   $0x208
c0007137:	6a 00                	push   $0x0
c0007139:	8d 85 dc fd ff ff    	lea    -0x224(%ebp),%eax
c000713f:	50                   	push   %eax
c0007140:	e8 d5 c8 ff ff       	call   c0003a1a <memset>
c0007145:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:353

	/* 记录目录深度.帮助判断中间某个目录不存在的情况 */
	uint32_t pathname_depth = path_depth_cnt((char*)pathname);
c0007148:	83 ec 0c             	sub    $0xc,%esp
c000714b:	ff 75 08             	pushl  0x8(%ebp)
c000714e:	e8 59 fc ff ff       	call   c0006dac <path_depth_cnt>
c0007153:	83 c4 10             	add    $0x10,%esp
c0007156:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:356

	/* 先检查文件是否存在 */
	int inode_no = search_file(pathname, &searched_record);
c0007159:	83 ec 08             	sub    $0x8,%esp
c000715c:	8d 85 dc fd ff ff    	lea    -0x224(%ebp),%eax
c0007162:	50                   	push   %eax
c0007163:	ff 75 08             	pushl  0x8(%ebp)
c0007166:	e8 cc fc ff ff       	call   c0006e37 <search_file>
c000716b:	83 c4 10             	add    $0x10,%esp
c000716e:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:357
	bool found = (inode_no != -1 ? true : false); 
c0007171:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%ebp)
c0007175:	0f 95 c0             	setne  %al
c0007178:	0f b6 c0             	movzbl %al,%eax
c000717b:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:359

	if (searched_record.file_type == FT_DIRECTORY) {
c000717e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0007181:	83 f8 02             	cmp    $0x2,%eax
c0007184:	75 29                	jne    c00071af <sys_open+0xf9>
/work/x86_os_my/fs/fs.c:360
		printk("can`t open a direcotry with open(), use opendir() to instead\n");
c0007186:	83 ec 0c             	sub    $0xc,%esp
c0007189:	68 30 98 00 c0       	push   $0xc0009830
c000718e:	e8 08 f5 ff ff       	call   c000669b <printk>
c0007193:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:361
		dir_close(searched_record.parent_dir);	//主调函数负责关闭该目录
c0007196:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0007199:	83 ec 0c             	sub    $0xc,%esp
c000719c:	50                   	push   %eax
c000719d:	e8 17 0e 00 00       	call   c0007fb9 <dir_close>
c00071a2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:362
		return -1;
c00071a5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00071aa:	e9 48 01 00 00       	jmp    c00072f7 <sys_open+0x241>
/work/x86_os_my/fs/fs.c:365
	}

	uint32_t path_searched_depth = path_depth_cnt(searched_record.searched_path);
c00071af:	83 ec 0c             	sub    $0xc,%esp
c00071b2:	8d 85 dc fd ff ff    	lea    -0x224(%ebp),%eax
c00071b8:	50                   	push   %eax
c00071b9:	e8 ee fb ff ff       	call   c0006dac <path_depth_cnt>
c00071be:	83 c4 10             	add    $0x10,%esp
c00071c1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/fs.c:369

	/* 先判断是否把pathname的各层目录都访问到了 */
	// 【search_file情况1】说明并没有访问到全部的路径,某个中间目录是不存在的【是一个同名的普通文件】
	if (pathname_depth != path_searched_depth) {
c00071c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00071c7:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c00071ca:	74 33                	je     c00071ff <sys_open+0x149>
/work/x86_os_my/fs/fs.c:370
		printk("cannot access %s: Not a directory, subpath %s is`t exist\n",
c00071cc:	83 ec 04             	sub    $0x4,%esp
c00071cf:	8d 85 dc fd ff ff    	lea    -0x224(%ebp),%eax
c00071d5:	50                   	push   %eax
c00071d6:	ff 75 08             	pushl  0x8(%ebp)
c00071d9:	68 70 98 00 c0       	push   $0xc0009870
c00071de:	e8 b8 f4 ff ff       	call   c000669b <printk>
c00071e3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:372
			pathname, searched_record.searched_path);
		dir_close(searched_record.parent_dir);
c00071e6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c00071e9:	83 ec 0c             	sub    $0xc,%esp
c00071ec:	50                   	push   %eax
c00071ed:	e8 c7 0d 00 00       	call   c0007fb9 <dir_close>
c00071f2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:373
		return -1;
c00071f5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00071fa:	e9 f8 00 00 00       	jmp    c00072f7 <sys_open+0x241>
/work/x86_os_my/fs/fs.c:378
	}

	// 【search_file情况2】若是在最后一个路径上没找到
	// 并且此时也不是要创建文件,直接返回-1 */
	if (!found && !(flags & O_CREAT)) {
c00071ff:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0007203:	75 56                	jne    c000725b <sys_open+0x1a5>
/work/x86_os_my/fs/fs.c:378 (discriminator 1)
c0007205:	0f b6 85 d4 fd ff ff 	movzbl -0x22c(%ebp),%eax
c000720c:	83 e0 04             	and    $0x4,%eax
c000720f:	85 c0                	test   %eax,%eax
c0007211:	75 48                	jne    c000725b <sys_open+0x1a5>
/work/x86_os_my/fs/fs.c:380
		printk("in path %s, file %s is`t exist\n",
			searched_record.searched_path, (strrchr(searched_record.searched_path, '/') + 1));
c0007213:	83 ec 08             	sub    $0x8,%esp
c0007216:	6a 2f                	push   $0x2f
c0007218:	8d 85 dc fd ff ff    	lea    -0x224(%ebp),%eax
c000721e:	50                   	push   %eax
c000721f:	e8 9c ca ff ff       	call   c0003cc0 <strrchr>
c0007224:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:379
	}

	// 【search_file情况2】若是在最后一个路径上没找到
	// 并且此时也不是要创建文件,直接返回-1 */
	if (!found && !(flags & O_CREAT)) {
		printk("in path %s, file %s is`t exist\n",
c0007227:	83 c0 01             	add    $0x1,%eax
c000722a:	83 ec 04             	sub    $0x4,%esp
c000722d:	50                   	push   %eax
c000722e:	8d 85 dc fd ff ff    	lea    -0x224(%ebp),%eax
c0007234:	50                   	push   %eax
c0007235:	68 ac 98 00 c0       	push   $0xc00098ac
c000723a:	e8 5c f4 ff ff       	call   c000669b <printk>
c000723f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:381
			searched_record.searched_path, (strrchr(searched_record.searched_path, '/') + 1));
		dir_close(searched_record.parent_dir);
c0007242:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0007245:	83 ec 0c             	sub    $0xc,%esp
c0007248:	50                   	push   %eax
c0007249:	e8 6b 0d 00 00       	call   c0007fb9 <dir_close>
c000724e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:382
		return -1;
c0007251:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007256:	e9 9c 00 00 00       	jmp    c00072f7 <sys_open+0x241>
/work/x86_os_my/fs/fs.c:383
	} else if (found && flags & O_CREAT) {	// 若要创建的文件已存在，相同目录下不可以有同名文件，返回-1
c000725b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c000725f:	74 37                	je     c0007298 <sys_open+0x1e2>
/work/x86_os_my/fs/fs.c:383 (discriminator 1)
c0007261:	0f b6 85 d4 fd ff ff 	movzbl -0x22c(%ebp),%eax
c0007268:	83 e0 04             	and    $0x4,%eax
c000726b:	85 c0                	test   %eax,%eax
c000726d:	74 29                	je     c0007298 <sys_open+0x1e2>
/work/x86_os_my/fs/fs.c:384
		printk("%s has already exist!\n", pathname);
c000726f:	83 ec 08             	sub    $0x8,%esp
c0007272:	ff 75 08             	pushl  0x8(%ebp)
c0007275:	68 cc 98 00 c0       	push   $0xc00098cc
c000727a:	e8 1c f4 ff ff       	call   c000669b <printk>
c000727f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:385
		dir_close(searched_record.parent_dir);
c0007282:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0007285:	83 ec 0c             	sub    $0xc,%esp
c0007288:	50                   	push   %eax
c0007289:	e8 2b 0d 00 00       	call   c0007fb9 <dir_close>
c000728e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:386
		return -1;
c0007291:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007296:	eb 5f                	jmp    c00072f7 <sys_open+0x241>
/work/x86_os_my/fs/fs.c:389
	}

	switch (flags & O_CREAT) {	// sys_open("xxx", O_CREAT|O_XXX)
c0007298:	0f b6 85 d4 fd ff ff 	movzbl -0x22c(%ebp),%eax
c000729f:	83 e0 04             	and    $0x4,%eax
c00072a2:	83 f8 04             	cmp    $0x4,%eax
c00072a5:	75 4d                	jne    c00072f4 <sys_open+0x23e>
/work/x86_os_my/fs/fs.c:391
		case O_CREAT:
		printk("creating file\n");
c00072a7:	83 ec 0c             	sub    $0xc,%esp
c00072aa:	68 e3 98 00 c0       	push   $0xc00098e3
c00072af:	e8 e7 f3 ff ff       	call   c000669b <printk>
c00072b4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:393
		// 【search_file情况3】主调函数用到此目录，在该目录下创建文件
		fd = file_create(searched_record.parent_dir, (strrchr(pathname, '/') + 1), flags);
c00072b7:	0f b6 9d d4 fd ff ff 	movzbl -0x22c(%ebp),%ebx
c00072be:	83 ec 08             	sub    $0x8,%esp
c00072c1:	6a 2f                	push   $0x2f
c00072c3:	ff 75 08             	pushl  0x8(%ebp)
c00072c6:	e8 f5 c9 ff ff       	call   c0003cc0 <strrchr>
c00072cb:	83 c4 10             	add    $0x10,%esp
c00072ce:	8d 50 01             	lea    0x1(%eax),%edx
c00072d1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c00072d4:	83 ec 04             	sub    $0x4,%esp
c00072d7:	53                   	push   %ebx
c00072d8:	52                   	push   %edx
c00072d9:	50                   	push   %eax
c00072da:	e8 d0 07 00 00       	call   c0007aaf <file_create>
c00072df:	83 c4 10             	add    $0x10,%esp
c00072e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:394
		dir_close(searched_record.parent_dir);
c00072e5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c00072e8:	83 ec 0c             	sub    $0xc,%esp
c00072eb:	50                   	push   %eax
c00072ec:	e8 c8 0c 00 00       	call   c0007fb9 <dir_close>
c00072f1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:400
		// 其余为打开文件
	}

	/* 此fd是指任务pcb->fd_table数组中的元素下标,
	 * 并不是指全局file_table中的下标 */
	return fd;
c00072f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:401 (discriminator 1)
}
c00072f7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c00072fa:	c9                   	leave  
c00072fb:	c3                   	ret    

c00072fc <filesys_init>:
filesys_init():
/work/x86_os_my/fs/fs.c:413
 * 只支持 partition_format 函数创建的文件系统，其魔数等于 0x19590318
 * 三层循环：遍历通道，遍历通道中的硬盘，遍历硬盘上的分区
 * 全局变量 channel_cnt 通道数，定义在 ide.c
 * 全局变量 channels 结构体，定义在 ide.c
 */
void filesys_init() {
c00072fc:	55                   	push   %ebp
c00072fd:	89 e5                	mov    %esp,%ebp
c00072ff:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/fs/fs.c:414
	uint8_t channel_no = 0, dev_no, part_idx = 0;
c0007302:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
c0007306:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
/work/x86_os_my/fs/fs.c:417

	/* sb_buf用来存储从硬盘上读入的超级块 */
	struct super_block* sb_buf = (struct super_block*)sys_malloc(SECTOR_SIZE);
c000730a:	83 ec 0c             	sub    $0xc,%esp
c000730d:	68 00 02 00 00       	push   $0x200
c0007312:	e8 0c bc ff ff       	call   c0002f23 <sys_malloc>
c0007317:	83 c4 10             	add    $0x10,%esp
c000731a:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:418
	if (sb_buf == NULL) {
c000731d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0007321:	75 1c                	jne    c000733f <filesys_init+0x43>
/work/x86_os_my/fs/fs.c:419
		PANIC("alloc memory failed!");
c0007323:	68 04 96 00 c0       	push   $0xc0009604
c0007328:	68 80 99 00 c0       	push   $0xc0009980
c000732d:	68 a3 01 00 00       	push   $0x1a3
c0007332:	68 19 96 00 c0       	push   $0xc0009619
c0007337:	e8 c6 b2 ff ff       	call   c0002602 <panic_spin>
c000733c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:422
	}

	printk("searching filesystem......\n");
c000733f:	83 ec 0c             	sub    $0xc,%esp
c0007342:	68 f2 98 00 c0       	push   $0xc00098f2
c0007347:	e8 4f f3 ff ff       	call   c000669b <printk>
c000734c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:424
	/* 遍历通道 */
	while (channel_no < channel_cnt) {
c000734f:	e9 1a 01 00 00       	jmp    c000746e <filesys_init+0x172>
/work/x86_os_my/fs/fs.c:425
		dev_no = 0;
c0007354:	c6 45 f6 00          	movb   $0x0,-0xa(%ebp)
/work/x86_os_my/fs/fs.c:427
		/* 遍历通道里的硬盘 */
		while(dev_no < 2) {
c0007358:	e9 fd 00 00 00       	jmp    c000745a <filesys_init+0x15e>
/work/x86_os_my/fs/fs.c:428
			if (dev_no == 0) {		// 跨过裸盘hd60M.img
c000735d:	80 7d f6 00          	cmpb   $0x0,-0xa(%ebp)
c0007361:	75 0f                	jne    c0007372 <filesys_init+0x76>
/work/x86_os_my/fs/fs.c:429
				dev_no++;
c0007363:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0007367:	83 c0 01             	add    $0x1,%eax
c000736a:	88 45 f6             	mov    %al,-0xa(%ebp)
/work/x86_os_my/fs/fs.c:430
				continue;
c000736d:	e9 e8 00 00 00       	jmp    c000745a <filesys_init+0x15e>
/work/x86_os_my/fs/fs.c:432
			}
			struct disk* hd = &channels[channel_no].devices[dev_no];
c0007372:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0007376:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
c000737a:	69 d2 10 03 00 00    	imul   $0x310,%edx,%edx
c0007380:	69 c0 60 06 00 00    	imul   $0x660,%eax,%eax
c0007386:	01 d0                	add    %edx,%eax
c0007388:	83 c0 40             	add    $0x40,%eax
c000738b:	05 80 ce 00 c0       	add    $0xc000ce80,%eax
c0007390:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/fs.c:433
			struct partition* part = hd->prim_parts;	// 主分区数组
c0007393:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0007396:	83 c0 10             	add    $0x10,%eax
c0007399:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:435
			/* 遍历硬盘里的分区 */
			while(part_idx < 12) {						// 4个主分区+8个逻辑
c000739c:	e9 a5 00 00 00       	jmp    c0007446 <filesys_init+0x14a>
/work/x86_os_my/fs/fs.c:436
				if (part_idx == 4) {
c00073a1:	80 7d f5 04          	cmpb   $0x4,-0xb(%ebp)
c00073a5:	75 0b                	jne    c00073b2 <filesys_init+0xb6>
/work/x86_os_my/fs/fs.c:437
					part = hd->logic_parts;				// 逻辑分区数组
c00073a7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00073aa:	05 10 01 00 00       	add    $0x110,%eax
c00073af:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:442
				}

				/* channels数组是全局变量,默认值为0
				 * 固 channels.disk.partition.sec_cnt 在未初始化时，也为0 */
				if (part->sec_cnt != 0) {	// 如果分区存在，以sec_cnt是否为0当判断依据
c00073b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00073b5:	8b 40 04             	mov    0x4(%eax),%eax
c00073b8:	85 c0                	test   %eax,%eax
c00073ba:	74 7c                	je     c0007438 <filesys_init+0x13c>
/work/x86_os_my/fs/fs.c:443
					memset(sb_buf, 0, SECTOR_SIZE);
c00073bc:	83 ec 04             	sub    $0x4,%esp
c00073bf:	68 00 02 00 00       	push   $0x200
c00073c4:	6a 00                	push   $0x0
c00073c6:	ff 75 e8             	pushl  -0x18(%ebp)
c00073c9:	e8 4c c6 ff ff       	call   c0003a1a <memset>
c00073ce:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:446

					/* 读出分区的超级块，根据魔数判断是否存在我们定义的文件系统  */
					ide_read(hd, part->start_lba + 1, sb_buf, 1);
c00073d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00073d4:	8b 00                	mov    (%eax),%eax
c00073d6:	83 c0 01             	add    $0x1,%eax
c00073d9:	6a 01                	push   $0x1
c00073db:	ff 75 e8             	pushl  -0x18(%ebp)
c00073de:	50                   	push   %eax
c00073df:	ff 75 e4             	pushl  -0x1c(%ebp)
c00073e2:	e8 3b e8 ff ff       	call   c0005c22 <ide_read>
c00073e7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:447
					if (sb_buf->magic == 0x19590318) {
c00073ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00073ed:	8b 00                	mov    (%eax),%eax
c00073ef:	3d 18 03 59 19       	cmp    $0x19590318,%eax
c00073f4:	75 19                	jne    c000740f <filesys_init+0x113>
/work/x86_os_my/fs/fs.c:448
						printk("%s has filesystem\n", part->name);
c00073f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00073f9:	83 c0 14             	add    $0x14,%eax
c00073fc:	83 ec 08             	sub    $0x8,%esp
c00073ff:	50                   	push   %eax
c0007400:	68 0e 99 00 c0       	push   $0xc000990e
c0007405:	e8 91 f2 ff ff       	call   c000669b <printk>
c000740a:	83 c4 10             	add    $0x10,%esp
c000740d:	eb 29                	jmp    c0007438 <filesys_init+0x13c>
/work/x86_os_my/fs/fs.c:451
					} else {
						// 不存在我们的文件系统，则进行格式化
						printk("formatting %s`s partition %s......\n", hd->name, part->name);
c000740f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0007412:	8d 50 14             	lea    0x14(%eax),%edx
c0007415:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0007418:	83 ec 04             	sub    $0x4,%esp
c000741b:	52                   	push   %edx
c000741c:	50                   	push   %eax
c000741d:	68 24 99 00 c0       	push   $0xc0009924
c0007422:	e8 74 f2 ff ff       	call   c000669b <printk>
c0007427:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:452
						partition_format(part);
c000742a:	83 ec 0c             	sub    $0xc,%esp
c000742d:	ff 75 f0             	pushl  -0x10(%ebp)
c0007430:	e8 cd f4 ff ff       	call   c0006902 <partition_format>
c0007435:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:455
					}
				}
				part_idx++;
c0007438:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c000743c:	83 c0 01             	add    $0x1,%eax
c000743f:	88 45 f5             	mov    %al,-0xb(%ebp)
/work/x86_os_my/fs/fs.c:456
				part++;
c0007442:	83 45 f0 40          	addl   $0x40,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:435
				continue;
			}
			struct disk* hd = &channels[channel_no].devices[dev_no];
			struct partition* part = hd->prim_parts;	// 主分区数组
			/* 遍历硬盘里的分区 */
			while(part_idx < 12) {						// 4个主分区+8个逻辑
c0007446:	80 7d f5 0b          	cmpb   $0xb,-0xb(%ebp)
c000744a:	0f 86 51 ff ff ff    	jbe    c00073a1 <filesys_init+0xa5>
/work/x86_os_my/fs/fs.c:458
					}
				}
				part_idx++;
				part++;
			}	/* end of 遍历分区 */
			dev_no++;
c0007450:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0007454:	83 c0 01             	add    $0x1,%eax
c0007457:	88 45 f6             	mov    %al,-0xa(%ebp)
/work/x86_os_my/fs/fs.c:427
	printk("searching filesystem......\n");
	/* 遍历通道 */
	while (channel_no < channel_cnt) {
		dev_no = 0;
		/* 遍历通道里的硬盘 */
		while(dev_no < 2) {
c000745a:	80 7d f6 01          	cmpb   $0x1,-0xa(%ebp)
c000745e:	0f 86 f9 fe ff ff    	jbe    c000735d <filesys_init+0x61>
/work/x86_os_my/fs/fs.c:460
				part_idx++;
				part++;
			}	/* end of 遍历分区 */
			dev_no++;
		}	/* end of 遍历硬盘 */
		channel_no++;
c0007464:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0007468:	83 c0 01             	add    $0x1,%eax
c000746b:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:424
		PANIC("alloc memory failed!");
	}

	printk("searching filesystem......\n");
	/* 遍历通道 */
	while (channel_no < channel_cnt) {
c000746e:	0f b6 05 60 ce 00 c0 	movzbl 0xc000ce60,%eax
c0007475:	38 45 f7             	cmp    %al,-0x9(%ebp)
c0007478:	0f 82 d6 fe ff ff    	jb     c0007354 <filesys_init+0x58>
/work/x86_os_my/fs/fs.c:462
			}	/* end of 遍历分区 */
			dev_no++;
		}	/* end of 遍历硬盘 */
		channel_no++;
	}	/* end of 遍历通道 */
	sys_free(sb_buf);
c000747e:	83 ec 0c             	sub    $0xc,%esp
c0007481:	ff 75 e8             	pushl  -0x18(%ebp)
c0007484:	e8 c7 c0 ff ff       	call   c0003550 <sys_free>
c0007489:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:467


	/* 挂载分区 */
	/* 默认操作的分区 */
	char default_part[8] = "sdb1";
c000748c:	c7 45 dc 73 64 62 31 	movl   $0x31626473,-0x24(%ebp)
c0007493:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
/work/x86_os_my/fs/fs.c:478
	参数：
	partition_list 是所有分区的链表
	mount_partition 是挂载分区的函数
	(int)default_part 将数组地址转换成整型作为 mount_partition 的参数
	*/
	list_traversal(&partition_list, mount_partition, (int)default_part);
c000749a:	8d 45 dc             	lea    -0x24(%ebp),%eax
c000749d:	83 ec 04             	sub    $0x4,%esp
c00074a0:	50                   	push   %eax
c00074a1:	68 f7 66 00 c0       	push   $0xc00066f7
c00074a6:	68 40 db 00 c0       	push   $0xc000db40
c00074ab:	e8 6e d1 ff ff       	call   c000461e <list_traversal>
c00074b0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:482


	/* 将当前分区的根目录打开 + 初始化文件表 */
	open_root_dir(cur_part);
c00074b3:	a1 50 db 00 c0       	mov    0xc000db50,%eax
c00074b8:	83 ec 0c             	sub    $0xc,%esp
c00074bb:	50                   	push   %eax
c00074bc:	e8 b0 08 00 00       	call   c0007d71 <open_root_dir>
c00074c1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:483
	uint32_t fd_idx = 0;
c00074c4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:484
	while (fd_idx < MAX_FILE_OPEN) {
c00074cb:	eb 1d                	jmp    c00074ea <filesys_init+0x1ee>
/work/x86_os_my/fs/fs.c:485
		file_table[fd_idx++].fd_inode = NULL;
c00074cd:	8b 55 ec             	mov    -0x14(%ebp),%edx
c00074d0:	8d 42 01             	lea    0x1(%edx),%eax
c00074d3:	89 45 ec             	mov    %eax,-0x14(%ebp)
c00074d6:	89 d0                	mov    %edx,%eax
c00074d8:	01 c0                	add    %eax,%eax
c00074da:	01 d0                	add    %edx,%eax
c00074dc:	c1 e0 02             	shl    $0x2,%eax
c00074df:	05 68 db 00 c0       	add    $0xc000db68,%eax
c00074e4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/fs/fs.c:484


	/* 将当前分区的根目录打开 + 初始化文件表 */
	open_root_dir(cur_part);
	uint32_t fd_idx = 0;
	while (fd_idx < MAX_FILE_OPEN) {
c00074ea:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
c00074ee:	76 dd                	jbe    c00074cd <filesys_init+0x1d1>
/work/x86_os_my/fs/fs.c:487
		file_table[fd_idx++].fd_inode = NULL;
	}
}
c00074f0:	90                   	nop
c00074f1:	c9                   	leave  
c00074f2:	c3                   	ret    

c00074f3 <inode_locate>:
inode_locate():
/work/x86_os_my/fs/inode.c:23
};

/* 获取inode所在的扇区和扇区内的偏移量
 * out: inode_pos
 */
static void inode_locate(struct partition* part, uint32_t inode_no, struct inode_position* inode_pos) {
c00074f3:	55                   	push   %ebp
c00074f4:	89 e5                	mov    %esp,%ebp
c00074f6:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/fs/inode.c:25
	/* inode_table在硬盘上是连续的 */
	ASSERT(inode_no < 4096);
c00074f9:	81 7d 0c ff 0f 00 00 	cmpl   $0xfff,0xc(%ebp)
c0007500:	76 19                	jbe    c000751b <inode_locate+0x28>
/work/x86_os_my/fs/inode.c:25 (discriminator 1)
c0007502:	68 90 99 00 c0       	push   $0xc0009990
c0007507:	68 e4 99 00 c0       	push   $0xc00099e4
c000750c:	6a 19                	push   $0x19
c000750e:	68 a0 99 00 c0       	push   $0xc00099a0
c0007513:	e8 ea b0 ff ff       	call   c0002602 <panic_spin>
c0007518:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:26
	uint32_t inode_table_lba = part->sb->inode_table_lba;
c000751b:	8b 45 08             	mov    0x8(%ebp),%eax
c000751e:	8b 40 1c             	mov    0x1c(%eax),%eax
c0007521:	8b 40 20             	mov    0x20(%eax),%eax
c0007524:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/inode.c:28

	uint32_t inode_size = sizeof(struct inode);
c0007527:	c7 45 f0 4c 00 00 00 	movl   $0x4c,-0x10(%ebp)
/work/x86_os_my/fs/inode.c:29
	uint32_t off_size = inode_no * inode_size;	// 第inode_no号inode相对于inode_table_lba的字节偏移量
c000752e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007531:	0f af 45 f0          	imul   -0x10(%ebp),%eax
c0007535:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/inode.c:30
	uint32_t off_sec  = off_size / 512;			// 第inode_no号inode相对于inode_table_lba的扇区偏移量
c0007538:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000753b:	c1 e8 09             	shr    $0x9,%eax
c000753e:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/inode.c:31
	uint32_t off_size_in_sec = off_size % 512;	// 待查找的inode所在扇区中的起始地址
c0007541:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0007544:	25 ff 01 00 00       	and    $0x1ff,%eax
c0007549:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/inode.c:34

	/* 判断此inode是否跨越2个扇区 */
	uint32_t left_in_sec = 512 - off_size_in_sec;
c000754c:	b8 00 02 00 00       	mov    $0x200,%eax
c0007551:	2b 45 e4             	sub    -0x1c(%ebp),%eax
c0007554:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/inode.c:36
	// 若扇区内剩下的空间不足以容纳一个inode,必然是inode跨越了2个扇区
	if (left_in_sec < inode_size ) {
c0007557:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000755a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c000755d:	73 0b                	jae    c000756a <inode_locate+0x77>
/work/x86_os_my/fs/inode.c:37
		inode_pos->two_sec = true;	//跨越了
c000755f:	8b 45 10             	mov    0x10(%ebp),%eax
c0007562:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0007568:	eb 09                	jmp    c0007573 <inode_locate+0x80>
/work/x86_os_my/fs/inode.c:39
	} else {
		inode_pos->two_sec = false;
c000756a:	8b 45 10             	mov    0x10(%ebp),%eax
c000756d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/fs/inode.c:41
	}
	inode_pos->sec_lba = inode_table_lba + off_sec;
c0007573:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0007576:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0007579:	01 c2                	add    %eax,%edx
c000757b:	8b 45 10             	mov    0x10(%ebp),%eax
c000757e:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/inode.c:42
	inode_pos->off_size = off_size_in_sec;
c0007581:	8b 45 10             	mov    0x10(%ebp),%eax
c0007584:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0007587:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/fs/inode.c:43
}
c000758a:	90                   	nop
c000758b:	c9                   	leave  
c000758c:	c3                   	ret    

c000758d <inode_sync>:
inode_sync():
/work/x86_os_my/fs/inode.c:51
io_buf是用于硬盘io的缓冲区，它由主调函数提供！
原因是
一般情况下把内存中的数据同步到硬盘都是最后的操作，其前已经做了大量工作，
若到这最后一步时才申请内存失败，前面的所有操作都白费了，还要回滚到之前的旧状态，代价太大
*/
void inode_sync(struct partition* part, struct inode* inode, void* io_buf) {
c000758d:	55                   	push   %ebp
c000758e:	89 e5                	mov    %esp,%ebp
c0007590:	83 ec 68             	sub    $0x68,%esp
/work/x86_os_my/fs/inode.c:52
	uint8_t inode_no = inode->i_no;
c0007593:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007596:	8b 00                	mov    (%eax),%eax
c0007598:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/inode.c:54
	struct inode_position inode_pos;
	inode_locate(part, inode_no, &inode_pos);	// inode位置信息会存入inode_pos
c000759b:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000759f:	83 ec 04             	sub    $0x4,%esp
c00075a2:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c00075a5:	52                   	push   %edx
c00075a6:	50                   	push   %eax
c00075a7:	ff 75 08             	pushl  0x8(%ebp)
c00075aa:	e8 44 ff ff ff       	call   c00074f3 <inode_locate>
c00075af:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:55
	ASSERT(inode_pos.sec_lba <= (part->start_lba + part->sec_cnt));
c00075b2:	8b 55 e8             	mov    -0x18(%ebp),%edx
c00075b5:	8b 45 08             	mov    0x8(%ebp),%eax
c00075b8:	8b 08                	mov    (%eax),%ecx
c00075ba:	8b 45 08             	mov    0x8(%ebp),%eax
c00075bd:	8b 40 04             	mov    0x4(%eax),%eax
c00075c0:	01 c8                	add    %ecx,%eax
c00075c2:	39 c2                	cmp    %eax,%edx
c00075c4:	76 19                	jbe    c00075df <inode_sync+0x52>
/work/x86_os_my/fs/inode.c:55 (discriminator 1)
c00075c6:	68 ac 99 00 c0       	push   $0xc00099ac
c00075cb:	68 f4 99 00 c0       	push   $0xc00099f4
c00075d0:	6a 37                	push   $0x37
c00075d2:	68 a0 99 00 c0       	push   $0xc00099a0
c00075d7:	e8 26 b0 ff ff       	call   c0002602 <panic_spin>
c00075dc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:62
	/* 硬盘中的inode中的成员inode_tag和i_open_cnts是不需要的，
	* 它们只在内存中有效，记录链表位置和被多少进程共享，
	* 将inode同步到硬盘时,清掉这三项即可。
	*/
	struct inode pure_inode;
	memcpy(&pure_inode, inode, sizeof(struct inode));
c00075df:	83 ec 04             	sub    $0x4,%esp
c00075e2:	6a 4c                	push   $0x4c
c00075e4:	ff 75 0c             	pushl  0xc(%ebp)
c00075e7:	8d 45 98             	lea    -0x68(%ebp),%eax
c00075ea:	50                   	push   %eax
c00075eb:	e8 7c c4 ff ff       	call   c0003a6c <memcpy>
c00075f0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:63
	pure_inode.i_open_cnts = 0;
c00075f3:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
/work/x86_os_my/fs/inode.c:64
	pure_inode.write_deny = false;	// 置为false,以保证在硬盘中读出时为可写
c00075fa:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
/work/x86_os_my/fs/inode.c:65
	pure_inode.inode_tag.prev = pure_inode.inode_tag.next = NULL;
c0007601:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c0007608:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000760b:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/inode.c:67

	char* inode_buf = (char*)io_buf;
c000760e:	8b 45 10             	mov    0x10(%ebp),%eax
c0007611:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/inode.c:69
	// 若inode结构，跨了两个扇区,就要读出两个扇区再写入两个扇区
	if (inode_pos.two_sec) {
c0007614:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0007617:	85 c0                	test   %eax,%eax
c0007619:	74 4c                	je     c0007667 <inode_sync+0xda>
/work/x86_os_my/fs/inode.c:72
		/* 读写硬盘是以扇区为单位的
		所以需要将待写入的inode结构拼入到这2个扇区的中间位置 */
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 2);	// inode_table在格式化时，写入硬盘是连续写入的，所以读入2块扇区
c000761b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c000761e:	8b 45 08             	mov    0x8(%ebp),%eax
c0007621:	8b 40 08             	mov    0x8(%eax),%eax
c0007624:	6a 02                	push   $0x2
c0007626:	ff 75 f0             	pushl  -0x10(%ebp)
c0007629:	52                   	push   %edx
c000762a:	50                   	push   %eax
c000762b:	e8 f2 e5 ff ff       	call   c0005c22 <ide_read>
c0007630:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:73
		memcpy((inode_buf + inode_pos.off_size), &pure_inode, sizeof(struct inode));	// inode_buf+inode在扇区中的偏移
c0007633:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0007636:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0007639:	01 c2                	add    %eax,%edx
c000763b:	83 ec 04             	sub    $0x4,%esp
c000763e:	6a 4c                	push   $0x4c
c0007640:	8d 45 98             	lea    -0x68(%ebp),%eax
c0007643:	50                   	push   %eax
c0007644:	52                   	push   %edx
c0007645:	e8 22 c4 ff ff       	call   c0003a6c <memcpy>
c000764a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:74
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 2);
c000764d:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0007650:	8b 45 08             	mov    0x8(%ebp),%eax
c0007653:	8b 40 08             	mov    0x8(%eax),%eax
c0007656:	6a 02                	push   $0x2
c0007658:	ff 75 f0             	pushl  -0x10(%ebp)
c000765b:	52                   	push   %edx
c000765c:	50                   	push   %eax
c000765d:	e8 34 e7 ff ff       	call   c0005d96 <ide_write>
c0007662:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:81
		// 若inode结构，只在一个扇区中
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
		memcpy((inode_buf + inode_pos.off_size), &pure_inode, sizeof(struct inode));	// inode_buf+inode在扇区中的偏移
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
	}
}
c0007665:	eb 4a                	jmp    c00076b1 <inode_sync+0x124>
/work/x86_os_my/fs/inode.c:77
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 2);	// inode_table在格式化时，写入硬盘是连续写入的，所以读入2块扇区
		memcpy((inode_buf + inode_pos.off_size), &pure_inode, sizeof(struct inode));	// inode_buf+inode在扇区中的偏移
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 2);
	} else {
		// 若inode结构，只在一个扇区中
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
c0007667:	8b 55 e8             	mov    -0x18(%ebp),%edx
c000766a:	8b 45 08             	mov    0x8(%ebp),%eax
c000766d:	8b 40 08             	mov    0x8(%eax),%eax
c0007670:	6a 01                	push   $0x1
c0007672:	ff 75 f0             	pushl  -0x10(%ebp)
c0007675:	52                   	push   %edx
c0007676:	50                   	push   %eax
c0007677:	e8 a6 e5 ff ff       	call   c0005c22 <ide_read>
c000767c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:78
		memcpy((inode_buf + inode_pos.off_size), &pure_inode, sizeof(struct inode));	// inode_buf+inode在扇区中的偏移
c000767f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0007682:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0007685:	01 c2                	add    %eax,%edx
c0007687:	83 ec 04             	sub    $0x4,%esp
c000768a:	6a 4c                	push   $0x4c
c000768c:	8d 45 98             	lea    -0x68(%ebp),%eax
c000768f:	50                   	push   %eax
c0007690:	52                   	push   %edx
c0007691:	e8 d6 c3 ff ff       	call   c0003a6c <memcpy>
c0007696:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:79
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
c0007699:	8b 55 e8             	mov    -0x18(%ebp),%edx
c000769c:	8b 45 08             	mov    0x8(%ebp),%eax
c000769f:	8b 40 08             	mov    0x8(%eax),%eax
c00076a2:	6a 01                	push   $0x1
c00076a4:	ff 75 f0             	pushl  -0x10(%ebp)
c00076a7:	52                   	push   %edx
c00076a8:	50                   	push   %eax
c00076a9:	e8 e8 e6 ff ff       	call   c0005d96 <ide_write>
c00076ae:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:81
	}
}
c00076b1:	90                   	nop
c00076b2:	c9                   	leave  
c00076b3:	c3                   	ret    

c00076b4 <inode_open>:
inode_open():
/work/x86_os_my/fs/inode.c:84

/* 根据i结点号，获取到相应的inode结构，插入到inode缓存队列，并返回它 */
struct inode* inode_open(struct partition* part, uint32_t inode_no) {
c00076b4:	55                   	push   %ebp
c00076b5:	89 e5                	mov    %esp,%ebp
c00076b7:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/fs/inode.c:86
	/* 1.先在已打开inode链表中找inode，此链表作用是提速 */
	struct list_elem* elem = part->open_inodes.head.next;
c00076ba:	8b 45 08             	mov    0x8(%ebp),%eax
c00076bd:	8b 40 34             	mov    0x34(%eax),%eax
c00076c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/inode.c:88
	struct inode* inode_found;
	while (elem != &part->open_inodes.tail) {
c00076c3:	eb 33                	jmp    c00076f8 <inode_open+0x44>
/work/x86_os_my/fs/inode.c:89
		inode_found = elem2entry(struct inode, inode_tag, elem);
c00076c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00076c8:	83 e8 44             	sub    $0x44,%eax
c00076cb:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/inode.c:90
		if (inode_found->i_no == inode_no) {
c00076ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00076d1:	8b 00                	mov    (%eax),%eax
c00076d3:	3b 45 0c             	cmp    0xc(%ebp),%eax
c00076d6:	75 17                	jne    c00076ef <inode_open+0x3b>
/work/x86_os_my/fs/inode.c:91
			inode_found->i_open_cnts++;
c00076d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00076db:	8b 40 08             	mov    0x8(%eax),%eax
c00076de:	8d 50 01             	lea    0x1(%eax),%edx
c00076e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00076e4:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/fs/inode.c:92
			return inode_found;
c00076e7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00076ea:	e9 09 01 00 00       	jmp    c00077f8 <inode_open+0x144>
/work/x86_os_my/fs/inode.c:94
		}
		elem = elem->next;
c00076ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00076f2:	8b 40 04             	mov    0x4(%eax),%eax
c00076f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/inode.c:88
/* 根据i结点号，获取到相应的inode结构，插入到inode缓存队列，并返回它 */
struct inode* inode_open(struct partition* part, uint32_t inode_no) {
	/* 1.先在已打开inode链表中找inode，此链表作用是提速 */
	struct list_elem* elem = part->open_inodes.head.next;
	struct inode* inode_found;
	while (elem != &part->open_inodes.tail) {
c00076f8:	8b 45 08             	mov    0x8(%ebp),%eax
c00076fb:	83 c0 38             	add    $0x38,%eax
c00076fe:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0007701:	75 c2                	jne    c00076c5 <inode_open+0x11>
/work/x86_os_my/fs/inode.c:100
	}

	
	/* 2.open_inodes链表中找不到，从硬盘上读入此inode并加入到inode缓存链表 */
	struct inode_position inode_pos;	// 记录inode位置的结构
	inode_locate(part, inode_no, &inode_pos);
c0007703:	83 ec 04             	sub    $0x4,%esp
c0007706:	8d 45 d8             	lea    -0x28(%ebp),%eax
c0007709:	50                   	push   %eax
c000770a:	ff 75 0c             	pushl  0xc(%ebp)
c000770d:	ff 75 08             	pushl  0x8(%ebp)
c0007710:	e8 de fd ff ff       	call   c00074f3 <inode_locate>
c0007715:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:104

	/* 为使通过sys_malloc创建的新inode被所有任务共享，需要将inode置于内核空间
	故临时将cur_pbc->pgdir置为NULL，sys_malloc就会以为是从内核空间分配 */
	struct task_struct* cur = running_thread();
c0007718:	e8 e4 c6 ff ff       	call   c0003e01 <running_thread>
c000771d:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/inode.c:105
	uint32_t* cur_pagedir_bak = cur->pgdir;
c0007720:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0007723:	8b 40 54             	mov    0x54(%eax),%eax
c0007726:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/inode.c:106
	cur->pgdir = NULL;
c0007729:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000772c:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
/work/x86_os_my/fs/inode.c:107
	inode_found = (struct inode*)sys_malloc(sizeof(struct inode));
c0007733:	83 ec 0c             	sub    $0xc,%esp
c0007736:	6a 4c                	push   $0x4c
c0007738:	e8 e6 b7 ff ff       	call   c0002f23 <sys_malloc>
c000773d:	83 c4 10             	add    $0x10,%esp
c0007740:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/inode.c:108
	cur->pgdir = cur_pagedir_bak;	// 恢复pgdir
c0007743:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0007746:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0007749:	89 50 54             	mov    %edx,0x54(%eax)
/work/x86_os_my/fs/inode.c:111

	char* inode_buf;
	if (inode_pos.two_sec) {	// inode结构跨扇区了
c000774c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000774f:	85 c0                	test   %eax,%eax
c0007751:	74 2d                	je     c0007780 <inode_open+0xcc>
/work/x86_os_my/fs/inode.c:112
		inode_buf = (char*)sys_malloc(1024);
c0007753:	83 ec 0c             	sub    $0xc,%esp
c0007756:	68 00 04 00 00       	push   $0x400
c000775b:	e8 c3 b7 ff ff       	call   c0002f23 <sys_malloc>
c0007760:	83 c4 10             	add    $0x10,%esp
c0007763:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/inode.c:114
		// inode_table在格式化时，写入硬盘是连续写入的，所以可以连续读入2块扇区
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 2);
c0007766:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0007769:	8b 45 08             	mov    0x8(%ebp),%eax
c000776c:	8b 40 08             	mov    0x8(%eax),%eax
c000776f:	6a 02                	push   $0x2
c0007771:	ff 75 f0             	pushl  -0x10(%ebp)
c0007774:	52                   	push   %edx
c0007775:	50                   	push   %eax
c0007776:	e8 a7 e4 ff ff       	call   c0005c22 <ide_read>
c000777b:	83 c4 10             	add    $0x10,%esp
c000777e:	eb 2b                	jmp    c00077ab <inode_open+0xf7>
/work/x86_os_my/fs/inode.c:116
	} else {
		inode_buf = (char*)sys_malloc(512);
c0007780:	83 ec 0c             	sub    $0xc,%esp
c0007783:	68 00 02 00 00       	push   $0x200
c0007788:	e8 96 b7 ff ff       	call   c0002f23 <sys_malloc>
c000778d:	83 c4 10             	add    $0x10,%esp
c0007790:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/inode.c:117
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
c0007793:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0007796:	8b 45 08             	mov    0x8(%ebp),%eax
c0007799:	8b 40 08             	mov    0x8(%eax),%eax
c000779c:	6a 01                	push   $0x1
c000779e:	ff 75 f0             	pushl  -0x10(%ebp)
c00077a1:	52                   	push   %edx
c00077a2:	50                   	push   %eax
c00077a3:	e8 7a e4 ff ff       	call   c0005c22 <ide_read>
c00077a8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:119
	}
	memcpy(inode_found, inode_buf + inode_pos.off_size, sizeof(struct inode));	// inode_buf+inode在扇区中的偏移
c00077ab:	8b 55 e0             	mov    -0x20(%ebp),%edx
c00077ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00077b1:	01 d0                	add    %edx,%eax
c00077b3:	83 ec 04             	sub    $0x4,%esp
c00077b6:	6a 4c                	push   $0x4c
c00077b8:	50                   	push   %eax
c00077b9:	ff 75 ec             	pushl  -0x14(%ebp)
c00077bc:	e8 ab c2 ff ff       	call   c0003a6c <memcpy>
c00077c1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:123

	
	/* 3.马上要用这个inode，固插入到队首 */
	list_push(&part->open_inodes, &inode_found->inode_tag);
c00077c4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00077c7:	8d 50 44             	lea    0x44(%eax),%edx
c00077ca:	8b 45 08             	mov    0x8(%ebp),%eax
c00077cd:	83 c0 30             	add    $0x30,%eax
c00077d0:	83 ec 08             	sub    $0x8,%esp
c00077d3:	52                   	push   %edx
c00077d4:	50                   	push   %eax
c00077d5:	e8 71 cd ff ff       	call   c000454b <list_push>
c00077da:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:124
	inode_found->i_open_cnts = 1;
c00077dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00077e0:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/fs/inode.c:126

	sys_free(inode_buf);
c00077e7:	83 ec 0c             	sub    $0xc,%esp
c00077ea:	ff 75 f0             	pushl  -0x10(%ebp)
c00077ed:	e8 5e bd ff ff       	call   c0003550 <sys_free>
c00077f2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:127
	return inode_found;
c00077f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
/work/x86_os_my/fs/inode.c:128 (discriminator 1)
}
c00077f8:	c9                   	leave  
c00077f9:	c3                   	ret    

c00077fa <inode_close>:
inode_close():
/work/x86_os_my/fs/inode.c:132

/* 关闭inode或减少inode的打开数 */
//1.从inode队列踢掉 2.释放内核内存池中的这个inode内存
void inode_close(struct inode* inode) {
c00077fa:	55                   	push   %ebp
c00077fb:	89 e5                	mov    %esp,%ebp
c00077fd:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/inode.c:134
	/* 若没有进程再打开此文件,将此inode去掉并释放空间 */
	enum intr_status old_status = intr_disable();
c0007800:	e8 56 a4 ff ff       	call   c0001c5b <intr_disable>
c0007805:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/inode.c:135
	if (--inode->i_open_cnts == 0) {
c0007808:	8b 45 08             	mov    0x8(%ebp),%eax
c000780b:	8b 40 08             	mov    0x8(%eax),%eax
c000780e:	8d 50 ff             	lea    -0x1(%eax),%edx
c0007811:	8b 45 08             	mov    0x8(%ebp),%eax
c0007814:	89 50 08             	mov    %edx,0x8(%eax)
c0007817:	8b 45 08             	mov    0x8(%ebp),%eax
c000781a:	8b 40 08             	mov    0x8(%eax),%eax
c000781d:	85 c0                	test   %eax,%eax
c000781f:	75 44                	jne    c0007865 <inode_close+0x6b>
/work/x86_os_my/fs/inode.c:136
		list_remove(&inode->inode_tag);
c0007821:	8b 45 08             	mov    0x8(%ebp),%eax
c0007824:	83 c0 44             	add    $0x44,%eax
c0007827:	83 ec 0c             	sub    $0xc,%esp
c000782a:	50                   	push   %eax
c000782b:	e8 57 cd ff ff       	call   c0004587 <list_remove>
c0007830:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:139
		/* inode结构在内核空间，释放时要释放到内核内存池。
		pgdir为NULL时，sys_free认为是内核空间 */
		struct task_struct* cur = running_thread();
c0007833:	e8 c9 c5 ff ff       	call   c0003e01 <running_thread>
c0007838:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/inode.c:140
		uint32_t* cur_pagedir_bak = cur->pgdir;	// 进程自己页目录表的虚拟地址，加载到cr3时需转成物理地址
c000783b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000783e:	8b 40 54             	mov    0x54(%eax),%eax
c0007841:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/inode.c:141
		cur->pgdir = NULL;
c0007844:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0007847:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
/work/x86_os_my/fs/inode.c:142
		sys_free(inode);
c000784e:	83 ec 0c             	sub    $0xc,%esp
c0007851:	ff 75 08             	pushl  0x8(%ebp)
c0007854:	e8 f7 bc ff ff       	call   c0003550 <sys_free>
c0007859:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:143
		cur->pgdir = cur_pagedir_bak;
c000785c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000785f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0007862:	89 50 54             	mov    %edx,0x54(%eax)
/work/x86_os_my/fs/inode.c:145
	}
	intr_set_status(old_status);
c0007865:	83 ec 0c             	sub    $0xc,%esp
c0007868:	ff 75 f4             	pushl  -0xc(%ebp)
c000786b:	e8 14 a4 ff ff       	call   c0001c84 <intr_set_status>
c0007870:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:146
}
c0007873:	90                   	nop
c0007874:	c9                   	leave  
c0007875:	c3                   	ret    

c0007876 <inode_init>:
inode_init():
/work/x86_os_my/fs/inode.c:149

/* 初始化一个inode结构，inode号是inode_no */
void inode_init(uint32_t inode_no, struct inode* new_inode) {
c0007876:	55                   	push   %ebp
c0007877:	89 e5                	mov    %esp,%ebp
c0007879:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/fs/inode.c:150
	new_inode->i_no = inode_no;
c000787c:	8b 45 0c             	mov    0xc(%ebp),%eax
c000787f:	8b 55 08             	mov    0x8(%ebp),%edx
c0007882:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/fs/inode.c:151
	new_inode->i_size = 0;
c0007884:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007887:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
/work/x86_os_my/fs/inode.c:152
	new_inode->i_open_cnts = 0;
c000788e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007891:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
/work/x86_os_my/fs/inode.c:153
	new_inode->write_deny = false;
c0007898:	8b 45 0c             	mov    0xc(%ebp),%eax
c000789b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
/work/x86_os_my/fs/inode.c:156

	/* 初始化块索引数组i_sector */
	uint8_t sec_idx = 0;
c00078a2:	c6 45 ff 00          	movb   $0x0,-0x1(%ebp)
/work/x86_os_my/fs/inode.c:157
	while (sec_idx < 13) {
c00078a6:	eb 1b                	jmp    c00078c3 <inode_init+0x4d>
/work/x86_os_my/fs/inode.c:159
		/* i_sectors[12]为一级间接块地址 */
		new_inode->i_sectors[sec_idx] = 0;
c00078a8:	0f b6 55 ff          	movzbl -0x1(%ebp),%edx
c00078ac:	8b 45 0c             	mov    0xc(%ebp),%eax
c00078af:	83 c2 04             	add    $0x4,%edx
c00078b2:	c7 04 90 00 00 00 00 	movl   $0x0,(%eax,%edx,4)
/work/x86_os_my/fs/inode.c:160
		sec_idx++;
c00078b9:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
c00078bd:	83 c0 01             	add    $0x1,%eax
c00078c0:	88 45 ff             	mov    %al,-0x1(%ebp)
/work/x86_os_my/fs/inode.c:157
	new_inode->i_open_cnts = 0;
	new_inode->write_deny = false;

	/* 初始化块索引数组i_sector */
	uint8_t sec_idx = 0;
	while (sec_idx < 13) {
c00078c3:	80 7d ff 0c          	cmpb   $0xc,-0x1(%ebp)
c00078c7:	76 df                	jbe    c00078a8 <inode_init+0x32>
/work/x86_os_my/fs/inode.c:165
		sec_idx++;
	}
	/*为什么不提前分配inode管理的数据块（对我们来说是块=扇区）
	1.不知道文件大小，因此不知道分配多少个扇区合适
	2.文件创建后未必马上会写数据*/
}
c00078c9:	90                   	nop
c00078ca:	c9                   	leave  
c00078cb:	c3                   	ret    

c00078cc <get_free_slot_in_global>:
get_free_slot_in_global():
/work/x86_os_my/fs/file.c:19

/* 文件表 */
struct file file_table[MAX_FILE_OPEN];

/* 从文件表 file_table 中获取一个空闲位,成功返回下标,失败返回-1 */
int32_t get_free_slot_in_global(void) {
c00078cc:	55                   	push   %ebp
c00078cd:	89 e5                	mov    %esp,%ebp
c00078cf:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/file.c:20
	uint32_t fd_idx = 3;
c00078d2:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
/work/x86_os_my/fs/file.c:21
	while (fd_idx < MAX_FILE_OPEN) {
c00078d9:	eb 1b                	jmp    c00078f6 <get_free_slot_in_global+0x2a>
/work/x86_os_my/fs/file.c:22
		if (file_table[fd_idx].fd_inode == NULL) {
c00078db:	8b 55 f4             	mov    -0xc(%ebp),%edx
c00078de:	89 d0                	mov    %edx,%eax
c00078e0:	01 c0                	add    %eax,%eax
c00078e2:	01 d0                	add    %edx,%eax
c00078e4:	c1 e0 02             	shl    $0x2,%eax
c00078e7:	05 68 db 00 c0       	add    $0xc000db68,%eax
c00078ec:	8b 00                	mov    (%eax),%eax
c00078ee:	85 c0                	test   %eax,%eax
c00078f0:	74 0c                	je     c00078fe <get_free_slot_in_global+0x32>
/work/x86_os_my/fs/file.c:25
			break;
		}
		fd_idx++;
c00078f2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/file.c:21
struct file file_table[MAX_FILE_OPEN];

/* 从文件表 file_table 中获取一个空闲位,成功返回下标,失败返回-1 */
int32_t get_free_slot_in_global(void) {
	uint32_t fd_idx = 3;
	while (fd_idx < MAX_FILE_OPEN) {
c00078f6:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c00078fa:	76 df                	jbe    c00078db <get_free_slot_in_global+0xf>
c00078fc:	eb 01                	jmp    c00078ff <get_free_slot_in_global+0x33>
/work/x86_os_my/fs/file.c:23
		if (file_table[fd_idx].fd_inode == NULL) {
			break;
c00078fe:	90                   	nop
/work/x86_os_my/fs/file.c:27
		}
		fd_idx++;
	}
	if (fd_idx == MAX_FILE_OPEN) {
c00078ff:	83 7d f4 20          	cmpl   $0x20,-0xc(%ebp)
c0007903:	75 17                	jne    c000791c <get_free_slot_in_global+0x50>
/work/x86_os_my/fs/file.c:28
		printk("exceed max open files\n");
c0007905:	83 ec 0c             	sub    $0xc,%esp
c0007908:	68 00 9a 00 c0       	push   $0xc0009a00
c000790d:	e8 89 ed ff ff       	call   c000669b <printk>
c0007912:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:29
		return -1;
c0007915:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000791a:	eb 03                	jmp    c000791f <get_free_slot_in_global+0x53>
/work/x86_os_my/fs/file.c:31
	}
	return fd_idx;
c000791c:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/file.c:32
}
c000791f:	c9                   	leave  
c0007920:	c3                   	ret    

c0007921 <pcb_fd_install>:
pcb_fd_install():
/work/x86_os_my/fs/file.c:36

/* 将 file_table 的下标，安装到，线程PCB中文件描述符数组 fd_table
 * 成功返回 fd_table 的下标（即文件描述符）,失败返回-1 */
int32_t pcb_fd_install(int32_t globa_fd_idx) {
c0007921:	55                   	push   %ebp
c0007922:	89 e5                	mov    %esp,%ebp
c0007924:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/file.c:37
	struct task_struct* cur = running_thread();
c0007927:	e8 d5 c4 ff ff       	call   c0003e01 <running_thread>
c000792c:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:38
	uint8_t local_fd_idx = 3;	// 跨过stdin,stdout,stderr
c000792f:	c6 45 f7 03          	movb   $0x3,-0x9(%ebp)
/work/x86_os_my/fs/file.c:39
	while (local_fd_idx < MAX_FILES_OPEN_PER_PROC) {
c0007933:	eb 30                	jmp    c0007965 <pcb_fd_install+0x44>
/work/x86_os_my/fs/file.c:40
		if (cur->fd_table[local_fd_idx] == -1) {	// -1表示free_slot,可用
c0007935:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c0007939:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000793c:	83 c2 08             	add    $0x8,%edx
c000793f:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
c0007943:	83 f8 ff             	cmp    $0xffffffff,%eax
c0007946:	75 13                	jne    c000795b <pcb_fd_install+0x3a>
/work/x86_os_my/fs/file.c:41
			cur->fd_table[local_fd_idx] = globa_fd_idx;
c0007948:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c000794c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000794f:	8d 4a 08             	lea    0x8(%edx),%ecx
c0007952:	8b 55 08             	mov    0x8(%ebp),%edx
c0007955:	89 54 88 04          	mov    %edx,0x4(%eax,%ecx,4)
/work/x86_os_my/fs/file.c:42
			break;
c0007959:	eb 10                	jmp    c000796b <pcb_fd_install+0x4a>
/work/x86_os_my/fs/file.c:44
		}
		local_fd_idx++;
c000795b:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000795f:	83 c0 01             	add    $0x1,%eax
c0007962:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/file.c:39
/* 将 file_table 的下标，安装到，线程PCB中文件描述符数组 fd_table
 * 成功返回 fd_table 的下标（即文件描述符）,失败返回-1 */
int32_t pcb_fd_install(int32_t globa_fd_idx) {
	struct task_struct* cur = running_thread();
	uint8_t local_fd_idx = 3;	// 跨过stdin,stdout,stderr
	while (local_fd_idx < MAX_FILES_OPEN_PER_PROC) {
c0007965:	80 7d f7 07          	cmpb   $0x7,-0x9(%ebp)
c0007969:	76 ca                	jbe    c0007935 <pcb_fd_install+0x14>
/work/x86_os_my/fs/file.c:46
			cur->fd_table[local_fd_idx] = globa_fd_idx;
			break;
		}
		local_fd_idx++;
	}
	if (local_fd_idx == MAX_FILES_OPEN_PER_PROC) {
c000796b:	80 7d f7 08          	cmpb   $0x8,-0x9(%ebp)
c000796f:	75 17                	jne    c0007988 <pcb_fd_install+0x67>
/work/x86_os_my/fs/file.c:47
		printk("exceed max open files_per_proc\n");
c0007971:	83 ec 0c             	sub    $0xc,%esp
c0007974:	68 18 9a 00 c0       	push   $0xc0009a18
c0007979:	e8 1d ed ff ff       	call   c000669b <printk>
c000797e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:48
		return -1;
c0007981:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007986:	eb 04                	jmp    c000798c <pcb_fd_install+0x6b>
/work/x86_os_my/fs/file.c:50
	}
	return local_fd_idx;
c0007988:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
/work/x86_os_my/fs/file.c:51
}
c000798c:	c9                   	leave  
c000798d:	c3                   	ret    

c000798e <inode_bitmap_alloc>:
inode_bitmap_alloc():
/work/x86_os_my/fs/file.c:54

/* 从分区的inode位图中，分配一个i结点，返回"inode号" */
int32_t inode_bitmap_alloc(struct partition* part) {
c000798e:	55                   	push   %ebp
c000798f:	89 e5                	mov    %esp,%ebp
c0007991:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/file.c:55
	int32_t bit_idx = bitmap_scan(&part->inode_bitmap, 1);
c0007994:	8b 45 08             	mov    0x8(%ebp),%eax
c0007997:	83 c0 28             	add    $0x28,%eax
c000799a:	83 ec 08             	sub    $0x8,%esp
c000799d:	6a 01                	push   $0x1
c000799f:	50                   	push   %eax
c00079a0:	e8 96 ad ff ff       	call   c000273b <bitmap_scan>
c00079a5:	83 c4 10             	add    $0x10,%esp
c00079a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:56
	if (bit_idx == -1) {
c00079ab:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c00079af:	75 07                	jne    c00079b8 <inode_bitmap_alloc+0x2a>
/work/x86_os_my/fs/file.c:57
		return -1;
c00079b1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00079b6:	eb 1b                	jmp    c00079d3 <inode_bitmap_alloc+0x45>
/work/x86_os_my/fs/file.c:59
	}
	bitmap_set(&part->inode_bitmap, bit_idx, 1);
c00079b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00079bb:	8b 55 08             	mov    0x8(%ebp),%edx
c00079be:	83 c2 28             	add    $0x28,%edx
c00079c1:	83 ec 04             	sub    $0x4,%esp
c00079c4:	6a 01                	push   $0x1
c00079c6:	50                   	push   %eax
c00079c7:	52                   	push   %edx
c00079c8:	e8 a3 ae ff ff       	call   c0002870 <bitmap_set>
c00079cd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:60
	return bit_idx;
c00079d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/file.c:61
}
c00079d3:	c9                   	leave  
c00079d4:	c3                   	ret    

c00079d5 <block_bitmap_alloc>:
block_bitmap_alloc():
/work/x86_os_my/fs/file.c:64
   
/* 从分区的block位图中，分配1个扇区，返回"扇区地址" */
int32_t block_bitmap_alloc(struct partition* part) {
c00079d5:	55                   	push   %ebp
c00079d6:	89 e5                	mov    %esp,%ebp
c00079d8:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/file.c:65
	int32_t bit_idx = bitmap_scan(&part->block_bitmap, 1);
c00079db:	8b 45 08             	mov    0x8(%ebp),%eax
c00079de:	83 c0 20             	add    $0x20,%eax
c00079e1:	83 ec 08             	sub    $0x8,%esp
c00079e4:	6a 01                	push   $0x1
c00079e6:	50                   	push   %eax
c00079e7:	e8 4f ad ff ff       	call   c000273b <bitmap_scan>
c00079ec:	83 c4 10             	add    $0x10,%esp
c00079ef:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:66
	if (bit_idx == -1) {
c00079f2:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c00079f6:	75 07                	jne    c00079ff <block_bitmap_alloc+0x2a>
/work/x86_os_my/fs/file.c:67
		return -1;
c00079f8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00079fd:	eb 26                	jmp    c0007a25 <block_bitmap_alloc+0x50>
/work/x86_os_my/fs/file.c:69
	}
	bitmap_set(&part->block_bitmap, bit_idx, 1);
c00079ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0007a02:	8b 55 08             	mov    0x8(%ebp),%edx
c0007a05:	83 c2 20             	add    $0x20,%edx
c0007a08:	83 ec 04             	sub    $0x4,%esp
c0007a0b:	6a 01                	push   $0x1
c0007a0d:	50                   	push   %eax
c0007a0e:	52                   	push   %edx
c0007a0f:	e8 5c ae ff ff       	call   c0002870 <bitmap_set>
c0007a14:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:71
	/* 和inode_bitmap_malloc不同,此处返回的不是位图索引,而是具体可用的扇区地址 */
	return (part->sb->data_start_lba + bit_idx);
c0007a17:	8b 45 08             	mov    0x8(%ebp),%eax
c0007a1a:	8b 40 1c             	mov    0x1c(%eax),%eax
c0007a1d:	8b 50 28             	mov    0x28(%eax),%edx
c0007a20:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0007a23:	01 d0                	add    %edx,%eax
/work/x86_os_my/fs/file.c:72
} 
c0007a25:	c9                   	leave  
c0007a26:	c3                   	ret    

c0007a27 <bitmap_sync>:
bitmap_sync():
/work/x86_os_my/fs/file.c:76

/* 将内存中bitmap第bit_idx位所在的那个512字节，同步到硬盘中bitmap第bit_idx位所在的扇区 */
// 硬盘以扇区为读写单位
void bitmap_sync(struct partition* part, uint32_t bit_idx, uint8_t btmp_type) {
c0007a27:	55                   	push   %ebp
c0007a28:	89 e5                	mov    %esp,%ebp
c0007a2a:	83 ec 28             	sub    $0x28,%esp
c0007a2d:	8b 45 10             	mov    0x10(%ebp),%eax
c0007a30:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/fs/file.c:77
	uint32_t off_sec = bit_idx / 4096;			// dst(硬盘中): bit_idx 相对于位图起始lba，在后边的第几个扇区(512*8=4096)
c0007a33:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007a36:	c1 e8 0c             	shr    $0xc,%eax
c0007a39:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/file.c:78
	uint32_t off_size = off_sec * BLOCK_SIZE;	// src(内存中): bit_idx 相对于位图数组bits，以512字节为单位，在后边的第几个单位处
c0007a3c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0007a3f:	c1 e0 09             	shl    $0x9,%eax
c0007a42:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/file.c:84
												// off_size是，第 bit_idx位所在位图中以 512 字节为单位的起始地址。BLOCK_SIZE=512
	uint32_t sec_lba;
	uint8_t* bitmap_off;

	/* 需要被同步到硬盘的位图只有inode_bitmap和block_bitmap */
	switch (btmp_type) {
c0007a45:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0007a49:	85 c0                	test   %eax,%eax
c0007a4b:	74 07                	je     c0007a54 <bitmap_sync+0x2d>
c0007a4d:	83 f8 01             	cmp    $0x1,%eax
c0007a50:	74 23                	je     c0007a75 <bitmap_sync+0x4e>
c0007a52:	eb 41                	jmp    c0007a95 <bitmap_sync+0x6e>
/work/x86_os_my/fs/file.c:86
		case INODE_BITMAP:
		sec_lba = part->sb->inode_bitmap_lba + off_sec;
c0007a54:	8b 45 08             	mov    0x8(%ebp),%eax
c0007a57:	8b 40 1c             	mov    0x1c(%eax),%eax
c0007a5a:	8b 50 18             	mov    0x18(%eax),%edx
c0007a5d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0007a60:	01 d0                	add    %edx,%eax
c0007a62:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:87
		bitmap_off = part->inode_bitmap.bits + off_size;
c0007a65:	8b 45 08             	mov    0x8(%ebp),%eax
c0007a68:	8b 50 2c             	mov    0x2c(%eax),%edx
c0007a6b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0007a6e:	01 d0                	add    %edx,%eax
c0007a70:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:88
		break;
c0007a73:	eb 20                	jmp    c0007a95 <bitmap_sync+0x6e>
/work/x86_os_my/fs/file.c:91

		case BLOCK_BITMAP: 
		sec_lba = part->sb->block_bitmap_lba + off_sec;
c0007a75:	8b 45 08             	mov    0x8(%ebp),%eax
c0007a78:	8b 40 1c             	mov    0x1c(%eax),%eax
c0007a7b:	8b 50 10             	mov    0x10(%eax),%edx
c0007a7e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0007a81:	01 d0                	add    %edx,%eax
c0007a83:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:92
		bitmap_off = part->block_bitmap.bits + off_size;
c0007a86:	8b 45 08             	mov    0x8(%ebp),%eax
c0007a89:	8b 50 24             	mov    0x24(%eax),%edx
c0007a8c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0007a8f:	01 d0                	add    %edx,%eax
c0007a91:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:93
		break;
c0007a94:	90                   	nop
/work/x86_os_my/fs/file.c:95
	}
	ide_write(part->my_disk, sec_lba, bitmap_off, 1);	// 将bitmap_off中1个扇区的数据写入硬盘sec_lba处
c0007a95:	8b 45 08             	mov    0x8(%ebp),%eax
c0007a98:	8b 40 08             	mov    0x8(%eax),%eax
c0007a9b:	6a 01                	push   $0x1
c0007a9d:	ff 75 f0             	pushl  -0x10(%ebp)
c0007aa0:	ff 75 f4             	pushl  -0xc(%ebp)
c0007aa3:	50                   	push   %eax
c0007aa4:	e8 ed e2 ff ff       	call   c0005d96 <ide_write>
c0007aa9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:96
}
c0007aac:	90                   	nop
c0007aad:	c9                   	leave  
c0007aae:	c3                   	ret    

c0007aaf <file_create>:
file_create():
/work/x86_os_my/fs/file.c:114
此新增加的文件对应的目录项，需要写入该目录的 inode->i_sectors[]中的某个扇区，
原有扇区可能已满，所以有可能要申请新扇区来存储目录项。【sync_dir_entry】
4. 若其中某步操作失败，需要回滚之前已成功的操作。
5. inode_bitmap、 block_bitmap、新文件的 inode 及文件所在目录的 inode，这些位于内存中已经被改变的数据要同步到硬盘。
*/
int32_t file_create(struct dir* parent_dir, char* filename, uint8_t flag) {
c0007aaf:	55                   	push   %ebp
c0007ab0:	89 e5                	mov    %esp,%ebp
c0007ab2:	83 ec 48             	sub    $0x48,%esp
c0007ab5:	8b 45 10             	mov    0x10(%ebp),%eax
c0007ab8:	88 45 c4             	mov    %al,-0x3c(%ebp)
/work/x86_os_my/fs/file.c:116
	/* 后续操作的公共缓冲区 */
	void* io_buf = sys_malloc(1024);	//跨扇区的数据，会操作2个扇区
c0007abb:	83 ec 0c             	sub    $0xc,%esp
c0007abe:	68 00 04 00 00       	push   $0x400
c0007ac3:	e8 5b b4 ff ff       	call   c0002f23 <sys_malloc>
c0007ac8:	83 c4 10             	add    $0x10,%esp
c0007acb:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/file.c:117
	if (io_buf == NULL) {
c0007ace:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0007ad2:	75 1a                	jne    c0007aee <file_create+0x3f>
/work/x86_os_my/fs/file.c:118
		printk("in file_creat: sys_malloc for io_buf failed\n");
c0007ad4:	83 ec 0c             	sub    $0xc,%esp
c0007ad7:	68 38 9a 00 c0       	push   $0xc0009a38
c0007adc:	e8 ba eb ff ff       	call   c000669b <printk>
c0007ae1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:119
		return -1;
c0007ae4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007ae9:	e9 81 02 00 00       	jmp    c0007d6f <file_create+0x2c0>
/work/x86_os_my/fs/file.c:122
	}

	uint8_t rollback_step = 0;	// 用于操作失败时回滚各资源状态
c0007aee:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/fs/file.c:125

	/* 1.为新文件从分区inode位图中，分配inode号 */
	int32_t inode_no = inode_bitmap_alloc(cur_part); 
c0007af2:	a1 50 db 00 c0       	mov    0xc000db50,%eax
c0007af7:	83 ec 0c             	sub    $0xc,%esp
c0007afa:	50                   	push   %eax
c0007afb:	e8 8e fe ff ff       	call   c000798e <inode_bitmap_alloc>
c0007b00:	83 c4 10             	add    $0x10,%esp
c0007b03:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/file.c:126
	if (inode_no == -1) {
c0007b06:	83 7d e8 ff          	cmpl   $0xffffffff,-0x18(%ebp)
c0007b0a:	75 1a                	jne    c0007b26 <file_create+0x77>
/work/x86_os_my/fs/file.c:127
		printk("in file_creat: allocate inode failed\n");
c0007b0c:	83 ec 0c             	sub    $0xc,%esp
c0007b0f:	68 68 9a 00 c0       	push   $0xc0009a68
c0007b14:	e8 82 eb ff ff       	call   c000669b <printk>
c0007b19:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:128
		return -1;
c0007b1c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007b21:	e9 49 02 00 00       	jmp    c0007d6f <file_create+0x2c0>
/work/x86_os_my/fs/file.c:133
	}

	/* 2.堆中分配inode节点，不可以是栈中的局部变量！
	 * 因为 file_table 中的 fd_inode 指针要指向它. */
	struct inode* new_file_inode = (struct inode*)sys_malloc(sizeof(struct inode)); 
c0007b26:	83 ec 0c             	sub    $0xc,%esp
c0007b29:	6a 4c                	push   $0x4c
c0007b2b:	e8 f3 b3 ff ff       	call   c0002f23 <sys_malloc>
c0007b30:	83 c4 10             	add    $0x10,%esp
c0007b33:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/file.c:134
	if (new_file_inode == NULL) {
c0007b36:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0007b3a:	75 19                	jne    c0007b55 <file_create+0xa6>
/work/x86_os_my/fs/file.c:135
		printk("file_create: sys_malloc for inode failded\n");
c0007b3c:	83 ec 0c             	sub    $0xc,%esp
c0007b3f:	68 90 9a 00 c0       	push   $0xc0009a90
c0007b44:	e8 52 eb ff ff       	call   c000669b <printk>
c0007b49:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:136
		rollback_step = 1;
c0007b4c:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)
/work/x86_os_my/fs/file.c:137
		goto rollback;
c0007b50:	e9 a7 01 00 00       	jmp    c0007cfc <file_create+0x24d>
/work/x86_os_my/fs/file.c:139
	}
	inode_init(inode_no, new_file_inode);	    // 初始化inode
c0007b55:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0007b58:	83 ec 08             	sub    $0x8,%esp
c0007b5b:	ff 75 e4             	pushl  -0x1c(%ebp)
c0007b5e:	50                   	push   %eax
c0007b5f:	e8 12 fd ff ff       	call   c0007876 <inode_init>
c0007b64:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:142

	/* 3.申请一个file_table数组的下标 */
	int fd_idx = get_free_slot_in_global();
c0007b67:	e8 60 fd ff ff       	call   c00078cc <get_free_slot_in_global>
c0007b6c:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:143
	if (fd_idx == -1) {
c0007b6f:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c0007b73:	75 19                	jne    c0007b8e <file_create+0xdf>
/work/x86_os_my/fs/file.c:144
		printk("exceed max open files\n");
c0007b75:	83 ec 0c             	sub    $0xc,%esp
c0007b78:	68 00 9a 00 c0       	push   $0xc0009a00
c0007b7d:	e8 19 eb ff ff       	call   c000669b <printk>
c0007b82:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:145
		rollback_step = 2;
c0007b85:	c6 45 f7 02          	movb   $0x2,-0x9(%ebp)
/work/x86_os_my/fs/file.c:146
		goto rollback;
c0007b89:	e9 6e 01 00 00       	jmp    c0007cfc <file_create+0x24d>
/work/x86_os_my/fs/file.c:150
	}

	// 4.填充文件表中的文件结构
	file_table[fd_idx].fd_inode = new_file_inode;
c0007b8e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0007b91:	89 d0                	mov    %edx,%eax
c0007b93:	01 c0                	add    %eax,%eax
c0007b95:	01 d0                	add    %edx,%eax
c0007b97:	c1 e0 02             	shl    $0x2,%eax
c0007b9a:	8d 90 68 db 00 c0    	lea    -0x3fff2498(%eax),%edx
c0007ba0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0007ba3:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/file.c:151
	file_table[fd_idx].fd_pos = 0;
c0007ba5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0007ba8:	89 d0                	mov    %edx,%eax
c0007baa:	01 c0                	add    %eax,%eax
c0007bac:	01 d0                	add    %edx,%eax
c0007bae:	c1 e0 02             	shl    $0x2,%eax
c0007bb1:	05 60 db 00 c0       	add    $0xc000db60,%eax
c0007bb6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/fs/file.c:152
	file_table[fd_idx].fd_flag = flag;
c0007bbc:	0f b6 4d c4          	movzbl -0x3c(%ebp),%ecx
c0007bc0:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0007bc3:	89 d0                	mov    %edx,%eax
c0007bc5:	01 c0                	add    %eax,%eax
c0007bc7:	01 d0                	add    %edx,%eax
c0007bc9:	c1 e0 02             	shl    $0x2,%eax
c0007bcc:	05 64 db 00 c0       	add    $0xc000db64,%eax
c0007bd1:	89 08                	mov    %ecx,(%eax)
/work/x86_os_my/fs/file.c:153
	file_table[fd_idx].fd_inode->write_deny = false;
c0007bd3:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0007bd6:	89 d0                	mov    %edx,%eax
c0007bd8:	01 c0                	add    %eax,%eax
c0007bda:	01 d0                	add    %edx,%eax
c0007bdc:	c1 e0 02             	shl    $0x2,%eax
c0007bdf:	05 68 db 00 c0       	add    $0xc000db68,%eax
c0007be4:	8b 00                	mov    (%eax),%eax
c0007be6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
/work/x86_os_my/fs/file.c:156

	struct dir_entry new_dir_entry;
	memset(&new_dir_entry, 0, sizeof(struct dir_entry));
c0007bed:	83 ec 04             	sub    $0x4,%esp
c0007bf0:	6a 18                	push   $0x18
c0007bf2:	6a 00                	push   $0x0
c0007bf4:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0007bf7:	50                   	push   %eax
c0007bf8:	e8 1d be ff ff       	call   c0003a1a <memset>
c0007bfd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:159

	// create_dir_entry在内存中初始化目录项p_de，只是内存操作不会返回失败
	create_dir_entry(filename, inode_no, FT_REGULAR, &new_dir_entry);
c0007c00:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0007c03:	8d 55 cc             	lea    -0x34(%ebp),%edx
c0007c06:	52                   	push   %edx
c0007c07:	6a 01                	push   $0x1
c0007c09:	50                   	push   %eax
c0007c0a:	ff 75 0c             	pushl  0xc(%ebp)
c0007c0d:	e8 da 03 00 00       	call   c0007fec <create_dir_entry>
c0007c12:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:164


	/* 同步内存数据到硬盘 */
	/* a 在目录parent_dir下安装目录项new_dir_entry, 写入硬盘后返回true, 否则false【dir.c】 */
	if (!sync_dir_entry(parent_dir, &new_dir_entry, io_buf)) {
c0007c15:	83 ec 04             	sub    $0x4,%esp
c0007c18:	ff 75 ec             	pushl  -0x14(%ebp)
c0007c1b:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0007c1e:	50                   	push   %eax
c0007c1f:	ff 75 08             	pushl  0x8(%ebp)
c0007c22:	e8 36 04 00 00       	call   c000805d <sync_dir_entry>
c0007c27:	83 c4 10             	add    $0x10,%esp
c0007c2a:	85 c0                	test   %eax,%eax
c0007c2c:	75 19                	jne    c0007c47 <file_create+0x198>
/work/x86_os_my/fs/file.c:165
		printk("sync dir_entry to disk failed\n");
c0007c2e:	83 ec 0c             	sub    $0xc,%esp
c0007c31:	68 bc 9a 00 c0       	push   $0xc0009abc
c0007c36:	e8 60 ea ff ff       	call   c000669b <printk>
c0007c3b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:166
		rollback_step = 3;
c0007c3e:	c6 45 f7 03          	movb   $0x3,-0x9(%ebp)
/work/x86_os_my/fs/file.c:167
		goto rollback;
c0007c42:	e9 b5 00 00 00       	jmp    c0007cfc <file_create+0x24d>
/work/x86_os_my/fs/file.c:171
	}

	/* b sync_dir_entry 会改变父目录 inode 中的信息，因此，将父目录inode的内容同步到硬盘【inode.c】 */
	memset(io_buf, 0, 1024);
c0007c47:	83 ec 04             	sub    $0x4,%esp
c0007c4a:	68 00 04 00 00       	push   $0x400
c0007c4f:	6a 00                	push   $0x0
c0007c51:	ff 75 ec             	pushl  -0x14(%ebp)
c0007c54:	e8 c1 bd ff ff       	call   c0003a1a <memset>
c0007c59:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:172
	inode_sync(cur_part, parent_dir->inode, io_buf);
c0007c5c:	8b 45 08             	mov    0x8(%ebp),%eax
c0007c5f:	8b 10                	mov    (%eax),%edx
c0007c61:	a1 50 db 00 c0       	mov    0xc000db50,%eax
c0007c66:	83 ec 04             	sub    $0x4,%esp
c0007c69:	ff 75 ec             	pushl  -0x14(%ebp)
c0007c6c:	52                   	push   %edx
c0007c6d:	50                   	push   %eax
c0007c6e:	e8 1a f9 ff ff       	call   c000758d <inode_sync>
c0007c73:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:175

	/* c 将新创建文件的inode内容同步到硬盘 */
	memset(io_buf, 0, 1024);
c0007c76:	83 ec 04             	sub    $0x4,%esp
c0007c79:	68 00 04 00 00       	push   $0x400
c0007c7e:	6a 00                	push   $0x0
c0007c80:	ff 75 ec             	pushl  -0x14(%ebp)
c0007c83:	e8 92 bd ff ff       	call   c0003a1a <memset>
c0007c88:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:176
	inode_sync(cur_part, new_file_inode, io_buf);
c0007c8b:	a1 50 db 00 c0       	mov    0xc000db50,%eax
c0007c90:	83 ec 04             	sub    $0x4,%esp
c0007c93:	ff 75 ec             	pushl  -0x14(%ebp)
c0007c96:	ff 75 e4             	pushl  -0x1c(%ebp)
c0007c99:	50                   	push   %eax
c0007c9a:	e8 ee f8 ff ff       	call   c000758d <inode_sync>
c0007c9f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:179

	/* d 将inode_bitmap位图同步到硬盘【file.c】 */
	bitmap_sync(cur_part, inode_no, INODE_BITMAP);
c0007ca2:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0007ca5:	a1 50 db 00 c0       	mov    0xc000db50,%eax
c0007caa:	83 ec 04             	sub    $0x4,%esp
c0007cad:	6a 00                	push   $0x0
c0007caf:	52                   	push   %edx
c0007cb0:	50                   	push   %eax
c0007cb1:	e8 71 fd ff ff       	call   c0007a27 <bitmap_sync>
c0007cb6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:182

	/* e 将创建的文件i结点添加到open_inodes链表 */
	list_push(&cur_part->open_inodes, &new_file_inode->inode_tag);
c0007cb9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0007cbc:	8d 50 44             	lea    0x44(%eax),%edx
c0007cbf:	a1 50 db 00 c0       	mov    0xc000db50,%eax
c0007cc4:	83 c0 30             	add    $0x30,%eax
c0007cc7:	83 ec 08             	sub    $0x8,%esp
c0007cca:	52                   	push   %edx
c0007ccb:	50                   	push   %eax
c0007ccc:	e8 7a c8 ff ff       	call   c000454b <list_push>
c0007cd1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:183
	new_file_inode->i_open_cnts = 1;
c0007cd4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0007cd7:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/fs/file.c:186


	sys_free(io_buf);
c0007cde:	83 ec 0c             	sub    $0xc,%esp
c0007ce1:	ff 75 ec             	pushl  -0x14(%ebp)
c0007ce4:	e8 67 b8 ff ff       	call   c0003550 <sys_free>
c0007ce9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:187
	return pcb_fd_install(fd_idx);	// 将 file_table 的下标，安装到，线程PCB中文件描述符数组 fd_table【file.c】
c0007cec:	83 ec 0c             	sub    $0xc,%esp
c0007cef:	ff 75 f0             	pushl  -0x10(%ebp)
c0007cf2:	e8 2a fc ff ff       	call   c0007921 <pcb_fd_install>
c0007cf7:	83 c4 10             	add    $0x10,%esp
c0007cfa:	eb 73                	jmp    c0007d6f <file_create+0x2c0>
/work/x86_os_my/fs/file.c:191


rollback:
	switch (rollback_step) {
c0007cfc:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0007d00:	83 f8 02             	cmp    $0x2,%eax
c0007d03:	74 2d                	je     c0007d32 <file_create+0x283>
c0007d05:	83 f8 03             	cmp    $0x3,%eax
c0007d08:	74 07                	je     c0007d11 <file_create+0x262>
c0007d0a:	83 f8 01             	cmp    $0x1,%eax
c0007d0d:	74 31                	je     c0007d40 <file_create+0x291>
c0007d0f:	eb 4b                	jmp    c0007d5c <file_create+0x2ad>
/work/x86_os_my/fs/file.c:194
		case 3:
		/* file_table 相应位清空 */
		memset(&file_table[fd_idx], 0, sizeof(struct file)); 
c0007d11:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0007d14:	89 d0                	mov    %edx,%eax
c0007d16:	01 c0                	add    %eax,%eax
c0007d18:	01 d0                	add    %edx,%eax
c0007d1a:	c1 e0 02             	shl    $0x2,%eax
c0007d1d:	05 60 db 00 c0       	add    $0xc000db60,%eax
c0007d22:	83 ec 04             	sub    $0x4,%esp
c0007d25:	6a 0c                	push   $0xc
c0007d27:	6a 00                	push   $0x0
c0007d29:	50                   	push   %eax
c0007d2a:	e8 eb bc ff ff       	call   c0003a1a <memset>
c0007d2f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:196
		case 2:
		sys_free(new_file_inode);
c0007d32:	83 ec 0c             	sub    $0xc,%esp
c0007d35:	ff 75 e4             	pushl  -0x1c(%ebp)
c0007d38:	e8 13 b8 ff ff       	call   c0003550 <sys_free>
c0007d3d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:199
		case 1:
		/* inode位图 恢复 */
		bitmap_set(&cur_part->inode_bitmap, inode_no, 0);
c0007d40:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0007d43:	8b 15 50 db 00 c0    	mov    0xc000db50,%edx
c0007d49:	83 c2 28             	add    $0x28,%edx
c0007d4c:	83 ec 04             	sub    $0x4,%esp
c0007d4f:	6a 00                	push   $0x0
c0007d51:	50                   	push   %eax
c0007d52:	52                   	push   %edx
c0007d53:	e8 18 ab ff ff       	call   c0002870 <bitmap_set>
c0007d58:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:200
		break;
c0007d5b:	90                   	nop
/work/x86_os_my/fs/file.c:202
	}
	sys_free(io_buf);
c0007d5c:	83 ec 0c             	sub    $0xc,%esp
c0007d5f:	ff 75 ec             	pushl  -0x14(%ebp)
c0007d62:	e8 e9 b7 ff ff       	call   c0003550 <sys_free>
c0007d67:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:203
	return -1;
c0007d6a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
/work/x86_os_my/fs/file.c:204 (discriminator 1)
}
c0007d6f:	c9                   	leave  
c0007d70:	c3                   	ret    

c0007d71 <open_root_dir>:
open_root_dir():
/work/x86_os_my/fs/dir.c:17
#include "super_block.h"

struct dir root_dir;	// 根目录

/* 打开根目录 */
void open_root_dir(struct partition* part) {
c0007d71:	55                   	push   %ebp
c0007d72:	89 e5                	mov    %esp,%ebp
c0007d74:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/fs/dir.c:18
	root_dir.inode = inode_open(part, part->sb->root_inode_no);
c0007d77:	8b 45 08             	mov    0x8(%ebp),%eax
c0007d7a:	8b 40 1c             	mov    0x1c(%eax),%eax
c0007d7d:	8b 40 2c             	mov    0x2c(%eax),%eax
c0007d80:	83 ec 08             	sub    $0x8,%esp
c0007d83:	50                   	push   %eax
c0007d84:	ff 75 08             	pushl  0x8(%ebp)
c0007d87:	e8 28 f9 ff ff       	call   c00076b4 <inode_open>
c0007d8c:	83 c4 10             	add    $0x10,%esp
c0007d8f:	a3 e0 dc 00 c0       	mov    %eax,0xc000dce0
/work/x86_os_my/fs/dir.c:19
	root_dir.dir_pos = 0;
c0007d94:	c7 05 e4 dc 00 c0 00 	movl   $0x0,0xc000dce4
c0007d9b:	00 00 00 
/work/x86_os_my/fs/dir.c:20
}
c0007d9e:	90                   	nop
c0007d9f:	c9                   	leave  
c0007da0:	c3                   	ret    

c0007da1 <dir_open>:
dir_open():
/work/x86_os_my/fs/dir.c:23

/* 在分区part上打开i结点为inode_no的目录，并返回目录指针 */
struct dir* dir_open(struct partition* part, uint32_t inode_no) {
c0007da1:	55                   	push   %ebp
c0007da2:	89 e5                	mov    %esp,%ebp
c0007da4:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/dir.c:24
	struct dir* pdir = (struct dir*)sys_malloc(sizeof(struct dir));	//除根目录以外的其他目录，要分配内存
c0007da7:	83 ec 0c             	sub    $0xc,%esp
c0007daa:	68 08 02 00 00       	push   $0x208
c0007daf:	e8 6f b1 ff ff       	call   c0002f23 <sys_malloc>
c0007db4:	83 c4 10             	add    $0x10,%esp
c0007db7:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:25
	pdir->inode = inode_open(part, inode_no);
c0007dba:	83 ec 08             	sub    $0x8,%esp
c0007dbd:	ff 75 0c             	pushl  0xc(%ebp)
c0007dc0:	ff 75 08             	pushl  0x8(%ebp)
c0007dc3:	e8 ec f8 ff ff       	call   c00076b4 <inode_open>
c0007dc8:	83 c4 10             	add    $0x10,%esp
c0007dcb:	89 c2                	mov    %eax,%edx
c0007dcd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0007dd0:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/fs/dir.c:26
	pdir->dir_pos = 0;
c0007dd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0007dd5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
/work/x86_os_my/fs/dir.c:27
	return pdir;
c0007ddc:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/dir.c:28
}
c0007ddf:	c9                   	leave  
c0007de0:	c3                   	ret    

c0007de1 <search_dir_entry>:
search_dir_entry():
/work/x86_os_my/fs/dir.c:32

/* 在part分区内的pdir目录内，寻找名为name的目录项，
 * 找到后返回true，并将其目录项存入dir_e；否则返回false */
bool search_dir_entry(struct partition* part, struct dir* pdir, const char* name, struct dir_entry* dir_e) {
c0007de1:	55                   	push   %ebp
c0007de2:	89 e5                	mov    %esp,%ebp
c0007de4:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/fs/dir.c:34
	/* 1分配 */
	uint32_t block_cnt = 140;	 // 12个直接块+128个一级间接块 = 目录的inode管理的所有块 = 140块
c0007de7:	c7 45 e8 8c 00 00 00 	movl   $0x8c,-0x18(%ebp)
/work/x86_os_my/fs/dir.c:39

	/* 12个直接块大小+128个间接块,共560字节（140个块，inode需要管理块的地址，每个4字节）
	注意: all_blocks 里面并没有一级间接表的地址，只有直接块+间接块的地址！
	用all_blocks检索inode管理的所有块地址 */
	uint32_t* all_blocks = (uint32_t*)sys_malloc(48 + 512);
c0007dee:	83 ec 0c             	sub    $0xc,%esp
c0007df1:	68 30 02 00 00       	push   $0x230
c0007df6:	e8 28 b1 ff ff       	call   c0002f23 <sys_malloc>
c0007dfb:	83 c4 10             	add    $0x10,%esp
c0007dfe:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/dir.c:40
	if (all_blocks == NULL) {
c0007e01:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0007e05:	75 1a                	jne    c0007e21 <search_dir_entry+0x40>
/work/x86_os_my/fs/dir.c:41
		printk("search_dir_entry: sys_malloc for all_blocks failed");
c0007e07:	83 ec 0c             	sub    $0xc,%esp
c0007e0a:	68 dc 9a 00 c0       	push   $0xc0009adc
c0007e0f:	e8 87 e8 ff ff       	call   c000669b <printk>
c0007e14:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:42
		return false;
c0007e17:	b8 00 00 00 00       	mov    $0x0,%eax
c0007e1c:	e9 96 01 00 00       	jmp    c0007fb7 <search_dir_entry+0x1d6>
/work/x86_os_my/fs/dir.c:45
	}

	uint32_t block_idx = 0;
c0007e21:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:46
	while (block_idx < 12) {
c0007e28:	eb 23                	jmp    c0007e4d <search_dir_entry+0x6c>
/work/x86_os_my/fs/dir.c:47
		all_blocks[block_idx] = pdir->inode->i_sectors[block_idx];
c0007e2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0007e2d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0007e34:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0007e37:	01 c2                	add    %eax,%edx
c0007e39:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007e3c:	8b 00                	mov    (%eax),%eax
c0007e3e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0007e41:	83 c1 04             	add    $0x4,%ecx
c0007e44:	8b 04 88             	mov    (%eax,%ecx,4),%eax
c0007e47:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/dir.c:48
		block_idx++;
c0007e49:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:46
		printk("search_dir_entry: sys_malloc for all_blocks failed");
		return false;
	}

	uint32_t block_idx = 0;
	while (block_idx < 12) {
c0007e4d:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
c0007e51:	76 d7                	jbe    c0007e2a <search_dir_entry+0x49>
/work/x86_os_my/fs/dir.c:50
		all_blocks[block_idx] = pdir->inode->i_sectors[block_idx];
		block_idx++;
	}
	block_idx = 0;
c0007e53:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:52

	if (pdir->inode->i_sectors[12] != 0) {	// i_sectors[12] != 0代表含有一级间接块表
c0007e5a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007e5d:	8b 00                	mov    (%eax),%eax
c0007e5f:	8b 40 40             	mov    0x40(%eax),%eax
c0007e62:	85 c0                	test   %eax,%eax
c0007e64:	74 21                	je     c0007e87 <search_dir_entry+0xa6>
/work/x86_os_my/fs/dir.c:54
		//从硬盘的扇区地址i_sectors[12]处获取 1 扇区数据，就是 128 个间接块的地址，将其复制到 all_blocks+12 处【复制的是整个一级间接表】
		ide_read(part->my_disk, pdir->inode->i_sectors[12], all_blocks + 12, 1);
c0007e66:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0007e69:	8d 48 30             	lea    0x30(%eax),%ecx
c0007e6c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007e6f:	8b 00                	mov    (%eax),%eax
c0007e71:	8b 50 40             	mov    0x40(%eax),%edx
c0007e74:	8b 45 08             	mov    0x8(%ebp),%eax
c0007e77:	8b 40 08             	mov    0x8(%eax),%eax
c0007e7a:	6a 01                	push   $0x1
c0007e7c:	51                   	push   %ecx
c0007e7d:	52                   	push   %edx
c0007e7e:	50                   	push   %eax
c0007e7f:	e8 9e dd ff ff       	call   c0005c22 <ide_read>
c0007e84:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:62


	/* 2查找 */
	/* 写目录项的时候已保证目录项不跨扇区，这样读目录项时容易处理，只申请容纳1个扇区的内存
	 * 和处理inode_table不同，在往目录中写目录项的时候(sync_dir_entry)，避免了某个目录项 跨扇区的情况 */
	uint8_t* buf = (uint8_t*)sys_malloc(SECTOR_SIZE);
c0007e87:	83 ec 0c             	sub    $0xc,%esp
c0007e8a:	68 00 02 00 00       	push   $0x200
c0007e8f:	e8 8f b0 ff ff       	call   c0002f23 <sys_malloc>
c0007e94:	83 c4 10             	add    $0x10,%esp
c0007e97:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/dir.c:63
	struct dir_entry* p_de = (struct dir_entry*)buf;		// p_de为指向目录项的指针,值为buf起始地址
c0007e9a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0007e9d:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:64
	uint32_t dir_entry_size = part->sb->dir_entry_size;
c0007ea0:	8b 45 08             	mov    0x8(%ebp),%eax
c0007ea3:	8b 40 1c             	mov    0x1c(%eax),%eax
c0007ea6:	8b 40 30             	mov    0x30(%eax),%eax
c0007ea9:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:65
	uint32_t dir_entry_cnt = SECTOR_SIZE / dir_entry_size;	// 1扇区内可容纳的目录项个数
c0007eac:	b8 00 02 00 00       	mov    $0x200,%eax
c0007eb1:	ba 00 00 00 00       	mov    $0x0,%edx
c0007eb6:	f7 75 dc             	divl   -0x24(%ebp)
c0007eb9:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/dir.c:67
	/* 在所有块中查找目录项 */
	while (block_idx < block_cnt) {
c0007ebc:	e9 c9 00 00 00       	jmp    c0007f8a <search_dir_entry+0x1a9>
/work/x86_os_my/fs/dir.c:69
		/* 块地址为0时表示该块中无数据,继续在其它块中找 */
		if (all_blocks[block_idx] == 0) {
c0007ec1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0007ec4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0007ecb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0007ece:	01 d0                	add    %edx,%eax
c0007ed0:	8b 00                	mov    (%eax),%eax
c0007ed2:	85 c0                	test   %eax,%eax
c0007ed4:	75 09                	jne    c0007edf <search_dir_entry+0xfe>
/work/x86_os_my/fs/dir.c:70
			block_idx++;
c0007ed6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:71
			continue;
c0007eda:	e9 ab 00 00 00       	jmp    c0007f8a <search_dir_entry+0x1a9>
/work/x86_os_my/fs/dir.c:73
		}
		ide_read(part->my_disk, all_blocks[block_idx], buf, 1);
c0007edf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0007ee2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0007ee9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0007eec:	01 d0                	add    %edx,%eax
c0007eee:	8b 10                	mov    (%eax),%edx
c0007ef0:	8b 45 08             	mov    0x8(%ebp),%eax
c0007ef3:	8b 40 08             	mov    0x8(%eax),%eax
c0007ef6:	6a 01                	push   $0x1
c0007ef8:	ff 75 e0             	pushl  -0x20(%ebp)
c0007efb:	52                   	push   %edx
c0007efc:	50                   	push   %eax
c0007efd:	e8 20 dd ff ff       	call   c0005c22 <ide_read>
c0007f02:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:75

		uint32_t dir_entry_idx = 0;
c0007f05:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:77
		/* 遍历扇区中所有目录项 */
		while (dir_entry_idx < dir_entry_cnt) {
c0007f0c:	eb 55                	jmp    c0007f63 <search_dir_entry+0x182>
/work/x86_os_my/fs/dir.c:79
			/* 若找到了,就直接复制整个目录项 */
			if (!strcmp(p_de->filename, name)) {
c0007f0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0007f11:	83 ec 08             	sub    $0x8,%esp
c0007f14:	ff 75 10             	pushl  0x10(%ebp)
c0007f17:	50                   	push   %eax
c0007f18:	e8 d2 bc ff ff       	call   c0003bef <strcmp>
c0007f1d:	83 c4 10             	add    $0x10,%esp
c0007f20:	84 c0                	test   %al,%al
c0007f22:	75 37                	jne    c0007f5b <search_dir_entry+0x17a>
/work/x86_os_my/fs/dir.c:80
				memcpy(dir_e, p_de, dir_entry_size);
c0007f24:	83 ec 04             	sub    $0x4,%esp
c0007f27:	ff 75 dc             	pushl  -0x24(%ebp)
c0007f2a:	ff 75 f0             	pushl  -0x10(%ebp)
c0007f2d:	ff 75 14             	pushl  0x14(%ebp)
c0007f30:	e8 37 bb ff ff       	call   c0003a6c <memcpy>
c0007f35:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:81
				sys_free(buf);
c0007f38:	83 ec 0c             	sub    $0xc,%esp
c0007f3b:	ff 75 e0             	pushl  -0x20(%ebp)
c0007f3e:	e8 0d b6 ff ff       	call   c0003550 <sys_free>
c0007f43:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:82
				sys_free(all_blocks);
c0007f46:	83 ec 0c             	sub    $0xc,%esp
c0007f49:	ff 75 e4             	pushl  -0x1c(%ebp)
c0007f4c:	e8 ff b5 ff ff       	call   c0003550 <sys_free>
c0007f51:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:83
				return true;
c0007f54:	b8 01 00 00 00       	mov    $0x1,%eax
c0007f59:	eb 5c                	jmp    c0007fb7 <search_dir_entry+0x1d6>
/work/x86_os_my/fs/dir.c:85
			}
			dir_entry_idx++;
c0007f5b:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:86
			p_de++;
c0007f5f:	83 45 f0 18          	addl   $0x18,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:77
		}
		ide_read(part->my_disk, all_blocks[block_idx], buf, 1);

		uint32_t dir_entry_idx = 0;
		/* 遍历扇区中所有目录项 */
		while (dir_entry_idx < dir_entry_cnt) {
c0007f63:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0007f66:	3b 45 d8             	cmp    -0x28(%ebp),%eax
c0007f69:	72 a3                	jb     c0007f0e <search_dir_entry+0x12d>
/work/x86_os_my/fs/dir.c:89
			}
			dir_entry_idx++;
			p_de++;
		}

		block_idx++;					// 目录inode管理的下一个数据块（扇区）【目录里面是目录项，所以buf赋给p_de】
c0007f6b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:90
		p_de = (struct dir_entry*)buf;	// p_de已经指向上一个扇区内，最后一个目录项，需要恢复p_de指向为buf
c0007f6f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0007f72:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:91
		memset(buf, 0, SECTOR_SIZE);	// 将buf清0,下次再用
c0007f75:	83 ec 04             	sub    $0x4,%esp
c0007f78:	68 00 02 00 00       	push   $0x200
c0007f7d:	6a 00                	push   $0x0
c0007f7f:	ff 75 e0             	pushl  -0x20(%ebp)
c0007f82:	e8 93 ba ff ff       	call   c0003a1a <memset>
c0007f87:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:67
	uint8_t* buf = (uint8_t*)sys_malloc(SECTOR_SIZE);
	struct dir_entry* p_de = (struct dir_entry*)buf;		// p_de为指向目录项的指针,值为buf起始地址
	uint32_t dir_entry_size = part->sb->dir_entry_size;
	uint32_t dir_entry_cnt = SECTOR_SIZE / dir_entry_size;	// 1扇区内可容纳的目录项个数
	/* 在所有块中查找目录项 */
	while (block_idx < block_cnt) {
c0007f8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0007f8d:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0007f90:	0f 82 2b ff ff ff    	jb     c0007ec1 <search_dir_entry+0xe0>
/work/x86_os_my/fs/dir.c:93

		block_idx++;					// 目录inode管理的下一个数据块（扇区）【目录里面是目录项，所以buf赋给p_de】
		p_de = (struct dir_entry*)buf;	// p_de已经指向上一个扇区内，最后一个目录项，需要恢复p_de指向为buf
		memset(buf, 0, SECTOR_SIZE);	// 将buf清0,下次再用
	}
	sys_free(buf);
c0007f96:	83 ec 0c             	sub    $0xc,%esp
c0007f99:	ff 75 e0             	pushl  -0x20(%ebp)
c0007f9c:	e8 af b5 ff ff       	call   c0003550 <sys_free>
c0007fa1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:94
	sys_free(all_blocks);
c0007fa4:	83 ec 0c             	sub    $0xc,%esp
c0007fa7:	ff 75 e4             	pushl  -0x1c(%ebp)
c0007faa:	e8 a1 b5 ff ff       	call   c0003550 <sys_free>
c0007faf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:95
	return false;
c0007fb2:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/dir.c:96
}
c0007fb7:	c9                   	leave  
c0007fb8:	c3                   	ret    

c0007fb9 <dir_close>:
dir_close():
/work/x86_os_my/fs/dir.c:99

/* 关闭目录 */
void dir_close(struct dir* dir) {
c0007fb9:	55                   	push   %ebp
c0007fba:	89 e5                	mov    %esp,%ebp
c0007fbc:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/fs/dir.c:103
	/*************      根目录不能关闭     ***************
	*1 根目录自打开后就不应该关闭,否则还需要再次open_root_dir();
	*2 root_dir所在的内存是低端1M之内,并非在堆中,free会出问题 */
	if (dir == &root_dir) {
c0007fbf:	81 7d 08 e0 dc 00 c0 	cmpl   $0xc000dce0,0x8(%ebp)
c0007fc6:	74 21                	je     c0007fe9 <dir_close+0x30>
/work/x86_os_my/fs/dir.c:106
		return;
	}
	inode_close(dir->inode);
c0007fc8:	8b 45 08             	mov    0x8(%ebp),%eax
c0007fcb:	8b 00                	mov    (%eax),%eax
c0007fcd:	83 ec 0c             	sub    $0xc,%esp
c0007fd0:	50                   	push   %eax
c0007fd1:	e8 24 f8 ff ff       	call   c00077fa <inode_close>
c0007fd6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:107
	sys_free(dir);
c0007fd9:	83 ec 0c             	sub    $0xc,%esp
c0007fdc:	ff 75 08             	pushl  0x8(%ebp)
c0007fdf:	e8 6c b5 ff ff       	call   c0003550 <sys_free>
c0007fe4:	83 c4 10             	add    $0x10,%esp
c0007fe7:	eb 01                	jmp    c0007fea <dir_close+0x31>
/work/x86_os_my/fs/dir.c:104
void dir_close(struct dir* dir) {
	/*************      根目录不能关闭     ***************
	*1 根目录自打开后就不应该关闭,否则还需要再次open_root_dir();
	*2 root_dir所在的内存是低端1M之内,并非在堆中,free会出问题 */
	if (dir == &root_dir) {
		return;
c0007fe9:	90                   	nop
/work/x86_os_my/fs/dir.c:108
	}
	inode_close(dir->inode);
	sys_free(dir);
}
c0007fea:	c9                   	leave  
c0007feb:	c3                   	ret    

c0007fec <create_dir_entry>:
create_dir_entry():
/work/x86_os_my/fs/dir.c:111

/* 在内存中初始化目录项p_de */
void create_dir_entry(char* filename, uint32_t inode_no, uint8_t file_type, struct dir_entry* p_de) {
c0007fec:	55                   	push   %ebp
c0007fed:	89 e5                	mov    %esp,%ebp
c0007fef:	83 ec 18             	sub    $0x18,%esp
c0007ff2:	8b 45 10             	mov    0x10(%ebp),%eax
c0007ff5:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:112
	ASSERT(strlen(filename) <=  MAX_FILE_NAME_LEN);
c0007ff8:	83 ec 0c             	sub    $0xc,%esp
c0007ffb:	ff 75 08             	pushl  0x8(%ebp)
c0007ffe:	e8 a1 bb ff ff       	call   c0003ba4 <strlen>
c0008003:	83 c4 10             	add    $0x10,%esp
c0008006:	83 f8 10             	cmp    $0x10,%eax
c0008009:	76 19                	jbe    c0008024 <create_dir_entry+0x38>
/work/x86_os_my/fs/dir.c:112 (discriminator 1)
c000800b:	68 10 9b 00 c0       	push   $0xc0009b10
c0008010:	68 bc 9b 00 c0       	push   $0xc0009bbc
c0008015:	6a 70                	push   $0x70
c0008017:	68 36 9b 00 c0       	push   $0xc0009b36
c000801c:	e8 e1 a5 ff ff       	call   c0002602 <panic_spin>
c0008021:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:115

	/* 初始化目录项 */
	memcpy(p_de->filename, filename, strlen(filename));
c0008024:	83 ec 0c             	sub    $0xc,%esp
c0008027:	ff 75 08             	pushl  0x8(%ebp)
c000802a:	e8 75 bb ff ff       	call   c0003ba4 <strlen>
c000802f:	83 c4 10             	add    $0x10,%esp
c0008032:	89 c2                	mov    %eax,%edx
c0008034:	8b 45 14             	mov    0x14(%ebp),%eax
c0008037:	83 ec 04             	sub    $0x4,%esp
c000803a:	52                   	push   %edx
c000803b:	ff 75 08             	pushl  0x8(%ebp)
c000803e:	50                   	push   %eax
c000803f:	e8 28 ba ff ff       	call   c0003a6c <memcpy>
c0008044:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:116
	p_de->i_no = inode_no;
c0008047:	8b 45 14             	mov    0x14(%ebp),%eax
c000804a:	8b 55 0c             	mov    0xc(%ebp),%edx
c000804d:	89 50 10             	mov    %edx,0x10(%eax)
/work/x86_os_my/fs/dir.c:117
	p_de->f_type = file_type;
c0008050:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
c0008054:	8b 45 14             	mov    0x14(%ebp),%eax
c0008057:	89 50 14             	mov    %edx,0x14(%eax)
/work/x86_os_my/fs/dir.c:118
}
c000805a:	90                   	nop
c000805b:	c9                   	leave  
c000805c:	c3                   	ret    

c000805d <sync_dir_entry>:
sync_dir_entry():
/work/x86_os_my/fs/dir.c:128
 * io_buf是由主调函数提供的，里面是一个一个的目录项
 */
// 全局变量 cur_part 定义在fs.c中
// 临时变量 all_blocks 保存目录中 所有数据块的地址【4*140=560字节，去掉前12个直接块的地址48字节，后边全是间接块，后边正好是512字节】
// 注意: all_blocks 里面并没有一级间接表的地址，只有直接块+间接块的地址！
bool sync_dir_entry(struct dir* parent_dir, struct dir_entry* p_de, void* io_buf) {
c000805d:	55                   	push   %ebp
c000805e:	89 e5                	mov    %esp,%ebp
c0008060:	57                   	push   %edi
c0008061:	81 ec 54 02 00 00    	sub    $0x254,%esp
/work/x86_os_my/fs/dir.c:129
	struct inode* dir_inode = parent_dir->inode;	//dir->inode：“已打开的 inode 队列”part->open_inodes 中的节点
c0008067:	8b 45 08             	mov    0x8(%ebp),%eax
c000806a:	8b 00                	mov    (%eax),%eax
c000806c:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:130
	uint32_t dir_size = dir_inode->i_size;			//inode->i_size：当inode是目录时，代表 目录下所有目录项大小之和
c000806f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008072:	8b 40 04             	mov    0x4(%eax),%eax
c0008075:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:131
	uint32_t dir_entry_size = cur_part->sb->dir_entry_size;
c0008078:	a1 50 db 00 c0       	mov    0xc000db50,%eax
c000807d:	8b 40 1c             	mov    0x1c(%eax),%eax
c0008080:	8b 40 30             	mov    0x30(%eax),%eax
c0008083:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/dir.c:133

	ASSERT(dir_size % dir_entry_size == 0);	// dir_size应该是dir_entry_size的整数倍
c0008086:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008089:	ba 00 00 00 00       	mov    $0x0,%edx
c000808e:	f7 75 e8             	divl   -0x18(%ebp)
c0008091:	89 d0                	mov    %edx,%eax
c0008093:	85 c0                	test   %eax,%eax
c0008095:	74 1c                	je     c00080b3 <sync_dir_entry+0x56>
/work/x86_os_my/fs/dir.c:133 (discriminator 1)
c0008097:	68 40 9b 00 c0       	push   $0xc0009b40
c000809c:	68 d0 9b 00 c0       	push   $0xc0009bd0
c00080a1:	68 85 00 00 00       	push   $0x85
c00080a6:	68 36 9b 00 c0       	push   $0xc0009b36
c00080ab:	e8 52 a5 ff ff       	call   c0002602 <panic_spin>
c00080b0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:135

	uint32_t dir_entrys_per_sec = (512 / dir_entry_size);	// 每扇区最多有几个目录项【保证了：写入目录项时不会跨扇区】
c00080b3:	b8 00 02 00 00       	mov    $0x200,%eax
c00080b8:	ba 00 00 00 00       	mov    $0x0,%edx
c00080bd:	f7 75 e8             	divl   -0x18(%ebp)
c00080c0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/dir.c:136
	int32_t block_lba = -1;
c00080c3:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
/work/x86_os_my/fs/dir.c:140


	/* 将该目录inode管理的所有块(扇区)地址(12个直接块+ 128个间接块)存入all_blocks */
	uint8_t block_idx = 0;
c00080ca:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/fs/dir.c:143
	// all_blocks 保存目录中 所有数据块的地址【4*140=560字节，去掉前12个直接块的地址48字节，后边全是间接块，后边正好是512字节】
	// 注意: all_blocks 里面并没有一级间接表的地址，只有直接块+间接块的地址！
	uint32_t all_blocks[140] = {0};
c00080ce:	8d 95 a8 fd ff ff    	lea    -0x258(%ebp),%edx
c00080d4:	b8 00 00 00 00       	mov    $0x0,%eax
c00080d9:	b9 8c 00 00 00       	mov    $0x8c,%ecx
c00080de:	89 d7                	mov    %edx,%edi
c00080e0:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/fs/dir.c:144
	while (block_idx < 12) {
c00080e2:	eb 22                	jmp    c0008106 <sync_dir_entry+0xa9>
/work/x86_os_my/fs/dir.c:145
		all_blocks[block_idx] = dir_inode->i_sectors[block_idx];
c00080e4:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00080e8:	0f b6 4d f7          	movzbl -0x9(%ebp),%ecx
c00080ec:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00080ef:	83 c1 04             	add    $0x4,%ecx
c00080f2:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
c00080f5:	89 94 85 a8 fd ff ff 	mov    %edx,-0x258(%ebp,%eax,4)
/work/x86_os_my/fs/dir.c:146
		block_idx++;
c00080fc:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0008100:	83 c0 01             	add    $0x1,%eax
c0008103:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/dir.c:144
	/* 将该目录inode管理的所有块(扇区)地址(12个直接块+ 128个间接块)存入all_blocks */
	uint8_t block_idx = 0;
	// all_blocks 保存目录中 所有数据块的地址【4*140=560字节，去掉前12个直接块的地址48字节，后边全是间接块，后边正好是512字节】
	// 注意: all_blocks 里面并没有一级间接表的地址，只有直接块+间接块的地址！
	uint32_t all_blocks[140] = {0};
	while (block_idx < 12) {
c0008106:	80 7d f7 0b          	cmpb   $0xb,-0x9(%ebp)
c000810a:	76 d8                	jbe    c00080e4 <sync_dir_entry+0x87>
/work/x86_os_my/fs/dir.c:151
		block_idx++;
	}


	/* 开始遍历所有块以寻找目录项空位 */
	block_idx = 0;
c000810c:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/fs/dir.c:152
	while (block_idx < 140) {	// 文件(包括目录)最多管理140个块
c0008110:	e9 3f 03 00 00       	jmp    c0008454 <sync_dir_entry+0x3f7>
/work/x86_os_my/fs/dir.c:155
		/* 一、若inode管理的第block_idx块是不存在的，需要分配。
		   下边是需要分配块的三种情况 @1 @2 @3 */
		int32_t block_bitmap_idx = -1;
c0008115:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:156
		if (all_blocks[block_idx] == 0) {
c000811c:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0008120:	8b 84 85 a8 fd ff ff 	mov    -0x258(%ebp,%eax,4),%eax
c0008127:	85 c0                	test   %eax,%eax
c0008129:	0f 85 58 02 00 00    	jne    c0008387 <sync_dir_entry+0x32a>
/work/x86_os_my/fs/dir.c:157
			block_lba = block_bitmap_alloc(cur_part);	// #1 从分区的block位图中，分配1个扇区，返回"扇区地址"
c000812f:	a1 50 db 00 c0       	mov    0xc000db50,%eax
c0008134:	83 ec 0c             	sub    $0xc,%esp
c0008137:	50                   	push   %eax
c0008138:	e8 98 f8 ff ff       	call   c00079d5 <block_bitmap_alloc>
c000813d:	83 c4 10             	add    $0x10,%esp
c0008140:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/dir.c:158
			if (block_lba == -1) {
c0008143:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
c0008147:	75 1a                	jne    c0008163 <sync_dir_entry+0x106>
/work/x86_os_my/fs/dir.c:159
				printk("alloc block bitmap for sync_dir_entry failed\n");
c0008149:	83 ec 0c             	sub    $0xc,%esp
c000814c:	68 60 9b 00 c0       	push   $0xc0009b60
c0008151:	e8 45 e5 ff ff       	call   c000669b <printk>
c0008156:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:160
				return false;
c0008159:	b8 00 00 00 00       	mov    $0x0,%eax
c000815e:	e9 10 03 00 00       	jmp    c0008473 <sync_dir_entry+0x416>
/work/x86_os_my/fs/dir.c:163
			}
			/* 每分配一个块就同步一次block_bitmap */
			block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
c0008163:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0008166:	a1 50 db 00 c0       	mov    0xc000db50,%eax
c000816b:	8b 40 1c             	mov    0x1c(%eax),%eax
c000816e:	8b 40 28             	mov    0x28(%eax),%eax
c0008171:	29 c2                	sub    %eax,%edx
c0008173:	89 d0                	mov    %edx,%eax
c0008175:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:164
			ASSERT(block_bitmap_idx != -1);	//怎么可能是-1啊。。。？
c0008178:	83 7d dc ff          	cmpl   $0xffffffff,-0x24(%ebp)
c000817c:	75 1c                	jne    c000819a <sync_dir_entry+0x13d>
/work/x86_os_my/fs/dir.c:164 (discriminator 1)
c000817e:	68 8e 9b 00 c0       	push   $0xc0009b8e
c0008183:	68 d0 9b 00 c0       	push   $0xc0009bd0
c0008188:	68 a4 00 00 00       	push   $0xa4
c000818d:	68 36 9b 00 c0       	push   $0xc0009b36
c0008192:	e8 6b a4 ff ff       	call   c0002602 <panic_spin>
c0008197:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:165
			bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c000819a:	8b 55 dc             	mov    -0x24(%ebp),%edx
c000819d:	a1 50 db 00 c0       	mov    0xc000db50,%eax
c00081a2:	83 ec 04             	sub    $0x4,%esp
c00081a5:	6a 01                	push   $0x1
c00081a7:	52                   	push   %edx
c00081a8:	50                   	push   %eax
c00081a9:	e8 79 f8 ff ff       	call   c0007a27 <bitmap_sync>
c00081ae:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:167

			block_bitmap_idx = -1;
c00081b1:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:168
			if (block_idx < 12) {			// @1 若是直接块
c00081b8:	80 7d f7 0b          	cmpb   $0xb,-0x9(%ebp)
c00081bc:	77 27                	ja     c00081e5 <sync_dir_entry+0x188>
/work/x86_os_my/fs/dir.c:169
				dir_inode->i_sectors[block_idx] = all_blocks[block_idx] = block_lba;
c00081be:	0f b6 4d f7          	movzbl -0x9(%ebp),%ecx
c00081c2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00081c6:	8b 55 e0             	mov    -0x20(%ebp),%edx
c00081c9:	89 94 85 a8 fd ff ff 	mov    %edx,-0x258(%ebp,%eax,4)
c00081d0:	8b 94 85 a8 fd ff ff 	mov    -0x258(%ebp,%eax,4),%edx
c00081d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00081da:	83 c1 04             	add    $0x4,%ecx
c00081dd:	89 14 88             	mov    %edx,(%eax,%ecx,4)
c00081e0:	e9 3c 01 00 00       	jmp    c0008321 <sync_dir_entry+0x2c4>
/work/x86_os_my/fs/dir.c:170
			} else if (block_idx == 12) {	// @2 若是未分配 一级间接块表(block_idx==12表示第0个间接块)
c00081e5:	80 7d f7 0c          	cmpb   $0xc,-0x9(%ebp)
c00081e9:	0f 85 ff 00 00 00    	jne    c00082ee <sync_dir_entry+0x291>
/work/x86_os_my/fs/dir.c:171
				dir_inode->i_sectors[12] = block_lba;		// 将 #1 分配的块做为"一级间接块表"地址
c00081ef:	8b 55 e0             	mov    -0x20(%ebp),%edx
c00081f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00081f5:	89 50 40             	mov    %edx,0x40(%eax)
/work/x86_os_my/fs/dir.c:173
				
				block_lba = -1;
c00081f8:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
/work/x86_os_my/fs/dir.c:174
				block_lba = block_bitmap_alloc(cur_part);	// #2 再分配一个块做为"第0个间接块"
c00081ff:	a1 50 db 00 c0       	mov    0xc000db50,%eax
c0008204:	83 ec 0c             	sub    $0xc,%esp
c0008207:	50                   	push   %eax
c0008208:	e8 c8 f7 ff ff       	call   c00079d5 <block_bitmap_alloc>
c000820d:	83 c4 10             	add    $0x10,%esp
c0008210:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/dir.c:175
				if (block_lba == -1) {
c0008213:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
c0008217:	75 57                	jne    c0008270 <sync_dir_entry+0x213>
/work/x86_os_my/fs/dir.c:177
					// 回滚block_bitmap
					block_bitmap_idx = dir_inode->i_sectors[12] - cur_part->sb->data_start_lba;
c0008219:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000821c:	8b 50 40             	mov    0x40(%eax),%edx
c000821f:	a1 50 db 00 c0       	mov    0xc000db50,%eax
c0008224:	8b 40 1c             	mov    0x1c(%eax),%eax
c0008227:	8b 40 28             	mov    0x28(%eax),%eax
c000822a:	29 c2                	sub    %eax,%edx
c000822c:	89 d0                	mov    %edx,%eax
c000822e:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:178
					bitmap_set(&cur_part->block_bitmap, block_bitmap_idx, 0);	//释放 #1
c0008231:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0008234:	8b 15 50 db 00 c0    	mov    0xc000db50,%edx
c000823a:	83 c2 20             	add    $0x20,%edx
c000823d:	83 ec 04             	sub    $0x4,%esp
c0008240:	6a 00                	push   $0x0
c0008242:	50                   	push   %eax
c0008243:	52                   	push   %edx
c0008244:	e8 27 a6 ff ff       	call   c0002870 <bitmap_set>
c0008249:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:180
					// 取消掉这个一级间接块表
					dir_inode->i_sectors[12] = 0;
c000824c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000824f:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)
/work/x86_os_my/fs/dir.c:181
					printk("alloc block bitmap for sync_dir_entry failed\n");
c0008256:	83 ec 0c             	sub    $0xc,%esp
c0008259:	68 60 9b 00 c0       	push   $0xc0009b60
c000825e:	e8 38 e4 ff ff       	call   c000669b <printk>
c0008263:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:182
					return false;
c0008266:	b8 00 00 00 00       	mov    $0x0,%eax
c000826b:	e9 03 02 00 00       	jmp    c0008473 <sync_dir_entry+0x416>
/work/x86_os_my/fs/dir.c:185
				}
				/* 每分配一个块就同步一次block_bitmap */
				block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
c0008270:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0008273:	a1 50 db 00 c0       	mov    0xc000db50,%eax
c0008278:	8b 40 1c             	mov    0x1c(%eax),%eax
c000827b:	8b 40 28             	mov    0x28(%eax),%eax
c000827e:	29 c2                	sub    %eax,%edx
c0008280:	89 d0                	mov    %edx,%eax
c0008282:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:186
				ASSERT(block_bitmap_idx != -1);
c0008285:	83 7d dc ff          	cmpl   $0xffffffff,-0x24(%ebp)
c0008289:	75 1c                	jne    c00082a7 <sync_dir_entry+0x24a>
/work/x86_os_my/fs/dir.c:186 (discriminator 1)
c000828b:	68 8e 9b 00 c0       	push   $0xc0009b8e
c0008290:	68 d0 9b 00 c0       	push   $0xc0009bd0
c0008295:	68 ba 00 00 00       	push   $0xba
c000829a:	68 36 9b 00 c0       	push   $0xc0009b36
c000829f:	e8 5e a3 ff ff       	call   c0002602 <panic_spin>
c00082a4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:187
				bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c00082a7:	8b 55 dc             	mov    -0x24(%ebp),%edx
c00082aa:	a1 50 db 00 c0       	mov    0xc000db50,%eax
c00082af:	83 ec 04             	sub    $0x4,%esp
c00082b2:	6a 01                	push   $0x1
c00082b4:	52                   	push   %edx
c00082b5:	50                   	push   %eax
c00082b6:	e8 6c f7 ff ff       	call   c0007a27 <bitmap_sync>
c00082bb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:190

				/* 把新分配的"第0个间接块地址"写入硬盘中"一级间接块表" */
				all_blocks[12] = block_lba;
c00082be:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00082c1:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
/work/x86_os_my/fs/dir.c:194
				// all_blocks 共有4*140=560字节，去掉前12个直接块的地址48字节，后边全是间接块，后边正好是512字节】
				// 注意: all_blocks 里面并没有一级间接表的地址，只有直接块+间接块的地址！
				// 我们的一级间接表大小是和普通数据块大小一样的512字节，可以容纳128个数据块的地址！
				ide_write(cur_part->my_disk, dir_inode->i_sectors[12], all_blocks + 12, 1);
c00082c7:	8d 85 a8 fd ff ff    	lea    -0x258(%ebp),%eax
c00082cd:	83 c0 30             	add    $0x30,%eax
c00082d0:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00082d3:	8b 4a 40             	mov    0x40(%edx),%ecx
c00082d6:	8b 15 50 db 00 c0    	mov    0xc000db50,%edx
c00082dc:	8b 52 08             	mov    0x8(%edx),%edx
c00082df:	6a 01                	push   $0x1
c00082e1:	50                   	push   %eax
c00082e2:	51                   	push   %ecx
c00082e3:	52                   	push   %edx
c00082e4:	e8 ad da ff ff       	call   c0005d96 <ide_write>
c00082e9:	83 c4 10             	add    $0x10,%esp
c00082ec:	eb 33                	jmp    c0008321 <sync_dir_entry+0x2c4>
/work/x86_os_my/fs/dir.c:197
			} else {						// @3 若是未分配 间接块【父目录inode管理的只有前13个数据块需要特殊处理，后边的全是间接块】
				/* 把新分配的第(block_idx-12)个间接块地址"写入硬盘中"一级间接块表 */
				all_blocks[block_idx] = block_lba;
c00082ee:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00082f2:	8b 55 e0             	mov    -0x20(%ebp),%edx
c00082f5:	89 94 85 a8 fd ff ff 	mov    %edx,-0x258(%ebp,%eax,4)
/work/x86_os_my/fs/dir.c:198
				ide_write(cur_part->my_disk, dir_inode->i_sectors[12], all_blocks + 12, 1);
c00082fc:	8d 85 a8 fd ff ff    	lea    -0x258(%ebp),%eax
c0008302:	83 c0 30             	add    $0x30,%eax
c0008305:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0008308:	8b 4a 40             	mov    0x40(%edx),%ecx
c000830b:	8b 15 50 db 00 c0    	mov    0xc000db50,%edx
c0008311:	8b 52 08             	mov    0x8(%edx),%edx
c0008314:	6a 01                	push   $0x1
c0008316:	50                   	push   %eax
c0008317:	51                   	push   %ecx
c0008318:	52                   	push   %edx
c0008319:	e8 78 da ff ff       	call   c0005d96 <ide_write>
c000831e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:204
			}


			/* 这里才是重点，前边只是处理，父目录indoe管理的某个数据块为空的情况，需要新分配数据块，包括一级间接块表、间接块 */
			/* 再将硬盘中，新目录项p_de写入新分配的间接块 */
			memset(io_buf, 0, 512);
c0008321:	83 ec 04             	sub    $0x4,%esp
c0008324:	68 00 02 00 00       	push   $0x200
c0008329:	6a 00                	push   $0x0
c000832b:	ff 75 10             	pushl  0x10(%ebp)
c000832e:	e8 e7 b6 ff ff       	call   c0003a1a <memset>
c0008333:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:205
			memcpy(io_buf, p_de, dir_entry_size);
c0008336:	83 ec 04             	sub    $0x4,%esp
c0008339:	ff 75 e8             	pushl  -0x18(%ebp)
c000833c:	ff 75 0c             	pushl  0xc(%ebp)
c000833f:	ff 75 10             	pushl  0x10(%ebp)
c0008342:	e8 25 b7 ff ff       	call   c0003a6c <memcpy>
c0008347:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:206
			ide_write(cur_part->my_disk, all_blocks[block_idx], io_buf, 1);
c000834a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000834e:	8b 94 85 a8 fd ff ff 	mov    -0x258(%ebp,%eax,4),%edx
c0008355:	a1 50 db 00 c0       	mov    0xc000db50,%eax
c000835a:	8b 40 08             	mov    0x8(%eax),%eax
c000835d:	6a 01                	push   $0x1
c000835f:	ff 75 10             	pushl  0x10(%ebp)
c0008362:	52                   	push   %edx
c0008363:	50                   	push   %eax
c0008364:	e8 2d da ff ff       	call   c0005d96 <ide_write>
c0008369:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:207
			dir_inode->i_size += dir_entry_size;	//struct inode* dir_inode = parent_dir->inode;更新的是父目录的inode结构
c000836c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000836f:	8b 50 04             	mov    0x4(%eax),%edx
c0008372:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0008375:	01 c2                	add    %eax,%edx
c0008377:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000837a:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/dir.c:208
			return true;
c000837d:	b8 01 00 00 00       	mov    $0x1,%eax
c0008382:	e9 ec 00 00 00       	jmp    c0008473 <sync_dir_entry+0x416>
/work/x86_os_my/fs/dir.c:213
		}//if (all_blocks[block_idx] == 0)


		/* 二、若inode管理的第block_idx块是存在的，不需要分配，将其读进内存，然后在该块中查找空目录项，将p_de填入 */
		ide_read(cur_part->my_disk, all_blocks[block_idx], io_buf, 1); 
c0008387:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000838b:	8b 94 85 a8 fd ff ff 	mov    -0x258(%ebp,%eax,4),%edx
c0008392:	a1 50 db 00 c0       	mov    0xc000db50,%eax
c0008397:	8b 40 08             	mov    0x8(%eax),%eax
c000839a:	6a 01                	push   $0x1
c000839c:	ff 75 10             	pushl  0x10(%ebp)
c000839f:	52                   	push   %edx
c00083a0:	50                   	push   %eax
c00083a1:	e8 7c d8 ff ff       	call   c0005c22 <ide_read>
c00083a6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:215
		/* 在扇区内查找空目录项 */
		uint8_t dir_entry_idx = 0;
c00083a9:	c6 45 f6 00          	movb   $0x0,-0xa(%ebp)
/work/x86_os_my/fs/dir.c:216
		struct dir_entry* dir_e = (struct dir_entry*)io_buf;		// dir_e用来在io_buf中遍历目录项【io_buf里面是一个一个的目录项】
c00083ad:	8b 45 10             	mov    0x10(%ebp),%eax
c00083b0:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/dir.c:217
		while (dir_entry_idx < dir_entrys_per_sec) {
c00083b3:	e9 85 00 00 00       	jmp    c000843d <sync_dir_entry+0x3e0>
/work/x86_os_my/fs/dir.c:218
			if ((dir_e + dir_entry_idx)->f_type == FT_UNKNOWN) {	// 无论是初始化或是删除文件，都会将f_type置为FT_UNKNOWN.
c00083b8:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
c00083bc:	89 d0                	mov    %edx,%eax
c00083be:	01 c0                	add    %eax,%eax
c00083c0:	01 d0                	add    %edx,%eax
c00083c2:	c1 e0 03             	shl    $0x3,%eax
c00083c5:	89 c2                	mov    %eax,%edx
c00083c7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c00083ca:	01 d0                	add    %edx,%eax
c00083cc:	8b 40 14             	mov    0x14(%eax),%eax
c00083cf:	85 c0                	test   %eax,%eax
c00083d1:	75 60                	jne    c0008433 <sync_dir_entry+0x3d6>
/work/x86_os_my/fs/dir.c:219
				memcpy(dir_e + dir_entry_idx, p_de, dir_entry_size);    
c00083d3:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
c00083d7:	89 d0                	mov    %edx,%eax
c00083d9:	01 c0                	add    %eax,%eax
c00083db:	01 d0                	add    %edx,%eax
c00083dd:	c1 e0 03             	shl    $0x3,%eax
c00083e0:	89 c2                	mov    %eax,%edx
c00083e2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c00083e5:	01 d0                	add    %edx,%eax
c00083e7:	83 ec 04             	sub    $0x4,%esp
c00083ea:	ff 75 e8             	pushl  -0x18(%ebp)
c00083ed:	ff 75 0c             	pushl  0xc(%ebp)
c00083f0:	50                   	push   %eax
c00083f1:	e8 76 b6 ff ff       	call   c0003a6c <memcpy>
c00083f6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:220
				ide_write(cur_part->my_disk, all_blocks[block_idx], io_buf, 1);
c00083f9:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00083fd:	8b 94 85 a8 fd ff ff 	mov    -0x258(%ebp,%eax,4),%edx
c0008404:	a1 50 db 00 c0       	mov    0xc000db50,%eax
c0008409:	8b 40 08             	mov    0x8(%eax),%eax
c000840c:	6a 01                	push   $0x1
c000840e:	ff 75 10             	pushl  0x10(%ebp)
c0008411:	52                   	push   %edx
c0008412:	50                   	push   %eax
c0008413:	e8 7e d9 ff ff       	call   c0005d96 <ide_write>
c0008418:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:222

				dir_inode->i_size += dir_entry_size;
c000841b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000841e:	8b 50 04             	mov    0x4(%eax),%edx
c0008421:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0008424:	01 c2                	add    %eax,%edx
c0008426:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008429:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/dir.c:223
				return true;
c000842c:	b8 01 00 00 00       	mov    $0x1,%eax
c0008431:	eb 40                	jmp    c0008473 <sync_dir_entry+0x416>
/work/x86_os_my/fs/dir.c:225
			}
			dir_entry_idx++;
c0008433:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0008437:	83 c0 01             	add    $0x1,%eax
c000843a:	88 45 f6             	mov    %al,-0xa(%ebp)
/work/x86_os_my/fs/dir.c:217
		/* 二、若inode管理的第block_idx块是存在的，不需要分配，将其读进内存，然后在该块中查找空目录项，将p_de填入 */
		ide_read(cur_part->my_disk, all_blocks[block_idx], io_buf, 1); 
		/* 在扇区内查找空目录项 */
		uint8_t dir_entry_idx = 0;
		struct dir_entry* dir_e = (struct dir_entry*)io_buf;		// dir_e用来在io_buf中遍历目录项【io_buf里面是一个一个的目录项】
		while (dir_entry_idx < dir_entrys_per_sec) {
c000843d:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0008441:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c0008444:	0f 82 6e ff ff ff    	jb     c00083b8 <sync_dir_entry+0x35b>
/work/x86_os_my/fs/dir.c:230
			dir_entry_idx++;
		}


		/* 三、若inode管理的第block_idx块是存在的，不需要分配，但是都不是空闲(FT_UNKNOWN)的 */
		block_idx++;	//下一个inode管理的block
c000844a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000844e:	83 c0 01             	add    $0x1,%eax
c0008451:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/dir.c:152
	}


	/* 开始遍历所有块以寻找目录项空位 */
	block_idx = 0;
	while (block_idx < 140) {	// 文件(包括目录)最多管理140个块
c0008454:	80 7d f7 8b          	cmpb   $0x8b,-0x9(%ebp)
c0008458:	0f 86 b7 fc ff ff    	jbe    c0008115 <sync_dir_entry+0xb8>
/work/x86_os_my/fs/dir.c:233

		/* 三、若inode管理的第block_idx块是存在的，不需要分配，但是都不是空闲(FT_UNKNOWN)的 */
		block_idx++;	//下一个inode管理的block
	}//while (block_idx < 140)

	printk("directory is full!\n");
c000845e:	83 ec 0c             	sub    $0xc,%esp
c0008461:	68 a5 9b 00 c0       	push   $0xc0009ba5
c0008466:	e8 30 e2 ff ff       	call   c000669b <printk>
c000846b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:234
	return false;
c000846e:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/dir.c:235 (discriminator 1)
}
c0008473:	8b 7d fc             	mov    -0x4(%ebp),%edi
c0008476:	c9                   	leave  
c0008477:	c3                   	ret    
