
./build/kernel.bin:     file format elf32-i386


Disassembly of section .text:

c0001500 <main>:
main():
/work/x86_os_my/kernel/main.c:36
用户进程
u_prog_a 的地址是在 0xc0000000 以上，位于内核空间，但这并不表示它无法模拟用户进程。
*/
void init(void);

int main(void) {
c0001500:	8d 4c 24 04          	lea    0x4(%esp),%ecx
c0001504:	83 e4 f0             	and    $0xfffffff0,%esp
c0001507:	ff 71 fc             	pushl  -0x4(%ecx)
c000150a:	55                   	push   %ebp
c000150b:	89 e5                	mov    %esp,%ebp
c000150d:	51                   	push   %ecx
c000150e:	83 ec 24             	sub    $0x24,%esp
/work/x86_os_my/kernel/main.c:37
	put_str("I am kernel\n");
c0001511:	83 ec 0c             	sub    $0xc,%esp
c0001514:	68 a0 d0 00 c0       	push   $0xc000d0a0
c0001519:	e8 32 0e 00 00       	call   c0002350 <put_str>
c000151e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:38
	init_all();
c0001521:	e8 28 02 00 00       	call   c000174e <init_all>
/work/x86_os_my/kernel/main.c:44

	/*************    写入应用程序    *************/
	// 1.就第一次写入到hd80M.img就行，之后注释掉这块代码。
	// 2.不用注释掉了，我们每次都让他删掉重新写入，虽然写入文件系统时的 file_size 很大，
	// 但是load程序时，读的elf头里面告诉了有几个segment是PT_LOAD可加载的，所以没关系！！！
	uint32_t file_size = 512*50;	//书上编译出来可执行程序大小是 4777 字节【改成自己程序的大小，多个程序的话，取最大值，直接搞50个扇区(25k)，省的麻烦，】
c0001526:	c7 45 f4 00 64 00 00 	movl   $0x6400,-0xc(%ebp)
/work/x86_os_my/kernel/main.c:45
	uint32_t sec_cnt = DIV_ROUND_UP(file_size, 512);
c000152d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001530:	05 ff 01 00 00       	add    $0x1ff,%eax
c0001535:	c1 e8 09             	shr    $0x9,%eax
c0001538:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/main.c:46
	struct disk* sda = &channels[0].devices[0];
c000153b:	c7 45 ec 40 3e 01 c0 	movl   $0xc0013e40,-0x14(%ebp)
/work/x86_os_my/kernel/main.c:47
	void* prog_buf = sys_malloc(file_size);
c0001542:	83 ec 0c             	sub    $0xc,%esp
c0001545:	ff 75 f4             	pushl  -0xc(%ebp)
c0001548:	e8 5f 19 00 00       	call   c0002eac <sys_malloc>
c000154d:	83 c4 10             	add    $0x10,%esp
c0001550:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/main.c:48
	if(NULL == prog_buf) {
c0001553:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0001557:	75 1a                	jne    c0001573 <main+0x73>
/work/x86_os_my/kernel/main.c:49
		printk("sys_malloc error!\n");
c0001559:	83 ec 0c             	sub    $0xc,%esp
c000155c:	68 ad d0 00 c0       	push   $0xc000d0ad
c0001561:	e8 88 59 00 00       	call   c0006eee <printk>
c0001566:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:50
		return 0;
c0001569:	b8 00 00 00 00       	mov    $0x0,%eax
c000156e:	e9 71 01 00 00       	jmp    c00016e4 <main+0x1e4>
/work/x86_os_my/kernel/main.c:55
	}

	int32_t fd;
	// 在文件系统中 写入 prog_no_arg
	sys_unlink("/prog_no_arg");						//先删掉
c0001573:	83 ec 0c             	sub    $0xc,%esp
c0001576:	68 c0 d0 00 c0       	push   $0xc000d0c0
c000157b:	e8 4d 69 00 00       	call   c0007ecd <sys_unlink>
c0001580:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:56
	ide_read(sda, 300, prog_buf, sec_cnt);
c0001583:	ff 75 f0             	pushl  -0x10(%ebp)
c0001586:	ff 75 e8             	pushl  -0x18(%ebp)
c0001589:	68 2c 01 00 00       	push   $0x12c
c000158e:	ff 75 ec             	pushl  -0x14(%ebp)
c0001591:	e8 df 4e 00 00       	call   c0006475 <ide_read>
c0001596:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:57
	fd = sys_open("/prog_no_arg", O_CREAT|O_RDWR);	//创建文件
c0001599:	83 ec 08             	sub    $0x8,%esp
c000159c:	6a 06                	push   $0x6
c000159e:	68 c0 d0 00 c0       	push   $0xc000d0c0
c00015a3:	e8 61 63 00 00       	call   c0007909 <sys_open>
c00015a8:	83 c4 10             	add    $0x10,%esp
c00015ab:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/kernel/main.c:58
	if (fd != -1) {
c00015ae:	83 7d e4 ff          	cmpl   $0xffffffff,-0x1c(%ebp)
c00015b2:	74 2b                	je     c00015df <main+0xdf>
/work/x86_os_my/kernel/main.c:59
		if(sys_write(fd, prog_buf, file_size) == -1) {		//写入文件
c00015b4:	83 ec 04             	sub    $0x4,%esp
c00015b7:	ff 75 f4             	pushl  -0xc(%ebp)
c00015ba:	ff 75 e8             	pushl  -0x18(%ebp)
c00015bd:	ff 75 e4             	pushl  -0x1c(%ebp)
c00015c0:	e8 50 66 00 00       	call   c0007c15 <sys_write>
c00015c5:	83 c4 10             	add    $0x10,%esp
c00015c8:	83 f8 ff             	cmp    $0xffffffff,%eax
c00015cb:	75 12                	jne    c00015df <main+0xdf>
/work/x86_os_my/kernel/main.c:60
			printk("file write error!\n");
c00015cd:	83 ec 0c             	sub    $0xc,%esp
c00015d0:	68 cd d0 00 c0       	push   $0xc000d0cd
c00015d5:	e8 14 59 00 00       	call   c0006eee <printk>
c00015da:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:61 (discriminator 1)
			while(1);
c00015dd:	eb fe                	jmp    c00015dd <main+0xdd>
/work/x86_os_my/kernel/main.c:66
		}
	}

	// 在文件系统中 写入 prog_arg
	sys_unlink("/prog_arg");						//先删掉
c00015df:	83 ec 0c             	sub    $0xc,%esp
c00015e2:	68 e0 d0 00 c0       	push   $0xc000d0e0
c00015e7:	e8 e1 68 00 00       	call   c0007ecd <sys_unlink>
c00015ec:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:67
	ide_read(sda, 400, prog_buf, sec_cnt);
c00015ef:	ff 75 f0             	pushl  -0x10(%ebp)
c00015f2:	ff 75 e8             	pushl  -0x18(%ebp)
c00015f5:	68 90 01 00 00       	push   $0x190
c00015fa:	ff 75 ec             	pushl  -0x14(%ebp)
c00015fd:	e8 73 4e 00 00       	call   c0006475 <ide_read>
c0001602:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:68
	fd = sys_open("/prog_arg", O_CREAT|O_RDWR);		//创建文件
c0001605:	83 ec 08             	sub    $0x8,%esp
c0001608:	6a 06                	push   $0x6
c000160a:	68 e0 d0 00 c0       	push   $0xc000d0e0
c000160f:	e8 f5 62 00 00       	call   c0007909 <sys_open>
c0001614:	83 c4 10             	add    $0x10,%esp
c0001617:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/kernel/main.c:69
	if (fd != -1) {
c000161a:	83 7d e4 ff          	cmpl   $0xffffffff,-0x1c(%ebp)
c000161e:	74 2b                	je     c000164b <main+0x14b>
/work/x86_os_my/kernel/main.c:70
		if(sys_write(fd, prog_buf, file_size) == -1) {		//写入文件
c0001620:	83 ec 04             	sub    $0x4,%esp
c0001623:	ff 75 f4             	pushl  -0xc(%ebp)
c0001626:	ff 75 e8             	pushl  -0x18(%ebp)
c0001629:	ff 75 e4             	pushl  -0x1c(%ebp)
c000162c:	e8 e4 65 00 00       	call   c0007c15 <sys_write>
c0001631:	83 c4 10             	add    $0x10,%esp
c0001634:	83 f8 ff             	cmp    $0xffffffff,%eax
c0001637:	75 12                	jne    c000164b <main+0x14b>
/work/x86_os_my/kernel/main.c:71
			printk("file write error!\n");
c0001639:	83 ec 0c             	sub    $0xc,%esp
c000163c:	68 cd d0 00 c0       	push   $0xc000d0cd
c0001641:	e8 a8 58 00 00       	call   c0006eee <printk>
c0001646:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:72 (discriminator 2)
			while(1);
c0001649:	eb fe                	jmp    c0001649 <main+0x149>
/work/x86_os_my/kernel/main.c:77
		}
	}
	
	// 在文件系统中 写入 cat
	sys_unlink("/cat");							//先删掉
c000164b:	83 ec 0c             	sub    $0xc,%esp
c000164e:	68 ea d0 00 c0       	push   $0xc000d0ea
c0001653:	e8 75 68 00 00       	call   c0007ecd <sys_unlink>
c0001658:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:78
	ide_read(sda, 500, prog_buf, sec_cnt);
c000165b:	ff 75 f0             	pushl  -0x10(%ebp)
c000165e:	ff 75 e8             	pushl  -0x18(%ebp)
c0001661:	68 f4 01 00 00       	push   $0x1f4
c0001666:	ff 75 ec             	pushl  -0x14(%ebp)
c0001669:	e8 07 4e 00 00       	call   c0006475 <ide_read>
c000166e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:79
	fd = sys_open("/cat", O_CREAT|O_RDWR);		//创建文件
c0001671:	83 ec 08             	sub    $0x8,%esp
c0001674:	6a 06                	push   $0x6
c0001676:	68 ea d0 00 c0       	push   $0xc000d0ea
c000167b:	e8 89 62 00 00       	call   c0007909 <sys_open>
c0001680:	83 c4 10             	add    $0x10,%esp
c0001683:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/kernel/main.c:80
	if (fd != -1) {
c0001686:	83 7d e4 ff          	cmpl   $0xffffffff,-0x1c(%ebp)
c000168a:	74 2b                	je     c00016b7 <main+0x1b7>
/work/x86_os_my/kernel/main.c:81
		if(sys_write(fd, prog_buf, file_size) == -1) {		//写入文件
c000168c:	83 ec 04             	sub    $0x4,%esp
c000168f:	ff 75 f4             	pushl  -0xc(%ebp)
c0001692:	ff 75 e8             	pushl  -0x18(%ebp)
c0001695:	ff 75 e4             	pushl  -0x1c(%ebp)
c0001698:	e8 78 65 00 00       	call   c0007c15 <sys_write>
c000169d:	83 c4 10             	add    $0x10,%esp
c00016a0:	83 f8 ff             	cmp    $0xffffffff,%eax
c00016a3:	75 12                	jne    c00016b7 <main+0x1b7>
/work/x86_os_my/kernel/main.c:82
			printk("file write error!\n");
c00016a5:	83 ec 0c             	sub    $0xc,%esp
c00016a8:	68 cd d0 00 c0       	push   $0xc000d0cd
c00016ad:	e8 3c 58 00 00       	call   c0006eee <printk>
c00016b2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:83 (discriminator 3)
			while(1);
c00016b5:	eb fe                	jmp    c00016b5 <main+0x1b5>
/work/x86_os_my/kernel/main.c:87
		}
	}
	/*************    写入应用程序结束   *************/
	cls_screen();
c00016b7:	e8 7f 0d 00 00       	call   c000243b <cls_screen>
/work/x86_os_my/kernel/main.c:88
	console_put_str("[rabbit@localhost /]$ ");
c00016bc:	83 ec 0c             	sub    $0xc,%esp
c00016bf:	68 ef d0 00 c0       	push   $0xc000d0ef
c00016c4:	e8 67 35 00 00       	call   c0004c30 <console_put_str>
c00016c9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:89
	thread_exit(running_thread(), true);
c00016cc:	e8 1b 27 00 00       	call   c0003dec <running_thread>
c00016d1:	83 ec 08             	sub    $0x8,%esp
c00016d4:	6a 01                	push   $0x1
c00016d6:	50                   	push   %eax
c00016d7:	e8 46 31 00 00       	call   c0004822 <thread_exit>
c00016dc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:90
	return 0;
c00016df:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/kernel/main.c:91
}
c00016e4:	8b 4d fc             	mov    -0x4(%ebp),%ecx
c00016e7:	c9                   	leave  
c00016e8:	8d 61 fc             	lea    -0x4(%ecx),%esp
c00016eb:	c3                   	ret    

c00016ec <init>:
init():
/work/x86_os_my/kernel/main.c:94

/* init进程 */
void init(void) {
c00016ec:	55                   	push   %ebp
c00016ed:	89 e5                	mov    %esp,%ebp
c00016ef:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/main.c:95
	uint32_t ret_pid = fork();
c00016f2:	e8 12 44 00 00       	call   c0005b09 <fork>
c00016f7:	98                   	cwtl   
c00016f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/main.c:96
	if(ret_pid) {  // 父进程
c00016fb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c00016ff:	74 2c                	je     c000172d <init+0x41>
/work/x86_os_my/kernel/main.c:101 (discriminator 1)
		int status;
		int child_pid;
		/* init在此处不停的回收僵尸进程 */
		while(1) {
			child_pid = wait(&status);
c0001701:	83 ec 0c             	sub    $0xc,%esp
c0001704:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0001707:	50                   	push   %eax
c0001708:	e8 69 46 00 00       	call   c0005d76 <wait>
c000170d:	83 c4 10             	add    $0x10,%esp
c0001710:	98                   	cwtl   
c0001711:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/main.c:102 (discriminator 1)
			printf("I`m init, My pid is 1, I recieve a child, It`s pid is %d, status is %d\n", child_pid, status);
c0001714:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0001717:	83 ec 04             	sub    $0x4,%esp
c000171a:	50                   	push   %eax
c000171b:	ff 75 f0             	pushl  -0x10(%ebp)
c000171e:	68 08 d1 00 c0       	push   $0xc000d108
c0001723:	e8 ce 49 00 00       	call   c00060f6 <printf>
c0001728:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:103 (discriminator 1)
		}
c000172b:	eb d4                	jmp    c0001701 <init+0x15>
/work/x86_os_my/kernel/main.c:105
	} else {	  // 子进程
		my_shell();
c000172d:	e8 19 a6 00 00       	call   c000bd4b <my_shell>
/work/x86_os_my/kernel/main.c:107
	}
	panic("init: should not be here");
c0001732:	68 50 d1 00 c0       	push   $0xc000d150
c0001737:	68 78 d1 00 c0       	push   $0xc000d178
c000173c:	6a 6b                	push   $0x6b
c000173e:	68 69 d1 00 c0       	push   $0xc000d169
c0001743:	e8 9e a9 00 00       	call   c000c0e6 <user_spin>
c0001748:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:108
}
c000174b:	90                   	nop
c000174c:	c9                   	leave  
c000174d:	c3                   	ret    

c000174e <init_all>:
init_all():
/work/x86_os_my/kernel/init.c:15
#include "syscall-init.h"
#include "ide.h"
#include "fs.h"

/*负责初始化所有模块 */
void init_all() {
c000174e:	55                   	push   %ebp
c000174f:	89 e5                	mov    %esp,%ebp
c0001751:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/kernel/init.c:16
	put_str("init_all\n");
c0001754:	83 ec 0c             	sub    $0xc,%esp
c0001757:	68 7d d1 00 c0       	push   $0xc000d17d
c000175c:	e8 ef 0b 00 00       	call   c0002350 <put_str>
c0001761:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/init.c:17
	idt_init();			// 初始化中断
c0001764:	e8 38 04 00 00       	call   c0001ba1 <idt_init>
/work/x86_os_my/kernel/init.c:18
	mem_init();			// 初始化内存管理系统
c0001769:	e8 46 22 00 00       	call   c00039b4 <mem_init>
/work/x86_os_my/kernel/init.c:19
	thread_init();		// 初始化线程相关结构
c000176e:	e8 e3 31 00 00       	call   c0004956 <thread_init>
/work/x86_os_my/kernel/init.c:20
	timer_init();		// 初始化PIT
c0001773:	e8 16 06 00 00       	call   c0001d8e <timer_init>
/work/x86_os_my/kernel/init.c:21
	console_init();		// 控制台初始化最好放在开中断之前
c0001778:	e8 68 34 00 00       	call   c0004be5 <console_init>
/work/x86_os_my/kernel/init.c:22
	keyboard_init();	// 键盘初始化
c000177d:	e8 e1 3a 00 00       	call   c0005263 <keyboard_init>
/work/x86_os_my/kernel/init.c:23
	tss_init();			// tss初始化
c0001782:	e8 97 3e 00 00       	call   c000561e <tss_init>
/work/x86_os_my/kernel/init.c:24
	syscall_init();		// 初始化系统调用
c0001787:	e8 1b 46 00 00       	call   c0005da7 <syscall_init>
/work/x86_os_my/kernel/init.c:25
	intr_enable();		// 后面的ide_init需要打开中断
c000178c:	e8 5f 03 00 00       	call   c0001af0 <intr_enable>
/work/x86_os_my/kernel/init.c:26
	ide_init();			// 初始化硬盘
c0001791:	e8 4c 55 00 00       	call   c0006ce2 <ide_init>
/work/x86_os_my/kernel/init.c:27
	filesys_init();		// 初始化文件系统
c0001796:	e8 23 76 00 00       	call   c0008dbe <filesys_init>
/work/x86_os_my/kernel/init.c:28
}
c000179b:	90                   	nop
c000179c:	c9                   	leave  
c000179d:	c3                   	ret    

c000179e <outb>:
outb():
/work/x86_os_my/lib/kernel/io.h:17
#define __LIB_IO_H
#include "stdint.h"
//inline省去了函数调用开支

/* 向端口port写入一个字节*/
static inline void outb(uint16_t port, uint8_t data) {
c000179e:	55                   	push   %ebp
c000179f:	89 e5                	mov    %esp,%ebp
c00017a1:	83 ec 08             	sub    $0x8,%esp
c00017a4:	8b 55 08             	mov    0x8(%ebp),%edx
c00017a7:	8b 45 0c             	mov    0xc(%ebp),%eax
c00017aa:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c00017ae:	88 45 f8             	mov    %al,-0x8(%ebp)
/work/x86_os_my/lib/kernel/io.h:21
/*********************************************************
 a表示用寄存器al或ax或eax,对端口指定N表示0~255, d表示用dx存储端口号, 
 %b0表示对应al,%w1表示对应dx */ 
   asm volatile ( "outb %b0, %w1" : : "a" (data), "Nd" (port));    
c00017b1:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c00017b5:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c00017b9:	ee                   	out    %al,(%dx)
/work/x86_os_my/lib/kernel/io.h:23
/******************************************************/
}
c00017ba:	90                   	nop
c00017bb:	c9                   	leave  
c00017bc:	c3                   	ret    

c00017bd <pic_init>:
pic_init():
/work/x86_os_my/kernel/interrupt.c:41
//自定义类型 intr_handler = void*
extern intr_handler intr_entry_table[IDT_DESC_CNT];	    // 声明引用汇编kernel.S中的中断处理函数入口数组

/* 初始化可编程中断控制器8259A */
// outb 来着 lib/kernel/io.h 内联汇编写法
static void pic_init(void) {
c00017bd:	55                   	push   %ebp
c00017be:	89 e5                	mov    %esp,%ebp
c00017c0:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:43
	/* 初始化主片 */
	outb (PIC_M_CTRL, 0x11);	// ICW1: 边沿触发,级联8259, 需要ICW4.
c00017c3:	6a 11                	push   $0x11
c00017c5:	6a 20                	push   $0x20
c00017c7:	e8 d2 ff ff ff       	call   c000179e <outb>
c00017cc:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:44
	outb (PIC_M_DATA, 0x20);	// ICW2: 起始中断向量号为0x20,也就是IR[0-7] 为 0x20 ~ 0x27.
c00017cf:	6a 20                	push   $0x20
c00017d1:	6a 21                	push   $0x21
c00017d3:	e8 c6 ff ff ff       	call   c000179e <outb>
c00017d8:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:45
	outb (PIC_M_DATA, 0x04);	// ICW3: IR2接从片. 
c00017db:	6a 04                	push   $0x4
c00017dd:	6a 21                	push   $0x21
c00017df:	e8 ba ff ff ff       	call   c000179e <outb>
c00017e4:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:46
	outb (PIC_M_DATA, 0x01);	// ICW4: 8086模式, 正常EOI
c00017e7:	6a 01                	push   $0x1
c00017e9:	6a 21                	push   $0x21
c00017eb:	e8 ae ff ff ff       	call   c000179e <outb>
c00017f0:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:49

	/* 初始化从片 */
	outb (PIC_S_CTRL, 0x11);	// ICW1: 边沿触发,级联8259, 需要ICW4.
c00017f3:	6a 11                	push   $0x11
c00017f5:	68 a0 00 00 00       	push   $0xa0
c00017fa:	e8 9f ff ff ff       	call   c000179e <outb>
c00017ff:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:50
	outb (PIC_S_DATA, 0x28);	// ICW2: 起始中断向量号为0x28,也就是IR[8-15] 为 0x28 ~ 0x2F.
c0001802:	6a 28                	push   $0x28
c0001804:	68 a1 00 00 00       	push   $0xa1
c0001809:	e8 90 ff ff ff       	call   c000179e <outb>
c000180e:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:51
	outb (PIC_S_DATA, 0x02);	// ICW3: 设置从片连接到主片的IR2引脚
c0001811:	6a 02                	push   $0x2
c0001813:	68 a1 00 00 00       	push   $0xa1
c0001818:	e8 81 ff ff ff       	call   c000179e <outb>
c000181d:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:52
	outb (PIC_S_DATA, 0x01);	// ICW4: 8086模式, 正常EOI
c0001820:	6a 01                	push   $0x1
c0001822:	68 a1 00 00 00       	push   $0xa1
c0001827:	e8 72 ff ff ff       	call   c000179e <outb>
c000182c:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:56

	/* IRQ2用于级联从片,必须打开,否则无法响应从片上的中断
	主片上打开的中断有IRQ0的时钟,IRQ1的键盘和级联从片的IRQ2,其它全部关闭 */
	outb (PIC_M_DATA, 0xf8);
c000182f:	68 f8 00 00 00       	push   $0xf8
c0001834:	6a 21                	push   $0x21
c0001836:	e8 63 ff ff ff       	call   c000179e <outb>
c000183b:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:58
	/* 打开从片上的IRQ14,此引脚接收硬盘控制器的中断 */
	outb (PIC_S_DATA, 0xbf);
c000183e:	68 bf 00 00 00       	push   $0xbf
c0001843:	68 a1 00 00 00       	push   $0xa1
c0001848:	e8 51 ff ff ff       	call   c000179e <outb>
c000184d:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:60

	put_str("   pic_init done\n");
c0001850:	83 ec 0c             	sub    $0xc,%esp
c0001853:	68 88 d1 00 c0       	push   $0xc000d188
c0001858:	e8 f3 0a 00 00       	call   c0002350 <put_str>
c000185d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:61
}
c0001860:	90                   	nop
c0001861:	c9                   	leave  
c0001862:	c3                   	ret    

c0001863 <make_idt_desc>:
make_idt_desc():
/work/x86_os_my/kernel/interrupt.c:64

/* 创建中断门描述符 */
static void make_idt_desc(struct gate_desc* p_gdesc, uint8_t attr, intr_handler function) { 
c0001863:	55                   	push   %ebp
c0001864:	89 e5                	mov    %esp,%ebp
c0001866:	83 ec 04             	sub    $0x4,%esp
c0001869:	8b 45 0c             	mov    0xc(%ebp),%eax
c000186c:	88 45 fc             	mov    %al,-0x4(%ebp)
/work/x86_os_my/kernel/interrupt.c:65
	p_gdesc->func_offset_low_word = (uint32_t)function & 0x0000FFFF;
c000186f:	8b 45 10             	mov    0x10(%ebp),%eax
c0001872:	89 c2                	mov    %eax,%edx
c0001874:	8b 45 08             	mov    0x8(%ebp),%eax
c0001877:	66 89 10             	mov    %dx,(%eax)
/work/x86_os_my/kernel/interrupt.c:66
	p_gdesc->selector = SELECTOR_K_CODE;
c000187a:	8b 45 08             	mov    0x8(%ebp),%eax
c000187d:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
/work/x86_os_my/kernel/interrupt.c:67
	p_gdesc->dcount = 0;
c0001883:	8b 45 08             	mov    0x8(%ebp),%eax
c0001886:	c6 40 04 00          	movb   $0x0,0x4(%eax)
/work/x86_os_my/kernel/interrupt.c:68
	p_gdesc->attribute = attr;
c000188a:	8b 45 08             	mov    0x8(%ebp),%eax
c000188d:	0f b6 55 fc          	movzbl -0x4(%ebp),%edx
c0001891:	88 50 05             	mov    %dl,0x5(%eax)
/work/x86_os_my/kernel/interrupt.c:69
	p_gdesc->func_offset_high_word = ((uint32_t)function & 0xFFFF0000) >> 16;
c0001894:	8b 45 10             	mov    0x10(%ebp),%eax
c0001897:	c1 e8 10             	shr    $0x10,%eax
c000189a:	89 c2                	mov    %eax,%edx
c000189c:	8b 45 08             	mov    0x8(%ebp),%eax
c000189f:	66 89 50 06          	mov    %dx,0x6(%eax)
/work/x86_os_my/kernel/interrupt.c:70
}
c00018a3:	90                   	nop
c00018a4:	c9                   	leave  
c00018a5:	c3                   	ret    

c00018a6 <idt_desc_init>:
idt_desc_init():
/work/x86_os_my/kernel/interrupt.c:73

/*初始化中断描述符表*/
static void idt_desc_init(void) {
c00018a6:	55                   	push   %ebp
c00018a7:	89 e5                	mov    %esp,%ebp
c00018a9:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/interrupt.c:75
	int i;
	int lastindex = IDT_DESC_CNT - 1;
c00018ac:	c7 45 f0 80 00 00 00 	movl   $0x80,-0x10(%ebp)
/work/x86_os_my/kernel/interrupt.c:76
	for (i = 0; i < IDT_DESC_CNT; i++) {
c00018b3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c00018ba:	eb 29                	jmp    c00018e5 <idt_desc_init+0x3f>
/work/x86_os_my/kernel/interrupt.c:77 (discriminator 3)
		make_idt_desc(&idt[i], IDT_DESC_ATTR_DPL0, intr_entry_table[i]); 
c00018bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00018bf:	8b 04 85 00 2a 01 c0 	mov    -0x3ffed600(,%eax,4),%eax
c00018c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c00018c9:	c1 e2 03             	shl    $0x3,%edx
c00018cc:	81 c2 60 2b 01 c0    	add    $0xc0012b60,%edx
c00018d2:	50                   	push   %eax
c00018d3:	68 8e 00 00 00       	push   $0x8e
c00018d8:	52                   	push   %edx
c00018d9:	e8 85 ff ff ff       	call   c0001863 <make_idt_desc>
c00018de:	83 c4 0c             	add    $0xc,%esp
/work/x86_os_my/kernel/interrupt.c:76 (discriminator 3)

/*初始化中断描述符表*/
static void idt_desc_init(void) {
	int i;
	int lastindex = IDT_DESC_CNT - 1;
	for (i = 0; i < IDT_DESC_CNT; i++) {
c00018e1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:76 (discriminator 1)
c00018e5:	81 7d f4 80 00 00 00 	cmpl   $0x80,-0xc(%ebp)
c00018ec:	7e ce                	jle    c00018bc <idt_desc_init+0x16>
/work/x86_os_my/kernel/interrupt.c:81
		make_idt_desc(&idt[i], IDT_DESC_ATTR_DPL0, intr_entry_table[i]); 
	}
	/* 系统调用对应的中断门dpl为3！
	 * 中断处理程序为单独的syscall_handler */
	make_idt_desc(&idt[lastindex], IDT_DESC_ATTR_DPL3, syscall_handler);
c00018ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00018f1:	c1 e0 03             	shl    $0x3,%eax
c00018f4:	05 60 2b 01 c0       	add    $0xc0012b60,%eax
c00018f9:	68 27 23 00 c0       	push   $0xc0002327
c00018fe:	68 ee 00 00 00       	push   $0xee
c0001903:	50                   	push   %eax
c0001904:	e8 5a ff ff ff       	call   c0001863 <make_idt_desc>
c0001909:	83 c4 0c             	add    $0xc,%esp
/work/x86_os_my/kernel/interrupt.c:82
	put_str("   idt_desc_init done\n");
c000190c:	83 ec 0c             	sub    $0xc,%esp
c000190f:	68 9a d1 00 c0       	push   $0xc000d19a
c0001914:	e8 37 0a 00 00       	call   c0002350 <put_str>
c0001919:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:83
}
c000191c:	90                   	nop
c000191d:	c9                   	leave  
c000191e:	c3                   	ret    

c000191f <general_intr_handler>:
general_intr_handler():
/work/x86_os_my/kernel/interrupt.c:86

/* 通用的中断处理函数,一般用在异常出现时的处理 */
static void general_intr_handler(uint8_t vec_nr) {
c000191f:	55                   	push   %ebp
c0001920:	89 e5                	mov    %esp,%ebp
c0001922:	83 ec 28             	sub    $0x28,%esp
c0001925:	8b 45 08             	mov    0x8(%ebp),%eax
c0001928:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/kernel/interrupt.c:87
	if (vec_nr == 0x27 || vec_nr == 0x2f) {	// 0x2f是从片8259A上的最后一个irq引脚，保留
c000192b:	80 7d e4 27          	cmpb   $0x27,-0x1c(%ebp)
c000192f:	0f 84 bf 00 00 00    	je     c00019f4 <general_intr_handler+0xd5>
/work/x86_os_my/kernel/interrupt.c:87 (discriminator 1)
c0001935:	80 7d e4 2f          	cmpb   $0x2f,-0x1c(%ebp)
c0001939:	0f 84 b5 00 00 00    	je     c00019f4 <general_intr_handler+0xd5>
/work/x86_os_my/kernel/interrupt.c:92
		return;	//IRQ7和IRQ15会产生伪中断(spurious interrupt),无须处理。
	}
	
	/* 将光标置为左上角 并清空一片区域 */
	set_cursor(0);
c000193f:	83 ec 0c             	sub    $0xc,%esp
c0001942:	6a 00                	push   $0x0
c0001944:	e8 94 0b 00 00       	call   c00024dd <set_cursor>
c0001949:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:93
	int cursor_pos = 0;
c000194c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:94
	while(cursor_pos < 320) {
c0001953:	eb 11                	jmp    c0001966 <general_intr_handler+0x47>
/work/x86_os_my/kernel/interrupt.c:95
		put_char(' ');
c0001955:	83 ec 0c             	sub    $0xc,%esp
c0001958:	6a 20                	push   $0x20
c000195a:	e8 0f 0a 00 00       	call   c000236e <put_char>
c000195f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:96
		cursor_pos++;
c0001962:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:94
	}
	
	/* 将光标置为左上角 并清空一片区域 */
	set_cursor(0);
	int cursor_pos = 0;
	while(cursor_pos < 320) {
c0001966:	81 7d f4 3f 01 00 00 	cmpl   $0x13f,-0xc(%ebp)
c000196d:	7e e6                	jle    c0001955 <general_intr_handler+0x36>
/work/x86_os_my/kernel/interrupt.c:100
		put_char(' ');
		cursor_pos++;
	}

	/* 将光标置为左上角 打印信息 */
	set_cursor(0);
c000196f:	83 ec 0c             	sub    $0xc,%esp
c0001972:	6a 00                	push   $0x0
c0001974:	e8 64 0b 00 00       	call   c00024dd <set_cursor>
c0001979:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:101
	put_str("!!!!!!!      excetion message begin  !!!!!!!!\n");
c000197c:	83 ec 0c             	sub    $0xc,%esp
c000197f:	68 b4 d1 00 c0       	push   $0xc000d1b4
c0001984:	e8 c7 09 00 00       	call   c0002350 <put_str>
c0001989:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:102
	set_cursor(88);			// 第2行第8个字符
c000198c:	83 ec 0c             	sub    $0xc,%esp
c000198f:	6a 58                	push   $0x58
c0001991:	e8 47 0b 00 00       	call   c00024dd <set_cursor>
c0001996:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:103
	put_str(intr_name[vec_nr]);
c0001999:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c000199d:	8b 04 85 00 37 01 c0 	mov    -0x3ffec900(,%eax,4),%eax
c00019a4:	83 ec 0c             	sub    $0xc,%esp
c00019a7:	50                   	push   %eax
c00019a8:	e8 a3 09 00 00       	call   c0002350 <put_str>
c00019ad:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:104
	if (vec_nr == 14) {		// 若为Pagefault,将缺失的地址打印出来并悬停
c00019b0:	80 7d e4 0e          	cmpb   $0xe,-0x1c(%ebp)
c00019b4:	75 2c                	jne    c00019e2 <general_intr_handler+0xc3>
/work/x86_os_my/kernel/interrupt.c:105
		int page_fault_vaddr = 0; 
c00019b6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/kernel/interrupt.c:106
		asm ("movl %%cr2, %0" : "=r" (page_fault_vaddr));	  // cr2是存放造成page_fault的地址
c00019bd:	0f 20 d0             	mov    %cr2,%eax
c00019c0:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/interrupt.c:107
		put_str("\npage fault addr is 0x");
c00019c3:	83 ec 0c             	sub    $0xc,%esp
c00019c6:	68 e3 d1 00 c0       	push   $0xc000d1e3
c00019cb:	e8 80 09 00 00       	call   c0002350 <put_str>
c00019d0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:108
		put_int(page_fault_vaddr); 
c00019d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00019d6:	83 ec 0c             	sub    $0xc,%esp
c00019d9:	50                   	push   %eax
c00019da:	e8 9b 0a 00 00       	call   c000247a <put_int>
c00019df:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:110
	}
	put_str("\n!!!!!!!      excetion message end    !!!!!!!!\n");
c00019e2:	83 ec 0c             	sub    $0xc,%esp
c00019e5:	68 fc d1 00 c0       	push   $0xc000d1fc
c00019ea:	e8 61 09 00 00       	call   c0002350 <put_str>
c00019ef:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:113 (discriminator 1)
	// 能进入中断处理程序就表示已经处在关中断情况下, IF=0
	// 不会出现调度进程的情况。故下面的死循环不会再被中断，会卡死在这里。
	while(1);
c00019f2:	eb fe                	jmp    c00019f2 <general_intr_handler+0xd3>
/work/x86_os_my/kernel/interrupt.c:88
}

/* 通用的中断处理函数,一般用在异常出现时的处理 */
static void general_intr_handler(uint8_t vec_nr) {
	if (vec_nr == 0x27 || vec_nr == 0x2f) {	// 0x2f是从片8259A上的最后一个irq引脚，保留
		return;	//IRQ7和IRQ15会产生伪中断(spurious interrupt),无须处理。
c00019f4:	90                   	nop
/work/x86_os_my/kernel/interrupt.c:114
	}
	put_str("\n!!!!!!!      excetion message end    !!!!!!!!\n");
	// 能进入中断处理程序就表示已经处在关中断情况下, IF=0
	// 不会出现调度进程的情况。故下面的死循环不会再被中断，会卡死在这里。
	while(1);
}
c00019f5:	c9                   	leave  
c00019f6:	c3                   	ret    

c00019f7 <exception_init>:
exception_init():
/work/x86_os_my/kernel/interrupt.c:117

/* 完成一般中断处理函数注册及异常名称注册 */
static void exception_init(void) {
c00019f7:	55                   	push   %ebp
c00019f8:	89 e5                	mov    %esp,%ebp
c00019fa:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:119
	int i;
	for (i = 0; i < IDT_DESC_CNT; i++) {
c00019fd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0001a04:	eb 20                	jmp    c0001a26 <exception_init+0x2f>
/work/x86_os_my/kernel/interrupt.c:122 (discriminator 3)
	/* idt_table数组中的函数是在进入中断后根据中断向量号调用的,
	 * 见kernel/kernel.S的call [idt_table + %1*4] */
		idt_table[i] = general_intr_handler;		// 默认为general_intr_handler，以后会由register_handler来注册具体处理函数。
c0001a06:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0001a09:	c7 04 85 20 39 01 c0 	movl   $0xc000191f,-0x3ffec6e0(,%eax,4)
c0001a10:	1f 19 00 c0 
/work/x86_os_my/kernel/interrupt.c:123 (discriminator 3)
		intr_name[i] = "unknown";					// 先统一赋值为unknown 
c0001a14:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0001a17:	c7 04 85 00 37 01 c0 	movl   $0xc000d22c,-0x3ffec900(,%eax,4)
c0001a1e:	2c d2 00 c0 
/work/x86_os_my/kernel/interrupt.c:119 (discriminator 3)
}

/* 完成一般中断处理函数注册及异常名称注册 */
static void exception_init(void) {
	int i;
	for (i = 0; i < IDT_DESC_CNT; i++) {
c0001a22:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
/work/x86_os_my/kernel/interrupt.c:119 (discriminator 1)
c0001a26:	81 7d fc 80 00 00 00 	cmpl   $0x80,-0x4(%ebp)
c0001a2d:	7e d7                	jle    c0001a06 <exception_init+0xf>
/work/x86_os_my/kernel/interrupt.c:125
	/* idt_table数组中的函数是在进入中断后根据中断向量号调用的,
	 * 见kernel/kernel.S的call [idt_table + %1*4] */
		idt_table[i] = general_intr_handler;		// 默认为general_intr_handler，以后会由register_handler来注册具体处理函数。
		intr_name[i] = "unknown";					// 先统一赋值为unknown 
	}
	intr_name[0] = "#DE Divide Error";
c0001a2f:	c7 05 00 37 01 c0 34 	movl   $0xc000d234,0xc0013700
c0001a36:	d2 00 c0 
/work/x86_os_my/kernel/interrupt.c:126
	intr_name[1] = "#DB Debug Exception";
c0001a39:	c7 05 04 37 01 c0 45 	movl   $0xc000d245,0xc0013704
c0001a40:	d2 00 c0 
/work/x86_os_my/kernel/interrupt.c:127
	intr_name[2] = "NMI Interrupt";
c0001a43:	c7 05 08 37 01 c0 59 	movl   $0xc000d259,0xc0013708
c0001a4a:	d2 00 c0 
/work/x86_os_my/kernel/interrupt.c:128
	intr_name[3] = "#BP Breakpoint Exception";
c0001a4d:	c7 05 0c 37 01 c0 67 	movl   $0xc000d267,0xc001370c
c0001a54:	d2 00 c0 
/work/x86_os_my/kernel/interrupt.c:129
	intr_name[4] = "#OF Overflow Exception";
c0001a57:	c7 05 10 37 01 c0 80 	movl   $0xc000d280,0xc0013710
c0001a5e:	d2 00 c0 
/work/x86_os_my/kernel/interrupt.c:130
	intr_name[5] = "#BR BOUND Range Exceeded Exception";
c0001a61:	c7 05 14 37 01 c0 98 	movl   $0xc000d298,0xc0013714
c0001a68:	d2 00 c0 
/work/x86_os_my/kernel/interrupt.c:131
	intr_name[6] = "#UD Invalid Opcode Exception";
c0001a6b:	c7 05 18 37 01 c0 bb 	movl   $0xc000d2bb,0xc0013718
c0001a72:	d2 00 c0 
/work/x86_os_my/kernel/interrupt.c:132
	intr_name[7] = "#NM Device Not Available Exception";
c0001a75:	c7 05 1c 37 01 c0 d8 	movl   $0xc000d2d8,0xc001371c
c0001a7c:	d2 00 c0 
/work/x86_os_my/kernel/interrupt.c:133
	intr_name[8] = "#DF Double Fault Exception";
c0001a7f:	c7 05 20 37 01 c0 fb 	movl   $0xc000d2fb,0xc0013720
c0001a86:	d2 00 c0 
/work/x86_os_my/kernel/interrupt.c:134
	intr_name[9] = "Coprocessor Segment Overrun";
c0001a89:	c7 05 24 37 01 c0 16 	movl   $0xc000d316,0xc0013724
c0001a90:	d3 00 c0 
/work/x86_os_my/kernel/interrupt.c:135
	intr_name[10] = "#TS Invalid TSS Exception";
c0001a93:	c7 05 28 37 01 c0 32 	movl   $0xc000d332,0xc0013728
c0001a9a:	d3 00 c0 
/work/x86_os_my/kernel/interrupt.c:136
	intr_name[11] = "#NP Segment Not Present";
c0001a9d:	c7 05 2c 37 01 c0 4c 	movl   $0xc000d34c,0xc001372c
c0001aa4:	d3 00 c0 
/work/x86_os_my/kernel/interrupt.c:137
	intr_name[12] = "#SS Stack Fault Exception";
c0001aa7:	c7 05 30 37 01 c0 64 	movl   $0xc000d364,0xc0013730
c0001aae:	d3 00 c0 
/work/x86_os_my/kernel/interrupt.c:138
	intr_name[13] = "#GP General Protection Exception";
c0001ab1:	c7 05 34 37 01 c0 80 	movl   $0xc000d380,0xc0013734
c0001ab8:	d3 00 c0 
/work/x86_os_my/kernel/interrupt.c:139
	intr_name[14] = "#PF Page-Fault Exception";
c0001abb:	c7 05 38 37 01 c0 a1 	movl   $0xc000d3a1,0xc0013738
c0001ac2:	d3 00 c0 
/work/x86_os_my/kernel/interrupt.c:141
	// intr_name[15] 第15项是intel保留项，未使用
	intr_name[16] = "#MF x87 FPU Floating-Point Error";
c0001ac5:	c7 05 40 37 01 c0 bc 	movl   $0xc000d3bc,0xc0013740
c0001acc:	d3 00 c0 
/work/x86_os_my/kernel/interrupt.c:142
	intr_name[17] = "#AC Alignment Check Exception";
c0001acf:	c7 05 44 37 01 c0 dd 	movl   $0xc000d3dd,0xc0013744
c0001ad6:	d3 00 c0 
/work/x86_os_my/kernel/interrupt.c:143
	intr_name[18] = "#MC Machine-Check Exception";
c0001ad9:	c7 05 48 37 01 c0 fb 	movl   $0xc000d3fb,0xc0013748
c0001ae0:	d3 00 c0 
/work/x86_os_my/kernel/interrupt.c:144
	intr_name[19] = "#XF SIMD Floating-Point Exception";
c0001ae3:	c7 05 4c 37 01 c0 18 	movl   $0xc000d418,0xc001374c
c0001aea:	d4 00 c0 
/work/x86_os_my/kernel/interrupt.c:145
}
c0001aed:	90                   	nop
c0001aee:	c9                   	leave  
c0001aef:	c3                   	ret    

c0001af0 <intr_enable>:
intr_enable():
/work/x86_os_my/kernel/interrupt.c:148

/* 开中断并返回开中断前的状态*/
enum intr_status intr_enable() {
c0001af0:	55                   	push   %ebp
c0001af1:	89 e5                	mov    %esp,%ebp
c0001af3:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/interrupt.c:150
	enum intr_status old_status;
	if (INTR_ON == intr_get_status()) {
c0001af6:	e8 65 00 00 00       	call   c0001b60 <intr_get_status>
c0001afb:	83 f8 01             	cmp    $0x1,%eax
c0001afe:	75 0c                	jne    c0001b0c <intr_enable+0x1c>
/work/x86_os_my/kernel/interrupt.c:151
		old_status = INTR_ON;
c0001b00:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:152
		return old_status;
c0001b07:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001b0a:	eb 0b                	jmp    c0001b17 <intr_enable+0x27>
/work/x86_os_my/kernel/interrupt.c:154
	} else {
		old_status = INTR_OFF;
c0001b0c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:155
		asm volatile("sti");	 // 开中断,sti指令将IF位置1
c0001b13:	fb                   	sti    
/work/x86_os_my/kernel/interrupt.c:156
		return old_status;
c0001b14:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/kernel/interrupt.c:158
	}
}
c0001b17:	c9                   	leave  
c0001b18:	c3                   	ret    

c0001b19 <intr_disable>:
intr_disable():
/work/x86_os_my/kernel/interrupt.c:161

/* 关中断,并且返回关中断前的状态 */
enum intr_status intr_disable() {     
c0001b19:	55                   	push   %ebp
c0001b1a:	89 e5                	mov    %esp,%ebp
c0001b1c:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/interrupt.c:163
	enum intr_status old_status;
	if (INTR_ON == intr_get_status()) {
c0001b1f:	e8 3c 00 00 00       	call   c0001b60 <intr_get_status>
c0001b24:	83 f8 01             	cmp    $0x1,%eax
c0001b27:	75 0d                	jne    c0001b36 <intr_disable+0x1d>
/work/x86_os_my/kernel/interrupt.c:164
		old_status = INTR_ON;
c0001b29:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:165
		asm volatile("cli" : : : "memory"); // 关中断,cli指令将IF位置0
c0001b30:	fa                   	cli    
/work/x86_os_my/kernel/interrupt.c:166
		return old_status;
c0001b31:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001b34:	eb 0a                	jmp    c0001b40 <intr_disable+0x27>
/work/x86_os_my/kernel/interrupt.c:168
	} else {
		old_status = INTR_OFF;
c0001b36:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:169
		return old_status;
c0001b3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/kernel/interrupt.c:171
	}
}
c0001b40:	c9                   	leave  
c0001b41:	c3                   	ret    

c0001b42 <intr_set_status>:
intr_set_status():
/work/x86_os_my/kernel/interrupt.c:174

/* 将中断状态设置为status */
enum intr_status intr_set_status(enum intr_status status) {
c0001b42:	55                   	push   %ebp
c0001b43:	89 e5                	mov    %esp,%ebp
c0001b45:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:175
	return status & INTR_ON ? intr_enable() : intr_disable();
c0001b48:	8b 45 08             	mov    0x8(%ebp),%eax
c0001b4b:	83 e0 01             	and    $0x1,%eax
c0001b4e:	85 c0                	test   %eax,%eax
c0001b50:	74 07                	je     c0001b59 <intr_set_status+0x17>
/work/x86_os_my/kernel/interrupt.c:175 (discriminator 1)
c0001b52:	e8 99 ff ff ff       	call   c0001af0 <intr_enable>
c0001b57:	eb 05                	jmp    c0001b5e <intr_set_status+0x1c>
/work/x86_os_my/kernel/interrupt.c:175 (discriminator 2)
c0001b59:	e8 bb ff ff ff       	call   c0001b19 <intr_disable>
/work/x86_os_my/kernel/interrupt.c:176 (discriminator 5)
}
c0001b5e:	c9                   	leave  
c0001b5f:	c3                   	ret    

c0001b60 <intr_get_status>:
intr_get_status():
/work/x86_os_my/kernel/interrupt.c:179

/* 获取当前中断状态 */
enum intr_status intr_get_status() {
c0001b60:	55                   	push   %ebp
c0001b61:	89 e5                	mov    %esp,%ebp
c0001b63:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:180
	uint32_t eflags = 0; 
c0001b66:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
/work/x86_os_my/kernel/interrupt.c:181
	GET_EFLAGS(eflags);
c0001b6d:	9c                   	pushf  
c0001b6e:	58                   	pop    %eax
c0001b6f:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/kernel/interrupt.c:182
	return (EFLAGS_IF & eflags) ? INTR_ON : INTR_OFF;
c0001b72:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0001b75:	25 00 02 00 00       	and    $0x200,%eax
c0001b7a:	85 c0                	test   %eax,%eax
c0001b7c:	0f 95 c0             	setne  %al
c0001b7f:	0f b6 c0             	movzbl %al,%eax
/work/x86_os_my/kernel/interrupt.c:183
}
c0001b82:	c9                   	leave  
c0001b83:	c3                   	ret    

c0001b84 <register_handler>:
register_handler():
/work/x86_os_my/kernel/interrupt.c:186

/* 在中断处理程序数组第vector_no个元素中注册安装中断处理程序function */
void register_handler(uint8_t vector_no, intr_handler function) {
c0001b84:	55                   	push   %ebp
c0001b85:	89 e5                	mov    %esp,%ebp
c0001b87:	83 ec 04             	sub    $0x4,%esp
c0001b8a:	8b 45 08             	mov    0x8(%ebp),%eax
c0001b8d:	88 45 fc             	mov    %al,-0x4(%ebp)
/work/x86_os_my/kernel/interrupt.c:189
/* idt_table数组中的函数是在进入中断后根据中断向量号调用的,
 * 见kernel/kernel.S的call [idt_table + %1*4] */
   idt_table[vector_no] = function; 
c0001b90:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c0001b94:	8b 55 0c             	mov    0xc(%ebp),%edx
c0001b97:	89 14 85 20 39 01 c0 	mov    %edx,-0x3ffec6e0(,%eax,4)
/work/x86_os_my/kernel/interrupt.c:190
}
c0001b9e:	90                   	nop
c0001b9f:	c9                   	leave  
c0001ba0:	c3                   	ret    

c0001ba1 <idt_init>:
idt_init():
/work/x86_os_my/kernel/interrupt.c:193

/*完成有关中断的所有初始化工作*/
void idt_init() {
c0001ba1:	55                   	push   %ebp
c0001ba2:	89 e5                	mov    %esp,%ebp
c0001ba4:	56                   	push   %esi
c0001ba5:	53                   	push   %ebx
c0001ba6:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:194
	put_str("idt_init start\n");
c0001ba9:	83 ec 0c             	sub    $0xc,%esp
c0001bac:	68 3a d4 00 c0       	push   $0xc000d43a
c0001bb1:	e8 9a 07 00 00       	call   c0002350 <put_str>
c0001bb6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:195
	idt_desc_init();	// 初始化中断描述符表
c0001bb9:	e8 e8 fc ff ff       	call   c00018a6 <idt_desc_init>
/work/x86_os_my/kernel/interrupt.c:196
	exception_init();	// 异常名初始化并注册通常的中断处理函数
c0001bbe:	e8 34 fe ff ff       	call   c00019f7 <exception_init>
/work/x86_os_my/kernel/interrupt.c:197
	pic_init();			// 初始化8259A
c0001bc3:	e8 f5 fb ff ff       	call   c00017bd <pic_init>
/work/x86_os_my/kernel/interrupt.c:201

	/* 加载idt */
	// IDTR 是 48 位的寄存器，低 16 位是 IDT 的界限 = IDT 尺寸大小-1，高 32 位是 IDT 的线性基地址
	uint64_t idt_operand = ((sizeof(idt) - 1) | ((uint64_t)(uint32_t)idt << 16));
c0001bc8:	b8 60 2b 01 c0       	mov    $0xc0012b60,%eax
c0001bcd:	ba 00 00 00 00       	mov    $0x0,%edx
c0001bd2:	0f a4 c2 10          	shld   $0x10,%eax,%edx
c0001bd6:	c1 e0 10             	shl    $0x10,%eax
c0001bd9:	89 c1                	mov    %eax,%ecx
c0001bdb:	81 c9 07 04 00 00    	or     $0x407,%ecx
c0001be1:	89 cb                	mov    %ecx,%ebx
c0001be3:	89 d0                	mov    %edx,%eax
c0001be5:	80 cc 00             	or     $0x0,%ah
c0001be8:	89 c6                	mov    %eax,%esi
c0001bea:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c0001bed:	89 75 f4             	mov    %esi,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:202
	asm volatile("lidt %0" : : "m" (idt_operand));
c0001bf0:	0f 01 5d f0          	lidtl  -0x10(%ebp)
/work/x86_os_my/kernel/interrupt.c:203
	put_str("idt_init done\n");
c0001bf4:	83 ec 0c             	sub    $0xc,%esp
c0001bf7:	68 4a d4 00 c0       	push   $0xc000d44a
c0001bfc:	e8 4f 07 00 00       	call   c0002350 <put_str>
c0001c01:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:204
}
c0001c04:	90                   	nop
c0001c05:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0001c08:	5b                   	pop    %ebx
c0001c09:	5e                   	pop    %esi
c0001c0a:	5d                   	pop    %ebp
c0001c0b:	c3                   	ret    

c0001c0c <outb>:
outb():
/work/x86_os_my/lib/kernel/io.h:17
#define __LIB_IO_H
#include "stdint.h"
//inline省去了函数调用开支

/* 向端口port写入一个字节*/
static inline void outb(uint16_t port, uint8_t data) {
c0001c0c:	55                   	push   %ebp
c0001c0d:	89 e5                	mov    %esp,%ebp
c0001c0f:	83 ec 08             	sub    $0x8,%esp
c0001c12:	8b 55 08             	mov    0x8(%ebp),%edx
c0001c15:	8b 45 0c             	mov    0xc(%ebp),%eax
c0001c18:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c0001c1c:	88 45 f8             	mov    %al,-0x8(%ebp)
/work/x86_os_my/lib/kernel/io.h:21
/*********************************************************
 a表示用寄存器al或ax或eax,对端口指定N表示0~255, d表示用dx存储端口号, 
 %b0表示对应al,%w1表示对应dx */ 
   asm volatile ( "outb %b0, %w1" : : "a" (data), "Nd" (port));    
c0001c1f:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c0001c23:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0001c27:	ee                   	out    %al,(%dx)
/work/x86_os_my/lib/kernel/io.h:23
/******************************************************/
}
c0001c28:	90                   	nop
c0001c29:	c9                   	leave  
c0001c2a:	c3                   	ret    

c0001c2b <frequency_set>:
frequency_set():
/work/x86_os_my/device/timer.c:27
/* 把操作的计数器counter_no、读写锁属性rwl、计数器模式counter_mode写入模式控制寄存器并赋予初始值counter_value */
static void frequency_set(uint8_t counter_port, \
		uint8_t counter_no, \
		uint8_t rwl, \
		uint8_t counter_mode, \
		uint16_t counter_value) {
c0001c2b:	55                   	push   %ebp
c0001c2c:	89 e5                	mov    %esp,%ebp
c0001c2e:	56                   	push   %esi
c0001c2f:	53                   	push   %ebx
c0001c30:	83 ec 14             	sub    $0x14,%esp
c0001c33:	8b 45 08             	mov    0x8(%ebp),%eax
c0001c36:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c0001c39:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0001c3c:	8b 55 14             	mov    0x14(%ebp),%edx
c0001c3f:	8b 75 18             	mov    0x18(%ebp),%esi
c0001c42:	88 45 f4             	mov    %al,-0xc(%ebp)
c0001c45:	88 5d f0             	mov    %bl,-0x10(%ebp)
c0001c48:	88 4d ec             	mov    %cl,-0x14(%ebp)
c0001c4b:	88 55 e8             	mov    %dl,-0x18(%ebp)
c0001c4e:	66 89 75 e4          	mov    %si,-0x1c(%ebp)
/work/x86_os_my/device/timer.c:29
	/* 往控制字寄存器端口0x43中写入控制字 */
	outb(PIT_CONTROL_PORT, (uint8_t)(counter_no << 6 | rwl << 4 | counter_mode << 1));
c0001c52:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c0001c56:	c1 e0 06             	shl    $0x6,%eax
c0001c59:	89 c2                	mov    %eax,%edx
c0001c5b:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0001c5f:	c1 e0 04             	shl    $0x4,%eax
c0001c62:	09 c2                	or     %eax,%edx
c0001c64:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c0001c68:	01 c0                	add    %eax,%eax
c0001c6a:	09 d0                	or     %edx,%eax
c0001c6c:	0f b6 c0             	movzbl %al,%eax
c0001c6f:	50                   	push   %eax
c0001c70:	6a 43                	push   $0x43
c0001c72:	e8 95 ff ff ff       	call   c0001c0c <outb>
c0001c77:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/timer.c:31
	/* 先写入counter_value的低8位 */
	outb(counter_port, (uint8_t)counter_value);
c0001c7a:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
c0001c7e:	0f b6 d0             	movzbl %al,%edx
c0001c81:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0001c85:	52                   	push   %edx
c0001c86:	50                   	push   %eax
c0001c87:	e8 80 ff ff ff       	call   c0001c0c <outb>
c0001c8c:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/timer.c:33
	/* 再写入counter_value的高8位 */
	outb(counter_port, (uint8_t)counter_value >> 8);
c0001c8f:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0001c93:	6a 00                	push   $0x0
c0001c95:	50                   	push   %eax
c0001c96:	e8 71 ff ff ff       	call   c0001c0c <outb>
c0001c9b:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/timer.c:34
}
c0001c9e:	90                   	nop
c0001c9f:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0001ca2:	5b                   	pop    %ebx
c0001ca3:	5e                   	pop    %esi
c0001ca4:	5d                   	pop    %ebp
c0001ca5:	c3                   	ret    

c0001ca6 <intr_timer_handler>:
intr_timer_handler():
/work/x86_os_my/device/timer.c:37

/* 时钟的中断处理函数 */
static void intr_timer_handler(void) {
c0001ca6:	55                   	push   %ebp
c0001ca7:	89 e5                	mov    %esp,%ebp
c0001ca9:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/timer.c:38
	struct task_struct* cur_thread = running_thread();		// 返回线程PCB
c0001cac:	e8 3b 21 00 00       	call   c0003dec <running_thread>
c0001cb1:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/timer.c:40

	ASSERT(cur_thread->stack_magic == 0x19870916);			// 检查栈是否溢出
c0001cb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001cb7:	8b 80 14 01 00 00    	mov    0x114(%eax),%eax
c0001cbd:	3d 16 09 87 19       	cmp    $0x19870916,%eax
c0001cc2:	74 19                	je     c0001cdd <intr_timer_handler+0x37>
/work/x86_os_my/device/timer.c:40 (discriminator 1)
c0001cc4:	68 5c d4 00 c0       	push   $0xc000d45c
c0001cc9:	68 c4 d4 00 c0       	push   $0xc000d4c4
c0001cce:	6a 28                	push   $0x28
c0001cd0:	68 82 d4 00 c0       	push   $0xc000d482
c0001cd5:	e8 27 08 00 00       	call   c0002501 <panic_spin>
c0001cda:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:42

	cur_thread->elapsed_ticks++;// 记录此线程占用的cpu时间
c0001cdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001ce0:	8b 40 20             	mov    0x20(%eax),%eax
c0001ce3:	8d 50 01             	lea    0x1(%eax),%edx
c0001ce6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001ce9:	89 50 20             	mov    %edx,0x20(%eax)
/work/x86_os_my/device/timer.c:43
	ticks++;	//从内核第一次处理时间中断开始,至今的滴哒数,是内核态和用户态总共的嘀哒数
c0001cec:	a1 24 3b 01 c0       	mov    0xc0013b24,%eax
c0001cf1:	83 c0 01             	add    $0x1,%eax
c0001cf4:	a3 24 3b 01 c0       	mov    %eax,0xc0013b24
/work/x86_os_my/device/timer.c:45

	if (cur_thread->ticks == 0) {
c0001cf9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001cfc:	0f b6 40 1d          	movzbl 0x1d(%eax),%eax
c0001d00:	84 c0                	test   %al,%al
c0001d02:	75 07                	jne    c0001d0b <intr_timer_handler+0x65>
/work/x86_os_my/device/timer.c:46
		schedule();				// 若进程时间片用完就开始调度新的进程上cpu
c0001d04:	e8 f6 24 00 00       	call   c00041ff <schedule>
/work/x86_os_my/device/timer.c:50
	} else {
		cur_thread->ticks--;	// 将当前进程的时间片-1
	}
}
c0001d09:	eb 10                	jmp    c0001d1b <intr_timer_handler+0x75>
/work/x86_os_my/device/timer.c:48
	ticks++;	//从内核第一次处理时间中断开始,至今的滴哒数,是内核态和用户态总共的嘀哒数

	if (cur_thread->ticks == 0) {
		schedule();				// 若进程时间片用完就开始调度新的进程上cpu
	} else {
		cur_thread->ticks--;	// 将当前进程的时间片-1
c0001d0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001d0e:	0f b6 40 1d          	movzbl 0x1d(%eax),%eax
c0001d12:	8d 50 ff             	lea    -0x1(%eax),%edx
c0001d15:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001d18:	88 50 1d             	mov    %dl,0x1d(%eax)
/work/x86_os_my/device/timer.c:50
	}
}
c0001d1b:	90                   	nop
c0001d1c:	c9                   	leave  
c0001d1d:	c3                   	ret    

c0001d1e <ticks_to_sleep>:
ticks_to_sleep():
/work/x86_os_my/device/timer.c:53

/* 以tick为单位的sleep,任何时间形式的sleep会转换此ticks形式 */
static void ticks_to_sleep(uint32_t sleep_ticks) {
c0001d1e:	55                   	push   %ebp
c0001d1f:	89 e5                	mov    %esp,%ebp
c0001d21:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/timer.c:54
	uint32_t start_tick = ticks;
c0001d24:	a1 24 3b 01 c0       	mov    0xc0013b24,%eax
c0001d29:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/timer.c:57

	/* 若间隔的ticks数不够便让出cpu */
	while (ticks - start_tick < sleep_ticks) {
c0001d2c:	eb 05                	jmp    c0001d33 <ticks_to_sleep+0x15>
/work/x86_os_my/device/timer.c:58
		thread_yield();
c0001d2e:	e8 76 27 00 00       	call   c00044a9 <thread_yield>
/work/x86_os_my/device/timer.c:57
/* 以tick为单位的sleep,任何时间形式的sleep会转换此ticks形式 */
static void ticks_to_sleep(uint32_t sleep_ticks) {
	uint32_t start_tick = ticks;

	/* 若间隔的ticks数不够便让出cpu */
	while (ticks - start_tick < sleep_ticks) {
c0001d33:	a1 24 3b 01 c0       	mov    0xc0013b24,%eax
c0001d38:	2b 45 f4             	sub    -0xc(%ebp),%eax
c0001d3b:	3b 45 08             	cmp    0x8(%ebp),%eax
c0001d3e:	72 ee                	jb     c0001d2e <ticks_to_sleep+0x10>
/work/x86_os_my/device/timer.c:60
		thread_yield();
	}
}
c0001d40:	90                   	nop
c0001d41:	c9                   	leave  
c0001d42:	c3                   	ret    

c0001d43 <mtime_sleep>:
mtime_sleep():
/work/x86_os_my/device/timer.c:62

void mtime_sleep(uint32_t m_seconds) {
c0001d43:	55                   	push   %ebp
c0001d44:	89 e5                	mov    %esp,%ebp
c0001d46:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/timer.c:63
	uint32_t sleep_ticks = DIV_ROUND_UP(m_seconds, mil_seconds_per_intr);
c0001d49:	8b 45 08             	mov    0x8(%ebp),%eax
c0001d4c:	83 c0 09             	add    $0x9,%eax
c0001d4f:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
c0001d54:	f7 e2                	mul    %edx
c0001d56:	89 d0                	mov    %edx,%eax
c0001d58:	c1 e8 03             	shr    $0x3,%eax
c0001d5b:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/timer.c:64
	ASSERT(sleep_ticks > 0);
c0001d5e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0001d62:	75 19                	jne    c0001d7d <mtime_sleep+0x3a>
/work/x86_os_my/device/timer.c:64 (discriminator 1)
c0001d64:	68 91 d4 00 c0       	push   $0xc000d491
c0001d69:	68 d8 d4 00 c0       	push   $0xc000d4d8
c0001d6e:	6a 40                	push   $0x40
c0001d70:	68 82 d4 00 c0       	push   $0xc000d482
c0001d75:	e8 87 07 00 00       	call   c0002501 <panic_spin>
c0001d7a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:65
	ticks_to_sleep(sleep_ticks); 
c0001d7d:	83 ec 0c             	sub    $0xc,%esp
c0001d80:	ff 75 f4             	pushl  -0xc(%ebp)
c0001d83:	e8 96 ff ff ff       	call   c0001d1e <ticks_to_sleep>
c0001d88:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:66
}
c0001d8b:	90                   	nop
c0001d8c:	c9                   	leave  
c0001d8d:	c3                   	ret    

c0001d8e <timer_init>:
timer_init():
/work/x86_os_my/device/timer.c:69

/* 初始化PIT8253 */
void timer_init() {
c0001d8e:	55                   	push   %ebp
c0001d8f:	89 e5                	mov    %esp,%ebp
c0001d91:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/timer.c:70
	put_str("timer_init start\n");
c0001d94:	83 ec 0c             	sub    $0xc,%esp
c0001d97:	68 a1 d4 00 c0       	push   $0xc000d4a1
c0001d9c:	e8 af 05 00 00       	call   c0002350 <put_str>
c0001da1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:72
	/* 设置8253的定时周期,也就是发中断的周期 */
	frequency_set(CONTRER0_PORT, COUNTER0_NO, READ_WRITE_LATCH, COUNTER_MODE, COUNTER0_VALUE);
c0001da4:	83 ec 0c             	sub    $0xc,%esp
c0001da7:	68 9b 2e 00 00       	push   $0x2e9b
c0001dac:	6a 02                	push   $0x2
c0001dae:	6a 03                	push   $0x3
c0001db0:	6a 00                	push   $0x0
c0001db2:	6a 40                	push   $0x40
c0001db4:	e8 72 fe ff ff       	call   c0001c2b <frequency_set>
c0001db9:	83 c4 20             	add    $0x20,%esp
/work/x86_os_my/device/timer.c:73
	register_handler(0x20, intr_timer_handler);
c0001dbc:	83 ec 08             	sub    $0x8,%esp
c0001dbf:	68 a6 1c 00 c0       	push   $0xc0001ca6
c0001dc4:	6a 20                	push   $0x20
c0001dc6:	e8 b9 fd ff ff       	call   c0001b84 <register_handler>
c0001dcb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:74
	put_str("timer_init done\n");
c0001dce:	83 ec 0c             	sub    $0xc,%esp
c0001dd1:	68 b3 d4 00 c0       	push   $0xc000d4b3
c0001dd6:	e8 75 05 00 00       	call   c0002350 <put_str>
c0001ddb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:75
}
c0001dde:	90                   	nop
c0001ddf:	c9                   	leave  
c0001de0:	c3                   	ret    
c0001de1:	66 90                	xchg   %ax,%ax
c0001de3:	66 90                	xchg   %ax,%ax
c0001de5:	66 90                	xchg   %ax,%ax
c0001de7:	66 90                	xchg   %ax,%ax
c0001de9:	66 90                	xchg   %ax,%ax
c0001deb:	66 90                	xchg   %ax,%ax
c0001ded:	66 90                	xchg   %ax,%ax
c0001def:	90                   	nop

c0001df0 <intr_exit>:
intr_exit():
c0001df0:	83 c4 04             	add    $0x4,%esp
c0001df3:	61                   	popa   
c0001df4:	0f a9                	pop    %gs
c0001df6:	0f a1                	pop    %fs
c0001df8:	07                   	pop    %es
c0001df9:	1f                   	pop    %ds
c0001dfa:	83 c4 04             	add    $0x4,%esp
c0001dfd:	cf                   	iret   

c0001dfe <intr0x00entry>:
intr0x00entry():
c0001dfe:	6a 00                	push   $0x0
c0001e00:	1e                   	push   %ds
c0001e01:	06                   	push   %es
c0001e02:	0f a0                	push   %fs
c0001e04:	0f a8                	push   %gs
c0001e06:	60                   	pusha  
c0001e07:	b0 20                	mov    $0x20,%al
c0001e09:	e6 a0                	out    %al,$0xa0
c0001e0b:	e6 20                	out    %al,$0x20
c0001e0d:	6a 00                	push   $0x0
c0001e0f:	ff 15 20 39 01 c0    	call   *0xc0013920
c0001e15:	eb d9                	jmp    c0001df0 <intr_exit>

c0001e17 <intr0x01entry>:
intr0x01entry():
c0001e17:	6a 00                	push   $0x0
c0001e19:	1e                   	push   %ds
c0001e1a:	06                   	push   %es
c0001e1b:	0f a0                	push   %fs
c0001e1d:	0f a8                	push   %gs
c0001e1f:	60                   	pusha  
c0001e20:	b0 20                	mov    $0x20,%al
c0001e22:	e6 a0                	out    %al,$0xa0
c0001e24:	e6 20                	out    %al,$0x20
c0001e26:	6a 01                	push   $0x1
c0001e28:	ff 15 24 39 01 c0    	call   *0xc0013924
c0001e2e:	eb c0                	jmp    c0001df0 <intr_exit>

c0001e30 <intr0x02entry>:
intr0x02entry():
c0001e30:	6a 00                	push   $0x0
c0001e32:	1e                   	push   %ds
c0001e33:	06                   	push   %es
c0001e34:	0f a0                	push   %fs
c0001e36:	0f a8                	push   %gs
c0001e38:	60                   	pusha  
c0001e39:	b0 20                	mov    $0x20,%al
c0001e3b:	e6 a0                	out    %al,$0xa0
c0001e3d:	e6 20                	out    %al,$0x20
c0001e3f:	6a 02                	push   $0x2
c0001e41:	ff 15 28 39 01 c0    	call   *0xc0013928
c0001e47:	eb a7                	jmp    c0001df0 <intr_exit>

c0001e49 <intr0x03entry>:
intr0x03entry():
c0001e49:	6a 00                	push   $0x0
c0001e4b:	1e                   	push   %ds
c0001e4c:	06                   	push   %es
c0001e4d:	0f a0                	push   %fs
c0001e4f:	0f a8                	push   %gs
c0001e51:	60                   	pusha  
c0001e52:	b0 20                	mov    $0x20,%al
c0001e54:	e6 a0                	out    %al,$0xa0
c0001e56:	e6 20                	out    %al,$0x20
c0001e58:	6a 03                	push   $0x3
c0001e5a:	ff 15 2c 39 01 c0    	call   *0xc001392c
c0001e60:	eb 8e                	jmp    c0001df0 <intr_exit>

c0001e62 <intr0x04entry>:
intr0x04entry():
c0001e62:	6a 00                	push   $0x0
c0001e64:	1e                   	push   %ds
c0001e65:	06                   	push   %es
c0001e66:	0f a0                	push   %fs
c0001e68:	0f a8                	push   %gs
c0001e6a:	60                   	pusha  
c0001e6b:	b0 20                	mov    $0x20,%al
c0001e6d:	e6 a0                	out    %al,$0xa0
c0001e6f:	e6 20                	out    %al,$0x20
c0001e71:	6a 04                	push   $0x4
c0001e73:	ff 15 30 39 01 c0    	call   *0xc0013930
c0001e79:	e9 72 ff ff ff       	jmp    c0001df0 <intr_exit>

c0001e7e <intr0x05entry>:
intr0x05entry():
c0001e7e:	6a 00                	push   $0x0
c0001e80:	1e                   	push   %ds
c0001e81:	06                   	push   %es
c0001e82:	0f a0                	push   %fs
c0001e84:	0f a8                	push   %gs
c0001e86:	60                   	pusha  
c0001e87:	b0 20                	mov    $0x20,%al
c0001e89:	e6 a0                	out    %al,$0xa0
c0001e8b:	e6 20                	out    %al,$0x20
c0001e8d:	6a 05                	push   $0x5
c0001e8f:	ff 15 34 39 01 c0    	call   *0xc0013934
c0001e95:	e9 56 ff ff ff       	jmp    c0001df0 <intr_exit>

c0001e9a <intr0x06entry>:
intr0x06entry():
c0001e9a:	6a 00                	push   $0x0
c0001e9c:	1e                   	push   %ds
c0001e9d:	06                   	push   %es
c0001e9e:	0f a0                	push   %fs
c0001ea0:	0f a8                	push   %gs
c0001ea2:	60                   	pusha  
c0001ea3:	b0 20                	mov    $0x20,%al
c0001ea5:	e6 a0                	out    %al,$0xa0
c0001ea7:	e6 20                	out    %al,$0x20
c0001ea9:	6a 06                	push   $0x6
c0001eab:	ff 15 38 39 01 c0    	call   *0xc0013938
c0001eb1:	e9 3a ff ff ff       	jmp    c0001df0 <intr_exit>

c0001eb6 <intr0x07entry>:
intr0x07entry():
c0001eb6:	6a 00                	push   $0x0
c0001eb8:	1e                   	push   %ds
c0001eb9:	06                   	push   %es
c0001eba:	0f a0                	push   %fs
c0001ebc:	0f a8                	push   %gs
c0001ebe:	60                   	pusha  
c0001ebf:	b0 20                	mov    $0x20,%al
c0001ec1:	e6 a0                	out    %al,$0xa0
c0001ec3:	e6 20                	out    %al,$0x20
c0001ec5:	6a 07                	push   $0x7
c0001ec7:	ff 15 3c 39 01 c0    	call   *0xc001393c
c0001ecd:	e9 1e ff ff ff       	jmp    c0001df0 <intr_exit>

c0001ed2 <intr0x08entry>:
intr0x08entry():
c0001ed2:	90                   	nop
c0001ed3:	1e                   	push   %ds
c0001ed4:	06                   	push   %es
c0001ed5:	0f a0                	push   %fs
c0001ed7:	0f a8                	push   %gs
c0001ed9:	60                   	pusha  
c0001eda:	b0 20                	mov    $0x20,%al
c0001edc:	e6 a0                	out    %al,$0xa0
c0001ede:	e6 20                	out    %al,$0x20
c0001ee0:	6a 08                	push   $0x8
c0001ee2:	ff 15 40 39 01 c0    	call   *0xc0013940
c0001ee8:	e9 03 ff ff ff       	jmp    c0001df0 <intr_exit>

c0001eed <intr0x09entry>:
intr0x09entry():
c0001eed:	6a 00                	push   $0x0
c0001eef:	1e                   	push   %ds
c0001ef0:	06                   	push   %es
c0001ef1:	0f a0                	push   %fs
c0001ef3:	0f a8                	push   %gs
c0001ef5:	60                   	pusha  
c0001ef6:	b0 20                	mov    $0x20,%al
c0001ef8:	e6 a0                	out    %al,$0xa0
c0001efa:	e6 20                	out    %al,$0x20
c0001efc:	6a 09                	push   $0x9
c0001efe:	ff 15 44 39 01 c0    	call   *0xc0013944
c0001f04:	e9 e7 fe ff ff       	jmp    c0001df0 <intr_exit>

c0001f09 <intr0x0aentry>:
intr0x0aentry():
c0001f09:	90                   	nop
c0001f0a:	1e                   	push   %ds
c0001f0b:	06                   	push   %es
c0001f0c:	0f a0                	push   %fs
c0001f0e:	0f a8                	push   %gs
c0001f10:	60                   	pusha  
c0001f11:	b0 20                	mov    $0x20,%al
c0001f13:	e6 a0                	out    %al,$0xa0
c0001f15:	e6 20                	out    %al,$0x20
c0001f17:	6a 0a                	push   $0xa
c0001f19:	ff 15 48 39 01 c0    	call   *0xc0013948
c0001f1f:	e9 cc fe ff ff       	jmp    c0001df0 <intr_exit>

c0001f24 <intr0x0bentry>:
intr0x0bentry():
c0001f24:	90                   	nop
c0001f25:	1e                   	push   %ds
c0001f26:	06                   	push   %es
c0001f27:	0f a0                	push   %fs
c0001f29:	0f a8                	push   %gs
c0001f2b:	60                   	pusha  
c0001f2c:	b0 20                	mov    $0x20,%al
c0001f2e:	e6 a0                	out    %al,$0xa0
c0001f30:	e6 20                	out    %al,$0x20
c0001f32:	6a 0b                	push   $0xb
c0001f34:	ff 15 4c 39 01 c0    	call   *0xc001394c
c0001f3a:	e9 b1 fe ff ff       	jmp    c0001df0 <intr_exit>

c0001f3f <intr0x0centry>:
intr0x0centry():
c0001f3f:	6a 00                	push   $0x0
c0001f41:	1e                   	push   %ds
c0001f42:	06                   	push   %es
c0001f43:	0f a0                	push   %fs
c0001f45:	0f a8                	push   %gs
c0001f47:	60                   	pusha  
c0001f48:	b0 20                	mov    $0x20,%al
c0001f4a:	e6 a0                	out    %al,$0xa0
c0001f4c:	e6 20                	out    %al,$0x20
c0001f4e:	6a 0c                	push   $0xc
c0001f50:	ff 15 50 39 01 c0    	call   *0xc0013950
c0001f56:	e9 95 fe ff ff       	jmp    c0001df0 <intr_exit>

c0001f5b <intr0x0dentry>:
intr0x0dentry():
c0001f5b:	90                   	nop
c0001f5c:	1e                   	push   %ds
c0001f5d:	06                   	push   %es
c0001f5e:	0f a0                	push   %fs
c0001f60:	0f a8                	push   %gs
c0001f62:	60                   	pusha  
c0001f63:	b0 20                	mov    $0x20,%al
c0001f65:	e6 a0                	out    %al,$0xa0
c0001f67:	e6 20                	out    %al,$0x20
c0001f69:	6a 0d                	push   $0xd
c0001f6b:	ff 15 54 39 01 c0    	call   *0xc0013954
c0001f71:	e9 7a fe ff ff       	jmp    c0001df0 <intr_exit>

c0001f76 <intr0x0eentry>:
intr0x0eentry():
c0001f76:	90                   	nop
c0001f77:	1e                   	push   %ds
c0001f78:	06                   	push   %es
c0001f79:	0f a0                	push   %fs
c0001f7b:	0f a8                	push   %gs
c0001f7d:	60                   	pusha  
c0001f7e:	b0 20                	mov    $0x20,%al
c0001f80:	e6 a0                	out    %al,$0xa0
c0001f82:	e6 20                	out    %al,$0x20
c0001f84:	6a 0e                	push   $0xe
c0001f86:	ff 15 58 39 01 c0    	call   *0xc0013958
c0001f8c:	e9 5f fe ff ff       	jmp    c0001df0 <intr_exit>

c0001f91 <intr0x0fentry>:
intr0x0fentry():
c0001f91:	6a 00                	push   $0x0
c0001f93:	1e                   	push   %ds
c0001f94:	06                   	push   %es
c0001f95:	0f a0                	push   %fs
c0001f97:	0f a8                	push   %gs
c0001f99:	60                   	pusha  
c0001f9a:	b0 20                	mov    $0x20,%al
c0001f9c:	e6 a0                	out    %al,$0xa0
c0001f9e:	e6 20                	out    %al,$0x20
c0001fa0:	6a 0f                	push   $0xf
c0001fa2:	ff 15 5c 39 01 c0    	call   *0xc001395c
c0001fa8:	e9 43 fe ff ff       	jmp    c0001df0 <intr_exit>

c0001fad <intr0x10entry>:
intr0x10entry():
c0001fad:	6a 00                	push   $0x0
c0001faf:	1e                   	push   %ds
c0001fb0:	06                   	push   %es
c0001fb1:	0f a0                	push   %fs
c0001fb3:	0f a8                	push   %gs
c0001fb5:	60                   	pusha  
c0001fb6:	b0 20                	mov    $0x20,%al
c0001fb8:	e6 a0                	out    %al,$0xa0
c0001fba:	e6 20                	out    %al,$0x20
c0001fbc:	6a 10                	push   $0x10
c0001fbe:	ff 15 60 39 01 c0    	call   *0xc0013960
c0001fc4:	e9 27 fe ff ff       	jmp    c0001df0 <intr_exit>

c0001fc9 <intr0x11entry>:
intr0x11entry():
c0001fc9:	90                   	nop
c0001fca:	1e                   	push   %ds
c0001fcb:	06                   	push   %es
c0001fcc:	0f a0                	push   %fs
c0001fce:	0f a8                	push   %gs
c0001fd0:	60                   	pusha  
c0001fd1:	b0 20                	mov    $0x20,%al
c0001fd3:	e6 a0                	out    %al,$0xa0
c0001fd5:	e6 20                	out    %al,$0x20
c0001fd7:	6a 11                	push   $0x11
c0001fd9:	ff 15 64 39 01 c0    	call   *0xc0013964
c0001fdf:	e9 0c fe ff ff       	jmp    c0001df0 <intr_exit>

c0001fe4 <intr0x12entry>:
intr0x12entry():
c0001fe4:	6a 00                	push   $0x0
c0001fe6:	1e                   	push   %ds
c0001fe7:	06                   	push   %es
c0001fe8:	0f a0                	push   %fs
c0001fea:	0f a8                	push   %gs
c0001fec:	60                   	pusha  
c0001fed:	b0 20                	mov    $0x20,%al
c0001fef:	e6 a0                	out    %al,$0xa0
c0001ff1:	e6 20                	out    %al,$0x20
c0001ff3:	6a 12                	push   $0x12
c0001ff5:	ff 15 68 39 01 c0    	call   *0xc0013968
c0001ffb:	e9 f0 fd ff ff       	jmp    c0001df0 <intr_exit>

c0002000 <intr0x13entry>:
intr0x13entry():
c0002000:	6a 00                	push   $0x0
c0002002:	1e                   	push   %ds
c0002003:	06                   	push   %es
c0002004:	0f a0                	push   %fs
c0002006:	0f a8                	push   %gs
c0002008:	60                   	pusha  
c0002009:	b0 20                	mov    $0x20,%al
c000200b:	e6 a0                	out    %al,$0xa0
c000200d:	e6 20                	out    %al,$0x20
c000200f:	6a 13                	push   $0x13
c0002011:	ff 15 6c 39 01 c0    	call   *0xc001396c
c0002017:	e9 d4 fd ff ff       	jmp    c0001df0 <intr_exit>

c000201c <intr0x14entry>:
intr0x14entry():
c000201c:	6a 00                	push   $0x0
c000201e:	1e                   	push   %ds
c000201f:	06                   	push   %es
c0002020:	0f a0                	push   %fs
c0002022:	0f a8                	push   %gs
c0002024:	60                   	pusha  
c0002025:	b0 20                	mov    $0x20,%al
c0002027:	e6 a0                	out    %al,$0xa0
c0002029:	e6 20                	out    %al,$0x20
c000202b:	6a 14                	push   $0x14
c000202d:	ff 15 70 39 01 c0    	call   *0xc0013970
c0002033:	e9 b8 fd ff ff       	jmp    c0001df0 <intr_exit>

c0002038 <intr0x15entry>:
intr0x15entry():
c0002038:	6a 00                	push   $0x0
c000203a:	1e                   	push   %ds
c000203b:	06                   	push   %es
c000203c:	0f a0                	push   %fs
c000203e:	0f a8                	push   %gs
c0002040:	60                   	pusha  
c0002041:	b0 20                	mov    $0x20,%al
c0002043:	e6 a0                	out    %al,$0xa0
c0002045:	e6 20                	out    %al,$0x20
c0002047:	6a 15                	push   $0x15
c0002049:	ff 15 74 39 01 c0    	call   *0xc0013974
c000204f:	e9 9c fd ff ff       	jmp    c0001df0 <intr_exit>

c0002054 <intr0x16entry>:
intr0x16entry():
c0002054:	6a 00                	push   $0x0
c0002056:	1e                   	push   %ds
c0002057:	06                   	push   %es
c0002058:	0f a0                	push   %fs
c000205a:	0f a8                	push   %gs
c000205c:	60                   	pusha  
c000205d:	b0 20                	mov    $0x20,%al
c000205f:	e6 a0                	out    %al,$0xa0
c0002061:	e6 20                	out    %al,$0x20
c0002063:	6a 16                	push   $0x16
c0002065:	ff 15 78 39 01 c0    	call   *0xc0013978
c000206b:	e9 80 fd ff ff       	jmp    c0001df0 <intr_exit>

c0002070 <intr0x17entry>:
intr0x17entry():
c0002070:	6a 00                	push   $0x0
c0002072:	1e                   	push   %ds
c0002073:	06                   	push   %es
c0002074:	0f a0                	push   %fs
c0002076:	0f a8                	push   %gs
c0002078:	60                   	pusha  
c0002079:	b0 20                	mov    $0x20,%al
c000207b:	e6 a0                	out    %al,$0xa0
c000207d:	e6 20                	out    %al,$0x20
c000207f:	6a 17                	push   $0x17
c0002081:	ff 15 7c 39 01 c0    	call   *0xc001397c
c0002087:	e9 64 fd ff ff       	jmp    c0001df0 <intr_exit>

c000208c <intr0x18entry>:
intr0x18entry():
c000208c:	90                   	nop
c000208d:	1e                   	push   %ds
c000208e:	06                   	push   %es
c000208f:	0f a0                	push   %fs
c0002091:	0f a8                	push   %gs
c0002093:	60                   	pusha  
c0002094:	b0 20                	mov    $0x20,%al
c0002096:	e6 a0                	out    %al,$0xa0
c0002098:	e6 20                	out    %al,$0x20
c000209a:	6a 18                	push   $0x18
c000209c:	ff 15 80 39 01 c0    	call   *0xc0013980
c00020a2:	e9 49 fd ff ff       	jmp    c0001df0 <intr_exit>

c00020a7 <intr0x19entry>:
intr0x19entry():
c00020a7:	6a 00                	push   $0x0
c00020a9:	1e                   	push   %ds
c00020aa:	06                   	push   %es
c00020ab:	0f a0                	push   %fs
c00020ad:	0f a8                	push   %gs
c00020af:	60                   	pusha  
c00020b0:	b0 20                	mov    $0x20,%al
c00020b2:	e6 a0                	out    %al,$0xa0
c00020b4:	e6 20                	out    %al,$0x20
c00020b6:	6a 19                	push   $0x19
c00020b8:	ff 15 84 39 01 c0    	call   *0xc0013984
c00020be:	e9 2d fd ff ff       	jmp    c0001df0 <intr_exit>

c00020c3 <intr0x1aentry>:
intr0x1aentry():
c00020c3:	90                   	nop
c00020c4:	1e                   	push   %ds
c00020c5:	06                   	push   %es
c00020c6:	0f a0                	push   %fs
c00020c8:	0f a8                	push   %gs
c00020ca:	60                   	pusha  
c00020cb:	b0 20                	mov    $0x20,%al
c00020cd:	e6 a0                	out    %al,$0xa0
c00020cf:	e6 20                	out    %al,$0x20
c00020d1:	6a 1a                	push   $0x1a
c00020d3:	ff 15 88 39 01 c0    	call   *0xc0013988
c00020d9:	e9 12 fd ff ff       	jmp    c0001df0 <intr_exit>

c00020de <intr0x1bentry>:
intr0x1bentry():
c00020de:	90                   	nop
c00020df:	1e                   	push   %ds
c00020e0:	06                   	push   %es
c00020e1:	0f a0                	push   %fs
c00020e3:	0f a8                	push   %gs
c00020e5:	60                   	pusha  
c00020e6:	b0 20                	mov    $0x20,%al
c00020e8:	e6 a0                	out    %al,$0xa0
c00020ea:	e6 20                	out    %al,$0x20
c00020ec:	6a 1b                	push   $0x1b
c00020ee:	ff 15 8c 39 01 c0    	call   *0xc001398c
c00020f4:	e9 f7 fc ff ff       	jmp    c0001df0 <intr_exit>

c00020f9 <intr0x1centry>:
intr0x1centry():
c00020f9:	6a 00                	push   $0x0
c00020fb:	1e                   	push   %ds
c00020fc:	06                   	push   %es
c00020fd:	0f a0                	push   %fs
c00020ff:	0f a8                	push   %gs
c0002101:	60                   	pusha  
c0002102:	b0 20                	mov    $0x20,%al
c0002104:	e6 a0                	out    %al,$0xa0
c0002106:	e6 20                	out    %al,$0x20
c0002108:	6a 1c                	push   $0x1c
c000210a:	ff 15 90 39 01 c0    	call   *0xc0013990
c0002110:	e9 db fc ff ff       	jmp    c0001df0 <intr_exit>

c0002115 <intr0x1dentry>:
intr0x1dentry():
c0002115:	90                   	nop
c0002116:	1e                   	push   %ds
c0002117:	06                   	push   %es
c0002118:	0f a0                	push   %fs
c000211a:	0f a8                	push   %gs
c000211c:	60                   	pusha  
c000211d:	b0 20                	mov    $0x20,%al
c000211f:	e6 a0                	out    %al,$0xa0
c0002121:	e6 20                	out    %al,$0x20
c0002123:	6a 1d                	push   $0x1d
c0002125:	ff 15 94 39 01 c0    	call   *0xc0013994
c000212b:	e9 c0 fc ff ff       	jmp    c0001df0 <intr_exit>

c0002130 <intr0x1eentry>:
intr0x1eentry():
c0002130:	90                   	nop
c0002131:	1e                   	push   %ds
c0002132:	06                   	push   %es
c0002133:	0f a0                	push   %fs
c0002135:	0f a8                	push   %gs
c0002137:	60                   	pusha  
c0002138:	b0 20                	mov    $0x20,%al
c000213a:	e6 a0                	out    %al,$0xa0
c000213c:	e6 20                	out    %al,$0x20
c000213e:	6a 1e                	push   $0x1e
c0002140:	ff 15 98 39 01 c0    	call   *0xc0013998
c0002146:	e9 a5 fc ff ff       	jmp    c0001df0 <intr_exit>

c000214b <intr0x1fentry>:
intr0x1fentry():
c000214b:	6a 00                	push   $0x0
c000214d:	1e                   	push   %ds
c000214e:	06                   	push   %es
c000214f:	0f a0                	push   %fs
c0002151:	0f a8                	push   %gs
c0002153:	60                   	pusha  
c0002154:	b0 20                	mov    $0x20,%al
c0002156:	e6 a0                	out    %al,$0xa0
c0002158:	e6 20                	out    %al,$0x20
c000215a:	6a 1f                	push   $0x1f
c000215c:	ff 15 9c 39 01 c0    	call   *0xc001399c
c0002162:	e9 89 fc ff ff       	jmp    c0001df0 <intr_exit>

c0002167 <intr0x20entry>:
intr0x20entry():
c0002167:	6a 00                	push   $0x0
c0002169:	1e                   	push   %ds
c000216a:	06                   	push   %es
c000216b:	0f a0                	push   %fs
c000216d:	0f a8                	push   %gs
c000216f:	60                   	pusha  
c0002170:	b0 20                	mov    $0x20,%al
c0002172:	e6 a0                	out    %al,$0xa0
c0002174:	e6 20                	out    %al,$0x20
c0002176:	6a 20                	push   $0x20
c0002178:	ff 15 a0 39 01 c0    	call   *0xc00139a0
c000217e:	e9 6d fc ff ff       	jmp    c0001df0 <intr_exit>

c0002183 <intr0x21entry>:
intr0x21entry():
c0002183:	6a 00                	push   $0x0
c0002185:	1e                   	push   %ds
c0002186:	06                   	push   %es
c0002187:	0f a0                	push   %fs
c0002189:	0f a8                	push   %gs
c000218b:	60                   	pusha  
c000218c:	b0 20                	mov    $0x20,%al
c000218e:	e6 a0                	out    %al,$0xa0
c0002190:	e6 20                	out    %al,$0x20
c0002192:	6a 21                	push   $0x21
c0002194:	ff 15 a4 39 01 c0    	call   *0xc00139a4
c000219a:	e9 51 fc ff ff       	jmp    c0001df0 <intr_exit>

c000219f <intr0x22entry>:
intr0x22entry():
c000219f:	6a 00                	push   $0x0
c00021a1:	1e                   	push   %ds
c00021a2:	06                   	push   %es
c00021a3:	0f a0                	push   %fs
c00021a5:	0f a8                	push   %gs
c00021a7:	60                   	pusha  
c00021a8:	b0 20                	mov    $0x20,%al
c00021aa:	e6 a0                	out    %al,$0xa0
c00021ac:	e6 20                	out    %al,$0x20
c00021ae:	6a 22                	push   $0x22
c00021b0:	ff 15 a8 39 01 c0    	call   *0xc00139a8
c00021b6:	e9 35 fc ff ff       	jmp    c0001df0 <intr_exit>

c00021bb <intr0x23entry>:
intr0x23entry():
c00021bb:	6a 00                	push   $0x0
c00021bd:	1e                   	push   %ds
c00021be:	06                   	push   %es
c00021bf:	0f a0                	push   %fs
c00021c1:	0f a8                	push   %gs
c00021c3:	60                   	pusha  
c00021c4:	b0 20                	mov    $0x20,%al
c00021c6:	e6 a0                	out    %al,$0xa0
c00021c8:	e6 20                	out    %al,$0x20
c00021ca:	6a 23                	push   $0x23
c00021cc:	ff 15 ac 39 01 c0    	call   *0xc00139ac
c00021d2:	e9 19 fc ff ff       	jmp    c0001df0 <intr_exit>

c00021d7 <intr0x24entry>:
intr0x24entry():
c00021d7:	6a 00                	push   $0x0
c00021d9:	1e                   	push   %ds
c00021da:	06                   	push   %es
c00021db:	0f a0                	push   %fs
c00021dd:	0f a8                	push   %gs
c00021df:	60                   	pusha  
c00021e0:	b0 20                	mov    $0x20,%al
c00021e2:	e6 a0                	out    %al,$0xa0
c00021e4:	e6 20                	out    %al,$0x20
c00021e6:	6a 24                	push   $0x24
c00021e8:	ff 15 b0 39 01 c0    	call   *0xc00139b0
c00021ee:	e9 fd fb ff ff       	jmp    c0001df0 <intr_exit>

c00021f3 <intr0x25entry>:
intr0x25entry():
c00021f3:	6a 00                	push   $0x0
c00021f5:	1e                   	push   %ds
c00021f6:	06                   	push   %es
c00021f7:	0f a0                	push   %fs
c00021f9:	0f a8                	push   %gs
c00021fb:	60                   	pusha  
c00021fc:	b0 20                	mov    $0x20,%al
c00021fe:	e6 a0                	out    %al,$0xa0
c0002200:	e6 20                	out    %al,$0x20
c0002202:	6a 25                	push   $0x25
c0002204:	ff 15 b4 39 01 c0    	call   *0xc00139b4
c000220a:	e9 e1 fb ff ff       	jmp    c0001df0 <intr_exit>

c000220f <intr0x26entry>:
intr0x26entry():
c000220f:	6a 00                	push   $0x0
c0002211:	1e                   	push   %ds
c0002212:	06                   	push   %es
c0002213:	0f a0                	push   %fs
c0002215:	0f a8                	push   %gs
c0002217:	60                   	pusha  
c0002218:	b0 20                	mov    $0x20,%al
c000221a:	e6 a0                	out    %al,$0xa0
c000221c:	e6 20                	out    %al,$0x20
c000221e:	6a 26                	push   $0x26
c0002220:	ff 15 b8 39 01 c0    	call   *0xc00139b8
c0002226:	e9 c5 fb ff ff       	jmp    c0001df0 <intr_exit>

c000222b <intr0x27entry>:
intr0x27entry():
c000222b:	6a 00                	push   $0x0
c000222d:	1e                   	push   %ds
c000222e:	06                   	push   %es
c000222f:	0f a0                	push   %fs
c0002231:	0f a8                	push   %gs
c0002233:	60                   	pusha  
c0002234:	b0 20                	mov    $0x20,%al
c0002236:	e6 a0                	out    %al,$0xa0
c0002238:	e6 20                	out    %al,$0x20
c000223a:	6a 27                	push   $0x27
c000223c:	ff 15 bc 39 01 c0    	call   *0xc00139bc
c0002242:	e9 a9 fb ff ff       	jmp    c0001df0 <intr_exit>

c0002247 <intr0x28entry>:
intr0x28entry():
c0002247:	6a 00                	push   $0x0
c0002249:	1e                   	push   %ds
c000224a:	06                   	push   %es
c000224b:	0f a0                	push   %fs
c000224d:	0f a8                	push   %gs
c000224f:	60                   	pusha  
c0002250:	b0 20                	mov    $0x20,%al
c0002252:	e6 a0                	out    %al,$0xa0
c0002254:	e6 20                	out    %al,$0x20
c0002256:	6a 28                	push   $0x28
c0002258:	ff 15 c0 39 01 c0    	call   *0xc00139c0
c000225e:	e9 8d fb ff ff       	jmp    c0001df0 <intr_exit>

c0002263 <intr0x29entry>:
intr0x29entry():
c0002263:	6a 00                	push   $0x0
c0002265:	1e                   	push   %ds
c0002266:	06                   	push   %es
c0002267:	0f a0                	push   %fs
c0002269:	0f a8                	push   %gs
c000226b:	60                   	pusha  
c000226c:	b0 20                	mov    $0x20,%al
c000226e:	e6 a0                	out    %al,$0xa0
c0002270:	e6 20                	out    %al,$0x20
c0002272:	6a 29                	push   $0x29
c0002274:	ff 15 c4 39 01 c0    	call   *0xc00139c4
c000227a:	e9 71 fb ff ff       	jmp    c0001df0 <intr_exit>

c000227f <intr0x2aentry>:
intr0x2aentry():
c000227f:	6a 00                	push   $0x0
c0002281:	1e                   	push   %ds
c0002282:	06                   	push   %es
c0002283:	0f a0                	push   %fs
c0002285:	0f a8                	push   %gs
c0002287:	60                   	pusha  
c0002288:	b0 20                	mov    $0x20,%al
c000228a:	e6 a0                	out    %al,$0xa0
c000228c:	e6 20                	out    %al,$0x20
c000228e:	6a 2a                	push   $0x2a
c0002290:	ff 15 c8 39 01 c0    	call   *0xc00139c8
c0002296:	e9 55 fb ff ff       	jmp    c0001df0 <intr_exit>

c000229b <intr0x2bentry>:
intr0x2bentry():
c000229b:	6a 00                	push   $0x0
c000229d:	1e                   	push   %ds
c000229e:	06                   	push   %es
c000229f:	0f a0                	push   %fs
c00022a1:	0f a8                	push   %gs
c00022a3:	60                   	pusha  
c00022a4:	b0 20                	mov    $0x20,%al
c00022a6:	e6 a0                	out    %al,$0xa0
c00022a8:	e6 20                	out    %al,$0x20
c00022aa:	6a 2b                	push   $0x2b
c00022ac:	ff 15 cc 39 01 c0    	call   *0xc00139cc
c00022b2:	e9 39 fb ff ff       	jmp    c0001df0 <intr_exit>

c00022b7 <intr0x2centry>:
intr0x2centry():
c00022b7:	6a 00                	push   $0x0
c00022b9:	1e                   	push   %ds
c00022ba:	06                   	push   %es
c00022bb:	0f a0                	push   %fs
c00022bd:	0f a8                	push   %gs
c00022bf:	60                   	pusha  
c00022c0:	b0 20                	mov    $0x20,%al
c00022c2:	e6 a0                	out    %al,$0xa0
c00022c4:	e6 20                	out    %al,$0x20
c00022c6:	6a 2c                	push   $0x2c
c00022c8:	ff 15 d0 39 01 c0    	call   *0xc00139d0
c00022ce:	e9 1d fb ff ff       	jmp    c0001df0 <intr_exit>

c00022d3 <intr0x2dentry>:
intr0x2dentry():
c00022d3:	6a 00                	push   $0x0
c00022d5:	1e                   	push   %ds
c00022d6:	06                   	push   %es
c00022d7:	0f a0                	push   %fs
c00022d9:	0f a8                	push   %gs
c00022db:	60                   	pusha  
c00022dc:	b0 20                	mov    $0x20,%al
c00022de:	e6 a0                	out    %al,$0xa0
c00022e0:	e6 20                	out    %al,$0x20
c00022e2:	6a 2d                	push   $0x2d
c00022e4:	ff 15 d4 39 01 c0    	call   *0xc00139d4
c00022ea:	e9 01 fb ff ff       	jmp    c0001df0 <intr_exit>

c00022ef <intr0x2eentry>:
intr0x2eentry():
c00022ef:	6a 00                	push   $0x0
c00022f1:	1e                   	push   %ds
c00022f2:	06                   	push   %es
c00022f3:	0f a0                	push   %fs
c00022f5:	0f a8                	push   %gs
c00022f7:	60                   	pusha  
c00022f8:	b0 20                	mov    $0x20,%al
c00022fa:	e6 a0                	out    %al,$0xa0
c00022fc:	e6 20                	out    %al,$0x20
c00022fe:	6a 2e                	push   $0x2e
c0002300:	ff 15 d8 39 01 c0    	call   *0xc00139d8
c0002306:	e9 e5 fa ff ff       	jmp    c0001df0 <intr_exit>

c000230b <intr0x2fentry>:
intr0x2fentry():
c000230b:	6a 00                	push   $0x0
c000230d:	1e                   	push   %ds
c000230e:	06                   	push   %es
c000230f:	0f a0                	push   %fs
c0002311:	0f a8                	push   %gs
c0002313:	60                   	pusha  
c0002314:	b0 20                	mov    $0x20,%al
c0002316:	e6 a0                	out    %al,$0xa0
c0002318:	e6 20                	out    %al,$0x20
c000231a:	6a 2f                	push   $0x2f
c000231c:	ff 15 dc 39 01 c0    	call   *0xc00139dc
c0002322:	e9 c9 fa ff ff       	jmp    c0001df0 <intr_exit>

c0002327 <syscall_handler>:
syscall_handler():
c0002327:	6a 00                	push   $0x0
c0002329:	1e                   	push   %ds
c000232a:	06                   	push   %es
c000232b:	0f a0                	push   %fs
c000232d:	0f a8                	push   %gs
c000232f:	60                   	pusha  
c0002330:	68 80 00 00 00       	push   $0x80
c0002335:	52                   	push   %edx
c0002336:	51                   	push   %ecx
c0002337:	53                   	push   %ebx
c0002338:	ff 14 85 60 3d 01 c0 	call   *-0x3ffec2a0(,%eax,4)
c000233f:	83 c4 0c             	add    $0xc,%esp
c0002342:	89 44 24 20          	mov    %eax,0x20(%esp)
c0002346:	e9 a5 fa ff ff       	jmp    c0001df0 <intr_exit>
c000234b:	66 90                	xchg   %ax,%ax
c000234d:	66 90                	xchg   %ax,%ax
c000234f:	90                   	nop

c0002350 <put_str>:
put_str():
c0002350:	53                   	push   %ebx
c0002351:	51                   	push   %ecx
c0002352:	31 c9                	xor    %ecx,%ecx
c0002354:	8b 5c 24 0c          	mov    0xc(%esp),%ebx

c0002358 <put_str.goon>:
put_str.goon():
c0002358:	8a 0b                	mov    (%ebx),%cl
c000235a:	80 f9 00             	cmp    $0x0,%cl
c000235d:	74 0c                	je     c000236b <put_str.str_over>
c000235f:	51                   	push   %ecx
c0002360:	e8 09 00 00 00       	call   c000236e <put_char>
c0002365:	83 c4 04             	add    $0x4,%esp
c0002368:	43                   	inc    %ebx
c0002369:	eb ed                	jmp    c0002358 <put_str.goon>

c000236b <put_str.str_over>:
put_str.str_over():
c000236b:	59                   	pop    %ecx
c000236c:	5b                   	pop    %ebx
c000236d:	c3                   	ret    

c000236e <put_char>:
put_char():
c000236e:	60                   	pusha  
c000236f:	66 b8 18 00          	mov    $0x18,%ax
c0002373:	8e e8                	mov    %eax,%gs
c0002375:	66 ba d4 03          	mov    $0x3d4,%dx
c0002379:	b0 0e                	mov    $0xe,%al
c000237b:	ee                   	out    %al,(%dx)
c000237c:	66 ba d5 03          	mov    $0x3d5,%dx
c0002380:	ec                   	in     (%dx),%al
c0002381:	88 c4                	mov    %al,%ah
c0002383:	66 ba d4 03          	mov    $0x3d4,%dx
c0002387:	b0 0f                	mov    $0xf,%al
c0002389:	ee                   	out    %al,(%dx)
c000238a:	66 ba d5 03          	mov    $0x3d5,%dx
c000238e:	ec                   	in     (%dx),%al
c000238f:	66 89 c3             	mov    %ax,%bx
c0002392:	8b 4c 24 24          	mov    0x24(%esp),%ecx
c0002396:	80 f9 0d             	cmp    $0xd,%cl
c0002399:	74 3c                	je     c00023d7 <put_char.is_carriage_return>
c000239b:	80 f9 0a             	cmp    $0xa,%cl
c000239e:	74 37                	je     c00023d7 <put_char.is_carriage_return>
c00023a0:	80 f9 08             	cmp    $0x8,%cl
c00023a3:	74 02                	je     c00023a7 <put_char.is_backspace>
c00023a5:	eb 16                	jmp    c00023bd <put_char.put_other>

c00023a7 <put_char.is_backspace>:
put_char.is_backspace():
c00023a7:	66 4b                	dec    %bx
c00023a9:	66 d1 e3             	shl    %bx
c00023ac:	65 67 c6 07 20       	movb   $0x20,%gs:(%bx)
c00023b1:	66 43                	inc    %bx
c00023b3:	65 67 c6 07 07       	movb   $0x7,%gs:(%bx)
c00023b8:	66 d1 eb             	shr    %bx
c00023bb:	eb 60                	jmp    c000241d <put_char.set_cursor>

c00023bd <put_char.put_other>:
put_char.put_other():
c00023bd:	66 d1 e3             	shl    %bx
c00023c0:	65 67 88 0f          	mov    %cl,%gs:(%bx)
c00023c4:	66 43                	inc    %bx
c00023c6:	65 67 c6 07 07       	movb   $0x7,%gs:(%bx)
c00023cb:	66 d1 eb             	shr    %bx
c00023ce:	66 43                	inc    %bx
c00023d0:	66 81 fb d0 07       	cmp    $0x7d0,%bx
c00023d5:	7c 46                	jl     c000241d <put_char.set_cursor>

c00023d7 <put_char.is_carriage_return>:
put_char.is_line_feed():
c00023d7:	66 31 d2             	xor    %dx,%dx
c00023da:	66 89 d8             	mov    %bx,%ax
c00023dd:	66 be 50 00          	mov    $0x50,%si
c00023e1:	66 f7 f6             	div    %si
c00023e4:	66 29 d3             	sub    %dx,%bx

c00023e7 <put_char.is_carriage_return_end>:
put_char.is_carriage_return_end():
c00023e7:	66 83 c3 50          	add    $0x50,%bx
c00023eb:	66 81 fb d0 07       	cmp    $0x7d0,%bx

c00023f0 <put_char.is_line_feed_end>:
put_char.is_line_feed_end():
c00023f0:	7c 2b                	jl     c000241d <put_char.set_cursor>

c00023f2 <put_char.roll_screen>:
put_char.roll_screen():
c00023f2:	fc                   	cld    
c00023f3:	b9 c0 03 00 00       	mov    $0x3c0,%ecx
c00023f8:	be a0 80 0b c0       	mov    $0xc00b80a0,%esi
c00023fd:	bf 00 80 0b c0       	mov    $0xc00b8000,%edi
c0002402:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c0002404:	bb 00 0f 00 00       	mov    $0xf00,%ebx
c0002409:	b9 50 00 00 00       	mov    $0x50,%ecx

c000240e <put_char.cls>:
put_char.cls():
c000240e:	65 66 c7 03 20 07    	movw   $0x720,%gs:(%ebx)
c0002414:	83 c3 02             	add    $0x2,%ebx
c0002417:	e2 f5                	loop   c000240e <put_char.cls>
c0002419:	66 bb 80 07          	mov    $0x780,%bx

c000241d <put_char.set_cursor>:
put_char.set_cursor():
c000241d:	66 ba d4 03          	mov    $0x3d4,%dx
c0002421:	b0 0e                	mov    $0xe,%al
c0002423:	ee                   	out    %al,(%dx)
c0002424:	66 ba d5 03          	mov    $0x3d5,%dx
c0002428:	88 f8                	mov    %bh,%al
c000242a:	ee                   	out    %al,(%dx)
c000242b:	66 ba d4 03          	mov    $0x3d4,%dx
c000242f:	b0 0f                	mov    $0xf,%al
c0002431:	ee                   	out    %al,(%dx)
c0002432:	66 ba d5 03          	mov    $0x3d5,%dx
c0002436:	88 d8                	mov    %bl,%al
c0002438:	ee                   	out    %al,(%dx)

c0002439 <put_char.put_char_done>:
put_char.put_char_done():
c0002439:	61                   	popa   
c000243a:	c3                   	ret    

c000243b <cls_screen>:
cls_screen():
c000243b:	60                   	pusha  
c000243c:	66 b8 18 00          	mov    $0x18,%ax
c0002440:	8e e8                	mov    %eax,%gs
c0002442:	bb 00 00 00 00       	mov    $0x0,%ebx
c0002447:	b9 d0 07 00 00       	mov    $0x7d0,%ecx

c000244c <cls_screen.cls>:
cls_screen.cls():
c000244c:	65 66 c7 03 20 07    	movw   $0x720,%gs:(%ebx)
c0002452:	83 c3 02             	add    $0x2,%ebx
c0002455:	e2 f5                	loop   c000244c <cls_screen.cls>
c0002457:	bb 00 00 00 00       	mov    $0x0,%ebx

c000245c <cls_screen.set_cursor>:
cls_screen.set_cursor():
c000245c:	66 ba d4 03          	mov    $0x3d4,%dx
c0002460:	b0 0e                	mov    $0xe,%al
c0002462:	ee                   	out    %al,(%dx)
c0002463:	66 ba d5 03          	mov    $0x3d5,%dx
c0002467:	88 f8                	mov    %bh,%al
c0002469:	ee                   	out    %al,(%dx)
c000246a:	66 ba d4 03          	mov    $0x3d4,%dx
c000246e:	b0 0f                	mov    $0xf,%al
c0002470:	ee                   	out    %al,(%dx)
c0002471:	66 ba d5 03          	mov    $0x3d5,%dx
c0002475:	88 d8                	mov    %bl,%al
c0002477:	ee                   	out    %al,(%dx)
c0002478:	61                   	popa   
c0002479:	c3                   	ret    

c000247a <put_int>:
put_int():
c000247a:	60                   	pusha  
c000247b:	89 e5                	mov    %esp,%ebp
c000247d:	8b 45 24             	mov    0x24(%ebp),%eax
c0002480:	89 c2                	mov    %eax,%edx
c0002482:	bf 07 00 00 00       	mov    $0x7,%edi
c0002487:	b9 08 00 00 00       	mov    $0x8,%ecx
c000248c:	bb c0 2a 01 c0       	mov    $0xc0012ac0,%ebx

c0002491 <put_int.16based_4bits>:
put_int.16based_4bits():
c0002491:	83 e2 0f             	and    $0xf,%edx
c0002494:	83 fa 09             	cmp    $0x9,%edx
c0002497:	7f 05                	jg     c000249e <put_int.is_A2F>
c0002499:	83 c2 30             	add    $0x30,%edx
c000249c:	eb 06                	jmp    c00024a4 <put_int.store>

c000249e <put_int.is_A2F>:
put_int.is_A2F():
c000249e:	83 ea 0a             	sub    $0xa,%edx
c00024a1:	83 c2 41             	add    $0x41,%edx

c00024a4 <put_int.store>:
put_int.store():
c00024a4:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
c00024a7:	4f                   	dec    %edi
c00024a8:	c1 e8 04             	shr    $0x4,%eax
c00024ab:	89 c2                	mov    %eax,%edx
c00024ad:	e2 e2                	loop   c0002491 <put_int.16based_4bits>

c00024af <put_int.ready_to_print>:
put_int.ready_to_print():
c00024af:	47                   	inc    %edi

c00024b0 <put_int.skip_prefix_0>:
put_int.skip_prefix_0():
c00024b0:	83 ff 08             	cmp    $0x8,%edi
c00024b3:	74 0f                	je     c00024c4 <put_int.full0>

c00024b5 <put_int.go_on_skip>:
put_int.go_on_skip():
c00024b5:	8a 8f c0 2a 01 c0    	mov    -0x3ffed540(%edi),%cl
c00024bb:	47                   	inc    %edi
c00024bc:	80 f9 30             	cmp    $0x30,%cl
c00024bf:	74 ef                	je     c00024b0 <put_int.skip_prefix_0>
c00024c1:	4f                   	dec    %edi
c00024c2:	eb 02                	jmp    c00024c6 <put_int.put_each_num>

c00024c4 <put_int.full0>:
put_int.full0():
c00024c4:	b1 30                	mov    $0x30,%cl

c00024c6 <put_int.put_each_num>:
put_int.put_each_num():
c00024c6:	51                   	push   %ecx
c00024c7:	e8 a2 fe ff ff       	call   c000236e <put_char>
c00024cc:	83 c4 04             	add    $0x4,%esp
c00024cf:	47                   	inc    %edi
c00024d0:	8a 8f c0 2a 01 c0    	mov    -0x3ffed540(%edi),%cl
c00024d6:	83 ff 08             	cmp    $0x8,%edi
c00024d9:	7c eb                	jl     c00024c6 <put_int.put_each_num>
c00024db:	61                   	popa   
c00024dc:	c3                   	ret    

c00024dd <set_cursor>:
set_cursor():
c00024dd:	60                   	pusha  
c00024de:	66 8b 5c 24 24       	mov    0x24(%esp),%bx
c00024e3:	66 ba d4 03          	mov    $0x3d4,%dx
c00024e7:	b0 0e                	mov    $0xe,%al
c00024e9:	ee                   	out    %al,(%dx)
c00024ea:	66 ba d5 03          	mov    $0x3d5,%dx
c00024ee:	88 f8                	mov    %bh,%al
c00024f0:	ee                   	out    %al,(%dx)
c00024f1:	66 ba d4 03          	mov    $0x3d4,%dx
c00024f5:	b0 0f                	mov    $0xf,%al
c00024f7:	ee                   	out    %al,(%dx)
c00024f8:	66 ba d5 03          	mov    $0x3d5,%dx
c00024fc:	88 d8                	mov    %bl,%al
c00024fe:	ee                   	out    %al,(%dx)
c00024ff:	61                   	popa   
c0002500:	c3                   	ret    

c0002501 <panic_spin>:
panic_spin():
/work/x86_os_my/kernel/debug.c:10
/* 打印文件名,行号,函数名,条件并使程序悬停 */
void panic_spin(char* filename,	       \
	        int line,	       \
		const char* func,      \
		const char* condition) \
{
c0002501:	55                   	push   %ebp
c0002502:	89 e5                	mov    %esp,%ebp
c0002504:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/kernel/debug.c:11
   intr_disable();	// 因为有时候会单独调用panic_spin,所以在此处关中断。
c0002507:	e8 0d f6 ff ff       	call   c0001b19 <intr_disable>
/work/x86_os_my/kernel/debug.c:12
   put_str("\n\n\n!!!!! error !!!!!\n");
c000250c:	83 ec 0c             	sub    $0xc,%esp
c000250f:	68 e4 d4 00 c0       	push   $0xc000d4e4
c0002514:	e8 37 fe ff ff       	call   c0002350 <put_str>
c0002519:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/debug.c:13
   put_str("filename:");put_str(filename);put_str("\n");
c000251c:	83 ec 0c             	sub    $0xc,%esp
c000251f:	68 fa d4 00 c0       	push   $0xc000d4fa
c0002524:	e8 27 fe ff ff       	call   c0002350 <put_str>
c0002529:	83 c4 10             	add    $0x10,%esp
c000252c:	83 ec 0c             	sub    $0xc,%esp
c000252f:	ff 75 08             	pushl  0x8(%ebp)
c0002532:	e8 19 fe ff ff       	call   c0002350 <put_str>
c0002537:	83 c4 10             	add    $0x10,%esp
c000253a:	83 ec 0c             	sub    $0xc,%esp
c000253d:	68 04 d5 00 c0       	push   $0xc000d504
c0002542:	e8 09 fe ff ff       	call   c0002350 <put_str>
c0002547:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/debug.c:14
   put_str("line:0x");put_int(line);put_str("\n");
c000254a:	83 ec 0c             	sub    $0xc,%esp
c000254d:	68 06 d5 00 c0       	push   $0xc000d506
c0002552:	e8 f9 fd ff ff       	call   c0002350 <put_str>
c0002557:	83 c4 10             	add    $0x10,%esp
c000255a:	8b 45 0c             	mov    0xc(%ebp),%eax
c000255d:	83 ec 0c             	sub    $0xc,%esp
c0002560:	50                   	push   %eax
c0002561:	e8 14 ff ff ff       	call   c000247a <put_int>
c0002566:	83 c4 10             	add    $0x10,%esp
c0002569:	83 ec 0c             	sub    $0xc,%esp
c000256c:	68 04 d5 00 c0       	push   $0xc000d504
c0002571:	e8 da fd ff ff       	call   c0002350 <put_str>
c0002576:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/debug.c:15
   put_str("function:");put_str((char*)func);put_str("\n");
c0002579:	83 ec 0c             	sub    $0xc,%esp
c000257c:	68 0e d5 00 c0       	push   $0xc000d50e
c0002581:	e8 ca fd ff ff       	call   c0002350 <put_str>
c0002586:	83 c4 10             	add    $0x10,%esp
c0002589:	83 ec 0c             	sub    $0xc,%esp
c000258c:	ff 75 10             	pushl  0x10(%ebp)
c000258f:	e8 bc fd ff ff       	call   c0002350 <put_str>
c0002594:	83 c4 10             	add    $0x10,%esp
c0002597:	83 ec 0c             	sub    $0xc,%esp
c000259a:	68 04 d5 00 c0       	push   $0xc000d504
c000259f:	e8 ac fd ff ff       	call   c0002350 <put_str>
c00025a4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/debug.c:16
   put_str("condition:");put_str((char*)condition);put_str("\n");
c00025a7:	83 ec 0c             	sub    $0xc,%esp
c00025aa:	68 18 d5 00 c0       	push   $0xc000d518
c00025af:	e8 9c fd ff ff       	call   c0002350 <put_str>
c00025b4:	83 c4 10             	add    $0x10,%esp
c00025b7:	83 ec 0c             	sub    $0xc,%esp
c00025ba:	ff 75 14             	pushl  0x14(%ebp)
c00025bd:	e8 8e fd ff ff       	call   c0002350 <put_str>
c00025c2:	83 c4 10             	add    $0x10,%esp
c00025c5:	83 ec 0c             	sub    $0xc,%esp
c00025c8:	68 04 d5 00 c0       	push   $0xc000d504
c00025cd:	e8 7e fd ff ff       	call   c0002350 <put_str>
c00025d2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/debug.c:17 (discriminator 1)
   while(1);
c00025d5:	eb fe                	jmp    c00025d5 <panic_spin+0xd4>

c00025d7 <bitmap_init>:
bitmap_init():
/work/x86_os_my/lib/kernel/bitmap.c:16
	uint8_t* bits;				位图空间
};
*/

/* 将位图btmp初始化 */
void bitmap_init(struct bitmap* btmp) {
c00025d7:	55                   	push   %ebp
c00025d8:	89 e5                	mov    %esp,%ebp
c00025da:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/lib/kernel/bitmap.c:17
	memset(btmp->bits, 0, btmp->btmp_bytes_len);   
c00025dd:	8b 45 08             	mov    0x8(%ebp),%eax
c00025e0:	8b 10                	mov    (%eax),%edx
c00025e2:	8b 45 08             	mov    0x8(%ebp),%eax
c00025e5:	8b 40 04             	mov    0x4(%eax),%eax
c00025e8:	83 ec 04             	sub    $0x4,%esp
c00025eb:	52                   	push   %edx
c00025ec:	6a 00                	push   $0x0
c00025ee:	50                   	push   %eax
c00025ef:	e8 11 14 00 00       	call   c0003a05 <memset>
c00025f4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/bitmap.c:18
}
c00025f7:	90                   	nop
c00025f8:	c9                   	leave  
c00025f9:	c3                   	ret    

c00025fa <bitmap_scan_test>:
bitmap_scan_test():
/work/x86_os_my/lib/kernel/bitmap.c:23

/* 判断bit_idx位是否为1
若为1则返回true
否则返回false */
bool bitmap_scan_test(struct bitmap* btmp, uint32_t bit_idx) {
c00025fa:	55                   	push   %ebp
c00025fb:	89 e5                	mov    %esp,%ebp
c00025fd:	53                   	push   %ebx
c00025fe:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/kernel/bitmap.c:24
	uint32_t byte_idx = bit_idx / 8;    // 向下取整用于索引数组下标
c0002601:	8b 45 0c             	mov    0xc(%ebp),%eax
c0002604:	c1 e8 03             	shr    $0x3,%eax
c0002607:	89 45 f8             	mov    %eax,-0x8(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:25
	uint32_t bit_odd  = bit_idx % 8;    // 取余用于索引数组内的位
c000260a:	8b 45 0c             	mov    0xc(%ebp),%eax
c000260d:	83 e0 07             	and    $0x7,%eax
c0002610:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:26
	return (btmp->bits[byte_idx] & (BITMAP_MASK << bit_odd));
c0002613:	8b 45 08             	mov    0x8(%ebp),%eax
c0002616:	8b 50 04             	mov    0x4(%eax),%edx
c0002619:	8b 45 f8             	mov    -0x8(%ebp),%eax
c000261c:	01 d0                	add    %edx,%eax
c000261e:	0f b6 00             	movzbl (%eax),%eax
c0002621:	0f b6 d0             	movzbl %al,%edx
c0002624:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002627:	bb 01 00 00 00       	mov    $0x1,%ebx
c000262c:	89 c1                	mov    %eax,%ecx
c000262e:	d3 e3                	shl    %cl,%ebx
c0002630:	89 d8                	mov    %ebx,%eax
c0002632:	21 d0                	and    %edx,%eax
/work/x86_os_my/lib/kernel/bitmap.c:27
}
c0002634:	83 c4 10             	add    $0x10,%esp
c0002637:	5b                   	pop    %ebx
c0002638:	5d                   	pop    %ebp
c0002639:	c3                   	ret    

c000263a <bitmap_scan>:
bitmap_scan():
/work/x86_os_my/lib/kernel/bitmap.c:32

/* 在位图中申请连续cnt个位
成功：返回其起始位下标
失败：返回-1 */
int bitmap_scan(struct bitmap* btmp, uint32_t cnt) {
c000263a:	55                   	push   %ebp
c000263b:	89 e5                	mov    %esp,%ebp
c000263d:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/lib/kernel/bitmap.c:33
	uint32_t idx_byte = 0;	 // 用于记录空闲位所在的字节
c0002640:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:35
	/* 先逐字节比较,蛮力法 */
	while (( 0xff == btmp->bits[idx_byte]) && (idx_byte < btmp->btmp_bytes_len)) {
c0002647:	eb 04                	jmp    c000264d <bitmap_scan+0x13>
/work/x86_os_my/lib/kernel/bitmap.c:37
		/* 1表示该位已分配,所以若为0xff,则表示该字节内已无空闲位,向下一字节继续找 */
		idx_byte++;
c0002649:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:35
成功：返回其起始位下标
失败：返回-1 */
int bitmap_scan(struct bitmap* btmp, uint32_t cnt) {
	uint32_t idx_byte = 0;	 // 用于记录空闲位所在的字节
	/* 先逐字节比较,蛮力法 */
	while (( 0xff == btmp->bits[idx_byte]) && (idx_byte < btmp->btmp_bytes_len)) {
c000264d:	8b 45 08             	mov    0x8(%ebp),%eax
c0002650:	8b 50 04             	mov    0x4(%eax),%edx
c0002653:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002656:	01 d0                	add    %edx,%eax
c0002658:	0f b6 00             	movzbl (%eax),%eax
c000265b:	3c ff                	cmp    $0xff,%al
c000265d:	75 0a                	jne    c0002669 <bitmap_scan+0x2f>
/work/x86_os_my/lib/kernel/bitmap.c:35 (discriminator 1)
c000265f:	8b 45 08             	mov    0x8(%ebp),%eax
c0002662:	8b 00                	mov    (%eax),%eax
c0002664:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0002667:	77 e0                	ja     c0002649 <bitmap_scan+0xf>
/work/x86_os_my/lib/kernel/bitmap.c:39
		/* 1表示该位已分配,所以若为0xff,则表示该字节内已无空闲位,向下一字节继续找 */
		idx_byte++;
	}
	ASSERT(idx_byte < btmp->btmp_bytes_len);	//这里应该是"<="
c0002669:	8b 45 08             	mov    0x8(%ebp),%eax
c000266c:	8b 00                	mov    (%eax),%eax
c000266e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0002671:	77 19                	ja     c000268c <bitmap_scan+0x52>
/work/x86_os_my/lib/kernel/bitmap.c:39 (discriminator 1)
c0002673:	68 24 d5 00 c0       	push   $0xc000d524
c0002678:	68 78 d5 00 c0       	push   $0xc000d578
c000267d:	6a 27                	push   $0x27
c000267f:	68 44 d5 00 c0       	push   $0xc000d544
c0002684:	e8 78 fe ff ff       	call   c0002501 <panic_spin>
c0002689:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/bitmap.c:40
	if (idx_byte == btmp->btmp_bytes_len) {		// 若该内存池找不到可用空间		
c000268c:	8b 45 08             	mov    0x8(%ebp),%eax
c000268f:	8b 00                	mov    (%eax),%eax
c0002691:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0002694:	75 0a                	jne    c00026a0 <bitmap_scan+0x66>
/work/x86_os_my/lib/kernel/bitmap.c:41
		return -1;
c0002696:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000269b:	e9 cd 00 00 00       	jmp    c000276d <bitmap_scan+0x133>
/work/x86_os_my/lib/kernel/bitmap.c:46
	}

	/* 若在位图数组范围内的某字节内找到了空闲位，
	 * 在该字节内逐位比对,返回空闲位的索引。*/
	int idx_bit = 0;
c00026a0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:48
	/* 和btmp->bits[idx_byte]这个字节逐位对比 */
	while ((uint8_t)(BITMAP_MASK << idx_bit) & btmp->bits[idx_byte]) { 
c00026a7:	eb 04                	jmp    c00026ad <bitmap_scan+0x73>
/work/x86_os_my/lib/kernel/bitmap.c:49
		idx_bit++;
c00026a9:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:48

	/* 若在位图数组范围内的某字节内找到了空闲位，
	 * 在该字节内逐位比对,返回空闲位的索引。*/
	int idx_bit = 0;
	/* 和btmp->bits[idx_byte]这个字节逐位对比 */
	while ((uint8_t)(BITMAP_MASK << idx_bit) & btmp->bits[idx_byte]) { 
c00026ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00026b0:	ba 01 00 00 00       	mov    $0x1,%edx
c00026b5:	89 c1                	mov    %eax,%ecx
c00026b7:	d3 e2                	shl    %cl,%edx
c00026b9:	89 d0                	mov    %edx,%eax
c00026bb:	0f b6 d0             	movzbl %al,%edx
c00026be:	8b 45 08             	mov    0x8(%ebp),%eax
c00026c1:	8b 48 04             	mov    0x4(%eax),%ecx
c00026c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00026c7:	01 c8                	add    %ecx,%eax
c00026c9:	0f b6 00             	movzbl (%eax),%eax
c00026cc:	0f b6 c0             	movzbl %al,%eax
c00026cf:	21 d0                	and    %edx,%eax
c00026d1:	85 c0                	test   %eax,%eax
c00026d3:	75 d4                	jne    c00026a9 <bitmap_scan+0x6f>
/work/x86_os_my/lib/kernel/bitmap.c:52
		idx_bit++;
	}
	
	int bit_idx_start = idx_byte * 8 + idx_bit;		// 空闲位在位图内的下标
c00026d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00026d8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c00026df:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00026e2:	01 d0                	add    %edx,%eax
c00026e4:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:53
	if (cnt == 1) {
c00026e7:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c00026eb:	75 05                	jne    c00026f2 <bitmap_scan+0xb8>
/work/x86_os_my/lib/kernel/bitmap.c:54
		return bit_idx_start;
c00026ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00026f0:	eb 7b                	jmp    c000276d <bitmap_scan+0x133>
/work/x86_os_my/lib/kernel/bitmap.c:57
	}

	uint32_t bit_left = (btmp->btmp_bytes_len * 8 - bit_idx_start);	// 记录还有多少位可以判断
c00026f2:	8b 45 08             	mov    0x8(%ebp),%eax
c00026f5:	8b 00                	mov    (%eax),%eax
c00026f7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c00026fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002701:	29 c2                	sub    %eax,%edx
c0002703:	89 d0                	mov    %edx,%eax
c0002705:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:58
	uint32_t next_bit = bit_idx_start + 1;
c0002708:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000270b:	83 c0 01             	add    $0x1,%eax
c000270e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:59
	uint32_t count = 1;			// 用于记录找到的空闲位的个数
c0002711:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:61

	bit_idx_start = -1;			// 初始化为-1，若找不到连续的位就直接返回-1
c0002718:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:62
	while (bit_left-- > 0) {
c000271f:	eb 3c                	jmp    c000275d <bitmap_scan+0x123>
/work/x86_os_my/lib/kernel/bitmap.c:63
		if (!(bitmap_scan_test(btmp, next_bit))) {	// 判断next_bit位是否为1,=1返回true，=0返回false
c0002721:	83 ec 08             	sub    $0x8,%esp
c0002724:	ff 75 e4             	pushl  -0x1c(%ebp)
c0002727:	ff 75 08             	pushl  0x8(%ebp)
c000272a:	e8 cb fe ff ff       	call   c00025fa <bitmap_scan_test>
c000272f:	83 c4 10             	add    $0x10,%esp
c0002732:	85 c0                	test   %eax,%eax
c0002734:	75 06                	jne    c000273c <bitmap_scan+0x102>
/work/x86_os_my/lib/kernel/bitmap.c:64
			count++;
c0002736:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
c000273a:	eb 07                	jmp    c0002743 <bitmap_scan+0x109>
/work/x86_os_my/lib/kernel/bitmap.c:66
		} else {
			count = 0;			// 重新从0找cnt个连续的bit
c000273c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:69
		}
		
		if (count == cnt) {		// 已找到连续的cnt个空位
c0002743:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0002746:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0002749:	75 0e                	jne    c0002759 <bitmap_scan+0x11f>
/work/x86_os_my/lib/kernel/bitmap.c:70
			bit_idx_start = next_bit - cnt + 1;
c000274b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000274e:	2b 45 0c             	sub    0xc(%ebp),%eax
c0002751:	83 c0 01             	add    $0x1,%eax
c0002754:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:71
			break;
c0002757:	eb 11                	jmp    c000276a <bitmap_scan+0x130>
/work/x86_os_my/lib/kernel/bitmap.c:73
		}
		next_bit++;
c0002759:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:62
	uint32_t bit_left = (btmp->btmp_bytes_len * 8 - bit_idx_start);	// 记录还有多少位可以判断
	uint32_t next_bit = bit_idx_start + 1;
	uint32_t count = 1;			// 用于记录找到的空闲位的个数

	bit_idx_start = -1;			// 初始化为-1，若找不到连续的位就直接返回-1
	while (bit_left-- > 0) {
c000275d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002760:	8d 50 ff             	lea    -0x1(%eax),%edx
c0002763:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0002766:	85 c0                	test   %eax,%eax
c0002768:	75 b7                	jne    c0002721 <bitmap_scan+0xe7>
/work/x86_os_my/lib/kernel/bitmap.c:75
			bit_idx_start = next_bit - cnt + 1;
			break;
		}
		next_bit++;
	}
	return bit_idx_start;
c000276a:	8b 45 ec             	mov    -0x14(%ebp),%eax
/work/x86_os_my/lib/kernel/bitmap.c:76
}
c000276d:	c9                   	leave  
c000276e:	c3                   	ret    

c000276f <bitmap_set>:
bitmap_set():
/work/x86_os_my/lib/kernel/bitmap.c:79

/* 将位图btmp的bit_idx位设置为value */
void bitmap_set(struct bitmap* btmp, uint32_t bit_idx, int8_t value) {
c000276f:	55                   	push   %ebp
c0002770:	89 e5                	mov    %esp,%ebp
c0002772:	56                   	push   %esi
c0002773:	53                   	push   %ebx
c0002774:	83 ec 20             	sub    $0x20,%esp
c0002777:	8b 45 10             	mov    0x10(%ebp),%eax
c000277a:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:80
	ASSERT((value == 0) || (value == 1));
c000277d:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c0002781:	74 1f                	je     c00027a2 <bitmap_set+0x33>
/work/x86_os_my/lib/kernel/bitmap.c:80 (discriminator 1)
c0002783:	80 7d e4 01          	cmpb   $0x1,-0x1c(%ebp)
c0002787:	74 19                	je     c00027a2 <bitmap_set+0x33>
/work/x86_os_my/lib/kernel/bitmap.c:80 (discriminator 2)
c0002789:	68 58 d5 00 c0       	push   $0xc000d558
c000278e:	68 84 d5 00 c0       	push   $0xc000d584
c0002793:	6a 50                	push   $0x50
c0002795:	68 44 d5 00 c0       	push   $0xc000d544
c000279a:	e8 62 fd ff ff       	call   c0002501 <panic_spin>
c000279f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/bitmap.c:81
	uint32_t byte_idx = bit_idx / 8;    // 向下取整用于索引数组下标
c00027a2:	8b 45 0c             	mov    0xc(%ebp),%eax
c00027a5:	c1 e8 03             	shr    $0x3,%eax
c00027a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:82
	uint32_t bit_odd  = bit_idx % 8;    // 取余用于索引数组内的位
c00027ab:	8b 45 0c             	mov    0xc(%ebp),%eax
c00027ae:	83 e0 07             	and    $0x7,%eax
c00027b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:86

	/* 一般都会用个0x1这样的数对字节中的位操作,
	* 将1任意移动后再取反,或者先取反再移位,可用来对位置0操作。*/
	if (value) {
c00027b4:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c00027b8:	74 2f                	je     c00027e9 <bitmap_set+0x7a>
/work/x86_os_my/lib/kernel/bitmap.c:87
		btmp->bits[byte_idx] |= (BITMAP_MASK << bit_odd);
c00027ba:	8b 45 08             	mov    0x8(%ebp),%eax
c00027bd:	8b 50 04             	mov    0x4(%eax),%edx
c00027c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00027c3:	01 c2                	add    %eax,%edx
c00027c5:	8b 45 08             	mov    0x8(%ebp),%eax
c00027c8:	8b 48 04             	mov    0x4(%eax),%ecx
c00027cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00027ce:	01 c8                	add    %ecx,%eax
c00027d0:	0f b6 00             	movzbl (%eax),%eax
c00027d3:	89 c6                	mov    %eax,%esi
c00027d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00027d8:	bb 01 00 00 00       	mov    $0x1,%ebx
c00027dd:	89 c1                	mov    %eax,%ecx
c00027df:	d3 e3                	shl    %cl,%ebx
c00027e1:	89 d8                	mov    %ebx,%eax
c00027e3:	09 f0                	or     %esi,%eax
c00027e5:	88 02                	mov    %al,(%edx)
/work/x86_os_my/lib/kernel/bitmap.c:91
	} else {
		btmp->bits[byte_idx] &= ~(BITMAP_MASK << bit_odd);
	}
}
c00027e7:	eb 2f                	jmp    c0002818 <bitmap_set+0xa9>
/work/x86_os_my/lib/kernel/bitmap.c:89
	/* 一般都会用个0x1这样的数对字节中的位操作,
	* 将1任意移动后再取反,或者先取反再移位,可用来对位置0操作。*/
	if (value) {
		btmp->bits[byte_idx] |= (BITMAP_MASK << bit_odd);
	} else {
		btmp->bits[byte_idx] &= ~(BITMAP_MASK << bit_odd);
c00027e9:	8b 45 08             	mov    0x8(%ebp),%eax
c00027ec:	8b 50 04             	mov    0x4(%eax),%edx
c00027ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00027f2:	01 c2                	add    %eax,%edx
c00027f4:	8b 45 08             	mov    0x8(%ebp),%eax
c00027f7:	8b 48 04             	mov    0x4(%eax),%ecx
c00027fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00027fd:	01 c8                	add    %ecx,%eax
c00027ff:	0f b6 00             	movzbl (%eax),%eax
c0002802:	89 c3                	mov    %eax,%ebx
c0002804:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002807:	be 01 00 00 00       	mov    $0x1,%esi
c000280c:	89 c1                	mov    %eax,%ecx
c000280e:	d3 e6                	shl    %cl,%esi
c0002810:	89 f0                	mov    %esi,%eax
c0002812:	f7 d0                	not    %eax
c0002814:	21 d8                	and    %ebx,%eax
c0002816:	88 02                	mov    %al,(%edx)
/work/x86_os_my/lib/kernel/bitmap.c:91
	}
}
c0002818:	90                   	nop
c0002819:	8d 65 f8             	lea    -0x8(%ebp),%esp
c000281c:	5b                   	pop    %ebx
c000281d:	5e                   	pop    %esi
c000281e:	5d                   	pop    %ebp
c000281f:	c3                   	ret    

c0002820 <vaddr_get>:
vaddr_get():
/work/x86_os_my/kernel/memory.c:66
struct pool kernel_pool, user_pool;		// 生成内核内存池和用户内存池
struct virtual_addr kernel_vaddr;		// 此结构是用来给内核分配虚拟地址

/* 在pf表示的虚拟内存池中申请pg_cnt个虚拟页,
 * 成功则返回虚拟页的起始地址, 失败则返回NULL */
static void* vaddr_get(enum pool_flags pf, uint32_t pg_cnt) {
c0002820:	55                   	push   %ebp
c0002821:	89 e5                	mov    %esp,%ebp
c0002823:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:67
	int vaddr_start = 0, bit_idx_start = -1;
c0002826:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c000282d:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:68
	uint32_t cnt = 0;
c0002834:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:69
	if (pf == PF_KERNEL) {
c000283b:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c000283f:	75 64                	jne    c00028a5 <vaddr_get+0x85>
/work/x86_os_my/kernel/memory.c:71
		// 在位图中申请连续cnt个位 成功：返回其起始位下标
		bit_idx_start  = bitmap_scan(&kernel_vaddr.vaddr_bitmap, pg_cnt);
c0002841:	83 ec 08             	sub    $0x8,%esp
c0002844:	ff 75 0c             	pushl  0xc(%ebp)
c0002847:	68 28 3c 01 c0       	push   $0xc0013c28
c000284c:	e8 e9 fd ff ff       	call   c000263a <bitmap_scan>
c0002851:	83 c4 10             	add    $0x10,%esp
c0002854:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:72
		if (bit_idx_start == -1) {	//失败
c0002857:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%ebp)
c000285b:	75 2b                	jne    c0002888 <vaddr_get+0x68>
/work/x86_os_my/kernel/memory.c:73
			return NULL;
c000285d:	b8 00 00 00 00       	mov    $0x0,%eax
c0002862:	e9 cd 00 00 00       	jmp    c0002934 <vaddr_get+0x114>
/work/x86_os_my/kernel/memory.c:77
		}
		while(cnt < pg_cnt) {
			// 设置位图中的位，表示内存已被占用
			bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 1);
c0002867:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000286a:	8d 50 01             	lea    0x1(%eax),%edx
c000286d:	89 55 f0             	mov    %edx,-0x10(%ebp)
c0002870:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0002873:	01 d0                	add    %edx,%eax
c0002875:	83 ec 04             	sub    $0x4,%esp
c0002878:	6a 01                	push   $0x1
c000287a:	50                   	push   %eax
c000287b:	68 28 3c 01 c0       	push   $0xc0013c28
c0002880:	e8 ea fe ff ff       	call   c000276f <bitmap_set>
c0002885:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:75
		// 在位图中申请连续cnt个位 成功：返回其起始位下标
		bit_idx_start  = bitmap_scan(&kernel_vaddr.vaddr_bitmap, pg_cnt);
		if (bit_idx_start == -1) {	//失败
			return NULL;
		}
		while(cnt < pg_cnt) {
c0002888:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000288b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c000288e:	72 d7                	jb     c0002867 <vaddr_get+0x47>
/work/x86_os_my/kernel/memory.c:79
			// 设置位图中的位，表示内存已被占用
			bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 1);
		}
		vaddr_start = kernel_vaddr.vaddr_start + bit_idx_start * PG_SIZE;
c0002890:	a1 30 3c 01 c0       	mov    0xc0013c30,%eax
c0002895:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0002898:	c1 e2 0c             	shl    $0xc,%edx
c000289b:	01 d0                	add    %edx,%eax
c000289d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00028a0:	e9 8c 00 00 00       	jmp    c0002931 <vaddr_get+0x111>
/work/x86_os_my/kernel/memory.c:81
	} else {
		struct task_struct* cur = running_thread();
c00028a5:	e8 42 15 00 00       	call   c0003dec <running_thread>
c00028aa:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:82
		bit_idx_start  = bitmap_scan(&cur->userprog_vaddr.vaddr_bitmap, pg_cnt);
c00028ad:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00028b0:	83 c0 58             	add    $0x58,%eax
c00028b3:	83 ec 08             	sub    $0x8,%esp
c00028b6:	ff 75 0c             	pushl  0xc(%ebp)
c00028b9:	50                   	push   %eax
c00028ba:	e8 7b fd ff ff       	call   c000263a <bitmap_scan>
c00028bf:	83 c4 10             	add    $0x10,%esp
c00028c2:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:83
		if (bit_idx_start == -1) {
c00028c5:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%ebp)
c00028c9:	75 2a                	jne    c00028f5 <vaddr_get+0xd5>
/work/x86_os_my/kernel/memory.c:84
			return NULL;
c00028cb:	b8 00 00 00 00       	mov    $0x0,%eax
c00028d0:	eb 62                	jmp    c0002934 <vaddr_get+0x114>
/work/x86_os_my/kernel/memory.c:87
		}
		while(cnt < pg_cnt) {
			bitmap_set(&cur->userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 1);
c00028d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00028d5:	8d 50 01             	lea    0x1(%eax),%edx
c00028d8:	89 55 f0             	mov    %edx,-0x10(%ebp)
c00028db:	8b 55 ec             	mov    -0x14(%ebp),%edx
c00028de:	01 c2                	add    %eax,%edx
c00028e0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00028e3:	83 c0 58             	add    $0x58,%eax
c00028e6:	83 ec 04             	sub    $0x4,%esp
c00028e9:	6a 01                	push   $0x1
c00028eb:	52                   	push   %edx
c00028ec:	50                   	push   %eax
c00028ed:	e8 7d fe ff ff       	call   c000276f <bitmap_set>
c00028f2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:86
		struct task_struct* cur = running_thread();
		bit_idx_start  = bitmap_scan(&cur->userprog_vaddr.vaddr_bitmap, pg_cnt);
		if (bit_idx_start == -1) {
			return NULL;
		}
		while(cnt < pg_cnt) {
c00028f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00028f8:	3b 45 0c             	cmp    0xc(%ebp),%eax
c00028fb:	72 d5                	jb     c00028d2 <vaddr_get+0xb2>
/work/x86_os_my/kernel/memory.c:89
			bitmap_set(&cur->userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 1);
		}
		vaddr_start = cur->userprog_vaddr.vaddr_start + bit_idx_start * PG_SIZE;
c00028fd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002900:	8b 40 60             	mov    0x60(%eax),%eax
c0002903:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0002906:	c1 e2 0c             	shl    $0xc,%edx
c0002909:	01 d0                	add    %edx,%eax
c000290b:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:92

		/* (0xc0000000 - PG_SIZE)做为用户3级栈已经在start_process被分配 */
		ASSERT((uint32_t)vaddr_start < (0xc0000000 - PG_SIZE));
c000290e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002911:	3d ff ef ff bf       	cmp    $0xbfffefff,%eax
c0002916:	76 19                	jbe    c0002931 <vaddr_get+0x111>
/work/x86_os_my/kernel/memory.c:92 (discriminator 1)
c0002918:	68 90 d5 00 c0       	push   $0xc000d590
c000291d:	68 04 d9 00 c0       	push   $0xc000d904
c0002922:	6a 5c                	push   $0x5c
c0002924:	68 bf d5 00 c0       	push   $0xc000d5bf
c0002929:	e8 d3 fb ff ff       	call   c0002501 <panic_spin>
c000292e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:95
		
	}
	return (void*)vaddr_start;
c0002931:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/kernel/memory.c:96
}
c0002934:	c9                   	leave  
c0002935:	c3                   	ret    

c0002936 <pte_ptr>:
pte_ptr():
/work/x86_os_my/kernel/memory.c:103
// 页表项 page table
/* 得到虚拟地址vaddr对应的pte指针*/
// 虚拟地址 vaddr 所在 pte 的"虚拟地址"!!!
// *pte 代表的是 pte 页表项的内容,
// 也就是 vaddr 最终所映射到的物理页框的 32 位地址中的高 20 位和 12 位的"页表项"属性
uint32_t* pte_ptr(uint32_t vaddr) {
c0002936:	55                   	push   %ebp
c0002937:	89 e5                	mov    %esp,%ebp
c0002939:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/memory.c:108
	/* 先找到页目录表 + \
	* 再用vaddr的pde部分做为索引，找到某一个页表 + \
	* 再用vaddr的pte部分作为索引，找到某一个页表项*/
	uint32_t* pte = (uint32_t*)(0xffc00000 + \
					((vaddr & 0xffc00000) >> 10) + \
c000293c:	8b 45 08             	mov    0x8(%ebp),%eax
c000293f:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0002944:	c1 e8 0a             	shr    $0xa,%eax
c0002947:	89 c2                	mov    %eax,%edx
/work/x86_os_my/kernel/memory.c:109
					PTE_IDX(vaddr) * 4);
c0002949:	8b 45 08             	mov    0x8(%ebp),%eax
c000294c:	25 00 f0 3f 00       	and    $0x3ff000,%eax
c0002951:	c1 e8 0c             	shr    $0xc,%eax
c0002954:	c1 e0 02             	shl    $0x2,%eax
/work/x86_os_my/kernel/memory.c:108
uint32_t* pte_ptr(uint32_t vaddr) {
	/* 先找到页目录表 + \
	* 再用vaddr的pde部分做为索引，找到某一个页表 + \
	* 再用vaddr的pte部分作为索引，找到某一个页表项*/
	uint32_t* pte = (uint32_t*)(0xffc00000 + \
					((vaddr & 0xffc00000) >> 10) + \
c0002957:	01 d0                	add    %edx,%eax
c0002959:	2d 00 00 40 00       	sub    $0x400000,%eax
/work/x86_os_my/kernel/memory.c:107
// 也就是 vaddr 最终所映射到的物理页框的 32 位地址中的高 20 位和 12 位的"页表项"属性
uint32_t* pte_ptr(uint32_t vaddr) {
	/* 先找到页目录表 + \
	* 再用vaddr的pde部分做为索引，找到某一个页表 + \
	* 再用vaddr的pte部分作为索引，找到某一个页表项*/
	uint32_t* pte = (uint32_t*)(0xffc00000 + \
c000295e:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/kernel/memory.c:110
					((vaddr & 0xffc00000) >> 10) + \
					PTE_IDX(vaddr) * 4);
	return pte;
c0002961:	8b 45 fc             	mov    -0x4(%ebp),%eax
/work/x86_os_my/kernel/memory.c:111
}
c0002964:	c9                   	leave  
c0002965:	c3                   	ret    

c0002966 <pde_ptr>:
pde_ptr():
/work/x86_os_my/kernel/memory.c:118
// 页目录表项 page Directory table entry
/* 得到虚拟地址vaddr对应的pde的指针 */
// 虚拟地址 vaddr 所在 pde 的"虚拟地址"!!!
// *pde 代表的是 pde 页目录项的内容
// 也就是 vaddr 最终所映射到的物理页框的 32 位地址中的高 20 位和 12 位的"页目录项"属性
uint32_t* pde_ptr(uint32_t vaddr) {
c0002966:	55                   	push   %ebp
c0002967:	89 e5                	mov    %esp,%ebp
c0002969:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/memory.c:120
	/* 0xfffff是用来访问到页目录表本身所在的地址 */
	uint32_t* pde = (uint32_t*)((0xfffff000) + PDE_IDX(vaddr) * 4);
c000296c:	8b 45 08             	mov    0x8(%ebp),%eax
c000296f:	c1 e8 16             	shr    $0x16,%eax
c0002972:	05 00 fc ff 3f       	add    $0x3ffffc00,%eax
c0002977:	c1 e0 02             	shl    $0x2,%eax
c000297a:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/kernel/memory.c:121
	return pde;
c000297d:	8b 45 fc             	mov    -0x4(%ebp),%eax
/work/x86_os_my/kernel/memory.c:122
}
c0002980:	c9                   	leave  
c0002981:	c3                   	ret    

c0002982 <palloc>:
palloc():
/work/x86_os_my/kernel/memory.c:126

/* 在m_pool指向的物理内存池中分配1个物理页,
 * 成功则返回页框的物理地址,失败则返回NULL */
static void* palloc(struct pool* m_pool) {
c0002982:	55                   	push   %ebp
c0002983:	89 e5                	mov    %esp,%ebp
c0002985:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:128
	/* 扫描或设置位图要保证原子操作 */
	int bit_idx = bitmap_scan(&m_pool->pool_bitmap, 1);    // 找一个物理页面
c0002988:	8b 45 08             	mov    0x8(%ebp),%eax
c000298b:	83 ec 08             	sub    $0x8,%esp
c000298e:	6a 01                	push   $0x1
c0002990:	50                   	push   %eax
c0002991:	e8 a4 fc ff ff       	call   c000263a <bitmap_scan>
c0002996:	83 c4 10             	add    $0x10,%esp
c0002999:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:129
	if (bit_idx == -1 ) {
c000299c:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c00029a0:	75 07                	jne    c00029a9 <palloc+0x27>
/work/x86_os_my/kernel/memory.c:130
		return NULL;
c00029a2:	b8 00 00 00 00       	mov    $0x0,%eax
c00029a7:	eb 2b                	jmp    c00029d4 <palloc+0x52>
/work/x86_os_my/kernel/memory.c:132
	}
	bitmap_set(&m_pool->pool_bitmap, bit_idx, 1);	// 将此位bit_idx置1
c00029a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c00029ac:	8b 45 08             	mov    0x8(%ebp),%eax
c00029af:	83 ec 04             	sub    $0x4,%esp
c00029b2:	6a 01                	push   $0x1
c00029b4:	52                   	push   %edx
c00029b5:	50                   	push   %eax
c00029b6:	e8 b4 fd ff ff       	call   c000276f <bitmap_set>
c00029bb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:133
	uint32_t page_phyaddr = ((bit_idx * PG_SIZE) + m_pool->phy_addr_start);
c00029be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00029c1:	c1 e0 0c             	shl    $0xc,%eax
c00029c4:	89 c2                	mov    %eax,%edx
c00029c6:	8b 45 08             	mov    0x8(%ebp),%eax
c00029c9:	8b 40 08             	mov    0x8(%eax),%eax
c00029cc:	01 d0                	add    %edx,%eax
c00029ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:134
	return (void*)page_phyaddr;
c00029d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
/work/x86_os_my/kernel/memory.c:135
}
c00029d4:	c9                   	leave  
c00029d5:	c3                   	ret    

c00029d6 <page_table_add>:
page_table_add():
/work/x86_os_my/kernel/memory.c:138

/* 页表中添加虚拟地址_vaddr与物理地址_page_phyaddr的映射 */
static void page_table_add(void* _vaddr, void* _page_phyaddr) {
c00029d6:	55                   	push   %ebp
c00029d7:	89 e5                	mov    %esp,%ebp
c00029d9:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/kernel/memory.c:139
	uint32_t vaddr = (uint32_t)_vaddr, page_phyaddr = (uint32_t)_page_phyaddr;
c00029dc:	8b 45 08             	mov    0x8(%ebp),%eax
c00029df:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00029e2:	8b 45 0c             	mov    0xc(%ebp),%eax
c00029e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:140
	uint32_t* pde = pde_ptr(vaddr);	//变量pde是虚拟地址!!!
c00029e8:	ff 75 f4             	pushl  -0xc(%ebp)
c00029eb:	e8 76 ff ff ff       	call   c0002966 <pde_ptr>
c00029f0:	83 c4 04             	add    $0x4,%esp
c00029f3:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:141
	uint32_t* pte = pte_ptr(vaddr);	//变量pte是虚拟地址!!!
c00029f6:	ff 75 f4             	pushl  -0xc(%ebp)
c00029f9:	e8 38 ff ff ff       	call   c0002936 <pte_ptr>
c00029fe:	83 c4 04             	add    $0x4,%esp
c0002a01:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:149
	* pde页目录项 pte页表项
	* 执行*pte可能会访问到空的pde。所以确保pde创建完成后才能执行*pte，否则会引发page_fault。
	* 因此在*pde为0时，*pte只能出现在下面else语句块中的*pde后面。
	* *********************************************************/
	/* 先在页目录内判断目录项的P位，若为1,则表示该表已存在 */
	if (*pde & 0x00000001) {			// 页目录项 存在
c0002a04:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002a07:	8b 00                	mov    (%eax),%eax
c0002a09:	83 e0 01             	and    $0x1,%eax
c0002a0c:	85 c0                	test   %eax,%eax
c0002a0e:	74 64                	je     c0002a74 <page_table_add+0x9e>
/work/x86_os_my/kernel/memory.c:150
		ASSERT(!(*pte & 0x00000001));	// 页表项不存在才能往下执行，否则panic
c0002a10:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002a13:	8b 00                	mov    (%eax),%eax
c0002a15:	83 e0 01             	and    $0x1,%eax
c0002a18:	85 c0                	test   %eax,%eax
c0002a1a:	74 1c                	je     c0002a38 <page_table_add+0x62>
/work/x86_os_my/kernel/memory.c:150 (discriminator 1)
c0002a1c:	68 cf d5 00 c0       	push   $0xc000d5cf
c0002a21:	68 10 d9 00 c0       	push   $0xc000d910
c0002a26:	68 96 00 00 00       	push   $0x96
c0002a2b:	68 bf d5 00 c0       	push   $0xc000d5bf
c0002a30:	e8 cc fa ff ff       	call   c0002501 <panic_spin>
c0002a35:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:152

		if (!(*pte & 0x00000001)) {		// 页表项pte不存在，创建PTE
c0002a38:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002a3b:	8b 00                	mov    (%eax),%eax
c0002a3d:	83 e0 01             	and    $0x1,%eax
c0002a40:	85 c0                	test   %eax,%eax
c0002a42:	75 12                	jne    c0002a56 <page_table_add+0x80>
/work/x86_os_my/kernel/memory.c:153
			*pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);		// 物理地址 | US=1,RW=1,P=1
c0002a44:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002a47:	83 c8 07             	or     $0x7,%eax
c0002a4a:	89 c2                	mov    %eax,%edx
c0002a4c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002a4f:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/kernel/memory.c:173
		memset((void*)((int)pte & 0xfffff000), 0, PG_SIZE);

		ASSERT(!(*pte & 0x00000001));	// 页表项不存在才能往下执行，否则panic
		*pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);			// 物理地址 | US=1,RW=1,P=1
	}
}
c0002a51:	e9 8e 00 00 00       	jmp    c0002ae4 <page_table_add+0x10e>
/work/x86_os_my/kernel/memory.c:155
		ASSERT(!(*pte & 0x00000001));	// 页表项不存在才能往下执行，否则panic

		if (!(*pte & 0x00000001)) {		// 页表项pte不存在，创建PTE
			*pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);		// 物理地址 | US=1,RW=1,P=1
		} else {						// 不会执行到这，因为上面的ASSERT
			PANIC("pte repeat");
c0002a56:	68 e4 d5 00 c0       	push   $0xc000d5e4
c0002a5b:	68 10 d9 00 c0       	push   $0xc000d910
c0002a60:	68 9b 00 00 00       	push   $0x9b
c0002a65:	68 bf d5 00 c0       	push   $0xc000d5bf
c0002a6a:	e8 92 fa ff ff       	call   c0002501 <panic_spin>
c0002a6f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:173
		memset((void*)((int)pte & 0xfffff000), 0, PG_SIZE);

		ASSERT(!(*pte & 0x00000001));	// 页表项不存在才能往下执行，否则panic
		*pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);			// 物理地址 | US=1,RW=1,P=1
	}
}
c0002a72:	eb 70                	jmp    c0002ae4 <page_table_add+0x10e>
/work/x86_os_my/kernel/memory.c:159
		} else {						// 不会执行到这，因为上面的ASSERT
			PANIC("pte repeat");
		}
	} else {							// 页目录项不存在，先创建页目录，再创建页表项
		/* 页表中用到的页一律从内核空间分配 */
		uint32_t pde_phyaddr = (uint32_t)palloc(&kernel_pool);
c0002a74:	83 ec 0c             	sub    $0xc,%esp
c0002a77:	68 40 3c 01 c0       	push   $0xc0013c40
c0002a7c:	e8 01 ff ff ff       	call   c0002982 <palloc>
c0002a81:	83 c4 10             	add    $0x10,%esp
c0002a84:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/kernel/memory.c:160
		*pde = (pde_phyaddr | PG_US_U | PG_RW_W | PG_P_1);			// 注意这行是pde_phyaddr，不是page_phyaddr!!!
c0002a87:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0002a8a:	83 c8 07             	or     $0x7,%eax
c0002a8d:	89 c2                	mov    %eax,%edx
c0002a8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002a92:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/kernel/memory.c:168
		 * 访问物理地址 pde_phyaddr，需要找到它的虚拟地址！
		 * 只要用_vaddr的 PTE 取高20位即可。
		   搞得这么难理解，其实就是0xffc00000找到页目录表，然后加上vaddr的PDE在页目录表中的索引
		   (uint32_t*)(0xffc00000 + ((vaddr & 0xffc00000) >> 10))
		 */
		memset((void*)((int)pte & 0xfffff000), 0, PG_SIZE);
c0002a94:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002a97:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0002a9c:	83 ec 04             	sub    $0x4,%esp
c0002a9f:	68 00 10 00 00       	push   $0x1000
c0002aa4:	6a 00                	push   $0x0
c0002aa6:	50                   	push   %eax
c0002aa7:	e8 59 0f 00 00       	call   c0003a05 <memset>
c0002aac:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:170

		ASSERT(!(*pte & 0x00000001));	// 页表项不存在才能往下执行，否则panic
c0002aaf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002ab2:	8b 00                	mov    (%eax),%eax
c0002ab4:	83 e0 01             	and    $0x1,%eax
c0002ab7:	85 c0                	test   %eax,%eax
c0002ab9:	74 1c                	je     c0002ad7 <page_table_add+0x101>
/work/x86_os_my/kernel/memory.c:170 (discriminator 1)
c0002abb:	68 cf d5 00 c0       	push   $0xc000d5cf
c0002ac0:	68 10 d9 00 c0       	push   $0xc000d910
c0002ac5:	68 aa 00 00 00       	push   $0xaa
c0002aca:	68 bf d5 00 c0       	push   $0xc000d5bf
c0002acf:	e8 2d fa ff ff       	call   c0002501 <panic_spin>
c0002ad4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:171
		*pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);			// 物理地址 | US=1,RW=1,P=1
c0002ad7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002ada:	83 c8 07             	or     $0x7,%eax
c0002add:	89 c2                	mov    %eax,%edx
c0002adf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002ae2:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/kernel/memory.c:173
	}
}
c0002ae4:	90                   	nop
c0002ae5:	c9                   	leave  
c0002ae6:	c3                   	ret    

c0002ae7 <malloc_page>:
malloc_page():
/work/x86_os_my/kernel/memory.c:176

/* 分配pg_cnt个页空间,成功则返回起始虚拟地址,失败时返回NULL */
void* malloc_page(enum pool_flags pf, uint32_t pg_cnt) {
c0002ae7:	55                   	push   %ebp
c0002ae8:	89 e5                	mov    %esp,%ebp
c0002aea:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/kernel/memory.c:177
	ASSERT(pg_cnt > 0 && pg_cnt < 3840);
c0002aed:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0002af1:	74 09                	je     c0002afc <malloc_page+0x15>
/work/x86_os_my/kernel/memory.c:177 (discriminator 1)
c0002af3:	81 7d 0c ff 0e 00 00 	cmpl   $0xeff,0xc(%ebp)
c0002afa:	76 1c                	jbe    c0002b18 <malloc_page+0x31>
/work/x86_os_my/kernel/memory.c:177 (discriminator 3)
c0002afc:	68 ef d5 00 c0       	push   $0xc000d5ef
c0002b01:	68 20 d9 00 c0       	push   $0xc000d920
c0002b06:	68 b1 00 00 00       	push   $0xb1
c0002b0b:	68 bf d5 00 c0       	push   $0xc000d5bf
c0002b10:	e8 ec f9 ff ff       	call   c0002501 <panic_spin>
c0002b15:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:183
	/***********   malloc_page的原理是三个动作的合成:   ***********
		1 通过vaddr_get在虚拟内存池中申请虚拟地址
		2 通过palloc在物理内存池中申请物理页
		3 通过page_table_add将以上得到的虚拟地址和物理地址在页表中完成映射
	***************************************************************/
	void* vaddr_start = vaddr_get(pf, pg_cnt);
c0002b18:	83 ec 08             	sub    $0x8,%esp
c0002b1b:	ff 75 0c             	pushl  0xc(%ebp)
c0002b1e:	ff 75 08             	pushl  0x8(%ebp)
c0002b21:	e8 fa fc ff ff       	call   c0002820 <vaddr_get>
c0002b26:	83 c4 10             	add    $0x10,%esp
c0002b29:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:184
	if (vaddr_start == NULL) {
c0002b2c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0002b30:	75 07                	jne    c0002b39 <malloc_page+0x52>
/work/x86_os_my/kernel/memory.c:185
		return NULL;
c0002b32:	b8 00 00 00 00       	mov    $0x0,%eax
c0002b37:	eb 6e                	jmp    c0002ba7 <malloc_page+0xc0>
/work/x86_os_my/kernel/memory.c:188
	}

	uint32_t vaddr = (uint32_t)vaddr_start, cnt = pg_cnt;
c0002b39:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002b3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0002b3f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0002b42:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:189
	struct pool* mem_pool = pf & PF_KERNEL ? &kernel_pool : &user_pool;
c0002b45:	8b 45 08             	mov    0x8(%ebp),%eax
c0002b48:	83 e0 01             	and    $0x1,%eax
c0002b4b:	85 c0                	test   %eax,%eax
c0002b4d:	74 07                	je     c0002b56 <malloc_page+0x6f>
/work/x86_os_my/kernel/memory.c:189 (discriminator 1)
c0002b4f:	b8 40 3c 01 c0       	mov    $0xc0013c40,%eax
c0002b54:	eb 05                	jmp    c0002b5b <malloc_page+0x74>
/work/x86_os_my/kernel/memory.c:189 (discriminator 2)
c0002b56:	b8 40 3b 01 c0       	mov    $0xc0013b40,%eax
/work/x86_os_my/kernel/memory.c:189 (discriminator 4)
c0002b5b:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:192 (discriminator 4)

	/* 因为虚拟地址是连续的,但物理地址可以是不连续的,所以逐个做映射*/
	while (cnt-- > 0) {
c0002b5e:	eb 37                	jmp    c0002b97 <malloc_page+0xb0>
/work/x86_os_my/kernel/memory.c:193
		void* page_phyaddr = palloc(mem_pool);
c0002b60:	83 ec 0c             	sub    $0xc,%esp
c0002b63:	ff 75 e8             	pushl  -0x18(%ebp)
c0002b66:	e8 17 fe ff ff       	call   c0002982 <palloc>
c0002b6b:	83 c4 10             	add    $0x10,%esp
c0002b6e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/kernel/memory.c:194
		if (page_phyaddr == NULL) {  // 失败时要将曾经已申请的虚拟地址和物理页全部回滚，在将来完成内存回收时再补充
c0002b71:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0002b75:	75 07                	jne    c0002b7e <malloc_page+0x97>
/work/x86_os_my/kernel/memory.c:195
			return NULL;
c0002b77:	b8 00 00 00 00       	mov    $0x0,%eax
c0002b7c:	eb 29                	jmp    c0002ba7 <malloc_page+0xc0>
/work/x86_os_my/kernel/memory.c:197
		}
		page_table_add((void*)vaddr, page_phyaddr); // 在页表中做映射 
c0002b7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002b81:	83 ec 08             	sub    $0x8,%esp
c0002b84:	ff 75 e4             	pushl  -0x1c(%ebp)
c0002b87:	50                   	push   %eax
c0002b88:	e8 49 fe ff ff       	call   c00029d6 <page_table_add>
c0002b8d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:198
		vaddr += PG_SIZE;		 // 下一个虚拟页
c0002b90:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:192

	uint32_t vaddr = (uint32_t)vaddr_start, cnt = pg_cnt;
	struct pool* mem_pool = pf & PF_KERNEL ? &kernel_pool : &user_pool;

	/* 因为虚拟地址是连续的,但物理地址可以是不连续的,所以逐个做映射*/
	while (cnt-- > 0) {
c0002b97:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002b9a:	8d 50 ff             	lea    -0x1(%eax),%edx
c0002b9d:	89 55 f0             	mov    %edx,-0x10(%ebp)
c0002ba0:	85 c0                	test   %eax,%eax
c0002ba2:	75 bc                	jne    c0002b60 <malloc_page+0x79>
/work/x86_os_my/kernel/memory.c:200
			return NULL;
		}
		page_table_add((void*)vaddr, page_phyaddr); // 在页表中做映射 
		vaddr += PG_SIZE;		 // 下一个虚拟页
	}
	return vaddr_start;
c0002ba4:	8b 45 ec             	mov    -0x14(%ebp),%eax
/work/x86_os_my/kernel/memory.c:201
}
c0002ba7:	c9                   	leave  
c0002ba8:	c3                   	ret    

c0002ba9 <get_kernel_pages>:
get_kernel_pages():
/work/x86_os_my/kernel/memory.c:204

/* 从内核物理内存池中申请pg_cnt页内存,成功则返回其虚拟地址,失败则返回NULL */
void* get_kernel_pages(uint32_t pg_cnt) {
c0002ba9:	55                   	push   %ebp
c0002baa:	89 e5                	mov    %esp,%ebp
c0002bac:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:205
	lock_acquire(&kernel_pool.lock);
c0002baf:	83 ec 0c             	sub    $0xc,%esp
c0002bb2:	68 50 3c 01 c0       	push   $0xc0013c50
c0002bb7:	e8 e3 22 00 00       	call   c0004e9f <lock_acquire>
c0002bbc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:206
	void* vaddr =  malloc_page(PF_KERNEL, pg_cnt);
c0002bbf:	83 ec 08             	sub    $0x8,%esp
c0002bc2:	ff 75 08             	pushl  0x8(%ebp)
c0002bc5:	6a 01                	push   $0x1
c0002bc7:	e8 1b ff ff ff       	call   c0002ae7 <malloc_page>
c0002bcc:	83 c4 10             	add    $0x10,%esp
c0002bcf:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:207
	if (vaddr != NULL) {
c0002bd2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0002bd6:	74 17                	je     c0002bef <get_kernel_pages+0x46>
/work/x86_os_my/kernel/memory.c:208
		memset(vaddr, 0, pg_cnt * PG_SIZE);
c0002bd8:	8b 45 08             	mov    0x8(%ebp),%eax
c0002bdb:	c1 e0 0c             	shl    $0xc,%eax
c0002bde:	83 ec 04             	sub    $0x4,%esp
c0002be1:	50                   	push   %eax
c0002be2:	6a 00                	push   $0x0
c0002be4:	ff 75 f4             	pushl  -0xc(%ebp)
c0002be7:	e8 19 0e 00 00       	call   c0003a05 <memset>
c0002bec:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:210
	}
	lock_release(&kernel_pool.lock);
c0002bef:	83 ec 0c             	sub    $0xc,%esp
c0002bf2:	68 50 3c 01 c0       	push   $0xc0013c50
c0002bf7:	e8 1a 23 00 00       	call   c0004f16 <lock_release>
c0002bfc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:211
	return vaddr;
c0002bff:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/kernel/memory.c:212
}
c0002c02:	c9                   	leave  
c0002c03:	c3                   	ret    

c0002c04 <get_user_pages>:
get_user_pages():
/work/x86_os_my/kernel/memory.c:215

/* 在用户空间中申请4k内存,并返回其虚拟地址 */
void* get_user_pages(uint32_t pg_cnt) {
c0002c04:	55                   	push   %ebp
c0002c05:	89 e5                	mov    %esp,%ebp
c0002c07:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:216
	lock_acquire(&user_pool.lock);
c0002c0a:	83 ec 0c             	sub    $0xc,%esp
c0002c0d:	68 50 3b 01 c0       	push   $0xc0013b50
c0002c12:	e8 88 22 00 00       	call   c0004e9f <lock_acquire>
c0002c17:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:217
	void* vaddr = malloc_page(PF_USER, pg_cnt);
c0002c1a:	83 ec 08             	sub    $0x8,%esp
c0002c1d:	ff 75 08             	pushl  0x8(%ebp)
c0002c20:	6a 02                	push   $0x2
c0002c22:	e8 c0 fe ff ff       	call   c0002ae7 <malloc_page>
c0002c27:	83 c4 10             	add    $0x10,%esp
c0002c2a:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:218
	if (vaddr != NULL) {
c0002c2d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0002c31:	74 17                	je     c0002c4a <get_user_pages+0x46>
/work/x86_os_my/kernel/memory.c:219
		memset(vaddr, 0, pg_cnt * PG_SIZE);
c0002c33:	8b 45 08             	mov    0x8(%ebp),%eax
c0002c36:	c1 e0 0c             	shl    $0xc,%eax
c0002c39:	83 ec 04             	sub    $0x4,%esp
c0002c3c:	50                   	push   %eax
c0002c3d:	6a 00                	push   $0x0
c0002c3f:	ff 75 f4             	pushl  -0xc(%ebp)
c0002c42:	e8 be 0d 00 00       	call   c0003a05 <memset>
c0002c47:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:221
	}
	lock_release(&user_pool.lock);
c0002c4a:	83 ec 0c             	sub    $0xc,%esp
c0002c4d:	68 50 3b 01 c0       	push   $0xc0013b50
c0002c52:	e8 bf 22 00 00       	call   c0004f16 <lock_release>
c0002c57:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:222
	return vaddr;
c0002c5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/kernel/memory.c:223
}
c0002c5d:	c9                   	leave  
c0002c5e:	c3                   	ret    

c0002c5f <get_a_page>:
get_a_page():
/work/x86_os_my/kernel/memory.c:227

/* 将虚拟地址vaddr与pf池中的物理地址关联,仅支持一页空间分配
 * 功能是，可以指定虚拟地址的内存分配 */
void* get_a_page(enum pool_flags pf, uint32_t vaddr) {
c0002c5f:	55                   	push   %ebp
c0002c60:	89 e5                	mov    %esp,%ebp
c0002c62:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:228
	struct pool* mem_pool = pf & PF_KERNEL ? &kernel_pool : &user_pool;
c0002c65:	8b 45 08             	mov    0x8(%ebp),%eax
c0002c68:	83 e0 01             	and    $0x1,%eax
c0002c6b:	85 c0                	test   %eax,%eax
c0002c6d:	74 07                	je     c0002c76 <get_a_page+0x17>
/work/x86_os_my/kernel/memory.c:228 (discriminator 1)
c0002c6f:	b8 40 3c 01 c0       	mov    $0xc0013c40,%eax
c0002c74:	eb 05                	jmp    c0002c7b <get_a_page+0x1c>
/work/x86_os_my/kernel/memory.c:228 (discriminator 2)
c0002c76:	b8 40 3b 01 c0       	mov    $0xc0013b40,%eax
/work/x86_os_my/kernel/memory.c:228 (discriminator 4)
c0002c7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:229 (discriminator 4)
	lock_acquire(&mem_pool->lock);
c0002c7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002c81:	83 c0 10             	add    $0x10,%eax
c0002c84:	83 ec 0c             	sub    $0xc,%esp
c0002c87:	50                   	push   %eax
c0002c88:	e8 12 22 00 00       	call   c0004e9f <lock_acquire>
c0002c8d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:232 (discriminator 4)

	/* 先将虚拟地址对应的位图置1 */
	struct task_struct* cur = running_thread();
c0002c90:	e8 57 11 00 00       	call   c0003dec <running_thread>
c0002c95:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:233 (discriminator 4)
	int32_t bit_idx = -1;
c0002c98:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:235 (discriminator 4)

	if (cur->pgdir != NULL && pf == PF_USER) {
c0002c9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002ca2:	8b 40 54             	mov    0x54(%eax),%eax
c0002ca5:	85 c0                	test   %eax,%eax
c0002ca7:	74 55                	je     c0002cfe <get_a_page+0x9f>
/work/x86_os_my/kernel/memory.c:235 (discriminator 1)
c0002ca9:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c0002cad:	75 4f                	jne    c0002cfe <get_a_page+0x9f>
/work/x86_os_my/kernel/memory.c:237
		/* 若当前是用户进程申请用户内存,就修改用户进程自己的虚拟地址池的 位图 */
		bit_idx = (vaddr - cur->userprog_vaddr.vaddr_start) / PG_SIZE;
c0002caf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002cb2:	8b 40 60             	mov    0x60(%eax),%eax
c0002cb5:	8b 55 0c             	mov    0xc(%ebp),%edx
c0002cb8:	29 c2                	sub    %eax,%edx
c0002cba:	89 d0                	mov    %edx,%eax
c0002cbc:	c1 e8 0c             	shr    $0xc,%eax
c0002cbf:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:238
		ASSERT(bit_idx >= 0);
c0002cc2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0002cc6:	79 1c                	jns    c0002ce4 <get_a_page+0x85>
/work/x86_os_my/kernel/memory.c:238 (discriminator 1)
c0002cc8:	68 0b d6 00 c0       	push   $0xc000d60b
c0002ccd:	68 2c d9 00 c0       	push   $0xc000d92c
c0002cd2:	68 ee 00 00 00       	push   $0xee
c0002cd7:	68 bf d5 00 c0       	push   $0xc000d5bf
c0002cdc:	e8 20 f8 ff ff       	call   c0002501 <panic_spin>
c0002ce1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:239
		bitmap_set(&cur->userprog_vaddr.vaddr_bitmap, bit_idx, 1);
c0002ce4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002ce7:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0002cea:	83 c2 58             	add    $0x58,%edx
c0002ced:	83 ec 04             	sub    $0x4,%esp
c0002cf0:	6a 01                	push   $0x1
c0002cf2:	50                   	push   %eax
c0002cf3:	52                   	push   %edx
c0002cf4:	e8 76 fa ff ff       	call   c000276f <bitmap_set>
c0002cf9:	83 c4 10             	add    $0x10,%esp
c0002cfc:	eb 78                	jmp    c0002d76 <get_a_page+0x117>
/work/x86_os_my/kernel/memory.c:241

	} else if (cur->pgdir == NULL && pf == PF_KERNEL) {
c0002cfe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002d01:	8b 40 54             	mov    0x54(%eax),%eax
c0002d04:	85 c0                	test   %eax,%eax
c0002d06:	75 52                	jne    c0002d5a <get_a_page+0xfb>
/work/x86_os_my/kernel/memory.c:241 (discriminator 1)
c0002d08:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c0002d0c:	75 4c                	jne    c0002d5a <get_a_page+0xfb>
/work/x86_os_my/kernel/memory.c:243
		/* 如果是内核线程申请内核内存,就修改 kernel_vaddr */
		bit_idx = (vaddr - kernel_vaddr.vaddr_start) / PG_SIZE;
c0002d0e:	a1 30 3c 01 c0       	mov    0xc0013c30,%eax
c0002d13:	8b 55 0c             	mov    0xc(%ebp),%edx
c0002d16:	29 c2                	sub    %eax,%edx
c0002d18:	89 d0                	mov    %edx,%eax
c0002d1a:	c1 e8 0c             	shr    $0xc,%eax
c0002d1d:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:244
		ASSERT(bit_idx > 0);
c0002d20:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0002d24:	7f 1c                	jg     c0002d42 <get_a_page+0xe3>
/work/x86_os_my/kernel/memory.c:244 (discriminator 1)
c0002d26:	68 18 d6 00 c0       	push   $0xc000d618
c0002d2b:	68 2c d9 00 c0       	push   $0xc000d92c
c0002d30:	68 f4 00 00 00       	push   $0xf4
c0002d35:	68 bf d5 00 c0       	push   $0xc000d5bf
c0002d3a:	e8 c2 f7 ff ff       	call   c0002501 <panic_spin>
c0002d3f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:245
		bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx, 1);
c0002d42:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002d45:	83 ec 04             	sub    $0x4,%esp
c0002d48:	6a 01                	push   $0x1
c0002d4a:	50                   	push   %eax
c0002d4b:	68 28 3c 01 c0       	push   $0xc0013c28
c0002d50:	e8 1a fa ff ff       	call   c000276f <bitmap_set>
c0002d55:	83 c4 10             	add    $0x10,%esp
c0002d58:	eb 1c                	jmp    c0002d76 <get_a_page+0x117>
/work/x86_os_my/kernel/memory.c:248

	} else {
		PANIC("get_a_page:not allow kernel alloc userspace or user alloc kernelspace by get_a_page");
c0002d5a:	68 24 d6 00 c0       	push   $0xc000d624
c0002d5f:	68 2c d9 00 c0       	push   $0xc000d92c
c0002d64:	68 f8 00 00 00       	push   $0xf8
c0002d69:	68 bf d5 00 c0       	push   $0xc000d5bf
c0002d6e:	e8 8e f7 ff ff       	call   c0002501 <panic_spin>
c0002d73:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:251
	}

	void* page_phyaddr = palloc(mem_pool);
c0002d76:	83 ec 0c             	sub    $0xc,%esp
c0002d79:	ff 75 f4             	pushl  -0xc(%ebp)
c0002d7c:	e8 01 fc ff ff       	call   c0002982 <palloc>
c0002d81:	83 c4 10             	add    $0x10,%esp
c0002d84:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:252
	if (page_phyaddr == NULL) {
c0002d87:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0002d8b:	75 19                	jne    c0002da6 <get_a_page+0x147>
/work/x86_os_my/kernel/memory.c:253
		lock_release(&mem_pool->lock);	//哈哈
c0002d8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002d90:	83 c0 10             	add    $0x10,%eax
c0002d93:	83 ec 0c             	sub    $0xc,%esp
c0002d96:	50                   	push   %eax
c0002d97:	e8 7a 21 00 00       	call   c0004f16 <lock_release>
c0002d9c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:254
		return NULL;
c0002d9f:	b8 00 00 00 00       	mov    $0x0,%eax
c0002da4:	eb 27                	jmp    c0002dcd <get_a_page+0x16e>
/work/x86_os_my/kernel/memory.c:256
	}
	page_table_add((void*)vaddr, page_phyaddr);
c0002da6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0002da9:	83 ec 08             	sub    $0x8,%esp
c0002dac:	ff 75 e8             	pushl  -0x18(%ebp)
c0002daf:	50                   	push   %eax
c0002db0:	e8 21 fc ff ff       	call   c00029d6 <page_table_add>
c0002db5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:258
	
	lock_release(&mem_pool->lock);
c0002db8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002dbb:	83 c0 10             	add    $0x10,%eax
c0002dbe:	83 ec 0c             	sub    $0xc,%esp
c0002dc1:	50                   	push   %eax
c0002dc2:	e8 4f 21 00 00       	call   c0004f16 <lock_release>
c0002dc7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:259
	return (void*)vaddr;
c0002dca:	8b 45 0c             	mov    0xc(%ebp),%eax
/work/x86_os_my/kernel/memory.c:260
}
c0002dcd:	c9                   	leave  
c0002dce:	c3                   	ret    

c0002dcf <get_a_page_without_opvaddrbitmap>:
get_a_page_without_opvaddrbitmap():
/work/x86_os_my/kernel/memory.c:265

/* 安装1页大小的vaddr，专门针对fork时不修改虚拟地址位图的情况
 * 函数功能和 get_a_page 类似，为 vaddr 分配一物理页，只是少了虚拟地址池位图的操作
 */
void* get_a_page_without_opvaddrbitmap(enum pool_flags pf, uint32_t vaddr) {
c0002dcf:	55                   	push   %ebp
c0002dd0:	89 e5                	mov    %esp,%ebp
c0002dd2:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:266
	struct pool* mem_pool = pf & PF_KERNEL ? &kernel_pool : &user_pool;
c0002dd5:	8b 45 08             	mov    0x8(%ebp),%eax
c0002dd8:	83 e0 01             	and    $0x1,%eax
c0002ddb:	85 c0                	test   %eax,%eax
c0002ddd:	74 07                	je     c0002de6 <get_a_page_without_opvaddrbitmap+0x17>
/work/x86_os_my/kernel/memory.c:266 (discriminator 1)
c0002ddf:	b8 40 3c 01 c0       	mov    $0xc0013c40,%eax
c0002de4:	eb 05                	jmp    c0002deb <get_a_page_without_opvaddrbitmap+0x1c>
/work/x86_os_my/kernel/memory.c:266 (discriminator 2)
c0002de6:	b8 40 3b 01 c0       	mov    $0xc0013b40,%eax
/work/x86_os_my/kernel/memory.c:266 (discriminator 4)
c0002deb:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:267 (discriminator 4)
	lock_acquire(&mem_pool->lock);
c0002dee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002df1:	83 c0 10             	add    $0x10,%eax
c0002df4:	83 ec 0c             	sub    $0xc,%esp
c0002df7:	50                   	push   %eax
c0002df8:	e8 a2 20 00 00       	call   c0004e9f <lock_acquire>
c0002dfd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:268 (discriminator 4)
	void* page_phyaddr = palloc(mem_pool);
c0002e00:	83 ec 0c             	sub    $0xc,%esp
c0002e03:	ff 75 f4             	pushl  -0xc(%ebp)
c0002e06:	e8 77 fb ff ff       	call   c0002982 <palloc>
c0002e0b:	83 c4 10             	add    $0x10,%esp
c0002e0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:269 (discriminator 4)
	if (page_phyaddr == NULL) {
c0002e11:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0002e15:	75 19                	jne    c0002e30 <get_a_page_without_opvaddrbitmap+0x61>
/work/x86_os_my/kernel/memory.c:270
		lock_release(&mem_pool->lock);
c0002e17:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002e1a:	83 c0 10             	add    $0x10,%eax
c0002e1d:	83 ec 0c             	sub    $0xc,%esp
c0002e20:	50                   	push   %eax
c0002e21:	e8 f0 20 00 00       	call   c0004f16 <lock_release>
c0002e26:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:271
		return NULL;
c0002e29:	b8 00 00 00 00       	mov    $0x0,%eax
c0002e2e:	eb 27                	jmp    c0002e57 <get_a_page_without_opvaddrbitmap+0x88>
/work/x86_os_my/kernel/memory.c:273
	}
	page_table_add((void*)vaddr, page_phyaddr);
c0002e30:	8b 45 0c             	mov    0xc(%ebp),%eax
c0002e33:	83 ec 08             	sub    $0x8,%esp
c0002e36:	ff 75 f0             	pushl  -0x10(%ebp)
c0002e39:	50                   	push   %eax
c0002e3a:	e8 97 fb ff ff       	call   c00029d6 <page_table_add>
c0002e3f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:274
	lock_release(&mem_pool->lock);
c0002e42:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002e45:	83 c0 10             	add    $0x10,%eax
c0002e48:	83 ec 0c             	sub    $0xc,%esp
c0002e4b:	50                   	push   %eax
c0002e4c:	e8 c5 20 00 00       	call   c0004f16 <lock_release>
c0002e51:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:275
	return (void*)vaddr;
c0002e54:	8b 45 0c             	mov    0xc(%ebp),%eax
/work/x86_os_my/kernel/memory.c:276
}
c0002e57:	c9                   	leave  
c0002e58:	c3                   	ret    

c0002e59 <addr_v2p>:
addr_v2p():
/work/x86_os_my/kernel/memory.c:279

/* 得到虚拟地址映射到的物理地址 */
uint32_t addr_v2p(uint32_t vaddr) {
c0002e59:	55                   	push   %ebp
c0002e5a:	89 e5                	mov    %esp,%ebp
c0002e5c:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/memory.c:280
	uint32_t* pte = pte_ptr(vaddr);
c0002e5f:	ff 75 08             	pushl  0x8(%ebp)
c0002e62:	e8 cf fa ff ff       	call   c0002936 <pte_ptr>
c0002e67:	83 c4 04             	add    $0x4,%esp
c0002e6a:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/kernel/memory.c:284
	/* (*pte)的内容是 vaddr 所在 pte 的内容，也就是 vaddr 最终所映射到的物理页框的 32 位地址中的高 20 位和 12 位的页表项属性，
	 * 因为页框都是自然页，低 12 位地址是 0，所以页表项 pte（和页目录项 pde）中只需要记录页框的高 20 位地址即可。
	 */
	return ((*pte & 0xfffff000) + (vaddr & 0x00000fff));
c0002e6d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0002e70:	8b 00                	mov    (%eax),%eax
c0002e72:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0002e77:	89 c2                	mov    %eax,%edx
c0002e79:	8b 45 08             	mov    0x8(%ebp),%eax
c0002e7c:	25 ff 0f 00 00       	and    $0xfff,%eax
c0002e81:	01 d0                	add    %edx,%eax
/work/x86_os_my/kernel/memory.c:285
}
c0002e83:	c9                   	leave  
c0002e84:	c3                   	ret    

c0002e85 <arena2block>:
arena2block():
/work/x86_os_my/kernel/memory.c:299
|                     |
| +-----------------+ |
+-+  mem_block_desc |←+
  +-----------------+
*/
static struct mem_block* arena2block(struct arena* a, uint32_t idx) {
c0002e85:	55                   	push   %ebp
c0002e86:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/kernel/memory.c:300
	return (struct mem_block*)((uint32_t)a + sizeof(struct arena) + idx * a->desc->block_size);
c0002e88:	8b 45 08             	mov    0x8(%ebp),%eax
c0002e8b:	8b 00                	mov    (%eax),%eax
c0002e8d:	8b 00                	mov    (%eax),%eax
c0002e8f:	0f af 45 0c          	imul   0xc(%ebp),%eax
c0002e93:	89 c2                	mov    %eax,%edx
c0002e95:	8b 45 08             	mov    0x8(%ebp),%eax
c0002e98:	01 d0                	add    %edx,%eax
c0002e9a:	83 c0 0c             	add    $0xc,%eax
/work/x86_os_my/kernel/memory.c:301
}
c0002e9d:	5d                   	pop    %ebp
c0002e9e:	c3                   	ret    

c0002e9f <block2arena>:
block2arena():
/work/x86_os_my/kernel/memory.c:306

/* 返回内存块mem_block所在的arena地址
 * 取到了虚拟地址mem_block那一整页的地址
 */
static struct arena* block2arena(struct mem_block* b) {
c0002e9f:	55                   	push   %ebp
c0002ea0:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/kernel/memory.c:307
	return (struct arena*)((uint32_t)b & 0xfffff000);
c0002ea2:	8b 45 08             	mov    0x8(%ebp),%eax
c0002ea5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
/work/x86_os_my/kernel/memory.c:308
}
c0002eaa:	5d                   	pop    %ebp
c0002eab:	c3                   	ret    

c0002eac <sys_malloc>:
sys_malloc():
/work/x86_os_my/kernel/memory.c:319
 * 3.内存块地址被返回给用户后，用户可以自由使用此内存块 mem_block
 *   会把此内存块中的 list_elem 型变量 free_elem 覆盖
 *   不过 arena->mem_block_desc->free_list 中的元素已经记录了 mem_block->list_elem 的地址
 *   使用时覆盖的，只是 mem_block 的内容。
 */
void* sys_malloc(uint32_t size) {
c0002eac:	55                   	push   %ebp
c0002ead:	89 e5                	mov    %esp,%ebp
c0002eaf:	83 ec 38             	sub    $0x38,%esp
/work/x86_os_my/kernel/memory.c:324
	enum pool_flags PF;
	struct pool* mem_pool;
	uint32_t pool_size;
	struct mem_block_desc* descs;
	struct task_struct* cur_thread = running_thread();
c0002eb2:	e8 35 0f 00 00       	call   c0003dec <running_thread>
c0002eb7:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/kernel/memory.c:327

	/* 判断用哪个内存池*/
	if (cur_thread->pgdir == NULL) {	// 是内核线程
c0002eba:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0002ebd:	8b 40 54             	mov    0x54(%eax),%eax
c0002ec0:	85 c0                	test   %eax,%eax
c0002ec2:	75 1f                	jne    c0002ee3 <sys_malloc+0x37>
/work/x86_os_my/kernel/memory.c:328
		PF = PF_KERNEL;
c0002ec4:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:329
		pool_size = kernel_pool.pool_size;
c0002ecb:	a1 4c 3c 01 c0       	mov    0xc0013c4c,%eax
c0002ed0:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:330
		mem_pool = &kernel_pool;
c0002ed3:	c7 45 f0 40 3c 01 c0 	movl   $0xc0013c40,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:331
		descs = k_block_descs;
c0002eda:	c7 45 e8 80 3b 01 c0 	movl   $0xc0013b80,-0x18(%ebp)
c0002ee1:	eb 1f                	jmp    c0002f02 <sys_malloc+0x56>
/work/x86_os_my/kernel/memory.c:333
	} else {							// 用户进程pcb中的pgdir（页目录表）会在为其分配页表时创建【create_page_dir】
		PF = PF_USER;
c0002ee3:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:334
		pool_size = user_pool.pool_size;
c0002eea:	a1 4c 3b 01 c0       	mov    0xc0013b4c,%eax
c0002eef:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:335
		mem_pool = &user_pool;
c0002ef2:	c7 45 f0 40 3b 01 c0 	movl   $0xc0013b40,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:336
		descs = cur_thread->u_block_desc;
c0002ef9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0002efc:	83 c0 64             	add    $0x64,%eax
c0002eff:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:340
	}

	/* 若申请的内存不在内存池容量范围内则直接返回NULL */
	if (!(size > 0 && size < pool_size)) {
c0002f02:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0002f06:	74 08                	je     c0002f10 <sys_malloc+0x64>
/work/x86_os_my/kernel/memory.c:340 (discriminator 1)
c0002f08:	8b 45 08             	mov    0x8(%ebp),%eax
c0002f0b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0002f0e:	72 0a                	jb     c0002f1a <sys_malloc+0x6e>
/work/x86_os_my/kernel/memory.c:341
		return NULL;
c0002f10:	b8 00 00 00 00       	mov    $0x0,%eax
c0002f15:	e9 c5 02 00 00       	jmp    c00031df <sys_malloc+0x333>
/work/x86_os_my/kernel/memory.c:346
	}

	struct arena* a;
	struct mem_block* b;
	lock_acquire(&mem_pool->lock);
c0002f1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002f1d:	83 c0 10             	add    $0x10,%eax
c0002f20:	83 ec 0c             	sub    $0xc,%esp
c0002f23:	50                   	push   %eax
c0002f24:	e8 76 1f 00 00       	call   c0004e9f <lock_acquire>
c0002f29:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:349

	/* 超过最大内存块1024, 就分配页框 */
	if (size > 1024) {
c0002f2c:	81 7d 08 00 04 00 00 	cmpl   $0x400,0x8(%ebp)
c0002f33:	0f 86 94 00 00 00    	jbe    c0002fcd <sys_malloc+0x121>
/work/x86_os_my/kernel/memory.c:350
		uint32_t page_cnt = DIV_ROUND_UP(size + sizeof(struct arena), PG_SIZE);	// 向上取整需要的页框数
c0002f39:	8b 45 08             	mov    0x8(%ebp),%eax
c0002f3c:	05 0b 10 00 00       	add    $0x100b,%eax
c0002f41:	c1 e8 0c             	shr    $0xc,%eax
c0002f44:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/kernel/memory.c:352

		a = malloc_page(PF, page_cnt);
c0002f47:	83 ec 08             	sub    $0x8,%esp
c0002f4a:	ff 75 d8             	pushl  -0x28(%ebp)
c0002f4d:	ff 75 f4             	pushl  -0xc(%ebp)
c0002f50:	e8 92 fb ff ff       	call   c0002ae7 <malloc_page>
c0002f55:	83 c4 10             	add    $0x10,%esp
c0002f58:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/kernel/memory.c:353
		if (a != NULL) {
c0002f5b:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0002f5f:	74 50                	je     c0002fb1 <sys_malloc+0x105>
/work/x86_os_my/kernel/memory.c:354
			memset(a, 0, page_cnt * PG_SIZE);
c0002f61:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0002f64:	c1 e0 0c             	shl    $0xc,%eax
c0002f67:	83 ec 04             	sub    $0x4,%esp
c0002f6a:	50                   	push   %eax
c0002f6b:	6a 00                	push   $0x0
c0002f6d:	ff 75 d4             	pushl  -0x2c(%ebp)
c0002f70:	e8 90 0a 00 00       	call   c0003a05 <memset>
c0002f75:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:358

			// 【arena结构体初始化，情况1】
			/* 对于分配的大块页框,将desc置为NULL, cnt置为页框数, large置为true */
			a->desc = NULL;
c0002f78:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002f7b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/kernel/memory.c:359
			a->cnt = page_cnt;
c0002f81:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002f84:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0002f87:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/kernel/memory.c:360
			a->large = true;
c0002f8a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002f8d:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/kernel/memory.c:362

			lock_release(&mem_pool->lock);
c0002f94:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002f97:	83 c0 10             	add    $0x10,%eax
c0002f9a:	83 ec 0c             	sub    $0xc,%esp
c0002f9d:	50                   	push   %eax
c0002f9e:	e8 73 1f 00 00       	call   c0004f16 <lock_release>
c0002fa3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:363
			return (void*)(a + 1);	// 跨过arena大小，把剩下的内存返回
c0002fa6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002fa9:	83 c0 0c             	add    $0xc,%eax
c0002fac:	e9 2e 02 00 00       	jmp    c00031df <sys_malloc+0x333>
/work/x86_os_my/kernel/memory.c:365
		} else {
			lock_release(&mem_pool->lock);
c0002fb1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002fb4:	83 c0 10             	add    $0x10,%eax
c0002fb7:	83 ec 0c             	sub    $0xc,%esp
c0002fba:	50                   	push   %eax
c0002fbb:	e8 56 1f 00 00       	call   c0004f16 <lock_release>
c0002fc0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:366
			return NULL;
c0002fc3:	b8 00 00 00 00       	mov    $0x0,%eax
c0002fc8:	e9 12 02 00 00       	jmp    c00031df <sys_malloc+0x333>
/work/x86_os_my/kernel/memory.c:374
	} else {
	/* 若申请的内存小于等于1024,可在各种规格的mem_block_desc中去适配 */
		uint8_t desc_idx;

		/* 从内存块描述符中匹配合适的内存块规格 */
		for (desc_idx = 0; desc_idx < DESC_CNT; desc_idx++) {
c0002fcd:	c6 45 e7 00          	movb   $0x0,-0x19(%ebp)
c0002fd1:	eb 25                	jmp    c0002ff8 <sys_malloc+0x14c>
/work/x86_os_my/kernel/memory.c:375
			if (size <= descs[desc_idx].block_size) {	// 从小往大后,找到后退出
c0002fd3:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0002fd7:	89 d0                	mov    %edx,%eax
c0002fd9:	01 c0                	add    %eax,%eax
c0002fdb:	01 d0                	add    %edx,%eax
c0002fdd:	c1 e0 03             	shl    $0x3,%eax
c0002fe0:	89 c2                	mov    %eax,%edx
c0002fe2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002fe5:	01 d0                	add    %edx,%eax
c0002fe7:	8b 00                	mov    (%eax),%eax
c0002fe9:	3b 45 08             	cmp    0x8(%ebp),%eax
c0002fec:	73 12                	jae    c0003000 <sys_malloc+0x154>
/work/x86_os_my/kernel/memory.c:374 (discriminator 2)
	} else {
	/* 若申请的内存小于等于1024,可在各种规格的mem_block_desc中去适配 */
		uint8_t desc_idx;

		/* 从内存块描述符中匹配合适的内存块规格 */
		for (desc_idx = 0; desc_idx < DESC_CNT; desc_idx++) {
c0002fee:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c0002ff2:	83 c0 01             	add    $0x1,%eax
c0002ff5:	88 45 e7             	mov    %al,-0x19(%ebp)
/work/x86_os_my/kernel/memory.c:374 (discriminator 1)
c0002ff8:	80 7d e7 06          	cmpb   $0x6,-0x19(%ebp)
c0002ffc:	76 d5                	jbe    c0002fd3 <sys_malloc+0x127>
c0002ffe:	eb 01                	jmp    c0003001 <sys_malloc+0x155>
/work/x86_os_my/kernel/memory.c:376
			if (size <= descs[desc_idx].block_size) {	// 从小往大后,找到后退出
				break;
c0003000:	90                   	nop
/work/x86_os_my/kernel/memory.c:382
			}
		}

		/* 若mem_block_desc的free_list中已经没有可用的mem_block,
		 * 就创建新的arena提供mem_block */
		if (list_empty(&descs[desc_idx].free_list)) {
c0003001:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0003005:	89 d0                	mov    %edx,%eax
c0003007:	01 c0                	add    %eax,%eax
c0003009:	01 d0                	add    %edx,%eax
c000300b:	c1 e0 03             	shl    $0x3,%eax
c000300e:	89 c2                	mov    %eax,%edx
c0003010:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0003013:	01 d0                	add    %edx,%eax
c0003015:	83 c0 08             	add    $0x8,%eax
c0003018:	83 ec 0c             	sub    $0xc,%esp
c000301b:	50                   	push   %eax
c000301c:	e8 90 1b 00 00       	call   c0004bb1 <list_empty>
c0003021:	83 c4 10             	add    $0x10,%esp
c0003024:	85 c0                	test   %eax,%eax
c0003026:	0f 84 31 01 00 00    	je     c000315d <sys_malloc+0x2b1>
/work/x86_os_my/kernel/memory.c:383
			a = malloc_page(PF, 1);       // 分配1页框做为arena
c000302c:	83 ec 08             	sub    $0x8,%esp
c000302f:	6a 01                	push   $0x1
c0003031:	ff 75 f4             	pushl  -0xc(%ebp)
c0003034:	e8 ae fa ff ff       	call   c0002ae7 <malloc_page>
c0003039:	83 c4 10             	add    $0x10,%esp
c000303c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/kernel/memory.c:384
			if (a == NULL) {
c000303f:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0003043:	75 1c                	jne    c0003061 <sys_malloc+0x1b5>
/work/x86_os_my/kernel/memory.c:385
				lock_release(&mem_pool->lock);
c0003045:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003048:	83 c0 10             	add    $0x10,%eax
c000304b:	83 ec 0c             	sub    $0xc,%esp
c000304e:	50                   	push   %eax
c000304f:	e8 c2 1e 00 00       	call   c0004f16 <lock_release>
c0003054:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:386
				return NULL;
c0003057:	b8 00 00 00 00       	mov    $0x0,%eax
c000305c:	e9 7e 01 00 00       	jmp    c00031df <sys_malloc+0x333>
/work/x86_os_my/kernel/memory.c:388
			}
			memset(a, 0, PG_SIZE);
c0003061:	83 ec 04             	sub    $0x4,%esp
c0003064:	68 00 10 00 00       	push   $0x1000
c0003069:	6a 00                	push   $0x0
c000306b:	ff 75 d4             	pushl  -0x2c(%ebp)
c000306e:	e8 92 09 00 00       	call   c0003a05 <memset>
c0003073:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:392

			// 【arena结构体初始化，情况2】
			/* 对于分配的小块内存,将desc置为相应内存块描述符, cnt置为此arena可用的内存块数, large置为false */
			a->desc = &descs[desc_idx];
c0003076:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c000307a:	89 d0                	mov    %edx,%eax
c000307c:	01 c0                	add    %eax,%eax
c000307e:	01 d0                	add    %edx,%eax
c0003080:	c1 e0 03             	shl    $0x3,%eax
c0003083:	89 c2                	mov    %eax,%edx
c0003085:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0003088:	01 c2                	add    %eax,%edx
c000308a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000308d:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/kernel/memory.c:393
			a->large = false;
c000308f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0003092:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
/work/x86_os_my/kernel/memory.c:394
			a->cnt = descs[desc_idx].blocks_per_arena;
c0003099:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c000309d:	89 d0                	mov    %edx,%eax
c000309f:	01 c0                	add    %eax,%eax
c00030a1:	01 d0                	add    %edx,%eax
c00030a3:	c1 e0 03             	shl    $0x3,%eax
c00030a6:	89 c2                	mov    %eax,%edx
c00030a8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00030ab:	01 d0                	add    %edx,%eax
c00030ad:	8b 50 04             	mov    0x4(%eax),%edx
c00030b0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c00030b3:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/kernel/memory.c:396

			enum intr_status old_status = intr_disable();
c00030b6:	e8 5e ea ff ff       	call   c0001b19 <intr_disable>
c00030bb:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/kernel/memory.c:399
			/* 开始将arena拆分成内存块,并添加到内存块描述符的free_list中 */
			uint32_t block_idx;
			for (block_idx = 0; block_idx < descs[desc_idx].blocks_per_arena; block_idx++) {
c00030be:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c00030c5:	eb 68                	jmp    c000312f <sys_malloc+0x283>
/work/x86_os_my/kernel/memory.c:400
				b = arena2block(a, block_idx);
c00030c7:	83 ec 08             	sub    $0x8,%esp
c00030ca:	ff 75 e0             	pushl  -0x20(%ebp)
c00030cd:	ff 75 d4             	pushl  -0x2c(%ebp)
c00030d0:	e8 b0 fd ff ff       	call   c0002e85 <arena2block>
c00030d5:	83 c4 10             	add    $0x10,%esp
c00030d8:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/kernel/memory.c:401
				ASSERT(!elem_find(&a->desc->free_list, &b->free_elem));
c00030db:	8b 45 cc             	mov    -0x34(%ebp),%eax
c00030de:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c00030e1:	8b 12                	mov    (%edx),%edx
c00030e3:	83 c2 08             	add    $0x8,%edx
c00030e6:	83 ec 08             	sub    $0x8,%esp
c00030e9:	50                   	push   %eax
c00030ea:	52                   	push   %edx
c00030eb:	e8 f4 19 00 00       	call   c0004ae4 <elem_find>
c00030f0:	83 c4 10             	add    $0x10,%esp
c00030f3:	85 c0                	test   %eax,%eax
c00030f5:	74 1c                	je     c0003113 <sys_malloc+0x267>
/work/x86_os_my/kernel/memory.c:401 (discriminator 1)
c00030f7:	68 78 d6 00 c0       	push   $0xc000d678
c00030fc:	68 38 d9 00 c0       	push   $0xc000d938
c0003101:	68 91 01 00 00       	push   $0x191
c0003106:	68 bf d5 00 c0       	push   $0xc000d5bf
c000310b:	e8 f1 f3 ff ff       	call   c0002501 <panic_spin>
c0003110:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:402 (discriminator 2)
				list_append(&a->desc->free_list, &b->free_elem);
c0003113:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0003116:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0003119:	8b 12                	mov    (%edx),%edx
c000311b:	83 c2 08             	add    $0x8,%edx
c000311e:	83 ec 08             	sub    $0x8,%esp
c0003121:	50                   	push   %eax
c0003122:	52                   	push   %edx
c0003123:	e8 42 19 00 00       	call   c0004a6a <list_append>
c0003128:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:399 (discriminator 2)
			a->cnt = descs[desc_idx].blocks_per_arena;

			enum intr_status old_status = intr_disable();
			/* 开始将arena拆分成内存块,并添加到内存块描述符的free_list中 */
			uint32_t block_idx;
			for (block_idx = 0; block_idx < descs[desc_idx].blocks_per_arena; block_idx++) {
c000312b:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
/work/x86_os_my/kernel/memory.c:399 (discriminator 1)
c000312f:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0003133:	89 d0                	mov    %edx,%eax
c0003135:	01 c0                	add    %eax,%eax
c0003137:	01 d0                	add    %edx,%eax
c0003139:	c1 e0 03             	shl    $0x3,%eax
c000313c:	89 c2                	mov    %eax,%edx
c000313e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0003141:	01 d0                	add    %edx,%eax
c0003143:	8b 40 04             	mov    0x4(%eax),%eax
c0003146:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0003149:	0f 87 78 ff ff ff    	ja     c00030c7 <sys_malloc+0x21b>
/work/x86_os_my/kernel/memory.c:404
				b = arena2block(a, block_idx);
				ASSERT(!elem_find(&a->desc->free_list, &b->free_elem));
				list_append(&a->desc->free_list, &b->free_elem);
			}
			intr_set_status(old_status);
c000314f:	83 ec 0c             	sub    $0xc,%esp
c0003152:	ff 75 d0             	pushl  -0x30(%ebp)
c0003155:	e8 e8 e9 ff ff       	call   c0001b42 <intr_set_status>
c000315a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:408
		}

		/* 开始分配内存块 */
		b = elem2entry(struct mem_block, free_elem, list_pop(&(descs[desc_idx].free_list)));
c000315d:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0003161:	89 d0                	mov    %edx,%eax
c0003163:	01 c0                	add    %eax,%eax
c0003165:	01 d0                	add    %edx,%eax
c0003167:	c1 e0 03             	shl    $0x3,%eax
c000316a:	89 c2                	mov    %eax,%edx
c000316c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000316f:	01 d0                	add    %edx,%eax
c0003171:	83 c0 08             	add    $0x8,%eax
c0003174:	83 ec 0c             	sub    $0xc,%esp
c0003177:	50                   	push   %eax
c0003178:	e8 45 19 00 00       	call   c0004ac2 <list_pop>
c000317d:	83 c4 10             	add    $0x10,%esp
c0003180:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/kernel/memory.c:409
		memset(b, 0, descs[desc_idx].block_size);
c0003183:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0003187:	89 d0                	mov    %edx,%eax
c0003189:	01 c0                	add    %eax,%eax
c000318b:	01 d0                	add    %edx,%eax
c000318d:	c1 e0 03             	shl    $0x3,%eax
c0003190:	89 c2                	mov    %eax,%edx
c0003192:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0003195:	01 d0                	add    %edx,%eax
c0003197:	8b 00                	mov    (%eax),%eax
c0003199:	83 ec 04             	sub    $0x4,%esp
c000319c:	50                   	push   %eax
c000319d:	6a 00                	push   $0x0
c000319f:	ff 75 cc             	pushl  -0x34(%ebp)
c00031a2:	e8 5e 08 00 00       	call   c0003a05 <memset>
c00031a7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:411

		a = block2arena(b);	// 获取内存块b所在的arena
c00031aa:	83 ec 0c             	sub    $0xc,%esp
c00031ad:	ff 75 cc             	pushl  -0x34(%ebp)
c00031b0:	e8 ea fc ff ff       	call   c0002e9f <block2arena>
c00031b5:	83 c4 10             	add    $0x10,%esp
c00031b8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/kernel/memory.c:412
		a->cnt--;			// 将此arena中的空闲内存块数减1
c00031bb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c00031be:	8b 40 04             	mov    0x4(%eax),%eax
c00031c1:	8d 50 ff             	lea    -0x1(%eax),%edx
c00031c4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c00031c7:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/kernel/memory.c:414

		lock_release(&mem_pool->lock);
c00031ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00031cd:	83 c0 10             	add    $0x10,%eax
c00031d0:	83 ec 0c             	sub    $0xc,%esp
c00031d3:	50                   	push   %eax
c00031d4:	e8 3d 1d 00 00       	call   c0004f16 <lock_release>
c00031d9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:415
		return (void*)b;
c00031dc:	8b 45 cc             	mov    -0x34(%ebp),%eax
/work/x86_os_my/kernel/memory.c:417
	}
}
c00031df:	c9                   	leave  
c00031e0:	c3                   	ret    

c00031e1 <pfree>:
pfree():
/work/x86_os_my/kernel/memory.c:422

/* 将物理地址pg_phy_addr回收到物理内存池
 * 清理物理地址池位图
 */
void pfree(uint32_t pg_phy_addr) {
c00031e1:	55                   	push   %ebp
c00031e2:	89 e5                	mov    %esp,%ebp
c00031e4:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:424
	struct pool* mem_pool;
	uint32_t bit_idx = 0;
c00031e7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:425
	if (pg_phy_addr >= user_pool.phy_addr_start) {	// 用户物理内存池
c00031ee:	a1 48 3b 01 c0       	mov    0xc0013b48,%eax
c00031f3:	3b 45 08             	cmp    0x8(%ebp),%eax
c00031f6:	77 1b                	ja     c0003213 <pfree+0x32>
/work/x86_os_my/kernel/memory.c:426
		mem_pool = &user_pool;
c00031f8:	c7 45 f4 40 3b 01 c0 	movl   $0xc0013b40,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:427
		bit_idx = (pg_phy_addr - user_pool.phy_addr_start) / PG_SIZE;
c00031ff:	a1 48 3b 01 c0       	mov    0xc0013b48,%eax
c0003204:	8b 55 08             	mov    0x8(%ebp),%edx
c0003207:	29 c2                	sub    %eax,%edx
c0003209:	89 d0                	mov    %edx,%eax
c000320b:	c1 e8 0c             	shr    $0xc,%eax
c000320e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0003211:	eb 19                	jmp    c000322c <pfree+0x4b>
/work/x86_os_my/kernel/memory.c:429
	} else {	// 内核物理内存池
		mem_pool = &kernel_pool;
c0003213:	c7 45 f4 40 3c 01 c0 	movl   $0xc0013c40,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:430
		bit_idx = (pg_phy_addr - kernel_pool.phy_addr_start) / PG_SIZE;
c000321a:	a1 48 3c 01 c0       	mov    0xc0013c48,%eax
c000321f:	8b 55 08             	mov    0x8(%ebp),%edx
c0003222:	29 c2                	sub    %eax,%edx
c0003224:	89 d0                	mov    %edx,%eax
c0003226:	c1 e8 0c             	shr    $0xc,%eax
c0003229:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:432
	}
	bitmap_set(&mem_pool->pool_bitmap, bit_idx, 0);	// 将位图中该位清0
c000322c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000322f:	83 ec 04             	sub    $0x4,%esp
c0003232:	6a 00                	push   $0x0
c0003234:	ff 75 f0             	pushl  -0x10(%ebp)
c0003237:	50                   	push   %eax
c0003238:	e8 32 f5 ff ff       	call   c000276f <bitmap_set>
c000323d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:433
}
c0003240:	90                   	nop
c0003241:	c9                   	leave  
c0003242:	c3                   	ret    

c0003243 <page_table_pte_remove>:
page_table_pte_remove():
/work/x86_os_my/kernel/memory.c:436

/* 去掉页表中虚拟地址vaddr的映射,只去掉vaddr对应的pte */
static void page_table_pte_remove(uint32_t vaddr) {
c0003243:	55                   	push   %ebp
c0003244:	89 e5                	mov    %esp,%ebp
c0003246:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/memory.c:437
	uint32_t* pte = pte_ptr(vaddr);
c0003249:	8b 45 08             	mov    0x8(%ebp),%eax
c000324c:	50                   	push   %eax
c000324d:	e8 e4 f6 ff ff       	call   c0002936 <pte_ptr>
c0003252:	83 c4 04             	add    $0x4,%esp
c0003255:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/kernel/memory.c:438
	*pte &= ~PG_P_1;	// 将页表项pte的P位置0
c0003258:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000325b:	8b 00                	mov    (%eax),%eax
c000325d:	83 e0 fe             	and    $0xfffffffe,%eax
c0003260:	89 c2                	mov    %eax,%edx
c0003262:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003265:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/kernel/memory.c:439
	asm volatile ("invlpg %0"::"m" (vaddr):"memory");	//更新tlb
c0003267:	0f 01 7d 08          	invlpg 0x8(%ebp)
/work/x86_os_my/kernel/memory.c:442
	/*更新 TLB 有两种方式，一是用 invlpg 指令更新单条虚拟地址条目，
	另外一个是重新加载 cr3 寄存器，这将直接清空 TLB，相当于更新整个页表。*/
}
c000326b:	90                   	nop
c000326c:	c9                   	leave  
c000326d:	c3                   	ret    

c000326e <vaddr_remove>:
vaddr_remove():
/work/x86_os_my/kernel/memory.c:447

/* 在虚拟地址池中释放以_vaddr起始的连续pg_cnt个虚拟页地址
 * 清理虚拟地址池位图
 */
static void vaddr_remove(enum pool_flags pf, void* _vaddr, uint32_t pg_cnt) {
c000326e:	55                   	push   %ebp
c000326f:	89 e5                	mov    %esp,%ebp
c0003271:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:448
	uint32_t bit_idx_start = 0, vaddr = (uint32_t)_vaddr, cnt = 0;
c0003274:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c000327b:	8b 45 0c             	mov    0xc(%ebp),%eax
c000327e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0003281:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:450

	if (pf == PF_KERNEL) {	// 内核虚拟内存池
c0003288:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c000328c:	75 3f                	jne    c00032cd <vaddr_remove+0x5f>
/work/x86_os_my/kernel/memory.c:451
		bit_idx_start = (vaddr - kernel_vaddr.vaddr_start) / PG_SIZE;
c000328e:	a1 30 3c 01 c0       	mov    0xc0013c30,%eax
c0003293:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0003296:	29 c2                	sub    %eax,%edx
c0003298:	89 d0                	mov    %edx,%eax
c000329a:	c1 e8 0c             	shr    $0xc,%eax
c000329d:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:452
		while(cnt < pg_cnt) {
c00032a0:	eb 21                	jmp    c00032c3 <vaddr_remove+0x55>
/work/x86_os_my/kernel/memory.c:453
			bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
c00032a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00032a5:	8d 50 01             	lea    0x1(%eax),%edx
c00032a8:	89 55 f4             	mov    %edx,-0xc(%ebp)
c00032ab:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00032ae:	01 d0                	add    %edx,%eax
c00032b0:	83 ec 04             	sub    $0x4,%esp
c00032b3:	6a 00                	push   $0x0
c00032b5:	50                   	push   %eax
c00032b6:	68 28 3c 01 c0       	push   $0xc0013c28
c00032bb:	e8 af f4 ff ff       	call   c000276f <bitmap_set>
c00032c0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:452
static void vaddr_remove(enum pool_flags pf, void* _vaddr, uint32_t pg_cnt) {
	uint32_t bit_idx_start = 0, vaddr = (uint32_t)_vaddr, cnt = 0;

	if (pf == PF_KERNEL) {	// 内核虚拟内存池
		bit_idx_start = (vaddr - kernel_vaddr.vaddr_start) / PG_SIZE;
		while(cnt < pg_cnt) {
c00032c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00032c6:	3b 45 10             	cmp    0x10(%ebp),%eax
c00032c9:	72 d7                	jb     c00032a2 <vaddr_remove+0x34>
/work/x86_os_my/kernel/memory.c:462
		bit_idx_start = (vaddr - cur_thread->userprog_vaddr.vaddr_start) / PG_SIZE;
		while(cnt < pg_cnt) {
			bitmap_set(&cur_thread->userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
		}
	}
}
c00032cb:	eb 48                	jmp    c0003315 <vaddr_remove+0xa7>
/work/x86_os_my/kernel/memory.c:456
		bit_idx_start = (vaddr - kernel_vaddr.vaddr_start) / PG_SIZE;
		while(cnt < pg_cnt) {
			bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
		}
	} else {	// 用户虚拟内存池
		struct task_struct* cur_thread = running_thread();
c00032cd:	e8 1a 0b 00 00       	call   c0003dec <running_thread>
c00032d2:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:457
		bit_idx_start = (vaddr - cur_thread->userprog_vaddr.vaddr_start) / PG_SIZE;
c00032d5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00032d8:	8b 40 60             	mov    0x60(%eax),%eax
c00032db:	8b 55 ec             	mov    -0x14(%ebp),%edx
c00032de:	29 c2                	sub    %eax,%edx
c00032e0:	89 d0                	mov    %edx,%eax
c00032e2:	c1 e8 0c             	shr    $0xc,%eax
c00032e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:458
		while(cnt < pg_cnt) {
c00032e8:	eb 23                	jmp    c000330d <vaddr_remove+0x9f>
/work/x86_os_my/kernel/memory.c:459
			bitmap_set(&cur_thread->userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
c00032ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00032ed:	8d 50 01             	lea    0x1(%eax),%edx
c00032f0:	89 55 f4             	mov    %edx,-0xc(%ebp)
c00032f3:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00032f6:	01 c2                	add    %eax,%edx
c00032f8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00032fb:	83 c0 58             	add    $0x58,%eax
c00032fe:	83 ec 04             	sub    $0x4,%esp
c0003301:	6a 00                	push   $0x0
c0003303:	52                   	push   %edx
c0003304:	50                   	push   %eax
c0003305:	e8 65 f4 ff ff       	call   c000276f <bitmap_set>
c000330a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:458
			bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
		}
	} else {	// 用户虚拟内存池
		struct task_struct* cur_thread = running_thread();
		bit_idx_start = (vaddr - cur_thread->userprog_vaddr.vaddr_start) / PG_SIZE;
		while(cnt < pg_cnt) {
c000330d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003310:	3b 45 10             	cmp    0x10(%ebp),%eax
c0003313:	72 d5                	jb     c00032ea <vaddr_remove+0x7c>
/work/x86_os_my/kernel/memory.c:462
			bitmap_set(&cur_thread->userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
		}
	}
}
c0003315:	90                   	nop
c0003316:	c9                   	leave  
c0003317:	c3                   	ret    

c0003318 <mfree_page>:
mfree_page():
/work/x86_os_my/kernel/memory.c:465

/* 释放以虚拟地址vaddr为起始的cnt个物理页框 */
void mfree_page(enum pool_flags pf, void* _vaddr, uint32_t pg_cnt) {
c0003318:	55                   	push   %ebp
c0003319:	89 e5                	mov    %esp,%ebp
c000331b:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:467
	uint32_t pg_phy_addr;
	uint32_t vaddr = (int32_t)_vaddr, page_cnt = 0;
c000331e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003321:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0003324:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:468
	ASSERT(pg_cnt >=1 && vaddr % PG_SIZE == 0);
c000332b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c000332f:	74 0c                	je     c000333d <mfree_page+0x25>
/work/x86_os_my/kernel/memory.c:468 (discriminator 1)
c0003331:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003334:	25 ff 0f 00 00       	and    $0xfff,%eax
c0003339:	85 c0                	test   %eax,%eax
c000333b:	74 1c                	je     c0003359 <mfree_page+0x41>
/work/x86_os_my/kernel/memory.c:468 (discriminator 3)
c000333d:	68 a8 d6 00 c0       	push   $0xc000d6a8
c0003342:	68 44 d9 00 c0       	push   $0xc000d944
c0003347:	68 d4 01 00 00       	push   $0x1d4
c000334c:	68 bf d5 00 c0       	push   $0xc000d5bf
c0003351:	e8 ab f1 ff ff       	call   c0002501 <panic_spin>
c0003356:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:469
	pg_phy_addr = addr_v2p(vaddr);
c0003359:	83 ec 0c             	sub    $0xc,%esp
c000335c:	ff 75 f4             	pushl  -0xc(%ebp)
c000335f:	e8 f5 fa ff ff       	call   c0002e59 <addr_v2p>
c0003364:	83 c4 10             	add    $0x10,%esp
c0003367:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:472

	/* 确保待释放的物理内存在低端1M+1k大小的页目录+1k大小的页表地址范围外【内核空间】 */
	ASSERT((pg_phy_addr % PG_SIZE) == 0 && pg_phy_addr >= 0x102000);
c000336a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000336d:	25 ff 0f 00 00       	and    $0xfff,%eax
c0003372:	85 c0                	test   %eax,%eax
c0003374:	75 09                	jne    c000337f <mfree_page+0x67>
/work/x86_os_my/kernel/memory.c:472 (discriminator 1)
c0003376:	81 7d ec ff 1f 10 00 	cmpl   $0x101fff,-0x14(%ebp)
c000337d:	77 1c                	ja     c000339b <mfree_page+0x83>
/work/x86_os_my/kernel/memory.c:472 (discriminator 3)
c000337f:	68 cc d6 00 c0       	push   $0xc000d6cc
c0003384:	68 44 d9 00 c0       	push   $0xc000d944
c0003389:	68 d8 01 00 00       	push   $0x1d8
c000338e:	68 bf d5 00 c0       	push   $0xc000d5bf
c0003393:	e8 69 f1 ff ff       	call   c0002501 <panic_spin>
c0003398:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:476

	/* 判断pg_phy_addr属于用户物理内存池还是内核物理内存池 */
	/* 位于user_pool内存池 */
	if (pg_phy_addr >= user_pool.phy_addr_start) {
c000339b:	a1 48 3b 01 c0       	mov    0xc0013b48,%eax
c00033a0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c00033a3:	0f 87 94 00 00 00    	ja     c000343d <mfree_page+0x125>
/work/x86_os_my/kernel/memory.c:477
		vaddr -= PG_SIZE;
c00033a9:	81 6d f4 00 10 00 00 	subl   $0x1000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:478
		while (page_cnt < pg_cnt) {
c00033b0:	eb 6a                	jmp    c000341c <mfree_page+0x104>
/work/x86_os_my/kernel/memory.c:479
			vaddr += PG_SIZE;
c00033b2:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:480
			pg_phy_addr = addr_v2p(vaddr);
c00033b9:	83 ec 0c             	sub    $0xc,%esp
c00033bc:	ff 75 f4             	pushl  -0xc(%ebp)
c00033bf:	e8 95 fa ff ff       	call   c0002e59 <addr_v2p>
c00033c4:	83 c4 10             	add    $0x10,%esp
c00033c7:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:483

			/* 确保物理地址属于用户物理内存池 */
			ASSERT((pg_phy_addr % PG_SIZE) == 0 && pg_phy_addr >= user_pool.phy_addr_start);
c00033ca:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00033cd:	25 ff 0f 00 00       	and    $0xfff,%eax
c00033d2:	85 c0                	test   %eax,%eax
c00033d4:	75 0a                	jne    c00033e0 <mfree_page+0xc8>
/work/x86_os_my/kernel/memory.c:483 (discriminator 1)
c00033d6:	a1 48 3b 01 c0       	mov    0xc0013b48,%eax
c00033db:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c00033de:	76 1c                	jbe    c00033fc <mfree_page+0xe4>
/work/x86_os_my/kernel/memory.c:483 (discriminator 3)
c00033e0:	68 04 d7 00 c0       	push   $0xc000d704
c00033e5:	68 44 d9 00 c0       	push   $0xc000d944
c00033ea:	68 e3 01 00 00       	push   $0x1e3
c00033ef:	68 bf d5 00 c0       	push   $0xc000d5bf
c00033f4:	e8 08 f1 ff ff       	call   c0002501 <panic_spin>
c00033f9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:486

			/* 先将对应的物理页框归还到内存池 */
			pfree(pg_phy_addr);
c00033fc:	83 ec 0c             	sub    $0xc,%esp
c00033ff:	ff 75 ec             	pushl  -0x14(%ebp)
c0003402:	e8 da fd ff ff       	call   c00031e1 <pfree>
c0003407:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:489

			/* 再从页表中清除此虚拟地址所在的页表项pte */
			page_table_pte_remove(vaddr);
c000340a:	83 ec 0c             	sub    $0xc,%esp
c000340d:	ff 75 f4             	pushl  -0xc(%ebp)
c0003410:	e8 2e fe ff ff       	call   c0003243 <page_table_pte_remove>
c0003415:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:491

			page_cnt++;
c0003418:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:478

	/* 判断pg_phy_addr属于用户物理内存池还是内核物理内存池 */
	/* 位于user_pool内存池 */
	if (pg_phy_addr >= user_pool.phy_addr_start) {
		vaddr -= PG_SIZE;
		while (page_cnt < pg_cnt) {
c000341c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000341f:	3b 45 10             	cmp    0x10(%ebp),%eax
c0003422:	72 8e                	jb     c00033b2 <mfree_page+0x9a>
/work/x86_os_my/kernel/memory.c:494
			page_table_pte_remove(vaddr);

			page_cnt++;
		}
		/* 清空虚拟地址的位图中的相应位 */
		vaddr_remove(pf, _vaddr, pg_cnt);
c0003424:	83 ec 04             	sub    $0x4,%esp
c0003427:	ff 75 10             	pushl  0x10(%ebp)
c000342a:	ff 75 0c             	pushl  0xc(%ebp)
c000342d:	ff 75 08             	pushl  0x8(%ebp)
c0003430:	e8 39 fe ff ff       	call   c000326e <vaddr_remove>
c0003435:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:518
			page_cnt++;
		}
		/* 清空虚拟地址的位图中的相应位 */
		vaddr_remove(pf, _vaddr, pg_cnt);
	}
}
c0003438:	e9 99 00 00 00       	jmp    c00034d6 <mfree_page+0x1be>
/work/x86_os_my/kernel/memory.c:498
		/* 清空虚拟地址的位图中的相应位 */
		vaddr_remove(pf, _vaddr, pg_cnt);

	} else {
		/* 位于kernel_pool内存池 */
		vaddr -= PG_SIZE;
c000343d:	81 6d f4 00 10 00 00 	subl   $0x1000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:499
		while (page_cnt < pg_cnt) {
c0003444:	eb 74                	jmp    c00034ba <mfree_page+0x1a2>
/work/x86_os_my/kernel/memory.c:500
			vaddr += PG_SIZE;
c0003446:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:501
			pg_phy_addr = addr_v2p(vaddr);
c000344d:	83 ec 0c             	sub    $0xc,%esp
c0003450:	ff 75 f4             	pushl  -0xc(%ebp)
c0003453:	e8 01 fa ff ff       	call   c0002e59 <addr_v2p>
c0003458:	83 c4 10             	add    $0x10,%esp
c000345b:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:504

			/* 确保待释放的物理内存只属于内核物理内存池 */
			ASSERT((pg_phy_addr % PG_SIZE) == 0 && pg_phy_addr >= kernel_pool.phy_addr_start && \
c000345e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0003461:	25 ff 0f 00 00       	and    $0xfff,%eax
c0003466:	85 c0                	test   %eax,%eax
c0003468:	75 14                	jne    c000347e <mfree_page+0x166>
/work/x86_os_my/kernel/memory.c:504 (discriminator 1)
c000346a:	a1 48 3c 01 c0       	mov    0xc0013c48,%eax
c000346f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0003472:	77 0a                	ja     c000347e <mfree_page+0x166>
/work/x86_os_my/kernel/memory.c:504 (discriminator 3)
c0003474:	a1 48 3b 01 c0       	mov    0xc0013b48,%eax
c0003479:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c000347c:	77 1c                	ja     c000349a <mfree_page+0x182>
/work/x86_os_my/kernel/memory.c:504 (discriminator 5)
c000347e:	68 4c d7 00 c0       	push   $0xc000d74c
c0003483:	68 44 d9 00 c0       	push   $0xc000d944
c0003488:	68 f9 01 00 00       	push   $0x1f9
c000348d:	68 bf d5 00 c0       	push   $0xc000d5bf
c0003492:	e8 6a f0 ff ff       	call   c0002501 <panic_spin>
c0003497:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:508
					pg_phy_addr < user_pool.phy_addr_start);

			/* 先将对应的物理页框归还到内存池 */
			pfree(pg_phy_addr);
c000349a:	83 ec 0c             	sub    $0xc,%esp
c000349d:	ff 75 ec             	pushl  -0x14(%ebp)
c00034a0:	e8 3c fd ff ff       	call   c00031e1 <pfree>
c00034a5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:511

			/* 再从页表中清除此虚拟地址所在的页表项pte */
			page_table_pte_remove(vaddr);
c00034a8:	83 ec 0c             	sub    $0xc,%esp
c00034ab:	ff 75 f4             	pushl  -0xc(%ebp)
c00034ae:	e8 90 fd ff ff       	call   c0003243 <page_table_pte_remove>
c00034b3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:513

			page_cnt++;
c00034b6:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:499
		vaddr_remove(pf, _vaddr, pg_cnt);

	} else {
		/* 位于kernel_pool内存池 */
		vaddr -= PG_SIZE;
		while (page_cnt < pg_cnt) {
c00034ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00034bd:	3b 45 10             	cmp    0x10(%ebp),%eax
c00034c0:	72 84                	jb     c0003446 <mfree_page+0x12e>
/work/x86_os_my/kernel/memory.c:516
			page_table_pte_remove(vaddr);

			page_cnt++;
		}
		/* 清空虚拟地址的位图中的相应位 */
		vaddr_remove(pf, _vaddr, pg_cnt);
c00034c2:	83 ec 04             	sub    $0x4,%esp
c00034c5:	ff 75 10             	pushl  0x10(%ebp)
c00034c8:	ff 75 0c             	pushl  0xc(%ebp)
c00034cb:	ff 75 08             	pushl  0x8(%ebp)
c00034ce:	e8 9b fd ff ff       	call   c000326e <vaddr_remove>
c00034d3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:518
	}
}
c00034d6:	90                   	nop
c00034d7:	c9                   	leave  
c00034d8:	c3                   	ret    

c00034d9 <sys_free>:
sys_free():
/work/x86_os_my/kernel/memory.c:521

/* 回收内存ptr */
void sys_free(void* ptr) {
c00034d9:	55                   	push   %ebp
c00034da:	89 e5                	mov    %esp,%ebp
c00034dc:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/kernel/memory.c:522
	ASSERT(ptr != NULL);
c00034df:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00034e3:	75 1c                	jne    c0003501 <sys_free+0x28>
/work/x86_os_my/kernel/memory.c:522 (discriminator 1)
c00034e5:	68 c0 d7 00 c0       	push   $0xc000d7c0
c00034ea:	68 50 d9 00 c0       	push   $0xc000d950
c00034ef:	68 0a 02 00 00       	push   $0x20a
c00034f4:	68 bf d5 00 c0       	push   $0xc000d5bf
c00034f9:	e8 03 f0 ff ff       	call   c0002501 <panic_spin>
c00034fe:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:523
	if (ptr != NULL) {
c0003501:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003505:	0f 84 b2 01 00 00    	je     c00036bd <sys_free+0x1e4>
/work/x86_os_my/kernel/memory.c:528
		enum pool_flags PF;
		struct pool* mem_pool;

		/* 判断是线程还是进程 */
		if (running_thread()->pgdir == NULL) {
c000350b:	e8 dc 08 00 00       	call   c0003dec <running_thread>
c0003510:	8b 40 54             	mov    0x54(%eax),%eax
c0003513:	85 c0                	test   %eax,%eax
c0003515:	75 36                	jne    c000354d <sys_free+0x74>
/work/x86_os_my/kernel/memory.c:529
			ASSERT((uint32_t)ptr >= K_HEAP_START);
c0003517:	8b 45 08             	mov    0x8(%ebp),%eax
c000351a:	3d ff ff 0f c0       	cmp    $0xc00fffff,%eax
c000351f:	77 1c                	ja     c000353d <sys_free+0x64>
/work/x86_os_my/kernel/memory.c:529 (discriminator 1)
c0003521:	68 cc d7 00 c0       	push   $0xc000d7cc
c0003526:	68 50 d9 00 c0       	push   $0xc000d950
c000352b:	68 11 02 00 00       	push   $0x211
c0003530:	68 bf d5 00 c0       	push   $0xc000d5bf
c0003535:	e8 c7 ef ff ff       	call   c0002501 <panic_spin>
c000353a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:530
			PF = PF_KERNEL;
c000353d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:531
			mem_pool = &kernel_pool;
c0003544:	c7 45 f0 40 3c 01 c0 	movl   $0xc0013c40,-0x10(%ebp)
c000354b:	eb 0e                	jmp    c000355b <sys_free+0x82>
/work/x86_os_my/kernel/memory.c:533
		} else {
			PF = PF_USER;
c000354d:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:534
			mem_pool = &user_pool;
c0003554:	c7 45 f0 40 3b 01 c0 	movl   $0xc0013b40,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:537
		}

		lock_acquire(&mem_pool->lock);
c000355b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000355e:	83 c0 10             	add    $0x10,%eax
c0003561:	83 ec 0c             	sub    $0xc,%esp
c0003564:	50                   	push   %eax
c0003565:	e8 35 19 00 00       	call   c0004e9f <lock_acquire>
c000356a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:538
		struct mem_block* b = ptr;
c000356d:	8b 45 08             	mov    0x8(%ebp),%eax
c0003570:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:539
		struct arena* a = block2arena(b);			// 把mem_block转换成arena,获取元信息
c0003573:	83 ec 0c             	sub    $0xc,%esp
c0003576:	ff 75 e8             	pushl  -0x18(%ebp)
c0003579:	e8 21 f9 ff ff       	call   c0002e9f <block2arena>
c000357e:	83 c4 10             	add    $0x10,%esp
c0003581:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/kernel/memory.c:540
		ASSERT(a->large == 0 || a->large == 1);
c0003584:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0003587:	8b 40 08             	mov    0x8(%eax),%eax
c000358a:	85 c0                	test   %eax,%eax
c000358c:	74 27                	je     c00035b5 <sys_free+0xdc>
/work/x86_os_my/kernel/memory.c:540 (discriminator 1)
c000358e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0003591:	8b 40 08             	mov    0x8(%eax),%eax
c0003594:	83 f8 01             	cmp    $0x1,%eax
c0003597:	74 1c                	je     c00035b5 <sys_free+0xdc>
/work/x86_os_my/kernel/memory.c:540 (discriminator 2)
c0003599:	68 ec d7 00 c0       	push   $0xc000d7ec
c000359e:	68 50 d9 00 c0       	push   $0xc000d950
c00035a3:	68 1c 02 00 00       	push   $0x21c
c00035a8:	68 bf d5 00 c0       	push   $0xc000d5bf
c00035ad:	e8 4f ef ff ff       	call   c0002501 <panic_spin>
c00035b2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:541
		if (a->desc == NULL && a->large == true) {	// 大于1024的内存
c00035b5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00035b8:	8b 00                	mov    (%eax),%eax
c00035ba:	85 c0                	test   %eax,%eax
c00035bc:	75 28                	jne    c00035e6 <sys_free+0x10d>
/work/x86_os_my/kernel/memory.c:541 (discriminator 1)
c00035be:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00035c1:	8b 40 08             	mov    0x8(%eax),%eax
c00035c4:	83 f8 01             	cmp    $0x1,%eax
c00035c7:	75 1d                	jne    c00035e6 <sys_free+0x10d>
/work/x86_os_my/kernel/memory.c:542
			mfree_page(PF, a, a->cnt);
c00035c9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00035cc:	8b 40 04             	mov    0x4(%eax),%eax
c00035cf:	83 ec 04             	sub    $0x4,%esp
c00035d2:	50                   	push   %eax
c00035d3:	ff 75 e4             	pushl  -0x1c(%ebp)
c00035d6:	ff 75 f4             	pushl  -0xc(%ebp)
c00035d9:	e8 3a fd ff ff       	call   c0003318 <mfree_page>
c00035de:	83 c4 10             	add    $0x10,%esp
c00035e1:	e9 c5 00 00 00       	jmp    c00036ab <sys_free+0x1d2>
/work/x86_os_my/kernel/memory.c:546
		} else {									// 小于等于1024的内存块
			/* 先将内存块回收到free_list */
			// &b->free_elem == &b
			list_append(&a->desc->free_list, &b->free_elem);
c00035e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00035e9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c00035ec:	8b 12                	mov    (%edx),%edx
c00035ee:	83 c2 08             	add    $0x8,%edx
c00035f1:	83 ec 08             	sub    $0x8,%esp
c00035f4:	50                   	push   %eax
c00035f5:	52                   	push   %edx
c00035f6:	e8 6f 14 00 00       	call   c0004a6a <list_append>
c00035fb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:549

			/* 再判断此arena中的内存块是否都是空闲,如果是就释放arena */
			if (++a->cnt == a->desc->blocks_per_arena) {
c00035fe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0003601:	8b 40 04             	mov    0x4(%eax),%eax
c0003604:	8d 50 01             	lea    0x1(%eax),%edx
c0003607:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000360a:	89 50 04             	mov    %edx,0x4(%eax)
c000360d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0003610:	8b 50 04             	mov    0x4(%eax),%edx
c0003613:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0003616:	8b 00                	mov    (%eax),%eax
c0003618:	8b 40 04             	mov    0x4(%eax),%eax
c000361b:	39 c2                	cmp    %eax,%edx
c000361d:	0f 85 88 00 00 00    	jne    c00036ab <sys_free+0x1d2>
/work/x86_os_my/kernel/memory.c:551
				uint32_t block_idx;
				for (block_idx = 0; block_idx < a->desc->blocks_per_arena; block_idx++) {
c0003623:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c000362a:	eb 5f                	jmp    c000368b <sys_free+0x1b2>
/work/x86_os_my/kernel/memory.c:552
					struct mem_block*  b = arena2block(a, block_idx);
c000362c:	83 ec 08             	sub    $0x8,%esp
c000362f:	ff 75 ec             	pushl  -0x14(%ebp)
c0003632:	ff 75 e4             	pushl  -0x1c(%ebp)
c0003635:	e8 4b f8 ff ff       	call   c0002e85 <arena2block>
c000363a:	83 c4 10             	add    $0x10,%esp
c000363d:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/kernel/memory.c:553
					ASSERT(elem_find(&a->desc->free_list, &b->free_elem));
c0003640:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0003643:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0003646:	8b 12                	mov    (%edx),%edx
c0003648:	83 c2 08             	add    $0x8,%edx
c000364b:	83 ec 08             	sub    $0x8,%esp
c000364e:	50                   	push   %eax
c000364f:	52                   	push   %edx
c0003650:	e8 8f 14 00 00       	call   c0004ae4 <elem_find>
c0003655:	83 c4 10             	add    $0x10,%esp
c0003658:	85 c0                	test   %eax,%eax
c000365a:	75 1c                	jne    c0003678 <sys_free+0x19f>
/work/x86_os_my/kernel/memory.c:553 (discriminator 1)
c000365c:	68 0c d8 00 c0       	push   $0xc000d80c
c0003661:	68 50 d9 00 c0       	push   $0xc000d950
c0003666:	68 29 02 00 00       	push   $0x229
c000366b:	68 bf d5 00 c0       	push   $0xc000d5bf
c0003670:	e8 8c ee ff ff       	call   c0002501 <panic_spin>
c0003675:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:554 (discriminator 2)
					list_remove(&b->free_elem);
c0003678:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000367b:	83 ec 0c             	sub    $0xc,%esp
c000367e:	50                   	push   %eax
c000367f:	e8 04 14 00 00       	call   c0004a88 <list_remove>
c0003684:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:551 (discriminator 2)
			list_append(&a->desc->free_list, &b->free_elem);

			/* 再判断此arena中的内存块是否都是空闲,如果是就释放arena */
			if (++a->cnt == a->desc->blocks_per_arena) {
				uint32_t block_idx;
				for (block_idx = 0; block_idx < a->desc->blocks_per_arena; block_idx++) {
c0003687:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:551 (discriminator 1)
c000368b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000368e:	8b 00                	mov    (%eax),%eax
c0003690:	8b 40 04             	mov    0x4(%eax),%eax
c0003693:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0003696:	77 94                	ja     c000362c <sys_free+0x153>
/work/x86_os_my/kernel/memory.c:556
					struct mem_block*  b = arena2block(a, block_idx);
					ASSERT(elem_find(&a->desc->free_list, &b->free_elem));
					list_remove(&b->free_elem);
				}
				mfree_page(PF, a, 1);
c0003698:	83 ec 04             	sub    $0x4,%esp
c000369b:	6a 01                	push   $0x1
c000369d:	ff 75 e4             	pushl  -0x1c(%ebp)
c00036a0:	ff 75 f4             	pushl  -0xc(%ebp)
c00036a3:	e8 70 fc ff ff       	call   c0003318 <mfree_page>
c00036a8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:559
			}
		}
		lock_release(&mem_pool->lock);
c00036ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00036ae:	83 c0 10             	add    $0x10,%eax
c00036b1:	83 ec 0c             	sub    $0xc,%esp
c00036b4:	50                   	push   %eax
c00036b5:	e8 5c 18 00 00       	call   c0004f16 <lock_release>
c00036ba:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:561
	}
}
c00036bd:	90                   	nop
c00036be:	c9                   	leave  
c00036bf:	c3                   	ret    

c00036c0 <mem_pool_init>:
mem_pool_init():
/work/x86_os_my/kernel/memory.c:564

/* 初始化内存池 */
static void mem_pool_init(uint32_t all_mem) {
c00036c0:	55                   	push   %ebp
c00036c1:	89 e5                	mov    %esp,%ebp
c00036c3:	83 ec 38             	sub    $0x38,%esp
/work/x86_os_my/kernel/memory.c:565
	put_str("   mem_pool_init start\n");
c00036c6:	83 ec 0c             	sub    $0xc,%esp
c00036c9:	68 3a d8 00 c0       	push   $0xc000d83a
c00036ce:	e8 7d ec ff ff       	call   c0002350 <put_str>
c00036d3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:566
	uint32_t page_table_size = PG_SIZE * 256;		// 页表大小= 1页的页目录表+第0和第768个页目录项指向同一个页表+
c00036d6:	c7 45 f4 00 00 10 00 	movl   $0x100000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:568
													// 第769~1022个页目录项共指向254个页表,共256个页框
	uint32_t used_mem = page_table_size + 0x100000;	// 0x100000为低端1M内存
c00036dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00036e0:	05 00 00 10 00       	add    $0x100000,%eax
c00036e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:569
	uint32_t free_mem = all_mem - used_mem;
c00036e8:	8b 45 08             	mov    0x8(%ebp),%eax
c00036eb:	2b 45 f0             	sub    -0x10(%ebp),%eax
c00036ee:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:570
	uint16_t all_free_pages = free_mem / PG_SIZE;	// 1页为4k,不管总内存是不是4k的倍数,
c00036f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00036f4:	c1 e8 0c             	shr    $0xc,%eax
c00036f7:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
/work/x86_os_my/kernel/memory.c:572
													// 对于以页为单位的内存分配策略，不足1页的内存不用考虑了。
	uint16_t kernel_free_pages = all_free_pages / 2;
c00036fb:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c00036ff:	66 d1 e8             	shr    %ax
c0003702:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:573
	uint16_t user_free_pages = all_free_pages - kernel_free_pages;
c0003706:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c000370a:	66 2b 45 e8          	sub    -0x18(%ebp),%ax
c000370e:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
/work/x86_os_my/kernel/memory.c:577

	/* 为简化位图操作，余数不处理，坏处是这样做会丢内存。
	好处是不用做内存的越界检查,因为位图表示的内存少于实际物理内存*/
	uint32_t kbm_length = kernel_free_pages / 8;	// Kernel BitMap的长度,位图中的一位表示一页,以字节为单位
c0003712:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
c0003716:	66 c1 e8 03          	shr    $0x3,%ax
c000371a:	0f b7 c0             	movzwl %ax,%eax
c000371d:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/kernel/memory.c:578
	uint32_t ubm_length = user_free_pages / 8;		// User BitMap的长度.
c0003720:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0003724:	66 c1 e8 03          	shr    $0x3,%ax
c0003728:	0f b7 c0             	movzwl %ax,%eax
c000372b:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/kernel/memory.c:580

	uint32_t kp_start = used_mem;								// Kernel Pool start,内核内存池的起始地址
c000372e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003731:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/kernel/memory.c:581
	uint32_t up_start = kp_start + kernel_free_pages * PG_SIZE;	// User Pool start,用户内存池的起始地址
c0003734:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
c0003738:	c1 e0 0c             	shl    $0xc,%eax
c000373b:	89 c2                	mov    %eax,%edx
c000373d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0003740:	01 d0                	add    %edx,%eax
c0003742:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/kernel/memory.c:583

	kernel_pool.phy_addr_start = kp_start;
c0003745:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0003748:	a3 48 3c 01 c0       	mov    %eax,0xc0013c48
/work/x86_os_my/kernel/memory.c:584
	user_pool.phy_addr_start   = up_start;
c000374d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0003750:	a3 48 3b 01 c0       	mov    %eax,0xc0013b48
/work/x86_os_my/kernel/memory.c:586

	kernel_pool.pool_size = kernel_free_pages * PG_SIZE;
c0003755:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
c0003759:	c1 e0 0c             	shl    $0xc,%eax
c000375c:	a3 4c 3c 01 c0       	mov    %eax,0xc0013c4c
/work/x86_os_my/kernel/memory.c:587
	user_pool.pool_size	 = user_free_pages * PG_SIZE;
c0003761:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0003765:	c1 e0 0c             	shl    $0xc,%eax
c0003768:	a3 4c 3b 01 c0       	mov    %eax,0xc0013b4c
/work/x86_os_my/kernel/memory.c:589

	kernel_pool.pool_bitmap.btmp_bytes_len = kbm_length;
c000376d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0003770:	a3 40 3c 01 c0       	mov    %eax,0xc0013c40
/work/x86_os_my/kernel/memory.c:590
	user_pool.pool_bitmap.btmp_bytes_len	  = ubm_length;
c0003775:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0003778:	a3 40 3b 01 c0       	mov    %eax,0xc0013b40
/work/x86_os_my/kernel/memory.c:599
	*	而我们需要根据总内存大小在运行时，计算出位图的数组需要多少字节。
	*   所以改为指定一块内存来生成位图.
	*   ************************************************/
	// 内核使用的最高地址是0xc009f000,这是主线程的栈地址.(内核的大小预计为70K左右)
	// 32M内存占用的位图是2k.内核内存池的位图先定在MEM_BITMAP_BASE(0xc009a000)处.
	kernel_pool.pool_bitmap.bits = (void*)MEM_BITMAP_BASE;
c000377d:	c7 05 44 3c 01 c0 00 	movl   $0xc009a000,0xc0013c44
c0003784:	a0 09 c0 
/work/x86_os_my/kernel/memory.c:601
	/* 用户内存池的位图紧跟在内核内存池位图之后 */
	user_pool.pool_bitmap.bits = (void*)(MEM_BITMAP_BASE + kbm_length);
c0003787:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000378a:	2d 00 60 f6 3f       	sub    $0x3ff66000,%eax
c000378f:	a3 44 3b 01 c0       	mov    %eax,0xc0013b44
/work/x86_os_my/kernel/memory.c:604
	
	/******************** 输出内存池信息 **********************/
	put_str("      kernel_pool_bitmap_start:");put_int((int)kernel_pool.pool_bitmap.bits);
c0003794:	83 ec 0c             	sub    $0xc,%esp
c0003797:	68 54 d8 00 c0       	push   $0xc000d854
c000379c:	e8 af eb ff ff       	call   c0002350 <put_str>
c00037a1:	83 c4 10             	add    $0x10,%esp
c00037a4:	a1 44 3c 01 c0       	mov    0xc0013c44,%eax
c00037a9:	83 ec 0c             	sub    $0xc,%esp
c00037ac:	50                   	push   %eax
c00037ad:	e8 c8 ec ff ff       	call   c000247a <put_int>
c00037b2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:605
	put_str(" kernel_pool_phy_addr_start:");put_int(kernel_pool.phy_addr_start);
c00037b5:	83 ec 0c             	sub    $0xc,%esp
c00037b8:	68 74 d8 00 c0       	push   $0xc000d874
c00037bd:	e8 8e eb ff ff       	call   c0002350 <put_str>
c00037c2:	83 c4 10             	add    $0x10,%esp
c00037c5:	a1 48 3c 01 c0       	mov    0xc0013c48,%eax
c00037ca:	83 ec 0c             	sub    $0xc,%esp
c00037cd:	50                   	push   %eax
c00037ce:	e8 a7 ec ff ff       	call   c000247a <put_int>
c00037d3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:606
	put_str("\n");
c00037d6:	83 ec 0c             	sub    $0xc,%esp
c00037d9:	68 91 d8 00 c0       	push   $0xc000d891
c00037de:	e8 6d eb ff ff       	call   c0002350 <put_str>
c00037e3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:607
	put_str("      user_pool_bitmap_start:");put_int((int)user_pool.pool_bitmap.bits);
c00037e6:	83 ec 0c             	sub    $0xc,%esp
c00037e9:	68 93 d8 00 c0       	push   $0xc000d893
c00037ee:	e8 5d eb ff ff       	call   c0002350 <put_str>
c00037f3:	83 c4 10             	add    $0x10,%esp
c00037f6:	a1 44 3b 01 c0       	mov    0xc0013b44,%eax
c00037fb:	83 ec 0c             	sub    $0xc,%esp
c00037fe:	50                   	push   %eax
c00037ff:	e8 76 ec ff ff       	call   c000247a <put_int>
c0003804:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:608
	put_str(" user_pool_phy_addr_start:");put_int(user_pool.phy_addr_start);
c0003807:	83 ec 0c             	sub    $0xc,%esp
c000380a:	68 b1 d8 00 c0       	push   $0xc000d8b1
c000380f:	e8 3c eb ff ff       	call   c0002350 <put_str>
c0003814:	83 c4 10             	add    $0x10,%esp
c0003817:	a1 48 3b 01 c0       	mov    0xc0013b48,%eax
c000381c:	83 ec 0c             	sub    $0xc,%esp
c000381f:	50                   	push   %eax
c0003820:	e8 55 ec ff ff       	call   c000247a <put_int>
c0003825:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:609
	put_str("\n");
c0003828:	83 ec 0c             	sub    $0xc,%esp
c000382b:	68 91 d8 00 c0       	push   $0xc000d891
c0003830:	e8 1b eb ff ff       	call   c0002350 <put_str>
c0003835:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:612

	/* 将位图置0*/
	bitmap_init(&kernel_pool.pool_bitmap);
c0003838:	83 ec 0c             	sub    $0xc,%esp
c000383b:	68 40 3c 01 c0       	push   $0xc0013c40
c0003840:	e8 92 ed ff ff       	call   c00025d7 <bitmap_init>
c0003845:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:613
	bitmap_init(&user_pool.pool_bitmap);
c0003848:	83 ec 0c             	sub    $0xc,%esp
c000384b:	68 40 3b 01 c0       	push   $0xc0013b40
c0003850:	e8 82 ed ff ff       	call   c00025d7 <bitmap_init>
c0003855:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:615

	lock_init(&kernel_pool.lock);
c0003858:	83 ec 0c             	sub    $0xc,%esp
c000385b:	68 50 3c 01 c0       	push   $0xc0013c50
c0003860:	e8 60 14 00 00       	call   c0004cc5 <lock_init>
c0003865:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:616
	lock_init(&user_pool.lock);
c0003868:	83 ec 0c             	sub    $0xc,%esp
c000386b:	68 50 3b 01 c0       	push   $0xc0013b50
c0003870:	e8 50 14 00 00       	call   c0004cc5 <lock_init>
c0003875:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:620
	
	/* 下面初始化内核虚拟地址的位图(bp_len + bits数组),按实际物理内存大小生成数组。*/
	// 用于维护内核堆的虚拟地址,所以要和内核内存池大小一致
	kernel_vaddr.vaddr_bitmap.btmp_bytes_len = kbm_length;
c0003878:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000387b:	a3 28 3c 01 c0       	mov    %eax,0xc0013c28
/work/x86_os_my/kernel/memory.c:622
	/* 位图的数组指向一块未使用的内存,目前定位在内核内存池和用户内存池之外*/
	kernel_vaddr.vaddr_bitmap.bits = (void*)(MEM_BITMAP_BASE + kbm_length + ubm_length);
c0003880:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0003883:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0003886:	01 d0                	add    %edx,%eax
c0003888:	2d 00 60 f6 3f       	sub    $0x3ff66000,%eax
c000388d:	a3 2c 3c 01 c0       	mov    %eax,0xc0013c2c
/work/x86_os_my/kernel/memory.c:624

	kernel_vaddr.vaddr_start = K_HEAP_START;
c0003892:	c7 05 30 3c 01 c0 00 	movl   $0xc0100000,0xc0013c30
c0003899:	00 10 c0 
/work/x86_os_my/kernel/memory.c:625
	bitmap_init(&kernel_vaddr.vaddr_bitmap);
c000389c:	83 ec 0c             	sub    $0xc,%esp
c000389f:	68 28 3c 01 c0       	push   $0xc0013c28
c00038a4:	e8 2e ed ff ff       	call   c00025d7 <bitmap_init>
c00038a9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:626
	put_str("   mem_pool_init done\n");
c00038ac:	83 ec 0c             	sub    $0xc,%esp
c00038af:	68 cc d8 00 c0       	push   $0xc000d8cc
c00038b4:	e8 97 ea ff ff       	call   c0002350 <put_str>
c00038b9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:627
}
c00038bc:	90                   	nop
c00038bd:	c9                   	leave  
c00038be:	c3                   	ret    

c00038bf <block_desc_init>:
block_desc_init():
/work/x86_os_my/kernel/memory.c:630

/* 为malloc做准备 */
void block_desc_init(struct mem_block_desc* desc_array) {
c00038bf:	55                   	push   %ebp
c00038c0:	89 e5                	mov    %esp,%ebp
c00038c2:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:631
   uint16_t desc_idx, block_size = 16;
c00038c5:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:634

   /* 初始化每个mem_block_desc描述符 */
   for (desc_idx = 0; desc_idx < DESC_CNT; desc_idx++) {
c00038cb:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c00038d1:	eb 75                	jmp    c0003948 <block_desc_init+0x89>
/work/x86_os_my/kernel/memory.c:635 (discriminator 3)
      desc_array[desc_idx].block_size = block_size;
c00038d3:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c00038d7:	89 d0                	mov    %edx,%eax
c00038d9:	01 c0                	add    %eax,%eax
c00038db:	01 d0                	add    %edx,%eax
c00038dd:	c1 e0 03             	shl    $0x3,%eax
c00038e0:	89 c2                	mov    %eax,%edx
c00038e2:	8b 45 08             	mov    0x8(%ebp),%eax
c00038e5:	01 c2                	add    %eax,%edx
c00038e7:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c00038eb:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/kernel/memory.c:638 (discriminator 3)

      /* 初始化arena中的内存块数量【注意计算方法】 */
      desc_array[desc_idx].blocks_per_arena = (PG_SIZE - sizeof(struct arena)) / block_size;
c00038ed:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c00038f1:	89 d0                	mov    %edx,%eax
c00038f3:	01 c0                	add    %eax,%eax
c00038f5:	01 d0                	add    %edx,%eax
c00038f7:	c1 e0 03             	shl    $0x3,%eax
c00038fa:	89 c2                	mov    %eax,%edx
c00038fc:	8b 45 08             	mov    0x8(%ebp),%eax
c00038ff:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
c0003902:	b8 f4 0f 00 00       	mov    $0xff4,%eax
c0003907:	ba 00 00 00 00       	mov    $0x0,%edx
c000390c:	66 f7 75 f4          	divw   -0xc(%ebp)
c0003910:	0f b7 c0             	movzwl %ax,%eax
c0003913:	89 41 04             	mov    %eax,0x4(%ecx)
/work/x86_os_my/kernel/memory.c:640 (discriminator 3)

      list_init(&desc_array[desc_idx].free_list);
c0003916:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c000391a:	89 d0                	mov    %edx,%eax
c000391c:	01 c0                	add    %eax,%eax
c000391e:	01 d0                	add    %edx,%eax
c0003920:	c1 e0 03             	shl    $0x3,%eax
c0003923:	89 c2                	mov    %eax,%edx
c0003925:	8b 45 08             	mov    0x8(%ebp),%eax
c0003928:	01 d0                	add    %edx,%eax
c000392a:	83 c0 08             	add    $0x8,%eax
c000392d:	83 ec 0c             	sub    $0xc,%esp
c0003930:	50                   	push   %eax
c0003931:	e8 a3 10 00 00       	call   c00049d9 <list_init>
c0003936:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:642 (discriminator 3)

      block_size *= 2;		// 下一个规格内存块！
c0003939:	66 d1 65 f4          	shlw   -0xc(%ebp)
/work/x86_os_my/kernel/memory.c:634 (discriminator 3)
/* 为malloc做准备 */
void block_desc_init(struct mem_block_desc* desc_array) {
   uint16_t desc_idx, block_size = 16;

   /* 初始化每个mem_block_desc描述符 */
   for (desc_idx = 0; desc_idx < DESC_CNT; desc_idx++) {
c000393d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0003941:	83 c0 01             	add    $0x1,%eax
c0003944:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
/work/x86_os_my/kernel/memory.c:634 (discriminator 1)
c0003948:	66 83 7d f6 06       	cmpw   $0x6,-0xa(%ebp)
c000394d:	76 84                	jbe    c00038d3 <block_desc_init+0x14>
/work/x86_os_my/kernel/memory.c:645
      list_init(&desc_array[desc_idx].free_list);

      block_size *= 2;		// 下一个规格内存块！
	  // 16/32/64/128/256/512/1024 总共 7 种规格
   }
}
c000394f:	90                   	nop
c0003950:	c9                   	leave  
c0003951:	c3                   	ret    

c0003952 <free_a_phy_page>:
free_a_phy_page():
/work/x86_os_my/kernel/memory.c:648

/* 根据物理页框地址pg_phy_addr在相应的内存池的位图清0,不改动页表*/
void free_a_phy_page(uint32_t pg_phy_addr) {
c0003952:	55                   	push   %ebp
c0003953:	89 e5                	mov    %esp,%ebp
c0003955:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:650
	struct pool* mem_pool;
	uint32_t bit_idx = 0;
c0003958:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:651
	if (pg_phy_addr >= user_pool.phy_addr_start) {
c000395f:	a1 48 3b 01 c0       	mov    0xc0013b48,%eax
c0003964:	3b 45 08             	cmp    0x8(%ebp),%eax
c0003967:	77 1b                	ja     c0003984 <free_a_phy_page+0x32>
/work/x86_os_my/kernel/memory.c:652
		mem_pool = &user_pool;
c0003969:	c7 45 f4 40 3b 01 c0 	movl   $0xc0013b40,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:653
		bit_idx = (pg_phy_addr - user_pool.phy_addr_start) / PG_SIZE;
c0003970:	a1 48 3b 01 c0       	mov    0xc0013b48,%eax
c0003975:	8b 55 08             	mov    0x8(%ebp),%edx
c0003978:	29 c2                	sub    %eax,%edx
c000397a:	89 d0                	mov    %edx,%eax
c000397c:	c1 e8 0c             	shr    $0xc,%eax
c000397f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0003982:	eb 19                	jmp    c000399d <free_a_phy_page+0x4b>
/work/x86_os_my/kernel/memory.c:655
	} else {
		mem_pool = &kernel_pool;
c0003984:	c7 45 f4 40 3c 01 c0 	movl   $0xc0013c40,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:656
		bit_idx = (pg_phy_addr - kernel_pool.phy_addr_start) / PG_SIZE;
c000398b:	a1 48 3c 01 c0       	mov    0xc0013c48,%eax
c0003990:	8b 55 08             	mov    0x8(%ebp),%edx
c0003993:	29 c2                	sub    %eax,%edx
c0003995:	89 d0                	mov    %edx,%eax
c0003997:	c1 e8 0c             	shr    $0xc,%eax
c000399a:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:658
	}
	bitmap_set(&mem_pool->pool_bitmap, bit_idx, 0);
c000399d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00039a0:	83 ec 04             	sub    $0x4,%esp
c00039a3:	6a 00                	push   $0x0
c00039a5:	ff 75 f0             	pushl  -0x10(%ebp)
c00039a8:	50                   	push   %eax
c00039a9:	e8 c1 ed ff ff       	call   c000276f <bitmap_set>
c00039ae:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:659
}
c00039b1:	90                   	nop
c00039b2:	c9                   	leave  
c00039b3:	c3                   	ret    

c00039b4 <mem_init>:
mem_init():
/work/x86_os_my/kernel/memory.c:662

/* 内存管理部分初始化入口 */
void mem_init() {
c00039b4:	55                   	push   %ebp
c00039b5:	89 e5                	mov    %esp,%ebp
c00039b7:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:663
	put_str("mem_init start\n");
c00039ba:	83 ec 0c             	sub    $0xc,%esp
c00039bd:	68 e3 d8 00 c0       	push   $0xc000d8e3
c00039c2:	e8 89 e9 ff ff       	call   c0002350 <put_str>
c00039c7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:664
	uint32_t mem_bytes_total = (*(uint32_t*)(0xb00));	//内存总数在汇编中获取，放到了地址0xb00处。
c00039ca:	b8 00 0b 00 00       	mov    $0xb00,%eax
c00039cf:	8b 00                	mov    (%eax),%eax
c00039d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:665
	mem_pool_init(mem_bytes_total);	// 初始化内存池
c00039d4:	83 ec 0c             	sub    $0xc,%esp
c00039d7:	ff 75 f4             	pushl  -0xc(%ebp)
c00039da:	e8 e1 fc ff ff       	call   c00036c0 <mem_pool_init>
c00039df:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:666
	block_desc_init(k_block_descs);	// 初始化mem_block_desc数组descs,为malloc做准备
c00039e2:	83 ec 0c             	sub    $0xc,%esp
c00039e5:	68 80 3b 01 c0       	push   $0xc0013b80
c00039ea:	e8 d0 fe ff ff       	call   c00038bf <block_desc_init>
c00039ef:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:667
	put_str("mem_init done\n");
c00039f2:	83 ec 0c             	sub    $0xc,%esp
c00039f5:	68 f3 d8 00 c0       	push   $0xc000d8f3
c00039fa:	e8 51 e9 ff ff       	call   c0002350 <put_str>
c00039ff:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:668
}
c0003a02:	90                   	nop
c0003a03:	c9                   	leave  
c0003a04:	c3                   	ret    

c0003a05 <memset>:
memset():
/work/x86_os_my/lib/string.c:6
#include "string.h"
//#include "global.h"
#include "assert.h"

/* 将dst_起始的size个字节置为value */
void memset(void* dst_, uint8_t value, uint32_t size) {
c0003a05:	55                   	push   %ebp
c0003a06:	89 e5                	mov    %esp,%ebp
c0003a08:	83 ec 28             	sub    $0x28,%esp
c0003a0b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003a0e:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/lib/string.c:7
   assert(dst_ != NULL);
c0003a11:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003a15:	75 19                	jne    c0003a30 <memset+0x2b>
/work/x86_os_my/lib/string.c:7 (discriminator 1)
c0003a17:	68 5c d9 00 c0       	push   $0xc000d95c
c0003a1c:	68 d0 d9 00 c0       	push   $0xc000d9d0
c0003a21:	6a 07                	push   $0x7
c0003a23:	68 69 d9 00 c0       	push   $0xc000d969
c0003a28:	e8 b9 86 00 00       	call   c000c0e6 <user_spin>
c0003a2d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:8
   uint8_t* dst = (uint8_t*)dst_;
c0003a30:	8b 45 08             	mov    0x8(%ebp),%eax
c0003a33:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:9
   while (size-- > 0)
c0003a36:	eb 0f                	jmp    c0003a47 <memset+0x42>
/work/x86_os_my/lib/string.c:10
      *dst++ = value;
c0003a38:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003a3b:	8d 50 01             	lea    0x1(%eax),%edx
c0003a3e:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0003a41:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c0003a45:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/string.c:9

/* 将dst_起始的size个字节置为value */
void memset(void* dst_, uint8_t value, uint32_t size) {
   assert(dst_ != NULL);
   uint8_t* dst = (uint8_t*)dst_;
   while (size-- > 0)
c0003a47:	8b 45 10             	mov    0x10(%ebp),%eax
c0003a4a:	8d 50 ff             	lea    -0x1(%eax),%edx
c0003a4d:	89 55 10             	mov    %edx,0x10(%ebp)
c0003a50:	85 c0                	test   %eax,%eax
c0003a52:	75 e4                	jne    c0003a38 <memset+0x33>
/work/x86_os_my/lib/string.c:11
      *dst++ = value;
}
c0003a54:	90                   	nop
c0003a55:	c9                   	leave  
c0003a56:	c3                   	ret    

c0003a57 <memcpy>:
memcpy():
/work/x86_os_my/lib/string.c:14

/* 将src_起始的size个字节复制到dst_ */
void memcpy(void* dst_, const void* src_, uint32_t size) {
c0003a57:	55                   	push   %ebp
c0003a58:	89 e5                	mov    %esp,%ebp
c0003a5a:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/string.c:15
   assert(dst_ != NULL && src_ != NULL);
c0003a5d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003a61:	74 06                	je     c0003a69 <memcpy+0x12>
/work/x86_os_my/lib/string.c:15 (discriminator 2)
c0003a63:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0003a67:	75 19                	jne    c0003a82 <memcpy+0x2b>
/work/x86_os_my/lib/string.c:15 (discriminator 3)
c0003a69:	68 76 d9 00 c0       	push   $0xc000d976
c0003a6e:	68 d8 d9 00 c0       	push   $0xc000d9d8
c0003a73:	6a 0f                	push   $0xf
c0003a75:	68 69 d9 00 c0       	push   $0xc000d969
c0003a7a:	e8 67 86 00 00       	call   c000c0e6 <user_spin>
c0003a7f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:16
   uint8_t* dst = dst_;
c0003a82:	8b 45 08             	mov    0x8(%ebp),%eax
c0003a85:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:17
   const uint8_t* src = src_;
c0003a88:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003a8b:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/string.c:18
   while (size-- > 0)
c0003a8e:	eb 17                	jmp    c0003aa7 <memcpy+0x50>
/work/x86_os_my/lib/string.c:19
      *dst++ = *src++;
c0003a90:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003a93:	8d 50 01             	lea    0x1(%eax),%edx
c0003a96:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0003a99:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0003a9c:	8d 4a 01             	lea    0x1(%edx),%ecx
c0003a9f:	89 4d f0             	mov    %ecx,-0x10(%ebp)
c0003aa2:	0f b6 12             	movzbl (%edx),%edx
c0003aa5:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/string.c:18
/* 将src_起始的size个字节复制到dst_ */
void memcpy(void* dst_, const void* src_, uint32_t size) {
   assert(dst_ != NULL && src_ != NULL);
   uint8_t* dst = dst_;
   const uint8_t* src = src_;
   while (size-- > 0)
c0003aa7:	8b 45 10             	mov    0x10(%ebp),%eax
c0003aaa:	8d 50 ff             	lea    -0x1(%eax),%edx
c0003aad:	89 55 10             	mov    %edx,0x10(%ebp)
c0003ab0:	85 c0                	test   %eax,%eax
c0003ab2:	75 dc                	jne    c0003a90 <memcpy+0x39>
/work/x86_os_my/lib/string.c:20
      *dst++ = *src++;
}
c0003ab4:	90                   	nop
c0003ab5:	c9                   	leave  
c0003ab6:	c3                   	ret    

c0003ab7 <memcmp>:
memcmp():
/work/x86_os_my/lib/string.c:23

/* 连续比较以地址a_和地址b_开头的size个字节,若相等则返回0,若a_大于b_返回+1,否则返回-1 */
int memcmp(const void* a_, const void* b_, uint32_t size) {
c0003ab7:	55                   	push   %ebp
c0003ab8:	89 e5                	mov    %esp,%ebp
c0003aba:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/string.c:24
   const char* a = a_;
c0003abd:	8b 45 08             	mov    0x8(%ebp),%eax
c0003ac0:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:25
   const char* b = b_;
c0003ac3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003ac6:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/string.c:26
   assert(a != NULL || b != NULL);
c0003ac9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0003acd:	75 57                	jne    c0003b26 <memcmp+0x6f>
/work/x86_os_my/lib/string.c:26 (discriminator 1)
c0003acf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0003ad3:	75 51                	jne    c0003b26 <memcmp+0x6f>
/work/x86_os_my/lib/string.c:26 (discriminator 2)
c0003ad5:	68 93 d9 00 c0       	push   $0xc000d993
c0003ada:	68 e0 d9 00 c0       	push   $0xc000d9e0
c0003adf:	6a 1a                	push   $0x1a
c0003ae1:	68 69 d9 00 c0       	push   $0xc000d969
c0003ae6:	e8 fb 85 00 00       	call   c000c0e6 <user_spin>
c0003aeb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:27 (discriminator 2)
   while (size-- > 0) {
c0003aee:	eb 36                	jmp    c0003b26 <memcmp+0x6f>
/work/x86_os_my/lib/string.c:28
      if(*a != *b) {
c0003af0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003af3:	0f b6 10             	movzbl (%eax),%edx
c0003af6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003af9:	0f b6 00             	movzbl (%eax),%eax
c0003afc:	38 c2                	cmp    %al,%dl
c0003afe:	74 1e                	je     c0003b1e <memcmp+0x67>
/work/x86_os_my/lib/string.c:29
	 return *a > *b ? 1 : -1; 
c0003b00:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003b03:	0f b6 10             	movzbl (%eax),%edx
c0003b06:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003b09:	0f b6 00             	movzbl (%eax),%eax
c0003b0c:	38 c2                	cmp    %al,%dl
c0003b0e:	7e 07                	jle    c0003b17 <memcmp+0x60>
/work/x86_os_my/lib/string.c:29 (discriminator 1)
c0003b10:	b8 01 00 00 00       	mov    $0x1,%eax
c0003b15:	eb 21                	jmp    c0003b38 <memcmp+0x81>
/work/x86_os_my/lib/string.c:29 (discriminator 2)
c0003b17:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0003b1c:	eb 1a                	jmp    c0003b38 <memcmp+0x81>
/work/x86_os_my/lib/string.c:31
      }
      a++;
c0003b1e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/lib/string.c:32
      b++;
c0003b22:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/lib/string.c:27
/* 连续比较以地址a_和地址b_开头的size个字节,若相等则返回0,若a_大于b_返回+1,否则返回-1 */
int memcmp(const void* a_, const void* b_, uint32_t size) {
   const char* a = a_;
   const char* b = b_;
   assert(a != NULL || b != NULL);
   while (size-- > 0) {
c0003b26:	8b 45 10             	mov    0x10(%ebp),%eax
c0003b29:	8d 50 ff             	lea    -0x1(%eax),%edx
c0003b2c:	89 55 10             	mov    %edx,0x10(%ebp)
c0003b2f:	85 c0                	test   %eax,%eax
c0003b31:	75 bd                	jne    c0003af0 <memcmp+0x39>
/work/x86_os_my/lib/string.c:34
	 return *a > *b ? 1 : -1; 
      }
      a++;
      b++;
   }
   return 0;
c0003b33:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/lib/string.c:35
}
c0003b38:	c9                   	leave  
c0003b39:	c3                   	ret    

c0003b3a <strcpy>:
strcpy():
/work/x86_os_my/lib/string.c:38

/* 将字符串从src_复制到dst_ */
char* strcpy(char* dst_, const char* src_) {
c0003b3a:	55                   	push   %ebp
c0003b3b:	89 e5                	mov    %esp,%ebp
c0003b3d:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/string.c:39
   assert(dst_ != NULL && src_ != NULL);
c0003b40:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003b44:	74 06                	je     c0003b4c <strcpy+0x12>
/work/x86_os_my/lib/string.c:39 (discriminator 2)
c0003b46:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0003b4a:	75 19                	jne    c0003b65 <strcpy+0x2b>
/work/x86_os_my/lib/string.c:39 (discriminator 3)
c0003b4c:	68 76 d9 00 c0       	push   $0xc000d976
c0003b51:	68 e8 d9 00 c0       	push   $0xc000d9e8
c0003b56:	6a 27                	push   $0x27
c0003b58:	68 69 d9 00 c0       	push   $0xc000d969
c0003b5d:	e8 84 85 00 00       	call   c000c0e6 <user_spin>
c0003b62:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:40
   char* r = dst_;		       // 用来返回目的字符串起始地址
c0003b65:	8b 45 08             	mov    0x8(%ebp),%eax
c0003b68:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:41
   while((*dst_++ = *src_++));
c0003b6b:	90                   	nop
/work/x86_os_my/lib/string.c:41 (discriminator 1)
c0003b6c:	8b 45 08             	mov    0x8(%ebp),%eax
c0003b6f:	8d 50 01             	lea    0x1(%eax),%edx
c0003b72:	89 55 08             	mov    %edx,0x8(%ebp)
c0003b75:	8b 55 0c             	mov    0xc(%ebp),%edx
c0003b78:	8d 4a 01             	lea    0x1(%edx),%ecx
c0003b7b:	89 4d 0c             	mov    %ecx,0xc(%ebp)
c0003b7e:	0f b6 12             	movzbl (%edx),%edx
c0003b81:	88 10                	mov    %dl,(%eax)
c0003b83:	0f b6 00             	movzbl (%eax),%eax
c0003b86:	84 c0                	test   %al,%al
c0003b88:	75 e2                	jne    c0003b6c <strcpy+0x32>
/work/x86_os_my/lib/string.c:42
   return r;
c0003b8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/lib/string.c:43
}
c0003b8d:	c9                   	leave  
c0003b8e:	c3                   	ret    

c0003b8f <strlen>:
strlen():
/work/x86_os_my/lib/string.c:46

/* 返回字符串长度 */
uint32_t strlen(const char* str) {
c0003b8f:	55                   	push   %ebp
c0003b90:	89 e5                	mov    %esp,%ebp
c0003b92:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/string.c:47
   assert(str != NULL);
c0003b95:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003b99:	75 19                	jne    c0003bb4 <strlen+0x25>
/work/x86_os_my/lib/string.c:47 (discriminator 1)
c0003b9b:	68 aa d9 00 c0       	push   $0xc000d9aa
c0003ba0:	68 f0 d9 00 c0       	push   $0xc000d9f0
c0003ba5:	6a 2f                	push   $0x2f
c0003ba7:	68 69 d9 00 c0       	push   $0xc000d969
c0003bac:	e8 35 85 00 00       	call   c000c0e6 <user_spin>
c0003bb1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:48
   const char* p = str;
c0003bb4:	8b 45 08             	mov    0x8(%ebp),%eax
c0003bb7:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:49
   while(*p++);
c0003bba:	90                   	nop
/work/x86_os_my/lib/string.c:49 (discriminator 1)
c0003bbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003bbe:	8d 50 01             	lea    0x1(%eax),%edx
c0003bc1:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0003bc4:	0f b6 00             	movzbl (%eax),%eax
c0003bc7:	84 c0                	test   %al,%al
c0003bc9:	75 f0                	jne    c0003bbb <strlen+0x2c>
/work/x86_os_my/lib/string.c:50
   return (p - str - 1);
c0003bcb:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0003bce:	8b 45 08             	mov    0x8(%ebp),%eax
c0003bd1:	29 c2                	sub    %eax,%edx
c0003bd3:	89 d0                	mov    %edx,%eax
c0003bd5:	83 e8 01             	sub    $0x1,%eax
/work/x86_os_my/lib/string.c:51
}
c0003bd8:	c9                   	leave  
c0003bd9:	c3                   	ret    

c0003bda <strcmp>:
strcmp():
/work/x86_os_my/lib/string.c:54

/* 比较两个字符串,若a_中的字符大于b_中的字符返回1,相等时返回0,否则返回-1. */
int8_t strcmp (const char* a, const char* b) {
c0003bda:	55                   	push   %ebp
c0003bdb:	89 e5                	mov    %esp,%ebp
c0003bdd:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/lib/string.c:55
   assert(a != NULL && b != NULL);
c0003be0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003be4:	74 06                	je     c0003bec <strcmp+0x12>
/work/x86_os_my/lib/string.c:55 (discriminator 2)
c0003be6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0003bea:	75 23                	jne    c0003c0f <strcmp+0x35>
/work/x86_os_my/lib/string.c:55 (discriminator 3)
c0003bec:	68 b6 d9 00 c0       	push   $0xc000d9b6
c0003bf1:	68 f8 d9 00 c0       	push   $0xc000d9f8
c0003bf6:	6a 37                	push   $0x37
c0003bf8:	68 69 d9 00 c0       	push   $0xc000d969
c0003bfd:	e8 e4 84 00 00       	call   c000c0e6 <user_spin>
c0003c02:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:56 (discriminator 3)
   while (*a != 0 && *a == *b) {
c0003c05:	eb 08                	jmp    c0003c0f <strcmp+0x35>
/work/x86_os_my/lib/string.c:57
      a++;
c0003c07:	83 45 08 01          	addl   $0x1,0x8(%ebp)
/work/x86_os_my/lib/string.c:58
      b++;
c0003c0b:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
/work/x86_os_my/lib/string.c:56
}

/* 比较两个字符串,若a_中的字符大于b_中的字符返回1,相等时返回0,否则返回-1. */
int8_t strcmp (const char* a, const char* b) {
   assert(a != NULL && b != NULL);
   while (*a != 0 && *a == *b) {
c0003c0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0003c12:	0f b6 00             	movzbl (%eax),%eax
c0003c15:	84 c0                	test   %al,%al
c0003c17:	74 10                	je     c0003c29 <strcmp+0x4f>
/work/x86_os_my/lib/string.c:56 (discriminator 1)
c0003c19:	8b 45 08             	mov    0x8(%ebp),%eax
c0003c1c:	0f b6 10             	movzbl (%eax),%edx
c0003c1f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003c22:	0f b6 00             	movzbl (%eax),%eax
c0003c25:	38 c2                	cmp    %al,%dl
c0003c27:	74 de                	je     c0003c07 <strcmp+0x2d>
/work/x86_os_my/lib/string.c:62
      a++;
      b++;
   }
/* 如果*a小于*b就返回-1,否则就属于*a大于等于*b的情况。在后面的布尔表达式"*a > *b"中,
 * 若*a大于*b,表达式就等于1,否则就表达式不成立,也就是布尔值为0,恰恰表示*a等于*b */
   return *a < *b ? -1 : *a > *b;
c0003c29:	8b 45 08             	mov    0x8(%ebp),%eax
c0003c2c:	0f b6 10             	movzbl (%eax),%edx
c0003c2f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003c32:	0f b6 00             	movzbl (%eax),%eax
c0003c35:	38 c2                	cmp    %al,%dl
c0003c37:	7c 13                	jl     c0003c4c <strcmp+0x72>
/work/x86_os_my/lib/string.c:62 (discriminator 1)
c0003c39:	8b 45 08             	mov    0x8(%ebp),%eax
c0003c3c:	0f b6 10             	movzbl (%eax),%edx
c0003c3f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003c42:	0f b6 00             	movzbl (%eax),%eax
c0003c45:	38 c2                	cmp    %al,%dl
c0003c47:	0f 9f c0             	setg   %al
c0003c4a:	eb 05                	jmp    c0003c51 <strcmp+0x77>
/work/x86_os_my/lib/string.c:62 (discriminator 2)
c0003c4c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
/work/x86_os_my/lib/string.c:63 (discriminator 5)
}
c0003c51:	c9                   	leave  
c0003c52:	c3                   	ret    

c0003c53 <strchr>:
strchr():
/work/x86_os_my/lib/string.c:66

/* 从左到右查找字符串str中首次出现字符ch的地址(不是下标,是地址) */
char* strchr(const char* str, const uint8_t ch) {
c0003c53:	55                   	push   %ebp
c0003c54:	89 e5                	mov    %esp,%ebp
c0003c56:	83 ec 18             	sub    $0x18,%esp
c0003c59:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003c5c:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/lib/string.c:67
   assert(str != NULL);
c0003c5f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003c63:	75 35                	jne    c0003c9a <strchr+0x47>
/work/x86_os_my/lib/string.c:67 (discriminator 1)
c0003c65:	68 aa d9 00 c0       	push   $0xc000d9aa
c0003c6a:	68 00 da 00 c0       	push   $0xc000da00
c0003c6f:	6a 43                	push   $0x43
c0003c71:	68 69 d9 00 c0       	push   $0xc000d969
c0003c76:	e8 6b 84 00 00       	call   c000c0e6 <user_spin>
c0003c7b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:68 (discriminator 1)
   while (*str != 0) {
c0003c7e:	eb 1a                	jmp    c0003c9a <strchr+0x47>
/work/x86_os_my/lib/string.c:69
      if (*str == ch) {
c0003c80:	8b 45 08             	mov    0x8(%ebp),%eax
c0003c83:	0f b6 00             	movzbl (%eax),%eax
c0003c86:	0f be d0             	movsbl %al,%edx
c0003c89:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0003c8d:	39 c2                	cmp    %eax,%edx
c0003c8f:	75 05                	jne    c0003c96 <strchr+0x43>
/work/x86_os_my/lib/string.c:70
	 return (char*)str;	    // 需要强制转化成和返回值类型一样,否则编译器会报const属性丢失,下同.
c0003c91:	8b 45 08             	mov    0x8(%ebp),%eax
c0003c94:	eb 13                	jmp    c0003ca9 <strchr+0x56>
/work/x86_os_my/lib/string.c:72
      }
      str++;
c0003c96:	83 45 08 01          	addl   $0x1,0x8(%ebp)
/work/x86_os_my/lib/string.c:68
}

/* 从左到右查找字符串str中首次出现字符ch的地址(不是下标,是地址) */
char* strchr(const char* str, const uint8_t ch) {
   assert(str != NULL);
   while (*str != 0) {
c0003c9a:	8b 45 08             	mov    0x8(%ebp),%eax
c0003c9d:	0f b6 00             	movzbl (%eax),%eax
c0003ca0:	84 c0                	test   %al,%al
c0003ca2:	75 dc                	jne    c0003c80 <strchr+0x2d>
/work/x86_os_my/lib/string.c:74
      if (*str == ch) {
	 return (char*)str;	    // 需要强制转化成和返回值类型一样,否则编译器会报const属性丢失,下同.
      }
      str++;
   }
   return NULL;
c0003ca4:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/lib/string.c:75
}
c0003ca9:	c9                   	leave  
c0003caa:	c3                   	ret    

c0003cab <strrchr>:
strrchr():
/work/x86_os_my/lib/string.c:78

/* 从后往前查找字符串str中首次出现字符ch的地址(不是下标,是地址) */
char* strrchr(const char* str, const uint8_t ch) {
c0003cab:	55                   	push   %ebp
c0003cac:	89 e5                	mov    %esp,%ebp
c0003cae:	83 ec 28             	sub    $0x28,%esp
c0003cb1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003cb4:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/lib/string.c:79
   assert(str != NULL);
c0003cb7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003cbb:	75 19                	jne    c0003cd6 <strrchr+0x2b>
/work/x86_os_my/lib/string.c:79 (discriminator 1)
c0003cbd:	68 aa d9 00 c0       	push   $0xc000d9aa
c0003cc2:	68 08 da 00 c0       	push   $0xc000da08
c0003cc7:	6a 4f                	push   $0x4f
c0003cc9:	68 69 d9 00 c0       	push   $0xc000d969
c0003cce:	e8 13 84 00 00       	call   c000c0e6 <user_spin>
c0003cd3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:80
   const char* last_char = NULL;
c0003cd6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/string.c:82
   /* 从头到尾遍历一次,若存在ch字符,last_char总是该字符最后一次出现在串中的地址(不是下标,是地址)*/
   while (*str != 0) {
c0003cdd:	eb 1b                	jmp    c0003cfa <strrchr+0x4f>
/work/x86_os_my/lib/string.c:83
      if (*str == ch) {
c0003cdf:	8b 45 08             	mov    0x8(%ebp),%eax
c0003ce2:	0f b6 00             	movzbl (%eax),%eax
c0003ce5:	0f be d0             	movsbl %al,%edx
c0003ce8:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0003cec:	39 c2                	cmp    %eax,%edx
c0003cee:	75 06                	jne    c0003cf6 <strrchr+0x4b>
/work/x86_os_my/lib/string.c:84
	 last_char = str;
c0003cf0:	8b 45 08             	mov    0x8(%ebp),%eax
c0003cf3:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:86
      }
      str++;
c0003cf6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
/work/x86_os_my/lib/string.c:82
/* 从后往前查找字符串str中首次出现字符ch的地址(不是下标,是地址) */
char* strrchr(const char* str, const uint8_t ch) {
   assert(str != NULL);
   const char* last_char = NULL;
   /* 从头到尾遍历一次,若存在ch字符,last_char总是该字符最后一次出现在串中的地址(不是下标,是地址)*/
   while (*str != 0) {
c0003cfa:	8b 45 08             	mov    0x8(%ebp),%eax
c0003cfd:	0f b6 00             	movzbl (%eax),%eax
c0003d00:	84 c0                	test   %al,%al
c0003d02:	75 db                	jne    c0003cdf <strrchr+0x34>
/work/x86_os_my/lib/string.c:88
      if (*str == ch) {
	 last_char = str;
      }
      str++;
   }
   return (char*)last_char;
c0003d04:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/lib/string.c:89
}
c0003d07:	c9                   	leave  
c0003d08:	c3                   	ret    

c0003d09 <strcat>:
strcat():
/work/x86_os_my/lib/string.c:92

/* 将字符串src_拼接到dst_后,将回拼接的串地址 */
char* strcat(char* dst_, const char* src_) {
c0003d09:	55                   	push   %ebp
c0003d0a:	89 e5                	mov    %esp,%ebp
c0003d0c:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/string.c:93
   assert(dst_ != NULL && src_ != NULL);
c0003d0f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003d13:	74 06                	je     c0003d1b <strcat+0x12>
/work/x86_os_my/lib/string.c:93 (discriminator 2)
c0003d15:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0003d19:	75 19                	jne    c0003d34 <strcat+0x2b>
/work/x86_os_my/lib/string.c:93 (discriminator 3)
c0003d1b:	68 76 d9 00 c0       	push   $0xc000d976
c0003d20:	68 10 da 00 c0       	push   $0xc000da10
c0003d25:	6a 5d                	push   $0x5d
c0003d27:	68 69 d9 00 c0       	push   $0xc000d969
c0003d2c:	e8 b5 83 00 00       	call   c000c0e6 <user_spin>
c0003d31:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:94
   char* str = dst_;
c0003d34:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d37:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:95
   while (*str++);
c0003d3a:	90                   	nop
/work/x86_os_my/lib/string.c:95 (discriminator 1)
c0003d3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003d3e:	8d 50 01             	lea    0x1(%eax),%edx
c0003d41:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0003d44:	0f b6 00             	movzbl (%eax),%eax
c0003d47:	84 c0                	test   %al,%al
c0003d49:	75 f0                	jne    c0003d3b <strcat+0x32>
/work/x86_os_my/lib/string.c:96
   --str;      // 别看错了，--str是独立的一句，并不是while的循环体
c0003d4b:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
/work/x86_os_my/lib/string.c:97
   while((*str++ = *src_++));	 // 当*str被赋值为0时,此时表达式不成立,正好添加了字符串结尾的0.
c0003d4f:	90                   	nop
/work/x86_os_my/lib/string.c:97 (discriminator 1)
c0003d50:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003d53:	8d 50 01             	lea    0x1(%eax),%edx
c0003d56:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0003d59:	8b 55 0c             	mov    0xc(%ebp),%edx
c0003d5c:	8d 4a 01             	lea    0x1(%edx),%ecx
c0003d5f:	89 4d 0c             	mov    %ecx,0xc(%ebp)
c0003d62:	0f b6 12             	movzbl (%edx),%edx
c0003d65:	88 10                	mov    %dl,(%eax)
c0003d67:	0f b6 00             	movzbl (%eax),%eax
c0003d6a:	84 c0                	test   %al,%al
c0003d6c:	75 e2                	jne    c0003d50 <strcat+0x47>
/work/x86_os_my/lib/string.c:98
   return dst_;
c0003d6e:	8b 45 08             	mov    0x8(%ebp),%eax
/work/x86_os_my/lib/string.c:99
}
c0003d71:	c9                   	leave  
c0003d72:	c3                   	ret    

c0003d73 <strchrs>:
strchrs():
/work/x86_os_my/lib/string.c:102

/* 在字符串str中查找指定字符ch出现的次数 */
uint32_t strchrs(const char* str, uint8_t ch) {
c0003d73:	55                   	push   %ebp
c0003d74:	89 e5                	mov    %esp,%ebp
c0003d76:	83 ec 28             	sub    $0x28,%esp
c0003d79:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003d7c:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/lib/string.c:103
   assert(str != NULL);
c0003d7f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003d83:	75 19                	jne    c0003d9e <strchrs+0x2b>
/work/x86_os_my/lib/string.c:103 (discriminator 1)
c0003d85:	68 aa d9 00 c0       	push   $0xc000d9aa
c0003d8a:	68 18 da 00 c0       	push   $0xc000da18
c0003d8f:	6a 67                	push   $0x67
c0003d91:	68 69 d9 00 c0       	push   $0xc000d969
c0003d96:	e8 4b 83 00 00       	call   c000c0e6 <user_spin>
c0003d9b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:104
   uint32_t ch_cnt = 0;
c0003d9e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/string.c:105
   const char* p = str;
c0003da5:	8b 45 08             	mov    0x8(%ebp),%eax
c0003da8:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/string.c:106
   while(*p != 0) {
c0003dab:	eb 19                	jmp    c0003dc6 <strchrs+0x53>
/work/x86_os_my/lib/string.c:107
      if (*p == ch) {
c0003dad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003db0:	0f b6 00             	movzbl (%eax),%eax
c0003db3:	0f be d0             	movsbl %al,%edx
c0003db6:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0003dba:	39 c2                	cmp    %eax,%edx
c0003dbc:	75 04                	jne    c0003dc2 <strchrs+0x4f>
/work/x86_os_my/lib/string.c:108
	 ch_cnt++;
c0003dbe:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/lib/string.c:110
      }
      p++;
c0003dc2:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/lib/string.c:106
/* 在字符串str中查找指定字符ch出现的次数 */
uint32_t strchrs(const char* str, uint8_t ch) {
   assert(str != NULL);
   uint32_t ch_cnt = 0;
   const char* p = str;
   while(*p != 0) {
c0003dc6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003dc9:	0f b6 00             	movzbl (%eax),%eax
c0003dcc:	84 c0                	test   %al,%al
c0003dce:	75 dd                	jne    c0003dad <strchrs+0x3a>
/work/x86_os_my/lib/string.c:112
      if (*p == ch) {
	 ch_cnt++;
      }
      p++;
   }
   return ch_cnt;
c0003dd0:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/lib/string.c:113
}
c0003dd3:	c9                   	leave  
c0003dd4:	c3                   	ret    

c0003dd5 <idle>:
idle():
/work/x86_os_my/thread/thread.c:36

extern void switch_to(struct task_struct* cur, struct task_struct* next);
extern void init(void);

/* idle线程 */
static void idle(void* arg UNUSED) {
c0003dd5:	55                   	push   %ebp
c0003dd6:	89 e5                	mov    %esp,%ebp
c0003dd8:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:38 (discriminator 1)
	while(1) {
		thread_block(TASK_BLOCKED);
c0003ddb:	83 ec 0c             	sub    $0xc,%esp
c0003dde:	6a 02                	push   $0x2
c0003de0:	e8 67 05 00 00       	call   c000434c <thread_block>
c0003de5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:42 (discriminator 1)
		//CPU停机
		//唯一能唤醒处理器的就是外部中断
		//执行hlt时必须要保证目前处在开中断的情况下
		asm volatile ("sti; hlt" : : : "memory");
c0003de8:	fb                   	sti    
c0003de9:	f4                   	hlt    
/work/x86_os_my/thread/thread.c:43 (discriminator 1)
	}
c0003dea:	eb ef                	jmp    c0003ddb <idle+0x6>

c0003dec <running_thread>:
running_thread():
/work/x86_os_my/thread/thread.c:50

/* 返回线程 PCB 地址。
 * 各个线程所用的 0 级栈都是在自己的 PCB 当中，
 * 取当前栈指针的高 20 位，就是当前运行线程的 PCB（PCB是在自然页的起始地址！）
 */
struct task_struct* running_thread() {
c0003dec:	55                   	push   %ebp
c0003ded:	89 e5                	mov    %esp,%ebp
c0003def:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/thread/thread.c:52
	uint32_t esp;
	asm ("mov %%esp, %0" : "=g" (esp));	//esp寄存器的值，放入变量esp
c0003df2:	89 e0                	mov    %esp,%eax
c0003df4:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/thread/thread.c:53
	return (struct task_struct*)(esp & 0xfffff000);
c0003df7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003dfa:	25 00 f0 ff ff       	and    $0xfffff000,%eax
/work/x86_os_my/thread/thread.c:54
}
c0003dff:	c9                   	leave  
c0003e00:	c3                   	ret    

c0003e01 <kernel_thread>:
kernel_thread():
/work/x86_os_my/thread/thread.c:57

/* 由kernel_thread去执行function(func_arg) */
static void kernel_thread(thread_func* function, void* func_arg) {
c0003e01:	55                   	push   %ebp
c0003e02:	89 e5                	mov    %esp,%ebp
c0003e04:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:63
	/* 线程的首次运行是由时钟中断处理函数调用任务调度器 schedule 完成的，
	 * 进入中断后处理器会自动关中断，
	 * 因此在执行 function 前要打开中断，否则 kernel_thread 中的 function 在关中断的情况下运行，
	 * 也就是时钟中断被屏蔽了，再也不会调度到新的线程，function 会独享处理器。
	 */
	intr_enable();
c0003e07:	e8 e4 dc ff ff       	call   c0001af0 <intr_enable>
/work/x86_os_my/thread/thread.c:64
	function(func_arg); 
c0003e0c:	83 ec 0c             	sub    $0xc,%esp
c0003e0f:	ff 75 0c             	pushl  0xc(%ebp)
c0003e12:	8b 45 08             	mov    0x8(%ebp),%eax
c0003e15:	ff d0                	call   *%eax
c0003e17:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:65
}
c0003e1a:	90                   	nop
c0003e1b:	c9                   	leave  
c0003e1c:	c3                   	ret    

c0003e1d <pid_pool_init>:
pid_pool_init():
/work/x86_os_my/thread/thread.c:68

/* 初始化pid池 */
static void pid_pool_init(void) { 
c0003e1d:	55                   	push   %ebp
c0003e1e:	89 e5                	mov    %esp,%ebp
c0003e20:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:69
	pid_pool.pid_start = 1;
c0003e23:	c7 05 88 3c 01 c0 01 	movl   $0x1,0xc0013c88
c0003e2a:	00 00 00 
/work/x86_os_my/thread/thread.c:70
	pid_pool.pid_bitmap.bits = pid_bitmap_bits;
c0003e2d:	c7 05 84 3c 01 c0 80 	movl   $0xc0012f80,0xc0013c84
c0003e34:	2f 01 c0 
/work/x86_os_my/thread/thread.c:71
	pid_pool.pid_bitmap.btmp_bytes_len = 128;
c0003e37:	c7 05 80 3c 01 c0 80 	movl   $0x80,0xc0013c80
c0003e3e:	00 00 00 
/work/x86_os_my/thread/thread.c:72
	bitmap_init(&pid_pool.pid_bitmap);
c0003e41:	83 ec 0c             	sub    $0xc,%esp
c0003e44:	68 80 3c 01 c0       	push   $0xc0013c80
c0003e49:	e8 89 e7 ff ff       	call   c00025d7 <bitmap_init>
c0003e4e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:73
	lock_init(&pid_pool.pid_lock);
c0003e51:	83 ec 0c             	sub    $0xc,%esp
c0003e54:	68 8c 3c 01 c0       	push   $0xc0013c8c
c0003e59:	e8 67 0e 00 00       	call   c0004cc5 <lock_init>
c0003e5e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:74
}
c0003e61:	90                   	nop
c0003e62:	c9                   	leave  
c0003e63:	c3                   	ret    

c0003e64 <allocate_pid>:
allocate_pid():
/work/x86_os_my/thread/thread.c:77

/* 分配pid */
static pid_t allocate_pid(void) {
c0003e64:	55                   	push   %ebp
c0003e65:	89 e5                	mov    %esp,%ebp
c0003e67:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:78
	lock_acquire(&pid_pool.pid_lock);
c0003e6a:	83 ec 0c             	sub    $0xc,%esp
c0003e6d:	68 8c 3c 01 c0       	push   $0xc0013c8c
c0003e72:	e8 28 10 00 00       	call   c0004e9f <lock_acquire>
c0003e77:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:79
	int32_t bit_idx = bitmap_scan(&pid_pool.pid_bitmap, 1);
c0003e7a:	83 ec 08             	sub    $0x8,%esp
c0003e7d:	6a 01                	push   $0x1
c0003e7f:	68 80 3c 01 c0       	push   $0xc0013c80
c0003e84:	e8 b1 e7 ff ff       	call   c000263a <bitmap_scan>
c0003e89:	83 c4 10             	add    $0x10,%esp
c0003e8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:80
	bitmap_set(&pid_pool.pid_bitmap, bit_idx, 1);
c0003e8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003e92:	83 ec 04             	sub    $0x4,%esp
c0003e95:	6a 01                	push   $0x1
c0003e97:	50                   	push   %eax
c0003e98:	68 80 3c 01 c0       	push   $0xc0013c80
c0003e9d:	e8 cd e8 ff ff       	call   c000276f <bitmap_set>
c0003ea2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:81
	lock_release(&pid_pool.pid_lock);
c0003ea5:	83 ec 0c             	sub    $0xc,%esp
c0003ea8:	68 8c 3c 01 c0       	push   $0xc0013c8c
c0003ead:	e8 64 10 00 00       	call   c0004f16 <lock_release>
c0003eb2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:82
	return (bit_idx + pid_pool.pid_start);
c0003eb5:	a1 88 3c 01 c0       	mov    0xc0013c88,%eax
c0003eba:	89 c2                	mov    %eax,%edx
c0003ebc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003ebf:	01 d0                	add    %edx,%eax
/work/x86_os_my/thread/thread.c:83
}
c0003ec1:	c9                   	leave  
c0003ec2:	c3                   	ret    

c0003ec3 <release_pid>:
release_pid():
/work/x86_os_my/thread/thread.c:86

/* 释放pid */
void release_pid(pid_t pid) {
c0003ec3:	55                   	push   %ebp
c0003ec4:	89 e5                	mov    %esp,%ebp
c0003ec6:	83 ec 28             	sub    $0x28,%esp
c0003ec9:	8b 45 08             	mov    0x8(%ebp),%eax
c0003ecc:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
/work/x86_os_my/thread/thread.c:87
	lock_acquire(&pid_pool.pid_lock);
c0003ed0:	83 ec 0c             	sub    $0xc,%esp
c0003ed3:	68 8c 3c 01 c0       	push   $0xc0013c8c
c0003ed8:	e8 c2 0f 00 00       	call   c0004e9f <lock_acquire>
c0003edd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:88
	int32_t bit_idx = pid - pid_pool.pid_start;
c0003ee0:	0f bf 55 e4          	movswl -0x1c(%ebp),%edx
c0003ee4:	a1 88 3c 01 c0       	mov    0xc0013c88,%eax
c0003ee9:	29 c2                	sub    %eax,%edx
c0003eeb:	89 d0                	mov    %edx,%eax
c0003eed:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:89
	bitmap_set(&pid_pool.pid_bitmap, bit_idx, 0);
c0003ef0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003ef3:	83 ec 04             	sub    $0x4,%esp
c0003ef6:	6a 00                	push   $0x0
c0003ef8:	50                   	push   %eax
c0003ef9:	68 80 3c 01 c0       	push   $0xc0013c80
c0003efe:	e8 6c e8 ff ff       	call   c000276f <bitmap_set>
c0003f03:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:90
	lock_release(&pid_pool.pid_lock);
c0003f06:	83 ec 0c             	sub    $0xc,%esp
c0003f09:	68 8c 3c 01 c0       	push   $0xc0013c8c
c0003f0e:	e8 03 10 00 00       	call   c0004f16 <lock_release>
c0003f13:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:91
}
c0003f16:	90                   	nop
c0003f17:	c9                   	leave  
c0003f18:	c3                   	ret    

c0003f19 <fork_pid>:
fork_pid():
/work/x86_os_my/thread/thread.c:94

/* fork进程时为其分配pid，只是再封装一次 allocate_pid */
pid_t fork_pid(void) {
c0003f19:	55                   	push   %ebp
c0003f1a:	89 e5                	mov    %esp,%ebp
c0003f1c:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:95
	return allocate_pid();
c0003f1f:	e8 40 ff ff ff       	call   c0003e64 <allocate_pid>
/work/x86_os_my/thread/thread.c:96
}
c0003f24:	c9                   	leave  
c0003f25:	c3                   	ret    

c0003f26 <thread_create>:
thread_create():
/work/x86_os_my/thread/thread.c:99

/* 初始化线程栈结构体 struct thread_stack */
void thread_create(struct task_struct* pthread, thread_func function, void* func_arg) {
c0003f26:	55                   	push   %ebp
c0003f27:	89 e5                	mov    %esp,%ebp
c0003f29:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/thread/thread.c:103
	/* 先预留中断使用栈的空间 
	 *（1）将来线程进入中断后，位于 kernel.S 中的中断代码会通过此栈来保存上下文。
	 *（2）将来实现用户进程时，会将用户进程的初始信息放在中断栈中。*/
	pthread->self_kstack -= sizeof(struct intr_stack);
c0003f2c:	8b 45 08             	mov    0x8(%ebp),%eax
c0003f2f:	8b 00                	mov    (%eax),%eax
c0003f31:	8d 90 d0 fe ff ff    	lea    -0x130(%eax),%edx
c0003f37:	8b 45 08             	mov    0x8(%ebp),%eax
c0003f3a:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/thread/thread.c:106

	/* 再留出线程栈空间（unused_retaddr 所在的栈）*/
	pthread->self_kstack -= sizeof(struct thread_stack);
c0003f3c:	8b 45 08             	mov    0x8(%ebp),%eax
c0003f3f:	8b 00                	mov    (%eax),%eax
c0003f41:	8d 50 80             	lea    -0x80(%eax),%edx
c0003f44:	8b 45 08             	mov    0x8(%ebp),%eax
c0003f47:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/thread/thread.c:107
	struct thread_stack* kthread_stack = (struct thread_stack*)pthread->self_kstack;
c0003f49:	8b 45 08             	mov    0x8(%ebp),%eax
c0003f4c:	8b 00                	mov    (%eax),%eax
c0003f4e:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/thread/thread.c:115
	 * kernel_thread 并不是通过 call 指令调用的，而是通过 ret 来执行的，
	 * 因此无法按照正常的函数调用形式传递 kernel_thread 所需要的参数，
	 * 这样调用是不行的： kernel_thread(function, func_arg)，
	 * 只能将参数放在 kernel_thread 所用的栈中，即处理器进入 kernel_thread 函数体时，
	 * 栈顶为返回地址，栈顶+4 为参数function，栈顶+8 为参数func_arg */
	kthread_stack->eip = kernel_thread;
c0003f51:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003f54:	c7 40 10 01 3e 00 c0 	movl   $0xc0003e01,0x10(%eax)
/work/x86_os_my/thread/thread.c:116
	kthread_stack->function = function;
c0003f5b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003f5e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0003f61:	89 50 18             	mov    %edx,0x18(%eax)
/work/x86_os_my/thread/thread.c:117
	kthread_stack->func_arg = func_arg;
c0003f64:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003f67:	8b 55 10             	mov    0x10(%ebp),%edx
c0003f6a:	89 50 1c             	mov    %edx,0x1c(%eax)
/work/x86_os_my/thread/thread.c:118
	kthread_stack->ebp = kthread_stack->ebx = kthread_stack->esi = kthread_stack->edi = 0;
c0003f6d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003f70:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0003f77:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003f7a:	8b 50 08             	mov    0x8(%eax),%edx
c0003f7d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003f80:	89 50 0c             	mov    %edx,0xc(%eax)
c0003f83:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003f86:	8b 50 0c             	mov    0xc(%eax),%edx
c0003f89:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003f8c:	89 50 04             	mov    %edx,0x4(%eax)
c0003f8f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003f92:	8b 50 04             	mov    0x4(%eax),%edx
c0003f95:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003f98:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/thread/thread.c:119
}
c0003f9a:	90                   	nop
c0003f9b:	c9                   	leave  
c0003f9c:	c3                   	ret    

c0003f9d <init_thread>:
init_thread():
/work/x86_os_my/thread/thread.c:122

/* 初始化线程PCB结构体 struct task_struct */
void init_thread(struct task_struct* pthread, char* name, int prio) {
c0003f9d:	55                   	push   %ebp
c0003f9e:	89 e5                	mov    %esp,%ebp
c0003fa0:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:123
	memset(pthread, 0, sizeof(*pthread));	//清空PCB
c0003fa3:	83 ec 04             	sub    $0x4,%esp
c0003fa6:	68 18 01 00 00       	push   $0x118
c0003fab:	6a 00                	push   $0x0
c0003fad:	ff 75 08             	pushl  0x8(%ebp)
c0003fb0:	e8 50 fa ff ff       	call   c0003a05 <memset>
c0003fb5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:124
	pthread->pid = allocate_pid();
c0003fb8:	e8 a7 fe ff ff       	call   c0003e64 <allocate_pid>
c0003fbd:	89 c2                	mov    %eax,%edx
c0003fbf:	8b 45 08             	mov    0x8(%ebp),%eax
c0003fc2:	66 89 50 04          	mov    %dx,0x4(%eax)
/work/x86_os_my/thread/thread.c:125
	strcpy(pthread->name, name);
c0003fc6:	8b 45 08             	mov    0x8(%ebp),%eax
c0003fc9:	83 c0 0c             	add    $0xc,%eax
c0003fcc:	83 ec 08             	sub    $0x8,%esp
c0003fcf:	ff 75 0c             	pushl  0xc(%ebp)
c0003fd2:	50                   	push   %eax
c0003fd3:	e8 62 fb ff ff       	call   c0003b3a <strcpy>
c0003fd8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:127

	if (pthread == g_main_thread) {
c0003fdb:	a1 cc 3c 01 c0       	mov    0xc0013ccc,%eax
c0003fe0:	39 45 08             	cmp    %eax,0x8(%ebp)
c0003fe3:	75 0c                	jne    c0003ff1 <init_thread+0x54>
/work/x86_os_my/thread/thread.c:129
		/* 由于把main函数也封装成一个线程,并且它一直是运行的,故将其直接设为TASK_RUNNING */
		pthread->status = TASK_RUNNING;
c0003fe5:	8b 45 08             	mov    0x8(%ebp),%eax
c0003fe8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0003fef:	eb 0a                	jmp    c0003ffb <init_thread+0x5e>
/work/x86_os_my/thread/thread.c:131
	} else {
		pthread->status = TASK_READY;
c0003ff1:	8b 45 08             	mov    0x8(%ebp),%eax
c0003ff4:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/thread/thread.c:137
	}

	/* self_kstack是线程自己在内核态下使用的栈顶地址 
	 * 线程自己在 0 特权级下所用的栈，在线程创建之初，
	 * 它被初始化为线程 PCB 的最顶端，即(uint32_t)pthread + PG_SIZE。*/
	pthread->self_kstack = (uint32_t*)((uint32_t)pthread + PG_SIZE);
c0003ffb:	8b 45 08             	mov    0x8(%ebp),%eax
c0003ffe:	05 00 10 00 00       	add    $0x1000,%eax
c0004003:	89 c2                	mov    %eax,%edx
c0004005:	8b 45 08             	mov    0x8(%ebp),%eax
c0004008:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/thread/thread.c:138
	pthread->priority = prio;
c000400a:	8b 45 10             	mov    0x10(%ebp),%eax
c000400d:	89 c2                	mov    %eax,%edx
c000400f:	8b 45 08             	mov    0x8(%ebp),%eax
c0004012:	88 50 1c             	mov    %dl,0x1c(%eax)
/work/x86_os_my/thread/thread.c:139
	pthread->ticks = prio;
c0004015:	8b 45 10             	mov    0x10(%ebp),%eax
c0004018:	89 c2                	mov    %eax,%edx
c000401a:	8b 45 08             	mov    0x8(%ebp),%eax
c000401d:	88 50 1d             	mov    %dl,0x1d(%eax)
/work/x86_os_my/thread/thread.c:140
	pthread->elapsed_ticks = 0;
c0004020:	8b 45 08             	mov    0x8(%ebp),%eax
c0004023:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
/work/x86_os_my/thread/thread.c:141
	pthread->pgdir = NULL;
c000402a:	8b 45 08             	mov    0x8(%ebp),%eax
c000402d:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
/work/x86_os_my/thread/thread.c:144

	/* 预留标准输入输出 */
	pthread->fd_table[0] = 0;
c0004034:	8b 45 08             	mov    0x8(%ebp),%eax
c0004037:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
/work/x86_os_my/thread/thread.c:145
	pthread->fd_table[1] = 1;
c000403e:	8b 45 08             	mov    0x8(%ebp),%eax
c0004041:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
/work/x86_os_my/thread/thread.c:146
	pthread->fd_table[2] = 2;
c0004048:	8b 45 08             	mov    0x8(%ebp),%eax
c000404b:	c7 40 2c 02 00 00 00 	movl   $0x2,0x2c(%eax)
/work/x86_os_my/thread/thread.c:148
	/* 其余的全置为-1 */
	uint8_t fd_idx = 3;
c0004052:	c6 45 f7 03          	movb   $0x3,-0x9(%ebp)
/work/x86_os_my/thread/thread.c:149
	while (fd_idx < MAX_FILES_OPEN_PER_PROC) {
c0004056:	eb 1c                	jmp    c0004074 <init_thread+0xd7>
/work/x86_os_my/thread/thread.c:150
		pthread->fd_table[fd_idx] = -1;
c0004058:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c000405c:	8b 45 08             	mov    0x8(%ebp),%eax
c000405f:	83 c2 08             	add    $0x8,%edx
c0004062:	c7 44 90 04 ff ff ff 	movl   $0xffffffff,0x4(%eax,%edx,4)
c0004069:	ff 
/work/x86_os_my/thread/thread.c:151
		fd_idx++;
c000406a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000406e:	83 c0 01             	add    $0x1,%eax
c0004071:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/thread/thread.c:149
	pthread->fd_table[0] = 0;
	pthread->fd_table[1] = 1;
	pthread->fd_table[2] = 2;
	/* 其余的全置为-1 */
	uint8_t fd_idx = 3;
	while (fd_idx < MAX_FILES_OPEN_PER_PROC) {
c0004074:	80 7d f7 07          	cmpb   $0x7,-0x9(%ebp)
c0004078:	76 de                	jbe    c0004058 <init_thread+0xbb>
/work/x86_os_my/thread/thread.c:154
		pthread->fd_table[fd_idx] = -1;
		fd_idx++;
	}

	pthread->cwd_inode_nr = 0;			// 以根目录做为默认工作路径
c000407a:	8b 45 08             	mov    0x8(%ebp),%eax
c000407d:	c7 80 0c 01 00 00 00 	movl   $0x0,0x10c(%eax)
c0004084:	00 00 00 
/work/x86_os_my/thread/thread.c:155
	pthread->parent_pid = -1;			// -1表示没有父进程
c0004087:	8b 45 08             	mov    0x8(%ebp),%eax
c000408a:	66 c7 80 10 01 00 00 	movw   $0xffff,0x110(%eax)
c0004091:	ff ff 
/work/x86_os_my/thread/thread.c:156
	pthread->stack_magic = 0x19870916;	// 自定义的魔数
c0004093:	8b 45 08             	mov    0x8(%ebp),%eax
c0004096:	c7 80 14 01 00 00 16 	movl   $0x19870916,0x114(%eax)
c000409d:	09 87 19 
/work/x86_os_my/thread/thread.c:157
}
c00040a0:	90                   	nop
c00040a1:	c9                   	leave  
c00040a2:	c3                   	ret    

c00040a3 <thread_start>:
thread_start():
/work/x86_os_my/thread/thread.c:160

/* 创建线程 */
struct task_struct* thread_start(char* name, int prio, thread_func function, void* func_arg) {
c00040a3:	55                   	push   %ebp
c00040a4:	89 e5                	mov    %esp,%ebp
c00040a6:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:162
	/* pcb都位于内核空间,包括用户进程的pcb也是在内核空间 */
	struct task_struct* thread = get_kernel_pages(1);
c00040a9:	83 ec 0c             	sub    $0xc,%esp
c00040ac:	6a 01                	push   $0x1
c00040ae:	e8 f6 ea ff ff       	call   c0002ba9 <get_kernel_pages>
c00040b3:	83 c4 10             	add    $0x10,%esp
c00040b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:164

	init_thread(thread, name, prio);			//初始化线程PCB
c00040b9:	83 ec 04             	sub    $0x4,%esp
c00040bc:	ff 75 0c             	pushl  0xc(%ebp)
c00040bf:	ff 75 08             	pushl  0x8(%ebp)
c00040c2:	ff 75 f4             	pushl  -0xc(%ebp)
c00040c5:	e8 d3 fe ff ff       	call   c0003f9d <init_thread>
c00040ca:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:165
	thread_create(thread, function, func_arg);	//初始化线程栈结构体
c00040cd:	83 ec 04             	sub    $0x4,%esp
c00040d0:	ff 75 14             	pushl  0x14(%ebp)
c00040d3:	ff 75 10             	pushl  0x10(%ebp)
c00040d6:	ff 75 f4             	pushl  -0xc(%ebp)
c00040d9:	e8 48 fe ff ff       	call   c0003f26 <thread_create>
c00040de:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:167
	
	ASSERT(!elem_find(&thread_ready_list, &thread->general_tag));	// 确保之前不在队列中
c00040e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00040e4:	83 c0 44             	add    $0x44,%eax
c00040e7:	83 ec 08             	sub    $0x8,%esp
c00040ea:	50                   	push   %eax
c00040eb:	68 a8 3c 01 c0       	push   $0xc0013ca8
c00040f0:	e8 ef 09 00 00       	call   c0004ae4 <elem_find>
c00040f5:	83 c4 10             	add    $0x10,%esp
c00040f8:	85 c0                	test   %eax,%eax
c00040fa:	74 1c                	je     c0004118 <thread_start+0x75>
/work/x86_os_my/thread/thread.c:167 (discriminator 1)
c00040fc:	68 20 da 00 c0       	push   $0xc000da20
c0004101:	68 80 dd 00 c0       	push   $0xc000dd80
c0004106:	68 a7 00 00 00       	push   $0xa7
c000410b:	68 55 da 00 c0       	push   $0xc000da55
c0004110:	e8 ec e3 ff ff       	call   c0002501 <panic_spin>
c0004115:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:168
	list_append(&thread_ready_list, &thread->general_tag);			// 加入就绪线程队列
c0004118:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000411b:	83 c0 44             	add    $0x44,%eax
c000411e:	83 ec 08             	sub    $0x8,%esp
c0004121:	50                   	push   %eax
c0004122:	68 a8 3c 01 c0       	push   $0xc0013ca8
c0004127:	e8 3e 09 00 00       	call   c0004a6a <list_append>
c000412c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:170

	ASSERT(!elem_find(&thread_all_list, &thread->all_list_tag));
c000412f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004132:	83 c0 4c             	add    $0x4c,%eax
c0004135:	83 ec 08             	sub    $0x8,%esp
c0004138:	50                   	push   %eax
c0004139:	68 b8 3c 01 c0       	push   $0xc0013cb8
c000413e:	e8 a1 09 00 00       	call   c0004ae4 <elem_find>
c0004143:	83 c4 10             	add    $0x10,%esp
c0004146:	85 c0                	test   %eax,%eax
c0004148:	74 1c                	je     c0004166 <thread_start+0xc3>
/work/x86_os_my/thread/thread.c:170 (discriminator 1)
c000414a:	68 68 da 00 c0       	push   $0xc000da68
c000414f:	68 80 dd 00 c0       	push   $0xc000dd80
c0004154:	68 aa 00 00 00       	push   $0xaa
c0004159:	68 55 da 00 c0       	push   $0xc000da55
c000415e:	e8 9e e3 ff ff       	call   c0002501 <panic_spin>
c0004163:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:171
	list_append(&thread_all_list, &thread->all_list_tag);			// 加入全部线程队列
c0004166:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004169:	83 c0 4c             	add    $0x4c,%eax
c000416c:	83 ec 08             	sub    $0x8,%esp
c000416f:	50                   	push   %eax
c0004170:	68 b8 3c 01 c0       	push   $0xc0013cb8
c0004175:	e8 f0 08 00 00       	call   c0004a6a <list_append>
c000417a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:187
	 * 在执行 ret 后，esp 指向的数值被弹岀到 eip。
	 * 处理器会去执行 kernel_thread 函数。
	 * 在执行 kernel_thread 时，处理器以为栈顶是返回地址，其实只是一个假的占位置的变量 unused_retaddr！
	 * 接着会调用函数 function(func_arg) */
	//asm volatile ("movl %0, %%esp; pop %%ebp; pop %%ebx; pop %%edi; pop %%esi; ret" : : "g" (thread->self_kstack) : "memory");
	return thread;
c000417d:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/thread/thread.c:188
}
c0004180:	c9                   	leave  
c0004181:	c3                   	ret    

c0004182 <make_main_thread>:
make_main_thread():
/work/x86_os_my/thread/thread.c:192


/* 将kernel中的main函数完善为主线程 */
static void make_main_thread(void) {
c0004182:	55                   	push   %ebp
c0004183:	89 e5                	mov    %esp,%ebp
c0004185:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:197
	/* 因为main线程早已运行,咱们在loader.S中进入内核时的mov esp, 0xc009f000设置了栈顶，也预留了pcb, 地址为0xc009e000
	 * 主线程不需要再为PCB申请页，只需要通过 init_thread 填充PCB成员：名称和优先级等。
	 * 也不需要再通过 thread_create 构造它的线程栈。
	 */
	g_main_thread = running_thread();	//用栈指针的高20位，当做当前线程的PCB
c0004188:	e8 5f fc ff ff       	call   c0003dec <running_thread>
c000418d:	a3 cc 3c 01 c0       	mov    %eax,0xc0013ccc
/work/x86_os_my/thread/thread.c:198
	init_thread(g_main_thread, "main", 31);
c0004192:	a1 cc 3c 01 c0       	mov    0xc0013ccc,%eax
c0004197:	83 ec 04             	sub    $0x4,%esp
c000419a:	6a 1f                	push   $0x1f
c000419c:	68 9c da 00 c0       	push   $0xc000da9c
c00041a1:	50                   	push   %eax
c00041a2:	e8 f6 fd ff ff       	call   c0003f9d <init_thread>
c00041a7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:202

	/* main函数是当前线程,当前线程不在thread_ready_list中,
	 * 所以只将其加在thread_all_list中. */
	ASSERT(!elem_find(&thread_all_list, &g_main_thread->all_list_tag));
c00041aa:	a1 cc 3c 01 c0       	mov    0xc0013ccc,%eax
c00041af:	83 c0 4c             	add    $0x4c,%eax
c00041b2:	83 ec 08             	sub    $0x8,%esp
c00041b5:	50                   	push   %eax
c00041b6:	68 b8 3c 01 c0       	push   $0xc0013cb8
c00041bb:	e8 24 09 00 00       	call   c0004ae4 <elem_find>
c00041c0:	83 c4 10             	add    $0x10,%esp
c00041c3:	85 c0                	test   %eax,%eax
c00041c5:	74 1c                	je     c00041e3 <make_main_thread+0x61>
/work/x86_os_my/thread/thread.c:202 (discriminator 1)
c00041c7:	68 a4 da 00 c0       	push   $0xc000daa4
c00041cc:	68 90 dd 00 c0       	push   $0xc000dd90
c00041d1:	68 ca 00 00 00       	push   $0xca
c00041d6:	68 55 da 00 c0       	push   $0xc000da55
c00041db:	e8 21 e3 ff ff       	call   c0002501 <panic_spin>
c00041e0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:203
	list_append(&thread_all_list, &g_main_thread->all_list_tag);
c00041e3:	a1 cc 3c 01 c0       	mov    0xc0013ccc,%eax
c00041e8:	83 c0 4c             	add    $0x4c,%eax
c00041eb:	83 ec 08             	sub    $0x8,%esp
c00041ee:	50                   	push   %eax
c00041ef:	68 b8 3c 01 c0       	push   $0xc0013cb8
c00041f4:	e8 71 08 00 00       	call   c0004a6a <list_append>
c00041f9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:204
}
c00041fc:	90                   	nop
c00041fd:	c9                   	leave  
c00041fe:	c3                   	ret    

c00041ff <schedule>:
schedule():
/work/x86_os_my/thread/thread.c:214
（2）调度器 schedule。
（3）任务切换函数 switch_to。
*/
/* 实现任务调度 */
void schedule()
{
c00041ff:	55                   	push   %ebp
c0004200:	89 e5                	mov    %esp,%ebp
c0004202:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:215
	ASSERT(intr_get_status() == INTR_OFF);
c0004205:	e8 56 d9 ff ff       	call   c0001b60 <intr_get_status>
c000420a:	85 c0                	test   %eax,%eax
c000420c:	74 1c                	je     c000422a <schedule+0x2b>
/work/x86_os_my/thread/thread.c:215 (discriminator 1)
c000420e:	68 df da 00 c0       	push   $0xc000dadf
c0004213:	68 a4 dd 00 c0       	push   $0xc000dda4
c0004218:	68 d7 00 00 00       	push   $0xd7
c000421d:	68 55 da 00 c0       	push   $0xc000da55
c0004222:	e8 da e2 ff ff       	call   c0002501 <panic_spin>
c0004227:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:218

	/* 换下 */
	struct task_struct* cur = running_thread(); 
c000422a:	e8 bd fb ff ff       	call   c0003dec <running_thread>
c000422f:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:219
	if (cur->status == TASK_RUNNING) { // 若此线程只是cpu时间片到了,将其加入到就绪队列尾
c0004232:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004235:	8b 40 08             	mov    0x8(%eax),%eax
c0004238:	85 c0                	test   %eax,%eax
c000423a:	75 65                	jne    c00042a1 <schedule+0xa2>
/work/x86_os_my/thread/thread.c:220
		ASSERT(!elem_find(&thread_ready_list, &cur->general_tag));
c000423c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000423f:	83 c0 44             	add    $0x44,%eax
c0004242:	83 ec 08             	sub    $0x8,%esp
c0004245:	50                   	push   %eax
c0004246:	68 a8 3c 01 c0       	push   $0xc0013ca8
c000424b:	e8 94 08 00 00       	call   c0004ae4 <elem_find>
c0004250:	83 c4 10             	add    $0x10,%esp
c0004253:	85 c0                	test   %eax,%eax
c0004255:	74 1c                	je     c0004273 <schedule+0x74>
/work/x86_os_my/thread/thread.c:220 (discriminator 1)
c0004257:	68 00 db 00 c0       	push   $0xc000db00
c000425c:	68 a4 dd 00 c0       	push   $0xc000dda4
c0004261:	68 dc 00 00 00       	push   $0xdc
c0004266:	68 55 da 00 c0       	push   $0xc000da55
c000426b:	e8 91 e2 ff ff       	call   c0002501 <panic_spin>
c0004270:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:221
		list_append(&thread_ready_list, &cur->general_tag);
c0004273:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004276:	83 c0 44             	add    $0x44,%eax
c0004279:	83 ec 08             	sub    $0x8,%esp
c000427c:	50                   	push   %eax
c000427d:	68 a8 3c 01 c0       	push   $0xc0013ca8
c0004282:	e8 e3 07 00 00       	call   c0004a6a <list_append>
c0004287:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:222
		cur->ticks = cur->priority;     // 重新将当前线程的ticks再重置为其priority;
c000428a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000428d:	0f b6 50 1c          	movzbl 0x1c(%eax),%edx
c0004291:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004294:	88 50 1d             	mov    %dl,0x1d(%eax)
/work/x86_os_my/thread/thread.c:223
		cur->status = TASK_READY;
c0004297:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000429a:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/thread/thread.c:230
		/* 若此线程需要某事件发生后才能继续上cpu运行,
		不需要将其加入队列,因为当前线程不在就绪队列中。*/
	}

	/* 如果就绪队列中没有可运行的任务,就唤醒idle */
	if (list_empty(&thread_ready_list)) {
c00042a1:	83 ec 0c             	sub    $0xc,%esp
c00042a4:	68 a8 3c 01 c0       	push   $0xc0013ca8
c00042a9:	e8 03 09 00 00       	call   c0004bb1 <list_empty>
c00042ae:	83 c4 10             	add    $0x10,%esp
c00042b1:	85 c0                	test   %eax,%eax
c00042b3:	74 11                	je     c00042c6 <schedule+0xc7>
/work/x86_os_my/thread/thread.c:231
		thread_unblock(idle_thread);
c00042b5:	a1 c8 3c 01 c0       	mov    0xc0013cc8,%eax
c00042ba:	83 ec 0c             	sub    $0xc,%esp
c00042bd:	50                   	push   %eax
c00042be:	e8 ec 00 00 00       	call   c00043af <thread_unblock>
c00042c3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:235
	}
	
	/* 换上 */
	ASSERT(!list_empty(&thread_ready_list));
c00042c6:	83 ec 0c             	sub    $0xc,%esp
c00042c9:	68 a8 3c 01 c0       	push   $0xc0013ca8
c00042ce:	e8 de 08 00 00       	call   c0004bb1 <list_empty>
c00042d3:	83 c4 10             	add    $0x10,%esp
c00042d6:	85 c0                	test   %eax,%eax
c00042d8:	74 1c                	je     c00042f6 <schedule+0xf7>
/work/x86_os_my/thread/thread.c:235 (discriminator 1)
c00042da:	68 34 db 00 c0       	push   $0xc000db34
c00042df:	68 a4 dd 00 c0       	push   $0xc000dda4
c00042e4:	68 eb 00 00 00       	push   $0xeb
c00042e9:	68 55 da 00 c0       	push   $0xc000da55
c00042ee:	e8 0e e2 ff ff       	call   c0002501 <panic_spin>
c00042f3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:236
	g_thread_tag = NULL;	  // g_thread_tag清空
c00042f6:	c7 05 00 30 01 c0 00 	movl   $0x0,0xc0013000
c00042fd:	00 00 00 
/work/x86_os_my/thread/thread.c:238
	/* 将thread_ready_list队列中的第一个就绪线程弹出,准备将其调度上cpu. */
	g_thread_tag = list_pop(&thread_ready_list);   
c0004300:	83 ec 0c             	sub    $0xc,%esp
c0004303:	68 a8 3c 01 c0       	push   $0xc0013ca8
c0004308:	e8 b5 07 00 00       	call   c0004ac2 <list_pop>
c000430d:	83 c4 10             	add    $0x10,%esp
c0004310:	a3 00 30 01 c0       	mov    %eax,0xc0013000
/work/x86_os_my/thread/thread.c:239
	struct task_struct* next = elem2entry(struct task_struct, general_tag, g_thread_tag);
c0004315:	a1 00 30 01 c0       	mov    0xc0013000,%eax
c000431a:	83 e8 44             	sub    $0x44,%eax
c000431d:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/thread/thread.c:240
	next->status = TASK_RUNNING;
c0004320:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0004323:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
/work/x86_os_my/thread/thread.c:244
	
	/* 1.激活线程或进程的页表,【更新CR3寄存器】
	 * 2.用户进程，更新tss中的esp0为进程的特权级0的栈 */
	process_activate(next);
c000432a:	83 ec 0c             	sub    $0xc,%esp
c000432d:	ff 75 f0             	pushl  -0x10(%ebp)
c0004330:	e8 2d 15 00 00       	call   c0005862 <process_activate>
c0004335:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:246

	switch_to(cur, next);
c0004338:	83 ec 08             	sub    $0x8,%esp
c000433b:	ff 75 f0             	pushl  -0x10(%ebp)
c000433e:	ff 75 f4             	pushl  -0xc(%ebp)
c0004341:	e8 8a 08 00 00       	call   c0004bd0 <switch_to>
c0004346:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:247
}
c0004349:	90                   	nop
c000434a:	c9                   	leave  
c000434b:	c3                   	ret    

c000434c <thread_block>:
thread_block():
/work/x86_os_my/thread/thread.c:250

/* 当前线程将自己阻塞,标志其状态为stat. */
void thread_block(enum task_status stat) {
c000434c:	55                   	push   %ebp
c000434d:	89 e5                	mov    %esp,%ebp
c000434f:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:252
	/* stat取值为TASK_BLOCKED,TASK_WAITING,TASK_HANGING,也就是只有这三种状态才不会被调度*/
	ASSERT(((stat == TASK_BLOCKED) || (stat == TASK_WAITING) || (stat == TASK_HANGING)));
c0004352:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c0004356:	74 28                	je     c0004380 <thread_block+0x34>
/work/x86_os_my/thread/thread.c:252 (discriminator 1)
c0004358:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
c000435c:	74 22                	je     c0004380 <thread_block+0x34>
/work/x86_os_my/thread/thread.c:252 (discriminator 2)
c000435e:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
c0004362:	74 1c                	je     c0004380 <thread_block+0x34>
/work/x86_os_my/thread/thread.c:252 (discriminator 3)
c0004364:	68 54 db 00 c0       	push   $0xc000db54
c0004369:	68 b0 dd 00 c0       	push   $0xc000ddb0
c000436e:	68 fc 00 00 00       	push   $0xfc
c0004373:	68 55 da 00 c0       	push   $0xc000da55
c0004378:	e8 84 e1 ff ff       	call   c0002501 <panic_spin>
c000437d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:253
	enum intr_status old_status = intr_disable();
c0004380:	e8 94 d7 ff ff       	call   c0001b19 <intr_disable>
c0004385:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:255
	
	struct task_struct* cur_thread = running_thread();
c0004388:	e8 5f fa ff ff       	call   c0003dec <running_thread>
c000438d:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/thread/thread.c:256
	cur_thread->status = stat;
c0004390:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0004393:	8b 55 08             	mov    0x8(%ebp),%edx
c0004396:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/thread/thread.c:257
	schedule();
c0004399:	e8 61 fe ff ff       	call   c00041ff <schedule>
/work/x86_os_my/thread/thread.c:260
	
	/* 待当前线程被解除阻塞后才继续运行下面的intr_set_status */
	intr_set_status(old_status);
c000439e:	83 ec 0c             	sub    $0xc,%esp
c00043a1:	ff 75 f4             	pushl  -0xc(%ebp)
c00043a4:	e8 99 d7 ff ff       	call   c0001b42 <intr_set_status>
c00043a9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:261
}
c00043ac:	90                   	nop
c00043ad:	c9                   	leave  
c00043ae:	c3                   	ret    

c00043af <thread_unblock>:
thread_unblock():
/work/x86_os_my/thread/thread.c:264

/* 将线程pthread解除阻塞 */
void thread_unblock(struct task_struct* pthread) {
c00043af:	55                   	push   %ebp
c00043b0:	89 e5                	mov    %esp,%ebp
c00043b2:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:265
	enum intr_status old_status = intr_disable();
c00043b5:	e8 5f d7 ff ff       	call   c0001b19 <intr_disable>
c00043ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:266
	ASSERT(((pthread->status == TASK_BLOCKED) || (pthread->status == TASK_WAITING) || (pthread->status == TASK_HANGING)));
c00043bd:	8b 45 08             	mov    0x8(%ebp),%eax
c00043c0:	8b 40 08             	mov    0x8(%eax),%eax
c00043c3:	83 f8 02             	cmp    $0x2,%eax
c00043c6:	74 32                	je     c00043fa <thread_unblock+0x4b>
/work/x86_os_my/thread/thread.c:266 (discriminator 1)
c00043c8:	8b 45 08             	mov    0x8(%ebp),%eax
c00043cb:	8b 40 08             	mov    0x8(%eax),%eax
c00043ce:	83 f8 03             	cmp    $0x3,%eax
c00043d1:	74 27                	je     c00043fa <thread_unblock+0x4b>
/work/x86_os_my/thread/thread.c:266 (discriminator 2)
c00043d3:	8b 45 08             	mov    0x8(%ebp),%eax
c00043d6:	8b 40 08             	mov    0x8(%eax),%eax
c00043d9:	83 f8 04             	cmp    $0x4,%eax
c00043dc:	74 1c                	je     c00043fa <thread_unblock+0x4b>
/work/x86_os_my/thread/thread.c:266 (discriminator 3)
c00043de:	68 a4 db 00 c0       	push   $0xc000dba4
c00043e3:	68 c0 dd 00 c0       	push   $0xc000ddc0
c00043e8:	68 0a 01 00 00       	push   $0x10a
c00043ed:	68 55 da 00 c0       	push   $0xc000da55
c00043f2:	e8 0a e1 ff ff       	call   c0002501 <panic_spin>
c00043f7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:268
	
	if (pthread->status != TASK_READY) {
c00043fa:	8b 45 08             	mov    0x8(%ebp),%eax
c00043fd:	8b 40 08             	mov    0x8(%eax),%eax
c0004400:	83 f8 01             	cmp    $0x1,%eax
c0004403:	0f 84 8f 00 00 00    	je     c0004498 <thread_unblock+0xe9>
/work/x86_os_my/thread/thread.c:269
		ASSERT(!elem_find(&thread_ready_list, &pthread->general_tag));
c0004409:	8b 45 08             	mov    0x8(%ebp),%eax
c000440c:	83 c0 44             	add    $0x44,%eax
c000440f:	83 ec 08             	sub    $0x8,%esp
c0004412:	50                   	push   %eax
c0004413:	68 a8 3c 01 c0       	push   $0xc0013ca8
c0004418:	e8 c7 06 00 00       	call   c0004ae4 <elem_find>
c000441d:	83 c4 10             	add    $0x10,%esp
c0004420:	85 c0                	test   %eax,%eax
c0004422:	74 1c                	je     c0004440 <thread_unblock+0x91>
/work/x86_os_my/thread/thread.c:269 (discriminator 1)
c0004424:	68 14 dc 00 c0       	push   $0xc000dc14
c0004429:	68 c0 dd 00 c0       	push   $0xc000ddc0
c000442e:	68 0d 01 00 00       	push   $0x10d
c0004433:	68 55 da 00 c0       	push   $0xc000da55
c0004438:	e8 c4 e0 ff ff       	call   c0002501 <panic_spin>
c000443d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:270
		if (elem_find(&thread_ready_list, &pthread->general_tag)) {
c0004440:	8b 45 08             	mov    0x8(%ebp),%eax
c0004443:	83 c0 44             	add    $0x44,%eax
c0004446:	83 ec 08             	sub    $0x8,%esp
c0004449:	50                   	push   %eax
c000444a:	68 a8 3c 01 c0       	push   $0xc0013ca8
c000444f:	e8 90 06 00 00       	call   c0004ae4 <elem_find>
c0004454:	83 c4 10             	add    $0x10,%esp
c0004457:	85 c0                	test   %eax,%eax
c0004459:	74 1c                	je     c0004477 <thread_unblock+0xc8>
/work/x86_os_my/thread/thread.c:271
			PANIC("thread_unblock: blocked thread in ready_list\n");
c000445b:	68 4c dc 00 c0       	push   $0xc000dc4c
c0004460:	68 c0 dd 00 c0       	push   $0xc000ddc0
c0004465:	68 0f 01 00 00       	push   $0x10f
c000446a:	68 55 da 00 c0       	push   $0xc000da55
c000446f:	e8 8d e0 ff ff       	call   c0002501 <panic_spin>
c0004474:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:273
		}
		list_push(&thread_ready_list, &pthread->general_tag);	// 放到队列的最前面,使其尽快得到调度
c0004477:	8b 45 08             	mov    0x8(%ebp),%eax
c000447a:	83 c0 44             	add    $0x44,%eax
c000447d:	83 ec 08             	sub    $0x8,%esp
c0004480:	50                   	push   %eax
c0004481:	68 a8 3c 01 c0       	push   $0xc0013ca8
c0004486:	e8 c1 05 00 00       	call   c0004a4c <list_push>
c000448b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:274
		pthread->status = TASK_READY;
c000448e:	8b 45 08             	mov    0x8(%ebp),%eax
c0004491:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/thread/thread.c:277
	}
	
	intr_set_status(old_status);
c0004498:	83 ec 0c             	sub    $0xc,%esp
c000449b:	ff 75 f4             	pushl  -0xc(%ebp)
c000449e:	e8 9f d6 ff ff       	call   c0001b42 <intr_set_status>
c00044a3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:278
}
c00044a6:	90                   	nop
c00044a7:	c9                   	leave  
c00044a8:	c3                   	ret    

c00044a9 <thread_yield>:
thread_yield():
/work/x86_os_my/thread/thread.c:281

/* 主动让出cpu，换其它线程运行，但状态仍是ready */
void thread_yield(void) {
c00044a9:	55                   	push   %ebp
c00044aa:	89 e5                	mov    %esp,%ebp
c00044ac:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:282
	struct task_struct* cur = running_thread();
c00044af:	e8 38 f9 ff ff       	call   c0003dec <running_thread>
c00044b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:283
	enum intr_status old_status = intr_disable();
c00044b7:	e8 5d d6 ff ff       	call   c0001b19 <intr_disable>
c00044bc:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/thread/thread.c:284
	ASSERT(!elem_find(&thread_ready_list, &cur->general_tag));
c00044bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00044c2:	83 c0 44             	add    $0x44,%eax
c00044c5:	83 ec 08             	sub    $0x8,%esp
c00044c8:	50                   	push   %eax
c00044c9:	68 a8 3c 01 c0       	push   $0xc0013ca8
c00044ce:	e8 11 06 00 00       	call   c0004ae4 <elem_find>
c00044d3:	83 c4 10             	add    $0x10,%esp
c00044d6:	85 c0                	test   %eax,%eax
c00044d8:	74 1c                	je     c00044f6 <thread_yield+0x4d>
/work/x86_os_my/thread/thread.c:284 (discriminator 1)
c00044da:	68 00 db 00 c0       	push   $0xc000db00
c00044df:	68 d0 dd 00 c0       	push   $0xc000ddd0
c00044e4:	68 1c 01 00 00       	push   $0x11c
c00044e9:	68 55 da 00 c0       	push   $0xc000da55
c00044ee:	e8 0e e0 ff ff       	call   c0002501 <panic_spin>
c00044f3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:285
	list_append(&thread_ready_list, &cur->general_tag);
c00044f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00044f9:	83 c0 44             	add    $0x44,%eax
c00044fc:	83 ec 08             	sub    $0x8,%esp
c00044ff:	50                   	push   %eax
c0004500:	68 a8 3c 01 c0       	push   $0xc0013ca8
c0004505:	e8 60 05 00 00       	call   c0004a6a <list_append>
c000450a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:286
	cur->status = TASK_READY;
c000450d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004510:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/thread/thread.c:287
	schedule();
c0004517:	e8 e3 fc ff ff       	call   c00041ff <schedule>
/work/x86_os_my/thread/thread.c:288
	intr_set_status(old_status);
c000451c:	83 ec 0c             	sub    $0xc,%esp
c000451f:	ff 75 f0             	pushl  -0x10(%ebp)
c0004522:	e8 1b d6 ff ff       	call   c0001b42 <intr_set_status>
c0004527:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:289
}
c000452a:	90                   	nop
c000452b:	c9                   	leave  
c000452c:	c3                   	ret    

c000452d <pad_print>:
pad_print():
/work/x86_os_my/thread/thread.c:293


/* 前边填充空格 后边按format格式输出ptr的内容 输出的总长度都是buf_len个字符 */
static void pad_print(char* buf, int32_t buf_len, void* ptr, char format) {
c000452d:	55                   	push   %ebp
c000452e:	89 e5                	mov    %esp,%ebp
c0004530:	83 ec 28             	sub    $0x28,%esp
c0004533:	8b 45 14             	mov    0x14(%ebp),%eax
c0004536:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/thread/thread.c:294
	memset(buf, 0, buf_len);
c0004539:	8b 45 0c             	mov    0xc(%ebp),%eax
c000453c:	83 ec 04             	sub    $0x4,%esp
c000453f:	50                   	push   %eax
c0004540:	6a 00                	push   $0x0
c0004542:	ff 75 08             	pushl  0x8(%ebp)
c0004545:	e8 bb f4 ff ff       	call   c0003a05 <memset>
c000454a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:295
	uint8_t out_pad_0idx = 0;
c000454d:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/thread/thread.c:296
	switch(format) {
c0004551:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
c0004555:	83 f8 73             	cmp    $0x73,%eax
c0004558:	74 0c                	je     c0004566 <pad_print+0x39>
c000455a:	83 f8 78             	cmp    $0x78,%eax
c000455d:	74 40                	je     c000459f <pad_print+0x72>
c000455f:	83 f8 64             	cmp    $0x64,%eax
c0004562:	74 1d                	je     c0004581 <pad_print+0x54>
c0004564:	eb 55                	jmp    c00045bb <pad_print+0x8e>
/work/x86_os_my/thread/thread.c:298
		case 's':
		out_pad_0idx = sprintf(buf, "%s", ptr);
c0004566:	83 ec 04             	sub    $0x4,%esp
c0004569:	ff 75 10             	pushl  0x10(%ebp)
c000456c:	68 7a dc 00 c0       	push   $0xc000dc7a
c0004571:	ff 75 08             	pushl  0x8(%ebp)
c0004574:	e8 4d 1b 00 00       	call   c00060c6 <sprintf>
c0004579:	83 c4 10             	add    $0x10,%esp
c000457c:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/thread/thread.c:299
		break;
c000457f:	eb 3a                	jmp    c00045bb <pad_print+0x8e>
/work/x86_os_my/thread/thread.c:301
		case 'd':
		out_pad_0idx = sprintf(buf, "%d", *((int16_t*)ptr));
c0004581:	8b 45 10             	mov    0x10(%ebp),%eax
c0004584:	0f b7 00             	movzwl (%eax),%eax
c0004587:	98                   	cwtl   
c0004588:	83 ec 04             	sub    $0x4,%esp
c000458b:	50                   	push   %eax
c000458c:	68 7d dc 00 c0       	push   $0xc000dc7d
c0004591:	ff 75 08             	pushl  0x8(%ebp)
c0004594:	e8 2d 1b 00 00       	call   c00060c6 <sprintf>
c0004599:	83 c4 10             	add    $0x10,%esp
c000459c:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/thread/thread.c:303
		case 'x':
		out_pad_0idx = sprintf(buf, "%x", *((uint32_t*)ptr));
c000459f:	8b 45 10             	mov    0x10(%ebp),%eax
c00045a2:	8b 00                	mov    (%eax),%eax
c00045a4:	83 ec 04             	sub    $0x4,%esp
c00045a7:	50                   	push   %eax
c00045a8:	68 80 dc 00 c0       	push   $0xc000dc80
c00045ad:	ff 75 08             	pushl  0x8(%ebp)
c00045b0:	e8 11 1b 00 00       	call   c00060c6 <sprintf>
c00045b5:	83 c4 10             	add    $0x10,%esp
c00045b8:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/thread/thread.c:305
	}
	while(out_pad_0idx < buf_len) { // 以空格填充
c00045bb:	eb 16                	jmp    c00045d3 <pad_print+0xa6>
/work/x86_os_my/thread/thread.c:306
		buf[out_pad_0idx] = ' ';
c00045bd:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c00045c1:	8b 45 08             	mov    0x8(%ebp),%eax
c00045c4:	01 d0                	add    %edx,%eax
c00045c6:	c6 00 20             	movb   $0x20,(%eax)
/work/x86_os_my/thread/thread.c:307
		out_pad_0idx++;
c00045c9:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00045cd:	83 c0 01             	add    $0x1,%eax
c00045d0:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/thread/thread.c:305
		case 'd':
		out_pad_0idx = sprintf(buf, "%d", *((int16_t*)ptr));
		case 'x':
		out_pad_0idx = sprintf(buf, "%x", *((uint32_t*)ptr));
	}
	while(out_pad_0idx < buf_len) { // 以空格填充
c00045d3:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00045d7:	3b 45 0c             	cmp    0xc(%ebp),%eax
c00045da:	7c e1                	jl     c00045bd <pad_print+0x90>
/work/x86_os_my/thread/thread.c:309
		buf[out_pad_0idx] = ' ';
		out_pad_0idx++;
	}
	sys_write(stdout_no, buf, buf_len - 1);
c00045dc:	8b 45 0c             	mov    0xc(%ebp),%eax
c00045df:	83 e8 01             	sub    $0x1,%eax
c00045e2:	83 ec 04             	sub    $0x4,%esp
c00045e5:	50                   	push   %eax
c00045e6:	ff 75 08             	pushl  0x8(%ebp)
c00045e9:	6a 01                	push   $0x1
c00045eb:	e8 25 36 00 00       	call   c0007c15 <sys_write>
c00045f0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:310
}
c00045f3:	90                   	nop
c00045f4:	c9                   	leave  
c00045f5:	c3                   	ret    

c00045f6 <elem2thread_info>:
elem2thread_info():
/work/x86_os_my/thread/thread.c:313

/* 用于在list_traversal函数中的回调函数,用于针对线程队列的处理 */
static bool elem2thread_info(struct list_elem* pelem, int arg UNUSED) {
c00045f6:	55                   	push   %ebp
c00045f7:	89 e5                	mov    %esp,%ebp
c00045f9:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/thread/thread.c:314
	struct task_struct* pthread = elem2entry(struct task_struct, all_list_tag, pelem);
c00045fc:	8b 45 08             	mov    0x8(%ebp),%eax
c00045ff:	83 e8 4c             	sub    $0x4c,%eax
c0004602:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:315
	char out_pad[16] = {0};
c0004605:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c000460c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0004613:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c000461a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/thread/thread.c:317

	pad_print(out_pad, 16, &pthread->pid, 'd');
c0004621:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004624:	83 c0 04             	add    $0x4,%eax
c0004627:	6a 64                	push   $0x64
c0004629:	50                   	push   %eax
c000462a:	6a 10                	push   $0x10
c000462c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c000462f:	50                   	push   %eax
c0004630:	e8 f8 fe ff ff       	call   c000452d <pad_print>
c0004635:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:319

	if (pthread->parent_pid == -1) {
c0004638:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000463b:	0f b7 80 10 01 00 00 	movzwl 0x110(%eax),%eax
c0004642:	66 83 f8 ff          	cmp    $0xffff,%ax
c0004646:	75 17                	jne    c000465f <elem2thread_info+0x69>
/work/x86_os_my/thread/thread.c:320
		pad_print(out_pad, 16, "NULL", 's');
c0004648:	6a 73                	push   $0x73
c000464a:	68 83 dc 00 c0       	push   $0xc000dc83
c000464f:	6a 10                	push   $0x10
c0004651:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0004654:	50                   	push   %eax
c0004655:	e8 d3 fe ff ff       	call   c000452d <pad_print>
c000465a:	83 c4 10             	add    $0x10,%esp
c000465d:	eb 19                	jmp    c0004678 <elem2thread_info+0x82>
/work/x86_os_my/thread/thread.c:322
	} else {
		pad_print(out_pad, 16, &pthread->parent_pid, 'd');
c000465f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004662:	05 10 01 00 00       	add    $0x110,%eax
c0004667:	6a 64                	push   $0x64
c0004669:	50                   	push   %eax
c000466a:	6a 10                	push   $0x10
c000466c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c000466f:	50                   	push   %eax
c0004670:	e8 b8 fe ff ff       	call   c000452d <pad_print>
c0004675:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:325
	}

	switch (pthread->status) {
c0004678:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000467b:	8b 40 08             	mov    0x8(%eax),%eax
c000467e:	83 f8 05             	cmp    $0x5,%eax
c0004681:	0f 87 91 00 00 00    	ja     c0004718 <elem2thread_info+0x122>
c0004687:	8b 04 85 d0 dc 00 c0 	mov    -0x3fff2330(,%eax,4),%eax
c000468e:	ff e0                	jmp    *%eax
/work/x86_os_my/thread/thread.c:327
		case 0:
		pad_print(out_pad, 16, "RUNNING", 's');
c0004690:	6a 73                	push   $0x73
c0004692:	68 88 dc 00 c0       	push   $0xc000dc88
c0004697:	6a 10                	push   $0x10
c0004699:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c000469c:	50                   	push   %eax
c000469d:	e8 8b fe ff ff       	call   c000452d <pad_print>
c00046a2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:328
		break;
c00046a5:	eb 71                	jmp    c0004718 <elem2thread_info+0x122>
/work/x86_os_my/thread/thread.c:330
		case 1:
		pad_print(out_pad, 16, "READY", 's');
c00046a7:	6a 73                	push   $0x73
c00046a9:	68 90 dc 00 c0       	push   $0xc000dc90
c00046ae:	6a 10                	push   $0x10
c00046b0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c00046b3:	50                   	push   %eax
c00046b4:	e8 74 fe ff ff       	call   c000452d <pad_print>
c00046b9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:331
		break;
c00046bc:	eb 5a                	jmp    c0004718 <elem2thread_info+0x122>
/work/x86_os_my/thread/thread.c:333
		case 2:
		pad_print(out_pad, 16, "BLOCKED", 's');
c00046be:	6a 73                	push   $0x73
c00046c0:	68 96 dc 00 c0       	push   $0xc000dc96
c00046c5:	6a 10                	push   $0x10
c00046c7:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c00046ca:	50                   	push   %eax
c00046cb:	e8 5d fe ff ff       	call   c000452d <pad_print>
c00046d0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:334
		break;
c00046d3:	eb 43                	jmp    c0004718 <elem2thread_info+0x122>
/work/x86_os_my/thread/thread.c:336
		case 3:
		pad_print(out_pad, 16, "WAITING", 's');
c00046d5:	6a 73                	push   $0x73
c00046d7:	68 9e dc 00 c0       	push   $0xc000dc9e
c00046dc:	6a 10                	push   $0x10
c00046de:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c00046e1:	50                   	push   %eax
c00046e2:	e8 46 fe ff ff       	call   c000452d <pad_print>
c00046e7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:337
		break;
c00046ea:	eb 2c                	jmp    c0004718 <elem2thread_info+0x122>
/work/x86_os_my/thread/thread.c:339
		case 4:
		pad_print(out_pad, 16, "HANGING", 's');
c00046ec:	6a 73                	push   $0x73
c00046ee:	68 a6 dc 00 c0       	push   $0xc000dca6
c00046f3:	6a 10                	push   $0x10
c00046f5:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c00046f8:	50                   	push   %eax
c00046f9:	e8 2f fe ff ff       	call   c000452d <pad_print>
c00046fe:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:340
		break;
c0004701:	eb 15                	jmp    c0004718 <elem2thread_info+0x122>
/work/x86_os_my/thread/thread.c:342
		case 5:
		pad_print(out_pad, 16, "DIED", 's');
c0004703:	6a 73                	push   $0x73
c0004705:	68 ae dc 00 c0       	push   $0xc000dcae
c000470a:	6a 10                	push   $0x10
c000470c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c000470f:	50                   	push   %eax
c0004710:	e8 18 fe ff ff       	call   c000452d <pad_print>
c0004715:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:344
	}
	pad_print(out_pad, 16, &pthread->elapsed_ticks, 'x');
c0004718:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000471b:	83 c0 20             	add    $0x20,%eax
c000471e:	6a 78                	push   $0x78
c0004720:	50                   	push   %eax
c0004721:	6a 10                	push   $0x10
c0004723:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0004726:	50                   	push   %eax
c0004727:	e8 01 fe ff ff       	call   c000452d <pad_print>
c000472c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:346

	memset(out_pad, 0, 16);
c000472f:	83 ec 04             	sub    $0x4,%esp
c0004732:	6a 10                	push   $0x10
c0004734:	6a 00                	push   $0x0
c0004736:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0004739:	50                   	push   %eax
c000473a:	e8 c6 f2 ff ff       	call   c0003a05 <memset>
c000473f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:347
	ASSERT(strlen(pthread->name) < 17);
c0004742:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004745:	83 c0 0c             	add    $0xc,%eax
c0004748:	83 ec 0c             	sub    $0xc,%esp
c000474b:	50                   	push   %eax
c000474c:	e8 3e f4 ff ff       	call   c0003b8f <strlen>
c0004751:	83 c4 10             	add    $0x10,%esp
c0004754:	83 f8 10             	cmp    $0x10,%eax
c0004757:	76 1c                	jbe    c0004775 <elem2thread_info+0x17f>
/work/x86_os_my/thread/thread.c:347 (discriminator 1)
c0004759:	68 b3 dc 00 c0       	push   $0xc000dcb3
c000475e:	68 e0 dd 00 c0       	push   $0xc000dde0
c0004763:	68 5b 01 00 00       	push   $0x15b
c0004768:	68 55 da 00 c0       	push   $0xc000da55
c000476d:	e8 8f dd ff ff       	call   c0002501 <panic_spin>
c0004772:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:348
	memcpy(out_pad, pthread->name, strlen(pthread->name));
c0004775:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004778:	83 c0 0c             	add    $0xc,%eax
c000477b:	83 ec 0c             	sub    $0xc,%esp
c000477e:	50                   	push   %eax
c000477f:	e8 0b f4 ff ff       	call   c0003b8f <strlen>
c0004784:	83 c4 10             	add    $0x10,%esp
c0004787:	89 c2                	mov    %eax,%edx
c0004789:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000478c:	83 c0 0c             	add    $0xc,%eax
c000478f:	83 ec 04             	sub    $0x4,%esp
c0004792:	52                   	push   %edx
c0004793:	50                   	push   %eax
c0004794:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0004797:	50                   	push   %eax
c0004798:	e8 ba f2 ff ff       	call   c0003a57 <memcpy>
c000479d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:349
	strcat(out_pad, "\n");
c00047a0:	83 ec 08             	sub    $0x8,%esp
c00047a3:	68 ce dc 00 c0       	push   $0xc000dcce
c00047a8:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c00047ab:	50                   	push   %eax
c00047ac:	e8 58 f5 ff ff       	call   c0003d09 <strcat>
c00047b1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:350
	sys_write(stdout_no, out_pad, strlen(out_pad));
c00047b4:	83 ec 0c             	sub    $0xc,%esp
c00047b7:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c00047ba:	50                   	push   %eax
c00047bb:	e8 cf f3 ff ff       	call   c0003b8f <strlen>
c00047c0:	83 c4 10             	add    $0x10,%esp
c00047c3:	83 ec 04             	sub    $0x4,%esp
c00047c6:	50                   	push   %eax
c00047c7:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c00047ca:	50                   	push   %eax
c00047cb:	6a 01                	push   $0x1
c00047cd:	e8 43 34 00 00       	call   c0007c15 <sys_write>
c00047d2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:351
	return false;	// 此处返回false是为了迎合主调函数list_traversal,只有回调函数返回false时才会继续调用此函数
c00047d5:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/thread/thread.c:352
}
c00047da:	c9                   	leave  
c00047db:	c3                   	ret    

c00047dc <sys_ps>:
sys_ps():
/work/x86_os_my/thread/thread.c:355

/* 打印任务列表 */
void sys_ps(void) {
c00047dc:	55                   	push   %ebp
c00047dd:	89 e5                	mov    %esp,%ebp
c00047df:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:357
	///////////////   |<--   15  -->||<--   15  -->||<--   15  -->||<--   15  -->||<-7->|
	char* ps_title = "PID            PPID           STAT           TICKS          COMMAND\n";
c00047e2:	c7 45 f4 e8 dc 00 c0 	movl   $0xc000dce8,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:358
	sys_write(stdout_no, ps_title, strlen(ps_title));
c00047e9:	83 ec 0c             	sub    $0xc,%esp
c00047ec:	ff 75 f4             	pushl  -0xc(%ebp)
c00047ef:	e8 9b f3 ff ff       	call   c0003b8f <strlen>
c00047f4:	83 c4 10             	add    $0x10,%esp
c00047f7:	83 ec 04             	sub    $0x4,%esp
c00047fa:	50                   	push   %eax
c00047fb:	ff 75 f4             	pushl  -0xc(%ebp)
c00047fe:	6a 01                	push   $0x1
c0004800:	e8 10 34 00 00       	call   c0007c15 <sys_write>
c0004805:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:359
	list_traversal(&thread_all_list, elem2thread_info, 0);
c0004808:	83 ec 04             	sub    $0x4,%esp
c000480b:	6a 00                	push   $0x0
c000480d:	68 f6 45 00 c0       	push   $0xc00045f6
c0004812:	68 b8 3c 01 c0       	push   $0xc0013cb8
c0004817:	e8 03 03 00 00       	call   c0004b1f <list_traversal>
c000481c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:360
}
c000481f:	90                   	nop
c0004820:	c9                   	leave  
c0004821:	c3                   	ret    

c0004822 <thread_exit>:
thread_exit():
/work/x86_os_my/thread/thread.c:363

/* 回收thread_over的pcb和页表,并将其从调度队列中去除 */
void thread_exit(struct task_struct* thread_over, bool need_schedule) {
c0004822:	55                   	push   %ebp
c0004823:	89 e5                	mov    %esp,%ebp
c0004825:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:365
	/* 要保证schedule在关中断情况下调用 */
	intr_disable();
c0004828:	e8 ec d2 ff ff       	call   c0001b19 <intr_disable>
/work/x86_os_my/thread/thread.c:366
	thread_over->status = TASK_DIED;
c000482d:	8b 45 08             	mov    0x8(%ebp),%eax
c0004830:	c7 40 08 05 00 00 00 	movl   $0x5,0x8(%eax)
/work/x86_os_my/thread/thread.c:369

	/* 如果thread_over不是当前线程,就有可能还在就绪队列中,将其从中删除 */
	if (elem_find(&thread_ready_list, &thread_over->general_tag)) {
c0004837:	8b 45 08             	mov    0x8(%ebp),%eax
c000483a:	83 c0 44             	add    $0x44,%eax
c000483d:	83 ec 08             	sub    $0x8,%esp
c0004840:	50                   	push   %eax
c0004841:	68 a8 3c 01 c0       	push   $0xc0013ca8
c0004846:	e8 99 02 00 00       	call   c0004ae4 <elem_find>
c000484b:	83 c4 10             	add    $0x10,%esp
c000484e:	85 c0                	test   %eax,%eax
c0004850:	74 12                	je     c0004864 <thread_exit+0x42>
/work/x86_os_my/thread/thread.c:370
		list_remove(&thread_over->general_tag);
c0004852:	8b 45 08             	mov    0x8(%ebp),%eax
c0004855:	83 c0 44             	add    $0x44,%eax
c0004858:	83 ec 0c             	sub    $0xc,%esp
c000485b:	50                   	push   %eax
c000485c:	e8 27 02 00 00       	call   c0004a88 <list_remove>
c0004861:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:372
	}
	if (thread_over->pgdir) {	// 如是进程,回收进程的页表【线程的pgdir、内核进程的pgdir都是NULL】
c0004864:	8b 45 08             	mov    0x8(%ebp),%eax
c0004867:	8b 40 54             	mov    0x54(%eax),%eax
c000486a:	85 c0                	test   %eax,%eax
c000486c:	74 16                	je     c0004884 <thread_exit+0x62>
/work/x86_os_my/thread/thread.c:373
		mfree_page(PF_KERNEL, thread_over->pgdir, 1);
c000486e:	8b 45 08             	mov    0x8(%ebp),%eax
c0004871:	8b 40 54             	mov    0x54(%eax),%eax
c0004874:	83 ec 04             	sub    $0x4,%esp
c0004877:	6a 01                	push   $0x1
c0004879:	50                   	push   %eax
c000487a:	6a 01                	push   $0x1
c000487c:	e8 97 ea ff ff       	call   c0003318 <mfree_page>
c0004881:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:377
	}

	/* 从all_thread_list中去掉此任务 */
	list_remove(&thread_over->all_list_tag);
c0004884:	8b 45 08             	mov    0x8(%ebp),%eax
c0004887:	83 c0 4c             	add    $0x4c,%eax
c000488a:	83 ec 0c             	sub    $0xc,%esp
c000488d:	50                   	push   %eax
c000488e:	e8 f5 01 00 00       	call   c0004a88 <list_remove>
c0004893:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:380

	/* 回收pcb所在的页,主线程的pcb不在堆中,跨过 */
	if (thread_over != g_main_thread) {
c0004896:	a1 cc 3c 01 c0       	mov    0xc0013ccc,%eax
c000489b:	39 45 08             	cmp    %eax,0x8(%ebp)
c000489e:	74 12                	je     c00048b2 <thread_exit+0x90>
/work/x86_os_my/thread/thread.c:381
		mfree_page(PF_KERNEL, thread_over, 1);
c00048a0:	83 ec 04             	sub    $0x4,%esp
c00048a3:	6a 01                	push   $0x1
c00048a5:	ff 75 08             	pushl  0x8(%ebp)
c00048a8:	6a 01                	push   $0x1
c00048aa:	e8 69 ea ff ff       	call   c0003318 <mfree_page>
c00048af:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:385
	}

	/* 归还pid */
	release_pid(thread_over->pid);
c00048b2:	8b 45 08             	mov    0x8(%ebp),%eax
c00048b5:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c00048b9:	98                   	cwtl   
c00048ba:	83 ec 0c             	sub    $0xc,%esp
c00048bd:	50                   	push   %eax
c00048be:	e8 00 f6 ff ff       	call   c0003ec3 <release_pid>
c00048c3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:388

	/* 如果需要下一轮调度则主动调用schedule */
	if (need_schedule) {
c00048c6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c00048ca:	74 21                	je     c00048ed <thread_exit+0xcb>
/work/x86_os_my/thread/thread.c:389
		schedule();
c00048cc:	e8 2e f9 ff ff       	call   c00041ff <schedule>
/work/x86_os_my/thread/thread.c:390
		PANIC("thread_exit: should not be here\n");
c00048d1:	68 30 dd 00 c0       	push   $0xc000dd30
c00048d6:	68 f4 dd 00 c0       	push   $0xc000ddf4
c00048db:	68 86 01 00 00       	push   $0x186
c00048e0:	68 55 da 00 c0       	push   $0xc000da55
c00048e5:	e8 17 dc ff ff       	call   c0002501 <panic_spin>
c00048ea:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:392
	}
}
c00048ed:	90                   	nop
c00048ee:	c9                   	leave  
c00048ef:	c3                   	ret    

c00048f0 <pid_check>:
pid_check():
/work/x86_os_my/thread/thread.c:395

/* 比对任务的pid */
static bool pid_check(struct list_elem* pelem, int32_t pid) {
c00048f0:	55                   	push   %ebp
c00048f1:	89 e5                	mov    %esp,%ebp
c00048f3:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/thread/thread.c:396
	struct task_struct* pthread = elem2entry(struct task_struct, all_list_tag, pelem);
c00048f6:	8b 45 08             	mov    0x8(%ebp),%eax
c00048f9:	83 e8 4c             	sub    $0x4c,%eax
c00048fc:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/thread/thread.c:397
	if (pthread->pid == pid) {
c00048ff:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0004902:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0004906:	98                   	cwtl   
c0004907:	3b 45 0c             	cmp    0xc(%ebp),%eax
c000490a:	75 07                	jne    c0004913 <pid_check+0x23>
/work/x86_os_my/thread/thread.c:398
		return true;
c000490c:	b8 01 00 00 00       	mov    $0x1,%eax
c0004911:	eb 05                	jmp    c0004918 <pid_check+0x28>
/work/x86_os_my/thread/thread.c:400
	}
	return false;	//list_traversal继续遍历
c0004913:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/thread/thread.c:401
}
c0004918:	c9                   	leave  
c0004919:	c3                   	ret    

c000491a <pid2thread>:
pid2thread():
/work/x86_os_my/thread/thread.c:404

/* 根据pid找pcb,若找到则返回该pcb,否则返回NULL */
struct task_struct* pid2thread(int32_t pid) {
c000491a:	55                   	push   %ebp
c000491b:	89 e5                	mov    %esp,%ebp
c000491d:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:405
	struct list_elem* pelem = list_traversal(&thread_all_list, pid_check, pid);
c0004920:	83 ec 04             	sub    $0x4,%esp
c0004923:	ff 75 08             	pushl  0x8(%ebp)
c0004926:	68 f0 48 00 c0       	push   $0xc00048f0
c000492b:	68 b8 3c 01 c0       	push   $0xc0013cb8
c0004930:	e8 ea 01 00 00       	call   c0004b1f <list_traversal>
c0004935:	83 c4 10             	add    $0x10,%esp
c0004938:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:406
	if (pelem == NULL) {
c000493b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c000493f:	75 07                	jne    c0004948 <pid2thread+0x2e>
/work/x86_os_my/thread/thread.c:407
		return NULL;
c0004941:	b8 00 00 00 00       	mov    $0x0,%eax
c0004946:	eb 0c                	jmp    c0004954 <pid2thread+0x3a>
/work/x86_os_my/thread/thread.c:409
	}
	struct task_struct* thread = elem2entry(struct task_struct, all_list_tag, pelem);
c0004948:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000494b:	83 e8 4c             	sub    $0x4c,%eax
c000494e:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/thread/thread.c:410
	return thread;
c0004951:	8b 45 f0             	mov    -0x10(%ebp),%eax
/work/x86_os_my/thread/thread.c:411
}
c0004954:	c9                   	leave  
c0004955:	c3                   	ret    

c0004956 <thread_init>:
thread_init():
/work/x86_os_my/thread/thread.c:415


/* 初始化线程环境 */
void thread_init(void) {
c0004956:	55                   	push   %ebp
c0004957:	89 e5                	mov    %esp,%ebp
c0004959:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:416
	put_str("thread_init start\n");
c000495c:	83 ec 0c             	sub    $0xc,%esp
c000495f:	68 51 dd 00 c0       	push   $0xc000dd51
c0004964:	e8 e7 d9 ff ff       	call   c0002350 <put_str>
c0004969:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:417
	list_init(&thread_ready_list);
c000496c:	83 ec 0c             	sub    $0xc,%esp
c000496f:	68 a8 3c 01 c0       	push   $0xc0013ca8
c0004974:	e8 60 00 00 00       	call   c00049d9 <list_init>
c0004979:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:418
	list_init(&thread_all_list);
c000497c:	83 ec 0c             	sub    $0xc,%esp
c000497f:	68 b8 3c 01 c0       	push   $0xc0013cb8
c0004984:	e8 50 00 00 00       	call   c00049d9 <list_init>
c0004989:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:419
	pid_pool_init();
c000498c:	e8 8c f4 ff ff       	call   c0003e1d <pid_pool_init>
/work/x86_os_my/thread/thread.c:422
	
	/* 先创建第一个用户进程:init */
	process_execute(init, "init");	// 放在第一个初始化,这是第一个进程,init进程的pid为1
c0004991:	83 ec 08             	sub    $0x8,%esp
c0004994:	68 64 dd 00 c0       	push   $0xc000dd64
c0004999:	68 ec 16 00 c0       	push   $0xc00016ec
c000499e:	e8 d1 0f 00 00       	call   c0005974 <process_execute>
c00049a3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:424
	/* 将当前main函数创建为线程 */
	make_main_thread();
c00049a6:	e8 d7 f7 ff ff       	call   c0004182 <make_main_thread>
/work/x86_os_my/thread/thread.c:426
	/* 创建idle线程 */
	idle_thread = thread_start("idle", 10, idle, NULL);
c00049ab:	6a 00                	push   $0x0
c00049ad:	68 d5 3d 00 c0       	push   $0xc0003dd5
c00049b2:	6a 0a                	push   $0xa
c00049b4:	68 69 dd 00 c0       	push   $0xc000dd69
c00049b9:	e8 e5 f6 ff ff       	call   c00040a3 <thread_start>
c00049be:	83 c4 10             	add    $0x10,%esp
c00049c1:	a3 c8 3c 01 c0       	mov    %eax,0xc0013cc8
/work/x86_os_my/thread/thread.c:427
	put_str("thread_init done\n");
c00049c6:	83 ec 0c             	sub    $0xc,%esp
c00049c9:	68 6e dd 00 c0       	push   $0xc000dd6e
c00049ce:	e8 7d d9 ff ff       	call   c0002350 <put_str>
c00049d3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:428
}
c00049d6:	90                   	nop
c00049d7:	c9                   	leave  
c00049d8:	c3                   	ret    

c00049d9 <list_init>:
list_init():
/work/x86_os_my/lib/kernel/list.c:6
#include "list.h"
#include "interrupt.h"
/* 注意关中断的操作：临界区 */

/* 初始化双向链表list */
void list_init (struct list* list) {
c00049d9:	55                   	push   %ebp
c00049da:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/lib/kernel/list.c:7
	list->head.prev = NULL;
c00049dc:	8b 45 08             	mov    0x8(%ebp),%eax
c00049df:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/lib/kernel/list.c:8
	list->head.next = &list->tail;
c00049e5:	8b 45 08             	mov    0x8(%ebp),%eax
c00049e8:	8d 50 08             	lea    0x8(%eax),%edx
c00049eb:	8b 45 08             	mov    0x8(%ebp),%eax
c00049ee:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/lib/kernel/list.c:9
	list->tail.prev = &list->head;
c00049f1:	8b 55 08             	mov    0x8(%ebp),%edx
c00049f4:	8b 45 08             	mov    0x8(%ebp),%eax
c00049f7:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/lib/kernel/list.c:10
	list->tail.next = NULL;
c00049fa:	8b 45 08             	mov    0x8(%ebp),%eax
c00049fd:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
/work/x86_os_my/lib/kernel/list.c:11
}
c0004a04:	90                   	nop
c0004a05:	5d                   	pop    %ebp
c0004a06:	c3                   	ret    

c0004a07 <list_insert_before>:
list_insert_before():
/work/x86_os_my/lib/kernel/list.c:14

/* 把链表元素elem插入在元素before之前 */
void list_insert_before(struct list_elem* before, struct list_elem* elem) { 
c0004a07:	55                   	push   %ebp
c0004a08:	89 e5                	mov    %esp,%ebp
c0004a0a:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/kernel/list.c:15
	enum intr_status old_status = intr_disable();
c0004a0d:	e8 07 d1 ff ff       	call   c0001b19 <intr_disable>
c0004a12:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/list.c:18

	/* 将before前驱元素的后继元素更新为elem, 暂时使before脱离链表*/ 
	before->prev->next = elem; 
c0004a15:	8b 45 08             	mov    0x8(%ebp),%eax
c0004a18:	8b 00                	mov    (%eax),%eax
c0004a1a:	8b 55 0c             	mov    0xc(%ebp),%edx
c0004a1d:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/lib/kernel/list.c:22

	/* 更新elem自己的前驱结点为before的前驱,
	* 更新elem自己的后继结点为before, 于是before又回到链表 */
	elem->prev = before->prev;
c0004a20:	8b 45 08             	mov    0x8(%ebp),%eax
c0004a23:	8b 10                	mov    (%eax),%edx
c0004a25:	8b 45 0c             	mov    0xc(%ebp),%eax
c0004a28:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/lib/kernel/list.c:23
	elem->next = before;
c0004a2a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0004a2d:	8b 55 08             	mov    0x8(%ebp),%edx
c0004a30:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/lib/kernel/list.c:26

	/* 更新before的前驱结点为elem */
	before->prev = elem;
c0004a33:	8b 45 08             	mov    0x8(%ebp),%eax
c0004a36:	8b 55 0c             	mov    0xc(%ebp),%edx
c0004a39:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/lib/kernel/list.c:28

	intr_set_status(old_status);
c0004a3b:	83 ec 0c             	sub    $0xc,%esp
c0004a3e:	ff 75 f4             	pushl  -0xc(%ebp)
c0004a41:	e8 fc d0 ff ff       	call   c0001b42 <intr_set_status>
c0004a46:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:29
}
c0004a49:	90                   	nop
c0004a4a:	c9                   	leave  
c0004a4b:	c3                   	ret    

c0004a4c <list_push>:
list_push():
/work/x86_os_my/lib/kernel/list.c:32

/* 添加元素到列表队首,类似栈push操作 */
void list_push(struct list* plist, struct list_elem* elem) {
c0004a4c:	55                   	push   %ebp
c0004a4d:	89 e5                	mov    %esp,%ebp
c0004a4f:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/lib/kernel/list.c:33
	list_insert_before(plist->head.next, elem); // 在队头插入elem
c0004a52:	8b 45 08             	mov    0x8(%ebp),%eax
c0004a55:	8b 40 04             	mov    0x4(%eax),%eax
c0004a58:	83 ec 08             	sub    $0x8,%esp
c0004a5b:	ff 75 0c             	pushl  0xc(%ebp)
c0004a5e:	50                   	push   %eax
c0004a5f:	e8 a3 ff ff ff       	call   c0004a07 <list_insert_before>
c0004a64:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:34
}
c0004a67:	90                   	nop
c0004a68:	c9                   	leave  
c0004a69:	c3                   	ret    

c0004a6a <list_append>:
list_append():
/work/x86_os_my/lib/kernel/list.c:37

/* 追加元素到链表队尾,类似队列的先进先出操作 */
void list_append(struct list* plist, struct list_elem* elem) {
c0004a6a:	55                   	push   %ebp
c0004a6b:	89 e5                	mov    %esp,%ebp
c0004a6d:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/lib/kernel/list.c:38
	list_insert_before(&plist->tail, elem);     // 在队尾的前面插入
c0004a70:	8b 45 08             	mov    0x8(%ebp),%eax
c0004a73:	83 c0 08             	add    $0x8,%eax
c0004a76:	83 ec 08             	sub    $0x8,%esp
c0004a79:	ff 75 0c             	pushl  0xc(%ebp)
c0004a7c:	50                   	push   %eax
c0004a7d:	e8 85 ff ff ff       	call   c0004a07 <list_insert_before>
c0004a82:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:39
}
c0004a85:	90                   	nop
c0004a86:	c9                   	leave  
c0004a87:	c3                   	ret    

c0004a88 <list_remove>:
list_remove():
/work/x86_os_my/lib/kernel/list.c:42

/* 使元素pelem脱离链表 */
void list_remove(struct list_elem* pelem) {
c0004a88:	55                   	push   %ebp
c0004a89:	89 e5                	mov    %esp,%ebp
c0004a8b:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/kernel/list.c:43
	enum intr_status old_status = intr_disable();
c0004a8e:	e8 86 d0 ff ff       	call   c0001b19 <intr_disable>
c0004a93:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/list.c:45

	pelem->prev->next = pelem->next;
c0004a96:	8b 45 08             	mov    0x8(%ebp),%eax
c0004a99:	8b 00                	mov    (%eax),%eax
c0004a9b:	8b 55 08             	mov    0x8(%ebp),%edx
c0004a9e:	8b 52 04             	mov    0x4(%edx),%edx
c0004aa1:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/lib/kernel/list.c:46
	pelem->next->prev = pelem->prev;
c0004aa4:	8b 45 08             	mov    0x8(%ebp),%eax
c0004aa7:	8b 40 04             	mov    0x4(%eax),%eax
c0004aaa:	8b 55 08             	mov    0x8(%ebp),%edx
c0004aad:	8b 12                	mov    (%edx),%edx
c0004aaf:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/lib/kernel/list.c:48

	intr_set_status(old_status);
c0004ab1:	83 ec 0c             	sub    $0xc,%esp
c0004ab4:	ff 75 f4             	pushl  -0xc(%ebp)
c0004ab7:	e8 86 d0 ff ff       	call   c0001b42 <intr_set_status>
c0004abc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:49
}
c0004abf:	90                   	nop
c0004ac0:	c9                   	leave  
c0004ac1:	c3                   	ret    

c0004ac2 <list_pop>:
list_pop():
/work/x86_os_my/lib/kernel/list.c:52

/* 将链表第一个元素弹出并返回,类似栈的pop操作 */
struct list_elem* list_pop(struct list* plist) {
c0004ac2:	55                   	push   %ebp
c0004ac3:	89 e5                	mov    %esp,%ebp
c0004ac5:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/kernel/list.c:53
	struct list_elem* elem = plist->head.next;
c0004ac8:	8b 45 08             	mov    0x8(%ebp),%eax
c0004acb:	8b 40 04             	mov    0x4(%eax),%eax
c0004ace:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/list.c:54
	list_remove(elem);
c0004ad1:	83 ec 0c             	sub    $0xc,%esp
c0004ad4:	ff 75 f4             	pushl  -0xc(%ebp)
c0004ad7:	e8 ac ff ff ff       	call   c0004a88 <list_remove>
c0004adc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:55
	return elem;
c0004adf:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/lib/kernel/list.c:56
} 
c0004ae2:	c9                   	leave  
c0004ae3:	c3                   	ret    

c0004ae4 <elem_find>:
elem_find():
/work/x86_os_my/lib/kernel/list.c:59

/* 从链表中查找元素obj_elem,成功时返回true,失败时返回false */
bool elem_find(struct list* plist, struct list_elem* obj_elem) {
c0004ae4:	55                   	push   %ebp
c0004ae5:	89 e5                	mov    %esp,%ebp
c0004ae7:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:60
	struct list_elem* elem = plist->head.next;
c0004aea:	8b 45 08             	mov    0x8(%ebp),%eax
c0004aed:	8b 40 04             	mov    0x4(%eax),%eax
c0004af0:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/kernel/list.c:61
	while (elem != &plist->tail) {
c0004af3:	eb 18                	jmp    c0004b0d <elem_find+0x29>
/work/x86_os_my/lib/kernel/list.c:62
	if (elem == obj_elem) {
c0004af5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0004af8:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0004afb:	75 07                	jne    c0004b04 <elem_find+0x20>
/work/x86_os_my/lib/kernel/list.c:63
		return true;
c0004afd:	b8 01 00 00 00       	mov    $0x1,%eax
c0004b02:	eb 19                	jmp    c0004b1d <elem_find+0x39>
/work/x86_os_my/lib/kernel/list.c:65
	}
		elem = elem->next;
c0004b04:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0004b07:	8b 40 04             	mov    0x4(%eax),%eax
c0004b0a:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/kernel/list.c:61
} 

/* 从链表中查找元素obj_elem,成功时返回true,失败时返回false */
bool elem_find(struct list* plist, struct list_elem* obj_elem) {
	struct list_elem* elem = plist->head.next;
	while (elem != &plist->tail) {
c0004b0d:	8b 45 08             	mov    0x8(%ebp),%eax
c0004b10:	83 c0 08             	add    $0x8,%eax
c0004b13:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0004b16:	75 dd                	jne    c0004af5 <elem_find+0x11>
/work/x86_os_my/lib/kernel/list.c:67
	if (elem == obj_elem) {
		return true;
	}
		elem = elem->next;
	}
	return false;
c0004b18:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/lib/kernel/list.c:68
}
c0004b1d:	c9                   	leave  
c0004b1e:	c3                   	ret    

c0004b1f <list_traversal>:
list_traversal():
/work/x86_os_my/lib/kernel/list.c:74

/* 把列表plist中的每个元素elem和arg传给回调函数func,
 * arg给func用来判断elem是否符合条件.
 * 本函数的功能是遍历列表内所有元素,逐个判断是否有符合条件的元素。
 * 找到符合条件的元素返回元素指针,否则返回NULL. */
struct list_elem* list_traversal(struct list* plist, function func, int arg) {
c0004b1f:	55                   	push   %ebp
c0004b20:	89 e5                	mov    %esp,%ebp
c0004b22:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/kernel/list.c:75
	struct list_elem* elem = plist->head.next;
c0004b25:	8b 45 08             	mov    0x8(%ebp),%eax
c0004b28:	8b 40 04             	mov    0x4(%eax),%eax
c0004b2b:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/list.c:77
	/* 如果队列为空,就必然没有符合条件的结点,故直接返回NULL */
	if (list_empty(plist)) { 
c0004b2e:	83 ec 0c             	sub    $0xc,%esp
c0004b31:	ff 75 08             	pushl  0x8(%ebp)
c0004b34:	e8 78 00 00 00       	call   c0004bb1 <list_empty>
c0004b39:	83 c4 10             	add    $0x10,%esp
c0004b3c:	85 c0                	test   %eax,%eax
c0004b3e:	74 2a                	je     c0004b6a <list_traversal+0x4b>
/work/x86_os_my/lib/kernel/list.c:78
		return NULL;
c0004b40:	b8 00 00 00 00       	mov    $0x0,%eax
c0004b45:	eb 33                	jmp    c0004b7a <list_traversal+0x5b>
/work/x86_os_my/lib/kernel/list.c:82
	}

	while (elem != &plist->tail) {
	if (func(elem, arg)) {		// func返回ture则认为该元素在回调函数中符合条件,命中,故停止继续遍历
c0004b47:	83 ec 08             	sub    $0x8,%esp
c0004b4a:	ff 75 10             	pushl  0x10(%ebp)
c0004b4d:	ff 75 f4             	pushl  -0xc(%ebp)
c0004b50:	8b 45 0c             	mov    0xc(%ebp),%eax
c0004b53:	ff d0                	call   *%eax
c0004b55:	83 c4 10             	add    $0x10,%esp
c0004b58:	85 c0                	test   %eax,%eax
c0004b5a:	74 05                	je     c0004b61 <list_traversal+0x42>
/work/x86_os_my/lib/kernel/list.c:83
		return elem;
c0004b5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004b5f:	eb 19                	jmp    c0004b7a <list_traversal+0x5b>
/work/x86_os_my/lib/kernel/list.c:85
	}
		elem = elem->next;		// 若回调函数func返回false,则继续遍历
c0004b61:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004b64:	8b 40 04             	mov    0x4(%eax),%eax
c0004b67:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/list.c:81
	/* 如果队列为空,就必然没有符合条件的结点,故直接返回NULL */
	if (list_empty(plist)) { 
		return NULL;
	}

	while (elem != &plist->tail) {
c0004b6a:	8b 45 08             	mov    0x8(%ebp),%eax
c0004b6d:	83 c0 08             	add    $0x8,%eax
c0004b70:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0004b73:	75 d2                	jne    c0004b47 <list_traversal+0x28>
/work/x86_os_my/lib/kernel/list.c:87
	if (func(elem, arg)) {		// func返回ture则认为该元素在回调函数中符合条件,命中,故停止继续遍历
		return elem;
	}
		elem = elem->next;		// 若回调函数func返回false,则继续遍历
	}
	return NULL;
c0004b75:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/lib/kernel/list.c:88
}
c0004b7a:	c9                   	leave  
c0004b7b:	c3                   	ret    

c0004b7c <list_len>:
list_len():
/work/x86_os_my/lib/kernel/list.c:91

/* 返回链表长度 */
uint32_t list_len(struct list* plist) {
c0004b7c:	55                   	push   %ebp
c0004b7d:	89 e5                	mov    %esp,%ebp
c0004b7f:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:92
	struct list_elem* elem = plist->head.next;
c0004b82:	8b 45 08             	mov    0x8(%ebp),%eax
c0004b85:	8b 40 04             	mov    0x4(%eax),%eax
c0004b88:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/kernel/list.c:93
	uint32_t length = 0;
c0004b8b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
/work/x86_os_my/lib/kernel/list.c:94
	while (elem != &plist->tail) {
c0004b92:	eb 0d                	jmp    c0004ba1 <list_len+0x25>
/work/x86_os_my/lib/kernel/list.c:95
		length++; 
c0004b94:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
/work/x86_os_my/lib/kernel/list.c:96
		elem = elem->next;
c0004b98:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0004b9b:	8b 40 04             	mov    0x4(%eax),%eax
c0004b9e:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/kernel/list.c:94

/* 返回链表长度 */
uint32_t list_len(struct list* plist) {
	struct list_elem* elem = plist->head.next;
	uint32_t length = 0;
	while (elem != &plist->tail) {
c0004ba1:	8b 45 08             	mov    0x8(%ebp),%eax
c0004ba4:	83 c0 08             	add    $0x8,%eax
c0004ba7:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0004baa:	75 e8                	jne    c0004b94 <list_len+0x18>
/work/x86_os_my/lib/kernel/list.c:98
		length++; 
		elem = elem->next;
	}
	return length;
c0004bac:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/kernel/list.c:99
}
c0004baf:	c9                   	leave  
c0004bb0:	c3                   	ret    

c0004bb1 <list_empty>:
list_empty():
/work/x86_os_my/lib/kernel/list.c:102

/* 判断链表是否为空,空时返回true,否则返回false */
bool list_empty(struct list* plist) {		// 判断队列是否为空
c0004bb1:	55                   	push   %ebp
c0004bb2:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/lib/kernel/list.c:103
	return (plist->head.next == &plist->tail ? true : false);
c0004bb4:	8b 45 08             	mov    0x8(%ebp),%eax
c0004bb7:	8b 40 04             	mov    0x4(%eax),%eax
c0004bba:	8b 55 08             	mov    0x8(%ebp),%edx
c0004bbd:	83 c2 08             	add    $0x8,%edx
c0004bc0:	39 d0                	cmp    %edx,%eax
c0004bc2:	0f 94 c0             	sete   %al
c0004bc5:	0f b6 c0             	movzbl %al,%eax
/work/x86_os_my/lib/kernel/list.c:104
}
c0004bc8:	5d                   	pop    %ebp
c0004bc9:	c3                   	ret    
c0004bca:	66 90                	xchg   %ax,%ax
c0004bcc:	66 90                	xchg   %ax,%ax
c0004bce:	66 90                	xchg   %ax,%ax

c0004bd0 <switch_to>:
switch_to():
c0004bd0:	56                   	push   %esi
c0004bd1:	57                   	push   %edi
c0004bd2:	53                   	push   %ebx
c0004bd3:	55                   	push   %ebp
c0004bd4:	8b 44 24 14          	mov    0x14(%esp),%eax
c0004bd8:	89 20                	mov    %esp,(%eax)
c0004bda:	8b 44 24 18          	mov    0x18(%esp),%eax
c0004bde:	8b 20                	mov    (%eax),%esp
c0004be0:	5d                   	pop    %ebp
c0004be1:	5b                   	pop    %ebx
c0004be2:	5f                   	pop    %edi
c0004be3:	5e                   	pop    %esi
c0004be4:	c3                   	ret    

c0004be5 <console_init>:
console_init():
/work/x86_os_my/device/console.c:9
#include "sync.h"
#include "thread.h"
static struct lock console_lock;	// 控制台锁

/* 初始化终端 */
void console_init() {
c0004be5:	55                   	push   %ebp
c0004be6:	89 e5                	mov    %esp,%ebp
c0004be8:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/console.c:10
	lock_init(&console_lock);
c0004beb:	83 ec 0c             	sub    $0xc,%esp
c0004bee:	68 04 30 01 c0       	push   $0xc0013004
c0004bf3:	e8 cd 00 00 00       	call   c0004cc5 <lock_init>
c0004bf8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:11
}
c0004bfb:	90                   	nop
c0004bfc:	c9                   	leave  
c0004bfd:	c3                   	ret    

c0004bfe <console_acquire>:
console_acquire():
/work/x86_os_my/device/console.c:14

/* 获取终端 */
void console_acquire() {
c0004bfe:	55                   	push   %ebp
c0004bff:	89 e5                	mov    %esp,%ebp
c0004c01:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/console.c:15
	lock_acquire(&console_lock);
c0004c04:	83 ec 0c             	sub    $0xc,%esp
c0004c07:	68 04 30 01 c0       	push   $0xc0013004
c0004c0c:	e8 8e 02 00 00       	call   c0004e9f <lock_acquire>
c0004c11:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:16
}
c0004c14:	90                   	nop
c0004c15:	c9                   	leave  
c0004c16:	c3                   	ret    

c0004c17 <console_release>:
console_release():
/work/x86_os_my/device/console.c:19

/* 释放终端 */
void console_release() {
c0004c17:	55                   	push   %ebp
c0004c18:	89 e5                	mov    %esp,%ebp
c0004c1a:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/console.c:20
	lock_release(&console_lock);
c0004c1d:	83 ec 0c             	sub    $0xc,%esp
c0004c20:	68 04 30 01 c0       	push   $0xc0013004
c0004c25:	e8 ec 02 00 00       	call   c0004f16 <lock_release>
c0004c2a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:21
}
c0004c2d:	90                   	nop
c0004c2e:	c9                   	leave  
c0004c2f:	c3                   	ret    

c0004c30 <console_put_str>:
console_put_str():
/work/x86_os_my/device/console.c:24

/* 终端中输出字符串 */
void console_put_str(char* str) {
c0004c30:	55                   	push   %ebp
c0004c31:	89 e5                	mov    %esp,%ebp
c0004c33:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/console.c:25
	console_acquire();
c0004c36:	e8 c3 ff ff ff       	call   c0004bfe <console_acquire>
/work/x86_os_my/device/console.c:26
	put_str(str);
c0004c3b:	83 ec 0c             	sub    $0xc,%esp
c0004c3e:	ff 75 08             	pushl  0x8(%ebp)
c0004c41:	e8 0a d7 ff ff       	call   c0002350 <put_str>
c0004c46:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:27
	console_release();
c0004c49:	e8 c9 ff ff ff       	call   c0004c17 <console_release>
/work/x86_os_my/device/console.c:28
}
c0004c4e:	90                   	nop
c0004c4f:	c9                   	leave  
c0004c50:	c3                   	ret    

c0004c51 <console_put_char>:
console_put_char():
/work/x86_os_my/device/console.c:31

/* 终端中输出字符 */
void console_put_char(uint8_t char_asci) {
c0004c51:	55                   	push   %ebp
c0004c52:	89 e5                	mov    %esp,%ebp
c0004c54:	83 ec 18             	sub    $0x18,%esp
c0004c57:	8b 45 08             	mov    0x8(%ebp),%eax
c0004c5a:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/device/console.c:32
	console_acquire();
c0004c5d:	e8 9c ff ff ff       	call   c0004bfe <console_acquire>
/work/x86_os_my/device/console.c:33
	put_char(char_asci);
c0004c62:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0004c66:	83 ec 0c             	sub    $0xc,%esp
c0004c69:	50                   	push   %eax
c0004c6a:	e8 ff d6 ff ff       	call   c000236e <put_char>
c0004c6f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:34
	console_release();
c0004c72:	e8 a0 ff ff ff       	call   c0004c17 <console_release>
/work/x86_os_my/device/console.c:35
}
c0004c77:	90                   	nop
c0004c78:	c9                   	leave  
c0004c79:	c3                   	ret    

c0004c7a <console_put_int>:
console_put_int():
/work/x86_os_my/device/console.c:38

/* 终端中输出16进制整数 */
void console_put_int(uint32_t num) {
c0004c7a:	55                   	push   %ebp
c0004c7b:	89 e5                	mov    %esp,%ebp
c0004c7d:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/console.c:39
	console_acquire();
c0004c80:	e8 79 ff ff ff       	call   c0004bfe <console_acquire>
/work/x86_os_my/device/console.c:40
	put_int(num);
c0004c85:	83 ec 0c             	sub    $0xc,%esp
c0004c88:	ff 75 08             	pushl  0x8(%ebp)
c0004c8b:	e8 ea d7 ff ff       	call   c000247a <put_int>
c0004c90:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:41
	console_release();
c0004c93:	e8 7f ff ff ff       	call   c0004c17 <console_release>
/work/x86_os_my/device/console.c:42
}
c0004c98:	90                   	nop
c0004c99:	c9                   	leave  
c0004c9a:	c3                   	ret    

c0004c9b <sema_init>:
sema_init():
/work/x86_os_my/thread/sync.c:8
#include "global.h"
#include "debug.h"
#include "interrupt.h"

/* 初始化信号量 */
void sema_init(struct semaphore* psema, uint8_t value) {
c0004c9b:	55                   	push   %ebp
c0004c9c:	89 e5                	mov    %esp,%ebp
c0004c9e:	83 ec 18             	sub    $0x18,%esp
c0004ca1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0004ca4:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/thread/sync.c:9
	psema->value = value;       // 为信号量赋初值
c0004ca7:	8b 45 08             	mov    0x8(%ebp),%eax
c0004caa:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
c0004cae:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/thread/sync.c:10
	list_init(&psema->waiters); //初始化信号量的等待队列
c0004cb0:	8b 45 08             	mov    0x8(%ebp),%eax
c0004cb3:	83 c0 04             	add    $0x4,%eax
c0004cb6:	83 ec 0c             	sub    $0xc,%esp
c0004cb9:	50                   	push   %eax
c0004cba:	e8 1a fd ff ff       	call   c00049d9 <list_init>
c0004cbf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:11
}
c0004cc2:	90                   	nop
c0004cc3:	c9                   	leave  
c0004cc4:	c3                   	ret    

c0004cc5 <lock_init>:
lock_init():
/work/x86_os_my/thread/sync.c:14

/* 初始化锁plock */
void lock_init(struct lock* plock) {
c0004cc5:	55                   	push   %ebp
c0004cc6:	89 e5                	mov    %esp,%ebp
c0004cc8:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/sync.c:15
	plock->holder = NULL;
c0004ccb:	8b 45 08             	mov    0x8(%ebp),%eax
c0004cce:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/thread/sync.c:16
	plock->holder_repeat_nr = 0;
c0004cd4:	8b 45 08             	mov    0x8(%ebp),%eax
c0004cd7:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
/work/x86_os_my/thread/sync.c:17
	sema_init(&plock->semaphore, 1);  // 信号量初值为1
c0004cde:	8b 45 08             	mov    0x8(%ebp),%eax
c0004ce1:	83 c0 04             	add    $0x4,%eax
c0004ce4:	83 ec 08             	sub    $0x8,%esp
c0004ce7:	6a 01                	push   $0x1
c0004ce9:	50                   	push   %eax
c0004cea:	e8 ac ff ff ff       	call   c0004c9b <sema_init>
c0004cef:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:18
}
c0004cf2:	90                   	nop
c0004cf3:	c9                   	leave  
c0004cf4:	c3                   	ret    

c0004cf5 <sema_down>:
sema_down():
/work/x86_os_my/thread/sync.c:21

/* 信号量down操作 */
void sema_down(struct semaphore* psema) {
c0004cf5:	55                   	push   %ebp
c0004cf6:	89 e5                	mov    %esp,%ebp
c0004cf8:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/sync.c:23
	/* 关中断来保证原子操作 */
	enum intr_status old_status = intr_disable();
c0004cfb:	e8 19 ce ff ff       	call   c0001b19 <intr_disable>
c0004d00:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/sync.c:25
	
	while(psema->value == 0) {			// 若value为0,表示已经被别人持有【while多次判断】
c0004d03:	e9 98 00 00 00       	jmp    c0004da0 <sema_down+0xab>
/work/x86_os_my/thread/sync.c:26
		ASSERT(!elem_find(&psema->waiters, &running_thread()->general_tag));
c0004d08:	e8 df f0 ff ff       	call   c0003dec <running_thread>
c0004d0d:	8d 50 44             	lea    0x44(%eax),%edx
c0004d10:	8b 45 08             	mov    0x8(%ebp),%eax
c0004d13:	83 c0 04             	add    $0x4,%eax
c0004d16:	83 ec 08             	sub    $0x8,%esp
c0004d19:	52                   	push   %edx
c0004d1a:	50                   	push   %eax
c0004d1b:	e8 c4 fd ff ff       	call   c0004ae4 <elem_find>
c0004d20:	83 c4 10             	add    $0x10,%esp
c0004d23:	85 c0                	test   %eax,%eax
c0004d25:	74 19                	je     c0004d40 <sema_down+0x4b>
/work/x86_os_my/thread/sync.c:26 (discriminator 1)
c0004d27:	68 00 de 00 c0       	push   $0xc000de00
c0004d2c:	68 04 df 00 c0       	push   $0xc000df04
c0004d31:	6a 1a                	push   $0x1a
c0004d33:	68 3c de 00 c0       	push   $0xc000de3c
c0004d38:	e8 c4 d7 ff ff       	call   c0002501 <panic_spin>
c0004d3d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:28
		/* 当前线程不应该已在信号量的waiters队列中 */
		if (elem_find(&psema->waiters, &running_thread()->general_tag)) {
c0004d40:	e8 a7 f0 ff ff       	call   c0003dec <running_thread>
c0004d45:	8d 50 44             	lea    0x44(%eax),%edx
c0004d48:	8b 45 08             	mov    0x8(%ebp),%eax
c0004d4b:	83 c0 04             	add    $0x4,%eax
c0004d4e:	83 ec 08             	sub    $0x8,%esp
c0004d51:	52                   	push   %edx
c0004d52:	50                   	push   %eax
c0004d53:	e8 8c fd ff ff       	call   c0004ae4 <elem_find>
c0004d58:	83 c4 10             	add    $0x10,%esp
c0004d5b:	85 c0                	test   %eax,%eax
c0004d5d:	74 19                	je     c0004d78 <sema_down+0x83>
/work/x86_os_my/thread/sync.c:29
			PANIC("sema_down: thread blocked has been in waiters_list\n");
c0004d5f:	68 4c de 00 c0       	push   $0xc000de4c
c0004d64:	68 04 df 00 c0       	push   $0xc000df04
c0004d69:	6a 1d                	push   $0x1d
c0004d6b:	68 3c de 00 c0       	push   $0xc000de3c
c0004d70:	e8 8c d7 ff ff       	call   c0002501 <panic_spin>
c0004d75:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:32
		}
		/* 若信号量的值等于0,则当前线程把自己加入该锁的等待队列,然后阻塞自己 */
		list_append(&psema->waiters, &running_thread()->general_tag);
c0004d78:	e8 6f f0 ff ff       	call   c0003dec <running_thread>
c0004d7d:	8d 50 44             	lea    0x44(%eax),%edx
c0004d80:	8b 45 08             	mov    0x8(%ebp),%eax
c0004d83:	83 c0 04             	add    $0x4,%eax
c0004d86:	83 ec 08             	sub    $0x8,%esp
c0004d89:	52                   	push   %edx
c0004d8a:	50                   	push   %eax
c0004d8b:	e8 da fc ff ff       	call   c0004a6a <list_append>
c0004d90:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:33
		thread_block(TASK_BLOCKED);		// 阻塞线程,直到被唤醒
c0004d93:	83 ec 0c             	sub    $0xc,%esp
c0004d96:	6a 02                	push   $0x2
c0004d98:	e8 af f5 ff ff       	call   c000434c <thread_block>
c0004d9d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:25
/* 信号量down操作 */
void sema_down(struct semaphore* psema) {
	/* 关中断来保证原子操作 */
	enum intr_status old_status = intr_disable();
	
	while(psema->value == 0) {			// 若value为0,表示已经被别人持有【while多次判断】
c0004da0:	8b 45 08             	mov    0x8(%ebp),%eax
c0004da3:	0f b6 00             	movzbl (%eax),%eax
c0004da6:	84 c0                	test   %al,%al
c0004da8:	0f 84 5a ff ff ff    	je     c0004d08 <sema_down+0x13>
/work/x86_os_my/thread/sync.c:36
		/* 若信号量的值等于0,则当前线程把自己加入该锁的等待队列,然后阻塞自己 */
		list_append(&psema->waiters, &running_thread()->general_tag);
		thread_block(TASK_BLOCKED);		// 阻塞线程,直到被唤醒
	}
	/* 若value为1或被唤醒后,会执行下面的代码,也就是获得了锁。*/
	psema->value--;
c0004dae:	8b 45 08             	mov    0x8(%ebp),%eax
c0004db1:	0f b6 00             	movzbl (%eax),%eax
c0004db4:	8d 50 ff             	lea    -0x1(%eax),%edx
c0004db7:	8b 45 08             	mov    0x8(%ebp),%eax
c0004dba:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/thread/sync.c:37
	ASSERT(psema->value == 0);
c0004dbc:	8b 45 08             	mov    0x8(%ebp),%eax
c0004dbf:	0f b6 00             	movzbl (%eax),%eax
c0004dc2:	84 c0                	test   %al,%al
c0004dc4:	74 19                	je     c0004ddf <sema_down+0xea>
/work/x86_os_my/thread/sync.c:37 (discriminator 1)
c0004dc6:	68 80 de 00 c0       	push   $0xc000de80
c0004dcb:	68 04 df 00 c0       	push   $0xc000df04
c0004dd0:	6a 25                	push   $0x25
c0004dd2:	68 3c de 00 c0       	push   $0xc000de3c
c0004dd7:	e8 25 d7 ff ff       	call   c0002501 <panic_spin>
c0004ddc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:40
	
	/* 恢复之前的中断状态 */
	intr_set_status(old_status);
c0004ddf:	83 ec 0c             	sub    $0xc,%esp
c0004de2:	ff 75 f4             	pushl  -0xc(%ebp)
c0004de5:	e8 58 cd ff ff       	call   c0001b42 <intr_set_status>
c0004dea:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:41
}
c0004ded:	90                   	nop
c0004dee:	c9                   	leave  
c0004def:	c3                   	ret    

c0004df0 <sema_up>:
sema_up():
/work/x86_os_my/thread/sync.c:44

/* 信号量的up操作 */
void sema_up(struct semaphore* psema) {
c0004df0:	55                   	push   %ebp
c0004df1:	89 e5                	mov    %esp,%ebp
c0004df3:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/sync.c:46
	/* 关中断,保证原子操作 */
	enum intr_status old_status = intr_disable();
c0004df6:	e8 1e cd ff ff       	call   c0001b19 <intr_disable>
c0004dfb:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/sync.c:48
	
	ASSERT(psema->value == 0);
c0004dfe:	8b 45 08             	mov    0x8(%ebp),%eax
c0004e01:	0f b6 00             	movzbl (%eax),%eax
c0004e04:	84 c0                	test   %al,%al
c0004e06:	74 19                	je     c0004e21 <sema_up+0x31>
/work/x86_os_my/thread/sync.c:48 (discriminator 1)
c0004e08:	68 80 de 00 c0       	push   $0xc000de80
c0004e0d:	68 10 df 00 c0       	push   $0xc000df10
c0004e12:	6a 30                	push   $0x30
c0004e14:	68 3c de 00 c0       	push   $0xc000de3c
c0004e19:	e8 e3 d6 ff ff       	call   c0002501 <panic_spin>
c0004e1e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:49
	if (!list_empty(&psema->waiters)) {
c0004e21:	8b 45 08             	mov    0x8(%ebp),%eax
c0004e24:	83 c0 04             	add    $0x4,%eax
c0004e27:	83 ec 0c             	sub    $0xc,%esp
c0004e2a:	50                   	push   %eax
c0004e2b:	e8 81 fd ff ff       	call   c0004bb1 <list_empty>
c0004e30:	83 c4 10             	add    $0x10,%esp
c0004e33:	85 c0                	test   %eax,%eax
c0004e35:	75 26                	jne    c0004e5d <sema_up+0x6d>
/work/x86_os_my/thread/sync.c:50
		struct task_struct* thread_blocked = elem2entry(struct task_struct, general_tag, list_pop(&psema->waiters));
c0004e37:	8b 45 08             	mov    0x8(%ebp),%eax
c0004e3a:	83 c0 04             	add    $0x4,%eax
c0004e3d:	83 ec 0c             	sub    $0xc,%esp
c0004e40:	50                   	push   %eax
c0004e41:	e8 7c fc ff ff       	call   c0004ac2 <list_pop>
c0004e46:	83 c4 10             	add    $0x10,%esp
c0004e49:	83 e8 44             	sub    $0x44,%eax
c0004e4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/thread/sync.c:51
		thread_unblock(thread_blocked);
c0004e4f:	83 ec 0c             	sub    $0xc,%esp
c0004e52:	ff 75 f0             	pushl  -0x10(%ebp)
c0004e55:	e8 55 f5 ff ff       	call   c00043af <thread_unblock>
c0004e5a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:53
	}
	psema->value++;
c0004e5d:	8b 45 08             	mov    0x8(%ebp),%eax
c0004e60:	0f b6 00             	movzbl (%eax),%eax
c0004e63:	8d 50 01             	lea    0x1(%eax),%edx
c0004e66:	8b 45 08             	mov    0x8(%ebp),%eax
c0004e69:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/thread/sync.c:54
	ASSERT(psema->value == 1);
c0004e6b:	8b 45 08             	mov    0x8(%ebp),%eax
c0004e6e:	0f b6 00             	movzbl (%eax),%eax
c0004e71:	3c 01                	cmp    $0x1,%al
c0004e73:	74 19                	je     c0004e8e <sema_up+0x9e>
/work/x86_os_my/thread/sync.c:54 (discriminator 1)
c0004e75:	68 92 de 00 c0       	push   $0xc000de92
c0004e7a:	68 10 df 00 c0       	push   $0xc000df10
c0004e7f:	6a 36                	push   $0x36
c0004e81:	68 3c de 00 c0       	push   $0xc000de3c
c0004e86:	e8 76 d6 ff ff       	call   c0002501 <panic_spin>
c0004e8b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:57
	
	/* 恢复之前的中断状态 */
	intr_set_status(old_status);
c0004e8e:	83 ec 0c             	sub    $0xc,%esp
c0004e91:	ff 75 f4             	pushl  -0xc(%ebp)
c0004e94:	e8 a9 cc ff ff       	call   c0001b42 <intr_set_status>
c0004e99:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:58
}
c0004e9c:	90                   	nop
c0004e9d:	c9                   	leave  
c0004e9e:	c3                   	ret    

c0004e9f <lock_acquire>:
lock_acquire():
/work/x86_os_my/thread/sync.c:61

/* 获取锁plock */
void lock_acquire(struct lock* plock) {
c0004e9f:	55                   	push   %ebp
c0004ea0:	89 e5                	mov    %esp,%ebp
c0004ea2:	53                   	push   %ebx
c0004ea3:	83 ec 04             	sub    $0x4,%esp
/work/x86_os_my/thread/sync.c:63
	/* 排除曾经自己已经持有锁但还未将其释放的情况。*/
	if (plock->holder != running_thread()) {
c0004ea6:	8b 45 08             	mov    0x8(%ebp),%eax
c0004ea9:	8b 18                	mov    (%eax),%ebx
c0004eab:	e8 3c ef ff ff       	call   c0003dec <running_thread>
c0004eb0:	39 c3                	cmp    %eax,%ebx
c0004eb2:	74 4d                	je     c0004f01 <lock_acquire+0x62>
/work/x86_os_my/thread/sync.c:64
		sema_down(&plock->semaphore);	// 对信号量P操作,原子操作
c0004eb4:	8b 45 08             	mov    0x8(%ebp),%eax
c0004eb7:	83 c0 04             	add    $0x4,%eax
c0004eba:	83 ec 0c             	sub    $0xc,%esp
c0004ebd:	50                   	push   %eax
c0004ebe:	e8 32 fe ff ff       	call   c0004cf5 <sema_down>
c0004ec3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:65
		plock->holder = running_thread();
c0004ec6:	e8 21 ef ff ff       	call   c0003dec <running_thread>
c0004ecb:	89 c2                	mov    %eax,%edx
c0004ecd:	8b 45 08             	mov    0x8(%ebp),%eax
c0004ed0:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/thread/sync.c:66
		ASSERT(plock->holder_repeat_nr == 0);
c0004ed2:	8b 45 08             	mov    0x8(%ebp),%eax
c0004ed5:	8b 40 18             	mov    0x18(%eax),%eax
c0004ed8:	85 c0                	test   %eax,%eax
c0004eda:	74 19                	je     c0004ef5 <lock_acquire+0x56>
/work/x86_os_my/thread/sync.c:66 (discriminator 1)
c0004edc:	68 a4 de 00 c0       	push   $0xc000dea4
c0004ee1:	68 18 df 00 c0       	push   $0xc000df18
c0004ee6:	6a 42                	push   $0x42
c0004ee8:	68 3c de 00 c0       	push   $0xc000de3c
c0004eed:	e8 0f d6 ff ff       	call   c0002501 <panic_spin>
c0004ef2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:67
		plock->holder_repeat_nr = 1;
c0004ef5:	8b 45 08             	mov    0x8(%ebp),%eax
c0004ef8:	c7 40 18 01 00 00 00 	movl   $0x1,0x18(%eax)
/work/x86_os_my/thread/sync.c:71
	} else {
		plock->holder_repeat_nr++;
	}
}
c0004eff:	eb 0f                	jmp    c0004f10 <lock_acquire+0x71>
/work/x86_os_my/thread/sync.c:69
		sema_down(&plock->semaphore);	// 对信号量P操作,原子操作
		plock->holder = running_thread();
		ASSERT(plock->holder_repeat_nr == 0);
		plock->holder_repeat_nr = 1;
	} else {
		plock->holder_repeat_nr++;
c0004f01:	8b 45 08             	mov    0x8(%ebp),%eax
c0004f04:	8b 40 18             	mov    0x18(%eax),%eax
c0004f07:	8d 50 01             	lea    0x1(%eax),%edx
c0004f0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0004f0d:	89 50 18             	mov    %edx,0x18(%eax)
/work/x86_os_my/thread/sync.c:71
	}
}
c0004f10:	90                   	nop
c0004f11:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0004f14:	c9                   	leave  
c0004f15:	c3                   	ret    

c0004f16 <lock_release>:
lock_release():
/work/x86_os_my/thread/sync.c:74

/* 释放锁plock */
void lock_release(struct lock* plock) {
c0004f16:	55                   	push   %ebp
c0004f17:	89 e5                	mov    %esp,%ebp
c0004f19:	53                   	push   %ebx
c0004f1a:	83 ec 04             	sub    $0x4,%esp
/work/x86_os_my/thread/sync.c:75
	ASSERT(plock->holder == running_thread());
c0004f1d:	8b 45 08             	mov    0x8(%ebp),%eax
c0004f20:	8b 18                	mov    (%eax),%ebx
c0004f22:	e8 c5 ee ff ff       	call   c0003dec <running_thread>
c0004f27:	39 c3                	cmp    %eax,%ebx
c0004f29:	74 19                	je     c0004f44 <lock_release+0x2e>
/work/x86_os_my/thread/sync.c:75 (discriminator 1)
c0004f2b:	68 c4 de 00 c0       	push   $0xc000dec4
c0004f30:	68 28 df 00 c0       	push   $0xc000df28
c0004f35:	6a 4b                	push   $0x4b
c0004f37:	68 3c de 00 c0       	push   $0xc000de3c
c0004f3c:	e8 c0 d5 ff ff       	call   c0002501 <panic_spin>
c0004f41:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:76
	if (plock->holder_repeat_nr > 1) {
c0004f44:	8b 45 08             	mov    0x8(%ebp),%eax
c0004f47:	8b 40 18             	mov    0x18(%eax),%eax
c0004f4a:	83 f8 01             	cmp    $0x1,%eax
c0004f4d:	76 11                	jbe    c0004f60 <lock_release+0x4a>
/work/x86_os_my/thread/sync.c:77
		plock->holder_repeat_nr--;
c0004f4f:	8b 45 08             	mov    0x8(%ebp),%eax
c0004f52:	8b 40 18             	mov    0x18(%eax),%eax
c0004f55:	8d 50 ff             	lea    -0x1(%eax),%edx
c0004f58:	8b 45 08             	mov    0x8(%ebp),%eax
c0004f5b:	89 50 18             	mov    %edx,0x18(%eax)
/work/x86_os_my/thread/sync.c:78
		return;
c0004f5e:	eb 49                	jmp    c0004fa9 <lock_release+0x93>
/work/x86_os_my/thread/sync.c:80
	}
	ASSERT(plock->holder_repeat_nr == 1);
c0004f60:	8b 45 08             	mov    0x8(%ebp),%eax
c0004f63:	8b 40 18             	mov    0x18(%eax),%eax
c0004f66:	83 f8 01             	cmp    $0x1,%eax
c0004f69:	74 19                	je     c0004f84 <lock_release+0x6e>
/work/x86_os_my/thread/sync.c:80 (discriminator 1)
c0004f6b:	68 e6 de 00 c0       	push   $0xc000dee6
c0004f70:	68 28 df 00 c0       	push   $0xc000df28
c0004f75:	6a 50                	push   $0x50
c0004f77:	68 3c de 00 c0       	push   $0xc000de3c
c0004f7c:	e8 80 d5 ff ff       	call   c0002501 <panic_spin>
c0004f81:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:82

	plock->holder = NULL;			// 把锁的持有者置空放在V操作之前
c0004f84:	8b 45 08             	mov    0x8(%ebp),%eax
c0004f87:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/thread/sync.c:83
	plock->holder_repeat_nr = 0;
c0004f8d:	8b 45 08             	mov    0x8(%ebp),%eax
c0004f90:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
/work/x86_os_my/thread/sync.c:84
	sema_up(&plock->semaphore);		// 信号量的V操作,也是原子操作
c0004f97:	8b 45 08             	mov    0x8(%ebp),%eax
c0004f9a:	83 c0 04             	add    $0x4,%eax
c0004f9d:	83 ec 0c             	sub    $0xc,%esp
c0004fa0:	50                   	push   %eax
c0004fa1:	e8 4a fe ff ff       	call   c0004df0 <sema_up>
c0004fa6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:85
}
c0004fa9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0004fac:	c9                   	leave  
c0004fad:	c3                   	ret    

c0004fae <inb>:
inb():
/work/x86_os_my/lib/kernel/io.h:36
   asm volatile ("cld; rep outsw" : "+S" (addr), "+c" (word_cnt) : "d" (port));
/******************************************************/
}

/* 将从端口port读入的一个字节返回 */
static inline uint8_t inb(uint16_t port) {
c0004fae:	55                   	push   %ebp
c0004faf:	89 e5                	mov    %esp,%ebp
c0004fb1:	83 ec 14             	sub    $0x14,%esp
c0004fb4:	8b 45 08             	mov    0x8(%ebp),%eax
c0004fb7:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
/work/x86_os_my/lib/kernel/io.h:38
   uint8_t data;
   asm volatile ("inb %w1, %b0" : "=a" (data) : "Nd" (port));
c0004fbb:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0004fbf:	89 c2                	mov    %eax,%edx
c0004fc1:	ec                   	in     (%dx),%al
c0004fc2:	88 45 ff             	mov    %al,-0x1(%ebp)
/work/x86_os_my/lib/kernel/io.h:39
   return data;
c0004fc5:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
/work/x86_os_my/lib/kernel/io.h:40
}
c0004fc9:	c9                   	leave  
c0004fca:	c3                   	ret    

c0004fcb <intr_keyboard_handler>:
intr_keyboard_handler():
/work/x86_os_my/device/keyboard.c:111
/* 0x3A */	{caps_lock_char, caps_lock_char}
/*其它按键暂不处理*/
};

/* 键盘中断处理程序 */
static void intr_keyboard_handler(void) {
c0004fcb:	55                   	push   %ebp
c0004fcc:	89 e5                	mov    %esp,%ebp
c0004fce:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/device/keyboard.c:114

/* 这次中断发生前的上一次中断,以下任意三个键是否有按下 */
   bool ctrl_down_last = ctrl_status;	  
c0004fd1:	a1 20 30 01 c0       	mov    0xc0013020,%eax
c0004fd6:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/device/keyboard.c:115
   bool shift_down_last = shift_status;
c0004fd9:	a1 24 30 01 c0       	mov    0xc0013024,%eax
c0004fde:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/device/keyboard.c:116
   bool caps_lock_last = caps_lock_status;
c0004fe1:	a1 2c 30 01 c0       	mov    0xc001302c,%eax
c0004fe6:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/device/keyboard.c:119

   bool break_code;
   uint16_t scancode = inb(KBD_BUF_PORT);
c0004fe9:	6a 60                	push   $0x60
c0004feb:	e8 be ff ff ff       	call   c0004fae <inb>
c0004ff0:	83 c4 04             	add    $0x4,%esp
c0004ff3:	0f b6 c0             	movzbl %al,%eax
c0004ff6:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
/work/x86_os_my/device/keyboard.c:123

/* 若扫描码是e0开头的,表示此键的按下将产生多个扫描码,
 * 所以马上结束此次中断处理函数,等待下一个扫描码进来*/ 
   if (scancode == 0xe0) { 
c0004ffa:	66 81 7d f6 e0 00    	cmpw   $0xe0,-0xa(%ebp)
c0005000:	75 0f                	jne    c0005011 <intr_keyboard_handler+0x46>
/work/x86_os_my/device/keyboard.c:124
      ext_scancode = true;    // 打开e0标记
c0005002:	c7 05 30 30 01 c0 01 	movl   $0x1,0xc0013030
c0005009:	00 00 00 
/work/x86_os_my/device/keyboard.c:125
      return;
c000500c:	e9 50 02 00 00       	jmp    c0005261 <intr_keyboard_handler+0x296>
/work/x86_os_my/device/keyboard.c:129
   }

/* 如果上次是以0xe0开头,将扫描码合并 */
   if (ext_scancode) {
c0005011:	a1 30 30 01 c0       	mov    0xc0013030,%eax
c0005016:	85 c0                	test   %eax,%eax
c0005018:	74 10                	je     c000502a <intr_keyboard_handler+0x5f>
/work/x86_os_my/device/keyboard.c:130
      scancode = ((0xe000) | scancode);
c000501a:	66 81 4d f6 00 e0    	orw    $0xe000,-0xa(%ebp)
/work/x86_os_my/device/keyboard.c:131
      ext_scancode = false;   // 关闭e0标记
c0005020:	c7 05 30 30 01 c0 00 	movl   $0x0,0xc0013030
c0005027:	00 00 00 
/work/x86_os_my/device/keyboard.c:134
   }   

   break_code = ((scancode & 0x0080) != 0);   // 获取break_code
c000502a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c000502e:	25 80 00 00 00       	and    $0x80,%eax
c0005033:	85 c0                	test   %eax,%eax
c0005035:	0f 95 c0             	setne  %al
c0005038:	0f b6 c0             	movzbl %al,%eax
c000503b:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/device/keyboard.c:136
   
   if (break_code) {   // 若是断码break_code(按键弹起时产生的扫描码)
c000503e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0005042:	74 6a                	je     c00050ae <intr_keyboard_handler+0xe3>
/work/x86_os_my/device/keyboard.c:140

   /* 由于ctrl_r 和alt_r的make_code和break_code都是两字节,
   所以可用下面的方法取make_code,多字节的扫描码暂不处理 */
      uint16_t make_code = (scancode &= 0xff7f);   // 得到其make_code(按键按下时产生的扫描码)
c0005044:	66 81 65 f6 7f ff    	andw   $0xff7f,-0xa(%ebp)
c000504a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c000504e:	66 89 45 da          	mov    %ax,-0x26(%ebp)
/work/x86_os_my/device/keyboard.c:143

   /* 若是任意以下三个键弹起了,将状态置为false */
      if (make_code == ctrl_l_make || make_code == ctrl_r_make) {
c0005052:	66 83 7d da 1d       	cmpw   $0x1d,-0x26(%ebp)
c0005057:	74 08                	je     c0005061 <intr_keyboard_handler+0x96>
/work/x86_os_my/device/keyboard.c:143 (discriminator 1)
c0005059:	66 81 7d da 1d e0    	cmpw   $0xe01d,-0x26(%ebp)
c000505f:	75 0c                	jne    c000506d <intr_keyboard_handler+0xa2>
/work/x86_os_my/device/keyboard.c:144
	 ctrl_status = false;
c0005061:	c7 05 20 30 01 c0 00 	movl   $0x0,0xc0013020
c0005068:	00 00 00 
c000506b:	eb 3c                	jmp    c00050a9 <intr_keyboard_handler+0xde>
/work/x86_os_my/device/keyboard.c:145
      } else if (make_code == shift_l_make || make_code == shift_r_make) {
c000506d:	66 83 7d da 2a       	cmpw   $0x2a,-0x26(%ebp)
c0005072:	74 07                	je     c000507b <intr_keyboard_handler+0xb0>
/work/x86_os_my/device/keyboard.c:145 (discriminator 1)
c0005074:	66 83 7d da 36       	cmpw   $0x36,-0x26(%ebp)
c0005079:	75 0c                	jne    c0005087 <intr_keyboard_handler+0xbc>
/work/x86_os_my/device/keyboard.c:146
	 shift_status = false;
c000507b:	c7 05 24 30 01 c0 00 	movl   $0x0,0xc0013024
c0005082:	00 00 00 
c0005085:	eb 22                	jmp    c00050a9 <intr_keyboard_handler+0xde>
/work/x86_os_my/device/keyboard.c:147
      } else if (make_code == alt_l_make || make_code == alt_r_make) {
c0005087:	66 83 7d da 38       	cmpw   $0x38,-0x26(%ebp)
c000508c:	74 0c                	je     c000509a <intr_keyboard_handler+0xcf>
/work/x86_os_my/device/keyboard.c:147 (discriminator 1)
c000508e:	66 81 7d da 38 e0    	cmpw   $0xe038,-0x26(%ebp)
c0005094:	0f 85 c0 01 00 00    	jne    c000525a <intr_keyboard_handler+0x28f>
/work/x86_os_my/device/keyboard.c:148
	 alt_status = false;
c000509a:	c7 05 28 30 01 c0 00 	movl   $0x0,0xc0013028
c00050a1:	00 00 00 
/work/x86_os_my/device/keyboard.c:151
      } /* 由于caps_lock不是弹起后关闭,所以需要单独处理 */

      return;   // 直接返回结束此次中断处理程序
c00050a4:	e9 b1 01 00 00       	jmp    c000525a <intr_keyboard_handler+0x28f>
c00050a9:	e9 ac 01 00 00       	jmp    c000525a <intr_keyboard_handler+0x28f>
/work/x86_os_my/device/keyboard.c:155

   } 
   /* 若为通码,只处理数组中定义的键以及alt_right和ctrl键,全是make_code */
   else if ((scancode > 0x00 && scancode < 0x3b) || \
c00050ae:	66 83 7d f6 00       	cmpw   $0x0,-0xa(%ebp)
c00050b3:	74 07                	je     c00050bc <intr_keyboard_handler+0xf1>
/work/x86_os_my/device/keyboard.c:155 (discriminator 1)
c00050b5:	66 83 7d f6 3a       	cmpw   $0x3a,-0xa(%ebp)
c00050ba:	76 14                	jbe    c00050d0 <intr_keyboard_handler+0x105>
/work/x86_os_my/device/keyboard.c:155 (discriminator 3)
c00050bc:	66 81 7d f6 38 e0    	cmpw   $0xe038,-0xa(%ebp)
c00050c2:	74 0c                	je     c00050d0 <intr_keyboard_handler+0x105>
/work/x86_os_my/device/keyboard.c:156
	       (scancode == alt_r_make) || \
c00050c4:	66 81 7d f6 1d e0    	cmpw   $0xe01d,-0xa(%ebp)
c00050ca:	0f 85 78 01 00 00    	jne    c0005248 <intr_keyboard_handler+0x27d>
/work/x86_os_my/device/keyboard.c:158
	       (scancode == ctrl_r_make)) {
      bool shift = false;  // 判断是否与shift组合,用来在一维数组中索引对应的字符
c00050d0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/device/keyboard.c:159
      if ((scancode < 0x0e) || (scancode == 0x29) || \
c00050d7:	66 83 7d f6 0d       	cmpw   $0xd,-0xa(%ebp)
c00050dc:	76 3f                	jbe    c000511d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:159 (discriminator 1)
c00050de:	66 83 7d f6 29       	cmpw   $0x29,-0xa(%ebp)
c00050e3:	74 38                	je     c000511d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:159 (discriminator 2)
c00050e5:	66 83 7d f6 1a       	cmpw   $0x1a,-0xa(%ebp)
c00050ea:	74 31                	je     c000511d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:160
	 (scancode == 0x1a) || (scancode == 0x1b) || \
c00050ec:	66 83 7d f6 1b       	cmpw   $0x1b,-0xa(%ebp)
c00050f1:	74 2a                	je     c000511d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:160 (discriminator 1)
c00050f3:	66 83 7d f6 2b       	cmpw   $0x2b,-0xa(%ebp)
c00050f8:	74 23                	je     c000511d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:161
	 (scancode == 0x2b) || (scancode == 0x27) || \
c00050fa:	66 83 7d f6 27       	cmpw   $0x27,-0xa(%ebp)
c00050ff:	74 1c                	je     c000511d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:161 (discriminator 1)
c0005101:	66 83 7d f6 28       	cmpw   $0x28,-0xa(%ebp)
c0005106:	74 15                	je     c000511d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:162
	 (scancode == 0x28) || (scancode == 0x33) || \
c0005108:	66 83 7d f6 33       	cmpw   $0x33,-0xa(%ebp)
c000510d:	74 0e                	je     c000511d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:162 (discriminator 1)
c000510f:	66 83 7d f6 34       	cmpw   $0x34,-0xa(%ebp)
c0005114:	74 07                	je     c000511d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:163
	 (scancode == 0x34) || (scancode == 0x35)) {  
c0005116:	66 83 7d f6 35       	cmpw   $0x35,-0xa(%ebp)
c000511b:	75 0f                	jne    c000512c <intr_keyboard_handler+0x161>
/work/x86_os_my/device/keyboard.c:176
		     0x28 字符'\''
		     0x33 字符','
		     0x34 字符'.'
		     0x35 字符'/' 
	    *******************************/
	 if (shift_down_last) {  // 如果同时按下了shift键
c000511d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0005121:	74 3a                	je     c000515d <intr_keyboard_handler+0x192>
/work/x86_os_my/device/keyboard.c:177
	    shift = true;
c0005123:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
/work/x86_os_my/device/keyboard.c:176
		     0x28 字符'\''
		     0x33 字符','
		     0x34 字符'.'
		     0x35 字符'/' 
	    *******************************/
	 if (shift_down_last) {  // 如果同时按下了shift键
c000512a:	eb 31                	jmp    c000515d <intr_keyboard_handler+0x192>
/work/x86_os_my/device/keyboard.c:180
	    shift = true;
	 }
      } else {	  // 默认为字母键
	 if (shift_down_last && caps_lock_last) {  // 如果shift和capslock同时按下
c000512c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0005130:	74 0f                	je     c0005141 <intr_keyboard_handler+0x176>
/work/x86_os_my/device/keyboard.c:180 (discriminator 1)
c0005132:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0005136:	74 09                	je     c0005141 <intr_keyboard_handler+0x176>
/work/x86_os_my/device/keyboard.c:181
	    shift = false;
c0005138:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c000513f:	eb 1c                	jmp    c000515d <intr_keyboard_handler+0x192>
/work/x86_os_my/device/keyboard.c:182
	 } else if (shift_down_last || caps_lock_last) { // 如果shift和capslock任意被按下
c0005141:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0005145:	75 06                	jne    c000514d <intr_keyboard_handler+0x182>
/work/x86_os_my/device/keyboard.c:182 (discriminator 1)
c0005147:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c000514b:	74 09                	je     c0005156 <intr_keyboard_handler+0x18b>
/work/x86_os_my/device/keyboard.c:183
	    shift = true;
c000514d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c0005154:	eb 07                	jmp    c000515d <intr_keyboard_handler+0x192>
/work/x86_os_my/device/keyboard.c:185
	 } else {
	    shift = false;
c0005156:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/device/keyboard.c:189
	 }
      }

      uint8_t index = (scancode &= 0x00ff);  // 将扫描码的高字节置0,主要是针对高字节是e0的扫描码.
c000515d:	66 81 65 f6 ff 00    	andw   $0xff,-0xa(%ebp)
c0005163:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0005167:	88 45 d9             	mov    %al,-0x27(%ebp)
/work/x86_os_my/device/keyboard.c:190
      char cur_char = keymap[index][shift];  // 在数组中找到对应的字符
c000516a:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c000516e:	8d 14 00             	lea    (%eax,%eax,1),%edx
c0005171:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0005174:	01 d0                	add    %edx,%eax
c0005176:	05 e0 2a 01 c0       	add    $0xc0012ae0,%eax
c000517b:	0f b6 00             	movzbl (%eax),%eax
c000517e:	88 45 ef             	mov    %al,-0x11(%ebp)
/work/x86_os_my/device/keyboard.c:193

   /* 如果cur_char不为0,也就是ascii码为除'\0'外的字符就加入键盘缓冲区中 */
      if (cur_char) {
c0005181:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
c0005185:	74 54                	je     c00051db <intr_keyboard_handler+0x210>
/work/x86_os_my/device/keyboard.c:200
     /*****************  快捷键ctrl+l和ctrl+u的处理 *********************
      * 下面是把ctrl+l和ctrl+u这两种组合键产生的字符置为:
      * cur_char的asc码-字符a的asc码, 此差值比较小,
      * 属于asc码表中不可见的字符部分.故不会产生可见字符.
      * 我们在shell中将ascii值为l-a和u-a的分别处理为清屏和删除输入的快捷键*/
	 if ((ctrl_down_last && cur_char == 'l') || (ctrl_down_last && cur_char == 'u')) {
c0005187:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c000518b:	74 06                	je     c0005193 <intr_keyboard_handler+0x1c8>
/work/x86_os_my/device/keyboard.c:200 (discriminator 1)
c000518d:	80 7d ef 6c          	cmpb   $0x6c,-0x11(%ebp)
c0005191:	74 0c                	je     c000519f <intr_keyboard_handler+0x1d4>
/work/x86_os_my/device/keyboard.c:200 (discriminator 3)
c0005193:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0005197:	74 10                	je     c00051a9 <intr_keyboard_handler+0x1de>
/work/x86_os_my/device/keyboard.c:200 (discriminator 4)
c0005199:	80 7d ef 75          	cmpb   $0x75,-0x11(%ebp)
c000519d:	75 0a                	jne    c00051a9 <intr_keyboard_handler+0x1de>
/work/x86_os_my/device/keyboard.c:201
	    cur_char -= 'a';
c000519f:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c00051a3:	83 e8 61             	sub    $0x61,%eax
c00051a6:	88 45 ef             	mov    %al,-0x11(%ebp)
/work/x86_os_my/device/keyboard.c:207
	 }
      /****************************************************************/
      
   /* 若kbd_buf中未满并且待加入的cur_char不为0,
    * 则将其加入到缓冲区kbd_buf中 */
	 if (!ioq_full(&kbd_buf)) {
c00051a9:	83 ec 0c             	sub    $0xc,%esp
c00051ac:	68 e0 3c 01 c0       	push   $0xc0013ce0
c00051b1:	e8 58 01 00 00       	call   c000530e <ioq_full>
c00051b6:	83 c4 10             	add    $0x10,%esp
c00051b9:	85 c0                	test   %eax,%eax
c00051bb:	0f 85 9c 00 00 00    	jne    c000525d <intr_keyboard_handler+0x292>
/work/x86_os_my/device/keyboard.c:208
	    ioq_putchar(&kbd_buf, cur_char);
c00051c1:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
c00051c5:	83 ec 08             	sub    $0x8,%esp
c00051c8:	50                   	push   %eax
c00051c9:	68 e0 3c 01 c0       	push   $0xc0013ce0
c00051ce:	e8 0d 03 00 00       	call   c00054e0 <ioq_putchar>
c00051d3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/keyboard.c:210
	 }
	 return;
c00051d6:	e9 82 00 00 00       	jmp    c000525d <intr_keyboard_handler+0x292>
/work/x86_os_my/device/keyboard.c:214
      }

      /* 记录本次是否按下了下面几类控制键之一,供下次键入时判断组合键 */
      if (scancode == ctrl_l_make || scancode == ctrl_r_make) {
c00051db:	66 83 7d f6 1d       	cmpw   $0x1d,-0xa(%ebp)
c00051e0:	74 08                	je     c00051ea <intr_keyboard_handler+0x21f>
/work/x86_os_my/device/keyboard.c:214 (discriminator 1)
c00051e2:	66 81 7d f6 1d e0    	cmpw   $0xe01d,-0xa(%ebp)
c00051e8:	75 0c                	jne    c00051f6 <intr_keyboard_handler+0x22b>
/work/x86_os_my/device/keyboard.c:215
	 ctrl_status = true;
c00051ea:	c7 05 20 30 01 c0 01 	movl   $0x1,0xc0013020
c00051f1:	00 00 00 
c00051f4:	eb 50                	jmp    c0005246 <intr_keyboard_handler+0x27b>
/work/x86_os_my/device/keyboard.c:216
      } else if (scancode == shift_l_make || scancode == shift_r_make) {
c00051f6:	66 83 7d f6 2a       	cmpw   $0x2a,-0xa(%ebp)
c00051fb:	74 07                	je     c0005204 <intr_keyboard_handler+0x239>
/work/x86_os_my/device/keyboard.c:216 (discriminator 1)
c00051fd:	66 83 7d f6 36       	cmpw   $0x36,-0xa(%ebp)
c0005202:	75 0c                	jne    c0005210 <intr_keyboard_handler+0x245>
/work/x86_os_my/device/keyboard.c:217
	 shift_status = true;
c0005204:	c7 05 24 30 01 c0 01 	movl   $0x1,0xc0013024
c000520b:	00 00 00 
c000520e:	eb 36                	jmp    c0005246 <intr_keyboard_handler+0x27b>
/work/x86_os_my/device/keyboard.c:218
      } else if (scancode == alt_l_make || scancode == alt_r_make) {
c0005210:	66 83 7d f6 38       	cmpw   $0x38,-0xa(%ebp)
c0005215:	74 08                	je     c000521f <intr_keyboard_handler+0x254>
/work/x86_os_my/device/keyboard.c:218 (discriminator 1)
c0005217:	66 81 7d f6 38 e0    	cmpw   $0xe038,-0xa(%ebp)
c000521d:	75 0c                	jne    c000522b <intr_keyboard_handler+0x260>
/work/x86_os_my/device/keyboard.c:219
	 alt_status = true;
c000521f:	c7 05 28 30 01 c0 01 	movl   $0x1,0xc0013028
c0005226:	00 00 00 
c0005229:	eb 1b                	jmp    c0005246 <intr_keyboard_handler+0x27b>
/work/x86_os_my/device/keyboard.c:220
      } else if (scancode == caps_lock_make) {
c000522b:	66 83 7d f6 3a       	cmpw   $0x3a,-0xa(%ebp)
c0005230:	75 2e                	jne    c0005260 <intr_keyboard_handler+0x295>
/work/x86_os_my/device/keyboard.c:223
      /* 不管之前是否有按下caps_lock键,当再次按下时则状态取反,
       * 即:已经开启时,再按下同样的键是关闭。关闭时按下表示开启。*/
	 caps_lock_status = !caps_lock_status;
c0005232:	a1 2c 30 01 c0       	mov    0xc001302c,%eax
c0005237:	85 c0                	test   %eax,%eax
c0005239:	0f 94 c0             	sete   %al
c000523c:	0f b6 c0             	movzbl %al,%eax
c000523f:	a3 2c 30 01 c0       	mov    %eax,0xc001302c
/work/x86_os_my/device/keyboard.c:157

   } 
   /* 若为通码,只处理数组中定义的键以及alt_right和ctrl键,全是make_code */
   else if ((scancode > 0x00 && scancode < 0x3b) || \
	       (scancode == alt_r_make) || \
	       (scancode == ctrl_r_make)) {
c0005244:	eb 1a                	jmp    c0005260 <intr_keyboard_handler+0x295>
/work/x86_os_my/device/keyboard.c:157 (discriminator 3)
c0005246:	eb 18                	jmp    c0005260 <intr_keyboard_handler+0x295>
/work/x86_os_my/device/keyboard.c:226
      /* 不管之前是否有按下caps_lock键,当再次按下时则状态取反,
       * 即:已经开启时,再按下同样的键是关闭。关闭时按下表示开启。*/
	 caps_lock_status = !caps_lock_status;
      }
   } else {
      put_str("unknown key\n");
c0005248:	83 ec 0c             	sub    $0xc,%esp
c000524b:	68 35 df 00 c0       	push   $0xc000df35
c0005250:	e8 fb d0 ff ff       	call   c0002350 <put_str>
c0005255:	83 c4 10             	add    $0x10,%esp
c0005258:	eb 07                	jmp    c0005261 <intr_keyboard_handler+0x296>
/work/x86_os_my/device/keyboard.c:151
	 shift_status = false;
      } else if (make_code == alt_l_make || make_code == alt_r_make) {
	 alt_status = false;
      } /* 由于caps_lock不是弹起后关闭,所以需要单独处理 */

      return;   // 直接返回结束此次中断处理程序
c000525a:	90                   	nop
c000525b:	eb 04                	jmp    c0005261 <intr_keyboard_handler+0x296>
/work/x86_os_my/device/keyboard.c:210
   /* 若kbd_buf中未满并且待加入的cur_char不为0,
    * 则将其加入到缓冲区kbd_buf中 */
	 if (!ioq_full(&kbd_buf)) {
	    ioq_putchar(&kbd_buf, cur_char);
	 }
	 return;
c000525d:	90                   	nop
c000525e:	eb 01                	jmp    c0005261 <intr_keyboard_handler+0x296>
/work/x86_os_my/device/keyboard.c:157

   } 
   /* 若为通码,只处理数组中定义的键以及alt_right和ctrl键,全是make_code */
   else if ((scancode > 0x00 && scancode < 0x3b) || \
	       (scancode == alt_r_make) || \
	       (scancode == ctrl_r_make)) {
c0005260:	90                   	nop
/work/x86_os_my/device/keyboard.c:228
	 caps_lock_status = !caps_lock_status;
      }
   } else {
      put_str("unknown key\n");
   }
}
c0005261:	c9                   	leave  
c0005262:	c3                   	ret    

c0005263 <keyboard_init>:
keyboard_init():
/work/x86_os_my/device/keyboard.c:231

/* 键盘初始化 */
void keyboard_init() {
c0005263:	55                   	push   %ebp
c0005264:	89 e5                	mov    %esp,%ebp
c0005266:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/keyboard.c:232
   put_str("keyboard init start\n");
c0005269:	83 ec 0c             	sub    $0xc,%esp
c000526c:	68 42 df 00 c0       	push   $0xc000df42
c0005271:	e8 da d0 ff ff       	call   c0002350 <put_str>
c0005276:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/keyboard.c:233
   ioqueue_init(&kbd_buf);
c0005279:	83 ec 0c             	sub    $0xc,%esp
c000527c:	68 e0 3c 01 c0       	push   $0xc0013ce0
c0005281:	e8 28 00 00 00       	call   c00052ae <ioqueue_init>
c0005286:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/keyboard.c:234
   register_handler(0x21, intr_keyboard_handler);
c0005289:	83 ec 08             	sub    $0x8,%esp
c000528c:	68 cb 4f 00 c0       	push   $0xc0004fcb
c0005291:	6a 21                	push   $0x21
c0005293:	e8 ec c8 ff ff       	call   c0001b84 <register_handler>
c0005298:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/keyboard.c:235
   put_str("keyboard init done\n");
c000529b:	83 ec 0c             	sub    $0xc,%esp
c000529e:	68 57 df 00 c0       	push   $0xc000df57
c00052a3:	e8 a8 d0 ff ff       	call   c0002350 <put_str>
c00052a8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/keyboard.c:236
}
c00052ab:	90                   	nop
c00052ac:	c9                   	leave  
c00052ad:	c3                   	ret    

c00052ae <ioqueue_init>:
ioqueue_init():
/work/x86_os_my/device/ioqueue.c:7
#include "interrupt.h"
#include "global.h"
#include "debug.h"

/* 初始化io队列ioq */
void ioqueue_init(struct ioqueue* ioq) {
c00052ae:	55                   	push   %ebp
c00052af:	89 e5                	mov    %esp,%ebp
c00052b1:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/ioqueue.c:8
   lock_init(&ioq->lock);     // 初始化io队列的锁
c00052b4:	8b 45 08             	mov    0x8(%ebp),%eax
c00052b7:	83 ec 0c             	sub    $0xc,%esp
c00052ba:	50                   	push   %eax
c00052bb:	e8 05 fa ff ff       	call   c0004cc5 <lock_init>
c00052c0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:9
   ioq->producer = ioq->consumer = NULL;  // 生产者和消费者置空
c00052c3:	8b 45 08             	mov    0x8(%ebp),%eax
c00052c6:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
c00052cd:	8b 45 08             	mov    0x8(%ebp),%eax
c00052d0:	8b 50 20             	mov    0x20(%eax),%edx
c00052d3:	8b 45 08             	mov    0x8(%ebp),%eax
c00052d6:	89 50 1c             	mov    %edx,0x1c(%eax)
/work/x86_os_my/device/ioqueue.c:10
   ioq->head = ioq->tail = 0; // 队列的首尾指针指向缓冲区数组第0个位置
c00052d9:	8b 45 08             	mov    0x8(%ebp),%eax
c00052dc:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)
c00052e3:	8b 45 08             	mov    0x8(%ebp),%eax
c00052e6:	8b 50 68             	mov    0x68(%eax),%edx
c00052e9:	8b 45 08             	mov    0x8(%ebp),%eax
c00052ec:	89 50 64             	mov    %edx,0x64(%eax)
/work/x86_os_my/device/ioqueue.c:11
}
c00052ef:	90                   	nop
c00052f0:	c9                   	leave  
c00052f1:	c3                   	ret    

c00052f2 <next_pos>:
next_pos():
/work/x86_os_my/device/ioqueue.c:14

/* 返回pos在缓冲区中的下一个位置值 */
static int32_t next_pos(int32_t pos) {
c00052f2:	55                   	push   %ebp
c00052f3:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/device/ioqueue.c:15
   return (pos + 1) % bufsize; 
c00052f5:	8b 45 08             	mov    0x8(%ebp),%eax
c00052f8:	8d 50 01             	lea    0x1(%eax),%edx
c00052fb:	89 d0                	mov    %edx,%eax
c00052fd:	c1 f8 1f             	sar    $0x1f,%eax
c0005300:	c1 e8 1a             	shr    $0x1a,%eax
c0005303:	01 c2                	add    %eax,%edx
c0005305:	83 e2 3f             	and    $0x3f,%edx
c0005308:	29 c2                	sub    %eax,%edx
c000530a:	89 d0                	mov    %edx,%eax
/work/x86_os_my/device/ioqueue.c:16
}
c000530c:	5d                   	pop    %ebp
c000530d:	c3                   	ret    

c000530e <ioq_full>:
ioq_full():
/work/x86_os_my/device/ioqueue.c:19

/* 判断队列是否已满 */
bool ioq_full(struct ioqueue* ioq) {
c000530e:	55                   	push   %ebp
c000530f:	89 e5                	mov    %esp,%ebp
c0005311:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/ioqueue.c:20
   ASSERT(intr_get_status() == INTR_OFF);
c0005314:	e8 47 c8 ff ff       	call   c0001b60 <intr_get_status>
c0005319:	85 c0                	test   %eax,%eax
c000531b:	74 19                	je     c0005336 <ioq_full+0x28>
/work/x86_os_my/device/ioqueue.c:20 (discriminator 1)
c000531d:	68 6c df 00 c0       	push   $0xc000df6c
c0005322:	68 d0 df 00 c0       	push   $0xc000dfd0
c0005327:	6a 14                	push   $0x14
c0005329:	68 8a df 00 c0       	push   $0xc000df8a
c000532e:	e8 ce d1 ff ff       	call   c0002501 <panic_spin>
c0005333:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:21
   return next_pos(ioq->head) == ioq->tail;
c0005336:	8b 45 08             	mov    0x8(%ebp),%eax
c0005339:	8b 40 64             	mov    0x64(%eax),%eax
c000533c:	83 ec 0c             	sub    $0xc,%esp
c000533f:	50                   	push   %eax
c0005340:	e8 ad ff ff ff       	call   c00052f2 <next_pos>
c0005345:	83 c4 10             	add    $0x10,%esp
c0005348:	89 c2                	mov    %eax,%edx
c000534a:	8b 45 08             	mov    0x8(%ebp),%eax
c000534d:	8b 40 68             	mov    0x68(%eax),%eax
c0005350:	39 c2                	cmp    %eax,%edx
c0005352:	0f 94 c0             	sete   %al
c0005355:	0f b6 c0             	movzbl %al,%eax
/work/x86_os_my/device/ioqueue.c:22
}
c0005358:	c9                   	leave  
c0005359:	c3                   	ret    

c000535a <ioq_empty>:
ioq_empty():
/work/x86_os_my/device/ioqueue.c:25

/* 判断队列是否已空 */
static bool ioq_empty(struct ioqueue* ioq) {
c000535a:	55                   	push   %ebp
c000535b:	89 e5                	mov    %esp,%ebp
c000535d:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/ioqueue.c:26
   ASSERT(intr_get_status() == INTR_OFF);
c0005360:	e8 fb c7 ff ff       	call   c0001b60 <intr_get_status>
c0005365:	85 c0                	test   %eax,%eax
c0005367:	74 19                	je     c0005382 <ioq_empty+0x28>
/work/x86_os_my/device/ioqueue.c:26 (discriminator 1)
c0005369:	68 6c df 00 c0       	push   $0xc000df6c
c000536e:	68 dc df 00 c0       	push   $0xc000dfdc
c0005373:	6a 1a                	push   $0x1a
c0005375:	68 8a df 00 c0       	push   $0xc000df8a
c000537a:	e8 82 d1 ff ff       	call   c0002501 <panic_spin>
c000537f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:27
   return ioq->head == ioq->tail;
c0005382:	8b 45 08             	mov    0x8(%ebp),%eax
c0005385:	8b 50 64             	mov    0x64(%eax),%edx
c0005388:	8b 45 08             	mov    0x8(%ebp),%eax
c000538b:	8b 40 68             	mov    0x68(%eax),%eax
c000538e:	39 c2                	cmp    %eax,%edx
c0005390:	0f 94 c0             	sete   %al
c0005393:	0f b6 c0             	movzbl %al,%eax
/work/x86_os_my/device/ioqueue.c:28
}
c0005396:	c9                   	leave  
c0005397:	c3                   	ret    

c0005398 <ioq_wait>:
ioq_wait():
/work/x86_os_my/device/ioqueue.c:31

/* 使当前生产者或消费者在此缓冲区上等待 */
static void ioq_wait(struct task_struct** waiter) {
c0005398:	55                   	push   %ebp
c0005399:	89 e5                	mov    %esp,%ebp
c000539b:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/ioqueue.c:32
   ASSERT(*waiter == NULL && waiter != NULL);
c000539e:	8b 45 08             	mov    0x8(%ebp),%eax
c00053a1:	8b 00                	mov    (%eax),%eax
c00053a3:	85 c0                	test   %eax,%eax
c00053a5:	75 06                	jne    c00053ad <ioq_wait+0x15>
/work/x86_os_my/device/ioqueue.c:32 (discriminator 1)
c00053a7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00053ab:	75 19                	jne    c00053c6 <ioq_wait+0x2e>
/work/x86_os_my/device/ioqueue.c:32 (discriminator 3)
c00053ad:	68 9c df 00 c0       	push   $0xc000df9c
c00053b2:	68 e8 df 00 c0       	push   $0xc000dfe8
c00053b7:	6a 20                	push   $0x20
c00053b9:	68 8a df 00 c0       	push   $0xc000df8a
c00053be:	e8 3e d1 ff ff       	call   c0002501 <panic_spin>
c00053c3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:33
   *waiter = running_thread();
c00053c6:	e8 21 ea ff ff       	call   c0003dec <running_thread>
c00053cb:	89 c2                	mov    %eax,%edx
c00053cd:	8b 45 08             	mov    0x8(%ebp),%eax
c00053d0:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/device/ioqueue.c:34
   thread_block(TASK_BLOCKED);
c00053d2:	83 ec 0c             	sub    $0xc,%esp
c00053d5:	6a 02                	push   $0x2
c00053d7:	e8 70 ef ff ff       	call   c000434c <thread_block>
c00053dc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:35
}
c00053df:	90                   	nop
c00053e0:	c9                   	leave  
c00053e1:	c3                   	ret    

c00053e2 <wakeup>:
wakeup():
/work/x86_os_my/device/ioqueue.c:38

/* 唤醒waiter */
static void wakeup(struct task_struct** waiter) {
c00053e2:	55                   	push   %ebp
c00053e3:	89 e5                	mov    %esp,%ebp
c00053e5:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/ioqueue.c:39
   ASSERT(*waiter != NULL);
c00053e8:	8b 45 08             	mov    0x8(%ebp),%eax
c00053eb:	8b 00                	mov    (%eax),%eax
c00053ed:	85 c0                	test   %eax,%eax
c00053ef:	75 19                	jne    c000540a <wakeup+0x28>
/work/x86_os_my/device/ioqueue.c:39 (discriminator 1)
c00053f1:	68 be df 00 c0       	push   $0xc000dfbe
c00053f6:	68 f4 df 00 c0       	push   $0xc000dff4
c00053fb:	6a 27                	push   $0x27
c00053fd:	68 8a df 00 c0       	push   $0xc000df8a
c0005402:	e8 fa d0 ff ff       	call   c0002501 <panic_spin>
c0005407:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:40
   thread_unblock(*waiter); 
c000540a:	8b 45 08             	mov    0x8(%ebp),%eax
c000540d:	8b 00                	mov    (%eax),%eax
c000540f:	83 ec 0c             	sub    $0xc,%esp
c0005412:	50                   	push   %eax
c0005413:	e8 97 ef ff ff       	call   c00043af <thread_unblock>
c0005418:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:41
   *waiter = NULL;
c000541b:	8b 45 08             	mov    0x8(%ebp),%eax
c000541e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/device/ioqueue.c:42
}
c0005424:	90                   	nop
c0005425:	c9                   	leave  
c0005426:	c3                   	ret    

c0005427 <ioq_getchar>:
ioq_getchar():
/work/x86_os_my/device/ioqueue.c:45

/* 消费者从ioq队列中获取一个字符 */
char ioq_getchar(struct ioqueue* ioq) {
c0005427:	55                   	push   %ebp
c0005428:	89 e5                	mov    %esp,%ebp
c000542a:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/ioqueue.c:46
   ASSERT(intr_get_status() == INTR_OFF);
c000542d:	e8 2e c7 ff ff       	call   c0001b60 <intr_get_status>
c0005432:	85 c0                	test   %eax,%eax
c0005434:	74 4b                	je     c0005481 <ioq_getchar+0x5a>
/work/x86_os_my/device/ioqueue.c:46 (discriminator 1)
c0005436:	68 6c df 00 c0       	push   $0xc000df6c
c000543b:	68 fc df 00 c0       	push   $0xc000dffc
c0005440:	6a 2e                	push   $0x2e
c0005442:	68 8a df 00 c0       	push   $0xc000df8a
c0005447:	e8 b5 d0 ff ff       	call   c0002501 <panic_spin>
c000544c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:51 (discriminator 1)

/* 若缓冲区(队列)为空,把消费者ioq->consumer记为当前线程自己,
 * 目的是将来生产者往缓冲区里装商品后,生产者知道唤醒哪个消费者,
 * 也就是唤醒当前线程自己*/
   while (ioq_empty(ioq)) {
c000544f:	eb 30                	jmp    c0005481 <ioq_getchar+0x5a>
/work/x86_os_my/device/ioqueue.c:52
      lock_acquire(&ioq->lock);	 
c0005451:	8b 45 08             	mov    0x8(%ebp),%eax
c0005454:	83 ec 0c             	sub    $0xc,%esp
c0005457:	50                   	push   %eax
c0005458:	e8 42 fa ff ff       	call   c0004e9f <lock_acquire>
c000545d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:53
      ioq_wait(&ioq->consumer);
c0005460:	8b 45 08             	mov    0x8(%ebp),%eax
c0005463:	83 c0 20             	add    $0x20,%eax
c0005466:	83 ec 0c             	sub    $0xc,%esp
c0005469:	50                   	push   %eax
c000546a:	e8 29 ff ff ff       	call   c0005398 <ioq_wait>
c000546f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:54
      lock_release(&ioq->lock);
c0005472:	8b 45 08             	mov    0x8(%ebp),%eax
c0005475:	83 ec 0c             	sub    $0xc,%esp
c0005478:	50                   	push   %eax
c0005479:	e8 98 fa ff ff       	call   c0004f16 <lock_release>
c000547e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:51
   ASSERT(intr_get_status() == INTR_OFF);

/* 若缓冲区(队列)为空,把消费者ioq->consumer记为当前线程自己,
 * 目的是将来生产者往缓冲区里装商品后,生产者知道唤醒哪个消费者,
 * 也就是唤醒当前线程自己*/
   while (ioq_empty(ioq)) {
c0005481:	83 ec 0c             	sub    $0xc,%esp
c0005484:	ff 75 08             	pushl  0x8(%ebp)
c0005487:	e8 ce fe ff ff       	call   c000535a <ioq_empty>
c000548c:	83 c4 10             	add    $0x10,%esp
c000548f:	85 c0                	test   %eax,%eax
c0005491:	75 be                	jne    c0005451 <ioq_getchar+0x2a>
/work/x86_os_my/device/ioqueue.c:57
      lock_acquire(&ioq->lock);	 
      ioq_wait(&ioq->consumer);
      lock_release(&ioq->lock);
   }

   char byte = ioq->buf[ioq->tail];	  // 从缓冲区中取出
c0005493:	8b 45 08             	mov    0x8(%ebp),%eax
c0005496:	8b 40 68             	mov    0x68(%eax),%eax
c0005499:	8b 55 08             	mov    0x8(%ebp),%edx
c000549c:	0f b6 44 02 24       	movzbl 0x24(%edx,%eax,1),%eax
c00054a1:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/device/ioqueue.c:58
   ioq->tail = next_pos(ioq->tail);	  // 把读游标移到下一位置
c00054a4:	8b 45 08             	mov    0x8(%ebp),%eax
c00054a7:	8b 40 68             	mov    0x68(%eax),%eax
c00054aa:	83 ec 0c             	sub    $0xc,%esp
c00054ad:	50                   	push   %eax
c00054ae:	e8 3f fe ff ff       	call   c00052f2 <next_pos>
c00054b3:	83 c4 10             	add    $0x10,%esp
c00054b6:	89 c2                	mov    %eax,%edx
c00054b8:	8b 45 08             	mov    0x8(%ebp),%eax
c00054bb:	89 50 68             	mov    %edx,0x68(%eax)
/work/x86_os_my/device/ioqueue.c:60

   if (ioq->producer != NULL) {
c00054be:	8b 45 08             	mov    0x8(%ebp),%eax
c00054c1:	8b 40 1c             	mov    0x1c(%eax),%eax
c00054c4:	85 c0                	test   %eax,%eax
c00054c6:	74 12                	je     c00054da <ioq_getchar+0xb3>
/work/x86_os_my/device/ioqueue.c:61
      wakeup(&ioq->producer);		  // 唤醒生产者
c00054c8:	8b 45 08             	mov    0x8(%ebp),%eax
c00054cb:	83 c0 1c             	add    $0x1c,%eax
c00054ce:	83 ec 0c             	sub    $0xc,%esp
c00054d1:	50                   	push   %eax
c00054d2:	e8 0b ff ff ff       	call   c00053e2 <wakeup>
c00054d7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:64
   }

   return byte; 
c00054da:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
/work/x86_os_my/device/ioqueue.c:65
}
c00054de:	c9                   	leave  
c00054df:	c3                   	ret    

c00054e0 <ioq_putchar>:
ioq_putchar():
/work/x86_os_my/device/ioqueue.c:68

/* 生产者往ioq队列中写入一个字符byte */
void ioq_putchar(struct ioqueue* ioq, char byte) {
c00054e0:	55                   	push   %ebp
c00054e1:	89 e5                	mov    %esp,%ebp
c00054e3:	83 ec 18             	sub    $0x18,%esp
c00054e6:	8b 45 0c             	mov    0xc(%ebp),%eax
c00054e9:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/device/ioqueue.c:69
   ASSERT(intr_get_status() == INTR_OFF);
c00054ec:	e8 6f c6 ff ff       	call   c0001b60 <intr_get_status>
c00054f1:	85 c0                	test   %eax,%eax
c00054f3:	74 4b                	je     c0005540 <ioq_putchar+0x60>
/work/x86_os_my/device/ioqueue.c:69 (discriminator 1)
c00054f5:	68 6c df 00 c0       	push   $0xc000df6c
c00054fa:	68 08 e0 00 c0       	push   $0xc000e008
c00054ff:	6a 45                	push   $0x45
c0005501:	68 8a df 00 c0       	push   $0xc000df8a
c0005506:	e8 f6 cf ff ff       	call   c0002501 <panic_spin>
c000550b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:74 (discriminator 1)

/* 若缓冲区(队列)已经满了,把生产者ioq->producer记为自己,
 * 为的是当缓冲区里的东西被消费者取完后让消费者知道唤醒哪个生产者,
 * 也就是唤醒当前线程自己*/
   while (ioq_full(ioq)) {
c000550e:	eb 30                	jmp    c0005540 <ioq_putchar+0x60>
/work/x86_os_my/device/ioqueue.c:75
      lock_acquire(&ioq->lock);
c0005510:	8b 45 08             	mov    0x8(%ebp),%eax
c0005513:	83 ec 0c             	sub    $0xc,%esp
c0005516:	50                   	push   %eax
c0005517:	e8 83 f9 ff ff       	call   c0004e9f <lock_acquire>
c000551c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:76
      ioq_wait(&ioq->producer);
c000551f:	8b 45 08             	mov    0x8(%ebp),%eax
c0005522:	83 c0 1c             	add    $0x1c,%eax
c0005525:	83 ec 0c             	sub    $0xc,%esp
c0005528:	50                   	push   %eax
c0005529:	e8 6a fe ff ff       	call   c0005398 <ioq_wait>
c000552e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:77
      lock_release(&ioq->lock);
c0005531:	8b 45 08             	mov    0x8(%ebp),%eax
c0005534:	83 ec 0c             	sub    $0xc,%esp
c0005537:	50                   	push   %eax
c0005538:	e8 d9 f9 ff ff       	call   c0004f16 <lock_release>
c000553d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:74
   ASSERT(intr_get_status() == INTR_OFF);

/* 若缓冲区(队列)已经满了,把生产者ioq->producer记为自己,
 * 为的是当缓冲区里的东西被消费者取完后让消费者知道唤醒哪个生产者,
 * 也就是唤醒当前线程自己*/
   while (ioq_full(ioq)) {
c0005540:	83 ec 0c             	sub    $0xc,%esp
c0005543:	ff 75 08             	pushl  0x8(%ebp)
c0005546:	e8 c3 fd ff ff       	call   c000530e <ioq_full>
c000554b:	83 c4 10             	add    $0x10,%esp
c000554e:	85 c0                	test   %eax,%eax
c0005550:	75 be                	jne    c0005510 <ioq_putchar+0x30>
/work/x86_os_my/device/ioqueue.c:79
      lock_acquire(&ioq->lock);
      ioq_wait(&ioq->producer);
      lock_release(&ioq->lock);
   }
   ioq->buf[ioq->head] = byte;      // 把字节放入缓冲区中
c0005552:	8b 45 08             	mov    0x8(%ebp),%eax
c0005555:	8b 40 64             	mov    0x64(%eax),%eax
c0005558:	8b 55 08             	mov    0x8(%ebp),%edx
c000555b:	0f b6 4d f4          	movzbl -0xc(%ebp),%ecx
c000555f:	88 4c 02 24          	mov    %cl,0x24(%edx,%eax,1)
/work/x86_os_my/device/ioqueue.c:80
   ioq->head = next_pos(ioq->head); // 把写游标移到下一位置
c0005563:	8b 45 08             	mov    0x8(%ebp),%eax
c0005566:	8b 40 64             	mov    0x64(%eax),%eax
c0005569:	83 ec 0c             	sub    $0xc,%esp
c000556c:	50                   	push   %eax
c000556d:	e8 80 fd ff ff       	call   c00052f2 <next_pos>
c0005572:	83 c4 10             	add    $0x10,%esp
c0005575:	89 c2                	mov    %eax,%edx
c0005577:	8b 45 08             	mov    0x8(%ebp),%eax
c000557a:	89 50 64             	mov    %edx,0x64(%eax)
/work/x86_os_my/device/ioqueue.c:82

   if (ioq->consumer != NULL) {
c000557d:	8b 45 08             	mov    0x8(%ebp),%eax
c0005580:	8b 40 20             	mov    0x20(%eax),%eax
c0005583:	85 c0                	test   %eax,%eax
c0005585:	74 12                	je     c0005599 <ioq_putchar+0xb9>
/work/x86_os_my/device/ioqueue.c:83
      wakeup(&ioq->consumer);          // 唤醒消费者
c0005587:	8b 45 08             	mov    0x8(%ebp),%eax
c000558a:	83 c0 20             	add    $0x20,%eax
c000558d:	83 ec 0c             	sub    $0xc,%esp
c0005590:	50                   	push   %eax
c0005591:	e8 4c fe ff ff       	call   c00053e2 <wakeup>
c0005596:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:85
   }
}
c0005599:	90                   	nop
c000559a:	c9                   	leave  
c000559b:	c3                   	ret    

c000559c <update_tss_esp>:
update_tss_esp():
/work/x86_os_my/userprog/tss.c:40
	uint32_t io_base;
}; 
static struct tss g_tss;

/* 更新tss中esp0字段的值为pthread的0级栈 */
void update_tss_esp(struct task_struct* pthread) {
c000559c:	55                   	push   %ebp
c000559d:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/userprog/tss.c:41
	g_tss.esp0 = (uint32_t*)((uint32_t)pthread + PG_SIZE);
c000559f:	8b 45 08             	mov    0x8(%ebp),%eax
c00055a2:	05 00 10 00 00       	add    $0x1000,%eax
c00055a7:	a3 44 30 01 c0       	mov    %eax,0xc0013044
/work/x86_os_my/userprog/tss.c:42
}
c00055ac:	90                   	nop
c00055ad:	5d                   	pop    %ebp
c00055ae:	c3                   	ret    

c00055af <make_gdt_desc>:
make_gdt_desc():
/work/x86_os_my/userprog/tss.c:45

/* c语言方式，创建gdt描述符 */
static struct gdt_desc make_gdt_desc(uint32_t* desc_addr, uint32_t limit, uint8_t attr_low, uint8_t attr_high) {
c00055af:	55                   	push   %ebp
c00055b0:	89 e5                	mov    %esp,%ebp
c00055b2:	83 ec 18             	sub    $0x18,%esp
c00055b5:	8b 55 14             	mov    0x14(%ebp),%edx
c00055b8:	8b 45 18             	mov    0x18(%ebp),%eax
c00055bb:	88 55 ec             	mov    %dl,-0x14(%ebp)
c00055be:	88 45 e8             	mov    %al,-0x18(%ebp)
/work/x86_os_my/userprog/tss.c:46
	uint32_t desc_base = (uint32_t)desc_addr;
c00055c1:	8b 45 0c             	mov    0xc(%ebp),%eax
c00055c4:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/userprog/tss.c:48
	struct gdt_desc desc;
	desc.limit_low_word = limit & 0x0000ffff;
c00055c7:	8b 45 10             	mov    0x10(%ebp),%eax
c00055ca:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
/work/x86_os_my/userprog/tss.c:49
	desc.base_low_word = desc_base & 0x0000ffff;
c00055ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
c00055d1:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
/work/x86_os_my/userprog/tss.c:50
	desc.base_mid_byte = ((desc_base & 0x00ff0000) >> 16);
c00055d5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c00055d8:	25 00 00 ff 00       	and    $0xff0000,%eax
c00055dd:	c1 e8 10             	shr    $0x10,%eax
c00055e0:	88 45 f8             	mov    %al,-0x8(%ebp)
/work/x86_os_my/userprog/tss.c:51
	desc.attr_low_byte = (uint8_t)(attr_low);
c00055e3:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c00055e7:	88 45 f9             	mov    %al,-0x7(%ebp)
/work/x86_os_my/userprog/tss.c:52
	desc.limit_high_attr_high = (((limit & 0x000f0000) >> 16) + (uint8_t)(attr_high));
c00055ea:	8b 45 10             	mov    0x10(%ebp),%eax
c00055ed:	25 00 00 0f 00       	and    $0xf0000,%eax
c00055f2:	c1 e8 10             	shr    $0x10,%eax
c00055f5:	89 c2                	mov    %eax,%edx
c00055f7:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c00055fb:	01 d0                	add    %edx,%eax
c00055fd:	88 45 fa             	mov    %al,-0x6(%ebp)
/work/x86_os_my/userprog/tss.c:53
	desc.base_high_byte = desc_base >> 24;
c0005600:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0005603:	c1 e8 18             	shr    $0x18,%eax
c0005606:	88 45 fb             	mov    %al,-0x5(%ebp)
/work/x86_os_my/userprog/tss.c:54
	return desc;
c0005609:	8b 4d 08             	mov    0x8(%ebp),%ecx
c000560c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000560f:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0005612:	89 01                	mov    %eax,(%ecx)
c0005614:	89 51 04             	mov    %edx,0x4(%ecx)
/work/x86_os_my/userprog/tss.c:55
}
c0005617:	8b 45 08             	mov    0x8(%ebp),%eax
c000561a:	c9                   	leave  
c000561b:	c2 04 00             	ret    $0x4

c000561e <tss_init>:
tss_init():
/work/x86_os_my/userprog/tss.c:61

/* 在gdt中创建tss描述符
 * 重新加载 gdt
 * 加载 tr
 */
void tss_init() {
c000561e:	55                   	push   %ebp
c000561f:	89 e5                	mov    %esp,%ebp
c0005621:	53                   	push   %ebx
c0005622:	83 ec 24             	sub    $0x24,%esp
/work/x86_os_my/userprog/tss.c:62
	put_str("tss_init start\n");
c0005625:	83 ec 0c             	sub    $0xc,%esp
c0005628:	68 14 e0 00 c0       	push   $0xc000e014
c000562d:	e8 1e cd ff ff       	call   c0002350 <put_str>
c0005632:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/tss.c:63
	uint32_t tss_size = sizeof(g_tss);
c0005635:	c7 45 f4 6c 00 00 00 	movl   $0x6c,-0xc(%ebp)
/work/x86_os_my/userprog/tss.c:64
	memset(&g_tss, 0, tss_size);
c000563c:	83 ec 04             	sub    $0x4,%esp
c000563f:	ff 75 f4             	pushl  -0xc(%ebp)
c0005642:	6a 00                	push   $0x0
c0005644:	68 40 30 01 c0       	push   $0xc0013040
c0005649:	e8 b7 e3 ff ff       	call   c0003a05 <memset>
c000564e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/tss.c:66
	
	g_tss.ss0 = SELECTOR_K_STACK;	// 0 级栈段的选择子 
c0005651:	c7 05 48 30 01 c0 10 	movl   $0x10,0xc0013048
c0005658:	00 00 00 
/work/x86_os_my/userprog/tss.c:67
	g_tss.io_base = tss_size;		// 当 IO 位图的偏移地址大于等于 TSS 大小减 1 时，就表示没有 IO 位图。
c000565b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000565e:	a3 a8 30 01 c0       	mov    %eax,0xc00130a8
/work/x86_os_my/userprog/tss.c:75
	 * 内核地址 0xC000_0900 是映射到 0x900 的 
	 * 在GDT中，第 0 个段描述符不可用，第 1 个为代码段，第 2 个为数据段和栈，第 3 个为显存段
	 */

	/* 在gdt中添加dpl为0的TSS描述符 */
	*((struct gdt_desc*)0xc0000920) = make_gdt_desc((uint32_t*)&g_tss, tss_size - 1, TSS_ATTR_LOW, TSS_ATTR_HIGH);
c0005663:	bb 20 09 00 c0       	mov    $0xc0000920,%ebx
c0005668:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000566b:	8d 50 ff             	lea    -0x1(%eax),%edx
c000566e:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0005671:	83 ec 0c             	sub    $0xc,%esp
c0005674:	68 80 00 00 00       	push   $0x80
c0005679:	68 89 00 00 00       	push   $0x89
c000567e:	52                   	push   %edx
c000567f:	68 40 30 01 c0       	push   $0xc0013040
c0005684:	50                   	push   %eax
c0005685:	e8 25 ff ff ff       	call   c00055af <make_gdt_desc>
c000568a:	83 c4 1c             	add    $0x1c,%esp
c000568d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0005690:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0005693:	89 03                	mov    %eax,(%ebx)
c0005695:	89 53 04             	mov    %edx,0x4(%ebx)
/work/x86_os_my/userprog/tss.c:78

	/* 在gdt中添加dpl为3的,用户级,数据段和代码段描述符 */
	*((struct gdt_desc*)0xc0000928) = make_gdt_desc((uint32_t*)0, 0xfffff, GDT_CODE_ATTR_LOW_DPL3, GDT_ATTR_HIGH);
c0005698:	bb 28 09 00 c0       	mov    $0xc0000928,%ebx
c000569d:	8d 45 e0             	lea    -0x20(%ebp),%eax
c00056a0:	83 ec 0c             	sub    $0xc,%esp
c00056a3:	68 c0 00 00 00       	push   $0xc0
c00056a8:	68 f8 00 00 00       	push   $0xf8
c00056ad:	68 ff ff 0f 00       	push   $0xfffff
c00056b2:	6a 00                	push   $0x0
c00056b4:	50                   	push   %eax
c00056b5:	e8 f5 fe ff ff       	call   c00055af <make_gdt_desc>
c00056ba:	83 c4 1c             	add    $0x1c,%esp
c00056bd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00056c0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c00056c3:	89 03                	mov    %eax,(%ebx)
c00056c5:	89 53 04             	mov    %edx,0x4(%ebx)
/work/x86_os_my/userprog/tss.c:79
	*((struct gdt_desc*)0xc0000930) = make_gdt_desc((uint32_t*)0, 0xfffff, GDT_DATA_ATTR_LOW_DPL3, GDT_ATTR_HIGH);
c00056c8:	bb 30 09 00 c0       	mov    $0xc0000930,%ebx
c00056cd:	8d 45 e0             	lea    -0x20(%ebp),%eax
c00056d0:	83 ec 0c             	sub    $0xc,%esp
c00056d3:	68 c0 00 00 00       	push   $0xc0
c00056d8:	68 f2 00 00 00       	push   $0xf2
c00056dd:	68 ff ff 0f 00       	push   $0xfffff
c00056e2:	6a 00                	push   $0x0
c00056e4:	50                   	push   %eax
c00056e5:	e8 c5 fe ff ff       	call   c00055af <make_gdt_desc>
c00056ea:	83 c4 1c             	add    $0x1c,%esp
c00056ed:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00056f0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c00056f3:	89 03                	mov    %eax,(%ebx)
c00056f5:	89 53 04             	mov    %edx,0x4(%ebx)
/work/x86_os_my/userprog/tss.c:83

	/* GDTR 16位的limit、32位的段基址 */
	// 先转换成 uint32_t 后，再将其转换成 uint64_t 位（不可一步到位转为 uint64_t）
	uint64_t gdt_operand = ((8 * 7 - 1) | ((uint64_t)(uint32_t)0xc0000900 << 16));   // 7个描述符大小
c00056f8:	c7 45 e8 37 00 00 09 	movl   $0x9000037,-0x18(%ebp)
c00056ff:	c7 45 ec 00 c0 00 00 	movl   $0xc000,-0x14(%ebp)
/work/x86_os_my/userprog/tss.c:84
	asm volatile ("lgdt %0" : : "m" (gdt_operand));
c0005706:	0f 01 55 e8          	lgdtl  -0x18(%ebp)
/work/x86_os_my/userprog/tss.c:85
	asm volatile ("ltr %w0" : : "r" (SELECTOR_TSS));
c000570a:	b8 20 00 00 00       	mov    $0x20,%eax
c000570f:	0f 00 d8             	ltr    %ax
/work/x86_os_my/userprog/tss.c:86
	put_str("tss_init and ltr done\n");
c0005712:	83 ec 0c             	sub    $0xc,%esp
c0005715:	68 24 e0 00 c0       	push   $0xc000e024
c000571a:	e8 31 cc ff ff       	call   c0002350 <put_str>
c000571f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/tss.c:87
}
c0005722:	90                   	nop
c0005723:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0005726:	c9                   	leave  
c0005727:	c3                   	ret    

c0005728 <start_process>:
start_process():
/work/x86_os_my/userprog/process.c:17
extern void intr_exit(void);

/* 构建用户进程初始上下文信息
 * 填充用户进程的中断栈，并将中断栈的信息，利用iretd填充到 CPU 中
 */
void start_process(void* filename_) {
c0005728:	55                   	push   %ebp
c0005729:	89 e5                	mov    %esp,%ebp
c000572b:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/process.c:18
	void* function = filename_;
c000572e:	8b 45 08             	mov    0x8(%ebp),%eax
c0005731:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:19
	struct task_struct* cur = running_thread();
c0005734:	e8 b3 e6 ff ff       	call   c0003dec <running_thread>
c0005739:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/process.c:20
	cur->self_kstack += sizeof(struct thread_stack);
c000573c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000573f:	8b 00                	mov    (%eax),%eax
c0005741:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
c0005747:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000574a:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/userprog/process.c:21
	struct intr_stack* proc_stack = (struct intr_stack*)cur->self_kstack;	 
c000574c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000574f:	8b 00                	mov    (%eax),%eax
c0005751:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/userprog/process.c:22
	proc_stack->edi = proc_stack->esi = proc_stack->ebp = proc_stack->esp_dummy = 0;
c0005754:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005757:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
c000575e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005761:	8b 50 10             	mov    0x10(%eax),%edx
c0005764:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005767:	89 50 0c             	mov    %edx,0xc(%eax)
c000576a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000576d:	8b 50 0c             	mov    0xc(%eax),%edx
c0005770:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005773:	89 50 08             	mov    %edx,0x8(%eax)
c0005776:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005779:	8b 50 08             	mov    0x8(%eax),%edx
c000577c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000577f:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/userprog/process.c:23
	proc_stack->ebx = proc_stack->edx = proc_stack->ecx = proc_stack->eax = 0;
c0005782:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005785:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
c000578c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000578f:	8b 50 20             	mov    0x20(%eax),%edx
c0005792:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005795:	89 50 1c             	mov    %edx,0x1c(%eax)
c0005798:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000579b:	8b 50 1c             	mov    0x1c(%eax),%edx
c000579e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00057a1:	89 50 18             	mov    %edx,0x18(%eax)
c00057a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00057a7:	8b 50 18             	mov    0x18(%eax),%edx
c00057aa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00057ad:	89 50 14             	mov    %edx,0x14(%eax)
/work/x86_os_my/userprog/process.c:28
	/* 在iretd返回时，如果发现未来的 CPL（也就是内核栈中 CS.RPL，或者说是返回到的用户进程的代码段CS.CPL）
	 * 权限低于（数值上大于） CPU 中段寄存器（如 DS、 ES、 FS、 GS）中选择子指向的内存段的 DPL，
	 * CPU 会自动将相应段寄存器的选择子置为 0 
	 * 这里gs的选择子在iretd返回后，会被自动清零。*/
	proc_stack->gs = 0;					// 用户态用不上,直接初始为0
c00057b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00057b3:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
/work/x86_os_my/userprog/process.c:29
	proc_stack->ds = proc_stack->es = proc_stack->fs = SELECTOR_U_DATA;		// 用户级数据段
c00057ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00057bd:	c7 40 28 33 00 00 00 	movl   $0x33,0x28(%eax)
c00057c4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00057c7:	8b 50 28             	mov    0x28(%eax),%edx
c00057ca:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00057cd:	89 50 2c             	mov    %edx,0x2c(%eax)
c00057d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00057d3:	8b 50 2c             	mov    0x2c(%eax),%edx
c00057d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00057d9:	89 50 30             	mov    %edx,0x30(%eax)
/work/x86_os_my/userprog/process.c:33

	/* 中断栈中，上边几个是中断处理函数手动压栈的，下边几个是硬件自动压栈的 */

	proc_stack->eip = function;			// 待执行的用户程序地址
c00057dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c00057df:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00057e2:	89 50 38             	mov    %edx,0x38(%eax)
/work/x86_os_my/userprog/process.c:34
	proc_stack->cs = SELECTOR_U_CODE;	// 用户级代码段
c00057e5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00057e8:	c7 40 3c 2b 00 00 00 	movl   $0x2b,0x3c(%eax)
/work/x86_os_my/userprog/process.c:35
	proc_stack->eflags = (EFLAGS_IOPL_0 | EFLAGS_MBS | EFLAGS_IF_1);
c00057ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00057f2:	c7 40 40 02 02 00 00 	movl   $0x202,0x40(%eax)
/work/x86_os_my/userprog/process.c:44
	 * process_activate 使用户进程页表生效【已经把CR3寄存器 更新为 用户进程的页表了】
	 * start_process    为用户进程创建3特权级栈【所以申请的内存空间来自用户进程的页表】
	 * 
	 * USER_STACK3_VADDR=(0xc0000000 - 0x1000)
	 */
	proc_stack->esp = (void*)((uint32_t)get_a_page(PF_USER, USER_STACK3_VADDR) + PG_SIZE) ;
c00057f9:	83 ec 08             	sub    $0x8,%esp
c00057fc:	68 00 f0 ff bf       	push   $0xbffff000
c0005801:	6a 02                	push   $0x2
c0005803:	e8 57 d4 ff ff       	call   c0002c5f <get_a_page>
c0005808:	83 c4 10             	add    $0x10,%esp
c000580b:	05 00 10 00 00       	add    $0x1000,%eax
c0005810:	89 c2                	mov    %eax,%edx
c0005812:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005815:	89 50 44             	mov    %edx,0x44(%eax)
/work/x86_os_my/userprog/process.c:45
	proc_stack->ss = SELECTOR_U_DATA;
c0005818:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000581b:	c7 40 48 33 00 00 00 	movl   $0x33,0x48(%eax)
/work/x86_os_my/userprog/process.c:52
	/* 将 esp 替换为 proc_stack
	 * 通过 jmp intr_exit 那里的一系列 pop 指令和 iretd 指令，
	 * 将 proc_stack 中的数据载入 CPU 的寄存器，
	 * 从而使程序“假装”退出中断，进入特权级 3
	 */
	asm volatile ("movl %0, %%esp; jmp intr_exit" : : "g" (proc_stack) : "memory");
c0005822:	8b 65 ec             	mov    -0x14(%ebp),%esp
c0005825:	e9 c6 c5 ff ff       	jmp    c0001df0 <intr_exit>
/work/x86_os_my/userprog/process.c:53
}
c000582a:	90                   	nop
c000582b:	c9                   	leave  
c000582c:	c3                   	ret    

c000582d <page_dir_activate>:
page_dir_activate():
/work/x86_os_my/userprog/process.c:56

/* 更新CR3寄存器，激活页目录表 */
void page_dir_activate(struct task_struct* p_thread) {
c000582d:	55                   	push   %ebp
c000582e:	89 e5                	mov    %esp,%ebp
c0005830:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/process.c:59
	
	/* 若为"内核线程",需要重新填充页表为0x100000 */
	uint32_t pagedir_phy_addr = 0x100000;	// 默认为内核的页目录物理地址,也就是内核线程所用的页目录表
c0005833:	c7 45 f4 00 00 10 00 	movl   $0x100000,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:62
	
	/* "用户态进程"有自己的页目录表 */
	if (p_thread->pgdir != NULL) {
c000583a:	8b 45 08             	mov    0x8(%ebp),%eax
c000583d:	8b 40 54             	mov    0x54(%eax),%eax
c0005840:	85 c0                	test   %eax,%eax
c0005842:	74 15                	je     c0005859 <page_dir_activate+0x2c>
/work/x86_os_my/userprog/process.c:63
		pagedir_phy_addr = addr_v2p((uint32_t)p_thread->pgdir);
c0005844:	8b 45 08             	mov    0x8(%ebp),%eax
c0005847:	8b 40 54             	mov    0x54(%eax),%eax
c000584a:	83 ec 0c             	sub    $0xc,%esp
c000584d:	50                   	push   %eax
c000584e:	e8 06 d6 ff ff       	call   c0002e59 <addr_v2p>
c0005853:	83 c4 10             	add    $0x10,%esp
c0005856:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:69
	}

	/* 更新页目录寄存器cr3,使新页表生效
	 * 实现进程间，虚拟地址空间的隔离。
	 */
	asm volatile ("movl %0, %%cr3" : : "r" (pagedir_phy_addr) : "memory");
c0005859:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000585c:	0f 22 d8             	mov    %eax,%cr3
/work/x86_os_my/userprog/process.c:70
}
c000585f:	90                   	nop
c0005860:	c9                   	leave  
c0005861:	c3                   	ret    

c0005862 <process_activate>:
process_activate():
/work/x86_os_my/userprog/process.c:76

/* 1.激活线程或进程的页表,【更新CR3寄存器】
 * 2.用户进程，更新tss中的esp0为进程的特权级0的栈
 * 【只有在任务调度时（中断时），才会切换页表及更新 0 级栈，因此 process_activate 是被"中断执行流"的 schedule 调用的！】
 */
void process_activate(struct task_struct* p_thread) {
c0005862:	55                   	push   %ebp
c0005863:	89 e5                	mov    %esp,%ebp
c0005865:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/userprog/process.c:77
	ASSERT(p_thread != NULL);
c0005868:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c000586c:	75 19                	jne    c0005887 <process_activate+0x25>
/work/x86_os_my/userprog/process.c:77 (discriminator 1)
c000586e:	68 3c e0 00 c0       	push   $0xc000e03c
c0005873:	68 f8 e0 00 c0       	push   $0xc000e0f8
c0005878:	6a 4d                	push   $0x4d
c000587a:	68 4d e0 00 c0       	push   $0xc000e04d
c000587f:	e8 7d cc ff ff       	call   c0002501 <panic_spin>
c0005884:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:80
	
	/* 激活该进程或线程的页目录表【重新加载了CR3】 */
	page_dir_activate(p_thread);
c0005887:	83 ec 0c             	sub    $0xc,%esp
c000588a:	ff 75 08             	pushl  0x8(%ebp)
c000588d:	e8 9b ff ff ff       	call   c000582d <page_dir_activate>
c0005892:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:83

	/* 内核线程特权级本身就是0,处理器进入中断时并不会从tss中获取0特权级栈地址,故不需要更新esp0 */
	if (p_thread->pgdir != NULL) {
c0005895:	8b 45 08             	mov    0x8(%ebp),%eax
c0005898:	8b 40 54             	mov    0x54(%eax),%eax
c000589b:	85 c0                	test   %eax,%eax
c000589d:	74 0e                	je     c00058ad <process_activate+0x4b>
/work/x86_os_my/userprog/process.c:86
		/* 若为用户进程,更新该进程的esp0,用于此进程被中断时保留上下文 
		 * 需要从tss中获取0特权级栈地址 */
		update_tss_esp(p_thread);	//就一行：g_tss.esp0 = (uint32_t*)((uint32_t)pthread + PG_SIZE);
c000589f:	83 ec 0c             	sub    $0xc,%esp
c00058a2:	ff 75 08             	pushl  0x8(%ebp)
c00058a5:	e8 f2 fc ff ff       	call   c000559c <update_tss_esp>
c00058aa:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:88
	}
}
c00058ad:	90                   	nop
c00058ae:	c9                   	leave  
c00058af:	c3                   	ret    

c00058b0 <create_page_dir>:
create_page_dir():
/work/x86_os_my/userprog/process.c:97
 * 
 * 要确保用户进程，在自己的地址空间中，能够访问到内核。
 * 即：任意进程的页目录表中，用户进程占第 0~767 个页目录项，内核占第 768~1023 个页目录项。
 * 0x300 = 768
 */
uint32_t* create_page_dir(void) {
c00058b0:	55                   	push   %ebp
c00058b1:	89 e5                	mov    %esp,%ebp
c00058b3:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/process.c:100

	/* 用户进程的页表不能让用户直接访问到,所以在内核空间来申请 */
	uint32_t* page_dir_vaddr = get_kernel_pages(1);
c00058b6:	83 ec 0c             	sub    $0xc,%esp
c00058b9:	6a 01                	push   $0x1
c00058bb:	e8 e9 d2 ff ff       	call   c0002ba9 <get_kernel_pages>
c00058c0:	83 c4 10             	add    $0x10,%esp
c00058c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:101
	if (page_dir_vaddr == NULL) {
c00058c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c00058ca:	75 17                	jne    c00058e3 <create_page_dir+0x33>
/work/x86_os_my/userprog/process.c:102
		console_put_str("create_page_dir: get_kernel_page failed!");
c00058cc:	83 ec 0c             	sub    $0xc,%esp
c00058cf:	68 60 e0 00 c0       	push   $0xc000e060
c00058d4:	e8 57 f3 ff ff       	call   c0004c30 <console_put_str>
c00058d9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:103
		return NULL;
c00058dc:	b8 00 00 00 00       	mov    $0x0,%eax
c00058e1:	eb 43                	jmp    c0005926 <create_page_dir+0x76>
/work/x86_os_my/userprog/process.c:109
	}

	/*** 1 复制内核的页目录表  ***/
	// page_dir_vaddr + 0x300*4 是内核页目录的第768项
	// 复制的页目录项个数=1024/4
	memcpy((uint32_t*)((uint32_t)page_dir_vaddr + 0x300*4), (uint32_t*)(0xfffff000+0x300*4), 1024);
c00058e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00058e6:	05 00 0c 00 00       	add    $0xc00,%eax
c00058eb:	83 ec 04             	sub    $0x4,%esp
c00058ee:	68 00 04 00 00       	push   $0x400
c00058f3:	68 00 fc ff ff       	push   $0xfffffc00
c00058f8:	50                   	push   %eax
c00058f9:	e8 59 e1 ff ff       	call   c0003a57 <memcpy>
c00058fe:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:113

	/*** 2 更新页目录表地址 ***/
	// 页目录表地址是页目录的最后一项
	uint32_t new_page_dir_phy_addr = addr_v2p((uint32_t)page_dir_vaddr);
c0005901:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005904:	83 ec 0c             	sub    $0xc,%esp
c0005907:	50                   	push   %eax
c0005908:	e8 4c d5 ff ff       	call   c0002e59 <addr_v2p>
c000590d:	83 c4 10             	add    $0x10,%esp
c0005910:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/process.c:114
	page_dir_vaddr[1023] = new_page_dir_phy_addr | PG_US_U | PG_RW_W | PG_P_1;
c0005913:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005916:	05 fc 0f 00 00       	add    $0xffc,%eax
c000591b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000591e:	83 ca 07             	or     $0x7,%edx
c0005921:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/userprog/process.c:116

	return page_dir_vaddr;
c0005923:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/userprog/process.c:117
}
c0005926:	c9                   	leave  
c0005927:	c3                   	ret    

c0005928 <create_user_vaddr_bitmap>:
create_user_vaddr_bitmap():
/work/x86_os_my/userprog/process.c:120

/* 创建用户进程虚拟地址位图 */
void create_user_vaddr_bitmap(struct task_struct* user_prog) {
c0005928:	55                   	push   %ebp
c0005929:	89 e5                	mov    %esp,%ebp
c000592b:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/process.c:121
   user_prog->userprog_vaddr.vaddr_start = USER_VADDR_START;	// linux用户程序入口地址 0x80480000
c000592e:	8b 45 08             	mov    0x8(%ebp),%eax
c0005931:	c7 40 60 00 80 04 08 	movl   $0x8048000,0x60(%eax)
/work/x86_os_my/userprog/process.c:122
   uint32_t bitmap_pg_cnt = DIV_ROUND_UP((0xc0000000 - USER_VADDR_START) / PG_SIZE / 8 , PG_SIZE);
c0005938:	c7 45 f4 17 00 00 00 	movl   $0x17,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:123
   user_prog->userprog_vaddr.vaddr_bitmap.bits = get_kernel_pages(bitmap_pg_cnt);
c000593f:	83 ec 0c             	sub    $0xc,%esp
c0005942:	ff 75 f4             	pushl  -0xc(%ebp)
c0005945:	e8 5f d2 ff ff       	call   c0002ba9 <get_kernel_pages>
c000594a:	83 c4 10             	add    $0x10,%esp
c000594d:	89 c2                	mov    %eax,%edx
c000594f:	8b 45 08             	mov    0x8(%ebp),%eax
c0005952:	89 50 5c             	mov    %edx,0x5c(%eax)
/work/x86_os_my/userprog/process.c:124
   user_prog->userprog_vaddr.vaddr_bitmap.btmp_bytes_len = (0xc0000000 - USER_VADDR_START) / PG_SIZE / 8;
c0005955:	8b 45 08             	mov    0x8(%ebp),%eax
c0005958:	c7 40 58 f7 6f 01 00 	movl   $0x16ff7,0x58(%eax)
/work/x86_os_my/userprog/process.c:125
   bitmap_init(&user_prog->userprog_vaddr.vaddr_bitmap);
c000595f:	8b 45 08             	mov    0x8(%ebp),%eax
c0005962:	83 c0 58             	add    $0x58,%eax
c0005965:	83 ec 0c             	sub    $0xc,%esp
c0005968:	50                   	push   %eax
c0005969:	e8 69 cc ff ff       	call   c00025d7 <bitmap_init>
c000596e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:126
}
c0005971:	90                   	nop
c0005972:	c9                   	leave  
c0005973:	c3                   	ret    

c0005974 <process_execute>:
process_execute():
/work/x86_os_my/userprog/process.c:129

/* 创建用户进程 */
void process_execute(void* filename, char* name) {
c0005974:	55                   	push   %ebp
c0005975:	89 e5                	mov    %esp,%ebp
c0005977:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/process.c:131
   /* pcb内核的数据结构,由内核来维护进程信息,因此要在内核内存池中申请 */
   struct task_struct* thread = get_kernel_pages(1);
c000597a:	83 ec 0c             	sub    $0xc,%esp
c000597d:	6a 01                	push   $0x1
c000597f:	e8 25 d2 ff ff       	call   c0002ba9 <get_kernel_pages>
c0005984:	83 c4 10             	add    $0x10,%esp
c0005987:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:132
   init_thread(thread, name, default_prio);			//初始化线程PCB结构体 struct task_struct
c000598a:	83 ec 04             	sub    $0x4,%esp
c000598d:	6a 1f                	push   $0x1f
c000598f:	ff 75 0c             	pushl  0xc(%ebp)
c0005992:	ff 75 f4             	pushl  -0xc(%ebp)
c0005995:	e8 03 e6 ff ff       	call   c0003f9d <init_thread>
c000599a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:133
   create_user_vaddr_bitmap(thread);				//【进程新增】创建用户进程，虚拟地址空间位图
c000599d:	83 ec 0c             	sub    $0xc,%esp
c00059a0:	ff 75 f4             	pushl  -0xc(%ebp)
c00059a3:	e8 80 ff ff ff       	call   c0005928 <create_user_vaddr_bitmap>
c00059a8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:134
   thread_create(thread, start_process, filename);	//初始化线程栈结构体 struct thread_stack
c00059ab:	83 ec 04             	sub    $0x4,%esp
c00059ae:	ff 75 08             	pushl  0x8(%ebp)
c00059b1:	68 28 57 00 c0       	push   $0xc0005728
c00059b6:	ff 75 f4             	pushl  -0xc(%ebp)
c00059b9:	e8 68 e5 ff ff       	call   c0003f26 <thread_create>
c00059be:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:135
   thread->pgdir = create_page_dir();				//【进程新增】创建用户进程，页目录表
c00059c1:	e8 ea fe ff ff       	call   c00058b0 <create_page_dir>
c00059c6:	89 c2                	mov    %eax,%edx
c00059c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00059cb:	89 50 54             	mov    %edx,0x54(%eax)
/work/x86_os_my/userprog/process.c:136
   block_desc_init(thread->u_block_desc);
c00059ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00059d1:	83 c0 64             	add    $0x64,%eax
c00059d4:	83 ec 0c             	sub    $0xc,%esp
c00059d7:	50                   	push   %eax
c00059d8:	e8 e2 de ff ff       	call   c00038bf <block_desc_init>
c00059dd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:138
   
   enum intr_status old_status = intr_disable();
c00059e0:	e8 34 c1 ff ff       	call   c0001b19 <intr_disable>
c00059e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/process.c:139
   ASSERT(!elem_find(&thread_ready_list, &thread->general_tag));
c00059e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00059eb:	83 c0 44             	add    $0x44,%eax
c00059ee:	83 ec 08             	sub    $0x8,%esp
c00059f1:	50                   	push   %eax
c00059f2:	68 a8 3c 01 c0       	push   $0xc0013ca8
c00059f7:	e8 e8 f0 ff ff       	call   c0004ae4 <elem_find>
c00059fc:	83 c4 10             	add    $0x10,%esp
c00059ff:	85 c0                	test   %eax,%eax
c0005a01:	74 1c                	je     c0005a1f <process_execute+0xab>
/work/x86_os_my/userprog/process.c:139 (discriminator 1)
c0005a03:	68 8c e0 00 c0       	push   $0xc000e08c
c0005a08:	68 0c e1 00 c0       	push   $0xc000e10c
c0005a0d:	68 8b 00 00 00       	push   $0x8b
c0005a12:	68 4d e0 00 c0       	push   $0xc000e04d
c0005a17:	e8 e5 ca ff ff       	call   c0002501 <panic_spin>
c0005a1c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:140
   list_append(&thread_ready_list, &thread->general_tag);
c0005a1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005a22:	83 c0 44             	add    $0x44,%eax
c0005a25:	83 ec 08             	sub    $0x8,%esp
c0005a28:	50                   	push   %eax
c0005a29:	68 a8 3c 01 c0       	push   $0xc0013ca8
c0005a2e:	e8 37 f0 ff ff       	call   c0004a6a <list_append>
c0005a33:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:141
   ASSERT(!elem_find(&thread_all_list, &thread->all_list_tag));
c0005a36:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005a39:	83 c0 4c             	add    $0x4c,%eax
c0005a3c:	83 ec 08             	sub    $0x8,%esp
c0005a3f:	50                   	push   %eax
c0005a40:	68 b8 3c 01 c0       	push   $0xc0013cb8
c0005a45:	e8 9a f0 ff ff       	call   c0004ae4 <elem_find>
c0005a4a:	83 c4 10             	add    $0x10,%esp
c0005a4d:	85 c0                	test   %eax,%eax
c0005a4f:	74 1c                	je     c0005a6d <process_execute+0xf9>
/work/x86_os_my/userprog/process.c:141 (discriminator 1)
c0005a51:	68 c4 e0 00 c0       	push   $0xc000e0c4
c0005a56:	68 0c e1 00 c0       	push   $0xc000e10c
c0005a5b:	68 8d 00 00 00       	push   $0x8d
c0005a60:	68 4d e0 00 c0       	push   $0xc000e04d
c0005a65:	e8 97 ca ff ff       	call   c0002501 <panic_spin>
c0005a6a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:142
   list_append(&thread_all_list, &thread->all_list_tag);
c0005a6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005a70:	83 c0 4c             	add    $0x4c,%eax
c0005a73:	83 ec 08             	sub    $0x8,%esp
c0005a76:	50                   	push   %eax
c0005a77:	68 b8 3c 01 c0       	push   $0xc0013cb8
c0005a7c:	e8 e9 ef ff ff       	call   c0004a6a <list_append>
c0005a81:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:143
   intr_set_status(old_status);
c0005a84:	83 ec 0c             	sub    $0xc,%esp
c0005a87:	ff 75 f0             	pushl  -0x10(%ebp)
c0005a8a:	e8 b3 c0 ff ff       	call   c0001b42 <intr_set_status>
c0005a8f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:144
}
c0005a92:	90                   	nop
c0005a93:	c9                   	leave  
c0005a94:	c3                   	ret    

c0005a95 <getpid>:
getpid():
/work/x86_os_my/lib/user/syscall.c:52
   );							       \
   retval;						       \
})

/* 返回当前任务pid */
uint32_t getpid() {
c0005a95:	55                   	push   %ebp
c0005a96:	89 e5                	mov    %esp,%ebp
c0005a98:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:53
	return _syscall0(SYS_GETPID);
c0005a9b:	b8 00 00 00 00       	mov    $0x0,%eax
c0005aa0:	cd 80                	int    $0x80
c0005aa2:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0005aa5:	8b 45 fc             	mov    -0x4(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:54
}
c0005aa8:	c9                   	leave  
c0005aa9:	c3                   	ret    

c0005aaa <write>:
write():
/work/x86_os_my/lib/user/syscall.c:57

/* 把buf中count个字符写入文件描述符fd */
uint32_t write(int32_t fd, const void* buf, uint32_t count) {
c0005aaa:	55                   	push   %ebp
c0005aab:	89 e5                	mov    %esp,%ebp
c0005aad:	53                   	push   %ebx
c0005aae:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:58
	return _syscall3(SYS_WRITE, fd, buf, count);
c0005ab1:	b8 01 00 00 00       	mov    $0x1,%eax
c0005ab6:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0005ab9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0005abc:	8b 55 10             	mov    0x10(%ebp),%edx
c0005abf:	cd 80                	int    $0x80
c0005ac1:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0005ac4:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:59
}
c0005ac7:	83 c4 10             	add    $0x10,%esp
c0005aca:	5b                   	pop    %ebx
c0005acb:	5d                   	pop    %ebp
c0005acc:	c3                   	ret    

c0005acd <malloc>:
malloc():
/work/x86_os_my/lib/user/syscall.c:62

/* 申请size字节大小的内存,并返回结果 */
void* malloc(uint32_t size) {
c0005acd:	55                   	push   %ebp
c0005ace:	89 e5                	mov    %esp,%ebp
c0005ad0:	53                   	push   %ebx
c0005ad1:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:63
	return (void*)_syscall1(SYS_MALLOC, size);
c0005ad4:	b8 02 00 00 00       	mov    $0x2,%eax
c0005ad9:	8b 55 08             	mov    0x8(%ebp),%edx
c0005adc:	89 d3                	mov    %edx,%ebx
c0005ade:	cd 80                	int    $0x80
c0005ae0:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0005ae3:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:64
}
c0005ae6:	83 c4 10             	add    $0x10,%esp
c0005ae9:	5b                   	pop    %ebx
c0005aea:	5d                   	pop    %ebp
c0005aeb:	c3                   	ret    

c0005aec <free>:
free():
/work/x86_os_my/lib/user/syscall.c:67

/* 释放ptr指向的内存 */
void free(void* ptr) {
c0005aec:	55                   	push   %ebp
c0005aed:	89 e5                	mov    %esp,%ebp
c0005aef:	53                   	push   %ebx
c0005af0:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:68
	_syscall1(SYS_FREE, ptr);
c0005af3:	b8 03 00 00 00       	mov    $0x3,%eax
c0005af8:	8b 55 08             	mov    0x8(%ebp),%edx
c0005afb:	89 d3                	mov    %edx,%ebx
c0005afd:	cd 80                	int    $0x80
c0005aff:	89 45 f8             	mov    %eax,-0x8(%ebp)
/work/x86_os_my/lib/user/syscall.c:69
}
c0005b02:	90                   	nop
c0005b03:	83 c4 10             	add    $0x10,%esp
c0005b06:	5b                   	pop    %ebx
c0005b07:	5d                   	pop    %ebp
c0005b08:	c3                   	ret    

c0005b09 <fork>:
fork():
/work/x86_os_my/lib/user/syscall.c:72

/* 派生子进程,返回子进程pid */
pid_t fork(void){
c0005b09:	55                   	push   %ebp
c0005b0a:	89 e5                	mov    %esp,%ebp
c0005b0c:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:73
	return _syscall0(SYS_FORK);
c0005b0f:	b8 04 00 00 00       	mov    $0x4,%eax
c0005b14:	cd 80                	int    $0x80
c0005b16:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0005b19:	8b 45 fc             	mov    -0x4(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:74
}
c0005b1c:	c9                   	leave  
c0005b1d:	c3                   	ret    

c0005b1e <read>:
read():
/work/x86_os_my/lib/user/syscall.c:77

/* 从文件描述符fd中读取count个字节到buf */
int32_t read(int32_t fd, void* buf, uint32_t count) {
c0005b1e:	55                   	push   %ebp
c0005b1f:	89 e5                	mov    %esp,%ebp
c0005b21:	53                   	push   %ebx
c0005b22:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:78
	return _syscall3(SYS_READ, fd, buf, count);
c0005b25:	b8 05 00 00 00       	mov    $0x5,%eax
c0005b2a:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0005b2d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0005b30:	8b 55 10             	mov    0x10(%ebp),%edx
c0005b33:	cd 80                	int    $0x80
c0005b35:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0005b38:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:79
}
c0005b3b:	83 c4 10             	add    $0x10,%esp
c0005b3e:	5b                   	pop    %ebx
c0005b3f:	5d                   	pop    %ebp
c0005b40:	c3                   	ret    

c0005b41 <putchar>:
putchar():
/work/x86_os_my/lib/user/syscall.c:82

/* 输出一个字符 */
void putchar(char char_asci) {
c0005b41:	55                   	push   %ebp
c0005b42:	89 e5                	mov    %esp,%ebp
c0005b44:	53                   	push   %ebx
c0005b45:	83 ec 14             	sub    $0x14,%esp
c0005b48:	8b 45 08             	mov    0x8(%ebp),%eax
c0005b4b:	88 45 e8             	mov    %al,-0x18(%ebp)
/work/x86_os_my/lib/user/syscall.c:83
	_syscall1(SYS_PUTCHAR, char_asci);
c0005b4e:	b8 06 00 00 00       	mov    $0x6,%eax
c0005b53:	0f b6 55 e8          	movzbl -0x18(%ebp),%edx
c0005b57:	89 d3                	mov    %edx,%ebx
c0005b59:	cd 80                	int    $0x80
c0005b5b:	89 45 f8             	mov    %eax,-0x8(%ebp)
/work/x86_os_my/lib/user/syscall.c:84
}
c0005b5e:	90                   	nop
c0005b5f:	83 c4 14             	add    $0x14,%esp
c0005b62:	5b                   	pop    %ebx
c0005b63:	5d                   	pop    %ebp
c0005b64:	c3                   	ret    

c0005b65 <clear>:
clear():
/work/x86_os_my/lib/user/syscall.c:87

/* 清空屏幕 */
void clear(void) {
c0005b65:	55                   	push   %ebp
c0005b66:	89 e5                	mov    %esp,%ebp
c0005b68:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:88
	_syscall0(SYS_CLEAR);
c0005b6b:	b8 07 00 00 00       	mov    $0x7,%eax
c0005b70:	cd 80                	int    $0x80
c0005b72:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/user/syscall.c:89
}
c0005b75:	90                   	nop
c0005b76:	c9                   	leave  
c0005b77:	c3                   	ret    

c0005b78 <getcwd>:
getcwd():
/work/x86_os_my/lib/user/syscall.c:92

/* 获取当前工作目录 */
char* getcwd(char* buf, uint32_t size) {
c0005b78:	55                   	push   %ebp
c0005b79:	89 e5                	mov    %esp,%ebp
c0005b7b:	53                   	push   %ebx
c0005b7c:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:93
	return (char*)_syscall2(SYS_GETCWD, buf, size);
c0005b7f:	b8 08 00 00 00       	mov    $0x8,%eax
c0005b84:	8b 55 08             	mov    0x8(%ebp),%edx
c0005b87:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0005b8a:	89 d3                	mov    %edx,%ebx
c0005b8c:	cd 80                	int    $0x80
c0005b8e:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0005b91:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:94
}
c0005b94:	83 c4 10             	add    $0x10,%esp
c0005b97:	5b                   	pop    %ebx
c0005b98:	5d                   	pop    %ebp
c0005b99:	c3                   	ret    

c0005b9a <open>:
open():
/work/x86_os_my/lib/user/syscall.c:97

/* 以flag方式打开文件pathname */
int32_t open(char* pathname, uint8_t flag) {
c0005b9a:	55                   	push   %ebp
c0005b9b:	89 e5                	mov    %esp,%ebp
c0005b9d:	53                   	push   %ebx
c0005b9e:	83 ec 14             	sub    $0x14,%esp
c0005ba1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005ba4:	88 45 e8             	mov    %al,-0x18(%ebp)
/work/x86_os_my/lib/user/syscall.c:98
	return _syscall2(SYS_OPEN, pathname, flag);
c0005ba7:	b8 09 00 00 00       	mov    $0x9,%eax
c0005bac:	8b 55 08             	mov    0x8(%ebp),%edx
c0005baf:	0f b6 4d e8          	movzbl -0x18(%ebp),%ecx
c0005bb3:	89 d3                	mov    %edx,%ebx
c0005bb5:	cd 80                	int    $0x80
c0005bb7:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0005bba:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:99
}
c0005bbd:	83 c4 14             	add    $0x14,%esp
c0005bc0:	5b                   	pop    %ebx
c0005bc1:	5d                   	pop    %ebp
c0005bc2:	c3                   	ret    

c0005bc3 <close>:
close():
/work/x86_os_my/lib/user/syscall.c:102

/* 关闭文件fd */
int32_t close(int32_t fd) {
c0005bc3:	55                   	push   %ebp
c0005bc4:	89 e5                	mov    %esp,%ebp
c0005bc6:	53                   	push   %ebx
c0005bc7:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:103
	return _syscall1(SYS_CLOSE, fd);
c0005bca:	b8 0a 00 00 00       	mov    $0xa,%eax
c0005bcf:	8b 55 08             	mov    0x8(%ebp),%edx
c0005bd2:	89 d3                	mov    %edx,%ebx
c0005bd4:	cd 80                	int    $0x80
c0005bd6:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0005bd9:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:104
}
c0005bdc:	83 c4 10             	add    $0x10,%esp
c0005bdf:	5b                   	pop    %ebx
c0005be0:	5d                   	pop    %ebp
c0005be1:	c3                   	ret    

c0005be2 <lseek>:
lseek():
/work/x86_os_my/lib/user/syscall.c:107

/* 设置文件偏移量 */
int32_t lseek(int32_t fd, int32_t offset, uint8_t whence) {
c0005be2:	55                   	push   %ebp
c0005be3:	89 e5                	mov    %esp,%ebp
c0005be5:	53                   	push   %ebx
c0005be6:	83 ec 14             	sub    $0x14,%esp
c0005be9:	8b 45 10             	mov    0x10(%ebp),%eax
c0005bec:	88 45 e8             	mov    %al,-0x18(%ebp)
/work/x86_os_my/lib/user/syscall.c:108
	return _syscall3(SYS_LSEEK, fd, offset, whence);
c0005bef:	b8 0b 00 00 00       	mov    $0xb,%eax
c0005bf4:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0005bf7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0005bfa:	0f b6 55 e8          	movzbl -0x18(%ebp),%edx
c0005bfe:	cd 80                	int    $0x80
c0005c00:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0005c03:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:109
}
c0005c06:	83 c4 14             	add    $0x14,%esp
c0005c09:	5b                   	pop    %ebx
c0005c0a:	5d                   	pop    %ebp
c0005c0b:	c3                   	ret    

c0005c0c <unlink>:
unlink():
/work/x86_os_my/lib/user/syscall.c:112

/* 删除文件pathname */
int32_t unlink(const char* pathname) {
c0005c0c:	55                   	push   %ebp
c0005c0d:	89 e5                	mov    %esp,%ebp
c0005c0f:	53                   	push   %ebx
c0005c10:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:113
	return _syscall1(SYS_UNLINK, pathname);
c0005c13:	b8 0c 00 00 00       	mov    $0xc,%eax
c0005c18:	8b 55 08             	mov    0x8(%ebp),%edx
c0005c1b:	89 d3                	mov    %edx,%ebx
c0005c1d:	cd 80                	int    $0x80
c0005c1f:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0005c22:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:114
}
c0005c25:	83 c4 10             	add    $0x10,%esp
c0005c28:	5b                   	pop    %ebx
c0005c29:	5d                   	pop    %ebp
c0005c2a:	c3                   	ret    

c0005c2b <mkdir>:
mkdir():
/work/x86_os_my/lib/user/syscall.c:117

/* 创建目录pathname */
int32_t mkdir(const char* pathname) {
c0005c2b:	55                   	push   %ebp
c0005c2c:	89 e5                	mov    %esp,%ebp
c0005c2e:	53                   	push   %ebx
c0005c2f:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:118
	return _syscall1(SYS_MKDIR, pathname);
c0005c32:	b8 0d 00 00 00       	mov    $0xd,%eax
c0005c37:	8b 55 08             	mov    0x8(%ebp),%edx
c0005c3a:	89 d3                	mov    %edx,%ebx
c0005c3c:	cd 80                	int    $0x80
c0005c3e:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0005c41:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:119
}
c0005c44:	83 c4 10             	add    $0x10,%esp
c0005c47:	5b                   	pop    %ebx
c0005c48:	5d                   	pop    %ebp
c0005c49:	c3                   	ret    

c0005c4a <opendir>:
opendir():
/work/x86_os_my/lib/user/syscall.c:122

/* 打开目录name */
struct dir* opendir(const char* name) {
c0005c4a:	55                   	push   %ebp
c0005c4b:	89 e5                	mov    %esp,%ebp
c0005c4d:	53                   	push   %ebx
c0005c4e:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:123
	return (struct dir*)_syscall1(SYS_OPENDIR, name);
c0005c51:	b8 0e 00 00 00       	mov    $0xe,%eax
c0005c56:	8b 55 08             	mov    0x8(%ebp),%edx
c0005c59:	89 d3                	mov    %edx,%ebx
c0005c5b:	cd 80                	int    $0x80
c0005c5d:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0005c60:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:124
}
c0005c63:	83 c4 10             	add    $0x10,%esp
c0005c66:	5b                   	pop    %ebx
c0005c67:	5d                   	pop    %ebp
c0005c68:	c3                   	ret    

c0005c69 <closedir>:
closedir():
/work/x86_os_my/lib/user/syscall.c:127

/* 关闭目录dir */
int32_t closedir(struct dir* dir) {
c0005c69:	55                   	push   %ebp
c0005c6a:	89 e5                	mov    %esp,%ebp
c0005c6c:	53                   	push   %ebx
c0005c6d:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:128
	return _syscall1(SYS_CLOSEDIR, dir);
c0005c70:	b8 0f 00 00 00       	mov    $0xf,%eax
c0005c75:	8b 55 08             	mov    0x8(%ebp),%edx
c0005c78:	89 d3                	mov    %edx,%ebx
c0005c7a:	cd 80                	int    $0x80
c0005c7c:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0005c7f:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:129
}
c0005c82:	83 c4 10             	add    $0x10,%esp
c0005c85:	5b                   	pop    %ebx
c0005c86:	5d                   	pop    %ebp
c0005c87:	c3                   	ret    

c0005c88 <rmdir>:
rmdir():
/work/x86_os_my/lib/user/syscall.c:132

/* 删除目录pathname */
int32_t rmdir(const char* pathname) {
c0005c88:	55                   	push   %ebp
c0005c89:	89 e5                	mov    %esp,%ebp
c0005c8b:	53                   	push   %ebx
c0005c8c:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:133
	return _syscall1(SYS_RMDIR, pathname);
c0005c8f:	b8 11 00 00 00       	mov    $0x11,%eax
c0005c94:	8b 55 08             	mov    0x8(%ebp),%edx
c0005c97:	89 d3                	mov    %edx,%ebx
c0005c99:	cd 80                	int    $0x80
c0005c9b:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0005c9e:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:134
}
c0005ca1:	83 c4 10             	add    $0x10,%esp
c0005ca4:	5b                   	pop    %ebx
c0005ca5:	5d                   	pop    %ebp
c0005ca6:	c3                   	ret    

c0005ca7 <readdir>:
readdir():
/work/x86_os_my/lib/user/syscall.c:137

/* 读取目录dir */
struct dir_entry* readdir(struct dir* dir) {
c0005ca7:	55                   	push   %ebp
c0005ca8:	89 e5                	mov    %esp,%ebp
c0005caa:	53                   	push   %ebx
c0005cab:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:138
	return (struct dir_entry*)_syscall1(SYS_READDIR, dir);
c0005cae:	b8 12 00 00 00       	mov    $0x12,%eax
c0005cb3:	8b 55 08             	mov    0x8(%ebp),%edx
c0005cb6:	89 d3                	mov    %edx,%ebx
c0005cb8:	cd 80                	int    $0x80
c0005cba:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0005cbd:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:139
}
c0005cc0:	83 c4 10             	add    $0x10,%esp
c0005cc3:	5b                   	pop    %ebx
c0005cc4:	5d                   	pop    %ebp
c0005cc5:	c3                   	ret    

c0005cc6 <rewinddir>:
rewinddir():
/work/x86_os_my/lib/user/syscall.c:142

/* 回归目录指针 */
void rewinddir(struct dir* dir) {
c0005cc6:	55                   	push   %ebp
c0005cc7:	89 e5                	mov    %esp,%ebp
c0005cc9:	53                   	push   %ebx
c0005cca:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:143
	_syscall1(SYS_REWINDDIR, dir);
c0005ccd:	b8 13 00 00 00       	mov    $0x13,%eax
c0005cd2:	8b 55 08             	mov    0x8(%ebp),%edx
c0005cd5:	89 d3                	mov    %edx,%ebx
c0005cd7:	cd 80                	int    $0x80
c0005cd9:	89 45 f8             	mov    %eax,-0x8(%ebp)
/work/x86_os_my/lib/user/syscall.c:144
}
c0005cdc:	90                   	nop
c0005cdd:	83 c4 10             	add    $0x10,%esp
c0005ce0:	5b                   	pop    %ebx
c0005ce1:	5d                   	pop    %ebp
c0005ce2:	c3                   	ret    

c0005ce3 <stat>:
stat():
/work/x86_os_my/lib/user/syscall.c:147

/* 获取path属性到buf中 */
int32_t stat(const char* path, struct stat* buf) {
c0005ce3:	55                   	push   %ebp
c0005ce4:	89 e5                	mov    %esp,%ebp
c0005ce6:	53                   	push   %ebx
c0005ce7:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:148
	return _syscall2(SYS_STAT, path, buf);
c0005cea:	b8 14 00 00 00       	mov    $0x14,%eax
c0005cef:	8b 55 08             	mov    0x8(%ebp),%edx
c0005cf2:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0005cf5:	89 d3                	mov    %edx,%ebx
c0005cf7:	cd 80                	int    $0x80
c0005cf9:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0005cfc:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:149
}
c0005cff:	83 c4 10             	add    $0x10,%esp
c0005d02:	5b                   	pop    %ebx
c0005d03:	5d                   	pop    %ebp
c0005d04:	c3                   	ret    

c0005d05 <chdir>:
chdir():
/work/x86_os_my/lib/user/syscall.c:152

/* 改变工作目录为path */
int32_t chdir(const char* path) {
c0005d05:	55                   	push   %ebp
c0005d06:	89 e5                	mov    %esp,%ebp
c0005d08:	53                   	push   %ebx
c0005d09:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:153
	return _syscall1(SYS_CHDIR, path);
c0005d0c:	b8 10 00 00 00       	mov    $0x10,%eax
c0005d11:	8b 55 08             	mov    0x8(%ebp),%edx
c0005d14:	89 d3                	mov    %edx,%ebx
c0005d16:	cd 80                	int    $0x80
c0005d18:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0005d1b:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:154
}
c0005d1e:	83 c4 10             	add    $0x10,%esp
c0005d21:	5b                   	pop    %ebx
c0005d22:	5d                   	pop    %ebp
c0005d23:	c3                   	ret    

c0005d24 <ps>:
ps():
/work/x86_os_my/lib/user/syscall.c:157

/* 显示任务列表 */
void ps(void) {
c0005d24:	55                   	push   %ebp
c0005d25:	89 e5                	mov    %esp,%ebp
c0005d27:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:158
	_syscall0(SYS_PS);
c0005d2a:	b8 15 00 00 00       	mov    $0x15,%eax
c0005d2f:	cd 80                	int    $0x80
c0005d31:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/user/syscall.c:159
}
c0005d34:	90                   	nop
c0005d35:	c9                   	leave  
c0005d36:	c3                   	ret    

c0005d37 <execv>:
execv():
/work/x86_os_my/lib/user/syscall.c:162

/* 执行pathname */
int32_t execv(const char* pathname, char** argv) {
c0005d37:	55                   	push   %ebp
c0005d38:	89 e5                	mov    %esp,%ebp
c0005d3a:	53                   	push   %ebx
c0005d3b:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:163
	return _syscall2(SYS_EXECV, pathname, argv);
c0005d3e:	b8 16 00 00 00       	mov    $0x16,%eax
c0005d43:	8b 55 08             	mov    0x8(%ebp),%edx
c0005d46:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0005d49:	89 d3                	mov    %edx,%ebx
c0005d4b:	cd 80                	int    $0x80
c0005d4d:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0005d50:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:164
}
c0005d53:	83 c4 10             	add    $0x10,%esp
c0005d56:	5b                   	pop    %ebx
c0005d57:	5d                   	pop    %ebp
c0005d58:	c3                   	ret    

c0005d59 <exit>:
exit():
/work/x86_os_my/lib/user/syscall.c:167

/* 以状态status退出 */
void exit(int32_t status) {
c0005d59:	55                   	push   %ebp
c0005d5a:	89 e5                	mov    %esp,%ebp
c0005d5c:	53                   	push   %ebx
c0005d5d:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:168
	_syscall1(SYS_EXIT, status);
c0005d60:	b8 17 00 00 00       	mov    $0x17,%eax
c0005d65:	8b 55 08             	mov    0x8(%ebp),%edx
c0005d68:	89 d3                	mov    %edx,%ebx
c0005d6a:	cd 80                	int    $0x80
c0005d6c:	89 45 f8             	mov    %eax,-0x8(%ebp)
/work/x86_os_my/lib/user/syscall.c:169
}
c0005d6f:	90                   	nop
c0005d70:	83 c4 10             	add    $0x10,%esp
c0005d73:	5b                   	pop    %ebx
c0005d74:	5d                   	pop    %ebp
c0005d75:	c3                   	ret    

c0005d76 <wait>:
wait():
/work/x86_os_my/lib/user/syscall.c:172

/* 等待子进程,子进程状态存储到status */
pid_t wait(int32_t* status) {
c0005d76:	55                   	push   %ebp
c0005d77:	89 e5                	mov    %esp,%ebp
c0005d79:	53                   	push   %ebx
c0005d7a:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:173
	return _syscall1(SYS_WAIT, status);
c0005d7d:	b8 18 00 00 00       	mov    $0x18,%eax
c0005d82:	8b 55 08             	mov    0x8(%ebp),%edx
c0005d85:	89 d3                	mov    %edx,%ebx
c0005d87:	cd 80                	int    $0x80
c0005d89:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0005d8c:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:174
}
c0005d8f:	83 c4 10             	add    $0x10,%esp
c0005d92:	5b                   	pop    %ebx
c0005d93:	5d                   	pop    %ebp
c0005d94:	c3                   	ret    

c0005d95 <sys_getpid>:
sys_getpid():
/work/x86_os_my/userprog/syscall-init.c:19
#define syscall_nr 32 
typedef void* syscall;
syscall syscall_table[syscall_nr];

/* 返回当前任务的pid */
uint32_t sys_getpid(void) {
c0005d95:	55                   	push   %ebp
c0005d96:	89 e5                	mov    %esp,%ebp
c0005d98:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/userprog/syscall-init.c:20
	return running_thread()->pid;
c0005d9b:	e8 4c e0 ff ff       	call   c0003dec <running_thread>
c0005da0:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0005da4:	98                   	cwtl   
/work/x86_os_my/userprog/syscall-init.c:21
}
c0005da5:	c9                   	leave  
c0005da6:	c3                   	ret    

c0005da7 <syscall_init>:
syscall_init():
/work/x86_os_my/userprog/syscall-init.c:24

/* 初始化系统调用 */
void syscall_init(void) {
c0005da7:	55                   	push   %ebp
c0005da8:	89 e5                	mov    %esp,%ebp
c0005daa:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/userprog/syscall-init.c:25
	put_str("syscall_init start\n");
c0005dad:	83 ec 0c             	sub    $0xc,%esp
c0005db0:	68 1c e1 00 c0       	push   $0xc000e11c
c0005db5:	e8 96 c5 ff ff       	call   c0002350 <put_str>
c0005dba:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/syscall-init.c:26
	syscall_table[SYS_GETPID]	= sys_getpid;
c0005dbd:	c7 05 60 3d 01 c0 95 	movl   $0xc0005d95,0xc0013d60
c0005dc4:	5d 00 c0 
/work/x86_os_my/userprog/syscall-init.c:27
	syscall_table[SYS_WRITE]	= sys_write;
c0005dc7:	c7 05 64 3d 01 c0 15 	movl   $0xc0007c15,0xc0013d64
c0005dce:	7c 00 c0 
/work/x86_os_my/userprog/syscall-init.c:28
	syscall_table[SYS_MALLOC]	= sys_malloc;
c0005dd1:	c7 05 68 3d 01 c0 ac 	movl   $0xc0002eac,0xc0013d68
c0005dd8:	2e 00 c0 
/work/x86_os_my/userprog/syscall-init.c:29
	syscall_table[SYS_FREE]		= sys_free;
c0005ddb:	c7 05 6c 3d 01 c0 d9 	movl   $0xc00034d9,0xc0013d6c
c0005de2:	34 00 c0 
/work/x86_os_my/userprog/syscall-init.c:30
	syscall_table[SYS_FORK]		= sys_fork;
c0005de5:	c7 05 70 3d 01 c0 01 	movl   $0xc000ba01,0xc0013d70
c0005dec:	ba 00 c0 
/work/x86_os_my/userprog/syscall-init.c:31
	syscall_table[SYS_READ]		= sys_read;
c0005def:	c7 05 74 3d 01 c0 fe 	movl   $0xc0007cfe,0xc0013d74
c0005df6:	7c 00 c0 
/work/x86_os_my/userprog/syscall-init.c:32
	syscall_table[SYS_PUTCHAR]	= sys_putchar;
c0005df9:	c7 05 78 3d 01 c0 9c 	movl   $0xc0008d9c,0xc0013d78
c0005e00:	8d 00 c0 
/work/x86_os_my/userprog/syscall-init.c:33
	syscall_table[SYS_CLEAR]	= cls_screen;
c0005e03:	c7 05 7c 3d 01 c0 3b 	movl   $0xc000243b,0xc0013d7c
c0005e0a:	24 00 c0 
/work/x86_os_my/userprog/syscall-init.c:34
	syscall_table[SYS_GETCWD]	= sys_getcwd;
c0005e0d:	c7 05 80 3d 01 c0 ef 	movl   $0xc00089ef,0xc0013d80
c0005e14:	89 00 c0 
/work/x86_os_my/userprog/syscall-init.c:35
	syscall_table[SYS_OPEN]		= sys_open;
c0005e17:	c7 05 84 3d 01 c0 09 	movl   $0xc0007909,0xc0013d84
c0005e1e:	79 00 c0 
/work/x86_os_my/userprog/syscall-init.c:36
	syscall_table[SYS_CLOSE]	= sys_close;
c0005e21:	c7 05 88 3d 01 c0 b6 	movl   $0xc0007bb6,0xc0013d88
c0005e28:	7b 00 c0 
/work/x86_os_my/userprog/syscall-init.c:37
	syscall_table[SYS_LSEEK]	= sys_lseek;
c0005e2b:	c7 05 8c 3d 01 c0 e2 	movl   $0xc0007de2,0xc0013d8c
c0005e32:	7d 00 c0 
/work/x86_os_my/userprog/syscall-init.c:38
	syscall_table[SYS_UNLINK]	= sys_unlink;
c0005e35:	c7 05 90 3d 01 c0 cd 	movl   $0xc0007ecd,0xc0013d90
c0005e3c:	7e 00 c0 
/work/x86_os_my/userprog/syscall-init.c:39
	syscall_table[SYS_MKDIR]	= sys_mkdir;
c0005e3f:	c7 05 94 3d 01 c0 f0 	movl   $0xc00080f0,0xc0013d94
c0005e46:	80 00 c0 
/work/x86_os_my/userprog/syscall-init.c:40
	syscall_table[SYS_OPENDIR]	= sys_opendir;
c0005e49:	c7 05 98 3d 01 c0 e0 	movl   $0xc00084e0,0xc0013d98
c0005e50:	84 00 c0 
/work/x86_os_my/userprog/syscall-init.c:41
	syscall_table[SYS_CLOSEDIR]	= sys_closedir;
c0005e53:	c7 05 9c 3d 01 c0 f0 	movl   $0xc00085f0,0xc0013d9c
c0005e5a:	85 00 c0 
/work/x86_os_my/userprog/syscall-init.c:42
	syscall_table[SYS_CHDIR]	= sys_chdir;
c0005e5d:	c7 05 a0 3d 01 c0 e3 	movl   $0xc0008be3,0xc0013da0
c0005e64:	8b 00 c0 
/work/x86_os_my/userprog/syscall-init.c:43
	syscall_table[SYS_RMDIR]	= sys_rmdir;
c0005e67:	c7 05 a4 3d 01 c0 65 	movl   $0xc0008665,0xc0013da4
c0005e6e:	86 00 c0 
/work/x86_os_my/userprog/syscall-init.c:44
	syscall_table[SYS_READDIR]	= sys_readdir;
c0005e71:	c7 05 a8 3d 01 c0 1d 	movl   $0xc000861d,0xc0013da8
c0005e78:	86 00 c0 
/work/x86_os_my/userprog/syscall-init.c:45
	syscall_table[SYS_REWINDDIR]	= sys_rewinddir;
c0005e7b:	c7 05 ac 3d 01 c0 55 	movl   $0xc0008655,0xc0013dac
c0005e82:	86 00 c0 
/work/x86_os_my/userprog/syscall-init.c:46
	syscall_table[SYS_STAT]		= sys_stat;
c0005e85:	c7 05 b0 3d 01 c0 72 	movl   $0xc0008c72,0xc0013db0
c0005e8c:	8c 00 c0 
/work/x86_os_my/userprog/syscall-init.c:47
	syscall_table[SYS_PS]		= sys_ps;
c0005e8f:	c7 05 b4 3d 01 c0 dc 	movl   $0xc00047dc,0xc0013db4
c0005e96:	47 00 c0 
/work/x86_os_my/userprog/syscall-init.c:48
	syscall_table[SYS_EXECV]	= sys_execv;
c0005e99:	c7 05 b8 3d 01 c0 6b 	movl   $0xc000cc6b,0xc0013db8
c0005ea0:	cc 00 c0 
/work/x86_os_my/userprog/syscall-init.c:49
	syscall_table[SYS_EXIT]		= sys_exit;
c0005ea3:	c7 05 bc 3d 01 c0 e6 	movl   $0xc000cfe6,0xc0013dbc
c0005eaa:	cf 00 c0 
/work/x86_os_my/userprog/syscall-init.c:50
	syscall_table[SYS_WAIT]		= sys_wait;
c0005ead:	c7 05 c0 3d 01 c0 33 	movl   $0xc000cf33,0xc0013dc0
c0005eb4:	cf 00 c0 
/work/x86_os_my/userprog/syscall-init.c:51
	put_str("syscall_init done\n");
c0005eb7:	83 ec 0c             	sub    $0xc,%esp
c0005eba:	68 30 e1 00 c0       	push   $0xc000e130
c0005ebf:	e8 8c c4 ff ff       	call   c0002350 <put_str>
c0005ec4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/syscall-init.c:52
}
c0005ec7:	90                   	nop
c0005ec8:	c9                   	leave  
c0005ec9:	c3                   	ret    

c0005eca <itoa>:
itoa():
/work/x86_os_my/lib/stdio.c:13
#define va_start(ap, v) ap = (va_list)&v	// 把ap指向第一个固定参数v
#define va_arg(ap, t) *((t*)(ap += 4))		// ap指向下一个参数并返回其值
#define va_end(ap) ap = NULL				// 清除ap

/* 将整型转换成字符(integer to ascii) */
static void itoa(uint32_t value, char** buf_ptr_addr, uint8_t base) {
c0005eca:	55                   	push   %ebp
c0005ecb:	89 e5                	mov    %esp,%ebp
c0005ecd:	83 ec 28             	sub    $0x28,%esp
c0005ed0:	8b 45 10             	mov    0x10(%ebp),%eax
c0005ed3:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/lib/stdio.c:14
	uint32_t m = value % base;	// 求模,最先掉下来的是最低位【比如base是16代表16进制】 
c0005ed6:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
c0005eda:	8b 45 08             	mov    0x8(%ebp),%eax
c0005edd:	ba 00 00 00 00       	mov    $0x0,%edx
c0005ee2:	f7 f1                	div    %ecx
c0005ee4:	89 55 f4             	mov    %edx,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:15
	uint32_t i = value / base;	// 取整
c0005ee7:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
c0005eeb:	8b 45 08             	mov    0x8(%ebp),%eax
c0005eee:	ba 00 00 00 00       	mov    $0x0,%edx
c0005ef3:	f7 f1                	div    %ecx
c0005ef5:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/stdio.c:16
	if (i) {
c0005ef8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0005efc:	74 16                	je     c0005f14 <itoa+0x4a>
/work/x86_os_my/lib/stdio.c:17
		itoa(i, buf_ptr_addr, base);	// 如果倍数不为0则递归调用。
c0005efe:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0005f02:	83 ec 04             	sub    $0x4,%esp
c0005f05:	50                   	push   %eax
c0005f06:	ff 75 0c             	pushl  0xc(%ebp)
c0005f09:	ff 75 f0             	pushl  -0x10(%ebp)
c0005f0c:	e8 b9 ff ff ff       	call   c0005eca <itoa>
c0005f11:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:19
	}
	if (m < 10) {	// 如果余数是0~9
c0005f14:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
c0005f18:	77 17                	ja     c0005f31 <itoa+0x67>
/work/x86_os_my/lib/stdio.c:20
		*((*buf_ptr_addr)++) = m + '0';			// 将数字0~9转换为字符'0'~'9'
c0005f1a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005f1d:	8b 00                	mov    (%eax),%eax
c0005f1f:	8d 48 01             	lea    0x1(%eax),%ecx
c0005f22:	8b 55 0c             	mov    0xc(%ebp),%edx
c0005f25:	89 0a                	mov    %ecx,(%edx)
c0005f27:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0005f2a:	83 c2 30             	add    $0x30,%edx
c0005f2d:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/stdio.c:24
	} else {		// 否则余数是A~F
		*((*buf_ptr_addr)++) = m - 10 + 'A';	// 将数字A~F转换为字符'A'~'F'
	}
}
c0005f2f:	eb 15                	jmp    c0005f46 <itoa+0x7c>
/work/x86_os_my/lib/stdio.c:22
		itoa(i, buf_ptr_addr, base);	// 如果倍数不为0则递归调用。
	}
	if (m < 10) {	// 如果余数是0~9
		*((*buf_ptr_addr)++) = m + '0';			// 将数字0~9转换为字符'0'~'9'
	} else {		// 否则余数是A~F
		*((*buf_ptr_addr)++) = m - 10 + 'A';	// 将数字A~F转换为字符'A'~'F'
c0005f31:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005f34:	8b 00                	mov    (%eax),%eax
c0005f36:	8d 48 01             	lea    0x1(%eax),%ecx
c0005f39:	8b 55 0c             	mov    0xc(%ebp),%edx
c0005f3c:	89 0a                	mov    %ecx,(%edx)
c0005f3e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0005f41:	83 c2 37             	add    $0x37,%edx
c0005f44:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/stdio.c:24
	}
}
c0005f46:	90                   	nop
c0005f47:	c9                   	leave  
c0005f48:	c3                   	ret    

c0005f49 <vsprintf>:
vsprintf():
/work/x86_os_my/lib/stdio.c:27

/* 将参数ap按照格式format输出到字符串str,并返回替换后str长度 */
uint32_t vsprintf(char* str, const char* format, va_list ap) {
c0005f49:	55                   	push   %ebp
c0005f4a:	89 e5                	mov    %esp,%ebp
c0005f4c:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/lib/stdio.c:28
	char* buf_ptr = str;
c0005f4f:	8b 45 08             	mov    0x8(%ebp),%eax
c0005f52:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/lib/stdio.c:29
	const char* index_ptr = format;
c0005f55:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005f58:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:30
	char index_char = *index_ptr;
c0005f5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005f5e:	0f b6 00             	movzbl (%eax),%eax
c0005f61:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:33
	int32_t arg_int;
	char* arg_str;
	while(index_char) {
c0005f64:	e9 43 01 00 00       	jmp    c00060ac <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:34
		if (index_char != '%') {
c0005f69:	80 7d f3 25          	cmpb   $0x25,-0xd(%ebp)
c0005f6d:	74 21                	je     c0005f90 <vsprintf+0x47>
/work/x86_os_my/lib/stdio.c:35
			*(buf_ptr++) = index_char;
c0005f6f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0005f72:	8d 50 01             	lea    0x1(%eax),%edx
c0005f75:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0005f78:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
c0005f7c:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/stdio.c:36
			index_char = *(++index_ptr);
c0005f7e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0005f82:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005f85:	0f b6 00             	movzbl (%eax),%eax
c0005f88:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:37
			continue;
c0005f8b:	e9 1c 01 00 00       	jmp    c00060ac <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:39
		}
		index_char = *(++index_ptr);	 // 得到%后面的字符
c0005f90:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0005f94:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005f97:	0f b6 00             	movzbl (%eax),%eax
c0005f9a:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:40
		switch(index_char) {
c0005f9d:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c0005fa1:	83 f8 64             	cmp    $0x64,%eax
c0005fa4:	0f 84 8e 00 00 00    	je     c0006038 <vsprintf+0xef>
c0005faa:	83 f8 64             	cmp    $0x64,%eax
c0005fad:	7f 0a                	jg     c0005fb9 <vsprintf+0x70>
c0005faf:	83 f8 63             	cmp    $0x63,%eax
c0005fb2:	74 60                	je     c0006014 <vsprintf+0xcb>
c0005fb4:	e9 f3 00 00 00       	jmp    c00060ac <vsprintf+0x163>
c0005fb9:	83 f8 73             	cmp    $0x73,%eax
c0005fbc:	74 0e                	je     c0005fcc <vsprintf+0x83>
c0005fbe:	83 f8 78             	cmp    $0x78,%eax
c0005fc1:	0f 84 b6 00 00 00    	je     c000607d <vsprintf+0x134>
c0005fc7:	e9 e0 00 00 00       	jmp    c00060ac <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:42
			case 's':
			arg_str = va_arg(ap, char*);
c0005fcc:	83 45 10 04          	addl   $0x4,0x10(%ebp)
c0005fd0:	8b 45 10             	mov    0x10(%ebp),%eax
c0005fd3:	8b 00                	mov    (%eax),%eax
c0005fd5:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/lib/stdio.c:43
			strcpy(buf_ptr, arg_str);
c0005fd8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0005fdb:	83 ec 08             	sub    $0x8,%esp
c0005fde:	ff 75 e8             	pushl  -0x18(%ebp)
c0005fe1:	50                   	push   %eax
c0005fe2:	e8 53 db ff ff       	call   c0003b3a <strcpy>
c0005fe7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:44
			buf_ptr += strlen(arg_str);
c0005fea:	83 ec 0c             	sub    $0xc,%esp
c0005fed:	ff 75 e8             	pushl  -0x18(%ebp)
c0005ff0:	e8 9a db ff ff       	call   c0003b8f <strlen>
c0005ff5:	83 c4 10             	add    $0x10,%esp
c0005ff8:	89 c2                	mov    %eax,%edx
c0005ffa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0005ffd:	01 d0                	add    %edx,%eax
c0005fff:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/lib/stdio.c:45
			index_char = *(++index_ptr);
c0006002:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0006006:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0006009:	0f b6 00             	movzbl (%eax),%eax
c000600c:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:46
			break;
c000600f:	e9 98 00 00 00       	jmp    c00060ac <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:49

			case 'c':
			*(buf_ptr++) = va_arg(ap, char);
c0006014:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0006017:	8d 50 01             	lea    0x1(%eax),%edx
c000601a:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c000601d:	83 45 10 04          	addl   $0x4,0x10(%ebp)
c0006021:	8b 55 10             	mov    0x10(%ebp),%edx
c0006024:	0f b6 12             	movzbl (%edx),%edx
c0006027:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/stdio.c:50
			index_char = *(++index_ptr);
c0006029:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c000602d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0006030:	0f b6 00             	movzbl (%eax),%eax
c0006033:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:51
			break;
c0006036:	eb 74                	jmp    c00060ac <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:54

			case 'd':
			arg_int = va_arg(ap, int);
c0006038:	83 45 10 04          	addl   $0x4,0x10(%ebp)
c000603c:	8b 45 10             	mov    0x10(%ebp),%eax
c000603f:	8b 00                	mov    (%eax),%eax
c0006041:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/lib/stdio.c:56
			/* 若是负数, 将其转为正数后,再正数前面输出个负号'-'. */
			if (arg_int < 0) {
c0006044:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0006048:	79 0f                	jns    c0006059 <vsprintf+0x110>
/work/x86_os_my/lib/stdio.c:57
				arg_int = 0 - arg_int;
c000604a:	f7 5d ec             	negl   -0x14(%ebp)
/work/x86_os_my/lib/stdio.c:58
				*buf_ptr++ = '-';
c000604d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0006050:	8d 50 01             	lea    0x1(%eax),%edx
c0006053:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0006056:	c6 00 2d             	movb   $0x2d,(%eax)
/work/x86_os_my/lib/stdio.c:60
			}
			itoa(arg_int, &buf_ptr, 10); 
c0006059:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000605c:	83 ec 04             	sub    $0x4,%esp
c000605f:	6a 0a                	push   $0xa
c0006061:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0006064:	52                   	push   %edx
c0006065:	50                   	push   %eax
c0006066:	e8 5f fe ff ff       	call   c0005eca <itoa>
c000606b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:61
			index_char = *(++index_ptr);
c000606e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0006072:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0006075:	0f b6 00             	movzbl (%eax),%eax
c0006078:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:62
			break;
c000607b:	eb 2f                	jmp    c00060ac <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:65

			case 'x':
			arg_int = va_arg(ap, int);
c000607d:	83 45 10 04          	addl   $0x4,0x10(%ebp)
c0006081:	8b 45 10             	mov    0x10(%ebp),%eax
c0006084:	8b 00                	mov    (%eax),%eax
c0006086:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/lib/stdio.c:66
			itoa(arg_int, &buf_ptr, 16); 
c0006089:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000608c:	83 ec 04             	sub    $0x4,%esp
c000608f:	6a 10                	push   $0x10
c0006091:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0006094:	52                   	push   %edx
c0006095:	50                   	push   %eax
c0006096:	e8 2f fe ff ff       	call   c0005eca <itoa>
c000609b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:67
			index_char = *(++index_ptr); // 跳过格式字符并更新index_char
c000609e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c00060a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00060a5:	0f b6 00             	movzbl (%eax),%eax
c00060a8:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:68
			break;
c00060ab:	90                   	nop
/work/x86_os_my/lib/stdio.c:33
	char* buf_ptr = str;
	const char* index_ptr = format;
	char index_char = *index_ptr;
	int32_t arg_int;
	char* arg_str;
	while(index_char) {
c00060ac:	80 7d f3 00          	cmpb   $0x0,-0xd(%ebp)
c00060b0:	0f 85 b3 fe ff ff    	jne    c0005f69 <vsprintf+0x20>
/work/x86_os_my/lib/stdio.c:71
			itoa(arg_int, &buf_ptr, 16); 
			index_char = *(++index_ptr); // 跳过格式字符并更新index_char
			break;
		}
	}
	return strlen(str);
c00060b6:	83 ec 0c             	sub    $0xc,%esp
c00060b9:	ff 75 08             	pushl  0x8(%ebp)
c00060bc:	e8 ce da ff ff       	call   c0003b8f <strlen>
c00060c1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:72
}
c00060c4:	c9                   	leave  
c00060c5:	c3                   	ret    

c00060c6 <sprintf>:
sprintf():
/work/x86_os_my/lib/stdio.c:75

/* 同printf不同的地方就是字符串不是写到终端,而是写到buf中 */
uint32_t sprintf(char* buf, const char* format, ...) {
c00060c6:	55                   	push   %ebp
c00060c7:	89 e5                	mov    %esp,%ebp
c00060c9:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/stdio.c:78
	va_list args;
	uint32_t retval;
	va_start(args, format);
c00060cc:	8d 45 0c             	lea    0xc(%ebp),%eax
c00060cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:79
	retval = vsprintf(buf, format, args);
c00060d2:	8b 45 0c             	mov    0xc(%ebp),%eax
c00060d5:	83 ec 04             	sub    $0x4,%esp
c00060d8:	ff 75 f4             	pushl  -0xc(%ebp)
c00060db:	50                   	push   %eax
c00060dc:	ff 75 08             	pushl  0x8(%ebp)
c00060df:	e8 65 fe ff ff       	call   c0005f49 <vsprintf>
c00060e4:	83 c4 10             	add    $0x10,%esp
c00060e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/stdio.c:80
	va_end(args);
c00060ea:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:81
	return retval;
c00060f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
/work/x86_os_my/lib/stdio.c:82
}
c00060f4:	c9                   	leave  
c00060f5:	c3                   	ret    

c00060f6 <printf>:
printf():
/work/x86_os_my/lib/stdio.c:85

/* 格式化输出字符串format */
uint32_t printf(const char* format, ...) {
c00060f6:	55                   	push   %ebp
c00060f7:	89 e5                	mov    %esp,%ebp
c00060f9:	57                   	push   %edi
c00060fa:	81 ec 14 04 00 00    	sub    $0x414,%esp
/work/x86_os_my/lib/stdio.c:87
	va_list args;
	va_start(args, format);	       // 使args指向format
c0006100:	8d 45 08             	lea    0x8(%ebp),%eax
c0006103:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:88
	char buf[1024] = {0};	       // 用于存储拼接后的字符串
c0006106:	8d 95 f4 fb ff ff    	lea    -0x40c(%ebp),%edx
c000610c:	b8 00 00 00 00       	mov    $0x0,%eax
c0006111:	b9 00 01 00 00       	mov    $0x100,%ecx
c0006116:	89 d7                	mov    %edx,%edi
c0006118:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/lib/stdio.c:89
	vsprintf(buf, format, args);
c000611a:	8b 45 08             	mov    0x8(%ebp),%eax
c000611d:	83 ec 04             	sub    $0x4,%esp
c0006120:	ff 75 f4             	pushl  -0xc(%ebp)
c0006123:	50                   	push   %eax
c0006124:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c000612a:	50                   	push   %eax
c000612b:	e8 19 fe ff ff       	call   c0005f49 <vsprintf>
c0006130:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:90
	va_end(args);
c0006133:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:91
	return write(1, buf, strlen(buf));
c000613a:	83 ec 0c             	sub    $0xc,%esp
c000613d:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c0006143:	50                   	push   %eax
c0006144:	e8 46 da ff ff       	call   c0003b8f <strlen>
c0006149:	83 c4 10             	add    $0x10,%esp
c000614c:	83 ec 04             	sub    $0x4,%esp
c000614f:	50                   	push   %eax
c0006150:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c0006156:	50                   	push   %eax
c0006157:	6a 01                	push   $0x1
c0006159:	e8 4c f9 ff ff       	call   c0005aaa <write>
c000615e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:92
}
c0006161:	8b 7d fc             	mov    -0x4(%ebp),%edi
c0006164:	c9                   	leave  
c0006165:	c3                   	ret    

c0006166 <outb>:
outb():
/work/x86_os_my/lib/kernel/io.h:17
#define __LIB_IO_H
#include "stdint.h"
//inline省去了函数调用开支

/* 向端口port写入一个字节*/
static inline void outb(uint16_t port, uint8_t data) {
c0006166:	55                   	push   %ebp
c0006167:	89 e5                	mov    %esp,%ebp
c0006169:	83 ec 08             	sub    $0x8,%esp
c000616c:	8b 55 08             	mov    0x8(%ebp),%edx
c000616f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006172:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c0006176:	88 45 f8             	mov    %al,-0x8(%ebp)
/work/x86_os_my/lib/kernel/io.h:21
/*********************************************************
 a表示用寄存器al或ax或eax,对端口指定N表示0~255, d表示用dx存储端口号, 
 %b0表示对应al,%w1表示对应dx */ 
   asm volatile ( "outb %b0, %w1" : : "a" (data), "Nd" (port));    
c0006179:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c000617d:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0006181:	ee                   	out    %al,(%dx)
/work/x86_os_my/lib/kernel/io.h:23
/******************************************************/
}
c0006182:	90                   	nop
c0006183:	c9                   	leave  
c0006184:	c3                   	ret    

c0006185 <outsw>:
outsw():
/work/x86_os_my/lib/kernel/io.h:26

/* 将addr处起始的word_cnt个字写入端口port */
static inline void outsw(uint16_t port, const void* addr, uint32_t word_cnt) {
c0006185:	55                   	push   %ebp
c0006186:	89 e5                	mov    %esp,%ebp
c0006188:	56                   	push   %esi
c0006189:	53                   	push   %ebx
c000618a:	83 ec 04             	sub    $0x4,%esp
c000618d:	8b 45 08             	mov    0x8(%ebp),%eax
c0006190:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/io.h:31
/*********************************************************
   +表示此限制即做输入又做输出.
   outsw是把ds:esi处的16位的内容写入port端口, 我们在设置段描述符时, 
   已经将ds,es,ss段的选择子都设置为相同的值了,此时不用担心数据错乱。*/
   asm volatile ("cld; rep outsw" : "+S" (addr), "+c" (word_cnt) : "d" (port));
c0006194:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c0006198:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c000619b:	8b 45 10             	mov    0x10(%ebp),%eax
c000619e:	89 cb                	mov    %ecx,%ebx
c00061a0:	89 de                	mov    %ebx,%esi
c00061a2:	89 c1                	mov    %eax,%ecx
c00061a4:	fc                   	cld    
c00061a5:	66 f3 6f             	rep outsw %ds:(%esi),(%dx)
c00061a8:	89 c8                	mov    %ecx,%eax
c00061aa:	89 f3                	mov    %esi,%ebx
c00061ac:	89 5d 0c             	mov    %ebx,0xc(%ebp)
c00061af:	89 45 10             	mov    %eax,0x10(%ebp)
/work/x86_os_my/lib/kernel/io.h:33
/******************************************************/
}
c00061b2:	90                   	nop
c00061b3:	83 c4 04             	add    $0x4,%esp
c00061b6:	5b                   	pop    %ebx
c00061b7:	5e                   	pop    %esi
c00061b8:	5d                   	pop    %ebp
c00061b9:	c3                   	ret    

c00061ba <inb>:
inb():
/work/x86_os_my/lib/kernel/io.h:36

/* 将从端口port读入的一个字节返回 */
static inline uint8_t inb(uint16_t port) {
c00061ba:	55                   	push   %ebp
c00061bb:	89 e5                	mov    %esp,%ebp
c00061bd:	83 ec 14             	sub    $0x14,%esp
c00061c0:	8b 45 08             	mov    0x8(%ebp),%eax
c00061c3:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
/work/x86_os_my/lib/kernel/io.h:38
   uint8_t data;
   asm volatile ("inb %w1, %b0" : "=a" (data) : "Nd" (port));
c00061c7:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c00061cb:	89 c2                	mov    %eax,%edx
c00061cd:	ec                   	in     (%dx),%al
c00061ce:	88 45 ff             	mov    %al,-0x1(%ebp)
/work/x86_os_my/lib/kernel/io.h:39
   return data;
c00061d1:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
/work/x86_os_my/lib/kernel/io.h:40
}
c00061d5:	c9                   	leave  
c00061d6:	c3                   	ret    

c00061d7 <insw>:
insw():
/work/x86_os_my/lib/kernel/io.h:43

/* 将从端口port读入的word_cnt个字写入addr */
static inline void insw(uint16_t port, void* addr, uint32_t word_cnt) {
c00061d7:	55                   	push   %ebp
c00061d8:	89 e5                	mov    %esp,%ebp
c00061da:	57                   	push   %edi
c00061db:	53                   	push   %ebx
c00061dc:	83 ec 04             	sub    $0x4,%esp
c00061df:	8b 45 08             	mov    0x8(%ebp),%eax
c00061e2:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/io.h:48
/******************************************************
   insw是将从端口port处读入的16位内容写入es:edi指向的内存,
   我们在设置段描述符时, 已经将ds,es,ss段的选择子都设置为相同的值了,
   此时不用担心数据错乱。*/
   asm volatile ("cld; rep insw" : "+D" (addr), "+c" (word_cnt) : "d" (port) : "memory");
c00061e6:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c00061ea:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c00061ed:	8b 45 10             	mov    0x10(%ebp),%eax
c00061f0:	89 cb                	mov    %ecx,%ebx
c00061f2:	89 df                	mov    %ebx,%edi
c00061f4:	89 c1                	mov    %eax,%ecx
c00061f6:	fc                   	cld    
c00061f7:	66 f3 6d             	rep insw (%dx),%es:(%edi)
c00061fa:	89 c8                	mov    %ecx,%eax
c00061fc:	89 fb                	mov    %edi,%ebx
c00061fe:	89 5d 0c             	mov    %ebx,0xc(%ebp)
c0006201:	89 45 10             	mov    %eax,0x10(%ebp)
/work/x86_os_my/lib/kernel/io.h:50
/******************************************************/
}
c0006204:	90                   	nop
c0006205:	83 c4 04             	add    $0x4,%esp
c0006208:	5b                   	pop    %ebx
c0006209:	5f                   	pop    %edi
c000620a:	5d                   	pop    %ebp
c000620b:	c3                   	ret    

c000620c <select_disk>:
select_disk():
/work/x86_os_my/device/ide.c:78
} __attribute__ ((packed));


/////////////////////////////////////// ide驱动部分 ////////////////////////////////////////////////
/* 选择读写的硬盘 */
static void select_disk(struct disk* hd) {
c000620c:	55                   	push   %ebp
c000620d:	89 e5                	mov    %esp,%ebp
c000620f:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/device/ide.c:79
	uint8_t reg_device = BIT_DEV_MBS | BIT_DEV_LBA;
c0006212:	c6 45 ff e0          	movb   $0xe0,-0x1(%ebp)
/work/x86_os_my/device/ide.c:80
	if (hd->dev_no == 1) {	// 若是从盘就置DEV位为1
c0006216:	8b 45 08             	mov    0x8(%ebp),%eax
c0006219:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
c000621d:	3c 01                	cmp    $0x1,%al
c000621f:	75 04                	jne    c0006225 <select_disk+0x19>
/work/x86_os_my/device/ide.c:81
		reg_device |= BIT_DEV_DEV;
c0006221:	80 4d ff 10          	orb    $0x10,-0x1(%ebp)
/work/x86_os_my/device/ide.c:83
	}
	outb(reg_dev(hd->my_channel), reg_device);
c0006225:	0f b6 55 ff          	movzbl -0x1(%ebp),%edx
c0006229:	8b 45 08             	mov    0x8(%ebp),%eax
c000622c:	8b 40 08             	mov    0x8(%eax),%eax
c000622f:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0006233:	83 c0 06             	add    $0x6,%eax
c0006236:	0f b7 c0             	movzwl %ax,%eax
c0006239:	52                   	push   %edx
c000623a:	50                   	push   %eax
c000623b:	e8 26 ff ff ff       	call   c0006166 <outb>
c0006240:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/ide.c:84
}
c0006243:	90                   	nop
c0006244:	c9                   	leave  
c0006245:	c3                   	ret    

c0006246 <select_sector>:
select_sector():
/work/x86_os_my/device/ide.c:87

/* 向硬盘控制器写入起始扇区地址及要读写的扇区数 */
static void select_sector(struct disk* hd, uint32_t lba, uint8_t sec_cnt) {
c0006246:	55                   	push   %ebp
c0006247:	89 e5                	mov    %esp,%ebp
c0006249:	83 ec 28             	sub    $0x28,%esp
c000624c:	8b 45 10             	mov    0x10(%ebp),%eax
c000624f:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/device/ide.c:88
	ASSERT(lba <= max_lba);
c0006252:	81 7d 0c ff 7f 02 00 	cmpl   $0x27fff,0xc(%ebp)
c0006259:	76 19                	jbe    c0006274 <select_sector+0x2e>
/work/x86_os_my/device/ide.c:88 (discriminator 1)
c000625b:	68 44 e1 00 c0       	push   $0xc000e144
c0006260:	68 dc e2 00 c0       	push   $0xc000e2dc
c0006265:	6a 58                	push   $0x58
c0006267:	68 53 e1 00 c0       	push   $0xc000e153
c000626c:	e8 90 c2 ff ff       	call   c0002501 <panic_spin>
c0006271:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:89
	struct ide_channel* channel = hd->my_channel;
c0006274:	8b 45 08             	mov    0x8(%ebp),%eax
c0006277:	8b 40 08             	mov    0x8(%eax),%eax
c000627a:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/ide.c:92

	/* 写入要读写的扇区数*/
	outb(reg_sect_cnt(channel), sec_cnt);	// 如果sec_cnt为0,则表示写入256个扇区
c000627d:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c0006281:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0006284:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0006288:	83 c0 02             	add    $0x2,%eax
c000628b:	0f b7 c0             	movzwl %ax,%eax
c000628e:	83 ec 08             	sub    $0x8,%esp
c0006291:	52                   	push   %edx
c0006292:	50                   	push   %eax
c0006293:	e8 ce fe ff ff       	call   c0006166 <outb>
c0006298:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:95

	/* 写入lba地址(即扇区号) */
	outb(reg_lba_l(channel), lba);			// lba地址的低8位,不用单独取出低8位.outb函数中的汇编指令outb %b0, %w1会只用al。
c000629b:	8b 45 0c             	mov    0xc(%ebp),%eax
c000629e:	0f b6 d0             	movzbl %al,%edx
c00062a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00062a4:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c00062a8:	83 c0 03             	add    $0x3,%eax
c00062ab:	0f b7 c0             	movzwl %ax,%eax
c00062ae:	83 ec 08             	sub    $0x8,%esp
c00062b1:	52                   	push   %edx
c00062b2:	50                   	push   %eax
c00062b3:	e8 ae fe ff ff       	call   c0006166 <outb>
c00062b8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:96
	outb(reg_lba_m(channel), lba >> 8);		// lba地址的8~15位
c00062bb:	8b 45 0c             	mov    0xc(%ebp),%eax
c00062be:	c1 e8 08             	shr    $0x8,%eax
c00062c1:	0f b6 d0             	movzbl %al,%edx
c00062c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00062c7:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c00062cb:	83 c0 04             	add    $0x4,%eax
c00062ce:	0f b7 c0             	movzwl %ax,%eax
c00062d1:	83 ec 08             	sub    $0x8,%esp
c00062d4:	52                   	push   %edx
c00062d5:	50                   	push   %eax
c00062d6:	e8 8b fe ff ff       	call   c0006166 <outb>
c00062db:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:97
	outb(reg_lba_h(channel), lba >> 16);	// lba地址的16~23位
c00062de:	8b 45 0c             	mov    0xc(%ebp),%eax
c00062e1:	c1 e8 10             	shr    $0x10,%eax
c00062e4:	0f b6 d0             	movzbl %al,%edx
c00062e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00062ea:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c00062ee:	83 c0 05             	add    $0x5,%eax
c00062f1:	0f b7 c0             	movzwl %ax,%eax
c00062f4:	83 ec 08             	sub    $0x8,%esp
c00062f7:	52                   	push   %edx
c00062f8:	50                   	push   %eax
c00062f9:	e8 68 fe ff ff       	call   c0006166 <outb>
c00062fe:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:101

	/* 因为lba地址的24~27位要存储在device寄存器的0～3位,
	* 无法单独写入这4位,所以在此处把device寄存器再重新写入一次*/
	outb(reg_dev(channel), BIT_DEV_MBS | BIT_DEV_LBA | (hd->dev_no == 1 ? BIT_DEV_DEV : 0) | lba >> 24);
c0006301:	8b 45 08             	mov    0x8(%ebp),%eax
c0006304:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
c0006308:	3c 01                	cmp    $0x1,%al
c000630a:	75 07                	jne    c0006313 <select_sector+0xcd>
/work/x86_os_my/device/ide.c:101 (discriminator 1)
c000630c:	ba f0 ff ff ff       	mov    $0xfffffff0,%edx
c0006311:	eb 05                	jmp    c0006318 <select_sector+0xd2>
/work/x86_os_my/device/ide.c:101 (discriminator 2)
c0006313:	ba e0 ff ff ff       	mov    $0xffffffe0,%edx
/work/x86_os_my/device/ide.c:101 (discriminator 4)
c0006318:	8b 45 0c             	mov    0xc(%ebp),%eax
c000631b:	c1 e8 18             	shr    $0x18,%eax
c000631e:	09 d0                	or     %edx,%eax
c0006320:	0f b6 d0             	movzbl %al,%edx
c0006323:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0006326:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c000632a:	83 c0 06             	add    $0x6,%eax
c000632d:	0f b7 c0             	movzwl %ax,%eax
c0006330:	83 ec 08             	sub    $0x8,%esp
c0006333:	52                   	push   %edx
c0006334:	50                   	push   %eax
c0006335:	e8 2c fe ff ff       	call   c0006166 <outb>
c000633a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:102 (discriminator 4)
}
c000633d:	90                   	nop
c000633e:	c9                   	leave  
c000633f:	c3                   	ret    

c0006340 <cmd_out>:
cmd_out():
/work/x86_os_my/device/ide.c:105

/* 向通道channel发命令cmd */
static void cmd_out(struct ide_channel* channel, uint8_t cmd) {
c0006340:	55                   	push   %ebp
c0006341:	89 e5                	mov    %esp,%ebp
c0006343:	83 ec 04             	sub    $0x4,%esp
c0006346:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006349:	88 45 fc             	mov    %al,-0x4(%ebp)
/work/x86_os_my/device/ide.c:107
	/* 只要向硬盘发出了命令便将此标记置为true,硬盘中断处理程序需要根据它来判断 */
	channel->expecting_intr = true;
c000634c:	8b 45 08             	mov    0x8(%ebp),%eax
c000634f:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
/work/x86_os_my/device/ide.c:108
	outb(reg_cmd(channel), cmd);
c0006356:	0f b6 55 fc          	movzbl -0x4(%ebp),%edx
c000635a:	8b 45 08             	mov    0x8(%ebp),%eax
c000635d:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0006361:	83 c0 07             	add    $0x7,%eax
c0006364:	0f b7 c0             	movzwl %ax,%eax
c0006367:	52                   	push   %edx
c0006368:	50                   	push   %eax
c0006369:	e8 f8 fd ff ff       	call   c0006166 <outb>
c000636e:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/ide.c:109
}
c0006371:	90                   	nop
c0006372:	c9                   	leave  
c0006373:	c3                   	ret    

c0006374 <read_from_sector>:
read_from_sector():
/work/x86_os_my/device/ide.c:112

/* 硬盘读入sec_cnt个扇区的数据到buf */
static void read_from_sector(struct disk* hd, void* buf, uint8_t sec_cnt) {
c0006374:	55                   	push   %ebp
c0006375:	89 e5                	mov    %esp,%ebp
c0006377:	83 ec 14             	sub    $0x14,%esp
c000637a:	8b 45 10             	mov    0x10(%ebp),%eax
c000637d:	88 45 ec             	mov    %al,-0x14(%ebp)
/work/x86_os_my/device/ide.c:114
	uint32_t size_in_byte;
	if (sec_cnt == 0) {
c0006380:	80 7d ec 00          	cmpb   $0x0,-0x14(%ebp)
c0006384:	75 09                	jne    c000638f <read_from_sector+0x1b>
/work/x86_os_my/device/ide.c:116
		/* 因为sec_cnt是8位变量,由主调函数将其赋值时,若为256则会将最高位的1丢掉变为0 */
		size_in_byte = 256 * 512;
c0006386:	c7 45 fc 00 00 02 00 	movl   $0x20000,-0x4(%ebp)
c000638d:	eb 0a                	jmp    c0006399 <read_from_sector+0x25>
/work/x86_os_my/device/ide.c:118
	} else { 
		size_in_byte = sec_cnt * 512; 
c000638f:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0006393:	c1 e0 09             	shl    $0x9,%eax
c0006396:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/device/ide.c:120
	}
	insw(reg_data(hd->my_channel), buf, size_in_byte / 2);
c0006399:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000639c:	d1 e8                	shr    %eax
c000639e:	89 c2                	mov    %eax,%edx
c00063a0:	8b 45 08             	mov    0x8(%ebp),%eax
c00063a3:	8b 40 08             	mov    0x8(%eax),%eax
c00063a6:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c00063aa:	0f b7 c0             	movzwl %ax,%eax
c00063ad:	52                   	push   %edx
c00063ae:	ff 75 0c             	pushl  0xc(%ebp)
c00063b1:	50                   	push   %eax
c00063b2:	e8 20 fe ff ff       	call   c00061d7 <insw>
c00063b7:	83 c4 0c             	add    $0xc,%esp
/work/x86_os_my/device/ide.c:121
}
c00063ba:	90                   	nop
c00063bb:	c9                   	leave  
c00063bc:	c3                   	ret    

c00063bd <write2sector>:
write2sector():
/work/x86_os_my/device/ide.c:124

/* 将buf中sec_cnt扇区的数据写入硬盘 */
static void write2sector(struct disk* hd, void* buf, uint8_t sec_cnt) {
c00063bd:	55                   	push   %ebp
c00063be:	89 e5                	mov    %esp,%ebp
c00063c0:	83 ec 14             	sub    $0x14,%esp
c00063c3:	8b 45 10             	mov    0x10(%ebp),%eax
c00063c6:	88 45 ec             	mov    %al,-0x14(%ebp)
/work/x86_os_my/device/ide.c:126
	uint32_t size_in_byte;
	if (sec_cnt == 0) {
c00063c9:	80 7d ec 00          	cmpb   $0x0,-0x14(%ebp)
c00063cd:	75 09                	jne    c00063d8 <write2sector+0x1b>
/work/x86_os_my/device/ide.c:128
		/* 因为sec_cnt是8位变量,由主调函数将其赋值时,若为256则会将最高位的1丢掉变为0 */
		size_in_byte = 256 * 512;
c00063cf:	c7 45 fc 00 00 02 00 	movl   $0x20000,-0x4(%ebp)
c00063d6:	eb 0a                	jmp    c00063e2 <write2sector+0x25>
/work/x86_os_my/device/ide.c:130
	} else { 
		size_in_byte = sec_cnt * 512; 
c00063d8:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c00063dc:	c1 e0 09             	shl    $0x9,%eax
c00063df:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/device/ide.c:132
	}
	outsw(reg_data(hd->my_channel), buf, size_in_byte / 2);
c00063e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c00063e5:	d1 e8                	shr    %eax
c00063e7:	89 c2                	mov    %eax,%edx
c00063e9:	8b 45 08             	mov    0x8(%ebp),%eax
c00063ec:	8b 40 08             	mov    0x8(%eax),%eax
c00063ef:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c00063f3:	0f b7 c0             	movzwl %ax,%eax
c00063f6:	52                   	push   %edx
c00063f7:	ff 75 0c             	pushl  0xc(%ebp)
c00063fa:	50                   	push   %eax
c00063fb:	e8 85 fd ff ff       	call   c0006185 <outsw>
c0006400:	83 c4 0c             	add    $0xc,%esp
/work/x86_os_my/device/ide.c:133
}
c0006403:	90                   	nop
c0006404:	c9                   	leave  
c0006405:	c3                   	ret    

c0006406 <busy_wait>:
busy_wait():
/work/x86_os_my/device/ide.c:136

/* 等待30秒 */
static bool busy_wait(struct disk* hd) {
c0006406:	55                   	push   %ebp
c0006407:	89 e5                	mov    %esp,%ebp
c0006409:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/ide.c:137
	struct ide_channel* channel = hd->my_channel;
c000640c:	8b 45 08             	mov    0x8(%ebp),%eax
c000640f:	8b 40 08             	mov    0x8(%eax),%eax
c0006412:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:138
	uint16_t time_limit = 30 * 1000;	// 可以等待30000毫秒
c0006415:	66 c7 45 f6 30 75    	movw   $0x7530,-0xa(%ebp)
/work/x86_os_my/device/ide.c:139
	while (time_limit -= 10 >= 0) {
c000641b:	eb 45                	jmp    c0006462 <busy_wait+0x5c>
/work/x86_os_my/device/ide.c:140
		if (!(inb(reg_status(channel)) & BIT_STAT_BSY)) {
c000641d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006420:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0006424:	83 c0 07             	add    $0x7,%eax
c0006427:	0f b7 c0             	movzwl %ax,%eax
c000642a:	50                   	push   %eax
c000642b:	e8 8a fd ff ff       	call   c00061ba <inb>
c0006430:	83 c4 04             	add    $0x4,%esp
c0006433:	84 c0                	test   %al,%al
c0006435:	78 1e                	js     c0006455 <busy_wait+0x4f>
/work/x86_os_my/device/ide.c:141
			return (inb(reg_status(channel)) & BIT_STAT_DRQ);
c0006437:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000643a:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c000643e:	83 c0 07             	add    $0x7,%eax
c0006441:	0f b7 c0             	movzwl %ax,%eax
c0006444:	50                   	push   %eax
c0006445:	e8 70 fd ff ff       	call   c00061ba <inb>
c000644a:	83 c4 04             	add    $0x4,%esp
c000644d:	0f b6 c0             	movzbl %al,%eax
c0006450:	83 e0 08             	and    $0x8,%eax
c0006453:	eb 1e                	jmp    c0006473 <busy_wait+0x6d>
/work/x86_os_my/device/ide.c:143
		} else {
			mtime_sleep(10);			// 睡眠10毫秒
c0006455:	83 ec 0c             	sub    $0xc,%esp
c0006458:	6a 0a                	push   $0xa
c000645a:	e8 e4 b8 ff ff       	call   c0001d43 <mtime_sleep>
c000645f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:139

/* 等待30秒 */
static bool busy_wait(struct disk* hd) {
	struct ide_channel* channel = hd->my_channel;
	uint16_t time_limit = 30 * 1000;	// 可以等待30000毫秒
	while (time_limit -= 10 >= 0) {
c0006462:	66 83 6d f6 01       	subw   $0x1,-0xa(%ebp)
c0006467:	66 83 7d f6 00       	cmpw   $0x0,-0xa(%ebp)
c000646c:	75 af                	jne    c000641d <busy_wait+0x17>
/work/x86_os_my/device/ide.c:146
			return (inb(reg_status(channel)) & BIT_STAT_DRQ);
		} else {
			mtime_sleep(10);			// 睡眠10毫秒
		}
	}
	return false;
c000646e:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/device/ide.c:147
}
c0006473:	c9                   	leave  
c0006474:	c3                   	ret    

c0006475 <ide_read>:
ide_read():
/work/x86_os_my/device/ide.c:150

/* 从硬盘读取sec_cnt个扇区到buf */
void ide_read(struct disk* hd, uint32_t lba, void* buf, uint32_t sec_cnt) { 
c0006475:	55                   	push   %ebp
c0006476:	89 e5                	mov    %esp,%ebp
c0006478:	83 ec 58             	sub    $0x58,%esp
/work/x86_os_my/device/ide.c:151
	ASSERT(lba <= max_lba);
c000647b:	81 7d 0c ff 7f 02 00 	cmpl   $0x27fff,0xc(%ebp)
c0006482:	76 1c                	jbe    c00064a0 <ide_read+0x2b>
/work/x86_os_my/device/ide.c:151 (discriminator 1)
c0006484:	68 44 e1 00 c0       	push   $0xc000e144
c0006489:	68 ec e2 00 c0       	push   $0xc000e2ec
c000648e:	68 97 00 00 00       	push   $0x97
c0006493:	68 53 e1 00 c0       	push   $0xc000e153
c0006498:	e8 64 c0 ff ff       	call   c0002501 <panic_spin>
c000649d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:152
	ASSERT(sec_cnt > 0);
c00064a0:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c00064a4:	75 1c                	jne    c00064c2 <ide_read+0x4d>
/work/x86_os_my/device/ide.c:152 (discriminator 1)
c00064a6:	68 60 e1 00 c0       	push   $0xc000e160
c00064ab:	68 ec e2 00 c0       	push   $0xc000e2ec
c00064b0:	68 98 00 00 00       	push   $0x98
c00064b5:	68 53 e1 00 c0       	push   $0xc000e153
c00064ba:	e8 42 c0 ff ff       	call   c0002501 <panic_spin>
c00064bf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:153
	lock_acquire (&hd->my_channel->lock);
c00064c2:	8b 45 08             	mov    0x8(%ebp),%eax
c00064c5:	8b 40 08             	mov    0x8(%eax),%eax
c00064c8:	83 c0 0c             	add    $0xc,%eax
c00064cb:	83 ec 0c             	sub    $0xc,%esp
c00064ce:	50                   	push   %eax
c00064cf:	e8 cb e9 ff ff       	call   c0004e9f <lock_acquire>
c00064d4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:156

	/* 1 先选择操作的硬盘 */
	select_disk(hd);
c00064d7:	83 ec 0c             	sub    $0xc,%esp
c00064da:	ff 75 08             	pushl  0x8(%ebp)
c00064dd:	e8 2a fd ff ff       	call   c000620c <select_disk>
c00064e2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:159

	uint32_t secs_op;		// 每次操作的扇区数
	uint32_t secs_done = 0;	// 已完成的扇区数
c00064e5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/device/ide.c:160
	while(secs_done < sec_cnt) {
c00064ec:	e9 d4 00 00 00       	jmp    c00065c5 <ide_read+0x150>
/work/x86_os_my/device/ide.c:161
		if ((secs_done + 256) <= sec_cnt) {
c00064f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00064f4:	05 00 01 00 00       	add    $0x100,%eax
c00064f9:	3b 45 14             	cmp    0x14(%ebp),%eax
c00064fc:	77 09                	ja     c0006507 <ide_read+0x92>
/work/x86_os_my/device/ide.c:162
			secs_op = 256;
c00064fe:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
c0006505:	eb 09                	jmp    c0006510 <ide_read+0x9b>
/work/x86_os_my/device/ide.c:164
		} else {
			secs_op = sec_cnt - secs_done;
c0006507:	8b 45 14             	mov    0x14(%ebp),%eax
c000650a:	2b 45 f0             	sub    -0x10(%ebp),%eax
c000650d:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/ide.c:168
		}

		/* 2 写入待读入的扇区数和起始扇区号 */
		select_sector(hd, lba + secs_done, secs_op);
c0006510:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0006513:	0f b6 c0             	movzbl %al,%eax
c0006516:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0006519:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000651c:	01 ca                	add    %ecx,%edx
c000651e:	83 ec 04             	sub    $0x4,%esp
c0006521:	50                   	push   %eax
c0006522:	52                   	push   %edx
c0006523:	ff 75 08             	pushl  0x8(%ebp)
c0006526:	e8 1b fd ff ff       	call   c0006246 <select_sector>
c000652b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:171

		/* 3 执行的命令写入reg_cmd寄存器 */
		cmd_out(hd->my_channel, CMD_READ_SECTOR);	// 准备开始读数据
c000652e:	8b 45 08             	mov    0x8(%ebp),%eax
c0006531:	8b 40 08             	mov    0x8(%eax),%eax
c0006534:	83 ec 08             	sub    $0x8,%esp
c0006537:	6a 20                	push   $0x20
c0006539:	50                   	push   %eax
c000653a:	e8 01 fe ff ff       	call   c0006340 <cmd_out>
c000653f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:176

		/*********************   阻塞自己的时机  ***********************
		在硬盘已经开始工作(开始在内部读数据或写数据)后才能阻塞自己,现在硬盘已经开始忙了,
		将自己阻塞,等待硬盘完成读操作后通过中断处理程序唤醒自己*/
		sema_down(&hd->my_channel->disk_done);
c0006542:	8b 45 08             	mov    0x8(%ebp),%eax
c0006545:	8b 40 08             	mov    0x8(%eax),%eax
c0006548:	83 c0 2c             	add    $0x2c,%eax
c000654b:	83 ec 0c             	sub    $0xc,%esp
c000654e:	50                   	push   %eax
c000654f:	e8 a1 e7 ff ff       	call   c0004cf5 <sema_down>
c0006554:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:181
		/*************************************************************/

		/* 4 检测硬盘状态是否可读 */
		/* 醒来后开始执行下面代码*/
		if (!busy_wait(hd)) {	// 若失败
c0006557:	83 ec 0c             	sub    $0xc,%esp
c000655a:	ff 75 08             	pushl  0x8(%ebp)
c000655d:	e8 a4 fe ff ff       	call   c0006406 <busy_wait>
c0006562:	83 c4 10             	add    $0x10,%esp
c0006565:	85 c0                	test   %eax,%eax
c0006567:	75 33                	jne    c000659c <ide_read+0x127>
/work/x86_os_my/device/ide.c:183
			char error[64];
			sprintf(error, "%s read sector %d failed!!!!!!\n", hd->name, lba);
c0006569:	8b 45 08             	mov    0x8(%ebp),%eax
c000656c:	ff 75 0c             	pushl  0xc(%ebp)
c000656f:	50                   	push   %eax
c0006570:	68 6c e1 00 c0       	push   $0xc000e16c
c0006575:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0006578:	50                   	push   %eax
c0006579:	e8 48 fb ff ff       	call   c00060c6 <sprintf>
c000657e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:184
			PANIC(error);
c0006581:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0006584:	50                   	push   %eax
c0006585:	68 ec e2 00 c0       	push   $0xc000e2ec
c000658a:	68 b8 00 00 00       	push   $0xb8
c000658f:	68 53 e1 00 c0       	push   $0xc000e153
c0006594:	e8 68 bf ff ff       	call   c0002501 <panic_spin>
c0006599:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:188
		}

		/* 5 把数据从硬盘的缓冲区中读出 */
		read_from_sector(hd, (void*)((uint32_t)buf + secs_done * 512), secs_op);
c000659c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000659f:	0f b6 c0             	movzbl %al,%eax
c00065a2:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00065a5:	89 d1                	mov    %edx,%ecx
c00065a7:	c1 e1 09             	shl    $0x9,%ecx
c00065aa:	8b 55 10             	mov    0x10(%ebp),%edx
c00065ad:	01 ca                	add    %ecx,%edx
c00065af:	83 ec 04             	sub    $0x4,%esp
c00065b2:	50                   	push   %eax
c00065b3:	52                   	push   %edx
c00065b4:	ff 75 08             	pushl  0x8(%ebp)
c00065b7:	e8 b8 fd ff ff       	call   c0006374 <read_from_sector>
c00065bc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:189
		secs_done += secs_op;
c00065bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00065c2:	01 45 f0             	add    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:160
	/* 1 先选择操作的硬盘 */
	select_disk(hd);

	uint32_t secs_op;		// 每次操作的扇区数
	uint32_t secs_done = 0;	// 已完成的扇区数
	while(secs_done < sec_cnt) {
c00065c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00065c8:	3b 45 14             	cmp    0x14(%ebp),%eax
c00065cb:	0f 82 20 ff ff ff    	jb     c00064f1 <ide_read+0x7c>
/work/x86_os_my/device/ide.c:191

		/* 5 把数据从硬盘的缓冲区中读出 */
		read_from_sector(hd, (void*)((uint32_t)buf + secs_done * 512), secs_op);
		secs_done += secs_op;
	}
	lock_release(&hd->my_channel->lock);
c00065d1:	8b 45 08             	mov    0x8(%ebp),%eax
c00065d4:	8b 40 08             	mov    0x8(%eax),%eax
c00065d7:	83 c0 0c             	add    $0xc,%eax
c00065da:	83 ec 0c             	sub    $0xc,%esp
c00065dd:	50                   	push   %eax
c00065de:	e8 33 e9 ff ff       	call   c0004f16 <lock_release>
c00065e3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:192
}
c00065e6:	90                   	nop
c00065e7:	c9                   	leave  
c00065e8:	c3                   	ret    

c00065e9 <ide_write>:
ide_write():
/work/x86_os_my/device/ide.c:195

/* 将buf中sec_cnt扇区数据写入硬盘 */
void ide_write(struct disk* hd, uint32_t lba, void* buf, uint32_t sec_cnt) {
c00065e9:	55                   	push   %ebp
c00065ea:	89 e5                	mov    %esp,%ebp
c00065ec:	83 ec 58             	sub    $0x58,%esp
/work/x86_os_my/device/ide.c:196
	ASSERT(lba <= max_lba);
c00065ef:	81 7d 0c ff 7f 02 00 	cmpl   $0x27fff,0xc(%ebp)
c00065f6:	76 1c                	jbe    c0006614 <ide_write+0x2b>
/work/x86_os_my/device/ide.c:196 (discriminator 1)
c00065f8:	68 44 e1 00 c0       	push   $0xc000e144
c00065fd:	68 f8 e2 00 c0       	push   $0xc000e2f8
c0006602:	68 c4 00 00 00       	push   $0xc4
c0006607:	68 53 e1 00 c0       	push   $0xc000e153
c000660c:	e8 f0 be ff ff       	call   c0002501 <panic_spin>
c0006611:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:197
	ASSERT(sec_cnt > 0);
c0006614:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0006618:	75 1c                	jne    c0006636 <ide_write+0x4d>
/work/x86_os_my/device/ide.c:197 (discriminator 1)
c000661a:	68 60 e1 00 c0       	push   $0xc000e160
c000661f:	68 f8 e2 00 c0       	push   $0xc000e2f8
c0006624:	68 c5 00 00 00       	push   $0xc5
c0006629:	68 53 e1 00 c0       	push   $0xc000e153
c000662e:	e8 ce be ff ff       	call   c0002501 <panic_spin>
c0006633:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:198
	lock_acquire (&hd->my_channel->lock);
c0006636:	8b 45 08             	mov    0x8(%ebp),%eax
c0006639:	8b 40 08             	mov    0x8(%eax),%eax
c000663c:	83 c0 0c             	add    $0xc,%eax
c000663f:	83 ec 0c             	sub    $0xc,%esp
c0006642:	50                   	push   %eax
c0006643:	e8 57 e8 ff ff       	call   c0004e9f <lock_acquire>
c0006648:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:201

	/* 1 先选择操作的硬盘 */
	select_disk(hd);
c000664b:	83 ec 0c             	sub    $0xc,%esp
c000664e:	ff 75 08             	pushl  0x8(%ebp)
c0006651:	e8 b6 fb ff ff       	call   c000620c <select_disk>
c0006656:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:204

	uint32_t secs_op;		// 每次操作的扇区数
	uint32_t secs_done = 0;	// 已完成的扇区数
c0006659:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/device/ide.c:205
	while(secs_done < sec_cnt) {
c0006660:	e9 d4 00 00 00       	jmp    c0006739 <ide_write+0x150>
/work/x86_os_my/device/ide.c:206
		if ((secs_done + 256) <= sec_cnt) {
c0006665:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006668:	05 00 01 00 00       	add    $0x100,%eax
c000666d:	3b 45 14             	cmp    0x14(%ebp),%eax
c0006670:	77 09                	ja     c000667b <ide_write+0x92>
/work/x86_os_my/device/ide.c:207
			secs_op = 256;
c0006672:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
c0006679:	eb 09                	jmp    c0006684 <ide_write+0x9b>
/work/x86_os_my/device/ide.c:209
		} else {
			secs_op = sec_cnt - secs_done;
c000667b:	8b 45 14             	mov    0x14(%ebp),%eax
c000667e:	2b 45 f0             	sub    -0x10(%ebp),%eax
c0006681:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/ide.c:213
		}

		/* 2 写入待写入的扇区数和起始扇区号 */
		select_sector(hd, lba + secs_done, secs_op);
c0006684:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0006687:	0f b6 c0             	movzbl %al,%eax
c000668a:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c000668d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0006690:	01 ca                	add    %ecx,%edx
c0006692:	83 ec 04             	sub    $0x4,%esp
c0006695:	50                   	push   %eax
c0006696:	52                   	push   %edx
c0006697:	ff 75 08             	pushl  0x8(%ebp)
c000669a:	e8 a7 fb ff ff       	call   c0006246 <select_sector>
c000669f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:216

		/* 3 执行的命令写入reg_cmd寄存器 */
		cmd_out(hd->my_channel, CMD_WRITE_SECTOR);	// 准备开始写数据
c00066a2:	8b 45 08             	mov    0x8(%ebp),%eax
c00066a5:	8b 40 08             	mov    0x8(%eax),%eax
c00066a8:	83 ec 08             	sub    $0x8,%esp
c00066ab:	6a 30                	push   $0x30
c00066ad:	50                   	push   %eax
c00066ae:	e8 8d fc ff ff       	call   c0006340 <cmd_out>
c00066b3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:219

		/* 4 检测硬盘状态是否可读 */
		if (!busy_wait(hd)) {	// 若失败
c00066b6:	83 ec 0c             	sub    $0xc,%esp
c00066b9:	ff 75 08             	pushl  0x8(%ebp)
c00066bc:	e8 45 fd ff ff       	call   c0006406 <busy_wait>
c00066c1:	83 c4 10             	add    $0x10,%esp
c00066c4:	85 c0                	test   %eax,%eax
c00066c6:	75 33                	jne    c00066fb <ide_write+0x112>
/work/x86_os_my/device/ide.c:221
			char error[64];
			sprintf(error, "%s write sector %d failed!!!!!!\n", hd->name, lba);
c00066c8:	8b 45 08             	mov    0x8(%ebp),%eax
c00066cb:	ff 75 0c             	pushl  0xc(%ebp)
c00066ce:	50                   	push   %eax
c00066cf:	68 8c e1 00 c0       	push   $0xc000e18c
c00066d4:	8d 45 b0             	lea    -0x50(%ebp),%eax
c00066d7:	50                   	push   %eax
c00066d8:	e8 e9 f9 ff ff       	call   c00060c6 <sprintf>
c00066dd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:222
			PANIC(error);
c00066e0:	8d 45 b0             	lea    -0x50(%ebp),%eax
c00066e3:	50                   	push   %eax
c00066e4:	68 f8 e2 00 c0       	push   $0xc000e2f8
c00066e9:	68 de 00 00 00       	push   $0xde
c00066ee:	68 53 e1 00 c0       	push   $0xc000e153
c00066f3:	e8 09 be ff ff       	call   c0002501 <panic_spin>
c00066f8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:226
		}

		/* 5 将数据写入硬盘 */
		write2sector(hd, (void*)((uint32_t)buf + secs_done * 512), secs_op);
c00066fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00066fe:	0f b6 c0             	movzbl %al,%eax
c0006701:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0006704:	89 d1                	mov    %edx,%ecx
c0006706:	c1 e1 09             	shl    $0x9,%ecx
c0006709:	8b 55 10             	mov    0x10(%ebp),%edx
c000670c:	01 ca                	add    %ecx,%edx
c000670e:	83 ec 04             	sub    $0x4,%esp
c0006711:	50                   	push   %eax
c0006712:	52                   	push   %edx
c0006713:	ff 75 08             	pushl  0x8(%ebp)
c0006716:	e8 a2 fc ff ff       	call   c00063bd <write2sector>
c000671b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:229

		/* 在硬盘响应期间阻塞自己 */
		sema_down(&hd->my_channel->disk_done);
c000671e:	8b 45 08             	mov    0x8(%ebp),%eax
c0006721:	8b 40 08             	mov    0x8(%eax),%eax
c0006724:	83 c0 2c             	add    $0x2c,%eax
c0006727:	83 ec 0c             	sub    $0xc,%esp
c000672a:	50                   	push   %eax
c000672b:	e8 c5 e5 ff ff       	call   c0004cf5 <sema_down>
c0006730:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:230
		secs_done += secs_op;
c0006733:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0006736:	01 45 f0             	add    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:205
	/* 1 先选择操作的硬盘 */
	select_disk(hd);

	uint32_t secs_op;		// 每次操作的扇区数
	uint32_t secs_done = 0;	// 已完成的扇区数
	while(secs_done < sec_cnt) {
c0006739:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000673c:	3b 45 14             	cmp    0x14(%ebp),%eax
c000673f:	0f 82 20 ff ff ff    	jb     c0006665 <ide_write+0x7c>
/work/x86_os_my/device/ide.c:233
		/* 在硬盘响应期间阻塞自己 */
		sema_down(&hd->my_channel->disk_done);
		secs_done += secs_op;
	}
	/* 醒来后开始释放锁*/
	lock_release(&hd->my_channel->lock);
c0006745:	8b 45 08             	mov    0x8(%ebp),%eax
c0006748:	8b 40 08             	mov    0x8(%eax),%eax
c000674b:	83 c0 0c             	add    $0xc,%eax
c000674e:	83 ec 0c             	sub    $0xc,%esp
c0006751:	50                   	push   %eax
c0006752:	e8 bf e7 ff ff       	call   c0004f16 <lock_release>
c0006757:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:234
}
c000675a:	90                   	nop
c000675b:	c9                   	leave  
c000675c:	c3                   	ret    

c000675d <swap_pairs_bytes>:
swap_pairs_bytes():
/work/x86_os_my/device/ide.c:238

/////////////////////////////////////// 读取分区表部分 ////////////////////////////////////////////////
/* 将dst中len个相邻字节交换位置后存入buf */
static void swap_pairs_bytes(const char* dst, char* buf, uint32_t len) {
c000675d:	55                   	push   %ebp
c000675e:	89 e5                	mov    %esp,%ebp
c0006760:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/device/ide.c:240
	uint8_t idx;
	for (idx = 0; idx < len; idx += 2) {
c0006763:	c6 45 ff 00          	movb   $0x0,-0x1(%ebp)
c0006767:	eb 37                	jmp    c00067a0 <swap_pairs_bytes+0x43>
/work/x86_os_my/device/ide.c:242 (discriminator 3)
		/* buf中存储dst中两相邻元素交换位置后的字符串*/
		buf[idx + 1] = *dst++;
c0006769:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
c000676d:	8d 50 01             	lea    0x1(%eax),%edx
c0006770:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006773:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
c0006776:	8b 45 08             	mov    0x8(%ebp),%eax
c0006779:	8d 50 01             	lea    0x1(%eax),%edx
c000677c:	89 55 08             	mov    %edx,0x8(%ebp)
c000677f:	0f b6 00             	movzbl (%eax),%eax
c0006782:	88 01                	mov    %al,(%ecx)
/work/x86_os_my/device/ide.c:243 (discriminator 3)
		buf[idx]     = *dst++;
c0006784:	0f b6 55 ff          	movzbl -0x1(%ebp),%edx
c0006788:	8b 45 0c             	mov    0xc(%ebp),%eax
c000678b:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
c000678e:	8b 45 08             	mov    0x8(%ebp),%eax
c0006791:	8d 50 01             	lea    0x1(%eax),%edx
c0006794:	89 55 08             	mov    %edx,0x8(%ebp)
c0006797:	0f b6 00             	movzbl (%eax),%eax
c000679a:	88 01                	mov    %al,(%ecx)
/work/x86_os_my/device/ide.c:240 (discriminator 3)

/////////////////////////////////////// 读取分区表部分 ////////////////////////////////////////////////
/* 将dst中len个相邻字节交换位置后存入buf */
static void swap_pairs_bytes(const char* dst, char* buf, uint32_t len) {
	uint8_t idx;
	for (idx = 0; idx < len; idx += 2) {
c000679c:	80 45 ff 02          	addb   $0x2,-0x1(%ebp)
/work/x86_os_my/device/ide.c:240 (discriminator 1)
c00067a0:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
c00067a4:	3b 45 10             	cmp    0x10(%ebp),%eax
c00067a7:	72 c0                	jb     c0006769 <swap_pairs_bytes+0xc>
/work/x86_os_my/device/ide.c:245
		/* buf中存储dst中两相邻元素交换位置后的字符串*/
		buf[idx + 1] = *dst++;
		buf[idx]     = *dst++;
	}
	buf[idx] = '\0';
c00067a9:	0f b6 55 ff          	movzbl -0x1(%ebp),%edx
c00067ad:	8b 45 0c             	mov    0xc(%ebp),%eax
c00067b0:	01 d0                	add    %edx,%eax
c00067b2:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/device/ide.c:246
}
c00067b5:	90                   	nop
c00067b6:	c9                   	leave  
c00067b7:	c3                   	ret    

c00067b8 <identify_disk>:
identify_disk():
/work/x86_os_my/device/ide.c:249

/* 获得硬盘参数信息 */
static void identify_disk(struct disk* hd) {
c00067b8:	55                   	push   %ebp
c00067b9:	89 e5                	mov    %esp,%ebp
c00067bb:	81 ec 98 02 00 00    	sub    $0x298,%esp
/work/x86_os_my/device/ide.c:251
	char id_info[512];
	select_disk(hd);
c00067c1:	ff 75 08             	pushl  0x8(%ebp)
c00067c4:	e8 43 fa ff ff       	call   c000620c <select_disk>
c00067c9:	83 c4 04             	add    $0x4,%esp
/work/x86_os_my/device/ide.c:252
	cmd_out(hd->my_channel, CMD_IDENTIFY);
c00067cc:	8b 45 08             	mov    0x8(%ebp),%eax
c00067cf:	8b 40 08             	mov    0x8(%eax),%eax
c00067d2:	68 ec 00 00 00       	push   $0xec
c00067d7:	50                   	push   %eax
c00067d8:	e8 63 fb ff ff       	call   c0006340 <cmd_out>
c00067dd:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/ide.c:255
	/* 向硬盘发送指令后便通过信号量阻塞自己,
	* 待硬盘处理完成后,通过中断处理程序将自己唤醒 */
	sema_down(&hd->my_channel->disk_done);
c00067e0:	8b 45 08             	mov    0x8(%ebp),%eax
c00067e3:	8b 40 08             	mov    0x8(%eax),%eax
c00067e6:	83 c0 2c             	add    $0x2c,%eax
c00067e9:	83 ec 0c             	sub    $0xc,%esp
c00067ec:	50                   	push   %eax
c00067ed:	e8 03 e5 ff ff       	call   c0004cf5 <sema_down>
c00067f2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:258

	/* 醒来后开始执行下面代码*/
	if (!busy_wait(hd)) {     //  若失败
c00067f5:	83 ec 0c             	sub    $0xc,%esp
c00067f8:	ff 75 08             	pushl  0x8(%ebp)
c00067fb:	e8 06 fc ff ff       	call   c0006406 <busy_wait>
c0006800:	83 c4 10             	add    $0x10,%esp
c0006803:	85 c0                	test   %eax,%eax
c0006805:	75 39                	jne    c0006840 <identify_disk+0x88>
/work/x86_os_my/device/ide.c:260
		char error[64];
		sprintf(error, "%s identify failed!!!!!!\n", hd->name);
c0006807:	8b 45 08             	mov    0x8(%ebp),%eax
c000680a:	83 ec 04             	sub    $0x4,%esp
c000680d:	50                   	push   %eax
c000680e:	68 ad e1 00 c0       	push   $0xc000e1ad
c0006813:	8d 85 70 fd ff ff    	lea    -0x290(%ebp),%eax
c0006819:	50                   	push   %eax
c000681a:	e8 a7 f8 ff ff       	call   c00060c6 <sprintf>
c000681f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:261
		PANIC(error);
c0006822:	8d 85 70 fd ff ff    	lea    -0x290(%ebp),%eax
c0006828:	50                   	push   %eax
c0006829:	68 04 e3 00 c0       	push   $0xc000e304
c000682e:	68 05 01 00 00       	push   $0x105
c0006833:	68 53 e1 00 c0       	push   $0xc000e153
c0006838:	e8 c4 bc ff ff       	call   c0002501 <panic_spin>
c000683d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:263
	}
	read_from_sector(hd, id_info, 1);
c0006840:	83 ec 04             	sub    $0x4,%esp
c0006843:	6a 01                	push   $0x1
c0006845:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
c000684b:	50                   	push   %eax
c000684c:	ff 75 08             	pushl  0x8(%ebp)
c000684f:	e8 20 fb ff ff       	call   c0006374 <read_from_sector>
c0006854:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:266

	char buf[64];
	uint8_t sn_start = 10 * 2, sn_len = 20, md_start = 27 * 2, md_len = 40;
c0006857:	c6 45 f7 14          	movb   $0x14,-0x9(%ebp)
c000685b:	c6 45 f6 14          	movb   $0x14,-0xa(%ebp)
c000685f:	c6 45 f5 36          	movb   $0x36,-0xb(%ebp)
c0006863:	c6 45 f4 28          	movb   $0x28,-0xc(%ebp)
/work/x86_os_my/device/ide.c:267
	swap_pairs_bytes(&id_info[sn_start], buf, sn_len);
c0006867:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c000686b:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c000686f:	8d 8d f0 fd ff ff    	lea    -0x210(%ebp),%ecx
c0006875:	01 ca                	add    %ecx,%edx
c0006877:	83 ec 04             	sub    $0x4,%esp
c000687a:	50                   	push   %eax
c000687b:	8d 85 b0 fd ff ff    	lea    -0x250(%ebp),%eax
c0006881:	50                   	push   %eax
c0006882:	52                   	push   %edx
c0006883:	e8 d5 fe ff ff       	call   c000675d <swap_pairs_bytes>
c0006888:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:268
	printk("   disk %s info:\n      SN: %s\n", hd->name, buf);
c000688b:	8b 45 08             	mov    0x8(%ebp),%eax
c000688e:	83 ec 04             	sub    $0x4,%esp
c0006891:	8d 95 b0 fd ff ff    	lea    -0x250(%ebp),%edx
c0006897:	52                   	push   %edx
c0006898:	50                   	push   %eax
c0006899:	68 c8 e1 00 c0       	push   $0xc000e1c8
c000689e:	e8 4b 06 00 00       	call   c0006eee <printk>
c00068a3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:269
	memset(buf, 0, sizeof(buf));
c00068a6:	83 ec 04             	sub    $0x4,%esp
c00068a9:	6a 40                	push   $0x40
c00068ab:	6a 00                	push   $0x0
c00068ad:	8d 85 b0 fd ff ff    	lea    -0x250(%ebp),%eax
c00068b3:	50                   	push   %eax
c00068b4:	e8 4c d1 ff ff       	call   c0003a05 <memset>
c00068b9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:270
	swap_pairs_bytes(&id_info[md_start], buf, md_len);
c00068bc:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c00068c0:	0f b6 55 f5          	movzbl -0xb(%ebp),%edx
c00068c4:	8d 8d f0 fd ff ff    	lea    -0x210(%ebp),%ecx
c00068ca:	01 ca                	add    %ecx,%edx
c00068cc:	83 ec 04             	sub    $0x4,%esp
c00068cf:	50                   	push   %eax
c00068d0:	8d 85 b0 fd ff ff    	lea    -0x250(%ebp),%eax
c00068d6:	50                   	push   %eax
c00068d7:	52                   	push   %edx
c00068d8:	e8 80 fe ff ff       	call   c000675d <swap_pairs_bytes>
c00068dd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:271
	printk("      MODULE: %s\n", buf);
c00068e0:	83 ec 08             	sub    $0x8,%esp
c00068e3:	8d 85 b0 fd ff ff    	lea    -0x250(%ebp),%eax
c00068e9:	50                   	push   %eax
c00068ea:	68 e7 e1 00 c0       	push   $0xc000e1e7
c00068ef:	e8 fa 05 00 00       	call   c0006eee <printk>
c00068f4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:272
	uint32_t sectors = *(uint32_t*)&id_info[60 * 2];
c00068f7:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
c00068fd:	83 c0 78             	add    $0x78,%eax
c0006900:	8b 00                	mov    (%eax),%eax
c0006902:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:273
	printk("      SECTORS: %d\n", sectors);
c0006905:	83 ec 08             	sub    $0x8,%esp
c0006908:	ff 75 f0             	pushl  -0x10(%ebp)
c000690b:	68 f9 e1 00 c0       	push   $0xc000e1f9
c0006910:	e8 d9 05 00 00       	call   c0006eee <printk>
c0006915:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:274
	printk("      CAPACITY: %dMB\n", sectors * 512 / 1024 / 1024);
c0006918:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000691b:	c1 e0 09             	shl    $0x9,%eax
c000691e:	c1 e8 14             	shr    $0x14,%eax
c0006921:	83 ec 08             	sub    $0x8,%esp
c0006924:	50                   	push   %eax
c0006925:	68 0c e2 00 c0       	push   $0xc000e20c
c000692a:	e8 bf 05 00 00       	call   c0006eee <printk>
c000692f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:275
}
c0006932:	90                   	nop
c0006933:	c9                   	leave  
c0006934:	c3                   	ret    

c0006935 <partition_scan>:
partition_scan():
/work/x86_os_my/device/ide.c:278

/* 扫描硬盘hd中地址为ext_lba的扇区中的所有分区 */
static void partition_scan(struct disk* hd, uint32_t ext_lba) {
c0006935:	55                   	push   %ebp
c0006936:	89 e5                	mov    %esp,%ebp
c0006938:	53                   	push   %ebx
c0006939:	83 ec 14             	sub    $0x14,%esp
/work/x86_os_my/device/ide.c:279
	struct boot_sector* bs = sys_malloc(sizeof(struct boot_sector));
c000693c:	83 ec 0c             	sub    $0xc,%esp
c000693f:	68 00 02 00 00       	push   $0x200
c0006944:	e8 63 c5 ff ff       	call   c0002eac <sys_malloc>
c0006949:	83 c4 10             	add    $0x10,%esp
c000694c:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/device/ide.c:280
	ide_read(hd, ext_lba, bs, 1);
c000694f:	6a 01                	push   $0x1
c0006951:	ff 75 ec             	pushl  -0x14(%ebp)
c0006954:	ff 75 0c             	pushl  0xc(%ebp)
c0006957:	ff 75 08             	pushl  0x8(%ebp)
c000695a:	e8 16 fb ff ff       	call   c0006475 <ide_read>
c000695f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:281
	uint8_t part_idx = 0;
c0006962:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/device/ide.c:282
	struct partition_table_entry* p = bs->partition_table;
c0006966:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0006969:	05 be 01 00 00       	add    $0x1be,%eax
c000696e:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:285

	/* 遍历分区表4个分区表项 */
	while (part_idx++ < 4) {
c0006971:	e9 53 02 00 00       	jmp    c0006bc9 <partition_scan+0x294>
/work/x86_os_my/device/ide.c:286
		if (p->fs_type == 0x5) {	// 若为扩展分区
c0006976:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006979:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c000697d:	3c 05                	cmp    $0x5,%al
c000697f:	75 50                	jne    c00069d1 <partition_scan+0x9c>
/work/x86_os_my/device/ide.c:287
			if (ext_lba_base != 0) {
c0006981:	a1 ac 30 01 c0       	mov    0xc00130ac,%eax
c0006986:	85 c0                	test   %eax,%eax
c0006988:	74 22                	je     c00069ac <partition_scan+0x77>
/work/x86_os_my/device/ide.c:289
				/* 子扩展分区的start_lba是相对于主引导扇区中的总扩展分区地址 */
				partition_scan(hd, p->start_lba + ext_lba_base);
c000698a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000698d:	8b 40 08             	mov    0x8(%eax),%eax
c0006990:	8b 15 ac 30 01 c0    	mov    0xc00130ac,%edx
c0006996:	01 d0                	add    %edx,%eax
c0006998:	83 ec 08             	sub    $0x8,%esp
c000699b:	50                   	push   %eax
c000699c:	ff 75 08             	pushl  0x8(%ebp)
c000699f:	e8 91 ff ff ff       	call   c0006935 <partition_scan>
c00069a4:	83 c4 10             	add    $0x10,%esp
c00069a7:	e9 19 02 00 00       	jmp    c0006bc5 <partition_scan+0x290>
/work/x86_os_my/device/ide.c:292
			} else {	// ext_lba_base为0表示是第一次读取引导块,也就是主引导记录所在的扇区
				/* 记录下扩展分区的起始lba地址,后面所有的扩展分区地址都相对于此 */
				ext_lba_base = p->start_lba;
c00069ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00069af:	8b 40 08             	mov    0x8(%eax),%eax
c00069b2:	a3 ac 30 01 c0       	mov    %eax,0xc00130ac
/work/x86_os_my/device/ide.c:293
				partition_scan(hd, p->start_lba);
c00069b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00069ba:	8b 40 08             	mov    0x8(%eax),%eax
c00069bd:	83 ec 08             	sub    $0x8,%esp
c00069c0:	50                   	push   %eax
c00069c1:	ff 75 08             	pushl  0x8(%ebp)
c00069c4:	e8 6c ff ff ff       	call   c0006935 <partition_scan>
c00069c9:	83 c4 10             	add    $0x10,%esp
c00069cc:	e9 f4 01 00 00       	jmp    c0006bc5 <partition_scan+0x290>
/work/x86_os_my/device/ide.c:295
			}
		} else if (p->fs_type != 0) {	// 若是有效的分区类型
c00069d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00069d4:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c00069d8:	84 c0                	test   %al,%al
c00069da:	0f 84 e5 01 00 00    	je     c0006bc5 <partition_scan+0x290>
/work/x86_os_my/device/ide.c:296
			if (ext_lba == 0) {	// 此时全是主分区
c00069e0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c00069e4:	0f 85 f9 00 00 00    	jne    c0006ae3 <partition_scan+0x1ae>
/work/x86_os_my/device/ide.c:297
				hd->prim_parts[p_no].start_lba = ext_lba + p->start_lba;
c00069ea:	0f b6 05 b0 30 01 c0 	movzbl 0xc00130b0,%eax
c00069f1:	0f b6 c8             	movzbl %al,%ecx
c00069f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00069f7:	8b 50 08             	mov    0x8(%eax),%edx
c00069fa:	8b 45 0c             	mov    0xc(%ebp),%eax
c00069fd:	01 c2                	add    %eax,%edx
c00069ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0006a02:	c1 e1 06             	shl    $0x6,%ecx
c0006a05:	01 c8                	add    %ecx,%eax
c0006a07:	83 c0 10             	add    $0x10,%eax
c0006a0a:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/device/ide.c:298
				hd->prim_parts[p_no].sec_cnt = p->sec_cnt;
c0006a0c:	0f b6 05 b0 30 01 c0 	movzbl 0xc00130b0,%eax
c0006a13:	0f b6 c8             	movzbl %al,%ecx
c0006a16:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006a19:	8b 40 0c             	mov    0xc(%eax),%eax
c0006a1c:	8b 55 08             	mov    0x8(%ebp),%edx
c0006a1f:	c1 e1 06             	shl    $0x6,%ecx
c0006a22:	01 ca                	add    %ecx,%edx
c0006a24:	83 c2 14             	add    $0x14,%edx
c0006a27:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/device/ide.c:299
				hd->prim_parts[p_no].my_disk = hd;
c0006a29:	0f b6 05 b0 30 01 c0 	movzbl 0xc00130b0,%eax
c0006a30:	0f b6 d0             	movzbl %al,%edx
c0006a33:	8b 45 08             	mov    0x8(%ebp),%eax
c0006a36:	c1 e2 06             	shl    $0x6,%edx
c0006a39:	01 d0                	add    %edx,%eax
c0006a3b:	8d 50 18             	lea    0x18(%eax),%edx
c0006a3e:	8b 45 08             	mov    0x8(%ebp),%eax
c0006a41:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/device/ide.c:300
				list_append(&partition_list, &hd->prim_parts[p_no].part_tag);
c0006a43:	0f b6 05 b0 30 01 c0 	movzbl 0xc00130b0,%eax
c0006a4a:	0f b6 c0             	movzbl %al,%eax
c0006a4d:	c1 e0 06             	shl    $0x6,%eax
c0006a50:	8d 50 10             	lea    0x10(%eax),%edx
c0006a53:	8b 45 08             	mov    0x8(%ebp),%eax
c0006a56:	01 d0                	add    %edx,%eax
c0006a58:	83 c0 0c             	add    $0xc,%eax
c0006a5b:	83 ec 08             	sub    $0x8,%esp
c0006a5e:	50                   	push   %eax
c0006a5f:	68 c0 4a 01 c0       	push   $0xc0014ac0
c0006a64:	e8 01 e0 ff ff       	call   c0004a6a <list_append>
c0006a69:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:301
				sprintf(hd->prim_parts[p_no].name, "%s%d", hd->name, p_no + 1);
c0006a6c:	0f b6 05 b0 30 01 c0 	movzbl 0xc00130b0,%eax
c0006a73:	0f b6 c0             	movzbl %al,%eax
c0006a76:	8d 48 01             	lea    0x1(%eax),%ecx
c0006a79:	8b 45 08             	mov    0x8(%ebp),%eax
c0006a7c:	0f b6 15 b0 30 01 c0 	movzbl 0xc00130b0,%edx
c0006a83:	0f b6 d2             	movzbl %dl,%edx
c0006a86:	c1 e2 06             	shl    $0x6,%edx
c0006a89:	8d 5a 20             	lea    0x20(%edx),%ebx
c0006a8c:	8b 55 08             	mov    0x8(%ebp),%edx
c0006a8f:	01 da                	add    %ebx,%edx
c0006a91:	83 c2 04             	add    $0x4,%edx
c0006a94:	51                   	push   %ecx
c0006a95:	50                   	push   %eax
c0006a96:	68 22 e2 00 c0       	push   $0xc000e222
c0006a9b:	52                   	push   %edx
c0006a9c:	e8 25 f6 ff ff       	call   c00060c6 <sprintf>
c0006aa1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:302
				p_no++;
c0006aa4:	0f b6 05 b0 30 01 c0 	movzbl 0xc00130b0,%eax
c0006aab:	83 c0 01             	add    $0x1,%eax
c0006aae:	a2 b0 30 01 c0       	mov    %al,0xc00130b0
/work/x86_os_my/device/ide.c:303
				ASSERT(p_no < 4);	// 0,1,2,3
c0006ab3:	0f b6 05 b0 30 01 c0 	movzbl 0xc00130b0,%eax
c0006aba:	3c 03                	cmp    $0x3,%al
c0006abc:	0f 86 03 01 00 00    	jbe    c0006bc5 <partition_scan+0x290>
/work/x86_os_my/device/ide.c:303 (discriminator 1)
c0006ac2:	68 27 e2 00 c0       	push   $0xc000e227
c0006ac7:	68 14 e3 00 c0       	push   $0xc000e314
c0006acc:	68 2f 01 00 00       	push   $0x12f
c0006ad1:	68 53 e1 00 c0       	push   $0xc000e153
c0006ad6:	e8 26 ba ff ff       	call   c0002501 <panic_spin>
c0006adb:	83 c4 10             	add    $0x10,%esp
c0006ade:	e9 e2 00 00 00       	jmp    c0006bc5 <partition_scan+0x290>
/work/x86_os_my/device/ide.c:305
			} else {
				hd->logic_parts[l_no].start_lba = ext_lba + p->start_lba;
c0006ae3:	0f b6 05 b1 30 01 c0 	movzbl 0xc00130b1,%eax
c0006aea:	0f b6 c8             	movzbl %al,%ecx
c0006aed:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006af0:	8b 50 08             	mov    0x8(%eax),%edx
c0006af3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006af6:	01 c2                	add    %eax,%edx
c0006af8:	8b 45 08             	mov    0x8(%ebp),%eax
c0006afb:	c1 e1 06             	shl    $0x6,%ecx
c0006afe:	01 c8                	add    %ecx,%eax
c0006b00:	05 10 01 00 00       	add    $0x110,%eax
c0006b05:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/device/ide.c:306
				hd->logic_parts[l_no].sec_cnt = p->sec_cnt;
c0006b07:	0f b6 05 b1 30 01 c0 	movzbl 0xc00130b1,%eax
c0006b0e:	0f b6 c8             	movzbl %al,%ecx
c0006b11:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006b14:	8b 40 0c             	mov    0xc(%eax),%eax
c0006b17:	8b 55 08             	mov    0x8(%ebp),%edx
c0006b1a:	c1 e1 06             	shl    $0x6,%ecx
c0006b1d:	01 ca                	add    %ecx,%edx
c0006b1f:	81 c2 14 01 00 00    	add    $0x114,%edx
c0006b25:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/device/ide.c:307
				hd->logic_parts[l_no].my_disk = hd;
c0006b27:	0f b6 05 b1 30 01 c0 	movzbl 0xc00130b1,%eax
c0006b2e:	0f b6 d0             	movzbl %al,%edx
c0006b31:	8b 45 08             	mov    0x8(%ebp),%eax
c0006b34:	c1 e2 06             	shl    $0x6,%edx
c0006b37:	01 d0                	add    %edx,%eax
c0006b39:	8d 90 18 01 00 00    	lea    0x118(%eax),%edx
c0006b3f:	8b 45 08             	mov    0x8(%ebp),%eax
c0006b42:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/device/ide.c:308
				list_append(&partition_list, &hd->logic_parts[l_no].part_tag);
c0006b44:	0f b6 05 b1 30 01 c0 	movzbl 0xc00130b1,%eax
c0006b4b:	0f b6 c0             	movzbl %al,%eax
c0006b4e:	c1 e0 06             	shl    $0x6,%eax
c0006b51:	8d 90 10 01 00 00    	lea    0x110(%eax),%edx
c0006b57:	8b 45 08             	mov    0x8(%ebp),%eax
c0006b5a:	01 d0                	add    %edx,%eax
c0006b5c:	83 c0 0c             	add    $0xc,%eax
c0006b5f:	83 ec 08             	sub    $0x8,%esp
c0006b62:	50                   	push   %eax
c0006b63:	68 c0 4a 01 c0       	push   $0xc0014ac0
c0006b68:	e8 fd de ff ff       	call   c0004a6a <list_append>
c0006b6d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:309
				sprintf(hd->logic_parts[l_no].name, "%s%d", hd->name, l_no + 5);	// 逻辑分区数字是从5开始,主分区是1～4.
c0006b70:	0f b6 05 b1 30 01 c0 	movzbl 0xc00130b1,%eax
c0006b77:	0f b6 c0             	movzbl %al,%eax
c0006b7a:	8d 48 05             	lea    0x5(%eax),%ecx
c0006b7d:	8b 45 08             	mov    0x8(%ebp),%eax
c0006b80:	0f b6 15 b1 30 01 c0 	movzbl 0xc00130b1,%edx
c0006b87:	0f b6 d2             	movzbl %dl,%edx
c0006b8a:	c1 e2 06             	shl    $0x6,%edx
c0006b8d:	8d 9a 20 01 00 00    	lea    0x120(%edx),%ebx
c0006b93:	8b 55 08             	mov    0x8(%ebp),%edx
c0006b96:	01 da                	add    %ebx,%edx
c0006b98:	83 c2 04             	add    $0x4,%edx
c0006b9b:	51                   	push   %ecx
c0006b9c:	50                   	push   %eax
c0006b9d:	68 22 e2 00 c0       	push   $0xc000e222
c0006ba2:	52                   	push   %edx
c0006ba3:	e8 1e f5 ff ff       	call   c00060c6 <sprintf>
c0006ba8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:310
				l_no++;
c0006bab:	0f b6 05 b1 30 01 c0 	movzbl 0xc00130b1,%eax
c0006bb2:	83 c0 01             	add    $0x1,%eax
c0006bb5:	a2 b1 30 01 c0       	mov    %al,0xc00130b1
/work/x86_os_my/device/ide.c:311
				if (l_no >= 8)	// 只支持8个逻辑分区,避免数组越界
c0006bba:	0f b6 05 b1 30 01 c0 	movzbl 0xc00130b1,%eax
c0006bc1:	3c 07                	cmp    $0x7,%al
c0006bc3:	77 26                	ja     c0006beb <partition_scan+0x2b6>
/work/x86_os_my/device/ide.c:315
					return;
			}
		}
		p++;
c0006bc5:	83 45 f0 10          	addl   $0x10,-0x10(%ebp)
/work/x86_os_my/device/ide.c:285
	ide_read(hd, ext_lba, bs, 1);
	uint8_t part_idx = 0;
	struct partition_table_entry* p = bs->partition_table;

	/* 遍历分区表4个分区表项 */
	while (part_idx++ < 4) {
c0006bc9:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0006bcd:	8d 50 01             	lea    0x1(%eax),%edx
c0006bd0:	88 55 f7             	mov    %dl,-0x9(%ebp)
c0006bd3:	3c 03                	cmp    $0x3,%al
c0006bd5:	0f 86 9b fd ff ff    	jbe    c0006976 <partition_scan+0x41>
/work/x86_os_my/device/ide.c:317
					return;
			}
		}
		p++;
	}
	sys_free(bs);
c0006bdb:	83 ec 0c             	sub    $0xc,%esp
c0006bde:	ff 75 ec             	pushl  -0x14(%ebp)
c0006be1:	e8 f3 c8 ff ff       	call   c00034d9 <sys_free>
c0006be6:	83 c4 10             	add    $0x10,%esp
c0006be9:	eb 01                	jmp    c0006bec <partition_scan+0x2b7>
/work/x86_os_my/device/ide.c:312
				hd->logic_parts[l_no].my_disk = hd;
				list_append(&partition_list, &hd->logic_parts[l_no].part_tag);
				sprintf(hd->logic_parts[l_no].name, "%s%d", hd->name, l_no + 5);	// 逻辑分区数字是从5开始,主分区是1～4.
				l_no++;
				if (l_no >= 8)	// 只支持8个逻辑分区,避免数组越界
					return;
c0006beb:	90                   	nop
/work/x86_os_my/device/ide.c:318
			}
		}
		p++;
	}
	sys_free(bs);
}
c0006bec:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0006bef:	c9                   	leave  
c0006bf0:	c3                   	ret    

c0006bf1 <partition_info>:
partition_info():
/work/x86_os_my/device/ide.c:321

/* 打印分区信息 */
static bool partition_info(struct list_elem* pelem, int arg UNUSED) {
c0006bf1:	55                   	push   %ebp
c0006bf2:	89 e5                	mov    %esp,%ebp
c0006bf4:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/ide.c:322
	struct partition* part = elem2entry(struct partition, part_tag, pelem);
c0006bf7:	8b 45 08             	mov    0x8(%ebp),%eax
c0006bfa:	83 e8 0c             	sub    $0xc,%eax
c0006bfd:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/ide.c:323
	printk("   %s start_lba:0x%x, sec_cnt:0x%x\n",part->name, part->start_lba, part->sec_cnt);
c0006c00:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0006c03:	8b 50 04             	mov    0x4(%eax),%edx
c0006c06:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0006c09:	8b 00                	mov    (%eax),%eax
c0006c0b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0006c0e:	83 c1 14             	add    $0x14,%ecx
c0006c11:	52                   	push   %edx
c0006c12:	50                   	push   %eax
c0006c13:	51                   	push   %ecx
c0006c14:	68 30 e2 00 c0       	push   $0xc000e230
c0006c19:	e8 d0 02 00 00       	call   c0006eee <printk>
c0006c1e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:327

	/* 在此处return false与函数本身功能无关,
	 * 只是为了让主调函数list_traversal继续向下遍历元素 */
	return false;
c0006c21:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/device/ide.c:328
}
c0006c26:	c9                   	leave  
c0006c27:	c3                   	ret    

c0006c28 <intr_hd_handler>:
intr_hd_handler():
/work/x86_os_my/device/ide.c:331

/* 硬盘中断处理程序 */
void intr_hd_handler(uint8_t irq_no) {
c0006c28:	55                   	push   %ebp
c0006c29:	89 e5                	mov    %esp,%ebp
c0006c2b:	83 ec 28             	sub    $0x28,%esp
c0006c2e:	8b 45 08             	mov    0x8(%ebp),%eax
c0006c31:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/device/ide.c:332
	ASSERT(irq_no == 0x2e || irq_no == 0x2f);
c0006c34:	80 7d e4 2e          	cmpb   $0x2e,-0x1c(%ebp)
c0006c38:	74 22                	je     c0006c5c <intr_hd_handler+0x34>
/work/x86_os_my/device/ide.c:332 (discriminator 1)
c0006c3a:	80 7d e4 2f          	cmpb   $0x2f,-0x1c(%ebp)
c0006c3e:	74 1c                	je     c0006c5c <intr_hd_handler+0x34>
/work/x86_os_my/device/ide.c:332 (discriminator 2)
c0006c40:	68 54 e2 00 c0       	push   $0xc000e254
c0006c45:	68 24 e3 00 c0       	push   $0xc000e324
c0006c4a:	68 4c 01 00 00       	push   $0x14c
c0006c4f:	68 53 e1 00 c0       	push   $0xc000e153
c0006c54:	e8 a8 b8 ff ff       	call   c0002501 <panic_spin>
c0006c59:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:333
	uint8_t ch_no = irq_no - 0x2e;
c0006c5c:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0006c60:	83 e8 2e             	sub    $0x2e,%eax
c0006c63:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/device/ide.c:334
	struct ide_channel* channel = &channels[ch_no];
c0006c66:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0006c6a:	69 c0 60 06 00 00    	imul   $0x660,%eax,%eax
c0006c70:	05 00 3e 01 c0       	add    $0xc0013e00,%eax
c0006c75:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:335
	ASSERT(channel->irq_no == irq_no);
c0006c78:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006c7b:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
c0006c7f:	3a 45 e4             	cmp    -0x1c(%ebp),%al
c0006c82:	74 1c                	je     c0006ca0 <intr_hd_handler+0x78>
/work/x86_os_my/device/ide.c:335 (discriminator 1)
c0006c84:	68 75 e2 00 c0       	push   $0xc000e275
c0006c89:	68 24 e3 00 c0       	push   $0xc000e324
c0006c8e:	68 4f 01 00 00       	push   $0x14f
c0006c93:	68 53 e1 00 c0       	push   $0xc000e153
c0006c98:	e8 64 b8 ff ff       	call   c0002501 <panic_spin>
c0006c9d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:338
	/* 不必担心此中断是否对应的是这一次的expecting_intr,
	* 每次读写硬盘时会申请锁,从而保证了同步一致性 */
	if (channel->expecting_intr) {
c0006ca0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006ca3:	8b 40 28             	mov    0x28(%eax),%eax
c0006ca6:	85 c0                	test   %eax,%eax
c0006ca8:	74 35                	je     c0006cdf <intr_hd_handler+0xb7>
/work/x86_os_my/device/ide.c:339
		channel->expecting_intr = false;
c0006caa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006cad:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
/work/x86_os_my/device/ide.c:340
		sema_up(&channel->disk_done);
c0006cb4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006cb7:	83 c0 2c             	add    $0x2c,%eax
c0006cba:	83 ec 0c             	sub    $0xc,%esp
c0006cbd:	50                   	push   %eax
c0006cbe:	e8 2d e1 ff ff       	call   c0004df0 <sema_up>
c0006cc3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:343

		/* 读取状态寄存器使硬盘控制器认为此次的中断已被处理,从而硬盘可以继续执行新的读写 */
		inb(reg_status(channel));
c0006cc6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006cc9:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0006ccd:	83 c0 07             	add    $0x7,%eax
c0006cd0:	0f b7 c0             	movzwl %ax,%eax
c0006cd3:	83 ec 0c             	sub    $0xc,%esp
c0006cd6:	50                   	push   %eax
c0006cd7:	e8 de f4 ff ff       	call   c00061ba <inb>
c0006cdc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:345
	}
}
c0006cdf:	90                   	nop
c0006ce0:	c9                   	leave  
c0006ce1:	c3                   	ret    

c0006ce2 <ide_init>:
ide_init():
/work/x86_os_my/device/ide.c:348

/* 硬盘数据结构初始化 */
void ide_init() {
c0006ce2:	55                   	push   %ebp
c0006ce3:	89 e5                	mov    %esp,%ebp
c0006ce5:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/ide.c:349
	printk("ide_init start\n");
c0006ce8:	83 ec 0c             	sub    $0xc,%esp
c0006ceb:	68 8f e2 00 c0       	push   $0xc000e28f
c0006cf0:	e8 f9 01 00 00       	call   c0006eee <printk>
c0006cf5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:350
	uint8_t hd_cnt = *((uint8_t*)(0x475));	// 获取硬盘的数量
c0006cf8:	b8 75 04 00 00       	mov    $0x475,%eax
c0006cfd:	0f b6 00             	movzbl (%eax),%eax
c0006d00:	88 45 f5             	mov    %al,-0xb(%ebp)
/work/x86_os_my/device/ide.c:351
	ASSERT(hd_cnt > 0);
c0006d03:	80 7d f5 00          	cmpb   $0x0,-0xb(%ebp)
c0006d07:	75 1c                	jne    c0006d25 <ide_init+0x43>
/work/x86_os_my/device/ide.c:351 (discriminator 1)
c0006d09:	68 9f e2 00 c0       	push   $0xc000e29f
c0006d0e:	68 34 e3 00 c0       	push   $0xc000e334
c0006d13:	68 5f 01 00 00       	push   $0x15f
c0006d18:	68 53 e1 00 c0       	push   $0xc000e153
c0006d1d:	e8 df b7 ff ff       	call   c0002501 <panic_spin>
c0006d22:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:352
	list_init(&partition_list);
c0006d25:	83 ec 0c             	sub    $0xc,%esp
c0006d28:	68 c0 4a 01 c0       	push   $0xc0014ac0
c0006d2d:	e8 a7 dc ff ff       	call   c00049d9 <list_init>
c0006d32:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:353
	channel_cnt = DIV_ROUND_UP(hd_cnt, 2);	// 一个ide通道上有两个硬盘,根据硬盘数量反推有几个ide通道
c0006d35:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0006d39:	83 c0 01             	add    $0x1,%eax
c0006d3c:	89 c2                	mov    %eax,%edx
c0006d3e:	c1 ea 1f             	shr    $0x1f,%edx
c0006d41:	01 d0                	add    %edx,%eax
c0006d43:	d1 f8                	sar    %eax
c0006d45:	a2 e0 3d 01 c0       	mov    %al,0xc0013de0
/work/x86_os_my/device/ide.c:355
	struct ide_channel* channel;
	uint8_t channel_no = 0, dev_no = 0;
c0006d4a:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
c0006d4e:	c6 45 f6 00          	movb   $0x0,-0xa(%ebp)
/work/x86_os_my/device/ide.c:358

	/* 处理每个通道上的硬盘 */
	while (channel_no < channel_cnt) {
c0006d52:	e9 4d 01 00 00       	jmp    c0006ea4 <ide_init+0x1c2>
/work/x86_os_my/device/ide.c:359
		channel = &channels[channel_no];
c0006d57:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0006d5b:	69 c0 60 06 00 00    	imul   $0x660,%eax,%eax
c0006d61:	05 00 3e 01 c0       	add    $0xc0013e00,%eax
c0006d66:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:360
		sprintf(channel->name, "ide%d", channel_no);
c0006d69:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c0006d6d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006d70:	83 ec 04             	sub    $0x4,%esp
c0006d73:	52                   	push   %edx
c0006d74:	68 aa e2 00 c0       	push   $0xc000e2aa
c0006d79:	50                   	push   %eax
c0006d7a:	e8 47 f3 ff ff       	call   c00060c6 <sprintf>
c0006d7f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:363

		/* 为每个ide通道初始化端口基址及中断向量 */
		switch (channel_no) {
c0006d82:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0006d86:	85 c0                	test   %eax,%eax
c0006d88:	74 07                	je     c0006d91 <ide_init+0xaf>
c0006d8a:	83 f8 01             	cmp    $0x1,%eax
c0006d8d:	74 14                	je     c0006da3 <ide_init+0xc1>
c0006d8f:	eb 23                	jmp    c0006db4 <ide_init+0xd2>
/work/x86_os_my/device/ide.c:365
			case 0:
			channel->port_base	 = 0x1f0;	// ide0通道的起始端口号是0x1f0
c0006d91:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006d94:	66 c7 40 08 f0 01    	movw   $0x1f0,0x8(%eax)
/work/x86_os_my/device/ide.c:366
			channel->irq_no	 = 0x20 + 14;	// 从片8259a上倒数第二的中断引脚,温盘,也就是ide0通道的的中断向量号
c0006d9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006d9d:	c6 40 0a 2e          	movb   $0x2e,0xa(%eax)
/work/x86_os_my/device/ide.c:367
			break;
c0006da1:	eb 11                	jmp    c0006db4 <ide_init+0xd2>
/work/x86_os_my/device/ide.c:370
			
			case 1:
			channel->port_base	 = 0x170;	// ide1通道的起始端口号是0x170
c0006da3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006da6:	66 c7 40 08 70 01    	movw   $0x170,0x8(%eax)
/work/x86_os_my/device/ide.c:371
			channel->irq_no	 = 0x20 + 15;	// 从8259A上的最后一个中断引脚,我们用来响应ide1通道上的硬盘中断
c0006dac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006daf:	c6 40 0a 2f          	movb   $0x2f,0xa(%eax)
/work/x86_os_my/device/ide.c:372
			break;
c0006db3:	90                   	nop
/work/x86_os_my/device/ide.c:375
		}

		channel->expecting_intr = false;	// 未向硬盘写入指令时不期待硬盘的中断
c0006db4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006db7:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
/work/x86_os_my/device/ide.c:376
		lock_init(&channel->lock);
c0006dbe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006dc1:	83 c0 0c             	add    $0xc,%eax
c0006dc4:	83 ec 0c             	sub    $0xc,%esp
c0006dc7:	50                   	push   %eax
c0006dc8:	e8 f8 de ff ff       	call   c0004cc5 <lock_init>
c0006dcd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:380

		/* 初始化为0,目的是向硬盘控制器请求数据后,硬盘驱动sema_down此信号量会阻塞线程,
		直到硬盘完成后通过发中断,由中断处理程序将此信号量sema_up,唤醒线程. */
		sema_init(&channel->disk_done, 0);
c0006dd0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006dd3:	83 c0 2c             	add    $0x2c,%eax
c0006dd6:	83 ec 08             	sub    $0x8,%esp
c0006dd9:	6a 00                	push   $0x0
c0006ddb:	50                   	push   %eax
c0006ddc:	e8 ba de ff ff       	call   c0004c9b <sema_init>
c0006de1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:381
		register_handler(channel->irq_no, intr_hd_handler);
c0006de4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006de7:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
c0006deb:	0f b6 c0             	movzbl %al,%eax
c0006dee:	83 ec 08             	sub    $0x8,%esp
c0006df1:	68 28 6c 00 c0       	push   $0xc0006c28
c0006df6:	50                   	push   %eax
c0006df7:	e8 88 ad ff ff       	call   c0001b84 <register_handler>
c0006dfc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:384

		/* 分别获取两个硬盘的参数及分区信息 */
		while (dev_no < 2) {
c0006dff:	e9 88 00 00 00       	jmp    c0006e8c <ide_init+0x1aa>
/work/x86_os_my/device/ide.c:385
			struct disk* hd = &channel->devices[dev_no];
c0006e04:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0006e08:	69 c0 10 03 00 00    	imul   $0x310,%eax,%eax
c0006e0e:	8d 50 40             	lea    0x40(%eax),%edx
c0006e11:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006e14:	01 d0                	add    %edx,%eax
c0006e16:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/device/ide.c:386
			hd->my_channel = channel;
c0006e19:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0006e1c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0006e1f:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/device/ide.c:387
			hd->dev_no = dev_no;
c0006e22:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0006e25:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
c0006e29:	88 50 0c             	mov    %dl,0xc(%eax)
/work/x86_os_my/device/ide.c:388
			sprintf(hd->name, "sd%c", 'a' + channel_no * 2 + dev_no);
c0006e2c:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0006e30:	01 c0                	add    %eax,%eax
c0006e32:	8d 50 61             	lea    0x61(%eax),%edx
c0006e35:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0006e39:	01 c2                	add    %eax,%edx
c0006e3b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0006e3e:	83 ec 04             	sub    $0x4,%esp
c0006e41:	52                   	push   %edx
c0006e42:	68 b0 e2 00 c0       	push   $0xc000e2b0
c0006e47:	50                   	push   %eax
c0006e48:	e8 79 f2 ff ff       	call   c00060c6 <sprintf>
c0006e4d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:389
			identify_disk(hd);		// 获取硬盘参数
c0006e50:	83 ec 0c             	sub    $0xc,%esp
c0006e53:	ff 75 ec             	pushl  -0x14(%ebp)
c0006e56:	e8 5d f9 ff ff       	call   c00067b8 <identify_disk>
c0006e5b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:390
			if (dev_no != 0) {		// 内核本身的裸硬盘(hd60M.img)不处理
c0006e5e:	80 7d f6 00          	cmpb   $0x0,-0xa(%ebp)
c0006e62:	74 10                	je     c0006e74 <ide_init+0x192>
/work/x86_os_my/device/ide.c:391
				partition_scan(hd, 0);	// 扫描该硬盘上的分区
c0006e64:	83 ec 08             	sub    $0x8,%esp
c0006e67:	6a 00                	push   $0x0
c0006e69:	ff 75 ec             	pushl  -0x14(%ebp)
c0006e6c:	e8 c4 fa ff ff       	call   c0006935 <partition_scan>
c0006e71:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:393
			}
			p_no = 0, l_no = 0;
c0006e74:	c6 05 b0 30 01 c0 00 	movb   $0x0,0xc00130b0
c0006e7b:	c6 05 b1 30 01 c0 00 	movb   $0x0,0xc00130b1
/work/x86_os_my/device/ide.c:394
			dev_no++;
c0006e82:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0006e86:	83 c0 01             	add    $0x1,%eax
c0006e89:	88 45 f6             	mov    %al,-0xa(%ebp)
/work/x86_os_my/device/ide.c:384
		直到硬盘完成后通过发中断,由中断处理程序将此信号量sema_up,唤醒线程. */
		sema_init(&channel->disk_done, 0);
		register_handler(channel->irq_no, intr_hd_handler);

		/* 分别获取两个硬盘的参数及分区信息 */
		while (dev_no < 2) {
c0006e8c:	80 7d f6 01          	cmpb   $0x1,-0xa(%ebp)
c0006e90:	0f 86 6e ff ff ff    	jbe    c0006e04 <ide_init+0x122>
/work/x86_os_my/device/ide.c:396
				partition_scan(hd, 0);	// 扫描该硬盘上的分区
			}
			p_no = 0, l_no = 0;
			dev_no++;
		}
		dev_no = 0;		// 将硬盘驱动器号置0,为下一个channel的两个硬盘初始化。
c0006e96:	c6 45 f6 00          	movb   $0x0,-0xa(%ebp)
/work/x86_os_my/device/ide.c:397
		channel_no++;	// 下一个channel
c0006e9a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0006e9e:	83 c0 01             	add    $0x1,%eax
c0006ea1:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/device/ide.c:358
	channel_cnt = DIV_ROUND_UP(hd_cnt, 2);	// 一个ide通道上有两个硬盘,根据硬盘数量反推有几个ide通道
	struct ide_channel* channel;
	uint8_t channel_no = 0, dev_no = 0;

	/* 处理每个通道上的硬盘 */
	while (channel_no < channel_cnt) {
c0006ea4:	0f b6 05 e0 3d 01 c0 	movzbl 0xc0013de0,%eax
c0006eab:	38 45 f7             	cmp    %al,-0x9(%ebp)
c0006eae:	0f 82 a3 fe ff ff    	jb     c0006d57 <ide_init+0x75>
/work/x86_os_my/device/ide.c:400
		}
		dev_no = 0;		// 将硬盘驱动器号置0,为下一个channel的两个硬盘初始化。
		channel_no++;	// 下一个channel
	}

	printk("\n   all partition info\n");
c0006eb4:	83 ec 0c             	sub    $0xc,%esp
c0006eb7:	68 b5 e2 00 c0       	push   $0xc000e2b5
c0006ebc:	e8 2d 00 00 00       	call   c0006eee <printk>
c0006ec1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:402
	/* 打印所有分区信息 */
	list_traversal(&partition_list, partition_info, (int)NULL);
c0006ec4:	83 ec 04             	sub    $0x4,%esp
c0006ec7:	6a 00                	push   $0x0
c0006ec9:	68 f1 6b 00 c0       	push   $0xc0006bf1
c0006ece:	68 c0 4a 01 c0       	push   $0xc0014ac0
c0006ed3:	e8 47 dc ff ff       	call   c0004b1f <list_traversal>
c0006ed8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:403
	printk("ide_init done\n");
c0006edb:	83 ec 0c             	sub    $0xc,%esp
c0006ede:	68 cd e2 00 c0       	push   $0xc000e2cd
c0006ee3:	e8 06 00 00 00       	call   c0006eee <printk>
c0006ee8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:404
}
c0006eeb:	90                   	nop
c0006eec:	c9                   	leave  
c0006eed:	c3                   	ret    

c0006eee <printk>:
printk():
/work/x86_os_my/lib/kernel/stdio-kernel.c:11

#define va_start(args, first_fix) args = (va_list)&first_fix
#define va_end(args) args = NULL

/* 供内核使用的格式化输出函数 */
void printk(const char* format, ...) {
c0006eee:	55                   	push   %ebp
c0006eef:	89 e5                	mov    %esp,%ebp
c0006ef1:	57                   	push   %edi
c0006ef2:	81 ec 14 04 00 00    	sub    $0x414,%esp
/work/x86_os_my/lib/kernel/stdio-kernel.c:13
	va_list args;
	va_start(args, format);
c0006ef8:	8d 45 08             	lea    0x8(%ebp),%eax
c0006efb:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/stdio-kernel.c:14
	char buf[1024] = {0};
c0006efe:	8d 95 f4 fb ff ff    	lea    -0x40c(%ebp),%edx
c0006f04:	b8 00 00 00 00       	mov    $0x0,%eax
c0006f09:	b9 00 01 00 00       	mov    $0x100,%ecx
c0006f0e:	89 d7                	mov    %edx,%edi
c0006f10:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/lib/kernel/stdio-kernel.c:15
	vsprintf(buf, format, args);
c0006f12:	8b 45 08             	mov    0x8(%ebp),%eax
c0006f15:	83 ec 04             	sub    $0x4,%esp
c0006f18:	ff 75 f4             	pushl  -0xc(%ebp)
c0006f1b:	50                   	push   %eax
c0006f1c:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c0006f22:	50                   	push   %eax
c0006f23:	e8 21 f0 ff ff       	call   c0005f49 <vsprintf>
c0006f28:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/stdio-kernel.c:16
	va_end(args);
c0006f2b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/kernel/stdio-kernel.c:17
	console_put_str(buf);
c0006f32:	83 ec 0c             	sub    $0xc,%esp
c0006f35:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c0006f3b:	50                   	push   %eax
c0006f3c:	e8 ef dc ff ff       	call   c0004c30 <console_put_str>
c0006f41:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/stdio-kernel.c:18
}
c0006f44:	90                   	nop
c0006f45:	8b 7d fc             	mov    -0x4(%ebp),%edi
c0006f48:	c9                   	leave  
c0006f49:	c3                   	ret    

c0006f4a <mount_partition>:
mount_partition():
/work/x86_os_my/fs/fs.c:27
把该分区文件系统的元信息从硬盘上读出来加载到内存中，
这样硬盘资源的变化都用内存中元信息来跟踪，
如果有写操作，及时将内存中的元信息同步写入到硬盘以持久化。
*/
//sb_buf没释放！
static bool mount_partition(struct list_elem* pelem, int arg) {
c0006f4a:	55                   	push   %ebp
c0006f4b:	89 e5                	mov    %esp,%ebp
c0006f4d:	53                   	push   %ebx
c0006f4e:	83 ec 14             	sub    $0x14,%esp
/work/x86_os_my/fs/fs.c:28
	char* part_name = (char*)arg;	// sdb1
c0006f51:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006f54:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:29
	struct partition* part = elem2entry(struct partition, part_tag, pelem);	// 根据pelem找到partition
c0006f57:	8b 45 08             	mov    0x8(%ebp),%eax
c0006f5a:	83 e8 0c             	sub    $0xc,%eax
c0006f5d:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:30
	if (!strcmp(part->name, part_name)) {	//名字一致
c0006f60:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006f63:	83 c0 14             	add    $0x14,%eax
c0006f66:	83 ec 08             	sub    $0x8,%esp
c0006f69:	ff 75 f4             	pushl  -0xc(%ebp)
c0006f6c:	50                   	push   %eax
c0006f6d:	e8 68 cc ff ff       	call   c0003bda <strcmp>
c0006f72:	83 c4 10             	add    $0x10,%esp
c0006f75:	84 c0                	test   %al,%al
c0006f77:	0f 85 ce 01 00 00    	jne    c000714b <mount_partition+0x201>
/work/x86_os_my/fs/fs.c:31
		cur_part = part;
c0006f7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006f80:	a3 d0 4a 01 c0       	mov    %eax,0xc0014ad0
/work/x86_os_my/fs/fs.c:32
		struct disk* hd = cur_part->my_disk;
c0006f85:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c0006f8a:	8b 40 08             	mov    0x8(%eax),%eax
c0006f8d:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:33
		struct super_block* sb_buf = (struct super_block*)sys_malloc(SECTOR_SIZE);
c0006f90:	83 ec 0c             	sub    $0xc,%esp
c0006f93:	68 00 02 00 00       	push   $0x200
c0006f98:	e8 0f bf ff ff       	call   c0002eac <sys_malloc>
c0006f9d:	83 c4 10             	add    $0x10,%esp
c0006fa0:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:37

		/* 在内存中创建分区cur_part的超级块 */
		// super_block 占用了1个扇区，但是它后边有很多数据是pad只做填充用
		cur_part->sb = (struct super_block*)sys_malloc(sizeof(struct super_block));
c0006fa3:	8b 1d d0 4a 01 c0    	mov    0xc0014ad0,%ebx
c0006fa9:	83 ec 0c             	sub    $0xc,%esp
c0006fac:	68 00 02 00 00       	push   $0x200
c0006fb1:	e8 f6 be ff ff       	call   c0002eac <sys_malloc>
c0006fb6:	83 c4 10             	add    $0x10,%esp
c0006fb9:	89 43 1c             	mov    %eax,0x1c(%ebx)
/work/x86_os_my/fs/fs.c:38
		if (cur_part->sb == NULL) {
c0006fbc:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c0006fc1:	8b 40 1c             	mov    0x1c(%eax),%eax
c0006fc4:	85 c0                	test   %eax,%eax
c0006fc6:	75 19                	jne    c0006fe1 <mount_partition+0x97>
/work/x86_os_my/fs/fs.c:39
			PANIC("alloc memory failed!");
c0006fc8:	68 40 e3 00 c0       	push   $0xc000e340
c0006fcd:	68 14 eb 00 c0       	push   $0xc000eb14
c0006fd2:	6a 27                	push   $0x27
c0006fd4:	68 55 e3 00 c0       	push   $0xc000e355
c0006fd9:	e8 23 b5 ff ff       	call   c0002501 <panic_spin>
c0006fde:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:43
		}

		/* 读入超级块 */
		memset(sb_buf, 0, SECTOR_SIZE);
c0006fe1:	83 ec 04             	sub    $0x4,%esp
c0006fe4:	68 00 02 00 00       	push   $0x200
c0006fe9:	6a 00                	push   $0x0
c0006feb:	ff 75 e8             	pushl  -0x18(%ebp)
c0006fee:	e8 12 ca ff ff       	call   c0003a05 <memset>
c0006ff3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:44
		ide_read(hd, cur_part->start_lba + 1, sb_buf, 1);
c0006ff6:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c0006ffb:	8b 00                	mov    (%eax),%eax
c0006ffd:	83 c0 01             	add    $0x1,%eax
c0007000:	6a 01                	push   $0x1
c0007002:	ff 75 e8             	pushl  -0x18(%ebp)
c0007005:	50                   	push   %eax
c0007006:	ff 75 ec             	pushl  -0x14(%ebp)
c0007009:	e8 67 f4 ff ff       	call   c0006475 <ide_read>
c000700e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:46
		// 拷贝给 cur_part->sb
		memcpy(cur_part->sb, sb_buf, sizeof(struct super_block));
c0007011:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c0007016:	8b 40 1c             	mov    0x1c(%eax),%eax
c0007019:	83 ec 04             	sub    $0x4,%esp
c000701c:	68 00 02 00 00       	push   $0x200
c0007021:	ff 75 e8             	pushl  -0x18(%ebp)
c0007024:	50                   	push   %eax
c0007025:	e8 2d ca ff ff       	call   c0003a57 <memcpy>
c000702a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:49

		/* 读入块位图 */
		cur_part->block_bitmap.bits = (uint8_t*)sys_malloc(sb_buf->block_bitmap_sects * SECTOR_SIZE);
c000702d:	8b 1d d0 4a 01 c0    	mov    0xc0014ad0,%ebx
c0007033:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0007036:	8b 40 14             	mov    0x14(%eax),%eax
c0007039:	c1 e0 09             	shl    $0x9,%eax
c000703c:	83 ec 0c             	sub    $0xc,%esp
c000703f:	50                   	push   %eax
c0007040:	e8 67 be ff ff       	call   c0002eac <sys_malloc>
c0007045:	83 c4 10             	add    $0x10,%esp
c0007048:	89 43 24             	mov    %eax,0x24(%ebx)
/work/x86_os_my/fs/fs.c:50
		if (cur_part->block_bitmap.bits == NULL) {
c000704b:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c0007050:	8b 40 24             	mov    0x24(%eax),%eax
c0007053:	85 c0                	test   %eax,%eax
c0007055:	75 19                	jne    c0007070 <mount_partition+0x126>
/work/x86_os_my/fs/fs.c:51
			PANIC("alloc memory failed!");
c0007057:	68 40 e3 00 c0       	push   $0xc000e340
c000705c:	68 14 eb 00 c0       	push   $0xc000eb14
c0007061:	6a 33                	push   $0x33
c0007063:	68 55 e3 00 c0       	push   $0xc000e355
c0007068:	e8 94 b4 ff ff       	call   c0002501 <panic_spin>
c000706d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:53
		}
		cur_part->block_bitmap.btmp_bytes_len = sb_buf->block_bitmap_sects * SECTOR_SIZE;
c0007070:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c0007075:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0007078:	8b 52 14             	mov    0x14(%edx),%edx
c000707b:	c1 e2 09             	shl    $0x9,%edx
c000707e:	89 50 20             	mov    %edx,0x20(%eax)
/work/x86_os_my/fs/fs.c:54
		ide_read(hd, sb_buf->block_bitmap_lba, cur_part->block_bitmap.bits, sb_buf->block_bitmap_sects);
c0007081:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0007084:	8b 48 14             	mov    0x14(%eax),%ecx
c0007087:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000708c:	8b 50 24             	mov    0x24(%eax),%edx
c000708f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0007092:	8b 40 10             	mov    0x10(%eax),%eax
c0007095:	51                   	push   %ecx
c0007096:	52                   	push   %edx
c0007097:	50                   	push   %eax
c0007098:	ff 75 ec             	pushl  -0x14(%ebp)
c000709b:	e8 d5 f3 ff ff       	call   c0006475 <ide_read>
c00070a0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:57

		/* 读入inode位图 */
		cur_part->inode_bitmap.bits = (uint8_t*)sys_malloc(sb_buf->inode_bitmap_sects * SECTOR_SIZE);
c00070a3:	8b 1d d0 4a 01 c0    	mov    0xc0014ad0,%ebx
c00070a9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00070ac:	8b 40 1c             	mov    0x1c(%eax),%eax
c00070af:	c1 e0 09             	shl    $0x9,%eax
c00070b2:	83 ec 0c             	sub    $0xc,%esp
c00070b5:	50                   	push   %eax
c00070b6:	e8 f1 bd ff ff       	call   c0002eac <sys_malloc>
c00070bb:	83 c4 10             	add    $0x10,%esp
c00070be:	89 43 2c             	mov    %eax,0x2c(%ebx)
/work/x86_os_my/fs/fs.c:58
		if (cur_part->inode_bitmap.bits == NULL) {
c00070c1:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c00070c6:	8b 40 2c             	mov    0x2c(%eax),%eax
c00070c9:	85 c0                	test   %eax,%eax
c00070cb:	75 19                	jne    c00070e6 <mount_partition+0x19c>
/work/x86_os_my/fs/fs.c:59
			PANIC("alloc memory failed!");
c00070cd:	68 40 e3 00 c0       	push   $0xc000e340
c00070d2:	68 14 eb 00 c0       	push   $0xc000eb14
c00070d7:	6a 3b                	push   $0x3b
c00070d9:	68 55 e3 00 c0       	push   $0xc000e355
c00070de:	e8 1e b4 ff ff       	call   c0002501 <panic_spin>
c00070e3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:61
		}
		cur_part->inode_bitmap.btmp_bytes_len = sb_buf->inode_bitmap_sects * SECTOR_SIZE;
c00070e6:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c00070eb:	8b 55 e8             	mov    -0x18(%ebp),%edx
c00070ee:	8b 52 1c             	mov    0x1c(%edx),%edx
c00070f1:	c1 e2 09             	shl    $0x9,%edx
c00070f4:	89 50 28             	mov    %edx,0x28(%eax)
/work/x86_os_my/fs/fs.c:62
		ide_read(hd, sb_buf->inode_bitmap_lba, cur_part->inode_bitmap.bits, sb_buf->inode_bitmap_sects);
c00070f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00070fa:	8b 48 1c             	mov    0x1c(%eax),%ecx
c00070fd:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c0007102:	8b 50 2c             	mov    0x2c(%eax),%edx
c0007105:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0007108:	8b 40 18             	mov    0x18(%eax),%eax
c000710b:	51                   	push   %ecx
c000710c:	52                   	push   %edx
c000710d:	50                   	push   %eax
c000710e:	ff 75 ec             	pushl  -0x14(%ebp)
c0007111:	e8 5f f3 ff ff       	call   c0006475 <ide_read>
c0007116:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:65


		list_init(&cur_part->open_inodes);	// 本分区打开的inode队列！
c0007119:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000711e:	83 c0 30             	add    $0x30,%eax
c0007121:	83 ec 0c             	sub    $0xc,%esp
c0007124:	50                   	push   %eax
c0007125:	e8 af d8 ff ff       	call   c00049d9 <list_init>
c000712a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:68


		printk("mount %s done!\n", part->name);
c000712d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0007130:	83 c0 14             	add    $0x14,%eax
c0007133:	83 ec 08             	sub    $0x8,%esp
c0007136:	50                   	push   %eax
c0007137:	68 5d e3 00 c0       	push   $0xc000e35d
c000713c:	e8 ad fd ff ff       	call   c0006eee <printk>
c0007141:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:70
		/* 返回true时list_traversal才会停止遍历,减少了后面元素无意义的遍历. */
		return true;
c0007144:	b8 01 00 00 00       	mov    $0x1,%eax
c0007149:	eb 05                	jmp    c0007150 <mount_partition+0x206>
/work/x86_os_my/fs/fs.c:72
	}//if (!strcmp(part->name, part_name))
	return false;	// list_traversal继续遍历
c000714b:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/fs.c:73
}
c0007150:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0007153:	c9                   	leave  
c0007154:	c3                   	ret    

c0007155 <partition_format>:
partition_format():
/work/x86_os_my/fs/fs.c:89
	| 操作系统引导块，超级块，空闲块位图，inode位图，inode数组，根目录，空闲块区域 |
	+------------------------------------------------------------------------------+
	partition结构见ide.h
	MAX_FILES_PER_PART == 4096
****************************************************************************************/
static void partition_format(struct partition* part) {
c0007155:	55                   	push   %ebp
c0007156:	89 e5                	mov    %esp,%ebp
c0007158:	57                   	push   %edi
c0007159:	56                   	push   %esi
c000715a:	53                   	push   %ebx
c000715b:	81 ec 7c 02 00 00    	sub    $0x27c,%esp
/work/x86_os_my/fs/fs.c:91
	/* 为方便实现，inode管理的数据块，一个块大小是一扇区 */
	uint32_t boot_sector_sects = 1;		//引导块
c0007161:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
/work/x86_os_my/fs/fs.c:92
	uint32_t super_block_sects = 1;		//超级块
c0007168:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
/work/x86_os_my/fs/fs.c:93
	uint32_t inode_bitmap_sects = DIV_ROUND_UP(MAX_FILES_PER_PART, BITS_PER_SECTOR);	// inode位图占几个扇区.最多支持4096个文件
c000716f:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
/work/x86_os_my/fs/fs.c:94
	uint32_t inode_table_sects = DIV_ROUND_UP((sizeof(struct inode) * MAX_FILES_PER_PART), SECTOR_SIZE);	//inode数组占几个扇区
c0007176:	c7 45 d4 60 02 00 00 	movl   $0x260,-0x2c(%ebp)
/work/x86_os_my/fs/fs.c:95
	uint32_t used_sects = boot_sector_sects + super_block_sects + inode_bitmap_sects + inode_table_sects;
c000717d:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0007180:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0007183:	01 c2                	add    %eax,%edx
c0007185:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0007188:	01 c2                	add    %eax,%edx
c000718a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000718d:	01 d0                	add    %edx,%eax
c000718f:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/fs/fs.c:96
	uint32_t free_sects = part->sec_cnt - used_sects;  
c0007192:	8b 45 08             	mov    0x8(%ebp),%eax
c0007195:	8b 40 04             	mov    0x4(%eax),%eax
c0007198:	2b 45 d0             	sub    -0x30(%ebp),%eax
c000719b:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/fs/fs.c:100

	/************** 简单处理块位图占据的扇区数 ***************/
	uint32_t block_bitmap_sects;	//空闲块位图占几个扇区
	block_bitmap_sects = DIV_ROUND_UP(free_sects, BITS_PER_SECTOR);		//free_sects空闲块位图要占几个扇区
c000719e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c00071a1:	05 ff 0f 00 00       	add    $0xfff,%eax
c00071a6:	c1 e8 0c             	shr    $0xc,%eax
c00071a9:	89 45 c8             	mov    %eax,-0x38(%ebp)
/work/x86_os_my/fs/fs.c:102
	/* 再算一次空闲块数量 */
	uint32_t block_bitmap_bit_len = free_sects - block_bitmap_sects;	//block_bitmap_bit_len 是位图长度，也是空闲块数量
c00071ac:	8b 45 cc             	mov    -0x34(%ebp),%eax
c00071af:	2b 45 c8             	sub    -0x38(%ebp),%eax
c00071b2:	89 45 c4             	mov    %eax,-0x3c(%ebp)
/work/x86_os_my/fs/fs.c:103
	block_bitmap_sects = DIV_ROUND_UP(block_bitmap_bit_len, BITS_PER_SECTOR); 
c00071b5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c00071b8:	05 ff 0f 00 00       	add    $0xfff,%eax
c00071bd:	c1 e8 0c             	shr    $0xc,%eax
c00071c0:	89 45 c8             	mov    %eax,-0x38(%ebp)
/work/x86_os_my/fs/fs.c:108
	/*********************************************************/

	/* 超级块初始化 */
	struct super_block sb;		//局部变量在栈中512字节
	sb.magic = 0x19590318;
c00071c3:	c7 85 a4 fd ff ff 18 	movl   $0x19590318,-0x25c(%ebp)
c00071ca:	03 59 19 
/work/x86_os_my/fs/fs.c:109
	sb.sec_cnt = part->sec_cnt;
c00071cd:	8b 45 08             	mov    0x8(%ebp),%eax
c00071d0:	8b 40 04             	mov    0x4(%eax),%eax
c00071d3:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
/work/x86_os_my/fs/fs.c:110
	sb.inode_cnt = MAX_FILES_PER_PART;
c00071d9:	c7 85 ac fd ff ff 00 	movl   $0x1000,-0x254(%ebp)
c00071e0:	10 00 00 
/work/x86_os_my/fs/fs.c:111
	sb.part_lba_base = part->start_lba;
c00071e3:	8b 45 08             	mov    0x8(%ebp),%eax
c00071e6:	8b 00                	mov    (%eax),%eax
c00071e8:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
/work/x86_os_my/fs/fs.c:113

	sb.block_bitmap_lba = sb.part_lba_base + 2;	// 第0块是引导块,第1块是超级块
c00071ee:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
c00071f4:	83 c0 02             	add    $0x2,%eax
c00071f7:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
/work/x86_os_my/fs/fs.c:114
	sb.block_bitmap_sects = block_bitmap_sects;	// 空闲块位图占几个扇区
c00071fd:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0007200:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
/work/x86_os_my/fs/fs.c:116

	sb.inode_bitmap_lba = sb.block_bitmap_lba + sb.block_bitmap_sects;
c0007206:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
c000720c:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
c0007212:	01 d0                	add    %edx,%eax
c0007214:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
/work/x86_os_my/fs/fs.c:117
	sb.inode_bitmap_sects = inode_bitmap_sects;	// inode位图占几个扇区
c000721a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000721d:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
/work/x86_os_my/fs/fs.c:119

	sb.inode_table_lba = sb.inode_bitmap_lba + sb.inode_bitmap_sects;
c0007223:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
c0007229:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
c000722f:	01 d0                	add    %edx,%eax
c0007231:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
/work/x86_os_my/fs/fs.c:120
	sb.inode_table_sects = inode_table_sects;	// inode数组占几个扇区
c0007237:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000723a:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
/work/x86_os_my/fs/fs.c:122

	sb.data_start_lba = sb.inode_table_lba + sb.inode_table_sects;	// 数据区开始的第一个扇区号
c0007240:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
c0007246:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
c000724c:	01 d0                	add    %edx,%eax
c000724e:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
/work/x86_os_my/fs/fs.c:124

	sb.root_inode_no = 0;	//根目录的inode号是0
c0007254:	c7 85 d0 fd ff ff 00 	movl   $0x0,-0x230(%ebp)
c000725b:	00 00 00 
/work/x86_os_my/fs/fs.c:125
	sb.dir_entry_size = sizeof(struct dir_entry);
c000725e:	c7 85 d4 fd ff ff 18 	movl   $0x18,-0x22c(%ebp)
c0007265:	00 00 00 
/work/x86_os_my/fs/fs.c:127

	printk("%s info:\n", part->name);
c0007268:	8b 45 08             	mov    0x8(%ebp),%eax
c000726b:	83 c0 14             	add    $0x14,%eax
c000726e:	83 ec 08             	sub    $0x8,%esp
c0007271:	50                   	push   %eax
c0007272:	68 6d e3 00 c0       	push   $0xc000e36d
c0007277:	e8 72 fc ff ff       	call   c0006eee <printk>
c000727c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:128
	printk("   magic:0x%x\n   part_lba_base:0x%x\n   all_sectors:0x%x\n   inode_cnt:0x%x\n   block_bitmap_lba:0x%x\n   block_bitmap_sectors:0x%x\n   inode_bitmap_lba:0x%x\n   inode_bitmap_sectors:0x%x\n   inode_table_lba:0x%x\n   inode_table_sectors:0x%x\n   data_start_lba:0x%x\n", sb.magic, sb.part_lba_base, sb.sec_cnt, sb.inode_cnt, sb.block_bitmap_lba, sb.block_bitmap_sects, sb.inode_bitmap_lba, sb.inode_bitmap_sects, sb.inode_table_lba, sb.inode_table_sects, sb.data_start_lba);
c000727f:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
c0007285:	8b 9d c8 fd ff ff    	mov    -0x238(%ebp),%ebx
c000728b:	8b bd c4 fd ff ff    	mov    -0x23c(%ebp),%edi
c0007291:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
c0007297:	89 85 94 fd ff ff    	mov    %eax,-0x26c(%ebp)
c000729d:	8b b5 bc fd ff ff    	mov    -0x244(%ebp),%esi
c00072a3:	89 b5 90 fd ff ff    	mov    %esi,-0x270(%ebp)
c00072a9:	8b 8d b8 fd ff ff    	mov    -0x248(%ebp),%ecx
c00072af:	89 8d 8c fd ff ff    	mov    %ecx,-0x274(%ebp)
c00072b5:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
c00072bb:	89 85 88 fd ff ff    	mov    %eax,-0x278(%ebp)
c00072c1:	8b b5 ac fd ff ff    	mov    -0x254(%ebp),%esi
c00072c7:	89 b5 84 fd ff ff    	mov    %esi,-0x27c(%ebp)
c00072cd:	8b b5 a8 fd ff ff    	mov    -0x258(%ebp),%esi
c00072d3:	8b 8d b0 fd ff ff    	mov    -0x250(%ebp),%ecx
c00072d9:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
c00072df:	52                   	push   %edx
c00072e0:	53                   	push   %ebx
c00072e1:	57                   	push   %edi
c00072e2:	ff b5 94 fd ff ff    	pushl  -0x26c(%ebp)
c00072e8:	ff b5 90 fd ff ff    	pushl  -0x270(%ebp)
c00072ee:	ff b5 8c fd ff ff    	pushl  -0x274(%ebp)
c00072f4:	ff b5 88 fd ff ff    	pushl  -0x278(%ebp)
c00072fa:	ff b5 84 fd ff ff    	pushl  -0x27c(%ebp)
c0007300:	56                   	push   %esi
c0007301:	51                   	push   %ecx
c0007302:	50                   	push   %eax
c0007303:	68 78 e3 00 c0       	push   $0xc000e378
c0007308:	e8 e1 fb ff ff       	call   c0006eee <printk>
c000730d:	83 c4 30             	add    $0x30,%esp
/work/x86_os_my/fs/fs.c:132


	/***** 1 将超级块写入本分区的1号扇区 *****/
	struct disk* hd = part->my_disk;	// 分区所属的硬盘
c0007310:	8b 45 08             	mov    0x8(%ebp),%eax
c0007313:	8b 40 08             	mov    0x8(%eax),%eax
c0007316:	89 45 c0             	mov    %eax,-0x40(%ebp)
/work/x86_os_my/fs/fs.c:134
	// void ide_write(struct disk* hd, uint32_t lba, void* buf, uint32_t sec_cnt);
	ide_write(hd, part->start_lba + 1, &sb, 1);
c0007319:	8b 45 08             	mov    0x8(%ebp),%eax
c000731c:	8b 00                	mov    (%eax),%eax
c000731e:	8d 50 01             	lea    0x1(%eax),%edx
c0007321:	6a 01                	push   $0x1
c0007323:	8d 85 a4 fd ff ff    	lea    -0x25c(%ebp),%eax
c0007329:	50                   	push   %eax
c000732a:	52                   	push   %edx
c000732b:	ff 75 c0             	pushl  -0x40(%ebp)
c000732e:	e8 b6 f2 ff ff       	call   c00065e9 <ide_write>
c0007333:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:135
	printk("   super_block_lba:0x%x\n", part->start_lba + 1);
c0007336:	8b 45 08             	mov    0x8(%ebp),%eax
c0007339:	8b 00                	mov    (%eax),%eax
c000733b:	83 c0 01             	add    $0x1,%eax
c000733e:	83 ec 08             	sub    $0x8,%esp
c0007341:	50                   	push   %eax
c0007342:	68 7a e4 00 c0       	push   $0xc000e47a
c0007347:	e8 a2 fb ff ff       	call   c0006eee <printk>
c000734c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:139


	/* 他们三个写到硬盘上：block_bitmap_sects/inode_bitmap_sects/inode_table_sects 缓冲区选三者最大的 */
	uint32_t buf_size = (sb.block_bitmap_sects >= sb.inode_bitmap_sects ? sb.block_bitmap_sects : sb.inode_bitmap_sects);
c000734f:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
c0007355:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
c000735b:	39 c2                	cmp    %eax,%edx
c000735d:	0f 43 c2             	cmovae %edx,%eax
c0007360:	89 45 bc             	mov    %eax,-0x44(%ebp)
/work/x86_os_my/fs/fs.c:140
	buf_size = (buf_size >= sb.inode_table_sects ? buf_size : sb.inode_table_sects) * SECTOR_SIZE;
c0007363:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
c0007369:	8b 45 bc             	mov    -0x44(%ebp),%eax
c000736c:	39 c2                	cmp    %eax,%edx
c000736e:	0f 43 c2             	cmovae %edx,%eax
c0007371:	c1 e0 09             	shl    $0x9,%eax
c0007374:	89 45 bc             	mov    %eax,-0x44(%ebp)
/work/x86_os_my/fs/fs.c:141
	uint8_t* buf = (uint8_t*)sys_malloc(buf_size);	// 申请的内存由内存管理系统清0后返回
c0007377:	83 ec 0c             	sub    $0xc,%esp
c000737a:	ff 75 bc             	pushl  -0x44(%ebp)
c000737d:	e8 2a bb ff ff       	call   c0002eac <sys_malloc>
c0007382:	83 c4 10             	add    $0x10,%esp
c0007385:	89 45 b8             	mov    %eax,-0x48(%ebp)
/work/x86_os_my/fs/fs.c:146


	/***** 2 将块位图初始化并写入sb.block_bitmap_lba *****/
	/* 初始化块位图 block_bitmap */
	buf[0] |= 0x01;	// 第0个块预留给根目录,位图中先占位
c0007388:	8b 45 b8             	mov    -0x48(%ebp),%eax
c000738b:	0f b6 00             	movzbl (%eax),%eax
c000738e:	83 c8 01             	or     $0x1,%eax
c0007391:	89 c2                	mov    %eax,%edx
c0007393:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0007396:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/fs/fs.c:147
	uint32_t block_bitmap_last_byte = block_bitmap_bit_len / 8;		//block_bitmap_bit_len 是位图长度，也是空闲块数量
c0007398:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c000739b:	c1 e8 03             	shr    $0x3,%eax
c000739e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
/work/x86_os_my/fs/fs.c:148
	uint8_t  block_bitmap_last_bit  = block_bitmap_bit_len % 8;
c00073a1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c00073a4:	83 e0 07             	and    $0x7,%eax
c00073a7:	88 45 b3             	mov    %al,-0x4d(%ebp)
/work/x86_os_my/fs/fs.c:149
	uint32_t last_size = SECTOR_SIZE - (block_bitmap_last_byte % SECTOR_SIZE);	// last_size是位图占用的最后一个扇区中，不足一扇区的空闲部分
c00073aa:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c00073ad:	25 ff 01 00 00       	and    $0x1ff,%eax
c00073b2:	ba 00 02 00 00       	mov    $0x200,%edx
c00073b7:	29 c2                	sub    %eax,%edx
c00073b9:	89 d0                	mov    %edx,%eax
c00073bb:	89 45 ac             	mov    %eax,-0x54(%ebp)
/work/x86_os_my/fs/fs.c:152

	// 1 空闲块位图最后一字节，到最后一字节所在扇区的末尾，全置为占用（空闲块位图所在扇区的空闲部分）
	memset(&buf[block_bitmap_last_byte], 0xff, last_size);
c00073be:	8b 55 b8             	mov    -0x48(%ebp),%edx
c00073c1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c00073c4:	01 d0                	add    %edx,%eax
c00073c6:	83 ec 04             	sub    $0x4,%esp
c00073c9:	ff 75 ac             	pushl  -0x54(%ebp)
c00073cc:	68 ff 00 00 00       	push   $0xff
c00073d1:	50                   	push   %eax
c00073d2:	e8 2e c6 ff ff       	call   c0003a05 <memset>
c00073d7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:155

	// 2 上一步中最后一字节内，有效的位重新置0
	uint8_t bit_idx = 0;
c00073da:	c6 45 e7 00          	movb   $0x0,-0x19(%ebp)
/work/x86_os_my/fs/fs.c:156
	while (bit_idx <= block_bitmap_last_bit) {
c00073de:	eb 37                	jmp    c0007417 <partition_format+0x2c2>
/work/x86_os_my/fs/fs.c:157
		buf[block_bitmap_last_byte] &= ~(1 << bit_idx++);
c00073e0:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c00073e4:	8d 50 01             	lea    0x1(%eax),%edx
c00073e7:	88 55 e7             	mov    %dl,-0x19(%ebp)
c00073ea:	0f b6 c0             	movzbl %al,%eax
c00073ed:	ba 01 00 00 00       	mov    $0x1,%edx
c00073f2:	89 c1                	mov    %eax,%ecx
c00073f4:	d3 e2                	shl    %cl,%edx
c00073f6:	89 d0                	mov    %edx,%eax
c00073f8:	f7 d0                	not    %eax
c00073fa:	89 c3                	mov    %eax,%ebx
c00073fc:	8b 55 b8             	mov    -0x48(%ebp),%edx
c00073ff:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0007402:	01 d0                	add    %edx,%eax
c0007404:	8b 4d b8             	mov    -0x48(%ebp),%ecx
c0007407:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c000740a:	01 ca                	add    %ecx,%edx
c000740c:	0f b6 12             	movzbl (%edx),%edx
c000740f:	89 d1                	mov    %edx,%ecx
c0007411:	89 da                	mov    %ebx,%edx
c0007413:	21 ca                	and    %ecx,%edx
c0007415:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/fs/fs.c:156
	// 1 空闲块位图最后一字节，到最后一字节所在扇区的末尾，全置为占用（空闲块位图所在扇区的空闲部分）
	memset(&buf[block_bitmap_last_byte], 0xff, last_size);

	// 2 上一步中最后一字节内，有效的位重新置0
	uint8_t bit_idx = 0;
	while (bit_idx <= block_bitmap_last_bit) {
c0007417:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c000741b:	3a 45 b3             	cmp    -0x4d(%ebp),%al
c000741e:	76 c0                	jbe    c00073e0 <partition_format+0x28b>
/work/x86_os_my/fs/fs.c:160
		buf[block_bitmap_last_byte] &= ~(1 << bit_idx++);
	}
	// 3 写回到硬盘 空闲块位图 区域
	ide_write(hd, sb.block_bitmap_lba, buf, sb.block_bitmap_sects);
c0007420:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
c0007426:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
c000742c:	52                   	push   %edx
c000742d:	ff 75 b8             	pushl  -0x48(%ebp)
c0007430:	50                   	push   %eax
c0007431:	ff 75 c0             	pushl  -0x40(%ebp)
c0007434:	e8 b0 f1 ff ff       	call   c00065e9 <ide_write>
c0007439:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:164


	/***** 3 将inode位图初始化并写入sb.inode_bitmap_lba *****/
	memset(buf, 0, buf_size);
c000743c:	83 ec 04             	sub    $0x4,%esp
c000743f:	ff 75 bc             	pushl  -0x44(%ebp)
c0007442:	6a 00                	push   $0x0
c0007444:	ff 75 b8             	pushl  -0x48(%ebp)
c0007447:	e8 b9 c5 ff ff       	call   c0003a05 <memset>
c000744c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:165
	buf[0] |= 0x1;	// 第0个inode分给了根目录
c000744f:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0007452:	0f b6 00             	movzbl (%eax),%eax
c0007455:	83 c8 01             	or     $0x1,%eax
c0007458:	89 c2                	mov    %eax,%edx
c000745a:	8b 45 b8             	mov    -0x48(%ebp),%eax
c000745d:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/fs/fs.c:169
	/* 最多4096个文件，inode位图4096个bit，正好占用1扇区，inode_bitmap_sects等于1
	 * 不像block_bitmap，在inode_bitmap的扇区中，没有多余的空闲无效位 */
	// 写回到硬盘 inode位图 区域
	ide_write(hd, sb.inode_bitmap_lba, buf, sb.inode_bitmap_sects);
c000745f:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
c0007465:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
c000746b:	52                   	push   %edx
c000746c:	ff 75 b8             	pushl  -0x48(%ebp)
c000746f:	50                   	push   %eax
c0007470:	ff 75 c0             	pushl  -0x40(%ebp)
c0007473:	e8 71 f1 ff ff       	call   c00065e9 <ide_write>
c0007478:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:174


	/***** 4 将inode数组初始化并写入sb.inode_table_lba *****/
	/* 处理inode_table中的第0项，即根目录所在的inode */
	memset(buf, 0, buf_size);
c000747b:	83 ec 04             	sub    $0x4,%esp
c000747e:	ff 75 bc             	pushl  -0x44(%ebp)
c0007481:	6a 00                	push   $0x0
c0007483:	ff 75 b8             	pushl  -0x48(%ebp)
c0007486:	e8 7a c5 ff ff       	call   c0003a05 <memset>
c000748b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:175
	struct inode* i = (struct inode*)buf;
c000748e:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0007491:	89 45 a8             	mov    %eax,-0x58(%ebp)
/work/x86_os_my/fs/fs.c:176
	i->i_size = sb.dir_entry_size * 2;		// .和..	// 所有目录项大小之和
c0007494:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
c000749a:	8d 14 00             	lea    (%eax,%eax,1),%edx
c000749d:	8b 45 a8             	mov    -0x58(%ebp),%eax
c00074a0:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/fs.c:177
	i->i_no = 0;   // 根目录占inode数组中第0个inode
c00074a3:	8b 45 a8             	mov    -0x58(%ebp),%eax
c00074a6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/fs/fs.c:181
	// inode管理的是数据块（对于我们来说就是扇区）
	// 此处是指定根目录这个inode管理的数据块的位置
	// i_sectors数组后边的元素都是0 没用到
	i->i_sectors[0] = sb.data_start_lba;
c00074ac:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
c00074b2:	8b 45 a8             	mov    -0x58(%ebp),%eax
c00074b5:	89 50 10             	mov    %edx,0x10(%eax)
/work/x86_os_my/fs/fs.c:184
	// 写到硬盘 inode数组
	// 其实我们只处理了第0项
	ide_write(hd, sb.inode_table_lba, buf, sb.inode_table_sects);
c00074b8:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
c00074be:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
c00074c4:	52                   	push   %edx
c00074c5:	ff 75 b8             	pushl  -0x48(%ebp)
c00074c8:	50                   	push   %eax
c00074c9:	ff 75 c0             	pushl  -0x40(%ebp)
c00074cc:	e8 18 f1 ff ff       	call   c00065e9 <ide_write>
c00074d1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:190


	/***** 5 将根目录初始化并写入sb.data_start_lba *****/
	/* 写入根目录的两个目录项.和.. */
	// inode不知道数据块中是普通文件，还是目录。但是目录项知道。
	memset(buf, 0, buf_size);
c00074d4:	83 ec 04             	sub    $0x4,%esp
c00074d7:	ff 75 bc             	pushl  -0x44(%ebp)
c00074da:	6a 00                	push   $0x0
c00074dc:	ff 75 b8             	pushl  -0x48(%ebp)
c00074df:	e8 21 c5 ff ff       	call   c0003a05 <memset>
c00074e4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:191
	struct dir_entry* p_de = (struct dir_entry*)buf;
c00074e7:	8b 45 b8             	mov    -0x48(%ebp),%eax
c00074ea:	89 45 a4             	mov    %eax,-0x5c(%ebp)
/work/x86_os_my/fs/fs.c:194

	/* 初始化当前目录"." */
	memcpy(p_de->filename, ".", 1);
c00074ed:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c00074f0:	83 ec 04             	sub    $0x4,%esp
c00074f3:	6a 01                	push   $0x1
c00074f5:	68 93 e4 00 c0       	push   $0xc000e493
c00074fa:	50                   	push   %eax
c00074fb:	e8 57 c5 ff ff       	call   c0003a57 <memcpy>
c0007500:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:195
	p_de->i_no = 0;	// 目录或文件对应的inode编号
c0007503:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0007506:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
/work/x86_os_my/fs/fs.c:196
	p_de->f_type = FT_DIRECTORY;
c000750d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0007510:	c7 40 14 02 00 00 00 	movl   $0x2,0x14(%eax)
/work/x86_os_my/fs/fs.c:198

	p_de++;
c0007517:	83 45 a4 18          	addl   $0x18,-0x5c(%ebp)
/work/x86_os_my/fs/fs.c:201

	/* 初始化当前目录父目录".." */
	memcpy(p_de->filename, "..", 2);
c000751b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c000751e:	83 ec 04             	sub    $0x4,%esp
c0007521:	6a 02                	push   $0x2
c0007523:	68 95 e4 00 c0       	push   $0xc000e495
c0007528:	50                   	push   %eax
c0007529:	e8 29 c5 ff ff       	call   c0003a57 <memcpy>
c000752e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:202
	p_de->i_no = 0;	// 根目录的父目录依然是根目录自己
c0007531:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0007534:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
/work/x86_os_my/fs/fs.c:203
	p_de->f_type = FT_DIRECTORY;
c000753b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c000753e:	c7 40 14 02 00 00 00 	movl   $0x2,0x14(%eax)
/work/x86_os_my/fs/fs.c:206

	/* sb.data_start_lba已经分配给了根目录，我们把根目录的目录项放进去 */
	ide_write(hd, sb.data_start_lba, buf, 1);
c0007545:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
c000754b:	6a 01                	push   $0x1
c000754d:	ff 75 b8             	pushl  -0x48(%ebp)
c0007550:	50                   	push   %eax
c0007551:	ff 75 c0             	pushl  -0x40(%ebp)
c0007554:	e8 90 f0 ff ff       	call   c00065e9 <ide_write>
c0007559:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:209


	printk("   root_dir_lba:0x%x\n", sb.data_start_lba);
c000755c:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
c0007562:	83 ec 08             	sub    $0x8,%esp
c0007565:	50                   	push   %eax
c0007566:	68 98 e4 00 c0       	push   $0xc000e498
c000756b:	e8 7e f9 ff ff       	call   c0006eee <printk>
c0007570:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:210
	printk("%s format done\n", part->name);
c0007573:	8b 45 08             	mov    0x8(%ebp),%eax
c0007576:	83 c0 14             	add    $0x14,%eax
c0007579:	83 ec 08             	sub    $0x8,%esp
c000757c:	50                   	push   %eax
c000757d:	68 ae e4 00 c0       	push   $0xc000e4ae
c0007582:	e8 67 f9 ff ff       	call   c0006eee <printk>
c0007587:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:211
	sys_free(buf);
c000758a:	83 ec 0c             	sub    $0xc,%esp
c000758d:	ff 75 b8             	pushl  -0x48(%ebp)
c0007590:	e8 44 bf ff ff       	call   c00034d9 <sys_free>
c0007595:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:212
}
c0007598:	90                   	nop
c0007599:	8d 65 f4             	lea    -0xc(%ebp),%esp
c000759c:	5b                   	pop    %ebx
c000759d:	5e                   	pop    %esi
c000759e:	5f                   	pop    %edi
c000759f:	5d                   	pop    %ebp
c00075a0:	c3                   	ret    

c00075a1 <path_parse>:
path_parse():
/work/x86_os_my/fs/fs.c:217


/* 将最上层路径名称解析出来，比如pathname="a/b/c"得到name_store="a"
 * 返回剩下的目录 "b/c" */
char* path_parse(char* pathname, char* name_store) {
c00075a1:	55                   	push   %ebp
c00075a2:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/fs/fs.c:218
	if (pathname[0] == '/') {	// 根目录不需要单独解析
c00075a4:	8b 45 08             	mov    0x8(%ebp),%eax
c00075a7:	0f b6 00             	movzbl (%eax),%eax
c00075aa:	3c 2f                	cmp    $0x2f,%al
c00075ac:	75 27                	jne    c00075d5 <path_parse+0x34>
/work/x86_os_my/fs/fs.c:220 (discriminator 1)
		/* 路径中出现1个或多个连续的字符'/',将这些'/'跳过,如"///a/b" */
		while(*(++pathname) == '/');
c00075ae:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c00075b2:	8b 45 08             	mov    0x8(%ebp),%eax
c00075b5:	0f b6 00             	movzbl (%eax),%eax
c00075b8:	3c 2f                	cmp    $0x2f,%al
c00075ba:	74 f2                	je     c00075ae <path_parse+0xd>
/work/x86_os_my/fs/fs.c:224
	}

	/* 开始一般的路径解析 */
	while (*pathname != '/' && *pathname != 0) {
c00075bc:	eb 17                	jmp    c00075d5 <path_parse+0x34>
/work/x86_os_my/fs/fs.c:225
		*name_store++ = *pathname++;
c00075be:	8b 45 0c             	mov    0xc(%ebp),%eax
c00075c1:	8d 50 01             	lea    0x1(%eax),%edx
c00075c4:	89 55 0c             	mov    %edx,0xc(%ebp)
c00075c7:	8b 55 08             	mov    0x8(%ebp),%edx
c00075ca:	8d 4a 01             	lea    0x1(%edx),%ecx
c00075cd:	89 4d 08             	mov    %ecx,0x8(%ebp)
c00075d0:	0f b6 12             	movzbl (%edx),%edx
c00075d3:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/fs/fs.c:224
		/* 路径中出现1个或多个连续的字符'/',将这些'/'跳过,如"///a/b" */
		while(*(++pathname) == '/');
	}

	/* 开始一般的路径解析 */
	while (*pathname != '/' && *pathname != 0) {
c00075d5:	8b 45 08             	mov    0x8(%ebp),%eax
c00075d8:	0f b6 00             	movzbl (%eax),%eax
c00075db:	3c 2f                	cmp    $0x2f,%al
c00075dd:	74 0a                	je     c00075e9 <path_parse+0x48>
/work/x86_os_my/fs/fs.c:224 (discriminator 1)
c00075df:	8b 45 08             	mov    0x8(%ebp),%eax
c00075e2:	0f b6 00             	movzbl (%eax),%eax
c00075e5:	84 c0                	test   %al,%al
c00075e7:	75 d5                	jne    c00075be <path_parse+0x1d>
/work/x86_os_my/fs/fs.c:228
		*name_store++ = *pathname++;
	}

	if (pathname[0] == 0) {   // 若路径字符串为空则返回NULL
c00075e9:	8b 45 08             	mov    0x8(%ebp),%eax
c00075ec:	0f b6 00             	movzbl (%eax),%eax
c00075ef:	84 c0                	test   %al,%al
c00075f1:	75 07                	jne    c00075fa <path_parse+0x59>
/work/x86_os_my/fs/fs.c:229
		return NULL;
c00075f3:	b8 00 00 00 00       	mov    $0x0,%eax
c00075f8:	eb 03                	jmp    c00075fd <path_parse+0x5c>
/work/x86_os_my/fs/fs.c:231
	}
	return pathname;
c00075fa:	8b 45 08             	mov    0x8(%ebp),%eax
/work/x86_os_my/fs/fs.c:232
}
c00075fd:	5d                   	pop    %ebp
c00075fe:	c3                   	ret    

c00075ff <path_depth_cnt>:
path_depth_cnt():
/work/x86_os_my/fs/fs.c:235

/* 返回路径深度,比如/a/b/c,深度为3 */
int32_t path_depth_cnt(char* pathname) {
c00075ff:	55                   	push   %ebp
c0007600:	89 e5                	mov    %esp,%ebp
c0007602:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/fs/fs.c:236
	ASSERT(pathname != NULL);
c0007605:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0007609:	75 1c                	jne    c0007627 <path_depth_cnt+0x28>
/work/x86_os_my/fs/fs.c:236 (discriminator 1)
c000760b:	68 be e4 00 c0       	push   $0xc000e4be
c0007610:	68 24 eb 00 c0       	push   $0xc000eb24
c0007615:	68 ec 00 00 00       	push   $0xec
c000761a:	68 55 e3 00 c0       	push   $0xc000e355
c000761f:	e8 dd ae ff ff       	call   c0002501 <panic_spin>
c0007624:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:237
	char* p = pathname;
c0007627:	8b 45 08             	mov    0x8(%ebp),%eax
c000762a:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:239
	char name[MAX_FILE_NAME_LEN];	// 用于path_parse的参数做路径解析
	uint32_t depth = 0;
c000762d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:242

	/* 解析路径,从中拆分出各级名称 */
	p = path_parse(p, name);
c0007634:	83 ec 08             	sub    $0x8,%esp
c0007637:	8d 45 e0             	lea    -0x20(%ebp),%eax
c000763a:	50                   	push   %eax
c000763b:	ff 75 f4             	pushl  -0xc(%ebp)
c000763e:	e8 5e ff ff ff       	call   c00075a1 <path_parse>
c0007643:	83 c4 10             	add    $0x10,%esp
c0007646:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:243
	while (name[0]) {
c0007649:	eb 32                	jmp    c000767d <path_depth_cnt+0x7e>
/work/x86_os_my/fs/fs.c:244
		depth++;
c000764b:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:245
		memset(name, 0, MAX_FILE_NAME_LEN);
c000764f:	83 ec 04             	sub    $0x4,%esp
c0007652:	6a 10                	push   $0x10
c0007654:	6a 00                	push   $0x0
c0007656:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0007659:	50                   	push   %eax
c000765a:	e8 a6 c3 ff ff       	call   c0003a05 <memset>
c000765f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:246
		if (p) {	// 如果p不等于NULL,继续分析路径
c0007662:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0007666:	74 15                	je     c000767d <path_depth_cnt+0x7e>
/work/x86_os_my/fs/fs.c:247
			p  = path_parse(p, name);
c0007668:	83 ec 08             	sub    $0x8,%esp
c000766b:	8d 45 e0             	lea    -0x20(%ebp),%eax
c000766e:	50                   	push   %eax
c000766f:	ff 75 f4             	pushl  -0xc(%ebp)
c0007672:	e8 2a ff ff ff       	call   c00075a1 <path_parse>
c0007677:	83 c4 10             	add    $0x10,%esp
c000767a:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:243
	char name[MAX_FILE_NAME_LEN];	// 用于path_parse的参数做路径解析
	uint32_t depth = 0;

	/* 解析路径,从中拆分出各级名称 */
	p = path_parse(p, name);
	while (name[0]) {
c000767d:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c0007681:	84 c0                	test   %al,%al
c0007683:	75 c6                	jne    c000764b <path_depth_cnt+0x4c>
/work/x86_os_my/fs/fs.c:250
		memset(name, 0, MAX_FILE_NAME_LEN);
		if (p) {	// 如果p不等于NULL,继续分析路径
			p  = path_parse(p, name);
		}
	}
	return depth;
c0007685:	8b 45 f0             	mov    -0x10(%ebp),%eax
/work/x86_os_my/fs/fs.c:251
}
c0007688:	c9                   	leave  
c0007689:	c3                   	ret    

c000768a <search_file>:
search_file():
/work/x86_os_my/fs/fs.c:260
 * 全局变量 struct dir root_dir 定义在 dir.c
 * 也支持 /./a 或者 /../b 会把.和..当做一个目录项继续往下层找
 * /a/b/c若c不存在，那么 searched_record.searched_path 是 /a/b/c
 * 注意下边三种return的地方，是三种情况！
 */
static int search_file(const char* pathname, struct path_search_record* searched_record) {
c000768a:	55                   	push   %ebp
c000768b:	89 e5                	mov    %esp,%ebp
c000768d:	83 ec 48             	sub    $0x48,%esp
/work/x86_os_my/fs/fs.c:262
	/* 如果待查找的是根目录,为避免下面无用的查找,直接返回已知根目录信息 */
	if (!strcmp(pathname, "/") || !strcmp(pathname, "/.") || !strcmp(pathname, "/..")) {
c0007690:	83 ec 08             	sub    $0x8,%esp
c0007693:	68 cf e4 00 c0       	push   $0xc000e4cf
c0007698:	ff 75 08             	pushl  0x8(%ebp)
c000769b:	e8 3a c5 ff ff       	call   c0003bda <strcmp>
c00076a0:	83 c4 10             	add    $0x10,%esp
c00076a3:	84 c0                	test   %al,%al
c00076a5:	74 2e                	je     c00076d5 <search_file+0x4b>
/work/x86_os_my/fs/fs.c:262 (discriminator 1)
c00076a7:	83 ec 08             	sub    $0x8,%esp
c00076aa:	68 d1 e4 00 c0       	push   $0xc000e4d1
c00076af:	ff 75 08             	pushl  0x8(%ebp)
c00076b2:	e8 23 c5 ff ff       	call   c0003bda <strcmp>
c00076b7:	83 c4 10             	add    $0x10,%esp
c00076ba:	84 c0                	test   %al,%al
c00076bc:	74 17                	je     c00076d5 <search_file+0x4b>
/work/x86_os_my/fs/fs.c:262 (discriminator 2)
c00076be:	83 ec 08             	sub    $0x8,%esp
c00076c1:	68 d4 e4 00 c0       	push   $0xc000e4d4
c00076c6:	ff 75 08             	pushl  0x8(%ebp)
c00076c9:	e8 0c c5 ff ff       	call   c0003bda <strcmp>
c00076ce:	83 c4 10             	add    $0x10,%esp
c00076d1:	84 c0                	test   %al,%al
c00076d3:	75 2a                	jne    c00076ff <search_file+0x75>
/work/x86_os_my/fs/fs.c:263
		searched_record->parent_dir = &root_dir;	// 直接父目录
c00076d5:	8b 45 0c             	mov    0xc(%ebp),%eax
c00076d8:	c7 80 00 02 00 00 60 	movl   $0xc0014c60,0x200(%eax)
c00076df:	4c 01 c0 
/work/x86_os_my/fs/fs.c:264
		searched_record->file_type = FT_DIRECTORY;	// FT_UNKNOWN代表没找到，找到才有类型是文件或目录
c00076e2:	8b 45 0c             	mov    0xc(%ebp),%eax
c00076e5:	c7 80 04 02 00 00 02 	movl   $0x2,0x204(%eax)
c00076ec:	00 00 00 
/work/x86_os_my/fs/fs.c:265
		searched_record->searched_path[0] = 0;		// 搜索过的路径置空
c00076ef:	8b 45 0c             	mov    0xc(%ebp),%eax
c00076f2:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/fs/fs.c:266
		return 0;
c00076f5:	b8 00 00 00 00       	mov    $0x0,%eax
c00076fa:	e9 08 02 00 00       	jmp    c0007907 <search_file+0x27d>
/work/x86_os_my/fs/fs.c:269
	}

	uint32_t path_len = strlen(pathname);
c00076ff:	83 ec 0c             	sub    $0xc,%esp
c0007702:	ff 75 08             	pushl  0x8(%ebp)
c0007705:	e8 85 c4 ff ff       	call   c0003b8f <strlen>
c000770a:	83 c4 10             	add    $0x10,%esp
c000770d:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:271
	/* 保证pathname至少是这样的路径/x且小于最大长度 */
	ASSERT(pathname[0] == '/' && path_len > 1 && path_len < MAX_PATH_LEN);
c0007710:	8b 45 08             	mov    0x8(%ebp),%eax
c0007713:	0f b6 00             	movzbl (%eax),%eax
c0007716:	3c 2f                	cmp    $0x2f,%al
c0007718:	75 0f                	jne    c0007729 <search_file+0x9f>
/work/x86_os_my/fs/fs.c:271 (discriminator 1)
c000771a:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
c000771e:	76 09                	jbe    c0007729 <search_file+0x9f>
/work/x86_os_my/fs/fs.c:271 (discriminator 3)
c0007720:	81 7d e8 ff 01 00 00 	cmpl   $0x1ff,-0x18(%ebp)
c0007727:	76 1c                	jbe    c0007745 <search_file+0xbb>
/work/x86_os_my/fs/fs.c:271 (discriminator 5)
c0007729:	68 d8 e4 00 c0       	push   $0xc000e4d8
c000772e:	68 34 eb 00 c0       	push   $0xc000eb34
c0007733:	68 0f 01 00 00       	push   $0x10f
c0007738:	68 55 e3 00 c0       	push   $0xc000e355
c000773d:	e8 bf ad ff ff       	call   c0002501 <panic_spin>
c0007742:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:272
	char* sub_path = (char*)pathname;
c0007745:	8b 45 08             	mov    0x8(%ebp),%eax
c0007748:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:273
	struct dir* parent_dir = &root_dir;
c000774b:	c7 45 f0 60 4c 01 c0 	movl   $0xc0014c60,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:277
	struct dir_entry dir_e;

	/* 数组name每次的值分别是各级目录的名字："a","b","c" */
	char name[MAX_FILE_NAME_LEN] = {0};
c0007752:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
c0007759:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
c0007760:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
c0007767:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
/work/x86_os_my/fs/fs.c:279

	searched_record->parent_dir = parent_dir;	// 直接父目录
c000776e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007771:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0007774:	89 90 00 02 00 00    	mov    %edx,0x200(%eax)
/work/x86_os_my/fs/fs.c:280
	searched_record->file_type = FT_UNKNOWN;	// 初始值代表没找到，找到才有类型是文件或目录
c000777a:	8b 45 0c             	mov    0xc(%ebp),%eax
c000777d:	c7 80 04 02 00 00 00 	movl   $0x0,0x204(%eax)
c0007784:	00 00 00 
/work/x86_os_my/fs/fs.c:281
	uint32_t parent_inode_no = 0;  // 备份各层解析出来的路径，的父目录，的inode号
c0007787:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:283

	sub_path = path_parse(sub_path, name);
c000778e:	83 ec 08             	sub    $0x8,%esp
c0007791:	8d 45 c0             	lea    -0x40(%ebp),%eax
c0007794:	50                   	push   %eax
c0007795:	ff 75 f4             	pushl  -0xc(%ebp)
c0007798:	e8 04 fe ff ff       	call   c00075a1 <path_parse>
c000779d:	83 c4 10             	add    $0x10,%esp
c00077a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:284
	while (name[0]) {	   // 若第一个字符就是结束符,结束循环
c00077a3:	e9 0f 01 00 00       	jmp    c00078b7 <search_file+0x22d>
/work/x86_os_my/fs/fs.c:286
		/* 记录查找过的路径,但不能超过searched_path的长度512字节 */
		ASSERT(strlen(searched_record->searched_path) < 512);
c00077a8:	8b 45 0c             	mov    0xc(%ebp),%eax
c00077ab:	83 ec 0c             	sub    $0xc,%esp
c00077ae:	50                   	push   %eax
c00077af:	e8 db c3 ff ff       	call   c0003b8f <strlen>
c00077b4:	83 c4 10             	add    $0x10,%esp
c00077b7:	3d ff 01 00 00       	cmp    $0x1ff,%eax
c00077bc:	76 1c                	jbe    c00077da <search_file+0x150>
/work/x86_os_my/fs/fs.c:286 (discriminator 1)
c00077be:	68 18 e5 00 c0       	push   $0xc000e518
c00077c3:	68 34 eb 00 c0       	push   $0xc000eb34
c00077c8:	68 1e 01 00 00       	push   $0x11e
c00077cd:	68 55 e3 00 c0       	push   $0xc000e355
c00077d2:	e8 2a ad ff ff       	call   c0002501 <panic_spin>
c00077d7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:289

		/* 追加到已存在的父目录 */
		strcat(searched_record->searched_path, "/");
c00077da:	8b 45 0c             	mov    0xc(%ebp),%eax
c00077dd:	83 ec 08             	sub    $0x8,%esp
c00077e0:	68 cf e4 00 c0       	push   $0xc000e4cf
c00077e5:	50                   	push   %eax
c00077e6:	e8 1e c5 ff ff       	call   c0003d09 <strcat>
c00077eb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:290
		strcat(searched_record->searched_path, name);
c00077ee:	8b 45 0c             	mov    0xc(%ebp),%eax
c00077f1:	83 ec 08             	sub    $0x8,%esp
c00077f4:	8d 55 c0             	lea    -0x40(%ebp),%edx
c00077f7:	52                   	push   %edx
c00077f8:	50                   	push   %eax
c00077f9:	e8 0b c5 ff ff       	call   c0003d09 <strcat>
c00077fe:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:293

		/* 在所给的目录中查找目录项，找到后将目录项填入dir_e */
		if (false != search_dir_entry(cur_part, parent_dir, name, &dir_e)) {
c0007801:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c0007806:	8d 55 d0             	lea    -0x30(%ebp),%edx
c0007809:	52                   	push   %edx
c000780a:	8d 55 c0             	lea    -0x40(%ebp),%edx
c000780d:	52                   	push   %edx
c000780e:	ff 75 f0             	pushl  -0x10(%ebp)
c0007811:	50                   	push   %eax
c0007812:	e8 70 30 00 00       	call   c000a887 <search_dir_entry>
c0007817:	83 c4 10             	add    $0x10,%esp
c000781a:	85 c0                	test   %eax,%eax
c000781c:	0f 84 8e 00 00 00    	je     c00078b0 <search_file+0x226>
/work/x86_os_my/fs/fs.c:294
			memset(name, 0, MAX_FILE_NAME_LEN);
c0007822:	83 ec 04             	sub    $0x4,%esp
c0007825:	6a 10                	push   $0x10
c0007827:	6a 00                	push   $0x0
c0007829:	8d 45 c0             	lea    -0x40(%ebp),%eax
c000782c:	50                   	push   %eax
c000782d:	e8 d3 c1 ff ff       	call   c0003a05 <memset>
c0007832:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:296
			/* 若sub_path不等于NULL，也就是搜索未结束，继续拆分路径 */
			if (sub_path) {
c0007835:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0007839:	74 15                	je     c0007850 <search_file+0x1c6>
/work/x86_os_my/fs/fs.c:297
				sub_path = path_parse(sub_path, name);
c000783b:	83 ec 08             	sub    $0x8,%esp
c000783e:	8d 45 c0             	lea    -0x40(%ebp),%eax
c0007841:	50                   	push   %eax
c0007842:	ff 75 f4             	pushl  -0xc(%ebp)
c0007845:	e8 57 fd ff ff       	call   c00075a1 <path_parse>
c000784a:	83 c4 10             	add    $0x10,%esp
c000784d:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:300
			}

			if (FT_DIRECTORY == dir_e.f_type) {			// 如果被打开的是目录
c0007850:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0007853:	83 f8 02             	cmp    $0x2,%eax
c0007856:	75 3e                	jne    c0007896 <search_file+0x20c>
/work/x86_os_my/fs/fs.c:301
				parent_inode_no = parent_dir->inode->i_no;
c0007858:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000785b:	8b 00                	mov    (%eax),%eax
c000785d:	8b 00                	mov    (%eax),%eax
c000785f:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:302
				dir_close(parent_dir);
c0007862:	83 ec 0c             	sub    $0xc,%esp
c0007865:	ff 75 f0             	pushl  -0x10(%ebp)
c0007868:	e8 f2 31 00 00       	call   c000aa5f <dir_close>
c000786d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:304

				parent_dir = dir_open(cur_part, dir_e.i_no);
c0007870:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0007873:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c0007878:	83 ec 08             	sub    $0x8,%esp
c000787b:	52                   	push   %edx
c000787c:	50                   	push   %eax
c000787d:	e8 c5 2f 00 00       	call   c000a847 <dir_open>
c0007882:	83 c4 10             	add    $0x10,%esp
c0007885:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:305
				searched_record->parent_dir = parent_dir;	// 更新直接父目录
c0007888:	8b 45 0c             	mov    0xc(%ebp),%eax
c000788b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000788e:	89 90 00 02 00 00    	mov    %edx,0x200(%eax)
/work/x86_os_my/fs/fs.c:306
				continue;
c0007894:	eb 21                	jmp    c00078b7 <search_file+0x22d>
/work/x86_os_my/fs/fs.c:307
			} else if (FT_REGULAR == dir_e.f_type) {	// 若是普通文件
c0007896:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0007899:	83 f8 01             	cmp    $0x1,%eax
c000789c:	75 19                	jne    c00078b7 <search_file+0x22d>
/work/x86_os_my/fs/fs.c:312
				/* 如果搜索路径为 /a/b 但是目录下只有文件a 此时也会返回文件a的inode号【中间某个目录不存在】
				 * 由主调函数根据 searched_record.searched_path 判断："提供的 pathname 是否正确，是否处理完了"
				 * 【情况1】
				 */
				searched_record->file_type = FT_REGULAR;
c000789e:	8b 45 0c             	mov    0xc(%ebp),%eax
c00078a1:	c7 80 04 02 00 00 01 	movl   $0x1,0x204(%eax)
c00078a8:	00 00 00 
/work/x86_os_my/fs/fs.c:313
				return dir_e.i_no;
c00078ab:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00078ae:	eb 57                	jmp    c0007907 <search_file+0x27d>
/work/x86_os_my/fs/fs.c:321
			/* 找不到目录项时，要留着 parent_dir 不要关闭，
			 * 主调函数需要据此知道在哪个目录中创建文件，此时的 searched_record->parent_dir 指向父目录，主调函数负责关闭该目录
			 * 主调函数，创建新文件的话需要在 parent_dir 中创建
			 * 【情况2】
			 */
			return -1;
c00078b0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00078b5:	eb 50                	jmp    c0007907 <search_file+0x27d>
/work/x86_os_my/fs/fs.c:284
	searched_record->parent_dir = parent_dir;	// 直接父目录
	searched_record->file_type = FT_UNKNOWN;	// 初始值代表没找到，找到才有类型是文件或目录
	uint32_t parent_inode_no = 0;  // 备份各层解析出来的路径，的父目录，的inode号

	sub_path = path_parse(sub_path, name);
	while (name[0]) {	   // 若第一个字符就是结束符,结束循环
c00078b7:	0f b6 45 c0          	movzbl -0x40(%ebp),%eax
c00078bb:	84 c0                	test   %al,%al
c00078bd:	0f 85 e5 fe ff ff    	jne    c00077a8 <search_file+0x11e>
/work/x86_os_my/fs/fs.c:332
	 * 此时 searched_record-> parent_dir 是路径 pathname 中的最后一级目录 c，并不是倒数第二级的父目录 b
	 * 要保证，无论搜索目标是普通文件，还是目录，searched_record->parent_dir 中记录的都应该是父目录！
	 * 因此要关闭目录c，重新打开目录b
	 * 【情况3】
	 */
	dir_close(searched_record->parent_dir);
c00078c3:	8b 45 0c             	mov    0xc(%ebp),%eax
c00078c6:	8b 80 00 02 00 00    	mov    0x200(%eax),%eax
c00078cc:	83 ec 0c             	sub    $0xc,%esp
c00078cf:	50                   	push   %eax
c00078d0:	e8 8a 31 00 00       	call   c000aa5f <dir_close>
c00078d5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:333
	searched_record->parent_dir = dir_open(cur_part, parent_inode_no);
c00078d8:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c00078dd:	83 ec 08             	sub    $0x8,%esp
c00078e0:	ff 75 ec             	pushl  -0x14(%ebp)
c00078e3:	50                   	push   %eax
c00078e4:	e8 5e 2f 00 00       	call   c000a847 <dir_open>
c00078e9:	83 c4 10             	add    $0x10,%esp
c00078ec:	89 c2                	mov    %eax,%edx
c00078ee:	8b 45 0c             	mov    0xc(%ebp),%eax
c00078f1:	89 90 00 02 00 00    	mov    %edx,0x200(%eax)
/work/x86_os_my/fs/fs.c:334
	searched_record->file_type = FT_DIRECTORY;
c00078f7:	8b 45 0c             	mov    0xc(%ebp),%eax
c00078fa:	c7 80 04 02 00 00 02 	movl   $0x2,0x204(%eax)
c0007901:	00 00 00 
/work/x86_os_my/fs/fs.c:335
	return dir_e.i_no;	//目录c的inode号
c0007904:	8b 45 e0             	mov    -0x20(%ebp),%eax
/work/x86_os_my/fs/fs.c:336 (discriminator 1)
}
c0007907:	c9                   	leave  
c0007908:	c3                   	ret    

c0007909 <sys_open>:
sys_open():
/work/x86_os_my/fs/fs.c:343
/* 打开或创建文件成功后,返回文件描述符,否则返回-1
 * 对应 file.c 中的 file_create
 *
 * open(const char * pathname, (O_CREAT|O_WRONLY|O_TRUNC));
 */
int32_t sys_open(const char* pathname, uint8_t flags) {
c0007909:	55                   	push   %ebp
c000790a:	89 e5                	mov    %esp,%ebp
c000790c:	53                   	push   %ebx
c000790d:	81 ec 34 02 00 00    	sub    $0x234,%esp
c0007913:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007916:	88 85 d4 fd ff ff    	mov    %al,-0x22c(%ebp)
/work/x86_os_my/fs/fs.c:345
	/* 对目录要用dir_open,这里只有open文件 */
	if (pathname[strlen(pathname) - 1] == '/') {
c000791c:	83 ec 0c             	sub    $0xc,%esp
c000791f:	ff 75 08             	pushl  0x8(%ebp)
c0007922:	e8 68 c2 ff ff       	call   c0003b8f <strlen>
c0007927:	83 c4 10             	add    $0x10,%esp
c000792a:	8d 50 ff             	lea    -0x1(%eax),%edx
c000792d:	8b 45 08             	mov    0x8(%ebp),%eax
c0007930:	01 d0                	add    %edx,%eax
c0007932:	0f b6 00             	movzbl (%eax),%eax
c0007935:	3c 2f                	cmp    $0x2f,%al
c0007937:	75 1d                	jne    c0007956 <sys_open+0x4d>
/work/x86_os_my/fs/fs.c:346
		printk("can`t open a directory %s\n", pathname);
c0007939:	83 ec 08             	sub    $0x8,%esp
c000793c:	ff 75 08             	pushl  0x8(%ebp)
c000793f:	68 45 e5 00 c0       	push   $0xc000e545
c0007944:	e8 a5 f5 ff ff       	call   c0006eee <printk>
c0007949:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:347
		return -1;
c000794c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007951:	e9 10 02 00 00       	jmp    c0007b66 <sys_open+0x25d>
/work/x86_os_my/fs/fs.c:349
	}
	ASSERT(flags <= 7);
c0007956:	80 bd d4 fd ff ff 07 	cmpb   $0x7,-0x22c(%ebp)
c000795d:	76 1c                	jbe    c000797b <sys_open+0x72>
/work/x86_os_my/fs/fs.c:349 (discriminator 1)
c000795f:	68 60 e5 00 c0       	push   $0xc000e560
c0007964:	68 40 eb 00 c0       	push   $0xc000eb40
c0007969:	68 5d 01 00 00       	push   $0x15d
c000796e:	68 55 e3 00 c0       	push   $0xc000e355
c0007973:	e8 89 ab ff ff       	call   c0002501 <panic_spin>
c0007978:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:350
	int32_t fd = -1;	// 默认为找不到
c000797b:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:353

	struct path_search_record searched_record;
	memset(&searched_record, 0, sizeof(struct path_search_record));
c0007982:	83 ec 04             	sub    $0x4,%esp
c0007985:	68 08 02 00 00       	push   $0x208
c000798a:	6a 00                	push   $0x0
c000798c:	8d 85 dc fd ff ff    	lea    -0x224(%ebp),%eax
c0007992:	50                   	push   %eax
c0007993:	e8 6d c0 ff ff       	call   c0003a05 <memset>
c0007998:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:356

	/* 记录目录深度.帮助判断中间某个目录不存在的情况 */
	uint32_t pathname_depth = path_depth_cnt((char*)pathname);
c000799b:	83 ec 0c             	sub    $0xc,%esp
c000799e:	ff 75 08             	pushl  0x8(%ebp)
c00079a1:	e8 59 fc ff ff       	call   c00075ff <path_depth_cnt>
c00079a6:	83 c4 10             	add    $0x10,%esp
c00079a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:359

	/* 先检查文件是否存在 */
	int inode_no = search_file(pathname, &searched_record);
c00079ac:	83 ec 08             	sub    $0x8,%esp
c00079af:	8d 85 dc fd ff ff    	lea    -0x224(%ebp),%eax
c00079b5:	50                   	push   %eax
c00079b6:	ff 75 08             	pushl  0x8(%ebp)
c00079b9:	e8 cc fc ff ff       	call   c000768a <search_file>
c00079be:	83 c4 10             	add    $0x10,%esp
c00079c1:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:360
	bool found = (inode_no != -1 ? true : false);
c00079c4:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%ebp)
c00079c8:	0f 95 c0             	setne  %al
c00079cb:	0f b6 c0             	movzbl %al,%eax
c00079ce:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:362

	if (searched_record.file_type == FT_DIRECTORY) {
c00079d1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00079d4:	83 f8 02             	cmp    $0x2,%eax
c00079d7:	75 29                	jne    c0007a02 <sys_open+0xf9>
/work/x86_os_my/fs/fs.c:363
		printk("can`t open a direcotry with open(), use opendir() to instead\n");
c00079d9:	83 ec 0c             	sub    $0xc,%esp
c00079dc:	68 6c e5 00 c0       	push   $0xc000e56c
c00079e1:	e8 08 f5 ff ff       	call   c0006eee <printk>
c00079e6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:364
		dir_close(searched_record.parent_dir);	//主调函数负责关闭该目录
c00079e9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c00079ec:	83 ec 0c             	sub    $0xc,%esp
c00079ef:	50                   	push   %eax
c00079f0:	e8 6a 30 00 00       	call   c000aa5f <dir_close>
c00079f5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:365
		return -1;
c00079f8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00079fd:	e9 64 01 00 00       	jmp    c0007b66 <sys_open+0x25d>
/work/x86_os_my/fs/fs.c:368
	}

	uint32_t path_searched_depth = path_depth_cnt(searched_record.searched_path);
c0007a02:	83 ec 0c             	sub    $0xc,%esp
c0007a05:	8d 85 dc fd ff ff    	lea    -0x224(%ebp),%eax
c0007a0b:	50                   	push   %eax
c0007a0c:	e8 ee fb ff ff       	call   c00075ff <path_depth_cnt>
c0007a11:	83 c4 10             	add    $0x10,%esp
c0007a14:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/fs.c:372

	/* 先判断是否把pathname的各层目录都访问到了 */
	// 【search_file情况1】说明并没有访问到全部的路径,某个中间目录是不存在的【是一个同名的普通文件】
	if (pathname_depth != path_searched_depth) {
c0007a17:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0007a1a:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c0007a1d:	74 33                	je     c0007a52 <sys_open+0x149>
/work/x86_os_my/fs/fs.c:373
		printk("cannot access %s: Not a directory, subpath %s is`t exist\n",
c0007a1f:	83 ec 04             	sub    $0x4,%esp
c0007a22:	8d 85 dc fd ff ff    	lea    -0x224(%ebp),%eax
c0007a28:	50                   	push   %eax
c0007a29:	ff 75 08             	pushl  0x8(%ebp)
c0007a2c:	68 ac e5 00 c0       	push   $0xc000e5ac
c0007a31:	e8 b8 f4 ff ff       	call   c0006eee <printk>
c0007a36:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:375
			pathname, searched_record.searched_path);
		dir_close(searched_record.parent_dir);
c0007a39:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0007a3c:	83 ec 0c             	sub    $0xc,%esp
c0007a3f:	50                   	push   %eax
c0007a40:	e8 1a 30 00 00       	call   c000aa5f <dir_close>
c0007a45:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:376
		return -1;
c0007a48:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007a4d:	e9 14 01 00 00       	jmp    c0007b66 <sys_open+0x25d>
/work/x86_os_my/fs/fs.c:381
	}

	// 【search_file情况2】若是在最后一个路径上没找到
	// 并且此时也不是要创建文件,直接返回-1 */
	if (!found && !(flags & O_CREAT)) {
c0007a52:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0007a56:	75 56                	jne    c0007aae <sys_open+0x1a5>
/work/x86_os_my/fs/fs.c:381 (discriminator 1)
c0007a58:	0f b6 85 d4 fd ff ff 	movzbl -0x22c(%ebp),%eax
c0007a5f:	83 e0 04             	and    $0x4,%eax
c0007a62:	85 c0                	test   %eax,%eax
c0007a64:	75 48                	jne    c0007aae <sys_open+0x1a5>
/work/x86_os_my/fs/fs.c:383
		printk("in path %s, file %s is`t exist\n",
			searched_record.searched_path, (strrchr(searched_record.searched_path, '/') + 1));
c0007a66:	83 ec 08             	sub    $0x8,%esp
c0007a69:	6a 2f                	push   $0x2f
c0007a6b:	8d 85 dc fd ff ff    	lea    -0x224(%ebp),%eax
c0007a71:	50                   	push   %eax
c0007a72:	e8 34 c2 ff ff       	call   c0003cab <strrchr>
c0007a77:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:382
	}

	// 【search_file情况2】若是在最后一个路径上没找到
	// 并且此时也不是要创建文件,直接返回-1 */
	if (!found && !(flags & O_CREAT)) {
		printk("in path %s, file %s is`t exist\n",
c0007a7a:	83 c0 01             	add    $0x1,%eax
c0007a7d:	83 ec 04             	sub    $0x4,%esp
c0007a80:	50                   	push   %eax
c0007a81:	8d 85 dc fd ff ff    	lea    -0x224(%ebp),%eax
c0007a87:	50                   	push   %eax
c0007a88:	68 e8 e5 00 c0       	push   $0xc000e5e8
c0007a8d:	e8 5c f4 ff ff       	call   c0006eee <printk>
c0007a92:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:384
			searched_record.searched_path, (strrchr(searched_record.searched_path, '/') + 1));
		dir_close(searched_record.parent_dir);
c0007a95:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0007a98:	83 ec 0c             	sub    $0xc,%esp
c0007a9b:	50                   	push   %eax
c0007a9c:	e8 be 2f 00 00       	call   c000aa5f <dir_close>
c0007aa1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:385
		return -1;
c0007aa4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007aa9:	e9 b8 00 00 00       	jmp    c0007b66 <sys_open+0x25d>
/work/x86_os_my/fs/fs.c:386
	} else if (found && flags & O_CREAT) {	// 若要创建的文件已存在，相同目录下不可以有同名文件，返回-1
c0007aae:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0007ab2:	74 37                	je     c0007aeb <sys_open+0x1e2>
/work/x86_os_my/fs/fs.c:386 (discriminator 1)
c0007ab4:	0f b6 85 d4 fd ff ff 	movzbl -0x22c(%ebp),%eax
c0007abb:	83 e0 04             	and    $0x4,%eax
c0007abe:	85 c0                	test   %eax,%eax
c0007ac0:	74 29                	je     c0007aeb <sys_open+0x1e2>
/work/x86_os_my/fs/fs.c:387
		printk("%s has already exist!\n", pathname);
c0007ac2:	83 ec 08             	sub    $0x8,%esp
c0007ac5:	ff 75 08             	pushl  0x8(%ebp)
c0007ac8:	68 08 e6 00 c0       	push   $0xc000e608
c0007acd:	e8 1c f4 ff ff       	call   c0006eee <printk>
c0007ad2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:388
		dir_close(searched_record.parent_dir);
c0007ad5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0007ad8:	83 ec 0c             	sub    $0xc,%esp
c0007adb:	50                   	push   %eax
c0007adc:	e8 7e 2f 00 00       	call   c000aa5f <dir_close>
c0007ae1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:389
		return -1;
c0007ae4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007ae9:	eb 7b                	jmp    c0007b66 <sys_open+0x25d>
/work/x86_os_my/fs/fs.c:392
	}

	switch (flags & O_CREAT) {	// sys_open("xxx", O_CREAT|O_XXX)
c0007aeb:	0f b6 85 d4 fd ff ff 	movzbl -0x22c(%ebp),%eax
c0007af2:	83 e0 04             	and    $0x4,%eax
c0007af5:	83 f8 04             	cmp    $0x4,%eax
c0007af8:	75 4f                	jne    c0007b49 <sys_open+0x240>
/work/x86_os_my/fs/fs.c:394
		case O_CREAT:
		printk("creating file\n");
c0007afa:	83 ec 0c             	sub    $0xc,%esp
c0007afd:	68 1f e6 00 c0       	push   $0xc000e61f
c0007b02:	e8 e7 f3 ff ff       	call   c0006eee <printk>
c0007b07:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:396
		// 【search_file情况3】主调函数用到此目录，在该目录下创建文件
		fd = file_create(searched_record.parent_dir, (strrchr(pathname, '/') + 1), flags);
c0007b0a:	0f b6 9d d4 fd ff ff 	movzbl -0x22c(%ebp),%ebx
c0007b11:	83 ec 08             	sub    $0x8,%esp
c0007b14:	6a 2f                	push   $0x2f
c0007b16:	ff 75 08             	pushl  0x8(%ebp)
c0007b19:	e8 8d c1 ff ff       	call   c0003cab <strrchr>
c0007b1e:	83 c4 10             	add    $0x10,%esp
c0007b21:	8d 50 01             	lea    0x1(%eax),%edx
c0007b24:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0007b27:	83 ec 04             	sub    $0x4,%esp
c0007b2a:	53                   	push   %ebx
c0007b2b:	52                   	push   %edx
c0007b2c:	50                   	push   %eax
c0007b2d:	e8 8a 1d 00 00       	call   c00098bc <file_create>
c0007b32:	83 c4 10             	add    $0x10,%esp
c0007b35:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:397
		dir_close(searched_record.parent_dir);
c0007b38:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0007b3b:	83 ec 0c             	sub    $0xc,%esp
c0007b3e:	50                   	push   %eax
c0007b3f:	e8 1b 2f 00 00       	call   c000aa5f <dir_close>
c0007b44:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:398
		break;
c0007b47:	eb 1a                	jmp    c0007b63 <sys_open+0x25a>
/work/x86_os_my/fs/fs.c:402

		default:
		/* 其余情况均为打开已存在文件: O_RDONLY,O_WRONLY,O_RDWR */
		fd = file_open(inode_no, flags);
c0007b49:	0f b6 95 d4 fd ff ff 	movzbl -0x22c(%ebp),%edx
c0007b50:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0007b53:	83 ec 08             	sub    $0x8,%esp
c0007b56:	52                   	push   %edx
c0007b57:	50                   	push   %eax
c0007b58:	e8 21 20 00 00       	call   c0009b7e <file_open>
c0007b5d:	83 c4 10             	add    $0x10,%esp
c0007b60:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:407
	}

	/* 此fd是指任务pcb->fd_table数组中的元素下标,
	 * 并不是指全局file_table中的下标 */
	return fd;
c0007b63:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:408 (discriminator 1)
}
c0007b66:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0007b69:	c9                   	leave  
c0007b6a:	c3                   	ret    

c0007b6b <fd_local2global>:
fd_local2global():
/work/x86_os_my/fs/fs.c:411

/* 将文件描述符转化为文件表的下标 */
static uint32_t fd_local2global(uint32_t local_fd) {
c0007b6b:	55                   	push   %ebp
c0007b6c:	89 e5                	mov    %esp,%ebp
c0007b6e:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/fs.c:412
	struct task_struct* cur = running_thread();
c0007b71:	e8 76 c2 ff ff       	call   c0003dec <running_thread>
c0007b76:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:413
	int32_t global_fd = cur->fd_table[local_fd];
c0007b79:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0007b7c:	8b 55 08             	mov    0x8(%ebp),%edx
c0007b7f:	83 c2 08             	add    $0x8,%edx
c0007b82:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
c0007b86:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:414
	ASSERT(global_fd >= 0 && global_fd < MAX_FILE_OPEN);
c0007b89:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0007b8d:	78 06                	js     c0007b95 <fd_local2global+0x2a>
/work/x86_os_my/fs/fs.c:414 (discriminator 1)
c0007b8f:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c0007b93:	7e 1c                	jle    c0007bb1 <fd_local2global+0x46>
/work/x86_os_my/fs/fs.c:414 (discriminator 3)
c0007b95:	68 30 e6 00 c0       	push   $0xc000e630
c0007b9a:	68 4c eb 00 c0       	push   $0xc000eb4c
c0007b9f:	68 9e 01 00 00       	push   $0x19e
c0007ba4:	68 55 e3 00 c0       	push   $0xc000e355
c0007ba9:	e8 53 a9 ff ff       	call   c0002501 <panic_spin>
c0007bae:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:415
	return (uint32_t)global_fd;
c0007bb1:	8b 45 f0             	mov    -0x10(%ebp),%eax
/work/x86_os_my/fs/fs.c:416
}
c0007bb4:	c9                   	leave  
c0007bb5:	c3                   	ret    

c0007bb6 <sys_close>:
sys_close():
/work/x86_os_my/fs/fs.c:419

/* 关闭文件描述符fd指向的文件,成功返回0,否则返回-1 */
int32_t sys_close(int32_t fd) {
c0007bb6:	55                   	push   %ebp
c0007bb7:	89 e5                	mov    %esp,%ebp
c0007bb9:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/fs.c:420
	int32_t ret = -1;   // 返回值默认为-1,即失败
c0007bbc:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:421
	if (fd > 2) {
c0007bc3:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c0007bc7:	7e 47                	jle    c0007c10 <sys_close+0x5a>
/work/x86_os_my/fs/fs.c:422
		uint32_t _fd = fd_local2global(fd);
c0007bc9:	8b 45 08             	mov    0x8(%ebp),%eax
c0007bcc:	83 ec 0c             	sub    $0xc,%esp
c0007bcf:	50                   	push   %eax
c0007bd0:	e8 96 ff ff ff       	call   c0007b6b <fd_local2global>
c0007bd5:	83 c4 10             	add    $0x10,%esp
c0007bd8:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:423
		ret = file_close(&file_table[_fd]);
c0007bdb:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0007bde:	89 d0                	mov    %edx,%eax
c0007be0:	01 c0                	add    %eax,%eax
c0007be2:	01 d0                	add    %edx,%eax
c0007be4:	c1 e0 02             	shl    $0x2,%eax
c0007be7:	05 e0 4a 01 c0       	add    $0xc0014ae0,%eax
c0007bec:	83 ec 0c             	sub    $0xc,%esp
c0007bef:	50                   	push   %eax
c0007bf0:	e8 a2 20 00 00       	call   c0009c97 <file_close>
c0007bf5:	83 c4 10             	add    $0x10,%esp
c0007bf8:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:424
		running_thread()->fd_table[fd] = -1; // 使该文件描述符位可用
c0007bfb:	e8 ec c1 ff ff       	call   c0003dec <running_thread>
c0007c00:	89 c2                	mov    %eax,%edx
c0007c02:	8b 45 08             	mov    0x8(%ebp),%eax
c0007c05:	83 c0 08             	add    $0x8,%eax
c0007c08:	c7 44 82 04 ff ff ff 	movl   $0xffffffff,0x4(%edx,%eax,4)
c0007c0f:	ff 
/work/x86_os_my/fs/fs.c:426
	}
	return ret;
c0007c10:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:427
}
c0007c13:	c9                   	leave  
c0007c14:	c3                   	ret    

c0007c15 <sys_write>:
sys_write():
/work/x86_os_my/fs/fs.c:430

/* 将buf中连续count个字节写入文件描述符fd,成功则返回写入的字节数,失败返回-1 */
int32_t sys_write(int32_t fd, const void* buf, uint32_t count) {
c0007c15:	55                   	push   %ebp
c0007c16:	89 e5                	mov    %esp,%ebp
c0007c18:	57                   	push   %edi
c0007c19:	81 ec 14 04 00 00    	sub    $0x414,%esp
/work/x86_os_my/fs/fs.c:431
   if (fd < 0) {
c0007c1f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0007c23:	79 1a                	jns    c0007c3f <sys_write+0x2a>
/work/x86_os_my/fs/fs.c:432
      printk("sys_write: fd error\n");
c0007c25:	83 ec 0c             	sub    $0xc,%esp
c0007c28:	68 5c e6 00 c0       	push   $0xc000e65c
c0007c2d:	e8 bc f2 ff ff       	call   c0006eee <printk>
c0007c32:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:433
      return -1;
c0007c35:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007c3a:	e9 ba 00 00 00       	jmp    c0007cf9 <sys_write+0xe4>
/work/x86_os_my/fs/fs.c:435
   }
   if (fd == stdout_no) {
c0007c3f:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c0007c43:	75 43                	jne    c0007c88 <sys_write+0x73>
/work/x86_os_my/fs/fs.c:436
      char tmp_buf[1024] = {0};
c0007c45:	8d 95 ec fb ff ff    	lea    -0x414(%ebp),%edx
c0007c4b:	b8 00 00 00 00       	mov    $0x0,%eax
c0007c50:	b9 00 01 00 00       	mov    $0x100,%ecx
c0007c55:	89 d7                	mov    %edx,%edi
c0007c57:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/fs/fs.c:437
      memcpy(tmp_buf, buf, count);
c0007c59:	83 ec 04             	sub    $0x4,%esp
c0007c5c:	ff 75 10             	pushl  0x10(%ebp)
c0007c5f:	ff 75 0c             	pushl  0xc(%ebp)
c0007c62:	8d 85 ec fb ff ff    	lea    -0x414(%ebp),%eax
c0007c68:	50                   	push   %eax
c0007c69:	e8 e9 bd ff ff       	call   c0003a57 <memcpy>
c0007c6e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:438
      console_put_str(tmp_buf);
c0007c71:	83 ec 0c             	sub    $0xc,%esp
c0007c74:	8d 85 ec fb ff ff    	lea    -0x414(%ebp),%eax
c0007c7a:	50                   	push   %eax
c0007c7b:	e8 b0 cf ff ff       	call   c0004c30 <console_put_str>
c0007c80:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:439
      return count;
c0007c83:	8b 45 10             	mov    0x10(%ebp),%eax
c0007c86:	eb 71                	jmp    c0007cf9 <sys_write+0xe4>
/work/x86_os_my/fs/fs.c:441
   }
   uint32_t _fd = fd_local2global(fd);
c0007c88:	8b 45 08             	mov    0x8(%ebp),%eax
c0007c8b:	83 ec 0c             	sub    $0xc,%esp
c0007c8e:	50                   	push   %eax
c0007c8f:	e8 d7 fe ff ff       	call   c0007b6b <fd_local2global>
c0007c94:	83 c4 10             	add    $0x10,%esp
c0007c97:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:442
   struct file* wr_file = &file_table[_fd];
c0007c9a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0007c9d:	89 d0                	mov    %edx,%eax
c0007c9f:	01 c0                	add    %eax,%eax
c0007ca1:	01 d0                	add    %edx,%eax
c0007ca3:	c1 e0 02             	shl    $0x2,%eax
c0007ca6:	05 e0 4a 01 c0       	add    $0xc0014ae0,%eax
c0007cab:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:443
   if (wr_file->fd_flag & O_WRONLY || wr_file->fd_flag & O_RDWR) {
c0007cae:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0007cb1:	8b 40 04             	mov    0x4(%eax),%eax
c0007cb4:	83 e0 01             	and    $0x1,%eax
c0007cb7:	85 c0                	test   %eax,%eax
c0007cb9:	75 0d                	jne    c0007cc8 <sys_write+0xb3>
/work/x86_os_my/fs/fs.c:443 (discriminator 1)
c0007cbb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0007cbe:	8b 40 04             	mov    0x4(%eax),%eax
c0007cc1:	83 e0 02             	and    $0x2,%eax
c0007cc4:	85 c0                	test   %eax,%eax
c0007cc6:	74 1c                	je     c0007ce4 <sys_write+0xcf>
/work/x86_os_my/fs/fs.c:444
      uint32_t bytes_written  = file_write(wr_file, buf, count);
c0007cc8:	83 ec 04             	sub    $0x4,%esp
c0007ccb:	ff 75 10             	pushl  0x10(%ebp)
c0007cce:	ff 75 0c             	pushl  0xc(%ebp)
c0007cd1:	ff 75 f0             	pushl  -0x10(%ebp)
c0007cd4:	e8 01 20 00 00       	call   c0009cda <file_write>
c0007cd9:	83 c4 10             	add    $0x10,%esp
c0007cdc:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:445
      return bytes_written;
c0007cdf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0007ce2:	eb 15                	jmp    c0007cf9 <sys_write+0xe4>
/work/x86_os_my/fs/fs.c:447
   } else {
      console_put_str("sys_write: not allowed to write file without flag O_RDWR or O_WRONLY\n");
c0007ce4:	83 ec 0c             	sub    $0xc,%esp
c0007ce7:	68 74 e6 00 c0       	push   $0xc000e674
c0007cec:	e8 3f cf ff ff       	call   c0004c30 <console_put_str>
c0007cf1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:448
      return -1;
c0007cf4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
/work/x86_os_my/fs/fs.c:450 (discriminator 1)
   }
}
c0007cf9:	8b 7d fc             	mov    -0x4(%ebp),%edi
c0007cfc:	c9                   	leave  
c0007cfd:	c3                   	ret    

c0007cfe <sys_read>:
sys_read():
/work/x86_os_my/fs/fs.c:453

/* 从文件描述符fd指向的文件中读取count个字节到buf,若成功则返回读出的字节数,到文件尾则返回-1 */
int32_t sys_read(int32_t fd, void* buf, uint32_t count) {
c0007cfe:	55                   	push   %ebp
c0007cff:	89 e5                	mov    %esp,%ebp
c0007d01:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/fs.c:454
	ASSERT(buf != NULL);
c0007d04:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0007d08:	75 1c                	jne    c0007d26 <sys_read+0x28>
/work/x86_os_my/fs/fs.c:454 (discriminator 1)
c0007d0a:	68 ba e6 00 c0       	push   $0xc000e6ba
c0007d0f:	68 5c eb 00 c0       	push   $0xc000eb5c
c0007d14:	68 c6 01 00 00       	push   $0x1c6
c0007d19:	68 55 e3 00 c0       	push   $0xc000e355
c0007d1e:	e8 de a7 ff ff       	call   c0002501 <panic_spin>
c0007d23:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:455
	int32_t ret = -1;
c0007d26:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:456
	if (fd < 0 || fd == stdout_no || fd == stderr_no) {
c0007d2d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0007d31:	78 0c                	js     c0007d3f <sys_read+0x41>
/work/x86_os_my/fs/fs.c:456 (discriminator 1)
c0007d33:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c0007d37:	74 06                	je     c0007d3f <sys_read+0x41>
/work/x86_os_my/fs/fs.c:456 (discriminator 2)
c0007d39:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c0007d3d:	75 15                	jne    c0007d54 <sys_read+0x56>
/work/x86_os_my/fs/fs.c:457
		printk("sys_read: fd error\n");
c0007d3f:	83 ec 0c             	sub    $0xc,%esp
c0007d42:	68 c6 e6 00 c0       	push   $0xc000e6c6
c0007d47:	e8 a2 f1 ff ff       	call   c0006eee <printk>
c0007d4c:	83 c4 10             	add    $0x10,%esp
c0007d4f:	e9 89 00 00 00       	jmp    c0007ddd <sys_read+0xdf>
/work/x86_os_my/fs/fs.c:458
	} else if (fd == stdin_no) {
c0007d54:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0007d58:	75 4b                	jne    c0007da5 <sys_read+0xa7>
/work/x86_os_my/fs/fs.c:459
		char* buffer = buf;
c0007d5a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007d5d:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:460
		uint32_t bytes_read = 0;
c0007d60:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:461
		while (bytes_read < count) {
c0007d67:	eb 1f                	jmp    c0007d88 <sys_read+0x8a>
/work/x86_os_my/fs/fs.c:462
			*buffer = ioq_getchar(&kbd_buf);
c0007d69:	83 ec 0c             	sub    $0xc,%esp
c0007d6c:	68 e0 3c 01 c0       	push   $0xc0013ce0
c0007d71:	e8 b1 d6 ff ff       	call   c0005427 <ioq_getchar>
c0007d76:	83 c4 10             	add    $0x10,%esp
c0007d79:	89 c2                	mov    %eax,%edx
c0007d7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0007d7e:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/fs/fs.c:463
			bytes_read++;
c0007d80:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:464
			buffer++;
c0007d84:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:461
	if (fd < 0 || fd == stdout_no || fd == stderr_no) {
		printk("sys_read: fd error\n");
	} else if (fd == stdin_no) {
		char* buffer = buf;
		uint32_t bytes_read = 0;
		while (bytes_read < count) {
c0007d88:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0007d8b:	3b 45 10             	cmp    0x10(%ebp),%eax
c0007d8e:	72 d9                	jb     c0007d69 <sys_read+0x6b>
/work/x86_os_my/fs/fs.c:466
			*buffer = ioq_getchar(&kbd_buf);
			bytes_read++;
			buffer++;
		}
		ret = (bytes_read == 0 ? -1 : (int32_t)bytes_read);
c0007d90:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0007d94:	74 05                	je     c0007d9b <sys_read+0x9d>
/work/x86_os_my/fs/fs.c:466 (discriminator 1)
c0007d96:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0007d99:	eb 05                	jmp    c0007da0 <sys_read+0xa2>
/work/x86_os_my/fs/fs.c:466 (discriminator 2)
c0007d9b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
/work/x86_os_my/fs/fs.c:466 (discriminator 4)
c0007da0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0007da3:	eb 38                	jmp    c0007ddd <sys_read+0xdf>
/work/x86_os_my/fs/fs.c:468
	} else {
		uint32_t _fd = fd_local2global(fd);
c0007da5:	8b 45 08             	mov    0x8(%ebp),%eax
c0007da8:	83 ec 0c             	sub    $0xc,%esp
c0007dab:	50                   	push   %eax
c0007dac:	e8 ba fd ff ff       	call   c0007b6b <fd_local2global>
c0007db1:	83 c4 10             	add    $0x10,%esp
c0007db4:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:469
		ret = file_read(&file_table[_fd], buf, count);
c0007db7:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0007dba:	89 d0                	mov    %edx,%eax
c0007dbc:	01 c0                	add    %eax,%eax
c0007dbe:	01 d0                	add    %edx,%eax
c0007dc0:	c1 e0 02             	shl    $0x2,%eax
c0007dc3:	05 e0 4a 01 c0       	add    $0xc0014ae0,%eax
c0007dc8:	83 ec 04             	sub    $0x4,%esp
c0007dcb:	ff 75 10             	pushl  0x10(%ebp)
c0007dce:	ff 75 0c             	pushl  0xc(%ebp)
c0007dd1:	50                   	push   %eax
c0007dd2:	e8 97 26 00 00       	call   c000a46e <file_read>
c0007dd7:	83 c4 10             	add    $0x10,%esp
c0007dda:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:471
	}
	return ret;
c0007ddd:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:472
}
c0007de0:	c9                   	leave  
c0007de1:	c3                   	ret    

c0007de2 <sys_lseek>:
sys_lseek():
/work/x86_os_my/fs/fs.c:476


/* 重置用于文件读写指针,成功时返回新的偏移量,出错时返回-1 */
int32_t sys_lseek(int32_t fd, int32_t offset, uint8_t whence) {
c0007de2:	55                   	push   %ebp
c0007de3:	89 e5                	mov    %esp,%ebp
c0007de5:	83 ec 28             	sub    $0x28,%esp
c0007de8:	8b 45 10             	mov    0x10(%ebp),%eax
c0007deb:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/fs/fs.c:477
	if (fd < 0) {
c0007dee:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0007df2:	79 1a                	jns    c0007e0e <sys_lseek+0x2c>
/work/x86_os_my/fs/fs.c:478
		printk("sys_lseek: fd error\n");
c0007df4:	83 ec 0c             	sub    $0xc,%esp
c0007df7:	68 da e6 00 c0       	push   $0xc000e6da
c0007dfc:	e8 ed f0 ff ff       	call   c0006eee <printk>
c0007e01:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:479
		return -1;
c0007e04:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007e09:	e9 bd 00 00 00       	jmp    c0007ecb <sys_lseek+0xe9>
/work/x86_os_my/fs/fs.c:481
	}
	ASSERT(whence > 0 && whence < 4);
c0007e0e:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c0007e12:	74 06                	je     c0007e1a <sys_lseek+0x38>
/work/x86_os_my/fs/fs.c:481 (discriminator 1)
c0007e14:	80 7d e4 03          	cmpb   $0x3,-0x1c(%ebp)
c0007e18:	76 1c                	jbe    c0007e36 <sys_lseek+0x54>
/work/x86_os_my/fs/fs.c:481 (discriminator 3)
c0007e1a:	68 ef e6 00 c0       	push   $0xc000e6ef
c0007e1f:	68 68 eb 00 c0       	push   $0xc000eb68
c0007e24:	68 e1 01 00 00       	push   $0x1e1
c0007e29:	68 55 e3 00 c0       	push   $0xc000e355
c0007e2e:	e8 ce a6 ff ff       	call   c0002501 <panic_spin>
c0007e33:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:482
	uint32_t _fd = fd_local2global(fd);
c0007e36:	8b 45 08             	mov    0x8(%ebp),%eax
c0007e39:	83 ec 0c             	sub    $0xc,%esp
c0007e3c:	50                   	push   %eax
c0007e3d:	e8 29 fd ff ff       	call   c0007b6b <fd_local2global>
c0007e42:	83 c4 10             	add    $0x10,%esp
c0007e45:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:483
	struct file* pf = &file_table[_fd];
c0007e48:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0007e4b:	89 d0                	mov    %edx,%eax
c0007e4d:	01 c0                	add    %eax,%eax
c0007e4f:	01 d0                	add    %edx,%eax
c0007e51:	c1 e0 02             	shl    $0x2,%eax
c0007e54:	05 e0 4a 01 c0       	add    $0xc0014ae0,%eax
c0007e59:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:484
	int32_t new_pos = 0;	//新的偏移量必须位于文件大小之内
c0007e5c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:485
	int32_t file_size = (int32_t)pf->fd_inode->i_size;
c0007e63:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0007e66:	8b 40 08             	mov    0x8(%eax),%eax
c0007e69:	8b 40 04             	mov    0x4(%eax),%eax
c0007e6c:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:486
	switch (whence) {
c0007e6f:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0007e73:	83 f8 02             	cmp    $0x2,%eax
c0007e76:	74 12                	je     c0007e8a <sys_lseek+0xa8>
c0007e78:	83 f8 03             	cmp    $0x3,%eax
c0007e7b:	74 1e                	je     c0007e9b <sys_lseek+0xb9>
c0007e7d:	83 f8 01             	cmp    $0x1,%eax
c0007e80:	75 24                	jne    c0007ea6 <sys_lseek+0xc4>
/work/x86_os_my/fs/fs.c:489
		/* SEEK_SET 新的读写位置是相对于文件开头再增加offset个位移量 */
		case SEEK_SET:
		new_pos = offset;
c0007e82:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007e85:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:490
		break;
c0007e88:	eb 1c                	jmp    c0007ea6 <sys_lseek+0xc4>
/work/x86_os_my/fs/fs.c:494

		/* SEEK_CUR 新的读写位置是相对于当前的位置增加offset个位移量 */
		case SEEK_CUR:	// offse可正可负
		new_pos = (int32_t)pf->fd_pos + offset;
c0007e8a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0007e8d:	8b 00                	mov    (%eax),%eax
c0007e8f:	89 c2                	mov    %eax,%edx
c0007e91:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007e94:	01 d0                	add    %edx,%eax
c0007e96:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:495
		break;
c0007e99:	eb 0b                	jmp    c0007ea6 <sys_lseek+0xc4>
/work/x86_os_my/fs/fs.c:499

		/* SEEK_END 新的读写位置是相对于文件尺寸再增加offset个位移量 */
		case SEEK_END:	// 此情况下,offset应该为负值
		new_pos = file_size + offset;
c0007e9b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0007e9e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007ea1:	01 d0                	add    %edx,%eax
c0007ea3:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:501
	}
	if (new_pos < 0 || new_pos > (file_size - 1)) {
c0007ea6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0007eaa:	78 0b                	js     c0007eb7 <sys_lseek+0xd5>
/work/x86_os_my/fs/fs.c:501 (discriminator 1)
c0007eac:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0007eaf:	83 e8 01             	sub    $0x1,%eax
c0007eb2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0007eb5:	7d 07                	jge    c0007ebe <sys_lseek+0xdc>
/work/x86_os_my/fs/fs.c:502
		return -1;
c0007eb7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007ebc:	eb 0d                	jmp    c0007ecb <sys_lseek+0xe9>
/work/x86_os_my/fs/fs.c:504
	}
	pf->fd_pos = new_pos;
c0007ebe:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0007ec1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0007ec4:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/fs/fs.c:505
	return pf->fd_pos;
c0007ec6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0007ec9:	8b 00                	mov    (%eax),%eax
/work/x86_os_my/fs/fs.c:506
}
c0007ecb:	c9                   	leave  
c0007ecc:	c3                   	ret    

c0007ecd <sys_unlink>:
sys_unlink():
/work/x86_os_my/fs/fs.c:510

/* 删除文件(非目录),成功返回0,失败返回-1 */
// 全局变量 file_table 定义在 file.h
int32_t sys_unlink(const char* pathname) {
c0007ecd:	55                   	push   %ebp
c0007ece:	89 e5                	mov    %esp,%ebp
c0007ed0:	81 ec 28 02 00 00    	sub    $0x228,%esp
/work/x86_os_my/fs/fs.c:511
	ASSERT(strlen(pathname) < MAX_PATH_LEN);
c0007ed6:	83 ec 0c             	sub    $0xc,%esp
c0007ed9:	ff 75 08             	pushl  0x8(%ebp)
c0007edc:	e8 ae bc ff ff       	call   c0003b8f <strlen>
c0007ee1:	83 c4 10             	add    $0x10,%esp
c0007ee4:	3d ff 01 00 00       	cmp    $0x1ff,%eax
c0007ee9:	76 1c                	jbe    c0007f07 <sys_unlink+0x3a>
/work/x86_os_my/fs/fs.c:511 (discriminator 1)
c0007eeb:	68 08 e7 00 c0       	push   $0xc000e708
c0007ef0:	68 74 eb 00 c0       	push   $0xc000eb74
c0007ef5:	68 ff 01 00 00       	push   $0x1ff
c0007efa:	68 55 e3 00 c0       	push   $0xc000e355
c0007eff:	e8 fd a5 ff ff       	call   c0002501 <panic_spin>
c0007f04:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:515

	/* 先检查待删除的文件是否存在 */
	struct path_search_record searched_record;
	memset(&searched_record, 0, sizeof(struct path_search_record));
c0007f07:	83 ec 04             	sub    $0x4,%esp
c0007f0a:	68 08 02 00 00       	push   $0x208
c0007f0f:	6a 00                	push   $0x0
c0007f11:	8d 85 e0 fd ff ff    	lea    -0x220(%ebp),%eax
c0007f17:	50                   	push   %eax
c0007f18:	e8 e8 ba ff ff       	call   c0003a05 <memset>
c0007f1d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:516
	int inode_no = search_file(pathname, &searched_record);
c0007f20:	83 ec 08             	sub    $0x8,%esp
c0007f23:	8d 85 e0 fd ff ff    	lea    -0x220(%ebp),%eax
c0007f29:	50                   	push   %eax
c0007f2a:	ff 75 08             	pushl  0x8(%ebp)
c0007f2d:	e8 58 f7 ff ff       	call   c000768a <search_file>
c0007f32:	83 c4 10             	add    $0x10,%esp
c0007f35:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:517
	ASSERT(inode_no != 0);
c0007f38:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0007f3c:	75 1c                	jne    c0007f5a <sys_unlink+0x8d>
/work/x86_os_my/fs/fs.c:517 (discriminator 1)
c0007f3e:	68 28 e7 00 c0       	push   $0xc000e728
c0007f43:	68 74 eb 00 c0       	push   $0xc000eb74
c0007f48:	68 05 02 00 00       	push   $0x205
c0007f4d:	68 55 e3 00 c0       	push   $0xc000e355
c0007f52:	e8 aa a5 ff ff       	call   c0002501 <panic_spin>
c0007f57:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:518
	if (inode_no == -1) {
c0007f5a:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c0007f5e:	75 2c                	jne    c0007f8c <sys_unlink+0xbf>
/work/x86_os_my/fs/fs.c:519
		printk("file %s not found!\n", pathname);
c0007f60:	83 ec 08             	sub    $0x8,%esp
c0007f63:	ff 75 08             	pushl  0x8(%ebp)
c0007f66:	68 36 e7 00 c0       	push   $0xc000e736
c0007f6b:	e8 7e ef ff ff       	call   c0006eee <printk>
c0007f70:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:520
		dir_close(searched_record.parent_dir);
c0007f73:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0007f76:	83 ec 0c             	sub    $0xc,%esp
c0007f79:	50                   	push   %eax
c0007f7a:	e8 e0 2a 00 00       	call   c000aa5f <dir_close>
c0007f7f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:521
		return -1;
c0007f82:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007f87:	e9 62 01 00 00       	jmp    c00080ee <sys_unlink+0x221>
/work/x86_os_my/fs/fs.c:523
	}
	if (searched_record.file_type == FT_DIRECTORY) {	//存在同名的目录，而不是文件
c0007f8c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0007f8f:	83 f8 02             	cmp    $0x2,%eax
c0007f92:	75 29                	jne    c0007fbd <sys_unlink+0xf0>
/work/x86_os_my/fs/fs.c:524
		printk("can`t delete a direcotry with unlink(), use rmdir() to instead\n");
c0007f94:	83 ec 0c             	sub    $0xc,%esp
c0007f97:	68 4c e7 00 c0       	push   $0xc000e74c
c0007f9c:	e8 4d ef ff ff       	call   c0006eee <printk>
c0007fa1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:525
		dir_close(searched_record.parent_dir);
c0007fa4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0007fa7:	83 ec 0c             	sub    $0xc,%esp
c0007faa:	50                   	push   %eax
c0007fab:	e8 af 2a 00 00       	call   c000aa5f <dir_close>
c0007fb0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:526
		return -1;
c0007fb3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007fb8:	e9 31 01 00 00       	jmp    c00080ee <sys_unlink+0x221>
/work/x86_os_my/fs/fs.c:530
	}

	/* 检查是否在已打开文件列表(文件表)中 */
	uint32_t file_idx = 0;
c0007fbd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:531
	while (file_idx < MAX_FILE_OPEN) {
c0007fc4:	eb 37                	jmp    c0007ffd <sys_unlink+0x130>
/work/x86_os_my/fs/fs.c:532
		if (file_table[file_idx].fd_inode != NULL && (uint32_t)inode_no == file_table[file_idx].fd_inode->i_no) {
c0007fc6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0007fc9:	89 d0                	mov    %edx,%eax
c0007fcb:	01 c0                	add    %eax,%eax
c0007fcd:	01 d0                	add    %edx,%eax
c0007fcf:	c1 e0 02             	shl    $0x2,%eax
c0007fd2:	05 e8 4a 01 c0       	add    $0xc0014ae8,%eax
c0007fd7:	8b 00                	mov    (%eax),%eax
c0007fd9:	85 c0                	test   %eax,%eax
c0007fdb:	74 1c                	je     c0007ff9 <sys_unlink+0x12c>
/work/x86_os_my/fs/fs.c:532 (discriminator 1)
c0007fdd:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0007fe0:	89 d0                	mov    %edx,%eax
c0007fe2:	01 c0                	add    %eax,%eax
c0007fe4:	01 d0                	add    %edx,%eax
c0007fe6:	c1 e0 02             	shl    $0x2,%eax
c0007fe9:	05 e8 4a 01 c0       	add    $0xc0014ae8,%eax
c0007fee:	8b 00                	mov    (%eax),%eax
c0007ff0:	8b 10                	mov    (%eax),%edx
c0007ff2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0007ff5:	39 c2                	cmp    %eax,%edx
c0007ff7:	74 0c                	je     c0008005 <sys_unlink+0x138>
/work/x86_os_my/fs/fs.c:535
			break;
		}
		file_idx++;
c0007ff9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:531
		return -1;
	}

	/* 检查是否在已打开文件列表(文件表)中 */
	uint32_t file_idx = 0;
	while (file_idx < MAX_FILE_OPEN) {
c0007ffd:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c0008001:	76 c3                	jbe    c0007fc6 <sys_unlink+0xf9>
c0008003:	eb 01                	jmp    c0008006 <sys_unlink+0x139>
/work/x86_os_my/fs/fs.c:533
		if (file_table[file_idx].fd_inode != NULL && (uint32_t)inode_no == file_table[file_idx].fd_inode->i_no) {
			break;
c0008005:	90                   	nop
/work/x86_os_my/fs/fs.c:537
		}
		file_idx++;
	}
	if (file_idx < MAX_FILE_OPEN) {
c0008006:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c000800a:	77 2c                	ja     c0008038 <sys_unlink+0x16b>
/work/x86_os_my/fs/fs.c:538
		dir_close(searched_record.parent_dir);
c000800c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000800f:	83 ec 0c             	sub    $0xc,%esp
c0008012:	50                   	push   %eax
c0008013:	e8 47 2a 00 00       	call   c000aa5f <dir_close>
c0008018:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:539
		printk("file %s is in use, not allow to delete!\n", pathname);
c000801b:	83 ec 08             	sub    $0x8,%esp
c000801e:	ff 75 08             	pushl  0x8(%ebp)
c0008021:	68 8c e7 00 c0       	push   $0xc000e78c
c0008026:	e8 c3 ee ff ff       	call   c0006eee <printk>
c000802b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:540
		return -1;
c000802e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0008033:	e9 b6 00 00 00       	jmp    c00080ee <sys_unlink+0x221>
/work/x86_os_my/fs/fs.c:542
	}
	ASSERT(file_idx == MAX_FILE_OPEN);
c0008038:	83 7d f4 20          	cmpl   $0x20,-0xc(%ebp)
c000803c:	74 1c                	je     c000805a <sys_unlink+0x18d>
/work/x86_os_my/fs/fs.c:542 (discriminator 1)
c000803e:	68 b5 e7 00 c0       	push   $0xc000e7b5
c0008043:	68 74 eb 00 c0       	push   $0xc000eb74
c0008048:	68 1e 02 00 00       	push   $0x21e
c000804d:	68 55 e3 00 c0       	push   $0xc000e355
c0008052:	e8 aa a4 ff ff       	call   c0002501 <panic_spin>
c0008057:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:545

	/* 为delete_dir_entry申请缓冲区 */
	void* io_buf = sys_malloc(SECTOR_SIZE + SECTOR_SIZE);
c000805a:	83 ec 0c             	sub    $0xc,%esp
c000805d:	68 00 04 00 00       	push   $0x400
c0008062:	e8 45 ae ff ff       	call   c0002eac <sys_malloc>
c0008067:	83 c4 10             	add    $0x10,%esp
c000806a:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:546
	if (io_buf == NULL) {
c000806d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0008071:	75 26                	jne    c0008099 <sys_unlink+0x1cc>
/work/x86_os_my/fs/fs.c:547
		dir_close(searched_record.parent_dir);
c0008073:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0008076:	83 ec 0c             	sub    $0xc,%esp
c0008079:	50                   	push   %eax
c000807a:	e8 e0 29 00 00       	call   c000aa5f <dir_close>
c000807f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:548
		printk("sys_unlink: malloc for io_buf failed\n");
c0008082:	83 ec 0c             	sub    $0xc,%esp
c0008085:	68 d0 e7 00 c0       	push   $0xc000e7d0
c000808a:	e8 5f ee ff ff       	call   c0006eee <printk>
c000808f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:549
		return -1;
c0008092:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0008097:	eb 55                	jmp    c00080ee <sys_unlink+0x221>
/work/x86_os_my/fs/fs.c:552
	}

	struct dir* parent_dir = searched_record.parent_dir;
c0008099:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000809c:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:553
	delete_dir_entry(cur_part, parent_dir, inode_no, io_buf);	// 删除目录项 dir.c
c000809f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00080a2:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c00080a7:	ff 75 ec             	pushl  -0x14(%ebp)
c00080aa:	52                   	push   %edx
c00080ab:	ff 75 e8             	pushl  -0x18(%ebp)
c00080ae:	50                   	push   %eax
c00080af:	e8 6a 2e 00 00       	call   c000af1e <delete_dir_entry>
c00080b4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:554
	inode_release(cur_part, inode_no);							// 删除inode inode.c
c00080b7:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00080ba:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c00080bf:	83 ec 08             	sub    $0x8,%esp
c00080c2:	52                   	push   %edx
c00080c3:	50                   	push   %eax
c00080c4:	e8 81 13 00 00       	call   c000944a <inode_release>
c00080c9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:555
	sys_free(io_buf);
c00080cc:	83 ec 0c             	sub    $0xc,%esp
c00080cf:	ff 75 ec             	pushl  -0x14(%ebp)
c00080d2:	e8 02 b4 ff ff       	call   c00034d9 <sys_free>
c00080d7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:556
	dir_close(searched_record.parent_dir);
c00080da:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00080dd:	83 ec 0c             	sub    $0xc,%esp
c00080e0:	50                   	push   %eax
c00080e1:	e8 79 29 00 00       	call   c000aa5f <dir_close>
c00080e6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:557
	return 0;	// 成功删除文件
c00080e9:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/fs.c:558 (discriminator 1)
}
c00080ee:	c9                   	leave  
c00080ef:	c3                   	ret    

c00080f0 <sys_mkdir>:
sys_mkdir():
/work/x86_os_my/fs/fs.c:569
（3）为新目录分配 1 个块存储该目录中的目录项。
（4）在新目录中创建两个目录项“.”和“..”，这是每个目录都必须存在的两个目录项。
（5）在新目录的父目录中添加新目录的目录项。
（6）将以上资源的变更同步到硬盘。
 */
int32_t sys_mkdir(const char* pathname) {
c00080f0:	55                   	push   %ebp
c00080f1:	89 e5                	mov    %esp,%ebp
c00080f3:	81 ec a8 02 00 00    	sub    $0x2a8,%esp
/work/x86_os_my/fs/fs.c:570
	uint8_t rollback_step = 0;	       // 用于操作失败时回滚各资源状态
c00080f9:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:571
	void* io_buf = sys_malloc(SECTOR_SIZE * 2);
c00080fd:	83 ec 0c             	sub    $0xc,%esp
c0008100:	68 00 04 00 00       	push   $0x400
c0008105:	e8 a2 ad ff ff       	call   c0002eac <sys_malloc>
c000810a:	83 c4 10             	add    $0x10,%esp
c000810d:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:572
	if (io_buf == NULL) {
c0008110:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0008114:	75 1a                	jne    c0008130 <sys_mkdir+0x40>
/work/x86_os_my/fs/fs.c:573
		printk("sys_mkdir: sys_malloc for io_buf failed\n");
c0008116:	83 ec 0c             	sub    $0xc,%esp
c0008119:	68 f8 e7 00 c0       	push   $0xc000e7f8
c000811e:	e8 cb ed ff ff       	call   c0006eee <printk>
c0008123:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:574
		return -1;
c0008126:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000812b:	e9 ae 03 00 00       	jmp    c00084de <sys_mkdir+0x3ee>
/work/x86_os_my/fs/fs.c:578
	}

	struct path_search_record searched_record;
	memset(&searched_record, 0, sizeof(struct path_search_record));
c0008130:	83 ec 04             	sub    $0x4,%esp
c0008133:	68 08 02 00 00       	push   $0x208
c0008138:	6a 00                	push   $0x0
c000813a:	8d 85 c8 fd ff ff    	lea    -0x238(%ebp),%eax
c0008140:	50                   	push   %eax
c0008141:	e8 bf b8 ff ff       	call   c0003a05 <memset>
c0008146:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:579
	int inode_no = -1;
c0008149:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:580
	inode_no = search_file(pathname, &searched_record);
c0008150:	83 ec 08             	sub    $0x8,%esp
c0008153:	8d 85 c8 fd ff ff    	lea    -0x238(%ebp),%eax
c0008159:	50                   	push   %eax
c000815a:	ff 75 08             	pushl  0x8(%ebp)
c000815d:	e8 28 f5 ff ff       	call   c000768a <search_file>
c0008162:	83 c4 10             	add    $0x10,%esp
c0008165:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:581
	if (inode_no != -1) {      // 如果找到了同名目录或文件,失败返回
c0008168:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c000816c:	74 1c                	je     c000818a <sys_mkdir+0x9a>
/work/x86_os_my/fs/fs.c:582
		printk("sys_mkdir: file or directory %s exist!\n", pathname);
c000816e:	83 ec 08             	sub    $0x8,%esp
c0008171:	ff 75 08             	pushl  0x8(%ebp)
c0008174:	68 24 e8 00 c0       	push   $0xc000e824
c0008179:	e8 70 ed ff ff       	call   c0006eee <printk>
c000817e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:583
		rollback_step = 1;
c0008181:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:584
		goto rollback;
c0008185:	e9 08 03 00 00       	jmp    c0008492 <sys_mkdir+0x3a2>
/work/x86_os_my/fs/fs.c:586
	} else {	     // 若未找到,也要判断是在最终目录没找到还是某个中间目录不存在
		uint32_t pathname_depth = path_depth_cnt((char*)pathname);
c000818a:	83 ec 0c             	sub    $0xc,%esp
c000818d:	ff 75 08             	pushl  0x8(%ebp)
c0008190:	e8 6a f4 ff ff       	call   c00075ff <path_depth_cnt>
c0008195:	83 c4 10             	add    $0x10,%esp
c0008198:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:587
		uint32_t path_searched_depth = path_depth_cnt(searched_record.searched_path);
c000819b:	83 ec 0c             	sub    $0xc,%esp
c000819e:	8d 85 c8 fd ff ff    	lea    -0x238(%ebp),%eax
c00081a4:	50                   	push   %eax
c00081a5:	e8 55 f4 ff ff       	call   c00075ff <path_depth_cnt>
c00081aa:	83 c4 10             	add    $0x10,%esp
c00081ad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/fs.c:589
		/* 先判断是否把pathname的各层目录都访问到了,即是否在某个中间目录就失败了 */
		if (pathname_depth != path_searched_depth) {   // 说明并没有访问到全部的路径,某个中间目录是不存在的
c00081b0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00081b3:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c00081b6:	74 23                	je     c00081db <sys_mkdir+0xeb>
/work/x86_os_my/fs/fs.c:590
			printk("sys_mkdir: can`t access %s, subpath %s is`t exist\n", pathname, searched_record.searched_path);
c00081b8:	83 ec 04             	sub    $0x4,%esp
c00081bb:	8d 85 c8 fd ff ff    	lea    -0x238(%ebp),%eax
c00081c1:	50                   	push   %eax
c00081c2:	ff 75 08             	pushl  0x8(%ebp)
c00081c5:	68 4c e8 00 c0       	push   $0xc000e84c
c00081ca:	e8 1f ed ff ff       	call   c0006eee <printk>
c00081cf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:591
			rollback_step = 1;
c00081d2:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:592
			goto rollback;
c00081d6:	e9 b7 02 00 00       	jmp    c0008492 <sys_mkdir+0x3a2>
/work/x86_os_my/fs/fs.c:596
		}
	}

	struct dir* parent_dir = searched_record.parent_dir;	//被创建目录所在的父目录
c00081db:	8b 45 c8             	mov    -0x38(%ebp),%eax
c00081de:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/fs.c:598
	/* 目录名称后可能会有字符'/',所以最好直接用searched_record.searched_path,无'/' */
	char* dirname = strrchr(searched_record.searched_path, '/') + 1;	//获取 pathname 的最后一级目录名
c00081e1:	83 ec 08             	sub    $0x8,%esp
c00081e4:	6a 2f                	push   $0x2f
c00081e6:	8d 85 c8 fd ff ff    	lea    -0x238(%ebp),%eax
c00081ec:	50                   	push   %eax
c00081ed:	e8 b9 ba ff ff       	call   c0003cab <strrchr>
c00081f2:	83 c4 10             	add    $0x10,%esp
c00081f5:	83 c0 01             	add    $0x1,%eax
c00081f8:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/fs.c:600

	inode_no = inode_bitmap_alloc(cur_part);
c00081fb:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c0008200:	83 ec 0c             	sub    $0xc,%esp
c0008203:	50                   	push   %eax
c0008204:	e8 92 15 00 00       	call   c000979b <inode_bitmap_alloc>
c0008209:	83 c4 10             	add    $0x10,%esp
c000820c:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:601
	if (inode_no == -1) {
c000820f:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c0008213:	75 19                	jne    c000822e <sys_mkdir+0x13e>
/work/x86_os_my/fs/fs.c:602
		printk("sys_mkdir: allocate inode failed\n");
c0008215:	83 ec 0c             	sub    $0xc,%esp
c0008218:	68 80 e8 00 c0       	push   $0xc000e880
c000821d:	e8 cc ec ff ff       	call   c0006eee <printk>
c0008222:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:603
		rollback_step = 1;
c0008225:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:604
		goto rollback;
c0008229:	e9 64 02 00 00       	jmp    c0008492 <sys_mkdir+0x3a2>
/work/x86_os_my/fs/fs.c:608
	}

	struct inode new_dir_inode;
	inode_init(inode_no, &new_dir_inode);	    // 初始化i结点
c000822e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008231:	83 ec 08             	sub    $0x8,%esp
c0008234:	8d 95 7c fd ff ff    	lea    -0x284(%ebp),%edx
c000823a:	52                   	push   %edx
c000823b:	50                   	push   %eax
c000823c:	e8 42 14 00 00       	call   c0009683 <inode_init>
c0008241:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:610

	uint32_t block_bitmap_idx = 0;     // 用来记录block对应于block_bitmap中的索引
c0008244:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
/work/x86_os_my/fs/fs.c:611
	int32_t block_lba = -1;
c000824b:	c7 45 d4 ff ff ff ff 	movl   $0xffffffff,-0x2c(%ebp)
/work/x86_os_my/fs/fs.c:613
	/* 为目录分配一个块,用来写入目录.和.. */
	block_lba = block_bitmap_alloc(cur_part);
c0008252:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c0008257:	83 ec 0c             	sub    $0xc,%esp
c000825a:	50                   	push   %eax
c000825b:	e8 82 15 00 00       	call   c00097e2 <block_bitmap_alloc>
c0008260:	83 c4 10             	add    $0x10,%esp
c0008263:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/fs/fs.c:614
	if (block_lba == -1) {
c0008266:	83 7d d4 ff          	cmpl   $0xffffffff,-0x2c(%ebp)
c000826a:	75 19                	jne    c0008285 <sys_mkdir+0x195>
/work/x86_os_my/fs/fs.c:615
		printk("sys_mkdir: block_bitmap_alloc for create directory failed\n");
c000826c:	83 ec 0c             	sub    $0xc,%esp
c000826f:	68 a4 e8 00 c0       	push   $0xc000e8a4
c0008274:	e8 75 ec ff ff       	call   c0006eee <printk>
c0008279:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:616
		rollback_step = 2;
c000827c:	c6 45 f7 02          	movb   $0x2,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:617
		goto rollback;
c0008280:	e9 0d 02 00 00       	jmp    c0008492 <sys_mkdir+0x3a2>
/work/x86_os_my/fs/fs.c:619
	}
	new_dir_inode.i_sectors[0] = block_lba;
c0008285:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0008288:	89 85 8c fd ff ff    	mov    %eax,-0x274(%ebp)
/work/x86_os_my/fs/fs.c:621
	/* 每分配一个块就将位图同步到硬盘 */
	block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
c000828e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0008291:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c0008296:	8b 40 1c             	mov    0x1c(%eax),%eax
c0008299:	8b 40 28             	mov    0x28(%eax),%eax
c000829c:	29 c2                	sub    %eax,%edx
c000829e:	89 d0                	mov    %edx,%eax
c00082a0:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/fs.c:622
	ASSERT(block_bitmap_idx != 0);
c00082a3:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c00082a7:	75 1c                	jne    c00082c5 <sys_mkdir+0x1d5>
/work/x86_os_my/fs/fs.c:622 (discriminator 1)
c00082a9:	68 df e8 00 c0       	push   $0xc000e8df
c00082ae:	68 80 eb 00 c0       	push   $0xc000eb80
c00082b3:	68 6e 02 00 00       	push   $0x26e
c00082b8:	68 55 e3 00 c0       	push   $0xc000e355
c00082bd:	e8 3f a2 ff ff       	call   c0002501 <panic_spin>
c00082c2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:623
	bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c00082c5:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c00082ca:	83 ec 04             	sub    $0x4,%esp
c00082cd:	6a 01                	push   $0x1
c00082cf:	ff 75 d8             	pushl  -0x28(%ebp)
c00082d2:	50                   	push   %eax
c00082d3:	e8 5c 15 00 00       	call   c0009834 <bitmap_sync>
c00082d8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:626

	/* 将当前目录的目录项'.'和'..'写入目录 */
	memset(io_buf, 0, SECTOR_SIZE * 2);	 // 清空io_buf
c00082db:	83 ec 04             	sub    $0x4,%esp
c00082de:	68 00 04 00 00       	push   $0x400
c00082e3:	6a 00                	push   $0x0
c00082e5:	ff 75 ec             	pushl  -0x14(%ebp)
c00082e8:	e8 18 b7 ff ff       	call   c0003a05 <memset>
c00082ed:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:627
	struct dir_entry* p_de = (struct dir_entry*)io_buf;
c00082f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00082f3:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/fs/fs.c:630

	/* 初始化当前目录"." */
	memcpy(p_de->filename, ".", 1);
c00082f6:	8b 45 d0             	mov    -0x30(%ebp),%eax
c00082f9:	83 ec 04             	sub    $0x4,%esp
c00082fc:	6a 01                	push   $0x1
c00082fe:	68 93 e4 00 c0       	push   $0xc000e493
c0008303:	50                   	push   %eax
c0008304:	e8 4e b7 ff ff       	call   c0003a57 <memcpy>
c0008309:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:631
	p_de->i_no = inode_no ;
c000830c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000830f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0008312:	89 50 10             	mov    %edx,0x10(%eax)
/work/x86_os_my/fs/fs.c:632
	p_de->f_type = FT_DIRECTORY;
c0008315:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0008318:	c7 40 14 02 00 00 00 	movl   $0x2,0x14(%eax)
/work/x86_os_my/fs/fs.c:634

	p_de++;
c000831f:	83 45 d0 18          	addl   $0x18,-0x30(%ebp)
/work/x86_os_my/fs/fs.c:636
	/* 初始化当前目录".." */
	memcpy(p_de->filename, "..", 2);
c0008323:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0008326:	83 ec 04             	sub    $0x4,%esp
c0008329:	6a 02                	push   $0x2
c000832b:	68 95 e4 00 c0       	push   $0xc000e495
c0008330:	50                   	push   %eax
c0008331:	e8 21 b7 ff ff       	call   c0003a57 <memcpy>
c0008336:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:637
	p_de->i_no = parent_dir->inode->i_no;
c0008339:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000833c:	8b 00                	mov    (%eax),%eax
c000833e:	8b 10                	mov    (%eax),%edx
c0008340:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0008343:	89 50 10             	mov    %edx,0x10(%eax)
/work/x86_os_my/fs/fs.c:638
	p_de->f_type = FT_DIRECTORY;
c0008346:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0008349:	c7 40 14 02 00 00 00 	movl   $0x2,0x14(%eax)
/work/x86_os_my/fs/fs.c:639
	ide_write(cur_part->my_disk, new_dir_inode.i_sectors[0], io_buf, 1);
c0008350:	8b 95 8c fd ff ff    	mov    -0x274(%ebp),%edx
c0008356:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000835b:	8b 40 08             	mov    0x8(%eax),%eax
c000835e:	6a 01                	push   $0x1
c0008360:	ff 75 ec             	pushl  -0x14(%ebp)
c0008363:	52                   	push   %edx
c0008364:	50                   	push   %eax
c0008365:	e8 7f e2 ff ff       	call   c00065e9 <ide_write>
c000836a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:641

	new_dir_inode.i_size = 2 * cur_part->sb->dir_entry_size;
c000836d:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c0008372:	8b 40 1c             	mov    0x1c(%eax),%eax
c0008375:	8b 40 30             	mov    0x30(%eax),%eax
c0008378:	01 c0                	add    %eax,%eax
c000837a:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)
/work/x86_os_my/fs/fs.c:645

	/* 在父目录中添加自己的目录项 */
	struct dir_entry new_dir_entry;
	memset(&new_dir_entry, 0, sizeof(struct dir_entry));
c0008380:	83 ec 04             	sub    $0x4,%esp
c0008383:	6a 18                	push   $0x18
c0008385:	6a 00                	push   $0x0
c0008387:	8d 85 64 fd ff ff    	lea    -0x29c(%ebp),%eax
c000838d:	50                   	push   %eax
c000838e:	e8 72 b6 ff ff       	call   c0003a05 <memset>
c0008393:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:646
	create_dir_entry(dirname, inode_no, FT_DIRECTORY, &new_dir_entry);
c0008396:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008399:	8d 95 64 fd ff ff    	lea    -0x29c(%ebp),%edx
c000839f:	52                   	push   %edx
c00083a0:	6a 02                	push   $0x2
c00083a2:	50                   	push   %eax
c00083a3:	ff 75 dc             	pushl  -0x24(%ebp)
c00083a6:	e8 e7 26 00 00       	call   c000aa92 <create_dir_entry>
c00083ab:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:647
	memset(io_buf, 0, SECTOR_SIZE * 2);	 // 清空io_buf
c00083ae:	83 ec 04             	sub    $0x4,%esp
c00083b1:	68 00 04 00 00       	push   $0x400
c00083b6:	6a 00                	push   $0x0
c00083b8:	ff 75 ec             	pushl  -0x14(%ebp)
c00083bb:	e8 45 b6 ff ff       	call   c0003a05 <memset>
c00083c0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:648
	if (!sync_dir_entry(parent_dir, &new_dir_entry, io_buf)) {	  // sync_dir_entry中将block_bitmap通过bitmap_sync同步到硬盘
c00083c3:	83 ec 04             	sub    $0x4,%esp
c00083c6:	ff 75 ec             	pushl  -0x14(%ebp)
c00083c9:	8d 85 64 fd ff ff    	lea    -0x29c(%ebp),%eax
c00083cf:	50                   	push   %eax
c00083d0:	ff 75 e0             	pushl  -0x20(%ebp)
c00083d3:	e8 2b 27 00 00       	call   c000ab03 <sync_dir_entry>
c00083d8:	83 c4 10             	add    $0x10,%esp
c00083db:	85 c0                	test   %eax,%eax
c00083dd:	75 19                	jne    c00083f8 <sys_mkdir+0x308>
/work/x86_os_my/fs/fs.c:649
		printk("sys_mkdir: sync_dir_entry to disk failed!\n");
c00083df:	83 ec 0c             	sub    $0xc,%esp
c00083e2:	68 f8 e8 00 c0       	push   $0xc000e8f8
c00083e7:	e8 02 eb ff ff       	call   c0006eee <printk>
c00083ec:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:650
		rollback_step = 2;
c00083ef:	c6 45 f7 02          	movb   $0x2,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:651
		goto rollback;
c00083f3:	e9 9a 00 00 00       	jmp    c0008492 <sys_mkdir+0x3a2>
/work/x86_os_my/fs/fs.c:655
	}

	/* 父目录的inode同步到硬盘 */
	memset(io_buf, 0, SECTOR_SIZE * 2);
c00083f8:	83 ec 04             	sub    $0x4,%esp
c00083fb:	68 00 04 00 00       	push   $0x400
c0008400:	6a 00                	push   $0x0
c0008402:	ff 75 ec             	pushl  -0x14(%ebp)
c0008405:	e8 fb b5 ff ff       	call   c0003a05 <memset>
c000840a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:656
	inode_sync(cur_part, parent_dir->inode, io_buf);
c000840d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0008410:	8b 10                	mov    (%eax),%edx
c0008412:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c0008417:	83 ec 04             	sub    $0x4,%esp
c000841a:	ff 75 ec             	pushl  -0x14(%ebp)
c000841d:	52                   	push   %edx
c000841e:	50                   	push   %eax
c000841f:	e8 2b 0c 00 00       	call   c000904f <inode_sync>
c0008424:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:659

	/* 将新创建目录的inode同步到硬盘 */
	memset(io_buf, 0, SECTOR_SIZE * 2);
c0008427:	83 ec 04             	sub    $0x4,%esp
c000842a:	68 00 04 00 00       	push   $0x400
c000842f:	6a 00                	push   $0x0
c0008431:	ff 75 ec             	pushl  -0x14(%ebp)
c0008434:	e8 cc b5 ff ff       	call   c0003a05 <memset>
c0008439:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:660
	inode_sync(cur_part, &new_dir_inode, io_buf);
c000843c:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c0008441:	83 ec 04             	sub    $0x4,%esp
c0008444:	ff 75 ec             	pushl  -0x14(%ebp)
c0008447:	8d 95 7c fd ff ff    	lea    -0x284(%ebp),%edx
c000844d:	52                   	push   %edx
c000844e:	50                   	push   %eax
c000844f:	e8 fb 0b 00 00       	call   c000904f <inode_sync>
c0008454:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:663

	/* 将inode位图同步到硬盘 */
	bitmap_sync(cur_part, inode_no, INODE_BITMAP);
c0008457:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000845a:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000845f:	83 ec 04             	sub    $0x4,%esp
c0008462:	6a 00                	push   $0x0
c0008464:	52                   	push   %edx
c0008465:	50                   	push   %eax
c0008466:	e8 c9 13 00 00       	call   c0009834 <bitmap_sync>
c000846b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:665

	sys_free(io_buf);
c000846e:	83 ec 0c             	sub    $0xc,%esp
c0008471:	ff 75 ec             	pushl  -0x14(%ebp)
c0008474:	e8 60 b0 ff ff       	call   c00034d9 <sys_free>
c0008479:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:668

	/* 关闭所创建目录的父目录 */
	dir_close(searched_record.parent_dir);
c000847c:	8b 45 c8             	mov    -0x38(%ebp),%eax
c000847f:	83 ec 0c             	sub    $0xc,%esp
c0008482:	50                   	push   %eax
c0008483:	e8 d7 25 00 00       	call   c000aa5f <dir_close>
c0008488:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:669
	return 0;
c000848b:	b8 00 00 00 00       	mov    $0x0,%eax
c0008490:	eb 4c                	jmp    c00084de <sys_mkdir+0x3ee>
/work/x86_os_my/fs/fs.c:673

	/*创建文件或目录需要创建相关的多个资源,若某步失败则会执行到下面的回滚步骤 */
rollback:	     // 因为某步骤操作失败而回滚
	switch (rollback_step) {
c0008492:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0008496:	83 f8 01             	cmp    $0x1,%eax
c0008499:	74 20                	je     c00084bb <sys_mkdir+0x3cb>
c000849b:	83 f8 02             	cmp    $0x2,%eax
c000849e:	75 2b                	jne    c00084cb <sys_mkdir+0x3db>
/work/x86_os_my/fs/fs.c:675
		case 2:
		bitmap_set(&cur_part->inode_bitmap, inode_no, 0);	 // 如果新文件的inode创建失败,之前位图中分配的inode_no也要恢复
c00084a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00084a3:	8b 15 d0 4a 01 c0    	mov    0xc0014ad0,%edx
c00084a9:	83 c2 28             	add    $0x28,%edx
c00084ac:	83 ec 04             	sub    $0x4,%esp
c00084af:	6a 00                	push   $0x0
c00084b1:	50                   	push   %eax
c00084b2:	52                   	push   %edx
c00084b3:	e8 b7 a2 ff ff       	call   c000276f <bitmap_set>
c00084b8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:678
		case 1:
		/* 关闭所创建目录的父目录 */
		dir_close(searched_record.parent_dir);
c00084bb:	8b 45 c8             	mov    -0x38(%ebp),%eax
c00084be:	83 ec 0c             	sub    $0xc,%esp
c00084c1:	50                   	push   %eax
c00084c2:	e8 98 25 00 00       	call   c000aa5f <dir_close>
c00084c7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:679
		break;
c00084ca:	90                   	nop
/work/x86_os_my/fs/fs.c:681
	}
	sys_free(io_buf);
c00084cb:	83 ec 0c             	sub    $0xc,%esp
c00084ce:	ff 75 ec             	pushl  -0x14(%ebp)
c00084d1:	e8 03 b0 ff ff       	call   c00034d9 <sys_free>
c00084d6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:682
	return -1;
c00084d9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
/work/x86_os_my/fs/fs.c:683 (discriminator 1)
}
c00084de:	c9                   	leave  
c00084df:	c3                   	ret    

c00084e0 <sys_opendir>:
sys_opendir():
/work/x86_os_my/fs/fs.c:686

/* 目录打开成功后返回目录指针,失败返回NULL */
struct dir* sys_opendir(const char* name) {
c00084e0:	55                   	push   %ebp
c00084e1:	89 e5                	mov    %esp,%ebp
c00084e3:	81 ec 18 02 00 00    	sub    $0x218,%esp
/work/x86_os_my/fs/fs.c:687
	ASSERT(strlen(name) < MAX_PATH_LEN);
c00084e9:	83 ec 0c             	sub    $0xc,%esp
c00084ec:	ff 75 08             	pushl  0x8(%ebp)
c00084ef:	e8 9b b6 ff ff       	call   c0003b8f <strlen>
c00084f4:	83 c4 10             	add    $0x10,%esp
c00084f7:	3d ff 01 00 00       	cmp    $0x1ff,%eax
c00084fc:	76 1c                	jbe    c000851a <sys_opendir+0x3a>
/work/x86_os_my/fs/fs.c:687 (discriminator 1)
c00084fe:	68 23 e9 00 c0       	push   $0xc000e923
c0008503:	68 8c eb 00 c0       	push   $0xc000eb8c
c0008508:	68 af 02 00 00       	push   $0x2af
c000850d:	68 55 e3 00 c0       	push   $0xc000e355
c0008512:	e8 ea 9f ff ff       	call   c0002501 <panic_spin>
c0008517:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:689
	/* 如果是根目录'/',直接返回&root_dir */
	if (name[0] == '/' && (name[1] == 0 || name[0] == '.')) {
c000851a:	8b 45 08             	mov    0x8(%ebp),%eax
c000851d:	0f b6 00             	movzbl (%eax),%eax
c0008520:	3c 2f                	cmp    $0x2f,%al
c0008522:	75 21                	jne    c0008545 <sys_opendir+0x65>
/work/x86_os_my/fs/fs.c:689 (discriminator 1)
c0008524:	8b 45 08             	mov    0x8(%ebp),%eax
c0008527:	83 c0 01             	add    $0x1,%eax
c000852a:	0f b6 00             	movzbl (%eax),%eax
c000852d:	84 c0                	test   %al,%al
c000852f:	74 0a                	je     c000853b <sys_opendir+0x5b>
/work/x86_os_my/fs/fs.c:689 (discriminator 2)
c0008531:	8b 45 08             	mov    0x8(%ebp),%eax
c0008534:	0f b6 00             	movzbl (%eax),%eax
c0008537:	3c 2e                	cmp    $0x2e,%al
c0008539:	75 0a                	jne    c0008545 <sys_opendir+0x65>
/work/x86_os_my/fs/fs.c:690
		return &root_dir;
c000853b:	b8 60 4c 01 c0       	mov    $0xc0014c60,%eax
c0008540:	e9 a9 00 00 00       	jmp    c00085ee <sys_opendir+0x10e>
/work/x86_os_my/fs/fs.c:695
	}

	/* 先检查待打开的目录是否存在 */
	struct path_search_record searched_record;
	memset(&searched_record, 0, sizeof(struct path_search_record));
c0008545:	83 ec 04             	sub    $0x4,%esp
c0008548:	68 08 02 00 00       	push   $0x208
c000854d:	6a 00                	push   $0x0
c000854f:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
c0008555:	50                   	push   %eax
c0008556:	e8 aa b4 ff ff       	call   c0003a05 <memset>
c000855b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:696
	int inode_no = search_file(name, &searched_record);
c000855e:	83 ec 08             	sub    $0x8,%esp
c0008561:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
c0008567:	50                   	push   %eax
c0008568:	ff 75 08             	pushl  0x8(%ebp)
c000856b:	e8 1a f1 ff ff       	call   c000768a <search_file>
c0008570:	83 c4 10             	add    $0x10,%esp
c0008573:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:697
	struct dir* ret = NULL;
c0008576:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:698
	if (inode_no == -1) {	 // 如果找不到目录,提示不存在的路径
c000857d:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c0008581:	75 1c                	jne    c000859f <sys_opendir+0xbf>
/work/x86_os_my/fs/fs.c:699
		printk("In %s, sub path %s not exist\n", name, searched_record.searched_path);
c0008583:	83 ec 04             	sub    $0x4,%esp
c0008586:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
c000858c:	50                   	push   %eax
c000858d:	ff 75 08             	pushl  0x8(%ebp)
c0008590:	68 3f e9 00 c0       	push   $0xc000e93f
c0008595:	e8 54 e9 ff ff       	call   c0006eee <printk>
c000859a:	83 c4 10             	add    $0x10,%esp
c000859d:	eb 3d                	jmp    c00085dc <sys_opendir+0xfc>
/work/x86_os_my/fs/fs.c:701
	} else {
		if (searched_record.file_type == FT_REGULAR) {
c000859f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00085a2:	83 f8 01             	cmp    $0x1,%eax
c00085a5:	75 15                	jne    c00085bc <sys_opendir+0xdc>
/work/x86_os_my/fs/fs.c:702
			printk("%s is regular file!\n", name);
c00085a7:	83 ec 08             	sub    $0x8,%esp
c00085aa:	ff 75 08             	pushl  0x8(%ebp)
c00085ad:	68 5d e9 00 c0       	push   $0xc000e95d
c00085b2:	e8 37 e9 ff ff       	call   c0006eee <printk>
c00085b7:	83 c4 10             	add    $0x10,%esp
c00085ba:	eb 20                	jmp    c00085dc <sys_opendir+0xfc>
/work/x86_os_my/fs/fs.c:703
		} else if (searched_record.file_type == FT_DIRECTORY) {
c00085bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00085bf:	83 f8 02             	cmp    $0x2,%eax
c00085c2:	75 18                	jne    c00085dc <sys_opendir+0xfc>
/work/x86_os_my/fs/fs.c:704
			ret = dir_open(cur_part, inode_no);
c00085c4:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00085c7:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c00085cc:	83 ec 08             	sub    $0x8,%esp
c00085cf:	52                   	push   %edx
c00085d0:	50                   	push   %eax
c00085d1:	e8 71 22 00 00       	call   c000a847 <dir_open>
c00085d6:	83 c4 10             	add    $0x10,%esp
c00085d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:707
		}
	}
	dir_close(searched_record.parent_dir);
c00085dc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00085df:	83 ec 0c             	sub    $0xc,%esp
c00085e2:	50                   	push   %eax
c00085e3:	e8 77 24 00 00       	call   c000aa5f <dir_close>
c00085e8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:708
	return ret;
c00085eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:709 (discriminator 1)
}
c00085ee:	c9                   	leave  
c00085ef:	c3                   	ret    

c00085f0 <sys_closedir>:
sys_closedir():
/work/x86_os_my/fs/fs.c:712

/* 成功关闭目录dir返回0,失败返回-1 */
int32_t sys_closedir(struct dir* dir) {
c00085f0:	55                   	push   %ebp
c00085f1:	89 e5                	mov    %esp,%ebp
c00085f3:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/fs.c:713
	int32_t ret = -1;
c00085f6:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:714
	if (dir != NULL) {
c00085fd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0008601:	74 15                	je     c0008618 <sys_closedir+0x28>
/work/x86_os_my/fs/fs.c:715
		dir_close(dir);
c0008603:	83 ec 0c             	sub    $0xc,%esp
c0008606:	ff 75 08             	pushl  0x8(%ebp)
c0008609:	e8 51 24 00 00       	call   c000aa5f <dir_close>
c000860e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:716
		ret = 0;
c0008611:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:718
	}
	return ret;
c0008618:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:719
}
c000861b:	c9                   	leave  
c000861c:	c3                   	ret    

c000861d <sys_readdir>:
sys_readdir():
/work/x86_os_my/fs/fs.c:722

/* 读取目录dir的1个目录项,成功后返回其目录项地址,到目录尾时或出错时返回NULL */
struct dir_entry* sys_readdir(struct dir* dir) {
c000861d:	55                   	push   %ebp
c000861e:	89 e5                	mov    %esp,%ebp
c0008620:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/fs/fs.c:723
	ASSERT(dir != NULL);
c0008623:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0008627:	75 1c                	jne    c0008645 <sys_readdir+0x28>
/work/x86_os_my/fs/fs.c:723 (discriminator 1)
c0008629:	68 72 e9 00 c0       	push   $0xc000e972
c000862e:	68 98 eb 00 c0       	push   $0xc000eb98
c0008633:	68 d3 02 00 00       	push   $0x2d3
c0008638:	68 55 e3 00 c0       	push   $0xc000e355
c000863d:	e8 bf 9e ff ff       	call   c0002501 <panic_spin>
c0008642:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:724
	return dir_read(dir);
c0008645:	83 ec 0c             	sub    $0xc,%esp
c0008648:	ff 75 08             	pushl  0x8(%ebp)
c000864b:	e8 36 2d 00 00       	call   c000b386 <dir_read>
c0008650:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:725
}
c0008653:	c9                   	leave  
c0008654:	c3                   	ret    

c0008655 <sys_rewinddir>:
sys_rewinddir():
/work/x86_os_my/fs/fs.c:728

/* 把目录dir的指针dir_pos置0 */
void sys_rewinddir(struct dir* dir) {
c0008655:	55                   	push   %ebp
c0008656:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/fs/fs.c:729
	dir->dir_pos = 0;
c0008658:	8b 45 08             	mov    0x8(%ebp),%eax
c000865b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
/work/x86_os_my/fs/fs.c:730
}
c0008662:	90                   	nop
c0008663:	5d                   	pop    %ebp
c0008664:	c3                   	ret    

c0008665 <sys_rmdir>:
sys_rmdir():
/work/x86_os_my/fs/fs.c:733

/* 删除空目录,成功时返回0,失败时返回-1*/
int32_t sys_rmdir(const char* pathname) {
c0008665:	55                   	push   %ebp
c0008666:	89 e5                	mov    %esp,%ebp
c0008668:	81 ec 28 02 00 00    	sub    $0x228,%esp
/work/x86_os_my/fs/fs.c:736
	/* 先检查待删除的文件是否存在 */
	struct path_search_record searched_record;
	memset(&searched_record, 0, sizeof(struct path_search_record));
c000866e:	83 ec 04             	sub    $0x4,%esp
c0008671:	68 08 02 00 00       	push   $0x208
c0008676:	6a 00                	push   $0x0
c0008678:	8d 85 e4 fd ff ff    	lea    -0x21c(%ebp),%eax
c000867e:	50                   	push   %eax
c000867f:	e8 81 b3 ff ff       	call   c0003a05 <memset>
c0008684:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:737
	int32_t inode_no = search_file(pathname, &searched_record);
c0008687:	83 ec 08             	sub    $0x8,%esp
c000868a:	8d 85 e4 fd ff ff    	lea    -0x21c(%ebp),%eax
c0008690:	50                   	push   %eax
c0008691:	ff 75 08             	pushl  0x8(%ebp)
c0008694:	e8 f1 ef ff ff       	call   c000768a <search_file>
c0008699:	83 c4 10             	add    $0x10,%esp
c000869c:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:738
	ASSERT(inode_no != 0);
c000869f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c00086a3:	75 1c                	jne    c00086c1 <sys_rmdir+0x5c>
/work/x86_os_my/fs/fs.c:738 (discriminator 1)
c00086a5:	68 28 e7 00 c0       	push   $0xc000e728
c00086aa:	68 a4 eb 00 c0       	push   $0xc000eba4
c00086af:	68 e2 02 00 00       	push   $0x2e2
c00086b4:	68 55 e3 00 c0       	push   $0xc000e355
c00086b9:	e8 43 9e ff ff       	call   c0002501 <panic_spin>
c00086be:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:739
	int32_t retval = -1;	// 默认返回值
c00086c1:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:740
	if (inode_no == -1) {
c00086c8:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c00086cc:	75 1f                	jne    c00086ed <sys_rmdir+0x88>
/work/x86_os_my/fs/fs.c:741
		printk("In %s, sub path %s not exist\n", pathname, searched_record.searched_path);
c00086ce:	83 ec 04             	sub    $0x4,%esp
c00086d1:	8d 85 e4 fd ff ff    	lea    -0x21c(%ebp),%eax
c00086d7:	50                   	push   %eax
c00086d8:	ff 75 08             	pushl  0x8(%ebp)
c00086db:	68 3f e9 00 c0       	push   $0xc000e93f
c00086e0:	e8 09 e8 ff ff       	call   c0006eee <printk>
c00086e5:	83 c4 10             	add    $0x10,%esp
c00086e8:	e9 87 00 00 00       	jmp    c0008774 <sys_rmdir+0x10f>
/work/x86_os_my/fs/fs.c:743
	} else {
		if (searched_record.file_type == FT_REGULAR) {
c00086ed:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00086f0:	83 f8 01             	cmp    $0x1,%eax
c00086f3:	75 15                	jne    c000870a <sys_rmdir+0xa5>
/work/x86_os_my/fs/fs.c:744
			printk("%s is regular file!\n", pathname);
c00086f5:	83 ec 08             	sub    $0x8,%esp
c00086f8:	ff 75 08             	pushl  0x8(%ebp)
c00086fb:	68 5d e9 00 c0       	push   $0xc000e95d
c0008700:	e8 e9 e7 ff ff       	call   c0006eee <printk>
c0008705:	83 c4 10             	add    $0x10,%esp
c0008708:	eb 6a                	jmp    c0008774 <sys_rmdir+0x10f>
/work/x86_os_my/fs/fs.c:746
		} else {
			struct dir* dir = dir_open(cur_part, inode_no);
c000870a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000870d:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c0008712:	83 ec 08             	sub    $0x8,%esp
c0008715:	52                   	push   %edx
c0008716:	50                   	push   %eax
c0008717:	e8 2b 21 00 00       	call   c000a847 <dir_open>
c000871c:	83 c4 10             	add    $0x10,%esp
c000871f:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:747
			if (!dir_is_empty(dir)) {	 // 非空目录不可删除
c0008722:	83 ec 0c             	sub    $0xc,%esp
c0008725:	ff 75 ec             	pushl  -0x14(%ebp)
c0008728:	e8 41 2e 00 00       	call   c000b56e <dir_is_empty>
c000872d:	83 c4 10             	add    $0x10,%esp
c0008730:	85 c0                	test   %eax,%eax
c0008732:	75 15                	jne    c0008749 <sys_rmdir+0xe4>
/work/x86_os_my/fs/fs.c:748
				printk("dir %s is not empty, it is not allowed to delete a nonempty directory!\n", pathname);
c0008734:	83 ec 08             	sub    $0x8,%esp
c0008737:	ff 75 08             	pushl  0x8(%ebp)
c000873a:	68 80 e9 00 c0       	push   $0xc000e980
c000873f:	e8 aa e7 ff ff       	call   c0006eee <printk>
c0008744:	83 c4 10             	add    $0x10,%esp
c0008747:	eb 1d                	jmp    c0008766 <sys_rmdir+0x101>
/work/x86_os_my/fs/fs.c:750
			} else {
				if (!dir_remove(searched_record.parent_dir, dir)) {
c0008749:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000874c:	83 ec 08             	sub    $0x8,%esp
c000874f:	ff 75 ec             	pushl  -0x14(%ebp)
c0008752:	50                   	push   %eax
c0008753:	e8 41 2e 00 00       	call   c000b599 <dir_remove>
c0008758:	83 c4 10             	add    $0x10,%esp
c000875b:	85 c0                	test   %eax,%eax
c000875d:	75 07                	jne    c0008766 <sys_rmdir+0x101>
/work/x86_os_my/fs/fs.c:751
					retval = 0;
c000875f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:754
				}
			}
			dir_close(dir);
c0008766:	83 ec 0c             	sub    $0xc,%esp
c0008769:	ff 75 ec             	pushl  -0x14(%ebp)
c000876c:	e8 ee 22 00 00       	call   c000aa5f <dir_close>
c0008771:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:757
		}
	}
	dir_close(searched_record.parent_dir);
c0008774:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0008777:	83 ec 0c             	sub    $0xc,%esp
c000877a:	50                   	push   %eax
c000877b:	e8 df 22 00 00       	call   c000aa5f <dir_close>
c0008780:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:758
	return retval;
c0008783:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:759
}
c0008786:	c9                   	leave  
c0008787:	c3                   	ret    

c0008788 <get_parent_dir_inode_nr>:
get_parent_dir_inode_nr():
/work/x86_os_my/fs/fs.c:762

/* 获得父目录的inode编号 */
static uint32_t get_parent_dir_inode_nr(uint32_t child_inode_nr, void* io_buf) {
c0008788:	55                   	push   %ebp
c0008789:	89 e5                	mov    %esp,%ebp
c000878b:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/fs.c:763
   struct inode* child_dir_inode = inode_open(cur_part, child_inode_nr);
c000878e:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c0008793:	83 ec 08             	sub    $0x8,%esp
c0008796:	ff 75 08             	pushl  0x8(%ebp)
c0008799:	50                   	push   %eax
c000879a:	e8 d7 09 00 00       	call   c0009176 <inode_open>
c000879f:	83 c4 10             	add    $0x10,%esp
c00087a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:765
   /* 目录中的目录项".."中包括父目录inode编号,".."位于目录的第0块 */
   uint32_t block_lba = child_dir_inode->i_sectors[0];
c00087a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00087a8:	8b 40 10             	mov    0x10(%eax),%eax
c00087ab:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:766
   ASSERT(block_lba >= cur_part->sb->data_start_lba);
c00087ae:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c00087b3:	8b 40 1c             	mov    0x1c(%eax),%eax
c00087b6:	8b 40 28             	mov    0x28(%eax),%eax
c00087b9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c00087bc:	76 1c                	jbe    c00087da <get_parent_dir_inode_nr+0x52>
/work/x86_os_my/fs/fs.c:766 (discriminator 1)
c00087be:	68 c8 e9 00 c0       	push   $0xc000e9c8
c00087c3:	68 b0 eb 00 c0       	push   $0xc000ebb0
c00087c8:	68 fe 02 00 00       	push   $0x2fe
c00087cd:	68 55 e3 00 c0       	push   $0xc000e355
c00087d2:	e8 2a 9d ff ff       	call   c0002501 <panic_spin>
c00087d7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:767
   inode_close(child_dir_inode);
c00087da:	83 ec 0c             	sub    $0xc,%esp
c00087dd:	ff 75 f4             	pushl  -0xc(%ebp)
c00087e0:	e8 d7 0a 00 00       	call   c00092bc <inode_close>
c00087e5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:768
   ide_read(cur_part->my_disk, block_lba, io_buf, 1);
c00087e8:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c00087ed:	8b 40 08             	mov    0x8(%eax),%eax
c00087f0:	6a 01                	push   $0x1
c00087f2:	ff 75 0c             	pushl  0xc(%ebp)
c00087f5:	ff 75 f0             	pushl  -0x10(%ebp)
c00087f8:	50                   	push   %eax
c00087f9:	e8 77 dc ff ff       	call   c0006475 <ide_read>
c00087fe:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:769
   struct dir_entry* dir_e = (struct dir_entry*)io_buf;
c0008801:	8b 45 0c             	mov    0xc(%ebp),%eax
c0008804:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:771
   /* 第0个目录项是".",第1个目录项是".." */
   ASSERT(dir_e[1].i_no < 4096 && dir_e[1].f_type == FT_DIRECTORY);
c0008807:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000880a:	83 c0 18             	add    $0x18,%eax
c000880d:	8b 40 10             	mov    0x10(%eax),%eax
c0008810:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0008815:	77 0e                	ja     c0008825 <get_parent_dir_inode_nr+0x9d>
/work/x86_os_my/fs/fs.c:771 (discriminator 1)
c0008817:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000881a:	83 c0 18             	add    $0x18,%eax
c000881d:	8b 40 14             	mov    0x14(%eax),%eax
c0008820:	83 f8 02             	cmp    $0x2,%eax
c0008823:	74 1c                	je     c0008841 <get_parent_dir_inode_nr+0xb9>
/work/x86_os_my/fs/fs.c:771 (discriminator 3)
c0008825:	68 f4 e9 00 c0       	push   $0xc000e9f4
c000882a:	68 b0 eb 00 c0       	push   $0xc000ebb0
c000882f:	68 03 03 00 00       	push   $0x303
c0008834:	68 55 e3 00 c0       	push   $0xc000e355
c0008839:	e8 c3 9c ff ff       	call   c0002501 <panic_spin>
c000883e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:772
   return dir_e[1].i_no;	// 返回..即父目录的inode编号
c0008841:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008844:	83 c0 18             	add    $0x18,%eax
c0008847:	8b 40 10             	mov    0x10(%eax),%eax
/work/x86_os_my/fs/fs.c:773
}
c000884a:	c9                   	leave  
c000884b:	c3                   	ret    

c000884c <get_child_dir_name>:
get_child_dir_name():
/work/x86_os_my/fs/fs.c:777

/* 在inode编号为p_inode_nr的目录中查找inode编号为c_inode_nr的子目录的名字,
 * 将名字存入缓冲区path.成功返回0,失败返-1 */
static int get_child_dir_name(uint32_t p_inode_nr, uint32_t c_inode_nr, char* path, void* io_buf) {
c000884c:	55                   	push   %ebp
c000884d:	89 e5                	mov    %esp,%ebp
c000884f:	57                   	push   %edi
c0008850:	81 ec 54 02 00 00    	sub    $0x254,%esp
/work/x86_os_my/fs/fs.c:778
	struct inode* parent_dir_inode = inode_open(cur_part, p_inode_nr);
c0008856:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000885b:	83 ec 08             	sub    $0x8,%esp
c000885e:	ff 75 08             	pushl  0x8(%ebp)
c0008861:	50                   	push   %eax
c0008862:	e8 0f 09 00 00       	call   c0009176 <inode_open>
c0008867:	83 c4 10             	add    $0x10,%esp
c000886a:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:780
	/* 填充all_blocks,将该目录的所占扇区地址全部写入all_blocks */
	uint8_t block_idx = 0;
c000886d:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:781
	uint32_t all_blocks[140] = {0}, block_cnt = 12;
c0008871:	8d 95 ac fd ff ff    	lea    -0x254(%ebp),%edx
c0008877:	b8 00 00 00 00       	mov    $0x0,%eax
c000887c:	b9 8c 00 00 00       	mov    $0x8c,%ecx
c0008881:	89 d7                	mov    %edx,%edi
c0008883:	f3 ab                	rep stos %eax,%es:(%edi)
c0008885:	c7 45 f0 0c 00 00 00 	movl   $0xc,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:782
	while (block_idx < 12) {
c000888c:	eb 22                	jmp    c00088b0 <get_child_dir_name+0x64>
/work/x86_os_my/fs/fs.c:783
		all_blocks[block_idx] = parent_dir_inode->i_sectors[block_idx];
c000888e:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0008892:	0f b6 4d f7          	movzbl -0x9(%ebp),%ecx
c0008896:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0008899:	83 c1 04             	add    $0x4,%ecx
c000889c:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
c000889f:	89 94 85 ac fd ff ff 	mov    %edx,-0x254(%ebp,%eax,4)
/work/x86_os_my/fs/fs.c:784
		block_idx++;
c00088a6:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00088aa:	83 c0 01             	add    $0x1,%eax
c00088ad:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:782
static int get_child_dir_name(uint32_t p_inode_nr, uint32_t c_inode_nr, char* path, void* io_buf) {
	struct inode* parent_dir_inode = inode_open(cur_part, p_inode_nr);
	/* 填充all_blocks,将该目录的所占扇区地址全部写入all_blocks */
	uint8_t block_idx = 0;
	uint32_t all_blocks[140] = {0}, block_cnt = 12;
	while (block_idx < 12) {
c00088b0:	80 7d f7 0b          	cmpb   $0xb,-0x9(%ebp)
c00088b4:	76 d8                	jbe    c000888e <get_child_dir_name+0x42>
/work/x86_os_my/fs/fs.c:786
		all_blocks[block_idx] = parent_dir_inode->i_sectors[block_idx];
		block_idx++;
	}
	if (parent_dir_inode->i_sectors[12]) {	// 若包含了一级间接块表,将共读入all_blocks.
c00088b6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00088b9:	8b 40 40             	mov    0x40(%eax),%eax
c00088bc:	85 c0                	test   %eax,%eax
c00088be:	74 2c                	je     c00088ec <get_child_dir_name+0xa0>
/work/x86_os_my/fs/fs.c:787
		ide_read(cur_part->my_disk, parent_dir_inode->i_sectors[12], all_blocks + 12, 1);
c00088c0:	8d 85 ac fd ff ff    	lea    -0x254(%ebp),%eax
c00088c6:	83 c0 30             	add    $0x30,%eax
c00088c9:	8b 55 e8             	mov    -0x18(%ebp),%edx
c00088cc:	8b 4a 40             	mov    0x40(%edx),%ecx
c00088cf:	8b 15 d0 4a 01 c0    	mov    0xc0014ad0,%edx
c00088d5:	8b 52 08             	mov    0x8(%edx),%edx
c00088d8:	6a 01                	push   $0x1
c00088da:	50                   	push   %eax
c00088db:	51                   	push   %ecx
c00088dc:	52                   	push   %edx
c00088dd:	e8 93 db ff ff       	call   c0006475 <ide_read>
c00088e2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:788
		block_cnt = 140;
c00088e5:	c7 45 f0 8c 00 00 00 	movl   $0x8c,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:790
	}
	inode_close(parent_dir_inode);
c00088ec:	83 ec 0c             	sub    $0xc,%esp
c00088ef:	ff 75 e8             	pushl  -0x18(%ebp)
c00088f2:	e8 c5 09 00 00       	call   c00092bc <inode_close>
c00088f7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:792

	struct dir_entry* dir_e = (struct dir_entry*)io_buf;
c00088fa:	8b 45 14             	mov    0x14(%ebp),%eax
c00088fd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/fs.c:793
	uint32_t dir_entry_size = cur_part->sb->dir_entry_size;
c0008900:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c0008905:	8b 40 1c             	mov    0x1c(%eax),%eax
c0008908:	8b 40 30             	mov    0x30(%eax),%eax
c000890b:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/fs.c:794
	uint32_t dir_entrys_per_sec = (512 / dir_entry_size);
c000890e:	b8 00 02 00 00       	mov    $0x200,%eax
c0008913:	ba 00 00 00 00       	mov    $0x0,%edx
c0008918:	f7 75 e0             	divl   -0x20(%ebp)
c000891b:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/fs.c:795
	block_idx = 0;
c000891e:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:797
	/* 遍历所有块 */
	while(block_idx < block_cnt) {
c0008922:	e9 b1 00 00 00       	jmp    c00089d8 <get_child_dir_name+0x18c>
/work/x86_os_my/fs/fs.c:798
		if(all_blocks[block_idx]) {      // 如果相应块不为空则读入相应块
c0008927:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000892b:	8b 84 85 ac fd ff ff 	mov    -0x254(%ebp,%eax,4),%eax
c0008932:	85 c0                	test   %eax,%eax
c0008934:	0f 84 94 00 00 00    	je     c00089ce <get_child_dir_name+0x182>
/work/x86_os_my/fs/fs.c:799
			ide_read(cur_part->my_disk, all_blocks[block_idx], io_buf, 1);
c000893a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000893e:	8b 94 85 ac fd ff ff 	mov    -0x254(%ebp,%eax,4),%edx
c0008945:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000894a:	8b 40 08             	mov    0x8(%eax),%eax
c000894d:	6a 01                	push   $0x1
c000894f:	ff 75 14             	pushl  0x14(%ebp)
c0008952:	52                   	push   %edx
c0008953:	50                   	push   %eax
c0008954:	e8 1c db ff ff       	call   c0006475 <ide_read>
c0008959:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:800
			uint8_t dir_e_idx = 0;
c000895c:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
/work/x86_os_my/fs/fs.c:802
			/* 遍历每个目录项 */
			while(dir_e_idx < dir_entrys_per_sec) {
c0008960:	eb 63                	jmp    c00089c5 <get_child_dir_name+0x179>
/work/x86_os_my/fs/fs.c:803
				if ((dir_e + dir_e_idx)->i_no == c_inode_nr) {
c0008962:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c0008966:	89 d0                	mov    %edx,%eax
c0008968:	01 c0                	add    %eax,%eax
c000896a:	01 d0                	add    %edx,%eax
c000896c:	c1 e0 03             	shl    $0x3,%eax
c000896f:	89 c2                	mov    %eax,%edx
c0008971:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0008974:	01 d0                	add    %edx,%eax
c0008976:	8b 40 10             	mov    0x10(%eax),%eax
c0008979:	3b 45 0c             	cmp    0xc(%ebp),%eax
c000897c:	75 3d                	jne    c00089bb <get_child_dir_name+0x16f>
/work/x86_os_my/fs/fs.c:804
					strcat(path, "/");
c000897e:	83 ec 08             	sub    $0x8,%esp
c0008981:	68 cf e4 00 c0       	push   $0xc000e4cf
c0008986:	ff 75 10             	pushl  0x10(%ebp)
c0008989:	e8 7b b3 ff ff       	call   c0003d09 <strcat>
c000898e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:805
					strcat(path, (dir_e + dir_e_idx)->filename);
c0008991:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c0008995:	89 d0                	mov    %edx,%eax
c0008997:	01 c0                	add    %eax,%eax
c0008999:	01 d0                	add    %edx,%eax
c000899b:	c1 e0 03             	shl    $0x3,%eax
c000899e:	89 c2                	mov    %eax,%edx
c00089a0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00089a3:	01 d0                	add    %edx,%eax
c00089a5:	83 ec 08             	sub    $0x8,%esp
c00089a8:	50                   	push   %eax
c00089a9:	ff 75 10             	pushl  0x10(%ebp)
c00089ac:	e8 58 b3 ff ff       	call   c0003d09 <strcat>
c00089b1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:806
					return 0;
c00089b4:	b8 00 00 00 00       	mov    $0x0,%eax
c00089b9:	eb 2f                	jmp    c00089ea <get_child_dir_name+0x19e>
/work/x86_os_my/fs/fs.c:808
				}
				dir_e_idx++;
c00089bb:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c00089bf:	83 c0 01             	add    $0x1,%eax
c00089c2:	88 45 ef             	mov    %al,-0x11(%ebp)
/work/x86_os_my/fs/fs.c:802
	while(block_idx < block_cnt) {
		if(all_blocks[block_idx]) {      // 如果相应块不为空则读入相应块
			ide_read(cur_part->my_disk, all_blocks[block_idx], io_buf, 1);
			uint8_t dir_e_idx = 0;
			/* 遍历每个目录项 */
			while(dir_e_idx < dir_entrys_per_sec) {
c00089c5:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c00089c9:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c00089cc:	72 94                	jb     c0008962 <get_child_dir_name+0x116>
/work/x86_os_my/fs/fs.c:811
					return 0;
				}
				dir_e_idx++;
			}
		}
		block_idx++;
c00089ce:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00089d2:	83 c0 01             	add    $0x1,%eax
c00089d5:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:797
	struct dir_entry* dir_e = (struct dir_entry*)io_buf;
	uint32_t dir_entry_size = cur_part->sb->dir_entry_size;
	uint32_t dir_entrys_per_sec = (512 / dir_entry_size);
	block_idx = 0;
	/* 遍历所有块 */
	while(block_idx < block_cnt) {
c00089d8:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00089dc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c00089df:	0f 82 42 ff ff ff    	jb     c0008927 <get_child_dir_name+0xdb>
/work/x86_os_my/fs/fs.c:813
				dir_e_idx++;
			}
		}
		block_idx++;
	}
	return -1;
c00089e5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
/work/x86_os_my/fs/fs.c:814 (discriminator 1)
}
c00089ea:	8b 7d fc             	mov    -0x4(%ebp),%edi
c00089ed:	c9                   	leave  
c00089ee:	c3                   	ret    

c00089ef <sys_getcwd>:
sys_getcwd():
/work/x86_os_my/fs/fs.c:819

/* 把当前工作目录绝对路径写入buf, size是buf的大小.
 当buf为NULL时,由操作系统分配存储工作路径的空间并返回地址
 失败则返回NULL */
char* sys_getcwd(char* buf, uint32_t size) {
c00089ef:	55                   	push   %ebp
c00089f0:	89 e5                	mov    %esp,%ebp
c00089f2:	57                   	push   %edi
c00089f3:	53                   	push   %ebx
c00089f4:	81 ec 20 02 00 00    	sub    $0x220,%esp
/work/x86_os_my/fs/fs.c:822
	/* 确保buf不为空,若用户进程提供的buf为NULL,
	系统调用getcwd中要为用户进程通过malloc分配内存 */
	ASSERT(buf != NULL);
c00089fa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00089fe:	75 1c                	jne    c0008a1c <sys_getcwd+0x2d>
/work/x86_os_my/fs/fs.c:822 (discriminator 1)
c0008a00:	68 ba e6 00 c0       	push   $0xc000e6ba
c0008a05:	68 c8 eb 00 c0       	push   $0xc000ebc8
c0008a0a:	68 36 03 00 00       	push   $0x336
c0008a0f:	68 55 e3 00 c0       	push   $0xc000e355
c0008a14:	e8 e8 9a ff ff       	call   c0002501 <panic_spin>
c0008a19:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:823
	void* io_buf = sys_malloc(SECTOR_SIZE);
c0008a1c:	83 ec 0c             	sub    $0xc,%esp
c0008a1f:	68 00 02 00 00       	push   $0x200
c0008a24:	e8 83 a4 ff ff       	call   c0002eac <sys_malloc>
c0008a29:	83 c4 10             	add    $0x10,%esp
c0008a2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:824
	if (io_buf == NULL) {
c0008a2f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0008a33:	75 0a                	jne    c0008a3f <sys_getcwd+0x50>
/work/x86_os_my/fs/fs.c:825
		return NULL;
c0008a35:	b8 00 00 00 00       	mov    $0x0,%eax
c0008a3a:	e9 9d 01 00 00       	jmp    c0008bdc <sys_getcwd+0x1ed>
/work/x86_os_my/fs/fs.c:828
	}

	struct task_struct* cur_thread = running_thread();
c0008a3f:	e8 a8 b3 ff ff       	call   c0003dec <running_thread>
c0008a44:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:829
	int32_t parent_inode_nr = 0;
c0008a47:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:830
	int32_t child_inode_nr = cur_thread->cwd_inode_nr;
c0008a4e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008a51:	8b 80 0c 01 00 00    	mov    0x10c(%eax),%eax
c0008a57:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:831
	ASSERT(child_inode_nr >= 0 && child_inode_nr < 4096);	// inode位图，最大支持4096个inode
c0008a5a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0008a5e:	78 09                	js     c0008a69 <sys_getcwd+0x7a>
/work/x86_os_my/fs/fs.c:831 (discriminator 1)
c0008a60:	81 7d f4 ff 0f 00 00 	cmpl   $0xfff,-0xc(%ebp)
c0008a67:	7e 1c                	jle    c0008a85 <sys_getcwd+0x96>
/work/x86_os_my/fs/fs.c:831 (discriminator 3)
c0008a69:	68 2c ea 00 c0       	push   $0xc000ea2c
c0008a6e:	68 c8 eb 00 c0       	push   $0xc000ebc8
c0008a73:	68 3f 03 00 00       	push   $0x33f
c0008a78:	68 55 e3 00 c0       	push   $0xc000e355
c0008a7d:	e8 7f 9a ff ff       	call   c0002501 <panic_spin>
c0008a82:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:833
	/* 若当前目录是根目录,直接返回'/' */
	if (child_inode_nr == 0) {
c0008a85:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0008a89:	75 25                	jne    c0008ab0 <sys_getcwd+0xc1>
/work/x86_os_my/fs/fs.c:834
		buf[0] = '/';
c0008a8b:	8b 45 08             	mov    0x8(%ebp),%eax
c0008a8e:	c6 00 2f             	movb   $0x2f,(%eax)
/work/x86_os_my/fs/fs.c:835
		buf[1] = 0;
c0008a91:	8b 45 08             	mov    0x8(%ebp),%eax
c0008a94:	83 c0 01             	add    $0x1,%eax
c0008a97:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/fs/fs.c:836
		sys_free(io_buf);
c0008a9a:	83 ec 0c             	sub    $0xc,%esp
c0008a9d:	ff 75 f0             	pushl  -0x10(%ebp)
c0008aa0:	e8 34 aa ff ff       	call   c00034d9 <sys_free>
c0008aa5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:837
		return buf;
c0008aa8:	8b 45 08             	mov    0x8(%ebp),%eax
c0008aab:	e9 2c 01 00 00       	jmp    c0008bdc <sys_getcwd+0x1ed>
/work/x86_os_my/fs/fs.c:840
	}

	memset(buf, 0, size);
c0008ab0:	83 ec 04             	sub    $0x4,%esp
c0008ab3:	ff 75 0c             	pushl  0xc(%ebp)
c0008ab6:	6a 00                	push   $0x0
c0008ab8:	ff 75 08             	pushl  0x8(%ebp)
c0008abb:	e8 45 af ff ff       	call   c0003a05 <memset>
c0008ac0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:841
	char full_path_reverse[MAX_PATH_LEN] = {0};	// 用来做全路径缓冲区
c0008ac3:	8d 85 e2 fd ff ff    	lea    -0x21e(%ebp),%eax
c0008ac9:	b9 00 02 00 00       	mov    $0x200,%ecx
c0008ace:	bb 00 00 00 00       	mov    $0x0,%ebx
c0008ad3:	89 18                	mov    %ebx,(%eax)
c0008ad5:	89 5c 08 fc          	mov    %ebx,-0x4(%eax,%ecx,1)
c0008ad9:	8d 50 04             	lea    0x4(%eax),%edx
c0008adc:	83 e2 fc             	and    $0xfffffffc,%edx
c0008adf:	29 d0                	sub    %edx,%eax
c0008ae1:	01 c1                	add    %eax,%ecx
c0008ae3:	83 e1 fc             	and    $0xfffffffc,%ecx
c0008ae6:	c1 e9 02             	shr    $0x2,%ecx
c0008ae9:	89 d7                	mov    %edx,%edi
c0008aeb:	89 d8                	mov    %ebx,%eax
c0008aed:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/fs/fs.c:846

	/* 从下往上逐层找父目录,直到找到根目录为止.
	 * 当child_inode_nr为根目录的inode编号(0)时停止,
	 * 即已经查看完根目录中的目录项 */
	while ((child_inode_nr)) {
c0008aef:	eb 52                	jmp    c0008b43 <sys_getcwd+0x154>
/work/x86_os_my/fs/fs.c:847
		parent_inode_nr = get_parent_dir_inode_nr(child_inode_nr, io_buf);
c0008af1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0008af4:	83 ec 08             	sub    $0x8,%esp
c0008af7:	ff 75 f0             	pushl  -0x10(%ebp)
c0008afa:	50                   	push   %eax
c0008afb:	e8 88 fc ff ff       	call   c0008788 <get_parent_dir_inode_nr>
c0008b00:	83 c4 10             	add    $0x10,%esp
c0008b03:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:848
		if (get_child_dir_name(parent_inode_nr, child_inode_nr, full_path_reverse, io_buf) == -1) {	// 或未找到名字,失败退出
c0008b06:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0008b09:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0008b0c:	ff 75 f0             	pushl  -0x10(%ebp)
c0008b0f:	8d 8d e2 fd ff ff    	lea    -0x21e(%ebp),%ecx
c0008b15:	51                   	push   %ecx
c0008b16:	52                   	push   %edx
c0008b17:	50                   	push   %eax
c0008b18:	e8 2f fd ff ff       	call   c000884c <get_child_dir_name>
c0008b1d:	83 c4 10             	add    $0x10,%esp
c0008b20:	83 f8 ff             	cmp    $0xffffffff,%eax
c0008b23:	75 18                	jne    c0008b3d <sys_getcwd+0x14e>
/work/x86_os_my/fs/fs.c:849
			sys_free(io_buf);
c0008b25:	83 ec 0c             	sub    $0xc,%esp
c0008b28:	ff 75 f0             	pushl  -0x10(%ebp)
c0008b2b:	e8 a9 a9 ff ff       	call   c00034d9 <sys_free>
c0008b30:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:850
			return NULL;
c0008b33:	b8 00 00 00 00       	mov    $0x0,%eax
c0008b38:	e9 9f 00 00 00       	jmp    c0008bdc <sys_getcwd+0x1ed>
/work/x86_os_my/fs/fs.c:852
		}
		child_inode_nr = parent_inode_nr;
c0008b3d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0008b40:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:846
	char full_path_reverse[MAX_PATH_LEN] = {0};	// 用来做全路径缓冲区

	/* 从下往上逐层找父目录,直到找到根目录为止.
	 * 当child_inode_nr为根目录的inode编号(0)时停止,
	 * 即已经查看完根目录中的目录项 */
	while ((child_inode_nr)) {
c0008b43:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0008b47:	75 a8                	jne    c0008af1 <sys_getcwd+0x102>
/work/x86_os_my/fs/fs.c:854
			sys_free(io_buf);
			return NULL;
		}
		child_inode_nr = parent_inode_nr;
	}
	ASSERT(strlen(full_path_reverse) <= size);
c0008b49:	83 ec 0c             	sub    $0xc,%esp
c0008b4c:	8d 85 e2 fd ff ff    	lea    -0x21e(%ebp),%eax
c0008b52:	50                   	push   %eax
c0008b53:	e8 37 b0 ff ff       	call   c0003b8f <strlen>
c0008b58:	83 c4 10             	add    $0x10,%esp
c0008b5b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0008b5e:	76 4e                	jbe    c0008bae <sys_getcwd+0x1bf>
/work/x86_os_my/fs/fs.c:854 (discriminator 1)
c0008b60:	68 5c ea 00 c0       	push   $0xc000ea5c
c0008b65:	68 c8 eb 00 c0       	push   $0xc000ebc8
c0008b6a:	68 56 03 00 00       	push   $0x356
c0008b6f:	68 55 e3 00 c0       	push   $0xc000e355
c0008b74:	e8 88 99 ff ff       	call   c0002501 <panic_spin>
c0008b79:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:859 (discriminator 1)
	/* 至此 full_path_reverse 中的路径是反着的,
	 * 即子目录在前(左),父目录在后(右) ,
	 * 现将full_path_reverse中的路径反置 */
	char* last_slash;	// 用于记录字符串中最后一个斜杠地址
	while ((last_slash = strrchr(full_path_reverse, '/'))) {
c0008b7c:	eb 30                	jmp    c0008bae <sys_getcwd+0x1bf>
/work/x86_os_my/fs/fs.c:860
		uint16_t len = strlen(buf);
c0008b7e:	83 ec 0c             	sub    $0xc,%esp
c0008b81:	ff 75 08             	pushl  0x8(%ebp)
c0008b84:	e8 06 b0 ff ff       	call   c0003b8f <strlen>
c0008b89:	83 c4 10             	add    $0x10,%esp
c0008b8c:	66 89 45 e2          	mov    %ax,-0x1e(%ebp)
/work/x86_os_my/fs/fs.c:861
		strcpy(buf + len, last_slash);
c0008b90:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0008b94:	8b 45 08             	mov    0x8(%ebp),%eax
c0008b97:	01 d0                	add    %edx,%eax
c0008b99:	83 ec 08             	sub    $0x8,%esp
c0008b9c:	ff 75 e4             	pushl  -0x1c(%ebp)
c0008b9f:	50                   	push   %eax
c0008ba0:	e8 95 af ff ff       	call   c0003b3a <strcpy>
c0008ba5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:863
		/* 在full_path_reverse中添加结束字符,做为下一次执行strcpy中last_slash的边界 */
		*last_slash = 0;
c0008ba8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0008bab:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/fs/fs.c:859
	ASSERT(strlen(full_path_reverse) <= size);
	/* 至此 full_path_reverse 中的路径是反着的,
	 * 即子目录在前(左),父目录在后(右) ,
	 * 现将full_path_reverse中的路径反置 */
	char* last_slash;	// 用于记录字符串中最后一个斜杠地址
	while ((last_slash = strrchr(full_path_reverse, '/'))) {
c0008bae:	83 ec 08             	sub    $0x8,%esp
c0008bb1:	6a 2f                	push   $0x2f
c0008bb3:	8d 85 e2 fd ff ff    	lea    -0x21e(%ebp),%eax
c0008bb9:	50                   	push   %eax
c0008bba:	e8 ec b0 ff ff       	call   c0003cab <strrchr>
c0008bbf:	83 c4 10             	add    $0x10,%esp
c0008bc2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0008bc5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0008bc9:	75 b3                	jne    c0008b7e <sys_getcwd+0x18f>
/work/x86_os_my/fs/fs.c:865
		uint16_t len = strlen(buf);
		strcpy(buf + len, last_slash);
		/* 在full_path_reverse中添加结束字符,做为下一次执行strcpy中last_slash的边界 */
		*last_slash = 0;
	}
	sys_free(io_buf);
c0008bcb:	83 ec 0c             	sub    $0xc,%esp
c0008bce:	ff 75 f0             	pushl  -0x10(%ebp)
c0008bd1:	e8 03 a9 ff ff       	call   c00034d9 <sys_free>
c0008bd6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:866
	return buf;
c0008bd9:	8b 45 08             	mov    0x8(%ebp),%eax
/work/x86_os_my/fs/fs.c:867 (discriminator 2)
}
c0008bdc:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0008bdf:	5b                   	pop    %ebx
c0008be0:	5f                   	pop    %edi
c0008be1:	5d                   	pop    %ebp
c0008be2:	c3                   	ret    

c0008be3 <sys_chdir>:
sys_chdir():
/work/x86_os_my/fs/fs.c:870

/* 更改当前工作目录为绝对路径path,成功则返回0,失败返回-1 */
int32_t sys_chdir(const char* path) {
c0008be3:	55                   	push   %ebp
c0008be4:	89 e5                	mov    %esp,%ebp
c0008be6:	81 ec 18 02 00 00    	sub    $0x218,%esp
/work/x86_os_my/fs/fs.c:871
	int32_t ret = -1;
c0008bec:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:873
	struct path_search_record searched_record;
	memset(&searched_record, 0, sizeof(struct path_search_record));
c0008bf3:	83 ec 04             	sub    $0x4,%esp
c0008bf6:	68 08 02 00 00       	push   $0x208
c0008bfb:	6a 00                	push   $0x0
c0008bfd:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
c0008c03:	50                   	push   %eax
c0008c04:	e8 fc ad ff ff       	call   c0003a05 <memset>
c0008c09:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:874
	int inode_no = search_file(path, &searched_record);
c0008c0c:	83 ec 08             	sub    $0x8,%esp
c0008c0f:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
c0008c15:	50                   	push   %eax
c0008c16:	ff 75 08             	pushl  0x8(%ebp)
c0008c19:	e8 6c ea ff ff       	call   c000768a <search_file>
c0008c1e:	83 c4 10             	add    $0x10,%esp
c0008c21:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:875
	if (inode_no != -1) {
c0008c24:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c0008c28:	74 34                	je     c0008c5e <sys_chdir+0x7b>
/work/x86_os_my/fs/fs.c:876
		if (searched_record.file_type == FT_DIRECTORY) {
c0008c2a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008c2d:	83 f8 02             	cmp    $0x2,%eax
c0008c30:	75 19                	jne    c0008c4b <sys_chdir+0x68>
/work/x86_os_my/fs/fs.c:877
			running_thread()->cwd_inode_nr = inode_no;
c0008c32:	e8 b5 b1 ff ff       	call   c0003dec <running_thread>
c0008c37:	89 c2                	mov    %eax,%edx
c0008c39:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008c3c:	89 82 0c 01 00 00    	mov    %eax,0x10c(%edx)
/work/x86_os_my/fs/fs.c:878
			ret = 0;
c0008c42:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0008c49:	eb 13                	jmp    c0008c5e <sys_chdir+0x7b>
/work/x86_os_my/fs/fs.c:880
		} else {
			printk("sys_chdir: %s is regular file or other!\n", path);
c0008c4b:	83 ec 08             	sub    $0x8,%esp
c0008c4e:	ff 75 08             	pushl  0x8(%ebp)
c0008c51:	68 80 ea 00 c0       	push   $0xc000ea80
c0008c56:	e8 93 e2 ff ff       	call   c0006eee <printk>
c0008c5b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:883
		}
	}
	dir_close(searched_record.parent_dir);
c0008c5e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0008c61:	83 ec 0c             	sub    $0xc,%esp
c0008c64:	50                   	push   %eax
c0008c65:	e8 f5 1d 00 00       	call   c000aa5f <dir_close>
c0008c6a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:884
	return ret;
c0008c6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:885
}
c0008c70:	c9                   	leave  
c0008c71:	c3                   	ret    

c0008c72 <sys_stat>:
sys_stat():
/work/x86_os_my/fs/fs.c:888

/* 在buf中填充文件结构相关信息,成功时返回0,失败返回-1 */
int32_t sys_stat(const char* path, struct stat* buf) {
c0008c72:	55                   	push   %ebp
c0008c73:	89 e5                	mov    %esp,%ebp
c0008c75:	81 ec 28 02 00 00    	sub    $0x228,%esp
/work/x86_os_my/fs/fs.c:890
	/* 若直接查看根目录'/' */
	if (!strcmp(path, "/") || !strcmp(path, "/.") || !strcmp(path, "/..")) {
c0008c7b:	83 ec 08             	sub    $0x8,%esp
c0008c7e:	68 cf e4 00 c0       	push   $0xc000e4cf
c0008c83:	ff 75 08             	pushl  0x8(%ebp)
c0008c86:	e8 4f af ff ff       	call   c0003bda <strcmp>
c0008c8b:	83 c4 10             	add    $0x10,%esp
c0008c8e:	84 c0                	test   %al,%al
c0008c90:	74 2e                	je     c0008cc0 <sys_stat+0x4e>
/work/x86_os_my/fs/fs.c:890 (discriminator 1)
c0008c92:	83 ec 08             	sub    $0x8,%esp
c0008c95:	68 d1 e4 00 c0       	push   $0xc000e4d1
c0008c9a:	ff 75 08             	pushl  0x8(%ebp)
c0008c9d:	e8 38 af ff ff       	call   c0003bda <strcmp>
c0008ca2:	83 c4 10             	add    $0x10,%esp
c0008ca5:	84 c0                	test   %al,%al
c0008ca7:	74 17                	je     c0008cc0 <sys_stat+0x4e>
/work/x86_os_my/fs/fs.c:890 (discriminator 2)
c0008ca9:	83 ec 08             	sub    $0x8,%esp
c0008cac:	68 d4 e4 00 c0       	push   $0xc000e4d4
c0008cb1:	ff 75 08             	pushl  0x8(%ebp)
c0008cb4:	e8 21 af ff ff       	call   c0003bda <strcmp>
c0008cb9:	83 c4 10             	add    $0x10,%esp
c0008cbc:	84 c0                	test   %al,%al
c0008cbe:	75 2b                	jne    c0008ceb <sys_stat+0x79>
/work/x86_os_my/fs/fs.c:891
		buf->st_filetype = FT_DIRECTORY;
c0008cc0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0008cc3:	c7 40 08 02 00 00 00 	movl   $0x2,0x8(%eax)
/work/x86_os_my/fs/fs.c:892
		buf->st_ino = 0;
c0008cca:	8b 45 0c             	mov    0xc(%ebp),%eax
c0008ccd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/fs/fs.c:893
		buf->st_size = root_dir.inode->i_size;
c0008cd3:	a1 60 4c 01 c0       	mov    0xc0014c60,%eax
c0008cd8:	8b 50 04             	mov    0x4(%eax),%edx
c0008cdb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0008cde:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/fs.c:894
		return 0;
c0008ce1:	b8 00 00 00 00       	mov    $0x0,%eax
c0008ce6:	e9 af 00 00 00       	jmp    c0008d9a <sys_stat+0x128>
/work/x86_os_my/fs/fs.c:897
	}

	int32_t ret = -1;	// 默认返回值
c0008ceb:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:899
	struct path_search_record searched_record;
	memset(&searched_record, 0, sizeof(struct path_search_record));   // 记得初始化或清0,否则栈中信息不知道是什么
c0008cf2:	83 ec 04             	sub    $0x4,%esp
c0008cf5:	68 08 02 00 00       	push   $0x208
c0008cfa:	6a 00                	push   $0x0
c0008cfc:	8d 85 e4 fd ff ff    	lea    -0x21c(%ebp),%eax
c0008d02:	50                   	push   %eax
c0008d03:	e8 fd ac ff ff       	call   c0003a05 <memset>
c0008d08:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:900
	int inode_no = search_file(path, &searched_record);
c0008d0b:	83 ec 08             	sub    $0x8,%esp
c0008d0e:	8d 85 e4 fd ff ff    	lea    -0x21c(%ebp),%eax
c0008d14:	50                   	push   %eax
c0008d15:	ff 75 08             	pushl  0x8(%ebp)
c0008d18:	e8 6d e9 ff ff       	call   c000768a <search_file>
c0008d1d:	83 c4 10             	add    $0x10,%esp
c0008d20:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:901
	if (inode_no != -1) {
c0008d23:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c0008d27:	74 4c                	je     c0008d75 <sys_stat+0x103>
/work/x86_os_my/fs/fs.c:902
		struct inode* obj_inode = inode_open(cur_part, inode_no);   // 只为获得文件大小
c0008d29:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0008d2c:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c0008d31:	83 ec 08             	sub    $0x8,%esp
c0008d34:	52                   	push   %edx
c0008d35:	50                   	push   %eax
c0008d36:	e8 3b 04 00 00       	call   c0009176 <inode_open>
c0008d3b:	83 c4 10             	add    $0x10,%esp
c0008d3e:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:903
		buf->st_size = obj_inode->i_size;
c0008d41:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008d44:	8b 50 04             	mov    0x4(%eax),%edx
c0008d47:	8b 45 0c             	mov    0xc(%ebp),%eax
c0008d4a:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/fs.c:904
		inode_close(obj_inode);
c0008d4d:	83 ec 0c             	sub    $0xc,%esp
c0008d50:	ff 75 ec             	pushl  -0x14(%ebp)
c0008d53:	e8 64 05 00 00       	call   c00092bc <inode_close>
c0008d58:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:905
		buf->st_filetype = searched_record.file_type;
c0008d5b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0008d5e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0008d61:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/fs/fs.c:906
		buf->st_ino = inode_no;
c0008d64:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0008d67:	8b 45 0c             	mov    0xc(%ebp),%eax
c0008d6a:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/fs/fs.c:907
		ret = 0;
c0008d6c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0008d73:	eb 13                	jmp    c0008d88 <sys_stat+0x116>
/work/x86_os_my/fs/fs.c:909
	} else {
		printk("sys_stat: %s not found\n", path);
c0008d75:	83 ec 08             	sub    $0x8,%esp
c0008d78:	ff 75 08             	pushl  0x8(%ebp)
c0008d7b:	68 a9 ea 00 c0       	push   $0xc000eaa9
c0008d80:	e8 69 e1 ff ff       	call   c0006eee <printk>
c0008d85:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:911
	}
	dir_close(searched_record.parent_dir);
c0008d88:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0008d8b:	83 ec 0c             	sub    $0xc,%esp
c0008d8e:	50                   	push   %eax
c0008d8f:	e8 cb 1c 00 00       	call   c000aa5f <dir_close>
c0008d94:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:912
	return ret;
c0008d97:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:913 (discriminator 1)
}
c0008d9a:	c9                   	leave  
c0008d9b:	c3                   	ret    

c0008d9c <sys_putchar>:
sys_putchar():
/work/x86_os_my/fs/fs.c:916

/* 向屏幕输出一个字符 */
void sys_putchar(char char_asci) {
c0008d9c:	55                   	push   %ebp
c0008d9d:	89 e5                	mov    %esp,%ebp
c0008d9f:	83 ec 18             	sub    $0x18,%esp
c0008da2:	8b 45 08             	mov    0x8(%ebp),%eax
c0008da5:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:917
	console_put_char(char_asci);
c0008da8:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0008dac:	0f b6 c0             	movzbl %al,%eax
c0008daf:	83 ec 0c             	sub    $0xc,%esp
c0008db2:	50                   	push   %eax
c0008db3:	e8 99 be ff ff       	call   c0004c51 <console_put_char>
c0008db8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:918
}
c0008dbb:	90                   	nop
c0008dbc:	c9                   	leave  
c0008dbd:	c3                   	ret    

c0008dbe <filesys_init>:
filesys_init():
/work/x86_os_my/fs/fs.c:930
 * 只支持 partition_format 函数创建的文件系统，其魔数等于 0x19590318
 * 三层循环：遍历通道，遍历通道中的硬盘，遍历硬盘上的分区
 * 全局变量 channel_cnt 通道数，定义在 ide.c
 * 全局变量 channels 结构体，定义在 ide.c
 */
void filesys_init() {
c0008dbe:	55                   	push   %ebp
c0008dbf:	89 e5                	mov    %esp,%ebp
c0008dc1:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/fs/fs.c:931
	uint8_t channel_no = 0, dev_no, part_idx = 0;
c0008dc4:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
c0008dc8:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
/work/x86_os_my/fs/fs.c:934

	/* sb_buf用来存储从硬盘上读入的超级块 */
	struct super_block* sb_buf = (struct super_block*)sys_malloc(SECTOR_SIZE);
c0008dcc:	83 ec 0c             	sub    $0xc,%esp
c0008dcf:	68 00 02 00 00       	push   $0x200
c0008dd4:	e8 d3 a0 ff ff       	call   c0002eac <sys_malloc>
c0008dd9:	83 c4 10             	add    $0x10,%esp
c0008ddc:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:935
	if (sb_buf == NULL) {
c0008ddf:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0008de3:	75 1c                	jne    c0008e01 <filesys_init+0x43>
/work/x86_os_my/fs/fs.c:936
		PANIC("alloc memory failed!");
c0008de5:	68 40 e3 00 c0       	push   $0xc000e340
c0008dea:	68 d4 eb 00 c0       	push   $0xc000ebd4
c0008def:	68 a8 03 00 00       	push   $0x3a8
c0008df4:	68 55 e3 00 c0       	push   $0xc000e355
c0008df9:	e8 03 97 ff ff       	call   c0002501 <panic_spin>
c0008dfe:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:939
	}

	printk("searching filesystem......\n");
c0008e01:	83 ec 0c             	sub    $0xc,%esp
c0008e04:	68 c1 ea 00 c0       	push   $0xc000eac1
c0008e09:	e8 e0 e0 ff ff       	call   c0006eee <printk>
c0008e0e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:941
	/* 遍历通道 */
	while (channel_no < channel_cnt) {
c0008e11:	e9 1a 01 00 00       	jmp    c0008f30 <filesys_init+0x172>
/work/x86_os_my/fs/fs.c:942
		dev_no = 0;
c0008e16:	c6 45 f6 00          	movb   $0x0,-0xa(%ebp)
/work/x86_os_my/fs/fs.c:944
		/* 遍历通道里的硬盘 */
		while(dev_no < 2) {
c0008e1a:	e9 fd 00 00 00       	jmp    c0008f1c <filesys_init+0x15e>
/work/x86_os_my/fs/fs.c:945
			if (dev_no == 0) {		// 跨过裸盘hd60M.img
c0008e1f:	80 7d f6 00          	cmpb   $0x0,-0xa(%ebp)
c0008e23:	75 0f                	jne    c0008e34 <filesys_init+0x76>
/work/x86_os_my/fs/fs.c:946
				dev_no++;
c0008e25:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0008e29:	83 c0 01             	add    $0x1,%eax
c0008e2c:	88 45 f6             	mov    %al,-0xa(%ebp)
/work/x86_os_my/fs/fs.c:947
				continue;
c0008e2f:	e9 e8 00 00 00       	jmp    c0008f1c <filesys_init+0x15e>
/work/x86_os_my/fs/fs.c:949
			}
			struct disk* hd = &channels[channel_no].devices[dev_no];
c0008e34:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0008e38:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
c0008e3c:	69 d2 10 03 00 00    	imul   $0x310,%edx,%edx
c0008e42:	69 c0 60 06 00 00    	imul   $0x660,%eax,%eax
c0008e48:	01 d0                	add    %edx,%eax
c0008e4a:	83 c0 40             	add    $0x40,%eax
c0008e4d:	05 00 3e 01 c0       	add    $0xc0013e00,%eax
c0008e52:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/fs.c:950
			struct partition* part = hd->prim_parts;	// 主分区数组
c0008e55:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0008e58:	83 c0 10             	add    $0x10,%eax
c0008e5b:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:952
			/* 遍历硬盘里的分区 */
			while(part_idx < 12) {						// 4个主分区+8个逻辑
c0008e5e:	e9 a5 00 00 00       	jmp    c0008f08 <filesys_init+0x14a>
/work/x86_os_my/fs/fs.c:953
				if (part_idx == 4) {
c0008e63:	80 7d f5 04          	cmpb   $0x4,-0xb(%ebp)
c0008e67:	75 0b                	jne    c0008e74 <filesys_init+0xb6>
/work/x86_os_my/fs/fs.c:954
					part = hd->logic_parts;				// 逻辑分区数组
c0008e69:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0008e6c:	05 10 01 00 00       	add    $0x110,%eax
c0008e71:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:959
				}

				/* channels数组是全局变量,默认值为0
				 * 固 channels.disk.partition.sec_cnt 在未初始化时，也为0 */
				if (part->sec_cnt != 0) {	// 如果分区存在，以sec_cnt是否为0当判断依据
c0008e74:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008e77:	8b 40 04             	mov    0x4(%eax),%eax
c0008e7a:	85 c0                	test   %eax,%eax
c0008e7c:	74 7c                	je     c0008efa <filesys_init+0x13c>
/work/x86_os_my/fs/fs.c:960
					memset(sb_buf, 0, SECTOR_SIZE);
c0008e7e:	83 ec 04             	sub    $0x4,%esp
c0008e81:	68 00 02 00 00       	push   $0x200
c0008e86:	6a 00                	push   $0x0
c0008e88:	ff 75 e8             	pushl  -0x18(%ebp)
c0008e8b:	e8 75 ab ff ff       	call   c0003a05 <memset>
c0008e90:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:963

					/* 读出分区的超级块，根据魔数判断是否存在我们定义的文件系统  */
					ide_read(hd, part->start_lba + 1, sb_buf, 1);
c0008e93:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008e96:	8b 00                	mov    (%eax),%eax
c0008e98:	83 c0 01             	add    $0x1,%eax
c0008e9b:	6a 01                	push   $0x1
c0008e9d:	ff 75 e8             	pushl  -0x18(%ebp)
c0008ea0:	50                   	push   %eax
c0008ea1:	ff 75 e4             	pushl  -0x1c(%ebp)
c0008ea4:	e8 cc d5 ff ff       	call   c0006475 <ide_read>
c0008ea9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:964
					if (sb_buf->magic == 0x19590318) {
c0008eac:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0008eaf:	8b 00                	mov    (%eax),%eax
c0008eb1:	3d 18 03 59 19       	cmp    $0x19590318,%eax
c0008eb6:	75 19                	jne    c0008ed1 <filesys_init+0x113>
/work/x86_os_my/fs/fs.c:965
						printk("%s has filesystem\n", part->name);
c0008eb8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008ebb:	83 c0 14             	add    $0x14,%eax
c0008ebe:	83 ec 08             	sub    $0x8,%esp
c0008ec1:	50                   	push   %eax
c0008ec2:	68 dd ea 00 c0       	push   $0xc000eadd
c0008ec7:	e8 22 e0 ff ff       	call   c0006eee <printk>
c0008ecc:	83 c4 10             	add    $0x10,%esp
c0008ecf:	eb 29                	jmp    c0008efa <filesys_init+0x13c>
/work/x86_os_my/fs/fs.c:968
					} else {
						// 不存在我们的文件系统，则进行格式化
						printk("formatting %s`s partition %s......\n", hd->name, part->name);
c0008ed1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008ed4:	8d 50 14             	lea    0x14(%eax),%edx
c0008ed7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0008eda:	83 ec 04             	sub    $0x4,%esp
c0008edd:	52                   	push   %edx
c0008ede:	50                   	push   %eax
c0008edf:	68 f0 ea 00 c0       	push   $0xc000eaf0
c0008ee4:	e8 05 e0 ff ff       	call   c0006eee <printk>
c0008ee9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:969
						partition_format(part);
c0008eec:	83 ec 0c             	sub    $0xc,%esp
c0008eef:	ff 75 f0             	pushl  -0x10(%ebp)
c0008ef2:	e8 5e e2 ff ff       	call   c0007155 <partition_format>
c0008ef7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:972
					}
				}
				part_idx++;
c0008efa:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0008efe:	83 c0 01             	add    $0x1,%eax
c0008f01:	88 45 f5             	mov    %al,-0xb(%ebp)
/work/x86_os_my/fs/fs.c:973
				part++;
c0008f04:	83 45 f0 40          	addl   $0x40,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:952
				continue;
			}
			struct disk* hd = &channels[channel_no].devices[dev_no];
			struct partition* part = hd->prim_parts;	// 主分区数组
			/* 遍历硬盘里的分区 */
			while(part_idx < 12) {						// 4个主分区+8个逻辑
c0008f08:	80 7d f5 0b          	cmpb   $0xb,-0xb(%ebp)
c0008f0c:	0f 86 51 ff ff ff    	jbe    c0008e63 <filesys_init+0xa5>
/work/x86_os_my/fs/fs.c:975
					}
				}
				part_idx++;
				part++;
			}	/* end of 遍历分区 */
			dev_no++;
c0008f12:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0008f16:	83 c0 01             	add    $0x1,%eax
c0008f19:	88 45 f6             	mov    %al,-0xa(%ebp)
/work/x86_os_my/fs/fs.c:944
	printk("searching filesystem......\n");
	/* 遍历通道 */
	while (channel_no < channel_cnt) {
		dev_no = 0;
		/* 遍历通道里的硬盘 */
		while(dev_no < 2) {
c0008f1c:	80 7d f6 01          	cmpb   $0x1,-0xa(%ebp)
c0008f20:	0f 86 f9 fe ff ff    	jbe    c0008e1f <filesys_init+0x61>
/work/x86_os_my/fs/fs.c:977
				part_idx++;
				part++;
			}	/* end of 遍历分区 */
			dev_no++;
		}	/* end of 遍历硬盘 */
		channel_no++;
c0008f26:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0008f2a:	83 c0 01             	add    $0x1,%eax
c0008f2d:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:941
		PANIC("alloc memory failed!");
	}

	printk("searching filesystem......\n");
	/* 遍历通道 */
	while (channel_no < channel_cnt) {
c0008f30:	0f b6 05 e0 3d 01 c0 	movzbl 0xc0013de0,%eax
c0008f37:	38 45 f7             	cmp    %al,-0x9(%ebp)
c0008f3a:	0f 82 d6 fe ff ff    	jb     c0008e16 <filesys_init+0x58>
/work/x86_os_my/fs/fs.c:979
			}	/* end of 遍历分区 */
			dev_no++;
		}	/* end of 遍历硬盘 */
		channel_no++;
	}	/* end of 遍历通道 */
	sys_free(sb_buf);
c0008f40:	83 ec 0c             	sub    $0xc,%esp
c0008f43:	ff 75 e8             	pushl  -0x18(%ebp)
c0008f46:	e8 8e a5 ff ff       	call   c00034d9 <sys_free>
c0008f4b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:984


	/* 挂载分区 */
	/* 默认操作的分区 */
	char default_part[8] = "sdb1";
c0008f4e:	c7 45 dc 73 64 62 31 	movl   $0x31626473,-0x24(%ebp)
c0008f55:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
/work/x86_os_my/fs/fs.c:995
	参数：
	partition_list 是所有分区的链表
	mount_partition 是挂载分区的函数
	(int)default_part 将数组地址转换成整型作为 mount_partition 的参数
	*/
	list_traversal(&partition_list, mount_partition, (int)default_part);
c0008f5c:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0008f5f:	83 ec 04             	sub    $0x4,%esp
c0008f62:	50                   	push   %eax
c0008f63:	68 4a 6f 00 c0       	push   $0xc0006f4a
c0008f68:	68 c0 4a 01 c0       	push   $0xc0014ac0
c0008f6d:	e8 ad bb ff ff       	call   c0004b1f <list_traversal>
c0008f72:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:999


	/* 将当前分区的根目录打开 + 初始化文件表 */
	open_root_dir(cur_part);
c0008f75:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c0008f7a:	83 ec 0c             	sub    $0xc,%esp
c0008f7d:	50                   	push   %eax
c0008f7e:	e8 94 18 00 00       	call   c000a817 <open_root_dir>
c0008f83:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:1000
	uint32_t fd_idx = 0;
c0008f86:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:1001
	while (fd_idx < MAX_FILE_OPEN) {
c0008f8d:	eb 1d                	jmp    c0008fac <filesys_init+0x1ee>
/work/x86_os_my/fs/fs.c:1002
		file_table[fd_idx++].fd_inode = NULL;
c0008f8f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0008f92:	8d 42 01             	lea    0x1(%edx),%eax
c0008f95:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0008f98:	89 d0                	mov    %edx,%eax
c0008f9a:	01 c0                	add    %eax,%eax
c0008f9c:	01 d0                	add    %edx,%eax
c0008f9e:	c1 e0 02             	shl    $0x2,%eax
c0008fa1:	05 e8 4a 01 c0       	add    $0xc0014ae8,%eax
c0008fa6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/fs/fs.c:1001


	/* 将当前分区的根目录打开 + 初始化文件表 */
	open_root_dir(cur_part);
	uint32_t fd_idx = 0;
	while (fd_idx < MAX_FILE_OPEN) {
c0008fac:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
c0008fb0:	76 dd                	jbe    c0008f8f <filesys_init+0x1d1>
/work/x86_os_my/fs/fs.c:1004
		file_table[fd_idx++].fd_inode = NULL;
	}
}
c0008fb2:	90                   	nop
c0008fb3:	c9                   	leave  
c0008fb4:	c3                   	ret    

c0008fb5 <inode_locate>:
inode_locate():
/work/x86_os_my/fs/inode.c:23
};

/* 获取inode所在的扇区和扇区内的偏移量
 * out: inode_pos
 */
static void inode_locate(struct partition* part, uint32_t inode_no, struct inode_position* inode_pos) {
c0008fb5:	55                   	push   %ebp
c0008fb6:	89 e5                	mov    %esp,%ebp
c0008fb8:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/fs/inode.c:25
	/* inode_table在硬盘上是连续的 */
	ASSERT(inode_no < 4096);
c0008fbb:	81 7d 0c ff 0f 00 00 	cmpl   $0xfff,0xc(%ebp)
c0008fc2:	76 19                	jbe    c0008fdd <inode_locate+0x28>
/work/x86_os_my/fs/inode.c:25 (discriminator 1)
c0008fc4:	68 e4 eb 00 c0       	push   $0xc000ebe4
c0008fc9:	68 6c ec 00 c0       	push   $0xc000ec6c
c0008fce:	6a 19                	push   $0x19
c0008fd0:	68 f4 eb 00 c0       	push   $0xc000ebf4
c0008fd5:	e8 27 95 ff ff       	call   c0002501 <panic_spin>
c0008fda:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:26
	uint32_t inode_table_lba = part->sb->inode_table_lba;
c0008fdd:	8b 45 08             	mov    0x8(%ebp),%eax
c0008fe0:	8b 40 1c             	mov    0x1c(%eax),%eax
c0008fe3:	8b 40 20             	mov    0x20(%eax),%eax
c0008fe6:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/inode.c:28

	uint32_t inode_size = sizeof(struct inode);
c0008fe9:	c7 45 f0 4c 00 00 00 	movl   $0x4c,-0x10(%ebp)
/work/x86_os_my/fs/inode.c:29
	uint32_t off_size = inode_no * inode_size;	// 第inode_no号inode相对于inode_table_lba的字节偏移量
c0008ff0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0008ff3:	0f af 45 f0          	imul   -0x10(%ebp),%eax
c0008ff7:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/inode.c:30
	uint32_t off_sec  = off_size / 512;			// 第inode_no号inode相对于inode_table_lba的扇区偏移量
c0008ffa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008ffd:	c1 e8 09             	shr    $0x9,%eax
c0009000:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/inode.c:31
	uint32_t off_size_in_sec = off_size % 512;	// 待查找的inode所在扇区中的起始地址
c0009003:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0009006:	25 ff 01 00 00       	and    $0x1ff,%eax
c000900b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/inode.c:34

	/* 判断此inode是否跨越2个扇区 */
	uint32_t left_in_sec = 512 - off_size_in_sec;
c000900e:	b8 00 02 00 00       	mov    $0x200,%eax
c0009013:	2b 45 e4             	sub    -0x1c(%ebp),%eax
c0009016:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/inode.c:36
	// 若扇区内剩下的空间不足以容纳一个inode,必然是inode跨越了2个扇区
	if (left_in_sec < inode_size ) {
c0009019:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000901c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c000901f:	73 0b                	jae    c000902c <inode_locate+0x77>
/work/x86_os_my/fs/inode.c:37
		inode_pos->two_sec = true;	//跨越了
c0009021:	8b 45 10             	mov    0x10(%ebp),%eax
c0009024:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c000902a:	eb 09                	jmp    c0009035 <inode_locate+0x80>
/work/x86_os_my/fs/inode.c:39
	} else {
		inode_pos->two_sec = false;
c000902c:	8b 45 10             	mov    0x10(%ebp),%eax
c000902f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/fs/inode.c:41
	}
	inode_pos->sec_lba = inode_table_lba + off_sec;
c0009035:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0009038:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000903b:	01 c2                	add    %eax,%edx
c000903d:	8b 45 10             	mov    0x10(%ebp),%eax
c0009040:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/inode.c:42
	inode_pos->off_size = off_size_in_sec;
c0009043:	8b 45 10             	mov    0x10(%ebp),%eax
c0009046:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0009049:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/fs/inode.c:43
}
c000904c:	90                   	nop
c000904d:	c9                   	leave  
c000904e:	c3                   	ret    

c000904f <inode_sync>:
inode_sync():
/work/x86_os_my/fs/inode.c:51
io_buf是用于硬盘io的缓冲区，它由主调函数提供！
原因是
一般情况下把内存中的数据同步到硬盘都是最后的操作，其前已经做了大量工作，
若到这最后一步时才申请内存失败，前面的所有操作都白费了，还要回滚到之前的旧状态，代价太大
*/
void inode_sync(struct partition* part, struct inode* inode, void* io_buf) {
c000904f:	55                   	push   %ebp
c0009050:	89 e5                	mov    %esp,%ebp
c0009052:	83 ec 68             	sub    $0x68,%esp
/work/x86_os_my/fs/inode.c:52
	uint8_t inode_no = inode->i_no;
c0009055:	8b 45 0c             	mov    0xc(%ebp),%eax
c0009058:	8b 00                	mov    (%eax),%eax
c000905a:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/inode.c:54
	struct inode_position inode_pos;
	inode_locate(part, inode_no, &inode_pos);	// inode位置信息会存入inode_pos
c000905d:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0009061:	83 ec 04             	sub    $0x4,%esp
c0009064:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0009067:	52                   	push   %edx
c0009068:	50                   	push   %eax
c0009069:	ff 75 08             	pushl  0x8(%ebp)
c000906c:	e8 44 ff ff ff       	call   c0008fb5 <inode_locate>
c0009071:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:55
	ASSERT(inode_pos.sec_lba <= (part->start_lba + part->sec_cnt));
c0009074:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0009077:	8b 45 08             	mov    0x8(%ebp),%eax
c000907a:	8b 08                	mov    (%eax),%ecx
c000907c:	8b 45 08             	mov    0x8(%ebp),%eax
c000907f:	8b 40 04             	mov    0x4(%eax),%eax
c0009082:	01 c8                	add    %ecx,%eax
c0009084:	39 c2                	cmp    %eax,%edx
c0009086:	76 19                	jbe    c00090a1 <inode_sync+0x52>
/work/x86_os_my/fs/inode.c:55 (discriminator 1)
c0009088:	68 00 ec 00 c0       	push   $0xc000ec00
c000908d:	68 7c ec 00 c0       	push   $0xc000ec7c
c0009092:	6a 37                	push   $0x37
c0009094:	68 f4 eb 00 c0       	push   $0xc000ebf4
c0009099:	e8 63 94 ff ff       	call   c0002501 <panic_spin>
c000909e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:62
	/* 硬盘中的inode中的成员inode_tag和i_open_cnts是不需要的，
	* 它们只在内存中有效，记录链表位置和被多少进程共享，
	* 将inode同步到硬盘时,清掉这三项即可。
	*/
	struct inode pure_inode;
	memcpy(&pure_inode, inode, sizeof(struct inode));
c00090a1:	83 ec 04             	sub    $0x4,%esp
c00090a4:	6a 4c                	push   $0x4c
c00090a6:	ff 75 0c             	pushl  0xc(%ebp)
c00090a9:	8d 45 98             	lea    -0x68(%ebp),%eax
c00090ac:	50                   	push   %eax
c00090ad:	e8 a5 a9 ff ff       	call   c0003a57 <memcpy>
c00090b2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:63
	pure_inode.i_open_cnts = 0;
c00090b5:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
/work/x86_os_my/fs/inode.c:64
	pure_inode.write_deny = false;	// 置为false,以保证在硬盘中读出时为可写
c00090bc:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
/work/x86_os_my/fs/inode.c:65
	pure_inode.inode_tag.prev = pure_inode.inode_tag.next = NULL;
c00090c3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c00090ca:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00090cd:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/inode.c:67

	char* inode_buf = (char*)io_buf;
c00090d0:	8b 45 10             	mov    0x10(%ebp),%eax
c00090d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/inode.c:69
	// 若inode结构，跨了两个扇区,就要读出两个扇区再写入两个扇区
	if (inode_pos.two_sec) {
c00090d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00090d9:	85 c0                	test   %eax,%eax
c00090db:	74 4c                	je     c0009129 <inode_sync+0xda>
/work/x86_os_my/fs/inode.c:72
		/* 读写硬盘是以扇区为单位的
		所以需要将待写入的inode结构拼入到这2个扇区的中间位置 */
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 2);	// inode_table在格式化时，写入硬盘是连续写入的，所以读入2块扇区
c00090dd:	8b 55 e8             	mov    -0x18(%ebp),%edx
c00090e0:	8b 45 08             	mov    0x8(%ebp),%eax
c00090e3:	8b 40 08             	mov    0x8(%eax),%eax
c00090e6:	6a 02                	push   $0x2
c00090e8:	ff 75 f0             	pushl  -0x10(%ebp)
c00090eb:	52                   	push   %edx
c00090ec:	50                   	push   %eax
c00090ed:	e8 83 d3 ff ff       	call   c0006475 <ide_read>
c00090f2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:73
		memcpy((inode_buf + inode_pos.off_size), &pure_inode, sizeof(struct inode));	// inode_buf+inode在扇区中的偏移
c00090f5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c00090f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00090fb:	01 c2                	add    %eax,%edx
c00090fd:	83 ec 04             	sub    $0x4,%esp
c0009100:	6a 4c                	push   $0x4c
c0009102:	8d 45 98             	lea    -0x68(%ebp),%eax
c0009105:	50                   	push   %eax
c0009106:	52                   	push   %edx
c0009107:	e8 4b a9 ff ff       	call   c0003a57 <memcpy>
c000910c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:74
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 2);
c000910f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0009112:	8b 45 08             	mov    0x8(%ebp),%eax
c0009115:	8b 40 08             	mov    0x8(%eax),%eax
c0009118:	6a 02                	push   $0x2
c000911a:	ff 75 f0             	pushl  -0x10(%ebp)
c000911d:	52                   	push   %edx
c000911e:	50                   	push   %eax
c000911f:	e8 c5 d4 ff ff       	call   c00065e9 <ide_write>
c0009124:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:81
		// 若inode结构，只在一个扇区中
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
		memcpy((inode_buf + inode_pos.off_size), &pure_inode, sizeof(struct inode));	// inode_buf+inode在扇区中的偏移
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
	}
}
c0009127:	eb 4a                	jmp    c0009173 <inode_sync+0x124>
/work/x86_os_my/fs/inode.c:77
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 2);	// inode_table在格式化时，写入硬盘是连续写入的，所以读入2块扇区
		memcpy((inode_buf + inode_pos.off_size), &pure_inode, sizeof(struct inode));	// inode_buf+inode在扇区中的偏移
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 2);
	} else {
		// 若inode结构，只在一个扇区中
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
c0009129:	8b 55 e8             	mov    -0x18(%ebp),%edx
c000912c:	8b 45 08             	mov    0x8(%ebp),%eax
c000912f:	8b 40 08             	mov    0x8(%eax),%eax
c0009132:	6a 01                	push   $0x1
c0009134:	ff 75 f0             	pushl  -0x10(%ebp)
c0009137:	52                   	push   %edx
c0009138:	50                   	push   %eax
c0009139:	e8 37 d3 ff ff       	call   c0006475 <ide_read>
c000913e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:78
		memcpy((inode_buf + inode_pos.off_size), &pure_inode, sizeof(struct inode));	// inode_buf+inode在扇区中的偏移
c0009141:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0009144:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0009147:	01 c2                	add    %eax,%edx
c0009149:	83 ec 04             	sub    $0x4,%esp
c000914c:	6a 4c                	push   $0x4c
c000914e:	8d 45 98             	lea    -0x68(%ebp),%eax
c0009151:	50                   	push   %eax
c0009152:	52                   	push   %edx
c0009153:	e8 ff a8 ff ff       	call   c0003a57 <memcpy>
c0009158:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:79
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
c000915b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c000915e:	8b 45 08             	mov    0x8(%ebp),%eax
c0009161:	8b 40 08             	mov    0x8(%eax),%eax
c0009164:	6a 01                	push   $0x1
c0009166:	ff 75 f0             	pushl  -0x10(%ebp)
c0009169:	52                   	push   %edx
c000916a:	50                   	push   %eax
c000916b:	e8 79 d4 ff ff       	call   c00065e9 <ide_write>
c0009170:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:81
	}
}
c0009173:	90                   	nop
c0009174:	c9                   	leave  
c0009175:	c3                   	ret    

c0009176 <inode_open>:
inode_open():
/work/x86_os_my/fs/inode.c:84

/* 根据i结点号，获取到相应的inode结构，插入到inode缓存队列，并返回它 */
struct inode* inode_open(struct partition* part, uint32_t inode_no) {
c0009176:	55                   	push   %ebp
c0009177:	89 e5                	mov    %esp,%ebp
c0009179:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/fs/inode.c:86
	/* 1.先在已打开inode链表中找inode，此链表作用是提速 */
	struct list_elem* elem = part->open_inodes.head.next;
c000917c:	8b 45 08             	mov    0x8(%ebp),%eax
c000917f:	8b 40 34             	mov    0x34(%eax),%eax
c0009182:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/inode.c:88
	struct inode* inode_found;
	while (elem != &part->open_inodes.tail) {
c0009185:	eb 33                	jmp    c00091ba <inode_open+0x44>
/work/x86_os_my/fs/inode.c:89
		inode_found = elem2entry(struct inode, inode_tag, elem);
c0009187:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000918a:	83 e8 44             	sub    $0x44,%eax
c000918d:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/inode.c:90
		if (inode_found->i_no == inode_no) {
c0009190:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0009193:	8b 00                	mov    (%eax),%eax
c0009195:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0009198:	75 17                	jne    c00091b1 <inode_open+0x3b>
/work/x86_os_my/fs/inode.c:91
			inode_found->i_open_cnts++;
c000919a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000919d:	8b 40 08             	mov    0x8(%eax),%eax
c00091a0:	8d 50 01             	lea    0x1(%eax),%edx
c00091a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00091a6:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/fs/inode.c:92
			return inode_found;
c00091a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00091ac:	e9 09 01 00 00       	jmp    c00092ba <inode_open+0x144>
/work/x86_os_my/fs/inode.c:94
		}
		elem = elem->next;
c00091b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00091b4:	8b 40 04             	mov    0x4(%eax),%eax
c00091b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/inode.c:88
/* 根据i结点号，获取到相应的inode结构，插入到inode缓存队列，并返回它 */
struct inode* inode_open(struct partition* part, uint32_t inode_no) {
	/* 1.先在已打开inode链表中找inode，此链表作用是提速 */
	struct list_elem* elem = part->open_inodes.head.next;
	struct inode* inode_found;
	while (elem != &part->open_inodes.tail) {
c00091ba:	8b 45 08             	mov    0x8(%ebp),%eax
c00091bd:	83 c0 38             	add    $0x38,%eax
c00091c0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c00091c3:	75 c2                	jne    c0009187 <inode_open+0x11>
/work/x86_os_my/fs/inode.c:100
	}

	
	/* 2.open_inodes链表中找不到，从硬盘上读入此inode并加入到inode缓存链表 */
	struct inode_position inode_pos;	// 记录inode位置的结构
	inode_locate(part, inode_no, &inode_pos);
c00091c5:	83 ec 04             	sub    $0x4,%esp
c00091c8:	8d 45 d8             	lea    -0x28(%ebp),%eax
c00091cb:	50                   	push   %eax
c00091cc:	ff 75 0c             	pushl  0xc(%ebp)
c00091cf:	ff 75 08             	pushl  0x8(%ebp)
c00091d2:	e8 de fd ff ff       	call   c0008fb5 <inode_locate>
c00091d7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:104

	/* 为使通过sys_malloc创建的新inode被所有任务共享，需要将inode置于内核空间
	故临时将cur_pbc->pgdir置为NULL，sys_malloc就会以为是从内核空间分配 */
	struct task_struct* cur = running_thread();
c00091da:	e8 0d ac ff ff       	call   c0003dec <running_thread>
c00091df:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/inode.c:105
	uint32_t* cur_pagedir_bak = cur->pgdir;
c00091e2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00091e5:	8b 40 54             	mov    0x54(%eax),%eax
c00091e8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/inode.c:106
	cur->pgdir = NULL;
c00091eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00091ee:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
/work/x86_os_my/fs/inode.c:107
	inode_found = (struct inode*)sys_malloc(sizeof(struct inode));
c00091f5:	83 ec 0c             	sub    $0xc,%esp
c00091f8:	6a 4c                	push   $0x4c
c00091fa:	e8 ad 9c ff ff       	call   c0002eac <sys_malloc>
c00091ff:	83 c4 10             	add    $0x10,%esp
c0009202:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/inode.c:108
	cur->pgdir = cur_pagedir_bak;	// 恢复pgdir
c0009205:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0009208:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c000920b:	89 50 54             	mov    %edx,0x54(%eax)
/work/x86_os_my/fs/inode.c:111

	char* inode_buf;
	if (inode_pos.two_sec) {	// inode结构跨扇区了
c000920e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0009211:	85 c0                	test   %eax,%eax
c0009213:	74 2d                	je     c0009242 <inode_open+0xcc>
/work/x86_os_my/fs/inode.c:112
		inode_buf = (char*)sys_malloc(1024);
c0009215:	83 ec 0c             	sub    $0xc,%esp
c0009218:	68 00 04 00 00       	push   $0x400
c000921d:	e8 8a 9c ff ff       	call   c0002eac <sys_malloc>
c0009222:	83 c4 10             	add    $0x10,%esp
c0009225:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/inode.c:114
		// inode_table在格式化时，写入硬盘是连续写入的，所以可以连续读入2块扇区
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 2);
c0009228:	8b 55 dc             	mov    -0x24(%ebp),%edx
c000922b:	8b 45 08             	mov    0x8(%ebp),%eax
c000922e:	8b 40 08             	mov    0x8(%eax),%eax
c0009231:	6a 02                	push   $0x2
c0009233:	ff 75 f0             	pushl  -0x10(%ebp)
c0009236:	52                   	push   %edx
c0009237:	50                   	push   %eax
c0009238:	e8 38 d2 ff ff       	call   c0006475 <ide_read>
c000923d:	83 c4 10             	add    $0x10,%esp
c0009240:	eb 2b                	jmp    c000926d <inode_open+0xf7>
/work/x86_os_my/fs/inode.c:116
	} else {
		inode_buf = (char*)sys_malloc(512);
c0009242:	83 ec 0c             	sub    $0xc,%esp
c0009245:	68 00 02 00 00       	push   $0x200
c000924a:	e8 5d 9c ff ff       	call   c0002eac <sys_malloc>
c000924f:	83 c4 10             	add    $0x10,%esp
c0009252:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/inode.c:117
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
c0009255:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0009258:	8b 45 08             	mov    0x8(%ebp),%eax
c000925b:	8b 40 08             	mov    0x8(%eax),%eax
c000925e:	6a 01                	push   $0x1
c0009260:	ff 75 f0             	pushl  -0x10(%ebp)
c0009263:	52                   	push   %edx
c0009264:	50                   	push   %eax
c0009265:	e8 0b d2 ff ff       	call   c0006475 <ide_read>
c000926a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:119
	}
	memcpy(inode_found, inode_buf + inode_pos.off_size, sizeof(struct inode));	// inode_buf+inode在扇区中的偏移
c000926d:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0009270:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0009273:	01 d0                	add    %edx,%eax
c0009275:	83 ec 04             	sub    $0x4,%esp
c0009278:	6a 4c                	push   $0x4c
c000927a:	50                   	push   %eax
c000927b:	ff 75 ec             	pushl  -0x14(%ebp)
c000927e:	e8 d4 a7 ff ff       	call   c0003a57 <memcpy>
c0009283:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:123

	
	/* 3.马上要用这个inode，固插入到队首 */
	list_push(&part->open_inodes, &inode_found->inode_tag);
c0009286:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0009289:	8d 50 44             	lea    0x44(%eax),%edx
c000928c:	8b 45 08             	mov    0x8(%ebp),%eax
c000928f:	83 c0 30             	add    $0x30,%eax
c0009292:	83 ec 08             	sub    $0x8,%esp
c0009295:	52                   	push   %edx
c0009296:	50                   	push   %eax
c0009297:	e8 b0 b7 ff ff       	call   c0004a4c <list_push>
c000929c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:124
	inode_found->i_open_cnts = 1;
c000929f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00092a2:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/fs/inode.c:126

	sys_free(inode_buf);
c00092a9:	83 ec 0c             	sub    $0xc,%esp
c00092ac:	ff 75 f0             	pushl  -0x10(%ebp)
c00092af:	e8 25 a2 ff ff       	call   c00034d9 <sys_free>
c00092b4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:127
	return inode_found;
c00092b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
/work/x86_os_my/fs/inode.c:128 (discriminator 1)
}
c00092ba:	c9                   	leave  
c00092bb:	c3                   	ret    

c00092bc <inode_close>:
inode_close():
/work/x86_os_my/fs/inode.c:132

/* 关闭inode或减少inode的打开数 */
//1.从inode队列踢掉 2.释放内核内存池中的这个inode内存
void inode_close(struct inode* inode) {
c00092bc:	55                   	push   %ebp
c00092bd:	89 e5                	mov    %esp,%ebp
c00092bf:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/inode.c:134
	/* 若没有进程再打开此文件,将此inode去掉并释放空间 */
	enum intr_status old_status = intr_disable();
c00092c2:	e8 52 88 ff ff       	call   c0001b19 <intr_disable>
c00092c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/inode.c:135
	if (--inode->i_open_cnts == 0) {
c00092ca:	8b 45 08             	mov    0x8(%ebp),%eax
c00092cd:	8b 40 08             	mov    0x8(%eax),%eax
c00092d0:	8d 50 ff             	lea    -0x1(%eax),%edx
c00092d3:	8b 45 08             	mov    0x8(%ebp),%eax
c00092d6:	89 50 08             	mov    %edx,0x8(%eax)
c00092d9:	8b 45 08             	mov    0x8(%ebp),%eax
c00092dc:	8b 40 08             	mov    0x8(%eax),%eax
c00092df:	85 c0                	test   %eax,%eax
c00092e1:	75 44                	jne    c0009327 <inode_close+0x6b>
/work/x86_os_my/fs/inode.c:136
		list_remove(&inode->inode_tag);
c00092e3:	8b 45 08             	mov    0x8(%ebp),%eax
c00092e6:	83 c0 44             	add    $0x44,%eax
c00092e9:	83 ec 0c             	sub    $0xc,%esp
c00092ec:	50                   	push   %eax
c00092ed:	e8 96 b7 ff ff       	call   c0004a88 <list_remove>
c00092f2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:139
		/* inode结构在内核空间，释放时要释放到内核内存池。
		pgdir为NULL时，sys_free认为是内核空间 */
		struct task_struct* cur = running_thread();
c00092f5:	e8 f2 aa ff ff       	call   c0003dec <running_thread>
c00092fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/inode.c:140
		uint32_t* cur_pagedir_bak = cur->pgdir;	// 进程自己页目录表的虚拟地址，加载到cr3时需转成物理地址
c00092fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0009300:	8b 40 54             	mov    0x54(%eax),%eax
c0009303:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/inode.c:141
		cur->pgdir = NULL;
c0009306:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0009309:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
/work/x86_os_my/fs/inode.c:142
		sys_free(inode);
c0009310:	83 ec 0c             	sub    $0xc,%esp
c0009313:	ff 75 08             	pushl  0x8(%ebp)
c0009316:	e8 be a1 ff ff       	call   c00034d9 <sys_free>
c000931b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:143
		cur->pgdir = cur_pagedir_bak;
c000931e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0009321:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0009324:	89 50 54             	mov    %edx,0x54(%eax)
/work/x86_os_my/fs/inode.c:145
	}
	intr_set_status(old_status);
c0009327:	83 ec 0c             	sub    $0xc,%esp
c000932a:	ff 75 f4             	pushl  -0xc(%ebp)
c000932d:	e8 10 88 ff ff       	call   c0001b42 <intr_set_status>
c0009332:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:146
}
c0009335:	90                   	nop
c0009336:	c9                   	leave  
c0009337:	c3                   	ret    

c0009338 <inode_delete>:
inode_delete():
/work/x86_os_my/fs/inode.c:149

/* 将硬盘分区part上，inode管理的数据块清空 */
void inode_delete(struct partition* part, uint32_t inode_no, void* io_buf) {
c0009338:	55                   	push   %ebp
c0009339:	89 e5                	mov    %esp,%ebp
c000933b:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/inode.c:150
	ASSERT(inode_no < 4096);
c000933e:	81 7d 0c ff 0f 00 00 	cmpl   $0xfff,0xc(%ebp)
c0009345:	76 1c                	jbe    c0009363 <inode_delete+0x2b>
/work/x86_os_my/fs/inode.c:150 (discriminator 1)
c0009347:	68 e4 eb 00 c0       	push   $0xc000ebe4
c000934c:	68 88 ec 00 c0       	push   $0xc000ec88
c0009351:	68 96 00 00 00       	push   $0x96
c0009356:	68 f4 eb 00 c0       	push   $0xc000ebf4
c000935b:	e8 a1 91 ff ff       	call   c0002501 <panic_spin>
c0009360:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:152
	struct inode_position inode_pos;
	inode_locate(part, inode_no, &inode_pos);	// 获取inode所在的扇区和扇区内的偏移量【这里是 inode_table 的空间】
c0009363:	83 ec 04             	sub    $0x4,%esp
c0009366:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0009369:	50                   	push   %eax
c000936a:	ff 75 0c             	pushl  0xc(%ebp)
c000936d:	ff 75 08             	pushl  0x8(%ebp)
c0009370:	e8 40 fc ff ff       	call   c0008fb5 <inode_locate>
c0009375:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:153
	ASSERT(inode_pos.sec_lba <= (part->start_lba + part->sec_cnt));
c0009378:	8b 55 ec             	mov    -0x14(%ebp),%edx
c000937b:	8b 45 08             	mov    0x8(%ebp),%eax
c000937e:	8b 08                	mov    (%eax),%ecx
c0009380:	8b 45 08             	mov    0x8(%ebp),%eax
c0009383:	8b 40 04             	mov    0x4(%eax),%eax
c0009386:	01 c8                	add    %ecx,%eax
c0009388:	39 c2                	cmp    %eax,%edx
c000938a:	76 1c                	jbe    c00093a8 <inode_delete+0x70>
/work/x86_os_my/fs/inode.c:153 (discriminator 1)
c000938c:	68 00 ec 00 c0       	push   $0xc000ec00
c0009391:	68 88 ec 00 c0       	push   $0xc000ec88
c0009396:	68 99 00 00 00       	push   $0x99
c000939b:	68 f4 eb 00 c0       	push   $0xc000ebf4
c00093a0:	e8 5c 91 ff ff       	call   c0002501 <panic_spin>
c00093a5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:155

	char* inode_buf = (char*)io_buf;
c00093a8:	8b 45 10             	mov    0x10(%ebp),%eax
c00093ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/inode.c:156
	if (inode_pos.two_sec) {	// inode跨扇区,读入2个扇区
c00093ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00093b1:	85 c0                	test   %eax,%eax
c00093b3:	74 4a                	je     c00093ff <inode_delete+0xc7>
/work/x86_os_my/fs/inode.c:158
		/* 将原硬盘上的内容先读出来 */
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 2);
c00093b5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c00093b8:	8b 45 08             	mov    0x8(%ebp),%eax
c00093bb:	8b 40 08             	mov    0x8(%eax),%eax
c00093be:	6a 02                	push   $0x2
c00093c0:	ff 75 f4             	pushl  -0xc(%ebp)
c00093c3:	52                   	push   %edx
c00093c4:	50                   	push   %eax
c00093c5:	e8 ab d0 ff ff       	call   c0006475 <ide_read>
c00093ca:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:160
		/* 将inode_buf清0 */
		memset((inode_buf + inode_pos.off_size), 0, sizeof(struct inode));	//清零 inode_table 中的一个 inode 结构
c00093cd:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00093d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00093d3:	01 d0                	add    %edx,%eax
c00093d5:	83 ec 04             	sub    $0x4,%esp
c00093d8:	6a 4c                	push   $0x4c
c00093da:	6a 00                	push   $0x0
c00093dc:	50                   	push   %eax
c00093dd:	e8 23 a6 ff ff       	call   c0003a05 <memset>
c00093e2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:162
		/* 用清0的内存数据覆盖磁盘 */
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 2);
c00093e5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c00093e8:	8b 45 08             	mov    0x8(%ebp),%eax
c00093eb:	8b 40 08             	mov    0x8(%eax),%eax
c00093ee:	6a 02                	push   $0x2
c00093f0:	ff 75 f4             	pushl  -0xc(%ebp)
c00093f3:	52                   	push   %edx
c00093f4:	50                   	push   %eax
c00093f5:	e8 ef d1 ff ff       	call   c00065e9 <ide_write>
c00093fa:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:171
		/* 将inode_buf清0 */
		memset((inode_buf + inode_pos.off_size), 0, sizeof(struct inode));
		/* 用清0的内存数据覆盖磁盘 */
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
	}
}
c00093fd:	eb 48                	jmp    c0009447 <inode_delete+0x10f>
/work/x86_os_my/fs/inode.c:165
		memset((inode_buf + inode_pos.off_size), 0, sizeof(struct inode));	//清零 inode_table 中的一个 inode 结构
		/* 用清0的内存数据覆盖磁盘 */
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 2);
	} else {	// 未跨扇区,只读入1个扇区就好
		/* 将原硬盘上的内容先读出来 */
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
c00093ff:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0009402:	8b 45 08             	mov    0x8(%ebp),%eax
c0009405:	8b 40 08             	mov    0x8(%eax),%eax
c0009408:	6a 01                	push   $0x1
c000940a:	ff 75 f4             	pushl  -0xc(%ebp)
c000940d:	52                   	push   %edx
c000940e:	50                   	push   %eax
c000940f:	e8 61 d0 ff ff       	call   c0006475 <ide_read>
c0009414:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:167
		/* 将inode_buf清0 */
		memset((inode_buf + inode_pos.off_size), 0, sizeof(struct inode));
c0009417:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000941a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000941d:	01 d0                	add    %edx,%eax
c000941f:	83 ec 04             	sub    $0x4,%esp
c0009422:	6a 4c                	push   $0x4c
c0009424:	6a 00                	push   $0x0
c0009426:	50                   	push   %eax
c0009427:	e8 d9 a5 ff ff       	call   c0003a05 <memset>
c000942c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:169
		/* 用清0的内存数据覆盖磁盘 */
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
c000942f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0009432:	8b 45 08             	mov    0x8(%ebp),%eax
c0009435:	8b 40 08             	mov    0x8(%eax),%eax
c0009438:	6a 01                	push   $0x1
c000943a:	ff 75 f4             	pushl  -0xc(%ebp)
c000943d:	52                   	push   %edx
c000943e:	50                   	push   %eax
c000943f:	e8 a5 d1 ff ff       	call   c00065e9 <ide_write>
c0009444:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:171
	}
}
c0009447:	90                   	nop
c0009448:	c9                   	leave  
c0009449:	c3                   	ret    

c000944a <inode_release>:
inode_release():
/work/x86_os_my/fs/inode.c:179
（1）inode 位图
（2）inode_table
（3）inode 中 i_sectors[0～11]中的直接块和一级间接索引块表 i_sectors[12]中的间接块
（4）一级间接索引块表本身的扇区地址
 */
void inode_release(struct partition* part, uint32_t inode_no) {
c000944a:	55                   	push   %ebp
c000944b:	89 e5                	mov    %esp,%ebp
c000944d:	57                   	push   %edi
c000944e:	81 ec 44 02 00 00    	sub    $0x244,%esp
/work/x86_os_my/fs/inode.c:180
	struct inode* inode_to_del = inode_open(part, inode_no);
c0009454:	83 ec 08             	sub    $0x8,%esp
c0009457:	ff 75 0c             	pushl  0xc(%ebp)
c000945a:	ff 75 08             	pushl  0x8(%ebp)
c000945d:	e8 14 fd ff ff       	call   c0009176 <inode_open>
c0009462:	83 c4 10             	add    $0x10,%esp
c0009465:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/inode.c:181
	ASSERT(inode_to_del->i_no == inode_no);
c0009468:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000946b:	8b 00                	mov    (%eax),%eax
c000946d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0009470:	74 1c                	je     c000948e <inode_release+0x44>
/work/x86_os_my/fs/inode.c:181 (discriminator 1)
c0009472:	68 38 ec 00 c0       	push   $0xc000ec38
c0009477:	68 98 ec 00 c0       	push   $0xc000ec98
c000947c:	68 b5 00 00 00       	push   $0xb5
c0009481:	68 f4 eb 00 c0       	push   $0xc000ebf4
c0009486:	e8 76 90 ff ff       	call   c0002501 <panic_spin>
c000948b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:184

	/* 1 回收inode占用的所有块 */
	uint8_t block_idx = 0, block_cnt = 12;
c000948e:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
c0009492:	c6 45 f6 0c          	movb   $0xc,-0xa(%ebp)
/work/x86_os_my/fs/inode.c:186
	uint32_t block_bitmap_idx;
	uint32_t all_blocks[140] = {0};	  //12个直接块+128个间接块
c0009496:	8d 95 b8 fd ff ff    	lea    -0x248(%ebp),%edx
c000949c:	b8 00 00 00 00       	mov    $0x0,%eax
c00094a1:	b9 8c 00 00 00       	mov    $0x8c,%ecx
c00094a6:	89 d7                	mov    %edx,%edi
c00094a8:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/fs/inode.c:189

	/* a 先将前12个直接块存入all_blocks */
	while (block_idx < 12) {
c00094aa:	eb 22                	jmp    c00094ce <inode_release+0x84>
/work/x86_os_my/fs/inode.c:190
		all_blocks[block_idx] = inode_to_del->i_sectors[block_idx];
c00094ac:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00094b0:	0f b6 4d f7          	movzbl -0x9(%ebp),%ecx
c00094b4:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00094b7:	83 c1 04             	add    $0x4,%ecx
c00094ba:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
c00094bd:	89 94 85 b8 fd ff ff 	mov    %edx,-0x248(%ebp,%eax,4)
/work/x86_os_my/fs/inode.c:191
		block_idx++;
c00094c4:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00094c8:	83 c0 01             	add    $0x1,%eax
c00094cb:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/inode.c:189
	uint8_t block_idx = 0, block_cnt = 12;
	uint32_t block_bitmap_idx;
	uint32_t all_blocks[140] = {0};	  //12个直接块+128个间接块

	/* a 先将前12个直接块存入all_blocks */
	while (block_idx < 12) {
c00094ce:	80 7d f7 0b          	cmpb   $0xb,-0x9(%ebp)
c00094d2:	76 d8                	jbe    c00094ac <inode_release+0x62>
/work/x86_os_my/fs/inode.c:194
		all_blocks[block_idx] = inode_to_del->i_sectors[block_idx];
		block_idx++;
	}
	/* b 如果一级间接块表存在，将其128个间接块读到all_blocks[12~]，并释放一级间接块表所占的扇区 */
	if (inode_to_del->i_sectors[12] != 0) {
c00094d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00094d7:	8b 40 40             	mov    0x40(%eax),%eax
c00094da:	85 c0                	test   %eax,%eax
c00094dc:	0f 84 8b 00 00 00    	je     c000956d <inode_release+0x123>
/work/x86_os_my/fs/inode.c:195
		ide_read(part->my_disk, inode_to_del->i_sectors[12], all_blocks + 12, 1);
c00094e2:	8d 85 b8 fd ff ff    	lea    -0x248(%ebp),%eax
c00094e8:	83 c0 30             	add    $0x30,%eax
c00094eb:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00094ee:	8b 4a 40             	mov    0x40(%edx),%ecx
c00094f1:	8b 55 08             	mov    0x8(%ebp),%edx
c00094f4:	8b 52 08             	mov    0x8(%edx),%edx
c00094f7:	6a 01                	push   $0x1
c00094f9:	50                   	push   %eax
c00094fa:	51                   	push   %ecx
c00094fb:	52                   	push   %edx
c00094fc:	e8 74 cf ff ff       	call   c0006475 <ide_read>
c0009501:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:196
		block_cnt = 140;
c0009504:	c6 45 f6 8c          	movb   $0x8c,-0xa(%ebp)
/work/x86_os_my/fs/inode.c:199

		/* 回收一级间接块表占用的扇区 */
		block_bitmap_idx = inode_to_del->i_sectors[12] - part->sb->data_start_lba;
c0009508:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000950b:	8b 50 40             	mov    0x40(%eax),%edx
c000950e:	8b 45 08             	mov    0x8(%ebp),%eax
c0009511:	8b 40 1c             	mov    0x1c(%eax),%eax
c0009514:	8b 40 28             	mov    0x28(%eax),%eax
c0009517:	29 c2                	sub    %eax,%edx
c0009519:	89 d0                	mov    %edx,%eax
c000951b:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/inode.c:200
		ASSERT(block_bitmap_idx > 0);
c000951e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0009522:	75 1c                	jne    c0009540 <inode_release+0xf6>
/work/x86_os_my/fs/inode.c:200 (discriminator 1)
c0009524:	68 57 ec 00 c0       	push   $0xc000ec57
c0009529:	68 98 ec 00 c0       	push   $0xc000ec98
c000952e:	68 c8 00 00 00       	push   $0xc8
c0009533:	68 f4 eb 00 c0       	push   $0xc000ebf4
c0009538:	e8 c4 8f ff ff       	call   c0002501 <panic_spin>
c000953d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:201
		bitmap_set(&part->block_bitmap, block_bitmap_idx, 0);
c0009540:	8b 45 08             	mov    0x8(%ebp),%eax
c0009543:	83 c0 20             	add    $0x20,%eax
c0009546:	83 ec 04             	sub    $0x4,%esp
c0009549:	6a 00                	push   $0x0
c000954b:	ff 75 ec             	pushl  -0x14(%ebp)
c000954e:	50                   	push   %eax
c000954f:	e8 1b 92 ff ff       	call   c000276f <bitmap_set>
c0009554:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:202
		bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c0009557:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000955c:	83 ec 04             	sub    $0x4,%esp
c000955f:	6a 01                	push   $0x1
c0009561:	ff 75 ec             	pushl  -0x14(%ebp)
c0009564:	50                   	push   %eax
c0009565:	e8 ca 02 00 00       	call   c0009834 <bitmap_sync>
c000956a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:205
	}
	/* c inode所有的块地址已经收集到all_blocks中，下面逐个回收 */
	block_idx = 0;
c000956d:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/fs/inode.c:206
	while (block_idx < block_cnt) {
c0009571:	e9 8a 00 00 00       	jmp    c0009600 <inode_release+0x1b6>
/work/x86_os_my/fs/inode.c:207
		if (all_blocks[block_idx] != 0) {
c0009576:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000957a:	8b 84 85 b8 fd ff ff 	mov    -0x248(%ebp,%eax,4),%eax
c0009581:	85 c0                	test   %eax,%eax
c0009583:	74 71                	je     c00095f6 <inode_release+0x1ac>
/work/x86_os_my/fs/inode.c:208
			block_bitmap_idx = 0;
c0009585:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/inode.c:209
			block_bitmap_idx = all_blocks[block_idx] - part->sb->data_start_lba;
c000958c:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0009590:	8b 94 85 b8 fd ff ff 	mov    -0x248(%ebp,%eax,4),%edx
c0009597:	8b 45 08             	mov    0x8(%ebp),%eax
c000959a:	8b 40 1c             	mov    0x1c(%eax),%eax
c000959d:	8b 40 28             	mov    0x28(%eax),%eax
c00095a0:	29 c2                	sub    %eax,%edx
c00095a2:	89 d0                	mov    %edx,%eax
c00095a4:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/inode.c:210
			ASSERT(block_bitmap_idx > 0);
c00095a7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c00095ab:	75 1c                	jne    c00095c9 <inode_release+0x17f>
/work/x86_os_my/fs/inode.c:210 (discriminator 1)
c00095ad:	68 57 ec 00 c0       	push   $0xc000ec57
c00095b2:	68 98 ec 00 c0       	push   $0xc000ec98
c00095b7:	68 d2 00 00 00       	push   $0xd2
c00095bc:	68 f4 eb 00 c0       	push   $0xc000ebf4
c00095c1:	e8 3b 8f ff ff       	call   c0002501 <panic_spin>
c00095c6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:211
			bitmap_set(&part->block_bitmap, block_bitmap_idx, 0);
c00095c9:	8b 45 08             	mov    0x8(%ebp),%eax
c00095cc:	83 c0 20             	add    $0x20,%eax
c00095cf:	83 ec 04             	sub    $0x4,%esp
c00095d2:	6a 00                	push   $0x0
c00095d4:	ff 75 ec             	pushl  -0x14(%ebp)
c00095d7:	50                   	push   %eax
c00095d8:	e8 92 91 ff ff       	call   c000276f <bitmap_set>
c00095dd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:212
			bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c00095e0:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c00095e5:	83 ec 04             	sub    $0x4,%esp
c00095e8:	6a 01                	push   $0x1
c00095ea:	ff 75 ec             	pushl  -0x14(%ebp)
c00095ed:	50                   	push   %eax
c00095ee:	e8 41 02 00 00       	call   c0009834 <bitmap_sync>
c00095f3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:214
		}
		block_idx++;
c00095f6:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00095fa:	83 c0 01             	add    $0x1,%eax
c00095fd:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/inode.c:206
		bitmap_set(&part->block_bitmap, block_bitmap_idx, 0);
		bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
	}
	/* c inode所有的块地址已经收集到all_blocks中，下面逐个回收 */
	block_idx = 0;
	while (block_idx < block_cnt) {
c0009600:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0009604:	3a 45 f6             	cmp    -0xa(%ebp),%al
c0009607:	0f 82 69 ff ff ff    	jb     c0009576 <inode_release+0x12c>
/work/x86_os_my/fs/inode.c:218
		}
		block_idx++;
	}

	/*2 回收该inode所占用的inode */
	bitmap_set(&part->inode_bitmap, inode_no, 0);
c000960d:	8b 45 08             	mov    0x8(%ebp),%eax
c0009610:	83 c0 28             	add    $0x28,%eax
c0009613:	83 ec 04             	sub    $0x4,%esp
c0009616:	6a 00                	push   $0x0
c0009618:	ff 75 0c             	pushl  0xc(%ebp)
c000961b:	50                   	push   %eax
c000961c:	e8 4e 91 ff ff       	call   c000276f <bitmap_set>
c0009621:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:219
	bitmap_sync(cur_part, inode_no, INODE_BITMAP);
c0009624:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c0009629:	83 ec 04             	sub    $0x4,%esp
c000962c:	6a 00                	push   $0x0
c000962e:	ff 75 0c             	pushl  0xc(%ebp)
c0009631:	50                   	push   %eax
c0009632:	e8 fd 01 00 00       	call   c0009834 <bitmap_sync>
c0009637:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:225

	/******     以下inode_delete是调试用的    ******
	 * 此函数会在 inode_table 中将此inode清0，
	 * 但实际上只需要在inode位图中清零相应位即可。
	 * 硬盘上的数据更不需要清0，可以直接覆盖 */
	void* io_buf = sys_malloc(1024);
c000963a:	83 ec 0c             	sub    $0xc,%esp
c000963d:	68 00 04 00 00       	push   $0x400
c0009642:	e8 65 98 ff ff       	call   c0002eac <sys_malloc>
c0009647:	83 c4 10             	add    $0x10,%esp
c000964a:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/inode.c:226
	inode_delete(part, inode_no, io_buf);
c000964d:	83 ec 04             	sub    $0x4,%esp
c0009650:	ff 75 e8             	pushl  -0x18(%ebp)
c0009653:	ff 75 0c             	pushl  0xc(%ebp)
c0009656:	ff 75 08             	pushl  0x8(%ebp)
c0009659:	e8 da fc ff ff       	call   c0009338 <inode_delete>
c000965e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:227
	sys_free(io_buf);
c0009661:	83 ec 0c             	sub    $0xc,%esp
c0009664:	ff 75 e8             	pushl  -0x18(%ebp)
c0009667:	e8 6d 9e ff ff       	call   c00034d9 <sys_free>
c000966c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:230
	/***********************************************/

	inode_close(inode_to_del);
c000966f:	83 ec 0c             	sub    $0xc,%esp
c0009672:	ff 75 f0             	pushl  -0x10(%ebp)
c0009675:	e8 42 fc ff ff       	call   c00092bc <inode_close>
c000967a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:231
}
c000967d:	90                   	nop
c000967e:	8b 7d fc             	mov    -0x4(%ebp),%edi
c0009681:	c9                   	leave  
c0009682:	c3                   	ret    

c0009683 <inode_init>:
inode_init():
/work/x86_os_my/fs/inode.c:234

/* 初始化一个inode结构，inode号是inode_no */
void inode_init(uint32_t inode_no, struct inode* new_inode) {
c0009683:	55                   	push   %ebp
c0009684:	89 e5                	mov    %esp,%ebp
c0009686:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/fs/inode.c:235
	new_inode->i_no = inode_no;
c0009689:	8b 45 0c             	mov    0xc(%ebp),%eax
c000968c:	8b 55 08             	mov    0x8(%ebp),%edx
c000968f:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/fs/inode.c:236
	new_inode->i_size = 0;
c0009691:	8b 45 0c             	mov    0xc(%ebp),%eax
c0009694:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
/work/x86_os_my/fs/inode.c:237
	new_inode->i_open_cnts = 0;
c000969b:	8b 45 0c             	mov    0xc(%ebp),%eax
c000969e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
/work/x86_os_my/fs/inode.c:238
	new_inode->write_deny = false;
c00096a5:	8b 45 0c             	mov    0xc(%ebp),%eax
c00096a8:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
/work/x86_os_my/fs/inode.c:241

	/* 初始化块索引数组i_sector */
	uint8_t sec_idx = 0;
c00096af:	c6 45 ff 00          	movb   $0x0,-0x1(%ebp)
/work/x86_os_my/fs/inode.c:242
	while (sec_idx < 13) {
c00096b3:	eb 1b                	jmp    c00096d0 <inode_init+0x4d>
/work/x86_os_my/fs/inode.c:244
		/* i_sectors[12]为一级间接块地址 */
		new_inode->i_sectors[sec_idx] = 0;
c00096b5:	0f b6 55 ff          	movzbl -0x1(%ebp),%edx
c00096b9:	8b 45 0c             	mov    0xc(%ebp),%eax
c00096bc:	83 c2 04             	add    $0x4,%edx
c00096bf:	c7 04 90 00 00 00 00 	movl   $0x0,(%eax,%edx,4)
/work/x86_os_my/fs/inode.c:245
		sec_idx++;
c00096c6:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
c00096ca:	83 c0 01             	add    $0x1,%eax
c00096cd:	88 45 ff             	mov    %al,-0x1(%ebp)
/work/x86_os_my/fs/inode.c:242
	new_inode->i_open_cnts = 0;
	new_inode->write_deny = false;

	/* 初始化块索引数组i_sector */
	uint8_t sec_idx = 0;
	while (sec_idx < 13) {
c00096d0:	80 7d ff 0c          	cmpb   $0xc,-0x1(%ebp)
c00096d4:	76 df                	jbe    c00096b5 <inode_init+0x32>
/work/x86_os_my/fs/inode.c:250
		sec_idx++;
	}
	/*为什么不提前分配inode管理的数据块（对我们来说是块=扇区）
	1.不知道文件大小，因此不知道分配多少个扇区合适
	2.文件创建后未必马上会写数据*/
}
c00096d6:	90                   	nop
c00096d7:	c9                   	leave  
c00096d8:	c3                   	ret    

c00096d9 <get_free_slot_in_global>:
get_free_slot_in_global():
/work/x86_os_my/fs/file.c:19

/* 文件表 */
struct file file_table[MAX_FILE_OPEN];

/* 从文件表 file_table 中获取一个空闲位,成功返回下标,失败返回-1 */
int32_t get_free_slot_in_global(void) {
c00096d9:	55                   	push   %ebp
c00096da:	89 e5                	mov    %esp,%ebp
c00096dc:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/file.c:20
	uint32_t fd_idx = 3;
c00096df:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
/work/x86_os_my/fs/file.c:21
	while (fd_idx < MAX_FILE_OPEN) {
c00096e6:	eb 1b                	jmp    c0009703 <get_free_slot_in_global+0x2a>
/work/x86_os_my/fs/file.c:22
		if (file_table[fd_idx].fd_inode == NULL) {
c00096e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c00096eb:	89 d0                	mov    %edx,%eax
c00096ed:	01 c0                	add    %eax,%eax
c00096ef:	01 d0                	add    %edx,%eax
c00096f1:	c1 e0 02             	shl    $0x2,%eax
c00096f4:	05 e8 4a 01 c0       	add    $0xc0014ae8,%eax
c00096f9:	8b 00                	mov    (%eax),%eax
c00096fb:	85 c0                	test   %eax,%eax
c00096fd:	74 0c                	je     c000970b <get_free_slot_in_global+0x32>
/work/x86_os_my/fs/file.c:25
			break;
		}
		fd_idx++;
c00096ff:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/file.c:21
struct file file_table[MAX_FILE_OPEN];

/* 从文件表 file_table 中获取一个空闲位,成功返回下标,失败返回-1 */
int32_t get_free_slot_in_global(void) {
	uint32_t fd_idx = 3;
	while (fd_idx < MAX_FILE_OPEN) {
c0009703:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c0009707:	76 df                	jbe    c00096e8 <get_free_slot_in_global+0xf>
c0009709:	eb 01                	jmp    c000970c <get_free_slot_in_global+0x33>
/work/x86_os_my/fs/file.c:23
		if (file_table[fd_idx].fd_inode == NULL) {
			break;
c000970b:	90                   	nop
/work/x86_os_my/fs/file.c:27
		}
		fd_idx++;
	}
	if (fd_idx == MAX_FILE_OPEN) {
c000970c:	83 7d f4 20          	cmpl   $0x20,-0xc(%ebp)
c0009710:	75 17                	jne    c0009729 <get_free_slot_in_global+0x50>
/work/x86_os_my/fs/file.c:28
		printk("exceed max open files\n");
c0009712:	83 ec 0c             	sub    $0xc,%esp
c0009715:	68 a8 ec 00 c0       	push   $0xc000eca8
c000971a:	e8 cf d7 ff ff       	call   c0006eee <printk>
c000971f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:29
		return -1;
c0009722:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009727:	eb 03                	jmp    c000972c <get_free_slot_in_global+0x53>
/work/x86_os_my/fs/file.c:31
	}
	return fd_idx;
c0009729:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/file.c:32
}
c000972c:	c9                   	leave  
c000972d:	c3                   	ret    

c000972e <pcb_fd_install>:
pcb_fd_install():
/work/x86_os_my/fs/file.c:36

/* 将 file_table 的下标，安装到，线程PCB中文件描述符数组 fd_table
 * 成功返回 fd_table 的下标（即文件描述符）,失败返回-1 */
int32_t pcb_fd_install(int32_t globa_fd_idx) {
c000972e:	55                   	push   %ebp
c000972f:	89 e5                	mov    %esp,%ebp
c0009731:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/file.c:37
	struct task_struct* cur = running_thread();
c0009734:	e8 b3 a6 ff ff       	call   c0003dec <running_thread>
c0009739:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:38
	uint8_t local_fd_idx = 3;	// 跨过stdin,stdout,stderr
c000973c:	c6 45 f7 03          	movb   $0x3,-0x9(%ebp)
/work/x86_os_my/fs/file.c:39
	while (local_fd_idx < MAX_FILES_OPEN_PER_PROC) {
c0009740:	eb 30                	jmp    c0009772 <pcb_fd_install+0x44>
/work/x86_os_my/fs/file.c:40
		if (cur->fd_table[local_fd_idx] == -1) {	// -1表示free_slot,可用
c0009742:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c0009746:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0009749:	83 c2 08             	add    $0x8,%edx
c000974c:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
c0009750:	83 f8 ff             	cmp    $0xffffffff,%eax
c0009753:	75 13                	jne    c0009768 <pcb_fd_install+0x3a>
/work/x86_os_my/fs/file.c:41
			cur->fd_table[local_fd_idx] = globa_fd_idx;
c0009755:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c0009759:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000975c:	8d 4a 08             	lea    0x8(%edx),%ecx
c000975f:	8b 55 08             	mov    0x8(%ebp),%edx
c0009762:	89 54 88 04          	mov    %edx,0x4(%eax,%ecx,4)
/work/x86_os_my/fs/file.c:42
			break;
c0009766:	eb 10                	jmp    c0009778 <pcb_fd_install+0x4a>
/work/x86_os_my/fs/file.c:44
		}
		local_fd_idx++;
c0009768:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000976c:	83 c0 01             	add    $0x1,%eax
c000976f:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/file.c:39
/* 将 file_table 的下标，安装到，线程PCB中文件描述符数组 fd_table
 * 成功返回 fd_table 的下标（即文件描述符）,失败返回-1 */
int32_t pcb_fd_install(int32_t globa_fd_idx) {
	struct task_struct* cur = running_thread();
	uint8_t local_fd_idx = 3;	// 跨过stdin,stdout,stderr
	while (local_fd_idx < MAX_FILES_OPEN_PER_PROC) {
c0009772:	80 7d f7 07          	cmpb   $0x7,-0x9(%ebp)
c0009776:	76 ca                	jbe    c0009742 <pcb_fd_install+0x14>
/work/x86_os_my/fs/file.c:46
			cur->fd_table[local_fd_idx] = globa_fd_idx;
			break;
		}
		local_fd_idx++;
	}
	if (local_fd_idx == MAX_FILES_OPEN_PER_PROC) {
c0009778:	80 7d f7 08          	cmpb   $0x8,-0x9(%ebp)
c000977c:	75 17                	jne    c0009795 <pcb_fd_install+0x67>
/work/x86_os_my/fs/file.c:47
		printk("exceed max open files_per_proc\n");
c000977e:	83 ec 0c             	sub    $0xc,%esp
c0009781:	68 c0 ec 00 c0       	push   $0xc000ecc0
c0009786:	e8 63 d7 ff ff       	call   c0006eee <printk>
c000978b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:48
		return -1;
c000978e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009793:	eb 04                	jmp    c0009799 <pcb_fd_install+0x6b>
/work/x86_os_my/fs/file.c:50
	}
	return local_fd_idx;
c0009795:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
/work/x86_os_my/fs/file.c:51
}
c0009799:	c9                   	leave  
c000979a:	c3                   	ret    

c000979b <inode_bitmap_alloc>:
inode_bitmap_alloc():
/work/x86_os_my/fs/file.c:54

/* 从分区的inode位图中，分配一个i结点，返回"inode号" */
int32_t inode_bitmap_alloc(struct partition* part) {
c000979b:	55                   	push   %ebp
c000979c:	89 e5                	mov    %esp,%ebp
c000979e:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/file.c:55
	int32_t bit_idx = bitmap_scan(&part->inode_bitmap, 1);
c00097a1:	8b 45 08             	mov    0x8(%ebp),%eax
c00097a4:	83 c0 28             	add    $0x28,%eax
c00097a7:	83 ec 08             	sub    $0x8,%esp
c00097aa:	6a 01                	push   $0x1
c00097ac:	50                   	push   %eax
c00097ad:	e8 88 8e ff ff       	call   c000263a <bitmap_scan>
c00097b2:	83 c4 10             	add    $0x10,%esp
c00097b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:56
	if (bit_idx == -1) {
c00097b8:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c00097bc:	75 07                	jne    c00097c5 <inode_bitmap_alloc+0x2a>
/work/x86_os_my/fs/file.c:57
		return -1;
c00097be:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00097c3:	eb 1b                	jmp    c00097e0 <inode_bitmap_alloc+0x45>
/work/x86_os_my/fs/file.c:59
	}
	bitmap_set(&part->inode_bitmap, bit_idx, 1);
c00097c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00097c8:	8b 55 08             	mov    0x8(%ebp),%edx
c00097cb:	83 c2 28             	add    $0x28,%edx
c00097ce:	83 ec 04             	sub    $0x4,%esp
c00097d1:	6a 01                	push   $0x1
c00097d3:	50                   	push   %eax
c00097d4:	52                   	push   %edx
c00097d5:	e8 95 8f ff ff       	call   c000276f <bitmap_set>
c00097da:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:60
	return bit_idx;
c00097dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/file.c:61
}
c00097e0:	c9                   	leave  
c00097e1:	c3                   	ret    

c00097e2 <block_bitmap_alloc>:
block_bitmap_alloc():
/work/x86_os_my/fs/file.c:64
   
/* 从分区的block位图中，分配1个扇区，返回"扇区地址" 【操作的是 空闲块区域 】*/
int32_t block_bitmap_alloc(struct partition* part) {
c00097e2:	55                   	push   %ebp
c00097e3:	89 e5                	mov    %esp,%ebp
c00097e5:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/file.c:65
	int32_t bit_idx = bitmap_scan(&part->block_bitmap, 1);
c00097e8:	8b 45 08             	mov    0x8(%ebp),%eax
c00097eb:	83 c0 20             	add    $0x20,%eax
c00097ee:	83 ec 08             	sub    $0x8,%esp
c00097f1:	6a 01                	push   $0x1
c00097f3:	50                   	push   %eax
c00097f4:	e8 41 8e ff ff       	call   c000263a <bitmap_scan>
c00097f9:	83 c4 10             	add    $0x10,%esp
c00097fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:66
	if (bit_idx == -1) {
c00097ff:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c0009803:	75 07                	jne    c000980c <block_bitmap_alloc+0x2a>
/work/x86_os_my/fs/file.c:67
		return -1;
c0009805:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000980a:	eb 26                	jmp    c0009832 <block_bitmap_alloc+0x50>
/work/x86_os_my/fs/file.c:69
	}
	bitmap_set(&part->block_bitmap, bit_idx, 1);
c000980c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000980f:	8b 55 08             	mov    0x8(%ebp),%edx
c0009812:	83 c2 20             	add    $0x20,%edx
c0009815:	83 ec 04             	sub    $0x4,%esp
c0009818:	6a 01                	push   $0x1
c000981a:	50                   	push   %eax
c000981b:	52                   	push   %edx
c000981c:	e8 4e 8f ff ff       	call   c000276f <bitmap_set>
c0009821:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:71
	/* 和inode_bitmap_malloc不同,此处返回的不是位图索引,而是具体可用的扇区地址 */
	return (part->sb->data_start_lba + bit_idx);
c0009824:	8b 45 08             	mov    0x8(%ebp),%eax
c0009827:	8b 40 1c             	mov    0x1c(%eax),%eax
c000982a:	8b 50 28             	mov    0x28(%eax),%edx
c000982d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009830:	01 d0                	add    %edx,%eax
/work/x86_os_my/fs/file.c:72
} 
c0009832:	c9                   	leave  
c0009833:	c3                   	ret    

c0009834 <bitmap_sync>:
bitmap_sync():
/work/x86_os_my/fs/file.c:76

/* 将内存中bitmap第bit_idx位所在的那个512字节，同步到硬盘中bitmap第bit_idx位所在的扇区 */
// 硬盘以扇区为读写单位
void bitmap_sync(struct partition* part, uint32_t bit_idx, uint8_t btmp_type) {
c0009834:	55                   	push   %ebp
c0009835:	89 e5                	mov    %esp,%ebp
c0009837:	83 ec 28             	sub    $0x28,%esp
c000983a:	8b 45 10             	mov    0x10(%ebp),%eax
c000983d:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/fs/file.c:77
	uint32_t off_sec = bit_idx / 4096;			// dst(硬盘中): bit_idx 相对于位图起始lba，在后边的第几个扇区(512*8=4096)
c0009840:	8b 45 0c             	mov    0xc(%ebp),%eax
c0009843:	c1 e8 0c             	shr    $0xc,%eax
c0009846:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/file.c:78
	uint32_t off_size = off_sec * BLOCK_SIZE;	// src(内存中): bit_idx 相对于位图数组bits，以512字节为单位，在后边的第几个单位处
c0009849:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000984c:	c1 e0 09             	shl    $0x9,%eax
c000984f:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/file.c:84
												// off_size是，第 bit_idx位所在位图中以 512 字节为单位的起始地址。BLOCK_SIZE=512
	uint32_t sec_lba;
	uint8_t* bitmap_off;

	/* 需要被同步到硬盘的位图只有inode_bitmap和block_bitmap */
	switch (btmp_type) {
c0009852:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0009856:	85 c0                	test   %eax,%eax
c0009858:	74 07                	je     c0009861 <bitmap_sync+0x2d>
c000985a:	83 f8 01             	cmp    $0x1,%eax
c000985d:	74 23                	je     c0009882 <bitmap_sync+0x4e>
c000985f:	eb 41                	jmp    c00098a2 <bitmap_sync+0x6e>
/work/x86_os_my/fs/file.c:86
		case INODE_BITMAP:
		sec_lba = part->sb->inode_bitmap_lba + off_sec;
c0009861:	8b 45 08             	mov    0x8(%ebp),%eax
c0009864:	8b 40 1c             	mov    0x1c(%eax),%eax
c0009867:	8b 50 18             	mov    0x18(%eax),%edx
c000986a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000986d:	01 d0                	add    %edx,%eax
c000986f:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:87
		bitmap_off = part->inode_bitmap.bits + off_size;
c0009872:	8b 45 08             	mov    0x8(%ebp),%eax
c0009875:	8b 50 2c             	mov    0x2c(%eax),%edx
c0009878:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000987b:	01 d0                	add    %edx,%eax
c000987d:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:88
		break;
c0009880:	eb 20                	jmp    c00098a2 <bitmap_sync+0x6e>
/work/x86_os_my/fs/file.c:91

		case BLOCK_BITMAP: 
		sec_lba = part->sb->block_bitmap_lba + off_sec;
c0009882:	8b 45 08             	mov    0x8(%ebp),%eax
c0009885:	8b 40 1c             	mov    0x1c(%eax),%eax
c0009888:	8b 50 10             	mov    0x10(%eax),%edx
c000988b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000988e:	01 d0                	add    %edx,%eax
c0009890:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:92
		bitmap_off = part->block_bitmap.bits + off_size;
c0009893:	8b 45 08             	mov    0x8(%ebp),%eax
c0009896:	8b 50 24             	mov    0x24(%eax),%edx
c0009899:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000989c:	01 d0                	add    %edx,%eax
c000989e:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:93
		break;
c00098a1:	90                   	nop
/work/x86_os_my/fs/file.c:95
	}
	ide_write(part->my_disk, sec_lba, bitmap_off, 1);	// 将bitmap_off中1个扇区的数据写入硬盘sec_lba处
c00098a2:	8b 45 08             	mov    0x8(%ebp),%eax
c00098a5:	8b 40 08             	mov    0x8(%eax),%eax
c00098a8:	6a 01                	push   $0x1
c00098aa:	ff 75 f0             	pushl  -0x10(%ebp)
c00098ad:	ff 75 f4             	pushl  -0xc(%ebp)
c00098b0:	50                   	push   %eax
c00098b1:	e8 33 cd ff ff       	call   c00065e9 <ide_write>
c00098b6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:96
}
c00098b9:	90                   	nop
c00098ba:	c9                   	leave  
c00098bb:	c3                   	ret    

c00098bc <file_create>:
file_create():
/work/x86_os_my/fs/file.c:114
此新增加的文件对应的目录项，需要写入该目录的 inode->i_sectors[]中的某个扇区，
原有扇区可能已满，所以有可能要申请新扇区来存储目录项。【sync_dir_entry】
4. 若其中某步操作失败，需要回滚之前已成功的操作。
5. inode_bitmap、 block_bitmap、新文件的 inode 及文件所在目录的 inode，这些位于内存中已经被改变的数据要同步到硬盘。
*/
int32_t file_create(struct dir* parent_dir, char* filename, uint8_t flag) {
c00098bc:	55                   	push   %ebp
c00098bd:	89 e5                	mov    %esp,%ebp
c00098bf:	83 ec 48             	sub    $0x48,%esp
c00098c2:	8b 45 10             	mov    0x10(%ebp),%eax
c00098c5:	88 45 c4             	mov    %al,-0x3c(%ebp)
/work/x86_os_my/fs/file.c:116
	/* 后续操作的公共缓冲区 */
	void* io_buf = sys_malloc(1024);	//跨扇区的数据，会操作2个扇区
c00098c8:	83 ec 0c             	sub    $0xc,%esp
c00098cb:	68 00 04 00 00       	push   $0x400
c00098d0:	e8 d7 95 ff ff       	call   c0002eac <sys_malloc>
c00098d5:	83 c4 10             	add    $0x10,%esp
c00098d8:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/file.c:117
	if (io_buf == NULL) {
c00098db:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c00098df:	75 1a                	jne    c00098fb <file_create+0x3f>
/work/x86_os_my/fs/file.c:118
		printk("in file_creat: sys_malloc for io_buf failed\n");
c00098e1:	83 ec 0c             	sub    $0xc,%esp
c00098e4:	68 e0 ec 00 c0       	push   $0xc000ece0
c00098e9:	e8 00 d6 ff ff       	call   c0006eee <printk>
c00098ee:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:119
		return -1;
c00098f1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00098f6:	e9 81 02 00 00       	jmp    c0009b7c <file_create+0x2c0>
/work/x86_os_my/fs/file.c:122
	}

	uint8_t rollback_step = 0;	// 用于操作失败时回滚各资源状态
c00098fb:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/fs/file.c:125

	/* 1.为新文件从分区inode位图中，分配inode号 */
	int32_t inode_no = inode_bitmap_alloc(cur_part); 
c00098ff:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c0009904:	83 ec 0c             	sub    $0xc,%esp
c0009907:	50                   	push   %eax
c0009908:	e8 8e fe ff ff       	call   c000979b <inode_bitmap_alloc>
c000990d:	83 c4 10             	add    $0x10,%esp
c0009910:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/file.c:126
	if (inode_no == -1) {
c0009913:	83 7d e8 ff          	cmpl   $0xffffffff,-0x18(%ebp)
c0009917:	75 1a                	jne    c0009933 <file_create+0x77>
/work/x86_os_my/fs/file.c:127
		printk("in file_creat: allocate inode failed\n");
c0009919:	83 ec 0c             	sub    $0xc,%esp
c000991c:	68 10 ed 00 c0       	push   $0xc000ed10
c0009921:	e8 c8 d5 ff ff       	call   c0006eee <printk>
c0009926:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:128
		return -1;
c0009929:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000992e:	e9 49 02 00 00       	jmp    c0009b7c <file_create+0x2c0>
/work/x86_os_my/fs/file.c:133
	}

	/* 2.堆中分配inode节点，不可以是栈中的局部变量！
	 * 因为 file_table 中的 fd_inode 指针要指向它. */
	struct inode* new_file_inode = (struct inode*)sys_malloc(sizeof(struct inode)); 
c0009933:	83 ec 0c             	sub    $0xc,%esp
c0009936:	6a 4c                	push   $0x4c
c0009938:	e8 6f 95 ff ff       	call   c0002eac <sys_malloc>
c000993d:	83 c4 10             	add    $0x10,%esp
c0009940:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/file.c:134
	if (new_file_inode == NULL) {
c0009943:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0009947:	75 19                	jne    c0009962 <file_create+0xa6>
/work/x86_os_my/fs/file.c:135
		printk("file_create: sys_malloc for inode failded\n");
c0009949:	83 ec 0c             	sub    $0xc,%esp
c000994c:	68 38 ed 00 c0       	push   $0xc000ed38
c0009951:	e8 98 d5 ff ff       	call   c0006eee <printk>
c0009956:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:136
		rollback_step = 1;
c0009959:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)
/work/x86_os_my/fs/file.c:137
		goto rollback;
c000995d:	e9 a7 01 00 00       	jmp    c0009b09 <file_create+0x24d>
/work/x86_os_my/fs/file.c:139
	}
	inode_init(inode_no, new_file_inode);	    // 初始化inode
c0009962:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0009965:	83 ec 08             	sub    $0x8,%esp
c0009968:	ff 75 e4             	pushl  -0x1c(%ebp)
c000996b:	50                   	push   %eax
c000996c:	e8 12 fd ff ff       	call   c0009683 <inode_init>
c0009971:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:142

	/* 3.申请一个file_table数组的下标 */
	int fd_idx = get_free_slot_in_global();
c0009974:	e8 60 fd ff ff       	call   c00096d9 <get_free_slot_in_global>
c0009979:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:143
	if (fd_idx == -1) {
c000997c:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c0009980:	75 19                	jne    c000999b <file_create+0xdf>
/work/x86_os_my/fs/file.c:144
		printk("exceed max open files\n");
c0009982:	83 ec 0c             	sub    $0xc,%esp
c0009985:	68 a8 ec 00 c0       	push   $0xc000eca8
c000998a:	e8 5f d5 ff ff       	call   c0006eee <printk>
c000998f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:145
		rollback_step = 2;
c0009992:	c6 45 f7 02          	movb   $0x2,-0x9(%ebp)
/work/x86_os_my/fs/file.c:146
		goto rollback;
c0009996:	e9 6e 01 00 00       	jmp    c0009b09 <file_create+0x24d>
/work/x86_os_my/fs/file.c:150
	}

	// 4.填充文件表中的文件结构
	file_table[fd_idx].fd_inode = new_file_inode;
c000999b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000999e:	89 d0                	mov    %edx,%eax
c00099a0:	01 c0                	add    %eax,%eax
c00099a2:	01 d0                	add    %edx,%eax
c00099a4:	c1 e0 02             	shl    $0x2,%eax
c00099a7:	8d 90 e8 4a 01 c0    	lea    -0x3ffeb518(%eax),%edx
c00099ad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00099b0:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/file.c:151
	file_table[fd_idx].fd_pos = 0;
c00099b2:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00099b5:	89 d0                	mov    %edx,%eax
c00099b7:	01 c0                	add    %eax,%eax
c00099b9:	01 d0                	add    %edx,%eax
c00099bb:	c1 e0 02             	shl    $0x2,%eax
c00099be:	05 e0 4a 01 c0       	add    $0xc0014ae0,%eax
c00099c3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/fs/file.c:152
	file_table[fd_idx].fd_flag = flag;
c00099c9:	0f b6 4d c4          	movzbl -0x3c(%ebp),%ecx
c00099cd:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00099d0:	89 d0                	mov    %edx,%eax
c00099d2:	01 c0                	add    %eax,%eax
c00099d4:	01 d0                	add    %edx,%eax
c00099d6:	c1 e0 02             	shl    $0x2,%eax
c00099d9:	05 e4 4a 01 c0       	add    $0xc0014ae4,%eax
c00099de:	89 08                	mov    %ecx,(%eax)
/work/x86_os_my/fs/file.c:153
	file_table[fd_idx].fd_inode->write_deny = false;
c00099e0:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00099e3:	89 d0                	mov    %edx,%eax
c00099e5:	01 c0                	add    %eax,%eax
c00099e7:	01 d0                	add    %edx,%eax
c00099e9:	c1 e0 02             	shl    $0x2,%eax
c00099ec:	05 e8 4a 01 c0       	add    $0xc0014ae8,%eax
c00099f1:	8b 00                	mov    (%eax),%eax
c00099f3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
/work/x86_os_my/fs/file.c:156

	struct dir_entry new_dir_entry;
	memset(&new_dir_entry, 0, sizeof(struct dir_entry));
c00099fa:	83 ec 04             	sub    $0x4,%esp
c00099fd:	6a 18                	push   $0x18
c00099ff:	6a 00                	push   $0x0
c0009a01:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0009a04:	50                   	push   %eax
c0009a05:	e8 fb 9f ff ff       	call   c0003a05 <memset>
c0009a0a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:159

	// create_dir_entry在内存中初始化目录项p_de，只是内存操作不会返回失败
	create_dir_entry(filename, inode_no, FT_REGULAR, &new_dir_entry);
c0009a0d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0009a10:	8d 55 cc             	lea    -0x34(%ebp),%edx
c0009a13:	52                   	push   %edx
c0009a14:	6a 01                	push   $0x1
c0009a16:	50                   	push   %eax
c0009a17:	ff 75 0c             	pushl  0xc(%ebp)
c0009a1a:	e8 73 10 00 00       	call   c000aa92 <create_dir_entry>
c0009a1f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:164


	/* 同步内存数据到硬盘 */
	/* a 在目录parent_dir下安装目录项new_dir_entry, 写入硬盘后返回true, 否则false【dir.c】 */
	if (!sync_dir_entry(parent_dir, &new_dir_entry, io_buf)) {
c0009a22:	83 ec 04             	sub    $0x4,%esp
c0009a25:	ff 75 ec             	pushl  -0x14(%ebp)
c0009a28:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0009a2b:	50                   	push   %eax
c0009a2c:	ff 75 08             	pushl  0x8(%ebp)
c0009a2f:	e8 cf 10 00 00       	call   c000ab03 <sync_dir_entry>
c0009a34:	83 c4 10             	add    $0x10,%esp
c0009a37:	85 c0                	test   %eax,%eax
c0009a39:	75 19                	jne    c0009a54 <file_create+0x198>
/work/x86_os_my/fs/file.c:165
		printk("sync dir_entry to disk failed\n");
c0009a3b:	83 ec 0c             	sub    $0xc,%esp
c0009a3e:	68 64 ed 00 c0       	push   $0xc000ed64
c0009a43:	e8 a6 d4 ff ff       	call   c0006eee <printk>
c0009a48:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:166
		rollback_step = 3;
c0009a4b:	c6 45 f7 03          	movb   $0x3,-0x9(%ebp)
/work/x86_os_my/fs/file.c:167
		goto rollback;
c0009a4f:	e9 b5 00 00 00       	jmp    c0009b09 <file_create+0x24d>
/work/x86_os_my/fs/file.c:171
	}

	/* b sync_dir_entry 会改变父目录 inode 中的信息，因此，将父目录inode的内容同步到硬盘【inode.c】 */
	memset(io_buf, 0, 1024);
c0009a54:	83 ec 04             	sub    $0x4,%esp
c0009a57:	68 00 04 00 00       	push   $0x400
c0009a5c:	6a 00                	push   $0x0
c0009a5e:	ff 75 ec             	pushl  -0x14(%ebp)
c0009a61:	e8 9f 9f ff ff       	call   c0003a05 <memset>
c0009a66:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:172
	inode_sync(cur_part, parent_dir->inode, io_buf);
c0009a69:	8b 45 08             	mov    0x8(%ebp),%eax
c0009a6c:	8b 10                	mov    (%eax),%edx
c0009a6e:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c0009a73:	83 ec 04             	sub    $0x4,%esp
c0009a76:	ff 75 ec             	pushl  -0x14(%ebp)
c0009a79:	52                   	push   %edx
c0009a7a:	50                   	push   %eax
c0009a7b:	e8 cf f5 ff ff       	call   c000904f <inode_sync>
c0009a80:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:175

	/* c 将新创建文件的inode内容同步到硬盘 */
	memset(io_buf, 0, 1024);
c0009a83:	83 ec 04             	sub    $0x4,%esp
c0009a86:	68 00 04 00 00       	push   $0x400
c0009a8b:	6a 00                	push   $0x0
c0009a8d:	ff 75 ec             	pushl  -0x14(%ebp)
c0009a90:	e8 70 9f ff ff       	call   c0003a05 <memset>
c0009a95:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:176
	inode_sync(cur_part, new_file_inode, io_buf);
c0009a98:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c0009a9d:	83 ec 04             	sub    $0x4,%esp
c0009aa0:	ff 75 ec             	pushl  -0x14(%ebp)
c0009aa3:	ff 75 e4             	pushl  -0x1c(%ebp)
c0009aa6:	50                   	push   %eax
c0009aa7:	e8 a3 f5 ff ff       	call   c000904f <inode_sync>
c0009aac:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:179

	/* d 将inode_bitmap位图同步到硬盘【file.c】 */
	bitmap_sync(cur_part, inode_no, INODE_BITMAP);
c0009aaf:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0009ab2:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c0009ab7:	83 ec 04             	sub    $0x4,%esp
c0009aba:	6a 00                	push   $0x0
c0009abc:	52                   	push   %edx
c0009abd:	50                   	push   %eax
c0009abe:	e8 71 fd ff ff       	call   c0009834 <bitmap_sync>
c0009ac3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:182

	/* e 将创建的文件i结点添加到open_inodes链表 */
	list_push(&cur_part->open_inodes, &new_file_inode->inode_tag);
c0009ac6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0009ac9:	8d 50 44             	lea    0x44(%eax),%edx
c0009acc:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c0009ad1:	83 c0 30             	add    $0x30,%eax
c0009ad4:	83 ec 08             	sub    $0x8,%esp
c0009ad7:	52                   	push   %edx
c0009ad8:	50                   	push   %eax
c0009ad9:	e8 6e af ff ff       	call   c0004a4c <list_push>
c0009ade:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:183
	new_file_inode->i_open_cnts = 1;
c0009ae1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0009ae4:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/fs/file.c:186


	sys_free(io_buf);
c0009aeb:	83 ec 0c             	sub    $0xc,%esp
c0009aee:	ff 75 ec             	pushl  -0x14(%ebp)
c0009af1:	e8 e3 99 ff ff       	call   c00034d9 <sys_free>
c0009af6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:187
	return pcb_fd_install(fd_idx);	// 将 file_table 的下标，安装到，线程PCB中文件描述符数组 fd_table【file.c】
c0009af9:	83 ec 0c             	sub    $0xc,%esp
c0009afc:	ff 75 f0             	pushl  -0x10(%ebp)
c0009aff:	e8 2a fc ff ff       	call   c000972e <pcb_fd_install>
c0009b04:	83 c4 10             	add    $0x10,%esp
c0009b07:	eb 73                	jmp    c0009b7c <file_create+0x2c0>
/work/x86_os_my/fs/file.c:191


rollback:
	switch (rollback_step) {
c0009b09:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0009b0d:	83 f8 02             	cmp    $0x2,%eax
c0009b10:	74 2d                	je     c0009b3f <file_create+0x283>
c0009b12:	83 f8 03             	cmp    $0x3,%eax
c0009b15:	74 07                	je     c0009b1e <file_create+0x262>
c0009b17:	83 f8 01             	cmp    $0x1,%eax
c0009b1a:	74 31                	je     c0009b4d <file_create+0x291>
c0009b1c:	eb 4b                	jmp    c0009b69 <file_create+0x2ad>
/work/x86_os_my/fs/file.c:194
		case 3:
		/* file_table 相应位清空 */
		memset(&file_table[fd_idx], 0, sizeof(struct file)); 
c0009b1e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0009b21:	89 d0                	mov    %edx,%eax
c0009b23:	01 c0                	add    %eax,%eax
c0009b25:	01 d0                	add    %edx,%eax
c0009b27:	c1 e0 02             	shl    $0x2,%eax
c0009b2a:	05 e0 4a 01 c0       	add    $0xc0014ae0,%eax
c0009b2f:	83 ec 04             	sub    $0x4,%esp
c0009b32:	6a 0c                	push   $0xc
c0009b34:	6a 00                	push   $0x0
c0009b36:	50                   	push   %eax
c0009b37:	e8 c9 9e ff ff       	call   c0003a05 <memset>
c0009b3c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:196
		case 2:
		sys_free(new_file_inode);
c0009b3f:	83 ec 0c             	sub    $0xc,%esp
c0009b42:	ff 75 e4             	pushl  -0x1c(%ebp)
c0009b45:	e8 8f 99 ff ff       	call   c00034d9 <sys_free>
c0009b4a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:199
		case 1:
		/* inode位图 恢复 */
		bitmap_set(&cur_part->inode_bitmap, inode_no, 0);
c0009b4d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0009b50:	8b 15 d0 4a 01 c0    	mov    0xc0014ad0,%edx
c0009b56:	83 c2 28             	add    $0x28,%edx
c0009b59:	83 ec 04             	sub    $0x4,%esp
c0009b5c:	6a 00                	push   $0x0
c0009b5e:	50                   	push   %eax
c0009b5f:	52                   	push   %edx
c0009b60:	e8 0a 8c ff ff       	call   c000276f <bitmap_set>
c0009b65:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:200
		break;
c0009b68:	90                   	nop
/work/x86_os_my/fs/file.c:202
	}
	sys_free(io_buf);
c0009b69:	83 ec 0c             	sub    $0xc,%esp
c0009b6c:	ff 75 ec             	pushl  -0x14(%ebp)
c0009b6f:	e8 65 99 ff ff       	call   c00034d9 <sys_free>
c0009b74:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:203
	return -1;
c0009b77:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
/work/x86_os_my/fs/file.c:204 (discriminator 1)
}
c0009b7c:	c9                   	leave  
c0009b7d:	c3                   	ret    

c0009b7e <file_open>:
file_open():
/work/x86_os_my/fs/file.c:207

/* 打开编号为inode_no的inode对应的文件,若成功则返回文件描述符,否则返回-1 */
int32_t file_open(uint32_t inode_no, uint8_t flag) {
c0009b7e:	55                   	push   %ebp
c0009b7f:	89 e5                	mov    %esp,%ebp
c0009b81:	83 ec 28             	sub    $0x28,%esp
c0009b84:	8b 45 0c             	mov    0xc(%ebp),%eax
c0009b87:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/fs/file.c:208
	int fd_idx = get_free_slot_in_global();
c0009b8a:	e8 4a fb ff ff       	call   c00096d9 <get_free_slot_in_global>
c0009b8f:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:209
	if (fd_idx == -1) {
c0009b92:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c0009b96:	75 1a                	jne    c0009bb2 <file_open+0x34>
/work/x86_os_my/fs/file.c:210
		printk("exceed max open files\n");
c0009b98:	83 ec 0c             	sub    $0xc,%esp
c0009b9b:	68 a8 ec 00 c0       	push   $0xc000eca8
c0009ba0:	e8 49 d3 ff ff       	call   c0006eee <printk>
c0009ba5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:211
		return -1;
c0009ba8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009bad:	e9 e3 00 00 00       	jmp    c0009c95 <file_open+0x117>
/work/x86_os_my/fs/file.c:213
	}
	file_table[fd_idx].fd_inode = inode_open(cur_part, inode_no);
c0009bb2:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c0009bb7:	83 ec 08             	sub    $0x8,%esp
c0009bba:	ff 75 08             	pushl  0x8(%ebp)
c0009bbd:	50                   	push   %eax
c0009bbe:	e8 b3 f5 ff ff       	call   c0009176 <inode_open>
c0009bc3:	83 c4 10             	add    $0x10,%esp
c0009bc6:	89 c1                	mov    %eax,%ecx
c0009bc8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0009bcb:	89 d0                	mov    %edx,%eax
c0009bcd:	01 c0                	add    %eax,%eax
c0009bcf:	01 d0                	add    %edx,%eax
c0009bd1:	c1 e0 02             	shl    $0x2,%eax
c0009bd4:	05 e8 4a 01 c0       	add    $0xc0014ae8,%eax
c0009bd9:	89 08                	mov    %ecx,(%eax)
/work/x86_os_my/fs/file.c:214
	file_table[fd_idx].fd_pos = 0;		// 每次打开文件,要将fd_pos还原为0,即让文件内的指针指向开头
c0009bdb:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0009bde:	89 d0                	mov    %edx,%eax
c0009be0:	01 c0                	add    %eax,%eax
c0009be2:	01 d0                	add    %edx,%eax
c0009be4:	c1 e0 02             	shl    $0x2,%eax
c0009be7:	05 e0 4a 01 c0       	add    $0xc0014ae0,%eax
c0009bec:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/fs/file.c:215
	file_table[fd_idx].fd_flag = flag;
c0009bf2:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
c0009bf6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0009bf9:	89 d0                	mov    %edx,%eax
c0009bfb:	01 c0                	add    %eax,%eax
c0009bfd:	01 d0                	add    %edx,%eax
c0009bff:	c1 e0 02             	shl    $0x2,%eax
c0009c02:	05 e4 4a 01 c0       	add    $0xc0014ae4,%eax
c0009c07:	89 08                	mov    %ecx,(%eax)
/work/x86_os_my/fs/file.c:216
	bool* write_deny = &file_table[fd_idx].fd_inode->write_deny;
c0009c09:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0009c0c:	89 d0                	mov    %edx,%eax
c0009c0e:	01 c0                	add    %eax,%eax
c0009c10:	01 d0                	add    %edx,%eax
c0009c12:	c1 e0 02             	shl    $0x2,%eax
c0009c15:	05 e8 4a 01 c0       	add    $0xc0014ae8,%eax
c0009c1a:	8b 00                	mov    (%eax),%eax
c0009c1c:	83 c0 0c             	add    $0xc,%eax
c0009c1f:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:218

	if (flag & O_WRONLY || flag & O_RDWR) {	// 要写文件,需要判断是否有其它进程正写此文件。创建文件、读文件不考虑write_deny。
c0009c22:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0009c26:	83 e0 01             	and    $0x1,%eax
c0009c29:	85 c0                	test   %eax,%eax
c0009c2b:	75 0b                	jne    c0009c38 <file_open+0xba>
/work/x86_os_my/fs/file.c:218 (discriminator 1)
c0009c2d:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0009c31:	83 e0 02             	and    $0x2,%eax
c0009c34:	85 c0                	test   %eax,%eax
c0009c36:	74 4f                	je     c0009c87 <file_open+0x109>
/work/x86_os_my/fs/file.c:220
		/* 以下进入临界区前先关中断 */
		enum intr_status old_status = intr_disable();
c0009c38:	e8 dc 7e ff ff       	call   c0001b19 <intr_disable>
c0009c3d:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/file.c:221
		if (!(*write_deny)) {	// 若当前没有其它进程写该文件,将其占用.
c0009c40:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0009c43:	8b 00                	mov    (%eax),%eax
c0009c45:	85 c0                	test   %eax,%eax
c0009c47:	75 19                	jne    c0009c62 <file_open+0xe4>
/work/x86_os_my/fs/file.c:222
			*write_deny = true;
c0009c49:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0009c4c:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
/work/x86_os_my/fs/file.c:223
			intr_set_status(old_status);
c0009c52:	83 ec 0c             	sub    $0xc,%esp
c0009c55:	ff 75 ec             	pushl  -0x14(%ebp)
c0009c58:	e8 e5 7e ff ff       	call   c0001b42 <intr_set_status>
c0009c5d:	83 c4 10             	add    $0x10,%esp
c0009c60:	eb 25                	jmp    c0009c87 <file_open+0x109>
/work/x86_os_my/fs/file.c:225
		} else {
			intr_set_status(old_status);
c0009c62:	83 ec 0c             	sub    $0xc,%esp
c0009c65:	ff 75 ec             	pushl  -0x14(%ebp)
c0009c68:	e8 d5 7e ff ff       	call   c0001b42 <intr_set_status>
c0009c6d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:226
			printk("file can`t be write now, try again later\n");
c0009c70:	83 ec 0c             	sub    $0xc,%esp
c0009c73:	68 84 ed 00 c0       	push   $0xc000ed84
c0009c78:	e8 71 d2 ff ff       	call   c0006eee <printk>
c0009c7d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:227
			return -1;
c0009c80:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009c85:	eb 0e                	jmp    c0009c95 <file_open+0x117>
/work/x86_os_my/fs/file.c:230
		}
	}
	return pcb_fd_install(fd_idx);
c0009c87:	83 ec 0c             	sub    $0xc,%esp
c0009c8a:	ff 75 f4             	pushl  -0xc(%ebp)
c0009c8d:	e8 9c fa ff ff       	call   c000972e <pcb_fd_install>
c0009c92:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:231
}
c0009c95:	c9                   	leave  
c0009c96:	c3                   	ret    

c0009c97 <file_close>:
file_close():
/work/x86_os_my/fs/file.c:234

/* 关闭文件 */
int32_t file_close(struct file* file) {
c0009c97:	55                   	push   %ebp
c0009c98:	89 e5                	mov    %esp,%ebp
c0009c9a:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/fs/file.c:235
	if (file == NULL) {
c0009c9d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0009ca1:	75 07                	jne    c0009caa <file_close+0x13>
/work/x86_os_my/fs/file.c:236
		return -1;
c0009ca3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009ca8:	eb 2e                	jmp    c0009cd8 <file_close+0x41>
/work/x86_os_my/fs/file.c:238
	}
	file->fd_inode->write_deny = false;
c0009caa:	8b 45 08             	mov    0x8(%ebp),%eax
c0009cad:	8b 40 08             	mov    0x8(%eax),%eax
c0009cb0:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
/work/x86_os_my/fs/file.c:239
	inode_close(file->fd_inode);
c0009cb7:	8b 45 08             	mov    0x8(%ebp),%eax
c0009cba:	8b 40 08             	mov    0x8(%eax),%eax
c0009cbd:	83 ec 0c             	sub    $0xc,%esp
c0009cc0:	50                   	push   %eax
c0009cc1:	e8 f6 f5 ff ff       	call   c00092bc <inode_close>
c0009cc6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:240
	file->fd_inode = NULL;   // 使文件结构可用
c0009cc9:	8b 45 08             	mov    0x8(%ebp),%eax
c0009ccc:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
/work/x86_os_my/fs/file.c:241
	return 0;
c0009cd3:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/file.c:242
}
c0009cd8:	c9                   	leave  
c0009cd9:	c3                   	ret    

c0009cda <file_write>:
file_write():
/work/x86_os_my/fs/file.c:245

/* 把buf中的count个字节写入file,成功则返回写入的字节数,失败则返回-1 */
int32_t file_write(struct file* file, const void* buf, uint32_t count) {
c0009cda:	55                   	push   %ebp
c0009cdb:	89 e5                	mov    %esp,%ebp
c0009cdd:	83 ec 58             	sub    $0x58,%esp
/work/x86_os_my/fs/file.c:246
	if ((file->fd_inode->i_size + count) > (BLOCK_SIZE * 140))	{	// 文件目前最大只支持512B*140块=71680字节【12直接块+128间接块】
c0009ce0:	8b 45 08             	mov    0x8(%ebp),%eax
c0009ce3:	8b 40 08             	mov    0x8(%eax),%eax
c0009ce6:	8b 50 04             	mov    0x4(%eax),%edx
c0009ce9:	8b 45 10             	mov    0x10(%ebp),%eax
c0009cec:	01 d0                	add    %edx,%eax
c0009cee:	3d 00 18 01 00       	cmp    $0x11800,%eax
c0009cf3:	76 1a                	jbe    c0009d0f <file_write+0x35>
/work/x86_os_my/fs/file.c:247
		printk("exceed max file_size 71680 bytes, write file failed\n");
c0009cf5:	83 ec 0c             	sub    $0xc,%esp
c0009cf8:	68 b0 ed 00 c0       	push   $0xc000edb0
c0009cfd:	e8 ec d1 ff ff       	call   c0006eee <printk>
c0009d02:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:248
		return -1;
c0009d05:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009d0a:	e9 5d 07 00 00       	jmp    c000a46c <file_write+0x792>
/work/x86_os_my/fs/file.c:250
	}
	uint8_t* io_buf = sys_malloc(BLOCK_SIZE);
c0009d0f:	83 ec 0c             	sub    $0xc,%esp
c0009d12:	68 00 02 00 00       	push   $0x200
c0009d17:	e8 90 91 ff ff       	call   c0002eac <sys_malloc>
c0009d1c:	83 c4 10             	add    $0x10,%esp
c0009d1f:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/file.c:251
	if (io_buf == NULL) {
c0009d22:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0009d26:	75 1a                	jne    c0009d42 <file_write+0x68>
/work/x86_os_my/fs/file.c:252
		printk("file_write: sys_malloc for io_buf failed\n");
c0009d28:	83 ec 0c             	sub    $0xc,%esp
c0009d2b:	68 e8 ed 00 c0       	push   $0xc000ede8
c0009d30:	e8 b9 d1 ff ff       	call   c0006eee <printk>
c0009d35:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:253
		return -1;
c0009d38:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009d3d:	e9 2a 07 00 00       	jmp    c000a46c <file_write+0x792>
/work/x86_os_my/fs/file.c:255
	}
	uint32_t* all_blocks = (uint32_t*)sys_malloc(BLOCK_SIZE + 48);	  // 用来记录文件所有的块地址【560/4=160】
c0009d42:	83 ec 0c             	sub    $0xc,%esp
c0009d45:	68 30 02 00 00       	push   $0x230
c0009d4a:	e8 5d 91 ff ff       	call   c0002eac <sys_malloc>
c0009d4f:	83 c4 10             	add    $0x10,%esp
c0009d52:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/file.c:256
	if (all_blocks == NULL) {
c0009d55:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0009d59:	75 1a                	jne    c0009d75 <file_write+0x9b>
/work/x86_os_my/fs/file.c:257
		printk("file_write: sys_malloc for all_blocks failed\n");
c0009d5b:	83 ec 0c             	sub    $0xc,%esp
c0009d5e:	68 14 ee 00 c0       	push   $0xc000ee14
c0009d63:	e8 86 d1 ff ff       	call   c0006eee <printk>
c0009d68:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:258
		return -1;
c0009d6b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009d70:	e9 f7 06 00 00       	jmp    c000a46c <file_write+0x792>
/work/x86_os_my/fs/file.c:261
	}

	int32_t block_lba = -1;			// 块地址
c0009d75:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
/work/x86_os_my/fs/file.c:262
	uint32_t block_bitmap_idx = 0;	// block_bitmap中的索引,做为参数传给bitmap_sync
c0009d7c:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
/work/x86_os_my/fs/file.c:267
	int32_t indirect_block_table;	// 一级间接表地址
	uint32_t block_idx;				// 块索引

	/* 判断文件是否是第一次写，如果是，先为其分配一个块 */
	if (file->fd_inode->i_sectors[0] == 0) {
c0009d83:	8b 45 08             	mov    0x8(%ebp),%eax
c0009d86:	8b 40 08             	mov    0x8(%eax),%eax
c0009d89:	8b 40 10             	mov    0x10(%eax),%eax
c0009d8c:	85 c0                	test   %eax,%eax
c0009d8e:	0f 85 8d 00 00 00    	jne    c0009e21 <file_write+0x147>
/work/x86_os_my/fs/file.c:268
		block_lba = block_bitmap_alloc(cur_part);
c0009d94:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c0009d99:	83 ec 0c             	sub    $0xc,%esp
c0009d9c:	50                   	push   %eax
c0009d9d:	e8 40 fa ff ff       	call   c00097e2 <block_bitmap_alloc>
c0009da2:	83 c4 10             	add    $0x10,%esp
c0009da5:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/file.c:269
		if (block_lba == -1) {
c0009da8:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
c0009dac:	75 1a                	jne    c0009dc8 <file_write+0xee>
/work/x86_os_my/fs/file.c:270
			printk("file_write: block_bitmap_alloc failed\n");
c0009dae:	83 ec 0c             	sub    $0xc,%esp
c0009db1:	68 44 ee 00 c0       	push   $0xc000ee44
c0009db6:	e8 33 d1 ff ff       	call   c0006eee <printk>
c0009dbb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:271
			return -1;
c0009dbe:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009dc3:	e9 a4 06 00 00       	jmp    c000a46c <file_write+0x792>
/work/x86_os_my/fs/file.c:273
		}
		file->fd_inode->i_sectors[0] = block_lba;
c0009dc8:	8b 45 08             	mov    0x8(%ebp),%eax
c0009dcb:	8b 40 08             	mov    0x8(%eax),%eax
c0009dce:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0009dd1:	89 50 10             	mov    %edx,0x10(%eax)
/work/x86_os_my/fs/file.c:276

		/* 每分配一个块就将位图同步到硬盘 */
		block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
c0009dd4:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0009dd7:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c0009ddc:	8b 40 1c             	mov    0x1c(%eax),%eax
c0009ddf:	8b 40 28             	mov    0x28(%eax),%eax
c0009de2:	29 c2                	sub    %eax,%edx
c0009de4:	89 d0                	mov    %edx,%eax
c0009de6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/fs/file.c:277
		ASSERT(block_bitmap_idx != 0);
c0009de9:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0009ded:	75 1c                	jne    c0009e0b <file_write+0x131>
/work/x86_os_my/fs/file.c:277 (discriminator 1)
c0009def:	68 6b ee 00 c0       	push   $0xc000ee6b
c0009df4:	68 b0 f0 00 c0       	push   $0xc000f0b0
c0009df9:	68 15 01 00 00       	push   $0x115
c0009dfe:	68 81 ee 00 c0       	push   $0xc000ee81
c0009e03:	e8 f9 86 ff ff       	call   c0002501 <panic_spin>
c0009e08:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:278
		bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c0009e0b:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c0009e10:	83 ec 04             	sub    $0x4,%esp
c0009e13:	6a 01                	push   $0x1
c0009e15:	ff 75 d4             	pushl  -0x2c(%ebp)
c0009e18:	50                   	push   %eax
c0009e19:	e8 16 fa ff ff       	call   c0009834 <bitmap_sync>
c0009e1e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:282
	}

	/* 写入count个字节前，该文件已占用的块数 */
	uint32_t file_has_used_blocks = file->fd_inode->i_size / BLOCK_SIZE + 1;
c0009e21:	8b 45 08             	mov    0x8(%ebp),%eax
c0009e24:	8b 40 08             	mov    0x8(%eax),%eax
c0009e27:	8b 40 04             	mov    0x4(%eax),%eax
c0009e2a:	c1 e8 09             	shr    $0x9,%eax
c0009e2d:	83 c0 01             	add    $0x1,%eax
c0009e30:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/fs/file.c:284
	/* 写入count个字节后，该文件将占用的块数 */
	uint32_t file_will_use_blocks = (file->fd_inode->i_size + count) / BLOCK_SIZE + 1;
c0009e33:	8b 45 08             	mov    0x8(%ebp),%eax
c0009e36:	8b 40 08             	mov    0x8(%eax),%eax
c0009e39:	8b 50 04             	mov    0x4(%eax),%edx
c0009e3c:	8b 45 10             	mov    0x10(%ebp),%eax
c0009e3f:	01 d0                	add    %edx,%eax
c0009e41:	c1 e8 09             	shr    $0x9,%eax
c0009e44:	83 c0 01             	add    $0x1,%eax
c0009e47:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/fs/file.c:285
	ASSERT(file_will_use_blocks <= 140);
c0009e4a:	81 7d cc 8c 00 00 00 	cmpl   $0x8c,-0x34(%ebp)
c0009e51:	76 1c                	jbe    c0009e6f <file_write+0x195>
/work/x86_os_my/fs/file.c:285 (discriminator 1)
c0009e53:	68 8b ee 00 c0       	push   $0xc000ee8b
c0009e58:	68 b0 f0 00 c0       	push   $0xc000f0b0
c0009e5d:	68 1d 01 00 00       	push   $0x11d
c0009e62:	68 81 ee 00 c0       	push   $0xc000ee81
c0009e67:	e8 95 86 ff ff       	call   c0002501 <panic_spin>
c0009e6c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:287
	/* 通过此增量判断是否需要分配扇区，若增量为0，表示原扇区够用 */
	uint32_t add_blocks = file_will_use_blocks - file_has_used_blocks;
c0009e6f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0009e72:	2b 45 d0             	sub    -0x30(%ebp),%eax
c0009e75:	89 45 c8             	mov    %eax,-0x38(%ebp)
/work/x86_os_my/fs/file.c:294
	/* 将文件所有块地址收集到all_blocks，后面都统一在all_blocks中获取要写入的扇区地址
	 * 没有新增的数据块时，只更新 all_blocks
	 * 需要新增数据块时，除了 all_blocks 还要更新 file->fd_inode->i_sectors[x]
	 */
	/* 在同一数据块（扇区）内写入数据，不涉及到分配新扇区 */
	if (add_blocks == 0) {
c0009e78:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0009e7c:	0f 85 8c 00 00 00    	jne    c0009f0e <file_write+0x234>
/work/x86_os_my/fs/file.c:295
		if (file_has_used_blocks <= 12 ) {	// 文件数据量将在12块之内
c0009e82:	83 7d d0 0c          	cmpl   $0xc,-0x30(%ebp)
c0009e86:	77 2e                	ja     c0009eb6 <file_write+0x1dc>
/work/x86_os_my/fs/file.c:296
			block_idx = file_has_used_blocks - 1;	// 指向最后一个已占用的数据块（扇区）
c0009e88:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0009e8b:	83 e8 01             	sub    $0x1,%eax
c0009e8e:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:297
			all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];
c0009e91:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009e94:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0009e9b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009e9e:	01 c2                	add    %eax,%edx
c0009ea0:	8b 45 08             	mov    0x8(%ebp),%eax
c0009ea3:	8b 40 08             	mov    0x8(%eax),%eax
c0009ea6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0009ea9:	83 c1 04             	add    $0x4,%ecx
c0009eac:	8b 04 88             	mov    (%eax,%ecx,4),%eax
c0009eaf:	89 02                	mov    %eax,(%edx)
c0009eb1:	e9 4e 04 00 00       	jmp    c000a304 <file_write+0x62a>
/work/x86_os_my/fs/file.c:300
		} else {
			/* 未写入新数据之前已经占用了间接块,需要将间接块地址读进来 */
			ASSERT(file->fd_inode->i_sectors[12] != 0);	//一级间接表存在
c0009eb6:	8b 45 08             	mov    0x8(%ebp),%eax
c0009eb9:	8b 40 08             	mov    0x8(%eax),%eax
c0009ebc:	8b 40 40             	mov    0x40(%eax),%eax
c0009ebf:	85 c0                	test   %eax,%eax
c0009ec1:	75 1c                	jne    c0009edf <file_write+0x205>
/work/x86_os_my/fs/file.c:300 (discriminator 1)
c0009ec3:	68 a8 ee 00 c0       	push   $0xc000eea8
c0009ec8:	68 b0 f0 00 c0       	push   $0xc000f0b0
c0009ecd:	68 2c 01 00 00       	push   $0x12c
c0009ed2:	68 81 ee 00 c0       	push   $0xc000ee81
c0009ed7:	e8 25 86 ff ff       	call   c0002501 <panic_spin>
c0009edc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:301
			indirect_block_table = file->fd_inode->i_sectors[12];
c0009edf:	8b 45 08             	mov    0x8(%ebp),%eax
c0009ee2:	8b 40 08             	mov    0x8(%eax),%eax
c0009ee5:	8b 40 40             	mov    0x40(%eax),%eax
c0009ee8:	89 45 c4             	mov    %eax,-0x3c(%ebp)
/work/x86_os_my/fs/file.c:302
			ide_read(cur_part->my_disk, indirect_block_table, all_blocks + 12, 1);	//读出整个一级间接表512字节（128个间接块的地址）
c0009eeb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009eee:	8d 48 30             	lea    0x30(%eax),%ecx
c0009ef1:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0009ef4:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c0009ef9:	8b 40 08             	mov    0x8(%eax),%eax
c0009efc:	6a 01                	push   $0x1
c0009efe:	51                   	push   %ecx
c0009eff:	52                   	push   %edx
c0009f00:	50                   	push   %eax
c0009f01:	e8 6f c5 ff ff       	call   c0006475 <ide_read>
c0009f06:	83 c4 10             	add    $0x10,%esp
c0009f09:	e9 f6 03 00 00       	jmp    c000a304 <file_write+0x62a>
/work/x86_os_my/fs/file.c:308
		}
	} else {
	/* 若有增量，便涉及到分配新数据块（扇区），以及是否分配一级间接块表。
	 * 分三种情况处理： */
		/* 第一种情况：12个直接块够用*/
		if (file_will_use_blocks <= 12 ) {
c0009f0e:	83 7d cc 0c          	cmpl   $0xc,-0x34(%ebp)
c0009f12:	0f 87 2b 01 00 00    	ja     c000a043 <file_write+0x369>
/work/x86_os_my/fs/file.c:310
			/* 将有剩余空间的可继续用的数据块（扇区）地址写入all_blocks */
			block_idx = file_has_used_blocks - 1;	// 指向最后一个已占用的数据块（扇区）
c0009f18:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0009f1b:	83 e8 01             	sub    $0x1,%eax
c0009f1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:311
			ASSERT(file->fd_inode->i_sectors[block_idx] != 0);
c0009f21:	8b 45 08             	mov    0x8(%ebp),%eax
c0009f24:	8b 40 08             	mov    0x8(%eax),%eax
c0009f27:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0009f2a:	83 c2 04             	add    $0x4,%edx
c0009f2d:	8b 04 90             	mov    (%eax,%edx,4),%eax
c0009f30:	85 c0                	test   %eax,%eax
c0009f32:	75 1c                	jne    c0009f50 <file_write+0x276>
/work/x86_os_my/fs/file.c:311 (discriminator 1)
c0009f34:	68 cc ee 00 c0       	push   $0xc000eecc
c0009f39:	68 b0 f0 00 c0       	push   $0xc000f0b0
c0009f3e:	68 37 01 00 00       	push   $0x137
c0009f43:	68 81 ee 00 c0       	push   $0xc000ee81
c0009f48:	e8 b4 85 ff ff       	call   c0002501 <panic_spin>
c0009f4d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:312
			all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];
c0009f50:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009f53:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0009f5a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009f5d:	01 c2                	add    %eax,%edx
c0009f5f:	8b 45 08             	mov    0x8(%ebp),%eax
c0009f62:	8b 40 08             	mov    0x8(%eax),%eax
c0009f65:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0009f68:	83 c1 04             	add    $0x4,%ecx
c0009f6b:	8b 04 88             	mov    (%eax,%ecx,4),%eax
c0009f6e:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/file.c:315

			/* 将未来要用的新数据块（扇区）分配好后写入all_blocks */
			block_idx = file_has_used_blocks;		// 指向第一个要分配的新数据块（扇区）
c0009f70:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0009f73:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:316
			while (block_idx < file_will_use_blocks) {
c0009f76:	e9 b7 00 00 00       	jmp    c000a032 <file_write+0x358>
/work/x86_os_my/fs/file.c:317
				block_lba = block_bitmap_alloc(cur_part);
c0009f7b:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c0009f80:	83 ec 0c             	sub    $0xc,%esp
c0009f83:	50                   	push   %eax
c0009f84:	e8 59 f8 ff ff       	call   c00097e2 <block_bitmap_alloc>
c0009f89:	83 c4 10             	add    $0x10,%esp
c0009f8c:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/file.c:318
				if (block_lba == -1) {
c0009f8f:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
c0009f93:	75 1a                	jne    c0009faf <file_write+0x2d5>
/work/x86_os_my/fs/file.c:319
					printk("file_write: block_bitmap_alloc for situation 1 failed\n");
c0009f95:	83 ec 0c             	sub    $0xc,%esp
c0009f98:	68 f8 ee 00 c0       	push   $0xc000eef8
c0009f9d:	e8 4c cf ff ff       	call   c0006eee <printk>
c0009fa2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:320
					return -1;
c0009fa5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009faa:	e9 bd 04 00 00       	jmp    c000a46c <file_write+0x792>
/work/x86_os_my/fs/file.c:324
				}

				/* 写文件时，数据块未使用时肯定有 i_sectors[x]==0。因为文件删除时，会把i_sectors[x]里的数据块地址清0 */
				ASSERT(file->fd_inode->i_sectors[block_idx] == 0);	// 确保尚未分配扇区地址
c0009faf:	8b 45 08             	mov    0x8(%ebp),%eax
c0009fb2:	8b 40 08             	mov    0x8(%eax),%eax
c0009fb5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0009fb8:	83 c2 04             	add    $0x4,%edx
c0009fbb:	8b 04 90             	mov    (%eax,%edx,4),%eax
c0009fbe:	85 c0                	test   %eax,%eax
c0009fc0:	74 1c                	je     c0009fde <file_write+0x304>
/work/x86_os_my/fs/file.c:324 (discriminator 1)
c0009fc2:	68 30 ef 00 c0       	push   $0xc000ef30
c0009fc7:	68 b0 f0 00 c0       	push   $0xc000f0b0
c0009fcc:	68 44 01 00 00       	push   $0x144
c0009fd1:	68 81 ee 00 c0       	push   $0xc000ee81
c0009fd6:	e8 26 85 ff ff       	call   c0002501 <panic_spin>
c0009fdb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:325
				file->fd_inode->i_sectors[block_idx] = all_blocks[block_idx] = block_lba;		//处理直接块
c0009fde:	8b 45 08             	mov    0x8(%ebp),%eax
c0009fe1:	8b 50 08             	mov    0x8(%eax),%edx
c0009fe4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009fe7:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
c0009fee:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009ff1:	01 c8                	add    %ecx,%eax
c0009ff3:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0009ff6:	89 08                	mov    %ecx,(%eax)
c0009ff8:	8b 00                	mov    (%eax),%eax
c0009ffa:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0009ffd:	83 c1 04             	add    $0x4,%ecx
c000a000:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
/work/x86_os_my/fs/file.c:328

				/* 每分配一个块就将位图同步到硬盘 */
				block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
c000a003:	8b 55 d8             	mov    -0x28(%ebp),%edx
c000a006:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000a00b:	8b 40 1c             	mov    0x1c(%eax),%eax
c000a00e:	8b 40 28             	mov    0x28(%eax),%eax
c000a011:	29 c2                	sub    %eax,%edx
c000a013:	89 d0                	mov    %edx,%eax
c000a015:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/fs/file.c:330
				// 这回怎么没有这句了：ASSERT(block_bitmap_idx != 0);
				bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c000a018:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000a01d:	83 ec 04             	sub    $0x4,%esp
c000a020:	6a 01                	push   $0x1
c000a022:	ff 75 d4             	pushl  -0x2c(%ebp)
c000a025:	50                   	push   %eax
c000a026:	e8 09 f8 ff ff       	call   c0009834 <bitmap_sync>
c000a02b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:332

				block_idx++;   // 下一个分配的新扇区
c000a02e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/file.c:316
			ASSERT(file->fd_inode->i_sectors[block_idx] != 0);
			all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];

			/* 将未来要用的新数据块（扇区）分配好后写入all_blocks */
			block_idx = file_has_used_blocks;		// 指向第一个要分配的新数据块（扇区）
			while (block_idx < file_will_use_blocks) {
c000a032:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000a035:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c000a038:	0f 82 3d ff ff ff    	jb     c0009f7b <file_write+0x2a1>
c000a03e:	e9 c1 02 00 00       	jmp    c000a304 <file_write+0x62a>
/work/x86_os_my/fs/file.c:334
				// 这回怎么没有这句了：ASSERT(block_bitmap_idx != 0);
				bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);

				block_idx++;   // 下一个分配的新扇区
			}
		} else if (file_has_used_blocks <= 12 && file_will_use_blocks > 12) {
c000a043:	83 7d d0 0c          	cmpl   $0xc,-0x30(%ebp)
c000a047:	0f 87 af 01 00 00    	ja     c000a1fc <file_write+0x522>
/work/x86_os_my/fs/file.c:334 (discriminator 1)
c000a04d:	83 7d cc 0c          	cmpl   $0xc,-0x34(%ebp)
c000a051:	0f 86 a5 01 00 00    	jbe    c000a1fc <file_write+0x522>
/work/x86_os_my/fs/file.c:338
		/* 第二种情况：旧数据在12个直接块内，新数据将使用间接块【可能也使用一些直接块】 */

			/* 先将有剩余空间的可继续用的扇区地址收集到all_blocks */
			block_idx = file_has_used_blocks - 1;	// 指向最后一个已占用的数据块（扇区）
c000a057:	8b 45 d0             	mov    -0x30(%ebp),%eax
c000a05a:	83 e8 01             	sub    $0x1,%eax
c000a05d:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:339
			all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];						//处理直接块
c000a060:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000a063:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000a06a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a06d:	01 c2                	add    %eax,%edx
c000a06f:	8b 45 08             	mov    0x8(%ebp),%eax
c000a072:	8b 40 08             	mov    0x8(%eax),%eax
c000a075:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c000a078:	83 c1 04             	add    $0x4,%ecx
c000a07b:	8b 04 88             	mov    (%eax,%ecx,4),%eax
c000a07e:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/file.c:342

			/* 创建一级间接块表 */
			block_lba = block_bitmap_alloc(cur_part);
c000a080:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000a085:	83 ec 0c             	sub    $0xc,%esp
c000a088:	50                   	push   %eax
c000a089:	e8 54 f7 ff ff       	call   c00097e2 <block_bitmap_alloc>
c000a08e:	83 c4 10             	add    $0x10,%esp
c000a091:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/file.c:343
			if (block_lba == -1) {
c000a094:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
c000a098:	75 1a                	jne    c000a0b4 <file_write+0x3da>
/work/x86_os_my/fs/file.c:344
				printk("file_write: block_bitmap_alloc for situation 2 failed\n");
c000a09a:	83 ec 0c             	sub    $0xc,%esp
c000a09d:	68 5c ef 00 c0       	push   $0xc000ef5c
c000a0a2:	e8 47 ce ff ff       	call   c0006eee <printk>
c000a0a7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:345
				return -1;
c000a0aa:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000a0af:	e9 b8 03 00 00       	jmp    c000a46c <file_write+0x792>
/work/x86_os_my/fs/file.c:347
			}
			ASSERT(file->fd_inode->i_sectors[12] == 0);  // 一级间接块表未建立
c000a0b4:	8b 45 08             	mov    0x8(%ebp),%eax
c000a0b7:	8b 40 08             	mov    0x8(%eax),%eax
c000a0ba:	8b 40 40             	mov    0x40(%eax),%eax
c000a0bd:	85 c0                	test   %eax,%eax
c000a0bf:	74 1c                	je     c000a0dd <file_write+0x403>
/work/x86_os_my/fs/file.c:347 (discriminator 1)
c000a0c1:	68 94 ef 00 c0       	push   $0xc000ef94
c000a0c6:	68 b0 f0 00 c0       	push   $0xc000f0b0
c000a0cb:	68 5b 01 00 00       	push   $0x15b
c000a0d0:	68 81 ee 00 c0       	push   $0xc000ee81
c000a0d5:	e8 27 84 ff ff       	call   c0002501 <panic_spin>
c000a0da:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:348
			indirect_block_table = file->fd_inode->i_sectors[12] = block_lba;	// 一级间接块索引表建立了！
c000a0dd:	8b 45 08             	mov    0x8(%ebp),%eax
c000a0e0:	8b 40 08             	mov    0x8(%eax),%eax
c000a0e3:	8b 55 d8             	mov    -0x28(%ebp),%edx
c000a0e6:	89 50 40             	mov    %edx,0x40(%eax)
c000a0e9:	8b 40 40             	mov    0x40(%eax),%eax
c000a0ec:	89 45 c4             	mov    %eax,-0x3c(%ebp)
/work/x86_os_my/fs/file.c:351
			//这里怎么没有同步一级间接块表占用的数据块到硬盘？？不是：每分配一个块就将位图同步到硬盘 吗？

			block_idx = file_has_used_blocks;		// 指向第一个要分配的新数据块（扇区）
c000a0ef:	8b 45 d0             	mov    -0x30(%ebp),%eax
c000a0f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:352
			while (block_idx < file_will_use_blocks) {
c000a0f5:	e9 d3 00 00 00       	jmp    c000a1cd <file_write+0x4f3>
/work/x86_os_my/fs/file.c:353
				block_lba = block_bitmap_alloc(cur_part);
c000a0fa:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000a0ff:	83 ec 0c             	sub    $0xc,%esp
c000a102:	50                   	push   %eax
c000a103:	e8 da f6 ff ff       	call   c00097e2 <block_bitmap_alloc>
c000a108:	83 c4 10             	add    $0x10,%esp
c000a10b:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/file.c:354
				if (block_lba == -1) {
c000a10e:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
c000a112:	75 1a                	jne    c000a12e <file_write+0x454>
/work/x86_os_my/fs/file.c:355
					printk("file_write: block_bitmap_alloc for situation 2 failed\n");
c000a114:	83 ec 0c             	sub    $0xc,%esp
c000a117:	68 5c ef 00 c0       	push   $0xc000ef5c
c000a11c:	e8 cd cd ff ff       	call   c0006eee <printk>
c000a121:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:356
					return -1;
c000a124:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000a129:	e9 3e 03 00 00       	jmp    c000a46c <file_write+0x792>
/work/x86_os_my/fs/file.c:359
				}

				if (block_idx < 12) {	// 新创建的数据块仍然是直接块！
c000a12e:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
c000a132:	77 56                	ja     c000a18a <file_write+0x4b0>
/work/x86_os_my/fs/file.c:360
					ASSERT(file->fd_inode->i_sectors[block_idx] == 0);
c000a134:	8b 45 08             	mov    0x8(%ebp),%eax
c000a137:	8b 40 08             	mov    0x8(%eax),%eax
c000a13a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000a13d:	83 c2 04             	add    $0x4,%edx
c000a140:	8b 04 90             	mov    (%eax,%edx,4),%eax
c000a143:	85 c0                	test   %eax,%eax
c000a145:	74 1c                	je     c000a163 <file_write+0x489>
/work/x86_os_my/fs/file.c:360 (discriminator 1)
c000a147:	68 30 ef 00 c0       	push   $0xc000ef30
c000a14c:	68 b0 f0 00 c0       	push   $0xc000f0b0
c000a151:	68 68 01 00 00       	push   $0x168
c000a156:	68 81 ee 00 c0       	push   $0xc000ee81
c000a15b:	e8 a1 83 ff ff       	call   c0002501 <panic_spin>
c000a160:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:361
					file->fd_inode->i_sectors[block_idx] = all_blocks[block_idx] = block_lba;	//处理直接块
c000a163:	8b 45 08             	mov    0x8(%ebp),%eax
c000a166:	8b 50 08             	mov    0x8(%eax),%edx
c000a169:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000a16c:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
c000a173:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a176:	01 c8                	add    %ecx,%eax
c000a178:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c000a17b:	89 08                	mov    %ecx,(%eax)
c000a17d:	8b 00                	mov    (%eax),%eax
c000a17f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c000a182:	83 c1 04             	add    $0x4,%ecx
c000a185:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
c000a188:	eb 14                	jmp    c000a19e <file_write+0x4c4>
/work/x86_os_my/fs/file.c:363
				} else {	// 新创建的数据块，是间接块。间接块只写入到all_block数组中,待全部分配完成后一次性同步到硬盘
					all_blocks[block_idx] = block_lba;											//处理间接块
c000a18a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000a18d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000a194:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a197:	01 c2                	add    %eax,%edx
c000a199:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000a19c:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/file.c:367
				}

				/* 每分配一个块就将位图同步到硬盘 */
				block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
c000a19e:	8b 55 d8             	mov    -0x28(%ebp),%edx
c000a1a1:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000a1a6:	8b 40 1c             	mov    0x1c(%eax),%eax
c000a1a9:	8b 40 28             	mov    0x28(%eax),%eax
c000a1ac:	29 c2                	sub    %eax,%edx
c000a1ae:	89 d0                	mov    %edx,%eax
c000a1b0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/fs/file.c:368
				bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c000a1b3:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000a1b8:	83 ec 04             	sub    $0x4,%esp
c000a1bb:	6a 01                	push   $0x1
c000a1bd:	ff 75 d4             	pushl  -0x2c(%ebp)
c000a1c0:	50                   	push   %eax
c000a1c1:	e8 6e f6 ff ff       	call   c0009834 <bitmap_sync>
c000a1c6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:370

				block_idx++;   // 下一个新扇区
c000a1c9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/file.c:352
			ASSERT(file->fd_inode->i_sectors[12] == 0);  // 一级间接块表未建立
			indirect_block_table = file->fd_inode->i_sectors[12] = block_lba;	// 一级间接块索引表建立了！
			//这里怎么没有同步一级间接块表占用的数据块到硬盘？？不是：每分配一个块就将位图同步到硬盘 吗？

			block_idx = file_has_used_blocks;		// 指向第一个要分配的新数据块（扇区）
			while (block_idx < file_will_use_blocks) {
c000a1cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000a1d0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c000a1d3:	0f 82 21 ff ff ff    	jb     c000a0fa <file_write+0x420>
/work/x86_os_my/fs/file.c:372
				block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
				bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);

				block_idx++;   // 下一个新扇区
			}
			ide_write(cur_part->my_disk, indirect_block_table, all_blocks + 12, 1);	// 整个一级间接块表的内容，同步到硬盘
c000a1d9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a1dc:	8d 48 30             	lea    0x30(%eax),%ecx
c000a1df:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c000a1e2:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000a1e7:	8b 40 08             	mov    0x8(%eax),%eax
c000a1ea:	6a 01                	push   $0x1
c000a1ec:	51                   	push   %ecx
c000a1ed:	52                   	push   %edx
c000a1ee:	50                   	push   %eax
c000a1ef:	e8 f5 c3 ff ff       	call   c00065e9 <ide_write>
c000a1f4:	83 c4 10             	add    $0x10,%esp
c000a1f7:	e9 08 01 00 00       	jmp    c000a304 <file_write+0x62a>
/work/x86_os_my/fs/file.c:373
		} else if (file_has_used_blocks > 12) {
c000a1fc:	83 7d d0 0c          	cmpl   $0xc,-0x30(%ebp)
c000a200:	0f 86 fe 00 00 00    	jbe    c000a304 <file_write+0x62a>
/work/x86_os_my/fs/file.c:375
		/* 第三种情况：新数据使用间接块*/
			ASSERT(file->fd_inode->i_sectors[12] != 0);				// 一级间接块表已建立
c000a206:	8b 45 08             	mov    0x8(%ebp),%eax
c000a209:	8b 40 08             	mov    0x8(%eax),%eax
c000a20c:	8b 40 40             	mov    0x40(%eax),%eax
c000a20f:	85 c0                	test   %eax,%eax
c000a211:	75 1c                	jne    c000a22f <file_write+0x555>
/work/x86_os_my/fs/file.c:375 (discriminator 1)
c000a213:	68 a8 ee 00 c0       	push   $0xc000eea8
c000a218:	68 b0 f0 00 c0       	push   $0xc000f0b0
c000a21d:	68 77 01 00 00       	push   $0x177
c000a222:	68 81 ee 00 c0       	push   $0xc000ee81
c000a227:	e8 d5 82 ff ff       	call   c0002501 <panic_spin>
c000a22c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:376
			indirect_block_table = file->fd_inode->i_sectors[12];	// 一级间接表地址
c000a22f:	8b 45 08             	mov    0x8(%ebp),%eax
c000a232:	8b 40 08             	mov    0x8(%eax),%eax
c000a235:	8b 40 40             	mov    0x40(%eax),%eax
c000a238:	89 45 c4             	mov    %eax,-0x3c(%ebp)
/work/x86_os_my/fs/file.c:379

			/* 已使用的间接块也将被读入all_blocks，无须单独收录 */
			ide_read(cur_part->my_disk, indirect_block_table, all_blocks + 12, 1);	// 获取所有间接块地址
c000a23b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a23e:	8d 48 30             	lea    0x30(%eax),%ecx
c000a241:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c000a244:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000a249:	8b 40 08             	mov    0x8(%eax),%eax
c000a24c:	6a 01                	push   $0x1
c000a24e:	51                   	push   %ecx
c000a24f:	52                   	push   %edx
c000a250:	50                   	push   %eax
c000a251:	e8 1f c2 ff ff       	call   c0006475 <ide_read>
c000a256:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:381

			block_idx = file_has_used_blocks;		// 指向第一个要分配的新数据块（扇区）
c000a259:	8b 45 d0             	mov    -0x30(%ebp),%eax
c000a25c:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:382
			while (block_idx < file_will_use_blocks) {
c000a25f:	eb 79                	jmp    c000a2da <file_write+0x600>
/work/x86_os_my/fs/file.c:383
				block_lba = block_bitmap_alloc(cur_part);
c000a261:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000a266:	83 ec 0c             	sub    $0xc,%esp
c000a269:	50                   	push   %eax
c000a26a:	e8 73 f5 ff ff       	call   c00097e2 <block_bitmap_alloc>
c000a26f:	83 c4 10             	add    $0x10,%esp
c000a272:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/file.c:384
				if (block_lba == -1) {
c000a275:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
c000a279:	75 1a                	jne    c000a295 <file_write+0x5bb>
/work/x86_os_my/fs/file.c:385
					printk("file_write: block_bitmap_alloc for situation 3 failed\n");
c000a27b:	83 ec 0c             	sub    $0xc,%esp
c000a27e:	68 b8 ef 00 c0       	push   $0xc000efb8
c000a283:	e8 66 cc ff ff       	call   c0006eee <printk>
c000a288:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:386
					return -1;
c000a28b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000a290:	e9 d7 01 00 00       	jmp    c000a46c <file_write+0x792>
/work/x86_os_my/fs/file.c:388
				}
				all_blocks[block_idx++] = block_lba;											//处理间接块
c000a295:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000a298:	8d 50 01             	lea    0x1(%eax),%edx
c000a29b:	89 55 f4             	mov    %edx,-0xc(%ebp)
c000a29e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000a2a5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a2a8:	01 c2                	add    %eax,%edx
c000a2aa:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000a2ad:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/file.c:391

				/* 每分配一个块就将位图同步到硬盘 */
				block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
c000a2af:	8b 55 d8             	mov    -0x28(%ebp),%edx
c000a2b2:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000a2b7:	8b 40 1c             	mov    0x1c(%eax),%eax
c000a2ba:	8b 40 28             	mov    0x28(%eax),%eax
c000a2bd:	29 c2                	sub    %eax,%edx
c000a2bf:	89 d0                	mov    %edx,%eax
c000a2c1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/fs/file.c:392
				bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c000a2c4:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000a2c9:	83 ec 04             	sub    $0x4,%esp
c000a2cc:	6a 01                	push   $0x1
c000a2ce:	ff 75 d4             	pushl  -0x2c(%ebp)
c000a2d1:	50                   	push   %eax
c000a2d2:	e8 5d f5 ff ff       	call   c0009834 <bitmap_sync>
c000a2d7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:382

			/* 已使用的间接块也将被读入all_blocks，无须单独收录 */
			ide_read(cur_part->my_disk, indirect_block_table, all_blocks + 12, 1);	// 获取所有间接块地址

			block_idx = file_has_used_blocks;		// 指向第一个要分配的新数据块（扇区）
			while (block_idx < file_will_use_blocks) {
c000a2da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000a2dd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c000a2e0:	0f 82 7b ff ff ff    	jb     c000a261 <file_write+0x587>
/work/x86_os_my/fs/file.c:394

				/* 每分配一个块就将位图同步到硬盘 */
				block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
				bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
			}
			ide_write(cur_part->my_disk, indirect_block_table, all_blocks + 12, 1);	// 整个一级间接块表的内容，同步到硬盘
c000a2e6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a2e9:	8d 48 30             	lea    0x30(%eax),%ecx
c000a2ec:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c000a2ef:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000a2f4:	8b 40 08             	mov    0x8(%eax),%eax
c000a2f7:	6a 01                	push   $0x1
c000a2f9:	51                   	push   %ecx
c000a2fa:	52                   	push   %edx
c000a2fb:	50                   	push   %eax
c000a2fc:	e8 e8 c2 ff ff       	call   c00065e9 <ide_write>
c000a301:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:400
		}
	}//块地址已经收集到all_blocks中


	/* 写数据 */
	const uint8_t* src = buf;		// 用src指向buf中待写入的数据
c000a304:	8b 45 0c             	mov    0xc(%ebp),%eax
c000a307:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:401
	uint32_t bytes_written = 0;		// 已写入数据的大小
c000a30a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/file.c:407
	uint32_t sec_idx;				// 扇区索引
	uint32_t sec_lba;				// 扇区地址
	uint32_t sec_off_bytes;			// 扇区内字节偏移量
	uint32_t sec_left_bytes;		// 扇区内剩余字节量
	uint32_t chunk_size;			// 每次写入硬盘的数据块大小
	uint32_t size_left = count;		// 未写入数据的大小
c000a311:	8b 45 10             	mov    0x10(%ebp),%eax
c000a314:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/file.c:408
	bool first_write_block = true;	// 数据块（扇区）含有剩余空间的标识
c000a317:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
/work/x86_os_my/fs/file.c:409
	file->fd_pos = file->fd_inode->i_size - 1;	// 文件读写指针fd_pos为"文件大小-1"
c000a31e:	8b 45 08             	mov    0x8(%ebp),%eax
c000a321:	8b 40 08             	mov    0x8(%eax),%eax
c000a324:	8b 40 04             	mov    0x4(%eax),%eax
c000a327:	8d 50 ff             	lea    -0x1(%eax),%edx
c000a32a:	8b 45 08             	mov    0x8(%ebp),%eax
c000a32d:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/fs/file.c:410
	while (bytes_written < count) {	// 直到写完所有数据
c000a32f:	e9 f2 00 00 00       	jmp    c000a426 <file_write+0x74c>
/work/x86_os_my/fs/file.c:411
		memset(io_buf, 0, BLOCK_SIZE);
c000a334:	83 ec 04             	sub    $0x4,%esp
c000a337:	68 00 02 00 00       	push   $0x200
c000a33c:	6a 00                	push   $0x0
c000a33e:	ff 75 e0             	pushl  -0x20(%ebp)
c000a341:	e8 bf 96 ff ff       	call   c0003a05 <memset>
c000a346:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:412
		sec_idx = file->fd_inode->i_size / BLOCK_SIZE;	// 文件已占用的最后一个数据块
c000a349:	8b 45 08             	mov    0x8(%ebp),%eax
c000a34c:	8b 40 08             	mov    0x8(%eax),%eax
c000a34f:	8b 40 04             	mov    0x4(%eax),%eax
c000a352:	c1 e8 09             	shr    $0x9,%eax
c000a355:	89 45 c0             	mov    %eax,-0x40(%ebp)
/work/x86_os_my/fs/file.c:413
		sec_lba = all_blocks[sec_idx];
c000a358:	8b 45 c0             	mov    -0x40(%ebp),%eax
c000a35b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000a362:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a365:	01 d0                	add    %edx,%eax
c000a367:	8b 00                	mov    (%eax),%eax
c000a369:	89 45 bc             	mov    %eax,-0x44(%ebp)
/work/x86_os_my/fs/file.c:414
		sec_off_bytes = file->fd_inode->i_size % BLOCK_SIZE;
c000a36c:	8b 45 08             	mov    0x8(%ebp),%eax
c000a36f:	8b 40 08             	mov    0x8(%eax),%eax
c000a372:	8b 40 04             	mov    0x4(%eax),%eax
c000a375:	25 ff 01 00 00       	and    $0x1ff,%eax
c000a37a:	89 45 b8             	mov    %eax,-0x48(%ebp)
/work/x86_os_my/fs/file.c:415
		sec_left_bytes = BLOCK_SIZE - sec_off_bytes;
c000a37d:	b8 00 02 00 00       	mov    $0x200,%eax
c000a382:	2b 45 b8             	sub    -0x48(%ebp),%eax
c000a385:	89 45 b4             	mov    %eax,-0x4c(%ebp)
/work/x86_os_my/fs/file.c:418

		/* 判断此次写入硬盘的数据大小 */
		chunk_size = size_left < sec_left_bytes ? size_left : sec_left_bytes;
c000a388:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000a38b:	39 45 b4             	cmp    %eax,-0x4c(%ebp)
c000a38e:	0f 46 45 b4          	cmovbe -0x4c(%ebp),%eax
c000a392:	89 45 b0             	mov    %eax,-0x50(%ebp)
/work/x86_os_my/fs/file.c:419
		if (first_write_block) {
c000a395:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c000a399:	74 20                	je     c000a3bb <file_write+0x6e1>
/work/x86_os_my/fs/file.c:420
			ide_read(cur_part->my_disk, sec_lba, io_buf, 1);	//先读出
c000a39b:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000a3a0:	8b 40 08             	mov    0x8(%eax),%eax
c000a3a3:	6a 01                	push   $0x1
c000a3a5:	ff 75 e0             	pushl  -0x20(%ebp)
c000a3a8:	ff 75 bc             	pushl  -0x44(%ebp)
c000a3ab:	50                   	push   %eax
c000a3ac:	e8 c4 c0 ff ff       	call   c0006475 <ide_read>
c000a3b1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:421
			first_write_block = false;
c000a3b4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
/work/x86_os_my/fs/file.c:423
		}
		memcpy(io_buf + sec_off_bytes, src, chunk_size);		//再写入
c000a3bb:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000a3be:	8b 45 b8             	mov    -0x48(%ebp),%eax
c000a3c1:	01 d0                	add    %edx,%eax
c000a3c3:	83 ec 04             	sub    $0x4,%esp
c000a3c6:	ff 75 b0             	pushl  -0x50(%ebp)
c000a3c9:	ff 75 f0             	pushl  -0x10(%ebp)
c000a3cc:	50                   	push   %eax
c000a3cd:	e8 85 96 ff ff       	call   c0003a57 <memcpy>
c000a3d2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:424
		ide_write(cur_part->my_disk, sec_lba, io_buf, 1);
c000a3d5:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000a3da:	8b 40 08             	mov    0x8(%eax),%eax
c000a3dd:	6a 01                	push   $0x1
c000a3df:	ff 75 e0             	pushl  -0x20(%ebp)
c000a3e2:	ff 75 bc             	pushl  -0x44(%ebp)
c000a3e5:	50                   	push   %eax
c000a3e6:	e8 fe c1 ff ff       	call   c00065e9 <ide_write>
c000a3eb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:427
		//printk("file write at lba 0x%x\n", sec_lba);

		src += chunk_size;
c000a3ee:	8b 45 b0             	mov    -0x50(%ebp),%eax
c000a3f1:	01 45 f0             	add    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:428
		file->fd_inode->i_size += chunk_size;	// 文件大小
c000a3f4:	8b 45 08             	mov    0x8(%ebp),%eax
c000a3f7:	8b 40 08             	mov    0x8(%eax),%eax
c000a3fa:	8b 55 08             	mov    0x8(%ebp),%edx
c000a3fd:	8b 52 08             	mov    0x8(%edx),%edx
c000a400:	8b 4a 04             	mov    0x4(%edx),%ecx
c000a403:	8b 55 b0             	mov    -0x50(%ebp),%edx
c000a406:	01 ca                	add    %ecx,%edx
c000a408:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/file.c:429
		file->fd_pos += chunk_size;				// 文件指针位置
c000a40b:	8b 45 08             	mov    0x8(%ebp),%eax
c000a40e:	8b 10                	mov    (%eax),%edx
c000a410:	8b 45 b0             	mov    -0x50(%ebp),%eax
c000a413:	01 c2                	add    %eax,%edx
c000a415:	8b 45 08             	mov    0x8(%ebp),%eax
c000a418:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/fs/file.c:430
		bytes_written += chunk_size;
c000a41a:	8b 45 b0             	mov    -0x50(%ebp),%eax
c000a41d:	01 45 ec             	add    %eax,-0x14(%ebp)
/work/x86_os_my/fs/file.c:431
		size_left -= chunk_size;
c000a420:	8b 45 b0             	mov    -0x50(%ebp),%eax
c000a423:	29 45 e8             	sub    %eax,-0x18(%ebp)
/work/x86_os_my/fs/file.c:410
	uint32_t sec_left_bytes;		// 扇区内剩余字节量
	uint32_t chunk_size;			// 每次写入硬盘的数据块大小
	uint32_t size_left = count;		// 未写入数据的大小
	bool first_write_block = true;	// 数据块（扇区）含有剩余空间的标识
	file->fd_pos = file->fd_inode->i_size - 1;	// 文件读写指针fd_pos为"文件大小-1"
	while (bytes_written < count) {	// 直到写完所有数据
c000a426:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000a429:	3b 45 10             	cmp    0x10(%ebp),%eax
c000a42c:	0f 82 02 ff ff ff    	jb     c000a334 <file_write+0x65a>
/work/x86_os_my/fs/file.c:433
		file->fd_inode->i_size += chunk_size;	// 文件大小
		file->fd_pos += chunk_size;				// 文件指针位置
		bytes_written += chunk_size;
		size_left -= chunk_size;
	}
	inode_sync(cur_part, file->fd_inode, io_buf);	// 更新文件对应的inode结构，io_buf只是个缓冲区
c000a432:	8b 45 08             	mov    0x8(%ebp),%eax
c000a435:	8b 50 08             	mov    0x8(%eax),%edx
c000a438:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000a43d:	83 ec 04             	sub    $0x4,%esp
c000a440:	ff 75 e0             	pushl  -0x20(%ebp)
c000a443:	52                   	push   %edx
c000a444:	50                   	push   %eax
c000a445:	e8 05 ec ff ff       	call   c000904f <inode_sync>
c000a44a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:434
	sys_free(all_blocks);
c000a44d:	83 ec 0c             	sub    $0xc,%esp
c000a450:	ff 75 dc             	pushl  -0x24(%ebp)
c000a453:	e8 81 90 ff ff       	call   c00034d9 <sys_free>
c000a458:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:435
	sys_free(io_buf);
c000a45b:	83 ec 0c             	sub    $0xc,%esp
c000a45e:	ff 75 e0             	pushl  -0x20(%ebp)
c000a461:	e8 73 90 ff ff       	call   c00034d9 <sys_free>
c000a466:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:436
	return bytes_written;
c000a469:	8b 45 ec             	mov    -0x14(%ebp),%eax
/work/x86_os_my/fs/file.c:437
}
c000a46c:	c9                   	leave  
c000a46d:	c3                   	ret    

c000a46e <file_read>:
file_read():
/work/x86_os_my/fs/file.c:441


/* 从文件file中读取count个字节写入buf, 返回读出的字节数,若到文件尾则返回-1 */
int32_t file_read(struct file* file, void* buf, uint32_t count) {
c000a46e:	55                   	push   %ebp
c000a46f:	89 e5                	mov    %esp,%ebp
c000a471:	83 ec 48             	sub    $0x48,%esp
/work/x86_os_my/fs/file.c:442
	uint8_t* buf_dst = (uint8_t*)buf;
c000a474:	8b 45 0c             	mov    0xc(%ebp),%eax
c000a477:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:443
	uint32_t size = count, size_left = size;
c000a47a:	8b 45 10             	mov    0x10(%ebp),%eax
c000a47d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c000a480:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a483:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/file.c:446

	/* 若要读取的字节数超过了文件可读的剩余量, 就用剩余量做为待读取的字节数 */
	if ((file->fd_pos + count) > file->fd_inode->i_size) {
c000a486:	8b 45 08             	mov    0x8(%ebp),%eax
c000a489:	8b 10                	mov    (%eax),%edx
c000a48b:	8b 45 10             	mov    0x10(%ebp),%eax
c000a48e:	01 c2                	add    %eax,%edx
c000a490:	8b 45 08             	mov    0x8(%ebp),%eax
c000a493:	8b 40 08             	mov    0x8(%eax),%eax
c000a496:	8b 40 04             	mov    0x4(%eax),%eax
c000a499:	39 c2                	cmp    %eax,%edx
c000a49b:	76 2b                	jbe    c000a4c8 <file_read+0x5a>
/work/x86_os_my/fs/file.c:447
		size = file->fd_inode->i_size - file->fd_pos;
c000a49d:	8b 45 08             	mov    0x8(%ebp),%eax
c000a4a0:	8b 40 08             	mov    0x8(%eax),%eax
c000a4a3:	8b 50 04             	mov    0x4(%eax),%edx
c000a4a6:	8b 45 08             	mov    0x8(%ebp),%eax
c000a4a9:	8b 00                	mov    (%eax),%eax
c000a4ab:	29 c2                	sub    %eax,%edx
c000a4ad:	89 d0                	mov    %edx,%eax
c000a4af:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:448
		size_left = size;
c000a4b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a4b5:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/file.c:449
		if (size == 0) {	// 若到文件尾则返回-1
c000a4b8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c000a4bc:	75 0a                	jne    c000a4c8 <file_read+0x5a>
/work/x86_os_my/fs/file.c:450
			return -1;
c000a4be:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000a4c3:	e9 4d 03 00 00       	jmp    c000a815 <file_read+0x3a7>
/work/x86_os_my/fs/file.c:454
		}
	}

	uint8_t* io_buf = sys_malloc(BLOCK_SIZE);
c000a4c8:	83 ec 0c             	sub    $0xc,%esp
c000a4cb:	68 00 02 00 00       	push   $0x200
c000a4d0:	e8 d7 89 ff ff       	call   c0002eac <sys_malloc>
c000a4d5:	83 c4 10             	add    $0x10,%esp
c000a4d8:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/file.c:455
	if (io_buf == NULL) {
c000a4db:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c000a4df:	75 10                	jne    c000a4f1 <file_read+0x83>
/work/x86_os_my/fs/file.c:456
		printk("file_read: sys_malloc for io_buf failed\n");
c000a4e1:	83 ec 0c             	sub    $0xc,%esp
c000a4e4:	68 f0 ef 00 c0       	push   $0xc000eff0
c000a4e9:	e8 00 ca ff ff       	call   c0006eee <printk>
c000a4ee:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:458
	}
	uint32_t* all_blocks = (uint32_t*)sys_malloc(BLOCK_SIZE + 48);		// 用来记录文件所有的块地址【140*4=560字节】
c000a4f1:	83 ec 0c             	sub    $0xc,%esp
c000a4f4:	68 30 02 00 00       	push   $0x230
c000a4f9:	e8 ae 89 ff ff       	call   c0002eac <sys_malloc>
c000a4fe:	83 c4 10             	add    $0x10,%esp
c000a501:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/file.c:459
	if (all_blocks == NULL) {
c000a504:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c000a508:	75 1a                	jne    c000a524 <file_read+0xb6>
/work/x86_os_my/fs/file.c:460
		printk("file_read: sys_malloc for all_blocks failed\n");
c000a50a:	83 ec 0c             	sub    $0xc,%esp
c000a50d:	68 1c f0 00 c0       	push   $0xc000f01c
c000a512:	e8 d7 c9 ff ff       	call   c0006eee <printk>
c000a517:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:461
		return -1;
c000a51a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000a51f:	e9 f1 02 00 00       	jmp    c000a815 <file_read+0x3a7>
/work/x86_os_my/fs/file.c:464
	}

	uint32_t block_read_start_idx = file->fd_pos / BLOCK_SIZE;			// 数据所在块的起始地址
c000a524:	8b 45 08             	mov    0x8(%ebp),%eax
c000a527:	8b 00                	mov    (%eax),%eax
c000a529:	c1 e8 09             	shr    $0x9,%eax
c000a52c:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/file.c:465
	uint32_t block_read_end_idx = (file->fd_pos + size) / BLOCK_SIZE;	// 数据所在块的终止地址
c000a52f:	8b 45 08             	mov    0x8(%ebp),%eax
c000a532:	8b 10                	mov    (%eax),%edx
c000a534:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a537:	01 d0                	add    %edx,%eax
c000a539:	c1 e8 09             	shr    $0x9,%eax
c000a53c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/fs/file.c:466
	uint32_t read_blocks = block_read_start_idx - block_read_end_idx;	// 如增量为0,表示数据在同一扇区
c000a53f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000a542:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c000a545:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/fs/file.c:467
	ASSERT(block_read_start_idx < 139 && block_read_end_idx < 139);
c000a548:	81 7d d8 8a 00 00 00 	cmpl   $0x8a,-0x28(%ebp)
c000a54f:	77 09                	ja     c000a55a <file_read+0xec>
/work/x86_os_my/fs/file.c:467 (discriminator 1)
c000a551:	81 7d d4 8a 00 00 00 	cmpl   $0x8a,-0x2c(%ebp)
c000a558:	76 1c                	jbe    c000a576 <file_read+0x108>
/work/x86_os_my/fs/file.c:467 (discriminator 3)
c000a55a:	68 4c f0 00 c0       	push   $0xc000f04c
c000a55f:	68 bc f0 00 c0       	push   $0xc000f0bc
c000a564:	68 d3 01 00 00       	push   $0x1d3
c000a569:	68 81 ee 00 c0       	push   $0xc000ee81
c000a56e:	e8 8e 7f ff ff       	call   c0002501 <panic_spin>
c000a573:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:474
	int32_t indirect_block_table;	// 获取一级间接表地址
	uint32_t block_idx;				// 获取待读的块地址

	/* 以下开始构建all_blocks块地址数组，专门存储用到的块地址 */
	// 在同一扇区内读数据,不涉及到跨扇区读取
	if (read_blocks == 0) {
c000a576:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c000a57a:	0f 85 84 00 00 00    	jne    c000a604 <file_read+0x196>
/work/x86_os_my/fs/file.c:475
		ASSERT(block_read_end_idx == block_read_start_idx);
c000a580:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000a583:	3b 45 d8             	cmp    -0x28(%ebp),%eax
c000a586:	74 1c                	je     c000a5a4 <file_read+0x136>
/work/x86_os_my/fs/file.c:475 (discriminator 1)
c000a588:	68 84 f0 00 c0       	push   $0xc000f084
c000a58d:	68 bc f0 00 c0       	push   $0xc000f0bc
c000a592:	68 db 01 00 00       	push   $0x1db
c000a597:	68 81 ee 00 c0       	push   $0xc000ee81
c000a59c:	e8 60 7f ff ff       	call   c0002501 <panic_spin>
c000a5a1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:476
		if (block_read_end_idx < 12 ) {	// 待读的数据在12个直接块之内
c000a5a4:	83 7d d4 0b          	cmpl   $0xb,-0x2c(%ebp)
c000a5a8:	77 2b                	ja     c000a5d5 <file_read+0x167>
/work/x86_os_my/fs/file.c:477
			block_idx = block_read_end_idx;
c000a5aa:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000a5ad:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/file.c:478
			all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];
c000a5b0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000a5b3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000a5ba:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a5bd:	01 c2                	add    %eax,%edx
c000a5bf:	8b 45 08             	mov    0x8(%ebp),%eax
c000a5c2:	8b 40 08             	mov    0x8(%eax),%eax
c000a5c5:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c000a5c8:	83 c1 04             	add    $0x4,%ecx
c000a5cb:	8b 04 88             	mov    (%eax,%ecx,4),%eax
c000a5ce:	89 02                	mov    %eax,(%edx)
c000a5d0:	e9 5c 01 00 00       	jmp    c000a731 <file_read+0x2c3>
/work/x86_os_my/fs/file.c:480
		} else {	// 若用到了一级间接块表,需要将表中间接块读进来
			indirect_block_table = file->fd_inode->i_sectors[12];
c000a5d5:	8b 45 08             	mov    0x8(%ebp),%eax
c000a5d8:	8b 40 08             	mov    0x8(%eax),%eax
c000a5db:	8b 40 40             	mov    0x40(%eax),%eax
c000a5de:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/fs/file.c:481
			ide_read(cur_part->my_disk, indirect_block_table, all_blocks + 12, 1);
c000a5e1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a5e4:	8d 48 30             	lea    0x30(%eax),%ecx
c000a5e7:	8b 55 cc             	mov    -0x34(%ebp),%edx
c000a5ea:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000a5ef:	8b 40 08             	mov    0x8(%eax),%eax
c000a5f2:	6a 01                	push   $0x1
c000a5f4:	51                   	push   %ecx
c000a5f5:	52                   	push   %edx
c000a5f6:	50                   	push   %eax
c000a5f7:	e8 79 be ff ff       	call   c0006475 <ide_read>
c000a5fc:	83 c4 10             	add    $0x10,%esp
c000a5ff:	e9 2d 01 00 00       	jmp    c000a731 <file_read+0x2c3>
/work/x86_os_my/fs/file.c:486
		}
	} else {
	// 若要读多个数据块（扇区）
		/* 第一种情况: 起始块和终止块属于直接块*/
		if (block_read_end_idx < 12 ) {	  // 数据结束所在的块属于直接块
c000a604:	83 7d d4 0b          	cmpl   $0xb,-0x2c(%ebp)
c000a608:	77 39                	ja     c000a643 <file_read+0x1d5>
/work/x86_os_my/fs/file.c:487
			block_idx = block_read_start_idx;
c000a60a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000a60d:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/file.c:488
			while (block_idx <= block_read_end_idx) {
c000a610:	eb 24                	jmp    c000a636 <file_read+0x1c8>
/work/x86_os_my/fs/file.c:489
				all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];
c000a612:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000a615:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000a61c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a61f:	01 c2                	add    %eax,%edx
c000a621:	8b 45 08             	mov    0x8(%ebp),%eax
c000a624:	8b 40 08             	mov    0x8(%eax),%eax
c000a627:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c000a62a:	83 c1 04             	add    $0x4,%ecx
c000a62d:	8b 04 88             	mov    (%eax,%ecx,4),%eax
c000a630:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/file.c:490
				block_idx++;
c000a632:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
/work/x86_os_my/fs/file.c:488
	} else {
	// 若要读多个数据块（扇区）
		/* 第一种情况: 起始块和终止块属于直接块*/
		if (block_read_end_idx < 12 ) {	  // 数据结束所在的块属于直接块
			block_idx = block_read_start_idx;
			while (block_idx <= block_read_end_idx) {
c000a636:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000a639:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c000a63c:	76 d4                	jbe    c000a612 <file_read+0x1a4>
c000a63e:	e9 ee 00 00 00       	jmp    c000a731 <file_read+0x2c3>
/work/x86_os_my/fs/file.c:492
				all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];
				block_idx++;
			}
		} else if (block_read_start_idx < 12 && block_read_end_idx >= 12) {
c000a643:	83 7d d8 0b          	cmpl   $0xb,-0x28(%ebp)
c000a647:	0f 87 91 00 00 00    	ja     c000a6de <file_read+0x270>
/work/x86_os_my/fs/file.c:492 (discriminator 1)
c000a64d:	83 7d d4 0b          	cmpl   $0xb,-0x2c(%ebp)
c000a651:	0f 86 87 00 00 00    	jbe    c000a6de <file_read+0x270>
/work/x86_os_my/fs/file.c:495
		/* 第二种情况: 待读入的数据跨越直接块和间接块两类*/
			/* 先将直接块地址写入all_blocks */
			block_idx = block_read_start_idx;
c000a657:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000a65a:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/file.c:496
			while (block_idx < 12) {
c000a65d:	eb 24                	jmp    c000a683 <file_read+0x215>
/work/x86_os_my/fs/file.c:497
				all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];
c000a65f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000a662:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000a669:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a66c:	01 c2                	add    %eax,%edx
c000a66e:	8b 45 08             	mov    0x8(%ebp),%eax
c000a671:	8b 40 08             	mov    0x8(%eax),%eax
c000a674:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c000a677:	83 c1 04             	add    $0x4,%ecx
c000a67a:	8b 04 88             	mov    (%eax,%ecx,4),%eax
c000a67d:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/file.c:498
				block_idx++;
c000a67f:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
/work/x86_os_my/fs/file.c:496
			}
		} else if (block_read_start_idx < 12 && block_read_end_idx >= 12) {
		/* 第二种情况: 待读入的数据跨越直接块和间接块两类*/
			/* 先将直接块地址写入all_blocks */
			block_idx = block_read_start_idx;
			while (block_idx < 12) {
c000a683:	83 7d e8 0b          	cmpl   $0xb,-0x18(%ebp)
c000a687:	76 d6                	jbe    c000a65f <file_read+0x1f1>
/work/x86_os_my/fs/file.c:500
				all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];
				block_idx++;
			}
			ASSERT(file->fd_inode->i_sectors[12] != 0);	    // 确保已经分配了一级间接块表
c000a689:	8b 45 08             	mov    0x8(%ebp),%eax
c000a68c:	8b 40 08             	mov    0x8(%eax),%eax
c000a68f:	8b 40 40             	mov    0x40(%eax),%eax
c000a692:	85 c0                	test   %eax,%eax
c000a694:	75 1c                	jne    c000a6b2 <file_read+0x244>
/work/x86_os_my/fs/file.c:500 (discriminator 1)
c000a696:	68 a8 ee 00 c0       	push   $0xc000eea8
c000a69b:	68 bc f0 00 c0       	push   $0xc000f0bc
c000a6a0:	68 f4 01 00 00       	push   $0x1f4
c000a6a5:	68 81 ee 00 c0       	push   $0xc000ee81
c000a6aa:	e8 52 7e ff ff       	call   c0002501 <panic_spin>
c000a6af:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:503

			/* 再将间接块地址写入all_blocks */
			indirect_block_table = file->fd_inode->i_sectors[12];
c000a6b2:	8b 45 08             	mov    0x8(%ebp),%eax
c000a6b5:	8b 40 08             	mov    0x8(%eax),%eax
c000a6b8:	8b 40 40             	mov    0x40(%eax),%eax
c000a6bb:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/fs/file.c:504
			ide_read(cur_part->my_disk, indirect_block_table, all_blocks + 12, 1);	      // 将一级间接块表读进来写入到第13个块的位置之后
c000a6be:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a6c1:	8d 48 30             	lea    0x30(%eax),%ecx
c000a6c4:	8b 55 cc             	mov    -0x34(%ebp),%edx
c000a6c7:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000a6cc:	8b 40 08             	mov    0x8(%eax),%eax
c000a6cf:	6a 01                	push   $0x1
c000a6d1:	51                   	push   %ecx
c000a6d2:	52                   	push   %edx
c000a6d3:	50                   	push   %eax
c000a6d4:	e8 9c bd ff ff       	call   c0006475 <ide_read>
c000a6d9:	83 c4 10             	add    $0x10,%esp
c000a6dc:	eb 53                	jmp    c000a731 <file_read+0x2c3>
/work/x86_os_my/fs/file.c:507
		} else {
		/* 第三种情况: 数据在间接块中*/
			ASSERT(file->fd_inode->i_sectors[12] != 0);	    // 确保已经分配了一级间接块表
c000a6de:	8b 45 08             	mov    0x8(%ebp),%eax
c000a6e1:	8b 40 08             	mov    0x8(%eax),%eax
c000a6e4:	8b 40 40             	mov    0x40(%eax),%eax
c000a6e7:	85 c0                	test   %eax,%eax
c000a6e9:	75 1c                	jne    c000a707 <file_read+0x299>
/work/x86_os_my/fs/file.c:507 (discriminator 1)
c000a6eb:	68 a8 ee 00 c0       	push   $0xc000eea8
c000a6f0:	68 bc f0 00 c0       	push   $0xc000f0bc
c000a6f5:	68 fb 01 00 00       	push   $0x1fb
c000a6fa:	68 81 ee 00 c0       	push   $0xc000ee81
c000a6ff:	e8 fd 7d ff ff       	call   c0002501 <panic_spin>
c000a704:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:508
			indirect_block_table = file->fd_inode->i_sectors[12];	      // 获取一级间接表地址
c000a707:	8b 45 08             	mov    0x8(%ebp),%eax
c000a70a:	8b 40 08             	mov    0x8(%eax),%eax
c000a70d:	8b 40 40             	mov    0x40(%eax),%eax
c000a710:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/fs/file.c:509
			ide_read(cur_part->my_disk, indirect_block_table, all_blocks + 12, 1);	      // 将一级间接块表读进来写入到第13个块的位置之后
c000a713:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a716:	8d 48 30             	lea    0x30(%eax),%ecx
c000a719:	8b 55 cc             	mov    -0x34(%ebp),%edx
c000a71c:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000a721:	8b 40 08             	mov    0x8(%eax),%eax
c000a724:	6a 01                	push   $0x1
c000a726:	51                   	push   %ecx
c000a727:	52                   	push   %edx
c000a728:	50                   	push   %eax
c000a729:	e8 47 bd ff ff       	call   c0006475 <ide_read>
c000a72e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:516
	}//块地址已经收集到all_blocks中


	/* 读数据 */
	uint32_t sec_idx, sec_lba, sec_off_bytes, sec_left_bytes, chunk_size;
	uint32_t bytes_read = 0;
c000a731:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
/work/x86_os_my/fs/file.c:517
	while (bytes_read < size) {	// 直到读完为止
c000a738:	e9 ad 00 00 00       	jmp    c000a7ea <file_read+0x37c>
/work/x86_os_my/fs/file.c:518
		sec_idx = file->fd_pos / BLOCK_SIZE;
c000a73d:	8b 45 08             	mov    0x8(%ebp),%eax
c000a740:	8b 00                	mov    (%eax),%eax
c000a742:	c1 e8 09             	shr    $0x9,%eax
c000a745:	89 45 c8             	mov    %eax,-0x38(%ebp)
/work/x86_os_my/fs/file.c:519
		sec_lba = all_blocks[sec_idx];
c000a748:	8b 45 c8             	mov    -0x38(%ebp),%eax
c000a74b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000a752:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a755:	01 d0                	add    %edx,%eax
c000a757:	8b 00                	mov    (%eax),%eax
c000a759:	89 45 c4             	mov    %eax,-0x3c(%ebp)
/work/x86_os_my/fs/file.c:520
		sec_off_bytes = file->fd_pos % BLOCK_SIZE;
c000a75c:	8b 45 08             	mov    0x8(%ebp),%eax
c000a75f:	8b 00                	mov    (%eax),%eax
c000a761:	25 ff 01 00 00       	and    $0x1ff,%eax
c000a766:	89 45 c0             	mov    %eax,-0x40(%ebp)
/work/x86_os_my/fs/file.c:521
		sec_left_bytes = BLOCK_SIZE - sec_off_bytes;
c000a769:	b8 00 02 00 00       	mov    $0x200,%eax
c000a76e:	2b 45 c0             	sub    -0x40(%ebp),%eax
c000a771:	89 45 bc             	mov    %eax,-0x44(%ebp)
/work/x86_os_my/fs/file.c:522
		chunk_size = size_left < sec_left_bytes ? size_left : sec_left_bytes;	// 待读入的数据大小
c000a774:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000a777:	39 45 bc             	cmp    %eax,-0x44(%ebp)
c000a77a:	0f 46 45 bc          	cmovbe -0x44(%ebp),%eax
c000a77e:	89 45 b8             	mov    %eax,-0x48(%ebp)
/work/x86_os_my/fs/file.c:524

		memset(io_buf, 0, BLOCK_SIZE);
c000a781:	83 ec 04             	sub    $0x4,%esp
c000a784:	68 00 02 00 00       	push   $0x200
c000a789:	6a 00                	push   $0x0
c000a78b:	ff 75 e0             	pushl  -0x20(%ebp)
c000a78e:	e8 72 92 ff ff       	call   c0003a05 <memset>
c000a793:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:525
		ide_read(cur_part->my_disk, sec_lba, io_buf, 1);
c000a796:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000a79b:	8b 40 08             	mov    0x8(%eax),%eax
c000a79e:	6a 01                	push   $0x1
c000a7a0:	ff 75 e0             	pushl  -0x20(%ebp)
c000a7a3:	ff 75 c4             	pushl  -0x3c(%ebp)
c000a7a6:	50                   	push   %eax
c000a7a7:	e8 c9 bc ff ff       	call   c0006475 <ide_read>
c000a7ac:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:526
		memcpy(buf_dst, io_buf + sec_off_bytes, chunk_size);
c000a7af:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000a7b2:	8b 45 c0             	mov    -0x40(%ebp),%eax
c000a7b5:	01 d0                	add    %edx,%eax
c000a7b7:	83 ec 04             	sub    $0x4,%esp
c000a7ba:	ff 75 b8             	pushl  -0x48(%ebp)
c000a7bd:	50                   	push   %eax
c000a7be:	ff 75 f4             	pushl  -0xc(%ebp)
c000a7c1:	e8 91 92 ff ff       	call   c0003a57 <memcpy>
c000a7c6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:528

		buf_dst += chunk_size;
c000a7c9:	8b 45 b8             	mov    -0x48(%ebp),%eax
c000a7cc:	01 45 f4             	add    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:529
		file->fd_pos += chunk_size;
c000a7cf:	8b 45 08             	mov    0x8(%ebp),%eax
c000a7d2:	8b 10                	mov    (%eax),%edx
c000a7d4:	8b 45 b8             	mov    -0x48(%ebp),%eax
c000a7d7:	01 c2                	add    %eax,%edx
c000a7d9:	8b 45 08             	mov    0x8(%ebp),%eax
c000a7dc:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/fs/file.c:530
		bytes_read += chunk_size;
c000a7de:	8b 45 b8             	mov    -0x48(%ebp),%eax
c000a7e1:	01 45 e4             	add    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/file.c:531
		size_left -= chunk_size;
c000a7e4:	8b 45 b8             	mov    -0x48(%ebp),%eax
c000a7e7:	29 45 ec             	sub    %eax,-0x14(%ebp)
/work/x86_os_my/fs/file.c:517


	/* 读数据 */
	uint32_t sec_idx, sec_lba, sec_off_bytes, sec_left_bytes, chunk_size;
	uint32_t bytes_read = 0;
	while (bytes_read < size) {	// 直到读完为止
c000a7ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000a7ed:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c000a7f0:	0f 82 47 ff ff ff    	jb     c000a73d <file_read+0x2cf>
/work/x86_os_my/fs/file.c:533
		buf_dst += chunk_size;
		file->fd_pos += chunk_size;
		bytes_read += chunk_size;
		size_left -= chunk_size;
	}
	sys_free(all_blocks);
c000a7f6:	83 ec 0c             	sub    $0xc,%esp
c000a7f9:	ff 75 dc             	pushl  -0x24(%ebp)
c000a7fc:	e8 d8 8c ff ff       	call   c00034d9 <sys_free>
c000a801:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:534
	sys_free(io_buf);
c000a804:	83 ec 0c             	sub    $0xc,%esp
c000a807:	ff 75 e0             	pushl  -0x20(%ebp)
c000a80a:	e8 ca 8c ff ff       	call   c00034d9 <sys_free>
c000a80f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:535
	return bytes_read;
c000a812:	8b 45 e4             	mov    -0x1c(%ebp),%eax
/work/x86_os_my/fs/file.c:536
}
c000a815:	c9                   	leave  
c000a816:	c3                   	ret    

c000a817 <open_root_dir>:
open_root_dir():
/work/x86_os_my/fs/dir.c:17
#include "super_block.h"

struct dir root_dir;	// 根目录

/* 打开根目录 */
void open_root_dir(struct partition* part) {
c000a817:	55                   	push   %ebp
c000a818:	89 e5                	mov    %esp,%ebp
c000a81a:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/fs/dir.c:18
	root_dir.inode = inode_open(part, part->sb->root_inode_no);
c000a81d:	8b 45 08             	mov    0x8(%ebp),%eax
c000a820:	8b 40 1c             	mov    0x1c(%eax),%eax
c000a823:	8b 40 2c             	mov    0x2c(%eax),%eax
c000a826:	83 ec 08             	sub    $0x8,%esp
c000a829:	50                   	push   %eax
c000a82a:	ff 75 08             	pushl  0x8(%ebp)
c000a82d:	e8 44 e9 ff ff       	call   c0009176 <inode_open>
c000a832:	83 c4 10             	add    $0x10,%esp
c000a835:	a3 60 4c 01 c0       	mov    %eax,0xc0014c60
/work/x86_os_my/fs/dir.c:19
	root_dir.dir_pos = 0;
c000a83a:	c7 05 64 4c 01 c0 00 	movl   $0x0,0xc0014c64
c000a841:	00 00 00 
/work/x86_os_my/fs/dir.c:20
}
c000a844:	90                   	nop
c000a845:	c9                   	leave  
c000a846:	c3                   	ret    

c000a847 <dir_open>:
dir_open():
/work/x86_os_my/fs/dir.c:23

/* 在分区part上打开i结点为inode_no的目录，并返回目录指针 */
struct dir* dir_open(struct partition* part, uint32_t inode_no) {
c000a847:	55                   	push   %ebp
c000a848:	89 e5                	mov    %esp,%ebp
c000a84a:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/dir.c:24
	struct dir* pdir = (struct dir*)sys_malloc(sizeof(struct dir));	//除根目录以外的其他目录，要分配内存
c000a84d:	83 ec 0c             	sub    $0xc,%esp
c000a850:	68 08 02 00 00       	push   $0x208
c000a855:	e8 52 86 ff ff       	call   c0002eac <sys_malloc>
c000a85a:	83 c4 10             	add    $0x10,%esp
c000a85d:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:25
	pdir->inode = inode_open(part, inode_no);
c000a860:	83 ec 08             	sub    $0x8,%esp
c000a863:	ff 75 0c             	pushl  0xc(%ebp)
c000a866:	ff 75 08             	pushl  0x8(%ebp)
c000a869:	e8 08 e9 ff ff       	call   c0009176 <inode_open>
c000a86e:	83 c4 10             	add    $0x10,%esp
c000a871:	89 c2                	mov    %eax,%edx
c000a873:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000a876:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/fs/dir.c:26
	pdir->dir_pos = 0;
c000a878:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000a87b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
/work/x86_os_my/fs/dir.c:27
	return pdir;
c000a882:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/dir.c:28
}
c000a885:	c9                   	leave  
c000a886:	c3                   	ret    

c000a887 <search_dir_entry>:
search_dir_entry():
/work/x86_os_my/fs/dir.c:32

/* 在part分区内的pdir目录内，寻找名为name的目录项，
 * 找到后返回true，并将其目录项存入dir_e；否则返回false */
bool search_dir_entry(struct partition* part, struct dir* pdir, const char* name, struct dir_entry* dir_e) {
c000a887:	55                   	push   %ebp
c000a888:	89 e5                	mov    %esp,%ebp
c000a88a:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/fs/dir.c:34
	/* 1分配 */
	uint32_t block_cnt = 140;	 // 12个直接块+128个一级间接块 = 目录的inode管理的所有块 = 140块
c000a88d:	c7 45 e8 8c 00 00 00 	movl   $0x8c,-0x18(%ebp)
/work/x86_os_my/fs/dir.c:39

	/* 12个直接块大小+128个间接块,共560字节（140个块，inode需要管理块的地址，每个4字节）
	注意: all_blocks 里面并没有一级间接表的地址，只有直接块+间接块的地址！
	用all_blocks检索inode管理的所有块地址 */
	uint32_t* all_blocks = (uint32_t*)sys_malloc(48 + 512);
c000a894:	83 ec 0c             	sub    $0xc,%esp
c000a897:	68 30 02 00 00       	push   $0x230
c000a89c:	e8 0b 86 ff ff       	call   c0002eac <sys_malloc>
c000a8a1:	83 c4 10             	add    $0x10,%esp
c000a8a4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/dir.c:40
	if (all_blocks == NULL) {
c000a8a7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c000a8ab:	75 1a                	jne    c000a8c7 <search_dir_entry+0x40>
/work/x86_os_my/fs/dir.c:41
		printk("search_dir_entry: sys_malloc for all_blocks failed");
c000a8ad:	83 ec 0c             	sub    $0xc,%esp
c000a8b0:	68 c8 f0 00 c0       	push   $0xc000f0c8
c000a8b5:	e8 34 c6 ff ff       	call   c0006eee <printk>
c000a8ba:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:42
		return false;
c000a8bd:	b8 00 00 00 00       	mov    $0x0,%eax
c000a8c2:	e9 96 01 00 00       	jmp    c000aa5d <search_dir_entry+0x1d6>
/work/x86_os_my/fs/dir.c:45
	}

	uint32_t block_idx = 0;
c000a8c7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:46
	while (block_idx < 12) {
c000a8ce:	eb 23                	jmp    c000a8f3 <search_dir_entry+0x6c>
/work/x86_os_my/fs/dir.c:47
		all_blocks[block_idx] = pdir->inode->i_sectors[block_idx];
c000a8d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000a8d3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000a8da:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000a8dd:	01 c2                	add    %eax,%edx
c000a8df:	8b 45 0c             	mov    0xc(%ebp),%eax
c000a8e2:	8b 00                	mov    (%eax),%eax
c000a8e4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c000a8e7:	83 c1 04             	add    $0x4,%ecx
c000a8ea:	8b 04 88             	mov    (%eax,%ecx,4),%eax
c000a8ed:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/dir.c:48
		block_idx++;
c000a8ef:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:46
		printk("search_dir_entry: sys_malloc for all_blocks failed");
		return false;
	}

	uint32_t block_idx = 0;
	while (block_idx < 12) {
c000a8f3:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
c000a8f7:	76 d7                	jbe    c000a8d0 <search_dir_entry+0x49>
/work/x86_os_my/fs/dir.c:50
		all_blocks[block_idx] = pdir->inode->i_sectors[block_idx];
		block_idx++;
	}
	block_idx = 0;
c000a8f9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:52

	if (pdir->inode->i_sectors[12] != 0) {	// i_sectors[12] != 0代表含有一级间接块表
c000a900:	8b 45 0c             	mov    0xc(%ebp),%eax
c000a903:	8b 00                	mov    (%eax),%eax
c000a905:	8b 40 40             	mov    0x40(%eax),%eax
c000a908:	85 c0                	test   %eax,%eax
c000a90a:	74 21                	je     c000a92d <search_dir_entry+0xa6>
/work/x86_os_my/fs/dir.c:54
		//从硬盘的扇区地址i_sectors[12]处获取 1 扇区数据，就是 128 个间接块的地址，将其复制到 all_blocks+12 处【复制的是整个一级间接表】
		ide_read(part->my_disk, pdir->inode->i_sectors[12], all_blocks + 12, 1);
c000a90c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000a90f:	8d 48 30             	lea    0x30(%eax),%ecx
c000a912:	8b 45 0c             	mov    0xc(%ebp),%eax
c000a915:	8b 00                	mov    (%eax),%eax
c000a917:	8b 50 40             	mov    0x40(%eax),%edx
c000a91a:	8b 45 08             	mov    0x8(%ebp),%eax
c000a91d:	8b 40 08             	mov    0x8(%eax),%eax
c000a920:	6a 01                	push   $0x1
c000a922:	51                   	push   %ecx
c000a923:	52                   	push   %edx
c000a924:	50                   	push   %eax
c000a925:	e8 4b bb ff ff       	call   c0006475 <ide_read>
c000a92a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:62


	/* 2查找 */
	/* 写目录项的时候已保证目录项不跨扇区，这样读目录项时容易处理，只申请容纳1个扇区的内存
	 * 和处理inode_table不同，在往目录中写目录项的时候(sync_dir_entry)，避免了某个目录项 跨扇区的情况 */
	uint8_t* buf = (uint8_t*)sys_malloc(SECTOR_SIZE);
c000a92d:	83 ec 0c             	sub    $0xc,%esp
c000a930:	68 00 02 00 00       	push   $0x200
c000a935:	e8 72 85 ff ff       	call   c0002eac <sys_malloc>
c000a93a:	83 c4 10             	add    $0x10,%esp
c000a93d:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/dir.c:63
	struct dir_entry* p_de = (struct dir_entry*)buf;		// p_de为指向目录项的指针,值为buf起始地址
c000a940:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000a943:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:64
	uint32_t dir_entry_size = part->sb->dir_entry_size;
c000a946:	8b 45 08             	mov    0x8(%ebp),%eax
c000a949:	8b 40 1c             	mov    0x1c(%eax),%eax
c000a94c:	8b 40 30             	mov    0x30(%eax),%eax
c000a94f:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:65
	uint32_t dir_entry_cnt = SECTOR_SIZE / dir_entry_size;	// 1扇区内可容纳的目录项个数
c000a952:	b8 00 02 00 00       	mov    $0x200,%eax
c000a957:	ba 00 00 00 00       	mov    $0x0,%edx
c000a95c:	f7 75 dc             	divl   -0x24(%ebp)
c000a95f:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/dir.c:67
	/* 在所有块中查找目录项 */
	while (block_idx < block_cnt) {
c000a962:	e9 c9 00 00 00       	jmp    c000aa30 <search_dir_entry+0x1a9>
/work/x86_os_my/fs/dir.c:69
		/* 块地址为0时表示该块中无数据,继续在其它块中找 */
		if (all_blocks[block_idx] == 0) {
c000a967:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000a96a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000a971:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000a974:	01 d0                	add    %edx,%eax
c000a976:	8b 00                	mov    (%eax),%eax
c000a978:	85 c0                	test   %eax,%eax
c000a97a:	75 09                	jne    c000a985 <search_dir_entry+0xfe>
/work/x86_os_my/fs/dir.c:70
			block_idx++;
c000a97c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:71
			continue;
c000a980:	e9 ab 00 00 00       	jmp    c000aa30 <search_dir_entry+0x1a9>
/work/x86_os_my/fs/dir.c:73
		}
		ide_read(part->my_disk, all_blocks[block_idx], buf, 1);
c000a985:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000a988:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000a98f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000a992:	01 d0                	add    %edx,%eax
c000a994:	8b 10                	mov    (%eax),%edx
c000a996:	8b 45 08             	mov    0x8(%ebp),%eax
c000a999:	8b 40 08             	mov    0x8(%eax),%eax
c000a99c:	6a 01                	push   $0x1
c000a99e:	ff 75 e0             	pushl  -0x20(%ebp)
c000a9a1:	52                   	push   %edx
c000a9a2:	50                   	push   %eax
c000a9a3:	e8 cd ba ff ff       	call   c0006475 <ide_read>
c000a9a8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:75

		uint32_t dir_entry_idx = 0;
c000a9ab:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:77
		/* 遍历扇区中所有目录项 */
		while (dir_entry_idx < dir_entry_cnt) {
c000a9b2:	eb 55                	jmp    c000aa09 <search_dir_entry+0x182>
/work/x86_os_my/fs/dir.c:79
			/* 若找到了,就直接复制整个目录项 */
			if (!strcmp(p_de->filename, name)) {
c000a9b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a9b7:	83 ec 08             	sub    $0x8,%esp
c000a9ba:	ff 75 10             	pushl  0x10(%ebp)
c000a9bd:	50                   	push   %eax
c000a9be:	e8 17 92 ff ff       	call   c0003bda <strcmp>
c000a9c3:	83 c4 10             	add    $0x10,%esp
c000a9c6:	84 c0                	test   %al,%al
c000a9c8:	75 37                	jne    c000aa01 <search_dir_entry+0x17a>
/work/x86_os_my/fs/dir.c:80
				memcpy(dir_e, p_de, dir_entry_size);
c000a9ca:	83 ec 04             	sub    $0x4,%esp
c000a9cd:	ff 75 dc             	pushl  -0x24(%ebp)
c000a9d0:	ff 75 f0             	pushl  -0x10(%ebp)
c000a9d3:	ff 75 14             	pushl  0x14(%ebp)
c000a9d6:	e8 7c 90 ff ff       	call   c0003a57 <memcpy>
c000a9db:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:81
				sys_free(buf);
c000a9de:	83 ec 0c             	sub    $0xc,%esp
c000a9e1:	ff 75 e0             	pushl  -0x20(%ebp)
c000a9e4:	e8 f0 8a ff ff       	call   c00034d9 <sys_free>
c000a9e9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:82
				sys_free(all_blocks);
c000a9ec:	83 ec 0c             	sub    $0xc,%esp
c000a9ef:	ff 75 e4             	pushl  -0x1c(%ebp)
c000a9f2:	e8 e2 8a ff ff       	call   c00034d9 <sys_free>
c000a9f7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:83
				return true;
c000a9fa:	b8 01 00 00 00       	mov    $0x1,%eax
c000a9ff:	eb 5c                	jmp    c000aa5d <search_dir_entry+0x1d6>
/work/x86_os_my/fs/dir.c:85
			}
			dir_entry_idx++;
c000aa01:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:86
			p_de++;
c000aa05:	83 45 f0 18          	addl   $0x18,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:77
		}
		ide_read(part->my_disk, all_blocks[block_idx], buf, 1);

		uint32_t dir_entry_idx = 0;
		/* 遍历扇区中所有目录项 */
		while (dir_entry_idx < dir_entry_cnt) {
c000aa09:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000aa0c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
c000aa0f:	72 a3                	jb     c000a9b4 <search_dir_entry+0x12d>
/work/x86_os_my/fs/dir.c:89
			}
			dir_entry_idx++;
			p_de++;
		}

		block_idx++;					// 目录inode管理的下一个数据块（扇区）【目录里面是目录项，所以buf赋给p_de】
c000aa11:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:90
		p_de = (struct dir_entry*)buf;	// p_de已经指向上一个扇区内，最后一个目录项，需要恢复p_de指向为buf
c000aa15:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000aa18:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:91
		memset(buf, 0, SECTOR_SIZE);	// 将buf清0,下次再用
c000aa1b:	83 ec 04             	sub    $0x4,%esp
c000aa1e:	68 00 02 00 00       	push   $0x200
c000aa23:	6a 00                	push   $0x0
c000aa25:	ff 75 e0             	pushl  -0x20(%ebp)
c000aa28:	e8 d8 8f ff ff       	call   c0003a05 <memset>
c000aa2d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:67
	uint8_t* buf = (uint8_t*)sys_malloc(SECTOR_SIZE);
	struct dir_entry* p_de = (struct dir_entry*)buf;		// p_de为指向目录项的指针,值为buf起始地址
	uint32_t dir_entry_size = part->sb->dir_entry_size;
	uint32_t dir_entry_cnt = SECTOR_SIZE / dir_entry_size;	// 1扇区内可容纳的目录项个数
	/* 在所有块中查找目录项 */
	while (block_idx < block_cnt) {
c000aa30:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000aa33:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c000aa36:	0f 82 2b ff ff ff    	jb     c000a967 <search_dir_entry+0xe0>
/work/x86_os_my/fs/dir.c:93

		block_idx++;					// 目录inode管理的下一个数据块（扇区）【目录里面是目录项，所以buf赋给p_de】
		p_de = (struct dir_entry*)buf;	// p_de已经指向上一个扇区内，最后一个目录项，需要恢复p_de指向为buf
		memset(buf, 0, SECTOR_SIZE);	// 将buf清0,下次再用
	}
	sys_free(buf);
c000aa3c:	83 ec 0c             	sub    $0xc,%esp
c000aa3f:	ff 75 e0             	pushl  -0x20(%ebp)
c000aa42:	e8 92 8a ff ff       	call   c00034d9 <sys_free>
c000aa47:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:94
	sys_free(all_blocks);
c000aa4a:	83 ec 0c             	sub    $0xc,%esp
c000aa4d:	ff 75 e4             	pushl  -0x1c(%ebp)
c000aa50:	e8 84 8a ff ff       	call   c00034d9 <sys_free>
c000aa55:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:95
	return false;
c000aa58:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/dir.c:96
}
c000aa5d:	c9                   	leave  
c000aa5e:	c3                   	ret    

c000aa5f <dir_close>:
dir_close():
/work/x86_os_my/fs/dir.c:99

/* 关闭目录 */
void dir_close(struct dir* dir) {
c000aa5f:	55                   	push   %ebp
c000aa60:	89 e5                	mov    %esp,%ebp
c000aa62:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/fs/dir.c:103
	/*************      根目录不能关闭     ***************
	*1 根目录自打开后就不应该关闭,否则还需要再次open_root_dir();
	*2 root_dir所在的内存是低端1M之内,并非在堆中,free会出问题 */
	if (dir == &root_dir) {
c000aa65:	81 7d 08 60 4c 01 c0 	cmpl   $0xc0014c60,0x8(%ebp)
c000aa6c:	74 21                	je     c000aa8f <dir_close+0x30>
/work/x86_os_my/fs/dir.c:106
		return;
	}
	inode_close(dir->inode);
c000aa6e:	8b 45 08             	mov    0x8(%ebp),%eax
c000aa71:	8b 00                	mov    (%eax),%eax
c000aa73:	83 ec 0c             	sub    $0xc,%esp
c000aa76:	50                   	push   %eax
c000aa77:	e8 40 e8 ff ff       	call   c00092bc <inode_close>
c000aa7c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:107
	sys_free(dir);
c000aa7f:	83 ec 0c             	sub    $0xc,%esp
c000aa82:	ff 75 08             	pushl  0x8(%ebp)
c000aa85:	e8 4f 8a ff ff       	call   c00034d9 <sys_free>
c000aa8a:	83 c4 10             	add    $0x10,%esp
c000aa8d:	eb 01                	jmp    c000aa90 <dir_close+0x31>
/work/x86_os_my/fs/dir.c:104
void dir_close(struct dir* dir) {
	/*************      根目录不能关闭     ***************
	*1 根目录自打开后就不应该关闭,否则还需要再次open_root_dir();
	*2 root_dir所在的内存是低端1M之内,并非在堆中,free会出问题 */
	if (dir == &root_dir) {
		return;
c000aa8f:	90                   	nop
/work/x86_os_my/fs/dir.c:108
	}
	inode_close(dir->inode);
	sys_free(dir);
}
c000aa90:	c9                   	leave  
c000aa91:	c3                   	ret    

c000aa92 <create_dir_entry>:
create_dir_entry():
/work/x86_os_my/fs/dir.c:111

/* 在内存中初始化目录项p_de */
void create_dir_entry(char* filename, uint32_t inode_no, uint8_t file_type, struct dir_entry* p_de) {
c000aa92:	55                   	push   %ebp
c000aa93:	89 e5                	mov    %esp,%ebp
c000aa95:	83 ec 18             	sub    $0x18,%esp
c000aa98:	8b 45 10             	mov    0x10(%ebp),%eax
c000aa9b:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:112
	ASSERT(strlen(filename) <=  MAX_FILE_NAME_LEN);
c000aa9e:	83 ec 0c             	sub    $0xc,%esp
c000aaa1:	ff 75 08             	pushl  0x8(%ebp)
c000aaa4:	e8 e6 90 ff ff       	call   c0003b8f <strlen>
c000aaa9:	83 c4 10             	add    $0x10,%esp
c000aaac:	83 f8 10             	cmp    $0x10,%eax
c000aaaf:	76 19                	jbe    c000aaca <create_dir_entry+0x38>
/work/x86_os_my/fs/dir.c:112 (discriminator 1)
c000aab1:	68 fc f0 00 c0       	push   $0xc000f0fc
c000aab6:	68 88 f2 00 c0       	push   $0xc000f288
c000aabb:	6a 70                	push   $0x70
c000aabd:	68 22 f1 00 c0       	push   $0xc000f122
c000aac2:	e8 3a 7a ff ff       	call   c0002501 <panic_spin>
c000aac7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:115

	/* 初始化目录项 */
	memcpy(p_de->filename, filename, strlen(filename));
c000aaca:	83 ec 0c             	sub    $0xc,%esp
c000aacd:	ff 75 08             	pushl  0x8(%ebp)
c000aad0:	e8 ba 90 ff ff       	call   c0003b8f <strlen>
c000aad5:	83 c4 10             	add    $0x10,%esp
c000aad8:	89 c2                	mov    %eax,%edx
c000aada:	8b 45 14             	mov    0x14(%ebp),%eax
c000aadd:	83 ec 04             	sub    $0x4,%esp
c000aae0:	52                   	push   %edx
c000aae1:	ff 75 08             	pushl  0x8(%ebp)
c000aae4:	50                   	push   %eax
c000aae5:	e8 6d 8f ff ff       	call   c0003a57 <memcpy>
c000aaea:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:116
	p_de->i_no = inode_no;
c000aaed:	8b 45 14             	mov    0x14(%ebp),%eax
c000aaf0:	8b 55 0c             	mov    0xc(%ebp),%edx
c000aaf3:	89 50 10             	mov    %edx,0x10(%eax)
/work/x86_os_my/fs/dir.c:117
	p_de->f_type = file_type;
c000aaf6:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
c000aafa:	8b 45 14             	mov    0x14(%ebp),%eax
c000aafd:	89 50 14             	mov    %edx,0x14(%eax)
/work/x86_os_my/fs/dir.c:118
}
c000ab00:	90                   	nop
c000ab01:	c9                   	leave  
c000ab02:	c3                   	ret    

c000ab03 <sync_dir_entry>:
sync_dir_entry():
/work/x86_os_my/fs/dir.c:128
 * io_buf是由主调函数提供的，里面是一个一个的目录项
 */
// 全局变量 cur_part 定义在fs.c中
// 临时变量 all_blocks 保存目录中 所有数据块的地址【4*140=560字节，去掉前12个直接块的地址48字节，后边全是间接块，后边正好是512字节】
// 注意: all_blocks 里面并没有一级间接表的地址，只有直接块+间接块的地址！
bool sync_dir_entry(struct dir* parent_dir, struct dir_entry* p_de, void* io_buf) {
c000ab03:	55                   	push   %ebp
c000ab04:	89 e5                	mov    %esp,%ebp
c000ab06:	57                   	push   %edi
c000ab07:	81 ec 54 02 00 00    	sub    $0x254,%esp
/work/x86_os_my/fs/dir.c:129
	struct inode* dir_inode = parent_dir->inode;	//dir->inode：“已打开的 inode 队列”part->open_inodes 中的节点
c000ab0d:	8b 45 08             	mov    0x8(%ebp),%eax
c000ab10:	8b 00                	mov    (%eax),%eax
c000ab12:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:130
	uint32_t dir_size = dir_inode->i_size;			//inode->i_size：当inode是目录时，代表 目录下所有目录项大小之和
c000ab15:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000ab18:	8b 40 04             	mov    0x4(%eax),%eax
c000ab1b:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:131
	uint32_t dir_entry_size = cur_part->sb->dir_entry_size;
c000ab1e:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000ab23:	8b 40 1c             	mov    0x1c(%eax),%eax
c000ab26:	8b 40 30             	mov    0x30(%eax),%eax
c000ab29:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/dir.c:133

	ASSERT(dir_size % dir_entry_size == 0);	// dir_size应该是dir_entry_size的整数倍
c000ab2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000ab2f:	ba 00 00 00 00       	mov    $0x0,%edx
c000ab34:	f7 75 e8             	divl   -0x18(%ebp)
c000ab37:	89 d0                	mov    %edx,%eax
c000ab39:	85 c0                	test   %eax,%eax
c000ab3b:	74 1c                	je     c000ab59 <sync_dir_entry+0x56>
/work/x86_os_my/fs/dir.c:133 (discriminator 1)
c000ab3d:	68 2c f1 00 c0       	push   $0xc000f12c
c000ab42:	68 9c f2 00 c0       	push   $0xc000f29c
c000ab47:	68 85 00 00 00       	push   $0x85
c000ab4c:	68 22 f1 00 c0       	push   $0xc000f122
c000ab51:	e8 ab 79 ff ff       	call   c0002501 <panic_spin>
c000ab56:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:135

	uint32_t dir_entrys_per_sec = (512 / dir_entry_size);	// 每扇区最多有几个目录项【保证了：写入目录项时不会跨扇区】
c000ab59:	b8 00 02 00 00       	mov    $0x200,%eax
c000ab5e:	ba 00 00 00 00       	mov    $0x0,%edx
c000ab63:	f7 75 e8             	divl   -0x18(%ebp)
c000ab66:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/dir.c:136
	int32_t block_lba = -1;
c000ab69:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
/work/x86_os_my/fs/dir.c:140


	/* 将该目录inode管理的所有块(扇区)地址(12个直接块+ 128个间接块)存入all_blocks */
	uint8_t block_idx = 0;
c000ab70:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/fs/dir.c:143
	// all_blocks 保存目录中 所有数据块的地址【4*140=560字节，去掉前12个直接块的地址48字节，后边全是间接块，后边正好是512字节】
	// 注意: all_blocks 里面并没有一级间接表的地址，只有直接块+间接块的地址！
	uint32_t all_blocks[140] = {0};
c000ab74:	8d 95 a8 fd ff ff    	lea    -0x258(%ebp),%edx
c000ab7a:	b8 00 00 00 00       	mov    $0x0,%eax
c000ab7f:	b9 8c 00 00 00       	mov    $0x8c,%ecx
c000ab84:	89 d7                	mov    %edx,%edi
c000ab86:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/fs/dir.c:144
	while (block_idx < 12) {
c000ab88:	eb 22                	jmp    c000abac <sync_dir_entry+0xa9>
/work/x86_os_my/fs/dir.c:145
		all_blocks[block_idx] = dir_inode->i_sectors[block_idx];
c000ab8a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000ab8e:	0f b6 4d f7          	movzbl -0x9(%ebp),%ecx
c000ab92:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000ab95:	83 c1 04             	add    $0x4,%ecx
c000ab98:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
c000ab9b:	89 94 85 a8 fd ff ff 	mov    %edx,-0x258(%ebp,%eax,4)
/work/x86_os_my/fs/dir.c:146
		block_idx++;
c000aba2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000aba6:	83 c0 01             	add    $0x1,%eax
c000aba9:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/dir.c:144
	/* 将该目录inode管理的所有块(扇区)地址(12个直接块+ 128个间接块)存入all_blocks */
	uint8_t block_idx = 0;
	// all_blocks 保存目录中 所有数据块的地址【4*140=560字节，去掉前12个直接块的地址48字节，后边全是间接块，后边正好是512字节】
	// 注意: all_blocks 里面并没有一级间接表的地址，只有直接块+间接块的地址！
	uint32_t all_blocks[140] = {0};
	while (block_idx < 12) {
c000abac:	80 7d f7 0b          	cmpb   $0xb,-0x9(%ebp)
c000abb0:	76 d8                	jbe    c000ab8a <sync_dir_entry+0x87>
/work/x86_os_my/fs/dir.c:151
		block_idx++;
	}


	/* 开始遍历所有块以寻找目录项空位 */
	block_idx = 0;
c000abb2:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/fs/dir.c:152
	while (block_idx < 140) {	// 文件(包括目录)最多管理140个块
c000abb6:	e9 3f 03 00 00       	jmp    c000aefa <sync_dir_entry+0x3f7>
/work/x86_os_my/fs/dir.c:155
		/* 一、若inode管理的第block_idx块是不存在的，需要分配。
		   下边是需要分配块的三种情况 @1 @2 @3 */
		int32_t block_bitmap_idx = -1;
c000abbb:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:156
		if (all_blocks[block_idx] == 0) {
c000abc2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000abc6:	8b 84 85 a8 fd ff ff 	mov    -0x258(%ebp,%eax,4),%eax
c000abcd:	85 c0                	test   %eax,%eax
c000abcf:	0f 85 58 02 00 00    	jne    c000ae2d <sync_dir_entry+0x32a>
/work/x86_os_my/fs/dir.c:157
			block_lba = block_bitmap_alloc(cur_part);	// #1 从分区的block位图中，分配1个扇区，返回"扇区地址"
c000abd5:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000abda:	83 ec 0c             	sub    $0xc,%esp
c000abdd:	50                   	push   %eax
c000abde:	e8 ff eb ff ff       	call   c00097e2 <block_bitmap_alloc>
c000abe3:	83 c4 10             	add    $0x10,%esp
c000abe6:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/dir.c:158
			if (block_lba == -1) {
c000abe9:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
c000abed:	75 1a                	jne    c000ac09 <sync_dir_entry+0x106>
/work/x86_os_my/fs/dir.c:159
				printk("alloc block bitmap for sync_dir_entry failed\n");
c000abef:	83 ec 0c             	sub    $0xc,%esp
c000abf2:	68 4c f1 00 c0       	push   $0xc000f14c
c000abf7:	e8 f2 c2 ff ff       	call   c0006eee <printk>
c000abfc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:160
				return false;
c000abff:	b8 00 00 00 00       	mov    $0x0,%eax
c000ac04:	e9 10 03 00 00       	jmp    c000af19 <sync_dir_entry+0x416>
/work/x86_os_my/fs/dir.c:163
			}
			/* 每分配一个块就同步一次block_bitmap */
			block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
c000ac09:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000ac0c:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000ac11:	8b 40 1c             	mov    0x1c(%eax),%eax
c000ac14:	8b 40 28             	mov    0x28(%eax),%eax
c000ac17:	29 c2                	sub    %eax,%edx
c000ac19:	89 d0                	mov    %edx,%eax
c000ac1b:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:164
			ASSERT(block_bitmap_idx != -1);	//怎么可能是-1啊。。。？
c000ac1e:	83 7d dc ff          	cmpl   $0xffffffff,-0x24(%ebp)
c000ac22:	75 1c                	jne    c000ac40 <sync_dir_entry+0x13d>
/work/x86_os_my/fs/dir.c:164 (discriminator 1)
c000ac24:	68 7a f1 00 c0       	push   $0xc000f17a
c000ac29:	68 9c f2 00 c0       	push   $0xc000f29c
c000ac2e:	68 a4 00 00 00       	push   $0xa4
c000ac33:	68 22 f1 00 c0       	push   $0xc000f122
c000ac38:	e8 c4 78 ff ff       	call   c0002501 <panic_spin>
c000ac3d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:165
			bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c000ac40:	8b 55 dc             	mov    -0x24(%ebp),%edx
c000ac43:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000ac48:	83 ec 04             	sub    $0x4,%esp
c000ac4b:	6a 01                	push   $0x1
c000ac4d:	52                   	push   %edx
c000ac4e:	50                   	push   %eax
c000ac4f:	e8 e0 eb ff ff       	call   c0009834 <bitmap_sync>
c000ac54:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:167

			block_bitmap_idx = -1;
c000ac57:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:168
			if (block_idx < 12) {			// @1 若是直接块
c000ac5e:	80 7d f7 0b          	cmpb   $0xb,-0x9(%ebp)
c000ac62:	77 27                	ja     c000ac8b <sync_dir_entry+0x188>
/work/x86_os_my/fs/dir.c:169
				dir_inode->i_sectors[block_idx] = all_blocks[block_idx] = block_lba;
c000ac64:	0f b6 4d f7          	movzbl -0x9(%ebp),%ecx
c000ac68:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000ac6c:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000ac6f:	89 94 85 a8 fd ff ff 	mov    %edx,-0x258(%ebp,%eax,4)
c000ac76:	8b 94 85 a8 fd ff ff 	mov    -0x258(%ebp,%eax,4),%edx
c000ac7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000ac80:	83 c1 04             	add    $0x4,%ecx
c000ac83:	89 14 88             	mov    %edx,(%eax,%ecx,4)
c000ac86:	e9 3c 01 00 00       	jmp    c000adc7 <sync_dir_entry+0x2c4>
/work/x86_os_my/fs/dir.c:170
			} else if (block_idx == 12) {	// @2 若是未分配 一级间接块表(block_idx==12表示第0个间接块)
c000ac8b:	80 7d f7 0c          	cmpb   $0xc,-0x9(%ebp)
c000ac8f:	0f 85 ff 00 00 00    	jne    c000ad94 <sync_dir_entry+0x291>
/work/x86_os_my/fs/dir.c:171
				dir_inode->i_sectors[12] = block_lba;		// 将 #1 分配的块做为"一级间接块表"地址
c000ac95:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000ac98:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000ac9b:	89 50 40             	mov    %edx,0x40(%eax)
/work/x86_os_my/fs/dir.c:173
				
				block_lba = -1;
c000ac9e:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
/work/x86_os_my/fs/dir.c:174
				block_lba = block_bitmap_alloc(cur_part);	// #2 再分配一个块做为"第0个间接块"
c000aca5:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000acaa:	83 ec 0c             	sub    $0xc,%esp
c000acad:	50                   	push   %eax
c000acae:	e8 2f eb ff ff       	call   c00097e2 <block_bitmap_alloc>
c000acb3:	83 c4 10             	add    $0x10,%esp
c000acb6:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/dir.c:175
				if (block_lba == -1) {
c000acb9:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
c000acbd:	75 57                	jne    c000ad16 <sync_dir_entry+0x213>
/work/x86_os_my/fs/dir.c:177
					// 回滚block_bitmap
					block_bitmap_idx = dir_inode->i_sectors[12] - cur_part->sb->data_start_lba;
c000acbf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000acc2:	8b 50 40             	mov    0x40(%eax),%edx
c000acc5:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000acca:	8b 40 1c             	mov    0x1c(%eax),%eax
c000accd:	8b 40 28             	mov    0x28(%eax),%eax
c000acd0:	29 c2                	sub    %eax,%edx
c000acd2:	89 d0                	mov    %edx,%eax
c000acd4:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:178
					bitmap_set(&cur_part->block_bitmap, block_bitmap_idx, 0);	//释放 #1
c000acd7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000acda:	8b 15 d0 4a 01 c0    	mov    0xc0014ad0,%edx
c000ace0:	83 c2 20             	add    $0x20,%edx
c000ace3:	83 ec 04             	sub    $0x4,%esp
c000ace6:	6a 00                	push   $0x0
c000ace8:	50                   	push   %eax
c000ace9:	52                   	push   %edx
c000acea:	e8 80 7a ff ff       	call   c000276f <bitmap_set>
c000acef:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:180
					// 取消掉这个一级间接块表
					dir_inode->i_sectors[12] = 0;
c000acf2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000acf5:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)
/work/x86_os_my/fs/dir.c:181
					printk("alloc block bitmap for sync_dir_entry failed\n");
c000acfc:	83 ec 0c             	sub    $0xc,%esp
c000acff:	68 4c f1 00 c0       	push   $0xc000f14c
c000ad04:	e8 e5 c1 ff ff       	call   c0006eee <printk>
c000ad09:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:182
					return false;
c000ad0c:	b8 00 00 00 00       	mov    $0x0,%eax
c000ad11:	e9 03 02 00 00       	jmp    c000af19 <sync_dir_entry+0x416>
/work/x86_os_my/fs/dir.c:185
				}
				/* 每分配一个块就同步一次block_bitmap */
				block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
c000ad16:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000ad19:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000ad1e:	8b 40 1c             	mov    0x1c(%eax),%eax
c000ad21:	8b 40 28             	mov    0x28(%eax),%eax
c000ad24:	29 c2                	sub    %eax,%edx
c000ad26:	89 d0                	mov    %edx,%eax
c000ad28:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:186
				ASSERT(block_bitmap_idx != -1);
c000ad2b:	83 7d dc ff          	cmpl   $0xffffffff,-0x24(%ebp)
c000ad2f:	75 1c                	jne    c000ad4d <sync_dir_entry+0x24a>
/work/x86_os_my/fs/dir.c:186 (discriminator 1)
c000ad31:	68 7a f1 00 c0       	push   $0xc000f17a
c000ad36:	68 9c f2 00 c0       	push   $0xc000f29c
c000ad3b:	68 ba 00 00 00       	push   $0xba
c000ad40:	68 22 f1 00 c0       	push   $0xc000f122
c000ad45:	e8 b7 77 ff ff       	call   c0002501 <panic_spin>
c000ad4a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:187
				bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c000ad4d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c000ad50:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000ad55:	83 ec 04             	sub    $0x4,%esp
c000ad58:	6a 01                	push   $0x1
c000ad5a:	52                   	push   %edx
c000ad5b:	50                   	push   %eax
c000ad5c:	e8 d3 ea ff ff       	call   c0009834 <bitmap_sync>
c000ad61:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:190

				/* 把新分配的"第0个间接块地址"写入硬盘中"一级间接块表" */
				all_blocks[12] = block_lba;
c000ad64:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000ad67:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
/work/x86_os_my/fs/dir.c:194
				// all_blocks 共有4*140=560字节，去掉前12个直接块的地址48字节，后边全是间接块，后边正好是512字节】
				// 注意: all_blocks 里面并没有一级间接表的地址，只有直接块+间接块的地址！
				// 我们的一级间接表大小是和普通数据块大小一样的512字节，可以容纳128个数据块的地址！
				ide_write(cur_part->my_disk, dir_inode->i_sectors[12], all_blocks + 12, 1);
c000ad6d:	8d 85 a8 fd ff ff    	lea    -0x258(%ebp),%eax
c000ad73:	83 c0 30             	add    $0x30,%eax
c000ad76:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000ad79:	8b 4a 40             	mov    0x40(%edx),%ecx
c000ad7c:	8b 15 d0 4a 01 c0    	mov    0xc0014ad0,%edx
c000ad82:	8b 52 08             	mov    0x8(%edx),%edx
c000ad85:	6a 01                	push   $0x1
c000ad87:	50                   	push   %eax
c000ad88:	51                   	push   %ecx
c000ad89:	52                   	push   %edx
c000ad8a:	e8 5a b8 ff ff       	call   c00065e9 <ide_write>
c000ad8f:	83 c4 10             	add    $0x10,%esp
c000ad92:	eb 33                	jmp    c000adc7 <sync_dir_entry+0x2c4>
/work/x86_os_my/fs/dir.c:197
			} else {						// @3 若是未分配 间接块【父目录inode管理的只有前13个数据块需要特殊处理，后边的全是间接块】
				/* 把新分配的第(block_idx-12)个间接块地址"写入硬盘中"一级间接块表 */
				all_blocks[block_idx] = block_lba;
c000ad94:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000ad98:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000ad9b:	89 94 85 a8 fd ff ff 	mov    %edx,-0x258(%ebp,%eax,4)
/work/x86_os_my/fs/dir.c:198
				ide_write(cur_part->my_disk, dir_inode->i_sectors[12], all_blocks + 12, 1);
c000ada2:	8d 85 a8 fd ff ff    	lea    -0x258(%ebp),%eax
c000ada8:	83 c0 30             	add    $0x30,%eax
c000adab:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000adae:	8b 4a 40             	mov    0x40(%edx),%ecx
c000adb1:	8b 15 d0 4a 01 c0    	mov    0xc0014ad0,%edx
c000adb7:	8b 52 08             	mov    0x8(%edx),%edx
c000adba:	6a 01                	push   $0x1
c000adbc:	50                   	push   %eax
c000adbd:	51                   	push   %ecx
c000adbe:	52                   	push   %edx
c000adbf:	e8 25 b8 ff ff       	call   c00065e9 <ide_write>
c000adc4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:204
			}


			/* 这里才是重点，前边只是处理，父目录indoe管理的某个数据块为空的情况，需要新分配数据块，包括一级间接块表、间接块 */
			/* 再将硬盘中，新目录项p_de写入新分配的间接块 */
			memset(io_buf, 0, 512);
c000adc7:	83 ec 04             	sub    $0x4,%esp
c000adca:	68 00 02 00 00       	push   $0x200
c000adcf:	6a 00                	push   $0x0
c000add1:	ff 75 10             	pushl  0x10(%ebp)
c000add4:	e8 2c 8c ff ff       	call   c0003a05 <memset>
c000add9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:205
			memcpy(io_buf, p_de, dir_entry_size);
c000addc:	83 ec 04             	sub    $0x4,%esp
c000addf:	ff 75 e8             	pushl  -0x18(%ebp)
c000ade2:	ff 75 0c             	pushl  0xc(%ebp)
c000ade5:	ff 75 10             	pushl  0x10(%ebp)
c000ade8:	e8 6a 8c ff ff       	call   c0003a57 <memcpy>
c000aded:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:206
			ide_write(cur_part->my_disk, all_blocks[block_idx], io_buf, 1);
c000adf0:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000adf4:	8b 94 85 a8 fd ff ff 	mov    -0x258(%ebp,%eax,4),%edx
c000adfb:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000ae00:	8b 40 08             	mov    0x8(%eax),%eax
c000ae03:	6a 01                	push   $0x1
c000ae05:	ff 75 10             	pushl  0x10(%ebp)
c000ae08:	52                   	push   %edx
c000ae09:	50                   	push   %eax
c000ae0a:	e8 da b7 ff ff       	call   c00065e9 <ide_write>
c000ae0f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:207
			dir_inode->i_size += dir_entry_size;	//struct inode* dir_inode = parent_dir->inode;更新的是父目录的inode结构
c000ae12:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000ae15:	8b 50 04             	mov    0x4(%eax),%edx
c000ae18:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000ae1b:	01 c2                	add    %eax,%edx
c000ae1d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000ae20:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/dir.c:208
			return true;
c000ae23:	b8 01 00 00 00       	mov    $0x1,%eax
c000ae28:	e9 ec 00 00 00       	jmp    c000af19 <sync_dir_entry+0x416>
/work/x86_os_my/fs/dir.c:213
		}//if (all_blocks[block_idx] == 0)


		/* 二、若inode管理的第block_idx块是存在的，不需要分配，将其读进内存，然后在该块中查找空目录项，将p_de填入 */
		ide_read(cur_part->my_disk, all_blocks[block_idx], io_buf, 1); 
c000ae2d:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000ae31:	8b 94 85 a8 fd ff ff 	mov    -0x258(%ebp,%eax,4),%edx
c000ae38:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000ae3d:	8b 40 08             	mov    0x8(%eax),%eax
c000ae40:	6a 01                	push   $0x1
c000ae42:	ff 75 10             	pushl  0x10(%ebp)
c000ae45:	52                   	push   %edx
c000ae46:	50                   	push   %eax
c000ae47:	e8 29 b6 ff ff       	call   c0006475 <ide_read>
c000ae4c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:215
		/* 在扇区内查找空目录项 */
		uint8_t dir_entry_idx = 0;
c000ae4f:	c6 45 f6 00          	movb   $0x0,-0xa(%ebp)
/work/x86_os_my/fs/dir.c:216
		struct dir_entry* dir_e = (struct dir_entry*)io_buf;		// dir_e用来在io_buf中遍历目录项【io_buf里面是一个一个的目录项】
c000ae53:	8b 45 10             	mov    0x10(%ebp),%eax
c000ae56:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/dir.c:217
		while (dir_entry_idx < dir_entrys_per_sec) {
c000ae59:	e9 85 00 00 00       	jmp    c000aee3 <sync_dir_entry+0x3e0>
/work/x86_os_my/fs/dir.c:218
			if ((dir_e + dir_entry_idx)->f_type == FT_UNKNOWN) {	// 无论是初始化或是删除文件，都会将f_type置为FT_UNKNOWN.
c000ae5e:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
c000ae62:	89 d0                	mov    %edx,%eax
c000ae64:	01 c0                	add    %eax,%eax
c000ae66:	01 d0                	add    %edx,%eax
c000ae68:	c1 e0 03             	shl    $0x3,%eax
c000ae6b:	89 c2                	mov    %eax,%edx
c000ae6d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000ae70:	01 d0                	add    %edx,%eax
c000ae72:	8b 40 14             	mov    0x14(%eax),%eax
c000ae75:	85 c0                	test   %eax,%eax
c000ae77:	75 60                	jne    c000aed9 <sync_dir_entry+0x3d6>
/work/x86_os_my/fs/dir.c:219
				memcpy(dir_e + dir_entry_idx, p_de, dir_entry_size);    
c000ae79:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
c000ae7d:	89 d0                	mov    %edx,%eax
c000ae7f:	01 c0                	add    %eax,%eax
c000ae81:	01 d0                	add    %edx,%eax
c000ae83:	c1 e0 03             	shl    $0x3,%eax
c000ae86:	89 c2                	mov    %eax,%edx
c000ae88:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000ae8b:	01 d0                	add    %edx,%eax
c000ae8d:	83 ec 04             	sub    $0x4,%esp
c000ae90:	ff 75 e8             	pushl  -0x18(%ebp)
c000ae93:	ff 75 0c             	pushl  0xc(%ebp)
c000ae96:	50                   	push   %eax
c000ae97:	e8 bb 8b ff ff       	call   c0003a57 <memcpy>
c000ae9c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:220
				ide_write(cur_part->my_disk, all_blocks[block_idx], io_buf, 1);
c000ae9f:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000aea3:	8b 94 85 a8 fd ff ff 	mov    -0x258(%ebp,%eax,4),%edx
c000aeaa:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000aeaf:	8b 40 08             	mov    0x8(%eax),%eax
c000aeb2:	6a 01                	push   $0x1
c000aeb4:	ff 75 10             	pushl  0x10(%ebp)
c000aeb7:	52                   	push   %edx
c000aeb8:	50                   	push   %eax
c000aeb9:	e8 2b b7 ff ff       	call   c00065e9 <ide_write>
c000aebe:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:222

				dir_inode->i_size += dir_entry_size;
c000aec1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000aec4:	8b 50 04             	mov    0x4(%eax),%edx
c000aec7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000aeca:	01 c2                	add    %eax,%edx
c000aecc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000aecf:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/dir.c:223
				return true;
c000aed2:	b8 01 00 00 00       	mov    $0x1,%eax
c000aed7:	eb 40                	jmp    c000af19 <sync_dir_entry+0x416>
/work/x86_os_my/fs/dir.c:225
			}
			dir_entry_idx++;
c000aed9:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c000aedd:	83 c0 01             	add    $0x1,%eax
c000aee0:	88 45 f6             	mov    %al,-0xa(%ebp)
/work/x86_os_my/fs/dir.c:217
		/* 二、若inode管理的第block_idx块是存在的，不需要分配，将其读进内存，然后在该块中查找空目录项，将p_de填入 */
		ide_read(cur_part->my_disk, all_blocks[block_idx], io_buf, 1); 
		/* 在扇区内查找空目录项 */
		uint8_t dir_entry_idx = 0;
		struct dir_entry* dir_e = (struct dir_entry*)io_buf;		// dir_e用来在io_buf中遍历目录项【io_buf里面是一个一个的目录项】
		while (dir_entry_idx < dir_entrys_per_sec) {
c000aee3:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c000aee7:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c000aeea:	0f 82 6e ff ff ff    	jb     c000ae5e <sync_dir_entry+0x35b>
/work/x86_os_my/fs/dir.c:230
			dir_entry_idx++;
		}


		/* 三、若inode管理的第block_idx块是存在的，不需要分配，但是都不是空闲(FT_UNKNOWN)的 */
		block_idx++;	//下一个inode管理的block
c000aef0:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000aef4:	83 c0 01             	add    $0x1,%eax
c000aef7:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/dir.c:152
	}


	/* 开始遍历所有块以寻找目录项空位 */
	block_idx = 0;
	while (block_idx < 140) {	// 文件(包括目录)最多管理140个块
c000aefa:	80 7d f7 8b          	cmpb   $0x8b,-0x9(%ebp)
c000aefe:	0f 86 b7 fc ff ff    	jbe    c000abbb <sync_dir_entry+0xb8>
/work/x86_os_my/fs/dir.c:233

		/* 三、若inode管理的第block_idx块是存在的，不需要分配，但是都不是空闲(FT_UNKNOWN)的 */
		block_idx++;	//下一个inode管理的block
	}//while (block_idx < 140)

	printk("directory is full!\n");
c000af04:	83 ec 0c             	sub    $0xc,%esp
c000af07:	68 91 f1 00 c0       	push   $0xc000f191
c000af0c:	e8 dd bf ff ff       	call   c0006eee <printk>
c000af11:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:234
	return false;
c000af14:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/dir.c:235 (discriminator 1)
}
c000af19:	8b 7d fc             	mov    -0x4(%ebp),%edi
c000af1c:	c9                   	leave  
c000af1d:	c3                   	ret    

c000af1e <delete_dir_entry>:
delete_dir_entry():
/work/x86_os_my/fs/dir.c:244
（2）根目录是必须存在的，它是文件读写的根基，不应该被清空，它至少要保留 1 个块。
	 如果目录项独占 1个块，并且该块不是根目录最后一个块的话，将其回收。
（3）目录 inode 的 i_size 是目录项大小的总和，因此还要将 i_size 减去一个目录项的单位大小。
（4）目录 inode 改变后，要同步到硬盘。
 */
bool delete_dir_entry(struct partition* part, struct dir* pdir, uint32_t inode_no, void* io_buf) {
c000af1e:	55                   	push   %ebp
c000af1f:	89 e5                	mov    %esp,%ebp
c000af21:	57                   	push   %edi
c000af22:	81 ec 64 02 00 00    	sub    $0x264,%esp
/work/x86_os_my/fs/dir.c:245
	struct inode* dir_inode = pdir->inode;
c000af28:	8b 45 0c             	mov    0xc(%ebp),%eax
c000af2b:	8b 00                	mov    (%eax),%eax
c000af2d:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/dir.c:246
	uint32_t block_idx = 0, all_blocks[140] = {0};
c000af30:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c000af37:	8d 95 9c fd ff ff    	lea    -0x264(%ebp),%edx
c000af3d:	b8 00 00 00 00       	mov    $0x0,%eax
c000af42:	b9 8c 00 00 00       	mov    $0x8c,%ecx
c000af47:	89 d7                	mov    %edx,%edi
c000af49:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/fs/dir.c:249

	/* 收集目录全部块地址，存到到 all_blocks */
	while (block_idx < 12) {
c000af4b:	eb 1a                	jmp    c000af67 <delete_dir_entry+0x49>
/work/x86_os_my/fs/dir.c:250
		all_blocks[block_idx] = dir_inode->i_sectors[block_idx];
c000af4d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000af50:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000af53:	83 c2 04             	add    $0x4,%edx
c000af56:	8b 14 90             	mov    (%eax,%edx,4),%edx
c000af59:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000af5c:	89 94 85 9c fd ff ff 	mov    %edx,-0x264(%ebp,%eax,4)
/work/x86_os_my/fs/dir.c:251
		block_idx++;
c000af63:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:249
bool delete_dir_entry(struct partition* part, struct dir* pdir, uint32_t inode_no, void* io_buf) {
	struct inode* dir_inode = pdir->inode;
	uint32_t block_idx = 0, all_blocks[140] = {0};

	/* 收集目录全部块地址，存到到 all_blocks */
	while (block_idx < 12) {
c000af67:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
c000af6b:	76 e0                	jbe    c000af4d <delete_dir_entry+0x2f>
/work/x86_os_my/fs/dir.c:253
		all_blocks[block_idx] = dir_inode->i_sectors[block_idx];
		block_idx++;
	}
	if (dir_inode->i_sectors[12]) {
c000af6d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000af70:	8b 40 40             	mov    0x40(%eax),%eax
c000af73:	85 c0                	test   %eax,%eax
c000af75:	74 22                	je     c000af99 <delete_dir_entry+0x7b>
/work/x86_os_my/fs/dir.c:254
		ide_read(part->my_disk, dir_inode->i_sectors[12], all_blocks + 12, 1);
c000af77:	8d 85 9c fd ff ff    	lea    -0x264(%ebp),%eax
c000af7d:	83 c0 30             	add    $0x30,%eax
c000af80:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000af83:	8b 4a 40             	mov    0x40(%edx),%ecx
c000af86:	8b 55 08             	mov    0x8(%ebp),%edx
c000af89:	8b 52 08             	mov    0x8(%edx),%edx
c000af8c:	6a 01                	push   $0x1
c000af8e:	50                   	push   %eax
c000af8f:	51                   	push   %ecx
c000af90:	52                   	push   %edx
c000af91:	e8 df b4 ff ff       	call   c0006475 <ide_read>
c000af96:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:258
	}

	/* 目录项在存储时保证不会跨扇区 */
	uint32_t dir_entry_size = part->sb->dir_entry_size;
c000af99:	8b 45 08             	mov    0x8(%ebp),%eax
c000af9c:	8b 40 1c             	mov    0x1c(%eax),%eax
c000af9f:	8b 40 30             	mov    0x30(%eax),%eax
c000afa2:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:259
	uint32_t dir_entrys_per_sec = (SECTOR_SIZE / dir_entry_size);	// 每扇区最大的目录项数目
c000afa5:	b8 00 02 00 00       	mov    $0x200,%eax
c000afaa:	ba 00 00 00 00       	mov    $0x0,%edx
c000afaf:	f7 75 dc             	divl   -0x24(%ebp)
c000afb2:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/dir.c:260
	struct dir_entry* dir_e = (struct dir_entry*)io_buf;
c000afb5:	8b 45 14             	mov    0x14(%ebp),%eax
c000afb8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/fs/dir.c:261
	struct dir_entry* dir_entry_found = NULL;
c000afbb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:263
	uint8_t dir_entry_idx, dir_entry_cnt;
	bool is_dir_first_block = false;	// 目录的第1个块
c000afc2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
/work/x86_os_my/fs/dir.c:266

	/* 遍历所有块，寻找目录项 */
	block_idx = 0;
c000afc9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:267
	while (block_idx < 140) {
c000afd0:	e9 9a 03 00 00       	jmp    c000b36f <delete_dir_entry+0x451>
/work/x86_os_my/fs/dir.c:268
		is_dir_first_block = false;
c000afd5:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
/work/x86_os_my/fs/dir.c:269
		if (all_blocks[block_idx] == 0) {
c000afdc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000afdf:	8b 84 85 9c fd ff ff 	mov    -0x264(%ebp,%eax,4),%eax
c000afe6:	85 c0                	test   %eax,%eax
c000afe8:	75 09                	jne    c000aff3 <delete_dir_entry+0xd5>
/work/x86_os_my/fs/dir.c:270
			block_idx++;
c000afea:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:271
			continue;
c000afee:	e9 7c 03 00 00       	jmp    c000b36f <delete_dir_entry+0x451>
/work/x86_os_my/fs/dir.c:273
		}
		dir_entry_idx = dir_entry_cnt = 0;
c000aff3:	c6 45 ee 00          	movb   $0x0,-0x12(%ebp)
c000aff7:	0f b6 45 ee          	movzbl -0x12(%ebp),%eax
c000affb:	88 45 ef             	mov    %al,-0x11(%ebp)
/work/x86_os_my/fs/dir.c:274
		memset(io_buf, 0, SECTOR_SIZE);
c000affe:	83 ec 04             	sub    $0x4,%esp
c000b001:	68 00 02 00 00       	push   $0x200
c000b006:	6a 00                	push   $0x0
c000b008:	ff 75 14             	pushl  0x14(%ebp)
c000b00b:	e8 f5 89 ff ff       	call   c0003a05 <memset>
c000b010:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:276
		/* 读取目录inode管理的各个数据块（扇区），里面是目录项 */
		ide_read(part->my_disk, all_blocks[block_idx], io_buf, 1);	//dir_e = io_buf
c000b013:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b016:	8b 94 85 9c fd ff ff 	mov    -0x264(%ebp,%eax,4),%edx
c000b01d:	8b 45 08             	mov    0x8(%ebp),%eax
c000b020:	8b 40 08             	mov    0x8(%eax),%eax
c000b023:	6a 01                	push   $0x1
c000b025:	ff 75 14             	pushl  0x14(%ebp)
c000b028:	52                   	push   %edx
c000b029:	50                   	push   %eax
c000b02a:	e8 46 b4 ff ff       	call   c0006475 <ide_read>
c000b02f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:279

		/* 遍历所有的目录项，统计该扇区的目录项数量 + 是否找到要删除的目录项 */
		while (dir_entry_idx < dir_entrys_per_sec) {
c000b032:	e9 13 01 00 00       	jmp    c000b14a <delete_dir_entry+0x22c>
/work/x86_os_my/fs/dir.c:280
			if ((dir_e + dir_entry_idx)->f_type != FT_UNKNOWN) {	// 初始化或是删除文件，会将f_type置为FT_UNKNOWN.
c000b037:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c000b03b:	89 d0                	mov    %edx,%eax
c000b03d:	01 c0                	add    %eax,%eax
c000b03f:	01 d0                	add    %edx,%eax
c000b041:	c1 e0 03             	shl    $0x3,%eax
c000b044:	89 c2                	mov    %eax,%edx
c000b046:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000b049:	01 d0                	add    %edx,%eax
c000b04b:	8b 40 14             	mov    0x14(%eax),%eax
c000b04e:	85 c0                	test   %eax,%eax
c000b050:	0f 84 ea 00 00 00    	je     c000b140 <delete_dir_entry+0x222>
/work/x86_os_my/fs/dir.c:281
				if (!strcmp((dir_e + dir_entry_idx)->filename, ".")) {
c000b056:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c000b05a:	89 d0                	mov    %edx,%eax
c000b05c:	01 c0                	add    %eax,%eax
c000b05e:	01 d0                	add    %edx,%eax
c000b060:	c1 e0 03             	shl    $0x3,%eax
c000b063:	89 c2                	mov    %eax,%edx
c000b065:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000b068:	01 d0                	add    %edx,%eax
c000b06a:	83 ec 08             	sub    $0x8,%esp
c000b06d:	68 a5 f1 00 c0       	push   $0xc000f1a5
c000b072:	50                   	push   %eax
c000b073:	e8 62 8b ff ff       	call   c0003bda <strcmp>
c000b078:	83 c4 10             	add    $0x10,%esp
c000b07b:	84 c0                	test   %al,%al
c000b07d:	75 0c                	jne    c000b08b <delete_dir_entry+0x16d>
/work/x86_os_my/fs/dir.c:282
					is_dir_first_block = true;
c000b07f:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
c000b086:	e9 b5 00 00 00       	jmp    c000b140 <delete_dir_entry+0x222>
/work/x86_os_my/fs/dir.c:283
				} else if (strcmp((dir_e + dir_entry_idx)->filename, ".") && strcmp((dir_e + dir_entry_idx)->filename, "..")) {	//不是.和..
c000b08b:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c000b08f:	89 d0                	mov    %edx,%eax
c000b091:	01 c0                	add    %eax,%eax
c000b093:	01 d0                	add    %edx,%eax
c000b095:	c1 e0 03             	shl    $0x3,%eax
c000b098:	89 c2                	mov    %eax,%edx
c000b09a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000b09d:	01 d0                	add    %edx,%eax
c000b09f:	83 ec 08             	sub    $0x8,%esp
c000b0a2:	68 a5 f1 00 c0       	push   $0xc000f1a5
c000b0a7:	50                   	push   %eax
c000b0a8:	e8 2d 8b ff ff       	call   c0003bda <strcmp>
c000b0ad:	83 c4 10             	add    $0x10,%esp
c000b0b0:	84 c0                	test   %al,%al
c000b0b2:	0f 84 88 00 00 00    	je     c000b140 <delete_dir_entry+0x222>
/work/x86_os_my/fs/dir.c:283 (discriminator 1)
c000b0b8:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c000b0bc:	89 d0                	mov    %edx,%eax
c000b0be:	01 c0                	add    %eax,%eax
c000b0c0:	01 d0                	add    %edx,%eax
c000b0c2:	c1 e0 03             	shl    $0x3,%eax
c000b0c5:	89 c2                	mov    %eax,%edx
c000b0c7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000b0ca:	01 d0                	add    %edx,%eax
c000b0cc:	83 ec 08             	sub    $0x8,%esp
c000b0cf:	68 a7 f1 00 c0       	push   $0xc000f1a7
c000b0d4:	50                   	push   %eax
c000b0d5:	e8 00 8b ff ff       	call   c0003bda <strcmp>
c000b0da:	83 c4 10             	add    $0x10,%esp
c000b0dd:	84 c0                	test   %al,%al
c000b0df:	74 5f                	je     c000b140 <delete_dir_entry+0x222>
/work/x86_os_my/fs/dir.c:284
					dir_entry_cnt++;     // 统计此扇区内的目录项个数，用来判断删除目录项后是否回收该扇区
c000b0e1:	0f b6 45 ee          	movzbl -0x12(%ebp),%eax
c000b0e5:	83 c0 01             	add    $0x1,%eax
c000b0e8:	88 45 ee             	mov    %al,-0x12(%ebp)
/work/x86_os_my/fs/dir.c:286
					// 目录项的成员inode号和目标inode号一致，就将其记录在dir_entry_found！！！
					if ((dir_e + dir_entry_idx)->i_no == inode_no) {
c000b0eb:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c000b0ef:	89 d0                	mov    %edx,%eax
c000b0f1:	01 c0                	add    %eax,%eax
c000b0f3:	01 d0                	add    %edx,%eax
c000b0f5:	c1 e0 03             	shl    $0x3,%eax
c000b0f8:	89 c2                	mov    %eax,%edx
c000b0fa:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000b0fd:	01 d0                	add    %edx,%eax
c000b0ff:	8b 40 10             	mov    0x10(%eax),%eax
c000b102:	3b 45 10             	cmp    0x10(%ebp),%eax
c000b105:	75 39                	jne    c000b140 <delete_dir_entry+0x222>
/work/x86_os_my/fs/dir.c:287
						ASSERT(dir_entry_found == NULL);  // 确保目录中只有一个编号为inode_no的inode,找到一次后dir_entry_found就不再是NULL
c000b107:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c000b10b:	74 1c                	je     c000b129 <delete_dir_entry+0x20b>
/work/x86_os_my/fs/dir.c:287 (discriminator 1)
c000b10d:	68 aa f1 00 c0       	push   $0xc000f1aa
c000b112:	68 ac f2 00 c0       	push   $0xc000f2ac
c000b117:	68 1f 01 00 00       	push   $0x11f
c000b11c:	68 22 f1 00 c0       	push   $0xc000f122
c000b121:	e8 db 73 ff ff       	call   c0002501 <panic_spin>
c000b126:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:288
						dir_entry_found = dir_e + dir_entry_idx;
c000b129:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c000b12d:	89 d0                	mov    %edx,%eax
c000b12f:	01 c0                	add    %eax,%eax
c000b131:	01 d0                	add    %edx,%eax
c000b133:	c1 e0 03             	shl    $0x3,%eax
c000b136:	89 c2                	mov    %eax,%edx
c000b138:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000b13b:	01 d0                	add    %edx,%eax
c000b13d:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:293
						/* 找到后也继续遍历,统计总共的目录项数 */
					}
				}
			}
			dir_entry_idx++;
c000b140:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c000b144:	83 c0 01             	add    $0x1,%eax
c000b147:	88 45 ef             	mov    %al,-0x11(%ebp)
/work/x86_os_my/fs/dir.c:279
		memset(io_buf, 0, SECTOR_SIZE);
		/* 读取目录inode管理的各个数据块（扇区），里面是目录项 */
		ide_read(part->my_disk, all_blocks[block_idx], io_buf, 1);	//dir_e = io_buf

		/* 遍历所有的目录项，统计该扇区的目录项数量 + 是否找到要删除的目录项 */
		while (dir_entry_idx < dir_entrys_per_sec) {
c000b14a:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c000b14e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
c000b151:	0f 82 e0 fe ff ff    	jb     c000b037 <delete_dir_entry+0x119>
/work/x86_os_my/fs/dir.c:297
			}
			dir_entry_idx++;
		}

		/* 若此扇区未找到该目录项,继续在下个扇区中找 */
		if (dir_entry_found == NULL) {
c000b157:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c000b15b:	75 09                	jne    c000b166 <delete_dir_entry+0x248>
/work/x86_os_my/fs/dir.c:298
			block_idx++;
c000b15d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:299
			continue;
c000b161:	e9 09 02 00 00       	jmp    c000b36f <delete_dir_entry+0x451>
/work/x86_os_my/fs/dir.c:303
		}

		/* 在此扇区中找到目录项后，清除该目录项并判断是否回收扇区，随后退出循环直接返回 */
		ASSERT(dir_entry_cnt >= 1);	//此扇区内的目录项个数
c000b166:	80 7d ee 00          	cmpb   $0x0,-0x12(%ebp)
c000b16a:	75 1c                	jne    c000b188 <delete_dir_entry+0x26a>
/work/x86_os_my/fs/dir.c:303 (discriminator 1)
c000b16c:	68 c2 f1 00 c0       	push   $0xc000f1c2
c000b171:	68 ac f2 00 c0       	push   $0xc000f2ac
c000b176:	68 2f 01 00 00       	push   $0x12f
c000b17b:	68 22 f1 00 c0       	push   $0xc000f122
c000b180:	e8 7c 73 ff ff       	call   c0002501 <panic_spin>
c000b185:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:305
		/* 若该扇区上只有该目录项自己，则将整个扇区回收。如果目录只有第1个扇区，则不能回收 */
		if (dir_entry_cnt == 1 && !is_dir_first_block) {
c000b188:	80 7d ee 01          	cmpb   $0x1,-0x12(%ebp)
c000b18c:	0f 85 43 01 00 00    	jne    c000b2d5 <delete_dir_entry+0x3b7>
/work/x86_os_my/fs/dir.c:305 (discriminator 1)
c000b192:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c000b196:	0f 85 39 01 00 00    	jne    c000b2d5 <delete_dir_entry+0x3b7>
/work/x86_os_my/fs/dir.c:307
			/* a 在块位图中回收该块 */
			uint32_t block_bitmap_idx = all_blocks[block_idx] - part->sb->data_start_lba;
c000b19c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b19f:	8b 94 85 9c fd ff ff 	mov    -0x264(%ebp,%eax,4),%edx
c000b1a6:	8b 45 08             	mov    0x8(%ebp),%eax
c000b1a9:	8b 40 1c             	mov    0x1c(%eax),%eax
c000b1ac:	8b 40 28             	mov    0x28(%eax),%eax
c000b1af:	29 c2                	sub    %eax,%edx
c000b1b1:	89 d0                	mov    %edx,%eax
c000b1b3:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/fs/dir.c:308
			bitmap_set(&part->block_bitmap, block_bitmap_idx, 0);
c000b1b6:	8b 45 08             	mov    0x8(%ebp),%eax
c000b1b9:	83 c0 20             	add    $0x20,%eax
c000b1bc:	83 ec 04             	sub    $0x4,%esp
c000b1bf:	6a 00                	push   $0x0
c000b1c1:	ff 75 d0             	pushl  -0x30(%ebp)
c000b1c4:	50                   	push   %eax
c000b1c5:	e8 a5 75 ff ff       	call   c000276f <bitmap_set>
c000b1ca:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:309
			bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c000b1cd:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000b1d2:	83 ec 04             	sub    $0x4,%esp
c000b1d5:	6a 01                	push   $0x1
c000b1d7:	ff 75 d0             	pushl  -0x30(%ebp)
c000b1da:	50                   	push   %eax
c000b1db:	e8 54 e6 ff ff       	call   c0009834 <bitmap_sync>
c000b1e0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:312

			/* b 将块地址从数组 i_sectors 或 从一级间接索引表中去掉 */
			if (block_idx < 12) {	//直接块
c000b1e3:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
c000b1e7:	77 15                	ja     c000b1fe <delete_dir_entry+0x2e0>
/work/x86_os_my/fs/dir.c:313
				dir_inode->i_sectors[block_idx] = 0;
c000b1e9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000b1ec:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000b1ef:	83 c2 04             	add    $0x4,%edx
c000b1f2:	c7 04 90 00 00 00 00 	movl   $0x0,(%eax,%edx,4)
/work/x86_os_my/fs/dir.c:305
		}

		/* 在此扇区中找到目录项后，清除该目录项并判断是否回收扇区，随后退出循环直接返回 */
		ASSERT(dir_entry_cnt >= 1);	//此扇区内的目录项个数
		/* 若该扇区上只有该目录项自己，则将整个扇区回收。如果目录只有第1个扇区，则不能回收 */
		if (dir_entry_cnt == 1 && !is_dir_first_block) {
c000b1f9:	e9 09 01 00 00       	jmp    c000b307 <delete_dir_entry+0x3e9>
/work/x86_os_my/fs/dir.c:316
			/* b 将块地址从数组 i_sectors 或 从一级间接索引表中去掉 */
			if (block_idx < 12) {	//直接块
				dir_inode->i_sectors[block_idx] = 0;
			} else {	// 在一级间接索引表中擦除该间接块地址
				/*先判断一级间接索引表中间接块的数量：如果仅有这1个间接块，连同间接索引表所在的块一同回收 */
				uint32_t indirect_blocks = 0;
c000b1fe:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
/work/x86_os_my/fs/dir.c:317
				uint32_t indirect_block_idx = 12;
c000b205:	c7 45 cc 0c 00 00 00 	movl   $0xc,-0x34(%ebp)
/work/x86_os_my/fs/dir.c:318
				while (indirect_block_idx < 140) {
c000b20c:	eb 12                	jmp    c000b220 <delete_dir_entry+0x302>
/work/x86_os_my/fs/dir.c:319
					if (all_blocks[indirect_block_idx] != 0) {
c000b20e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c000b211:	8b 84 85 9c fd ff ff 	mov    -0x264(%ebp,%eax,4),%eax
c000b218:	85 c0                	test   %eax,%eax
c000b21a:	74 04                	je     c000b220 <delete_dir_entry+0x302>
/work/x86_os_my/fs/dir.c:320
						indirect_blocks++;	//间接块的数量
c000b21c:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
/work/x86_os_my/fs/dir.c:318
				dir_inode->i_sectors[block_idx] = 0;
			} else {	// 在一级间接索引表中擦除该间接块地址
				/*先判断一级间接索引表中间接块的数量：如果仅有这1个间接块，连同间接索引表所在的块一同回收 */
				uint32_t indirect_blocks = 0;
				uint32_t indirect_block_idx = 12;
				while (indirect_block_idx < 140) {
c000b220:	81 7d cc 8b 00 00 00 	cmpl   $0x8b,-0x34(%ebp)
c000b227:	76 e5                	jbe    c000b20e <delete_dir_entry+0x2f0>
/work/x86_os_my/fs/dir.c:323
					if (all_blocks[indirect_block_idx] != 0) {
						indirect_blocks++;	//间接块的数量
					}
				}
				ASSERT(indirect_blocks >= 1);	// 包括当前间接块
c000b229:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c000b22d:	75 1c                	jne    c000b24b <delete_dir_entry+0x32d>
/work/x86_os_my/fs/dir.c:323 (discriminator 1)
c000b22f:	68 d5 f1 00 c0       	push   $0xc000f1d5
c000b234:	68 ac f2 00 c0       	push   $0xc000f2ac
c000b239:	68 43 01 00 00       	push   $0x143
c000b23e:	68 22 f1 00 c0       	push   $0xc000f122
c000b243:	e8 b9 72 ff ff       	call   c0002501 <panic_spin>
c000b248:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:325

				if (indirect_blocks > 1) {	  // 一级间接索引表中还包括其它间接块,仅在索引表中擦除当前间接块地址
c000b24b:	83 7d e4 01          	cmpl   $0x1,-0x1c(%ebp)
c000b24f:	76 35                	jbe    c000b286 <delete_dir_entry+0x368>
/work/x86_os_my/fs/dir.c:326
					all_blocks[block_idx] = 0;
c000b251:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b254:	c7 84 85 9c fd ff ff 	movl   $0x0,-0x264(%ebp,%eax,4)
c000b25b:	00 00 00 00 
/work/x86_os_my/fs/dir.c:327
					ide_write(part->my_disk, dir_inode->i_sectors[12], all_blocks + 12, 1);
c000b25f:	8d 85 9c fd ff ff    	lea    -0x264(%ebp),%eax
c000b265:	83 c0 30             	add    $0x30,%eax
c000b268:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000b26b:	8b 4a 40             	mov    0x40(%edx),%ecx
c000b26e:	8b 55 08             	mov    0x8(%ebp),%edx
c000b271:	8b 52 08             	mov    0x8(%edx),%edx
c000b274:	6a 01                	push   $0x1
c000b276:	50                   	push   %eax
c000b277:	51                   	push   %ecx
c000b278:	52                   	push   %edx
c000b279:	e8 6b b3 ff ff       	call   c00065e9 <ide_write>
c000b27e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:305
		}

		/* 在此扇区中找到目录项后，清除该目录项并判断是否回收扇区，随后退出循环直接返回 */
		ASSERT(dir_entry_cnt >= 1);	//此扇区内的目录项个数
		/* 若该扇区上只有该目录项自己，则将整个扇区回收。如果目录只有第1个扇区，则不能回收 */
		if (dir_entry_cnt == 1 && !is_dir_first_block) {
c000b281:	e9 81 00 00 00       	jmp    c000b307 <delete_dir_entry+0x3e9>
/work/x86_os_my/fs/dir.c:330
				if (indirect_blocks > 1) {	  // 一级间接索引表中还包括其它间接块,仅在索引表中擦除当前间接块地址
					all_blocks[block_idx] = 0;
					ide_write(part->my_disk, dir_inode->i_sectors[12], all_blocks + 12, 1);
				} else {	// 间接索引表中就当前这1个间接块,直接把间接索引表所在的块回收,然后擦除间接索引表块地址
					/* 回收一级间接索引表所在的块 */
					block_bitmap_idx = dir_inode->i_sectors[12] - part->sb->data_start_lba;
c000b286:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000b289:	8b 50 40             	mov    0x40(%eax),%edx
c000b28c:	8b 45 08             	mov    0x8(%ebp),%eax
c000b28f:	8b 40 1c             	mov    0x1c(%eax),%eax
c000b292:	8b 40 28             	mov    0x28(%eax),%eax
c000b295:	29 c2                	sub    %eax,%edx
c000b297:	89 d0                	mov    %edx,%eax
c000b299:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/fs/dir.c:331
					bitmap_set(&part->block_bitmap, block_bitmap_idx, 0);
c000b29c:	8b 45 08             	mov    0x8(%ebp),%eax
c000b29f:	83 c0 20             	add    $0x20,%eax
c000b2a2:	83 ec 04             	sub    $0x4,%esp
c000b2a5:	6a 00                	push   $0x0
c000b2a7:	ff 75 d0             	pushl  -0x30(%ebp)
c000b2aa:	50                   	push   %eax
c000b2ab:	e8 bf 74 ff ff       	call   c000276f <bitmap_set>
c000b2b0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:332
					bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c000b2b3:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000b2b8:	83 ec 04             	sub    $0x4,%esp
c000b2bb:	6a 01                	push   $0x1
c000b2bd:	ff 75 d0             	pushl  -0x30(%ebp)
c000b2c0:	50                   	push   %eax
c000b2c1:	e8 6e e5 ff ff       	call   c0009834 <bitmap_sync>
c000b2c6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:335

					/* 将间接索引表地址清0 */
					dir_inode->i_sectors[12] = 0;
c000b2c9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000b2cc:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)
/work/x86_os_my/fs/dir.c:305
		}

		/* 在此扇区中找到目录项后，清除该目录项并判断是否回收扇区，随后退出循环直接返回 */
		ASSERT(dir_entry_cnt >= 1);	//此扇区内的目录项个数
		/* 若该扇区上只有该目录项自己，则将整个扇区回收。如果目录只有第1个扇区，则不能回收 */
		if (dir_entry_cnt == 1 && !is_dir_first_block) {
c000b2d3:	eb 32                	jmp    c000b307 <delete_dir_entry+0x3e9>
/work/x86_os_my/fs/dir.c:340
					dir_inode->i_sectors[12] = 0;
				}
			}
		} else {
		/* 仅将该目录项清空 */
			memset(dir_entry_found, 0, dir_entry_size);	//要删除的目录项在 dir_entry_found 中
c000b2d5:	83 ec 04             	sub    $0x4,%esp
c000b2d8:	ff 75 dc             	pushl  -0x24(%ebp)
c000b2db:	6a 00                	push   $0x0
c000b2dd:	ff 75 f0             	pushl  -0x10(%ebp)
c000b2e0:	e8 20 87 ff ff       	call   c0003a05 <memset>
c000b2e5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:341
			ide_write(part->my_disk, all_blocks[block_idx], io_buf, 1);	//io_buf中是所有的目录项
c000b2e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b2eb:	8b 94 85 9c fd ff ff 	mov    -0x264(%ebp,%eax,4),%edx
c000b2f2:	8b 45 08             	mov    0x8(%ebp),%eax
c000b2f5:	8b 40 08             	mov    0x8(%eax),%eax
c000b2f8:	6a 01                	push   $0x1
c000b2fa:	ff 75 14             	pushl  0x14(%ebp)
c000b2fd:	52                   	push   %edx
c000b2fe:	50                   	push   %eax
c000b2ff:	e8 e5 b2 ff ff       	call   c00065e9 <ide_write>
c000b304:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:345
		}

		/* 更新inode信息并同步到硬盘 */
		ASSERT(dir_inode->i_size >= dir_entry_size);
c000b307:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000b30a:	8b 40 04             	mov    0x4(%eax),%eax
c000b30d:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c000b310:	73 1c                	jae    c000b32e <delete_dir_entry+0x410>
/work/x86_os_my/fs/dir.c:345 (discriminator 1)
c000b312:	68 ec f1 00 c0       	push   $0xc000f1ec
c000b317:	68 ac f2 00 c0       	push   $0xc000f2ac
c000b31c:	68 59 01 00 00       	push   $0x159
c000b321:	68 22 f1 00 c0       	push   $0xc000f122
c000b326:	e8 d6 71 ff ff       	call   c0002501 <panic_spin>
c000b32b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:346
		dir_inode->i_size -= dir_entry_size;
c000b32e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000b331:	8b 40 04             	mov    0x4(%eax),%eax
c000b334:	2b 45 dc             	sub    -0x24(%ebp),%eax
c000b337:	89 c2                	mov    %eax,%edx
c000b339:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000b33c:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/dir.c:347
		memset(io_buf, 0, SECTOR_SIZE * 2);
c000b33f:	83 ec 04             	sub    $0x4,%esp
c000b342:	68 00 04 00 00       	push   $0x400
c000b347:	6a 00                	push   $0x0
c000b349:	ff 75 14             	pushl  0x14(%ebp)
c000b34c:	e8 b4 86 ff ff       	call   c0003a05 <memset>
c000b351:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:349
		// 同步目录文件的inode到硬盘
		inode_sync(part, dir_inode, io_buf);
c000b354:	83 ec 04             	sub    $0x4,%esp
c000b357:	ff 75 14             	pushl  0x14(%ebp)
c000b35a:	ff 75 e0             	pushl  -0x20(%ebp)
c000b35d:	ff 75 08             	pushl  0x8(%ebp)
c000b360:	e8 ea dc ff ff       	call   c000904f <inode_sync>
c000b365:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:351

		return true;
c000b368:	b8 01 00 00 00       	mov    $0x1,%eax
c000b36d:	eb 12                	jmp    c000b381 <delete_dir_entry+0x463>
/work/x86_os_my/fs/dir.c:267
	uint8_t dir_entry_idx, dir_entry_cnt;
	bool is_dir_first_block = false;	// 目录的第1个块

	/* 遍历所有块，寻找目录项 */
	block_idx = 0;
	while (block_idx < 140) {
c000b36f:	81 7d f4 8b 00 00 00 	cmpl   $0x8b,-0xc(%ebp)
c000b376:	0f 86 59 fc ff ff    	jbe    c000afd5 <delete_dir_entry+0xb7>
/work/x86_os_my/fs/dir.c:355

		return true;
	}//while (block_idx < 140)

	/* 所有块中未找到则返回false，若出现这种情况应该是 serarch_file 出错了 */
	return false;
c000b37c:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/dir.c:356 (discriminator 1)
}
c000b381:	8b 7d fc             	mov    -0x4(%ebp),%edi
c000b384:	c9                   	leave  
c000b385:	c3                   	ret    

c000b386 <dir_read>:
dir_read():
/work/x86_os_my/fs/dir.c:361


/* 读取目录,成功返回1个目录项,失败返回NULL */
// dir->dir_pos 记录遍历目录时，"游标"在目录内的偏移【以前读到的目录项】
struct dir_entry* dir_read(struct dir* dir) {
c000b386:	55                   	push   %ebp
c000b387:	89 e5                	mov    %esp,%ebp
c000b389:	57                   	push   %edi
c000b38a:	81 ec 54 02 00 00    	sub    $0x254,%esp
/work/x86_os_my/fs/dir.c:362
	struct dir_entry* dir_e = (struct dir_entry*)dir->dir_buf;
c000b390:	8b 45 08             	mov    0x8(%ebp),%eax
c000b393:	83 c0 08             	add    $0x8,%eax
c000b396:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/dir.c:363
	struct inode* dir_inode = dir->inode;
c000b399:	8b 45 08             	mov    0x8(%ebp),%eax
c000b39c:	8b 00                	mov    (%eax),%eax
c000b39e:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/dir.c:364
	uint32_t all_blocks[140] = {0}, block_cnt = 12;
c000b3a1:	8d 95 a8 fd ff ff    	lea    -0x258(%ebp),%edx
c000b3a7:	b8 00 00 00 00       	mov    $0x0,%eax
c000b3ac:	b9 8c 00 00 00       	mov    $0x8c,%ecx
c000b3b1:	89 d7                	mov    %edx,%edi
c000b3b3:	f3 ab                	rep stos %eax,%es:(%edi)
c000b3b5:	c7 45 f4 0c 00 00 00 	movl   $0xc,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:365
	uint32_t block_idx = 0, dir_entry_idx = 0;
c000b3bc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c000b3c3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:367
	// 所有数据块的地址，汇集到 all_blocks 中
	while (block_idx < 12) {
c000b3ca:	eb 1a                	jmp    c000b3e6 <dir_read+0x60>
/work/x86_os_my/fs/dir.c:368
		all_blocks[block_idx] = dir_inode->i_sectors[block_idx];
c000b3cc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000b3cf:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000b3d2:	83 c2 04             	add    $0x4,%edx
c000b3d5:	8b 14 90             	mov    (%eax,%edx,4),%edx
c000b3d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b3db:	89 94 85 a8 fd ff ff 	mov    %edx,-0x258(%ebp,%eax,4)
/work/x86_os_my/fs/dir.c:369
		block_idx++;
c000b3e2:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:367
	struct dir_entry* dir_e = (struct dir_entry*)dir->dir_buf;
	struct inode* dir_inode = dir->inode;
	uint32_t all_blocks[140] = {0}, block_cnt = 12;
	uint32_t block_idx = 0, dir_entry_idx = 0;
	// 所有数据块的地址，汇集到 all_blocks 中
	while (block_idx < 12) {
c000b3e6:	83 7d f0 0b          	cmpl   $0xb,-0x10(%ebp)
c000b3ea:	76 e0                	jbe    c000b3cc <dir_read+0x46>
/work/x86_os_my/fs/dir.c:371
		all_blocks[block_idx] = dir_inode->i_sectors[block_idx];
		block_idx++;
	}
	if (dir_inode->i_sectors[12] != 0) {
c000b3ec:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000b3ef:	8b 40 40             	mov    0x40(%eax),%eax
c000b3f2:	85 c0                	test   %eax,%eax
c000b3f4:	74 2c                	je     c000b422 <dir_read+0x9c>
/work/x86_os_my/fs/dir.c:372
		ide_read(cur_part->my_disk, dir_inode->i_sectors[12], all_blocks + 12, 1);
c000b3f6:	8d 85 a8 fd ff ff    	lea    -0x258(%ebp),%eax
c000b3fc:	83 c0 30             	add    $0x30,%eax
c000b3ff:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000b402:	8b 4a 40             	mov    0x40(%edx),%ecx
c000b405:	8b 15 d0 4a 01 c0    	mov    0xc0014ad0,%edx
c000b40b:	8b 52 08             	mov    0x8(%edx),%edx
c000b40e:	6a 01                	push   $0x1
c000b410:	50                   	push   %eax
c000b411:	51                   	push   %ecx
c000b412:	52                   	push   %edx
c000b413:	e8 5d b0 ff ff       	call   c0006475 <ide_read>
c000b418:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:373
		block_cnt = 140;
c000b41b:	c7 45 f4 8c 00 00 00 	movl   $0x8c,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:375
	}
	block_idx = 0;
c000b422:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:377

	uint32_t cur_dir_entry_pos = 0;	// 当前目录项的偏移,此项用来判断是否是之前已经返回过的目录项
c000b429:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
/work/x86_os_my/fs/dir.c:378
	uint32_t dir_entry_size = cur_part->sb->dir_entry_size;
c000b430:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000b435:	8b 40 1c             	mov    0x1c(%eax),%eax
c000b438:	8b 40 30             	mov    0x30(%eax),%eax
c000b43b:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:379
	uint32_t dir_entrys_per_sec = SECTOR_SIZE / dir_entry_size;	// 1扇区内可容纳的目录项个数
c000b43e:	b8 00 02 00 00       	mov    $0x200,%eax
c000b443:	ba 00 00 00 00       	mov    $0x0,%edx
c000b448:	f7 75 dc             	divl   -0x24(%ebp)
c000b44b:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/dir.c:381
	/* 因为此目录内可能删除了某些文件或子目录,所以要遍历所有块 */
	while (block_idx < block_cnt) {
c000b44e:	e9 05 01 00 00       	jmp    c000b558 <dir_read+0x1d2>
/work/x86_os_my/fs/dir.c:382
		if (dir->dir_pos >= dir_inode->i_size) {	//dir_pos 记录遍历目录时，"游标"在目录内的偏移
c000b453:	8b 45 08             	mov    0x8(%ebp),%eax
c000b456:	8b 50 04             	mov    0x4(%eax),%edx
c000b459:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000b45c:	8b 40 04             	mov    0x4(%eax),%eax
c000b45f:	39 c2                	cmp    %eax,%edx
c000b461:	72 0a                	jb     c000b46d <dir_read+0xe7>
/work/x86_os_my/fs/dir.c:383
			return NULL;
c000b463:	b8 00 00 00 00       	mov    $0x0,%eax
c000b468:	e9 fc 00 00 00       	jmp    c000b569 <dir_read+0x1e3>
/work/x86_os_my/fs/dir.c:385
		}
		if (all_blocks[block_idx] == 0) {	// 如果此块地址为0,即空块,继续读出下一块
c000b46d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b470:	8b 84 85 a8 fd ff ff 	mov    -0x258(%ebp,%eax,4),%eax
c000b477:	85 c0                	test   %eax,%eax
c000b479:	75 09                	jne    c000b484 <dir_read+0xfe>
/work/x86_os_my/fs/dir.c:386
			block_idx++;
c000b47b:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:387
			continue;
c000b47f:	e9 d4 00 00 00       	jmp    c000b558 <dir_read+0x1d2>
/work/x86_os_my/fs/dir.c:389
		}
		memset(dir_e, 0, SECTOR_SIZE);
c000b484:	83 ec 04             	sub    $0x4,%esp
c000b487:	68 00 02 00 00       	push   $0x200
c000b48c:	6a 00                	push   $0x0
c000b48e:	ff 75 e4             	pushl  -0x1c(%ebp)
c000b491:	e8 6f 85 ff ff       	call   c0003a05 <memset>
c000b496:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:390
		ide_read(cur_part->my_disk, all_blocks[block_idx], dir_e, 1);
c000b499:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b49c:	8b 94 85 a8 fd ff ff 	mov    -0x258(%ebp,%eax,4),%edx
c000b4a3:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000b4a8:	8b 40 08             	mov    0x8(%eax),%eax
c000b4ab:	6a 01                	push   $0x1
c000b4ad:	ff 75 e4             	pushl  -0x1c(%ebp)
c000b4b0:	52                   	push   %edx
c000b4b1:	50                   	push   %eax
c000b4b2:	e8 be af ff ff       	call   c0006475 <ide_read>
c000b4b7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:391
		dir_entry_idx = 0;
c000b4ba:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:393
		/* 遍历扇区内所有目录项 */
		while (dir_entry_idx < dir_entrys_per_sec) {
c000b4c1:	e9 82 00 00 00       	jmp    c000b548 <dir_read+0x1c2>
/work/x86_os_my/fs/dir.c:394
			if ((dir_e + dir_entry_idx)->f_type) {	 // 如果f_type不等于0,即不等于FT_UNKNOWN
c000b4c6:	8b 55 ec             	mov    -0x14(%ebp),%edx
c000b4c9:	89 d0                	mov    %edx,%eax
c000b4cb:	01 c0                	add    %eax,%eax
c000b4cd:	01 d0                	add    %edx,%eax
c000b4cf:	c1 e0 03             	shl    $0x3,%eax
c000b4d2:	89 c2                	mov    %eax,%edx
c000b4d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000b4d7:	01 d0                	add    %edx,%eax
c000b4d9:	8b 40 14             	mov    0x14(%eax),%eax
c000b4dc:	85 c0                	test   %eax,%eax
c000b4de:	74 64                	je     c000b544 <dir_read+0x1be>
/work/x86_os_my/fs/dir.c:396
				/* 判断是不是最新的目录项,避免返回曾经已经返回过的目录项 */
				if (cur_dir_entry_pos < dir->dir_pos) {
c000b4e0:	8b 45 08             	mov    0x8(%ebp),%eax
c000b4e3:	8b 40 04             	mov    0x4(%eax),%eax
c000b4e6:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c000b4e9:	76 0c                	jbe    c000b4f7 <dir_read+0x171>
/work/x86_os_my/fs/dir.c:397
					cur_dir_entry_pos += dir_entry_size;
c000b4eb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000b4ee:	01 45 e8             	add    %eax,-0x18(%ebp)
/work/x86_os_my/fs/dir.c:398
					dir_entry_idx++;
c000b4f1:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:399
					continue;
c000b4f5:	eb 51                	jmp    c000b548 <dir_read+0x1c2>
/work/x86_os_my/fs/dir.c:401
				}
				ASSERT(cur_dir_entry_pos == dir->dir_pos);
c000b4f7:	8b 45 08             	mov    0x8(%ebp),%eax
c000b4fa:	8b 40 04             	mov    0x4(%eax),%eax
c000b4fd:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c000b500:	74 1c                	je     c000b51e <dir_read+0x198>
/work/x86_os_my/fs/dir.c:401 (discriminator 1)
c000b502:	68 10 f2 00 c0       	push   $0xc000f210
c000b507:	68 c0 f2 00 c0       	push   $0xc000f2c0
c000b50c:	68 91 01 00 00       	push   $0x191
c000b511:	68 22 f1 00 c0       	push   $0xc000f122
c000b516:	e8 e6 6f ff ff       	call   c0002501 <panic_spin>
c000b51b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:402
				dir->dir_pos += dir_entry_size;	      // 更新为新位置,即下一个返回的目录项地址
c000b51e:	8b 45 08             	mov    0x8(%ebp),%eax
c000b521:	8b 50 04             	mov    0x4(%eax),%edx
c000b524:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000b527:	01 c2                	add    %eax,%edx
c000b529:	8b 45 08             	mov    0x8(%ebp),%eax
c000b52c:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/dir.c:403
				return dir_e + dir_entry_idx;
c000b52f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c000b532:	89 d0                	mov    %edx,%eax
c000b534:	01 c0                	add    %eax,%eax
c000b536:	01 d0                	add    %edx,%eax
c000b538:	c1 e0 03             	shl    $0x3,%eax
c000b53b:	89 c2                	mov    %eax,%edx
c000b53d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000b540:	01 d0                	add    %edx,%eax
c000b542:	eb 25                	jmp    c000b569 <dir_read+0x1e3>
/work/x86_os_my/fs/dir.c:405
			}
			dir_entry_idx++;
c000b544:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:393
		}
		memset(dir_e, 0, SECTOR_SIZE);
		ide_read(cur_part->my_disk, all_blocks[block_idx], dir_e, 1);
		dir_entry_idx = 0;
		/* 遍历扇区内所有目录项 */
		while (dir_entry_idx < dir_entrys_per_sec) {
c000b548:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000b54b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
c000b54e:	0f 82 72 ff ff ff    	jb     c000b4c6 <dir_read+0x140>
/work/x86_os_my/fs/dir.c:407
				dir->dir_pos += dir_entry_size;	      // 更新为新位置,即下一个返回的目录项地址
				return dir_e + dir_entry_idx;
			}
			dir_entry_idx++;
		}
		block_idx++;
c000b554:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:381

	uint32_t cur_dir_entry_pos = 0;	// 当前目录项的偏移,此项用来判断是否是之前已经返回过的目录项
	uint32_t dir_entry_size = cur_part->sb->dir_entry_size;
	uint32_t dir_entrys_per_sec = SECTOR_SIZE / dir_entry_size;	// 1扇区内可容纳的目录项个数
	/* 因为此目录内可能删除了某些文件或子目录,所以要遍历所有块 */
	while (block_idx < block_cnt) {
c000b558:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b55b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c000b55e:	0f 82 ef fe ff ff    	jb     c000b453 <dir_read+0xcd>
/work/x86_os_my/fs/dir.c:409
			}
			dir_entry_idx++;
		}
		block_idx++;
	}
	return NULL;
c000b564:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/dir.c:410 (discriminator 1)
}
c000b569:	8b 7d fc             	mov    -0x4(%ebp),%edi
c000b56c:	c9                   	leave  
c000b56d:	c3                   	ret    

c000b56e <dir_is_empty>:
dir_is_empty():
/work/x86_os_my/fs/dir.c:413

/* 判断目录是否为空 */
bool dir_is_empty(struct dir* dir) {
c000b56e:	55                   	push   %ebp
c000b56f:	89 e5                	mov    %esp,%ebp
c000b571:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/fs/dir.c:414
	struct inode* dir_inode = dir->inode;
c000b574:	8b 45 08             	mov    0x8(%ebp),%eax
c000b577:	8b 00                	mov    (%eax),%eax
c000b579:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/fs/dir.c:416
	/* 若目录下只有.和..这两个目录项则目录为空 */
	return (dir_inode->i_size == cur_part->sb->dir_entry_size * 2);
c000b57c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000b57f:	8b 50 04             	mov    0x4(%eax),%edx
c000b582:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000b587:	8b 40 1c             	mov    0x1c(%eax),%eax
c000b58a:	8b 40 30             	mov    0x30(%eax),%eax
c000b58d:	01 c0                	add    %eax,%eax
c000b58f:	39 c2                	cmp    %eax,%edx
c000b591:	0f 94 c0             	sete   %al
c000b594:	0f b6 c0             	movzbl %al,%eax
/work/x86_os_my/fs/dir.c:417
}
c000b597:	c9                   	leave  
c000b598:	c3                   	ret    

c000b599 <dir_remove>:
dir_remove():
/work/x86_os_my/fs/dir.c:420

/* 在父目录parent_dir中删除child_dir */
int32_t dir_remove(struct dir* parent_dir, struct dir* child_dir) {
c000b599:	55                   	push   %ebp
c000b59a:	89 e5                	mov    %esp,%ebp
c000b59c:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/dir.c:421
	struct inode* child_dir_inode  = child_dir->inode;
c000b59f:	8b 45 0c             	mov    0xc(%ebp),%eax
c000b5a2:	8b 00                	mov    (%eax),%eax
c000b5a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:423
	/* 空目录只在inode->i_sectors[0]中有扇区,其它扇区都应该为空 */
	int32_t block_idx = 1;
c000b5a7:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:424
	while (block_idx < 13) {
c000b5ae:	eb 30                	jmp    c000b5e0 <dir_remove+0x47>
/work/x86_os_my/fs/dir.c:425
		ASSERT(child_dir_inode->i_sectors[block_idx] == 0);
c000b5b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b5b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000b5b6:	83 c2 04             	add    $0x4,%edx
c000b5b9:	8b 04 90             	mov    (%eax,%edx,4),%eax
c000b5bc:	85 c0                	test   %eax,%eax
c000b5be:	74 1c                	je     c000b5dc <dir_remove+0x43>
/work/x86_os_my/fs/dir.c:425 (discriminator 1)
c000b5c0:	68 34 f2 00 c0       	push   $0xc000f234
c000b5c5:	68 cc f2 00 c0       	push   $0xc000f2cc
c000b5ca:	68 a9 01 00 00       	push   $0x1a9
c000b5cf:	68 22 f1 00 c0       	push   $0xc000f122
c000b5d4:	e8 28 6f ff ff       	call   c0002501 <panic_spin>
c000b5d9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:426
		block_idx++;
c000b5dc:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:424
/* 在父目录parent_dir中删除child_dir */
int32_t dir_remove(struct dir* parent_dir, struct dir* child_dir) {
	struct inode* child_dir_inode  = child_dir->inode;
	/* 空目录只在inode->i_sectors[0]中有扇区,其它扇区都应该为空 */
	int32_t block_idx = 1;
	while (block_idx < 13) {
c000b5e0:	83 7d f4 0c          	cmpl   $0xc,-0xc(%ebp)
c000b5e4:	7e ca                	jle    c000b5b0 <dir_remove+0x17>
/work/x86_os_my/fs/dir.c:428
		ASSERT(child_dir_inode->i_sectors[block_idx] == 0);
		block_idx++;
	}
	void* io_buf = sys_malloc(SECTOR_SIZE * 2);
c000b5e6:	83 ec 0c             	sub    $0xc,%esp
c000b5e9:	68 00 04 00 00       	push   $0x400
c000b5ee:	e8 b9 78 ff ff       	call   c0002eac <sys_malloc>
c000b5f3:	83 c4 10             	add    $0x10,%esp
c000b5f6:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:429
	if (io_buf == NULL) {
c000b5f9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c000b5fd:	75 17                	jne    c000b616 <dir_remove+0x7d>
/work/x86_os_my/fs/dir.c:430
		printk("dir_remove: malloc for io_buf failed\n");
c000b5ff:	83 ec 0c             	sub    $0xc,%esp
c000b602:	68 60 f2 00 c0       	push   $0xc000f260
c000b607:	e8 e2 b8 ff ff       	call   c0006eee <printk>
c000b60c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:431
		return -1;
c000b60f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000b614:	eb 44                	jmp    c000b65a <dir_remove+0xc1>
/work/x86_os_my/fs/dir.c:435
	}

	/* 在父目录parent_dir中删除子目录child_dir对应的"目录项" */
	delete_dir_entry(cur_part, parent_dir, child_dir_inode->i_no, io_buf);
c000b616:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b619:	8b 10                	mov    (%eax),%edx
c000b61b:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000b620:	ff 75 ec             	pushl  -0x14(%ebp)
c000b623:	52                   	push   %edx
c000b624:	ff 75 08             	pushl  0x8(%ebp)
c000b627:	50                   	push   %eax
c000b628:	e8 f1 f8 ff ff       	call   c000af1e <delete_dir_entry>
c000b62d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:438

	/* 回收inode中i_secotrs中所占用的扇区,并同步inode_bitmap和block_bitmap */
	inode_release(cur_part, child_dir_inode->i_no);
c000b630:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b633:	8b 10                	mov    (%eax),%edx
c000b635:	a1 d0 4a 01 c0       	mov    0xc0014ad0,%eax
c000b63a:	83 ec 08             	sub    $0x8,%esp
c000b63d:	52                   	push   %edx
c000b63e:	50                   	push   %eax
c000b63f:	e8 06 de ff ff       	call   c000944a <inode_release>
c000b644:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:439
	sys_free(io_buf);
c000b647:	83 ec 0c             	sub    $0xc,%esp
c000b64a:	ff 75 ec             	pushl  -0x14(%ebp)
c000b64d:	e8 87 7e ff ff       	call   c00034d9 <sys_free>
c000b652:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:440
	return 0;
c000b655:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/dir.c:441
}
c000b65a:	c9                   	leave  
c000b65b:	c3                   	ret    

c000b65c <copy_pcb_vaddrbitmap_stack0>:
copy_pcb_vaddrbitmap_stack0():
/work/x86_os_my/userprog/fork.c:13
#include "file.h"

extern void intr_exit(void);

/* 将父进程的pcb、虚拟地址位图拷贝给子进程 */
static int32_t copy_pcb_vaddrbitmap_stack0(struct task_struct* child_thread, struct task_struct* parent_thread) {
c000b65c:	55                   	push   %ebp
c000b65d:	89 e5                	mov    %esp,%ebp
c000b65f:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/fork.c:17
	/* a 复制pcb所在的整个页,里面包含进程pcb信息 + 0特权级的栈
	栈里面包含了返回地址
	然后再单独修改个别部分 */
	memcpy(child_thread, parent_thread, PG_SIZE);
c000b662:	83 ec 04             	sub    $0x4,%esp
c000b665:	68 00 10 00 00       	push   $0x1000
c000b66a:	ff 75 0c             	pushl  0xc(%ebp)
c000b66d:	ff 75 08             	pushl  0x8(%ebp)
c000b670:	e8 e2 83 ff ff       	call   c0003a57 <memcpy>
c000b675:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:19
	// 初始化PCB部分
	child_thread->pid = fork_pid();
c000b678:	e8 9c 88 ff ff       	call   c0003f19 <fork_pid>
c000b67d:	89 c2                	mov    %eax,%edx
c000b67f:	8b 45 08             	mov    0x8(%ebp),%eax
c000b682:	66 89 50 04          	mov    %dx,0x4(%eax)
/work/x86_os_my/userprog/fork.c:20
	child_thread->elapsed_ticks = 0;
c000b686:	8b 45 08             	mov    0x8(%ebp),%eax
c000b689:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
/work/x86_os_my/userprog/fork.c:21
	child_thread->status = TASK_READY;
c000b690:	8b 45 08             	mov    0x8(%ebp),%eax
c000b693:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/userprog/fork.c:22
	child_thread->ticks = child_thread->priority;   // 为新进程把时间片充满
c000b69a:	8b 45 08             	mov    0x8(%ebp),%eax
c000b69d:	0f b6 50 1c          	movzbl 0x1c(%eax),%edx
c000b6a1:	8b 45 08             	mov    0x8(%ebp),%eax
c000b6a4:	88 50 1d             	mov    %dl,0x1d(%eax)
/work/x86_os_my/userprog/fork.c:23
	child_thread->parent_pid = parent_thread->pid;
c000b6a7:	8b 45 0c             	mov    0xc(%ebp),%eax
c000b6aa:	0f b7 50 04          	movzwl 0x4(%eax),%edx
c000b6ae:	8b 45 08             	mov    0x8(%ebp),%eax
c000b6b1:	66 89 90 10 01 00 00 	mov    %dx,0x110(%eax)
/work/x86_os_my/userprog/fork.c:24
	child_thread->general_tag.prev = child_thread->general_tag.next = NULL;
c000b6b8:	8b 45 08             	mov    0x8(%ebp),%eax
c000b6bb:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
c000b6c2:	8b 45 08             	mov    0x8(%ebp),%eax
c000b6c5:	8b 50 48             	mov    0x48(%eax),%edx
c000b6c8:	8b 45 08             	mov    0x8(%ebp),%eax
c000b6cb:	89 50 44             	mov    %edx,0x44(%eax)
/work/x86_os_my/userprog/fork.c:25
	child_thread->all_list_tag.prev = child_thread->all_list_tag.next = NULL;
c000b6ce:	8b 45 08             	mov    0x8(%ebp),%eax
c000b6d1:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
c000b6d8:	8b 45 08             	mov    0x8(%ebp),%eax
c000b6db:	8b 50 50             	mov    0x50(%eax),%edx
c000b6de:	8b 45 08             	mov    0x8(%ebp),%eax
c000b6e1:	89 50 4c             	mov    %edx,0x4c(%eax)
/work/x86_os_my/userprog/fork.c:27
	// 子进程内存块（堆内存）
	block_desc_init(child_thread->u_block_desc);
c000b6e4:	8b 45 08             	mov    0x8(%ebp),%eax
c000b6e7:	83 c0 64             	add    $0x64,%eax
c000b6ea:	83 ec 0c             	sub    $0xc,%esp
c000b6ed:	50                   	push   %eax
c000b6ee:	e8 cc 81 ff ff       	call   c00038bf <block_desc_init>
c000b6f3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:29
	/* b 复制父进程的虚拟地址池的位图  可执行程序入口地址：USER_VADDR_START==0x8048000 */
	uint32_t bitmap_pg_cnt = DIV_ROUND_UP((0xc0000000 - USER_VADDR_START) / PG_SIZE / 8 , PG_SIZE);
c000b6f6:	c7 45 f4 17 00 00 00 	movl   $0x17,-0xc(%ebp)
/work/x86_os_my/userprog/fork.c:30
	void* vaddr_btmp = get_kernel_pages(bitmap_pg_cnt);
c000b6fd:	83 ec 0c             	sub    $0xc,%esp
c000b700:	ff 75 f4             	pushl  -0xc(%ebp)
c000b703:	e8 a1 74 ff ff       	call   c0002ba9 <get_kernel_pages>
c000b708:	83 c4 10             	add    $0x10,%esp
c000b70b:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/fork.c:31
	if (vaddr_btmp == NULL)
c000b70e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c000b712:	75 07                	jne    c000b71b <copy_pcb_vaddrbitmap_stack0+0xbf>
/work/x86_os_my/userprog/fork.c:32
		return -1;
c000b714:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000b719:	eb 2c                	jmp    c000b747 <copy_pcb_vaddrbitmap_stack0+0xeb>
/work/x86_os_my/userprog/fork.c:35
	/* 此时child_thread->userprog_vaddr.vaddr_bitmap.bits还是指向父进程虚拟地址的位图地址
	 * 下面将child_thread->userprog_vaddr.vaddr_bitmap.bits指向自己的位图vaddr_btmp */
	memcpy(vaddr_btmp, child_thread->userprog_vaddr.vaddr_bitmap.bits, bitmap_pg_cnt * PG_SIZE);	//复制父进程的虚拟地址位图
c000b71b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b71e:	c1 e0 0c             	shl    $0xc,%eax
c000b721:	89 c2                	mov    %eax,%edx
c000b723:	8b 45 08             	mov    0x8(%ebp),%eax
c000b726:	8b 40 5c             	mov    0x5c(%eax),%eax
c000b729:	83 ec 04             	sub    $0x4,%esp
c000b72c:	52                   	push   %edx
c000b72d:	50                   	push   %eax
c000b72e:	ff 75 f0             	pushl  -0x10(%ebp)
c000b731:	e8 21 83 ff ff       	call   c0003a57 <memcpy>
c000b736:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:36
	child_thread->userprog_vaddr.vaddr_bitmap.bits = vaddr_btmp;	//指向子进程自己的了
c000b739:	8b 45 08             	mov    0x8(%ebp),%eax
c000b73c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000b73f:	89 50 5c             	mov    %edx,0x5c(%eax)
/work/x86_os_my/userprog/fork.c:40
	/* 调试用 */
//	ASSERT(strlen(child_thread->name) < 11);	// pcb.name的长度是16,为避免下面strcat越界
//	strcat(child_thread->name,"_fork");
	return 0;
c000b742:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/userprog/fork.c:41
}
c000b747:	c9                   	leave  
c000b748:	c3                   	ret    

c000b749 <copy_body_stack3>:
copy_body_stack3():
/work/x86_os_my/userprog/fork.c:74
+----------------------+
|          text        |
+----------------------+ 0
    C程序内存布局
*/
static void copy_body_stack3(struct task_struct* child_thread, struct task_struct* parent_thread, void* buf_page) {
c000b749:	55                   	push   %ebp
c000b74a:	89 e5                	mov    %esp,%ebp
c000b74c:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/userprog/fork.c:75
	uint8_t* vaddr_btmp = parent_thread->userprog_vaddr.vaddr_bitmap.bits;
c000b74f:	8b 45 0c             	mov    0xc(%ebp),%eax
c000b752:	8b 40 5c             	mov    0x5c(%eax),%eax
c000b755:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/userprog/fork.c:76
	uint32_t btmp_bytes_len = parent_thread->userprog_vaddr.vaddr_bitmap.btmp_bytes_len;
c000b758:	8b 45 0c             	mov    0xc(%ebp),%eax
c000b75b:	8b 40 58             	mov    0x58(%eax),%eax
c000b75e:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/userprog/fork.c:77
	uint32_t vaddr_start = parent_thread->userprog_vaddr.vaddr_start;
c000b761:	8b 45 0c             	mov    0xc(%ebp),%eax
c000b764:	8b 40 60             	mov    0x60(%eax),%eax
c000b767:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/userprog/fork.c:78
	uint32_t idx_byte = 0;
c000b76a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/userprog/fork.c:79
	uint32_t idx_bit = 0;
c000b771:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/userprog/fork.c:80
	uint32_t prog_vaddr = 0;
c000b778:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
/work/x86_os_my/userprog/fork.c:83

	/* 在父进程的用户空间中查找已有数据的页，按页一一拷贝给子进程 */
	while (idx_byte < btmp_bytes_len) {
c000b77f:	e9 c5 00 00 00       	jmp    c000b849 <copy_body_stack3+0x100>
/work/x86_os_my/userprog/fork.c:84
		if (vaddr_btmp[idx_byte]) {
c000b784:	8b 55 ec             	mov    -0x14(%ebp),%edx
c000b787:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b78a:	01 d0                	add    %edx,%eax
c000b78c:	0f b6 00             	movzbl (%eax),%eax
c000b78f:	84 c0                	test   %al,%al
c000b791:	0f 84 ae 00 00 00    	je     c000b845 <copy_body_stack3+0xfc>
/work/x86_os_my/userprog/fork.c:85
			idx_bit = 0;
c000b797:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/userprog/fork.c:86
			while (idx_bit < 8) {
c000b79e:	e9 98 00 00 00       	jmp    c000b83b <copy_body_stack3+0xf2>
/work/x86_os_my/userprog/fork.c:87
				if ((BITMAP_MASK << idx_bit) & vaddr_btmp[idx_byte]) {	//BITMAP_MASK=1
c000b7a3:	8b 55 ec             	mov    -0x14(%ebp),%edx
c000b7a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b7a9:	01 d0                	add    %edx,%eax
c000b7ab:	0f b6 00             	movzbl (%eax),%eax
c000b7ae:	0f b6 d0             	movzbl %al,%edx
c000b7b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b7b4:	89 c1                	mov    %eax,%ecx
c000b7b6:	d3 fa                	sar    %cl,%edx
c000b7b8:	89 d0                	mov    %edx,%eax
c000b7ba:	83 e0 01             	and    $0x1,%eax
c000b7bd:	85 c0                	test   %eax,%eax
c000b7bf:	74 76                	je     c000b837 <copy_body_stack3+0xee>
/work/x86_os_my/userprog/fork.c:88
					prog_vaddr = (idx_byte * 8 + idx_bit) * PG_SIZE + vaddr_start;
c000b7c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b7c4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c000b7cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b7ce:	01 d0                	add    %edx,%eax
c000b7d0:	c1 e0 0c             	shl    $0xc,%eax
c000b7d3:	89 c2                	mov    %eax,%edx
c000b7d5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000b7d8:	01 d0                	add    %edx,%eax
c000b7da:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/userprog/fork.c:93
					/* 下面的操作是将父进程用户空间中的数据通过内核空间做中转,最终复制到子进程的用户空间 */

					/* a 将父进程在用户空间中的数据复制到"内核缓冲区buf_page"
					目的：下面切换到子进程的页表后,还能访问到父进程的数据*/
					memcpy(buf_page, (void*)prog_vaddr, PG_SIZE);
c000b7dd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000b7e0:	83 ec 04             	sub    $0x4,%esp
c000b7e3:	68 00 10 00 00       	push   $0x1000
c000b7e8:	50                   	push   %eax
c000b7e9:	ff 75 10             	pushl  0x10(%ebp)
c000b7ec:	e8 66 82 ff ff       	call   c0003a57 <memcpy>
c000b7f1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:96

					/* b 将页表切换到子进程，下面申请内存的函数，将pte及pde安装在子进程的页表中 */
					page_dir_activate(child_thread);
c000b7f4:	83 ec 0c             	sub    $0xc,%esp
c000b7f7:	ff 75 08             	pushl  0x8(%ebp)
c000b7fa:	e8 2e a0 ff ff       	call   c000582d <page_dir_activate>
c000b7ff:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:98
					/* c 申请虚拟地址prog_vaddr */
					get_a_page_without_opvaddrbitmap(PF_USER, prog_vaddr);	//位图已经拷贝过了，当然不用再操作了...
c000b802:	83 ec 08             	sub    $0x8,%esp
c000b805:	ff 75 e0             	pushl  -0x20(%ebp)
c000b808:	6a 02                	push   $0x2
c000b80a:	e8 c0 75 ff ff       	call   c0002dcf <get_a_page_without_opvaddrbitmap>
c000b80f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:101

					/* d 从内核缓冲区中将父进程数据复制到子进程的用户空间 */
					memcpy((void*)prog_vaddr, buf_page, PG_SIZE);
c000b812:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000b815:	83 ec 04             	sub    $0x4,%esp
c000b818:	68 00 10 00 00       	push   $0x1000
c000b81d:	ff 75 10             	pushl  0x10(%ebp)
c000b820:	50                   	push   %eax
c000b821:	e8 31 82 ff ff       	call   c0003a57 <memcpy>
c000b826:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:104

					/* e 恢复父进程页表 */
					page_dir_activate(parent_thread);
c000b829:	83 ec 0c             	sub    $0xc,%esp
c000b82c:	ff 75 0c             	pushl  0xc(%ebp)
c000b82f:	e8 f9 9f ff ff       	call   c000582d <page_dir_activate>
c000b834:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:106
				}
				idx_bit++;
c000b837:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/userprog/fork.c:86

	/* 在父进程的用户空间中查找已有数据的页，按页一一拷贝给子进程 */
	while (idx_byte < btmp_bytes_len) {
		if (vaddr_btmp[idx_byte]) {
			idx_bit = 0;
			while (idx_bit < 8) {
c000b83b:	83 7d f0 07          	cmpl   $0x7,-0x10(%ebp)
c000b83f:	0f 86 5e ff ff ff    	jbe    c000b7a3 <copy_body_stack3+0x5a>
/work/x86_os_my/userprog/fork.c:109
					page_dir_activate(parent_thread);
				}
				idx_bit++;
			}
		}
		idx_byte++;
c000b845:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/userprog/fork.c:83
	uint32_t idx_byte = 0;
	uint32_t idx_bit = 0;
	uint32_t prog_vaddr = 0;

	/* 在父进程的用户空间中查找已有数据的页，按页一一拷贝给子进程 */
	while (idx_byte < btmp_bytes_len) {
c000b849:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b84c:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c000b84f:	0f 82 2f ff ff ff    	jb     c000b784 <copy_body_stack3+0x3b>
/work/x86_os_my/userprog/fork.c:111
				idx_bit++;
			}
		}
		idx_byte++;
	}
}
c000b855:	90                   	nop
c000b856:	c9                   	leave  
c000b857:	c3                   	ret    

c000b858 <build_child_stack>:
build_child_stack():
/work/x86_os_my/userprog/fork.c:174
为了让子进程也能继续 fork 之后的代码运行，必须让它同父进程一样，从中断退出，也就是要经过 intr_exit。

子进程是由调度器 schedule 调度执行的，它要用到 switch_to 函数，
而 switch_to 函数要从栈 thread_stack 中恢复上下文，因此我们要想办法构建出合适的 thread_stack
*/
static int32_t build_child_stack(struct task_struct* child_thread) {
c000b858:	55                   	push   %ebp
c000b859:	89 e5                	mov    %esp,%ebp
c000b85b:	83 ec 20             	sub    $0x20,%esp
/work/x86_os_my/userprog/fork.c:177
	/* a 使子进程pid返回值为0 */
	/* 获取子进程0级栈栈顶 */
	struct intr_stack* intr_0_stack = (struct intr_stack*)((uint32_t)child_thread + PG_SIZE - sizeof(struct intr_stack));
c000b85e:	8b 45 08             	mov    0x8(%ebp),%eax
c000b861:	05 b4 0f 00 00       	add    $0xfb4,%eax
c000b866:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/userprog/fork.c:179
	/* 修改子进程的返回值为0 */
	intr_0_stack->eax = 0;	//根据 abi 约定，eax 寄存器中是函数返回值!!!
c000b869:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000b86c:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
/work/x86_os_my/userprog/fork.c:182

	/* b 为 switch_to 构建线程栈 struct thread_stack,将其构建在紧临intr_stack之下的空间*/
	uint32_t* ret_addr_in_thread_stack  = (uint32_t*)intr_0_stack - 1;	// 任务切换后新任务的返回地址 eip
c000b873:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000b876:	83 e8 04             	sub    $0x4,%eax
c000b879:	89 45 f8             	mov    %eax,-0x8(%ebp)
/work/x86_os_my/userprog/fork.c:185

	/***   这三行不是必要的,只是为了梳理 thread_stack 中的关系 ***/
	uint32_t* esi_ptr_in_thread_stack = (uint32_t*)intr_0_stack - 2;
c000b87c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000b87f:	83 e8 08             	sub    $0x8,%eax
c000b882:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/fork.c:186
	uint32_t* edi_ptr_in_thread_stack = (uint32_t*)intr_0_stack - 3;
c000b885:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000b888:	83 e8 0c             	sub    $0xc,%eax
c000b88b:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/fork.c:187
	uint32_t* ebx_ptr_in_thread_stack = (uint32_t*)intr_0_stack - 4;
c000b88e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000b891:	83 e8 10             	sub    $0x10,%eax
c000b894:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/userprog/fork.c:194

	/* ebp 在 thread_stack 中的地址便是当时的esp(0级栈的栈顶)，即栈顶esp = (uint32_t*)intr_0_stack - 5 */
	/* 指针 ebp_ptr_in_thread_stack，它是 thread_stack 的栈顶，
	 * 必须把它的值存放在 pcb 中偏移为 0 的地方，即 task_struct 中的 self_kstack 处，
	 * 将来 switch_to 要用它作为栈顶，并且执行一系列的 pop 来恢复上下文。 */
	uint32_t* ebp_ptr_in_thread_stack = (uint32_t*)intr_0_stack - 5;
c000b897:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000b89a:	83 e8 14             	sub    $0x14,%eax
c000b89d:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/userprog/fork.c:197

	/* switch_to的返回地址更新为intr_exit，直接从中断返回 */
	*ret_addr_in_thread_stack = (uint32_t)intr_exit;	// kernel.S
c000b8a0:	ba f0 1d 00 c0       	mov    $0xc0001df0,%edx
c000b8a5:	8b 45 f8             	mov    -0x8(%ebp),%eax
c000b8a8:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/userprog/fork.c:201

	/* 下面这个赋值只是为了使构建的 thread_stack 更加清晰,其实也不需要,
	 * 因为在进入intr_exit后一系列的pop会把寄存器中的数据覆盖 */
	*ebp_ptr_in_thread_stack = *ebx_ptr_in_thread_stack = *edi_ptr_in_thread_stack = *esi_ptr_in_thread_stack = 0;
c000b8aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b8ad:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c000b8b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b8b6:	8b 10                	mov    (%eax),%edx
c000b8b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b8bb:	89 10                	mov    %edx,(%eax)
c000b8bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b8c0:	8b 10                	mov    (%eax),%edx
c000b8c2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000b8c5:	89 10                	mov    %edx,(%eax)
c000b8c7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000b8ca:	8b 10                	mov    (%eax),%edx
c000b8cc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000b8cf:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/userprog/fork.c:205
	/*********************************************************/

	/* 把构建的 thread_stack 的栈顶做为 switch_to 恢复数据时的栈顶 */
	child_thread->self_kstack = ebp_ptr_in_thread_stack;	//线程内核栈栈顶 self_kstack 总是和 esp 来回赋值~
c000b8d1:	8b 45 08             	mov    0x8(%ebp),%eax
c000b8d4:	8b 55 e8             	mov    -0x18(%ebp),%edx
c000b8d7:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/userprog/fork.c:212
	在被换下处理器前，我们会把线程的上下文信息保存在 0 特权级栈中，
	self_kstack 便用来记录 0 特权级栈在保存线程上下文后，新的栈顶，
	在下一次此线程又被调度到处理器上时，
	把 self_kstack 的值加载到 esp 寄存器，这样便从 0 特权级栈中获取了线程上下文，从而可以加载到处理器中运行。
	*/
	return 0;
c000b8d9:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/userprog/fork.c:213
}
c000b8de:	c9                   	leave  
c000b8df:	c3                   	ret    

c000b8e0 <update_inode_open_cnts>:
update_inode_open_cnts():
/work/x86_os_my/userprog/fork.c:216

/* 更新inode打开数 */
static void update_inode_open_cnts(struct task_struct* thread) {
c000b8e0:	55                   	push   %ebp
c000b8e1:	89 e5                	mov    %esp,%ebp
c000b8e3:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/fork.c:217
	int32_t local_fd = 3, global_fd = 0;
c000b8e6:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
c000b8ed:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/userprog/fork.c:218
	while (local_fd < MAX_FILES_OPEN_PER_PROC) {	//遍历线程打开的所有文件
c000b8f4:	eb 58                	jmp    c000b94e <update_inode_open_cnts+0x6e>
/work/x86_os_my/userprog/fork.c:219
		global_fd = thread->fd_table[local_fd];
c000b8f6:	8b 45 08             	mov    0x8(%ebp),%eax
c000b8f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000b8fc:	83 c2 08             	add    $0x8,%edx
c000b8ff:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
c000b903:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/fork.c:220
		ASSERT(global_fd < MAX_FILE_OPEN);
c000b906:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c000b90a:	7e 1c                	jle    c000b928 <update_inode_open_cnts+0x48>
/work/x86_os_my/userprog/fork.c:220 (discriminator 1)
c000b90c:	68 d8 f2 00 c0       	push   $0xc000f2d8
c000b911:	68 bc f3 00 c0       	push   $0xc000f3bc
c000b916:	68 dc 00 00 00       	push   $0xdc
c000b91b:	68 f2 f2 00 c0       	push   $0xc000f2f2
c000b920:	e8 dc 6b ff ff       	call   c0002501 <panic_spin>
c000b925:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:221
		if (global_fd != -1) {
c000b928:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c000b92c:	74 1c                	je     c000b94a <update_inode_open_cnts+0x6a>
/work/x86_os_my/userprog/fork.c:222
			file_table[global_fd].fd_inode->i_open_cnts++;	//线程打开的所有文件的inode->open_cnt加一
c000b92e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000b931:	89 d0                	mov    %edx,%eax
c000b933:	01 c0                	add    %eax,%eax
c000b935:	01 d0                	add    %edx,%eax
c000b937:	c1 e0 02             	shl    $0x2,%eax
c000b93a:	05 e8 4a 01 c0       	add    $0xc0014ae8,%eax
c000b93f:	8b 00                	mov    (%eax),%eax
c000b941:	8b 50 08             	mov    0x8(%eax),%edx
c000b944:	83 c2 01             	add    $0x1,%edx
c000b947:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/userprog/fork.c:224
		}
		local_fd++;
c000b94a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/userprog/fork.c:218
}

/* 更新inode打开数 */
static void update_inode_open_cnts(struct task_struct* thread) {
	int32_t local_fd = 3, global_fd = 0;
	while (local_fd < MAX_FILES_OPEN_PER_PROC) {	//遍历线程打开的所有文件
c000b94e:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
c000b952:	7e a2                	jle    c000b8f6 <update_inode_open_cnts+0x16>
/work/x86_os_my/userprog/fork.c:226
		if (global_fd != -1) {
			file_table[global_fd].fd_inode->i_open_cnts++;	//线程打开的所有文件的inode->open_cnt加一
		}
		local_fd++;
	}
}
c000b954:	90                   	nop
c000b955:	c9                   	leave  
c000b956:	c3                   	ret    

c000b957 <copy_process>:
copy_process():
/work/x86_os_my/userprog/fork.c:229

/* 拷贝父进程本身所占资源给子进程 */
static int32_t copy_process(struct task_struct* child_thread, struct task_struct* parent_thread) {
c000b957:	55                   	push   %ebp
c000b958:	89 e5                	mov    %esp,%ebp
c000b95a:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/fork.c:231
	/* 内核缓冲区,作为父进程用户空间的数据，复制到子进程用户空间，的中转 */
	void* buf_page = get_kernel_pages(1);
c000b95d:	83 ec 0c             	sub    $0xc,%esp
c000b960:	6a 01                	push   $0x1
c000b962:	e8 42 72 ff ff       	call   c0002ba9 <get_kernel_pages>
c000b967:	83 c4 10             	add    $0x10,%esp
c000b96a:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/fork.c:232
	if (buf_page == NULL) {
c000b96d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c000b971:	75 0a                	jne    c000b97d <copy_process+0x26>
/work/x86_os_my/userprog/fork.c:233
		return -1;
c000b973:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000b978:	e9 82 00 00 00       	jmp    c000b9ff <copy_process+0xa8>
/work/x86_os_my/userprog/fork.c:237
	}

	/* a 复制父进程的pcb、虚拟地址位图、内核栈到子进程 */
	if (copy_pcb_vaddrbitmap_stack0(child_thread, parent_thread) == -1) {
c000b97d:	83 ec 08             	sub    $0x8,%esp
c000b980:	ff 75 0c             	pushl  0xc(%ebp)
c000b983:	ff 75 08             	pushl  0x8(%ebp)
c000b986:	e8 d1 fc ff ff       	call   c000b65c <copy_pcb_vaddrbitmap_stack0>
c000b98b:	83 c4 10             	add    $0x10,%esp
c000b98e:	83 f8 ff             	cmp    $0xffffffff,%eax
c000b991:	75 07                	jne    c000b99a <copy_process+0x43>
/work/x86_os_my/userprog/fork.c:238
		return -1;
c000b993:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000b998:	eb 65                	jmp    c000b9ff <copy_process+0xa8>
/work/x86_os_my/userprog/fork.c:242
	}

	/* b 为子进程创建页表,此页表仅包括内核空间 */
	child_thread->pgdir = create_page_dir();
c000b99a:	e8 11 9f ff ff       	call   c00058b0 <create_page_dir>
c000b99f:	89 c2                	mov    %eax,%edx
c000b9a1:	8b 45 08             	mov    0x8(%ebp),%eax
c000b9a4:	89 50 54             	mov    %edx,0x54(%eax)
/work/x86_os_my/userprog/fork.c:243
	if(child_thread->pgdir == NULL) {
c000b9a7:	8b 45 08             	mov    0x8(%ebp),%eax
c000b9aa:	8b 40 54             	mov    0x54(%eax),%eax
c000b9ad:	85 c0                	test   %eax,%eax
c000b9af:	75 07                	jne    c000b9b8 <copy_process+0x61>
/work/x86_os_my/userprog/fork.c:244
		return -1;
c000b9b1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000b9b6:	eb 47                	jmp    c000b9ff <copy_process+0xa8>
/work/x86_os_my/userprog/fork.c:248
	}

	/* c 复制父进程进程体及用户栈给子进程 */
	copy_body_stack3(child_thread, parent_thread, buf_page);
c000b9b8:	83 ec 04             	sub    $0x4,%esp
c000b9bb:	ff 75 f4             	pushl  -0xc(%ebp)
c000b9be:	ff 75 0c             	pushl  0xc(%ebp)
c000b9c1:	ff 75 08             	pushl  0x8(%ebp)
c000b9c4:	e8 80 fd ff ff       	call   c000b749 <copy_body_stack3>
c000b9c9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:251

	/* d 构建子进程 thread_stack 和修改返回值pid */
	build_child_stack(child_thread);
c000b9cc:	83 ec 0c             	sub    $0xc,%esp
c000b9cf:	ff 75 08             	pushl  0x8(%ebp)
c000b9d2:	e8 81 fe ff ff       	call   c000b858 <build_child_stack>
c000b9d7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:254

	/* e 更新文件inode的打开数 */
	update_inode_open_cnts(child_thread);
c000b9da:	83 ec 0c             	sub    $0xc,%esp
c000b9dd:	ff 75 08             	pushl  0x8(%ebp)
c000b9e0:	e8 fb fe ff ff       	call   c000b8e0 <update_inode_open_cnts>
c000b9e5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:256

	mfree_page(PF_KERNEL, buf_page, 1);
c000b9e8:	83 ec 04             	sub    $0x4,%esp
c000b9eb:	6a 01                	push   $0x1
c000b9ed:	ff 75 f4             	pushl  -0xc(%ebp)
c000b9f0:	6a 01                	push   $0x1
c000b9f2:	e8 21 79 ff ff       	call   c0003318 <mfree_page>
c000b9f7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:257
	return 0;
c000b9fa:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/userprog/fork.c:258
}
c000b9ff:	c9                   	leave  
c000ba00:	c3                   	ret    

c000ba01 <sys_fork>:
sys_fork():
/work/x86_os_my/userprog/fork.c:261

/* fork子进程，内核线程不可直接调用 */
pid_t sys_fork(void) {
c000ba01:	55                   	push   %ebp
c000ba02:	89 e5                	mov    %esp,%ebp
c000ba04:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/fork.c:262
	struct task_struct* parent_thread = running_thread();
c000ba07:	e8 e0 83 ff ff       	call   c0003dec <running_thread>
c000ba0c:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/fork.c:263
	struct task_struct* child_thread = get_kernel_pages(1);	// 为子进程创建pcb(task_struct结构)
c000ba0f:	83 ec 0c             	sub    $0xc,%esp
c000ba12:	6a 01                	push   $0x1
c000ba14:	e8 90 71 ff ff       	call   c0002ba9 <get_kernel_pages>
c000ba19:	83 c4 10             	add    $0x10,%esp
c000ba1c:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/fork.c:264
	if (child_thread == NULL) {
c000ba1f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c000ba23:	75 0a                	jne    c000ba2f <sys_fork+0x2e>
/work/x86_os_my/userprog/fork.c:265
		return -1;
c000ba25:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000ba2a:	e9 f2 00 00 00       	jmp    c000bb21 <sys_fork+0x120>
/work/x86_os_my/userprog/fork.c:267
	}
	ASSERT(INTR_OFF == intr_get_status() && parent_thread->pgdir != NULL);	//中断关了，并且是用户线程
c000ba2f:	e8 2c 61 ff ff       	call   c0001b60 <intr_get_status>
c000ba34:	85 c0                	test   %eax,%eax
c000ba36:	75 0a                	jne    c000ba42 <sys_fork+0x41>
/work/x86_os_my/userprog/fork.c:267 (discriminator 1)
c000ba38:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000ba3b:	8b 40 54             	mov    0x54(%eax),%eax
c000ba3e:	85 c0                	test   %eax,%eax
c000ba40:	75 1c                	jne    c000ba5e <sys_fork+0x5d>
/work/x86_os_my/userprog/fork.c:267 (discriminator 3)
c000ba42:	68 04 f3 00 c0       	push   $0xc000f304
c000ba47:	68 d4 f3 00 c0       	push   $0xc000f3d4
c000ba4c:	68 0b 01 00 00       	push   $0x10b
c000ba51:	68 f2 f2 00 c0       	push   $0xc000f2f2
c000ba56:	e8 a6 6a ff ff       	call   c0002501 <panic_spin>
c000ba5b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:269

	if (copy_process(child_thread, parent_thread) == -1) {
c000ba5e:	83 ec 08             	sub    $0x8,%esp
c000ba61:	ff 75 f4             	pushl  -0xc(%ebp)
c000ba64:	ff 75 f0             	pushl  -0x10(%ebp)
c000ba67:	e8 eb fe ff ff       	call   c000b957 <copy_process>
c000ba6c:	83 c4 10             	add    $0x10,%esp
c000ba6f:	83 f8 ff             	cmp    $0xffffffff,%eax
c000ba72:	75 0a                	jne    c000ba7e <sys_fork+0x7d>
/work/x86_os_my/userprog/fork.c:270
		return -1;
c000ba74:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000ba79:	e9 a3 00 00 00       	jmp    c000bb21 <sys_fork+0x120>
/work/x86_os_my/userprog/fork.c:274
	}

	/* 添加到就绪线程队列和所有线程队列，子进程由调度器安排运行 */
	ASSERT(!elem_find(&thread_ready_list, &child_thread->general_tag));
c000ba7e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000ba81:	83 c0 44             	add    $0x44,%eax
c000ba84:	83 ec 08             	sub    $0x8,%esp
c000ba87:	50                   	push   %eax
c000ba88:	68 a8 3c 01 c0       	push   $0xc0013ca8
c000ba8d:	e8 52 90 ff ff       	call   c0004ae4 <elem_find>
c000ba92:	83 c4 10             	add    $0x10,%esp
c000ba95:	85 c0                	test   %eax,%eax
c000ba97:	74 1c                	je     c000bab5 <sys_fork+0xb4>
/work/x86_os_my/userprog/fork.c:274 (discriminator 1)
c000ba99:	68 44 f3 00 c0       	push   $0xc000f344
c000ba9e:	68 d4 f3 00 c0       	push   $0xc000f3d4
c000baa3:	68 12 01 00 00       	push   $0x112
c000baa8:	68 f2 f2 00 c0       	push   $0xc000f2f2
c000baad:	e8 4f 6a ff ff       	call   c0002501 <panic_spin>
c000bab2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:275
	list_append(&thread_ready_list, &child_thread->general_tag);
c000bab5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000bab8:	83 c0 44             	add    $0x44,%eax
c000babb:	83 ec 08             	sub    $0x8,%esp
c000babe:	50                   	push   %eax
c000babf:	68 a8 3c 01 c0       	push   $0xc0013ca8
c000bac4:	e8 a1 8f ff ff       	call   c0004a6a <list_append>
c000bac9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:276
	ASSERT(!elem_find(&thread_all_list, &child_thread->all_list_tag));
c000bacc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000bacf:	83 c0 4c             	add    $0x4c,%eax
c000bad2:	83 ec 08             	sub    $0x8,%esp
c000bad5:	50                   	push   %eax
c000bad6:	68 b8 3c 01 c0       	push   $0xc0013cb8
c000badb:	e8 04 90 ff ff       	call   c0004ae4 <elem_find>
c000bae0:	83 c4 10             	add    $0x10,%esp
c000bae3:	85 c0                	test   %eax,%eax
c000bae5:	74 1c                	je     c000bb03 <sys_fork+0x102>
/work/x86_os_my/userprog/fork.c:276 (discriminator 1)
c000bae7:	68 80 f3 00 c0       	push   $0xc000f380
c000baec:	68 d4 f3 00 c0       	push   $0xc000f3d4
c000baf1:	68 14 01 00 00       	push   $0x114
c000baf6:	68 f2 f2 00 c0       	push   $0xc000f2f2
c000bafb:	e8 01 6a ff ff       	call   c0002501 <panic_spin>
c000bb00:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:277
	list_append(&thread_all_list, &child_thread->all_list_tag);
c000bb03:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000bb06:	83 c0 4c             	add    $0x4c,%eax
c000bb09:	83 ec 08             	sub    $0x8,%esp
c000bb0c:	50                   	push   %eax
c000bb0d:	68 b8 3c 01 c0       	push   $0xc0013cb8
c000bb12:	e8 53 8f ff ff       	call   c0004a6a <list_append>
c000bb17:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:279

	return child_thread->pid;	// 父进程返回子进程的pid
c000bb1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000bb1d:	0f b7 40 04          	movzwl 0x4(%eax),%eax
/work/x86_os_my/userprog/fork.c:280
}
c000bb21:	c9                   	leave  
c000bb22:	c3                   	ret    

c000bb23 <print_prompt>:
print_prompt():
/work/x86_os_my/shell/shell.c:21

/* 用来记录当前目录,是当前目录的缓存,每次执行cd命令时会更新此内容 */
char cwd_cache[MAX_PATH_LEN] = {0};

/* 输出提示符 */
void print_prompt(void) {
c000bb23:	55                   	push   %ebp
c000bb24:	89 e5                	mov    %esp,%ebp
c000bb26:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/shell/shell.c:22
	printf("[rabbit@localhost %s]$ ", cwd_cache);
c000bb29:	83 ec 08             	sub    $0x8,%esp
c000bb2c:	68 c0 32 01 c0       	push   $0xc00132c0
c000bb31:	68 e0 f3 00 c0       	push   $0xc000f3e0
c000bb36:	e8 bb a5 ff ff       	call   c00060f6 <printf>
c000bb3b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:23
}
c000bb3e:	90                   	nop
c000bb3f:	c9                   	leave  
c000bb40:	c3                   	ret    

c000bb41 <readline>:
readline():
/work/x86_os_my/shell/shell.c:26

/* 从键盘缓冲区中最多读入count个字节到buf */
static void readline(char* buf, int32_t count) {
c000bb41:	55                   	push   %ebp
c000bb42:	89 e5                	mov    %esp,%ebp
c000bb44:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/shell/shell.c:27
	assert(buf != NULL && count > 0);
c000bb47:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c000bb4b:	74 06                	je     c000bb53 <readline+0x12>
/work/x86_os_my/shell/shell.c:27 (discriminator 2)
c000bb4d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c000bb51:	7f 19                	jg     c000bb6c <readline+0x2b>
/work/x86_os_my/shell/shell.c:27 (discriminator 3)
c000bb53:	68 f8 f3 00 c0       	push   $0xc000f3f8
c000bb58:	68 5c f5 00 c0       	push   $0xc000f55c
c000bb5d:	6a 1b                	push   $0x1b
c000bb5f:	68 11 f4 00 c0       	push   $0xc000f411
c000bb64:	e8 7d 05 00 00       	call   c000c0e6 <user_spin>
c000bb69:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:28
	char* pos = buf;
c000bb6c:	8b 45 08             	mov    0x8(%ebp),%eax
c000bb6f:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/shell/shell.c:29
	while (read(stdin_no, pos, 1) != -1 && (pos - buf) < count) {	// 每次读1个字符。在不出错情况下,直到找到回车符才返回
c000bb72:	e9 b5 00 00 00       	jmp    c000bc2c <readline+0xeb>
/work/x86_os_my/shell/shell.c:30
		switch (*pos) {
c000bb77:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000bb7a:	0f b6 00             	movzbl (%eax),%eax
c000bb7d:	0f be c0             	movsbl %al,%eax
c000bb80:	83 e8 08             	sub    $0x8,%eax
c000bb83:	83 f8 0c             	cmp    $0xc,%eax
c000bb86:	0f 87 87 00 00 00    	ja     c000bc13 <readline+0xd2>
c000bb8c:	8b 04 85 6c f4 00 c0 	mov    -0x3fff0b94(,%eax,4),%eax
c000bb93:	ff e0                	jmp    *%eax
/work/x86_os_my/shell/shell.c:34
			/* 找到回车或换行符后认为键入的命令结束,直接返回 */
			case '\n':
			case '\r':
			*pos = 0;		// 添加cmd_line的终止字符0
c000bb95:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000bb98:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/shell/shell.c:35
			putchar('\n');
c000bb9b:	83 ec 0c             	sub    $0xc,%esp
c000bb9e:	6a 0a                	push   $0xa
c000bba0:	e8 9c 9f ff ff       	call   c0005b41 <putchar>
c000bba5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:36
			return;
c000bba8:	e9 b9 00 00 00       	jmp    c000bc66 <readline+0x125>
/work/x86_os_my/shell/shell.c:39

			case '\b':
			if (cmd_line[0] != '\b') {	// 阻止删除非本次输入的信息
c000bbad:	0f b6 05 00 35 01 c0 	movzbl 0xc0013500,%eax
c000bbb4:	3c 08                	cmp    $0x8,%al
c000bbb6:	74 74                	je     c000bc2c <readline+0xeb>
/work/x86_os_my/shell/shell.c:40
				--pos;				// 退回到缓冲区cmd_line中上一个字符
c000bbb8:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
/work/x86_os_my/shell/shell.c:41
				putchar('\b');		// 屏幕显示也删掉前一个字符
c000bbbc:	83 ec 0c             	sub    $0xc,%esp
c000bbbf:	6a 08                	push   $0x8
c000bbc1:	e8 7b 9f ff ff       	call   c0005b41 <putchar>
c000bbc6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:43
			}
			break;
c000bbc9:	eb 61                	jmp    c000bc2c <readline+0xeb>
/work/x86_os_my/shell/shell.c:48

			/* ctrl+l 清屏 */
			case 'l' - 'a':
			/* 1 先将当前的字符'l'-'a'置为0 */
			*pos = 0;
c000bbcb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000bbce:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/shell/shell.c:50
			/* 2 再将屏幕清空 */
			clear();
c000bbd1:	e8 8f 9f ff ff       	call   c0005b65 <clear>
/work/x86_os_my/shell/shell.c:52
			/* 3 打印提示符 */
			print_prompt();
c000bbd6:	e8 48 ff ff ff       	call   c000bb23 <print_prompt>
/work/x86_os_my/shell/shell.c:54
			/* 4 将之前键入的内容再次打印 */
			printf("%s", buf);
c000bbdb:	83 ec 08             	sub    $0x8,%esp
c000bbde:	ff 75 08             	pushl  0x8(%ebp)
c000bbe1:	68 1f f4 00 c0       	push   $0xc000f41f
c000bbe6:	e8 0b a5 ff ff       	call   c00060f6 <printf>
c000bbeb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:55
			break;
c000bbee:	eb 3c                	jmp    c000bc2c <readline+0xeb>
/work/x86_os_my/shell/shell.c:60

			/* ctrl+u 清掉输入 */
			case 'u' - 'a':
			while (buf != pos) {
				putchar('\b');
c000bbf0:	83 ec 0c             	sub    $0xc,%esp
c000bbf3:	6a 08                	push   $0x8
c000bbf5:	e8 47 9f ff ff       	call   c0005b41 <putchar>
c000bbfa:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:61
				*(pos--) = 0;
c000bbfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000bc00:	8d 50 ff             	lea    -0x1(%eax),%edx
c000bc03:	89 55 f4             	mov    %edx,-0xc(%ebp)
c000bc06:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/shell/shell.c:59
			printf("%s", buf);
			break;

			/* ctrl+u 清掉输入 */
			case 'u' - 'a':
			while (buf != pos) {
c000bc09:	8b 45 08             	mov    0x8(%ebp),%eax
c000bc0c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c000bc0f:	75 df                	jne    c000bbf0 <readline+0xaf>
/work/x86_os_my/shell/shell.c:63
				putchar('\b');
				*(pos--) = 0;
			}
			break;
c000bc11:	eb 19                	jmp    c000bc2c <readline+0xeb>
/work/x86_os_my/shell/shell.c:67

			/* 非控制键则输出字符 */
			default:
			putchar(*pos);			// 屏幕显示
c000bc13:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000bc16:	0f b6 00             	movzbl (%eax),%eax
c000bc19:	0f be c0             	movsbl %al,%eax
c000bc1c:	83 ec 0c             	sub    $0xc,%esp
c000bc1f:	50                   	push   %eax
c000bc20:	e8 1c 9f ff ff       	call   c0005b41 <putchar>
c000bc25:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:68
			pos++;
c000bc28:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/shell/shell.c:29

/* 从键盘缓冲区中最多读入count个字节到buf */
static void readline(char* buf, int32_t count) {
	assert(buf != NULL && count > 0);
	char* pos = buf;
	while (read(stdin_no, pos, 1) != -1 && (pos - buf) < count) {	// 每次读1个字符。在不出错情况下,直到找到回车符才返回
c000bc2c:	83 ec 04             	sub    $0x4,%esp
c000bc2f:	6a 01                	push   $0x1
c000bc31:	ff 75 f4             	pushl  -0xc(%ebp)
c000bc34:	6a 00                	push   $0x0
c000bc36:	e8 e3 9e ff ff       	call   c0005b1e <read>
c000bc3b:	83 c4 10             	add    $0x10,%esp
c000bc3e:	83 f8 ff             	cmp    $0xffffffff,%eax
c000bc41:	74 13                	je     c000bc56 <readline+0x115>
/work/x86_os_my/shell/shell.c:29 (discriminator 1)
c000bc43:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000bc46:	8b 45 08             	mov    0x8(%ebp),%eax
c000bc49:	29 c2                	sub    %eax,%edx
c000bc4b:	89 d0                	mov    %edx,%eax
c000bc4d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c000bc50:	0f 8c 21 ff ff ff    	jl     c000bb77 <readline+0x36>
/work/x86_os_my/shell/shell.c:71
			default:
			putchar(*pos);			// 屏幕显示
			pos++;
		}
	}
	printf("readline: can`t find enter_key in the cmd_line, max num of char is 128\n");
c000bc56:	83 ec 0c             	sub    $0xc,%esp
c000bc59:	68 24 f4 00 c0       	push   $0xc000f424
c000bc5e:	e8 93 a4 ff ff       	call   c00060f6 <printf>
c000bc63:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:72
}
c000bc66:	c9                   	leave  
c000bc67:	c3                   	ret    

c000bc68 <cmd_parse>:
cmd_parse():
/work/x86_os_my/shell/shell.c:75

/* 分析字符串cmd_str中以token为分隔符的单词,将各单词的指针存入argv数组 */
static int32_t cmd_parse(char* cmd_str, char** argv, char token) {
c000bc68:	55                   	push   %ebp
c000bc69:	89 e5                	mov    %esp,%ebp
c000bc6b:	83 ec 28             	sub    $0x28,%esp
c000bc6e:	8b 45 10             	mov    0x10(%ebp),%eax
c000bc71:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/shell/shell.c:76
	assert(cmd_str != NULL);
c000bc74:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c000bc78:	75 19                	jne    c000bc93 <cmd_parse+0x2b>
/work/x86_os_my/shell/shell.c:76 (discriminator 1)
c000bc7a:	68 a0 f4 00 c0       	push   $0xc000f4a0
c000bc7f:	68 68 f5 00 c0       	push   $0xc000f568
c000bc84:	6a 4c                	push   $0x4c
c000bc86:	68 11 f4 00 c0       	push   $0xc000f411
c000bc8b:	e8 56 04 00 00       	call   c000c0e6 <user_spin>
c000bc90:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:77
	int32_t arg_idx = 0;
c000bc93:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/shell/shell.c:78
	while(arg_idx < MAX_ARG_NR) {
c000bc9a:	eb 19                	jmp    c000bcb5 <cmd_parse+0x4d>
/work/x86_os_my/shell/shell.c:79
		argv[arg_idx] = NULL;
c000bc9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000bc9f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000bca6:	8b 45 0c             	mov    0xc(%ebp),%eax
c000bca9:	01 d0                	add    %edx,%eax
c000bcab:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/shell/shell.c:80
		arg_idx++;
c000bcb1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/shell/shell.c:78

/* 分析字符串cmd_str中以token为分隔符的单词,将各单词的指针存入argv数组 */
static int32_t cmd_parse(char* cmd_str, char** argv, char token) {
	assert(cmd_str != NULL);
	int32_t arg_idx = 0;
	while(arg_idx < MAX_ARG_NR) {
c000bcb5:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c000bcb9:	7e e1                	jle    c000bc9c <cmd_parse+0x34>
/work/x86_os_my/shell/shell.c:82
		argv[arg_idx] = NULL;
		arg_idx++;
	}
	char* next = cmd_str;
c000bcbb:	8b 45 08             	mov    0x8(%ebp),%eax
c000bcbe:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/shell/shell.c:83
	int32_t argc = 0;
c000bcc1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/shell/shell.c:85
	/* 外层循环处理整个命令行 */
	while(*next) {
c000bcc8:	eb 6f                	jmp    c000bd39 <cmd_parse+0xd1>
/work/x86_os_my/shell/shell.c:88
		/* 去除命令字或参数之间的空格 */
		while(*next == token) {
			next++;
c000bcca:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/shell/shell.c:87
	char* next = cmd_str;
	int32_t argc = 0;
	/* 外层循环处理整个命令行 */
	while(*next) {
		/* 去除命令字或参数之间的空格 */
		while(*next == token) {
c000bcce:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000bcd1:	0f b6 00             	movzbl (%eax),%eax
c000bcd4:	3a 45 e4             	cmp    -0x1c(%ebp),%al
c000bcd7:	74 f1                	je     c000bcca <cmd_parse+0x62>
/work/x86_os_my/shell/shell.c:91
			next++;
		}
		/* 处理最后一个参数后接空格的情况,如"ls dir2 " */
		if (*next == 0) {
c000bcd9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000bcdc:	0f b6 00             	movzbl (%eax),%eax
c000bcdf:	84 c0                	test   %al,%al
c000bce1:	74 62                	je     c000bd45 <cmd_parse+0xdd>
/work/x86_os_my/shell/shell.c:94
			break;
		}
		argv[argc] = next;
c000bce3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000bce6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000bced:	8b 45 0c             	mov    0xc(%ebp),%eax
c000bcf0:	01 c2                	add    %eax,%edx
c000bcf2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000bcf5:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/shell/shell.c:97

		/* 内层循环处理命令行中的每个命令字及参数 */
		while (*next && *next != token) {	  // 在字符串结束前找单词分隔符
c000bcf7:	eb 04                	jmp    c000bcfd <cmd_parse+0x95>
/work/x86_os_my/shell/shell.c:98
			next++;
c000bcf9:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/shell/shell.c:97
			break;
		}
		argv[argc] = next;

		/* 内层循环处理命令行中的每个命令字及参数 */
		while (*next && *next != token) {	  // 在字符串结束前找单词分隔符
c000bcfd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000bd00:	0f b6 00             	movzbl (%eax),%eax
c000bd03:	84 c0                	test   %al,%al
c000bd05:	74 0b                	je     c000bd12 <cmd_parse+0xaa>
/work/x86_os_my/shell/shell.c:97 (discriminator 1)
c000bd07:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000bd0a:	0f b6 00             	movzbl (%eax),%eax
c000bd0d:	3a 45 e4             	cmp    -0x1c(%ebp),%al
c000bd10:	75 e7                	jne    c000bcf9 <cmd_parse+0x91>
/work/x86_os_my/shell/shell.c:102
			next++;
		}

		/* 如果未结束(是token字符),使tocken变成0 */
		if (*next) {
c000bd12:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000bd15:	0f b6 00             	movzbl (%eax),%eax
c000bd18:	84 c0                	test   %al,%al
c000bd1a:	74 0c                	je     c000bd28 <cmd_parse+0xc0>
/work/x86_os_my/shell/shell.c:103
			*next++ = 0;	// 将token字符替换为字符串结束符0,做为一个单词的结束,并将字符指针next指向下一个字符
c000bd1c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000bd1f:	8d 50 01             	lea    0x1(%eax),%edx
c000bd22:	89 55 f0             	mov    %edx,-0x10(%ebp)
c000bd25:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/shell/shell.c:107
		}

		/* 避免argv数组访问越界,参数过多则返回0 */
		if (argc > MAX_ARG_NR) {
c000bd28:	83 7d ec 10          	cmpl   $0x10,-0x14(%ebp)
c000bd2c:	7e 07                	jle    c000bd35 <cmd_parse+0xcd>
/work/x86_os_my/shell/shell.c:108
			return -1;
c000bd2e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000bd33:	eb 14                	jmp    c000bd49 <cmd_parse+0xe1>
/work/x86_os_my/shell/shell.c:110
		}
		argc++;
c000bd35:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
/work/x86_os_my/shell/shell.c:85
		arg_idx++;
	}
	char* next = cmd_str;
	int32_t argc = 0;
	/* 外层循环处理整个命令行 */
	while(*next) {
c000bd39:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000bd3c:	0f b6 00             	movzbl (%eax),%eax
c000bd3f:	84 c0                	test   %al,%al
c000bd41:	75 8b                	jne    c000bcce <cmd_parse+0x66>
c000bd43:	eb 01                	jmp    c000bd46 <cmd_parse+0xde>
/work/x86_os_my/shell/shell.c:92
		while(*next == token) {
			next++;
		}
		/* 处理最后一个参数后接空格的情况,如"ls dir2 " */
		if (*next == 0) {
			break;
c000bd45:	90                   	nop
/work/x86_os_my/shell/shell.c:112
		if (argc > MAX_ARG_NR) {
			return -1;
		}
		argc++;
	}
	return argc;
c000bd46:	8b 45 ec             	mov    -0x14(%ebp),%eax
/work/x86_os_my/shell/shell.c:113
}
c000bd49:	c9                   	leave  
c000bd4a:	c3                   	ret    

c000bd4b <my_shell>:
my_shell():
/work/x86_os_my/shell/shell.c:118

char* argv[MAX_ARG_NR] = {NULL};    // argv必须为全局变量，为了以后exec的程序可访问参数
int32_t argc = -1;
/* 简单的shell */
void my_shell(void) {
c000bd4b:	55                   	push   %ebp
c000bd4c:	89 e5                	mov    %esp,%ebp
c000bd4e:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/shell/shell.c:119
	cwd_cache[0] = '/';
c000bd51:	c6 05 c0 32 01 c0 2f 	movb   $0x2f,0xc00132c0
/work/x86_os_my/shell/shell.c:121
	while (1) {
		print_prompt();
c000bd58:	e8 c6 fd ff ff       	call   c000bb23 <print_prompt>
/work/x86_os_my/shell/shell.c:122
		memset(final_path, 0, MAX_PATH_LEN);
c000bd5d:	83 ec 04             	sub    $0x4,%esp
c000bd60:	68 00 02 00 00       	push   $0x200
c000bd65:	6a 00                	push   $0x0
c000bd67:	68 c0 30 01 c0       	push   $0xc00130c0
c000bd6c:	e8 94 7c ff ff       	call   c0003a05 <memset>
c000bd71:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:123
		memset(cmd_line, 0, MAX_PATH_LEN);
c000bd74:	83 ec 04             	sub    $0x4,%esp
c000bd77:	68 00 02 00 00       	push   $0x200
c000bd7c:	6a 00                	push   $0x0
c000bd7e:	68 00 35 01 c0       	push   $0xc0013500
c000bd83:	e8 7d 7c ff ff       	call   c0003a05 <memset>
c000bd88:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:124
		readline(cmd_line, MAX_PATH_LEN);
c000bd8b:	83 ec 08             	sub    $0x8,%esp
c000bd8e:	68 00 02 00 00       	push   $0x200
c000bd93:	68 00 35 01 c0       	push   $0xc0013500
c000bd98:	e8 a4 fd ff ff       	call   c000bb41 <readline>
c000bd9d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:125
		if (cmd_line[0] == 0) {	 // 若只键入了一个回车
c000bda0:	0f b6 05 00 35 01 c0 	movzbl 0xc0013500,%eax
c000bda7:	84 c0                	test   %al,%al
c000bda9:	0f 84 31 03 00 00    	je     c000c0e0 <my_shell+0x395>
/work/x86_os_my/shell/shell.c:128
			continue;
		}
		argc = -1;
c000bdaf:	c7 05 58 2b 01 c0 ff 	movl   $0xffffffff,0xc0012b58
c000bdb6:	ff ff ff 
/work/x86_os_my/shell/shell.c:129
		argc = cmd_parse(cmd_line, argv, ' ');
c000bdb9:	83 ec 04             	sub    $0x4,%esp
c000bdbc:	6a 20                	push   $0x20
c000bdbe:	68 c0 34 01 c0       	push   $0xc00134c0
c000bdc3:	68 00 35 01 c0       	push   $0xc0013500
c000bdc8:	e8 9b fe ff ff       	call   c000bc68 <cmd_parse>
c000bdcd:	83 c4 10             	add    $0x10,%esp
c000bdd0:	a3 58 2b 01 c0       	mov    %eax,0xc0012b58
/work/x86_os_my/shell/shell.c:130
		if (argc == -1) {
c000bdd5:	a1 58 2b 01 c0       	mov    0xc0012b58,%eax
c000bdda:	83 f8 ff             	cmp    $0xffffffff,%eax
c000bddd:	75 17                	jne    c000bdf6 <my_shell+0xab>
/work/x86_os_my/shell/shell.c:131
			printf("num of arguments exceed %d\n", MAX_ARG_NR);
c000bddf:	83 ec 08             	sub    $0x8,%esp
c000bde2:	6a 10                	push   $0x10
c000bde4:	68 b0 f4 00 c0       	push   $0xc000f4b0
c000bde9:	e8 08 a3 ff ff       	call   c00060f6 <printf>
c000bdee:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:132
			continue;
c000bdf1:	e9 eb 02 00 00       	jmp    c000c0e1 <my_shell+0x396>
/work/x86_os_my/shell/shell.c:135
		}

		if (!strcmp("ls", argv[0])) {
c000bdf6:	a1 c0 34 01 c0       	mov    0xc00134c0,%eax
c000bdfb:	83 ec 08             	sub    $0x8,%esp
c000bdfe:	50                   	push   %eax
c000bdff:	68 cc f4 00 c0       	push   $0xc000f4cc
c000be04:	e8 d1 7d ff ff       	call   c0003bda <strcmp>
c000be09:	83 c4 10             	add    $0x10,%esp
c000be0c:	84 c0                	test   %al,%al
c000be0e:	75 1b                	jne    c000be2b <my_shell+0xe0>
/work/x86_os_my/shell/shell.c:136
			buildin_ls(argc, argv);
c000be10:	a1 58 2b 01 c0       	mov    0xc0012b58,%eax
c000be15:	83 ec 08             	sub    $0x8,%esp
c000be18:	68 c0 34 01 c0       	push   $0xc00134c0
c000be1d:	50                   	push   %eax
c000be1e:	e8 fa 05 00 00       	call   c000c41d <buildin_ls>
c000be23:	83 c4 10             	add    $0x10,%esp
c000be26:	e9 8f 02 00 00       	jmp    c000c0ba <my_shell+0x36f>
/work/x86_os_my/shell/shell.c:137
		} else if (!strcmp("cd", argv[0])) {
c000be2b:	a1 c0 34 01 c0       	mov    0xc00134c0,%eax
c000be30:	83 ec 08             	sub    $0x8,%esp
c000be33:	50                   	push   %eax
c000be34:	68 cf f4 00 c0       	push   $0xc000f4cf
c000be39:	e8 9c 7d ff ff       	call   c0003bda <strcmp>
c000be3e:	83 c4 10             	add    $0x10,%esp
c000be41:	84 c0                	test   %al,%al
c000be43:	75 4f                	jne    c000be94 <my_shell+0x149>
/work/x86_os_my/shell/shell.c:138
			if (buildin_cd(argc, argv) != NULL) {
c000be45:	a1 58 2b 01 c0       	mov    0xc0012b58,%eax
c000be4a:	83 ec 08             	sub    $0x8,%esp
c000be4d:	68 c0 34 01 c0       	push   $0xc00134c0
c000be52:	50                   	push   %eax
c000be53:	e8 3b 05 00 00       	call   c000c393 <buildin_cd>
c000be58:	83 c4 10             	add    $0x10,%esp
c000be5b:	85 c0                	test   %eax,%eax
c000be5d:	0f 84 57 02 00 00    	je     c000c0ba <my_shell+0x36f>
/work/x86_os_my/shell/shell.c:139
				memset(cwd_cache, 0, MAX_PATH_LEN);
c000be63:	83 ec 04             	sub    $0x4,%esp
c000be66:	68 00 02 00 00       	push   $0x200
c000be6b:	6a 00                	push   $0x0
c000be6d:	68 c0 32 01 c0       	push   $0xc00132c0
c000be72:	e8 8e 7b ff ff       	call   c0003a05 <memset>
c000be77:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:140
				strcpy(cwd_cache, final_path);
c000be7a:	83 ec 08             	sub    $0x8,%esp
c000be7d:	68 c0 30 01 c0       	push   $0xc00130c0
c000be82:	68 c0 32 01 c0       	push   $0xc00132c0
c000be87:	e8 ae 7c ff ff       	call   c0003b3a <strcpy>
c000be8c:	83 c4 10             	add    $0x10,%esp
c000be8f:	e9 26 02 00 00       	jmp    c000c0ba <my_shell+0x36f>
/work/x86_os_my/shell/shell.c:142
			}
		} else if (!strcmp("pwd", argv[0])) {
c000be94:	a1 c0 34 01 c0       	mov    0xc00134c0,%eax
c000be99:	83 ec 08             	sub    $0x8,%esp
c000be9c:	50                   	push   %eax
c000be9d:	68 d2 f4 00 c0       	push   $0xc000f4d2
c000bea2:	e8 33 7d ff ff       	call   c0003bda <strcmp>
c000bea7:	83 c4 10             	add    $0x10,%esp
c000beaa:	84 c0                	test   %al,%al
c000beac:	75 1b                	jne    c000bec9 <my_shell+0x17e>
/work/x86_os_my/shell/shell.c:143
			buildin_pwd(argc, argv);
c000beae:	a1 58 2b 01 c0       	mov    0xc0012b58,%eax
c000beb3:	83 ec 08             	sub    $0x8,%esp
c000beb6:	68 c0 34 01 c0       	push   $0xc00134c0
c000bebb:	50                   	push   %eax
c000bebc:	e8 72 04 00 00       	call   c000c333 <buildin_pwd>
c000bec1:	83 c4 10             	add    $0x10,%esp
c000bec4:	e9 f1 01 00 00       	jmp    c000c0ba <my_shell+0x36f>
/work/x86_os_my/shell/shell.c:144
		} else if (!strcmp("ps", argv[0])) {
c000bec9:	a1 c0 34 01 c0       	mov    0xc00134c0,%eax
c000bece:	83 ec 08             	sub    $0x8,%esp
c000bed1:	50                   	push   %eax
c000bed2:	68 d6 f4 00 c0       	push   $0xc000f4d6
c000bed7:	e8 fe 7c ff ff       	call   c0003bda <strcmp>
c000bedc:	83 c4 10             	add    $0x10,%esp
c000bedf:	84 c0                	test   %al,%al
c000bee1:	75 1b                	jne    c000befe <my_shell+0x1b3>
/work/x86_os_my/shell/shell.c:145
			buildin_ps(argc, argv);
c000bee3:	a1 58 2b 01 c0       	mov    0xc0012b58,%eax
c000bee8:	83 ec 08             	sub    $0x8,%esp
c000beeb:	68 c0 34 01 c0       	push   $0xc00134c0
c000bef0:	50                   	push   %eax
c000bef1:	e8 e8 08 00 00       	call   c000c7de <buildin_ps>
c000bef6:	83 c4 10             	add    $0x10,%esp
c000bef9:	e9 bc 01 00 00       	jmp    c000c0ba <my_shell+0x36f>
/work/x86_os_my/shell/shell.c:146
		} else if (!strcmp("clear", argv[0])) {
c000befe:	a1 c0 34 01 c0       	mov    0xc00134c0,%eax
c000bf03:	83 ec 08             	sub    $0x8,%esp
c000bf06:	50                   	push   %eax
c000bf07:	68 d9 f4 00 c0       	push   $0xc000f4d9
c000bf0c:	e8 c9 7c ff ff       	call   c0003bda <strcmp>
c000bf11:	83 c4 10             	add    $0x10,%esp
c000bf14:	84 c0                	test   %al,%al
c000bf16:	75 1b                	jne    c000bf33 <my_shell+0x1e8>
/work/x86_os_my/shell/shell.c:147
			buildin_clear(argc, argv);
c000bf18:	a1 58 2b 01 c0       	mov    0xc0012b58,%eax
c000bf1d:	83 ec 08             	sub    $0x8,%esp
c000bf20:	68 c0 34 01 c0       	push   $0xc00134c0
c000bf25:	50                   	push   %eax
c000bf26:	e8 d8 08 00 00       	call   c000c803 <buildin_clear>
c000bf2b:	83 c4 10             	add    $0x10,%esp
c000bf2e:	e9 87 01 00 00       	jmp    c000c0ba <my_shell+0x36f>
/work/x86_os_my/shell/shell.c:148
		} else if (!strcmp("mkdir", argv[0])){
c000bf33:	a1 c0 34 01 c0       	mov    0xc00134c0,%eax
c000bf38:	83 ec 08             	sub    $0x8,%esp
c000bf3b:	50                   	push   %eax
c000bf3c:	68 df f4 00 c0       	push   $0xc000f4df
c000bf41:	e8 94 7c ff ff       	call   c0003bda <strcmp>
c000bf46:	83 c4 10             	add    $0x10,%esp
c000bf49:	84 c0                	test   %al,%al
c000bf4b:	75 1b                	jne    c000bf68 <my_shell+0x21d>
/work/x86_os_my/shell/shell.c:149
			buildin_mkdir(argc, argv);
c000bf4d:	a1 58 2b 01 c0       	mov    0xc0012b58,%eax
c000bf52:	83 ec 08             	sub    $0x8,%esp
c000bf55:	68 c0 34 01 c0       	push   $0xc00134c0
c000bf5a:	50                   	push   %eax
c000bf5b:	e8 c8 08 00 00       	call   c000c828 <buildin_mkdir>
c000bf60:	83 c4 10             	add    $0x10,%esp
c000bf63:	e9 52 01 00 00       	jmp    c000c0ba <my_shell+0x36f>
/work/x86_os_my/shell/shell.c:150
		} else if (!strcmp("rmdir", argv[0])){
c000bf68:	a1 c0 34 01 c0       	mov    0xc00134c0,%eax
c000bf6d:	83 ec 08             	sub    $0x8,%esp
c000bf70:	50                   	push   %eax
c000bf71:	68 e5 f4 00 c0       	push   $0xc000f4e5
c000bf76:	e8 5f 7c ff ff       	call   c0003bda <strcmp>
c000bf7b:	83 c4 10             	add    $0x10,%esp
c000bf7e:	84 c0                	test   %al,%al
c000bf80:	75 1b                	jne    c000bf9d <my_shell+0x252>
/work/x86_os_my/shell/shell.c:151
			buildin_rmdir(argc, argv);
c000bf82:	a1 58 2b 01 c0       	mov    0xc0012b58,%eax
c000bf87:	83 ec 08             	sub    $0x8,%esp
c000bf8a:	68 c0 34 01 c0       	push   $0xc00134c0
c000bf8f:	50                   	push   %eax
c000bf90:	e8 25 09 00 00       	call   c000c8ba <buildin_rmdir>
c000bf95:	83 c4 10             	add    $0x10,%esp
c000bf98:	e9 1d 01 00 00       	jmp    c000c0ba <my_shell+0x36f>
/work/x86_os_my/shell/shell.c:152
		} else if (!strcmp("rm", argv[0])) {
c000bf9d:	a1 c0 34 01 c0       	mov    0xc00134c0,%eax
c000bfa2:	83 ec 08             	sub    $0x8,%esp
c000bfa5:	50                   	push   %eax
c000bfa6:	68 eb f4 00 c0       	push   $0xc000f4eb
c000bfab:	e8 2a 7c ff ff       	call   c0003bda <strcmp>
c000bfb0:	83 c4 10             	add    $0x10,%esp
c000bfb3:	84 c0                	test   %al,%al
c000bfb5:	75 1b                	jne    c000bfd2 <my_shell+0x287>
/work/x86_os_my/shell/shell.c:153
			buildin_rm(argc, argv);
c000bfb7:	a1 58 2b 01 c0       	mov    0xc0012b58,%eax
c000bfbc:	83 ec 08             	sub    $0x8,%esp
c000bfbf:	68 c0 34 01 c0       	push   $0xc00134c0
c000bfc4:	50                   	push   %eax
c000bfc5:	e8 82 09 00 00       	call   c000c94c <buildin_rm>
c000bfca:	83 c4 10             	add    $0x10,%esp
c000bfcd:	e9 e8 00 00 00       	jmp    c000c0ba <my_shell+0x36f>
/work/x86_os_my/shell/shell.c:155
		} else {	// 如果是外部命令,需要从磁盘上加载
			int32_t pid = fork();
c000bfd2:	e8 32 9b ff ff       	call   c0005b09 <fork>
c000bfd7:	98                   	cwtl   
c000bfd8:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/shell/shell.c:156
			if (pid) {	// 父进程
c000bfdb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c000bfdf:	74 51                	je     c000c032 <my_shell+0x2e7>
/work/x86_os_my/shell/shell.c:158
				int32_t status;
				int32_t child_pid = wait(&status);	// 此时子进程若没有执行exit,my_shell会被阻塞,不再响应键入的命令
c000bfe1:	83 ec 0c             	sub    $0xc,%esp
c000bfe4:	8d 45 e8             	lea    -0x18(%ebp),%eax
c000bfe7:	50                   	push   %eax
c000bfe8:	e8 89 9d ff ff       	call   c0005d76 <wait>
c000bfed:	83 c4 10             	add    $0x10,%esp
c000bff0:	98                   	cwtl   
c000bff1:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/shell/shell.c:159
				if (child_pid == -1) {	// 按理说程序正确的话不会执行到这句,fork出的进程便是shell子进程
c000bff4:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%ebp)
c000bff8:	75 1c                	jne    c000c016 <my_shell+0x2cb>
/work/x86_os_my/shell/shell.c:160
					panic("my_shell: no child\n");
c000bffa:	68 ee f4 00 c0       	push   $0xc000f4ee
c000bfff:	68 74 f5 00 c0       	push   $0xc000f574
c000c004:	68 a0 00 00 00       	push   $0xa0
c000c009:	68 11 f4 00 c0       	push   $0xc000f411
c000c00e:	e8 d3 00 00 00       	call   c000c0e6 <user_spin>
c000c013:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:162
				}
				printf("child_pid %d, it's status: %d\n", child_pid, status);
c000c016:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000c019:	83 ec 04             	sub    $0x4,%esp
c000c01c:	50                   	push   %eax
c000c01d:	ff 75 ec             	pushl  -0x14(%ebp)
c000c020:	68 04 f5 00 c0       	push   $0xc000f504
c000c025:	e8 cc a0 ff ff       	call   c00060f6 <printf>
c000c02a:	83 c4 10             	add    $0x10,%esp
c000c02d:	e9 88 00 00 00       	jmp    c000c0ba <my_shell+0x36f>
/work/x86_os_my/shell/shell.c:164
			} else {	// 子进程
				make_clear_abs_path(argv[0], final_path);
c000c032:	a1 c0 34 01 c0       	mov    0xc00134c0,%eax
c000c037:	83 ec 08             	sub    $0x8,%esp
c000c03a:	68 c0 30 01 c0       	push   $0xc00130c0
c000c03f:	50                   	push   %eax
c000c040:	e8 35 02 00 00       	call   c000c27a <make_clear_abs_path>
c000c045:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:165
				argv[0] = final_path;
c000c048:	c7 05 c0 34 01 c0 c0 	movl   $0xc00130c0,0xc00134c0
c000c04f:	30 01 c0 
/work/x86_os_my/shell/shell.c:168
				/* 先判断下文件是否存在 */
				struct stat file_stat;
				memset(&file_stat, 0, sizeof(struct stat));
c000c052:	83 ec 04             	sub    $0x4,%esp
c000c055:	6a 0c                	push   $0xc
c000c057:	6a 00                	push   $0x0
c000c059:	8d 45 dc             	lea    -0x24(%ebp),%eax
c000c05c:	50                   	push   %eax
c000c05d:	e8 a3 79 ff ff       	call   c0003a05 <memset>
c000c062:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:169
				if (stat(argv[0], &file_stat) == -1) {
c000c065:	a1 c0 34 01 c0       	mov    0xc00134c0,%eax
c000c06a:	83 ec 08             	sub    $0x8,%esp
c000c06d:	8d 55 dc             	lea    -0x24(%ebp),%edx
c000c070:	52                   	push   %edx
c000c071:	50                   	push   %eax
c000c072:	e8 6c 9c ff ff       	call   c0005ce3 <stat>
c000c077:	83 c4 10             	add    $0x10,%esp
c000c07a:	83 f8 ff             	cmp    $0xffffffff,%eax
c000c07d:	75 25                	jne    c000c0a4 <my_shell+0x359>
/work/x86_os_my/shell/shell.c:170
					printf("my_shell: cannot access %s: No such file or directory\n", argv[0]);
c000c07f:	a1 c0 34 01 c0       	mov    0xc00134c0,%eax
c000c084:	83 ec 08             	sub    $0x8,%esp
c000c087:	50                   	push   %eax
c000c088:	68 24 f5 00 c0       	push   $0xc000f524
c000c08d:	e8 64 a0 ff ff       	call   c00060f6 <printf>
c000c092:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:171
					exit(-1);
c000c095:	83 ec 0c             	sub    $0xc,%esp
c000c098:	6a ff                	push   $0xffffffff
c000c09a:	e8 ba 9c ff ff       	call   c0005d59 <exit>
c000c09f:	83 c4 10             	add    $0x10,%esp
c000c0a2:	eb 16                	jmp    c000c0ba <my_shell+0x36f>
/work/x86_os_my/shell/shell.c:173
				} else {
					execv(argv[0], argv);
c000c0a4:	a1 c0 34 01 c0       	mov    0xc00134c0,%eax
c000c0a9:	83 ec 08             	sub    $0x8,%esp
c000c0ac:	68 c0 34 01 c0       	push   $0xc00134c0
c000c0b1:	50                   	push   %eax
c000c0b2:	e8 80 9c ff ff       	call   c0005d37 <execv>
c000c0b7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:178
				}
			}
		}

		int32_t arg_idx = 0;
c000c0ba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/shell/shell.c:179
		while(arg_idx < MAX_ARG_NR) {
c000c0c1:	eb 12                	jmp    c000c0d5 <my_shell+0x38a>
/work/x86_os_my/shell/shell.c:180
			argv[arg_idx] = NULL;
c000c0c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000c0c6:	c7 04 85 c0 34 01 c0 	movl   $0x0,-0x3ffecb40(,%eax,4)
c000c0cd:	00 00 00 00 
/work/x86_os_my/shell/shell.c:181
			arg_idx++;
c000c0d1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/shell/shell.c:179
				}
			}
		}

		int32_t arg_idx = 0;
		while(arg_idx < MAX_ARG_NR) {
c000c0d5:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c000c0d9:	7e e8                	jle    c000c0c3 <my_shell+0x378>
c000c0db:	e9 78 fc ff ff       	jmp    c000bd58 <my_shell+0xd>
/work/x86_os_my/shell/shell.c:126
		print_prompt();
		memset(final_path, 0, MAX_PATH_LEN);
		memset(cmd_line, 0, MAX_PATH_LEN);
		readline(cmd_line, MAX_PATH_LEN);
		if (cmd_line[0] == 0) {	 // 若只键入了一个回车
			continue;
c000c0e0:	90                   	nop
/work/x86_os_my/shell/shell.c:183
		int32_t arg_idx = 0;
		while(arg_idx < MAX_ARG_NR) {
			argv[arg_idx] = NULL;
			arg_idx++;
		}
	}
c000c0e1:	e9 72 fc ff ff       	jmp    c000bd58 <my_shell+0xd>

c000c0e6 <user_spin>:
user_spin():
/work/x86_os_my/lib/user/assert.c:3
#include "assert.h"
#include "stdio.h"
void user_spin(char* filename, int line, const char* func, const char* condition) {
c000c0e6:	55                   	push   %ebp
c000c0e7:	89 e5                	mov    %esp,%ebp
c000c0e9:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/lib/user/assert.c:4
	printf("\n\n\n\nfilename %s\nline %d\nfunction %s\ncondition %s\n", filename, line, func, condition);
c000c0ec:	83 ec 0c             	sub    $0xc,%esp
c000c0ef:	ff 75 14             	pushl  0x14(%ebp)
c000c0f2:	ff 75 10             	pushl  0x10(%ebp)
c000c0f5:	ff 75 0c             	pushl  0xc(%ebp)
c000c0f8:	ff 75 08             	pushl  0x8(%ebp)
c000c0fb:	68 80 f5 00 c0       	push   $0xc000f580
c000c100:	e8 f1 9f ff ff       	call   c00060f6 <printf>
c000c105:	83 c4 20             	add    $0x20,%esp
/work/x86_os_my/lib/user/assert.c:5 (discriminator 1)
	while(1);
c000c108:	eb fe                	jmp    c000c108 <user_spin+0x22>

c000c10a <wash_path>:
wash_path():
/work/x86_os_my/shell/buildin_cmd.c:16
/* 将路径old_abs_path中的..和.转换为实际路径后存入new_abs_path */
// 从左到右解析 old_abs_path 路径中的每一层，
// 若解析出来的目录名不是“..”，就将其连接到 new_abs_path
// 若是“ ..” , 就将 new_abs_path 的最后一层目录去掉。
// 若是“ . ” , 就什么都不做
static void wash_path(char* old_abs_path, char* new_abs_path) {
c000c10a:	55                   	push   %ebp
c000c10b:	89 e5                	mov    %esp,%ebp
c000c10d:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/shell/buildin_cmd.c:17
	assert(old_abs_path[0] == '/');
c000c110:	8b 45 08             	mov    0x8(%ebp),%eax
c000c113:	0f b6 00             	movzbl (%eax),%eax
c000c116:	3c 2f                	cmp    $0x2f,%al
c000c118:	74 19                	je     c000c133 <wash_path+0x29>
/work/x86_os_my/shell/buildin_cmd.c:17 (discriminator 1)
c000c11a:	68 b4 f5 00 c0       	push   $0xc000f5b4
c000c11f:	68 a8 f8 00 c0       	push   $0xc000f8a8
c000c124:	6a 11                	push   $0x11
c000c126:	68 cb f5 00 c0       	push   $0xc000f5cb
c000c12b:	e8 b6 ff ff ff       	call   c000c0e6 <user_spin>
c000c130:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:18
	char name[MAX_FILE_NAME_LEN] = {0};    
c000c133:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c000c13a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c000c141:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c000c148:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:19
	char* sub_path = old_abs_path;
c000c14f:	8b 45 08             	mov    0x8(%ebp),%eax
c000c152:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:20
	sub_path = path_parse(sub_path, name);
c000c155:	83 ec 08             	sub    $0x8,%esp
c000c158:	8d 45 e0             	lea    -0x20(%ebp),%eax
c000c15b:	50                   	push   %eax
c000c15c:	ff 75 f4             	pushl  -0xc(%ebp)
c000c15f:	e8 3d b4 ff ff       	call   c00075a1 <path_parse>
c000c164:	83 c4 10             	add    $0x10,%esp
c000c167:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:21
	if (name[0] == 0) {	// 若只键入了"/",直接将"/"存入new_abs_path后返回 
c000c16a:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c000c16e:	84 c0                	test   %al,%al
c000c170:	75 14                	jne    c000c186 <wash_path+0x7c>
/work/x86_os_my/shell/buildin_cmd.c:22
		new_abs_path[0] = '/';
c000c172:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c175:	c6 00 2f             	movb   $0x2f,(%eax)
/work/x86_os_my/shell/buildin_cmd.c:23
		new_abs_path[1] = 0;
c000c178:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c17b:	83 c0 01             	add    $0x1,%eax
c000c17e:	c6 00 00             	movb   $0x0,(%eax)
c000c181:	e9 f2 00 00 00       	jmp    c000c278 <wash_path+0x16e>
/work/x86_os_my/shell/buildin_cmd.c:26
		return;
	}
	new_abs_path[0] = 0;	// 避免传给new_abs_path的缓冲区不干净
c000c186:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c189:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/shell/buildin_cmd.c:27
	strcat(new_abs_path, "/");
c000c18c:	83 ec 08             	sub    $0x8,%esp
c000c18f:	68 df f5 00 c0       	push   $0xc000f5df
c000c194:	ff 75 0c             	pushl  0xc(%ebp)
c000c197:	e8 6d 7b ff ff       	call   c0003d09 <strcat>
c000c19c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:28
	while (name[0]) {
c000c19f:	e9 c8 00 00 00       	jmp    c000c26c <wash_path+0x162>
/work/x86_os_my/shell/buildin_cmd.c:30
		/* 如果是上一级目录“..” */
		if (!strcmp("..", name)) {
c000c1a4:	83 ec 08             	sub    $0x8,%esp
c000c1a7:	8d 45 e0             	lea    -0x20(%ebp),%eax
c000c1aa:	50                   	push   %eax
c000c1ab:	68 e1 f5 00 c0       	push   $0xc000f5e1
c000c1b0:	e8 25 7a ff ff       	call   c0003bda <strcmp>
c000c1b5:	83 c4 10             	add    $0x10,%esp
c000c1b8:	84 c0                	test   %al,%al
c000c1ba:	75 2e                	jne    c000c1ea <wash_path+0xe0>
/work/x86_os_my/shell/buildin_cmd.c:31
			char* slash_ptr =  strrchr(new_abs_path, '/');
c000c1bc:	83 ec 08             	sub    $0x8,%esp
c000c1bf:	6a 2f                	push   $0x2f
c000c1c1:	ff 75 0c             	pushl  0xc(%ebp)
c000c1c4:	e8 e2 7a ff ff       	call   c0003cab <strrchr>
c000c1c9:	83 c4 10             	add    $0x10,%esp
c000c1cc:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:34
			/*如果未到new_abs_path中的顶层目录,就将最右边的'/'替换为0,
			这样便去除了new_abs_path中最后一层路径,相当于到了上一级目录 */
			if (slash_ptr != new_abs_path) {	// 如new_abs_path为“/a/b”,".."之后则变为“/a”
c000c1cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000c1d2:	3b 45 0c             	cmp    0xc(%ebp),%eax
c000c1d5:	74 08                	je     c000c1df <wash_path+0xd5>
/work/x86_os_my/shell/buildin_cmd.c:35
				*slash_ptr = 0;
c000c1d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000c1da:	c6 00 00             	movb   $0x0,(%eax)
c000c1dd:	eb 5f                	jmp    c000c23e <wash_path+0x134>
/work/x86_os_my/shell/buildin_cmd.c:39
			} else {	// 如new_abs_path为"/a",".."之后则变为"/"
				/* 若new_abs_path中只有1个'/',即表示已经到了顶层目录,
				就将下一个字符置为结束符0. */
				*(slash_ptr + 1) = 0;
c000c1df:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000c1e2:	83 c0 01             	add    $0x1,%eax
c000c1e5:	c6 00 00             	movb   $0x0,(%eax)
c000c1e8:	eb 54                	jmp    c000c23e <wash_path+0x134>
/work/x86_os_my/shell/buildin_cmd.c:41
			}
		} else if (strcmp(".", name)) {	// 如果路径不是‘.’,就将name拼接到new_abs_path
c000c1ea:	83 ec 08             	sub    $0x8,%esp
c000c1ed:	8d 45 e0             	lea    -0x20(%ebp),%eax
c000c1f0:	50                   	push   %eax
c000c1f1:	68 e4 f5 00 c0       	push   $0xc000f5e4
c000c1f6:	e8 df 79 ff ff       	call   c0003bda <strcmp>
c000c1fb:	83 c4 10             	add    $0x10,%esp
c000c1fe:	84 c0                	test   %al,%al
c000c200:	74 3c                	je     c000c23e <wash_path+0x134>
/work/x86_os_my/shell/buildin_cmd.c:42
			if (strcmp(new_abs_path, "/")) {	// 如果new_abs_path不是"/",就拼接一个"/",此处的判断是为了避免路径开头变成这样"//"
c000c202:	83 ec 08             	sub    $0x8,%esp
c000c205:	68 df f5 00 c0       	push   $0xc000f5df
c000c20a:	ff 75 0c             	pushl  0xc(%ebp)
c000c20d:	e8 c8 79 ff ff       	call   c0003bda <strcmp>
c000c212:	83 c4 10             	add    $0x10,%esp
c000c215:	84 c0                	test   %al,%al
c000c217:	74 13                	je     c000c22c <wash_path+0x122>
/work/x86_os_my/shell/buildin_cmd.c:43
				strcat(new_abs_path, "/");
c000c219:	83 ec 08             	sub    $0x8,%esp
c000c21c:	68 df f5 00 c0       	push   $0xc000f5df
c000c221:	ff 75 0c             	pushl  0xc(%ebp)
c000c224:	e8 e0 7a ff ff       	call   c0003d09 <strcat>
c000c229:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:45
			}
			strcat(new_abs_path, name);
c000c22c:	83 ec 08             	sub    $0x8,%esp
c000c22f:	8d 45 e0             	lea    -0x20(%ebp),%eax
c000c232:	50                   	push   %eax
c000c233:	ff 75 0c             	pushl  0xc(%ebp)
c000c236:	e8 ce 7a ff ff       	call   c0003d09 <strcat>
c000c23b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:49
		}	// 若name为当前目录".",无须处理new_abs_path

		/* 继续遍历下一层路径 */
		memset(name, 0, MAX_FILE_NAME_LEN);
c000c23e:	83 ec 04             	sub    $0x4,%esp
c000c241:	6a 10                	push   $0x10
c000c243:	6a 00                	push   $0x0
c000c245:	8d 45 e0             	lea    -0x20(%ebp),%eax
c000c248:	50                   	push   %eax
c000c249:	e8 b7 77 ff ff       	call   c0003a05 <memset>
c000c24e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:50
		if (sub_path) {
c000c251:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c000c255:	74 15                	je     c000c26c <wash_path+0x162>
/work/x86_os_my/shell/buildin_cmd.c:51
			sub_path = path_parse(sub_path, name);
c000c257:	83 ec 08             	sub    $0x8,%esp
c000c25a:	8d 45 e0             	lea    -0x20(%ebp),%eax
c000c25d:	50                   	push   %eax
c000c25e:	ff 75 f4             	pushl  -0xc(%ebp)
c000c261:	e8 3b b3 ff ff       	call   c00075a1 <path_parse>
c000c266:	83 c4 10             	add    $0x10,%esp
c000c269:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:28
		new_abs_path[1] = 0;
		return;
	}
	new_abs_path[0] = 0;	// 避免传给new_abs_path的缓冲区不干净
	strcat(new_abs_path, "/");
	while (name[0]) {
c000c26c:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c000c270:	84 c0                	test   %al,%al
c000c272:	0f 85 2c ff ff ff    	jne    c000c1a4 <wash_path+0x9a>
/work/x86_os_my/shell/buildin_cmd.c:54
		memset(name, 0, MAX_FILE_NAME_LEN);
		if (sub_path) {
			sub_path = path_parse(sub_path, name);
		}
	}
}
c000c278:	c9                   	leave  
c000c279:	c3                   	ret    

c000c27a <make_clear_abs_path>:
make_clear_abs_path():
/work/x86_os_my/shell/buildin_cmd.c:60

/* 相对路径，转换成绝对路径，应该给用户层做，陷入内核态之后的操作不应该过长。
 * 当前工作路径 + 相对路径 = 绝对路径
 */
/* 将path处理成不含..和.的绝对路径,存储在final_path */
void make_clear_abs_path(char* path, char* final_path) {
c000c27a:	55                   	push   %ebp
c000c27b:	89 e5                	mov    %esp,%ebp
c000c27d:	57                   	push   %edi
c000c27e:	81 ec 04 02 00 00    	sub    $0x204,%esp
/work/x86_os_my/shell/buildin_cmd.c:61
	char abs_path[MAX_PATH_LEN] = {0};
c000c284:	8d 95 f8 fd ff ff    	lea    -0x208(%ebp),%edx
c000c28a:	b8 00 00 00 00       	mov    $0x0,%eax
c000c28f:	b9 80 00 00 00       	mov    $0x80,%ecx
c000c294:	89 d7                	mov    %edx,%edi
c000c296:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/shell/buildin_cmd.c:63
	/* 先判断是否输入的是绝对路径 */
	if (path[0] != '/') {	// 若输入的不是绝对路径,就拼接成绝对路径
c000c298:	8b 45 08             	mov    0x8(%ebp),%eax
c000c29b:	0f b6 00             	movzbl (%eax),%eax
c000c29e:	3c 2f                	cmp    $0x2f,%al
c000c2a0:	74 61                	je     c000c303 <make_clear_abs_path+0x89>
/work/x86_os_my/shell/buildin_cmd.c:64
		memset(abs_path, 0, MAX_PATH_LEN);
c000c2a2:	83 ec 04             	sub    $0x4,%esp
c000c2a5:	68 00 02 00 00       	push   $0x200
c000c2aa:	6a 00                	push   $0x0
c000c2ac:	8d 85 f8 fd ff ff    	lea    -0x208(%ebp),%eax
c000c2b2:	50                   	push   %eax
c000c2b3:	e8 4d 77 ff ff       	call   c0003a05 <memset>
c000c2b8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:65
		if (getcwd(abs_path, MAX_PATH_LEN) != NULL) {
c000c2bb:	83 ec 08             	sub    $0x8,%esp
c000c2be:	68 00 02 00 00       	push   $0x200
c000c2c3:	8d 85 f8 fd ff ff    	lea    -0x208(%ebp),%eax
c000c2c9:	50                   	push   %eax
c000c2ca:	e8 a9 98 ff ff       	call   c0005b78 <getcwd>
c000c2cf:	83 c4 10             	add    $0x10,%esp
c000c2d2:	85 c0                	test   %eax,%eax
c000c2d4:	74 2d                	je     c000c303 <make_clear_abs_path+0x89>
/work/x86_os_my/shell/buildin_cmd.c:66
			if (!((abs_path[0] == '/') && (abs_path[1] == 0))) {	// 若abs_path表示的当前目录不是根目录/
c000c2d6:	0f b6 85 f8 fd ff ff 	movzbl -0x208(%ebp),%eax
c000c2dd:	3c 2f                	cmp    $0x2f,%al
c000c2df:	75 0b                	jne    c000c2ec <make_clear_abs_path+0x72>
/work/x86_os_my/shell/buildin_cmd.c:66 (discriminator 1)
c000c2e1:	0f b6 85 f9 fd ff ff 	movzbl -0x207(%ebp),%eax
c000c2e8:	84 c0                	test   %al,%al
c000c2ea:	74 17                	je     c000c303 <make_clear_abs_path+0x89>
/work/x86_os_my/shell/buildin_cmd.c:67
				strcat(abs_path, "/");
c000c2ec:	83 ec 08             	sub    $0x8,%esp
c000c2ef:	68 df f5 00 c0       	push   $0xc000f5df
c000c2f4:	8d 85 f8 fd ff ff    	lea    -0x208(%ebp),%eax
c000c2fa:	50                   	push   %eax
c000c2fb:	e8 09 7a ff ff       	call   c0003d09 <strcat>
c000c300:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:71
			}
		}
	}
	strcat(abs_path, path);
c000c303:	83 ec 08             	sub    $0x8,%esp
c000c306:	ff 75 08             	pushl  0x8(%ebp)
c000c309:	8d 85 f8 fd ff ff    	lea    -0x208(%ebp),%eax
c000c30f:	50                   	push   %eax
c000c310:	e8 f4 79 ff ff       	call   c0003d09 <strcat>
c000c315:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:72
	wash_path(abs_path, final_path);
c000c318:	83 ec 08             	sub    $0x8,%esp
c000c31b:	ff 75 0c             	pushl  0xc(%ebp)
c000c31e:	8d 85 f8 fd ff ff    	lea    -0x208(%ebp),%eax
c000c324:	50                   	push   %eax
c000c325:	e8 e0 fd ff ff       	call   c000c10a <wash_path>
c000c32a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:73
}
c000c32d:	90                   	nop
c000c32e:	8b 7d fc             	mov    -0x4(%ebp),%edi
c000c331:	c9                   	leave  
c000c332:	c3                   	ret    

c000c333 <buildin_pwd>:
buildin_pwd():
/work/x86_os_my/shell/buildin_cmd.c:77


/* pwd命令的内建函数 */
void buildin_pwd(uint32_t argc, char** argv UNUSED) {
c000c333:	55                   	push   %ebp
c000c334:	89 e5                	mov    %esp,%ebp
c000c336:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/shell/buildin_cmd.c:78
	if (argc != 1) {
c000c339:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c000c33d:	74 12                	je     c000c351 <buildin_pwd+0x1e>
/work/x86_os_my/shell/buildin_cmd.c:79
		printf("pwd: no argument support!\n");
c000c33f:	83 ec 0c             	sub    $0xc,%esp
c000c342:	68 e6 f5 00 c0       	push   $0xc000f5e6
c000c347:	e8 aa 9d ff ff       	call   c00060f6 <printf>
c000c34c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:80
		return;
c000c34f:	eb 40                	jmp    c000c391 <buildin_pwd+0x5e>
/work/x86_os_my/shell/buildin_cmd.c:82
	} else {
		if (NULL != getcwd(final_path, MAX_PATH_LEN)) {
c000c351:	83 ec 08             	sub    $0x8,%esp
c000c354:	68 00 02 00 00       	push   $0x200
c000c359:	68 c0 30 01 c0       	push   $0xc00130c0
c000c35e:	e8 15 98 ff ff       	call   c0005b78 <getcwd>
c000c363:	83 c4 10             	add    $0x10,%esp
c000c366:	85 c0                	test   %eax,%eax
c000c368:	74 17                	je     c000c381 <buildin_pwd+0x4e>
/work/x86_os_my/shell/buildin_cmd.c:83
			printf("%s\n", final_path);
c000c36a:	83 ec 08             	sub    $0x8,%esp
c000c36d:	68 c0 30 01 c0       	push   $0xc00130c0
c000c372:	68 01 f6 00 c0       	push   $0xc000f601
c000c377:	e8 7a 9d ff ff       	call   c00060f6 <printf>
c000c37c:	83 c4 10             	add    $0x10,%esp
c000c37f:	eb 10                	jmp    c000c391 <buildin_pwd+0x5e>
/work/x86_os_my/shell/buildin_cmd.c:85
		} else {
			printf("pwd: get current work directory failed.\n");
c000c381:	83 ec 0c             	sub    $0xc,%esp
c000c384:	68 08 f6 00 c0       	push   $0xc000f608
c000c389:	e8 68 9d ff ff       	call   c00060f6 <printf>
c000c38e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:88
		}
	}
}
c000c391:	c9                   	leave  
c000c392:	c3                   	ret    

c000c393 <buildin_cd>:
buildin_cd():
/work/x86_os_my/shell/buildin_cmd.c:91

/* cd命令的内建函数 */
char* buildin_cd(uint32_t argc, char** argv) {
c000c393:	55                   	push   %ebp
c000c394:	89 e5                	mov    %esp,%ebp
c000c396:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/shell/buildin_cmd.c:92
	if (argc > 2) {
c000c399:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c000c39d:	76 17                	jbe    c000c3b6 <buildin_cd+0x23>
/work/x86_os_my/shell/buildin_cmd.c:93
		printf("cd: only support 1 argument!\n");
c000c39f:	83 ec 0c             	sub    $0xc,%esp
c000c3a2:	68 31 f6 00 c0       	push   $0xc000f631
c000c3a7:	e8 4a 9d ff ff       	call   c00060f6 <printf>
c000c3ac:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:94
		return NULL;
c000c3af:	b8 00 00 00 00       	mov    $0x0,%eax
c000c3b4:	eb 65                	jmp    c000c41b <buildin_cd+0x88>
/work/x86_os_my/shell/buildin_cmd.c:98
	}

	/* 若是只键入cd而无参数,直接返回到根目录. */
	if (argc == 1) {
c000c3b6:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c000c3ba:	75 10                	jne    c000c3cc <buildin_cd+0x39>
/work/x86_os_my/shell/buildin_cmd.c:99
		final_path[0] = '/';
c000c3bc:	c6 05 c0 30 01 c0 2f 	movb   $0x2f,0xc00130c0
/work/x86_os_my/shell/buildin_cmd.c:100
		final_path[1] = 0;
c000c3c3:	c6 05 c1 30 01 c0 00 	movb   $0x0,0xc00130c1
c000c3ca:	eb 19                	jmp    c000c3e5 <buildin_cd+0x52>
/work/x86_os_my/shell/buildin_cmd.c:102
	} else {
		make_clear_abs_path(argv[1], final_path);
c000c3cc:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c3cf:	83 c0 04             	add    $0x4,%eax
c000c3d2:	8b 00                	mov    (%eax),%eax
c000c3d4:	83 ec 08             	sub    $0x8,%esp
c000c3d7:	68 c0 30 01 c0       	push   $0xc00130c0
c000c3dc:	50                   	push   %eax
c000c3dd:	e8 98 fe ff ff       	call   c000c27a <make_clear_abs_path>
c000c3e2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:105
	}

	if (chdir(final_path) == -1) {
c000c3e5:	83 ec 0c             	sub    $0xc,%esp
c000c3e8:	68 c0 30 01 c0       	push   $0xc00130c0
c000c3ed:	e8 13 99 ff ff       	call   c0005d05 <chdir>
c000c3f2:	83 c4 10             	add    $0x10,%esp
c000c3f5:	83 f8 ff             	cmp    $0xffffffff,%eax
c000c3f8:	75 1c                	jne    c000c416 <buildin_cd+0x83>
/work/x86_os_my/shell/buildin_cmd.c:106
		printf("cd: no such directory %s\n", final_path);
c000c3fa:	83 ec 08             	sub    $0x8,%esp
c000c3fd:	68 c0 30 01 c0       	push   $0xc00130c0
c000c402:	68 4f f6 00 c0       	push   $0xc000f64f
c000c407:	e8 ea 9c ff ff       	call   c00060f6 <printf>
c000c40c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:107
		return NULL;
c000c40f:	b8 00 00 00 00       	mov    $0x0,%eax
c000c414:	eb 05                	jmp    c000c41b <buildin_cd+0x88>
/work/x86_os_my/shell/buildin_cmd.c:109
	}
	return final_path;
c000c416:	b8 c0 30 01 c0       	mov    $0xc00130c0,%eax
/work/x86_os_my/shell/buildin_cmd.c:110
}
c000c41b:	c9                   	leave  
c000c41c:	c3                   	ret    

c000c41d <buildin_ls>:
buildin_ls():
/work/x86_os_my/shell/buildin_cmd.c:113

/* ls命令的内建函数 */
void buildin_ls(uint32_t argc, char** argv) {
c000c41d:	55                   	push   %ebp
c000c41e:	89 e5                	mov    %esp,%ebp
c000c420:	57                   	push   %edi
c000c421:	53                   	push   %ebx
c000c422:	81 ec 30 02 00 00    	sub    $0x230,%esp
/work/x86_os_my/shell/buildin_cmd.c:114
	char* pathname = NULL;
c000c428:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:116
	struct stat file_stat;
	memset(&file_stat, 0, sizeof(struct stat));
c000c42f:	83 ec 04             	sub    $0x4,%esp
c000c432:	6a 0c                	push   $0xc
c000c434:	6a 00                	push   $0x0
c000c436:	8d 45 c8             	lea    -0x38(%ebp),%eax
c000c439:	50                   	push   %eax
c000c43a:	e8 c6 75 ff ff       	call   c0003a05 <memset>
c000c43f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:117
	bool long_info = false;
c000c442:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:118
	uint32_t arg_path_nr = 0;
c000c449:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:119
	uint32_t arg_idx = 1;   // 跨过argv[0],argv[0]是字符串“ls”
c000c450:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:120
	while (arg_idx < argc) {
c000c457:	e9 ec 00 00 00       	jmp    c000c548 <buildin_ls+0x12b>
/work/x86_os_my/shell/buildin_cmd.c:121
		if (argv[arg_idx][0] == '-') {	  // 如果是选项,单词的首字符是-
c000c45c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000c45f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000c466:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c469:	01 d0                	add    %edx,%eax
c000c46b:	8b 00                	mov    (%eax),%eax
c000c46d:	0f b6 00             	movzbl (%eax),%eax
c000c470:	3c 2d                	cmp    $0x2d,%al
c000c472:	0f 85 94 00 00 00    	jne    c000c50c <buildin_ls+0xef>
/work/x86_os_my/shell/buildin_cmd.c:122
			if (!strcmp("-l", argv[arg_idx])) {         // 如果是参数-l
c000c478:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000c47b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000c482:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c485:	01 d0                	add    %edx,%eax
c000c487:	8b 00                	mov    (%eax),%eax
c000c489:	83 ec 08             	sub    $0x8,%esp
c000c48c:	50                   	push   %eax
c000c48d:	68 69 f6 00 c0       	push   $0xc000f669
c000c492:	e8 43 77 ff ff       	call   c0003bda <strcmp>
c000c497:	83 c4 10             	add    $0x10,%esp
c000c49a:	84 c0                	test   %al,%al
c000c49c:	75 0c                	jne    c000c4aa <buildin_ls+0x8d>
/work/x86_os_my/shell/buildin_cmd.c:123
				long_info = true;
c000c49e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c000c4a5:	e9 9a 00 00 00       	jmp    c000c544 <buildin_ls+0x127>
/work/x86_os_my/shell/buildin_cmd.c:124
			} else if (!strcmp("-h", argv[arg_idx])) {   // 参数-h
c000c4aa:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000c4ad:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000c4b4:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c4b7:	01 d0                	add    %edx,%eax
c000c4b9:	8b 00                	mov    (%eax),%eax
c000c4bb:	83 ec 08             	sub    $0x8,%esp
c000c4be:	50                   	push   %eax
c000c4bf:	68 6c f6 00 c0       	push   $0xc000f66c
c000c4c4:	e8 11 77 ff ff       	call   c0003bda <strcmp>
c000c4c9:	83 c4 10             	add    $0x10,%esp
c000c4cc:	84 c0                	test   %al,%al
c000c4ce:	75 15                	jne    c000c4e5 <buildin_ls+0xc8>
/work/x86_os_my/shell/buildin_cmd.c:125
				printf("usage: -l list all infomation about the file.\n-h for help\nlist all files in the current dirctory if no option\n");
c000c4d0:	83 ec 0c             	sub    $0xc,%esp
c000c4d3:	68 70 f6 00 c0       	push   $0xc000f670
c000c4d8:	e8 19 9c ff ff       	call   c00060f6 <printf>
c000c4dd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:126
				return;
c000c4e0:	e9 f2 02 00 00       	jmp    c000c7d7 <buildin_ls+0x3ba>
/work/x86_os_my/shell/buildin_cmd.c:128
			} else {	// 只支持-h -l两个选项
				printf("ls: invalid option %s\nTry `ls -h' for more information.\n", argv[arg_idx]);
c000c4e5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000c4e8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000c4ef:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c4f2:	01 d0                	add    %edx,%eax
c000c4f4:	8b 00                	mov    (%eax),%eax
c000c4f6:	83 ec 08             	sub    $0x8,%esp
c000c4f9:	50                   	push   %eax
c000c4fa:	68 e0 f6 00 c0       	push   $0xc000f6e0
c000c4ff:	e8 f2 9b ff ff       	call   c00060f6 <printf>
c000c504:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:129
				return;
c000c507:	e9 cb 02 00 00       	jmp    c000c7d7 <buildin_ls+0x3ba>
/work/x86_os_my/shell/buildin_cmd.c:132
			}
		} else {	     // ls的路径参数
			if (arg_path_nr == 0) {
c000c50c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c000c510:	75 1d                	jne    c000c52f <buildin_ls+0x112>
/work/x86_os_my/shell/buildin_cmd.c:133
				pathname = argv[arg_idx];
c000c512:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000c515:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000c51c:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c51f:	01 d0                	add    %edx,%eax
c000c521:	8b 00                	mov    (%eax),%eax
c000c523:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:134
				arg_path_nr = 1;
c000c526:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
c000c52d:	eb 15                	jmp    c000c544 <buildin_ls+0x127>
/work/x86_os_my/shell/buildin_cmd.c:136
			} else {
				printf("ls: only support one path\n");
c000c52f:	83 ec 0c             	sub    $0xc,%esp
c000c532:	68 19 f7 00 c0       	push   $0xc000f719
c000c537:	e8 ba 9b ff ff       	call   c00060f6 <printf>
c000c53c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:137
				return;
c000c53f:	e9 93 02 00 00       	jmp    c000c7d7 <buildin_ls+0x3ba>
/work/x86_os_my/shell/buildin_cmd.c:140
			}
		}
		arg_idx++;
c000c544:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:120
	struct stat file_stat;
	memset(&file_stat, 0, sizeof(struct stat));
	bool long_info = false;
	uint32_t arg_path_nr = 0;
	uint32_t arg_idx = 1;   // 跨过argv[0],argv[0]是字符串“ls”
	while (arg_idx < argc) {
c000c548:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000c54b:	3b 45 08             	cmp    0x8(%ebp),%eax
c000c54e:	0f 82 08 ff ff ff    	jb     c000c45c <buildin_ls+0x3f>
/work/x86_os_my/shell/buildin_cmd.c:143
			}
		}
		arg_idx++;
	}

	if (pathname == NULL) {	 // 若只输入了ls 或 ls -l,没有输入操作路径,默认以当前路径的绝对路径为参数.
c000c554:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c000c558:	75 37                	jne    c000c591 <buildin_ls+0x174>
/work/x86_os_my/shell/buildin_cmd.c:144
		if (NULL != getcwd(final_path, MAX_PATH_LEN)) {
c000c55a:	83 ec 08             	sub    $0x8,%esp
c000c55d:	68 00 02 00 00       	push   $0x200
c000c562:	68 c0 30 01 c0       	push   $0xc00130c0
c000c567:	e8 0c 96 ff ff       	call   c0005b78 <getcwd>
c000c56c:	83 c4 10             	add    $0x10,%esp
c000c56f:	85 c0                	test   %eax,%eax
c000c571:	74 09                	je     c000c57c <buildin_ls+0x15f>
/work/x86_os_my/shell/buildin_cmd.c:145
			pathname = final_path;
c000c573:	c7 45 f4 c0 30 01 c0 	movl   $0xc00130c0,-0xc(%ebp)
c000c57a:	eb 2f                	jmp    c000c5ab <buildin_ls+0x18e>
/work/x86_os_my/shell/buildin_cmd.c:147
		} else {
			printf("ls: getcwd for default path failed\n");
c000c57c:	83 ec 0c             	sub    $0xc,%esp
c000c57f:	68 34 f7 00 c0       	push   $0xc000f734
c000c584:	e8 6d 9b ff ff       	call   c00060f6 <printf>
c000c589:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:148
			return;
c000c58c:	e9 46 02 00 00       	jmp    c000c7d7 <buildin_ls+0x3ba>
/work/x86_os_my/shell/buildin_cmd.c:151
		}
	} else {
		make_clear_abs_path(pathname, final_path);
c000c591:	83 ec 08             	sub    $0x8,%esp
c000c594:	68 c0 30 01 c0       	push   $0xc00130c0
c000c599:	ff 75 f4             	pushl  -0xc(%ebp)
c000c59c:	e8 d9 fc ff ff       	call   c000c27a <make_clear_abs_path>
c000c5a1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:152
		pathname = final_path;
c000c5a4:	c7 45 f4 c0 30 01 c0 	movl   $0xc00130c0,-0xc(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:155
	}

	if (stat(pathname, &file_stat) == -1) {
c000c5ab:	83 ec 08             	sub    $0x8,%esp
c000c5ae:	8d 45 c8             	lea    -0x38(%ebp),%eax
c000c5b1:	50                   	push   %eax
c000c5b2:	ff 75 f4             	pushl  -0xc(%ebp)
c000c5b5:	e8 29 97 ff ff       	call   c0005ce3 <stat>
c000c5ba:	83 c4 10             	add    $0x10,%esp
c000c5bd:	83 f8 ff             	cmp    $0xffffffff,%eax
c000c5c0:	75 18                	jne    c000c5da <buildin_ls+0x1bd>
/work/x86_os_my/shell/buildin_cmd.c:156
		printf("ls: cannot access %s: No such file or directory\n", pathname);
c000c5c2:	83 ec 08             	sub    $0x8,%esp
c000c5c5:	ff 75 f4             	pushl  -0xc(%ebp)
c000c5c8:	68 58 f7 00 c0       	push   $0xc000f758
c000c5cd:	e8 24 9b ff ff       	call   c00060f6 <printf>
c000c5d2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:157
		return;
c000c5d5:	e9 fd 01 00 00       	jmp    c000c7d7 <buildin_ls+0x3ba>
/work/x86_os_my/shell/buildin_cmd.c:159
	}
	if (file_stat.st_filetype == FT_DIRECTORY) {
c000c5da:	8b 45 d0             	mov    -0x30(%ebp),%eax
c000c5dd:	83 f8 02             	cmp    $0x2,%eax
c000c5e0:	0f 85 be 01 00 00    	jne    c000c7a4 <buildin_ls+0x387>
/work/x86_os_my/shell/buildin_cmd.c:160
		struct dir* dir = opendir(pathname);
c000c5e6:	83 ec 0c             	sub    $0xc,%esp
c000c5e9:	ff 75 f4             	pushl  -0xc(%ebp)
c000c5ec:	e8 59 96 ff ff       	call   c0005c4a <opendir>
c000c5f1:	83 c4 10             	add    $0x10,%esp
c000c5f4:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:161
		struct dir_entry* dir_e = NULL;
c000c5f7:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:162
		char sub_pathname[MAX_PATH_LEN] = {0};
c000c5fe:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
c000c604:	b8 00 00 00 00       	mov    $0x0,%eax
c000c609:	b9 80 00 00 00       	mov    $0x80,%ecx
c000c60e:	89 d7                	mov    %edx,%edi
c000c610:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/shell/buildin_cmd.c:163
		uint32_t pathname_len = strlen(pathname);
c000c612:	83 ec 0c             	sub    $0xc,%esp
c000c615:	ff 75 f4             	pushl  -0xc(%ebp)
c000c618:	e8 72 75 ff ff       	call   c0003b8f <strlen>
c000c61d:	83 c4 10             	add    $0x10,%esp
c000c620:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:164
		uint32_t last_char_idx = pathname_len - 1;
c000c623:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000c626:	83 e8 01             	sub    $0x1,%eax
c000c629:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:165
		memcpy(sub_pathname, pathname, pathname_len);
c000c62c:	83 ec 04             	sub    $0x4,%esp
c000c62f:	ff 75 e4             	pushl  -0x1c(%ebp)
c000c632:	ff 75 f4             	pushl  -0xc(%ebp)
c000c635:	8d 85 c8 fd ff ff    	lea    -0x238(%ebp),%eax
c000c63b:	50                   	push   %eax
c000c63c:	e8 16 74 ff ff       	call   c0003a57 <memcpy>
c000c641:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:166
		if (sub_pathname[last_char_idx] != '/') {
c000c644:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
c000c64a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000c64d:	01 d0                	add    %edx,%eax
c000c64f:	0f b6 00             	movzbl (%eax),%eax
c000c652:	3c 2f                	cmp    $0x2f,%al
c000c654:	74 12                	je     c000c668 <buildin_ls+0x24b>
/work/x86_os_my/shell/buildin_cmd.c:167
			sub_pathname[pathname_len] = '/';
c000c656:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
c000c65c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000c65f:	01 d0                	add    %edx,%eax
c000c661:	c6 00 2f             	movb   $0x2f,(%eax)
/work/x86_os_my/shell/buildin_cmd.c:168
			pathname_len++;
c000c664:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:170
		}
		rewinddir(dir);
c000c668:	83 ec 0c             	sub    $0xc,%esp
c000c66b:	ff 75 dc             	pushl  -0x24(%ebp)
c000c66e:	e8 53 96 ff ff       	call   c0005cc6 <rewinddir>
c000c673:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:171
		if (long_info) {
c000c676:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c000c67a:	0f 84 ed 00 00 00    	je     c000c76d <buildin_ls+0x350>
/work/x86_os_my/shell/buildin_cmd.c:173
			char ftype;
			printf("total: %d\n", file_stat.st_size);
c000c680:	8b 45 cc             	mov    -0x34(%ebp),%eax
c000c683:	83 ec 08             	sub    $0x8,%esp
c000c686:	50                   	push   %eax
c000c687:	68 89 f7 00 c0       	push   $0xc000f789
c000c68c:	e8 65 9a ff ff       	call   c00060f6 <printf>
c000c691:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:174
			while((dir_e = readdir(dir))) {
c000c694:	e9 a3 00 00 00       	jmp    c000c73c <buildin_ls+0x31f>
/work/x86_os_my/shell/buildin_cmd.c:175
				ftype = 'd';
c000c699:	c6 45 e3 64          	movb   $0x64,-0x1d(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:176
				if (dir_e->f_type == FT_REGULAR) {
c000c69d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000c6a0:	8b 40 14             	mov    0x14(%eax),%eax
c000c6a3:	83 f8 01             	cmp    $0x1,%eax
c000c6a6:	75 04                	jne    c000c6ac <buildin_ls+0x28f>
/work/x86_os_my/shell/buildin_cmd.c:177
					ftype = '-';
c000c6a8:	c6 45 e3 2d          	movb   $0x2d,-0x1d(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:179
				}
				sub_pathname[pathname_len] = 0;
c000c6ac:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
c000c6b2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000c6b5:	01 d0                	add    %edx,%eax
c000c6b7:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/shell/buildin_cmd.c:180
				strcat(sub_pathname, dir_e->filename);
c000c6ba:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000c6bd:	83 ec 08             	sub    $0x8,%esp
c000c6c0:	50                   	push   %eax
c000c6c1:	8d 85 c8 fd ff ff    	lea    -0x238(%ebp),%eax
c000c6c7:	50                   	push   %eax
c000c6c8:	e8 3c 76 ff ff       	call   c0003d09 <strcat>
c000c6cd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:181
				memset(&file_stat, 0, sizeof(struct stat));
c000c6d0:	83 ec 04             	sub    $0x4,%esp
c000c6d3:	6a 0c                	push   $0xc
c000c6d5:	6a 00                	push   $0x0
c000c6d7:	8d 45 c8             	lea    -0x38(%ebp),%eax
c000c6da:	50                   	push   %eax
c000c6db:	e8 25 73 ff ff       	call   c0003a05 <memset>
c000c6e0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:182
				if (stat(sub_pathname, &file_stat) == -1) {
c000c6e3:	83 ec 08             	sub    $0x8,%esp
c000c6e6:	8d 45 c8             	lea    -0x38(%ebp),%eax
c000c6e9:	50                   	push   %eax
c000c6ea:	8d 85 c8 fd ff ff    	lea    -0x238(%ebp),%eax
c000c6f0:	50                   	push   %eax
c000c6f1:	e8 ed 95 ff ff       	call   c0005ce3 <stat>
c000c6f6:	83 c4 10             	add    $0x10,%esp
c000c6f9:	83 f8 ff             	cmp    $0xffffffff,%eax
c000c6fc:	75 1a                	jne    c000c718 <buildin_ls+0x2fb>
/work/x86_os_my/shell/buildin_cmd.c:183
					printf("ls: cannot access %s: No such file or directory\n", dir_e->filename);
c000c6fe:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000c701:	83 ec 08             	sub    $0x8,%esp
c000c704:	50                   	push   %eax
c000c705:	68 58 f7 00 c0       	push   $0xc000f758
c000c70a:	e8 e7 99 ff ff       	call   c00060f6 <printf>
c000c70f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:184
					return;
c000c712:	90                   	nop
c000c713:	e9 bf 00 00 00       	jmp    c000c7d7 <buildin_ls+0x3ba>
/work/x86_os_my/shell/buildin_cmd.c:186
				}
				printf("%c  %d  %d  %s\n", ftype, dir_e->i_no, file_stat.st_size, dir_e->filename);
c000c718:	8b 5d d8             	mov    -0x28(%ebp),%ebx
c000c71b:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c000c71e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000c721:	8b 50 10             	mov    0x10(%eax),%edx
c000c724:	0f be 45 e3          	movsbl -0x1d(%ebp),%eax
c000c728:	83 ec 0c             	sub    $0xc,%esp
c000c72b:	53                   	push   %ebx
c000c72c:	51                   	push   %ecx
c000c72d:	52                   	push   %edx
c000c72e:	50                   	push   %eax
c000c72f:	68 94 f7 00 c0       	push   $0xc000f794
c000c734:	e8 bd 99 ff ff       	call   c00060f6 <printf>
c000c739:	83 c4 20             	add    $0x20,%esp
/work/x86_os_my/shell/buildin_cmd.c:174
		}
		rewinddir(dir);
		if (long_info) {
			char ftype;
			printf("total: %d\n", file_stat.st_size);
			while((dir_e = readdir(dir))) {
c000c73c:	83 ec 0c             	sub    $0xc,%esp
c000c73f:	ff 75 dc             	pushl  -0x24(%ebp)
c000c742:	e8 60 95 ff ff       	call   c0005ca7 <readdir>
c000c747:	83 c4 10             	add    $0x10,%esp
c000c74a:	89 45 d8             	mov    %eax,-0x28(%ebp)
c000c74d:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c000c751:	0f 85 42 ff ff ff    	jne    c000c699 <buildin_ls+0x27c>
c000c757:	eb 3b                	jmp    c000c794 <buildin_ls+0x377>
/work/x86_os_my/shell/buildin_cmd.c:190
				}
				printf("%c  %d  %d  %s\n", ftype, dir_e->i_no, file_stat.st_size, dir_e->filename);
			}
		} else {
			while((dir_e = readdir(dir))) {
				printf("%s ", dir_e->filename);
c000c759:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000c75c:	83 ec 08             	sub    $0x8,%esp
c000c75f:	50                   	push   %eax
c000c760:	68 a4 f7 00 c0       	push   $0xc000f7a4
c000c765:	e8 8c 99 ff ff       	call   c00060f6 <printf>
c000c76a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:189
					return;
				}
				printf("%c  %d  %d  %s\n", ftype, dir_e->i_no, file_stat.st_size, dir_e->filename);
			}
		} else {
			while((dir_e = readdir(dir))) {
c000c76d:	83 ec 0c             	sub    $0xc,%esp
c000c770:	ff 75 dc             	pushl  -0x24(%ebp)
c000c773:	e8 2f 95 ff ff       	call   c0005ca7 <readdir>
c000c778:	83 c4 10             	add    $0x10,%esp
c000c77b:	89 45 d8             	mov    %eax,-0x28(%ebp)
c000c77e:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c000c782:	75 d5                	jne    c000c759 <buildin_ls+0x33c>
/work/x86_os_my/shell/buildin_cmd.c:192
				printf("%s ", dir_e->filename);
			}
			printf("\n");
c000c784:	83 ec 0c             	sub    $0xc,%esp
c000c787:	68 a8 f7 00 c0       	push   $0xc000f7a8
c000c78c:	e8 65 99 ff ff       	call   c00060f6 <printf>
c000c791:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:194 (discriminator 1)
		}
		closedir(dir);
c000c794:	83 ec 0c             	sub    $0xc,%esp
c000c797:	ff 75 dc             	pushl  -0x24(%ebp)
c000c79a:	e8 ca 94 ff ff       	call   c0005c69 <closedir>
c000c79f:	83 c4 10             	add    $0x10,%esp
c000c7a2:	eb 33                	jmp    c000c7d7 <buildin_ls+0x3ba>
/work/x86_os_my/shell/buildin_cmd.c:196
	} else {
		if (long_info) {
c000c7a4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c000c7a8:	74 1a                	je     c000c7c4 <buildin_ls+0x3a7>
/work/x86_os_my/shell/buildin_cmd.c:197
			printf("-  %d  %d  %s\n", file_stat.st_ino, file_stat.st_size, pathname);
c000c7aa:	8b 55 cc             	mov    -0x34(%ebp),%edx
c000c7ad:	8b 45 c8             	mov    -0x38(%ebp),%eax
c000c7b0:	ff 75 f4             	pushl  -0xc(%ebp)
c000c7b3:	52                   	push   %edx
c000c7b4:	50                   	push   %eax
c000c7b5:	68 aa f7 00 c0       	push   $0xc000f7aa
c000c7ba:	e8 37 99 ff ff       	call   c00060f6 <printf>
c000c7bf:	83 c4 10             	add    $0x10,%esp
c000c7c2:	eb 13                	jmp    c000c7d7 <buildin_ls+0x3ba>
/work/x86_os_my/shell/buildin_cmd.c:199
		} else {
			printf("%s\n", pathname);
c000c7c4:	83 ec 08             	sub    $0x8,%esp
c000c7c7:	ff 75 f4             	pushl  -0xc(%ebp)
c000c7ca:	68 01 f6 00 c0       	push   $0xc000f601
c000c7cf:	e8 22 99 ff ff       	call   c00060f6 <printf>
c000c7d4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:202
		}
	}
}
c000c7d7:	8d 65 f8             	lea    -0x8(%ebp),%esp
c000c7da:	5b                   	pop    %ebx
c000c7db:	5f                   	pop    %edi
c000c7dc:	5d                   	pop    %ebp
c000c7dd:	c3                   	ret    

c000c7de <buildin_ps>:
buildin_ps():
/work/x86_os_my/shell/buildin_cmd.c:205

/* ps命令内建函数 */
void buildin_ps(uint32_t argc, char** argv UNUSED) {
c000c7de:	55                   	push   %ebp
c000c7df:	89 e5                	mov    %esp,%ebp
c000c7e1:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/shell/buildin_cmd.c:206
	if (argc != 1) {
c000c7e4:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c000c7e8:	74 12                	je     c000c7fc <buildin_ps+0x1e>
/work/x86_os_my/shell/buildin_cmd.c:207
		printf("ps: no argument support!\n");
c000c7ea:	83 ec 0c             	sub    $0xc,%esp
c000c7ed:	68 b9 f7 00 c0       	push   $0xc000f7b9
c000c7f2:	e8 ff 98 ff ff       	call   c00060f6 <printf>
c000c7f7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:208
		return;
c000c7fa:	eb 05                	jmp    c000c801 <buildin_ps+0x23>
/work/x86_os_my/shell/buildin_cmd.c:210
	}
	ps();
c000c7fc:	e8 23 95 ff ff       	call   c0005d24 <ps>
/work/x86_os_my/shell/buildin_cmd.c:211
}
c000c801:	c9                   	leave  
c000c802:	c3                   	ret    

c000c803 <buildin_clear>:
buildin_clear():
/work/x86_os_my/shell/buildin_cmd.c:214

/* clear命令内建函数 */
void buildin_clear(uint32_t argc, char** argv UNUSED) {
c000c803:	55                   	push   %ebp
c000c804:	89 e5                	mov    %esp,%ebp
c000c806:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/shell/buildin_cmd.c:215
	if (argc != 1) {
c000c809:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c000c80d:	74 12                	je     c000c821 <buildin_clear+0x1e>
/work/x86_os_my/shell/buildin_cmd.c:216
		printf("clear: no argument support!\n");
c000c80f:	83 ec 0c             	sub    $0xc,%esp
c000c812:	68 d3 f7 00 c0       	push   $0xc000f7d3
c000c817:	e8 da 98 ff ff       	call   c00060f6 <printf>
c000c81c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:217
		return;
c000c81f:	eb 05                	jmp    c000c826 <buildin_clear+0x23>
/work/x86_os_my/shell/buildin_cmd.c:219
	}
	clear();
c000c821:	e8 3f 93 ff ff       	call   c0005b65 <clear>
/work/x86_os_my/shell/buildin_cmd.c:220
}
c000c826:	c9                   	leave  
c000c827:	c3                   	ret    

c000c828 <buildin_mkdir>:
buildin_mkdir():
/work/x86_os_my/shell/buildin_cmd.c:223

/* mkdir命令内建函数 */
int32_t buildin_mkdir(uint32_t argc, char** argv) {
c000c828:	55                   	push   %ebp
c000c829:	89 e5                	mov    %esp,%ebp
c000c82b:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/shell/buildin_cmd.c:224
	int32_t ret = -1;
c000c82e:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:225
	if (argc != 2) {
c000c835:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c000c839:	74 12                	je     c000c84d <buildin_mkdir+0x25>
/work/x86_os_my/shell/buildin_cmd.c:226
		printf("mkdir: only support 1 argument!\n");
c000c83b:	83 ec 0c             	sub    $0xc,%esp
c000c83e:	68 f0 f7 00 c0       	push   $0xc000f7f0
c000c843:	e8 ae 98 ff ff       	call   c00060f6 <printf>
c000c848:	83 c4 10             	add    $0x10,%esp
c000c84b:	eb 68                	jmp    c000c8b5 <buildin_mkdir+0x8d>
/work/x86_os_my/shell/buildin_cmd.c:228
	} else {
		make_clear_abs_path(argv[1], final_path);
c000c84d:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c850:	83 c0 04             	add    $0x4,%eax
c000c853:	8b 00                	mov    (%eax),%eax
c000c855:	83 ec 08             	sub    $0x8,%esp
c000c858:	68 c0 30 01 c0       	push   $0xc00130c0
c000c85d:	50                   	push   %eax
c000c85e:	e8 17 fa ff ff       	call   c000c27a <make_clear_abs_path>
c000c863:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:230
		/* 若创建的不是根目录 */
		if (strcmp("/", final_path)) {
c000c866:	83 ec 08             	sub    $0x8,%esp
c000c869:	68 c0 30 01 c0       	push   $0xc00130c0
c000c86e:	68 df f5 00 c0       	push   $0xc000f5df
c000c873:	e8 62 73 ff ff       	call   c0003bda <strcmp>
c000c878:	83 c4 10             	add    $0x10,%esp
c000c87b:	84 c0                	test   %al,%al
c000c87d:	74 36                	je     c000c8b5 <buildin_mkdir+0x8d>
/work/x86_os_my/shell/buildin_cmd.c:231
			if (mkdir(final_path) == 0) {
c000c87f:	83 ec 0c             	sub    $0xc,%esp
c000c882:	68 c0 30 01 c0       	push   $0xc00130c0
c000c887:	e8 9f 93 ff ff       	call   c0005c2b <mkdir>
c000c88c:	83 c4 10             	add    $0x10,%esp
c000c88f:	85 c0                	test   %eax,%eax
c000c891:	75 09                	jne    c000c89c <buildin_mkdir+0x74>
/work/x86_os_my/shell/buildin_cmd.c:232
				ret = 0;
c000c893:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c000c89a:	eb 19                	jmp    c000c8b5 <buildin_mkdir+0x8d>
/work/x86_os_my/shell/buildin_cmd.c:234
			} else {
				printf("mkdir: create directory %s failed.\n", argv[1]);
c000c89c:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c89f:	83 c0 04             	add    $0x4,%eax
c000c8a2:	8b 00                	mov    (%eax),%eax
c000c8a4:	83 ec 08             	sub    $0x8,%esp
c000c8a7:	50                   	push   %eax
c000c8a8:	68 14 f8 00 c0       	push   $0xc000f814
c000c8ad:	e8 44 98 ff ff       	call   c00060f6 <printf>
c000c8b2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:238
			}
		}
	}
	return ret;
c000c8b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/shell/buildin_cmd.c:239
}
c000c8b8:	c9                   	leave  
c000c8b9:	c3                   	ret    

c000c8ba <buildin_rmdir>:
buildin_rmdir():
/work/x86_os_my/shell/buildin_cmd.c:242

/* rmdir命令内建函数 */
int32_t buildin_rmdir(uint32_t argc, char** argv) {
c000c8ba:	55                   	push   %ebp
c000c8bb:	89 e5                	mov    %esp,%ebp
c000c8bd:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/shell/buildin_cmd.c:243
	int32_t ret = -1;
c000c8c0:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:244
	if (argc != 2) {
c000c8c7:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c000c8cb:	74 12                	je     c000c8df <buildin_rmdir+0x25>
/work/x86_os_my/shell/buildin_cmd.c:245
	printf("rmdir: only support 1 argument!\n");
c000c8cd:	83 ec 0c             	sub    $0xc,%esp
c000c8d0:	68 38 f8 00 c0       	push   $0xc000f838
c000c8d5:	e8 1c 98 ff ff       	call   c00060f6 <printf>
c000c8da:	83 c4 10             	add    $0x10,%esp
c000c8dd:	eb 68                	jmp    c000c947 <buildin_rmdir+0x8d>
/work/x86_os_my/shell/buildin_cmd.c:247
	} else {
		make_clear_abs_path(argv[1], final_path);
c000c8df:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c8e2:	83 c0 04             	add    $0x4,%eax
c000c8e5:	8b 00                	mov    (%eax),%eax
c000c8e7:	83 ec 08             	sub    $0x8,%esp
c000c8ea:	68 c0 30 01 c0       	push   $0xc00130c0
c000c8ef:	50                   	push   %eax
c000c8f0:	e8 85 f9 ff ff       	call   c000c27a <make_clear_abs_path>
c000c8f5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:249
		/* 若删除的不是根目录 */
		if (strcmp("/", final_path)) {
c000c8f8:	83 ec 08             	sub    $0x8,%esp
c000c8fb:	68 c0 30 01 c0       	push   $0xc00130c0
c000c900:	68 df f5 00 c0       	push   $0xc000f5df
c000c905:	e8 d0 72 ff ff       	call   c0003bda <strcmp>
c000c90a:	83 c4 10             	add    $0x10,%esp
c000c90d:	84 c0                	test   %al,%al
c000c90f:	74 36                	je     c000c947 <buildin_rmdir+0x8d>
/work/x86_os_my/shell/buildin_cmd.c:250
			if (rmdir(final_path) == 0) {
c000c911:	83 ec 0c             	sub    $0xc,%esp
c000c914:	68 c0 30 01 c0       	push   $0xc00130c0
c000c919:	e8 6a 93 ff ff       	call   c0005c88 <rmdir>
c000c91e:	83 c4 10             	add    $0x10,%esp
c000c921:	85 c0                	test   %eax,%eax
c000c923:	75 09                	jne    c000c92e <buildin_rmdir+0x74>
/work/x86_os_my/shell/buildin_cmd.c:251
				ret = 0;
c000c925:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c000c92c:	eb 19                	jmp    c000c947 <buildin_rmdir+0x8d>
/work/x86_os_my/shell/buildin_cmd.c:253
			} else {
				printf("rmdir: remove %s failed.\n", argv[1]);
c000c92e:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c931:	83 c0 04             	add    $0x4,%eax
c000c934:	8b 00                	mov    (%eax),%eax
c000c936:	83 ec 08             	sub    $0x8,%esp
c000c939:	50                   	push   %eax
c000c93a:	68 59 f8 00 c0       	push   $0xc000f859
c000c93f:	e8 b2 97 ff ff       	call   c00060f6 <printf>
c000c944:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:257
			}
		}
	}
	return ret;
c000c947:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/shell/buildin_cmd.c:258
}
c000c94a:	c9                   	leave  
c000c94b:	c3                   	ret    

c000c94c <buildin_rm>:
buildin_rm():
/work/x86_os_my/shell/buildin_cmd.c:261

/* rm命令内建函数 */
int32_t buildin_rm(uint32_t argc, char** argv) {
c000c94c:	55                   	push   %ebp
c000c94d:	89 e5                	mov    %esp,%ebp
c000c94f:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/shell/buildin_cmd.c:262
	int32_t ret = -1;
c000c952:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:263
	if (argc != 2) {
c000c959:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c000c95d:	74 12                	je     c000c971 <buildin_rm+0x25>
/work/x86_os_my/shell/buildin_cmd.c:264
		printf("rm: only support 1 argument!\n");
c000c95f:	83 ec 0c             	sub    $0xc,%esp
c000c962:	68 73 f8 00 c0       	push   $0xc000f873
c000c967:	e8 8a 97 ff ff       	call   c00060f6 <printf>
c000c96c:	83 c4 10             	add    $0x10,%esp
c000c96f:	eb 68                	jmp    c000c9d9 <buildin_rm+0x8d>
/work/x86_os_my/shell/buildin_cmd.c:266
	} else {
		make_clear_abs_path(argv[1], final_path);
c000c971:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c974:	83 c0 04             	add    $0x4,%eax
c000c977:	8b 00                	mov    (%eax),%eax
c000c979:	83 ec 08             	sub    $0x8,%esp
c000c97c:	68 c0 30 01 c0       	push   $0xc00130c0
c000c981:	50                   	push   %eax
c000c982:	e8 f3 f8 ff ff       	call   c000c27a <make_clear_abs_path>
c000c987:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:268
		/* 若删除的不是根目录 */
		if (strcmp("/", final_path)) {
c000c98a:	83 ec 08             	sub    $0x8,%esp
c000c98d:	68 c0 30 01 c0       	push   $0xc00130c0
c000c992:	68 df f5 00 c0       	push   $0xc000f5df
c000c997:	e8 3e 72 ff ff       	call   c0003bda <strcmp>
c000c99c:	83 c4 10             	add    $0x10,%esp
c000c99f:	84 c0                	test   %al,%al
c000c9a1:	74 36                	je     c000c9d9 <buildin_rm+0x8d>
/work/x86_os_my/shell/buildin_cmd.c:269
			if (unlink(final_path) == 0) {
c000c9a3:	83 ec 0c             	sub    $0xc,%esp
c000c9a6:	68 c0 30 01 c0       	push   $0xc00130c0
c000c9ab:	e8 5c 92 ff ff       	call   c0005c0c <unlink>
c000c9b0:	83 c4 10             	add    $0x10,%esp
c000c9b3:	85 c0                	test   %eax,%eax
c000c9b5:	75 09                	jne    c000c9c0 <buildin_rm+0x74>
/work/x86_os_my/shell/buildin_cmd.c:270
				ret = 0;
c000c9b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c000c9be:	eb 19                	jmp    c000c9d9 <buildin_rm+0x8d>
/work/x86_os_my/shell/buildin_cmd.c:272
			} else {
				printf("rm: delete %s failed.\n", argv[1]);
c000c9c0:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c9c3:	83 c0 04             	add    $0x4,%eax
c000c9c6:	8b 00                	mov    (%eax),%eax
c000c9c8:	83 ec 08             	sub    $0x8,%esp
c000c9cb:	50                   	push   %eax
c000c9cc:	68 91 f8 00 c0       	push   $0xc000f891
c000c9d1:	e8 20 97 ff ff       	call   c00060f6 <printf>
c000c9d6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:276
			}
		}
	}
	return ret;
c000c9d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/shell/buildin_cmd.c:277
}
c000c9dc:	c9                   	leave  
c000c9dd:	c3                   	ret    

c000c9de <segment_load>:
segment_load():
/work/x86_os_my/userprog/exec.c:57
};

/*
参数：文件描述符 fd、段在文件中的字节偏移量 offset、段大小 filesz、段被加载到的虚拟地址 vaddr
功能：将文件描述符 fd 指向的文件中，偏移为 offset，大小为 filesz 的一个"段"，加载到虚拟地址为 vaddr 的内存空间。*/
static bool segment_load(int32_t fd, uint32_t offset, uint32_t filesz, uint32_t vaddr) {
c000c9de:	55                   	push   %ebp
c000c9df:	89 e5                	mov    %esp,%ebp
c000c9e1:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/userprog/exec.c:59
	// vaddr地址所在的页的指针（指针的地址是虚拟空间的地址）（指向的空间包含:页的物理地址和属性）指针
	uint32_t vaddr_first_page = vaddr & 0xfffff000;
c000c9e4:	8b 45 14             	mov    0x14(%ebp),%eax
c000c9e7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c000c9ec:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/userprog/exec.c:60
	uint32_t size_in_first_page = PG_SIZE - (vaddr & 0x00000fff);	// 第一个页中可以用的空间
c000c9ef:	8b 45 14             	mov    0x14(%ebp),%eax
c000c9f2:	25 ff 0f 00 00       	and    $0xfff,%eax
c000c9f7:	ba 00 10 00 00       	mov    $0x1000,%edx
c000c9fc:	29 c2                	sub    %eax,%edx
c000c9fe:	89 d0                	mov    %edx,%eax
c000ca00:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/userprog/exec.c:61
	uint32_t occupy_pages = 0;
c000ca03:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/userprog/exec.c:63
	/* 若一个页框容不下该段 */
	if (filesz > size_in_first_page) {
c000ca0a:	8b 45 10             	mov    0x10(%ebp),%eax
c000ca0d:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c000ca10:	76 1c                	jbe    c000ca2e <segment_load+0x50>
/work/x86_os_my/userprog/exec.c:64
		uint32_t left_size = filesz - size_in_first_page;
c000ca12:	8b 45 10             	mov    0x10(%ebp),%eax
c000ca15:	2b 45 e4             	sub    -0x1c(%ebp),%eax
c000ca18:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/userprog/exec.c:65
		occupy_pages = DIV_ROUND_UP(left_size, PG_SIZE) + 1;		// 1是指vaddr_first_page
c000ca1b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000ca1e:	05 ff 0f 00 00       	add    $0xfff,%eax
c000ca23:	c1 e8 0c             	shr    $0xc,%eax
c000ca26:	83 c0 01             	add    $0x1,%eax
c000ca29:	89 45 f4             	mov    %eax,-0xc(%ebp)
c000ca2c:	eb 07                	jmp    c000ca35 <segment_load+0x57>
/work/x86_os_my/userprog/exec.c:67
	} else {
		occupy_pages = 1;
c000ca2e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
/work/x86_os_my/userprog/exec.c:71
	}

	/* 为进程分配内存 */
	uint32_t page_idx = 0;
c000ca35:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/userprog/exec.c:72
	uint32_t vaddr_page = vaddr_first_page;
c000ca3c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000ca3f:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/userprog/exec.c:73
	while (page_idx < occupy_pages) {
c000ca42:	eb 60                	jmp    c000caa4 <segment_load+0xc6>
/work/x86_os_my/userprog/exec.c:74
		uint32_t* pde = pde_ptr(vaddr_page);	//虚拟地址，指向 页目录项 的指针，指向的空间含：地址和属性
c000ca44:	83 ec 0c             	sub    $0xc,%esp
c000ca47:	ff 75 ec             	pushl  -0x14(%ebp)
c000ca4a:	e8 17 5f ff ff       	call   c0002966 <pde_ptr>
c000ca4f:	83 c4 10             	add    $0x10,%esp
c000ca52:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/userprog/exec.c:75
		uint32_t* pte = pte_ptr(vaddr_page);	//虚拟地址，指向 页表项   的指针
c000ca55:	83 ec 0c             	sub    $0xc,%esp
c000ca58:	ff 75 ec             	pushl  -0x14(%ebp)
c000ca5b:	e8 d6 5e ff ff       	call   c0002936 <pte_ptr>
c000ca60:	83 c4 10             	add    $0x10,%esp
c000ca63:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/userprog/exec.c:80

		/* 如果pde不存在,或者pte不存在就分配内存.
		 * pde的判断要在pte之前,否则pde若不存在会导致
		 * 判断pte时缺页异常 */
		if (!(*pde & 0x00000001) || !(*pte & 0x00000001)) {	//页目录项或者页表项不存在
c000ca66:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000ca69:	8b 00                	mov    (%eax),%eax
c000ca6b:	83 e0 01             	and    $0x1,%eax
c000ca6e:	85 c0                	test   %eax,%eax
c000ca70:	74 0c                	je     c000ca7e <segment_load+0xa0>
/work/x86_os_my/userprog/exec.c:80 (discriminator 1)
c000ca72:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000ca75:	8b 00                	mov    (%eax),%eax
c000ca77:	83 e0 01             	and    $0x1,%eax
c000ca7a:	85 c0                	test   %eax,%eax
c000ca7c:	75 1b                	jne    c000ca99 <segment_load+0xbb>
/work/x86_os_my/userprog/exec.c:81
			if (get_a_page(PF_USER, vaddr_page) == NULL) {
c000ca7e:	83 ec 08             	sub    $0x8,%esp
c000ca81:	ff 75 ec             	pushl  -0x14(%ebp)
c000ca84:	6a 02                	push   $0x2
c000ca86:	e8 d4 61 ff ff       	call   c0002c5f <get_a_page>
c000ca8b:	83 c4 10             	add    $0x10,%esp
c000ca8e:	85 c0                	test   %eax,%eax
c000ca90:	75 07                	jne    c000ca99 <segment_load+0xbb>
/work/x86_os_my/userprog/exec.c:82
				return false;
c000ca92:	b8 00 00 00 00       	mov    $0x0,%eax
c000ca97:	eb 41                	jmp    c000cada <segment_load+0xfc>
/work/x86_os_my/userprog/exec.c:85
			}
		} // 如果原进程的页表已经分配了,利用现有的物理页,直接覆盖进程体
		vaddr_page += PG_SIZE;	//下一页
c000ca99:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
/work/x86_os_my/userprog/exec.c:86
		page_idx++;
c000caa0:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/userprog/exec.c:73
	}

	/* 为进程分配内存 */
	uint32_t page_idx = 0;
	uint32_t vaddr_page = vaddr_first_page;
	while (page_idx < occupy_pages) {
c000caa4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000caa7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c000caaa:	72 98                	jb     c000ca44 <segment_load+0x66>
/work/x86_os_my/userprog/exec.c:88
			}
		} // 如果原进程的页表已经分配了,利用现有的物理页,直接覆盖进程体
		vaddr_page += PG_SIZE;	//下一页
		page_idx++;
	}
	sys_lseek(fd, offset, SEEK_SET);
c000caac:	8b 45 0c             	mov    0xc(%ebp),%eax
c000caaf:	83 ec 04             	sub    $0x4,%esp
c000cab2:	6a 01                	push   $0x1
c000cab4:	50                   	push   %eax
c000cab5:	ff 75 08             	pushl  0x8(%ebp)
c000cab8:	e8 25 b3 ff ff       	call   c0007de2 <sys_lseek>
c000cabd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/exec.c:89
	sys_read(fd, (void*)vaddr, filesz);	//读到vaddr处
c000cac0:	8b 45 14             	mov    0x14(%ebp),%eax
c000cac3:	83 ec 04             	sub    $0x4,%esp
c000cac6:	ff 75 10             	pushl  0x10(%ebp)
c000cac9:	50                   	push   %eax
c000caca:	ff 75 08             	pushl  0x8(%ebp)
c000cacd:	e8 2c b2 ff ff       	call   c0007cfe <sys_read>
c000cad2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/exec.c:90
	return true;
c000cad5:	b8 01 00 00 00       	mov    $0x1,%eax
/work/x86_os_my/userprog/exec.c:91
}
c000cada:	c9                   	leave  
c000cadb:	c3                   	ret    

c000cadc <load>:
load():
/work/x86_os_my/userprog/exec.c:95

/* 从文件系统上加载用户程序pathname
 * 成功则返回程序的起始地址，否则返回-1 */
static int32_t load(const char* pathname) {
c000cadc:	55                   	push   %ebp
c000cadd:	89 e5                	mov    %esp,%ebp
c000cadf:	83 ec 78             	sub    $0x78,%esp
/work/x86_os_my/userprog/exec.c:96
	int32_t ret = -1;
c000cae2:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/userprog/exec.c:99
	struct Elf32_Ehdr elf_header;
	struct Elf32_Phdr prog_header;
	memset(&elf_header, 0, sizeof(struct Elf32_Ehdr));
c000cae9:	83 ec 04             	sub    $0x4,%esp
c000caec:	6a 34                	push   $0x34
c000caee:	6a 00                	push   $0x0
c000caf0:	8d 45 b0             	lea    -0x50(%ebp),%eax
c000caf3:	50                   	push   %eax
c000caf4:	e8 0c 6f ff ff       	call   c0003a05 <memset>
c000caf9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/exec.c:101

	int32_t fd = sys_open(pathname, O_RDONLY);
c000cafc:	83 ec 08             	sub    $0x8,%esp
c000caff:	6a 00                	push   $0x0
c000cb01:	ff 75 08             	pushl  0x8(%ebp)
c000cb04:	e8 00 ae ff ff       	call   c0007909 <sys_open>
c000cb09:	83 c4 10             	add    $0x10,%esp
c000cb0c:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/userprog/exec.c:102
	if (fd == -1) {
c000cb0f:	83 7d e8 ff          	cmpl   $0xffffffff,-0x18(%ebp)
c000cb13:	75 0a                	jne    c000cb1f <load+0x43>
/work/x86_os_my/userprog/exec.c:103
		return -1;
c000cb15:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000cb1a:	e9 4a 01 00 00       	jmp    c000cc69 <load+0x18d>
/work/x86_os_my/userprog/exec.c:106
	}

	if (sys_read(fd, &elf_header, sizeof(struct Elf32_Ehdr)) != sizeof(struct Elf32_Ehdr)) {
c000cb1f:	83 ec 04             	sub    $0x4,%esp
c000cb22:	6a 34                	push   $0x34
c000cb24:	8d 45 b0             	lea    -0x50(%ebp),%eax
c000cb27:	50                   	push   %eax
c000cb28:	ff 75 e8             	pushl  -0x18(%ebp)
c000cb2b:	e8 ce b1 ff ff       	call   c0007cfe <sys_read>
c000cb30:	83 c4 10             	add    $0x10,%esp
c000cb33:	83 f8 34             	cmp    $0x34,%eax
c000cb36:	74 0c                	je     c000cb44 <load+0x68>
/work/x86_os_my/userprog/exec.c:107
		ret = -1;
c000cb38:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/userprog/exec.c:108
		goto done;
c000cb3f:	e9 14 01 00 00       	jmp    c000cc58 <load+0x17c>
/work/x86_os_my/userprog/exec.c:116
	/* 校验32位的elf头 */
	/* 
	e_phnum == 程序头表中条目的数量，也就是段的个数
	e_phentsize == 程序头表中每个条目的字节大小，即 描述段的数据结构的大小 == sizeof(struct Elf32_Phdr)
	细节见readme */
	if (memcmp(elf_header.e_ident, "\177ELF\1\1\1", 7) \
c000cb44:	83 ec 04             	sub    $0x4,%esp
c000cb47:	6a 07                	push   $0x7
c000cb49:	68 b2 f8 00 c0       	push   $0xc000f8b2
c000cb4e:	8d 45 b0             	lea    -0x50(%ebp),%eax
c000cb51:	50                   	push   %eax
c000cb52:	e8 60 6f ff ff       	call   c0003ab7 <memcmp>
c000cb57:	83 c4 10             	add    $0x10,%esp
c000cb5a:	85 c0                	test   %eax,%eax
c000cb5c:	75 30                	jne    c000cb8e <load+0xb2>
/work/x86_os_my/userprog/exec.c:117
			|| elf_header.e_type != 2 \
c000cb5e:	0f b7 45 c0          	movzwl -0x40(%ebp),%eax
c000cb62:	66 83 f8 02          	cmp    $0x2,%ax
c000cb66:	75 26                	jne    c000cb8e <load+0xb2>
/work/x86_os_my/userprog/exec.c:118
			|| elf_header.e_machine != 3 \
c000cb68:	0f b7 45 c2          	movzwl -0x3e(%ebp),%eax
c000cb6c:	66 83 f8 03          	cmp    $0x3,%ax
c000cb70:	75 1c                	jne    c000cb8e <load+0xb2>
/work/x86_os_my/userprog/exec.c:119
			|| elf_header.e_version != 1 \
c000cb72:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c000cb75:	83 f8 01             	cmp    $0x1,%eax
c000cb78:	75 14                	jne    c000cb8e <load+0xb2>
/work/x86_os_my/userprog/exec.c:120
			|| elf_header.e_phnum > 1024 \
c000cb7a:	0f b7 45 dc          	movzwl -0x24(%ebp),%eax
c000cb7e:	66 3d 00 04          	cmp    $0x400,%ax
c000cb82:	77 0a                	ja     c000cb8e <load+0xb2>
/work/x86_os_my/userprog/exec.c:121
			|| elf_header.e_phentsize != sizeof(struct Elf32_Phdr)) {
c000cb84:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c000cb88:	66 83 f8 20          	cmp    $0x20,%ax
c000cb8c:	74 0c                	je     c000cb9a <load+0xbe>
/work/x86_os_my/userprog/exec.c:122
		ret = -1;
c000cb8e:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/userprog/exec.c:123
		goto done;
c000cb95:	e9 be 00 00 00       	jmp    c000cc58 <load+0x17c>
/work/x86_os_my/userprog/exec.c:126
	}

	Elf32_Off prog_header_offset = elf_header.e_phoff;		// 程序头的起始地址
c000cb9a:	8b 45 cc             	mov    -0x34(%ebp),%eax
c000cb9d:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/exec.c:127
	Elf32_Half prog_header_size = elf_header.e_phentsize;	// 描述段的数据结构的大小 == sizeof(struct Elf32_Phdr)
c000cba0:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c000cba4:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
/work/x86_os_my/userprog/exec.c:130

	/* 遍历所有程序头 */
	uint32_t prog_idx = 0;
c000cba8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/userprog/exec.c:131
	while (prog_idx < elf_header.e_phnum) {	//段的个数
c000cbaf:	e9 8e 00 00 00       	jmp    c000cc42 <load+0x166>
/work/x86_os_my/userprog/exec.c:132
		memset(&prog_header, 0, prog_header_size);
c000cbb4:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c000cbb8:	83 ec 04             	sub    $0x4,%esp
c000cbbb:	50                   	push   %eax
c000cbbc:	6a 00                	push   $0x0
c000cbbe:	8d 45 90             	lea    -0x70(%ebp),%eax
c000cbc1:	50                   	push   %eax
c000cbc2:	e8 3e 6e ff ff       	call   c0003a05 <memset>
c000cbc7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/exec.c:135

		/* 将文件的指针定位到程序头 */
		sys_lseek(fd, prog_header_offset, SEEK_SET);
c000cbca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000cbcd:	83 ec 04             	sub    $0x4,%esp
c000cbd0:	6a 01                	push   $0x1
c000cbd2:	50                   	push   %eax
c000cbd3:	ff 75 e8             	pushl  -0x18(%ebp)
c000cbd6:	e8 07 b2 ff ff       	call   c0007de2 <sys_lseek>
c000cbdb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/exec.c:138

		/* 只获取程序头 */
		if (sys_read(fd, &prog_header, prog_header_size) != prog_header_size) {
c000cbde:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c000cbe2:	83 ec 04             	sub    $0x4,%esp
c000cbe5:	50                   	push   %eax
c000cbe6:	8d 45 90             	lea    -0x70(%ebp),%eax
c000cbe9:	50                   	push   %eax
c000cbea:	ff 75 e8             	pushl  -0x18(%ebp)
c000cbed:	e8 0c b1 ff ff       	call   c0007cfe <sys_read>
c000cbf2:	83 c4 10             	add    $0x10,%esp
c000cbf5:	89 c2                	mov    %eax,%edx
c000cbf7:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c000cbfb:	39 c2                	cmp    %eax,%edx
c000cbfd:	74 09                	je     c000cc08 <load+0x12c>
/work/x86_os_my/userprog/exec.c:139
			ret = -1;
c000cbff:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/userprog/exec.c:140
			goto done;
c000cc06:	eb 50                	jmp    c000cc58 <load+0x17c>
/work/x86_os_my/userprog/exec.c:144
		}

		/* 如果是可加载段就调用 segment_load 加载到内存 */
		if (PT_LOAD == prog_header.p_type) {
c000cc08:	8b 45 90             	mov    -0x70(%ebp),%eax
c000cc0b:	83 f8 01             	cmp    $0x1,%eax
c000cc0e:	75 24                	jne    c000cc34 <load+0x158>
/work/x86_os_my/userprog/exec.c:145
			if (!segment_load(fd, prog_header.p_offset, prog_header.p_filesz, prog_header.p_vaddr)) {
c000cc10:	8b 4d 98             	mov    -0x68(%ebp),%ecx
c000cc13:	8b 55 a0             	mov    -0x60(%ebp),%edx
c000cc16:	8b 45 94             	mov    -0x6c(%ebp),%eax
c000cc19:	51                   	push   %ecx
c000cc1a:	52                   	push   %edx
c000cc1b:	50                   	push   %eax
c000cc1c:	ff 75 e8             	pushl  -0x18(%ebp)
c000cc1f:	e8 ba fd ff ff       	call   c000c9de <segment_load>
c000cc24:	83 c4 10             	add    $0x10,%esp
c000cc27:	85 c0                	test   %eax,%eax
c000cc29:	75 09                	jne    c000cc34 <load+0x158>
/work/x86_os_my/userprog/exec.c:146
				ret = -1;
c000cc2b:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/userprog/exec.c:147
				goto done;
c000cc32:	eb 24                	jmp    c000cc58 <load+0x17c>
/work/x86_os_my/userprog/exec.c:152
			}
		}

		/* 更新下一个程序头的偏移 */
		prog_header_offset += elf_header.e_phentsize;
c000cc34:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c000cc38:	0f b7 c0             	movzwl %ax,%eax
c000cc3b:	01 45 f0             	add    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/exec.c:153
		prog_idx++;
c000cc3e:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
/work/x86_os_my/userprog/exec.c:131
	Elf32_Off prog_header_offset = elf_header.e_phoff;		// 程序头的起始地址
	Elf32_Half prog_header_size = elf_header.e_phentsize;	// 描述段的数据结构的大小 == sizeof(struct Elf32_Phdr)

	/* 遍历所有程序头 */
	uint32_t prog_idx = 0;
	while (prog_idx < elf_header.e_phnum) {	//段的个数
c000cc42:	0f b7 45 dc          	movzwl -0x24(%ebp),%eax
c000cc46:	0f b7 c0             	movzwl %ax,%eax
c000cc49:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c000cc4c:	0f 87 62 ff ff ff    	ja     c000cbb4 <load+0xd8>
/work/x86_os_my/userprog/exec.c:155

		/* 更新下一个程序头的偏移 */
		prog_header_offset += elf_header.e_phentsize;
		prog_idx++;
	}
	ret = elf_header.e_entry;
c000cc52:	8b 45 c8             	mov    -0x38(%ebp),%eax
c000cc55:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/exec.c:157
done:
	sys_close(fd);
c000cc58:	83 ec 0c             	sub    $0xc,%esp
c000cc5b:	ff 75 e8             	pushl  -0x18(%ebp)
c000cc5e:	e8 53 af ff ff       	call   c0007bb6 <sys_close>
c000cc63:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/exec.c:158
	return ret;
c000cc66:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/userprog/exec.c:159 (discriminator 1)
}
c000cc69:	c9                   	leave  
c000cc6a:	c3                   	ret    

c000cc6b <sys_execv>:
sys_execv():
/work/x86_os_my/userprog/exec.c:162

/* 用path指向的程序替换当前进程 */
int32_t sys_execv(const char* path, const char* argv[]) {
c000cc6b:	55                   	push   %ebp
c000cc6c:	89 e5                	mov    %esp,%ebp
c000cc6e:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/exec.c:163
	uint32_t argc = 0;
c000cc71:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/userprog/exec.c:164
	while (argv[argc]) {
c000cc78:	eb 04                	jmp    c000cc7e <sys_execv+0x13>
/work/x86_os_my/userprog/exec.c:165
		argc++;
c000cc7a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/userprog/exec.c:164
}

/* 用path指向的程序替换当前进程 */
int32_t sys_execv(const char* path, const char* argv[]) {
	uint32_t argc = 0;
	while (argv[argc]) {
c000cc7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000cc81:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000cc88:	8b 45 0c             	mov    0xc(%ebp),%eax
c000cc8b:	01 d0                	add    %edx,%eax
c000cc8d:	8b 00                	mov    (%eax),%eax
c000cc8f:	85 c0                	test   %eax,%eax
c000cc91:	75 e7                	jne    c000cc7a <sys_execv+0xf>
/work/x86_os_my/userprog/exec.c:168
		argc++;
	}
	// 以前是用汇编加载的elf格式的内核，现在使用C语言方式加载elf格式的应用程序。
	int32_t entry_point = load(path);     
c000cc93:	83 ec 0c             	sub    $0xc,%esp
c000cc96:	ff 75 08             	pushl  0x8(%ebp)
c000cc99:	e8 3e fe ff ff       	call   c000cadc <load>
c000cc9e:	83 c4 10             	add    $0x10,%esp
c000cca1:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/exec.c:169
	if (entry_point == -1) {	 // 若加载失败则返回-1
c000cca4:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c000cca8:	75 07                	jne    c000ccb1 <sys_execv+0x46>
/work/x86_os_my/userprog/exec.c:170
		return -1;
c000ccaa:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000ccaf:	eb 63                	jmp    c000cd14 <sys_execv+0xa9>
/work/x86_os_my/userprog/exec.c:173
	}

	struct task_struct* cur = running_thread();
c000ccb1:	e8 36 71 ff ff       	call   c0003dec <running_thread>
c000ccb6:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/userprog/exec.c:175
	/* 修改进程名 */
	memcpy(cur->name, path, TASK_NAME_LEN);
c000ccb9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000ccbc:	83 c0 0c             	add    $0xc,%eax
c000ccbf:	83 ec 04             	sub    $0x4,%esp
c000ccc2:	6a 10                	push   $0x10
c000ccc4:	ff 75 08             	pushl  0x8(%ebp)
c000ccc7:	50                   	push   %eax
c000ccc8:	e8 8a 6d ff ff       	call   c0003a57 <memcpy>
c000cccd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/exec.c:176
	cur->name[TASK_NAME_LEN-1] = 0;
c000ccd0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000ccd3:	c6 40 1b 00          	movb   $0x0,0x1b(%eax)
/work/x86_os_my/userprog/exec.c:178

	struct intr_stack* intr_0_stack = (struct intr_stack*)((uint32_t)cur + PG_SIZE - sizeof(struct intr_stack));
c000ccd7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000ccda:	05 b4 0f 00 00       	add    $0xfb4,%eax
c000ccdf:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/userprog/exec.c:187
	习惯用法：
	ebx 经常做基址寄存器，argv 本来就是所有参数的基地址，
	ecx 经常做循环控制次数寄存器，argc 本来就是 argv 的参数个数，也就是循环次数
	现在把参数放在哪个寄存器中，将来在获取参数时就从哪些寄存器中取，
	将来实现简易版 c 运行库，那会涉及到从寄存器中获取参数。*/
	intr_0_stack->ebx = (int32_t)argv;
c000cce2:	8b 55 0c             	mov    0xc(%ebp),%edx
c000cce5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000cce8:	89 50 14             	mov    %edx,0x14(%eax)
/work/x86_os_my/userprog/exec.c:188
	intr_0_stack->ecx = argc;
c000cceb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000ccee:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000ccf1:	89 50 1c             	mov    %edx,0x1c(%eax)
/work/x86_os_my/userprog/exec.c:189
	intr_0_stack->eip = (void*)entry_point;
c000ccf4:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000ccf7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000ccfa:	89 50 38             	mov    %edx,0x38(%eax)
/work/x86_os_my/userprog/exec.c:193
	/* 使新用户进程的栈地址为最高用户空间地址 */
	/* 1. 老进程用户栈中的数据只适用于老进程，对新进程没用，故新进程的用户栈应该从新开始。
	   2. 为了后续传入参数做准备：用户空间的最高处用于存储命令行参数。*/
	intr_0_stack->esp = (void*)0xc0000000;
c000ccfd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000cd00:	c7 40 44 00 00 00 c0 	movl   $0xc0000000,0x44(%eax)
/work/x86_os_my/userprog/exec.c:197

	/* exec不同于fork,为使新进程更快被执行,直接从中断返回 */
	/* 将新进程内核栈地址赋值给 esp 寄存器，然后跳转到 intr_exit，假装从中断返回，实现了新进程的运行。 */
	asm volatile ("movl %0, %%esp; jmp intr_exit" : : "g" (intr_0_stack) : "memory");
c000cd07:	8b 65 e8             	mov    -0x18(%ebp),%esp
c000cd0a:	e9 e1 50 ff ff       	jmp    c0001df0 <intr_exit>
/work/x86_os_my/userprog/exec.c:200

	//并不会从这里返回
	return 0;
c000cd0f:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/userprog/exec.c:201
}
c000cd14:	c9                   	leave  
c000cd15:	c3                   	ret    

c000cd16 <release_prog_resource>:
release_prog_resource():
/work/x86_os_my/userprog/wait_exit.c:15

/* 释放用户进程资源: 
 * 1 页表中对应的物理页
 * 2 虚拟内存池占物理页框
 * 3 关闭打开的文件 */
static void release_prog_resource(struct task_struct* release_thread) {
c000cd16:	55                   	push   %ebp
c000cd17:	89 e5                	mov    %esp,%ebp
c000cd19:	83 ec 48             	sub    $0x48,%esp
/work/x86_os_my/userprog/wait_exit.c:16
	uint32_t* pgdir_vaddr = release_thread->pgdir;	// 进程自己页目录表的虚拟地址，加载到cr3时需转成物理地址
c000cd1c:	8b 45 08             	mov    0x8(%ebp),%eax
c000cd1f:	8b 40 54             	mov    0x54(%eax),%eax
c000cd22:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/userprog/wait_exit.c:19
	// 前768个页目录项，表示用户空间的低端3G虚拟内存。
	// 剩下1024-768=256个页目录项，是内核使用的高端1G虚拟内存。
	uint16_t user_pde_nr = 768, pde_idx = 0;
c000cd25:	66 c7 45 ea 00 03    	movw   $0x300,-0x16(%ebp)
c000cd2b:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
/work/x86_os_my/userprog/wait_exit.c:20
	uint32_t pde = 0;
c000cd31:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
/work/x86_os_my/userprog/wait_exit.c:21
	uint32_t* v_pde_ptr = NULL;		// v表示var,和函数pde_ptr区分
c000cd38:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
/work/x86_os_my/userprog/wait_exit.c:23

	uint16_t user_pte_nr = 1024, pte_idx = 0;
c000cd3f:	66 c7 45 de 00 04    	movw   $0x400,-0x22(%ebp)
c000cd45:	66 c7 45 f4 00 00    	movw   $0x0,-0xc(%ebp)
/work/x86_os_my/userprog/wait_exit.c:24
	uint32_t pte = 0;
c000cd4b:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
/work/x86_os_my/userprog/wait_exit.c:25
	uint32_t* v_pte_ptr = NULL;		// 加个v表示var,和函数pte_ptr区分
c000cd52:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
/work/x86_os_my/userprog/wait_exit.c:27

	uint32_t* first_pte_vaddr_in_pde = NULL;	// 用来记录pde指向的页表中的，第0个pte的地址
c000cd59:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
/work/x86_os_my/userprog/wait_exit.c:28
	uint32_t pg_phy_addr = 0;
c000cd60:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
/work/x86_os_my/userprog/wait_exit.c:35
	/* 回收页表中用户空间的页框 */
	/* 回收的方法有两种，一是按照虚拟内存池 pcb->userprog_vaddr 回收，检查位图中被置为 1 的 bit，计算出相应虚拟地址，逐位回收。
	另一种方法相对直接一点，直接遍历页表，如果页表的 p 位为 1，这说明已经分配了物理页框。
	第 1 种方法咱们已经在实现 fork 时为复制用户地址空间用过了，
	现在咱们尝试第二种方法。*/
	while (pde_idx < user_pde_nr) {
c000cd67:	e9 be 00 00 00       	jmp    c000ce2a <release_prog_resource+0x114>
/work/x86_os_my/userprog/wait_exit.c:36
		v_pde_ptr = pgdir_vaddr + pde_idx;	// pgdir_vaddr 类型是 u32* 指针步长是4字节，一个页目录项的大小
c000cd6c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c000cd70:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000cd77:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000cd7a:	01 d0                	add    %edx,%eax
c000cd7c:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/userprog/wait_exit.c:37
		pde = *v_pde_ptr;			// 【取到页目录表中的页目录项，包含所指向的页表地址+属性】
c000cd7f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000cd82:	8b 00                	mov    (%eax),%eax
c000cd84:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/userprog/wait_exit.c:38
		if (pde & 0x00000001) {		// 如果页目录项p位为1,表示该页目录项下可能有页表项
c000cd87:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000cd8a:	83 e0 01             	and    $0x1,%eax
c000cd8d:	85 c0                	test   %eax,%eax
c000cd8f:	0f 84 8a 00 00 00    	je     c000ce1f <release_prog_resource+0x109>
/work/x86_os_my/userprog/wait_exit.c:43
			/* pte_ptr功能：得到虚拟地址vaddr对应的pte指针*/
			/* 取虚拟地址pde_idx*0x400000的pte指针，就限制了，取到的都是，所有页表中的第0个页表项的指针
			 * 因为限定了跨度是 一个页表能表示的虚拟地址范围。
			 */
			first_pte_vaddr_in_pde = pte_ptr(pde_idx * 0x400000);	// 一个pde指向的页表，表示的内存容量是4M(4k页大小*1024个页),即0x400000
c000cd95:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c000cd99:	c1 e0 16             	shl    $0x16,%eax
c000cd9c:	83 ec 0c             	sub    $0xc,%esp
c000cd9f:	50                   	push   %eax
c000cda0:	e8 91 5b ff ff       	call   c0002936 <pte_ptr>
c000cda5:	83 c4 10             	add    $0x10,%esp
c000cda8:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/userprog/wait_exit.c:44
			pte_idx = 0;
c000cdab:	66 c7 45 f4 00 00    	movw   $0x0,-0xc(%ebp)
/work/x86_os_my/userprog/wait_exit.c:45
			while (pte_idx < user_pte_nr) {
c000cdb1:	eb 49                	jmp    c000cdfc <release_prog_resource+0xe6>
/work/x86_os_my/userprog/wait_exit.c:46
				v_pte_ptr = first_pte_vaddr_in_pde + pte_idx;	// first_pte_vaddr_in_pde 类型是 u32* 指针步长是4字节，一个页表项的大小
c000cdb3:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c000cdb7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000cdbe:	8b 45 d0             	mov    -0x30(%ebp),%eax
c000cdc1:	01 d0                	add    %edx,%eax
c000cdc3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/userprog/wait_exit.c:47
				pte = *v_pte_ptr;	// 【取到页表中的页表项，包含所指向的页地址+属性】
c000cdc6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000cdc9:	8b 00                	mov    (%eax),%eax
c000cdcb:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/userprog/wait_exit.c:48
				if (pte & 0x00000001) {
c000cdce:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000cdd1:	83 e0 01             	and    $0x1,%eax
c000cdd4:	85 c0                	test   %eax,%eax
c000cdd6:	74 19                	je     c000cdf1 <release_prog_resource+0xdb>
/work/x86_os_my/userprog/wait_exit.c:50
					/* 将pte中记录的物理页框直接在相应内存池的位图中清0 */
					pg_phy_addr = pte & 0xfffff000;	// 【页地址】
c000cdd8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000cddb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c000cde0:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/userprog/wait_exit.c:51
					free_a_phy_page(pg_phy_addr);
c000cde3:	83 ec 0c             	sub    $0xc,%esp
c000cde6:	ff 75 cc             	pushl  -0x34(%ebp)
c000cde9:	e8 64 6b ff ff       	call   c0003952 <free_a_phy_page>
c000cdee:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/wait_exit.c:53
				}
				pte_idx++;
c000cdf1:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c000cdf5:	83 c0 01             	add    $0x1,%eax
c000cdf8:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
/work/x86_os_my/userprog/wait_exit.c:45
			/* 取虚拟地址pde_idx*0x400000的pte指针，就限制了，取到的都是，所有页表中的第0个页表项的指针
			 * 因为限定了跨度是 一个页表能表示的虚拟地址范围。
			 */
			first_pte_vaddr_in_pde = pte_ptr(pde_idx * 0x400000);	// 一个pde指向的页表，表示的内存容量是4M(4k页大小*1024个页),即0x400000
			pte_idx = 0;
			while (pte_idx < user_pte_nr) {
c000cdfc:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c000ce00:	66 3b 45 de          	cmp    -0x22(%ebp),%ax
c000ce04:	72 ad                	jb     c000cdb3 <release_prog_resource+0x9d>
/work/x86_os_my/userprog/wait_exit.c:56
					free_a_phy_page(pg_phy_addr);
				}
				pte_idx++;
			}
			/* 将pde中记录的物理页框直接在相应内存池的位图中清0 */
			pg_phy_addr = pde & 0xfffff000;
c000ce06:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000ce09:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c000ce0e:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/userprog/wait_exit.c:57
			free_a_phy_page(pg_phy_addr);
c000ce11:	83 ec 0c             	sub    $0xc,%esp
c000ce14:	ff 75 cc             	pushl  -0x34(%ebp)
c000ce17:	e8 36 6b ff ff       	call   c0003952 <free_a_phy_page>
c000ce1c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/wait_exit.c:59
		}
		pde_idx++;
c000ce1f:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c000ce23:	83 c0 01             	add    $0x1,%eax
c000ce26:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
/work/x86_os_my/userprog/wait_exit.c:35
	/* 回收页表中用户空间的页框 */
	/* 回收的方法有两种，一是按照虚拟内存池 pcb->userprog_vaddr 回收，检查位图中被置为 1 的 bit，计算出相应虚拟地址，逐位回收。
	另一种方法相对直接一点，直接遍历页表，如果页表的 p 位为 1，这说明已经分配了物理页框。
	第 1 种方法咱们已经在实现 fork 时为复制用户地址空间用过了，
	现在咱们尝试第二种方法。*/
	while (pde_idx < user_pde_nr) {
c000ce2a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c000ce2e:	66 3b 45 ea          	cmp    -0x16(%ebp),%ax
c000ce32:	0f 82 34 ff ff ff    	jb     c000cd6c <release_prog_resource+0x56>
/work/x86_os_my/userprog/wait_exit.c:63
		}
		pde_idx++;
	}

	/* 回收用户虚拟地址池所占的物理内存*/
	uint32_t bitmap_pg_cnt = (release_thread->userprog_vaddr.vaddr_bitmap.btmp_bytes_len) / PG_SIZE;
c000ce38:	8b 45 08             	mov    0x8(%ebp),%eax
c000ce3b:	8b 40 58             	mov    0x58(%eax),%eax
c000ce3e:	c1 e8 0c             	shr    $0xc,%eax
c000ce41:	89 45 c8             	mov    %eax,-0x38(%ebp)
/work/x86_os_my/userprog/wait_exit.c:64
	uint8_t* user_vaddr_pool_bitmap = release_thread->userprog_vaddr.vaddr_bitmap.bits;
c000ce44:	8b 45 08             	mov    0x8(%ebp),%eax
c000ce47:	8b 40 5c             	mov    0x5c(%eax),%eax
c000ce4a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
/work/x86_os_my/userprog/wait_exit.c:65
	mfree_page(PF_KERNEL, user_vaddr_pool_bitmap, bitmap_pg_cnt);
c000ce4d:	83 ec 04             	sub    $0x4,%esp
c000ce50:	ff 75 c8             	pushl  -0x38(%ebp)
c000ce53:	ff 75 c4             	pushl  -0x3c(%ebp)
c000ce56:	6a 01                	push   $0x1
c000ce58:	e8 bb 64 ff ff       	call   c0003318 <mfree_page>
c000ce5d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/wait_exit.c:68

	/* 关闭进程打开的文件 */
	uint8_t fd_idx = 3;
c000ce60:	c6 45 f3 03          	movb   $0x3,-0xd(%ebp)
/work/x86_os_my/userprog/wait_exit.c:69
	while(fd_idx < MAX_FILES_OPEN_PER_PROC) {
c000ce64:	eb 2d                	jmp    c000ce93 <release_prog_resource+0x17d>
/work/x86_os_my/userprog/wait_exit.c:70
		if (release_thread->fd_table[fd_idx] != -1) {
c000ce66:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
c000ce6a:	8b 45 08             	mov    0x8(%ebp),%eax
c000ce6d:	83 c2 08             	add    $0x8,%edx
c000ce70:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
c000ce74:	83 f8 ff             	cmp    $0xffffffff,%eax
c000ce77:	74 10                	je     c000ce89 <release_prog_resource+0x173>
/work/x86_os_my/userprog/wait_exit.c:71
			sys_close(fd_idx);
c000ce79:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c000ce7d:	83 ec 0c             	sub    $0xc,%esp
c000ce80:	50                   	push   %eax
c000ce81:	e8 30 ad ff ff       	call   c0007bb6 <sys_close>
c000ce86:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/wait_exit.c:73
		}
		fd_idx++;
c000ce89:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c000ce8d:	83 c0 01             	add    $0x1,%eax
c000ce90:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/userprog/wait_exit.c:69
	uint8_t* user_vaddr_pool_bitmap = release_thread->userprog_vaddr.vaddr_bitmap.bits;
	mfree_page(PF_KERNEL, user_vaddr_pool_bitmap, bitmap_pg_cnt);

	/* 关闭进程打开的文件 */
	uint8_t fd_idx = 3;
	while(fd_idx < MAX_FILES_OPEN_PER_PROC) {
c000ce93:	80 7d f3 07          	cmpb   $0x7,-0xd(%ebp)
c000ce97:	76 cd                	jbe    c000ce66 <release_prog_resource+0x150>
/work/x86_os_my/userprog/wait_exit.c:75
		if (release_thread->fd_table[fd_idx] != -1) {
			sys_close(fd_idx);
		}
		fd_idx++;
	}
}
c000ce99:	90                   	nop
c000ce9a:	c9                   	leave  
c000ce9b:	c3                   	ret    

c000ce9c <find_child>:
find_child():
/work/x86_os_my/userprog/wait_exit.c:79

/* list_traversal的回调函数：
 * 查找pelem的parent_pid是否是ppid,成功返回true,失败则返回false */
static bool find_child(struct list_elem* pelem, int32_t ppid) {
c000ce9c:	55                   	push   %ebp
c000ce9d:	89 e5                	mov    %esp,%ebp
c000ce9f:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/userprog/wait_exit.c:81
	/* elem2entry中间的参数all_list_tag取决于pelem对应的变量名 */
	struct task_struct* pthread = elem2entry(struct task_struct, all_list_tag, pelem);
c000cea2:	8b 45 08             	mov    0x8(%ebp),%eax
c000cea5:	83 e8 4c             	sub    $0x4c,%eax
c000cea8:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/userprog/wait_exit.c:82
	if (pthread->parent_pid == ppid) {	// 若该任务的parent_pid为ppid,返回
c000ceab:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000ceae:	0f b7 80 10 01 00 00 	movzwl 0x110(%eax),%eax
c000ceb5:	98                   	cwtl   
c000ceb6:	3b 45 0c             	cmp    0xc(%ebp),%eax
c000ceb9:	75 07                	jne    c000cec2 <find_child+0x26>
/work/x86_os_my/userprog/wait_exit.c:83
		return true;	// list_traversal只有在回调函数返回true时才会停止继续遍历,所以在此返回true
c000cebb:	b8 01 00 00 00       	mov    $0x1,%eax
c000cec0:	eb 05                	jmp    c000cec7 <find_child+0x2b>
/work/x86_os_my/userprog/wait_exit.c:85
	}
	return false;		// 让list_traversal继续传递下一个元素
c000cec2:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/userprog/wait_exit.c:86
}
c000cec7:	c9                   	leave  
c000cec8:	c3                   	ret    

c000cec9 <find_hanging_child>:
find_hanging_child():
/work/x86_os_my/userprog/wait_exit.c:90

/* list_traversal的回调函数：
 * 查找状态为TASK_HANGING的任务 */
static bool find_hanging_child(struct list_elem* pelem, int32_t ppid) {
c000cec9:	55                   	push   %ebp
c000ceca:	89 e5                	mov    %esp,%ebp
c000cecc:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/userprog/wait_exit.c:91
	struct task_struct* pthread = elem2entry(struct task_struct, all_list_tag, pelem);
c000cecf:	8b 45 08             	mov    0x8(%ebp),%eax
c000ced2:	83 e8 4c             	sub    $0x4c,%eax
c000ced5:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/userprog/wait_exit.c:92
	if (pthread->parent_pid == ppid && pthread->status == TASK_HANGING) {
c000ced8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000cedb:	0f b7 80 10 01 00 00 	movzwl 0x110(%eax),%eax
c000cee2:	98                   	cwtl   
c000cee3:	3b 45 0c             	cmp    0xc(%ebp),%eax
c000cee6:	75 12                	jne    c000cefa <find_hanging_child+0x31>
/work/x86_os_my/userprog/wait_exit.c:92 (discriminator 1)
c000cee8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000ceeb:	8b 40 08             	mov    0x8(%eax),%eax
c000ceee:	83 f8 04             	cmp    $0x4,%eax
c000cef1:	75 07                	jne    c000cefa <find_hanging_child+0x31>
/work/x86_os_my/userprog/wait_exit.c:93
		return true;
c000cef3:	b8 01 00 00 00       	mov    $0x1,%eax
c000cef8:	eb 05                	jmp    c000ceff <find_hanging_child+0x36>
/work/x86_os_my/userprog/wait_exit.c:95
	}
	return false; 
c000cefa:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/userprog/wait_exit.c:96
}
c000ceff:	c9                   	leave  
c000cf00:	c3                   	ret    

c000cf01 <init_adopt_a_child>:
init_adopt_a_child():
/work/x86_os_my/userprog/wait_exit.c:100

/* list_traversal的回调函数：
 * 将一个子进程过继给init */
static bool init_adopt_a_child(struct list_elem* pelem, int32_t pid) {
c000cf01:	55                   	push   %ebp
c000cf02:	89 e5                	mov    %esp,%ebp
c000cf04:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/userprog/wait_exit.c:101
	struct task_struct* pthread = elem2entry(struct task_struct, all_list_tag, pelem);
c000cf07:	8b 45 08             	mov    0x8(%ebp),%eax
c000cf0a:	83 e8 4c             	sub    $0x4c,%eax
c000cf0d:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/userprog/wait_exit.c:102
	if (pthread->parent_pid == pid) {	// 若该进程的parent_pid为pid,返回
c000cf10:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000cf13:	0f b7 80 10 01 00 00 	movzwl 0x110(%eax),%eax
c000cf1a:	98                   	cwtl   
c000cf1b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c000cf1e:	75 0c                	jne    c000cf2c <init_adopt_a_child+0x2b>
/work/x86_os_my/userprog/wait_exit.c:103
		pthread->parent_pid = 1;		// init进程pid是1
c000cf20:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000cf23:	66 c7 80 10 01 00 00 	movw   $0x1,0x110(%eax)
c000cf2a:	01 00 
/work/x86_os_my/userprog/wait_exit.c:105
	}
	return false;	// 让list_traversal继续传递下一个元素
c000cf2c:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/userprog/wait_exit.c:106
}
c000cf31:	c9                   	leave  
c000cf32:	c3                   	ret    

c000cf33 <sys_wait>:
sys_wait():
/work/x86_os_my/userprog/wait_exit.c:110

/* 父进程等待子进程调用exit,将子进程的退出状态保存到status指向的变量.
 * 成功则返回子进程的pid,失败则返回-1 */
pid_t sys_wait(int32_t* status) {
c000cf33:	55                   	push   %ebp
c000cf34:	89 e5                	mov    %esp,%ebp
c000cf36:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/wait_exit.c:111
	struct task_struct* parent_thread = running_thread();
c000cf39:	e8 ae 6e ff ff       	call   c0003dec <running_thread>
c000cf3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/wait_exit.c:115

	while(1) {
		/* 优先处理已经是挂起hanging状态的任务 */
		struct list_elem* child_elem = list_traversal(&thread_all_list, find_hanging_child, parent_thread->pid);
c000cf41:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000cf44:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c000cf48:	98                   	cwtl   
c000cf49:	83 ec 04             	sub    $0x4,%esp
c000cf4c:	50                   	push   %eax
c000cf4d:	68 c9 ce 00 c0       	push   $0xc000cec9
c000cf52:	68 b8 3c 01 c0       	push   $0xc0013cb8
c000cf57:	e8 c3 7b ff ff       	call   c0004b1f <list_traversal>
c000cf5c:	83 c4 10             	add    $0x10,%esp
c000cf5f:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/wait_exit.c:117
		/* 若有挂起的子进程 */
		if (child_elem != NULL) {
c000cf62:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c000cf66:	74 3c                	je     c000cfa4 <sys_wait+0x71>
/work/x86_os_my/userprog/wait_exit.c:118
			struct task_struct* child_thread = elem2entry(struct task_struct, all_list_tag, child_elem);
c000cf68:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000cf6b:	83 e8 4c             	sub    $0x4c,%eax
c000cf6e:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/userprog/wait_exit.c:119
			*status = child_thread->exit_status; 
c000cf71:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000cf74:	0f b6 80 12 01 00 00 	movzbl 0x112(%eax),%eax
c000cf7b:	0f be d0             	movsbl %al,%edx
c000cf7e:	8b 45 08             	mov    0x8(%ebp),%eax
c000cf81:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/userprog/wait_exit.c:122

			/* thread_exit之后,pcb会被回收,因此提前获取pid */
			uint16_t child_pid = child_thread->pid;
c000cf83:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000cf86:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c000cf8a:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
/work/x86_os_my/userprog/wait_exit.c:125

			/* 2 从就绪队列和全部队列中删除进程表项*/
			thread_exit(child_thread, false);	// 传入的参数need_schedule=false,使thread_exit调用后回到此处
c000cf8e:	83 ec 08             	sub    $0x8,%esp
c000cf91:	6a 00                	push   $0x0
c000cf93:	ff 75 ec             	pushl  -0x14(%ebp)
c000cf96:	e8 87 78 ff ff       	call   c0004822 <thread_exit>
c000cf9b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/wait_exit.c:128
			/* 进程表项是进程或线程的最后保留的资源, 至此该进程彻底消失了 */

			return child_pid;
c000cf9e:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c000cfa2:	eb 40                	jmp    c000cfe4 <sys_wait+0xb1>
/work/x86_os_my/userprog/wait_exit.c:132
		}

		/* 判断是否有子进程 */
		child_elem = list_traversal(&thread_all_list, find_child, parent_thread->pid);
c000cfa4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000cfa7:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c000cfab:	98                   	cwtl   
c000cfac:	83 ec 04             	sub    $0x4,%esp
c000cfaf:	50                   	push   %eax
c000cfb0:	68 9c ce 00 c0       	push   $0xc000ce9c
c000cfb5:	68 b8 3c 01 c0       	push   $0xc0013cb8
c000cfba:	e8 60 7b ff ff       	call   c0004b1f <list_traversal>
c000cfbf:	83 c4 10             	add    $0x10,%esp
c000cfc2:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/wait_exit.c:133
		if (child_elem == NULL) {	// 若没有子进程则出错返回
c000cfc5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c000cfc9:	75 07                	jne    c000cfd2 <sys_wait+0x9f>
/work/x86_os_my/userprog/wait_exit.c:134
			return -1;
c000cfcb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000cfd0:	eb 12                	jmp    c000cfe4 <sys_wait+0xb1>
/work/x86_os_my/userprog/wait_exit.c:137
		} else {
			/* 若子进程还未运行完,即还未调用exit,则将自己挂起,直到子进程在执行exit时将自己唤醒 */
			thread_block(TASK_WAITING); 
c000cfd2:	83 ec 0c             	sub    $0xc,%esp
c000cfd5:	6a 03                	push   $0x3
c000cfd7:	e8 70 73 ff ff       	call   c000434c <thread_block>
c000cfdc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/wait_exit.c:139
		}
	}
c000cfdf:	e9 5d ff ff ff       	jmp    c000cf41 <sys_wait+0xe>
/work/x86_os_my/userprog/wait_exit.c:140
}
c000cfe4:	c9                   	leave  
c000cfe5:	c3                   	ret    

c000cfe6 <sys_exit>:
sys_exit():
/work/x86_os_my/userprog/wait_exit.c:143

/* 子进程用来结束自己时调用 */
void sys_exit(int32_t status) {
c000cfe6:	55                   	push   %ebp
c000cfe7:	89 e5                	mov    %esp,%ebp
c000cfe9:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/wait_exit.c:144
	struct task_struct* child_thread = running_thread();
c000cfec:	e8 fb 6d ff ff       	call   c0003dec <running_thread>
c000cff1:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/wait_exit.c:145
	child_thread->exit_status = status;		//返回值
c000cff4:	8b 45 08             	mov    0x8(%ebp),%eax
c000cff7:	89 c2                	mov    %eax,%edx
c000cff9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000cffc:	88 90 12 01 00 00    	mov    %dl,0x112(%eax)
/work/x86_os_my/userprog/wait_exit.c:146
	if (child_thread->parent_pid == -1) {
c000d002:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000d005:	0f b7 80 10 01 00 00 	movzwl 0x110(%eax),%eax
c000d00c:	66 83 f8 ff          	cmp    $0xffff,%ax
c000d010:	75 1c                	jne    c000d02e <sys_exit+0x48>
/work/x86_os_my/userprog/wait_exit.c:147
		PANIC("sys_exit: child_thread->parent_pid is -1\n");
c000d012:	68 bc f8 00 c0       	push   $0xc000f8bc
c000d017:	68 fc f8 00 c0       	push   $0xc000f8fc
c000d01c:	68 93 00 00 00       	push   $0x93
c000d021:	68 e6 f8 00 c0       	push   $0xc000f8e6
c000d026:	e8 d6 54 ff ff       	call   c0002501 <panic_spin>
c000d02b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/wait_exit.c:151
	}

	/* 将进程child_thread的所有子进程都过继给init */
	list_traversal(&thread_all_list, init_adopt_a_child, child_thread->pid);
c000d02e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000d031:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c000d035:	98                   	cwtl   
c000d036:	83 ec 04             	sub    $0x4,%esp
c000d039:	50                   	push   %eax
c000d03a:	68 01 cf 00 c0       	push   $0xc000cf01
c000d03f:	68 b8 3c 01 c0       	push   $0xc0013cb8
c000d044:	e8 d6 7a ff ff       	call   c0004b1f <list_traversal>
c000d049:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/wait_exit.c:154

	/* 回收进程child_thread的资源 */
	release_prog_resource(child_thread); 
c000d04c:	83 ec 0c             	sub    $0xc,%esp
c000d04f:	ff 75 f4             	pushl  -0xc(%ebp)
c000d052:	e8 bf fc ff ff       	call   c000cd16 <release_prog_resource>
c000d057:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/wait_exit.c:157

	/* 如果父进程正在等待子进程退出,将父进程唤醒 */
	struct task_struct* parent_thread = pid2thread(child_thread->parent_pid);
c000d05a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000d05d:	0f b7 80 10 01 00 00 	movzwl 0x110(%eax),%eax
c000d064:	98                   	cwtl   
c000d065:	83 ec 0c             	sub    $0xc,%esp
c000d068:	50                   	push   %eax
c000d069:	e8 ac 78 ff ff       	call   c000491a <pid2thread>
c000d06e:	83 c4 10             	add    $0x10,%esp
c000d071:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/wait_exit.c:158
	if (parent_thread->status == TASK_WAITING) {
c000d074:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000d077:	8b 40 08             	mov    0x8(%eax),%eax
c000d07a:	83 f8 03             	cmp    $0x3,%eax
c000d07d:	75 0e                	jne    c000d08d <sys_exit+0xa7>
/work/x86_os_my/userprog/wait_exit.c:159
		thread_unblock(parent_thread);
c000d07f:	83 ec 0c             	sub    $0xc,%esp
c000d082:	ff 75 f0             	pushl  -0x10(%ebp)
c000d085:	e8 25 73 ff ff       	call   c00043af <thread_unblock>
c000d08a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/wait_exit.c:163
	}

	/* 将自己挂起,等待父进程获取其status,并回收其pcb */
	thread_block(TASK_HANGING);
c000d08d:	83 ec 0c             	sub    $0xc,%esp
c000d090:	6a 04                	push   $0x4
c000d092:	e8 b5 72 ff ff       	call   c000434c <thread_block>
c000d097:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/wait_exit.c:164
}
c000d09a:	90                   	nop
c000d09b:	c9                   	leave  
c000d09c:	c3                   	ret    
