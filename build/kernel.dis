
./build/kernel.bin:     file format elf32-i386


Disassembly of section .text:

c0001500 <main>:
main():
/work/x86_os_my/kernel/main.c:36
void k_thread_a(void*);
void k_thread_b(void*);
void u_prog_a(void);
void u_prog_b(void);

int main(void) {
c0001500:	8d 4c 24 04          	lea    0x4(%esp),%ecx
c0001504:	83 e4 f0             	and    $0xfffffff0,%esp
c0001507:	ff 71 fc             	pushl  -0x4(%ecx)
c000150a:	55                   	push   %ebp
c000150b:	89 e5                	mov    %esp,%ebp
c000150d:	51                   	push   %ecx
c000150e:	83 ec 04             	sub    $0x4,%esp
/work/x86_os_my/kernel/main.c:37
	put_str("I am kernel\n");
c0001511:	83 ec 0c             	sub    $0xc,%esp
c0001514:	68 64 57 00 c0       	push   $0xc0005764
c0001519:	e8 e2 0e 00 00       	call   c0002400 <put_str>
c000151e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:38
	init_all();
c0001521:	e8 5d 03 00 00       	call   c0001883 <init_all>
/work/x86_os_my/kernel/main.c:39
	intr_enable();
c0001526:	e8 eb 06 00 00       	call   c0001c16 <intr_enable>
/work/x86_os_my/kernel/main.c:40
	process_execute(u_prog_a, "u_prog_a");
c000152b:	83 ec 08             	sub    $0x8,%esp
c000152e:	68 71 57 00 c0       	push   $0xc0005771
c0001533:	68 51 17 00 c0       	push   $0xc0001751
c0001538:	e8 87 3d 00 00       	call   c00052c4 <process_execute>
c000153d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:41
	process_execute(u_prog_b, "u_prog_b");
c0001540:	83 ec 08             	sub    $0x8,%esp
c0001543:	68 7a 57 00 c0       	push   $0xc000577a
c0001548:	68 ea 17 00 c0       	push   $0xc00017ea
c000154d:	e8 72 3d 00 00       	call   c00052c4 <process_execute>
c0001552:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:42
	thread_start("k_thread_a", 31, k_thread_a, "I am thread_a");
c0001555:	68 83 57 00 c0       	push   $0xc0005783
c000155a:	68 89 15 00 c0       	push   $0xc0001589
c000155f:	6a 1f                	push   $0x1f
c0001561:	68 91 57 00 c0       	push   $0xc0005791
c0001566:	e8 7d 29 00 00       	call   c0003ee8 <thread_start>
c000156b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:43
	thread_start("k_thread_b", 31, k_thread_b, "I am thread_b");
c000156e:	68 9c 57 00 c0       	push   $0xc000579c
c0001573:	68 6d 16 00 c0       	push   $0xc000166d
c0001578:	6a 1f                	push   $0x1f
c000157a:	68 aa 57 00 c0       	push   $0xc00057aa
c000157f:	e8 64 29 00 00       	call   c0003ee8 <thread_start>
c0001584:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:44 (discriminator 1)
	while(1);
c0001587:	eb fe                	jmp    c0001587 <main+0x87>

c0001589 <k_thread_a>:
k_thread_a():
/work/x86_os_my/kernel/main.c:49
	return 0;
}

/* 在线程中运行的函数 */
void k_thread_a(void* arg) {     
c0001589:	55                   	push   %ebp
c000158a:	89 e5                	mov    %esp,%ebp
c000158c:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/main.c:50
	void* addr1 = sys_malloc(256);
c000158f:	83 ec 0c             	sub    $0xc,%esp
c0001592:	68 00 01 00 00       	push   $0x100
c0001597:	e8 f7 18 00 00       	call   c0002e93 <sys_malloc>
c000159c:	83 c4 10             	add    $0x10,%esp
c000159f:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/main.c:51
	void* addr2 = sys_malloc(255);
c00015a2:	83 ec 0c             	sub    $0xc,%esp
c00015a5:	68 ff 00 00 00       	push   $0xff
c00015aa:	e8 e4 18 00 00       	call   c0002e93 <sys_malloc>
c00015af:	83 c4 10             	add    $0x10,%esp
c00015b2:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/main.c:52
	void* addr3 = sys_malloc(254);
c00015b5:	83 ec 0c             	sub    $0xc,%esp
c00015b8:	68 fe 00 00 00       	push   $0xfe
c00015bd:	e8 d1 18 00 00       	call   c0002e93 <sys_malloc>
c00015c2:	83 c4 10             	add    $0x10,%esp
c00015c5:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/main.c:53
	console_put_str(" thread_a malloc addr:0x");
c00015c8:	83 ec 0c             	sub    $0xc,%esp
c00015cb:	68 b5 57 00 c0       	push   $0xc00057b5
c00015d0:	e8 ab 2f 00 00       	call   c0004580 <console_put_str>
c00015d5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:54
	console_put_int((int)addr1);
c00015d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00015db:	83 ec 0c             	sub    $0xc,%esp
c00015de:	50                   	push   %eax
c00015df:	e8 e6 2f 00 00       	call   c00045ca <console_put_int>
c00015e4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:55
	console_put_char(',');
c00015e7:	83 ec 0c             	sub    $0xc,%esp
c00015ea:	6a 2c                	push   $0x2c
c00015ec:	e8 b0 2f 00 00       	call   c00045a1 <console_put_char>
c00015f1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:56
	console_put_int((int)addr2);
c00015f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00015f7:	83 ec 0c             	sub    $0xc,%esp
c00015fa:	50                   	push   %eax
c00015fb:	e8 ca 2f 00 00       	call   c00045ca <console_put_int>
c0001600:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:57
	console_put_char(',');
c0001603:	83 ec 0c             	sub    $0xc,%esp
c0001606:	6a 2c                	push   $0x2c
c0001608:	e8 94 2f 00 00       	call   c00045a1 <console_put_char>
c000160d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:58
	console_put_int((int)addr3);
c0001610:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0001613:	83 ec 0c             	sub    $0xc,%esp
c0001616:	50                   	push   %eax
c0001617:	e8 ae 2f 00 00       	call   c00045ca <console_put_int>
c000161c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:59
	console_put_char('\n');
c000161f:	83 ec 0c             	sub    $0xc,%esp
c0001622:	6a 0a                	push   $0xa
c0001624:	e8 78 2f 00 00       	call   c00045a1 <console_put_char>
c0001629:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:61

	int cpu_delay = 100000;
c000162c:	c7 45 f4 a0 86 01 00 	movl   $0x186a0,-0xc(%ebp)
/work/x86_os_my/kernel/main.c:62
	while(cpu_delay-- > 0);
c0001633:	90                   	nop
/work/x86_os_my/kernel/main.c:62 (discriminator 1)
c0001634:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001637:	8d 50 ff             	lea    -0x1(%eax),%edx
c000163a:	89 55 f4             	mov    %edx,-0xc(%ebp)
c000163d:	85 c0                	test   %eax,%eax
c000163f:	7f f3                	jg     c0001634 <k_thread_a+0xab>
/work/x86_os_my/kernel/main.c:63
	sys_free(addr1);
c0001641:	83 ec 0c             	sub    $0xc,%esp
c0001644:	ff 75 f0             	pushl  -0x10(%ebp)
c0001647:	e8 74 1e 00 00       	call   c00034c0 <sys_free>
c000164c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:64
	sys_free(addr2);
c000164f:	83 ec 0c             	sub    $0xc,%esp
c0001652:	ff 75 ec             	pushl  -0x14(%ebp)
c0001655:	e8 66 1e 00 00       	call   c00034c0 <sys_free>
c000165a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:65
	sys_free(addr3);
c000165d:	83 ec 0c             	sub    $0xc,%esp
c0001660:	ff 75 e8             	pushl  -0x18(%ebp)
c0001663:	e8 58 1e 00 00       	call   c00034c0 <sys_free>
c0001668:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:66 (discriminator 1)
	while(1);
c000166b:	eb fe                	jmp    c000166b <k_thread_a+0xe2>

c000166d <k_thread_b>:
k_thread_b():
/work/x86_os_my/kernel/main.c:70
}

/* 在线程中运行的函数 */
void k_thread_b(void* arg) {     
c000166d:	55                   	push   %ebp
c000166e:	89 e5                	mov    %esp,%ebp
c0001670:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/main.c:71
	void* addr1 = sys_malloc(256);
c0001673:	83 ec 0c             	sub    $0xc,%esp
c0001676:	68 00 01 00 00       	push   $0x100
c000167b:	e8 13 18 00 00       	call   c0002e93 <sys_malloc>
c0001680:	83 c4 10             	add    $0x10,%esp
c0001683:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/main.c:72
	void* addr2 = sys_malloc(255);
c0001686:	83 ec 0c             	sub    $0xc,%esp
c0001689:	68 ff 00 00 00       	push   $0xff
c000168e:	e8 00 18 00 00       	call   c0002e93 <sys_malloc>
c0001693:	83 c4 10             	add    $0x10,%esp
c0001696:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/main.c:73
	void* addr3 = sys_malloc(254);
c0001699:	83 ec 0c             	sub    $0xc,%esp
c000169c:	68 fe 00 00 00       	push   $0xfe
c00016a1:	e8 ed 17 00 00       	call   c0002e93 <sys_malloc>
c00016a6:	83 c4 10             	add    $0x10,%esp
c00016a9:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/main.c:74
	console_put_str(" thread_b malloc addr:0x");
c00016ac:	83 ec 0c             	sub    $0xc,%esp
c00016af:	68 ce 57 00 c0       	push   $0xc00057ce
c00016b4:	e8 c7 2e 00 00       	call   c0004580 <console_put_str>
c00016b9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:75
	console_put_int((int)addr1);
c00016bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00016bf:	83 ec 0c             	sub    $0xc,%esp
c00016c2:	50                   	push   %eax
c00016c3:	e8 02 2f 00 00       	call   c00045ca <console_put_int>
c00016c8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:76
	console_put_char(',');
c00016cb:	83 ec 0c             	sub    $0xc,%esp
c00016ce:	6a 2c                	push   $0x2c
c00016d0:	e8 cc 2e 00 00       	call   c00045a1 <console_put_char>
c00016d5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:77
	console_put_int((int)addr2);
c00016d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00016db:	83 ec 0c             	sub    $0xc,%esp
c00016de:	50                   	push   %eax
c00016df:	e8 e6 2e 00 00       	call   c00045ca <console_put_int>
c00016e4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:78
	console_put_char(',');
c00016e7:	83 ec 0c             	sub    $0xc,%esp
c00016ea:	6a 2c                	push   $0x2c
c00016ec:	e8 b0 2e 00 00       	call   c00045a1 <console_put_char>
c00016f1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:79
	console_put_int((int)addr3);
c00016f4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00016f7:	83 ec 0c             	sub    $0xc,%esp
c00016fa:	50                   	push   %eax
c00016fb:	e8 ca 2e 00 00       	call   c00045ca <console_put_int>
c0001700:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:80
	console_put_char('\n');
c0001703:	83 ec 0c             	sub    $0xc,%esp
c0001706:	6a 0a                	push   $0xa
c0001708:	e8 94 2e 00 00       	call   c00045a1 <console_put_char>
c000170d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:82

	int cpu_delay = 100000;
c0001710:	c7 45 f4 a0 86 01 00 	movl   $0x186a0,-0xc(%ebp)
/work/x86_os_my/kernel/main.c:83
	while(cpu_delay-- > 0);
c0001717:	90                   	nop
/work/x86_os_my/kernel/main.c:83 (discriminator 1)
c0001718:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000171b:	8d 50 ff             	lea    -0x1(%eax),%edx
c000171e:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0001721:	85 c0                	test   %eax,%eax
c0001723:	7f f3                	jg     c0001718 <k_thread_b+0xab>
/work/x86_os_my/kernel/main.c:84
	sys_free(addr1);
c0001725:	83 ec 0c             	sub    $0xc,%esp
c0001728:	ff 75 f0             	pushl  -0x10(%ebp)
c000172b:	e8 90 1d 00 00       	call   c00034c0 <sys_free>
c0001730:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:85
	sys_free(addr2);
c0001733:	83 ec 0c             	sub    $0xc,%esp
c0001736:	ff 75 ec             	pushl  -0x14(%ebp)
c0001739:	e8 82 1d 00 00       	call   c00034c0 <sys_free>
c000173e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:86
	sys_free(addr3);
c0001741:	83 ec 0c             	sub    $0xc,%esp
c0001744:	ff 75 e8             	pushl  -0x18(%ebp)
c0001747:	e8 74 1d 00 00       	call   c00034c0 <sys_free>
c000174c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:87 (discriminator 1)
	while(1);
c000174f:	eb fe                	jmp    c000174f <k_thread_b+0xe2>

c0001751 <u_prog_a>:
u_prog_a():
/work/x86_os_my/kernel/main.c:91
}

/* 测试用户进程 */
void u_prog_a(void) {
c0001751:	55                   	push   %ebp
c0001752:	89 e5                	mov    %esp,%ebp
c0001754:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/main.c:92
	void* addr1 = malloc(256);
c0001757:	83 ec 0c             	sub    $0xc,%esp
c000175a:	68 00 01 00 00       	push   $0x100
c000175f:	e8 b5 3c 00 00       	call   c0005419 <malloc>
c0001764:	83 c4 10             	add    $0x10,%esp
c0001767:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/main.c:93
	void* addr2 = malloc(255);
c000176a:	83 ec 0c             	sub    $0xc,%esp
c000176d:	68 ff 00 00 00       	push   $0xff
c0001772:	e8 a2 3c 00 00       	call   c0005419 <malloc>
c0001777:	83 c4 10             	add    $0x10,%esp
c000177a:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/main.c:94
	void* addr3 = malloc(254);
c000177d:	83 ec 0c             	sub    $0xc,%esp
c0001780:	68 fe 00 00 00       	push   $0xfe
c0001785:	e8 8f 3c 00 00       	call   c0005419 <malloc>
c000178a:	83 c4 10             	add    $0x10,%esp
c000178d:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/main.c:95
	printf(" prog_a malloc addr:0x%x,0x%x,0x%x\n", (int)addr1, (int)addr2, (int)addr3);
c0001790:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0001793:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0001796:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0001799:	51                   	push   %ecx
c000179a:	52                   	push   %edx
c000179b:	50                   	push   %eax
c000179c:	68 e8 57 00 c0       	push   $0xc00057e8
c00017a1:	e8 62 3f 00 00       	call   c0005708 <printf>
c00017a6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:97

	int cpu_delay = 100000;
c00017a9:	c7 45 f4 a0 86 01 00 	movl   $0x186a0,-0xc(%ebp)
/work/x86_os_my/kernel/main.c:98
	while(cpu_delay-- > 0);
c00017b0:	90                   	nop
/work/x86_os_my/kernel/main.c:98 (discriminator 1)
c00017b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00017b4:	8d 50 ff             	lea    -0x1(%eax),%edx
c00017b7:	89 55 f4             	mov    %edx,-0xc(%ebp)
c00017ba:	85 c0                	test   %eax,%eax
c00017bc:	7f f3                	jg     c00017b1 <u_prog_a+0x60>
/work/x86_os_my/kernel/main.c:99
	free(addr1);
c00017be:	83 ec 0c             	sub    $0xc,%esp
c00017c1:	ff 75 f0             	pushl  -0x10(%ebp)
c00017c4:	e8 6f 3c 00 00       	call   c0005438 <free>
c00017c9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:100
	free(addr2);
c00017cc:	83 ec 0c             	sub    $0xc,%esp
c00017cf:	ff 75 ec             	pushl  -0x14(%ebp)
c00017d2:	e8 61 3c 00 00       	call   c0005438 <free>
c00017d7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:101
	free(addr3);
c00017da:	83 ec 0c             	sub    $0xc,%esp
c00017dd:	ff 75 e8             	pushl  -0x18(%ebp)
c00017e0:	e8 53 3c 00 00       	call   c0005438 <free>
c00017e5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:102 (discriminator 1)
	while(1);
c00017e8:	eb fe                	jmp    c00017e8 <u_prog_a+0x97>

c00017ea <u_prog_b>:
u_prog_b():
/work/x86_os_my/kernel/main.c:106
}

/* 测试用户进程 */
void u_prog_b(void) {
c00017ea:	55                   	push   %ebp
c00017eb:	89 e5                	mov    %esp,%ebp
c00017ed:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/main.c:107
	void* addr1 = malloc(256);
c00017f0:	83 ec 0c             	sub    $0xc,%esp
c00017f3:	68 00 01 00 00       	push   $0x100
c00017f8:	e8 1c 3c 00 00       	call   c0005419 <malloc>
c00017fd:	83 c4 10             	add    $0x10,%esp
c0001800:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/main.c:108
	void* addr2 = malloc(255);
c0001803:	83 ec 0c             	sub    $0xc,%esp
c0001806:	68 ff 00 00 00       	push   $0xff
c000180b:	e8 09 3c 00 00       	call   c0005419 <malloc>
c0001810:	83 c4 10             	add    $0x10,%esp
c0001813:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/main.c:109
	void* addr3 = malloc(254);
c0001816:	83 ec 0c             	sub    $0xc,%esp
c0001819:	68 fe 00 00 00       	push   $0xfe
c000181e:	e8 f6 3b 00 00       	call   c0005419 <malloc>
c0001823:	83 c4 10             	add    $0x10,%esp
c0001826:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/main.c:110
	printf(" prog_b malloc addr:0x%x,0x%x,0x%x\n", (int)addr1, (int)addr2, (int)addr3);
c0001829:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c000182c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c000182f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0001832:	51                   	push   %ecx
c0001833:	52                   	push   %edx
c0001834:	50                   	push   %eax
c0001835:	68 0c 58 00 c0       	push   $0xc000580c
c000183a:	e8 c9 3e 00 00       	call   c0005708 <printf>
c000183f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:112

	int cpu_delay = 100000;
c0001842:	c7 45 f4 a0 86 01 00 	movl   $0x186a0,-0xc(%ebp)
/work/x86_os_my/kernel/main.c:113
	while(cpu_delay-- > 0);
c0001849:	90                   	nop
/work/x86_os_my/kernel/main.c:113 (discriminator 1)
c000184a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000184d:	8d 50 ff             	lea    -0x1(%eax),%edx
c0001850:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0001853:	85 c0                	test   %eax,%eax
c0001855:	7f f3                	jg     c000184a <u_prog_b+0x60>
/work/x86_os_my/kernel/main.c:114
	free(addr1);
c0001857:	83 ec 0c             	sub    $0xc,%esp
c000185a:	ff 75 f0             	pushl  -0x10(%ebp)
c000185d:	e8 d6 3b 00 00       	call   c0005438 <free>
c0001862:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:115
	free(addr2);
c0001865:	83 ec 0c             	sub    $0xc,%esp
c0001868:	ff 75 ec             	pushl  -0x14(%ebp)
c000186b:	e8 c8 3b 00 00       	call   c0005438 <free>
c0001870:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:116
	free(addr3);
c0001873:	83 ec 0c             	sub    $0xc,%esp
c0001876:	ff 75 e8             	pushl  -0x18(%ebp)
c0001879:	e8 ba 3b 00 00       	call   c0005438 <free>
c000187e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:117 (discriminator 1)
	while(1);
c0001881:	eb fe                	jmp    c0001881 <u_prog_b+0x97>

c0001883 <init_all>:
init_all():
/work/x86_os_my/kernel/init.c:13
#include "keyboard.h"
#include "tss.h"
#include "syscall-init.h"

/*负责初始化所有模块 */
void init_all() {
c0001883:	55                   	push   %ebp
c0001884:	89 e5                	mov    %esp,%ebp
c0001886:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/kernel/init.c:14
	put_str("init_all\n");
c0001889:	83 ec 0c             	sub    $0xc,%esp
c000188c:	68 30 58 00 c0       	push   $0xc0005830
c0001891:	e8 6a 0b 00 00       	call   c0002400 <put_str>
c0001896:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/init.c:15
	idt_init();			// 初始化中断
c0001899:	e8 29 04 00 00       	call   c0001cc7 <idt_init>
/work/x86_os_my/kernel/init.c:16
	mem_init();			// 初始化内存管理系统
c000189e:	e8 96 20 00 00       	call   c0003939 <mem_init>
/work/x86_os_my/kernel/init.c:17
	thread_init();		// 初始化线程相关结构
c00018a3:	e8 1b 2a 00 00       	call   c00042c3 <thread_init>
/work/x86_os_my/kernel/init.c:18
	timer_init();		// 初始化PIT
c00018a8:	e8 97 05 00 00       	call   c0001e44 <timer_init>
/work/x86_os_my/kernel/init.c:19
	console_init();		// 控制台初始化最好放在开中断之前
c00018ad:	e8 83 2c 00 00       	call   c0004535 <console_init>
/work/x86_os_my/kernel/init.c:20
	keyboard_init();	// 键盘初始化
c00018b2:	e8 fc 32 00 00       	call   c0004bb3 <keyboard_init>
/work/x86_os_my/kernel/init.c:21
	tss_init();			// tss初始化
c00018b7:	e8 b2 36 00 00       	call   c0004f6e <tss_init>
/work/x86_os_my/kernel/init.c:22
	syscall_init();		// 初始化系统调用
c00018bc:	e8 ca 3b 00 00       	call   c000548b <syscall_init>
/work/x86_os_my/kernel/init.c:23
}
c00018c1:	90                   	nop
c00018c2:	c9                   	leave  
c00018c3:	c3                   	ret    

c00018c4 <outb>:
outb():
/work/x86_os_my/lib/kernel/io.h:17
#define __LIB_IO_H
#include "stdint.h"
//inline省去了函数调用开支

/* 向端口port写入一个字节*/
static inline void outb(uint16_t port, uint8_t data) {
c00018c4:	55                   	push   %ebp
c00018c5:	89 e5                	mov    %esp,%ebp
c00018c7:	83 ec 08             	sub    $0x8,%esp
c00018ca:	8b 55 08             	mov    0x8(%ebp),%edx
c00018cd:	8b 45 0c             	mov    0xc(%ebp),%eax
c00018d0:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c00018d4:	88 45 f8             	mov    %al,-0x8(%ebp)
/work/x86_os_my/lib/kernel/io.h:21
/*********************************************************
 a表示用寄存器al或ax或eax,对端口指定N表示0~255, d表示用dx存储端口号, 
 %b0表示对应al,%w1表示对应dx */ 
   asm volatile ( "outb %b0, %w1" : : "a" (data), "Nd" (port));    
c00018d7:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c00018db:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c00018df:	ee                   	out    %al,(%dx)
/work/x86_os_my/lib/kernel/io.h:23
/******************************************************/
}
c00018e0:	90                   	nop
c00018e1:	c9                   	leave  
c00018e2:	c3                   	ret    

c00018e3 <pic_init>:
pic_init():
/work/x86_os_my/kernel/interrupt.c:41
//自定义类型 intr_handler = void*
extern intr_handler intr_entry_table[IDT_DESC_CNT];	    // 声明引用汇编kernel.S中的中断处理函数入口数组

/* 初始化可编程中断控制器8259A */
// outb 来着 lib/kernel/io.h 内联汇编写法
static void pic_init(void) {
c00018e3:	55                   	push   %ebp
c00018e4:	89 e5                	mov    %esp,%ebp
c00018e6:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:43
	/* 初始化主片 */
	outb (PIC_M_CTRL, 0x11);	// ICW1: 边沿触发,级联8259, 需要ICW4.
c00018e9:	6a 11                	push   $0x11
c00018eb:	6a 20                	push   $0x20
c00018ed:	e8 d2 ff ff ff       	call   c00018c4 <outb>
c00018f2:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:44
	outb (PIC_M_DATA, 0x20);	// ICW2: 起始中断向量号为0x20,也就是IR[0-7] 为 0x20 ~ 0x27.
c00018f5:	6a 20                	push   $0x20
c00018f7:	6a 21                	push   $0x21
c00018f9:	e8 c6 ff ff ff       	call   c00018c4 <outb>
c00018fe:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:45
	outb (PIC_M_DATA, 0x04);	// ICW3: IR2接从片. 
c0001901:	6a 04                	push   $0x4
c0001903:	6a 21                	push   $0x21
c0001905:	e8 ba ff ff ff       	call   c00018c4 <outb>
c000190a:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:46
	outb (PIC_M_DATA, 0x01);	// ICW4: 8086模式, 正常EOI
c000190d:	6a 01                	push   $0x1
c000190f:	6a 21                	push   $0x21
c0001911:	e8 ae ff ff ff       	call   c00018c4 <outb>
c0001916:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:49

	/* 初始化从片 */
	outb (PIC_S_CTRL, 0x11);	// ICW1: 边沿触发,级联8259, 需要ICW4.
c0001919:	6a 11                	push   $0x11
c000191b:	68 a0 00 00 00       	push   $0xa0
c0001920:	e8 9f ff ff ff       	call   c00018c4 <outb>
c0001925:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:50
	outb (PIC_S_DATA, 0x28);	// ICW2: 起始中断向量号为0x28,也就是IR[8-15] 为 0x28 ~ 0x2F.
c0001928:	6a 28                	push   $0x28
c000192a:	68 a1 00 00 00       	push   $0xa1
c000192f:	e8 90 ff ff ff       	call   c00018c4 <outb>
c0001934:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:51
	outb (PIC_S_DATA, 0x02);	// ICW3: 设置从片连接到主片的IR2引脚
c0001937:	6a 02                	push   $0x2
c0001939:	68 a1 00 00 00       	push   $0xa1
c000193e:	e8 81 ff ff ff       	call   c00018c4 <outb>
c0001943:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:52
	outb (PIC_S_DATA, 0x01);	// ICW4: 8086模式, 正常EOI
c0001946:	6a 01                	push   $0x1
c0001948:	68 a1 00 00 00       	push   $0xa1
c000194d:	e8 72 ff ff ff       	call   c00018c4 <outb>
c0001952:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:55

	/* 打开主片上IR0,也就是目前只接受 时钟0xfe、时钟和键盘0xfc 产生的中断 */
	outb (PIC_M_DATA, 0xfe);
c0001955:	68 fe 00 00 00       	push   $0xfe
c000195a:	6a 21                	push   $0x21
c000195c:	e8 63 ff ff ff       	call   c00018c4 <outb>
c0001961:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:56
	outb (PIC_S_DATA, 0xff);
c0001964:	68 ff 00 00 00       	push   $0xff
c0001969:	68 a1 00 00 00       	push   $0xa1
c000196e:	e8 51 ff ff ff       	call   c00018c4 <outb>
c0001973:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:58

	put_str("   pic_init done\n");
c0001976:	83 ec 0c             	sub    $0xc,%esp
c0001979:	68 3c 58 00 c0       	push   $0xc000583c
c000197e:	e8 7d 0a 00 00       	call   c0002400 <put_str>
c0001983:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:59
}
c0001986:	90                   	nop
c0001987:	c9                   	leave  
c0001988:	c3                   	ret    

c0001989 <make_idt_desc>:
make_idt_desc():
/work/x86_os_my/kernel/interrupt.c:62

/* 创建中断门描述符 */
static void make_idt_desc(struct gate_desc* p_gdesc, uint8_t attr, intr_handler function) { 
c0001989:	55                   	push   %ebp
c000198a:	89 e5                	mov    %esp,%ebp
c000198c:	83 ec 04             	sub    $0x4,%esp
c000198f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0001992:	88 45 fc             	mov    %al,-0x4(%ebp)
/work/x86_os_my/kernel/interrupt.c:63
	p_gdesc->func_offset_low_word = (uint32_t)function & 0x0000FFFF;
c0001995:	8b 45 10             	mov    0x10(%ebp),%eax
c0001998:	89 c2                	mov    %eax,%edx
c000199a:	8b 45 08             	mov    0x8(%ebp),%eax
c000199d:	66 89 10             	mov    %dx,(%eax)
/work/x86_os_my/kernel/interrupt.c:64
	p_gdesc->selector = SELECTOR_K_CODE;
c00019a0:	8b 45 08             	mov    0x8(%ebp),%eax
c00019a3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
/work/x86_os_my/kernel/interrupt.c:65
	p_gdesc->dcount = 0;
c00019a9:	8b 45 08             	mov    0x8(%ebp),%eax
c00019ac:	c6 40 04 00          	movb   $0x0,0x4(%eax)
/work/x86_os_my/kernel/interrupt.c:66
	p_gdesc->attribute = attr;
c00019b0:	8b 45 08             	mov    0x8(%ebp),%eax
c00019b3:	0f b6 55 fc          	movzbl -0x4(%ebp),%edx
c00019b7:	88 50 05             	mov    %dl,0x5(%eax)
/work/x86_os_my/kernel/interrupt.c:67
	p_gdesc->func_offset_high_word = ((uint32_t)function & 0xFFFF0000) >> 16;
c00019ba:	8b 45 10             	mov    0x10(%ebp),%eax
c00019bd:	c1 e8 10             	shr    $0x10,%eax
c00019c0:	89 c2                	mov    %eax,%edx
c00019c2:	8b 45 08             	mov    0x8(%ebp),%eax
c00019c5:	66 89 50 06          	mov    %dx,0x6(%eax)
/work/x86_os_my/kernel/interrupt.c:68
}
c00019c9:	90                   	nop
c00019ca:	c9                   	leave  
c00019cb:	c3                   	ret    

c00019cc <idt_desc_init>:
idt_desc_init():
/work/x86_os_my/kernel/interrupt.c:71

/*初始化中断描述符表*/
static void idt_desc_init(void) {
c00019cc:	55                   	push   %ebp
c00019cd:	89 e5                	mov    %esp,%ebp
c00019cf:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/interrupt.c:73
	int i;
	int lastindex = IDT_DESC_CNT - 1;
c00019d2:	c7 45 f0 80 00 00 00 	movl   $0x80,-0x10(%ebp)
/work/x86_os_my/kernel/interrupt.c:74
	for (i = 0; i < IDT_DESC_CNT; i++) {
c00019d9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c00019e0:	eb 29                	jmp    c0001a0b <idt_desc_init+0x3f>
/work/x86_os_my/kernel/interrupt.c:75 (discriminator 3)
		make_idt_desc(&idt[i], IDT_DESC_ATTR_DPL0, intr_entry_table[i]); 
c00019e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00019e5:	8b 04 85 00 80 00 c0 	mov    -0x3fff8000(,%eax,4),%eax
c00019ec:	8b 55 f4             	mov    -0xc(%ebp),%edx
c00019ef:	c1 e2 03             	shl    $0x3,%edx
c00019f2:	81 c2 60 81 00 c0    	add    $0xc0008160,%edx
c00019f8:	50                   	push   %eax
c00019f9:	68 8e 00 00 00       	push   $0x8e
c00019fe:	52                   	push   %edx
c00019ff:	e8 85 ff ff ff       	call   c0001989 <make_idt_desc>
c0001a04:	83 c4 0c             	add    $0xc,%esp
/work/x86_os_my/kernel/interrupt.c:74 (discriminator 3)

/*初始化中断描述符表*/
static void idt_desc_init(void) {
	int i;
	int lastindex = IDT_DESC_CNT - 1;
	for (i = 0; i < IDT_DESC_CNT; i++) {
c0001a07:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:74 (discriminator 1)
c0001a0b:	81 7d f4 80 00 00 00 	cmpl   $0x80,-0xc(%ebp)
c0001a12:	7e ce                	jle    c00019e2 <idt_desc_init+0x16>
/work/x86_os_my/kernel/interrupt.c:79
		make_idt_desc(&idt[i], IDT_DESC_ATTR_DPL0, intr_entry_table[i]); 
	}
	/* 系统调用对应的中断门dpl为3！
	 * 中断处理程序为单独的syscall_handler */
	make_idt_desc(&idt[lastindex], IDT_DESC_ATTR_DPL3, syscall_handler);
c0001a14:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0001a17:	c1 e0 03             	shl    $0x3,%eax
c0001a1a:	05 60 81 00 c0       	add    $0xc0008160,%eax
c0001a1f:	68 d7 23 00 c0       	push   $0xc00023d7
c0001a24:	68 ee 00 00 00       	push   $0xee
c0001a29:	50                   	push   %eax
c0001a2a:	e8 5a ff ff ff       	call   c0001989 <make_idt_desc>
c0001a2f:	83 c4 0c             	add    $0xc,%esp
/work/x86_os_my/kernel/interrupt.c:80
	put_str("   idt_desc_init done\n");
c0001a32:	83 ec 0c             	sub    $0xc,%esp
c0001a35:	68 4e 58 00 c0       	push   $0xc000584e
c0001a3a:	e8 c1 09 00 00       	call   c0002400 <put_str>
c0001a3f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:81
}
c0001a42:	90                   	nop
c0001a43:	c9                   	leave  
c0001a44:	c3                   	ret    

c0001a45 <general_intr_handler>:
general_intr_handler():
/work/x86_os_my/kernel/interrupt.c:84

/* 通用的中断处理函数,一般用在异常出现时的处理 */
static void general_intr_handler(uint8_t vec_nr) {
c0001a45:	55                   	push   %ebp
c0001a46:	89 e5                	mov    %esp,%ebp
c0001a48:	83 ec 28             	sub    $0x28,%esp
c0001a4b:	8b 45 08             	mov    0x8(%ebp),%eax
c0001a4e:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/kernel/interrupt.c:85
	if (vec_nr == 0x27 || vec_nr == 0x2f) {	// 0x2f是从片8259A上的最后一个irq引脚，保留
c0001a51:	80 7d e4 27          	cmpb   $0x27,-0x1c(%ebp)
c0001a55:	0f 84 bf 00 00 00    	je     c0001b1a <general_intr_handler+0xd5>
/work/x86_os_my/kernel/interrupt.c:85 (discriminator 1)
c0001a5b:	80 7d e4 2f          	cmpb   $0x2f,-0x1c(%ebp)
c0001a5f:	0f 84 b5 00 00 00    	je     c0001b1a <general_intr_handler+0xd5>
/work/x86_os_my/kernel/interrupt.c:90
		return;	//IRQ7和IRQ15会产生伪中断(spurious interrupt),无须处理。
	}
	
	/* 将光标置为左上角 并清空一片区域 */
	set_cursor(0);
c0001a65:	83 ec 0c             	sub    $0xc,%esp
c0001a68:	6a 00                	push   $0x0
c0001a6a:	e8 df 0a 00 00       	call   c000254e <set_cursor>
c0001a6f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:91
	int cursor_pos = 0;
c0001a72:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:92
	while(cursor_pos < 320) {
c0001a79:	eb 11                	jmp    c0001a8c <general_intr_handler+0x47>
/work/x86_os_my/kernel/interrupt.c:93
		put_char(' ');
c0001a7b:	83 ec 0c             	sub    $0xc,%esp
c0001a7e:	6a 20                	push   $0x20
c0001a80:	e8 99 09 00 00       	call   c000241e <put_char>
c0001a85:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:94
		cursor_pos++;
c0001a88:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:92
	}
	
	/* 将光标置为左上角 并清空一片区域 */
	set_cursor(0);
	int cursor_pos = 0;
	while(cursor_pos < 320) {
c0001a8c:	81 7d f4 3f 01 00 00 	cmpl   $0x13f,-0xc(%ebp)
c0001a93:	7e e6                	jle    c0001a7b <general_intr_handler+0x36>
/work/x86_os_my/kernel/interrupt.c:98
		put_char(' ');
		cursor_pos++;
	}

	/* 将光标置为左上角 打印信息 */
	set_cursor(0);
c0001a95:	83 ec 0c             	sub    $0xc,%esp
c0001a98:	6a 00                	push   $0x0
c0001a9a:	e8 af 0a 00 00       	call   c000254e <set_cursor>
c0001a9f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:99
	put_str("!!!!!!!      excetion message begin  !!!!!!!!\n");
c0001aa2:	83 ec 0c             	sub    $0xc,%esp
c0001aa5:	68 68 58 00 c0       	push   $0xc0005868
c0001aaa:	e8 51 09 00 00       	call   c0002400 <put_str>
c0001aaf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:100
	set_cursor(88);			// 第2行第8个字符
c0001ab2:	83 ec 0c             	sub    $0xc,%esp
c0001ab5:	6a 58                	push   $0x58
c0001ab7:	e8 92 0a 00 00       	call   c000254e <set_cursor>
c0001abc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:101
	put_str(intr_name[vec_nr]);
c0001abf:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0001ac3:	8b 04 85 20 86 00 c0 	mov    -0x3fff79e0(,%eax,4),%eax
c0001aca:	83 ec 0c             	sub    $0xc,%esp
c0001acd:	50                   	push   %eax
c0001ace:	e8 2d 09 00 00       	call   c0002400 <put_str>
c0001ad3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:102
	if (vec_nr == 14) {		// 若为Pagefault,将缺失的地址打印出来并悬停
c0001ad6:	80 7d e4 0e          	cmpb   $0xe,-0x1c(%ebp)
c0001ada:	75 2c                	jne    c0001b08 <general_intr_handler+0xc3>
/work/x86_os_my/kernel/interrupt.c:103
		int page_fault_vaddr = 0; 
c0001adc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/kernel/interrupt.c:104
		asm ("movl %%cr2, %0" : "=r" (page_fault_vaddr));	  // cr2是存放造成page_fault的地址
c0001ae3:	0f 20 d0             	mov    %cr2,%eax
c0001ae6:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/interrupt.c:105
		put_str("\npage fault addr is ");
c0001ae9:	83 ec 0c             	sub    $0xc,%esp
c0001aec:	68 97 58 00 c0       	push   $0xc0005897
c0001af1:	e8 0a 09 00 00       	call   c0002400 <put_str>
c0001af6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:106
		put_int(page_fault_vaddr); 
c0001af9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0001afc:	83 ec 0c             	sub    $0xc,%esp
c0001aff:	50                   	push   %eax
c0001b00:	e8 e6 09 00 00       	call   c00024eb <put_int>
c0001b05:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:108
	}
	put_str("\n!!!!!!!      excetion message end    !!!!!!!!\n");
c0001b08:	83 ec 0c             	sub    $0xc,%esp
c0001b0b:	68 ac 58 00 c0       	push   $0xc00058ac
c0001b10:	e8 eb 08 00 00       	call   c0002400 <put_str>
c0001b15:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:111 (discriminator 1)
	// 能进入中断处理程序就表示已经处在关中断情况下, IF=0
	// 不会出现调度进程的情况。故下面的死循环不会再被中断，会卡死在这里。
	while(1);
c0001b18:	eb fe                	jmp    c0001b18 <general_intr_handler+0xd3>
/work/x86_os_my/kernel/interrupt.c:86
}

/* 通用的中断处理函数,一般用在异常出现时的处理 */
static void general_intr_handler(uint8_t vec_nr) {
	if (vec_nr == 0x27 || vec_nr == 0x2f) {	// 0x2f是从片8259A上的最后一个irq引脚，保留
		return;	//IRQ7和IRQ15会产生伪中断(spurious interrupt),无须处理。
c0001b1a:	90                   	nop
/work/x86_os_my/kernel/interrupt.c:112
	}
	put_str("\n!!!!!!!      excetion message end    !!!!!!!!\n");
	// 能进入中断处理程序就表示已经处在关中断情况下, IF=0
	// 不会出现调度进程的情况。故下面的死循环不会再被中断，会卡死在这里。
	while(1);
}
c0001b1b:	c9                   	leave  
c0001b1c:	c3                   	ret    

c0001b1d <exception_init>:
exception_init():
/work/x86_os_my/kernel/interrupt.c:115

/* 完成一般中断处理函数注册及异常名称注册 */
static void exception_init(void) {
c0001b1d:	55                   	push   %ebp
c0001b1e:	89 e5                	mov    %esp,%ebp
c0001b20:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:117
	int i;
	for (i = 0; i < IDT_DESC_CNT; i++) {
c0001b23:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0001b2a:	eb 20                	jmp    c0001b4c <exception_init+0x2f>
/work/x86_os_my/kernel/interrupt.c:120 (discriminator 3)
	/* idt_table数组中的函数是在进入中断后根据中断向量号调用的,
	 * 见kernel/kernel.S的call [idt_table + %1*4] */
		idt_table[i] = general_intr_handler;		// 默认为general_intr_handler，以后会由register_handler来注册具体处理函数。
c0001b2c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0001b2f:	c7 04 85 40 88 00 c0 	movl   $0xc0001a45,-0x3fff77c0(,%eax,4)
c0001b36:	45 1a 00 c0 
/work/x86_os_my/kernel/interrupt.c:121 (discriminator 3)
		intr_name[i] = "unknown";					// 先统一赋值为unknown 
c0001b3a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0001b3d:	c7 04 85 20 86 00 c0 	movl   $0xc00058dc,-0x3fff79e0(,%eax,4)
c0001b44:	dc 58 00 c0 
/work/x86_os_my/kernel/interrupt.c:117 (discriminator 3)
}

/* 完成一般中断处理函数注册及异常名称注册 */
static void exception_init(void) {
	int i;
	for (i = 0; i < IDT_DESC_CNT; i++) {
c0001b48:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
/work/x86_os_my/kernel/interrupt.c:117 (discriminator 1)
c0001b4c:	81 7d fc 80 00 00 00 	cmpl   $0x80,-0x4(%ebp)
c0001b53:	7e d7                	jle    c0001b2c <exception_init+0xf>
/work/x86_os_my/kernel/interrupt.c:123
	/* idt_table数组中的函数是在进入中断后根据中断向量号调用的,
	 * 见kernel/kernel.S的call [idt_table + %1*4] */
		idt_table[i] = general_intr_handler;		// 默认为general_intr_handler，以后会由register_handler来注册具体处理函数。
		intr_name[i] = "unknown";					// 先统一赋值为unknown 
	}
	intr_name[0] = "#DE Divide Error";
c0001b55:	c7 05 20 86 00 c0 e4 	movl   $0xc00058e4,0xc0008620
c0001b5c:	58 00 c0 
/work/x86_os_my/kernel/interrupt.c:124
	intr_name[1] = "#DB Debug Exception";
c0001b5f:	c7 05 24 86 00 c0 f5 	movl   $0xc00058f5,0xc0008624
c0001b66:	58 00 c0 
/work/x86_os_my/kernel/interrupt.c:125
	intr_name[2] = "NMI Interrupt";
c0001b69:	c7 05 28 86 00 c0 09 	movl   $0xc0005909,0xc0008628
c0001b70:	59 00 c0 
/work/x86_os_my/kernel/interrupt.c:126
	intr_name[3] = "#BP Breakpoint Exception";
c0001b73:	c7 05 2c 86 00 c0 17 	movl   $0xc0005917,0xc000862c
c0001b7a:	59 00 c0 
/work/x86_os_my/kernel/interrupt.c:127
	intr_name[4] = "#OF Overflow Exception";
c0001b7d:	c7 05 30 86 00 c0 30 	movl   $0xc0005930,0xc0008630
c0001b84:	59 00 c0 
/work/x86_os_my/kernel/interrupt.c:128
	intr_name[5] = "#BR BOUND Range Exceeded Exception";
c0001b87:	c7 05 34 86 00 c0 48 	movl   $0xc0005948,0xc0008634
c0001b8e:	59 00 c0 
/work/x86_os_my/kernel/interrupt.c:129
	intr_name[6] = "#UD Invalid Opcode Exception";
c0001b91:	c7 05 38 86 00 c0 6b 	movl   $0xc000596b,0xc0008638
c0001b98:	59 00 c0 
/work/x86_os_my/kernel/interrupt.c:130
	intr_name[7] = "#NM Device Not Available Exception";
c0001b9b:	c7 05 3c 86 00 c0 88 	movl   $0xc0005988,0xc000863c
c0001ba2:	59 00 c0 
/work/x86_os_my/kernel/interrupt.c:131
	intr_name[8] = "#DF Double Fault Exception";
c0001ba5:	c7 05 40 86 00 c0 ab 	movl   $0xc00059ab,0xc0008640
c0001bac:	59 00 c0 
/work/x86_os_my/kernel/interrupt.c:132
	intr_name[9] = "Coprocessor Segment Overrun";
c0001baf:	c7 05 44 86 00 c0 c6 	movl   $0xc00059c6,0xc0008644
c0001bb6:	59 00 c0 
/work/x86_os_my/kernel/interrupt.c:133
	intr_name[10] = "#TS Invalid TSS Exception";
c0001bb9:	c7 05 48 86 00 c0 e2 	movl   $0xc00059e2,0xc0008648
c0001bc0:	59 00 c0 
/work/x86_os_my/kernel/interrupt.c:134
	intr_name[11] = "#NP Segment Not Present";
c0001bc3:	c7 05 4c 86 00 c0 fc 	movl   $0xc00059fc,0xc000864c
c0001bca:	59 00 c0 
/work/x86_os_my/kernel/interrupt.c:135
	intr_name[12] = "#SS Stack Fault Exception";
c0001bcd:	c7 05 50 86 00 c0 14 	movl   $0xc0005a14,0xc0008650
c0001bd4:	5a 00 c0 
/work/x86_os_my/kernel/interrupt.c:136
	intr_name[13] = "#GP General Protection Exception";
c0001bd7:	c7 05 54 86 00 c0 30 	movl   $0xc0005a30,0xc0008654
c0001bde:	5a 00 c0 
/work/x86_os_my/kernel/interrupt.c:137
	intr_name[14] = "#PF Page-Fault Exception";
c0001be1:	c7 05 58 86 00 c0 51 	movl   $0xc0005a51,0xc0008658
c0001be8:	5a 00 c0 
/work/x86_os_my/kernel/interrupt.c:139
	// intr_name[15] 第15项是intel保留项，未使用
	intr_name[16] = "#MF x87 FPU Floating-Point Error";
c0001beb:	c7 05 60 86 00 c0 6c 	movl   $0xc0005a6c,0xc0008660
c0001bf2:	5a 00 c0 
/work/x86_os_my/kernel/interrupt.c:140
	intr_name[17] = "#AC Alignment Check Exception";
c0001bf5:	c7 05 64 86 00 c0 8d 	movl   $0xc0005a8d,0xc0008664
c0001bfc:	5a 00 c0 
/work/x86_os_my/kernel/interrupt.c:141
	intr_name[18] = "#MC Machine-Check Exception";
c0001bff:	c7 05 68 86 00 c0 ab 	movl   $0xc0005aab,0xc0008668
c0001c06:	5a 00 c0 
/work/x86_os_my/kernel/interrupt.c:142
	intr_name[19] = "#XF SIMD Floating-Point Exception";
c0001c09:	c7 05 6c 86 00 c0 c8 	movl   $0xc0005ac8,0xc000866c
c0001c10:	5a 00 c0 
/work/x86_os_my/kernel/interrupt.c:143
}
c0001c13:	90                   	nop
c0001c14:	c9                   	leave  
c0001c15:	c3                   	ret    

c0001c16 <intr_enable>:
intr_enable():
/work/x86_os_my/kernel/interrupt.c:146

/* 开中断并返回开中断前的状态*/
enum intr_status intr_enable() {
c0001c16:	55                   	push   %ebp
c0001c17:	89 e5                	mov    %esp,%ebp
c0001c19:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/interrupt.c:148
	enum intr_status old_status;
	if (INTR_ON == intr_get_status()) {
c0001c1c:	e8 65 00 00 00       	call   c0001c86 <intr_get_status>
c0001c21:	83 f8 01             	cmp    $0x1,%eax
c0001c24:	75 0c                	jne    c0001c32 <intr_enable+0x1c>
/work/x86_os_my/kernel/interrupt.c:149
		old_status = INTR_ON;
c0001c26:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:150
		return old_status;
c0001c2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001c30:	eb 0b                	jmp    c0001c3d <intr_enable+0x27>
/work/x86_os_my/kernel/interrupt.c:152
	} else {
		old_status = INTR_OFF;
c0001c32:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:153
		asm volatile("sti");	 // 开中断,sti指令将IF位置1
c0001c39:	fb                   	sti    
/work/x86_os_my/kernel/interrupt.c:154
		return old_status;
c0001c3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/kernel/interrupt.c:156
	}
}
c0001c3d:	c9                   	leave  
c0001c3e:	c3                   	ret    

c0001c3f <intr_disable>:
intr_disable():
/work/x86_os_my/kernel/interrupt.c:159

/* 关中断,并且返回关中断前的状态 */
enum intr_status intr_disable() {     
c0001c3f:	55                   	push   %ebp
c0001c40:	89 e5                	mov    %esp,%ebp
c0001c42:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/interrupt.c:161
	enum intr_status old_status;
	if (INTR_ON == intr_get_status()) {
c0001c45:	e8 3c 00 00 00       	call   c0001c86 <intr_get_status>
c0001c4a:	83 f8 01             	cmp    $0x1,%eax
c0001c4d:	75 0d                	jne    c0001c5c <intr_disable+0x1d>
/work/x86_os_my/kernel/interrupt.c:162
		old_status = INTR_ON;
c0001c4f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:163
		asm volatile("cli" : : : "memory"); // 关中断,cli指令将IF位置0
c0001c56:	fa                   	cli    
/work/x86_os_my/kernel/interrupt.c:164
		return old_status;
c0001c57:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001c5a:	eb 0a                	jmp    c0001c66 <intr_disable+0x27>
/work/x86_os_my/kernel/interrupt.c:166
	} else {
		old_status = INTR_OFF;
c0001c5c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:167
		return old_status;
c0001c63:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/kernel/interrupt.c:169
	}
}
c0001c66:	c9                   	leave  
c0001c67:	c3                   	ret    

c0001c68 <intr_set_status>:
intr_set_status():
/work/x86_os_my/kernel/interrupt.c:172

/* 将中断状态设置为status */
enum intr_status intr_set_status(enum intr_status status) {
c0001c68:	55                   	push   %ebp
c0001c69:	89 e5                	mov    %esp,%ebp
c0001c6b:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:173
	return status & INTR_ON ? intr_enable() : intr_disable();
c0001c6e:	8b 45 08             	mov    0x8(%ebp),%eax
c0001c71:	83 e0 01             	and    $0x1,%eax
c0001c74:	85 c0                	test   %eax,%eax
c0001c76:	74 07                	je     c0001c7f <intr_set_status+0x17>
/work/x86_os_my/kernel/interrupt.c:173 (discriminator 1)
c0001c78:	e8 99 ff ff ff       	call   c0001c16 <intr_enable>
c0001c7d:	eb 05                	jmp    c0001c84 <intr_set_status+0x1c>
/work/x86_os_my/kernel/interrupt.c:173 (discriminator 2)
c0001c7f:	e8 bb ff ff ff       	call   c0001c3f <intr_disable>
/work/x86_os_my/kernel/interrupt.c:174 (discriminator 5)
}
c0001c84:	c9                   	leave  
c0001c85:	c3                   	ret    

c0001c86 <intr_get_status>:
intr_get_status():
/work/x86_os_my/kernel/interrupt.c:177

/* 获取当前中断状态 */
enum intr_status intr_get_status() {
c0001c86:	55                   	push   %ebp
c0001c87:	89 e5                	mov    %esp,%ebp
c0001c89:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:178
	uint32_t eflags = 0; 
c0001c8c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
/work/x86_os_my/kernel/interrupt.c:179
	GET_EFLAGS(eflags);
c0001c93:	9c                   	pushf  
c0001c94:	58                   	pop    %eax
c0001c95:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/kernel/interrupt.c:180
	return (EFLAGS_IF & eflags) ? INTR_ON : INTR_OFF;
c0001c98:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0001c9b:	25 00 02 00 00       	and    $0x200,%eax
c0001ca0:	85 c0                	test   %eax,%eax
c0001ca2:	0f 95 c0             	setne  %al
c0001ca5:	0f b6 c0             	movzbl %al,%eax
/work/x86_os_my/kernel/interrupt.c:181
}
c0001ca8:	c9                   	leave  
c0001ca9:	c3                   	ret    

c0001caa <register_handler>:
register_handler():
/work/x86_os_my/kernel/interrupt.c:184

/* 在中断处理程序数组第vector_no个元素中注册安装中断处理程序function */
void register_handler(uint8_t vector_no, intr_handler function) {
c0001caa:	55                   	push   %ebp
c0001cab:	89 e5                	mov    %esp,%ebp
c0001cad:	83 ec 04             	sub    $0x4,%esp
c0001cb0:	8b 45 08             	mov    0x8(%ebp),%eax
c0001cb3:	88 45 fc             	mov    %al,-0x4(%ebp)
/work/x86_os_my/kernel/interrupt.c:187
/* idt_table数组中的函数是在进入中断后根据中断向量号调用的,
 * 见kernel/kernel.S的call [idt_table + %1*4] */
   idt_table[vector_no] = function; 
c0001cb6:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c0001cba:	8b 55 0c             	mov    0xc(%ebp),%edx
c0001cbd:	89 14 85 40 88 00 c0 	mov    %edx,-0x3fff77c0(,%eax,4)
/work/x86_os_my/kernel/interrupt.c:188
}
c0001cc4:	90                   	nop
c0001cc5:	c9                   	leave  
c0001cc6:	c3                   	ret    

c0001cc7 <idt_init>:
idt_init():
/work/x86_os_my/kernel/interrupt.c:191

/*完成有关中断的所有初始化工作*/
void idt_init() {
c0001cc7:	55                   	push   %ebp
c0001cc8:	89 e5                	mov    %esp,%ebp
c0001cca:	56                   	push   %esi
c0001ccb:	53                   	push   %ebx
c0001ccc:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:192
	put_str("idt_init start\n");
c0001ccf:	83 ec 0c             	sub    $0xc,%esp
c0001cd2:	68 ea 5a 00 c0       	push   $0xc0005aea
c0001cd7:	e8 24 07 00 00       	call   c0002400 <put_str>
c0001cdc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:193
	idt_desc_init();	// 初始化中断描述符表
c0001cdf:	e8 e8 fc ff ff       	call   c00019cc <idt_desc_init>
/work/x86_os_my/kernel/interrupt.c:194
	exception_init();	// 异常名初始化并注册通常的中断处理函数
c0001ce4:	e8 34 fe ff ff       	call   c0001b1d <exception_init>
/work/x86_os_my/kernel/interrupt.c:195
	pic_init();			// 初始化8259A
c0001ce9:	e8 f5 fb ff ff       	call   c00018e3 <pic_init>
/work/x86_os_my/kernel/interrupt.c:199

	/* 加载idt */
	// IDTR 是 48 位的寄存器，低 16 位是 IDT 的界限 = IDT 尺寸大小-1，高 32 位是 IDT 的线性基地址
	uint64_t idt_operand = ((sizeof(idt) - 1) | ((uint64_t)(uint32_t)idt << 16));
c0001cee:	b8 60 81 00 c0       	mov    $0xc0008160,%eax
c0001cf3:	ba 00 00 00 00       	mov    $0x0,%edx
c0001cf8:	0f a4 c2 10          	shld   $0x10,%eax,%edx
c0001cfc:	c1 e0 10             	shl    $0x10,%eax
c0001cff:	89 c1                	mov    %eax,%ecx
c0001d01:	81 c9 07 04 00 00    	or     $0x407,%ecx
c0001d07:	89 cb                	mov    %ecx,%ebx
c0001d09:	89 d0                	mov    %edx,%eax
c0001d0b:	80 cc 00             	or     $0x0,%ah
c0001d0e:	89 c6                	mov    %eax,%esi
c0001d10:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c0001d13:	89 75 f4             	mov    %esi,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:200
	asm volatile("lidt %0" : : "m" (idt_operand));
c0001d16:	0f 01 5d f0          	lidtl  -0x10(%ebp)
/work/x86_os_my/kernel/interrupt.c:201
	put_str("idt_init done\n");
c0001d1a:	83 ec 0c             	sub    $0xc,%esp
c0001d1d:	68 fa 5a 00 c0       	push   $0xc0005afa
c0001d22:	e8 d9 06 00 00       	call   c0002400 <put_str>
c0001d27:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:202
}
c0001d2a:	90                   	nop
c0001d2b:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0001d2e:	5b                   	pop    %ebx
c0001d2f:	5e                   	pop    %esi
c0001d30:	5d                   	pop    %ebp
c0001d31:	c3                   	ret    

c0001d32 <outb>:
outb():
/work/x86_os_my/lib/kernel/io.h:17
#define __LIB_IO_H
#include "stdint.h"
//inline省去了函数调用开支

/* 向端口port写入一个字节*/
static inline void outb(uint16_t port, uint8_t data) {
c0001d32:	55                   	push   %ebp
c0001d33:	89 e5                	mov    %esp,%ebp
c0001d35:	83 ec 08             	sub    $0x8,%esp
c0001d38:	8b 55 08             	mov    0x8(%ebp),%edx
c0001d3b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0001d3e:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c0001d42:	88 45 f8             	mov    %al,-0x8(%ebp)
/work/x86_os_my/lib/kernel/io.h:21
/*********************************************************
 a表示用寄存器al或ax或eax,对端口指定N表示0~255, d表示用dx存储端口号, 
 %b0表示对应al,%w1表示对应dx */ 
   asm volatile ( "outb %b0, %w1" : : "a" (data), "Nd" (port));    
c0001d45:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c0001d49:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0001d4d:	ee                   	out    %al,(%dx)
/work/x86_os_my/lib/kernel/io.h:23
/******************************************************/
}
c0001d4e:	90                   	nop
c0001d4f:	c9                   	leave  
c0001d50:	c3                   	ret    

c0001d51 <frequency_set>:
frequency_set():
/work/x86_os_my/device/timer.c:25
/* 把操作的计数器counter_no、读写锁属性rwl、计数器模式counter_mode写入模式控制寄存器并赋予初始值counter_value */
static void frequency_set(uint8_t counter_port, \
		uint8_t counter_no, \
		uint8_t rwl, \
		uint8_t counter_mode, \
		uint16_t counter_value) {
c0001d51:	55                   	push   %ebp
c0001d52:	89 e5                	mov    %esp,%ebp
c0001d54:	56                   	push   %esi
c0001d55:	53                   	push   %ebx
c0001d56:	83 ec 14             	sub    $0x14,%esp
c0001d59:	8b 45 08             	mov    0x8(%ebp),%eax
c0001d5c:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c0001d5f:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0001d62:	8b 55 14             	mov    0x14(%ebp),%edx
c0001d65:	8b 75 18             	mov    0x18(%ebp),%esi
c0001d68:	88 45 f4             	mov    %al,-0xc(%ebp)
c0001d6b:	88 5d f0             	mov    %bl,-0x10(%ebp)
c0001d6e:	88 4d ec             	mov    %cl,-0x14(%ebp)
c0001d71:	88 55 e8             	mov    %dl,-0x18(%ebp)
c0001d74:	66 89 75 e4          	mov    %si,-0x1c(%ebp)
/work/x86_os_my/device/timer.c:27
	/* 往控制字寄存器端口0x43中写入控制字 */
	outb(PIT_CONTROL_PORT, (uint8_t)(counter_no << 6 | rwl << 4 | counter_mode << 1));
c0001d78:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c0001d7c:	c1 e0 06             	shl    $0x6,%eax
c0001d7f:	89 c2                	mov    %eax,%edx
c0001d81:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0001d85:	c1 e0 04             	shl    $0x4,%eax
c0001d88:	09 c2                	or     %eax,%edx
c0001d8a:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c0001d8e:	01 c0                	add    %eax,%eax
c0001d90:	09 d0                	or     %edx,%eax
c0001d92:	0f b6 c0             	movzbl %al,%eax
c0001d95:	50                   	push   %eax
c0001d96:	6a 43                	push   $0x43
c0001d98:	e8 95 ff ff ff       	call   c0001d32 <outb>
c0001d9d:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/timer.c:29
	/* 先写入counter_value的低8位 */
	outb(counter_port, (uint8_t)counter_value);
c0001da0:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
c0001da4:	0f b6 d0             	movzbl %al,%edx
c0001da7:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0001dab:	52                   	push   %edx
c0001dac:	50                   	push   %eax
c0001dad:	e8 80 ff ff ff       	call   c0001d32 <outb>
c0001db2:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/timer.c:31
	/* 再写入counter_value的高8位 */
	outb(counter_port, (uint8_t)counter_value >> 8);
c0001db5:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0001db9:	6a 00                	push   $0x0
c0001dbb:	50                   	push   %eax
c0001dbc:	e8 71 ff ff ff       	call   c0001d32 <outb>
c0001dc1:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/timer.c:32
}
c0001dc4:	90                   	nop
c0001dc5:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0001dc8:	5b                   	pop    %ebx
c0001dc9:	5e                   	pop    %esi
c0001dca:	5d                   	pop    %ebp
c0001dcb:	c3                   	ret    

c0001dcc <intr_timer_handler>:
intr_timer_handler():
/work/x86_os_my/device/timer.c:35

/* 时钟的中断处理函数 */
static void intr_timer_handler(void) {
c0001dcc:	55                   	push   %ebp
c0001dcd:	89 e5                	mov    %esp,%ebp
c0001dcf:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/timer.c:36
	struct task_struct* cur_thread = running_thread();		// 返回线程PCB
c0001dd2:	e8 83 1f 00 00       	call   c0003d5a <running_thread>
c0001dd7:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/timer.c:38

	ASSERT(cur_thread->stack_magic == 0x19870916);			// 检查栈是否溢出
c0001dda:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001ddd:	8b 80 ec 00 00 00    	mov    0xec(%eax),%eax
c0001de3:	3d 16 09 87 19       	cmp    $0x19870916,%eax
c0001de8:	74 19                	je     c0001e03 <intr_timer_handler+0x37>
/work/x86_os_my/device/timer.c:38 (discriminator 1)
c0001dea:	68 0c 5b 00 c0       	push   $0xc0005b0c
c0001def:	68 64 5b 00 c0       	push   $0xc0005b64
c0001df4:	6a 26                	push   $0x26
c0001df6:	68 32 5b 00 c0       	push   $0xc0005b32
c0001dfb:	e8 72 07 00 00       	call   c0002572 <panic_spin>
c0001e00:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:40

	cur_thread->elapsed_ticks++;// 记录此线程占用的cpu时间
c0001e03:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001e06:	8b 40 20             	mov    0x20(%eax),%eax
c0001e09:	8d 50 01             	lea    0x1(%eax),%edx
c0001e0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001e0f:	89 50 20             	mov    %edx,0x20(%eax)
/work/x86_os_my/device/timer.c:41
	ticks++;	//从内核第一次处理时间中断开始,至今的滴哒数,是内核态和用户态总共的嘀哒数
c0001e12:	a1 44 8a 00 c0       	mov    0xc0008a44,%eax
c0001e17:	83 c0 01             	add    $0x1,%eax
c0001e1a:	a3 44 8a 00 c0       	mov    %eax,0xc0008a44
/work/x86_os_my/device/timer.c:43

	if (cur_thread->ticks == 0) {
c0001e1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001e22:	0f b6 40 1d          	movzbl 0x1d(%eax),%eax
c0001e26:	84 c0                	test   %al,%al
c0001e28:	75 07                	jne    c0001e31 <intr_timer_handler+0x65>
/work/x86_os_my/device/timer.c:44
		schedule();				// 若进程时间片用完就开始调度新的进程上cpu
c0001e2a:	e8 0f 22 00 00       	call   c000403e <schedule>
/work/x86_os_my/device/timer.c:48
	} else {
		cur_thread->ticks--;	// 将当前进程的时间片-1
	}
}
c0001e2f:	eb 10                	jmp    c0001e41 <intr_timer_handler+0x75>
/work/x86_os_my/device/timer.c:46
	ticks++;	//从内核第一次处理时间中断开始,至今的滴哒数,是内核态和用户态总共的嘀哒数

	if (cur_thread->ticks == 0) {
		schedule();				// 若进程时间片用完就开始调度新的进程上cpu
	} else {
		cur_thread->ticks--;	// 将当前进程的时间片-1
c0001e31:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001e34:	0f b6 40 1d          	movzbl 0x1d(%eax),%eax
c0001e38:	8d 50 ff             	lea    -0x1(%eax),%edx
c0001e3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001e3e:	88 50 1d             	mov    %dl,0x1d(%eax)
/work/x86_os_my/device/timer.c:48
	}
}
c0001e41:	90                   	nop
c0001e42:	c9                   	leave  
c0001e43:	c3                   	ret    

c0001e44 <timer_init>:
timer_init():
/work/x86_os_my/device/timer.c:51

/* 初始化PIT8253 */
void timer_init() {
c0001e44:	55                   	push   %ebp
c0001e45:	89 e5                	mov    %esp,%ebp
c0001e47:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/timer.c:52
	put_str("timer_init start\n");
c0001e4a:	83 ec 0c             	sub    $0xc,%esp
c0001e4d:	68 41 5b 00 c0       	push   $0xc0005b41
c0001e52:	e8 a9 05 00 00       	call   c0002400 <put_str>
c0001e57:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:54
	/* 设置8253的定时周期,也就是发中断的周期 */
	frequency_set(CONTRER0_PORT, COUNTER0_NO, READ_WRITE_LATCH, COUNTER_MODE, COUNTER0_VALUE);
c0001e5a:	83 ec 0c             	sub    $0xc,%esp
c0001e5d:	68 9b 2e 00 00       	push   $0x2e9b
c0001e62:	6a 02                	push   $0x2
c0001e64:	6a 03                	push   $0x3
c0001e66:	6a 00                	push   $0x0
c0001e68:	6a 40                	push   $0x40
c0001e6a:	e8 e2 fe ff ff       	call   c0001d51 <frequency_set>
c0001e6f:	83 c4 20             	add    $0x20,%esp
/work/x86_os_my/device/timer.c:55
	register_handler(0x20, intr_timer_handler);
c0001e72:	83 ec 08             	sub    $0x8,%esp
c0001e75:	68 cc 1d 00 c0       	push   $0xc0001dcc
c0001e7a:	6a 20                	push   $0x20
c0001e7c:	e8 29 fe ff ff       	call   c0001caa <register_handler>
c0001e81:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:56
	put_str("timer_init done\n");
c0001e84:	83 ec 0c             	sub    $0xc,%esp
c0001e87:	68 53 5b 00 c0       	push   $0xc0005b53
c0001e8c:	e8 6f 05 00 00       	call   c0002400 <put_str>
c0001e91:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:57
}
c0001e94:	90                   	nop
c0001e95:	c9                   	leave  
c0001e96:	c3                   	ret    
c0001e97:	66 90                	xchg   %ax,%ax
c0001e99:	66 90                	xchg   %ax,%ax
c0001e9b:	66 90                	xchg   %ax,%ax
c0001e9d:	66 90                	xchg   %ax,%ax
c0001e9f:	90                   	nop

c0001ea0 <intr_exit>:
intr_exit():
c0001ea0:	83 c4 04             	add    $0x4,%esp
c0001ea3:	61                   	popa   
c0001ea4:	0f a9                	pop    %gs
c0001ea6:	0f a1                	pop    %fs
c0001ea8:	07                   	pop    %es
c0001ea9:	1f                   	pop    %ds
c0001eaa:	83 c4 04             	add    $0x4,%esp
c0001ead:	cf                   	iret   

c0001eae <intr0x00entry>:
intr0x00entry():
c0001eae:	6a 00                	push   $0x0
c0001eb0:	1e                   	push   %ds
c0001eb1:	06                   	push   %es
c0001eb2:	0f a0                	push   %fs
c0001eb4:	0f a8                	push   %gs
c0001eb6:	60                   	pusha  
c0001eb7:	b0 20                	mov    $0x20,%al
c0001eb9:	e6 a0                	out    %al,$0xa0
c0001ebb:	e6 20                	out    %al,$0x20
c0001ebd:	6a 00                	push   $0x0
c0001ebf:	ff 15 40 88 00 c0    	call   *0xc0008840
c0001ec5:	eb d9                	jmp    c0001ea0 <intr_exit>

c0001ec7 <intr0x01entry>:
intr0x01entry():
c0001ec7:	6a 00                	push   $0x0
c0001ec9:	1e                   	push   %ds
c0001eca:	06                   	push   %es
c0001ecb:	0f a0                	push   %fs
c0001ecd:	0f a8                	push   %gs
c0001ecf:	60                   	pusha  
c0001ed0:	b0 20                	mov    $0x20,%al
c0001ed2:	e6 a0                	out    %al,$0xa0
c0001ed4:	e6 20                	out    %al,$0x20
c0001ed6:	6a 01                	push   $0x1
c0001ed8:	ff 15 44 88 00 c0    	call   *0xc0008844
c0001ede:	eb c0                	jmp    c0001ea0 <intr_exit>

c0001ee0 <intr0x02entry>:
intr0x02entry():
c0001ee0:	6a 00                	push   $0x0
c0001ee2:	1e                   	push   %ds
c0001ee3:	06                   	push   %es
c0001ee4:	0f a0                	push   %fs
c0001ee6:	0f a8                	push   %gs
c0001ee8:	60                   	pusha  
c0001ee9:	b0 20                	mov    $0x20,%al
c0001eeb:	e6 a0                	out    %al,$0xa0
c0001eed:	e6 20                	out    %al,$0x20
c0001eef:	6a 02                	push   $0x2
c0001ef1:	ff 15 48 88 00 c0    	call   *0xc0008848
c0001ef7:	eb a7                	jmp    c0001ea0 <intr_exit>

c0001ef9 <intr0x03entry>:
intr0x03entry():
c0001ef9:	6a 00                	push   $0x0
c0001efb:	1e                   	push   %ds
c0001efc:	06                   	push   %es
c0001efd:	0f a0                	push   %fs
c0001eff:	0f a8                	push   %gs
c0001f01:	60                   	pusha  
c0001f02:	b0 20                	mov    $0x20,%al
c0001f04:	e6 a0                	out    %al,$0xa0
c0001f06:	e6 20                	out    %al,$0x20
c0001f08:	6a 03                	push   $0x3
c0001f0a:	ff 15 4c 88 00 c0    	call   *0xc000884c
c0001f10:	eb 8e                	jmp    c0001ea0 <intr_exit>

c0001f12 <intr0x04entry>:
intr0x04entry():
c0001f12:	6a 00                	push   $0x0
c0001f14:	1e                   	push   %ds
c0001f15:	06                   	push   %es
c0001f16:	0f a0                	push   %fs
c0001f18:	0f a8                	push   %gs
c0001f1a:	60                   	pusha  
c0001f1b:	b0 20                	mov    $0x20,%al
c0001f1d:	e6 a0                	out    %al,$0xa0
c0001f1f:	e6 20                	out    %al,$0x20
c0001f21:	6a 04                	push   $0x4
c0001f23:	ff 15 50 88 00 c0    	call   *0xc0008850
c0001f29:	e9 72 ff ff ff       	jmp    c0001ea0 <intr_exit>

c0001f2e <intr0x05entry>:
intr0x05entry():
c0001f2e:	6a 00                	push   $0x0
c0001f30:	1e                   	push   %ds
c0001f31:	06                   	push   %es
c0001f32:	0f a0                	push   %fs
c0001f34:	0f a8                	push   %gs
c0001f36:	60                   	pusha  
c0001f37:	b0 20                	mov    $0x20,%al
c0001f39:	e6 a0                	out    %al,$0xa0
c0001f3b:	e6 20                	out    %al,$0x20
c0001f3d:	6a 05                	push   $0x5
c0001f3f:	ff 15 54 88 00 c0    	call   *0xc0008854
c0001f45:	e9 56 ff ff ff       	jmp    c0001ea0 <intr_exit>

c0001f4a <intr0x06entry>:
intr0x06entry():
c0001f4a:	6a 00                	push   $0x0
c0001f4c:	1e                   	push   %ds
c0001f4d:	06                   	push   %es
c0001f4e:	0f a0                	push   %fs
c0001f50:	0f a8                	push   %gs
c0001f52:	60                   	pusha  
c0001f53:	b0 20                	mov    $0x20,%al
c0001f55:	e6 a0                	out    %al,$0xa0
c0001f57:	e6 20                	out    %al,$0x20
c0001f59:	6a 06                	push   $0x6
c0001f5b:	ff 15 58 88 00 c0    	call   *0xc0008858
c0001f61:	e9 3a ff ff ff       	jmp    c0001ea0 <intr_exit>

c0001f66 <intr0x07entry>:
intr0x07entry():
c0001f66:	6a 00                	push   $0x0
c0001f68:	1e                   	push   %ds
c0001f69:	06                   	push   %es
c0001f6a:	0f a0                	push   %fs
c0001f6c:	0f a8                	push   %gs
c0001f6e:	60                   	pusha  
c0001f6f:	b0 20                	mov    $0x20,%al
c0001f71:	e6 a0                	out    %al,$0xa0
c0001f73:	e6 20                	out    %al,$0x20
c0001f75:	6a 07                	push   $0x7
c0001f77:	ff 15 5c 88 00 c0    	call   *0xc000885c
c0001f7d:	e9 1e ff ff ff       	jmp    c0001ea0 <intr_exit>

c0001f82 <intr0x08entry>:
intr0x08entry():
c0001f82:	90                   	nop
c0001f83:	1e                   	push   %ds
c0001f84:	06                   	push   %es
c0001f85:	0f a0                	push   %fs
c0001f87:	0f a8                	push   %gs
c0001f89:	60                   	pusha  
c0001f8a:	b0 20                	mov    $0x20,%al
c0001f8c:	e6 a0                	out    %al,$0xa0
c0001f8e:	e6 20                	out    %al,$0x20
c0001f90:	6a 08                	push   $0x8
c0001f92:	ff 15 60 88 00 c0    	call   *0xc0008860
c0001f98:	e9 03 ff ff ff       	jmp    c0001ea0 <intr_exit>

c0001f9d <intr0x09entry>:
intr0x09entry():
c0001f9d:	6a 00                	push   $0x0
c0001f9f:	1e                   	push   %ds
c0001fa0:	06                   	push   %es
c0001fa1:	0f a0                	push   %fs
c0001fa3:	0f a8                	push   %gs
c0001fa5:	60                   	pusha  
c0001fa6:	b0 20                	mov    $0x20,%al
c0001fa8:	e6 a0                	out    %al,$0xa0
c0001faa:	e6 20                	out    %al,$0x20
c0001fac:	6a 09                	push   $0x9
c0001fae:	ff 15 64 88 00 c0    	call   *0xc0008864
c0001fb4:	e9 e7 fe ff ff       	jmp    c0001ea0 <intr_exit>

c0001fb9 <intr0x0aentry>:
intr0x0aentry():
c0001fb9:	90                   	nop
c0001fba:	1e                   	push   %ds
c0001fbb:	06                   	push   %es
c0001fbc:	0f a0                	push   %fs
c0001fbe:	0f a8                	push   %gs
c0001fc0:	60                   	pusha  
c0001fc1:	b0 20                	mov    $0x20,%al
c0001fc3:	e6 a0                	out    %al,$0xa0
c0001fc5:	e6 20                	out    %al,$0x20
c0001fc7:	6a 0a                	push   $0xa
c0001fc9:	ff 15 68 88 00 c0    	call   *0xc0008868
c0001fcf:	e9 cc fe ff ff       	jmp    c0001ea0 <intr_exit>

c0001fd4 <intr0x0bentry>:
intr0x0bentry():
c0001fd4:	90                   	nop
c0001fd5:	1e                   	push   %ds
c0001fd6:	06                   	push   %es
c0001fd7:	0f a0                	push   %fs
c0001fd9:	0f a8                	push   %gs
c0001fdb:	60                   	pusha  
c0001fdc:	b0 20                	mov    $0x20,%al
c0001fde:	e6 a0                	out    %al,$0xa0
c0001fe0:	e6 20                	out    %al,$0x20
c0001fe2:	6a 0b                	push   $0xb
c0001fe4:	ff 15 6c 88 00 c0    	call   *0xc000886c
c0001fea:	e9 b1 fe ff ff       	jmp    c0001ea0 <intr_exit>

c0001fef <intr0x0centry>:
intr0x0centry():
c0001fef:	6a 00                	push   $0x0
c0001ff1:	1e                   	push   %ds
c0001ff2:	06                   	push   %es
c0001ff3:	0f a0                	push   %fs
c0001ff5:	0f a8                	push   %gs
c0001ff7:	60                   	pusha  
c0001ff8:	b0 20                	mov    $0x20,%al
c0001ffa:	e6 a0                	out    %al,$0xa0
c0001ffc:	e6 20                	out    %al,$0x20
c0001ffe:	6a 0c                	push   $0xc
c0002000:	ff 15 70 88 00 c0    	call   *0xc0008870
c0002006:	e9 95 fe ff ff       	jmp    c0001ea0 <intr_exit>

c000200b <intr0x0dentry>:
intr0x0dentry():
c000200b:	90                   	nop
c000200c:	1e                   	push   %ds
c000200d:	06                   	push   %es
c000200e:	0f a0                	push   %fs
c0002010:	0f a8                	push   %gs
c0002012:	60                   	pusha  
c0002013:	b0 20                	mov    $0x20,%al
c0002015:	e6 a0                	out    %al,$0xa0
c0002017:	e6 20                	out    %al,$0x20
c0002019:	6a 0d                	push   $0xd
c000201b:	ff 15 74 88 00 c0    	call   *0xc0008874
c0002021:	e9 7a fe ff ff       	jmp    c0001ea0 <intr_exit>

c0002026 <intr0x0eentry>:
intr0x0eentry():
c0002026:	90                   	nop
c0002027:	1e                   	push   %ds
c0002028:	06                   	push   %es
c0002029:	0f a0                	push   %fs
c000202b:	0f a8                	push   %gs
c000202d:	60                   	pusha  
c000202e:	b0 20                	mov    $0x20,%al
c0002030:	e6 a0                	out    %al,$0xa0
c0002032:	e6 20                	out    %al,$0x20
c0002034:	6a 0e                	push   $0xe
c0002036:	ff 15 78 88 00 c0    	call   *0xc0008878
c000203c:	e9 5f fe ff ff       	jmp    c0001ea0 <intr_exit>

c0002041 <intr0x0fentry>:
intr0x0fentry():
c0002041:	6a 00                	push   $0x0
c0002043:	1e                   	push   %ds
c0002044:	06                   	push   %es
c0002045:	0f a0                	push   %fs
c0002047:	0f a8                	push   %gs
c0002049:	60                   	pusha  
c000204a:	b0 20                	mov    $0x20,%al
c000204c:	e6 a0                	out    %al,$0xa0
c000204e:	e6 20                	out    %al,$0x20
c0002050:	6a 0f                	push   $0xf
c0002052:	ff 15 7c 88 00 c0    	call   *0xc000887c
c0002058:	e9 43 fe ff ff       	jmp    c0001ea0 <intr_exit>

c000205d <intr0x10entry>:
intr0x10entry():
c000205d:	6a 00                	push   $0x0
c000205f:	1e                   	push   %ds
c0002060:	06                   	push   %es
c0002061:	0f a0                	push   %fs
c0002063:	0f a8                	push   %gs
c0002065:	60                   	pusha  
c0002066:	b0 20                	mov    $0x20,%al
c0002068:	e6 a0                	out    %al,$0xa0
c000206a:	e6 20                	out    %al,$0x20
c000206c:	6a 10                	push   $0x10
c000206e:	ff 15 80 88 00 c0    	call   *0xc0008880
c0002074:	e9 27 fe ff ff       	jmp    c0001ea0 <intr_exit>

c0002079 <intr0x11entry>:
intr0x11entry():
c0002079:	90                   	nop
c000207a:	1e                   	push   %ds
c000207b:	06                   	push   %es
c000207c:	0f a0                	push   %fs
c000207e:	0f a8                	push   %gs
c0002080:	60                   	pusha  
c0002081:	b0 20                	mov    $0x20,%al
c0002083:	e6 a0                	out    %al,$0xa0
c0002085:	e6 20                	out    %al,$0x20
c0002087:	6a 11                	push   $0x11
c0002089:	ff 15 84 88 00 c0    	call   *0xc0008884
c000208f:	e9 0c fe ff ff       	jmp    c0001ea0 <intr_exit>

c0002094 <intr0x12entry>:
intr0x12entry():
c0002094:	6a 00                	push   $0x0
c0002096:	1e                   	push   %ds
c0002097:	06                   	push   %es
c0002098:	0f a0                	push   %fs
c000209a:	0f a8                	push   %gs
c000209c:	60                   	pusha  
c000209d:	b0 20                	mov    $0x20,%al
c000209f:	e6 a0                	out    %al,$0xa0
c00020a1:	e6 20                	out    %al,$0x20
c00020a3:	6a 12                	push   $0x12
c00020a5:	ff 15 88 88 00 c0    	call   *0xc0008888
c00020ab:	e9 f0 fd ff ff       	jmp    c0001ea0 <intr_exit>

c00020b0 <intr0x13entry>:
intr0x13entry():
c00020b0:	6a 00                	push   $0x0
c00020b2:	1e                   	push   %ds
c00020b3:	06                   	push   %es
c00020b4:	0f a0                	push   %fs
c00020b6:	0f a8                	push   %gs
c00020b8:	60                   	pusha  
c00020b9:	b0 20                	mov    $0x20,%al
c00020bb:	e6 a0                	out    %al,$0xa0
c00020bd:	e6 20                	out    %al,$0x20
c00020bf:	6a 13                	push   $0x13
c00020c1:	ff 15 8c 88 00 c0    	call   *0xc000888c
c00020c7:	e9 d4 fd ff ff       	jmp    c0001ea0 <intr_exit>

c00020cc <intr0x14entry>:
intr0x14entry():
c00020cc:	6a 00                	push   $0x0
c00020ce:	1e                   	push   %ds
c00020cf:	06                   	push   %es
c00020d0:	0f a0                	push   %fs
c00020d2:	0f a8                	push   %gs
c00020d4:	60                   	pusha  
c00020d5:	b0 20                	mov    $0x20,%al
c00020d7:	e6 a0                	out    %al,$0xa0
c00020d9:	e6 20                	out    %al,$0x20
c00020db:	6a 14                	push   $0x14
c00020dd:	ff 15 90 88 00 c0    	call   *0xc0008890
c00020e3:	e9 b8 fd ff ff       	jmp    c0001ea0 <intr_exit>

c00020e8 <intr0x15entry>:
intr0x15entry():
c00020e8:	6a 00                	push   $0x0
c00020ea:	1e                   	push   %ds
c00020eb:	06                   	push   %es
c00020ec:	0f a0                	push   %fs
c00020ee:	0f a8                	push   %gs
c00020f0:	60                   	pusha  
c00020f1:	b0 20                	mov    $0x20,%al
c00020f3:	e6 a0                	out    %al,$0xa0
c00020f5:	e6 20                	out    %al,$0x20
c00020f7:	6a 15                	push   $0x15
c00020f9:	ff 15 94 88 00 c0    	call   *0xc0008894
c00020ff:	e9 9c fd ff ff       	jmp    c0001ea0 <intr_exit>

c0002104 <intr0x16entry>:
intr0x16entry():
c0002104:	6a 00                	push   $0x0
c0002106:	1e                   	push   %ds
c0002107:	06                   	push   %es
c0002108:	0f a0                	push   %fs
c000210a:	0f a8                	push   %gs
c000210c:	60                   	pusha  
c000210d:	b0 20                	mov    $0x20,%al
c000210f:	e6 a0                	out    %al,$0xa0
c0002111:	e6 20                	out    %al,$0x20
c0002113:	6a 16                	push   $0x16
c0002115:	ff 15 98 88 00 c0    	call   *0xc0008898
c000211b:	e9 80 fd ff ff       	jmp    c0001ea0 <intr_exit>

c0002120 <intr0x17entry>:
intr0x17entry():
c0002120:	6a 00                	push   $0x0
c0002122:	1e                   	push   %ds
c0002123:	06                   	push   %es
c0002124:	0f a0                	push   %fs
c0002126:	0f a8                	push   %gs
c0002128:	60                   	pusha  
c0002129:	b0 20                	mov    $0x20,%al
c000212b:	e6 a0                	out    %al,$0xa0
c000212d:	e6 20                	out    %al,$0x20
c000212f:	6a 17                	push   $0x17
c0002131:	ff 15 9c 88 00 c0    	call   *0xc000889c
c0002137:	e9 64 fd ff ff       	jmp    c0001ea0 <intr_exit>

c000213c <intr0x18entry>:
intr0x18entry():
c000213c:	90                   	nop
c000213d:	1e                   	push   %ds
c000213e:	06                   	push   %es
c000213f:	0f a0                	push   %fs
c0002141:	0f a8                	push   %gs
c0002143:	60                   	pusha  
c0002144:	b0 20                	mov    $0x20,%al
c0002146:	e6 a0                	out    %al,$0xa0
c0002148:	e6 20                	out    %al,$0x20
c000214a:	6a 18                	push   $0x18
c000214c:	ff 15 a0 88 00 c0    	call   *0xc00088a0
c0002152:	e9 49 fd ff ff       	jmp    c0001ea0 <intr_exit>

c0002157 <intr0x19entry>:
intr0x19entry():
c0002157:	6a 00                	push   $0x0
c0002159:	1e                   	push   %ds
c000215a:	06                   	push   %es
c000215b:	0f a0                	push   %fs
c000215d:	0f a8                	push   %gs
c000215f:	60                   	pusha  
c0002160:	b0 20                	mov    $0x20,%al
c0002162:	e6 a0                	out    %al,$0xa0
c0002164:	e6 20                	out    %al,$0x20
c0002166:	6a 19                	push   $0x19
c0002168:	ff 15 a4 88 00 c0    	call   *0xc00088a4
c000216e:	e9 2d fd ff ff       	jmp    c0001ea0 <intr_exit>

c0002173 <intr0x1aentry>:
intr0x1aentry():
c0002173:	90                   	nop
c0002174:	1e                   	push   %ds
c0002175:	06                   	push   %es
c0002176:	0f a0                	push   %fs
c0002178:	0f a8                	push   %gs
c000217a:	60                   	pusha  
c000217b:	b0 20                	mov    $0x20,%al
c000217d:	e6 a0                	out    %al,$0xa0
c000217f:	e6 20                	out    %al,$0x20
c0002181:	6a 1a                	push   $0x1a
c0002183:	ff 15 a8 88 00 c0    	call   *0xc00088a8
c0002189:	e9 12 fd ff ff       	jmp    c0001ea0 <intr_exit>

c000218e <intr0x1bentry>:
intr0x1bentry():
c000218e:	90                   	nop
c000218f:	1e                   	push   %ds
c0002190:	06                   	push   %es
c0002191:	0f a0                	push   %fs
c0002193:	0f a8                	push   %gs
c0002195:	60                   	pusha  
c0002196:	b0 20                	mov    $0x20,%al
c0002198:	e6 a0                	out    %al,$0xa0
c000219a:	e6 20                	out    %al,$0x20
c000219c:	6a 1b                	push   $0x1b
c000219e:	ff 15 ac 88 00 c0    	call   *0xc00088ac
c00021a4:	e9 f7 fc ff ff       	jmp    c0001ea0 <intr_exit>

c00021a9 <intr0x1centry>:
intr0x1centry():
c00021a9:	6a 00                	push   $0x0
c00021ab:	1e                   	push   %ds
c00021ac:	06                   	push   %es
c00021ad:	0f a0                	push   %fs
c00021af:	0f a8                	push   %gs
c00021b1:	60                   	pusha  
c00021b2:	b0 20                	mov    $0x20,%al
c00021b4:	e6 a0                	out    %al,$0xa0
c00021b6:	e6 20                	out    %al,$0x20
c00021b8:	6a 1c                	push   $0x1c
c00021ba:	ff 15 b0 88 00 c0    	call   *0xc00088b0
c00021c0:	e9 db fc ff ff       	jmp    c0001ea0 <intr_exit>

c00021c5 <intr0x1dentry>:
intr0x1dentry():
c00021c5:	90                   	nop
c00021c6:	1e                   	push   %ds
c00021c7:	06                   	push   %es
c00021c8:	0f a0                	push   %fs
c00021ca:	0f a8                	push   %gs
c00021cc:	60                   	pusha  
c00021cd:	b0 20                	mov    $0x20,%al
c00021cf:	e6 a0                	out    %al,$0xa0
c00021d1:	e6 20                	out    %al,$0x20
c00021d3:	6a 1d                	push   $0x1d
c00021d5:	ff 15 b4 88 00 c0    	call   *0xc00088b4
c00021db:	e9 c0 fc ff ff       	jmp    c0001ea0 <intr_exit>

c00021e0 <intr0x1eentry>:
intr0x1eentry():
c00021e0:	90                   	nop
c00021e1:	1e                   	push   %ds
c00021e2:	06                   	push   %es
c00021e3:	0f a0                	push   %fs
c00021e5:	0f a8                	push   %gs
c00021e7:	60                   	pusha  
c00021e8:	b0 20                	mov    $0x20,%al
c00021ea:	e6 a0                	out    %al,$0xa0
c00021ec:	e6 20                	out    %al,$0x20
c00021ee:	6a 1e                	push   $0x1e
c00021f0:	ff 15 b8 88 00 c0    	call   *0xc00088b8
c00021f6:	e9 a5 fc ff ff       	jmp    c0001ea0 <intr_exit>

c00021fb <intr0x1fentry>:
intr0x1fentry():
c00021fb:	6a 00                	push   $0x0
c00021fd:	1e                   	push   %ds
c00021fe:	06                   	push   %es
c00021ff:	0f a0                	push   %fs
c0002201:	0f a8                	push   %gs
c0002203:	60                   	pusha  
c0002204:	b0 20                	mov    $0x20,%al
c0002206:	e6 a0                	out    %al,$0xa0
c0002208:	e6 20                	out    %al,$0x20
c000220a:	6a 1f                	push   $0x1f
c000220c:	ff 15 bc 88 00 c0    	call   *0xc00088bc
c0002212:	e9 89 fc ff ff       	jmp    c0001ea0 <intr_exit>

c0002217 <intr0x20entry>:
intr0x20entry():
c0002217:	6a 00                	push   $0x0
c0002219:	1e                   	push   %ds
c000221a:	06                   	push   %es
c000221b:	0f a0                	push   %fs
c000221d:	0f a8                	push   %gs
c000221f:	60                   	pusha  
c0002220:	b0 20                	mov    $0x20,%al
c0002222:	e6 a0                	out    %al,$0xa0
c0002224:	e6 20                	out    %al,$0x20
c0002226:	6a 20                	push   $0x20
c0002228:	ff 15 c0 88 00 c0    	call   *0xc00088c0
c000222e:	e9 6d fc ff ff       	jmp    c0001ea0 <intr_exit>

c0002233 <intr0x21entry>:
intr0x21entry():
c0002233:	6a 00                	push   $0x0
c0002235:	1e                   	push   %ds
c0002236:	06                   	push   %es
c0002237:	0f a0                	push   %fs
c0002239:	0f a8                	push   %gs
c000223b:	60                   	pusha  
c000223c:	b0 20                	mov    $0x20,%al
c000223e:	e6 a0                	out    %al,$0xa0
c0002240:	e6 20                	out    %al,$0x20
c0002242:	6a 21                	push   $0x21
c0002244:	ff 15 c4 88 00 c0    	call   *0xc00088c4
c000224a:	e9 51 fc ff ff       	jmp    c0001ea0 <intr_exit>

c000224f <intr0x22entry>:
intr0x22entry():
c000224f:	6a 00                	push   $0x0
c0002251:	1e                   	push   %ds
c0002252:	06                   	push   %es
c0002253:	0f a0                	push   %fs
c0002255:	0f a8                	push   %gs
c0002257:	60                   	pusha  
c0002258:	b0 20                	mov    $0x20,%al
c000225a:	e6 a0                	out    %al,$0xa0
c000225c:	e6 20                	out    %al,$0x20
c000225e:	6a 22                	push   $0x22
c0002260:	ff 15 c8 88 00 c0    	call   *0xc00088c8
c0002266:	e9 35 fc ff ff       	jmp    c0001ea0 <intr_exit>

c000226b <intr0x23entry>:
intr0x23entry():
c000226b:	6a 00                	push   $0x0
c000226d:	1e                   	push   %ds
c000226e:	06                   	push   %es
c000226f:	0f a0                	push   %fs
c0002271:	0f a8                	push   %gs
c0002273:	60                   	pusha  
c0002274:	b0 20                	mov    $0x20,%al
c0002276:	e6 a0                	out    %al,$0xa0
c0002278:	e6 20                	out    %al,$0x20
c000227a:	6a 23                	push   $0x23
c000227c:	ff 15 cc 88 00 c0    	call   *0xc00088cc
c0002282:	e9 19 fc ff ff       	jmp    c0001ea0 <intr_exit>

c0002287 <intr0x24entry>:
intr0x24entry():
c0002287:	6a 00                	push   $0x0
c0002289:	1e                   	push   %ds
c000228a:	06                   	push   %es
c000228b:	0f a0                	push   %fs
c000228d:	0f a8                	push   %gs
c000228f:	60                   	pusha  
c0002290:	b0 20                	mov    $0x20,%al
c0002292:	e6 a0                	out    %al,$0xa0
c0002294:	e6 20                	out    %al,$0x20
c0002296:	6a 24                	push   $0x24
c0002298:	ff 15 d0 88 00 c0    	call   *0xc00088d0
c000229e:	e9 fd fb ff ff       	jmp    c0001ea0 <intr_exit>

c00022a3 <intr0x25entry>:
intr0x25entry():
c00022a3:	6a 00                	push   $0x0
c00022a5:	1e                   	push   %ds
c00022a6:	06                   	push   %es
c00022a7:	0f a0                	push   %fs
c00022a9:	0f a8                	push   %gs
c00022ab:	60                   	pusha  
c00022ac:	b0 20                	mov    $0x20,%al
c00022ae:	e6 a0                	out    %al,$0xa0
c00022b0:	e6 20                	out    %al,$0x20
c00022b2:	6a 25                	push   $0x25
c00022b4:	ff 15 d4 88 00 c0    	call   *0xc00088d4
c00022ba:	e9 e1 fb ff ff       	jmp    c0001ea0 <intr_exit>

c00022bf <intr0x26entry>:
intr0x26entry():
c00022bf:	6a 00                	push   $0x0
c00022c1:	1e                   	push   %ds
c00022c2:	06                   	push   %es
c00022c3:	0f a0                	push   %fs
c00022c5:	0f a8                	push   %gs
c00022c7:	60                   	pusha  
c00022c8:	b0 20                	mov    $0x20,%al
c00022ca:	e6 a0                	out    %al,$0xa0
c00022cc:	e6 20                	out    %al,$0x20
c00022ce:	6a 26                	push   $0x26
c00022d0:	ff 15 d8 88 00 c0    	call   *0xc00088d8
c00022d6:	e9 c5 fb ff ff       	jmp    c0001ea0 <intr_exit>

c00022db <intr0x27entry>:
intr0x27entry():
c00022db:	6a 00                	push   $0x0
c00022dd:	1e                   	push   %ds
c00022de:	06                   	push   %es
c00022df:	0f a0                	push   %fs
c00022e1:	0f a8                	push   %gs
c00022e3:	60                   	pusha  
c00022e4:	b0 20                	mov    $0x20,%al
c00022e6:	e6 a0                	out    %al,$0xa0
c00022e8:	e6 20                	out    %al,$0x20
c00022ea:	6a 27                	push   $0x27
c00022ec:	ff 15 dc 88 00 c0    	call   *0xc00088dc
c00022f2:	e9 a9 fb ff ff       	jmp    c0001ea0 <intr_exit>

c00022f7 <intr0x28entry>:
intr0x28entry():
c00022f7:	6a 00                	push   $0x0
c00022f9:	1e                   	push   %ds
c00022fa:	06                   	push   %es
c00022fb:	0f a0                	push   %fs
c00022fd:	0f a8                	push   %gs
c00022ff:	60                   	pusha  
c0002300:	b0 20                	mov    $0x20,%al
c0002302:	e6 a0                	out    %al,$0xa0
c0002304:	e6 20                	out    %al,$0x20
c0002306:	6a 28                	push   $0x28
c0002308:	ff 15 e0 88 00 c0    	call   *0xc00088e0
c000230e:	e9 8d fb ff ff       	jmp    c0001ea0 <intr_exit>

c0002313 <intr0x29entry>:
intr0x29entry():
c0002313:	6a 00                	push   $0x0
c0002315:	1e                   	push   %ds
c0002316:	06                   	push   %es
c0002317:	0f a0                	push   %fs
c0002319:	0f a8                	push   %gs
c000231b:	60                   	pusha  
c000231c:	b0 20                	mov    $0x20,%al
c000231e:	e6 a0                	out    %al,$0xa0
c0002320:	e6 20                	out    %al,$0x20
c0002322:	6a 29                	push   $0x29
c0002324:	ff 15 e4 88 00 c0    	call   *0xc00088e4
c000232a:	e9 71 fb ff ff       	jmp    c0001ea0 <intr_exit>

c000232f <intr0x2aentry>:
intr0x2aentry():
c000232f:	6a 00                	push   $0x0
c0002331:	1e                   	push   %ds
c0002332:	06                   	push   %es
c0002333:	0f a0                	push   %fs
c0002335:	0f a8                	push   %gs
c0002337:	60                   	pusha  
c0002338:	b0 20                	mov    $0x20,%al
c000233a:	e6 a0                	out    %al,$0xa0
c000233c:	e6 20                	out    %al,$0x20
c000233e:	6a 2a                	push   $0x2a
c0002340:	ff 15 e8 88 00 c0    	call   *0xc00088e8
c0002346:	e9 55 fb ff ff       	jmp    c0001ea0 <intr_exit>

c000234b <intr0x2bentry>:
intr0x2bentry():
c000234b:	6a 00                	push   $0x0
c000234d:	1e                   	push   %ds
c000234e:	06                   	push   %es
c000234f:	0f a0                	push   %fs
c0002351:	0f a8                	push   %gs
c0002353:	60                   	pusha  
c0002354:	b0 20                	mov    $0x20,%al
c0002356:	e6 a0                	out    %al,$0xa0
c0002358:	e6 20                	out    %al,$0x20
c000235a:	6a 2b                	push   $0x2b
c000235c:	ff 15 ec 88 00 c0    	call   *0xc00088ec
c0002362:	e9 39 fb ff ff       	jmp    c0001ea0 <intr_exit>

c0002367 <intr0x2centry>:
intr0x2centry():
c0002367:	6a 00                	push   $0x0
c0002369:	1e                   	push   %ds
c000236a:	06                   	push   %es
c000236b:	0f a0                	push   %fs
c000236d:	0f a8                	push   %gs
c000236f:	60                   	pusha  
c0002370:	b0 20                	mov    $0x20,%al
c0002372:	e6 a0                	out    %al,$0xa0
c0002374:	e6 20                	out    %al,$0x20
c0002376:	6a 2c                	push   $0x2c
c0002378:	ff 15 f0 88 00 c0    	call   *0xc00088f0
c000237e:	e9 1d fb ff ff       	jmp    c0001ea0 <intr_exit>

c0002383 <intr0x2dentry>:
intr0x2dentry():
c0002383:	6a 00                	push   $0x0
c0002385:	1e                   	push   %ds
c0002386:	06                   	push   %es
c0002387:	0f a0                	push   %fs
c0002389:	0f a8                	push   %gs
c000238b:	60                   	pusha  
c000238c:	b0 20                	mov    $0x20,%al
c000238e:	e6 a0                	out    %al,$0xa0
c0002390:	e6 20                	out    %al,$0x20
c0002392:	6a 2d                	push   $0x2d
c0002394:	ff 15 f4 88 00 c0    	call   *0xc00088f4
c000239a:	e9 01 fb ff ff       	jmp    c0001ea0 <intr_exit>

c000239f <intr0x2eentry>:
intr0x2eentry():
c000239f:	6a 00                	push   $0x0
c00023a1:	1e                   	push   %ds
c00023a2:	06                   	push   %es
c00023a3:	0f a0                	push   %fs
c00023a5:	0f a8                	push   %gs
c00023a7:	60                   	pusha  
c00023a8:	b0 20                	mov    $0x20,%al
c00023aa:	e6 a0                	out    %al,$0xa0
c00023ac:	e6 20                	out    %al,$0x20
c00023ae:	6a 2e                	push   $0x2e
c00023b0:	ff 15 f8 88 00 c0    	call   *0xc00088f8
c00023b6:	e9 e5 fa ff ff       	jmp    c0001ea0 <intr_exit>

c00023bb <intr0x2fentry>:
intr0x2fentry():
c00023bb:	6a 00                	push   $0x0
c00023bd:	1e                   	push   %ds
c00023be:	06                   	push   %es
c00023bf:	0f a0                	push   %fs
c00023c1:	0f a8                	push   %gs
c00023c3:	60                   	pusha  
c00023c4:	b0 20                	mov    $0x20,%al
c00023c6:	e6 a0                	out    %al,$0xa0
c00023c8:	e6 20                	out    %al,$0x20
c00023ca:	6a 2f                	push   $0x2f
c00023cc:	ff 15 fc 88 00 c0    	call   *0xc00088fc
c00023d2:	e9 c9 fa ff ff       	jmp    c0001ea0 <intr_exit>

c00023d7 <syscall_handler>:
syscall_handler():
c00023d7:	6a 00                	push   $0x0
c00023d9:	1e                   	push   %ds
c00023da:	06                   	push   %es
c00023db:	0f a0                	push   %fs
c00023dd:	0f a8                	push   %gs
c00023df:	60                   	pusha  
c00023e0:	68 80 00 00 00       	push   $0x80
c00023e5:	52                   	push   %edx
c00023e6:	51                   	push   %ecx
c00023e7:	53                   	push   %ebx
c00023e8:	ff 14 85 60 8c 00 c0 	call   *-0x3fff73a0(,%eax,4)
c00023ef:	83 c4 0c             	add    $0xc,%esp
c00023f2:	89 44 24 20          	mov    %eax,0x20(%esp)
c00023f6:	e9 a5 fa ff ff       	jmp    c0001ea0 <intr_exit>
c00023fb:	66 90                	xchg   %ax,%ax
c00023fd:	66 90                	xchg   %ax,%ax
c00023ff:	90                   	nop

c0002400 <put_str>:
put_str():
c0002400:	53                   	push   %ebx
c0002401:	51                   	push   %ecx
c0002402:	31 c9                	xor    %ecx,%ecx
c0002404:	8b 5c 24 0c          	mov    0xc(%esp),%ebx

c0002408 <put_str.goon>:
put_str.goon():
c0002408:	8a 0b                	mov    (%ebx),%cl
c000240a:	80 f9 00             	cmp    $0x0,%cl
c000240d:	74 0c                	je     c000241b <put_str.str_over>
c000240f:	51                   	push   %ecx
c0002410:	e8 09 00 00 00       	call   c000241e <put_char>
c0002415:	83 c4 04             	add    $0x4,%esp
c0002418:	43                   	inc    %ebx
c0002419:	eb ed                	jmp    c0002408 <put_str.goon>

c000241b <put_str.str_over>:
put_str.str_over():
c000241b:	59                   	pop    %ecx
c000241c:	5b                   	pop    %ebx
c000241d:	c3                   	ret    

c000241e <put_char>:
put_char():
c000241e:	60                   	pusha  
c000241f:	66 b8 18 00          	mov    $0x18,%ax
c0002423:	8e e8                	mov    %eax,%gs
c0002425:	66 ba d4 03          	mov    $0x3d4,%dx
c0002429:	b0 0e                	mov    $0xe,%al
c000242b:	ee                   	out    %al,(%dx)
c000242c:	66 ba d5 03          	mov    $0x3d5,%dx
c0002430:	ec                   	in     (%dx),%al
c0002431:	88 c4                	mov    %al,%ah
c0002433:	66 ba d4 03          	mov    $0x3d4,%dx
c0002437:	b0 0f                	mov    $0xf,%al
c0002439:	ee                   	out    %al,(%dx)
c000243a:	66 ba d5 03          	mov    $0x3d5,%dx
c000243e:	ec                   	in     (%dx),%al
c000243f:	66 89 c3             	mov    %ax,%bx
c0002442:	8b 4c 24 24          	mov    0x24(%esp),%ecx
c0002446:	80 f9 0d             	cmp    $0xd,%cl
c0002449:	74 3c                	je     c0002487 <put_char.is_carriage_return>
c000244b:	80 f9 0a             	cmp    $0xa,%cl
c000244e:	74 37                	je     c0002487 <put_char.is_carriage_return>
c0002450:	80 f9 08             	cmp    $0x8,%cl
c0002453:	74 02                	je     c0002457 <put_char.is_backspace>
c0002455:	eb 16                	jmp    c000246d <put_char.put_other>

c0002457 <put_char.is_backspace>:
put_char.is_backspace():
c0002457:	66 4b                	dec    %bx
c0002459:	66 d1 e3             	shl    %bx
c000245c:	65 67 c6 07 20       	movb   $0x20,%gs:(%bx)
c0002461:	66 43                	inc    %bx
c0002463:	65 67 c6 07 07       	movb   $0x7,%gs:(%bx)
c0002468:	66 d1 eb             	shr    %bx
c000246b:	eb 60                	jmp    c00024cd <put_char.set_cursor>

c000246d <put_char.put_other>:
put_char.put_other():
c000246d:	66 d1 e3             	shl    %bx
c0002470:	65 67 88 0f          	mov    %cl,%gs:(%bx)
c0002474:	66 43                	inc    %bx
c0002476:	65 67 c6 07 07       	movb   $0x7,%gs:(%bx)
c000247b:	66 d1 eb             	shr    %bx
c000247e:	66 43                	inc    %bx
c0002480:	66 81 fb d0 07       	cmp    $0x7d0,%bx
c0002485:	7c 46                	jl     c00024cd <put_char.set_cursor>

c0002487 <put_char.is_carriage_return>:
put_char.is_line_feed():
c0002487:	66 31 d2             	xor    %dx,%dx
c000248a:	66 89 d8             	mov    %bx,%ax
c000248d:	66 be 50 00          	mov    $0x50,%si
c0002491:	66 f7 f6             	div    %si
c0002494:	66 29 d3             	sub    %dx,%bx

c0002497 <put_char.is_carriage_return_end>:
put_char.is_carriage_return_end():
c0002497:	66 83 c3 50          	add    $0x50,%bx
c000249b:	66 81 fb d0 07       	cmp    $0x7d0,%bx

c00024a0 <put_char.is_line_feed_end>:
put_char.is_line_feed_end():
c00024a0:	7c 2b                	jl     c00024cd <put_char.set_cursor>

c00024a2 <put_char.roll_screen>:
put_char.roll_screen():
c00024a2:	fc                   	cld    
c00024a3:	b9 c0 03 00 00       	mov    $0x3c0,%ecx
c00024a8:	be a0 80 0b c0       	mov    $0xc00b80a0,%esi
c00024ad:	bf 00 80 0b c0       	mov    $0xc00b8000,%edi
c00024b2:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c00024b4:	bb 00 0f 00 00       	mov    $0xf00,%ebx
c00024b9:	b9 50 00 00 00       	mov    $0x50,%ecx

c00024be <put_char.cls>:
put_char.cls():
c00024be:	65 66 c7 03 20 07    	movw   $0x720,%gs:(%ebx)
c00024c4:	83 c3 02             	add    $0x2,%ebx
c00024c7:	e2 f5                	loop   c00024be <put_char.cls>
c00024c9:	66 bb 80 07          	mov    $0x780,%bx

c00024cd <put_char.set_cursor>:
put_char.set_cursor():
c00024cd:	66 ba d4 03          	mov    $0x3d4,%dx
c00024d1:	b0 0e                	mov    $0xe,%al
c00024d3:	ee                   	out    %al,(%dx)
c00024d4:	66 ba d5 03          	mov    $0x3d5,%dx
c00024d8:	88 f8                	mov    %bh,%al
c00024da:	ee                   	out    %al,(%dx)
c00024db:	66 ba d4 03          	mov    $0x3d4,%dx
c00024df:	b0 0f                	mov    $0xf,%al
c00024e1:	ee                   	out    %al,(%dx)
c00024e2:	66 ba d5 03          	mov    $0x3d5,%dx
c00024e6:	88 d8                	mov    %bl,%al
c00024e8:	ee                   	out    %al,(%dx)

c00024e9 <put_char.put_char_done>:
put_char.put_char_done():
c00024e9:	61                   	popa   
c00024ea:	c3                   	ret    

c00024eb <put_int>:
put_int():
c00024eb:	60                   	pusha  
c00024ec:	89 e5                	mov    %esp,%ebp
c00024ee:	8b 45 24             	mov    0x24(%ebp),%eax
c00024f1:	89 c2                	mov    %eax,%edx
c00024f3:	bf 07 00 00 00       	mov    $0x7,%edi
c00024f8:	b9 08 00 00 00       	mov    $0x8,%ecx
c00024fd:	bb c0 80 00 c0       	mov    $0xc00080c0,%ebx

c0002502 <put_int.16based_4bits>:
put_int.16based_4bits():
c0002502:	83 e2 0f             	and    $0xf,%edx
c0002505:	83 fa 09             	cmp    $0x9,%edx
c0002508:	7f 05                	jg     c000250f <put_int.is_A2F>
c000250a:	83 c2 30             	add    $0x30,%edx
c000250d:	eb 06                	jmp    c0002515 <put_int.store>

c000250f <put_int.is_A2F>:
put_int.is_A2F():
c000250f:	83 ea 0a             	sub    $0xa,%edx
c0002512:	83 c2 41             	add    $0x41,%edx

c0002515 <put_int.store>:
put_int.store():
c0002515:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
c0002518:	4f                   	dec    %edi
c0002519:	c1 e8 04             	shr    $0x4,%eax
c000251c:	89 c2                	mov    %eax,%edx
c000251e:	e2 e2                	loop   c0002502 <put_int.16based_4bits>

c0002520 <put_int.ready_to_print>:
put_int.ready_to_print():
c0002520:	47                   	inc    %edi

c0002521 <put_int.skip_prefix_0>:
put_int.skip_prefix_0():
c0002521:	83 ff 08             	cmp    $0x8,%edi
c0002524:	74 0f                	je     c0002535 <put_int.full0>

c0002526 <put_int.go_on_skip>:
put_int.go_on_skip():
c0002526:	8a 8f c0 80 00 c0    	mov    -0x3fff7f40(%edi),%cl
c000252c:	47                   	inc    %edi
c000252d:	80 f9 30             	cmp    $0x30,%cl
c0002530:	74 ef                	je     c0002521 <put_int.skip_prefix_0>
c0002532:	4f                   	dec    %edi
c0002533:	eb 02                	jmp    c0002537 <put_int.put_each_num>

c0002535 <put_int.full0>:
put_int.full0():
c0002535:	b1 30                	mov    $0x30,%cl

c0002537 <put_int.put_each_num>:
put_int.put_each_num():
c0002537:	51                   	push   %ecx
c0002538:	e8 e1 fe ff ff       	call   c000241e <put_char>
c000253d:	83 c4 04             	add    $0x4,%esp
c0002540:	47                   	inc    %edi
c0002541:	8a 8f c0 80 00 c0    	mov    -0x3fff7f40(%edi),%cl
c0002547:	83 ff 08             	cmp    $0x8,%edi
c000254a:	7c eb                	jl     c0002537 <put_int.put_each_num>
c000254c:	61                   	popa   
c000254d:	c3                   	ret    

c000254e <set_cursor>:
set_cursor():
c000254e:	60                   	pusha  
c000254f:	66 8b 5c 24 24       	mov    0x24(%esp),%bx
c0002554:	66 ba d4 03          	mov    $0x3d4,%dx
c0002558:	b0 0e                	mov    $0xe,%al
c000255a:	ee                   	out    %al,(%dx)
c000255b:	66 ba d5 03          	mov    $0x3d5,%dx
c000255f:	88 f8                	mov    %bh,%al
c0002561:	ee                   	out    %al,(%dx)
c0002562:	66 ba d4 03          	mov    $0x3d4,%dx
c0002566:	b0 0f                	mov    $0xf,%al
c0002568:	ee                   	out    %al,(%dx)
c0002569:	66 ba d5 03          	mov    $0x3d5,%dx
c000256d:	88 d8                	mov    %bl,%al
c000256f:	ee                   	out    %al,(%dx)
c0002570:	61                   	popa   
c0002571:	c3                   	ret    

c0002572 <panic_spin>:
panic_spin():
/work/x86_os_my/kernel/debug.c:10
/* 打印文件名,行号,函数名,条件并使程序悬停 */
void panic_spin(char* filename,	       \
	        int line,	       \
		const char* func,      \
		const char* condition) \
{
c0002572:	55                   	push   %ebp
c0002573:	89 e5                	mov    %esp,%ebp
c0002575:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/kernel/debug.c:11
   intr_disable();	// 因为有时候会单独调用panic_spin,所以在此处关中断。
c0002578:	e8 c2 f6 ff ff       	call   c0001c3f <intr_disable>
/work/x86_os_my/kernel/debug.c:12
   put_str("\n\n\n!!!!! error !!!!!\n");
c000257d:	83 ec 0c             	sub    $0xc,%esp
c0002580:	68 77 5b 00 c0       	push   $0xc0005b77
c0002585:	e8 76 fe ff ff       	call   c0002400 <put_str>
c000258a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/debug.c:13
   put_str("filename:");put_str(filename);put_str("\n");
c000258d:	83 ec 0c             	sub    $0xc,%esp
c0002590:	68 8d 5b 00 c0       	push   $0xc0005b8d
c0002595:	e8 66 fe ff ff       	call   c0002400 <put_str>
c000259a:	83 c4 10             	add    $0x10,%esp
c000259d:	83 ec 0c             	sub    $0xc,%esp
c00025a0:	ff 75 08             	pushl  0x8(%ebp)
c00025a3:	e8 58 fe ff ff       	call   c0002400 <put_str>
c00025a8:	83 c4 10             	add    $0x10,%esp
c00025ab:	83 ec 0c             	sub    $0xc,%esp
c00025ae:	68 97 5b 00 c0       	push   $0xc0005b97
c00025b3:	e8 48 fe ff ff       	call   c0002400 <put_str>
c00025b8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/debug.c:14
   put_str("line:0x");put_int(line);put_str("\n");
c00025bb:	83 ec 0c             	sub    $0xc,%esp
c00025be:	68 99 5b 00 c0       	push   $0xc0005b99
c00025c3:	e8 38 fe ff ff       	call   c0002400 <put_str>
c00025c8:	83 c4 10             	add    $0x10,%esp
c00025cb:	8b 45 0c             	mov    0xc(%ebp),%eax
c00025ce:	83 ec 0c             	sub    $0xc,%esp
c00025d1:	50                   	push   %eax
c00025d2:	e8 14 ff ff ff       	call   c00024eb <put_int>
c00025d7:	83 c4 10             	add    $0x10,%esp
c00025da:	83 ec 0c             	sub    $0xc,%esp
c00025dd:	68 97 5b 00 c0       	push   $0xc0005b97
c00025e2:	e8 19 fe ff ff       	call   c0002400 <put_str>
c00025e7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/debug.c:15
   put_str("function:");put_str((char*)func);put_str("\n");
c00025ea:	83 ec 0c             	sub    $0xc,%esp
c00025ed:	68 a1 5b 00 c0       	push   $0xc0005ba1
c00025f2:	e8 09 fe ff ff       	call   c0002400 <put_str>
c00025f7:	83 c4 10             	add    $0x10,%esp
c00025fa:	83 ec 0c             	sub    $0xc,%esp
c00025fd:	ff 75 10             	pushl  0x10(%ebp)
c0002600:	e8 fb fd ff ff       	call   c0002400 <put_str>
c0002605:	83 c4 10             	add    $0x10,%esp
c0002608:	83 ec 0c             	sub    $0xc,%esp
c000260b:	68 97 5b 00 c0       	push   $0xc0005b97
c0002610:	e8 eb fd ff ff       	call   c0002400 <put_str>
c0002615:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/debug.c:16
   put_str("condition:");put_str((char*)condition);put_str("\n");
c0002618:	83 ec 0c             	sub    $0xc,%esp
c000261b:	68 ab 5b 00 c0       	push   $0xc0005bab
c0002620:	e8 db fd ff ff       	call   c0002400 <put_str>
c0002625:	83 c4 10             	add    $0x10,%esp
c0002628:	83 ec 0c             	sub    $0xc,%esp
c000262b:	ff 75 14             	pushl  0x14(%ebp)
c000262e:	e8 cd fd ff ff       	call   c0002400 <put_str>
c0002633:	83 c4 10             	add    $0x10,%esp
c0002636:	83 ec 0c             	sub    $0xc,%esp
c0002639:	68 97 5b 00 c0       	push   $0xc0005b97
c000263e:	e8 bd fd ff ff       	call   c0002400 <put_str>
c0002643:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/debug.c:17 (discriminator 1)
   while(1);
c0002646:	eb fe                	jmp    c0002646 <panic_spin+0xd4>

c0002648 <bitmap_init>:
bitmap_init():
/work/x86_os_my/lib/kernel/bitmap.c:16
	uint8_t* bits;				位图空间
};
*/

/* 将位图btmp初始化 */
void bitmap_init(struct bitmap* btmp) {
c0002648:	55                   	push   %ebp
c0002649:	89 e5                	mov    %esp,%ebp
c000264b:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/lib/kernel/bitmap.c:17
	memset(btmp->bits, 0, btmp->btmp_bytes_len);   
c000264e:	8b 45 08             	mov    0x8(%ebp),%eax
c0002651:	8b 10                	mov    (%eax),%edx
c0002653:	8b 45 08             	mov    0x8(%ebp),%eax
c0002656:	8b 40 04             	mov    0x4(%eax),%eax
c0002659:	83 ec 04             	sub    $0x4,%esp
c000265c:	52                   	push   %edx
c000265d:	6a 00                	push   $0x0
c000265f:	50                   	push   %eax
c0002660:	e8 25 13 00 00       	call   c000398a <memset>
c0002665:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/bitmap.c:18
}
c0002668:	90                   	nop
c0002669:	c9                   	leave  
c000266a:	c3                   	ret    

c000266b <bitmap_scan_test>:
bitmap_scan_test():
/work/x86_os_my/lib/kernel/bitmap.c:23

/* 判断bit_idx位是否为1
若为1则返回true
否则返回false */
bool bitmap_scan_test(struct bitmap* btmp, uint32_t bit_idx) {
c000266b:	55                   	push   %ebp
c000266c:	89 e5                	mov    %esp,%ebp
c000266e:	53                   	push   %ebx
c000266f:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/kernel/bitmap.c:24
	uint32_t byte_idx = bit_idx / 8;    // 向下取整用于索引数组下标
c0002672:	8b 45 0c             	mov    0xc(%ebp),%eax
c0002675:	c1 e8 03             	shr    $0x3,%eax
c0002678:	89 45 f8             	mov    %eax,-0x8(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:25
	uint32_t bit_odd  = bit_idx % 8;    // 取余用于索引数组内的位
c000267b:	8b 45 0c             	mov    0xc(%ebp),%eax
c000267e:	83 e0 07             	and    $0x7,%eax
c0002681:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:26
	return (btmp->bits[byte_idx] & (BITMAP_MASK << bit_odd));
c0002684:	8b 45 08             	mov    0x8(%ebp),%eax
c0002687:	8b 50 04             	mov    0x4(%eax),%edx
c000268a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c000268d:	01 d0                	add    %edx,%eax
c000268f:	0f b6 00             	movzbl (%eax),%eax
c0002692:	0f b6 d0             	movzbl %al,%edx
c0002695:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002698:	bb 01 00 00 00       	mov    $0x1,%ebx
c000269d:	89 c1                	mov    %eax,%ecx
c000269f:	d3 e3                	shl    %cl,%ebx
c00026a1:	89 d8                	mov    %ebx,%eax
c00026a3:	21 d0                	and    %edx,%eax
/work/x86_os_my/lib/kernel/bitmap.c:27
}
c00026a5:	83 c4 10             	add    $0x10,%esp
c00026a8:	5b                   	pop    %ebx
c00026a9:	5d                   	pop    %ebp
c00026aa:	c3                   	ret    

c00026ab <bitmap_scan>:
bitmap_scan():
/work/x86_os_my/lib/kernel/bitmap.c:32

/* 在位图中申请连续cnt个位
成功：返回其起始位下标
失败：返回-1 */
int bitmap_scan(struct bitmap* btmp, uint32_t cnt) {
c00026ab:	55                   	push   %ebp
c00026ac:	89 e5                	mov    %esp,%ebp
c00026ae:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/lib/kernel/bitmap.c:33
	uint32_t idx_byte = 0;	 // 用于记录空闲位所在的字节
c00026b1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:35
	/* 先逐字节比较,蛮力法 */
	while (( 0xff == btmp->bits[idx_byte]) && (idx_byte < btmp->btmp_bytes_len)) {
c00026b8:	eb 04                	jmp    c00026be <bitmap_scan+0x13>
/work/x86_os_my/lib/kernel/bitmap.c:37
		/* 1表示该位已分配,所以若为0xff,则表示该字节内已无空闲位,向下一字节继续找 */
		idx_byte++;
c00026ba:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:35
成功：返回其起始位下标
失败：返回-1 */
int bitmap_scan(struct bitmap* btmp, uint32_t cnt) {
	uint32_t idx_byte = 0;	 // 用于记录空闲位所在的字节
	/* 先逐字节比较,蛮力法 */
	while (( 0xff == btmp->bits[idx_byte]) && (idx_byte < btmp->btmp_bytes_len)) {
c00026be:	8b 45 08             	mov    0x8(%ebp),%eax
c00026c1:	8b 50 04             	mov    0x4(%eax),%edx
c00026c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00026c7:	01 d0                	add    %edx,%eax
c00026c9:	0f b6 00             	movzbl (%eax),%eax
c00026cc:	3c ff                	cmp    $0xff,%al
c00026ce:	75 0a                	jne    c00026da <bitmap_scan+0x2f>
/work/x86_os_my/lib/kernel/bitmap.c:35 (discriminator 1)
c00026d0:	8b 45 08             	mov    0x8(%ebp),%eax
c00026d3:	8b 00                	mov    (%eax),%eax
c00026d5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c00026d8:	77 e0                	ja     c00026ba <bitmap_scan+0xf>
/work/x86_os_my/lib/kernel/bitmap.c:39
		/* 1表示该位已分配,所以若为0xff,则表示该字节内已无空闲位,向下一字节继续找 */
		idx_byte++;
	}
	ASSERT(idx_byte < btmp->btmp_bytes_len);	//这里应该是"<="
c00026da:	8b 45 08             	mov    0x8(%ebp),%eax
c00026dd:	8b 00                	mov    (%eax),%eax
c00026df:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c00026e2:	77 19                	ja     c00026fd <bitmap_scan+0x52>
/work/x86_os_my/lib/kernel/bitmap.c:39 (discriminator 1)
c00026e4:	68 b8 5b 00 c0       	push   $0xc0005bb8
c00026e9:	68 0c 5c 00 c0       	push   $0xc0005c0c
c00026ee:	6a 27                	push   $0x27
c00026f0:	68 d8 5b 00 c0       	push   $0xc0005bd8
c00026f5:	e8 78 fe ff ff       	call   c0002572 <panic_spin>
c00026fa:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/bitmap.c:40
	if (idx_byte == btmp->btmp_bytes_len) {		// 若该内存池找不到可用空间		
c00026fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0002700:	8b 00                	mov    (%eax),%eax
c0002702:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0002705:	75 0a                	jne    c0002711 <bitmap_scan+0x66>
/work/x86_os_my/lib/kernel/bitmap.c:41
		return -1;
c0002707:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000270c:	e9 cd 00 00 00       	jmp    c00027de <bitmap_scan+0x133>
/work/x86_os_my/lib/kernel/bitmap.c:46
	}

	/* 若在位图数组范围内的某字节内找到了空闲位，
	 * 在该字节内逐位比对,返回空闲位的索引。*/
	int idx_bit = 0;
c0002711:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:48
	/* 和btmp->bits[idx_byte]这个字节逐位对比 */
	while ((uint8_t)(BITMAP_MASK << idx_bit) & btmp->bits[idx_byte]) { 
c0002718:	eb 04                	jmp    c000271e <bitmap_scan+0x73>
/work/x86_os_my/lib/kernel/bitmap.c:49
		idx_bit++;
c000271a:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:48

	/* 若在位图数组范围内的某字节内找到了空闲位，
	 * 在该字节内逐位比对,返回空闲位的索引。*/
	int idx_bit = 0;
	/* 和btmp->bits[idx_byte]这个字节逐位对比 */
	while ((uint8_t)(BITMAP_MASK << idx_bit) & btmp->bits[idx_byte]) { 
c000271e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002721:	ba 01 00 00 00       	mov    $0x1,%edx
c0002726:	89 c1                	mov    %eax,%ecx
c0002728:	d3 e2                	shl    %cl,%edx
c000272a:	89 d0                	mov    %edx,%eax
c000272c:	0f b6 d0             	movzbl %al,%edx
c000272f:	8b 45 08             	mov    0x8(%ebp),%eax
c0002732:	8b 48 04             	mov    0x4(%eax),%ecx
c0002735:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002738:	01 c8                	add    %ecx,%eax
c000273a:	0f b6 00             	movzbl (%eax),%eax
c000273d:	0f b6 c0             	movzbl %al,%eax
c0002740:	21 d0                	and    %edx,%eax
c0002742:	85 c0                	test   %eax,%eax
c0002744:	75 d4                	jne    c000271a <bitmap_scan+0x6f>
/work/x86_os_my/lib/kernel/bitmap.c:52
		idx_bit++;
	}
	
	int bit_idx_start = idx_byte * 8 + idx_bit;		// 空闲位在位图内的下标
c0002746:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002749:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0002750:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002753:	01 d0                	add    %edx,%eax
c0002755:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:53
	if (cnt == 1) {
c0002758:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c000275c:	75 05                	jne    c0002763 <bitmap_scan+0xb8>
/work/x86_os_my/lib/kernel/bitmap.c:54
		return bit_idx_start;
c000275e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002761:	eb 7b                	jmp    c00027de <bitmap_scan+0x133>
/work/x86_os_my/lib/kernel/bitmap.c:57
	}

	uint32_t bit_left = (btmp->btmp_bytes_len * 8 - bit_idx_start);	// 记录还有多少位可以判断
c0002763:	8b 45 08             	mov    0x8(%ebp),%eax
c0002766:	8b 00                	mov    (%eax),%eax
c0002768:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c000276f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002772:	29 c2                	sub    %eax,%edx
c0002774:	89 d0                	mov    %edx,%eax
c0002776:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:58
	uint32_t next_bit = bit_idx_start + 1;
c0002779:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000277c:	83 c0 01             	add    $0x1,%eax
c000277f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:59
	uint32_t count = 1;			// 用于记录找到的空闲位的个数
c0002782:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:61

	bit_idx_start = -1;			// 初始化为-1，若找不到连续的位就直接返回-1
c0002789:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:62
	while (bit_left-- > 0) {
c0002790:	eb 3c                	jmp    c00027ce <bitmap_scan+0x123>
/work/x86_os_my/lib/kernel/bitmap.c:63
		if (!(bitmap_scan_test(btmp, next_bit))) {	// 判断next_bit位是否为1,=1返回true，=0返回false
c0002792:	83 ec 08             	sub    $0x8,%esp
c0002795:	ff 75 e4             	pushl  -0x1c(%ebp)
c0002798:	ff 75 08             	pushl  0x8(%ebp)
c000279b:	e8 cb fe ff ff       	call   c000266b <bitmap_scan_test>
c00027a0:	83 c4 10             	add    $0x10,%esp
c00027a3:	85 c0                	test   %eax,%eax
c00027a5:	75 06                	jne    c00027ad <bitmap_scan+0x102>
/work/x86_os_my/lib/kernel/bitmap.c:64
			count++;
c00027a7:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
c00027ab:	eb 07                	jmp    c00027b4 <bitmap_scan+0x109>
/work/x86_os_my/lib/kernel/bitmap.c:66
		} else {
			count = 0;			// 重新从0找cnt个连续的bit
c00027ad:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:69
		}
		
		if (count == cnt) {		// 已找到连续的cnt个空位
c00027b4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00027b7:	3b 45 0c             	cmp    0xc(%ebp),%eax
c00027ba:	75 0e                	jne    c00027ca <bitmap_scan+0x11f>
/work/x86_os_my/lib/kernel/bitmap.c:70
			bit_idx_start = next_bit - cnt + 1;
c00027bc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00027bf:	2b 45 0c             	sub    0xc(%ebp),%eax
c00027c2:	83 c0 01             	add    $0x1,%eax
c00027c5:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:71
			break;
c00027c8:	eb 11                	jmp    c00027db <bitmap_scan+0x130>
/work/x86_os_my/lib/kernel/bitmap.c:73
		}
		next_bit++;
c00027ca:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:62
	uint32_t bit_left = (btmp->btmp_bytes_len * 8 - bit_idx_start);	// 记录还有多少位可以判断
	uint32_t next_bit = bit_idx_start + 1;
	uint32_t count = 1;			// 用于记录找到的空闲位的个数

	bit_idx_start = -1;			// 初始化为-1，若找不到连续的位就直接返回-1
	while (bit_left-- > 0) {
c00027ce:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00027d1:	8d 50 ff             	lea    -0x1(%eax),%edx
c00027d4:	89 55 e8             	mov    %edx,-0x18(%ebp)
c00027d7:	85 c0                	test   %eax,%eax
c00027d9:	75 b7                	jne    c0002792 <bitmap_scan+0xe7>
/work/x86_os_my/lib/kernel/bitmap.c:75
			bit_idx_start = next_bit - cnt + 1;
			break;
		}
		next_bit++;
	}
	return bit_idx_start;
c00027db:	8b 45 ec             	mov    -0x14(%ebp),%eax
/work/x86_os_my/lib/kernel/bitmap.c:76
}
c00027de:	c9                   	leave  
c00027df:	c3                   	ret    

c00027e0 <bitmap_set>:
bitmap_set():
/work/x86_os_my/lib/kernel/bitmap.c:79

/* 将位图btmp的bit_idx位设置为value */
void bitmap_set(struct bitmap* btmp, uint32_t bit_idx, int8_t value) {
c00027e0:	55                   	push   %ebp
c00027e1:	89 e5                	mov    %esp,%ebp
c00027e3:	56                   	push   %esi
c00027e4:	53                   	push   %ebx
c00027e5:	83 ec 20             	sub    $0x20,%esp
c00027e8:	8b 45 10             	mov    0x10(%ebp),%eax
c00027eb:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:80
	ASSERT((value == 0) || (value == 1));
c00027ee:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c00027f2:	74 1f                	je     c0002813 <bitmap_set+0x33>
/work/x86_os_my/lib/kernel/bitmap.c:80 (discriminator 1)
c00027f4:	80 7d e4 01          	cmpb   $0x1,-0x1c(%ebp)
c00027f8:	74 19                	je     c0002813 <bitmap_set+0x33>
/work/x86_os_my/lib/kernel/bitmap.c:80 (discriminator 2)
c00027fa:	68 ec 5b 00 c0       	push   $0xc0005bec
c00027ff:	68 18 5c 00 c0       	push   $0xc0005c18
c0002804:	6a 50                	push   $0x50
c0002806:	68 d8 5b 00 c0       	push   $0xc0005bd8
c000280b:	e8 62 fd ff ff       	call   c0002572 <panic_spin>
c0002810:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/bitmap.c:81
	uint32_t byte_idx = bit_idx / 8;    // 向下取整用于索引数组下标
c0002813:	8b 45 0c             	mov    0xc(%ebp),%eax
c0002816:	c1 e8 03             	shr    $0x3,%eax
c0002819:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:82
	uint32_t bit_odd  = bit_idx % 8;    // 取余用于索引数组内的位
c000281c:	8b 45 0c             	mov    0xc(%ebp),%eax
c000281f:	83 e0 07             	and    $0x7,%eax
c0002822:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:86

	/* 一般都会用个0x1这样的数对字节中的位操作,
	* 将1任意移动后再取反,或者先取反再移位,可用来对位置0操作。*/
	if (value) {
c0002825:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c0002829:	74 2f                	je     c000285a <bitmap_set+0x7a>
/work/x86_os_my/lib/kernel/bitmap.c:87
		btmp->bits[byte_idx] |= (BITMAP_MASK << bit_odd);
c000282b:	8b 45 08             	mov    0x8(%ebp),%eax
c000282e:	8b 50 04             	mov    0x4(%eax),%edx
c0002831:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002834:	01 c2                	add    %eax,%edx
c0002836:	8b 45 08             	mov    0x8(%ebp),%eax
c0002839:	8b 48 04             	mov    0x4(%eax),%ecx
c000283c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000283f:	01 c8                	add    %ecx,%eax
c0002841:	0f b6 00             	movzbl (%eax),%eax
c0002844:	89 c6                	mov    %eax,%esi
c0002846:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002849:	bb 01 00 00 00       	mov    $0x1,%ebx
c000284e:	89 c1                	mov    %eax,%ecx
c0002850:	d3 e3                	shl    %cl,%ebx
c0002852:	89 d8                	mov    %ebx,%eax
c0002854:	09 f0                	or     %esi,%eax
c0002856:	88 02                	mov    %al,(%edx)
/work/x86_os_my/lib/kernel/bitmap.c:91
	} else {
		btmp->bits[byte_idx] &= ~(BITMAP_MASK << bit_odd);
	}
}
c0002858:	eb 2f                	jmp    c0002889 <bitmap_set+0xa9>
/work/x86_os_my/lib/kernel/bitmap.c:89
	/* 一般都会用个0x1这样的数对字节中的位操作,
	* 将1任意移动后再取反,或者先取反再移位,可用来对位置0操作。*/
	if (value) {
		btmp->bits[byte_idx] |= (BITMAP_MASK << bit_odd);
	} else {
		btmp->bits[byte_idx] &= ~(BITMAP_MASK << bit_odd);
c000285a:	8b 45 08             	mov    0x8(%ebp),%eax
c000285d:	8b 50 04             	mov    0x4(%eax),%edx
c0002860:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002863:	01 c2                	add    %eax,%edx
c0002865:	8b 45 08             	mov    0x8(%ebp),%eax
c0002868:	8b 48 04             	mov    0x4(%eax),%ecx
c000286b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000286e:	01 c8                	add    %ecx,%eax
c0002870:	0f b6 00             	movzbl (%eax),%eax
c0002873:	89 c3                	mov    %eax,%ebx
c0002875:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002878:	be 01 00 00 00       	mov    $0x1,%esi
c000287d:	89 c1                	mov    %eax,%ecx
c000287f:	d3 e6                	shl    %cl,%esi
c0002881:	89 f0                	mov    %esi,%eax
c0002883:	f7 d0                	not    %eax
c0002885:	21 d8                	and    %ebx,%eax
c0002887:	88 02                	mov    %al,(%edx)
/work/x86_os_my/lib/kernel/bitmap.c:91
	}
}
c0002889:	90                   	nop
c000288a:	8d 65 f8             	lea    -0x8(%ebp),%esp
c000288d:	5b                   	pop    %ebx
c000288e:	5e                   	pop    %esi
c000288f:	5d                   	pop    %ebp
c0002890:	c3                   	ret    

c0002891 <vaddr_get>:
vaddr_get():
/work/x86_os_my/kernel/memory.c:66
struct pool kernel_pool, user_pool;		// 生成内核内存池和用户内存池
struct virtual_addr kernel_vaddr;		// 此结构是用来给内核分配虚拟地址

/* 在pf表示的虚拟内存池中申请pg_cnt个虚拟页,
 * 成功则返回虚拟页的起始地址, 失败则返回NULL */
static void* vaddr_get(enum pool_flags pf, uint32_t pg_cnt) {
c0002891:	55                   	push   %ebp
c0002892:	89 e5                	mov    %esp,%ebp
c0002894:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:67
	int vaddr_start = 0, bit_idx_start = -1;
c0002897:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c000289e:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:68
	uint32_t cnt = 0;
c00028a5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:69
	if (pf == PF_KERNEL) {
c00028ac:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c00028b0:	75 64                	jne    c0002916 <vaddr_get+0x85>
/work/x86_os_my/kernel/memory.c:71
		// 在位图中申请连续cnt个位 成功：返回其起始位下标
		bit_idx_start  = bitmap_scan(&kernel_vaddr.vaddr_bitmap, pg_cnt);
c00028b2:	83 ec 08             	sub    $0x8,%esp
c00028b5:	ff 75 0c             	pushl  0xc(%ebp)
c00028b8:	68 48 8b 00 c0       	push   $0xc0008b48
c00028bd:	e8 e9 fd ff ff       	call   c00026ab <bitmap_scan>
c00028c2:	83 c4 10             	add    $0x10,%esp
c00028c5:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:72
		if (bit_idx_start == -1) {	//失败
c00028c8:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%ebp)
c00028cc:	75 2b                	jne    c00028f9 <vaddr_get+0x68>
/work/x86_os_my/kernel/memory.c:73
			return NULL;
c00028ce:	b8 00 00 00 00       	mov    $0x0,%eax
c00028d3:	e9 cd 00 00 00       	jmp    c00029a5 <vaddr_get+0x114>
/work/x86_os_my/kernel/memory.c:77
		}
		while(cnt < pg_cnt) {
			// 设置位图中的位，表示内存已被占用
			bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 1);
c00028d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00028db:	8d 50 01             	lea    0x1(%eax),%edx
c00028de:	89 55 f0             	mov    %edx,-0x10(%ebp)
c00028e1:	8b 55 ec             	mov    -0x14(%ebp),%edx
c00028e4:	01 d0                	add    %edx,%eax
c00028e6:	83 ec 04             	sub    $0x4,%esp
c00028e9:	6a 01                	push   $0x1
c00028eb:	50                   	push   %eax
c00028ec:	68 48 8b 00 c0       	push   $0xc0008b48
c00028f1:	e8 ea fe ff ff       	call   c00027e0 <bitmap_set>
c00028f6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:75
		// 在位图中申请连续cnt个位 成功：返回其起始位下标
		bit_idx_start  = bitmap_scan(&kernel_vaddr.vaddr_bitmap, pg_cnt);
		if (bit_idx_start == -1) {	//失败
			return NULL;
		}
		while(cnt < pg_cnt) {
c00028f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00028fc:	3b 45 0c             	cmp    0xc(%ebp),%eax
c00028ff:	72 d7                	jb     c00028d8 <vaddr_get+0x47>
/work/x86_os_my/kernel/memory.c:79
			// 设置位图中的位，表示内存已被占用
			bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 1);
		}
		vaddr_start = kernel_vaddr.vaddr_start + bit_idx_start * PG_SIZE;
c0002901:	a1 50 8b 00 c0       	mov    0xc0008b50,%eax
c0002906:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0002909:	c1 e2 0c             	shl    $0xc,%edx
c000290c:	01 d0                	add    %edx,%eax
c000290e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0002911:	e9 8c 00 00 00       	jmp    c00029a2 <vaddr_get+0x111>
/work/x86_os_my/kernel/memory.c:81
	} else {
		struct task_struct* cur = running_thread();
c0002916:	e8 3f 14 00 00       	call   c0003d5a <running_thread>
c000291b:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:82
		bit_idx_start  = bitmap_scan(&cur->userprog_vaddr.vaddr_bitmap, pg_cnt);
c000291e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002921:	83 c0 38             	add    $0x38,%eax
c0002924:	83 ec 08             	sub    $0x8,%esp
c0002927:	ff 75 0c             	pushl  0xc(%ebp)
c000292a:	50                   	push   %eax
c000292b:	e8 7b fd ff ff       	call   c00026ab <bitmap_scan>
c0002930:	83 c4 10             	add    $0x10,%esp
c0002933:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:83
		if (bit_idx_start == -1) {
c0002936:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%ebp)
c000293a:	75 2a                	jne    c0002966 <vaddr_get+0xd5>
/work/x86_os_my/kernel/memory.c:84
			return NULL;
c000293c:	b8 00 00 00 00       	mov    $0x0,%eax
c0002941:	eb 62                	jmp    c00029a5 <vaddr_get+0x114>
/work/x86_os_my/kernel/memory.c:87
		}
		while(cnt < pg_cnt) {
			bitmap_set(&cur->userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 1);
c0002943:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002946:	8d 50 01             	lea    0x1(%eax),%edx
c0002949:	89 55 f0             	mov    %edx,-0x10(%ebp)
c000294c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c000294f:	01 c2                	add    %eax,%edx
c0002951:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002954:	83 c0 38             	add    $0x38,%eax
c0002957:	83 ec 04             	sub    $0x4,%esp
c000295a:	6a 01                	push   $0x1
c000295c:	52                   	push   %edx
c000295d:	50                   	push   %eax
c000295e:	e8 7d fe ff ff       	call   c00027e0 <bitmap_set>
c0002963:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:86
		struct task_struct* cur = running_thread();
		bit_idx_start  = bitmap_scan(&cur->userprog_vaddr.vaddr_bitmap, pg_cnt);
		if (bit_idx_start == -1) {
			return NULL;
		}
		while(cnt < pg_cnt) {
c0002966:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002969:	3b 45 0c             	cmp    0xc(%ebp),%eax
c000296c:	72 d5                	jb     c0002943 <vaddr_get+0xb2>
/work/x86_os_my/kernel/memory.c:89
			bitmap_set(&cur->userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 1);
		}
		vaddr_start = cur->userprog_vaddr.vaddr_start + bit_idx_start * PG_SIZE;
c000296e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002971:	8b 40 40             	mov    0x40(%eax),%eax
c0002974:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0002977:	c1 e2 0c             	shl    $0xc,%edx
c000297a:	01 d0                	add    %edx,%eax
c000297c:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:92

		/* (0xc0000000 - PG_SIZE)做为用户3级栈已经在start_process被分配 */
		ASSERT((uint32_t)vaddr_start < (0xc0000000 - PG_SIZE));
c000297f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002982:	3d ff ef ff bf       	cmp    $0xbfffefff,%eax
c0002987:	76 19                	jbe    c00029a2 <vaddr_get+0x111>
/work/x86_os_my/kernel/memory.c:92 (discriminator 1)
c0002989:	68 24 5c 00 c0       	push   $0xc0005c24
c000298e:	68 8c 5f 00 c0       	push   $0xc0005f8c
c0002993:	6a 5c                	push   $0x5c
c0002995:	68 53 5c 00 c0       	push   $0xc0005c53
c000299a:	e8 d3 fb ff ff       	call   c0002572 <panic_spin>
c000299f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:95
		
	}
	return (void*)vaddr_start;
c00029a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/kernel/memory.c:96
}
c00029a5:	c9                   	leave  
c00029a6:	c3                   	ret    

c00029a7 <pte_ptr>:
pte_ptr():
/work/x86_os_my/kernel/memory.c:103
// 页表项 page table
/* 得到虚拟地址vaddr对应的pte指针*/
// 虚拟地址 vaddr 所在 pte 的"虚拟地址"!!!
// *pte 代表的是 pte 页表项的内容,
// 也就是 vaddr 最终所映射到的物理页框的 32 位地址中的高 20 位和 12 位的"页表项"属性
uint32_t* pte_ptr(uint32_t vaddr) {
c00029a7:	55                   	push   %ebp
c00029a8:	89 e5                	mov    %esp,%ebp
c00029aa:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/memory.c:108
	/* 先找到页目录表 + \
	* 再用vaddr的pde部分做为索引，找到某一个页表 + \
	* 再用vaddr的pte部分作为索引，找到某一个页表项*/
	uint32_t* pte = (uint32_t*)(0xffc00000 + \
					((vaddr & 0xffc00000) >> 10) + \
c00029ad:	8b 45 08             	mov    0x8(%ebp),%eax
c00029b0:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c00029b5:	c1 e8 0a             	shr    $0xa,%eax
c00029b8:	89 c2                	mov    %eax,%edx
/work/x86_os_my/kernel/memory.c:109
					PTE_IDX(vaddr) * 4);
c00029ba:	8b 45 08             	mov    0x8(%ebp),%eax
c00029bd:	25 00 f0 3f 00       	and    $0x3ff000,%eax
c00029c2:	c1 e8 0c             	shr    $0xc,%eax
c00029c5:	c1 e0 02             	shl    $0x2,%eax
/work/x86_os_my/kernel/memory.c:108
uint32_t* pte_ptr(uint32_t vaddr) {
	/* 先找到页目录表 + \
	* 再用vaddr的pde部分做为索引，找到某一个页表 + \
	* 再用vaddr的pte部分作为索引，找到某一个页表项*/
	uint32_t* pte = (uint32_t*)(0xffc00000 + \
					((vaddr & 0xffc00000) >> 10) + \
c00029c8:	01 d0                	add    %edx,%eax
c00029ca:	2d 00 00 40 00       	sub    $0x400000,%eax
/work/x86_os_my/kernel/memory.c:107
// 也就是 vaddr 最终所映射到的物理页框的 32 位地址中的高 20 位和 12 位的"页表项"属性
uint32_t* pte_ptr(uint32_t vaddr) {
	/* 先找到页目录表 + \
	* 再用vaddr的pde部分做为索引，找到某一个页表 + \
	* 再用vaddr的pte部分作为索引，找到某一个页表项*/
	uint32_t* pte = (uint32_t*)(0xffc00000 + \
c00029cf:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/kernel/memory.c:110
					((vaddr & 0xffc00000) >> 10) + \
					PTE_IDX(vaddr) * 4);
	return pte;
c00029d2:	8b 45 fc             	mov    -0x4(%ebp),%eax
/work/x86_os_my/kernel/memory.c:111
}
c00029d5:	c9                   	leave  
c00029d6:	c3                   	ret    

c00029d7 <pde_ptr>:
pde_ptr():
/work/x86_os_my/kernel/memory.c:118
// 页目录表项 page Directory table entry
/* 得到虚拟地址vaddr对应的pde的指针 */
// 虚拟地址 vaddr 所在 pde 的"虚拟地址"!!!
// *pde 代表的是 pde 页目录项的内容
// 也就是 vaddr 最终所映射到的物理页框的 32 位地址中的高 20 位和 12 位的"页目录项"属性
uint32_t* pde_ptr(uint32_t vaddr) {
c00029d7:	55                   	push   %ebp
c00029d8:	89 e5                	mov    %esp,%ebp
c00029da:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/memory.c:120
	/* 0xfffff是用来访问到页目录表本身所在的地址 */
	uint32_t* pde = (uint32_t*)((0xfffff000) + PDE_IDX(vaddr) * 4);
c00029dd:	8b 45 08             	mov    0x8(%ebp),%eax
c00029e0:	c1 e8 16             	shr    $0x16,%eax
c00029e3:	05 00 fc ff 3f       	add    $0x3ffffc00,%eax
c00029e8:	c1 e0 02             	shl    $0x2,%eax
c00029eb:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/kernel/memory.c:121
	return pde;
c00029ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
/work/x86_os_my/kernel/memory.c:122
}
c00029f1:	c9                   	leave  
c00029f2:	c3                   	ret    

c00029f3 <palloc>:
palloc():
/work/x86_os_my/kernel/memory.c:126

/* 在m_pool指向的物理内存池中分配1个物理页,
 * 成功则返回页框的物理地址,失败则返回NULL */
static void* palloc(struct pool* m_pool) {
c00029f3:	55                   	push   %ebp
c00029f4:	89 e5                	mov    %esp,%ebp
c00029f6:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:128
	/* 扫描或设置位图要保证原子操作 */
	int bit_idx = bitmap_scan(&m_pool->pool_bitmap, 1);    // 找一个物理页面
c00029f9:	8b 45 08             	mov    0x8(%ebp),%eax
c00029fc:	83 ec 08             	sub    $0x8,%esp
c00029ff:	6a 01                	push   $0x1
c0002a01:	50                   	push   %eax
c0002a02:	e8 a4 fc ff ff       	call   c00026ab <bitmap_scan>
c0002a07:	83 c4 10             	add    $0x10,%esp
c0002a0a:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:129
	if (bit_idx == -1 ) {
c0002a0d:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c0002a11:	75 07                	jne    c0002a1a <palloc+0x27>
/work/x86_os_my/kernel/memory.c:130
		return NULL;
c0002a13:	b8 00 00 00 00       	mov    $0x0,%eax
c0002a18:	eb 2b                	jmp    c0002a45 <palloc+0x52>
/work/x86_os_my/kernel/memory.c:132
	}
	bitmap_set(&m_pool->pool_bitmap, bit_idx, 1);	// 将此位bit_idx置1
c0002a1a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0002a1d:	8b 45 08             	mov    0x8(%ebp),%eax
c0002a20:	83 ec 04             	sub    $0x4,%esp
c0002a23:	6a 01                	push   $0x1
c0002a25:	52                   	push   %edx
c0002a26:	50                   	push   %eax
c0002a27:	e8 b4 fd ff ff       	call   c00027e0 <bitmap_set>
c0002a2c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:133
	uint32_t page_phyaddr = ((bit_idx * PG_SIZE) + m_pool->phy_addr_start);
c0002a2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002a32:	c1 e0 0c             	shl    $0xc,%eax
c0002a35:	89 c2                	mov    %eax,%edx
c0002a37:	8b 45 08             	mov    0x8(%ebp),%eax
c0002a3a:	8b 40 08             	mov    0x8(%eax),%eax
c0002a3d:	01 d0                	add    %edx,%eax
c0002a3f:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:134
	return (void*)page_phyaddr;
c0002a42:	8b 45 f0             	mov    -0x10(%ebp),%eax
/work/x86_os_my/kernel/memory.c:135
}
c0002a45:	c9                   	leave  
c0002a46:	c3                   	ret    

c0002a47 <page_table_add>:
page_table_add():
/work/x86_os_my/kernel/memory.c:138

/* 页表中添加虚拟地址_vaddr与物理地址_page_phyaddr的映射 */
static void page_table_add(void* _vaddr, void* _page_phyaddr) {
c0002a47:	55                   	push   %ebp
c0002a48:	89 e5                	mov    %esp,%ebp
c0002a4a:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/kernel/memory.c:139
	uint32_t vaddr = (uint32_t)_vaddr, page_phyaddr = (uint32_t)_page_phyaddr;
c0002a4d:	8b 45 08             	mov    0x8(%ebp),%eax
c0002a50:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0002a53:	8b 45 0c             	mov    0xc(%ebp),%eax
c0002a56:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:140
	uint32_t* pde = pde_ptr(vaddr);	//变量pde是虚拟地址!!!
c0002a59:	ff 75 f4             	pushl  -0xc(%ebp)
c0002a5c:	e8 76 ff ff ff       	call   c00029d7 <pde_ptr>
c0002a61:	83 c4 04             	add    $0x4,%esp
c0002a64:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:141
	uint32_t* pte = pte_ptr(vaddr);	//变量pte是虚拟地址!!!
c0002a67:	ff 75 f4             	pushl  -0xc(%ebp)
c0002a6a:	e8 38 ff ff ff       	call   c00029a7 <pte_ptr>
c0002a6f:	83 c4 04             	add    $0x4,%esp
c0002a72:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:149
	* pde页目录项 pte页表项
	* 执行*pte可能会访问到空的pde。所以确保pde创建完成后才能执行*pte，否则会引发page_fault。
	* 因此在*pde为0时，*pte只能出现在下面else语句块中的*pde后面。
	* *********************************************************/
	/* 先在页目录内判断目录项的P位，若为1,则表示该表已存在 */
	if (*pde & 0x00000001) {			// 页目录项 存在
c0002a75:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002a78:	8b 00                	mov    (%eax),%eax
c0002a7a:	83 e0 01             	and    $0x1,%eax
c0002a7d:	85 c0                	test   %eax,%eax
c0002a7f:	74 64                	je     c0002ae5 <page_table_add+0x9e>
/work/x86_os_my/kernel/memory.c:150
		ASSERT(!(*pte & 0x00000001));	// 页表项不存在才能往下执行，否则panic
c0002a81:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002a84:	8b 00                	mov    (%eax),%eax
c0002a86:	83 e0 01             	and    $0x1,%eax
c0002a89:	85 c0                	test   %eax,%eax
c0002a8b:	74 1c                	je     c0002aa9 <page_table_add+0x62>
/work/x86_os_my/kernel/memory.c:150 (discriminator 1)
c0002a8d:	68 63 5c 00 c0       	push   $0xc0005c63
c0002a92:	68 98 5f 00 c0       	push   $0xc0005f98
c0002a97:	68 96 00 00 00       	push   $0x96
c0002a9c:	68 53 5c 00 c0       	push   $0xc0005c53
c0002aa1:	e8 cc fa ff ff       	call   c0002572 <panic_spin>
c0002aa6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:152

		if (!(*pte & 0x00000001)) {		// 页表项pte不存在，创建PTE
c0002aa9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002aac:	8b 00                	mov    (%eax),%eax
c0002aae:	83 e0 01             	and    $0x1,%eax
c0002ab1:	85 c0                	test   %eax,%eax
c0002ab3:	75 12                	jne    c0002ac7 <page_table_add+0x80>
/work/x86_os_my/kernel/memory.c:153
			*pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);		// 物理地址 | US=1,RW=1,P=1
c0002ab5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002ab8:	83 c8 07             	or     $0x7,%eax
c0002abb:	89 c2                	mov    %eax,%edx
c0002abd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002ac0:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/kernel/memory.c:173
		memset((void*)((int)pte & 0xfffff000), 0, PG_SIZE);

		ASSERT(!(*pte & 0x00000001));	// 页表项不存在才能往下执行，否则panic
		*pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);			// 物理地址 | US=1,RW=1,P=1
	}
}
c0002ac2:	e9 8e 00 00 00       	jmp    c0002b55 <page_table_add+0x10e>
/work/x86_os_my/kernel/memory.c:155
		ASSERT(!(*pte & 0x00000001));	// 页表项不存在才能往下执行，否则panic

		if (!(*pte & 0x00000001)) {		// 页表项pte不存在，创建PTE
			*pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);		// 物理地址 | US=1,RW=1,P=1
		} else {						// 不会执行到这，因为上面的ASSERT
			PANIC("pte repeat");
c0002ac7:	68 78 5c 00 c0       	push   $0xc0005c78
c0002acc:	68 98 5f 00 c0       	push   $0xc0005f98
c0002ad1:	68 9b 00 00 00       	push   $0x9b
c0002ad6:	68 53 5c 00 c0       	push   $0xc0005c53
c0002adb:	e8 92 fa ff ff       	call   c0002572 <panic_spin>
c0002ae0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:173
		memset((void*)((int)pte & 0xfffff000), 0, PG_SIZE);

		ASSERT(!(*pte & 0x00000001));	// 页表项不存在才能往下执行，否则panic
		*pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);			// 物理地址 | US=1,RW=1,P=1
	}
}
c0002ae3:	eb 70                	jmp    c0002b55 <page_table_add+0x10e>
/work/x86_os_my/kernel/memory.c:159
		} else {						// 不会执行到这，因为上面的ASSERT
			PANIC("pte repeat");
		}
	} else {							// 页目录项不存在，先创建页目录，再创建页表项
		/* 页表中用到的页一律从内核空间分配 */
		uint32_t pde_phyaddr = (uint32_t)palloc(&kernel_pool);
c0002ae5:	83 ec 0c             	sub    $0xc,%esp
c0002ae8:	68 60 8b 00 c0       	push   $0xc0008b60
c0002aed:	e8 01 ff ff ff       	call   c00029f3 <palloc>
c0002af2:	83 c4 10             	add    $0x10,%esp
c0002af5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/kernel/memory.c:160
		*pde = (pde_phyaddr | PG_US_U | PG_RW_W | PG_P_1);			// 注意这行是pde_phyaddr，不是page_phyaddr!!!
c0002af8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0002afb:	83 c8 07             	or     $0x7,%eax
c0002afe:	89 c2                	mov    %eax,%edx
c0002b00:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002b03:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/kernel/memory.c:168
		 * 访问物理地址 pde_phyaddr，需要找到它的虚拟地址！
		 * 只要用_vaddr的 PTE 取高20位即可。
		   搞得这么难理解，其实就是0xffc00000找到页目录表，然后加上vaddr的PDE在页目录表中的索引
		   (uint32_t*)(0xffc00000 + ((vaddr & 0xffc00000) >> 10))
		 */
		memset((void*)((int)pte & 0xfffff000), 0, PG_SIZE);
c0002b05:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002b08:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0002b0d:	83 ec 04             	sub    $0x4,%esp
c0002b10:	68 00 10 00 00       	push   $0x1000
c0002b15:	6a 00                	push   $0x0
c0002b17:	50                   	push   %eax
c0002b18:	e8 6d 0e 00 00       	call   c000398a <memset>
c0002b1d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:170

		ASSERT(!(*pte & 0x00000001));	// 页表项不存在才能往下执行，否则panic
c0002b20:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002b23:	8b 00                	mov    (%eax),%eax
c0002b25:	83 e0 01             	and    $0x1,%eax
c0002b28:	85 c0                	test   %eax,%eax
c0002b2a:	74 1c                	je     c0002b48 <page_table_add+0x101>
/work/x86_os_my/kernel/memory.c:170 (discriminator 1)
c0002b2c:	68 63 5c 00 c0       	push   $0xc0005c63
c0002b31:	68 98 5f 00 c0       	push   $0xc0005f98
c0002b36:	68 aa 00 00 00       	push   $0xaa
c0002b3b:	68 53 5c 00 c0       	push   $0xc0005c53
c0002b40:	e8 2d fa ff ff       	call   c0002572 <panic_spin>
c0002b45:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:171
		*pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);			// 物理地址 | US=1,RW=1,P=1
c0002b48:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002b4b:	83 c8 07             	or     $0x7,%eax
c0002b4e:	89 c2                	mov    %eax,%edx
c0002b50:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002b53:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/kernel/memory.c:173
	}
}
c0002b55:	90                   	nop
c0002b56:	c9                   	leave  
c0002b57:	c3                   	ret    

c0002b58 <malloc_page>:
malloc_page():
/work/x86_os_my/kernel/memory.c:176

/* 分配pg_cnt个页空间,成功则返回起始虚拟地址,失败时返回NULL */
void* malloc_page(enum pool_flags pf, uint32_t pg_cnt) {
c0002b58:	55                   	push   %ebp
c0002b59:	89 e5                	mov    %esp,%ebp
c0002b5b:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/kernel/memory.c:177
	ASSERT(pg_cnt > 0 && pg_cnt < 3840);
c0002b5e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0002b62:	74 09                	je     c0002b6d <malloc_page+0x15>
/work/x86_os_my/kernel/memory.c:177 (discriminator 1)
c0002b64:	81 7d 0c ff 0e 00 00 	cmpl   $0xeff,0xc(%ebp)
c0002b6b:	76 1c                	jbe    c0002b89 <malloc_page+0x31>
/work/x86_os_my/kernel/memory.c:177 (discriminator 3)
c0002b6d:	68 83 5c 00 c0       	push   $0xc0005c83
c0002b72:	68 a8 5f 00 c0       	push   $0xc0005fa8
c0002b77:	68 b1 00 00 00       	push   $0xb1
c0002b7c:	68 53 5c 00 c0       	push   $0xc0005c53
c0002b81:	e8 ec f9 ff ff       	call   c0002572 <panic_spin>
c0002b86:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:183
	/***********   malloc_page的原理是三个动作的合成:   ***********
		1 通过vaddr_get在虚拟内存池中申请虚拟地址
		2 通过palloc在物理内存池中申请物理页
		3 通过page_table_add将以上得到的虚拟地址和物理地址在页表中完成映射
	***************************************************************/
	void* vaddr_start = vaddr_get(pf, pg_cnt);
c0002b89:	83 ec 08             	sub    $0x8,%esp
c0002b8c:	ff 75 0c             	pushl  0xc(%ebp)
c0002b8f:	ff 75 08             	pushl  0x8(%ebp)
c0002b92:	e8 fa fc ff ff       	call   c0002891 <vaddr_get>
c0002b97:	83 c4 10             	add    $0x10,%esp
c0002b9a:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:184
	if (vaddr_start == NULL) {
c0002b9d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0002ba1:	75 07                	jne    c0002baa <malloc_page+0x52>
/work/x86_os_my/kernel/memory.c:185
		return NULL;
c0002ba3:	b8 00 00 00 00       	mov    $0x0,%eax
c0002ba8:	eb 6e                	jmp    c0002c18 <malloc_page+0xc0>
/work/x86_os_my/kernel/memory.c:188
	}

	uint32_t vaddr = (uint32_t)vaddr_start, cnt = pg_cnt;
c0002baa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002bad:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0002bb0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0002bb3:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:189
	struct pool* mem_pool = pf & PF_KERNEL ? &kernel_pool : &user_pool;
c0002bb6:	8b 45 08             	mov    0x8(%ebp),%eax
c0002bb9:	83 e0 01             	and    $0x1,%eax
c0002bbc:	85 c0                	test   %eax,%eax
c0002bbe:	74 07                	je     c0002bc7 <malloc_page+0x6f>
/work/x86_os_my/kernel/memory.c:189 (discriminator 1)
c0002bc0:	b8 60 8b 00 c0       	mov    $0xc0008b60,%eax
c0002bc5:	eb 05                	jmp    c0002bcc <malloc_page+0x74>
/work/x86_os_my/kernel/memory.c:189 (discriminator 2)
c0002bc7:	b8 60 8a 00 c0       	mov    $0xc0008a60,%eax
/work/x86_os_my/kernel/memory.c:189 (discriminator 4)
c0002bcc:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:192 (discriminator 4)

	/* 因为虚拟地址是连续的,但物理地址可以是不连续的,所以逐个做映射*/
	while (cnt-- > 0) {
c0002bcf:	eb 37                	jmp    c0002c08 <malloc_page+0xb0>
/work/x86_os_my/kernel/memory.c:193
		void* page_phyaddr = palloc(mem_pool);
c0002bd1:	83 ec 0c             	sub    $0xc,%esp
c0002bd4:	ff 75 e8             	pushl  -0x18(%ebp)
c0002bd7:	e8 17 fe ff ff       	call   c00029f3 <palloc>
c0002bdc:	83 c4 10             	add    $0x10,%esp
c0002bdf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/kernel/memory.c:194
		if (page_phyaddr == NULL) {  // 失败时要将曾经已申请的虚拟地址和物理页全部回滚，在将来完成内存回收时再补充
c0002be2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0002be6:	75 07                	jne    c0002bef <malloc_page+0x97>
/work/x86_os_my/kernel/memory.c:195
			return NULL;
c0002be8:	b8 00 00 00 00       	mov    $0x0,%eax
c0002bed:	eb 29                	jmp    c0002c18 <malloc_page+0xc0>
/work/x86_os_my/kernel/memory.c:197
		}
		page_table_add((void*)vaddr, page_phyaddr); // 在页表中做映射 
c0002bef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002bf2:	83 ec 08             	sub    $0x8,%esp
c0002bf5:	ff 75 e4             	pushl  -0x1c(%ebp)
c0002bf8:	50                   	push   %eax
c0002bf9:	e8 49 fe ff ff       	call   c0002a47 <page_table_add>
c0002bfe:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:198
		vaddr += PG_SIZE;		 // 下一个虚拟页
c0002c01:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:192

	uint32_t vaddr = (uint32_t)vaddr_start, cnt = pg_cnt;
	struct pool* mem_pool = pf & PF_KERNEL ? &kernel_pool : &user_pool;

	/* 因为虚拟地址是连续的,但物理地址可以是不连续的,所以逐个做映射*/
	while (cnt-- > 0) {
c0002c08:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002c0b:	8d 50 ff             	lea    -0x1(%eax),%edx
c0002c0e:	89 55 f0             	mov    %edx,-0x10(%ebp)
c0002c11:	85 c0                	test   %eax,%eax
c0002c13:	75 bc                	jne    c0002bd1 <malloc_page+0x79>
/work/x86_os_my/kernel/memory.c:200
			return NULL;
		}
		page_table_add((void*)vaddr, page_phyaddr); // 在页表中做映射 
		vaddr += PG_SIZE;		 // 下一个虚拟页
	}
	return vaddr_start;
c0002c15:	8b 45 ec             	mov    -0x14(%ebp),%eax
/work/x86_os_my/kernel/memory.c:201
}
c0002c18:	c9                   	leave  
c0002c19:	c3                   	ret    

c0002c1a <get_kernel_pages>:
get_kernel_pages():
/work/x86_os_my/kernel/memory.c:204

/* 从内核物理内存池中申请pg_cnt页内存,成功则返回其虚拟地址,失败则返回NULL */
void* get_kernel_pages(uint32_t pg_cnt) {
c0002c1a:	55                   	push   %ebp
c0002c1b:	89 e5                	mov    %esp,%ebp
c0002c1d:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:205
	lock_acquire(&kernel_pool.lock);
c0002c20:	83 ec 0c             	sub    $0xc,%esp
c0002c23:	68 70 8b 00 c0       	push   $0xc0008b70
c0002c28:	e8 c2 1b 00 00       	call   c00047ef <lock_acquire>
c0002c2d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:206
	void* vaddr =  malloc_page(PF_KERNEL, pg_cnt);
c0002c30:	83 ec 08             	sub    $0x8,%esp
c0002c33:	ff 75 08             	pushl  0x8(%ebp)
c0002c36:	6a 01                	push   $0x1
c0002c38:	e8 1b ff ff ff       	call   c0002b58 <malloc_page>
c0002c3d:	83 c4 10             	add    $0x10,%esp
c0002c40:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:207
	if (vaddr != NULL) {
c0002c43:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0002c47:	74 17                	je     c0002c60 <get_kernel_pages+0x46>
/work/x86_os_my/kernel/memory.c:208
		memset(vaddr, 0, pg_cnt * PG_SIZE);
c0002c49:	8b 45 08             	mov    0x8(%ebp),%eax
c0002c4c:	c1 e0 0c             	shl    $0xc,%eax
c0002c4f:	83 ec 04             	sub    $0x4,%esp
c0002c52:	50                   	push   %eax
c0002c53:	6a 00                	push   $0x0
c0002c55:	ff 75 f4             	pushl  -0xc(%ebp)
c0002c58:	e8 2d 0d 00 00       	call   c000398a <memset>
c0002c5d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:210
	}
	lock_release(&kernel_pool.lock);
c0002c60:	83 ec 0c             	sub    $0xc,%esp
c0002c63:	68 70 8b 00 c0       	push   $0xc0008b70
c0002c68:	e8 f9 1b 00 00       	call   c0004866 <lock_release>
c0002c6d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:211
	return vaddr;
c0002c70:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/kernel/memory.c:212
}
c0002c73:	c9                   	leave  
c0002c74:	c3                   	ret    

c0002c75 <get_user_pages>:
get_user_pages():
/work/x86_os_my/kernel/memory.c:215

/* 在用户空间中申请4k内存,并返回其虚拟地址 */
void* get_user_pages(uint32_t pg_cnt) {
c0002c75:	55                   	push   %ebp
c0002c76:	89 e5                	mov    %esp,%ebp
c0002c78:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:216
	lock_acquire(&user_pool.lock);
c0002c7b:	83 ec 0c             	sub    $0xc,%esp
c0002c7e:	68 70 8a 00 c0       	push   $0xc0008a70
c0002c83:	e8 67 1b 00 00       	call   c00047ef <lock_acquire>
c0002c88:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:217
	void* vaddr = malloc_page(PF_USER, pg_cnt);
c0002c8b:	83 ec 08             	sub    $0x8,%esp
c0002c8e:	ff 75 08             	pushl  0x8(%ebp)
c0002c91:	6a 02                	push   $0x2
c0002c93:	e8 c0 fe ff ff       	call   c0002b58 <malloc_page>
c0002c98:	83 c4 10             	add    $0x10,%esp
c0002c9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:218
	if (vaddr != NULL) {
c0002c9e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0002ca2:	74 17                	je     c0002cbb <get_user_pages+0x46>
/work/x86_os_my/kernel/memory.c:219
		memset(vaddr, 0, pg_cnt * PG_SIZE);
c0002ca4:	8b 45 08             	mov    0x8(%ebp),%eax
c0002ca7:	c1 e0 0c             	shl    $0xc,%eax
c0002caa:	83 ec 04             	sub    $0x4,%esp
c0002cad:	50                   	push   %eax
c0002cae:	6a 00                	push   $0x0
c0002cb0:	ff 75 f4             	pushl  -0xc(%ebp)
c0002cb3:	e8 d2 0c 00 00       	call   c000398a <memset>
c0002cb8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:221
	}
	lock_release(&user_pool.lock);
c0002cbb:	83 ec 0c             	sub    $0xc,%esp
c0002cbe:	68 70 8a 00 c0       	push   $0xc0008a70
c0002cc3:	e8 9e 1b 00 00       	call   c0004866 <lock_release>
c0002cc8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:222
	return vaddr;
c0002ccb:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/kernel/memory.c:223
}
c0002cce:	c9                   	leave  
c0002ccf:	c3                   	ret    

c0002cd0 <get_a_page>:
get_a_page():
/work/x86_os_my/kernel/memory.c:227

/* 将虚拟地址vaddr与pf池中的物理地址关联,仅支持一页空间分配
 * 功能是，可以指定虚拟地址的内存分配 */
void* get_a_page(enum pool_flags pf, uint32_t vaddr) {
c0002cd0:	55                   	push   %ebp
c0002cd1:	89 e5                	mov    %esp,%ebp
c0002cd3:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:228
	struct pool* mem_pool = pf & PF_KERNEL ? &kernel_pool : &user_pool;
c0002cd6:	8b 45 08             	mov    0x8(%ebp),%eax
c0002cd9:	83 e0 01             	and    $0x1,%eax
c0002cdc:	85 c0                	test   %eax,%eax
c0002cde:	74 07                	je     c0002ce7 <get_a_page+0x17>
/work/x86_os_my/kernel/memory.c:228 (discriminator 1)
c0002ce0:	b8 60 8b 00 c0       	mov    $0xc0008b60,%eax
c0002ce5:	eb 05                	jmp    c0002cec <get_a_page+0x1c>
/work/x86_os_my/kernel/memory.c:228 (discriminator 2)
c0002ce7:	b8 60 8a 00 c0       	mov    $0xc0008a60,%eax
/work/x86_os_my/kernel/memory.c:228 (discriminator 4)
c0002cec:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:229 (discriminator 4)
	lock_acquire(&mem_pool->lock);
c0002cef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002cf2:	83 c0 10             	add    $0x10,%eax
c0002cf5:	83 ec 0c             	sub    $0xc,%esp
c0002cf8:	50                   	push   %eax
c0002cf9:	e8 f1 1a 00 00       	call   c00047ef <lock_acquire>
c0002cfe:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:232 (discriminator 4)

	/* 先将虚拟地址对应的位图置1 */
	struct task_struct* cur = running_thread();
c0002d01:	e8 54 10 00 00       	call   c0003d5a <running_thread>
c0002d06:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:233 (discriminator 4)
	int32_t bit_idx = -1;
c0002d09:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:235 (discriminator 4)

	if (cur->pgdir != NULL && pf == PF_USER) {
c0002d10:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002d13:	8b 40 34             	mov    0x34(%eax),%eax
c0002d16:	85 c0                	test   %eax,%eax
c0002d18:	74 55                	je     c0002d6f <get_a_page+0x9f>
/work/x86_os_my/kernel/memory.c:235 (discriminator 1)
c0002d1a:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c0002d1e:	75 4f                	jne    c0002d6f <get_a_page+0x9f>
/work/x86_os_my/kernel/memory.c:237
		/* 若当前是用户进程申请用户内存,就修改用户进程自己的虚拟地址池的 位图 */
		bit_idx = (vaddr - cur->userprog_vaddr.vaddr_start) / PG_SIZE;
c0002d20:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002d23:	8b 40 40             	mov    0x40(%eax),%eax
c0002d26:	8b 55 0c             	mov    0xc(%ebp),%edx
c0002d29:	29 c2                	sub    %eax,%edx
c0002d2b:	89 d0                	mov    %edx,%eax
c0002d2d:	c1 e8 0c             	shr    $0xc,%eax
c0002d30:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:238
		ASSERT(bit_idx > 0);
c0002d33:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0002d37:	7f 1c                	jg     c0002d55 <get_a_page+0x85>
/work/x86_os_my/kernel/memory.c:238 (discriminator 1)
c0002d39:	68 9f 5c 00 c0       	push   $0xc0005c9f
c0002d3e:	68 b4 5f 00 c0       	push   $0xc0005fb4
c0002d43:	68 ee 00 00 00       	push   $0xee
c0002d48:	68 53 5c 00 c0       	push   $0xc0005c53
c0002d4d:	e8 20 f8 ff ff       	call   c0002572 <panic_spin>
c0002d52:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:239
		bitmap_set(&cur->userprog_vaddr.vaddr_bitmap, bit_idx, 1);
c0002d55:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002d58:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0002d5b:	83 c2 38             	add    $0x38,%edx
c0002d5e:	83 ec 04             	sub    $0x4,%esp
c0002d61:	6a 01                	push   $0x1
c0002d63:	50                   	push   %eax
c0002d64:	52                   	push   %edx
c0002d65:	e8 76 fa ff ff       	call   c00027e0 <bitmap_set>
c0002d6a:	83 c4 10             	add    $0x10,%esp
c0002d6d:	eb 78                	jmp    c0002de7 <get_a_page+0x117>
/work/x86_os_my/kernel/memory.c:241

	} else if (cur->pgdir == NULL && pf == PF_KERNEL) {
c0002d6f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002d72:	8b 40 34             	mov    0x34(%eax),%eax
c0002d75:	85 c0                	test   %eax,%eax
c0002d77:	75 52                	jne    c0002dcb <get_a_page+0xfb>
/work/x86_os_my/kernel/memory.c:241 (discriminator 1)
c0002d79:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c0002d7d:	75 4c                	jne    c0002dcb <get_a_page+0xfb>
/work/x86_os_my/kernel/memory.c:243
		/* 如果是内核线程申请内核内存,就修改 kernel_vaddr */
		bit_idx = (vaddr - kernel_vaddr.vaddr_start) / PG_SIZE;
c0002d7f:	a1 50 8b 00 c0       	mov    0xc0008b50,%eax
c0002d84:	8b 55 0c             	mov    0xc(%ebp),%edx
c0002d87:	29 c2                	sub    %eax,%edx
c0002d89:	89 d0                	mov    %edx,%eax
c0002d8b:	c1 e8 0c             	shr    $0xc,%eax
c0002d8e:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:244
		ASSERT(bit_idx > 0);
c0002d91:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0002d95:	7f 1c                	jg     c0002db3 <get_a_page+0xe3>
/work/x86_os_my/kernel/memory.c:244 (discriminator 1)
c0002d97:	68 9f 5c 00 c0       	push   $0xc0005c9f
c0002d9c:	68 b4 5f 00 c0       	push   $0xc0005fb4
c0002da1:	68 f4 00 00 00       	push   $0xf4
c0002da6:	68 53 5c 00 c0       	push   $0xc0005c53
c0002dab:	e8 c2 f7 ff ff       	call   c0002572 <panic_spin>
c0002db0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:245
		bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx, 1);
c0002db3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002db6:	83 ec 04             	sub    $0x4,%esp
c0002db9:	6a 01                	push   $0x1
c0002dbb:	50                   	push   %eax
c0002dbc:	68 48 8b 00 c0       	push   $0xc0008b48
c0002dc1:	e8 1a fa ff ff       	call   c00027e0 <bitmap_set>
c0002dc6:	83 c4 10             	add    $0x10,%esp
c0002dc9:	eb 1c                	jmp    c0002de7 <get_a_page+0x117>
/work/x86_os_my/kernel/memory.c:248

	} else {
		PANIC("get_a_page:not allow kernel alloc userspace or user alloc kernelspace by get_a_page");
c0002dcb:	68 ac 5c 00 c0       	push   $0xc0005cac
c0002dd0:	68 b4 5f 00 c0       	push   $0xc0005fb4
c0002dd5:	68 f8 00 00 00       	push   $0xf8
c0002dda:	68 53 5c 00 c0       	push   $0xc0005c53
c0002ddf:	e8 8e f7 ff ff       	call   c0002572 <panic_spin>
c0002de4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:251
	}

	void* page_phyaddr = palloc(mem_pool);
c0002de7:	83 ec 0c             	sub    $0xc,%esp
c0002dea:	ff 75 f4             	pushl  -0xc(%ebp)
c0002ded:	e8 01 fc ff ff       	call   c00029f3 <palloc>
c0002df2:	83 c4 10             	add    $0x10,%esp
c0002df5:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:252
	if (page_phyaddr == NULL) {
c0002df8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0002dfc:	75 19                	jne    c0002e17 <get_a_page+0x147>
/work/x86_os_my/kernel/memory.c:253
		lock_release(&mem_pool->lock);	//哈哈
c0002dfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002e01:	83 c0 10             	add    $0x10,%eax
c0002e04:	83 ec 0c             	sub    $0xc,%esp
c0002e07:	50                   	push   %eax
c0002e08:	e8 59 1a 00 00       	call   c0004866 <lock_release>
c0002e0d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:254
		return NULL;
c0002e10:	b8 00 00 00 00       	mov    $0x0,%eax
c0002e15:	eb 27                	jmp    c0002e3e <get_a_page+0x16e>
/work/x86_os_my/kernel/memory.c:256
	}
	page_table_add((void*)vaddr, page_phyaddr);
c0002e17:	8b 45 0c             	mov    0xc(%ebp),%eax
c0002e1a:	83 ec 08             	sub    $0x8,%esp
c0002e1d:	ff 75 e8             	pushl  -0x18(%ebp)
c0002e20:	50                   	push   %eax
c0002e21:	e8 21 fc ff ff       	call   c0002a47 <page_table_add>
c0002e26:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:258
	
	lock_release(&mem_pool->lock);
c0002e29:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002e2c:	83 c0 10             	add    $0x10,%eax
c0002e2f:	83 ec 0c             	sub    $0xc,%esp
c0002e32:	50                   	push   %eax
c0002e33:	e8 2e 1a 00 00       	call   c0004866 <lock_release>
c0002e38:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:259
	return (void*)vaddr;
c0002e3b:	8b 45 0c             	mov    0xc(%ebp),%eax
/work/x86_os_my/kernel/memory.c:260
}
c0002e3e:	c9                   	leave  
c0002e3f:	c3                   	ret    

c0002e40 <addr_v2p>:
addr_v2p():
/work/x86_os_my/kernel/memory.c:263

/* 得到虚拟地址映射到的物理地址 */
uint32_t addr_v2p(uint32_t vaddr) {
c0002e40:	55                   	push   %ebp
c0002e41:	89 e5                	mov    %esp,%ebp
c0002e43:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/memory.c:264
	uint32_t* pte = pte_ptr(vaddr);
c0002e46:	ff 75 08             	pushl  0x8(%ebp)
c0002e49:	e8 59 fb ff ff       	call   c00029a7 <pte_ptr>
c0002e4e:	83 c4 04             	add    $0x4,%esp
c0002e51:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/kernel/memory.c:268
	/* (*pte)的内容是 vaddr 所在 pte 的内容，也就是 vaddr 最终所映射到的物理页框的 32 位地址中的高 20 位和 12 位的页表项属性，
	 * 因为页框都是自然页，低 12 位地址是 0，所以页表项 pte（和页目录项 pde）中只需要记录页框的高 20 位地址即可。
	 */
	return ((*pte & 0xfffff000) + (vaddr & 0x00000fff));
c0002e54:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0002e57:	8b 00                	mov    (%eax),%eax
c0002e59:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0002e5e:	89 c2                	mov    %eax,%edx
c0002e60:	8b 45 08             	mov    0x8(%ebp),%eax
c0002e63:	25 ff 0f 00 00       	and    $0xfff,%eax
c0002e68:	01 d0                	add    %edx,%eax
/work/x86_os_my/kernel/memory.c:269
}
c0002e6a:	c9                   	leave  
c0002e6b:	c3                   	ret    

c0002e6c <arena2block>:
arena2block():
/work/x86_os_my/kernel/memory.c:283
|                     |
| +-----------------+ |
+-+  mem_block_desc |←+
  +-----------------+
*/
static struct mem_block* arena2block(struct arena* a, uint32_t idx) {
c0002e6c:	55                   	push   %ebp
c0002e6d:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/kernel/memory.c:284
	return (struct mem_block*)((uint32_t)a + sizeof(struct arena) + idx * a->desc->block_size);
c0002e6f:	8b 45 08             	mov    0x8(%ebp),%eax
c0002e72:	8b 00                	mov    (%eax),%eax
c0002e74:	8b 00                	mov    (%eax),%eax
c0002e76:	0f af 45 0c          	imul   0xc(%ebp),%eax
c0002e7a:	89 c2                	mov    %eax,%edx
c0002e7c:	8b 45 08             	mov    0x8(%ebp),%eax
c0002e7f:	01 d0                	add    %edx,%eax
c0002e81:	83 c0 0c             	add    $0xc,%eax
/work/x86_os_my/kernel/memory.c:285
}
c0002e84:	5d                   	pop    %ebp
c0002e85:	c3                   	ret    

c0002e86 <block2arena>:
block2arena():
/work/x86_os_my/kernel/memory.c:290

/* 返回内存块mem_block所在的arena地址
 * 取到了虚拟地址mem_block那一整页的地址
 */
static struct arena* block2arena(struct mem_block* b) {
c0002e86:	55                   	push   %ebp
c0002e87:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/kernel/memory.c:291
	return (struct arena*)((uint32_t)b & 0xfffff000);
c0002e89:	8b 45 08             	mov    0x8(%ebp),%eax
c0002e8c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
/work/x86_os_my/kernel/memory.c:292
}
c0002e91:	5d                   	pop    %ebp
c0002e92:	c3                   	ret    

c0002e93 <sys_malloc>:
sys_malloc():
/work/x86_os_my/kernel/memory.c:303
 * 3.内存块地址被返回给用户后，用户可以自由使用此内存块 mem_block
 *   会把此内存块中的 list_elem 型变量 free_elem 覆盖
 *   不过 arena->mem_block_desc->free_list 中的元素已经记录了 mem_block->list_elem 的地址
 *   使用时覆盖的，只是 mem_block 的内容。
 */
void* sys_malloc(uint32_t size) {
c0002e93:	55                   	push   %ebp
c0002e94:	89 e5                	mov    %esp,%ebp
c0002e96:	83 ec 38             	sub    $0x38,%esp
/work/x86_os_my/kernel/memory.c:308
	enum pool_flags PF;
	struct pool* mem_pool;
	uint32_t pool_size;
	struct mem_block_desc* descs;
	struct task_struct* cur_thread = running_thread();
c0002e99:	e8 bc 0e 00 00       	call   c0003d5a <running_thread>
c0002e9e:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/kernel/memory.c:311

	/* 判断用哪个内存池*/
	if (cur_thread->pgdir == NULL) {	// 是内核线程
c0002ea1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0002ea4:	8b 40 34             	mov    0x34(%eax),%eax
c0002ea7:	85 c0                	test   %eax,%eax
c0002ea9:	75 1f                	jne    c0002eca <sys_malloc+0x37>
/work/x86_os_my/kernel/memory.c:312
		PF = PF_KERNEL;
c0002eab:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:313
		pool_size = kernel_pool.pool_size;
c0002eb2:	a1 6c 8b 00 c0       	mov    0xc0008b6c,%eax
c0002eb7:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:314
		mem_pool = &kernel_pool;
c0002eba:	c7 45 f0 60 8b 00 c0 	movl   $0xc0008b60,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:315
		descs = k_block_descs;
c0002ec1:	c7 45 e8 a0 8a 00 c0 	movl   $0xc0008aa0,-0x18(%ebp)
c0002ec8:	eb 1f                	jmp    c0002ee9 <sys_malloc+0x56>
/work/x86_os_my/kernel/memory.c:317
	} else {							// 用户进程pcb中的pgdir（页目录表）会在为其分配页表时创建【create_page_dir】
		PF = PF_USER;
c0002eca:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:318
		pool_size = user_pool.pool_size;
c0002ed1:	a1 6c 8a 00 c0       	mov    0xc0008a6c,%eax
c0002ed6:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:319
		mem_pool = &user_pool;
c0002ed9:	c7 45 f0 60 8a 00 c0 	movl   $0xc0008a60,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:320
		descs = cur_thread->u_block_desc;
c0002ee0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0002ee3:	83 c0 44             	add    $0x44,%eax
c0002ee6:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:324
	}

	/* 若申请的内存不在内存池容量范围内则直接返回NULL */
	if (!(size > 0 && size < pool_size)) {
c0002ee9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0002eed:	74 08                	je     c0002ef7 <sys_malloc+0x64>
/work/x86_os_my/kernel/memory.c:324 (discriminator 1)
c0002eef:	8b 45 08             	mov    0x8(%ebp),%eax
c0002ef2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0002ef5:	72 0a                	jb     c0002f01 <sys_malloc+0x6e>
/work/x86_os_my/kernel/memory.c:325
		return NULL;
c0002ef7:	b8 00 00 00 00       	mov    $0x0,%eax
c0002efc:	e9 c5 02 00 00       	jmp    c00031c6 <sys_malloc+0x333>
/work/x86_os_my/kernel/memory.c:330
	}

	struct arena* a;
	struct mem_block* b;
	lock_acquire(&mem_pool->lock);
c0002f01:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002f04:	83 c0 10             	add    $0x10,%eax
c0002f07:	83 ec 0c             	sub    $0xc,%esp
c0002f0a:	50                   	push   %eax
c0002f0b:	e8 df 18 00 00       	call   c00047ef <lock_acquire>
c0002f10:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:333

	/* 超过最大内存块1024, 就分配页框 */
	if (size > 1024) {
c0002f13:	81 7d 08 00 04 00 00 	cmpl   $0x400,0x8(%ebp)
c0002f1a:	0f 86 94 00 00 00    	jbe    c0002fb4 <sys_malloc+0x121>
/work/x86_os_my/kernel/memory.c:334
		uint32_t page_cnt = DIV_ROUND_UP(size + sizeof(struct arena), PG_SIZE);	// 向上取整需要的页框数
c0002f20:	8b 45 08             	mov    0x8(%ebp),%eax
c0002f23:	05 0b 10 00 00       	add    $0x100b,%eax
c0002f28:	c1 e8 0c             	shr    $0xc,%eax
c0002f2b:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/kernel/memory.c:336

		a = malloc_page(PF, page_cnt);
c0002f2e:	83 ec 08             	sub    $0x8,%esp
c0002f31:	ff 75 d8             	pushl  -0x28(%ebp)
c0002f34:	ff 75 f4             	pushl  -0xc(%ebp)
c0002f37:	e8 1c fc ff ff       	call   c0002b58 <malloc_page>
c0002f3c:	83 c4 10             	add    $0x10,%esp
c0002f3f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/kernel/memory.c:337
		if (a != NULL) {
c0002f42:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0002f46:	74 50                	je     c0002f98 <sys_malloc+0x105>
/work/x86_os_my/kernel/memory.c:338
			memset(a, 0, page_cnt * PG_SIZE);
c0002f48:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0002f4b:	c1 e0 0c             	shl    $0xc,%eax
c0002f4e:	83 ec 04             	sub    $0x4,%esp
c0002f51:	50                   	push   %eax
c0002f52:	6a 00                	push   $0x0
c0002f54:	ff 75 d4             	pushl  -0x2c(%ebp)
c0002f57:	e8 2e 0a 00 00       	call   c000398a <memset>
c0002f5c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:342

			// 【arena结构体初始化，情况1】
			/* 对于分配的大块页框,将desc置为NULL, cnt置为页框数, large置为true */
			a->desc = NULL;
c0002f5f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002f62:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/kernel/memory.c:343
			a->cnt = page_cnt;
c0002f68:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002f6b:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0002f6e:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/kernel/memory.c:344
			a->large = true;
c0002f71:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002f74:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/kernel/memory.c:346

			lock_release(&mem_pool->lock);
c0002f7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002f7e:	83 c0 10             	add    $0x10,%eax
c0002f81:	83 ec 0c             	sub    $0xc,%esp
c0002f84:	50                   	push   %eax
c0002f85:	e8 dc 18 00 00       	call   c0004866 <lock_release>
c0002f8a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:347
			return (void*)(a + 1);	// 跨过arena大小，把剩下的内存返回
c0002f8d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002f90:	83 c0 0c             	add    $0xc,%eax
c0002f93:	e9 2e 02 00 00       	jmp    c00031c6 <sys_malloc+0x333>
/work/x86_os_my/kernel/memory.c:349
		} else {
			lock_release(&mem_pool->lock);
c0002f98:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002f9b:	83 c0 10             	add    $0x10,%eax
c0002f9e:	83 ec 0c             	sub    $0xc,%esp
c0002fa1:	50                   	push   %eax
c0002fa2:	e8 bf 18 00 00       	call   c0004866 <lock_release>
c0002fa7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:350
			return NULL;
c0002faa:	b8 00 00 00 00       	mov    $0x0,%eax
c0002faf:	e9 12 02 00 00       	jmp    c00031c6 <sys_malloc+0x333>
/work/x86_os_my/kernel/memory.c:358
	} else {
	/* 若申请的内存小于等于1024,可在各种规格的mem_block_desc中去适配 */
		uint8_t desc_idx;

		/* 从内存块描述符中匹配合适的内存块规格 */
		for (desc_idx = 0; desc_idx < DESC_CNT; desc_idx++) {
c0002fb4:	c6 45 e7 00          	movb   $0x0,-0x19(%ebp)
c0002fb8:	eb 25                	jmp    c0002fdf <sys_malloc+0x14c>
/work/x86_os_my/kernel/memory.c:359
			if (size <= descs[desc_idx].block_size) {	// 从小往大后,找到后退出
c0002fba:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0002fbe:	89 d0                	mov    %edx,%eax
c0002fc0:	01 c0                	add    %eax,%eax
c0002fc2:	01 d0                	add    %edx,%eax
c0002fc4:	c1 e0 03             	shl    $0x3,%eax
c0002fc7:	89 c2                	mov    %eax,%edx
c0002fc9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002fcc:	01 d0                	add    %edx,%eax
c0002fce:	8b 00                	mov    (%eax),%eax
c0002fd0:	3b 45 08             	cmp    0x8(%ebp),%eax
c0002fd3:	73 12                	jae    c0002fe7 <sys_malloc+0x154>
/work/x86_os_my/kernel/memory.c:358 (discriminator 2)
	} else {
	/* 若申请的内存小于等于1024,可在各种规格的mem_block_desc中去适配 */
		uint8_t desc_idx;

		/* 从内存块描述符中匹配合适的内存块规格 */
		for (desc_idx = 0; desc_idx < DESC_CNT; desc_idx++) {
c0002fd5:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c0002fd9:	83 c0 01             	add    $0x1,%eax
c0002fdc:	88 45 e7             	mov    %al,-0x19(%ebp)
/work/x86_os_my/kernel/memory.c:358 (discriminator 1)
c0002fdf:	80 7d e7 06          	cmpb   $0x6,-0x19(%ebp)
c0002fe3:	76 d5                	jbe    c0002fba <sys_malloc+0x127>
c0002fe5:	eb 01                	jmp    c0002fe8 <sys_malloc+0x155>
/work/x86_os_my/kernel/memory.c:360
			if (size <= descs[desc_idx].block_size) {	// 从小往大后,找到后退出
				break;
c0002fe7:	90                   	nop
/work/x86_os_my/kernel/memory.c:366
			}
		}

		/* 若mem_block_desc的free_list中已经没有可用的mem_block,
		 * 就创建新的arena提供mem_block */
		if (list_empty(&descs[desc_idx].free_list)) {
c0002fe8:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0002fec:	89 d0                	mov    %edx,%eax
c0002fee:	01 c0                	add    %eax,%eax
c0002ff0:	01 d0                	add    %edx,%eax
c0002ff2:	c1 e0 03             	shl    $0x3,%eax
c0002ff5:	89 c2                	mov    %eax,%edx
c0002ff7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002ffa:	01 d0                	add    %edx,%eax
c0002ffc:	83 c0 08             	add    $0x8,%eax
c0002fff:	83 ec 0c             	sub    $0xc,%esp
c0003002:	50                   	push   %eax
c0003003:	e8 f1 14 00 00       	call   c00044f9 <list_empty>
c0003008:	83 c4 10             	add    $0x10,%esp
c000300b:	85 c0                	test   %eax,%eax
c000300d:	0f 84 31 01 00 00    	je     c0003144 <sys_malloc+0x2b1>
/work/x86_os_my/kernel/memory.c:367
			a = malloc_page(PF, 1);       // 分配1页框做为arena
c0003013:	83 ec 08             	sub    $0x8,%esp
c0003016:	6a 01                	push   $0x1
c0003018:	ff 75 f4             	pushl  -0xc(%ebp)
c000301b:	e8 38 fb ff ff       	call   c0002b58 <malloc_page>
c0003020:	83 c4 10             	add    $0x10,%esp
c0003023:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/kernel/memory.c:368
			if (a == NULL) {
c0003026:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c000302a:	75 1c                	jne    c0003048 <sys_malloc+0x1b5>
/work/x86_os_my/kernel/memory.c:369
				lock_release(&mem_pool->lock);
c000302c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000302f:	83 c0 10             	add    $0x10,%eax
c0003032:	83 ec 0c             	sub    $0xc,%esp
c0003035:	50                   	push   %eax
c0003036:	e8 2b 18 00 00       	call   c0004866 <lock_release>
c000303b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:370
				return NULL;
c000303e:	b8 00 00 00 00       	mov    $0x0,%eax
c0003043:	e9 7e 01 00 00       	jmp    c00031c6 <sys_malloc+0x333>
/work/x86_os_my/kernel/memory.c:372
			}
			memset(a, 0, PG_SIZE);
c0003048:	83 ec 04             	sub    $0x4,%esp
c000304b:	68 00 10 00 00       	push   $0x1000
c0003050:	6a 00                	push   $0x0
c0003052:	ff 75 d4             	pushl  -0x2c(%ebp)
c0003055:	e8 30 09 00 00       	call   c000398a <memset>
c000305a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:376

			// 【arena结构体初始化，情况2】
			/* 对于分配的小块内存,将desc置为相应内存块描述符, cnt置为此arena可用的内存块数, large置为false */
			a->desc = &descs[desc_idx];
c000305d:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0003061:	89 d0                	mov    %edx,%eax
c0003063:	01 c0                	add    %eax,%eax
c0003065:	01 d0                	add    %edx,%eax
c0003067:	c1 e0 03             	shl    $0x3,%eax
c000306a:	89 c2                	mov    %eax,%edx
c000306c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000306f:	01 c2                	add    %eax,%edx
c0003071:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0003074:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/kernel/memory.c:377
			a->large = false;
c0003076:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0003079:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
/work/x86_os_my/kernel/memory.c:378
			a->cnt = descs[desc_idx].blocks_per_arena;
c0003080:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0003084:	89 d0                	mov    %edx,%eax
c0003086:	01 c0                	add    %eax,%eax
c0003088:	01 d0                	add    %edx,%eax
c000308a:	c1 e0 03             	shl    $0x3,%eax
c000308d:	89 c2                	mov    %eax,%edx
c000308f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0003092:	01 d0                	add    %edx,%eax
c0003094:	8b 50 04             	mov    0x4(%eax),%edx
c0003097:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000309a:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/kernel/memory.c:380

			enum intr_status old_status = intr_disable();
c000309d:	e8 9d eb ff ff       	call   c0001c3f <intr_disable>
c00030a2:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/kernel/memory.c:383
			/* 开始将arena拆分成内存块,并添加到内存块描述符的free_list中 */
			uint32_t block_idx;
			for (block_idx = 0; block_idx < descs[desc_idx].blocks_per_arena; block_idx++) {
c00030a5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c00030ac:	eb 68                	jmp    c0003116 <sys_malloc+0x283>
/work/x86_os_my/kernel/memory.c:384
				b = arena2block(a, block_idx);
c00030ae:	83 ec 08             	sub    $0x8,%esp
c00030b1:	ff 75 e0             	pushl  -0x20(%ebp)
c00030b4:	ff 75 d4             	pushl  -0x2c(%ebp)
c00030b7:	e8 b0 fd ff ff       	call   c0002e6c <arena2block>
c00030bc:	83 c4 10             	add    $0x10,%esp
c00030bf:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/kernel/memory.c:385
				ASSERT(!elem_find(&a->desc->free_list, &b->free_elem));
c00030c2:	8b 45 cc             	mov    -0x34(%ebp),%eax
c00030c5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c00030c8:	8b 12                	mov    (%edx),%edx
c00030ca:	83 c2 08             	add    $0x8,%edx
c00030cd:	83 ec 08             	sub    $0x8,%esp
c00030d0:	50                   	push   %eax
c00030d1:	52                   	push   %edx
c00030d2:	e8 55 13 00 00       	call   c000442c <elem_find>
c00030d7:	83 c4 10             	add    $0x10,%esp
c00030da:	85 c0                	test   %eax,%eax
c00030dc:	74 1c                	je     c00030fa <sys_malloc+0x267>
/work/x86_os_my/kernel/memory.c:385 (discriminator 1)
c00030de:	68 00 5d 00 c0       	push   $0xc0005d00
c00030e3:	68 c0 5f 00 c0       	push   $0xc0005fc0
c00030e8:	68 81 01 00 00       	push   $0x181
c00030ed:	68 53 5c 00 c0       	push   $0xc0005c53
c00030f2:	e8 7b f4 ff ff       	call   c0002572 <panic_spin>
c00030f7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:386 (discriminator 2)
				list_append(&a->desc->free_list, &b->free_elem);
c00030fa:	8b 45 cc             	mov    -0x34(%ebp),%eax
c00030fd:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0003100:	8b 12                	mov    (%edx),%edx
c0003102:	83 c2 08             	add    $0x8,%edx
c0003105:	83 ec 08             	sub    $0x8,%esp
c0003108:	50                   	push   %eax
c0003109:	52                   	push   %edx
c000310a:	e8 a3 12 00 00       	call   c00043b2 <list_append>
c000310f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:383 (discriminator 2)
			a->cnt = descs[desc_idx].blocks_per_arena;

			enum intr_status old_status = intr_disable();
			/* 开始将arena拆分成内存块,并添加到内存块描述符的free_list中 */
			uint32_t block_idx;
			for (block_idx = 0; block_idx < descs[desc_idx].blocks_per_arena; block_idx++) {
c0003112:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
/work/x86_os_my/kernel/memory.c:383 (discriminator 1)
c0003116:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c000311a:	89 d0                	mov    %edx,%eax
c000311c:	01 c0                	add    %eax,%eax
c000311e:	01 d0                	add    %edx,%eax
c0003120:	c1 e0 03             	shl    $0x3,%eax
c0003123:	89 c2                	mov    %eax,%edx
c0003125:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0003128:	01 d0                	add    %edx,%eax
c000312a:	8b 40 04             	mov    0x4(%eax),%eax
c000312d:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0003130:	0f 87 78 ff ff ff    	ja     c00030ae <sys_malloc+0x21b>
/work/x86_os_my/kernel/memory.c:388
				b = arena2block(a, block_idx);
				ASSERT(!elem_find(&a->desc->free_list, &b->free_elem));
				list_append(&a->desc->free_list, &b->free_elem);
			}
			intr_set_status(old_status);
c0003136:	83 ec 0c             	sub    $0xc,%esp
c0003139:	ff 75 d0             	pushl  -0x30(%ebp)
c000313c:	e8 27 eb ff ff       	call   c0001c68 <intr_set_status>
c0003141:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:392
		}

		/* 开始分配内存块 */
		b = elem2entry(struct mem_block, free_elem, list_pop(&(descs[desc_idx].free_list)));
c0003144:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0003148:	89 d0                	mov    %edx,%eax
c000314a:	01 c0                	add    %eax,%eax
c000314c:	01 d0                	add    %edx,%eax
c000314e:	c1 e0 03             	shl    $0x3,%eax
c0003151:	89 c2                	mov    %eax,%edx
c0003153:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0003156:	01 d0                	add    %edx,%eax
c0003158:	83 c0 08             	add    $0x8,%eax
c000315b:	83 ec 0c             	sub    $0xc,%esp
c000315e:	50                   	push   %eax
c000315f:	e8 a6 12 00 00       	call   c000440a <list_pop>
c0003164:	83 c4 10             	add    $0x10,%esp
c0003167:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/kernel/memory.c:393
		memset(b, 0, descs[desc_idx].block_size);
c000316a:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c000316e:	89 d0                	mov    %edx,%eax
c0003170:	01 c0                	add    %eax,%eax
c0003172:	01 d0                	add    %edx,%eax
c0003174:	c1 e0 03             	shl    $0x3,%eax
c0003177:	89 c2                	mov    %eax,%edx
c0003179:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000317c:	01 d0                	add    %edx,%eax
c000317e:	8b 00                	mov    (%eax),%eax
c0003180:	83 ec 04             	sub    $0x4,%esp
c0003183:	50                   	push   %eax
c0003184:	6a 00                	push   $0x0
c0003186:	ff 75 cc             	pushl  -0x34(%ebp)
c0003189:	e8 fc 07 00 00       	call   c000398a <memset>
c000318e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:395

		a = block2arena(b);	// 获取内存块b所在的arena
c0003191:	83 ec 0c             	sub    $0xc,%esp
c0003194:	ff 75 cc             	pushl  -0x34(%ebp)
c0003197:	e8 ea fc ff ff       	call   c0002e86 <block2arena>
c000319c:	83 c4 10             	add    $0x10,%esp
c000319f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/kernel/memory.c:396
		a->cnt--;			// 将此arena中的空闲内存块数减1
c00031a2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c00031a5:	8b 40 04             	mov    0x4(%eax),%eax
c00031a8:	8d 50 ff             	lea    -0x1(%eax),%edx
c00031ab:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c00031ae:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/kernel/memory.c:398

		lock_release(&mem_pool->lock);
c00031b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00031b4:	83 c0 10             	add    $0x10,%eax
c00031b7:	83 ec 0c             	sub    $0xc,%esp
c00031ba:	50                   	push   %eax
c00031bb:	e8 a6 16 00 00       	call   c0004866 <lock_release>
c00031c0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:399
		return (void*)b;
c00031c3:	8b 45 cc             	mov    -0x34(%ebp),%eax
/work/x86_os_my/kernel/memory.c:401
	}
}
c00031c6:	c9                   	leave  
c00031c7:	c3                   	ret    

c00031c8 <pfree>:
pfree():
/work/x86_os_my/kernel/memory.c:406

/* 将物理地址pg_phy_addr回收到物理内存池
 * 清理物理地址池位图
 */
void pfree(uint32_t pg_phy_addr) {
c00031c8:	55                   	push   %ebp
c00031c9:	89 e5                	mov    %esp,%ebp
c00031cb:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:408
	struct pool* mem_pool;
	uint32_t bit_idx = 0;
c00031ce:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:409
	if (pg_phy_addr >= user_pool.phy_addr_start) {	// 用户物理内存池
c00031d5:	a1 68 8a 00 c0       	mov    0xc0008a68,%eax
c00031da:	3b 45 08             	cmp    0x8(%ebp),%eax
c00031dd:	77 1b                	ja     c00031fa <pfree+0x32>
/work/x86_os_my/kernel/memory.c:410
		mem_pool = &user_pool;
c00031df:	c7 45 f4 60 8a 00 c0 	movl   $0xc0008a60,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:411
		bit_idx = (pg_phy_addr - user_pool.phy_addr_start) / PG_SIZE;
c00031e6:	a1 68 8a 00 c0       	mov    0xc0008a68,%eax
c00031eb:	8b 55 08             	mov    0x8(%ebp),%edx
c00031ee:	29 c2                	sub    %eax,%edx
c00031f0:	89 d0                	mov    %edx,%eax
c00031f2:	c1 e8 0c             	shr    $0xc,%eax
c00031f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00031f8:	eb 19                	jmp    c0003213 <pfree+0x4b>
/work/x86_os_my/kernel/memory.c:413
	} else {	// 内核物理内存池
		mem_pool = &kernel_pool;
c00031fa:	c7 45 f4 60 8b 00 c0 	movl   $0xc0008b60,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:414
		bit_idx = (pg_phy_addr - kernel_pool.phy_addr_start) / PG_SIZE;
c0003201:	a1 68 8b 00 c0       	mov    0xc0008b68,%eax
c0003206:	8b 55 08             	mov    0x8(%ebp),%edx
c0003209:	29 c2                	sub    %eax,%edx
c000320b:	89 d0                	mov    %edx,%eax
c000320d:	c1 e8 0c             	shr    $0xc,%eax
c0003210:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:416
	}
	bitmap_set(&mem_pool->pool_bitmap, bit_idx, 0);	// 将位图中该位清0
c0003213:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003216:	83 ec 04             	sub    $0x4,%esp
c0003219:	6a 00                	push   $0x0
c000321b:	ff 75 f0             	pushl  -0x10(%ebp)
c000321e:	50                   	push   %eax
c000321f:	e8 bc f5 ff ff       	call   c00027e0 <bitmap_set>
c0003224:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:417
}
c0003227:	90                   	nop
c0003228:	c9                   	leave  
c0003229:	c3                   	ret    

c000322a <page_table_pte_remove>:
page_table_pte_remove():
/work/x86_os_my/kernel/memory.c:420

/* 去掉页表中虚拟地址vaddr的映射,只去掉vaddr对应的pte */
static void page_table_pte_remove(uint32_t vaddr) {
c000322a:	55                   	push   %ebp
c000322b:	89 e5                	mov    %esp,%ebp
c000322d:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/memory.c:421
	uint32_t* pte = pte_ptr(vaddr);
c0003230:	8b 45 08             	mov    0x8(%ebp),%eax
c0003233:	50                   	push   %eax
c0003234:	e8 6e f7 ff ff       	call   c00029a7 <pte_ptr>
c0003239:	83 c4 04             	add    $0x4,%esp
c000323c:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/kernel/memory.c:422
	*pte &= ~PG_P_1;	// 将页表项pte的P位置0
c000323f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003242:	8b 00                	mov    (%eax),%eax
c0003244:	83 e0 fe             	and    $0xfffffffe,%eax
c0003247:	89 c2                	mov    %eax,%edx
c0003249:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000324c:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/kernel/memory.c:423
	asm volatile ("invlpg %0"::"m" (vaddr):"memory");	//更新tlb
c000324e:	0f 01 7d 08          	invlpg 0x8(%ebp)
/work/x86_os_my/kernel/memory.c:426
	/*更新 TLB 有两种方式，一是用 invlpg 指令更新单条虚拟地址条目，
	另外一个是重新加载 cr3 寄存器，这将直接清空 TLB，相当于更新整个页表。*/
}
c0003252:	90                   	nop
c0003253:	c9                   	leave  
c0003254:	c3                   	ret    

c0003255 <vaddr_remove>:
vaddr_remove():
/work/x86_os_my/kernel/memory.c:431

/* 在虚拟地址池中释放以_vaddr起始的连续pg_cnt个虚拟页地址
 * 清理虚拟地址池位图
 */
static void vaddr_remove(enum pool_flags pf, void* _vaddr, uint32_t pg_cnt) {
c0003255:	55                   	push   %ebp
c0003256:	89 e5                	mov    %esp,%ebp
c0003258:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:432
	uint32_t bit_idx_start = 0, vaddr = (uint32_t)_vaddr, cnt = 0;
c000325b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0003262:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003265:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0003268:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:434

	if (pf == PF_KERNEL) {	// 内核虚拟内存池
c000326f:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c0003273:	75 3f                	jne    c00032b4 <vaddr_remove+0x5f>
/work/x86_os_my/kernel/memory.c:435
		bit_idx_start = (vaddr - kernel_vaddr.vaddr_start) / PG_SIZE;
c0003275:	a1 50 8b 00 c0       	mov    0xc0008b50,%eax
c000327a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c000327d:	29 c2                	sub    %eax,%edx
c000327f:	89 d0                	mov    %edx,%eax
c0003281:	c1 e8 0c             	shr    $0xc,%eax
c0003284:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:436
		while(cnt < pg_cnt) {
c0003287:	eb 21                	jmp    c00032aa <vaddr_remove+0x55>
/work/x86_os_my/kernel/memory.c:437
			bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
c0003289:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000328c:	8d 50 01             	lea    0x1(%eax),%edx
c000328f:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0003292:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0003295:	01 d0                	add    %edx,%eax
c0003297:	83 ec 04             	sub    $0x4,%esp
c000329a:	6a 00                	push   $0x0
c000329c:	50                   	push   %eax
c000329d:	68 48 8b 00 c0       	push   $0xc0008b48
c00032a2:	e8 39 f5 ff ff       	call   c00027e0 <bitmap_set>
c00032a7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:436
static void vaddr_remove(enum pool_flags pf, void* _vaddr, uint32_t pg_cnt) {
	uint32_t bit_idx_start = 0, vaddr = (uint32_t)_vaddr, cnt = 0;

	if (pf == PF_KERNEL) {	// 内核虚拟内存池
		bit_idx_start = (vaddr - kernel_vaddr.vaddr_start) / PG_SIZE;
		while(cnt < pg_cnt) {
c00032aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00032ad:	3b 45 10             	cmp    0x10(%ebp),%eax
c00032b0:	72 d7                	jb     c0003289 <vaddr_remove+0x34>
/work/x86_os_my/kernel/memory.c:446
		bit_idx_start = (vaddr - cur_thread->userprog_vaddr.vaddr_start) / PG_SIZE;
		while(cnt < pg_cnt) {
			bitmap_set(&cur_thread->userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
		}
	}
}
c00032b2:	eb 48                	jmp    c00032fc <vaddr_remove+0xa7>
/work/x86_os_my/kernel/memory.c:440
		bit_idx_start = (vaddr - kernel_vaddr.vaddr_start) / PG_SIZE;
		while(cnt < pg_cnt) {
			bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
		}
	} else {	// 用户虚拟内存池
		struct task_struct* cur_thread = running_thread();
c00032b4:	e8 a1 0a 00 00       	call   c0003d5a <running_thread>
c00032b9:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:441
		bit_idx_start = (vaddr - cur_thread->userprog_vaddr.vaddr_start) / PG_SIZE;
c00032bc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00032bf:	8b 40 40             	mov    0x40(%eax),%eax
c00032c2:	8b 55 ec             	mov    -0x14(%ebp),%edx
c00032c5:	29 c2                	sub    %eax,%edx
c00032c7:	89 d0                	mov    %edx,%eax
c00032c9:	c1 e8 0c             	shr    $0xc,%eax
c00032cc:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:442
		while(cnt < pg_cnt) {
c00032cf:	eb 23                	jmp    c00032f4 <vaddr_remove+0x9f>
/work/x86_os_my/kernel/memory.c:443
			bitmap_set(&cur_thread->userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
c00032d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00032d4:	8d 50 01             	lea    0x1(%eax),%edx
c00032d7:	89 55 f4             	mov    %edx,-0xc(%ebp)
c00032da:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00032dd:	01 c2                	add    %eax,%edx
c00032df:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00032e2:	83 c0 38             	add    $0x38,%eax
c00032e5:	83 ec 04             	sub    $0x4,%esp
c00032e8:	6a 00                	push   $0x0
c00032ea:	52                   	push   %edx
c00032eb:	50                   	push   %eax
c00032ec:	e8 ef f4 ff ff       	call   c00027e0 <bitmap_set>
c00032f1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:442
			bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
		}
	} else {	// 用户虚拟内存池
		struct task_struct* cur_thread = running_thread();
		bit_idx_start = (vaddr - cur_thread->userprog_vaddr.vaddr_start) / PG_SIZE;
		while(cnt < pg_cnt) {
c00032f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00032f7:	3b 45 10             	cmp    0x10(%ebp),%eax
c00032fa:	72 d5                	jb     c00032d1 <vaddr_remove+0x7c>
/work/x86_os_my/kernel/memory.c:446
			bitmap_set(&cur_thread->userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
		}
	}
}
c00032fc:	90                   	nop
c00032fd:	c9                   	leave  
c00032fe:	c3                   	ret    

c00032ff <mfree_page>:
mfree_page():
/work/x86_os_my/kernel/memory.c:449

/* 释放以虚拟地址vaddr为起始的cnt个物理页框 */
void mfree_page(enum pool_flags pf, void* _vaddr, uint32_t pg_cnt) {
c00032ff:	55                   	push   %ebp
c0003300:	89 e5                	mov    %esp,%ebp
c0003302:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:451
	uint32_t pg_phy_addr;
	uint32_t vaddr = (int32_t)_vaddr, page_cnt = 0;
c0003305:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003308:	89 45 f4             	mov    %eax,-0xc(%ebp)
c000330b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:452
	ASSERT(pg_cnt >=1 && vaddr % PG_SIZE == 0);
c0003312:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0003316:	74 0c                	je     c0003324 <mfree_page+0x25>
/work/x86_os_my/kernel/memory.c:452 (discriminator 1)
c0003318:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000331b:	25 ff 0f 00 00       	and    $0xfff,%eax
c0003320:	85 c0                	test   %eax,%eax
c0003322:	74 1c                	je     c0003340 <mfree_page+0x41>
/work/x86_os_my/kernel/memory.c:452 (discriminator 3)
c0003324:	68 30 5d 00 c0       	push   $0xc0005d30
c0003329:	68 cc 5f 00 c0       	push   $0xc0005fcc
c000332e:	68 c4 01 00 00       	push   $0x1c4
c0003333:	68 53 5c 00 c0       	push   $0xc0005c53
c0003338:	e8 35 f2 ff ff       	call   c0002572 <panic_spin>
c000333d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:453
	pg_phy_addr = addr_v2p(vaddr);
c0003340:	83 ec 0c             	sub    $0xc,%esp
c0003343:	ff 75 f4             	pushl  -0xc(%ebp)
c0003346:	e8 f5 fa ff ff       	call   c0002e40 <addr_v2p>
c000334b:	83 c4 10             	add    $0x10,%esp
c000334e:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:456

	/* 确保待释放的物理内存在低端1M+1k大小的页目录+1k大小的页表地址范围外【内核空间】 */
	ASSERT((pg_phy_addr % PG_SIZE) == 0 && pg_phy_addr >= 0x102000);
c0003351:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0003354:	25 ff 0f 00 00       	and    $0xfff,%eax
c0003359:	85 c0                	test   %eax,%eax
c000335b:	75 09                	jne    c0003366 <mfree_page+0x67>
/work/x86_os_my/kernel/memory.c:456 (discriminator 1)
c000335d:	81 7d ec ff 1f 10 00 	cmpl   $0x101fff,-0x14(%ebp)
c0003364:	77 1c                	ja     c0003382 <mfree_page+0x83>
/work/x86_os_my/kernel/memory.c:456 (discriminator 3)
c0003366:	68 54 5d 00 c0       	push   $0xc0005d54
c000336b:	68 cc 5f 00 c0       	push   $0xc0005fcc
c0003370:	68 c8 01 00 00       	push   $0x1c8
c0003375:	68 53 5c 00 c0       	push   $0xc0005c53
c000337a:	e8 f3 f1 ff ff       	call   c0002572 <panic_spin>
c000337f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:460

	/* 判断pg_phy_addr属于用户物理内存池还是内核物理内存池 */
	/* 位于user_pool内存池 */
	if (pg_phy_addr >= user_pool.phy_addr_start) {
c0003382:	a1 68 8a 00 c0       	mov    0xc0008a68,%eax
c0003387:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c000338a:	0f 87 94 00 00 00    	ja     c0003424 <mfree_page+0x125>
/work/x86_os_my/kernel/memory.c:461
		vaddr -= PG_SIZE;
c0003390:	81 6d f4 00 10 00 00 	subl   $0x1000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:462
		while (page_cnt < pg_cnt) {
c0003397:	eb 6a                	jmp    c0003403 <mfree_page+0x104>
/work/x86_os_my/kernel/memory.c:463
			vaddr += PG_SIZE;
c0003399:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:464
			pg_phy_addr = addr_v2p(vaddr);
c00033a0:	83 ec 0c             	sub    $0xc,%esp
c00033a3:	ff 75 f4             	pushl  -0xc(%ebp)
c00033a6:	e8 95 fa ff ff       	call   c0002e40 <addr_v2p>
c00033ab:	83 c4 10             	add    $0x10,%esp
c00033ae:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:467

			/* 确保物理地址属于用户物理内存池 */
			ASSERT((pg_phy_addr % PG_SIZE) == 0 && pg_phy_addr >= user_pool.phy_addr_start);
c00033b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00033b4:	25 ff 0f 00 00       	and    $0xfff,%eax
c00033b9:	85 c0                	test   %eax,%eax
c00033bb:	75 0a                	jne    c00033c7 <mfree_page+0xc8>
/work/x86_os_my/kernel/memory.c:467 (discriminator 1)
c00033bd:	a1 68 8a 00 c0       	mov    0xc0008a68,%eax
c00033c2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c00033c5:	76 1c                	jbe    c00033e3 <mfree_page+0xe4>
/work/x86_os_my/kernel/memory.c:467 (discriminator 3)
c00033c7:	68 8c 5d 00 c0       	push   $0xc0005d8c
c00033cc:	68 cc 5f 00 c0       	push   $0xc0005fcc
c00033d1:	68 d3 01 00 00       	push   $0x1d3
c00033d6:	68 53 5c 00 c0       	push   $0xc0005c53
c00033db:	e8 92 f1 ff ff       	call   c0002572 <panic_spin>
c00033e0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:470

			/* 先将对应的物理页框归还到内存池 */
			pfree(pg_phy_addr);
c00033e3:	83 ec 0c             	sub    $0xc,%esp
c00033e6:	ff 75 ec             	pushl  -0x14(%ebp)
c00033e9:	e8 da fd ff ff       	call   c00031c8 <pfree>
c00033ee:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:473

			/* 再从页表中清除此虚拟地址所在的页表项pte */
			page_table_pte_remove(vaddr);
c00033f1:	83 ec 0c             	sub    $0xc,%esp
c00033f4:	ff 75 f4             	pushl  -0xc(%ebp)
c00033f7:	e8 2e fe ff ff       	call   c000322a <page_table_pte_remove>
c00033fc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:475

			page_cnt++;
c00033ff:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:462

	/* 判断pg_phy_addr属于用户物理内存池还是内核物理内存池 */
	/* 位于user_pool内存池 */
	if (pg_phy_addr >= user_pool.phy_addr_start) {
		vaddr -= PG_SIZE;
		while (page_cnt < pg_cnt) {
c0003403:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003406:	3b 45 10             	cmp    0x10(%ebp),%eax
c0003409:	72 8e                	jb     c0003399 <mfree_page+0x9a>
/work/x86_os_my/kernel/memory.c:478
			page_table_pte_remove(vaddr);

			page_cnt++;
		}
		/* 清空虚拟地址的位图中的相应位 */
		vaddr_remove(pf, _vaddr, pg_cnt);
c000340b:	83 ec 04             	sub    $0x4,%esp
c000340e:	ff 75 10             	pushl  0x10(%ebp)
c0003411:	ff 75 0c             	pushl  0xc(%ebp)
c0003414:	ff 75 08             	pushl  0x8(%ebp)
c0003417:	e8 39 fe ff ff       	call   c0003255 <vaddr_remove>
c000341c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:502
			page_cnt++;
		}
		/* 清空虚拟地址的位图中的相应位 */
		vaddr_remove(pf, _vaddr, pg_cnt);
	}
}
c000341f:	e9 99 00 00 00       	jmp    c00034bd <mfree_page+0x1be>
/work/x86_os_my/kernel/memory.c:482
		/* 清空虚拟地址的位图中的相应位 */
		vaddr_remove(pf, _vaddr, pg_cnt);

	} else {
		/* 位于kernel_pool内存池 */
		vaddr -= PG_SIZE;
c0003424:	81 6d f4 00 10 00 00 	subl   $0x1000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:483
		while (page_cnt < pg_cnt) {
c000342b:	eb 74                	jmp    c00034a1 <mfree_page+0x1a2>
/work/x86_os_my/kernel/memory.c:484
			vaddr += PG_SIZE;
c000342d:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:485
			pg_phy_addr = addr_v2p(vaddr);
c0003434:	83 ec 0c             	sub    $0xc,%esp
c0003437:	ff 75 f4             	pushl  -0xc(%ebp)
c000343a:	e8 01 fa ff ff       	call   c0002e40 <addr_v2p>
c000343f:	83 c4 10             	add    $0x10,%esp
c0003442:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:488
			
			/* 确保待释放的物理内存只属于内核物理内存池 */
			ASSERT((pg_phy_addr % PG_SIZE) == 0 && pg_phy_addr >= kernel_pool.phy_addr_start && \
c0003445:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0003448:	25 ff 0f 00 00       	and    $0xfff,%eax
c000344d:	85 c0                	test   %eax,%eax
c000344f:	75 14                	jne    c0003465 <mfree_page+0x166>
/work/x86_os_my/kernel/memory.c:488 (discriminator 1)
c0003451:	a1 68 8b 00 c0       	mov    0xc0008b68,%eax
c0003456:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0003459:	77 0a                	ja     c0003465 <mfree_page+0x166>
/work/x86_os_my/kernel/memory.c:488 (discriminator 3)
c000345b:	a1 68 8a 00 c0       	mov    0xc0008a68,%eax
c0003460:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0003463:	77 1c                	ja     c0003481 <mfree_page+0x182>
/work/x86_os_my/kernel/memory.c:488 (discriminator 5)
c0003465:	68 d4 5d 00 c0       	push   $0xc0005dd4
c000346a:	68 cc 5f 00 c0       	push   $0xc0005fcc
c000346f:	68 e9 01 00 00       	push   $0x1e9
c0003474:	68 53 5c 00 c0       	push   $0xc0005c53
c0003479:	e8 f4 f0 ff ff       	call   c0002572 <panic_spin>
c000347e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:492
					pg_phy_addr < user_pool.phy_addr_start);

			/* 先将对应的物理页框归还到内存池 */
			pfree(pg_phy_addr);
c0003481:	83 ec 0c             	sub    $0xc,%esp
c0003484:	ff 75 ec             	pushl  -0x14(%ebp)
c0003487:	e8 3c fd ff ff       	call   c00031c8 <pfree>
c000348c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:495

			/* 再从页表中清除此虚拟地址所在的页表项pte */
			page_table_pte_remove(vaddr);
c000348f:	83 ec 0c             	sub    $0xc,%esp
c0003492:	ff 75 f4             	pushl  -0xc(%ebp)
c0003495:	e8 90 fd ff ff       	call   c000322a <page_table_pte_remove>
c000349a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:497

			page_cnt++;
c000349d:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:483
		vaddr_remove(pf, _vaddr, pg_cnt);

	} else {
		/* 位于kernel_pool内存池 */
		vaddr -= PG_SIZE;
		while (page_cnt < pg_cnt) {
c00034a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00034a4:	3b 45 10             	cmp    0x10(%ebp),%eax
c00034a7:	72 84                	jb     c000342d <mfree_page+0x12e>
/work/x86_os_my/kernel/memory.c:500
			page_table_pte_remove(vaddr);

			page_cnt++;
		}
		/* 清空虚拟地址的位图中的相应位 */
		vaddr_remove(pf, _vaddr, pg_cnt);
c00034a9:	83 ec 04             	sub    $0x4,%esp
c00034ac:	ff 75 10             	pushl  0x10(%ebp)
c00034af:	ff 75 0c             	pushl  0xc(%ebp)
c00034b2:	ff 75 08             	pushl  0x8(%ebp)
c00034b5:	e8 9b fd ff ff       	call   c0003255 <vaddr_remove>
c00034ba:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:502
	}
}
c00034bd:	90                   	nop
c00034be:	c9                   	leave  
c00034bf:	c3                   	ret    

c00034c0 <sys_free>:
sys_free():
/work/x86_os_my/kernel/memory.c:505

/* 回收内存ptr */
void sys_free(void* ptr) {
c00034c0:	55                   	push   %ebp
c00034c1:	89 e5                	mov    %esp,%ebp
c00034c3:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/kernel/memory.c:506
	ASSERT(ptr != NULL);
c00034c6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00034ca:	75 1c                	jne    c00034e8 <sys_free+0x28>
/work/x86_os_my/kernel/memory.c:506 (discriminator 1)
c00034cc:	68 48 5e 00 c0       	push   $0xc0005e48
c00034d1:	68 d8 5f 00 c0       	push   $0xc0005fd8
c00034d6:	68 fa 01 00 00       	push   $0x1fa
c00034db:	68 53 5c 00 c0       	push   $0xc0005c53
c00034e0:	e8 8d f0 ff ff       	call   c0002572 <panic_spin>
c00034e5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:507
	if (ptr != NULL) {
c00034e8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00034ec:	0f 84 b2 01 00 00    	je     c00036a4 <sys_free+0x1e4>
/work/x86_os_my/kernel/memory.c:512
		enum pool_flags PF;
		struct pool* mem_pool;

		/* 判断是线程还是进程 */
		if (running_thread()->pgdir == NULL) {
c00034f2:	e8 63 08 00 00       	call   c0003d5a <running_thread>
c00034f7:	8b 40 34             	mov    0x34(%eax),%eax
c00034fa:	85 c0                	test   %eax,%eax
c00034fc:	75 36                	jne    c0003534 <sys_free+0x74>
/work/x86_os_my/kernel/memory.c:513
			ASSERT((uint32_t)ptr >= K_HEAP_START);
c00034fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0003501:	3d ff ff 0f c0       	cmp    $0xc00fffff,%eax
c0003506:	77 1c                	ja     c0003524 <sys_free+0x64>
/work/x86_os_my/kernel/memory.c:513 (discriminator 1)
c0003508:	68 54 5e 00 c0       	push   $0xc0005e54
c000350d:	68 d8 5f 00 c0       	push   $0xc0005fd8
c0003512:	68 01 02 00 00       	push   $0x201
c0003517:	68 53 5c 00 c0       	push   $0xc0005c53
c000351c:	e8 51 f0 ff ff       	call   c0002572 <panic_spin>
c0003521:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:514
			PF = PF_KERNEL;
c0003524:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:515
			mem_pool = &kernel_pool;
c000352b:	c7 45 f0 60 8b 00 c0 	movl   $0xc0008b60,-0x10(%ebp)
c0003532:	eb 0e                	jmp    c0003542 <sys_free+0x82>
/work/x86_os_my/kernel/memory.c:517
		} else {
			PF = PF_USER;
c0003534:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:518
			mem_pool = &user_pool;
c000353b:	c7 45 f0 60 8a 00 c0 	movl   $0xc0008a60,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:521
		}

		lock_acquire(&mem_pool->lock);
c0003542:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003545:	83 c0 10             	add    $0x10,%eax
c0003548:	83 ec 0c             	sub    $0xc,%esp
c000354b:	50                   	push   %eax
c000354c:	e8 9e 12 00 00       	call   c00047ef <lock_acquire>
c0003551:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:522
		struct mem_block* b = ptr;
c0003554:	8b 45 08             	mov    0x8(%ebp),%eax
c0003557:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:523
		struct arena* a = block2arena(b);			// 把mem_block转换成arena,获取元信息
c000355a:	83 ec 0c             	sub    $0xc,%esp
c000355d:	ff 75 e8             	pushl  -0x18(%ebp)
c0003560:	e8 21 f9 ff ff       	call   c0002e86 <block2arena>
c0003565:	83 c4 10             	add    $0x10,%esp
c0003568:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/kernel/memory.c:524
		ASSERT(a->large == 0 || a->large == 1);
c000356b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000356e:	8b 40 08             	mov    0x8(%eax),%eax
c0003571:	85 c0                	test   %eax,%eax
c0003573:	74 27                	je     c000359c <sys_free+0xdc>
/work/x86_os_my/kernel/memory.c:524 (discriminator 1)
c0003575:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0003578:	8b 40 08             	mov    0x8(%eax),%eax
c000357b:	83 f8 01             	cmp    $0x1,%eax
c000357e:	74 1c                	je     c000359c <sys_free+0xdc>
/work/x86_os_my/kernel/memory.c:524 (discriminator 2)
c0003580:	68 74 5e 00 c0       	push   $0xc0005e74
c0003585:	68 d8 5f 00 c0       	push   $0xc0005fd8
c000358a:	68 0c 02 00 00       	push   $0x20c
c000358f:	68 53 5c 00 c0       	push   $0xc0005c53
c0003594:	e8 d9 ef ff ff       	call   c0002572 <panic_spin>
c0003599:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:525
		if (a->desc == NULL && a->large == true) {	// 大于1024的内存
c000359c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000359f:	8b 00                	mov    (%eax),%eax
c00035a1:	85 c0                	test   %eax,%eax
c00035a3:	75 28                	jne    c00035cd <sys_free+0x10d>
/work/x86_os_my/kernel/memory.c:525 (discriminator 1)
c00035a5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00035a8:	8b 40 08             	mov    0x8(%eax),%eax
c00035ab:	83 f8 01             	cmp    $0x1,%eax
c00035ae:	75 1d                	jne    c00035cd <sys_free+0x10d>
/work/x86_os_my/kernel/memory.c:526
			mfree_page(PF, a, a->cnt);
c00035b0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00035b3:	8b 40 04             	mov    0x4(%eax),%eax
c00035b6:	83 ec 04             	sub    $0x4,%esp
c00035b9:	50                   	push   %eax
c00035ba:	ff 75 e4             	pushl  -0x1c(%ebp)
c00035bd:	ff 75 f4             	pushl  -0xc(%ebp)
c00035c0:	e8 3a fd ff ff       	call   c00032ff <mfree_page>
c00035c5:	83 c4 10             	add    $0x10,%esp
c00035c8:	e9 c5 00 00 00       	jmp    c0003692 <sys_free+0x1d2>
/work/x86_os_my/kernel/memory.c:530
		} else {									// 小于等于1024的内存块
			/* 先将内存块回收到free_list */
			// &b->free_elem == &b
			list_append(&a->desc->free_list, &b->free_elem);
c00035cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00035d0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c00035d3:	8b 12                	mov    (%edx),%edx
c00035d5:	83 c2 08             	add    $0x8,%edx
c00035d8:	83 ec 08             	sub    $0x8,%esp
c00035db:	50                   	push   %eax
c00035dc:	52                   	push   %edx
c00035dd:	e8 d0 0d 00 00       	call   c00043b2 <list_append>
c00035e2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:533

			/* 再判断此arena中的内存块是否都是空闲,如果是就释放arena */
			if (++a->cnt == a->desc->blocks_per_arena) {
c00035e5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00035e8:	8b 40 04             	mov    0x4(%eax),%eax
c00035eb:	8d 50 01             	lea    0x1(%eax),%edx
c00035ee:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00035f1:	89 50 04             	mov    %edx,0x4(%eax)
c00035f4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00035f7:	8b 50 04             	mov    0x4(%eax),%edx
c00035fa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00035fd:	8b 00                	mov    (%eax),%eax
c00035ff:	8b 40 04             	mov    0x4(%eax),%eax
c0003602:	39 c2                	cmp    %eax,%edx
c0003604:	0f 85 88 00 00 00    	jne    c0003692 <sys_free+0x1d2>
/work/x86_os_my/kernel/memory.c:535
				uint32_t block_idx;
				for (block_idx = 0; block_idx < a->desc->blocks_per_arena; block_idx++) {
c000360a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0003611:	eb 5f                	jmp    c0003672 <sys_free+0x1b2>
/work/x86_os_my/kernel/memory.c:536
					struct mem_block*  b = arena2block(a, block_idx);
c0003613:	83 ec 08             	sub    $0x8,%esp
c0003616:	ff 75 ec             	pushl  -0x14(%ebp)
c0003619:	ff 75 e4             	pushl  -0x1c(%ebp)
c000361c:	e8 4b f8 ff ff       	call   c0002e6c <arena2block>
c0003621:	83 c4 10             	add    $0x10,%esp
c0003624:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/kernel/memory.c:537
					ASSERT(elem_find(&a->desc->free_list, &b->free_elem));
c0003627:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000362a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c000362d:	8b 12                	mov    (%edx),%edx
c000362f:	83 c2 08             	add    $0x8,%edx
c0003632:	83 ec 08             	sub    $0x8,%esp
c0003635:	50                   	push   %eax
c0003636:	52                   	push   %edx
c0003637:	e8 f0 0d 00 00       	call   c000442c <elem_find>
c000363c:	83 c4 10             	add    $0x10,%esp
c000363f:	85 c0                	test   %eax,%eax
c0003641:	75 1c                	jne    c000365f <sys_free+0x19f>
/work/x86_os_my/kernel/memory.c:537 (discriminator 1)
c0003643:	68 94 5e 00 c0       	push   $0xc0005e94
c0003648:	68 d8 5f 00 c0       	push   $0xc0005fd8
c000364d:	68 19 02 00 00       	push   $0x219
c0003652:	68 53 5c 00 c0       	push   $0xc0005c53
c0003657:	e8 16 ef ff ff       	call   c0002572 <panic_spin>
c000365c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:538 (discriminator 2)
					list_remove(&b->free_elem);
c000365f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0003662:	83 ec 0c             	sub    $0xc,%esp
c0003665:	50                   	push   %eax
c0003666:	e8 65 0d 00 00       	call   c00043d0 <list_remove>
c000366b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:535 (discriminator 2)
			list_append(&a->desc->free_list, &b->free_elem);

			/* 再判断此arena中的内存块是否都是空闲,如果是就释放arena */
			if (++a->cnt == a->desc->blocks_per_arena) {
				uint32_t block_idx;
				for (block_idx = 0; block_idx < a->desc->blocks_per_arena; block_idx++) {
c000366e:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:535 (discriminator 1)
c0003672:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0003675:	8b 00                	mov    (%eax),%eax
c0003677:	8b 40 04             	mov    0x4(%eax),%eax
c000367a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c000367d:	77 94                	ja     c0003613 <sys_free+0x153>
/work/x86_os_my/kernel/memory.c:540
					struct mem_block*  b = arena2block(a, block_idx);
					ASSERT(elem_find(&a->desc->free_list, &b->free_elem));
					list_remove(&b->free_elem);
				}
				mfree_page(PF, a, 1);
c000367f:	83 ec 04             	sub    $0x4,%esp
c0003682:	6a 01                	push   $0x1
c0003684:	ff 75 e4             	pushl  -0x1c(%ebp)
c0003687:	ff 75 f4             	pushl  -0xc(%ebp)
c000368a:	e8 70 fc ff ff       	call   c00032ff <mfree_page>
c000368f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:543
			}
		}
		lock_release(&mem_pool->lock);
c0003692:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003695:	83 c0 10             	add    $0x10,%eax
c0003698:	83 ec 0c             	sub    $0xc,%esp
c000369b:	50                   	push   %eax
c000369c:	e8 c5 11 00 00       	call   c0004866 <lock_release>
c00036a1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:545
	}
}
c00036a4:	90                   	nop
c00036a5:	c9                   	leave  
c00036a6:	c3                   	ret    

c00036a7 <mem_pool_init>:
mem_pool_init():
/work/x86_os_my/kernel/memory.c:548

/* 初始化内存池 */
static void mem_pool_init(uint32_t all_mem) {
c00036a7:	55                   	push   %ebp
c00036a8:	89 e5                	mov    %esp,%ebp
c00036aa:	83 ec 38             	sub    $0x38,%esp
/work/x86_os_my/kernel/memory.c:549
	put_str("   mem_pool_init start\n");
c00036ad:	83 ec 0c             	sub    $0xc,%esp
c00036b0:	68 c2 5e 00 c0       	push   $0xc0005ec2
c00036b5:	e8 46 ed ff ff       	call   c0002400 <put_str>
c00036ba:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:550
	uint32_t page_table_size = PG_SIZE * 256;		// 页表大小= 1页的页目录表+第0和第768个页目录项指向同一个页表+
c00036bd:	c7 45 f4 00 00 10 00 	movl   $0x100000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:552
													// 第769~1022个页目录项共指向254个页表,共256个页框
	uint32_t used_mem = page_table_size + 0x100000;	// 0x100000为低端1M内存
c00036c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00036c7:	05 00 00 10 00       	add    $0x100000,%eax
c00036cc:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:553
	uint32_t free_mem = all_mem - used_mem;
c00036cf:	8b 45 08             	mov    0x8(%ebp),%eax
c00036d2:	2b 45 f0             	sub    -0x10(%ebp),%eax
c00036d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:554
	uint16_t all_free_pages = free_mem / PG_SIZE;	// 1页为4k,不管总内存是不是4k的倍数,
c00036d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00036db:	c1 e8 0c             	shr    $0xc,%eax
c00036de:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
/work/x86_os_my/kernel/memory.c:556
													// 对于以页为单位的内存分配策略，不足1页的内存不用考虑了。
	uint16_t kernel_free_pages = all_free_pages / 2;
c00036e2:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c00036e6:	66 d1 e8             	shr    %ax
c00036e9:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:557
	uint16_t user_free_pages = all_free_pages - kernel_free_pages;
c00036ed:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c00036f1:	66 2b 45 e8          	sub    -0x18(%ebp),%ax
c00036f5:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
/work/x86_os_my/kernel/memory.c:561

	/* 为简化位图操作，余数不处理，坏处是这样做会丢内存。
	好处是不用做内存的越界检查,因为位图表示的内存少于实际物理内存*/
	uint32_t kbm_length = kernel_free_pages / 8;	// Kernel BitMap的长度,位图中的一位表示一页,以字节为单位
c00036f9:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
c00036fd:	66 c1 e8 03          	shr    $0x3,%ax
c0003701:	0f b7 c0             	movzwl %ax,%eax
c0003704:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/kernel/memory.c:562
	uint32_t ubm_length = user_free_pages / 8;		// User BitMap的长度.
c0003707:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c000370b:	66 c1 e8 03          	shr    $0x3,%ax
c000370f:	0f b7 c0             	movzwl %ax,%eax
c0003712:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/kernel/memory.c:564

	uint32_t kp_start = used_mem;								// Kernel Pool start,内核内存池的起始地址
c0003715:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003718:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/kernel/memory.c:565
	uint32_t up_start = kp_start + kernel_free_pages * PG_SIZE;	// User Pool start,用户内存池的起始地址
c000371b:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
c000371f:	c1 e0 0c             	shl    $0xc,%eax
c0003722:	89 c2                	mov    %eax,%edx
c0003724:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0003727:	01 d0                	add    %edx,%eax
c0003729:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/kernel/memory.c:567

	kernel_pool.phy_addr_start = kp_start;
c000372c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000372f:	a3 68 8b 00 c0       	mov    %eax,0xc0008b68
/work/x86_os_my/kernel/memory.c:568
	user_pool.phy_addr_start   = up_start;
c0003734:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0003737:	a3 68 8a 00 c0       	mov    %eax,0xc0008a68
/work/x86_os_my/kernel/memory.c:570

	kernel_pool.pool_size = kernel_free_pages * PG_SIZE;
c000373c:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
c0003740:	c1 e0 0c             	shl    $0xc,%eax
c0003743:	a3 6c 8b 00 c0       	mov    %eax,0xc0008b6c
/work/x86_os_my/kernel/memory.c:571
	user_pool.pool_size	 = user_free_pages * PG_SIZE;
c0003748:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c000374c:	c1 e0 0c             	shl    $0xc,%eax
c000374f:	a3 6c 8a 00 c0       	mov    %eax,0xc0008a6c
/work/x86_os_my/kernel/memory.c:573

	kernel_pool.pool_bitmap.btmp_bytes_len = kbm_length;
c0003754:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0003757:	a3 60 8b 00 c0       	mov    %eax,0xc0008b60
/work/x86_os_my/kernel/memory.c:574
	user_pool.pool_bitmap.btmp_bytes_len	  = ubm_length;
c000375c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000375f:	a3 60 8a 00 c0       	mov    %eax,0xc0008a60
/work/x86_os_my/kernel/memory.c:583
	*	而我们需要根据总内存大小在运行时，计算出位图的数组需要多少字节。
	*   所以改为指定一块内存来生成位图.
	*   ************************************************/
	// 内核使用的最高地址是0xc009f000,这是主线程的栈地址.(内核的大小预计为70K左右)
	// 32M内存占用的位图是2k.内核内存池的位图先定在MEM_BITMAP_BASE(0xc009a000)处.
	kernel_pool.pool_bitmap.bits = (void*)MEM_BITMAP_BASE;
c0003764:	c7 05 64 8b 00 c0 00 	movl   $0xc009a000,0xc0008b64
c000376b:	a0 09 c0 
/work/x86_os_my/kernel/memory.c:585
	/* 用户内存池的位图紧跟在内核内存池位图之后 */
	user_pool.pool_bitmap.bits = (void*)(MEM_BITMAP_BASE + kbm_length);
c000376e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0003771:	2d 00 60 f6 3f       	sub    $0x3ff66000,%eax
c0003776:	a3 64 8a 00 c0       	mov    %eax,0xc0008a64
/work/x86_os_my/kernel/memory.c:588
	
	/******************** 输出内存池信息 **********************/
	put_str("      kernel_pool_bitmap_start:");put_int((int)kernel_pool.pool_bitmap.bits);
c000377b:	83 ec 0c             	sub    $0xc,%esp
c000377e:	68 dc 5e 00 c0       	push   $0xc0005edc
c0003783:	e8 78 ec ff ff       	call   c0002400 <put_str>
c0003788:	83 c4 10             	add    $0x10,%esp
c000378b:	a1 64 8b 00 c0       	mov    0xc0008b64,%eax
c0003790:	83 ec 0c             	sub    $0xc,%esp
c0003793:	50                   	push   %eax
c0003794:	e8 52 ed ff ff       	call   c00024eb <put_int>
c0003799:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:589
	put_str(" kernel_pool_phy_addr_start:");put_int(kernel_pool.phy_addr_start);
c000379c:	83 ec 0c             	sub    $0xc,%esp
c000379f:	68 fc 5e 00 c0       	push   $0xc0005efc
c00037a4:	e8 57 ec ff ff       	call   c0002400 <put_str>
c00037a9:	83 c4 10             	add    $0x10,%esp
c00037ac:	a1 68 8b 00 c0       	mov    0xc0008b68,%eax
c00037b1:	83 ec 0c             	sub    $0xc,%esp
c00037b4:	50                   	push   %eax
c00037b5:	e8 31 ed ff ff       	call   c00024eb <put_int>
c00037ba:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:590
	put_str("\n");
c00037bd:	83 ec 0c             	sub    $0xc,%esp
c00037c0:	68 19 5f 00 c0       	push   $0xc0005f19
c00037c5:	e8 36 ec ff ff       	call   c0002400 <put_str>
c00037ca:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:591
	put_str("      user_pool_bitmap_start:");put_int((int)user_pool.pool_bitmap.bits);
c00037cd:	83 ec 0c             	sub    $0xc,%esp
c00037d0:	68 1b 5f 00 c0       	push   $0xc0005f1b
c00037d5:	e8 26 ec ff ff       	call   c0002400 <put_str>
c00037da:	83 c4 10             	add    $0x10,%esp
c00037dd:	a1 64 8a 00 c0       	mov    0xc0008a64,%eax
c00037e2:	83 ec 0c             	sub    $0xc,%esp
c00037e5:	50                   	push   %eax
c00037e6:	e8 00 ed ff ff       	call   c00024eb <put_int>
c00037eb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:592
	put_str(" user_pool_phy_addr_start:");put_int(user_pool.phy_addr_start);
c00037ee:	83 ec 0c             	sub    $0xc,%esp
c00037f1:	68 39 5f 00 c0       	push   $0xc0005f39
c00037f6:	e8 05 ec ff ff       	call   c0002400 <put_str>
c00037fb:	83 c4 10             	add    $0x10,%esp
c00037fe:	a1 68 8a 00 c0       	mov    0xc0008a68,%eax
c0003803:	83 ec 0c             	sub    $0xc,%esp
c0003806:	50                   	push   %eax
c0003807:	e8 df ec ff ff       	call   c00024eb <put_int>
c000380c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:593
	put_str("\n");
c000380f:	83 ec 0c             	sub    $0xc,%esp
c0003812:	68 19 5f 00 c0       	push   $0xc0005f19
c0003817:	e8 e4 eb ff ff       	call   c0002400 <put_str>
c000381c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:596

	/* 将位图置0*/
	bitmap_init(&kernel_pool.pool_bitmap);
c000381f:	83 ec 0c             	sub    $0xc,%esp
c0003822:	68 60 8b 00 c0       	push   $0xc0008b60
c0003827:	e8 1c ee ff ff       	call   c0002648 <bitmap_init>
c000382c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:597
	bitmap_init(&user_pool.pool_bitmap);
c000382f:	83 ec 0c             	sub    $0xc,%esp
c0003832:	68 60 8a 00 c0       	push   $0xc0008a60
c0003837:	e8 0c ee ff ff       	call   c0002648 <bitmap_init>
c000383c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:599

	lock_init(&kernel_pool.lock);
c000383f:	83 ec 0c             	sub    $0xc,%esp
c0003842:	68 70 8b 00 c0       	push   $0xc0008b70
c0003847:	e8 c9 0d 00 00       	call   c0004615 <lock_init>
c000384c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:600
	lock_init(&user_pool.lock);
c000384f:	83 ec 0c             	sub    $0xc,%esp
c0003852:	68 70 8a 00 c0       	push   $0xc0008a70
c0003857:	e8 b9 0d 00 00       	call   c0004615 <lock_init>
c000385c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:604
	
	/* 下面初始化内核虚拟地址的位图(bp_len + bits数组),按实际物理内存大小生成数组。*/
	// 用于维护内核堆的虚拟地址,所以要和内核内存池大小一致
	kernel_vaddr.vaddr_bitmap.btmp_bytes_len = kbm_length;
c000385f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0003862:	a3 48 8b 00 c0       	mov    %eax,0xc0008b48
/work/x86_os_my/kernel/memory.c:606
	/* 位图的数组指向一块未使用的内存,目前定位在内核内存池和用户内存池之外*/
	kernel_vaddr.vaddr_bitmap.bits = (void*)(MEM_BITMAP_BASE + kbm_length + ubm_length);
c0003867:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000386a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000386d:	01 d0                	add    %edx,%eax
c000386f:	2d 00 60 f6 3f       	sub    $0x3ff66000,%eax
c0003874:	a3 4c 8b 00 c0       	mov    %eax,0xc0008b4c
/work/x86_os_my/kernel/memory.c:608

	kernel_vaddr.vaddr_start = K_HEAP_START;
c0003879:	c7 05 50 8b 00 c0 00 	movl   $0xc0100000,0xc0008b50
c0003880:	00 10 c0 
/work/x86_os_my/kernel/memory.c:609
	bitmap_init(&kernel_vaddr.vaddr_bitmap);
c0003883:	83 ec 0c             	sub    $0xc,%esp
c0003886:	68 48 8b 00 c0       	push   $0xc0008b48
c000388b:	e8 b8 ed ff ff       	call   c0002648 <bitmap_init>
c0003890:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:610
	put_str("   mem_pool_init done\n");
c0003893:	83 ec 0c             	sub    $0xc,%esp
c0003896:	68 54 5f 00 c0       	push   $0xc0005f54
c000389b:	e8 60 eb ff ff       	call   c0002400 <put_str>
c00038a0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:611
}
c00038a3:	90                   	nop
c00038a4:	c9                   	leave  
c00038a5:	c3                   	ret    

c00038a6 <block_desc_init>:
block_desc_init():
/work/x86_os_my/kernel/memory.c:614

/* 为malloc做准备 */
void block_desc_init(struct mem_block_desc* desc_array) {				   
c00038a6:	55                   	push   %ebp
c00038a7:	89 e5                	mov    %esp,%ebp
c00038a9:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:615
   uint16_t desc_idx, block_size = 16;
c00038ac:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:618

   /* 初始化每个mem_block_desc描述符 */
   for (desc_idx = 0; desc_idx < DESC_CNT; desc_idx++) {
c00038b2:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c00038b8:	eb 75                	jmp    c000392f <block_desc_init+0x89>
/work/x86_os_my/kernel/memory.c:619 (discriminator 3)
      desc_array[desc_idx].block_size = block_size;
c00038ba:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c00038be:	89 d0                	mov    %edx,%eax
c00038c0:	01 c0                	add    %eax,%eax
c00038c2:	01 d0                	add    %edx,%eax
c00038c4:	c1 e0 03             	shl    $0x3,%eax
c00038c7:	89 c2                	mov    %eax,%edx
c00038c9:	8b 45 08             	mov    0x8(%ebp),%eax
c00038cc:	01 c2                	add    %eax,%edx
c00038ce:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c00038d2:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/kernel/memory.c:622 (discriminator 3)

      /* 初始化arena中的内存块数量【注意计算方法】 */
      desc_array[desc_idx].blocks_per_arena = (PG_SIZE - sizeof(struct arena)) / block_size;
c00038d4:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c00038d8:	89 d0                	mov    %edx,%eax
c00038da:	01 c0                	add    %eax,%eax
c00038dc:	01 d0                	add    %edx,%eax
c00038de:	c1 e0 03             	shl    $0x3,%eax
c00038e1:	89 c2                	mov    %eax,%edx
c00038e3:	8b 45 08             	mov    0x8(%ebp),%eax
c00038e6:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
c00038e9:	b8 f4 0f 00 00       	mov    $0xff4,%eax
c00038ee:	ba 00 00 00 00       	mov    $0x0,%edx
c00038f3:	66 f7 75 f4          	divw   -0xc(%ebp)
c00038f7:	0f b7 c0             	movzwl %ax,%eax
c00038fa:	89 41 04             	mov    %eax,0x4(%ecx)
/work/x86_os_my/kernel/memory.c:624 (discriminator 3)

      list_init(&desc_array[desc_idx].free_list);
c00038fd:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0003901:	89 d0                	mov    %edx,%eax
c0003903:	01 c0                	add    %eax,%eax
c0003905:	01 d0                	add    %edx,%eax
c0003907:	c1 e0 03             	shl    $0x3,%eax
c000390a:	89 c2                	mov    %eax,%edx
c000390c:	8b 45 08             	mov    0x8(%ebp),%eax
c000390f:	01 d0                	add    %edx,%eax
c0003911:	83 c0 08             	add    $0x8,%eax
c0003914:	83 ec 0c             	sub    $0xc,%esp
c0003917:	50                   	push   %eax
c0003918:	e8 04 0a 00 00       	call   c0004321 <list_init>
c000391d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:626 (discriminator 3)

      block_size *= 2;		// 下一个规格内存块！
c0003920:	66 d1 65 f4          	shlw   -0xc(%ebp)
/work/x86_os_my/kernel/memory.c:618 (discriminator 3)
/* 为malloc做准备 */
void block_desc_init(struct mem_block_desc* desc_array) {				   
   uint16_t desc_idx, block_size = 16;

   /* 初始化每个mem_block_desc描述符 */
   for (desc_idx = 0; desc_idx < DESC_CNT; desc_idx++) {
c0003924:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0003928:	83 c0 01             	add    $0x1,%eax
c000392b:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
/work/x86_os_my/kernel/memory.c:618 (discriminator 1)
c000392f:	66 83 7d f6 06       	cmpw   $0x6,-0xa(%ebp)
c0003934:	76 84                	jbe    c00038ba <block_desc_init+0x14>
/work/x86_os_my/kernel/memory.c:629
      list_init(&desc_array[desc_idx].free_list);

      block_size *= 2;		// 下一个规格内存块！
	  // 16/32/64/128/256/512/1024 总共 7 种规格
   }
}
c0003936:	90                   	nop
c0003937:	c9                   	leave  
c0003938:	c3                   	ret    

c0003939 <mem_init>:
mem_init():
/work/x86_os_my/kernel/memory.c:632

/* 内存管理部分初始化入口 */
void mem_init() {
c0003939:	55                   	push   %ebp
c000393a:	89 e5                	mov    %esp,%ebp
c000393c:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:633
	put_str("mem_init start\n");
c000393f:	83 ec 0c             	sub    $0xc,%esp
c0003942:	68 6b 5f 00 c0       	push   $0xc0005f6b
c0003947:	e8 b4 ea ff ff       	call   c0002400 <put_str>
c000394c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:634
	uint32_t mem_bytes_total = (*(uint32_t*)(0xb00));	//内存总数在汇编中获取，放到了地址0xb00处。
c000394f:	b8 00 0b 00 00       	mov    $0xb00,%eax
c0003954:	8b 00                	mov    (%eax),%eax
c0003956:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:635
	mem_pool_init(mem_bytes_total);	// 初始化内存池
c0003959:	83 ec 0c             	sub    $0xc,%esp
c000395c:	ff 75 f4             	pushl  -0xc(%ebp)
c000395f:	e8 43 fd ff ff       	call   c00036a7 <mem_pool_init>
c0003964:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:636
	block_desc_init(k_block_descs);	// 初始化mem_block_desc数组descs,为malloc做准备
c0003967:	83 ec 0c             	sub    $0xc,%esp
c000396a:	68 a0 8a 00 c0       	push   $0xc0008aa0
c000396f:	e8 32 ff ff ff       	call   c00038a6 <block_desc_init>
c0003974:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:637
	put_str("mem_init done\n");
c0003977:	83 ec 0c             	sub    $0xc,%esp
c000397a:	68 7b 5f 00 c0       	push   $0xc0005f7b
c000397f:	e8 7c ea ff ff       	call   c0002400 <put_str>
c0003984:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:638
}
c0003987:	90                   	nop
c0003988:	c9                   	leave  
c0003989:	c3                   	ret    

c000398a <memset>:
memset():
/work/x86_os_my/lib/string.c:6
#include "string.h"
#include "global.h"
#include "debug.h"

/* 将dst_起始的size个字节置为value */
void memset(void* dst_, uint8_t value, uint32_t size) {
c000398a:	55                   	push   %ebp
c000398b:	89 e5                	mov    %esp,%ebp
c000398d:	83 ec 28             	sub    $0x28,%esp
c0003990:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003993:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/lib/string.c:7
   ASSERT(dst_ != NULL);
c0003996:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c000399a:	75 19                	jne    c00039b5 <memset+0x2b>
/work/x86_os_my/lib/string.c:7 (discriminator 1)
c000399c:	68 e4 5f 00 c0       	push   $0xc0005fe4
c00039a1:	68 58 60 00 c0       	push   $0xc0006058
c00039a6:	6a 07                	push   $0x7
c00039a8:	68 f1 5f 00 c0       	push   $0xc0005ff1
c00039ad:	e8 c0 eb ff ff       	call   c0002572 <panic_spin>
c00039b2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:8
   uint8_t* dst = (uint8_t*)dst_;
c00039b5:	8b 45 08             	mov    0x8(%ebp),%eax
c00039b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:9
   while (size-- > 0)
c00039bb:	eb 0f                	jmp    c00039cc <memset+0x42>
/work/x86_os_my/lib/string.c:10
      *dst++ = value;
c00039bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00039c0:	8d 50 01             	lea    0x1(%eax),%edx
c00039c3:	89 55 f4             	mov    %edx,-0xc(%ebp)
c00039c6:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c00039ca:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/string.c:9

/* 将dst_起始的size个字节置为value */
void memset(void* dst_, uint8_t value, uint32_t size) {
   ASSERT(dst_ != NULL);
   uint8_t* dst = (uint8_t*)dst_;
   while (size-- > 0)
c00039cc:	8b 45 10             	mov    0x10(%ebp),%eax
c00039cf:	8d 50 ff             	lea    -0x1(%eax),%edx
c00039d2:	89 55 10             	mov    %edx,0x10(%ebp)
c00039d5:	85 c0                	test   %eax,%eax
c00039d7:	75 e4                	jne    c00039bd <memset+0x33>
/work/x86_os_my/lib/string.c:11
      *dst++ = value;
}
c00039d9:	90                   	nop
c00039da:	c9                   	leave  
c00039db:	c3                   	ret    

c00039dc <memcpy>:
memcpy():
/work/x86_os_my/lib/string.c:14

/* 将src_起始的size个字节复制到dst_ */
void memcpy(void* dst_, const void* src_, uint32_t size) {
c00039dc:	55                   	push   %ebp
c00039dd:	89 e5                	mov    %esp,%ebp
c00039df:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/string.c:15
   ASSERT(dst_ != NULL && src_ != NULL);
c00039e2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00039e6:	74 06                	je     c00039ee <memcpy+0x12>
/work/x86_os_my/lib/string.c:15 (discriminator 1)
c00039e8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c00039ec:	75 19                	jne    c0003a07 <memcpy+0x2b>
/work/x86_os_my/lib/string.c:15 (discriminator 3)
c00039ee:	68 fe 5f 00 c0       	push   $0xc0005ffe
c00039f3:	68 60 60 00 c0       	push   $0xc0006060
c00039f8:	6a 0f                	push   $0xf
c00039fa:	68 f1 5f 00 c0       	push   $0xc0005ff1
c00039ff:	e8 6e eb ff ff       	call   c0002572 <panic_spin>
c0003a04:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:16
   uint8_t* dst = dst_;
c0003a07:	8b 45 08             	mov    0x8(%ebp),%eax
c0003a0a:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:17
   const uint8_t* src = src_;
c0003a0d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003a10:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/string.c:18
   while (size-- > 0)
c0003a13:	eb 17                	jmp    c0003a2c <memcpy+0x50>
/work/x86_os_my/lib/string.c:19
      *dst++ = *src++;
c0003a15:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003a18:	8d 50 01             	lea    0x1(%eax),%edx
c0003a1b:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0003a1e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0003a21:	8d 4a 01             	lea    0x1(%edx),%ecx
c0003a24:	89 4d f0             	mov    %ecx,-0x10(%ebp)
c0003a27:	0f b6 12             	movzbl (%edx),%edx
c0003a2a:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/string.c:18
/* 将src_起始的size个字节复制到dst_ */
void memcpy(void* dst_, const void* src_, uint32_t size) {
   ASSERT(dst_ != NULL && src_ != NULL);
   uint8_t* dst = dst_;
   const uint8_t* src = src_;
   while (size-- > 0)
c0003a2c:	8b 45 10             	mov    0x10(%ebp),%eax
c0003a2f:	8d 50 ff             	lea    -0x1(%eax),%edx
c0003a32:	89 55 10             	mov    %edx,0x10(%ebp)
c0003a35:	85 c0                	test   %eax,%eax
c0003a37:	75 dc                	jne    c0003a15 <memcpy+0x39>
/work/x86_os_my/lib/string.c:20
      *dst++ = *src++;
}
c0003a39:	90                   	nop
c0003a3a:	c9                   	leave  
c0003a3b:	c3                   	ret    

c0003a3c <memcmp>:
memcmp():
/work/x86_os_my/lib/string.c:23

/* 连续比较以地址a_和地址b_开头的size个字节,若相等则返回0,若a_大于b_返回+1,否则返回-1 */
int memcmp(const void* a_, const void* b_, uint32_t size) {
c0003a3c:	55                   	push   %ebp
c0003a3d:	89 e5                	mov    %esp,%ebp
c0003a3f:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/string.c:24
   const char* a = a_;
c0003a42:	8b 45 08             	mov    0x8(%ebp),%eax
c0003a45:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:25
   const char* b = b_;
c0003a48:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003a4b:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/string.c:26
   ASSERT(a != NULL || b != NULL);
c0003a4e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0003a52:	75 57                	jne    c0003aab <memcmp+0x6f>
/work/x86_os_my/lib/string.c:26 (discriminator 1)
c0003a54:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0003a58:	75 51                	jne    c0003aab <memcmp+0x6f>
/work/x86_os_my/lib/string.c:26 (discriminator 2)
c0003a5a:	68 1b 60 00 c0       	push   $0xc000601b
c0003a5f:	68 68 60 00 c0       	push   $0xc0006068
c0003a64:	6a 1a                	push   $0x1a
c0003a66:	68 f1 5f 00 c0       	push   $0xc0005ff1
c0003a6b:	e8 02 eb ff ff       	call   c0002572 <panic_spin>
c0003a70:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:27 (discriminator 2)
   while (size-- > 0) {
c0003a73:	eb 36                	jmp    c0003aab <memcmp+0x6f>
/work/x86_os_my/lib/string.c:28
      if(*a != *b) {
c0003a75:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003a78:	0f b6 10             	movzbl (%eax),%edx
c0003a7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003a7e:	0f b6 00             	movzbl (%eax),%eax
c0003a81:	38 c2                	cmp    %al,%dl
c0003a83:	74 1e                	je     c0003aa3 <memcmp+0x67>
/work/x86_os_my/lib/string.c:29
	 return *a > *b ? 1 : -1; 
c0003a85:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003a88:	0f b6 10             	movzbl (%eax),%edx
c0003a8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003a8e:	0f b6 00             	movzbl (%eax),%eax
c0003a91:	38 c2                	cmp    %al,%dl
c0003a93:	7e 07                	jle    c0003a9c <memcmp+0x60>
/work/x86_os_my/lib/string.c:29 (discriminator 1)
c0003a95:	b8 01 00 00 00       	mov    $0x1,%eax
c0003a9a:	eb 21                	jmp    c0003abd <memcmp+0x81>
/work/x86_os_my/lib/string.c:29 (discriminator 2)
c0003a9c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0003aa1:	eb 1a                	jmp    c0003abd <memcmp+0x81>
/work/x86_os_my/lib/string.c:31
      }
      a++;
c0003aa3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/lib/string.c:32
      b++;
c0003aa7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/lib/string.c:27
/* 连续比较以地址a_和地址b_开头的size个字节,若相等则返回0,若a_大于b_返回+1,否则返回-1 */
int memcmp(const void* a_, const void* b_, uint32_t size) {
   const char* a = a_;
   const char* b = b_;
   ASSERT(a != NULL || b != NULL);
   while (size-- > 0) {
c0003aab:	8b 45 10             	mov    0x10(%ebp),%eax
c0003aae:	8d 50 ff             	lea    -0x1(%eax),%edx
c0003ab1:	89 55 10             	mov    %edx,0x10(%ebp)
c0003ab4:	85 c0                	test   %eax,%eax
c0003ab6:	75 bd                	jne    c0003a75 <memcmp+0x39>
/work/x86_os_my/lib/string.c:34
	 return *a > *b ? 1 : -1; 
      }
      a++;
      b++;
   }
   return 0;
c0003ab8:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/lib/string.c:35
}
c0003abd:	c9                   	leave  
c0003abe:	c3                   	ret    

c0003abf <strcpy>:
strcpy():
/work/x86_os_my/lib/string.c:38

/* 将字符串从src_复制到dst_ */
char* strcpy(char* dst_, const char* src_) {
c0003abf:	55                   	push   %ebp
c0003ac0:	89 e5                	mov    %esp,%ebp
c0003ac2:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/string.c:39
   ASSERT(dst_ != NULL && src_ != NULL);
c0003ac5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003ac9:	74 06                	je     c0003ad1 <strcpy+0x12>
/work/x86_os_my/lib/string.c:39 (discriminator 1)
c0003acb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0003acf:	75 19                	jne    c0003aea <strcpy+0x2b>
/work/x86_os_my/lib/string.c:39 (discriminator 3)
c0003ad1:	68 fe 5f 00 c0       	push   $0xc0005ffe
c0003ad6:	68 70 60 00 c0       	push   $0xc0006070
c0003adb:	6a 27                	push   $0x27
c0003add:	68 f1 5f 00 c0       	push   $0xc0005ff1
c0003ae2:	e8 8b ea ff ff       	call   c0002572 <panic_spin>
c0003ae7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:40
   char* r = dst_;		       // 用来返回目的字符串起始地址
c0003aea:	8b 45 08             	mov    0x8(%ebp),%eax
c0003aed:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:41
   while((*dst_++ = *src_++));
c0003af0:	90                   	nop
/work/x86_os_my/lib/string.c:41 (discriminator 1)
c0003af1:	8b 45 08             	mov    0x8(%ebp),%eax
c0003af4:	8d 50 01             	lea    0x1(%eax),%edx
c0003af7:	89 55 08             	mov    %edx,0x8(%ebp)
c0003afa:	8b 55 0c             	mov    0xc(%ebp),%edx
c0003afd:	8d 4a 01             	lea    0x1(%edx),%ecx
c0003b00:	89 4d 0c             	mov    %ecx,0xc(%ebp)
c0003b03:	0f b6 12             	movzbl (%edx),%edx
c0003b06:	88 10                	mov    %dl,(%eax)
c0003b08:	0f b6 00             	movzbl (%eax),%eax
c0003b0b:	84 c0                	test   %al,%al
c0003b0d:	75 e2                	jne    c0003af1 <strcpy+0x32>
/work/x86_os_my/lib/string.c:42
   return r;
c0003b0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/lib/string.c:43
}
c0003b12:	c9                   	leave  
c0003b13:	c3                   	ret    

c0003b14 <strlen>:
strlen():
/work/x86_os_my/lib/string.c:46

/* 返回字符串长度 */
uint32_t strlen(const char* str) {
c0003b14:	55                   	push   %ebp
c0003b15:	89 e5                	mov    %esp,%ebp
c0003b17:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/string.c:47
   ASSERT(str != NULL);
c0003b1a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003b1e:	75 19                	jne    c0003b39 <strlen+0x25>
/work/x86_os_my/lib/string.c:47 (discriminator 1)
c0003b20:	68 32 60 00 c0       	push   $0xc0006032
c0003b25:	68 78 60 00 c0       	push   $0xc0006078
c0003b2a:	6a 2f                	push   $0x2f
c0003b2c:	68 f1 5f 00 c0       	push   $0xc0005ff1
c0003b31:	e8 3c ea ff ff       	call   c0002572 <panic_spin>
c0003b36:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:48
   const char* p = str;
c0003b39:	8b 45 08             	mov    0x8(%ebp),%eax
c0003b3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:49
   while(*p++);
c0003b3f:	90                   	nop
/work/x86_os_my/lib/string.c:49 (discriminator 1)
c0003b40:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003b43:	8d 50 01             	lea    0x1(%eax),%edx
c0003b46:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0003b49:	0f b6 00             	movzbl (%eax),%eax
c0003b4c:	84 c0                	test   %al,%al
c0003b4e:	75 f0                	jne    c0003b40 <strlen+0x2c>
/work/x86_os_my/lib/string.c:50
   return (p - str - 1);
c0003b50:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0003b53:	8b 45 08             	mov    0x8(%ebp),%eax
c0003b56:	29 c2                	sub    %eax,%edx
c0003b58:	89 d0                	mov    %edx,%eax
c0003b5a:	83 e8 01             	sub    $0x1,%eax
/work/x86_os_my/lib/string.c:51
}
c0003b5d:	c9                   	leave  
c0003b5e:	c3                   	ret    

c0003b5f <strcmp>:
strcmp():
/work/x86_os_my/lib/string.c:54

/* 比较两个字符串,若a_中的字符大于b_中的字符返回1,相等时返回0,否则返回-1. */
int8_t strcmp (const char* a, const char* b) {
c0003b5f:	55                   	push   %ebp
c0003b60:	89 e5                	mov    %esp,%ebp
c0003b62:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/lib/string.c:55
   ASSERT(a != NULL && b != NULL);
c0003b65:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003b69:	74 06                	je     c0003b71 <strcmp+0x12>
/work/x86_os_my/lib/string.c:55 (discriminator 1)
c0003b6b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0003b6f:	75 19                	jne    c0003b8a <strcmp+0x2b>
/work/x86_os_my/lib/string.c:55 (discriminator 3)
c0003b71:	68 3e 60 00 c0       	push   $0xc000603e
c0003b76:	68 80 60 00 c0       	push   $0xc0006080
c0003b7b:	6a 37                	push   $0x37
c0003b7d:	68 f1 5f 00 c0       	push   $0xc0005ff1
c0003b82:	e8 eb e9 ff ff       	call   c0002572 <panic_spin>
c0003b87:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:56 (discriminator 1)
   while (*a != 0 && *a == *b) {
c0003b8a:	eb 08                	jmp    c0003b94 <strcmp+0x35>
/work/x86_os_my/lib/string.c:57
      a++;
c0003b8c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
/work/x86_os_my/lib/string.c:58
      b++;
c0003b90:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
/work/x86_os_my/lib/string.c:56
}

/* 比较两个字符串,若a_中的字符大于b_中的字符返回1,相等时返回0,否则返回-1. */
int8_t strcmp (const char* a, const char* b) {
   ASSERT(a != NULL && b != NULL);
   while (*a != 0 && *a == *b) {
c0003b94:	8b 45 08             	mov    0x8(%ebp),%eax
c0003b97:	0f b6 00             	movzbl (%eax),%eax
c0003b9a:	84 c0                	test   %al,%al
c0003b9c:	74 10                	je     c0003bae <strcmp+0x4f>
/work/x86_os_my/lib/string.c:56 (discriminator 1)
c0003b9e:	8b 45 08             	mov    0x8(%ebp),%eax
c0003ba1:	0f b6 10             	movzbl (%eax),%edx
c0003ba4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003ba7:	0f b6 00             	movzbl (%eax),%eax
c0003baa:	38 c2                	cmp    %al,%dl
c0003bac:	74 de                	je     c0003b8c <strcmp+0x2d>
/work/x86_os_my/lib/string.c:62
      a++;
      b++;
   }
/* 如果*a小于*b就返回-1,否则就属于*a大于等于*b的情况。在后面的布尔表达式"*a > *b"中,
 * 若*a大于*b,表达式就等于1,否则就表达式不成立,也就是布尔值为0,恰恰表示*a等于*b */
   return *a < *b ? -1 : *a > *b;
c0003bae:	8b 45 08             	mov    0x8(%ebp),%eax
c0003bb1:	0f b6 10             	movzbl (%eax),%edx
c0003bb4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003bb7:	0f b6 00             	movzbl (%eax),%eax
c0003bba:	38 c2                	cmp    %al,%dl
c0003bbc:	7c 13                	jl     c0003bd1 <strcmp+0x72>
/work/x86_os_my/lib/string.c:62 (discriminator 1)
c0003bbe:	8b 45 08             	mov    0x8(%ebp),%eax
c0003bc1:	0f b6 10             	movzbl (%eax),%edx
c0003bc4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003bc7:	0f b6 00             	movzbl (%eax),%eax
c0003bca:	38 c2                	cmp    %al,%dl
c0003bcc:	0f 9f c0             	setg   %al
c0003bcf:	eb 05                	jmp    c0003bd6 <strcmp+0x77>
/work/x86_os_my/lib/string.c:62 (discriminator 2)
c0003bd1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
/work/x86_os_my/lib/string.c:63 (discriminator 5)
}
c0003bd6:	c9                   	leave  
c0003bd7:	c3                   	ret    

c0003bd8 <strchr>:
strchr():
/work/x86_os_my/lib/string.c:66

/* 从左到右查找字符串str中首次出现字符ch的地址(不是下标,是地址) */
char* strchr(const char* str, const uint8_t ch) {
c0003bd8:	55                   	push   %ebp
c0003bd9:	89 e5                	mov    %esp,%ebp
c0003bdb:	83 ec 18             	sub    $0x18,%esp
c0003bde:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003be1:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/lib/string.c:67
   ASSERT(str != NULL);
c0003be4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003be8:	75 35                	jne    c0003c1f <strchr+0x47>
/work/x86_os_my/lib/string.c:67 (discriminator 1)
c0003bea:	68 32 60 00 c0       	push   $0xc0006032
c0003bef:	68 88 60 00 c0       	push   $0xc0006088
c0003bf4:	6a 43                	push   $0x43
c0003bf6:	68 f1 5f 00 c0       	push   $0xc0005ff1
c0003bfb:	e8 72 e9 ff ff       	call   c0002572 <panic_spin>
c0003c00:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:68 (discriminator 1)
   while (*str != 0) {
c0003c03:	eb 1a                	jmp    c0003c1f <strchr+0x47>
/work/x86_os_my/lib/string.c:69
      if (*str == ch) {
c0003c05:	8b 45 08             	mov    0x8(%ebp),%eax
c0003c08:	0f b6 00             	movzbl (%eax),%eax
c0003c0b:	0f be d0             	movsbl %al,%edx
c0003c0e:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0003c12:	39 c2                	cmp    %eax,%edx
c0003c14:	75 05                	jne    c0003c1b <strchr+0x43>
/work/x86_os_my/lib/string.c:70
	 return (char*)str;	    // 需要强制转化成和返回值类型一样,否则编译器会报const属性丢失,下同.
c0003c16:	8b 45 08             	mov    0x8(%ebp),%eax
c0003c19:	eb 13                	jmp    c0003c2e <strchr+0x56>
/work/x86_os_my/lib/string.c:72
      }
      str++;
c0003c1b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
/work/x86_os_my/lib/string.c:68
}

/* 从左到右查找字符串str中首次出现字符ch的地址(不是下标,是地址) */
char* strchr(const char* str, const uint8_t ch) {
   ASSERT(str != NULL);
   while (*str != 0) {
c0003c1f:	8b 45 08             	mov    0x8(%ebp),%eax
c0003c22:	0f b6 00             	movzbl (%eax),%eax
c0003c25:	84 c0                	test   %al,%al
c0003c27:	75 dc                	jne    c0003c05 <strchr+0x2d>
/work/x86_os_my/lib/string.c:74
      if (*str == ch) {
	 return (char*)str;	    // 需要强制转化成和返回值类型一样,否则编译器会报const属性丢失,下同.
      }
      str++;
   }
   return NULL;
c0003c29:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/lib/string.c:75
}
c0003c2e:	c9                   	leave  
c0003c2f:	c3                   	ret    

c0003c30 <strrchr>:
strrchr():
/work/x86_os_my/lib/string.c:78

/* 从后往前查找字符串str中首次出现字符ch的地址(不是下标,是地址) */
char* strrchr(const char* str, const uint8_t ch) {
c0003c30:	55                   	push   %ebp
c0003c31:	89 e5                	mov    %esp,%ebp
c0003c33:	83 ec 28             	sub    $0x28,%esp
c0003c36:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003c39:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/lib/string.c:79
   ASSERT(str != NULL);
c0003c3c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003c40:	75 19                	jne    c0003c5b <strrchr+0x2b>
/work/x86_os_my/lib/string.c:79 (discriminator 1)
c0003c42:	68 32 60 00 c0       	push   $0xc0006032
c0003c47:	68 90 60 00 c0       	push   $0xc0006090
c0003c4c:	6a 4f                	push   $0x4f
c0003c4e:	68 f1 5f 00 c0       	push   $0xc0005ff1
c0003c53:	e8 1a e9 ff ff       	call   c0002572 <panic_spin>
c0003c58:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:80
   const char* last_char = NULL;
c0003c5b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/string.c:82
   /* 从头到尾遍历一次,若存在ch字符,last_char总是该字符最后一次出现在串中的地址(不是下标,是地址)*/
   while (*str != 0) {
c0003c62:	eb 1b                	jmp    c0003c7f <strrchr+0x4f>
/work/x86_os_my/lib/string.c:83
      if (*str == ch) {
c0003c64:	8b 45 08             	mov    0x8(%ebp),%eax
c0003c67:	0f b6 00             	movzbl (%eax),%eax
c0003c6a:	0f be d0             	movsbl %al,%edx
c0003c6d:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0003c71:	39 c2                	cmp    %eax,%edx
c0003c73:	75 06                	jne    c0003c7b <strrchr+0x4b>
/work/x86_os_my/lib/string.c:84
	 last_char = str;
c0003c75:	8b 45 08             	mov    0x8(%ebp),%eax
c0003c78:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:86
      }
      str++;
c0003c7b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
/work/x86_os_my/lib/string.c:82
/* 从后往前查找字符串str中首次出现字符ch的地址(不是下标,是地址) */
char* strrchr(const char* str, const uint8_t ch) {
   ASSERT(str != NULL);
   const char* last_char = NULL;
   /* 从头到尾遍历一次,若存在ch字符,last_char总是该字符最后一次出现在串中的地址(不是下标,是地址)*/
   while (*str != 0) {
c0003c7f:	8b 45 08             	mov    0x8(%ebp),%eax
c0003c82:	0f b6 00             	movzbl (%eax),%eax
c0003c85:	84 c0                	test   %al,%al
c0003c87:	75 db                	jne    c0003c64 <strrchr+0x34>
/work/x86_os_my/lib/string.c:88
      if (*str == ch) {
	 last_char = str;
      }
      str++;
   }
   return (char*)last_char;
c0003c89:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/lib/string.c:89
}
c0003c8c:	c9                   	leave  
c0003c8d:	c3                   	ret    

c0003c8e <strcat>:
strcat():
/work/x86_os_my/lib/string.c:92

/* 将字符串src_拼接到dst_后,将回拼接的串地址 */
char* strcat(char* dst_, const char* src_) {
c0003c8e:	55                   	push   %ebp
c0003c8f:	89 e5                	mov    %esp,%ebp
c0003c91:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/string.c:93
   ASSERT(dst_ != NULL && src_ != NULL);
c0003c94:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003c98:	74 06                	je     c0003ca0 <strcat+0x12>
/work/x86_os_my/lib/string.c:93 (discriminator 1)
c0003c9a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0003c9e:	75 19                	jne    c0003cb9 <strcat+0x2b>
/work/x86_os_my/lib/string.c:93 (discriminator 3)
c0003ca0:	68 fe 5f 00 c0       	push   $0xc0005ffe
c0003ca5:	68 98 60 00 c0       	push   $0xc0006098
c0003caa:	6a 5d                	push   $0x5d
c0003cac:	68 f1 5f 00 c0       	push   $0xc0005ff1
c0003cb1:	e8 bc e8 ff ff       	call   c0002572 <panic_spin>
c0003cb6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:94
   char* str = dst_;
c0003cb9:	8b 45 08             	mov    0x8(%ebp),%eax
c0003cbc:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:95
   while (*str++);
c0003cbf:	90                   	nop
/work/x86_os_my/lib/string.c:95 (discriminator 1)
c0003cc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003cc3:	8d 50 01             	lea    0x1(%eax),%edx
c0003cc6:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0003cc9:	0f b6 00             	movzbl (%eax),%eax
c0003ccc:	84 c0                	test   %al,%al
c0003cce:	75 f0                	jne    c0003cc0 <strcat+0x32>
/work/x86_os_my/lib/string.c:96
   --str;      // 别看错了，--str是独立的一句，并不是while的循环体
c0003cd0:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
/work/x86_os_my/lib/string.c:97
   while((*str++ = *src_++));	 // 当*str被赋值为0时,此时表达式不成立,正好添加了字符串结尾的0.
c0003cd4:	90                   	nop
/work/x86_os_my/lib/string.c:97 (discriminator 1)
c0003cd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003cd8:	8d 50 01             	lea    0x1(%eax),%edx
c0003cdb:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0003cde:	8b 55 0c             	mov    0xc(%ebp),%edx
c0003ce1:	8d 4a 01             	lea    0x1(%edx),%ecx
c0003ce4:	89 4d 0c             	mov    %ecx,0xc(%ebp)
c0003ce7:	0f b6 12             	movzbl (%edx),%edx
c0003cea:	88 10                	mov    %dl,(%eax)
c0003cec:	0f b6 00             	movzbl (%eax),%eax
c0003cef:	84 c0                	test   %al,%al
c0003cf1:	75 e2                	jne    c0003cd5 <strcat+0x47>
/work/x86_os_my/lib/string.c:98
   return dst_;
c0003cf3:	8b 45 08             	mov    0x8(%ebp),%eax
/work/x86_os_my/lib/string.c:99
}
c0003cf6:	c9                   	leave  
c0003cf7:	c3                   	ret    

c0003cf8 <strchrs>:
strchrs():
/work/x86_os_my/lib/string.c:102

/* 在字符串str中查找指定字符ch出现的次数 */
uint32_t strchrs(const char* str, uint8_t ch) {
c0003cf8:	55                   	push   %ebp
c0003cf9:	89 e5                	mov    %esp,%ebp
c0003cfb:	83 ec 28             	sub    $0x28,%esp
c0003cfe:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003d01:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/lib/string.c:103
   ASSERT(str != NULL);
c0003d04:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003d08:	75 19                	jne    c0003d23 <strchrs+0x2b>
/work/x86_os_my/lib/string.c:103 (discriminator 1)
c0003d0a:	68 32 60 00 c0       	push   $0xc0006032
c0003d0f:	68 a0 60 00 c0       	push   $0xc00060a0
c0003d14:	6a 67                	push   $0x67
c0003d16:	68 f1 5f 00 c0       	push   $0xc0005ff1
c0003d1b:	e8 52 e8 ff ff       	call   c0002572 <panic_spin>
c0003d20:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:104
   uint32_t ch_cnt = 0;
c0003d23:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/string.c:105
   const char* p = str;
c0003d2a:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d2d:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/string.c:106
   while(*p != 0) {
c0003d30:	eb 19                	jmp    c0003d4b <strchrs+0x53>
/work/x86_os_my/lib/string.c:107
      if (*p == ch) {
c0003d32:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003d35:	0f b6 00             	movzbl (%eax),%eax
c0003d38:	0f be d0             	movsbl %al,%edx
c0003d3b:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0003d3f:	39 c2                	cmp    %eax,%edx
c0003d41:	75 04                	jne    c0003d47 <strchrs+0x4f>
/work/x86_os_my/lib/string.c:108
	 ch_cnt++;
c0003d43:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/lib/string.c:110
      }
      p++;
c0003d47:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/lib/string.c:106
/* 在字符串str中查找指定字符ch出现的次数 */
uint32_t strchrs(const char* str, uint8_t ch) {
   ASSERT(str != NULL);
   uint32_t ch_cnt = 0;
   const char* p = str;
   while(*p != 0) {
c0003d4b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003d4e:	0f b6 00             	movzbl (%eax),%eax
c0003d51:	84 c0                	test   %al,%al
c0003d53:	75 dd                	jne    c0003d32 <strchrs+0x3a>
/work/x86_os_my/lib/string.c:112
      if (*p == ch) {
	 ch_cnt++;
      }
      p++;
   }
   return ch_cnt;
c0003d55:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/lib/string.c:113
}
c0003d58:	c9                   	leave  
c0003d59:	c3                   	ret    

c0003d5a <running_thread>:
running_thread():
/work/x86_os_my/thread/thread.c:24

/* 返回线程 PCB 地址。
 * 各个线程所用的 0 级栈都是在自己的 PCB 当中，
 * 取当前栈指针的高 20 位，就是当前运行线程的 PCB（PCB是在自然页的起始地址！）
 */
struct task_struct* running_thread() {
c0003d5a:	55                   	push   %ebp
c0003d5b:	89 e5                	mov    %esp,%ebp
c0003d5d:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/thread/thread.c:26
	uint32_t esp;
	asm ("mov %%esp, %0" : "=g" (esp));	//esp寄存器的值，放入变量esp
c0003d60:	89 e0                	mov    %esp,%eax
c0003d62:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/thread/thread.c:27
	return (struct task_struct*)(esp & 0xfffff000);
c0003d65:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003d68:	25 00 f0 ff ff       	and    $0xfffff000,%eax
/work/x86_os_my/thread/thread.c:28
}
c0003d6d:	c9                   	leave  
c0003d6e:	c3                   	ret    

c0003d6f <kernel_thread>:
kernel_thread():
/work/x86_os_my/thread/thread.c:31

/* 由kernel_thread去执行function(func_arg) */
static void kernel_thread(thread_func* function, void* func_arg) {
c0003d6f:	55                   	push   %ebp
c0003d70:	89 e5                	mov    %esp,%ebp
c0003d72:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:37
	/* 线程的首次运行是由时钟中断处理函数调用任务调度器 schedule 完成的，
	 * 进入中断后处理器会自动关中断，
	 * 因此在执行 function 前要打开中断，否则 kernel_thread 中的 function 在关中断的情况下运行，
	 * 也就是时钟中断被屏蔽了，再也不会调度到新的线程，function 会独享处理器。
	 */
	intr_enable();
c0003d75:	e8 9c de ff ff       	call   c0001c16 <intr_enable>
/work/x86_os_my/thread/thread.c:38
	function(func_arg); 
c0003d7a:	83 ec 0c             	sub    $0xc,%esp
c0003d7d:	ff 75 0c             	pushl  0xc(%ebp)
c0003d80:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d83:	ff d0                	call   *%eax
c0003d85:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:39
}
c0003d88:	90                   	nop
c0003d89:	c9                   	leave  
c0003d8a:	c3                   	ret    

c0003d8b <allocate_pid>:
allocate_pid():
/work/x86_os_my/thread/thread.c:42

/* 分配pid */
static pid_t allocate_pid(void) {
c0003d8b:	55                   	push   %ebp
c0003d8c:	89 e5                	mov    %esp,%ebp
c0003d8e:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:44
   static pid_t next_pid = 0;
   lock_acquire(&pid_lock);
c0003d91:	83 ec 0c             	sub    $0xc,%esp
c0003d94:	68 b0 8b 00 c0       	push   $0xc0008bb0
c0003d99:	e8 51 0a 00 00       	call   c00047ef <lock_acquire>
c0003d9e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:45
   next_pid++;
c0003da1:	0f b7 05 6c 85 00 c0 	movzwl 0xc000856c,%eax
c0003da8:	83 c0 01             	add    $0x1,%eax
c0003dab:	66 a3 6c 85 00 c0    	mov    %ax,0xc000856c
/work/x86_os_my/thread/thread.c:46
   lock_release(&pid_lock);
c0003db1:	83 ec 0c             	sub    $0xc,%esp
c0003db4:	68 b0 8b 00 c0       	push   $0xc0008bb0
c0003db9:	e8 a8 0a 00 00       	call   c0004866 <lock_release>
c0003dbe:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:47
   return next_pid;
c0003dc1:	0f b7 05 6c 85 00 c0 	movzwl 0xc000856c,%eax
/work/x86_os_my/thread/thread.c:48
}
c0003dc8:	c9                   	leave  
c0003dc9:	c3                   	ret    

c0003dca <thread_create>:
thread_create():
/work/x86_os_my/thread/thread.c:51

/* 初始化线程栈结构体 struct thread_stack */
void thread_create(struct task_struct* pthread, thread_func function, void* func_arg) {
c0003dca:	55                   	push   %ebp
c0003dcb:	89 e5                	mov    %esp,%ebp
c0003dcd:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/thread/thread.c:55
	/* 先预留中断使用栈的空间 
	 *（1）将来线程进入中断后，位于 kernel.S 中的中断代码会通过此栈来保存上下文。
	 *（2）将来实现用户进程时，会将用户进程的初始信息放在中断栈中。*/
	pthread->self_kstack -= sizeof(struct intr_stack);
c0003dd0:	8b 45 08             	mov    0x8(%ebp),%eax
c0003dd3:	8b 00                	mov    (%eax),%eax
c0003dd5:	8d 90 d0 fe ff ff    	lea    -0x130(%eax),%edx
c0003ddb:	8b 45 08             	mov    0x8(%ebp),%eax
c0003dde:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/thread/thread.c:58

	/* 再留出线程栈空间（unused_retaddr 所在的栈）*/
	pthread->self_kstack -= sizeof(struct thread_stack);
c0003de0:	8b 45 08             	mov    0x8(%ebp),%eax
c0003de3:	8b 00                	mov    (%eax),%eax
c0003de5:	8d 50 80             	lea    -0x80(%eax),%edx
c0003de8:	8b 45 08             	mov    0x8(%ebp),%eax
c0003deb:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/thread/thread.c:59
	struct thread_stack* kthread_stack = (struct thread_stack*)pthread->self_kstack;
c0003ded:	8b 45 08             	mov    0x8(%ebp),%eax
c0003df0:	8b 00                	mov    (%eax),%eax
c0003df2:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/thread/thread.c:67
	 * kernel_thread 并不是通过 call 指令调用的，而是通过 ret 来执行的，
	 * 因此无法按照正常的函数调用形式传递 kernel_thread 所需要的参数，
	 * 这样调用是不行的： kernel_thread(function, func_arg)，
	 * 只能将参数放在 kernel_thread 所用的栈中，即处理器进入 kernel_thread 函数体时，
	 * 栈顶为返回地址，栈顶+4 为参数function，栈顶+8 为参数func_arg */
	kthread_stack->eip = kernel_thread;
c0003df5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003df8:	c7 40 10 6f 3d 00 c0 	movl   $0xc0003d6f,0x10(%eax)
/work/x86_os_my/thread/thread.c:68
	kthread_stack->function = function;
c0003dff:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003e02:	8b 55 0c             	mov    0xc(%ebp),%edx
c0003e05:	89 50 18             	mov    %edx,0x18(%eax)
/work/x86_os_my/thread/thread.c:69
	kthread_stack->func_arg = func_arg;
c0003e08:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003e0b:	8b 55 10             	mov    0x10(%ebp),%edx
c0003e0e:	89 50 1c             	mov    %edx,0x1c(%eax)
/work/x86_os_my/thread/thread.c:70
	kthread_stack->ebp = kthread_stack->ebx = kthread_stack->esi = kthread_stack->edi = 0;
c0003e11:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003e14:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0003e1b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003e1e:	8b 50 08             	mov    0x8(%eax),%edx
c0003e21:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003e24:	89 50 0c             	mov    %edx,0xc(%eax)
c0003e27:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003e2a:	8b 50 0c             	mov    0xc(%eax),%edx
c0003e2d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003e30:	89 50 04             	mov    %edx,0x4(%eax)
c0003e33:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003e36:	8b 50 04             	mov    0x4(%eax),%edx
c0003e39:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003e3c:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/thread/thread.c:71
}
c0003e3e:	90                   	nop
c0003e3f:	c9                   	leave  
c0003e40:	c3                   	ret    

c0003e41 <init_thread>:
init_thread():
/work/x86_os_my/thread/thread.c:74

/* 初始化线程PCB结构体 struct task_struct */
void init_thread(struct task_struct* pthread, char* name, int prio) {
c0003e41:	55                   	push   %ebp
c0003e42:	89 e5                	mov    %esp,%ebp
c0003e44:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:75
	memset(pthread, 0, sizeof(*pthread));	//清空PCB
c0003e47:	83 ec 04             	sub    $0x4,%esp
c0003e4a:	68 f0 00 00 00       	push   $0xf0
c0003e4f:	6a 00                	push   $0x0
c0003e51:	ff 75 08             	pushl  0x8(%ebp)
c0003e54:	e8 31 fb ff ff       	call   c000398a <memset>
c0003e59:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:76
	pthread->pid = allocate_pid();
c0003e5c:	e8 2a ff ff ff       	call   c0003d8b <allocate_pid>
c0003e61:	89 c2                	mov    %eax,%edx
c0003e63:	8b 45 08             	mov    0x8(%ebp),%eax
c0003e66:	66 89 50 04          	mov    %dx,0x4(%eax)
/work/x86_os_my/thread/thread.c:77
	strcpy(pthread->name, name);
c0003e6a:	8b 45 08             	mov    0x8(%ebp),%eax
c0003e6d:	83 c0 0c             	add    $0xc,%eax
c0003e70:	83 ec 08             	sub    $0x8,%esp
c0003e73:	ff 75 0c             	pushl  0xc(%ebp)
c0003e76:	50                   	push   %eax
c0003e77:	e8 43 fc ff ff       	call   c0003abf <strcpy>
c0003e7c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:79

	if (pthread == g_main_thread) {
c0003e7f:	a1 ac 8b 00 c0       	mov    0xc0008bac,%eax
c0003e84:	39 45 08             	cmp    %eax,0x8(%ebp)
c0003e87:	75 0c                	jne    c0003e95 <init_thread+0x54>
/work/x86_os_my/thread/thread.c:81
		/* 由于把main函数也封装成一个线程,并且它一直是运行的,故将其直接设为TASK_RUNNING */
		pthread->status = TASK_RUNNING;
c0003e89:	8b 45 08             	mov    0x8(%ebp),%eax
c0003e8c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0003e93:	eb 0a                	jmp    c0003e9f <init_thread+0x5e>
/work/x86_os_my/thread/thread.c:83
	} else {
		pthread->status = TASK_READY;
c0003e95:	8b 45 08             	mov    0x8(%ebp),%eax
c0003e98:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/thread/thread.c:89
	}

	/* self_kstack是线程自己在内核态下使用的栈顶地址 
	 * 线程自己在 0 特权级下所用的栈，在线程创建之初，
	 * 它被初始化为线程 PCB 的最顶端，即(uint32_t)pthread + PG_SIZE。*/
	pthread->self_kstack = (uint32_t*)((uint32_t)pthread + PG_SIZE);
c0003e9f:	8b 45 08             	mov    0x8(%ebp),%eax
c0003ea2:	05 00 10 00 00       	add    $0x1000,%eax
c0003ea7:	89 c2                	mov    %eax,%edx
c0003ea9:	8b 45 08             	mov    0x8(%ebp),%eax
c0003eac:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/thread/thread.c:90
	pthread->priority = prio;
c0003eae:	8b 45 10             	mov    0x10(%ebp),%eax
c0003eb1:	89 c2                	mov    %eax,%edx
c0003eb3:	8b 45 08             	mov    0x8(%ebp),%eax
c0003eb6:	88 50 1c             	mov    %dl,0x1c(%eax)
/work/x86_os_my/thread/thread.c:91
	pthread->ticks = prio;
c0003eb9:	8b 45 10             	mov    0x10(%ebp),%eax
c0003ebc:	89 c2                	mov    %eax,%edx
c0003ebe:	8b 45 08             	mov    0x8(%ebp),%eax
c0003ec1:	88 50 1d             	mov    %dl,0x1d(%eax)
/work/x86_os_my/thread/thread.c:92
	pthread->elapsed_ticks = 0;
c0003ec4:	8b 45 08             	mov    0x8(%ebp),%eax
c0003ec7:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
/work/x86_os_my/thread/thread.c:93
	pthread->pgdir = NULL;
c0003ece:	8b 45 08             	mov    0x8(%ebp),%eax
c0003ed1:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
/work/x86_os_my/thread/thread.c:94
	pthread->stack_magic = 0x19870916;	  // 自定义的魔数
c0003ed8:	8b 45 08             	mov    0x8(%ebp),%eax
c0003edb:	c7 80 ec 00 00 00 16 	movl   $0x19870916,0xec(%eax)
c0003ee2:	09 87 19 
/work/x86_os_my/thread/thread.c:95
}
c0003ee5:	90                   	nop
c0003ee6:	c9                   	leave  
c0003ee7:	c3                   	ret    

c0003ee8 <thread_start>:
thread_start():
/work/x86_os_my/thread/thread.c:98

/* 创建线程 */
struct task_struct* thread_start(char* name, int prio, thread_func function, void* func_arg) {
c0003ee8:	55                   	push   %ebp
c0003ee9:	89 e5                	mov    %esp,%ebp
c0003eeb:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:100
	/* pcb都位于内核空间,包括用户进程的pcb也是在内核空间 */
	struct task_struct* thread = get_kernel_pages(1);
c0003eee:	83 ec 0c             	sub    $0xc,%esp
c0003ef1:	6a 01                	push   $0x1
c0003ef3:	e8 22 ed ff ff       	call   c0002c1a <get_kernel_pages>
c0003ef8:	83 c4 10             	add    $0x10,%esp
c0003efb:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:102

	init_thread(thread, name, prio);			//初始化线程PCB
c0003efe:	83 ec 04             	sub    $0x4,%esp
c0003f01:	ff 75 0c             	pushl  0xc(%ebp)
c0003f04:	ff 75 08             	pushl  0x8(%ebp)
c0003f07:	ff 75 f4             	pushl  -0xc(%ebp)
c0003f0a:	e8 32 ff ff ff       	call   c0003e41 <init_thread>
c0003f0f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:103
	thread_create(thread, function, func_arg);	//初始化线程栈结构体
c0003f12:	83 ec 04             	sub    $0x4,%esp
c0003f15:	ff 75 14             	pushl  0x14(%ebp)
c0003f18:	ff 75 10             	pushl  0x10(%ebp)
c0003f1b:	ff 75 f4             	pushl  -0xc(%ebp)
c0003f1e:	e8 a7 fe ff ff       	call   c0003dca <thread_create>
c0003f23:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:105
	
	ASSERT(!elem_find(&thread_ready_list, &thread->general_tag));	// 确保之前不在队列中
c0003f26:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003f29:	83 c0 24             	add    $0x24,%eax
c0003f2c:	83 ec 08             	sub    $0x8,%esp
c0003f2f:	50                   	push   %eax
c0003f30:	68 8c 8b 00 c0       	push   $0xc0008b8c
c0003f35:	e8 f2 04 00 00       	call   c000442c <elem_find>
c0003f3a:	83 c4 10             	add    $0x10,%esp
c0003f3d:	85 c0                	test   %eax,%eax
c0003f3f:	74 19                	je     c0003f5a <thread_start+0x72>
/work/x86_os_my/thread/thread.c:105 (discriminator 1)
c0003f41:	68 a8 60 00 c0       	push   $0xc00060a8
c0003f46:	68 28 63 00 c0       	push   $0xc0006328
c0003f4b:	6a 69                	push   $0x69
c0003f4d:	68 dd 60 00 c0       	push   $0xc00060dd
c0003f52:	e8 1b e6 ff ff       	call   c0002572 <panic_spin>
c0003f57:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:106
	list_append(&thread_ready_list, &thread->general_tag);			// 加入就绪线程队列
c0003f5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003f5d:	83 c0 24             	add    $0x24,%eax
c0003f60:	83 ec 08             	sub    $0x8,%esp
c0003f63:	50                   	push   %eax
c0003f64:	68 8c 8b 00 c0       	push   $0xc0008b8c
c0003f69:	e8 44 04 00 00       	call   c00043b2 <list_append>
c0003f6e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:108

	ASSERT(!elem_find(&thread_all_list, &thread->all_list_tag));
c0003f71:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003f74:	83 c0 2c             	add    $0x2c,%eax
c0003f77:	83 ec 08             	sub    $0x8,%esp
c0003f7a:	50                   	push   %eax
c0003f7b:	68 9c 8b 00 c0       	push   $0xc0008b9c
c0003f80:	e8 a7 04 00 00       	call   c000442c <elem_find>
c0003f85:	83 c4 10             	add    $0x10,%esp
c0003f88:	85 c0                	test   %eax,%eax
c0003f8a:	74 19                	je     c0003fa5 <thread_start+0xbd>
/work/x86_os_my/thread/thread.c:108 (discriminator 1)
c0003f8c:	68 f0 60 00 c0       	push   $0xc00060f0
c0003f91:	68 28 63 00 c0       	push   $0xc0006328
c0003f96:	6a 6c                	push   $0x6c
c0003f98:	68 dd 60 00 c0       	push   $0xc00060dd
c0003f9d:	e8 d0 e5 ff ff       	call   c0002572 <panic_spin>
c0003fa2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:109
	list_append(&thread_all_list, &thread->all_list_tag);			// 加入全部线程队列
c0003fa5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003fa8:	83 c0 2c             	add    $0x2c,%eax
c0003fab:	83 ec 08             	sub    $0x8,%esp
c0003fae:	50                   	push   %eax
c0003faf:	68 9c 8b 00 c0       	push   $0xc0008b9c
c0003fb4:	e8 f9 03 00 00       	call   c00043b2 <list_append>
c0003fb9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:125
	 * 在执行 ret 后，esp 指向的数值被弹岀到 eip。
	 * 处理器会去执行 kernel_thread 函数。
	 * 在执行 kernel_thread 时，处理器以为栈顶是返回地址，其实只是一个假的占位置的变量 unused_retaddr！
	 * 接着会调用函数 function(func_arg) */
	//asm volatile ("movl %0, %%esp; pop %%ebp; pop %%ebx; pop %%edi; pop %%esi; ret" : : "g" (thread->self_kstack) : "memory");
	return thread;
c0003fbc:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/thread/thread.c:126
}
c0003fbf:	c9                   	leave  
c0003fc0:	c3                   	ret    

c0003fc1 <make_main_thread>:
make_main_thread():
/work/x86_os_my/thread/thread.c:130


/* 将kernel中的main函数完善为主线程 */
static void make_main_thread(void) {
c0003fc1:	55                   	push   %ebp
c0003fc2:	89 e5                	mov    %esp,%ebp
c0003fc4:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:135
	/* 因为main线程早已运行,咱们在loader.S中进入内核时的mov esp, 0xc009f000设置了栈顶，也预留了pcb, 地址为0xc009e000
	 * 主线程不需要再为PCB申请页，只需要通过 init_thread 填充PCB成员：名称和优先级等。
	 * 也不需要再通过 thread_create 构造它的线程栈。
	 */
	g_main_thread = running_thread();	//用栈指针的高20位，当做当前线程的PCB
c0003fc7:	e8 8e fd ff ff       	call   c0003d5a <running_thread>
c0003fcc:	a3 ac 8b 00 c0       	mov    %eax,0xc0008bac
/work/x86_os_my/thread/thread.c:136
	init_thread(g_main_thread, "main", 31);
c0003fd1:	a1 ac 8b 00 c0       	mov    0xc0008bac,%eax
c0003fd6:	83 ec 04             	sub    $0x4,%esp
c0003fd9:	6a 1f                	push   $0x1f
c0003fdb:	68 24 61 00 c0       	push   $0xc0006124
c0003fe0:	50                   	push   %eax
c0003fe1:	e8 5b fe ff ff       	call   c0003e41 <init_thread>
c0003fe6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:140

	/* main函数是当前线程,当前线程不在thread_ready_list中,
	 * 所以只将其加在thread_all_list中. */
	ASSERT(!elem_find(&thread_all_list, &g_main_thread->all_list_tag));
c0003fe9:	a1 ac 8b 00 c0       	mov    0xc0008bac,%eax
c0003fee:	83 c0 2c             	add    $0x2c,%eax
c0003ff1:	83 ec 08             	sub    $0x8,%esp
c0003ff4:	50                   	push   %eax
c0003ff5:	68 9c 8b 00 c0       	push   $0xc0008b9c
c0003ffa:	e8 2d 04 00 00       	call   c000442c <elem_find>
c0003fff:	83 c4 10             	add    $0x10,%esp
c0004002:	85 c0                	test   %eax,%eax
c0004004:	74 1c                	je     c0004022 <make_main_thread+0x61>
/work/x86_os_my/thread/thread.c:140 (discriminator 1)
c0004006:	68 2c 61 00 c0       	push   $0xc000612c
c000400b:	68 38 63 00 c0       	push   $0xc0006338
c0004010:	68 8c 00 00 00       	push   $0x8c
c0004015:	68 dd 60 00 c0       	push   $0xc00060dd
c000401a:	e8 53 e5 ff ff       	call   c0002572 <panic_spin>
c000401f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:141
	list_append(&thread_all_list, &g_main_thread->all_list_tag);
c0004022:	a1 ac 8b 00 c0       	mov    0xc0008bac,%eax
c0004027:	83 c0 2c             	add    $0x2c,%eax
c000402a:	83 ec 08             	sub    $0x8,%esp
c000402d:	50                   	push   %eax
c000402e:	68 9c 8b 00 c0       	push   $0xc0008b9c
c0004033:	e8 7a 03 00 00       	call   c00043b2 <list_append>
c0004038:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:142
}
c000403b:	90                   	nop
c000403c:	c9                   	leave  
c000403d:	c3                   	ret    

c000403e <schedule>:
schedule():
/work/x86_os_my/thread/thread.c:152
（2）调度器 schedule。
（3）任务切换函数 switch_to。
*/
/* 实现任务调度 */
void schedule()
{
c000403e:	55                   	push   %ebp
c000403f:	89 e5                	mov    %esp,%ebp
c0004041:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:153
	ASSERT(intr_get_status() == INTR_OFF);
c0004044:	e8 3d dc ff ff       	call   c0001c86 <intr_get_status>
c0004049:	85 c0                	test   %eax,%eax
c000404b:	74 1c                	je     c0004069 <schedule+0x2b>
/work/x86_os_my/thread/thread.c:153 (discriminator 1)
c000404d:	68 67 61 00 c0       	push   $0xc0006167
c0004052:	68 4c 63 00 c0       	push   $0xc000634c
c0004057:	68 99 00 00 00       	push   $0x99
c000405c:	68 dd 60 00 c0       	push   $0xc00060dd
c0004061:	e8 0c e5 ff ff       	call   c0002572 <panic_spin>
c0004066:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:156

	/* 换下 */
	struct task_struct* cur = running_thread(); 
c0004069:	e8 ec fc ff ff       	call   c0003d5a <running_thread>
c000406e:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:157
	if (cur->status == TASK_RUNNING) { // 若此线程只是cpu时间片到了,将其加入到就绪队列尾
c0004071:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004074:	8b 40 08             	mov    0x8(%eax),%eax
c0004077:	85 c0                	test   %eax,%eax
c0004079:	75 65                	jne    c00040e0 <schedule+0xa2>
/work/x86_os_my/thread/thread.c:158
		ASSERT(!elem_find(&thread_ready_list, &cur->general_tag));
c000407b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000407e:	83 c0 24             	add    $0x24,%eax
c0004081:	83 ec 08             	sub    $0x8,%esp
c0004084:	50                   	push   %eax
c0004085:	68 8c 8b 00 c0       	push   $0xc0008b8c
c000408a:	e8 9d 03 00 00       	call   c000442c <elem_find>
c000408f:	83 c4 10             	add    $0x10,%esp
c0004092:	85 c0                	test   %eax,%eax
c0004094:	74 1c                	je     c00040b2 <schedule+0x74>
/work/x86_os_my/thread/thread.c:158 (discriminator 1)
c0004096:	68 88 61 00 c0       	push   $0xc0006188
c000409b:	68 4c 63 00 c0       	push   $0xc000634c
c00040a0:	68 9e 00 00 00       	push   $0x9e
c00040a5:	68 dd 60 00 c0       	push   $0xc00060dd
c00040aa:	e8 c3 e4 ff ff       	call   c0002572 <panic_spin>
c00040af:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:159
		list_append(&thread_ready_list, &cur->general_tag);
c00040b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00040b5:	83 c0 24             	add    $0x24,%eax
c00040b8:	83 ec 08             	sub    $0x8,%esp
c00040bb:	50                   	push   %eax
c00040bc:	68 8c 8b 00 c0       	push   $0xc0008b8c
c00040c1:	e8 ec 02 00 00       	call   c00043b2 <list_append>
c00040c6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:160
		cur->ticks = cur->priority;     // 重新将当前线程的ticks再重置为其priority;
c00040c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00040cc:	0f b6 50 1c          	movzbl 0x1c(%eax),%edx
c00040d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00040d3:	88 50 1d             	mov    %dl,0x1d(%eax)
/work/x86_os_my/thread/thread.c:161
		cur->status = TASK_READY;
c00040d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00040d9:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/thread/thread.c:168
		/* 若此线程需要某事件发生后才能继续上cpu运行,
		不需要将其加入队列,因为当前线程不在就绪队列中。*/
	}

	/* 换上 */
	ASSERT(!list_empty(&thread_ready_list));
c00040e0:	83 ec 0c             	sub    $0xc,%esp
c00040e3:	68 8c 8b 00 c0       	push   $0xc0008b8c
c00040e8:	e8 0c 04 00 00       	call   c00044f9 <list_empty>
c00040ed:	83 c4 10             	add    $0x10,%esp
c00040f0:	85 c0                	test   %eax,%eax
c00040f2:	74 1c                	je     c0004110 <schedule+0xd2>
/work/x86_os_my/thread/thread.c:168 (discriminator 1)
c00040f4:	68 bc 61 00 c0       	push   $0xc00061bc
c00040f9:	68 4c 63 00 c0       	push   $0xc000634c
c00040fe:	68 a8 00 00 00       	push   $0xa8
c0004103:	68 dd 60 00 c0       	push   $0xc00060dd
c0004108:	e8 65 e4 ff ff       	call   c0002572 <panic_spin>
c000410d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:169
	g_thread_tag = NULL;	  // g_thread_tag清空
c0004110:	c7 05 68 85 00 c0 00 	movl   $0x0,0xc0008568
c0004117:	00 00 00 
/work/x86_os_my/thread/thread.c:171
	/* 将thread_ready_list队列中的第一个就绪线程弹出,准备将其调度上cpu. */
	g_thread_tag = list_pop(&thread_ready_list);   
c000411a:	83 ec 0c             	sub    $0xc,%esp
c000411d:	68 8c 8b 00 c0       	push   $0xc0008b8c
c0004122:	e8 e3 02 00 00       	call   c000440a <list_pop>
c0004127:	83 c4 10             	add    $0x10,%esp
c000412a:	a3 68 85 00 c0       	mov    %eax,0xc0008568
/work/x86_os_my/thread/thread.c:172
	struct task_struct* next = elem2entry(struct task_struct, general_tag, g_thread_tag);
c000412f:	a1 68 85 00 c0       	mov    0xc0008568,%eax
c0004134:	83 e8 24             	sub    $0x24,%eax
c0004137:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/thread/thread.c:173
	next->status = TASK_RUNNING;
c000413a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000413d:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
/work/x86_os_my/thread/thread.c:177
	
	/* 1.激活线程或进程的页表,【更新CR3寄存器】
	 * 2.用户进程，更新tss中的esp0为进程的特权级0的栈 */
	process_activate(next);
c0004144:	83 ec 0c             	sub    $0xc,%esp
c0004147:	ff 75 f0             	pushl  -0x10(%ebp)
c000414a:	e8 63 10 00 00       	call   c00051b2 <process_activate>
c000414f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:179

	switch_to(cur, next);
c0004152:	83 ec 08             	sub    $0x8,%esp
c0004155:	ff 75 f0             	pushl  -0x10(%ebp)
c0004158:	ff 75 f4             	pushl  -0xc(%ebp)
c000415b:	e8 c0 03 00 00       	call   c0004520 <switch_to>
c0004160:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:180
}
c0004163:	90                   	nop
c0004164:	c9                   	leave  
c0004165:	c3                   	ret    

c0004166 <thread_block>:
thread_block():
/work/x86_os_my/thread/thread.c:183

/* 当前线程将自己阻塞,标志其状态为stat. */
void thread_block(enum task_status stat) {
c0004166:	55                   	push   %ebp
c0004167:	89 e5                	mov    %esp,%ebp
c0004169:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:185
	/* stat取值为TASK_BLOCKED,TASK_WAITING,TASK_HANGING,也就是只有这三种状态才不会被调度*/
	ASSERT(((stat == TASK_BLOCKED) || (stat == TASK_WAITING) || (stat == TASK_HANGING)));
c000416c:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c0004170:	74 28                	je     c000419a <thread_block+0x34>
/work/x86_os_my/thread/thread.c:185 (discriminator 1)
c0004172:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
c0004176:	74 22                	je     c000419a <thread_block+0x34>
/work/x86_os_my/thread/thread.c:185 (discriminator 2)
c0004178:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
c000417c:	74 1c                	je     c000419a <thread_block+0x34>
/work/x86_os_my/thread/thread.c:185 (discriminator 3)
c000417e:	68 dc 61 00 c0       	push   $0xc00061dc
c0004183:	68 58 63 00 c0       	push   $0xc0006358
c0004188:	68 b9 00 00 00       	push   $0xb9
c000418d:	68 dd 60 00 c0       	push   $0xc00060dd
c0004192:	e8 db e3 ff ff       	call   c0002572 <panic_spin>
c0004197:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:186
	enum intr_status old_status = intr_disable();
c000419a:	e8 a0 da ff ff       	call   c0001c3f <intr_disable>
c000419f:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:188
	
	struct task_struct* cur_thread = running_thread();
c00041a2:	e8 b3 fb ff ff       	call   c0003d5a <running_thread>
c00041a7:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/thread/thread.c:189
	cur_thread->status = stat;
c00041aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00041ad:	8b 55 08             	mov    0x8(%ebp),%edx
c00041b0:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/thread/thread.c:190
	schedule();
c00041b3:	e8 86 fe ff ff       	call   c000403e <schedule>
/work/x86_os_my/thread/thread.c:193
	
	/* 待当前线程被解除阻塞后才继续运行下面的intr_set_status */
	intr_set_status(old_status);
c00041b8:	83 ec 0c             	sub    $0xc,%esp
c00041bb:	ff 75 f4             	pushl  -0xc(%ebp)
c00041be:	e8 a5 da ff ff       	call   c0001c68 <intr_set_status>
c00041c3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:194
}
c00041c6:	90                   	nop
c00041c7:	c9                   	leave  
c00041c8:	c3                   	ret    

c00041c9 <thread_unblock>:
thread_unblock():
/work/x86_os_my/thread/thread.c:197

/* 将线程pthread解除阻塞 */
void thread_unblock(struct task_struct* pthread) {
c00041c9:	55                   	push   %ebp
c00041ca:	89 e5                	mov    %esp,%ebp
c00041cc:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:198
	enum intr_status old_status = intr_disable();
c00041cf:	e8 6b da ff ff       	call   c0001c3f <intr_disable>
c00041d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:199
	ASSERT(((pthread->status == TASK_BLOCKED) || (pthread->status == TASK_WAITING) || (pthread->status == TASK_HANGING)));
c00041d7:	8b 45 08             	mov    0x8(%ebp),%eax
c00041da:	8b 40 08             	mov    0x8(%eax),%eax
c00041dd:	83 f8 02             	cmp    $0x2,%eax
c00041e0:	74 32                	je     c0004214 <thread_unblock+0x4b>
/work/x86_os_my/thread/thread.c:199 (discriminator 1)
c00041e2:	8b 45 08             	mov    0x8(%ebp),%eax
c00041e5:	8b 40 08             	mov    0x8(%eax),%eax
c00041e8:	83 f8 03             	cmp    $0x3,%eax
c00041eb:	74 27                	je     c0004214 <thread_unblock+0x4b>
/work/x86_os_my/thread/thread.c:199 (discriminator 2)
c00041ed:	8b 45 08             	mov    0x8(%ebp),%eax
c00041f0:	8b 40 08             	mov    0x8(%eax),%eax
c00041f3:	83 f8 04             	cmp    $0x4,%eax
c00041f6:	74 1c                	je     c0004214 <thread_unblock+0x4b>
/work/x86_os_my/thread/thread.c:199 (discriminator 3)
c00041f8:	68 2c 62 00 c0       	push   $0xc000622c
c00041fd:	68 68 63 00 c0       	push   $0xc0006368
c0004202:	68 c7 00 00 00       	push   $0xc7
c0004207:	68 dd 60 00 c0       	push   $0xc00060dd
c000420c:	e8 61 e3 ff ff       	call   c0002572 <panic_spin>
c0004211:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:201
	
	if (pthread->status != TASK_READY) {
c0004214:	8b 45 08             	mov    0x8(%ebp),%eax
c0004217:	8b 40 08             	mov    0x8(%eax),%eax
c000421a:	83 f8 01             	cmp    $0x1,%eax
c000421d:	0f 84 8f 00 00 00    	je     c00042b2 <thread_unblock+0xe9>
/work/x86_os_my/thread/thread.c:202
		ASSERT(!elem_find(&thread_ready_list, &pthread->general_tag));
c0004223:	8b 45 08             	mov    0x8(%ebp),%eax
c0004226:	83 c0 24             	add    $0x24,%eax
c0004229:	83 ec 08             	sub    $0x8,%esp
c000422c:	50                   	push   %eax
c000422d:	68 8c 8b 00 c0       	push   $0xc0008b8c
c0004232:	e8 f5 01 00 00       	call   c000442c <elem_find>
c0004237:	83 c4 10             	add    $0x10,%esp
c000423a:	85 c0                	test   %eax,%eax
c000423c:	74 1c                	je     c000425a <thread_unblock+0x91>
/work/x86_os_my/thread/thread.c:202 (discriminator 1)
c000423e:	68 9c 62 00 c0       	push   $0xc000629c
c0004243:	68 68 63 00 c0       	push   $0xc0006368
c0004248:	68 ca 00 00 00       	push   $0xca
c000424d:	68 dd 60 00 c0       	push   $0xc00060dd
c0004252:	e8 1b e3 ff ff       	call   c0002572 <panic_spin>
c0004257:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:203
		if (elem_find(&thread_ready_list, &pthread->general_tag)) {
c000425a:	8b 45 08             	mov    0x8(%ebp),%eax
c000425d:	83 c0 24             	add    $0x24,%eax
c0004260:	83 ec 08             	sub    $0x8,%esp
c0004263:	50                   	push   %eax
c0004264:	68 8c 8b 00 c0       	push   $0xc0008b8c
c0004269:	e8 be 01 00 00       	call   c000442c <elem_find>
c000426e:	83 c4 10             	add    $0x10,%esp
c0004271:	85 c0                	test   %eax,%eax
c0004273:	74 1c                	je     c0004291 <thread_unblock+0xc8>
/work/x86_os_my/thread/thread.c:204
			PANIC("thread_unblock: blocked thread in ready_list\n");
c0004275:	68 d4 62 00 c0       	push   $0xc00062d4
c000427a:	68 68 63 00 c0       	push   $0xc0006368
c000427f:	68 cc 00 00 00       	push   $0xcc
c0004284:	68 dd 60 00 c0       	push   $0xc00060dd
c0004289:	e8 e4 e2 ff ff       	call   c0002572 <panic_spin>
c000428e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:206
		}
		list_push(&thread_ready_list, &pthread->general_tag);	// 放到队列的最前面,使其尽快得到调度
c0004291:	8b 45 08             	mov    0x8(%ebp),%eax
c0004294:	83 c0 24             	add    $0x24,%eax
c0004297:	83 ec 08             	sub    $0x8,%esp
c000429a:	50                   	push   %eax
c000429b:	68 8c 8b 00 c0       	push   $0xc0008b8c
c00042a0:	e8 ef 00 00 00       	call   c0004394 <list_push>
c00042a5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:207
		pthread->status = TASK_READY;
c00042a8:	8b 45 08             	mov    0x8(%ebp),%eax
c00042ab:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/thread/thread.c:210
	}
	
	intr_set_status(old_status);
c00042b2:	83 ec 0c             	sub    $0xc,%esp
c00042b5:	ff 75 f4             	pushl  -0xc(%ebp)
c00042b8:	e8 ab d9 ff ff       	call   c0001c68 <intr_set_status>
c00042bd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:211
}
c00042c0:	90                   	nop
c00042c1:	c9                   	leave  
c00042c2:	c3                   	ret    

c00042c3 <thread_init>:
thread_init():
/work/x86_os_my/thread/thread.c:214

/* 初始化线程环境 */
void thread_init(void) {
c00042c3:	55                   	push   %ebp
c00042c4:	89 e5                	mov    %esp,%ebp
c00042c6:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:215
	put_str("thread_init start\n");
c00042c9:	83 ec 0c             	sub    $0xc,%esp
c00042cc:	68 02 63 00 c0       	push   $0xc0006302
c00042d1:	e8 2a e1 ff ff       	call   c0002400 <put_str>
c00042d6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:216
	list_init(&thread_ready_list);
c00042d9:	83 ec 0c             	sub    $0xc,%esp
c00042dc:	68 8c 8b 00 c0       	push   $0xc0008b8c
c00042e1:	e8 3b 00 00 00       	call   c0004321 <list_init>
c00042e6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:217
	list_init(&thread_all_list);
c00042e9:	83 ec 0c             	sub    $0xc,%esp
c00042ec:	68 9c 8b 00 c0       	push   $0xc0008b9c
c00042f1:	e8 2b 00 00 00       	call   c0004321 <list_init>
c00042f6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:218
	lock_init(&pid_lock);
c00042f9:	83 ec 0c             	sub    $0xc,%esp
c00042fc:	68 b0 8b 00 c0       	push   $0xc0008bb0
c0004301:	e8 0f 03 00 00       	call   c0004615 <lock_init>
c0004306:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:220
	/* 将当前main函数创建为线程 */
	make_main_thread();
c0004309:	e8 b3 fc ff ff       	call   c0003fc1 <make_main_thread>
/work/x86_os_my/thread/thread.c:221
	put_str("thread_init done\n");
c000430e:	83 ec 0c             	sub    $0xc,%esp
c0004311:	68 15 63 00 c0       	push   $0xc0006315
c0004316:	e8 e5 e0 ff ff       	call   c0002400 <put_str>
c000431b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:222
}
c000431e:	90                   	nop
c000431f:	c9                   	leave  
c0004320:	c3                   	ret    

c0004321 <list_init>:
list_init():
/work/x86_os_my/lib/kernel/list.c:6
#include "list.h"
#include "interrupt.h"
/* 注意关中断的操作：临界区 */

/* 初始化双向链表list */
void list_init (struct list* list) {
c0004321:	55                   	push   %ebp
c0004322:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/lib/kernel/list.c:7
	list->head.prev = NULL;
c0004324:	8b 45 08             	mov    0x8(%ebp),%eax
c0004327:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/lib/kernel/list.c:8
	list->head.next = &list->tail;
c000432d:	8b 45 08             	mov    0x8(%ebp),%eax
c0004330:	8d 50 08             	lea    0x8(%eax),%edx
c0004333:	8b 45 08             	mov    0x8(%ebp),%eax
c0004336:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/lib/kernel/list.c:9
	list->tail.prev = &list->head;
c0004339:	8b 55 08             	mov    0x8(%ebp),%edx
c000433c:	8b 45 08             	mov    0x8(%ebp),%eax
c000433f:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/lib/kernel/list.c:10
	list->tail.next = NULL;
c0004342:	8b 45 08             	mov    0x8(%ebp),%eax
c0004345:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
/work/x86_os_my/lib/kernel/list.c:11
}
c000434c:	90                   	nop
c000434d:	5d                   	pop    %ebp
c000434e:	c3                   	ret    

c000434f <list_insert_before>:
list_insert_before():
/work/x86_os_my/lib/kernel/list.c:14

/* 把链表元素elem插入在元素before之前 */
void list_insert_before(struct list_elem* before, struct list_elem* elem) { 
c000434f:	55                   	push   %ebp
c0004350:	89 e5                	mov    %esp,%ebp
c0004352:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/kernel/list.c:15
	enum intr_status old_status = intr_disable();
c0004355:	e8 e5 d8 ff ff       	call   c0001c3f <intr_disable>
c000435a:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/list.c:18

	/* 将before前驱元素的后继元素更新为elem, 暂时使before脱离链表*/ 
	before->prev->next = elem; 
c000435d:	8b 45 08             	mov    0x8(%ebp),%eax
c0004360:	8b 00                	mov    (%eax),%eax
c0004362:	8b 55 0c             	mov    0xc(%ebp),%edx
c0004365:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/lib/kernel/list.c:22

	/* 更新elem自己的前驱结点为before的前驱,
	* 更新elem自己的后继结点为before, 于是before又回到链表 */
	elem->prev = before->prev;
c0004368:	8b 45 08             	mov    0x8(%ebp),%eax
c000436b:	8b 10                	mov    (%eax),%edx
c000436d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0004370:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/lib/kernel/list.c:23
	elem->next = before;
c0004372:	8b 45 0c             	mov    0xc(%ebp),%eax
c0004375:	8b 55 08             	mov    0x8(%ebp),%edx
c0004378:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/lib/kernel/list.c:26

	/* 更新before的前驱结点为elem */
	before->prev = elem;
c000437b:	8b 45 08             	mov    0x8(%ebp),%eax
c000437e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0004381:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/lib/kernel/list.c:28

	intr_set_status(old_status);
c0004383:	83 ec 0c             	sub    $0xc,%esp
c0004386:	ff 75 f4             	pushl  -0xc(%ebp)
c0004389:	e8 da d8 ff ff       	call   c0001c68 <intr_set_status>
c000438e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:29
}
c0004391:	90                   	nop
c0004392:	c9                   	leave  
c0004393:	c3                   	ret    

c0004394 <list_push>:
list_push():
/work/x86_os_my/lib/kernel/list.c:32

/* 添加元素到列表队首,类似栈push操作 */
void list_push(struct list* plist, struct list_elem* elem) {
c0004394:	55                   	push   %ebp
c0004395:	89 e5                	mov    %esp,%ebp
c0004397:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/lib/kernel/list.c:33
	list_insert_before(plist->head.next, elem); // 在队头插入elem
c000439a:	8b 45 08             	mov    0x8(%ebp),%eax
c000439d:	8b 40 04             	mov    0x4(%eax),%eax
c00043a0:	83 ec 08             	sub    $0x8,%esp
c00043a3:	ff 75 0c             	pushl  0xc(%ebp)
c00043a6:	50                   	push   %eax
c00043a7:	e8 a3 ff ff ff       	call   c000434f <list_insert_before>
c00043ac:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:34
}
c00043af:	90                   	nop
c00043b0:	c9                   	leave  
c00043b1:	c3                   	ret    

c00043b2 <list_append>:
list_append():
/work/x86_os_my/lib/kernel/list.c:37

/* 追加元素到链表队尾,类似队列的先进先出操作 */
void list_append(struct list* plist, struct list_elem* elem) {
c00043b2:	55                   	push   %ebp
c00043b3:	89 e5                	mov    %esp,%ebp
c00043b5:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/lib/kernel/list.c:38
	list_insert_before(&plist->tail, elem);     // 在队尾的前面插入
c00043b8:	8b 45 08             	mov    0x8(%ebp),%eax
c00043bb:	83 c0 08             	add    $0x8,%eax
c00043be:	83 ec 08             	sub    $0x8,%esp
c00043c1:	ff 75 0c             	pushl  0xc(%ebp)
c00043c4:	50                   	push   %eax
c00043c5:	e8 85 ff ff ff       	call   c000434f <list_insert_before>
c00043ca:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:39
}
c00043cd:	90                   	nop
c00043ce:	c9                   	leave  
c00043cf:	c3                   	ret    

c00043d0 <list_remove>:
list_remove():
/work/x86_os_my/lib/kernel/list.c:42

/* 使元素pelem脱离链表 */
void list_remove(struct list_elem* pelem) {
c00043d0:	55                   	push   %ebp
c00043d1:	89 e5                	mov    %esp,%ebp
c00043d3:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/kernel/list.c:43
	enum intr_status old_status = intr_disable();
c00043d6:	e8 64 d8 ff ff       	call   c0001c3f <intr_disable>
c00043db:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/list.c:45

	pelem->prev->next = pelem->next;
c00043de:	8b 45 08             	mov    0x8(%ebp),%eax
c00043e1:	8b 00                	mov    (%eax),%eax
c00043e3:	8b 55 08             	mov    0x8(%ebp),%edx
c00043e6:	8b 52 04             	mov    0x4(%edx),%edx
c00043e9:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/lib/kernel/list.c:46
	pelem->next->prev = pelem->prev;
c00043ec:	8b 45 08             	mov    0x8(%ebp),%eax
c00043ef:	8b 40 04             	mov    0x4(%eax),%eax
c00043f2:	8b 55 08             	mov    0x8(%ebp),%edx
c00043f5:	8b 12                	mov    (%edx),%edx
c00043f7:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/lib/kernel/list.c:48

	intr_set_status(old_status);
c00043f9:	83 ec 0c             	sub    $0xc,%esp
c00043fc:	ff 75 f4             	pushl  -0xc(%ebp)
c00043ff:	e8 64 d8 ff ff       	call   c0001c68 <intr_set_status>
c0004404:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:49
}
c0004407:	90                   	nop
c0004408:	c9                   	leave  
c0004409:	c3                   	ret    

c000440a <list_pop>:
list_pop():
/work/x86_os_my/lib/kernel/list.c:52

/* 将链表第一个元素弹出并返回,类似栈的pop操作 */
struct list_elem* list_pop(struct list* plist) {
c000440a:	55                   	push   %ebp
c000440b:	89 e5                	mov    %esp,%ebp
c000440d:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/kernel/list.c:53
	struct list_elem* elem = plist->head.next;
c0004410:	8b 45 08             	mov    0x8(%ebp),%eax
c0004413:	8b 40 04             	mov    0x4(%eax),%eax
c0004416:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/list.c:54
	list_remove(elem);
c0004419:	83 ec 0c             	sub    $0xc,%esp
c000441c:	ff 75 f4             	pushl  -0xc(%ebp)
c000441f:	e8 ac ff ff ff       	call   c00043d0 <list_remove>
c0004424:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:55
	return elem;
c0004427:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/lib/kernel/list.c:56
} 
c000442a:	c9                   	leave  
c000442b:	c3                   	ret    

c000442c <elem_find>:
elem_find():
/work/x86_os_my/lib/kernel/list.c:59

/* 从链表中查找元素obj_elem,成功时返回true,失败时返回false */
bool elem_find(struct list* plist, struct list_elem* obj_elem) {
c000442c:	55                   	push   %ebp
c000442d:	89 e5                	mov    %esp,%ebp
c000442f:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:60
	struct list_elem* elem = plist->head.next;
c0004432:	8b 45 08             	mov    0x8(%ebp),%eax
c0004435:	8b 40 04             	mov    0x4(%eax),%eax
c0004438:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/kernel/list.c:61
	while (elem != &plist->tail) {
c000443b:	eb 18                	jmp    c0004455 <elem_find+0x29>
/work/x86_os_my/lib/kernel/list.c:62
	if (elem == obj_elem) {
c000443d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0004440:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0004443:	75 07                	jne    c000444c <elem_find+0x20>
/work/x86_os_my/lib/kernel/list.c:63
		return true;
c0004445:	b8 01 00 00 00       	mov    $0x1,%eax
c000444a:	eb 19                	jmp    c0004465 <elem_find+0x39>
/work/x86_os_my/lib/kernel/list.c:65
	}
		elem = elem->next;
c000444c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000444f:	8b 40 04             	mov    0x4(%eax),%eax
c0004452:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/kernel/list.c:61
} 

/* 从链表中查找元素obj_elem,成功时返回true,失败时返回false */
bool elem_find(struct list* plist, struct list_elem* obj_elem) {
	struct list_elem* elem = plist->head.next;
	while (elem != &plist->tail) {
c0004455:	8b 45 08             	mov    0x8(%ebp),%eax
c0004458:	83 c0 08             	add    $0x8,%eax
c000445b:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c000445e:	75 dd                	jne    c000443d <elem_find+0x11>
/work/x86_os_my/lib/kernel/list.c:67
	if (elem == obj_elem) {
		return true;
	}
		elem = elem->next;
	}
	return false;
c0004460:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/lib/kernel/list.c:68
}
c0004465:	c9                   	leave  
c0004466:	c3                   	ret    

c0004467 <list_traversal>:
list_traversal():
/work/x86_os_my/lib/kernel/list.c:74

/* 把列表plist中的每个元素elem和arg传给回调函数func,
 * arg给func用来判断elem是否符合条件.
 * 本函数的功能是遍历列表内所有元素,逐个判断是否有符合条件的元素。
 * 找到符合条件的元素返回元素指针,否则返回NULL. */
struct list_elem* list_traversal(struct list* plist, function func, int arg) {
c0004467:	55                   	push   %ebp
c0004468:	89 e5                	mov    %esp,%ebp
c000446a:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/kernel/list.c:75
	struct list_elem* elem = plist->head.next;
c000446d:	8b 45 08             	mov    0x8(%ebp),%eax
c0004470:	8b 40 04             	mov    0x4(%eax),%eax
c0004473:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/list.c:77
	/* 如果队列为空,就必然没有符合条件的结点,故直接返回NULL */
	if (list_empty(plist)) { 
c0004476:	83 ec 0c             	sub    $0xc,%esp
c0004479:	ff 75 08             	pushl  0x8(%ebp)
c000447c:	e8 78 00 00 00       	call   c00044f9 <list_empty>
c0004481:	83 c4 10             	add    $0x10,%esp
c0004484:	85 c0                	test   %eax,%eax
c0004486:	74 2a                	je     c00044b2 <list_traversal+0x4b>
/work/x86_os_my/lib/kernel/list.c:78
		return NULL;
c0004488:	b8 00 00 00 00       	mov    $0x0,%eax
c000448d:	eb 33                	jmp    c00044c2 <list_traversal+0x5b>
/work/x86_os_my/lib/kernel/list.c:82
	}

	while (elem != &plist->tail) {
	if (func(elem, arg)) {		  // func返回ture则认为该元素在回调函数中符合条件,命中,故停止继续遍历
c000448f:	83 ec 08             	sub    $0x8,%esp
c0004492:	ff 75 10             	pushl  0x10(%ebp)
c0004495:	ff 75 f4             	pushl  -0xc(%ebp)
c0004498:	8b 45 0c             	mov    0xc(%ebp),%eax
c000449b:	ff d0                	call   *%eax
c000449d:	83 c4 10             	add    $0x10,%esp
c00044a0:	85 c0                	test   %eax,%eax
c00044a2:	74 05                	je     c00044a9 <list_traversal+0x42>
/work/x86_os_my/lib/kernel/list.c:83
		return elem;
c00044a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00044a7:	eb 19                	jmp    c00044c2 <list_traversal+0x5b>
/work/x86_os_my/lib/kernel/list.c:85
	}					  // 若回调函数func返回true,则继续遍历
		elem = elem->next;	       
c00044a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00044ac:	8b 40 04             	mov    0x4(%eax),%eax
c00044af:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/list.c:81
	/* 如果队列为空,就必然没有符合条件的结点,故直接返回NULL */
	if (list_empty(plist)) { 
		return NULL;
	}

	while (elem != &plist->tail) {
c00044b2:	8b 45 08             	mov    0x8(%ebp),%eax
c00044b5:	83 c0 08             	add    $0x8,%eax
c00044b8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c00044bb:	75 d2                	jne    c000448f <list_traversal+0x28>
/work/x86_os_my/lib/kernel/list.c:87
	if (func(elem, arg)) {		  // func返回ture则认为该元素在回调函数中符合条件,命中,故停止继续遍历
		return elem;
	}					  // 若回调函数func返回true,则继续遍历
		elem = elem->next;	       
	}
	return NULL;
c00044bd:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/lib/kernel/list.c:88
}
c00044c2:	c9                   	leave  
c00044c3:	c3                   	ret    

c00044c4 <list_len>:
list_len():
/work/x86_os_my/lib/kernel/list.c:91

/* 返回链表长度 */
uint32_t list_len(struct list* plist) {
c00044c4:	55                   	push   %ebp
c00044c5:	89 e5                	mov    %esp,%ebp
c00044c7:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:92
	struct list_elem* elem = plist->head.next;
c00044ca:	8b 45 08             	mov    0x8(%ebp),%eax
c00044cd:	8b 40 04             	mov    0x4(%eax),%eax
c00044d0:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/kernel/list.c:93
	uint32_t length = 0;
c00044d3:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
/work/x86_os_my/lib/kernel/list.c:94
	while (elem != &plist->tail) {
c00044da:	eb 0d                	jmp    c00044e9 <list_len+0x25>
/work/x86_os_my/lib/kernel/list.c:95
		length++; 
c00044dc:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
/work/x86_os_my/lib/kernel/list.c:96
		elem = elem->next;
c00044e0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c00044e3:	8b 40 04             	mov    0x4(%eax),%eax
c00044e6:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/kernel/list.c:94

/* 返回链表长度 */
uint32_t list_len(struct list* plist) {
	struct list_elem* elem = plist->head.next;
	uint32_t length = 0;
	while (elem != &plist->tail) {
c00044e9:	8b 45 08             	mov    0x8(%ebp),%eax
c00044ec:	83 c0 08             	add    $0x8,%eax
c00044ef:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c00044f2:	75 e8                	jne    c00044dc <list_len+0x18>
/work/x86_os_my/lib/kernel/list.c:98
		length++; 
		elem = elem->next;
	}
	return length;
c00044f4:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/kernel/list.c:99
}
c00044f7:	c9                   	leave  
c00044f8:	c3                   	ret    

c00044f9 <list_empty>:
list_empty():
/work/x86_os_my/lib/kernel/list.c:102

/* 判断链表是否为空,空时返回true,否则返回false */
bool list_empty(struct list* plist) {		// 判断队列是否为空
c00044f9:	55                   	push   %ebp
c00044fa:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/lib/kernel/list.c:103
	return (plist->head.next == &plist->tail ? true : false);
c00044fc:	8b 45 08             	mov    0x8(%ebp),%eax
c00044ff:	8b 40 04             	mov    0x4(%eax),%eax
c0004502:	8b 55 08             	mov    0x8(%ebp),%edx
c0004505:	83 c2 08             	add    $0x8,%edx
c0004508:	39 d0                	cmp    %edx,%eax
c000450a:	0f 94 c0             	sete   %al
c000450d:	0f b6 c0             	movzbl %al,%eax
/work/x86_os_my/lib/kernel/list.c:104
}
c0004510:	5d                   	pop    %ebp
c0004511:	c3                   	ret    
c0004512:	66 90                	xchg   %ax,%ax
c0004514:	66 90                	xchg   %ax,%ax
c0004516:	66 90                	xchg   %ax,%ax
c0004518:	66 90                	xchg   %ax,%ax
c000451a:	66 90                	xchg   %ax,%ax
c000451c:	66 90                	xchg   %ax,%ax
c000451e:	66 90                	xchg   %ax,%ax

c0004520 <switch_to>:
switch_to():
c0004520:	56                   	push   %esi
c0004521:	57                   	push   %edi
c0004522:	53                   	push   %ebx
c0004523:	55                   	push   %ebp
c0004524:	8b 44 24 14          	mov    0x14(%esp),%eax
c0004528:	89 20                	mov    %esp,(%eax)
c000452a:	8b 44 24 18          	mov    0x18(%esp),%eax
c000452e:	8b 20                	mov    (%eax),%esp
c0004530:	5d                   	pop    %ebp
c0004531:	5b                   	pop    %ebx
c0004532:	5f                   	pop    %edi
c0004533:	5e                   	pop    %esi
c0004534:	c3                   	ret    

c0004535 <console_init>:
console_init():
/work/x86_os_my/device/console.c:9
#include "sync.h"
#include "thread.h"
static struct lock console_lock;	// 控制台锁

/* 初始化终端 */
void console_init() {
c0004535:	55                   	push   %ebp
c0004536:	89 e5                	mov    %esp,%ebp
c0004538:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/console.c:10
	lock_init(&console_lock);
c000453b:	83 ec 0c             	sub    $0xc,%esp
c000453e:	68 70 85 00 c0       	push   $0xc0008570
c0004543:	e8 cd 00 00 00       	call   c0004615 <lock_init>
c0004548:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:11
}
c000454b:	90                   	nop
c000454c:	c9                   	leave  
c000454d:	c3                   	ret    

c000454e <console_acquire>:
console_acquire():
/work/x86_os_my/device/console.c:14

/* 获取终端 */
void console_acquire() {
c000454e:	55                   	push   %ebp
c000454f:	89 e5                	mov    %esp,%ebp
c0004551:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/console.c:15
	lock_acquire(&console_lock);
c0004554:	83 ec 0c             	sub    $0xc,%esp
c0004557:	68 70 85 00 c0       	push   $0xc0008570
c000455c:	e8 8e 02 00 00       	call   c00047ef <lock_acquire>
c0004561:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:16
}
c0004564:	90                   	nop
c0004565:	c9                   	leave  
c0004566:	c3                   	ret    

c0004567 <console_release>:
console_release():
/work/x86_os_my/device/console.c:19

/* 释放终端 */
void console_release() {
c0004567:	55                   	push   %ebp
c0004568:	89 e5                	mov    %esp,%ebp
c000456a:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/console.c:20
	lock_release(&console_lock);
c000456d:	83 ec 0c             	sub    $0xc,%esp
c0004570:	68 70 85 00 c0       	push   $0xc0008570
c0004575:	e8 ec 02 00 00       	call   c0004866 <lock_release>
c000457a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:21
}
c000457d:	90                   	nop
c000457e:	c9                   	leave  
c000457f:	c3                   	ret    

c0004580 <console_put_str>:
console_put_str():
/work/x86_os_my/device/console.c:24

/* 终端中输出字符串 */
void console_put_str(char* str) {
c0004580:	55                   	push   %ebp
c0004581:	89 e5                	mov    %esp,%ebp
c0004583:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/console.c:25
	console_acquire();
c0004586:	e8 c3 ff ff ff       	call   c000454e <console_acquire>
/work/x86_os_my/device/console.c:26
	put_str(str);
c000458b:	83 ec 0c             	sub    $0xc,%esp
c000458e:	ff 75 08             	pushl  0x8(%ebp)
c0004591:	e8 6a de ff ff       	call   c0002400 <put_str>
c0004596:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:27
	console_release();
c0004599:	e8 c9 ff ff ff       	call   c0004567 <console_release>
/work/x86_os_my/device/console.c:28
}
c000459e:	90                   	nop
c000459f:	c9                   	leave  
c00045a0:	c3                   	ret    

c00045a1 <console_put_char>:
console_put_char():
/work/x86_os_my/device/console.c:31

/* 终端中输出字符 */
void console_put_char(uint8_t char_asci) {
c00045a1:	55                   	push   %ebp
c00045a2:	89 e5                	mov    %esp,%ebp
c00045a4:	83 ec 18             	sub    $0x18,%esp
c00045a7:	8b 45 08             	mov    0x8(%ebp),%eax
c00045aa:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/device/console.c:32
	console_acquire();
c00045ad:	e8 9c ff ff ff       	call   c000454e <console_acquire>
/work/x86_os_my/device/console.c:33
	put_char(char_asci);
c00045b2:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c00045b6:	83 ec 0c             	sub    $0xc,%esp
c00045b9:	50                   	push   %eax
c00045ba:	e8 5f de ff ff       	call   c000241e <put_char>
c00045bf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:34
	console_release();
c00045c2:	e8 a0 ff ff ff       	call   c0004567 <console_release>
/work/x86_os_my/device/console.c:35
}
c00045c7:	90                   	nop
c00045c8:	c9                   	leave  
c00045c9:	c3                   	ret    

c00045ca <console_put_int>:
console_put_int():
/work/x86_os_my/device/console.c:38

/* 终端中输出16进制整数 */
void console_put_int(uint32_t num) {
c00045ca:	55                   	push   %ebp
c00045cb:	89 e5                	mov    %esp,%ebp
c00045cd:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/console.c:39
	console_acquire();
c00045d0:	e8 79 ff ff ff       	call   c000454e <console_acquire>
/work/x86_os_my/device/console.c:40
	put_int(num);
c00045d5:	83 ec 0c             	sub    $0xc,%esp
c00045d8:	ff 75 08             	pushl  0x8(%ebp)
c00045db:	e8 0b df ff ff       	call   c00024eb <put_int>
c00045e0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:41
	console_release();
c00045e3:	e8 7f ff ff ff       	call   c0004567 <console_release>
/work/x86_os_my/device/console.c:42
}
c00045e8:	90                   	nop
c00045e9:	c9                   	leave  
c00045ea:	c3                   	ret    

c00045eb <sema_init>:
sema_init():
/work/x86_os_my/thread/sync.c:8
#include "global.h"
#include "debug.h"
#include "interrupt.h"

/* 初始化信号量 */
void sema_init(struct semaphore* psema, uint8_t value) {
c00045eb:	55                   	push   %ebp
c00045ec:	89 e5                	mov    %esp,%ebp
c00045ee:	83 ec 18             	sub    $0x18,%esp
c00045f1:	8b 45 0c             	mov    0xc(%ebp),%eax
c00045f4:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/thread/sync.c:9
	psema->value = value;       // 为信号量赋初值
c00045f7:	8b 45 08             	mov    0x8(%ebp),%eax
c00045fa:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
c00045fe:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/thread/sync.c:10
	list_init(&psema->waiters); //初始化信号量的等待队列
c0004600:	8b 45 08             	mov    0x8(%ebp),%eax
c0004603:	83 c0 04             	add    $0x4,%eax
c0004606:	83 ec 0c             	sub    $0xc,%esp
c0004609:	50                   	push   %eax
c000460a:	e8 12 fd ff ff       	call   c0004321 <list_init>
c000460f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:11
}
c0004612:	90                   	nop
c0004613:	c9                   	leave  
c0004614:	c3                   	ret    

c0004615 <lock_init>:
lock_init():
/work/x86_os_my/thread/sync.c:14

/* 初始化锁plock */
void lock_init(struct lock* plock) {
c0004615:	55                   	push   %ebp
c0004616:	89 e5                	mov    %esp,%ebp
c0004618:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/sync.c:15
	plock->holder = NULL;
c000461b:	8b 45 08             	mov    0x8(%ebp),%eax
c000461e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/thread/sync.c:16
	plock->holder_repeat_nr = 0;
c0004624:	8b 45 08             	mov    0x8(%ebp),%eax
c0004627:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
/work/x86_os_my/thread/sync.c:17
	sema_init(&plock->semaphore, 1);  // 信号量初值为1
c000462e:	8b 45 08             	mov    0x8(%ebp),%eax
c0004631:	83 c0 04             	add    $0x4,%eax
c0004634:	83 ec 08             	sub    $0x8,%esp
c0004637:	6a 01                	push   $0x1
c0004639:	50                   	push   %eax
c000463a:	e8 ac ff ff ff       	call   c00045eb <sema_init>
c000463f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:18
}
c0004642:	90                   	nop
c0004643:	c9                   	leave  
c0004644:	c3                   	ret    

c0004645 <sema_down>:
sema_down():
/work/x86_os_my/thread/sync.c:21

/* 信号量down操作 */
void sema_down(struct semaphore* psema) {
c0004645:	55                   	push   %ebp
c0004646:	89 e5                	mov    %esp,%ebp
c0004648:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/sync.c:23
	/* 关中断来保证原子操作 */
	enum intr_status old_status = intr_disable();
c000464b:	e8 ef d5 ff ff       	call   c0001c3f <intr_disable>
c0004650:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/sync.c:25
	
	while(psema->value == 0) {			// 若value为0,表示已经被别人持有【while多次判断】
c0004653:	e9 98 00 00 00       	jmp    c00046f0 <sema_down+0xab>
/work/x86_os_my/thread/sync.c:26
		ASSERT(!elem_find(&psema->waiters, &running_thread()->general_tag));
c0004658:	e8 fd f6 ff ff       	call   c0003d5a <running_thread>
c000465d:	8d 50 24             	lea    0x24(%eax),%edx
c0004660:	8b 45 08             	mov    0x8(%ebp),%eax
c0004663:	83 c0 04             	add    $0x4,%eax
c0004666:	83 ec 08             	sub    $0x8,%esp
c0004669:	52                   	push   %edx
c000466a:	50                   	push   %eax
c000466b:	e8 bc fd ff ff       	call   c000442c <elem_find>
c0004670:	83 c4 10             	add    $0x10,%esp
c0004673:	85 c0                	test   %eax,%eax
c0004675:	74 19                	je     c0004690 <sema_down+0x4b>
/work/x86_os_my/thread/sync.c:26 (discriminator 1)
c0004677:	68 78 63 00 c0       	push   $0xc0006378
c000467c:	68 7c 64 00 c0       	push   $0xc000647c
c0004681:	6a 1a                	push   $0x1a
c0004683:	68 b4 63 00 c0       	push   $0xc00063b4
c0004688:	e8 e5 de ff ff       	call   c0002572 <panic_spin>
c000468d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:28
		/* 当前线程不应该已在信号量的waiters队列中 */
		if (elem_find(&psema->waiters, &running_thread()->general_tag)) {
c0004690:	e8 c5 f6 ff ff       	call   c0003d5a <running_thread>
c0004695:	8d 50 24             	lea    0x24(%eax),%edx
c0004698:	8b 45 08             	mov    0x8(%ebp),%eax
c000469b:	83 c0 04             	add    $0x4,%eax
c000469e:	83 ec 08             	sub    $0x8,%esp
c00046a1:	52                   	push   %edx
c00046a2:	50                   	push   %eax
c00046a3:	e8 84 fd ff ff       	call   c000442c <elem_find>
c00046a8:	83 c4 10             	add    $0x10,%esp
c00046ab:	85 c0                	test   %eax,%eax
c00046ad:	74 19                	je     c00046c8 <sema_down+0x83>
/work/x86_os_my/thread/sync.c:29
			PANIC("sema_down: thread blocked has been in waiters_list\n");
c00046af:	68 c4 63 00 c0       	push   $0xc00063c4
c00046b4:	68 7c 64 00 c0       	push   $0xc000647c
c00046b9:	6a 1d                	push   $0x1d
c00046bb:	68 b4 63 00 c0       	push   $0xc00063b4
c00046c0:	e8 ad de ff ff       	call   c0002572 <panic_spin>
c00046c5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:32
		}
		/* 若信号量的值等于0,则当前线程把自己加入该锁的等待队列,然后阻塞自己 */
		list_append(&psema->waiters, &running_thread()->general_tag);
c00046c8:	e8 8d f6 ff ff       	call   c0003d5a <running_thread>
c00046cd:	8d 50 24             	lea    0x24(%eax),%edx
c00046d0:	8b 45 08             	mov    0x8(%ebp),%eax
c00046d3:	83 c0 04             	add    $0x4,%eax
c00046d6:	83 ec 08             	sub    $0x8,%esp
c00046d9:	52                   	push   %edx
c00046da:	50                   	push   %eax
c00046db:	e8 d2 fc ff ff       	call   c00043b2 <list_append>
c00046e0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:33
		thread_block(TASK_BLOCKED);		// 阻塞线程,直到被唤醒
c00046e3:	83 ec 0c             	sub    $0xc,%esp
c00046e6:	6a 02                	push   $0x2
c00046e8:	e8 79 fa ff ff       	call   c0004166 <thread_block>
c00046ed:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:25
/* 信号量down操作 */
void sema_down(struct semaphore* psema) {
	/* 关中断来保证原子操作 */
	enum intr_status old_status = intr_disable();
	
	while(psema->value == 0) {			// 若value为0,表示已经被别人持有【while多次判断】
c00046f0:	8b 45 08             	mov    0x8(%ebp),%eax
c00046f3:	0f b6 00             	movzbl (%eax),%eax
c00046f6:	84 c0                	test   %al,%al
c00046f8:	0f 84 5a ff ff ff    	je     c0004658 <sema_down+0x13>
/work/x86_os_my/thread/sync.c:36
		/* 若信号量的值等于0,则当前线程把自己加入该锁的等待队列,然后阻塞自己 */
		list_append(&psema->waiters, &running_thread()->general_tag);
		thread_block(TASK_BLOCKED);		// 阻塞线程,直到被唤醒
	}
	/* 若value为1或被唤醒后,会执行下面的代码,也就是获得了锁。*/
	psema->value--;
c00046fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0004701:	0f b6 00             	movzbl (%eax),%eax
c0004704:	8d 50 ff             	lea    -0x1(%eax),%edx
c0004707:	8b 45 08             	mov    0x8(%ebp),%eax
c000470a:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/thread/sync.c:37
	ASSERT(psema->value == 0);
c000470c:	8b 45 08             	mov    0x8(%ebp),%eax
c000470f:	0f b6 00             	movzbl (%eax),%eax
c0004712:	84 c0                	test   %al,%al
c0004714:	74 19                	je     c000472f <sema_down+0xea>
/work/x86_os_my/thread/sync.c:37 (discriminator 1)
c0004716:	68 f8 63 00 c0       	push   $0xc00063f8
c000471b:	68 7c 64 00 c0       	push   $0xc000647c
c0004720:	6a 25                	push   $0x25
c0004722:	68 b4 63 00 c0       	push   $0xc00063b4
c0004727:	e8 46 de ff ff       	call   c0002572 <panic_spin>
c000472c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:40
	
	/* 恢复之前的中断状态 */
	intr_set_status(old_status);
c000472f:	83 ec 0c             	sub    $0xc,%esp
c0004732:	ff 75 f4             	pushl  -0xc(%ebp)
c0004735:	e8 2e d5 ff ff       	call   c0001c68 <intr_set_status>
c000473a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:41
}
c000473d:	90                   	nop
c000473e:	c9                   	leave  
c000473f:	c3                   	ret    

c0004740 <sema_up>:
sema_up():
/work/x86_os_my/thread/sync.c:44

/* 信号量的up操作 */
void sema_up(struct semaphore* psema) {
c0004740:	55                   	push   %ebp
c0004741:	89 e5                	mov    %esp,%ebp
c0004743:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/sync.c:46
	/* 关中断,保证原子操作 */
	enum intr_status old_status = intr_disable();
c0004746:	e8 f4 d4 ff ff       	call   c0001c3f <intr_disable>
c000474b:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/sync.c:48
	
	ASSERT(psema->value == 0);
c000474e:	8b 45 08             	mov    0x8(%ebp),%eax
c0004751:	0f b6 00             	movzbl (%eax),%eax
c0004754:	84 c0                	test   %al,%al
c0004756:	74 19                	je     c0004771 <sema_up+0x31>
/work/x86_os_my/thread/sync.c:48 (discriminator 1)
c0004758:	68 f8 63 00 c0       	push   $0xc00063f8
c000475d:	68 88 64 00 c0       	push   $0xc0006488
c0004762:	6a 30                	push   $0x30
c0004764:	68 b4 63 00 c0       	push   $0xc00063b4
c0004769:	e8 04 de ff ff       	call   c0002572 <panic_spin>
c000476e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:49
	if (!list_empty(&psema->waiters)) {
c0004771:	8b 45 08             	mov    0x8(%ebp),%eax
c0004774:	83 c0 04             	add    $0x4,%eax
c0004777:	83 ec 0c             	sub    $0xc,%esp
c000477a:	50                   	push   %eax
c000477b:	e8 79 fd ff ff       	call   c00044f9 <list_empty>
c0004780:	83 c4 10             	add    $0x10,%esp
c0004783:	85 c0                	test   %eax,%eax
c0004785:	75 26                	jne    c00047ad <sema_up+0x6d>
/work/x86_os_my/thread/sync.c:50
		struct task_struct* thread_blocked = elem2entry(struct task_struct, general_tag, list_pop(&psema->waiters));
c0004787:	8b 45 08             	mov    0x8(%ebp),%eax
c000478a:	83 c0 04             	add    $0x4,%eax
c000478d:	83 ec 0c             	sub    $0xc,%esp
c0004790:	50                   	push   %eax
c0004791:	e8 74 fc ff ff       	call   c000440a <list_pop>
c0004796:	83 c4 10             	add    $0x10,%esp
c0004799:	83 e8 24             	sub    $0x24,%eax
c000479c:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/thread/sync.c:51
		thread_unblock(thread_blocked);
c000479f:	83 ec 0c             	sub    $0xc,%esp
c00047a2:	ff 75 f0             	pushl  -0x10(%ebp)
c00047a5:	e8 1f fa ff ff       	call   c00041c9 <thread_unblock>
c00047aa:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:53
	}
	psema->value++;
c00047ad:	8b 45 08             	mov    0x8(%ebp),%eax
c00047b0:	0f b6 00             	movzbl (%eax),%eax
c00047b3:	8d 50 01             	lea    0x1(%eax),%edx
c00047b6:	8b 45 08             	mov    0x8(%ebp),%eax
c00047b9:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/thread/sync.c:54
	ASSERT(psema->value == 1);
c00047bb:	8b 45 08             	mov    0x8(%ebp),%eax
c00047be:	0f b6 00             	movzbl (%eax),%eax
c00047c1:	3c 01                	cmp    $0x1,%al
c00047c3:	74 19                	je     c00047de <sema_up+0x9e>
/work/x86_os_my/thread/sync.c:54 (discriminator 1)
c00047c5:	68 0a 64 00 c0       	push   $0xc000640a
c00047ca:	68 88 64 00 c0       	push   $0xc0006488
c00047cf:	6a 36                	push   $0x36
c00047d1:	68 b4 63 00 c0       	push   $0xc00063b4
c00047d6:	e8 97 dd ff ff       	call   c0002572 <panic_spin>
c00047db:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:57
	
	/* 恢复之前的中断状态 */
	intr_set_status(old_status);
c00047de:	83 ec 0c             	sub    $0xc,%esp
c00047e1:	ff 75 f4             	pushl  -0xc(%ebp)
c00047e4:	e8 7f d4 ff ff       	call   c0001c68 <intr_set_status>
c00047e9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:58
}
c00047ec:	90                   	nop
c00047ed:	c9                   	leave  
c00047ee:	c3                   	ret    

c00047ef <lock_acquire>:
lock_acquire():
/work/x86_os_my/thread/sync.c:61

/* 获取锁plock */
void lock_acquire(struct lock* plock) {
c00047ef:	55                   	push   %ebp
c00047f0:	89 e5                	mov    %esp,%ebp
c00047f2:	53                   	push   %ebx
c00047f3:	83 ec 04             	sub    $0x4,%esp
/work/x86_os_my/thread/sync.c:63
	/* 排除曾经自己已经持有锁但还未将其释放的情况。*/
	if (plock->holder != running_thread()) {
c00047f6:	8b 45 08             	mov    0x8(%ebp),%eax
c00047f9:	8b 18                	mov    (%eax),%ebx
c00047fb:	e8 5a f5 ff ff       	call   c0003d5a <running_thread>
c0004800:	39 c3                	cmp    %eax,%ebx
c0004802:	74 4d                	je     c0004851 <lock_acquire+0x62>
/work/x86_os_my/thread/sync.c:64
		sema_down(&plock->semaphore);	// 对信号量P操作,原子操作
c0004804:	8b 45 08             	mov    0x8(%ebp),%eax
c0004807:	83 c0 04             	add    $0x4,%eax
c000480a:	83 ec 0c             	sub    $0xc,%esp
c000480d:	50                   	push   %eax
c000480e:	e8 32 fe ff ff       	call   c0004645 <sema_down>
c0004813:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:65
		plock->holder = running_thread();
c0004816:	e8 3f f5 ff ff       	call   c0003d5a <running_thread>
c000481b:	89 c2                	mov    %eax,%edx
c000481d:	8b 45 08             	mov    0x8(%ebp),%eax
c0004820:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/thread/sync.c:66
		ASSERT(plock->holder_repeat_nr == 0);
c0004822:	8b 45 08             	mov    0x8(%ebp),%eax
c0004825:	8b 40 18             	mov    0x18(%eax),%eax
c0004828:	85 c0                	test   %eax,%eax
c000482a:	74 19                	je     c0004845 <lock_acquire+0x56>
/work/x86_os_my/thread/sync.c:66 (discriminator 1)
c000482c:	68 1c 64 00 c0       	push   $0xc000641c
c0004831:	68 90 64 00 c0       	push   $0xc0006490
c0004836:	6a 42                	push   $0x42
c0004838:	68 b4 63 00 c0       	push   $0xc00063b4
c000483d:	e8 30 dd ff ff       	call   c0002572 <panic_spin>
c0004842:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:67
		plock->holder_repeat_nr = 1;
c0004845:	8b 45 08             	mov    0x8(%ebp),%eax
c0004848:	c7 40 18 01 00 00 00 	movl   $0x1,0x18(%eax)
/work/x86_os_my/thread/sync.c:71
	} else {
		plock->holder_repeat_nr++;
	}
}
c000484f:	eb 0f                	jmp    c0004860 <lock_acquire+0x71>
/work/x86_os_my/thread/sync.c:69
		sema_down(&plock->semaphore);	// 对信号量P操作,原子操作
		plock->holder = running_thread();
		ASSERT(plock->holder_repeat_nr == 0);
		plock->holder_repeat_nr = 1;
	} else {
		plock->holder_repeat_nr++;
c0004851:	8b 45 08             	mov    0x8(%ebp),%eax
c0004854:	8b 40 18             	mov    0x18(%eax),%eax
c0004857:	8d 50 01             	lea    0x1(%eax),%edx
c000485a:	8b 45 08             	mov    0x8(%ebp),%eax
c000485d:	89 50 18             	mov    %edx,0x18(%eax)
/work/x86_os_my/thread/sync.c:71
	}
}
c0004860:	90                   	nop
c0004861:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0004864:	c9                   	leave  
c0004865:	c3                   	ret    

c0004866 <lock_release>:
lock_release():
/work/x86_os_my/thread/sync.c:74

/* 释放锁plock */
void lock_release(struct lock* plock) {
c0004866:	55                   	push   %ebp
c0004867:	89 e5                	mov    %esp,%ebp
c0004869:	53                   	push   %ebx
c000486a:	83 ec 04             	sub    $0x4,%esp
/work/x86_os_my/thread/sync.c:75
	ASSERT(plock->holder == running_thread());
c000486d:	8b 45 08             	mov    0x8(%ebp),%eax
c0004870:	8b 18                	mov    (%eax),%ebx
c0004872:	e8 e3 f4 ff ff       	call   c0003d5a <running_thread>
c0004877:	39 c3                	cmp    %eax,%ebx
c0004879:	74 19                	je     c0004894 <lock_release+0x2e>
/work/x86_os_my/thread/sync.c:75 (discriminator 1)
c000487b:	68 3c 64 00 c0       	push   $0xc000643c
c0004880:	68 a0 64 00 c0       	push   $0xc00064a0
c0004885:	6a 4b                	push   $0x4b
c0004887:	68 b4 63 00 c0       	push   $0xc00063b4
c000488c:	e8 e1 dc ff ff       	call   c0002572 <panic_spin>
c0004891:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:76
	if (plock->holder_repeat_nr > 1) {
c0004894:	8b 45 08             	mov    0x8(%ebp),%eax
c0004897:	8b 40 18             	mov    0x18(%eax),%eax
c000489a:	83 f8 01             	cmp    $0x1,%eax
c000489d:	76 11                	jbe    c00048b0 <lock_release+0x4a>
/work/x86_os_my/thread/sync.c:77
		plock->holder_repeat_nr--;
c000489f:	8b 45 08             	mov    0x8(%ebp),%eax
c00048a2:	8b 40 18             	mov    0x18(%eax),%eax
c00048a5:	8d 50 ff             	lea    -0x1(%eax),%edx
c00048a8:	8b 45 08             	mov    0x8(%ebp),%eax
c00048ab:	89 50 18             	mov    %edx,0x18(%eax)
/work/x86_os_my/thread/sync.c:78
		return;
c00048ae:	eb 49                	jmp    c00048f9 <lock_release+0x93>
/work/x86_os_my/thread/sync.c:80
	}
	ASSERT(plock->holder_repeat_nr == 1);
c00048b0:	8b 45 08             	mov    0x8(%ebp),%eax
c00048b3:	8b 40 18             	mov    0x18(%eax),%eax
c00048b6:	83 f8 01             	cmp    $0x1,%eax
c00048b9:	74 19                	je     c00048d4 <lock_release+0x6e>
/work/x86_os_my/thread/sync.c:80 (discriminator 1)
c00048bb:	68 5e 64 00 c0       	push   $0xc000645e
c00048c0:	68 a0 64 00 c0       	push   $0xc00064a0
c00048c5:	6a 50                	push   $0x50
c00048c7:	68 b4 63 00 c0       	push   $0xc00063b4
c00048cc:	e8 a1 dc ff ff       	call   c0002572 <panic_spin>
c00048d1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:82

	plock->holder = NULL;			// 把锁的持有者置空放在V操作之前
c00048d4:	8b 45 08             	mov    0x8(%ebp),%eax
c00048d7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/thread/sync.c:83
	plock->holder_repeat_nr = 0;
c00048dd:	8b 45 08             	mov    0x8(%ebp),%eax
c00048e0:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
/work/x86_os_my/thread/sync.c:84
	sema_up(&plock->semaphore);		// 信号量的V操作,也是原子操作
c00048e7:	8b 45 08             	mov    0x8(%ebp),%eax
c00048ea:	83 c0 04             	add    $0x4,%eax
c00048ed:	83 ec 0c             	sub    $0xc,%esp
c00048f0:	50                   	push   %eax
c00048f1:	e8 4a fe ff ff       	call   c0004740 <sema_up>
c00048f6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:85
}
c00048f9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c00048fc:	c9                   	leave  
c00048fd:	c3                   	ret    

c00048fe <inb>:
inb():
/work/x86_os_my/lib/kernel/io.h:36
   asm volatile ("cld; rep outsw" : "+S" (addr), "+c" (word_cnt) : "d" (port));
/******************************************************/
}

/* 将从端口port读入的一个字节返回 */
static inline uint8_t inb(uint16_t port) {
c00048fe:	55                   	push   %ebp
c00048ff:	89 e5                	mov    %esp,%ebp
c0004901:	83 ec 14             	sub    $0x14,%esp
c0004904:	8b 45 08             	mov    0x8(%ebp),%eax
c0004907:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
/work/x86_os_my/lib/kernel/io.h:38
   uint8_t data;
   asm volatile ("inb %w1, %b0" : "=a" (data) : "Nd" (port));
c000490b:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c000490f:	89 c2                	mov    %eax,%edx
c0004911:	ec                   	in     (%dx),%al
c0004912:	88 45 ff             	mov    %al,-0x1(%ebp)
/work/x86_os_my/lib/kernel/io.h:39
   return data;
c0004915:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
/work/x86_os_my/lib/kernel/io.h:40
}
c0004919:	c9                   	leave  
c000491a:	c3                   	ret    

c000491b <intr_keyboard_handler>:
intr_keyboard_handler():
/work/x86_os_my/device/keyboard.c:111
/* 0x3A */	{caps_lock_char, caps_lock_char}
/*其它按键暂不处理*/
};

/* 键盘中断处理程序 */
static void intr_keyboard_handler(void) {
c000491b:	55                   	push   %ebp
c000491c:	89 e5                	mov    %esp,%ebp
c000491e:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/device/keyboard.c:114

/* 这次中断发生前的上一次中断,以下任意三个键是否有按下 */
   bool ctrl_down_last = ctrl_status;	  
c0004921:	a1 8c 85 00 c0       	mov    0xc000858c,%eax
c0004926:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/device/keyboard.c:115
   bool shift_down_last = shift_status;
c0004929:	a1 90 85 00 c0       	mov    0xc0008590,%eax
c000492e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/device/keyboard.c:116
   bool caps_lock_last = caps_lock_status;
c0004931:	a1 98 85 00 c0       	mov    0xc0008598,%eax
c0004936:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/device/keyboard.c:119

   bool break_code;
   uint16_t scancode = inb(KBD_BUF_PORT);
c0004939:	6a 60                	push   $0x60
c000493b:	e8 be ff ff ff       	call   c00048fe <inb>
c0004940:	83 c4 04             	add    $0x4,%esp
c0004943:	0f b6 c0             	movzbl %al,%eax
c0004946:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
/work/x86_os_my/device/keyboard.c:123

/* 若扫描码是e0开头的,表示此键的按下将产生多个扫描码,
 * 所以马上结束此次中断处理函数,等待下一个扫描码进来*/ 
   if (scancode == 0xe0) { 
c000494a:	66 81 7d f6 e0 00    	cmpw   $0xe0,-0xa(%ebp)
c0004950:	75 0f                	jne    c0004961 <intr_keyboard_handler+0x46>
/work/x86_os_my/device/keyboard.c:124
      ext_scancode = true;    // 打开e0标记
c0004952:	c7 05 9c 85 00 c0 01 	movl   $0x1,0xc000859c
c0004959:	00 00 00 
/work/x86_os_my/device/keyboard.c:125
      return;
c000495c:	e9 50 02 00 00       	jmp    c0004bb1 <intr_keyboard_handler+0x296>
/work/x86_os_my/device/keyboard.c:129
   }

/* 如果上次是以0xe0开头,将扫描码合并 */
   if (ext_scancode) {
c0004961:	a1 9c 85 00 c0       	mov    0xc000859c,%eax
c0004966:	85 c0                	test   %eax,%eax
c0004968:	74 10                	je     c000497a <intr_keyboard_handler+0x5f>
/work/x86_os_my/device/keyboard.c:130
      scancode = ((0xe000) | scancode);
c000496a:	66 81 4d f6 00 e0    	orw    $0xe000,-0xa(%ebp)
/work/x86_os_my/device/keyboard.c:131
      ext_scancode = false;   // 关闭e0标记
c0004970:	c7 05 9c 85 00 c0 00 	movl   $0x0,0xc000859c
c0004977:	00 00 00 
/work/x86_os_my/device/keyboard.c:134
   }   

   break_code = ((scancode & 0x0080) != 0);   // 获取break_code
c000497a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c000497e:	25 80 00 00 00       	and    $0x80,%eax
c0004983:	85 c0                	test   %eax,%eax
c0004985:	0f 95 c0             	setne  %al
c0004988:	0f b6 c0             	movzbl %al,%eax
c000498b:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/device/keyboard.c:136
   
   if (break_code) {   // 若是断码break_code(按键弹起时产生的扫描码)
c000498e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0004992:	74 6a                	je     c00049fe <intr_keyboard_handler+0xe3>
/work/x86_os_my/device/keyboard.c:140

   /* 由于ctrl_r 和alt_r的make_code和break_code都是两字节,
   所以可用下面的方法取make_code,多字节的扫描码暂不处理 */
      uint16_t make_code = (scancode &= 0xff7f);   // 得到其make_code(按键按下时产生的扫描码)
c0004994:	66 81 65 f6 7f ff    	andw   $0xff7f,-0xa(%ebp)
c000499a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c000499e:	66 89 45 da          	mov    %ax,-0x26(%ebp)
/work/x86_os_my/device/keyboard.c:143

   /* 若是任意以下三个键弹起了,将状态置为false */
      if (make_code == ctrl_l_make || make_code == ctrl_r_make) {
c00049a2:	66 83 7d da 1d       	cmpw   $0x1d,-0x26(%ebp)
c00049a7:	74 08                	je     c00049b1 <intr_keyboard_handler+0x96>
/work/x86_os_my/device/keyboard.c:143 (discriminator 1)
c00049a9:	66 81 7d da 1d e0    	cmpw   $0xe01d,-0x26(%ebp)
c00049af:	75 0c                	jne    c00049bd <intr_keyboard_handler+0xa2>
/work/x86_os_my/device/keyboard.c:144
	 ctrl_status = false;
c00049b1:	c7 05 8c 85 00 c0 00 	movl   $0x0,0xc000858c
c00049b8:	00 00 00 
c00049bb:	eb 3c                	jmp    c00049f9 <intr_keyboard_handler+0xde>
/work/x86_os_my/device/keyboard.c:145
      } else if (make_code == shift_l_make || make_code == shift_r_make) {
c00049bd:	66 83 7d da 2a       	cmpw   $0x2a,-0x26(%ebp)
c00049c2:	74 07                	je     c00049cb <intr_keyboard_handler+0xb0>
/work/x86_os_my/device/keyboard.c:145 (discriminator 1)
c00049c4:	66 83 7d da 36       	cmpw   $0x36,-0x26(%ebp)
c00049c9:	75 0c                	jne    c00049d7 <intr_keyboard_handler+0xbc>
/work/x86_os_my/device/keyboard.c:146
	 shift_status = false;
c00049cb:	c7 05 90 85 00 c0 00 	movl   $0x0,0xc0008590
c00049d2:	00 00 00 
c00049d5:	eb 22                	jmp    c00049f9 <intr_keyboard_handler+0xde>
/work/x86_os_my/device/keyboard.c:147
      } else if (make_code == alt_l_make || make_code == alt_r_make) {
c00049d7:	66 83 7d da 38       	cmpw   $0x38,-0x26(%ebp)
c00049dc:	74 0c                	je     c00049ea <intr_keyboard_handler+0xcf>
/work/x86_os_my/device/keyboard.c:147 (discriminator 1)
c00049de:	66 81 7d da 38 e0    	cmpw   $0xe038,-0x26(%ebp)
c00049e4:	0f 85 c0 01 00 00    	jne    c0004baa <intr_keyboard_handler+0x28f>
/work/x86_os_my/device/keyboard.c:148
	 alt_status = false;
c00049ea:	c7 05 94 85 00 c0 00 	movl   $0x0,0xc0008594
c00049f1:	00 00 00 
/work/x86_os_my/device/keyboard.c:151
      } /* 由于caps_lock不是弹起后关闭,所以需要单独处理 */

      return;   // 直接返回结束此次中断处理程序
c00049f4:	e9 b1 01 00 00       	jmp    c0004baa <intr_keyboard_handler+0x28f>
c00049f9:	e9 ac 01 00 00       	jmp    c0004baa <intr_keyboard_handler+0x28f>
/work/x86_os_my/device/keyboard.c:155

   } 
   /* 若为通码,只处理数组中定义的键以及alt_right和ctrl键,全是make_code */
   else if ((scancode > 0x00 && scancode < 0x3b) || \
c00049fe:	66 83 7d f6 00       	cmpw   $0x0,-0xa(%ebp)
c0004a03:	74 07                	je     c0004a0c <intr_keyboard_handler+0xf1>
/work/x86_os_my/device/keyboard.c:155 (discriminator 1)
c0004a05:	66 83 7d f6 3a       	cmpw   $0x3a,-0xa(%ebp)
c0004a0a:	76 14                	jbe    c0004a20 <intr_keyboard_handler+0x105>
/work/x86_os_my/device/keyboard.c:155 (discriminator 3)
c0004a0c:	66 81 7d f6 38 e0    	cmpw   $0xe038,-0xa(%ebp)
c0004a12:	74 0c                	je     c0004a20 <intr_keyboard_handler+0x105>
/work/x86_os_my/device/keyboard.c:156
	       (scancode == alt_r_make) || \
c0004a14:	66 81 7d f6 1d e0    	cmpw   $0xe01d,-0xa(%ebp)
c0004a1a:	0f 85 78 01 00 00    	jne    c0004b98 <intr_keyboard_handler+0x27d>
/work/x86_os_my/device/keyboard.c:158
	       (scancode == ctrl_r_make)) {
      bool shift = false;  // 判断是否与shift组合,用来在一维数组中索引对应的字符
c0004a20:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/device/keyboard.c:159
      if ((scancode < 0x0e) || (scancode == 0x29) || \
c0004a27:	66 83 7d f6 0d       	cmpw   $0xd,-0xa(%ebp)
c0004a2c:	76 3f                	jbe    c0004a6d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:159 (discriminator 1)
c0004a2e:	66 83 7d f6 29       	cmpw   $0x29,-0xa(%ebp)
c0004a33:	74 38                	je     c0004a6d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:159 (discriminator 2)
c0004a35:	66 83 7d f6 1a       	cmpw   $0x1a,-0xa(%ebp)
c0004a3a:	74 31                	je     c0004a6d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:160
	 (scancode == 0x1a) || (scancode == 0x1b) || \
c0004a3c:	66 83 7d f6 1b       	cmpw   $0x1b,-0xa(%ebp)
c0004a41:	74 2a                	je     c0004a6d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:160 (discriminator 1)
c0004a43:	66 83 7d f6 2b       	cmpw   $0x2b,-0xa(%ebp)
c0004a48:	74 23                	je     c0004a6d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:161
	 (scancode == 0x2b) || (scancode == 0x27) || \
c0004a4a:	66 83 7d f6 27       	cmpw   $0x27,-0xa(%ebp)
c0004a4f:	74 1c                	je     c0004a6d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:161 (discriminator 1)
c0004a51:	66 83 7d f6 28       	cmpw   $0x28,-0xa(%ebp)
c0004a56:	74 15                	je     c0004a6d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:162
	 (scancode == 0x28) || (scancode == 0x33) || \
c0004a58:	66 83 7d f6 33       	cmpw   $0x33,-0xa(%ebp)
c0004a5d:	74 0e                	je     c0004a6d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:162 (discriminator 1)
c0004a5f:	66 83 7d f6 34       	cmpw   $0x34,-0xa(%ebp)
c0004a64:	74 07                	je     c0004a6d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:163
	 (scancode == 0x34) || (scancode == 0x35)) {  
c0004a66:	66 83 7d f6 35       	cmpw   $0x35,-0xa(%ebp)
c0004a6b:	75 0f                	jne    c0004a7c <intr_keyboard_handler+0x161>
/work/x86_os_my/device/keyboard.c:176
		     0x28 字符'\''
		     0x33 字符','
		     0x34 字符'.'
		     0x35 字符'/' 
	    *******************************/
	 if (shift_down_last) {  // 如果同时按下了shift键
c0004a6d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0004a71:	74 3a                	je     c0004aad <intr_keyboard_handler+0x192>
/work/x86_os_my/device/keyboard.c:177
	    shift = true;
c0004a73:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
/work/x86_os_my/device/keyboard.c:176
		     0x28 字符'\''
		     0x33 字符','
		     0x34 字符'.'
		     0x35 字符'/' 
	    *******************************/
	 if (shift_down_last) {  // 如果同时按下了shift键
c0004a7a:	eb 31                	jmp    c0004aad <intr_keyboard_handler+0x192>
/work/x86_os_my/device/keyboard.c:180
	    shift = true;
	 }
      } else {	  // 默认为字母键
	 if (shift_down_last && caps_lock_last) {  // 如果shift和capslock同时按下
c0004a7c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0004a80:	74 0f                	je     c0004a91 <intr_keyboard_handler+0x176>
/work/x86_os_my/device/keyboard.c:180 (discriminator 1)
c0004a82:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0004a86:	74 09                	je     c0004a91 <intr_keyboard_handler+0x176>
/work/x86_os_my/device/keyboard.c:181
	    shift = false;
c0004a88:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0004a8f:	eb 1c                	jmp    c0004aad <intr_keyboard_handler+0x192>
/work/x86_os_my/device/keyboard.c:182
	 } else if (shift_down_last || caps_lock_last) { // 如果shift和capslock任意被按下
c0004a91:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0004a95:	75 06                	jne    c0004a9d <intr_keyboard_handler+0x182>
/work/x86_os_my/device/keyboard.c:182 (discriminator 1)
c0004a97:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0004a9b:	74 09                	je     c0004aa6 <intr_keyboard_handler+0x18b>
/work/x86_os_my/device/keyboard.c:183
	    shift = true;
c0004a9d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c0004aa4:	eb 07                	jmp    c0004aad <intr_keyboard_handler+0x192>
/work/x86_os_my/device/keyboard.c:185
	 } else {
	    shift = false;
c0004aa6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/device/keyboard.c:189
	 }
      }

      uint8_t index = (scancode &= 0x00ff);  // 将扫描码的高字节置0,主要是针对高字节是e0的扫描码.
c0004aad:	66 81 65 f6 ff 00    	andw   $0xff,-0xa(%ebp)
c0004ab3:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0004ab7:	88 45 d9             	mov    %al,-0x27(%ebp)
/work/x86_os_my/device/keyboard.c:190
      char cur_char = keymap[index][shift];  // 在数组中找到对应的字符
c0004aba:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0004abe:	8d 14 00             	lea    (%eax,%eax,1),%edx
c0004ac1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0004ac4:	01 d0                	add    %edx,%eax
c0004ac6:	05 e0 80 00 c0       	add    $0xc00080e0,%eax
c0004acb:	0f b6 00             	movzbl (%eax),%eax
c0004ace:	88 45 ef             	mov    %al,-0x11(%ebp)
/work/x86_os_my/device/keyboard.c:193

   /* 如果cur_char不为0,也就是ascii码为除'\0'外的字符就加入键盘缓冲区中 */
      if (cur_char) {
c0004ad1:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
c0004ad5:	74 54                	je     c0004b2b <intr_keyboard_handler+0x210>
/work/x86_os_my/device/keyboard.c:200
     /*****************  快捷键ctrl+l和ctrl+u的处理 *********************
      * 下面是把ctrl+l和ctrl+u这两种组合键产生的字符置为:
      * cur_char的asc码-字符a的asc码, 此差值比较小,
      * 属于asc码表中不可见的字符部分.故不会产生可见字符.
      * 我们在shell中将ascii值为l-a和u-a的分别处理为清屏和删除输入的快捷键*/
	 if ((ctrl_down_last && cur_char == 'l') || (ctrl_down_last && cur_char == 'u')) {
c0004ad7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0004adb:	74 06                	je     c0004ae3 <intr_keyboard_handler+0x1c8>
/work/x86_os_my/device/keyboard.c:200 (discriminator 1)
c0004add:	80 7d ef 6c          	cmpb   $0x6c,-0x11(%ebp)
c0004ae1:	74 0c                	je     c0004aef <intr_keyboard_handler+0x1d4>
/work/x86_os_my/device/keyboard.c:200 (discriminator 3)
c0004ae3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0004ae7:	74 10                	je     c0004af9 <intr_keyboard_handler+0x1de>
/work/x86_os_my/device/keyboard.c:200 (discriminator 4)
c0004ae9:	80 7d ef 75          	cmpb   $0x75,-0x11(%ebp)
c0004aed:	75 0a                	jne    c0004af9 <intr_keyboard_handler+0x1de>
/work/x86_os_my/device/keyboard.c:201
	    cur_char -= 'a';
c0004aef:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c0004af3:	83 e8 61             	sub    $0x61,%eax
c0004af6:	88 45 ef             	mov    %al,-0x11(%ebp)
/work/x86_os_my/device/keyboard.c:207
	 }
      /****************************************************************/
      
   /* 若kbd_buf中未满并且待加入的cur_char不为0,
    * 则将其加入到缓冲区kbd_buf中 */
	 if (!ioq_full(&kbd_buf)) {
c0004af9:	83 ec 0c             	sub    $0xc,%esp
c0004afc:	68 e0 8b 00 c0       	push   $0xc0008be0
c0004b01:	e8 58 01 00 00       	call   c0004c5e <ioq_full>
c0004b06:	83 c4 10             	add    $0x10,%esp
c0004b09:	85 c0                	test   %eax,%eax
c0004b0b:	0f 85 9c 00 00 00    	jne    c0004bad <intr_keyboard_handler+0x292>
/work/x86_os_my/device/keyboard.c:208
	    ioq_putchar(&kbd_buf, cur_char);
c0004b11:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
c0004b15:	83 ec 08             	sub    $0x8,%esp
c0004b18:	50                   	push   %eax
c0004b19:	68 e0 8b 00 c0       	push   $0xc0008be0
c0004b1e:	e8 0d 03 00 00       	call   c0004e30 <ioq_putchar>
c0004b23:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/keyboard.c:210
	 }
	 return;
c0004b26:	e9 82 00 00 00       	jmp    c0004bad <intr_keyboard_handler+0x292>
/work/x86_os_my/device/keyboard.c:214
      }

      /* 记录本次是否按下了下面几类控制键之一,供下次键入时判断组合键 */
      if (scancode == ctrl_l_make || scancode == ctrl_r_make) {
c0004b2b:	66 83 7d f6 1d       	cmpw   $0x1d,-0xa(%ebp)
c0004b30:	74 08                	je     c0004b3a <intr_keyboard_handler+0x21f>
/work/x86_os_my/device/keyboard.c:214 (discriminator 1)
c0004b32:	66 81 7d f6 1d e0    	cmpw   $0xe01d,-0xa(%ebp)
c0004b38:	75 0c                	jne    c0004b46 <intr_keyboard_handler+0x22b>
/work/x86_os_my/device/keyboard.c:215
	 ctrl_status = true;
c0004b3a:	c7 05 8c 85 00 c0 01 	movl   $0x1,0xc000858c
c0004b41:	00 00 00 
c0004b44:	eb 50                	jmp    c0004b96 <intr_keyboard_handler+0x27b>
/work/x86_os_my/device/keyboard.c:216
      } else if (scancode == shift_l_make || scancode == shift_r_make) {
c0004b46:	66 83 7d f6 2a       	cmpw   $0x2a,-0xa(%ebp)
c0004b4b:	74 07                	je     c0004b54 <intr_keyboard_handler+0x239>
/work/x86_os_my/device/keyboard.c:216 (discriminator 1)
c0004b4d:	66 83 7d f6 36       	cmpw   $0x36,-0xa(%ebp)
c0004b52:	75 0c                	jne    c0004b60 <intr_keyboard_handler+0x245>
/work/x86_os_my/device/keyboard.c:217
	 shift_status = true;
c0004b54:	c7 05 90 85 00 c0 01 	movl   $0x1,0xc0008590
c0004b5b:	00 00 00 
c0004b5e:	eb 36                	jmp    c0004b96 <intr_keyboard_handler+0x27b>
/work/x86_os_my/device/keyboard.c:218
      } else if (scancode == alt_l_make || scancode == alt_r_make) {
c0004b60:	66 83 7d f6 38       	cmpw   $0x38,-0xa(%ebp)
c0004b65:	74 08                	je     c0004b6f <intr_keyboard_handler+0x254>
/work/x86_os_my/device/keyboard.c:218 (discriminator 1)
c0004b67:	66 81 7d f6 38 e0    	cmpw   $0xe038,-0xa(%ebp)
c0004b6d:	75 0c                	jne    c0004b7b <intr_keyboard_handler+0x260>
/work/x86_os_my/device/keyboard.c:219
	 alt_status = true;
c0004b6f:	c7 05 94 85 00 c0 01 	movl   $0x1,0xc0008594
c0004b76:	00 00 00 
c0004b79:	eb 1b                	jmp    c0004b96 <intr_keyboard_handler+0x27b>
/work/x86_os_my/device/keyboard.c:220
      } else if (scancode == caps_lock_make) {
c0004b7b:	66 83 7d f6 3a       	cmpw   $0x3a,-0xa(%ebp)
c0004b80:	75 2e                	jne    c0004bb0 <intr_keyboard_handler+0x295>
/work/x86_os_my/device/keyboard.c:223
      /* 不管之前是否有按下caps_lock键,当再次按下时则状态取反,
       * 即:已经开启时,再按下同样的键是关闭。关闭时按下表示开启。*/
	 caps_lock_status = !caps_lock_status;
c0004b82:	a1 98 85 00 c0       	mov    0xc0008598,%eax
c0004b87:	85 c0                	test   %eax,%eax
c0004b89:	0f 94 c0             	sete   %al
c0004b8c:	0f b6 c0             	movzbl %al,%eax
c0004b8f:	a3 98 85 00 c0       	mov    %eax,0xc0008598
/work/x86_os_my/device/keyboard.c:157

   } 
   /* 若为通码,只处理数组中定义的键以及alt_right和ctrl键,全是make_code */
   else if ((scancode > 0x00 && scancode < 0x3b) || \
	       (scancode == alt_r_make) || \
	       (scancode == ctrl_r_make)) {
c0004b94:	eb 1a                	jmp    c0004bb0 <intr_keyboard_handler+0x295>
/work/x86_os_my/device/keyboard.c:157 (discriminator 3)
c0004b96:	eb 18                	jmp    c0004bb0 <intr_keyboard_handler+0x295>
/work/x86_os_my/device/keyboard.c:226
      /* 不管之前是否有按下caps_lock键,当再次按下时则状态取反,
       * 即:已经开启时,再按下同样的键是关闭。关闭时按下表示开启。*/
	 caps_lock_status = !caps_lock_status;
      }
   } else {
      put_str("unknown key\n");
c0004b98:	83 ec 0c             	sub    $0xc,%esp
c0004b9b:	68 ad 64 00 c0       	push   $0xc00064ad
c0004ba0:	e8 5b d8 ff ff       	call   c0002400 <put_str>
c0004ba5:	83 c4 10             	add    $0x10,%esp
c0004ba8:	eb 07                	jmp    c0004bb1 <intr_keyboard_handler+0x296>
/work/x86_os_my/device/keyboard.c:151
	 shift_status = false;
      } else if (make_code == alt_l_make || make_code == alt_r_make) {
	 alt_status = false;
      } /* 由于caps_lock不是弹起后关闭,所以需要单独处理 */

      return;   // 直接返回结束此次中断处理程序
c0004baa:	90                   	nop
c0004bab:	eb 04                	jmp    c0004bb1 <intr_keyboard_handler+0x296>
/work/x86_os_my/device/keyboard.c:210
   /* 若kbd_buf中未满并且待加入的cur_char不为0,
    * 则将其加入到缓冲区kbd_buf中 */
	 if (!ioq_full(&kbd_buf)) {
	    ioq_putchar(&kbd_buf, cur_char);
	 }
	 return;
c0004bad:	90                   	nop
c0004bae:	eb 01                	jmp    c0004bb1 <intr_keyboard_handler+0x296>
/work/x86_os_my/device/keyboard.c:157

   } 
   /* 若为通码,只处理数组中定义的键以及alt_right和ctrl键,全是make_code */
   else if ((scancode > 0x00 && scancode < 0x3b) || \
	       (scancode == alt_r_make) || \
	       (scancode == ctrl_r_make)) {
c0004bb0:	90                   	nop
/work/x86_os_my/device/keyboard.c:228
	 caps_lock_status = !caps_lock_status;
      }
   } else {
      put_str("unknown key\n");
   }
}
c0004bb1:	c9                   	leave  
c0004bb2:	c3                   	ret    

c0004bb3 <keyboard_init>:
keyboard_init():
/work/x86_os_my/device/keyboard.c:231

/* 键盘初始化 */
void keyboard_init() {
c0004bb3:	55                   	push   %ebp
c0004bb4:	89 e5                	mov    %esp,%ebp
c0004bb6:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/keyboard.c:232
   put_str("keyboard init start\n");
c0004bb9:	83 ec 0c             	sub    $0xc,%esp
c0004bbc:	68 ba 64 00 c0       	push   $0xc00064ba
c0004bc1:	e8 3a d8 ff ff       	call   c0002400 <put_str>
c0004bc6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/keyboard.c:233
   ioqueue_init(&kbd_buf);
c0004bc9:	83 ec 0c             	sub    $0xc,%esp
c0004bcc:	68 e0 8b 00 c0       	push   $0xc0008be0
c0004bd1:	e8 28 00 00 00       	call   c0004bfe <ioqueue_init>
c0004bd6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/keyboard.c:234
   register_handler(0x21, intr_keyboard_handler);
c0004bd9:	83 ec 08             	sub    $0x8,%esp
c0004bdc:	68 1b 49 00 c0       	push   $0xc000491b
c0004be1:	6a 21                	push   $0x21
c0004be3:	e8 c2 d0 ff ff       	call   c0001caa <register_handler>
c0004be8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/keyboard.c:235
   put_str("keyboard init done\n");
c0004beb:	83 ec 0c             	sub    $0xc,%esp
c0004bee:	68 cf 64 00 c0       	push   $0xc00064cf
c0004bf3:	e8 08 d8 ff ff       	call   c0002400 <put_str>
c0004bf8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/keyboard.c:236
}
c0004bfb:	90                   	nop
c0004bfc:	c9                   	leave  
c0004bfd:	c3                   	ret    

c0004bfe <ioqueue_init>:
ioqueue_init():
/work/x86_os_my/device/ioqueue.c:7
#include "interrupt.h"
#include "global.h"
#include "debug.h"

/* 初始化io队列ioq */
void ioqueue_init(struct ioqueue* ioq) {
c0004bfe:	55                   	push   %ebp
c0004bff:	89 e5                	mov    %esp,%ebp
c0004c01:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/ioqueue.c:8
   lock_init(&ioq->lock);     // 初始化io队列的锁
c0004c04:	8b 45 08             	mov    0x8(%ebp),%eax
c0004c07:	83 ec 0c             	sub    $0xc,%esp
c0004c0a:	50                   	push   %eax
c0004c0b:	e8 05 fa ff ff       	call   c0004615 <lock_init>
c0004c10:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:9
   ioq->producer = ioq->consumer = NULL;  // 生产者和消费者置空
c0004c13:	8b 45 08             	mov    0x8(%ebp),%eax
c0004c16:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
c0004c1d:	8b 45 08             	mov    0x8(%ebp),%eax
c0004c20:	8b 50 20             	mov    0x20(%eax),%edx
c0004c23:	8b 45 08             	mov    0x8(%ebp),%eax
c0004c26:	89 50 1c             	mov    %edx,0x1c(%eax)
/work/x86_os_my/device/ioqueue.c:10
   ioq->head = ioq->tail = 0; // 队列的首尾指针指向缓冲区数组第0个位置
c0004c29:	8b 45 08             	mov    0x8(%ebp),%eax
c0004c2c:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)
c0004c33:	8b 45 08             	mov    0x8(%ebp),%eax
c0004c36:	8b 50 68             	mov    0x68(%eax),%edx
c0004c39:	8b 45 08             	mov    0x8(%ebp),%eax
c0004c3c:	89 50 64             	mov    %edx,0x64(%eax)
/work/x86_os_my/device/ioqueue.c:11
}
c0004c3f:	90                   	nop
c0004c40:	c9                   	leave  
c0004c41:	c3                   	ret    

c0004c42 <next_pos>:
next_pos():
/work/x86_os_my/device/ioqueue.c:14

/* 返回pos在缓冲区中的下一个位置值 */
static int32_t next_pos(int32_t pos) {
c0004c42:	55                   	push   %ebp
c0004c43:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/device/ioqueue.c:15
   return (pos + 1) % bufsize; 
c0004c45:	8b 45 08             	mov    0x8(%ebp),%eax
c0004c48:	8d 50 01             	lea    0x1(%eax),%edx
c0004c4b:	89 d0                	mov    %edx,%eax
c0004c4d:	c1 f8 1f             	sar    $0x1f,%eax
c0004c50:	c1 e8 1a             	shr    $0x1a,%eax
c0004c53:	01 c2                	add    %eax,%edx
c0004c55:	83 e2 3f             	and    $0x3f,%edx
c0004c58:	29 c2                	sub    %eax,%edx
c0004c5a:	89 d0                	mov    %edx,%eax
/work/x86_os_my/device/ioqueue.c:16
}
c0004c5c:	5d                   	pop    %ebp
c0004c5d:	c3                   	ret    

c0004c5e <ioq_full>:
ioq_full():
/work/x86_os_my/device/ioqueue.c:19

/* 判断队列是否已满 */
bool ioq_full(struct ioqueue* ioq) {
c0004c5e:	55                   	push   %ebp
c0004c5f:	89 e5                	mov    %esp,%ebp
c0004c61:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/ioqueue.c:20
   ASSERT(intr_get_status() == INTR_OFF);
c0004c64:	e8 1d d0 ff ff       	call   c0001c86 <intr_get_status>
c0004c69:	85 c0                	test   %eax,%eax
c0004c6b:	74 19                	je     c0004c86 <ioq_full+0x28>
/work/x86_os_my/device/ioqueue.c:20 (discriminator 1)
c0004c6d:	68 e4 64 00 c0       	push   $0xc00064e4
c0004c72:	68 48 65 00 c0       	push   $0xc0006548
c0004c77:	6a 14                	push   $0x14
c0004c79:	68 02 65 00 c0       	push   $0xc0006502
c0004c7e:	e8 ef d8 ff ff       	call   c0002572 <panic_spin>
c0004c83:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:21
   return next_pos(ioq->head) == ioq->tail;
c0004c86:	8b 45 08             	mov    0x8(%ebp),%eax
c0004c89:	8b 40 64             	mov    0x64(%eax),%eax
c0004c8c:	83 ec 0c             	sub    $0xc,%esp
c0004c8f:	50                   	push   %eax
c0004c90:	e8 ad ff ff ff       	call   c0004c42 <next_pos>
c0004c95:	83 c4 10             	add    $0x10,%esp
c0004c98:	89 c2                	mov    %eax,%edx
c0004c9a:	8b 45 08             	mov    0x8(%ebp),%eax
c0004c9d:	8b 40 68             	mov    0x68(%eax),%eax
c0004ca0:	39 c2                	cmp    %eax,%edx
c0004ca2:	0f 94 c0             	sete   %al
c0004ca5:	0f b6 c0             	movzbl %al,%eax
/work/x86_os_my/device/ioqueue.c:22
}
c0004ca8:	c9                   	leave  
c0004ca9:	c3                   	ret    

c0004caa <ioq_empty>:
ioq_empty():
/work/x86_os_my/device/ioqueue.c:25

/* 判断队列是否已空 */
static bool ioq_empty(struct ioqueue* ioq) {
c0004caa:	55                   	push   %ebp
c0004cab:	89 e5                	mov    %esp,%ebp
c0004cad:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/ioqueue.c:26
   ASSERT(intr_get_status() == INTR_OFF);
c0004cb0:	e8 d1 cf ff ff       	call   c0001c86 <intr_get_status>
c0004cb5:	85 c0                	test   %eax,%eax
c0004cb7:	74 19                	je     c0004cd2 <ioq_empty+0x28>
/work/x86_os_my/device/ioqueue.c:26 (discriminator 1)
c0004cb9:	68 e4 64 00 c0       	push   $0xc00064e4
c0004cbe:	68 54 65 00 c0       	push   $0xc0006554
c0004cc3:	6a 1a                	push   $0x1a
c0004cc5:	68 02 65 00 c0       	push   $0xc0006502
c0004cca:	e8 a3 d8 ff ff       	call   c0002572 <panic_spin>
c0004ccf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:27
   return ioq->head == ioq->tail;
c0004cd2:	8b 45 08             	mov    0x8(%ebp),%eax
c0004cd5:	8b 50 64             	mov    0x64(%eax),%edx
c0004cd8:	8b 45 08             	mov    0x8(%ebp),%eax
c0004cdb:	8b 40 68             	mov    0x68(%eax),%eax
c0004cde:	39 c2                	cmp    %eax,%edx
c0004ce0:	0f 94 c0             	sete   %al
c0004ce3:	0f b6 c0             	movzbl %al,%eax
/work/x86_os_my/device/ioqueue.c:28
}
c0004ce6:	c9                   	leave  
c0004ce7:	c3                   	ret    

c0004ce8 <ioq_wait>:
ioq_wait():
/work/x86_os_my/device/ioqueue.c:31

/* 使当前生产者或消费者在此缓冲区上等待 */
static void ioq_wait(struct task_struct** waiter) {
c0004ce8:	55                   	push   %ebp
c0004ce9:	89 e5                	mov    %esp,%ebp
c0004ceb:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/ioqueue.c:32
   ASSERT(*waiter == NULL && waiter != NULL);
c0004cee:	8b 45 08             	mov    0x8(%ebp),%eax
c0004cf1:	8b 00                	mov    (%eax),%eax
c0004cf3:	85 c0                	test   %eax,%eax
c0004cf5:	75 06                	jne    c0004cfd <ioq_wait+0x15>
/work/x86_os_my/device/ioqueue.c:32 (discriminator 1)
c0004cf7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0004cfb:	75 19                	jne    c0004d16 <ioq_wait+0x2e>
/work/x86_os_my/device/ioqueue.c:32 (discriminator 3)
c0004cfd:	68 14 65 00 c0       	push   $0xc0006514
c0004d02:	68 60 65 00 c0       	push   $0xc0006560
c0004d07:	6a 20                	push   $0x20
c0004d09:	68 02 65 00 c0       	push   $0xc0006502
c0004d0e:	e8 5f d8 ff ff       	call   c0002572 <panic_spin>
c0004d13:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:33
   *waiter = running_thread();
c0004d16:	e8 3f f0 ff ff       	call   c0003d5a <running_thread>
c0004d1b:	89 c2                	mov    %eax,%edx
c0004d1d:	8b 45 08             	mov    0x8(%ebp),%eax
c0004d20:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/device/ioqueue.c:34
   thread_block(TASK_BLOCKED);
c0004d22:	83 ec 0c             	sub    $0xc,%esp
c0004d25:	6a 02                	push   $0x2
c0004d27:	e8 3a f4 ff ff       	call   c0004166 <thread_block>
c0004d2c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:35
}
c0004d2f:	90                   	nop
c0004d30:	c9                   	leave  
c0004d31:	c3                   	ret    

c0004d32 <wakeup>:
wakeup():
/work/x86_os_my/device/ioqueue.c:38

/* 唤醒waiter */
static void wakeup(struct task_struct** waiter) {
c0004d32:	55                   	push   %ebp
c0004d33:	89 e5                	mov    %esp,%ebp
c0004d35:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/ioqueue.c:39
   ASSERT(*waiter != NULL);
c0004d38:	8b 45 08             	mov    0x8(%ebp),%eax
c0004d3b:	8b 00                	mov    (%eax),%eax
c0004d3d:	85 c0                	test   %eax,%eax
c0004d3f:	75 19                	jne    c0004d5a <wakeup+0x28>
/work/x86_os_my/device/ioqueue.c:39 (discriminator 1)
c0004d41:	68 36 65 00 c0       	push   $0xc0006536
c0004d46:	68 6c 65 00 c0       	push   $0xc000656c
c0004d4b:	6a 27                	push   $0x27
c0004d4d:	68 02 65 00 c0       	push   $0xc0006502
c0004d52:	e8 1b d8 ff ff       	call   c0002572 <panic_spin>
c0004d57:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:40
   thread_unblock(*waiter); 
c0004d5a:	8b 45 08             	mov    0x8(%ebp),%eax
c0004d5d:	8b 00                	mov    (%eax),%eax
c0004d5f:	83 ec 0c             	sub    $0xc,%esp
c0004d62:	50                   	push   %eax
c0004d63:	e8 61 f4 ff ff       	call   c00041c9 <thread_unblock>
c0004d68:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:41
   *waiter = NULL;
c0004d6b:	8b 45 08             	mov    0x8(%ebp),%eax
c0004d6e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/device/ioqueue.c:42
}
c0004d74:	90                   	nop
c0004d75:	c9                   	leave  
c0004d76:	c3                   	ret    

c0004d77 <ioq_getchar>:
ioq_getchar():
/work/x86_os_my/device/ioqueue.c:45

/* 消费者从ioq队列中获取一个字符 */
char ioq_getchar(struct ioqueue* ioq) {
c0004d77:	55                   	push   %ebp
c0004d78:	89 e5                	mov    %esp,%ebp
c0004d7a:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/ioqueue.c:46
   ASSERT(intr_get_status() == INTR_OFF);
c0004d7d:	e8 04 cf ff ff       	call   c0001c86 <intr_get_status>
c0004d82:	85 c0                	test   %eax,%eax
c0004d84:	74 4b                	je     c0004dd1 <ioq_getchar+0x5a>
/work/x86_os_my/device/ioqueue.c:46 (discriminator 1)
c0004d86:	68 e4 64 00 c0       	push   $0xc00064e4
c0004d8b:	68 74 65 00 c0       	push   $0xc0006574
c0004d90:	6a 2e                	push   $0x2e
c0004d92:	68 02 65 00 c0       	push   $0xc0006502
c0004d97:	e8 d6 d7 ff ff       	call   c0002572 <panic_spin>
c0004d9c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:51 (discriminator 1)

/* 若缓冲区(队列)为空,把消费者ioq->consumer记为当前线程自己,
 * 目的是将来生产者往缓冲区里装商品后,生产者知道唤醒哪个消费者,
 * 也就是唤醒当前线程自己*/
   while (ioq_empty(ioq)) {
c0004d9f:	eb 30                	jmp    c0004dd1 <ioq_getchar+0x5a>
/work/x86_os_my/device/ioqueue.c:52
      lock_acquire(&ioq->lock);	 
c0004da1:	8b 45 08             	mov    0x8(%ebp),%eax
c0004da4:	83 ec 0c             	sub    $0xc,%esp
c0004da7:	50                   	push   %eax
c0004da8:	e8 42 fa ff ff       	call   c00047ef <lock_acquire>
c0004dad:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:53
      ioq_wait(&ioq->consumer);
c0004db0:	8b 45 08             	mov    0x8(%ebp),%eax
c0004db3:	83 c0 20             	add    $0x20,%eax
c0004db6:	83 ec 0c             	sub    $0xc,%esp
c0004db9:	50                   	push   %eax
c0004dba:	e8 29 ff ff ff       	call   c0004ce8 <ioq_wait>
c0004dbf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:54
      lock_release(&ioq->lock);
c0004dc2:	8b 45 08             	mov    0x8(%ebp),%eax
c0004dc5:	83 ec 0c             	sub    $0xc,%esp
c0004dc8:	50                   	push   %eax
c0004dc9:	e8 98 fa ff ff       	call   c0004866 <lock_release>
c0004dce:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:51
   ASSERT(intr_get_status() == INTR_OFF);

/* 若缓冲区(队列)为空,把消费者ioq->consumer记为当前线程自己,
 * 目的是将来生产者往缓冲区里装商品后,生产者知道唤醒哪个消费者,
 * 也就是唤醒当前线程自己*/
   while (ioq_empty(ioq)) {
c0004dd1:	83 ec 0c             	sub    $0xc,%esp
c0004dd4:	ff 75 08             	pushl  0x8(%ebp)
c0004dd7:	e8 ce fe ff ff       	call   c0004caa <ioq_empty>
c0004ddc:	83 c4 10             	add    $0x10,%esp
c0004ddf:	85 c0                	test   %eax,%eax
c0004de1:	75 be                	jne    c0004da1 <ioq_getchar+0x2a>
/work/x86_os_my/device/ioqueue.c:57
      lock_acquire(&ioq->lock);	 
      ioq_wait(&ioq->consumer);
      lock_release(&ioq->lock);
   }

   char byte = ioq->buf[ioq->tail];	  // 从缓冲区中取出
c0004de3:	8b 45 08             	mov    0x8(%ebp),%eax
c0004de6:	8b 40 68             	mov    0x68(%eax),%eax
c0004de9:	8b 55 08             	mov    0x8(%ebp),%edx
c0004dec:	0f b6 44 02 24       	movzbl 0x24(%edx,%eax,1),%eax
c0004df1:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/device/ioqueue.c:58
   ioq->tail = next_pos(ioq->tail);	  // 把读游标移到下一位置
c0004df4:	8b 45 08             	mov    0x8(%ebp),%eax
c0004df7:	8b 40 68             	mov    0x68(%eax),%eax
c0004dfa:	83 ec 0c             	sub    $0xc,%esp
c0004dfd:	50                   	push   %eax
c0004dfe:	e8 3f fe ff ff       	call   c0004c42 <next_pos>
c0004e03:	83 c4 10             	add    $0x10,%esp
c0004e06:	89 c2                	mov    %eax,%edx
c0004e08:	8b 45 08             	mov    0x8(%ebp),%eax
c0004e0b:	89 50 68             	mov    %edx,0x68(%eax)
/work/x86_os_my/device/ioqueue.c:60

   if (ioq->producer != NULL) {
c0004e0e:	8b 45 08             	mov    0x8(%ebp),%eax
c0004e11:	8b 40 1c             	mov    0x1c(%eax),%eax
c0004e14:	85 c0                	test   %eax,%eax
c0004e16:	74 12                	je     c0004e2a <ioq_getchar+0xb3>
/work/x86_os_my/device/ioqueue.c:61
      wakeup(&ioq->producer);		  // 唤醒生产者
c0004e18:	8b 45 08             	mov    0x8(%ebp),%eax
c0004e1b:	83 c0 1c             	add    $0x1c,%eax
c0004e1e:	83 ec 0c             	sub    $0xc,%esp
c0004e21:	50                   	push   %eax
c0004e22:	e8 0b ff ff ff       	call   c0004d32 <wakeup>
c0004e27:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:64
   }

   return byte; 
c0004e2a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
/work/x86_os_my/device/ioqueue.c:65
}
c0004e2e:	c9                   	leave  
c0004e2f:	c3                   	ret    

c0004e30 <ioq_putchar>:
ioq_putchar():
/work/x86_os_my/device/ioqueue.c:68

/* 生产者往ioq队列中写入一个字符byte */
void ioq_putchar(struct ioqueue* ioq, char byte) {
c0004e30:	55                   	push   %ebp
c0004e31:	89 e5                	mov    %esp,%ebp
c0004e33:	83 ec 18             	sub    $0x18,%esp
c0004e36:	8b 45 0c             	mov    0xc(%ebp),%eax
c0004e39:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/device/ioqueue.c:69
   ASSERT(intr_get_status() == INTR_OFF);
c0004e3c:	e8 45 ce ff ff       	call   c0001c86 <intr_get_status>
c0004e41:	85 c0                	test   %eax,%eax
c0004e43:	74 4b                	je     c0004e90 <ioq_putchar+0x60>
/work/x86_os_my/device/ioqueue.c:69 (discriminator 1)
c0004e45:	68 e4 64 00 c0       	push   $0xc00064e4
c0004e4a:	68 80 65 00 c0       	push   $0xc0006580
c0004e4f:	6a 45                	push   $0x45
c0004e51:	68 02 65 00 c0       	push   $0xc0006502
c0004e56:	e8 17 d7 ff ff       	call   c0002572 <panic_spin>
c0004e5b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:74 (discriminator 1)

/* 若缓冲区(队列)已经满了,把生产者ioq->producer记为自己,
 * 为的是当缓冲区里的东西被消费者取完后让消费者知道唤醒哪个生产者,
 * 也就是唤醒当前线程自己*/
   while (ioq_full(ioq)) {
c0004e5e:	eb 30                	jmp    c0004e90 <ioq_putchar+0x60>
/work/x86_os_my/device/ioqueue.c:75
      lock_acquire(&ioq->lock);
c0004e60:	8b 45 08             	mov    0x8(%ebp),%eax
c0004e63:	83 ec 0c             	sub    $0xc,%esp
c0004e66:	50                   	push   %eax
c0004e67:	e8 83 f9 ff ff       	call   c00047ef <lock_acquire>
c0004e6c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:76
      ioq_wait(&ioq->producer);
c0004e6f:	8b 45 08             	mov    0x8(%ebp),%eax
c0004e72:	83 c0 1c             	add    $0x1c,%eax
c0004e75:	83 ec 0c             	sub    $0xc,%esp
c0004e78:	50                   	push   %eax
c0004e79:	e8 6a fe ff ff       	call   c0004ce8 <ioq_wait>
c0004e7e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:77
      lock_release(&ioq->lock);
c0004e81:	8b 45 08             	mov    0x8(%ebp),%eax
c0004e84:	83 ec 0c             	sub    $0xc,%esp
c0004e87:	50                   	push   %eax
c0004e88:	e8 d9 f9 ff ff       	call   c0004866 <lock_release>
c0004e8d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:74
   ASSERT(intr_get_status() == INTR_OFF);

/* 若缓冲区(队列)已经满了,把生产者ioq->producer记为自己,
 * 为的是当缓冲区里的东西被消费者取完后让消费者知道唤醒哪个生产者,
 * 也就是唤醒当前线程自己*/
   while (ioq_full(ioq)) {
c0004e90:	83 ec 0c             	sub    $0xc,%esp
c0004e93:	ff 75 08             	pushl  0x8(%ebp)
c0004e96:	e8 c3 fd ff ff       	call   c0004c5e <ioq_full>
c0004e9b:	83 c4 10             	add    $0x10,%esp
c0004e9e:	85 c0                	test   %eax,%eax
c0004ea0:	75 be                	jne    c0004e60 <ioq_putchar+0x30>
/work/x86_os_my/device/ioqueue.c:79
      lock_acquire(&ioq->lock);
      ioq_wait(&ioq->producer);
      lock_release(&ioq->lock);
   }
   ioq->buf[ioq->head] = byte;      // 把字节放入缓冲区中
c0004ea2:	8b 45 08             	mov    0x8(%ebp),%eax
c0004ea5:	8b 40 64             	mov    0x64(%eax),%eax
c0004ea8:	8b 55 08             	mov    0x8(%ebp),%edx
c0004eab:	0f b6 4d f4          	movzbl -0xc(%ebp),%ecx
c0004eaf:	88 4c 02 24          	mov    %cl,0x24(%edx,%eax,1)
/work/x86_os_my/device/ioqueue.c:80
   ioq->head = next_pos(ioq->head); // 把写游标移到下一位置
c0004eb3:	8b 45 08             	mov    0x8(%ebp),%eax
c0004eb6:	8b 40 64             	mov    0x64(%eax),%eax
c0004eb9:	83 ec 0c             	sub    $0xc,%esp
c0004ebc:	50                   	push   %eax
c0004ebd:	e8 80 fd ff ff       	call   c0004c42 <next_pos>
c0004ec2:	83 c4 10             	add    $0x10,%esp
c0004ec5:	89 c2                	mov    %eax,%edx
c0004ec7:	8b 45 08             	mov    0x8(%ebp),%eax
c0004eca:	89 50 64             	mov    %edx,0x64(%eax)
/work/x86_os_my/device/ioqueue.c:82

   if (ioq->consumer != NULL) {
c0004ecd:	8b 45 08             	mov    0x8(%ebp),%eax
c0004ed0:	8b 40 20             	mov    0x20(%eax),%eax
c0004ed3:	85 c0                	test   %eax,%eax
c0004ed5:	74 12                	je     c0004ee9 <ioq_putchar+0xb9>
/work/x86_os_my/device/ioqueue.c:83
      wakeup(&ioq->consumer);          // 唤醒消费者
c0004ed7:	8b 45 08             	mov    0x8(%ebp),%eax
c0004eda:	83 c0 20             	add    $0x20,%eax
c0004edd:	83 ec 0c             	sub    $0xc,%esp
c0004ee0:	50                   	push   %eax
c0004ee1:	e8 4c fe ff ff       	call   c0004d32 <wakeup>
c0004ee6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:85
   }
}
c0004ee9:	90                   	nop
c0004eea:	c9                   	leave  
c0004eeb:	c3                   	ret    

c0004eec <update_tss_esp>:
update_tss_esp():
/work/x86_os_my/userprog/tss.c:40
	uint32_t io_base;
}; 
static struct tss g_tss;

/* 更新tss中esp0字段的值为pthread的0级栈 */
void update_tss_esp(struct task_struct* pthread) {
c0004eec:	55                   	push   %ebp
c0004eed:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/userprog/tss.c:41
	g_tss.esp0 = (uint32_t*)((uint32_t)pthread + PG_SIZE);
c0004eef:	8b 45 08             	mov    0x8(%ebp),%eax
c0004ef2:	05 00 10 00 00       	add    $0x1000,%eax
c0004ef7:	a3 a4 85 00 c0       	mov    %eax,0xc00085a4
/work/x86_os_my/userprog/tss.c:42
}
c0004efc:	90                   	nop
c0004efd:	5d                   	pop    %ebp
c0004efe:	c3                   	ret    

c0004eff <make_gdt_desc>:
make_gdt_desc():
/work/x86_os_my/userprog/tss.c:45

/* c语言方式，创建gdt描述符 */
static struct gdt_desc make_gdt_desc(uint32_t* desc_addr, uint32_t limit, uint8_t attr_low, uint8_t attr_high) {
c0004eff:	55                   	push   %ebp
c0004f00:	89 e5                	mov    %esp,%ebp
c0004f02:	83 ec 18             	sub    $0x18,%esp
c0004f05:	8b 55 14             	mov    0x14(%ebp),%edx
c0004f08:	8b 45 18             	mov    0x18(%ebp),%eax
c0004f0b:	88 55 ec             	mov    %dl,-0x14(%ebp)
c0004f0e:	88 45 e8             	mov    %al,-0x18(%ebp)
/work/x86_os_my/userprog/tss.c:46
	uint32_t desc_base = (uint32_t)desc_addr;
c0004f11:	8b 45 0c             	mov    0xc(%ebp),%eax
c0004f14:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/userprog/tss.c:48
	struct gdt_desc desc;
	desc.limit_low_word = limit & 0x0000ffff;
c0004f17:	8b 45 10             	mov    0x10(%ebp),%eax
c0004f1a:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
/work/x86_os_my/userprog/tss.c:49
	desc.base_low_word = desc_base & 0x0000ffff;
c0004f1e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0004f21:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
/work/x86_os_my/userprog/tss.c:50
	desc.base_mid_byte = ((desc_base & 0x00ff0000) >> 16);
c0004f25:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0004f28:	25 00 00 ff 00       	and    $0xff0000,%eax
c0004f2d:	c1 e8 10             	shr    $0x10,%eax
c0004f30:	88 45 f8             	mov    %al,-0x8(%ebp)
/work/x86_os_my/userprog/tss.c:51
	desc.attr_low_byte = (uint8_t)(attr_low);
c0004f33:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0004f37:	88 45 f9             	mov    %al,-0x7(%ebp)
/work/x86_os_my/userprog/tss.c:52
	desc.limit_high_attr_high = (((limit & 0x000f0000) >> 16) + (uint8_t)(attr_high));
c0004f3a:	8b 45 10             	mov    0x10(%ebp),%eax
c0004f3d:	25 00 00 0f 00       	and    $0xf0000,%eax
c0004f42:	c1 e8 10             	shr    $0x10,%eax
c0004f45:	89 c2                	mov    %eax,%edx
c0004f47:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c0004f4b:	01 d0                	add    %edx,%eax
c0004f4d:	88 45 fa             	mov    %al,-0x6(%ebp)
/work/x86_os_my/userprog/tss.c:53
	desc.base_high_byte = desc_base >> 24;
c0004f50:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0004f53:	c1 e8 18             	shr    $0x18,%eax
c0004f56:	88 45 fb             	mov    %al,-0x5(%ebp)
/work/x86_os_my/userprog/tss.c:54
	return desc;
c0004f59:	8b 4d 08             	mov    0x8(%ebp),%ecx
c0004f5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004f5f:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0004f62:	89 01                	mov    %eax,(%ecx)
c0004f64:	89 51 04             	mov    %edx,0x4(%ecx)
/work/x86_os_my/userprog/tss.c:55
}
c0004f67:	8b 45 08             	mov    0x8(%ebp),%eax
c0004f6a:	c9                   	leave  
c0004f6b:	c2 04 00             	ret    $0x4

c0004f6e <tss_init>:
tss_init():
/work/x86_os_my/userprog/tss.c:61

/* 在gdt中创建tss描述符
 * 重新加载 gdt
 * 加载 tr
 */
void tss_init() {
c0004f6e:	55                   	push   %ebp
c0004f6f:	89 e5                	mov    %esp,%ebp
c0004f71:	53                   	push   %ebx
c0004f72:	83 ec 24             	sub    $0x24,%esp
/work/x86_os_my/userprog/tss.c:62
	put_str("tss_init start\n");
c0004f75:	83 ec 0c             	sub    $0xc,%esp
c0004f78:	68 8c 65 00 c0       	push   $0xc000658c
c0004f7d:	e8 7e d4 ff ff       	call   c0002400 <put_str>
c0004f82:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/tss.c:63
	uint32_t tss_size = sizeof(g_tss);
c0004f85:	c7 45 f4 6c 00 00 00 	movl   $0x6c,-0xc(%ebp)
/work/x86_os_my/userprog/tss.c:64
	memset(&g_tss, 0, tss_size);
c0004f8c:	83 ec 04             	sub    $0x4,%esp
c0004f8f:	ff 75 f4             	pushl  -0xc(%ebp)
c0004f92:	6a 00                	push   $0x0
c0004f94:	68 a0 85 00 c0       	push   $0xc00085a0
c0004f99:	e8 ec e9 ff ff       	call   c000398a <memset>
c0004f9e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/tss.c:66
	
	g_tss.ss0 = SELECTOR_K_STACK;	// 0 级栈段的选择子 
c0004fa1:	c7 05 a8 85 00 c0 10 	movl   $0x10,0xc00085a8
c0004fa8:	00 00 00 
/work/x86_os_my/userprog/tss.c:67
	g_tss.io_base = tss_size;		// 当 IO 位图的偏移地址大于等于 TSS 大小减 1 时，就表示没有 IO 位图。
c0004fab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004fae:	a3 08 86 00 c0       	mov    %eax,0xc0008608
/work/x86_os_my/userprog/tss.c:75
	 * 内核地址 0xC000_0900 是映射到 0x900 的 
	 * 在GDT中，第 0 个段描述符不可用，第 1 个为代码段，第 2 个为数据段和栈，第 3 个为显存段
	 */

	/* 在gdt中添加dpl为0的TSS描述符 */
	*((struct gdt_desc*)0xc0000920) = make_gdt_desc((uint32_t*)&g_tss, tss_size - 1, TSS_ATTR_LOW, TSS_ATTR_HIGH);
c0004fb3:	bb 20 09 00 c0       	mov    $0xc0000920,%ebx
c0004fb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004fbb:	8d 50 ff             	lea    -0x1(%eax),%edx
c0004fbe:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0004fc1:	83 ec 0c             	sub    $0xc,%esp
c0004fc4:	68 80 00 00 00       	push   $0x80
c0004fc9:	68 89 00 00 00       	push   $0x89
c0004fce:	52                   	push   %edx
c0004fcf:	68 a0 85 00 c0       	push   $0xc00085a0
c0004fd4:	50                   	push   %eax
c0004fd5:	e8 25 ff ff ff       	call   c0004eff <make_gdt_desc>
c0004fda:	83 c4 1c             	add    $0x1c,%esp
c0004fdd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0004fe0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0004fe3:	89 03                	mov    %eax,(%ebx)
c0004fe5:	89 53 04             	mov    %edx,0x4(%ebx)
/work/x86_os_my/userprog/tss.c:78

	/* 在gdt中添加dpl为3的,用户级,数据段和代码段描述符 */
	*((struct gdt_desc*)0xc0000928) = make_gdt_desc((uint32_t*)0, 0xfffff, GDT_CODE_ATTR_LOW_DPL3, GDT_ATTR_HIGH);
c0004fe8:	bb 28 09 00 c0       	mov    $0xc0000928,%ebx
c0004fed:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0004ff0:	83 ec 0c             	sub    $0xc,%esp
c0004ff3:	68 c0 00 00 00       	push   $0xc0
c0004ff8:	68 f8 00 00 00       	push   $0xf8
c0004ffd:	68 ff ff 0f 00       	push   $0xfffff
c0005002:	6a 00                	push   $0x0
c0005004:	50                   	push   %eax
c0005005:	e8 f5 fe ff ff       	call   c0004eff <make_gdt_desc>
c000500a:	83 c4 1c             	add    $0x1c,%esp
c000500d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0005010:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0005013:	89 03                	mov    %eax,(%ebx)
c0005015:	89 53 04             	mov    %edx,0x4(%ebx)
/work/x86_os_my/userprog/tss.c:79
	*((struct gdt_desc*)0xc0000930) = make_gdt_desc((uint32_t*)0, 0xfffff, GDT_DATA_ATTR_LOW_DPL3, GDT_ATTR_HIGH);
c0005018:	bb 30 09 00 c0       	mov    $0xc0000930,%ebx
c000501d:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0005020:	83 ec 0c             	sub    $0xc,%esp
c0005023:	68 c0 00 00 00       	push   $0xc0
c0005028:	68 f2 00 00 00       	push   $0xf2
c000502d:	68 ff ff 0f 00       	push   $0xfffff
c0005032:	6a 00                	push   $0x0
c0005034:	50                   	push   %eax
c0005035:	e8 c5 fe ff ff       	call   c0004eff <make_gdt_desc>
c000503a:	83 c4 1c             	add    $0x1c,%esp
c000503d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0005040:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0005043:	89 03                	mov    %eax,(%ebx)
c0005045:	89 53 04             	mov    %edx,0x4(%ebx)
/work/x86_os_my/userprog/tss.c:83

	/* GDTR 16位的limit、32位的段基址 */
	// 先转换成 uint32_t 后，再将其转换成 uint64_t 位（不可一步到位转为 uint64_t）
	uint64_t gdt_operand = ((8 * 7 - 1) | ((uint64_t)(uint32_t)0xc0000900 << 16));   // 7个描述符大小
c0005048:	c7 45 e8 37 00 00 09 	movl   $0x9000037,-0x18(%ebp)
c000504f:	c7 45 ec 00 c0 00 00 	movl   $0xc000,-0x14(%ebp)
/work/x86_os_my/userprog/tss.c:84
	asm volatile ("lgdt %0" : : "m" (gdt_operand));
c0005056:	0f 01 55 e8          	lgdtl  -0x18(%ebp)
/work/x86_os_my/userprog/tss.c:85
	asm volatile ("ltr %w0" : : "r" (SELECTOR_TSS));
c000505a:	b8 20 00 00 00       	mov    $0x20,%eax
c000505f:	0f 00 d8             	ltr    %ax
/work/x86_os_my/userprog/tss.c:86
	put_str("tss_init and ltr done\n");
c0005062:	83 ec 0c             	sub    $0xc,%esp
c0005065:	68 9c 65 00 c0       	push   $0xc000659c
c000506a:	e8 91 d3 ff ff       	call   c0002400 <put_str>
c000506f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/tss.c:87
}
c0005072:	90                   	nop
c0005073:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0005076:	c9                   	leave  
c0005077:	c3                   	ret    

c0005078 <start_process>:
start_process():
/work/x86_os_my/userprog/process.c:17
extern void intr_exit(void);

/* 构建用户进程初始上下文信息
 * 填充用户进程的中断栈，并将中断栈的信息，利用iretd填充到 CPU 中
 */
void start_process(void* filename_) {
c0005078:	55                   	push   %ebp
c0005079:	89 e5                	mov    %esp,%ebp
c000507b:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/process.c:18
	void* function = filename_;
c000507e:	8b 45 08             	mov    0x8(%ebp),%eax
c0005081:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:19
	struct task_struct* cur = running_thread();
c0005084:	e8 d1 ec ff ff       	call   c0003d5a <running_thread>
c0005089:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/process.c:20
	cur->self_kstack += sizeof(struct thread_stack);
c000508c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000508f:	8b 00                	mov    (%eax),%eax
c0005091:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
c0005097:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000509a:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/userprog/process.c:21
	struct intr_stack* proc_stack = (struct intr_stack*)cur->self_kstack;	 
c000509c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000509f:	8b 00                	mov    (%eax),%eax
c00050a1:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/userprog/process.c:22
	proc_stack->edi = proc_stack->esi = proc_stack->ebp = proc_stack->esp_dummy = 0;
c00050a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00050a7:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
c00050ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00050b1:	8b 50 10             	mov    0x10(%eax),%edx
c00050b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00050b7:	89 50 0c             	mov    %edx,0xc(%eax)
c00050ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00050bd:	8b 50 0c             	mov    0xc(%eax),%edx
c00050c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00050c3:	89 50 08             	mov    %edx,0x8(%eax)
c00050c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00050c9:	8b 50 08             	mov    0x8(%eax),%edx
c00050cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00050cf:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/userprog/process.c:23
	proc_stack->ebx = proc_stack->edx = proc_stack->ecx = proc_stack->eax = 0;
c00050d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00050d5:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
c00050dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00050df:	8b 50 20             	mov    0x20(%eax),%edx
c00050e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00050e5:	89 50 1c             	mov    %edx,0x1c(%eax)
c00050e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00050eb:	8b 50 1c             	mov    0x1c(%eax),%edx
c00050ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00050f1:	89 50 18             	mov    %edx,0x18(%eax)
c00050f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00050f7:	8b 50 18             	mov    0x18(%eax),%edx
c00050fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00050fd:	89 50 14             	mov    %edx,0x14(%eax)
/work/x86_os_my/userprog/process.c:28
	/* 在iretd返回时，如果发现未来的 CPL（也就是内核栈中 CS.RPL，或者说是返回到的用户进程的代码段CS.CPL）
	 * 权限低于（数值上大于） CPU 中段寄存器（如 DS、 ES、 FS、 GS）中选择子指向的内存段的 DPL，
	 * CPU 会自动将相应段寄存器的选择子置为 0 
	 * 这里gs的选择子在iretd返回后，会被自动清零。*/
	proc_stack->gs = 0;					// 用户态用不上,直接初始为0
c0005100:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005103:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
/work/x86_os_my/userprog/process.c:29
	proc_stack->ds = proc_stack->es = proc_stack->fs = SELECTOR_U_DATA;		// 用户级数据段
c000510a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000510d:	c7 40 28 33 00 00 00 	movl   $0x33,0x28(%eax)
c0005114:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005117:	8b 50 28             	mov    0x28(%eax),%edx
c000511a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000511d:	89 50 2c             	mov    %edx,0x2c(%eax)
c0005120:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005123:	8b 50 2c             	mov    0x2c(%eax),%edx
c0005126:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005129:	89 50 30             	mov    %edx,0x30(%eax)
/work/x86_os_my/userprog/process.c:30
	proc_stack->eip = function;			// 待执行的用户程序地址
c000512c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000512f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005132:	89 50 38             	mov    %edx,0x38(%eax)
/work/x86_os_my/userprog/process.c:31
	proc_stack->cs = SELECTOR_U_CODE;	// 用户级代码段
c0005135:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005138:	c7 40 3c 2b 00 00 00 	movl   $0x2b,0x3c(%eax)
/work/x86_os_my/userprog/process.c:32
	proc_stack->eflags = (EFLAGS_IOPL_0 | EFLAGS_MBS | EFLAGS_IF_1);
c000513f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005142:	c7 40 40 02 02 00 00 	movl   $0x202,0x40(%eax)
/work/x86_os_my/userprog/process.c:41
	 * process_activate 使用户进程页表生效【已经把CR3寄存器 更新为 用户进程的页表了】
	 * start_process    为用户进程创建3特权级栈【所以申请的内存空间来自用户进程的页表】
	 * 
	 * USER_STACK3_VADDR=(0xc0000000 - 0x1000)
	 */
	proc_stack->esp = (void*)((uint32_t)get_a_page(PF_USER, USER_STACK3_VADDR) + PG_SIZE) ;
c0005149:	83 ec 08             	sub    $0x8,%esp
c000514c:	68 00 f0 ff bf       	push   $0xbffff000
c0005151:	6a 02                	push   $0x2
c0005153:	e8 78 db ff ff       	call   c0002cd0 <get_a_page>
c0005158:	83 c4 10             	add    $0x10,%esp
c000515b:	05 00 10 00 00       	add    $0x1000,%eax
c0005160:	89 c2                	mov    %eax,%edx
c0005162:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005165:	89 50 44             	mov    %edx,0x44(%eax)
/work/x86_os_my/userprog/process.c:42
	proc_stack->ss = SELECTOR_U_DATA;
c0005168:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000516b:	c7 40 48 33 00 00 00 	movl   $0x33,0x48(%eax)
/work/x86_os_my/userprog/process.c:49
	/* 将 esp 替换为 proc_stack
	 * 通过 jmp intr_exit 那里的一系列 pop 指令和 iretd 指令，
	 * 将 proc_stack 中的数据载入 CPU 的寄存器，
	 * 从而使程序“假装”退出中断，进入特权级 3
	 */
	asm volatile ("movl %0, %%esp; jmp intr_exit" : : "g" (proc_stack) : "memory");
c0005172:	8b 65 ec             	mov    -0x14(%ebp),%esp
c0005175:	e9 26 cd ff ff       	jmp    c0001ea0 <intr_exit>
/work/x86_os_my/userprog/process.c:50
}
c000517a:	90                   	nop
c000517b:	c9                   	leave  
c000517c:	c3                   	ret    

c000517d <page_dir_activate>:
page_dir_activate():
/work/x86_os_my/userprog/process.c:53

/* 更新CR3寄存器，激活页目录表 */
void page_dir_activate(struct task_struct* p_thread) {
c000517d:	55                   	push   %ebp
c000517e:	89 e5                	mov    %esp,%ebp
c0005180:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/process.c:56
	
	/* 若为"内核线程",需要重新填充页表为0x100000 */
	uint32_t pagedir_phy_addr = 0x100000;	// 默认为内核的页目录物理地址,也就是内核线程所用的页目录表
c0005183:	c7 45 f4 00 00 10 00 	movl   $0x100000,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:59
	
	/* "用户态进程"有自己的页目录表 */
	if (p_thread->pgdir != NULL) {
c000518a:	8b 45 08             	mov    0x8(%ebp),%eax
c000518d:	8b 40 34             	mov    0x34(%eax),%eax
c0005190:	85 c0                	test   %eax,%eax
c0005192:	74 15                	je     c00051a9 <page_dir_activate+0x2c>
/work/x86_os_my/userprog/process.c:60
		pagedir_phy_addr = addr_v2p((uint32_t)p_thread->pgdir);
c0005194:	8b 45 08             	mov    0x8(%ebp),%eax
c0005197:	8b 40 34             	mov    0x34(%eax),%eax
c000519a:	83 ec 0c             	sub    $0xc,%esp
c000519d:	50                   	push   %eax
c000519e:	e8 9d dc ff ff       	call   c0002e40 <addr_v2p>
c00051a3:	83 c4 10             	add    $0x10,%esp
c00051a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:66
	}

	/* 更新页目录寄存器cr3,使新页表生效
	 * 实现进程间，虚拟地址空间的隔离。
	 */
	asm volatile ("movl %0, %%cr3" : : "r" (pagedir_phy_addr) : "memory");
c00051a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00051ac:	0f 22 d8             	mov    %eax,%cr3
/work/x86_os_my/userprog/process.c:67
}
c00051af:	90                   	nop
c00051b0:	c9                   	leave  
c00051b1:	c3                   	ret    

c00051b2 <process_activate>:
process_activate():
/work/x86_os_my/userprog/process.c:73

/* 1.激活线程或进程的页表,【更新CR3寄存器】
 * 2.用户进程，更新tss中的esp0为进程的特权级0的栈
 * 【只有在任务调度时（中断时），才会切换页表及更新 0 级栈，因此 process_activate 是被"中断执行流"的 schedule 调用的！】
 */
void process_activate(struct task_struct* p_thread) {
c00051b2:	55                   	push   %ebp
c00051b3:	89 e5                	mov    %esp,%ebp
c00051b5:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/userprog/process.c:74
	ASSERT(p_thread != NULL);
c00051b8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00051bc:	75 19                	jne    c00051d7 <process_activate+0x25>
/work/x86_os_my/userprog/process.c:74 (discriminator 1)
c00051be:	68 b4 65 00 c0       	push   $0xc00065b4
c00051c3:	68 70 66 00 c0       	push   $0xc0006670
c00051c8:	6a 4a                	push   $0x4a
c00051ca:	68 c5 65 00 c0       	push   $0xc00065c5
c00051cf:	e8 9e d3 ff ff       	call   c0002572 <panic_spin>
c00051d4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:77
	
	/* 激活该进程或线程的页目录表【重新加载了CR3】 */
	page_dir_activate(p_thread);
c00051d7:	83 ec 0c             	sub    $0xc,%esp
c00051da:	ff 75 08             	pushl  0x8(%ebp)
c00051dd:	e8 9b ff ff ff       	call   c000517d <page_dir_activate>
c00051e2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:80

	/* 内核线程特权级本身就是0,处理器进入中断时并不会从tss中获取0特权级栈地址,故不需要更新esp0 */
	if (p_thread->pgdir != NULL) {
c00051e5:	8b 45 08             	mov    0x8(%ebp),%eax
c00051e8:	8b 40 34             	mov    0x34(%eax),%eax
c00051eb:	85 c0                	test   %eax,%eax
c00051ed:	74 0e                	je     c00051fd <process_activate+0x4b>
/work/x86_os_my/userprog/process.c:83
		/* 若为用户进程,更新该进程的esp0,用于此进程被中断时保留上下文 
		 * 需要从tss中获取0特权级栈地址 */
		update_tss_esp(p_thread);	//就一行：g_tss.esp0 = (uint32_t*)((uint32_t)pthread + PG_SIZE);
c00051ef:	83 ec 0c             	sub    $0xc,%esp
c00051f2:	ff 75 08             	pushl  0x8(%ebp)
c00051f5:	e8 f2 fc ff ff       	call   c0004eec <update_tss_esp>
c00051fa:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:85
	}
}
c00051fd:	90                   	nop
c00051fe:	c9                   	leave  
c00051ff:	c3                   	ret    

c0005200 <create_page_dir>:
create_page_dir():
/work/x86_os_my/userprog/process.c:94
 * 
 * 要确保用户进程，在自己的地址空间中，能够访问到内核。
 * 即：任意进程的页目录表中，用户进程占第 0~767 个页目录项，内核占第 768~1023 个页目录项。
 * 0x300 = 768
 */
uint32_t* create_page_dir(void) {
c0005200:	55                   	push   %ebp
c0005201:	89 e5                	mov    %esp,%ebp
c0005203:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/process.c:97

	/* 用户进程的页表不能让用户直接访问到,所以在内核空间来申请 */
	uint32_t* page_dir_vaddr = get_kernel_pages(1);
c0005206:	83 ec 0c             	sub    $0xc,%esp
c0005209:	6a 01                	push   $0x1
c000520b:	e8 0a da ff ff       	call   c0002c1a <get_kernel_pages>
c0005210:	83 c4 10             	add    $0x10,%esp
c0005213:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:98
	if (page_dir_vaddr == NULL) {
c0005216:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c000521a:	75 17                	jne    c0005233 <create_page_dir+0x33>
/work/x86_os_my/userprog/process.c:99
		console_put_str("create_page_dir: get_kernel_page failed!");
c000521c:	83 ec 0c             	sub    $0xc,%esp
c000521f:	68 d8 65 00 c0       	push   $0xc00065d8
c0005224:	e8 57 f3 ff ff       	call   c0004580 <console_put_str>
c0005229:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:100
		return NULL;
c000522c:	b8 00 00 00 00       	mov    $0x0,%eax
c0005231:	eb 43                	jmp    c0005276 <create_page_dir+0x76>
/work/x86_os_my/userprog/process.c:106
	}

	/*** 1 复制内核的页目录表  ***/
	// page_dir_vaddr + 0x300*4 是内核页目录的第768项
	// 复制的页目录项个数=1024/4
	memcpy((uint32_t*)((uint32_t)page_dir_vaddr + 0x300*4), (uint32_t*)(0xfffff000+0x300*4), 1024);
c0005233:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005236:	05 00 0c 00 00       	add    $0xc00,%eax
c000523b:	83 ec 04             	sub    $0x4,%esp
c000523e:	68 00 04 00 00       	push   $0x400
c0005243:	68 00 fc ff ff       	push   $0xfffffc00
c0005248:	50                   	push   %eax
c0005249:	e8 8e e7 ff ff       	call   c00039dc <memcpy>
c000524e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:110

	/*** 2 更新页目录表地址 ***/
	// 页目录表地址是页目录的最后一项
	uint32_t new_page_dir_phy_addr = addr_v2p((uint32_t)page_dir_vaddr);
c0005251:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005254:	83 ec 0c             	sub    $0xc,%esp
c0005257:	50                   	push   %eax
c0005258:	e8 e3 db ff ff       	call   c0002e40 <addr_v2p>
c000525d:	83 c4 10             	add    $0x10,%esp
c0005260:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/process.c:111
	page_dir_vaddr[1023] = new_page_dir_phy_addr | PG_US_U | PG_RW_W | PG_P_1;
c0005263:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005266:	05 fc 0f 00 00       	add    $0xffc,%eax
c000526b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000526e:	83 ca 07             	or     $0x7,%edx
c0005271:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/userprog/process.c:113

	return page_dir_vaddr;
c0005273:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/userprog/process.c:114
}
c0005276:	c9                   	leave  
c0005277:	c3                   	ret    

c0005278 <create_user_vaddr_bitmap>:
create_user_vaddr_bitmap():
/work/x86_os_my/userprog/process.c:117

/* 创建用户进程虚拟地址位图 */
void create_user_vaddr_bitmap(struct task_struct* user_prog) {
c0005278:	55                   	push   %ebp
c0005279:	89 e5                	mov    %esp,%ebp
c000527b:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/process.c:118
   user_prog->userprog_vaddr.vaddr_start = USER_VADDR_START;	// linux用户程序入口地址 0x80480000
c000527e:	8b 45 08             	mov    0x8(%ebp),%eax
c0005281:	c7 40 40 00 80 04 08 	movl   $0x8048000,0x40(%eax)
/work/x86_os_my/userprog/process.c:119
   uint32_t bitmap_pg_cnt = DIV_ROUND_UP((0xc0000000 - USER_VADDR_START) / PG_SIZE / 8 , PG_SIZE);
c0005288:	c7 45 f4 17 00 00 00 	movl   $0x17,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:120
   user_prog->userprog_vaddr.vaddr_bitmap.bits = get_kernel_pages(bitmap_pg_cnt);
c000528f:	83 ec 0c             	sub    $0xc,%esp
c0005292:	ff 75 f4             	pushl  -0xc(%ebp)
c0005295:	e8 80 d9 ff ff       	call   c0002c1a <get_kernel_pages>
c000529a:	83 c4 10             	add    $0x10,%esp
c000529d:	89 c2                	mov    %eax,%edx
c000529f:	8b 45 08             	mov    0x8(%ebp),%eax
c00052a2:	89 50 3c             	mov    %edx,0x3c(%eax)
/work/x86_os_my/userprog/process.c:121
   user_prog->userprog_vaddr.vaddr_bitmap.btmp_bytes_len = (0xc0000000 - USER_VADDR_START) / PG_SIZE / 8;
c00052a5:	8b 45 08             	mov    0x8(%ebp),%eax
c00052a8:	c7 40 38 f7 6f 01 00 	movl   $0x16ff7,0x38(%eax)
/work/x86_os_my/userprog/process.c:122
   bitmap_init(&user_prog->userprog_vaddr.vaddr_bitmap);
c00052af:	8b 45 08             	mov    0x8(%ebp),%eax
c00052b2:	83 c0 38             	add    $0x38,%eax
c00052b5:	83 ec 0c             	sub    $0xc,%esp
c00052b8:	50                   	push   %eax
c00052b9:	e8 8a d3 ff ff       	call   c0002648 <bitmap_init>
c00052be:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:123
}
c00052c1:	90                   	nop
c00052c2:	c9                   	leave  
c00052c3:	c3                   	ret    

c00052c4 <process_execute>:
process_execute():
/work/x86_os_my/userprog/process.c:126

/* 创建用户进程 */
void process_execute(void* filename, char* name) {
c00052c4:	55                   	push   %ebp
c00052c5:	89 e5                	mov    %esp,%ebp
c00052c7:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/process.c:128
   /* pcb内核的数据结构,由内核来维护进程信息,因此要在内核内存池中申请 */
   struct task_struct* thread = get_kernel_pages(1);
c00052ca:	83 ec 0c             	sub    $0xc,%esp
c00052cd:	6a 01                	push   $0x1
c00052cf:	e8 46 d9 ff ff       	call   c0002c1a <get_kernel_pages>
c00052d4:	83 c4 10             	add    $0x10,%esp
c00052d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:129
   init_thread(thread, name, default_prio);			//初始化线程PCB结构体 struct task_struct
c00052da:	83 ec 04             	sub    $0x4,%esp
c00052dd:	6a 1f                	push   $0x1f
c00052df:	ff 75 0c             	pushl  0xc(%ebp)
c00052e2:	ff 75 f4             	pushl  -0xc(%ebp)
c00052e5:	e8 57 eb ff ff       	call   c0003e41 <init_thread>
c00052ea:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:130
   create_user_vaddr_bitmap(thread);				//【进程新增】创建用户进程，虚拟地址空间位图
c00052ed:	83 ec 0c             	sub    $0xc,%esp
c00052f0:	ff 75 f4             	pushl  -0xc(%ebp)
c00052f3:	e8 80 ff ff ff       	call   c0005278 <create_user_vaddr_bitmap>
c00052f8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:131
   thread_create(thread, start_process, filename);	//初始化线程栈结构体 struct thread_stack
c00052fb:	83 ec 04             	sub    $0x4,%esp
c00052fe:	ff 75 08             	pushl  0x8(%ebp)
c0005301:	68 78 50 00 c0       	push   $0xc0005078
c0005306:	ff 75 f4             	pushl  -0xc(%ebp)
c0005309:	e8 bc ea ff ff       	call   c0003dca <thread_create>
c000530e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:132
   thread->pgdir = create_page_dir();				//【进程新增】创建用户进程，页目录表
c0005311:	e8 ea fe ff ff       	call   c0005200 <create_page_dir>
c0005316:	89 c2                	mov    %eax,%edx
c0005318:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000531b:	89 50 34             	mov    %edx,0x34(%eax)
/work/x86_os_my/userprog/process.c:133
   block_desc_init(thread->u_block_desc);
c000531e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005321:	83 c0 44             	add    $0x44,%eax
c0005324:	83 ec 0c             	sub    $0xc,%esp
c0005327:	50                   	push   %eax
c0005328:	e8 79 e5 ff ff       	call   c00038a6 <block_desc_init>
c000532d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:135
   
   enum intr_status old_status = intr_disable();
c0005330:	e8 0a c9 ff ff       	call   c0001c3f <intr_disable>
c0005335:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/process.c:136
   ASSERT(!elem_find(&thread_ready_list, &thread->general_tag));
c0005338:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000533b:	83 c0 24             	add    $0x24,%eax
c000533e:	83 ec 08             	sub    $0x8,%esp
c0005341:	50                   	push   %eax
c0005342:	68 8c 8b 00 c0       	push   $0xc0008b8c
c0005347:	e8 e0 f0 ff ff       	call   c000442c <elem_find>
c000534c:	83 c4 10             	add    $0x10,%esp
c000534f:	85 c0                	test   %eax,%eax
c0005351:	74 1c                	je     c000536f <process_execute+0xab>
/work/x86_os_my/userprog/process.c:136 (discriminator 1)
c0005353:	68 04 66 00 c0       	push   $0xc0006604
c0005358:	68 84 66 00 c0       	push   $0xc0006684
c000535d:	68 88 00 00 00       	push   $0x88
c0005362:	68 c5 65 00 c0       	push   $0xc00065c5
c0005367:	e8 06 d2 ff ff       	call   c0002572 <panic_spin>
c000536c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:137
   list_append(&thread_ready_list, &thread->general_tag);
c000536f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005372:	83 c0 24             	add    $0x24,%eax
c0005375:	83 ec 08             	sub    $0x8,%esp
c0005378:	50                   	push   %eax
c0005379:	68 8c 8b 00 c0       	push   $0xc0008b8c
c000537e:	e8 2f f0 ff ff       	call   c00043b2 <list_append>
c0005383:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:138
   ASSERT(!elem_find(&thread_all_list, &thread->all_list_tag));
c0005386:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005389:	83 c0 2c             	add    $0x2c,%eax
c000538c:	83 ec 08             	sub    $0x8,%esp
c000538f:	50                   	push   %eax
c0005390:	68 9c 8b 00 c0       	push   $0xc0008b9c
c0005395:	e8 92 f0 ff ff       	call   c000442c <elem_find>
c000539a:	83 c4 10             	add    $0x10,%esp
c000539d:	85 c0                	test   %eax,%eax
c000539f:	74 1c                	je     c00053bd <process_execute+0xf9>
/work/x86_os_my/userprog/process.c:138 (discriminator 1)
c00053a1:	68 3c 66 00 c0       	push   $0xc000663c
c00053a6:	68 84 66 00 c0       	push   $0xc0006684
c00053ab:	68 8a 00 00 00       	push   $0x8a
c00053b0:	68 c5 65 00 c0       	push   $0xc00065c5
c00053b5:	e8 b8 d1 ff ff       	call   c0002572 <panic_spin>
c00053ba:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:139
   list_append(&thread_all_list, &thread->all_list_tag);
c00053bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00053c0:	83 c0 2c             	add    $0x2c,%eax
c00053c3:	83 ec 08             	sub    $0x8,%esp
c00053c6:	50                   	push   %eax
c00053c7:	68 9c 8b 00 c0       	push   $0xc0008b9c
c00053cc:	e8 e1 ef ff ff       	call   c00043b2 <list_append>
c00053d1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:140
   intr_set_status(old_status);
c00053d4:	83 ec 0c             	sub    $0xc,%esp
c00053d7:	ff 75 f0             	pushl  -0x10(%ebp)
c00053da:	e8 89 c8 ff ff       	call   c0001c68 <intr_set_status>
c00053df:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:141
}
c00053e2:	90                   	nop
c00053e3:	c9                   	leave  
c00053e4:	c3                   	ret    

c00053e5 <getpid>:
getpid():
/work/x86_os_my/lib/user/syscall.c:52
   );							       \
   retval;						       \
})

/* 返回当前任务pid */
uint32_t getpid() {
c00053e5:	55                   	push   %ebp
c00053e6:	89 e5                	mov    %esp,%ebp
c00053e8:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:53
   return _syscall0(SYS_GETPID);
c00053eb:	b8 00 00 00 00       	mov    $0x0,%eax
c00053f0:	cd 80                	int    $0x80
c00053f2:	89 45 fc             	mov    %eax,-0x4(%ebp)
c00053f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:54
}
c00053f8:	c9                   	leave  
c00053f9:	c3                   	ret    

c00053fa <write>:
write():
/work/x86_os_my/lib/user/syscall.c:57

/* 打印字符串str */
uint32_t write(char* str) {
c00053fa:	55                   	push   %ebp
c00053fb:	89 e5                	mov    %esp,%ebp
c00053fd:	53                   	push   %ebx
c00053fe:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:58
	return _syscall1(SYS_WRITE, str);
c0005401:	b8 01 00 00 00       	mov    $0x1,%eax
c0005406:	8b 55 08             	mov    0x8(%ebp),%edx
c0005409:	89 d3                	mov    %edx,%ebx
c000540b:	cd 80                	int    $0x80
c000540d:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0005410:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:59
}
c0005413:	83 c4 10             	add    $0x10,%esp
c0005416:	5b                   	pop    %ebx
c0005417:	5d                   	pop    %ebp
c0005418:	c3                   	ret    

c0005419 <malloc>:
malloc():
/work/x86_os_my/lib/user/syscall.c:62

/* 申请size字节大小的内存,并返回结果 */
void* malloc(uint32_t size) {
c0005419:	55                   	push   %ebp
c000541a:	89 e5                	mov    %esp,%ebp
c000541c:	53                   	push   %ebx
c000541d:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:63
	return (void*)_syscall1(SYS_MALLOC, size);
c0005420:	b8 02 00 00 00       	mov    $0x2,%eax
c0005425:	8b 55 08             	mov    0x8(%ebp),%edx
c0005428:	89 d3                	mov    %edx,%ebx
c000542a:	cd 80                	int    $0x80
c000542c:	89 45 f8             	mov    %eax,-0x8(%ebp)
c000542f:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:64
}
c0005432:	83 c4 10             	add    $0x10,%esp
c0005435:	5b                   	pop    %ebx
c0005436:	5d                   	pop    %ebp
c0005437:	c3                   	ret    

c0005438 <free>:
free():
/work/x86_os_my/lib/user/syscall.c:67

/* 释放ptr指向的内存 */
void free(void* ptr) {
c0005438:	55                   	push   %ebp
c0005439:	89 e5                	mov    %esp,%ebp
c000543b:	53                   	push   %ebx
c000543c:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:68
	_syscall1(SYS_FREE, ptr);
c000543f:	b8 03 00 00 00       	mov    $0x3,%eax
c0005444:	8b 55 08             	mov    0x8(%ebp),%edx
c0005447:	89 d3                	mov    %edx,%ebx
c0005449:	cd 80                	int    $0x80
c000544b:	89 45 f8             	mov    %eax,-0x8(%ebp)
/work/x86_os_my/lib/user/syscall.c:69
}
c000544e:	90                   	nop
c000544f:	83 c4 10             	add    $0x10,%esp
c0005452:	5b                   	pop    %ebx
c0005453:	5d                   	pop    %ebp
c0005454:	c3                   	ret    

c0005455 <sys_getpid>:
sys_getpid():
/work/x86_os_my/userprog/syscall-init.c:15
#define syscall_nr 32 
typedef void* syscall;
syscall syscall_table[syscall_nr];

/* 返回当前任务的pid */
uint32_t sys_getpid(void) {
c0005455:	55                   	push   %ebp
c0005456:	89 e5                	mov    %esp,%ebp
c0005458:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/userprog/syscall-init.c:16
	return running_thread()->pid;
c000545b:	e8 fa e8 ff ff       	call   c0003d5a <running_thread>
c0005460:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0005464:	98                   	cwtl   
/work/x86_os_my/userprog/syscall-init.c:17
}
c0005465:	c9                   	leave  
c0005466:	c3                   	ret    

c0005467 <sys_write>:
sys_write():
/work/x86_os_my/userprog/syscall-init.c:20

/* 打印字符串str(未实现文件系统前的版本) */
uint32_t sys_write(char* str) {
c0005467:	55                   	push   %ebp
c0005468:	89 e5                	mov    %esp,%ebp
c000546a:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/userprog/syscall-init.c:21
	console_put_str(str);
c000546d:	83 ec 0c             	sub    $0xc,%esp
c0005470:	ff 75 08             	pushl  0x8(%ebp)
c0005473:	e8 08 f1 ff ff       	call   c0004580 <console_put_str>
c0005478:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/syscall-init.c:22
	return strlen(str);
c000547b:	83 ec 0c             	sub    $0xc,%esp
c000547e:	ff 75 08             	pushl  0x8(%ebp)
c0005481:	e8 8e e6 ff ff       	call   c0003b14 <strlen>
c0005486:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/syscall-init.c:23
}
c0005489:	c9                   	leave  
c000548a:	c3                   	ret    

c000548b <syscall_init>:
syscall_init():
/work/x86_os_my/userprog/syscall-init.c:26

/* 初始化系统调用 */
void syscall_init(void) {
c000548b:	55                   	push   %ebp
c000548c:	89 e5                	mov    %esp,%ebp
c000548e:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/userprog/syscall-init.c:27
	put_str("syscall_init start\n");
c0005491:	83 ec 0c             	sub    $0xc,%esp
c0005494:	68 94 66 00 c0       	push   $0xc0006694
c0005499:	e8 62 cf ff ff       	call   c0002400 <put_str>
c000549e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/syscall-init.c:28
	syscall_table[SYS_GETPID] = sys_getpid;
c00054a1:	c7 05 60 8c 00 c0 55 	movl   $0xc0005455,0xc0008c60
c00054a8:	54 00 c0 
/work/x86_os_my/userprog/syscall-init.c:29
	syscall_table[SYS_WRITE] = sys_write;
c00054ab:	c7 05 64 8c 00 c0 67 	movl   $0xc0005467,0xc0008c64
c00054b2:	54 00 c0 
/work/x86_os_my/userprog/syscall-init.c:30
	syscall_table[SYS_MALLOC] = sys_malloc;
c00054b5:	c7 05 68 8c 00 c0 93 	movl   $0xc0002e93,0xc0008c68
c00054bc:	2e 00 c0 
/work/x86_os_my/userprog/syscall-init.c:31
	syscall_table[SYS_FREE] = sys_free;
c00054bf:	c7 05 6c 8c 00 c0 c0 	movl   $0xc00034c0,0xc0008c6c
c00054c6:	34 00 c0 
/work/x86_os_my/userprog/syscall-init.c:32
	put_str("syscall_init done\n");
c00054c9:	83 ec 0c             	sub    $0xc,%esp
c00054cc:	68 a8 66 00 c0       	push   $0xc00066a8
c00054d1:	e8 2a cf ff ff       	call   c0002400 <put_str>
c00054d6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/syscall-init.c:33
}
c00054d9:	90                   	nop
c00054da:	c9                   	leave  
c00054db:	c3                   	ret    

c00054dc <itoa>:
itoa():
/work/x86_os_my/lib/stdio.c:13
#define va_start(ap, v) ap = (va_list)&v	// 把ap指向第一个固定参数v
#define va_arg(ap, t) *((t*)(ap += 4))		// ap指向下一个参数并返回其值
#define va_end(ap) ap = NULL				// 清除ap

/* 将整型转换成字符(integer to ascii) */
static void itoa(uint32_t value, char** buf_ptr_addr, uint8_t base) {
c00054dc:	55                   	push   %ebp
c00054dd:	89 e5                	mov    %esp,%ebp
c00054df:	83 ec 28             	sub    $0x28,%esp
c00054e2:	8b 45 10             	mov    0x10(%ebp),%eax
c00054e5:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/lib/stdio.c:14
	uint32_t m = value % base;	// 求模,最先掉下来的是最低位【比如base是16代表16进制】 
c00054e8:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
c00054ec:	8b 45 08             	mov    0x8(%ebp),%eax
c00054ef:	ba 00 00 00 00       	mov    $0x0,%edx
c00054f4:	f7 f1                	div    %ecx
c00054f6:	89 55 f4             	mov    %edx,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:15
	uint32_t i = value / base;	// 取整
c00054f9:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
c00054fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0005500:	ba 00 00 00 00       	mov    $0x0,%edx
c0005505:	f7 f1                	div    %ecx
c0005507:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/stdio.c:16
	if (i) {
c000550a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c000550e:	74 16                	je     c0005526 <itoa+0x4a>
/work/x86_os_my/lib/stdio.c:17
		itoa(i, buf_ptr_addr, base);	// 如果倍数不为0则递归调用。
c0005510:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0005514:	83 ec 04             	sub    $0x4,%esp
c0005517:	50                   	push   %eax
c0005518:	ff 75 0c             	pushl  0xc(%ebp)
c000551b:	ff 75 f0             	pushl  -0x10(%ebp)
c000551e:	e8 b9 ff ff ff       	call   c00054dc <itoa>
c0005523:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:19
	}
	if (m < 10) {	// 如果余数是0~9
c0005526:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
c000552a:	77 17                	ja     c0005543 <itoa+0x67>
/work/x86_os_my/lib/stdio.c:20
		*((*buf_ptr_addr)++) = m + '0';			// 将数字0~9转换为字符'0'~'9'
c000552c:	8b 45 0c             	mov    0xc(%ebp),%eax
c000552f:	8b 00                	mov    (%eax),%eax
c0005531:	8d 48 01             	lea    0x1(%eax),%ecx
c0005534:	8b 55 0c             	mov    0xc(%ebp),%edx
c0005537:	89 0a                	mov    %ecx,(%edx)
c0005539:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000553c:	83 c2 30             	add    $0x30,%edx
c000553f:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/stdio.c:24
	} else {		// 否则余数是A~F
		*((*buf_ptr_addr)++) = m - 10 + 'A';	// 将数字A~F转换为字符'A'~'F'
	}
}
c0005541:	eb 15                	jmp    c0005558 <itoa+0x7c>
/work/x86_os_my/lib/stdio.c:22
		itoa(i, buf_ptr_addr, base);	// 如果倍数不为0则递归调用。
	}
	if (m < 10) {	// 如果余数是0~9
		*((*buf_ptr_addr)++) = m + '0';			// 将数字0~9转换为字符'0'~'9'
	} else {		// 否则余数是A~F
		*((*buf_ptr_addr)++) = m - 10 + 'A';	// 将数字A~F转换为字符'A'~'F'
c0005543:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005546:	8b 00                	mov    (%eax),%eax
c0005548:	8d 48 01             	lea    0x1(%eax),%ecx
c000554b:	8b 55 0c             	mov    0xc(%ebp),%edx
c000554e:	89 0a                	mov    %ecx,(%edx)
c0005550:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0005553:	83 c2 37             	add    $0x37,%edx
c0005556:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/stdio.c:24
	}
}
c0005558:	90                   	nop
c0005559:	c9                   	leave  
c000555a:	c3                   	ret    

c000555b <vsprintf>:
vsprintf():
/work/x86_os_my/lib/stdio.c:27

/* 将参数ap按照格式format输出到字符串str,并返回替换后str长度 */
uint32_t vsprintf(char* str, const char* format, va_list ap) {
c000555b:	55                   	push   %ebp
c000555c:	89 e5                	mov    %esp,%ebp
c000555e:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/lib/stdio.c:28
	char* buf_ptr = str;
c0005561:	8b 45 08             	mov    0x8(%ebp),%eax
c0005564:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/lib/stdio.c:29
	const char* index_ptr = format;
c0005567:	8b 45 0c             	mov    0xc(%ebp),%eax
c000556a:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:30
	char index_char = *index_ptr;
c000556d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005570:	0f b6 00             	movzbl (%eax),%eax
c0005573:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:33
	int32_t arg_int;
	char* arg_str;
	while(index_char) {
c0005576:	e9 43 01 00 00       	jmp    c00056be <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:34
		if (index_char != '%') {
c000557b:	80 7d f3 25          	cmpb   $0x25,-0xd(%ebp)
c000557f:	74 21                	je     c00055a2 <vsprintf+0x47>
/work/x86_os_my/lib/stdio.c:35
			*(buf_ptr++) = index_char;
c0005581:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0005584:	8d 50 01             	lea    0x1(%eax),%edx
c0005587:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c000558a:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
c000558e:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/stdio.c:36
			index_char = *(++index_ptr);
c0005590:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0005594:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005597:	0f b6 00             	movzbl (%eax),%eax
c000559a:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:37
			continue;
c000559d:	e9 1c 01 00 00       	jmp    c00056be <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:39
		}
		index_char = *(++index_ptr);	 // 得到%后面的字符
c00055a2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c00055a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00055a9:	0f b6 00             	movzbl (%eax),%eax
c00055ac:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:40
		switch(index_char) {
c00055af:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c00055b3:	83 f8 64             	cmp    $0x64,%eax
c00055b6:	0f 84 8e 00 00 00    	je     c000564a <vsprintf+0xef>
c00055bc:	83 f8 64             	cmp    $0x64,%eax
c00055bf:	7f 0a                	jg     c00055cb <vsprintf+0x70>
c00055c1:	83 f8 63             	cmp    $0x63,%eax
c00055c4:	74 60                	je     c0005626 <vsprintf+0xcb>
c00055c6:	e9 f3 00 00 00       	jmp    c00056be <vsprintf+0x163>
c00055cb:	83 f8 73             	cmp    $0x73,%eax
c00055ce:	74 0e                	je     c00055de <vsprintf+0x83>
c00055d0:	83 f8 78             	cmp    $0x78,%eax
c00055d3:	0f 84 b6 00 00 00    	je     c000568f <vsprintf+0x134>
c00055d9:	e9 e0 00 00 00       	jmp    c00056be <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:42
			case 's':
			arg_str = va_arg(ap, char*);
c00055de:	83 45 10 04          	addl   $0x4,0x10(%ebp)
c00055e2:	8b 45 10             	mov    0x10(%ebp),%eax
c00055e5:	8b 00                	mov    (%eax),%eax
c00055e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/lib/stdio.c:43
			strcpy(buf_ptr, arg_str);
c00055ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00055ed:	83 ec 08             	sub    $0x8,%esp
c00055f0:	ff 75 e8             	pushl  -0x18(%ebp)
c00055f3:	50                   	push   %eax
c00055f4:	e8 c6 e4 ff ff       	call   c0003abf <strcpy>
c00055f9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:44
			buf_ptr += strlen(arg_str);
c00055fc:	83 ec 0c             	sub    $0xc,%esp
c00055ff:	ff 75 e8             	pushl  -0x18(%ebp)
c0005602:	e8 0d e5 ff ff       	call   c0003b14 <strlen>
c0005607:	83 c4 10             	add    $0x10,%esp
c000560a:	89 c2                	mov    %eax,%edx
c000560c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000560f:	01 d0                	add    %edx,%eax
c0005611:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/lib/stdio.c:45
			index_char = *(++index_ptr);
c0005614:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0005618:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000561b:	0f b6 00             	movzbl (%eax),%eax
c000561e:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:46
			break;
c0005621:	e9 98 00 00 00       	jmp    c00056be <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:49

			case 'c':
			*(buf_ptr++) = va_arg(ap, char);
c0005626:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0005629:	8d 50 01             	lea    0x1(%eax),%edx
c000562c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c000562f:	83 45 10 04          	addl   $0x4,0x10(%ebp)
c0005633:	8b 55 10             	mov    0x10(%ebp),%edx
c0005636:	0f b6 12             	movzbl (%edx),%edx
c0005639:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/stdio.c:50
			index_char = *(++index_ptr);
c000563b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c000563f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005642:	0f b6 00             	movzbl (%eax),%eax
c0005645:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:51
			break;
c0005648:	eb 74                	jmp    c00056be <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:54

			case 'd':
			arg_int = va_arg(ap, int);
c000564a:	83 45 10 04          	addl   $0x4,0x10(%ebp)
c000564e:	8b 45 10             	mov    0x10(%ebp),%eax
c0005651:	8b 00                	mov    (%eax),%eax
c0005653:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/lib/stdio.c:56
			/* 若是负数, 将其转为正数后,再正数前面输出个负号'-'. */
			if (arg_int < 0) {
c0005656:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c000565a:	79 0f                	jns    c000566b <vsprintf+0x110>
/work/x86_os_my/lib/stdio.c:57
				arg_int = 0 - arg_int;
c000565c:	f7 5d ec             	negl   -0x14(%ebp)
/work/x86_os_my/lib/stdio.c:58
				*buf_ptr++ = '-';
c000565f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0005662:	8d 50 01             	lea    0x1(%eax),%edx
c0005665:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0005668:	c6 00 2d             	movb   $0x2d,(%eax)
/work/x86_os_my/lib/stdio.c:60
			}
			itoa(arg_int, &buf_ptr, 10); 
c000566b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000566e:	83 ec 04             	sub    $0x4,%esp
c0005671:	6a 0a                	push   $0xa
c0005673:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0005676:	52                   	push   %edx
c0005677:	50                   	push   %eax
c0005678:	e8 5f fe ff ff       	call   c00054dc <itoa>
c000567d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:61
			index_char = *(++index_ptr);
c0005680:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0005684:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005687:	0f b6 00             	movzbl (%eax),%eax
c000568a:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:62
			break;
c000568d:	eb 2f                	jmp    c00056be <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:65

			case 'x':
			arg_int = va_arg(ap, int);
c000568f:	83 45 10 04          	addl   $0x4,0x10(%ebp)
c0005693:	8b 45 10             	mov    0x10(%ebp),%eax
c0005696:	8b 00                	mov    (%eax),%eax
c0005698:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/lib/stdio.c:66
			itoa(arg_int, &buf_ptr, 16); 
c000569b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000569e:	83 ec 04             	sub    $0x4,%esp
c00056a1:	6a 10                	push   $0x10
c00056a3:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c00056a6:	52                   	push   %edx
c00056a7:	50                   	push   %eax
c00056a8:	e8 2f fe ff ff       	call   c00054dc <itoa>
c00056ad:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:67
			index_char = *(++index_ptr); // 跳过格式字符并更新index_char
c00056b0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c00056b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00056b7:	0f b6 00             	movzbl (%eax),%eax
c00056ba:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:68
			break;
c00056bd:	90                   	nop
/work/x86_os_my/lib/stdio.c:33
	char* buf_ptr = str;
	const char* index_ptr = format;
	char index_char = *index_ptr;
	int32_t arg_int;
	char* arg_str;
	while(index_char) {
c00056be:	80 7d f3 00          	cmpb   $0x0,-0xd(%ebp)
c00056c2:	0f 85 b3 fe ff ff    	jne    c000557b <vsprintf+0x20>
/work/x86_os_my/lib/stdio.c:71
			itoa(arg_int, &buf_ptr, 16); 
			index_char = *(++index_ptr); // 跳过格式字符并更新index_char
			break;
		}
	}
	return strlen(str);
c00056c8:	83 ec 0c             	sub    $0xc,%esp
c00056cb:	ff 75 08             	pushl  0x8(%ebp)
c00056ce:	e8 41 e4 ff ff       	call   c0003b14 <strlen>
c00056d3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:72
}
c00056d6:	c9                   	leave  
c00056d7:	c3                   	ret    

c00056d8 <sprintf>:
sprintf():
/work/x86_os_my/lib/stdio.c:75

/* 同printf不同的地方就是字符串不是写到终端,而是写到buf中 */
uint32_t sprintf(char* buf, const char* format, ...) {
c00056d8:	55                   	push   %ebp
c00056d9:	89 e5                	mov    %esp,%ebp
c00056db:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/stdio.c:78
	va_list args;
	uint32_t retval;
	va_start(args, format);
c00056de:	8d 45 0c             	lea    0xc(%ebp),%eax
c00056e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:79
	retval = vsprintf(buf, format, args);
c00056e4:	8b 45 0c             	mov    0xc(%ebp),%eax
c00056e7:	83 ec 04             	sub    $0x4,%esp
c00056ea:	ff 75 f4             	pushl  -0xc(%ebp)
c00056ed:	50                   	push   %eax
c00056ee:	ff 75 08             	pushl  0x8(%ebp)
c00056f1:	e8 65 fe ff ff       	call   c000555b <vsprintf>
c00056f6:	83 c4 10             	add    $0x10,%esp
c00056f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/stdio.c:80
	va_end(args);
c00056fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:81
	return retval;
c0005703:	8b 45 f0             	mov    -0x10(%ebp),%eax
/work/x86_os_my/lib/stdio.c:82
}
c0005706:	c9                   	leave  
c0005707:	c3                   	ret    

c0005708 <printf>:
printf():
/work/x86_os_my/lib/stdio.c:85

/* 格式化输出字符串format */
uint32_t printf(const char* format, ...) {
c0005708:	55                   	push   %ebp
c0005709:	89 e5                	mov    %esp,%ebp
c000570b:	57                   	push   %edi
c000570c:	81 ec 14 04 00 00    	sub    $0x414,%esp
/work/x86_os_my/lib/stdio.c:87
	va_list args;
	va_start(args, format);	       // 使args指向format
c0005712:	8d 45 08             	lea    0x8(%ebp),%eax
c0005715:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:88
	char buf[1024] = {0};	       // 用于存储拼接后的字符串
c0005718:	8d 95 f4 fb ff ff    	lea    -0x40c(%ebp),%edx
c000571e:	b8 00 00 00 00       	mov    $0x0,%eax
c0005723:	b9 00 01 00 00       	mov    $0x100,%ecx
c0005728:	89 d7                	mov    %edx,%edi
c000572a:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/lib/stdio.c:89
	vsprintf(buf, format, args);
c000572c:	8b 45 08             	mov    0x8(%ebp),%eax
c000572f:	83 ec 04             	sub    $0x4,%esp
c0005732:	ff 75 f4             	pushl  -0xc(%ebp)
c0005735:	50                   	push   %eax
c0005736:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c000573c:	50                   	push   %eax
c000573d:	e8 19 fe ff ff       	call   c000555b <vsprintf>
c0005742:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:90
	va_end(args);
c0005745:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:91
	return write(buf);
c000574c:	83 ec 0c             	sub    $0xc,%esp
c000574f:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c0005755:	50                   	push   %eax
c0005756:	e8 9f fc ff ff       	call   c00053fa <write>
c000575b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:92
}
c000575e:	8b 7d fc             	mov    -0x4(%ebp),%edi
c0005761:	c9                   	leave  
c0005762:	c3                   	ret    
