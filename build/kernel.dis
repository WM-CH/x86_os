
./build/kernel.bin:     file format elf32-i386


Disassembly of section .text:

c0001500 <main>:
main():
/work/x86_os_my/kernel/main.c:34
用户进程
u_prog_a 的地址是在 0xc0000000 以上，位于内核空间，但这并不表示它无法模拟用户进程。
*/
void init(void);

int main(void) {
c0001500:	8d 4c 24 04          	lea    0x4(%esp),%ecx
c0001504:	83 e4 f0             	and    $0xfffffff0,%esp
c0001507:	ff 71 fc             	pushl  -0x4(%ecx)
c000150a:	55                   	push   %ebp
c000150b:	89 e5                	mov    %esp,%ebp
c000150d:	51                   	push   %ecx
c000150e:	83 ec 04             	sub    $0x4,%esp
/work/x86_os_my/kernel/main.c:35
   put_str("I am kernel\n");
c0001511:	83 ec 0c             	sub    $0xc,%esp
c0001514:	68 6c bc 00 c0       	push   $0xc000bc6c
c0001519:	e8 52 0c 00 00       	call   c0002170 <put_str>
c000151e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:36
   init_all();
c0001521:	e8 4f 00 00 00       	call   c0001575 <init_all>
/work/x86_os_my/kernel/main.c:37
   cls_screen();
c0001526:	e8 30 0d 00 00       	call   c000225b <cls_screen>
/work/x86_os_my/kernel/main.c:38
   console_put_str("[rabbit@localhost /]$ ");
c000152b:	83 ec 0c             	sub    $0xc,%esp
c000152e:	68 79 bc 00 c0       	push   $0xc000bc79
c0001533:	e8 d8 32 00 00       	call   c0004810 <console_put_str>
c0001538:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:39 (discriminator 1)
   while(1);
c000153b:	eb fe                	jmp    c000153b <main+0x3b>

c000153d <init>:
init():
/work/x86_os_my/kernel/main.c:44
   return 0;
}

/* init进程 */
void init(void) {
c000153d:	55                   	push   %ebp
c000153e:	89 e5                	mov    %esp,%ebp
c0001540:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/main.c:45
   uint32_t ret_pid = fork();
c0001543:	e8 a1 41 00 00       	call   c00056e9 <fork>
c0001548:	98                   	cwtl   
c0001549:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/main.c:46
   if(ret_pid) {  // 父进程
c000154c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0001550:	74 02                	je     c0001554 <init+0x17>
/work/x86_os_my/kernel/main.c:47 (discriminator 1)
      while(1);
c0001552:	eb fe                	jmp    c0001552 <init+0x15>
/work/x86_os_my/kernel/main.c:49
   } else {	  // 子进程
      my_shell();
c0001554:	e8 9d a3 00 00       	call   c000b8f6 <my_shell>
/work/x86_os_my/kernel/main.c:51
   }
   panic("init: should not be here");
c0001559:	68 90 bc 00 c0       	push   $0xc000bc90
c000155e:	68 b8 bc 00 c0       	push   $0xc000bcb8
c0001563:	6a 33                	push   $0x33
c0001565:	68 a9 bc 00 c0       	push   $0xc000bca9
c000156a:	e8 af a4 00 00       	call   c000ba1e <user_spin>
c000156f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:52
}
c0001572:	90                   	nop
c0001573:	c9                   	leave  
c0001574:	c3                   	ret    

c0001575 <init_all>:
init_all():
/work/x86_os_my/kernel/init.c:15
#include "syscall-init.h"
#include "ide.h"
#include "fs.h"

/*负责初始化所有模块 */
void init_all() {
c0001575:	55                   	push   %ebp
c0001576:	89 e5                	mov    %esp,%ebp
c0001578:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/kernel/init.c:16
	put_str("init_all\n");
c000157b:	83 ec 0c             	sub    $0xc,%esp
c000157e:	68 bd bc 00 c0       	push   $0xc000bcbd
c0001583:	e8 e8 0b 00 00       	call   c0002170 <put_str>
c0001588:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/init.c:17
	idt_init();			// 初始化中断
c000158b:	e8 38 04 00 00       	call   c00019c8 <idt_init>
/work/x86_os_my/kernel/init.c:18
	mem_init();			// 初始化内存管理系统
c0001590:	e8 dd 21 00 00       	call   c0003772 <mem_init>
/work/x86_os_my/kernel/init.c:19
	thread_init();		// 初始化线程相关结构
c0001595:	e8 89 2f 00 00       	call   c0004523 <thread_init>
/work/x86_os_my/kernel/init.c:20
	timer_init();		// 初始化PIT
c000159a:	e8 16 06 00 00       	call   c0001bb5 <timer_init>
/work/x86_os_my/kernel/init.c:21
	console_init();		// 控制台初始化最好放在开中断之前
c000159f:	e8 21 32 00 00       	call   c00047c5 <console_init>
/work/x86_os_my/kernel/init.c:22
	keyboard_init();	// 键盘初始化
c00015a4:	e8 9a 38 00 00       	call   c0004e43 <keyboard_init>
/work/x86_os_my/kernel/init.c:23
	tss_init();			// tss初始化
c00015a9:	e8 50 3c 00 00       	call   c00051fe <tss_init>
/work/x86_os_my/kernel/init.c:24
	syscall_init();		// 初始化系统调用
c00015ae:	e8 76 43 00 00       	call   c0005929 <syscall_init>
/work/x86_os_my/kernel/init.c:25
	intr_enable();		// 后面的ide_init需要打开中断
c00015b3:	e8 5f 03 00 00       	call   c0001917 <intr_enable>
/work/x86_os_my/kernel/init.c:26
	ide_init();			// 初始化硬盘
c00015b8:	e8 89 52 00 00       	call   c0006846 <ide_init>
/work/x86_os_my/kernel/init.c:27
	filesys_init();		// 初始化文件系统
c00015bd:	e8 60 73 00 00       	call   c0008922 <filesys_init>
/work/x86_os_my/kernel/init.c:28
}
c00015c2:	90                   	nop
c00015c3:	c9                   	leave  
c00015c4:	c3                   	ret    

c00015c5 <outb>:
outb():
/work/x86_os_my/lib/kernel/io.h:17
#define __LIB_IO_H
#include "stdint.h"
//inline省去了函数调用开支

/* 向端口port写入一个字节*/
static inline void outb(uint16_t port, uint8_t data) {
c00015c5:	55                   	push   %ebp
c00015c6:	89 e5                	mov    %esp,%ebp
c00015c8:	83 ec 08             	sub    $0x8,%esp
c00015cb:	8b 55 08             	mov    0x8(%ebp),%edx
c00015ce:	8b 45 0c             	mov    0xc(%ebp),%eax
c00015d1:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c00015d5:	88 45 f8             	mov    %al,-0x8(%ebp)
/work/x86_os_my/lib/kernel/io.h:21
/*********************************************************
 a表示用寄存器al或ax或eax,对端口指定N表示0~255, d表示用dx存储端口号, 
 %b0表示对应al,%w1表示对应dx */ 
   asm volatile ( "outb %b0, %w1" : : "a" (data), "Nd" (port));    
c00015d8:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c00015dc:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c00015e0:	ee                   	out    %al,(%dx)
/work/x86_os_my/lib/kernel/io.h:23
/******************************************************/
}
c00015e1:	90                   	nop
c00015e2:	c9                   	leave  
c00015e3:	c3                   	ret    

c00015e4 <pic_init>:
pic_init():
/work/x86_os_my/kernel/interrupt.c:41
//自定义类型 intr_handler = void*
extern intr_handler intr_entry_table[IDT_DESC_CNT];	    // 声明引用汇编kernel.S中的中断处理函数入口数组

/* 初始化可编程中断控制器8259A */
// outb 来着 lib/kernel/io.h 内联汇编写法
static void pic_init(void) {
c00015e4:	55                   	push   %ebp
c00015e5:	89 e5                	mov    %esp,%ebp
c00015e7:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:43
	/* 初始化主片 */
	outb (PIC_M_CTRL, 0x11);	// ICW1: 边沿触发,级联8259, 需要ICW4.
c00015ea:	6a 11                	push   $0x11
c00015ec:	6a 20                	push   $0x20
c00015ee:	e8 d2 ff ff ff       	call   c00015c5 <outb>
c00015f3:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:44
	outb (PIC_M_DATA, 0x20);	// ICW2: 起始中断向量号为0x20,也就是IR[0-7] 为 0x20 ~ 0x27.
c00015f6:	6a 20                	push   $0x20
c00015f8:	6a 21                	push   $0x21
c00015fa:	e8 c6 ff ff ff       	call   c00015c5 <outb>
c00015ff:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:45
	outb (PIC_M_DATA, 0x04);	// ICW3: IR2接从片. 
c0001602:	6a 04                	push   $0x4
c0001604:	6a 21                	push   $0x21
c0001606:	e8 ba ff ff ff       	call   c00015c5 <outb>
c000160b:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:46
	outb (PIC_M_DATA, 0x01);	// ICW4: 8086模式, 正常EOI
c000160e:	6a 01                	push   $0x1
c0001610:	6a 21                	push   $0x21
c0001612:	e8 ae ff ff ff       	call   c00015c5 <outb>
c0001617:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:49

	/* 初始化从片 */
	outb (PIC_S_CTRL, 0x11);	// ICW1: 边沿触发,级联8259, 需要ICW4.
c000161a:	6a 11                	push   $0x11
c000161c:	68 a0 00 00 00       	push   $0xa0
c0001621:	e8 9f ff ff ff       	call   c00015c5 <outb>
c0001626:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:50
	outb (PIC_S_DATA, 0x28);	// ICW2: 起始中断向量号为0x28,也就是IR[8-15] 为 0x28 ~ 0x2F.
c0001629:	6a 28                	push   $0x28
c000162b:	68 a1 00 00 00       	push   $0xa1
c0001630:	e8 90 ff ff ff       	call   c00015c5 <outb>
c0001635:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:51
	outb (PIC_S_DATA, 0x02);	// ICW3: 设置从片连接到主片的IR2引脚
c0001638:	6a 02                	push   $0x2
c000163a:	68 a1 00 00 00       	push   $0xa1
c000163f:	e8 81 ff ff ff       	call   c00015c5 <outb>
c0001644:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:52
	outb (PIC_S_DATA, 0x01);	// ICW4: 8086模式, 正常EOI
c0001647:	6a 01                	push   $0x1
c0001649:	68 a1 00 00 00       	push   $0xa1
c000164e:	e8 72 ff ff ff       	call   c00015c5 <outb>
c0001653:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:56

	/* IRQ2用于级联从片,必须打开,否则无法响应从片上的中断
	主片上打开的中断有IRQ0的时钟,IRQ1的键盘和级联从片的IRQ2,其它全部关闭 */
	outb (PIC_M_DATA, 0xf8);
c0001656:	68 f8 00 00 00       	push   $0xf8
c000165b:	6a 21                	push   $0x21
c000165d:	e8 63 ff ff ff       	call   c00015c5 <outb>
c0001662:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:58
	/* 打开从片上的IRQ14,此引脚接收硬盘控制器的中断 */
	outb (PIC_S_DATA, 0xbf);
c0001665:	68 bf 00 00 00       	push   $0xbf
c000166a:	68 a1 00 00 00       	push   $0xa1
c000166f:	e8 51 ff ff ff       	call   c00015c5 <outb>
c0001674:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:60

	put_str("   pic_init done\n");
c0001677:	83 ec 0c             	sub    $0xc,%esp
c000167a:	68 c8 bc 00 c0       	push   $0xc000bcc8
c000167f:	e8 ec 0a 00 00       	call   c0002170 <put_str>
c0001684:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:61
}
c0001687:	90                   	nop
c0001688:	c9                   	leave  
c0001689:	c3                   	ret    

c000168a <make_idt_desc>:
make_idt_desc():
/work/x86_os_my/kernel/interrupt.c:64

/* 创建中断门描述符 */
static void make_idt_desc(struct gate_desc* p_gdesc, uint8_t attr, intr_handler function) { 
c000168a:	55                   	push   %ebp
c000168b:	89 e5                	mov    %esp,%ebp
c000168d:	83 ec 04             	sub    $0x4,%esp
c0001690:	8b 45 0c             	mov    0xc(%ebp),%eax
c0001693:	88 45 fc             	mov    %al,-0x4(%ebp)
/work/x86_os_my/kernel/interrupt.c:65
	p_gdesc->func_offset_low_word = (uint32_t)function & 0x0000FFFF;
c0001696:	8b 45 10             	mov    0x10(%ebp),%eax
c0001699:	89 c2                	mov    %eax,%edx
c000169b:	8b 45 08             	mov    0x8(%ebp),%eax
c000169e:	66 89 10             	mov    %dx,(%eax)
/work/x86_os_my/kernel/interrupt.c:66
	p_gdesc->selector = SELECTOR_K_CODE;
c00016a1:	8b 45 08             	mov    0x8(%ebp),%eax
c00016a4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
/work/x86_os_my/kernel/interrupt.c:67
	p_gdesc->dcount = 0;
c00016aa:	8b 45 08             	mov    0x8(%ebp),%eax
c00016ad:	c6 40 04 00          	movb   $0x0,0x4(%eax)
/work/x86_os_my/kernel/interrupt.c:68
	p_gdesc->attribute = attr;
c00016b1:	8b 45 08             	mov    0x8(%ebp),%eax
c00016b4:	0f b6 55 fc          	movzbl -0x4(%ebp),%edx
c00016b8:	88 50 05             	mov    %dl,0x5(%eax)
/work/x86_os_my/kernel/interrupt.c:69
	p_gdesc->func_offset_high_word = ((uint32_t)function & 0xFFFF0000) >> 16;
c00016bb:	8b 45 10             	mov    0x10(%ebp),%eax
c00016be:	c1 e8 10             	shr    $0x10,%eax
c00016c1:	89 c2                	mov    %eax,%edx
c00016c3:	8b 45 08             	mov    0x8(%ebp),%eax
c00016c6:	66 89 50 06          	mov    %dx,0x6(%eax)
/work/x86_os_my/kernel/interrupt.c:70
}
c00016ca:	90                   	nop
c00016cb:	c9                   	leave  
c00016cc:	c3                   	ret    

c00016cd <idt_desc_init>:
idt_desc_init():
/work/x86_os_my/kernel/interrupt.c:73

/*初始化中断描述符表*/
static void idt_desc_init(void) {
c00016cd:	55                   	push   %ebp
c00016ce:	89 e5                	mov    %esp,%ebp
c00016d0:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/interrupt.c:75
	int i;
	int lastindex = IDT_DESC_CNT - 1;
c00016d3:	c7 45 f0 80 00 00 00 	movl   $0x80,-0x10(%ebp)
/work/x86_os_my/kernel/interrupt.c:76
	for (i = 0; i < IDT_DESC_CNT; i++) {
c00016da:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c00016e1:	eb 29                	jmp    c000170c <idt_desc_init+0x3f>
/work/x86_os_my/kernel/interrupt.c:77 (discriminator 3)
		make_idt_desc(&idt[i], IDT_DESC_ATTR_DPL0, intr_entry_table[i]); 
c00016e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00016e6:	8b 04 85 00 00 01 c0 	mov    -0x3fff0000(,%eax,4),%eax
c00016ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
c00016f0:	c1 e2 03             	shl    $0x3,%edx
c00016f3:	81 c2 60 01 01 c0    	add    $0xc0010160,%edx
c00016f9:	50                   	push   %eax
c00016fa:	68 8e 00 00 00       	push   $0x8e
c00016ff:	52                   	push   %edx
c0001700:	e8 85 ff ff ff       	call   c000168a <make_idt_desc>
c0001705:	83 c4 0c             	add    $0xc,%esp
/work/x86_os_my/kernel/interrupt.c:76 (discriminator 3)

/*初始化中断描述符表*/
static void idt_desc_init(void) {
	int i;
	int lastindex = IDT_DESC_CNT - 1;
	for (i = 0; i < IDT_DESC_CNT; i++) {
c0001708:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:76 (discriminator 1)
c000170c:	81 7d f4 80 00 00 00 	cmpl   $0x80,-0xc(%ebp)
c0001713:	7e ce                	jle    c00016e3 <idt_desc_init+0x16>
/work/x86_os_my/kernel/interrupt.c:81
		make_idt_desc(&idt[i], IDT_DESC_ATTR_DPL0, intr_entry_table[i]); 
	}
	/* 系统调用对应的中断门dpl为3！
	 * 中断处理程序为单独的syscall_handler */
	make_idt_desc(&idt[lastindex], IDT_DESC_ATTR_DPL3, syscall_handler);
c0001715:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0001718:	c1 e0 03             	shl    $0x3,%eax
c000171b:	05 60 01 01 c0       	add    $0xc0010160,%eax
c0001720:	68 47 21 00 c0       	push   $0xc0002147
c0001725:	68 ee 00 00 00       	push   $0xee
c000172a:	50                   	push   %eax
c000172b:	e8 5a ff ff ff       	call   c000168a <make_idt_desc>
c0001730:	83 c4 0c             	add    $0xc,%esp
/work/x86_os_my/kernel/interrupt.c:82
	put_str("   idt_desc_init done\n");
c0001733:	83 ec 0c             	sub    $0xc,%esp
c0001736:	68 da bc 00 c0       	push   $0xc000bcda
c000173b:	e8 30 0a 00 00       	call   c0002170 <put_str>
c0001740:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:83
}
c0001743:	90                   	nop
c0001744:	c9                   	leave  
c0001745:	c3                   	ret    

c0001746 <general_intr_handler>:
general_intr_handler():
/work/x86_os_my/kernel/interrupt.c:86

/* 通用的中断处理函数,一般用在异常出现时的处理 */
static void general_intr_handler(uint8_t vec_nr) {
c0001746:	55                   	push   %ebp
c0001747:	89 e5                	mov    %esp,%ebp
c0001749:	83 ec 28             	sub    $0x28,%esp
c000174c:	8b 45 08             	mov    0x8(%ebp),%eax
c000174f:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/kernel/interrupt.c:87
	if (vec_nr == 0x27 || vec_nr == 0x2f) {	// 0x2f是从片8259A上的最后一个irq引脚，保留
c0001752:	80 7d e4 27          	cmpb   $0x27,-0x1c(%ebp)
c0001756:	0f 84 bf 00 00 00    	je     c000181b <general_intr_handler+0xd5>
/work/x86_os_my/kernel/interrupt.c:87 (discriminator 1)
c000175c:	80 7d e4 2f          	cmpb   $0x2f,-0x1c(%ebp)
c0001760:	0f 84 b5 00 00 00    	je     c000181b <general_intr_handler+0xd5>
/work/x86_os_my/kernel/interrupt.c:92
		return;	//IRQ7和IRQ15会产生伪中断(spurious interrupt),无须处理。
	}
	
	/* 将光标置为左上角 并清空一片区域 */
	set_cursor(0);
c0001766:	83 ec 0c             	sub    $0xc,%esp
c0001769:	6a 00                	push   $0x0
c000176b:	e8 8d 0b 00 00       	call   c00022fd <set_cursor>
c0001770:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:93
	int cursor_pos = 0;
c0001773:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:94
	while(cursor_pos < 320) {
c000177a:	eb 11                	jmp    c000178d <general_intr_handler+0x47>
/work/x86_os_my/kernel/interrupt.c:95
		put_char(' ');
c000177c:	83 ec 0c             	sub    $0xc,%esp
c000177f:	6a 20                	push   $0x20
c0001781:	e8 08 0a 00 00       	call   c000218e <put_char>
c0001786:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:96
		cursor_pos++;
c0001789:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:94
	}
	
	/* 将光标置为左上角 并清空一片区域 */
	set_cursor(0);
	int cursor_pos = 0;
	while(cursor_pos < 320) {
c000178d:	81 7d f4 3f 01 00 00 	cmpl   $0x13f,-0xc(%ebp)
c0001794:	7e e6                	jle    c000177c <general_intr_handler+0x36>
/work/x86_os_my/kernel/interrupt.c:100
		put_char(' ');
		cursor_pos++;
	}

	/* 将光标置为左上角 打印信息 */
	set_cursor(0);
c0001796:	83 ec 0c             	sub    $0xc,%esp
c0001799:	6a 00                	push   $0x0
c000179b:	e8 5d 0b 00 00       	call   c00022fd <set_cursor>
c00017a0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:101
	put_str("!!!!!!!      excetion message begin  !!!!!!!!\n");
c00017a3:	83 ec 0c             	sub    $0xc,%esp
c00017a6:	68 f4 bc 00 c0       	push   $0xc000bcf4
c00017ab:	e8 c0 09 00 00       	call   c0002170 <put_str>
c00017b0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:102
	set_cursor(88);			// 第2行第8个字符
c00017b3:	83 ec 0c             	sub    $0xc,%esp
c00017b6:	6a 58                	push   $0x58
c00017b8:	e8 40 0b 00 00       	call   c00022fd <set_cursor>
c00017bd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:103
	put_str(intr_name[vec_nr]);
c00017c0:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c00017c4:	8b 04 85 20 0c 01 c0 	mov    -0x3ffef3e0(,%eax,4),%eax
c00017cb:	83 ec 0c             	sub    $0xc,%esp
c00017ce:	50                   	push   %eax
c00017cf:	e8 9c 09 00 00       	call   c0002170 <put_str>
c00017d4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:104
	if (vec_nr == 14) {		// 若为Pagefault,将缺失的地址打印出来并悬停
c00017d7:	80 7d e4 0e          	cmpb   $0xe,-0x1c(%ebp)
c00017db:	75 2c                	jne    c0001809 <general_intr_handler+0xc3>
/work/x86_os_my/kernel/interrupt.c:105
		int page_fault_vaddr = 0; 
c00017dd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/kernel/interrupt.c:106
		asm ("movl %%cr2, %0" : "=r" (page_fault_vaddr));	  // cr2是存放造成page_fault的地址
c00017e4:	0f 20 d0             	mov    %cr2,%eax
c00017e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/interrupt.c:107
		put_str("\npage fault addr is 0x");
c00017ea:	83 ec 0c             	sub    $0xc,%esp
c00017ed:	68 23 bd 00 c0       	push   $0xc000bd23
c00017f2:	e8 79 09 00 00       	call   c0002170 <put_str>
c00017f7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:108
		put_int(page_fault_vaddr); 
c00017fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00017fd:	83 ec 0c             	sub    $0xc,%esp
c0001800:	50                   	push   %eax
c0001801:	e8 94 0a 00 00       	call   c000229a <put_int>
c0001806:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:110
	}
	put_str("\n!!!!!!!      excetion message end    !!!!!!!!\n");
c0001809:	83 ec 0c             	sub    $0xc,%esp
c000180c:	68 3c bd 00 c0       	push   $0xc000bd3c
c0001811:	e8 5a 09 00 00       	call   c0002170 <put_str>
c0001816:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:113 (discriminator 1)
	// 能进入中断处理程序就表示已经处在关中断情况下, IF=0
	// 不会出现调度进程的情况。故下面的死循环不会再被中断，会卡死在这里。
	while(1);
c0001819:	eb fe                	jmp    c0001819 <general_intr_handler+0xd3>
/work/x86_os_my/kernel/interrupt.c:88
}

/* 通用的中断处理函数,一般用在异常出现时的处理 */
static void general_intr_handler(uint8_t vec_nr) {
	if (vec_nr == 0x27 || vec_nr == 0x2f) {	// 0x2f是从片8259A上的最后一个irq引脚，保留
		return;	//IRQ7和IRQ15会产生伪中断(spurious interrupt),无须处理。
c000181b:	90                   	nop
/work/x86_os_my/kernel/interrupt.c:114
	}
	put_str("\n!!!!!!!      excetion message end    !!!!!!!!\n");
	// 能进入中断处理程序就表示已经处在关中断情况下, IF=0
	// 不会出现调度进程的情况。故下面的死循环不会再被中断，会卡死在这里。
	while(1);
}
c000181c:	c9                   	leave  
c000181d:	c3                   	ret    

c000181e <exception_init>:
exception_init():
/work/x86_os_my/kernel/interrupt.c:117

/* 完成一般中断处理函数注册及异常名称注册 */
static void exception_init(void) {
c000181e:	55                   	push   %ebp
c000181f:	89 e5                	mov    %esp,%ebp
c0001821:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:119
	int i;
	for (i = 0; i < IDT_DESC_CNT; i++) {
c0001824:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c000182b:	eb 20                	jmp    c000184d <exception_init+0x2f>
/work/x86_os_my/kernel/interrupt.c:122 (discriminator 3)
	/* idt_table数组中的函数是在进入中断后根据中断向量号调用的,
	 * 见kernel/kernel.S的call [idt_table + %1*4] */
		idt_table[i] = general_intr_handler;		// 默认为general_intr_handler，以后会由register_handler来注册具体处理函数。
c000182d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0001830:	c7 04 85 40 0e 01 c0 	movl   $0xc0001746,-0x3ffef1c0(,%eax,4)
c0001837:	46 17 00 c0 
/work/x86_os_my/kernel/interrupt.c:123 (discriminator 3)
		intr_name[i] = "unknown";					// 先统一赋值为unknown 
c000183b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000183e:	c7 04 85 20 0c 01 c0 	movl   $0xc000bd6c,-0x3ffef3e0(,%eax,4)
c0001845:	6c bd 00 c0 
/work/x86_os_my/kernel/interrupt.c:119 (discriminator 3)
}

/* 完成一般中断处理函数注册及异常名称注册 */
static void exception_init(void) {
	int i;
	for (i = 0; i < IDT_DESC_CNT; i++) {
c0001849:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
/work/x86_os_my/kernel/interrupt.c:119 (discriminator 1)
c000184d:	81 7d fc 80 00 00 00 	cmpl   $0x80,-0x4(%ebp)
c0001854:	7e d7                	jle    c000182d <exception_init+0xf>
/work/x86_os_my/kernel/interrupt.c:125
	/* idt_table数组中的函数是在进入中断后根据中断向量号调用的,
	 * 见kernel/kernel.S的call [idt_table + %1*4] */
		idt_table[i] = general_intr_handler;		// 默认为general_intr_handler，以后会由register_handler来注册具体处理函数。
		intr_name[i] = "unknown";					// 先统一赋值为unknown 
	}
	intr_name[0] = "#DE Divide Error";
c0001856:	c7 05 20 0c 01 c0 74 	movl   $0xc000bd74,0xc0010c20
c000185d:	bd 00 c0 
/work/x86_os_my/kernel/interrupt.c:126
	intr_name[1] = "#DB Debug Exception";
c0001860:	c7 05 24 0c 01 c0 85 	movl   $0xc000bd85,0xc0010c24
c0001867:	bd 00 c0 
/work/x86_os_my/kernel/interrupt.c:127
	intr_name[2] = "NMI Interrupt";
c000186a:	c7 05 28 0c 01 c0 99 	movl   $0xc000bd99,0xc0010c28
c0001871:	bd 00 c0 
/work/x86_os_my/kernel/interrupt.c:128
	intr_name[3] = "#BP Breakpoint Exception";
c0001874:	c7 05 2c 0c 01 c0 a7 	movl   $0xc000bda7,0xc0010c2c
c000187b:	bd 00 c0 
/work/x86_os_my/kernel/interrupt.c:129
	intr_name[4] = "#OF Overflow Exception";
c000187e:	c7 05 30 0c 01 c0 c0 	movl   $0xc000bdc0,0xc0010c30
c0001885:	bd 00 c0 
/work/x86_os_my/kernel/interrupt.c:130
	intr_name[5] = "#BR BOUND Range Exceeded Exception";
c0001888:	c7 05 34 0c 01 c0 d8 	movl   $0xc000bdd8,0xc0010c34
c000188f:	bd 00 c0 
/work/x86_os_my/kernel/interrupt.c:131
	intr_name[6] = "#UD Invalid Opcode Exception";
c0001892:	c7 05 38 0c 01 c0 fb 	movl   $0xc000bdfb,0xc0010c38
c0001899:	bd 00 c0 
/work/x86_os_my/kernel/interrupt.c:132
	intr_name[7] = "#NM Device Not Available Exception";
c000189c:	c7 05 3c 0c 01 c0 18 	movl   $0xc000be18,0xc0010c3c
c00018a3:	be 00 c0 
/work/x86_os_my/kernel/interrupt.c:133
	intr_name[8] = "#DF Double Fault Exception";
c00018a6:	c7 05 40 0c 01 c0 3b 	movl   $0xc000be3b,0xc0010c40
c00018ad:	be 00 c0 
/work/x86_os_my/kernel/interrupt.c:134
	intr_name[9] = "Coprocessor Segment Overrun";
c00018b0:	c7 05 44 0c 01 c0 56 	movl   $0xc000be56,0xc0010c44
c00018b7:	be 00 c0 
/work/x86_os_my/kernel/interrupt.c:135
	intr_name[10] = "#TS Invalid TSS Exception";
c00018ba:	c7 05 48 0c 01 c0 72 	movl   $0xc000be72,0xc0010c48
c00018c1:	be 00 c0 
/work/x86_os_my/kernel/interrupt.c:136
	intr_name[11] = "#NP Segment Not Present";
c00018c4:	c7 05 4c 0c 01 c0 8c 	movl   $0xc000be8c,0xc0010c4c
c00018cb:	be 00 c0 
/work/x86_os_my/kernel/interrupt.c:137
	intr_name[12] = "#SS Stack Fault Exception";
c00018ce:	c7 05 50 0c 01 c0 a4 	movl   $0xc000bea4,0xc0010c50
c00018d5:	be 00 c0 
/work/x86_os_my/kernel/interrupt.c:138
	intr_name[13] = "#GP General Protection Exception";
c00018d8:	c7 05 54 0c 01 c0 c0 	movl   $0xc000bec0,0xc0010c54
c00018df:	be 00 c0 
/work/x86_os_my/kernel/interrupt.c:139
	intr_name[14] = "#PF Page-Fault Exception";
c00018e2:	c7 05 58 0c 01 c0 e1 	movl   $0xc000bee1,0xc0010c58
c00018e9:	be 00 c0 
/work/x86_os_my/kernel/interrupt.c:141
	// intr_name[15] 第15项是intel保留项，未使用
	intr_name[16] = "#MF x87 FPU Floating-Point Error";
c00018ec:	c7 05 60 0c 01 c0 fc 	movl   $0xc000befc,0xc0010c60
c00018f3:	be 00 c0 
/work/x86_os_my/kernel/interrupt.c:142
	intr_name[17] = "#AC Alignment Check Exception";
c00018f6:	c7 05 64 0c 01 c0 1d 	movl   $0xc000bf1d,0xc0010c64
c00018fd:	bf 00 c0 
/work/x86_os_my/kernel/interrupt.c:143
	intr_name[18] = "#MC Machine-Check Exception";
c0001900:	c7 05 68 0c 01 c0 3b 	movl   $0xc000bf3b,0xc0010c68
c0001907:	bf 00 c0 
/work/x86_os_my/kernel/interrupt.c:144
	intr_name[19] = "#XF SIMD Floating-Point Exception";
c000190a:	c7 05 6c 0c 01 c0 58 	movl   $0xc000bf58,0xc0010c6c
c0001911:	bf 00 c0 
/work/x86_os_my/kernel/interrupt.c:145
}
c0001914:	90                   	nop
c0001915:	c9                   	leave  
c0001916:	c3                   	ret    

c0001917 <intr_enable>:
intr_enable():
/work/x86_os_my/kernel/interrupt.c:148

/* 开中断并返回开中断前的状态*/
enum intr_status intr_enable() {
c0001917:	55                   	push   %ebp
c0001918:	89 e5                	mov    %esp,%ebp
c000191a:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/interrupt.c:150
	enum intr_status old_status;
	if (INTR_ON == intr_get_status()) {
c000191d:	e8 65 00 00 00       	call   c0001987 <intr_get_status>
c0001922:	83 f8 01             	cmp    $0x1,%eax
c0001925:	75 0c                	jne    c0001933 <intr_enable+0x1c>
/work/x86_os_my/kernel/interrupt.c:151
		old_status = INTR_ON;
c0001927:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:152
		return old_status;
c000192e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001931:	eb 0b                	jmp    c000193e <intr_enable+0x27>
/work/x86_os_my/kernel/interrupt.c:154
	} else {
		old_status = INTR_OFF;
c0001933:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:155
		asm volatile("sti");	 // 开中断,sti指令将IF位置1
c000193a:	fb                   	sti    
/work/x86_os_my/kernel/interrupt.c:156
		return old_status;
c000193b:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/kernel/interrupt.c:158
	}
}
c000193e:	c9                   	leave  
c000193f:	c3                   	ret    

c0001940 <intr_disable>:
intr_disable():
/work/x86_os_my/kernel/interrupt.c:161

/* 关中断,并且返回关中断前的状态 */
enum intr_status intr_disable() {     
c0001940:	55                   	push   %ebp
c0001941:	89 e5                	mov    %esp,%ebp
c0001943:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/interrupt.c:163
	enum intr_status old_status;
	if (INTR_ON == intr_get_status()) {
c0001946:	e8 3c 00 00 00       	call   c0001987 <intr_get_status>
c000194b:	83 f8 01             	cmp    $0x1,%eax
c000194e:	75 0d                	jne    c000195d <intr_disable+0x1d>
/work/x86_os_my/kernel/interrupt.c:164
		old_status = INTR_ON;
c0001950:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:165
		asm volatile("cli" : : : "memory"); // 关中断,cli指令将IF位置0
c0001957:	fa                   	cli    
/work/x86_os_my/kernel/interrupt.c:166
		return old_status;
c0001958:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000195b:	eb 0a                	jmp    c0001967 <intr_disable+0x27>
/work/x86_os_my/kernel/interrupt.c:168
	} else {
		old_status = INTR_OFF;
c000195d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:169
		return old_status;
c0001964:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/kernel/interrupt.c:171
	}
}
c0001967:	c9                   	leave  
c0001968:	c3                   	ret    

c0001969 <intr_set_status>:
intr_set_status():
/work/x86_os_my/kernel/interrupt.c:174

/* 将中断状态设置为status */
enum intr_status intr_set_status(enum intr_status status) {
c0001969:	55                   	push   %ebp
c000196a:	89 e5                	mov    %esp,%ebp
c000196c:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:175
	return status & INTR_ON ? intr_enable() : intr_disable();
c000196f:	8b 45 08             	mov    0x8(%ebp),%eax
c0001972:	83 e0 01             	and    $0x1,%eax
c0001975:	85 c0                	test   %eax,%eax
c0001977:	74 07                	je     c0001980 <intr_set_status+0x17>
/work/x86_os_my/kernel/interrupt.c:175 (discriminator 1)
c0001979:	e8 99 ff ff ff       	call   c0001917 <intr_enable>
c000197e:	eb 05                	jmp    c0001985 <intr_set_status+0x1c>
/work/x86_os_my/kernel/interrupt.c:175 (discriminator 2)
c0001980:	e8 bb ff ff ff       	call   c0001940 <intr_disable>
/work/x86_os_my/kernel/interrupt.c:176 (discriminator 5)
}
c0001985:	c9                   	leave  
c0001986:	c3                   	ret    

c0001987 <intr_get_status>:
intr_get_status():
/work/x86_os_my/kernel/interrupt.c:179

/* 获取当前中断状态 */
enum intr_status intr_get_status() {
c0001987:	55                   	push   %ebp
c0001988:	89 e5                	mov    %esp,%ebp
c000198a:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:180
	uint32_t eflags = 0; 
c000198d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
/work/x86_os_my/kernel/interrupt.c:181
	GET_EFLAGS(eflags);
c0001994:	9c                   	pushf  
c0001995:	58                   	pop    %eax
c0001996:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/kernel/interrupt.c:182
	return (EFLAGS_IF & eflags) ? INTR_ON : INTR_OFF;
c0001999:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000199c:	25 00 02 00 00       	and    $0x200,%eax
c00019a1:	85 c0                	test   %eax,%eax
c00019a3:	0f 95 c0             	setne  %al
c00019a6:	0f b6 c0             	movzbl %al,%eax
/work/x86_os_my/kernel/interrupt.c:183
}
c00019a9:	c9                   	leave  
c00019aa:	c3                   	ret    

c00019ab <register_handler>:
register_handler():
/work/x86_os_my/kernel/interrupt.c:186

/* 在中断处理程序数组第vector_no个元素中注册安装中断处理程序function */
void register_handler(uint8_t vector_no, intr_handler function) {
c00019ab:	55                   	push   %ebp
c00019ac:	89 e5                	mov    %esp,%ebp
c00019ae:	83 ec 04             	sub    $0x4,%esp
c00019b1:	8b 45 08             	mov    0x8(%ebp),%eax
c00019b4:	88 45 fc             	mov    %al,-0x4(%ebp)
/work/x86_os_my/kernel/interrupt.c:189
/* idt_table数组中的函数是在进入中断后根据中断向量号调用的,
 * 见kernel/kernel.S的call [idt_table + %1*4] */
   idt_table[vector_no] = function; 
c00019b7:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c00019bb:	8b 55 0c             	mov    0xc(%ebp),%edx
c00019be:	89 14 85 40 0e 01 c0 	mov    %edx,-0x3ffef1c0(,%eax,4)
/work/x86_os_my/kernel/interrupt.c:190
}
c00019c5:	90                   	nop
c00019c6:	c9                   	leave  
c00019c7:	c3                   	ret    

c00019c8 <idt_init>:
idt_init():
/work/x86_os_my/kernel/interrupt.c:193

/*完成有关中断的所有初始化工作*/
void idt_init() {
c00019c8:	55                   	push   %ebp
c00019c9:	89 e5                	mov    %esp,%ebp
c00019cb:	56                   	push   %esi
c00019cc:	53                   	push   %ebx
c00019cd:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:194
	put_str("idt_init start\n");
c00019d0:	83 ec 0c             	sub    $0xc,%esp
c00019d3:	68 7a bf 00 c0       	push   $0xc000bf7a
c00019d8:	e8 93 07 00 00       	call   c0002170 <put_str>
c00019dd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:195
	idt_desc_init();	// 初始化中断描述符表
c00019e0:	e8 e8 fc ff ff       	call   c00016cd <idt_desc_init>
/work/x86_os_my/kernel/interrupt.c:196
	exception_init();	// 异常名初始化并注册通常的中断处理函数
c00019e5:	e8 34 fe ff ff       	call   c000181e <exception_init>
/work/x86_os_my/kernel/interrupt.c:197
	pic_init();			// 初始化8259A
c00019ea:	e8 f5 fb ff ff       	call   c00015e4 <pic_init>
/work/x86_os_my/kernel/interrupt.c:201

	/* 加载idt */
	// IDTR 是 48 位的寄存器，低 16 位是 IDT 的界限 = IDT 尺寸大小-1，高 32 位是 IDT 的线性基地址
	uint64_t idt_operand = ((sizeof(idt) - 1) | ((uint64_t)(uint32_t)idt << 16));
c00019ef:	b8 60 01 01 c0       	mov    $0xc0010160,%eax
c00019f4:	ba 00 00 00 00       	mov    $0x0,%edx
c00019f9:	0f a4 c2 10          	shld   $0x10,%eax,%edx
c00019fd:	c1 e0 10             	shl    $0x10,%eax
c0001a00:	89 c1                	mov    %eax,%ecx
c0001a02:	81 c9 07 04 00 00    	or     $0x407,%ecx
c0001a08:	89 cb                	mov    %ecx,%ebx
c0001a0a:	89 d0                	mov    %edx,%eax
c0001a0c:	80 cc 00             	or     $0x0,%ah
c0001a0f:	89 c6                	mov    %eax,%esi
c0001a11:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c0001a14:	89 75 f4             	mov    %esi,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:202
	asm volatile("lidt %0" : : "m" (idt_operand));
c0001a17:	0f 01 5d f0          	lidtl  -0x10(%ebp)
/work/x86_os_my/kernel/interrupt.c:203
	put_str("idt_init done\n");
c0001a1b:	83 ec 0c             	sub    $0xc,%esp
c0001a1e:	68 8a bf 00 c0       	push   $0xc000bf8a
c0001a23:	e8 48 07 00 00       	call   c0002170 <put_str>
c0001a28:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:204
}
c0001a2b:	90                   	nop
c0001a2c:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0001a2f:	5b                   	pop    %ebx
c0001a30:	5e                   	pop    %esi
c0001a31:	5d                   	pop    %ebp
c0001a32:	c3                   	ret    

c0001a33 <outb>:
outb():
/work/x86_os_my/lib/kernel/io.h:17
#define __LIB_IO_H
#include "stdint.h"
//inline省去了函数调用开支

/* 向端口port写入一个字节*/
static inline void outb(uint16_t port, uint8_t data) {
c0001a33:	55                   	push   %ebp
c0001a34:	89 e5                	mov    %esp,%ebp
c0001a36:	83 ec 08             	sub    $0x8,%esp
c0001a39:	8b 55 08             	mov    0x8(%ebp),%edx
c0001a3c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0001a3f:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c0001a43:	88 45 f8             	mov    %al,-0x8(%ebp)
/work/x86_os_my/lib/kernel/io.h:21
/*********************************************************
 a表示用寄存器al或ax或eax,对端口指定N表示0~255, d表示用dx存储端口号, 
 %b0表示对应al,%w1表示对应dx */ 
   asm volatile ( "outb %b0, %w1" : : "a" (data), "Nd" (port));    
c0001a46:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c0001a4a:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0001a4e:	ee                   	out    %al,(%dx)
/work/x86_os_my/lib/kernel/io.h:23
/******************************************************/
}
c0001a4f:	90                   	nop
c0001a50:	c9                   	leave  
c0001a51:	c3                   	ret    

c0001a52 <frequency_set>:
frequency_set():
/work/x86_os_my/device/timer.c:27
/* 把操作的计数器counter_no、读写锁属性rwl、计数器模式counter_mode写入模式控制寄存器并赋予初始值counter_value */
static void frequency_set(uint8_t counter_port, \
		uint8_t counter_no, \
		uint8_t rwl, \
		uint8_t counter_mode, \
		uint16_t counter_value) {
c0001a52:	55                   	push   %ebp
c0001a53:	89 e5                	mov    %esp,%ebp
c0001a55:	56                   	push   %esi
c0001a56:	53                   	push   %ebx
c0001a57:	83 ec 14             	sub    $0x14,%esp
c0001a5a:	8b 45 08             	mov    0x8(%ebp),%eax
c0001a5d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c0001a60:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0001a63:	8b 55 14             	mov    0x14(%ebp),%edx
c0001a66:	8b 75 18             	mov    0x18(%ebp),%esi
c0001a69:	88 45 f4             	mov    %al,-0xc(%ebp)
c0001a6c:	88 5d f0             	mov    %bl,-0x10(%ebp)
c0001a6f:	88 4d ec             	mov    %cl,-0x14(%ebp)
c0001a72:	88 55 e8             	mov    %dl,-0x18(%ebp)
c0001a75:	66 89 75 e4          	mov    %si,-0x1c(%ebp)
/work/x86_os_my/device/timer.c:29
	/* 往控制字寄存器端口0x43中写入控制字 */
	outb(PIT_CONTROL_PORT, (uint8_t)(counter_no << 6 | rwl << 4 | counter_mode << 1));
c0001a79:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c0001a7d:	c1 e0 06             	shl    $0x6,%eax
c0001a80:	89 c2                	mov    %eax,%edx
c0001a82:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0001a86:	c1 e0 04             	shl    $0x4,%eax
c0001a89:	09 c2                	or     %eax,%edx
c0001a8b:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c0001a8f:	01 c0                	add    %eax,%eax
c0001a91:	09 d0                	or     %edx,%eax
c0001a93:	0f b6 c0             	movzbl %al,%eax
c0001a96:	50                   	push   %eax
c0001a97:	6a 43                	push   $0x43
c0001a99:	e8 95 ff ff ff       	call   c0001a33 <outb>
c0001a9e:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/timer.c:31
	/* 先写入counter_value的低8位 */
	outb(counter_port, (uint8_t)counter_value);
c0001aa1:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
c0001aa5:	0f b6 d0             	movzbl %al,%edx
c0001aa8:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0001aac:	52                   	push   %edx
c0001aad:	50                   	push   %eax
c0001aae:	e8 80 ff ff ff       	call   c0001a33 <outb>
c0001ab3:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/timer.c:33
	/* 再写入counter_value的高8位 */
	outb(counter_port, (uint8_t)counter_value >> 8);
c0001ab6:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0001aba:	6a 00                	push   $0x0
c0001abc:	50                   	push   %eax
c0001abd:	e8 71 ff ff ff       	call   c0001a33 <outb>
c0001ac2:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/timer.c:34
}
c0001ac5:	90                   	nop
c0001ac6:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0001ac9:	5b                   	pop    %ebx
c0001aca:	5e                   	pop    %esi
c0001acb:	5d                   	pop    %ebp
c0001acc:	c3                   	ret    

c0001acd <intr_timer_handler>:
intr_timer_handler():
/work/x86_os_my/device/timer.c:37

/* 时钟的中断处理函数 */
static void intr_timer_handler(void) {
c0001acd:	55                   	push   %ebp
c0001ace:	89 e5                	mov    %esp,%ebp
c0001ad0:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/timer.c:38
	struct task_struct* cur_thread = running_thread();		// 返回线程PCB
c0001ad3:	e8 d2 20 00 00       	call   c0003baa <running_thread>
c0001ad8:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/timer.c:40

	ASSERT(cur_thread->stack_magic == 0x19870916);			// 检查栈是否溢出
c0001adb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001ade:	8b 80 14 01 00 00    	mov    0x114(%eax),%eax
c0001ae4:	3d 16 09 87 19       	cmp    $0x19870916,%eax
c0001ae9:	74 19                	je     c0001b04 <intr_timer_handler+0x37>
/work/x86_os_my/device/timer.c:40 (discriminator 1)
c0001aeb:	68 9c bf 00 c0       	push   $0xc000bf9c
c0001af0:	68 04 c0 00 c0       	push   $0xc000c004
c0001af5:	6a 28                	push   $0x28
c0001af7:	68 c2 bf 00 c0       	push   $0xc000bfc2
c0001afc:	e8 20 08 00 00       	call   c0002321 <panic_spin>
c0001b01:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:42

	cur_thread->elapsed_ticks++;// 记录此线程占用的cpu时间
c0001b04:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001b07:	8b 40 20             	mov    0x20(%eax),%eax
c0001b0a:	8d 50 01             	lea    0x1(%eax),%edx
c0001b0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001b10:	89 50 20             	mov    %edx,0x20(%eax)
/work/x86_os_my/device/timer.c:43
	ticks++;	//从内核第一次处理时间中断开始,至今的滴哒数,是内核态和用户态总共的嘀哒数
c0001b13:	a1 44 10 01 c0       	mov    0xc0011044,%eax
c0001b18:	83 c0 01             	add    $0x1,%eax
c0001b1b:	a3 44 10 01 c0       	mov    %eax,0xc0011044
/work/x86_os_my/device/timer.c:45

	if (cur_thread->ticks == 0) {
c0001b20:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001b23:	0f b6 40 1d          	movzbl 0x1d(%eax),%eax
c0001b27:	84 c0                	test   %al,%al
c0001b29:	75 07                	jne    c0001b32 <intr_timer_handler+0x65>
/work/x86_os_my/device/timer.c:46
		schedule();				// 若进程时间片用完就开始调度新的进程上cpu
c0001b2b:	e8 d0 23 00 00       	call   c0003f00 <schedule>
/work/x86_os_my/device/timer.c:50
	} else {
		cur_thread->ticks--;	// 将当前进程的时间片-1
	}
}
c0001b30:	eb 10                	jmp    c0001b42 <intr_timer_handler+0x75>
/work/x86_os_my/device/timer.c:48
	ticks++;	//从内核第一次处理时间中断开始,至今的滴哒数,是内核态和用户态总共的嘀哒数

	if (cur_thread->ticks == 0) {
		schedule();				// 若进程时间片用完就开始调度新的进程上cpu
	} else {
		cur_thread->ticks--;	// 将当前进程的时间片-1
c0001b32:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001b35:	0f b6 40 1d          	movzbl 0x1d(%eax),%eax
c0001b39:	8d 50 ff             	lea    -0x1(%eax),%edx
c0001b3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001b3f:	88 50 1d             	mov    %dl,0x1d(%eax)
/work/x86_os_my/device/timer.c:50
	}
}
c0001b42:	90                   	nop
c0001b43:	c9                   	leave  
c0001b44:	c3                   	ret    

c0001b45 <ticks_to_sleep>:
ticks_to_sleep():
/work/x86_os_my/device/timer.c:53

/* 以tick为单位的sleep,任何时间形式的sleep会转换此ticks形式 */
static void ticks_to_sleep(uint32_t sleep_ticks) {
c0001b45:	55                   	push   %ebp
c0001b46:	89 e5                	mov    %esp,%ebp
c0001b48:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/timer.c:54
	uint32_t start_tick = ticks;
c0001b4b:	a1 44 10 01 c0       	mov    0xc0011044,%eax
c0001b50:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/timer.c:57

	/* 若间隔的ticks数不够便让出cpu */
	while (ticks - start_tick < sleep_ticks) {
c0001b53:	eb 05                	jmp    c0001b5a <ticks_to_sleep+0x15>
/work/x86_os_my/device/timer.c:58
		thread_yield();
c0001b55:	e8 50 26 00 00       	call   c00041aa <thread_yield>
/work/x86_os_my/device/timer.c:57
/* 以tick为单位的sleep,任何时间形式的sleep会转换此ticks形式 */
static void ticks_to_sleep(uint32_t sleep_ticks) {
	uint32_t start_tick = ticks;

	/* 若间隔的ticks数不够便让出cpu */
	while (ticks - start_tick < sleep_ticks) {
c0001b5a:	a1 44 10 01 c0       	mov    0xc0011044,%eax
c0001b5f:	2b 45 f4             	sub    -0xc(%ebp),%eax
c0001b62:	3b 45 08             	cmp    0x8(%ebp),%eax
c0001b65:	72 ee                	jb     c0001b55 <ticks_to_sleep+0x10>
/work/x86_os_my/device/timer.c:60
		thread_yield();
	}
}
c0001b67:	90                   	nop
c0001b68:	c9                   	leave  
c0001b69:	c3                   	ret    

c0001b6a <mtime_sleep>:
mtime_sleep():
/work/x86_os_my/device/timer.c:62

void mtime_sleep(uint32_t m_seconds) {
c0001b6a:	55                   	push   %ebp
c0001b6b:	89 e5                	mov    %esp,%ebp
c0001b6d:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/timer.c:63
	uint32_t sleep_ticks = DIV_ROUND_UP(m_seconds, mil_seconds_per_intr);
c0001b70:	8b 45 08             	mov    0x8(%ebp),%eax
c0001b73:	83 c0 09             	add    $0x9,%eax
c0001b76:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
c0001b7b:	f7 e2                	mul    %edx
c0001b7d:	89 d0                	mov    %edx,%eax
c0001b7f:	c1 e8 03             	shr    $0x3,%eax
c0001b82:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/timer.c:64
	ASSERT(sleep_ticks > 0);
c0001b85:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0001b89:	75 19                	jne    c0001ba4 <mtime_sleep+0x3a>
/work/x86_os_my/device/timer.c:64 (discriminator 1)
c0001b8b:	68 d1 bf 00 c0       	push   $0xc000bfd1
c0001b90:	68 18 c0 00 c0       	push   $0xc000c018
c0001b95:	6a 40                	push   $0x40
c0001b97:	68 c2 bf 00 c0       	push   $0xc000bfc2
c0001b9c:	e8 80 07 00 00       	call   c0002321 <panic_spin>
c0001ba1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:65
	ticks_to_sleep(sleep_ticks); 
c0001ba4:	83 ec 0c             	sub    $0xc,%esp
c0001ba7:	ff 75 f4             	pushl  -0xc(%ebp)
c0001baa:	e8 96 ff ff ff       	call   c0001b45 <ticks_to_sleep>
c0001baf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:66
}
c0001bb2:	90                   	nop
c0001bb3:	c9                   	leave  
c0001bb4:	c3                   	ret    

c0001bb5 <timer_init>:
timer_init():
/work/x86_os_my/device/timer.c:69

/* 初始化PIT8253 */
void timer_init() {
c0001bb5:	55                   	push   %ebp
c0001bb6:	89 e5                	mov    %esp,%ebp
c0001bb8:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/timer.c:70
	put_str("timer_init start\n");
c0001bbb:	83 ec 0c             	sub    $0xc,%esp
c0001bbe:	68 e1 bf 00 c0       	push   $0xc000bfe1
c0001bc3:	e8 a8 05 00 00       	call   c0002170 <put_str>
c0001bc8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:72
	/* 设置8253的定时周期,也就是发中断的周期 */
	frequency_set(CONTRER0_PORT, COUNTER0_NO, READ_WRITE_LATCH, COUNTER_MODE, COUNTER0_VALUE);
c0001bcb:	83 ec 0c             	sub    $0xc,%esp
c0001bce:	68 9b 2e 00 00       	push   $0x2e9b
c0001bd3:	6a 02                	push   $0x2
c0001bd5:	6a 03                	push   $0x3
c0001bd7:	6a 00                	push   $0x0
c0001bd9:	6a 40                	push   $0x40
c0001bdb:	e8 72 fe ff ff       	call   c0001a52 <frequency_set>
c0001be0:	83 c4 20             	add    $0x20,%esp
/work/x86_os_my/device/timer.c:73
	register_handler(0x20, intr_timer_handler);
c0001be3:	83 ec 08             	sub    $0x8,%esp
c0001be6:	68 cd 1a 00 c0       	push   $0xc0001acd
c0001beb:	6a 20                	push   $0x20
c0001bed:	e8 b9 fd ff ff       	call   c00019ab <register_handler>
c0001bf2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:74
	put_str("timer_init done\n");
c0001bf5:	83 ec 0c             	sub    $0xc,%esp
c0001bf8:	68 f3 bf 00 c0       	push   $0xc000bff3
c0001bfd:	e8 6e 05 00 00       	call   c0002170 <put_str>
c0001c02:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:75
}
c0001c05:	90                   	nop
c0001c06:	c9                   	leave  
c0001c07:	c3                   	ret    
c0001c08:	66 90                	xchg   %ax,%ax
c0001c0a:	66 90                	xchg   %ax,%ax
c0001c0c:	66 90                	xchg   %ax,%ax
c0001c0e:	66 90                	xchg   %ax,%ax

c0001c10 <intr_exit>:
intr_exit():
c0001c10:	83 c4 04             	add    $0x4,%esp
c0001c13:	61                   	popa   
c0001c14:	0f a9                	pop    %gs
c0001c16:	0f a1                	pop    %fs
c0001c18:	07                   	pop    %es
c0001c19:	1f                   	pop    %ds
c0001c1a:	83 c4 04             	add    $0x4,%esp
c0001c1d:	cf                   	iret   

c0001c1e <intr0x00entry>:
intr0x00entry():
c0001c1e:	6a 00                	push   $0x0
c0001c20:	1e                   	push   %ds
c0001c21:	06                   	push   %es
c0001c22:	0f a0                	push   %fs
c0001c24:	0f a8                	push   %gs
c0001c26:	60                   	pusha  
c0001c27:	b0 20                	mov    $0x20,%al
c0001c29:	e6 a0                	out    %al,$0xa0
c0001c2b:	e6 20                	out    %al,$0x20
c0001c2d:	6a 00                	push   $0x0
c0001c2f:	ff 15 40 0e 01 c0    	call   *0xc0010e40
c0001c35:	eb d9                	jmp    c0001c10 <intr_exit>

c0001c37 <intr0x01entry>:
intr0x01entry():
c0001c37:	6a 00                	push   $0x0
c0001c39:	1e                   	push   %ds
c0001c3a:	06                   	push   %es
c0001c3b:	0f a0                	push   %fs
c0001c3d:	0f a8                	push   %gs
c0001c3f:	60                   	pusha  
c0001c40:	b0 20                	mov    $0x20,%al
c0001c42:	e6 a0                	out    %al,$0xa0
c0001c44:	e6 20                	out    %al,$0x20
c0001c46:	6a 01                	push   $0x1
c0001c48:	ff 15 44 0e 01 c0    	call   *0xc0010e44
c0001c4e:	eb c0                	jmp    c0001c10 <intr_exit>

c0001c50 <intr0x02entry>:
intr0x02entry():
c0001c50:	6a 00                	push   $0x0
c0001c52:	1e                   	push   %ds
c0001c53:	06                   	push   %es
c0001c54:	0f a0                	push   %fs
c0001c56:	0f a8                	push   %gs
c0001c58:	60                   	pusha  
c0001c59:	b0 20                	mov    $0x20,%al
c0001c5b:	e6 a0                	out    %al,$0xa0
c0001c5d:	e6 20                	out    %al,$0x20
c0001c5f:	6a 02                	push   $0x2
c0001c61:	ff 15 48 0e 01 c0    	call   *0xc0010e48
c0001c67:	eb a7                	jmp    c0001c10 <intr_exit>

c0001c69 <intr0x03entry>:
intr0x03entry():
c0001c69:	6a 00                	push   $0x0
c0001c6b:	1e                   	push   %ds
c0001c6c:	06                   	push   %es
c0001c6d:	0f a0                	push   %fs
c0001c6f:	0f a8                	push   %gs
c0001c71:	60                   	pusha  
c0001c72:	b0 20                	mov    $0x20,%al
c0001c74:	e6 a0                	out    %al,$0xa0
c0001c76:	e6 20                	out    %al,$0x20
c0001c78:	6a 03                	push   $0x3
c0001c7a:	ff 15 4c 0e 01 c0    	call   *0xc0010e4c
c0001c80:	eb 8e                	jmp    c0001c10 <intr_exit>

c0001c82 <intr0x04entry>:
intr0x04entry():
c0001c82:	6a 00                	push   $0x0
c0001c84:	1e                   	push   %ds
c0001c85:	06                   	push   %es
c0001c86:	0f a0                	push   %fs
c0001c88:	0f a8                	push   %gs
c0001c8a:	60                   	pusha  
c0001c8b:	b0 20                	mov    $0x20,%al
c0001c8d:	e6 a0                	out    %al,$0xa0
c0001c8f:	e6 20                	out    %al,$0x20
c0001c91:	6a 04                	push   $0x4
c0001c93:	ff 15 50 0e 01 c0    	call   *0xc0010e50
c0001c99:	e9 72 ff ff ff       	jmp    c0001c10 <intr_exit>

c0001c9e <intr0x05entry>:
intr0x05entry():
c0001c9e:	6a 00                	push   $0x0
c0001ca0:	1e                   	push   %ds
c0001ca1:	06                   	push   %es
c0001ca2:	0f a0                	push   %fs
c0001ca4:	0f a8                	push   %gs
c0001ca6:	60                   	pusha  
c0001ca7:	b0 20                	mov    $0x20,%al
c0001ca9:	e6 a0                	out    %al,$0xa0
c0001cab:	e6 20                	out    %al,$0x20
c0001cad:	6a 05                	push   $0x5
c0001caf:	ff 15 54 0e 01 c0    	call   *0xc0010e54
c0001cb5:	e9 56 ff ff ff       	jmp    c0001c10 <intr_exit>

c0001cba <intr0x06entry>:
intr0x06entry():
c0001cba:	6a 00                	push   $0x0
c0001cbc:	1e                   	push   %ds
c0001cbd:	06                   	push   %es
c0001cbe:	0f a0                	push   %fs
c0001cc0:	0f a8                	push   %gs
c0001cc2:	60                   	pusha  
c0001cc3:	b0 20                	mov    $0x20,%al
c0001cc5:	e6 a0                	out    %al,$0xa0
c0001cc7:	e6 20                	out    %al,$0x20
c0001cc9:	6a 06                	push   $0x6
c0001ccb:	ff 15 58 0e 01 c0    	call   *0xc0010e58
c0001cd1:	e9 3a ff ff ff       	jmp    c0001c10 <intr_exit>

c0001cd6 <intr0x07entry>:
intr0x07entry():
c0001cd6:	6a 00                	push   $0x0
c0001cd8:	1e                   	push   %ds
c0001cd9:	06                   	push   %es
c0001cda:	0f a0                	push   %fs
c0001cdc:	0f a8                	push   %gs
c0001cde:	60                   	pusha  
c0001cdf:	b0 20                	mov    $0x20,%al
c0001ce1:	e6 a0                	out    %al,$0xa0
c0001ce3:	e6 20                	out    %al,$0x20
c0001ce5:	6a 07                	push   $0x7
c0001ce7:	ff 15 5c 0e 01 c0    	call   *0xc0010e5c
c0001ced:	e9 1e ff ff ff       	jmp    c0001c10 <intr_exit>

c0001cf2 <intr0x08entry>:
intr0x08entry():
c0001cf2:	90                   	nop
c0001cf3:	1e                   	push   %ds
c0001cf4:	06                   	push   %es
c0001cf5:	0f a0                	push   %fs
c0001cf7:	0f a8                	push   %gs
c0001cf9:	60                   	pusha  
c0001cfa:	b0 20                	mov    $0x20,%al
c0001cfc:	e6 a0                	out    %al,$0xa0
c0001cfe:	e6 20                	out    %al,$0x20
c0001d00:	6a 08                	push   $0x8
c0001d02:	ff 15 60 0e 01 c0    	call   *0xc0010e60
c0001d08:	e9 03 ff ff ff       	jmp    c0001c10 <intr_exit>

c0001d0d <intr0x09entry>:
intr0x09entry():
c0001d0d:	6a 00                	push   $0x0
c0001d0f:	1e                   	push   %ds
c0001d10:	06                   	push   %es
c0001d11:	0f a0                	push   %fs
c0001d13:	0f a8                	push   %gs
c0001d15:	60                   	pusha  
c0001d16:	b0 20                	mov    $0x20,%al
c0001d18:	e6 a0                	out    %al,$0xa0
c0001d1a:	e6 20                	out    %al,$0x20
c0001d1c:	6a 09                	push   $0x9
c0001d1e:	ff 15 64 0e 01 c0    	call   *0xc0010e64
c0001d24:	e9 e7 fe ff ff       	jmp    c0001c10 <intr_exit>

c0001d29 <intr0x0aentry>:
intr0x0aentry():
c0001d29:	90                   	nop
c0001d2a:	1e                   	push   %ds
c0001d2b:	06                   	push   %es
c0001d2c:	0f a0                	push   %fs
c0001d2e:	0f a8                	push   %gs
c0001d30:	60                   	pusha  
c0001d31:	b0 20                	mov    $0x20,%al
c0001d33:	e6 a0                	out    %al,$0xa0
c0001d35:	e6 20                	out    %al,$0x20
c0001d37:	6a 0a                	push   $0xa
c0001d39:	ff 15 68 0e 01 c0    	call   *0xc0010e68
c0001d3f:	e9 cc fe ff ff       	jmp    c0001c10 <intr_exit>

c0001d44 <intr0x0bentry>:
intr0x0bentry():
c0001d44:	90                   	nop
c0001d45:	1e                   	push   %ds
c0001d46:	06                   	push   %es
c0001d47:	0f a0                	push   %fs
c0001d49:	0f a8                	push   %gs
c0001d4b:	60                   	pusha  
c0001d4c:	b0 20                	mov    $0x20,%al
c0001d4e:	e6 a0                	out    %al,$0xa0
c0001d50:	e6 20                	out    %al,$0x20
c0001d52:	6a 0b                	push   $0xb
c0001d54:	ff 15 6c 0e 01 c0    	call   *0xc0010e6c
c0001d5a:	e9 b1 fe ff ff       	jmp    c0001c10 <intr_exit>

c0001d5f <intr0x0centry>:
intr0x0centry():
c0001d5f:	6a 00                	push   $0x0
c0001d61:	1e                   	push   %ds
c0001d62:	06                   	push   %es
c0001d63:	0f a0                	push   %fs
c0001d65:	0f a8                	push   %gs
c0001d67:	60                   	pusha  
c0001d68:	b0 20                	mov    $0x20,%al
c0001d6a:	e6 a0                	out    %al,$0xa0
c0001d6c:	e6 20                	out    %al,$0x20
c0001d6e:	6a 0c                	push   $0xc
c0001d70:	ff 15 70 0e 01 c0    	call   *0xc0010e70
c0001d76:	e9 95 fe ff ff       	jmp    c0001c10 <intr_exit>

c0001d7b <intr0x0dentry>:
intr0x0dentry():
c0001d7b:	90                   	nop
c0001d7c:	1e                   	push   %ds
c0001d7d:	06                   	push   %es
c0001d7e:	0f a0                	push   %fs
c0001d80:	0f a8                	push   %gs
c0001d82:	60                   	pusha  
c0001d83:	b0 20                	mov    $0x20,%al
c0001d85:	e6 a0                	out    %al,$0xa0
c0001d87:	e6 20                	out    %al,$0x20
c0001d89:	6a 0d                	push   $0xd
c0001d8b:	ff 15 74 0e 01 c0    	call   *0xc0010e74
c0001d91:	e9 7a fe ff ff       	jmp    c0001c10 <intr_exit>

c0001d96 <intr0x0eentry>:
intr0x0eentry():
c0001d96:	90                   	nop
c0001d97:	1e                   	push   %ds
c0001d98:	06                   	push   %es
c0001d99:	0f a0                	push   %fs
c0001d9b:	0f a8                	push   %gs
c0001d9d:	60                   	pusha  
c0001d9e:	b0 20                	mov    $0x20,%al
c0001da0:	e6 a0                	out    %al,$0xa0
c0001da2:	e6 20                	out    %al,$0x20
c0001da4:	6a 0e                	push   $0xe
c0001da6:	ff 15 78 0e 01 c0    	call   *0xc0010e78
c0001dac:	e9 5f fe ff ff       	jmp    c0001c10 <intr_exit>

c0001db1 <intr0x0fentry>:
intr0x0fentry():
c0001db1:	6a 00                	push   $0x0
c0001db3:	1e                   	push   %ds
c0001db4:	06                   	push   %es
c0001db5:	0f a0                	push   %fs
c0001db7:	0f a8                	push   %gs
c0001db9:	60                   	pusha  
c0001dba:	b0 20                	mov    $0x20,%al
c0001dbc:	e6 a0                	out    %al,$0xa0
c0001dbe:	e6 20                	out    %al,$0x20
c0001dc0:	6a 0f                	push   $0xf
c0001dc2:	ff 15 7c 0e 01 c0    	call   *0xc0010e7c
c0001dc8:	e9 43 fe ff ff       	jmp    c0001c10 <intr_exit>

c0001dcd <intr0x10entry>:
intr0x10entry():
c0001dcd:	6a 00                	push   $0x0
c0001dcf:	1e                   	push   %ds
c0001dd0:	06                   	push   %es
c0001dd1:	0f a0                	push   %fs
c0001dd3:	0f a8                	push   %gs
c0001dd5:	60                   	pusha  
c0001dd6:	b0 20                	mov    $0x20,%al
c0001dd8:	e6 a0                	out    %al,$0xa0
c0001dda:	e6 20                	out    %al,$0x20
c0001ddc:	6a 10                	push   $0x10
c0001dde:	ff 15 80 0e 01 c0    	call   *0xc0010e80
c0001de4:	e9 27 fe ff ff       	jmp    c0001c10 <intr_exit>

c0001de9 <intr0x11entry>:
intr0x11entry():
c0001de9:	90                   	nop
c0001dea:	1e                   	push   %ds
c0001deb:	06                   	push   %es
c0001dec:	0f a0                	push   %fs
c0001dee:	0f a8                	push   %gs
c0001df0:	60                   	pusha  
c0001df1:	b0 20                	mov    $0x20,%al
c0001df3:	e6 a0                	out    %al,$0xa0
c0001df5:	e6 20                	out    %al,$0x20
c0001df7:	6a 11                	push   $0x11
c0001df9:	ff 15 84 0e 01 c0    	call   *0xc0010e84
c0001dff:	e9 0c fe ff ff       	jmp    c0001c10 <intr_exit>

c0001e04 <intr0x12entry>:
intr0x12entry():
c0001e04:	6a 00                	push   $0x0
c0001e06:	1e                   	push   %ds
c0001e07:	06                   	push   %es
c0001e08:	0f a0                	push   %fs
c0001e0a:	0f a8                	push   %gs
c0001e0c:	60                   	pusha  
c0001e0d:	b0 20                	mov    $0x20,%al
c0001e0f:	e6 a0                	out    %al,$0xa0
c0001e11:	e6 20                	out    %al,$0x20
c0001e13:	6a 12                	push   $0x12
c0001e15:	ff 15 88 0e 01 c0    	call   *0xc0010e88
c0001e1b:	e9 f0 fd ff ff       	jmp    c0001c10 <intr_exit>

c0001e20 <intr0x13entry>:
intr0x13entry():
c0001e20:	6a 00                	push   $0x0
c0001e22:	1e                   	push   %ds
c0001e23:	06                   	push   %es
c0001e24:	0f a0                	push   %fs
c0001e26:	0f a8                	push   %gs
c0001e28:	60                   	pusha  
c0001e29:	b0 20                	mov    $0x20,%al
c0001e2b:	e6 a0                	out    %al,$0xa0
c0001e2d:	e6 20                	out    %al,$0x20
c0001e2f:	6a 13                	push   $0x13
c0001e31:	ff 15 8c 0e 01 c0    	call   *0xc0010e8c
c0001e37:	e9 d4 fd ff ff       	jmp    c0001c10 <intr_exit>

c0001e3c <intr0x14entry>:
intr0x14entry():
c0001e3c:	6a 00                	push   $0x0
c0001e3e:	1e                   	push   %ds
c0001e3f:	06                   	push   %es
c0001e40:	0f a0                	push   %fs
c0001e42:	0f a8                	push   %gs
c0001e44:	60                   	pusha  
c0001e45:	b0 20                	mov    $0x20,%al
c0001e47:	e6 a0                	out    %al,$0xa0
c0001e49:	e6 20                	out    %al,$0x20
c0001e4b:	6a 14                	push   $0x14
c0001e4d:	ff 15 90 0e 01 c0    	call   *0xc0010e90
c0001e53:	e9 b8 fd ff ff       	jmp    c0001c10 <intr_exit>

c0001e58 <intr0x15entry>:
intr0x15entry():
c0001e58:	6a 00                	push   $0x0
c0001e5a:	1e                   	push   %ds
c0001e5b:	06                   	push   %es
c0001e5c:	0f a0                	push   %fs
c0001e5e:	0f a8                	push   %gs
c0001e60:	60                   	pusha  
c0001e61:	b0 20                	mov    $0x20,%al
c0001e63:	e6 a0                	out    %al,$0xa0
c0001e65:	e6 20                	out    %al,$0x20
c0001e67:	6a 15                	push   $0x15
c0001e69:	ff 15 94 0e 01 c0    	call   *0xc0010e94
c0001e6f:	e9 9c fd ff ff       	jmp    c0001c10 <intr_exit>

c0001e74 <intr0x16entry>:
intr0x16entry():
c0001e74:	6a 00                	push   $0x0
c0001e76:	1e                   	push   %ds
c0001e77:	06                   	push   %es
c0001e78:	0f a0                	push   %fs
c0001e7a:	0f a8                	push   %gs
c0001e7c:	60                   	pusha  
c0001e7d:	b0 20                	mov    $0x20,%al
c0001e7f:	e6 a0                	out    %al,$0xa0
c0001e81:	e6 20                	out    %al,$0x20
c0001e83:	6a 16                	push   $0x16
c0001e85:	ff 15 98 0e 01 c0    	call   *0xc0010e98
c0001e8b:	e9 80 fd ff ff       	jmp    c0001c10 <intr_exit>

c0001e90 <intr0x17entry>:
intr0x17entry():
c0001e90:	6a 00                	push   $0x0
c0001e92:	1e                   	push   %ds
c0001e93:	06                   	push   %es
c0001e94:	0f a0                	push   %fs
c0001e96:	0f a8                	push   %gs
c0001e98:	60                   	pusha  
c0001e99:	b0 20                	mov    $0x20,%al
c0001e9b:	e6 a0                	out    %al,$0xa0
c0001e9d:	e6 20                	out    %al,$0x20
c0001e9f:	6a 17                	push   $0x17
c0001ea1:	ff 15 9c 0e 01 c0    	call   *0xc0010e9c
c0001ea7:	e9 64 fd ff ff       	jmp    c0001c10 <intr_exit>

c0001eac <intr0x18entry>:
intr0x18entry():
c0001eac:	90                   	nop
c0001ead:	1e                   	push   %ds
c0001eae:	06                   	push   %es
c0001eaf:	0f a0                	push   %fs
c0001eb1:	0f a8                	push   %gs
c0001eb3:	60                   	pusha  
c0001eb4:	b0 20                	mov    $0x20,%al
c0001eb6:	e6 a0                	out    %al,$0xa0
c0001eb8:	e6 20                	out    %al,$0x20
c0001eba:	6a 18                	push   $0x18
c0001ebc:	ff 15 a0 0e 01 c0    	call   *0xc0010ea0
c0001ec2:	e9 49 fd ff ff       	jmp    c0001c10 <intr_exit>

c0001ec7 <intr0x19entry>:
intr0x19entry():
c0001ec7:	6a 00                	push   $0x0
c0001ec9:	1e                   	push   %ds
c0001eca:	06                   	push   %es
c0001ecb:	0f a0                	push   %fs
c0001ecd:	0f a8                	push   %gs
c0001ecf:	60                   	pusha  
c0001ed0:	b0 20                	mov    $0x20,%al
c0001ed2:	e6 a0                	out    %al,$0xa0
c0001ed4:	e6 20                	out    %al,$0x20
c0001ed6:	6a 19                	push   $0x19
c0001ed8:	ff 15 a4 0e 01 c0    	call   *0xc0010ea4
c0001ede:	e9 2d fd ff ff       	jmp    c0001c10 <intr_exit>

c0001ee3 <intr0x1aentry>:
intr0x1aentry():
c0001ee3:	90                   	nop
c0001ee4:	1e                   	push   %ds
c0001ee5:	06                   	push   %es
c0001ee6:	0f a0                	push   %fs
c0001ee8:	0f a8                	push   %gs
c0001eea:	60                   	pusha  
c0001eeb:	b0 20                	mov    $0x20,%al
c0001eed:	e6 a0                	out    %al,$0xa0
c0001eef:	e6 20                	out    %al,$0x20
c0001ef1:	6a 1a                	push   $0x1a
c0001ef3:	ff 15 a8 0e 01 c0    	call   *0xc0010ea8
c0001ef9:	e9 12 fd ff ff       	jmp    c0001c10 <intr_exit>

c0001efe <intr0x1bentry>:
intr0x1bentry():
c0001efe:	90                   	nop
c0001eff:	1e                   	push   %ds
c0001f00:	06                   	push   %es
c0001f01:	0f a0                	push   %fs
c0001f03:	0f a8                	push   %gs
c0001f05:	60                   	pusha  
c0001f06:	b0 20                	mov    $0x20,%al
c0001f08:	e6 a0                	out    %al,$0xa0
c0001f0a:	e6 20                	out    %al,$0x20
c0001f0c:	6a 1b                	push   $0x1b
c0001f0e:	ff 15 ac 0e 01 c0    	call   *0xc0010eac
c0001f14:	e9 f7 fc ff ff       	jmp    c0001c10 <intr_exit>

c0001f19 <intr0x1centry>:
intr0x1centry():
c0001f19:	6a 00                	push   $0x0
c0001f1b:	1e                   	push   %ds
c0001f1c:	06                   	push   %es
c0001f1d:	0f a0                	push   %fs
c0001f1f:	0f a8                	push   %gs
c0001f21:	60                   	pusha  
c0001f22:	b0 20                	mov    $0x20,%al
c0001f24:	e6 a0                	out    %al,$0xa0
c0001f26:	e6 20                	out    %al,$0x20
c0001f28:	6a 1c                	push   $0x1c
c0001f2a:	ff 15 b0 0e 01 c0    	call   *0xc0010eb0
c0001f30:	e9 db fc ff ff       	jmp    c0001c10 <intr_exit>

c0001f35 <intr0x1dentry>:
intr0x1dentry():
c0001f35:	90                   	nop
c0001f36:	1e                   	push   %ds
c0001f37:	06                   	push   %es
c0001f38:	0f a0                	push   %fs
c0001f3a:	0f a8                	push   %gs
c0001f3c:	60                   	pusha  
c0001f3d:	b0 20                	mov    $0x20,%al
c0001f3f:	e6 a0                	out    %al,$0xa0
c0001f41:	e6 20                	out    %al,$0x20
c0001f43:	6a 1d                	push   $0x1d
c0001f45:	ff 15 b4 0e 01 c0    	call   *0xc0010eb4
c0001f4b:	e9 c0 fc ff ff       	jmp    c0001c10 <intr_exit>

c0001f50 <intr0x1eentry>:
intr0x1eentry():
c0001f50:	90                   	nop
c0001f51:	1e                   	push   %ds
c0001f52:	06                   	push   %es
c0001f53:	0f a0                	push   %fs
c0001f55:	0f a8                	push   %gs
c0001f57:	60                   	pusha  
c0001f58:	b0 20                	mov    $0x20,%al
c0001f5a:	e6 a0                	out    %al,$0xa0
c0001f5c:	e6 20                	out    %al,$0x20
c0001f5e:	6a 1e                	push   $0x1e
c0001f60:	ff 15 b8 0e 01 c0    	call   *0xc0010eb8
c0001f66:	e9 a5 fc ff ff       	jmp    c0001c10 <intr_exit>

c0001f6b <intr0x1fentry>:
intr0x1fentry():
c0001f6b:	6a 00                	push   $0x0
c0001f6d:	1e                   	push   %ds
c0001f6e:	06                   	push   %es
c0001f6f:	0f a0                	push   %fs
c0001f71:	0f a8                	push   %gs
c0001f73:	60                   	pusha  
c0001f74:	b0 20                	mov    $0x20,%al
c0001f76:	e6 a0                	out    %al,$0xa0
c0001f78:	e6 20                	out    %al,$0x20
c0001f7a:	6a 1f                	push   $0x1f
c0001f7c:	ff 15 bc 0e 01 c0    	call   *0xc0010ebc
c0001f82:	e9 89 fc ff ff       	jmp    c0001c10 <intr_exit>

c0001f87 <intr0x20entry>:
intr0x20entry():
c0001f87:	6a 00                	push   $0x0
c0001f89:	1e                   	push   %ds
c0001f8a:	06                   	push   %es
c0001f8b:	0f a0                	push   %fs
c0001f8d:	0f a8                	push   %gs
c0001f8f:	60                   	pusha  
c0001f90:	b0 20                	mov    $0x20,%al
c0001f92:	e6 a0                	out    %al,$0xa0
c0001f94:	e6 20                	out    %al,$0x20
c0001f96:	6a 20                	push   $0x20
c0001f98:	ff 15 c0 0e 01 c0    	call   *0xc0010ec0
c0001f9e:	e9 6d fc ff ff       	jmp    c0001c10 <intr_exit>

c0001fa3 <intr0x21entry>:
intr0x21entry():
c0001fa3:	6a 00                	push   $0x0
c0001fa5:	1e                   	push   %ds
c0001fa6:	06                   	push   %es
c0001fa7:	0f a0                	push   %fs
c0001fa9:	0f a8                	push   %gs
c0001fab:	60                   	pusha  
c0001fac:	b0 20                	mov    $0x20,%al
c0001fae:	e6 a0                	out    %al,$0xa0
c0001fb0:	e6 20                	out    %al,$0x20
c0001fb2:	6a 21                	push   $0x21
c0001fb4:	ff 15 c4 0e 01 c0    	call   *0xc0010ec4
c0001fba:	e9 51 fc ff ff       	jmp    c0001c10 <intr_exit>

c0001fbf <intr0x22entry>:
intr0x22entry():
c0001fbf:	6a 00                	push   $0x0
c0001fc1:	1e                   	push   %ds
c0001fc2:	06                   	push   %es
c0001fc3:	0f a0                	push   %fs
c0001fc5:	0f a8                	push   %gs
c0001fc7:	60                   	pusha  
c0001fc8:	b0 20                	mov    $0x20,%al
c0001fca:	e6 a0                	out    %al,$0xa0
c0001fcc:	e6 20                	out    %al,$0x20
c0001fce:	6a 22                	push   $0x22
c0001fd0:	ff 15 c8 0e 01 c0    	call   *0xc0010ec8
c0001fd6:	e9 35 fc ff ff       	jmp    c0001c10 <intr_exit>

c0001fdb <intr0x23entry>:
intr0x23entry():
c0001fdb:	6a 00                	push   $0x0
c0001fdd:	1e                   	push   %ds
c0001fde:	06                   	push   %es
c0001fdf:	0f a0                	push   %fs
c0001fe1:	0f a8                	push   %gs
c0001fe3:	60                   	pusha  
c0001fe4:	b0 20                	mov    $0x20,%al
c0001fe6:	e6 a0                	out    %al,$0xa0
c0001fe8:	e6 20                	out    %al,$0x20
c0001fea:	6a 23                	push   $0x23
c0001fec:	ff 15 cc 0e 01 c0    	call   *0xc0010ecc
c0001ff2:	e9 19 fc ff ff       	jmp    c0001c10 <intr_exit>

c0001ff7 <intr0x24entry>:
intr0x24entry():
c0001ff7:	6a 00                	push   $0x0
c0001ff9:	1e                   	push   %ds
c0001ffa:	06                   	push   %es
c0001ffb:	0f a0                	push   %fs
c0001ffd:	0f a8                	push   %gs
c0001fff:	60                   	pusha  
c0002000:	b0 20                	mov    $0x20,%al
c0002002:	e6 a0                	out    %al,$0xa0
c0002004:	e6 20                	out    %al,$0x20
c0002006:	6a 24                	push   $0x24
c0002008:	ff 15 d0 0e 01 c0    	call   *0xc0010ed0
c000200e:	e9 fd fb ff ff       	jmp    c0001c10 <intr_exit>

c0002013 <intr0x25entry>:
intr0x25entry():
c0002013:	6a 00                	push   $0x0
c0002015:	1e                   	push   %ds
c0002016:	06                   	push   %es
c0002017:	0f a0                	push   %fs
c0002019:	0f a8                	push   %gs
c000201b:	60                   	pusha  
c000201c:	b0 20                	mov    $0x20,%al
c000201e:	e6 a0                	out    %al,$0xa0
c0002020:	e6 20                	out    %al,$0x20
c0002022:	6a 25                	push   $0x25
c0002024:	ff 15 d4 0e 01 c0    	call   *0xc0010ed4
c000202a:	e9 e1 fb ff ff       	jmp    c0001c10 <intr_exit>

c000202f <intr0x26entry>:
intr0x26entry():
c000202f:	6a 00                	push   $0x0
c0002031:	1e                   	push   %ds
c0002032:	06                   	push   %es
c0002033:	0f a0                	push   %fs
c0002035:	0f a8                	push   %gs
c0002037:	60                   	pusha  
c0002038:	b0 20                	mov    $0x20,%al
c000203a:	e6 a0                	out    %al,$0xa0
c000203c:	e6 20                	out    %al,$0x20
c000203e:	6a 26                	push   $0x26
c0002040:	ff 15 d8 0e 01 c0    	call   *0xc0010ed8
c0002046:	e9 c5 fb ff ff       	jmp    c0001c10 <intr_exit>

c000204b <intr0x27entry>:
intr0x27entry():
c000204b:	6a 00                	push   $0x0
c000204d:	1e                   	push   %ds
c000204e:	06                   	push   %es
c000204f:	0f a0                	push   %fs
c0002051:	0f a8                	push   %gs
c0002053:	60                   	pusha  
c0002054:	b0 20                	mov    $0x20,%al
c0002056:	e6 a0                	out    %al,$0xa0
c0002058:	e6 20                	out    %al,$0x20
c000205a:	6a 27                	push   $0x27
c000205c:	ff 15 dc 0e 01 c0    	call   *0xc0010edc
c0002062:	e9 a9 fb ff ff       	jmp    c0001c10 <intr_exit>

c0002067 <intr0x28entry>:
intr0x28entry():
c0002067:	6a 00                	push   $0x0
c0002069:	1e                   	push   %ds
c000206a:	06                   	push   %es
c000206b:	0f a0                	push   %fs
c000206d:	0f a8                	push   %gs
c000206f:	60                   	pusha  
c0002070:	b0 20                	mov    $0x20,%al
c0002072:	e6 a0                	out    %al,$0xa0
c0002074:	e6 20                	out    %al,$0x20
c0002076:	6a 28                	push   $0x28
c0002078:	ff 15 e0 0e 01 c0    	call   *0xc0010ee0
c000207e:	e9 8d fb ff ff       	jmp    c0001c10 <intr_exit>

c0002083 <intr0x29entry>:
intr0x29entry():
c0002083:	6a 00                	push   $0x0
c0002085:	1e                   	push   %ds
c0002086:	06                   	push   %es
c0002087:	0f a0                	push   %fs
c0002089:	0f a8                	push   %gs
c000208b:	60                   	pusha  
c000208c:	b0 20                	mov    $0x20,%al
c000208e:	e6 a0                	out    %al,$0xa0
c0002090:	e6 20                	out    %al,$0x20
c0002092:	6a 29                	push   $0x29
c0002094:	ff 15 e4 0e 01 c0    	call   *0xc0010ee4
c000209a:	e9 71 fb ff ff       	jmp    c0001c10 <intr_exit>

c000209f <intr0x2aentry>:
intr0x2aentry():
c000209f:	6a 00                	push   $0x0
c00020a1:	1e                   	push   %ds
c00020a2:	06                   	push   %es
c00020a3:	0f a0                	push   %fs
c00020a5:	0f a8                	push   %gs
c00020a7:	60                   	pusha  
c00020a8:	b0 20                	mov    $0x20,%al
c00020aa:	e6 a0                	out    %al,$0xa0
c00020ac:	e6 20                	out    %al,$0x20
c00020ae:	6a 2a                	push   $0x2a
c00020b0:	ff 15 e8 0e 01 c0    	call   *0xc0010ee8
c00020b6:	e9 55 fb ff ff       	jmp    c0001c10 <intr_exit>

c00020bb <intr0x2bentry>:
intr0x2bentry():
c00020bb:	6a 00                	push   $0x0
c00020bd:	1e                   	push   %ds
c00020be:	06                   	push   %es
c00020bf:	0f a0                	push   %fs
c00020c1:	0f a8                	push   %gs
c00020c3:	60                   	pusha  
c00020c4:	b0 20                	mov    $0x20,%al
c00020c6:	e6 a0                	out    %al,$0xa0
c00020c8:	e6 20                	out    %al,$0x20
c00020ca:	6a 2b                	push   $0x2b
c00020cc:	ff 15 ec 0e 01 c0    	call   *0xc0010eec
c00020d2:	e9 39 fb ff ff       	jmp    c0001c10 <intr_exit>

c00020d7 <intr0x2centry>:
intr0x2centry():
c00020d7:	6a 00                	push   $0x0
c00020d9:	1e                   	push   %ds
c00020da:	06                   	push   %es
c00020db:	0f a0                	push   %fs
c00020dd:	0f a8                	push   %gs
c00020df:	60                   	pusha  
c00020e0:	b0 20                	mov    $0x20,%al
c00020e2:	e6 a0                	out    %al,$0xa0
c00020e4:	e6 20                	out    %al,$0x20
c00020e6:	6a 2c                	push   $0x2c
c00020e8:	ff 15 f0 0e 01 c0    	call   *0xc0010ef0
c00020ee:	e9 1d fb ff ff       	jmp    c0001c10 <intr_exit>

c00020f3 <intr0x2dentry>:
intr0x2dentry():
c00020f3:	6a 00                	push   $0x0
c00020f5:	1e                   	push   %ds
c00020f6:	06                   	push   %es
c00020f7:	0f a0                	push   %fs
c00020f9:	0f a8                	push   %gs
c00020fb:	60                   	pusha  
c00020fc:	b0 20                	mov    $0x20,%al
c00020fe:	e6 a0                	out    %al,$0xa0
c0002100:	e6 20                	out    %al,$0x20
c0002102:	6a 2d                	push   $0x2d
c0002104:	ff 15 f4 0e 01 c0    	call   *0xc0010ef4
c000210a:	e9 01 fb ff ff       	jmp    c0001c10 <intr_exit>

c000210f <intr0x2eentry>:
intr0x2eentry():
c000210f:	6a 00                	push   $0x0
c0002111:	1e                   	push   %ds
c0002112:	06                   	push   %es
c0002113:	0f a0                	push   %fs
c0002115:	0f a8                	push   %gs
c0002117:	60                   	pusha  
c0002118:	b0 20                	mov    $0x20,%al
c000211a:	e6 a0                	out    %al,$0xa0
c000211c:	e6 20                	out    %al,$0x20
c000211e:	6a 2e                	push   $0x2e
c0002120:	ff 15 f8 0e 01 c0    	call   *0xc0010ef8
c0002126:	e9 e5 fa ff ff       	jmp    c0001c10 <intr_exit>

c000212b <intr0x2fentry>:
intr0x2fentry():
c000212b:	6a 00                	push   $0x0
c000212d:	1e                   	push   %ds
c000212e:	06                   	push   %es
c000212f:	0f a0                	push   %fs
c0002131:	0f a8                	push   %gs
c0002133:	60                   	pusha  
c0002134:	b0 20                	mov    $0x20,%al
c0002136:	e6 a0                	out    %al,$0xa0
c0002138:	e6 20                	out    %al,$0x20
c000213a:	6a 2f                	push   $0x2f
c000213c:	ff 15 fc 0e 01 c0    	call   *0xc0010efc
c0002142:	e9 c9 fa ff ff       	jmp    c0001c10 <intr_exit>

c0002147 <syscall_handler>:
syscall_handler():
c0002147:	6a 00                	push   $0x0
c0002149:	1e                   	push   %ds
c000214a:	06                   	push   %es
c000214b:	0f a0                	push   %fs
c000214d:	0f a8                	push   %gs
c000214f:	60                   	pusha  
c0002150:	68 80 00 00 00       	push   $0x80
c0002155:	52                   	push   %edx
c0002156:	51                   	push   %ecx
c0002157:	53                   	push   %ebx
c0002158:	ff 14 85 60 12 01 c0 	call   *-0x3ffeeda0(,%eax,4)
c000215f:	83 c4 0c             	add    $0xc,%esp
c0002162:	89 44 24 20          	mov    %eax,0x20(%esp)
c0002166:	e9 a5 fa ff ff       	jmp    c0001c10 <intr_exit>
c000216b:	66 90                	xchg   %ax,%ax
c000216d:	66 90                	xchg   %ax,%ax
c000216f:	90                   	nop

c0002170 <put_str>:
put_str():
c0002170:	53                   	push   %ebx
c0002171:	51                   	push   %ecx
c0002172:	31 c9                	xor    %ecx,%ecx
c0002174:	8b 5c 24 0c          	mov    0xc(%esp),%ebx

c0002178 <put_str.goon>:
put_str.goon():
c0002178:	8a 0b                	mov    (%ebx),%cl
c000217a:	80 f9 00             	cmp    $0x0,%cl
c000217d:	74 0c                	je     c000218b <put_str.str_over>
c000217f:	51                   	push   %ecx
c0002180:	e8 09 00 00 00       	call   c000218e <put_char>
c0002185:	83 c4 04             	add    $0x4,%esp
c0002188:	43                   	inc    %ebx
c0002189:	eb ed                	jmp    c0002178 <put_str.goon>

c000218b <put_str.str_over>:
put_str.str_over():
c000218b:	59                   	pop    %ecx
c000218c:	5b                   	pop    %ebx
c000218d:	c3                   	ret    

c000218e <put_char>:
put_char():
c000218e:	60                   	pusha  
c000218f:	66 b8 18 00          	mov    $0x18,%ax
c0002193:	8e e8                	mov    %eax,%gs
c0002195:	66 ba d4 03          	mov    $0x3d4,%dx
c0002199:	b0 0e                	mov    $0xe,%al
c000219b:	ee                   	out    %al,(%dx)
c000219c:	66 ba d5 03          	mov    $0x3d5,%dx
c00021a0:	ec                   	in     (%dx),%al
c00021a1:	88 c4                	mov    %al,%ah
c00021a3:	66 ba d4 03          	mov    $0x3d4,%dx
c00021a7:	b0 0f                	mov    $0xf,%al
c00021a9:	ee                   	out    %al,(%dx)
c00021aa:	66 ba d5 03          	mov    $0x3d5,%dx
c00021ae:	ec                   	in     (%dx),%al
c00021af:	66 89 c3             	mov    %ax,%bx
c00021b2:	8b 4c 24 24          	mov    0x24(%esp),%ecx
c00021b6:	80 f9 0d             	cmp    $0xd,%cl
c00021b9:	74 3c                	je     c00021f7 <put_char.is_carriage_return>
c00021bb:	80 f9 0a             	cmp    $0xa,%cl
c00021be:	74 37                	je     c00021f7 <put_char.is_carriage_return>
c00021c0:	80 f9 08             	cmp    $0x8,%cl
c00021c3:	74 02                	je     c00021c7 <put_char.is_backspace>
c00021c5:	eb 16                	jmp    c00021dd <put_char.put_other>

c00021c7 <put_char.is_backspace>:
put_char.is_backspace():
c00021c7:	66 4b                	dec    %bx
c00021c9:	66 d1 e3             	shl    %bx
c00021cc:	65 67 c6 07 20       	movb   $0x20,%gs:(%bx)
c00021d1:	66 43                	inc    %bx
c00021d3:	65 67 c6 07 07       	movb   $0x7,%gs:(%bx)
c00021d8:	66 d1 eb             	shr    %bx
c00021db:	eb 60                	jmp    c000223d <put_char.set_cursor>

c00021dd <put_char.put_other>:
put_char.put_other():
c00021dd:	66 d1 e3             	shl    %bx
c00021e0:	65 67 88 0f          	mov    %cl,%gs:(%bx)
c00021e4:	66 43                	inc    %bx
c00021e6:	65 67 c6 07 07       	movb   $0x7,%gs:(%bx)
c00021eb:	66 d1 eb             	shr    %bx
c00021ee:	66 43                	inc    %bx
c00021f0:	66 81 fb d0 07       	cmp    $0x7d0,%bx
c00021f5:	7c 46                	jl     c000223d <put_char.set_cursor>

c00021f7 <put_char.is_carriage_return>:
put_char.is_line_feed():
c00021f7:	66 31 d2             	xor    %dx,%dx
c00021fa:	66 89 d8             	mov    %bx,%ax
c00021fd:	66 be 50 00          	mov    $0x50,%si
c0002201:	66 f7 f6             	div    %si
c0002204:	66 29 d3             	sub    %dx,%bx

c0002207 <put_char.is_carriage_return_end>:
put_char.is_carriage_return_end():
c0002207:	66 83 c3 50          	add    $0x50,%bx
c000220b:	66 81 fb d0 07       	cmp    $0x7d0,%bx

c0002210 <put_char.is_line_feed_end>:
put_char.is_line_feed_end():
c0002210:	7c 2b                	jl     c000223d <put_char.set_cursor>

c0002212 <put_char.roll_screen>:
put_char.roll_screen():
c0002212:	fc                   	cld    
c0002213:	b9 c0 03 00 00       	mov    $0x3c0,%ecx
c0002218:	be a0 80 0b c0       	mov    $0xc00b80a0,%esi
c000221d:	bf 00 80 0b c0       	mov    $0xc00b8000,%edi
c0002222:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c0002224:	bb 00 0f 00 00       	mov    $0xf00,%ebx
c0002229:	b9 50 00 00 00       	mov    $0x50,%ecx

c000222e <put_char.cls>:
put_char.cls():
c000222e:	65 66 c7 03 20 07    	movw   $0x720,%gs:(%ebx)
c0002234:	83 c3 02             	add    $0x2,%ebx
c0002237:	e2 f5                	loop   c000222e <put_char.cls>
c0002239:	66 bb 80 07          	mov    $0x780,%bx

c000223d <put_char.set_cursor>:
put_char.set_cursor():
c000223d:	66 ba d4 03          	mov    $0x3d4,%dx
c0002241:	b0 0e                	mov    $0xe,%al
c0002243:	ee                   	out    %al,(%dx)
c0002244:	66 ba d5 03          	mov    $0x3d5,%dx
c0002248:	88 f8                	mov    %bh,%al
c000224a:	ee                   	out    %al,(%dx)
c000224b:	66 ba d4 03          	mov    $0x3d4,%dx
c000224f:	b0 0f                	mov    $0xf,%al
c0002251:	ee                   	out    %al,(%dx)
c0002252:	66 ba d5 03          	mov    $0x3d5,%dx
c0002256:	88 d8                	mov    %bl,%al
c0002258:	ee                   	out    %al,(%dx)

c0002259 <put_char.put_char_done>:
put_char.put_char_done():
c0002259:	61                   	popa   
c000225a:	c3                   	ret    

c000225b <cls_screen>:
cls_screen():
c000225b:	60                   	pusha  
c000225c:	66 b8 18 00          	mov    $0x18,%ax
c0002260:	8e e8                	mov    %eax,%gs
c0002262:	bb 00 00 00 00       	mov    $0x0,%ebx
c0002267:	b9 d0 07 00 00       	mov    $0x7d0,%ecx

c000226c <cls_screen.cls>:
cls_screen.cls():
c000226c:	65 66 c7 03 20 07    	movw   $0x720,%gs:(%ebx)
c0002272:	83 c3 02             	add    $0x2,%ebx
c0002275:	e2 f5                	loop   c000226c <cls_screen.cls>
c0002277:	bb 00 00 00 00       	mov    $0x0,%ebx

c000227c <cls_screen.set_cursor>:
cls_screen.set_cursor():
c000227c:	66 ba d4 03          	mov    $0x3d4,%dx
c0002280:	b0 0e                	mov    $0xe,%al
c0002282:	ee                   	out    %al,(%dx)
c0002283:	66 ba d5 03          	mov    $0x3d5,%dx
c0002287:	88 f8                	mov    %bh,%al
c0002289:	ee                   	out    %al,(%dx)
c000228a:	66 ba d4 03          	mov    $0x3d4,%dx
c000228e:	b0 0f                	mov    $0xf,%al
c0002290:	ee                   	out    %al,(%dx)
c0002291:	66 ba d5 03          	mov    $0x3d5,%dx
c0002295:	88 d8                	mov    %bl,%al
c0002297:	ee                   	out    %al,(%dx)
c0002298:	61                   	popa   
c0002299:	c3                   	ret    

c000229a <put_int>:
put_int():
c000229a:	60                   	pusha  
c000229b:	89 e5                	mov    %esp,%ebp
c000229d:	8b 45 24             	mov    0x24(%ebp),%eax
c00022a0:	89 c2                	mov    %eax,%edx
c00022a2:	bf 07 00 00 00       	mov    $0x7,%edi
c00022a7:	b9 08 00 00 00       	mov    $0x8,%ecx
c00022ac:	bb c0 00 01 c0       	mov    $0xc00100c0,%ebx

c00022b1 <put_int.16based_4bits>:
put_int.16based_4bits():
c00022b1:	83 e2 0f             	and    $0xf,%edx
c00022b4:	83 fa 09             	cmp    $0x9,%edx
c00022b7:	7f 05                	jg     c00022be <put_int.is_A2F>
c00022b9:	83 c2 30             	add    $0x30,%edx
c00022bc:	eb 06                	jmp    c00022c4 <put_int.store>

c00022be <put_int.is_A2F>:
put_int.is_A2F():
c00022be:	83 ea 0a             	sub    $0xa,%edx
c00022c1:	83 c2 41             	add    $0x41,%edx

c00022c4 <put_int.store>:
put_int.store():
c00022c4:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
c00022c7:	4f                   	dec    %edi
c00022c8:	c1 e8 04             	shr    $0x4,%eax
c00022cb:	89 c2                	mov    %eax,%edx
c00022cd:	e2 e2                	loop   c00022b1 <put_int.16based_4bits>

c00022cf <put_int.ready_to_print>:
put_int.ready_to_print():
c00022cf:	47                   	inc    %edi

c00022d0 <put_int.skip_prefix_0>:
put_int.skip_prefix_0():
c00022d0:	83 ff 08             	cmp    $0x8,%edi
c00022d3:	74 0f                	je     c00022e4 <put_int.full0>

c00022d5 <put_int.go_on_skip>:
put_int.go_on_skip():
c00022d5:	8a 8f c0 00 01 c0    	mov    -0x3ffeff40(%edi),%cl
c00022db:	47                   	inc    %edi
c00022dc:	80 f9 30             	cmp    $0x30,%cl
c00022df:	74 ef                	je     c00022d0 <put_int.skip_prefix_0>
c00022e1:	4f                   	dec    %edi
c00022e2:	eb 02                	jmp    c00022e6 <put_int.put_each_num>

c00022e4 <put_int.full0>:
put_int.full0():
c00022e4:	b1 30                	mov    $0x30,%cl

c00022e6 <put_int.put_each_num>:
put_int.put_each_num():
c00022e6:	51                   	push   %ecx
c00022e7:	e8 a2 fe ff ff       	call   c000218e <put_char>
c00022ec:	83 c4 04             	add    $0x4,%esp
c00022ef:	47                   	inc    %edi
c00022f0:	8a 8f c0 00 01 c0    	mov    -0x3ffeff40(%edi),%cl
c00022f6:	83 ff 08             	cmp    $0x8,%edi
c00022f9:	7c eb                	jl     c00022e6 <put_int.put_each_num>
c00022fb:	61                   	popa   
c00022fc:	c3                   	ret    

c00022fd <set_cursor>:
set_cursor():
c00022fd:	60                   	pusha  
c00022fe:	66 8b 5c 24 24       	mov    0x24(%esp),%bx
c0002303:	66 ba d4 03          	mov    $0x3d4,%dx
c0002307:	b0 0e                	mov    $0xe,%al
c0002309:	ee                   	out    %al,(%dx)
c000230a:	66 ba d5 03          	mov    $0x3d5,%dx
c000230e:	88 f8                	mov    %bh,%al
c0002310:	ee                   	out    %al,(%dx)
c0002311:	66 ba d4 03          	mov    $0x3d4,%dx
c0002315:	b0 0f                	mov    $0xf,%al
c0002317:	ee                   	out    %al,(%dx)
c0002318:	66 ba d5 03          	mov    $0x3d5,%dx
c000231c:	88 d8                	mov    %bl,%al
c000231e:	ee                   	out    %al,(%dx)
c000231f:	61                   	popa   
c0002320:	c3                   	ret    

c0002321 <panic_spin>:
panic_spin():
/work/x86_os_my/kernel/debug.c:10
/* 打印文件名,行号,函数名,条件并使程序悬停 */
void panic_spin(char* filename,	       \
	        int line,	       \
		const char* func,      \
		const char* condition) \
{
c0002321:	55                   	push   %ebp
c0002322:	89 e5                	mov    %esp,%ebp
c0002324:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/kernel/debug.c:11
   intr_disable();	// 因为有时候会单独调用panic_spin,所以在此处关中断。
c0002327:	e8 14 f6 ff ff       	call   c0001940 <intr_disable>
/work/x86_os_my/kernel/debug.c:12
   put_str("\n\n\n!!!!! error !!!!!\n");
c000232c:	83 ec 0c             	sub    $0xc,%esp
c000232f:	68 24 c0 00 c0       	push   $0xc000c024
c0002334:	e8 37 fe ff ff       	call   c0002170 <put_str>
c0002339:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/debug.c:13
   put_str("filename:");put_str(filename);put_str("\n");
c000233c:	83 ec 0c             	sub    $0xc,%esp
c000233f:	68 3a c0 00 c0       	push   $0xc000c03a
c0002344:	e8 27 fe ff ff       	call   c0002170 <put_str>
c0002349:	83 c4 10             	add    $0x10,%esp
c000234c:	83 ec 0c             	sub    $0xc,%esp
c000234f:	ff 75 08             	pushl  0x8(%ebp)
c0002352:	e8 19 fe ff ff       	call   c0002170 <put_str>
c0002357:	83 c4 10             	add    $0x10,%esp
c000235a:	83 ec 0c             	sub    $0xc,%esp
c000235d:	68 44 c0 00 c0       	push   $0xc000c044
c0002362:	e8 09 fe ff ff       	call   c0002170 <put_str>
c0002367:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/debug.c:14
   put_str("line:0x");put_int(line);put_str("\n");
c000236a:	83 ec 0c             	sub    $0xc,%esp
c000236d:	68 46 c0 00 c0       	push   $0xc000c046
c0002372:	e8 f9 fd ff ff       	call   c0002170 <put_str>
c0002377:	83 c4 10             	add    $0x10,%esp
c000237a:	8b 45 0c             	mov    0xc(%ebp),%eax
c000237d:	83 ec 0c             	sub    $0xc,%esp
c0002380:	50                   	push   %eax
c0002381:	e8 14 ff ff ff       	call   c000229a <put_int>
c0002386:	83 c4 10             	add    $0x10,%esp
c0002389:	83 ec 0c             	sub    $0xc,%esp
c000238c:	68 44 c0 00 c0       	push   $0xc000c044
c0002391:	e8 da fd ff ff       	call   c0002170 <put_str>
c0002396:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/debug.c:15
   put_str("function:");put_str((char*)func);put_str("\n");
c0002399:	83 ec 0c             	sub    $0xc,%esp
c000239c:	68 4e c0 00 c0       	push   $0xc000c04e
c00023a1:	e8 ca fd ff ff       	call   c0002170 <put_str>
c00023a6:	83 c4 10             	add    $0x10,%esp
c00023a9:	83 ec 0c             	sub    $0xc,%esp
c00023ac:	ff 75 10             	pushl  0x10(%ebp)
c00023af:	e8 bc fd ff ff       	call   c0002170 <put_str>
c00023b4:	83 c4 10             	add    $0x10,%esp
c00023b7:	83 ec 0c             	sub    $0xc,%esp
c00023ba:	68 44 c0 00 c0       	push   $0xc000c044
c00023bf:	e8 ac fd ff ff       	call   c0002170 <put_str>
c00023c4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/debug.c:16
   put_str("condition:");put_str((char*)condition);put_str("\n");
c00023c7:	83 ec 0c             	sub    $0xc,%esp
c00023ca:	68 58 c0 00 c0       	push   $0xc000c058
c00023cf:	e8 9c fd ff ff       	call   c0002170 <put_str>
c00023d4:	83 c4 10             	add    $0x10,%esp
c00023d7:	83 ec 0c             	sub    $0xc,%esp
c00023da:	ff 75 14             	pushl  0x14(%ebp)
c00023dd:	e8 8e fd ff ff       	call   c0002170 <put_str>
c00023e2:	83 c4 10             	add    $0x10,%esp
c00023e5:	83 ec 0c             	sub    $0xc,%esp
c00023e8:	68 44 c0 00 c0       	push   $0xc000c044
c00023ed:	e8 7e fd ff ff       	call   c0002170 <put_str>
c00023f2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/debug.c:17 (discriminator 1)
   while(1);
c00023f5:	eb fe                	jmp    c00023f5 <panic_spin+0xd4>

c00023f7 <bitmap_init>:
bitmap_init():
/work/x86_os_my/lib/kernel/bitmap.c:16
	uint8_t* bits;				位图空间
};
*/

/* 将位图btmp初始化 */
void bitmap_init(struct bitmap* btmp) {
c00023f7:	55                   	push   %ebp
c00023f8:	89 e5                	mov    %esp,%ebp
c00023fa:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/lib/kernel/bitmap.c:17
	memset(btmp->bits, 0, btmp->btmp_bytes_len);   
c00023fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0002400:	8b 10                	mov    (%eax),%edx
c0002402:	8b 45 08             	mov    0x8(%ebp),%eax
c0002405:	8b 40 04             	mov    0x4(%eax),%eax
c0002408:	83 ec 04             	sub    $0x4,%esp
c000240b:	52                   	push   %edx
c000240c:	6a 00                	push   $0x0
c000240e:	50                   	push   %eax
c000240f:	e8 af 13 00 00       	call   c00037c3 <memset>
c0002414:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/bitmap.c:18
}
c0002417:	90                   	nop
c0002418:	c9                   	leave  
c0002419:	c3                   	ret    

c000241a <bitmap_scan_test>:
bitmap_scan_test():
/work/x86_os_my/lib/kernel/bitmap.c:23

/* 判断bit_idx位是否为1
若为1则返回true
否则返回false */
bool bitmap_scan_test(struct bitmap* btmp, uint32_t bit_idx) {
c000241a:	55                   	push   %ebp
c000241b:	89 e5                	mov    %esp,%ebp
c000241d:	53                   	push   %ebx
c000241e:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/kernel/bitmap.c:24
	uint32_t byte_idx = bit_idx / 8;    // 向下取整用于索引数组下标
c0002421:	8b 45 0c             	mov    0xc(%ebp),%eax
c0002424:	c1 e8 03             	shr    $0x3,%eax
c0002427:	89 45 f8             	mov    %eax,-0x8(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:25
	uint32_t bit_odd  = bit_idx % 8;    // 取余用于索引数组内的位
c000242a:	8b 45 0c             	mov    0xc(%ebp),%eax
c000242d:	83 e0 07             	and    $0x7,%eax
c0002430:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:26
	return (btmp->bits[byte_idx] & (BITMAP_MASK << bit_odd));
c0002433:	8b 45 08             	mov    0x8(%ebp),%eax
c0002436:	8b 50 04             	mov    0x4(%eax),%edx
c0002439:	8b 45 f8             	mov    -0x8(%ebp),%eax
c000243c:	01 d0                	add    %edx,%eax
c000243e:	0f b6 00             	movzbl (%eax),%eax
c0002441:	0f b6 d0             	movzbl %al,%edx
c0002444:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002447:	bb 01 00 00 00       	mov    $0x1,%ebx
c000244c:	89 c1                	mov    %eax,%ecx
c000244e:	d3 e3                	shl    %cl,%ebx
c0002450:	89 d8                	mov    %ebx,%eax
c0002452:	21 d0                	and    %edx,%eax
/work/x86_os_my/lib/kernel/bitmap.c:27
}
c0002454:	83 c4 10             	add    $0x10,%esp
c0002457:	5b                   	pop    %ebx
c0002458:	5d                   	pop    %ebp
c0002459:	c3                   	ret    

c000245a <bitmap_scan>:
bitmap_scan():
/work/x86_os_my/lib/kernel/bitmap.c:32

/* 在位图中申请连续cnt个位
成功：返回其起始位下标
失败：返回-1 */
int bitmap_scan(struct bitmap* btmp, uint32_t cnt) {
c000245a:	55                   	push   %ebp
c000245b:	89 e5                	mov    %esp,%ebp
c000245d:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/lib/kernel/bitmap.c:33
	uint32_t idx_byte = 0;	 // 用于记录空闲位所在的字节
c0002460:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:35
	/* 先逐字节比较,蛮力法 */
	while (( 0xff == btmp->bits[idx_byte]) && (idx_byte < btmp->btmp_bytes_len)) {
c0002467:	eb 04                	jmp    c000246d <bitmap_scan+0x13>
/work/x86_os_my/lib/kernel/bitmap.c:37
		/* 1表示该位已分配,所以若为0xff,则表示该字节内已无空闲位,向下一字节继续找 */
		idx_byte++;
c0002469:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:35
成功：返回其起始位下标
失败：返回-1 */
int bitmap_scan(struct bitmap* btmp, uint32_t cnt) {
	uint32_t idx_byte = 0;	 // 用于记录空闲位所在的字节
	/* 先逐字节比较,蛮力法 */
	while (( 0xff == btmp->bits[idx_byte]) && (idx_byte < btmp->btmp_bytes_len)) {
c000246d:	8b 45 08             	mov    0x8(%ebp),%eax
c0002470:	8b 50 04             	mov    0x4(%eax),%edx
c0002473:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002476:	01 d0                	add    %edx,%eax
c0002478:	0f b6 00             	movzbl (%eax),%eax
c000247b:	3c ff                	cmp    $0xff,%al
c000247d:	75 0a                	jne    c0002489 <bitmap_scan+0x2f>
/work/x86_os_my/lib/kernel/bitmap.c:35 (discriminator 1)
c000247f:	8b 45 08             	mov    0x8(%ebp),%eax
c0002482:	8b 00                	mov    (%eax),%eax
c0002484:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0002487:	77 e0                	ja     c0002469 <bitmap_scan+0xf>
/work/x86_os_my/lib/kernel/bitmap.c:39
		/* 1表示该位已分配,所以若为0xff,则表示该字节内已无空闲位,向下一字节继续找 */
		idx_byte++;
	}
	ASSERT(idx_byte < btmp->btmp_bytes_len);	//这里应该是"<="
c0002489:	8b 45 08             	mov    0x8(%ebp),%eax
c000248c:	8b 00                	mov    (%eax),%eax
c000248e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0002491:	77 19                	ja     c00024ac <bitmap_scan+0x52>
/work/x86_os_my/lib/kernel/bitmap.c:39 (discriminator 1)
c0002493:	68 64 c0 00 c0       	push   $0xc000c064
c0002498:	68 b8 c0 00 c0       	push   $0xc000c0b8
c000249d:	6a 27                	push   $0x27
c000249f:	68 84 c0 00 c0       	push   $0xc000c084
c00024a4:	e8 78 fe ff ff       	call   c0002321 <panic_spin>
c00024a9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/bitmap.c:40
	if (idx_byte == btmp->btmp_bytes_len) {		// 若该内存池找不到可用空间		
c00024ac:	8b 45 08             	mov    0x8(%ebp),%eax
c00024af:	8b 00                	mov    (%eax),%eax
c00024b1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c00024b4:	75 0a                	jne    c00024c0 <bitmap_scan+0x66>
/work/x86_os_my/lib/kernel/bitmap.c:41
		return -1;
c00024b6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00024bb:	e9 cd 00 00 00       	jmp    c000258d <bitmap_scan+0x133>
/work/x86_os_my/lib/kernel/bitmap.c:46
	}

	/* 若在位图数组范围内的某字节内找到了空闲位，
	 * 在该字节内逐位比对,返回空闲位的索引。*/
	int idx_bit = 0;
c00024c0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:48
	/* 和btmp->bits[idx_byte]这个字节逐位对比 */
	while ((uint8_t)(BITMAP_MASK << idx_bit) & btmp->bits[idx_byte]) { 
c00024c7:	eb 04                	jmp    c00024cd <bitmap_scan+0x73>
/work/x86_os_my/lib/kernel/bitmap.c:49
		idx_bit++;
c00024c9:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:48

	/* 若在位图数组范围内的某字节内找到了空闲位，
	 * 在该字节内逐位比对,返回空闲位的索引。*/
	int idx_bit = 0;
	/* 和btmp->bits[idx_byte]这个字节逐位对比 */
	while ((uint8_t)(BITMAP_MASK << idx_bit) & btmp->bits[idx_byte]) { 
c00024cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00024d0:	ba 01 00 00 00       	mov    $0x1,%edx
c00024d5:	89 c1                	mov    %eax,%ecx
c00024d7:	d3 e2                	shl    %cl,%edx
c00024d9:	89 d0                	mov    %edx,%eax
c00024db:	0f b6 d0             	movzbl %al,%edx
c00024de:	8b 45 08             	mov    0x8(%ebp),%eax
c00024e1:	8b 48 04             	mov    0x4(%eax),%ecx
c00024e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00024e7:	01 c8                	add    %ecx,%eax
c00024e9:	0f b6 00             	movzbl (%eax),%eax
c00024ec:	0f b6 c0             	movzbl %al,%eax
c00024ef:	21 d0                	and    %edx,%eax
c00024f1:	85 c0                	test   %eax,%eax
c00024f3:	75 d4                	jne    c00024c9 <bitmap_scan+0x6f>
/work/x86_os_my/lib/kernel/bitmap.c:52
		idx_bit++;
	}
	
	int bit_idx_start = idx_byte * 8 + idx_bit;		// 空闲位在位图内的下标
c00024f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00024f8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c00024ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002502:	01 d0                	add    %edx,%eax
c0002504:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:53
	if (cnt == 1) {
c0002507:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c000250b:	75 05                	jne    c0002512 <bitmap_scan+0xb8>
/work/x86_os_my/lib/kernel/bitmap.c:54
		return bit_idx_start;
c000250d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002510:	eb 7b                	jmp    c000258d <bitmap_scan+0x133>
/work/x86_os_my/lib/kernel/bitmap.c:57
	}

	uint32_t bit_left = (btmp->btmp_bytes_len * 8 - bit_idx_start);	// 记录还有多少位可以判断
c0002512:	8b 45 08             	mov    0x8(%ebp),%eax
c0002515:	8b 00                	mov    (%eax),%eax
c0002517:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c000251e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002521:	29 c2                	sub    %eax,%edx
c0002523:	89 d0                	mov    %edx,%eax
c0002525:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:58
	uint32_t next_bit = bit_idx_start + 1;
c0002528:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000252b:	83 c0 01             	add    $0x1,%eax
c000252e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:59
	uint32_t count = 1;			// 用于记录找到的空闲位的个数
c0002531:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:61

	bit_idx_start = -1;			// 初始化为-1，若找不到连续的位就直接返回-1
c0002538:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:62
	while (bit_left-- > 0) {
c000253f:	eb 3c                	jmp    c000257d <bitmap_scan+0x123>
/work/x86_os_my/lib/kernel/bitmap.c:63
		if (!(bitmap_scan_test(btmp, next_bit))) {	// 判断next_bit位是否为1,=1返回true，=0返回false
c0002541:	83 ec 08             	sub    $0x8,%esp
c0002544:	ff 75 e4             	pushl  -0x1c(%ebp)
c0002547:	ff 75 08             	pushl  0x8(%ebp)
c000254a:	e8 cb fe ff ff       	call   c000241a <bitmap_scan_test>
c000254f:	83 c4 10             	add    $0x10,%esp
c0002552:	85 c0                	test   %eax,%eax
c0002554:	75 06                	jne    c000255c <bitmap_scan+0x102>
/work/x86_os_my/lib/kernel/bitmap.c:64
			count++;
c0002556:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
c000255a:	eb 07                	jmp    c0002563 <bitmap_scan+0x109>
/work/x86_os_my/lib/kernel/bitmap.c:66
		} else {
			count = 0;			// 重新从0找cnt个连续的bit
c000255c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:69
		}
		
		if (count == cnt) {		// 已找到连续的cnt个空位
c0002563:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0002566:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0002569:	75 0e                	jne    c0002579 <bitmap_scan+0x11f>
/work/x86_os_my/lib/kernel/bitmap.c:70
			bit_idx_start = next_bit - cnt + 1;
c000256b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000256e:	2b 45 0c             	sub    0xc(%ebp),%eax
c0002571:	83 c0 01             	add    $0x1,%eax
c0002574:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:71
			break;
c0002577:	eb 11                	jmp    c000258a <bitmap_scan+0x130>
/work/x86_os_my/lib/kernel/bitmap.c:73
		}
		next_bit++;
c0002579:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:62
	uint32_t bit_left = (btmp->btmp_bytes_len * 8 - bit_idx_start);	// 记录还有多少位可以判断
	uint32_t next_bit = bit_idx_start + 1;
	uint32_t count = 1;			// 用于记录找到的空闲位的个数

	bit_idx_start = -1;			// 初始化为-1，若找不到连续的位就直接返回-1
	while (bit_left-- > 0) {
c000257d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002580:	8d 50 ff             	lea    -0x1(%eax),%edx
c0002583:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0002586:	85 c0                	test   %eax,%eax
c0002588:	75 b7                	jne    c0002541 <bitmap_scan+0xe7>
/work/x86_os_my/lib/kernel/bitmap.c:75
			bit_idx_start = next_bit - cnt + 1;
			break;
		}
		next_bit++;
	}
	return bit_idx_start;
c000258a:	8b 45 ec             	mov    -0x14(%ebp),%eax
/work/x86_os_my/lib/kernel/bitmap.c:76
}
c000258d:	c9                   	leave  
c000258e:	c3                   	ret    

c000258f <bitmap_set>:
bitmap_set():
/work/x86_os_my/lib/kernel/bitmap.c:79

/* 将位图btmp的bit_idx位设置为value */
void bitmap_set(struct bitmap* btmp, uint32_t bit_idx, int8_t value) {
c000258f:	55                   	push   %ebp
c0002590:	89 e5                	mov    %esp,%ebp
c0002592:	56                   	push   %esi
c0002593:	53                   	push   %ebx
c0002594:	83 ec 20             	sub    $0x20,%esp
c0002597:	8b 45 10             	mov    0x10(%ebp),%eax
c000259a:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:80
	ASSERT((value == 0) || (value == 1));
c000259d:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c00025a1:	74 1f                	je     c00025c2 <bitmap_set+0x33>
/work/x86_os_my/lib/kernel/bitmap.c:80 (discriminator 1)
c00025a3:	80 7d e4 01          	cmpb   $0x1,-0x1c(%ebp)
c00025a7:	74 19                	je     c00025c2 <bitmap_set+0x33>
/work/x86_os_my/lib/kernel/bitmap.c:80 (discriminator 2)
c00025a9:	68 98 c0 00 c0       	push   $0xc000c098
c00025ae:	68 c4 c0 00 c0       	push   $0xc000c0c4
c00025b3:	6a 50                	push   $0x50
c00025b5:	68 84 c0 00 c0       	push   $0xc000c084
c00025ba:	e8 62 fd ff ff       	call   c0002321 <panic_spin>
c00025bf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/bitmap.c:81
	uint32_t byte_idx = bit_idx / 8;    // 向下取整用于索引数组下标
c00025c2:	8b 45 0c             	mov    0xc(%ebp),%eax
c00025c5:	c1 e8 03             	shr    $0x3,%eax
c00025c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:82
	uint32_t bit_odd  = bit_idx % 8;    // 取余用于索引数组内的位
c00025cb:	8b 45 0c             	mov    0xc(%ebp),%eax
c00025ce:	83 e0 07             	and    $0x7,%eax
c00025d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:86

	/* 一般都会用个0x1这样的数对字节中的位操作,
	* 将1任意移动后再取反,或者先取反再移位,可用来对位置0操作。*/
	if (value) {
c00025d4:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c00025d8:	74 2f                	je     c0002609 <bitmap_set+0x7a>
/work/x86_os_my/lib/kernel/bitmap.c:87
		btmp->bits[byte_idx] |= (BITMAP_MASK << bit_odd);
c00025da:	8b 45 08             	mov    0x8(%ebp),%eax
c00025dd:	8b 50 04             	mov    0x4(%eax),%edx
c00025e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00025e3:	01 c2                	add    %eax,%edx
c00025e5:	8b 45 08             	mov    0x8(%ebp),%eax
c00025e8:	8b 48 04             	mov    0x4(%eax),%ecx
c00025eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00025ee:	01 c8                	add    %ecx,%eax
c00025f0:	0f b6 00             	movzbl (%eax),%eax
c00025f3:	89 c6                	mov    %eax,%esi
c00025f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00025f8:	bb 01 00 00 00       	mov    $0x1,%ebx
c00025fd:	89 c1                	mov    %eax,%ecx
c00025ff:	d3 e3                	shl    %cl,%ebx
c0002601:	89 d8                	mov    %ebx,%eax
c0002603:	09 f0                	or     %esi,%eax
c0002605:	88 02                	mov    %al,(%edx)
/work/x86_os_my/lib/kernel/bitmap.c:91
	} else {
		btmp->bits[byte_idx] &= ~(BITMAP_MASK << bit_odd);
	}
}
c0002607:	eb 2f                	jmp    c0002638 <bitmap_set+0xa9>
/work/x86_os_my/lib/kernel/bitmap.c:89
	/* 一般都会用个0x1这样的数对字节中的位操作,
	* 将1任意移动后再取反,或者先取反再移位,可用来对位置0操作。*/
	if (value) {
		btmp->bits[byte_idx] |= (BITMAP_MASK << bit_odd);
	} else {
		btmp->bits[byte_idx] &= ~(BITMAP_MASK << bit_odd);
c0002609:	8b 45 08             	mov    0x8(%ebp),%eax
c000260c:	8b 50 04             	mov    0x4(%eax),%edx
c000260f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002612:	01 c2                	add    %eax,%edx
c0002614:	8b 45 08             	mov    0x8(%ebp),%eax
c0002617:	8b 48 04             	mov    0x4(%eax),%ecx
c000261a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000261d:	01 c8                	add    %ecx,%eax
c000261f:	0f b6 00             	movzbl (%eax),%eax
c0002622:	89 c3                	mov    %eax,%ebx
c0002624:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002627:	be 01 00 00 00       	mov    $0x1,%esi
c000262c:	89 c1                	mov    %eax,%ecx
c000262e:	d3 e6                	shl    %cl,%esi
c0002630:	89 f0                	mov    %esi,%eax
c0002632:	f7 d0                	not    %eax
c0002634:	21 d8                	and    %ebx,%eax
c0002636:	88 02                	mov    %al,(%edx)
/work/x86_os_my/lib/kernel/bitmap.c:91
	}
}
c0002638:	90                   	nop
c0002639:	8d 65 f8             	lea    -0x8(%ebp),%esp
c000263c:	5b                   	pop    %ebx
c000263d:	5e                   	pop    %esi
c000263e:	5d                   	pop    %ebp
c000263f:	c3                   	ret    

c0002640 <vaddr_get>:
vaddr_get():
/work/x86_os_my/kernel/memory.c:66
struct pool kernel_pool, user_pool;		// 生成内核内存池和用户内存池
struct virtual_addr kernel_vaddr;		// 此结构是用来给内核分配虚拟地址

/* 在pf表示的虚拟内存池中申请pg_cnt个虚拟页,
 * 成功则返回虚拟页的起始地址, 失败则返回NULL */
static void* vaddr_get(enum pool_flags pf, uint32_t pg_cnt) {
c0002640:	55                   	push   %ebp
c0002641:	89 e5                	mov    %esp,%ebp
c0002643:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:67
	int vaddr_start = 0, bit_idx_start = -1;
c0002646:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c000264d:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:68
	uint32_t cnt = 0;
c0002654:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:69
	if (pf == PF_KERNEL) {
c000265b:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c000265f:	75 64                	jne    c00026c5 <vaddr_get+0x85>
/work/x86_os_my/kernel/memory.c:71
		// 在位图中申请连续cnt个位 成功：返回其起始位下标
		bit_idx_start  = bitmap_scan(&kernel_vaddr.vaddr_bitmap, pg_cnt);
c0002661:	83 ec 08             	sub    $0x8,%esp
c0002664:	ff 75 0c             	pushl  0xc(%ebp)
c0002667:	68 48 11 01 c0       	push   $0xc0011148
c000266c:	e8 e9 fd ff ff       	call   c000245a <bitmap_scan>
c0002671:	83 c4 10             	add    $0x10,%esp
c0002674:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:72
		if (bit_idx_start == -1) {	//失败
c0002677:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%ebp)
c000267b:	75 2b                	jne    c00026a8 <vaddr_get+0x68>
/work/x86_os_my/kernel/memory.c:73
			return NULL;
c000267d:	b8 00 00 00 00       	mov    $0x0,%eax
c0002682:	e9 cd 00 00 00       	jmp    c0002754 <vaddr_get+0x114>
/work/x86_os_my/kernel/memory.c:77
		}
		while(cnt < pg_cnt) {
			// 设置位图中的位，表示内存已被占用
			bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 1);
c0002687:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000268a:	8d 50 01             	lea    0x1(%eax),%edx
c000268d:	89 55 f0             	mov    %edx,-0x10(%ebp)
c0002690:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0002693:	01 d0                	add    %edx,%eax
c0002695:	83 ec 04             	sub    $0x4,%esp
c0002698:	6a 01                	push   $0x1
c000269a:	50                   	push   %eax
c000269b:	68 48 11 01 c0       	push   $0xc0011148
c00026a0:	e8 ea fe ff ff       	call   c000258f <bitmap_set>
c00026a5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:75
		// 在位图中申请连续cnt个位 成功：返回其起始位下标
		bit_idx_start  = bitmap_scan(&kernel_vaddr.vaddr_bitmap, pg_cnt);
		if (bit_idx_start == -1) {	//失败
			return NULL;
		}
		while(cnt < pg_cnt) {
c00026a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00026ab:	3b 45 0c             	cmp    0xc(%ebp),%eax
c00026ae:	72 d7                	jb     c0002687 <vaddr_get+0x47>
/work/x86_os_my/kernel/memory.c:79
			// 设置位图中的位，表示内存已被占用
			bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 1);
		}
		vaddr_start = kernel_vaddr.vaddr_start + bit_idx_start * PG_SIZE;
c00026b0:	a1 50 11 01 c0       	mov    0xc0011150,%eax
c00026b5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c00026b8:	c1 e2 0c             	shl    $0xc,%edx
c00026bb:	01 d0                	add    %edx,%eax
c00026bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00026c0:	e9 8c 00 00 00       	jmp    c0002751 <vaddr_get+0x111>
/work/x86_os_my/kernel/memory.c:81
	} else {
		struct task_struct* cur = running_thread();
c00026c5:	e8 e0 14 00 00       	call   c0003baa <running_thread>
c00026ca:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:82
		bit_idx_start  = bitmap_scan(&cur->userprog_vaddr.vaddr_bitmap, pg_cnt);
c00026cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00026d0:	83 c0 58             	add    $0x58,%eax
c00026d3:	83 ec 08             	sub    $0x8,%esp
c00026d6:	ff 75 0c             	pushl  0xc(%ebp)
c00026d9:	50                   	push   %eax
c00026da:	e8 7b fd ff ff       	call   c000245a <bitmap_scan>
c00026df:	83 c4 10             	add    $0x10,%esp
c00026e2:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:83
		if (bit_idx_start == -1) {
c00026e5:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%ebp)
c00026e9:	75 2a                	jne    c0002715 <vaddr_get+0xd5>
/work/x86_os_my/kernel/memory.c:84
			return NULL;
c00026eb:	b8 00 00 00 00       	mov    $0x0,%eax
c00026f0:	eb 62                	jmp    c0002754 <vaddr_get+0x114>
/work/x86_os_my/kernel/memory.c:87
		}
		while(cnt < pg_cnt) {
			bitmap_set(&cur->userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 1);
c00026f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00026f5:	8d 50 01             	lea    0x1(%eax),%edx
c00026f8:	89 55 f0             	mov    %edx,-0x10(%ebp)
c00026fb:	8b 55 ec             	mov    -0x14(%ebp),%edx
c00026fe:	01 c2                	add    %eax,%edx
c0002700:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002703:	83 c0 58             	add    $0x58,%eax
c0002706:	83 ec 04             	sub    $0x4,%esp
c0002709:	6a 01                	push   $0x1
c000270b:	52                   	push   %edx
c000270c:	50                   	push   %eax
c000270d:	e8 7d fe ff ff       	call   c000258f <bitmap_set>
c0002712:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:86
		struct task_struct* cur = running_thread();
		bit_idx_start  = bitmap_scan(&cur->userprog_vaddr.vaddr_bitmap, pg_cnt);
		if (bit_idx_start == -1) {
			return NULL;
		}
		while(cnt < pg_cnt) {
c0002715:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002718:	3b 45 0c             	cmp    0xc(%ebp),%eax
c000271b:	72 d5                	jb     c00026f2 <vaddr_get+0xb2>
/work/x86_os_my/kernel/memory.c:89
			bitmap_set(&cur->userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 1);
		}
		vaddr_start = cur->userprog_vaddr.vaddr_start + bit_idx_start * PG_SIZE;
c000271d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002720:	8b 40 60             	mov    0x60(%eax),%eax
c0002723:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0002726:	c1 e2 0c             	shl    $0xc,%edx
c0002729:	01 d0                	add    %edx,%eax
c000272b:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:92

		/* (0xc0000000 - PG_SIZE)做为用户3级栈已经在start_process被分配 */
		ASSERT((uint32_t)vaddr_start < (0xc0000000 - PG_SIZE));
c000272e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002731:	3d ff ef ff bf       	cmp    $0xbfffefff,%eax
c0002736:	76 19                	jbe    c0002751 <vaddr_get+0x111>
/work/x86_os_my/kernel/memory.c:92 (discriminator 1)
c0002738:	68 d0 c0 00 c0       	push   $0xc000c0d0
c000273d:	68 38 c4 00 c0       	push   $0xc000c438
c0002742:	6a 5c                	push   $0x5c
c0002744:	68 ff c0 00 c0       	push   $0xc000c0ff
c0002749:	e8 d3 fb ff ff       	call   c0002321 <panic_spin>
c000274e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:95
		
	}
	return (void*)vaddr_start;
c0002751:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/kernel/memory.c:96
}
c0002754:	c9                   	leave  
c0002755:	c3                   	ret    

c0002756 <pte_ptr>:
pte_ptr():
/work/x86_os_my/kernel/memory.c:103
// 页表项 page table
/* 得到虚拟地址vaddr对应的pte指针*/
// 虚拟地址 vaddr 所在 pte 的"虚拟地址"!!!
// *pte 代表的是 pte 页表项的内容,
// 也就是 vaddr 最终所映射到的物理页框的 32 位地址中的高 20 位和 12 位的"页表项"属性
uint32_t* pte_ptr(uint32_t vaddr) {
c0002756:	55                   	push   %ebp
c0002757:	89 e5                	mov    %esp,%ebp
c0002759:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/memory.c:108
	/* 先找到页目录表 + \
	* 再用vaddr的pde部分做为索引，找到某一个页表 + \
	* 再用vaddr的pte部分作为索引，找到某一个页表项*/
	uint32_t* pte = (uint32_t*)(0xffc00000 + \
					((vaddr & 0xffc00000) >> 10) + \
c000275c:	8b 45 08             	mov    0x8(%ebp),%eax
c000275f:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0002764:	c1 e8 0a             	shr    $0xa,%eax
c0002767:	89 c2                	mov    %eax,%edx
/work/x86_os_my/kernel/memory.c:109
					PTE_IDX(vaddr) * 4);
c0002769:	8b 45 08             	mov    0x8(%ebp),%eax
c000276c:	25 00 f0 3f 00       	and    $0x3ff000,%eax
c0002771:	c1 e8 0c             	shr    $0xc,%eax
c0002774:	c1 e0 02             	shl    $0x2,%eax
/work/x86_os_my/kernel/memory.c:108
uint32_t* pte_ptr(uint32_t vaddr) {
	/* 先找到页目录表 + \
	* 再用vaddr的pde部分做为索引，找到某一个页表 + \
	* 再用vaddr的pte部分作为索引，找到某一个页表项*/
	uint32_t* pte = (uint32_t*)(0xffc00000 + \
					((vaddr & 0xffc00000) >> 10) + \
c0002777:	01 d0                	add    %edx,%eax
c0002779:	2d 00 00 40 00       	sub    $0x400000,%eax
/work/x86_os_my/kernel/memory.c:107
// 也就是 vaddr 最终所映射到的物理页框的 32 位地址中的高 20 位和 12 位的"页表项"属性
uint32_t* pte_ptr(uint32_t vaddr) {
	/* 先找到页目录表 + \
	* 再用vaddr的pde部分做为索引，找到某一个页表 + \
	* 再用vaddr的pte部分作为索引，找到某一个页表项*/
	uint32_t* pte = (uint32_t*)(0xffc00000 + \
c000277e:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/kernel/memory.c:110
					((vaddr & 0xffc00000) >> 10) + \
					PTE_IDX(vaddr) * 4);
	return pte;
c0002781:	8b 45 fc             	mov    -0x4(%ebp),%eax
/work/x86_os_my/kernel/memory.c:111
}
c0002784:	c9                   	leave  
c0002785:	c3                   	ret    

c0002786 <pde_ptr>:
pde_ptr():
/work/x86_os_my/kernel/memory.c:118
// 页目录表项 page Directory table entry
/* 得到虚拟地址vaddr对应的pde的指针 */
// 虚拟地址 vaddr 所在 pde 的"虚拟地址"!!!
// *pde 代表的是 pde 页目录项的内容
// 也就是 vaddr 最终所映射到的物理页框的 32 位地址中的高 20 位和 12 位的"页目录项"属性
uint32_t* pde_ptr(uint32_t vaddr) {
c0002786:	55                   	push   %ebp
c0002787:	89 e5                	mov    %esp,%ebp
c0002789:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/memory.c:120
	/* 0xfffff是用来访问到页目录表本身所在的地址 */
	uint32_t* pde = (uint32_t*)((0xfffff000) + PDE_IDX(vaddr) * 4);
c000278c:	8b 45 08             	mov    0x8(%ebp),%eax
c000278f:	c1 e8 16             	shr    $0x16,%eax
c0002792:	05 00 fc ff 3f       	add    $0x3ffffc00,%eax
c0002797:	c1 e0 02             	shl    $0x2,%eax
c000279a:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/kernel/memory.c:121
	return pde;
c000279d:	8b 45 fc             	mov    -0x4(%ebp),%eax
/work/x86_os_my/kernel/memory.c:122
}
c00027a0:	c9                   	leave  
c00027a1:	c3                   	ret    

c00027a2 <palloc>:
palloc():
/work/x86_os_my/kernel/memory.c:126

/* 在m_pool指向的物理内存池中分配1个物理页,
 * 成功则返回页框的物理地址,失败则返回NULL */
static void* palloc(struct pool* m_pool) {
c00027a2:	55                   	push   %ebp
c00027a3:	89 e5                	mov    %esp,%ebp
c00027a5:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:128
	/* 扫描或设置位图要保证原子操作 */
	int bit_idx = bitmap_scan(&m_pool->pool_bitmap, 1);    // 找一个物理页面
c00027a8:	8b 45 08             	mov    0x8(%ebp),%eax
c00027ab:	83 ec 08             	sub    $0x8,%esp
c00027ae:	6a 01                	push   $0x1
c00027b0:	50                   	push   %eax
c00027b1:	e8 a4 fc ff ff       	call   c000245a <bitmap_scan>
c00027b6:	83 c4 10             	add    $0x10,%esp
c00027b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:129
	if (bit_idx == -1 ) {
c00027bc:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c00027c0:	75 07                	jne    c00027c9 <palloc+0x27>
/work/x86_os_my/kernel/memory.c:130
		return NULL;
c00027c2:	b8 00 00 00 00       	mov    $0x0,%eax
c00027c7:	eb 2b                	jmp    c00027f4 <palloc+0x52>
/work/x86_os_my/kernel/memory.c:132
	}
	bitmap_set(&m_pool->pool_bitmap, bit_idx, 1);	// 将此位bit_idx置1
c00027c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c00027cc:	8b 45 08             	mov    0x8(%ebp),%eax
c00027cf:	83 ec 04             	sub    $0x4,%esp
c00027d2:	6a 01                	push   $0x1
c00027d4:	52                   	push   %edx
c00027d5:	50                   	push   %eax
c00027d6:	e8 b4 fd ff ff       	call   c000258f <bitmap_set>
c00027db:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:133
	uint32_t page_phyaddr = ((bit_idx * PG_SIZE) + m_pool->phy_addr_start);
c00027de:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00027e1:	c1 e0 0c             	shl    $0xc,%eax
c00027e4:	89 c2                	mov    %eax,%edx
c00027e6:	8b 45 08             	mov    0x8(%ebp),%eax
c00027e9:	8b 40 08             	mov    0x8(%eax),%eax
c00027ec:	01 d0                	add    %edx,%eax
c00027ee:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:134
	return (void*)page_phyaddr;
c00027f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
/work/x86_os_my/kernel/memory.c:135
}
c00027f4:	c9                   	leave  
c00027f5:	c3                   	ret    

c00027f6 <page_table_add>:
page_table_add():
/work/x86_os_my/kernel/memory.c:138

/* 页表中添加虚拟地址_vaddr与物理地址_page_phyaddr的映射 */
static void page_table_add(void* _vaddr, void* _page_phyaddr) {
c00027f6:	55                   	push   %ebp
c00027f7:	89 e5                	mov    %esp,%ebp
c00027f9:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/kernel/memory.c:139
	uint32_t vaddr = (uint32_t)_vaddr, page_phyaddr = (uint32_t)_page_phyaddr;
c00027fc:	8b 45 08             	mov    0x8(%ebp),%eax
c00027ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0002802:	8b 45 0c             	mov    0xc(%ebp),%eax
c0002805:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:140
	uint32_t* pde = pde_ptr(vaddr);	//变量pde是虚拟地址!!!
c0002808:	ff 75 f4             	pushl  -0xc(%ebp)
c000280b:	e8 76 ff ff ff       	call   c0002786 <pde_ptr>
c0002810:	83 c4 04             	add    $0x4,%esp
c0002813:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:141
	uint32_t* pte = pte_ptr(vaddr);	//变量pte是虚拟地址!!!
c0002816:	ff 75 f4             	pushl  -0xc(%ebp)
c0002819:	e8 38 ff ff ff       	call   c0002756 <pte_ptr>
c000281e:	83 c4 04             	add    $0x4,%esp
c0002821:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:149
	* pde页目录项 pte页表项
	* 执行*pte可能会访问到空的pde。所以确保pde创建完成后才能执行*pte，否则会引发page_fault。
	* 因此在*pde为0时，*pte只能出现在下面else语句块中的*pde后面。
	* *********************************************************/
	/* 先在页目录内判断目录项的P位，若为1,则表示该表已存在 */
	if (*pde & 0x00000001) {			// 页目录项 存在
c0002824:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002827:	8b 00                	mov    (%eax),%eax
c0002829:	83 e0 01             	and    $0x1,%eax
c000282c:	85 c0                	test   %eax,%eax
c000282e:	74 64                	je     c0002894 <page_table_add+0x9e>
/work/x86_os_my/kernel/memory.c:150
		ASSERT(!(*pte & 0x00000001));	// 页表项不存在才能往下执行，否则panic
c0002830:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002833:	8b 00                	mov    (%eax),%eax
c0002835:	83 e0 01             	and    $0x1,%eax
c0002838:	85 c0                	test   %eax,%eax
c000283a:	74 1c                	je     c0002858 <page_table_add+0x62>
/work/x86_os_my/kernel/memory.c:150 (discriminator 1)
c000283c:	68 0f c1 00 c0       	push   $0xc000c10f
c0002841:	68 44 c4 00 c0       	push   $0xc000c444
c0002846:	68 96 00 00 00       	push   $0x96
c000284b:	68 ff c0 00 c0       	push   $0xc000c0ff
c0002850:	e8 cc fa ff ff       	call   c0002321 <panic_spin>
c0002855:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:152

		if (!(*pte & 0x00000001)) {		// 页表项pte不存在，创建PTE
c0002858:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000285b:	8b 00                	mov    (%eax),%eax
c000285d:	83 e0 01             	and    $0x1,%eax
c0002860:	85 c0                	test   %eax,%eax
c0002862:	75 12                	jne    c0002876 <page_table_add+0x80>
/work/x86_os_my/kernel/memory.c:153
			*pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);		// 物理地址 | US=1,RW=1,P=1
c0002864:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002867:	83 c8 07             	or     $0x7,%eax
c000286a:	89 c2                	mov    %eax,%edx
c000286c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000286f:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/kernel/memory.c:173
		memset((void*)((int)pte & 0xfffff000), 0, PG_SIZE);

		ASSERT(!(*pte & 0x00000001));	// 页表项不存在才能往下执行，否则panic
		*pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);			// 物理地址 | US=1,RW=1,P=1
	}
}
c0002871:	e9 8e 00 00 00       	jmp    c0002904 <page_table_add+0x10e>
/work/x86_os_my/kernel/memory.c:155
		ASSERT(!(*pte & 0x00000001));	// 页表项不存在才能往下执行，否则panic

		if (!(*pte & 0x00000001)) {		// 页表项pte不存在，创建PTE
			*pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);		// 物理地址 | US=1,RW=1,P=1
		} else {						// 不会执行到这，因为上面的ASSERT
			PANIC("pte repeat");
c0002876:	68 24 c1 00 c0       	push   $0xc000c124
c000287b:	68 44 c4 00 c0       	push   $0xc000c444
c0002880:	68 9b 00 00 00       	push   $0x9b
c0002885:	68 ff c0 00 c0       	push   $0xc000c0ff
c000288a:	e8 92 fa ff ff       	call   c0002321 <panic_spin>
c000288f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:173
		memset((void*)((int)pte & 0xfffff000), 0, PG_SIZE);

		ASSERT(!(*pte & 0x00000001));	// 页表项不存在才能往下执行，否则panic
		*pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);			// 物理地址 | US=1,RW=1,P=1
	}
}
c0002892:	eb 70                	jmp    c0002904 <page_table_add+0x10e>
/work/x86_os_my/kernel/memory.c:159
		} else {						// 不会执行到这，因为上面的ASSERT
			PANIC("pte repeat");
		}
	} else {							// 页目录项不存在，先创建页目录，再创建页表项
		/* 页表中用到的页一律从内核空间分配 */
		uint32_t pde_phyaddr = (uint32_t)palloc(&kernel_pool);
c0002894:	83 ec 0c             	sub    $0xc,%esp
c0002897:	68 60 11 01 c0       	push   $0xc0011160
c000289c:	e8 01 ff ff ff       	call   c00027a2 <palloc>
c00028a1:	83 c4 10             	add    $0x10,%esp
c00028a4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/kernel/memory.c:160
		*pde = (pde_phyaddr | PG_US_U | PG_RW_W | PG_P_1);			// 注意这行是pde_phyaddr，不是page_phyaddr!!!
c00028a7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00028aa:	83 c8 07             	or     $0x7,%eax
c00028ad:	89 c2                	mov    %eax,%edx
c00028af:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00028b2:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/kernel/memory.c:168
		 * 访问物理地址 pde_phyaddr，需要找到它的虚拟地址！
		 * 只要用_vaddr的 PTE 取高20位即可。
		   搞得这么难理解，其实就是0xffc00000找到页目录表，然后加上vaddr的PDE在页目录表中的索引
		   (uint32_t*)(0xffc00000 + ((vaddr & 0xffc00000) >> 10))
		 */
		memset((void*)((int)pte & 0xfffff000), 0, PG_SIZE);
c00028b4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00028b7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c00028bc:	83 ec 04             	sub    $0x4,%esp
c00028bf:	68 00 10 00 00       	push   $0x1000
c00028c4:	6a 00                	push   $0x0
c00028c6:	50                   	push   %eax
c00028c7:	e8 f7 0e 00 00       	call   c00037c3 <memset>
c00028cc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:170

		ASSERT(!(*pte & 0x00000001));	// 页表项不存在才能往下执行，否则panic
c00028cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00028d2:	8b 00                	mov    (%eax),%eax
c00028d4:	83 e0 01             	and    $0x1,%eax
c00028d7:	85 c0                	test   %eax,%eax
c00028d9:	74 1c                	je     c00028f7 <page_table_add+0x101>
/work/x86_os_my/kernel/memory.c:170 (discriminator 1)
c00028db:	68 0f c1 00 c0       	push   $0xc000c10f
c00028e0:	68 44 c4 00 c0       	push   $0xc000c444
c00028e5:	68 aa 00 00 00       	push   $0xaa
c00028ea:	68 ff c0 00 c0       	push   $0xc000c0ff
c00028ef:	e8 2d fa ff ff       	call   c0002321 <panic_spin>
c00028f4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:171
		*pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);			// 物理地址 | US=1,RW=1,P=1
c00028f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00028fa:	83 c8 07             	or     $0x7,%eax
c00028fd:	89 c2                	mov    %eax,%edx
c00028ff:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002902:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/kernel/memory.c:173
	}
}
c0002904:	90                   	nop
c0002905:	c9                   	leave  
c0002906:	c3                   	ret    

c0002907 <malloc_page>:
malloc_page():
/work/x86_os_my/kernel/memory.c:176

/* 分配pg_cnt个页空间,成功则返回起始虚拟地址,失败时返回NULL */
void* malloc_page(enum pool_flags pf, uint32_t pg_cnt) {
c0002907:	55                   	push   %ebp
c0002908:	89 e5                	mov    %esp,%ebp
c000290a:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/kernel/memory.c:177
	ASSERT(pg_cnt > 0 && pg_cnt < 3840);
c000290d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0002911:	74 09                	je     c000291c <malloc_page+0x15>
/work/x86_os_my/kernel/memory.c:177 (discriminator 1)
c0002913:	81 7d 0c ff 0e 00 00 	cmpl   $0xeff,0xc(%ebp)
c000291a:	76 1c                	jbe    c0002938 <malloc_page+0x31>
/work/x86_os_my/kernel/memory.c:177 (discriminator 3)
c000291c:	68 2f c1 00 c0       	push   $0xc000c12f
c0002921:	68 54 c4 00 c0       	push   $0xc000c454
c0002926:	68 b1 00 00 00       	push   $0xb1
c000292b:	68 ff c0 00 c0       	push   $0xc000c0ff
c0002930:	e8 ec f9 ff ff       	call   c0002321 <panic_spin>
c0002935:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:183
	/***********   malloc_page的原理是三个动作的合成:   ***********
		1 通过vaddr_get在虚拟内存池中申请虚拟地址
		2 通过palloc在物理内存池中申请物理页
		3 通过page_table_add将以上得到的虚拟地址和物理地址在页表中完成映射
	***************************************************************/
	void* vaddr_start = vaddr_get(pf, pg_cnt);
c0002938:	83 ec 08             	sub    $0x8,%esp
c000293b:	ff 75 0c             	pushl  0xc(%ebp)
c000293e:	ff 75 08             	pushl  0x8(%ebp)
c0002941:	e8 fa fc ff ff       	call   c0002640 <vaddr_get>
c0002946:	83 c4 10             	add    $0x10,%esp
c0002949:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:184
	if (vaddr_start == NULL) {
c000294c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0002950:	75 07                	jne    c0002959 <malloc_page+0x52>
/work/x86_os_my/kernel/memory.c:185
		return NULL;
c0002952:	b8 00 00 00 00       	mov    $0x0,%eax
c0002957:	eb 6e                	jmp    c00029c7 <malloc_page+0xc0>
/work/x86_os_my/kernel/memory.c:188
	}

	uint32_t vaddr = (uint32_t)vaddr_start, cnt = pg_cnt;
c0002959:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000295c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c000295f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0002962:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:189
	struct pool* mem_pool = pf & PF_KERNEL ? &kernel_pool : &user_pool;
c0002965:	8b 45 08             	mov    0x8(%ebp),%eax
c0002968:	83 e0 01             	and    $0x1,%eax
c000296b:	85 c0                	test   %eax,%eax
c000296d:	74 07                	je     c0002976 <malloc_page+0x6f>
/work/x86_os_my/kernel/memory.c:189 (discriminator 1)
c000296f:	b8 60 11 01 c0       	mov    $0xc0011160,%eax
c0002974:	eb 05                	jmp    c000297b <malloc_page+0x74>
/work/x86_os_my/kernel/memory.c:189 (discriminator 2)
c0002976:	b8 60 10 01 c0       	mov    $0xc0011060,%eax
/work/x86_os_my/kernel/memory.c:189 (discriminator 4)
c000297b:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:192 (discriminator 4)

	/* 因为虚拟地址是连续的,但物理地址可以是不连续的,所以逐个做映射*/
	while (cnt-- > 0) {
c000297e:	eb 37                	jmp    c00029b7 <malloc_page+0xb0>
/work/x86_os_my/kernel/memory.c:193
		void* page_phyaddr = palloc(mem_pool);
c0002980:	83 ec 0c             	sub    $0xc,%esp
c0002983:	ff 75 e8             	pushl  -0x18(%ebp)
c0002986:	e8 17 fe ff ff       	call   c00027a2 <palloc>
c000298b:	83 c4 10             	add    $0x10,%esp
c000298e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/kernel/memory.c:194
		if (page_phyaddr == NULL) {  // 失败时要将曾经已申请的虚拟地址和物理页全部回滚，在将来完成内存回收时再补充
c0002991:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0002995:	75 07                	jne    c000299e <malloc_page+0x97>
/work/x86_os_my/kernel/memory.c:195
			return NULL;
c0002997:	b8 00 00 00 00       	mov    $0x0,%eax
c000299c:	eb 29                	jmp    c00029c7 <malloc_page+0xc0>
/work/x86_os_my/kernel/memory.c:197
		}
		page_table_add((void*)vaddr, page_phyaddr); // 在页表中做映射 
c000299e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00029a1:	83 ec 08             	sub    $0x8,%esp
c00029a4:	ff 75 e4             	pushl  -0x1c(%ebp)
c00029a7:	50                   	push   %eax
c00029a8:	e8 49 fe ff ff       	call   c00027f6 <page_table_add>
c00029ad:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:198
		vaddr += PG_SIZE;		 // 下一个虚拟页
c00029b0:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:192

	uint32_t vaddr = (uint32_t)vaddr_start, cnt = pg_cnt;
	struct pool* mem_pool = pf & PF_KERNEL ? &kernel_pool : &user_pool;

	/* 因为虚拟地址是连续的,但物理地址可以是不连续的,所以逐个做映射*/
	while (cnt-- > 0) {
c00029b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00029ba:	8d 50 ff             	lea    -0x1(%eax),%edx
c00029bd:	89 55 f0             	mov    %edx,-0x10(%ebp)
c00029c0:	85 c0                	test   %eax,%eax
c00029c2:	75 bc                	jne    c0002980 <malloc_page+0x79>
/work/x86_os_my/kernel/memory.c:200
			return NULL;
		}
		page_table_add((void*)vaddr, page_phyaddr); // 在页表中做映射 
		vaddr += PG_SIZE;		 // 下一个虚拟页
	}
	return vaddr_start;
c00029c4:	8b 45 ec             	mov    -0x14(%ebp),%eax
/work/x86_os_my/kernel/memory.c:201
}
c00029c7:	c9                   	leave  
c00029c8:	c3                   	ret    

c00029c9 <get_kernel_pages>:
get_kernel_pages():
/work/x86_os_my/kernel/memory.c:204

/* 从内核物理内存池中申请pg_cnt页内存,成功则返回其虚拟地址,失败则返回NULL */
void* get_kernel_pages(uint32_t pg_cnt) {
c00029c9:	55                   	push   %ebp
c00029ca:	89 e5                	mov    %esp,%ebp
c00029cc:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:205
	lock_acquire(&kernel_pool.lock);
c00029cf:	83 ec 0c             	sub    $0xc,%esp
c00029d2:	68 70 11 01 c0       	push   $0xc0011170
c00029d7:	e8 a3 20 00 00       	call   c0004a7f <lock_acquire>
c00029dc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:206
	void* vaddr =  malloc_page(PF_KERNEL, pg_cnt);
c00029df:	83 ec 08             	sub    $0x8,%esp
c00029e2:	ff 75 08             	pushl  0x8(%ebp)
c00029e5:	6a 01                	push   $0x1
c00029e7:	e8 1b ff ff ff       	call   c0002907 <malloc_page>
c00029ec:	83 c4 10             	add    $0x10,%esp
c00029ef:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:207
	if (vaddr != NULL) {
c00029f2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c00029f6:	74 17                	je     c0002a0f <get_kernel_pages+0x46>
/work/x86_os_my/kernel/memory.c:208
		memset(vaddr, 0, pg_cnt * PG_SIZE);
c00029f8:	8b 45 08             	mov    0x8(%ebp),%eax
c00029fb:	c1 e0 0c             	shl    $0xc,%eax
c00029fe:	83 ec 04             	sub    $0x4,%esp
c0002a01:	50                   	push   %eax
c0002a02:	6a 00                	push   $0x0
c0002a04:	ff 75 f4             	pushl  -0xc(%ebp)
c0002a07:	e8 b7 0d 00 00       	call   c00037c3 <memset>
c0002a0c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:210
	}
	lock_release(&kernel_pool.lock);
c0002a0f:	83 ec 0c             	sub    $0xc,%esp
c0002a12:	68 70 11 01 c0       	push   $0xc0011170
c0002a17:	e8 da 20 00 00       	call   c0004af6 <lock_release>
c0002a1c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:211
	return vaddr;
c0002a1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/kernel/memory.c:212
}
c0002a22:	c9                   	leave  
c0002a23:	c3                   	ret    

c0002a24 <get_user_pages>:
get_user_pages():
/work/x86_os_my/kernel/memory.c:215

/* 在用户空间中申请4k内存,并返回其虚拟地址 */
void* get_user_pages(uint32_t pg_cnt) {
c0002a24:	55                   	push   %ebp
c0002a25:	89 e5                	mov    %esp,%ebp
c0002a27:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:216
	lock_acquire(&user_pool.lock);
c0002a2a:	83 ec 0c             	sub    $0xc,%esp
c0002a2d:	68 70 10 01 c0       	push   $0xc0011070
c0002a32:	e8 48 20 00 00       	call   c0004a7f <lock_acquire>
c0002a37:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:217
	void* vaddr = malloc_page(PF_USER, pg_cnt);
c0002a3a:	83 ec 08             	sub    $0x8,%esp
c0002a3d:	ff 75 08             	pushl  0x8(%ebp)
c0002a40:	6a 02                	push   $0x2
c0002a42:	e8 c0 fe ff ff       	call   c0002907 <malloc_page>
c0002a47:	83 c4 10             	add    $0x10,%esp
c0002a4a:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:218
	if (vaddr != NULL) {
c0002a4d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0002a51:	74 17                	je     c0002a6a <get_user_pages+0x46>
/work/x86_os_my/kernel/memory.c:219
		memset(vaddr, 0, pg_cnt * PG_SIZE);
c0002a53:	8b 45 08             	mov    0x8(%ebp),%eax
c0002a56:	c1 e0 0c             	shl    $0xc,%eax
c0002a59:	83 ec 04             	sub    $0x4,%esp
c0002a5c:	50                   	push   %eax
c0002a5d:	6a 00                	push   $0x0
c0002a5f:	ff 75 f4             	pushl  -0xc(%ebp)
c0002a62:	e8 5c 0d 00 00       	call   c00037c3 <memset>
c0002a67:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:221
	}
	lock_release(&user_pool.lock);
c0002a6a:	83 ec 0c             	sub    $0xc,%esp
c0002a6d:	68 70 10 01 c0       	push   $0xc0011070
c0002a72:	e8 7f 20 00 00       	call   c0004af6 <lock_release>
c0002a77:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:222
	return vaddr;
c0002a7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/kernel/memory.c:223
}
c0002a7d:	c9                   	leave  
c0002a7e:	c3                   	ret    

c0002a7f <get_a_page>:
get_a_page():
/work/x86_os_my/kernel/memory.c:227

/* 将虚拟地址vaddr与pf池中的物理地址关联,仅支持一页空间分配
 * 功能是，可以指定虚拟地址的内存分配 */
void* get_a_page(enum pool_flags pf, uint32_t vaddr) {
c0002a7f:	55                   	push   %ebp
c0002a80:	89 e5                	mov    %esp,%ebp
c0002a82:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:228
	struct pool* mem_pool = pf & PF_KERNEL ? &kernel_pool : &user_pool;
c0002a85:	8b 45 08             	mov    0x8(%ebp),%eax
c0002a88:	83 e0 01             	and    $0x1,%eax
c0002a8b:	85 c0                	test   %eax,%eax
c0002a8d:	74 07                	je     c0002a96 <get_a_page+0x17>
/work/x86_os_my/kernel/memory.c:228 (discriminator 1)
c0002a8f:	b8 60 11 01 c0       	mov    $0xc0011160,%eax
c0002a94:	eb 05                	jmp    c0002a9b <get_a_page+0x1c>
/work/x86_os_my/kernel/memory.c:228 (discriminator 2)
c0002a96:	b8 60 10 01 c0       	mov    $0xc0011060,%eax
/work/x86_os_my/kernel/memory.c:228 (discriminator 4)
c0002a9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:229 (discriminator 4)
	lock_acquire(&mem_pool->lock);
c0002a9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002aa1:	83 c0 10             	add    $0x10,%eax
c0002aa4:	83 ec 0c             	sub    $0xc,%esp
c0002aa7:	50                   	push   %eax
c0002aa8:	e8 d2 1f 00 00       	call   c0004a7f <lock_acquire>
c0002aad:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:232 (discriminator 4)

	/* 先将虚拟地址对应的位图置1 */
	struct task_struct* cur = running_thread();
c0002ab0:	e8 f5 10 00 00       	call   c0003baa <running_thread>
c0002ab5:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:233 (discriminator 4)
	int32_t bit_idx = -1;
c0002ab8:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:235 (discriminator 4)

	if (cur->pgdir != NULL && pf == PF_USER) {
c0002abf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002ac2:	8b 40 54             	mov    0x54(%eax),%eax
c0002ac5:	85 c0                	test   %eax,%eax
c0002ac7:	74 55                	je     c0002b1e <get_a_page+0x9f>
/work/x86_os_my/kernel/memory.c:235 (discriminator 1)
c0002ac9:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c0002acd:	75 4f                	jne    c0002b1e <get_a_page+0x9f>
/work/x86_os_my/kernel/memory.c:237
		/* 若当前是用户进程申请用户内存,就修改用户进程自己的虚拟地址池的 位图 */
		bit_idx = (vaddr - cur->userprog_vaddr.vaddr_start) / PG_SIZE;
c0002acf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002ad2:	8b 40 60             	mov    0x60(%eax),%eax
c0002ad5:	8b 55 0c             	mov    0xc(%ebp),%edx
c0002ad8:	29 c2                	sub    %eax,%edx
c0002ada:	89 d0                	mov    %edx,%eax
c0002adc:	c1 e8 0c             	shr    $0xc,%eax
c0002adf:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:238
		ASSERT(bit_idx > 0);
c0002ae2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0002ae6:	7f 1c                	jg     c0002b04 <get_a_page+0x85>
/work/x86_os_my/kernel/memory.c:238 (discriminator 1)
c0002ae8:	68 4b c1 00 c0       	push   $0xc000c14b
c0002aed:	68 60 c4 00 c0       	push   $0xc000c460
c0002af2:	68 ee 00 00 00       	push   $0xee
c0002af7:	68 ff c0 00 c0       	push   $0xc000c0ff
c0002afc:	e8 20 f8 ff ff       	call   c0002321 <panic_spin>
c0002b01:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:239
		bitmap_set(&cur->userprog_vaddr.vaddr_bitmap, bit_idx, 1);
c0002b04:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002b07:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0002b0a:	83 c2 58             	add    $0x58,%edx
c0002b0d:	83 ec 04             	sub    $0x4,%esp
c0002b10:	6a 01                	push   $0x1
c0002b12:	50                   	push   %eax
c0002b13:	52                   	push   %edx
c0002b14:	e8 76 fa ff ff       	call   c000258f <bitmap_set>
c0002b19:	83 c4 10             	add    $0x10,%esp
c0002b1c:	eb 78                	jmp    c0002b96 <get_a_page+0x117>
/work/x86_os_my/kernel/memory.c:241

	} else if (cur->pgdir == NULL && pf == PF_KERNEL) {
c0002b1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002b21:	8b 40 54             	mov    0x54(%eax),%eax
c0002b24:	85 c0                	test   %eax,%eax
c0002b26:	75 52                	jne    c0002b7a <get_a_page+0xfb>
/work/x86_os_my/kernel/memory.c:241 (discriminator 1)
c0002b28:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c0002b2c:	75 4c                	jne    c0002b7a <get_a_page+0xfb>
/work/x86_os_my/kernel/memory.c:243
		/* 如果是内核线程申请内核内存,就修改 kernel_vaddr */
		bit_idx = (vaddr - kernel_vaddr.vaddr_start) / PG_SIZE;
c0002b2e:	a1 50 11 01 c0       	mov    0xc0011150,%eax
c0002b33:	8b 55 0c             	mov    0xc(%ebp),%edx
c0002b36:	29 c2                	sub    %eax,%edx
c0002b38:	89 d0                	mov    %edx,%eax
c0002b3a:	c1 e8 0c             	shr    $0xc,%eax
c0002b3d:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:244
		ASSERT(bit_idx > 0);
c0002b40:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0002b44:	7f 1c                	jg     c0002b62 <get_a_page+0xe3>
/work/x86_os_my/kernel/memory.c:244 (discriminator 1)
c0002b46:	68 4b c1 00 c0       	push   $0xc000c14b
c0002b4b:	68 60 c4 00 c0       	push   $0xc000c460
c0002b50:	68 f4 00 00 00       	push   $0xf4
c0002b55:	68 ff c0 00 c0       	push   $0xc000c0ff
c0002b5a:	e8 c2 f7 ff ff       	call   c0002321 <panic_spin>
c0002b5f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:245
		bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx, 1);
c0002b62:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002b65:	83 ec 04             	sub    $0x4,%esp
c0002b68:	6a 01                	push   $0x1
c0002b6a:	50                   	push   %eax
c0002b6b:	68 48 11 01 c0       	push   $0xc0011148
c0002b70:	e8 1a fa ff ff       	call   c000258f <bitmap_set>
c0002b75:	83 c4 10             	add    $0x10,%esp
c0002b78:	eb 1c                	jmp    c0002b96 <get_a_page+0x117>
/work/x86_os_my/kernel/memory.c:248

	} else {
		PANIC("get_a_page:not allow kernel alloc userspace or user alloc kernelspace by get_a_page");
c0002b7a:	68 58 c1 00 c0       	push   $0xc000c158
c0002b7f:	68 60 c4 00 c0       	push   $0xc000c460
c0002b84:	68 f8 00 00 00       	push   $0xf8
c0002b89:	68 ff c0 00 c0       	push   $0xc000c0ff
c0002b8e:	e8 8e f7 ff ff       	call   c0002321 <panic_spin>
c0002b93:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:251
	}

	void* page_phyaddr = palloc(mem_pool);
c0002b96:	83 ec 0c             	sub    $0xc,%esp
c0002b99:	ff 75 f4             	pushl  -0xc(%ebp)
c0002b9c:	e8 01 fc ff ff       	call   c00027a2 <palloc>
c0002ba1:	83 c4 10             	add    $0x10,%esp
c0002ba4:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:252
	if (page_phyaddr == NULL) {
c0002ba7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0002bab:	75 19                	jne    c0002bc6 <get_a_page+0x147>
/work/x86_os_my/kernel/memory.c:253
		lock_release(&mem_pool->lock);	//哈哈
c0002bad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002bb0:	83 c0 10             	add    $0x10,%eax
c0002bb3:	83 ec 0c             	sub    $0xc,%esp
c0002bb6:	50                   	push   %eax
c0002bb7:	e8 3a 1f 00 00       	call   c0004af6 <lock_release>
c0002bbc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:254
		return NULL;
c0002bbf:	b8 00 00 00 00       	mov    $0x0,%eax
c0002bc4:	eb 27                	jmp    c0002bed <get_a_page+0x16e>
/work/x86_os_my/kernel/memory.c:256
	}
	page_table_add((void*)vaddr, page_phyaddr);
c0002bc6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0002bc9:	83 ec 08             	sub    $0x8,%esp
c0002bcc:	ff 75 e8             	pushl  -0x18(%ebp)
c0002bcf:	50                   	push   %eax
c0002bd0:	e8 21 fc ff ff       	call   c00027f6 <page_table_add>
c0002bd5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:258
	
	lock_release(&mem_pool->lock);
c0002bd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002bdb:	83 c0 10             	add    $0x10,%eax
c0002bde:	83 ec 0c             	sub    $0xc,%esp
c0002be1:	50                   	push   %eax
c0002be2:	e8 0f 1f 00 00       	call   c0004af6 <lock_release>
c0002be7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:259
	return (void*)vaddr;
c0002bea:	8b 45 0c             	mov    0xc(%ebp),%eax
/work/x86_os_my/kernel/memory.c:260
}
c0002bed:	c9                   	leave  
c0002bee:	c3                   	ret    

c0002bef <get_a_page_without_opvaddrbitmap>:
get_a_page_without_opvaddrbitmap():
/work/x86_os_my/kernel/memory.c:265

/* 安装1页大小的vaddr，专门针对fork时不修改虚拟地址位图的情况
 * 函数功能和 get_a_page 类似，为 vaddr 分配一物理页，只是少了虚拟地址池位图的操作
 */
void* get_a_page_without_opvaddrbitmap(enum pool_flags pf, uint32_t vaddr) {
c0002bef:	55                   	push   %ebp
c0002bf0:	89 e5                	mov    %esp,%ebp
c0002bf2:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:266
	struct pool* mem_pool = pf & PF_KERNEL ? &kernel_pool : &user_pool;
c0002bf5:	8b 45 08             	mov    0x8(%ebp),%eax
c0002bf8:	83 e0 01             	and    $0x1,%eax
c0002bfb:	85 c0                	test   %eax,%eax
c0002bfd:	74 07                	je     c0002c06 <get_a_page_without_opvaddrbitmap+0x17>
/work/x86_os_my/kernel/memory.c:266 (discriminator 1)
c0002bff:	b8 60 11 01 c0       	mov    $0xc0011160,%eax
c0002c04:	eb 05                	jmp    c0002c0b <get_a_page_without_opvaddrbitmap+0x1c>
/work/x86_os_my/kernel/memory.c:266 (discriminator 2)
c0002c06:	b8 60 10 01 c0       	mov    $0xc0011060,%eax
/work/x86_os_my/kernel/memory.c:266 (discriminator 4)
c0002c0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:267 (discriminator 4)
	lock_acquire(&mem_pool->lock);
c0002c0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002c11:	83 c0 10             	add    $0x10,%eax
c0002c14:	83 ec 0c             	sub    $0xc,%esp
c0002c17:	50                   	push   %eax
c0002c18:	e8 62 1e 00 00       	call   c0004a7f <lock_acquire>
c0002c1d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:268 (discriminator 4)
	void* page_phyaddr = palloc(mem_pool);
c0002c20:	83 ec 0c             	sub    $0xc,%esp
c0002c23:	ff 75 f4             	pushl  -0xc(%ebp)
c0002c26:	e8 77 fb ff ff       	call   c00027a2 <palloc>
c0002c2b:	83 c4 10             	add    $0x10,%esp
c0002c2e:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:269 (discriminator 4)
	if (page_phyaddr == NULL) {
c0002c31:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0002c35:	75 19                	jne    c0002c50 <get_a_page_without_opvaddrbitmap+0x61>
/work/x86_os_my/kernel/memory.c:270
		lock_release(&mem_pool->lock);
c0002c37:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002c3a:	83 c0 10             	add    $0x10,%eax
c0002c3d:	83 ec 0c             	sub    $0xc,%esp
c0002c40:	50                   	push   %eax
c0002c41:	e8 b0 1e 00 00       	call   c0004af6 <lock_release>
c0002c46:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:271
		return NULL;
c0002c49:	b8 00 00 00 00       	mov    $0x0,%eax
c0002c4e:	eb 27                	jmp    c0002c77 <get_a_page_without_opvaddrbitmap+0x88>
/work/x86_os_my/kernel/memory.c:273
	}
	page_table_add((void*)vaddr, page_phyaddr);
c0002c50:	8b 45 0c             	mov    0xc(%ebp),%eax
c0002c53:	83 ec 08             	sub    $0x8,%esp
c0002c56:	ff 75 f0             	pushl  -0x10(%ebp)
c0002c59:	50                   	push   %eax
c0002c5a:	e8 97 fb ff ff       	call   c00027f6 <page_table_add>
c0002c5f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:274
	lock_release(&mem_pool->lock);
c0002c62:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002c65:	83 c0 10             	add    $0x10,%eax
c0002c68:	83 ec 0c             	sub    $0xc,%esp
c0002c6b:	50                   	push   %eax
c0002c6c:	e8 85 1e 00 00       	call   c0004af6 <lock_release>
c0002c71:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:275
	return (void*)vaddr;
c0002c74:	8b 45 0c             	mov    0xc(%ebp),%eax
/work/x86_os_my/kernel/memory.c:276
}
c0002c77:	c9                   	leave  
c0002c78:	c3                   	ret    

c0002c79 <addr_v2p>:
addr_v2p():
/work/x86_os_my/kernel/memory.c:279

/* 得到虚拟地址映射到的物理地址 */
uint32_t addr_v2p(uint32_t vaddr) {
c0002c79:	55                   	push   %ebp
c0002c7a:	89 e5                	mov    %esp,%ebp
c0002c7c:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/memory.c:280
	uint32_t* pte = pte_ptr(vaddr);
c0002c7f:	ff 75 08             	pushl  0x8(%ebp)
c0002c82:	e8 cf fa ff ff       	call   c0002756 <pte_ptr>
c0002c87:	83 c4 04             	add    $0x4,%esp
c0002c8a:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/kernel/memory.c:284
	/* (*pte)的内容是 vaddr 所在 pte 的内容，也就是 vaddr 最终所映射到的物理页框的 32 位地址中的高 20 位和 12 位的页表项属性，
	 * 因为页框都是自然页，低 12 位地址是 0，所以页表项 pte（和页目录项 pde）中只需要记录页框的高 20 位地址即可。
	 */
	return ((*pte & 0xfffff000) + (vaddr & 0x00000fff));
c0002c8d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0002c90:	8b 00                	mov    (%eax),%eax
c0002c92:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0002c97:	89 c2                	mov    %eax,%edx
c0002c99:	8b 45 08             	mov    0x8(%ebp),%eax
c0002c9c:	25 ff 0f 00 00       	and    $0xfff,%eax
c0002ca1:	01 d0                	add    %edx,%eax
/work/x86_os_my/kernel/memory.c:285
}
c0002ca3:	c9                   	leave  
c0002ca4:	c3                   	ret    

c0002ca5 <arena2block>:
arena2block():
/work/x86_os_my/kernel/memory.c:299
|                     |
| +-----------------+ |
+-+  mem_block_desc |←+
  +-----------------+
*/
static struct mem_block* arena2block(struct arena* a, uint32_t idx) {
c0002ca5:	55                   	push   %ebp
c0002ca6:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/kernel/memory.c:300
	return (struct mem_block*)((uint32_t)a + sizeof(struct arena) + idx * a->desc->block_size);
c0002ca8:	8b 45 08             	mov    0x8(%ebp),%eax
c0002cab:	8b 00                	mov    (%eax),%eax
c0002cad:	8b 00                	mov    (%eax),%eax
c0002caf:	0f af 45 0c          	imul   0xc(%ebp),%eax
c0002cb3:	89 c2                	mov    %eax,%edx
c0002cb5:	8b 45 08             	mov    0x8(%ebp),%eax
c0002cb8:	01 d0                	add    %edx,%eax
c0002cba:	83 c0 0c             	add    $0xc,%eax
/work/x86_os_my/kernel/memory.c:301
}
c0002cbd:	5d                   	pop    %ebp
c0002cbe:	c3                   	ret    

c0002cbf <block2arena>:
block2arena():
/work/x86_os_my/kernel/memory.c:306

/* 返回内存块mem_block所在的arena地址
 * 取到了虚拟地址mem_block那一整页的地址
 */
static struct arena* block2arena(struct mem_block* b) {
c0002cbf:	55                   	push   %ebp
c0002cc0:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/kernel/memory.c:307
	return (struct arena*)((uint32_t)b & 0xfffff000);
c0002cc2:	8b 45 08             	mov    0x8(%ebp),%eax
c0002cc5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
/work/x86_os_my/kernel/memory.c:308
}
c0002cca:	5d                   	pop    %ebp
c0002ccb:	c3                   	ret    

c0002ccc <sys_malloc>:
sys_malloc():
/work/x86_os_my/kernel/memory.c:319
 * 3.内存块地址被返回给用户后，用户可以自由使用此内存块 mem_block
 *   会把此内存块中的 list_elem 型变量 free_elem 覆盖
 *   不过 arena->mem_block_desc->free_list 中的元素已经记录了 mem_block->list_elem 的地址
 *   使用时覆盖的，只是 mem_block 的内容。
 */
void* sys_malloc(uint32_t size) {
c0002ccc:	55                   	push   %ebp
c0002ccd:	89 e5                	mov    %esp,%ebp
c0002ccf:	83 ec 38             	sub    $0x38,%esp
/work/x86_os_my/kernel/memory.c:324
	enum pool_flags PF;
	struct pool* mem_pool;
	uint32_t pool_size;
	struct mem_block_desc* descs;
	struct task_struct* cur_thread = running_thread();
c0002cd2:	e8 d3 0e 00 00       	call   c0003baa <running_thread>
c0002cd7:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/kernel/memory.c:327

	/* 判断用哪个内存池*/
	if (cur_thread->pgdir == NULL) {	// 是内核线程
c0002cda:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0002cdd:	8b 40 54             	mov    0x54(%eax),%eax
c0002ce0:	85 c0                	test   %eax,%eax
c0002ce2:	75 1f                	jne    c0002d03 <sys_malloc+0x37>
/work/x86_os_my/kernel/memory.c:328
		PF = PF_KERNEL;
c0002ce4:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:329
		pool_size = kernel_pool.pool_size;
c0002ceb:	a1 6c 11 01 c0       	mov    0xc001116c,%eax
c0002cf0:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:330
		mem_pool = &kernel_pool;
c0002cf3:	c7 45 f0 60 11 01 c0 	movl   $0xc0011160,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:331
		descs = k_block_descs;
c0002cfa:	c7 45 e8 a0 10 01 c0 	movl   $0xc00110a0,-0x18(%ebp)
c0002d01:	eb 1f                	jmp    c0002d22 <sys_malloc+0x56>
/work/x86_os_my/kernel/memory.c:333
	} else {							// 用户进程pcb中的pgdir（页目录表）会在为其分配页表时创建【create_page_dir】
		PF = PF_USER;
c0002d03:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:334
		pool_size = user_pool.pool_size;
c0002d0a:	a1 6c 10 01 c0       	mov    0xc001106c,%eax
c0002d0f:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:335
		mem_pool = &user_pool;
c0002d12:	c7 45 f0 60 10 01 c0 	movl   $0xc0011060,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:336
		descs = cur_thread->u_block_desc;
c0002d19:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0002d1c:	83 c0 64             	add    $0x64,%eax
c0002d1f:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:340
	}

	/* 若申请的内存不在内存池容量范围内则直接返回NULL */
	if (!(size > 0 && size < pool_size)) {
c0002d22:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0002d26:	74 08                	je     c0002d30 <sys_malloc+0x64>
/work/x86_os_my/kernel/memory.c:340 (discriminator 1)
c0002d28:	8b 45 08             	mov    0x8(%ebp),%eax
c0002d2b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0002d2e:	72 0a                	jb     c0002d3a <sys_malloc+0x6e>
/work/x86_os_my/kernel/memory.c:341
		return NULL;
c0002d30:	b8 00 00 00 00       	mov    $0x0,%eax
c0002d35:	e9 c5 02 00 00       	jmp    c0002fff <sys_malloc+0x333>
/work/x86_os_my/kernel/memory.c:346
	}

	struct arena* a;
	struct mem_block* b;
	lock_acquire(&mem_pool->lock);
c0002d3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002d3d:	83 c0 10             	add    $0x10,%eax
c0002d40:	83 ec 0c             	sub    $0xc,%esp
c0002d43:	50                   	push   %eax
c0002d44:	e8 36 1d 00 00       	call   c0004a7f <lock_acquire>
c0002d49:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:349

	/* 超过最大内存块1024, 就分配页框 */
	if (size > 1024) {
c0002d4c:	81 7d 08 00 04 00 00 	cmpl   $0x400,0x8(%ebp)
c0002d53:	0f 86 94 00 00 00    	jbe    c0002ded <sys_malloc+0x121>
/work/x86_os_my/kernel/memory.c:350
		uint32_t page_cnt = DIV_ROUND_UP(size + sizeof(struct arena), PG_SIZE);	// 向上取整需要的页框数
c0002d59:	8b 45 08             	mov    0x8(%ebp),%eax
c0002d5c:	05 0b 10 00 00       	add    $0x100b,%eax
c0002d61:	c1 e8 0c             	shr    $0xc,%eax
c0002d64:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/kernel/memory.c:352

		a = malloc_page(PF, page_cnt);
c0002d67:	83 ec 08             	sub    $0x8,%esp
c0002d6a:	ff 75 d8             	pushl  -0x28(%ebp)
c0002d6d:	ff 75 f4             	pushl  -0xc(%ebp)
c0002d70:	e8 92 fb ff ff       	call   c0002907 <malloc_page>
c0002d75:	83 c4 10             	add    $0x10,%esp
c0002d78:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/kernel/memory.c:353
		if (a != NULL) {
c0002d7b:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0002d7f:	74 50                	je     c0002dd1 <sys_malloc+0x105>
/work/x86_os_my/kernel/memory.c:354
			memset(a, 0, page_cnt * PG_SIZE);
c0002d81:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0002d84:	c1 e0 0c             	shl    $0xc,%eax
c0002d87:	83 ec 04             	sub    $0x4,%esp
c0002d8a:	50                   	push   %eax
c0002d8b:	6a 00                	push   $0x0
c0002d8d:	ff 75 d4             	pushl  -0x2c(%ebp)
c0002d90:	e8 2e 0a 00 00       	call   c00037c3 <memset>
c0002d95:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:358

			// 【arena结构体初始化，情况1】
			/* 对于分配的大块页框,将desc置为NULL, cnt置为页框数, large置为true */
			a->desc = NULL;
c0002d98:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002d9b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/kernel/memory.c:359
			a->cnt = page_cnt;
c0002da1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002da4:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0002da7:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/kernel/memory.c:360
			a->large = true;
c0002daa:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002dad:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/kernel/memory.c:362

			lock_release(&mem_pool->lock);
c0002db4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002db7:	83 c0 10             	add    $0x10,%eax
c0002dba:	83 ec 0c             	sub    $0xc,%esp
c0002dbd:	50                   	push   %eax
c0002dbe:	e8 33 1d 00 00       	call   c0004af6 <lock_release>
c0002dc3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:363
			return (void*)(a + 1);	// 跨过arena大小，把剩下的内存返回
c0002dc6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002dc9:	83 c0 0c             	add    $0xc,%eax
c0002dcc:	e9 2e 02 00 00       	jmp    c0002fff <sys_malloc+0x333>
/work/x86_os_my/kernel/memory.c:365
		} else {
			lock_release(&mem_pool->lock);
c0002dd1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002dd4:	83 c0 10             	add    $0x10,%eax
c0002dd7:	83 ec 0c             	sub    $0xc,%esp
c0002dda:	50                   	push   %eax
c0002ddb:	e8 16 1d 00 00       	call   c0004af6 <lock_release>
c0002de0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:366
			return NULL;
c0002de3:	b8 00 00 00 00       	mov    $0x0,%eax
c0002de8:	e9 12 02 00 00       	jmp    c0002fff <sys_malloc+0x333>
/work/x86_os_my/kernel/memory.c:374
	} else {
	/* 若申请的内存小于等于1024,可在各种规格的mem_block_desc中去适配 */
		uint8_t desc_idx;

		/* 从内存块描述符中匹配合适的内存块规格 */
		for (desc_idx = 0; desc_idx < DESC_CNT; desc_idx++) {
c0002ded:	c6 45 e7 00          	movb   $0x0,-0x19(%ebp)
c0002df1:	eb 25                	jmp    c0002e18 <sys_malloc+0x14c>
/work/x86_os_my/kernel/memory.c:375
			if (size <= descs[desc_idx].block_size) {	// 从小往大后,找到后退出
c0002df3:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0002df7:	89 d0                	mov    %edx,%eax
c0002df9:	01 c0                	add    %eax,%eax
c0002dfb:	01 d0                	add    %edx,%eax
c0002dfd:	c1 e0 03             	shl    $0x3,%eax
c0002e00:	89 c2                	mov    %eax,%edx
c0002e02:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002e05:	01 d0                	add    %edx,%eax
c0002e07:	8b 00                	mov    (%eax),%eax
c0002e09:	3b 45 08             	cmp    0x8(%ebp),%eax
c0002e0c:	73 12                	jae    c0002e20 <sys_malloc+0x154>
/work/x86_os_my/kernel/memory.c:374 (discriminator 2)
	} else {
	/* 若申请的内存小于等于1024,可在各种规格的mem_block_desc中去适配 */
		uint8_t desc_idx;

		/* 从内存块描述符中匹配合适的内存块规格 */
		for (desc_idx = 0; desc_idx < DESC_CNT; desc_idx++) {
c0002e0e:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c0002e12:	83 c0 01             	add    $0x1,%eax
c0002e15:	88 45 e7             	mov    %al,-0x19(%ebp)
/work/x86_os_my/kernel/memory.c:374 (discriminator 1)
c0002e18:	80 7d e7 06          	cmpb   $0x6,-0x19(%ebp)
c0002e1c:	76 d5                	jbe    c0002df3 <sys_malloc+0x127>
c0002e1e:	eb 01                	jmp    c0002e21 <sys_malloc+0x155>
/work/x86_os_my/kernel/memory.c:376
			if (size <= descs[desc_idx].block_size) {	// 从小往大后,找到后退出
				break;
c0002e20:	90                   	nop
/work/x86_os_my/kernel/memory.c:382
			}
		}

		/* 若mem_block_desc的free_list中已经没有可用的mem_block,
		 * 就创建新的arena提供mem_block */
		if (list_empty(&descs[desc_idx].free_list)) {
c0002e21:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0002e25:	89 d0                	mov    %edx,%eax
c0002e27:	01 c0                	add    %eax,%eax
c0002e29:	01 d0                	add    %edx,%eax
c0002e2b:	c1 e0 03             	shl    $0x3,%eax
c0002e2e:	89 c2                	mov    %eax,%edx
c0002e30:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002e33:	01 d0                	add    %edx,%eax
c0002e35:	83 c0 08             	add    $0x8,%eax
c0002e38:	83 ec 0c             	sub    $0xc,%esp
c0002e3b:	50                   	push   %eax
c0002e3c:	e8 48 19 00 00       	call   c0004789 <list_empty>
c0002e41:	83 c4 10             	add    $0x10,%esp
c0002e44:	85 c0                	test   %eax,%eax
c0002e46:	0f 84 31 01 00 00    	je     c0002f7d <sys_malloc+0x2b1>
/work/x86_os_my/kernel/memory.c:383
			a = malloc_page(PF, 1);       // 分配1页框做为arena
c0002e4c:	83 ec 08             	sub    $0x8,%esp
c0002e4f:	6a 01                	push   $0x1
c0002e51:	ff 75 f4             	pushl  -0xc(%ebp)
c0002e54:	e8 ae fa ff ff       	call   c0002907 <malloc_page>
c0002e59:	83 c4 10             	add    $0x10,%esp
c0002e5c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/kernel/memory.c:384
			if (a == NULL) {
c0002e5f:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0002e63:	75 1c                	jne    c0002e81 <sys_malloc+0x1b5>
/work/x86_os_my/kernel/memory.c:385
				lock_release(&mem_pool->lock);
c0002e65:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002e68:	83 c0 10             	add    $0x10,%eax
c0002e6b:	83 ec 0c             	sub    $0xc,%esp
c0002e6e:	50                   	push   %eax
c0002e6f:	e8 82 1c 00 00       	call   c0004af6 <lock_release>
c0002e74:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:386
				return NULL;
c0002e77:	b8 00 00 00 00       	mov    $0x0,%eax
c0002e7c:	e9 7e 01 00 00       	jmp    c0002fff <sys_malloc+0x333>
/work/x86_os_my/kernel/memory.c:388
			}
			memset(a, 0, PG_SIZE);
c0002e81:	83 ec 04             	sub    $0x4,%esp
c0002e84:	68 00 10 00 00       	push   $0x1000
c0002e89:	6a 00                	push   $0x0
c0002e8b:	ff 75 d4             	pushl  -0x2c(%ebp)
c0002e8e:	e8 30 09 00 00       	call   c00037c3 <memset>
c0002e93:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:392

			// 【arena结构体初始化，情况2】
			/* 对于分配的小块内存,将desc置为相应内存块描述符, cnt置为此arena可用的内存块数, large置为false */
			a->desc = &descs[desc_idx];
c0002e96:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0002e9a:	89 d0                	mov    %edx,%eax
c0002e9c:	01 c0                	add    %eax,%eax
c0002e9e:	01 d0                	add    %edx,%eax
c0002ea0:	c1 e0 03             	shl    $0x3,%eax
c0002ea3:	89 c2                	mov    %eax,%edx
c0002ea5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002ea8:	01 c2                	add    %eax,%edx
c0002eaa:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002ead:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/kernel/memory.c:393
			a->large = false;
c0002eaf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002eb2:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
/work/x86_os_my/kernel/memory.c:394
			a->cnt = descs[desc_idx].blocks_per_arena;
c0002eb9:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0002ebd:	89 d0                	mov    %edx,%eax
c0002ebf:	01 c0                	add    %eax,%eax
c0002ec1:	01 d0                	add    %edx,%eax
c0002ec3:	c1 e0 03             	shl    $0x3,%eax
c0002ec6:	89 c2                	mov    %eax,%edx
c0002ec8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002ecb:	01 d0                	add    %edx,%eax
c0002ecd:	8b 50 04             	mov    0x4(%eax),%edx
c0002ed0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002ed3:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/kernel/memory.c:396

			enum intr_status old_status = intr_disable();
c0002ed6:	e8 65 ea ff ff       	call   c0001940 <intr_disable>
c0002edb:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/kernel/memory.c:399
			/* 开始将arena拆分成内存块,并添加到内存块描述符的free_list中 */
			uint32_t block_idx;
			for (block_idx = 0; block_idx < descs[desc_idx].blocks_per_arena; block_idx++) {
c0002ede:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c0002ee5:	eb 68                	jmp    c0002f4f <sys_malloc+0x283>
/work/x86_os_my/kernel/memory.c:400
				b = arena2block(a, block_idx);
c0002ee7:	83 ec 08             	sub    $0x8,%esp
c0002eea:	ff 75 e0             	pushl  -0x20(%ebp)
c0002eed:	ff 75 d4             	pushl  -0x2c(%ebp)
c0002ef0:	e8 b0 fd ff ff       	call   c0002ca5 <arena2block>
c0002ef5:	83 c4 10             	add    $0x10,%esp
c0002ef8:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/kernel/memory.c:401
				ASSERT(!elem_find(&a->desc->free_list, &b->free_elem));
c0002efb:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0002efe:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0002f01:	8b 12                	mov    (%edx),%edx
c0002f03:	83 c2 08             	add    $0x8,%edx
c0002f06:	83 ec 08             	sub    $0x8,%esp
c0002f09:	50                   	push   %eax
c0002f0a:	52                   	push   %edx
c0002f0b:	e8 ac 17 00 00       	call   c00046bc <elem_find>
c0002f10:	83 c4 10             	add    $0x10,%esp
c0002f13:	85 c0                	test   %eax,%eax
c0002f15:	74 1c                	je     c0002f33 <sys_malloc+0x267>
/work/x86_os_my/kernel/memory.c:401 (discriminator 1)
c0002f17:	68 ac c1 00 c0       	push   $0xc000c1ac
c0002f1c:	68 6c c4 00 c0       	push   $0xc000c46c
c0002f21:	68 91 01 00 00       	push   $0x191
c0002f26:	68 ff c0 00 c0       	push   $0xc000c0ff
c0002f2b:	e8 f1 f3 ff ff       	call   c0002321 <panic_spin>
c0002f30:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:402 (discriminator 2)
				list_append(&a->desc->free_list, &b->free_elem);
c0002f33:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0002f36:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0002f39:	8b 12                	mov    (%edx),%edx
c0002f3b:	83 c2 08             	add    $0x8,%edx
c0002f3e:	83 ec 08             	sub    $0x8,%esp
c0002f41:	50                   	push   %eax
c0002f42:	52                   	push   %edx
c0002f43:	e8 fa 16 00 00       	call   c0004642 <list_append>
c0002f48:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:399 (discriminator 2)
			a->cnt = descs[desc_idx].blocks_per_arena;

			enum intr_status old_status = intr_disable();
			/* 开始将arena拆分成内存块,并添加到内存块描述符的free_list中 */
			uint32_t block_idx;
			for (block_idx = 0; block_idx < descs[desc_idx].blocks_per_arena; block_idx++) {
c0002f4b:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
/work/x86_os_my/kernel/memory.c:399 (discriminator 1)
c0002f4f:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0002f53:	89 d0                	mov    %edx,%eax
c0002f55:	01 c0                	add    %eax,%eax
c0002f57:	01 d0                	add    %edx,%eax
c0002f59:	c1 e0 03             	shl    $0x3,%eax
c0002f5c:	89 c2                	mov    %eax,%edx
c0002f5e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002f61:	01 d0                	add    %edx,%eax
c0002f63:	8b 40 04             	mov    0x4(%eax),%eax
c0002f66:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0002f69:	0f 87 78 ff ff ff    	ja     c0002ee7 <sys_malloc+0x21b>
/work/x86_os_my/kernel/memory.c:404
				b = arena2block(a, block_idx);
				ASSERT(!elem_find(&a->desc->free_list, &b->free_elem));
				list_append(&a->desc->free_list, &b->free_elem);
			}
			intr_set_status(old_status);
c0002f6f:	83 ec 0c             	sub    $0xc,%esp
c0002f72:	ff 75 d0             	pushl  -0x30(%ebp)
c0002f75:	e8 ef e9 ff ff       	call   c0001969 <intr_set_status>
c0002f7a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:408
		}

		/* 开始分配内存块 */
		b = elem2entry(struct mem_block, free_elem, list_pop(&(descs[desc_idx].free_list)));
c0002f7d:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0002f81:	89 d0                	mov    %edx,%eax
c0002f83:	01 c0                	add    %eax,%eax
c0002f85:	01 d0                	add    %edx,%eax
c0002f87:	c1 e0 03             	shl    $0x3,%eax
c0002f8a:	89 c2                	mov    %eax,%edx
c0002f8c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002f8f:	01 d0                	add    %edx,%eax
c0002f91:	83 c0 08             	add    $0x8,%eax
c0002f94:	83 ec 0c             	sub    $0xc,%esp
c0002f97:	50                   	push   %eax
c0002f98:	e8 fd 16 00 00       	call   c000469a <list_pop>
c0002f9d:	83 c4 10             	add    $0x10,%esp
c0002fa0:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/kernel/memory.c:409
		memset(b, 0, descs[desc_idx].block_size);
c0002fa3:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0002fa7:	89 d0                	mov    %edx,%eax
c0002fa9:	01 c0                	add    %eax,%eax
c0002fab:	01 d0                	add    %edx,%eax
c0002fad:	c1 e0 03             	shl    $0x3,%eax
c0002fb0:	89 c2                	mov    %eax,%edx
c0002fb2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002fb5:	01 d0                	add    %edx,%eax
c0002fb7:	8b 00                	mov    (%eax),%eax
c0002fb9:	83 ec 04             	sub    $0x4,%esp
c0002fbc:	50                   	push   %eax
c0002fbd:	6a 00                	push   $0x0
c0002fbf:	ff 75 cc             	pushl  -0x34(%ebp)
c0002fc2:	e8 fc 07 00 00       	call   c00037c3 <memset>
c0002fc7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:411

		a = block2arena(b);	// 获取内存块b所在的arena
c0002fca:	83 ec 0c             	sub    $0xc,%esp
c0002fcd:	ff 75 cc             	pushl  -0x34(%ebp)
c0002fd0:	e8 ea fc ff ff       	call   c0002cbf <block2arena>
c0002fd5:	83 c4 10             	add    $0x10,%esp
c0002fd8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/kernel/memory.c:412
		a->cnt--;			// 将此arena中的空闲内存块数减1
c0002fdb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002fde:	8b 40 04             	mov    0x4(%eax),%eax
c0002fe1:	8d 50 ff             	lea    -0x1(%eax),%edx
c0002fe4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002fe7:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/kernel/memory.c:414

		lock_release(&mem_pool->lock);
c0002fea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002fed:	83 c0 10             	add    $0x10,%eax
c0002ff0:	83 ec 0c             	sub    $0xc,%esp
c0002ff3:	50                   	push   %eax
c0002ff4:	e8 fd 1a 00 00       	call   c0004af6 <lock_release>
c0002ff9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:415
		return (void*)b;
c0002ffc:	8b 45 cc             	mov    -0x34(%ebp),%eax
/work/x86_os_my/kernel/memory.c:417
	}
}
c0002fff:	c9                   	leave  
c0003000:	c3                   	ret    

c0003001 <pfree>:
pfree():
/work/x86_os_my/kernel/memory.c:422

/* 将物理地址pg_phy_addr回收到物理内存池
 * 清理物理地址池位图
 */
void pfree(uint32_t pg_phy_addr) {
c0003001:	55                   	push   %ebp
c0003002:	89 e5                	mov    %esp,%ebp
c0003004:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:424
	struct pool* mem_pool;
	uint32_t bit_idx = 0;
c0003007:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:425
	if (pg_phy_addr >= user_pool.phy_addr_start) {	// 用户物理内存池
c000300e:	a1 68 10 01 c0       	mov    0xc0011068,%eax
c0003013:	3b 45 08             	cmp    0x8(%ebp),%eax
c0003016:	77 1b                	ja     c0003033 <pfree+0x32>
/work/x86_os_my/kernel/memory.c:426
		mem_pool = &user_pool;
c0003018:	c7 45 f4 60 10 01 c0 	movl   $0xc0011060,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:427
		bit_idx = (pg_phy_addr - user_pool.phy_addr_start) / PG_SIZE;
c000301f:	a1 68 10 01 c0       	mov    0xc0011068,%eax
c0003024:	8b 55 08             	mov    0x8(%ebp),%edx
c0003027:	29 c2                	sub    %eax,%edx
c0003029:	89 d0                	mov    %edx,%eax
c000302b:	c1 e8 0c             	shr    $0xc,%eax
c000302e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0003031:	eb 19                	jmp    c000304c <pfree+0x4b>
/work/x86_os_my/kernel/memory.c:429
	} else {	// 内核物理内存池
		mem_pool = &kernel_pool;
c0003033:	c7 45 f4 60 11 01 c0 	movl   $0xc0011160,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:430
		bit_idx = (pg_phy_addr - kernel_pool.phy_addr_start) / PG_SIZE;
c000303a:	a1 68 11 01 c0       	mov    0xc0011168,%eax
c000303f:	8b 55 08             	mov    0x8(%ebp),%edx
c0003042:	29 c2                	sub    %eax,%edx
c0003044:	89 d0                	mov    %edx,%eax
c0003046:	c1 e8 0c             	shr    $0xc,%eax
c0003049:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:432
	}
	bitmap_set(&mem_pool->pool_bitmap, bit_idx, 0);	// 将位图中该位清0
c000304c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000304f:	83 ec 04             	sub    $0x4,%esp
c0003052:	6a 00                	push   $0x0
c0003054:	ff 75 f0             	pushl  -0x10(%ebp)
c0003057:	50                   	push   %eax
c0003058:	e8 32 f5 ff ff       	call   c000258f <bitmap_set>
c000305d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:433
}
c0003060:	90                   	nop
c0003061:	c9                   	leave  
c0003062:	c3                   	ret    

c0003063 <page_table_pte_remove>:
page_table_pte_remove():
/work/x86_os_my/kernel/memory.c:436

/* 去掉页表中虚拟地址vaddr的映射,只去掉vaddr对应的pte */
static void page_table_pte_remove(uint32_t vaddr) {
c0003063:	55                   	push   %ebp
c0003064:	89 e5                	mov    %esp,%ebp
c0003066:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/memory.c:437
	uint32_t* pte = pte_ptr(vaddr);
c0003069:	8b 45 08             	mov    0x8(%ebp),%eax
c000306c:	50                   	push   %eax
c000306d:	e8 e4 f6 ff ff       	call   c0002756 <pte_ptr>
c0003072:	83 c4 04             	add    $0x4,%esp
c0003075:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/kernel/memory.c:438
	*pte &= ~PG_P_1;	// 将页表项pte的P位置0
c0003078:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000307b:	8b 00                	mov    (%eax),%eax
c000307d:	83 e0 fe             	and    $0xfffffffe,%eax
c0003080:	89 c2                	mov    %eax,%edx
c0003082:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003085:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/kernel/memory.c:439
	asm volatile ("invlpg %0"::"m" (vaddr):"memory");	//更新tlb
c0003087:	0f 01 7d 08          	invlpg 0x8(%ebp)
/work/x86_os_my/kernel/memory.c:442
	/*更新 TLB 有两种方式，一是用 invlpg 指令更新单条虚拟地址条目，
	另外一个是重新加载 cr3 寄存器，这将直接清空 TLB，相当于更新整个页表。*/
}
c000308b:	90                   	nop
c000308c:	c9                   	leave  
c000308d:	c3                   	ret    

c000308e <vaddr_remove>:
vaddr_remove():
/work/x86_os_my/kernel/memory.c:447

/* 在虚拟地址池中释放以_vaddr起始的连续pg_cnt个虚拟页地址
 * 清理虚拟地址池位图
 */
static void vaddr_remove(enum pool_flags pf, void* _vaddr, uint32_t pg_cnt) {
c000308e:	55                   	push   %ebp
c000308f:	89 e5                	mov    %esp,%ebp
c0003091:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:448
	uint32_t bit_idx_start = 0, vaddr = (uint32_t)_vaddr, cnt = 0;
c0003094:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c000309b:	8b 45 0c             	mov    0xc(%ebp),%eax
c000309e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c00030a1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:450

	if (pf == PF_KERNEL) {	// 内核虚拟内存池
c00030a8:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c00030ac:	75 3f                	jne    c00030ed <vaddr_remove+0x5f>
/work/x86_os_my/kernel/memory.c:451
		bit_idx_start = (vaddr - kernel_vaddr.vaddr_start) / PG_SIZE;
c00030ae:	a1 50 11 01 c0       	mov    0xc0011150,%eax
c00030b3:	8b 55 ec             	mov    -0x14(%ebp),%edx
c00030b6:	29 c2                	sub    %eax,%edx
c00030b8:	89 d0                	mov    %edx,%eax
c00030ba:	c1 e8 0c             	shr    $0xc,%eax
c00030bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:452
		while(cnt < pg_cnt) {
c00030c0:	eb 21                	jmp    c00030e3 <vaddr_remove+0x55>
/work/x86_os_my/kernel/memory.c:453
			bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
c00030c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00030c5:	8d 50 01             	lea    0x1(%eax),%edx
c00030c8:	89 55 f4             	mov    %edx,-0xc(%ebp)
c00030cb:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00030ce:	01 d0                	add    %edx,%eax
c00030d0:	83 ec 04             	sub    $0x4,%esp
c00030d3:	6a 00                	push   $0x0
c00030d5:	50                   	push   %eax
c00030d6:	68 48 11 01 c0       	push   $0xc0011148
c00030db:	e8 af f4 ff ff       	call   c000258f <bitmap_set>
c00030e0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:452
static void vaddr_remove(enum pool_flags pf, void* _vaddr, uint32_t pg_cnt) {
	uint32_t bit_idx_start = 0, vaddr = (uint32_t)_vaddr, cnt = 0;

	if (pf == PF_KERNEL) {	// 内核虚拟内存池
		bit_idx_start = (vaddr - kernel_vaddr.vaddr_start) / PG_SIZE;
		while(cnt < pg_cnt) {
c00030e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00030e6:	3b 45 10             	cmp    0x10(%ebp),%eax
c00030e9:	72 d7                	jb     c00030c2 <vaddr_remove+0x34>
/work/x86_os_my/kernel/memory.c:462
		bit_idx_start = (vaddr - cur_thread->userprog_vaddr.vaddr_start) / PG_SIZE;
		while(cnt < pg_cnt) {
			bitmap_set(&cur_thread->userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
		}
	}
}
c00030eb:	eb 48                	jmp    c0003135 <vaddr_remove+0xa7>
/work/x86_os_my/kernel/memory.c:456
		bit_idx_start = (vaddr - kernel_vaddr.vaddr_start) / PG_SIZE;
		while(cnt < pg_cnt) {
			bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
		}
	} else {	// 用户虚拟内存池
		struct task_struct* cur_thread = running_thread();
c00030ed:	e8 b8 0a 00 00       	call   c0003baa <running_thread>
c00030f2:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:457
		bit_idx_start = (vaddr - cur_thread->userprog_vaddr.vaddr_start) / PG_SIZE;
c00030f5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00030f8:	8b 40 60             	mov    0x60(%eax),%eax
c00030fb:	8b 55 ec             	mov    -0x14(%ebp),%edx
c00030fe:	29 c2                	sub    %eax,%edx
c0003100:	89 d0                	mov    %edx,%eax
c0003102:	c1 e8 0c             	shr    $0xc,%eax
c0003105:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:458
		while(cnt < pg_cnt) {
c0003108:	eb 23                	jmp    c000312d <vaddr_remove+0x9f>
/work/x86_os_my/kernel/memory.c:459
			bitmap_set(&cur_thread->userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
c000310a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000310d:	8d 50 01             	lea    0x1(%eax),%edx
c0003110:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0003113:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0003116:	01 c2                	add    %eax,%edx
c0003118:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000311b:	83 c0 58             	add    $0x58,%eax
c000311e:	83 ec 04             	sub    $0x4,%esp
c0003121:	6a 00                	push   $0x0
c0003123:	52                   	push   %edx
c0003124:	50                   	push   %eax
c0003125:	e8 65 f4 ff ff       	call   c000258f <bitmap_set>
c000312a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:458
			bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
		}
	} else {	// 用户虚拟内存池
		struct task_struct* cur_thread = running_thread();
		bit_idx_start = (vaddr - cur_thread->userprog_vaddr.vaddr_start) / PG_SIZE;
		while(cnt < pg_cnt) {
c000312d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003130:	3b 45 10             	cmp    0x10(%ebp),%eax
c0003133:	72 d5                	jb     c000310a <vaddr_remove+0x7c>
/work/x86_os_my/kernel/memory.c:462
			bitmap_set(&cur_thread->userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
		}
	}
}
c0003135:	90                   	nop
c0003136:	c9                   	leave  
c0003137:	c3                   	ret    

c0003138 <mfree_page>:
mfree_page():
/work/x86_os_my/kernel/memory.c:465

/* 释放以虚拟地址vaddr为起始的cnt个物理页框 */
void mfree_page(enum pool_flags pf, void* _vaddr, uint32_t pg_cnt) {
c0003138:	55                   	push   %ebp
c0003139:	89 e5                	mov    %esp,%ebp
c000313b:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:467
	uint32_t pg_phy_addr;
	uint32_t vaddr = (int32_t)_vaddr, page_cnt = 0;
c000313e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003141:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0003144:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:468
	ASSERT(pg_cnt >=1 && vaddr % PG_SIZE == 0);
c000314b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c000314f:	74 0c                	je     c000315d <mfree_page+0x25>
/work/x86_os_my/kernel/memory.c:468 (discriminator 1)
c0003151:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003154:	25 ff 0f 00 00       	and    $0xfff,%eax
c0003159:	85 c0                	test   %eax,%eax
c000315b:	74 1c                	je     c0003179 <mfree_page+0x41>
/work/x86_os_my/kernel/memory.c:468 (discriminator 3)
c000315d:	68 dc c1 00 c0       	push   $0xc000c1dc
c0003162:	68 78 c4 00 c0       	push   $0xc000c478
c0003167:	68 d4 01 00 00       	push   $0x1d4
c000316c:	68 ff c0 00 c0       	push   $0xc000c0ff
c0003171:	e8 ab f1 ff ff       	call   c0002321 <panic_spin>
c0003176:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:469
	pg_phy_addr = addr_v2p(vaddr);
c0003179:	83 ec 0c             	sub    $0xc,%esp
c000317c:	ff 75 f4             	pushl  -0xc(%ebp)
c000317f:	e8 f5 fa ff ff       	call   c0002c79 <addr_v2p>
c0003184:	83 c4 10             	add    $0x10,%esp
c0003187:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:472

	/* 确保待释放的物理内存在低端1M+1k大小的页目录+1k大小的页表地址范围外【内核空间】 */
	ASSERT((pg_phy_addr % PG_SIZE) == 0 && pg_phy_addr >= 0x102000);
c000318a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000318d:	25 ff 0f 00 00       	and    $0xfff,%eax
c0003192:	85 c0                	test   %eax,%eax
c0003194:	75 09                	jne    c000319f <mfree_page+0x67>
/work/x86_os_my/kernel/memory.c:472 (discriminator 1)
c0003196:	81 7d ec ff 1f 10 00 	cmpl   $0x101fff,-0x14(%ebp)
c000319d:	77 1c                	ja     c00031bb <mfree_page+0x83>
/work/x86_os_my/kernel/memory.c:472 (discriminator 3)
c000319f:	68 00 c2 00 c0       	push   $0xc000c200
c00031a4:	68 78 c4 00 c0       	push   $0xc000c478
c00031a9:	68 d8 01 00 00       	push   $0x1d8
c00031ae:	68 ff c0 00 c0       	push   $0xc000c0ff
c00031b3:	e8 69 f1 ff ff       	call   c0002321 <panic_spin>
c00031b8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:476

	/* 判断pg_phy_addr属于用户物理内存池还是内核物理内存池 */
	/* 位于user_pool内存池 */
	if (pg_phy_addr >= user_pool.phy_addr_start) {
c00031bb:	a1 68 10 01 c0       	mov    0xc0011068,%eax
c00031c0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c00031c3:	0f 87 94 00 00 00    	ja     c000325d <mfree_page+0x125>
/work/x86_os_my/kernel/memory.c:477
		vaddr -= PG_SIZE;
c00031c9:	81 6d f4 00 10 00 00 	subl   $0x1000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:478
		while (page_cnt < pg_cnt) {
c00031d0:	eb 6a                	jmp    c000323c <mfree_page+0x104>
/work/x86_os_my/kernel/memory.c:479
			vaddr += PG_SIZE;
c00031d2:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:480
			pg_phy_addr = addr_v2p(vaddr);
c00031d9:	83 ec 0c             	sub    $0xc,%esp
c00031dc:	ff 75 f4             	pushl  -0xc(%ebp)
c00031df:	e8 95 fa ff ff       	call   c0002c79 <addr_v2p>
c00031e4:	83 c4 10             	add    $0x10,%esp
c00031e7:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:483

			/* 确保物理地址属于用户物理内存池 */
			ASSERT((pg_phy_addr % PG_SIZE) == 0 && pg_phy_addr >= user_pool.phy_addr_start);
c00031ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00031ed:	25 ff 0f 00 00       	and    $0xfff,%eax
c00031f2:	85 c0                	test   %eax,%eax
c00031f4:	75 0a                	jne    c0003200 <mfree_page+0xc8>
/work/x86_os_my/kernel/memory.c:483 (discriminator 1)
c00031f6:	a1 68 10 01 c0       	mov    0xc0011068,%eax
c00031fb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c00031fe:	76 1c                	jbe    c000321c <mfree_page+0xe4>
/work/x86_os_my/kernel/memory.c:483 (discriminator 3)
c0003200:	68 38 c2 00 c0       	push   $0xc000c238
c0003205:	68 78 c4 00 c0       	push   $0xc000c478
c000320a:	68 e3 01 00 00       	push   $0x1e3
c000320f:	68 ff c0 00 c0       	push   $0xc000c0ff
c0003214:	e8 08 f1 ff ff       	call   c0002321 <panic_spin>
c0003219:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:486

			/* 先将对应的物理页框归还到内存池 */
			pfree(pg_phy_addr);
c000321c:	83 ec 0c             	sub    $0xc,%esp
c000321f:	ff 75 ec             	pushl  -0x14(%ebp)
c0003222:	e8 da fd ff ff       	call   c0003001 <pfree>
c0003227:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:489

			/* 再从页表中清除此虚拟地址所在的页表项pte */
			page_table_pte_remove(vaddr);
c000322a:	83 ec 0c             	sub    $0xc,%esp
c000322d:	ff 75 f4             	pushl  -0xc(%ebp)
c0003230:	e8 2e fe ff ff       	call   c0003063 <page_table_pte_remove>
c0003235:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:491

			page_cnt++;
c0003238:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:478

	/* 判断pg_phy_addr属于用户物理内存池还是内核物理内存池 */
	/* 位于user_pool内存池 */
	if (pg_phy_addr >= user_pool.phy_addr_start) {
		vaddr -= PG_SIZE;
		while (page_cnt < pg_cnt) {
c000323c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000323f:	3b 45 10             	cmp    0x10(%ebp),%eax
c0003242:	72 8e                	jb     c00031d2 <mfree_page+0x9a>
/work/x86_os_my/kernel/memory.c:494
			page_table_pte_remove(vaddr);

			page_cnt++;
		}
		/* 清空虚拟地址的位图中的相应位 */
		vaddr_remove(pf, _vaddr, pg_cnt);
c0003244:	83 ec 04             	sub    $0x4,%esp
c0003247:	ff 75 10             	pushl  0x10(%ebp)
c000324a:	ff 75 0c             	pushl  0xc(%ebp)
c000324d:	ff 75 08             	pushl  0x8(%ebp)
c0003250:	e8 39 fe ff ff       	call   c000308e <vaddr_remove>
c0003255:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:518
			page_cnt++;
		}
		/* 清空虚拟地址的位图中的相应位 */
		vaddr_remove(pf, _vaddr, pg_cnt);
	}
}
c0003258:	e9 99 00 00 00       	jmp    c00032f6 <mfree_page+0x1be>
/work/x86_os_my/kernel/memory.c:498
		/* 清空虚拟地址的位图中的相应位 */
		vaddr_remove(pf, _vaddr, pg_cnt);

	} else {
		/* 位于kernel_pool内存池 */
		vaddr -= PG_SIZE;
c000325d:	81 6d f4 00 10 00 00 	subl   $0x1000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:499
		while (page_cnt < pg_cnt) {
c0003264:	eb 74                	jmp    c00032da <mfree_page+0x1a2>
/work/x86_os_my/kernel/memory.c:500
			vaddr += PG_SIZE;
c0003266:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:501
			pg_phy_addr = addr_v2p(vaddr);
c000326d:	83 ec 0c             	sub    $0xc,%esp
c0003270:	ff 75 f4             	pushl  -0xc(%ebp)
c0003273:	e8 01 fa ff ff       	call   c0002c79 <addr_v2p>
c0003278:	83 c4 10             	add    $0x10,%esp
c000327b:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:504

			/* 确保待释放的物理内存只属于内核物理内存池 */
			ASSERT((pg_phy_addr % PG_SIZE) == 0 && pg_phy_addr >= kernel_pool.phy_addr_start && \
c000327e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0003281:	25 ff 0f 00 00       	and    $0xfff,%eax
c0003286:	85 c0                	test   %eax,%eax
c0003288:	75 14                	jne    c000329e <mfree_page+0x166>
/work/x86_os_my/kernel/memory.c:504 (discriminator 1)
c000328a:	a1 68 11 01 c0       	mov    0xc0011168,%eax
c000328f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0003292:	77 0a                	ja     c000329e <mfree_page+0x166>
/work/x86_os_my/kernel/memory.c:504 (discriminator 3)
c0003294:	a1 68 10 01 c0       	mov    0xc0011068,%eax
c0003299:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c000329c:	77 1c                	ja     c00032ba <mfree_page+0x182>
/work/x86_os_my/kernel/memory.c:504 (discriminator 5)
c000329e:	68 80 c2 00 c0       	push   $0xc000c280
c00032a3:	68 78 c4 00 c0       	push   $0xc000c478
c00032a8:	68 f9 01 00 00       	push   $0x1f9
c00032ad:	68 ff c0 00 c0       	push   $0xc000c0ff
c00032b2:	e8 6a f0 ff ff       	call   c0002321 <panic_spin>
c00032b7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:508
					pg_phy_addr < user_pool.phy_addr_start);

			/* 先将对应的物理页框归还到内存池 */
			pfree(pg_phy_addr);
c00032ba:	83 ec 0c             	sub    $0xc,%esp
c00032bd:	ff 75 ec             	pushl  -0x14(%ebp)
c00032c0:	e8 3c fd ff ff       	call   c0003001 <pfree>
c00032c5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:511

			/* 再从页表中清除此虚拟地址所在的页表项pte */
			page_table_pte_remove(vaddr);
c00032c8:	83 ec 0c             	sub    $0xc,%esp
c00032cb:	ff 75 f4             	pushl  -0xc(%ebp)
c00032ce:	e8 90 fd ff ff       	call   c0003063 <page_table_pte_remove>
c00032d3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:513

			page_cnt++;
c00032d6:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:499
		vaddr_remove(pf, _vaddr, pg_cnt);

	} else {
		/* 位于kernel_pool内存池 */
		vaddr -= PG_SIZE;
		while (page_cnt < pg_cnt) {
c00032da:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00032dd:	3b 45 10             	cmp    0x10(%ebp),%eax
c00032e0:	72 84                	jb     c0003266 <mfree_page+0x12e>
/work/x86_os_my/kernel/memory.c:516
			page_table_pte_remove(vaddr);

			page_cnt++;
		}
		/* 清空虚拟地址的位图中的相应位 */
		vaddr_remove(pf, _vaddr, pg_cnt);
c00032e2:	83 ec 04             	sub    $0x4,%esp
c00032e5:	ff 75 10             	pushl  0x10(%ebp)
c00032e8:	ff 75 0c             	pushl  0xc(%ebp)
c00032eb:	ff 75 08             	pushl  0x8(%ebp)
c00032ee:	e8 9b fd ff ff       	call   c000308e <vaddr_remove>
c00032f3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:518
	}
}
c00032f6:	90                   	nop
c00032f7:	c9                   	leave  
c00032f8:	c3                   	ret    

c00032f9 <sys_free>:
sys_free():
/work/x86_os_my/kernel/memory.c:521

/* 回收内存ptr */
void sys_free(void* ptr) {
c00032f9:	55                   	push   %ebp
c00032fa:	89 e5                	mov    %esp,%ebp
c00032fc:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/kernel/memory.c:522
	ASSERT(ptr != NULL);
c00032ff:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003303:	75 1c                	jne    c0003321 <sys_free+0x28>
/work/x86_os_my/kernel/memory.c:522 (discriminator 1)
c0003305:	68 f4 c2 00 c0       	push   $0xc000c2f4
c000330a:	68 84 c4 00 c0       	push   $0xc000c484
c000330f:	68 0a 02 00 00       	push   $0x20a
c0003314:	68 ff c0 00 c0       	push   $0xc000c0ff
c0003319:	e8 03 f0 ff ff       	call   c0002321 <panic_spin>
c000331e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:523
	if (ptr != NULL) {
c0003321:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003325:	0f 84 b2 01 00 00    	je     c00034dd <sys_free+0x1e4>
/work/x86_os_my/kernel/memory.c:528
		enum pool_flags PF;
		struct pool* mem_pool;

		/* 判断是线程还是进程 */
		if (running_thread()->pgdir == NULL) {
c000332b:	e8 7a 08 00 00       	call   c0003baa <running_thread>
c0003330:	8b 40 54             	mov    0x54(%eax),%eax
c0003333:	85 c0                	test   %eax,%eax
c0003335:	75 36                	jne    c000336d <sys_free+0x74>
/work/x86_os_my/kernel/memory.c:529
			ASSERT((uint32_t)ptr >= K_HEAP_START);
c0003337:	8b 45 08             	mov    0x8(%ebp),%eax
c000333a:	3d ff ff 0f c0       	cmp    $0xc00fffff,%eax
c000333f:	77 1c                	ja     c000335d <sys_free+0x64>
/work/x86_os_my/kernel/memory.c:529 (discriminator 1)
c0003341:	68 00 c3 00 c0       	push   $0xc000c300
c0003346:	68 84 c4 00 c0       	push   $0xc000c484
c000334b:	68 11 02 00 00       	push   $0x211
c0003350:	68 ff c0 00 c0       	push   $0xc000c0ff
c0003355:	e8 c7 ef ff ff       	call   c0002321 <panic_spin>
c000335a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:530
			PF = PF_KERNEL;
c000335d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:531
			mem_pool = &kernel_pool;
c0003364:	c7 45 f0 60 11 01 c0 	movl   $0xc0011160,-0x10(%ebp)
c000336b:	eb 0e                	jmp    c000337b <sys_free+0x82>
/work/x86_os_my/kernel/memory.c:533
		} else {
			PF = PF_USER;
c000336d:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:534
			mem_pool = &user_pool;
c0003374:	c7 45 f0 60 10 01 c0 	movl   $0xc0011060,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:537
		}

		lock_acquire(&mem_pool->lock);
c000337b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000337e:	83 c0 10             	add    $0x10,%eax
c0003381:	83 ec 0c             	sub    $0xc,%esp
c0003384:	50                   	push   %eax
c0003385:	e8 f5 16 00 00       	call   c0004a7f <lock_acquire>
c000338a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:538
		struct mem_block* b = ptr;
c000338d:	8b 45 08             	mov    0x8(%ebp),%eax
c0003390:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:539
		struct arena* a = block2arena(b);			// 把mem_block转换成arena,获取元信息
c0003393:	83 ec 0c             	sub    $0xc,%esp
c0003396:	ff 75 e8             	pushl  -0x18(%ebp)
c0003399:	e8 21 f9 ff ff       	call   c0002cbf <block2arena>
c000339e:	83 c4 10             	add    $0x10,%esp
c00033a1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/kernel/memory.c:540
		ASSERT(a->large == 0 || a->large == 1);
c00033a4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00033a7:	8b 40 08             	mov    0x8(%eax),%eax
c00033aa:	85 c0                	test   %eax,%eax
c00033ac:	74 27                	je     c00033d5 <sys_free+0xdc>
/work/x86_os_my/kernel/memory.c:540 (discriminator 1)
c00033ae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00033b1:	8b 40 08             	mov    0x8(%eax),%eax
c00033b4:	83 f8 01             	cmp    $0x1,%eax
c00033b7:	74 1c                	je     c00033d5 <sys_free+0xdc>
/work/x86_os_my/kernel/memory.c:540 (discriminator 2)
c00033b9:	68 20 c3 00 c0       	push   $0xc000c320
c00033be:	68 84 c4 00 c0       	push   $0xc000c484
c00033c3:	68 1c 02 00 00       	push   $0x21c
c00033c8:	68 ff c0 00 c0       	push   $0xc000c0ff
c00033cd:	e8 4f ef ff ff       	call   c0002321 <panic_spin>
c00033d2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:541
		if (a->desc == NULL && a->large == true) {	// 大于1024的内存
c00033d5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00033d8:	8b 00                	mov    (%eax),%eax
c00033da:	85 c0                	test   %eax,%eax
c00033dc:	75 28                	jne    c0003406 <sys_free+0x10d>
/work/x86_os_my/kernel/memory.c:541 (discriminator 1)
c00033de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00033e1:	8b 40 08             	mov    0x8(%eax),%eax
c00033e4:	83 f8 01             	cmp    $0x1,%eax
c00033e7:	75 1d                	jne    c0003406 <sys_free+0x10d>
/work/x86_os_my/kernel/memory.c:542
			mfree_page(PF, a, a->cnt);
c00033e9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00033ec:	8b 40 04             	mov    0x4(%eax),%eax
c00033ef:	83 ec 04             	sub    $0x4,%esp
c00033f2:	50                   	push   %eax
c00033f3:	ff 75 e4             	pushl  -0x1c(%ebp)
c00033f6:	ff 75 f4             	pushl  -0xc(%ebp)
c00033f9:	e8 3a fd ff ff       	call   c0003138 <mfree_page>
c00033fe:	83 c4 10             	add    $0x10,%esp
c0003401:	e9 c5 00 00 00       	jmp    c00034cb <sys_free+0x1d2>
/work/x86_os_my/kernel/memory.c:546
		} else {									// 小于等于1024的内存块
			/* 先将内存块回收到free_list */
			// &b->free_elem == &b
			list_append(&a->desc->free_list, &b->free_elem);
c0003406:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0003409:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c000340c:	8b 12                	mov    (%edx),%edx
c000340e:	83 c2 08             	add    $0x8,%edx
c0003411:	83 ec 08             	sub    $0x8,%esp
c0003414:	50                   	push   %eax
c0003415:	52                   	push   %edx
c0003416:	e8 27 12 00 00       	call   c0004642 <list_append>
c000341b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:549

			/* 再判断此arena中的内存块是否都是空闲,如果是就释放arena */
			if (++a->cnt == a->desc->blocks_per_arena) {
c000341e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0003421:	8b 40 04             	mov    0x4(%eax),%eax
c0003424:	8d 50 01             	lea    0x1(%eax),%edx
c0003427:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000342a:	89 50 04             	mov    %edx,0x4(%eax)
c000342d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0003430:	8b 50 04             	mov    0x4(%eax),%edx
c0003433:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0003436:	8b 00                	mov    (%eax),%eax
c0003438:	8b 40 04             	mov    0x4(%eax),%eax
c000343b:	39 c2                	cmp    %eax,%edx
c000343d:	0f 85 88 00 00 00    	jne    c00034cb <sys_free+0x1d2>
/work/x86_os_my/kernel/memory.c:551
				uint32_t block_idx;
				for (block_idx = 0; block_idx < a->desc->blocks_per_arena; block_idx++) {
c0003443:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c000344a:	eb 5f                	jmp    c00034ab <sys_free+0x1b2>
/work/x86_os_my/kernel/memory.c:552
					struct mem_block*  b = arena2block(a, block_idx);
c000344c:	83 ec 08             	sub    $0x8,%esp
c000344f:	ff 75 ec             	pushl  -0x14(%ebp)
c0003452:	ff 75 e4             	pushl  -0x1c(%ebp)
c0003455:	e8 4b f8 ff ff       	call   c0002ca5 <arena2block>
c000345a:	83 c4 10             	add    $0x10,%esp
c000345d:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/kernel/memory.c:553
					ASSERT(elem_find(&a->desc->free_list, &b->free_elem));
c0003460:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0003463:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0003466:	8b 12                	mov    (%edx),%edx
c0003468:	83 c2 08             	add    $0x8,%edx
c000346b:	83 ec 08             	sub    $0x8,%esp
c000346e:	50                   	push   %eax
c000346f:	52                   	push   %edx
c0003470:	e8 47 12 00 00       	call   c00046bc <elem_find>
c0003475:	83 c4 10             	add    $0x10,%esp
c0003478:	85 c0                	test   %eax,%eax
c000347a:	75 1c                	jne    c0003498 <sys_free+0x19f>
/work/x86_os_my/kernel/memory.c:553 (discriminator 1)
c000347c:	68 40 c3 00 c0       	push   $0xc000c340
c0003481:	68 84 c4 00 c0       	push   $0xc000c484
c0003486:	68 29 02 00 00       	push   $0x229
c000348b:	68 ff c0 00 c0       	push   $0xc000c0ff
c0003490:	e8 8c ee ff ff       	call   c0002321 <panic_spin>
c0003495:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:554 (discriminator 2)
					list_remove(&b->free_elem);
c0003498:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000349b:	83 ec 0c             	sub    $0xc,%esp
c000349e:	50                   	push   %eax
c000349f:	e8 bc 11 00 00       	call   c0004660 <list_remove>
c00034a4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:551 (discriminator 2)
			list_append(&a->desc->free_list, &b->free_elem);

			/* 再判断此arena中的内存块是否都是空闲,如果是就释放arena */
			if (++a->cnt == a->desc->blocks_per_arena) {
				uint32_t block_idx;
				for (block_idx = 0; block_idx < a->desc->blocks_per_arena; block_idx++) {
c00034a7:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:551 (discriminator 1)
c00034ab:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00034ae:	8b 00                	mov    (%eax),%eax
c00034b0:	8b 40 04             	mov    0x4(%eax),%eax
c00034b3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c00034b6:	77 94                	ja     c000344c <sys_free+0x153>
/work/x86_os_my/kernel/memory.c:556
					struct mem_block*  b = arena2block(a, block_idx);
					ASSERT(elem_find(&a->desc->free_list, &b->free_elem));
					list_remove(&b->free_elem);
				}
				mfree_page(PF, a, 1);
c00034b8:	83 ec 04             	sub    $0x4,%esp
c00034bb:	6a 01                	push   $0x1
c00034bd:	ff 75 e4             	pushl  -0x1c(%ebp)
c00034c0:	ff 75 f4             	pushl  -0xc(%ebp)
c00034c3:	e8 70 fc ff ff       	call   c0003138 <mfree_page>
c00034c8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:559
			}
		}
		lock_release(&mem_pool->lock);
c00034cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00034ce:	83 c0 10             	add    $0x10,%eax
c00034d1:	83 ec 0c             	sub    $0xc,%esp
c00034d4:	50                   	push   %eax
c00034d5:	e8 1c 16 00 00       	call   c0004af6 <lock_release>
c00034da:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:561
	}
}
c00034dd:	90                   	nop
c00034de:	c9                   	leave  
c00034df:	c3                   	ret    

c00034e0 <mem_pool_init>:
mem_pool_init():
/work/x86_os_my/kernel/memory.c:564

/* 初始化内存池 */
static void mem_pool_init(uint32_t all_mem) {
c00034e0:	55                   	push   %ebp
c00034e1:	89 e5                	mov    %esp,%ebp
c00034e3:	83 ec 38             	sub    $0x38,%esp
/work/x86_os_my/kernel/memory.c:565
	put_str("   mem_pool_init start\n");
c00034e6:	83 ec 0c             	sub    $0xc,%esp
c00034e9:	68 6e c3 00 c0       	push   $0xc000c36e
c00034ee:	e8 7d ec ff ff       	call   c0002170 <put_str>
c00034f3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:566
	uint32_t page_table_size = PG_SIZE * 256;		// 页表大小= 1页的页目录表+第0和第768个页目录项指向同一个页表+
c00034f6:	c7 45 f4 00 00 10 00 	movl   $0x100000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:568
													// 第769~1022个页目录项共指向254个页表,共256个页框
	uint32_t used_mem = page_table_size + 0x100000;	// 0x100000为低端1M内存
c00034fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003500:	05 00 00 10 00       	add    $0x100000,%eax
c0003505:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:569
	uint32_t free_mem = all_mem - used_mem;
c0003508:	8b 45 08             	mov    0x8(%ebp),%eax
c000350b:	2b 45 f0             	sub    -0x10(%ebp),%eax
c000350e:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:570
	uint16_t all_free_pages = free_mem / PG_SIZE;	// 1页为4k,不管总内存是不是4k的倍数,
c0003511:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0003514:	c1 e8 0c             	shr    $0xc,%eax
c0003517:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
/work/x86_os_my/kernel/memory.c:572
													// 对于以页为单位的内存分配策略，不足1页的内存不用考虑了。
	uint16_t kernel_free_pages = all_free_pages / 2;
c000351b:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c000351f:	66 d1 e8             	shr    %ax
c0003522:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:573
	uint16_t user_free_pages = all_free_pages - kernel_free_pages;
c0003526:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c000352a:	66 2b 45 e8          	sub    -0x18(%ebp),%ax
c000352e:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
/work/x86_os_my/kernel/memory.c:577

	/* 为简化位图操作，余数不处理，坏处是这样做会丢内存。
	好处是不用做内存的越界检查,因为位图表示的内存少于实际物理内存*/
	uint32_t kbm_length = kernel_free_pages / 8;	// Kernel BitMap的长度,位图中的一位表示一页,以字节为单位
c0003532:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
c0003536:	66 c1 e8 03          	shr    $0x3,%ax
c000353a:	0f b7 c0             	movzwl %ax,%eax
c000353d:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/kernel/memory.c:578
	uint32_t ubm_length = user_free_pages / 8;		// User BitMap的长度.
c0003540:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0003544:	66 c1 e8 03          	shr    $0x3,%ax
c0003548:	0f b7 c0             	movzwl %ax,%eax
c000354b:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/kernel/memory.c:580

	uint32_t kp_start = used_mem;								// Kernel Pool start,内核内存池的起始地址
c000354e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003551:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/kernel/memory.c:581
	uint32_t up_start = kp_start + kernel_free_pages * PG_SIZE;	// User Pool start,用户内存池的起始地址
c0003554:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
c0003558:	c1 e0 0c             	shl    $0xc,%eax
c000355b:	89 c2                	mov    %eax,%edx
c000355d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0003560:	01 d0                	add    %edx,%eax
c0003562:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/kernel/memory.c:583

	kernel_pool.phy_addr_start = kp_start;
c0003565:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0003568:	a3 68 11 01 c0       	mov    %eax,0xc0011168
/work/x86_os_my/kernel/memory.c:584
	user_pool.phy_addr_start   = up_start;
c000356d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0003570:	a3 68 10 01 c0       	mov    %eax,0xc0011068
/work/x86_os_my/kernel/memory.c:586

	kernel_pool.pool_size = kernel_free_pages * PG_SIZE;
c0003575:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
c0003579:	c1 e0 0c             	shl    $0xc,%eax
c000357c:	a3 6c 11 01 c0       	mov    %eax,0xc001116c
/work/x86_os_my/kernel/memory.c:587
	user_pool.pool_size	 = user_free_pages * PG_SIZE;
c0003581:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0003585:	c1 e0 0c             	shl    $0xc,%eax
c0003588:	a3 6c 10 01 c0       	mov    %eax,0xc001106c
/work/x86_os_my/kernel/memory.c:589

	kernel_pool.pool_bitmap.btmp_bytes_len = kbm_length;
c000358d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0003590:	a3 60 11 01 c0       	mov    %eax,0xc0011160
/work/x86_os_my/kernel/memory.c:590
	user_pool.pool_bitmap.btmp_bytes_len	  = ubm_length;
c0003595:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0003598:	a3 60 10 01 c0       	mov    %eax,0xc0011060
/work/x86_os_my/kernel/memory.c:599
	*	而我们需要根据总内存大小在运行时，计算出位图的数组需要多少字节。
	*   所以改为指定一块内存来生成位图.
	*   ************************************************/
	// 内核使用的最高地址是0xc009f000,这是主线程的栈地址.(内核的大小预计为70K左右)
	// 32M内存占用的位图是2k.内核内存池的位图先定在MEM_BITMAP_BASE(0xc009a000)处.
	kernel_pool.pool_bitmap.bits = (void*)MEM_BITMAP_BASE;
c000359d:	c7 05 64 11 01 c0 00 	movl   $0xc009a000,0xc0011164
c00035a4:	a0 09 c0 
/work/x86_os_my/kernel/memory.c:601
	/* 用户内存池的位图紧跟在内核内存池位图之后 */
	user_pool.pool_bitmap.bits = (void*)(MEM_BITMAP_BASE + kbm_length);
c00035a7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00035aa:	2d 00 60 f6 3f       	sub    $0x3ff66000,%eax
c00035af:	a3 64 10 01 c0       	mov    %eax,0xc0011064
/work/x86_os_my/kernel/memory.c:604
	
	/******************** 输出内存池信息 **********************/
	put_str("      kernel_pool_bitmap_start:");put_int((int)kernel_pool.pool_bitmap.bits);
c00035b4:	83 ec 0c             	sub    $0xc,%esp
c00035b7:	68 88 c3 00 c0       	push   $0xc000c388
c00035bc:	e8 af eb ff ff       	call   c0002170 <put_str>
c00035c1:	83 c4 10             	add    $0x10,%esp
c00035c4:	a1 64 11 01 c0       	mov    0xc0011164,%eax
c00035c9:	83 ec 0c             	sub    $0xc,%esp
c00035cc:	50                   	push   %eax
c00035cd:	e8 c8 ec ff ff       	call   c000229a <put_int>
c00035d2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:605
	put_str(" kernel_pool_phy_addr_start:");put_int(kernel_pool.phy_addr_start);
c00035d5:	83 ec 0c             	sub    $0xc,%esp
c00035d8:	68 a8 c3 00 c0       	push   $0xc000c3a8
c00035dd:	e8 8e eb ff ff       	call   c0002170 <put_str>
c00035e2:	83 c4 10             	add    $0x10,%esp
c00035e5:	a1 68 11 01 c0       	mov    0xc0011168,%eax
c00035ea:	83 ec 0c             	sub    $0xc,%esp
c00035ed:	50                   	push   %eax
c00035ee:	e8 a7 ec ff ff       	call   c000229a <put_int>
c00035f3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:606
	put_str("\n");
c00035f6:	83 ec 0c             	sub    $0xc,%esp
c00035f9:	68 c5 c3 00 c0       	push   $0xc000c3c5
c00035fe:	e8 6d eb ff ff       	call   c0002170 <put_str>
c0003603:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:607
	put_str("      user_pool_bitmap_start:");put_int((int)user_pool.pool_bitmap.bits);
c0003606:	83 ec 0c             	sub    $0xc,%esp
c0003609:	68 c7 c3 00 c0       	push   $0xc000c3c7
c000360e:	e8 5d eb ff ff       	call   c0002170 <put_str>
c0003613:	83 c4 10             	add    $0x10,%esp
c0003616:	a1 64 10 01 c0       	mov    0xc0011064,%eax
c000361b:	83 ec 0c             	sub    $0xc,%esp
c000361e:	50                   	push   %eax
c000361f:	e8 76 ec ff ff       	call   c000229a <put_int>
c0003624:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:608
	put_str(" user_pool_phy_addr_start:");put_int(user_pool.phy_addr_start);
c0003627:	83 ec 0c             	sub    $0xc,%esp
c000362a:	68 e5 c3 00 c0       	push   $0xc000c3e5
c000362f:	e8 3c eb ff ff       	call   c0002170 <put_str>
c0003634:	83 c4 10             	add    $0x10,%esp
c0003637:	a1 68 10 01 c0       	mov    0xc0011068,%eax
c000363c:	83 ec 0c             	sub    $0xc,%esp
c000363f:	50                   	push   %eax
c0003640:	e8 55 ec ff ff       	call   c000229a <put_int>
c0003645:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:609
	put_str("\n");
c0003648:	83 ec 0c             	sub    $0xc,%esp
c000364b:	68 c5 c3 00 c0       	push   $0xc000c3c5
c0003650:	e8 1b eb ff ff       	call   c0002170 <put_str>
c0003655:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:612

	/* 将位图置0*/
	bitmap_init(&kernel_pool.pool_bitmap);
c0003658:	83 ec 0c             	sub    $0xc,%esp
c000365b:	68 60 11 01 c0       	push   $0xc0011160
c0003660:	e8 92 ed ff ff       	call   c00023f7 <bitmap_init>
c0003665:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:613
	bitmap_init(&user_pool.pool_bitmap);
c0003668:	83 ec 0c             	sub    $0xc,%esp
c000366b:	68 60 10 01 c0       	push   $0xc0011060
c0003670:	e8 82 ed ff ff       	call   c00023f7 <bitmap_init>
c0003675:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:615

	lock_init(&kernel_pool.lock);
c0003678:	83 ec 0c             	sub    $0xc,%esp
c000367b:	68 70 11 01 c0       	push   $0xc0011170
c0003680:	e8 20 12 00 00       	call   c00048a5 <lock_init>
c0003685:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:616
	lock_init(&user_pool.lock);
c0003688:	83 ec 0c             	sub    $0xc,%esp
c000368b:	68 70 10 01 c0       	push   $0xc0011070
c0003690:	e8 10 12 00 00       	call   c00048a5 <lock_init>
c0003695:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:620
	
	/* 下面初始化内核虚拟地址的位图(bp_len + bits数组),按实际物理内存大小生成数组。*/
	// 用于维护内核堆的虚拟地址,所以要和内核内存池大小一致
	kernel_vaddr.vaddr_bitmap.btmp_bytes_len = kbm_length;
c0003698:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000369b:	a3 48 11 01 c0       	mov    %eax,0xc0011148
/work/x86_os_my/kernel/memory.c:622
	/* 位图的数组指向一块未使用的内存,目前定位在内核内存池和用户内存池之外*/
	kernel_vaddr.vaddr_bitmap.bits = (void*)(MEM_BITMAP_BASE + kbm_length + ubm_length);
c00036a0:	8b 55 e0             	mov    -0x20(%ebp),%edx
c00036a3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c00036a6:	01 d0                	add    %edx,%eax
c00036a8:	2d 00 60 f6 3f       	sub    $0x3ff66000,%eax
c00036ad:	a3 4c 11 01 c0       	mov    %eax,0xc001114c
/work/x86_os_my/kernel/memory.c:624

	kernel_vaddr.vaddr_start = K_HEAP_START;
c00036b2:	c7 05 50 11 01 c0 00 	movl   $0xc0100000,0xc0011150
c00036b9:	00 10 c0 
/work/x86_os_my/kernel/memory.c:625
	bitmap_init(&kernel_vaddr.vaddr_bitmap);
c00036bc:	83 ec 0c             	sub    $0xc,%esp
c00036bf:	68 48 11 01 c0       	push   $0xc0011148
c00036c4:	e8 2e ed ff ff       	call   c00023f7 <bitmap_init>
c00036c9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:626
	put_str("   mem_pool_init done\n");
c00036cc:	83 ec 0c             	sub    $0xc,%esp
c00036cf:	68 00 c4 00 c0       	push   $0xc000c400
c00036d4:	e8 97 ea ff ff       	call   c0002170 <put_str>
c00036d9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:627
}
c00036dc:	90                   	nop
c00036dd:	c9                   	leave  
c00036de:	c3                   	ret    

c00036df <block_desc_init>:
block_desc_init():
/work/x86_os_my/kernel/memory.c:630

/* 为malloc做准备 */
void block_desc_init(struct mem_block_desc* desc_array) {
c00036df:	55                   	push   %ebp
c00036e0:	89 e5                	mov    %esp,%ebp
c00036e2:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:631
   uint16_t desc_idx, block_size = 16;
c00036e5:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:634

   /* 初始化每个mem_block_desc描述符 */
   for (desc_idx = 0; desc_idx < DESC_CNT; desc_idx++) {
c00036eb:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c00036f1:	eb 75                	jmp    c0003768 <block_desc_init+0x89>
/work/x86_os_my/kernel/memory.c:635 (discriminator 3)
      desc_array[desc_idx].block_size = block_size;
c00036f3:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c00036f7:	89 d0                	mov    %edx,%eax
c00036f9:	01 c0                	add    %eax,%eax
c00036fb:	01 d0                	add    %edx,%eax
c00036fd:	c1 e0 03             	shl    $0x3,%eax
c0003700:	89 c2                	mov    %eax,%edx
c0003702:	8b 45 08             	mov    0x8(%ebp),%eax
c0003705:	01 c2                	add    %eax,%edx
c0003707:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c000370b:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/kernel/memory.c:638 (discriminator 3)

      /* 初始化arena中的内存块数量【注意计算方法】 */
      desc_array[desc_idx].blocks_per_arena = (PG_SIZE - sizeof(struct arena)) / block_size;
c000370d:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0003711:	89 d0                	mov    %edx,%eax
c0003713:	01 c0                	add    %eax,%eax
c0003715:	01 d0                	add    %edx,%eax
c0003717:	c1 e0 03             	shl    $0x3,%eax
c000371a:	89 c2                	mov    %eax,%edx
c000371c:	8b 45 08             	mov    0x8(%ebp),%eax
c000371f:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
c0003722:	b8 f4 0f 00 00       	mov    $0xff4,%eax
c0003727:	ba 00 00 00 00       	mov    $0x0,%edx
c000372c:	66 f7 75 f4          	divw   -0xc(%ebp)
c0003730:	0f b7 c0             	movzwl %ax,%eax
c0003733:	89 41 04             	mov    %eax,0x4(%ecx)
/work/x86_os_my/kernel/memory.c:640 (discriminator 3)

      list_init(&desc_array[desc_idx].free_list);
c0003736:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c000373a:	89 d0                	mov    %edx,%eax
c000373c:	01 c0                	add    %eax,%eax
c000373e:	01 d0                	add    %edx,%eax
c0003740:	c1 e0 03             	shl    $0x3,%eax
c0003743:	89 c2                	mov    %eax,%edx
c0003745:	8b 45 08             	mov    0x8(%ebp),%eax
c0003748:	01 d0                	add    %edx,%eax
c000374a:	83 c0 08             	add    $0x8,%eax
c000374d:	83 ec 0c             	sub    $0xc,%esp
c0003750:	50                   	push   %eax
c0003751:	e8 5b 0e 00 00       	call   c00045b1 <list_init>
c0003756:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:642 (discriminator 3)

      block_size *= 2;		// 下一个规格内存块！
c0003759:	66 d1 65 f4          	shlw   -0xc(%ebp)
/work/x86_os_my/kernel/memory.c:634 (discriminator 3)
/* 为malloc做准备 */
void block_desc_init(struct mem_block_desc* desc_array) {
   uint16_t desc_idx, block_size = 16;

   /* 初始化每个mem_block_desc描述符 */
   for (desc_idx = 0; desc_idx < DESC_CNT; desc_idx++) {
c000375d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0003761:	83 c0 01             	add    $0x1,%eax
c0003764:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
/work/x86_os_my/kernel/memory.c:634 (discriminator 1)
c0003768:	66 83 7d f6 06       	cmpw   $0x6,-0xa(%ebp)
c000376d:	76 84                	jbe    c00036f3 <block_desc_init+0x14>
/work/x86_os_my/kernel/memory.c:645
      list_init(&desc_array[desc_idx].free_list);

      block_size *= 2;		// 下一个规格内存块！
	  // 16/32/64/128/256/512/1024 总共 7 种规格
   }
}
c000376f:	90                   	nop
c0003770:	c9                   	leave  
c0003771:	c3                   	ret    

c0003772 <mem_init>:
mem_init():
/work/x86_os_my/kernel/memory.c:648

/* 内存管理部分初始化入口 */
void mem_init() {
c0003772:	55                   	push   %ebp
c0003773:	89 e5                	mov    %esp,%ebp
c0003775:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:649
	put_str("mem_init start\n");
c0003778:	83 ec 0c             	sub    $0xc,%esp
c000377b:	68 17 c4 00 c0       	push   $0xc000c417
c0003780:	e8 eb e9 ff ff       	call   c0002170 <put_str>
c0003785:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:650
	uint32_t mem_bytes_total = (*(uint32_t*)(0xb00));	//内存总数在汇编中获取，放到了地址0xb00处。
c0003788:	b8 00 0b 00 00       	mov    $0xb00,%eax
c000378d:	8b 00                	mov    (%eax),%eax
c000378f:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:651
	mem_pool_init(mem_bytes_total);	// 初始化内存池
c0003792:	83 ec 0c             	sub    $0xc,%esp
c0003795:	ff 75 f4             	pushl  -0xc(%ebp)
c0003798:	e8 43 fd ff ff       	call   c00034e0 <mem_pool_init>
c000379d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:652
	block_desc_init(k_block_descs);	// 初始化mem_block_desc数组descs,为malloc做准备
c00037a0:	83 ec 0c             	sub    $0xc,%esp
c00037a3:	68 a0 10 01 c0       	push   $0xc00110a0
c00037a8:	e8 32 ff ff ff       	call   c00036df <block_desc_init>
c00037ad:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:653
	put_str("mem_init done\n");
c00037b0:	83 ec 0c             	sub    $0xc,%esp
c00037b3:	68 27 c4 00 c0       	push   $0xc000c427
c00037b8:	e8 b3 e9 ff ff       	call   c0002170 <put_str>
c00037bd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:654
}
c00037c0:	90                   	nop
c00037c1:	c9                   	leave  
c00037c2:	c3                   	ret    

c00037c3 <memset>:
memset():
/work/x86_os_my/lib/string.c:6
#include "string.h"
#include "global.h"
#include "debug.h"

/* 将dst_起始的size个字节置为value */
void memset(void* dst_, uint8_t value, uint32_t size) {
c00037c3:	55                   	push   %ebp
c00037c4:	89 e5                	mov    %esp,%ebp
c00037c6:	83 ec 28             	sub    $0x28,%esp
c00037c9:	8b 45 0c             	mov    0xc(%ebp),%eax
c00037cc:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/lib/string.c:7
   ASSERT(dst_ != NULL);
c00037cf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00037d3:	75 19                	jne    c00037ee <memset+0x2b>
/work/x86_os_my/lib/string.c:7 (discriminator 1)
c00037d5:	68 90 c4 00 c0       	push   $0xc000c490
c00037da:	68 04 c5 00 c0       	push   $0xc000c504
c00037df:	6a 07                	push   $0x7
c00037e1:	68 9d c4 00 c0       	push   $0xc000c49d
c00037e6:	e8 36 eb ff ff       	call   c0002321 <panic_spin>
c00037eb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:8
   uint8_t* dst = (uint8_t*)dst_;
c00037ee:	8b 45 08             	mov    0x8(%ebp),%eax
c00037f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:9
   while (size-- > 0)
c00037f4:	eb 0f                	jmp    c0003805 <memset+0x42>
/work/x86_os_my/lib/string.c:10
      *dst++ = value;
c00037f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00037f9:	8d 50 01             	lea    0x1(%eax),%edx
c00037fc:	89 55 f4             	mov    %edx,-0xc(%ebp)
c00037ff:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c0003803:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/string.c:9

/* 将dst_起始的size个字节置为value */
void memset(void* dst_, uint8_t value, uint32_t size) {
   ASSERT(dst_ != NULL);
   uint8_t* dst = (uint8_t*)dst_;
   while (size-- > 0)
c0003805:	8b 45 10             	mov    0x10(%ebp),%eax
c0003808:	8d 50 ff             	lea    -0x1(%eax),%edx
c000380b:	89 55 10             	mov    %edx,0x10(%ebp)
c000380e:	85 c0                	test   %eax,%eax
c0003810:	75 e4                	jne    c00037f6 <memset+0x33>
/work/x86_os_my/lib/string.c:11
      *dst++ = value;
}
c0003812:	90                   	nop
c0003813:	c9                   	leave  
c0003814:	c3                   	ret    

c0003815 <memcpy>:
memcpy():
/work/x86_os_my/lib/string.c:14

/* 将src_起始的size个字节复制到dst_ */
void memcpy(void* dst_, const void* src_, uint32_t size) {
c0003815:	55                   	push   %ebp
c0003816:	89 e5                	mov    %esp,%ebp
c0003818:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/string.c:15
   ASSERT(dst_ != NULL && src_ != NULL);
c000381b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c000381f:	74 06                	je     c0003827 <memcpy+0x12>
/work/x86_os_my/lib/string.c:15 (discriminator 1)
c0003821:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0003825:	75 19                	jne    c0003840 <memcpy+0x2b>
/work/x86_os_my/lib/string.c:15 (discriminator 3)
c0003827:	68 aa c4 00 c0       	push   $0xc000c4aa
c000382c:	68 0c c5 00 c0       	push   $0xc000c50c
c0003831:	6a 0f                	push   $0xf
c0003833:	68 9d c4 00 c0       	push   $0xc000c49d
c0003838:	e8 e4 ea ff ff       	call   c0002321 <panic_spin>
c000383d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:16
   uint8_t* dst = dst_;
c0003840:	8b 45 08             	mov    0x8(%ebp),%eax
c0003843:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:17
   const uint8_t* src = src_;
c0003846:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003849:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/string.c:18
   while (size-- > 0)
c000384c:	eb 17                	jmp    c0003865 <memcpy+0x50>
/work/x86_os_my/lib/string.c:19
      *dst++ = *src++;
c000384e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003851:	8d 50 01             	lea    0x1(%eax),%edx
c0003854:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0003857:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000385a:	8d 4a 01             	lea    0x1(%edx),%ecx
c000385d:	89 4d f0             	mov    %ecx,-0x10(%ebp)
c0003860:	0f b6 12             	movzbl (%edx),%edx
c0003863:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/string.c:18
/* 将src_起始的size个字节复制到dst_ */
void memcpy(void* dst_, const void* src_, uint32_t size) {
   ASSERT(dst_ != NULL && src_ != NULL);
   uint8_t* dst = dst_;
   const uint8_t* src = src_;
   while (size-- > 0)
c0003865:	8b 45 10             	mov    0x10(%ebp),%eax
c0003868:	8d 50 ff             	lea    -0x1(%eax),%edx
c000386b:	89 55 10             	mov    %edx,0x10(%ebp)
c000386e:	85 c0                	test   %eax,%eax
c0003870:	75 dc                	jne    c000384e <memcpy+0x39>
/work/x86_os_my/lib/string.c:20
      *dst++ = *src++;
}
c0003872:	90                   	nop
c0003873:	c9                   	leave  
c0003874:	c3                   	ret    

c0003875 <memcmp>:
memcmp():
/work/x86_os_my/lib/string.c:23

/* 连续比较以地址a_和地址b_开头的size个字节,若相等则返回0,若a_大于b_返回+1,否则返回-1 */
int memcmp(const void* a_, const void* b_, uint32_t size) {
c0003875:	55                   	push   %ebp
c0003876:	89 e5                	mov    %esp,%ebp
c0003878:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/string.c:24
   const char* a = a_;
c000387b:	8b 45 08             	mov    0x8(%ebp),%eax
c000387e:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:25
   const char* b = b_;
c0003881:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003884:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/string.c:26
   ASSERT(a != NULL || b != NULL);
c0003887:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c000388b:	75 57                	jne    c00038e4 <memcmp+0x6f>
/work/x86_os_my/lib/string.c:26 (discriminator 1)
c000388d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0003891:	75 51                	jne    c00038e4 <memcmp+0x6f>
/work/x86_os_my/lib/string.c:26 (discriminator 2)
c0003893:	68 c7 c4 00 c0       	push   $0xc000c4c7
c0003898:	68 14 c5 00 c0       	push   $0xc000c514
c000389d:	6a 1a                	push   $0x1a
c000389f:	68 9d c4 00 c0       	push   $0xc000c49d
c00038a4:	e8 78 ea ff ff       	call   c0002321 <panic_spin>
c00038a9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:27 (discriminator 2)
   while (size-- > 0) {
c00038ac:	eb 36                	jmp    c00038e4 <memcmp+0x6f>
/work/x86_os_my/lib/string.c:28
      if(*a != *b) {
c00038ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00038b1:	0f b6 10             	movzbl (%eax),%edx
c00038b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00038b7:	0f b6 00             	movzbl (%eax),%eax
c00038ba:	38 c2                	cmp    %al,%dl
c00038bc:	74 1e                	je     c00038dc <memcmp+0x67>
/work/x86_os_my/lib/string.c:29
	 return *a > *b ? 1 : -1; 
c00038be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00038c1:	0f b6 10             	movzbl (%eax),%edx
c00038c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00038c7:	0f b6 00             	movzbl (%eax),%eax
c00038ca:	38 c2                	cmp    %al,%dl
c00038cc:	7e 07                	jle    c00038d5 <memcmp+0x60>
/work/x86_os_my/lib/string.c:29 (discriminator 1)
c00038ce:	b8 01 00 00 00       	mov    $0x1,%eax
c00038d3:	eb 21                	jmp    c00038f6 <memcmp+0x81>
/work/x86_os_my/lib/string.c:29 (discriminator 2)
c00038d5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00038da:	eb 1a                	jmp    c00038f6 <memcmp+0x81>
/work/x86_os_my/lib/string.c:31
      }
      a++;
c00038dc:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/lib/string.c:32
      b++;
c00038e0:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/lib/string.c:27
/* 连续比较以地址a_和地址b_开头的size个字节,若相等则返回0,若a_大于b_返回+1,否则返回-1 */
int memcmp(const void* a_, const void* b_, uint32_t size) {
   const char* a = a_;
   const char* b = b_;
   ASSERT(a != NULL || b != NULL);
   while (size-- > 0) {
c00038e4:	8b 45 10             	mov    0x10(%ebp),%eax
c00038e7:	8d 50 ff             	lea    -0x1(%eax),%edx
c00038ea:	89 55 10             	mov    %edx,0x10(%ebp)
c00038ed:	85 c0                	test   %eax,%eax
c00038ef:	75 bd                	jne    c00038ae <memcmp+0x39>
/work/x86_os_my/lib/string.c:34
	 return *a > *b ? 1 : -1; 
      }
      a++;
      b++;
   }
   return 0;
c00038f1:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/lib/string.c:35
}
c00038f6:	c9                   	leave  
c00038f7:	c3                   	ret    

c00038f8 <strcpy>:
strcpy():
/work/x86_os_my/lib/string.c:38

/* 将字符串从src_复制到dst_ */
char* strcpy(char* dst_, const char* src_) {
c00038f8:	55                   	push   %ebp
c00038f9:	89 e5                	mov    %esp,%ebp
c00038fb:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/string.c:39
   ASSERT(dst_ != NULL && src_ != NULL);
c00038fe:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003902:	74 06                	je     c000390a <strcpy+0x12>
/work/x86_os_my/lib/string.c:39 (discriminator 1)
c0003904:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0003908:	75 19                	jne    c0003923 <strcpy+0x2b>
/work/x86_os_my/lib/string.c:39 (discriminator 3)
c000390a:	68 aa c4 00 c0       	push   $0xc000c4aa
c000390f:	68 1c c5 00 c0       	push   $0xc000c51c
c0003914:	6a 27                	push   $0x27
c0003916:	68 9d c4 00 c0       	push   $0xc000c49d
c000391b:	e8 01 ea ff ff       	call   c0002321 <panic_spin>
c0003920:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:40
   char* r = dst_;		       // 用来返回目的字符串起始地址
c0003923:	8b 45 08             	mov    0x8(%ebp),%eax
c0003926:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:41
   while((*dst_++ = *src_++));
c0003929:	90                   	nop
/work/x86_os_my/lib/string.c:41 (discriminator 1)
c000392a:	8b 45 08             	mov    0x8(%ebp),%eax
c000392d:	8d 50 01             	lea    0x1(%eax),%edx
c0003930:	89 55 08             	mov    %edx,0x8(%ebp)
c0003933:	8b 55 0c             	mov    0xc(%ebp),%edx
c0003936:	8d 4a 01             	lea    0x1(%edx),%ecx
c0003939:	89 4d 0c             	mov    %ecx,0xc(%ebp)
c000393c:	0f b6 12             	movzbl (%edx),%edx
c000393f:	88 10                	mov    %dl,(%eax)
c0003941:	0f b6 00             	movzbl (%eax),%eax
c0003944:	84 c0                	test   %al,%al
c0003946:	75 e2                	jne    c000392a <strcpy+0x32>
/work/x86_os_my/lib/string.c:42
   return r;
c0003948:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/lib/string.c:43
}
c000394b:	c9                   	leave  
c000394c:	c3                   	ret    

c000394d <strlen>:
strlen():
/work/x86_os_my/lib/string.c:46

/* 返回字符串长度 */
uint32_t strlen(const char* str) {
c000394d:	55                   	push   %ebp
c000394e:	89 e5                	mov    %esp,%ebp
c0003950:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/string.c:47
   ASSERT(str != NULL);
c0003953:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003957:	75 19                	jne    c0003972 <strlen+0x25>
/work/x86_os_my/lib/string.c:47 (discriminator 1)
c0003959:	68 de c4 00 c0       	push   $0xc000c4de
c000395e:	68 24 c5 00 c0       	push   $0xc000c524
c0003963:	6a 2f                	push   $0x2f
c0003965:	68 9d c4 00 c0       	push   $0xc000c49d
c000396a:	e8 b2 e9 ff ff       	call   c0002321 <panic_spin>
c000396f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:48
   const char* p = str;
c0003972:	8b 45 08             	mov    0x8(%ebp),%eax
c0003975:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:49
   while(*p++);
c0003978:	90                   	nop
/work/x86_os_my/lib/string.c:49 (discriminator 1)
c0003979:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000397c:	8d 50 01             	lea    0x1(%eax),%edx
c000397f:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0003982:	0f b6 00             	movzbl (%eax),%eax
c0003985:	84 c0                	test   %al,%al
c0003987:	75 f0                	jne    c0003979 <strlen+0x2c>
/work/x86_os_my/lib/string.c:50
   return (p - str - 1);
c0003989:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000398c:	8b 45 08             	mov    0x8(%ebp),%eax
c000398f:	29 c2                	sub    %eax,%edx
c0003991:	89 d0                	mov    %edx,%eax
c0003993:	83 e8 01             	sub    $0x1,%eax
/work/x86_os_my/lib/string.c:51
}
c0003996:	c9                   	leave  
c0003997:	c3                   	ret    

c0003998 <strcmp>:
strcmp():
/work/x86_os_my/lib/string.c:54

/* 比较两个字符串,若a_中的字符大于b_中的字符返回1,相等时返回0,否则返回-1. */
int8_t strcmp (const char* a, const char* b) {
c0003998:	55                   	push   %ebp
c0003999:	89 e5                	mov    %esp,%ebp
c000399b:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/lib/string.c:55
   ASSERT(a != NULL && b != NULL);
c000399e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00039a2:	74 06                	je     c00039aa <strcmp+0x12>
/work/x86_os_my/lib/string.c:55 (discriminator 1)
c00039a4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c00039a8:	75 19                	jne    c00039c3 <strcmp+0x2b>
/work/x86_os_my/lib/string.c:55 (discriminator 3)
c00039aa:	68 ea c4 00 c0       	push   $0xc000c4ea
c00039af:	68 2c c5 00 c0       	push   $0xc000c52c
c00039b4:	6a 37                	push   $0x37
c00039b6:	68 9d c4 00 c0       	push   $0xc000c49d
c00039bb:	e8 61 e9 ff ff       	call   c0002321 <panic_spin>
c00039c0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:56 (discriminator 1)
   while (*a != 0 && *a == *b) {
c00039c3:	eb 08                	jmp    c00039cd <strcmp+0x35>
/work/x86_os_my/lib/string.c:57
      a++;
c00039c5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
/work/x86_os_my/lib/string.c:58
      b++;
c00039c9:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
/work/x86_os_my/lib/string.c:56
}

/* 比较两个字符串,若a_中的字符大于b_中的字符返回1,相等时返回0,否则返回-1. */
int8_t strcmp (const char* a, const char* b) {
   ASSERT(a != NULL && b != NULL);
   while (*a != 0 && *a == *b) {
c00039cd:	8b 45 08             	mov    0x8(%ebp),%eax
c00039d0:	0f b6 00             	movzbl (%eax),%eax
c00039d3:	84 c0                	test   %al,%al
c00039d5:	74 10                	je     c00039e7 <strcmp+0x4f>
/work/x86_os_my/lib/string.c:56 (discriminator 1)
c00039d7:	8b 45 08             	mov    0x8(%ebp),%eax
c00039da:	0f b6 10             	movzbl (%eax),%edx
c00039dd:	8b 45 0c             	mov    0xc(%ebp),%eax
c00039e0:	0f b6 00             	movzbl (%eax),%eax
c00039e3:	38 c2                	cmp    %al,%dl
c00039e5:	74 de                	je     c00039c5 <strcmp+0x2d>
/work/x86_os_my/lib/string.c:62
      a++;
      b++;
   }
/* 如果*a小于*b就返回-1,否则就属于*a大于等于*b的情况。在后面的布尔表达式"*a > *b"中,
 * 若*a大于*b,表达式就等于1,否则就表达式不成立,也就是布尔值为0,恰恰表示*a等于*b */
   return *a < *b ? -1 : *a > *b;
c00039e7:	8b 45 08             	mov    0x8(%ebp),%eax
c00039ea:	0f b6 10             	movzbl (%eax),%edx
c00039ed:	8b 45 0c             	mov    0xc(%ebp),%eax
c00039f0:	0f b6 00             	movzbl (%eax),%eax
c00039f3:	38 c2                	cmp    %al,%dl
c00039f5:	7c 13                	jl     c0003a0a <strcmp+0x72>
/work/x86_os_my/lib/string.c:62 (discriminator 1)
c00039f7:	8b 45 08             	mov    0x8(%ebp),%eax
c00039fa:	0f b6 10             	movzbl (%eax),%edx
c00039fd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003a00:	0f b6 00             	movzbl (%eax),%eax
c0003a03:	38 c2                	cmp    %al,%dl
c0003a05:	0f 9f c0             	setg   %al
c0003a08:	eb 05                	jmp    c0003a0f <strcmp+0x77>
/work/x86_os_my/lib/string.c:62 (discriminator 2)
c0003a0a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
/work/x86_os_my/lib/string.c:63 (discriminator 5)
}
c0003a0f:	c9                   	leave  
c0003a10:	c3                   	ret    

c0003a11 <strchr>:
strchr():
/work/x86_os_my/lib/string.c:66

/* 从左到右查找字符串str中首次出现字符ch的地址(不是下标,是地址) */
char* strchr(const char* str, const uint8_t ch) {
c0003a11:	55                   	push   %ebp
c0003a12:	89 e5                	mov    %esp,%ebp
c0003a14:	83 ec 18             	sub    $0x18,%esp
c0003a17:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003a1a:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/lib/string.c:67
   ASSERT(str != NULL);
c0003a1d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003a21:	75 35                	jne    c0003a58 <strchr+0x47>
/work/x86_os_my/lib/string.c:67 (discriminator 1)
c0003a23:	68 de c4 00 c0       	push   $0xc000c4de
c0003a28:	68 34 c5 00 c0       	push   $0xc000c534
c0003a2d:	6a 43                	push   $0x43
c0003a2f:	68 9d c4 00 c0       	push   $0xc000c49d
c0003a34:	e8 e8 e8 ff ff       	call   c0002321 <panic_spin>
c0003a39:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:68 (discriminator 1)
   while (*str != 0) {
c0003a3c:	eb 1a                	jmp    c0003a58 <strchr+0x47>
/work/x86_os_my/lib/string.c:69
      if (*str == ch) {
c0003a3e:	8b 45 08             	mov    0x8(%ebp),%eax
c0003a41:	0f b6 00             	movzbl (%eax),%eax
c0003a44:	0f be d0             	movsbl %al,%edx
c0003a47:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0003a4b:	39 c2                	cmp    %eax,%edx
c0003a4d:	75 05                	jne    c0003a54 <strchr+0x43>
/work/x86_os_my/lib/string.c:70
	 return (char*)str;	    // 需要强制转化成和返回值类型一样,否则编译器会报const属性丢失,下同.
c0003a4f:	8b 45 08             	mov    0x8(%ebp),%eax
c0003a52:	eb 13                	jmp    c0003a67 <strchr+0x56>
/work/x86_os_my/lib/string.c:72
      }
      str++;
c0003a54:	83 45 08 01          	addl   $0x1,0x8(%ebp)
/work/x86_os_my/lib/string.c:68
}

/* 从左到右查找字符串str中首次出现字符ch的地址(不是下标,是地址) */
char* strchr(const char* str, const uint8_t ch) {
   ASSERT(str != NULL);
   while (*str != 0) {
c0003a58:	8b 45 08             	mov    0x8(%ebp),%eax
c0003a5b:	0f b6 00             	movzbl (%eax),%eax
c0003a5e:	84 c0                	test   %al,%al
c0003a60:	75 dc                	jne    c0003a3e <strchr+0x2d>
/work/x86_os_my/lib/string.c:74
      if (*str == ch) {
	 return (char*)str;	    // 需要强制转化成和返回值类型一样,否则编译器会报const属性丢失,下同.
      }
      str++;
   }
   return NULL;
c0003a62:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/lib/string.c:75
}
c0003a67:	c9                   	leave  
c0003a68:	c3                   	ret    

c0003a69 <strrchr>:
strrchr():
/work/x86_os_my/lib/string.c:78

/* 从后往前查找字符串str中首次出现字符ch的地址(不是下标,是地址) */
char* strrchr(const char* str, const uint8_t ch) {
c0003a69:	55                   	push   %ebp
c0003a6a:	89 e5                	mov    %esp,%ebp
c0003a6c:	83 ec 28             	sub    $0x28,%esp
c0003a6f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003a72:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/lib/string.c:79
   ASSERT(str != NULL);
c0003a75:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003a79:	75 19                	jne    c0003a94 <strrchr+0x2b>
/work/x86_os_my/lib/string.c:79 (discriminator 1)
c0003a7b:	68 de c4 00 c0       	push   $0xc000c4de
c0003a80:	68 3c c5 00 c0       	push   $0xc000c53c
c0003a85:	6a 4f                	push   $0x4f
c0003a87:	68 9d c4 00 c0       	push   $0xc000c49d
c0003a8c:	e8 90 e8 ff ff       	call   c0002321 <panic_spin>
c0003a91:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:80
   const char* last_char = NULL;
c0003a94:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/string.c:82
   /* 从头到尾遍历一次,若存在ch字符,last_char总是该字符最后一次出现在串中的地址(不是下标,是地址)*/
   while (*str != 0) {
c0003a9b:	eb 1b                	jmp    c0003ab8 <strrchr+0x4f>
/work/x86_os_my/lib/string.c:83
      if (*str == ch) {
c0003a9d:	8b 45 08             	mov    0x8(%ebp),%eax
c0003aa0:	0f b6 00             	movzbl (%eax),%eax
c0003aa3:	0f be d0             	movsbl %al,%edx
c0003aa6:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0003aaa:	39 c2                	cmp    %eax,%edx
c0003aac:	75 06                	jne    c0003ab4 <strrchr+0x4b>
/work/x86_os_my/lib/string.c:84
	 last_char = str;
c0003aae:	8b 45 08             	mov    0x8(%ebp),%eax
c0003ab1:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:86
      }
      str++;
c0003ab4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
/work/x86_os_my/lib/string.c:82
/* 从后往前查找字符串str中首次出现字符ch的地址(不是下标,是地址) */
char* strrchr(const char* str, const uint8_t ch) {
   ASSERT(str != NULL);
   const char* last_char = NULL;
   /* 从头到尾遍历一次,若存在ch字符,last_char总是该字符最后一次出现在串中的地址(不是下标,是地址)*/
   while (*str != 0) {
c0003ab8:	8b 45 08             	mov    0x8(%ebp),%eax
c0003abb:	0f b6 00             	movzbl (%eax),%eax
c0003abe:	84 c0                	test   %al,%al
c0003ac0:	75 db                	jne    c0003a9d <strrchr+0x34>
/work/x86_os_my/lib/string.c:88
      if (*str == ch) {
	 last_char = str;
      }
      str++;
   }
   return (char*)last_char;
c0003ac2:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/lib/string.c:89
}
c0003ac5:	c9                   	leave  
c0003ac6:	c3                   	ret    

c0003ac7 <strcat>:
strcat():
/work/x86_os_my/lib/string.c:92

/* 将字符串src_拼接到dst_后,将回拼接的串地址 */
char* strcat(char* dst_, const char* src_) {
c0003ac7:	55                   	push   %ebp
c0003ac8:	89 e5                	mov    %esp,%ebp
c0003aca:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/string.c:93
   ASSERT(dst_ != NULL && src_ != NULL);
c0003acd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003ad1:	74 06                	je     c0003ad9 <strcat+0x12>
/work/x86_os_my/lib/string.c:93 (discriminator 1)
c0003ad3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0003ad7:	75 19                	jne    c0003af2 <strcat+0x2b>
/work/x86_os_my/lib/string.c:93 (discriminator 3)
c0003ad9:	68 aa c4 00 c0       	push   $0xc000c4aa
c0003ade:	68 44 c5 00 c0       	push   $0xc000c544
c0003ae3:	6a 5d                	push   $0x5d
c0003ae5:	68 9d c4 00 c0       	push   $0xc000c49d
c0003aea:	e8 32 e8 ff ff       	call   c0002321 <panic_spin>
c0003aef:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:94
   char* str = dst_;
c0003af2:	8b 45 08             	mov    0x8(%ebp),%eax
c0003af5:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:95
   while (*str++);
c0003af8:	90                   	nop
/work/x86_os_my/lib/string.c:95 (discriminator 1)
c0003af9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003afc:	8d 50 01             	lea    0x1(%eax),%edx
c0003aff:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0003b02:	0f b6 00             	movzbl (%eax),%eax
c0003b05:	84 c0                	test   %al,%al
c0003b07:	75 f0                	jne    c0003af9 <strcat+0x32>
/work/x86_os_my/lib/string.c:96
   --str;      // 别看错了，--str是独立的一句，并不是while的循环体
c0003b09:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
/work/x86_os_my/lib/string.c:97
   while((*str++ = *src_++));	 // 当*str被赋值为0时,此时表达式不成立,正好添加了字符串结尾的0.
c0003b0d:	90                   	nop
/work/x86_os_my/lib/string.c:97 (discriminator 1)
c0003b0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003b11:	8d 50 01             	lea    0x1(%eax),%edx
c0003b14:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0003b17:	8b 55 0c             	mov    0xc(%ebp),%edx
c0003b1a:	8d 4a 01             	lea    0x1(%edx),%ecx
c0003b1d:	89 4d 0c             	mov    %ecx,0xc(%ebp)
c0003b20:	0f b6 12             	movzbl (%edx),%edx
c0003b23:	88 10                	mov    %dl,(%eax)
c0003b25:	0f b6 00             	movzbl (%eax),%eax
c0003b28:	84 c0                	test   %al,%al
c0003b2a:	75 e2                	jne    c0003b0e <strcat+0x47>
/work/x86_os_my/lib/string.c:98
   return dst_;
c0003b2c:	8b 45 08             	mov    0x8(%ebp),%eax
/work/x86_os_my/lib/string.c:99
}
c0003b2f:	c9                   	leave  
c0003b30:	c3                   	ret    

c0003b31 <strchrs>:
strchrs():
/work/x86_os_my/lib/string.c:102

/* 在字符串str中查找指定字符ch出现的次数 */
uint32_t strchrs(const char* str, uint8_t ch) {
c0003b31:	55                   	push   %ebp
c0003b32:	89 e5                	mov    %esp,%ebp
c0003b34:	83 ec 28             	sub    $0x28,%esp
c0003b37:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003b3a:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/lib/string.c:103
   ASSERT(str != NULL);
c0003b3d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003b41:	75 19                	jne    c0003b5c <strchrs+0x2b>
/work/x86_os_my/lib/string.c:103 (discriminator 1)
c0003b43:	68 de c4 00 c0       	push   $0xc000c4de
c0003b48:	68 4c c5 00 c0       	push   $0xc000c54c
c0003b4d:	6a 67                	push   $0x67
c0003b4f:	68 9d c4 00 c0       	push   $0xc000c49d
c0003b54:	e8 c8 e7 ff ff       	call   c0002321 <panic_spin>
c0003b59:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:104
   uint32_t ch_cnt = 0;
c0003b5c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/string.c:105
   const char* p = str;
c0003b63:	8b 45 08             	mov    0x8(%ebp),%eax
c0003b66:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/string.c:106
   while(*p != 0) {
c0003b69:	eb 19                	jmp    c0003b84 <strchrs+0x53>
/work/x86_os_my/lib/string.c:107
      if (*p == ch) {
c0003b6b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003b6e:	0f b6 00             	movzbl (%eax),%eax
c0003b71:	0f be d0             	movsbl %al,%edx
c0003b74:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0003b78:	39 c2                	cmp    %eax,%edx
c0003b7a:	75 04                	jne    c0003b80 <strchrs+0x4f>
/work/x86_os_my/lib/string.c:108
	 ch_cnt++;
c0003b7c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/lib/string.c:110
      }
      p++;
c0003b80:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/lib/string.c:106
/* 在字符串str中查找指定字符ch出现的次数 */
uint32_t strchrs(const char* str, uint8_t ch) {
   ASSERT(str != NULL);
   uint32_t ch_cnt = 0;
   const char* p = str;
   while(*p != 0) {
c0003b84:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003b87:	0f b6 00             	movzbl (%eax),%eax
c0003b8a:	84 c0                	test   %al,%al
c0003b8c:	75 dd                	jne    c0003b6b <strchrs+0x3a>
/work/x86_os_my/lib/string.c:112
      if (*p == ch) {
	 ch_cnt++;
      }
      p++;
   }
   return ch_cnt;
c0003b8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/lib/string.c:113
}
c0003b91:	c9                   	leave  
c0003b92:	c3                   	ret    

c0003b93 <idle>:
idle():
/work/x86_os_my/thread/thread.c:26

extern void switch_to(struct task_struct* cur, struct task_struct* next);
extern void init(void);

/* idle线程 */
static void idle(void* arg UNUSED) {
c0003b93:	55                   	push   %ebp
c0003b94:	89 e5                	mov    %esp,%ebp
c0003b96:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:28 (discriminator 1)
	while(1) {
		thread_block(TASK_BLOCKED);
c0003b99:	83 ec 0c             	sub    $0xc,%esp
c0003b9c:	6a 02                	push   $0x2
c0003b9e:	e8 aa 04 00 00       	call   c000404d <thread_block>
c0003ba3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:32 (discriminator 1)
		//CPU停机
		//唯一能唤醒处理器的就是外部中断
		//执行hlt时必须要保证目前处在开中断的情况下
		asm volatile ("sti; hlt" : : : "memory");
c0003ba6:	fb                   	sti    
c0003ba7:	f4                   	hlt    
/work/x86_os_my/thread/thread.c:33 (discriminator 1)
	}
c0003ba8:	eb ef                	jmp    c0003b99 <idle+0x6>

c0003baa <running_thread>:
running_thread():
/work/x86_os_my/thread/thread.c:40

/* 返回线程 PCB 地址。
 * 各个线程所用的 0 级栈都是在自己的 PCB 当中，
 * 取当前栈指针的高 20 位，就是当前运行线程的 PCB（PCB是在自然页的起始地址！）
 */
struct task_struct* running_thread() {
c0003baa:	55                   	push   %ebp
c0003bab:	89 e5                	mov    %esp,%ebp
c0003bad:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/thread/thread.c:42
	uint32_t esp;
	asm ("mov %%esp, %0" : "=g" (esp));	//esp寄存器的值，放入变量esp
c0003bb0:	89 e0                	mov    %esp,%eax
c0003bb2:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/thread/thread.c:43
	return (struct task_struct*)(esp & 0xfffff000);
c0003bb5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003bb8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
/work/x86_os_my/thread/thread.c:44
}
c0003bbd:	c9                   	leave  
c0003bbe:	c3                   	ret    

c0003bbf <kernel_thread>:
kernel_thread():
/work/x86_os_my/thread/thread.c:47

/* 由kernel_thread去执行function(func_arg) */
static void kernel_thread(thread_func* function, void* func_arg) {
c0003bbf:	55                   	push   %ebp
c0003bc0:	89 e5                	mov    %esp,%ebp
c0003bc2:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:53
	/* 线程的首次运行是由时钟中断处理函数调用任务调度器 schedule 完成的，
	 * 进入中断后处理器会自动关中断，
	 * 因此在执行 function 前要打开中断，否则 kernel_thread 中的 function 在关中断的情况下运行，
	 * 也就是时钟中断被屏蔽了，再也不会调度到新的线程，function 会独享处理器。
	 */
	intr_enable();
c0003bc5:	e8 4d dd ff ff       	call   c0001917 <intr_enable>
/work/x86_os_my/thread/thread.c:54
	function(func_arg); 
c0003bca:	83 ec 0c             	sub    $0xc,%esp
c0003bcd:	ff 75 0c             	pushl  0xc(%ebp)
c0003bd0:	8b 45 08             	mov    0x8(%ebp),%eax
c0003bd3:	ff d0                	call   *%eax
c0003bd5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:55
}
c0003bd8:	90                   	nop
c0003bd9:	c9                   	leave  
c0003bda:	c3                   	ret    

c0003bdb <allocate_pid>:
allocate_pid():
/work/x86_os_my/thread/thread.c:58

/* 分配pid */
static pid_t allocate_pid(void) {
c0003bdb:	55                   	push   %ebp
c0003bdc:	89 e5                	mov    %esp,%ebp
c0003bde:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:60
   static pid_t next_pid = 0;
   lock_acquire(&pid_lock);
c0003be1:	83 ec 0c             	sub    $0xc,%esp
c0003be4:	68 b4 11 01 c0       	push   $0xc00111b4
c0003be9:	e8 91 0e 00 00       	call   c0004a7f <lock_acquire>
c0003bee:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:61
   next_pid++;
c0003bf1:	0f b7 05 6c 05 01 c0 	movzwl 0xc001056c,%eax
c0003bf8:	83 c0 01             	add    $0x1,%eax
c0003bfb:	66 a3 6c 05 01 c0    	mov    %ax,0xc001056c
/work/x86_os_my/thread/thread.c:62
   lock_release(&pid_lock);
c0003c01:	83 ec 0c             	sub    $0xc,%esp
c0003c04:	68 b4 11 01 c0       	push   $0xc00111b4
c0003c09:	e8 e8 0e 00 00       	call   c0004af6 <lock_release>
c0003c0e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:63
   return next_pid;
c0003c11:	0f b7 05 6c 05 01 c0 	movzwl 0xc001056c,%eax
/work/x86_os_my/thread/thread.c:64
}
c0003c18:	c9                   	leave  
c0003c19:	c3                   	ret    

c0003c1a <fork_pid>:
fork_pid():
/work/x86_os_my/thread/thread.c:67

/* fork进程时为其分配pid，只是再封装一次 allocate_pid */
pid_t fork_pid(void) {
c0003c1a:	55                   	push   %ebp
c0003c1b:	89 e5                	mov    %esp,%ebp
c0003c1d:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:68
	return allocate_pid();
c0003c20:	e8 b6 ff ff ff       	call   c0003bdb <allocate_pid>
/work/x86_os_my/thread/thread.c:69
}
c0003c25:	c9                   	leave  
c0003c26:	c3                   	ret    

c0003c27 <thread_create>:
thread_create():
/work/x86_os_my/thread/thread.c:72

/* 初始化线程栈结构体 struct thread_stack */
void thread_create(struct task_struct* pthread, thread_func function, void* func_arg) {
c0003c27:	55                   	push   %ebp
c0003c28:	89 e5                	mov    %esp,%ebp
c0003c2a:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/thread/thread.c:76
	/* 先预留中断使用栈的空间 
	 *（1）将来线程进入中断后，位于 kernel.S 中的中断代码会通过此栈来保存上下文。
	 *（2）将来实现用户进程时，会将用户进程的初始信息放在中断栈中。*/
	pthread->self_kstack -= sizeof(struct intr_stack);
c0003c2d:	8b 45 08             	mov    0x8(%ebp),%eax
c0003c30:	8b 00                	mov    (%eax),%eax
c0003c32:	8d 90 d0 fe ff ff    	lea    -0x130(%eax),%edx
c0003c38:	8b 45 08             	mov    0x8(%ebp),%eax
c0003c3b:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/thread/thread.c:79

	/* 再留出线程栈空间（unused_retaddr 所在的栈）*/
	pthread->self_kstack -= sizeof(struct thread_stack);
c0003c3d:	8b 45 08             	mov    0x8(%ebp),%eax
c0003c40:	8b 00                	mov    (%eax),%eax
c0003c42:	8d 50 80             	lea    -0x80(%eax),%edx
c0003c45:	8b 45 08             	mov    0x8(%ebp),%eax
c0003c48:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/thread/thread.c:80
	struct thread_stack* kthread_stack = (struct thread_stack*)pthread->self_kstack;
c0003c4a:	8b 45 08             	mov    0x8(%ebp),%eax
c0003c4d:	8b 00                	mov    (%eax),%eax
c0003c4f:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/thread/thread.c:88
	 * kernel_thread 并不是通过 call 指令调用的，而是通过 ret 来执行的，
	 * 因此无法按照正常的函数调用形式传递 kernel_thread 所需要的参数，
	 * 这样调用是不行的： kernel_thread(function, func_arg)，
	 * 只能将参数放在 kernel_thread 所用的栈中，即处理器进入 kernel_thread 函数体时，
	 * 栈顶为返回地址，栈顶+4 为参数function，栈顶+8 为参数func_arg */
	kthread_stack->eip = kernel_thread;
c0003c52:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003c55:	c7 40 10 bf 3b 00 c0 	movl   $0xc0003bbf,0x10(%eax)
/work/x86_os_my/thread/thread.c:89
	kthread_stack->function = function;
c0003c5c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003c5f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0003c62:	89 50 18             	mov    %edx,0x18(%eax)
/work/x86_os_my/thread/thread.c:90
	kthread_stack->func_arg = func_arg;
c0003c65:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003c68:	8b 55 10             	mov    0x10(%ebp),%edx
c0003c6b:	89 50 1c             	mov    %edx,0x1c(%eax)
/work/x86_os_my/thread/thread.c:91
	kthread_stack->ebp = kthread_stack->ebx = kthread_stack->esi = kthread_stack->edi = 0;
c0003c6e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003c71:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0003c78:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003c7b:	8b 50 08             	mov    0x8(%eax),%edx
c0003c7e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003c81:	89 50 0c             	mov    %edx,0xc(%eax)
c0003c84:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003c87:	8b 50 0c             	mov    0xc(%eax),%edx
c0003c8a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003c8d:	89 50 04             	mov    %edx,0x4(%eax)
c0003c90:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003c93:	8b 50 04             	mov    0x4(%eax),%edx
c0003c96:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003c99:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/thread/thread.c:92
}
c0003c9b:	90                   	nop
c0003c9c:	c9                   	leave  
c0003c9d:	c3                   	ret    

c0003c9e <init_thread>:
init_thread():
/work/x86_os_my/thread/thread.c:95

/* 初始化线程PCB结构体 struct task_struct */
void init_thread(struct task_struct* pthread, char* name, int prio) {
c0003c9e:	55                   	push   %ebp
c0003c9f:	89 e5                	mov    %esp,%ebp
c0003ca1:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:96
	memset(pthread, 0, sizeof(*pthread));	//清空PCB
c0003ca4:	83 ec 04             	sub    $0x4,%esp
c0003ca7:	68 18 01 00 00       	push   $0x118
c0003cac:	6a 00                	push   $0x0
c0003cae:	ff 75 08             	pushl  0x8(%ebp)
c0003cb1:	e8 0d fb ff ff       	call   c00037c3 <memset>
c0003cb6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:97
	pthread->pid = allocate_pid();
c0003cb9:	e8 1d ff ff ff       	call   c0003bdb <allocate_pid>
c0003cbe:	89 c2                	mov    %eax,%edx
c0003cc0:	8b 45 08             	mov    0x8(%ebp),%eax
c0003cc3:	66 89 50 04          	mov    %dx,0x4(%eax)
/work/x86_os_my/thread/thread.c:98
	strcpy(pthread->name, name);
c0003cc7:	8b 45 08             	mov    0x8(%ebp),%eax
c0003cca:	83 c0 0c             	add    $0xc,%eax
c0003ccd:	83 ec 08             	sub    $0x8,%esp
c0003cd0:	ff 75 0c             	pushl  0xc(%ebp)
c0003cd3:	50                   	push   %eax
c0003cd4:	e8 1f fc ff ff       	call   c00038f8 <strcpy>
c0003cd9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:100

	if (pthread == g_main_thread) {
c0003cdc:	a1 b0 11 01 c0       	mov    0xc00111b0,%eax
c0003ce1:	39 45 08             	cmp    %eax,0x8(%ebp)
c0003ce4:	75 0c                	jne    c0003cf2 <init_thread+0x54>
/work/x86_os_my/thread/thread.c:102
		/* 由于把main函数也封装成一个线程,并且它一直是运行的,故将其直接设为TASK_RUNNING */
		pthread->status = TASK_RUNNING;
c0003ce6:	8b 45 08             	mov    0x8(%ebp),%eax
c0003ce9:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0003cf0:	eb 0a                	jmp    c0003cfc <init_thread+0x5e>
/work/x86_os_my/thread/thread.c:104
	} else {
		pthread->status = TASK_READY;
c0003cf2:	8b 45 08             	mov    0x8(%ebp),%eax
c0003cf5:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/thread/thread.c:110
	}

	/* self_kstack是线程自己在内核态下使用的栈顶地址 
	 * 线程自己在 0 特权级下所用的栈，在线程创建之初，
	 * 它被初始化为线程 PCB 的最顶端，即(uint32_t)pthread + PG_SIZE。*/
	pthread->self_kstack = (uint32_t*)((uint32_t)pthread + PG_SIZE);
c0003cfc:	8b 45 08             	mov    0x8(%ebp),%eax
c0003cff:	05 00 10 00 00       	add    $0x1000,%eax
c0003d04:	89 c2                	mov    %eax,%edx
c0003d06:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d09:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/thread/thread.c:111
	pthread->priority = prio;
c0003d0b:	8b 45 10             	mov    0x10(%ebp),%eax
c0003d0e:	89 c2                	mov    %eax,%edx
c0003d10:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d13:	88 50 1c             	mov    %dl,0x1c(%eax)
/work/x86_os_my/thread/thread.c:112
	pthread->ticks = prio;
c0003d16:	8b 45 10             	mov    0x10(%ebp),%eax
c0003d19:	89 c2                	mov    %eax,%edx
c0003d1b:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d1e:	88 50 1d             	mov    %dl,0x1d(%eax)
/work/x86_os_my/thread/thread.c:113
	pthread->elapsed_ticks = 0;
c0003d21:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d24:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
/work/x86_os_my/thread/thread.c:114
	pthread->pgdir = NULL;
c0003d2b:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d2e:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
/work/x86_os_my/thread/thread.c:117

	/* 预留标准输入输出 */
	pthread->fd_table[0] = 0;
c0003d35:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d38:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
/work/x86_os_my/thread/thread.c:118
	pthread->fd_table[1] = 1;
c0003d3f:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d42:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
/work/x86_os_my/thread/thread.c:119
	pthread->fd_table[2] = 2;
c0003d49:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d4c:	c7 40 2c 02 00 00 00 	movl   $0x2,0x2c(%eax)
/work/x86_os_my/thread/thread.c:121
	/* 其余的全置为-1 */
	uint8_t fd_idx = 3;
c0003d53:	c6 45 f7 03          	movb   $0x3,-0x9(%ebp)
/work/x86_os_my/thread/thread.c:122
	while (fd_idx < MAX_FILES_OPEN_PER_PROC) {
c0003d57:	eb 1c                	jmp    c0003d75 <init_thread+0xd7>
/work/x86_os_my/thread/thread.c:123
		pthread->fd_table[fd_idx] = -1;
c0003d59:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c0003d5d:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d60:	83 c2 08             	add    $0x8,%edx
c0003d63:	c7 44 90 04 ff ff ff 	movl   $0xffffffff,0x4(%eax,%edx,4)
c0003d6a:	ff 
/work/x86_os_my/thread/thread.c:124
		fd_idx++;
c0003d6b:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0003d6f:	83 c0 01             	add    $0x1,%eax
c0003d72:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/thread/thread.c:122
	pthread->fd_table[0] = 0;
	pthread->fd_table[1] = 1;
	pthread->fd_table[2] = 2;
	/* 其余的全置为-1 */
	uint8_t fd_idx = 3;
	while (fd_idx < MAX_FILES_OPEN_PER_PROC) {
c0003d75:	80 7d f7 07          	cmpb   $0x7,-0x9(%ebp)
c0003d79:	76 de                	jbe    c0003d59 <init_thread+0xbb>
/work/x86_os_my/thread/thread.c:127
		pthread->fd_table[fd_idx] = -1;
		fd_idx++;
	}

	pthread->cwd_inode_nr = 0;			// 以根目录做为默认工作路径
c0003d7b:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d7e:	c7 80 0c 01 00 00 00 	movl   $0x0,0x10c(%eax)
c0003d85:	00 00 00 
/work/x86_os_my/thread/thread.c:128
	pthread->parent_pid = -1;			// -1表示没有父进程
c0003d88:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d8b:	66 c7 80 10 01 00 00 	movw   $0xffff,0x110(%eax)
c0003d92:	ff ff 
/work/x86_os_my/thread/thread.c:129
	pthread->stack_magic = 0x19870916;	// 自定义的魔数
c0003d94:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d97:	c7 80 14 01 00 00 16 	movl   $0x19870916,0x114(%eax)
c0003d9e:	09 87 19 
/work/x86_os_my/thread/thread.c:130
}
c0003da1:	90                   	nop
c0003da2:	c9                   	leave  
c0003da3:	c3                   	ret    

c0003da4 <thread_start>:
thread_start():
/work/x86_os_my/thread/thread.c:133

/* 创建线程 */
struct task_struct* thread_start(char* name, int prio, thread_func function, void* func_arg) {
c0003da4:	55                   	push   %ebp
c0003da5:	89 e5                	mov    %esp,%ebp
c0003da7:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:135
	/* pcb都位于内核空间,包括用户进程的pcb也是在内核空间 */
	struct task_struct* thread = get_kernel_pages(1);
c0003daa:	83 ec 0c             	sub    $0xc,%esp
c0003dad:	6a 01                	push   $0x1
c0003daf:	e8 15 ec ff ff       	call   c00029c9 <get_kernel_pages>
c0003db4:	83 c4 10             	add    $0x10,%esp
c0003db7:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:137

	init_thread(thread, name, prio);			//初始化线程PCB
c0003dba:	83 ec 04             	sub    $0x4,%esp
c0003dbd:	ff 75 0c             	pushl  0xc(%ebp)
c0003dc0:	ff 75 08             	pushl  0x8(%ebp)
c0003dc3:	ff 75 f4             	pushl  -0xc(%ebp)
c0003dc6:	e8 d3 fe ff ff       	call   c0003c9e <init_thread>
c0003dcb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:138
	thread_create(thread, function, func_arg);	//初始化线程栈结构体
c0003dce:	83 ec 04             	sub    $0x4,%esp
c0003dd1:	ff 75 14             	pushl  0x14(%ebp)
c0003dd4:	ff 75 10             	pushl  0x10(%ebp)
c0003dd7:	ff 75 f4             	pushl  -0xc(%ebp)
c0003dda:	e8 48 fe ff ff       	call   c0003c27 <thread_create>
c0003ddf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:140
	
	ASSERT(!elem_find(&thread_ready_list, &thread->general_tag));	// 确保之前不在队列中
c0003de2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003de5:	83 c0 44             	add    $0x44,%eax
c0003de8:	83 ec 08             	sub    $0x8,%esp
c0003deb:	50                   	push   %eax
c0003dec:	68 8c 11 01 c0       	push   $0xc001118c
c0003df1:	e8 c6 08 00 00       	call   c00046bc <elem_find>
c0003df6:	83 c4 10             	add    $0x10,%esp
c0003df9:	85 c0                	test   %eax,%eax
c0003dfb:	74 1c                	je     c0003e19 <thread_start+0x75>
/work/x86_os_my/thread/thread.c:140 (discriminator 1)
c0003dfd:	68 54 c5 00 c0       	push   $0xc000c554
c0003e02:	68 90 c8 00 c0       	push   $0xc000c890
c0003e07:	68 8c 00 00 00       	push   $0x8c
c0003e0c:	68 89 c5 00 c0       	push   $0xc000c589
c0003e11:	e8 0b e5 ff ff       	call   c0002321 <panic_spin>
c0003e16:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:141
	list_append(&thread_ready_list, &thread->general_tag);			// 加入就绪线程队列
c0003e19:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003e1c:	83 c0 44             	add    $0x44,%eax
c0003e1f:	83 ec 08             	sub    $0x8,%esp
c0003e22:	50                   	push   %eax
c0003e23:	68 8c 11 01 c0       	push   $0xc001118c
c0003e28:	e8 15 08 00 00       	call   c0004642 <list_append>
c0003e2d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:143

	ASSERT(!elem_find(&thread_all_list, &thread->all_list_tag));
c0003e30:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003e33:	83 c0 4c             	add    $0x4c,%eax
c0003e36:	83 ec 08             	sub    $0x8,%esp
c0003e39:	50                   	push   %eax
c0003e3a:	68 9c 11 01 c0       	push   $0xc001119c
c0003e3f:	e8 78 08 00 00       	call   c00046bc <elem_find>
c0003e44:	83 c4 10             	add    $0x10,%esp
c0003e47:	85 c0                	test   %eax,%eax
c0003e49:	74 1c                	je     c0003e67 <thread_start+0xc3>
/work/x86_os_my/thread/thread.c:143 (discriminator 1)
c0003e4b:	68 9c c5 00 c0       	push   $0xc000c59c
c0003e50:	68 90 c8 00 c0       	push   $0xc000c890
c0003e55:	68 8f 00 00 00       	push   $0x8f
c0003e5a:	68 89 c5 00 c0       	push   $0xc000c589
c0003e5f:	e8 bd e4 ff ff       	call   c0002321 <panic_spin>
c0003e64:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:144
	list_append(&thread_all_list, &thread->all_list_tag);			// 加入全部线程队列
c0003e67:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003e6a:	83 c0 4c             	add    $0x4c,%eax
c0003e6d:	83 ec 08             	sub    $0x8,%esp
c0003e70:	50                   	push   %eax
c0003e71:	68 9c 11 01 c0       	push   $0xc001119c
c0003e76:	e8 c7 07 00 00       	call   c0004642 <list_append>
c0003e7b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:160
	 * 在执行 ret 后，esp 指向的数值被弹岀到 eip。
	 * 处理器会去执行 kernel_thread 函数。
	 * 在执行 kernel_thread 时，处理器以为栈顶是返回地址，其实只是一个假的占位置的变量 unused_retaddr！
	 * 接着会调用函数 function(func_arg) */
	//asm volatile ("movl %0, %%esp; pop %%ebp; pop %%ebx; pop %%edi; pop %%esi; ret" : : "g" (thread->self_kstack) : "memory");
	return thread;
c0003e7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/thread/thread.c:161
}
c0003e81:	c9                   	leave  
c0003e82:	c3                   	ret    

c0003e83 <make_main_thread>:
make_main_thread():
/work/x86_os_my/thread/thread.c:165


/* 将kernel中的main函数完善为主线程 */
static void make_main_thread(void) {
c0003e83:	55                   	push   %ebp
c0003e84:	89 e5                	mov    %esp,%ebp
c0003e86:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:170
	/* 因为main线程早已运行,咱们在loader.S中进入内核时的mov esp, 0xc009f000设置了栈顶，也预留了pcb, 地址为0xc009e000
	 * 主线程不需要再为PCB申请页，只需要通过 init_thread 填充PCB成员：名称和优先级等。
	 * 也不需要再通过 thread_create 构造它的线程栈。
	 */
	g_main_thread = running_thread();	//用栈指针的高20位，当做当前线程的PCB
c0003e89:	e8 1c fd ff ff       	call   c0003baa <running_thread>
c0003e8e:	a3 b0 11 01 c0       	mov    %eax,0xc00111b0
/work/x86_os_my/thread/thread.c:171
	init_thread(g_main_thread, "main", 31);
c0003e93:	a1 b0 11 01 c0       	mov    0xc00111b0,%eax
c0003e98:	83 ec 04             	sub    $0x4,%esp
c0003e9b:	6a 1f                	push   $0x1f
c0003e9d:	68 d0 c5 00 c0       	push   $0xc000c5d0
c0003ea2:	50                   	push   %eax
c0003ea3:	e8 f6 fd ff ff       	call   c0003c9e <init_thread>
c0003ea8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:175

	/* main函数是当前线程,当前线程不在thread_ready_list中,
	 * 所以只将其加在thread_all_list中. */
	ASSERT(!elem_find(&thread_all_list, &g_main_thread->all_list_tag));
c0003eab:	a1 b0 11 01 c0       	mov    0xc00111b0,%eax
c0003eb0:	83 c0 4c             	add    $0x4c,%eax
c0003eb3:	83 ec 08             	sub    $0x8,%esp
c0003eb6:	50                   	push   %eax
c0003eb7:	68 9c 11 01 c0       	push   $0xc001119c
c0003ebc:	e8 fb 07 00 00       	call   c00046bc <elem_find>
c0003ec1:	83 c4 10             	add    $0x10,%esp
c0003ec4:	85 c0                	test   %eax,%eax
c0003ec6:	74 1c                	je     c0003ee4 <make_main_thread+0x61>
/work/x86_os_my/thread/thread.c:175 (discriminator 1)
c0003ec8:	68 d8 c5 00 c0       	push   $0xc000c5d8
c0003ecd:	68 a0 c8 00 c0       	push   $0xc000c8a0
c0003ed2:	68 af 00 00 00       	push   $0xaf
c0003ed7:	68 89 c5 00 c0       	push   $0xc000c589
c0003edc:	e8 40 e4 ff ff       	call   c0002321 <panic_spin>
c0003ee1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:176
	list_append(&thread_all_list, &g_main_thread->all_list_tag);
c0003ee4:	a1 b0 11 01 c0       	mov    0xc00111b0,%eax
c0003ee9:	83 c0 4c             	add    $0x4c,%eax
c0003eec:	83 ec 08             	sub    $0x8,%esp
c0003eef:	50                   	push   %eax
c0003ef0:	68 9c 11 01 c0       	push   $0xc001119c
c0003ef5:	e8 48 07 00 00       	call   c0004642 <list_append>
c0003efa:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:177
}
c0003efd:	90                   	nop
c0003efe:	c9                   	leave  
c0003eff:	c3                   	ret    

c0003f00 <schedule>:
schedule():
/work/x86_os_my/thread/thread.c:187
（2）调度器 schedule。
（3）任务切换函数 switch_to。
*/
/* 实现任务调度 */
void schedule()
{
c0003f00:	55                   	push   %ebp
c0003f01:	89 e5                	mov    %esp,%ebp
c0003f03:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:188
	ASSERT(intr_get_status() == INTR_OFF);
c0003f06:	e8 7c da ff ff       	call   c0001987 <intr_get_status>
c0003f0b:	85 c0                	test   %eax,%eax
c0003f0d:	74 1c                	je     c0003f2b <schedule+0x2b>
/work/x86_os_my/thread/thread.c:188 (discriminator 1)
c0003f0f:	68 13 c6 00 c0       	push   $0xc000c613
c0003f14:	68 b4 c8 00 c0       	push   $0xc000c8b4
c0003f19:	68 bc 00 00 00       	push   $0xbc
c0003f1e:	68 89 c5 00 c0       	push   $0xc000c589
c0003f23:	e8 f9 e3 ff ff       	call   c0002321 <panic_spin>
c0003f28:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:191

	/* 换下 */
	struct task_struct* cur = running_thread(); 
c0003f2b:	e8 7a fc ff ff       	call   c0003baa <running_thread>
c0003f30:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:192
	if (cur->status == TASK_RUNNING) { // 若此线程只是cpu时间片到了,将其加入到就绪队列尾
c0003f33:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003f36:	8b 40 08             	mov    0x8(%eax),%eax
c0003f39:	85 c0                	test   %eax,%eax
c0003f3b:	75 65                	jne    c0003fa2 <schedule+0xa2>
/work/x86_os_my/thread/thread.c:193
		ASSERT(!elem_find(&thread_ready_list, &cur->general_tag));
c0003f3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003f40:	83 c0 44             	add    $0x44,%eax
c0003f43:	83 ec 08             	sub    $0x8,%esp
c0003f46:	50                   	push   %eax
c0003f47:	68 8c 11 01 c0       	push   $0xc001118c
c0003f4c:	e8 6b 07 00 00       	call   c00046bc <elem_find>
c0003f51:	83 c4 10             	add    $0x10,%esp
c0003f54:	85 c0                	test   %eax,%eax
c0003f56:	74 1c                	je     c0003f74 <schedule+0x74>
/work/x86_os_my/thread/thread.c:193 (discriminator 1)
c0003f58:	68 34 c6 00 c0       	push   $0xc000c634
c0003f5d:	68 b4 c8 00 c0       	push   $0xc000c8b4
c0003f62:	68 c1 00 00 00       	push   $0xc1
c0003f67:	68 89 c5 00 c0       	push   $0xc000c589
c0003f6c:	e8 b0 e3 ff ff       	call   c0002321 <panic_spin>
c0003f71:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:194
		list_append(&thread_ready_list, &cur->general_tag);
c0003f74:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003f77:	83 c0 44             	add    $0x44,%eax
c0003f7a:	83 ec 08             	sub    $0x8,%esp
c0003f7d:	50                   	push   %eax
c0003f7e:	68 8c 11 01 c0       	push   $0xc001118c
c0003f83:	e8 ba 06 00 00       	call   c0004642 <list_append>
c0003f88:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:195
		cur->ticks = cur->priority;     // 重新将当前线程的ticks再重置为其priority;
c0003f8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003f8e:	0f b6 50 1c          	movzbl 0x1c(%eax),%edx
c0003f92:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003f95:	88 50 1d             	mov    %dl,0x1d(%eax)
/work/x86_os_my/thread/thread.c:196
		cur->status = TASK_READY;
c0003f98:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003f9b:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/thread/thread.c:203
		/* 若此线程需要某事件发生后才能继续上cpu运行,
		不需要将其加入队列,因为当前线程不在就绪队列中。*/
	}

	/* 如果就绪队列中没有可运行的任务,就唤醒idle */
	if (list_empty(&thread_ready_list)) {
c0003fa2:	83 ec 0c             	sub    $0xc,%esp
c0003fa5:	68 8c 11 01 c0       	push   $0xc001118c
c0003faa:	e8 da 07 00 00       	call   c0004789 <list_empty>
c0003faf:	83 c4 10             	add    $0x10,%esp
c0003fb2:	85 c0                	test   %eax,%eax
c0003fb4:	74 11                	je     c0003fc7 <schedule+0xc7>
/work/x86_os_my/thread/thread.c:204
		thread_unblock(idle_thread);
c0003fb6:	a1 ac 11 01 c0       	mov    0xc00111ac,%eax
c0003fbb:	83 ec 0c             	sub    $0xc,%esp
c0003fbe:	50                   	push   %eax
c0003fbf:	e8 ec 00 00 00       	call   c00040b0 <thread_unblock>
c0003fc4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:208
	}
	
	/* 换上 */
	ASSERT(!list_empty(&thread_ready_list));
c0003fc7:	83 ec 0c             	sub    $0xc,%esp
c0003fca:	68 8c 11 01 c0       	push   $0xc001118c
c0003fcf:	e8 b5 07 00 00       	call   c0004789 <list_empty>
c0003fd4:	83 c4 10             	add    $0x10,%esp
c0003fd7:	85 c0                	test   %eax,%eax
c0003fd9:	74 1c                	je     c0003ff7 <schedule+0xf7>
/work/x86_os_my/thread/thread.c:208 (discriminator 1)
c0003fdb:	68 68 c6 00 c0       	push   $0xc000c668
c0003fe0:	68 b4 c8 00 c0       	push   $0xc000c8b4
c0003fe5:	68 d0 00 00 00       	push   $0xd0
c0003fea:	68 89 c5 00 c0       	push   $0xc000c589
c0003fef:	e8 2d e3 ff ff       	call   c0002321 <panic_spin>
c0003ff4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:209
	g_thread_tag = NULL;	  // g_thread_tag清空
c0003ff7:	c7 05 68 05 01 c0 00 	movl   $0x0,0xc0010568
c0003ffe:	00 00 00 
/work/x86_os_my/thread/thread.c:211
	/* 将thread_ready_list队列中的第一个就绪线程弹出,准备将其调度上cpu. */
	g_thread_tag = list_pop(&thread_ready_list);   
c0004001:	83 ec 0c             	sub    $0xc,%esp
c0004004:	68 8c 11 01 c0       	push   $0xc001118c
c0004009:	e8 8c 06 00 00       	call   c000469a <list_pop>
c000400e:	83 c4 10             	add    $0x10,%esp
c0004011:	a3 68 05 01 c0       	mov    %eax,0xc0010568
/work/x86_os_my/thread/thread.c:212
	struct task_struct* next = elem2entry(struct task_struct, general_tag, g_thread_tag);
c0004016:	a1 68 05 01 c0       	mov    0xc0010568,%eax
c000401b:	83 e8 44             	sub    $0x44,%eax
c000401e:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/thread/thread.c:213
	next->status = TASK_RUNNING;
c0004021:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0004024:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
/work/x86_os_my/thread/thread.c:217
	
	/* 1.激活线程或进程的页表,【更新CR3寄存器】
	 * 2.用户进程，更新tss中的esp0为进程的特权级0的栈 */
	process_activate(next);
c000402b:	83 ec 0c             	sub    $0xc,%esp
c000402e:	ff 75 f0             	pushl  -0x10(%ebp)
c0004031:	e8 0c 14 00 00       	call   c0005442 <process_activate>
c0004036:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:219

	switch_to(cur, next);
c0004039:	83 ec 08             	sub    $0x8,%esp
c000403c:	ff 75 f0             	pushl  -0x10(%ebp)
c000403f:	ff 75 f4             	pushl  -0xc(%ebp)
c0004042:	e8 69 07 00 00       	call   c00047b0 <switch_to>
c0004047:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:220
}
c000404a:	90                   	nop
c000404b:	c9                   	leave  
c000404c:	c3                   	ret    

c000404d <thread_block>:
thread_block():
/work/x86_os_my/thread/thread.c:223

/* 当前线程将自己阻塞,标志其状态为stat. */
void thread_block(enum task_status stat) {
c000404d:	55                   	push   %ebp
c000404e:	89 e5                	mov    %esp,%ebp
c0004050:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:225
	/* stat取值为TASK_BLOCKED,TASK_WAITING,TASK_HANGING,也就是只有这三种状态才不会被调度*/
	ASSERT(((stat == TASK_BLOCKED) || (stat == TASK_WAITING) || (stat == TASK_HANGING)));
c0004053:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c0004057:	74 28                	je     c0004081 <thread_block+0x34>
/work/x86_os_my/thread/thread.c:225 (discriminator 1)
c0004059:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
c000405d:	74 22                	je     c0004081 <thread_block+0x34>
/work/x86_os_my/thread/thread.c:225 (discriminator 2)
c000405f:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
c0004063:	74 1c                	je     c0004081 <thread_block+0x34>
/work/x86_os_my/thread/thread.c:225 (discriminator 3)
c0004065:	68 88 c6 00 c0       	push   $0xc000c688
c000406a:	68 c0 c8 00 c0       	push   $0xc000c8c0
c000406f:	68 e1 00 00 00       	push   $0xe1
c0004074:	68 89 c5 00 c0       	push   $0xc000c589
c0004079:	e8 a3 e2 ff ff       	call   c0002321 <panic_spin>
c000407e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:226
	enum intr_status old_status = intr_disable();
c0004081:	e8 ba d8 ff ff       	call   c0001940 <intr_disable>
c0004086:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:228
	
	struct task_struct* cur_thread = running_thread();
c0004089:	e8 1c fb ff ff       	call   c0003baa <running_thread>
c000408e:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/thread/thread.c:229
	cur_thread->status = stat;
c0004091:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0004094:	8b 55 08             	mov    0x8(%ebp),%edx
c0004097:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/thread/thread.c:230
	schedule();
c000409a:	e8 61 fe ff ff       	call   c0003f00 <schedule>
/work/x86_os_my/thread/thread.c:233
	
	/* 待当前线程被解除阻塞后才继续运行下面的intr_set_status */
	intr_set_status(old_status);
c000409f:	83 ec 0c             	sub    $0xc,%esp
c00040a2:	ff 75 f4             	pushl  -0xc(%ebp)
c00040a5:	e8 bf d8 ff ff       	call   c0001969 <intr_set_status>
c00040aa:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:234
}
c00040ad:	90                   	nop
c00040ae:	c9                   	leave  
c00040af:	c3                   	ret    

c00040b0 <thread_unblock>:
thread_unblock():
/work/x86_os_my/thread/thread.c:237

/* 将线程pthread解除阻塞 */
void thread_unblock(struct task_struct* pthread) {
c00040b0:	55                   	push   %ebp
c00040b1:	89 e5                	mov    %esp,%ebp
c00040b3:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:238
	enum intr_status old_status = intr_disable();
c00040b6:	e8 85 d8 ff ff       	call   c0001940 <intr_disable>
c00040bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:239
	ASSERT(((pthread->status == TASK_BLOCKED) || (pthread->status == TASK_WAITING) || (pthread->status == TASK_HANGING)));
c00040be:	8b 45 08             	mov    0x8(%ebp),%eax
c00040c1:	8b 40 08             	mov    0x8(%eax),%eax
c00040c4:	83 f8 02             	cmp    $0x2,%eax
c00040c7:	74 32                	je     c00040fb <thread_unblock+0x4b>
/work/x86_os_my/thread/thread.c:239 (discriminator 1)
c00040c9:	8b 45 08             	mov    0x8(%ebp),%eax
c00040cc:	8b 40 08             	mov    0x8(%eax),%eax
c00040cf:	83 f8 03             	cmp    $0x3,%eax
c00040d2:	74 27                	je     c00040fb <thread_unblock+0x4b>
/work/x86_os_my/thread/thread.c:239 (discriminator 2)
c00040d4:	8b 45 08             	mov    0x8(%ebp),%eax
c00040d7:	8b 40 08             	mov    0x8(%eax),%eax
c00040da:	83 f8 04             	cmp    $0x4,%eax
c00040dd:	74 1c                	je     c00040fb <thread_unblock+0x4b>
/work/x86_os_my/thread/thread.c:239 (discriminator 3)
c00040df:	68 d8 c6 00 c0       	push   $0xc000c6d8
c00040e4:	68 d0 c8 00 c0       	push   $0xc000c8d0
c00040e9:	68 ef 00 00 00       	push   $0xef
c00040ee:	68 89 c5 00 c0       	push   $0xc000c589
c00040f3:	e8 29 e2 ff ff       	call   c0002321 <panic_spin>
c00040f8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:241
	
	if (pthread->status != TASK_READY) {
c00040fb:	8b 45 08             	mov    0x8(%ebp),%eax
c00040fe:	8b 40 08             	mov    0x8(%eax),%eax
c0004101:	83 f8 01             	cmp    $0x1,%eax
c0004104:	0f 84 8f 00 00 00    	je     c0004199 <thread_unblock+0xe9>
/work/x86_os_my/thread/thread.c:242
		ASSERT(!elem_find(&thread_ready_list, &pthread->general_tag));
c000410a:	8b 45 08             	mov    0x8(%ebp),%eax
c000410d:	83 c0 44             	add    $0x44,%eax
c0004110:	83 ec 08             	sub    $0x8,%esp
c0004113:	50                   	push   %eax
c0004114:	68 8c 11 01 c0       	push   $0xc001118c
c0004119:	e8 9e 05 00 00       	call   c00046bc <elem_find>
c000411e:	83 c4 10             	add    $0x10,%esp
c0004121:	85 c0                	test   %eax,%eax
c0004123:	74 1c                	je     c0004141 <thread_unblock+0x91>
/work/x86_os_my/thread/thread.c:242 (discriminator 1)
c0004125:	68 48 c7 00 c0       	push   $0xc000c748
c000412a:	68 d0 c8 00 c0       	push   $0xc000c8d0
c000412f:	68 f2 00 00 00       	push   $0xf2
c0004134:	68 89 c5 00 c0       	push   $0xc000c589
c0004139:	e8 e3 e1 ff ff       	call   c0002321 <panic_spin>
c000413e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:243
		if (elem_find(&thread_ready_list, &pthread->general_tag)) {
c0004141:	8b 45 08             	mov    0x8(%ebp),%eax
c0004144:	83 c0 44             	add    $0x44,%eax
c0004147:	83 ec 08             	sub    $0x8,%esp
c000414a:	50                   	push   %eax
c000414b:	68 8c 11 01 c0       	push   $0xc001118c
c0004150:	e8 67 05 00 00       	call   c00046bc <elem_find>
c0004155:	83 c4 10             	add    $0x10,%esp
c0004158:	85 c0                	test   %eax,%eax
c000415a:	74 1c                	je     c0004178 <thread_unblock+0xc8>
/work/x86_os_my/thread/thread.c:244
			PANIC("thread_unblock: blocked thread in ready_list\n");
c000415c:	68 80 c7 00 c0       	push   $0xc000c780
c0004161:	68 d0 c8 00 c0       	push   $0xc000c8d0
c0004166:	68 f4 00 00 00       	push   $0xf4
c000416b:	68 89 c5 00 c0       	push   $0xc000c589
c0004170:	e8 ac e1 ff ff       	call   c0002321 <panic_spin>
c0004175:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:246
		}
		list_push(&thread_ready_list, &pthread->general_tag);	// 放到队列的最前面,使其尽快得到调度
c0004178:	8b 45 08             	mov    0x8(%ebp),%eax
c000417b:	83 c0 44             	add    $0x44,%eax
c000417e:	83 ec 08             	sub    $0x8,%esp
c0004181:	50                   	push   %eax
c0004182:	68 8c 11 01 c0       	push   $0xc001118c
c0004187:	e8 98 04 00 00       	call   c0004624 <list_push>
c000418c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:247
		pthread->status = TASK_READY;
c000418f:	8b 45 08             	mov    0x8(%ebp),%eax
c0004192:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/thread/thread.c:250
	}
	
	intr_set_status(old_status);
c0004199:	83 ec 0c             	sub    $0xc,%esp
c000419c:	ff 75 f4             	pushl  -0xc(%ebp)
c000419f:	e8 c5 d7 ff ff       	call   c0001969 <intr_set_status>
c00041a4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:251
}
c00041a7:	90                   	nop
c00041a8:	c9                   	leave  
c00041a9:	c3                   	ret    

c00041aa <thread_yield>:
thread_yield():
/work/x86_os_my/thread/thread.c:254

/* 主动让出cpu，换其它线程运行，但状态仍是ready */
void thread_yield(void) {
c00041aa:	55                   	push   %ebp
c00041ab:	89 e5                	mov    %esp,%ebp
c00041ad:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:255
	struct task_struct* cur = running_thread();
c00041b0:	e8 f5 f9 ff ff       	call   c0003baa <running_thread>
c00041b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:256
	enum intr_status old_status = intr_disable();
c00041b8:	e8 83 d7 ff ff       	call   c0001940 <intr_disable>
c00041bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/thread/thread.c:257
	ASSERT(!elem_find(&thread_ready_list, &cur->general_tag));
c00041c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00041c3:	83 c0 44             	add    $0x44,%eax
c00041c6:	83 ec 08             	sub    $0x8,%esp
c00041c9:	50                   	push   %eax
c00041ca:	68 8c 11 01 c0       	push   $0xc001118c
c00041cf:	e8 e8 04 00 00       	call   c00046bc <elem_find>
c00041d4:	83 c4 10             	add    $0x10,%esp
c00041d7:	85 c0                	test   %eax,%eax
c00041d9:	74 1c                	je     c00041f7 <thread_yield+0x4d>
/work/x86_os_my/thread/thread.c:257 (discriminator 1)
c00041db:	68 34 c6 00 c0       	push   $0xc000c634
c00041e0:	68 e0 c8 00 c0       	push   $0xc000c8e0
c00041e5:	68 01 01 00 00       	push   $0x101
c00041ea:	68 89 c5 00 c0       	push   $0xc000c589
c00041ef:	e8 2d e1 ff ff       	call   c0002321 <panic_spin>
c00041f4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:258
	list_append(&thread_ready_list, &cur->general_tag);
c00041f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00041fa:	83 c0 44             	add    $0x44,%eax
c00041fd:	83 ec 08             	sub    $0x8,%esp
c0004200:	50                   	push   %eax
c0004201:	68 8c 11 01 c0       	push   $0xc001118c
c0004206:	e8 37 04 00 00       	call   c0004642 <list_append>
c000420b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:259
	cur->status = TASK_READY;
c000420e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004211:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/thread/thread.c:260
	schedule();
c0004218:	e8 e3 fc ff ff       	call   c0003f00 <schedule>
/work/x86_os_my/thread/thread.c:261
	intr_set_status(old_status);
c000421d:	83 ec 0c             	sub    $0xc,%esp
c0004220:	ff 75 f0             	pushl  -0x10(%ebp)
c0004223:	e8 41 d7 ff ff       	call   c0001969 <intr_set_status>
c0004228:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:262
}
c000422b:	90                   	nop
c000422c:	c9                   	leave  
c000422d:	c3                   	ret    

c000422e <pad_print>:
pad_print():
/work/x86_os_my/thread/thread.c:266


/* 前边填充空格 后边按format格式输出ptr的内容 输出的总长度都是buf_len个字符 */
static void pad_print(char* buf, int32_t buf_len, void* ptr, char format) {
c000422e:	55                   	push   %ebp
c000422f:	89 e5                	mov    %esp,%ebp
c0004231:	83 ec 28             	sub    $0x28,%esp
c0004234:	8b 45 14             	mov    0x14(%ebp),%eax
c0004237:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/thread/thread.c:267
	memset(buf, 0, buf_len);
c000423a:	8b 45 0c             	mov    0xc(%ebp),%eax
c000423d:	83 ec 04             	sub    $0x4,%esp
c0004240:	50                   	push   %eax
c0004241:	6a 00                	push   $0x0
c0004243:	ff 75 08             	pushl  0x8(%ebp)
c0004246:	e8 78 f5 ff ff       	call   c00037c3 <memset>
c000424b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:268
	uint8_t out_pad_0idx = 0;
c000424e:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/thread/thread.c:269
	switch(format) {
c0004252:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
c0004256:	83 f8 73             	cmp    $0x73,%eax
c0004259:	74 0c                	je     c0004267 <pad_print+0x39>
c000425b:	83 f8 78             	cmp    $0x78,%eax
c000425e:	74 40                	je     c00042a0 <pad_print+0x72>
c0004260:	83 f8 64             	cmp    $0x64,%eax
c0004263:	74 1d                	je     c0004282 <pad_print+0x54>
c0004265:	eb 55                	jmp    c00042bc <pad_print+0x8e>
/work/x86_os_my/thread/thread.c:271
		case 's':
		out_pad_0idx = sprintf(buf, "%s", ptr);
c0004267:	83 ec 04             	sub    $0x4,%esp
c000426a:	ff 75 10             	pushl  0x10(%ebp)
c000426d:	68 ae c7 00 c0       	push   $0xc000c7ae
c0004272:	ff 75 08             	pushl  0x8(%ebp)
c0004275:	e8 b0 19 00 00       	call   c0005c2a <sprintf>
c000427a:	83 c4 10             	add    $0x10,%esp
c000427d:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/thread/thread.c:272
		break;
c0004280:	eb 3a                	jmp    c00042bc <pad_print+0x8e>
/work/x86_os_my/thread/thread.c:274
		case 'd':
		out_pad_0idx = sprintf(buf, "%d", *((int16_t*)ptr));
c0004282:	8b 45 10             	mov    0x10(%ebp),%eax
c0004285:	0f b7 00             	movzwl (%eax),%eax
c0004288:	98                   	cwtl   
c0004289:	83 ec 04             	sub    $0x4,%esp
c000428c:	50                   	push   %eax
c000428d:	68 b1 c7 00 c0       	push   $0xc000c7b1
c0004292:	ff 75 08             	pushl  0x8(%ebp)
c0004295:	e8 90 19 00 00       	call   c0005c2a <sprintf>
c000429a:	83 c4 10             	add    $0x10,%esp
c000429d:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/thread/thread.c:276
		case 'x':
		out_pad_0idx = sprintf(buf, "%x", *((uint32_t*)ptr));
c00042a0:	8b 45 10             	mov    0x10(%ebp),%eax
c00042a3:	8b 00                	mov    (%eax),%eax
c00042a5:	83 ec 04             	sub    $0x4,%esp
c00042a8:	50                   	push   %eax
c00042a9:	68 b4 c7 00 c0       	push   $0xc000c7b4
c00042ae:	ff 75 08             	pushl  0x8(%ebp)
c00042b1:	e8 74 19 00 00       	call   c0005c2a <sprintf>
c00042b6:	83 c4 10             	add    $0x10,%esp
c00042b9:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/thread/thread.c:278
	}
	while(out_pad_0idx < buf_len) { // 以空格填充
c00042bc:	eb 16                	jmp    c00042d4 <pad_print+0xa6>
/work/x86_os_my/thread/thread.c:279
		buf[out_pad_0idx] = ' ';
c00042be:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c00042c2:	8b 45 08             	mov    0x8(%ebp),%eax
c00042c5:	01 d0                	add    %edx,%eax
c00042c7:	c6 00 20             	movb   $0x20,(%eax)
/work/x86_os_my/thread/thread.c:280
		out_pad_0idx++;
c00042ca:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00042ce:	83 c0 01             	add    $0x1,%eax
c00042d1:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/thread/thread.c:278
		case 'd':
		out_pad_0idx = sprintf(buf, "%d", *((int16_t*)ptr));
		case 'x':
		out_pad_0idx = sprintf(buf, "%x", *((uint32_t*)ptr));
	}
	while(out_pad_0idx < buf_len) { // 以空格填充
c00042d4:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00042d8:	3b 45 0c             	cmp    0xc(%ebp),%eax
c00042db:	7c e1                	jl     c00042be <pad_print+0x90>
/work/x86_os_my/thread/thread.c:282
		buf[out_pad_0idx] = ' ';
		out_pad_0idx++;
	}
	sys_write(stdout_no, buf, buf_len - 1);
c00042dd:	8b 45 0c             	mov    0xc(%ebp),%eax
c00042e0:	83 e8 01             	sub    $0x1,%eax
c00042e3:	83 ec 04             	sub    $0x4,%esp
c00042e6:	50                   	push   %eax
c00042e7:	ff 75 08             	pushl  0x8(%ebp)
c00042ea:	6a 01                	push   $0x1
c00042ec:	e8 88 34 00 00       	call   c0007779 <sys_write>
c00042f1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:283
}
c00042f4:	90                   	nop
c00042f5:	c9                   	leave  
c00042f6:	c3                   	ret    

c00042f7 <elem2thread_info>:
elem2thread_info():
/work/x86_os_my/thread/thread.c:286

/* 用于在list_traversal函数中的回调函数,用于针对线程队列的处理 */
static bool elem2thread_info(struct list_elem* pelem, int arg UNUSED) {
c00042f7:	55                   	push   %ebp
c00042f8:	89 e5                	mov    %esp,%ebp
c00042fa:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/thread/thread.c:287
	struct task_struct* pthread = elem2entry(struct task_struct, all_list_tag, pelem);
c00042fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0004300:	83 e8 4c             	sub    $0x4c,%eax
c0004303:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:288
	char out_pad[16] = {0};
c0004306:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c000430d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0004314:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c000431b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/thread/thread.c:290

	pad_print(out_pad, 16, &pthread->pid, 'd');
c0004322:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004325:	83 c0 04             	add    $0x4,%eax
c0004328:	6a 64                	push   $0x64
c000432a:	50                   	push   %eax
c000432b:	6a 10                	push   $0x10
c000432d:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0004330:	50                   	push   %eax
c0004331:	e8 f8 fe ff ff       	call   c000422e <pad_print>
c0004336:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:292

	if (pthread->parent_pid == -1) {
c0004339:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000433c:	0f b7 80 10 01 00 00 	movzwl 0x110(%eax),%eax
c0004343:	66 83 f8 ff          	cmp    $0xffff,%ax
c0004347:	75 17                	jne    c0004360 <elem2thread_info+0x69>
/work/x86_os_my/thread/thread.c:293
		pad_print(out_pad, 16, "NULL", 's');
c0004349:	6a 73                	push   $0x73
c000434b:	68 b7 c7 00 c0       	push   $0xc000c7b7
c0004350:	6a 10                	push   $0x10
c0004352:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0004355:	50                   	push   %eax
c0004356:	e8 d3 fe ff ff       	call   c000422e <pad_print>
c000435b:	83 c4 10             	add    $0x10,%esp
c000435e:	eb 19                	jmp    c0004379 <elem2thread_info+0x82>
/work/x86_os_my/thread/thread.c:295
	} else {
		pad_print(out_pad, 16, &pthread->parent_pid, 'd');
c0004360:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004363:	05 10 01 00 00       	add    $0x110,%eax
c0004368:	6a 64                	push   $0x64
c000436a:	50                   	push   %eax
c000436b:	6a 10                	push   $0x10
c000436d:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0004370:	50                   	push   %eax
c0004371:	e8 b8 fe ff ff       	call   c000422e <pad_print>
c0004376:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:298
	}

	switch (pthread->status) {
c0004379:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000437c:	8b 40 08             	mov    0x8(%eax),%eax
c000437f:	83 f8 05             	cmp    $0x5,%eax
c0004382:	0f 87 91 00 00 00    	ja     c0004419 <elem2thread_info+0x122>
c0004388:	8b 04 85 04 c8 00 c0 	mov    -0x3fff37fc(,%eax,4),%eax
c000438f:	ff e0                	jmp    *%eax
/work/x86_os_my/thread/thread.c:300
		case 0:
		pad_print(out_pad, 16, "RUNNING", 's');
c0004391:	6a 73                	push   $0x73
c0004393:	68 bc c7 00 c0       	push   $0xc000c7bc
c0004398:	6a 10                	push   $0x10
c000439a:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c000439d:	50                   	push   %eax
c000439e:	e8 8b fe ff ff       	call   c000422e <pad_print>
c00043a3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:301
		break;
c00043a6:	eb 71                	jmp    c0004419 <elem2thread_info+0x122>
/work/x86_os_my/thread/thread.c:303
		case 1:
		pad_print(out_pad, 16, "READY", 's');
c00043a8:	6a 73                	push   $0x73
c00043aa:	68 c4 c7 00 c0       	push   $0xc000c7c4
c00043af:	6a 10                	push   $0x10
c00043b1:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c00043b4:	50                   	push   %eax
c00043b5:	e8 74 fe ff ff       	call   c000422e <pad_print>
c00043ba:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:304
		break;
c00043bd:	eb 5a                	jmp    c0004419 <elem2thread_info+0x122>
/work/x86_os_my/thread/thread.c:306
		case 2:
		pad_print(out_pad, 16, "BLOCKED", 's');
c00043bf:	6a 73                	push   $0x73
c00043c1:	68 ca c7 00 c0       	push   $0xc000c7ca
c00043c6:	6a 10                	push   $0x10
c00043c8:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c00043cb:	50                   	push   %eax
c00043cc:	e8 5d fe ff ff       	call   c000422e <pad_print>
c00043d1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:307
		break;
c00043d4:	eb 43                	jmp    c0004419 <elem2thread_info+0x122>
/work/x86_os_my/thread/thread.c:309
		case 3:
		pad_print(out_pad, 16, "WAITING", 's');
c00043d6:	6a 73                	push   $0x73
c00043d8:	68 d2 c7 00 c0       	push   $0xc000c7d2
c00043dd:	6a 10                	push   $0x10
c00043df:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c00043e2:	50                   	push   %eax
c00043e3:	e8 46 fe ff ff       	call   c000422e <pad_print>
c00043e8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:310
		break;
c00043eb:	eb 2c                	jmp    c0004419 <elem2thread_info+0x122>
/work/x86_os_my/thread/thread.c:312
		case 4:
		pad_print(out_pad, 16, "HANGING", 's');
c00043ed:	6a 73                	push   $0x73
c00043ef:	68 da c7 00 c0       	push   $0xc000c7da
c00043f4:	6a 10                	push   $0x10
c00043f6:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c00043f9:	50                   	push   %eax
c00043fa:	e8 2f fe ff ff       	call   c000422e <pad_print>
c00043ff:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:313
		break;
c0004402:	eb 15                	jmp    c0004419 <elem2thread_info+0x122>
/work/x86_os_my/thread/thread.c:315
		case 5:
		pad_print(out_pad, 16, "DIED", 's');
c0004404:	6a 73                	push   $0x73
c0004406:	68 e2 c7 00 c0       	push   $0xc000c7e2
c000440b:	6a 10                	push   $0x10
c000440d:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0004410:	50                   	push   %eax
c0004411:	e8 18 fe ff ff       	call   c000422e <pad_print>
c0004416:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:317
	}
	pad_print(out_pad, 16, &pthread->elapsed_ticks, 'x');
c0004419:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000441c:	83 c0 20             	add    $0x20,%eax
c000441f:	6a 78                	push   $0x78
c0004421:	50                   	push   %eax
c0004422:	6a 10                	push   $0x10
c0004424:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0004427:	50                   	push   %eax
c0004428:	e8 01 fe ff ff       	call   c000422e <pad_print>
c000442d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:319

	memset(out_pad, 0, 16);
c0004430:	83 ec 04             	sub    $0x4,%esp
c0004433:	6a 10                	push   $0x10
c0004435:	6a 00                	push   $0x0
c0004437:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c000443a:	50                   	push   %eax
c000443b:	e8 83 f3 ff ff       	call   c00037c3 <memset>
c0004440:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:320
	ASSERT(strlen(pthread->name) < 17);
c0004443:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004446:	83 c0 0c             	add    $0xc,%eax
c0004449:	83 ec 0c             	sub    $0xc,%esp
c000444c:	50                   	push   %eax
c000444d:	e8 fb f4 ff ff       	call   c000394d <strlen>
c0004452:	83 c4 10             	add    $0x10,%esp
c0004455:	83 f8 10             	cmp    $0x10,%eax
c0004458:	76 1c                	jbe    c0004476 <elem2thread_info+0x17f>
/work/x86_os_my/thread/thread.c:320 (discriminator 1)
c000445a:	68 e7 c7 00 c0       	push   $0xc000c7e7
c000445f:	68 f0 c8 00 c0       	push   $0xc000c8f0
c0004464:	68 40 01 00 00       	push   $0x140
c0004469:	68 89 c5 00 c0       	push   $0xc000c589
c000446e:	e8 ae de ff ff       	call   c0002321 <panic_spin>
c0004473:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:321
	memcpy(out_pad, pthread->name, strlen(pthread->name));
c0004476:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004479:	83 c0 0c             	add    $0xc,%eax
c000447c:	83 ec 0c             	sub    $0xc,%esp
c000447f:	50                   	push   %eax
c0004480:	e8 c8 f4 ff ff       	call   c000394d <strlen>
c0004485:	83 c4 10             	add    $0x10,%esp
c0004488:	89 c2                	mov    %eax,%edx
c000448a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000448d:	83 c0 0c             	add    $0xc,%eax
c0004490:	83 ec 04             	sub    $0x4,%esp
c0004493:	52                   	push   %edx
c0004494:	50                   	push   %eax
c0004495:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0004498:	50                   	push   %eax
c0004499:	e8 77 f3 ff ff       	call   c0003815 <memcpy>
c000449e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:322
	strcat(out_pad, "\n");
c00044a1:	83 ec 08             	sub    $0x8,%esp
c00044a4:	68 02 c8 00 c0       	push   $0xc000c802
c00044a9:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c00044ac:	50                   	push   %eax
c00044ad:	e8 15 f6 ff ff       	call   c0003ac7 <strcat>
c00044b2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:323
	sys_write(stdout_no, out_pad, strlen(out_pad));
c00044b5:	83 ec 0c             	sub    $0xc,%esp
c00044b8:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c00044bb:	50                   	push   %eax
c00044bc:	e8 8c f4 ff ff       	call   c000394d <strlen>
c00044c1:	83 c4 10             	add    $0x10,%esp
c00044c4:	83 ec 04             	sub    $0x4,%esp
c00044c7:	50                   	push   %eax
c00044c8:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c00044cb:	50                   	push   %eax
c00044cc:	6a 01                	push   $0x1
c00044ce:	e8 a6 32 00 00       	call   c0007779 <sys_write>
c00044d3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:324
	return false;	// 此处返回false是为了迎合主调函数list_traversal,只有回调函数返回false时才会继续调用此函数
c00044d6:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/thread/thread.c:325
}
c00044db:	c9                   	leave  
c00044dc:	c3                   	ret    

c00044dd <sys_ps>:
sys_ps():
/work/x86_os_my/thread/thread.c:328

/* 打印任务列表 */
void sys_ps(void) {
c00044dd:	55                   	push   %ebp
c00044de:	89 e5                	mov    %esp,%ebp
c00044e0:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:330
	///////////////   |<--   15  -->||<--   15  -->||<--   15  -->||<--   15  -->||<-7->|
	char* ps_title = "PID            PPID           STAT           TICKS          COMMAND\n";
c00044e3:	c7 45 f4 1c c8 00 c0 	movl   $0xc000c81c,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:331
	sys_write(stdout_no, ps_title, strlen(ps_title));
c00044ea:	83 ec 0c             	sub    $0xc,%esp
c00044ed:	ff 75 f4             	pushl  -0xc(%ebp)
c00044f0:	e8 58 f4 ff ff       	call   c000394d <strlen>
c00044f5:	83 c4 10             	add    $0x10,%esp
c00044f8:	83 ec 04             	sub    $0x4,%esp
c00044fb:	50                   	push   %eax
c00044fc:	ff 75 f4             	pushl  -0xc(%ebp)
c00044ff:	6a 01                	push   $0x1
c0004501:	e8 73 32 00 00       	call   c0007779 <sys_write>
c0004506:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:332
	list_traversal(&thread_all_list, elem2thread_info, 0);
c0004509:	83 ec 04             	sub    $0x4,%esp
c000450c:	6a 00                	push   $0x0
c000450e:	68 f7 42 00 c0       	push   $0xc00042f7
c0004513:	68 9c 11 01 c0       	push   $0xc001119c
c0004518:	e8 da 01 00 00       	call   c00046f7 <list_traversal>
c000451d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:333
}
c0004520:	90                   	nop
c0004521:	c9                   	leave  
c0004522:	c3                   	ret    

c0004523 <thread_init>:
thread_init():
/work/x86_os_my/thread/thread.c:337


/* 初始化线程环境 */
void thread_init(void) {
c0004523:	55                   	push   %ebp
c0004524:	89 e5                	mov    %esp,%ebp
c0004526:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:338
	put_str("thread_init start\n");
c0004529:	83 ec 0c             	sub    $0xc,%esp
c000452c:	68 61 c8 00 c0       	push   $0xc000c861
c0004531:	e8 3a dc ff ff       	call   c0002170 <put_str>
c0004536:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:339
	list_init(&thread_ready_list);
c0004539:	83 ec 0c             	sub    $0xc,%esp
c000453c:	68 8c 11 01 c0       	push   $0xc001118c
c0004541:	e8 6b 00 00 00       	call   c00045b1 <list_init>
c0004546:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:340
	list_init(&thread_all_list);
c0004549:	83 ec 0c             	sub    $0xc,%esp
c000454c:	68 9c 11 01 c0       	push   $0xc001119c
c0004551:	e8 5b 00 00 00       	call   c00045b1 <list_init>
c0004556:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:341
	lock_init(&pid_lock);
c0004559:	83 ec 0c             	sub    $0xc,%esp
c000455c:	68 b4 11 01 c0       	push   $0xc00111b4
c0004561:	e8 3f 03 00 00       	call   c00048a5 <lock_init>
c0004566:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:343
	/* 先创建第一个用户进程:init */
	process_execute(init, "init");	// 放在第一个初始化,这是第一个进程,init进程的pid为1
c0004569:	83 ec 08             	sub    $0x8,%esp
c000456c:	68 74 c8 00 c0       	push   $0xc000c874
c0004571:	68 3d 15 00 c0       	push   $0xc000153d
c0004576:	e8 d9 0f 00 00       	call   c0005554 <process_execute>
c000457b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:345
	/* 将当前main函数创建为线程 */
	make_main_thread();
c000457e:	e8 00 f9 ff ff       	call   c0003e83 <make_main_thread>
/work/x86_os_my/thread/thread.c:347
	/* 创建idle线程 */
	idle_thread = thread_start("idle", 10, idle, NULL);
c0004583:	6a 00                	push   $0x0
c0004585:	68 93 3b 00 c0       	push   $0xc0003b93
c000458a:	6a 0a                	push   $0xa
c000458c:	68 79 c8 00 c0       	push   $0xc000c879
c0004591:	e8 0e f8 ff ff       	call   c0003da4 <thread_start>
c0004596:	83 c4 10             	add    $0x10,%esp
c0004599:	a3 ac 11 01 c0       	mov    %eax,0xc00111ac
/work/x86_os_my/thread/thread.c:348
	put_str("thread_init done\n");
c000459e:	83 ec 0c             	sub    $0xc,%esp
c00045a1:	68 7e c8 00 c0       	push   $0xc000c87e
c00045a6:	e8 c5 db ff ff       	call   c0002170 <put_str>
c00045ab:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:349
}
c00045ae:	90                   	nop
c00045af:	c9                   	leave  
c00045b0:	c3                   	ret    

c00045b1 <list_init>:
list_init():
/work/x86_os_my/lib/kernel/list.c:6
#include "list.h"
#include "interrupt.h"
/* 注意关中断的操作：临界区 */

/* 初始化双向链表list */
void list_init (struct list* list) {
c00045b1:	55                   	push   %ebp
c00045b2:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/lib/kernel/list.c:7
	list->head.prev = NULL;
c00045b4:	8b 45 08             	mov    0x8(%ebp),%eax
c00045b7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/lib/kernel/list.c:8
	list->head.next = &list->tail;
c00045bd:	8b 45 08             	mov    0x8(%ebp),%eax
c00045c0:	8d 50 08             	lea    0x8(%eax),%edx
c00045c3:	8b 45 08             	mov    0x8(%ebp),%eax
c00045c6:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/lib/kernel/list.c:9
	list->tail.prev = &list->head;
c00045c9:	8b 55 08             	mov    0x8(%ebp),%edx
c00045cc:	8b 45 08             	mov    0x8(%ebp),%eax
c00045cf:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/lib/kernel/list.c:10
	list->tail.next = NULL;
c00045d2:	8b 45 08             	mov    0x8(%ebp),%eax
c00045d5:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
/work/x86_os_my/lib/kernel/list.c:11
}
c00045dc:	90                   	nop
c00045dd:	5d                   	pop    %ebp
c00045de:	c3                   	ret    

c00045df <list_insert_before>:
list_insert_before():
/work/x86_os_my/lib/kernel/list.c:14

/* 把链表元素elem插入在元素before之前 */
void list_insert_before(struct list_elem* before, struct list_elem* elem) { 
c00045df:	55                   	push   %ebp
c00045e0:	89 e5                	mov    %esp,%ebp
c00045e2:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/kernel/list.c:15
	enum intr_status old_status = intr_disable();
c00045e5:	e8 56 d3 ff ff       	call   c0001940 <intr_disable>
c00045ea:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/list.c:18

	/* 将before前驱元素的后继元素更新为elem, 暂时使before脱离链表*/ 
	before->prev->next = elem; 
c00045ed:	8b 45 08             	mov    0x8(%ebp),%eax
c00045f0:	8b 00                	mov    (%eax),%eax
c00045f2:	8b 55 0c             	mov    0xc(%ebp),%edx
c00045f5:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/lib/kernel/list.c:22

	/* 更新elem自己的前驱结点为before的前驱,
	* 更新elem自己的后继结点为before, 于是before又回到链表 */
	elem->prev = before->prev;
c00045f8:	8b 45 08             	mov    0x8(%ebp),%eax
c00045fb:	8b 10                	mov    (%eax),%edx
c00045fd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0004600:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/lib/kernel/list.c:23
	elem->next = before;
c0004602:	8b 45 0c             	mov    0xc(%ebp),%eax
c0004605:	8b 55 08             	mov    0x8(%ebp),%edx
c0004608:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/lib/kernel/list.c:26

	/* 更新before的前驱结点为elem */
	before->prev = elem;
c000460b:	8b 45 08             	mov    0x8(%ebp),%eax
c000460e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0004611:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/lib/kernel/list.c:28

	intr_set_status(old_status);
c0004613:	83 ec 0c             	sub    $0xc,%esp
c0004616:	ff 75 f4             	pushl  -0xc(%ebp)
c0004619:	e8 4b d3 ff ff       	call   c0001969 <intr_set_status>
c000461e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:29
}
c0004621:	90                   	nop
c0004622:	c9                   	leave  
c0004623:	c3                   	ret    

c0004624 <list_push>:
list_push():
/work/x86_os_my/lib/kernel/list.c:32

/* 添加元素到列表队首,类似栈push操作 */
void list_push(struct list* plist, struct list_elem* elem) {
c0004624:	55                   	push   %ebp
c0004625:	89 e5                	mov    %esp,%ebp
c0004627:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/lib/kernel/list.c:33
	list_insert_before(plist->head.next, elem); // 在队头插入elem
c000462a:	8b 45 08             	mov    0x8(%ebp),%eax
c000462d:	8b 40 04             	mov    0x4(%eax),%eax
c0004630:	83 ec 08             	sub    $0x8,%esp
c0004633:	ff 75 0c             	pushl  0xc(%ebp)
c0004636:	50                   	push   %eax
c0004637:	e8 a3 ff ff ff       	call   c00045df <list_insert_before>
c000463c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:34
}
c000463f:	90                   	nop
c0004640:	c9                   	leave  
c0004641:	c3                   	ret    

c0004642 <list_append>:
list_append():
/work/x86_os_my/lib/kernel/list.c:37

/* 追加元素到链表队尾,类似队列的先进先出操作 */
void list_append(struct list* plist, struct list_elem* elem) {
c0004642:	55                   	push   %ebp
c0004643:	89 e5                	mov    %esp,%ebp
c0004645:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/lib/kernel/list.c:38
	list_insert_before(&plist->tail, elem);     // 在队尾的前面插入
c0004648:	8b 45 08             	mov    0x8(%ebp),%eax
c000464b:	83 c0 08             	add    $0x8,%eax
c000464e:	83 ec 08             	sub    $0x8,%esp
c0004651:	ff 75 0c             	pushl  0xc(%ebp)
c0004654:	50                   	push   %eax
c0004655:	e8 85 ff ff ff       	call   c00045df <list_insert_before>
c000465a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:39
}
c000465d:	90                   	nop
c000465e:	c9                   	leave  
c000465f:	c3                   	ret    

c0004660 <list_remove>:
list_remove():
/work/x86_os_my/lib/kernel/list.c:42

/* 使元素pelem脱离链表 */
void list_remove(struct list_elem* pelem) {
c0004660:	55                   	push   %ebp
c0004661:	89 e5                	mov    %esp,%ebp
c0004663:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/kernel/list.c:43
	enum intr_status old_status = intr_disable();
c0004666:	e8 d5 d2 ff ff       	call   c0001940 <intr_disable>
c000466b:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/list.c:45

	pelem->prev->next = pelem->next;
c000466e:	8b 45 08             	mov    0x8(%ebp),%eax
c0004671:	8b 00                	mov    (%eax),%eax
c0004673:	8b 55 08             	mov    0x8(%ebp),%edx
c0004676:	8b 52 04             	mov    0x4(%edx),%edx
c0004679:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/lib/kernel/list.c:46
	pelem->next->prev = pelem->prev;
c000467c:	8b 45 08             	mov    0x8(%ebp),%eax
c000467f:	8b 40 04             	mov    0x4(%eax),%eax
c0004682:	8b 55 08             	mov    0x8(%ebp),%edx
c0004685:	8b 12                	mov    (%edx),%edx
c0004687:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/lib/kernel/list.c:48

	intr_set_status(old_status);
c0004689:	83 ec 0c             	sub    $0xc,%esp
c000468c:	ff 75 f4             	pushl  -0xc(%ebp)
c000468f:	e8 d5 d2 ff ff       	call   c0001969 <intr_set_status>
c0004694:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:49
}
c0004697:	90                   	nop
c0004698:	c9                   	leave  
c0004699:	c3                   	ret    

c000469a <list_pop>:
list_pop():
/work/x86_os_my/lib/kernel/list.c:52

/* 将链表第一个元素弹出并返回,类似栈的pop操作 */
struct list_elem* list_pop(struct list* plist) {
c000469a:	55                   	push   %ebp
c000469b:	89 e5                	mov    %esp,%ebp
c000469d:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/kernel/list.c:53
	struct list_elem* elem = plist->head.next;
c00046a0:	8b 45 08             	mov    0x8(%ebp),%eax
c00046a3:	8b 40 04             	mov    0x4(%eax),%eax
c00046a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/list.c:54
	list_remove(elem);
c00046a9:	83 ec 0c             	sub    $0xc,%esp
c00046ac:	ff 75 f4             	pushl  -0xc(%ebp)
c00046af:	e8 ac ff ff ff       	call   c0004660 <list_remove>
c00046b4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:55
	return elem;
c00046b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/lib/kernel/list.c:56
} 
c00046ba:	c9                   	leave  
c00046bb:	c3                   	ret    

c00046bc <elem_find>:
elem_find():
/work/x86_os_my/lib/kernel/list.c:59

/* 从链表中查找元素obj_elem,成功时返回true,失败时返回false */
bool elem_find(struct list* plist, struct list_elem* obj_elem) {
c00046bc:	55                   	push   %ebp
c00046bd:	89 e5                	mov    %esp,%ebp
c00046bf:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:60
	struct list_elem* elem = plist->head.next;
c00046c2:	8b 45 08             	mov    0x8(%ebp),%eax
c00046c5:	8b 40 04             	mov    0x4(%eax),%eax
c00046c8:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/kernel/list.c:61
	while (elem != &plist->tail) {
c00046cb:	eb 18                	jmp    c00046e5 <elem_find+0x29>
/work/x86_os_my/lib/kernel/list.c:62
	if (elem == obj_elem) {
c00046cd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c00046d0:	3b 45 0c             	cmp    0xc(%ebp),%eax
c00046d3:	75 07                	jne    c00046dc <elem_find+0x20>
/work/x86_os_my/lib/kernel/list.c:63
		return true;
c00046d5:	b8 01 00 00 00       	mov    $0x1,%eax
c00046da:	eb 19                	jmp    c00046f5 <elem_find+0x39>
/work/x86_os_my/lib/kernel/list.c:65
	}
		elem = elem->next;
c00046dc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c00046df:	8b 40 04             	mov    0x4(%eax),%eax
c00046e2:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/kernel/list.c:61
} 

/* 从链表中查找元素obj_elem,成功时返回true,失败时返回false */
bool elem_find(struct list* plist, struct list_elem* obj_elem) {
	struct list_elem* elem = plist->head.next;
	while (elem != &plist->tail) {
c00046e5:	8b 45 08             	mov    0x8(%ebp),%eax
c00046e8:	83 c0 08             	add    $0x8,%eax
c00046eb:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c00046ee:	75 dd                	jne    c00046cd <elem_find+0x11>
/work/x86_os_my/lib/kernel/list.c:67
	if (elem == obj_elem) {
		return true;
	}
		elem = elem->next;
	}
	return false;
c00046f0:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/lib/kernel/list.c:68
}
c00046f5:	c9                   	leave  
c00046f6:	c3                   	ret    

c00046f7 <list_traversal>:
list_traversal():
/work/x86_os_my/lib/kernel/list.c:74

/* 把列表plist中的每个元素elem和arg传给回调函数func,
 * arg给func用来判断elem是否符合条件.
 * 本函数的功能是遍历列表内所有元素,逐个判断是否有符合条件的元素。
 * 找到符合条件的元素返回元素指针,否则返回NULL. */
struct list_elem* list_traversal(struct list* plist, function func, int arg) {
c00046f7:	55                   	push   %ebp
c00046f8:	89 e5                	mov    %esp,%ebp
c00046fa:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/kernel/list.c:75
	struct list_elem* elem = plist->head.next;
c00046fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0004700:	8b 40 04             	mov    0x4(%eax),%eax
c0004703:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/list.c:77
	/* 如果队列为空,就必然没有符合条件的结点,故直接返回NULL */
	if (list_empty(plist)) { 
c0004706:	83 ec 0c             	sub    $0xc,%esp
c0004709:	ff 75 08             	pushl  0x8(%ebp)
c000470c:	e8 78 00 00 00       	call   c0004789 <list_empty>
c0004711:	83 c4 10             	add    $0x10,%esp
c0004714:	85 c0                	test   %eax,%eax
c0004716:	74 2a                	je     c0004742 <list_traversal+0x4b>
/work/x86_os_my/lib/kernel/list.c:78
		return NULL;
c0004718:	b8 00 00 00 00       	mov    $0x0,%eax
c000471d:	eb 33                	jmp    c0004752 <list_traversal+0x5b>
/work/x86_os_my/lib/kernel/list.c:82
	}

	while (elem != &plist->tail) {
	if (func(elem, arg)) {		// func返回ture则认为该元素在回调函数中符合条件,命中,故停止继续遍历
c000471f:	83 ec 08             	sub    $0x8,%esp
c0004722:	ff 75 10             	pushl  0x10(%ebp)
c0004725:	ff 75 f4             	pushl  -0xc(%ebp)
c0004728:	8b 45 0c             	mov    0xc(%ebp),%eax
c000472b:	ff d0                	call   *%eax
c000472d:	83 c4 10             	add    $0x10,%esp
c0004730:	85 c0                	test   %eax,%eax
c0004732:	74 05                	je     c0004739 <list_traversal+0x42>
/work/x86_os_my/lib/kernel/list.c:83
		return elem;
c0004734:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004737:	eb 19                	jmp    c0004752 <list_traversal+0x5b>
/work/x86_os_my/lib/kernel/list.c:85
	}
		elem = elem->next;		// 若回调函数func返回false,则继续遍历
c0004739:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000473c:	8b 40 04             	mov    0x4(%eax),%eax
c000473f:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/list.c:81
	/* 如果队列为空,就必然没有符合条件的结点,故直接返回NULL */
	if (list_empty(plist)) { 
		return NULL;
	}

	while (elem != &plist->tail) {
c0004742:	8b 45 08             	mov    0x8(%ebp),%eax
c0004745:	83 c0 08             	add    $0x8,%eax
c0004748:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c000474b:	75 d2                	jne    c000471f <list_traversal+0x28>
/work/x86_os_my/lib/kernel/list.c:87
	if (func(elem, arg)) {		// func返回ture则认为该元素在回调函数中符合条件,命中,故停止继续遍历
		return elem;
	}
		elem = elem->next;		// 若回调函数func返回false,则继续遍历
	}
	return NULL;
c000474d:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/lib/kernel/list.c:88
}
c0004752:	c9                   	leave  
c0004753:	c3                   	ret    

c0004754 <list_len>:
list_len():
/work/x86_os_my/lib/kernel/list.c:91

/* 返回链表长度 */
uint32_t list_len(struct list* plist) {
c0004754:	55                   	push   %ebp
c0004755:	89 e5                	mov    %esp,%ebp
c0004757:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:92
	struct list_elem* elem = plist->head.next;
c000475a:	8b 45 08             	mov    0x8(%ebp),%eax
c000475d:	8b 40 04             	mov    0x4(%eax),%eax
c0004760:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/kernel/list.c:93
	uint32_t length = 0;
c0004763:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
/work/x86_os_my/lib/kernel/list.c:94
	while (elem != &plist->tail) {
c000476a:	eb 0d                	jmp    c0004779 <list_len+0x25>
/work/x86_os_my/lib/kernel/list.c:95
		length++; 
c000476c:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
/work/x86_os_my/lib/kernel/list.c:96
		elem = elem->next;
c0004770:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0004773:	8b 40 04             	mov    0x4(%eax),%eax
c0004776:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/kernel/list.c:94

/* 返回链表长度 */
uint32_t list_len(struct list* plist) {
	struct list_elem* elem = plist->head.next;
	uint32_t length = 0;
	while (elem != &plist->tail) {
c0004779:	8b 45 08             	mov    0x8(%ebp),%eax
c000477c:	83 c0 08             	add    $0x8,%eax
c000477f:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0004782:	75 e8                	jne    c000476c <list_len+0x18>
/work/x86_os_my/lib/kernel/list.c:98
		length++; 
		elem = elem->next;
	}
	return length;
c0004784:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/kernel/list.c:99
}
c0004787:	c9                   	leave  
c0004788:	c3                   	ret    

c0004789 <list_empty>:
list_empty():
/work/x86_os_my/lib/kernel/list.c:102

/* 判断链表是否为空,空时返回true,否则返回false */
bool list_empty(struct list* plist) {		// 判断队列是否为空
c0004789:	55                   	push   %ebp
c000478a:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/lib/kernel/list.c:103
	return (plist->head.next == &plist->tail ? true : false);
c000478c:	8b 45 08             	mov    0x8(%ebp),%eax
c000478f:	8b 40 04             	mov    0x4(%eax),%eax
c0004792:	8b 55 08             	mov    0x8(%ebp),%edx
c0004795:	83 c2 08             	add    $0x8,%edx
c0004798:	39 d0                	cmp    %edx,%eax
c000479a:	0f 94 c0             	sete   %al
c000479d:	0f b6 c0             	movzbl %al,%eax
/work/x86_os_my/lib/kernel/list.c:104
}
c00047a0:	5d                   	pop    %ebp
c00047a1:	c3                   	ret    
c00047a2:	66 90                	xchg   %ax,%ax
c00047a4:	66 90                	xchg   %ax,%ax
c00047a6:	66 90                	xchg   %ax,%ax
c00047a8:	66 90                	xchg   %ax,%ax
c00047aa:	66 90                	xchg   %ax,%ax
c00047ac:	66 90                	xchg   %ax,%ax
c00047ae:	66 90                	xchg   %ax,%ax

c00047b0 <switch_to>:
switch_to():
c00047b0:	56                   	push   %esi
c00047b1:	57                   	push   %edi
c00047b2:	53                   	push   %ebx
c00047b3:	55                   	push   %ebp
c00047b4:	8b 44 24 14          	mov    0x14(%esp),%eax
c00047b8:	89 20                	mov    %esp,(%eax)
c00047ba:	8b 44 24 18          	mov    0x18(%esp),%eax
c00047be:	8b 20                	mov    (%eax),%esp
c00047c0:	5d                   	pop    %ebp
c00047c1:	5b                   	pop    %ebx
c00047c2:	5f                   	pop    %edi
c00047c3:	5e                   	pop    %esi
c00047c4:	c3                   	ret    

c00047c5 <console_init>:
console_init():
/work/x86_os_my/device/console.c:9
#include "sync.h"
#include "thread.h"
static struct lock console_lock;	// 控制台锁

/* 初始化终端 */
void console_init() {
c00047c5:	55                   	push   %ebp
c00047c6:	89 e5                	mov    %esp,%ebp
c00047c8:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/console.c:10
	lock_init(&console_lock);
c00047cb:	83 ec 0c             	sub    $0xc,%esp
c00047ce:	68 70 05 01 c0       	push   $0xc0010570
c00047d3:	e8 cd 00 00 00       	call   c00048a5 <lock_init>
c00047d8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:11
}
c00047db:	90                   	nop
c00047dc:	c9                   	leave  
c00047dd:	c3                   	ret    

c00047de <console_acquire>:
console_acquire():
/work/x86_os_my/device/console.c:14

/* 获取终端 */
void console_acquire() {
c00047de:	55                   	push   %ebp
c00047df:	89 e5                	mov    %esp,%ebp
c00047e1:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/console.c:15
	lock_acquire(&console_lock);
c00047e4:	83 ec 0c             	sub    $0xc,%esp
c00047e7:	68 70 05 01 c0       	push   $0xc0010570
c00047ec:	e8 8e 02 00 00       	call   c0004a7f <lock_acquire>
c00047f1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:16
}
c00047f4:	90                   	nop
c00047f5:	c9                   	leave  
c00047f6:	c3                   	ret    

c00047f7 <console_release>:
console_release():
/work/x86_os_my/device/console.c:19

/* 释放终端 */
void console_release() {
c00047f7:	55                   	push   %ebp
c00047f8:	89 e5                	mov    %esp,%ebp
c00047fa:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/console.c:20
	lock_release(&console_lock);
c00047fd:	83 ec 0c             	sub    $0xc,%esp
c0004800:	68 70 05 01 c0       	push   $0xc0010570
c0004805:	e8 ec 02 00 00       	call   c0004af6 <lock_release>
c000480a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:21
}
c000480d:	90                   	nop
c000480e:	c9                   	leave  
c000480f:	c3                   	ret    

c0004810 <console_put_str>:
console_put_str():
/work/x86_os_my/device/console.c:24

/* 终端中输出字符串 */
void console_put_str(char* str) {
c0004810:	55                   	push   %ebp
c0004811:	89 e5                	mov    %esp,%ebp
c0004813:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/console.c:25
	console_acquire();
c0004816:	e8 c3 ff ff ff       	call   c00047de <console_acquire>
/work/x86_os_my/device/console.c:26
	put_str(str);
c000481b:	83 ec 0c             	sub    $0xc,%esp
c000481e:	ff 75 08             	pushl  0x8(%ebp)
c0004821:	e8 4a d9 ff ff       	call   c0002170 <put_str>
c0004826:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:27
	console_release();
c0004829:	e8 c9 ff ff ff       	call   c00047f7 <console_release>
/work/x86_os_my/device/console.c:28
}
c000482e:	90                   	nop
c000482f:	c9                   	leave  
c0004830:	c3                   	ret    

c0004831 <console_put_char>:
console_put_char():
/work/x86_os_my/device/console.c:31

/* 终端中输出字符 */
void console_put_char(uint8_t char_asci) {
c0004831:	55                   	push   %ebp
c0004832:	89 e5                	mov    %esp,%ebp
c0004834:	83 ec 18             	sub    $0x18,%esp
c0004837:	8b 45 08             	mov    0x8(%ebp),%eax
c000483a:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/device/console.c:32
	console_acquire();
c000483d:	e8 9c ff ff ff       	call   c00047de <console_acquire>
/work/x86_os_my/device/console.c:33
	put_char(char_asci);
c0004842:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0004846:	83 ec 0c             	sub    $0xc,%esp
c0004849:	50                   	push   %eax
c000484a:	e8 3f d9 ff ff       	call   c000218e <put_char>
c000484f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:34
	console_release();
c0004852:	e8 a0 ff ff ff       	call   c00047f7 <console_release>
/work/x86_os_my/device/console.c:35
}
c0004857:	90                   	nop
c0004858:	c9                   	leave  
c0004859:	c3                   	ret    

c000485a <console_put_int>:
console_put_int():
/work/x86_os_my/device/console.c:38

/* 终端中输出16进制整数 */
void console_put_int(uint32_t num) {
c000485a:	55                   	push   %ebp
c000485b:	89 e5                	mov    %esp,%ebp
c000485d:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/console.c:39
	console_acquire();
c0004860:	e8 79 ff ff ff       	call   c00047de <console_acquire>
/work/x86_os_my/device/console.c:40
	put_int(num);
c0004865:	83 ec 0c             	sub    $0xc,%esp
c0004868:	ff 75 08             	pushl  0x8(%ebp)
c000486b:	e8 2a da ff ff       	call   c000229a <put_int>
c0004870:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:41
	console_release();
c0004873:	e8 7f ff ff ff       	call   c00047f7 <console_release>
/work/x86_os_my/device/console.c:42
}
c0004878:	90                   	nop
c0004879:	c9                   	leave  
c000487a:	c3                   	ret    

c000487b <sema_init>:
sema_init():
/work/x86_os_my/thread/sync.c:8
#include "global.h"
#include "debug.h"
#include "interrupt.h"

/* 初始化信号量 */
void sema_init(struct semaphore* psema, uint8_t value) {
c000487b:	55                   	push   %ebp
c000487c:	89 e5                	mov    %esp,%ebp
c000487e:	83 ec 18             	sub    $0x18,%esp
c0004881:	8b 45 0c             	mov    0xc(%ebp),%eax
c0004884:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/thread/sync.c:9
	psema->value = value;       // 为信号量赋初值
c0004887:	8b 45 08             	mov    0x8(%ebp),%eax
c000488a:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
c000488e:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/thread/sync.c:10
	list_init(&psema->waiters); //初始化信号量的等待队列
c0004890:	8b 45 08             	mov    0x8(%ebp),%eax
c0004893:	83 c0 04             	add    $0x4,%eax
c0004896:	83 ec 0c             	sub    $0xc,%esp
c0004899:	50                   	push   %eax
c000489a:	e8 12 fd ff ff       	call   c00045b1 <list_init>
c000489f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:11
}
c00048a2:	90                   	nop
c00048a3:	c9                   	leave  
c00048a4:	c3                   	ret    

c00048a5 <lock_init>:
lock_init():
/work/x86_os_my/thread/sync.c:14

/* 初始化锁plock */
void lock_init(struct lock* plock) {
c00048a5:	55                   	push   %ebp
c00048a6:	89 e5                	mov    %esp,%ebp
c00048a8:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/sync.c:15
	plock->holder = NULL;
c00048ab:	8b 45 08             	mov    0x8(%ebp),%eax
c00048ae:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/thread/sync.c:16
	plock->holder_repeat_nr = 0;
c00048b4:	8b 45 08             	mov    0x8(%ebp),%eax
c00048b7:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
/work/x86_os_my/thread/sync.c:17
	sema_init(&plock->semaphore, 1);  // 信号量初值为1
c00048be:	8b 45 08             	mov    0x8(%ebp),%eax
c00048c1:	83 c0 04             	add    $0x4,%eax
c00048c4:	83 ec 08             	sub    $0x8,%esp
c00048c7:	6a 01                	push   $0x1
c00048c9:	50                   	push   %eax
c00048ca:	e8 ac ff ff ff       	call   c000487b <sema_init>
c00048cf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:18
}
c00048d2:	90                   	nop
c00048d3:	c9                   	leave  
c00048d4:	c3                   	ret    

c00048d5 <sema_down>:
sema_down():
/work/x86_os_my/thread/sync.c:21

/* 信号量down操作 */
void sema_down(struct semaphore* psema) {
c00048d5:	55                   	push   %ebp
c00048d6:	89 e5                	mov    %esp,%ebp
c00048d8:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/sync.c:23
	/* 关中断来保证原子操作 */
	enum intr_status old_status = intr_disable();
c00048db:	e8 60 d0 ff ff       	call   c0001940 <intr_disable>
c00048e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/sync.c:25
	
	while(psema->value == 0) {			// 若value为0,表示已经被别人持有【while多次判断】
c00048e3:	e9 98 00 00 00       	jmp    c0004980 <sema_down+0xab>
/work/x86_os_my/thread/sync.c:26
		ASSERT(!elem_find(&psema->waiters, &running_thread()->general_tag));
c00048e8:	e8 bd f2 ff ff       	call   c0003baa <running_thread>
c00048ed:	8d 50 44             	lea    0x44(%eax),%edx
c00048f0:	8b 45 08             	mov    0x8(%ebp),%eax
c00048f3:	83 c0 04             	add    $0x4,%eax
c00048f6:	83 ec 08             	sub    $0x8,%esp
c00048f9:	52                   	push   %edx
c00048fa:	50                   	push   %eax
c00048fb:	e8 bc fd ff ff       	call   c00046bc <elem_find>
c0004900:	83 c4 10             	add    $0x10,%esp
c0004903:	85 c0                	test   %eax,%eax
c0004905:	74 19                	je     c0004920 <sema_down+0x4b>
/work/x86_os_my/thread/sync.c:26 (discriminator 1)
c0004907:	68 04 c9 00 c0       	push   $0xc000c904
c000490c:	68 08 ca 00 c0       	push   $0xc000ca08
c0004911:	6a 1a                	push   $0x1a
c0004913:	68 40 c9 00 c0       	push   $0xc000c940
c0004918:	e8 04 da ff ff       	call   c0002321 <panic_spin>
c000491d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:28
		/* 当前线程不应该已在信号量的waiters队列中 */
		if (elem_find(&psema->waiters, &running_thread()->general_tag)) {
c0004920:	e8 85 f2 ff ff       	call   c0003baa <running_thread>
c0004925:	8d 50 44             	lea    0x44(%eax),%edx
c0004928:	8b 45 08             	mov    0x8(%ebp),%eax
c000492b:	83 c0 04             	add    $0x4,%eax
c000492e:	83 ec 08             	sub    $0x8,%esp
c0004931:	52                   	push   %edx
c0004932:	50                   	push   %eax
c0004933:	e8 84 fd ff ff       	call   c00046bc <elem_find>
c0004938:	83 c4 10             	add    $0x10,%esp
c000493b:	85 c0                	test   %eax,%eax
c000493d:	74 19                	je     c0004958 <sema_down+0x83>
/work/x86_os_my/thread/sync.c:29
			PANIC("sema_down: thread blocked has been in waiters_list\n");
c000493f:	68 50 c9 00 c0       	push   $0xc000c950
c0004944:	68 08 ca 00 c0       	push   $0xc000ca08
c0004949:	6a 1d                	push   $0x1d
c000494b:	68 40 c9 00 c0       	push   $0xc000c940
c0004950:	e8 cc d9 ff ff       	call   c0002321 <panic_spin>
c0004955:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:32
		}
		/* 若信号量的值等于0,则当前线程把自己加入该锁的等待队列,然后阻塞自己 */
		list_append(&psema->waiters, &running_thread()->general_tag);
c0004958:	e8 4d f2 ff ff       	call   c0003baa <running_thread>
c000495d:	8d 50 44             	lea    0x44(%eax),%edx
c0004960:	8b 45 08             	mov    0x8(%ebp),%eax
c0004963:	83 c0 04             	add    $0x4,%eax
c0004966:	83 ec 08             	sub    $0x8,%esp
c0004969:	52                   	push   %edx
c000496a:	50                   	push   %eax
c000496b:	e8 d2 fc ff ff       	call   c0004642 <list_append>
c0004970:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:33
		thread_block(TASK_BLOCKED);		// 阻塞线程,直到被唤醒
c0004973:	83 ec 0c             	sub    $0xc,%esp
c0004976:	6a 02                	push   $0x2
c0004978:	e8 d0 f6 ff ff       	call   c000404d <thread_block>
c000497d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:25
/* 信号量down操作 */
void sema_down(struct semaphore* psema) {
	/* 关中断来保证原子操作 */
	enum intr_status old_status = intr_disable();
	
	while(psema->value == 0) {			// 若value为0,表示已经被别人持有【while多次判断】
c0004980:	8b 45 08             	mov    0x8(%ebp),%eax
c0004983:	0f b6 00             	movzbl (%eax),%eax
c0004986:	84 c0                	test   %al,%al
c0004988:	0f 84 5a ff ff ff    	je     c00048e8 <sema_down+0x13>
/work/x86_os_my/thread/sync.c:36
		/* 若信号量的值等于0,则当前线程把自己加入该锁的等待队列,然后阻塞自己 */
		list_append(&psema->waiters, &running_thread()->general_tag);
		thread_block(TASK_BLOCKED);		// 阻塞线程,直到被唤醒
	}
	/* 若value为1或被唤醒后,会执行下面的代码,也就是获得了锁。*/
	psema->value--;
c000498e:	8b 45 08             	mov    0x8(%ebp),%eax
c0004991:	0f b6 00             	movzbl (%eax),%eax
c0004994:	8d 50 ff             	lea    -0x1(%eax),%edx
c0004997:	8b 45 08             	mov    0x8(%ebp),%eax
c000499a:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/thread/sync.c:37
	ASSERT(psema->value == 0);
c000499c:	8b 45 08             	mov    0x8(%ebp),%eax
c000499f:	0f b6 00             	movzbl (%eax),%eax
c00049a2:	84 c0                	test   %al,%al
c00049a4:	74 19                	je     c00049bf <sema_down+0xea>
/work/x86_os_my/thread/sync.c:37 (discriminator 1)
c00049a6:	68 84 c9 00 c0       	push   $0xc000c984
c00049ab:	68 08 ca 00 c0       	push   $0xc000ca08
c00049b0:	6a 25                	push   $0x25
c00049b2:	68 40 c9 00 c0       	push   $0xc000c940
c00049b7:	e8 65 d9 ff ff       	call   c0002321 <panic_spin>
c00049bc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:40
	
	/* 恢复之前的中断状态 */
	intr_set_status(old_status);
c00049bf:	83 ec 0c             	sub    $0xc,%esp
c00049c2:	ff 75 f4             	pushl  -0xc(%ebp)
c00049c5:	e8 9f cf ff ff       	call   c0001969 <intr_set_status>
c00049ca:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:41
}
c00049cd:	90                   	nop
c00049ce:	c9                   	leave  
c00049cf:	c3                   	ret    

c00049d0 <sema_up>:
sema_up():
/work/x86_os_my/thread/sync.c:44

/* 信号量的up操作 */
void sema_up(struct semaphore* psema) {
c00049d0:	55                   	push   %ebp
c00049d1:	89 e5                	mov    %esp,%ebp
c00049d3:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/sync.c:46
	/* 关中断,保证原子操作 */
	enum intr_status old_status = intr_disable();
c00049d6:	e8 65 cf ff ff       	call   c0001940 <intr_disable>
c00049db:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/sync.c:48
	
	ASSERT(psema->value == 0);
c00049de:	8b 45 08             	mov    0x8(%ebp),%eax
c00049e1:	0f b6 00             	movzbl (%eax),%eax
c00049e4:	84 c0                	test   %al,%al
c00049e6:	74 19                	je     c0004a01 <sema_up+0x31>
/work/x86_os_my/thread/sync.c:48 (discriminator 1)
c00049e8:	68 84 c9 00 c0       	push   $0xc000c984
c00049ed:	68 14 ca 00 c0       	push   $0xc000ca14
c00049f2:	6a 30                	push   $0x30
c00049f4:	68 40 c9 00 c0       	push   $0xc000c940
c00049f9:	e8 23 d9 ff ff       	call   c0002321 <panic_spin>
c00049fe:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:49
	if (!list_empty(&psema->waiters)) {
c0004a01:	8b 45 08             	mov    0x8(%ebp),%eax
c0004a04:	83 c0 04             	add    $0x4,%eax
c0004a07:	83 ec 0c             	sub    $0xc,%esp
c0004a0a:	50                   	push   %eax
c0004a0b:	e8 79 fd ff ff       	call   c0004789 <list_empty>
c0004a10:	83 c4 10             	add    $0x10,%esp
c0004a13:	85 c0                	test   %eax,%eax
c0004a15:	75 26                	jne    c0004a3d <sema_up+0x6d>
/work/x86_os_my/thread/sync.c:50
		struct task_struct* thread_blocked = elem2entry(struct task_struct, general_tag, list_pop(&psema->waiters));
c0004a17:	8b 45 08             	mov    0x8(%ebp),%eax
c0004a1a:	83 c0 04             	add    $0x4,%eax
c0004a1d:	83 ec 0c             	sub    $0xc,%esp
c0004a20:	50                   	push   %eax
c0004a21:	e8 74 fc ff ff       	call   c000469a <list_pop>
c0004a26:	83 c4 10             	add    $0x10,%esp
c0004a29:	83 e8 44             	sub    $0x44,%eax
c0004a2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/thread/sync.c:51
		thread_unblock(thread_blocked);
c0004a2f:	83 ec 0c             	sub    $0xc,%esp
c0004a32:	ff 75 f0             	pushl  -0x10(%ebp)
c0004a35:	e8 76 f6 ff ff       	call   c00040b0 <thread_unblock>
c0004a3a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:53
	}
	psema->value++;
c0004a3d:	8b 45 08             	mov    0x8(%ebp),%eax
c0004a40:	0f b6 00             	movzbl (%eax),%eax
c0004a43:	8d 50 01             	lea    0x1(%eax),%edx
c0004a46:	8b 45 08             	mov    0x8(%ebp),%eax
c0004a49:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/thread/sync.c:54
	ASSERT(psema->value == 1);
c0004a4b:	8b 45 08             	mov    0x8(%ebp),%eax
c0004a4e:	0f b6 00             	movzbl (%eax),%eax
c0004a51:	3c 01                	cmp    $0x1,%al
c0004a53:	74 19                	je     c0004a6e <sema_up+0x9e>
/work/x86_os_my/thread/sync.c:54 (discriminator 1)
c0004a55:	68 96 c9 00 c0       	push   $0xc000c996
c0004a5a:	68 14 ca 00 c0       	push   $0xc000ca14
c0004a5f:	6a 36                	push   $0x36
c0004a61:	68 40 c9 00 c0       	push   $0xc000c940
c0004a66:	e8 b6 d8 ff ff       	call   c0002321 <panic_spin>
c0004a6b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:57
	
	/* 恢复之前的中断状态 */
	intr_set_status(old_status);
c0004a6e:	83 ec 0c             	sub    $0xc,%esp
c0004a71:	ff 75 f4             	pushl  -0xc(%ebp)
c0004a74:	e8 f0 ce ff ff       	call   c0001969 <intr_set_status>
c0004a79:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:58
}
c0004a7c:	90                   	nop
c0004a7d:	c9                   	leave  
c0004a7e:	c3                   	ret    

c0004a7f <lock_acquire>:
lock_acquire():
/work/x86_os_my/thread/sync.c:61

/* 获取锁plock */
void lock_acquire(struct lock* plock) {
c0004a7f:	55                   	push   %ebp
c0004a80:	89 e5                	mov    %esp,%ebp
c0004a82:	53                   	push   %ebx
c0004a83:	83 ec 04             	sub    $0x4,%esp
/work/x86_os_my/thread/sync.c:63
	/* 排除曾经自己已经持有锁但还未将其释放的情况。*/
	if (plock->holder != running_thread()) {
c0004a86:	8b 45 08             	mov    0x8(%ebp),%eax
c0004a89:	8b 18                	mov    (%eax),%ebx
c0004a8b:	e8 1a f1 ff ff       	call   c0003baa <running_thread>
c0004a90:	39 c3                	cmp    %eax,%ebx
c0004a92:	74 4d                	je     c0004ae1 <lock_acquire+0x62>
/work/x86_os_my/thread/sync.c:64
		sema_down(&plock->semaphore);	// 对信号量P操作,原子操作
c0004a94:	8b 45 08             	mov    0x8(%ebp),%eax
c0004a97:	83 c0 04             	add    $0x4,%eax
c0004a9a:	83 ec 0c             	sub    $0xc,%esp
c0004a9d:	50                   	push   %eax
c0004a9e:	e8 32 fe ff ff       	call   c00048d5 <sema_down>
c0004aa3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:65
		plock->holder = running_thread();
c0004aa6:	e8 ff f0 ff ff       	call   c0003baa <running_thread>
c0004aab:	89 c2                	mov    %eax,%edx
c0004aad:	8b 45 08             	mov    0x8(%ebp),%eax
c0004ab0:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/thread/sync.c:66
		ASSERT(plock->holder_repeat_nr == 0);
c0004ab2:	8b 45 08             	mov    0x8(%ebp),%eax
c0004ab5:	8b 40 18             	mov    0x18(%eax),%eax
c0004ab8:	85 c0                	test   %eax,%eax
c0004aba:	74 19                	je     c0004ad5 <lock_acquire+0x56>
/work/x86_os_my/thread/sync.c:66 (discriminator 1)
c0004abc:	68 a8 c9 00 c0       	push   $0xc000c9a8
c0004ac1:	68 1c ca 00 c0       	push   $0xc000ca1c
c0004ac6:	6a 42                	push   $0x42
c0004ac8:	68 40 c9 00 c0       	push   $0xc000c940
c0004acd:	e8 4f d8 ff ff       	call   c0002321 <panic_spin>
c0004ad2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:67
		plock->holder_repeat_nr = 1;
c0004ad5:	8b 45 08             	mov    0x8(%ebp),%eax
c0004ad8:	c7 40 18 01 00 00 00 	movl   $0x1,0x18(%eax)
/work/x86_os_my/thread/sync.c:71
	} else {
		plock->holder_repeat_nr++;
	}
}
c0004adf:	eb 0f                	jmp    c0004af0 <lock_acquire+0x71>
/work/x86_os_my/thread/sync.c:69
		sema_down(&plock->semaphore);	// 对信号量P操作,原子操作
		plock->holder = running_thread();
		ASSERT(plock->holder_repeat_nr == 0);
		plock->holder_repeat_nr = 1;
	} else {
		plock->holder_repeat_nr++;
c0004ae1:	8b 45 08             	mov    0x8(%ebp),%eax
c0004ae4:	8b 40 18             	mov    0x18(%eax),%eax
c0004ae7:	8d 50 01             	lea    0x1(%eax),%edx
c0004aea:	8b 45 08             	mov    0x8(%ebp),%eax
c0004aed:	89 50 18             	mov    %edx,0x18(%eax)
/work/x86_os_my/thread/sync.c:71
	}
}
c0004af0:	90                   	nop
c0004af1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0004af4:	c9                   	leave  
c0004af5:	c3                   	ret    

c0004af6 <lock_release>:
lock_release():
/work/x86_os_my/thread/sync.c:74

/* 释放锁plock */
void lock_release(struct lock* plock) {
c0004af6:	55                   	push   %ebp
c0004af7:	89 e5                	mov    %esp,%ebp
c0004af9:	53                   	push   %ebx
c0004afa:	83 ec 04             	sub    $0x4,%esp
/work/x86_os_my/thread/sync.c:75
	ASSERT(plock->holder == running_thread());
c0004afd:	8b 45 08             	mov    0x8(%ebp),%eax
c0004b00:	8b 18                	mov    (%eax),%ebx
c0004b02:	e8 a3 f0 ff ff       	call   c0003baa <running_thread>
c0004b07:	39 c3                	cmp    %eax,%ebx
c0004b09:	74 19                	je     c0004b24 <lock_release+0x2e>
/work/x86_os_my/thread/sync.c:75 (discriminator 1)
c0004b0b:	68 c8 c9 00 c0       	push   $0xc000c9c8
c0004b10:	68 2c ca 00 c0       	push   $0xc000ca2c
c0004b15:	6a 4b                	push   $0x4b
c0004b17:	68 40 c9 00 c0       	push   $0xc000c940
c0004b1c:	e8 00 d8 ff ff       	call   c0002321 <panic_spin>
c0004b21:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:76
	if (plock->holder_repeat_nr > 1) {
c0004b24:	8b 45 08             	mov    0x8(%ebp),%eax
c0004b27:	8b 40 18             	mov    0x18(%eax),%eax
c0004b2a:	83 f8 01             	cmp    $0x1,%eax
c0004b2d:	76 11                	jbe    c0004b40 <lock_release+0x4a>
/work/x86_os_my/thread/sync.c:77
		plock->holder_repeat_nr--;
c0004b2f:	8b 45 08             	mov    0x8(%ebp),%eax
c0004b32:	8b 40 18             	mov    0x18(%eax),%eax
c0004b35:	8d 50 ff             	lea    -0x1(%eax),%edx
c0004b38:	8b 45 08             	mov    0x8(%ebp),%eax
c0004b3b:	89 50 18             	mov    %edx,0x18(%eax)
/work/x86_os_my/thread/sync.c:78
		return;
c0004b3e:	eb 49                	jmp    c0004b89 <lock_release+0x93>
/work/x86_os_my/thread/sync.c:80
	}
	ASSERT(plock->holder_repeat_nr == 1);
c0004b40:	8b 45 08             	mov    0x8(%ebp),%eax
c0004b43:	8b 40 18             	mov    0x18(%eax),%eax
c0004b46:	83 f8 01             	cmp    $0x1,%eax
c0004b49:	74 19                	je     c0004b64 <lock_release+0x6e>
/work/x86_os_my/thread/sync.c:80 (discriminator 1)
c0004b4b:	68 ea c9 00 c0       	push   $0xc000c9ea
c0004b50:	68 2c ca 00 c0       	push   $0xc000ca2c
c0004b55:	6a 50                	push   $0x50
c0004b57:	68 40 c9 00 c0       	push   $0xc000c940
c0004b5c:	e8 c0 d7 ff ff       	call   c0002321 <panic_spin>
c0004b61:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:82

	plock->holder = NULL;			// 把锁的持有者置空放在V操作之前
c0004b64:	8b 45 08             	mov    0x8(%ebp),%eax
c0004b67:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/thread/sync.c:83
	plock->holder_repeat_nr = 0;
c0004b6d:	8b 45 08             	mov    0x8(%ebp),%eax
c0004b70:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
/work/x86_os_my/thread/sync.c:84
	sema_up(&plock->semaphore);		// 信号量的V操作,也是原子操作
c0004b77:	8b 45 08             	mov    0x8(%ebp),%eax
c0004b7a:	83 c0 04             	add    $0x4,%eax
c0004b7d:	83 ec 0c             	sub    $0xc,%esp
c0004b80:	50                   	push   %eax
c0004b81:	e8 4a fe ff ff       	call   c00049d0 <sema_up>
c0004b86:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:85
}
c0004b89:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0004b8c:	c9                   	leave  
c0004b8d:	c3                   	ret    

c0004b8e <inb>:
inb():
/work/x86_os_my/lib/kernel/io.h:36
   asm volatile ("cld; rep outsw" : "+S" (addr), "+c" (word_cnt) : "d" (port));
/******************************************************/
}

/* 将从端口port读入的一个字节返回 */
static inline uint8_t inb(uint16_t port) {
c0004b8e:	55                   	push   %ebp
c0004b8f:	89 e5                	mov    %esp,%ebp
c0004b91:	83 ec 14             	sub    $0x14,%esp
c0004b94:	8b 45 08             	mov    0x8(%ebp),%eax
c0004b97:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
/work/x86_os_my/lib/kernel/io.h:38
   uint8_t data;
   asm volatile ("inb %w1, %b0" : "=a" (data) : "Nd" (port));
c0004b9b:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0004b9f:	89 c2                	mov    %eax,%edx
c0004ba1:	ec                   	in     (%dx),%al
c0004ba2:	88 45 ff             	mov    %al,-0x1(%ebp)
/work/x86_os_my/lib/kernel/io.h:39
   return data;
c0004ba5:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
/work/x86_os_my/lib/kernel/io.h:40
}
c0004ba9:	c9                   	leave  
c0004baa:	c3                   	ret    

c0004bab <intr_keyboard_handler>:
intr_keyboard_handler():
/work/x86_os_my/device/keyboard.c:111
/* 0x3A */	{caps_lock_char, caps_lock_char}
/*其它按键暂不处理*/
};

/* 键盘中断处理程序 */
static void intr_keyboard_handler(void) {
c0004bab:	55                   	push   %ebp
c0004bac:	89 e5                	mov    %esp,%ebp
c0004bae:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/device/keyboard.c:114

/* 这次中断发生前的上一次中断,以下任意三个键是否有按下 */
   bool ctrl_down_last = ctrl_status;	  
c0004bb1:	a1 8c 05 01 c0       	mov    0xc001058c,%eax
c0004bb6:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/device/keyboard.c:115
   bool shift_down_last = shift_status;
c0004bb9:	a1 90 05 01 c0       	mov    0xc0010590,%eax
c0004bbe:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/device/keyboard.c:116
   bool caps_lock_last = caps_lock_status;
c0004bc1:	a1 98 05 01 c0       	mov    0xc0010598,%eax
c0004bc6:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/device/keyboard.c:119

   bool break_code;
   uint16_t scancode = inb(KBD_BUF_PORT);
c0004bc9:	6a 60                	push   $0x60
c0004bcb:	e8 be ff ff ff       	call   c0004b8e <inb>
c0004bd0:	83 c4 04             	add    $0x4,%esp
c0004bd3:	0f b6 c0             	movzbl %al,%eax
c0004bd6:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
/work/x86_os_my/device/keyboard.c:123

/* 若扫描码是e0开头的,表示此键的按下将产生多个扫描码,
 * 所以马上结束此次中断处理函数,等待下一个扫描码进来*/ 
   if (scancode == 0xe0) { 
c0004bda:	66 81 7d f6 e0 00    	cmpw   $0xe0,-0xa(%ebp)
c0004be0:	75 0f                	jne    c0004bf1 <intr_keyboard_handler+0x46>
/work/x86_os_my/device/keyboard.c:124
      ext_scancode = true;    // 打开e0标记
c0004be2:	c7 05 9c 05 01 c0 01 	movl   $0x1,0xc001059c
c0004be9:	00 00 00 
/work/x86_os_my/device/keyboard.c:125
      return;
c0004bec:	e9 50 02 00 00       	jmp    c0004e41 <intr_keyboard_handler+0x296>
/work/x86_os_my/device/keyboard.c:129
   }

/* 如果上次是以0xe0开头,将扫描码合并 */
   if (ext_scancode) {
c0004bf1:	a1 9c 05 01 c0       	mov    0xc001059c,%eax
c0004bf6:	85 c0                	test   %eax,%eax
c0004bf8:	74 10                	je     c0004c0a <intr_keyboard_handler+0x5f>
/work/x86_os_my/device/keyboard.c:130
      scancode = ((0xe000) | scancode);
c0004bfa:	66 81 4d f6 00 e0    	orw    $0xe000,-0xa(%ebp)
/work/x86_os_my/device/keyboard.c:131
      ext_scancode = false;   // 关闭e0标记
c0004c00:	c7 05 9c 05 01 c0 00 	movl   $0x0,0xc001059c
c0004c07:	00 00 00 
/work/x86_os_my/device/keyboard.c:134
   }   

   break_code = ((scancode & 0x0080) != 0);   // 获取break_code
c0004c0a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0004c0e:	25 80 00 00 00       	and    $0x80,%eax
c0004c13:	85 c0                	test   %eax,%eax
c0004c15:	0f 95 c0             	setne  %al
c0004c18:	0f b6 c0             	movzbl %al,%eax
c0004c1b:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/device/keyboard.c:136
   
   if (break_code) {   // 若是断码break_code(按键弹起时产生的扫描码)
c0004c1e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0004c22:	74 6a                	je     c0004c8e <intr_keyboard_handler+0xe3>
/work/x86_os_my/device/keyboard.c:140

   /* 由于ctrl_r 和alt_r的make_code和break_code都是两字节,
   所以可用下面的方法取make_code,多字节的扫描码暂不处理 */
      uint16_t make_code = (scancode &= 0xff7f);   // 得到其make_code(按键按下时产生的扫描码)
c0004c24:	66 81 65 f6 7f ff    	andw   $0xff7f,-0xa(%ebp)
c0004c2a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0004c2e:	66 89 45 da          	mov    %ax,-0x26(%ebp)
/work/x86_os_my/device/keyboard.c:143

   /* 若是任意以下三个键弹起了,将状态置为false */
      if (make_code == ctrl_l_make || make_code == ctrl_r_make) {
c0004c32:	66 83 7d da 1d       	cmpw   $0x1d,-0x26(%ebp)
c0004c37:	74 08                	je     c0004c41 <intr_keyboard_handler+0x96>
/work/x86_os_my/device/keyboard.c:143 (discriminator 1)
c0004c39:	66 81 7d da 1d e0    	cmpw   $0xe01d,-0x26(%ebp)
c0004c3f:	75 0c                	jne    c0004c4d <intr_keyboard_handler+0xa2>
/work/x86_os_my/device/keyboard.c:144
	 ctrl_status = false;
c0004c41:	c7 05 8c 05 01 c0 00 	movl   $0x0,0xc001058c
c0004c48:	00 00 00 
c0004c4b:	eb 3c                	jmp    c0004c89 <intr_keyboard_handler+0xde>
/work/x86_os_my/device/keyboard.c:145
      } else if (make_code == shift_l_make || make_code == shift_r_make) {
c0004c4d:	66 83 7d da 2a       	cmpw   $0x2a,-0x26(%ebp)
c0004c52:	74 07                	je     c0004c5b <intr_keyboard_handler+0xb0>
/work/x86_os_my/device/keyboard.c:145 (discriminator 1)
c0004c54:	66 83 7d da 36       	cmpw   $0x36,-0x26(%ebp)
c0004c59:	75 0c                	jne    c0004c67 <intr_keyboard_handler+0xbc>
/work/x86_os_my/device/keyboard.c:146
	 shift_status = false;
c0004c5b:	c7 05 90 05 01 c0 00 	movl   $0x0,0xc0010590
c0004c62:	00 00 00 
c0004c65:	eb 22                	jmp    c0004c89 <intr_keyboard_handler+0xde>
/work/x86_os_my/device/keyboard.c:147
      } else if (make_code == alt_l_make || make_code == alt_r_make) {
c0004c67:	66 83 7d da 38       	cmpw   $0x38,-0x26(%ebp)
c0004c6c:	74 0c                	je     c0004c7a <intr_keyboard_handler+0xcf>
/work/x86_os_my/device/keyboard.c:147 (discriminator 1)
c0004c6e:	66 81 7d da 38 e0    	cmpw   $0xe038,-0x26(%ebp)
c0004c74:	0f 85 c0 01 00 00    	jne    c0004e3a <intr_keyboard_handler+0x28f>
/work/x86_os_my/device/keyboard.c:148
	 alt_status = false;
c0004c7a:	c7 05 94 05 01 c0 00 	movl   $0x0,0xc0010594
c0004c81:	00 00 00 
/work/x86_os_my/device/keyboard.c:151
      } /* 由于caps_lock不是弹起后关闭,所以需要单独处理 */

      return;   // 直接返回结束此次中断处理程序
c0004c84:	e9 b1 01 00 00       	jmp    c0004e3a <intr_keyboard_handler+0x28f>
c0004c89:	e9 ac 01 00 00       	jmp    c0004e3a <intr_keyboard_handler+0x28f>
/work/x86_os_my/device/keyboard.c:155

   } 
   /* 若为通码,只处理数组中定义的键以及alt_right和ctrl键,全是make_code */
   else if ((scancode > 0x00 && scancode < 0x3b) || \
c0004c8e:	66 83 7d f6 00       	cmpw   $0x0,-0xa(%ebp)
c0004c93:	74 07                	je     c0004c9c <intr_keyboard_handler+0xf1>
/work/x86_os_my/device/keyboard.c:155 (discriminator 1)
c0004c95:	66 83 7d f6 3a       	cmpw   $0x3a,-0xa(%ebp)
c0004c9a:	76 14                	jbe    c0004cb0 <intr_keyboard_handler+0x105>
/work/x86_os_my/device/keyboard.c:155 (discriminator 3)
c0004c9c:	66 81 7d f6 38 e0    	cmpw   $0xe038,-0xa(%ebp)
c0004ca2:	74 0c                	je     c0004cb0 <intr_keyboard_handler+0x105>
/work/x86_os_my/device/keyboard.c:156
	       (scancode == alt_r_make) || \
c0004ca4:	66 81 7d f6 1d e0    	cmpw   $0xe01d,-0xa(%ebp)
c0004caa:	0f 85 78 01 00 00    	jne    c0004e28 <intr_keyboard_handler+0x27d>
/work/x86_os_my/device/keyboard.c:158
	       (scancode == ctrl_r_make)) {
      bool shift = false;  // 判断是否与shift组合,用来在一维数组中索引对应的字符
c0004cb0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/device/keyboard.c:159
      if ((scancode < 0x0e) || (scancode == 0x29) || \
c0004cb7:	66 83 7d f6 0d       	cmpw   $0xd,-0xa(%ebp)
c0004cbc:	76 3f                	jbe    c0004cfd <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:159 (discriminator 1)
c0004cbe:	66 83 7d f6 29       	cmpw   $0x29,-0xa(%ebp)
c0004cc3:	74 38                	je     c0004cfd <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:159 (discriminator 2)
c0004cc5:	66 83 7d f6 1a       	cmpw   $0x1a,-0xa(%ebp)
c0004cca:	74 31                	je     c0004cfd <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:160
	 (scancode == 0x1a) || (scancode == 0x1b) || \
c0004ccc:	66 83 7d f6 1b       	cmpw   $0x1b,-0xa(%ebp)
c0004cd1:	74 2a                	je     c0004cfd <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:160 (discriminator 1)
c0004cd3:	66 83 7d f6 2b       	cmpw   $0x2b,-0xa(%ebp)
c0004cd8:	74 23                	je     c0004cfd <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:161
	 (scancode == 0x2b) || (scancode == 0x27) || \
c0004cda:	66 83 7d f6 27       	cmpw   $0x27,-0xa(%ebp)
c0004cdf:	74 1c                	je     c0004cfd <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:161 (discriminator 1)
c0004ce1:	66 83 7d f6 28       	cmpw   $0x28,-0xa(%ebp)
c0004ce6:	74 15                	je     c0004cfd <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:162
	 (scancode == 0x28) || (scancode == 0x33) || \
c0004ce8:	66 83 7d f6 33       	cmpw   $0x33,-0xa(%ebp)
c0004ced:	74 0e                	je     c0004cfd <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:162 (discriminator 1)
c0004cef:	66 83 7d f6 34       	cmpw   $0x34,-0xa(%ebp)
c0004cf4:	74 07                	je     c0004cfd <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:163
	 (scancode == 0x34) || (scancode == 0x35)) {  
c0004cf6:	66 83 7d f6 35       	cmpw   $0x35,-0xa(%ebp)
c0004cfb:	75 0f                	jne    c0004d0c <intr_keyboard_handler+0x161>
/work/x86_os_my/device/keyboard.c:176
		     0x28 字符'\''
		     0x33 字符','
		     0x34 字符'.'
		     0x35 字符'/' 
	    *******************************/
	 if (shift_down_last) {  // 如果同时按下了shift键
c0004cfd:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0004d01:	74 3a                	je     c0004d3d <intr_keyboard_handler+0x192>
/work/x86_os_my/device/keyboard.c:177
	    shift = true;
c0004d03:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
/work/x86_os_my/device/keyboard.c:176
		     0x28 字符'\''
		     0x33 字符','
		     0x34 字符'.'
		     0x35 字符'/' 
	    *******************************/
	 if (shift_down_last) {  // 如果同时按下了shift键
c0004d0a:	eb 31                	jmp    c0004d3d <intr_keyboard_handler+0x192>
/work/x86_os_my/device/keyboard.c:180
	    shift = true;
	 }
      } else {	  // 默认为字母键
	 if (shift_down_last && caps_lock_last) {  // 如果shift和capslock同时按下
c0004d0c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0004d10:	74 0f                	je     c0004d21 <intr_keyboard_handler+0x176>
/work/x86_os_my/device/keyboard.c:180 (discriminator 1)
c0004d12:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0004d16:	74 09                	je     c0004d21 <intr_keyboard_handler+0x176>
/work/x86_os_my/device/keyboard.c:181
	    shift = false;
c0004d18:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0004d1f:	eb 1c                	jmp    c0004d3d <intr_keyboard_handler+0x192>
/work/x86_os_my/device/keyboard.c:182
	 } else if (shift_down_last || caps_lock_last) { // 如果shift和capslock任意被按下
c0004d21:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0004d25:	75 06                	jne    c0004d2d <intr_keyboard_handler+0x182>
/work/x86_os_my/device/keyboard.c:182 (discriminator 1)
c0004d27:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0004d2b:	74 09                	je     c0004d36 <intr_keyboard_handler+0x18b>
/work/x86_os_my/device/keyboard.c:183
	    shift = true;
c0004d2d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c0004d34:	eb 07                	jmp    c0004d3d <intr_keyboard_handler+0x192>
/work/x86_os_my/device/keyboard.c:185
	 } else {
	    shift = false;
c0004d36:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/device/keyboard.c:189
	 }
      }

      uint8_t index = (scancode &= 0x00ff);  // 将扫描码的高字节置0,主要是针对高字节是e0的扫描码.
c0004d3d:	66 81 65 f6 ff 00    	andw   $0xff,-0xa(%ebp)
c0004d43:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0004d47:	88 45 d9             	mov    %al,-0x27(%ebp)
/work/x86_os_my/device/keyboard.c:190
      char cur_char = keymap[index][shift];  // 在数组中找到对应的字符
c0004d4a:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0004d4e:	8d 14 00             	lea    (%eax,%eax,1),%edx
c0004d51:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0004d54:	01 d0                	add    %edx,%eax
c0004d56:	05 e0 00 01 c0       	add    $0xc00100e0,%eax
c0004d5b:	0f b6 00             	movzbl (%eax),%eax
c0004d5e:	88 45 ef             	mov    %al,-0x11(%ebp)
/work/x86_os_my/device/keyboard.c:193

   /* 如果cur_char不为0,也就是ascii码为除'\0'外的字符就加入键盘缓冲区中 */
      if (cur_char) {
c0004d61:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
c0004d65:	74 54                	je     c0004dbb <intr_keyboard_handler+0x210>
/work/x86_os_my/device/keyboard.c:200
     /*****************  快捷键ctrl+l和ctrl+u的处理 *********************
      * 下面是把ctrl+l和ctrl+u这两种组合键产生的字符置为:
      * cur_char的asc码-字符a的asc码, 此差值比较小,
      * 属于asc码表中不可见的字符部分.故不会产生可见字符.
      * 我们在shell中将ascii值为l-a和u-a的分别处理为清屏和删除输入的快捷键*/
	 if ((ctrl_down_last && cur_char == 'l') || (ctrl_down_last && cur_char == 'u')) {
c0004d67:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0004d6b:	74 06                	je     c0004d73 <intr_keyboard_handler+0x1c8>
/work/x86_os_my/device/keyboard.c:200 (discriminator 1)
c0004d6d:	80 7d ef 6c          	cmpb   $0x6c,-0x11(%ebp)
c0004d71:	74 0c                	je     c0004d7f <intr_keyboard_handler+0x1d4>
/work/x86_os_my/device/keyboard.c:200 (discriminator 3)
c0004d73:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0004d77:	74 10                	je     c0004d89 <intr_keyboard_handler+0x1de>
/work/x86_os_my/device/keyboard.c:200 (discriminator 4)
c0004d79:	80 7d ef 75          	cmpb   $0x75,-0x11(%ebp)
c0004d7d:	75 0a                	jne    c0004d89 <intr_keyboard_handler+0x1de>
/work/x86_os_my/device/keyboard.c:201
	    cur_char -= 'a';
c0004d7f:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c0004d83:	83 e8 61             	sub    $0x61,%eax
c0004d86:	88 45 ef             	mov    %al,-0x11(%ebp)
/work/x86_os_my/device/keyboard.c:207
	 }
      /****************************************************************/
      
   /* 若kbd_buf中未满并且待加入的cur_char不为0,
    * 则将其加入到缓冲区kbd_buf中 */
	 if (!ioq_full(&kbd_buf)) {
c0004d89:	83 ec 0c             	sub    $0xc,%esp
c0004d8c:	68 e0 11 01 c0       	push   $0xc00111e0
c0004d91:	e8 58 01 00 00       	call   c0004eee <ioq_full>
c0004d96:	83 c4 10             	add    $0x10,%esp
c0004d99:	85 c0                	test   %eax,%eax
c0004d9b:	0f 85 9c 00 00 00    	jne    c0004e3d <intr_keyboard_handler+0x292>
/work/x86_os_my/device/keyboard.c:208
	    ioq_putchar(&kbd_buf, cur_char);
c0004da1:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
c0004da5:	83 ec 08             	sub    $0x8,%esp
c0004da8:	50                   	push   %eax
c0004da9:	68 e0 11 01 c0       	push   $0xc00111e0
c0004dae:	e8 0d 03 00 00       	call   c00050c0 <ioq_putchar>
c0004db3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/keyboard.c:210
	 }
	 return;
c0004db6:	e9 82 00 00 00       	jmp    c0004e3d <intr_keyboard_handler+0x292>
/work/x86_os_my/device/keyboard.c:214
      }

      /* 记录本次是否按下了下面几类控制键之一,供下次键入时判断组合键 */
      if (scancode == ctrl_l_make || scancode == ctrl_r_make) {
c0004dbb:	66 83 7d f6 1d       	cmpw   $0x1d,-0xa(%ebp)
c0004dc0:	74 08                	je     c0004dca <intr_keyboard_handler+0x21f>
/work/x86_os_my/device/keyboard.c:214 (discriminator 1)
c0004dc2:	66 81 7d f6 1d e0    	cmpw   $0xe01d,-0xa(%ebp)
c0004dc8:	75 0c                	jne    c0004dd6 <intr_keyboard_handler+0x22b>
/work/x86_os_my/device/keyboard.c:215
	 ctrl_status = true;
c0004dca:	c7 05 8c 05 01 c0 01 	movl   $0x1,0xc001058c
c0004dd1:	00 00 00 
c0004dd4:	eb 50                	jmp    c0004e26 <intr_keyboard_handler+0x27b>
/work/x86_os_my/device/keyboard.c:216
      } else if (scancode == shift_l_make || scancode == shift_r_make) {
c0004dd6:	66 83 7d f6 2a       	cmpw   $0x2a,-0xa(%ebp)
c0004ddb:	74 07                	je     c0004de4 <intr_keyboard_handler+0x239>
/work/x86_os_my/device/keyboard.c:216 (discriminator 1)
c0004ddd:	66 83 7d f6 36       	cmpw   $0x36,-0xa(%ebp)
c0004de2:	75 0c                	jne    c0004df0 <intr_keyboard_handler+0x245>
/work/x86_os_my/device/keyboard.c:217
	 shift_status = true;
c0004de4:	c7 05 90 05 01 c0 01 	movl   $0x1,0xc0010590
c0004deb:	00 00 00 
c0004dee:	eb 36                	jmp    c0004e26 <intr_keyboard_handler+0x27b>
/work/x86_os_my/device/keyboard.c:218
      } else if (scancode == alt_l_make || scancode == alt_r_make) {
c0004df0:	66 83 7d f6 38       	cmpw   $0x38,-0xa(%ebp)
c0004df5:	74 08                	je     c0004dff <intr_keyboard_handler+0x254>
/work/x86_os_my/device/keyboard.c:218 (discriminator 1)
c0004df7:	66 81 7d f6 38 e0    	cmpw   $0xe038,-0xa(%ebp)
c0004dfd:	75 0c                	jne    c0004e0b <intr_keyboard_handler+0x260>
/work/x86_os_my/device/keyboard.c:219
	 alt_status = true;
c0004dff:	c7 05 94 05 01 c0 01 	movl   $0x1,0xc0010594
c0004e06:	00 00 00 
c0004e09:	eb 1b                	jmp    c0004e26 <intr_keyboard_handler+0x27b>
/work/x86_os_my/device/keyboard.c:220
      } else if (scancode == caps_lock_make) {
c0004e0b:	66 83 7d f6 3a       	cmpw   $0x3a,-0xa(%ebp)
c0004e10:	75 2e                	jne    c0004e40 <intr_keyboard_handler+0x295>
/work/x86_os_my/device/keyboard.c:223
      /* 不管之前是否有按下caps_lock键,当再次按下时则状态取反,
       * 即:已经开启时,再按下同样的键是关闭。关闭时按下表示开启。*/
	 caps_lock_status = !caps_lock_status;
c0004e12:	a1 98 05 01 c0       	mov    0xc0010598,%eax
c0004e17:	85 c0                	test   %eax,%eax
c0004e19:	0f 94 c0             	sete   %al
c0004e1c:	0f b6 c0             	movzbl %al,%eax
c0004e1f:	a3 98 05 01 c0       	mov    %eax,0xc0010598
/work/x86_os_my/device/keyboard.c:157

   } 
   /* 若为通码,只处理数组中定义的键以及alt_right和ctrl键,全是make_code */
   else if ((scancode > 0x00 && scancode < 0x3b) || \
	       (scancode == alt_r_make) || \
	       (scancode == ctrl_r_make)) {
c0004e24:	eb 1a                	jmp    c0004e40 <intr_keyboard_handler+0x295>
/work/x86_os_my/device/keyboard.c:157 (discriminator 3)
c0004e26:	eb 18                	jmp    c0004e40 <intr_keyboard_handler+0x295>
/work/x86_os_my/device/keyboard.c:226
      /* 不管之前是否有按下caps_lock键,当再次按下时则状态取反,
       * 即:已经开启时,再按下同样的键是关闭。关闭时按下表示开启。*/
	 caps_lock_status = !caps_lock_status;
      }
   } else {
      put_str("unknown key\n");
c0004e28:	83 ec 0c             	sub    $0xc,%esp
c0004e2b:	68 39 ca 00 c0       	push   $0xc000ca39
c0004e30:	e8 3b d3 ff ff       	call   c0002170 <put_str>
c0004e35:	83 c4 10             	add    $0x10,%esp
c0004e38:	eb 07                	jmp    c0004e41 <intr_keyboard_handler+0x296>
/work/x86_os_my/device/keyboard.c:151
	 shift_status = false;
      } else if (make_code == alt_l_make || make_code == alt_r_make) {
	 alt_status = false;
      } /* 由于caps_lock不是弹起后关闭,所以需要单独处理 */

      return;   // 直接返回结束此次中断处理程序
c0004e3a:	90                   	nop
c0004e3b:	eb 04                	jmp    c0004e41 <intr_keyboard_handler+0x296>
/work/x86_os_my/device/keyboard.c:210
   /* 若kbd_buf中未满并且待加入的cur_char不为0,
    * 则将其加入到缓冲区kbd_buf中 */
	 if (!ioq_full(&kbd_buf)) {
	    ioq_putchar(&kbd_buf, cur_char);
	 }
	 return;
c0004e3d:	90                   	nop
c0004e3e:	eb 01                	jmp    c0004e41 <intr_keyboard_handler+0x296>
/work/x86_os_my/device/keyboard.c:157

   } 
   /* 若为通码,只处理数组中定义的键以及alt_right和ctrl键,全是make_code */
   else if ((scancode > 0x00 && scancode < 0x3b) || \
	       (scancode == alt_r_make) || \
	       (scancode == ctrl_r_make)) {
c0004e40:	90                   	nop
/work/x86_os_my/device/keyboard.c:228
	 caps_lock_status = !caps_lock_status;
      }
   } else {
      put_str("unknown key\n");
   }
}
c0004e41:	c9                   	leave  
c0004e42:	c3                   	ret    

c0004e43 <keyboard_init>:
keyboard_init():
/work/x86_os_my/device/keyboard.c:231

/* 键盘初始化 */
void keyboard_init() {
c0004e43:	55                   	push   %ebp
c0004e44:	89 e5                	mov    %esp,%ebp
c0004e46:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/keyboard.c:232
   put_str("keyboard init start\n");
c0004e49:	83 ec 0c             	sub    $0xc,%esp
c0004e4c:	68 46 ca 00 c0       	push   $0xc000ca46
c0004e51:	e8 1a d3 ff ff       	call   c0002170 <put_str>
c0004e56:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/keyboard.c:233
   ioqueue_init(&kbd_buf);
c0004e59:	83 ec 0c             	sub    $0xc,%esp
c0004e5c:	68 e0 11 01 c0       	push   $0xc00111e0
c0004e61:	e8 28 00 00 00       	call   c0004e8e <ioqueue_init>
c0004e66:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/keyboard.c:234
   register_handler(0x21, intr_keyboard_handler);
c0004e69:	83 ec 08             	sub    $0x8,%esp
c0004e6c:	68 ab 4b 00 c0       	push   $0xc0004bab
c0004e71:	6a 21                	push   $0x21
c0004e73:	e8 33 cb ff ff       	call   c00019ab <register_handler>
c0004e78:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/keyboard.c:235
   put_str("keyboard init done\n");
c0004e7b:	83 ec 0c             	sub    $0xc,%esp
c0004e7e:	68 5b ca 00 c0       	push   $0xc000ca5b
c0004e83:	e8 e8 d2 ff ff       	call   c0002170 <put_str>
c0004e88:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/keyboard.c:236
}
c0004e8b:	90                   	nop
c0004e8c:	c9                   	leave  
c0004e8d:	c3                   	ret    

c0004e8e <ioqueue_init>:
ioqueue_init():
/work/x86_os_my/device/ioqueue.c:7
#include "interrupt.h"
#include "global.h"
#include "debug.h"

/* 初始化io队列ioq */
void ioqueue_init(struct ioqueue* ioq) {
c0004e8e:	55                   	push   %ebp
c0004e8f:	89 e5                	mov    %esp,%ebp
c0004e91:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/ioqueue.c:8
   lock_init(&ioq->lock);     // 初始化io队列的锁
c0004e94:	8b 45 08             	mov    0x8(%ebp),%eax
c0004e97:	83 ec 0c             	sub    $0xc,%esp
c0004e9a:	50                   	push   %eax
c0004e9b:	e8 05 fa ff ff       	call   c00048a5 <lock_init>
c0004ea0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:9
   ioq->producer = ioq->consumer = NULL;  // 生产者和消费者置空
c0004ea3:	8b 45 08             	mov    0x8(%ebp),%eax
c0004ea6:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
c0004ead:	8b 45 08             	mov    0x8(%ebp),%eax
c0004eb0:	8b 50 20             	mov    0x20(%eax),%edx
c0004eb3:	8b 45 08             	mov    0x8(%ebp),%eax
c0004eb6:	89 50 1c             	mov    %edx,0x1c(%eax)
/work/x86_os_my/device/ioqueue.c:10
   ioq->head = ioq->tail = 0; // 队列的首尾指针指向缓冲区数组第0个位置
c0004eb9:	8b 45 08             	mov    0x8(%ebp),%eax
c0004ebc:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)
c0004ec3:	8b 45 08             	mov    0x8(%ebp),%eax
c0004ec6:	8b 50 68             	mov    0x68(%eax),%edx
c0004ec9:	8b 45 08             	mov    0x8(%ebp),%eax
c0004ecc:	89 50 64             	mov    %edx,0x64(%eax)
/work/x86_os_my/device/ioqueue.c:11
}
c0004ecf:	90                   	nop
c0004ed0:	c9                   	leave  
c0004ed1:	c3                   	ret    

c0004ed2 <next_pos>:
next_pos():
/work/x86_os_my/device/ioqueue.c:14

/* 返回pos在缓冲区中的下一个位置值 */
static int32_t next_pos(int32_t pos) {
c0004ed2:	55                   	push   %ebp
c0004ed3:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/device/ioqueue.c:15
   return (pos + 1) % bufsize; 
c0004ed5:	8b 45 08             	mov    0x8(%ebp),%eax
c0004ed8:	8d 50 01             	lea    0x1(%eax),%edx
c0004edb:	89 d0                	mov    %edx,%eax
c0004edd:	c1 f8 1f             	sar    $0x1f,%eax
c0004ee0:	c1 e8 1a             	shr    $0x1a,%eax
c0004ee3:	01 c2                	add    %eax,%edx
c0004ee5:	83 e2 3f             	and    $0x3f,%edx
c0004ee8:	29 c2                	sub    %eax,%edx
c0004eea:	89 d0                	mov    %edx,%eax
/work/x86_os_my/device/ioqueue.c:16
}
c0004eec:	5d                   	pop    %ebp
c0004eed:	c3                   	ret    

c0004eee <ioq_full>:
ioq_full():
/work/x86_os_my/device/ioqueue.c:19

/* 判断队列是否已满 */
bool ioq_full(struct ioqueue* ioq) {
c0004eee:	55                   	push   %ebp
c0004eef:	89 e5                	mov    %esp,%ebp
c0004ef1:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/ioqueue.c:20
   ASSERT(intr_get_status() == INTR_OFF);
c0004ef4:	e8 8e ca ff ff       	call   c0001987 <intr_get_status>
c0004ef9:	85 c0                	test   %eax,%eax
c0004efb:	74 19                	je     c0004f16 <ioq_full+0x28>
/work/x86_os_my/device/ioqueue.c:20 (discriminator 1)
c0004efd:	68 70 ca 00 c0       	push   $0xc000ca70
c0004f02:	68 d4 ca 00 c0       	push   $0xc000cad4
c0004f07:	6a 14                	push   $0x14
c0004f09:	68 8e ca 00 c0       	push   $0xc000ca8e
c0004f0e:	e8 0e d4 ff ff       	call   c0002321 <panic_spin>
c0004f13:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:21
   return next_pos(ioq->head) == ioq->tail;
c0004f16:	8b 45 08             	mov    0x8(%ebp),%eax
c0004f19:	8b 40 64             	mov    0x64(%eax),%eax
c0004f1c:	83 ec 0c             	sub    $0xc,%esp
c0004f1f:	50                   	push   %eax
c0004f20:	e8 ad ff ff ff       	call   c0004ed2 <next_pos>
c0004f25:	83 c4 10             	add    $0x10,%esp
c0004f28:	89 c2                	mov    %eax,%edx
c0004f2a:	8b 45 08             	mov    0x8(%ebp),%eax
c0004f2d:	8b 40 68             	mov    0x68(%eax),%eax
c0004f30:	39 c2                	cmp    %eax,%edx
c0004f32:	0f 94 c0             	sete   %al
c0004f35:	0f b6 c0             	movzbl %al,%eax
/work/x86_os_my/device/ioqueue.c:22
}
c0004f38:	c9                   	leave  
c0004f39:	c3                   	ret    

c0004f3a <ioq_empty>:
ioq_empty():
/work/x86_os_my/device/ioqueue.c:25

/* 判断队列是否已空 */
static bool ioq_empty(struct ioqueue* ioq) {
c0004f3a:	55                   	push   %ebp
c0004f3b:	89 e5                	mov    %esp,%ebp
c0004f3d:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/ioqueue.c:26
   ASSERT(intr_get_status() == INTR_OFF);
c0004f40:	e8 42 ca ff ff       	call   c0001987 <intr_get_status>
c0004f45:	85 c0                	test   %eax,%eax
c0004f47:	74 19                	je     c0004f62 <ioq_empty+0x28>
/work/x86_os_my/device/ioqueue.c:26 (discriminator 1)
c0004f49:	68 70 ca 00 c0       	push   $0xc000ca70
c0004f4e:	68 e0 ca 00 c0       	push   $0xc000cae0
c0004f53:	6a 1a                	push   $0x1a
c0004f55:	68 8e ca 00 c0       	push   $0xc000ca8e
c0004f5a:	e8 c2 d3 ff ff       	call   c0002321 <panic_spin>
c0004f5f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:27
   return ioq->head == ioq->tail;
c0004f62:	8b 45 08             	mov    0x8(%ebp),%eax
c0004f65:	8b 50 64             	mov    0x64(%eax),%edx
c0004f68:	8b 45 08             	mov    0x8(%ebp),%eax
c0004f6b:	8b 40 68             	mov    0x68(%eax),%eax
c0004f6e:	39 c2                	cmp    %eax,%edx
c0004f70:	0f 94 c0             	sete   %al
c0004f73:	0f b6 c0             	movzbl %al,%eax
/work/x86_os_my/device/ioqueue.c:28
}
c0004f76:	c9                   	leave  
c0004f77:	c3                   	ret    

c0004f78 <ioq_wait>:
ioq_wait():
/work/x86_os_my/device/ioqueue.c:31

/* 使当前生产者或消费者在此缓冲区上等待 */
static void ioq_wait(struct task_struct** waiter) {
c0004f78:	55                   	push   %ebp
c0004f79:	89 e5                	mov    %esp,%ebp
c0004f7b:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/ioqueue.c:32
   ASSERT(*waiter == NULL && waiter != NULL);
c0004f7e:	8b 45 08             	mov    0x8(%ebp),%eax
c0004f81:	8b 00                	mov    (%eax),%eax
c0004f83:	85 c0                	test   %eax,%eax
c0004f85:	75 06                	jne    c0004f8d <ioq_wait+0x15>
/work/x86_os_my/device/ioqueue.c:32 (discriminator 1)
c0004f87:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0004f8b:	75 19                	jne    c0004fa6 <ioq_wait+0x2e>
/work/x86_os_my/device/ioqueue.c:32 (discriminator 3)
c0004f8d:	68 a0 ca 00 c0       	push   $0xc000caa0
c0004f92:	68 ec ca 00 c0       	push   $0xc000caec
c0004f97:	6a 20                	push   $0x20
c0004f99:	68 8e ca 00 c0       	push   $0xc000ca8e
c0004f9e:	e8 7e d3 ff ff       	call   c0002321 <panic_spin>
c0004fa3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:33
   *waiter = running_thread();
c0004fa6:	e8 ff eb ff ff       	call   c0003baa <running_thread>
c0004fab:	89 c2                	mov    %eax,%edx
c0004fad:	8b 45 08             	mov    0x8(%ebp),%eax
c0004fb0:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/device/ioqueue.c:34
   thread_block(TASK_BLOCKED);
c0004fb2:	83 ec 0c             	sub    $0xc,%esp
c0004fb5:	6a 02                	push   $0x2
c0004fb7:	e8 91 f0 ff ff       	call   c000404d <thread_block>
c0004fbc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:35
}
c0004fbf:	90                   	nop
c0004fc0:	c9                   	leave  
c0004fc1:	c3                   	ret    

c0004fc2 <wakeup>:
wakeup():
/work/x86_os_my/device/ioqueue.c:38

/* 唤醒waiter */
static void wakeup(struct task_struct** waiter) {
c0004fc2:	55                   	push   %ebp
c0004fc3:	89 e5                	mov    %esp,%ebp
c0004fc5:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/ioqueue.c:39
   ASSERT(*waiter != NULL);
c0004fc8:	8b 45 08             	mov    0x8(%ebp),%eax
c0004fcb:	8b 00                	mov    (%eax),%eax
c0004fcd:	85 c0                	test   %eax,%eax
c0004fcf:	75 19                	jne    c0004fea <wakeup+0x28>
/work/x86_os_my/device/ioqueue.c:39 (discriminator 1)
c0004fd1:	68 c2 ca 00 c0       	push   $0xc000cac2
c0004fd6:	68 f8 ca 00 c0       	push   $0xc000caf8
c0004fdb:	6a 27                	push   $0x27
c0004fdd:	68 8e ca 00 c0       	push   $0xc000ca8e
c0004fe2:	e8 3a d3 ff ff       	call   c0002321 <panic_spin>
c0004fe7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:40
   thread_unblock(*waiter); 
c0004fea:	8b 45 08             	mov    0x8(%ebp),%eax
c0004fed:	8b 00                	mov    (%eax),%eax
c0004fef:	83 ec 0c             	sub    $0xc,%esp
c0004ff2:	50                   	push   %eax
c0004ff3:	e8 b8 f0 ff ff       	call   c00040b0 <thread_unblock>
c0004ff8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:41
   *waiter = NULL;
c0004ffb:	8b 45 08             	mov    0x8(%ebp),%eax
c0004ffe:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/device/ioqueue.c:42
}
c0005004:	90                   	nop
c0005005:	c9                   	leave  
c0005006:	c3                   	ret    

c0005007 <ioq_getchar>:
ioq_getchar():
/work/x86_os_my/device/ioqueue.c:45

/* 消费者从ioq队列中获取一个字符 */
char ioq_getchar(struct ioqueue* ioq) {
c0005007:	55                   	push   %ebp
c0005008:	89 e5                	mov    %esp,%ebp
c000500a:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/ioqueue.c:46
   ASSERT(intr_get_status() == INTR_OFF);
c000500d:	e8 75 c9 ff ff       	call   c0001987 <intr_get_status>
c0005012:	85 c0                	test   %eax,%eax
c0005014:	74 4b                	je     c0005061 <ioq_getchar+0x5a>
/work/x86_os_my/device/ioqueue.c:46 (discriminator 1)
c0005016:	68 70 ca 00 c0       	push   $0xc000ca70
c000501b:	68 00 cb 00 c0       	push   $0xc000cb00
c0005020:	6a 2e                	push   $0x2e
c0005022:	68 8e ca 00 c0       	push   $0xc000ca8e
c0005027:	e8 f5 d2 ff ff       	call   c0002321 <panic_spin>
c000502c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:51 (discriminator 1)

/* 若缓冲区(队列)为空,把消费者ioq->consumer记为当前线程自己,
 * 目的是将来生产者往缓冲区里装商品后,生产者知道唤醒哪个消费者,
 * 也就是唤醒当前线程自己*/
   while (ioq_empty(ioq)) {
c000502f:	eb 30                	jmp    c0005061 <ioq_getchar+0x5a>
/work/x86_os_my/device/ioqueue.c:52
      lock_acquire(&ioq->lock);	 
c0005031:	8b 45 08             	mov    0x8(%ebp),%eax
c0005034:	83 ec 0c             	sub    $0xc,%esp
c0005037:	50                   	push   %eax
c0005038:	e8 42 fa ff ff       	call   c0004a7f <lock_acquire>
c000503d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:53
      ioq_wait(&ioq->consumer);
c0005040:	8b 45 08             	mov    0x8(%ebp),%eax
c0005043:	83 c0 20             	add    $0x20,%eax
c0005046:	83 ec 0c             	sub    $0xc,%esp
c0005049:	50                   	push   %eax
c000504a:	e8 29 ff ff ff       	call   c0004f78 <ioq_wait>
c000504f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:54
      lock_release(&ioq->lock);
c0005052:	8b 45 08             	mov    0x8(%ebp),%eax
c0005055:	83 ec 0c             	sub    $0xc,%esp
c0005058:	50                   	push   %eax
c0005059:	e8 98 fa ff ff       	call   c0004af6 <lock_release>
c000505e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:51
   ASSERT(intr_get_status() == INTR_OFF);

/* 若缓冲区(队列)为空,把消费者ioq->consumer记为当前线程自己,
 * 目的是将来生产者往缓冲区里装商品后,生产者知道唤醒哪个消费者,
 * 也就是唤醒当前线程自己*/
   while (ioq_empty(ioq)) {
c0005061:	83 ec 0c             	sub    $0xc,%esp
c0005064:	ff 75 08             	pushl  0x8(%ebp)
c0005067:	e8 ce fe ff ff       	call   c0004f3a <ioq_empty>
c000506c:	83 c4 10             	add    $0x10,%esp
c000506f:	85 c0                	test   %eax,%eax
c0005071:	75 be                	jne    c0005031 <ioq_getchar+0x2a>
/work/x86_os_my/device/ioqueue.c:57
      lock_acquire(&ioq->lock);	 
      ioq_wait(&ioq->consumer);
      lock_release(&ioq->lock);
   }

   char byte = ioq->buf[ioq->tail];	  // 从缓冲区中取出
c0005073:	8b 45 08             	mov    0x8(%ebp),%eax
c0005076:	8b 40 68             	mov    0x68(%eax),%eax
c0005079:	8b 55 08             	mov    0x8(%ebp),%edx
c000507c:	0f b6 44 02 24       	movzbl 0x24(%edx,%eax,1),%eax
c0005081:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/device/ioqueue.c:58
   ioq->tail = next_pos(ioq->tail);	  // 把读游标移到下一位置
c0005084:	8b 45 08             	mov    0x8(%ebp),%eax
c0005087:	8b 40 68             	mov    0x68(%eax),%eax
c000508a:	83 ec 0c             	sub    $0xc,%esp
c000508d:	50                   	push   %eax
c000508e:	e8 3f fe ff ff       	call   c0004ed2 <next_pos>
c0005093:	83 c4 10             	add    $0x10,%esp
c0005096:	89 c2                	mov    %eax,%edx
c0005098:	8b 45 08             	mov    0x8(%ebp),%eax
c000509b:	89 50 68             	mov    %edx,0x68(%eax)
/work/x86_os_my/device/ioqueue.c:60

   if (ioq->producer != NULL) {
c000509e:	8b 45 08             	mov    0x8(%ebp),%eax
c00050a1:	8b 40 1c             	mov    0x1c(%eax),%eax
c00050a4:	85 c0                	test   %eax,%eax
c00050a6:	74 12                	je     c00050ba <ioq_getchar+0xb3>
/work/x86_os_my/device/ioqueue.c:61
      wakeup(&ioq->producer);		  // 唤醒生产者
c00050a8:	8b 45 08             	mov    0x8(%ebp),%eax
c00050ab:	83 c0 1c             	add    $0x1c,%eax
c00050ae:	83 ec 0c             	sub    $0xc,%esp
c00050b1:	50                   	push   %eax
c00050b2:	e8 0b ff ff ff       	call   c0004fc2 <wakeup>
c00050b7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:64
   }

   return byte; 
c00050ba:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
/work/x86_os_my/device/ioqueue.c:65
}
c00050be:	c9                   	leave  
c00050bf:	c3                   	ret    

c00050c0 <ioq_putchar>:
ioq_putchar():
/work/x86_os_my/device/ioqueue.c:68

/* 生产者往ioq队列中写入一个字符byte */
void ioq_putchar(struct ioqueue* ioq, char byte) {
c00050c0:	55                   	push   %ebp
c00050c1:	89 e5                	mov    %esp,%ebp
c00050c3:	83 ec 18             	sub    $0x18,%esp
c00050c6:	8b 45 0c             	mov    0xc(%ebp),%eax
c00050c9:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/device/ioqueue.c:69
   ASSERT(intr_get_status() == INTR_OFF);
c00050cc:	e8 b6 c8 ff ff       	call   c0001987 <intr_get_status>
c00050d1:	85 c0                	test   %eax,%eax
c00050d3:	74 4b                	je     c0005120 <ioq_putchar+0x60>
/work/x86_os_my/device/ioqueue.c:69 (discriminator 1)
c00050d5:	68 70 ca 00 c0       	push   $0xc000ca70
c00050da:	68 0c cb 00 c0       	push   $0xc000cb0c
c00050df:	6a 45                	push   $0x45
c00050e1:	68 8e ca 00 c0       	push   $0xc000ca8e
c00050e6:	e8 36 d2 ff ff       	call   c0002321 <panic_spin>
c00050eb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:74 (discriminator 1)

/* 若缓冲区(队列)已经满了,把生产者ioq->producer记为自己,
 * 为的是当缓冲区里的东西被消费者取完后让消费者知道唤醒哪个生产者,
 * 也就是唤醒当前线程自己*/
   while (ioq_full(ioq)) {
c00050ee:	eb 30                	jmp    c0005120 <ioq_putchar+0x60>
/work/x86_os_my/device/ioqueue.c:75
      lock_acquire(&ioq->lock);
c00050f0:	8b 45 08             	mov    0x8(%ebp),%eax
c00050f3:	83 ec 0c             	sub    $0xc,%esp
c00050f6:	50                   	push   %eax
c00050f7:	e8 83 f9 ff ff       	call   c0004a7f <lock_acquire>
c00050fc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:76
      ioq_wait(&ioq->producer);
c00050ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0005102:	83 c0 1c             	add    $0x1c,%eax
c0005105:	83 ec 0c             	sub    $0xc,%esp
c0005108:	50                   	push   %eax
c0005109:	e8 6a fe ff ff       	call   c0004f78 <ioq_wait>
c000510e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:77
      lock_release(&ioq->lock);
c0005111:	8b 45 08             	mov    0x8(%ebp),%eax
c0005114:	83 ec 0c             	sub    $0xc,%esp
c0005117:	50                   	push   %eax
c0005118:	e8 d9 f9 ff ff       	call   c0004af6 <lock_release>
c000511d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:74
   ASSERT(intr_get_status() == INTR_OFF);

/* 若缓冲区(队列)已经满了,把生产者ioq->producer记为自己,
 * 为的是当缓冲区里的东西被消费者取完后让消费者知道唤醒哪个生产者,
 * 也就是唤醒当前线程自己*/
   while (ioq_full(ioq)) {
c0005120:	83 ec 0c             	sub    $0xc,%esp
c0005123:	ff 75 08             	pushl  0x8(%ebp)
c0005126:	e8 c3 fd ff ff       	call   c0004eee <ioq_full>
c000512b:	83 c4 10             	add    $0x10,%esp
c000512e:	85 c0                	test   %eax,%eax
c0005130:	75 be                	jne    c00050f0 <ioq_putchar+0x30>
/work/x86_os_my/device/ioqueue.c:79
      lock_acquire(&ioq->lock);
      ioq_wait(&ioq->producer);
      lock_release(&ioq->lock);
   }
   ioq->buf[ioq->head] = byte;      // 把字节放入缓冲区中
c0005132:	8b 45 08             	mov    0x8(%ebp),%eax
c0005135:	8b 40 64             	mov    0x64(%eax),%eax
c0005138:	8b 55 08             	mov    0x8(%ebp),%edx
c000513b:	0f b6 4d f4          	movzbl -0xc(%ebp),%ecx
c000513f:	88 4c 02 24          	mov    %cl,0x24(%edx,%eax,1)
/work/x86_os_my/device/ioqueue.c:80
   ioq->head = next_pos(ioq->head); // 把写游标移到下一位置
c0005143:	8b 45 08             	mov    0x8(%ebp),%eax
c0005146:	8b 40 64             	mov    0x64(%eax),%eax
c0005149:	83 ec 0c             	sub    $0xc,%esp
c000514c:	50                   	push   %eax
c000514d:	e8 80 fd ff ff       	call   c0004ed2 <next_pos>
c0005152:	83 c4 10             	add    $0x10,%esp
c0005155:	89 c2                	mov    %eax,%edx
c0005157:	8b 45 08             	mov    0x8(%ebp),%eax
c000515a:	89 50 64             	mov    %edx,0x64(%eax)
/work/x86_os_my/device/ioqueue.c:82

   if (ioq->consumer != NULL) {
c000515d:	8b 45 08             	mov    0x8(%ebp),%eax
c0005160:	8b 40 20             	mov    0x20(%eax),%eax
c0005163:	85 c0                	test   %eax,%eax
c0005165:	74 12                	je     c0005179 <ioq_putchar+0xb9>
/work/x86_os_my/device/ioqueue.c:83
      wakeup(&ioq->consumer);          // 唤醒消费者
c0005167:	8b 45 08             	mov    0x8(%ebp),%eax
c000516a:	83 c0 20             	add    $0x20,%eax
c000516d:	83 ec 0c             	sub    $0xc,%esp
c0005170:	50                   	push   %eax
c0005171:	e8 4c fe ff ff       	call   c0004fc2 <wakeup>
c0005176:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:85
   }
}
c0005179:	90                   	nop
c000517a:	c9                   	leave  
c000517b:	c3                   	ret    

c000517c <update_tss_esp>:
update_tss_esp():
/work/x86_os_my/userprog/tss.c:40
	uint32_t io_base;
}; 
static struct tss g_tss;

/* 更新tss中esp0字段的值为pthread的0级栈 */
void update_tss_esp(struct task_struct* pthread) {
c000517c:	55                   	push   %ebp
c000517d:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/userprog/tss.c:41
	g_tss.esp0 = (uint32_t*)((uint32_t)pthread + PG_SIZE);
c000517f:	8b 45 08             	mov    0x8(%ebp),%eax
c0005182:	05 00 10 00 00       	add    $0x1000,%eax
c0005187:	a3 a4 05 01 c0       	mov    %eax,0xc00105a4
/work/x86_os_my/userprog/tss.c:42
}
c000518c:	90                   	nop
c000518d:	5d                   	pop    %ebp
c000518e:	c3                   	ret    

c000518f <make_gdt_desc>:
make_gdt_desc():
/work/x86_os_my/userprog/tss.c:45

/* c语言方式，创建gdt描述符 */
static struct gdt_desc make_gdt_desc(uint32_t* desc_addr, uint32_t limit, uint8_t attr_low, uint8_t attr_high) {
c000518f:	55                   	push   %ebp
c0005190:	89 e5                	mov    %esp,%ebp
c0005192:	83 ec 18             	sub    $0x18,%esp
c0005195:	8b 55 14             	mov    0x14(%ebp),%edx
c0005198:	8b 45 18             	mov    0x18(%ebp),%eax
c000519b:	88 55 ec             	mov    %dl,-0x14(%ebp)
c000519e:	88 45 e8             	mov    %al,-0x18(%ebp)
/work/x86_os_my/userprog/tss.c:46
	uint32_t desc_base = (uint32_t)desc_addr;
c00051a1:	8b 45 0c             	mov    0xc(%ebp),%eax
c00051a4:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/userprog/tss.c:48
	struct gdt_desc desc;
	desc.limit_low_word = limit & 0x0000ffff;
c00051a7:	8b 45 10             	mov    0x10(%ebp),%eax
c00051aa:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
/work/x86_os_my/userprog/tss.c:49
	desc.base_low_word = desc_base & 0x0000ffff;
c00051ae:	8b 45 fc             	mov    -0x4(%ebp),%eax
c00051b1:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
/work/x86_os_my/userprog/tss.c:50
	desc.base_mid_byte = ((desc_base & 0x00ff0000) >> 16);
c00051b5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c00051b8:	25 00 00 ff 00       	and    $0xff0000,%eax
c00051bd:	c1 e8 10             	shr    $0x10,%eax
c00051c0:	88 45 f8             	mov    %al,-0x8(%ebp)
/work/x86_os_my/userprog/tss.c:51
	desc.attr_low_byte = (uint8_t)(attr_low);
c00051c3:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c00051c7:	88 45 f9             	mov    %al,-0x7(%ebp)
/work/x86_os_my/userprog/tss.c:52
	desc.limit_high_attr_high = (((limit & 0x000f0000) >> 16) + (uint8_t)(attr_high));
c00051ca:	8b 45 10             	mov    0x10(%ebp),%eax
c00051cd:	25 00 00 0f 00       	and    $0xf0000,%eax
c00051d2:	c1 e8 10             	shr    $0x10,%eax
c00051d5:	89 c2                	mov    %eax,%edx
c00051d7:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c00051db:	01 d0                	add    %edx,%eax
c00051dd:	88 45 fa             	mov    %al,-0x6(%ebp)
/work/x86_os_my/userprog/tss.c:53
	desc.base_high_byte = desc_base >> 24;
c00051e0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c00051e3:	c1 e8 18             	shr    $0x18,%eax
c00051e6:	88 45 fb             	mov    %al,-0x5(%ebp)
/work/x86_os_my/userprog/tss.c:54
	return desc;
c00051e9:	8b 4d 08             	mov    0x8(%ebp),%ecx
c00051ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00051ef:	8b 55 f8             	mov    -0x8(%ebp),%edx
c00051f2:	89 01                	mov    %eax,(%ecx)
c00051f4:	89 51 04             	mov    %edx,0x4(%ecx)
/work/x86_os_my/userprog/tss.c:55
}
c00051f7:	8b 45 08             	mov    0x8(%ebp),%eax
c00051fa:	c9                   	leave  
c00051fb:	c2 04 00             	ret    $0x4

c00051fe <tss_init>:
tss_init():
/work/x86_os_my/userprog/tss.c:61

/* 在gdt中创建tss描述符
 * 重新加载 gdt
 * 加载 tr
 */
void tss_init() {
c00051fe:	55                   	push   %ebp
c00051ff:	89 e5                	mov    %esp,%ebp
c0005201:	53                   	push   %ebx
c0005202:	83 ec 24             	sub    $0x24,%esp
/work/x86_os_my/userprog/tss.c:62
	put_str("tss_init start\n");
c0005205:	83 ec 0c             	sub    $0xc,%esp
c0005208:	68 18 cb 00 c0       	push   $0xc000cb18
c000520d:	e8 5e cf ff ff       	call   c0002170 <put_str>
c0005212:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/tss.c:63
	uint32_t tss_size = sizeof(g_tss);
c0005215:	c7 45 f4 6c 00 00 00 	movl   $0x6c,-0xc(%ebp)
/work/x86_os_my/userprog/tss.c:64
	memset(&g_tss, 0, tss_size);
c000521c:	83 ec 04             	sub    $0x4,%esp
c000521f:	ff 75 f4             	pushl  -0xc(%ebp)
c0005222:	6a 00                	push   $0x0
c0005224:	68 a0 05 01 c0       	push   $0xc00105a0
c0005229:	e8 95 e5 ff ff       	call   c00037c3 <memset>
c000522e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/tss.c:66
	
	g_tss.ss0 = SELECTOR_K_STACK;	// 0 级栈段的选择子 
c0005231:	c7 05 a8 05 01 c0 10 	movl   $0x10,0xc00105a8
c0005238:	00 00 00 
/work/x86_os_my/userprog/tss.c:67
	g_tss.io_base = tss_size;		// 当 IO 位图的偏移地址大于等于 TSS 大小减 1 时，就表示没有 IO 位图。
c000523b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000523e:	a3 08 06 01 c0       	mov    %eax,0xc0010608
/work/x86_os_my/userprog/tss.c:75
	 * 内核地址 0xC000_0900 是映射到 0x900 的 
	 * 在GDT中，第 0 个段描述符不可用，第 1 个为代码段，第 2 个为数据段和栈，第 3 个为显存段
	 */

	/* 在gdt中添加dpl为0的TSS描述符 */
	*((struct gdt_desc*)0xc0000920) = make_gdt_desc((uint32_t*)&g_tss, tss_size - 1, TSS_ATTR_LOW, TSS_ATTR_HIGH);
c0005243:	bb 20 09 00 c0       	mov    $0xc0000920,%ebx
c0005248:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000524b:	8d 50 ff             	lea    -0x1(%eax),%edx
c000524e:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0005251:	83 ec 0c             	sub    $0xc,%esp
c0005254:	68 80 00 00 00       	push   $0x80
c0005259:	68 89 00 00 00       	push   $0x89
c000525e:	52                   	push   %edx
c000525f:	68 a0 05 01 c0       	push   $0xc00105a0
c0005264:	50                   	push   %eax
c0005265:	e8 25 ff ff ff       	call   c000518f <make_gdt_desc>
c000526a:	83 c4 1c             	add    $0x1c,%esp
c000526d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0005270:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0005273:	89 03                	mov    %eax,(%ebx)
c0005275:	89 53 04             	mov    %edx,0x4(%ebx)
/work/x86_os_my/userprog/tss.c:78

	/* 在gdt中添加dpl为3的,用户级,数据段和代码段描述符 */
	*((struct gdt_desc*)0xc0000928) = make_gdt_desc((uint32_t*)0, 0xfffff, GDT_CODE_ATTR_LOW_DPL3, GDT_ATTR_HIGH);
c0005278:	bb 28 09 00 c0       	mov    $0xc0000928,%ebx
c000527d:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0005280:	83 ec 0c             	sub    $0xc,%esp
c0005283:	68 c0 00 00 00       	push   $0xc0
c0005288:	68 f8 00 00 00       	push   $0xf8
c000528d:	68 ff ff 0f 00       	push   $0xfffff
c0005292:	6a 00                	push   $0x0
c0005294:	50                   	push   %eax
c0005295:	e8 f5 fe ff ff       	call   c000518f <make_gdt_desc>
c000529a:	83 c4 1c             	add    $0x1c,%esp
c000529d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00052a0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c00052a3:	89 03                	mov    %eax,(%ebx)
c00052a5:	89 53 04             	mov    %edx,0x4(%ebx)
/work/x86_os_my/userprog/tss.c:79
	*((struct gdt_desc*)0xc0000930) = make_gdt_desc((uint32_t*)0, 0xfffff, GDT_DATA_ATTR_LOW_DPL3, GDT_ATTR_HIGH);
c00052a8:	bb 30 09 00 c0       	mov    $0xc0000930,%ebx
c00052ad:	8d 45 e0             	lea    -0x20(%ebp),%eax
c00052b0:	83 ec 0c             	sub    $0xc,%esp
c00052b3:	68 c0 00 00 00       	push   $0xc0
c00052b8:	68 f2 00 00 00       	push   $0xf2
c00052bd:	68 ff ff 0f 00       	push   $0xfffff
c00052c2:	6a 00                	push   $0x0
c00052c4:	50                   	push   %eax
c00052c5:	e8 c5 fe ff ff       	call   c000518f <make_gdt_desc>
c00052ca:	83 c4 1c             	add    $0x1c,%esp
c00052cd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00052d0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c00052d3:	89 03                	mov    %eax,(%ebx)
c00052d5:	89 53 04             	mov    %edx,0x4(%ebx)
/work/x86_os_my/userprog/tss.c:83

	/* GDTR 16位的limit、32位的段基址 */
	// 先转换成 uint32_t 后，再将其转换成 uint64_t 位（不可一步到位转为 uint64_t）
	uint64_t gdt_operand = ((8 * 7 - 1) | ((uint64_t)(uint32_t)0xc0000900 << 16));   // 7个描述符大小
c00052d8:	c7 45 e8 37 00 00 09 	movl   $0x9000037,-0x18(%ebp)
c00052df:	c7 45 ec 00 c0 00 00 	movl   $0xc000,-0x14(%ebp)
/work/x86_os_my/userprog/tss.c:84
	asm volatile ("lgdt %0" : : "m" (gdt_operand));
c00052e6:	0f 01 55 e8          	lgdtl  -0x18(%ebp)
/work/x86_os_my/userprog/tss.c:85
	asm volatile ("ltr %w0" : : "r" (SELECTOR_TSS));
c00052ea:	b8 20 00 00 00       	mov    $0x20,%eax
c00052ef:	0f 00 d8             	ltr    %ax
/work/x86_os_my/userprog/tss.c:86
	put_str("tss_init and ltr done\n");
c00052f2:	83 ec 0c             	sub    $0xc,%esp
c00052f5:	68 28 cb 00 c0       	push   $0xc000cb28
c00052fa:	e8 71 ce ff ff       	call   c0002170 <put_str>
c00052ff:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/tss.c:87
}
c0005302:	90                   	nop
c0005303:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0005306:	c9                   	leave  
c0005307:	c3                   	ret    

c0005308 <start_process>:
start_process():
/work/x86_os_my/userprog/process.c:17
extern void intr_exit(void);

/* 构建用户进程初始上下文信息
 * 填充用户进程的中断栈，并将中断栈的信息，利用iretd填充到 CPU 中
 */
void start_process(void* filename_) {
c0005308:	55                   	push   %ebp
c0005309:	89 e5                	mov    %esp,%ebp
c000530b:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/process.c:18
	void* function = filename_;
c000530e:	8b 45 08             	mov    0x8(%ebp),%eax
c0005311:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:19
	struct task_struct* cur = running_thread();
c0005314:	e8 91 e8 ff ff       	call   c0003baa <running_thread>
c0005319:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/process.c:20
	cur->self_kstack += sizeof(struct thread_stack);
c000531c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000531f:	8b 00                	mov    (%eax),%eax
c0005321:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
c0005327:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000532a:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/userprog/process.c:21
	struct intr_stack* proc_stack = (struct intr_stack*)cur->self_kstack;	 
c000532c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000532f:	8b 00                	mov    (%eax),%eax
c0005331:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/userprog/process.c:22
	proc_stack->edi = proc_stack->esi = proc_stack->ebp = proc_stack->esp_dummy = 0;
c0005334:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005337:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
c000533e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005341:	8b 50 10             	mov    0x10(%eax),%edx
c0005344:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005347:	89 50 0c             	mov    %edx,0xc(%eax)
c000534a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000534d:	8b 50 0c             	mov    0xc(%eax),%edx
c0005350:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005353:	89 50 08             	mov    %edx,0x8(%eax)
c0005356:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005359:	8b 50 08             	mov    0x8(%eax),%edx
c000535c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000535f:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/userprog/process.c:23
	proc_stack->ebx = proc_stack->edx = proc_stack->ecx = proc_stack->eax = 0;
c0005362:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005365:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
c000536c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000536f:	8b 50 20             	mov    0x20(%eax),%edx
c0005372:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005375:	89 50 1c             	mov    %edx,0x1c(%eax)
c0005378:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000537b:	8b 50 1c             	mov    0x1c(%eax),%edx
c000537e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005381:	89 50 18             	mov    %edx,0x18(%eax)
c0005384:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005387:	8b 50 18             	mov    0x18(%eax),%edx
c000538a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000538d:	89 50 14             	mov    %edx,0x14(%eax)
/work/x86_os_my/userprog/process.c:28
	/* 在iretd返回时，如果发现未来的 CPL（也就是内核栈中 CS.RPL，或者说是返回到的用户进程的代码段CS.CPL）
	 * 权限低于（数值上大于） CPU 中段寄存器（如 DS、 ES、 FS、 GS）中选择子指向的内存段的 DPL，
	 * CPU 会自动将相应段寄存器的选择子置为 0 
	 * 这里gs的选择子在iretd返回后，会被自动清零。*/
	proc_stack->gs = 0;					// 用户态用不上,直接初始为0
c0005390:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005393:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
/work/x86_os_my/userprog/process.c:29
	proc_stack->ds = proc_stack->es = proc_stack->fs = SELECTOR_U_DATA;		// 用户级数据段
c000539a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000539d:	c7 40 28 33 00 00 00 	movl   $0x33,0x28(%eax)
c00053a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00053a7:	8b 50 28             	mov    0x28(%eax),%edx
c00053aa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00053ad:	89 50 2c             	mov    %edx,0x2c(%eax)
c00053b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00053b3:	8b 50 2c             	mov    0x2c(%eax),%edx
c00053b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00053b9:	89 50 30             	mov    %edx,0x30(%eax)
/work/x86_os_my/userprog/process.c:33

	/* 中断栈中，上边几个是中断处理函数手动压栈的，下边几个是硬件自动压栈的 */

	proc_stack->eip = function;			// 待执行的用户程序地址
c00053bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c00053bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00053c2:	89 50 38             	mov    %edx,0x38(%eax)
/work/x86_os_my/userprog/process.c:34
	proc_stack->cs = SELECTOR_U_CODE;	// 用户级代码段
c00053c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00053c8:	c7 40 3c 2b 00 00 00 	movl   $0x2b,0x3c(%eax)
/work/x86_os_my/userprog/process.c:35
	proc_stack->eflags = (EFLAGS_IOPL_0 | EFLAGS_MBS | EFLAGS_IF_1);
c00053cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00053d2:	c7 40 40 02 02 00 00 	movl   $0x202,0x40(%eax)
/work/x86_os_my/userprog/process.c:44
	 * process_activate 使用户进程页表生效【已经把CR3寄存器 更新为 用户进程的页表了】
	 * start_process    为用户进程创建3特权级栈【所以申请的内存空间来自用户进程的页表】
	 * 
	 * USER_STACK3_VADDR=(0xc0000000 - 0x1000)
	 */
	proc_stack->esp = (void*)((uint32_t)get_a_page(PF_USER, USER_STACK3_VADDR) + PG_SIZE) ;
c00053d9:	83 ec 08             	sub    $0x8,%esp
c00053dc:	68 00 f0 ff bf       	push   $0xbffff000
c00053e1:	6a 02                	push   $0x2
c00053e3:	e8 97 d6 ff ff       	call   c0002a7f <get_a_page>
c00053e8:	83 c4 10             	add    $0x10,%esp
c00053eb:	05 00 10 00 00       	add    $0x1000,%eax
c00053f0:	89 c2                	mov    %eax,%edx
c00053f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00053f5:	89 50 44             	mov    %edx,0x44(%eax)
/work/x86_os_my/userprog/process.c:45
	proc_stack->ss = SELECTOR_U_DATA;
c00053f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00053fb:	c7 40 48 33 00 00 00 	movl   $0x33,0x48(%eax)
/work/x86_os_my/userprog/process.c:52
	/* 将 esp 替换为 proc_stack
	 * 通过 jmp intr_exit 那里的一系列 pop 指令和 iretd 指令，
	 * 将 proc_stack 中的数据载入 CPU 的寄存器，
	 * 从而使程序“假装”退出中断，进入特权级 3
	 */
	asm volatile ("movl %0, %%esp; jmp intr_exit" : : "g" (proc_stack) : "memory");
c0005402:	8b 65 ec             	mov    -0x14(%ebp),%esp
c0005405:	e9 06 c8 ff ff       	jmp    c0001c10 <intr_exit>
/work/x86_os_my/userprog/process.c:53
}
c000540a:	90                   	nop
c000540b:	c9                   	leave  
c000540c:	c3                   	ret    

c000540d <page_dir_activate>:
page_dir_activate():
/work/x86_os_my/userprog/process.c:56

/* 更新CR3寄存器，激活页目录表 */
void page_dir_activate(struct task_struct* p_thread) {
c000540d:	55                   	push   %ebp
c000540e:	89 e5                	mov    %esp,%ebp
c0005410:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/process.c:59
	
	/* 若为"内核线程",需要重新填充页表为0x100000 */
	uint32_t pagedir_phy_addr = 0x100000;	// 默认为内核的页目录物理地址,也就是内核线程所用的页目录表
c0005413:	c7 45 f4 00 00 10 00 	movl   $0x100000,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:62
	
	/* "用户态进程"有自己的页目录表 */
	if (p_thread->pgdir != NULL) {
c000541a:	8b 45 08             	mov    0x8(%ebp),%eax
c000541d:	8b 40 54             	mov    0x54(%eax),%eax
c0005420:	85 c0                	test   %eax,%eax
c0005422:	74 15                	je     c0005439 <page_dir_activate+0x2c>
/work/x86_os_my/userprog/process.c:63
		pagedir_phy_addr = addr_v2p((uint32_t)p_thread->pgdir);
c0005424:	8b 45 08             	mov    0x8(%ebp),%eax
c0005427:	8b 40 54             	mov    0x54(%eax),%eax
c000542a:	83 ec 0c             	sub    $0xc,%esp
c000542d:	50                   	push   %eax
c000542e:	e8 46 d8 ff ff       	call   c0002c79 <addr_v2p>
c0005433:	83 c4 10             	add    $0x10,%esp
c0005436:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:69
	}

	/* 更新页目录寄存器cr3,使新页表生效
	 * 实现进程间，虚拟地址空间的隔离。
	 */
	asm volatile ("movl %0, %%cr3" : : "r" (pagedir_phy_addr) : "memory");
c0005439:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000543c:	0f 22 d8             	mov    %eax,%cr3
/work/x86_os_my/userprog/process.c:70
}
c000543f:	90                   	nop
c0005440:	c9                   	leave  
c0005441:	c3                   	ret    

c0005442 <process_activate>:
process_activate():
/work/x86_os_my/userprog/process.c:76

/* 1.激活线程或进程的页表,【更新CR3寄存器】
 * 2.用户进程，更新tss中的esp0为进程的特权级0的栈
 * 【只有在任务调度时（中断时），才会切换页表及更新 0 级栈，因此 process_activate 是被"中断执行流"的 schedule 调用的！】
 */
void process_activate(struct task_struct* p_thread) {
c0005442:	55                   	push   %ebp
c0005443:	89 e5                	mov    %esp,%ebp
c0005445:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/userprog/process.c:77
	ASSERT(p_thread != NULL);
c0005448:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c000544c:	75 19                	jne    c0005467 <process_activate+0x25>
/work/x86_os_my/userprog/process.c:77 (discriminator 1)
c000544e:	68 40 cb 00 c0       	push   $0xc000cb40
c0005453:	68 fc cb 00 c0       	push   $0xc000cbfc
c0005458:	6a 4d                	push   $0x4d
c000545a:	68 51 cb 00 c0       	push   $0xc000cb51
c000545f:	e8 bd ce ff ff       	call   c0002321 <panic_spin>
c0005464:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:80
	
	/* 激活该进程或线程的页目录表【重新加载了CR3】 */
	page_dir_activate(p_thread);
c0005467:	83 ec 0c             	sub    $0xc,%esp
c000546a:	ff 75 08             	pushl  0x8(%ebp)
c000546d:	e8 9b ff ff ff       	call   c000540d <page_dir_activate>
c0005472:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:83

	/* 内核线程特权级本身就是0,处理器进入中断时并不会从tss中获取0特权级栈地址,故不需要更新esp0 */
	if (p_thread->pgdir != NULL) {
c0005475:	8b 45 08             	mov    0x8(%ebp),%eax
c0005478:	8b 40 54             	mov    0x54(%eax),%eax
c000547b:	85 c0                	test   %eax,%eax
c000547d:	74 0e                	je     c000548d <process_activate+0x4b>
/work/x86_os_my/userprog/process.c:86
		/* 若为用户进程,更新该进程的esp0,用于此进程被中断时保留上下文 
		 * 需要从tss中获取0特权级栈地址 */
		update_tss_esp(p_thread);	//就一行：g_tss.esp0 = (uint32_t*)((uint32_t)pthread + PG_SIZE);
c000547f:	83 ec 0c             	sub    $0xc,%esp
c0005482:	ff 75 08             	pushl  0x8(%ebp)
c0005485:	e8 f2 fc ff ff       	call   c000517c <update_tss_esp>
c000548a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:88
	}
}
c000548d:	90                   	nop
c000548e:	c9                   	leave  
c000548f:	c3                   	ret    

c0005490 <create_page_dir>:
create_page_dir():
/work/x86_os_my/userprog/process.c:97
 * 
 * 要确保用户进程，在自己的地址空间中，能够访问到内核。
 * 即：任意进程的页目录表中，用户进程占第 0~767 个页目录项，内核占第 768~1023 个页目录项。
 * 0x300 = 768
 */
uint32_t* create_page_dir(void) {
c0005490:	55                   	push   %ebp
c0005491:	89 e5                	mov    %esp,%ebp
c0005493:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/process.c:100

	/* 用户进程的页表不能让用户直接访问到,所以在内核空间来申请 */
	uint32_t* page_dir_vaddr = get_kernel_pages(1);
c0005496:	83 ec 0c             	sub    $0xc,%esp
c0005499:	6a 01                	push   $0x1
c000549b:	e8 29 d5 ff ff       	call   c00029c9 <get_kernel_pages>
c00054a0:	83 c4 10             	add    $0x10,%esp
c00054a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:101
	if (page_dir_vaddr == NULL) {
c00054a6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c00054aa:	75 17                	jne    c00054c3 <create_page_dir+0x33>
/work/x86_os_my/userprog/process.c:102
		console_put_str("create_page_dir: get_kernel_page failed!");
c00054ac:	83 ec 0c             	sub    $0xc,%esp
c00054af:	68 64 cb 00 c0       	push   $0xc000cb64
c00054b4:	e8 57 f3 ff ff       	call   c0004810 <console_put_str>
c00054b9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:103
		return NULL;
c00054bc:	b8 00 00 00 00       	mov    $0x0,%eax
c00054c1:	eb 43                	jmp    c0005506 <create_page_dir+0x76>
/work/x86_os_my/userprog/process.c:109
	}

	/*** 1 复制内核的页目录表  ***/
	// page_dir_vaddr + 0x300*4 是内核页目录的第768项
	// 复制的页目录项个数=1024/4
	memcpy((uint32_t*)((uint32_t)page_dir_vaddr + 0x300*4), (uint32_t*)(0xfffff000+0x300*4), 1024);
c00054c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00054c6:	05 00 0c 00 00       	add    $0xc00,%eax
c00054cb:	83 ec 04             	sub    $0x4,%esp
c00054ce:	68 00 04 00 00       	push   $0x400
c00054d3:	68 00 fc ff ff       	push   $0xfffffc00
c00054d8:	50                   	push   %eax
c00054d9:	e8 37 e3 ff ff       	call   c0003815 <memcpy>
c00054de:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:113

	/*** 2 更新页目录表地址 ***/
	// 页目录表地址是页目录的最后一项
	uint32_t new_page_dir_phy_addr = addr_v2p((uint32_t)page_dir_vaddr);
c00054e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00054e4:	83 ec 0c             	sub    $0xc,%esp
c00054e7:	50                   	push   %eax
c00054e8:	e8 8c d7 ff ff       	call   c0002c79 <addr_v2p>
c00054ed:	83 c4 10             	add    $0x10,%esp
c00054f0:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/process.c:114
	page_dir_vaddr[1023] = new_page_dir_phy_addr | PG_US_U | PG_RW_W | PG_P_1;
c00054f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00054f6:	05 fc 0f 00 00       	add    $0xffc,%eax
c00054fb:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00054fe:	83 ca 07             	or     $0x7,%edx
c0005501:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/userprog/process.c:116

	return page_dir_vaddr;
c0005503:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/userprog/process.c:117
}
c0005506:	c9                   	leave  
c0005507:	c3                   	ret    

c0005508 <create_user_vaddr_bitmap>:
create_user_vaddr_bitmap():
/work/x86_os_my/userprog/process.c:120

/* 创建用户进程虚拟地址位图 */
void create_user_vaddr_bitmap(struct task_struct* user_prog) {
c0005508:	55                   	push   %ebp
c0005509:	89 e5                	mov    %esp,%ebp
c000550b:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/process.c:121
   user_prog->userprog_vaddr.vaddr_start = USER_VADDR_START;	// linux用户程序入口地址 0x80480000
c000550e:	8b 45 08             	mov    0x8(%ebp),%eax
c0005511:	c7 40 60 00 80 04 08 	movl   $0x8048000,0x60(%eax)
/work/x86_os_my/userprog/process.c:122
   uint32_t bitmap_pg_cnt = DIV_ROUND_UP((0xc0000000 - USER_VADDR_START) / PG_SIZE / 8 , PG_SIZE);
c0005518:	c7 45 f4 17 00 00 00 	movl   $0x17,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:123
   user_prog->userprog_vaddr.vaddr_bitmap.bits = get_kernel_pages(bitmap_pg_cnt);
c000551f:	83 ec 0c             	sub    $0xc,%esp
c0005522:	ff 75 f4             	pushl  -0xc(%ebp)
c0005525:	e8 9f d4 ff ff       	call   c00029c9 <get_kernel_pages>
c000552a:	83 c4 10             	add    $0x10,%esp
c000552d:	89 c2                	mov    %eax,%edx
c000552f:	8b 45 08             	mov    0x8(%ebp),%eax
c0005532:	89 50 5c             	mov    %edx,0x5c(%eax)
/work/x86_os_my/userprog/process.c:124
   user_prog->userprog_vaddr.vaddr_bitmap.btmp_bytes_len = (0xc0000000 - USER_VADDR_START) / PG_SIZE / 8;
c0005535:	8b 45 08             	mov    0x8(%ebp),%eax
c0005538:	c7 40 58 f7 6f 01 00 	movl   $0x16ff7,0x58(%eax)
/work/x86_os_my/userprog/process.c:125
   bitmap_init(&user_prog->userprog_vaddr.vaddr_bitmap);
c000553f:	8b 45 08             	mov    0x8(%ebp),%eax
c0005542:	83 c0 58             	add    $0x58,%eax
c0005545:	83 ec 0c             	sub    $0xc,%esp
c0005548:	50                   	push   %eax
c0005549:	e8 a9 ce ff ff       	call   c00023f7 <bitmap_init>
c000554e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:126
}
c0005551:	90                   	nop
c0005552:	c9                   	leave  
c0005553:	c3                   	ret    

c0005554 <process_execute>:
process_execute():
/work/x86_os_my/userprog/process.c:129

/* 创建用户进程 */
void process_execute(void* filename, char* name) {
c0005554:	55                   	push   %ebp
c0005555:	89 e5                	mov    %esp,%ebp
c0005557:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/process.c:131
   /* pcb内核的数据结构,由内核来维护进程信息,因此要在内核内存池中申请 */
   struct task_struct* thread = get_kernel_pages(1);
c000555a:	83 ec 0c             	sub    $0xc,%esp
c000555d:	6a 01                	push   $0x1
c000555f:	e8 65 d4 ff ff       	call   c00029c9 <get_kernel_pages>
c0005564:	83 c4 10             	add    $0x10,%esp
c0005567:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:132
   init_thread(thread, name, default_prio);			//初始化线程PCB结构体 struct task_struct
c000556a:	83 ec 04             	sub    $0x4,%esp
c000556d:	6a 1f                	push   $0x1f
c000556f:	ff 75 0c             	pushl  0xc(%ebp)
c0005572:	ff 75 f4             	pushl  -0xc(%ebp)
c0005575:	e8 24 e7 ff ff       	call   c0003c9e <init_thread>
c000557a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:133
   create_user_vaddr_bitmap(thread);				//【进程新增】创建用户进程，虚拟地址空间位图
c000557d:	83 ec 0c             	sub    $0xc,%esp
c0005580:	ff 75 f4             	pushl  -0xc(%ebp)
c0005583:	e8 80 ff ff ff       	call   c0005508 <create_user_vaddr_bitmap>
c0005588:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:134
   thread_create(thread, start_process, filename);	//初始化线程栈结构体 struct thread_stack
c000558b:	83 ec 04             	sub    $0x4,%esp
c000558e:	ff 75 08             	pushl  0x8(%ebp)
c0005591:	68 08 53 00 c0       	push   $0xc0005308
c0005596:	ff 75 f4             	pushl  -0xc(%ebp)
c0005599:	e8 89 e6 ff ff       	call   c0003c27 <thread_create>
c000559e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:135
   thread->pgdir = create_page_dir();				//【进程新增】创建用户进程，页目录表
c00055a1:	e8 ea fe ff ff       	call   c0005490 <create_page_dir>
c00055a6:	89 c2                	mov    %eax,%edx
c00055a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00055ab:	89 50 54             	mov    %edx,0x54(%eax)
/work/x86_os_my/userprog/process.c:136
   block_desc_init(thread->u_block_desc);
c00055ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00055b1:	83 c0 64             	add    $0x64,%eax
c00055b4:	83 ec 0c             	sub    $0xc,%esp
c00055b7:	50                   	push   %eax
c00055b8:	e8 22 e1 ff ff       	call   c00036df <block_desc_init>
c00055bd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:138
   
   enum intr_status old_status = intr_disable();
c00055c0:	e8 7b c3 ff ff       	call   c0001940 <intr_disable>
c00055c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/process.c:139
   ASSERT(!elem_find(&thread_ready_list, &thread->general_tag));
c00055c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00055cb:	83 c0 44             	add    $0x44,%eax
c00055ce:	83 ec 08             	sub    $0x8,%esp
c00055d1:	50                   	push   %eax
c00055d2:	68 8c 11 01 c0       	push   $0xc001118c
c00055d7:	e8 e0 f0 ff ff       	call   c00046bc <elem_find>
c00055dc:	83 c4 10             	add    $0x10,%esp
c00055df:	85 c0                	test   %eax,%eax
c00055e1:	74 1c                	je     c00055ff <process_execute+0xab>
/work/x86_os_my/userprog/process.c:139 (discriminator 1)
c00055e3:	68 90 cb 00 c0       	push   $0xc000cb90
c00055e8:	68 10 cc 00 c0       	push   $0xc000cc10
c00055ed:	68 8b 00 00 00       	push   $0x8b
c00055f2:	68 51 cb 00 c0       	push   $0xc000cb51
c00055f7:	e8 25 cd ff ff       	call   c0002321 <panic_spin>
c00055fc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:140
   list_append(&thread_ready_list, &thread->general_tag);
c00055ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005602:	83 c0 44             	add    $0x44,%eax
c0005605:	83 ec 08             	sub    $0x8,%esp
c0005608:	50                   	push   %eax
c0005609:	68 8c 11 01 c0       	push   $0xc001118c
c000560e:	e8 2f f0 ff ff       	call   c0004642 <list_append>
c0005613:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:141
   ASSERT(!elem_find(&thread_all_list, &thread->all_list_tag));
c0005616:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005619:	83 c0 4c             	add    $0x4c,%eax
c000561c:	83 ec 08             	sub    $0x8,%esp
c000561f:	50                   	push   %eax
c0005620:	68 9c 11 01 c0       	push   $0xc001119c
c0005625:	e8 92 f0 ff ff       	call   c00046bc <elem_find>
c000562a:	83 c4 10             	add    $0x10,%esp
c000562d:	85 c0                	test   %eax,%eax
c000562f:	74 1c                	je     c000564d <process_execute+0xf9>
/work/x86_os_my/userprog/process.c:141 (discriminator 1)
c0005631:	68 c8 cb 00 c0       	push   $0xc000cbc8
c0005636:	68 10 cc 00 c0       	push   $0xc000cc10
c000563b:	68 8d 00 00 00       	push   $0x8d
c0005640:	68 51 cb 00 c0       	push   $0xc000cb51
c0005645:	e8 d7 cc ff ff       	call   c0002321 <panic_spin>
c000564a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:142
   list_append(&thread_all_list, &thread->all_list_tag);
c000564d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005650:	83 c0 4c             	add    $0x4c,%eax
c0005653:	83 ec 08             	sub    $0x8,%esp
c0005656:	50                   	push   %eax
c0005657:	68 9c 11 01 c0       	push   $0xc001119c
c000565c:	e8 e1 ef ff ff       	call   c0004642 <list_append>
c0005661:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:143
   intr_set_status(old_status);
c0005664:	83 ec 0c             	sub    $0xc,%esp
c0005667:	ff 75 f0             	pushl  -0x10(%ebp)
c000566a:	e8 fa c2 ff ff       	call   c0001969 <intr_set_status>
c000566f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:144
}
c0005672:	90                   	nop
c0005673:	c9                   	leave  
c0005674:	c3                   	ret    

c0005675 <getpid>:
getpid():
/work/x86_os_my/lib/user/syscall.c:53
   );							       \
   retval;						       \
})

/* 返回当前任务pid */
uint32_t getpid() {
c0005675:	55                   	push   %ebp
c0005676:	89 e5                	mov    %esp,%ebp
c0005678:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:54
	return _syscall0(SYS_GETPID);
c000567b:	b8 00 00 00 00       	mov    $0x0,%eax
c0005680:	cd 80                	int    $0x80
c0005682:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0005685:	8b 45 fc             	mov    -0x4(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:55
}
c0005688:	c9                   	leave  
c0005689:	c3                   	ret    

c000568a <write>:
write():
/work/x86_os_my/lib/user/syscall.c:58

/* 把buf中count个字符写入文件描述符fd */
uint32_t write(int32_t fd, const void* buf, uint32_t count) {
c000568a:	55                   	push   %ebp
c000568b:	89 e5                	mov    %esp,%ebp
c000568d:	53                   	push   %ebx
c000568e:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:59
	return _syscall3(SYS_WRITE, fd, buf, count);
c0005691:	b8 01 00 00 00       	mov    $0x1,%eax
c0005696:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0005699:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c000569c:	8b 55 10             	mov    0x10(%ebp),%edx
c000569f:	cd 80                	int    $0x80
c00056a1:	89 45 f8             	mov    %eax,-0x8(%ebp)
c00056a4:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:60
}
c00056a7:	83 c4 10             	add    $0x10,%esp
c00056aa:	5b                   	pop    %ebx
c00056ab:	5d                   	pop    %ebp
c00056ac:	c3                   	ret    

c00056ad <malloc>:
malloc():
/work/x86_os_my/lib/user/syscall.c:63

/* 申请size字节大小的内存,并返回结果 */
void* malloc(uint32_t size) {
c00056ad:	55                   	push   %ebp
c00056ae:	89 e5                	mov    %esp,%ebp
c00056b0:	53                   	push   %ebx
c00056b1:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:64
	return (void*)_syscall1(SYS_MALLOC, size);
c00056b4:	b8 02 00 00 00       	mov    $0x2,%eax
c00056b9:	8b 55 08             	mov    0x8(%ebp),%edx
c00056bc:	89 d3                	mov    %edx,%ebx
c00056be:	cd 80                	int    $0x80
c00056c0:	89 45 f8             	mov    %eax,-0x8(%ebp)
c00056c3:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:65
}
c00056c6:	83 c4 10             	add    $0x10,%esp
c00056c9:	5b                   	pop    %ebx
c00056ca:	5d                   	pop    %ebp
c00056cb:	c3                   	ret    

c00056cc <free>:
free():
/work/x86_os_my/lib/user/syscall.c:68

/* 释放ptr指向的内存 */
void free(void* ptr) {
c00056cc:	55                   	push   %ebp
c00056cd:	89 e5                	mov    %esp,%ebp
c00056cf:	53                   	push   %ebx
c00056d0:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:69
	_syscall1(SYS_FREE, ptr);
c00056d3:	b8 03 00 00 00       	mov    $0x3,%eax
c00056d8:	8b 55 08             	mov    0x8(%ebp),%edx
c00056db:	89 d3                	mov    %edx,%ebx
c00056dd:	cd 80                	int    $0x80
c00056df:	89 45 f8             	mov    %eax,-0x8(%ebp)
/work/x86_os_my/lib/user/syscall.c:70
}
c00056e2:	90                   	nop
c00056e3:	83 c4 10             	add    $0x10,%esp
c00056e6:	5b                   	pop    %ebx
c00056e7:	5d                   	pop    %ebp
c00056e8:	c3                   	ret    

c00056e9 <fork>:
fork():
/work/x86_os_my/lib/user/syscall.c:73

/* 派生子进程,返回子进程pid */
pid_t fork(void){
c00056e9:	55                   	push   %ebp
c00056ea:	89 e5                	mov    %esp,%ebp
c00056ec:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:74
	return _syscall0(SYS_FORK);
c00056ef:	b8 04 00 00 00       	mov    $0x4,%eax
c00056f4:	cd 80                	int    $0x80
c00056f6:	89 45 fc             	mov    %eax,-0x4(%ebp)
c00056f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:75
}
c00056fc:	c9                   	leave  
c00056fd:	c3                   	ret    

c00056fe <read>:
read():
/work/x86_os_my/lib/user/syscall.c:78

/* 从文件描述符fd中读取count个字节到buf */
int32_t read(int32_t fd, void* buf, uint32_t count) {
c00056fe:	55                   	push   %ebp
c00056ff:	89 e5                	mov    %esp,%ebp
c0005701:	53                   	push   %ebx
c0005702:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:79
	return _syscall3(SYS_READ, fd, buf, count);
c0005705:	b8 05 00 00 00       	mov    $0x5,%eax
c000570a:	8b 5d 08             	mov    0x8(%ebp),%ebx
c000570d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0005710:	8b 55 10             	mov    0x10(%ebp),%edx
c0005713:	cd 80                	int    $0x80
c0005715:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0005718:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:80
}
c000571b:	83 c4 10             	add    $0x10,%esp
c000571e:	5b                   	pop    %ebx
c000571f:	5d                   	pop    %ebp
c0005720:	c3                   	ret    

c0005721 <putchar>:
putchar():
/work/x86_os_my/lib/user/syscall.c:83

/* 输出一个字符 */
void putchar(char char_asci) {
c0005721:	55                   	push   %ebp
c0005722:	89 e5                	mov    %esp,%ebp
c0005724:	53                   	push   %ebx
c0005725:	83 ec 14             	sub    $0x14,%esp
c0005728:	8b 45 08             	mov    0x8(%ebp),%eax
c000572b:	88 45 e8             	mov    %al,-0x18(%ebp)
/work/x86_os_my/lib/user/syscall.c:84
	_syscall1(SYS_PUTCHAR, char_asci);
c000572e:	b8 06 00 00 00       	mov    $0x6,%eax
c0005733:	0f b6 55 e8          	movzbl -0x18(%ebp),%edx
c0005737:	89 d3                	mov    %edx,%ebx
c0005739:	cd 80                	int    $0x80
c000573b:	89 45 f8             	mov    %eax,-0x8(%ebp)
/work/x86_os_my/lib/user/syscall.c:85
}
c000573e:	90                   	nop
c000573f:	83 c4 14             	add    $0x14,%esp
c0005742:	5b                   	pop    %ebx
c0005743:	5d                   	pop    %ebp
c0005744:	c3                   	ret    

c0005745 <clear>:
clear():
/work/x86_os_my/lib/user/syscall.c:88

/* 清空屏幕 */
void clear(void) {
c0005745:	55                   	push   %ebp
c0005746:	89 e5                	mov    %esp,%ebp
c0005748:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:89
	_syscall0(SYS_CLEAR);
c000574b:	b8 07 00 00 00       	mov    $0x7,%eax
c0005750:	cd 80                	int    $0x80
c0005752:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/user/syscall.c:90
}
c0005755:	90                   	nop
c0005756:	c9                   	leave  
c0005757:	c3                   	ret    

c0005758 <getcwd>:
getcwd():
/work/x86_os_my/lib/user/syscall.c:93

/* 获取当前工作目录 */
char* getcwd(char* buf, uint32_t size) {
c0005758:	55                   	push   %ebp
c0005759:	89 e5                	mov    %esp,%ebp
c000575b:	53                   	push   %ebx
c000575c:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:94
	return (char*)_syscall2(SYS_GETCWD, buf, size);
c000575f:	b8 08 00 00 00       	mov    $0x8,%eax
c0005764:	8b 55 08             	mov    0x8(%ebp),%edx
c0005767:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c000576a:	89 d3                	mov    %edx,%ebx
c000576c:	cd 80                	int    $0x80
c000576e:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0005771:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:95
}
c0005774:	83 c4 10             	add    $0x10,%esp
c0005777:	5b                   	pop    %ebx
c0005778:	5d                   	pop    %ebp
c0005779:	c3                   	ret    

c000577a <open>:
open():
/work/x86_os_my/lib/user/syscall.c:98

/* 以flag方式打开文件pathname */
int32_t open(char* pathname, uint8_t flag) {
c000577a:	55                   	push   %ebp
c000577b:	89 e5                	mov    %esp,%ebp
c000577d:	53                   	push   %ebx
c000577e:	83 ec 14             	sub    $0x14,%esp
c0005781:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005784:	88 45 e8             	mov    %al,-0x18(%ebp)
/work/x86_os_my/lib/user/syscall.c:99
	return _syscall2(SYS_OPEN, pathname, flag);
c0005787:	b8 09 00 00 00       	mov    $0x9,%eax
c000578c:	8b 55 08             	mov    0x8(%ebp),%edx
c000578f:	0f b6 4d e8          	movzbl -0x18(%ebp),%ecx
c0005793:	89 d3                	mov    %edx,%ebx
c0005795:	cd 80                	int    $0x80
c0005797:	89 45 f8             	mov    %eax,-0x8(%ebp)
c000579a:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:100
}
c000579d:	83 c4 14             	add    $0x14,%esp
c00057a0:	5b                   	pop    %ebx
c00057a1:	5d                   	pop    %ebp
c00057a2:	c3                   	ret    

c00057a3 <close>:
close():
/work/x86_os_my/lib/user/syscall.c:103

/* 关闭文件fd */
int32_t close(int32_t fd) {
c00057a3:	55                   	push   %ebp
c00057a4:	89 e5                	mov    %esp,%ebp
c00057a6:	53                   	push   %ebx
c00057a7:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:104
	return _syscall1(SYS_CLOSE, fd);
c00057aa:	b8 0a 00 00 00       	mov    $0xa,%eax
c00057af:	8b 55 08             	mov    0x8(%ebp),%edx
c00057b2:	89 d3                	mov    %edx,%ebx
c00057b4:	cd 80                	int    $0x80
c00057b6:	89 45 f8             	mov    %eax,-0x8(%ebp)
c00057b9:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:105
}
c00057bc:	83 c4 10             	add    $0x10,%esp
c00057bf:	5b                   	pop    %ebx
c00057c0:	5d                   	pop    %ebp
c00057c1:	c3                   	ret    

c00057c2 <lseek>:
lseek():
/work/x86_os_my/lib/user/syscall.c:108

/* 设置文件偏移量 */
int32_t lseek(int32_t fd, int32_t offset, uint8_t whence) {
c00057c2:	55                   	push   %ebp
c00057c3:	89 e5                	mov    %esp,%ebp
c00057c5:	53                   	push   %ebx
c00057c6:	83 ec 14             	sub    $0x14,%esp
c00057c9:	8b 45 10             	mov    0x10(%ebp),%eax
c00057cc:	88 45 e8             	mov    %al,-0x18(%ebp)
/work/x86_os_my/lib/user/syscall.c:109
	return _syscall3(SYS_LSEEK, fd, offset, whence);
c00057cf:	b8 0b 00 00 00       	mov    $0xb,%eax
c00057d4:	8b 5d 08             	mov    0x8(%ebp),%ebx
c00057d7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c00057da:	0f b6 55 e8          	movzbl -0x18(%ebp),%edx
c00057de:	cd 80                	int    $0x80
c00057e0:	89 45 f8             	mov    %eax,-0x8(%ebp)
c00057e3:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:110
}
c00057e6:	83 c4 14             	add    $0x14,%esp
c00057e9:	5b                   	pop    %ebx
c00057ea:	5d                   	pop    %ebp
c00057eb:	c3                   	ret    

c00057ec <unlink>:
unlink():
/work/x86_os_my/lib/user/syscall.c:113

/* 删除文件pathname */
int32_t unlink(const char* pathname) {
c00057ec:	55                   	push   %ebp
c00057ed:	89 e5                	mov    %esp,%ebp
c00057ef:	53                   	push   %ebx
c00057f0:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:114
	return _syscall1(SYS_UNLINK, pathname);
c00057f3:	b8 0c 00 00 00       	mov    $0xc,%eax
c00057f8:	8b 55 08             	mov    0x8(%ebp),%edx
c00057fb:	89 d3                	mov    %edx,%ebx
c00057fd:	cd 80                	int    $0x80
c00057ff:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0005802:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:115
}
c0005805:	83 c4 10             	add    $0x10,%esp
c0005808:	5b                   	pop    %ebx
c0005809:	5d                   	pop    %ebp
c000580a:	c3                   	ret    

c000580b <mkdir>:
mkdir():
/work/x86_os_my/lib/user/syscall.c:118

/* 创建目录pathname */
int32_t mkdir(const char* pathname) {
c000580b:	55                   	push   %ebp
c000580c:	89 e5                	mov    %esp,%ebp
c000580e:	53                   	push   %ebx
c000580f:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:119
	return _syscall1(SYS_MKDIR, pathname);
c0005812:	b8 0d 00 00 00       	mov    $0xd,%eax
c0005817:	8b 55 08             	mov    0x8(%ebp),%edx
c000581a:	89 d3                	mov    %edx,%ebx
c000581c:	cd 80                	int    $0x80
c000581e:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0005821:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:120
}
c0005824:	83 c4 10             	add    $0x10,%esp
c0005827:	5b                   	pop    %ebx
c0005828:	5d                   	pop    %ebp
c0005829:	c3                   	ret    

c000582a <opendir>:
opendir():
/work/x86_os_my/lib/user/syscall.c:123

/* 打开目录name */
struct dir* opendir(const char* name) {
c000582a:	55                   	push   %ebp
c000582b:	89 e5                	mov    %esp,%ebp
c000582d:	53                   	push   %ebx
c000582e:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:124
	return (struct dir*)_syscall1(SYS_OPENDIR, name);
c0005831:	b8 0e 00 00 00       	mov    $0xe,%eax
c0005836:	8b 55 08             	mov    0x8(%ebp),%edx
c0005839:	89 d3                	mov    %edx,%ebx
c000583b:	cd 80                	int    $0x80
c000583d:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0005840:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:125
}
c0005843:	83 c4 10             	add    $0x10,%esp
c0005846:	5b                   	pop    %ebx
c0005847:	5d                   	pop    %ebp
c0005848:	c3                   	ret    

c0005849 <closedir>:
closedir():
/work/x86_os_my/lib/user/syscall.c:128

/* 关闭目录dir */
int32_t closedir(struct dir* dir) {
c0005849:	55                   	push   %ebp
c000584a:	89 e5                	mov    %esp,%ebp
c000584c:	53                   	push   %ebx
c000584d:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:129
	return _syscall1(SYS_CLOSEDIR, dir);
c0005850:	b8 0f 00 00 00       	mov    $0xf,%eax
c0005855:	8b 55 08             	mov    0x8(%ebp),%edx
c0005858:	89 d3                	mov    %edx,%ebx
c000585a:	cd 80                	int    $0x80
c000585c:	89 45 f8             	mov    %eax,-0x8(%ebp)
c000585f:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:130
}
c0005862:	83 c4 10             	add    $0x10,%esp
c0005865:	5b                   	pop    %ebx
c0005866:	5d                   	pop    %ebp
c0005867:	c3                   	ret    

c0005868 <rmdir>:
rmdir():
/work/x86_os_my/lib/user/syscall.c:133

/* 删除目录pathname */
int32_t rmdir(const char* pathname) {
c0005868:	55                   	push   %ebp
c0005869:	89 e5                	mov    %esp,%ebp
c000586b:	53                   	push   %ebx
c000586c:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:134
	return _syscall1(SYS_RMDIR, pathname);
c000586f:	b8 11 00 00 00       	mov    $0x11,%eax
c0005874:	8b 55 08             	mov    0x8(%ebp),%edx
c0005877:	89 d3                	mov    %edx,%ebx
c0005879:	cd 80                	int    $0x80
c000587b:	89 45 f8             	mov    %eax,-0x8(%ebp)
c000587e:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:135
}
c0005881:	83 c4 10             	add    $0x10,%esp
c0005884:	5b                   	pop    %ebx
c0005885:	5d                   	pop    %ebp
c0005886:	c3                   	ret    

c0005887 <readdir>:
readdir():
/work/x86_os_my/lib/user/syscall.c:138

/* 读取目录dir */
struct dir_entry* readdir(struct dir* dir) {
c0005887:	55                   	push   %ebp
c0005888:	89 e5                	mov    %esp,%ebp
c000588a:	53                   	push   %ebx
c000588b:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:139
	return (struct dir_entry*)_syscall1(SYS_READDIR, dir);
c000588e:	b8 12 00 00 00       	mov    $0x12,%eax
c0005893:	8b 55 08             	mov    0x8(%ebp),%edx
c0005896:	89 d3                	mov    %edx,%ebx
c0005898:	cd 80                	int    $0x80
c000589a:	89 45 f8             	mov    %eax,-0x8(%ebp)
c000589d:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:140
}
c00058a0:	83 c4 10             	add    $0x10,%esp
c00058a3:	5b                   	pop    %ebx
c00058a4:	5d                   	pop    %ebp
c00058a5:	c3                   	ret    

c00058a6 <rewinddir>:
rewinddir():
/work/x86_os_my/lib/user/syscall.c:143

/* 回归目录指针 */
void rewinddir(struct dir* dir) {
c00058a6:	55                   	push   %ebp
c00058a7:	89 e5                	mov    %esp,%ebp
c00058a9:	53                   	push   %ebx
c00058aa:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:144
	_syscall1(SYS_REWINDDIR, dir);
c00058ad:	b8 13 00 00 00       	mov    $0x13,%eax
c00058b2:	8b 55 08             	mov    0x8(%ebp),%edx
c00058b5:	89 d3                	mov    %edx,%ebx
c00058b7:	cd 80                	int    $0x80
c00058b9:	89 45 f8             	mov    %eax,-0x8(%ebp)
/work/x86_os_my/lib/user/syscall.c:145
}
c00058bc:	90                   	nop
c00058bd:	83 c4 10             	add    $0x10,%esp
c00058c0:	5b                   	pop    %ebx
c00058c1:	5d                   	pop    %ebp
c00058c2:	c3                   	ret    

c00058c3 <stat>:
stat():
/work/x86_os_my/lib/user/syscall.c:148

/* 获取path属性到buf中 */
int32_t stat(const char* path, struct stat* buf) {
c00058c3:	55                   	push   %ebp
c00058c4:	89 e5                	mov    %esp,%ebp
c00058c6:	53                   	push   %ebx
c00058c7:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:149
	return _syscall2(SYS_STAT, path, buf);
c00058ca:	b8 14 00 00 00       	mov    $0x14,%eax
c00058cf:	8b 55 08             	mov    0x8(%ebp),%edx
c00058d2:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c00058d5:	89 d3                	mov    %edx,%ebx
c00058d7:	cd 80                	int    $0x80
c00058d9:	89 45 f8             	mov    %eax,-0x8(%ebp)
c00058dc:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:150
}
c00058df:	83 c4 10             	add    $0x10,%esp
c00058e2:	5b                   	pop    %ebx
c00058e3:	5d                   	pop    %ebp
c00058e4:	c3                   	ret    

c00058e5 <chdir>:
chdir():
/work/x86_os_my/lib/user/syscall.c:153

/* 改变工作目录为path */
int32_t chdir(const char* path) {
c00058e5:	55                   	push   %ebp
c00058e6:	89 e5                	mov    %esp,%ebp
c00058e8:	53                   	push   %ebx
c00058e9:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:154
	return _syscall1(SYS_CHDIR, path);
c00058ec:	b8 10 00 00 00       	mov    $0x10,%eax
c00058f1:	8b 55 08             	mov    0x8(%ebp),%edx
c00058f4:	89 d3                	mov    %edx,%ebx
c00058f6:	cd 80                	int    $0x80
c00058f8:	89 45 f8             	mov    %eax,-0x8(%ebp)
c00058fb:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:155
}
c00058fe:	83 c4 10             	add    $0x10,%esp
c0005901:	5b                   	pop    %ebx
c0005902:	5d                   	pop    %ebp
c0005903:	c3                   	ret    

c0005904 <ps>:
ps():
/work/x86_os_my/lib/user/syscall.c:158

/* 显示任务列表 */
void ps(void) {
c0005904:	55                   	push   %ebp
c0005905:	89 e5                	mov    %esp,%ebp
c0005907:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:159
	_syscall0(SYS_PS);
c000590a:	b8 15 00 00 00       	mov    $0x15,%eax
c000590f:	cd 80                	int    $0x80
c0005911:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/user/syscall.c:160
}
c0005914:	90                   	nop
c0005915:	c9                   	leave  
c0005916:	c3                   	ret    

c0005917 <sys_getpid>:
sys_getpid():
/work/x86_os_my/userprog/syscall-init.c:17
#define syscall_nr 32 
typedef void* syscall;
syscall syscall_table[syscall_nr];

/* 返回当前任务的pid */
uint32_t sys_getpid(void) {
c0005917:	55                   	push   %ebp
c0005918:	89 e5                	mov    %esp,%ebp
c000591a:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/userprog/syscall-init.c:18
	return running_thread()->pid;
c000591d:	e8 88 e2 ff ff       	call   c0003baa <running_thread>
c0005922:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0005926:	98                   	cwtl   
/work/x86_os_my/userprog/syscall-init.c:19
}
c0005927:	c9                   	leave  
c0005928:	c3                   	ret    

c0005929 <syscall_init>:
syscall_init():
/work/x86_os_my/userprog/syscall-init.c:22

/* 初始化系统调用 */
void syscall_init(void) {
c0005929:	55                   	push   %ebp
c000592a:	89 e5                	mov    %esp,%ebp
c000592c:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/userprog/syscall-init.c:23
	put_str("syscall_init start\n");
c000592f:	83 ec 0c             	sub    $0xc,%esp
c0005932:	68 20 cc 00 c0       	push   $0xc000cc20
c0005937:	e8 34 c8 ff ff       	call   c0002170 <put_str>
c000593c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/syscall-init.c:24
	syscall_table[SYS_GETPID]	= sys_getpid;
c000593f:	c7 05 60 12 01 c0 17 	movl   $0xc0005917,0xc0011260
c0005946:	59 00 c0 
/work/x86_os_my/userprog/syscall-init.c:25
	syscall_table[SYS_WRITE]	= sys_write;
c0005949:	c7 05 64 12 01 c0 79 	movl   $0xc0007779,0xc0011264
c0005950:	77 00 c0 
/work/x86_os_my/userprog/syscall-init.c:26
	syscall_table[SYS_MALLOC]	= sys_malloc;
c0005953:	c7 05 68 12 01 c0 cc 	movl   $0xc0002ccc,0xc0011268
c000595a:	2c 00 c0 
/work/x86_os_my/userprog/syscall-init.c:27
	syscall_table[SYS_FREE]		= sys_free;
c000595d:	c7 05 6c 12 01 c0 f9 	movl   $0xc00032f9,0xc001126c
c0005964:	32 00 c0 
/work/x86_os_my/userprog/syscall-init.c:28
	syscall_table[SYS_FORK]		= sys_fork;
c0005967:	c7 05 70 12 01 c0 ac 	movl   $0xc000b5ac,0xc0011270
c000596e:	b5 00 c0 
/work/x86_os_my/userprog/syscall-init.c:29
	syscall_table[SYS_READ]		= sys_read;
c0005971:	c7 05 74 12 01 c0 62 	movl   $0xc0007862,0xc0011274
c0005978:	78 00 c0 
/work/x86_os_my/userprog/syscall-init.c:30
	syscall_table[SYS_PUTCHAR]	= sys_putchar;
c000597b:	c7 05 78 12 01 c0 00 	movl   $0xc0008900,0xc0011278
c0005982:	89 00 c0 
/work/x86_os_my/userprog/syscall-init.c:31
	syscall_table[SYS_CLEAR]	= cls_screen;
c0005985:	c7 05 7c 12 01 c0 5b 	movl   $0xc000225b,0xc001127c
c000598c:	22 00 c0 
/work/x86_os_my/userprog/syscall-init.c:32
	syscall_table[SYS_GETCWD]	= sys_getcwd;
c000598f:	c7 05 80 12 01 c0 53 	movl   $0xc0008553,0xc0011280
c0005996:	85 00 c0 
/work/x86_os_my/userprog/syscall-init.c:33
	syscall_table[SYS_OPEN]		= sys_open;
c0005999:	c7 05 84 12 01 c0 6d 	movl   $0xc000746d,0xc0011284
c00059a0:	74 00 c0 
/work/x86_os_my/userprog/syscall-init.c:34
	syscall_table[SYS_CLOSE]	= sys_close;
c00059a3:	c7 05 88 12 01 c0 1a 	movl   $0xc000771a,0xc0011288
c00059aa:	77 00 c0 
/work/x86_os_my/userprog/syscall-init.c:35
	syscall_table[SYS_LSEEK]	= sys_lseek;
c00059ad:	c7 05 8c 12 01 c0 46 	movl   $0xc0007946,0xc001128c
c00059b4:	79 00 c0 
/work/x86_os_my/userprog/syscall-init.c:36
	syscall_table[SYS_UNLINK]	= sys_unlink;
c00059b7:	c7 05 90 12 01 c0 31 	movl   $0xc0007a31,0xc0011290
c00059be:	7a 00 c0 
/work/x86_os_my/userprog/syscall-init.c:37
	syscall_table[SYS_MKDIR]	= sys_mkdir;
c00059c1:	c7 05 94 12 01 c0 54 	movl   $0xc0007c54,0xc0011294
c00059c8:	7c 00 c0 
/work/x86_os_my/userprog/syscall-init.c:38
	syscall_table[SYS_OPENDIR]	= sys_opendir;
c00059cb:	c7 05 98 12 01 c0 44 	movl   $0xc0008044,0xc0011298
c00059d2:	80 00 c0 
/work/x86_os_my/userprog/syscall-init.c:39
	syscall_table[SYS_CLOSEDIR]	= sys_closedir;
c00059d5:	c7 05 9c 12 01 c0 54 	movl   $0xc0008154,0xc001129c
c00059dc:	81 00 c0 
/work/x86_os_my/userprog/syscall-init.c:40
	syscall_table[SYS_CHDIR]	= sys_chdir;
c00059df:	c7 05 a0 12 01 c0 47 	movl   $0xc0008747,0xc00112a0
c00059e6:	87 00 c0 
/work/x86_os_my/userprog/syscall-init.c:41
	syscall_table[SYS_RMDIR]	= sys_rmdir;
c00059e9:	c7 05 a4 12 01 c0 c9 	movl   $0xc00081c9,0xc00112a4
c00059f0:	81 00 c0 
/work/x86_os_my/userprog/syscall-init.c:42
	syscall_table[SYS_READDIR]	= sys_readdir;
c00059f3:	c7 05 a8 12 01 c0 81 	movl   $0xc0008181,0xc00112a8
c00059fa:	81 00 c0 
/work/x86_os_my/userprog/syscall-init.c:43
	syscall_table[SYS_REWINDDIR]	= sys_rewinddir;
c00059fd:	c7 05 ac 12 01 c0 b9 	movl   $0xc00081b9,0xc00112ac
c0005a04:	81 00 c0 
/work/x86_os_my/userprog/syscall-init.c:44
	syscall_table[SYS_STAT]		= sys_stat;
c0005a07:	c7 05 b0 12 01 c0 d6 	movl   $0xc00087d6,0xc00112b0
c0005a0e:	87 00 c0 
/work/x86_os_my/userprog/syscall-init.c:45
	syscall_table[SYS_PS]		= sys_ps;
c0005a11:	c7 05 b4 12 01 c0 dd 	movl   $0xc00044dd,0xc00112b4
c0005a18:	44 00 c0 
/work/x86_os_my/userprog/syscall-init.c:46
	put_str("syscall_init done\n");
c0005a1b:	83 ec 0c             	sub    $0xc,%esp
c0005a1e:	68 34 cc 00 c0       	push   $0xc000cc34
c0005a23:	e8 48 c7 ff ff       	call   c0002170 <put_str>
c0005a28:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/syscall-init.c:47
}
c0005a2b:	90                   	nop
c0005a2c:	c9                   	leave  
c0005a2d:	c3                   	ret    

c0005a2e <itoa>:
itoa():
/work/x86_os_my/lib/stdio.c:13
#define va_start(ap, v) ap = (va_list)&v	// 把ap指向第一个固定参数v
#define va_arg(ap, t) *((t*)(ap += 4))		// ap指向下一个参数并返回其值
#define va_end(ap) ap = NULL				// 清除ap

/* 将整型转换成字符(integer to ascii) */
static void itoa(uint32_t value, char** buf_ptr_addr, uint8_t base) {
c0005a2e:	55                   	push   %ebp
c0005a2f:	89 e5                	mov    %esp,%ebp
c0005a31:	83 ec 28             	sub    $0x28,%esp
c0005a34:	8b 45 10             	mov    0x10(%ebp),%eax
c0005a37:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/lib/stdio.c:14
	uint32_t m = value % base;	// 求模,最先掉下来的是最低位【比如base是16代表16进制】 
c0005a3a:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
c0005a3e:	8b 45 08             	mov    0x8(%ebp),%eax
c0005a41:	ba 00 00 00 00       	mov    $0x0,%edx
c0005a46:	f7 f1                	div    %ecx
c0005a48:	89 55 f4             	mov    %edx,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:15
	uint32_t i = value / base;	// 取整
c0005a4b:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
c0005a4f:	8b 45 08             	mov    0x8(%ebp),%eax
c0005a52:	ba 00 00 00 00       	mov    $0x0,%edx
c0005a57:	f7 f1                	div    %ecx
c0005a59:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/stdio.c:16
	if (i) {
c0005a5c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0005a60:	74 16                	je     c0005a78 <itoa+0x4a>
/work/x86_os_my/lib/stdio.c:17
		itoa(i, buf_ptr_addr, base);	// 如果倍数不为0则递归调用。
c0005a62:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0005a66:	83 ec 04             	sub    $0x4,%esp
c0005a69:	50                   	push   %eax
c0005a6a:	ff 75 0c             	pushl  0xc(%ebp)
c0005a6d:	ff 75 f0             	pushl  -0x10(%ebp)
c0005a70:	e8 b9 ff ff ff       	call   c0005a2e <itoa>
c0005a75:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:19
	}
	if (m < 10) {	// 如果余数是0~9
c0005a78:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
c0005a7c:	77 17                	ja     c0005a95 <itoa+0x67>
/work/x86_os_my/lib/stdio.c:20
		*((*buf_ptr_addr)++) = m + '0';			// 将数字0~9转换为字符'0'~'9'
c0005a7e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005a81:	8b 00                	mov    (%eax),%eax
c0005a83:	8d 48 01             	lea    0x1(%eax),%ecx
c0005a86:	8b 55 0c             	mov    0xc(%ebp),%edx
c0005a89:	89 0a                	mov    %ecx,(%edx)
c0005a8b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0005a8e:	83 c2 30             	add    $0x30,%edx
c0005a91:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/stdio.c:24
	} else {		// 否则余数是A~F
		*((*buf_ptr_addr)++) = m - 10 + 'A';	// 将数字A~F转换为字符'A'~'F'
	}
}
c0005a93:	eb 15                	jmp    c0005aaa <itoa+0x7c>
/work/x86_os_my/lib/stdio.c:22
		itoa(i, buf_ptr_addr, base);	// 如果倍数不为0则递归调用。
	}
	if (m < 10) {	// 如果余数是0~9
		*((*buf_ptr_addr)++) = m + '0';			// 将数字0~9转换为字符'0'~'9'
	} else {		// 否则余数是A~F
		*((*buf_ptr_addr)++) = m - 10 + 'A';	// 将数字A~F转换为字符'A'~'F'
c0005a95:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005a98:	8b 00                	mov    (%eax),%eax
c0005a9a:	8d 48 01             	lea    0x1(%eax),%ecx
c0005a9d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0005aa0:	89 0a                	mov    %ecx,(%edx)
c0005aa2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0005aa5:	83 c2 37             	add    $0x37,%edx
c0005aa8:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/stdio.c:24
	}
}
c0005aaa:	90                   	nop
c0005aab:	c9                   	leave  
c0005aac:	c3                   	ret    

c0005aad <vsprintf>:
vsprintf():
/work/x86_os_my/lib/stdio.c:27

/* 将参数ap按照格式format输出到字符串str,并返回替换后str长度 */
uint32_t vsprintf(char* str, const char* format, va_list ap) {
c0005aad:	55                   	push   %ebp
c0005aae:	89 e5                	mov    %esp,%ebp
c0005ab0:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/lib/stdio.c:28
	char* buf_ptr = str;
c0005ab3:	8b 45 08             	mov    0x8(%ebp),%eax
c0005ab6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/lib/stdio.c:29
	const char* index_ptr = format;
c0005ab9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005abc:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:30
	char index_char = *index_ptr;
c0005abf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005ac2:	0f b6 00             	movzbl (%eax),%eax
c0005ac5:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:33
	int32_t arg_int;
	char* arg_str;
	while(index_char) {
c0005ac8:	e9 43 01 00 00       	jmp    c0005c10 <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:34
		if (index_char != '%') {
c0005acd:	80 7d f3 25          	cmpb   $0x25,-0xd(%ebp)
c0005ad1:	74 21                	je     c0005af4 <vsprintf+0x47>
/work/x86_os_my/lib/stdio.c:35
			*(buf_ptr++) = index_char;
c0005ad3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0005ad6:	8d 50 01             	lea    0x1(%eax),%edx
c0005ad9:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0005adc:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
c0005ae0:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/stdio.c:36
			index_char = *(++index_ptr);
c0005ae2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0005ae6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005ae9:	0f b6 00             	movzbl (%eax),%eax
c0005aec:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:37
			continue;
c0005aef:	e9 1c 01 00 00       	jmp    c0005c10 <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:39
		}
		index_char = *(++index_ptr);	 // 得到%后面的字符
c0005af4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0005af8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005afb:	0f b6 00             	movzbl (%eax),%eax
c0005afe:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:40
		switch(index_char) {
c0005b01:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c0005b05:	83 f8 64             	cmp    $0x64,%eax
c0005b08:	0f 84 8e 00 00 00    	je     c0005b9c <vsprintf+0xef>
c0005b0e:	83 f8 64             	cmp    $0x64,%eax
c0005b11:	7f 0a                	jg     c0005b1d <vsprintf+0x70>
c0005b13:	83 f8 63             	cmp    $0x63,%eax
c0005b16:	74 60                	je     c0005b78 <vsprintf+0xcb>
c0005b18:	e9 f3 00 00 00       	jmp    c0005c10 <vsprintf+0x163>
c0005b1d:	83 f8 73             	cmp    $0x73,%eax
c0005b20:	74 0e                	je     c0005b30 <vsprintf+0x83>
c0005b22:	83 f8 78             	cmp    $0x78,%eax
c0005b25:	0f 84 b6 00 00 00    	je     c0005be1 <vsprintf+0x134>
c0005b2b:	e9 e0 00 00 00       	jmp    c0005c10 <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:42
			case 's':
			arg_str = va_arg(ap, char*);
c0005b30:	83 45 10 04          	addl   $0x4,0x10(%ebp)
c0005b34:	8b 45 10             	mov    0x10(%ebp),%eax
c0005b37:	8b 00                	mov    (%eax),%eax
c0005b39:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/lib/stdio.c:43
			strcpy(buf_ptr, arg_str);
c0005b3c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0005b3f:	83 ec 08             	sub    $0x8,%esp
c0005b42:	ff 75 e8             	pushl  -0x18(%ebp)
c0005b45:	50                   	push   %eax
c0005b46:	e8 ad dd ff ff       	call   c00038f8 <strcpy>
c0005b4b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:44
			buf_ptr += strlen(arg_str);
c0005b4e:	83 ec 0c             	sub    $0xc,%esp
c0005b51:	ff 75 e8             	pushl  -0x18(%ebp)
c0005b54:	e8 f4 dd ff ff       	call   c000394d <strlen>
c0005b59:	83 c4 10             	add    $0x10,%esp
c0005b5c:	89 c2                	mov    %eax,%edx
c0005b5e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0005b61:	01 d0                	add    %edx,%eax
c0005b63:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/lib/stdio.c:45
			index_char = *(++index_ptr);
c0005b66:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0005b6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005b6d:	0f b6 00             	movzbl (%eax),%eax
c0005b70:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:46
			break;
c0005b73:	e9 98 00 00 00       	jmp    c0005c10 <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:49

			case 'c':
			*(buf_ptr++) = va_arg(ap, char);
c0005b78:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0005b7b:	8d 50 01             	lea    0x1(%eax),%edx
c0005b7e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0005b81:	83 45 10 04          	addl   $0x4,0x10(%ebp)
c0005b85:	8b 55 10             	mov    0x10(%ebp),%edx
c0005b88:	0f b6 12             	movzbl (%edx),%edx
c0005b8b:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/stdio.c:50
			index_char = *(++index_ptr);
c0005b8d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0005b91:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005b94:	0f b6 00             	movzbl (%eax),%eax
c0005b97:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:51
			break;
c0005b9a:	eb 74                	jmp    c0005c10 <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:54

			case 'd':
			arg_int = va_arg(ap, int);
c0005b9c:	83 45 10 04          	addl   $0x4,0x10(%ebp)
c0005ba0:	8b 45 10             	mov    0x10(%ebp),%eax
c0005ba3:	8b 00                	mov    (%eax),%eax
c0005ba5:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/lib/stdio.c:56
			/* 若是负数, 将其转为正数后,再正数前面输出个负号'-'. */
			if (arg_int < 0) {
c0005ba8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0005bac:	79 0f                	jns    c0005bbd <vsprintf+0x110>
/work/x86_os_my/lib/stdio.c:57
				arg_int = 0 - arg_int;
c0005bae:	f7 5d ec             	negl   -0x14(%ebp)
/work/x86_os_my/lib/stdio.c:58
				*buf_ptr++ = '-';
c0005bb1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0005bb4:	8d 50 01             	lea    0x1(%eax),%edx
c0005bb7:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0005bba:	c6 00 2d             	movb   $0x2d,(%eax)
/work/x86_os_my/lib/stdio.c:60
			}
			itoa(arg_int, &buf_ptr, 10); 
c0005bbd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005bc0:	83 ec 04             	sub    $0x4,%esp
c0005bc3:	6a 0a                	push   $0xa
c0005bc5:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0005bc8:	52                   	push   %edx
c0005bc9:	50                   	push   %eax
c0005bca:	e8 5f fe ff ff       	call   c0005a2e <itoa>
c0005bcf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:61
			index_char = *(++index_ptr);
c0005bd2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0005bd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005bd9:	0f b6 00             	movzbl (%eax),%eax
c0005bdc:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:62
			break;
c0005bdf:	eb 2f                	jmp    c0005c10 <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:65

			case 'x':
			arg_int = va_arg(ap, int);
c0005be1:	83 45 10 04          	addl   $0x4,0x10(%ebp)
c0005be5:	8b 45 10             	mov    0x10(%ebp),%eax
c0005be8:	8b 00                	mov    (%eax),%eax
c0005bea:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/lib/stdio.c:66
			itoa(arg_int, &buf_ptr, 16); 
c0005bed:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005bf0:	83 ec 04             	sub    $0x4,%esp
c0005bf3:	6a 10                	push   $0x10
c0005bf5:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0005bf8:	52                   	push   %edx
c0005bf9:	50                   	push   %eax
c0005bfa:	e8 2f fe ff ff       	call   c0005a2e <itoa>
c0005bff:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:67
			index_char = *(++index_ptr); // 跳过格式字符并更新index_char
c0005c02:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0005c06:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005c09:	0f b6 00             	movzbl (%eax),%eax
c0005c0c:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:68
			break;
c0005c0f:	90                   	nop
/work/x86_os_my/lib/stdio.c:33
	char* buf_ptr = str;
	const char* index_ptr = format;
	char index_char = *index_ptr;
	int32_t arg_int;
	char* arg_str;
	while(index_char) {
c0005c10:	80 7d f3 00          	cmpb   $0x0,-0xd(%ebp)
c0005c14:	0f 85 b3 fe ff ff    	jne    c0005acd <vsprintf+0x20>
/work/x86_os_my/lib/stdio.c:71
			itoa(arg_int, &buf_ptr, 16); 
			index_char = *(++index_ptr); // 跳过格式字符并更新index_char
			break;
		}
	}
	return strlen(str);
c0005c1a:	83 ec 0c             	sub    $0xc,%esp
c0005c1d:	ff 75 08             	pushl  0x8(%ebp)
c0005c20:	e8 28 dd ff ff       	call   c000394d <strlen>
c0005c25:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:72
}
c0005c28:	c9                   	leave  
c0005c29:	c3                   	ret    

c0005c2a <sprintf>:
sprintf():
/work/x86_os_my/lib/stdio.c:75

/* 同printf不同的地方就是字符串不是写到终端,而是写到buf中 */
uint32_t sprintf(char* buf, const char* format, ...) {
c0005c2a:	55                   	push   %ebp
c0005c2b:	89 e5                	mov    %esp,%ebp
c0005c2d:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/stdio.c:78
	va_list args;
	uint32_t retval;
	va_start(args, format);
c0005c30:	8d 45 0c             	lea    0xc(%ebp),%eax
c0005c33:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:79
	retval = vsprintf(buf, format, args);
c0005c36:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005c39:	83 ec 04             	sub    $0x4,%esp
c0005c3c:	ff 75 f4             	pushl  -0xc(%ebp)
c0005c3f:	50                   	push   %eax
c0005c40:	ff 75 08             	pushl  0x8(%ebp)
c0005c43:	e8 65 fe ff ff       	call   c0005aad <vsprintf>
c0005c48:	83 c4 10             	add    $0x10,%esp
c0005c4b:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/stdio.c:80
	va_end(args);
c0005c4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:81
	return retval;
c0005c55:	8b 45 f0             	mov    -0x10(%ebp),%eax
/work/x86_os_my/lib/stdio.c:82
}
c0005c58:	c9                   	leave  
c0005c59:	c3                   	ret    

c0005c5a <printf>:
printf():
/work/x86_os_my/lib/stdio.c:85

/* 格式化输出字符串format */
uint32_t printf(const char* format, ...) {
c0005c5a:	55                   	push   %ebp
c0005c5b:	89 e5                	mov    %esp,%ebp
c0005c5d:	57                   	push   %edi
c0005c5e:	81 ec 14 04 00 00    	sub    $0x414,%esp
/work/x86_os_my/lib/stdio.c:87
	va_list args;
	va_start(args, format);	       // 使args指向format
c0005c64:	8d 45 08             	lea    0x8(%ebp),%eax
c0005c67:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:88
	char buf[1024] = {0};	       // 用于存储拼接后的字符串
c0005c6a:	8d 95 f4 fb ff ff    	lea    -0x40c(%ebp),%edx
c0005c70:	b8 00 00 00 00       	mov    $0x0,%eax
c0005c75:	b9 00 01 00 00       	mov    $0x100,%ecx
c0005c7a:	89 d7                	mov    %edx,%edi
c0005c7c:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/lib/stdio.c:89
	vsprintf(buf, format, args);
c0005c7e:	8b 45 08             	mov    0x8(%ebp),%eax
c0005c81:	83 ec 04             	sub    $0x4,%esp
c0005c84:	ff 75 f4             	pushl  -0xc(%ebp)
c0005c87:	50                   	push   %eax
c0005c88:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c0005c8e:	50                   	push   %eax
c0005c8f:	e8 19 fe ff ff       	call   c0005aad <vsprintf>
c0005c94:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:90
	va_end(args);
c0005c97:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:91
	return write(1, buf, strlen(buf));
c0005c9e:	83 ec 0c             	sub    $0xc,%esp
c0005ca1:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c0005ca7:	50                   	push   %eax
c0005ca8:	e8 a0 dc ff ff       	call   c000394d <strlen>
c0005cad:	83 c4 10             	add    $0x10,%esp
c0005cb0:	83 ec 04             	sub    $0x4,%esp
c0005cb3:	50                   	push   %eax
c0005cb4:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c0005cba:	50                   	push   %eax
c0005cbb:	6a 01                	push   $0x1
c0005cbd:	e8 c8 f9 ff ff       	call   c000568a <write>
c0005cc2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:92
}
c0005cc5:	8b 7d fc             	mov    -0x4(%ebp),%edi
c0005cc8:	c9                   	leave  
c0005cc9:	c3                   	ret    

c0005cca <outb>:
outb():
/work/x86_os_my/lib/kernel/io.h:17
#define __LIB_IO_H
#include "stdint.h"
//inline省去了函数调用开支

/* 向端口port写入一个字节*/
static inline void outb(uint16_t port, uint8_t data) {
c0005cca:	55                   	push   %ebp
c0005ccb:	89 e5                	mov    %esp,%ebp
c0005ccd:	83 ec 08             	sub    $0x8,%esp
c0005cd0:	8b 55 08             	mov    0x8(%ebp),%edx
c0005cd3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005cd6:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c0005cda:	88 45 f8             	mov    %al,-0x8(%ebp)
/work/x86_os_my/lib/kernel/io.h:21
/*********************************************************
 a表示用寄存器al或ax或eax,对端口指定N表示0~255, d表示用dx存储端口号, 
 %b0表示对应al,%w1表示对应dx */ 
   asm volatile ( "outb %b0, %w1" : : "a" (data), "Nd" (port));    
c0005cdd:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c0005ce1:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0005ce5:	ee                   	out    %al,(%dx)
/work/x86_os_my/lib/kernel/io.h:23
/******************************************************/
}
c0005ce6:	90                   	nop
c0005ce7:	c9                   	leave  
c0005ce8:	c3                   	ret    

c0005ce9 <outsw>:
outsw():
/work/x86_os_my/lib/kernel/io.h:26

/* 将addr处起始的word_cnt个字写入端口port */
static inline void outsw(uint16_t port, const void* addr, uint32_t word_cnt) {
c0005ce9:	55                   	push   %ebp
c0005cea:	89 e5                	mov    %esp,%ebp
c0005cec:	56                   	push   %esi
c0005ced:	53                   	push   %ebx
c0005cee:	83 ec 04             	sub    $0x4,%esp
c0005cf1:	8b 45 08             	mov    0x8(%ebp),%eax
c0005cf4:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/io.h:31
/*********************************************************
   +表示此限制即做输入又做输出.
   outsw是把ds:esi处的16位的内容写入port端口, 我们在设置段描述符时, 
   已经将ds,es,ss段的选择子都设置为相同的值了,此时不用担心数据错乱。*/
   asm volatile ("cld; rep outsw" : "+S" (addr), "+c" (word_cnt) : "d" (port));
c0005cf8:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c0005cfc:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0005cff:	8b 45 10             	mov    0x10(%ebp),%eax
c0005d02:	89 cb                	mov    %ecx,%ebx
c0005d04:	89 de                	mov    %ebx,%esi
c0005d06:	89 c1                	mov    %eax,%ecx
c0005d08:	fc                   	cld    
c0005d09:	66 f3 6f             	rep outsw %ds:(%esi),(%dx)
c0005d0c:	89 c8                	mov    %ecx,%eax
c0005d0e:	89 f3                	mov    %esi,%ebx
c0005d10:	89 5d 0c             	mov    %ebx,0xc(%ebp)
c0005d13:	89 45 10             	mov    %eax,0x10(%ebp)
/work/x86_os_my/lib/kernel/io.h:33
/******************************************************/
}
c0005d16:	90                   	nop
c0005d17:	83 c4 04             	add    $0x4,%esp
c0005d1a:	5b                   	pop    %ebx
c0005d1b:	5e                   	pop    %esi
c0005d1c:	5d                   	pop    %ebp
c0005d1d:	c3                   	ret    

c0005d1e <inb>:
inb():
/work/x86_os_my/lib/kernel/io.h:36

/* 将从端口port读入的一个字节返回 */
static inline uint8_t inb(uint16_t port) {
c0005d1e:	55                   	push   %ebp
c0005d1f:	89 e5                	mov    %esp,%ebp
c0005d21:	83 ec 14             	sub    $0x14,%esp
c0005d24:	8b 45 08             	mov    0x8(%ebp),%eax
c0005d27:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
/work/x86_os_my/lib/kernel/io.h:38
   uint8_t data;
   asm volatile ("inb %w1, %b0" : "=a" (data) : "Nd" (port));
c0005d2b:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0005d2f:	89 c2                	mov    %eax,%edx
c0005d31:	ec                   	in     (%dx),%al
c0005d32:	88 45 ff             	mov    %al,-0x1(%ebp)
/work/x86_os_my/lib/kernel/io.h:39
   return data;
c0005d35:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
/work/x86_os_my/lib/kernel/io.h:40
}
c0005d39:	c9                   	leave  
c0005d3a:	c3                   	ret    

c0005d3b <insw>:
insw():
/work/x86_os_my/lib/kernel/io.h:43

/* 将从端口port读入的word_cnt个字写入addr */
static inline void insw(uint16_t port, void* addr, uint32_t word_cnt) {
c0005d3b:	55                   	push   %ebp
c0005d3c:	89 e5                	mov    %esp,%ebp
c0005d3e:	57                   	push   %edi
c0005d3f:	53                   	push   %ebx
c0005d40:	83 ec 04             	sub    $0x4,%esp
c0005d43:	8b 45 08             	mov    0x8(%ebp),%eax
c0005d46:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/io.h:48
/******************************************************
   insw是将从端口port处读入的16位内容写入es:edi指向的内存,
   我们在设置段描述符时, 已经将ds,es,ss段的选择子都设置为相同的值了,
   此时不用担心数据错乱。*/
   asm volatile ("cld; rep insw" : "+D" (addr), "+c" (word_cnt) : "d" (port) : "memory");
c0005d4a:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c0005d4e:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0005d51:	8b 45 10             	mov    0x10(%ebp),%eax
c0005d54:	89 cb                	mov    %ecx,%ebx
c0005d56:	89 df                	mov    %ebx,%edi
c0005d58:	89 c1                	mov    %eax,%ecx
c0005d5a:	fc                   	cld    
c0005d5b:	66 f3 6d             	rep insw (%dx),%es:(%edi)
c0005d5e:	89 c8                	mov    %ecx,%eax
c0005d60:	89 fb                	mov    %edi,%ebx
c0005d62:	89 5d 0c             	mov    %ebx,0xc(%ebp)
c0005d65:	89 45 10             	mov    %eax,0x10(%ebp)
/work/x86_os_my/lib/kernel/io.h:50
/******************************************************/
}
c0005d68:	90                   	nop
c0005d69:	83 c4 04             	add    $0x4,%esp
c0005d6c:	5b                   	pop    %ebx
c0005d6d:	5f                   	pop    %edi
c0005d6e:	5d                   	pop    %ebp
c0005d6f:	c3                   	ret    

c0005d70 <select_disk>:
select_disk():
/work/x86_os_my/device/ide.c:78
} __attribute__ ((packed));


/////////////////////////////////////// ide驱动部分 ////////////////////////////////////////////////
/* 选择读写的硬盘 */
static void select_disk(struct disk* hd) {
c0005d70:	55                   	push   %ebp
c0005d71:	89 e5                	mov    %esp,%ebp
c0005d73:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/device/ide.c:79
	uint8_t reg_device = BIT_DEV_MBS | BIT_DEV_LBA;
c0005d76:	c6 45 ff e0          	movb   $0xe0,-0x1(%ebp)
/work/x86_os_my/device/ide.c:80
	if (hd->dev_no == 1) {	// 若是从盘就置DEV位为1
c0005d7a:	8b 45 08             	mov    0x8(%ebp),%eax
c0005d7d:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
c0005d81:	3c 01                	cmp    $0x1,%al
c0005d83:	75 04                	jne    c0005d89 <select_disk+0x19>
/work/x86_os_my/device/ide.c:81
		reg_device |= BIT_DEV_DEV;
c0005d85:	80 4d ff 10          	orb    $0x10,-0x1(%ebp)
/work/x86_os_my/device/ide.c:83
	}
	outb(reg_dev(hd->my_channel), reg_device);
c0005d89:	0f b6 55 ff          	movzbl -0x1(%ebp),%edx
c0005d8d:	8b 45 08             	mov    0x8(%ebp),%eax
c0005d90:	8b 40 08             	mov    0x8(%eax),%eax
c0005d93:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005d97:	83 c0 06             	add    $0x6,%eax
c0005d9a:	0f b7 c0             	movzwl %ax,%eax
c0005d9d:	52                   	push   %edx
c0005d9e:	50                   	push   %eax
c0005d9f:	e8 26 ff ff ff       	call   c0005cca <outb>
c0005da4:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/ide.c:84
}
c0005da7:	90                   	nop
c0005da8:	c9                   	leave  
c0005da9:	c3                   	ret    

c0005daa <select_sector>:
select_sector():
/work/x86_os_my/device/ide.c:87

/* 向硬盘控制器写入起始扇区地址及要读写的扇区数 */
static void select_sector(struct disk* hd, uint32_t lba, uint8_t sec_cnt) {
c0005daa:	55                   	push   %ebp
c0005dab:	89 e5                	mov    %esp,%ebp
c0005dad:	83 ec 28             	sub    $0x28,%esp
c0005db0:	8b 45 10             	mov    0x10(%ebp),%eax
c0005db3:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/device/ide.c:88
	ASSERT(lba <= max_lba);
c0005db6:	81 7d 0c ff 7f 02 00 	cmpl   $0x27fff,0xc(%ebp)
c0005dbd:	76 19                	jbe    c0005dd8 <select_sector+0x2e>
/work/x86_os_my/device/ide.c:88 (discriminator 1)
c0005dbf:	68 48 cc 00 c0       	push   $0xc000cc48
c0005dc4:	68 e0 cd 00 c0       	push   $0xc000cde0
c0005dc9:	6a 58                	push   $0x58
c0005dcb:	68 57 cc 00 c0       	push   $0xc000cc57
c0005dd0:	e8 4c c5 ff ff       	call   c0002321 <panic_spin>
c0005dd5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:89
	struct ide_channel* channel = hd->my_channel;
c0005dd8:	8b 45 08             	mov    0x8(%ebp),%eax
c0005ddb:	8b 40 08             	mov    0x8(%eax),%eax
c0005dde:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/ide.c:92

	/* 写入要读写的扇区数*/
	outb(reg_sect_cnt(channel), sec_cnt);	// 如果sec_cnt为0,则表示写入256个扇区
c0005de1:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c0005de5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005de8:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005dec:	83 c0 02             	add    $0x2,%eax
c0005def:	0f b7 c0             	movzwl %ax,%eax
c0005df2:	83 ec 08             	sub    $0x8,%esp
c0005df5:	52                   	push   %edx
c0005df6:	50                   	push   %eax
c0005df7:	e8 ce fe ff ff       	call   c0005cca <outb>
c0005dfc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:95

	/* 写入lba地址(即扇区号) */
	outb(reg_lba_l(channel), lba);			// lba地址的低8位,不用单独取出低8位.outb函数中的汇编指令outb %b0, %w1会只用al。
c0005dff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005e02:	0f b6 d0             	movzbl %al,%edx
c0005e05:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005e08:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005e0c:	83 c0 03             	add    $0x3,%eax
c0005e0f:	0f b7 c0             	movzwl %ax,%eax
c0005e12:	83 ec 08             	sub    $0x8,%esp
c0005e15:	52                   	push   %edx
c0005e16:	50                   	push   %eax
c0005e17:	e8 ae fe ff ff       	call   c0005cca <outb>
c0005e1c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:96
	outb(reg_lba_m(channel), lba >> 8);		// lba地址的8~15位
c0005e1f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005e22:	c1 e8 08             	shr    $0x8,%eax
c0005e25:	0f b6 d0             	movzbl %al,%edx
c0005e28:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005e2b:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005e2f:	83 c0 04             	add    $0x4,%eax
c0005e32:	0f b7 c0             	movzwl %ax,%eax
c0005e35:	83 ec 08             	sub    $0x8,%esp
c0005e38:	52                   	push   %edx
c0005e39:	50                   	push   %eax
c0005e3a:	e8 8b fe ff ff       	call   c0005cca <outb>
c0005e3f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:97
	outb(reg_lba_h(channel), lba >> 16);	// lba地址的16~23位
c0005e42:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005e45:	c1 e8 10             	shr    $0x10,%eax
c0005e48:	0f b6 d0             	movzbl %al,%edx
c0005e4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005e4e:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005e52:	83 c0 05             	add    $0x5,%eax
c0005e55:	0f b7 c0             	movzwl %ax,%eax
c0005e58:	83 ec 08             	sub    $0x8,%esp
c0005e5b:	52                   	push   %edx
c0005e5c:	50                   	push   %eax
c0005e5d:	e8 68 fe ff ff       	call   c0005cca <outb>
c0005e62:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:101

	/* 因为lba地址的24~27位要存储在device寄存器的0～3位,
	* 无法单独写入这4位,所以在此处把device寄存器再重新写入一次*/
	outb(reg_dev(channel), BIT_DEV_MBS | BIT_DEV_LBA | (hd->dev_no == 1 ? BIT_DEV_DEV : 0) | lba >> 24);
c0005e65:	8b 45 08             	mov    0x8(%ebp),%eax
c0005e68:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
c0005e6c:	3c 01                	cmp    $0x1,%al
c0005e6e:	75 07                	jne    c0005e77 <select_sector+0xcd>
/work/x86_os_my/device/ide.c:101 (discriminator 1)
c0005e70:	ba f0 ff ff ff       	mov    $0xfffffff0,%edx
c0005e75:	eb 05                	jmp    c0005e7c <select_sector+0xd2>
/work/x86_os_my/device/ide.c:101 (discriminator 2)
c0005e77:	ba e0 ff ff ff       	mov    $0xffffffe0,%edx
/work/x86_os_my/device/ide.c:101 (discriminator 4)
c0005e7c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005e7f:	c1 e8 18             	shr    $0x18,%eax
c0005e82:	09 d0                	or     %edx,%eax
c0005e84:	0f b6 d0             	movzbl %al,%edx
c0005e87:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005e8a:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005e8e:	83 c0 06             	add    $0x6,%eax
c0005e91:	0f b7 c0             	movzwl %ax,%eax
c0005e94:	83 ec 08             	sub    $0x8,%esp
c0005e97:	52                   	push   %edx
c0005e98:	50                   	push   %eax
c0005e99:	e8 2c fe ff ff       	call   c0005cca <outb>
c0005e9e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:102 (discriminator 4)
}
c0005ea1:	90                   	nop
c0005ea2:	c9                   	leave  
c0005ea3:	c3                   	ret    

c0005ea4 <cmd_out>:
cmd_out():
/work/x86_os_my/device/ide.c:105

/* 向通道channel发命令cmd */
static void cmd_out(struct ide_channel* channel, uint8_t cmd) {
c0005ea4:	55                   	push   %ebp
c0005ea5:	89 e5                	mov    %esp,%ebp
c0005ea7:	83 ec 04             	sub    $0x4,%esp
c0005eaa:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005ead:	88 45 fc             	mov    %al,-0x4(%ebp)
/work/x86_os_my/device/ide.c:107
	/* 只要向硬盘发出了命令便将此标记置为true,硬盘中断处理程序需要根据它来判断 */
	channel->expecting_intr = true;
c0005eb0:	8b 45 08             	mov    0x8(%ebp),%eax
c0005eb3:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
/work/x86_os_my/device/ide.c:108
	outb(reg_cmd(channel), cmd);
c0005eba:	0f b6 55 fc          	movzbl -0x4(%ebp),%edx
c0005ebe:	8b 45 08             	mov    0x8(%ebp),%eax
c0005ec1:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005ec5:	83 c0 07             	add    $0x7,%eax
c0005ec8:	0f b7 c0             	movzwl %ax,%eax
c0005ecb:	52                   	push   %edx
c0005ecc:	50                   	push   %eax
c0005ecd:	e8 f8 fd ff ff       	call   c0005cca <outb>
c0005ed2:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/ide.c:109
}
c0005ed5:	90                   	nop
c0005ed6:	c9                   	leave  
c0005ed7:	c3                   	ret    

c0005ed8 <read_from_sector>:
read_from_sector():
/work/x86_os_my/device/ide.c:112

/* 硬盘读入sec_cnt个扇区的数据到buf */
static void read_from_sector(struct disk* hd, void* buf, uint8_t sec_cnt) {
c0005ed8:	55                   	push   %ebp
c0005ed9:	89 e5                	mov    %esp,%ebp
c0005edb:	83 ec 14             	sub    $0x14,%esp
c0005ede:	8b 45 10             	mov    0x10(%ebp),%eax
c0005ee1:	88 45 ec             	mov    %al,-0x14(%ebp)
/work/x86_os_my/device/ide.c:114
	uint32_t size_in_byte;
	if (sec_cnt == 0) {
c0005ee4:	80 7d ec 00          	cmpb   $0x0,-0x14(%ebp)
c0005ee8:	75 09                	jne    c0005ef3 <read_from_sector+0x1b>
/work/x86_os_my/device/ide.c:116
		/* 因为sec_cnt是8位变量,由主调函数将其赋值时,若为256则会将最高位的1丢掉变为0 */
		size_in_byte = 256 * 512;
c0005eea:	c7 45 fc 00 00 02 00 	movl   $0x20000,-0x4(%ebp)
c0005ef1:	eb 0a                	jmp    c0005efd <read_from_sector+0x25>
/work/x86_os_my/device/ide.c:118
	} else { 
		size_in_byte = sec_cnt * 512; 
c0005ef3:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0005ef7:	c1 e0 09             	shl    $0x9,%eax
c0005efa:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/device/ide.c:120
	}
	insw(reg_data(hd->my_channel), buf, size_in_byte / 2);
c0005efd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0005f00:	d1 e8                	shr    %eax
c0005f02:	89 c2                	mov    %eax,%edx
c0005f04:	8b 45 08             	mov    0x8(%ebp),%eax
c0005f07:	8b 40 08             	mov    0x8(%eax),%eax
c0005f0a:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005f0e:	0f b7 c0             	movzwl %ax,%eax
c0005f11:	52                   	push   %edx
c0005f12:	ff 75 0c             	pushl  0xc(%ebp)
c0005f15:	50                   	push   %eax
c0005f16:	e8 20 fe ff ff       	call   c0005d3b <insw>
c0005f1b:	83 c4 0c             	add    $0xc,%esp
/work/x86_os_my/device/ide.c:121
}
c0005f1e:	90                   	nop
c0005f1f:	c9                   	leave  
c0005f20:	c3                   	ret    

c0005f21 <write2sector>:
write2sector():
/work/x86_os_my/device/ide.c:124

/* 将buf中sec_cnt扇区的数据写入硬盘 */
static void write2sector(struct disk* hd, void* buf, uint8_t sec_cnt) {
c0005f21:	55                   	push   %ebp
c0005f22:	89 e5                	mov    %esp,%ebp
c0005f24:	83 ec 14             	sub    $0x14,%esp
c0005f27:	8b 45 10             	mov    0x10(%ebp),%eax
c0005f2a:	88 45 ec             	mov    %al,-0x14(%ebp)
/work/x86_os_my/device/ide.c:126
	uint32_t size_in_byte;
	if (sec_cnt == 0) {
c0005f2d:	80 7d ec 00          	cmpb   $0x0,-0x14(%ebp)
c0005f31:	75 09                	jne    c0005f3c <write2sector+0x1b>
/work/x86_os_my/device/ide.c:128
		/* 因为sec_cnt是8位变量,由主调函数将其赋值时,若为256则会将最高位的1丢掉变为0 */
		size_in_byte = 256 * 512;
c0005f33:	c7 45 fc 00 00 02 00 	movl   $0x20000,-0x4(%ebp)
c0005f3a:	eb 0a                	jmp    c0005f46 <write2sector+0x25>
/work/x86_os_my/device/ide.c:130
	} else { 
		size_in_byte = sec_cnt * 512; 
c0005f3c:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0005f40:	c1 e0 09             	shl    $0x9,%eax
c0005f43:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/device/ide.c:132
	}
	outsw(reg_data(hd->my_channel), buf, size_in_byte / 2);
c0005f46:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0005f49:	d1 e8                	shr    %eax
c0005f4b:	89 c2                	mov    %eax,%edx
c0005f4d:	8b 45 08             	mov    0x8(%ebp),%eax
c0005f50:	8b 40 08             	mov    0x8(%eax),%eax
c0005f53:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005f57:	0f b7 c0             	movzwl %ax,%eax
c0005f5a:	52                   	push   %edx
c0005f5b:	ff 75 0c             	pushl  0xc(%ebp)
c0005f5e:	50                   	push   %eax
c0005f5f:	e8 85 fd ff ff       	call   c0005ce9 <outsw>
c0005f64:	83 c4 0c             	add    $0xc,%esp
/work/x86_os_my/device/ide.c:133
}
c0005f67:	90                   	nop
c0005f68:	c9                   	leave  
c0005f69:	c3                   	ret    

c0005f6a <busy_wait>:
busy_wait():
/work/x86_os_my/device/ide.c:136

/* 等待30秒 */
static bool busy_wait(struct disk* hd) {
c0005f6a:	55                   	push   %ebp
c0005f6b:	89 e5                	mov    %esp,%ebp
c0005f6d:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/ide.c:137
	struct ide_channel* channel = hd->my_channel;
c0005f70:	8b 45 08             	mov    0x8(%ebp),%eax
c0005f73:	8b 40 08             	mov    0x8(%eax),%eax
c0005f76:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:138
	uint16_t time_limit = 30 * 1000;	// 可以等待30000毫秒
c0005f79:	66 c7 45 f6 30 75    	movw   $0x7530,-0xa(%ebp)
/work/x86_os_my/device/ide.c:139
	while (time_limit -= 10 >= 0) {
c0005f7f:	eb 45                	jmp    c0005fc6 <busy_wait+0x5c>
/work/x86_os_my/device/ide.c:140
		if (!(inb(reg_status(channel)) & BIT_STAT_BSY)) {
c0005f81:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0005f84:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005f88:	83 c0 07             	add    $0x7,%eax
c0005f8b:	0f b7 c0             	movzwl %ax,%eax
c0005f8e:	50                   	push   %eax
c0005f8f:	e8 8a fd ff ff       	call   c0005d1e <inb>
c0005f94:	83 c4 04             	add    $0x4,%esp
c0005f97:	84 c0                	test   %al,%al
c0005f99:	78 1e                	js     c0005fb9 <busy_wait+0x4f>
/work/x86_os_my/device/ide.c:141
			return (inb(reg_status(channel)) & BIT_STAT_DRQ);
c0005f9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0005f9e:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005fa2:	83 c0 07             	add    $0x7,%eax
c0005fa5:	0f b7 c0             	movzwl %ax,%eax
c0005fa8:	50                   	push   %eax
c0005fa9:	e8 70 fd ff ff       	call   c0005d1e <inb>
c0005fae:	83 c4 04             	add    $0x4,%esp
c0005fb1:	0f b6 c0             	movzbl %al,%eax
c0005fb4:	83 e0 08             	and    $0x8,%eax
c0005fb7:	eb 1e                	jmp    c0005fd7 <busy_wait+0x6d>
/work/x86_os_my/device/ide.c:143
		} else {
			mtime_sleep(10);			// 睡眠10毫秒
c0005fb9:	83 ec 0c             	sub    $0xc,%esp
c0005fbc:	6a 0a                	push   $0xa
c0005fbe:	e8 a7 bb ff ff       	call   c0001b6a <mtime_sleep>
c0005fc3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:139

/* 等待30秒 */
static bool busy_wait(struct disk* hd) {
	struct ide_channel* channel = hd->my_channel;
	uint16_t time_limit = 30 * 1000;	// 可以等待30000毫秒
	while (time_limit -= 10 >= 0) {
c0005fc6:	66 83 6d f6 01       	subw   $0x1,-0xa(%ebp)
c0005fcb:	66 83 7d f6 00       	cmpw   $0x0,-0xa(%ebp)
c0005fd0:	75 af                	jne    c0005f81 <busy_wait+0x17>
/work/x86_os_my/device/ide.c:146
			return (inb(reg_status(channel)) & BIT_STAT_DRQ);
		} else {
			mtime_sleep(10);			// 睡眠10毫秒
		}
	}
	return false;
c0005fd2:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/device/ide.c:147
}
c0005fd7:	c9                   	leave  
c0005fd8:	c3                   	ret    

c0005fd9 <ide_read>:
ide_read():
/work/x86_os_my/device/ide.c:150

/* 从硬盘读取sec_cnt个扇区到buf */
void ide_read(struct disk* hd, uint32_t lba, void* buf, uint32_t sec_cnt) { 
c0005fd9:	55                   	push   %ebp
c0005fda:	89 e5                	mov    %esp,%ebp
c0005fdc:	83 ec 58             	sub    $0x58,%esp
/work/x86_os_my/device/ide.c:151
	ASSERT(lba <= max_lba);
c0005fdf:	81 7d 0c ff 7f 02 00 	cmpl   $0x27fff,0xc(%ebp)
c0005fe6:	76 1c                	jbe    c0006004 <ide_read+0x2b>
/work/x86_os_my/device/ide.c:151 (discriminator 1)
c0005fe8:	68 48 cc 00 c0       	push   $0xc000cc48
c0005fed:	68 f0 cd 00 c0       	push   $0xc000cdf0
c0005ff2:	68 97 00 00 00       	push   $0x97
c0005ff7:	68 57 cc 00 c0       	push   $0xc000cc57
c0005ffc:	e8 20 c3 ff ff       	call   c0002321 <panic_spin>
c0006001:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:152
	ASSERT(sec_cnt > 0);
c0006004:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0006008:	75 1c                	jne    c0006026 <ide_read+0x4d>
/work/x86_os_my/device/ide.c:152 (discriminator 1)
c000600a:	68 64 cc 00 c0       	push   $0xc000cc64
c000600f:	68 f0 cd 00 c0       	push   $0xc000cdf0
c0006014:	68 98 00 00 00       	push   $0x98
c0006019:	68 57 cc 00 c0       	push   $0xc000cc57
c000601e:	e8 fe c2 ff ff       	call   c0002321 <panic_spin>
c0006023:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:153
	lock_acquire (&hd->my_channel->lock);
c0006026:	8b 45 08             	mov    0x8(%ebp),%eax
c0006029:	8b 40 08             	mov    0x8(%eax),%eax
c000602c:	83 c0 0c             	add    $0xc,%eax
c000602f:	83 ec 0c             	sub    $0xc,%esp
c0006032:	50                   	push   %eax
c0006033:	e8 47 ea ff ff       	call   c0004a7f <lock_acquire>
c0006038:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:156

	/* 1 先选择操作的硬盘 */
	select_disk(hd);
c000603b:	83 ec 0c             	sub    $0xc,%esp
c000603e:	ff 75 08             	pushl  0x8(%ebp)
c0006041:	e8 2a fd ff ff       	call   c0005d70 <select_disk>
c0006046:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:159

	uint32_t secs_op;		// 每次操作的扇区数
	uint32_t secs_done = 0;	// 已完成的扇区数
c0006049:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/device/ide.c:160
	while(secs_done < sec_cnt) {
c0006050:	e9 d4 00 00 00       	jmp    c0006129 <ide_read+0x150>
/work/x86_os_my/device/ide.c:161
		if ((secs_done + 256) <= sec_cnt) {
c0006055:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006058:	05 00 01 00 00       	add    $0x100,%eax
c000605d:	3b 45 14             	cmp    0x14(%ebp),%eax
c0006060:	77 09                	ja     c000606b <ide_read+0x92>
/work/x86_os_my/device/ide.c:162
			secs_op = 256;
c0006062:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
c0006069:	eb 09                	jmp    c0006074 <ide_read+0x9b>
/work/x86_os_my/device/ide.c:164
		} else {
			secs_op = sec_cnt - secs_done;
c000606b:	8b 45 14             	mov    0x14(%ebp),%eax
c000606e:	2b 45 f0             	sub    -0x10(%ebp),%eax
c0006071:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/ide.c:168
		}

		/* 2 写入待读入的扇区数和起始扇区号 */
		select_sector(hd, lba + secs_done, secs_op);
c0006074:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0006077:	0f b6 c0             	movzbl %al,%eax
c000607a:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c000607d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0006080:	01 ca                	add    %ecx,%edx
c0006082:	83 ec 04             	sub    $0x4,%esp
c0006085:	50                   	push   %eax
c0006086:	52                   	push   %edx
c0006087:	ff 75 08             	pushl  0x8(%ebp)
c000608a:	e8 1b fd ff ff       	call   c0005daa <select_sector>
c000608f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:171

		/* 3 执行的命令写入reg_cmd寄存器 */
		cmd_out(hd->my_channel, CMD_READ_SECTOR);	// 准备开始读数据
c0006092:	8b 45 08             	mov    0x8(%ebp),%eax
c0006095:	8b 40 08             	mov    0x8(%eax),%eax
c0006098:	83 ec 08             	sub    $0x8,%esp
c000609b:	6a 20                	push   $0x20
c000609d:	50                   	push   %eax
c000609e:	e8 01 fe ff ff       	call   c0005ea4 <cmd_out>
c00060a3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:176

		/*********************   阻塞自己的时机  ***********************
		在硬盘已经开始工作(开始在内部读数据或写数据)后才能阻塞自己,现在硬盘已经开始忙了,
		将自己阻塞,等待硬盘完成读操作后通过中断处理程序唤醒自己*/
		sema_down(&hd->my_channel->disk_done);
c00060a6:	8b 45 08             	mov    0x8(%ebp),%eax
c00060a9:	8b 40 08             	mov    0x8(%eax),%eax
c00060ac:	83 c0 2c             	add    $0x2c,%eax
c00060af:	83 ec 0c             	sub    $0xc,%esp
c00060b2:	50                   	push   %eax
c00060b3:	e8 1d e8 ff ff       	call   c00048d5 <sema_down>
c00060b8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:181
		/*************************************************************/

		/* 4 检测硬盘状态是否可读 */
		/* 醒来后开始执行下面代码*/
		if (!busy_wait(hd)) {	// 若失败
c00060bb:	83 ec 0c             	sub    $0xc,%esp
c00060be:	ff 75 08             	pushl  0x8(%ebp)
c00060c1:	e8 a4 fe ff ff       	call   c0005f6a <busy_wait>
c00060c6:	83 c4 10             	add    $0x10,%esp
c00060c9:	85 c0                	test   %eax,%eax
c00060cb:	75 33                	jne    c0006100 <ide_read+0x127>
/work/x86_os_my/device/ide.c:183
			char error[64];
			sprintf(error, "%s read sector %d failed!!!!!!\n", hd->name, lba);
c00060cd:	8b 45 08             	mov    0x8(%ebp),%eax
c00060d0:	ff 75 0c             	pushl  0xc(%ebp)
c00060d3:	50                   	push   %eax
c00060d4:	68 70 cc 00 c0       	push   $0xc000cc70
c00060d9:	8d 45 b0             	lea    -0x50(%ebp),%eax
c00060dc:	50                   	push   %eax
c00060dd:	e8 48 fb ff ff       	call   c0005c2a <sprintf>
c00060e2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:184
			PANIC(error);
c00060e5:	8d 45 b0             	lea    -0x50(%ebp),%eax
c00060e8:	50                   	push   %eax
c00060e9:	68 f0 cd 00 c0       	push   $0xc000cdf0
c00060ee:	68 b8 00 00 00       	push   $0xb8
c00060f3:	68 57 cc 00 c0       	push   $0xc000cc57
c00060f8:	e8 24 c2 ff ff       	call   c0002321 <panic_spin>
c00060fd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:188
		}

		/* 5 把数据从硬盘的缓冲区中读出 */
		read_from_sector(hd, (void*)((uint32_t)buf + secs_done * 512), secs_op);
c0006100:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0006103:	0f b6 c0             	movzbl %al,%eax
c0006106:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0006109:	89 d1                	mov    %edx,%ecx
c000610b:	c1 e1 09             	shl    $0x9,%ecx
c000610e:	8b 55 10             	mov    0x10(%ebp),%edx
c0006111:	01 ca                	add    %ecx,%edx
c0006113:	83 ec 04             	sub    $0x4,%esp
c0006116:	50                   	push   %eax
c0006117:	52                   	push   %edx
c0006118:	ff 75 08             	pushl  0x8(%ebp)
c000611b:	e8 b8 fd ff ff       	call   c0005ed8 <read_from_sector>
c0006120:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:189
		secs_done += secs_op;
c0006123:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0006126:	01 45 f0             	add    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:160
	/* 1 先选择操作的硬盘 */
	select_disk(hd);

	uint32_t secs_op;		// 每次操作的扇区数
	uint32_t secs_done = 0;	// 已完成的扇区数
	while(secs_done < sec_cnt) {
c0006129:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000612c:	3b 45 14             	cmp    0x14(%ebp),%eax
c000612f:	0f 82 20 ff ff ff    	jb     c0006055 <ide_read+0x7c>
/work/x86_os_my/device/ide.c:191

		/* 5 把数据从硬盘的缓冲区中读出 */
		read_from_sector(hd, (void*)((uint32_t)buf + secs_done * 512), secs_op);
		secs_done += secs_op;
	}
	lock_release(&hd->my_channel->lock);
c0006135:	8b 45 08             	mov    0x8(%ebp),%eax
c0006138:	8b 40 08             	mov    0x8(%eax),%eax
c000613b:	83 c0 0c             	add    $0xc,%eax
c000613e:	83 ec 0c             	sub    $0xc,%esp
c0006141:	50                   	push   %eax
c0006142:	e8 af e9 ff ff       	call   c0004af6 <lock_release>
c0006147:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:192
}
c000614a:	90                   	nop
c000614b:	c9                   	leave  
c000614c:	c3                   	ret    

c000614d <ide_write>:
ide_write():
/work/x86_os_my/device/ide.c:195

/* 将buf中sec_cnt扇区数据写入硬盘 */
void ide_write(struct disk* hd, uint32_t lba, void* buf, uint32_t sec_cnt) {
c000614d:	55                   	push   %ebp
c000614e:	89 e5                	mov    %esp,%ebp
c0006150:	83 ec 58             	sub    $0x58,%esp
/work/x86_os_my/device/ide.c:196
	ASSERT(lba <= max_lba);
c0006153:	81 7d 0c ff 7f 02 00 	cmpl   $0x27fff,0xc(%ebp)
c000615a:	76 1c                	jbe    c0006178 <ide_write+0x2b>
/work/x86_os_my/device/ide.c:196 (discriminator 1)
c000615c:	68 48 cc 00 c0       	push   $0xc000cc48
c0006161:	68 fc cd 00 c0       	push   $0xc000cdfc
c0006166:	68 c4 00 00 00       	push   $0xc4
c000616b:	68 57 cc 00 c0       	push   $0xc000cc57
c0006170:	e8 ac c1 ff ff       	call   c0002321 <panic_spin>
c0006175:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:197
	ASSERT(sec_cnt > 0);
c0006178:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c000617c:	75 1c                	jne    c000619a <ide_write+0x4d>
/work/x86_os_my/device/ide.c:197 (discriminator 1)
c000617e:	68 64 cc 00 c0       	push   $0xc000cc64
c0006183:	68 fc cd 00 c0       	push   $0xc000cdfc
c0006188:	68 c5 00 00 00       	push   $0xc5
c000618d:	68 57 cc 00 c0       	push   $0xc000cc57
c0006192:	e8 8a c1 ff ff       	call   c0002321 <panic_spin>
c0006197:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:198
	lock_acquire (&hd->my_channel->lock);
c000619a:	8b 45 08             	mov    0x8(%ebp),%eax
c000619d:	8b 40 08             	mov    0x8(%eax),%eax
c00061a0:	83 c0 0c             	add    $0xc,%eax
c00061a3:	83 ec 0c             	sub    $0xc,%esp
c00061a6:	50                   	push   %eax
c00061a7:	e8 d3 e8 ff ff       	call   c0004a7f <lock_acquire>
c00061ac:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:201

	/* 1 先选择操作的硬盘 */
	select_disk(hd);
c00061af:	83 ec 0c             	sub    $0xc,%esp
c00061b2:	ff 75 08             	pushl  0x8(%ebp)
c00061b5:	e8 b6 fb ff ff       	call   c0005d70 <select_disk>
c00061ba:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:204

	uint32_t secs_op;		// 每次操作的扇区数
	uint32_t secs_done = 0;	// 已完成的扇区数
c00061bd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/device/ide.c:205
	while(secs_done < sec_cnt) {
c00061c4:	e9 d4 00 00 00       	jmp    c000629d <ide_write+0x150>
/work/x86_os_my/device/ide.c:206
		if ((secs_done + 256) <= sec_cnt) {
c00061c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00061cc:	05 00 01 00 00       	add    $0x100,%eax
c00061d1:	3b 45 14             	cmp    0x14(%ebp),%eax
c00061d4:	77 09                	ja     c00061df <ide_write+0x92>
/work/x86_os_my/device/ide.c:207
			secs_op = 256;
c00061d6:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
c00061dd:	eb 09                	jmp    c00061e8 <ide_write+0x9b>
/work/x86_os_my/device/ide.c:209
		} else {
			secs_op = sec_cnt - secs_done;
c00061df:	8b 45 14             	mov    0x14(%ebp),%eax
c00061e2:	2b 45 f0             	sub    -0x10(%ebp),%eax
c00061e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/ide.c:213
		}

		/* 2 写入待写入的扇区数和起始扇区号 */
		select_sector(hd, lba + secs_done, secs_op);
c00061e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00061eb:	0f b6 c0             	movzbl %al,%eax
c00061ee:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c00061f1:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00061f4:	01 ca                	add    %ecx,%edx
c00061f6:	83 ec 04             	sub    $0x4,%esp
c00061f9:	50                   	push   %eax
c00061fa:	52                   	push   %edx
c00061fb:	ff 75 08             	pushl  0x8(%ebp)
c00061fe:	e8 a7 fb ff ff       	call   c0005daa <select_sector>
c0006203:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:216

		/* 3 执行的命令写入reg_cmd寄存器 */
		cmd_out(hd->my_channel, CMD_WRITE_SECTOR);	// 准备开始写数据
c0006206:	8b 45 08             	mov    0x8(%ebp),%eax
c0006209:	8b 40 08             	mov    0x8(%eax),%eax
c000620c:	83 ec 08             	sub    $0x8,%esp
c000620f:	6a 30                	push   $0x30
c0006211:	50                   	push   %eax
c0006212:	e8 8d fc ff ff       	call   c0005ea4 <cmd_out>
c0006217:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:219

		/* 4 检测硬盘状态是否可读 */
		if (!busy_wait(hd)) {	// 若失败
c000621a:	83 ec 0c             	sub    $0xc,%esp
c000621d:	ff 75 08             	pushl  0x8(%ebp)
c0006220:	e8 45 fd ff ff       	call   c0005f6a <busy_wait>
c0006225:	83 c4 10             	add    $0x10,%esp
c0006228:	85 c0                	test   %eax,%eax
c000622a:	75 33                	jne    c000625f <ide_write+0x112>
/work/x86_os_my/device/ide.c:221
			char error[64];
			sprintf(error, "%s write sector %d failed!!!!!!\n", hd->name, lba);
c000622c:	8b 45 08             	mov    0x8(%ebp),%eax
c000622f:	ff 75 0c             	pushl  0xc(%ebp)
c0006232:	50                   	push   %eax
c0006233:	68 90 cc 00 c0       	push   $0xc000cc90
c0006238:	8d 45 b0             	lea    -0x50(%ebp),%eax
c000623b:	50                   	push   %eax
c000623c:	e8 e9 f9 ff ff       	call   c0005c2a <sprintf>
c0006241:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:222
			PANIC(error);
c0006244:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0006247:	50                   	push   %eax
c0006248:	68 fc cd 00 c0       	push   $0xc000cdfc
c000624d:	68 de 00 00 00       	push   $0xde
c0006252:	68 57 cc 00 c0       	push   $0xc000cc57
c0006257:	e8 c5 c0 ff ff       	call   c0002321 <panic_spin>
c000625c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:226
		}

		/* 5 将数据写入硬盘 */
		write2sector(hd, (void*)((uint32_t)buf + secs_done * 512), secs_op);
c000625f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0006262:	0f b6 c0             	movzbl %al,%eax
c0006265:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0006268:	89 d1                	mov    %edx,%ecx
c000626a:	c1 e1 09             	shl    $0x9,%ecx
c000626d:	8b 55 10             	mov    0x10(%ebp),%edx
c0006270:	01 ca                	add    %ecx,%edx
c0006272:	83 ec 04             	sub    $0x4,%esp
c0006275:	50                   	push   %eax
c0006276:	52                   	push   %edx
c0006277:	ff 75 08             	pushl  0x8(%ebp)
c000627a:	e8 a2 fc ff ff       	call   c0005f21 <write2sector>
c000627f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:229

		/* 在硬盘响应期间阻塞自己 */
		sema_down(&hd->my_channel->disk_done);
c0006282:	8b 45 08             	mov    0x8(%ebp),%eax
c0006285:	8b 40 08             	mov    0x8(%eax),%eax
c0006288:	83 c0 2c             	add    $0x2c,%eax
c000628b:	83 ec 0c             	sub    $0xc,%esp
c000628e:	50                   	push   %eax
c000628f:	e8 41 e6 ff ff       	call   c00048d5 <sema_down>
c0006294:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:230
		secs_done += secs_op;
c0006297:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000629a:	01 45 f0             	add    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:205
	/* 1 先选择操作的硬盘 */
	select_disk(hd);

	uint32_t secs_op;		// 每次操作的扇区数
	uint32_t secs_done = 0;	// 已完成的扇区数
	while(secs_done < sec_cnt) {
c000629d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00062a0:	3b 45 14             	cmp    0x14(%ebp),%eax
c00062a3:	0f 82 20 ff ff ff    	jb     c00061c9 <ide_write+0x7c>
/work/x86_os_my/device/ide.c:233
		/* 在硬盘响应期间阻塞自己 */
		sema_down(&hd->my_channel->disk_done);
		secs_done += secs_op;
	}
	/* 醒来后开始释放锁*/
	lock_release(&hd->my_channel->lock);
c00062a9:	8b 45 08             	mov    0x8(%ebp),%eax
c00062ac:	8b 40 08             	mov    0x8(%eax),%eax
c00062af:	83 c0 0c             	add    $0xc,%eax
c00062b2:	83 ec 0c             	sub    $0xc,%esp
c00062b5:	50                   	push   %eax
c00062b6:	e8 3b e8 ff ff       	call   c0004af6 <lock_release>
c00062bb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:234
}
c00062be:	90                   	nop
c00062bf:	c9                   	leave  
c00062c0:	c3                   	ret    

c00062c1 <swap_pairs_bytes>:
swap_pairs_bytes():
/work/x86_os_my/device/ide.c:238

/////////////////////////////////////// 读取分区表部分 ////////////////////////////////////////////////
/* 将dst中len个相邻字节交换位置后存入buf */
static void swap_pairs_bytes(const char* dst, char* buf, uint32_t len) {
c00062c1:	55                   	push   %ebp
c00062c2:	89 e5                	mov    %esp,%ebp
c00062c4:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/device/ide.c:240
	uint8_t idx;
	for (idx = 0; idx < len; idx += 2) {
c00062c7:	c6 45 ff 00          	movb   $0x0,-0x1(%ebp)
c00062cb:	eb 37                	jmp    c0006304 <swap_pairs_bytes+0x43>
/work/x86_os_my/device/ide.c:242 (discriminator 3)
		/* buf中存储dst中两相邻元素交换位置后的字符串*/
		buf[idx + 1] = *dst++;
c00062cd:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
c00062d1:	8d 50 01             	lea    0x1(%eax),%edx
c00062d4:	8b 45 0c             	mov    0xc(%ebp),%eax
c00062d7:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
c00062da:	8b 45 08             	mov    0x8(%ebp),%eax
c00062dd:	8d 50 01             	lea    0x1(%eax),%edx
c00062e0:	89 55 08             	mov    %edx,0x8(%ebp)
c00062e3:	0f b6 00             	movzbl (%eax),%eax
c00062e6:	88 01                	mov    %al,(%ecx)
/work/x86_os_my/device/ide.c:243 (discriminator 3)
		buf[idx]     = *dst++;
c00062e8:	0f b6 55 ff          	movzbl -0x1(%ebp),%edx
c00062ec:	8b 45 0c             	mov    0xc(%ebp),%eax
c00062ef:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
c00062f2:	8b 45 08             	mov    0x8(%ebp),%eax
c00062f5:	8d 50 01             	lea    0x1(%eax),%edx
c00062f8:	89 55 08             	mov    %edx,0x8(%ebp)
c00062fb:	0f b6 00             	movzbl (%eax),%eax
c00062fe:	88 01                	mov    %al,(%ecx)
/work/x86_os_my/device/ide.c:240 (discriminator 3)

/////////////////////////////////////// 读取分区表部分 ////////////////////////////////////////////////
/* 将dst中len个相邻字节交换位置后存入buf */
static void swap_pairs_bytes(const char* dst, char* buf, uint32_t len) {
	uint8_t idx;
	for (idx = 0; idx < len; idx += 2) {
c0006300:	80 45 ff 02          	addb   $0x2,-0x1(%ebp)
/work/x86_os_my/device/ide.c:240 (discriminator 1)
c0006304:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
c0006308:	3b 45 10             	cmp    0x10(%ebp),%eax
c000630b:	72 c0                	jb     c00062cd <swap_pairs_bytes+0xc>
/work/x86_os_my/device/ide.c:245
		/* buf中存储dst中两相邻元素交换位置后的字符串*/
		buf[idx + 1] = *dst++;
		buf[idx]     = *dst++;
	}
	buf[idx] = '\0';
c000630d:	0f b6 55 ff          	movzbl -0x1(%ebp),%edx
c0006311:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006314:	01 d0                	add    %edx,%eax
c0006316:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/device/ide.c:246
}
c0006319:	90                   	nop
c000631a:	c9                   	leave  
c000631b:	c3                   	ret    

c000631c <identify_disk>:
identify_disk():
/work/x86_os_my/device/ide.c:249

/* 获得硬盘参数信息 */
static void identify_disk(struct disk* hd) {
c000631c:	55                   	push   %ebp
c000631d:	89 e5                	mov    %esp,%ebp
c000631f:	81 ec 98 02 00 00    	sub    $0x298,%esp
/work/x86_os_my/device/ide.c:251
	char id_info[512];
	select_disk(hd);
c0006325:	ff 75 08             	pushl  0x8(%ebp)
c0006328:	e8 43 fa ff ff       	call   c0005d70 <select_disk>
c000632d:	83 c4 04             	add    $0x4,%esp
/work/x86_os_my/device/ide.c:252
	cmd_out(hd->my_channel, CMD_IDENTIFY);
c0006330:	8b 45 08             	mov    0x8(%ebp),%eax
c0006333:	8b 40 08             	mov    0x8(%eax),%eax
c0006336:	68 ec 00 00 00       	push   $0xec
c000633b:	50                   	push   %eax
c000633c:	e8 63 fb ff ff       	call   c0005ea4 <cmd_out>
c0006341:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/ide.c:255
	/* 向硬盘发送指令后便通过信号量阻塞自己,
	* 待硬盘处理完成后,通过中断处理程序将自己唤醒 */
	sema_down(&hd->my_channel->disk_done);
c0006344:	8b 45 08             	mov    0x8(%ebp),%eax
c0006347:	8b 40 08             	mov    0x8(%eax),%eax
c000634a:	83 c0 2c             	add    $0x2c,%eax
c000634d:	83 ec 0c             	sub    $0xc,%esp
c0006350:	50                   	push   %eax
c0006351:	e8 7f e5 ff ff       	call   c00048d5 <sema_down>
c0006356:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:258

	/* 醒来后开始执行下面代码*/
	if (!busy_wait(hd)) {     //  若失败
c0006359:	83 ec 0c             	sub    $0xc,%esp
c000635c:	ff 75 08             	pushl  0x8(%ebp)
c000635f:	e8 06 fc ff ff       	call   c0005f6a <busy_wait>
c0006364:	83 c4 10             	add    $0x10,%esp
c0006367:	85 c0                	test   %eax,%eax
c0006369:	75 39                	jne    c00063a4 <identify_disk+0x88>
/work/x86_os_my/device/ide.c:260
		char error[64];
		sprintf(error, "%s identify failed!!!!!!\n", hd->name);
c000636b:	8b 45 08             	mov    0x8(%ebp),%eax
c000636e:	83 ec 04             	sub    $0x4,%esp
c0006371:	50                   	push   %eax
c0006372:	68 b1 cc 00 c0       	push   $0xc000ccb1
c0006377:	8d 85 70 fd ff ff    	lea    -0x290(%ebp),%eax
c000637d:	50                   	push   %eax
c000637e:	e8 a7 f8 ff ff       	call   c0005c2a <sprintf>
c0006383:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:261
		PANIC(error);
c0006386:	8d 85 70 fd ff ff    	lea    -0x290(%ebp),%eax
c000638c:	50                   	push   %eax
c000638d:	68 08 ce 00 c0       	push   $0xc000ce08
c0006392:	68 05 01 00 00       	push   $0x105
c0006397:	68 57 cc 00 c0       	push   $0xc000cc57
c000639c:	e8 80 bf ff ff       	call   c0002321 <panic_spin>
c00063a1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:263
	}
	read_from_sector(hd, id_info, 1);
c00063a4:	83 ec 04             	sub    $0x4,%esp
c00063a7:	6a 01                	push   $0x1
c00063a9:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
c00063af:	50                   	push   %eax
c00063b0:	ff 75 08             	pushl  0x8(%ebp)
c00063b3:	e8 20 fb ff ff       	call   c0005ed8 <read_from_sector>
c00063b8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:266

	char buf[64];
	uint8_t sn_start = 10 * 2, sn_len = 20, md_start = 27 * 2, md_len = 40;
c00063bb:	c6 45 f7 14          	movb   $0x14,-0x9(%ebp)
c00063bf:	c6 45 f6 14          	movb   $0x14,-0xa(%ebp)
c00063c3:	c6 45 f5 36          	movb   $0x36,-0xb(%ebp)
c00063c7:	c6 45 f4 28          	movb   $0x28,-0xc(%ebp)
/work/x86_os_my/device/ide.c:267
	swap_pairs_bytes(&id_info[sn_start], buf, sn_len);
c00063cb:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c00063cf:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c00063d3:	8d 8d f0 fd ff ff    	lea    -0x210(%ebp),%ecx
c00063d9:	01 ca                	add    %ecx,%edx
c00063db:	83 ec 04             	sub    $0x4,%esp
c00063de:	50                   	push   %eax
c00063df:	8d 85 b0 fd ff ff    	lea    -0x250(%ebp),%eax
c00063e5:	50                   	push   %eax
c00063e6:	52                   	push   %edx
c00063e7:	e8 d5 fe ff ff       	call   c00062c1 <swap_pairs_bytes>
c00063ec:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:268
	printk("   disk %s info:\n      SN: %s\n", hd->name, buf);
c00063ef:	8b 45 08             	mov    0x8(%ebp),%eax
c00063f2:	83 ec 04             	sub    $0x4,%esp
c00063f5:	8d 95 b0 fd ff ff    	lea    -0x250(%ebp),%edx
c00063fb:	52                   	push   %edx
c00063fc:	50                   	push   %eax
c00063fd:	68 cc cc 00 c0       	push   $0xc000cccc
c0006402:	e8 4b 06 00 00       	call   c0006a52 <printk>
c0006407:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:269
	memset(buf, 0, sizeof(buf));
c000640a:	83 ec 04             	sub    $0x4,%esp
c000640d:	6a 40                	push   $0x40
c000640f:	6a 00                	push   $0x0
c0006411:	8d 85 b0 fd ff ff    	lea    -0x250(%ebp),%eax
c0006417:	50                   	push   %eax
c0006418:	e8 a6 d3 ff ff       	call   c00037c3 <memset>
c000641d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:270
	swap_pairs_bytes(&id_info[md_start], buf, md_len);
c0006420:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0006424:	0f b6 55 f5          	movzbl -0xb(%ebp),%edx
c0006428:	8d 8d f0 fd ff ff    	lea    -0x210(%ebp),%ecx
c000642e:	01 ca                	add    %ecx,%edx
c0006430:	83 ec 04             	sub    $0x4,%esp
c0006433:	50                   	push   %eax
c0006434:	8d 85 b0 fd ff ff    	lea    -0x250(%ebp),%eax
c000643a:	50                   	push   %eax
c000643b:	52                   	push   %edx
c000643c:	e8 80 fe ff ff       	call   c00062c1 <swap_pairs_bytes>
c0006441:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:271
	printk("      MODULE: %s\n", buf);
c0006444:	83 ec 08             	sub    $0x8,%esp
c0006447:	8d 85 b0 fd ff ff    	lea    -0x250(%ebp),%eax
c000644d:	50                   	push   %eax
c000644e:	68 eb cc 00 c0       	push   $0xc000cceb
c0006453:	e8 fa 05 00 00       	call   c0006a52 <printk>
c0006458:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:272
	uint32_t sectors = *(uint32_t*)&id_info[60 * 2];
c000645b:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
c0006461:	83 c0 78             	add    $0x78,%eax
c0006464:	8b 00                	mov    (%eax),%eax
c0006466:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:273
	printk("      SECTORS: %d\n", sectors);
c0006469:	83 ec 08             	sub    $0x8,%esp
c000646c:	ff 75 f0             	pushl  -0x10(%ebp)
c000646f:	68 fd cc 00 c0       	push   $0xc000ccfd
c0006474:	e8 d9 05 00 00       	call   c0006a52 <printk>
c0006479:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:274
	printk("      CAPACITY: %dMB\n", sectors * 512 / 1024 / 1024);
c000647c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000647f:	c1 e0 09             	shl    $0x9,%eax
c0006482:	c1 e8 14             	shr    $0x14,%eax
c0006485:	83 ec 08             	sub    $0x8,%esp
c0006488:	50                   	push   %eax
c0006489:	68 10 cd 00 c0       	push   $0xc000cd10
c000648e:	e8 bf 05 00 00       	call   c0006a52 <printk>
c0006493:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:275
}
c0006496:	90                   	nop
c0006497:	c9                   	leave  
c0006498:	c3                   	ret    

c0006499 <partition_scan>:
partition_scan():
/work/x86_os_my/device/ide.c:278

/* 扫描硬盘hd中地址为ext_lba的扇区中的所有分区 */
static void partition_scan(struct disk* hd, uint32_t ext_lba) {
c0006499:	55                   	push   %ebp
c000649a:	89 e5                	mov    %esp,%ebp
c000649c:	53                   	push   %ebx
c000649d:	83 ec 14             	sub    $0x14,%esp
/work/x86_os_my/device/ide.c:279
	struct boot_sector* bs = sys_malloc(sizeof(struct boot_sector));
c00064a0:	83 ec 0c             	sub    $0xc,%esp
c00064a3:	68 00 02 00 00       	push   $0x200
c00064a8:	e8 1f c8 ff ff       	call   c0002ccc <sys_malloc>
c00064ad:	83 c4 10             	add    $0x10,%esp
c00064b0:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/device/ide.c:280
	ide_read(hd, ext_lba, bs, 1);
c00064b3:	6a 01                	push   $0x1
c00064b5:	ff 75 ec             	pushl  -0x14(%ebp)
c00064b8:	ff 75 0c             	pushl  0xc(%ebp)
c00064bb:	ff 75 08             	pushl  0x8(%ebp)
c00064be:	e8 16 fb ff ff       	call   c0005fd9 <ide_read>
c00064c3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:281
	uint8_t part_idx = 0;
c00064c6:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/device/ide.c:282
	struct partition_table_entry* p = bs->partition_table;
c00064ca:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00064cd:	05 be 01 00 00       	add    $0x1be,%eax
c00064d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:285

	/* 遍历分区表4个分区表项 */
	while (part_idx++ < 4) {
c00064d5:	e9 53 02 00 00       	jmp    c000672d <partition_scan+0x294>
/work/x86_os_my/device/ide.c:286
		if (p->fs_type == 0x5) {	// 若为扩展分区
c00064da:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00064dd:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c00064e1:	3c 05                	cmp    $0x5,%al
c00064e3:	75 50                	jne    c0006535 <partition_scan+0x9c>
/work/x86_os_my/device/ide.c:287
			if (ext_lba_base != 0) {
c00064e5:	a1 0c 06 01 c0       	mov    0xc001060c,%eax
c00064ea:	85 c0                	test   %eax,%eax
c00064ec:	74 22                	je     c0006510 <partition_scan+0x77>
/work/x86_os_my/device/ide.c:289
				/* 子扩展分区的start_lba是相对于主引导扇区中的总扩展分区地址 */
				partition_scan(hd, p->start_lba + ext_lba_base);
c00064ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00064f1:	8b 40 08             	mov    0x8(%eax),%eax
c00064f4:	8b 15 0c 06 01 c0    	mov    0xc001060c,%edx
c00064fa:	01 d0                	add    %edx,%eax
c00064fc:	83 ec 08             	sub    $0x8,%esp
c00064ff:	50                   	push   %eax
c0006500:	ff 75 08             	pushl  0x8(%ebp)
c0006503:	e8 91 ff ff ff       	call   c0006499 <partition_scan>
c0006508:	83 c4 10             	add    $0x10,%esp
c000650b:	e9 19 02 00 00       	jmp    c0006729 <partition_scan+0x290>
/work/x86_os_my/device/ide.c:292
			} else {	// ext_lba_base为0表示是第一次读取引导块,也就是主引导记录所在的扇区
				/* 记录下扩展分区的起始lba地址,后面所有的扩展分区地址都相对于此 */
				ext_lba_base = p->start_lba;
c0006510:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006513:	8b 40 08             	mov    0x8(%eax),%eax
c0006516:	a3 0c 06 01 c0       	mov    %eax,0xc001060c
/work/x86_os_my/device/ide.c:293
				partition_scan(hd, p->start_lba);
c000651b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000651e:	8b 40 08             	mov    0x8(%eax),%eax
c0006521:	83 ec 08             	sub    $0x8,%esp
c0006524:	50                   	push   %eax
c0006525:	ff 75 08             	pushl  0x8(%ebp)
c0006528:	e8 6c ff ff ff       	call   c0006499 <partition_scan>
c000652d:	83 c4 10             	add    $0x10,%esp
c0006530:	e9 f4 01 00 00       	jmp    c0006729 <partition_scan+0x290>
/work/x86_os_my/device/ide.c:295
			}
		} else if (p->fs_type != 0) {	// 若是有效的分区类型
c0006535:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006538:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c000653c:	84 c0                	test   %al,%al
c000653e:	0f 84 e5 01 00 00    	je     c0006729 <partition_scan+0x290>
/work/x86_os_my/device/ide.c:296
			if (ext_lba == 0) {	// 此时全是主分区
c0006544:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0006548:	0f 85 f9 00 00 00    	jne    c0006647 <partition_scan+0x1ae>
/work/x86_os_my/device/ide.c:297
				hd->prim_parts[p_no].start_lba = ext_lba + p->start_lba;
c000654e:	0f b6 05 10 06 01 c0 	movzbl 0xc0010610,%eax
c0006555:	0f b6 c8             	movzbl %al,%ecx
c0006558:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000655b:	8b 50 08             	mov    0x8(%eax),%edx
c000655e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006561:	01 c2                	add    %eax,%edx
c0006563:	8b 45 08             	mov    0x8(%ebp),%eax
c0006566:	c1 e1 06             	shl    $0x6,%ecx
c0006569:	01 c8                	add    %ecx,%eax
c000656b:	83 c0 10             	add    $0x10,%eax
c000656e:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/device/ide.c:298
				hd->prim_parts[p_no].sec_cnt = p->sec_cnt;
c0006570:	0f b6 05 10 06 01 c0 	movzbl 0xc0010610,%eax
c0006577:	0f b6 c8             	movzbl %al,%ecx
c000657a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000657d:	8b 40 0c             	mov    0xc(%eax),%eax
c0006580:	8b 55 08             	mov    0x8(%ebp),%edx
c0006583:	c1 e1 06             	shl    $0x6,%ecx
c0006586:	01 ca                	add    %ecx,%edx
c0006588:	83 c2 14             	add    $0x14,%edx
c000658b:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/device/ide.c:299
				hd->prim_parts[p_no].my_disk = hd;
c000658d:	0f b6 05 10 06 01 c0 	movzbl 0xc0010610,%eax
c0006594:	0f b6 d0             	movzbl %al,%edx
c0006597:	8b 45 08             	mov    0x8(%ebp),%eax
c000659a:	c1 e2 06             	shl    $0x6,%edx
c000659d:	01 d0                	add    %edx,%eax
c000659f:	8d 50 18             	lea    0x18(%eax),%edx
c00065a2:	8b 45 08             	mov    0x8(%ebp),%eax
c00065a5:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/device/ide.c:300
				list_append(&partition_list, &hd->prim_parts[p_no].part_tag);
c00065a7:	0f b6 05 10 06 01 c0 	movzbl 0xc0010610,%eax
c00065ae:	0f b6 c0             	movzbl %al,%eax
c00065b1:	c1 e0 06             	shl    $0x6,%eax
c00065b4:	8d 50 10             	lea    0x10(%eax),%edx
c00065b7:	8b 45 08             	mov    0x8(%ebp),%eax
c00065ba:	01 d0                	add    %edx,%eax
c00065bc:	83 c0 0c             	add    $0xc,%eax
c00065bf:	83 ec 08             	sub    $0x8,%esp
c00065c2:	50                   	push   %eax
c00065c3:	68 c0 1f 01 c0       	push   $0xc0011fc0
c00065c8:	e8 75 e0 ff ff       	call   c0004642 <list_append>
c00065cd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:301
				sprintf(hd->prim_parts[p_no].name, "%s%d", hd->name, p_no + 1);
c00065d0:	0f b6 05 10 06 01 c0 	movzbl 0xc0010610,%eax
c00065d7:	0f b6 c0             	movzbl %al,%eax
c00065da:	8d 48 01             	lea    0x1(%eax),%ecx
c00065dd:	8b 45 08             	mov    0x8(%ebp),%eax
c00065e0:	0f b6 15 10 06 01 c0 	movzbl 0xc0010610,%edx
c00065e7:	0f b6 d2             	movzbl %dl,%edx
c00065ea:	c1 e2 06             	shl    $0x6,%edx
c00065ed:	8d 5a 20             	lea    0x20(%edx),%ebx
c00065f0:	8b 55 08             	mov    0x8(%ebp),%edx
c00065f3:	01 da                	add    %ebx,%edx
c00065f5:	83 c2 04             	add    $0x4,%edx
c00065f8:	51                   	push   %ecx
c00065f9:	50                   	push   %eax
c00065fa:	68 26 cd 00 c0       	push   $0xc000cd26
c00065ff:	52                   	push   %edx
c0006600:	e8 25 f6 ff ff       	call   c0005c2a <sprintf>
c0006605:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:302
				p_no++;
c0006608:	0f b6 05 10 06 01 c0 	movzbl 0xc0010610,%eax
c000660f:	83 c0 01             	add    $0x1,%eax
c0006612:	a2 10 06 01 c0       	mov    %al,0xc0010610
/work/x86_os_my/device/ide.c:303
				ASSERT(p_no < 4);	// 0,1,2,3
c0006617:	0f b6 05 10 06 01 c0 	movzbl 0xc0010610,%eax
c000661e:	3c 03                	cmp    $0x3,%al
c0006620:	0f 86 03 01 00 00    	jbe    c0006729 <partition_scan+0x290>
/work/x86_os_my/device/ide.c:303 (discriminator 1)
c0006626:	68 2b cd 00 c0       	push   $0xc000cd2b
c000662b:	68 18 ce 00 c0       	push   $0xc000ce18
c0006630:	68 2f 01 00 00       	push   $0x12f
c0006635:	68 57 cc 00 c0       	push   $0xc000cc57
c000663a:	e8 e2 bc ff ff       	call   c0002321 <panic_spin>
c000663f:	83 c4 10             	add    $0x10,%esp
c0006642:	e9 e2 00 00 00       	jmp    c0006729 <partition_scan+0x290>
/work/x86_os_my/device/ide.c:305
			} else {
				hd->logic_parts[l_no].start_lba = ext_lba + p->start_lba;
c0006647:	0f b6 05 11 06 01 c0 	movzbl 0xc0010611,%eax
c000664e:	0f b6 c8             	movzbl %al,%ecx
c0006651:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006654:	8b 50 08             	mov    0x8(%eax),%edx
c0006657:	8b 45 0c             	mov    0xc(%ebp),%eax
c000665a:	01 c2                	add    %eax,%edx
c000665c:	8b 45 08             	mov    0x8(%ebp),%eax
c000665f:	c1 e1 06             	shl    $0x6,%ecx
c0006662:	01 c8                	add    %ecx,%eax
c0006664:	05 10 01 00 00       	add    $0x110,%eax
c0006669:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/device/ide.c:306
				hd->logic_parts[l_no].sec_cnt = p->sec_cnt;
c000666b:	0f b6 05 11 06 01 c0 	movzbl 0xc0010611,%eax
c0006672:	0f b6 c8             	movzbl %al,%ecx
c0006675:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006678:	8b 40 0c             	mov    0xc(%eax),%eax
c000667b:	8b 55 08             	mov    0x8(%ebp),%edx
c000667e:	c1 e1 06             	shl    $0x6,%ecx
c0006681:	01 ca                	add    %ecx,%edx
c0006683:	81 c2 14 01 00 00    	add    $0x114,%edx
c0006689:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/device/ide.c:307
				hd->logic_parts[l_no].my_disk = hd;
c000668b:	0f b6 05 11 06 01 c0 	movzbl 0xc0010611,%eax
c0006692:	0f b6 d0             	movzbl %al,%edx
c0006695:	8b 45 08             	mov    0x8(%ebp),%eax
c0006698:	c1 e2 06             	shl    $0x6,%edx
c000669b:	01 d0                	add    %edx,%eax
c000669d:	8d 90 18 01 00 00    	lea    0x118(%eax),%edx
c00066a3:	8b 45 08             	mov    0x8(%ebp),%eax
c00066a6:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/device/ide.c:308
				list_append(&partition_list, &hd->logic_parts[l_no].part_tag);
c00066a8:	0f b6 05 11 06 01 c0 	movzbl 0xc0010611,%eax
c00066af:	0f b6 c0             	movzbl %al,%eax
c00066b2:	c1 e0 06             	shl    $0x6,%eax
c00066b5:	8d 90 10 01 00 00    	lea    0x110(%eax),%edx
c00066bb:	8b 45 08             	mov    0x8(%ebp),%eax
c00066be:	01 d0                	add    %edx,%eax
c00066c0:	83 c0 0c             	add    $0xc,%eax
c00066c3:	83 ec 08             	sub    $0x8,%esp
c00066c6:	50                   	push   %eax
c00066c7:	68 c0 1f 01 c0       	push   $0xc0011fc0
c00066cc:	e8 71 df ff ff       	call   c0004642 <list_append>
c00066d1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:309
				sprintf(hd->logic_parts[l_no].name, "%s%d", hd->name, l_no + 5);	// 逻辑分区数字是从5开始,主分区是1～4.
c00066d4:	0f b6 05 11 06 01 c0 	movzbl 0xc0010611,%eax
c00066db:	0f b6 c0             	movzbl %al,%eax
c00066de:	8d 48 05             	lea    0x5(%eax),%ecx
c00066e1:	8b 45 08             	mov    0x8(%ebp),%eax
c00066e4:	0f b6 15 11 06 01 c0 	movzbl 0xc0010611,%edx
c00066eb:	0f b6 d2             	movzbl %dl,%edx
c00066ee:	c1 e2 06             	shl    $0x6,%edx
c00066f1:	8d 9a 20 01 00 00    	lea    0x120(%edx),%ebx
c00066f7:	8b 55 08             	mov    0x8(%ebp),%edx
c00066fa:	01 da                	add    %ebx,%edx
c00066fc:	83 c2 04             	add    $0x4,%edx
c00066ff:	51                   	push   %ecx
c0006700:	50                   	push   %eax
c0006701:	68 26 cd 00 c0       	push   $0xc000cd26
c0006706:	52                   	push   %edx
c0006707:	e8 1e f5 ff ff       	call   c0005c2a <sprintf>
c000670c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:310
				l_no++;
c000670f:	0f b6 05 11 06 01 c0 	movzbl 0xc0010611,%eax
c0006716:	83 c0 01             	add    $0x1,%eax
c0006719:	a2 11 06 01 c0       	mov    %al,0xc0010611
/work/x86_os_my/device/ide.c:311
				if (l_no >= 8)	// 只支持8个逻辑分区,避免数组越界
c000671e:	0f b6 05 11 06 01 c0 	movzbl 0xc0010611,%eax
c0006725:	3c 07                	cmp    $0x7,%al
c0006727:	77 26                	ja     c000674f <partition_scan+0x2b6>
/work/x86_os_my/device/ide.c:315
					return;
			}
		}
		p++;
c0006729:	83 45 f0 10          	addl   $0x10,-0x10(%ebp)
/work/x86_os_my/device/ide.c:285
	ide_read(hd, ext_lba, bs, 1);
	uint8_t part_idx = 0;
	struct partition_table_entry* p = bs->partition_table;

	/* 遍历分区表4个分区表项 */
	while (part_idx++ < 4) {
c000672d:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0006731:	8d 50 01             	lea    0x1(%eax),%edx
c0006734:	88 55 f7             	mov    %dl,-0x9(%ebp)
c0006737:	3c 03                	cmp    $0x3,%al
c0006739:	0f 86 9b fd ff ff    	jbe    c00064da <partition_scan+0x41>
/work/x86_os_my/device/ide.c:317
					return;
			}
		}
		p++;
	}
	sys_free(bs);
c000673f:	83 ec 0c             	sub    $0xc,%esp
c0006742:	ff 75 ec             	pushl  -0x14(%ebp)
c0006745:	e8 af cb ff ff       	call   c00032f9 <sys_free>
c000674a:	83 c4 10             	add    $0x10,%esp
c000674d:	eb 01                	jmp    c0006750 <partition_scan+0x2b7>
/work/x86_os_my/device/ide.c:312
				hd->logic_parts[l_no].my_disk = hd;
				list_append(&partition_list, &hd->logic_parts[l_no].part_tag);
				sprintf(hd->logic_parts[l_no].name, "%s%d", hd->name, l_no + 5);	// 逻辑分区数字是从5开始,主分区是1～4.
				l_no++;
				if (l_no >= 8)	// 只支持8个逻辑分区,避免数组越界
					return;
c000674f:	90                   	nop
/work/x86_os_my/device/ide.c:318
			}
		}
		p++;
	}
	sys_free(bs);
}
c0006750:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0006753:	c9                   	leave  
c0006754:	c3                   	ret    

c0006755 <partition_info>:
partition_info():
/work/x86_os_my/device/ide.c:321

/* 打印分区信息 */
static bool partition_info(struct list_elem* pelem, int arg UNUSED) {
c0006755:	55                   	push   %ebp
c0006756:	89 e5                	mov    %esp,%ebp
c0006758:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/ide.c:322
	struct partition* part = elem2entry(struct partition, part_tag, pelem);
c000675b:	8b 45 08             	mov    0x8(%ebp),%eax
c000675e:	83 e8 0c             	sub    $0xc,%eax
c0006761:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/ide.c:323
	printk("   %s start_lba:0x%x, sec_cnt:0x%x\n",part->name, part->start_lba, part->sec_cnt);
c0006764:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0006767:	8b 50 04             	mov    0x4(%eax),%edx
c000676a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000676d:	8b 00                	mov    (%eax),%eax
c000676f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0006772:	83 c1 14             	add    $0x14,%ecx
c0006775:	52                   	push   %edx
c0006776:	50                   	push   %eax
c0006777:	51                   	push   %ecx
c0006778:	68 34 cd 00 c0       	push   $0xc000cd34
c000677d:	e8 d0 02 00 00       	call   c0006a52 <printk>
c0006782:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:327

	/* 在此处return false与函数本身功能无关,
	 * 只是为了让主调函数list_traversal继续向下遍历元素 */
	return false;
c0006785:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/device/ide.c:328
}
c000678a:	c9                   	leave  
c000678b:	c3                   	ret    

c000678c <intr_hd_handler>:
intr_hd_handler():
/work/x86_os_my/device/ide.c:331

/* 硬盘中断处理程序 */
void intr_hd_handler(uint8_t irq_no) {
c000678c:	55                   	push   %ebp
c000678d:	89 e5                	mov    %esp,%ebp
c000678f:	83 ec 28             	sub    $0x28,%esp
c0006792:	8b 45 08             	mov    0x8(%ebp),%eax
c0006795:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/device/ide.c:332
	ASSERT(irq_no == 0x2e || irq_no == 0x2f);
c0006798:	80 7d e4 2e          	cmpb   $0x2e,-0x1c(%ebp)
c000679c:	74 22                	je     c00067c0 <intr_hd_handler+0x34>
/work/x86_os_my/device/ide.c:332 (discriminator 1)
c000679e:	80 7d e4 2f          	cmpb   $0x2f,-0x1c(%ebp)
c00067a2:	74 1c                	je     c00067c0 <intr_hd_handler+0x34>
/work/x86_os_my/device/ide.c:332 (discriminator 2)
c00067a4:	68 58 cd 00 c0       	push   $0xc000cd58
c00067a9:	68 28 ce 00 c0       	push   $0xc000ce28
c00067ae:	68 4c 01 00 00       	push   $0x14c
c00067b3:	68 57 cc 00 c0       	push   $0xc000cc57
c00067b8:	e8 64 bb ff ff       	call   c0002321 <panic_spin>
c00067bd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:333
	uint8_t ch_no = irq_no - 0x2e;
c00067c0:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c00067c4:	83 e8 2e             	sub    $0x2e,%eax
c00067c7:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/device/ide.c:334
	struct ide_channel* channel = &channels[ch_no];
c00067ca:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00067ce:	69 c0 60 06 00 00    	imul   $0x660,%eax,%eax
c00067d4:	05 00 13 01 c0       	add    $0xc0011300,%eax
c00067d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:335
	ASSERT(channel->irq_no == irq_no);
c00067dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00067df:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
c00067e3:	3a 45 e4             	cmp    -0x1c(%ebp),%al
c00067e6:	74 1c                	je     c0006804 <intr_hd_handler+0x78>
/work/x86_os_my/device/ide.c:335 (discriminator 1)
c00067e8:	68 79 cd 00 c0       	push   $0xc000cd79
c00067ed:	68 28 ce 00 c0       	push   $0xc000ce28
c00067f2:	68 4f 01 00 00       	push   $0x14f
c00067f7:	68 57 cc 00 c0       	push   $0xc000cc57
c00067fc:	e8 20 bb ff ff       	call   c0002321 <panic_spin>
c0006801:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:338
	/* 不必担心此中断是否对应的是这一次的expecting_intr,
	* 每次读写硬盘时会申请锁,从而保证了同步一致性 */
	if (channel->expecting_intr) {
c0006804:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006807:	8b 40 28             	mov    0x28(%eax),%eax
c000680a:	85 c0                	test   %eax,%eax
c000680c:	74 35                	je     c0006843 <intr_hd_handler+0xb7>
/work/x86_os_my/device/ide.c:339
		channel->expecting_intr = false;
c000680e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006811:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
/work/x86_os_my/device/ide.c:340
		sema_up(&channel->disk_done);
c0006818:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000681b:	83 c0 2c             	add    $0x2c,%eax
c000681e:	83 ec 0c             	sub    $0xc,%esp
c0006821:	50                   	push   %eax
c0006822:	e8 a9 e1 ff ff       	call   c00049d0 <sema_up>
c0006827:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:343

		/* 读取状态寄存器使硬盘控制器认为此次的中断已被处理,从而硬盘可以继续执行新的读写 */
		inb(reg_status(channel));
c000682a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000682d:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0006831:	83 c0 07             	add    $0x7,%eax
c0006834:	0f b7 c0             	movzwl %ax,%eax
c0006837:	83 ec 0c             	sub    $0xc,%esp
c000683a:	50                   	push   %eax
c000683b:	e8 de f4 ff ff       	call   c0005d1e <inb>
c0006840:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:345
	}
}
c0006843:	90                   	nop
c0006844:	c9                   	leave  
c0006845:	c3                   	ret    

c0006846 <ide_init>:
ide_init():
/work/x86_os_my/device/ide.c:348

/* 硬盘数据结构初始化 */
void ide_init() {
c0006846:	55                   	push   %ebp
c0006847:	89 e5                	mov    %esp,%ebp
c0006849:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/ide.c:349
	printk("ide_init start\n");
c000684c:	83 ec 0c             	sub    $0xc,%esp
c000684f:	68 93 cd 00 c0       	push   $0xc000cd93
c0006854:	e8 f9 01 00 00       	call   c0006a52 <printk>
c0006859:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:350
	uint8_t hd_cnt = *((uint8_t*)(0x475));	// 获取硬盘的数量
c000685c:	b8 75 04 00 00       	mov    $0x475,%eax
c0006861:	0f b6 00             	movzbl (%eax),%eax
c0006864:	88 45 f5             	mov    %al,-0xb(%ebp)
/work/x86_os_my/device/ide.c:351
	ASSERT(hd_cnt > 0);
c0006867:	80 7d f5 00          	cmpb   $0x0,-0xb(%ebp)
c000686b:	75 1c                	jne    c0006889 <ide_init+0x43>
/work/x86_os_my/device/ide.c:351 (discriminator 1)
c000686d:	68 a3 cd 00 c0       	push   $0xc000cda3
c0006872:	68 38 ce 00 c0       	push   $0xc000ce38
c0006877:	68 5f 01 00 00       	push   $0x15f
c000687c:	68 57 cc 00 c0       	push   $0xc000cc57
c0006881:	e8 9b ba ff ff       	call   c0002321 <panic_spin>
c0006886:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:352
	list_init(&partition_list);
c0006889:	83 ec 0c             	sub    $0xc,%esp
c000688c:	68 c0 1f 01 c0       	push   $0xc0011fc0
c0006891:	e8 1b dd ff ff       	call   c00045b1 <list_init>
c0006896:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:353
	channel_cnt = DIV_ROUND_UP(hd_cnt, 2);	// 一个ide通道上有两个硬盘,根据硬盘数量反推有几个ide通道
c0006899:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c000689d:	83 c0 01             	add    $0x1,%eax
c00068a0:	89 c2                	mov    %eax,%edx
c00068a2:	c1 ea 1f             	shr    $0x1f,%edx
c00068a5:	01 d0                	add    %edx,%eax
c00068a7:	d1 f8                	sar    %eax
c00068a9:	a2 e0 12 01 c0       	mov    %al,0xc00112e0
/work/x86_os_my/device/ide.c:355
	struct ide_channel* channel;
	uint8_t channel_no = 0, dev_no = 0;
c00068ae:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
c00068b2:	c6 45 f6 00          	movb   $0x0,-0xa(%ebp)
/work/x86_os_my/device/ide.c:358

	/* 处理每个通道上的硬盘 */
	while (channel_no < channel_cnt) {
c00068b6:	e9 4d 01 00 00       	jmp    c0006a08 <ide_init+0x1c2>
/work/x86_os_my/device/ide.c:359
		channel = &channels[channel_no];
c00068bb:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00068bf:	69 c0 60 06 00 00    	imul   $0x660,%eax,%eax
c00068c5:	05 00 13 01 c0       	add    $0xc0011300,%eax
c00068ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:360
		sprintf(channel->name, "ide%d", channel_no);
c00068cd:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c00068d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00068d4:	83 ec 04             	sub    $0x4,%esp
c00068d7:	52                   	push   %edx
c00068d8:	68 ae cd 00 c0       	push   $0xc000cdae
c00068dd:	50                   	push   %eax
c00068de:	e8 47 f3 ff ff       	call   c0005c2a <sprintf>
c00068e3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:363

		/* 为每个ide通道初始化端口基址及中断向量 */
		switch (channel_no) {
c00068e6:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00068ea:	85 c0                	test   %eax,%eax
c00068ec:	74 07                	je     c00068f5 <ide_init+0xaf>
c00068ee:	83 f8 01             	cmp    $0x1,%eax
c00068f1:	74 14                	je     c0006907 <ide_init+0xc1>
c00068f3:	eb 23                	jmp    c0006918 <ide_init+0xd2>
/work/x86_os_my/device/ide.c:365
			case 0:
			channel->port_base	 = 0x1f0;	// ide0通道的起始端口号是0x1f0
c00068f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00068f8:	66 c7 40 08 f0 01    	movw   $0x1f0,0x8(%eax)
/work/x86_os_my/device/ide.c:366
			channel->irq_no	 = 0x20 + 14;	// 从片8259a上倒数第二的中断引脚,温盘,也就是ide0通道的的中断向量号
c00068fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006901:	c6 40 0a 2e          	movb   $0x2e,0xa(%eax)
/work/x86_os_my/device/ide.c:367
			break;
c0006905:	eb 11                	jmp    c0006918 <ide_init+0xd2>
/work/x86_os_my/device/ide.c:370
			
			case 1:
			channel->port_base	 = 0x170;	// ide1通道的起始端口号是0x170
c0006907:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000690a:	66 c7 40 08 70 01    	movw   $0x170,0x8(%eax)
/work/x86_os_my/device/ide.c:371
			channel->irq_no	 = 0x20 + 15;	// 从8259A上的最后一个中断引脚,我们用来响应ide1通道上的硬盘中断
c0006910:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006913:	c6 40 0a 2f          	movb   $0x2f,0xa(%eax)
/work/x86_os_my/device/ide.c:372
			break;
c0006917:	90                   	nop
/work/x86_os_my/device/ide.c:375
		}

		channel->expecting_intr = false;	// 未向硬盘写入指令时不期待硬盘的中断
c0006918:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000691b:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
/work/x86_os_my/device/ide.c:376
		lock_init(&channel->lock);
c0006922:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006925:	83 c0 0c             	add    $0xc,%eax
c0006928:	83 ec 0c             	sub    $0xc,%esp
c000692b:	50                   	push   %eax
c000692c:	e8 74 df ff ff       	call   c00048a5 <lock_init>
c0006931:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:380

		/* 初始化为0,目的是向硬盘控制器请求数据后,硬盘驱动sema_down此信号量会阻塞线程,
		直到硬盘完成后通过发中断,由中断处理程序将此信号量sema_up,唤醒线程. */
		sema_init(&channel->disk_done, 0);
c0006934:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006937:	83 c0 2c             	add    $0x2c,%eax
c000693a:	83 ec 08             	sub    $0x8,%esp
c000693d:	6a 00                	push   $0x0
c000693f:	50                   	push   %eax
c0006940:	e8 36 df ff ff       	call   c000487b <sema_init>
c0006945:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:381
		register_handler(channel->irq_no, intr_hd_handler);
c0006948:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000694b:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
c000694f:	0f b6 c0             	movzbl %al,%eax
c0006952:	83 ec 08             	sub    $0x8,%esp
c0006955:	68 8c 67 00 c0       	push   $0xc000678c
c000695a:	50                   	push   %eax
c000695b:	e8 4b b0 ff ff       	call   c00019ab <register_handler>
c0006960:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:384

		/* 分别获取两个硬盘的参数及分区信息 */
		while (dev_no < 2) {
c0006963:	e9 88 00 00 00       	jmp    c00069f0 <ide_init+0x1aa>
/work/x86_os_my/device/ide.c:385
			struct disk* hd = &channel->devices[dev_no];
c0006968:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c000696c:	69 c0 10 03 00 00    	imul   $0x310,%eax,%eax
c0006972:	8d 50 40             	lea    0x40(%eax),%edx
c0006975:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006978:	01 d0                	add    %edx,%eax
c000697a:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/device/ide.c:386
			hd->my_channel = channel;
c000697d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0006980:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0006983:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/device/ide.c:387
			hd->dev_no = dev_no;
c0006986:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0006989:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
c000698d:	88 50 0c             	mov    %dl,0xc(%eax)
/work/x86_os_my/device/ide.c:388
			sprintf(hd->name, "sd%c", 'a' + channel_no * 2 + dev_no);
c0006990:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0006994:	01 c0                	add    %eax,%eax
c0006996:	8d 50 61             	lea    0x61(%eax),%edx
c0006999:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c000699d:	01 c2                	add    %eax,%edx
c000699f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00069a2:	83 ec 04             	sub    $0x4,%esp
c00069a5:	52                   	push   %edx
c00069a6:	68 b4 cd 00 c0       	push   $0xc000cdb4
c00069ab:	50                   	push   %eax
c00069ac:	e8 79 f2 ff ff       	call   c0005c2a <sprintf>
c00069b1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:389
			identify_disk(hd);		// 获取硬盘参数
c00069b4:	83 ec 0c             	sub    $0xc,%esp
c00069b7:	ff 75 ec             	pushl  -0x14(%ebp)
c00069ba:	e8 5d f9 ff ff       	call   c000631c <identify_disk>
c00069bf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:390
			if (dev_no != 0) {		// 内核本身的裸硬盘(hd60M.img)不处理
c00069c2:	80 7d f6 00          	cmpb   $0x0,-0xa(%ebp)
c00069c6:	74 10                	je     c00069d8 <ide_init+0x192>
/work/x86_os_my/device/ide.c:391
				partition_scan(hd, 0);	// 扫描该硬盘上的分区
c00069c8:	83 ec 08             	sub    $0x8,%esp
c00069cb:	6a 00                	push   $0x0
c00069cd:	ff 75 ec             	pushl  -0x14(%ebp)
c00069d0:	e8 c4 fa ff ff       	call   c0006499 <partition_scan>
c00069d5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:393
			}
			p_no = 0, l_no = 0;
c00069d8:	c6 05 10 06 01 c0 00 	movb   $0x0,0xc0010610
c00069df:	c6 05 11 06 01 c0 00 	movb   $0x0,0xc0010611
/work/x86_os_my/device/ide.c:394
			dev_no++;
c00069e6:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c00069ea:	83 c0 01             	add    $0x1,%eax
c00069ed:	88 45 f6             	mov    %al,-0xa(%ebp)
/work/x86_os_my/device/ide.c:384
		直到硬盘完成后通过发中断,由中断处理程序将此信号量sema_up,唤醒线程. */
		sema_init(&channel->disk_done, 0);
		register_handler(channel->irq_no, intr_hd_handler);

		/* 分别获取两个硬盘的参数及分区信息 */
		while (dev_no < 2) {
c00069f0:	80 7d f6 01          	cmpb   $0x1,-0xa(%ebp)
c00069f4:	0f 86 6e ff ff ff    	jbe    c0006968 <ide_init+0x122>
/work/x86_os_my/device/ide.c:396
				partition_scan(hd, 0);	// 扫描该硬盘上的分区
			}
			p_no = 0, l_no = 0;
			dev_no++;
		}
		dev_no = 0;		// 将硬盘驱动器号置0,为下一个channel的两个硬盘初始化。
c00069fa:	c6 45 f6 00          	movb   $0x0,-0xa(%ebp)
/work/x86_os_my/device/ide.c:397
		channel_no++;	// 下一个channel
c00069fe:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0006a02:	83 c0 01             	add    $0x1,%eax
c0006a05:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/device/ide.c:358
	channel_cnt = DIV_ROUND_UP(hd_cnt, 2);	// 一个ide通道上有两个硬盘,根据硬盘数量反推有几个ide通道
	struct ide_channel* channel;
	uint8_t channel_no = 0, dev_no = 0;

	/* 处理每个通道上的硬盘 */
	while (channel_no < channel_cnt) {
c0006a08:	0f b6 05 e0 12 01 c0 	movzbl 0xc00112e0,%eax
c0006a0f:	38 45 f7             	cmp    %al,-0x9(%ebp)
c0006a12:	0f 82 a3 fe ff ff    	jb     c00068bb <ide_init+0x75>
/work/x86_os_my/device/ide.c:400
		}
		dev_no = 0;		// 将硬盘驱动器号置0,为下一个channel的两个硬盘初始化。
		channel_no++;	// 下一个channel
	}

	printk("\n   all partition info\n");
c0006a18:	83 ec 0c             	sub    $0xc,%esp
c0006a1b:	68 b9 cd 00 c0       	push   $0xc000cdb9
c0006a20:	e8 2d 00 00 00       	call   c0006a52 <printk>
c0006a25:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:402
	/* 打印所有分区信息 */
	list_traversal(&partition_list, partition_info, (int)NULL);
c0006a28:	83 ec 04             	sub    $0x4,%esp
c0006a2b:	6a 00                	push   $0x0
c0006a2d:	68 55 67 00 c0       	push   $0xc0006755
c0006a32:	68 c0 1f 01 c0       	push   $0xc0011fc0
c0006a37:	e8 bb dc ff ff       	call   c00046f7 <list_traversal>
c0006a3c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:403
	printk("ide_init done\n");
c0006a3f:	83 ec 0c             	sub    $0xc,%esp
c0006a42:	68 d1 cd 00 c0       	push   $0xc000cdd1
c0006a47:	e8 06 00 00 00       	call   c0006a52 <printk>
c0006a4c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:404
}
c0006a4f:	90                   	nop
c0006a50:	c9                   	leave  
c0006a51:	c3                   	ret    

c0006a52 <printk>:
printk():
/work/x86_os_my/lib/kernel/stdio-kernel.c:11

#define va_start(args, first_fix) args = (va_list)&first_fix
#define va_end(args) args = NULL

/* 供内核使用的格式化输出函数 */
void printk(const char* format, ...) {
c0006a52:	55                   	push   %ebp
c0006a53:	89 e5                	mov    %esp,%ebp
c0006a55:	57                   	push   %edi
c0006a56:	81 ec 14 04 00 00    	sub    $0x414,%esp
/work/x86_os_my/lib/kernel/stdio-kernel.c:13
	va_list args;
	va_start(args, format);
c0006a5c:	8d 45 08             	lea    0x8(%ebp),%eax
c0006a5f:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/stdio-kernel.c:14
	char buf[1024] = {0};
c0006a62:	8d 95 f4 fb ff ff    	lea    -0x40c(%ebp),%edx
c0006a68:	b8 00 00 00 00       	mov    $0x0,%eax
c0006a6d:	b9 00 01 00 00       	mov    $0x100,%ecx
c0006a72:	89 d7                	mov    %edx,%edi
c0006a74:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/lib/kernel/stdio-kernel.c:15
	vsprintf(buf, format, args);
c0006a76:	8b 45 08             	mov    0x8(%ebp),%eax
c0006a79:	83 ec 04             	sub    $0x4,%esp
c0006a7c:	ff 75 f4             	pushl  -0xc(%ebp)
c0006a7f:	50                   	push   %eax
c0006a80:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c0006a86:	50                   	push   %eax
c0006a87:	e8 21 f0 ff ff       	call   c0005aad <vsprintf>
c0006a8c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/stdio-kernel.c:16
	va_end(args);
c0006a8f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/kernel/stdio-kernel.c:17
	console_put_str(buf);
c0006a96:	83 ec 0c             	sub    $0xc,%esp
c0006a99:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c0006a9f:	50                   	push   %eax
c0006aa0:	e8 6b dd ff ff       	call   c0004810 <console_put_str>
c0006aa5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/stdio-kernel.c:18
}
c0006aa8:	90                   	nop
c0006aa9:	8b 7d fc             	mov    -0x4(%ebp),%edi
c0006aac:	c9                   	leave  
c0006aad:	c3                   	ret    

c0006aae <mount_partition>:
mount_partition():
/work/x86_os_my/fs/fs.c:27
把该分区文件系统的元信息从硬盘上读出来加载到内存中，
这样硬盘资源的变化都用内存中元信息来跟踪，
如果有写操作，及时将内存中的元信息同步写入到硬盘以持久化。
*/
//sb_buf没释放！
static bool mount_partition(struct list_elem* pelem, int arg) {
c0006aae:	55                   	push   %ebp
c0006aaf:	89 e5                	mov    %esp,%ebp
c0006ab1:	53                   	push   %ebx
c0006ab2:	83 ec 14             	sub    $0x14,%esp
/work/x86_os_my/fs/fs.c:28
	char* part_name = (char*)arg;	// sdb1
c0006ab5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006ab8:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:29
	struct partition* part = elem2entry(struct partition, part_tag, pelem);	// 根据pelem找到partition
c0006abb:	8b 45 08             	mov    0x8(%ebp),%eax
c0006abe:	83 e8 0c             	sub    $0xc,%eax
c0006ac1:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:30
	if (!strcmp(part->name, part_name)) {	//名字一致
c0006ac4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006ac7:	83 c0 14             	add    $0x14,%eax
c0006aca:	83 ec 08             	sub    $0x8,%esp
c0006acd:	ff 75 f4             	pushl  -0xc(%ebp)
c0006ad0:	50                   	push   %eax
c0006ad1:	e8 c2 ce ff ff       	call   c0003998 <strcmp>
c0006ad6:	83 c4 10             	add    $0x10,%esp
c0006ad9:	84 c0                	test   %al,%al
c0006adb:	0f 85 ce 01 00 00    	jne    c0006caf <mount_partition+0x201>
/work/x86_os_my/fs/fs.c:31
		cur_part = part;
c0006ae1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006ae4:	a3 d0 1f 01 c0       	mov    %eax,0xc0011fd0
/work/x86_os_my/fs/fs.c:32
		struct disk* hd = cur_part->my_disk;
c0006ae9:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0006aee:	8b 40 08             	mov    0x8(%eax),%eax
c0006af1:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:33
		struct super_block* sb_buf = (struct super_block*)sys_malloc(SECTOR_SIZE);
c0006af4:	83 ec 0c             	sub    $0xc,%esp
c0006af7:	68 00 02 00 00       	push   $0x200
c0006afc:	e8 cb c1 ff ff       	call   c0002ccc <sys_malloc>
c0006b01:	83 c4 10             	add    $0x10,%esp
c0006b04:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:37

		/* 在内存中创建分区cur_part的超级块 */
		// super_block 占用了1个扇区，但是它后边有很多数据是pad只做填充用
		cur_part->sb = (struct super_block*)sys_malloc(sizeof(struct super_block));
c0006b07:	8b 1d d0 1f 01 c0    	mov    0xc0011fd0,%ebx
c0006b0d:	83 ec 0c             	sub    $0xc,%esp
c0006b10:	68 00 02 00 00       	push   $0x200
c0006b15:	e8 b2 c1 ff ff       	call   c0002ccc <sys_malloc>
c0006b1a:	83 c4 10             	add    $0x10,%esp
c0006b1d:	89 43 1c             	mov    %eax,0x1c(%ebx)
/work/x86_os_my/fs/fs.c:38
		if (cur_part->sb == NULL) {
c0006b20:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0006b25:	8b 40 1c             	mov    0x1c(%eax),%eax
c0006b28:	85 c0                	test   %eax,%eax
c0006b2a:	75 19                	jne    c0006b45 <mount_partition+0x97>
/work/x86_os_my/fs/fs.c:39
			PANIC("alloc memory failed!");
c0006b2c:	68 44 ce 00 c0       	push   $0xc000ce44
c0006b31:	68 18 d6 00 c0       	push   $0xc000d618
c0006b36:	6a 27                	push   $0x27
c0006b38:	68 59 ce 00 c0       	push   $0xc000ce59
c0006b3d:	e8 df b7 ff ff       	call   c0002321 <panic_spin>
c0006b42:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:43
		}

		/* 读入超级块 */
		memset(sb_buf, 0, SECTOR_SIZE);
c0006b45:	83 ec 04             	sub    $0x4,%esp
c0006b48:	68 00 02 00 00       	push   $0x200
c0006b4d:	6a 00                	push   $0x0
c0006b4f:	ff 75 e8             	pushl  -0x18(%ebp)
c0006b52:	e8 6c cc ff ff       	call   c00037c3 <memset>
c0006b57:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:44
		ide_read(hd, cur_part->start_lba + 1, sb_buf, 1);
c0006b5a:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0006b5f:	8b 00                	mov    (%eax),%eax
c0006b61:	83 c0 01             	add    $0x1,%eax
c0006b64:	6a 01                	push   $0x1
c0006b66:	ff 75 e8             	pushl  -0x18(%ebp)
c0006b69:	50                   	push   %eax
c0006b6a:	ff 75 ec             	pushl  -0x14(%ebp)
c0006b6d:	e8 67 f4 ff ff       	call   c0005fd9 <ide_read>
c0006b72:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:46
		// 拷贝给 cur_part->sb
		memcpy(cur_part->sb, sb_buf, sizeof(struct super_block));
c0006b75:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0006b7a:	8b 40 1c             	mov    0x1c(%eax),%eax
c0006b7d:	83 ec 04             	sub    $0x4,%esp
c0006b80:	68 00 02 00 00       	push   $0x200
c0006b85:	ff 75 e8             	pushl  -0x18(%ebp)
c0006b88:	50                   	push   %eax
c0006b89:	e8 87 cc ff ff       	call   c0003815 <memcpy>
c0006b8e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:49

		/* 读入块位图 */
		cur_part->block_bitmap.bits = (uint8_t*)sys_malloc(sb_buf->block_bitmap_sects * SECTOR_SIZE);
c0006b91:	8b 1d d0 1f 01 c0    	mov    0xc0011fd0,%ebx
c0006b97:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0006b9a:	8b 40 14             	mov    0x14(%eax),%eax
c0006b9d:	c1 e0 09             	shl    $0x9,%eax
c0006ba0:	83 ec 0c             	sub    $0xc,%esp
c0006ba3:	50                   	push   %eax
c0006ba4:	e8 23 c1 ff ff       	call   c0002ccc <sys_malloc>
c0006ba9:	83 c4 10             	add    $0x10,%esp
c0006bac:	89 43 24             	mov    %eax,0x24(%ebx)
/work/x86_os_my/fs/fs.c:50
		if (cur_part->block_bitmap.bits == NULL) {
c0006baf:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0006bb4:	8b 40 24             	mov    0x24(%eax),%eax
c0006bb7:	85 c0                	test   %eax,%eax
c0006bb9:	75 19                	jne    c0006bd4 <mount_partition+0x126>
/work/x86_os_my/fs/fs.c:51
			PANIC("alloc memory failed!");
c0006bbb:	68 44 ce 00 c0       	push   $0xc000ce44
c0006bc0:	68 18 d6 00 c0       	push   $0xc000d618
c0006bc5:	6a 33                	push   $0x33
c0006bc7:	68 59 ce 00 c0       	push   $0xc000ce59
c0006bcc:	e8 50 b7 ff ff       	call   c0002321 <panic_spin>
c0006bd1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:53
		}
		cur_part->block_bitmap.btmp_bytes_len = sb_buf->block_bitmap_sects * SECTOR_SIZE;
c0006bd4:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0006bd9:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0006bdc:	8b 52 14             	mov    0x14(%edx),%edx
c0006bdf:	c1 e2 09             	shl    $0x9,%edx
c0006be2:	89 50 20             	mov    %edx,0x20(%eax)
/work/x86_os_my/fs/fs.c:54
		ide_read(hd, sb_buf->block_bitmap_lba, cur_part->block_bitmap.bits, sb_buf->block_bitmap_sects);
c0006be5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0006be8:	8b 48 14             	mov    0x14(%eax),%ecx
c0006beb:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0006bf0:	8b 50 24             	mov    0x24(%eax),%edx
c0006bf3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0006bf6:	8b 40 10             	mov    0x10(%eax),%eax
c0006bf9:	51                   	push   %ecx
c0006bfa:	52                   	push   %edx
c0006bfb:	50                   	push   %eax
c0006bfc:	ff 75 ec             	pushl  -0x14(%ebp)
c0006bff:	e8 d5 f3 ff ff       	call   c0005fd9 <ide_read>
c0006c04:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:57

		/* 读入inode位图 */
		cur_part->inode_bitmap.bits = (uint8_t*)sys_malloc(sb_buf->inode_bitmap_sects * SECTOR_SIZE);
c0006c07:	8b 1d d0 1f 01 c0    	mov    0xc0011fd0,%ebx
c0006c0d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0006c10:	8b 40 1c             	mov    0x1c(%eax),%eax
c0006c13:	c1 e0 09             	shl    $0x9,%eax
c0006c16:	83 ec 0c             	sub    $0xc,%esp
c0006c19:	50                   	push   %eax
c0006c1a:	e8 ad c0 ff ff       	call   c0002ccc <sys_malloc>
c0006c1f:	83 c4 10             	add    $0x10,%esp
c0006c22:	89 43 2c             	mov    %eax,0x2c(%ebx)
/work/x86_os_my/fs/fs.c:58
		if (cur_part->inode_bitmap.bits == NULL) {
c0006c25:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0006c2a:	8b 40 2c             	mov    0x2c(%eax),%eax
c0006c2d:	85 c0                	test   %eax,%eax
c0006c2f:	75 19                	jne    c0006c4a <mount_partition+0x19c>
/work/x86_os_my/fs/fs.c:59
			PANIC("alloc memory failed!");
c0006c31:	68 44 ce 00 c0       	push   $0xc000ce44
c0006c36:	68 18 d6 00 c0       	push   $0xc000d618
c0006c3b:	6a 3b                	push   $0x3b
c0006c3d:	68 59 ce 00 c0       	push   $0xc000ce59
c0006c42:	e8 da b6 ff ff       	call   c0002321 <panic_spin>
c0006c47:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:61
		}
		cur_part->inode_bitmap.btmp_bytes_len = sb_buf->inode_bitmap_sects * SECTOR_SIZE;
c0006c4a:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0006c4f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0006c52:	8b 52 1c             	mov    0x1c(%edx),%edx
c0006c55:	c1 e2 09             	shl    $0x9,%edx
c0006c58:	89 50 28             	mov    %edx,0x28(%eax)
/work/x86_os_my/fs/fs.c:62
		ide_read(hd, sb_buf->inode_bitmap_lba, cur_part->inode_bitmap.bits, sb_buf->inode_bitmap_sects);
c0006c5b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0006c5e:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0006c61:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0006c66:	8b 50 2c             	mov    0x2c(%eax),%edx
c0006c69:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0006c6c:	8b 40 18             	mov    0x18(%eax),%eax
c0006c6f:	51                   	push   %ecx
c0006c70:	52                   	push   %edx
c0006c71:	50                   	push   %eax
c0006c72:	ff 75 ec             	pushl  -0x14(%ebp)
c0006c75:	e8 5f f3 ff ff       	call   c0005fd9 <ide_read>
c0006c7a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:65


		list_init(&cur_part->open_inodes);	// 本分区打开的inode队列！
c0006c7d:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0006c82:	83 c0 30             	add    $0x30,%eax
c0006c85:	83 ec 0c             	sub    $0xc,%esp
c0006c88:	50                   	push   %eax
c0006c89:	e8 23 d9 ff ff       	call   c00045b1 <list_init>
c0006c8e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:68


		printk("mount %s done!\n", part->name);
c0006c91:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006c94:	83 c0 14             	add    $0x14,%eax
c0006c97:	83 ec 08             	sub    $0x8,%esp
c0006c9a:	50                   	push   %eax
c0006c9b:	68 61 ce 00 c0       	push   $0xc000ce61
c0006ca0:	e8 ad fd ff ff       	call   c0006a52 <printk>
c0006ca5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:70
		/* 返回true时list_traversal才会停止遍历,减少了后面元素无意义的遍历. */
		return true;
c0006ca8:	b8 01 00 00 00       	mov    $0x1,%eax
c0006cad:	eb 05                	jmp    c0006cb4 <mount_partition+0x206>
/work/x86_os_my/fs/fs.c:72
	}//if (!strcmp(part->name, part_name))
	return false;	// list_traversal继续遍历
c0006caf:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/fs.c:73
}
c0006cb4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0006cb7:	c9                   	leave  
c0006cb8:	c3                   	ret    

c0006cb9 <partition_format>:
partition_format():
/work/x86_os_my/fs/fs.c:89
	| 操作系统引导块，超级块，空闲块位图，inode位图，inode数组，根目录，空闲块区域 |
	+------------------------------------------------------------------------------+
	partition结构见ide.h
	MAX_FILES_PER_PART == 4096
****************************************************************************************/
static void partition_format(struct partition* part) {
c0006cb9:	55                   	push   %ebp
c0006cba:	89 e5                	mov    %esp,%ebp
c0006cbc:	57                   	push   %edi
c0006cbd:	56                   	push   %esi
c0006cbe:	53                   	push   %ebx
c0006cbf:	81 ec 7c 02 00 00    	sub    $0x27c,%esp
/work/x86_os_my/fs/fs.c:91
	/* 为方便实现，inode管理的数据块，一个块大小是一扇区 */
	uint32_t boot_sector_sects = 1;		//引导块
c0006cc5:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
/work/x86_os_my/fs/fs.c:92
	uint32_t super_block_sects = 1;		//超级块
c0006ccc:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
/work/x86_os_my/fs/fs.c:93
	uint32_t inode_bitmap_sects = DIV_ROUND_UP(MAX_FILES_PER_PART, BITS_PER_SECTOR);	// inode位图占几个扇区.最多支持4096个文件
c0006cd3:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
/work/x86_os_my/fs/fs.c:94
	uint32_t inode_table_sects = DIV_ROUND_UP((sizeof(struct inode) * MAX_FILES_PER_PART), SECTOR_SIZE);	//inode数组占几个扇区
c0006cda:	c7 45 d4 60 02 00 00 	movl   $0x260,-0x2c(%ebp)
/work/x86_os_my/fs/fs.c:95
	uint32_t used_sects = boot_sector_sects + super_block_sects + inode_bitmap_sects + inode_table_sects;
c0006ce1:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0006ce4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0006ce7:	01 c2                	add    %eax,%edx
c0006ce9:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0006cec:	01 c2                	add    %eax,%edx
c0006cee:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0006cf1:	01 d0                	add    %edx,%eax
c0006cf3:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/fs/fs.c:96
	uint32_t free_sects = part->sec_cnt - used_sects;  
c0006cf6:	8b 45 08             	mov    0x8(%ebp),%eax
c0006cf9:	8b 40 04             	mov    0x4(%eax),%eax
c0006cfc:	2b 45 d0             	sub    -0x30(%ebp),%eax
c0006cff:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/fs/fs.c:100

	/************** 简单处理块位图占据的扇区数 ***************/
	uint32_t block_bitmap_sects;	//空闲块位图占几个扇区
	block_bitmap_sects = DIV_ROUND_UP(free_sects, BITS_PER_SECTOR);		//free_sects空闲块位图要占几个扇区
c0006d02:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0006d05:	05 ff 0f 00 00       	add    $0xfff,%eax
c0006d0a:	c1 e8 0c             	shr    $0xc,%eax
c0006d0d:	89 45 c8             	mov    %eax,-0x38(%ebp)
/work/x86_os_my/fs/fs.c:102
	/* 再算一次空闲块数量 */
	uint32_t block_bitmap_bit_len = free_sects - block_bitmap_sects;	//block_bitmap_bit_len 是位图长度，也是空闲块数量
c0006d10:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0006d13:	2b 45 c8             	sub    -0x38(%ebp),%eax
c0006d16:	89 45 c4             	mov    %eax,-0x3c(%ebp)
/work/x86_os_my/fs/fs.c:103
	block_bitmap_sects = DIV_ROUND_UP(block_bitmap_bit_len, BITS_PER_SECTOR); 
c0006d19:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0006d1c:	05 ff 0f 00 00       	add    $0xfff,%eax
c0006d21:	c1 e8 0c             	shr    $0xc,%eax
c0006d24:	89 45 c8             	mov    %eax,-0x38(%ebp)
/work/x86_os_my/fs/fs.c:108
	/*********************************************************/

	/* 超级块初始化 */
	struct super_block sb;		//局部变量在栈中512字节
	sb.magic = 0x19590318;
c0006d27:	c7 85 a4 fd ff ff 18 	movl   $0x19590318,-0x25c(%ebp)
c0006d2e:	03 59 19 
/work/x86_os_my/fs/fs.c:109
	sb.sec_cnt = part->sec_cnt;
c0006d31:	8b 45 08             	mov    0x8(%ebp),%eax
c0006d34:	8b 40 04             	mov    0x4(%eax),%eax
c0006d37:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
/work/x86_os_my/fs/fs.c:110
	sb.inode_cnt = MAX_FILES_PER_PART;
c0006d3d:	c7 85 ac fd ff ff 00 	movl   $0x1000,-0x254(%ebp)
c0006d44:	10 00 00 
/work/x86_os_my/fs/fs.c:111
	sb.part_lba_base = part->start_lba;
c0006d47:	8b 45 08             	mov    0x8(%ebp),%eax
c0006d4a:	8b 00                	mov    (%eax),%eax
c0006d4c:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
/work/x86_os_my/fs/fs.c:113

	sb.block_bitmap_lba = sb.part_lba_base + 2;	// 第0块是引导块,第1块是超级块
c0006d52:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
c0006d58:	83 c0 02             	add    $0x2,%eax
c0006d5b:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
/work/x86_os_my/fs/fs.c:114
	sb.block_bitmap_sects = block_bitmap_sects;	// 空闲块位图占几个扇区
c0006d61:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0006d64:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
/work/x86_os_my/fs/fs.c:116

	sb.inode_bitmap_lba = sb.block_bitmap_lba + sb.block_bitmap_sects;
c0006d6a:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
c0006d70:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
c0006d76:	01 d0                	add    %edx,%eax
c0006d78:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
/work/x86_os_my/fs/fs.c:117
	sb.inode_bitmap_sects = inode_bitmap_sects;	// inode位图占几个扇区
c0006d7e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0006d81:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
/work/x86_os_my/fs/fs.c:119

	sb.inode_table_lba = sb.inode_bitmap_lba + sb.inode_bitmap_sects;
c0006d87:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
c0006d8d:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
c0006d93:	01 d0                	add    %edx,%eax
c0006d95:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
/work/x86_os_my/fs/fs.c:120
	sb.inode_table_sects = inode_table_sects;	// inode数组占几个扇区
c0006d9b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0006d9e:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
/work/x86_os_my/fs/fs.c:122

	sb.data_start_lba = sb.inode_table_lba + sb.inode_table_sects;	// 数据区开始的第一个扇区号
c0006da4:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
c0006daa:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
c0006db0:	01 d0                	add    %edx,%eax
c0006db2:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
/work/x86_os_my/fs/fs.c:124

	sb.root_inode_no = 0;	//根目录的inode号是0
c0006db8:	c7 85 d0 fd ff ff 00 	movl   $0x0,-0x230(%ebp)
c0006dbf:	00 00 00 
/work/x86_os_my/fs/fs.c:125
	sb.dir_entry_size = sizeof(struct dir_entry);
c0006dc2:	c7 85 d4 fd ff ff 18 	movl   $0x18,-0x22c(%ebp)
c0006dc9:	00 00 00 
/work/x86_os_my/fs/fs.c:127

	printk("%s info:\n", part->name);
c0006dcc:	8b 45 08             	mov    0x8(%ebp),%eax
c0006dcf:	83 c0 14             	add    $0x14,%eax
c0006dd2:	83 ec 08             	sub    $0x8,%esp
c0006dd5:	50                   	push   %eax
c0006dd6:	68 71 ce 00 c0       	push   $0xc000ce71
c0006ddb:	e8 72 fc ff ff       	call   c0006a52 <printk>
c0006de0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:128
	printk("   magic:0x%x\n   part_lba_base:0x%x\n   all_sectors:0x%x\n   inode_cnt:0x%x\n   block_bitmap_lba:0x%x\n   block_bitmap_sectors:0x%x\n   inode_bitmap_lba:0x%x\n   inode_bitmap_sectors:0x%x\n   inode_table_lba:0x%x\n   inode_table_sectors:0x%x\n   data_start_lba:0x%x\n", sb.magic, sb.part_lba_base, sb.sec_cnt, sb.inode_cnt, sb.block_bitmap_lba, sb.block_bitmap_sects, sb.inode_bitmap_lba, sb.inode_bitmap_sects, sb.inode_table_lba, sb.inode_table_sects, sb.data_start_lba);
c0006de3:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
c0006de9:	8b 9d c8 fd ff ff    	mov    -0x238(%ebp),%ebx
c0006def:	8b bd c4 fd ff ff    	mov    -0x23c(%ebp),%edi
c0006df5:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
c0006dfb:	89 85 94 fd ff ff    	mov    %eax,-0x26c(%ebp)
c0006e01:	8b b5 bc fd ff ff    	mov    -0x244(%ebp),%esi
c0006e07:	89 b5 90 fd ff ff    	mov    %esi,-0x270(%ebp)
c0006e0d:	8b 8d b8 fd ff ff    	mov    -0x248(%ebp),%ecx
c0006e13:	89 8d 8c fd ff ff    	mov    %ecx,-0x274(%ebp)
c0006e19:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
c0006e1f:	89 85 88 fd ff ff    	mov    %eax,-0x278(%ebp)
c0006e25:	8b b5 ac fd ff ff    	mov    -0x254(%ebp),%esi
c0006e2b:	89 b5 84 fd ff ff    	mov    %esi,-0x27c(%ebp)
c0006e31:	8b b5 a8 fd ff ff    	mov    -0x258(%ebp),%esi
c0006e37:	8b 8d b0 fd ff ff    	mov    -0x250(%ebp),%ecx
c0006e3d:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
c0006e43:	52                   	push   %edx
c0006e44:	53                   	push   %ebx
c0006e45:	57                   	push   %edi
c0006e46:	ff b5 94 fd ff ff    	pushl  -0x26c(%ebp)
c0006e4c:	ff b5 90 fd ff ff    	pushl  -0x270(%ebp)
c0006e52:	ff b5 8c fd ff ff    	pushl  -0x274(%ebp)
c0006e58:	ff b5 88 fd ff ff    	pushl  -0x278(%ebp)
c0006e5e:	ff b5 84 fd ff ff    	pushl  -0x27c(%ebp)
c0006e64:	56                   	push   %esi
c0006e65:	51                   	push   %ecx
c0006e66:	50                   	push   %eax
c0006e67:	68 7c ce 00 c0       	push   $0xc000ce7c
c0006e6c:	e8 e1 fb ff ff       	call   c0006a52 <printk>
c0006e71:	83 c4 30             	add    $0x30,%esp
/work/x86_os_my/fs/fs.c:132


	/***** 1 将超级块写入本分区的1号扇区 *****/
	struct disk* hd = part->my_disk;	// 分区所属的硬盘
c0006e74:	8b 45 08             	mov    0x8(%ebp),%eax
c0006e77:	8b 40 08             	mov    0x8(%eax),%eax
c0006e7a:	89 45 c0             	mov    %eax,-0x40(%ebp)
/work/x86_os_my/fs/fs.c:134
	// void ide_write(struct disk* hd, uint32_t lba, void* buf, uint32_t sec_cnt);
	ide_write(hd, part->start_lba + 1, &sb, 1);
c0006e7d:	8b 45 08             	mov    0x8(%ebp),%eax
c0006e80:	8b 00                	mov    (%eax),%eax
c0006e82:	8d 50 01             	lea    0x1(%eax),%edx
c0006e85:	6a 01                	push   $0x1
c0006e87:	8d 85 a4 fd ff ff    	lea    -0x25c(%ebp),%eax
c0006e8d:	50                   	push   %eax
c0006e8e:	52                   	push   %edx
c0006e8f:	ff 75 c0             	pushl  -0x40(%ebp)
c0006e92:	e8 b6 f2 ff ff       	call   c000614d <ide_write>
c0006e97:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:135
	printk("   super_block_lba:0x%x\n", part->start_lba + 1);
c0006e9a:	8b 45 08             	mov    0x8(%ebp),%eax
c0006e9d:	8b 00                	mov    (%eax),%eax
c0006e9f:	83 c0 01             	add    $0x1,%eax
c0006ea2:	83 ec 08             	sub    $0x8,%esp
c0006ea5:	50                   	push   %eax
c0006ea6:	68 7e cf 00 c0       	push   $0xc000cf7e
c0006eab:	e8 a2 fb ff ff       	call   c0006a52 <printk>
c0006eb0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:139


	/* 他们三个写到硬盘上：block_bitmap_sects/inode_bitmap_sects/inode_table_sects 缓冲区选三者最大的 */
	uint32_t buf_size = (sb.block_bitmap_sects >= sb.inode_bitmap_sects ? sb.block_bitmap_sects : sb.inode_bitmap_sects);
c0006eb3:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
c0006eb9:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
c0006ebf:	39 c2                	cmp    %eax,%edx
c0006ec1:	0f 43 c2             	cmovae %edx,%eax
c0006ec4:	89 45 bc             	mov    %eax,-0x44(%ebp)
/work/x86_os_my/fs/fs.c:140
	buf_size = (buf_size >= sb.inode_table_sects ? buf_size : sb.inode_table_sects) * SECTOR_SIZE;
c0006ec7:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
c0006ecd:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0006ed0:	39 c2                	cmp    %eax,%edx
c0006ed2:	0f 43 c2             	cmovae %edx,%eax
c0006ed5:	c1 e0 09             	shl    $0x9,%eax
c0006ed8:	89 45 bc             	mov    %eax,-0x44(%ebp)
/work/x86_os_my/fs/fs.c:141
	uint8_t* buf = (uint8_t*)sys_malloc(buf_size);	// 申请的内存由内存管理系统清0后返回
c0006edb:	83 ec 0c             	sub    $0xc,%esp
c0006ede:	ff 75 bc             	pushl  -0x44(%ebp)
c0006ee1:	e8 e6 bd ff ff       	call   c0002ccc <sys_malloc>
c0006ee6:	83 c4 10             	add    $0x10,%esp
c0006ee9:	89 45 b8             	mov    %eax,-0x48(%ebp)
/work/x86_os_my/fs/fs.c:146


	/***** 2 将块位图初始化并写入sb.block_bitmap_lba *****/
	/* 初始化块位图 block_bitmap */
	buf[0] |= 0x01;	// 第0个块预留给根目录,位图中先占位
c0006eec:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0006eef:	0f b6 00             	movzbl (%eax),%eax
c0006ef2:	83 c8 01             	or     $0x1,%eax
c0006ef5:	89 c2                	mov    %eax,%edx
c0006ef7:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0006efa:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/fs/fs.c:147
	uint32_t block_bitmap_last_byte = block_bitmap_bit_len / 8;		//block_bitmap_bit_len 是位图长度，也是空闲块数量
c0006efc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0006eff:	c1 e8 03             	shr    $0x3,%eax
c0006f02:	89 45 b4             	mov    %eax,-0x4c(%ebp)
/work/x86_os_my/fs/fs.c:148
	uint8_t  block_bitmap_last_bit  = block_bitmap_bit_len % 8;
c0006f05:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0006f08:	83 e0 07             	and    $0x7,%eax
c0006f0b:	88 45 b3             	mov    %al,-0x4d(%ebp)
/work/x86_os_my/fs/fs.c:149
	uint32_t last_size = SECTOR_SIZE - (block_bitmap_last_byte % SECTOR_SIZE);	// last_size是位图占用的最后一个扇区中，不足一扇区的空闲部分
c0006f0e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0006f11:	25 ff 01 00 00       	and    $0x1ff,%eax
c0006f16:	ba 00 02 00 00       	mov    $0x200,%edx
c0006f1b:	29 c2                	sub    %eax,%edx
c0006f1d:	89 d0                	mov    %edx,%eax
c0006f1f:	89 45 ac             	mov    %eax,-0x54(%ebp)
/work/x86_os_my/fs/fs.c:152

	// 1 空闲块位图最后一字节，到最后一字节所在扇区的末尾，全置为占用（空闲块位图所在扇区的空闲部分）
	memset(&buf[block_bitmap_last_byte], 0xff, last_size);
c0006f22:	8b 55 b8             	mov    -0x48(%ebp),%edx
c0006f25:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0006f28:	01 d0                	add    %edx,%eax
c0006f2a:	83 ec 04             	sub    $0x4,%esp
c0006f2d:	ff 75 ac             	pushl  -0x54(%ebp)
c0006f30:	68 ff 00 00 00       	push   $0xff
c0006f35:	50                   	push   %eax
c0006f36:	e8 88 c8 ff ff       	call   c00037c3 <memset>
c0006f3b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:155

	// 2 上一步中最后一字节内，有效的位重新置0
	uint8_t bit_idx = 0;
c0006f3e:	c6 45 e7 00          	movb   $0x0,-0x19(%ebp)
/work/x86_os_my/fs/fs.c:156
	while (bit_idx <= block_bitmap_last_bit) {
c0006f42:	eb 37                	jmp    c0006f7b <partition_format+0x2c2>
/work/x86_os_my/fs/fs.c:157
		buf[block_bitmap_last_byte] &= ~(1 << bit_idx++);
c0006f44:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c0006f48:	8d 50 01             	lea    0x1(%eax),%edx
c0006f4b:	88 55 e7             	mov    %dl,-0x19(%ebp)
c0006f4e:	0f b6 c0             	movzbl %al,%eax
c0006f51:	ba 01 00 00 00       	mov    $0x1,%edx
c0006f56:	89 c1                	mov    %eax,%ecx
c0006f58:	d3 e2                	shl    %cl,%edx
c0006f5a:	89 d0                	mov    %edx,%eax
c0006f5c:	f7 d0                	not    %eax
c0006f5e:	89 c3                	mov    %eax,%ebx
c0006f60:	8b 55 b8             	mov    -0x48(%ebp),%edx
c0006f63:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0006f66:	01 d0                	add    %edx,%eax
c0006f68:	8b 4d b8             	mov    -0x48(%ebp),%ecx
c0006f6b:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0006f6e:	01 ca                	add    %ecx,%edx
c0006f70:	0f b6 12             	movzbl (%edx),%edx
c0006f73:	89 d1                	mov    %edx,%ecx
c0006f75:	89 da                	mov    %ebx,%edx
c0006f77:	21 ca                	and    %ecx,%edx
c0006f79:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/fs/fs.c:156
	// 1 空闲块位图最后一字节，到最后一字节所在扇区的末尾，全置为占用（空闲块位图所在扇区的空闲部分）
	memset(&buf[block_bitmap_last_byte], 0xff, last_size);

	// 2 上一步中最后一字节内，有效的位重新置0
	uint8_t bit_idx = 0;
	while (bit_idx <= block_bitmap_last_bit) {
c0006f7b:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c0006f7f:	3a 45 b3             	cmp    -0x4d(%ebp),%al
c0006f82:	76 c0                	jbe    c0006f44 <partition_format+0x28b>
/work/x86_os_my/fs/fs.c:160
		buf[block_bitmap_last_byte] &= ~(1 << bit_idx++);
	}
	// 3 写回到硬盘 空闲块位图 区域
	ide_write(hd, sb.block_bitmap_lba, buf, sb.block_bitmap_sects);
c0006f84:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
c0006f8a:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
c0006f90:	52                   	push   %edx
c0006f91:	ff 75 b8             	pushl  -0x48(%ebp)
c0006f94:	50                   	push   %eax
c0006f95:	ff 75 c0             	pushl  -0x40(%ebp)
c0006f98:	e8 b0 f1 ff ff       	call   c000614d <ide_write>
c0006f9d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:164


	/***** 3 将inode位图初始化并写入sb.inode_bitmap_lba *****/
	memset(buf, 0, buf_size);
c0006fa0:	83 ec 04             	sub    $0x4,%esp
c0006fa3:	ff 75 bc             	pushl  -0x44(%ebp)
c0006fa6:	6a 00                	push   $0x0
c0006fa8:	ff 75 b8             	pushl  -0x48(%ebp)
c0006fab:	e8 13 c8 ff ff       	call   c00037c3 <memset>
c0006fb0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:165
	buf[0] |= 0x1;	// 第0个inode分给了根目录
c0006fb3:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0006fb6:	0f b6 00             	movzbl (%eax),%eax
c0006fb9:	83 c8 01             	or     $0x1,%eax
c0006fbc:	89 c2                	mov    %eax,%edx
c0006fbe:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0006fc1:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/fs/fs.c:169
	/* 最多4096个文件，inode位图4096个bit，正好占用1扇区，inode_bitmap_sects等于1
	 * 不像block_bitmap，在inode_bitmap的扇区中，没有多余的空闲无效位 */
	// 写回到硬盘 inode位图 区域
	ide_write(hd, sb.inode_bitmap_lba, buf, sb.inode_bitmap_sects);
c0006fc3:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
c0006fc9:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
c0006fcf:	52                   	push   %edx
c0006fd0:	ff 75 b8             	pushl  -0x48(%ebp)
c0006fd3:	50                   	push   %eax
c0006fd4:	ff 75 c0             	pushl  -0x40(%ebp)
c0006fd7:	e8 71 f1 ff ff       	call   c000614d <ide_write>
c0006fdc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:174


	/***** 4 将inode数组初始化并写入sb.inode_table_lba *****/
	/* 处理inode_table中的第0项，即根目录所在的inode */
	memset(buf, 0, buf_size);
c0006fdf:	83 ec 04             	sub    $0x4,%esp
c0006fe2:	ff 75 bc             	pushl  -0x44(%ebp)
c0006fe5:	6a 00                	push   $0x0
c0006fe7:	ff 75 b8             	pushl  -0x48(%ebp)
c0006fea:	e8 d4 c7 ff ff       	call   c00037c3 <memset>
c0006fef:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:175
	struct inode* i = (struct inode*)buf;
c0006ff2:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0006ff5:	89 45 a8             	mov    %eax,-0x58(%ebp)
/work/x86_os_my/fs/fs.c:176
	i->i_size = sb.dir_entry_size * 2;		// .和..	// 所有目录项大小之和
c0006ff8:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
c0006ffe:	8d 14 00             	lea    (%eax,%eax,1),%edx
c0007001:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0007004:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/fs.c:177
	i->i_no = 0;   // 根目录占inode数组中第0个inode
c0007007:	8b 45 a8             	mov    -0x58(%ebp),%eax
c000700a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/fs/fs.c:181
	// inode管理的是数据块（对于我们来说就是扇区）
	// 此处是指定根目录这个inode管理的数据块的位置
	// i_sectors数组后边的元素都是0 没用到
	i->i_sectors[0] = sb.data_start_lba;
c0007010:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
c0007016:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0007019:	89 50 10             	mov    %edx,0x10(%eax)
/work/x86_os_my/fs/fs.c:184
	// 写到硬盘 inode数组
	// 其实我们只处理了第0项
	ide_write(hd, sb.inode_table_lba, buf, sb.inode_table_sects);
c000701c:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
c0007022:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
c0007028:	52                   	push   %edx
c0007029:	ff 75 b8             	pushl  -0x48(%ebp)
c000702c:	50                   	push   %eax
c000702d:	ff 75 c0             	pushl  -0x40(%ebp)
c0007030:	e8 18 f1 ff ff       	call   c000614d <ide_write>
c0007035:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:190


	/***** 5 将根目录初始化并写入sb.data_start_lba *****/
	/* 写入根目录的两个目录项.和.. */
	// inode不知道数据块中是普通文件，还是目录。但是目录项知道。
	memset(buf, 0, buf_size);
c0007038:	83 ec 04             	sub    $0x4,%esp
c000703b:	ff 75 bc             	pushl  -0x44(%ebp)
c000703e:	6a 00                	push   $0x0
c0007040:	ff 75 b8             	pushl  -0x48(%ebp)
c0007043:	e8 7b c7 ff ff       	call   c00037c3 <memset>
c0007048:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:191
	struct dir_entry* p_de = (struct dir_entry*)buf;
c000704b:	8b 45 b8             	mov    -0x48(%ebp),%eax
c000704e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
/work/x86_os_my/fs/fs.c:194

	/* 初始化当前目录"." */
	memcpy(p_de->filename, ".", 1);
c0007051:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0007054:	83 ec 04             	sub    $0x4,%esp
c0007057:	6a 01                	push   $0x1
c0007059:	68 97 cf 00 c0       	push   $0xc000cf97
c000705e:	50                   	push   %eax
c000705f:	e8 b1 c7 ff ff       	call   c0003815 <memcpy>
c0007064:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:195
	p_de->i_no = 0;	// 目录或文件对应的inode编号
c0007067:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c000706a:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
/work/x86_os_my/fs/fs.c:196
	p_de->f_type = FT_DIRECTORY;
c0007071:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0007074:	c7 40 14 02 00 00 00 	movl   $0x2,0x14(%eax)
/work/x86_os_my/fs/fs.c:198

	p_de++;
c000707b:	83 45 a4 18          	addl   $0x18,-0x5c(%ebp)
/work/x86_os_my/fs/fs.c:201

	/* 初始化当前目录父目录".." */
	memcpy(p_de->filename, "..", 2);
c000707f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0007082:	83 ec 04             	sub    $0x4,%esp
c0007085:	6a 02                	push   $0x2
c0007087:	68 99 cf 00 c0       	push   $0xc000cf99
c000708c:	50                   	push   %eax
c000708d:	e8 83 c7 ff ff       	call   c0003815 <memcpy>
c0007092:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:202
	p_de->i_no = 0;	// 根目录的父目录依然是根目录自己
c0007095:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0007098:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
/work/x86_os_my/fs/fs.c:203
	p_de->f_type = FT_DIRECTORY;
c000709f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c00070a2:	c7 40 14 02 00 00 00 	movl   $0x2,0x14(%eax)
/work/x86_os_my/fs/fs.c:206

	/* sb.data_start_lba已经分配给了根目录，我们把根目录的目录项放进去 */
	ide_write(hd, sb.data_start_lba, buf, 1);
c00070a9:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
c00070af:	6a 01                	push   $0x1
c00070b1:	ff 75 b8             	pushl  -0x48(%ebp)
c00070b4:	50                   	push   %eax
c00070b5:	ff 75 c0             	pushl  -0x40(%ebp)
c00070b8:	e8 90 f0 ff ff       	call   c000614d <ide_write>
c00070bd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:209


	printk("   root_dir_lba:0x%x\n", sb.data_start_lba);
c00070c0:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
c00070c6:	83 ec 08             	sub    $0x8,%esp
c00070c9:	50                   	push   %eax
c00070ca:	68 9c cf 00 c0       	push   $0xc000cf9c
c00070cf:	e8 7e f9 ff ff       	call   c0006a52 <printk>
c00070d4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:210
	printk("%s format done\n", part->name);
c00070d7:	8b 45 08             	mov    0x8(%ebp),%eax
c00070da:	83 c0 14             	add    $0x14,%eax
c00070dd:	83 ec 08             	sub    $0x8,%esp
c00070e0:	50                   	push   %eax
c00070e1:	68 b2 cf 00 c0       	push   $0xc000cfb2
c00070e6:	e8 67 f9 ff ff       	call   c0006a52 <printk>
c00070eb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:211
	sys_free(buf);
c00070ee:	83 ec 0c             	sub    $0xc,%esp
c00070f1:	ff 75 b8             	pushl  -0x48(%ebp)
c00070f4:	e8 00 c2 ff ff       	call   c00032f9 <sys_free>
c00070f9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:212
}
c00070fc:	90                   	nop
c00070fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0007100:	5b                   	pop    %ebx
c0007101:	5e                   	pop    %esi
c0007102:	5f                   	pop    %edi
c0007103:	5d                   	pop    %ebp
c0007104:	c3                   	ret    

c0007105 <path_parse>:
path_parse():
/work/x86_os_my/fs/fs.c:217


/* 将最上层路径名称解析出来，比如pathname="a/b/c"得到name_store="a"
 * 返回剩下的目录 "b/c" */
char* path_parse(char* pathname, char* name_store) {
c0007105:	55                   	push   %ebp
c0007106:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/fs/fs.c:218
	if (pathname[0] == '/') {	// 根目录不需要单独解析
c0007108:	8b 45 08             	mov    0x8(%ebp),%eax
c000710b:	0f b6 00             	movzbl (%eax),%eax
c000710e:	3c 2f                	cmp    $0x2f,%al
c0007110:	75 27                	jne    c0007139 <path_parse+0x34>
/work/x86_os_my/fs/fs.c:220 (discriminator 1)
		/* 路径中出现1个或多个连续的字符'/',将这些'/'跳过,如"///a/b" */
		while(*(++pathname) == '/');
c0007112:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0007116:	8b 45 08             	mov    0x8(%ebp),%eax
c0007119:	0f b6 00             	movzbl (%eax),%eax
c000711c:	3c 2f                	cmp    $0x2f,%al
c000711e:	74 f2                	je     c0007112 <path_parse+0xd>
/work/x86_os_my/fs/fs.c:224
	}

	/* 开始一般的路径解析 */
	while (*pathname != '/' && *pathname != 0) {
c0007120:	eb 17                	jmp    c0007139 <path_parse+0x34>
/work/x86_os_my/fs/fs.c:225
		*name_store++ = *pathname++;
c0007122:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007125:	8d 50 01             	lea    0x1(%eax),%edx
c0007128:	89 55 0c             	mov    %edx,0xc(%ebp)
c000712b:	8b 55 08             	mov    0x8(%ebp),%edx
c000712e:	8d 4a 01             	lea    0x1(%edx),%ecx
c0007131:	89 4d 08             	mov    %ecx,0x8(%ebp)
c0007134:	0f b6 12             	movzbl (%edx),%edx
c0007137:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/fs/fs.c:224
		/* 路径中出现1个或多个连续的字符'/',将这些'/'跳过,如"///a/b" */
		while(*(++pathname) == '/');
	}

	/* 开始一般的路径解析 */
	while (*pathname != '/' && *pathname != 0) {
c0007139:	8b 45 08             	mov    0x8(%ebp),%eax
c000713c:	0f b6 00             	movzbl (%eax),%eax
c000713f:	3c 2f                	cmp    $0x2f,%al
c0007141:	74 0a                	je     c000714d <path_parse+0x48>
/work/x86_os_my/fs/fs.c:224 (discriminator 1)
c0007143:	8b 45 08             	mov    0x8(%ebp),%eax
c0007146:	0f b6 00             	movzbl (%eax),%eax
c0007149:	84 c0                	test   %al,%al
c000714b:	75 d5                	jne    c0007122 <path_parse+0x1d>
/work/x86_os_my/fs/fs.c:228
		*name_store++ = *pathname++;
	}

	if (pathname[0] == 0) {   // 若路径字符串为空则返回NULL
c000714d:	8b 45 08             	mov    0x8(%ebp),%eax
c0007150:	0f b6 00             	movzbl (%eax),%eax
c0007153:	84 c0                	test   %al,%al
c0007155:	75 07                	jne    c000715e <path_parse+0x59>
/work/x86_os_my/fs/fs.c:229
		return NULL;
c0007157:	b8 00 00 00 00       	mov    $0x0,%eax
c000715c:	eb 03                	jmp    c0007161 <path_parse+0x5c>
/work/x86_os_my/fs/fs.c:231
	}
	return pathname;
c000715e:	8b 45 08             	mov    0x8(%ebp),%eax
/work/x86_os_my/fs/fs.c:232
}
c0007161:	5d                   	pop    %ebp
c0007162:	c3                   	ret    

c0007163 <path_depth_cnt>:
path_depth_cnt():
/work/x86_os_my/fs/fs.c:235

/* 返回路径深度,比如/a/b/c,深度为3 */
int32_t path_depth_cnt(char* pathname) {
c0007163:	55                   	push   %ebp
c0007164:	89 e5                	mov    %esp,%ebp
c0007166:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/fs/fs.c:236
	ASSERT(pathname != NULL);
c0007169:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c000716d:	75 1c                	jne    c000718b <path_depth_cnt+0x28>
/work/x86_os_my/fs/fs.c:236 (discriminator 1)
c000716f:	68 c2 cf 00 c0       	push   $0xc000cfc2
c0007174:	68 28 d6 00 c0       	push   $0xc000d628
c0007179:	68 ec 00 00 00       	push   $0xec
c000717e:	68 59 ce 00 c0       	push   $0xc000ce59
c0007183:	e8 99 b1 ff ff       	call   c0002321 <panic_spin>
c0007188:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:237
	char* p = pathname;
c000718b:	8b 45 08             	mov    0x8(%ebp),%eax
c000718e:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:239
	char name[MAX_FILE_NAME_LEN];	// 用于path_parse的参数做路径解析
	uint32_t depth = 0;
c0007191:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:242

	/* 解析路径,从中拆分出各级名称 */
	p = path_parse(p, name);
c0007198:	83 ec 08             	sub    $0x8,%esp
c000719b:	8d 45 e0             	lea    -0x20(%ebp),%eax
c000719e:	50                   	push   %eax
c000719f:	ff 75 f4             	pushl  -0xc(%ebp)
c00071a2:	e8 5e ff ff ff       	call   c0007105 <path_parse>
c00071a7:	83 c4 10             	add    $0x10,%esp
c00071aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:243
	while (name[0]) {
c00071ad:	eb 32                	jmp    c00071e1 <path_depth_cnt+0x7e>
/work/x86_os_my/fs/fs.c:244
		depth++;
c00071af:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:245
		memset(name, 0, MAX_FILE_NAME_LEN);
c00071b3:	83 ec 04             	sub    $0x4,%esp
c00071b6:	6a 10                	push   $0x10
c00071b8:	6a 00                	push   $0x0
c00071ba:	8d 45 e0             	lea    -0x20(%ebp),%eax
c00071bd:	50                   	push   %eax
c00071be:	e8 00 c6 ff ff       	call   c00037c3 <memset>
c00071c3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:246
		if (p) {	// 如果p不等于NULL,继续分析路径
c00071c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c00071ca:	74 15                	je     c00071e1 <path_depth_cnt+0x7e>
/work/x86_os_my/fs/fs.c:247
			p  = path_parse(p, name);
c00071cc:	83 ec 08             	sub    $0x8,%esp
c00071cf:	8d 45 e0             	lea    -0x20(%ebp),%eax
c00071d2:	50                   	push   %eax
c00071d3:	ff 75 f4             	pushl  -0xc(%ebp)
c00071d6:	e8 2a ff ff ff       	call   c0007105 <path_parse>
c00071db:	83 c4 10             	add    $0x10,%esp
c00071de:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:243
	char name[MAX_FILE_NAME_LEN];	// 用于path_parse的参数做路径解析
	uint32_t depth = 0;

	/* 解析路径,从中拆分出各级名称 */
	p = path_parse(p, name);
	while (name[0]) {
c00071e1:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c00071e5:	84 c0                	test   %al,%al
c00071e7:	75 c6                	jne    c00071af <path_depth_cnt+0x4c>
/work/x86_os_my/fs/fs.c:250
		memset(name, 0, MAX_FILE_NAME_LEN);
		if (p) {	// 如果p不等于NULL,继续分析路径
			p  = path_parse(p, name);
		}
	}
	return depth;
c00071e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
/work/x86_os_my/fs/fs.c:251
}
c00071ec:	c9                   	leave  
c00071ed:	c3                   	ret    

c00071ee <search_file>:
search_file():
/work/x86_os_my/fs/fs.c:260
 * 全局变量 struct dir root_dir 定义在 dir.c
 * 也支持 /./a 或者 /../b 会把.和..当做一个目录项继续往下层找
 * /a/b/c若c不存在，那么 searched_record.searched_path 是 /a/b/c
 * 注意下边三种return的地方，是三种情况！
 */
static int search_file(const char* pathname, struct path_search_record* searched_record) {
c00071ee:	55                   	push   %ebp
c00071ef:	89 e5                	mov    %esp,%ebp
c00071f1:	83 ec 48             	sub    $0x48,%esp
/work/x86_os_my/fs/fs.c:262
	/* 如果待查找的是根目录,为避免下面无用的查找,直接返回已知根目录信息 */
	if (!strcmp(pathname, "/") || !strcmp(pathname, "/.") || !strcmp(pathname, "/..")) {
c00071f4:	83 ec 08             	sub    $0x8,%esp
c00071f7:	68 d3 cf 00 c0       	push   $0xc000cfd3
c00071fc:	ff 75 08             	pushl  0x8(%ebp)
c00071ff:	e8 94 c7 ff ff       	call   c0003998 <strcmp>
c0007204:	83 c4 10             	add    $0x10,%esp
c0007207:	84 c0                	test   %al,%al
c0007209:	74 2e                	je     c0007239 <search_file+0x4b>
/work/x86_os_my/fs/fs.c:262 (discriminator 1)
c000720b:	83 ec 08             	sub    $0x8,%esp
c000720e:	68 d5 cf 00 c0       	push   $0xc000cfd5
c0007213:	ff 75 08             	pushl  0x8(%ebp)
c0007216:	e8 7d c7 ff ff       	call   c0003998 <strcmp>
c000721b:	83 c4 10             	add    $0x10,%esp
c000721e:	84 c0                	test   %al,%al
c0007220:	74 17                	je     c0007239 <search_file+0x4b>
/work/x86_os_my/fs/fs.c:262 (discriminator 2)
c0007222:	83 ec 08             	sub    $0x8,%esp
c0007225:	68 d8 cf 00 c0       	push   $0xc000cfd8
c000722a:	ff 75 08             	pushl  0x8(%ebp)
c000722d:	e8 66 c7 ff ff       	call   c0003998 <strcmp>
c0007232:	83 c4 10             	add    $0x10,%esp
c0007235:	84 c0                	test   %al,%al
c0007237:	75 2a                	jne    c0007263 <search_file+0x75>
/work/x86_os_my/fs/fs.c:263
		searched_record->parent_dir = &root_dir;	// 直接父目录
c0007239:	8b 45 0c             	mov    0xc(%ebp),%eax
c000723c:	c7 80 00 02 00 00 60 	movl   $0xc0012160,0x200(%eax)
c0007243:	21 01 c0 
/work/x86_os_my/fs/fs.c:264
		searched_record->file_type = FT_DIRECTORY;	// FT_UNKNOWN代表没找到，找到才有类型是文件或目录
c0007246:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007249:	c7 80 04 02 00 00 02 	movl   $0x2,0x204(%eax)
c0007250:	00 00 00 
/work/x86_os_my/fs/fs.c:265
		searched_record->searched_path[0] = 0;		// 搜索过的路径置空
c0007253:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007256:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/fs/fs.c:266
		return 0;
c0007259:	b8 00 00 00 00       	mov    $0x0,%eax
c000725e:	e9 08 02 00 00       	jmp    c000746b <search_file+0x27d>
/work/x86_os_my/fs/fs.c:269
	}

	uint32_t path_len = strlen(pathname);
c0007263:	83 ec 0c             	sub    $0xc,%esp
c0007266:	ff 75 08             	pushl  0x8(%ebp)
c0007269:	e8 df c6 ff ff       	call   c000394d <strlen>
c000726e:	83 c4 10             	add    $0x10,%esp
c0007271:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:271
	/* 保证pathname至少是这样的路径/x且小于最大长度 */
	ASSERT(pathname[0] == '/' && path_len > 1 && path_len < MAX_PATH_LEN);
c0007274:	8b 45 08             	mov    0x8(%ebp),%eax
c0007277:	0f b6 00             	movzbl (%eax),%eax
c000727a:	3c 2f                	cmp    $0x2f,%al
c000727c:	75 0f                	jne    c000728d <search_file+0x9f>
/work/x86_os_my/fs/fs.c:271 (discriminator 1)
c000727e:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
c0007282:	76 09                	jbe    c000728d <search_file+0x9f>
/work/x86_os_my/fs/fs.c:271 (discriminator 3)
c0007284:	81 7d e8 ff 01 00 00 	cmpl   $0x1ff,-0x18(%ebp)
c000728b:	76 1c                	jbe    c00072a9 <search_file+0xbb>
/work/x86_os_my/fs/fs.c:271 (discriminator 5)
c000728d:	68 dc cf 00 c0       	push   $0xc000cfdc
c0007292:	68 38 d6 00 c0       	push   $0xc000d638
c0007297:	68 0f 01 00 00       	push   $0x10f
c000729c:	68 59 ce 00 c0       	push   $0xc000ce59
c00072a1:	e8 7b b0 ff ff       	call   c0002321 <panic_spin>
c00072a6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:272
	char* sub_path = (char*)pathname;
c00072a9:	8b 45 08             	mov    0x8(%ebp),%eax
c00072ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:273
	struct dir* parent_dir = &root_dir;
c00072af:	c7 45 f0 60 21 01 c0 	movl   $0xc0012160,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:277
	struct dir_entry dir_e;

	/* 数组name每次的值分别是各级目录的名字："a","b","c" */
	char name[MAX_FILE_NAME_LEN] = {0};
c00072b6:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
c00072bd:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
c00072c4:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
c00072cb:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
/work/x86_os_my/fs/fs.c:279

	searched_record->parent_dir = parent_dir;	// 直接父目录
c00072d2:	8b 45 0c             	mov    0xc(%ebp),%eax
c00072d5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00072d8:	89 90 00 02 00 00    	mov    %edx,0x200(%eax)
/work/x86_os_my/fs/fs.c:280
	searched_record->file_type = FT_UNKNOWN;	// 初始值代表没找到，找到才有类型是文件或目录
c00072de:	8b 45 0c             	mov    0xc(%ebp),%eax
c00072e1:	c7 80 04 02 00 00 00 	movl   $0x0,0x204(%eax)
c00072e8:	00 00 00 
/work/x86_os_my/fs/fs.c:281
	uint32_t parent_inode_no = 0;  // 备份各层解析出来的路径，的父目录，的inode号
c00072eb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:283

	sub_path = path_parse(sub_path, name);
c00072f2:	83 ec 08             	sub    $0x8,%esp
c00072f5:	8d 45 c0             	lea    -0x40(%ebp),%eax
c00072f8:	50                   	push   %eax
c00072f9:	ff 75 f4             	pushl  -0xc(%ebp)
c00072fc:	e8 04 fe ff ff       	call   c0007105 <path_parse>
c0007301:	83 c4 10             	add    $0x10,%esp
c0007304:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:284
	while (name[0]) {	   // 若第一个字符就是结束符,结束循环
c0007307:	e9 0f 01 00 00       	jmp    c000741b <search_file+0x22d>
/work/x86_os_my/fs/fs.c:286
		/* 记录查找过的路径,但不能超过searched_path的长度512字节 */
		ASSERT(strlen(searched_record->searched_path) < 512);
c000730c:	8b 45 0c             	mov    0xc(%ebp),%eax
c000730f:	83 ec 0c             	sub    $0xc,%esp
c0007312:	50                   	push   %eax
c0007313:	e8 35 c6 ff ff       	call   c000394d <strlen>
c0007318:	83 c4 10             	add    $0x10,%esp
c000731b:	3d ff 01 00 00       	cmp    $0x1ff,%eax
c0007320:	76 1c                	jbe    c000733e <search_file+0x150>
/work/x86_os_my/fs/fs.c:286 (discriminator 1)
c0007322:	68 1c d0 00 c0       	push   $0xc000d01c
c0007327:	68 38 d6 00 c0       	push   $0xc000d638
c000732c:	68 1e 01 00 00       	push   $0x11e
c0007331:	68 59 ce 00 c0       	push   $0xc000ce59
c0007336:	e8 e6 af ff ff       	call   c0002321 <panic_spin>
c000733b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:289

		/* 追加到已存在的父目录 */
		strcat(searched_record->searched_path, "/");
c000733e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007341:	83 ec 08             	sub    $0x8,%esp
c0007344:	68 d3 cf 00 c0       	push   $0xc000cfd3
c0007349:	50                   	push   %eax
c000734a:	e8 78 c7 ff ff       	call   c0003ac7 <strcat>
c000734f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:290
		strcat(searched_record->searched_path, name);
c0007352:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007355:	83 ec 08             	sub    $0x8,%esp
c0007358:	8d 55 c0             	lea    -0x40(%ebp),%edx
c000735b:	52                   	push   %edx
c000735c:	50                   	push   %eax
c000735d:	e8 65 c7 ff ff       	call   c0003ac7 <strcat>
c0007362:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:293

		/* 在所给的目录中查找目录项，找到后将目录项填入dir_e */
		if (false != search_dir_entry(cur_part, parent_dir, name, &dir_e)) {
c0007365:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c000736a:	8d 55 d0             	lea    -0x30(%ebp),%edx
c000736d:	52                   	push   %edx
c000736e:	8d 55 c0             	lea    -0x40(%ebp),%edx
c0007371:	52                   	push   %edx
c0007372:	ff 75 f0             	pushl  -0x10(%ebp)
c0007375:	50                   	push   %eax
c0007376:	e8 70 30 00 00       	call   c000a3eb <search_dir_entry>
c000737b:	83 c4 10             	add    $0x10,%esp
c000737e:	85 c0                	test   %eax,%eax
c0007380:	0f 84 8e 00 00 00    	je     c0007414 <search_file+0x226>
/work/x86_os_my/fs/fs.c:294
			memset(name, 0, MAX_FILE_NAME_LEN);
c0007386:	83 ec 04             	sub    $0x4,%esp
c0007389:	6a 10                	push   $0x10
c000738b:	6a 00                	push   $0x0
c000738d:	8d 45 c0             	lea    -0x40(%ebp),%eax
c0007390:	50                   	push   %eax
c0007391:	e8 2d c4 ff ff       	call   c00037c3 <memset>
c0007396:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:296
			/* 若sub_path不等于NULL，也就是搜索未结束，继续拆分路径 */
			if (sub_path) {
c0007399:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c000739d:	74 15                	je     c00073b4 <search_file+0x1c6>
/work/x86_os_my/fs/fs.c:297
				sub_path = path_parse(sub_path, name);
c000739f:	83 ec 08             	sub    $0x8,%esp
c00073a2:	8d 45 c0             	lea    -0x40(%ebp),%eax
c00073a5:	50                   	push   %eax
c00073a6:	ff 75 f4             	pushl  -0xc(%ebp)
c00073a9:	e8 57 fd ff ff       	call   c0007105 <path_parse>
c00073ae:	83 c4 10             	add    $0x10,%esp
c00073b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:300
			}

			if (FT_DIRECTORY == dir_e.f_type) {			// 如果被打开的是目录
c00073b4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00073b7:	83 f8 02             	cmp    $0x2,%eax
c00073ba:	75 3e                	jne    c00073fa <search_file+0x20c>
/work/x86_os_my/fs/fs.c:301
				parent_inode_no = parent_dir->inode->i_no;
c00073bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00073bf:	8b 00                	mov    (%eax),%eax
c00073c1:	8b 00                	mov    (%eax),%eax
c00073c3:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:302
				dir_close(parent_dir);
c00073c6:	83 ec 0c             	sub    $0xc,%esp
c00073c9:	ff 75 f0             	pushl  -0x10(%ebp)
c00073cc:	e8 f2 31 00 00       	call   c000a5c3 <dir_close>
c00073d1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:304

				parent_dir = dir_open(cur_part, dir_e.i_no);
c00073d4:	8b 55 e0             	mov    -0x20(%ebp),%edx
c00073d7:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c00073dc:	83 ec 08             	sub    $0x8,%esp
c00073df:	52                   	push   %edx
c00073e0:	50                   	push   %eax
c00073e1:	e8 c5 2f 00 00       	call   c000a3ab <dir_open>
c00073e6:	83 c4 10             	add    $0x10,%esp
c00073e9:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:305
				searched_record->parent_dir = parent_dir;	// 更新直接父目录
c00073ec:	8b 45 0c             	mov    0xc(%ebp),%eax
c00073ef:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00073f2:	89 90 00 02 00 00    	mov    %edx,0x200(%eax)
/work/x86_os_my/fs/fs.c:306
				continue;
c00073f8:	eb 21                	jmp    c000741b <search_file+0x22d>
/work/x86_os_my/fs/fs.c:307
			} else if (FT_REGULAR == dir_e.f_type) {	// 若是普通文件
c00073fa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00073fd:	83 f8 01             	cmp    $0x1,%eax
c0007400:	75 19                	jne    c000741b <search_file+0x22d>
/work/x86_os_my/fs/fs.c:312
				/* 如果搜索路径为 /a/b 但是目录下只有文件a 此时也会返回文件a的inode号【中间某个目录不存在】
				 * 由主调函数根据 searched_record.searched_path 判断："提供的 pathname 是否正确，是否处理完了"
				 * 【情况1】
				 */
				searched_record->file_type = FT_REGULAR;
c0007402:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007405:	c7 80 04 02 00 00 01 	movl   $0x1,0x204(%eax)
c000740c:	00 00 00 
/work/x86_os_my/fs/fs.c:313
				return dir_e.i_no;
c000740f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0007412:	eb 57                	jmp    c000746b <search_file+0x27d>
/work/x86_os_my/fs/fs.c:321
			/* 找不到目录项时，要留着 parent_dir 不要关闭，
			 * 主调函数需要据此知道在哪个目录中创建文件，此时的 searched_record->parent_dir 指向父目录，主调函数负责关闭该目录
			 * 主调函数，创建新文件的话需要在 parent_dir 中创建
			 * 【情况2】
			 */
			return -1;
c0007414:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007419:	eb 50                	jmp    c000746b <search_file+0x27d>
/work/x86_os_my/fs/fs.c:284
	searched_record->parent_dir = parent_dir;	// 直接父目录
	searched_record->file_type = FT_UNKNOWN;	// 初始值代表没找到，找到才有类型是文件或目录
	uint32_t parent_inode_no = 0;  // 备份各层解析出来的路径，的父目录，的inode号

	sub_path = path_parse(sub_path, name);
	while (name[0]) {	   // 若第一个字符就是结束符,结束循环
c000741b:	0f b6 45 c0          	movzbl -0x40(%ebp),%eax
c000741f:	84 c0                	test   %al,%al
c0007421:	0f 85 e5 fe ff ff    	jne    c000730c <search_file+0x11e>
/work/x86_os_my/fs/fs.c:332
	 * 此时 searched_record-> parent_dir 是路径 pathname 中的最后一级目录 c，并不是倒数第二级的父目录 b
	 * 要保证，无论搜索目标是普通文件，还是目录，searched_record->parent_dir 中记录的都应该是父目录！
	 * 因此要关闭目录c，重新打开目录b
	 * 【情况3】
	 */
	dir_close(searched_record->parent_dir);
c0007427:	8b 45 0c             	mov    0xc(%ebp),%eax
c000742a:	8b 80 00 02 00 00    	mov    0x200(%eax),%eax
c0007430:	83 ec 0c             	sub    $0xc,%esp
c0007433:	50                   	push   %eax
c0007434:	e8 8a 31 00 00       	call   c000a5c3 <dir_close>
c0007439:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:333
	searched_record->parent_dir = dir_open(cur_part, parent_inode_no);
c000743c:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0007441:	83 ec 08             	sub    $0x8,%esp
c0007444:	ff 75 ec             	pushl  -0x14(%ebp)
c0007447:	50                   	push   %eax
c0007448:	e8 5e 2f 00 00       	call   c000a3ab <dir_open>
c000744d:	83 c4 10             	add    $0x10,%esp
c0007450:	89 c2                	mov    %eax,%edx
c0007452:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007455:	89 90 00 02 00 00    	mov    %edx,0x200(%eax)
/work/x86_os_my/fs/fs.c:334
	searched_record->file_type = FT_DIRECTORY;
c000745b:	8b 45 0c             	mov    0xc(%ebp),%eax
c000745e:	c7 80 04 02 00 00 02 	movl   $0x2,0x204(%eax)
c0007465:	00 00 00 
/work/x86_os_my/fs/fs.c:335
	return dir_e.i_no;	//目录c的inode号
c0007468:	8b 45 e0             	mov    -0x20(%ebp),%eax
/work/x86_os_my/fs/fs.c:336 (discriminator 1)
}
c000746b:	c9                   	leave  
c000746c:	c3                   	ret    

c000746d <sys_open>:
sys_open():
/work/x86_os_my/fs/fs.c:343
/* 打开或创建文件成功后,返回文件描述符,否则返回-1
 * 对应 file.c 中的 file_create
 *
 * open(const char * pathname, (O_CREAT|O_WRONLY|O_TRUNC));
 */
int32_t sys_open(const char* pathname, uint8_t flags) {
c000746d:	55                   	push   %ebp
c000746e:	89 e5                	mov    %esp,%ebp
c0007470:	53                   	push   %ebx
c0007471:	81 ec 34 02 00 00    	sub    $0x234,%esp
c0007477:	8b 45 0c             	mov    0xc(%ebp),%eax
c000747a:	88 85 d4 fd ff ff    	mov    %al,-0x22c(%ebp)
/work/x86_os_my/fs/fs.c:345
	/* 对目录要用dir_open,这里只有open文件 */
	if (pathname[strlen(pathname) - 1] == '/') {
c0007480:	83 ec 0c             	sub    $0xc,%esp
c0007483:	ff 75 08             	pushl  0x8(%ebp)
c0007486:	e8 c2 c4 ff ff       	call   c000394d <strlen>
c000748b:	83 c4 10             	add    $0x10,%esp
c000748e:	8d 50 ff             	lea    -0x1(%eax),%edx
c0007491:	8b 45 08             	mov    0x8(%ebp),%eax
c0007494:	01 d0                	add    %edx,%eax
c0007496:	0f b6 00             	movzbl (%eax),%eax
c0007499:	3c 2f                	cmp    $0x2f,%al
c000749b:	75 1d                	jne    c00074ba <sys_open+0x4d>
/work/x86_os_my/fs/fs.c:346
		printk("can`t open a directory %s\n", pathname);
c000749d:	83 ec 08             	sub    $0x8,%esp
c00074a0:	ff 75 08             	pushl  0x8(%ebp)
c00074a3:	68 49 d0 00 c0       	push   $0xc000d049
c00074a8:	e8 a5 f5 ff ff       	call   c0006a52 <printk>
c00074ad:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:347
		return -1;
c00074b0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00074b5:	e9 10 02 00 00       	jmp    c00076ca <sys_open+0x25d>
/work/x86_os_my/fs/fs.c:349
	}
	ASSERT(flags <= 7);
c00074ba:	80 bd d4 fd ff ff 07 	cmpb   $0x7,-0x22c(%ebp)
c00074c1:	76 1c                	jbe    c00074df <sys_open+0x72>
/work/x86_os_my/fs/fs.c:349 (discriminator 1)
c00074c3:	68 64 d0 00 c0       	push   $0xc000d064
c00074c8:	68 44 d6 00 c0       	push   $0xc000d644
c00074cd:	68 5d 01 00 00       	push   $0x15d
c00074d2:	68 59 ce 00 c0       	push   $0xc000ce59
c00074d7:	e8 45 ae ff ff       	call   c0002321 <panic_spin>
c00074dc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:350
	int32_t fd = -1;	// 默认为找不到
c00074df:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:353

	struct path_search_record searched_record;
	memset(&searched_record, 0, sizeof(struct path_search_record));
c00074e6:	83 ec 04             	sub    $0x4,%esp
c00074e9:	68 08 02 00 00       	push   $0x208
c00074ee:	6a 00                	push   $0x0
c00074f0:	8d 85 dc fd ff ff    	lea    -0x224(%ebp),%eax
c00074f6:	50                   	push   %eax
c00074f7:	e8 c7 c2 ff ff       	call   c00037c3 <memset>
c00074fc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:356

	/* 记录目录深度.帮助判断中间某个目录不存在的情况 */
	uint32_t pathname_depth = path_depth_cnt((char*)pathname);
c00074ff:	83 ec 0c             	sub    $0xc,%esp
c0007502:	ff 75 08             	pushl  0x8(%ebp)
c0007505:	e8 59 fc ff ff       	call   c0007163 <path_depth_cnt>
c000750a:	83 c4 10             	add    $0x10,%esp
c000750d:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:359

	/* 先检查文件是否存在 */
	int inode_no = search_file(pathname, &searched_record);
c0007510:	83 ec 08             	sub    $0x8,%esp
c0007513:	8d 85 dc fd ff ff    	lea    -0x224(%ebp),%eax
c0007519:	50                   	push   %eax
c000751a:	ff 75 08             	pushl  0x8(%ebp)
c000751d:	e8 cc fc ff ff       	call   c00071ee <search_file>
c0007522:	83 c4 10             	add    $0x10,%esp
c0007525:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:360
	bool found = (inode_no != -1 ? true : false);
c0007528:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%ebp)
c000752c:	0f 95 c0             	setne  %al
c000752f:	0f b6 c0             	movzbl %al,%eax
c0007532:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:362

	if (searched_record.file_type == FT_DIRECTORY) {
c0007535:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0007538:	83 f8 02             	cmp    $0x2,%eax
c000753b:	75 29                	jne    c0007566 <sys_open+0xf9>
/work/x86_os_my/fs/fs.c:363
		printk("can`t open a direcotry with open(), use opendir() to instead\n");
c000753d:	83 ec 0c             	sub    $0xc,%esp
c0007540:	68 70 d0 00 c0       	push   $0xc000d070
c0007545:	e8 08 f5 ff ff       	call   c0006a52 <printk>
c000754a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:364
		dir_close(searched_record.parent_dir);	//主调函数负责关闭该目录
c000754d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0007550:	83 ec 0c             	sub    $0xc,%esp
c0007553:	50                   	push   %eax
c0007554:	e8 6a 30 00 00       	call   c000a5c3 <dir_close>
c0007559:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:365
		return -1;
c000755c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007561:	e9 64 01 00 00       	jmp    c00076ca <sys_open+0x25d>
/work/x86_os_my/fs/fs.c:368
	}

	uint32_t path_searched_depth = path_depth_cnt(searched_record.searched_path);
c0007566:	83 ec 0c             	sub    $0xc,%esp
c0007569:	8d 85 dc fd ff ff    	lea    -0x224(%ebp),%eax
c000756f:	50                   	push   %eax
c0007570:	e8 ee fb ff ff       	call   c0007163 <path_depth_cnt>
c0007575:	83 c4 10             	add    $0x10,%esp
c0007578:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/fs.c:372

	/* 先判断是否把pathname的各层目录都访问到了 */
	// 【search_file情况1】说明并没有访问到全部的路径,某个中间目录是不存在的【是一个同名的普通文件】
	if (pathname_depth != path_searched_depth) {
c000757b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000757e:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c0007581:	74 33                	je     c00075b6 <sys_open+0x149>
/work/x86_os_my/fs/fs.c:373
		printk("cannot access %s: Not a directory, subpath %s is`t exist\n",
c0007583:	83 ec 04             	sub    $0x4,%esp
c0007586:	8d 85 dc fd ff ff    	lea    -0x224(%ebp),%eax
c000758c:	50                   	push   %eax
c000758d:	ff 75 08             	pushl  0x8(%ebp)
c0007590:	68 b0 d0 00 c0       	push   $0xc000d0b0
c0007595:	e8 b8 f4 ff ff       	call   c0006a52 <printk>
c000759a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:375
			pathname, searched_record.searched_path);
		dir_close(searched_record.parent_dir);
c000759d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c00075a0:	83 ec 0c             	sub    $0xc,%esp
c00075a3:	50                   	push   %eax
c00075a4:	e8 1a 30 00 00       	call   c000a5c3 <dir_close>
c00075a9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:376
		return -1;
c00075ac:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00075b1:	e9 14 01 00 00       	jmp    c00076ca <sys_open+0x25d>
/work/x86_os_my/fs/fs.c:381
	}

	// 【search_file情况2】若是在最后一个路径上没找到
	// 并且此时也不是要创建文件,直接返回-1 */
	if (!found && !(flags & O_CREAT)) {
c00075b6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c00075ba:	75 56                	jne    c0007612 <sys_open+0x1a5>
/work/x86_os_my/fs/fs.c:381 (discriminator 1)
c00075bc:	0f b6 85 d4 fd ff ff 	movzbl -0x22c(%ebp),%eax
c00075c3:	83 e0 04             	and    $0x4,%eax
c00075c6:	85 c0                	test   %eax,%eax
c00075c8:	75 48                	jne    c0007612 <sys_open+0x1a5>
/work/x86_os_my/fs/fs.c:383
		printk("in path %s, file %s is`t exist\n",
			searched_record.searched_path, (strrchr(searched_record.searched_path, '/') + 1));
c00075ca:	83 ec 08             	sub    $0x8,%esp
c00075cd:	6a 2f                	push   $0x2f
c00075cf:	8d 85 dc fd ff ff    	lea    -0x224(%ebp),%eax
c00075d5:	50                   	push   %eax
c00075d6:	e8 8e c4 ff ff       	call   c0003a69 <strrchr>
c00075db:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:382
	}

	// 【search_file情况2】若是在最后一个路径上没找到
	// 并且此时也不是要创建文件,直接返回-1 */
	if (!found && !(flags & O_CREAT)) {
		printk("in path %s, file %s is`t exist\n",
c00075de:	83 c0 01             	add    $0x1,%eax
c00075e1:	83 ec 04             	sub    $0x4,%esp
c00075e4:	50                   	push   %eax
c00075e5:	8d 85 dc fd ff ff    	lea    -0x224(%ebp),%eax
c00075eb:	50                   	push   %eax
c00075ec:	68 ec d0 00 c0       	push   $0xc000d0ec
c00075f1:	e8 5c f4 ff ff       	call   c0006a52 <printk>
c00075f6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:384
			searched_record.searched_path, (strrchr(searched_record.searched_path, '/') + 1));
		dir_close(searched_record.parent_dir);
c00075f9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c00075fc:	83 ec 0c             	sub    $0xc,%esp
c00075ff:	50                   	push   %eax
c0007600:	e8 be 2f 00 00       	call   c000a5c3 <dir_close>
c0007605:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:385
		return -1;
c0007608:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000760d:	e9 b8 00 00 00       	jmp    c00076ca <sys_open+0x25d>
/work/x86_os_my/fs/fs.c:386
	} else if (found && flags & O_CREAT) {	// 若要创建的文件已存在，相同目录下不可以有同名文件，返回-1
c0007612:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0007616:	74 37                	je     c000764f <sys_open+0x1e2>
/work/x86_os_my/fs/fs.c:386 (discriminator 1)
c0007618:	0f b6 85 d4 fd ff ff 	movzbl -0x22c(%ebp),%eax
c000761f:	83 e0 04             	and    $0x4,%eax
c0007622:	85 c0                	test   %eax,%eax
c0007624:	74 29                	je     c000764f <sys_open+0x1e2>
/work/x86_os_my/fs/fs.c:387
		printk("%s has already exist!\n", pathname);
c0007626:	83 ec 08             	sub    $0x8,%esp
c0007629:	ff 75 08             	pushl  0x8(%ebp)
c000762c:	68 0c d1 00 c0       	push   $0xc000d10c
c0007631:	e8 1c f4 ff ff       	call   c0006a52 <printk>
c0007636:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:388
		dir_close(searched_record.parent_dir);
c0007639:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000763c:	83 ec 0c             	sub    $0xc,%esp
c000763f:	50                   	push   %eax
c0007640:	e8 7e 2f 00 00       	call   c000a5c3 <dir_close>
c0007645:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:389
		return -1;
c0007648:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000764d:	eb 7b                	jmp    c00076ca <sys_open+0x25d>
/work/x86_os_my/fs/fs.c:392
	}

	switch (flags & O_CREAT) {	// sys_open("xxx", O_CREAT|O_XXX)
c000764f:	0f b6 85 d4 fd ff ff 	movzbl -0x22c(%ebp),%eax
c0007656:	83 e0 04             	and    $0x4,%eax
c0007659:	83 f8 04             	cmp    $0x4,%eax
c000765c:	75 4f                	jne    c00076ad <sys_open+0x240>
/work/x86_os_my/fs/fs.c:394
		case O_CREAT:
		printk("creating file\n");
c000765e:	83 ec 0c             	sub    $0xc,%esp
c0007661:	68 23 d1 00 c0       	push   $0xc000d123
c0007666:	e8 e7 f3 ff ff       	call   c0006a52 <printk>
c000766b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:396
		// 【search_file情况3】主调函数用到此目录，在该目录下创建文件
		fd = file_create(searched_record.parent_dir, (strrchr(pathname, '/') + 1), flags);
c000766e:	0f b6 9d d4 fd ff ff 	movzbl -0x22c(%ebp),%ebx
c0007675:	83 ec 08             	sub    $0x8,%esp
c0007678:	6a 2f                	push   $0x2f
c000767a:	ff 75 08             	pushl  0x8(%ebp)
c000767d:	e8 e7 c3 ff ff       	call   c0003a69 <strrchr>
c0007682:	83 c4 10             	add    $0x10,%esp
c0007685:	8d 50 01             	lea    0x1(%eax),%edx
c0007688:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000768b:	83 ec 04             	sub    $0x4,%esp
c000768e:	53                   	push   %ebx
c000768f:	52                   	push   %edx
c0007690:	50                   	push   %eax
c0007691:	e8 8a 1d 00 00       	call   c0009420 <file_create>
c0007696:	83 c4 10             	add    $0x10,%esp
c0007699:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:397
		dir_close(searched_record.parent_dir);
c000769c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000769f:	83 ec 0c             	sub    $0xc,%esp
c00076a2:	50                   	push   %eax
c00076a3:	e8 1b 2f 00 00       	call   c000a5c3 <dir_close>
c00076a8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:398
		break;
c00076ab:	eb 1a                	jmp    c00076c7 <sys_open+0x25a>
/work/x86_os_my/fs/fs.c:402

		default:
		/* 其余情况均为打开已存在文件: O_RDONLY,O_WRONLY,O_RDWR */
		fd = file_open(inode_no, flags);
c00076ad:	0f b6 95 d4 fd ff ff 	movzbl -0x22c(%ebp),%edx
c00076b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00076b7:	83 ec 08             	sub    $0x8,%esp
c00076ba:	52                   	push   %edx
c00076bb:	50                   	push   %eax
c00076bc:	e8 21 20 00 00       	call   c00096e2 <file_open>
c00076c1:	83 c4 10             	add    $0x10,%esp
c00076c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:407
	}

	/* 此fd是指任务pcb->fd_table数组中的元素下标,
	 * 并不是指全局file_table中的下标 */
	return fd;
c00076c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:408 (discriminator 1)
}
c00076ca:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c00076cd:	c9                   	leave  
c00076ce:	c3                   	ret    

c00076cf <fd_local2global>:
fd_local2global():
/work/x86_os_my/fs/fs.c:411

/* 将文件描述符转化为文件表的下标 */
static uint32_t fd_local2global(uint32_t local_fd) {
c00076cf:	55                   	push   %ebp
c00076d0:	89 e5                	mov    %esp,%ebp
c00076d2:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/fs.c:412
	struct task_struct* cur = running_thread();
c00076d5:	e8 d0 c4 ff ff       	call   c0003baa <running_thread>
c00076da:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:413
	int32_t global_fd = cur->fd_table[local_fd];
c00076dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00076e0:	8b 55 08             	mov    0x8(%ebp),%edx
c00076e3:	83 c2 08             	add    $0x8,%edx
c00076e6:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
c00076ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:414
	ASSERT(global_fd >= 0 && global_fd < MAX_FILE_OPEN);
c00076ed:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c00076f1:	78 06                	js     c00076f9 <fd_local2global+0x2a>
/work/x86_os_my/fs/fs.c:414 (discriminator 1)
c00076f3:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c00076f7:	7e 1c                	jle    c0007715 <fd_local2global+0x46>
/work/x86_os_my/fs/fs.c:414 (discriminator 3)
c00076f9:	68 34 d1 00 c0       	push   $0xc000d134
c00076fe:	68 50 d6 00 c0       	push   $0xc000d650
c0007703:	68 9e 01 00 00       	push   $0x19e
c0007708:	68 59 ce 00 c0       	push   $0xc000ce59
c000770d:	e8 0f ac ff ff       	call   c0002321 <panic_spin>
c0007712:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:415
	return (uint32_t)global_fd;
c0007715:	8b 45 f0             	mov    -0x10(%ebp),%eax
/work/x86_os_my/fs/fs.c:416
}
c0007718:	c9                   	leave  
c0007719:	c3                   	ret    

c000771a <sys_close>:
sys_close():
/work/x86_os_my/fs/fs.c:419

/* 关闭文件描述符fd指向的文件,成功返回0,否则返回-1 */
int32_t sys_close(int32_t fd) {
c000771a:	55                   	push   %ebp
c000771b:	89 e5                	mov    %esp,%ebp
c000771d:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/fs.c:420
	int32_t ret = -1;   // 返回值默认为-1,即失败
c0007720:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:421
	if (fd > 2) {
c0007727:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c000772b:	7e 47                	jle    c0007774 <sys_close+0x5a>
/work/x86_os_my/fs/fs.c:422
		uint32_t _fd = fd_local2global(fd);
c000772d:	8b 45 08             	mov    0x8(%ebp),%eax
c0007730:	83 ec 0c             	sub    $0xc,%esp
c0007733:	50                   	push   %eax
c0007734:	e8 96 ff ff ff       	call   c00076cf <fd_local2global>
c0007739:	83 c4 10             	add    $0x10,%esp
c000773c:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:423
		ret = file_close(&file_table[_fd]);
c000773f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0007742:	89 d0                	mov    %edx,%eax
c0007744:	01 c0                	add    %eax,%eax
c0007746:	01 d0                	add    %edx,%eax
c0007748:	c1 e0 02             	shl    $0x2,%eax
c000774b:	05 e0 1f 01 c0       	add    $0xc0011fe0,%eax
c0007750:	83 ec 0c             	sub    $0xc,%esp
c0007753:	50                   	push   %eax
c0007754:	e8 a2 20 00 00       	call   c00097fb <file_close>
c0007759:	83 c4 10             	add    $0x10,%esp
c000775c:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:424
		running_thread()->fd_table[fd] = -1; // 使该文件描述符位可用
c000775f:	e8 46 c4 ff ff       	call   c0003baa <running_thread>
c0007764:	89 c2                	mov    %eax,%edx
c0007766:	8b 45 08             	mov    0x8(%ebp),%eax
c0007769:	83 c0 08             	add    $0x8,%eax
c000776c:	c7 44 82 04 ff ff ff 	movl   $0xffffffff,0x4(%edx,%eax,4)
c0007773:	ff 
/work/x86_os_my/fs/fs.c:426
	}
	return ret;
c0007774:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:427
}
c0007777:	c9                   	leave  
c0007778:	c3                   	ret    

c0007779 <sys_write>:
sys_write():
/work/x86_os_my/fs/fs.c:430

/* 将buf中连续count个字节写入文件描述符fd,成功则返回写入的字节数,失败返回-1 */
int32_t sys_write(int32_t fd, const void* buf, uint32_t count) {
c0007779:	55                   	push   %ebp
c000777a:	89 e5                	mov    %esp,%ebp
c000777c:	57                   	push   %edi
c000777d:	81 ec 14 04 00 00    	sub    $0x414,%esp
/work/x86_os_my/fs/fs.c:431
   if (fd < 0) {
c0007783:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0007787:	79 1a                	jns    c00077a3 <sys_write+0x2a>
/work/x86_os_my/fs/fs.c:432
      printk("sys_write: fd error\n");
c0007789:	83 ec 0c             	sub    $0xc,%esp
c000778c:	68 60 d1 00 c0       	push   $0xc000d160
c0007791:	e8 bc f2 ff ff       	call   c0006a52 <printk>
c0007796:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:433
      return -1;
c0007799:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000779e:	e9 ba 00 00 00       	jmp    c000785d <sys_write+0xe4>
/work/x86_os_my/fs/fs.c:435
   }
   if (fd == stdout_no) {
c00077a3:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c00077a7:	75 43                	jne    c00077ec <sys_write+0x73>
/work/x86_os_my/fs/fs.c:436
      char tmp_buf[1024] = {0};
c00077a9:	8d 95 ec fb ff ff    	lea    -0x414(%ebp),%edx
c00077af:	b8 00 00 00 00       	mov    $0x0,%eax
c00077b4:	b9 00 01 00 00       	mov    $0x100,%ecx
c00077b9:	89 d7                	mov    %edx,%edi
c00077bb:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/fs/fs.c:437
      memcpy(tmp_buf, buf, count);
c00077bd:	83 ec 04             	sub    $0x4,%esp
c00077c0:	ff 75 10             	pushl  0x10(%ebp)
c00077c3:	ff 75 0c             	pushl  0xc(%ebp)
c00077c6:	8d 85 ec fb ff ff    	lea    -0x414(%ebp),%eax
c00077cc:	50                   	push   %eax
c00077cd:	e8 43 c0 ff ff       	call   c0003815 <memcpy>
c00077d2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:438
      console_put_str(tmp_buf);
c00077d5:	83 ec 0c             	sub    $0xc,%esp
c00077d8:	8d 85 ec fb ff ff    	lea    -0x414(%ebp),%eax
c00077de:	50                   	push   %eax
c00077df:	e8 2c d0 ff ff       	call   c0004810 <console_put_str>
c00077e4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:439
      return count;
c00077e7:	8b 45 10             	mov    0x10(%ebp),%eax
c00077ea:	eb 71                	jmp    c000785d <sys_write+0xe4>
/work/x86_os_my/fs/fs.c:441
   }
   uint32_t _fd = fd_local2global(fd);
c00077ec:	8b 45 08             	mov    0x8(%ebp),%eax
c00077ef:	83 ec 0c             	sub    $0xc,%esp
c00077f2:	50                   	push   %eax
c00077f3:	e8 d7 fe ff ff       	call   c00076cf <fd_local2global>
c00077f8:	83 c4 10             	add    $0x10,%esp
c00077fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:442
   struct file* wr_file = &file_table[_fd];
c00077fe:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0007801:	89 d0                	mov    %edx,%eax
c0007803:	01 c0                	add    %eax,%eax
c0007805:	01 d0                	add    %edx,%eax
c0007807:	c1 e0 02             	shl    $0x2,%eax
c000780a:	05 e0 1f 01 c0       	add    $0xc0011fe0,%eax
c000780f:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:443
   if (wr_file->fd_flag & O_WRONLY || wr_file->fd_flag & O_RDWR) {
c0007812:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0007815:	8b 40 04             	mov    0x4(%eax),%eax
c0007818:	83 e0 01             	and    $0x1,%eax
c000781b:	85 c0                	test   %eax,%eax
c000781d:	75 0d                	jne    c000782c <sys_write+0xb3>
/work/x86_os_my/fs/fs.c:443 (discriminator 1)
c000781f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0007822:	8b 40 04             	mov    0x4(%eax),%eax
c0007825:	83 e0 02             	and    $0x2,%eax
c0007828:	85 c0                	test   %eax,%eax
c000782a:	74 1c                	je     c0007848 <sys_write+0xcf>
/work/x86_os_my/fs/fs.c:444
      uint32_t bytes_written  = file_write(wr_file, buf, count);
c000782c:	83 ec 04             	sub    $0x4,%esp
c000782f:	ff 75 10             	pushl  0x10(%ebp)
c0007832:	ff 75 0c             	pushl  0xc(%ebp)
c0007835:	ff 75 f0             	pushl  -0x10(%ebp)
c0007838:	e8 01 20 00 00       	call   c000983e <file_write>
c000783d:	83 c4 10             	add    $0x10,%esp
c0007840:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:445
      return bytes_written;
c0007843:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0007846:	eb 15                	jmp    c000785d <sys_write+0xe4>
/work/x86_os_my/fs/fs.c:447
   } else {
      console_put_str("sys_write: not allowed to write file without flag O_RDWR or O_WRONLY\n");
c0007848:	83 ec 0c             	sub    $0xc,%esp
c000784b:	68 78 d1 00 c0       	push   $0xc000d178
c0007850:	e8 bb cf ff ff       	call   c0004810 <console_put_str>
c0007855:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:448
      return -1;
c0007858:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
/work/x86_os_my/fs/fs.c:450 (discriminator 1)
   }
}
c000785d:	8b 7d fc             	mov    -0x4(%ebp),%edi
c0007860:	c9                   	leave  
c0007861:	c3                   	ret    

c0007862 <sys_read>:
sys_read():
/work/x86_os_my/fs/fs.c:453

/* 从文件描述符fd指向的文件中读取count个字节到buf,若成功则返回读出的字节数,到文件尾则返回-1 */
int32_t sys_read(int32_t fd, void* buf, uint32_t count) {
c0007862:	55                   	push   %ebp
c0007863:	89 e5                	mov    %esp,%ebp
c0007865:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/fs.c:454
	ASSERT(buf != NULL);
c0007868:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c000786c:	75 1c                	jne    c000788a <sys_read+0x28>
/work/x86_os_my/fs/fs.c:454 (discriminator 1)
c000786e:	68 be d1 00 c0       	push   $0xc000d1be
c0007873:	68 60 d6 00 c0       	push   $0xc000d660
c0007878:	68 c6 01 00 00       	push   $0x1c6
c000787d:	68 59 ce 00 c0       	push   $0xc000ce59
c0007882:	e8 9a aa ff ff       	call   c0002321 <panic_spin>
c0007887:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:455
	int32_t ret = -1;
c000788a:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:456
	if (fd < 0 || fd == stdout_no || fd == stderr_no) {
c0007891:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0007895:	78 0c                	js     c00078a3 <sys_read+0x41>
/work/x86_os_my/fs/fs.c:456 (discriminator 1)
c0007897:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c000789b:	74 06                	je     c00078a3 <sys_read+0x41>
/work/x86_os_my/fs/fs.c:456 (discriminator 2)
c000789d:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c00078a1:	75 15                	jne    c00078b8 <sys_read+0x56>
/work/x86_os_my/fs/fs.c:457
		printk("sys_read: fd error\n");
c00078a3:	83 ec 0c             	sub    $0xc,%esp
c00078a6:	68 ca d1 00 c0       	push   $0xc000d1ca
c00078ab:	e8 a2 f1 ff ff       	call   c0006a52 <printk>
c00078b0:	83 c4 10             	add    $0x10,%esp
c00078b3:	e9 89 00 00 00       	jmp    c0007941 <sys_read+0xdf>
/work/x86_os_my/fs/fs.c:458
	} else if (fd == stdin_no) {
c00078b8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00078bc:	75 4b                	jne    c0007909 <sys_read+0xa7>
/work/x86_os_my/fs/fs.c:459
		char* buffer = buf;
c00078be:	8b 45 0c             	mov    0xc(%ebp),%eax
c00078c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:460
		uint32_t bytes_read = 0;
c00078c4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:461
		while (bytes_read < count) {
c00078cb:	eb 1f                	jmp    c00078ec <sys_read+0x8a>
/work/x86_os_my/fs/fs.c:462
			*buffer = ioq_getchar(&kbd_buf);
c00078cd:	83 ec 0c             	sub    $0xc,%esp
c00078d0:	68 e0 11 01 c0       	push   $0xc00111e0
c00078d5:	e8 2d d7 ff ff       	call   c0005007 <ioq_getchar>
c00078da:	83 c4 10             	add    $0x10,%esp
c00078dd:	89 c2                	mov    %eax,%edx
c00078df:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00078e2:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/fs/fs.c:463
			bytes_read++;
c00078e4:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:464
			buffer++;
c00078e8:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:461
	if (fd < 0 || fd == stdout_no || fd == stderr_no) {
		printk("sys_read: fd error\n");
	} else if (fd == stdin_no) {
		char* buffer = buf;
		uint32_t bytes_read = 0;
		while (bytes_read < count) {
c00078ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00078ef:	3b 45 10             	cmp    0x10(%ebp),%eax
c00078f2:	72 d9                	jb     c00078cd <sys_read+0x6b>
/work/x86_os_my/fs/fs.c:466
			*buffer = ioq_getchar(&kbd_buf);
			bytes_read++;
			buffer++;
		}
		ret = (bytes_read == 0 ? -1 : (int32_t)bytes_read);
c00078f4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c00078f8:	74 05                	je     c00078ff <sys_read+0x9d>
/work/x86_os_my/fs/fs.c:466 (discriminator 1)
c00078fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00078fd:	eb 05                	jmp    c0007904 <sys_read+0xa2>
/work/x86_os_my/fs/fs.c:466 (discriminator 2)
c00078ff:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
/work/x86_os_my/fs/fs.c:466 (discriminator 4)
c0007904:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0007907:	eb 38                	jmp    c0007941 <sys_read+0xdf>
/work/x86_os_my/fs/fs.c:468
	} else {
		uint32_t _fd = fd_local2global(fd);
c0007909:	8b 45 08             	mov    0x8(%ebp),%eax
c000790c:	83 ec 0c             	sub    $0xc,%esp
c000790f:	50                   	push   %eax
c0007910:	e8 ba fd ff ff       	call   c00076cf <fd_local2global>
c0007915:	83 c4 10             	add    $0x10,%esp
c0007918:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:469
		ret = file_read(&file_table[_fd], buf, count);
c000791b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c000791e:	89 d0                	mov    %edx,%eax
c0007920:	01 c0                	add    %eax,%eax
c0007922:	01 d0                	add    %edx,%eax
c0007924:	c1 e0 02             	shl    $0x2,%eax
c0007927:	05 e0 1f 01 c0       	add    $0xc0011fe0,%eax
c000792c:	83 ec 04             	sub    $0x4,%esp
c000792f:	ff 75 10             	pushl  0x10(%ebp)
c0007932:	ff 75 0c             	pushl  0xc(%ebp)
c0007935:	50                   	push   %eax
c0007936:	e8 97 26 00 00       	call   c0009fd2 <file_read>
c000793b:	83 c4 10             	add    $0x10,%esp
c000793e:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:471
	}
	return ret;
c0007941:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:472
}
c0007944:	c9                   	leave  
c0007945:	c3                   	ret    

c0007946 <sys_lseek>:
sys_lseek():
/work/x86_os_my/fs/fs.c:476


/* 重置用于文件读写指针,成功时返回新的偏移量,出错时返回-1 */
int32_t sys_lseek(int32_t fd, int32_t offset, uint8_t whence) {
c0007946:	55                   	push   %ebp
c0007947:	89 e5                	mov    %esp,%ebp
c0007949:	83 ec 28             	sub    $0x28,%esp
c000794c:	8b 45 10             	mov    0x10(%ebp),%eax
c000794f:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/fs/fs.c:477
	if (fd < 0) {
c0007952:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0007956:	79 1a                	jns    c0007972 <sys_lseek+0x2c>
/work/x86_os_my/fs/fs.c:478
		printk("sys_lseek: fd error\n");
c0007958:	83 ec 0c             	sub    $0xc,%esp
c000795b:	68 de d1 00 c0       	push   $0xc000d1de
c0007960:	e8 ed f0 ff ff       	call   c0006a52 <printk>
c0007965:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:479
		return -1;
c0007968:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000796d:	e9 bd 00 00 00       	jmp    c0007a2f <sys_lseek+0xe9>
/work/x86_os_my/fs/fs.c:481
	}
	ASSERT(whence > 0 && whence < 4);
c0007972:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c0007976:	74 06                	je     c000797e <sys_lseek+0x38>
/work/x86_os_my/fs/fs.c:481 (discriminator 1)
c0007978:	80 7d e4 03          	cmpb   $0x3,-0x1c(%ebp)
c000797c:	76 1c                	jbe    c000799a <sys_lseek+0x54>
/work/x86_os_my/fs/fs.c:481 (discriminator 3)
c000797e:	68 f3 d1 00 c0       	push   $0xc000d1f3
c0007983:	68 6c d6 00 c0       	push   $0xc000d66c
c0007988:	68 e1 01 00 00       	push   $0x1e1
c000798d:	68 59 ce 00 c0       	push   $0xc000ce59
c0007992:	e8 8a a9 ff ff       	call   c0002321 <panic_spin>
c0007997:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:482
	uint32_t _fd = fd_local2global(fd);
c000799a:	8b 45 08             	mov    0x8(%ebp),%eax
c000799d:	83 ec 0c             	sub    $0xc,%esp
c00079a0:	50                   	push   %eax
c00079a1:	e8 29 fd ff ff       	call   c00076cf <fd_local2global>
c00079a6:	83 c4 10             	add    $0x10,%esp
c00079a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:483
	struct file* pf = &file_table[_fd];
c00079ac:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00079af:	89 d0                	mov    %edx,%eax
c00079b1:	01 c0                	add    %eax,%eax
c00079b3:	01 d0                	add    %edx,%eax
c00079b5:	c1 e0 02             	shl    $0x2,%eax
c00079b8:	05 e0 1f 01 c0       	add    $0xc0011fe0,%eax
c00079bd:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:484
	int32_t new_pos = 0;	//新的偏移量必须位于文件大小之内
c00079c0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:485
	int32_t file_size = (int32_t)pf->fd_inode->i_size;
c00079c7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00079ca:	8b 40 08             	mov    0x8(%eax),%eax
c00079cd:	8b 40 04             	mov    0x4(%eax),%eax
c00079d0:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:486
	switch (whence) {
c00079d3:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c00079d7:	83 f8 02             	cmp    $0x2,%eax
c00079da:	74 12                	je     c00079ee <sys_lseek+0xa8>
c00079dc:	83 f8 03             	cmp    $0x3,%eax
c00079df:	74 1e                	je     c00079ff <sys_lseek+0xb9>
c00079e1:	83 f8 01             	cmp    $0x1,%eax
c00079e4:	75 24                	jne    c0007a0a <sys_lseek+0xc4>
/work/x86_os_my/fs/fs.c:489
		/* SEEK_SET 新的读写位置是相对于文件开头再增加offset个位移量 */
		case SEEK_SET:
		new_pos = offset;
c00079e6:	8b 45 0c             	mov    0xc(%ebp),%eax
c00079e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:490
		break;
c00079ec:	eb 1c                	jmp    c0007a0a <sys_lseek+0xc4>
/work/x86_os_my/fs/fs.c:494

		/* SEEK_CUR 新的读写位置是相对于当前的位置增加offset个位移量 */
		case SEEK_CUR:	// offse可正可负
		new_pos = (int32_t)pf->fd_pos + offset;
c00079ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00079f1:	8b 00                	mov    (%eax),%eax
c00079f3:	89 c2                	mov    %eax,%edx
c00079f5:	8b 45 0c             	mov    0xc(%ebp),%eax
c00079f8:	01 d0                	add    %edx,%eax
c00079fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:495
		break;
c00079fd:	eb 0b                	jmp    c0007a0a <sys_lseek+0xc4>
/work/x86_os_my/fs/fs.c:499

		/* SEEK_END 新的读写位置是相对于文件尺寸再增加offset个位移量 */
		case SEEK_END:	// 此情况下,offset应该为负值
		new_pos = file_size + offset;
c00079ff:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0007a02:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007a05:	01 d0                	add    %edx,%eax
c0007a07:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:501
	}
	if (new_pos < 0 || new_pos > (file_size - 1)) {
c0007a0a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0007a0e:	78 0b                	js     c0007a1b <sys_lseek+0xd5>
/work/x86_os_my/fs/fs.c:501 (discriminator 1)
c0007a10:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0007a13:	83 e8 01             	sub    $0x1,%eax
c0007a16:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0007a19:	7d 07                	jge    c0007a22 <sys_lseek+0xdc>
/work/x86_os_my/fs/fs.c:502
		return -1;
c0007a1b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007a20:	eb 0d                	jmp    c0007a2f <sys_lseek+0xe9>
/work/x86_os_my/fs/fs.c:504
	}
	pf->fd_pos = new_pos;
c0007a22:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0007a25:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0007a28:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/fs/fs.c:505
	return pf->fd_pos;
c0007a2a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0007a2d:	8b 00                	mov    (%eax),%eax
/work/x86_os_my/fs/fs.c:506
}
c0007a2f:	c9                   	leave  
c0007a30:	c3                   	ret    

c0007a31 <sys_unlink>:
sys_unlink():
/work/x86_os_my/fs/fs.c:510

/* 删除文件(非目录),成功返回0,失败返回-1 */
// 全局变量 file_table 定义在 file.h
int32_t sys_unlink(const char* pathname) {
c0007a31:	55                   	push   %ebp
c0007a32:	89 e5                	mov    %esp,%ebp
c0007a34:	81 ec 28 02 00 00    	sub    $0x228,%esp
/work/x86_os_my/fs/fs.c:511
	ASSERT(strlen(pathname) < MAX_PATH_LEN);
c0007a3a:	83 ec 0c             	sub    $0xc,%esp
c0007a3d:	ff 75 08             	pushl  0x8(%ebp)
c0007a40:	e8 08 bf ff ff       	call   c000394d <strlen>
c0007a45:	83 c4 10             	add    $0x10,%esp
c0007a48:	3d ff 01 00 00       	cmp    $0x1ff,%eax
c0007a4d:	76 1c                	jbe    c0007a6b <sys_unlink+0x3a>
/work/x86_os_my/fs/fs.c:511 (discriminator 1)
c0007a4f:	68 0c d2 00 c0       	push   $0xc000d20c
c0007a54:	68 78 d6 00 c0       	push   $0xc000d678
c0007a59:	68 ff 01 00 00       	push   $0x1ff
c0007a5e:	68 59 ce 00 c0       	push   $0xc000ce59
c0007a63:	e8 b9 a8 ff ff       	call   c0002321 <panic_spin>
c0007a68:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:515

	/* 先检查待删除的文件是否存在 */
	struct path_search_record searched_record;
	memset(&searched_record, 0, sizeof(struct path_search_record));
c0007a6b:	83 ec 04             	sub    $0x4,%esp
c0007a6e:	68 08 02 00 00       	push   $0x208
c0007a73:	6a 00                	push   $0x0
c0007a75:	8d 85 e0 fd ff ff    	lea    -0x220(%ebp),%eax
c0007a7b:	50                   	push   %eax
c0007a7c:	e8 42 bd ff ff       	call   c00037c3 <memset>
c0007a81:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:516
	int inode_no = search_file(pathname, &searched_record);
c0007a84:	83 ec 08             	sub    $0x8,%esp
c0007a87:	8d 85 e0 fd ff ff    	lea    -0x220(%ebp),%eax
c0007a8d:	50                   	push   %eax
c0007a8e:	ff 75 08             	pushl  0x8(%ebp)
c0007a91:	e8 58 f7 ff ff       	call   c00071ee <search_file>
c0007a96:	83 c4 10             	add    $0x10,%esp
c0007a99:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:517
	ASSERT(inode_no != 0);
c0007a9c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0007aa0:	75 1c                	jne    c0007abe <sys_unlink+0x8d>
/work/x86_os_my/fs/fs.c:517 (discriminator 1)
c0007aa2:	68 2c d2 00 c0       	push   $0xc000d22c
c0007aa7:	68 78 d6 00 c0       	push   $0xc000d678
c0007aac:	68 05 02 00 00       	push   $0x205
c0007ab1:	68 59 ce 00 c0       	push   $0xc000ce59
c0007ab6:	e8 66 a8 ff ff       	call   c0002321 <panic_spin>
c0007abb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:518
	if (inode_no == -1) {
c0007abe:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c0007ac2:	75 2c                	jne    c0007af0 <sys_unlink+0xbf>
/work/x86_os_my/fs/fs.c:519
		printk("file %s not found!\n", pathname);
c0007ac4:	83 ec 08             	sub    $0x8,%esp
c0007ac7:	ff 75 08             	pushl  0x8(%ebp)
c0007aca:	68 3a d2 00 c0       	push   $0xc000d23a
c0007acf:	e8 7e ef ff ff       	call   c0006a52 <printk>
c0007ad4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:520
		dir_close(searched_record.parent_dir);
c0007ad7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0007ada:	83 ec 0c             	sub    $0xc,%esp
c0007add:	50                   	push   %eax
c0007ade:	e8 e0 2a 00 00       	call   c000a5c3 <dir_close>
c0007ae3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:521
		return -1;
c0007ae6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007aeb:	e9 62 01 00 00       	jmp    c0007c52 <sys_unlink+0x221>
/work/x86_os_my/fs/fs.c:523
	}
	if (searched_record.file_type == FT_DIRECTORY) {	//存在同名的目录，而不是文件
c0007af0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0007af3:	83 f8 02             	cmp    $0x2,%eax
c0007af6:	75 29                	jne    c0007b21 <sys_unlink+0xf0>
/work/x86_os_my/fs/fs.c:524
		printk("can`t delete a direcotry with unlink(), use rmdir() to instead\n");
c0007af8:	83 ec 0c             	sub    $0xc,%esp
c0007afb:	68 50 d2 00 c0       	push   $0xc000d250
c0007b00:	e8 4d ef ff ff       	call   c0006a52 <printk>
c0007b05:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:525
		dir_close(searched_record.parent_dir);
c0007b08:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0007b0b:	83 ec 0c             	sub    $0xc,%esp
c0007b0e:	50                   	push   %eax
c0007b0f:	e8 af 2a 00 00       	call   c000a5c3 <dir_close>
c0007b14:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:526
		return -1;
c0007b17:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007b1c:	e9 31 01 00 00       	jmp    c0007c52 <sys_unlink+0x221>
/work/x86_os_my/fs/fs.c:530
	}

	/* 检查是否在已打开文件列表(文件表)中 */
	uint32_t file_idx = 0;
c0007b21:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:531
	while (file_idx < MAX_FILE_OPEN) {
c0007b28:	eb 37                	jmp    c0007b61 <sys_unlink+0x130>
/work/x86_os_my/fs/fs.c:532
		if (file_table[file_idx].fd_inode != NULL && (uint32_t)inode_no == file_table[file_idx].fd_inode->i_no) {
c0007b2a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0007b2d:	89 d0                	mov    %edx,%eax
c0007b2f:	01 c0                	add    %eax,%eax
c0007b31:	01 d0                	add    %edx,%eax
c0007b33:	c1 e0 02             	shl    $0x2,%eax
c0007b36:	05 e8 1f 01 c0       	add    $0xc0011fe8,%eax
c0007b3b:	8b 00                	mov    (%eax),%eax
c0007b3d:	85 c0                	test   %eax,%eax
c0007b3f:	74 1c                	je     c0007b5d <sys_unlink+0x12c>
/work/x86_os_my/fs/fs.c:532 (discriminator 1)
c0007b41:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0007b44:	89 d0                	mov    %edx,%eax
c0007b46:	01 c0                	add    %eax,%eax
c0007b48:	01 d0                	add    %edx,%eax
c0007b4a:	c1 e0 02             	shl    $0x2,%eax
c0007b4d:	05 e8 1f 01 c0       	add    $0xc0011fe8,%eax
c0007b52:	8b 00                	mov    (%eax),%eax
c0007b54:	8b 10                	mov    (%eax),%edx
c0007b56:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0007b59:	39 c2                	cmp    %eax,%edx
c0007b5b:	74 0c                	je     c0007b69 <sys_unlink+0x138>
/work/x86_os_my/fs/fs.c:535
			break;
		}
		file_idx++;
c0007b5d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:531
		return -1;
	}

	/* 检查是否在已打开文件列表(文件表)中 */
	uint32_t file_idx = 0;
	while (file_idx < MAX_FILE_OPEN) {
c0007b61:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c0007b65:	76 c3                	jbe    c0007b2a <sys_unlink+0xf9>
c0007b67:	eb 01                	jmp    c0007b6a <sys_unlink+0x139>
/work/x86_os_my/fs/fs.c:533
		if (file_table[file_idx].fd_inode != NULL && (uint32_t)inode_no == file_table[file_idx].fd_inode->i_no) {
			break;
c0007b69:	90                   	nop
/work/x86_os_my/fs/fs.c:537
		}
		file_idx++;
	}
	if (file_idx < MAX_FILE_OPEN) {
c0007b6a:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c0007b6e:	77 2c                	ja     c0007b9c <sys_unlink+0x16b>
/work/x86_os_my/fs/fs.c:538
		dir_close(searched_record.parent_dir);
c0007b70:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0007b73:	83 ec 0c             	sub    $0xc,%esp
c0007b76:	50                   	push   %eax
c0007b77:	e8 47 2a 00 00       	call   c000a5c3 <dir_close>
c0007b7c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:539
		printk("file %s is in use, not allow to delete!\n", pathname);
c0007b7f:	83 ec 08             	sub    $0x8,%esp
c0007b82:	ff 75 08             	pushl  0x8(%ebp)
c0007b85:	68 90 d2 00 c0       	push   $0xc000d290
c0007b8a:	e8 c3 ee ff ff       	call   c0006a52 <printk>
c0007b8f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:540
		return -1;
c0007b92:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007b97:	e9 b6 00 00 00       	jmp    c0007c52 <sys_unlink+0x221>
/work/x86_os_my/fs/fs.c:542
	}
	ASSERT(file_idx == MAX_FILE_OPEN);
c0007b9c:	83 7d f4 20          	cmpl   $0x20,-0xc(%ebp)
c0007ba0:	74 1c                	je     c0007bbe <sys_unlink+0x18d>
/work/x86_os_my/fs/fs.c:542 (discriminator 1)
c0007ba2:	68 b9 d2 00 c0       	push   $0xc000d2b9
c0007ba7:	68 78 d6 00 c0       	push   $0xc000d678
c0007bac:	68 1e 02 00 00       	push   $0x21e
c0007bb1:	68 59 ce 00 c0       	push   $0xc000ce59
c0007bb6:	e8 66 a7 ff ff       	call   c0002321 <panic_spin>
c0007bbb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:545

	/* 为delete_dir_entry申请缓冲区 */
	void* io_buf = sys_malloc(SECTOR_SIZE + SECTOR_SIZE);
c0007bbe:	83 ec 0c             	sub    $0xc,%esp
c0007bc1:	68 00 04 00 00       	push   $0x400
c0007bc6:	e8 01 b1 ff ff       	call   c0002ccc <sys_malloc>
c0007bcb:	83 c4 10             	add    $0x10,%esp
c0007bce:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:546
	if (io_buf == NULL) {
c0007bd1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0007bd5:	75 26                	jne    c0007bfd <sys_unlink+0x1cc>
/work/x86_os_my/fs/fs.c:547
		dir_close(searched_record.parent_dir);
c0007bd7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0007bda:	83 ec 0c             	sub    $0xc,%esp
c0007bdd:	50                   	push   %eax
c0007bde:	e8 e0 29 00 00       	call   c000a5c3 <dir_close>
c0007be3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:548
		printk("sys_unlink: malloc for io_buf failed\n");
c0007be6:	83 ec 0c             	sub    $0xc,%esp
c0007be9:	68 d4 d2 00 c0       	push   $0xc000d2d4
c0007bee:	e8 5f ee ff ff       	call   c0006a52 <printk>
c0007bf3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:549
		return -1;
c0007bf6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007bfb:	eb 55                	jmp    c0007c52 <sys_unlink+0x221>
/work/x86_os_my/fs/fs.c:552
	}

	struct dir* parent_dir = searched_record.parent_dir;
c0007bfd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0007c00:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:553
	delete_dir_entry(cur_part, parent_dir, inode_no, io_buf);	// 删除目录项 dir.c
c0007c03:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0007c06:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0007c0b:	ff 75 ec             	pushl  -0x14(%ebp)
c0007c0e:	52                   	push   %edx
c0007c0f:	ff 75 e8             	pushl  -0x18(%ebp)
c0007c12:	50                   	push   %eax
c0007c13:	e8 6a 2e 00 00       	call   c000aa82 <delete_dir_entry>
c0007c18:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:554
	inode_release(cur_part, inode_no);							// 删除inode inode.c
c0007c1b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0007c1e:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0007c23:	83 ec 08             	sub    $0x8,%esp
c0007c26:	52                   	push   %edx
c0007c27:	50                   	push   %eax
c0007c28:	e8 81 13 00 00       	call   c0008fae <inode_release>
c0007c2d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:555
	sys_free(io_buf);
c0007c30:	83 ec 0c             	sub    $0xc,%esp
c0007c33:	ff 75 ec             	pushl  -0x14(%ebp)
c0007c36:	e8 be b6 ff ff       	call   c00032f9 <sys_free>
c0007c3b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:556
	dir_close(searched_record.parent_dir);
c0007c3e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0007c41:	83 ec 0c             	sub    $0xc,%esp
c0007c44:	50                   	push   %eax
c0007c45:	e8 79 29 00 00       	call   c000a5c3 <dir_close>
c0007c4a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:557
	return 0;	// 成功删除文件
c0007c4d:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/fs.c:558 (discriminator 1)
}
c0007c52:	c9                   	leave  
c0007c53:	c3                   	ret    

c0007c54 <sys_mkdir>:
sys_mkdir():
/work/x86_os_my/fs/fs.c:569
（3）为新目录分配 1 个块存储该目录中的目录项。
（4）在新目录中创建两个目录项“.”和“..”，这是每个目录都必须存在的两个目录项。
（5）在新目录的父目录中添加新目录的目录项。
（6）将以上资源的变更同步到硬盘。
 */
int32_t sys_mkdir(const char* pathname) {
c0007c54:	55                   	push   %ebp
c0007c55:	89 e5                	mov    %esp,%ebp
c0007c57:	81 ec a8 02 00 00    	sub    $0x2a8,%esp
/work/x86_os_my/fs/fs.c:570
	uint8_t rollback_step = 0;	       // 用于操作失败时回滚各资源状态
c0007c5d:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:571
	void* io_buf = sys_malloc(SECTOR_SIZE * 2);
c0007c61:	83 ec 0c             	sub    $0xc,%esp
c0007c64:	68 00 04 00 00       	push   $0x400
c0007c69:	e8 5e b0 ff ff       	call   c0002ccc <sys_malloc>
c0007c6e:	83 c4 10             	add    $0x10,%esp
c0007c71:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:572
	if (io_buf == NULL) {
c0007c74:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0007c78:	75 1a                	jne    c0007c94 <sys_mkdir+0x40>
/work/x86_os_my/fs/fs.c:573
		printk("sys_mkdir: sys_malloc for io_buf failed\n");
c0007c7a:	83 ec 0c             	sub    $0xc,%esp
c0007c7d:	68 fc d2 00 c0       	push   $0xc000d2fc
c0007c82:	e8 cb ed ff ff       	call   c0006a52 <printk>
c0007c87:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:574
		return -1;
c0007c8a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007c8f:	e9 ae 03 00 00       	jmp    c0008042 <sys_mkdir+0x3ee>
/work/x86_os_my/fs/fs.c:578
	}

	struct path_search_record searched_record;
	memset(&searched_record, 0, sizeof(struct path_search_record));
c0007c94:	83 ec 04             	sub    $0x4,%esp
c0007c97:	68 08 02 00 00       	push   $0x208
c0007c9c:	6a 00                	push   $0x0
c0007c9e:	8d 85 c8 fd ff ff    	lea    -0x238(%ebp),%eax
c0007ca4:	50                   	push   %eax
c0007ca5:	e8 19 bb ff ff       	call   c00037c3 <memset>
c0007caa:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:579
	int inode_no = -1;
c0007cad:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:580
	inode_no = search_file(pathname, &searched_record);
c0007cb4:	83 ec 08             	sub    $0x8,%esp
c0007cb7:	8d 85 c8 fd ff ff    	lea    -0x238(%ebp),%eax
c0007cbd:	50                   	push   %eax
c0007cbe:	ff 75 08             	pushl  0x8(%ebp)
c0007cc1:	e8 28 f5 ff ff       	call   c00071ee <search_file>
c0007cc6:	83 c4 10             	add    $0x10,%esp
c0007cc9:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:581
	if (inode_no != -1) {      // 如果找到了同名目录或文件,失败返回
c0007ccc:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c0007cd0:	74 1c                	je     c0007cee <sys_mkdir+0x9a>
/work/x86_os_my/fs/fs.c:582
		printk("sys_mkdir: file or directory %s exist!\n", pathname);
c0007cd2:	83 ec 08             	sub    $0x8,%esp
c0007cd5:	ff 75 08             	pushl  0x8(%ebp)
c0007cd8:	68 28 d3 00 c0       	push   $0xc000d328
c0007cdd:	e8 70 ed ff ff       	call   c0006a52 <printk>
c0007ce2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:583
		rollback_step = 1;
c0007ce5:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:584
		goto rollback;
c0007ce9:	e9 08 03 00 00       	jmp    c0007ff6 <sys_mkdir+0x3a2>
/work/x86_os_my/fs/fs.c:586
	} else {	     // 若未找到,也要判断是在最终目录没找到还是某个中间目录不存在
		uint32_t pathname_depth = path_depth_cnt((char*)pathname);
c0007cee:	83 ec 0c             	sub    $0xc,%esp
c0007cf1:	ff 75 08             	pushl  0x8(%ebp)
c0007cf4:	e8 6a f4 ff ff       	call   c0007163 <path_depth_cnt>
c0007cf9:	83 c4 10             	add    $0x10,%esp
c0007cfc:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:587
		uint32_t path_searched_depth = path_depth_cnt(searched_record.searched_path);
c0007cff:	83 ec 0c             	sub    $0xc,%esp
c0007d02:	8d 85 c8 fd ff ff    	lea    -0x238(%ebp),%eax
c0007d08:	50                   	push   %eax
c0007d09:	e8 55 f4 ff ff       	call   c0007163 <path_depth_cnt>
c0007d0e:	83 c4 10             	add    $0x10,%esp
c0007d11:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/fs.c:589
		/* 先判断是否把pathname的各层目录都访问到了,即是否在某个中间目录就失败了 */
		if (pathname_depth != path_searched_depth) {   // 说明并没有访问到全部的路径,某个中间目录是不存在的
c0007d14:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0007d17:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c0007d1a:	74 23                	je     c0007d3f <sys_mkdir+0xeb>
/work/x86_os_my/fs/fs.c:590
			printk("sys_mkdir: can`t access %s, subpath %s is`t exist\n", pathname, searched_record.searched_path);
c0007d1c:	83 ec 04             	sub    $0x4,%esp
c0007d1f:	8d 85 c8 fd ff ff    	lea    -0x238(%ebp),%eax
c0007d25:	50                   	push   %eax
c0007d26:	ff 75 08             	pushl  0x8(%ebp)
c0007d29:	68 50 d3 00 c0       	push   $0xc000d350
c0007d2e:	e8 1f ed ff ff       	call   c0006a52 <printk>
c0007d33:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:591
			rollback_step = 1;
c0007d36:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:592
			goto rollback;
c0007d3a:	e9 b7 02 00 00       	jmp    c0007ff6 <sys_mkdir+0x3a2>
/work/x86_os_my/fs/fs.c:596
		}
	}

	struct dir* parent_dir = searched_record.parent_dir;	//被创建目录所在的父目录
c0007d3f:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0007d42:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/fs.c:598
	/* 目录名称后可能会有字符'/',所以最好直接用searched_record.searched_path,无'/' */
	char* dirname = strrchr(searched_record.searched_path, '/') + 1;	//获取 pathname 的最后一级目录名
c0007d45:	83 ec 08             	sub    $0x8,%esp
c0007d48:	6a 2f                	push   $0x2f
c0007d4a:	8d 85 c8 fd ff ff    	lea    -0x238(%ebp),%eax
c0007d50:	50                   	push   %eax
c0007d51:	e8 13 bd ff ff       	call   c0003a69 <strrchr>
c0007d56:	83 c4 10             	add    $0x10,%esp
c0007d59:	83 c0 01             	add    $0x1,%eax
c0007d5c:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/fs.c:600

	inode_no = inode_bitmap_alloc(cur_part);
c0007d5f:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0007d64:	83 ec 0c             	sub    $0xc,%esp
c0007d67:	50                   	push   %eax
c0007d68:	e8 92 15 00 00       	call   c00092ff <inode_bitmap_alloc>
c0007d6d:	83 c4 10             	add    $0x10,%esp
c0007d70:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:601
	if (inode_no == -1) {
c0007d73:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c0007d77:	75 19                	jne    c0007d92 <sys_mkdir+0x13e>
/work/x86_os_my/fs/fs.c:602
		printk("sys_mkdir: allocate inode failed\n");
c0007d79:	83 ec 0c             	sub    $0xc,%esp
c0007d7c:	68 84 d3 00 c0       	push   $0xc000d384
c0007d81:	e8 cc ec ff ff       	call   c0006a52 <printk>
c0007d86:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:603
		rollback_step = 1;
c0007d89:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:604
		goto rollback;
c0007d8d:	e9 64 02 00 00       	jmp    c0007ff6 <sys_mkdir+0x3a2>
/work/x86_os_my/fs/fs.c:608
	}

	struct inode new_dir_inode;
	inode_init(inode_no, &new_dir_inode);	    // 初始化i结点
c0007d92:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0007d95:	83 ec 08             	sub    $0x8,%esp
c0007d98:	8d 95 7c fd ff ff    	lea    -0x284(%ebp),%edx
c0007d9e:	52                   	push   %edx
c0007d9f:	50                   	push   %eax
c0007da0:	e8 42 14 00 00       	call   c00091e7 <inode_init>
c0007da5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:610

	uint32_t block_bitmap_idx = 0;     // 用来记录block对应于block_bitmap中的索引
c0007da8:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
/work/x86_os_my/fs/fs.c:611
	int32_t block_lba = -1;
c0007daf:	c7 45 d4 ff ff ff ff 	movl   $0xffffffff,-0x2c(%ebp)
/work/x86_os_my/fs/fs.c:613
	/* 为目录分配一个块,用来写入目录.和.. */
	block_lba = block_bitmap_alloc(cur_part);
c0007db6:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0007dbb:	83 ec 0c             	sub    $0xc,%esp
c0007dbe:	50                   	push   %eax
c0007dbf:	e8 82 15 00 00       	call   c0009346 <block_bitmap_alloc>
c0007dc4:	83 c4 10             	add    $0x10,%esp
c0007dc7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/fs/fs.c:614
	if (block_lba == -1) {
c0007dca:	83 7d d4 ff          	cmpl   $0xffffffff,-0x2c(%ebp)
c0007dce:	75 19                	jne    c0007de9 <sys_mkdir+0x195>
/work/x86_os_my/fs/fs.c:615
		printk("sys_mkdir: block_bitmap_alloc for create directory failed\n");
c0007dd0:	83 ec 0c             	sub    $0xc,%esp
c0007dd3:	68 a8 d3 00 c0       	push   $0xc000d3a8
c0007dd8:	e8 75 ec ff ff       	call   c0006a52 <printk>
c0007ddd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:616
		rollback_step = 2;
c0007de0:	c6 45 f7 02          	movb   $0x2,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:617
		goto rollback;
c0007de4:	e9 0d 02 00 00       	jmp    c0007ff6 <sys_mkdir+0x3a2>
/work/x86_os_my/fs/fs.c:619
	}
	new_dir_inode.i_sectors[0] = block_lba;
c0007de9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0007dec:	89 85 8c fd ff ff    	mov    %eax,-0x274(%ebp)
/work/x86_os_my/fs/fs.c:621
	/* 每分配一个块就将位图同步到硬盘 */
	block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
c0007df2:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0007df5:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0007dfa:	8b 40 1c             	mov    0x1c(%eax),%eax
c0007dfd:	8b 40 28             	mov    0x28(%eax),%eax
c0007e00:	29 c2                	sub    %eax,%edx
c0007e02:	89 d0                	mov    %edx,%eax
c0007e04:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/fs.c:622
	ASSERT(block_bitmap_idx != 0);
c0007e07:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0007e0b:	75 1c                	jne    c0007e29 <sys_mkdir+0x1d5>
/work/x86_os_my/fs/fs.c:622 (discriminator 1)
c0007e0d:	68 e3 d3 00 c0       	push   $0xc000d3e3
c0007e12:	68 84 d6 00 c0       	push   $0xc000d684
c0007e17:	68 6e 02 00 00       	push   $0x26e
c0007e1c:	68 59 ce 00 c0       	push   $0xc000ce59
c0007e21:	e8 fb a4 ff ff       	call   c0002321 <panic_spin>
c0007e26:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:623
	bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c0007e29:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0007e2e:	83 ec 04             	sub    $0x4,%esp
c0007e31:	6a 01                	push   $0x1
c0007e33:	ff 75 d8             	pushl  -0x28(%ebp)
c0007e36:	50                   	push   %eax
c0007e37:	e8 5c 15 00 00       	call   c0009398 <bitmap_sync>
c0007e3c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:626

	/* 将当前目录的目录项'.'和'..'写入目录 */
	memset(io_buf, 0, SECTOR_SIZE * 2);	 // 清空io_buf
c0007e3f:	83 ec 04             	sub    $0x4,%esp
c0007e42:	68 00 04 00 00       	push   $0x400
c0007e47:	6a 00                	push   $0x0
c0007e49:	ff 75 ec             	pushl  -0x14(%ebp)
c0007e4c:	e8 72 b9 ff ff       	call   c00037c3 <memset>
c0007e51:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:627
	struct dir_entry* p_de = (struct dir_entry*)io_buf;
c0007e54:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0007e57:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/fs/fs.c:630

	/* 初始化当前目录"." */
	memcpy(p_de->filename, ".", 1);
c0007e5a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0007e5d:	83 ec 04             	sub    $0x4,%esp
c0007e60:	6a 01                	push   $0x1
c0007e62:	68 97 cf 00 c0       	push   $0xc000cf97
c0007e67:	50                   	push   %eax
c0007e68:	e8 a8 b9 ff ff       	call   c0003815 <memcpy>
c0007e6d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:631
	p_de->i_no = inode_no ;
c0007e70:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0007e73:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0007e76:	89 50 10             	mov    %edx,0x10(%eax)
/work/x86_os_my/fs/fs.c:632
	p_de->f_type = FT_DIRECTORY;
c0007e79:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0007e7c:	c7 40 14 02 00 00 00 	movl   $0x2,0x14(%eax)
/work/x86_os_my/fs/fs.c:634

	p_de++;
c0007e83:	83 45 d0 18          	addl   $0x18,-0x30(%ebp)
/work/x86_os_my/fs/fs.c:636
	/* 初始化当前目录".." */
	memcpy(p_de->filename, "..", 2);
c0007e87:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0007e8a:	83 ec 04             	sub    $0x4,%esp
c0007e8d:	6a 02                	push   $0x2
c0007e8f:	68 99 cf 00 c0       	push   $0xc000cf99
c0007e94:	50                   	push   %eax
c0007e95:	e8 7b b9 ff ff       	call   c0003815 <memcpy>
c0007e9a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:637
	p_de->i_no = parent_dir->inode->i_no;
c0007e9d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0007ea0:	8b 00                	mov    (%eax),%eax
c0007ea2:	8b 10                	mov    (%eax),%edx
c0007ea4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0007ea7:	89 50 10             	mov    %edx,0x10(%eax)
/work/x86_os_my/fs/fs.c:638
	p_de->f_type = FT_DIRECTORY;
c0007eaa:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0007ead:	c7 40 14 02 00 00 00 	movl   $0x2,0x14(%eax)
/work/x86_os_my/fs/fs.c:639
	ide_write(cur_part->my_disk, new_dir_inode.i_sectors[0], io_buf, 1);
c0007eb4:	8b 95 8c fd ff ff    	mov    -0x274(%ebp),%edx
c0007eba:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0007ebf:	8b 40 08             	mov    0x8(%eax),%eax
c0007ec2:	6a 01                	push   $0x1
c0007ec4:	ff 75 ec             	pushl  -0x14(%ebp)
c0007ec7:	52                   	push   %edx
c0007ec8:	50                   	push   %eax
c0007ec9:	e8 7f e2 ff ff       	call   c000614d <ide_write>
c0007ece:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:641

	new_dir_inode.i_size = 2 * cur_part->sb->dir_entry_size;
c0007ed1:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0007ed6:	8b 40 1c             	mov    0x1c(%eax),%eax
c0007ed9:	8b 40 30             	mov    0x30(%eax),%eax
c0007edc:	01 c0                	add    %eax,%eax
c0007ede:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)
/work/x86_os_my/fs/fs.c:645

	/* 在父目录中添加自己的目录项 */
	struct dir_entry new_dir_entry;
	memset(&new_dir_entry, 0, sizeof(struct dir_entry));
c0007ee4:	83 ec 04             	sub    $0x4,%esp
c0007ee7:	6a 18                	push   $0x18
c0007ee9:	6a 00                	push   $0x0
c0007eeb:	8d 85 64 fd ff ff    	lea    -0x29c(%ebp),%eax
c0007ef1:	50                   	push   %eax
c0007ef2:	e8 cc b8 ff ff       	call   c00037c3 <memset>
c0007ef7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:646
	create_dir_entry(dirname, inode_no, FT_DIRECTORY, &new_dir_entry);
c0007efa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0007efd:	8d 95 64 fd ff ff    	lea    -0x29c(%ebp),%edx
c0007f03:	52                   	push   %edx
c0007f04:	6a 02                	push   $0x2
c0007f06:	50                   	push   %eax
c0007f07:	ff 75 dc             	pushl  -0x24(%ebp)
c0007f0a:	e8 e7 26 00 00       	call   c000a5f6 <create_dir_entry>
c0007f0f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:647
	memset(io_buf, 0, SECTOR_SIZE * 2);	 // 清空io_buf
c0007f12:	83 ec 04             	sub    $0x4,%esp
c0007f15:	68 00 04 00 00       	push   $0x400
c0007f1a:	6a 00                	push   $0x0
c0007f1c:	ff 75 ec             	pushl  -0x14(%ebp)
c0007f1f:	e8 9f b8 ff ff       	call   c00037c3 <memset>
c0007f24:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:648
	if (!sync_dir_entry(parent_dir, &new_dir_entry, io_buf)) {	  // sync_dir_entry中将block_bitmap通过bitmap_sync同步到硬盘
c0007f27:	83 ec 04             	sub    $0x4,%esp
c0007f2a:	ff 75 ec             	pushl  -0x14(%ebp)
c0007f2d:	8d 85 64 fd ff ff    	lea    -0x29c(%ebp),%eax
c0007f33:	50                   	push   %eax
c0007f34:	ff 75 e0             	pushl  -0x20(%ebp)
c0007f37:	e8 2b 27 00 00       	call   c000a667 <sync_dir_entry>
c0007f3c:	83 c4 10             	add    $0x10,%esp
c0007f3f:	85 c0                	test   %eax,%eax
c0007f41:	75 19                	jne    c0007f5c <sys_mkdir+0x308>
/work/x86_os_my/fs/fs.c:649
		printk("sys_mkdir: sync_dir_entry to disk failed!\n");
c0007f43:	83 ec 0c             	sub    $0xc,%esp
c0007f46:	68 fc d3 00 c0       	push   $0xc000d3fc
c0007f4b:	e8 02 eb ff ff       	call   c0006a52 <printk>
c0007f50:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:650
		rollback_step = 2;
c0007f53:	c6 45 f7 02          	movb   $0x2,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:651
		goto rollback;
c0007f57:	e9 9a 00 00 00       	jmp    c0007ff6 <sys_mkdir+0x3a2>
/work/x86_os_my/fs/fs.c:655
	}

	/* 父目录的inode同步到硬盘 */
	memset(io_buf, 0, SECTOR_SIZE * 2);
c0007f5c:	83 ec 04             	sub    $0x4,%esp
c0007f5f:	68 00 04 00 00       	push   $0x400
c0007f64:	6a 00                	push   $0x0
c0007f66:	ff 75 ec             	pushl  -0x14(%ebp)
c0007f69:	e8 55 b8 ff ff       	call   c00037c3 <memset>
c0007f6e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:656
	inode_sync(cur_part, parent_dir->inode, io_buf);
c0007f71:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0007f74:	8b 10                	mov    (%eax),%edx
c0007f76:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0007f7b:	83 ec 04             	sub    $0x4,%esp
c0007f7e:	ff 75 ec             	pushl  -0x14(%ebp)
c0007f81:	52                   	push   %edx
c0007f82:	50                   	push   %eax
c0007f83:	e8 2b 0c 00 00       	call   c0008bb3 <inode_sync>
c0007f88:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:659

	/* 将新创建目录的inode同步到硬盘 */
	memset(io_buf, 0, SECTOR_SIZE * 2);
c0007f8b:	83 ec 04             	sub    $0x4,%esp
c0007f8e:	68 00 04 00 00       	push   $0x400
c0007f93:	6a 00                	push   $0x0
c0007f95:	ff 75 ec             	pushl  -0x14(%ebp)
c0007f98:	e8 26 b8 ff ff       	call   c00037c3 <memset>
c0007f9d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:660
	inode_sync(cur_part, &new_dir_inode, io_buf);
c0007fa0:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0007fa5:	83 ec 04             	sub    $0x4,%esp
c0007fa8:	ff 75 ec             	pushl  -0x14(%ebp)
c0007fab:	8d 95 7c fd ff ff    	lea    -0x284(%ebp),%edx
c0007fb1:	52                   	push   %edx
c0007fb2:	50                   	push   %eax
c0007fb3:	e8 fb 0b 00 00       	call   c0008bb3 <inode_sync>
c0007fb8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:663

	/* 将inode位图同步到硬盘 */
	bitmap_sync(cur_part, inode_no, INODE_BITMAP);
c0007fbb:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0007fbe:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0007fc3:	83 ec 04             	sub    $0x4,%esp
c0007fc6:	6a 00                	push   $0x0
c0007fc8:	52                   	push   %edx
c0007fc9:	50                   	push   %eax
c0007fca:	e8 c9 13 00 00       	call   c0009398 <bitmap_sync>
c0007fcf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:665

	sys_free(io_buf);
c0007fd2:	83 ec 0c             	sub    $0xc,%esp
c0007fd5:	ff 75 ec             	pushl  -0x14(%ebp)
c0007fd8:	e8 1c b3 ff ff       	call   c00032f9 <sys_free>
c0007fdd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:668

	/* 关闭所创建目录的父目录 */
	dir_close(searched_record.parent_dir);
c0007fe0:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0007fe3:	83 ec 0c             	sub    $0xc,%esp
c0007fe6:	50                   	push   %eax
c0007fe7:	e8 d7 25 00 00       	call   c000a5c3 <dir_close>
c0007fec:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:669
	return 0;
c0007fef:	b8 00 00 00 00       	mov    $0x0,%eax
c0007ff4:	eb 4c                	jmp    c0008042 <sys_mkdir+0x3ee>
/work/x86_os_my/fs/fs.c:673

	/*创建文件或目录需要创建相关的多个资源,若某步失败则会执行到下面的回滚步骤 */
rollback:	     // 因为某步骤操作失败而回滚
	switch (rollback_step) {
c0007ff6:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0007ffa:	83 f8 01             	cmp    $0x1,%eax
c0007ffd:	74 20                	je     c000801f <sys_mkdir+0x3cb>
c0007fff:	83 f8 02             	cmp    $0x2,%eax
c0008002:	75 2b                	jne    c000802f <sys_mkdir+0x3db>
/work/x86_os_my/fs/fs.c:675
		case 2:
		bitmap_set(&cur_part->inode_bitmap, inode_no, 0);	 // 如果新文件的inode创建失败,之前位图中分配的inode_no也要恢复
c0008004:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008007:	8b 15 d0 1f 01 c0    	mov    0xc0011fd0,%edx
c000800d:	83 c2 28             	add    $0x28,%edx
c0008010:	83 ec 04             	sub    $0x4,%esp
c0008013:	6a 00                	push   $0x0
c0008015:	50                   	push   %eax
c0008016:	52                   	push   %edx
c0008017:	e8 73 a5 ff ff       	call   c000258f <bitmap_set>
c000801c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:678
		case 1:
		/* 关闭所创建目录的父目录 */
		dir_close(searched_record.parent_dir);
c000801f:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0008022:	83 ec 0c             	sub    $0xc,%esp
c0008025:	50                   	push   %eax
c0008026:	e8 98 25 00 00       	call   c000a5c3 <dir_close>
c000802b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:679
		break;
c000802e:	90                   	nop
/work/x86_os_my/fs/fs.c:681
	}
	sys_free(io_buf);
c000802f:	83 ec 0c             	sub    $0xc,%esp
c0008032:	ff 75 ec             	pushl  -0x14(%ebp)
c0008035:	e8 bf b2 ff ff       	call   c00032f9 <sys_free>
c000803a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:682
	return -1;
c000803d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
/work/x86_os_my/fs/fs.c:683 (discriminator 1)
}
c0008042:	c9                   	leave  
c0008043:	c3                   	ret    

c0008044 <sys_opendir>:
sys_opendir():
/work/x86_os_my/fs/fs.c:686

/* 目录打开成功后返回目录指针,失败返回NULL */
struct dir* sys_opendir(const char* name) {
c0008044:	55                   	push   %ebp
c0008045:	89 e5                	mov    %esp,%ebp
c0008047:	81 ec 18 02 00 00    	sub    $0x218,%esp
/work/x86_os_my/fs/fs.c:687
	ASSERT(strlen(name) < MAX_PATH_LEN);
c000804d:	83 ec 0c             	sub    $0xc,%esp
c0008050:	ff 75 08             	pushl  0x8(%ebp)
c0008053:	e8 f5 b8 ff ff       	call   c000394d <strlen>
c0008058:	83 c4 10             	add    $0x10,%esp
c000805b:	3d ff 01 00 00       	cmp    $0x1ff,%eax
c0008060:	76 1c                	jbe    c000807e <sys_opendir+0x3a>
/work/x86_os_my/fs/fs.c:687 (discriminator 1)
c0008062:	68 27 d4 00 c0       	push   $0xc000d427
c0008067:	68 90 d6 00 c0       	push   $0xc000d690
c000806c:	68 af 02 00 00       	push   $0x2af
c0008071:	68 59 ce 00 c0       	push   $0xc000ce59
c0008076:	e8 a6 a2 ff ff       	call   c0002321 <panic_spin>
c000807b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:689
	/* 如果是根目录'/',直接返回&root_dir */
	if (name[0] == '/' && (name[1] == 0 || name[0] == '.')) {
c000807e:	8b 45 08             	mov    0x8(%ebp),%eax
c0008081:	0f b6 00             	movzbl (%eax),%eax
c0008084:	3c 2f                	cmp    $0x2f,%al
c0008086:	75 21                	jne    c00080a9 <sys_opendir+0x65>
/work/x86_os_my/fs/fs.c:689 (discriminator 1)
c0008088:	8b 45 08             	mov    0x8(%ebp),%eax
c000808b:	83 c0 01             	add    $0x1,%eax
c000808e:	0f b6 00             	movzbl (%eax),%eax
c0008091:	84 c0                	test   %al,%al
c0008093:	74 0a                	je     c000809f <sys_opendir+0x5b>
/work/x86_os_my/fs/fs.c:689 (discriminator 2)
c0008095:	8b 45 08             	mov    0x8(%ebp),%eax
c0008098:	0f b6 00             	movzbl (%eax),%eax
c000809b:	3c 2e                	cmp    $0x2e,%al
c000809d:	75 0a                	jne    c00080a9 <sys_opendir+0x65>
/work/x86_os_my/fs/fs.c:690
		return &root_dir;
c000809f:	b8 60 21 01 c0       	mov    $0xc0012160,%eax
c00080a4:	e9 a9 00 00 00       	jmp    c0008152 <sys_opendir+0x10e>
/work/x86_os_my/fs/fs.c:695
	}

	/* 先检查待打开的目录是否存在 */
	struct path_search_record searched_record;
	memset(&searched_record, 0, sizeof(struct path_search_record));
c00080a9:	83 ec 04             	sub    $0x4,%esp
c00080ac:	68 08 02 00 00       	push   $0x208
c00080b1:	6a 00                	push   $0x0
c00080b3:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
c00080b9:	50                   	push   %eax
c00080ba:	e8 04 b7 ff ff       	call   c00037c3 <memset>
c00080bf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:696
	int inode_no = search_file(name, &searched_record);
c00080c2:	83 ec 08             	sub    $0x8,%esp
c00080c5:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
c00080cb:	50                   	push   %eax
c00080cc:	ff 75 08             	pushl  0x8(%ebp)
c00080cf:	e8 1a f1 ff ff       	call   c00071ee <search_file>
c00080d4:	83 c4 10             	add    $0x10,%esp
c00080d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:697
	struct dir* ret = NULL;
c00080da:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:698
	if (inode_no == -1) {	 // 如果找不到目录,提示不存在的路径
c00080e1:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c00080e5:	75 1c                	jne    c0008103 <sys_opendir+0xbf>
/work/x86_os_my/fs/fs.c:699
		printk("In %s, sub path %s not exist\n", name, searched_record.searched_path);
c00080e7:	83 ec 04             	sub    $0x4,%esp
c00080ea:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
c00080f0:	50                   	push   %eax
c00080f1:	ff 75 08             	pushl  0x8(%ebp)
c00080f4:	68 43 d4 00 c0       	push   $0xc000d443
c00080f9:	e8 54 e9 ff ff       	call   c0006a52 <printk>
c00080fe:	83 c4 10             	add    $0x10,%esp
c0008101:	eb 3d                	jmp    c0008140 <sys_opendir+0xfc>
/work/x86_os_my/fs/fs.c:701
	} else {
		if (searched_record.file_type == FT_REGULAR) {
c0008103:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008106:	83 f8 01             	cmp    $0x1,%eax
c0008109:	75 15                	jne    c0008120 <sys_opendir+0xdc>
/work/x86_os_my/fs/fs.c:702
			printk("%s is regular file!\n", name);
c000810b:	83 ec 08             	sub    $0x8,%esp
c000810e:	ff 75 08             	pushl  0x8(%ebp)
c0008111:	68 61 d4 00 c0       	push   $0xc000d461
c0008116:	e8 37 e9 ff ff       	call   c0006a52 <printk>
c000811b:	83 c4 10             	add    $0x10,%esp
c000811e:	eb 20                	jmp    c0008140 <sys_opendir+0xfc>
/work/x86_os_my/fs/fs.c:703
		} else if (searched_record.file_type == FT_DIRECTORY) {
c0008120:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008123:	83 f8 02             	cmp    $0x2,%eax
c0008126:	75 18                	jne    c0008140 <sys_opendir+0xfc>
/work/x86_os_my/fs/fs.c:704
			ret = dir_open(cur_part, inode_no);
c0008128:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000812b:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0008130:	83 ec 08             	sub    $0x8,%esp
c0008133:	52                   	push   %edx
c0008134:	50                   	push   %eax
c0008135:	e8 71 22 00 00       	call   c000a3ab <dir_open>
c000813a:	83 c4 10             	add    $0x10,%esp
c000813d:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:707
		}
	}
	dir_close(searched_record.parent_dir);
c0008140:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0008143:	83 ec 0c             	sub    $0xc,%esp
c0008146:	50                   	push   %eax
c0008147:	e8 77 24 00 00       	call   c000a5c3 <dir_close>
c000814c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:708
	return ret;
c000814f:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:709 (discriminator 1)
}
c0008152:	c9                   	leave  
c0008153:	c3                   	ret    

c0008154 <sys_closedir>:
sys_closedir():
/work/x86_os_my/fs/fs.c:712

/* 成功关闭目录dir返回0,失败返回-1 */
int32_t sys_closedir(struct dir* dir) {
c0008154:	55                   	push   %ebp
c0008155:	89 e5                	mov    %esp,%ebp
c0008157:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/fs.c:713
	int32_t ret = -1;
c000815a:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:714
	if (dir != NULL) {
c0008161:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0008165:	74 15                	je     c000817c <sys_closedir+0x28>
/work/x86_os_my/fs/fs.c:715
		dir_close(dir);
c0008167:	83 ec 0c             	sub    $0xc,%esp
c000816a:	ff 75 08             	pushl  0x8(%ebp)
c000816d:	e8 51 24 00 00       	call   c000a5c3 <dir_close>
c0008172:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:716
		ret = 0;
c0008175:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:718
	}
	return ret;
c000817c:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:719
}
c000817f:	c9                   	leave  
c0008180:	c3                   	ret    

c0008181 <sys_readdir>:
sys_readdir():
/work/x86_os_my/fs/fs.c:722

/* 读取目录dir的1个目录项,成功后返回其目录项地址,到目录尾时或出错时返回NULL */
struct dir_entry* sys_readdir(struct dir* dir) {
c0008181:	55                   	push   %ebp
c0008182:	89 e5                	mov    %esp,%ebp
c0008184:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/fs/fs.c:723
	ASSERT(dir != NULL);
c0008187:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c000818b:	75 1c                	jne    c00081a9 <sys_readdir+0x28>
/work/x86_os_my/fs/fs.c:723 (discriminator 1)
c000818d:	68 76 d4 00 c0       	push   $0xc000d476
c0008192:	68 9c d6 00 c0       	push   $0xc000d69c
c0008197:	68 d3 02 00 00       	push   $0x2d3
c000819c:	68 59 ce 00 c0       	push   $0xc000ce59
c00081a1:	e8 7b a1 ff ff       	call   c0002321 <panic_spin>
c00081a6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:724
	return dir_read(dir);
c00081a9:	83 ec 0c             	sub    $0xc,%esp
c00081ac:	ff 75 08             	pushl  0x8(%ebp)
c00081af:	e8 36 2d 00 00       	call   c000aeea <dir_read>
c00081b4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:725
}
c00081b7:	c9                   	leave  
c00081b8:	c3                   	ret    

c00081b9 <sys_rewinddir>:
sys_rewinddir():
/work/x86_os_my/fs/fs.c:728

/* 把目录dir的指针dir_pos置0 */
void sys_rewinddir(struct dir* dir) {
c00081b9:	55                   	push   %ebp
c00081ba:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/fs/fs.c:729
	dir->dir_pos = 0;
c00081bc:	8b 45 08             	mov    0x8(%ebp),%eax
c00081bf:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
/work/x86_os_my/fs/fs.c:730
}
c00081c6:	90                   	nop
c00081c7:	5d                   	pop    %ebp
c00081c8:	c3                   	ret    

c00081c9 <sys_rmdir>:
sys_rmdir():
/work/x86_os_my/fs/fs.c:733

/* 删除空目录,成功时返回0,失败时返回-1*/
int32_t sys_rmdir(const char* pathname) {
c00081c9:	55                   	push   %ebp
c00081ca:	89 e5                	mov    %esp,%ebp
c00081cc:	81 ec 28 02 00 00    	sub    $0x228,%esp
/work/x86_os_my/fs/fs.c:736
	/* 先检查待删除的文件是否存在 */
	struct path_search_record searched_record;
	memset(&searched_record, 0, sizeof(struct path_search_record));
c00081d2:	83 ec 04             	sub    $0x4,%esp
c00081d5:	68 08 02 00 00       	push   $0x208
c00081da:	6a 00                	push   $0x0
c00081dc:	8d 85 e4 fd ff ff    	lea    -0x21c(%ebp),%eax
c00081e2:	50                   	push   %eax
c00081e3:	e8 db b5 ff ff       	call   c00037c3 <memset>
c00081e8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:737
	int32_t inode_no = search_file(pathname, &searched_record);
c00081eb:	83 ec 08             	sub    $0x8,%esp
c00081ee:	8d 85 e4 fd ff ff    	lea    -0x21c(%ebp),%eax
c00081f4:	50                   	push   %eax
c00081f5:	ff 75 08             	pushl  0x8(%ebp)
c00081f8:	e8 f1 ef ff ff       	call   c00071ee <search_file>
c00081fd:	83 c4 10             	add    $0x10,%esp
c0008200:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:738
	ASSERT(inode_no != 0);
c0008203:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0008207:	75 1c                	jne    c0008225 <sys_rmdir+0x5c>
/work/x86_os_my/fs/fs.c:738 (discriminator 1)
c0008209:	68 2c d2 00 c0       	push   $0xc000d22c
c000820e:	68 a8 d6 00 c0       	push   $0xc000d6a8
c0008213:	68 e2 02 00 00       	push   $0x2e2
c0008218:	68 59 ce 00 c0       	push   $0xc000ce59
c000821d:	e8 ff a0 ff ff       	call   c0002321 <panic_spin>
c0008222:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:739
	int32_t retval = -1;	// 默认返回值
c0008225:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:740
	if (inode_no == -1) {
c000822c:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c0008230:	75 1f                	jne    c0008251 <sys_rmdir+0x88>
/work/x86_os_my/fs/fs.c:741
		printk("In %s, sub path %s not exist\n", pathname, searched_record.searched_path);
c0008232:	83 ec 04             	sub    $0x4,%esp
c0008235:	8d 85 e4 fd ff ff    	lea    -0x21c(%ebp),%eax
c000823b:	50                   	push   %eax
c000823c:	ff 75 08             	pushl  0x8(%ebp)
c000823f:	68 43 d4 00 c0       	push   $0xc000d443
c0008244:	e8 09 e8 ff ff       	call   c0006a52 <printk>
c0008249:	83 c4 10             	add    $0x10,%esp
c000824c:	e9 87 00 00 00       	jmp    c00082d8 <sys_rmdir+0x10f>
/work/x86_os_my/fs/fs.c:743
	} else {
		if (searched_record.file_type == FT_REGULAR) {
c0008251:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0008254:	83 f8 01             	cmp    $0x1,%eax
c0008257:	75 15                	jne    c000826e <sys_rmdir+0xa5>
/work/x86_os_my/fs/fs.c:744
			printk("%s is regular file!\n", pathname);
c0008259:	83 ec 08             	sub    $0x8,%esp
c000825c:	ff 75 08             	pushl  0x8(%ebp)
c000825f:	68 61 d4 00 c0       	push   $0xc000d461
c0008264:	e8 e9 e7 ff ff       	call   c0006a52 <printk>
c0008269:	83 c4 10             	add    $0x10,%esp
c000826c:	eb 6a                	jmp    c00082d8 <sys_rmdir+0x10f>
/work/x86_os_my/fs/fs.c:746
		} else {
			struct dir* dir = dir_open(cur_part, inode_no);
c000826e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0008271:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0008276:	83 ec 08             	sub    $0x8,%esp
c0008279:	52                   	push   %edx
c000827a:	50                   	push   %eax
c000827b:	e8 2b 21 00 00       	call   c000a3ab <dir_open>
c0008280:	83 c4 10             	add    $0x10,%esp
c0008283:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:747
			if (!dir_is_empty(dir)) {	 // 非空目录不可删除
c0008286:	83 ec 0c             	sub    $0xc,%esp
c0008289:	ff 75 ec             	pushl  -0x14(%ebp)
c000828c:	e8 41 2e 00 00       	call   c000b0d2 <dir_is_empty>
c0008291:	83 c4 10             	add    $0x10,%esp
c0008294:	85 c0                	test   %eax,%eax
c0008296:	75 15                	jne    c00082ad <sys_rmdir+0xe4>
/work/x86_os_my/fs/fs.c:748
				printk("dir %s is not empty, it is not allowed to delete a nonempty directory!\n", pathname);
c0008298:	83 ec 08             	sub    $0x8,%esp
c000829b:	ff 75 08             	pushl  0x8(%ebp)
c000829e:	68 84 d4 00 c0       	push   $0xc000d484
c00082a3:	e8 aa e7 ff ff       	call   c0006a52 <printk>
c00082a8:	83 c4 10             	add    $0x10,%esp
c00082ab:	eb 1d                	jmp    c00082ca <sys_rmdir+0x101>
/work/x86_os_my/fs/fs.c:750
			} else {
				if (!dir_remove(searched_record.parent_dir, dir)) {
c00082ad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00082b0:	83 ec 08             	sub    $0x8,%esp
c00082b3:	ff 75 ec             	pushl  -0x14(%ebp)
c00082b6:	50                   	push   %eax
c00082b7:	e8 41 2e 00 00       	call   c000b0fd <dir_remove>
c00082bc:	83 c4 10             	add    $0x10,%esp
c00082bf:	85 c0                	test   %eax,%eax
c00082c1:	75 07                	jne    c00082ca <sys_rmdir+0x101>
/work/x86_os_my/fs/fs.c:751
					retval = 0;
c00082c3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:754
				}
			}
			dir_close(dir);
c00082ca:	83 ec 0c             	sub    $0xc,%esp
c00082cd:	ff 75 ec             	pushl  -0x14(%ebp)
c00082d0:	e8 ee 22 00 00       	call   c000a5c3 <dir_close>
c00082d5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:757
		}
	}
	dir_close(searched_record.parent_dir);
c00082d8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00082db:	83 ec 0c             	sub    $0xc,%esp
c00082de:	50                   	push   %eax
c00082df:	e8 df 22 00 00       	call   c000a5c3 <dir_close>
c00082e4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:758
	return retval;
c00082e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:759
}
c00082ea:	c9                   	leave  
c00082eb:	c3                   	ret    

c00082ec <get_parent_dir_inode_nr>:
get_parent_dir_inode_nr():
/work/x86_os_my/fs/fs.c:762

/* 获得父目录的inode编号 */
static uint32_t get_parent_dir_inode_nr(uint32_t child_inode_nr, void* io_buf) {
c00082ec:	55                   	push   %ebp
c00082ed:	89 e5                	mov    %esp,%ebp
c00082ef:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/fs.c:763
   struct inode* child_dir_inode = inode_open(cur_part, child_inode_nr);
c00082f2:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c00082f7:	83 ec 08             	sub    $0x8,%esp
c00082fa:	ff 75 08             	pushl  0x8(%ebp)
c00082fd:	50                   	push   %eax
c00082fe:	e8 d7 09 00 00       	call   c0008cda <inode_open>
c0008303:	83 c4 10             	add    $0x10,%esp
c0008306:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:765
   /* 目录中的目录项".."中包括父目录inode编号,".."位于目录的第0块 */
   uint32_t block_lba = child_dir_inode->i_sectors[0];
c0008309:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000830c:	8b 40 10             	mov    0x10(%eax),%eax
c000830f:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:766
   ASSERT(block_lba >= cur_part->sb->data_start_lba);
c0008312:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0008317:	8b 40 1c             	mov    0x1c(%eax),%eax
c000831a:	8b 40 28             	mov    0x28(%eax),%eax
c000831d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0008320:	76 1c                	jbe    c000833e <get_parent_dir_inode_nr+0x52>
/work/x86_os_my/fs/fs.c:766 (discriminator 1)
c0008322:	68 cc d4 00 c0       	push   $0xc000d4cc
c0008327:	68 b4 d6 00 c0       	push   $0xc000d6b4
c000832c:	68 fe 02 00 00       	push   $0x2fe
c0008331:	68 59 ce 00 c0       	push   $0xc000ce59
c0008336:	e8 e6 9f ff ff       	call   c0002321 <panic_spin>
c000833b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:767
   inode_close(child_dir_inode);
c000833e:	83 ec 0c             	sub    $0xc,%esp
c0008341:	ff 75 f4             	pushl  -0xc(%ebp)
c0008344:	e8 d7 0a 00 00       	call   c0008e20 <inode_close>
c0008349:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:768
   ide_read(cur_part->my_disk, block_lba, io_buf, 1);
c000834c:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0008351:	8b 40 08             	mov    0x8(%eax),%eax
c0008354:	6a 01                	push   $0x1
c0008356:	ff 75 0c             	pushl  0xc(%ebp)
c0008359:	ff 75 f0             	pushl  -0x10(%ebp)
c000835c:	50                   	push   %eax
c000835d:	e8 77 dc ff ff       	call   c0005fd9 <ide_read>
c0008362:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:769
   struct dir_entry* dir_e = (struct dir_entry*)io_buf;
c0008365:	8b 45 0c             	mov    0xc(%ebp),%eax
c0008368:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:771
   /* 第0个目录项是".",第1个目录项是".." */
   ASSERT(dir_e[1].i_no < 4096 && dir_e[1].f_type == FT_DIRECTORY);
c000836b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000836e:	83 c0 18             	add    $0x18,%eax
c0008371:	8b 40 10             	mov    0x10(%eax),%eax
c0008374:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0008379:	77 0e                	ja     c0008389 <get_parent_dir_inode_nr+0x9d>
/work/x86_os_my/fs/fs.c:771 (discriminator 1)
c000837b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000837e:	83 c0 18             	add    $0x18,%eax
c0008381:	8b 40 14             	mov    0x14(%eax),%eax
c0008384:	83 f8 02             	cmp    $0x2,%eax
c0008387:	74 1c                	je     c00083a5 <get_parent_dir_inode_nr+0xb9>
/work/x86_os_my/fs/fs.c:771 (discriminator 3)
c0008389:	68 f8 d4 00 c0       	push   $0xc000d4f8
c000838e:	68 b4 d6 00 c0       	push   $0xc000d6b4
c0008393:	68 03 03 00 00       	push   $0x303
c0008398:	68 59 ce 00 c0       	push   $0xc000ce59
c000839d:	e8 7f 9f ff ff       	call   c0002321 <panic_spin>
c00083a2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:772
   return dir_e[1].i_no;	// 返回..即父目录的inode编号
c00083a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00083a8:	83 c0 18             	add    $0x18,%eax
c00083ab:	8b 40 10             	mov    0x10(%eax),%eax
/work/x86_os_my/fs/fs.c:773
}
c00083ae:	c9                   	leave  
c00083af:	c3                   	ret    

c00083b0 <get_child_dir_name>:
get_child_dir_name():
/work/x86_os_my/fs/fs.c:777

/* 在inode编号为p_inode_nr的目录中查找inode编号为c_inode_nr的子目录的名字,
 * 将名字存入缓冲区path.成功返回0,失败返-1 */
static int get_child_dir_name(uint32_t p_inode_nr, uint32_t c_inode_nr, char* path, void* io_buf) {
c00083b0:	55                   	push   %ebp
c00083b1:	89 e5                	mov    %esp,%ebp
c00083b3:	57                   	push   %edi
c00083b4:	81 ec 54 02 00 00    	sub    $0x254,%esp
/work/x86_os_my/fs/fs.c:778
	struct inode* parent_dir_inode = inode_open(cur_part, p_inode_nr);
c00083ba:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c00083bf:	83 ec 08             	sub    $0x8,%esp
c00083c2:	ff 75 08             	pushl  0x8(%ebp)
c00083c5:	50                   	push   %eax
c00083c6:	e8 0f 09 00 00       	call   c0008cda <inode_open>
c00083cb:	83 c4 10             	add    $0x10,%esp
c00083ce:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:780
	/* 填充all_blocks,将该目录的所占扇区地址全部写入all_blocks */
	uint8_t block_idx = 0;
c00083d1:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:781
	uint32_t all_blocks[140] = {0}, block_cnt = 12;
c00083d5:	8d 95 ac fd ff ff    	lea    -0x254(%ebp),%edx
c00083db:	b8 00 00 00 00       	mov    $0x0,%eax
c00083e0:	b9 8c 00 00 00       	mov    $0x8c,%ecx
c00083e5:	89 d7                	mov    %edx,%edi
c00083e7:	f3 ab                	rep stos %eax,%es:(%edi)
c00083e9:	c7 45 f0 0c 00 00 00 	movl   $0xc,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:782
	while (block_idx < 12) {
c00083f0:	eb 22                	jmp    c0008414 <get_child_dir_name+0x64>
/work/x86_os_my/fs/fs.c:783
		all_blocks[block_idx] = parent_dir_inode->i_sectors[block_idx];
c00083f2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00083f6:	0f b6 4d f7          	movzbl -0x9(%ebp),%ecx
c00083fa:	8b 55 e8             	mov    -0x18(%ebp),%edx
c00083fd:	83 c1 04             	add    $0x4,%ecx
c0008400:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
c0008403:	89 94 85 ac fd ff ff 	mov    %edx,-0x254(%ebp,%eax,4)
/work/x86_os_my/fs/fs.c:784
		block_idx++;
c000840a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000840e:	83 c0 01             	add    $0x1,%eax
c0008411:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:782
static int get_child_dir_name(uint32_t p_inode_nr, uint32_t c_inode_nr, char* path, void* io_buf) {
	struct inode* parent_dir_inode = inode_open(cur_part, p_inode_nr);
	/* 填充all_blocks,将该目录的所占扇区地址全部写入all_blocks */
	uint8_t block_idx = 0;
	uint32_t all_blocks[140] = {0}, block_cnt = 12;
	while (block_idx < 12) {
c0008414:	80 7d f7 0b          	cmpb   $0xb,-0x9(%ebp)
c0008418:	76 d8                	jbe    c00083f2 <get_child_dir_name+0x42>
/work/x86_os_my/fs/fs.c:786
		all_blocks[block_idx] = parent_dir_inode->i_sectors[block_idx];
		block_idx++;
	}
	if (parent_dir_inode->i_sectors[12]) {	// 若包含了一级间接块表,将共读入all_blocks.
c000841a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000841d:	8b 40 40             	mov    0x40(%eax),%eax
c0008420:	85 c0                	test   %eax,%eax
c0008422:	74 2c                	je     c0008450 <get_child_dir_name+0xa0>
/work/x86_os_my/fs/fs.c:787
		ide_read(cur_part->my_disk, parent_dir_inode->i_sectors[12], all_blocks + 12, 1);
c0008424:	8d 85 ac fd ff ff    	lea    -0x254(%ebp),%eax
c000842a:	83 c0 30             	add    $0x30,%eax
c000842d:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0008430:	8b 4a 40             	mov    0x40(%edx),%ecx
c0008433:	8b 15 d0 1f 01 c0    	mov    0xc0011fd0,%edx
c0008439:	8b 52 08             	mov    0x8(%edx),%edx
c000843c:	6a 01                	push   $0x1
c000843e:	50                   	push   %eax
c000843f:	51                   	push   %ecx
c0008440:	52                   	push   %edx
c0008441:	e8 93 db ff ff       	call   c0005fd9 <ide_read>
c0008446:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:788
		block_cnt = 140;
c0008449:	c7 45 f0 8c 00 00 00 	movl   $0x8c,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:790
	}
	inode_close(parent_dir_inode);
c0008450:	83 ec 0c             	sub    $0xc,%esp
c0008453:	ff 75 e8             	pushl  -0x18(%ebp)
c0008456:	e8 c5 09 00 00       	call   c0008e20 <inode_close>
c000845b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:792

	struct dir_entry* dir_e = (struct dir_entry*)io_buf;
c000845e:	8b 45 14             	mov    0x14(%ebp),%eax
c0008461:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/fs.c:793
	uint32_t dir_entry_size = cur_part->sb->dir_entry_size;
c0008464:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0008469:	8b 40 1c             	mov    0x1c(%eax),%eax
c000846c:	8b 40 30             	mov    0x30(%eax),%eax
c000846f:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/fs.c:794
	uint32_t dir_entrys_per_sec = (512 / dir_entry_size);
c0008472:	b8 00 02 00 00       	mov    $0x200,%eax
c0008477:	ba 00 00 00 00       	mov    $0x0,%edx
c000847c:	f7 75 e0             	divl   -0x20(%ebp)
c000847f:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/fs.c:795
	block_idx = 0;
c0008482:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:797
	/* 遍历所有块 */
	while(block_idx < block_cnt) {
c0008486:	e9 b1 00 00 00       	jmp    c000853c <get_child_dir_name+0x18c>
/work/x86_os_my/fs/fs.c:798
		if(all_blocks[block_idx]) {      // 如果相应块不为空则读入相应块
c000848b:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000848f:	8b 84 85 ac fd ff ff 	mov    -0x254(%ebp,%eax,4),%eax
c0008496:	85 c0                	test   %eax,%eax
c0008498:	0f 84 94 00 00 00    	je     c0008532 <get_child_dir_name+0x182>
/work/x86_os_my/fs/fs.c:799
			ide_read(cur_part->my_disk, all_blocks[block_idx], io_buf, 1);
c000849e:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00084a2:	8b 94 85 ac fd ff ff 	mov    -0x254(%ebp,%eax,4),%edx
c00084a9:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c00084ae:	8b 40 08             	mov    0x8(%eax),%eax
c00084b1:	6a 01                	push   $0x1
c00084b3:	ff 75 14             	pushl  0x14(%ebp)
c00084b6:	52                   	push   %edx
c00084b7:	50                   	push   %eax
c00084b8:	e8 1c db ff ff       	call   c0005fd9 <ide_read>
c00084bd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:800
			uint8_t dir_e_idx = 0;
c00084c0:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
/work/x86_os_my/fs/fs.c:802
			/* 遍历每个目录项 */
			while(dir_e_idx < dir_entrys_per_sec) {
c00084c4:	eb 63                	jmp    c0008529 <get_child_dir_name+0x179>
/work/x86_os_my/fs/fs.c:803
				if ((dir_e + dir_e_idx)->i_no == c_inode_nr) {
c00084c6:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c00084ca:	89 d0                	mov    %edx,%eax
c00084cc:	01 c0                	add    %eax,%eax
c00084ce:	01 d0                	add    %edx,%eax
c00084d0:	c1 e0 03             	shl    $0x3,%eax
c00084d3:	89 c2                	mov    %eax,%edx
c00084d5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00084d8:	01 d0                	add    %edx,%eax
c00084da:	8b 40 10             	mov    0x10(%eax),%eax
c00084dd:	3b 45 0c             	cmp    0xc(%ebp),%eax
c00084e0:	75 3d                	jne    c000851f <get_child_dir_name+0x16f>
/work/x86_os_my/fs/fs.c:804
					strcat(path, "/");
c00084e2:	83 ec 08             	sub    $0x8,%esp
c00084e5:	68 d3 cf 00 c0       	push   $0xc000cfd3
c00084ea:	ff 75 10             	pushl  0x10(%ebp)
c00084ed:	e8 d5 b5 ff ff       	call   c0003ac7 <strcat>
c00084f2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:805
					strcat(path, (dir_e + dir_e_idx)->filename);
c00084f5:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c00084f9:	89 d0                	mov    %edx,%eax
c00084fb:	01 c0                	add    %eax,%eax
c00084fd:	01 d0                	add    %edx,%eax
c00084ff:	c1 e0 03             	shl    $0x3,%eax
c0008502:	89 c2                	mov    %eax,%edx
c0008504:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0008507:	01 d0                	add    %edx,%eax
c0008509:	83 ec 08             	sub    $0x8,%esp
c000850c:	50                   	push   %eax
c000850d:	ff 75 10             	pushl  0x10(%ebp)
c0008510:	e8 b2 b5 ff ff       	call   c0003ac7 <strcat>
c0008515:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:806
					return 0;
c0008518:	b8 00 00 00 00       	mov    $0x0,%eax
c000851d:	eb 2f                	jmp    c000854e <get_child_dir_name+0x19e>
/work/x86_os_my/fs/fs.c:808
				}
				dir_e_idx++;
c000851f:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c0008523:	83 c0 01             	add    $0x1,%eax
c0008526:	88 45 ef             	mov    %al,-0x11(%ebp)
/work/x86_os_my/fs/fs.c:802
	while(block_idx < block_cnt) {
		if(all_blocks[block_idx]) {      // 如果相应块不为空则读入相应块
			ide_read(cur_part->my_disk, all_blocks[block_idx], io_buf, 1);
			uint8_t dir_e_idx = 0;
			/* 遍历每个目录项 */
			while(dir_e_idx < dir_entrys_per_sec) {
c0008529:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c000852d:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0008530:	72 94                	jb     c00084c6 <get_child_dir_name+0x116>
/work/x86_os_my/fs/fs.c:811
					return 0;
				}
				dir_e_idx++;
			}
		}
		block_idx++;
c0008532:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0008536:	83 c0 01             	add    $0x1,%eax
c0008539:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:797
	struct dir_entry* dir_e = (struct dir_entry*)io_buf;
	uint32_t dir_entry_size = cur_part->sb->dir_entry_size;
	uint32_t dir_entrys_per_sec = (512 / dir_entry_size);
	block_idx = 0;
	/* 遍历所有块 */
	while(block_idx < block_cnt) {
c000853c:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0008540:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0008543:	0f 82 42 ff ff ff    	jb     c000848b <get_child_dir_name+0xdb>
/work/x86_os_my/fs/fs.c:813
				dir_e_idx++;
			}
		}
		block_idx++;
	}
	return -1;
c0008549:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
/work/x86_os_my/fs/fs.c:814 (discriminator 1)
}
c000854e:	8b 7d fc             	mov    -0x4(%ebp),%edi
c0008551:	c9                   	leave  
c0008552:	c3                   	ret    

c0008553 <sys_getcwd>:
sys_getcwd():
/work/x86_os_my/fs/fs.c:819

/* 把当前工作目录绝对路径写入buf, size是buf的大小.
 当buf为NULL时,由操作系统分配存储工作路径的空间并返回地址
 失败则返回NULL */
char* sys_getcwd(char* buf, uint32_t size) {
c0008553:	55                   	push   %ebp
c0008554:	89 e5                	mov    %esp,%ebp
c0008556:	57                   	push   %edi
c0008557:	53                   	push   %ebx
c0008558:	81 ec 20 02 00 00    	sub    $0x220,%esp
/work/x86_os_my/fs/fs.c:822
	/* 确保buf不为空,若用户进程提供的buf为NULL,
	系统调用getcwd中要为用户进程通过malloc分配内存 */
	ASSERT(buf != NULL);
c000855e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0008562:	75 1c                	jne    c0008580 <sys_getcwd+0x2d>
/work/x86_os_my/fs/fs.c:822 (discriminator 1)
c0008564:	68 be d1 00 c0       	push   $0xc000d1be
c0008569:	68 cc d6 00 c0       	push   $0xc000d6cc
c000856e:	68 36 03 00 00       	push   $0x336
c0008573:	68 59 ce 00 c0       	push   $0xc000ce59
c0008578:	e8 a4 9d ff ff       	call   c0002321 <panic_spin>
c000857d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:823
	void* io_buf = sys_malloc(SECTOR_SIZE);
c0008580:	83 ec 0c             	sub    $0xc,%esp
c0008583:	68 00 02 00 00       	push   $0x200
c0008588:	e8 3f a7 ff ff       	call   c0002ccc <sys_malloc>
c000858d:	83 c4 10             	add    $0x10,%esp
c0008590:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:824
	if (io_buf == NULL) {
c0008593:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0008597:	75 0a                	jne    c00085a3 <sys_getcwd+0x50>
/work/x86_os_my/fs/fs.c:825
		return NULL;
c0008599:	b8 00 00 00 00       	mov    $0x0,%eax
c000859e:	e9 9d 01 00 00       	jmp    c0008740 <sys_getcwd+0x1ed>
/work/x86_os_my/fs/fs.c:828
	}

	struct task_struct* cur_thread = running_thread();
c00085a3:	e8 02 b6 ff ff       	call   c0003baa <running_thread>
c00085a8:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:829
	int32_t parent_inode_nr = 0;
c00085ab:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:830
	int32_t child_inode_nr = cur_thread->cwd_inode_nr;
c00085b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00085b5:	8b 80 0c 01 00 00    	mov    0x10c(%eax),%eax
c00085bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:831
	ASSERT(child_inode_nr >= 0 && child_inode_nr < 4096);	// inode位图，最大支持4096个inode
c00085be:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c00085c2:	78 09                	js     c00085cd <sys_getcwd+0x7a>
/work/x86_os_my/fs/fs.c:831 (discriminator 1)
c00085c4:	81 7d f4 ff 0f 00 00 	cmpl   $0xfff,-0xc(%ebp)
c00085cb:	7e 1c                	jle    c00085e9 <sys_getcwd+0x96>
/work/x86_os_my/fs/fs.c:831 (discriminator 3)
c00085cd:	68 30 d5 00 c0       	push   $0xc000d530
c00085d2:	68 cc d6 00 c0       	push   $0xc000d6cc
c00085d7:	68 3f 03 00 00       	push   $0x33f
c00085dc:	68 59 ce 00 c0       	push   $0xc000ce59
c00085e1:	e8 3b 9d ff ff       	call   c0002321 <panic_spin>
c00085e6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:833
	/* 若当前目录是根目录,直接返回'/' */
	if (child_inode_nr == 0) {
c00085e9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c00085ed:	75 25                	jne    c0008614 <sys_getcwd+0xc1>
/work/x86_os_my/fs/fs.c:834
		buf[0] = '/';
c00085ef:	8b 45 08             	mov    0x8(%ebp),%eax
c00085f2:	c6 00 2f             	movb   $0x2f,(%eax)
/work/x86_os_my/fs/fs.c:835
		buf[1] = 0;
c00085f5:	8b 45 08             	mov    0x8(%ebp),%eax
c00085f8:	83 c0 01             	add    $0x1,%eax
c00085fb:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/fs/fs.c:836
		sys_free(io_buf);
c00085fe:	83 ec 0c             	sub    $0xc,%esp
c0008601:	ff 75 f0             	pushl  -0x10(%ebp)
c0008604:	e8 f0 ac ff ff       	call   c00032f9 <sys_free>
c0008609:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:837
		return buf;
c000860c:	8b 45 08             	mov    0x8(%ebp),%eax
c000860f:	e9 2c 01 00 00       	jmp    c0008740 <sys_getcwd+0x1ed>
/work/x86_os_my/fs/fs.c:840
	}

	memset(buf, 0, size);
c0008614:	83 ec 04             	sub    $0x4,%esp
c0008617:	ff 75 0c             	pushl  0xc(%ebp)
c000861a:	6a 00                	push   $0x0
c000861c:	ff 75 08             	pushl  0x8(%ebp)
c000861f:	e8 9f b1 ff ff       	call   c00037c3 <memset>
c0008624:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:841
	char full_path_reverse[MAX_PATH_LEN] = {0};	// 用来做全路径缓冲区
c0008627:	8d 85 e2 fd ff ff    	lea    -0x21e(%ebp),%eax
c000862d:	b9 00 02 00 00       	mov    $0x200,%ecx
c0008632:	bb 00 00 00 00       	mov    $0x0,%ebx
c0008637:	89 18                	mov    %ebx,(%eax)
c0008639:	89 5c 08 fc          	mov    %ebx,-0x4(%eax,%ecx,1)
c000863d:	8d 50 04             	lea    0x4(%eax),%edx
c0008640:	83 e2 fc             	and    $0xfffffffc,%edx
c0008643:	29 d0                	sub    %edx,%eax
c0008645:	01 c1                	add    %eax,%ecx
c0008647:	83 e1 fc             	and    $0xfffffffc,%ecx
c000864a:	c1 e9 02             	shr    $0x2,%ecx
c000864d:	89 d7                	mov    %edx,%edi
c000864f:	89 d8                	mov    %ebx,%eax
c0008651:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/fs/fs.c:846

	/* 从下往上逐层找父目录,直到找到根目录为止.
	 * 当child_inode_nr为根目录的inode编号(0)时停止,
	 * 即已经查看完根目录中的目录项 */
	while ((child_inode_nr)) {
c0008653:	eb 52                	jmp    c00086a7 <sys_getcwd+0x154>
/work/x86_os_my/fs/fs.c:847
		parent_inode_nr = get_parent_dir_inode_nr(child_inode_nr, io_buf);
c0008655:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0008658:	83 ec 08             	sub    $0x8,%esp
c000865b:	ff 75 f0             	pushl  -0x10(%ebp)
c000865e:	50                   	push   %eax
c000865f:	e8 88 fc ff ff       	call   c00082ec <get_parent_dir_inode_nr>
c0008664:	83 c4 10             	add    $0x10,%esp
c0008667:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:848
		if (get_child_dir_name(parent_inode_nr, child_inode_nr, full_path_reverse, io_buf) == -1) {	// 或未找到名字,失败退出
c000866a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000866d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0008670:	ff 75 f0             	pushl  -0x10(%ebp)
c0008673:	8d 8d e2 fd ff ff    	lea    -0x21e(%ebp),%ecx
c0008679:	51                   	push   %ecx
c000867a:	52                   	push   %edx
c000867b:	50                   	push   %eax
c000867c:	e8 2f fd ff ff       	call   c00083b0 <get_child_dir_name>
c0008681:	83 c4 10             	add    $0x10,%esp
c0008684:	83 f8 ff             	cmp    $0xffffffff,%eax
c0008687:	75 18                	jne    c00086a1 <sys_getcwd+0x14e>
/work/x86_os_my/fs/fs.c:849
			sys_free(io_buf);
c0008689:	83 ec 0c             	sub    $0xc,%esp
c000868c:	ff 75 f0             	pushl  -0x10(%ebp)
c000868f:	e8 65 ac ff ff       	call   c00032f9 <sys_free>
c0008694:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:850
			return NULL;
c0008697:	b8 00 00 00 00       	mov    $0x0,%eax
c000869c:	e9 9f 00 00 00       	jmp    c0008740 <sys_getcwd+0x1ed>
/work/x86_os_my/fs/fs.c:852
		}
		child_inode_nr = parent_inode_nr;
c00086a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00086a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:846
	char full_path_reverse[MAX_PATH_LEN] = {0};	// 用来做全路径缓冲区

	/* 从下往上逐层找父目录,直到找到根目录为止.
	 * 当child_inode_nr为根目录的inode编号(0)时停止,
	 * 即已经查看完根目录中的目录项 */
	while ((child_inode_nr)) {
c00086a7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c00086ab:	75 a8                	jne    c0008655 <sys_getcwd+0x102>
/work/x86_os_my/fs/fs.c:854
			sys_free(io_buf);
			return NULL;
		}
		child_inode_nr = parent_inode_nr;
	}
	ASSERT(strlen(full_path_reverse) <= size);
c00086ad:	83 ec 0c             	sub    $0xc,%esp
c00086b0:	8d 85 e2 fd ff ff    	lea    -0x21e(%ebp),%eax
c00086b6:	50                   	push   %eax
c00086b7:	e8 91 b2 ff ff       	call   c000394d <strlen>
c00086bc:	83 c4 10             	add    $0x10,%esp
c00086bf:	3b 45 0c             	cmp    0xc(%ebp),%eax
c00086c2:	76 4e                	jbe    c0008712 <sys_getcwd+0x1bf>
/work/x86_os_my/fs/fs.c:854 (discriminator 1)
c00086c4:	68 60 d5 00 c0       	push   $0xc000d560
c00086c9:	68 cc d6 00 c0       	push   $0xc000d6cc
c00086ce:	68 56 03 00 00       	push   $0x356
c00086d3:	68 59 ce 00 c0       	push   $0xc000ce59
c00086d8:	e8 44 9c ff ff       	call   c0002321 <panic_spin>
c00086dd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:859 (discriminator 1)
	/* 至此 full_path_reverse 中的路径是反着的,
	 * 即子目录在前(左),父目录在后(右) ,
	 * 现将full_path_reverse中的路径反置 */
	char* last_slash;	// 用于记录字符串中最后一个斜杠地址
	while ((last_slash = strrchr(full_path_reverse, '/'))) {
c00086e0:	eb 30                	jmp    c0008712 <sys_getcwd+0x1bf>
/work/x86_os_my/fs/fs.c:860
		uint16_t len = strlen(buf);
c00086e2:	83 ec 0c             	sub    $0xc,%esp
c00086e5:	ff 75 08             	pushl  0x8(%ebp)
c00086e8:	e8 60 b2 ff ff       	call   c000394d <strlen>
c00086ed:	83 c4 10             	add    $0x10,%esp
c00086f0:	66 89 45 e2          	mov    %ax,-0x1e(%ebp)
/work/x86_os_my/fs/fs.c:861
		strcpy(buf + len, last_slash);
c00086f4:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c00086f8:	8b 45 08             	mov    0x8(%ebp),%eax
c00086fb:	01 d0                	add    %edx,%eax
c00086fd:	83 ec 08             	sub    $0x8,%esp
c0008700:	ff 75 e4             	pushl  -0x1c(%ebp)
c0008703:	50                   	push   %eax
c0008704:	e8 ef b1 ff ff       	call   c00038f8 <strcpy>
c0008709:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:863
		/* 在full_path_reverse中添加结束字符,做为下一次执行strcpy中last_slash的边界 */
		*last_slash = 0;
c000870c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000870f:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/fs/fs.c:859
	ASSERT(strlen(full_path_reverse) <= size);
	/* 至此 full_path_reverse 中的路径是反着的,
	 * 即子目录在前(左),父目录在后(右) ,
	 * 现将full_path_reverse中的路径反置 */
	char* last_slash;	// 用于记录字符串中最后一个斜杠地址
	while ((last_slash = strrchr(full_path_reverse, '/'))) {
c0008712:	83 ec 08             	sub    $0x8,%esp
c0008715:	6a 2f                	push   $0x2f
c0008717:	8d 85 e2 fd ff ff    	lea    -0x21e(%ebp),%eax
c000871d:	50                   	push   %eax
c000871e:	e8 46 b3 ff ff       	call   c0003a69 <strrchr>
c0008723:	83 c4 10             	add    $0x10,%esp
c0008726:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0008729:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c000872d:	75 b3                	jne    c00086e2 <sys_getcwd+0x18f>
/work/x86_os_my/fs/fs.c:865
		uint16_t len = strlen(buf);
		strcpy(buf + len, last_slash);
		/* 在full_path_reverse中添加结束字符,做为下一次执行strcpy中last_slash的边界 */
		*last_slash = 0;
	}
	sys_free(io_buf);
c000872f:	83 ec 0c             	sub    $0xc,%esp
c0008732:	ff 75 f0             	pushl  -0x10(%ebp)
c0008735:	e8 bf ab ff ff       	call   c00032f9 <sys_free>
c000873a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:866
	return buf;
c000873d:	8b 45 08             	mov    0x8(%ebp),%eax
/work/x86_os_my/fs/fs.c:867 (discriminator 2)
}
c0008740:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0008743:	5b                   	pop    %ebx
c0008744:	5f                   	pop    %edi
c0008745:	5d                   	pop    %ebp
c0008746:	c3                   	ret    

c0008747 <sys_chdir>:
sys_chdir():
/work/x86_os_my/fs/fs.c:870

/* 更改当前工作目录为绝对路径path,成功则返回0,失败返回-1 */
int32_t sys_chdir(const char* path) {
c0008747:	55                   	push   %ebp
c0008748:	89 e5                	mov    %esp,%ebp
c000874a:	81 ec 18 02 00 00    	sub    $0x218,%esp
/work/x86_os_my/fs/fs.c:871
	int32_t ret = -1;
c0008750:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:873
	struct path_search_record searched_record;
	memset(&searched_record, 0, sizeof(struct path_search_record));
c0008757:	83 ec 04             	sub    $0x4,%esp
c000875a:	68 08 02 00 00       	push   $0x208
c000875f:	6a 00                	push   $0x0
c0008761:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
c0008767:	50                   	push   %eax
c0008768:	e8 56 b0 ff ff       	call   c00037c3 <memset>
c000876d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:874
	int inode_no = search_file(path, &searched_record);
c0008770:	83 ec 08             	sub    $0x8,%esp
c0008773:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
c0008779:	50                   	push   %eax
c000877a:	ff 75 08             	pushl  0x8(%ebp)
c000877d:	e8 6c ea ff ff       	call   c00071ee <search_file>
c0008782:	83 c4 10             	add    $0x10,%esp
c0008785:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:875
	if (inode_no != -1) {
c0008788:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c000878c:	74 34                	je     c00087c2 <sys_chdir+0x7b>
/work/x86_os_my/fs/fs.c:876
		if (searched_record.file_type == FT_DIRECTORY) {
c000878e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008791:	83 f8 02             	cmp    $0x2,%eax
c0008794:	75 19                	jne    c00087af <sys_chdir+0x68>
/work/x86_os_my/fs/fs.c:877
			running_thread()->cwd_inode_nr = inode_no;
c0008796:	e8 0f b4 ff ff       	call   c0003baa <running_thread>
c000879b:	89 c2                	mov    %eax,%edx
c000879d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00087a0:	89 82 0c 01 00 00    	mov    %eax,0x10c(%edx)
/work/x86_os_my/fs/fs.c:878
			ret = 0;
c00087a6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c00087ad:	eb 13                	jmp    c00087c2 <sys_chdir+0x7b>
/work/x86_os_my/fs/fs.c:880
		} else {
			printk("sys_chdir: %s is regular file or other!\n", path);
c00087af:	83 ec 08             	sub    $0x8,%esp
c00087b2:	ff 75 08             	pushl  0x8(%ebp)
c00087b5:	68 84 d5 00 c0       	push   $0xc000d584
c00087ba:	e8 93 e2 ff ff       	call   c0006a52 <printk>
c00087bf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:883
		}
	}
	dir_close(searched_record.parent_dir);
c00087c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00087c5:	83 ec 0c             	sub    $0xc,%esp
c00087c8:	50                   	push   %eax
c00087c9:	e8 f5 1d 00 00       	call   c000a5c3 <dir_close>
c00087ce:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:884
	return ret;
c00087d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:885
}
c00087d4:	c9                   	leave  
c00087d5:	c3                   	ret    

c00087d6 <sys_stat>:
sys_stat():
/work/x86_os_my/fs/fs.c:888

/* 在buf中填充文件结构相关信息,成功时返回0,失败返回-1 */
int32_t sys_stat(const char* path, struct stat* buf) {
c00087d6:	55                   	push   %ebp
c00087d7:	89 e5                	mov    %esp,%ebp
c00087d9:	81 ec 28 02 00 00    	sub    $0x228,%esp
/work/x86_os_my/fs/fs.c:890
	/* 若直接查看根目录'/' */
	if (!strcmp(path, "/") || !strcmp(path, "/.") || !strcmp(path, "/..")) {
c00087df:	83 ec 08             	sub    $0x8,%esp
c00087e2:	68 d3 cf 00 c0       	push   $0xc000cfd3
c00087e7:	ff 75 08             	pushl  0x8(%ebp)
c00087ea:	e8 a9 b1 ff ff       	call   c0003998 <strcmp>
c00087ef:	83 c4 10             	add    $0x10,%esp
c00087f2:	84 c0                	test   %al,%al
c00087f4:	74 2e                	je     c0008824 <sys_stat+0x4e>
/work/x86_os_my/fs/fs.c:890 (discriminator 1)
c00087f6:	83 ec 08             	sub    $0x8,%esp
c00087f9:	68 d5 cf 00 c0       	push   $0xc000cfd5
c00087fe:	ff 75 08             	pushl  0x8(%ebp)
c0008801:	e8 92 b1 ff ff       	call   c0003998 <strcmp>
c0008806:	83 c4 10             	add    $0x10,%esp
c0008809:	84 c0                	test   %al,%al
c000880b:	74 17                	je     c0008824 <sys_stat+0x4e>
/work/x86_os_my/fs/fs.c:890 (discriminator 2)
c000880d:	83 ec 08             	sub    $0x8,%esp
c0008810:	68 d8 cf 00 c0       	push   $0xc000cfd8
c0008815:	ff 75 08             	pushl  0x8(%ebp)
c0008818:	e8 7b b1 ff ff       	call   c0003998 <strcmp>
c000881d:	83 c4 10             	add    $0x10,%esp
c0008820:	84 c0                	test   %al,%al
c0008822:	75 2b                	jne    c000884f <sys_stat+0x79>
/work/x86_os_my/fs/fs.c:891
		buf->st_filetype = FT_DIRECTORY;
c0008824:	8b 45 0c             	mov    0xc(%ebp),%eax
c0008827:	c7 40 08 02 00 00 00 	movl   $0x2,0x8(%eax)
/work/x86_os_my/fs/fs.c:892
		buf->st_ino = 0;
c000882e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0008831:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/fs/fs.c:893
		buf->st_size = root_dir.inode->i_size;
c0008837:	a1 60 21 01 c0       	mov    0xc0012160,%eax
c000883c:	8b 50 04             	mov    0x4(%eax),%edx
c000883f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0008842:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/fs.c:894
		return 0;
c0008845:	b8 00 00 00 00       	mov    $0x0,%eax
c000884a:	e9 af 00 00 00       	jmp    c00088fe <sys_stat+0x128>
/work/x86_os_my/fs/fs.c:897
	}

	int32_t ret = -1;	// 默认返回值
c000884f:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:899
	struct path_search_record searched_record;
	memset(&searched_record, 0, sizeof(struct path_search_record));   // 记得初始化或清0,否则栈中信息不知道是什么
c0008856:	83 ec 04             	sub    $0x4,%esp
c0008859:	68 08 02 00 00       	push   $0x208
c000885e:	6a 00                	push   $0x0
c0008860:	8d 85 e4 fd ff ff    	lea    -0x21c(%ebp),%eax
c0008866:	50                   	push   %eax
c0008867:	e8 57 af ff ff       	call   c00037c3 <memset>
c000886c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:900
	int inode_no = search_file(path, &searched_record);
c000886f:	83 ec 08             	sub    $0x8,%esp
c0008872:	8d 85 e4 fd ff ff    	lea    -0x21c(%ebp),%eax
c0008878:	50                   	push   %eax
c0008879:	ff 75 08             	pushl  0x8(%ebp)
c000887c:	e8 6d e9 ff ff       	call   c00071ee <search_file>
c0008881:	83 c4 10             	add    $0x10,%esp
c0008884:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:901
	if (inode_no != -1) {
c0008887:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c000888b:	74 4c                	je     c00088d9 <sys_stat+0x103>
/work/x86_os_my/fs/fs.c:902
		struct inode* obj_inode = inode_open(cur_part, inode_no);   // 只为获得文件大小
c000888d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0008890:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0008895:	83 ec 08             	sub    $0x8,%esp
c0008898:	52                   	push   %edx
c0008899:	50                   	push   %eax
c000889a:	e8 3b 04 00 00       	call   c0008cda <inode_open>
c000889f:	83 c4 10             	add    $0x10,%esp
c00088a2:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:903
		buf->st_size = obj_inode->i_size;
c00088a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00088a8:	8b 50 04             	mov    0x4(%eax),%edx
c00088ab:	8b 45 0c             	mov    0xc(%ebp),%eax
c00088ae:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/fs.c:904
		inode_close(obj_inode);
c00088b1:	83 ec 0c             	sub    $0xc,%esp
c00088b4:	ff 75 ec             	pushl  -0x14(%ebp)
c00088b7:	e8 64 05 00 00       	call   c0008e20 <inode_close>
c00088bc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:905
		buf->st_filetype = searched_record.file_type;
c00088bf:	8b 55 e8             	mov    -0x18(%ebp),%edx
c00088c2:	8b 45 0c             	mov    0xc(%ebp),%eax
c00088c5:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/fs/fs.c:906
		buf->st_ino = inode_no;
c00088c8:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00088cb:	8b 45 0c             	mov    0xc(%ebp),%eax
c00088ce:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/fs/fs.c:907
		ret = 0;
c00088d0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c00088d7:	eb 13                	jmp    c00088ec <sys_stat+0x116>
/work/x86_os_my/fs/fs.c:909
	} else {
		printk("sys_stat: %s not found\n", path);
c00088d9:	83 ec 08             	sub    $0x8,%esp
c00088dc:	ff 75 08             	pushl  0x8(%ebp)
c00088df:	68 ad d5 00 c0       	push   $0xc000d5ad
c00088e4:	e8 69 e1 ff ff       	call   c0006a52 <printk>
c00088e9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:911
	}
	dir_close(searched_record.parent_dir);
c00088ec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00088ef:	83 ec 0c             	sub    $0xc,%esp
c00088f2:	50                   	push   %eax
c00088f3:	e8 cb 1c 00 00       	call   c000a5c3 <dir_close>
c00088f8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:912
	return ret;
c00088fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:913 (discriminator 1)
}
c00088fe:	c9                   	leave  
c00088ff:	c3                   	ret    

c0008900 <sys_putchar>:
sys_putchar():
/work/x86_os_my/fs/fs.c:916

/* 向屏幕输出一个字符 */
void sys_putchar(char char_asci) {
c0008900:	55                   	push   %ebp
c0008901:	89 e5                	mov    %esp,%ebp
c0008903:	83 ec 18             	sub    $0x18,%esp
c0008906:	8b 45 08             	mov    0x8(%ebp),%eax
c0008909:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:917
	console_put_char(char_asci);
c000890c:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0008910:	0f b6 c0             	movzbl %al,%eax
c0008913:	83 ec 0c             	sub    $0xc,%esp
c0008916:	50                   	push   %eax
c0008917:	e8 15 bf ff ff       	call   c0004831 <console_put_char>
c000891c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:918
}
c000891f:	90                   	nop
c0008920:	c9                   	leave  
c0008921:	c3                   	ret    

c0008922 <filesys_init>:
filesys_init():
/work/x86_os_my/fs/fs.c:930
 * 只支持 partition_format 函数创建的文件系统，其魔数等于 0x19590318
 * 三层循环：遍历通道，遍历通道中的硬盘，遍历硬盘上的分区
 * 全局变量 channel_cnt 通道数，定义在 ide.c
 * 全局变量 channels 结构体，定义在 ide.c
 */
void filesys_init() {
c0008922:	55                   	push   %ebp
c0008923:	89 e5                	mov    %esp,%ebp
c0008925:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/fs/fs.c:931
	uint8_t channel_no = 0, dev_no, part_idx = 0;
c0008928:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
c000892c:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
/work/x86_os_my/fs/fs.c:934

	/* sb_buf用来存储从硬盘上读入的超级块 */
	struct super_block* sb_buf = (struct super_block*)sys_malloc(SECTOR_SIZE);
c0008930:	83 ec 0c             	sub    $0xc,%esp
c0008933:	68 00 02 00 00       	push   $0x200
c0008938:	e8 8f a3 ff ff       	call   c0002ccc <sys_malloc>
c000893d:	83 c4 10             	add    $0x10,%esp
c0008940:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:935
	if (sb_buf == NULL) {
c0008943:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0008947:	75 1c                	jne    c0008965 <filesys_init+0x43>
/work/x86_os_my/fs/fs.c:936
		PANIC("alloc memory failed!");
c0008949:	68 44 ce 00 c0       	push   $0xc000ce44
c000894e:	68 d8 d6 00 c0       	push   $0xc000d6d8
c0008953:	68 a8 03 00 00       	push   $0x3a8
c0008958:	68 59 ce 00 c0       	push   $0xc000ce59
c000895d:	e8 bf 99 ff ff       	call   c0002321 <panic_spin>
c0008962:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:939
	}

	printk("searching filesystem......\n");
c0008965:	83 ec 0c             	sub    $0xc,%esp
c0008968:	68 c5 d5 00 c0       	push   $0xc000d5c5
c000896d:	e8 e0 e0 ff ff       	call   c0006a52 <printk>
c0008972:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:941
	/* 遍历通道 */
	while (channel_no < channel_cnt) {
c0008975:	e9 1a 01 00 00       	jmp    c0008a94 <filesys_init+0x172>
/work/x86_os_my/fs/fs.c:942
		dev_no = 0;
c000897a:	c6 45 f6 00          	movb   $0x0,-0xa(%ebp)
/work/x86_os_my/fs/fs.c:944
		/* 遍历通道里的硬盘 */
		while(dev_no < 2) {
c000897e:	e9 fd 00 00 00       	jmp    c0008a80 <filesys_init+0x15e>
/work/x86_os_my/fs/fs.c:945
			if (dev_no == 0) {		// 跨过裸盘hd60M.img
c0008983:	80 7d f6 00          	cmpb   $0x0,-0xa(%ebp)
c0008987:	75 0f                	jne    c0008998 <filesys_init+0x76>
/work/x86_os_my/fs/fs.c:946
				dev_no++;
c0008989:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c000898d:	83 c0 01             	add    $0x1,%eax
c0008990:	88 45 f6             	mov    %al,-0xa(%ebp)
/work/x86_os_my/fs/fs.c:947
				continue;
c0008993:	e9 e8 00 00 00       	jmp    c0008a80 <filesys_init+0x15e>
/work/x86_os_my/fs/fs.c:949
			}
			struct disk* hd = &channels[channel_no].devices[dev_no];
c0008998:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000899c:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
c00089a0:	69 d2 10 03 00 00    	imul   $0x310,%edx,%edx
c00089a6:	69 c0 60 06 00 00    	imul   $0x660,%eax,%eax
c00089ac:	01 d0                	add    %edx,%eax
c00089ae:	83 c0 40             	add    $0x40,%eax
c00089b1:	05 00 13 01 c0       	add    $0xc0011300,%eax
c00089b6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/fs.c:950
			struct partition* part = hd->prim_parts;	// 主分区数组
c00089b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00089bc:	83 c0 10             	add    $0x10,%eax
c00089bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:952
			/* 遍历硬盘里的分区 */
			while(part_idx < 12) {						// 4个主分区+8个逻辑
c00089c2:	e9 a5 00 00 00       	jmp    c0008a6c <filesys_init+0x14a>
/work/x86_os_my/fs/fs.c:953
				if (part_idx == 4) {
c00089c7:	80 7d f5 04          	cmpb   $0x4,-0xb(%ebp)
c00089cb:	75 0b                	jne    c00089d8 <filesys_init+0xb6>
/work/x86_os_my/fs/fs.c:954
					part = hd->logic_parts;				// 逻辑分区数组
c00089cd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00089d0:	05 10 01 00 00       	add    $0x110,%eax
c00089d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:959
				}

				/* channels数组是全局变量,默认值为0
				 * 固 channels.disk.partition.sec_cnt 在未初始化时，也为0 */
				if (part->sec_cnt != 0) {	// 如果分区存在，以sec_cnt是否为0当判断依据
c00089d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00089db:	8b 40 04             	mov    0x4(%eax),%eax
c00089de:	85 c0                	test   %eax,%eax
c00089e0:	74 7c                	je     c0008a5e <filesys_init+0x13c>
/work/x86_os_my/fs/fs.c:960
					memset(sb_buf, 0, SECTOR_SIZE);
c00089e2:	83 ec 04             	sub    $0x4,%esp
c00089e5:	68 00 02 00 00       	push   $0x200
c00089ea:	6a 00                	push   $0x0
c00089ec:	ff 75 e8             	pushl  -0x18(%ebp)
c00089ef:	e8 cf ad ff ff       	call   c00037c3 <memset>
c00089f4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:963

					/* 读出分区的超级块，根据魔数判断是否存在我们定义的文件系统  */
					ide_read(hd, part->start_lba + 1, sb_buf, 1);
c00089f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00089fa:	8b 00                	mov    (%eax),%eax
c00089fc:	83 c0 01             	add    $0x1,%eax
c00089ff:	6a 01                	push   $0x1
c0008a01:	ff 75 e8             	pushl  -0x18(%ebp)
c0008a04:	50                   	push   %eax
c0008a05:	ff 75 e4             	pushl  -0x1c(%ebp)
c0008a08:	e8 cc d5 ff ff       	call   c0005fd9 <ide_read>
c0008a0d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:964
					if (sb_buf->magic == 0x19590318) {
c0008a10:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0008a13:	8b 00                	mov    (%eax),%eax
c0008a15:	3d 18 03 59 19       	cmp    $0x19590318,%eax
c0008a1a:	75 19                	jne    c0008a35 <filesys_init+0x113>
/work/x86_os_my/fs/fs.c:965
						printk("%s has filesystem\n", part->name);
c0008a1c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008a1f:	83 c0 14             	add    $0x14,%eax
c0008a22:	83 ec 08             	sub    $0x8,%esp
c0008a25:	50                   	push   %eax
c0008a26:	68 e1 d5 00 c0       	push   $0xc000d5e1
c0008a2b:	e8 22 e0 ff ff       	call   c0006a52 <printk>
c0008a30:	83 c4 10             	add    $0x10,%esp
c0008a33:	eb 29                	jmp    c0008a5e <filesys_init+0x13c>
/work/x86_os_my/fs/fs.c:968
					} else {
						// 不存在我们的文件系统，则进行格式化
						printk("formatting %s`s partition %s......\n", hd->name, part->name);
c0008a35:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008a38:	8d 50 14             	lea    0x14(%eax),%edx
c0008a3b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0008a3e:	83 ec 04             	sub    $0x4,%esp
c0008a41:	52                   	push   %edx
c0008a42:	50                   	push   %eax
c0008a43:	68 f4 d5 00 c0       	push   $0xc000d5f4
c0008a48:	e8 05 e0 ff ff       	call   c0006a52 <printk>
c0008a4d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:969
						partition_format(part);
c0008a50:	83 ec 0c             	sub    $0xc,%esp
c0008a53:	ff 75 f0             	pushl  -0x10(%ebp)
c0008a56:	e8 5e e2 ff ff       	call   c0006cb9 <partition_format>
c0008a5b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:972
					}
				}
				part_idx++;
c0008a5e:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0008a62:	83 c0 01             	add    $0x1,%eax
c0008a65:	88 45 f5             	mov    %al,-0xb(%ebp)
/work/x86_os_my/fs/fs.c:973
				part++;
c0008a68:	83 45 f0 40          	addl   $0x40,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:952
				continue;
			}
			struct disk* hd = &channels[channel_no].devices[dev_no];
			struct partition* part = hd->prim_parts;	// 主分区数组
			/* 遍历硬盘里的分区 */
			while(part_idx < 12) {						// 4个主分区+8个逻辑
c0008a6c:	80 7d f5 0b          	cmpb   $0xb,-0xb(%ebp)
c0008a70:	0f 86 51 ff ff ff    	jbe    c00089c7 <filesys_init+0xa5>
/work/x86_os_my/fs/fs.c:975
					}
				}
				part_idx++;
				part++;
			}	/* end of 遍历分区 */
			dev_no++;
c0008a76:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0008a7a:	83 c0 01             	add    $0x1,%eax
c0008a7d:	88 45 f6             	mov    %al,-0xa(%ebp)
/work/x86_os_my/fs/fs.c:944
	printk("searching filesystem......\n");
	/* 遍历通道 */
	while (channel_no < channel_cnt) {
		dev_no = 0;
		/* 遍历通道里的硬盘 */
		while(dev_no < 2) {
c0008a80:	80 7d f6 01          	cmpb   $0x1,-0xa(%ebp)
c0008a84:	0f 86 f9 fe ff ff    	jbe    c0008983 <filesys_init+0x61>
/work/x86_os_my/fs/fs.c:977
				part_idx++;
				part++;
			}	/* end of 遍历分区 */
			dev_no++;
		}	/* end of 遍历硬盘 */
		channel_no++;
c0008a8a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0008a8e:	83 c0 01             	add    $0x1,%eax
c0008a91:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:941
		PANIC("alloc memory failed!");
	}

	printk("searching filesystem......\n");
	/* 遍历通道 */
	while (channel_no < channel_cnt) {
c0008a94:	0f b6 05 e0 12 01 c0 	movzbl 0xc00112e0,%eax
c0008a9b:	38 45 f7             	cmp    %al,-0x9(%ebp)
c0008a9e:	0f 82 d6 fe ff ff    	jb     c000897a <filesys_init+0x58>
/work/x86_os_my/fs/fs.c:979
			}	/* end of 遍历分区 */
			dev_no++;
		}	/* end of 遍历硬盘 */
		channel_no++;
	}	/* end of 遍历通道 */
	sys_free(sb_buf);
c0008aa4:	83 ec 0c             	sub    $0xc,%esp
c0008aa7:	ff 75 e8             	pushl  -0x18(%ebp)
c0008aaa:	e8 4a a8 ff ff       	call   c00032f9 <sys_free>
c0008aaf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:984


	/* 挂载分区 */
	/* 默认操作的分区 */
	char default_part[8] = "sdb1";
c0008ab2:	c7 45 dc 73 64 62 31 	movl   $0x31626473,-0x24(%ebp)
c0008ab9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
/work/x86_os_my/fs/fs.c:995
	参数：
	partition_list 是所有分区的链表
	mount_partition 是挂载分区的函数
	(int)default_part 将数组地址转换成整型作为 mount_partition 的参数
	*/
	list_traversal(&partition_list, mount_partition, (int)default_part);
c0008ac0:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0008ac3:	83 ec 04             	sub    $0x4,%esp
c0008ac6:	50                   	push   %eax
c0008ac7:	68 ae 6a 00 c0       	push   $0xc0006aae
c0008acc:	68 c0 1f 01 c0       	push   $0xc0011fc0
c0008ad1:	e8 21 bc ff ff       	call   c00046f7 <list_traversal>
c0008ad6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:999


	/* 将当前分区的根目录打开 + 初始化文件表 */
	open_root_dir(cur_part);
c0008ad9:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0008ade:	83 ec 0c             	sub    $0xc,%esp
c0008ae1:	50                   	push   %eax
c0008ae2:	e8 94 18 00 00       	call   c000a37b <open_root_dir>
c0008ae7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:1000
	uint32_t fd_idx = 0;
c0008aea:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:1001
	while (fd_idx < MAX_FILE_OPEN) {
c0008af1:	eb 1d                	jmp    c0008b10 <filesys_init+0x1ee>
/work/x86_os_my/fs/fs.c:1002
		file_table[fd_idx++].fd_inode = NULL;
c0008af3:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0008af6:	8d 42 01             	lea    0x1(%edx),%eax
c0008af9:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0008afc:	89 d0                	mov    %edx,%eax
c0008afe:	01 c0                	add    %eax,%eax
c0008b00:	01 d0                	add    %edx,%eax
c0008b02:	c1 e0 02             	shl    $0x2,%eax
c0008b05:	05 e8 1f 01 c0       	add    $0xc0011fe8,%eax
c0008b0a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/fs/fs.c:1001


	/* 将当前分区的根目录打开 + 初始化文件表 */
	open_root_dir(cur_part);
	uint32_t fd_idx = 0;
	while (fd_idx < MAX_FILE_OPEN) {
c0008b10:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
c0008b14:	76 dd                	jbe    c0008af3 <filesys_init+0x1d1>
/work/x86_os_my/fs/fs.c:1004
		file_table[fd_idx++].fd_inode = NULL;
	}
}
c0008b16:	90                   	nop
c0008b17:	c9                   	leave  
c0008b18:	c3                   	ret    

c0008b19 <inode_locate>:
inode_locate():
/work/x86_os_my/fs/inode.c:23
};

/* 获取inode所在的扇区和扇区内的偏移量
 * out: inode_pos
 */
static void inode_locate(struct partition* part, uint32_t inode_no, struct inode_position* inode_pos) {
c0008b19:	55                   	push   %ebp
c0008b1a:	89 e5                	mov    %esp,%ebp
c0008b1c:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/fs/inode.c:25
	/* inode_table在硬盘上是连续的 */
	ASSERT(inode_no < 4096);
c0008b1f:	81 7d 0c ff 0f 00 00 	cmpl   $0xfff,0xc(%ebp)
c0008b26:	76 19                	jbe    c0008b41 <inode_locate+0x28>
/work/x86_os_my/fs/inode.c:25 (discriminator 1)
c0008b28:	68 e8 d6 00 c0       	push   $0xc000d6e8
c0008b2d:	68 70 d7 00 c0       	push   $0xc000d770
c0008b32:	6a 19                	push   $0x19
c0008b34:	68 f8 d6 00 c0       	push   $0xc000d6f8
c0008b39:	e8 e3 97 ff ff       	call   c0002321 <panic_spin>
c0008b3e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:26
	uint32_t inode_table_lba = part->sb->inode_table_lba;
c0008b41:	8b 45 08             	mov    0x8(%ebp),%eax
c0008b44:	8b 40 1c             	mov    0x1c(%eax),%eax
c0008b47:	8b 40 20             	mov    0x20(%eax),%eax
c0008b4a:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/inode.c:28

	uint32_t inode_size = sizeof(struct inode);
c0008b4d:	c7 45 f0 4c 00 00 00 	movl   $0x4c,-0x10(%ebp)
/work/x86_os_my/fs/inode.c:29
	uint32_t off_size = inode_no * inode_size;	// 第inode_no号inode相对于inode_table_lba的字节偏移量
c0008b54:	8b 45 0c             	mov    0xc(%ebp),%eax
c0008b57:	0f af 45 f0          	imul   -0x10(%ebp),%eax
c0008b5b:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/inode.c:30
	uint32_t off_sec  = off_size / 512;			// 第inode_no号inode相对于inode_table_lba的扇区偏移量
c0008b5e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008b61:	c1 e8 09             	shr    $0x9,%eax
c0008b64:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/inode.c:31
	uint32_t off_size_in_sec = off_size % 512;	// 待查找的inode所在扇区中的起始地址
c0008b67:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008b6a:	25 ff 01 00 00       	and    $0x1ff,%eax
c0008b6f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/inode.c:34

	/* 判断此inode是否跨越2个扇区 */
	uint32_t left_in_sec = 512 - off_size_in_sec;
c0008b72:	b8 00 02 00 00       	mov    $0x200,%eax
c0008b77:	2b 45 e4             	sub    -0x1c(%ebp),%eax
c0008b7a:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/inode.c:36
	// 若扇区内剩下的空间不足以容纳一个inode,必然是inode跨越了2个扇区
	if (left_in_sec < inode_size ) {
c0008b7d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0008b80:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0008b83:	73 0b                	jae    c0008b90 <inode_locate+0x77>
/work/x86_os_my/fs/inode.c:37
		inode_pos->two_sec = true;	//跨越了
c0008b85:	8b 45 10             	mov    0x10(%ebp),%eax
c0008b88:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0008b8e:	eb 09                	jmp    c0008b99 <inode_locate+0x80>
/work/x86_os_my/fs/inode.c:39
	} else {
		inode_pos->two_sec = false;
c0008b90:	8b 45 10             	mov    0x10(%ebp),%eax
c0008b93:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/fs/inode.c:41
	}
	inode_pos->sec_lba = inode_table_lba + off_sec;
c0008b99:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0008b9c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0008b9f:	01 c2                	add    %eax,%edx
c0008ba1:	8b 45 10             	mov    0x10(%ebp),%eax
c0008ba4:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/inode.c:42
	inode_pos->off_size = off_size_in_sec;
c0008ba7:	8b 45 10             	mov    0x10(%ebp),%eax
c0008baa:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0008bad:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/fs/inode.c:43
}
c0008bb0:	90                   	nop
c0008bb1:	c9                   	leave  
c0008bb2:	c3                   	ret    

c0008bb3 <inode_sync>:
inode_sync():
/work/x86_os_my/fs/inode.c:51
io_buf是用于硬盘io的缓冲区，它由主调函数提供！
原因是
一般情况下把内存中的数据同步到硬盘都是最后的操作，其前已经做了大量工作，
若到这最后一步时才申请内存失败，前面的所有操作都白费了，还要回滚到之前的旧状态，代价太大
*/
void inode_sync(struct partition* part, struct inode* inode, void* io_buf) {
c0008bb3:	55                   	push   %ebp
c0008bb4:	89 e5                	mov    %esp,%ebp
c0008bb6:	83 ec 68             	sub    $0x68,%esp
/work/x86_os_my/fs/inode.c:52
	uint8_t inode_no = inode->i_no;
c0008bb9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0008bbc:	8b 00                	mov    (%eax),%eax
c0008bbe:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/inode.c:54
	struct inode_position inode_pos;
	inode_locate(part, inode_no, &inode_pos);	// inode位置信息会存入inode_pos
c0008bc1:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0008bc5:	83 ec 04             	sub    $0x4,%esp
c0008bc8:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0008bcb:	52                   	push   %edx
c0008bcc:	50                   	push   %eax
c0008bcd:	ff 75 08             	pushl  0x8(%ebp)
c0008bd0:	e8 44 ff ff ff       	call   c0008b19 <inode_locate>
c0008bd5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:55
	ASSERT(inode_pos.sec_lba <= (part->start_lba + part->sec_cnt));
c0008bd8:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0008bdb:	8b 45 08             	mov    0x8(%ebp),%eax
c0008bde:	8b 08                	mov    (%eax),%ecx
c0008be0:	8b 45 08             	mov    0x8(%ebp),%eax
c0008be3:	8b 40 04             	mov    0x4(%eax),%eax
c0008be6:	01 c8                	add    %ecx,%eax
c0008be8:	39 c2                	cmp    %eax,%edx
c0008bea:	76 19                	jbe    c0008c05 <inode_sync+0x52>
/work/x86_os_my/fs/inode.c:55 (discriminator 1)
c0008bec:	68 04 d7 00 c0       	push   $0xc000d704
c0008bf1:	68 80 d7 00 c0       	push   $0xc000d780
c0008bf6:	6a 37                	push   $0x37
c0008bf8:	68 f8 d6 00 c0       	push   $0xc000d6f8
c0008bfd:	e8 1f 97 ff ff       	call   c0002321 <panic_spin>
c0008c02:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:62
	/* 硬盘中的inode中的成员inode_tag和i_open_cnts是不需要的，
	* 它们只在内存中有效，记录链表位置和被多少进程共享，
	* 将inode同步到硬盘时,清掉这三项即可。
	*/
	struct inode pure_inode;
	memcpy(&pure_inode, inode, sizeof(struct inode));
c0008c05:	83 ec 04             	sub    $0x4,%esp
c0008c08:	6a 4c                	push   $0x4c
c0008c0a:	ff 75 0c             	pushl  0xc(%ebp)
c0008c0d:	8d 45 98             	lea    -0x68(%ebp),%eax
c0008c10:	50                   	push   %eax
c0008c11:	e8 ff ab ff ff       	call   c0003815 <memcpy>
c0008c16:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:63
	pure_inode.i_open_cnts = 0;
c0008c19:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
/work/x86_os_my/fs/inode.c:64
	pure_inode.write_deny = false;	// 置为false,以保证在硬盘中读出时为可写
c0008c20:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
/work/x86_os_my/fs/inode.c:65
	pure_inode.inode_tag.prev = pure_inode.inode_tag.next = NULL;
c0008c27:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c0008c2e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0008c31:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/inode.c:67

	char* inode_buf = (char*)io_buf;
c0008c34:	8b 45 10             	mov    0x10(%ebp),%eax
c0008c37:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/inode.c:69
	// 若inode结构，跨了两个扇区,就要读出两个扇区再写入两个扇区
	if (inode_pos.two_sec) {
c0008c3a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0008c3d:	85 c0                	test   %eax,%eax
c0008c3f:	74 4c                	je     c0008c8d <inode_sync+0xda>
/work/x86_os_my/fs/inode.c:72
		/* 读写硬盘是以扇区为单位的
		所以需要将待写入的inode结构拼入到这2个扇区的中间位置 */
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 2);	// inode_table在格式化时，写入硬盘是连续写入的，所以读入2块扇区
c0008c41:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0008c44:	8b 45 08             	mov    0x8(%ebp),%eax
c0008c47:	8b 40 08             	mov    0x8(%eax),%eax
c0008c4a:	6a 02                	push   $0x2
c0008c4c:	ff 75 f0             	pushl  -0x10(%ebp)
c0008c4f:	52                   	push   %edx
c0008c50:	50                   	push   %eax
c0008c51:	e8 83 d3 ff ff       	call   c0005fd9 <ide_read>
c0008c56:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:73
		memcpy((inode_buf + inode_pos.off_size), &pure_inode, sizeof(struct inode));	// inode_buf+inode在扇区中的偏移
c0008c59:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0008c5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008c5f:	01 c2                	add    %eax,%edx
c0008c61:	83 ec 04             	sub    $0x4,%esp
c0008c64:	6a 4c                	push   $0x4c
c0008c66:	8d 45 98             	lea    -0x68(%ebp),%eax
c0008c69:	50                   	push   %eax
c0008c6a:	52                   	push   %edx
c0008c6b:	e8 a5 ab ff ff       	call   c0003815 <memcpy>
c0008c70:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:74
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 2);
c0008c73:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0008c76:	8b 45 08             	mov    0x8(%ebp),%eax
c0008c79:	8b 40 08             	mov    0x8(%eax),%eax
c0008c7c:	6a 02                	push   $0x2
c0008c7e:	ff 75 f0             	pushl  -0x10(%ebp)
c0008c81:	52                   	push   %edx
c0008c82:	50                   	push   %eax
c0008c83:	e8 c5 d4 ff ff       	call   c000614d <ide_write>
c0008c88:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:81
		// 若inode结构，只在一个扇区中
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
		memcpy((inode_buf + inode_pos.off_size), &pure_inode, sizeof(struct inode));	// inode_buf+inode在扇区中的偏移
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
	}
}
c0008c8b:	eb 4a                	jmp    c0008cd7 <inode_sync+0x124>
/work/x86_os_my/fs/inode.c:77
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 2);	// inode_table在格式化时，写入硬盘是连续写入的，所以读入2块扇区
		memcpy((inode_buf + inode_pos.off_size), &pure_inode, sizeof(struct inode));	// inode_buf+inode在扇区中的偏移
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 2);
	} else {
		// 若inode结构，只在一个扇区中
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
c0008c8d:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0008c90:	8b 45 08             	mov    0x8(%ebp),%eax
c0008c93:	8b 40 08             	mov    0x8(%eax),%eax
c0008c96:	6a 01                	push   $0x1
c0008c98:	ff 75 f0             	pushl  -0x10(%ebp)
c0008c9b:	52                   	push   %edx
c0008c9c:	50                   	push   %eax
c0008c9d:	e8 37 d3 ff ff       	call   c0005fd9 <ide_read>
c0008ca2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:78
		memcpy((inode_buf + inode_pos.off_size), &pure_inode, sizeof(struct inode));	// inode_buf+inode在扇区中的偏移
c0008ca5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0008ca8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008cab:	01 c2                	add    %eax,%edx
c0008cad:	83 ec 04             	sub    $0x4,%esp
c0008cb0:	6a 4c                	push   $0x4c
c0008cb2:	8d 45 98             	lea    -0x68(%ebp),%eax
c0008cb5:	50                   	push   %eax
c0008cb6:	52                   	push   %edx
c0008cb7:	e8 59 ab ff ff       	call   c0003815 <memcpy>
c0008cbc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:79
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
c0008cbf:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0008cc2:	8b 45 08             	mov    0x8(%ebp),%eax
c0008cc5:	8b 40 08             	mov    0x8(%eax),%eax
c0008cc8:	6a 01                	push   $0x1
c0008cca:	ff 75 f0             	pushl  -0x10(%ebp)
c0008ccd:	52                   	push   %edx
c0008cce:	50                   	push   %eax
c0008ccf:	e8 79 d4 ff ff       	call   c000614d <ide_write>
c0008cd4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:81
	}
}
c0008cd7:	90                   	nop
c0008cd8:	c9                   	leave  
c0008cd9:	c3                   	ret    

c0008cda <inode_open>:
inode_open():
/work/x86_os_my/fs/inode.c:84

/* 根据i结点号，获取到相应的inode结构，插入到inode缓存队列，并返回它 */
struct inode* inode_open(struct partition* part, uint32_t inode_no) {
c0008cda:	55                   	push   %ebp
c0008cdb:	89 e5                	mov    %esp,%ebp
c0008cdd:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/fs/inode.c:86
	/* 1.先在已打开inode链表中找inode，此链表作用是提速 */
	struct list_elem* elem = part->open_inodes.head.next;
c0008ce0:	8b 45 08             	mov    0x8(%ebp),%eax
c0008ce3:	8b 40 34             	mov    0x34(%eax),%eax
c0008ce6:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/inode.c:88
	struct inode* inode_found;
	while (elem != &part->open_inodes.tail) {
c0008ce9:	eb 33                	jmp    c0008d1e <inode_open+0x44>
/work/x86_os_my/fs/inode.c:89
		inode_found = elem2entry(struct inode, inode_tag, elem);
c0008ceb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0008cee:	83 e8 44             	sub    $0x44,%eax
c0008cf1:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/inode.c:90
		if (inode_found->i_no == inode_no) {
c0008cf4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008cf7:	8b 00                	mov    (%eax),%eax
c0008cf9:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0008cfc:	75 17                	jne    c0008d15 <inode_open+0x3b>
/work/x86_os_my/fs/inode.c:91
			inode_found->i_open_cnts++;
c0008cfe:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008d01:	8b 40 08             	mov    0x8(%eax),%eax
c0008d04:	8d 50 01             	lea    0x1(%eax),%edx
c0008d07:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008d0a:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/fs/inode.c:92
			return inode_found;
c0008d0d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008d10:	e9 09 01 00 00       	jmp    c0008e1e <inode_open+0x144>
/work/x86_os_my/fs/inode.c:94
		}
		elem = elem->next;
c0008d15:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0008d18:	8b 40 04             	mov    0x4(%eax),%eax
c0008d1b:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/inode.c:88
/* 根据i结点号，获取到相应的inode结构，插入到inode缓存队列，并返回它 */
struct inode* inode_open(struct partition* part, uint32_t inode_no) {
	/* 1.先在已打开inode链表中找inode，此链表作用是提速 */
	struct list_elem* elem = part->open_inodes.head.next;
	struct inode* inode_found;
	while (elem != &part->open_inodes.tail) {
c0008d1e:	8b 45 08             	mov    0x8(%ebp),%eax
c0008d21:	83 c0 38             	add    $0x38,%eax
c0008d24:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0008d27:	75 c2                	jne    c0008ceb <inode_open+0x11>
/work/x86_os_my/fs/inode.c:100
	}

	
	/* 2.open_inodes链表中找不到，从硬盘上读入此inode并加入到inode缓存链表 */
	struct inode_position inode_pos;	// 记录inode位置的结构
	inode_locate(part, inode_no, &inode_pos);
c0008d29:	83 ec 04             	sub    $0x4,%esp
c0008d2c:	8d 45 d8             	lea    -0x28(%ebp),%eax
c0008d2f:	50                   	push   %eax
c0008d30:	ff 75 0c             	pushl  0xc(%ebp)
c0008d33:	ff 75 08             	pushl  0x8(%ebp)
c0008d36:	e8 de fd ff ff       	call   c0008b19 <inode_locate>
c0008d3b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:104

	/* 为使通过sys_malloc创建的新inode被所有任务共享，需要将inode置于内核空间
	故临时将cur_pbc->pgdir置为NULL，sys_malloc就会以为是从内核空间分配 */
	struct task_struct* cur = running_thread();
c0008d3e:	e8 67 ae ff ff       	call   c0003baa <running_thread>
c0008d43:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/inode.c:105
	uint32_t* cur_pagedir_bak = cur->pgdir;
c0008d46:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0008d49:	8b 40 54             	mov    0x54(%eax),%eax
c0008d4c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/inode.c:106
	cur->pgdir = NULL;
c0008d4f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0008d52:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
/work/x86_os_my/fs/inode.c:107
	inode_found = (struct inode*)sys_malloc(sizeof(struct inode));
c0008d59:	83 ec 0c             	sub    $0xc,%esp
c0008d5c:	6a 4c                	push   $0x4c
c0008d5e:	e8 69 9f ff ff       	call   c0002ccc <sys_malloc>
c0008d63:	83 c4 10             	add    $0x10,%esp
c0008d66:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/inode.c:108
	cur->pgdir = cur_pagedir_bak;	// 恢复pgdir
c0008d69:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0008d6c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0008d6f:	89 50 54             	mov    %edx,0x54(%eax)
/work/x86_os_my/fs/inode.c:111

	char* inode_buf;
	if (inode_pos.two_sec) {	// inode结构跨扇区了
c0008d72:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0008d75:	85 c0                	test   %eax,%eax
c0008d77:	74 2d                	je     c0008da6 <inode_open+0xcc>
/work/x86_os_my/fs/inode.c:112
		inode_buf = (char*)sys_malloc(1024);
c0008d79:	83 ec 0c             	sub    $0xc,%esp
c0008d7c:	68 00 04 00 00       	push   $0x400
c0008d81:	e8 46 9f ff ff       	call   c0002ccc <sys_malloc>
c0008d86:	83 c4 10             	add    $0x10,%esp
c0008d89:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/inode.c:114
		// inode_table在格式化时，写入硬盘是连续写入的，所以可以连续读入2块扇区
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 2);
c0008d8c:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0008d8f:	8b 45 08             	mov    0x8(%ebp),%eax
c0008d92:	8b 40 08             	mov    0x8(%eax),%eax
c0008d95:	6a 02                	push   $0x2
c0008d97:	ff 75 f0             	pushl  -0x10(%ebp)
c0008d9a:	52                   	push   %edx
c0008d9b:	50                   	push   %eax
c0008d9c:	e8 38 d2 ff ff       	call   c0005fd9 <ide_read>
c0008da1:	83 c4 10             	add    $0x10,%esp
c0008da4:	eb 2b                	jmp    c0008dd1 <inode_open+0xf7>
/work/x86_os_my/fs/inode.c:116
	} else {
		inode_buf = (char*)sys_malloc(512);
c0008da6:	83 ec 0c             	sub    $0xc,%esp
c0008da9:	68 00 02 00 00       	push   $0x200
c0008dae:	e8 19 9f ff ff       	call   c0002ccc <sys_malloc>
c0008db3:	83 c4 10             	add    $0x10,%esp
c0008db6:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/inode.c:117
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
c0008db9:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0008dbc:	8b 45 08             	mov    0x8(%ebp),%eax
c0008dbf:	8b 40 08             	mov    0x8(%eax),%eax
c0008dc2:	6a 01                	push   $0x1
c0008dc4:	ff 75 f0             	pushl  -0x10(%ebp)
c0008dc7:	52                   	push   %edx
c0008dc8:	50                   	push   %eax
c0008dc9:	e8 0b d2 ff ff       	call   c0005fd9 <ide_read>
c0008dce:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:119
	}
	memcpy(inode_found, inode_buf + inode_pos.off_size, sizeof(struct inode));	// inode_buf+inode在扇区中的偏移
c0008dd1:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0008dd4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008dd7:	01 d0                	add    %edx,%eax
c0008dd9:	83 ec 04             	sub    $0x4,%esp
c0008ddc:	6a 4c                	push   $0x4c
c0008dde:	50                   	push   %eax
c0008ddf:	ff 75 ec             	pushl  -0x14(%ebp)
c0008de2:	e8 2e aa ff ff       	call   c0003815 <memcpy>
c0008de7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:123

	
	/* 3.马上要用这个inode，固插入到队首 */
	list_push(&part->open_inodes, &inode_found->inode_tag);
c0008dea:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008ded:	8d 50 44             	lea    0x44(%eax),%edx
c0008df0:	8b 45 08             	mov    0x8(%ebp),%eax
c0008df3:	83 c0 30             	add    $0x30,%eax
c0008df6:	83 ec 08             	sub    $0x8,%esp
c0008df9:	52                   	push   %edx
c0008dfa:	50                   	push   %eax
c0008dfb:	e8 24 b8 ff ff       	call   c0004624 <list_push>
c0008e00:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:124
	inode_found->i_open_cnts = 1;
c0008e03:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008e06:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/fs/inode.c:126

	sys_free(inode_buf);
c0008e0d:	83 ec 0c             	sub    $0xc,%esp
c0008e10:	ff 75 f0             	pushl  -0x10(%ebp)
c0008e13:	e8 e1 a4 ff ff       	call   c00032f9 <sys_free>
c0008e18:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:127
	return inode_found;
c0008e1b:	8b 45 ec             	mov    -0x14(%ebp),%eax
/work/x86_os_my/fs/inode.c:128 (discriminator 1)
}
c0008e1e:	c9                   	leave  
c0008e1f:	c3                   	ret    

c0008e20 <inode_close>:
inode_close():
/work/x86_os_my/fs/inode.c:132

/* 关闭inode或减少inode的打开数 */
//1.从inode队列踢掉 2.释放内核内存池中的这个inode内存
void inode_close(struct inode* inode) {
c0008e20:	55                   	push   %ebp
c0008e21:	89 e5                	mov    %esp,%ebp
c0008e23:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/inode.c:134
	/* 若没有进程再打开此文件,将此inode去掉并释放空间 */
	enum intr_status old_status = intr_disable();
c0008e26:	e8 15 8b ff ff       	call   c0001940 <intr_disable>
c0008e2b:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/inode.c:135
	if (--inode->i_open_cnts == 0) {
c0008e2e:	8b 45 08             	mov    0x8(%ebp),%eax
c0008e31:	8b 40 08             	mov    0x8(%eax),%eax
c0008e34:	8d 50 ff             	lea    -0x1(%eax),%edx
c0008e37:	8b 45 08             	mov    0x8(%ebp),%eax
c0008e3a:	89 50 08             	mov    %edx,0x8(%eax)
c0008e3d:	8b 45 08             	mov    0x8(%ebp),%eax
c0008e40:	8b 40 08             	mov    0x8(%eax),%eax
c0008e43:	85 c0                	test   %eax,%eax
c0008e45:	75 44                	jne    c0008e8b <inode_close+0x6b>
/work/x86_os_my/fs/inode.c:136
		list_remove(&inode->inode_tag);
c0008e47:	8b 45 08             	mov    0x8(%ebp),%eax
c0008e4a:	83 c0 44             	add    $0x44,%eax
c0008e4d:	83 ec 0c             	sub    $0xc,%esp
c0008e50:	50                   	push   %eax
c0008e51:	e8 0a b8 ff ff       	call   c0004660 <list_remove>
c0008e56:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:139
		/* inode结构在内核空间，释放时要释放到内核内存池。
		pgdir为NULL时，sys_free认为是内核空间 */
		struct task_struct* cur = running_thread();
c0008e59:	e8 4c ad ff ff       	call   c0003baa <running_thread>
c0008e5e:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/inode.c:140
		uint32_t* cur_pagedir_bak = cur->pgdir;	// 进程自己页目录表的虚拟地址，加载到cr3时需转成物理地址
c0008e61:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008e64:	8b 40 54             	mov    0x54(%eax),%eax
c0008e67:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/inode.c:141
		cur->pgdir = NULL;
c0008e6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008e6d:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
/work/x86_os_my/fs/inode.c:142
		sys_free(inode);
c0008e74:	83 ec 0c             	sub    $0xc,%esp
c0008e77:	ff 75 08             	pushl  0x8(%ebp)
c0008e7a:	e8 7a a4 ff ff       	call   c00032f9 <sys_free>
c0008e7f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:143
		cur->pgdir = cur_pagedir_bak;
c0008e82:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008e85:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0008e88:	89 50 54             	mov    %edx,0x54(%eax)
/work/x86_os_my/fs/inode.c:145
	}
	intr_set_status(old_status);
c0008e8b:	83 ec 0c             	sub    $0xc,%esp
c0008e8e:	ff 75 f4             	pushl  -0xc(%ebp)
c0008e91:	e8 d3 8a ff ff       	call   c0001969 <intr_set_status>
c0008e96:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:146
}
c0008e99:	90                   	nop
c0008e9a:	c9                   	leave  
c0008e9b:	c3                   	ret    

c0008e9c <inode_delete>:
inode_delete():
/work/x86_os_my/fs/inode.c:149

/* 将硬盘分区part上，inode管理的数据块清空 */
void inode_delete(struct partition* part, uint32_t inode_no, void* io_buf) {
c0008e9c:	55                   	push   %ebp
c0008e9d:	89 e5                	mov    %esp,%ebp
c0008e9f:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/inode.c:150
	ASSERT(inode_no < 4096);
c0008ea2:	81 7d 0c ff 0f 00 00 	cmpl   $0xfff,0xc(%ebp)
c0008ea9:	76 1c                	jbe    c0008ec7 <inode_delete+0x2b>
/work/x86_os_my/fs/inode.c:150 (discriminator 1)
c0008eab:	68 e8 d6 00 c0       	push   $0xc000d6e8
c0008eb0:	68 8c d7 00 c0       	push   $0xc000d78c
c0008eb5:	68 96 00 00 00       	push   $0x96
c0008eba:	68 f8 d6 00 c0       	push   $0xc000d6f8
c0008ebf:	e8 5d 94 ff ff       	call   c0002321 <panic_spin>
c0008ec4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:152
	struct inode_position inode_pos;
	inode_locate(part, inode_no, &inode_pos);	// 获取inode所在的扇区和扇区内的偏移量【这里是 inode_table 的空间】
c0008ec7:	83 ec 04             	sub    $0x4,%esp
c0008eca:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0008ecd:	50                   	push   %eax
c0008ece:	ff 75 0c             	pushl  0xc(%ebp)
c0008ed1:	ff 75 08             	pushl  0x8(%ebp)
c0008ed4:	e8 40 fc ff ff       	call   c0008b19 <inode_locate>
c0008ed9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:153
	ASSERT(inode_pos.sec_lba <= (part->start_lba + part->sec_cnt));
c0008edc:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0008edf:	8b 45 08             	mov    0x8(%ebp),%eax
c0008ee2:	8b 08                	mov    (%eax),%ecx
c0008ee4:	8b 45 08             	mov    0x8(%ebp),%eax
c0008ee7:	8b 40 04             	mov    0x4(%eax),%eax
c0008eea:	01 c8                	add    %ecx,%eax
c0008eec:	39 c2                	cmp    %eax,%edx
c0008eee:	76 1c                	jbe    c0008f0c <inode_delete+0x70>
/work/x86_os_my/fs/inode.c:153 (discriminator 1)
c0008ef0:	68 04 d7 00 c0       	push   $0xc000d704
c0008ef5:	68 8c d7 00 c0       	push   $0xc000d78c
c0008efa:	68 99 00 00 00       	push   $0x99
c0008eff:	68 f8 d6 00 c0       	push   $0xc000d6f8
c0008f04:	e8 18 94 ff ff       	call   c0002321 <panic_spin>
c0008f09:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:155

	char* inode_buf = (char*)io_buf;
c0008f0c:	8b 45 10             	mov    0x10(%ebp),%eax
c0008f0f:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/inode.c:156
	if (inode_pos.two_sec) {	// inode跨扇区,读入2个扇区
c0008f12:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0008f15:	85 c0                	test   %eax,%eax
c0008f17:	74 4a                	je     c0008f63 <inode_delete+0xc7>
/work/x86_os_my/fs/inode.c:158
		/* 将原硬盘上的内容先读出来 */
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 2);
c0008f19:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0008f1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0008f1f:	8b 40 08             	mov    0x8(%eax),%eax
c0008f22:	6a 02                	push   $0x2
c0008f24:	ff 75 f4             	pushl  -0xc(%ebp)
c0008f27:	52                   	push   %edx
c0008f28:	50                   	push   %eax
c0008f29:	e8 ab d0 ff ff       	call   c0005fd9 <ide_read>
c0008f2e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:160
		/* 将inode_buf清0 */
		memset((inode_buf + inode_pos.off_size), 0, sizeof(struct inode));	//清零 inode_table 中的一个 inode 结构
c0008f31:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0008f34:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0008f37:	01 d0                	add    %edx,%eax
c0008f39:	83 ec 04             	sub    $0x4,%esp
c0008f3c:	6a 4c                	push   $0x4c
c0008f3e:	6a 00                	push   $0x0
c0008f40:	50                   	push   %eax
c0008f41:	e8 7d a8 ff ff       	call   c00037c3 <memset>
c0008f46:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:162
		/* 用清0的内存数据覆盖磁盘 */
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 2);
c0008f49:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0008f4c:	8b 45 08             	mov    0x8(%ebp),%eax
c0008f4f:	8b 40 08             	mov    0x8(%eax),%eax
c0008f52:	6a 02                	push   $0x2
c0008f54:	ff 75 f4             	pushl  -0xc(%ebp)
c0008f57:	52                   	push   %edx
c0008f58:	50                   	push   %eax
c0008f59:	e8 ef d1 ff ff       	call   c000614d <ide_write>
c0008f5e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:171
		/* 将inode_buf清0 */
		memset((inode_buf + inode_pos.off_size), 0, sizeof(struct inode));
		/* 用清0的内存数据覆盖磁盘 */
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
	}
}
c0008f61:	eb 48                	jmp    c0008fab <inode_delete+0x10f>
/work/x86_os_my/fs/inode.c:165
		memset((inode_buf + inode_pos.off_size), 0, sizeof(struct inode));	//清零 inode_table 中的一个 inode 结构
		/* 用清0的内存数据覆盖磁盘 */
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 2);
	} else {	// 未跨扇区,只读入1个扇区就好
		/* 将原硬盘上的内容先读出来 */
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
c0008f63:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0008f66:	8b 45 08             	mov    0x8(%ebp),%eax
c0008f69:	8b 40 08             	mov    0x8(%eax),%eax
c0008f6c:	6a 01                	push   $0x1
c0008f6e:	ff 75 f4             	pushl  -0xc(%ebp)
c0008f71:	52                   	push   %edx
c0008f72:	50                   	push   %eax
c0008f73:	e8 61 d0 ff ff       	call   c0005fd9 <ide_read>
c0008f78:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:167
		/* 将inode_buf清0 */
		memset((inode_buf + inode_pos.off_size), 0, sizeof(struct inode));
c0008f7b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0008f7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0008f81:	01 d0                	add    %edx,%eax
c0008f83:	83 ec 04             	sub    $0x4,%esp
c0008f86:	6a 4c                	push   $0x4c
c0008f88:	6a 00                	push   $0x0
c0008f8a:	50                   	push   %eax
c0008f8b:	e8 33 a8 ff ff       	call   c00037c3 <memset>
c0008f90:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:169
		/* 用清0的内存数据覆盖磁盘 */
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
c0008f93:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0008f96:	8b 45 08             	mov    0x8(%ebp),%eax
c0008f99:	8b 40 08             	mov    0x8(%eax),%eax
c0008f9c:	6a 01                	push   $0x1
c0008f9e:	ff 75 f4             	pushl  -0xc(%ebp)
c0008fa1:	52                   	push   %edx
c0008fa2:	50                   	push   %eax
c0008fa3:	e8 a5 d1 ff ff       	call   c000614d <ide_write>
c0008fa8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:171
	}
}
c0008fab:	90                   	nop
c0008fac:	c9                   	leave  
c0008fad:	c3                   	ret    

c0008fae <inode_release>:
inode_release():
/work/x86_os_my/fs/inode.c:179
（1）inode 位图
（2）inode_table
（3）inode 中 i_sectors[0～11]中的直接块和一级间接索引块表 i_sectors[12]中的间接块
（4）一级间接索引块表本身的扇区地址
 */
void inode_release(struct partition* part, uint32_t inode_no) {
c0008fae:	55                   	push   %ebp
c0008faf:	89 e5                	mov    %esp,%ebp
c0008fb1:	57                   	push   %edi
c0008fb2:	81 ec 44 02 00 00    	sub    $0x244,%esp
/work/x86_os_my/fs/inode.c:180
	struct inode* inode_to_del = inode_open(part, inode_no);
c0008fb8:	83 ec 08             	sub    $0x8,%esp
c0008fbb:	ff 75 0c             	pushl  0xc(%ebp)
c0008fbe:	ff 75 08             	pushl  0x8(%ebp)
c0008fc1:	e8 14 fd ff ff       	call   c0008cda <inode_open>
c0008fc6:	83 c4 10             	add    $0x10,%esp
c0008fc9:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/inode.c:181
	ASSERT(inode_to_del->i_no == inode_no);
c0008fcc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008fcf:	8b 00                	mov    (%eax),%eax
c0008fd1:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0008fd4:	74 1c                	je     c0008ff2 <inode_release+0x44>
/work/x86_os_my/fs/inode.c:181 (discriminator 1)
c0008fd6:	68 3c d7 00 c0       	push   $0xc000d73c
c0008fdb:	68 9c d7 00 c0       	push   $0xc000d79c
c0008fe0:	68 b5 00 00 00       	push   $0xb5
c0008fe5:	68 f8 d6 00 c0       	push   $0xc000d6f8
c0008fea:	e8 32 93 ff ff       	call   c0002321 <panic_spin>
c0008fef:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:184

	/* 1 回收inode占用的所有块 */
	uint8_t block_idx = 0, block_cnt = 12;
c0008ff2:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
c0008ff6:	c6 45 f6 0c          	movb   $0xc,-0xa(%ebp)
/work/x86_os_my/fs/inode.c:186
	uint32_t block_bitmap_idx;
	uint32_t all_blocks[140] = {0};	  //12个直接块+128个间接块
c0008ffa:	8d 95 b8 fd ff ff    	lea    -0x248(%ebp),%edx
c0009000:	b8 00 00 00 00       	mov    $0x0,%eax
c0009005:	b9 8c 00 00 00       	mov    $0x8c,%ecx
c000900a:	89 d7                	mov    %edx,%edi
c000900c:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/fs/inode.c:189

	/* a 先将前12个直接块存入all_blocks */
	while (block_idx < 12) {
c000900e:	eb 22                	jmp    c0009032 <inode_release+0x84>
/work/x86_os_my/fs/inode.c:190
		all_blocks[block_idx] = inode_to_del->i_sectors[block_idx];
c0009010:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0009014:	0f b6 4d f7          	movzbl -0x9(%ebp),%ecx
c0009018:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000901b:	83 c1 04             	add    $0x4,%ecx
c000901e:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
c0009021:	89 94 85 b8 fd ff ff 	mov    %edx,-0x248(%ebp,%eax,4)
/work/x86_os_my/fs/inode.c:191
		block_idx++;
c0009028:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000902c:	83 c0 01             	add    $0x1,%eax
c000902f:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/inode.c:189
	uint8_t block_idx = 0, block_cnt = 12;
	uint32_t block_bitmap_idx;
	uint32_t all_blocks[140] = {0};	  //12个直接块+128个间接块

	/* a 先将前12个直接块存入all_blocks */
	while (block_idx < 12) {
c0009032:	80 7d f7 0b          	cmpb   $0xb,-0x9(%ebp)
c0009036:	76 d8                	jbe    c0009010 <inode_release+0x62>
/work/x86_os_my/fs/inode.c:194
		all_blocks[block_idx] = inode_to_del->i_sectors[block_idx];
		block_idx++;
	}
	/* b 如果一级间接块表存在，将其128个间接块读到all_blocks[12~]，并释放一级间接块表所占的扇区 */
	if (inode_to_del->i_sectors[12] != 0) {
c0009038:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000903b:	8b 40 40             	mov    0x40(%eax),%eax
c000903e:	85 c0                	test   %eax,%eax
c0009040:	0f 84 8b 00 00 00    	je     c00090d1 <inode_release+0x123>
/work/x86_os_my/fs/inode.c:195
		ide_read(part->my_disk, inode_to_del->i_sectors[12], all_blocks + 12, 1);
c0009046:	8d 85 b8 fd ff ff    	lea    -0x248(%ebp),%eax
c000904c:	83 c0 30             	add    $0x30,%eax
c000904f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0009052:	8b 4a 40             	mov    0x40(%edx),%ecx
c0009055:	8b 55 08             	mov    0x8(%ebp),%edx
c0009058:	8b 52 08             	mov    0x8(%edx),%edx
c000905b:	6a 01                	push   $0x1
c000905d:	50                   	push   %eax
c000905e:	51                   	push   %ecx
c000905f:	52                   	push   %edx
c0009060:	e8 74 cf ff ff       	call   c0005fd9 <ide_read>
c0009065:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:196
		block_cnt = 140;
c0009068:	c6 45 f6 8c          	movb   $0x8c,-0xa(%ebp)
/work/x86_os_my/fs/inode.c:199

		/* 回收一级间接块表占用的扇区 */
		block_bitmap_idx = inode_to_del->i_sectors[12] - part->sb->data_start_lba;
c000906c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000906f:	8b 50 40             	mov    0x40(%eax),%edx
c0009072:	8b 45 08             	mov    0x8(%ebp),%eax
c0009075:	8b 40 1c             	mov    0x1c(%eax),%eax
c0009078:	8b 40 28             	mov    0x28(%eax),%eax
c000907b:	29 c2                	sub    %eax,%edx
c000907d:	89 d0                	mov    %edx,%eax
c000907f:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/inode.c:200
		ASSERT(block_bitmap_idx > 0);
c0009082:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0009086:	75 1c                	jne    c00090a4 <inode_release+0xf6>
/work/x86_os_my/fs/inode.c:200 (discriminator 1)
c0009088:	68 5b d7 00 c0       	push   $0xc000d75b
c000908d:	68 9c d7 00 c0       	push   $0xc000d79c
c0009092:	68 c8 00 00 00       	push   $0xc8
c0009097:	68 f8 d6 00 c0       	push   $0xc000d6f8
c000909c:	e8 80 92 ff ff       	call   c0002321 <panic_spin>
c00090a1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:201
		bitmap_set(&part->block_bitmap, block_bitmap_idx, 0);
c00090a4:	8b 45 08             	mov    0x8(%ebp),%eax
c00090a7:	83 c0 20             	add    $0x20,%eax
c00090aa:	83 ec 04             	sub    $0x4,%esp
c00090ad:	6a 00                	push   $0x0
c00090af:	ff 75 ec             	pushl  -0x14(%ebp)
c00090b2:	50                   	push   %eax
c00090b3:	e8 d7 94 ff ff       	call   c000258f <bitmap_set>
c00090b8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:202
		bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c00090bb:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c00090c0:	83 ec 04             	sub    $0x4,%esp
c00090c3:	6a 01                	push   $0x1
c00090c5:	ff 75 ec             	pushl  -0x14(%ebp)
c00090c8:	50                   	push   %eax
c00090c9:	e8 ca 02 00 00       	call   c0009398 <bitmap_sync>
c00090ce:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:205
	}
	/* c inode所有的块地址已经收集到all_blocks中，下面逐个回收 */
	block_idx = 0;
c00090d1:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/fs/inode.c:206
	while (block_idx < block_cnt) {
c00090d5:	e9 8a 00 00 00       	jmp    c0009164 <inode_release+0x1b6>
/work/x86_os_my/fs/inode.c:207
		if (all_blocks[block_idx] != 0) {
c00090da:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00090de:	8b 84 85 b8 fd ff ff 	mov    -0x248(%ebp,%eax,4),%eax
c00090e5:	85 c0                	test   %eax,%eax
c00090e7:	74 71                	je     c000915a <inode_release+0x1ac>
/work/x86_os_my/fs/inode.c:208
			block_bitmap_idx = 0;
c00090e9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/inode.c:209
			block_bitmap_idx = all_blocks[block_idx] - part->sb->data_start_lba;
c00090f0:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00090f4:	8b 94 85 b8 fd ff ff 	mov    -0x248(%ebp,%eax,4),%edx
c00090fb:	8b 45 08             	mov    0x8(%ebp),%eax
c00090fe:	8b 40 1c             	mov    0x1c(%eax),%eax
c0009101:	8b 40 28             	mov    0x28(%eax),%eax
c0009104:	29 c2                	sub    %eax,%edx
c0009106:	89 d0                	mov    %edx,%eax
c0009108:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/inode.c:210
			ASSERT(block_bitmap_idx > 0);
c000910b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c000910f:	75 1c                	jne    c000912d <inode_release+0x17f>
/work/x86_os_my/fs/inode.c:210 (discriminator 1)
c0009111:	68 5b d7 00 c0       	push   $0xc000d75b
c0009116:	68 9c d7 00 c0       	push   $0xc000d79c
c000911b:	68 d2 00 00 00       	push   $0xd2
c0009120:	68 f8 d6 00 c0       	push   $0xc000d6f8
c0009125:	e8 f7 91 ff ff       	call   c0002321 <panic_spin>
c000912a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:211
			bitmap_set(&part->block_bitmap, block_bitmap_idx, 0);
c000912d:	8b 45 08             	mov    0x8(%ebp),%eax
c0009130:	83 c0 20             	add    $0x20,%eax
c0009133:	83 ec 04             	sub    $0x4,%esp
c0009136:	6a 00                	push   $0x0
c0009138:	ff 75 ec             	pushl  -0x14(%ebp)
c000913b:	50                   	push   %eax
c000913c:	e8 4e 94 ff ff       	call   c000258f <bitmap_set>
c0009141:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:212
			bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c0009144:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0009149:	83 ec 04             	sub    $0x4,%esp
c000914c:	6a 01                	push   $0x1
c000914e:	ff 75 ec             	pushl  -0x14(%ebp)
c0009151:	50                   	push   %eax
c0009152:	e8 41 02 00 00       	call   c0009398 <bitmap_sync>
c0009157:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:214
		}
		block_idx++;
c000915a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000915e:	83 c0 01             	add    $0x1,%eax
c0009161:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/inode.c:206
		bitmap_set(&part->block_bitmap, block_bitmap_idx, 0);
		bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
	}
	/* c inode所有的块地址已经收集到all_blocks中，下面逐个回收 */
	block_idx = 0;
	while (block_idx < block_cnt) {
c0009164:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0009168:	3a 45 f6             	cmp    -0xa(%ebp),%al
c000916b:	0f 82 69 ff ff ff    	jb     c00090da <inode_release+0x12c>
/work/x86_os_my/fs/inode.c:218
		}
		block_idx++;
	}

	/*2 回收该inode所占用的inode */
	bitmap_set(&part->inode_bitmap, inode_no, 0);
c0009171:	8b 45 08             	mov    0x8(%ebp),%eax
c0009174:	83 c0 28             	add    $0x28,%eax
c0009177:	83 ec 04             	sub    $0x4,%esp
c000917a:	6a 00                	push   $0x0
c000917c:	ff 75 0c             	pushl  0xc(%ebp)
c000917f:	50                   	push   %eax
c0009180:	e8 0a 94 ff ff       	call   c000258f <bitmap_set>
c0009185:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:219
	bitmap_sync(cur_part, inode_no, INODE_BITMAP);
c0009188:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c000918d:	83 ec 04             	sub    $0x4,%esp
c0009190:	6a 00                	push   $0x0
c0009192:	ff 75 0c             	pushl  0xc(%ebp)
c0009195:	50                   	push   %eax
c0009196:	e8 fd 01 00 00       	call   c0009398 <bitmap_sync>
c000919b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:225

	/******     以下inode_delete是调试用的    ******
	 * 此函数会在 inode_table 中将此inode清0，
	 * 但实际上只需要在inode位图中清零相应位即可。
	 * 硬盘上的数据更不需要清0，可以直接覆盖 */
	void* io_buf = sys_malloc(1024);
c000919e:	83 ec 0c             	sub    $0xc,%esp
c00091a1:	68 00 04 00 00       	push   $0x400
c00091a6:	e8 21 9b ff ff       	call   c0002ccc <sys_malloc>
c00091ab:	83 c4 10             	add    $0x10,%esp
c00091ae:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/inode.c:226
	inode_delete(part, inode_no, io_buf);
c00091b1:	83 ec 04             	sub    $0x4,%esp
c00091b4:	ff 75 e8             	pushl  -0x18(%ebp)
c00091b7:	ff 75 0c             	pushl  0xc(%ebp)
c00091ba:	ff 75 08             	pushl  0x8(%ebp)
c00091bd:	e8 da fc ff ff       	call   c0008e9c <inode_delete>
c00091c2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:227
	sys_free(io_buf);
c00091c5:	83 ec 0c             	sub    $0xc,%esp
c00091c8:	ff 75 e8             	pushl  -0x18(%ebp)
c00091cb:	e8 29 a1 ff ff       	call   c00032f9 <sys_free>
c00091d0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:230
	/***********************************************/

	inode_close(inode_to_del);
c00091d3:	83 ec 0c             	sub    $0xc,%esp
c00091d6:	ff 75 f0             	pushl  -0x10(%ebp)
c00091d9:	e8 42 fc ff ff       	call   c0008e20 <inode_close>
c00091de:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:231
}
c00091e1:	90                   	nop
c00091e2:	8b 7d fc             	mov    -0x4(%ebp),%edi
c00091e5:	c9                   	leave  
c00091e6:	c3                   	ret    

c00091e7 <inode_init>:
inode_init():
/work/x86_os_my/fs/inode.c:234

/* 初始化一个inode结构，inode号是inode_no */
void inode_init(uint32_t inode_no, struct inode* new_inode) {
c00091e7:	55                   	push   %ebp
c00091e8:	89 e5                	mov    %esp,%ebp
c00091ea:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/fs/inode.c:235
	new_inode->i_no = inode_no;
c00091ed:	8b 45 0c             	mov    0xc(%ebp),%eax
c00091f0:	8b 55 08             	mov    0x8(%ebp),%edx
c00091f3:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/fs/inode.c:236
	new_inode->i_size = 0;
c00091f5:	8b 45 0c             	mov    0xc(%ebp),%eax
c00091f8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
/work/x86_os_my/fs/inode.c:237
	new_inode->i_open_cnts = 0;
c00091ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0009202:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
/work/x86_os_my/fs/inode.c:238
	new_inode->write_deny = false;
c0009209:	8b 45 0c             	mov    0xc(%ebp),%eax
c000920c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
/work/x86_os_my/fs/inode.c:241

	/* 初始化块索引数组i_sector */
	uint8_t sec_idx = 0;
c0009213:	c6 45 ff 00          	movb   $0x0,-0x1(%ebp)
/work/x86_os_my/fs/inode.c:242
	while (sec_idx < 13) {
c0009217:	eb 1b                	jmp    c0009234 <inode_init+0x4d>
/work/x86_os_my/fs/inode.c:244
		/* i_sectors[12]为一级间接块地址 */
		new_inode->i_sectors[sec_idx] = 0;
c0009219:	0f b6 55 ff          	movzbl -0x1(%ebp),%edx
c000921d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0009220:	83 c2 04             	add    $0x4,%edx
c0009223:	c7 04 90 00 00 00 00 	movl   $0x0,(%eax,%edx,4)
/work/x86_os_my/fs/inode.c:245
		sec_idx++;
c000922a:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
c000922e:	83 c0 01             	add    $0x1,%eax
c0009231:	88 45 ff             	mov    %al,-0x1(%ebp)
/work/x86_os_my/fs/inode.c:242
	new_inode->i_open_cnts = 0;
	new_inode->write_deny = false;

	/* 初始化块索引数组i_sector */
	uint8_t sec_idx = 0;
	while (sec_idx < 13) {
c0009234:	80 7d ff 0c          	cmpb   $0xc,-0x1(%ebp)
c0009238:	76 df                	jbe    c0009219 <inode_init+0x32>
/work/x86_os_my/fs/inode.c:250
		sec_idx++;
	}
	/*为什么不提前分配inode管理的数据块（对我们来说是块=扇区）
	1.不知道文件大小，因此不知道分配多少个扇区合适
	2.文件创建后未必马上会写数据*/
}
c000923a:	90                   	nop
c000923b:	c9                   	leave  
c000923c:	c3                   	ret    

c000923d <get_free_slot_in_global>:
get_free_slot_in_global():
/work/x86_os_my/fs/file.c:19

/* 文件表 */
struct file file_table[MAX_FILE_OPEN];

/* 从文件表 file_table 中获取一个空闲位,成功返回下标,失败返回-1 */
int32_t get_free_slot_in_global(void) {
c000923d:	55                   	push   %ebp
c000923e:	89 e5                	mov    %esp,%ebp
c0009240:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/file.c:20
	uint32_t fd_idx = 3;
c0009243:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
/work/x86_os_my/fs/file.c:21
	while (fd_idx < MAX_FILE_OPEN) {
c000924a:	eb 1b                	jmp    c0009267 <get_free_slot_in_global+0x2a>
/work/x86_os_my/fs/file.c:22
		if (file_table[fd_idx].fd_inode == NULL) {
c000924c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000924f:	89 d0                	mov    %edx,%eax
c0009251:	01 c0                	add    %eax,%eax
c0009253:	01 d0                	add    %edx,%eax
c0009255:	c1 e0 02             	shl    $0x2,%eax
c0009258:	05 e8 1f 01 c0       	add    $0xc0011fe8,%eax
c000925d:	8b 00                	mov    (%eax),%eax
c000925f:	85 c0                	test   %eax,%eax
c0009261:	74 0c                	je     c000926f <get_free_slot_in_global+0x32>
/work/x86_os_my/fs/file.c:25
			break;
		}
		fd_idx++;
c0009263:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/file.c:21
struct file file_table[MAX_FILE_OPEN];

/* 从文件表 file_table 中获取一个空闲位,成功返回下标,失败返回-1 */
int32_t get_free_slot_in_global(void) {
	uint32_t fd_idx = 3;
	while (fd_idx < MAX_FILE_OPEN) {
c0009267:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c000926b:	76 df                	jbe    c000924c <get_free_slot_in_global+0xf>
c000926d:	eb 01                	jmp    c0009270 <get_free_slot_in_global+0x33>
/work/x86_os_my/fs/file.c:23
		if (file_table[fd_idx].fd_inode == NULL) {
			break;
c000926f:	90                   	nop
/work/x86_os_my/fs/file.c:27
		}
		fd_idx++;
	}
	if (fd_idx == MAX_FILE_OPEN) {
c0009270:	83 7d f4 20          	cmpl   $0x20,-0xc(%ebp)
c0009274:	75 17                	jne    c000928d <get_free_slot_in_global+0x50>
/work/x86_os_my/fs/file.c:28
		printk("exceed max open files\n");
c0009276:	83 ec 0c             	sub    $0xc,%esp
c0009279:	68 ac d7 00 c0       	push   $0xc000d7ac
c000927e:	e8 cf d7 ff ff       	call   c0006a52 <printk>
c0009283:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:29
		return -1;
c0009286:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000928b:	eb 03                	jmp    c0009290 <get_free_slot_in_global+0x53>
/work/x86_os_my/fs/file.c:31
	}
	return fd_idx;
c000928d:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/file.c:32
}
c0009290:	c9                   	leave  
c0009291:	c3                   	ret    

c0009292 <pcb_fd_install>:
pcb_fd_install():
/work/x86_os_my/fs/file.c:36

/* 将 file_table 的下标，安装到，线程PCB中文件描述符数组 fd_table
 * 成功返回 fd_table 的下标（即文件描述符）,失败返回-1 */
int32_t pcb_fd_install(int32_t globa_fd_idx) {
c0009292:	55                   	push   %ebp
c0009293:	89 e5                	mov    %esp,%ebp
c0009295:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/file.c:37
	struct task_struct* cur = running_thread();
c0009298:	e8 0d a9 ff ff       	call   c0003baa <running_thread>
c000929d:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:38
	uint8_t local_fd_idx = 3;	// 跨过stdin,stdout,stderr
c00092a0:	c6 45 f7 03          	movb   $0x3,-0x9(%ebp)
/work/x86_os_my/fs/file.c:39
	while (local_fd_idx < MAX_FILES_OPEN_PER_PROC) {
c00092a4:	eb 30                	jmp    c00092d6 <pcb_fd_install+0x44>
/work/x86_os_my/fs/file.c:40
		if (cur->fd_table[local_fd_idx] == -1) {	// -1表示free_slot,可用
c00092a6:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c00092aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00092ad:	83 c2 08             	add    $0x8,%edx
c00092b0:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
c00092b4:	83 f8 ff             	cmp    $0xffffffff,%eax
c00092b7:	75 13                	jne    c00092cc <pcb_fd_install+0x3a>
/work/x86_os_my/fs/file.c:41
			cur->fd_table[local_fd_idx] = globa_fd_idx;
c00092b9:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c00092bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00092c0:	8d 4a 08             	lea    0x8(%edx),%ecx
c00092c3:	8b 55 08             	mov    0x8(%ebp),%edx
c00092c6:	89 54 88 04          	mov    %edx,0x4(%eax,%ecx,4)
/work/x86_os_my/fs/file.c:42
			break;
c00092ca:	eb 10                	jmp    c00092dc <pcb_fd_install+0x4a>
/work/x86_os_my/fs/file.c:44
		}
		local_fd_idx++;
c00092cc:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00092d0:	83 c0 01             	add    $0x1,%eax
c00092d3:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/file.c:39
/* 将 file_table 的下标，安装到，线程PCB中文件描述符数组 fd_table
 * 成功返回 fd_table 的下标（即文件描述符）,失败返回-1 */
int32_t pcb_fd_install(int32_t globa_fd_idx) {
	struct task_struct* cur = running_thread();
	uint8_t local_fd_idx = 3;	// 跨过stdin,stdout,stderr
	while (local_fd_idx < MAX_FILES_OPEN_PER_PROC) {
c00092d6:	80 7d f7 07          	cmpb   $0x7,-0x9(%ebp)
c00092da:	76 ca                	jbe    c00092a6 <pcb_fd_install+0x14>
/work/x86_os_my/fs/file.c:46
			cur->fd_table[local_fd_idx] = globa_fd_idx;
			break;
		}
		local_fd_idx++;
	}
	if (local_fd_idx == MAX_FILES_OPEN_PER_PROC) {
c00092dc:	80 7d f7 08          	cmpb   $0x8,-0x9(%ebp)
c00092e0:	75 17                	jne    c00092f9 <pcb_fd_install+0x67>
/work/x86_os_my/fs/file.c:47
		printk("exceed max open files_per_proc\n");
c00092e2:	83 ec 0c             	sub    $0xc,%esp
c00092e5:	68 c4 d7 00 c0       	push   $0xc000d7c4
c00092ea:	e8 63 d7 ff ff       	call   c0006a52 <printk>
c00092ef:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:48
		return -1;
c00092f2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00092f7:	eb 04                	jmp    c00092fd <pcb_fd_install+0x6b>
/work/x86_os_my/fs/file.c:50
	}
	return local_fd_idx;
c00092f9:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
/work/x86_os_my/fs/file.c:51
}
c00092fd:	c9                   	leave  
c00092fe:	c3                   	ret    

c00092ff <inode_bitmap_alloc>:
inode_bitmap_alloc():
/work/x86_os_my/fs/file.c:54

/* 从分区的inode位图中，分配一个i结点，返回"inode号" */
int32_t inode_bitmap_alloc(struct partition* part) {
c00092ff:	55                   	push   %ebp
c0009300:	89 e5                	mov    %esp,%ebp
c0009302:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/file.c:55
	int32_t bit_idx = bitmap_scan(&part->inode_bitmap, 1);
c0009305:	8b 45 08             	mov    0x8(%ebp),%eax
c0009308:	83 c0 28             	add    $0x28,%eax
c000930b:	83 ec 08             	sub    $0x8,%esp
c000930e:	6a 01                	push   $0x1
c0009310:	50                   	push   %eax
c0009311:	e8 44 91 ff ff       	call   c000245a <bitmap_scan>
c0009316:	83 c4 10             	add    $0x10,%esp
c0009319:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:56
	if (bit_idx == -1) {
c000931c:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c0009320:	75 07                	jne    c0009329 <inode_bitmap_alloc+0x2a>
/work/x86_os_my/fs/file.c:57
		return -1;
c0009322:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009327:	eb 1b                	jmp    c0009344 <inode_bitmap_alloc+0x45>
/work/x86_os_my/fs/file.c:59
	}
	bitmap_set(&part->inode_bitmap, bit_idx, 1);
c0009329:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000932c:	8b 55 08             	mov    0x8(%ebp),%edx
c000932f:	83 c2 28             	add    $0x28,%edx
c0009332:	83 ec 04             	sub    $0x4,%esp
c0009335:	6a 01                	push   $0x1
c0009337:	50                   	push   %eax
c0009338:	52                   	push   %edx
c0009339:	e8 51 92 ff ff       	call   c000258f <bitmap_set>
c000933e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:60
	return bit_idx;
c0009341:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/file.c:61
}
c0009344:	c9                   	leave  
c0009345:	c3                   	ret    

c0009346 <block_bitmap_alloc>:
block_bitmap_alloc():
/work/x86_os_my/fs/file.c:64
   
/* 从分区的block位图中，分配1个扇区，返回"扇区地址" 【操作的是 空闲块区域 】*/
int32_t block_bitmap_alloc(struct partition* part) {
c0009346:	55                   	push   %ebp
c0009347:	89 e5                	mov    %esp,%ebp
c0009349:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/file.c:65
	int32_t bit_idx = bitmap_scan(&part->block_bitmap, 1);
c000934c:	8b 45 08             	mov    0x8(%ebp),%eax
c000934f:	83 c0 20             	add    $0x20,%eax
c0009352:	83 ec 08             	sub    $0x8,%esp
c0009355:	6a 01                	push   $0x1
c0009357:	50                   	push   %eax
c0009358:	e8 fd 90 ff ff       	call   c000245a <bitmap_scan>
c000935d:	83 c4 10             	add    $0x10,%esp
c0009360:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:66
	if (bit_idx == -1) {
c0009363:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c0009367:	75 07                	jne    c0009370 <block_bitmap_alloc+0x2a>
/work/x86_os_my/fs/file.c:67
		return -1;
c0009369:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000936e:	eb 26                	jmp    c0009396 <block_bitmap_alloc+0x50>
/work/x86_os_my/fs/file.c:69
	}
	bitmap_set(&part->block_bitmap, bit_idx, 1);
c0009370:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009373:	8b 55 08             	mov    0x8(%ebp),%edx
c0009376:	83 c2 20             	add    $0x20,%edx
c0009379:	83 ec 04             	sub    $0x4,%esp
c000937c:	6a 01                	push   $0x1
c000937e:	50                   	push   %eax
c000937f:	52                   	push   %edx
c0009380:	e8 0a 92 ff ff       	call   c000258f <bitmap_set>
c0009385:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:71
	/* 和inode_bitmap_malloc不同,此处返回的不是位图索引,而是具体可用的扇区地址 */
	return (part->sb->data_start_lba + bit_idx);
c0009388:	8b 45 08             	mov    0x8(%ebp),%eax
c000938b:	8b 40 1c             	mov    0x1c(%eax),%eax
c000938e:	8b 50 28             	mov    0x28(%eax),%edx
c0009391:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009394:	01 d0                	add    %edx,%eax
/work/x86_os_my/fs/file.c:72
} 
c0009396:	c9                   	leave  
c0009397:	c3                   	ret    

c0009398 <bitmap_sync>:
bitmap_sync():
/work/x86_os_my/fs/file.c:76

/* 将内存中bitmap第bit_idx位所在的那个512字节，同步到硬盘中bitmap第bit_idx位所在的扇区 */
// 硬盘以扇区为读写单位
void bitmap_sync(struct partition* part, uint32_t bit_idx, uint8_t btmp_type) {
c0009398:	55                   	push   %ebp
c0009399:	89 e5                	mov    %esp,%ebp
c000939b:	83 ec 28             	sub    $0x28,%esp
c000939e:	8b 45 10             	mov    0x10(%ebp),%eax
c00093a1:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/fs/file.c:77
	uint32_t off_sec = bit_idx / 4096;			// dst(硬盘中): bit_idx 相对于位图起始lba，在后边的第几个扇区(512*8=4096)
c00093a4:	8b 45 0c             	mov    0xc(%ebp),%eax
c00093a7:	c1 e8 0c             	shr    $0xc,%eax
c00093aa:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/file.c:78
	uint32_t off_size = off_sec * BLOCK_SIZE;	// src(内存中): bit_idx 相对于位图数组bits，以512字节为单位，在后边的第几个单位处
c00093ad:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00093b0:	c1 e0 09             	shl    $0x9,%eax
c00093b3:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/file.c:84
												// off_size是，第 bit_idx位所在位图中以 512 字节为单位的起始地址。BLOCK_SIZE=512
	uint32_t sec_lba;
	uint8_t* bitmap_off;

	/* 需要被同步到硬盘的位图只有inode_bitmap和block_bitmap */
	switch (btmp_type) {
c00093b6:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c00093ba:	85 c0                	test   %eax,%eax
c00093bc:	74 07                	je     c00093c5 <bitmap_sync+0x2d>
c00093be:	83 f8 01             	cmp    $0x1,%eax
c00093c1:	74 23                	je     c00093e6 <bitmap_sync+0x4e>
c00093c3:	eb 41                	jmp    c0009406 <bitmap_sync+0x6e>
/work/x86_os_my/fs/file.c:86
		case INODE_BITMAP:
		sec_lba = part->sb->inode_bitmap_lba + off_sec;
c00093c5:	8b 45 08             	mov    0x8(%ebp),%eax
c00093c8:	8b 40 1c             	mov    0x1c(%eax),%eax
c00093cb:	8b 50 18             	mov    0x18(%eax),%edx
c00093ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00093d1:	01 d0                	add    %edx,%eax
c00093d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:87
		bitmap_off = part->inode_bitmap.bits + off_size;
c00093d6:	8b 45 08             	mov    0x8(%ebp),%eax
c00093d9:	8b 50 2c             	mov    0x2c(%eax),%edx
c00093dc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00093df:	01 d0                	add    %edx,%eax
c00093e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:88
		break;
c00093e4:	eb 20                	jmp    c0009406 <bitmap_sync+0x6e>
/work/x86_os_my/fs/file.c:91

		case BLOCK_BITMAP: 
		sec_lba = part->sb->block_bitmap_lba + off_sec;
c00093e6:	8b 45 08             	mov    0x8(%ebp),%eax
c00093e9:	8b 40 1c             	mov    0x1c(%eax),%eax
c00093ec:	8b 50 10             	mov    0x10(%eax),%edx
c00093ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00093f2:	01 d0                	add    %edx,%eax
c00093f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:92
		bitmap_off = part->block_bitmap.bits + off_size;
c00093f7:	8b 45 08             	mov    0x8(%ebp),%eax
c00093fa:	8b 50 24             	mov    0x24(%eax),%edx
c00093fd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0009400:	01 d0                	add    %edx,%eax
c0009402:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:93
		break;
c0009405:	90                   	nop
/work/x86_os_my/fs/file.c:95
	}
	ide_write(part->my_disk, sec_lba, bitmap_off, 1);	// 将bitmap_off中1个扇区的数据写入硬盘sec_lba处
c0009406:	8b 45 08             	mov    0x8(%ebp),%eax
c0009409:	8b 40 08             	mov    0x8(%eax),%eax
c000940c:	6a 01                	push   $0x1
c000940e:	ff 75 f0             	pushl  -0x10(%ebp)
c0009411:	ff 75 f4             	pushl  -0xc(%ebp)
c0009414:	50                   	push   %eax
c0009415:	e8 33 cd ff ff       	call   c000614d <ide_write>
c000941a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:96
}
c000941d:	90                   	nop
c000941e:	c9                   	leave  
c000941f:	c3                   	ret    

c0009420 <file_create>:
file_create():
/work/x86_os_my/fs/file.c:114
此新增加的文件对应的目录项，需要写入该目录的 inode->i_sectors[]中的某个扇区，
原有扇区可能已满，所以有可能要申请新扇区来存储目录项。【sync_dir_entry】
4. 若其中某步操作失败，需要回滚之前已成功的操作。
5. inode_bitmap、 block_bitmap、新文件的 inode 及文件所在目录的 inode，这些位于内存中已经被改变的数据要同步到硬盘。
*/
int32_t file_create(struct dir* parent_dir, char* filename, uint8_t flag) {
c0009420:	55                   	push   %ebp
c0009421:	89 e5                	mov    %esp,%ebp
c0009423:	83 ec 48             	sub    $0x48,%esp
c0009426:	8b 45 10             	mov    0x10(%ebp),%eax
c0009429:	88 45 c4             	mov    %al,-0x3c(%ebp)
/work/x86_os_my/fs/file.c:116
	/* 后续操作的公共缓冲区 */
	void* io_buf = sys_malloc(1024);	//跨扇区的数据，会操作2个扇区
c000942c:	83 ec 0c             	sub    $0xc,%esp
c000942f:	68 00 04 00 00       	push   $0x400
c0009434:	e8 93 98 ff ff       	call   c0002ccc <sys_malloc>
c0009439:	83 c4 10             	add    $0x10,%esp
c000943c:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/file.c:117
	if (io_buf == NULL) {
c000943f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0009443:	75 1a                	jne    c000945f <file_create+0x3f>
/work/x86_os_my/fs/file.c:118
		printk("in file_creat: sys_malloc for io_buf failed\n");
c0009445:	83 ec 0c             	sub    $0xc,%esp
c0009448:	68 e4 d7 00 c0       	push   $0xc000d7e4
c000944d:	e8 00 d6 ff ff       	call   c0006a52 <printk>
c0009452:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:119
		return -1;
c0009455:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000945a:	e9 81 02 00 00       	jmp    c00096e0 <file_create+0x2c0>
/work/x86_os_my/fs/file.c:122
	}

	uint8_t rollback_step = 0;	// 用于操作失败时回滚各资源状态
c000945f:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/fs/file.c:125

	/* 1.为新文件从分区inode位图中，分配inode号 */
	int32_t inode_no = inode_bitmap_alloc(cur_part); 
c0009463:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0009468:	83 ec 0c             	sub    $0xc,%esp
c000946b:	50                   	push   %eax
c000946c:	e8 8e fe ff ff       	call   c00092ff <inode_bitmap_alloc>
c0009471:	83 c4 10             	add    $0x10,%esp
c0009474:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/file.c:126
	if (inode_no == -1) {
c0009477:	83 7d e8 ff          	cmpl   $0xffffffff,-0x18(%ebp)
c000947b:	75 1a                	jne    c0009497 <file_create+0x77>
/work/x86_os_my/fs/file.c:127
		printk("in file_creat: allocate inode failed\n");
c000947d:	83 ec 0c             	sub    $0xc,%esp
c0009480:	68 14 d8 00 c0       	push   $0xc000d814
c0009485:	e8 c8 d5 ff ff       	call   c0006a52 <printk>
c000948a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:128
		return -1;
c000948d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009492:	e9 49 02 00 00       	jmp    c00096e0 <file_create+0x2c0>
/work/x86_os_my/fs/file.c:133
	}

	/* 2.堆中分配inode节点，不可以是栈中的局部变量！
	 * 因为 file_table 中的 fd_inode 指针要指向它. */
	struct inode* new_file_inode = (struct inode*)sys_malloc(sizeof(struct inode)); 
c0009497:	83 ec 0c             	sub    $0xc,%esp
c000949a:	6a 4c                	push   $0x4c
c000949c:	e8 2b 98 ff ff       	call   c0002ccc <sys_malloc>
c00094a1:	83 c4 10             	add    $0x10,%esp
c00094a4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/file.c:134
	if (new_file_inode == NULL) {
c00094a7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c00094ab:	75 19                	jne    c00094c6 <file_create+0xa6>
/work/x86_os_my/fs/file.c:135
		printk("file_create: sys_malloc for inode failded\n");
c00094ad:	83 ec 0c             	sub    $0xc,%esp
c00094b0:	68 3c d8 00 c0       	push   $0xc000d83c
c00094b5:	e8 98 d5 ff ff       	call   c0006a52 <printk>
c00094ba:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:136
		rollback_step = 1;
c00094bd:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)
/work/x86_os_my/fs/file.c:137
		goto rollback;
c00094c1:	e9 a7 01 00 00       	jmp    c000966d <file_create+0x24d>
/work/x86_os_my/fs/file.c:139
	}
	inode_init(inode_no, new_file_inode);	    // 初始化inode
c00094c6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00094c9:	83 ec 08             	sub    $0x8,%esp
c00094cc:	ff 75 e4             	pushl  -0x1c(%ebp)
c00094cf:	50                   	push   %eax
c00094d0:	e8 12 fd ff ff       	call   c00091e7 <inode_init>
c00094d5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:142

	/* 3.申请一个file_table数组的下标 */
	int fd_idx = get_free_slot_in_global();
c00094d8:	e8 60 fd ff ff       	call   c000923d <get_free_slot_in_global>
c00094dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:143
	if (fd_idx == -1) {
c00094e0:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c00094e4:	75 19                	jne    c00094ff <file_create+0xdf>
/work/x86_os_my/fs/file.c:144
		printk("exceed max open files\n");
c00094e6:	83 ec 0c             	sub    $0xc,%esp
c00094e9:	68 ac d7 00 c0       	push   $0xc000d7ac
c00094ee:	e8 5f d5 ff ff       	call   c0006a52 <printk>
c00094f3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:145
		rollback_step = 2;
c00094f6:	c6 45 f7 02          	movb   $0x2,-0x9(%ebp)
/work/x86_os_my/fs/file.c:146
		goto rollback;
c00094fa:	e9 6e 01 00 00       	jmp    c000966d <file_create+0x24d>
/work/x86_os_my/fs/file.c:150
	}

	// 4.填充文件表中的文件结构
	file_table[fd_idx].fd_inode = new_file_inode;
c00094ff:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0009502:	89 d0                	mov    %edx,%eax
c0009504:	01 c0                	add    %eax,%eax
c0009506:	01 d0                	add    %edx,%eax
c0009508:	c1 e0 02             	shl    $0x2,%eax
c000950b:	8d 90 e8 1f 01 c0    	lea    -0x3ffee018(%eax),%edx
c0009511:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0009514:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/file.c:151
	file_table[fd_idx].fd_pos = 0;
c0009516:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0009519:	89 d0                	mov    %edx,%eax
c000951b:	01 c0                	add    %eax,%eax
c000951d:	01 d0                	add    %edx,%eax
c000951f:	c1 e0 02             	shl    $0x2,%eax
c0009522:	05 e0 1f 01 c0       	add    $0xc0011fe0,%eax
c0009527:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/fs/file.c:152
	file_table[fd_idx].fd_flag = flag;
c000952d:	0f b6 4d c4          	movzbl -0x3c(%ebp),%ecx
c0009531:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0009534:	89 d0                	mov    %edx,%eax
c0009536:	01 c0                	add    %eax,%eax
c0009538:	01 d0                	add    %edx,%eax
c000953a:	c1 e0 02             	shl    $0x2,%eax
c000953d:	05 e4 1f 01 c0       	add    $0xc0011fe4,%eax
c0009542:	89 08                	mov    %ecx,(%eax)
/work/x86_os_my/fs/file.c:153
	file_table[fd_idx].fd_inode->write_deny = false;
c0009544:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0009547:	89 d0                	mov    %edx,%eax
c0009549:	01 c0                	add    %eax,%eax
c000954b:	01 d0                	add    %edx,%eax
c000954d:	c1 e0 02             	shl    $0x2,%eax
c0009550:	05 e8 1f 01 c0       	add    $0xc0011fe8,%eax
c0009555:	8b 00                	mov    (%eax),%eax
c0009557:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
/work/x86_os_my/fs/file.c:156

	struct dir_entry new_dir_entry;
	memset(&new_dir_entry, 0, sizeof(struct dir_entry));
c000955e:	83 ec 04             	sub    $0x4,%esp
c0009561:	6a 18                	push   $0x18
c0009563:	6a 00                	push   $0x0
c0009565:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0009568:	50                   	push   %eax
c0009569:	e8 55 a2 ff ff       	call   c00037c3 <memset>
c000956e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:159

	// create_dir_entry在内存中初始化目录项p_de，只是内存操作不会返回失败
	create_dir_entry(filename, inode_no, FT_REGULAR, &new_dir_entry);
c0009571:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0009574:	8d 55 cc             	lea    -0x34(%ebp),%edx
c0009577:	52                   	push   %edx
c0009578:	6a 01                	push   $0x1
c000957a:	50                   	push   %eax
c000957b:	ff 75 0c             	pushl  0xc(%ebp)
c000957e:	e8 73 10 00 00       	call   c000a5f6 <create_dir_entry>
c0009583:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:164


	/* 同步内存数据到硬盘 */
	/* a 在目录parent_dir下安装目录项new_dir_entry, 写入硬盘后返回true, 否则false【dir.c】 */
	if (!sync_dir_entry(parent_dir, &new_dir_entry, io_buf)) {
c0009586:	83 ec 04             	sub    $0x4,%esp
c0009589:	ff 75 ec             	pushl  -0x14(%ebp)
c000958c:	8d 45 cc             	lea    -0x34(%ebp),%eax
c000958f:	50                   	push   %eax
c0009590:	ff 75 08             	pushl  0x8(%ebp)
c0009593:	e8 cf 10 00 00       	call   c000a667 <sync_dir_entry>
c0009598:	83 c4 10             	add    $0x10,%esp
c000959b:	85 c0                	test   %eax,%eax
c000959d:	75 19                	jne    c00095b8 <file_create+0x198>
/work/x86_os_my/fs/file.c:165
		printk("sync dir_entry to disk failed\n");
c000959f:	83 ec 0c             	sub    $0xc,%esp
c00095a2:	68 68 d8 00 c0       	push   $0xc000d868
c00095a7:	e8 a6 d4 ff ff       	call   c0006a52 <printk>
c00095ac:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:166
		rollback_step = 3;
c00095af:	c6 45 f7 03          	movb   $0x3,-0x9(%ebp)
/work/x86_os_my/fs/file.c:167
		goto rollback;
c00095b3:	e9 b5 00 00 00       	jmp    c000966d <file_create+0x24d>
/work/x86_os_my/fs/file.c:171
	}

	/* b sync_dir_entry 会改变父目录 inode 中的信息，因此，将父目录inode的内容同步到硬盘【inode.c】 */
	memset(io_buf, 0, 1024);
c00095b8:	83 ec 04             	sub    $0x4,%esp
c00095bb:	68 00 04 00 00       	push   $0x400
c00095c0:	6a 00                	push   $0x0
c00095c2:	ff 75 ec             	pushl  -0x14(%ebp)
c00095c5:	e8 f9 a1 ff ff       	call   c00037c3 <memset>
c00095ca:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:172
	inode_sync(cur_part, parent_dir->inode, io_buf);
c00095cd:	8b 45 08             	mov    0x8(%ebp),%eax
c00095d0:	8b 10                	mov    (%eax),%edx
c00095d2:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c00095d7:	83 ec 04             	sub    $0x4,%esp
c00095da:	ff 75 ec             	pushl  -0x14(%ebp)
c00095dd:	52                   	push   %edx
c00095de:	50                   	push   %eax
c00095df:	e8 cf f5 ff ff       	call   c0008bb3 <inode_sync>
c00095e4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:175

	/* c 将新创建文件的inode内容同步到硬盘 */
	memset(io_buf, 0, 1024);
c00095e7:	83 ec 04             	sub    $0x4,%esp
c00095ea:	68 00 04 00 00       	push   $0x400
c00095ef:	6a 00                	push   $0x0
c00095f1:	ff 75 ec             	pushl  -0x14(%ebp)
c00095f4:	e8 ca a1 ff ff       	call   c00037c3 <memset>
c00095f9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:176
	inode_sync(cur_part, new_file_inode, io_buf);
c00095fc:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0009601:	83 ec 04             	sub    $0x4,%esp
c0009604:	ff 75 ec             	pushl  -0x14(%ebp)
c0009607:	ff 75 e4             	pushl  -0x1c(%ebp)
c000960a:	50                   	push   %eax
c000960b:	e8 a3 f5 ff ff       	call   c0008bb3 <inode_sync>
c0009610:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:179

	/* d 将inode_bitmap位图同步到硬盘【file.c】 */
	bitmap_sync(cur_part, inode_no, INODE_BITMAP);
c0009613:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0009616:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c000961b:	83 ec 04             	sub    $0x4,%esp
c000961e:	6a 00                	push   $0x0
c0009620:	52                   	push   %edx
c0009621:	50                   	push   %eax
c0009622:	e8 71 fd ff ff       	call   c0009398 <bitmap_sync>
c0009627:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:182

	/* e 将创建的文件i结点添加到open_inodes链表 */
	list_push(&cur_part->open_inodes, &new_file_inode->inode_tag);
c000962a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000962d:	8d 50 44             	lea    0x44(%eax),%edx
c0009630:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0009635:	83 c0 30             	add    $0x30,%eax
c0009638:	83 ec 08             	sub    $0x8,%esp
c000963b:	52                   	push   %edx
c000963c:	50                   	push   %eax
c000963d:	e8 e2 af ff ff       	call   c0004624 <list_push>
c0009642:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:183
	new_file_inode->i_open_cnts = 1;
c0009645:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0009648:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/fs/file.c:186


	sys_free(io_buf);
c000964f:	83 ec 0c             	sub    $0xc,%esp
c0009652:	ff 75 ec             	pushl  -0x14(%ebp)
c0009655:	e8 9f 9c ff ff       	call   c00032f9 <sys_free>
c000965a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:187
	return pcb_fd_install(fd_idx);	// 将 file_table 的下标，安装到，线程PCB中文件描述符数组 fd_table【file.c】
c000965d:	83 ec 0c             	sub    $0xc,%esp
c0009660:	ff 75 f0             	pushl  -0x10(%ebp)
c0009663:	e8 2a fc ff ff       	call   c0009292 <pcb_fd_install>
c0009668:	83 c4 10             	add    $0x10,%esp
c000966b:	eb 73                	jmp    c00096e0 <file_create+0x2c0>
/work/x86_os_my/fs/file.c:191


rollback:
	switch (rollback_step) {
c000966d:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0009671:	83 f8 02             	cmp    $0x2,%eax
c0009674:	74 2d                	je     c00096a3 <file_create+0x283>
c0009676:	83 f8 03             	cmp    $0x3,%eax
c0009679:	74 07                	je     c0009682 <file_create+0x262>
c000967b:	83 f8 01             	cmp    $0x1,%eax
c000967e:	74 31                	je     c00096b1 <file_create+0x291>
c0009680:	eb 4b                	jmp    c00096cd <file_create+0x2ad>
/work/x86_os_my/fs/file.c:194
		case 3:
		/* file_table 相应位清空 */
		memset(&file_table[fd_idx], 0, sizeof(struct file)); 
c0009682:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0009685:	89 d0                	mov    %edx,%eax
c0009687:	01 c0                	add    %eax,%eax
c0009689:	01 d0                	add    %edx,%eax
c000968b:	c1 e0 02             	shl    $0x2,%eax
c000968e:	05 e0 1f 01 c0       	add    $0xc0011fe0,%eax
c0009693:	83 ec 04             	sub    $0x4,%esp
c0009696:	6a 0c                	push   $0xc
c0009698:	6a 00                	push   $0x0
c000969a:	50                   	push   %eax
c000969b:	e8 23 a1 ff ff       	call   c00037c3 <memset>
c00096a0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:196
		case 2:
		sys_free(new_file_inode);
c00096a3:	83 ec 0c             	sub    $0xc,%esp
c00096a6:	ff 75 e4             	pushl  -0x1c(%ebp)
c00096a9:	e8 4b 9c ff ff       	call   c00032f9 <sys_free>
c00096ae:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:199
		case 1:
		/* inode位图 恢复 */
		bitmap_set(&cur_part->inode_bitmap, inode_no, 0);
c00096b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00096b4:	8b 15 d0 1f 01 c0    	mov    0xc0011fd0,%edx
c00096ba:	83 c2 28             	add    $0x28,%edx
c00096bd:	83 ec 04             	sub    $0x4,%esp
c00096c0:	6a 00                	push   $0x0
c00096c2:	50                   	push   %eax
c00096c3:	52                   	push   %edx
c00096c4:	e8 c6 8e ff ff       	call   c000258f <bitmap_set>
c00096c9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:200
		break;
c00096cc:	90                   	nop
/work/x86_os_my/fs/file.c:202
	}
	sys_free(io_buf);
c00096cd:	83 ec 0c             	sub    $0xc,%esp
c00096d0:	ff 75 ec             	pushl  -0x14(%ebp)
c00096d3:	e8 21 9c ff ff       	call   c00032f9 <sys_free>
c00096d8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:203
	return -1;
c00096db:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
/work/x86_os_my/fs/file.c:204 (discriminator 1)
}
c00096e0:	c9                   	leave  
c00096e1:	c3                   	ret    

c00096e2 <file_open>:
file_open():
/work/x86_os_my/fs/file.c:207

/* 打开编号为inode_no的inode对应的文件,若成功则返回文件描述符,否则返回-1 */
int32_t file_open(uint32_t inode_no, uint8_t flag) {
c00096e2:	55                   	push   %ebp
c00096e3:	89 e5                	mov    %esp,%ebp
c00096e5:	83 ec 28             	sub    $0x28,%esp
c00096e8:	8b 45 0c             	mov    0xc(%ebp),%eax
c00096eb:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/fs/file.c:208
	int fd_idx = get_free_slot_in_global();
c00096ee:	e8 4a fb ff ff       	call   c000923d <get_free_slot_in_global>
c00096f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:209
	if (fd_idx == -1) {
c00096f6:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c00096fa:	75 1a                	jne    c0009716 <file_open+0x34>
/work/x86_os_my/fs/file.c:210
		printk("exceed max open files\n");
c00096fc:	83 ec 0c             	sub    $0xc,%esp
c00096ff:	68 ac d7 00 c0       	push   $0xc000d7ac
c0009704:	e8 49 d3 ff ff       	call   c0006a52 <printk>
c0009709:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:211
		return -1;
c000970c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009711:	e9 e3 00 00 00       	jmp    c00097f9 <file_open+0x117>
/work/x86_os_my/fs/file.c:213
	}
	file_table[fd_idx].fd_inode = inode_open(cur_part, inode_no);
c0009716:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c000971b:	83 ec 08             	sub    $0x8,%esp
c000971e:	ff 75 08             	pushl  0x8(%ebp)
c0009721:	50                   	push   %eax
c0009722:	e8 b3 f5 ff ff       	call   c0008cda <inode_open>
c0009727:	83 c4 10             	add    $0x10,%esp
c000972a:	89 c1                	mov    %eax,%ecx
c000972c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000972f:	89 d0                	mov    %edx,%eax
c0009731:	01 c0                	add    %eax,%eax
c0009733:	01 d0                	add    %edx,%eax
c0009735:	c1 e0 02             	shl    $0x2,%eax
c0009738:	05 e8 1f 01 c0       	add    $0xc0011fe8,%eax
c000973d:	89 08                	mov    %ecx,(%eax)
/work/x86_os_my/fs/file.c:214
	file_table[fd_idx].fd_pos = 0;		// 每次打开文件,要将fd_pos还原为0,即让文件内的指针指向开头
c000973f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0009742:	89 d0                	mov    %edx,%eax
c0009744:	01 c0                	add    %eax,%eax
c0009746:	01 d0                	add    %edx,%eax
c0009748:	c1 e0 02             	shl    $0x2,%eax
c000974b:	05 e0 1f 01 c0       	add    $0xc0011fe0,%eax
c0009750:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/fs/file.c:215
	file_table[fd_idx].fd_flag = flag;
c0009756:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
c000975a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000975d:	89 d0                	mov    %edx,%eax
c000975f:	01 c0                	add    %eax,%eax
c0009761:	01 d0                	add    %edx,%eax
c0009763:	c1 e0 02             	shl    $0x2,%eax
c0009766:	05 e4 1f 01 c0       	add    $0xc0011fe4,%eax
c000976b:	89 08                	mov    %ecx,(%eax)
/work/x86_os_my/fs/file.c:216
	bool* write_deny = &file_table[fd_idx].fd_inode->write_deny;
c000976d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0009770:	89 d0                	mov    %edx,%eax
c0009772:	01 c0                	add    %eax,%eax
c0009774:	01 d0                	add    %edx,%eax
c0009776:	c1 e0 02             	shl    $0x2,%eax
c0009779:	05 e8 1f 01 c0       	add    $0xc0011fe8,%eax
c000977e:	8b 00                	mov    (%eax),%eax
c0009780:	83 c0 0c             	add    $0xc,%eax
c0009783:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:218

	if (flag & O_WRONLY || flag & O_RDWR) {	// 要写文件,需要判断是否有其它进程正写此文件。创建文件、读文件不考虑write_deny。
c0009786:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c000978a:	83 e0 01             	and    $0x1,%eax
c000978d:	85 c0                	test   %eax,%eax
c000978f:	75 0b                	jne    c000979c <file_open+0xba>
/work/x86_os_my/fs/file.c:218 (discriminator 1)
c0009791:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0009795:	83 e0 02             	and    $0x2,%eax
c0009798:	85 c0                	test   %eax,%eax
c000979a:	74 4f                	je     c00097eb <file_open+0x109>
/work/x86_os_my/fs/file.c:220
		/* 以下进入临界区前先关中断 */
		enum intr_status old_status = intr_disable();
c000979c:	e8 9f 81 ff ff       	call   c0001940 <intr_disable>
c00097a1:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/file.c:221
		if (!(*write_deny)) {	// 若当前没有其它进程写该文件,将其占用.
c00097a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00097a7:	8b 00                	mov    (%eax),%eax
c00097a9:	85 c0                	test   %eax,%eax
c00097ab:	75 19                	jne    c00097c6 <file_open+0xe4>
/work/x86_os_my/fs/file.c:222
			*write_deny = true;
c00097ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00097b0:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
/work/x86_os_my/fs/file.c:223
			intr_set_status(old_status);
c00097b6:	83 ec 0c             	sub    $0xc,%esp
c00097b9:	ff 75 ec             	pushl  -0x14(%ebp)
c00097bc:	e8 a8 81 ff ff       	call   c0001969 <intr_set_status>
c00097c1:	83 c4 10             	add    $0x10,%esp
c00097c4:	eb 25                	jmp    c00097eb <file_open+0x109>
/work/x86_os_my/fs/file.c:225
		} else {
			intr_set_status(old_status);
c00097c6:	83 ec 0c             	sub    $0xc,%esp
c00097c9:	ff 75 ec             	pushl  -0x14(%ebp)
c00097cc:	e8 98 81 ff ff       	call   c0001969 <intr_set_status>
c00097d1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:226
			printk("file can`t be write now, try again later\n");
c00097d4:	83 ec 0c             	sub    $0xc,%esp
c00097d7:	68 88 d8 00 c0       	push   $0xc000d888
c00097dc:	e8 71 d2 ff ff       	call   c0006a52 <printk>
c00097e1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:227
			return -1;
c00097e4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00097e9:	eb 0e                	jmp    c00097f9 <file_open+0x117>
/work/x86_os_my/fs/file.c:230
		}
	}
	return pcb_fd_install(fd_idx);
c00097eb:	83 ec 0c             	sub    $0xc,%esp
c00097ee:	ff 75 f4             	pushl  -0xc(%ebp)
c00097f1:	e8 9c fa ff ff       	call   c0009292 <pcb_fd_install>
c00097f6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:231
}
c00097f9:	c9                   	leave  
c00097fa:	c3                   	ret    

c00097fb <file_close>:
file_close():
/work/x86_os_my/fs/file.c:234

/* 关闭文件 */
int32_t file_close(struct file* file) {
c00097fb:	55                   	push   %ebp
c00097fc:	89 e5                	mov    %esp,%ebp
c00097fe:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/fs/file.c:235
	if (file == NULL) {
c0009801:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0009805:	75 07                	jne    c000980e <file_close+0x13>
/work/x86_os_my/fs/file.c:236
		return -1;
c0009807:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000980c:	eb 2e                	jmp    c000983c <file_close+0x41>
/work/x86_os_my/fs/file.c:238
	}
	file->fd_inode->write_deny = false;
c000980e:	8b 45 08             	mov    0x8(%ebp),%eax
c0009811:	8b 40 08             	mov    0x8(%eax),%eax
c0009814:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
/work/x86_os_my/fs/file.c:239
	inode_close(file->fd_inode);
c000981b:	8b 45 08             	mov    0x8(%ebp),%eax
c000981e:	8b 40 08             	mov    0x8(%eax),%eax
c0009821:	83 ec 0c             	sub    $0xc,%esp
c0009824:	50                   	push   %eax
c0009825:	e8 f6 f5 ff ff       	call   c0008e20 <inode_close>
c000982a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:240
	file->fd_inode = NULL;   // 使文件结构可用
c000982d:	8b 45 08             	mov    0x8(%ebp),%eax
c0009830:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
/work/x86_os_my/fs/file.c:241
	return 0;
c0009837:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/file.c:242
}
c000983c:	c9                   	leave  
c000983d:	c3                   	ret    

c000983e <file_write>:
file_write():
/work/x86_os_my/fs/file.c:245

/* 把buf中的count个字节写入file,成功则返回写入的字节数,失败则返回-1 */
int32_t file_write(struct file* file, const void* buf, uint32_t count) {
c000983e:	55                   	push   %ebp
c000983f:	89 e5                	mov    %esp,%ebp
c0009841:	83 ec 58             	sub    $0x58,%esp
/work/x86_os_my/fs/file.c:246
	if ((file->fd_inode->i_size + count) > (BLOCK_SIZE * 140))	{	// 文件目前最大只支持512B*140块=71680字节【12直接块+128间接块】
c0009844:	8b 45 08             	mov    0x8(%ebp),%eax
c0009847:	8b 40 08             	mov    0x8(%eax),%eax
c000984a:	8b 50 04             	mov    0x4(%eax),%edx
c000984d:	8b 45 10             	mov    0x10(%ebp),%eax
c0009850:	01 d0                	add    %edx,%eax
c0009852:	3d 00 18 01 00       	cmp    $0x11800,%eax
c0009857:	76 1a                	jbe    c0009873 <file_write+0x35>
/work/x86_os_my/fs/file.c:247
		printk("exceed max file_size 71680 bytes, write file failed\n");
c0009859:	83 ec 0c             	sub    $0xc,%esp
c000985c:	68 b4 d8 00 c0       	push   $0xc000d8b4
c0009861:	e8 ec d1 ff ff       	call   c0006a52 <printk>
c0009866:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:248
		return -1;
c0009869:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000986e:	e9 5d 07 00 00       	jmp    c0009fd0 <file_write+0x792>
/work/x86_os_my/fs/file.c:250
	}
	uint8_t* io_buf = sys_malloc(BLOCK_SIZE);
c0009873:	83 ec 0c             	sub    $0xc,%esp
c0009876:	68 00 02 00 00       	push   $0x200
c000987b:	e8 4c 94 ff ff       	call   c0002ccc <sys_malloc>
c0009880:	83 c4 10             	add    $0x10,%esp
c0009883:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/file.c:251
	if (io_buf == NULL) {
c0009886:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c000988a:	75 1a                	jne    c00098a6 <file_write+0x68>
/work/x86_os_my/fs/file.c:252
		printk("file_write: sys_malloc for io_buf failed\n");
c000988c:	83 ec 0c             	sub    $0xc,%esp
c000988f:	68 ec d8 00 c0       	push   $0xc000d8ec
c0009894:	e8 b9 d1 ff ff       	call   c0006a52 <printk>
c0009899:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:253
		return -1;
c000989c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00098a1:	e9 2a 07 00 00       	jmp    c0009fd0 <file_write+0x792>
/work/x86_os_my/fs/file.c:255
	}
	uint32_t* all_blocks = (uint32_t*)sys_malloc(BLOCK_SIZE + 48);	  // 用来记录文件所有的块地址【560/4=160】
c00098a6:	83 ec 0c             	sub    $0xc,%esp
c00098a9:	68 30 02 00 00       	push   $0x230
c00098ae:	e8 19 94 ff ff       	call   c0002ccc <sys_malloc>
c00098b3:	83 c4 10             	add    $0x10,%esp
c00098b6:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/file.c:256
	if (all_blocks == NULL) {
c00098b9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c00098bd:	75 1a                	jne    c00098d9 <file_write+0x9b>
/work/x86_os_my/fs/file.c:257
		printk("file_write: sys_malloc for all_blocks failed\n");
c00098bf:	83 ec 0c             	sub    $0xc,%esp
c00098c2:	68 18 d9 00 c0       	push   $0xc000d918
c00098c7:	e8 86 d1 ff ff       	call   c0006a52 <printk>
c00098cc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:258
		return -1;
c00098cf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00098d4:	e9 f7 06 00 00       	jmp    c0009fd0 <file_write+0x792>
/work/x86_os_my/fs/file.c:261
	}

	int32_t block_lba = -1;			// 块地址
c00098d9:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
/work/x86_os_my/fs/file.c:262
	uint32_t block_bitmap_idx = 0;	// block_bitmap中的索引,做为参数传给bitmap_sync
c00098e0:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
/work/x86_os_my/fs/file.c:267
	int32_t indirect_block_table;	// 一级间接表地址
	uint32_t block_idx;				// 块索引

	/* 判断文件是否是第一次写，如果是，先为其分配一个块 */
	if (file->fd_inode->i_sectors[0] == 0) {
c00098e7:	8b 45 08             	mov    0x8(%ebp),%eax
c00098ea:	8b 40 08             	mov    0x8(%eax),%eax
c00098ed:	8b 40 10             	mov    0x10(%eax),%eax
c00098f0:	85 c0                	test   %eax,%eax
c00098f2:	0f 85 8d 00 00 00    	jne    c0009985 <file_write+0x147>
/work/x86_os_my/fs/file.c:268
		block_lba = block_bitmap_alloc(cur_part);
c00098f8:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c00098fd:	83 ec 0c             	sub    $0xc,%esp
c0009900:	50                   	push   %eax
c0009901:	e8 40 fa ff ff       	call   c0009346 <block_bitmap_alloc>
c0009906:	83 c4 10             	add    $0x10,%esp
c0009909:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/file.c:269
		if (block_lba == -1) {
c000990c:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
c0009910:	75 1a                	jne    c000992c <file_write+0xee>
/work/x86_os_my/fs/file.c:270
			printk("file_write: block_bitmap_alloc failed\n");
c0009912:	83 ec 0c             	sub    $0xc,%esp
c0009915:	68 48 d9 00 c0       	push   $0xc000d948
c000991a:	e8 33 d1 ff ff       	call   c0006a52 <printk>
c000991f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:271
			return -1;
c0009922:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009927:	e9 a4 06 00 00       	jmp    c0009fd0 <file_write+0x792>
/work/x86_os_my/fs/file.c:273
		}
		file->fd_inode->i_sectors[0] = block_lba;
c000992c:	8b 45 08             	mov    0x8(%ebp),%eax
c000992f:	8b 40 08             	mov    0x8(%eax),%eax
c0009932:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0009935:	89 50 10             	mov    %edx,0x10(%eax)
/work/x86_os_my/fs/file.c:276

		/* 每分配一个块就将位图同步到硬盘 */
		block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
c0009938:	8b 55 d8             	mov    -0x28(%ebp),%edx
c000993b:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0009940:	8b 40 1c             	mov    0x1c(%eax),%eax
c0009943:	8b 40 28             	mov    0x28(%eax),%eax
c0009946:	29 c2                	sub    %eax,%edx
c0009948:	89 d0                	mov    %edx,%eax
c000994a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/fs/file.c:277
		ASSERT(block_bitmap_idx != 0);
c000994d:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0009951:	75 1c                	jne    c000996f <file_write+0x131>
/work/x86_os_my/fs/file.c:277 (discriminator 1)
c0009953:	68 6f d9 00 c0       	push   $0xc000d96f
c0009958:	68 b4 db 00 c0       	push   $0xc000dbb4
c000995d:	68 15 01 00 00       	push   $0x115
c0009962:	68 85 d9 00 c0       	push   $0xc000d985
c0009967:	e8 b5 89 ff ff       	call   c0002321 <panic_spin>
c000996c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:278
		bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c000996f:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0009974:	83 ec 04             	sub    $0x4,%esp
c0009977:	6a 01                	push   $0x1
c0009979:	ff 75 d4             	pushl  -0x2c(%ebp)
c000997c:	50                   	push   %eax
c000997d:	e8 16 fa ff ff       	call   c0009398 <bitmap_sync>
c0009982:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:282
	}

	/* 写入count个字节前，该文件已占用的块数 */
	uint32_t file_has_used_blocks = file->fd_inode->i_size / BLOCK_SIZE + 1;
c0009985:	8b 45 08             	mov    0x8(%ebp),%eax
c0009988:	8b 40 08             	mov    0x8(%eax),%eax
c000998b:	8b 40 04             	mov    0x4(%eax),%eax
c000998e:	c1 e8 09             	shr    $0x9,%eax
c0009991:	83 c0 01             	add    $0x1,%eax
c0009994:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/fs/file.c:284
	/* 写入count个字节后，该文件将占用的块数 */
	uint32_t file_will_use_blocks = (file->fd_inode->i_size + count) / BLOCK_SIZE + 1;
c0009997:	8b 45 08             	mov    0x8(%ebp),%eax
c000999a:	8b 40 08             	mov    0x8(%eax),%eax
c000999d:	8b 50 04             	mov    0x4(%eax),%edx
c00099a0:	8b 45 10             	mov    0x10(%ebp),%eax
c00099a3:	01 d0                	add    %edx,%eax
c00099a5:	c1 e8 09             	shr    $0x9,%eax
c00099a8:	83 c0 01             	add    $0x1,%eax
c00099ab:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/fs/file.c:285
	ASSERT(file_will_use_blocks <= 140);
c00099ae:	81 7d cc 8c 00 00 00 	cmpl   $0x8c,-0x34(%ebp)
c00099b5:	76 1c                	jbe    c00099d3 <file_write+0x195>
/work/x86_os_my/fs/file.c:285 (discriminator 1)
c00099b7:	68 8f d9 00 c0       	push   $0xc000d98f
c00099bc:	68 b4 db 00 c0       	push   $0xc000dbb4
c00099c1:	68 1d 01 00 00       	push   $0x11d
c00099c6:	68 85 d9 00 c0       	push   $0xc000d985
c00099cb:	e8 51 89 ff ff       	call   c0002321 <panic_spin>
c00099d0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:287
	/* 通过此增量判断是否需要分配扇区，若增量为0，表示原扇区够用 */
	uint32_t add_blocks = file_will_use_blocks - file_has_used_blocks;
c00099d3:	8b 45 cc             	mov    -0x34(%ebp),%eax
c00099d6:	2b 45 d0             	sub    -0x30(%ebp),%eax
c00099d9:	89 45 c8             	mov    %eax,-0x38(%ebp)
/work/x86_os_my/fs/file.c:294
	/* 将文件所有块地址收集到all_blocks，后面都统一在all_blocks中获取要写入的扇区地址
	 * 没有新增的数据块时，只更新 all_blocks
	 * 需要新增数据块时，除了 all_blocks 还要更新 file->fd_inode->i_sectors[x]
	 */
	/* 在同一数据块（扇区）内写入数据，不涉及到分配新扇区 */
	if (add_blocks == 0) {
c00099dc:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c00099e0:	0f 85 8c 00 00 00    	jne    c0009a72 <file_write+0x234>
/work/x86_os_my/fs/file.c:295
		if (file_has_used_blocks <= 12 ) {	// 文件数据量将在12块之内
c00099e6:	83 7d d0 0c          	cmpl   $0xc,-0x30(%ebp)
c00099ea:	77 2e                	ja     c0009a1a <file_write+0x1dc>
/work/x86_os_my/fs/file.c:296
			block_idx = file_has_used_blocks - 1;	// 指向最后一个已占用的数据块（扇区）
c00099ec:	8b 45 d0             	mov    -0x30(%ebp),%eax
c00099ef:	83 e8 01             	sub    $0x1,%eax
c00099f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:297
			all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];
c00099f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00099f8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c00099ff:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009a02:	01 c2                	add    %eax,%edx
c0009a04:	8b 45 08             	mov    0x8(%ebp),%eax
c0009a07:	8b 40 08             	mov    0x8(%eax),%eax
c0009a0a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0009a0d:	83 c1 04             	add    $0x4,%ecx
c0009a10:	8b 04 88             	mov    (%eax,%ecx,4),%eax
c0009a13:	89 02                	mov    %eax,(%edx)
c0009a15:	e9 4e 04 00 00       	jmp    c0009e68 <file_write+0x62a>
/work/x86_os_my/fs/file.c:300
		} else {
			/* 未写入新数据之前已经占用了间接块,需要将间接块地址读进来 */
			ASSERT(file->fd_inode->i_sectors[12] != 0);	//一级间接表存在
c0009a1a:	8b 45 08             	mov    0x8(%ebp),%eax
c0009a1d:	8b 40 08             	mov    0x8(%eax),%eax
c0009a20:	8b 40 40             	mov    0x40(%eax),%eax
c0009a23:	85 c0                	test   %eax,%eax
c0009a25:	75 1c                	jne    c0009a43 <file_write+0x205>
/work/x86_os_my/fs/file.c:300 (discriminator 1)
c0009a27:	68 ac d9 00 c0       	push   $0xc000d9ac
c0009a2c:	68 b4 db 00 c0       	push   $0xc000dbb4
c0009a31:	68 2c 01 00 00       	push   $0x12c
c0009a36:	68 85 d9 00 c0       	push   $0xc000d985
c0009a3b:	e8 e1 88 ff ff       	call   c0002321 <panic_spin>
c0009a40:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:301
			indirect_block_table = file->fd_inode->i_sectors[12];
c0009a43:	8b 45 08             	mov    0x8(%ebp),%eax
c0009a46:	8b 40 08             	mov    0x8(%eax),%eax
c0009a49:	8b 40 40             	mov    0x40(%eax),%eax
c0009a4c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
/work/x86_os_my/fs/file.c:302
			ide_read(cur_part->my_disk, indirect_block_table, all_blocks + 12, 1);	//读出整个一级间接表512字节（128个间接块的地址）
c0009a4f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009a52:	8d 48 30             	lea    0x30(%eax),%ecx
c0009a55:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0009a58:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0009a5d:	8b 40 08             	mov    0x8(%eax),%eax
c0009a60:	6a 01                	push   $0x1
c0009a62:	51                   	push   %ecx
c0009a63:	52                   	push   %edx
c0009a64:	50                   	push   %eax
c0009a65:	e8 6f c5 ff ff       	call   c0005fd9 <ide_read>
c0009a6a:	83 c4 10             	add    $0x10,%esp
c0009a6d:	e9 f6 03 00 00       	jmp    c0009e68 <file_write+0x62a>
/work/x86_os_my/fs/file.c:308
		}
	} else {
	/* 若有增量，便涉及到分配新数据块（扇区），以及是否分配一级间接块表。
	 * 分三种情况处理： */
		/* 第一种情况：12个直接块够用*/
		if (file_will_use_blocks <= 12 ) {
c0009a72:	83 7d cc 0c          	cmpl   $0xc,-0x34(%ebp)
c0009a76:	0f 87 2b 01 00 00    	ja     c0009ba7 <file_write+0x369>
/work/x86_os_my/fs/file.c:310
			/* 将有剩余空间的可继续用的数据块（扇区）地址写入all_blocks */
			block_idx = file_has_used_blocks - 1;	// 指向最后一个已占用的数据块（扇区）
c0009a7c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0009a7f:	83 e8 01             	sub    $0x1,%eax
c0009a82:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:311
			ASSERT(file->fd_inode->i_sectors[block_idx] != 0);
c0009a85:	8b 45 08             	mov    0x8(%ebp),%eax
c0009a88:	8b 40 08             	mov    0x8(%eax),%eax
c0009a8b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0009a8e:	83 c2 04             	add    $0x4,%edx
c0009a91:	8b 04 90             	mov    (%eax,%edx,4),%eax
c0009a94:	85 c0                	test   %eax,%eax
c0009a96:	75 1c                	jne    c0009ab4 <file_write+0x276>
/work/x86_os_my/fs/file.c:311 (discriminator 1)
c0009a98:	68 d0 d9 00 c0       	push   $0xc000d9d0
c0009a9d:	68 b4 db 00 c0       	push   $0xc000dbb4
c0009aa2:	68 37 01 00 00       	push   $0x137
c0009aa7:	68 85 d9 00 c0       	push   $0xc000d985
c0009aac:	e8 70 88 ff ff       	call   c0002321 <panic_spin>
c0009ab1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:312
			all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];
c0009ab4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009ab7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0009abe:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009ac1:	01 c2                	add    %eax,%edx
c0009ac3:	8b 45 08             	mov    0x8(%ebp),%eax
c0009ac6:	8b 40 08             	mov    0x8(%eax),%eax
c0009ac9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0009acc:	83 c1 04             	add    $0x4,%ecx
c0009acf:	8b 04 88             	mov    (%eax,%ecx,4),%eax
c0009ad2:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/file.c:315

			/* 将未来要用的新数据块（扇区）分配好后写入all_blocks */
			block_idx = file_has_used_blocks;		// 指向第一个要分配的新数据块（扇区）
c0009ad4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0009ad7:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:316
			while (block_idx < file_will_use_blocks) {
c0009ada:	e9 b7 00 00 00       	jmp    c0009b96 <file_write+0x358>
/work/x86_os_my/fs/file.c:317
				block_lba = block_bitmap_alloc(cur_part);
c0009adf:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0009ae4:	83 ec 0c             	sub    $0xc,%esp
c0009ae7:	50                   	push   %eax
c0009ae8:	e8 59 f8 ff ff       	call   c0009346 <block_bitmap_alloc>
c0009aed:	83 c4 10             	add    $0x10,%esp
c0009af0:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/file.c:318
				if (block_lba == -1) {
c0009af3:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
c0009af7:	75 1a                	jne    c0009b13 <file_write+0x2d5>
/work/x86_os_my/fs/file.c:319
					printk("file_write: block_bitmap_alloc for situation 1 failed\n");
c0009af9:	83 ec 0c             	sub    $0xc,%esp
c0009afc:	68 fc d9 00 c0       	push   $0xc000d9fc
c0009b01:	e8 4c cf ff ff       	call   c0006a52 <printk>
c0009b06:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:320
					return -1;
c0009b09:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009b0e:	e9 bd 04 00 00       	jmp    c0009fd0 <file_write+0x792>
/work/x86_os_my/fs/file.c:324
				}

				/* 写文件时，数据块未使用时肯定有 i_sectors[x]==0。因为文件删除时，会把i_sectors[x]里的数据块地址清0 */
				ASSERT(file->fd_inode->i_sectors[block_idx] == 0);	// 确保尚未分配扇区地址
c0009b13:	8b 45 08             	mov    0x8(%ebp),%eax
c0009b16:	8b 40 08             	mov    0x8(%eax),%eax
c0009b19:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0009b1c:	83 c2 04             	add    $0x4,%edx
c0009b1f:	8b 04 90             	mov    (%eax,%edx,4),%eax
c0009b22:	85 c0                	test   %eax,%eax
c0009b24:	74 1c                	je     c0009b42 <file_write+0x304>
/work/x86_os_my/fs/file.c:324 (discriminator 1)
c0009b26:	68 34 da 00 c0       	push   $0xc000da34
c0009b2b:	68 b4 db 00 c0       	push   $0xc000dbb4
c0009b30:	68 44 01 00 00       	push   $0x144
c0009b35:	68 85 d9 00 c0       	push   $0xc000d985
c0009b3a:	e8 e2 87 ff ff       	call   c0002321 <panic_spin>
c0009b3f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:325
				file->fd_inode->i_sectors[block_idx] = all_blocks[block_idx] = block_lba;		//处理直接块
c0009b42:	8b 45 08             	mov    0x8(%ebp),%eax
c0009b45:	8b 50 08             	mov    0x8(%eax),%edx
c0009b48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009b4b:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
c0009b52:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009b55:	01 c8                	add    %ecx,%eax
c0009b57:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0009b5a:	89 08                	mov    %ecx,(%eax)
c0009b5c:	8b 00                	mov    (%eax),%eax
c0009b5e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0009b61:	83 c1 04             	add    $0x4,%ecx
c0009b64:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
/work/x86_os_my/fs/file.c:328

				/* 每分配一个块就将位图同步到硬盘 */
				block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
c0009b67:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0009b6a:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0009b6f:	8b 40 1c             	mov    0x1c(%eax),%eax
c0009b72:	8b 40 28             	mov    0x28(%eax),%eax
c0009b75:	29 c2                	sub    %eax,%edx
c0009b77:	89 d0                	mov    %edx,%eax
c0009b79:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/fs/file.c:330
				// 这回怎么没有这句了：ASSERT(block_bitmap_idx != 0);
				bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c0009b7c:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0009b81:	83 ec 04             	sub    $0x4,%esp
c0009b84:	6a 01                	push   $0x1
c0009b86:	ff 75 d4             	pushl  -0x2c(%ebp)
c0009b89:	50                   	push   %eax
c0009b8a:	e8 09 f8 ff ff       	call   c0009398 <bitmap_sync>
c0009b8f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:332

				block_idx++;   // 下一个分配的新扇区
c0009b92:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/file.c:316
			ASSERT(file->fd_inode->i_sectors[block_idx] != 0);
			all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];

			/* 将未来要用的新数据块（扇区）分配好后写入all_blocks */
			block_idx = file_has_used_blocks;		// 指向第一个要分配的新数据块（扇区）
			while (block_idx < file_will_use_blocks) {
c0009b96:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009b99:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c0009b9c:	0f 82 3d ff ff ff    	jb     c0009adf <file_write+0x2a1>
c0009ba2:	e9 c1 02 00 00       	jmp    c0009e68 <file_write+0x62a>
/work/x86_os_my/fs/file.c:334
				// 这回怎么没有这句了：ASSERT(block_bitmap_idx != 0);
				bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);

				block_idx++;   // 下一个分配的新扇区
			}
		} else if (file_has_used_blocks <= 12 && file_will_use_blocks > 12) {
c0009ba7:	83 7d d0 0c          	cmpl   $0xc,-0x30(%ebp)
c0009bab:	0f 87 af 01 00 00    	ja     c0009d60 <file_write+0x522>
/work/x86_os_my/fs/file.c:334 (discriminator 1)
c0009bb1:	83 7d cc 0c          	cmpl   $0xc,-0x34(%ebp)
c0009bb5:	0f 86 a5 01 00 00    	jbe    c0009d60 <file_write+0x522>
/work/x86_os_my/fs/file.c:338
		/* 第二种情况：旧数据在12个直接块内，新数据将使用间接块【可能也使用一些直接块】 */

			/* 先将有剩余空间的可继续用的扇区地址收集到all_blocks */
			block_idx = file_has_used_blocks - 1;	// 指向最后一个已占用的数据块（扇区）
c0009bbb:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0009bbe:	83 e8 01             	sub    $0x1,%eax
c0009bc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:339
			all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];						//处理直接块
c0009bc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009bc7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0009bce:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009bd1:	01 c2                	add    %eax,%edx
c0009bd3:	8b 45 08             	mov    0x8(%ebp),%eax
c0009bd6:	8b 40 08             	mov    0x8(%eax),%eax
c0009bd9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0009bdc:	83 c1 04             	add    $0x4,%ecx
c0009bdf:	8b 04 88             	mov    (%eax,%ecx,4),%eax
c0009be2:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/file.c:342

			/* 创建一级间接块表 */
			block_lba = block_bitmap_alloc(cur_part);
c0009be4:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0009be9:	83 ec 0c             	sub    $0xc,%esp
c0009bec:	50                   	push   %eax
c0009bed:	e8 54 f7 ff ff       	call   c0009346 <block_bitmap_alloc>
c0009bf2:	83 c4 10             	add    $0x10,%esp
c0009bf5:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/file.c:343
			if (block_lba == -1) {
c0009bf8:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
c0009bfc:	75 1a                	jne    c0009c18 <file_write+0x3da>
/work/x86_os_my/fs/file.c:344
				printk("file_write: block_bitmap_alloc for situation 2 failed\n");
c0009bfe:	83 ec 0c             	sub    $0xc,%esp
c0009c01:	68 60 da 00 c0       	push   $0xc000da60
c0009c06:	e8 47 ce ff ff       	call   c0006a52 <printk>
c0009c0b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:345
				return -1;
c0009c0e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009c13:	e9 b8 03 00 00       	jmp    c0009fd0 <file_write+0x792>
/work/x86_os_my/fs/file.c:347
			}
			ASSERT(file->fd_inode->i_sectors[12] == 0);  // 一级间接块表未建立
c0009c18:	8b 45 08             	mov    0x8(%ebp),%eax
c0009c1b:	8b 40 08             	mov    0x8(%eax),%eax
c0009c1e:	8b 40 40             	mov    0x40(%eax),%eax
c0009c21:	85 c0                	test   %eax,%eax
c0009c23:	74 1c                	je     c0009c41 <file_write+0x403>
/work/x86_os_my/fs/file.c:347 (discriminator 1)
c0009c25:	68 98 da 00 c0       	push   $0xc000da98
c0009c2a:	68 b4 db 00 c0       	push   $0xc000dbb4
c0009c2f:	68 5b 01 00 00       	push   $0x15b
c0009c34:	68 85 d9 00 c0       	push   $0xc000d985
c0009c39:	e8 e3 86 ff ff       	call   c0002321 <panic_spin>
c0009c3e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:348
			indirect_block_table = file->fd_inode->i_sectors[12] = block_lba;	// 一级间接块索引表建立了！
c0009c41:	8b 45 08             	mov    0x8(%ebp),%eax
c0009c44:	8b 40 08             	mov    0x8(%eax),%eax
c0009c47:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0009c4a:	89 50 40             	mov    %edx,0x40(%eax)
c0009c4d:	8b 40 40             	mov    0x40(%eax),%eax
c0009c50:	89 45 c4             	mov    %eax,-0x3c(%ebp)
/work/x86_os_my/fs/file.c:351
			//这里怎么没有同步一级间接块表占用的数据块到硬盘？？不是：每分配一个块就将位图同步到硬盘 吗？

			block_idx = file_has_used_blocks;		// 指向第一个要分配的新数据块（扇区）
c0009c53:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0009c56:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:352
			while (block_idx < file_will_use_blocks) {
c0009c59:	e9 d3 00 00 00       	jmp    c0009d31 <file_write+0x4f3>
/work/x86_os_my/fs/file.c:353
				block_lba = block_bitmap_alloc(cur_part);
c0009c5e:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0009c63:	83 ec 0c             	sub    $0xc,%esp
c0009c66:	50                   	push   %eax
c0009c67:	e8 da f6 ff ff       	call   c0009346 <block_bitmap_alloc>
c0009c6c:	83 c4 10             	add    $0x10,%esp
c0009c6f:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/file.c:354
				if (block_lba == -1) {
c0009c72:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
c0009c76:	75 1a                	jne    c0009c92 <file_write+0x454>
/work/x86_os_my/fs/file.c:355
					printk("file_write: block_bitmap_alloc for situation 2 failed\n");
c0009c78:	83 ec 0c             	sub    $0xc,%esp
c0009c7b:	68 60 da 00 c0       	push   $0xc000da60
c0009c80:	e8 cd cd ff ff       	call   c0006a52 <printk>
c0009c85:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:356
					return -1;
c0009c88:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009c8d:	e9 3e 03 00 00       	jmp    c0009fd0 <file_write+0x792>
/work/x86_os_my/fs/file.c:359
				}

				if (block_idx < 12) {	// 新创建的数据块仍然是直接块！
c0009c92:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
c0009c96:	77 56                	ja     c0009cee <file_write+0x4b0>
/work/x86_os_my/fs/file.c:360
					ASSERT(file->fd_inode->i_sectors[block_idx] == 0);
c0009c98:	8b 45 08             	mov    0x8(%ebp),%eax
c0009c9b:	8b 40 08             	mov    0x8(%eax),%eax
c0009c9e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0009ca1:	83 c2 04             	add    $0x4,%edx
c0009ca4:	8b 04 90             	mov    (%eax,%edx,4),%eax
c0009ca7:	85 c0                	test   %eax,%eax
c0009ca9:	74 1c                	je     c0009cc7 <file_write+0x489>
/work/x86_os_my/fs/file.c:360 (discriminator 1)
c0009cab:	68 34 da 00 c0       	push   $0xc000da34
c0009cb0:	68 b4 db 00 c0       	push   $0xc000dbb4
c0009cb5:	68 68 01 00 00       	push   $0x168
c0009cba:	68 85 d9 00 c0       	push   $0xc000d985
c0009cbf:	e8 5d 86 ff ff       	call   c0002321 <panic_spin>
c0009cc4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:361
					file->fd_inode->i_sectors[block_idx] = all_blocks[block_idx] = block_lba;	//处理直接块
c0009cc7:	8b 45 08             	mov    0x8(%ebp),%eax
c0009cca:	8b 50 08             	mov    0x8(%eax),%edx
c0009ccd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009cd0:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
c0009cd7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009cda:	01 c8                	add    %ecx,%eax
c0009cdc:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0009cdf:	89 08                	mov    %ecx,(%eax)
c0009ce1:	8b 00                	mov    (%eax),%eax
c0009ce3:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0009ce6:	83 c1 04             	add    $0x4,%ecx
c0009ce9:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
c0009cec:	eb 14                	jmp    c0009d02 <file_write+0x4c4>
/work/x86_os_my/fs/file.c:363
				} else {	// 新创建的数据块，是间接块。间接块只写入到all_block数组中,待全部分配完成后一次性同步到硬盘
					all_blocks[block_idx] = block_lba;											//处理间接块
c0009cee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009cf1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0009cf8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009cfb:	01 c2                	add    %eax,%edx
c0009cfd:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0009d00:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/file.c:367
				}

				/* 每分配一个块就将位图同步到硬盘 */
				block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
c0009d02:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0009d05:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0009d0a:	8b 40 1c             	mov    0x1c(%eax),%eax
c0009d0d:	8b 40 28             	mov    0x28(%eax),%eax
c0009d10:	29 c2                	sub    %eax,%edx
c0009d12:	89 d0                	mov    %edx,%eax
c0009d14:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/fs/file.c:368
				bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c0009d17:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0009d1c:	83 ec 04             	sub    $0x4,%esp
c0009d1f:	6a 01                	push   $0x1
c0009d21:	ff 75 d4             	pushl  -0x2c(%ebp)
c0009d24:	50                   	push   %eax
c0009d25:	e8 6e f6 ff ff       	call   c0009398 <bitmap_sync>
c0009d2a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:370

				block_idx++;   // 下一个新扇区
c0009d2d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/file.c:352
			ASSERT(file->fd_inode->i_sectors[12] == 0);  // 一级间接块表未建立
			indirect_block_table = file->fd_inode->i_sectors[12] = block_lba;	// 一级间接块索引表建立了！
			//这里怎么没有同步一级间接块表占用的数据块到硬盘？？不是：每分配一个块就将位图同步到硬盘 吗？

			block_idx = file_has_used_blocks;		// 指向第一个要分配的新数据块（扇区）
			while (block_idx < file_will_use_blocks) {
c0009d31:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009d34:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c0009d37:	0f 82 21 ff ff ff    	jb     c0009c5e <file_write+0x420>
/work/x86_os_my/fs/file.c:372
				block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
				bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);

				block_idx++;   // 下一个新扇区
			}
			ide_write(cur_part->my_disk, indirect_block_table, all_blocks + 12, 1);	// 整个一级间接块表的内容，同步到硬盘
c0009d3d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009d40:	8d 48 30             	lea    0x30(%eax),%ecx
c0009d43:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0009d46:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0009d4b:	8b 40 08             	mov    0x8(%eax),%eax
c0009d4e:	6a 01                	push   $0x1
c0009d50:	51                   	push   %ecx
c0009d51:	52                   	push   %edx
c0009d52:	50                   	push   %eax
c0009d53:	e8 f5 c3 ff ff       	call   c000614d <ide_write>
c0009d58:	83 c4 10             	add    $0x10,%esp
c0009d5b:	e9 08 01 00 00       	jmp    c0009e68 <file_write+0x62a>
/work/x86_os_my/fs/file.c:373
		} else if (file_has_used_blocks > 12) {
c0009d60:	83 7d d0 0c          	cmpl   $0xc,-0x30(%ebp)
c0009d64:	0f 86 fe 00 00 00    	jbe    c0009e68 <file_write+0x62a>
/work/x86_os_my/fs/file.c:375
		/* 第三种情况：新数据使用间接块*/
			ASSERT(file->fd_inode->i_sectors[12] != 0);				// 一级间接块表已建立
c0009d6a:	8b 45 08             	mov    0x8(%ebp),%eax
c0009d6d:	8b 40 08             	mov    0x8(%eax),%eax
c0009d70:	8b 40 40             	mov    0x40(%eax),%eax
c0009d73:	85 c0                	test   %eax,%eax
c0009d75:	75 1c                	jne    c0009d93 <file_write+0x555>
/work/x86_os_my/fs/file.c:375 (discriminator 1)
c0009d77:	68 ac d9 00 c0       	push   $0xc000d9ac
c0009d7c:	68 b4 db 00 c0       	push   $0xc000dbb4
c0009d81:	68 77 01 00 00       	push   $0x177
c0009d86:	68 85 d9 00 c0       	push   $0xc000d985
c0009d8b:	e8 91 85 ff ff       	call   c0002321 <panic_spin>
c0009d90:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:376
			indirect_block_table = file->fd_inode->i_sectors[12];	// 一级间接表地址
c0009d93:	8b 45 08             	mov    0x8(%ebp),%eax
c0009d96:	8b 40 08             	mov    0x8(%eax),%eax
c0009d99:	8b 40 40             	mov    0x40(%eax),%eax
c0009d9c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
/work/x86_os_my/fs/file.c:379

			/* 已使用的间接块也将被读入all_blocks，无须单独收录 */
			ide_read(cur_part->my_disk, indirect_block_table, all_blocks + 12, 1);	// 获取所有间接块地址
c0009d9f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009da2:	8d 48 30             	lea    0x30(%eax),%ecx
c0009da5:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0009da8:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0009dad:	8b 40 08             	mov    0x8(%eax),%eax
c0009db0:	6a 01                	push   $0x1
c0009db2:	51                   	push   %ecx
c0009db3:	52                   	push   %edx
c0009db4:	50                   	push   %eax
c0009db5:	e8 1f c2 ff ff       	call   c0005fd9 <ide_read>
c0009dba:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:381

			block_idx = file_has_used_blocks;		// 指向第一个要分配的新数据块（扇区）
c0009dbd:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0009dc0:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:382
			while (block_idx < file_will_use_blocks) {
c0009dc3:	eb 79                	jmp    c0009e3e <file_write+0x600>
/work/x86_os_my/fs/file.c:383
				block_lba = block_bitmap_alloc(cur_part);
c0009dc5:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0009dca:	83 ec 0c             	sub    $0xc,%esp
c0009dcd:	50                   	push   %eax
c0009dce:	e8 73 f5 ff ff       	call   c0009346 <block_bitmap_alloc>
c0009dd3:	83 c4 10             	add    $0x10,%esp
c0009dd6:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/file.c:384
				if (block_lba == -1) {
c0009dd9:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
c0009ddd:	75 1a                	jne    c0009df9 <file_write+0x5bb>
/work/x86_os_my/fs/file.c:385
					printk("file_write: block_bitmap_alloc for situation 3 failed\n");
c0009ddf:	83 ec 0c             	sub    $0xc,%esp
c0009de2:	68 bc da 00 c0       	push   $0xc000dabc
c0009de7:	e8 66 cc ff ff       	call   c0006a52 <printk>
c0009dec:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:386
					return -1;
c0009def:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009df4:	e9 d7 01 00 00       	jmp    c0009fd0 <file_write+0x792>
/work/x86_os_my/fs/file.c:388
				}
				all_blocks[block_idx++] = block_lba;											//处理间接块
c0009df9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009dfc:	8d 50 01             	lea    0x1(%eax),%edx
c0009dff:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0009e02:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0009e09:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009e0c:	01 c2                	add    %eax,%edx
c0009e0e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0009e11:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/file.c:391

				/* 每分配一个块就将位图同步到硬盘 */
				block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
c0009e13:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0009e16:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0009e1b:	8b 40 1c             	mov    0x1c(%eax),%eax
c0009e1e:	8b 40 28             	mov    0x28(%eax),%eax
c0009e21:	29 c2                	sub    %eax,%edx
c0009e23:	89 d0                	mov    %edx,%eax
c0009e25:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/fs/file.c:392
				bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c0009e28:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0009e2d:	83 ec 04             	sub    $0x4,%esp
c0009e30:	6a 01                	push   $0x1
c0009e32:	ff 75 d4             	pushl  -0x2c(%ebp)
c0009e35:	50                   	push   %eax
c0009e36:	e8 5d f5 ff ff       	call   c0009398 <bitmap_sync>
c0009e3b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:382

			/* 已使用的间接块也将被读入all_blocks，无须单独收录 */
			ide_read(cur_part->my_disk, indirect_block_table, all_blocks + 12, 1);	// 获取所有间接块地址

			block_idx = file_has_used_blocks;		// 指向第一个要分配的新数据块（扇区）
			while (block_idx < file_will_use_blocks) {
c0009e3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009e41:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c0009e44:	0f 82 7b ff ff ff    	jb     c0009dc5 <file_write+0x587>
/work/x86_os_my/fs/file.c:394

				/* 每分配一个块就将位图同步到硬盘 */
				block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
				bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
			}
			ide_write(cur_part->my_disk, indirect_block_table, all_blocks + 12, 1);	// 整个一级间接块表的内容，同步到硬盘
c0009e4a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009e4d:	8d 48 30             	lea    0x30(%eax),%ecx
c0009e50:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0009e53:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0009e58:	8b 40 08             	mov    0x8(%eax),%eax
c0009e5b:	6a 01                	push   $0x1
c0009e5d:	51                   	push   %ecx
c0009e5e:	52                   	push   %edx
c0009e5f:	50                   	push   %eax
c0009e60:	e8 e8 c2 ff ff       	call   c000614d <ide_write>
c0009e65:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:400
		}
	}//块地址已经收集到all_blocks中


	/* 写数据 */
	const uint8_t* src = buf;		// 用src指向buf中待写入的数据
c0009e68:	8b 45 0c             	mov    0xc(%ebp),%eax
c0009e6b:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:401
	uint32_t bytes_written = 0;		// 已写入数据的大小
c0009e6e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/file.c:407
	uint32_t sec_idx;				// 扇区索引
	uint32_t sec_lba;				// 扇区地址
	uint32_t sec_off_bytes;			// 扇区内字节偏移量
	uint32_t sec_left_bytes;		// 扇区内剩余字节量
	uint32_t chunk_size;			// 每次写入硬盘的数据块大小
	uint32_t size_left = count;		// 未写入数据的大小
c0009e75:	8b 45 10             	mov    0x10(%ebp),%eax
c0009e78:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/file.c:408
	bool first_write_block = true;	// 数据块（扇区）含有剩余空间的标识
c0009e7b:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
/work/x86_os_my/fs/file.c:409
	file->fd_pos = file->fd_inode->i_size - 1;	// 文件读写指针fd_pos为"文件大小-1"
c0009e82:	8b 45 08             	mov    0x8(%ebp),%eax
c0009e85:	8b 40 08             	mov    0x8(%eax),%eax
c0009e88:	8b 40 04             	mov    0x4(%eax),%eax
c0009e8b:	8d 50 ff             	lea    -0x1(%eax),%edx
c0009e8e:	8b 45 08             	mov    0x8(%ebp),%eax
c0009e91:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/fs/file.c:410
	while (bytes_written < count) {	// 直到写完所有数据
c0009e93:	e9 f2 00 00 00       	jmp    c0009f8a <file_write+0x74c>
/work/x86_os_my/fs/file.c:411
		memset(io_buf, 0, BLOCK_SIZE);
c0009e98:	83 ec 04             	sub    $0x4,%esp
c0009e9b:	68 00 02 00 00       	push   $0x200
c0009ea0:	6a 00                	push   $0x0
c0009ea2:	ff 75 e0             	pushl  -0x20(%ebp)
c0009ea5:	e8 19 99 ff ff       	call   c00037c3 <memset>
c0009eaa:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:412
		sec_idx = file->fd_inode->i_size / BLOCK_SIZE;	// 文件已占用的最后一个数据块
c0009ead:	8b 45 08             	mov    0x8(%ebp),%eax
c0009eb0:	8b 40 08             	mov    0x8(%eax),%eax
c0009eb3:	8b 40 04             	mov    0x4(%eax),%eax
c0009eb6:	c1 e8 09             	shr    $0x9,%eax
c0009eb9:	89 45 c0             	mov    %eax,-0x40(%ebp)
/work/x86_os_my/fs/file.c:413
		sec_lba = all_blocks[sec_idx];
c0009ebc:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0009ebf:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0009ec6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009ec9:	01 d0                	add    %edx,%eax
c0009ecb:	8b 00                	mov    (%eax),%eax
c0009ecd:	89 45 bc             	mov    %eax,-0x44(%ebp)
/work/x86_os_my/fs/file.c:414
		sec_off_bytes = file->fd_inode->i_size % BLOCK_SIZE;
c0009ed0:	8b 45 08             	mov    0x8(%ebp),%eax
c0009ed3:	8b 40 08             	mov    0x8(%eax),%eax
c0009ed6:	8b 40 04             	mov    0x4(%eax),%eax
c0009ed9:	25 ff 01 00 00       	and    $0x1ff,%eax
c0009ede:	89 45 b8             	mov    %eax,-0x48(%ebp)
/work/x86_os_my/fs/file.c:415
		sec_left_bytes = BLOCK_SIZE - sec_off_bytes;
c0009ee1:	b8 00 02 00 00       	mov    $0x200,%eax
c0009ee6:	2b 45 b8             	sub    -0x48(%ebp),%eax
c0009ee9:	89 45 b4             	mov    %eax,-0x4c(%ebp)
/work/x86_os_my/fs/file.c:418

		/* 判断此次写入硬盘的数据大小 */
		chunk_size = size_left < sec_left_bytes ? size_left : sec_left_bytes;
c0009eec:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0009eef:	39 45 b4             	cmp    %eax,-0x4c(%ebp)
c0009ef2:	0f 46 45 b4          	cmovbe -0x4c(%ebp),%eax
c0009ef6:	89 45 b0             	mov    %eax,-0x50(%ebp)
/work/x86_os_my/fs/file.c:419
		if (first_write_block) {
c0009ef9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0009efd:	74 20                	je     c0009f1f <file_write+0x6e1>
/work/x86_os_my/fs/file.c:420
			ide_read(cur_part->my_disk, sec_lba, io_buf, 1);	//先读出
c0009eff:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0009f04:	8b 40 08             	mov    0x8(%eax),%eax
c0009f07:	6a 01                	push   $0x1
c0009f09:	ff 75 e0             	pushl  -0x20(%ebp)
c0009f0c:	ff 75 bc             	pushl  -0x44(%ebp)
c0009f0f:	50                   	push   %eax
c0009f10:	e8 c4 c0 ff ff       	call   c0005fd9 <ide_read>
c0009f15:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:421
			first_write_block = false;
c0009f18:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
/work/x86_os_my/fs/file.c:423
		}
		memcpy(io_buf + sec_off_bytes, src, chunk_size);		//再写入
c0009f1f:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0009f22:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0009f25:	01 d0                	add    %edx,%eax
c0009f27:	83 ec 04             	sub    $0x4,%esp
c0009f2a:	ff 75 b0             	pushl  -0x50(%ebp)
c0009f2d:	ff 75 f0             	pushl  -0x10(%ebp)
c0009f30:	50                   	push   %eax
c0009f31:	e8 df 98 ff ff       	call   c0003815 <memcpy>
c0009f36:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:424
		ide_write(cur_part->my_disk, sec_lba, io_buf, 1);
c0009f39:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0009f3e:	8b 40 08             	mov    0x8(%eax),%eax
c0009f41:	6a 01                	push   $0x1
c0009f43:	ff 75 e0             	pushl  -0x20(%ebp)
c0009f46:	ff 75 bc             	pushl  -0x44(%ebp)
c0009f49:	50                   	push   %eax
c0009f4a:	e8 fe c1 ff ff       	call   c000614d <ide_write>
c0009f4f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:427
		//printk("file write at lba 0x%x\n", sec_lba);

		src += chunk_size;
c0009f52:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0009f55:	01 45 f0             	add    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:428
		file->fd_inode->i_size += chunk_size;	// 文件大小
c0009f58:	8b 45 08             	mov    0x8(%ebp),%eax
c0009f5b:	8b 40 08             	mov    0x8(%eax),%eax
c0009f5e:	8b 55 08             	mov    0x8(%ebp),%edx
c0009f61:	8b 52 08             	mov    0x8(%edx),%edx
c0009f64:	8b 4a 04             	mov    0x4(%edx),%ecx
c0009f67:	8b 55 b0             	mov    -0x50(%ebp),%edx
c0009f6a:	01 ca                	add    %ecx,%edx
c0009f6c:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/file.c:429
		file->fd_pos += chunk_size;				// 文件指针位置
c0009f6f:	8b 45 08             	mov    0x8(%ebp),%eax
c0009f72:	8b 10                	mov    (%eax),%edx
c0009f74:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0009f77:	01 c2                	add    %eax,%edx
c0009f79:	8b 45 08             	mov    0x8(%ebp),%eax
c0009f7c:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/fs/file.c:430
		bytes_written += chunk_size;
c0009f7e:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0009f81:	01 45 ec             	add    %eax,-0x14(%ebp)
/work/x86_os_my/fs/file.c:431
		size_left -= chunk_size;
c0009f84:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0009f87:	29 45 e8             	sub    %eax,-0x18(%ebp)
/work/x86_os_my/fs/file.c:410
	uint32_t sec_left_bytes;		// 扇区内剩余字节量
	uint32_t chunk_size;			// 每次写入硬盘的数据块大小
	uint32_t size_left = count;		// 未写入数据的大小
	bool first_write_block = true;	// 数据块（扇区）含有剩余空间的标识
	file->fd_pos = file->fd_inode->i_size - 1;	// 文件读写指针fd_pos为"文件大小-1"
	while (bytes_written < count) {	// 直到写完所有数据
c0009f8a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0009f8d:	3b 45 10             	cmp    0x10(%ebp),%eax
c0009f90:	0f 82 02 ff ff ff    	jb     c0009e98 <file_write+0x65a>
/work/x86_os_my/fs/file.c:433
		file->fd_inode->i_size += chunk_size;	// 文件大小
		file->fd_pos += chunk_size;				// 文件指针位置
		bytes_written += chunk_size;
		size_left -= chunk_size;
	}
	inode_sync(cur_part, file->fd_inode, io_buf);	// 更新文件对应的inode结构，io_buf只是个缓冲区
c0009f96:	8b 45 08             	mov    0x8(%ebp),%eax
c0009f99:	8b 50 08             	mov    0x8(%eax),%edx
c0009f9c:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c0009fa1:	83 ec 04             	sub    $0x4,%esp
c0009fa4:	ff 75 e0             	pushl  -0x20(%ebp)
c0009fa7:	52                   	push   %edx
c0009fa8:	50                   	push   %eax
c0009fa9:	e8 05 ec ff ff       	call   c0008bb3 <inode_sync>
c0009fae:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:434
	sys_free(all_blocks);
c0009fb1:	83 ec 0c             	sub    $0xc,%esp
c0009fb4:	ff 75 dc             	pushl  -0x24(%ebp)
c0009fb7:	e8 3d 93 ff ff       	call   c00032f9 <sys_free>
c0009fbc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:435
	sys_free(io_buf);
c0009fbf:	83 ec 0c             	sub    $0xc,%esp
c0009fc2:	ff 75 e0             	pushl  -0x20(%ebp)
c0009fc5:	e8 2f 93 ff ff       	call   c00032f9 <sys_free>
c0009fca:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:436
	return bytes_written;
c0009fcd:	8b 45 ec             	mov    -0x14(%ebp),%eax
/work/x86_os_my/fs/file.c:437
}
c0009fd0:	c9                   	leave  
c0009fd1:	c3                   	ret    

c0009fd2 <file_read>:
file_read():
/work/x86_os_my/fs/file.c:441


/* 从文件file中读取count个字节写入buf, 返回读出的字节数,若到文件尾则返回-1 */
int32_t file_read(struct file* file, void* buf, uint32_t count) {
c0009fd2:	55                   	push   %ebp
c0009fd3:	89 e5                	mov    %esp,%ebp
c0009fd5:	83 ec 48             	sub    $0x48,%esp
/work/x86_os_my/fs/file.c:442
	uint8_t* buf_dst = (uint8_t*)buf;
c0009fd8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0009fdb:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:443
	uint32_t size = count, size_left = size;
c0009fde:	8b 45 10             	mov    0x10(%ebp),%eax
c0009fe1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0009fe4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0009fe7:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/file.c:446

	/* 若要读取的字节数超过了文件可读的剩余量, 就用剩余量做为待读取的字节数 */
	if ((file->fd_pos + count) > file->fd_inode->i_size) {
c0009fea:	8b 45 08             	mov    0x8(%ebp),%eax
c0009fed:	8b 10                	mov    (%eax),%edx
c0009fef:	8b 45 10             	mov    0x10(%ebp),%eax
c0009ff2:	01 c2                	add    %eax,%edx
c0009ff4:	8b 45 08             	mov    0x8(%ebp),%eax
c0009ff7:	8b 40 08             	mov    0x8(%eax),%eax
c0009ffa:	8b 40 04             	mov    0x4(%eax),%eax
c0009ffd:	39 c2                	cmp    %eax,%edx
c0009fff:	76 2b                	jbe    c000a02c <file_read+0x5a>
/work/x86_os_my/fs/file.c:447
		size = file->fd_inode->i_size - file->fd_pos;
c000a001:	8b 45 08             	mov    0x8(%ebp),%eax
c000a004:	8b 40 08             	mov    0x8(%eax),%eax
c000a007:	8b 50 04             	mov    0x4(%eax),%edx
c000a00a:	8b 45 08             	mov    0x8(%ebp),%eax
c000a00d:	8b 00                	mov    (%eax),%eax
c000a00f:	29 c2                	sub    %eax,%edx
c000a011:	89 d0                	mov    %edx,%eax
c000a013:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:448
		size_left = size;
c000a016:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a019:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/file.c:449
		if (size == 0) {	// 若到文件尾则返回-1
c000a01c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c000a020:	75 0a                	jne    c000a02c <file_read+0x5a>
/work/x86_os_my/fs/file.c:450
			return -1;
c000a022:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000a027:	e9 4d 03 00 00       	jmp    c000a379 <file_read+0x3a7>
/work/x86_os_my/fs/file.c:454
		}
	}

	uint8_t* io_buf = sys_malloc(BLOCK_SIZE);
c000a02c:	83 ec 0c             	sub    $0xc,%esp
c000a02f:	68 00 02 00 00       	push   $0x200
c000a034:	e8 93 8c ff ff       	call   c0002ccc <sys_malloc>
c000a039:	83 c4 10             	add    $0x10,%esp
c000a03c:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/file.c:455
	if (io_buf == NULL) {
c000a03f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c000a043:	75 10                	jne    c000a055 <file_read+0x83>
/work/x86_os_my/fs/file.c:456
		printk("file_read: sys_malloc for io_buf failed\n");
c000a045:	83 ec 0c             	sub    $0xc,%esp
c000a048:	68 f4 da 00 c0       	push   $0xc000daf4
c000a04d:	e8 00 ca ff ff       	call   c0006a52 <printk>
c000a052:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:458
	}
	uint32_t* all_blocks = (uint32_t*)sys_malloc(BLOCK_SIZE + 48);		// 用来记录文件所有的块地址【140*4=560字节】
c000a055:	83 ec 0c             	sub    $0xc,%esp
c000a058:	68 30 02 00 00       	push   $0x230
c000a05d:	e8 6a 8c ff ff       	call   c0002ccc <sys_malloc>
c000a062:	83 c4 10             	add    $0x10,%esp
c000a065:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/file.c:459
	if (all_blocks == NULL) {
c000a068:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c000a06c:	75 1a                	jne    c000a088 <file_read+0xb6>
/work/x86_os_my/fs/file.c:460
		printk("file_read: sys_malloc for all_blocks failed\n");
c000a06e:	83 ec 0c             	sub    $0xc,%esp
c000a071:	68 20 db 00 c0       	push   $0xc000db20
c000a076:	e8 d7 c9 ff ff       	call   c0006a52 <printk>
c000a07b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:461
		return -1;
c000a07e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000a083:	e9 f1 02 00 00       	jmp    c000a379 <file_read+0x3a7>
/work/x86_os_my/fs/file.c:464
	}

	uint32_t block_read_start_idx = file->fd_pos / BLOCK_SIZE;			// 数据所在块的起始地址
c000a088:	8b 45 08             	mov    0x8(%ebp),%eax
c000a08b:	8b 00                	mov    (%eax),%eax
c000a08d:	c1 e8 09             	shr    $0x9,%eax
c000a090:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/file.c:465
	uint32_t block_read_end_idx = (file->fd_pos + size) / BLOCK_SIZE;	// 数据所在块的终止地址
c000a093:	8b 45 08             	mov    0x8(%ebp),%eax
c000a096:	8b 10                	mov    (%eax),%edx
c000a098:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a09b:	01 d0                	add    %edx,%eax
c000a09d:	c1 e8 09             	shr    $0x9,%eax
c000a0a0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/fs/file.c:466
	uint32_t read_blocks = block_read_start_idx - block_read_end_idx;	// 如增量为0,表示数据在同一扇区
c000a0a3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000a0a6:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c000a0a9:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/fs/file.c:467
	ASSERT(block_read_start_idx < 139 && block_read_end_idx < 139);
c000a0ac:	81 7d d8 8a 00 00 00 	cmpl   $0x8a,-0x28(%ebp)
c000a0b3:	77 09                	ja     c000a0be <file_read+0xec>
/work/x86_os_my/fs/file.c:467 (discriminator 1)
c000a0b5:	81 7d d4 8a 00 00 00 	cmpl   $0x8a,-0x2c(%ebp)
c000a0bc:	76 1c                	jbe    c000a0da <file_read+0x108>
/work/x86_os_my/fs/file.c:467 (discriminator 3)
c000a0be:	68 50 db 00 c0       	push   $0xc000db50
c000a0c3:	68 c0 db 00 c0       	push   $0xc000dbc0
c000a0c8:	68 d3 01 00 00       	push   $0x1d3
c000a0cd:	68 85 d9 00 c0       	push   $0xc000d985
c000a0d2:	e8 4a 82 ff ff       	call   c0002321 <panic_spin>
c000a0d7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:474
	int32_t indirect_block_table;	// 获取一级间接表地址
	uint32_t block_idx;				// 获取待读的块地址

	/* 以下开始构建all_blocks块地址数组，专门存储用到的块地址 */
	// 在同一扇区内读数据,不涉及到跨扇区读取
	if (read_blocks == 0) {
c000a0da:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c000a0de:	0f 85 84 00 00 00    	jne    c000a168 <file_read+0x196>
/work/x86_os_my/fs/file.c:475
		ASSERT(block_read_end_idx == block_read_start_idx);
c000a0e4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000a0e7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
c000a0ea:	74 1c                	je     c000a108 <file_read+0x136>
/work/x86_os_my/fs/file.c:475 (discriminator 1)
c000a0ec:	68 88 db 00 c0       	push   $0xc000db88
c000a0f1:	68 c0 db 00 c0       	push   $0xc000dbc0
c000a0f6:	68 db 01 00 00       	push   $0x1db
c000a0fb:	68 85 d9 00 c0       	push   $0xc000d985
c000a100:	e8 1c 82 ff ff       	call   c0002321 <panic_spin>
c000a105:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:476
		if (block_read_end_idx < 12 ) {	// 待读的数据在12个直接块之内
c000a108:	83 7d d4 0b          	cmpl   $0xb,-0x2c(%ebp)
c000a10c:	77 2b                	ja     c000a139 <file_read+0x167>
/work/x86_os_my/fs/file.c:477
			block_idx = block_read_end_idx;
c000a10e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000a111:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/file.c:478
			all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];
c000a114:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000a117:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000a11e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a121:	01 c2                	add    %eax,%edx
c000a123:	8b 45 08             	mov    0x8(%ebp),%eax
c000a126:	8b 40 08             	mov    0x8(%eax),%eax
c000a129:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c000a12c:	83 c1 04             	add    $0x4,%ecx
c000a12f:	8b 04 88             	mov    (%eax,%ecx,4),%eax
c000a132:	89 02                	mov    %eax,(%edx)
c000a134:	e9 5c 01 00 00       	jmp    c000a295 <file_read+0x2c3>
/work/x86_os_my/fs/file.c:480
		} else {	// 若用到了一级间接块表,需要将表中间接块读进来
			indirect_block_table = file->fd_inode->i_sectors[12];
c000a139:	8b 45 08             	mov    0x8(%ebp),%eax
c000a13c:	8b 40 08             	mov    0x8(%eax),%eax
c000a13f:	8b 40 40             	mov    0x40(%eax),%eax
c000a142:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/fs/file.c:481
			ide_read(cur_part->my_disk, indirect_block_table, all_blocks + 12, 1);
c000a145:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a148:	8d 48 30             	lea    0x30(%eax),%ecx
c000a14b:	8b 55 cc             	mov    -0x34(%ebp),%edx
c000a14e:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c000a153:	8b 40 08             	mov    0x8(%eax),%eax
c000a156:	6a 01                	push   $0x1
c000a158:	51                   	push   %ecx
c000a159:	52                   	push   %edx
c000a15a:	50                   	push   %eax
c000a15b:	e8 79 be ff ff       	call   c0005fd9 <ide_read>
c000a160:	83 c4 10             	add    $0x10,%esp
c000a163:	e9 2d 01 00 00       	jmp    c000a295 <file_read+0x2c3>
/work/x86_os_my/fs/file.c:486
		}
	} else {
	// 若要读多个数据块（扇区）
		/* 第一种情况: 起始块和终止块属于直接块*/
		if (block_read_end_idx < 12 ) {	  // 数据结束所在的块属于直接块
c000a168:	83 7d d4 0b          	cmpl   $0xb,-0x2c(%ebp)
c000a16c:	77 39                	ja     c000a1a7 <file_read+0x1d5>
/work/x86_os_my/fs/file.c:487
			block_idx = block_read_start_idx;
c000a16e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000a171:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/file.c:488
			while (block_idx <= block_read_end_idx) {
c000a174:	eb 24                	jmp    c000a19a <file_read+0x1c8>
/work/x86_os_my/fs/file.c:489
				all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];
c000a176:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000a179:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000a180:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a183:	01 c2                	add    %eax,%edx
c000a185:	8b 45 08             	mov    0x8(%ebp),%eax
c000a188:	8b 40 08             	mov    0x8(%eax),%eax
c000a18b:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c000a18e:	83 c1 04             	add    $0x4,%ecx
c000a191:	8b 04 88             	mov    (%eax,%ecx,4),%eax
c000a194:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/file.c:490
				block_idx++;
c000a196:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
/work/x86_os_my/fs/file.c:488
	} else {
	// 若要读多个数据块（扇区）
		/* 第一种情况: 起始块和终止块属于直接块*/
		if (block_read_end_idx < 12 ) {	  // 数据结束所在的块属于直接块
			block_idx = block_read_start_idx;
			while (block_idx <= block_read_end_idx) {
c000a19a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000a19d:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c000a1a0:	76 d4                	jbe    c000a176 <file_read+0x1a4>
c000a1a2:	e9 ee 00 00 00       	jmp    c000a295 <file_read+0x2c3>
/work/x86_os_my/fs/file.c:492
				all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];
				block_idx++;
			}
		} else if (block_read_start_idx < 12 && block_read_end_idx >= 12) {
c000a1a7:	83 7d d8 0b          	cmpl   $0xb,-0x28(%ebp)
c000a1ab:	0f 87 91 00 00 00    	ja     c000a242 <file_read+0x270>
/work/x86_os_my/fs/file.c:492 (discriminator 1)
c000a1b1:	83 7d d4 0b          	cmpl   $0xb,-0x2c(%ebp)
c000a1b5:	0f 86 87 00 00 00    	jbe    c000a242 <file_read+0x270>
/work/x86_os_my/fs/file.c:495
		/* 第二种情况: 待读入的数据跨越直接块和间接块两类*/
			/* 先将直接块地址写入all_blocks */
			block_idx = block_read_start_idx;
c000a1bb:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000a1be:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/file.c:496
			while (block_idx < 12) {
c000a1c1:	eb 24                	jmp    c000a1e7 <file_read+0x215>
/work/x86_os_my/fs/file.c:497
				all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];
c000a1c3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000a1c6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000a1cd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a1d0:	01 c2                	add    %eax,%edx
c000a1d2:	8b 45 08             	mov    0x8(%ebp),%eax
c000a1d5:	8b 40 08             	mov    0x8(%eax),%eax
c000a1d8:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c000a1db:	83 c1 04             	add    $0x4,%ecx
c000a1de:	8b 04 88             	mov    (%eax,%ecx,4),%eax
c000a1e1:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/file.c:498
				block_idx++;
c000a1e3:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
/work/x86_os_my/fs/file.c:496
			}
		} else if (block_read_start_idx < 12 && block_read_end_idx >= 12) {
		/* 第二种情况: 待读入的数据跨越直接块和间接块两类*/
			/* 先将直接块地址写入all_blocks */
			block_idx = block_read_start_idx;
			while (block_idx < 12) {
c000a1e7:	83 7d e8 0b          	cmpl   $0xb,-0x18(%ebp)
c000a1eb:	76 d6                	jbe    c000a1c3 <file_read+0x1f1>
/work/x86_os_my/fs/file.c:500
				all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];
				block_idx++;
			}
			ASSERT(file->fd_inode->i_sectors[12] != 0);	    // 确保已经分配了一级间接块表
c000a1ed:	8b 45 08             	mov    0x8(%ebp),%eax
c000a1f0:	8b 40 08             	mov    0x8(%eax),%eax
c000a1f3:	8b 40 40             	mov    0x40(%eax),%eax
c000a1f6:	85 c0                	test   %eax,%eax
c000a1f8:	75 1c                	jne    c000a216 <file_read+0x244>
/work/x86_os_my/fs/file.c:500 (discriminator 1)
c000a1fa:	68 ac d9 00 c0       	push   $0xc000d9ac
c000a1ff:	68 c0 db 00 c0       	push   $0xc000dbc0
c000a204:	68 f4 01 00 00       	push   $0x1f4
c000a209:	68 85 d9 00 c0       	push   $0xc000d985
c000a20e:	e8 0e 81 ff ff       	call   c0002321 <panic_spin>
c000a213:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:503

			/* 再将间接块地址写入all_blocks */
			indirect_block_table = file->fd_inode->i_sectors[12];
c000a216:	8b 45 08             	mov    0x8(%ebp),%eax
c000a219:	8b 40 08             	mov    0x8(%eax),%eax
c000a21c:	8b 40 40             	mov    0x40(%eax),%eax
c000a21f:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/fs/file.c:504
			ide_read(cur_part->my_disk, indirect_block_table, all_blocks + 12, 1);	      // 将一级间接块表读进来写入到第13个块的位置之后
c000a222:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a225:	8d 48 30             	lea    0x30(%eax),%ecx
c000a228:	8b 55 cc             	mov    -0x34(%ebp),%edx
c000a22b:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c000a230:	8b 40 08             	mov    0x8(%eax),%eax
c000a233:	6a 01                	push   $0x1
c000a235:	51                   	push   %ecx
c000a236:	52                   	push   %edx
c000a237:	50                   	push   %eax
c000a238:	e8 9c bd ff ff       	call   c0005fd9 <ide_read>
c000a23d:	83 c4 10             	add    $0x10,%esp
c000a240:	eb 53                	jmp    c000a295 <file_read+0x2c3>
/work/x86_os_my/fs/file.c:507
		} else {
		/* 第三种情况: 数据在间接块中*/
			ASSERT(file->fd_inode->i_sectors[12] != 0);	    // 确保已经分配了一级间接块表
c000a242:	8b 45 08             	mov    0x8(%ebp),%eax
c000a245:	8b 40 08             	mov    0x8(%eax),%eax
c000a248:	8b 40 40             	mov    0x40(%eax),%eax
c000a24b:	85 c0                	test   %eax,%eax
c000a24d:	75 1c                	jne    c000a26b <file_read+0x299>
/work/x86_os_my/fs/file.c:507 (discriminator 1)
c000a24f:	68 ac d9 00 c0       	push   $0xc000d9ac
c000a254:	68 c0 db 00 c0       	push   $0xc000dbc0
c000a259:	68 fb 01 00 00       	push   $0x1fb
c000a25e:	68 85 d9 00 c0       	push   $0xc000d985
c000a263:	e8 b9 80 ff ff       	call   c0002321 <panic_spin>
c000a268:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:508
			indirect_block_table = file->fd_inode->i_sectors[12];	      // 获取一级间接表地址
c000a26b:	8b 45 08             	mov    0x8(%ebp),%eax
c000a26e:	8b 40 08             	mov    0x8(%eax),%eax
c000a271:	8b 40 40             	mov    0x40(%eax),%eax
c000a274:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/fs/file.c:509
			ide_read(cur_part->my_disk, indirect_block_table, all_blocks + 12, 1);	      // 将一级间接块表读进来写入到第13个块的位置之后
c000a277:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a27a:	8d 48 30             	lea    0x30(%eax),%ecx
c000a27d:	8b 55 cc             	mov    -0x34(%ebp),%edx
c000a280:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c000a285:	8b 40 08             	mov    0x8(%eax),%eax
c000a288:	6a 01                	push   $0x1
c000a28a:	51                   	push   %ecx
c000a28b:	52                   	push   %edx
c000a28c:	50                   	push   %eax
c000a28d:	e8 47 bd ff ff       	call   c0005fd9 <ide_read>
c000a292:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:516
	}//块地址已经收集到all_blocks中


	/* 读数据 */
	uint32_t sec_idx, sec_lba, sec_off_bytes, sec_left_bytes, chunk_size;
	uint32_t bytes_read = 0;
c000a295:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
/work/x86_os_my/fs/file.c:517
	while (bytes_read < size) {	// 直到读完为止
c000a29c:	e9 ad 00 00 00       	jmp    c000a34e <file_read+0x37c>
/work/x86_os_my/fs/file.c:518
		sec_idx = file->fd_pos / BLOCK_SIZE;
c000a2a1:	8b 45 08             	mov    0x8(%ebp),%eax
c000a2a4:	8b 00                	mov    (%eax),%eax
c000a2a6:	c1 e8 09             	shr    $0x9,%eax
c000a2a9:	89 45 c8             	mov    %eax,-0x38(%ebp)
/work/x86_os_my/fs/file.c:519
		sec_lba = all_blocks[sec_idx];
c000a2ac:	8b 45 c8             	mov    -0x38(%ebp),%eax
c000a2af:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000a2b6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a2b9:	01 d0                	add    %edx,%eax
c000a2bb:	8b 00                	mov    (%eax),%eax
c000a2bd:	89 45 c4             	mov    %eax,-0x3c(%ebp)
/work/x86_os_my/fs/file.c:520
		sec_off_bytes = file->fd_pos % BLOCK_SIZE;
c000a2c0:	8b 45 08             	mov    0x8(%ebp),%eax
c000a2c3:	8b 00                	mov    (%eax),%eax
c000a2c5:	25 ff 01 00 00       	and    $0x1ff,%eax
c000a2ca:	89 45 c0             	mov    %eax,-0x40(%ebp)
/work/x86_os_my/fs/file.c:521
		sec_left_bytes = BLOCK_SIZE - sec_off_bytes;
c000a2cd:	b8 00 02 00 00       	mov    $0x200,%eax
c000a2d2:	2b 45 c0             	sub    -0x40(%ebp),%eax
c000a2d5:	89 45 bc             	mov    %eax,-0x44(%ebp)
/work/x86_os_my/fs/file.c:522
		chunk_size = size_left < sec_left_bytes ? size_left : sec_left_bytes;	// 待读入的数据大小
c000a2d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000a2db:	39 45 bc             	cmp    %eax,-0x44(%ebp)
c000a2de:	0f 46 45 bc          	cmovbe -0x44(%ebp),%eax
c000a2e2:	89 45 b8             	mov    %eax,-0x48(%ebp)
/work/x86_os_my/fs/file.c:524

		memset(io_buf, 0, BLOCK_SIZE);
c000a2e5:	83 ec 04             	sub    $0x4,%esp
c000a2e8:	68 00 02 00 00       	push   $0x200
c000a2ed:	6a 00                	push   $0x0
c000a2ef:	ff 75 e0             	pushl  -0x20(%ebp)
c000a2f2:	e8 cc 94 ff ff       	call   c00037c3 <memset>
c000a2f7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:525
		ide_read(cur_part->my_disk, sec_lba, io_buf, 1);
c000a2fa:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c000a2ff:	8b 40 08             	mov    0x8(%eax),%eax
c000a302:	6a 01                	push   $0x1
c000a304:	ff 75 e0             	pushl  -0x20(%ebp)
c000a307:	ff 75 c4             	pushl  -0x3c(%ebp)
c000a30a:	50                   	push   %eax
c000a30b:	e8 c9 bc ff ff       	call   c0005fd9 <ide_read>
c000a310:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:526
		memcpy(buf_dst, io_buf + sec_off_bytes, chunk_size);
c000a313:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000a316:	8b 45 c0             	mov    -0x40(%ebp),%eax
c000a319:	01 d0                	add    %edx,%eax
c000a31b:	83 ec 04             	sub    $0x4,%esp
c000a31e:	ff 75 b8             	pushl  -0x48(%ebp)
c000a321:	50                   	push   %eax
c000a322:	ff 75 f4             	pushl  -0xc(%ebp)
c000a325:	e8 eb 94 ff ff       	call   c0003815 <memcpy>
c000a32a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:528

		buf_dst += chunk_size;
c000a32d:	8b 45 b8             	mov    -0x48(%ebp),%eax
c000a330:	01 45 f4             	add    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:529
		file->fd_pos += chunk_size;
c000a333:	8b 45 08             	mov    0x8(%ebp),%eax
c000a336:	8b 10                	mov    (%eax),%edx
c000a338:	8b 45 b8             	mov    -0x48(%ebp),%eax
c000a33b:	01 c2                	add    %eax,%edx
c000a33d:	8b 45 08             	mov    0x8(%ebp),%eax
c000a340:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/fs/file.c:530
		bytes_read += chunk_size;
c000a342:	8b 45 b8             	mov    -0x48(%ebp),%eax
c000a345:	01 45 e4             	add    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/file.c:531
		size_left -= chunk_size;
c000a348:	8b 45 b8             	mov    -0x48(%ebp),%eax
c000a34b:	29 45 ec             	sub    %eax,-0x14(%ebp)
/work/x86_os_my/fs/file.c:517


	/* 读数据 */
	uint32_t sec_idx, sec_lba, sec_off_bytes, sec_left_bytes, chunk_size;
	uint32_t bytes_read = 0;
	while (bytes_read < size) {	// 直到读完为止
c000a34e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000a351:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c000a354:	0f 82 47 ff ff ff    	jb     c000a2a1 <file_read+0x2cf>
/work/x86_os_my/fs/file.c:533
		buf_dst += chunk_size;
		file->fd_pos += chunk_size;
		bytes_read += chunk_size;
		size_left -= chunk_size;
	}
	sys_free(all_blocks);
c000a35a:	83 ec 0c             	sub    $0xc,%esp
c000a35d:	ff 75 dc             	pushl  -0x24(%ebp)
c000a360:	e8 94 8f ff ff       	call   c00032f9 <sys_free>
c000a365:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:534
	sys_free(io_buf);
c000a368:	83 ec 0c             	sub    $0xc,%esp
c000a36b:	ff 75 e0             	pushl  -0x20(%ebp)
c000a36e:	e8 86 8f ff ff       	call   c00032f9 <sys_free>
c000a373:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:535
	return bytes_read;
c000a376:	8b 45 e4             	mov    -0x1c(%ebp),%eax
/work/x86_os_my/fs/file.c:536
}
c000a379:	c9                   	leave  
c000a37a:	c3                   	ret    

c000a37b <open_root_dir>:
open_root_dir():
/work/x86_os_my/fs/dir.c:17
#include "super_block.h"

struct dir root_dir;	// 根目录

/* 打开根目录 */
void open_root_dir(struct partition* part) {
c000a37b:	55                   	push   %ebp
c000a37c:	89 e5                	mov    %esp,%ebp
c000a37e:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/fs/dir.c:18
	root_dir.inode = inode_open(part, part->sb->root_inode_no);
c000a381:	8b 45 08             	mov    0x8(%ebp),%eax
c000a384:	8b 40 1c             	mov    0x1c(%eax),%eax
c000a387:	8b 40 2c             	mov    0x2c(%eax),%eax
c000a38a:	83 ec 08             	sub    $0x8,%esp
c000a38d:	50                   	push   %eax
c000a38e:	ff 75 08             	pushl  0x8(%ebp)
c000a391:	e8 44 e9 ff ff       	call   c0008cda <inode_open>
c000a396:	83 c4 10             	add    $0x10,%esp
c000a399:	a3 60 21 01 c0       	mov    %eax,0xc0012160
/work/x86_os_my/fs/dir.c:19
	root_dir.dir_pos = 0;
c000a39e:	c7 05 64 21 01 c0 00 	movl   $0x0,0xc0012164
c000a3a5:	00 00 00 
/work/x86_os_my/fs/dir.c:20
}
c000a3a8:	90                   	nop
c000a3a9:	c9                   	leave  
c000a3aa:	c3                   	ret    

c000a3ab <dir_open>:
dir_open():
/work/x86_os_my/fs/dir.c:23

/* 在分区part上打开i结点为inode_no的目录，并返回目录指针 */
struct dir* dir_open(struct partition* part, uint32_t inode_no) {
c000a3ab:	55                   	push   %ebp
c000a3ac:	89 e5                	mov    %esp,%ebp
c000a3ae:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/dir.c:24
	struct dir* pdir = (struct dir*)sys_malloc(sizeof(struct dir));	//除根目录以外的其他目录，要分配内存
c000a3b1:	83 ec 0c             	sub    $0xc,%esp
c000a3b4:	68 08 02 00 00       	push   $0x208
c000a3b9:	e8 0e 89 ff ff       	call   c0002ccc <sys_malloc>
c000a3be:	83 c4 10             	add    $0x10,%esp
c000a3c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:25
	pdir->inode = inode_open(part, inode_no);
c000a3c4:	83 ec 08             	sub    $0x8,%esp
c000a3c7:	ff 75 0c             	pushl  0xc(%ebp)
c000a3ca:	ff 75 08             	pushl  0x8(%ebp)
c000a3cd:	e8 08 e9 ff ff       	call   c0008cda <inode_open>
c000a3d2:	83 c4 10             	add    $0x10,%esp
c000a3d5:	89 c2                	mov    %eax,%edx
c000a3d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000a3da:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/fs/dir.c:26
	pdir->dir_pos = 0;
c000a3dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000a3df:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
/work/x86_os_my/fs/dir.c:27
	return pdir;
c000a3e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/dir.c:28
}
c000a3e9:	c9                   	leave  
c000a3ea:	c3                   	ret    

c000a3eb <search_dir_entry>:
search_dir_entry():
/work/x86_os_my/fs/dir.c:32

/* 在part分区内的pdir目录内，寻找名为name的目录项，
 * 找到后返回true，并将其目录项存入dir_e；否则返回false */
bool search_dir_entry(struct partition* part, struct dir* pdir, const char* name, struct dir_entry* dir_e) {
c000a3eb:	55                   	push   %ebp
c000a3ec:	89 e5                	mov    %esp,%ebp
c000a3ee:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/fs/dir.c:34
	/* 1分配 */
	uint32_t block_cnt = 140;	 // 12个直接块+128个一级间接块 = 目录的inode管理的所有块 = 140块
c000a3f1:	c7 45 e8 8c 00 00 00 	movl   $0x8c,-0x18(%ebp)
/work/x86_os_my/fs/dir.c:39

	/* 12个直接块大小+128个间接块,共560字节（140个块，inode需要管理块的地址，每个4字节）
	注意: all_blocks 里面并没有一级间接表的地址，只有直接块+间接块的地址！
	用all_blocks检索inode管理的所有块地址 */
	uint32_t* all_blocks = (uint32_t*)sys_malloc(48 + 512);
c000a3f8:	83 ec 0c             	sub    $0xc,%esp
c000a3fb:	68 30 02 00 00       	push   $0x230
c000a400:	e8 c7 88 ff ff       	call   c0002ccc <sys_malloc>
c000a405:	83 c4 10             	add    $0x10,%esp
c000a408:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/dir.c:40
	if (all_blocks == NULL) {
c000a40b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c000a40f:	75 1a                	jne    c000a42b <search_dir_entry+0x40>
/work/x86_os_my/fs/dir.c:41
		printk("search_dir_entry: sys_malloc for all_blocks failed");
c000a411:	83 ec 0c             	sub    $0xc,%esp
c000a414:	68 cc db 00 c0       	push   $0xc000dbcc
c000a419:	e8 34 c6 ff ff       	call   c0006a52 <printk>
c000a41e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:42
		return false;
c000a421:	b8 00 00 00 00       	mov    $0x0,%eax
c000a426:	e9 96 01 00 00       	jmp    c000a5c1 <search_dir_entry+0x1d6>
/work/x86_os_my/fs/dir.c:45
	}

	uint32_t block_idx = 0;
c000a42b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:46
	while (block_idx < 12) {
c000a432:	eb 23                	jmp    c000a457 <search_dir_entry+0x6c>
/work/x86_os_my/fs/dir.c:47
		all_blocks[block_idx] = pdir->inode->i_sectors[block_idx];
c000a434:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000a437:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000a43e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000a441:	01 c2                	add    %eax,%edx
c000a443:	8b 45 0c             	mov    0xc(%ebp),%eax
c000a446:	8b 00                	mov    (%eax),%eax
c000a448:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c000a44b:	83 c1 04             	add    $0x4,%ecx
c000a44e:	8b 04 88             	mov    (%eax,%ecx,4),%eax
c000a451:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/dir.c:48
		block_idx++;
c000a453:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:46
		printk("search_dir_entry: sys_malloc for all_blocks failed");
		return false;
	}

	uint32_t block_idx = 0;
	while (block_idx < 12) {
c000a457:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
c000a45b:	76 d7                	jbe    c000a434 <search_dir_entry+0x49>
/work/x86_os_my/fs/dir.c:50
		all_blocks[block_idx] = pdir->inode->i_sectors[block_idx];
		block_idx++;
	}
	block_idx = 0;
c000a45d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:52

	if (pdir->inode->i_sectors[12] != 0) {	// i_sectors[12] != 0代表含有一级间接块表
c000a464:	8b 45 0c             	mov    0xc(%ebp),%eax
c000a467:	8b 00                	mov    (%eax),%eax
c000a469:	8b 40 40             	mov    0x40(%eax),%eax
c000a46c:	85 c0                	test   %eax,%eax
c000a46e:	74 21                	je     c000a491 <search_dir_entry+0xa6>
/work/x86_os_my/fs/dir.c:54
		//从硬盘的扇区地址i_sectors[12]处获取 1 扇区数据，就是 128 个间接块的地址，将其复制到 all_blocks+12 处【复制的是整个一级间接表】
		ide_read(part->my_disk, pdir->inode->i_sectors[12], all_blocks + 12, 1);
c000a470:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000a473:	8d 48 30             	lea    0x30(%eax),%ecx
c000a476:	8b 45 0c             	mov    0xc(%ebp),%eax
c000a479:	8b 00                	mov    (%eax),%eax
c000a47b:	8b 50 40             	mov    0x40(%eax),%edx
c000a47e:	8b 45 08             	mov    0x8(%ebp),%eax
c000a481:	8b 40 08             	mov    0x8(%eax),%eax
c000a484:	6a 01                	push   $0x1
c000a486:	51                   	push   %ecx
c000a487:	52                   	push   %edx
c000a488:	50                   	push   %eax
c000a489:	e8 4b bb ff ff       	call   c0005fd9 <ide_read>
c000a48e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:62


	/* 2查找 */
	/* 写目录项的时候已保证目录项不跨扇区，这样读目录项时容易处理，只申请容纳1个扇区的内存
	 * 和处理inode_table不同，在往目录中写目录项的时候(sync_dir_entry)，避免了某个目录项 跨扇区的情况 */
	uint8_t* buf = (uint8_t*)sys_malloc(SECTOR_SIZE);
c000a491:	83 ec 0c             	sub    $0xc,%esp
c000a494:	68 00 02 00 00       	push   $0x200
c000a499:	e8 2e 88 ff ff       	call   c0002ccc <sys_malloc>
c000a49e:	83 c4 10             	add    $0x10,%esp
c000a4a1:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/dir.c:63
	struct dir_entry* p_de = (struct dir_entry*)buf;		// p_de为指向目录项的指针,值为buf起始地址
c000a4a4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000a4a7:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:64
	uint32_t dir_entry_size = part->sb->dir_entry_size;
c000a4aa:	8b 45 08             	mov    0x8(%ebp),%eax
c000a4ad:	8b 40 1c             	mov    0x1c(%eax),%eax
c000a4b0:	8b 40 30             	mov    0x30(%eax),%eax
c000a4b3:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:65
	uint32_t dir_entry_cnt = SECTOR_SIZE / dir_entry_size;	// 1扇区内可容纳的目录项个数
c000a4b6:	b8 00 02 00 00       	mov    $0x200,%eax
c000a4bb:	ba 00 00 00 00       	mov    $0x0,%edx
c000a4c0:	f7 75 dc             	divl   -0x24(%ebp)
c000a4c3:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/dir.c:67
	/* 在所有块中查找目录项 */
	while (block_idx < block_cnt) {
c000a4c6:	e9 c9 00 00 00       	jmp    c000a594 <search_dir_entry+0x1a9>
/work/x86_os_my/fs/dir.c:69
		/* 块地址为0时表示该块中无数据,继续在其它块中找 */
		if (all_blocks[block_idx] == 0) {
c000a4cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000a4ce:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000a4d5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000a4d8:	01 d0                	add    %edx,%eax
c000a4da:	8b 00                	mov    (%eax),%eax
c000a4dc:	85 c0                	test   %eax,%eax
c000a4de:	75 09                	jne    c000a4e9 <search_dir_entry+0xfe>
/work/x86_os_my/fs/dir.c:70
			block_idx++;
c000a4e0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:71
			continue;
c000a4e4:	e9 ab 00 00 00       	jmp    c000a594 <search_dir_entry+0x1a9>
/work/x86_os_my/fs/dir.c:73
		}
		ide_read(part->my_disk, all_blocks[block_idx], buf, 1);
c000a4e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000a4ec:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000a4f3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000a4f6:	01 d0                	add    %edx,%eax
c000a4f8:	8b 10                	mov    (%eax),%edx
c000a4fa:	8b 45 08             	mov    0x8(%ebp),%eax
c000a4fd:	8b 40 08             	mov    0x8(%eax),%eax
c000a500:	6a 01                	push   $0x1
c000a502:	ff 75 e0             	pushl  -0x20(%ebp)
c000a505:	52                   	push   %edx
c000a506:	50                   	push   %eax
c000a507:	e8 cd ba ff ff       	call   c0005fd9 <ide_read>
c000a50c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:75

		uint32_t dir_entry_idx = 0;
c000a50f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:77
		/* 遍历扇区中所有目录项 */
		while (dir_entry_idx < dir_entry_cnt) {
c000a516:	eb 55                	jmp    c000a56d <search_dir_entry+0x182>
/work/x86_os_my/fs/dir.c:79
			/* 若找到了,就直接复制整个目录项 */
			if (!strcmp(p_de->filename, name)) {
c000a518:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a51b:	83 ec 08             	sub    $0x8,%esp
c000a51e:	ff 75 10             	pushl  0x10(%ebp)
c000a521:	50                   	push   %eax
c000a522:	e8 71 94 ff ff       	call   c0003998 <strcmp>
c000a527:	83 c4 10             	add    $0x10,%esp
c000a52a:	84 c0                	test   %al,%al
c000a52c:	75 37                	jne    c000a565 <search_dir_entry+0x17a>
/work/x86_os_my/fs/dir.c:80
				memcpy(dir_e, p_de, dir_entry_size);
c000a52e:	83 ec 04             	sub    $0x4,%esp
c000a531:	ff 75 dc             	pushl  -0x24(%ebp)
c000a534:	ff 75 f0             	pushl  -0x10(%ebp)
c000a537:	ff 75 14             	pushl  0x14(%ebp)
c000a53a:	e8 d6 92 ff ff       	call   c0003815 <memcpy>
c000a53f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:81
				sys_free(buf);
c000a542:	83 ec 0c             	sub    $0xc,%esp
c000a545:	ff 75 e0             	pushl  -0x20(%ebp)
c000a548:	e8 ac 8d ff ff       	call   c00032f9 <sys_free>
c000a54d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:82
				sys_free(all_blocks);
c000a550:	83 ec 0c             	sub    $0xc,%esp
c000a553:	ff 75 e4             	pushl  -0x1c(%ebp)
c000a556:	e8 9e 8d ff ff       	call   c00032f9 <sys_free>
c000a55b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:83
				return true;
c000a55e:	b8 01 00 00 00       	mov    $0x1,%eax
c000a563:	eb 5c                	jmp    c000a5c1 <search_dir_entry+0x1d6>
/work/x86_os_my/fs/dir.c:85
			}
			dir_entry_idx++;
c000a565:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:86
			p_de++;
c000a569:	83 45 f0 18          	addl   $0x18,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:77
		}
		ide_read(part->my_disk, all_blocks[block_idx], buf, 1);

		uint32_t dir_entry_idx = 0;
		/* 遍历扇区中所有目录项 */
		while (dir_entry_idx < dir_entry_cnt) {
c000a56d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000a570:	3b 45 d8             	cmp    -0x28(%ebp),%eax
c000a573:	72 a3                	jb     c000a518 <search_dir_entry+0x12d>
/work/x86_os_my/fs/dir.c:89
			}
			dir_entry_idx++;
			p_de++;
		}

		block_idx++;					// 目录inode管理的下一个数据块（扇区）【目录里面是目录项，所以buf赋给p_de】
c000a575:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:90
		p_de = (struct dir_entry*)buf;	// p_de已经指向上一个扇区内，最后一个目录项，需要恢复p_de指向为buf
c000a579:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000a57c:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:91
		memset(buf, 0, SECTOR_SIZE);	// 将buf清0,下次再用
c000a57f:	83 ec 04             	sub    $0x4,%esp
c000a582:	68 00 02 00 00       	push   $0x200
c000a587:	6a 00                	push   $0x0
c000a589:	ff 75 e0             	pushl  -0x20(%ebp)
c000a58c:	e8 32 92 ff ff       	call   c00037c3 <memset>
c000a591:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:67
	uint8_t* buf = (uint8_t*)sys_malloc(SECTOR_SIZE);
	struct dir_entry* p_de = (struct dir_entry*)buf;		// p_de为指向目录项的指针,值为buf起始地址
	uint32_t dir_entry_size = part->sb->dir_entry_size;
	uint32_t dir_entry_cnt = SECTOR_SIZE / dir_entry_size;	// 1扇区内可容纳的目录项个数
	/* 在所有块中查找目录项 */
	while (block_idx < block_cnt) {
c000a594:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000a597:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c000a59a:	0f 82 2b ff ff ff    	jb     c000a4cb <search_dir_entry+0xe0>
/work/x86_os_my/fs/dir.c:93

		block_idx++;					// 目录inode管理的下一个数据块（扇区）【目录里面是目录项，所以buf赋给p_de】
		p_de = (struct dir_entry*)buf;	// p_de已经指向上一个扇区内，最后一个目录项，需要恢复p_de指向为buf
		memset(buf, 0, SECTOR_SIZE);	// 将buf清0,下次再用
	}
	sys_free(buf);
c000a5a0:	83 ec 0c             	sub    $0xc,%esp
c000a5a3:	ff 75 e0             	pushl  -0x20(%ebp)
c000a5a6:	e8 4e 8d ff ff       	call   c00032f9 <sys_free>
c000a5ab:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:94
	sys_free(all_blocks);
c000a5ae:	83 ec 0c             	sub    $0xc,%esp
c000a5b1:	ff 75 e4             	pushl  -0x1c(%ebp)
c000a5b4:	e8 40 8d ff ff       	call   c00032f9 <sys_free>
c000a5b9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:95
	return false;
c000a5bc:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/dir.c:96
}
c000a5c1:	c9                   	leave  
c000a5c2:	c3                   	ret    

c000a5c3 <dir_close>:
dir_close():
/work/x86_os_my/fs/dir.c:99

/* 关闭目录 */
void dir_close(struct dir* dir) {
c000a5c3:	55                   	push   %ebp
c000a5c4:	89 e5                	mov    %esp,%ebp
c000a5c6:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/fs/dir.c:103
	/*************      根目录不能关闭     ***************
	*1 根目录自打开后就不应该关闭,否则还需要再次open_root_dir();
	*2 root_dir所在的内存是低端1M之内,并非在堆中,free会出问题 */
	if (dir == &root_dir) {
c000a5c9:	81 7d 08 60 21 01 c0 	cmpl   $0xc0012160,0x8(%ebp)
c000a5d0:	74 21                	je     c000a5f3 <dir_close+0x30>
/work/x86_os_my/fs/dir.c:106
		return;
	}
	inode_close(dir->inode);
c000a5d2:	8b 45 08             	mov    0x8(%ebp),%eax
c000a5d5:	8b 00                	mov    (%eax),%eax
c000a5d7:	83 ec 0c             	sub    $0xc,%esp
c000a5da:	50                   	push   %eax
c000a5db:	e8 40 e8 ff ff       	call   c0008e20 <inode_close>
c000a5e0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:107
	sys_free(dir);
c000a5e3:	83 ec 0c             	sub    $0xc,%esp
c000a5e6:	ff 75 08             	pushl  0x8(%ebp)
c000a5e9:	e8 0b 8d ff ff       	call   c00032f9 <sys_free>
c000a5ee:	83 c4 10             	add    $0x10,%esp
c000a5f1:	eb 01                	jmp    c000a5f4 <dir_close+0x31>
/work/x86_os_my/fs/dir.c:104
void dir_close(struct dir* dir) {
	/*************      根目录不能关闭     ***************
	*1 根目录自打开后就不应该关闭,否则还需要再次open_root_dir();
	*2 root_dir所在的内存是低端1M之内,并非在堆中,free会出问题 */
	if (dir == &root_dir) {
		return;
c000a5f3:	90                   	nop
/work/x86_os_my/fs/dir.c:108
	}
	inode_close(dir->inode);
	sys_free(dir);
}
c000a5f4:	c9                   	leave  
c000a5f5:	c3                   	ret    

c000a5f6 <create_dir_entry>:
create_dir_entry():
/work/x86_os_my/fs/dir.c:111

/* 在内存中初始化目录项p_de */
void create_dir_entry(char* filename, uint32_t inode_no, uint8_t file_type, struct dir_entry* p_de) {
c000a5f6:	55                   	push   %ebp
c000a5f7:	89 e5                	mov    %esp,%ebp
c000a5f9:	83 ec 18             	sub    $0x18,%esp
c000a5fc:	8b 45 10             	mov    0x10(%ebp),%eax
c000a5ff:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:112
	ASSERT(strlen(filename) <=  MAX_FILE_NAME_LEN);
c000a602:	83 ec 0c             	sub    $0xc,%esp
c000a605:	ff 75 08             	pushl  0x8(%ebp)
c000a608:	e8 40 93 ff ff       	call   c000394d <strlen>
c000a60d:	83 c4 10             	add    $0x10,%esp
c000a610:	83 f8 10             	cmp    $0x10,%eax
c000a613:	76 19                	jbe    c000a62e <create_dir_entry+0x38>
/work/x86_os_my/fs/dir.c:112 (discriminator 1)
c000a615:	68 00 dc 00 c0       	push   $0xc000dc00
c000a61a:	68 8c dd 00 c0       	push   $0xc000dd8c
c000a61f:	6a 70                	push   $0x70
c000a621:	68 26 dc 00 c0       	push   $0xc000dc26
c000a626:	e8 f6 7c ff ff       	call   c0002321 <panic_spin>
c000a62b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:115

	/* 初始化目录项 */
	memcpy(p_de->filename, filename, strlen(filename));
c000a62e:	83 ec 0c             	sub    $0xc,%esp
c000a631:	ff 75 08             	pushl  0x8(%ebp)
c000a634:	e8 14 93 ff ff       	call   c000394d <strlen>
c000a639:	83 c4 10             	add    $0x10,%esp
c000a63c:	89 c2                	mov    %eax,%edx
c000a63e:	8b 45 14             	mov    0x14(%ebp),%eax
c000a641:	83 ec 04             	sub    $0x4,%esp
c000a644:	52                   	push   %edx
c000a645:	ff 75 08             	pushl  0x8(%ebp)
c000a648:	50                   	push   %eax
c000a649:	e8 c7 91 ff ff       	call   c0003815 <memcpy>
c000a64e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:116
	p_de->i_no = inode_no;
c000a651:	8b 45 14             	mov    0x14(%ebp),%eax
c000a654:	8b 55 0c             	mov    0xc(%ebp),%edx
c000a657:	89 50 10             	mov    %edx,0x10(%eax)
/work/x86_os_my/fs/dir.c:117
	p_de->f_type = file_type;
c000a65a:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
c000a65e:	8b 45 14             	mov    0x14(%ebp),%eax
c000a661:	89 50 14             	mov    %edx,0x14(%eax)
/work/x86_os_my/fs/dir.c:118
}
c000a664:	90                   	nop
c000a665:	c9                   	leave  
c000a666:	c3                   	ret    

c000a667 <sync_dir_entry>:
sync_dir_entry():
/work/x86_os_my/fs/dir.c:128
 * io_buf是由主调函数提供的，里面是一个一个的目录项
 */
// 全局变量 cur_part 定义在fs.c中
// 临时变量 all_blocks 保存目录中 所有数据块的地址【4*140=560字节，去掉前12个直接块的地址48字节，后边全是间接块，后边正好是512字节】
// 注意: all_blocks 里面并没有一级间接表的地址，只有直接块+间接块的地址！
bool sync_dir_entry(struct dir* parent_dir, struct dir_entry* p_de, void* io_buf) {
c000a667:	55                   	push   %ebp
c000a668:	89 e5                	mov    %esp,%ebp
c000a66a:	57                   	push   %edi
c000a66b:	81 ec 54 02 00 00    	sub    $0x254,%esp
/work/x86_os_my/fs/dir.c:129
	struct inode* dir_inode = parent_dir->inode;	//dir->inode：“已打开的 inode 队列”part->open_inodes 中的节点
c000a671:	8b 45 08             	mov    0x8(%ebp),%eax
c000a674:	8b 00                	mov    (%eax),%eax
c000a676:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:130
	uint32_t dir_size = dir_inode->i_size;			//inode->i_size：当inode是目录时，代表 目录下所有目录项大小之和
c000a679:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a67c:	8b 40 04             	mov    0x4(%eax),%eax
c000a67f:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:131
	uint32_t dir_entry_size = cur_part->sb->dir_entry_size;
c000a682:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c000a687:	8b 40 1c             	mov    0x1c(%eax),%eax
c000a68a:	8b 40 30             	mov    0x30(%eax),%eax
c000a68d:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/dir.c:133

	ASSERT(dir_size % dir_entry_size == 0);	// dir_size应该是dir_entry_size的整数倍
c000a690:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000a693:	ba 00 00 00 00       	mov    $0x0,%edx
c000a698:	f7 75 e8             	divl   -0x18(%ebp)
c000a69b:	89 d0                	mov    %edx,%eax
c000a69d:	85 c0                	test   %eax,%eax
c000a69f:	74 1c                	je     c000a6bd <sync_dir_entry+0x56>
/work/x86_os_my/fs/dir.c:133 (discriminator 1)
c000a6a1:	68 30 dc 00 c0       	push   $0xc000dc30
c000a6a6:	68 a0 dd 00 c0       	push   $0xc000dda0
c000a6ab:	68 85 00 00 00       	push   $0x85
c000a6b0:	68 26 dc 00 c0       	push   $0xc000dc26
c000a6b5:	e8 67 7c ff ff       	call   c0002321 <panic_spin>
c000a6ba:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:135

	uint32_t dir_entrys_per_sec = (512 / dir_entry_size);	// 每扇区最多有几个目录项【保证了：写入目录项时不会跨扇区】
c000a6bd:	b8 00 02 00 00       	mov    $0x200,%eax
c000a6c2:	ba 00 00 00 00       	mov    $0x0,%edx
c000a6c7:	f7 75 e8             	divl   -0x18(%ebp)
c000a6ca:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/dir.c:136
	int32_t block_lba = -1;
c000a6cd:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
/work/x86_os_my/fs/dir.c:140


	/* 将该目录inode管理的所有块(扇区)地址(12个直接块+ 128个间接块)存入all_blocks */
	uint8_t block_idx = 0;
c000a6d4:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/fs/dir.c:143
	// all_blocks 保存目录中 所有数据块的地址【4*140=560字节，去掉前12个直接块的地址48字节，后边全是间接块，后边正好是512字节】
	// 注意: all_blocks 里面并没有一级间接表的地址，只有直接块+间接块的地址！
	uint32_t all_blocks[140] = {0};
c000a6d8:	8d 95 a8 fd ff ff    	lea    -0x258(%ebp),%edx
c000a6de:	b8 00 00 00 00       	mov    $0x0,%eax
c000a6e3:	b9 8c 00 00 00       	mov    $0x8c,%ecx
c000a6e8:	89 d7                	mov    %edx,%edi
c000a6ea:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/fs/dir.c:144
	while (block_idx < 12) {
c000a6ec:	eb 22                	jmp    c000a710 <sync_dir_entry+0xa9>
/work/x86_os_my/fs/dir.c:145
		all_blocks[block_idx] = dir_inode->i_sectors[block_idx];
c000a6ee:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000a6f2:	0f b6 4d f7          	movzbl -0x9(%ebp),%ecx
c000a6f6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000a6f9:	83 c1 04             	add    $0x4,%ecx
c000a6fc:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
c000a6ff:	89 94 85 a8 fd ff ff 	mov    %edx,-0x258(%ebp,%eax,4)
/work/x86_os_my/fs/dir.c:146
		block_idx++;
c000a706:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000a70a:	83 c0 01             	add    $0x1,%eax
c000a70d:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/dir.c:144
	/* 将该目录inode管理的所有块(扇区)地址(12个直接块+ 128个间接块)存入all_blocks */
	uint8_t block_idx = 0;
	// all_blocks 保存目录中 所有数据块的地址【4*140=560字节，去掉前12个直接块的地址48字节，后边全是间接块，后边正好是512字节】
	// 注意: all_blocks 里面并没有一级间接表的地址，只有直接块+间接块的地址！
	uint32_t all_blocks[140] = {0};
	while (block_idx < 12) {
c000a710:	80 7d f7 0b          	cmpb   $0xb,-0x9(%ebp)
c000a714:	76 d8                	jbe    c000a6ee <sync_dir_entry+0x87>
/work/x86_os_my/fs/dir.c:151
		block_idx++;
	}


	/* 开始遍历所有块以寻找目录项空位 */
	block_idx = 0;
c000a716:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/fs/dir.c:152
	while (block_idx < 140) {	// 文件(包括目录)最多管理140个块
c000a71a:	e9 3f 03 00 00       	jmp    c000aa5e <sync_dir_entry+0x3f7>
/work/x86_os_my/fs/dir.c:155
		/* 一、若inode管理的第block_idx块是不存在的，需要分配。
		   下边是需要分配块的三种情况 @1 @2 @3 */
		int32_t block_bitmap_idx = -1;
c000a71f:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:156
		if (all_blocks[block_idx] == 0) {
c000a726:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000a72a:	8b 84 85 a8 fd ff ff 	mov    -0x258(%ebp,%eax,4),%eax
c000a731:	85 c0                	test   %eax,%eax
c000a733:	0f 85 58 02 00 00    	jne    c000a991 <sync_dir_entry+0x32a>
/work/x86_os_my/fs/dir.c:157
			block_lba = block_bitmap_alloc(cur_part);	// #1 从分区的block位图中，分配1个扇区，返回"扇区地址"
c000a739:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c000a73e:	83 ec 0c             	sub    $0xc,%esp
c000a741:	50                   	push   %eax
c000a742:	e8 ff eb ff ff       	call   c0009346 <block_bitmap_alloc>
c000a747:	83 c4 10             	add    $0x10,%esp
c000a74a:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/dir.c:158
			if (block_lba == -1) {
c000a74d:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
c000a751:	75 1a                	jne    c000a76d <sync_dir_entry+0x106>
/work/x86_os_my/fs/dir.c:159
				printk("alloc block bitmap for sync_dir_entry failed\n");
c000a753:	83 ec 0c             	sub    $0xc,%esp
c000a756:	68 50 dc 00 c0       	push   $0xc000dc50
c000a75b:	e8 f2 c2 ff ff       	call   c0006a52 <printk>
c000a760:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:160
				return false;
c000a763:	b8 00 00 00 00       	mov    $0x0,%eax
c000a768:	e9 10 03 00 00       	jmp    c000aa7d <sync_dir_entry+0x416>
/work/x86_os_my/fs/dir.c:163
			}
			/* 每分配一个块就同步一次block_bitmap */
			block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
c000a76d:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000a770:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c000a775:	8b 40 1c             	mov    0x1c(%eax),%eax
c000a778:	8b 40 28             	mov    0x28(%eax),%eax
c000a77b:	29 c2                	sub    %eax,%edx
c000a77d:	89 d0                	mov    %edx,%eax
c000a77f:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:164
			ASSERT(block_bitmap_idx != -1);	//怎么可能是-1啊。。。？
c000a782:	83 7d dc ff          	cmpl   $0xffffffff,-0x24(%ebp)
c000a786:	75 1c                	jne    c000a7a4 <sync_dir_entry+0x13d>
/work/x86_os_my/fs/dir.c:164 (discriminator 1)
c000a788:	68 7e dc 00 c0       	push   $0xc000dc7e
c000a78d:	68 a0 dd 00 c0       	push   $0xc000dda0
c000a792:	68 a4 00 00 00       	push   $0xa4
c000a797:	68 26 dc 00 c0       	push   $0xc000dc26
c000a79c:	e8 80 7b ff ff       	call   c0002321 <panic_spin>
c000a7a1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:165
			bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c000a7a4:	8b 55 dc             	mov    -0x24(%ebp),%edx
c000a7a7:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c000a7ac:	83 ec 04             	sub    $0x4,%esp
c000a7af:	6a 01                	push   $0x1
c000a7b1:	52                   	push   %edx
c000a7b2:	50                   	push   %eax
c000a7b3:	e8 e0 eb ff ff       	call   c0009398 <bitmap_sync>
c000a7b8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:167

			block_bitmap_idx = -1;
c000a7bb:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:168
			if (block_idx < 12) {			// @1 若是直接块
c000a7c2:	80 7d f7 0b          	cmpb   $0xb,-0x9(%ebp)
c000a7c6:	77 27                	ja     c000a7ef <sync_dir_entry+0x188>
/work/x86_os_my/fs/dir.c:169
				dir_inode->i_sectors[block_idx] = all_blocks[block_idx] = block_lba;
c000a7c8:	0f b6 4d f7          	movzbl -0x9(%ebp),%ecx
c000a7cc:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000a7d0:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000a7d3:	89 94 85 a8 fd ff ff 	mov    %edx,-0x258(%ebp,%eax,4)
c000a7da:	8b 94 85 a8 fd ff ff 	mov    -0x258(%ebp,%eax,4),%edx
c000a7e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a7e4:	83 c1 04             	add    $0x4,%ecx
c000a7e7:	89 14 88             	mov    %edx,(%eax,%ecx,4)
c000a7ea:	e9 3c 01 00 00       	jmp    c000a92b <sync_dir_entry+0x2c4>
/work/x86_os_my/fs/dir.c:170
			} else if (block_idx == 12) {	// @2 若是未分配 一级间接块表(block_idx==12表示第0个间接块)
c000a7ef:	80 7d f7 0c          	cmpb   $0xc,-0x9(%ebp)
c000a7f3:	0f 85 ff 00 00 00    	jne    c000a8f8 <sync_dir_entry+0x291>
/work/x86_os_my/fs/dir.c:171
				dir_inode->i_sectors[12] = block_lba;		// 将 #1 分配的块做为"一级间接块表"地址
c000a7f9:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000a7fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a7ff:	89 50 40             	mov    %edx,0x40(%eax)
/work/x86_os_my/fs/dir.c:173
				
				block_lba = -1;
c000a802:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
/work/x86_os_my/fs/dir.c:174
				block_lba = block_bitmap_alloc(cur_part);	// #2 再分配一个块做为"第0个间接块"
c000a809:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c000a80e:	83 ec 0c             	sub    $0xc,%esp
c000a811:	50                   	push   %eax
c000a812:	e8 2f eb ff ff       	call   c0009346 <block_bitmap_alloc>
c000a817:	83 c4 10             	add    $0x10,%esp
c000a81a:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/dir.c:175
				if (block_lba == -1) {
c000a81d:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
c000a821:	75 57                	jne    c000a87a <sync_dir_entry+0x213>
/work/x86_os_my/fs/dir.c:177
					// 回滚block_bitmap
					block_bitmap_idx = dir_inode->i_sectors[12] - cur_part->sb->data_start_lba;
c000a823:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a826:	8b 50 40             	mov    0x40(%eax),%edx
c000a829:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c000a82e:	8b 40 1c             	mov    0x1c(%eax),%eax
c000a831:	8b 40 28             	mov    0x28(%eax),%eax
c000a834:	29 c2                	sub    %eax,%edx
c000a836:	89 d0                	mov    %edx,%eax
c000a838:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:178
					bitmap_set(&cur_part->block_bitmap, block_bitmap_idx, 0);	//释放 #1
c000a83b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a83e:	8b 15 d0 1f 01 c0    	mov    0xc0011fd0,%edx
c000a844:	83 c2 20             	add    $0x20,%edx
c000a847:	83 ec 04             	sub    $0x4,%esp
c000a84a:	6a 00                	push   $0x0
c000a84c:	50                   	push   %eax
c000a84d:	52                   	push   %edx
c000a84e:	e8 3c 7d ff ff       	call   c000258f <bitmap_set>
c000a853:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:180
					// 取消掉这个一级间接块表
					dir_inode->i_sectors[12] = 0;
c000a856:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a859:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)
/work/x86_os_my/fs/dir.c:181
					printk("alloc block bitmap for sync_dir_entry failed\n");
c000a860:	83 ec 0c             	sub    $0xc,%esp
c000a863:	68 50 dc 00 c0       	push   $0xc000dc50
c000a868:	e8 e5 c1 ff ff       	call   c0006a52 <printk>
c000a86d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:182
					return false;
c000a870:	b8 00 00 00 00       	mov    $0x0,%eax
c000a875:	e9 03 02 00 00       	jmp    c000aa7d <sync_dir_entry+0x416>
/work/x86_os_my/fs/dir.c:185
				}
				/* 每分配一个块就同步一次block_bitmap */
				block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
c000a87a:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000a87d:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c000a882:	8b 40 1c             	mov    0x1c(%eax),%eax
c000a885:	8b 40 28             	mov    0x28(%eax),%eax
c000a888:	29 c2                	sub    %eax,%edx
c000a88a:	89 d0                	mov    %edx,%eax
c000a88c:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:186
				ASSERT(block_bitmap_idx != -1);
c000a88f:	83 7d dc ff          	cmpl   $0xffffffff,-0x24(%ebp)
c000a893:	75 1c                	jne    c000a8b1 <sync_dir_entry+0x24a>
/work/x86_os_my/fs/dir.c:186 (discriminator 1)
c000a895:	68 7e dc 00 c0       	push   $0xc000dc7e
c000a89a:	68 a0 dd 00 c0       	push   $0xc000dda0
c000a89f:	68 ba 00 00 00       	push   $0xba
c000a8a4:	68 26 dc 00 c0       	push   $0xc000dc26
c000a8a9:	e8 73 7a ff ff       	call   c0002321 <panic_spin>
c000a8ae:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:187
				bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c000a8b1:	8b 55 dc             	mov    -0x24(%ebp),%edx
c000a8b4:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c000a8b9:	83 ec 04             	sub    $0x4,%esp
c000a8bc:	6a 01                	push   $0x1
c000a8be:	52                   	push   %edx
c000a8bf:	50                   	push   %eax
c000a8c0:	e8 d3 ea ff ff       	call   c0009398 <bitmap_sync>
c000a8c5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:190

				/* 把新分配的"第0个间接块地址"写入硬盘中"一级间接块表" */
				all_blocks[12] = block_lba;
c000a8c8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000a8cb:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
/work/x86_os_my/fs/dir.c:194
				// all_blocks 共有4*140=560字节，去掉前12个直接块的地址48字节，后边全是间接块，后边正好是512字节】
				// 注意: all_blocks 里面并没有一级间接表的地址，只有直接块+间接块的地址！
				// 我们的一级间接表大小是和普通数据块大小一样的512字节，可以容纳128个数据块的地址！
				ide_write(cur_part->my_disk, dir_inode->i_sectors[12], all_blocks + 12, 1);
c000a8d1:	8d 85 a8 fd ff ff    	lea    -0x258(%ebp),%eax
c000a8d7:	83 c0 30             	add    $0x30,%eax
c000a8da:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000a8dd:	8b 4a 40             	mov    0x40(%edx),%ecx
c000a8e0:	8b 15 d0 1f 01 c0    	mov    0xc0011fd0,%edx
c000a8e6:	8b 52 08             	mov    0x8(%edx),%edx
c000a8e9:	6a 01                	push   $0x1
c000a8eb:	50                   	push   %eax
c000a8ec:	51                   	push   %ecx
c000a8ed:	52                   	push   %edx
c000a8ee:	e8 5a b8 ff ff       	call   c000614d <ide_write>
c000a8f3:	83 c4 10             	add    $0x10,%esp
c000a8f6:	eb 33                	jmp    c000a92b <sync_dir_entry+0x2c4>
/work/x86_os_my/fs/dir.c:197
			} else {						// @3 若是未分配 间接块【父目录inode管理的只有前13个数据块需要特殊处理，后边的全是间接块】
				/* 把新分配的第(block_idx-12)个间接块地址"写入硬盘中"一级间接块表 */
				all_blocks[block_idx] = block_lba;
c000a8f8:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000a8fc:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000a8ff:	89 94 85 a8 fd ff ff 	mov    %edx,-0x258(%ebp,%eax,4)
/work/x86_os_my/fs/dir.c:198
				ide_write(cur_part->my_disk, dir_inode->i_sectors[12], all_blocks + 12, 1);
c000a906:	8d 85 a8 fd ff ff    	lea    -0x258(%ebp),%eax
c000a90c:	83 c0 30             	add    $0x30,%eax
c000a90f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000a912:	8b 4a 40             	mov    0x40(%edx),%ecx
c000a915:	8b 15 d0 1f 01 c0    	mov    0xc0011fd0,%edx
c000a91b:	8b 52 08             	mov    0x8(%edx),%edx
c000a91e:	6a 01                	push   $0x1
c000a920:	50                   	push   %eax
c000a921:	51                   	push   %ecx
c000a922:	52                   	push   %edx
c000a923:	e8 25 b8 ff ff       	call   c000614d <ide_write>
c000a928:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:204
			}


			/* 这里才是重点，前边只是处理，父目录indoe管理的某个数据块为空的情况，需要新分配数据块，包括一级间接块表、间接块 */
			/* 再将硬盘中，新目录项p_de写入新分配的间接块 */
			memset(io_buf, 0, 512);
c000a92b:	83 ec 04             	sub    $0x4,%esp
c000a92e:	68 00 02 00 00       	push   $0x200
c000a933:	6a 00                	push   $0x0
c000a935:	ff 75 10             	pushl  0x10(%ebp)
c000a938:	e8 86 8e ff ff       	call   c00037c3 <memset>
c000a93d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:205
			memcpy(io_buf, p_de, dir_entry_size);
c000a940:	83 ec 04             	sub    $0x4,%esp
c000a943:	ff 75 e8             	pushl  -0x18(%ebp)
c000a946:	ff 75 0c             	pushl  0xc(%ebp)
c000a949:	ff 75 10             	pushl  0x10(%ebp)
c000a94c:	e8 c4 8e ff ff       	call   c0003815 <memcpy>
c000a951:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:206
			ide_write(cur_part->my_disk, all_blocks[block_idx], io_buf, 1);
c000a954:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000a958:	8b 94 85 a8 fd ff ff 	mov    -0x258(%ebp,%eax,4),%edx
c000a95f:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c000a964:	8b 40 08             	mov    0x8(%eax),%eax
c000a967:	6a 01                	push   $0x1
c000a969:	ff 75 10             	pushl  0x10(%ebp)
c000a96c:	52                   	push   %edx
c000a96d:	50                   	push   %eax
c000a96e:	e8 da b7 ff ff       	call   c000614d <ide_write>
c000a973:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:207
			dir_inode->i_size += dir_entry_size;	//struct inode* dir_inode = parent_dir->inode;更新的是父目录的inode结构
c000a976:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a979:	8b 50 04             	mov    0x4(%eax),%edx
c000a97c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000a97f:	01 c2                	add    %eax,%edx
c000a981:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a984:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/dir.c:208
			return true;
c000a987:	b8 01 00 00 00       	mov    $0x1,%eax
c000a98c:	e9 ec 00 00 00       	jmp    c000aa7d <sync_dir_entry+0x416>
/work/x86_os_my/fs/dir.c:213
		}//if (all_blocks[block_idx] == 0)


		/* 二、若inode管理的第block_idx块是存在的，不需要分配，将其读进内存，然后在该块中查找空目录项，将p_de填入 */
		ide_read(cur_part->my_disk, all_blocks[block_idx], io_buf, 1); 
c000a991:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000a995:	8b 94 85 a8 fd ff ff 	mov    -0x258(%ebp,%eax,4),%edx
c000a99c:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c000a9a1:	8b 40 08             	mov    0x8(%eax),%eax
c000a9a4:	6a 01                	push   $0x1
c000a9a6:	ff 75 10             	pushl  0x10(%ebp)
c000a9a9:	52                   	push   %edx
c000a9aa:	50                   	push   %eax
c000a9ab:	e8 29 b6 ff ff       	call   c0005fd9 <ide_read>
c000a9b0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:215
		/* 在扇区内查找空目录项 */
		uint8_t dir_entry_idx = 0;
c000a9b3:	c6 45 f6 00          	movb   $0x0,-0xa(%ebp)
/work/x86_os_my/fs/dir.c:216
		struct dir_entry* dir_e = (struct dir_entry*)io_buf;		// dir_e用来在io_buf中遍历目录项【io_buf里面是一个一个的目录项】
c000a9b7:	8b 45 10             	mov    0x10(%ebp),%eax
c000a9ba:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/dir.c:217
		while (dir_entry_idx < dir_entrys_per_sec) {
c000a9bd:	e9 85 00 00 00       	jmp    c000aa47 <sync_dir_entry+0x3e0>
/work/x86_os_my/fs/dir.c:218
			if ((dir_e + dir_entry_idx)->f_type == FT_UNKNOWN) {	// 无论是初始化或是删除文件，都会将f_type置为FT_UNKNOWN.
c000a9c2:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
c000a9c6:	89 d0                	mov    %edx,%eax
c000a9c8:	01 c0                	add    %eax,%eax
c000a9ca:	01 d0                	add    %edx,%eax
c000a9cc:	c1 e0 03             	shl    $0x3,%eax
c000a9cf:	89 c2                	mov    %eax,%edx
c000a9d1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000a9d4:	01 d0                	add    %edx,%eax
c000a9d6:	8b 40 14             	mov    0x14(%eax),%eax
c000a9d9:	85 c0                	test   %eax,%eax
c000a9db:	75 60                	jne    c000aa3d <sync_dir_entry+0x3d6>
/work/x86_os_my/fs/dir.c:219
				memcpy(dir_e + dir_entry_idx, p_de, dir_entry_size);    
c000a9dd:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
c000a9e1:	89 d0                	mov    %edx,%eax
c000a9e3:	01 c0                	add    %eax,%eax
c000a9e5:	01 d0                	add    %edx,%eax
c000a9e7:	c1 e0 03             	shl    $0x3,%eax
c000a9ea:	89 c2                	mov    %eax,%edx
c000a9ec:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000a9ef:	01 d0                	add    %edx,%eax
c000a9f1:	83 ec 04             	sub    $0x4,%esp
c000a9f4:	ff 75 e8             	pushl  -0x18(%ebp)
c000a9f7:	ff 75 0c             	pushl  0xc(%ebp)
c000a9fa:	50                   	push   %eax
c000a9fb:	e8 15 8e ff ff       	call   c0003815 <memcpy>
c000aa00:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:220
				ide_write(cur_part->my_disk, all_blocks[block_idx], io_buf, 1);
c000aa03:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000aa07:	8b 94 85 a8 fd ff ff 	mov    -0x258(%ebp,%eax,4),%edx
c000aa0e:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c000aa13:	8b 40 08             	mov    0x8(%eax),%eax
c000aa16:	6a 01                	push   $0x1
c000aa18:	ff 75 10             	pushl  0x10(%ebp)
c000aa1b:	52                   	push   %edx
c000aa1c:	50                   	push   %eax
c000aa1d:	e8 2b b7 ff ff       	call   c000614d <ide_write>
c000aa22:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:222

				dir_inode->i_size += dir_entry_size;
c000aa25:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000aa28:	8b 50 04             	mov    0x4(%eax),%edx
c000aa2b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000aa2e:	01 c2                	add    %eax,%edx
c000aa30:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000aa33:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/dir.c:223
				return true;
c000aa36:	b8 01 00 00 00       	mov    $0x1,%eax
c000aa3b:	eb 40                	jmp    c000aa7d <sync_dir_entry+0x416>
/work/x86_os_my/fs/dir.c:225
			}
			dir_entry_idx++;
c000aa3d:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c000aa41:	83 c0 01             	add    $0x1,%eax
c000aa44:	88 45 f6             	mov    %al,-0xa(%ebp)
/work/x86_os_my/fs/dir.c:217
		/* 二、若inode管理的第block_idx块是存在的，不需要分配，将其读进内存，然后在该块中查找空目录项，将p_de填入 */
		ide_read(cur_part->my_disk, all_blocks[block_idx], io_buf, 1); 
		/* 在扇区内查找空目录项 */
		uint8_t dir_entry_idx = 0;
		struct dir_entry* dir_e = (struct dir_entry*)io_buf;		// dir_e用来在io_buf中遍历目录项【io_buf里面是一个一个的目录项】
		while (dir_entry_idx < dir_entrys_per_sec) {
c000aa47:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c000aa4b:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c000aa4e:	0f 82 6e ff ff ff    	jb     c000a9c2 <sync_dir_entry+0x35b>
/work/x86_os_my/fs/dir.c:230
			dir_entry_idx++;
		}


		/* 三、若inode管理的第block_idx块是存在的，不需要分配，但是都不是空闲(FT_UNKNOWN)的 */
		block_idx++;	//下一个inode管理的block
c000aa54:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000aa58:	83 c0 01             	add    $0x1,%eax
c000aa5b:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/dir.c:152
	}


	/* 开始遍历所有块以寻找目录项空位 */
	block_idx = 0;
	while (block_idx < 140) {	// 文件(包括目录)最多管理140个块
c000aa5e:	80 7d f7 8b          	cmpb   $0x8b,-0x9(%ebp)
c000aa62:	0f 86 b7 fc ff ff    	jbe    c000a71f <sync_dir_entry+0xb8>
/work/x86_os_my/fs/dir.c:233

		/* 三、若inode管理的第block_idx块是存在的，不需要分配，但是都不是空闲(FT_UNKNOWN)的 */
		block_idx++;	//下一个inode管理的block
	}//while (block_idx < 140)

	printk("directory is full!\n");
c000aa68:	83 ec 0c             	sub    $0xc,%esp
c000aa6b:	68 95 dc 00 c0       	push   $0xc000dc95
c000aa70:	e8 dd bf ff ff       	call   c0006a52 <printk>
c000aa75:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:234
	return false;
c000aa78:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/dir.c:235 (discriminator 1)
}
c000aa7d:	8b 7d fc             	mov    -0x4(%ebp),%edi
c000aa80:	c9                   	leave  
c000aa81:	c3                   	ret    

c000aa82 <delete_dir_entry>:
delete_dir_entry():
/work/x86_os_my/fs/dir.c:244
（2）根目录是必须存在的，它是文件读写的根基，不应该被清空，它至少要保留 1 个块。
	 如果目录项独占 1个块，并且该块不是根目录最后一个块的话，将其回收。
（3）目录 inode 的 i_size 是目录项大小的总和，因此还要将 i_size 减去一个目录项的单位大小。
（4）目录 inode 改变后，要同步到硬盘。
 */
bool delete_dir_entry(struct partition* part, struct dir* pdir, uint32_t inode_no, void* io_buf) {
c000aa82:	55                   	push   %ebp
c000aa83:	89 e5                	mov    %esp,%ebp
c000aa85:	57                   	push   %edi
c000aa86:	81 ec 64 02 00 00    	sub    $0x264,%esp
/work/x86_os_my/fs/dir.c:245
	struct inode* dir_inode = pdir->inode;
c000aa8c:	8b 45 0c             	mov    0xc(%ebp),%eax
c000aa8f:	8b 00                	mov    (%eax),%eax
c000aa91:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/dir.c:246
	uint32_t block_idx = 0, all_blocks[140] = {0};
c000aa94:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c000aa9b:	8d 95 9c fd ff ff    	lea    -0x264(%ebp),%edx
c000aaa1:	b8 00 00 00 00       	mov    $0x0,%eax
c000aaa6:	b9 8c 00 00 00       	mov    $0x8c,%ecx
c000aaab:	89 d7                	mov    %edx,%edi
c000aaad:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/fs/dir.c:249

	/* 收集目录全部块地址，存到到 all_blocks */
	while (block_idx < 12) {
c000aaaf:	eb 1a                	jmp    c000aacb <delete_dir_entry+0x49>
/work/x86_os_my/fs/dir.c:250
		all_blocks[block_idx] = dir_inode->i_sectors[block_idx];
c000aab1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000aab4:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000aab7:	83 c2 04             	add    $0x4,%edx
c000aaba:	8b 14 90             	mov    (%eax,%edx,4),%edx
c000aabd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000aac0:	89 94 85 9c fd ff ff 	mov    %edx,-0x264(%ebp,%eax,4)
/work/x86_os_my/fs/dir.c:251
		block_idx++;
c000aac7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:249
bool delete_dir_entry(struct partition* part, struct dir* pdir, uint32_t inode_no, void* io_buf) {
	struct inode* dir_inode = pdir->inode;
	uint32_t block_idx = 0, all_blocks[140] = {0};

	/* 收集目录全部块地址，存到到 all_blocks */
	while (block_idx < 12) {
c000aacb:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
c000aacf:	76 e0                	jbe    c000aab1 <delete_dir_entry+0x2f>
/work/x86_os_my/fs/dir.c:253
		all_blocks[block_idx] = dir_inode->i_sectors[block_idx];
		block_idx++;
	}
	if (dir_inode->i_sectors[12]) {
c000aad1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000aad4:	8b 40 40             	mov    0x40(%eax),%eax
c000aad7:	85 c0                	test   %eax,%eax
c000aad9:	74 22                	je     c000aafd <delete_dir_entry+0x7b>
/work/x86_os_my/fs/dir.c:254
		ide_read(part->my_disk, dir_inode->i_sectors[12], all_blocks + 12, 1);
c000aadb:	8d 85 9c fd ff ff    	lea    -0x264(%ebp),%eax
c000aae1:	83 c0 30             	add    $0x30,%eax
c000aae4:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000aae7:	8b 4a 40             	mov    0x40(%edx),%ecx
c000aaea:	8b 55 08             	mov    0x8(%ebp),%edx
c000aaed:	8b 52 08             	mov    0x8(%edx),%edx
c000aaf0:	6a 01                	push   $0x1
c000aaf2:	50                   	push   %eax
c000aaf3:	51                   	push   %ecx
c000aaf4:	52                   	push   %edx
c000aaf5:	e8 df b4 ff ff       	call   c0005fd9 <ide_read>
c000aafa:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:258
	}

	/* 目录项在存储时保证不会跨扇区 */
	uint32_t dir_entry_size = part->sb->dir_entry_size;
c000aafd:	8b 45 08             	mov    0x8(%ebp),%eax
c000ab00:	8b 40 1c             	mov    0x1c(%eax),%eax
c000ab03:	8b 40 30             	mov    0x30(%eax),%eax
c000ab06:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:259
	uint32_t dir_entrys_per_sec = (SECTOR_SIZE / dir_entry_size);	// 每扇区最大的目录项数目
c000ab09:	b8 00 02 00 00       	mov    $0x200,%eax
c000ab0e:	ba 00 00 00 00       	mov    $0x0,%edx
c000ab13:	f7 75 dc             	divl   -0x24(%ebp)
c000ab16:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/dir.c:260
	struct dir_entry* dir_e = (struct dir_entry*)io_buf;
c000ab19:	8b 45 14             	mov    0x14(%ebp),%eax
c000ab1c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/fs/dir.c:261
	struct dir_entry* dir_entry_found = NULL;
c000ab1f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:263
	uint8_t dir_entry_idx, dir_entry_cnt;
	bool is_dir_first_block = false;	// 目录的第1个块
c000ab26:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
/work/x86_os_my/fs/dir.c:266

	/* 遍历所有块，寻找目录项 */
	block_idx = 0;
c000ab2d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:267
	while (block_idx < 140) {
c000ab34:	e9 9a 03 00 00       	jmp    c000aed3 <delete_dir_entry+0x451>
/work/x86_os_my/fs/dir.c:268
		is_dir_first_block = false;
c000ab39:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
/work/x86_os_my/fs/dir.c:269
		if (all_blocks[block_idx] == 0) {
c000ab40:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000ab43:	8b 84 85 9c fd ff ff 	mov    -0x264(%ebp,%eax,4),%eax
c000ab4a:	85 c0                	test   %eax,%eax
c000ab4c:	75 09                	jne    c000ab57 <delete_dir_entry+0xd5>
/work/x86_os_my/fs/dir.c:270
			block_idx++;
c000ab4e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:271
			continue;
c000ab52:	e9 7c 03 00 00       	jmp    c000aed3 <delete_dir_entry+0x451>
/work/x86_os_my/fs/dir.c:273
		}
		dir_entry_idx = dir_entry_cnt = 0;
c000ab57:	c6 45 ee 00          	movb   $0x0,-0x12(%ebp)
c000ab5b:	0f b6 45 ee          	movzbl -0x12(%ebp),%eax
c000ab5f:	88 45 ef             	mov    %al,-0x11(%ebp)
/work/x86_os_my/fs/dir.c:274
		memset(io_buf, 0, SECTOR_SIZE);
c000ab62:	83 ec 04             	sub    $0x4,%esp
c000ab65:	68 00 02 00 00       	push   $0x200
c000ab6a:	6a 00                	push   $0x0
c000ab6c:	ff 75 14             	pushl  0x14(%ebp)
c000ab6f:	e8 4f 8c ff ff       	call   c00037c3 <memset>
c000ab74:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:276
		/* 读取目录inode管理的各个数据块（扇区），里面是目录项 */
		ide_read(part->my_disk, all_blocks[block_idx], io_buf, 1);	//dir_e = io_buf
c000ab77:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000ab7a:	8b 94 85 9c fd ff ff 	mov    -0x264(%ebp,%eax,4),%edx
c000ab81:	8b 45 08             	mov    0x8(%ebp),%eax
c000ab84:	8b 40 08             	mov    0x8(%eax),%eax
c000ab87:	6a 01                	push   $0x1
c000ab89:	ff 75 14             	pushl  0x14(%ebp)
c000ab8c:	52                   	push   %edx
c000ab8d:	50                   	push   %eax
c000ab8e:	e8 46 b4 ff ff       	call   c0005fd9 <ide_read>
c000ab93:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:279

		/* 遍历所有的目录项，统计该扇区的目录项数量 + 是否找到要删除的目录项 */
		while (dir_entry_idx < dir_entrys_per_sec) {
c000ab96:	e9 13 01 00 00       	jmp    c000acae <delete_dir_entry+0x22c>
/work/x86_os_my/fs/dir.c:280
			if ((dir_e + dir_entry_idx)->f_type != FT_UNKNOWN) {	// 初始化或是删除文件，会将f_type置为FT_UNKNOWN.
c000ab9b:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c000ab9f:	89 d0                	mov    %edx,%eax
c000aba1:	01 c0                	add    %eax,%eax
c000aba3:	01 d0                	add    %edx,%eax
c000aba5:	c1 e0 03             	shl    $0x3,%eax
c000aba8:	89 c2                	mov    %eax,%edx
c000abaa:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000abad:	01 d0                	add    %edx,%eax
c000abaf:	8b 40 14             	mov    0x14(%eax),%eax
c000abb2:	85 c0                	test   %eax,%eax
c000abb4:	0f 84 ea 00 00 00    	je     c000aca4 <delete_dir_entry+0x222>
/work/x86_os_my/fs/dir.c:281
				if (!strcmp((dir_e + dir_entry_idx)->filename, ".")) {
c000abba:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c000abbe:	89 d0                	mov    %edx,%eax
c000abc0:	01 c0                	add    %eax,%eax
c000abc2:	01 d0                	add    %edx,%eax
c000abc4:	c1 e0 03             	shl    $0x3,%eax
c000abc7:	89 c2                	mov    %eax,%edx
c000abc9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000abcc:	01 d0                	add    %edx,%eax
c000abce:	83 ec 08             	sub    $0x8,%esp
c000abd1:	68 a9 dc 00 c0       	push   $0xc000dca9
c000abd6:	50                   	push   %eax
c000abd7:	e8 bc 8d ff ff       	call   c0003998 <strcmp>
c000abdc:	83 c4 10             	add    $0x10,%esp
c000abdf:	84 c0                	test   %al,%al
c000abe1:	75 0c                	jne    c000abef <delete_dir_entry+0x16d>
/work/x86_os_my/fs/dir.c:282
					is_dir_first_block = true;
c000abe3:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
c000abea:	e9 b5 00 00 00       	jmp    c000aca4 <delete_dir_entry+0x222>
/work/x86_os_my/fs/dir.c:283
				} else if (strcmp((dir_e + dir_entry_idx)->filename, ".") && strcmp((dir_e + dir_entry_idx)->filename, "..")) {	//不是.和..
c000abef:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c000abf3:	89 d0                	mov    %edx,%eax
c000abf5:	01 c0                	add    %eax,%eax
c000abf7:	01 d0                	add    %edx,%eax
c000abf9:	c1 e0 03             	shl    $0x3,%eax
c000abfc:	89 c2                	mov    %eax,%edx
c000abfe:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000ac01:	01 d0                	add    %edx,%eax
c000ac03:	83 ec 08             	sub    $0x8,%esp
c000ac06:	68 a9 dc 00 c0       	push   $0xc000dca9
c000ac0b:	50                   	push   %eax
c000ac0c:	e8 87 8d ff ff       	call   c0003998 <strcmp>
c000ac11:	83 c4 10             	add    $0x10,%esp
c000ac14:	84 c0                	test   %al,%al
c000ac16:	0f 84 88 00 00 00    	je     c000aca4 <delete_dir_entry+0x222>
/work/x86_os_my/fs/dir.c:283 (discriminator 1)
c000ac1c:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c000ac20:	89 d0                	mov    %edx,%eax
c000ac22:	01 c0                	add    %eax,%eax
c000ac24:	01 d0                	add    %edx,%eax
c000ac26:	c1 e0 03             	shl    $0x3,%eax
c000ac29:	89 c2                	mov    %eax,%edx
c000ac2b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000ac2e:	01 d0                	add    %edx,%eax
c000ac30:	83 ec 08             	sub    $0x8,%esp
c000ac33:	68 ab dc 00 c0       	push   $0xc000dcab
c000ac38:	50                   	push   %eax
c000ac39:	e8 5a 8d ff ff       	call   c0003998 <strcmp>
c000ac3e:	83 c4 10             	add    $0x10,%esp
c000ac41:	84 c0                	test   %al,%al
c000ac43:	74 5f                	je     c000aca4 <delete_dir_entry+0x222>
/work/x86_os_my/fs/dir.c:284
					dir_entry_cnt++;     // 统计此扇区内的目录项个数，用来判断删除目录项后是否回收该扇区
c000ac45:	0f b6 45 ee          	movzbl -0x12(%ebp),%eax
c000ac49:	83 c0 01             	add    $0x1,%eax
c000ac4c:	88 45 ee             	mov    %al,-0x12(%ebp)
/work/x86_os_my/fs/dir.c:286
					// 目录项的成员inode号和目标inode号一致，就将其记录在dir_entry_found！！！
					if ((dir_e + dir_entry_idx)->i_no == inode_no) {
c000ac4f:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c000ac53:	89 d0                	mov    %edx,%eax
c000ac55:	01 c0                	add    %eax,%eax
c000ac57:	01 d0                	add    %edx,%eax
c000ac59:	c1 e0 03             	shl    $0x3,%eax
c000ac5c:	89 c2                	mov    %eax,%edx
c000ac5e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000ac61:	01 d0                	add    %edx,%eax
c000ac63:	8b 40 10             	mov    0x10(%eax),%eax
c000ac66:	3b 45 10             	cmp    0x10(%ebp),%eax
c000ac69:	75 39                	jne    c000aca4 <delete_dir_entry+0x222>
/work/x86_os_my/fs/dir.c:287
						ASSERT(dir_entry_found == NULL);  // 确保目录中只有一个编号为inode_no的inode,找到一次后dir_entry_found就不再是NULL
c000ac6b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c000ac6f:	74 1c                	je     c000ac8d <delete_dir_entry+0x20b>
/work/x86_os_my/fs/dir.c:287 (discriminator 1)
c000ac71:	68 ae dc 00 c0       	push   $0xc000dcae
c000ac76:	68 b0 dd 00 c0       	push   $0xc000ddb0
c000ac7b:	68 1f 01 00 00       	push   $0x11f
c000ac80:	68 26 dc 00 c0       	push   $0xc000dc26
c000ac85:	e8 97 76 ff ff       	call   c0002321 <panic_spin>
c000ac8a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:288
						dir_entry_found = dir_e + dir_entry_idx;
c000ac8d:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c000ac91:	89 d0                	mov    %edx,%eax
c000ac93:	01 c0                	add    %eax,%eax
c000ac95:	01 d0                	add    %edx,%eax
c000ac97:	c1 e0 03             	shl    $0x3,%eax
c000ac9a:	89 c2                	mov    %eax,%edx
c000ac9c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000ac9f:	01 d0                	add    %edx,%eax
c000aca1:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:293
						/* 找到后也继续遍历,统计总共的目录项数 */
					}
				}
			}
			dir_entry_idx++;
c000aca4:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c000aca8:	83 c0 01             	add    $0x1,%eax
c000acab:	88 45 ef             	mov    %al,-0x11(%ebp)
/work/x86_os_my/fs/dir.c:279
		memset(io_buf, 0, SECTOR_SIZE);
		/* 读取目录inode管理的各个数据块（扇区），里面是目录项 */
		ide_read(part->my_disk, all_blocks[block_idx], io_buf, 1);	//dir_e = io_buf

		/* 遍历所有的目录项，统计该扇区的目录项数量 + 是否找到要删除的目录项 */
		while (dir_entry_idx < dir_entrys_per_sec) {
c000acae:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c000acb2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
c000acb5:	0f 82 e0 fe ff ff    	jb     c000ab9b <delete_dir_entry+0x119>
/work/x86_os_my/fs/dir.c:297
			}
			dir_entry_idx++;
		}

		/* 若此扇区未找到该目录项,继续在下个扇区中找 */
		if (dir_entry_found == NULL) {
c000acbb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c000acbf:	75 09                	jne    c000acca <delete_dir_entry+0x248>
/work/x86_os_my/fs/dir.c:298
			block_idx++;
c000acc1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:299
			continue;
c000acc5:	e9 09 02 00 00       	jmp    c000aed3 <delete_dir_entry+0x451>
/work/x86_os_my/fs/dir.c:303
		}

		/* 在此扇区中找到目录项后，清除该目录项并判断是否回收扇区，随后退出循环直接返回 */
		ASSERT(dir_entry_cnt >= 1);	//此扇区内的目录项个数
c000acca:	80 7d ee 00          	cmpb   $0x0,-0x12(%ebp)
c000acce:	75 1c                	jne    c000acec <delete_dir_entry+0x26a>
/work/x86_os_my/fs/dir.c:303 (discriminator 1)
c000acd0:	68 c6 dc 00 c0       	push   $0xc000dcc6
c000acd5:	68 b0 dd 00 c0       	push   $0xc000ddb0
c000acda:	68 2f 01 00 00       	push   $0x12f
c000acdf:	68 26 dc 00 c0       	push   $0xc000dc26
c000ace4:	e8 38 76 ff ff       	call   c0002321 <panic_spin>
c000ace9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:305
		/* 若该扇区上只有该目录项自己，则将整个扇区回收。如果目录只有第1个扇区，则不能回收 */
		if (dir_entry_cnt == 1 && !is_dir_first_block) {
c000acec:	80 7d ee 01          	cmpb   $0x1,-0x12(%ebp)
c000acf0:	0f 85 43 01 00 00    	jne    c000ae39 <delete_dir_entry+0x3b7>
/work/x86_os_my/fs/dir.c:305 (discriminator 1)
c000acf6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c000acfa:	0f 85 39 01 00 00    	jne    c000ae39 <delete_dir_entry+0x3b7>
/work/x86_os_my/fs/dir.c:307
			/* a 在块位图中回收该块 */
			uint32_t block_bitmap_idx = all_blocks[block_idx] - part->sb->data_start_lba;
c000ad00:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000ad03:	8b 94 85 9c fd ff ff 	mov    -0x264(%ebp,%eax,4),%edx
c000ad0a:	8b 45 08             	mov    0x8(%ebp),%eax
c000ad0d:	8b 40 1c             	mov    0x1c(%eax),%eax
c000ad10:	8b 40 28             	mov    0x28(%eax),%eax
c000ad13:	29 c2                	sub    %eax,%edx
c000ad15:	89 d0                	mov    %edx,%eax
c000ad17:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/fs/dir.c:308
			bitmap_set(&part->block_bitmap, block_bitmap_idx, 0);
c000ad1a:	8b 45 08             	mov    0x8(%ebp),%eax
c000ad1d:	83 c0 20             	add    $0x20,%eax
c000ad20:	83 ec 04             	sub    $0x4,%esp
c000ad23:	6a 00                	push   $0x0
c000ad25:	ff 75 d0             	pushl  -0x30(%ebp)
c000ad28:	50                   	push   %eax
c000ad29:	e8 61 78 ff ff       	call   c000258f <bitmap_set>
c000ad2e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:309
			bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c000ad31:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c000ad36:	83 ec 04             	sub    $0x4,%esp
c000ad39:	6a 01                	push   $0x1
c000ad3b:	ff 75 d0             	pushl  -0x30(%ebp)
c000ad3e:	50                   	push   %eax
c000ad3f:	e8 54 e6 ff ff       	call   c0009398 <bitmap_sync>
c000ad44:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:312

			/* b 将块地址从数组 i_sectors 或 从一级间接索引表中去掉 */
			if (block_idx < 12) {	//直接块
c000ad47:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
c000ad4b:	77 15                	ja     c000ad62 <delete_dir_entry+0x2e0>
/work/x86_os_my/fs/dir.c:313
				dir_inode->i_sectors[block_idx] = 0;
c000ad4d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000ad50:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000ad53:	83 c2 04             	add    $0x4,%edx
c000ad56:	c7 04 90 00 00 00 00 	movl   $0x0,(%eax,%edx,4)
/work/x86_os_my/fs/dir.c:305
		}

		/* 在此扇区中找到目录项后，清除该目录项并判断是否回收扇区，随后退出循环直接返回 */
		ASSERT(dir_entry_cnt >= 1);	//此扇区内的目录项个数
		/* 若该扇区上只有该目录项自己，则将整个扇区回收。如果目录只有第1个扇区，则不能回收 */
		if (dir_entry_cnt == 1 && !is_dir_first_block) {
c000ad5d:	e9 09 01 00 00       	jmp    c000ae6b <delete_dir_entry+0x3e9>
/work/x86_os_my/fs/dir.c:316
			/* b 将块地址从数组 i_sectors 或 从一级间接索引表中去掉 */
			if (block_idx < 12) {	//直接块
				dir_inode->i_sectors[block_idx] = 0;
			} else {	// 在一级间接索引表中擦除该间接块地址
				/*先判断一级间接索引表中间接块的数量：如果仅有这1个间接块，连同间接索引表所在的块一同回收 */
				uint32_t indirect_blocks = 0;
c000ad62:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
/work/x86_os_my/fs/dir.c:317
				uint32_t indirect_block_idx = 12;
c000ad69:	c7 45 cc 0c 00 00 00 	movl   $0xc,-0x34(%ebp)
/work/x86_os_my/fs/dir.c:318
				while (indirect_block_idx < 140) {
c000ad70:	eb 12                	jmp    c000ad84 <delete_dir_entry+0x302>
/work/x86_os_my/fs/dir.c:319
					if (all_blocks[indirect_block_idx] != 0) {
c000ad72:	8b 45 cc             	mov    -0x34(%ebp),%eax
c000ad75:	8b 84 85 9c fd ff ff 	mov    -0x264(%ebp,%eax,4),%eax
c000ad7c:	85 c0                	test   %eax,%eax
c000ad7e:	74 04                	je     c000ad84 <delete_dir_entry+0x302>
/work/x86_os_my/fs/dir.c:320
						indirect_blocks++;	//间接块的数量
c000ad80:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
/work/x86_os_my/fs/dir.c:318
				dir_inode->i_sectors[block_idx] = 0;
			} else {	// 在一级间接索引表中擦除该间接块地址
				/*先判断一级间接索引表中间接块的数量：如果仅有这1个间接块，连同间接索引表所在的块一同回收 */
				uint32_t indirect_blocks = 0;
				uint32_t indirect_block_idx = 12;
				while (indirect_block_idx < 140) {
c000ad84:	81 7d cc 8b 00 00 00 	cmpl   $0x8b,-0x34(%ebp)
c000ad8b:	76 e5                	jbe    c000ad72 <delete_dir_entry+0x2f0>
/work/x86_os_my/fs/dir.c:323
					if (all_blocks[indirect_block_idx] != 0) {
						indirect_blocks++;	//间接块的数量
					}
				}
				ASSERT(indirect_blocks >= 1);	// 包括当前间接块
c000ad8d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c000ad91:	75 1c                	jne    c000adaf <delete_dir_entry+0x32d>
/work/x86_os_my/fs/dir.c:323 (discriminator 1)
c000ad93:	68 d9 dc 00 c0       	push   $0xc000dcd9
c000ad98:	68 b0 dd 00 c0       	push   $0xc000ddb0
c000ad9d:	68 43 01 00 00       	push   $0x143
c000ada2:	68 26 dc 00 c0       	push   $0xc000dc26
c000ada7:	e8 75 75 ff ff       	call   c0002321 <panic_spin>
c000adac:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:325

				if (indirect_blocks > 1) {	  // 一级间接索引表中还包括其它间接块,仅在索引表中擦除当前间接块地址
c000adaf:	83 7d e4 01          	cmpl   $0x1,-0x1c(%ebp)
c000adb3:	76 35                	jbe    c000adea <delete_dir_entry+0x368>
/work/x86_os_my/fs/dir.c:326
					all_blocks[block_idx] = 0;
c000adb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000adb8:	c7 84 85 9c fd ff ff 	movl   $0x0,-0x264(%ebp,%eax,4)
c000adbf:	00 00 00 00 
/work/x86_os_my/fs/dir.c:327
					ide_write(part->my_disk, dir_inode->i_sectors[12], all_blocks + 12, 1);
c000adc3:	8d 85 9c fd ff ff    	lea    -0x264(%ebp),%eax
c000adc9:	83 c0 30             	add    $0x30,%eax
c000adcc:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000adcf:	8b 4a 40             	mov    0x40(%edx),%ecx
c000add2:	8b 55 08             	mov    0x8(%ebp),%edx
c000add5:	8b 52 08             	mov    0x8(%edx),%edx
c000add8:	6a 01                	push   $0x1
c000adda:	50                   	push   %eax
c000addb:	51                   	push   %ecx
c000addc:	52                   	push   %edx
c000addd:	e8 6b b3 ff ff       	call   c000614d <ide_write>
c000ade2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:305
		}

		/* 在此扇区中找到目录项后，清除该目录项并判断是否回收扇区，随后退出循环直接返回 */
		ASSERT(dir_entry_cnt >= 1);	//此扇区内的目录项个数
		/* 若该扇区上只有该目录项自己，则将整个扇区回收。如果目录只有第1个扇区，则不能回收 */
		if (dir_entry_cnt == 1 && !is_dir_first_block) {
c000ade5:	e9 81 00 00 00       	jmp    c000ae6b <delete_dir_entry+0x3e9>
/work/x86_os_my/fs/dir.c:330
				if (indirect_blocks > 1) {	  // 一级间接索引表中还包括其它间接块,仅在索引表中擦除当前间接块地址
					all_blocks[block_idx] = 0;
					ide_write(part->my_disk, dir_inode->i_sectors[12], all_blocks + 12, 1);
				} else {	// 间接索引表中就当前这1个间接块,直接把间接索引表所在的块回收,然后擦除间接索引表块地址
					/* 回收一级间接索引表所在的块 */
					block_bitmap_idx = dir_inode->i_sectors[12] - part->sb->data_start_lba;
c000adea:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000aded:	8b 50 40             	mov    0x40(%eax),%edx
c000adf0:	8b 45 08             	mov    0x8(%ebp),%eax
c000adf3:	8b 40 1c             	mov    0x1c(%eax),%eax
c000adf6:	8b 40 28             	mov    0x28(%eax),%eax
c000adf9:	29 c2                	sub    %eax,%edx
c000adfb:	89 d0                	mov    %edx,%eax
c000adfd:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/fs/dir.c:331
					bitmap_set(&part->block_bitmap, block_bitmap_idx, 0);
c000ae00:	8b 45 08             	mov    0x8(%ebp),%eax
c000ae03:	83 c0 20             	add    $0x20,%eax
c000ae06:	83 ec 04             	sub    $0x4,%esp
c000ae09:	6a 00                	push   $0x0
c000ae0b:	ff 75 d0             	pushl  -0x30(%ebp)
c000ae0e:	50                   	push   %eax
c000ae0f:	e8 7b 77 ff ff       	call   c000258f <bitmap_set>
c000ae14:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:332
					bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c000ae17:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c000ae1c:	83 ec 04             	sub    $0x4,%esp
c000ae1f:	6a 01                	push   $0x1
c000ae21:	ff 75 d0             	pushl  -0x30(%ebp)
c000ae24:	50                   	push   %eax
c000ae25:	e8 6e e5 ff ff       	call   c0009398 <bitmap_sync>
c000ae2a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:335

					/* 将间接索引表地址清0 */
					dir_inode->i_sectors[12] = 0;
c000ae2d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000ae30:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)
/work/x86_os_my/fs/dir.c:305
		}

		/* 在此扇区中找到目录项后，清除该目录项并判断是否回收扇区，随后退出循环直接返回 */
		ASSERT(dir_entry_cnt >= 1);	//此扇区内的目录项个数
		/* 若该扇区上只有该目录项自己，则将整个扇区回收。如果目录只有第1个扇区，则不能回收 */
		if (dir_entry_cnt == 1 && !is_dir_first_block) {
c000ae37:	eb 32                	jmp    c000ae6b <delete_dir_entry+0x3e9>
/work/x86_os_my/fs/dir.c:340
					dir_inode->i_sectors[12] = 0;
				}
			}
		} else {
		/* 仅将该目录项清空 */
			memset(dir_entry_found, 0, dir_entry_size);	//要删除的目录项在 dir_entry_found 中
c000ae39:	83 ec 04             	sub    $0x4,%esp
c000ae3c:	ff 75 dc             	pushl  -0x24(%ebp)
c000ae3f:	6a 00                	push   $0x0
c000ae41:	ff 75 f0             	pushl  -0x10(%ebp)
c000ae44:	e8 7a 89 ff ff       	call   c00037c3 <memset>
c000ae49:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:341
			ide_write(part->my_disk, all_blocks[block_idx], io_buf, 1);	//io_buf中是所有的目录项
c000ae4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000ae4f:	8b 94 85 9c fd ff ff 	mov    -0x264(%ebp,%eax,4),%edx
c000ae56:	8b 45 08             	mov    0x8(%ebp),%eax
c000ae59:	8b 40 08             	mov    0x8(%eax),%eax
c000ae5c:	6a 01                	push   $0x1
c000ae5e:	ff 75 14             	pushl  0x14(%ebp)
c000ae61:	52                   	push   %edx
c000ae62:	50                   	push   %eax
c000ae63:	e8 e5 b2 ff ff       	call   c000614d <ide_write>
c000ae68:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:345
		}

		/* 更新inode信息并同步到硬盘 */
		ASSERT(dir_inode->i_size >= dir_entry_size);
c000ae6b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000ae6e:	8b 40 04             	mov    0x4(%eax),%eax
c000ae71:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c000ae74:	73 1c                	jae    c000ae92 <delete_dir_entry+0x410>
/work/x86_os_my/fs/dir.c:345 (discriminator 1)
c000ae76:	68 f0 dc 00 c0       	push   $0xc000dcf0
c000ae7b:	68 b0 dd 00 c0       	push   $0xc000ddb0
c000ae80:	68 59 01 00 00       	push   $0x159
c000ae85:	68 26 dc 00 c0       	push   $0xc000dc26
c000ae8a:	e8 92 74 ff ff       	call   c0002321 <panic_spin>
c000ae8f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:346
		dir_inode->i_size -= dir_entry_size;
c000ae92:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000ae95:	8b 40 04             	mov    0x4(%eax),%eax
c000ae98:	2b 45 dc             	sub    -0x24(%ebp),%eax
c000ae9b:	89 c2                	mov    %eax,%edx
c000ae9d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000aea0:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/dir.c:347
		memset(io_buf, 0, SECTOR_SIZE * 2);
c000aea3:	83 ec 04             	sub    $0x4,%esp
c000aea6:	68 00 04 00 00       	push   $0x400
c000aeab:	6a 00                	push   $0x0
c000aead:	ff 75 14             	pushl  0x14(%ebp)
c000aeb0:	e8 0e 89 ff ff       	call   c00037c3 <memset>
c000aeb5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:349
		// 同步目录文件的inode到硬盘
		inode_sync(part, dir_inode, io_buf);
c000aeb8:	83 ec 04             	sub    $0x4,%esp
c000aebb:	ff 75 14             	pushl  0x14(%ebp)
c000aebe:	ff 75 e0             	pushl  -0x20(%ebp)
c000aec1:	ff 75 08             	pushl  0x8(%ebp)
c000aec4:	e8 ea dc ff ff       	call   c0008bb3 <inode_sync>
c000aec9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:351

		return true;
c000aecc:	b8 01 00 00 00       	mov    $0x1,%eax
c000aed1:	eb 12                	jmp    c000aee5 <delete_dir_entry+0x463>
/work/x86_os_my/fs/dir.c:267
	uint8_t dir_entry_idx, dir_entry_cnt;
	bool is_dir_first_block = false;	// 目录的第1个块

	/* 遍历所有块，寻找目录项 */
	block_idx = 0;
	while (block_idx < 140) {
c000aed3:	81 7d f4 8b 00 00 00 	cmpl   $0x8b,-0xc(%ebp)
c000aeda:	0f 86 59 fc ff ff    	jbe    c000ab39 <delete_dir_entry+0xb7>
/work/x86_os_my/fs/dir.c:355

		return true;
	}//while (block_idx < 140)

	/* 所有块中未找到则返回false，若出现这种情况应该是 serarch_file 出错了 */
	return false;
c000aee0:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/dir.c:356 (discriminator 1)
}
c000aee5:	8b 7d fc             	mov    -0x4(%ebp),%edi
c000aee8:	c9                   	leave  
c000aee9:	c3                   	ret    

c000aeea <dir_read>:
dir_read():
/work/x86_os_my/fs/dir.c:361


/* 读取目录,成功返回1个目录项,失败返回NULL */
// dir->dir_pos 记录遍历目录时，"游标"在目录内的偏移【以前读到的目录项】
struct dir_entry* dir_read(struct dir* dir) {
c000aeea:	55                   	push   %ebp
c000aeeb:	89 e5                	mov    %esp,%ebp
c000aeed:	57                   	push   %edi
c000aeee:	81 ec 54 02 00 00    	sub    $0x254,%esp
/work/x86_os_my/fs/dir.c:362
	struct dir_entry* dir_e = (struct dir_entry*)dir->dir_buf;
c000aef4:	8b 45 08             	mov    0x8(%ebp),%eax
c000aef7:	83 c0 08             	add    $0x8,%eax
c000aefa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/dir.c:363
	struct inode* dir_inode = dir->inode;
c000aefd:	8b 45 08             	mov    0x8(%ebp),%eax
c000af00:	8b 00                	mov    (%eax),%eax
c000af02:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/dir.c:364
	uint32_t all_blocks[140] = {0}, block_cnt = 12;
c000af05:	8d 95 a8 fd ff ff    	lea    -0x258(%ebp),%edx
c000af0b:	b8 00 00 00 00       	mov    $0x0,%eax
c000af10:	b9 8c 00 00 00       	mov    $0x8c,%ecx
c000af15:	89 d7                	mov    %edx,%edi
c000af17:	f3 ab                	rep stos %eax,%es:(%edi)
c000af19:	c7 45 f4 0c 00 00 00 	movl   $0xc,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:365
	uint32_t block_idx = 0, dir_entry_idx = 0;
c000af20:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c000af27:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:367
	// 所有数据块的地址，汇集到 all_blocks 中
	while (block_idx < 12) {
c000af2e:	eb 1a                	jmp    c000af4a <dir_read+0x60>
/work/x86_os_my/fs/dir.c:368
		all_blocks[block_idx] = dir_inode->i_sectors[block_idx];
c000af30:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000af33:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000af36:	83 c2 04             	add    $0x4,%edx
c000af39:	8b 14 90             	mov    (%eax,%edx,4),%edx
c000af3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000af3f:	89 94 85 a8 fd ff ff 	mov    %edx,-0x258(%ebp,%eax,4)
/work/x86_os_my/fs/dir.c:369
		block_idx++;
c000af46:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:367
	struct dir_entry* dir_e = (struct dir_entry*)dir->dir_buf;
	struct inode* dir_inode = dir->inode;
	uint32_t all_blocks[140] = {0}, block_cnt = 12;
	uint32_t block_idx = 0, dir_entry_idx = 0;
	// 所有数据块的地址，汇集到 all_blocks 中
	while (block_idx < 12) {
c000af4a:	83 7d f0 0b          	cmpl   $0xb,-0x10(%ebp)
c000af4e:	76 e0                	jbe    c000af30 <dir_read+0x46>
/work/x86_os_my/fs/dir.c:371
		all_blocks[block_idx] = dir_inode->i_sectors[block_idx];
		block_idx++;
	}
	if (dir_inode->i_sectors[12] != 0) {
c000af50:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000af53:	8b 40 40             	mov    0x40(%eax),%eax
c000af56:	85 c0                	test   %eax,%eax
c000af58:	74 2c                	je     c000af86 <dir_read+0x9c>
/work/x86_os_my/fs/dir.c:372
		ide_read(cur_part->my_disk, dir_inode->i_sectors[12], all_blocks + 12, 1);
c000af5a:	8d 85 a8 fd ff ff    	lea    -0x258(%ebp),%eax
c000af60:	83 c0 30             	add    $0x30,%eax
c000af63:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000af66:	8b 4a 40             	mov    0x40(%edx),%ecx
c000af69:	8b 15 d0 1f 01 c0    	mov    0xc0011fd0,%edx
c000af6f:	8b 52 08             	mov    0x8(%edx),%edx
c000af72:	6a 01                	push   $0x1
c000af74:	50                   	push   %eax
c000af75:	51                   	push   %ecx
c000af76:	52                   	push   %edx
c000af77:	e8 5d b0 ff ff       	call   c0005fd9 <ide_read>
c000af7c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:373
		block_cnt = 140;
c000af7f:	c7 45 f4 8c 00 00 00 	movl   $0x8c,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:375
	}
	block_idx = 0;
c000af86:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:377

	uint32_t cur_dir_entry_pos = 0;	// 当前目录项的偏移,此项用来判断是否是之前已经返回过的目录项
c000af8d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
/work/x86_os_my/fs/dir.c:378
	uint32_t dir_entry_size = cur_part->sb->dir_entry_size;
c000af94:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c000af99:	8b 40 1c             	mov    0x1c(%eax),%eax
c000af9c:	8b 40 30             	mov    0x30(%eax),%eax
c000af9f:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:379
	uint32_t dir_entrys_per_sec = SECTOR_SIZE / dir_entry_size;	// 1扇区内可容纳的目录项个数
c000afa2:	b8 00 02 00 00       	mov    $0x200,%eax
c000afa7:	ba 00 00 00 00       	mov    $0x0,%edx
c000afac:	f7 75 dc             	divl   -0x24(%ebp)
c000afaf:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/dir.c:381
	/* 因为此目录内可能删除了某些文件或子目录,所以要遍历所有块 */
	while (block_idx < block_cnt) {
c000afb2:	e9 05 01 00 00       	jmp    c000b0bc <dir_read+0x1d2>
/work/x86_os_my/fs/dir.c:382
		if (dir->dir_pos >= dir_inode->i_size) {	//dir_pos 记录遍历目录时，"游标"在目录内的偏移
c000afb7:	8b 45 08             	mov    0x8(%ebp),%eax
c000afba:	8b 50 04             	mov    0x4(%eax),%edx
c000afbd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000afc0:	8b 40 04             	mov    0x4(%eax),%eax
c000afc3:	39 c2                	cmp    %eax,%edx
c000afc5:	72 0a                	jb     c000afd1 <dir_read+0xe7>
/work/x86_os_my/fs/dir.c:383
			return NULL;
c000afc7:	b8 00 00 00 00       	mov    $0x0,%eax
c000afcc:	e9 fc 00 00 00       	jmp    c000b0cd <dir_read+0x1e3>
/work/x86_os_my/fs/dir.c:385
		}
		if (all_blocks[block_idx] == 0) {	// 如果此块地址为0,即空块,继续读出下一块
c000afd1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000afd4:	8b 84 85 a8 fd ff ff 	mov    -0x258(%ebp,%eax,4),%eax
c000afdb:	85 c0                	test   %eax,%eax
c000afdd:	75 09                	jne    c000afe8 <dir_read+0xfe>
/work/x86_os_my/fs/dir.c:386
			block_idx++;
c000afdf:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:387
			continue;
c000afe3:	e9 d4 00 00 00       	jmp    c000b0bc <dir_read+0x1d2>
/work/x86_os_my/fs/dir.c:389
		}
		memset(dir_e, 0, SECTOR_SIZE);
c000afe8:	83 ec 04             	sub    $0x4,%esp
c000afeb:	68 00 02 00 00       	push   $0x200
c000aff0:	6a 00                	push   $0x0
c000aff2:	ff 75 e4             	pushl  -0x1c(%ebp)
c000aff5:	e8 c9 87 ff ff       	call   c00037c3 <memset>
c000affa:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:390
		ide_read(cur_part->my_disk, all_blocks[block_idx], dir_e, 1);
c000affd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b000:	8b 94 85 a8 fd ff ff 	mov    -0x258(%ebp,%eax,4),%edx
c000b007:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c000b00c:	8b 40 08             	mov    0x8(%eax),%eax
c000b00f:	6a 01                	push   $0x1
c000b011:	ff 75 e4             	pushl  -0x1c(%ebp)
c000b014:	52                   	push   %edx
c000b015:	50                   	push   %eax
c000b016:	e8 be af ff ff       	call   c0005fd9 <ide_read>
c000b01b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:391
		dir_entry_idx = 0;
c000b01e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:393
		/* 遍历扇区内所有目录项 */
		while (dir_entry_idx < dir_entrys_per_sec) {
c000b025:	e9 82 00 00 00       	jmp    c000b0ac <dir_read+0x1c2>
/work/x86_os_my/fs/dir.c:394
			if ((dir_e + dir_entry_idx)->f_type) {	 // 如果f_type不等于0,即不等于FT_UNKNOWN
c000b02a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c000b02d:	89 d0                	mov    %edx,%eax
c000b02f:	01 c0                	add    %eax,%eax
c000b031:	01 d0                	add    %edx,%eax
c000b033:	c1 e0 03             	shl    $0x3,%eax
c000b036:	89 c2                	mov    %eax,%edx
c000b038:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000b03b:	01 d0                	add    %edx,%eax
c000b03d:	8b 40 14             	mov    0x14(%eax),%eax
c000b040:	85 c0                	test   %eax,%eax
c000b042:	74 64                	je     c000b0a8 <dir_read+0x1be>
/work/x86_os_my/fs/dir.c:396
				/* 判断是不是最新的目录项,避免返回曾经已经返回过的目录项 */
				if (cur_dir_entry_pos < dir->dir_pos) {
c000b044:	8b 45 08             	mov    0x8(%ebp),%eax
c000b047:	8b 40 04             	mov    0x4(%eax),%eax
c000b04a:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c000b04d:	76 0c                	jbe    c000b05b <dir_read+0x171>
/work/x86_os_my/fs/dir.c:397
					cur_dir_entry_pos += dir_entry_size;
c000b04f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000b052:	01 45 e8             	add    %eax,-0x18(%ebp)
/work/x86_os_my/fs/dir.c:398
					dir_entry_idx++;
c000b055:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:399
					continue;
c000b059:	eb 51                	jmp    c000b0ac <dir_read+0x1c2>
/work/x86_os_my/fs/dir.c:401
				}
				ASSERT(cur_dir_entry_pos == dir->dir_pos);
c000b05b:	8b 45 08             	mov    0x8(%ebp),%eax
c000b05e:	8b 40 04             	mov    0x4(%eax),%eax
c000b061:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c000b064:	74 1c                	je     c000b082 <dir_read+0x198>
/work/x86_os_my/fs/dir.c:401 (discriminator 1)
c000b066:	68 14 dd 00 c0       	push   $0xc000dd14
c000b06b:	68 c4 dd 00 c0       	push   $0xc000ddc4
c000b070:	68 91 01 00 00       	push   $0x191
c000b075:	68 26 dc 00 c0       	push   $0xc000dc26
c000b07a:	e8 a2 72 ff ff       	call   c0002321 <panic_spin>
c000b07f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:402
				dir->dir_pos += dir_entry_size;	      // 更新为新位置,即下一个返回的目录项地址
c000b082:	8b 45 08             	mov    0x8(%ebp),%eax
c000b085:	8b 50 04             	mov    0x4(%eax),%edx
c000b088:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000b08b:	01 c2                	add    %eax,%edx
c000b08d:	8b 45 08             	mov    0x8(%ebp),%eax
c000b090:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/dir.c:403
				return dir_e + dir_entry_idx;
c000b093:	8b 55 ec             	mov    -0x14(%ebp),%edx
c000b096:	89 d0                	mov    %edx,%eax
c000b098:	01 c0                	add    %eax,%eax
c000b09a:	01 d0                	add    %edx,%eax
c000b09c:	c1 e0 03             	shl    $0x3,%eax
c000b09f:	89 c2                	mov    %eax,%edx
c000b0a1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000b0a4:	01 d0                	add    %edx,%eax
c000b0a6:	eb 25                	jmp    c000b0cd <dir_read+0x1e3>
/work/x86_os_my/fs/dir.c:405
			}
			dir_entry_idx++;
c000b0a8:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:393
		}
		memset(dir_e, 0, SECTOR_SIZE);
		ide_read(cur_part->my_disk, all_blocks[block_idx], dir_e, 1);
		dir_entry_idx = 0;
		/* 遍历扇区内所有目录项 */
		while (dir_entry_idx < dir_entrys_per_sec) {
c000b0ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000b0af:	3b 45 d8             	cmp    -0x28(%ebp),%eax
c000b0b2:	0f 82 72 ff ff ff    	jb     c000b02a <dir_read+0x140>
/work/x86_os_my/fs/dir.c:407
				dir->dir_pos += dir_entry_size;	      // 更新为新位置,即下一个返回的目录项地址
				return dir_e + dir_entry_idx;
			}
			dir_entry_idx++;
		}
		block_idx++;
c000b0b8:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:381

	uint32_t cur_dir_entry_pos = 0;	// 当前目录项的偏移,此项用来判断是否是之前已经返回过的目录项
	uint32_t dir_entry_size = cur_part->sb->dir_entry_size;
	uint32_t dir_entrys_per_sec = SECTOR_SIZE / dir_entry_size;	// 1扇区内可容纳的目录项个数
	/* 因为此目录内可能删除了某些文件或子目录,所以要遍历所有块 */
	while (block_idx < block_cnt) {
c000b0bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b0bf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c000b0c2:	0f 82 ef fe ff ff    	jb     c000afb7 <dir_read+0xcd>
/work/x86_os_my/fs/dir.c:409
			}
			dir_entry_idx++;
		}
		block_idx++;
	}
	return NULL;
c000b0c8:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/dir.c:410 (discriminator 1)
}
c000b0cd:	8b 7d fc             	mov    -0x4(%ebp),%edi
c000b0d0:	c9                   	leave  
c000b0d1:	c3                   	ret    

c000b0d2 <dir_is_empty>:
dir_is_empty():
/work/x86_os_my/fs/dir.c:413

/* 判断目录是否为空 */
bool dir_is_empty(struct dir* dir) {
c000b0d2:	55                   	push   %ebp
c000b0d3:	89 e5                	mov    %esp,%ebp
c000b0d5:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/fs/dir.c:414
	struct inode* dir_inode = dir->inode;
c000b0d8:	8b 45 08             	mov    0x8(%ebp),%eax
c000b0db:	8b 00                	mov    (%eax),%eax
c000b0dd:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/fs/dir.c:416
	/* 若目录下只有.和..这两个目录项则目录为空 */
	return (dir_inode->i_size == cur_part->sb->dir_entry_size * 2);
c000b0e0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000b0e3:	8b 50 04             	mov    0x4(%eax),%edx
c000b0e6:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c000b0eb:	8b 40 1c             	mov    0x1c(%eax),%eax
c000b0ee:	8b 40 30             	mov    0x30(%eax),%eax
c000b0f1:	01 c0                	add    %eax,%eax
c000b0f3:	39 c2                	cmp    %eax,%edx
c000b0f5:	0f 94 c0             	sete   %al
c000b0f8:	0f b6 c0             	movzbl %al,%eax
/work/x86_os_my/fs/dir.c:417
}
c000b0fb:	c9                   	leave  
c000b0fc:	c3                   	ret    

c000b0fd <dir_remove>:
dir_remove():
/work/x86_os_my/fs/dir.c:420

/* 在父目录parent_dir中删除child_dir */
int32_t dir_remove(struct dir* parent_dir, struct dir* child_dir) {
c000b0fd:	55                   	push   %ebp
c000b0fe:	89 e5                	mov    %esp,%ebp
c000b100:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/dir.c:421
	struct inode* child_dir_inode  = child_dir->inode;
c000b103:	8b 45 0c             	mov    0xc(%ebp),%eax
c000b106:	8b 00                	mov    (%eax),%eax
c000b108:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:423
	/* 空目录只在inode->i_sectors[0]中有扇区,其它扇区都应该为空 */
	int32_t block_idx = 1;
c000b10b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:424
	while (block_idx < 13) {
c000b112:	eb 30                	jmp    c000b144 <dir_remove+0x47>
/work/x86_os_my/fs/dir.c:425
		ASSERT(child_dir_inode->i_sectors[block_idx] == 0);
c000b114:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b117:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000b11a:	83 c2 04             	add    $0x4,%edx
c000b11d:	8b 04 90             	mov    (%eax,%edx,4),%eax
c000b120:	85 c0                	test   %eax,%eax
c000b122:	74 1c                	je     c000b140 <dir_remove+0x43>
/work/x86_os_my/fs/dir.c:425 (discriminator 1)
c000b124:	68 38 dd 00 c0       	push   $0xc000dd38
c000b129:	68 d0 dd 00 c0       	push   $0xc000ddd0
c000b12e:	68 a9 01 00 00       	push   $0x1a9
c000b133:	68 26 dc 00 c0       	push   $0xc000dc26
c000b138:	e8 e4 71 ff ff       	call   c0002321 <panic_spin>
c000b13d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:426
		block_idx++;
c000b140:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:424
/* 在父目录parent_dir中删除child_dir */
int32_t dir_remove(struct dir* parent_dir, struct dir* child_dir) {
	struct inode* child_dir_inode  = child_dir->inode;
	/* 空目录只在inode->i_sectors[0]中有扇区,其它扇区都应该为空 */
	int32_t block_idx = 1;
	while (block_idx < 13) {
c000b144:	83 7d f4 0c          	cmpl   $0xc,-0xc(%ebp)
c000b148:	7e ca                	jle    c000b114 <dir_remove+0x17>
/work/x86_os_my/fs/dir.c:428
		ASSERT(child_dir_inode->i_sectors[block_idx] == 0);
		block_idx++;
	}
	void* io_buf = sys_malloc(SECTOR_SIZE * 2);
c000b14a:	83 ec 0c             	sub    $0xc,%esp
c000b14d:	68 00 04 00 00       	push   $0x400
c000b152:	e8 75 7b ff ff       	call   c0002ccc <sys_malloc>
c000b157:	83 c4 10             	add    $0x10,%esp
c000b15a:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:429
	if (io_buf == NULL) {
c000b15d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c000b161:	75 17                	jne    c000b17a <dir_remove+0x7d>
/work/x86_os_my/fs/dir.c:430
		printk("dir_remove: malloc for io_buf failed\n");
c000b163:	83 ec 0c             	sub    $0xc,%esp
c000b166:	68 64 dd 00 c0       	push   $0xc000dd64
c000b16b:	e8 e2 b8 ff ff       	call   c0006a52 <printk>
c000b170:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:431
		return -1;
c000b173:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000b178:	eb 44                	jmp    c000b1be <dir_remove+0xc1>
/work/x86_os_my/fs/dir.c:435
	}

	/* 在父目录parent_dir中删除子目录child_dir对应的"目录项" */
	delete_dir_entry(cur_part, parent_dir, child_dir_inode->i_no, io_buf);
c000b17a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b17d:	8b 10                	mov    (%eax),%edx
c000b17f:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c000b184:	ff 75 ec             	pushl  -0x14(%ebp)
c000b187:	52                   	push   %edx
c000b188:	ff 75 08             	pushl  0x8(%ebp)
c000b18b:	50                   	push   %eax
c000b18c:	e8 f1 f8 ff ff       	call   c000aa82 <delete_dir_entry>
c000b191:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:438

	/* 回收inode中i_secotrs中所占用的扇区,并同步inode_bitmap和block_bitmap */
	inode_release(cur_part, child_dir_inode->i_no);
c000b194:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b197:	8b 10                	mov    (%eax),%edx
c000b199:	a1 d0 1f 01 c0       	mov    0xc0011fd0,%eax
c000b19e:	83 ec 08             	sub    $0x8,%esp
c000b1a1:	52                   	push   %edx
c000b1a2:	50                   	push   %eax
c000b1a3:	e8 06 de ff ff       	call   c0008fae <inode_release>
c000b1a8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:439
	sys_free(io_buf);
c000b1ab:	83 ec 0c             	sub    $0xc,%esp
c000b1ae:	ff 75 ec             	pushl  -0x14(%ebp)
c000b1b1:	e8 43 81 ff ff       	call   c00032f9 <sys_free>
c000b1b6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:440
	return 0;
c000b1b9:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/dir.c:441
}
c000b1be:	c9                   	leave  
c000b1bf:	c3                   	ret    

c000b1c0 <copy_pcb_vaddrbitmap_stack0>:
copy_pcb_vaddrbitmap_stack0():
/work/x86_os_my/userprog/fork.c:13
#include "file.h"

extern void intr_exit(void);

/* 将父进程的pcb、虚拟地址位图拷贝给子进程 */
static int32_t copy_pcb_vaddrbitmap_stack0(struct task_struct* child_thread, struct task_struct* parent_thread) {
c000b1c0:	55                   	push   %ebp
c000b1c1:	89 e5                	mov    %esp,%ebp
c000b1c3:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/fork.c:17
	/* a 复制pcb所在的整个页,里面包含进程pcb信息 + 0特权级的栈
	栈里面包含了返回地址
	然后再单独修改个别部分 */
	memcpy(child_thread, parent_thread, PG_SIZE);
c000b1c6:	83 ec 04             	sub    $0x4,%esp
c000b1c9:	68 00 10 00 00       	push   $0x1000
c000b1ce:	ff 75 0c             	pushl  0xc(%ebp)
c000b1d1:	ff 75 08             	pushl  0x8(%ebp)
c000b1d4:	e8 3c 86 ff ff       	call   c0003815 <memcpy>
c000b1d9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:19
	// 初始化PCB部分
	child_thread->pid = fork_pid();
c000b1dc:	e8 39 8a ff ff       	call   c0003c1a <fork_pid>
c000b1e1:	89 c2                	mov    %eax,%edx
c000b1e3:	8b 45 08             	mov    0x8(%ebp),%eax
c000b1e6:	66 89 50 04          	mov    %dx,0x4(%eax)
/work/x86_os_my/userprog/fork.c:20
	child_thread->elapsed_ticks = 0;
c000b1ea:	8b 45 08             	mov    0x8(%ebp),%eax
c000b1ed:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
/work/x86_os_my/userprog/fork.c:21
	child_thread->status = TASK_READY;
c000b1f4:	8b 45 08             	mov    0x8(%ebp),%eax
c000b1f7:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/userprog/fork.c:22
	child_thread->ticks = child_thread->priority;   // 为新进程把时间片充满
c000b1fe:	8b 45 08             	mov    0x8(%ebp),%eax
c000b201:	0f b6 50 1c          	movzbl 0x1c(%eax),%edx
c000b205:	8b 45 08             	mov    0x8(%ebp),%eax
c000b208:	88 50 1d             	mov    %dl,0x1d(%eax)
/work/x86_os_my/userprog/fork.c:23
	child_thread->parent_pid = parent_thread->pid;
c000b20b:	8b 45 0c             	mov    0xc(%ebp),%eax
c000b20e:	0f b7 50 04          	movzwl 0x4(%eax),%edx
c000b212:	8b 45 08             	mov    0x8(%ebp),%eax
c000b215:	66 89 90 10 01 00 00 	mov    %dx,0x110(%eax)
/work/x86_os_my/userprog/fork.c:24
	child_thread->general_tag.prev = child_thread->general_tag.next = NULL;
c000b21c:	8b 45 08             	mov    0x8(%ebp),%eax
c000b21f:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
c000b226:	8b 45 08             	mov    0x8(%ebp),%eax
c000b229:	8b 50 48             	mov    0x48(%eax),%edx
c000b22c:	8b 45 08             	mov    0x8(%ebp),%eax
c000b22f:	89 50 44             	mov    %edx,0x44(%eax)
/work/x86_os_my/userprog/fork.c:25
	child_thread->all_list_tag.prev = child_thread->all_list_tag.next = NULL;
c000b232:	8b 45 08             	mov    0x8(%ebp),%eax
c000b235:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
c000b23c:	8b 45 08             	mov    0x8(%ebp),%eax
c000b23f:	8b 50 50             	mov    0x50(%eax),%edx
c000b242:	8b 45 08             	mov    0x8(%ebp),%eax
c000b245:	89 50 4c             	mov    %edx,0x4c(%eax)
/work/x86_os_my/userprog/fork.c:27
	// 子进程内存块（堆内存）
	block_desc_init(child_thread->u_block_desc);
c000b248:	8b 45 08             	mov    0x8(%ebp),%eax
c000b24b:	83 c0 64             	add    $0x64,%eax
c000b24e:	83 ec 0c             	sub    $0xc,%esp
c000b251:	50                   	push   %eax
c000b252:	e8 88 84 ff ff       	call   c00036df <block_desc_init>
c000b257:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:29
	/* b 复制父进程的虚拟地址池的位图  可执行程序入口地址：USER_VADDR_START==0x8048000 */
	uint32_t bitmap_pg_cnt = DIV_ROUND_UP((0xc0000000 - USER_VADDR_START) / PG_SIZE / 8 , PG_SIZE);
c000b25a:	c7 45 f4 17 00 00 00 	movl   $0x17,-0xc(%ebp)
/work/x86_os_my/userprog/fork.c:30
	void* vaddr_btmp = get_kernel_pages(bitmap_pg_cnt);
c000b261:	83 ec 0c             	sub    $0xc,%esp
c000b264:	ff 75 f4             	pushl  -0xc(%ebp)
c000b267:	e8 5d 77 ff ff       	call   c00029c9 <get_kernel_pages>
c000b26c:	83 c4 10             	add    $0x10,%esp
c000b26f:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/fork.c:31
	if (vaddr_btmp == NULL)
c000b272:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c000b276:	75 07                	jne    c000b27f <copy_pcb_vaddrbitmap_stack0+0xbf>
/work/x86_os_my/userprog/fork.c:32
		return -1;
c000b278:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000b27d:	eb 73                	jmp    c000b2f2 <copy_pcb_vaddrbitmap_stack0+0x132>
/work/x86_os_my/userprog/fork.c:35
	/* 此时child_thread->userprog_vaddr.vaddr_bitmap.bits还是指向父进程虚拟地址的位图地址
	 * 下面将child_thread->userprog_vaddr.vaddr_bitmap.bits指向自己的位图vaddr_btmp */
	memcpy(vaddr_btmp, child_thread->userprog_vaddr.vaddr_bitmap.bits, bitmap_pg_cnt * PG_SIZE);	//复制父进程的虚拟地址位图
c000b27f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b282:	c1 e0 0c             	shl    $0xc,%eax
c000b285:	89 c2                	mov    %eax,%edx
c000b287:	8b 45 08             	mov    0x8(%ebp),%eax
c000b28a:	8b 40 5c             	mov    0x5c(%eax),%eax
c000b28d:	83 ec 04             	sub    $0x4,%esp
c000b290:	52                   	push   %edx
c000b291:	50                   	push   %eax
c000b292:	ff 75 f0             	pushl  -0x10(%ebp)
c000b295:	e8 7b 85 ff ff       	call   c0003815 <memcpy>
c000b29a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:36
	child_thread->userprog_vaddr.vaddr_bitmap.bits = vaddr_btmp;	//指向子进程自己的了
c000b29d:	8b 45 08             	mov    0x8(%ebp),%eax
c000b2a0:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000b2a3:	89 50 5c             	mov    %edx,0x5c(%eax)
/work/x86_os_my/userprog/fork.c:38
	/* 调试用 */
	ASSERT(strlen(child_thread->name) < 11);	// pcb.name的长度是16,为避免下面strcat越界
c000b2a6:	8b 45 08             	mov    0x8(%ebp),%eax
c000b2a9:	83 c0 0c             	add    $0xc,%eax
c000b2ac:	83 ec 0c             	sub    $0xc,%esp
c000b2af:	50                   	push   %eax
c000b2b0:	e8 98 86 ff ff       	call   c000394d <strlen>
c000b2b5:	83 c4 10             	add    $0x10,%esp
c000b2b8:	83 f8 0a             	cmp    $0xa,%eax
c000b2bb:	76 19                	jbe    c000b2d6 <copy_pcb_vaddrbitmap_stack0+0x116>
/work/x86_os_my/userprog/fork.c:38 (discriminator 1)
c000b2bd:	68 dc dd 00 c0       	push   $0xc000dddc
c000b2c2:	68 e4 de 00 c0       	push   $0xc000dee4
c000b2c7:	6a 26                	push   $0x26
c000b2c9:	68 fc dd 00 c0       	push   $0xc000ddfc
c000b2ce:	e8 4e 70 ff ff       	call   c0002321 <panic_spin>
c000b2d3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:39
	strcat(child_thread->name,"_fork");
c000b2d6:	8b 45 08             	mov    0x8(%ebp),%eax
c000b2d9:	83 c0 0c             	add    $0xc,%eax
c000b2dc:	83 ec 08             	sub    $0x8,%esp
c000b2df:	68 0c de 00 c0       	push   $0xc000de0c
c000b2e4:	50                   	push   %eax
c000b2e5:	e8 dd 87 ff ff       	call   c0003ac7 <strcat>
c000b2ea:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:40
	return 0;
c000b2ed:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/userprog/fork.c:41
}
c000b2f2:	c9                   	leave  
c000b2f3:	c3                   	ret    

c000b2f4 <copy_body_stack3>:
copy_body_stack3():
/work/x86_os_my/userprog/fork.c:74
+----------------------+
|          text        |
+----------------------+ 0
    C程序内存布局
*/
static void copy_body_stack3(struct task_struct* child_thread, struct task_struct* parent_thread, void* buf_page) {
c000b2f4:	55                   	push   %ebp
c000b2f5:	89 e5                	mov    %esp,%ebp
c000b2f7:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/userprog/fork.c:75
	uint8_t* vaddr_btmp = parent_thread->userprog_vaddr.vaddr_bitmap.bits;
c000b2fa:	8b 45 0c             	mov    0xc(%ebp),%eax
c000b2fd:	8b 40 5c             	mov    0x5c(%eax),%eax
c000b300:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/userprog/fork.c:76
	uint32_t btmp_bytes_len = parent_thread->userprog_vaddr.vaddr_bitmap.btmp_bytes_len;
c000b303:	8b 45 0c             	mov    0xc(%ebp),%eax
c000b306:	8b 40 58             	mov    0x58(%eax),%eax
c000b309:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/userprog/fork.c:77
	uint32_t vaddr_start = parent_thread->userprog_vaddr.vaddr_start;
c000b30c:	8b 45 0c             	mov    0xc(%ebp),%eax
c000b30f:	8b 40 60             	mov    0x60(%eax),%eax
c000b312:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/userprog/fork.c:78
	uint32_t idx_byte = 0;
c000b315:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/userprog/fork.c:79
	uint32_t idx_bit = 0;
c000b31c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/userprog/fork.c:80
	uint32_t prog_vaddr = 0;
c000b323:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
/work/x86_os_my/userprog/fork.c:83

	/* 在父进程的用户空间中查找已有数据的页，按页一一拷贝给子进程 */
	while (idx_byte < btmp_bytes_len) {
c000b32a:	e9 c5 00 00 00       	jmp    c000b3f4 <copy_body_stack3+0x100>
/work/x86_os_my/userprog/fork.c:84
		if (vaddr_btmp[idx_byte]) {
c000b32f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c000b332:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b335:	01 d0                	add    %edx,%eax
c000b337:	0f b6 00             	movzbl (%eax),%eax
c000b33a:	84 c0                	test   %al,%al
c000b33c:	0f 84 ae 00 00 00    	je     c000b3f0 <copy_body_stack3+0xfc>
/work/x86_os_my/userprog/fork.c:85
			idx_bit = 0;
c000b342:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/userprog/fork.c:86
			while (idx_bit < 8) {
c000b349:	e9 98 00 00 00       	jmp    c000b3e6 <copy_body_stack3+0xf2>
/work/x86_os_my/userprog/fork.c:87
				if ((BITMAP_MASK << idx_bit) & vaddr_btmp[idx_byte]) {	//BITMAP_MASK=1
c000b34e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c000b351:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b354:	01 d0                	add    %edx,%eax
c000b356:	0f b6 00             	movzbl (%eax),%eax
c000b359:	0f b6 d0             	movzbl %al,%edx
c000b35c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b35f:	89 c1                	mov    %eax,%ecx
c000b361:	d3 fa                	sar    %cl,%edx
c000b363:	89 d0                	mov    %edx,%eax
c000b365:	83 e0 01             	and    $0x1,%eax
c000b368:	85 c0                	test   %eax,%eax
c000b36a:	74 76                	je     c000b3e2 <copy_body_stack3+0xee>
/work/x86_os_my/userprog/fork.c:88
					prog_vaddr = (idx_byte * 8 + idx_bit) * PG_SIZE + vaddr_start;
c000b36c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b36f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c000b376:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b379:	01 d0                	add    %edx,%eax
c000b37b:	c1 e0 0c             	shl    $0xc,%eax
c000b37e:	89 c2                	mov    %eax,%edx
c000b380:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000b383:	01 d0                	add    %edx,%eax
c000b385:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/userprog/fork.c:93
					/* 下面的操作是将父进程用户空间中的数据通过内核空间做中转,最终复制到子进程的用户空间 */

					/* a 将父进程在用户空间中的数据复制到"内核缓冲区buf_page"
					目的：下面切换到子进程的页表后,还能访问到父进程的数据*/
					memcpy(buf_page, (void*)prog_vaddr, PG_SIZE);
c000b388:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000b38b:	83 ec 04             	sub    $0x4,%esp
c000b38e:	68 00 10 00 00       	push   $0x1000
c000b393:	50                   	push   %eax
c000b394:	ff 75 10             	pushl  0x10(%ebp)
c000b397:	e8 79 84 ff ff       	call   c0003815 <memcpy>
c000b39c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:96

					/* b 将页表切换到子进程，下面申请内存的函数，将pte及pde安装在子进程的页表中 */
					page_dir_activate(child_thread);
c000b39f:	83 ec 0c             	sub    $0xc,%esp
c000b3a2:	ff 75 08             	pushl  0x8(%ebp)
c000b3a5:	e8 63 a0 ff ff       	call   c000540d <page_dir_activate>
c000b3aa:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:98
					/* c 申请虚拟地址prog_vaddr */
					get_a_page_without_opvaddrbitmap(PF_USER, prog_vaddr);	//位图已经拷贝过了，当然不用再操作了...
c000b3ad:	83 ec 08             	sub    $0x8,%esp
c000b3b0:	ff 75 e0             	pushl  -0x20(%ebp)
c000b3b3:	6a 02                	push   $0x2
c000b3b5:	e8 35 78 ff ff       	call   c0002bef <get_a_page_without_opvaddrbitmap>
c000b3ba:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:101

					/* d 从内核缓冲区中将父进程数据复制到子进程的用户空间 */
					memcpy((void*)prog_vaddr, buf_page, PG_SIZE);
c000b3bd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000b3c0:	83 ec 04             	sub    $0x4,%esp
c000b3c3:	68 00 10 00 00       	push   $0x1000
c000b3c8:	ff 75 10             	pushl  0x10(%ebp)
c000b3cb:	50                   	push   %eax
c000b3cc:	e8 44 84 ff ff       	call   c0003815 <memcpy>
c000b3d1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:104

					/* e 恢复父进程页表 */
					page_dir_activate(parent_thread);
c000b3d4:	83 ec 0c             	sub    $0xc,%esp
c000b3d7:	ff 75 0c             	pushl  0xc(%ebp)
c000b3da:	e8 2e a0 ff ff       	call   c000540d <page_dir_activate>
c000b3df:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:106
				}
				idx_bit++;
c000b3e2:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/userprog/fork.c:86

	/* 在父进程的用户空间中查找已有数据的页，按页一一拷贝给子进程 */
	while (idx_byte < btmp_bytes_len) {
		if (vaddr_btmp[idx_byte]) {
			idx_bit = 0;
			while (idx_bit < 8) {
c000b3e6:	83 7d f0 07          	cmpl   $0x7,-0x10(%ebp)
c000b3ea:	0f 86 5e ff ff ff    	jbe    c000b34e <copy_body_stack3+0x5a>
/work/x86_os_my/userprog/fork.c:109
					page_dir_activate(parent_thread);
				}
				idx_bit++;
			}
		}
		idx_byte++;
c000b3f0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/userprog/fork.c:83
	uint32_t idx_byte = 0;
	uint32_t idx_bit = 0;
	uint32_t prog_vaddr = 0;

	/* 在父进程的用户空间中查找已有数据的页，按页一一拷贝给子进程 */
	while (idx_byte < btmp_bytes_len) {
c000b3f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b3f7:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c000b3fa:	0f 82 2f ff ff ff    	jb     c000b32f <copy_body_stack3+0x3b>
/work/x86_os_my/userprog/fork.c:111
				idx_bit++;
			}
		}
		idx_byte++;
	}
}
c000b400:	90                   	nop
c000b401:	c9                   	leave  
c000b402:	c3                   	ret    

c000b403 <build_child_stack>:
build_child_stack():
/work/x86_os_my/userprog/fork.c:174
为了让子进程也能继续 fork 之后的代码运行，必须让它同父进程一样，从中断退出，也就是要经过 intr_exit。

子进程是由调度器 schedule 调度执行的，它要用到 switch_to 函数，
而 switch_to 函数要从栈 thread_stack 中恢复上下文，因此我们要想办法构建出合适的 thread_stack
*/
static int32_t build_child_stack(struct task_struct* child_thread) {
c000b403:	55                   	push   %ebp
c000b404:	89 e5                	mov    %esp,%ebp
c000b406:	83 ec 20             	sub    $0x20,%esp
/work/x86_os_my/userprog/fork.c:177
	/* a 使子进程pid返回值为0 */
	/* 获取子进程0级栈栈顶 */
	struct intr_stack* intr_0_stack = (struct intr_stack*)((uint32_t)child_thread + PG_SIZE - sizeof(struct intr_stack));
c000b409:	8b 45 08             	mov    0x8(%ebp),%eax
c000b40c:	05 b4 0f 00 00       	add    $0xfb4,%eax
c000b411:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/userprog/fork.c:179
	/* 修改子进程的返回值为0 */
	intr_0_stack->eax = 0;	//根据 abi 约定，eax 寄存器中是函数返回值!!!
c000b414:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000b417:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
/work/x86_os_my/userprog/fork.c:182

	/* b 为 switch_to 构建线程栈 struct thread_stack,将其构建在紧临intr_stack之下的空间*/
	uint32_t* ret_addr_in_thread_stack  = (uint32_t*)intr_0_stack - 1;	// 任务切换后新任务的返回地址 eip
c000b41e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000b421:	83 e8 04             	sub    $0x4,%eax
c000b424:	89 45 f8             	mov    %eax,-0x8(%ebp)
/work/x86_os_my/userprog/fork.c:185

	/***   这三行不是必要的,只是为了梳理 thread_stack 中的关系 ***/
	uint32_t* esi_ptr_in_thread_stack = (uint32_t*)intr_0_stack - 2;
c000b427:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000b42a:	83 e8 08             	sub    $0x8,%eax
c000b42d:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/fork.c:186
	uint32_t* edi_ptr_in_thread_stack = (uint32_t*)intr_0_stack - 3;
c000b430:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000b433:	83 e8 0c             	sub    $0xc,%eax
c000b436:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/fork.c:187
	uint32_t* ebx_ptr_in_thread_stack = (uint32_t*)intr_0_stack - 4;
c000b439:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000b43c:	83 e8 10             	sub    $0x10,%eax
c000b43f:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/userprog/fork.c:194

	/* ebp 在 thread_stack 中的地址便是当时的esp(0级栈的栈顶)，即栈顶esp = (uint32_t*)intr_0_stack - 5 */
	/* 指针 ebp_ptr_in_thread_stack，它是 thread_stack 的栈顶，
	 * 必须把它的值存放在 pcb 中偏移为 0 的地方，即 task_struct 中的 self_kstack 处，
	 * 将来 switch_to 要用它作为栈顶，并且执行一系列的 pop 来恢复上下文。 */
	uint32_t* ebp_ptr_in_thread_stack = (uint32_t*)intr_0_stack - 5;
c000b442:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000b445:	83 e8 14             	sub    $0x14,%eax
c000b448:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/userprog/fork.c:197

	/* switch_to的返回地址更新为intr_exit，直接从中断返回 */
	*ret_addr_in_thread_stack = (uint32_t)intr_exit;	// kernel.S
c000b44b:	ba 10 1c 00 c0       	mov    $0xc0001c10,%edx
c000b450:	8b 45 f8             	mov    -0x8(%ebp),%eax
c000b453:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/userprog/fork.c:201

	/* 下面这个赋值只是为了使构建的 thread_stack 更加清晰,其实也不需要,
	 * 因为在进入intr_exit后一系列的pop会把寄存器中的数据覆盖 */
	*ebp_ptr_in_thread_stack = *ebx_ptr_in_thread_stack = *edi_ptr_in_thread_stack = *esi_ptr_in_thread_stack = 0;
c000b455:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b458:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c000b45e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b461:	8b 10                	mov    (%eax),%edx
c000b463:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b466:	89 10                	mov    %edx,(%eax)
c000b468:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b46b:	8b 10                	mov    (%eax),%edx
c000b46d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000b470:	89 10                	mov    %edx,(%eax)
c000b472:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000b475:	8b 10                	mov    (%eax),%edx
c000b477:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000b47a:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/userprog/fork.c:205
	/*********************************************************/

	/* 把构建的 thread_stack 的栈顶做为 switch_to 恢复数据时的栈顶 */
	child_thread->self_kstack = ebp_ptr_in_thread_stack;	//线程内核栈栈顶 self_kstack 总是和 esp 来回赋值~
c000b47c:	8b 45 08             	mov    0x8(%ebp),%eax
c000b47f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c000b482:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/userprog/fork.c:212
	在被换下处理器前，我们会把线程的上下文信息保存在 0 特权级栈中，
	self_kstack 便用来记录 0 特权级栈在保存线程上下文后，新的栈顶，
	在下一次此线程又被调度到处理器上时，
	把 self_kstack 的值加载到 esp 寄存器，这样便从 0 特权级栈中获取了线程上下文，从而可以加载到处理器中运行。
	*/
	return 0;
c000b484:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/userprog/fork.c:213
}
c000b489:	c9                   	leave  
c000b48a:	c3                   	ret    

c000b48b <update_inode_open_cnts>:
update_inode_open_cnts():
/work/x86_os_my/userprog/fork.c:216

/* 更新inode打开数 */
static void update_inode_open_cnts(struct task_struct* thread) {
c000b48b:	55                   	push   %ebp
c000b48c:	89 e5                	mov    %esp,%ebp
c000b48e:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/fork.c:217
	int32_t local_fd = 3, global_fd = 0;
c000b491:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
c000b498:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/userprog/fork.c:218
	while (local_fd < MAX_FILES_OPEN_PER_PROC) {	//遍历线程打开的所有文件
c000b49f:	eb 58                	jmp    c000b4f9 <update_inode_open_cnts+0x6e>
/work/x86_os_my/userprog/fork.c:219
		global_fd = thread->fd_table[local_fd];
c000b4a1:	8b 45 08             	mov    0x8(%ebp),%eax
c000b4a4:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000b4a7:	83 c2 08             	add    $0x8,%edx
c000b4aa:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
c000b4ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/fork.c:220
		ASSERT(global_fd < MAX_FILE_OPEN);
c000b4b1:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c000b4b5:	7e 1c                	jle    c000b4d3 <update_inode_open_cnts+0x48>
/work/x86_os_my/userprog/fork.c:220 (discriminator 1)
c000b4b7:	68 12 de 00 c0       	push   $0xc000de12
c000b4bc:	68 00 df 00 c0       	push   $0xc000df00
c000b4c1:	68 dc 00 00 00       	push   $0xdc
c000b4c6:	68 fc dd 00 c0       	push   $0xc000ddfc
c000b4cb:	e8 51 6e ff ff       	call   c0002321 <panic_spin>
c000b4d0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:221
		if (global_fd != -1) {
c000b4d3:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c000b4d7:	74 1c                	je     c000b4f5 <update_inode_open_cnts+0x6a>
/work/x86_os_my/userprog/fork.c:222
			file_table[global_fd].fd_inode->i_open_cnts++;	//线程打开的所有文件的inode->open_cnt加一
c000b4d9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000b4dc:	89 d0                	mov    %edx,%eax
c000b4de:	01 c0                	add    %eax,%eax
c000b4e0:	01 d0                	add    %edx,%eax
c000b4e2:	c1 e0 02             	shl    $0x2,%eax
c000b4e5:	05 e8 1f 01 c0       	add    $0xc0011fe8,%eax
c000b4ea:	8b 00                	mov    (%eax),%eax
c000b4ec:	8b 50 08             	mov    0x8(%eax),%edx
c000b4ef:	83 c2 01             	add    $0x1,%edx
c000b4f2:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/userprog/fork.c:224
		}
		local_fd++;
c000b4f5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/userprog/fork.c:218
}

/* 更新inode打开数 */
static void update_inode_open_cnts(struct task_struct* thread) {
	int32_t local_fd = 3, global_fd = 0;
	while (local_fd < MAX_FILES_OPEN_PER_PROC) {	//遍历线程打开的所有文件
c000b4f9:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
c000b4fd:	7e a2                	jle    c000b4a1 <update_inode_open_cnts+0x16>
/work/x86_os_my/userprog/fork.c:226
		if (global_fd != -1) {
			file_table[global_fd].fd_inode->i_open_cnts++;	//线程打开的所有文件的inode->open_cnt加一
		}
		local_fd++;
	}
}
c000b4ff:	90                   	nop
c000b500:	c9                   	leave  
c000b501:	c3                   	ret    

c000b502 <copy_process>:
copy_process():
/work/x86_os_my/userprog/fork.c:229

/* 拷贝父进程本身所占资源给子进程 */
static int32_t copy_process(struct task_struct* child_thread, struct task_struct* parent_thread) {
c000b502:	55                   	push   %ebp
c000b503:	89 e5                	mov    %esp,%ebp
c000b505:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/fork.c:231
	/* 内核缓冲区,作为父进程用户空间的数据，复制到子进程用户空间，的中转 */
	void* buf_page = get_kernel_pages(1);
c000b508:	83 ec 0c             	sub    $0xc,%esp
c000b50b:	6a 01                	push   $0x1
c000b50d:	e8 b7 74 ff ff       	call   c00029c9 <get_kernel_pages>
c000b512:	83 c4 10             	add    $0x10,%esp
c000b515:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/fork.c:232
	if (buf_page == NULL) {
c000b518:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c000b51c:	75 0a                	jne    c000b528 <copy_process+0x26>
/work/x86_os_my/userprog/fork.c:233
		return -1;
c000b51e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000b523:	e9 82 00 00 00       	jmp    c000b5aa <copy_process+0xa8>
/work/x86_os_my/userprog/fork.c:237
	}

	/* a 复制父进程的pcb、虚拟地址位图、内核栈到子进程 */
	if (copy_pcb_vaddrbitmap_stack0(child_thread, parent_thread) == -1) {
c000b528:	83 ec 08             	sub    $0x8,%esp
c000b52b:	ff 75 0c             	pushl  0xc(%ebp)
c000b52e:	ff 75 08             	pushl  0x8(%ebp)
c000b531:	e8 8a fc ff ff       	call   c000b1c0 <copy_pcb_vaddrbitmap_stack0>
c000b536:	83 c4 10             	add    $0x10,%esp
c000b539:	83 f8 ff             	cmp    $0xffffffff,%eax
c000b53c:	75 07                	jne    c000b545 <copy_process+0x43>
/work/x86_os_my/userprog/fork.c:238
		return -1;
c000b53e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000b543:	eb 65                	jmp    c000b5aa <copy_process+0xa8>
/work/x86_os_my/userprog/fork.c:242
	}

	/* b 为子进程创建页表,此页表仅包括内核空间 */
	child_thread->pgdir = create_page_dir();
c000b545:	e8 46 9f ff ff       	call   c0005490 <create_page_dir>
c000b54a:	89 c2                	mov    %eax,%edx
c000b54c:	8b 45 08             	mov    0x8(%ebp),%eax
c000b54f:	89 50 54             	mov    %edx,0x54(%eax)
/work/x86_os_my/userprog/fork.c:243
	if(child_thread->pgdir == NULL) {
c000b552:	8b 45 08             	mov    0x8(%ebp),%eax
c000b555:	8b 40 54             	mov    0x54(%eax),%eax
c000b558:	85 c0                	test   %eax,%eax
c000b55a:	75 07                	jne    c000b563 <copy_process+0x61>
/work/x86_os_my/userprog/fork.c:244
		return -1;
c000b55c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000b561:	eb 47                	jmp    c000b5aa <copy_process+0xa8>
/work/x86_os_my/userprog/fork.c:248
	}

	/* c 复制父进程进程体及用户栈给子进程 */
	copy_body_stack3(child_thread, parent_thread, buf_page);
c000b563:	83 ec 04             	sub    $0x4,%esp
c000b566:	ff 75 f4             	pushl  -0xc(%ebp)
c000b569:	ff 75 0c             	pushl  0xc(%ebp)
c000b56c:	ff 75 08             	pushl  0x8(%ebp)
c000b56f:	e8 80 fd ff ff       	call   c000b2f4 <copy_body_stack3>
c000b574:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:251

	/* d 构建子进程 thread_stack 和修改返回值pid */
	build_child_stack(child_thread);
c000b577:	83 ec 0c             	sub    $0xc,%esp
c000b57a:	ff 75 08             	pushl  0x8(%ebp)
c000b57d:	e8 81 fe ff ff       	call   c000b403 <build_child_stack>
c000b582:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:254

	/* e 更新文件inode的打开数 */
	update_inode_open_cnts(child_thread);
c000b585:	83 ec 0c             	sub    $0xc,%esp
c000b588:	ff 75 08             	pushl  0x8(%ebp)
c000b58b:	e8 fb fe ff ff       	call   c000b48b <update_inode_open_cnts>
c000b590:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:256

	mfree_page(PF_KERNEL, buf_page, 1);
c000b593:	83 ec 04             	sub    $0x4,%esp
c000b596:	6a 01                	push   $0x1
c000b598:	ff 75 f4             	pushl  -0xc(%ebp)
c000b59b:	6a 01                	push   $0x1
c000b59d:	e8 96 7b ff ff       	call   c0003138 <mfree_page>
c000b5a2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:257
	return 0;
c000b5a5:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/userprog/fork.c:258
}
c000b5aa:	c9                   	leave  
c000b5ab:	c3                   	ret    

c000b5ac <sys_fork>:
sys_fork():
/work/x86_os_my/userprog/fork.c:261

/* fork子进程，内核线程不可直接调用 */
pid_t sys_fork(void) {
c000b5ac:	55                   	push   %ebp
c000b5ad:	89 e5                	mov    %esp,%ebp
c000b5af:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/fork.c:262
	struct task_struct* parent_thread = running_thread();
c000b5b2:	e8 f3 85 ff ff       	call   c0003baa <running_thread>
c000b5b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/fork.c:263
	struct task_struct* child_thread = get_kernel_pages(1);	// 为子进程创建pcb(task_struct结构)
c000b5ba:	83 ec 0c             	sub    $0xc,%esp
c000b5bd:	6a 01                	push   $0x1
c000b5bf:	e8 05 74 ff ff       	call   c00029c9 <get_kernel_pages>
c000b5c4:	83 c4 10             	add    $0x10,%esp
c000b5c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/fork.c:264
	if (child_thread == NULL) {
c000b5ca:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c000b5ce:	75 0a                	jne    c000b5da <sys_fork+0x2e>
/work/x86_os_my/userprog/fork.c:265
		return -1;
c000b5d0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000b5d5:	e9 f2 00 00 00       	jmp    c000b6cc <sys_fork+0x120>
/work/x86_os_my/userprog/fork.c:267
	}
	ASSERT(INTR_OFF == intr_get_status() && parent_thread->pgdir != NULL);	//中断关了，并且是用户线程
c000b5da:	e8 a8 63 ff ff       	call   c0001987 <intr_get_status>
c000b5df:	85 c0                	test   %eax,%eax
c000b5e1:	75 0a                	jne    c000b5ed <sys_fork+0x41>
/work/x86_os_my/userprog/fork.c:267 (discriminator 1)
c000b5e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b5e6:	8b 40 54             	mov    0x54(%eax),%eax
c000b5e9:	85 c0                	test   %eax,%eax
c000b5eb:	75 1c                	jne    c000b609 <sys_fork+0x5d>
/work/x86_os_my/userprog/fork.c:267 (discriminator 3)
c000b5ed:	68 2c de 00 c0       	push   $0xc000de2c
c000b5f2:	68 18 df 00 c0       	push   $0xc000df18
c000b5f7:	68 0b 01 00 00       	push   $0x10b
c000b5fc:	68 fc dd 00 c0       	push   $0xc000ddfc
c000b601:	e8 1b 6d ff ff       	call   c0002321 <panic_spin>
c000b606:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:269

	if (copy_process(child_thread, parent_thread) == -1) {
c000b609:	83 ec 08             	sub    $0x8,%esp
c000b60c:	ff 75 f4             	pushl  -0xc(%ebp)
c000b60f:	ff 75 f0             	pushl  -0x10(%ebp)
c000b612:	e8 eb fe ff ff       	call   c000b502 <copy_process>
c000b617:	83 c4 10             	add    $0x10,%esp
c000b61a:	83 f8 ff             	cmp    $0xffffffff,%eax
c000b61d:	75 0a                	jne    c000b629 <sys_fork+0x7d>
/work/x86_os_my/userprog/fork.c:270
		return -1;
c000b61f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000b624:	e9 a3 00 00 00       	jmp    c000b6cc <sys_fork+0x120>
/work/x86_os_my/userprog/fork.c:274
	}

	/* 添加到就绪线程队列和所有线程队列，子进程由调度器安排运行 */
	ASSERT(!elem_find(&thread_ready_list, &child_thread->general_tag));
c000b629:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b62c:	83 c0 44             	add    $0x44,%eax
c000b62f:	83 ec 08             	sub    $0x8,%esp
c000b632:	50                   	push   %eax
c000b633:	68 8c 11 01 c0       	push   $0xc001118c
c000b638:	e8 7f 90 ff ff       	call   c00046bc <elem_find>
c000b63d:	83 c4 10             	add    $0x10,%esp
c000b640:	85 c0                	test   %eax,%eax
c000b642:	74 1c                	je     c000b660 <sys_fork+0xb4>
/work/x86_os_my/userprog/fork.c:274 (discriminator 1)
c000b644:	68 6c de 00 c0       	push   $0xc000de6c
c000b649:	68 18 df 00 c0       	push   $0xc000df18
c000b64e:	68 12 01 00 00       	push   $0x112
c000b653:	68 fc dd 00 c0       	push   $0xc000ddfc
c000b658:	e8 c4 6c ff ff       	call   c0002321 <panic_spin>
c000b65d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:275
	list_append(&thread_ready_list, &child_thread->general_tag);
c000b660:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b663:	83 c0 44             	add    $0x44,%eax
c000b666:	83 ec 08             	sub    $0x8,%esp
c000b669:	50                   	push   %eax
c000b66a:	68 8c 11 01 c0       	push   $0xc001118c
c000b66f:	e8 ce 8f ff ff       	call   c0004642 <list_append>
c000b674:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:276
	ASSERT(!elem_find(&thread_all_list, &child_thread->all_list_tag));
c000b677:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b67a:	83 c0 4c             	add    $0x4c,%eax
c000b67d:	83 ec 08             	sub    $0x8,%esp
c000b680:	50                   	push   %eax
c000b681:	68 9c 11 01 c0       	push   $0xc001119c
c000b686:	e8 31 90 ff ff       	call   c00046bc <elem_find>
c000b68b:	83 c4 10             	add    $0x10,%esp
c000b68e:	85 c0                	test   %eax,%eax
c000b690:	74 1c                	je     c000b6ae <sys_fork+0x102>
/work/x86_os_my/userprog/fork.c:276 (discriminator 1)
c000b692:	68 a8 de 00 c0       	push   $0xc000dea8
c000b697:	68 18 df 00 c0       	push   $0xc000df18
c000b69c:	68 14 01 00 00       	push   $0x114
c000b6a1:	68 fc dd 00 c0       	push   $0xc000ddfc
c000b6a6:	e8 76 6c ff ff       	call   c0002321 <panic_spin>
c000b6ab:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:277
	list_append(&thread_all_list, &child_thread->all_list_tag);
c000b6ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b6b1:	83 c0 4c             	add    $0x4c,%eax
c000b6b4:	83 ec 08             	sub    $0x8,%esp
c000b6b7:	50                   	push   %eax
c000b6b8:	68 9c 11 01 c0       	push   $0xc001119c
c000b6bd:	e8 80 8f ff ff       	call   c0004642 <list_append>
c000b6c2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:279

	return child_thread->pid;	// 父进程返回子进程的pid
c000b6c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b6c8:	0f b7 40 04          	movzwl 0x4(%eax),%eax
/work/x86_os_my/userprog/fork.c:280
}
c000b6cc:	c9                   	leave  
c000b6cd:	c3                   	ret    

c000b6ce <print_prompt>:
print_prompt():
/work/x86_os_my/shell/shell.c:21

/* 用来记录当前目录,是当前目录的缓存,每次执行cd命令时会更新此内容 */
char cwd_cache[MAX_PATH_LEN] = {0};

/* 输出提示符 */
void print_prompt(void) {
c000b6ce:	55                   	push   %ebp
c000b6cf:	89 e5                	mov    %esp,%ebp
c000b6d1:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/shell/shell.c:22
	printf("[rabbit@localhost %s]$ ", cwd_cache);
c000b6d4:	83 ec 08             	sub    $0x8,%esp
c000b6d7:	68 20 08 01 c0       	push   $0xc0010820
c000b6dc:	68 24 df 00 c0       	push   $0xc000df24
c000b6e1:	e8 74 a5 ff ff       	call   c0005c5a <printf>
c000b6e6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:23
}
c000b6e9:	90                   	nop
c000b6ea:	c9                   	leave  
c000b6eb:	c3                   	ret    

c000b6ec <readline>:
readline():
/work/x86_os_my/shell/shell.c:26

/* 从键盘缓冲区中最多读入count个字节到buf */
static void readline(char* buf, int32_t count) {
c000b6ec:	55                   	push   %ebp
c000b6ed:	89 e5                	mov    %esp,%ebp
c000b6ef:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/shell/shell.c:27
	assert(buf != NULL && count > 0);
c000b6f2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c000b6f6:	74 06                	je     c000b6fe <readline+0x12>
/work/x86_os_my/shell/shell.c:27 (discriminator 2)
c000b6f8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c000b6fc:	7f 19                	jg     c000b717 <readline+0x2b>
/work/x86_os_my/shell/shell.c:27 (discriminator 3)
c000b6fe:	68 3c df 00 c0       	push   $0xc000df3c
c000b703:	68 1c e0 00 c0       	push   $0xc000e01c
c000b708:	6a 1b                	push   $0x1b
c000b70a:	68 55 df 00 c0       	push   $0xc000df55
c000b70f:	e8 0a 03 00 00       	call   c000ba1e <user_spin>
c000b714:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:28
	char* pos = buf;
c000b717:	8b 45 08             	mov    0x8(%ebp),%eax
c000b71a:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/shell/shell.c:29
	while (read(stdin_no, pos, 1) != -1 && (pos - buf) < count) {	// 每次读1个字符。在不出错情况下,直到找到回车符才返回
c000b71d:	e9 b5 00 00 00       	jmp    c000b7d7 <readline+0xeb>
/work/x86_os_my/shell/shell.c:30
		switch (*pos) {
c000b722:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b725:	0f b6 00             	movzbl (%eax),%eax
c000b728:	0f be c0             	movsbl %al,%eax
c000b72b:	83 e8 08             	sub    $0x8,%eax
c000b72e:	83 f8 0c             	cmp    $0xc,%eax
c000b731:	0f 87 87 00 00 00    	ja     c000b7be <readline+0xd2>
c000b737:	8b 04 85 b0 df 00 c0 	mov    -0x3fff2050(,%eax,4),%eax
c000b73e:	ff e0                	jmp    *%eax
/work/x86_os_my/shell/shell.c:34
			/* 找到回车或换行符后认为键入的命令结束,直接返回 */
			case '\n':
			case '\r':
			*pos = 0;		// 添加cmd_line的终止字符0
c000b740:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b743:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/shell/shell.c:35
			putchar('\n');
c000b746:	83 ec 0c             	sub    $0xc,%esp
c000b749:	6a 0a                	push   $0xa
c000b74b:	e8 d1 9f ff ff       	call   c0005721 <putchar>
c000b750:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:36
			return;
c000b753:	e9 b9 00 00 00       	jmp    c000b811 <readline+0x125>
/work/x86_os_my/shell/shell.c:39

			case '\b':
			if (cmd_line[0] != '\b') {	// 阻止删除非本次输入的信息
c000b758:	0f b6 05 20 0a 01 c0 	movzbl 0xc0010a20,%eax
c000b75f:	3c 08                	cmp    $0x8,%al
c000b761:	74 74                	je     c000b7d7 <readline+0xeb>
/work/x86_os_my/shell/shell.c:40
				--pos;				// 退回到缓冲区cmd_line中上一个字符
c000b763:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
/work/x86_os_my/shell/shell.c:41
				putchar('\b');		// 屏幕显示也删掉前一个字符
c000b767:	83 ec 0c             	sub    $0xc,%esp
c000b76a:	6a 08                	push   $0x8
c000b76c:	e8 b0 9f ff ff       	call   c0005721 <putchar>
c000b771:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:43
			}
			break;
c000b774:	eb 61                	jmp    c000b7d7 <readline+0xeb>
/work/x86_os_my/shell/shell.c:48

			/* ctrl+l 清屏 */
			case 'l' - 'a':
			/* 1 先将当前的字符'l'-'a'置为0 */
			*pos = 0;
c000b776:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b779:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/shell/shell.c:50
			/* 2 再将屏幕清空 */
			clear();
c000b77c:	e8 c4 9f ff ff       	call   c0005745 <clear>
/work/x86_os_my/shell/shell.c:52
			/* 3 打印提示符 */
			print_prompt();
c000b781:	e8 48 ff ff ff       	call   c000b6ce <print_prompt>
/work/x86_os_my/shell/shell.c:54
			/* 4 将之前键入的内容再次打印 */
			printf("%s", buf);
c000b786:	83 ec 08             	sub    $0x8,%esp
c000b789:	ff 75 08             	pushl  0x8(%ebp)
c000b78c:	68 63 df 00 c0       	push   $0xc000df63
c000b791:	e8 c4 a4 ff ff       	call   c0005c5a <printf>
c000b796:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:55
			break;
c000b799:	eb 3c                	jmp    c000b7d7 <readline+0xeb>
/work/x86_os_my/shell/shell.c:60

			/* ctrl+u 清掉输入 */
			case 'u' - 'a':
			while (buf != pos) {
				putchar('\b');
c000b79b:	83 ec 0c             	sub    $0xc,%esp
c000b79e:	6a 08                	push   $0x8
c000b7a0:	e8 7c 9f ff ff       	call   c0005721 <putchar>
c000b7a5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:61
				*(pos--) = 0;
c000b7a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b7ab:	8d 50 ff             	lea    -0x1(%eax),%edx
c000b7ae:	89 55 f4             	mov    %edx,-0xc(%ebp)
c000b7b1:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/shell/shell.c:59
			printf("%s", buf);
			break;

			/* ctrl+u 清掉输入 */
			case 'u' - 'a':
			while (buf != pos) {
c000b7b4:	8b 45 08             	mov    0x8(%ebp),%eax
c000b7b7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c000b7ba:	75 df                	jne    c000b79b <readline+0xaf>
/work/x86_os_my/shell/shell.c:63
				putchar('\b');
				*(pos--) = 0;
			}
			break;
c000b7bc:	eb 19                	jmp    c000b7d7 <readline+0xeb>
/work/x86_os_my/shell/shell.c:67

			/* 非控制键则输出字符 */
			default:
			putchar(*pos);			// 屏幕显示
c000b7be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b7c1:	0f b6 00             	movzbl (%eax),%eax
c000b7c4:	0f be c0             	movsbl %al,%eax
c000b7c7:	83 ec 0c             	sub    $0xc,%esp
c000b7ca:	50                   	push   %eax
c000b7cb:	e8 51 9f ff ff       	call   c0005721 <putchar>
c000b7d0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:68
			pos++;
c000b7d3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/shell/shell.c:29

/* 从键盘缓冲区中最多读入count个字节到buf */
static void readline(char* buf, int32_t count) {
	assert(buf != NULL && count > 0);
	char* pos = buf;
	while (read(stdin_no, pos, 1) != -1 && (pos - buf) < count) {	// 每次读1个字符。在不出错情况下,直到找到回车符才返回
c000b7d7:	83 ec 04             	sub    $0x4,%esp
c000b7da:	6a 01                	push   $0x1
c000b7dc:	ff 75 f4             	pushl  -0xc(%ebp)
c000b7df:	6a 00                	push   $0x0
c000b7e1:	e8 18 9f ff ff       	call   c00056fe <read>
c000b7e6:	83 c4 10             	add    $0x10,%esp
c000b7e9:	83 f8 ff             	cmp    $0xffffffff,%eax
c000b7ec:	74 13                	je     c000b801 <readline+0x115>
/work/x86_os_my/shell/shell.c:29 (discriminator 1)
c000b7ee:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000b7f1:	8b 45 08             	mov    0x8(%ebp),%eax
c000b7f4:	29 c2                	sub    %eax,%edx
c000b7f6:	89 d0                	mov    %edx,%eax
c000b7f8:	3b 45 0c             	cmp    0xc(%ebp),%eax
c000b7fb:	0f 8c 21 ff ff ff    	jl     c000b722 <readline+0x36>
/work/x86_os_my/shell/shell.c:71
			default:
			putchar(*pos);			// 屏幕显示
			pos++;
		}
	}
	printf("readline: can`t find enter_key in the cmd_line, max num of char is 128\n");
c000b801:	83 ec 0c             	sub    $0xc,%esp
c000b804:	68 68 df 00 c0       	push   $0xc000df68
c000b809:	e8 4c a4 ff ff       	call   c0005c5a <printf>
c000b80e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:72
}
c000b811:	c9                   	leave  
c000b812:	c3                   	ret    

c000b813 <cmd_parse>:
cmd_parse():
/work/x86_os_my/shell/shell.c:75

/* 分析字符串cmd_str中以token为分隔符的单词,将各单词的指针存入argv数组 */
static int32_t cmd_parse(char* cmd_str, char** argv, char token) {
c000b813:	55                   	push   %ebp
c000b814:	89 e5                	mov    %esp,%ebp
c000b816:	83 ec 28             	sub    $0x28,%esp
c000b819:	8b 45 10             	mov    0x10(%ebp),%eax
c000b81c:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/shell/shell.c:76
	assert(cmd_str != NULL);
c000b81f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c000b823:	75 19                	jne    c000b83e <cmd_parse+0x2b>
/work/x86_os_my/shell/shell.c:76 (discriminator 1)
c000b825:	68 e4 df 00 c0       	push   $0xc000dfe4
c000b82a:	68 28 e0 00 c0       	push   $0xc000e028
c000b82f:	6a 4c                	push   $0x4c
c000b831:	68 55 df 00 c0       	push   $0xc000df55
c000b836:	e8 e3 01 00 00       	call   c000ba1e <user_spin>
c000b83b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:77
	int32_t arg_idx = 0;
c000b83e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/shell/shell.c:78
	while(arg_idx < MAX_ARG_NR) {
c000b845:	eb 19                	jmp    c000b860 <cmd_parse+0x4d>
/work/x86_os_my/shell/shell.c:79
		argv[arg_idx] = NULL;
c000b847:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b84a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000b851:	8b 45 0c             	mov    0xc(%ebp),%eax
c000b854:	01 d0                	add    %edx,%eax
c000b856:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/shell/shell.c:80
		arg_idx++;
c000b85c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/shell/shell.c:78

/* 分析字符串cmd_str中以token为分隔符的单词,将各单词的指针存入argv数组 */
static int32_t cmd_parse(char* cmd_str, char** argv, char token) {
	assert(cmd_str != NULL);
	int32_t arg_idx = 0;
	while(arg_idx < MAX_ARG_NR) {
c000b860:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c000b864:	7e e1                	jle    c000b847 <cmd_parse+0x34>
/work/x86_os_my/shell/shell.c:82
		argv[arg_idx] = NULL;
		arg_idx++;
	}
	char* next = cmd_str;
c000b866:	8b 45 08             	mov    0x8(%ebp),%eax
c000b869:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/shell/shell.c:83
	int32_t argc = 0;
c000b86c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/shell/shell.c:85
	/* 外层循环处理整个命令行 */
	while(*next) {
c000b873:	eb 6f                	jmp    c000b8e4 <cmd_parse+0xd1>
/work/x86_os_my/shell/shell.c:88
		/* 去除命令字或参数之间的空格 */
		while(*next == token) {
			next++;
c000b875:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/shell/shell.c:87
	char* next = cmd_str;
	int32_t argc = 0;
	/* 外层循环处理整个命令行 */
	while(*next) {
		/* 去除命令字或参数之间的空格 */
		while(*next == token) {
c000b879:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b87c:	0f b6 00             	movzbl (%eax),%eax
c000b87f:	3a 45 e4             	cmp    -0x1c(%ebp),%al
c000b882:	74 f1                	je     c000b875 <cmd_parse+0x62>
/work/x86_os_my/shell/shell.c:91
			next++;
		}
		/* 处理最后一个参数后接空格的情况,如"ls dir2 " */
		if (*next == 0) {
c000b884:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b887:	0f b6 00             	movzbl (%eax),%eax
c000b88a:	84 c0                	test   %al,%al
c000b88c:	74 62                	je     c000b8f0 <cmd_parse+0xdd>
/work/x86_os_my/shell/shell.c:94
			break;
		}
		argv[argc] = next;
c000b88e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000b891:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000b898:	8b 45 0c             	mov    0xc(%ebp),%eax
c000b89b:	01 c2                	add    %eax,%edx
c000b89d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b8a0:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/shell/shell.c:97

		/* 内层循环处理命令行中的每个命令字及参数 */
		while (*next && *next != token) {	  // 在字符串结束前找单词分隔符
c000b8a2:	eb 04                	jmp    c000b8a8 <cmd_parse+0x95>
/work/x86_os_my/shell/shell.c:98
			next++;
c000b8a4:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/shell/shell.c:97
			break;
		}
		argv[argc] = next;

		/* 内层循环处理命令行中的每个命令字及参数 */
		while (*next && *next != token) {	  // 在字符串结束前找单词分隔符
c000b8a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b8ab:	0f b6 00             	movzbl (%eax),%eax
c000b8ae:	84 c0                	test   %al,%al
c000b8b0:	74 0b                	je     c000b8bd <cmd_parse+0xaa>
/work/x86_os_my/shell/shell.c:97 (discriminator 1)
c000b8b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b8b5:	0f b6 00             	movzbl (%eax),%eax
c000b8b8:	3a 45 e4             	cmp    -0x1c(%ebp),%al
c000b8bb:	75 e7                	jne    c000b8a4 <cmd_parse+0x91>
/work/x86_os_my/shell/shell.c:102
			next++;
		}

		/* 如果未结束(是token字符),使tocken变成0 */
		if (*next) {
c000b8bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b8c0:	0f b6 00             	movzbl (%eax),%eax
c000b8c3:	84 c0                	test   %al,%al
c000b8c5:	74 0c                	je     c000b8d3 <cmd_parse+0xc0>
/work/x86_os_my/shell/shell.c:103
			*next++ = 0;	// 将token字符替换为字符串结束符0,做为一个单词的结束,并将字符指针next指向下一个字符
c000b8c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b8ca:	8d 50 01             	lea    0x1(%eax),%edx
c000b8cd:	89 55 f0             	mov    %edx,-0x10(%ebp)
c000b8d0:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/shell/shell.c:107
		}

		/* 避免argv数组访问越界,参数过多则返回0 */
		if (argc > MAX_ARG_NR) {
c000b8d3:	83 7d ec 10          	cmpl   $0x10,-0x14(%ebp)
c000b8d7:	7e 07                	jle    c000b8e0 <cmd_parse+0xcd>
/work/x86_os_my/shell/shell.c:108
			return -1;
c000b8d9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000b8de:	eb 14                	jmp    c000b8f4 <cmd_parse+0xe1>
/work/x86_os_my/shell/shell.c:110
		}
		argc++;
c000b8e0:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
/work/x86_os_my/shell/shell.c:85
		arg_idx++;
	}
	char* next = cmd_str;
	int32_t argc = 0;
	/* 外层循环处理整个命令行 */
	while(*next) {
c000b8e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b8e7:	0f b6 00             	movzbl (%eax),%eax
c000b8ea:	84 c0                	test   %al,%al
c000b8ec:	75 8b                	jne    c000b879 <cmd_parse+0x66>
c000b8ee:	eb 01                	jmp    c000b8f1 <cmd_parse+0xde>
/work/x86_os_my/shell/shell.c:92
		while(*next == token) {
			next++;
		}
		/* 处理最后一个参数后接空格的情况,如"ls dir2 " */
		if (*next == 0) {
			break;
c000b8f0:	90                   	nop
/work/x86_os_my/shell/shell.c:112
		if (argc > MAX_ARG_NR) {
			return -1;
		}
		argc++;
	}
	return argc;
c000b8f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
/work/x86_os_my/shell/shell.c:113
}
c000b8f4:	c9                   	leave  
c000b8f5:	c3                   	ret    

c000b8f6 <my_shell>:
my_shell():
/work/x86_os_my/shell/shell.c:118

char* argv[MAX_ARG_NR];    // argv必须为全局变量，为了以后exec的程序可访问参数
int32_t argc = -1;
/* 简单的shell */
void my_shell(void) {
c000b8f6:	55                   	push   %ebp
c000b8f7:	89 e5                	mov    %esp,%ebp
c000b8f9:	57                   	push   %edi
c000b8fa:	81 ec 14 02 00 00    	sub    $0x214,%esp
/work/x86_os_my/shell/shell.c:119
	cwd_cache[0] = '/';
c000b900:	c6 05 20 08 01 c0 2f 	movb   $0x2f,0xc0010820
/work/x86_os_my/shell/shell.c:120
	cwd_cache[1] = 0;
c000b907:	c6 05 21 08 01 c0 00 	movb   $0x0,0xc0010821
/work/x86_os_my/shell/shell.c:122
	while (1) {
		print_prompt();
c000b90e:	e8 bb fd ff ff       	call   c000b6ce <print_prompt>
/work/x86_os_my/shell/shell.c:123
		memset(final_path, 0, MAX_PATH_LEN);
c000b913:	83 ec 04             	sub    $0x4,%esp
c000b916:	68 00 02 00 00       	push   $0x200
c000b91b:	6a 00                	push   $0x0
c000b91d:	68 20 06 01 c0       	push   $0xc0010620
c000b922:	e8 9c 7e ff ff       	call   c00037c3 <memset>
c000b927:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:124
		memset(cmd_line, 0, MAX_PATH_LEN);
c000b92a:	83 ec 04             	sub    $0x4,%esp
c000b92d:	68 00 02 00 00       	push   $0x200
c000b932:	6a 00                	push   $0x0
c000b934:	68 20 0a 01 c0       	push   $0xc0010a20
c000b939:	e8 85 7e ff ff       	call   c00037c3 <memset>
c000b93e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:125
		readline(cmd_line, MAX_PATH_LEN);
c000b941:	83 ec 08             	sub    $0x8,%esp
c000b944:	68 00 02 00 00       	push   $0x200
c000b949:	68 20 0a 01 c0       	push   $0xc0010a20
c000b94e:	e8 99 fd ff ff       	call   c000b6ec <readline>
c000b953:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:126
		if (cmd_line[0] == 0) {	 // 若只键入了一个回车
c000b956:	0f b6 05 20 0a 01 c0 	movzbl 0xc0010a20,%eax
c000b95d:	84 c0                	test   %al,%al
c000b95f:	0f 84 b3 00 00 00    	je     c000ba18 <my_shell+0x122>
/work/x86_os_my/shell/shell.c:129
			continue;
		}
		argc = -1;
c000b965:	c7 05 58 01 01 c0 ff 	movl   $0xffffffff,0xc0010158
c000b96c:	ff ff ff 
/work/x86_os_my/shell/shell.c:130
		argc = cmd_parse(cmd_line, argv, ' ');
c000b96f:	83 ec 04             	sub    $0x4,%esp
c000b972:	6a 20                	push   $0x20
c000b974:	68 80 23 01 c0       	push   $0xc0012380
c000b979:	68 20 0a 01 c0       	push   $0xc0010a20
c000b97e:	e8 90 fe ff ff       	call   c000b813 <cmd_parse>
c000b983:	83 c4 10             	add    $0x10,%esp
c000b986:	a3 58 01 01 c0       	mov    %eax,0xc0010158
/work/x86_os_my/shell/shell.c:131
		if (argc == -1) {
c000b98b:	a1 58 01 01 c0       	mov    0xc0010158,%eax
c000b990:	83 f8 ff             	cmp    $0xffffffff,%eax
c000b993:	75 14                	jne    c000b9a9 <my_shell+0xb3>
/work/x86_os_my/shell/shell.c:132
			printf("num of arguments exceed %d\n", MAX_ARG_NR);
c000b995:	83 ec 08             	sub    $0x8,%esp
c000b998:	6a 10                	push   $0x10
c000b99a:	68 f4 df 00 c0       	push   $0xc000dff4
c000b99f:	e8 b6 a2 ff ff       	call   c0005c5a <printf>
c000b9a4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:133
			continue;
c000b9a7:	eb 70                	jmp    c000ba19 <my_shell+0x123>
/work/x86_os_my/shell/shell.c:136
		}

		char buf[MAX_PATH_LEN] = {0};
c000b9a9:	8d 95 f4 fd ff ff    	lea    -0x20c(%ebp),%edx
c000b9af:	b8 00 00 00 00       	mov    $0x0,%eax
c000b9b4:	b9 80 00 00 00       	mov    $0x80,%ecx
c000b9b9:	89 d7                	mov    %edx,%edi
c000b9bb:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/shell/shell.c:137
		int32_t arg_idx = 0;
c000b9bd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/shell/shell.c:139
		// 输入几个路径，测试一下路径转换函数
		while(arg_idx < argc) {
c000b9c4:	eb 43                	jmp    c000ba09 <my_shell+0x113>
/work/x86_os_my/shell/shell.c:140
			make_clear_abs_path(argv[arg_idx], buf);
c000b9c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b9c9:	8b 04 85 80 23 01 c0 	mov    -0x3ffedc80(,%eax,4),%eax
c000b9d0:	83 ec 08             	sub    $0x8,%esp
c000b9d3:	8d 95 f4 fd ff ff    	lea    -0x20c(%ebp),%edx
c000b9d9:	52                   	push   %edx
c000b9da:	50                   	push   %eax
c000b9db:	e8 d2 01 00 00       	call   c000bbb2 <make_clear_abs_path>
c000b9e0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:141
			printf("%s -> %s\n", argv[arg_idx], buf);
c000b9e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b9e6:	8b 04 85 80 23 01 c0 	mov    -0x3ffedc80(,%eax,4),%eax
c000b9ed:	83 ec 04             	sub    $0x4,%esp
c000b9f0:	8d 95 f4 fd ff ff    	lea    -0x20c(%ebp),%edx
c000b9f6:	52                   	push   %edx
c000b9f7:	50                   	push   %eax
c000b9f8:	68 10 e0 00 c0       	push   $0xc000e010
c000b9fd:	e8 58 a2 ff ff       	call   c0005c5a <printf>
c000ba02:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:142
			arg_idx++;
c000ba05:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/shell/shell.c:139
		}

		char buf[MAX_PATH_LEN] = {0};
		int32_t arg_idx = 0;
		// 输入几个路径，测试一下路径转换函数
		while(arg_idx < argc) {
c000ba09:	a1 58 01 01 c0       	mov    0xc0010158,%eax
c000ba0e:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c000ba11:	7c b3                	jl     c000b9c6 <my_shell+0xd0>
c000ba13:	e9 f6 fe ff ff       	jmp    c000b90e <my_shell+0x18>
/work/x86_os_my/shell/shell.c:127
		print_prompt();
		memset(final_path, 0, MAX_PATH_LEN);
		memset(cmd_line, 0, MAX_PATH_LEN);
		readline(cmd_line, MAX_PATH_LEN);
		if (cmd_line[0] == 0) {	 // 若只键入了一个回车
			continue;
c000ba18:	90                   	nop
/work/x86_os_my/shell/shell.c:144 (discriminator 1)
		while(arg_idx < argc) {
			make_clear_abs_path(argv[arg_idx], buf);
			printf("%s -> %s\n", argv[arg_idx], buf);
			arg_idx++;
		}
	}
c000ba19:	e9 f0 fe ff ff       	jmp    c000b90e <my_shell+0x18>

c000ba1e <user_spin>:
user_spin():
/work/x86_os_my/lib/user/assert.c:3
#include "assert.h"
#include "stdio.h"
void user_spin(char* filename, int line, const char* func, const char* condition) {
c000ba1e:	55                   	push   %ebp
c000ba1f:	89 e5                	mov    %esp,%ebp
c000ba21:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/lib/user/assert.c:4
	printf("\n\n\n\nfilename %s\nline %d\nfunction %s\ncondition %s\n", filename, line, func, condition);
c000ba24:	83 ec 0c             	sub    $0xc,%esp
c000ba27:	ff 75 14             	pushl  0x14(%ebp)
c000ba2a:	ff 75 10             	pushl  0x10(%ebp)
c000ba2d:	ff 75 0c             	pushl  0xc(%ebp)
c000ba30:	ff 75 08             	pushl  0x8(%ebp)
c000ba33:	68 34 e0 00 c0       	push   $0xc000e034
c000ba38:	e8 1d a2 ff ff       	call   c0005c5a <printf>
c000ba3d:	83 c4 20             	add    $0x20,%esp
/work/x86_os_my/lib/user/assert.c:5 (discriminator 1)
	while(1);
c000ba40:	eb fe                	jmp    c000ba40 <user_spin+0x22>

c000ba42 <wash_path>:
wash_path():
/work/x86_os_my/shell/buildin_cmd.c:16
/* 将路径old_abs_path中的..和.转换为实际路径后存入new_abs_path */
// 从左到右解析 old_abs_path 路径中的每一层，
// 若解析出来的目录名不是“..”，就将其连接到 new_abs_path
// 若是“ ..” , 就将 new_abs_path 的最后一层目录去掉。
// 若是“ . ” , 就什么都不做
static void wash_path(char* old_abs_path, char* new_abs_path) {
c000ba42:	55                   	push   %ebp
c000ba43:	89 e5                	mov    %esp,%ebp
c000ba45:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/shell/buildin_cmd.c:17
	assert(old_abs_path[0] == '/');
c000ba48:	8b 45 08             	mov    0x8(%ebp),%eax
c000ba4b:	0f b6 00             	movzbl (%eax),%eax
c000ba4e:	3c 2f                	cmp    $0x2f,%al
c000ba50:	74 19                	je     c000ba6b <wash_path+0x29>
/work/x86_os_my/shell/buildin_cmd.c:17 (discriminator 1)
c000ba52:	68 68 e0 00 c0       	push   $0xc000e068
c000ba57:	68 9c e0 00 c0       	push   $0xc000e09c
c000ba5c:	6a 11                	push   $0x11
c000ba5e:	68 7f e0 00 c0       	push   $0xc000e07f
c000ba63:	e8 b6 ff ff ff       	call   c000ba1e <user_spin>
c000ba68:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:18
	char name[MAX_FILE_NAME_LEN] = {0};    
c000ba6b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c000ba72:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c000ba79:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c000ba80:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:19
	char* sub_path = old_abs_path;
c000ba87:	8b 45 08             	mov    0x8(%ebp),%eax
c000ba8a:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:20
	sub_path = path_parse(sub_path, name);
c000ba8d:	83 ec 08             	sub    $0x8,%esp
c000ba90:	8d 45 e0             	lea    -0x20(%ebp),%eax
c000ba93:	50                   	push   %eax
c000ba94:	ff 75 f4             	pushl  -0xc(%ebp)
c000ba97:	e8 69 b6 ff ff       	call   c0007105 <path_parse>
c000ba9c:	83 c4 10             	add    $0x10,%esp
c000ba9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:21
	if (name[0] == 0) {	// 若只键入了"/",直接将"/"存入new_abs_path后返回 
c000baa2:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c000baa6:	84 c0                	test   %al,%al
c000baa8:	75 14                	jne    c000babe <wash_path+0x7c>
/work/x86_os_my/shell/buildin_cmd.c:22
		new_abs_path[0] = '/';
c000baaa:	8b 45 0c             	mov    0xc(%ebp),%eax
c000baad:	c6 00 2f             	movb   $0x2f,(%eax)
/work/x86_os_my/shell/buildin_cmd.c:23
		new_abs_path[1] = 0;
c000bab0:	8b 45 0c             	mov    0xc(%ebp),%eax
c000bab3:	83 c0 01             	add    $0x1,%eax
c000bab6:	c6 00 00             	movb   $0x0,(%eax)
c000bab9:	e9 f2 00 00 00       	jmp    c000bbb0 <wash_path+0x16e>
/work/x86_os_my/shell/buildin_cmd.c:26
		return;
	}
	new_abs_path[0] = 0;	// 避免传给new_abs_path的缓冲区不干净
c000babe:	8b 45 0c             	mov    0xc(%ebp),%eax
c000bac1:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/shell/buildin_cmd.c:27
	strcat(new_abs_path, "/");
c000bac4:	83 ec 08             	sub    $0x8,%esp
c000bac7:	68 93 e0 00 c0       	push   $0xc000e093
c000bacc:	ff 75 0c             	pushl  0xc(%ebp)
c000bacf:	e8 f3 7f ff ff       	call   c0003ac7 <strcat>
c000bad4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:28
	while (name[0]) {
c000bad7:	e9 c8 00 00 00       	jmp    c000bba4 <wash_path+0x162>
/work/x86_os_my/shell/buildin_cmd.c:30
		/* 如果是上一级目录“..” */
		if (!strcmp("..", name)) {
c000badc:	83 ec 08             	sub    $0x8,%esp
c000badf:	8d 45 e0             	lea    -0x20(%ebp),%eax
c000bae2:	50                   	push   %eax
c000bae3:	68 95 e0 00 c0       	push   $0xc000e095
c000bae8:	e8 ab 7e ff ff       	call   c0003998 <strcmp>
c000baed:	83 c4 10             	add    $0x10,%esp
c000baf0:	84 c0                	test   %al,%al
c000baf2:	75 2e                	jne    c000bb22 <wash_path+0xe0>
/work/x86_os_my/shell/buildin_cmd.c:31
			char* slash_ptr =  strrchr(new_abs_path, '/');
c000baf4:	83 ec 08             	sub    $0x8,%esp
c000baf7:	6a 2f                	push   $0x2f
c000baf9:	ff 75 0c             	pushl  0xc(%ebp)
c000bafc:	e8 68 7f ff ff       	call   c0003a69 <strrchr>
c000bb01:	83 c4 10             	add    $0x10,%esp
c000bb04:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:34
			/*如果未到new_abs_path中的顶层目录,就将最右边的'/'替换为0,
			这样便去除了new_abs_path中最后一层路径,相当于到了上一级目录 */
			if (slash_ptr != new_abs_path) {	// 如new_abs_path为“/a/b”,".."之后则变为“/a”
c000bb07:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000bb0a:	3b 45 0c             	cmp    0xc(%ebp),%eax
c000bb0d:	74 08                	je     c000bb17 <wash_path+0xd5>
/work/x86_os_my/shell/buildin_cmd.c:35
				*slash_ptr = 0;
c000bb0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000bb12:	c6 00 00             	movb   $0x0,(%eax)
c000bb15:	eb 5f                	jmp    c000bb76 <wash_path+0x134>
/work/x86_os_my/shell/buildin_cmd.c:39
			} else {	// 如new_abs_path为"/a",".."之后则变为"/"
				/* 若new_abs_path中只有1个'/',即表示已经到了顶层目录,
				就将下一个字符置为结束符0. */
				*(slash_ptr + 1) = 0;
c000bb17:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000bb1a:	83 c0 01             	add    $0x1,%eax
c000bb1d:	c6 00 00             	movb   $0x0,(%eax)
c000bb20:	eb 54                	jmp    c000bb76 <wash_path+0x134>
/work/x86_os_my/shell/buildin_cmd.c:41
			}
		} else if (strcmp(".", name)) {	// 如果路径不是‘.’,就将name拼接到new_abs_path
c000bb22:	83 ec 08             	sub    $0x8,%esp
c000bb25:	8d 45 e0             	lea    -0x20(%ebp),%eax
c000bb28:	50                   	push   %eax
c000bb29:	68 98 e0 00 c0       	push   $0xc000e098
c000bb2e:	e8 65 7e ff ff       	call   c0003998 <strcmp>
c000bb33:	83 c4 10             	add    $0x10,%esp
c000bb36:	84 c0                	test   %al,%al
c000bb38:	74 3c                	je     c000bb76 <wash_path+0x134>
/work/x86_os_my/shell/buildin_cmd.c:42
			if (strcmp(new_abs_path, "/")) {	// 如果new_abs_path不是"/",就拼接一个"/",此处的判断是为了避免路径开头变成这样"//"
c000bb3a:	83 ec 08             	sub    $0x8,%esp
c000bb3d:	68 93 e0 00 c0       	push   $0xc000e093
c000bb42:	ff 75 0c             	pushl  0xc(%ebp)
c000bb45:	e8 4e 7e ff ff       	call   c0003998 <strcmp>
c000bb4a:	83 c4 10             	add    $0x10,%esp
c000bb4d:	84 c0                	test   %al,%al
c000bb4f:	74 13                	je     c000bb64 <wash_path+0x122>
/work/x86_os_my/shell/buildin_cmd.c:43
				strcat(new_abs_path, "/");
c000bb51:	83 ec 08             	sub    $0x8,%esp
c000bb54:	68 93 e0 00 c0       	push   $0xc000e093
c000bb59:	ff 75 0c             	pushl  0xc(%ebp)
c000bb5c:	e8 66 7f ff ff       	call   c0003ac7 <strcat>
c000bb61:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:45
			}
			strcat(new_abs_path, name);
c000bb64:	83 ec 08             	sub    $0x8,%esp
c000bb67:	8d 45 e0             	lea    -0x20(%ebp),%eax
c000bb6a:	50                   	push   %eax
c000bb6b:	ff 75 0c             	pushl  0xc(%ebp)
c000bb6e:	e8 54 7f ff ff       	call   c0003ac7 <strcat>
c000bb73:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:49
		}	// 若name为当前目录".",无须处理new_abs_path

		/* 继续遍历下一层路径 */
		memset(name, 0, MAX_FILE_NAME_LEN);
c000bb76:	83 ec 04             	sub    $0x4,%esp
c000bb79:	6a 10                	push   $0x10
c000bb7b:	6a 00                	push   $0x0
c000bb7d:	8d 45 e0             	lea    -0x20(%ebp),%eax
c000bb80:	50                   	push   %eax
c000bb81:	e8 3d 7c ff ff       	call   c00037c3 <memset>
c000bb86:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:50
		if (sub_path) {
c000bb89:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c000bb8d:	74 15                	je     c000bba4 <wash_path+0x162>
/work/x86_os_my/shell/buildin_cmd.c:51
			sub_path = path_parse(sub_path, name);
c000bb8f:	83 ec 08             	sub    $0x8,%esp
c000bb92:	8d 45 e0             	lea    -0x20(%ebp),%eax
c000bb95:	50                   	push   %eax
c000bb96:	ff 75 f4             	pushl  -0xc(%ebp)
c000bb99:	e8 67 b5 ff ff       	call   c0007105 <path_parse>
c000bb9e:	83 c4 10             	add    $0x10,%esp
c000bba1:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:28
		new_abs_path[1] = 0;
		return;
	}
	new_abs_path[0] = 0;	// 避免传给new_abs_path的缓冲区不干净
	strcat(new_abs_path, "/");
	while (name[0]) {
c000bba4:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c000bba8:	84 c0                	test   %al,%al
c000bbaa:	0f 85 2c ff ff ff    	jne    c000badc <wash_path+0x9a>
/work/x86_os_my/shell/buildin_cmd.c:54
		memset(name, 0, MAX_FILE_NAME_LEN);
		if (sub_path) {
			sub_path = path_parse(sub_path, name);
		}
	}
}
c000bbb0:	c9                   	leave  
c000bbb1:	c3                   	ret    

c000bbb2 <make_clear_abs_path>:
make_clear_abs_path():
/work/x86_os_my/shell/buildin_cmd.c:60

/* 相对路径，转换成绝对路径，应该给用户层做，陷入内核态之后的操作不应该过长。
 * 当前工作路径 + 相对路径 = 绝对路径
 */
/* 将path处理成不含..和.的绝对路径,存储在final_path */
void make_clear_abs_path(char* path, char* final_path) {
c000bbb2:	55                   	push   %ebp
c000bbb3:	89 e5                	mov    %esp,%ebp
c000bbb5:	57                   	push   %edi
c000bbb6:	81 ec 04 02 00 00    	sub    $0x204,%esp
/work/x86_os_my/shell/buildin_cmd.c:61
	char abs_path[MAX_PATH_LEN] = {0};
c000bbbc:	8d 95 f8 fd ff ff    	lea    -0x208(%ebp),%edx
c000bbc2:	b8 00 00 00 00       	mov    $0x0,%eax
c000bbc7:	b9 80 00 00 00       	mov    $0x80,%ecx
c000bbcc:	89 d7                	mov    %edx,%edi
c000bbce:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/shell/buildin_cmd.c:63
	/* 先判断是否输入的是绝对路径 */
	if (path[0] != '/') {	// 若输入的不是绝对路径,就拼接成绝对路径
c000bbd0:	8b 45 08             	mov    0x8(%ebp),%eax
c000bbd3:	0f b6 00             	movzbl (%eax),%eax
c000bbd6:	3c 2f                	cmp    $0x2f,%al
c000bbd8:	74 61                	je     c000bc3b <make_clear_abs_path+0x89>
/work/x86_os_my/shell/buildin_cmd.c:64
		memset(abs_path, 0, MAX_PATH_LEN);
c000bbda:	83 ec 04             	sub    $0x4,%esp
c000bbdd:	68 00 02 00 00       	push   $0x200
c000bbe2:	6a 00                	push   $0x0
c000bbe4:	8d 85 f8 fd ff ff    	lea    -0x208(%ebp),%eax
c000bbea:	50                   	push   %eax
c000bbeb:	e8 d3 7b ff ff       	call   c00037c3 <memset>
c000bbf0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:65
		if (getcwd(abs_path, MAX_PATH_LEN) != NULL) {
c000bbf3:	83 ec 08             	sub    $0x8,%esp
c000bbf6:	68 00 02 00 00       	push   $0x200
c000bbfb:	8d 85 f8 fd ff ff    	lea    -0x208(%ebp),%eax
c000bc01:	50                   	push   %eax
c000bc02:	e8 51 9b ff ff       	call   c0005758 <getcwd>
c000bc07:	83 c4 10             	add    $0x10,%esp
c000bc0a:	85 c0                	test   %eax,%eax
c000bc0c:	74 2d                	je     c000bc3b <make_clear_abs_path+0x89>
/work/x86_os_my/shell/buildin_cmd.c:66
			if (!((abs_path[0] == '/') && (abs_path[1] == 0))) {	// 若abs_path表示的当前目录不是根目录/
c000bc0e:	0f b6 85 f8 fd ff ff 	movzbl -0x208(%ebp),%eax
c000bc15:	3c 2f                	cmp    $0x2f,%al
c000bc17:	75 0b                	jne    c000bc24 <make_clear_abs_path+0x72>
/work/x86_os_my/shell/buildin_cmd.c:66 (discriminator 1)
c000bc19:	0f b6 85 f9 fd ff ff 	movzbl -0x207(%ebp),%eax
c000bc20:	84 c0                	test   %al,%al
c000bc22:	74 17                	je     c000bc3b <make_clear_abs_path+0x89>
/work/x86_os_my/shell/buildin_cmd.c:67
				strcat(abs_path, "/");
c000bc24:	83 ec 08             	sub    $0x8,%esp
c000bc27:	68 93 e0 00 c0       	push   $0xc000e093
c000bc2c:	8d 85 f8 fd ff ff    	lea    -0x208(%ebp),%eax
c000bc32:	50                   	push   %eax
c000bc33:	e8 8f 7e ff ff       	call   c0003ac7 <strcat>
c000bc38:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:71
			}
		}
	}
	strcat(abs_path, path);
c000bc3b:	83 ec 08             	sub    $0x8,%esp
c000bc3e:	ff 75 08             	pushl  0x8(%ebp)
c000bc41:	8d 85 f8 fd ff ff    	lea    -0x208(%ebp),%eax
c000bc47:	50                   	push   %eax
c000bc48:	e8 7a 7e ff ff       	call   c0003ac7 <strcat>
c000bc4d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:72
	wash_path(abs_path, final_path);
c000bc50:	83 ec 08             	sub    $0x8,%esp
c000bc53:	ff 75 0c             	pushl  0xc(%ebp)
c000bc56:	8d 85 f8 fd ff ff    	lea    -0x208(%ebp),%eax
c000bc5c:	50                   	push   %eax
c000bc5d:	e8 e0 fd ff ff       	call   c000ba42 <wash_path>
c000bc62:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:73
}
c000bc65:	90                   	nop
c000bc66:	8b 7d fc             	mov    -0x4(%ebp),%edi
c000bc69:	c9                   	leave  
c000bc6a:	c3                   	ret    
