
./build/kernel.bin:     file format elf32-i386


Disassembly of section .text:

c0001500 <main>:
main():
/work/x86_os_my/kernel/main.c:36
用户进程
u_prog_a 的地址是在 0xc0000000 以上，位于内核空间，但这并不表示它无法模拟用户进程。
*/
void init(void);

int main(void) {
c0001500:	8d 4c 24 04          	lea    0x4(%esp),%ecx
c0001504:	83 e4 f0             	and    $0xfffffff0,%esp
c0001507:	ff 71 fc             	pushl  -0x4(%ecx)
c000150a:	55                   	push   %ebp
c000150b:	89 e5                	mov    %esp,%ebp
c000150d:	51                   	push   %ecx
c000150e:	83 ec 24             	sub    $0x24,%esp
/work/x86_os_my/kernel/main.c:37
	put_str("I am kernel\n");
c0001511:	83 ec 0c             	sub    $0xc,%esp
c0001514:	68 7c c9 00 c0       	push   $0xc000c97c
c0001519:	e8 82 0d 00 00       	call   c00022a0 <put_str>
c000151e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:38
	init_all();
c0001521:	e8 7c 01 00 00       	call   c00016a2 <init_all>
/work/x86_os_my/kernel/main.c:42

	/*************    写入应用程序    *************/
	// 就第一次写入到hd80M.img就行，之后注释掉这块代码。
	uint32_t file_size = 512*50;	//书上编译出来可执行程序大小是 4777 字节【改成自己程序的大小，多个程序的话，取最大值，直接搞50个扇区(25k)，省的麻烦，】
c0001526:	c7 45 f4 00 64 00 00 	movl   $0x6400,-0xc(%ebp)
/work/x86_os_my/kernel/main.c:43
	uint32_t sec_cnt = DIV_ROUND_UP(file_size, 512);
c000152d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001530:	05 ff 01 00 00       	add    $0x1ff,%eax
c0001535:	c1 e8 09             	shr    $0x9,%eax
c0001538:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/main.c:44
	struct disk* sda = &channels[0].devices[0];
c000153b:	c7 45 ec 80 23 01 c0 	movl   $0xc0012380,-0x14(%ebp)
/work/x86_os_my/kernel/main.c:45
	void* prog_buf = sys_malloc(file_size);
c0001542:	83 ec 0c             	sub    $0xc,%esp
c0001545:	ff 75 f4             	pushl  -0xc(%ebp)
c0001548:	e8 af 18 00 00       	call   c0002dfc <sys_malloc>
c000154d:	83 c4 10             	add    $0x10,%esp
c0001550:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/main.c:46
	if(NULL == prog_buf) {
c0001553:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0001557:	75 1a                	jne    c0001573 <main+0x73>
/work/x86_os_my/kernel/main.c:47
		printk("sys_malloc error!\n");
c0001559:	83 ec 0c             	sub    $0xc,%esp
c000155c:	68 89 c9 00 c0       	push   $0xc000c989
c0001561:	e8 48 56 00 00       	call   c0006bae <printk>
c0001566:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:48
		return 0;
c0001569:	b8 00 00 00 00       	mov    $0x0,%eax
c000156e:	e9 ef 00 00 00       	jmp    c0001662 <main+0x162>
/work/x86_os_my/kernel/main.c:53
	}

	int32_t fd;
	// 在文件系统中 写入 prog_no_arg
	sys_unlink("/prog_no_arg");
c0001573:	83 ec 0c             	sub    $0xc,%esp
c0001576:	68 9c c9 00 c0       	push   $0xc000c99c
c000157b:	e8 0d 66 00 00       	call   c0007b8d <sys_unlink>
c0001580:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:54
	ide_read(sda, 300, prog_buf, sec_cnt);
c0001583:	ff 75 f0             	pushl  -0x10(%ebp)
c0001586:	ff 75 e8             	pushl  -0x18(%ebp)
c0001589:	68 2c 01 00 00       	push   $0x12c
c000158e:	ff 75 ec             	pushl  -0x14(%ebp)
c0001591:	e8 9f 4b 00 00       	call   c0006135 <ide_read>
c0001596:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:55
	fd = sys_open("/prog_no_arg", O_CREAT|O_RDWR);	//创建文件
c0001599:	83 ec 08             	sub    $0x8,%esp
c000159c:	6a 06                	push   $0x6
c000159e:	68 9c c9 00 c0       	push   $0xc000c99c
c00015a3:	e8 21 60 00 00       	call   c00075c9 <sys_open>
c00015a8:	83 c4 10             	add    $0x10,%esp
c00015ab:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/kernel/main.c:56
	if (fd != -1) {
c00015ae:	83 7d e4 ff          	cmpl   $0xffffffff,-0x1c(%ebp)
c00015b2:	74 2b                	je     c00015df <main+0xdf>
/work/x86_os_my/kernel/main.c:57
		if(sys_write(fd, prog_buf, file_size) == -1) {		//写入文件
c00015b4:	83 ec 04             	sub    $0x4,%esp
c00015b7:	ff 75 f4             	pushl  -0xc(%ebp)
c00015ba:	ff 75 e8             	pushl  -0x18(%ebp)
c00015bd:	ff 75 e4             	pushl  -0x1c(%ebp)
c00015c0:	e8 10 63 00 00       	call   c00078d5 <sys_write>
c00015c5:	83 c4 10             	add    $0x10,%esp
c00015c8:	83 f8 ff             	cmp    $0xffffffff,%eax
c00015cb:	75 12                	jne    c00015df <main+0xdf>
/work/x86_os_my/kernel/main.c:58
			printk("file write error!\n");
c00015cd:	83 ec 0c             	sub    $0xc,%esp
c00015d0:	68 a9 c9 00 c0       	push   $0xc000c9a9
c00015d5:	e8 d4 55 00 00       	call   c0006bae <printk>
c00015da:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:59 (discriminator 1)
			while(1);
c00015dd:	eb fe                	jmp    c00015dd <main+0xdd>
/work/x86_os_my/kernel/main.c:64
		}
	}

	// 在文件系统中 写入 prog_arg
	sys_unlink("/prog_arg");
c00015df:	83 ec 0c             	sub    $0xc,%esp
c00015e2:	68 bc c9 00 c0       	push   $0xc000c9bc
c00015e7:	e8 a1 65 00 00       	call   c0007b8d <sys_unlink>
c00015ec:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:65
	ide_read(sda, 400, prog_buf, sec_cnt);
c00015ef:	ff 75 f0             	pushl  -0x10(%ebp)
c00015f2:	ff 75 e8             	pushl  -0x18(%ebp)
c00015f5:	68 90 01 00 00       	push   $0x190
c00015fa:	ff 75 ec             	pushl  -0x14(%ebp)
c00015fd:	e8 33 4b 00 00       	call   c0006135 <ide_read>
c0001602:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:66
	fd = sys_open("/prog_arg", O_CREAT|O_RDWR);		//创建文件
c0001605:	83 ec 08             	sub    $0x8,%esp
c0001608:	6a 06                	push   $0x6
c000160a:	68 bc c9 00 c0       	push   $0xc000c9bc
c000160f:	e8 b5 5f 00 00       	call   c00075c9 <sys_open>
c0001614:	83 c4 10             	add    $0x10,%esp
c0001617:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/kernel/main.c:67
	if (fd != -1) {
c000161a:	83 7d e4 ff          	cmpl   $0xffffffff,-0x1c(%ebp)
c000161e:	74 2b                	je     c000164b <main+0x14b>
/work/x86_os_my/kernel/main.c:68
		if(sys_write(fd, prog_buf, file_size) == -1) {		//写入文件
c0001620:	83 ec 04             	sub    $0x4,%esp
c0001623:	ff 75 f4             	pushl  -0xc(%ebp)
c0001626:	ff 75 e8             	pushl  -0x18(%ebp)
c0001629:	ff 75 e4             	pushl  -0x1c(%ebp)
c000162c:	e8 a4 62 00 00       	call   c00078d5 <sys_write>
c0001631:	83 c4 10             	add    $0x10,%esp
c0001634:	83 f8 ff             	cmp    $0xffffffff,%eax
c0001637:	75 12                	jne    c000164b <main+0x14b>
/work/x86_os_my/kernel/main.c:69
			printk("file write error!\n");
c0001639:	83 ec 0c             	sub    $0xc,%esp
c000163c:	68 a9 c9 00 c0       	push   $0xc000c9a9
c0001641:	e8 68 55 00 00       	call   c0006bae <printk>
c0001646:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:70 (discriminator 2)
			while(1);
c0001649:	eb fe                	jmp    c0001649 <main+0x149>
/work/x86_os_my/kernel/main.c:74
		}
	}
	/*************    写入应用程序结束   *************/
	cls_screen();
c000164b:	e8 3b 0d 00 00       	call   c000238b <cls_screen>
/work/x86_os_my/kernel/main.c:75
	console_put_str("[rabbit@localhost /]$ ");
c0001650:	83 ec 0c             	sub    $0xc,%esp
c0001653:	68 c6 c9 00 c0       	push   $0xc000c9c6
c0001658:	e8 e3 32 00 00       	call   c0004940 <console_put_str>
c000165d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:76 (discriminator 3)
	while(1);
c0001660:	eb fe                	jmp    c0001660 <main+0x160>
/work/x86_os_my/kernel/main.c:78
	return 0;
}
c0001662:	8b 4d fc             	mov    -0x4(%ebp),%ecx
c0001665:	c9                   	leave  
c0001666:	8d 61 fc             	lea    -0x4(%ecx),%esp
c0001669:	c3                   	ret    

c000166a <init>:
init():
/work/x86_os_my/kernel/main.c:81

/* init进程 */
void init(void) {
c000166a:	55                   	push   %ebp
c000166b:	89 e5                	mov    %esp,%ebp
c000166d:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/main.c:82
	uint32_t ret_pid = fork();
c0001670:	e8 a4 41 00 00       	call   c0005819 <fork>
c0001675:	98                   	cwtl   
c0001676:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/main.c:83
	if(ret_pid) {  // 父进程
c0001679:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c000167d:	74 02                	je     c0001681 <init+0x17>
/work/x86_os_my/kernel/main.c:84 (discriminator 1)
		while(1);
c000167f:	eb fe                	jmp    c000167f <init+0x15>
/work/x86_os_my/kernel/main.c:86
	} else {	  // 子进程
		my_shell();
c0001681:	e8 85 a3 00 00       	call   c000ba0b <my_shell>
/work/x86_os_my/kernel/main.c:88
	}
	panic("init: should not be here");
c0001686:	68 dd c9 00 c0       	push   $0xc000c9dd
c000168b:	68 04 ca 00 c0       	push   $0xc000ca04
c0001690:	6a 58                	push   $0x58
c0001692:	68 f6 c9 00 c0       	push   $0xc000c9f6
c0001697:	e8 b0 a6 00 00       	call   c000bd4c <user_spin>
c000169c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:89
}
c000169f:	90                   	nop
c00016a0:	c9                   	leave  
c00016a1:	c3                   	ret    

c00016a2 <init_all>:
init_all():
/work/x86_os_my/kernel/init.c:15
#include "syscall-init.h"
#include "ide.h"
#include "fs.h"

/*负责初始化所有模块 */
void init_all() {
c00016a2:	55                   	push   %ebp
c00016a3:	89 e5                	mov    %esp,%ebp
c00016a5:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/kernel/init.c:16
	put_str("init_all\n");
c00016a8:	83 ec 0c             	sub    $0xc,%esp
c00016ab:	68 09 ca 00 c0       	push   $0xc000ca09
c00016b0:	e8 eb 0b 00 00       	call   c00022a0 <put_str>
c00016b5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/init.c:17
	idt_init();			// 初始化中断
c00016b8:	e8 38 04 00 00       	call   c0001af5 <idt_init>
/work/x86_os_my/kernel/init.c:18
	mem_init();			// 初始化内存管理系统
c00016bd:	e8 e0 21 00 00       	call   c00038a2 <mem_init>
/work/x86_os_my/kernel/init.c:19
	thread_init();		// 初始化线程相关结构
c00016c2:	e8 8c 2f 00 00       	call   c0004653 <thread_init>
/work/x86_os_my/kernel/init.c:20
	timer_init();		// 初始化PIT
c00016c7:	e8 16 06 00 00       	call   c0001ce2 <timer_init>
/work/x86_os_my/kernel/init.c:21
	console_init();		// 控制台初始化最好放在开中断之前
c00016cc:	e8 24 32 00 00       	call   c00048f5 <console_init>
/work/x86_os_my/kernel/init.c:22
	keyboard_init();	// 键盘初始化
c00016d1:	e8 9d 38 00 00       	call   c0004f73 <keyboard_init>
/work/x86_os_my/kernel/init.c:23
	tss_init();			// tss初始化
c00016d6:	e8 53 3c 00 00       	call   c000532e <tss_init>
/work/x86_os_my/kernel/init.c:24
	syscall_init();		// 初始化系统调用
c00016db:	e8 9b 43 00 00       	call   c0005a7b <syscall_init>
/work/x86_os_my/kernel/init.c:25
	intr_enable();		// 后面的ide_init需要打开中断
c00016e0:	e8 5f 03 00 00       	call   c0001a44 <intr_enable>
/work/x86_os_my/kernel/init.c:26
	ide_init();			// 初始化硬盘
c00016e5:	e8 b8 52 00 00       	call   c00069a2 <ide_init>
/work/x86_os_my/kernel/init.c:27
	filesys_init();		// 初始化文件系统
c00016ea:	e8 8f 73 00 00       	call   c0008a7e <filesys_init>
/work/x86_os_my/kernel/init.c:28
}
c00016ef:	90                   	nop
c00016f0:	c9                   	leave  
c00016f1:	c3                   	ret    

c00016f2 <outb>:
outb():
/work/x86_os_my/lib/kernel/io.h:17
#define __LIB_IO_H
#include "stdint.h"
//inline省去了函数调用开支

/* 向端口port写入一个字节*/
static inline void outb(uint16_t port, uint8_t data) {
c00016f2:	55                   	push   %ebp
c00016f3:	89 e5                	mov    %esp,%ebp
c00016f5:	83 ec 08             	sub    $0x8,%esp
c00016f8:	8b 55 08             	mov    0x8(%ebp),%edx
c00016fb:	8b 45 0c             	mov    0xc(%ebp),%eax
c00016fe:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c0001702:	88 45 f8             	mov    %al,-0x8(%ebp)
/work/x86_os_my/lib/kernel/io.h:21
/*********************************************************
 a表示用寄存器al或ax或eax,对端口指定N表示0~255, d表示用dx存储端口号, 
 %b0表示对应al,%w1表示对应dx */ 
   asm volatile ( "outb %b0, %w1" : : "a" (data), "Nd" (port));    
c0001705:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c0001709:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c000170d:	ee                   	out    %al,(%dx)
/work/x86_os_my/lib/kernel/io.h:23
/******************************************************/
}
c000170e:	90                   	nop
c000170f:	c9                   	leave  
c0001710:	c3                   	ret    

c0001711 <pic_init>:
pic_init():
/work/x86_os_my/kernel/interrupt.c:41
//自定义类型 intr_handler = void*
extern intr_handler intr_entry_table[IDT_DESC_CNT];	    // 声明引用汇编kernel.S中的中断处理函数入口数组

/* 初始化可编程中断控制器8259A */
// outb 来着 lib/kernel/io.h 内联汇编写法
static void pic_init(void) {
c0001711:	55                   	push   %ebp
c0001712:	89 e5                	mov    %esp,%ebp
c0001714:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:43
	/* 初始化主片 */
	outb (PIC_M_CTRL, 0x11);	// ICW1: 边沿触发,级联8259, 需要ICW4.
c0001717:	6a 11                	push   $0x11
c0001719:	6a 20                	push   $0x20
c000171b:	e8 d2 ff ff ff       	call   c00016f2 <outb>
c0001720:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:44
	outb (PIC_M_DATA, 0x20);	// ICW2: 起始中断向量号为0x20,也就是IR[0-7] 为 0x20 ~ 0x27.
c0001723:	6a 20                	push   $0x20
c0001725:	6a 21                	push   $0x21
c0001727:	e8 c6 ff ff ff       	call   c00016f2 <outb>
c000172c:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:45
	outb (PIC_M_DATA, 0x04);	// ICW3: IR2接从片. 
c000172f:	6a 04                	push   $0x4
c0001731:	6a 21                	push   $0x21
c0001733:	e8 ba ff ff ff       	call   c00016f2 <outb>
c0001738:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:46
	outb (PIC_M_DATA, 0x01);	// ICW4: 8086模式, 正常EOI
c000173b:	6a 01                	push   $0x1
c000173d:	6a 21                	push   $0x21
c000173f:	e8 ae ff ff ff       	call   c00016f2 <outb>
c0001744:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:49

	/* 初始化从片 */
	outb (PIC_S_CTRL, 0x11);	// ICW1: 边沿触发,级联8259, 需要ICW4.
c0001747:	6a 11                	push   $0x11
c0001749:	68 a0 00 00 00       	push   $0xa0
c000174e:	e8 9f ff ff ff       	call   c00016f2 <outb>
c0001753:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:50
	outb (PIC_S_DATA, 0x28);	// ICW2: 起始中断向量号为0x28,也就是IR[8-15] 为 0x28 ~ 0x2F.
c0001756:	6a 28                	push   $0x28
c0001758:	68 a1 00 00 00       	push   $0xa1
c000175d:	e8 90 ff ff ff       	call   c00016f2 <outb>
c0001762:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:51
	outb (PIC_S_DATA, 0x02);	// ICW3: 设置从片连接到主片的IR2引脚
c0001765:	6a 02                	push   $0x2
c0001767:	68 a1 00 00 00       	push   $0xa1
c000176c:	e8 81 ff ff ff       	call   c00016f2 <outb>
c0001771:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:52
	outb (PIC_S_DATA, 0x01);	// ICW4: 8086模式, 正常EOI
c0001774:	6a 01                	push   $0x1
c0001776:	68 a1 00 00 00       	push   $0xa1
c000177b:	e8 72 ff ff ff       	call   c00016f2 <outb>
c0001780:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:56

	/* IRQ2用于级联从片,必须打开,否则无法响应从片上的中断
	主片上打开的中断有IRQ0的时钟,IRQ1的键盘和级联从片的IRQ2,其它全部关闭 */
	outb (PIC_M_DATA, 0xf8);
c0001783:	68 f8 00 00 00       	push   $0xf8
c0001788:	6a 21                	push   $0x21
c000178a:	e8 63 ff ff ff       	call   c00016f2 <outb>
c000178f:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:58
	/* 打开从片上的IRQ14,此引脚接收硬盘控制器的中断 */
	outb (PIC_S_DATA, 0xbf);
c0001792:	68 bf 00 00 00       	push   $0xbf
c0001797:	68 a1 00 00 00       	push   $0xa1
c000179c:	e8 51 ff ff ff       	call   c00016f2 <outb>
c00017a1:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:60

	put_str("   pic_init done\n");
c00017a4:	83 ec 0c             	sub    $0xc,%esp
c00017a7:	68 14 ca 00 c0       	push   $0xc000ca14
c00017ac:	e8 ef 0a 00 00       	call   c00022a0 <put_str>
c00017b1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:61
}
c00017b4:	90                   	nop
c00017b5:	c9                   	leave  
c00017b6:	c3                   	ret    

c00017b7 <make_idt_desc>:
make_idt_desc():
/work/x86_os_my/kernel/interrupt.c:64

/* 创建中断门描述符 */
static void make_idt_desc(struct gate_desc* p_gdesc, uint8_t attr, intr_handler function) { 
c00017b7:	55                   	push   %ebp
c00017b8:	89 e5                	mov    %esp,%ebp
c00017ba:	83 ec 04             	sub    $0x4,%esp
c00017bd:	8b 45 0c             	mov    0xc(%ebp),%eax
c00017c0:	88 45 fc             	mov    %al,-0x4(%ebp)
/work/x86_os_my/kernel/interrupt.c:65
	p_gdesc->func_offset_low_word = (uint32_t)function & 0x0000FFFF;
c00017c3:	8b 45 10             	mov    0x10(%ebp),%eax
c00017c6:	89 c2                	mov    %eax,%edx
c00017c8:	8b 45 08             	mov    0x8(%ebp),%eax
c00017cb:	66 89 10             	mov    %dx,(%eax)
/work/x86_os_my/kernel/interrupt.c:66
	p_gdesc->selector = SELECTOR_K_CODE;
c00017ce:	8b 45 08             	mov    0x8(%ebp),%eax
c00017d1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
/work/x86_os_my/kernel/interrupt.c:67
	p_gdesc->dcount = 0;
c00017d7:	8b 45 08             	mov    0x8(%ebp),%eax
c00017da:	c6 40 04 00          	movb   $0x0,0x4(%eax)
/work/x86_os_my/kernel/interrupt.c:68
	p_gdesc->attribute = attr;
c00017de:	8b 45 08             	mov    0x8(%ebp),%eax
c00017e1:	0f b6 55 fc          	movzbl -0x4(%ebp),%edx
c00017e5:	88 50 05             	mov    %dl,0x5(%eax)
/work/x86_os_my/kernel/interrupt.c:69
	p_gdesc->func_offset_high_word = ((uint32_t)function & 0xFFFF0000) >> 16;
c00017e8:	8b 45 10             	mov    0x10(%ebp),%eax
c00017eb:	c1 e8 10             	shr    $0x10,%eax
c00017ee:	89 c2                	mov    %eax,%edx
c00017f0:	8b 45 08             	mov    0x8(%ebp),%eax
c00017f3:	66 89 50 06          	mov    %dx,0x6(%eax)
/work/x86_os_my/kernel/interrupt.c:70
}
c00017f7:	90                   	nop
c00017f8:	c9                   	leave  
c00017f9:	c3                   	ret    

c00017fa <idt_desc_init>:
idt_desc_init():
/work/x86_os_my/kernel/interrupt.c:73

/*初始化中断描述符表*/
static void idt_desc_init(void) {
c00017fa:	55                   	push   %ebp
c00017fb:	89 e5                	mov    %esp,%ebp
c00017fd:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/interrupt.c:75
	int i;
	int lastindex = IDT_DESC_CNT - 1;
c0001800:	c7 45 f0 80 00 00 00 	movl   $0x80,-0x10(%ebp)
/work/x86_os_my/kernel/interrupt.c:76
	for (i = 0; i < IDT_DESC_CNT; i++) {
c0001807:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c000180e:	eb 29                	jmp    c0001839 <idt_desc_init+0x3f>
/work/x86_os_my/kernel/interrupt.c:77 (discriminator 3)
		make_idt_desc(&idt[i], IDT_DESC_ATTR_DPL0, intr_entry_table[i]); 
c0001810:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001813:	8b 04 85 00 10 01 c0 	mov    -0x3ffef000(,%eax,4),%eax
c000181a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000181d:	c1 e2 03             	shl    $0x3,%edx
c0001820:	81 c2 60 11 01 c0    	add    $0xc0011160,%edx
c0001826:	50                   	push   %eax
c0001827:	68 8e 00 00 00       	push   $0x8e
c000182c:	52                   	push   %edx
c000182d:	e8 85 ff ff ff       	call   c00017b7 <make_idt_desc>
c0001832:	83 c4 0c             	add    $0xc,%esp
/work/x86_os_my/kernel/interrupt.c:76 (discriminator 3)

/*初始化中断描述符表*/
static void idt_desc_init(void) {
	int i;
	int lastindex = IDT_DESC_CNT - 1;
	for (i = 0; i < IDT_DESC_CNT; i++) {
c0001835:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:76 (discriminator 1)
c0001839:	81 7d f4 80 00 00 00 	cmpl   $0x80,-0xc(%ebp)
c0001840:	7e ce                	jle    c0001810 <idt_desc_init+0x16>
/work/x86_os_my/kernel/interrupt.c:81
		make_idt_desc(&idt[i], IDT_DESC_ATTR_DPL0, intr_entry_table[i]); 
	}
	/* 系统调用对应的中断门dpl为3！
	 * 中断处理程序为单独的syscall_handler */
	make_idt_desc(&idt[lastindex], IDT_DESC_ATTR_DPL3, syscall_handler);
c0001842:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0001845:	c1 e0 03             	shl    $0x3,%eax
c0001848:	05 60 11 01 c0       	add    $0xc0011160,%eax
c000184d:	68 77 22 00 c0       	push   $0xc0002277
c0001852:	68 ee 00 00 00       	push   $0xee
c0001857:	50                   	push   %eax
c0001858:	e8 5a ff ff ff       	call   c00017b7 <make_idt_desc>
c000185d:	83 c4 0c             	add    $0xc,%esp
/work/x86_os_my/kernel/interrupt.c:82
	put_str("   idt_desc_init done\n");
c0001860:	83 ec 0c             	sub    $0xc,%esp
c0001863:	68 26 ca 00 c0       	push   $0xc000ca26
c0001868:	e8 33 0a 00 00       	call   c00022a0 <put_str>
c000186d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:83
}
c0001870:	90                   	nop
c0001871:	c9                   	leave  
c0001872:	c3                   	ret    

c0001873 <general_intr_handler>:
general_intr_handler():
/work/x86_os_my/kernel/interrupt.c:86

/* 通用的中断处理函数,一般用在异常出现时的处理 */
static void general_intr_handler(uint8_t vec_nr) {
c0001873:	55                   	push   %ebp
c0001874:	89 e5                	mov    %esp,%ebp
c0001876:	83 ec 28             	sub    $0x28,%esp
c0001879:	8b 45 08             	mov    0x8(%ebp),%eax
c000187c:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/kernel/interrupt.c:87
	if (vec_nr == 0x27 || vec_nr == 0x2f) {	// 0x2f是从片8259A上的最后一个irq引脚，保留
c000187f:	80 7d e4 27          	cmpb   $0x27,-0x1c(%ebp)
c0001883:	0f 84 bf 00 00 00    	je     c0001948 <general_intr_handler+0xd5>
/work/x86_os_my/kernel/interrupt.c:87 (discriminator 1)
c0001889:	80 7d e4 2f          	cmpb   $0x2f,-0x1c(%ebp)
c000188d:	0f 84 b5 00 00 00    	je     c0001948 <general_intr_handler+0xd5>
/work/x86_os_my/kernel/interrupt.c:92
		return;	//IRQ7和IRQ15会产生伪中断(spurious interrupt),无须处理。
	}
	
	/* 将光标置为左上角 并清空一片区域 */
	set_cursor(0);
c0001893:	83 ec 0c             	sub    $0xc,%esp
c0001896:	6a 00                	push   $0x0
c0001898:	e8 90 0b 00 00       	call   c000242d <set_cursor>
c000189d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:93
	int cursor_pos = 0;
c00018a0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:94
	while(cursor_pos < 320) {
c00018a7:	eb 11                	jmp    c00018ba <general_intr_handler+0x47>
/work/x86_os_my/kernel/interrupt.c:95
		put_char(' ');
c00018a9:	83 ec 0c             	sub    $0xc,%esp
c00018ac:	6a 20                	push   $0x20
c00018ae:	e8 0b 0a 00 00       	call   c00022be <put_char>
c00018b3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:96
		cursor_pos++;
c00018b6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:94
	}
	
	/* 将光标置为左上角 并清空一片区域 */
	set_cursor(0);
	int cursor_pos = 0;
	while(cursor_pos < 320) {
c00018ba:	81 7d f4 3f 01 00 00 	cmpl   $0x13f,-0xc(%ebp)
c00018c1:	7e e6                	jle    c00018a9 <general_intr_handler+0x36>
/work/x86_os_my/kernel/interrupt.c:100
		put_char(' ');
		cursor_pos++;
	}

	/* 将光标置为左上角 打印信息 */
	set_cursor(0);
c00018c3:	83 ec 0c             	sub    $0xc,%esp
c00018c6:	6a 00                	push   $0x0
c00018c8:	e8 60 0b 00 00       	call   c000242d <set_cursor>
c00018cd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:101
	put_str("!!!!!!!      excetion message begin  !!!!!!!!\n");
c00018d0:	83 ec 0c             	sub    $0xc,%esp
c00018d3:	68 40 ca 00 c0       	push   $0xc000ca40
c00018d8:	e8 c3 09 00 00       	call   c00022a0 <put_str>
c00018dd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:102
	set_cursor(88);			// 第2行第8个字符
c00018e0:	83 ec 0c             	sub    $0xc,%esp
c00018e3:	6a 58                	push   $0x58
c00018e5:	e8 43 0b 00 00       	call   c000242d <set_cursor>
c00018ea:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:103
	put_str(intr_name[vec_nr]);
c00018ed:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c00018f1:	8b 04 85 60 1c 01 c0 	mov    -0x3ffee3a0(,%eax,4),%eax
c00018f8:	83 ec 0c             	sub    $0xc,%esp
c00018fb:	50                   	push   %eax
c00018fc:	e8 9f 09 00 00       	call   c00022a0 <put_str>
c0001901:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:104
	if (vec_nr == 14) {		// 若为Pagefault,将缺失的地址打印出来并悬停
c0001904:	80 7d e4 0e          	cmpb   $0xe,-0x1c(%ebp)
c0001908:	75 2c                	jne    c0001936 <general_intr_handler+0xc3>
/work/x86_os_my/kernel/interrupt.c:105
		int page_fault_vaddr = 0; 
c000190a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/kernel/interrupt.c:106
		asm ("movl %%cr2, %0" : "=r" (page_fault_vaddr));	  // cr2是存放造成page_fault的地址
c0001911:	0f 20 d0             	mov    %cr2,%eax
c0001914:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/interrupt.c:107
		put_str("\npage fault addr is 0x");
c0001917:	83 ec 0c             	sub    $0xc,%esp
c000191a:	68 6f ca 00 c0       	push   $0xc000ca6f
c000191f:	e8 7c 09 00 00       	call   c00022a0 <put_str>
c0001924:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:108
		put_int(page_fault_vaddr); 
c0001927:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000192a:	83 ec 0c             	sub    $0xc,%esp
c000192d:	50                   	push   %eax
c000192e:	e8 97 0a 00 00       	call   c00023ca <put_int>
c0001933:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:110
	}
	put_str("\n!!!!!!!      excetion message end    !!!!!!!!\n");
c0001936:	83 ec 0c             	sub    $0xc,%esp
c0001939:	68 88 ca 00 c0       	push   $0xc000ca88
c000193e:	e8 5d 09 00 00       	call   c00022a0 <put_str>
c0001943:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:113 (discriminator 1)
	// 能进入中断处理程序就表示已经处在关中断情况下, IF=0
	// 不会出现调度进程的情况。故下面的死循环不会再被中断，会卡死在这里。
	while(1);
c0001946:	eb fe                	jmp    c0001946 <general_intr_handler+0xd3>
/work/x86_os_my/kernel/interrupt.c:88
}

/* 通用的中断处理函数,一般用在异常出现时的处理 */
static void general_intr_handler(uint8_t vec_nr) {
	if (vec_nr == 0x27 || vec_nr == 0x2f) {	// 0x2f是从片8259A上的最后一个irq引脚，保留
		return;	//IRQ7和IRQ15会产生伪中断(spurious interrupt),无须处理。
c0001948:	90                   	nop
/work/x86_os_my/kernel/interrupt.c:114
	}
	put_str("\n!!!!!!!      excetion message end    !!!!!!!!\n");
	// 能进入中断处理程序就表示已经处在关中断情况下, IF=0
	// 不会出现调度进程的情况。故下面的死循环不会再被中断，会卡死在这里。
	while(1);
}
c0001949:	c9                   	leave  
c000194a:	c3                   	ret    

c000194b <exception_init>:
exception_init():
/work/x86_os_my/kernel/interrupt.c:117

/* 完成一般中断处理函数注册及异常名称注册 */
static void exception_init(void) {
c000194b:	55                   	push   %ebp
c000194c:	89 e5                	mov    %esp,%ebp
c000194e:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:119
	int i;
	for (i = 0; i < IDT_DESC_CNT; i++) {
c0001951:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0001958:	eb 20                	jmp    c000197a <exception_init+0x2f>
/work/x86_os_my/kernel/interrupt.c:122 (discriminator 3)
	/* idt_table数组中的函数是在进入中断后根据中断向量号调用的,
	 * 见kernel/kernel.S的call [idt_table + %1*4] */
		idt_table[i] = general_intr_handler;		// 默认为general_intr_handler，以后会由register_handler来注册具体处理函数。
c000195a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000195d:	c7 04 85 80 1e 01 c0 	movl   $0xc0001873,-0x3ffee180(,%eax,4)
c0001964:	73 18 00 c0 
/work/x86_os_my/kernel/interrupt.c:123 (discriminator 3)
		intr_name[i] = "unknown";					// 先统一赋值为unknown 
c0001968:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000196b:	c7 04 85 60 1c 01 c0 	movl   $0xc000cab8,-0x3ffee3a0(,%eax,4)
c0001972:	b8 ca 00 c0 
/work/x86_os_my/kernel/interrupt.c:119 (discriminator 3)
}

/* 完成一般中断处理函数注册及异常名称注册 */
static void exception_init(void) {
	int i;
	for (i = 0; i < IDT_DESC_CNT; i++) {
c0001976:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
/work/x86_os_my/kernel/interrupt.c:119 (discriminator 1)
c000197a:	81 7d fc 80 00 00 00 	cmpl   $0x80,-0x4(%ebp)
c0001981:	7e d7                	jle    c000195a <exception_init+0xf>
/work/x86_os_my/kernel/interrupt.c:125
	/* idt_table数组中的函数是在进入中断后根据中断向量号调用的,
	 * 见kernel/kernel.S的call [idt_table + %1*4] */
		idt_table[i] = general_intr_handler;		// 默认为general_intr_handler，以后会由register_handler来注册具体处理函数。
		intr_name[i] = "unknown";					// 先统一赋值为unknown 
	}
	intr_name[0] = "#DE Divide Error";
c0001983:	c7 05 60 1c 01 c0 c0 	movl   $0xc000cac0,0xc0011c60
c000198a:	ca 00 c0 
/work/x86_os_my/kernel/interrupt.c:126
	intr_name[1] = "#DB Debug Exception";
c000198d:	c7 05 64 1c 01 c0 d1 	movl   $0xc000cad1,0xc0011c64
c0001994:	ca 00 c0 
/work/x86_os_my/kernel/interrupt.c:127
	intr_name[2] = "NMI Interrupt";
c0001997:	c7 05 68 1c 01 c0 e5 	movl   $0xc000cae5,0xc0011c68
c000199e:	ca 00 c0 
/work/x86_os_my/kernel/interrupt.c:128
	intr_name[3] = "#BP Breakpoint Exception";
c00019a1:	c7 05 6c 1c 01 c0 f3 	movl   $0xc000caf3,0xc0011c6c
c00019a8:	ca 00 c0 
/work/x86_os_my/kernel/interrupt.c:129
	intr_name[4] = "#OF Overflow Exception";
c00019ab:	c7 05 70 1c 01 c0 0c 	movl   $0xc000cb0c,0xc0011c70
c00019b2:	cb 00 c0 
/work/x86_os_my/kernel/interrupt.c:130
	intr_name[5] = "#BR BOUND Range Exceeded Exception";
c00019b5:	c7 05 74 1c 01 c0 24 	movl   $0xc000cb24,0xc0011c74
c00019bc:	cb 00 c0 
/work/x86_os_my/kernel/interrupt.c:131
	intr_name[6] = "#UD Invalid Opcode Exception";
c00019bf:	c7 05 78 1c 01 c0 47 	movl   $0xc000cb47,0xc0011c78
c00019c6:	cb 00 c0 
/work/x86_os_my/kernel/interrupt.c:132
	intr_name[7] = "#NM Device Not Available Exception";
c00019c9:	c7 05 7c 1c 01 c0 64 	movl   $0xc000cb64,0xc0011c7c
c00019d0:	cb 00 c0 
/work/x86_os_my/kernel/interrupt.c:133
	intr_name[8] = "#DF Double Fault Exception";
c00019d3:	c7 05 80 1c 01 c0 87 	movl   $0xc000cb87,0xc0011c80
c00019da:	cb 00 c0 
/work/x86_os_my/kernel/interrupt.c:134
	intr_name[9] = "Coprocessor Segment Overrun";
c00019dd:	c7 05 84 1c 01 c0 a2 	movl   $0xc000cba2,0xc0011c84
c00019e4:	cb 00 c0 
/work/x86_os_my/kernel/interrupt.c:135
	intr_name[10] = "#TS Invalid TSS Exception";
c00019e7:	c7 05 88 1c 01 c0 be 	movl   $0xc000cbbe,0xc0011c88
c00019ee:	cb 00 c0 
/work/x86_os_my/kernel/interrupt.c:136
	intr_name[11] = "#NP Segment Not Present";
c00019f1:	c7 05 8c 1c 01 c0 d8 	movl   $0xc000cbd8,0xc0011c8c
c00019f8:	cb 00 c0 
/work/x86_os_my/kernel/interrupt.c:137
	intr_name[12] = "#SS Stack Fault Exception";
c00019fb:	c7 05 90 1c 01 c0 f0 	movl   $0xc000cbf0,0xc0011c90
c0001a02:	cb 00 c0 
/work/x86_os_my/kernel/interrupt.c:138
	intr_name[13] = "#GP General Protection Exception";
c0001a05:	c7 05 94 1c 01 c0 0c 	movl   $0xc000cc0c,0xc0011c94
c0001a0c:	cc 00 c0 
/work/x86_os_my/kernel/interrupt.c:139
	intr_name[14] = "#PF Page-Fault Exception";
c0001a0f:	c7 05 98 1c 01 c0 2d 	movl   $0xc000cc2d,0xc0011c98
c0001a16:	cc 00 c0 
/work/x86_os_my/kernel/interrupt.c:141
	// intr_name[15] 第15项是intel保留项，未使用
	intr_name[16] = "#MF x87 FPU Floating-Point Error";
c0001a19:	c7 05 a0 1c 01 c0 48 	movl   $0xc000cc48,0xc0011ca0
c0001a20:	cc 00 c0 
/work/x86_os_my/kernel/interrupt.c:142
	intr_name[17] = "#AC Alignment Check Exception";
c0001a23:	c7 05 a4 1c 01 c0 69 	movl   $0xc000cc69,0xc0011ca4
c0001a2a:	cc 00 c0 
/work/x86_os_my/kernel/interrupt.c:143
	intr_name[18] = "#MC Machine-Check Exception";
c0001a2d:	c7 05 a8 1c 01 c0 87 	movl   $0xc000cc87,0xc0011ca8
c0001a34:	cc 00 c0 
/work/x86_os_my/kernel/interrupt.c:144
	intr_name[19] = "#XF SIMD Floating-Point Exception";
c0001a37:	c7 05 ac 1c 01 c0 a4 	movl   $0xc000cca4,0xc0011cac
c0001a3e:	cc 00 c0 
/work/x86_os_my/kernel/interrupt.c:145
}
c0001a41:	90                   	nop
c0001a42:	c9                   	leave  
c0001a43:	c3                   	ret    

c0001a44 <intr_enable>:
intr_enable():
/work/x86_os_my/kernel/interrupt.c:148

/* 开中断并返回开中断前的状态*/
enum intr_status intr_enable() {
c0001a44:	55                   	push   %ebp
c0001a45:	89 e5                	mov    %esp,%ebp
c0001a47:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/interrupt.c:150
	enum intr_status old_status;
	if (INTR_ON == intr_get_status()) {
c0001a4a:	e8 65 00 00 00       	call   c0001ab4 <intr_get_status>
c0001a4f:	83 f8 01             	cmp    $0x1,%eax
c0001a52:	75 0c                	jne    c0001a60 <intr_enable+0x1c>
/work/x86_os_my/kernel/interrupt.c:151
		old_status = INTR_ON;
c0001a54:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:152
		return old_status;
c0001a5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001a5e:	eb 0b                	jmp    c0001a6b <intr_enable+0x27>
/work/x86_os_my/kernel/interrupt.c:154
	} else {
		old_status = INTR_OFF;
c0001a60:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:155
		asm volatile("sti");	 // 开中断,sti指令将IF位置1
c0001a67:	fb                   	sti    
/work/x86_os_my/kernel/interrupt.c:156
		return old_status;
c0001a68:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/kernel/interrupt.c:158
	}
}
c0001a6b:	c9                   	leave  
c0001a6c:	c3                   	ret    

c0001a6d <intr_disable>:
intr_disable():
/work/x86_os_my/kernel/interrupt.c:161

/* 关中断,并且返回关中断前的状态 */
enum intr_status intr_disable() {     
c0001a6d:	55                   	push   %ebp
c0001a6e:	89 e5                	mov    %esp,%ebp
c0001a70:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/interrupt.c:163
	enum intr_status old_status;
	if (INTR_ON == intr_get_status()) {
c0001a73:	e8 3c 00 00 00       	call   c0001ab4 <intr_get_status>
c0001a78:	83 f8 01             	cmp    $0x1,%eax
c0001a7b:	75 0d                	jne    c0001a8a <intr_disable+0x1d>
/work/x86_os_my/kernel/interrupt.c:164
		old_status = INTR_ON;
c0001a7d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:165
		asm volatile("cli" : : : "memory"); // 关中断,cli指令将IF位置0
c0001a84:	fa                   	cli    
/work/x86_os_my/kernel/interrupt.c:166
		return old_status;
c0001a85:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001a88:	eb 0a                	jmp    c0001a94 <intr_disable+0x27>
/work/x86_os_my/kernel/interrupt.c:168
	} else {
		old_status = INTR_OFF;
c0001a8a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:169
		return old_status;
c0001a91:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/kernel/interrupt.c:171
	}
}
c0001a94:	c9                   	leave  
c0001a95:	c3                   	ret    

c0001a96 <intr_set_status>:
intr_set_status():
/work/x86_os_my/kernel/interrupt.c:174

/* 将中断状态设置为status */
enum intr_status intr_set_status(enum intr_status status) {
c0001a96:	55                   	push   %ebp
c0001a97:	89 e5                	mov    %esp,%ebp
c0001a99:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:175
	return status & INTR_ON ? intr_enable() : intr_disable();
c0001a9c:	8b 45 08             	mov    0x8(%ebp),%eax
c0001a9f:	83 e0 01             	and    $0x1,%eax
c0001aa2:	85 c0                	test   %eax,%eax
c0001aa4:	74 07                	je     c0001aad <intr_set_status+0x17>
/work/x86_os_my/kernel/interrupt.c:175 (discriminator 1)
c0001aa6:	e8 99 ff ff ff       	call   c0001a44 <intr_enable>
c0001aab:	eb 05                	jmp    c0001ab2 <intr_set_status+0x1c>
/work/x86_os_my/kernel/interrupt.c:175 (discriminator 2)
c0001aad:	e8 bb ff ff ff       	call   c0001a6d <intr_disable>
/work/x86_os_my/kernel/interrupt.c:176 (discriminator 5)
}
c0001ab2:	c9                   	leave  
c0001ab3:	c3                   	ret    

c0001ab4 <intr_get_status>:
intr_get_status():
/work/x86_os_my/kernel/interrupt.c:179

/* 获取当前中断状态 */
enum intr_status intr_get_status() {
c0001ab4:	55                   	push   %ebp
c0001ab5:	89 e5                	mov    %esp,%ebp
c0001ab7:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:180
	uint32_t eflags = 0; 
c0001aba:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
/work/x86_os_my/kernel/interrupt.c:181
	GET_EFLAGS(eflags);
c0001ac1:	9c                   	pushf  
c0001ac2:	58                   	pop    %eax
c0001ac3:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/kernel/interrupt.c:182
	return (EFLAGS_IF & eflags) ? INTR_ON : INTR_OFF;
c0001ac6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0001ac9:	25 00 02 00 00       	and    $0x200,%eax
c0001ace:	85 c0                	test   %eax,%eax
c0001ad0:	0f 95 c0             	setne  %al
c0001ad3:	0f b6 c0             	movzbl %al,%eax
/work/x86_os_my/kernel/interrupt.c:183
}
c0001ad6:	c9                   	leave  
c0001ad7:	c3                   	ret    

c0001ad8 <register_handler>:
register_handler():
/work/x86_os_my/kernel/interrupt.c:186

/* 在中断处理程序数组第vector_no个元素中注册安装中断处理程序function */
void register_handler(uint8_t vector_no, intr_handler function) {
c0001ad8:	55                   	push   %ebp
c0001ad9:	89 e5                	mov    %esp,%ebp
c0001adb:	83 ec 04             	sub    $0x4,%esp
c0001ade:	8b 45 08             	mov    0x8(%ebp),%eax
c0001ae1:	88 45 fc             	mov    %al,-0x4(%ebp)
/work/x86_os_my/kernel/interrupt.c:189
/* idt_table数组中的函数是在进入中断后根据中断向量号调用的,
 * 见kernel/kernel.S的call [idt_table + %1*4] */
   idt_table[vector_no] = function; 
c0001ae4:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c0001ae8:	8b 55 0c             	mov    0xc(%ebp),%edx
c0001aeb:	89 14 85 80 1e 01 c0 	mov    %edx,-0x3ffee180(,%eax,4)
/work/x86_os_my/kernel/interrupt.c:190
}
c0001af2:	90                   	nop
c0001af3:	c9                   	leave  
c0001af4:	c3                   	ret    

c0001af5 <idt_init>:
idt_init():
/work/x86_os_my/kernel/interrupt.c:193

/*完成有关中断的所有初始化工作*/
void idt_init() {
c0001af5:	55                   	push   %ebp
c0001af6:	89 e5                	mov    %esp,%ebp
c0001af8:	56                   	push   %esi
c0001af9:	53                   	push   %ebx
c0001afa:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:194
	put_str("idt_init start\n");
c0001afd:	83 ec 0c             	sub    $0xc,%esp
c0001b00:	68 c6 cc 00 c0       	push   $0xc000ccc6
c0001b05:	e8 96 07 00 00       	call   c00022a0 <put_str>
c0001b0a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:195
	idt_desc_init();	// 初始化中断描述符表
c0001b0d:	e8 e8 fc ff ff       	call   c00017fa <idt_desc_init>
/work/x86_os_my/kernel/interrupt.c:196
	exception_init();	// 异常名初始化并注册通常的中断处理函数
c0001b12:	e8 34 fe ff ff       	call   c000194b <exception_init>
/work/x86_os_my/kernel/interrupt.c:197
	pic_init();			// 初始化8259A
c0001b17:	e8 f5 fb ff ff       	call   c0001711 <pic_init>
/work/x86_os_my/kernel/interrupt.c:201

	/* 加载idt */
	// IDTR 是 48 位的寄存器，低 16 位是 IDT 的界限 = IDT 尺寸大小-1，高 32 位是 IDT 的线性基地址
	uint64_t idt_operand = ((sizeof(idt) - 1) | ((uint64_t)(uint32_t)idt << 16));
c0001b1c:	b8 60 11 01 c0       	mov    $0xc0011160,%eax
c0001b21:	ba 00 00 00 00       	mov    $0x0,%edx
c0001b26:	0f a4 c2 10          	shld   $0x10,%eax,%edx
c0001b2a:	c1 e0 10             	shl    $0x10,%eax
c0001b2d:	89 c1                	mov    %eax,%ecx
c0001b2f:	81 c9 07 04 00 00    	or     $0x407,%ecx
c0001b35:	89 cb                	mov    %ecx,%ebx
c0001b37:	89 d0                	mov    %edx,%eax
c0001b39:	80 cc 00             	or     $0x0,%ah
c0001b3c:	89 c6                	mov    %eax,%esi
c0001b3e:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c0001b41:	89 75 f4             	mov    %esi,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:202
	asm volatile("lidt %0" : : "m" (idt_operand));
c0001b44:	0f 01 5d f0          	lidtl  -0x10(%ebp)
/work/x86_os_my/kernel/interrupt.c:203
	put_str("idt_init done\n");
c0001b48:	83 ec 0c             	sub    $0xc,%esp
c0001b4b:	68 d6 cc 00 c0       	push   $0xc000ccd6
c0001b50:	e8 4b 07 00 00       	call   c00022a0 <put_str>
c0001b55:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:204
}
c0001b58:	90                   	nop
c0001b59:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0001b5c:	5b                   	pop    %ebx
c0001b5d:	5e                   	pop    %esi
c0001b5e:	5d                   	pop    %ebp
c0001b5f:	c3                   	ret    

c0001b60 <outb>:
outb():
/work/x86_os_my/lib/kernel/io.h:17
#define __LIB_IO_H
#include "stdint.h"
//inline省去了函数调用开支

/* 向端口port写入一个字节*/
static inline void outb(uint16_t port, uint8_t data) {
c0001b60:	55                   	push   %ebp
c0001b61:	89 e5                	mov    %esp,%ebp
c0001b63:	83 ec 08             	sub    $0x8,%esp
c0001b66:	8b 55 08             	mov    0x8(%ebp),%edx
c0001b69:	8b 45 0c             	mov    0xc(%ebp),%eax
c0001b6c:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c0001b70:	88 45 f8             	mov    %al,-0x8(%ebp)
/work/x86_os_my/lib/kernel/io.h:21
/*********************************************************
 a表示用寄存器al或ax或eax,对端口指定N表示0~255, d表示用dx存储端口号, 
 %b0表示对应al,%w1表示对应dx */ 
   asm volatile ( "outb %b0, %w1" : : "a" (data), "Nd" (port));    
c0001b73:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c0001b77:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0001b7b:	ee                   	out    %al,(%dx)
/work/x86_os_my/lib/kernel/io.h:23
/******************************************************/
}
c0001b7c:	90                   	nop
c0001b7d:	c9                   	leave  
c0001b7e:	c3                   	ret    

c0001b7f <frequency_set>:
frequency_set():
/work/x86_os_my/device/timer.c:27
/* 把操作的计数器counter_no、读写锁属性rwl、计数器模式counter_mode写入模式控制寄存器并赋予初始值counter_value */
static void frequency_set(uint8_t counter_port, \
		uint8_t counter_no, \
		uint8_t rwl, \
		uint8_t counter_mode, \
		uint16_t counter_value) {
c0001b7f:	55                   	push   %ebp
c0001b80:	89 e5                	mov    %esp,%ebp
c0001b82:	56                   	push   %esi
c0001b83:	53                   	push   %ebx
c0001b84:	83 ec 14             	sub    $0x14,%esp
c0001b87:	8b 45 08             	mov    0x8(%ebp),%eax
c0001b8a:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c0001b8d:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0001b90:	8b 55 14             	mov    0x14(%ebp),%edx
c0001b93:	8b 75 18             	mov    0x18(%ebp),%esi
c0001b96:	88 45 f4             	mov    %al,-0xc(%ebp)
c0001b99:	88 5d f0             	mov    %bl,-0x10(%ebp)
c0001b9c:	88 4d ec             	mov    %cl,-0x14(%ebp)
c0001b9f:	88 55 e8             	mov    %dl,-0x18(%ebp)
c0001ba2:	66 89 75 e4          	mov    %si,-0x1c(%ebp)
/work/x86_os_my/device/timer.c:29
	/* 往控制字寄存器端口0x43中写入控制字 */
	outb(PIT_CONTROL_PORT, (uint8_t)(counter_no << 6 | rwl << 4 | counter_mode << 1));
c0001ba6:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c0001baa:	c1 e0 06             	shl    $0x6,%eax
c0001bad:	89 c2                	mov    %eax,%edx
c0001baf:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0001bb3:	c1 e0 04             	shl    $0x4,%eax
c0001bb6:	09 c2                	or     %eax,%edx
c0001bb8:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c0001bbc:	01 c0                	add    %eax,%eax
c0001bbe:	09 d0                	or     %edx,%eax
c0001bc0:	0f b6 c0             	movzbl %al,%eax
c0001bc3:	50                   	push   %eax
c0001bc4:	6a 43                	push   $0x43
c0001bc6:	e8 95 ff ff ff       	call   c0001b60 <outb>
c0001bcb:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/timer.c:31
	/* 先写入counter_value的低8位 */
	outb(counter_port, (uint8_t)counter_value);
c0001bce:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
c0001bd2:	0f b6 d0             	movzbl %al,%edx
c0001bd5:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0001bd9:	52                   	push   %edx
c0001bda:	50                   	push   %eax
c0001bdb:	e8 80 ff ff ff       	call   c0001b60 <outb>
c0001be0:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/timer.c:33
	/* 再写入counter_value的高8位 */
	outb(counter_port, (uint8_t)counter_value >> 8);
c0001be3:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0001be7:	6a 00                	push   $0x0
c0001be9:	50                   	push   %eax
c0001bea:	e8 71 ff ff ff       	call   c0001b60 <outb>
c0001bef:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/timer.c:34
}
c0001bf2:	90                   	nop
c0001bf3:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0001bf6:	5b                   	pop    %ebx
c0001bf7:	5e                   	pop    %esi
c0001bf8:	5d                   	pop    %ebp
c0001bf9:	c3                   	ret    

c0001bfa <intr_timer_handler>:
intr_timer_handler():
/work/x86_os_my/device/timer.c:37

/* 时钟的中断处理函数 */
static void intr_timer_handler(void) {
c0001bfa:	55                   	push   %ebp
c0001bfb:	89 e5                	mov    %esp,%ebp
c0001bfd:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/timer.c:38
	struct task_struct* cur_thread = running_thread();		// 返回线程PCB
c0001c00:	e8 d5 20 00 00       	call   c0003cda <running_thread>
c0001c05:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/timer.c:40

	ASSERT(cur_thread->stack_magic == 0x19870916);			// 检查栈是否溢出
c0001c08:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001c0b:	8b 80 14 01 00 00    	mov    0x114(%eax),%eax
c0001c11:	3d 16 09 87 19       	cmp    $0x19870916,%eax
c0001c16:	74 19                	je     c0001c31 <intr_timer_handler+0x37>
/work/x86_os_my/device/timer.c:40 (discriminator 1)
c0001c18:	68 e8 cc 00 c0       	push   $0xc000cce8
c0001c1d:	68 50 cd 00 c0       	push   $0xc000cd50
c0001c22:	6a 28                	push   $0x28
c0001c24:	68 0e cd 00 c0       	push   $0xc000cd0e
c0001c29:	e8 23 08 00 00       	call   c0002451 <panic_spin>
c0001c2e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:42

	cur_thread->elapsed_ticks++;// 记录此线程占用的cpu时间
c0001c31:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001c34:	8b 40 20             	mov    0x20(%eax),%eax
c0001c37:	8d 50 01             	lea    0x1(%eax),%edx
c0001c3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001c3d:	89 50 20             	mov    %edx,0x20(%eax)
/work/x86_os_my/device/timer.c:43
	ticks++;	//从内核第一次处理时间中断开始,至今的滴哒数,是内核态和用户态总共的嘀哒数
c0001c40:	a1 84 20 01 c0       	mov    0xc0012084,%eax
c0001c45:	83 c0 01             	add    $0x1,%eax
c0001c48:	a3 84 20 01 c0       	mov    %eax,0xc0012084
/work/x86_os_my/device/timer.c:45

	if (cur_thread->ticks == 0) {
c0001c4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001c50:	0f b6 40 1d          	movzbl 0x1d(%eax),%eax
c0001c54:	84 c0                	test   %al,%al
c0001c56:	75 07                	jne    c0001c5f <intr_timer_handler+0x65>
/work/x86_os_my/device/timer.c:46
		schedule();				// 若进程时间片用完就开始调度新的进程上cpu
c0001c58:	e8 d3 23 00 00       	call   c0004030 <schedule>
/work/x86_os_my/device/timer.c:50
	} else {
		cur_thread->ticks--;	// 将当前进程的时间片-1
	}
}
c0001c5d:	eb 10                	jmp    c0001c6f <intr_timer_handler+0x75>
/work/x86_os_my/device/timer.c:48
	ticks++;	//从内核第一次处理时间中断开始,至今的滴哒数,是内核态和用户态总共的嘀哒数

	if (cur_thread->ticks == 0) {
		schedule();				// 若进程时间片用完就开始调度新的进程上cpu
	} else {
		cur_thread->ticks--;	// 将当前进程的时间片-1
c0001c5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001c62:	0f b6 40 1d          	movzbl 0x1d(%eax),%eax
c0001c66:	8d 50 ff             	lea    -0x1(%eax),%edx
c0001c69:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001c6c:	88 50 1d             	mov    %dl,0x1d(%eax)
/work/x86_os_my/device/timer.c:50
	}
}
c0001c6f:	90                   	nop
c0001c70:	c9                   	leave  
c0001c71:	c3                   	ret    

c0001c72 <ticks_to_sleep>:
ticks_to_sleep():
/work/x86_os_my/device/timer.c:53

/* 以tick为单位的sleep,任何时间形式的sleep会转换此ticks形式 */
static void ticks_to_sleep(uint32_t sleep_ticks) {
c0001c72:	55                   	push   %ebp
c0001c73:	89 e5                	mov    %esp,%ebp
c0001c75:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/timer.c:54
	uint32_t start_tick = ticks;
c0001c78:	a1 84 20 01 c0       	mov    0xc0012084,%eax
c0001c7d:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/timer.c:57

	/* 若间隔的ticks数不够便让出cpu */
	while (ticks - start_tick < sleep_ticks) {
c0001c80:	eb 05                	jmp    c0001c87 <ticks_to_sleep+0x15>
/work/x86_os_my/device/timer.c:58
		thread_yield();
c0001c82:	e8 53 26 00 00       	call   c00042da <thread_yield>
/work/x86_os_my/device/timer.c:57
/* 以tick为单位的sleep,任何时间形式的sleep会转换此ticks形式 */
static void ticks_to_sleep(uint32_t sleep_ticks) {
	uint32_t start_tick = ticks;

	/* 若间隔的ticks数不够便让出cpu */
	while (ticks - start_tick < sleep_ticks) {
c0001c87:	a1 84 20 01 c0       	mov    0xc0012084,%eax
c0001c8c:	2b 45 f4             	sub    -0xc(%ebp),%eax
c0001c8f:	3b 45 08             	cmp    0x8(%ebp),%eax
c0001c92:	72 ee                	jb     c0001c82 <ticks_to_sleep+0x10>
/work/x86_os_my/device/timer.c:60
		thread_yield();
	}
}
c0001c94:	90                   	nop
c0001c95:	c9                   	leave  
c0001c96:	c3                   	ret    

c0001c97 <mtime_sleep>:
mtime_sleep():
/work/x86_os_my/device/timer.c:62

void mtime_sleep(uint32_t m_seconds) {
c0001c97:	55                   	push   %ebp
c0001c98:	89 e5                	mov    %esp,%ebp
c0001c9a:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/timer.c:63
	uint32_t sleep_ticks = DIV_ROUND_UP(m_seconds, mil_seconds_per_intr);
c0001c9d:	8b 45 08             	mov    0x8(%ebp),%eax
c0001ca0:	83 c0 09             	add    $0x9,%eax
c0001ca3:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
c0001ca8:	f7 e2                	mul    %edx
c0001caa:	89 d0                	mov    %edx,%eax
c0001cac:	c1 e8 03             	shr    $0x3,%eax
c0001caf:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/timer.c:64
	ASSERT(sleep_ticks > 0);
c0001cb2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0001cb6:	75 19                	jne    c0001cd1 <mtime_sleep+0x3a>
/work/x86_os_my/device/timer.c:64 (discriminator 1)
c0001cb8:	68 1d cd 00 c0       	push   $0xc000cd1d
c0001cbd:	68 64 cd 00 c0       	push   $0xc000cd64
c0001cc2:	6a 40                	push   $0x40
c0001cc4:	68 0e cd 00 c0       	push   $0xc000cd0e
c0001cc9:	e8 83 07 00 00       	call   c0002451 <panic_spin>
c0001cce:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:65
	ticks_to_sleep(sleep_ticks); 
c0001cd1:	83 ec 0c             	sub    $0xc,%esp
c0001cd4:	ff 75 f4             	pushl  -0xc(%ebp)
c0001cd7:	e8 96 ff ff ff       	call   c0001c72 <ticks_to_sleep>
c0001cdc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:66
}
c0001cdf:	90                   	nop
c0001ce0:	c9                   	leave  
c0001ce1:	c3                   	ret    

c0001ce2 <timer_init>:
timer_init():
/work/x86_os_my/device/timer.c:69

/* 初始化PIT8253 */
void timer_init() {
c0001ce2:	55                   	push   %ebp
c0001ce3:	89 e5                	mov    %esp,%ebp
c0001ce5:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/timer.c:70
	put_str("timer_init start\n");
c0001ce8:	83 ec 0c             	sub    $0xc,%esp
c0001ceb:	68 2d cd 00 c0       	push   $0xc000cd2d
c0001cf0:	e8 ab 05 00 00       	call   c00022a0 <put_str>
c0001cf5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:72
	/* 设置8253的定时周期,也就是发中断的周期 */
	frequency_set(CONTRER0_PORT, COUNTER0_NO, READ_WRITE_LATCH, COUNTER_MODE, COUNTER0_VALUE);
c0001cf8:	83 ec 0c             	sub    $0xc,%esp
c0001cfb:	68 9b 2e 00 00       	push   $0x2e9b
c0001d00:	6a 02                	push   $0x2
c0001d02:	6a 03                	push   $0x3
c0001d04:	6a 00                	push   $0x0
c0001d06:	6a 40                	push   $0x40
c0001d08:	e8 72 fe ff ff       	call   c0001b7f <frequency_set>
c0001d0d:	83 c4 20             	add    $0x20,%esp
/work/x86_os_my/device/timer.c:73
	register_handler(0x20, intr_timer_handler);
c0001d10:	83 ec 08             	sub    $0x8,%esp
c0001d13:	68 fa 1b 00 c0       	push   $0xc0001bfa
c0001d18:	6a 20                	push   $0x20
c0001d1a:	e8 b9 fd ff ff       	call   c0001ad8 <register_handler>
c0001d1f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:74
	put_str("timer_init done\n");
c0001d22:	83 ec 0c             	sub    $0xc,%esp
c0001d25:	68 3f cd 00 c0       	push   $0xc000cd3f
c0001d2a:	e8 71 05 00 00       	call   c00022a0 <put_str>
c0001d2f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:75
}
c0001d32:	90                   	nop
c0001d33:	c9                   	leave  
c0001d34:	c3                   	ret    
c0001d35:	66 90                	xchg   %ax,%ax
c0001d37:	66 90                	xchg   %ax,%ax
c0001d39:	66 90                	xchg   %ax,%ax
c0001d3b:	66 90                	xchg   %ax,%ax
c0001d3d:	66 90                	xchg   %ax,%ax
c0001d3f:	90                   	nop

c0001d40 <intr_exit>:
intr_exit():
c0001d40:	83 c4 04             	add    $0x4,%esp
c0001d43:	61                   	popa   
c0001d44:	0f a9                	pop    %gs
c0001d46:	0f a1                	pop    %fs
c0001d48:	07                   	pop    %es
c0001d49:	1f                   	pop    %ds
c0001d4a:	83 c4 04             	add    $0x4,%esp
c0001d4d:	cf                   	iret   

c0001d4e <intr0x00entry>:
intr0x00entry():
c0001d4e:	6a 00                	push   $0x0
c0001d50:	1e                   	push   %ds
c0001d51:	06                   	push   %es
c0001d52:	0f a0                	push   %fs
c0001d54:	0f a8                	push   %gs
c0001d56:	60                   	pusha  
c0001d57:	b0 20                	mov    $0x20,%al
c0001d59:	e6 a0                	out    %al,$0xa0
c0001d5b:	e6 20                	out    %al,$0x20
c0001d5d:	6a 00                	push   $0x0
c0001d5f:	ff 15 80 1e 01 c0    	call   *0xc0011e80
c0001d65:	eb d9                	jmp    c0001d40 <intr_exit>

c0001d67 <intr0x01entry>:
intr0x01entry():
c0001d67:	6a 00                	push   $0x0
c0001d69:	1e                   	push   %ds
c0001d6a:	06                   	push   %es
c0001d6b:	0f a0                	push   %fs
c0001d6d:	0f a8                	push   %gs
c0001d6f:	60                   	pusha  
c0001d70:	b0 20                	mov    $0x20,%al
c0001d72:	e6 a0                	out    %al,$0xa0
c0001d74:	e6 20                	out    %al,$0x20
c0001d76:	6a 01                	push   $0x1
c0001d78:	ff 15 84 1e 01 c0    	call   *0xc0011e84
c0001d7e:	eb c0                	jmp    c0001d40 <intr_exit>

c0001d80 <intr0x02entry>:
intr0x02entry():
c0001d80:	6a 00                	push   $0x0
c0001d82:	1e                   	push   %ds
c0001d83:	06                   	push   %es
c0001d84:	0f a0                	push   %fs
c0001d86:	0f a8                	push   %gs
c0001d88:	60                   	pusha  
c0001d89:	b0 20                	mov    $0x20,%al
c0001d8b:	e6 a0                	out    %al,$0xa0
c0001d8d:	e6 20                	out    %al,$0x20
c0001d8f:	6a 02                	push   $0x2
c0001d91:	ff 15 88 1e 01 c0    	call   *0xc0011e88
c0001d97:	eb a7                	jmp    c0001d40 <intr_exit>

c0001d99 <intr0x03entry>:
intr0x03entry():
c0001d99:	6a 00                	push   $0x0
c0001d9b:	1e                   	push   %ds
c0001d9c:	06                   	push   %es
c0001d9d:	0f a0                	push   %fs
c0001d9f:	0f a8                	push   %gs
c0001da1:	60                   	pusha  
c0001da2:	b0 20                	mov    $0x20,%al
c0001da4:	e6 a0                	out    %al,$0xa0
c0001da6:	e6 20                	out    %al,$0x20
c0001da8:	6a 03                	push   $0x3
c0001daa:	ff 15 8c 1e 01 c0    	call   *0xc0011e8c
c0001db0:	eb 8e                	jmp    c0001d40 <intr_exit>

c0001db2 <intr0x04entry>:
intr0x04entry():
c0001db2:	6a 00                	push   $0x0
c0001db4:	1e                   	push   %ds
c0001db5:	06                   	push   %es
c0001db6:	0f a0                	push   %fs
c0001db8:	0f a8                	push   %gs
c0001dba:	60                   	pusha  
c0001dbb:	b0 20                	mov    $0x20,%al
c0001dbd:	e6 a0                	out    %al,$0xa0
c0001dbf:	e6 20                	out    %al,$0x20
c0001dc1:	6a 04                	push   $0x4
c0001dc3:	ff 15 90 1e 01 c0    	call   *0xc0011e90
c0001dc9:	e9 72 ff ff ff       	jmp    c0001d40 <intr_exit>

c0001dce <intr0x05entry>:
intr0x05entry():
c0001dce:	6a 00                	push   $0x0
c0001dd0:	1e                   	push   %ds
c0001dd1:	06                   	push   %es
c0001dd2:	0f a0                	push   %fs
c0001dd4:	0f a8                	push   %gs
c0001dd6:	60                   	pusha  
c0001dd7:	b0 20                	mov    $0x20,%al
c0001dd9:	e6 a0                	out    %al,$0xa0
c0001ddb:	e6 20                	out    %al,$0x20
c0001ddd:	6a 05                	push   $0x5
c0001ddf:	ff 15 94 1e 01 c0    	call   *0xc0011e94
c0001de5:	e9 56 ff ff ff       	jmp    c0001d40 <intr_exit>

c0001dea <intr0x06entry>:
intr0x06entry():
c0001dea:	6a 00                	push   $0x0
c0001dec:	1e                   	push   %ds
c0001ded:	06                   	push   %es
c0001dee:	0f a0                	push   %fs
c0001df0:	0f a8                	push   %gs
c0001df2:	60                   	pusha  
c0001df3:	b0 20                	mov    $0x20,%al
c0001df5:	e6 a0                	out    %al,$0xa0
c0001df7:	e6 20                	out    %al,$0x20
c0001df9:	6a 06                	push   $0x6
c0001dfb:	ff 15 98 1e 01 c0    	call   *0xc0011e98
c0001e01:	e9 3a ff ff ff       	jmp    c0001d40 <intr_exit>

c0001e06 <intr0x07entry>:
intr0x07entry():
c0001e06:	6a 00                	push   $0x0
c0001e08:	1e                   	push   %ds
c0001e09:	06                   	push   %es
c0001e0a:	0f a0                	push   %fs
c0001e0c:	0f a8                	push   %gs
c0001e0e:	60                   	pusha  
c0001e0f:	b0 20                	mov    $0x20,%al
c0001e11:	e6 a0                	out    %al,$0xa0
c0001e13:	e6 20                	out    %al,$0x20
c0001e15:	6a 07                	push   $0x7
c0001e17:	ff 15 9c 1e 01 c0    	call   *0xc0011e9c
c0001e1d:	e9 1e ff ff ff       	jmp    c0001d40 <intr_exit>

c0001e22 <intr0x08entry>:
intr0x08entry():
c0001e22:	90                   	nop
c0001e23:	1e                   	push   %ds
c0001e24:	06                   	push   %es
c0001e25:	0f a0                	push   %fs
c0001e27:	0f a8                	push   %gs
c0001e29:	60                   	pusha  
c0001e2a:	b0 20                	mov    $0x20,%al
c0001e2c:	e6 a0                	out    %al,$0xa0
c0001e2e:	e6 20                	out    %al,$0x20
c0001e30:	6a 08                	push   $0x8
c0001e32:	ff 15 a0 1e 01 c0    	call   *0xc0011ea0
c0001e38:	e9 03 ff ff ff       	jmp    c0001d40 <intr_exit>

c0001e3d <intr0x09entry>:
intr0x09entry():
c0001e3d:	6a 00                	push   $0x0
c0001e3f:	1e                   	push   %ds
c0001e40:	06                   	push   %es
c0001e41:	0f a0                	push   %fs
c0001e43:	0f a8                	push   %gs
c0001e45:	60                   	pusha  
c0001e46:	b0 20                	mov    $0x20,%al
c0001e48:	e6 a0                	out    %al,$0xa0
c0001e4a:	e6 20                	out    %al,$0x20
c0001e4c:	6a 09                	push   $0x9
c0001e4e:	ff 15 a4 1e 01 c0    	call   *0xc0011ea4
c0001e54:	e9 e7 fe ff ff       	jmp    c0001d40 <intr_exit>

c0001e59 <intr0x0aentry>:
intr0x0aentry():
c0001e59:	90                   	nop
c0001e5a:	1e                   	push   %ds
c0001e5b:	06                   	push   %es
c0001e5c:	0f a0                	push   %fs
c0001e5e:	0f a8                	push   %gs
c0001e60:	60                   	pusha  
c0001e61:	b0 20                	mov    $0x20,%al
c0001e63:	e6 a0                	out    %al,$0xa0
c0001e65:	e6 20                	out    %al,$0x20
c0001e67:	6a 0a                	push   $0xa
c0001e69:	ff 15 a8 1e 01 c0    	call   *0xc0011ea8
c0001e6f:	e9 cc fe ff ff       	jmp    c0001d40 <intr_exit>

c0001e74 <intr0x0bentry>:
intr0x0bentry():
c0001e74:	90                   	nop
c0001e75:	1e                   	push   %ds
c0001e76:	06                   	push   %es
c0001e77:	0f a0                	push   %fs
c0001e79:	0f a8                	push   %gs
c0001e7b:	60                   	pusha  
c0001e7c:	b0 20                	mov    $0x20,%al
c0001e7e:	e6 a0                	out    %al,$0xa0
c0001e80:	e6 20                	out    %al,$0x20
c0001e82:	6a 0b                	push   $0xb
c0001e84:	ff 15 ac 1e 01 c0    	call   *0xc0011eac
c0001e8a:	e9 b1 fe ff ff       	jmp    c0001d40 <intr_exit>

c0001e8f <intr0x0centry>:
intr0x0centry():
c0001e8f:	6a 00                	push   $0x0
c0001e91:	1e                   	push   %ds
c0001e92:	06                   	push   %es
c0001e93:	0f a0                	push   %fs
c0001e95:	0f a8                	push   %gs
c0001e97:	60                   	pusha  
c0001e98:	b0 20                	mov    $0x20,%al
c0001e9a:	e6 a0                	out    %al,$0xa0
c0001e9c:	e6 20                	out    %al,$0x20
c0001e9e:	6a 0c                	push   $0xc
c0001ea0:	ff 15 b0 1e 01 c0    	call   *0xc0011eb0
c0001ea6:	e9 95 fe ff ff       	jmp    c0001d40 <intr_exit>

c0001eab <intr0x0dentry>:
intr0x0dentry():
c0001eab:	90                   	nop
c0001eac:	1e                   	push   %ds
c0001ead:	06                   	push   %es
c0001eae:	0f a0                	push   %fs
c0001eb0:	0f a8                	push   %gs
c0001eb2:	60                   	pusha  
c0001eb3:	b0 20                	mov    $0x20,%al
c0001eb5:	e6 a0                	out    %al,$0xa0
c0001eb7:	e6 20                	out    %al,$0x20
c0001eb9:	6a 0d                	push   $0xd
c0001ebb:	ff 15 b4 1e 01 c0    	call   *0xc0011eb4
c0001ec1:	e9 7a fe ff ff       	jmp    c0001d40 <intr_exit>

c0001ec6 <intr0x0eentry>:
intr0x0eentry():
c0001ec6:	90                   	nop
c0001ec7:	1e                   	push   %ds
c0001ec8:	06                   	push   %es
c0001ec9:	0f a0                	push   %fs
c0001ecb:	0f a8                	push   %gs
c0001ecd:	60                   	pusha  
c0001ece:	b0 20                	mov    $0x20,%al
c0001ed0:	e6 a0                	out    %al,$0xa0
c0001ed2:	e6 20                	out    %al,$0x20
c0001ed4:	6a 0e                	push   $0xe
c0001ed6:	ff 15 b8 1e 01 c0    	call   *0xc0011eb8
c0001edc:	e9 5f fe ff ff       	jmp    c0001d40 <intr_exit>

c0001ee1 <intr0x0fentry>:
intr0x0fentry():
c0001ee1:	6a 00                	push   $0x0
c0001ee3:	1e                   	push   %ds
c0001ee4:	06                   	push   %es
c0001ee5:	0f a0                	push   %fs
c0001ee7:	0f a8                	push   %gs
c0001ee9:	60                   	pusha  
c0001eea:	b0 20                	mov    $0x20,%al
c0001eec:	e6 a0                	out    %al,$0xa0
c0001eee:	e6 20                	out    %al,$0x20
c0001ef0:	6a 0f                	push   $0xf
c0001ef2:	ff 15 bc 1e 01 c0    	call   *0xc0011ebc
c0001ef8:	e9 43 fe ff ff       	jmp    c0001d40 <intr_exit>

c0001efd <intr0x10entry>:
intr0x10entry():
c0001efd:	6a 00                	push   $0x0
c0001eff:	1e                   	push   %ds
c0001f00:	06                   	push   %es
c0001f01:	0f a0                	push   %fs
c0001f03:	0f a8                	push   %gs
c0001f05:	60                   	pusha  
c0001f06:	b0 20                	mov    $0x20,%al
c0001f08:	e6 a0                	out    %al,$0xa0
c0001f0a:	e6 20                	out    %al,$0x20
c0001f0c:	6a 10                	push   $0x10
c0001f0e:	ff 15 c0 1e 01 c0    	call   *0xc0011ec0
c0001f14:	e9 27 fe ff ff       	jmp    c0001d40 <intr_exit>

c0001f19 <intr0x11entry>:
intr0x11entry():
c0001f19:	90                   	nop
c0001f1a:	1e                   	push   %ds
c0001f1b:	06                   	push   %es
c0001f1c:	0f a0                	push   %fs
c0001f1e:	0f a8                	push   %gs
c0001f20:	60                   	pusha  
c0001f21:	b0 20                	mov    $0x20,%al
c0001f23:	e6 a0                	out    %al,$0xa0
c0001f25:	e6 20                	out    %al,$0x20
c0001f27:	6a 11                	push   $0x11
c0001f29:	ff 15 c4 1e 01 c0    	call   *0xc0011ec4
c0001f2f:	e9 0c fe ff ff       	jmp    c0001d40 <intr_exit>

c0001f34 <intr0x12entry>:
intr0x12entry():
c0001f34:	6a 00                	push   $0x0
c0001f36:	1e                   	push   %ds
c0001f37:	06                   	push   %es
c0001f38:	0f a0                	push   %fs
c0001f3a:	0f a8                	push   %gs
c0001f3c:	60                   	pusha  
c0001f3d:	b0 20                	mov    $0x20,%al
c0001f3f:	e6 a0                	out    %al,$0xa0
c0001f41:	e6 20                	out    %al,$0x20
c0001f43:	6a 12                	push   $0x12
c0001f45:	ff 15 c8 1e 01 c0    	call   *0xc0011ec8
c0001f4b:	e9 f0 fd ff ff       	jmp    c0001d40 <intr_exit>

c0001f50 <intr0x13entry>:
intr0x13entry():
c0001f50:	6a 00                	push   $0x0
c0001f52:	1e                   	push   %ds
c0001f53:	06                   	push   %es
c0001f54:	0f a0                	push   %fs
c0001f56:	0f a8                	push   %gs
c0001f58:	60                   	pusha  
c0001f59:	b0 20                	mov    $0x20,%al
c0001f5b:	e6 a0                	out    %al,$0xa0
c0001f5d:	e6 20                	out    %al,$0x20
c0001f5f:	6a 13                	push   $0x13
c0001f61:	ff 15 cc 1e 01 c0    	call   *0xc0011ecc
c0001f67:	e9 d4 fd ff ff       	jmp    c0001d40 <intr_exit>

c0001f6c <intr0x14entry>:
intr0x14entry():
c0001f6c:	6a 00                	push   $0x0
c0001f6e:	1e                   	push   %ds
c0001f6f:	06                   	push   %es
c0001f70:	0f a0                	push   %fs
c0001f72:	0f a8                	push   %gs
c0001f74:	60                   	pusha  
c0001f75:	b0 20                	mov    $0x20,%al
c0001f77:	e6 a0                	out    %al,$0xa0
c0001f79:	e6 20                	out    %al,$0x20
c0001f7b:	6a 14                	push   $0x14
c0001f7d:	ff 15 d0 1e 01 c0    	call   *0xc0011ed0
c0001f83:	e9 b8 fd ff ff       	jmp    c0001d40 <intr_exit>

c0001f88 <intr0x15entry>:
intr0x15entry():
c0001f88:	6a 00                	push   $0x0
c0001f8a:	1e                   	push   %ds
c0001f8b:	06                   	push   %es
c0001f8c:	0f a0                	push   %fs
c0001f8e:	0f a8                	push   %gs
c0001f90:	60                   	pusha  
c0001f91:	b0 20                	mov    $0x20,%al
c0001f93:	e6 a0                	out    %al,$0xa0
c0001f95:	e6 20                	out    %al,$0x20
c0001f97:	6a 15                	push   $0x15
c0001f99:	ff 15 d4 1e 01 c0    	call   *0xc0011ed4
c0001f9f:	e9 9c fd ff ff       	jmp    c0001d40 <intr_exit>

c0001fa4 <intr0x16entry>:
intr0x16entry():
c0001fa4:	6a 00                	push   $0x0
c0001fa6:	1e                   	push   %ds
c0001fa7:	06                   	push   %es
c0001fa8:	0f a0                	push   %fs
c0001faa:	0f a8                	push   %gs
c0001fac:	60                   	pusha  
c0001fad:	b0 20                	mov    $0x20,%al
c0001faf:	e6 a0                	out    %al,$0xa0
c0001fb1:	e6 20                	out    %al,$0x20
c0001fb3:	6a 16                	push   $0x16
c0001fb5:	ff 15 d8 1e 01 c0    	call   *0xc0011ed8
c0001fbb:	e9 80 fd ff ff       	jmp    c0001d40 <intr_exit>

c0001fc0 <intr0x17entry>:
intr0x17entry():
c0001fc0:	6a 00                	push   $0x0
c0001fc2:	1e                   	push   %ds
c0001fc3:	06                   	push   %es
c0001fc4:	0f a0                	push   %fs
c0001fc6:	0f a8                	push   %gs
c0001fc8:	60                   	pusha  
c0001fc9:	b0 20                	mov    $0x20,%al
c0001fcb:	e6 a0                	out    %al,$0xa0
c0001fcd:	e6 20                	out    %al,$0x20
c0001fcf:	6a 17                	push   $0x17
c0001fd1:	ff 15 dc 1e 01 c0    	call   *0xc0011edc
c0001fd7:	e9 64 fd ff ff       	jmp    c0001d40 <intr_exit>

c0001fdc <intr0x18entry>:
intr0x18entry():
c0001fdc:	90                   	nop
c0001fdd:	1e                   	push   %ds
c0001fde:	06                   	push   %es
c0001fdf:	0f a0                	push   %fs
c0001fe1:	0f a8                	push   %gs
c0001fe3:	60                   	pusha  
c0001fe4:	b0 20                	mov    $0x20,%al
c0001fe6:	e6 a0                	out    %al,$0xa0
c0001fe8:	e6 20                	out    %al,$0x20
c0001fea:	6a 18                	push   $0x18
c0001fec:	ff 15 e0 1e 01 c0    	call   *0xc0011ee0
c0001ff2:	e9 49 fd ff ff       	jmp    c0001d40 <intr_exit>

c0001ff7 <intr0x19entry>:
intr0x19entry():
c0001ff7:	6a 00                	push   $0x0
c0001ff9:	1e                   	push   %ds
c0001ffa:	06                   	push   %es
c0001ffb:	0f a0                	push   %fs
c0001ffd:	0f a8                	push   %gs
c0001fff:	60                   	pusha  
c0002000:	b0 20                	mov    $0x20,%al
c0002002:	e6 a0                	out    %al,$0xa0
c0002004:	e6 20                	out    %al,$0x20
c0002006:	6a 19                	push   $0x19
c0002008:	ff 15 e4 1e 01 c0    	call   *0xc0011ee4
c000200e:	e9 2d fd ff ff       	jmp    c0001d40 <intr_exit>

c0002013 <intr0x1aentry>:
intr0x1aentry():
c0002013:	90                   	nop
c0002014:	1e                   	push   %ds
c0002015:	06                   	push   %es
c0002016:	0f a0                	push   %fs
c0002018:	0f a8                	push   %gs
c000201a:	60                   	pusha  
c000201b:	b0 20                	mov    $0x20,%al
c000201d:	e6 a0                	out    %al,$0xa0
c000201f:	e6 20                	out    %al,$0x20
c0002021:	6a 1a                	push   $0x1a
c0002023:	ff 15 e8 1e 01 c0    	call   *0xc0011ee8
c0002029:	e9 12 fd ff ff       	jmp    c0001d40 <intr_exit>

c000202e <intr0x1bentry>:
intr0x1bentry():
c000202e:	90                   	nop
c000202f:	1e                   	push   %ds
c0002030:	06                   	push   %es
c0002031:	0f a0                	push   %fs
c0002033:	0f a8                	push   %gs
c0002035:	60                   	pusha  
c0002036:	b0 20                	mov    $0x20,%al
c0002038:	e6 a0                	out    %al,$0xa0
c000203a:	e6 20                	out    %al,$0x20
c000203c:	6a 1b                	push   $0x1b
c000203e:	ff 15 ec 1e 01 c0    	call   *0xc0011eec
c0002044:	e9 f7 fc ff ff       	jmp    c0001d40 <intr_exit>

c0002049 <intr0x1centry>:
intr0x1centry():
c0002049:	6a 00                	push   $0x0
c000204b:	1e                   	push   %ds
c000204c:	06                   	push   %es
c000204d:	0f a0                	push   %fs
c000204f:	0f a8                	push   %gs
c0002051:	60                   	pusha  
c0002052:	b0 20                	mov    $0x20,%al
c0002054:	e6 a0                	out    %al,$0xa0
c0002056:	e6 20                	out    %al,$0x20
c0002058:	6a 1c                	push   $0x1c
c000205a:	ff 15 f0 1e 01 c0    	call   *0xc0011ef0
c0002060:	e9 db fc ff ff       	jmp    c0001d40 <intr_exit>

c0002065 <intr0x1dentry>:
intr0x1dentry():
c0002065:	90                   	nop
c0002066:	1e                   	push   %ds
c0002067:	06                   	push   %es
c0002068:	0f a0                	push   %fs
c000206a:	0f a8                	push   %gs
c000206c:	60                   	pusha  
c000206d:	b0 20                	mov    $0x20,%al
c000206f:	e6 a0                	out    %al,$0xa0
c0002071:	e6 20                	out    %al,$0x20
c0002073:	6a 1d                	push   $0x1d
c0002075:	ff 15 f4 1e 01 c0    	call   *0xc0011ef4
c000207b:	e9 c0 fc ff ff       	jmp    c0001d40 <intr_exit>

c0002080 <intr0x1eentry>:
intr0x1eentry():
c0002080:	90                   	nop
c0002081:	1e                   	push   %ds
c0002082:	06                   	push   %es
c0002083:	0f a0                	push   %fs
c0002085:	0f a8                	push   %gs
c0002087:	60                   	pusha  
c0002088:	b0 20                	mov    $0x20,%al
c000208a:	e6 a0                	out    %al,$0xa0
c000208c:	e6 20                	out    %al,$0x20
c000208e:	6a 1e                	push   $0x1e
c0002090:	ff 15 f8 1e 01 c0    	call   *0xc0011ef8
c0002096:	e9 a5 fc ff ff       	jmp    c0001d40 <intr_exit>

c000209b <intr0x1fentry>:
intr0x1fentry():
c000209b:	6a 00                	push   $0x0
c000209d:	1e                   	push   %ds
c000209e:	06                   	push   %es
c000209f:	0f a0                	push   %fs
c00020a1:	0f a8                	push   %gs
c00020a3:	60                   	pusha  
c00020a4:	b0 20                	mov    $0x20,%al
c00020a6:	e6 a0                	out    %al,$0xa0
c00020a8:	e6 20                	out    %al,$0x20
c00020aa:	6a 1f                	push   $0x1f
c00020ac:	ff 15 fc 1e 01 c0    	call   *0xc0011efc
c00020b2:	e9 89 fc ff ff       	jmp    c0001d40 <intr_exit>

c00020b7 <intr0x20entry>:
intr0x20entry():
c00020b7:	6a 00                	push   $0x0
c00020b9:	1e                   	push   %ds
c00020ba:	06                   	push   %es
c00020bb:	0f a0                	push   %fs
c00020bd:	0f a8                	push   %gs
c00020bf:	60                   	pusha  
c00020c0:	b0 20                	mov    $0x20,%al
c00020c2:	e6 a0                	out    %al,$0xa0
c00020c4:	e6 20                	out    %al,$0x20
c00020c6:	6a 20                	push   $0x20
c00020c8:	ff 15 00 1f 01 c0    	call   *0xc0011f00
c00020ce:	e9 6d fc ff ff       	jmp    c0001d40 <intr_exit>

c00020d3 <intr0x21entry>:
intr0x21entry():
c00020d3:	6a 00                	push   $0x0
c00020d5:	1e                   	push   %ds
c00020d6:	06                   	push   %es
c00020d7:	0f a0                	push   %fs
c00020d9:	0f a8                	push   %gs
c00020db:	60                   	pusha  
c00020dc:	b0 20                	mov    $0x20,%al
c00020de:	e6 a0                	out    %al,$0xa0
c00020e0:	e6 20                	out    %al,$0x20
c00020e2:	6a 21                	push   $0x21
c00020e4:	ff 15 04 1f 01 c0    	call   *0xc0011f04
c00020ea:	e9 51 fc ff ff       	jmp    c0001d40 <intr_exit>

c00020ef <intr0x22entry>:
intr0x22entry():
c00020ef:	6a 00                	push   $0x0
c00020f1:	1e                   	push   %ds
c00020f2:	06                   	push   %es
c00020f3:	0f a0                	push   %fs
c00020f5:	0f a8                	push   %gs
c00020f7:	60                   	pusha  
c00020f8:	b0 20                	mov    $0x20,%al
c00020fa:	e6 a0                	out    %al,$0xa0
c00020fc:	e6 20                	out    %al,$0x20
c00020fe:	6a 22                	push   $0x22
c0002100:	ff 15 08 1f 01 c0    	call   *0xc0011f08
c0002106:	e9 35 fc ff ff       	jmp    c0001d40 <intr_exit>

c000210b <intr0x23entry>:
intr0x23entry():
c000210b:	6a 00                	push   $0x0
c000210d:	1e                   	push   %ds
c000210e:	06                   	push   %es
c000210f:	0f a0                	push   %fs
c0002111:	0f a8                	push   %gs
c0002113:	60                   	pusha  
c0002114:	b0 20                	mov    $0x20,%al
c0002116:	e6 a0                	out    %al,$0xa0
c0002118:	e6 20                	out    %al,$0x20
c000211a:	6a 23                	push   $0x23
c000211c:	ff 15 0c 1f 01 c0    	call   *0xc0011f0c
c0002122:	e9 19 fc ff ff       	jmp    c0001d40 <intr_exit>

c0002127 <intr0x24entry>:
intr0x24entry():
c0002127:	6a 00                	push   $0x0
c0002129:	1e                   	push   %ds
c000212a:	06                   	push   %es
c000212b:	0f a0                	push   %fs
c000212d:	0f a8                	push   %gs
c000212f:	60                   	pusha  
c0002130:	b0 20                	mov    $0x20,%al
c0002132:	e6 a0                	out    %al,$0xa0
c0002134:	e6 20                	out    %al,$0x20
c0002136:	6a 24                	push   $0x24
c0002138:	ff 15 10 1f 01 c0    	call   *0xc0011f10
c000213e:	e9 fd fb ff ff       	jmp    c0001d40 <intr_exit>

c0002143 <intr0x25entry>:
intr0x25entry():
c0002143:	6a 00                	push   $0x0
c0002145:	1e                   	push   %ds
c0002146:	06                   	push   %es
c0002147:	0f a0                	push   %fs
c0002149:	0f a8                	push   %gs
c000214b:	60                   	pusha  
c000214c:	b0 20                	mov    $0x20,%al
c000214e:	e6 a0                	out    %al,$0xa0
c0002150:	e6 20                	out    %al,$0x20
c0002152:	6a 25                	push   $0x25
c0002154:	ff 15 14 1f 01 c0    	call   *0xc0011f14
c000215a:	e9 e1 fb ff ff       	jmp    c0001d40 <intr_exit>

c000215f <intr0x26entry>:
intr0x26entry():
c000215f:	6a 00                	push   $0x0
c0002161:	1e                   	push   %ds
c0002162:	06                   	push   %es
c0002163:	0f a0                	push   %fs
c0002165:	0f a8                	push   %gs
c0002167:	60                   	pusha  
c0002168:	b0 20                	mov    $0x20,%al
c000216a:	e6 a0                	out    %al,$0xa0
c000216c:	e6 20                	out    %al,$0x20
c000216e:	6a 26                	push   $0x26
c0002170:	ff 15 18 1f 01 c0    	call   *0xc0011f18
c0002176:	e9 c5 fb ff ff       	jmp    c0001d40 <intr_exit>

c000217b <intr0x27entry>:
intr0x27entry():
c000217b:	6a 00                	push   $0x0
c000217d:	1e                   	push   %ds
c000217e:	06                   	push   %es
c000217f:	0f a0                	push   %fs
c0002181:	0f a8                	push   %gs
c0002183:	60                   	pusha  
c0002184:	b0 20                	mov    $0x20,%al
c0002186:	e6 a0                	out    %al,$0xa0
c0002188:	e6 20                	out    %al,$0x20
c000218a:	6a 27                	push   $0x27
c000218c:	ff 15 1c 1f 01 c0    	call   *0xc0011f1c
c0002192:	e9 a9 fb ff ff       	jmp    c0001d40 <intr_exit>

c0002197 <intr0x28entry>:
intr0x28entry():
c0002197:	6a 00                	push   $0x0
c0002199:	1e                   	push   %ds
c000219a:	06                   	push   %es
c000219b:	0f a0                	push   %fs
c000219d:	0f a8                	push   %gs
c000219f:	60                   	pusha  
c00021a0:	b0 20                	mov    $0x20,%al
c00021a2:	e6 a0                	out    %al,$0xa0
c00021a4:	e6 20                	out    %al,$0x20
c00021a6:	6a 28                	push   $0x28
c00021a8:	ff 15 20 1f 01 c0    	call   *0xc0011f20
c00021ae:	e9 8d fb ff ff       	jmp    c0001d40 <intr_exit>

c00021b3 <intr0x29entry>:
intr0x29entry():
c00021b3:	6a 00                	push   $0x0
c00021b5:	1e                   	push   %ds
c00021b6:	06                   	push   %es
c00021b7:	0f a0                	push   %fs
c00021b9:	0f a8                	push   %gs
c00021bb:	60                   	pusha  
c00021bc:	b0 20                	mov    $0x20,%al
c00021be:	e6 a0                	out    %al,$0xa0
c00021c0:	e6 20                	out    %al,$0x20
c00021c2:	6a 29                	push   $0x29
c00021c4:	ff 15 24 1f 01 c0    	call   *0xc0011f24
c00021ca:	e9 71 fb ff ff       	jmp    c0001d40 <intr_exit>

c00021cf <intr0x2aentry>:
intr0x2aentry():
c00021cf:	6a 00                	push   $0x0
c00021d1:	1e                   	push   %ds
c00021d2:	06                   	push   %es
c00021d3:	0f a0                	push   %fs
c00021d5:	0f a8                	push   %gs
c00021d7:	60                   	pusha  
c00021d8:	b0 20                	mov    $0x20,%al
c00021da:	e6 a0                	out    %al,$0xa0
c00021dc:	e6 20                	out    %al,$0x20
c00021de:	6a 2a                	push   $0x2a
c00021e0:	ff 15 28 1f 01 c0    	call   *0xc0011f28
c00021e6:	e9 55 fb ff ff       	jmp    c0001d40 <intr_exit>

c00021eb <intr0x2bentry>:
intr0x2bentry():
c00021eb:	6a 00                	push   $0x0
c00021ed:	1e                   	push   %ds
c00021ee:	06                   	push   %es
c00021ef:	0f a0                	push   %fs
c00021f1:	0f a8                	push   %gs
c00021f3:	60                   	pusha  
c00021f4:	b0 20                	mov    $0x20,%al
c00021f6:	e6 a0                	out    %al,$0xa0
c00021f8:	e6 20                	out    %al,$0x20
c00021fa:	6a 2b                	push   $0x2b
c00021fc:	ff 15 2c 1f 01 c0    	call   *0xc0011f2c
c0002202:	e9 39 fb ff ff       	jmp    c0001d40 <intr_exit>

c0002207 <intr0x2centry>:
intr0x2centry():
c0002207:	6a 00                	push   $0x0
c0002209:	1e                   	push   %ds
c000220a:	06                   	push   %es
c000220b:	0f a0                	push   %fs
c000220d:	0f a8                	push   %gs
c000220f:	60                   	pusha  
c0002210:	b0 20                	mov    $0x20,%al
c0002212:	e6 a0                	out    %al,$0xa0
c0002214:	e6 20                	out    %al,$0x20
c0002216:	6a 2c                	push   $0x2c
c0002218:	ff 15 30 1f 01 c0    	call   *0xc0011f30
c000221e:	e9 1d fb ff ff       	jmp    c0001d40 <intr_exit>

c0002223 <intr0x2dentry>:
intr0x2dentry():
c0002223:	6a 00                	push   $0x0
c0002225:	1e                   	push   %ds
c0002226:	06                   	push   %es
c0002227:	0f a0                	push   %fs
c0002229:	0f a8                	push   %gs
c000222b:	60                   	pusha  
c000222c:	b0 20                	mov    $0x20,%al
c000222e:	e6 a0                	out    %al,$0xa0
c0002230:	e6 20                	out    %al,$0x20
c0002232:	6a 2d                	push   $0x2d
c0002234:	ff 15 34 1f 01 c0    	call   *0xc0011f34
c000223a:	e9 01 fb ff ff       	jmp    c0001d40 <intr_exit>

c000223f <intr0x2eentry>:
intr0x2eentry():
c000223f:	6a 00                	push   $0x0
c0002241:	1e                   	push   %ds
c0002242:	06                   	push   %es
c0002243:	0f a0                	push   %fs
c0002245:	0f a8                	push   %gs
c0002247:	60                   	pusha  
c0002248:	b0 20                	mov    $0x20,%al
c000224a:	e6 a0                	out    %al,$0xa0
c000224c:	e6 20                	out    %al,$0x20
c000224e:	6a 2e                	push   $0x2e
c0002250:	ff 15 38 1f 01 c0    	call   *0xc0011f38
c0002256:	e9 e5 fa ff ff       	jmp    c0001d40 <intr_exit>

c000225b <intr0x2fentry>:
intr0x2fentry():
c000225b:	6a 00                	push   $0x0
c000225d:	1e                   	push   %ds
c000225e:	06                   	push   %es
c000225f:	0f a0                	push   %fs
c0002261:	0f a8                	push   %gs
c0002263:	60                   	pusha  
c0002264:	b0 20                	mov    $0x20,%al
c0002266:	e6 a0                	out    %al,$0xa0
c0002268:	e6 20                	out    %al,$0x20
c000226a:	6a 2f                	push   $0x2f
c000226c:	ff 15 3c 1f 01 c0    	call   *0xc0011f3c
c0002272:	e9 c9 fa ff ff       	jmp    c0001d40 <intr_exit>

c0002277 <syscall_handler>:
syscall_handler():
c0002277:	6a 00                	push   $0x0
c0002279:	1e                   	push   %ds
c000227a:	06                   	push   %es
c000227b:	0f a0                	push   %fs
c000227d:	0f a8                	push   %gs
c000227f:	60                   	pusha  
c0002280:	68 80 00 00 00       	push   $0x80
c0002285:	52                   	push   %edx
c0002286:	51                   	push   %ecx
c0002287:	53                   	push   %ebx
c0002288:	ff 14 85 a0 22 01 c0 	call   *-0x3ffedd60(,%eax,4)
c000228f:	83 c4 0c             	add    $0xc,%esp
c0002292:	89 44 24 20          	mov    %eax,0x20(%esp)
c0002296:	e9 a5 fa ff ff       	jmp    c0001d40 <intr_exit>
c000229b:	66 90                	xchg   %ax,%ax
c000229d:	66 90                	xchg   %ax,%ax
c000229f:	90                   	nop

c00022a0 <put_str>:
put_str():
c00022a0:	53                   	push   %ebx
c00022a1:	51                   	push   %ecx
c00022a2:	31 c9                	xor    %ecx,%ecx
c00022a4:	8b 5c 24 0c          	mov    0xc(%esp),%ebx

c00022a8 <put_str.goon>:
put_str.goon():
c00022a8:	8a 0b                	mov    (%ebx),%cl
c00022aa:	80 f9 00             	cmp    $0x0,%cl
c00022ad:	74 0c                	je     c00022bb <put_str.str_over>
c00022af:	51                   	push   %ecx
c00022b0:	e8 09 00 00 00       	call   c00022be <put_char>
c00022b5:	83 c4 04             	add    $0x4,%esp
c00022b8:	43                   	inc    %ebx
c00022b9:	eb ed                	jmp    c00022a8 <put_str.goon>

c00022bb <put_str.str_over>:
put_str.str_over():
c00022bb:	59                   	pop    %ecx
c00022bc:	5b                   	pop    %ebx
c00022bd:	c3                   	ret    

c00022be <put_char>:
put_char():
c00022be:	60                   	pusha  
c00022bf:	66 b8 18 00          	mov    $0x18,%ax
c00022c3:	8e e8                	mov    %eax,%gs
c00022c5:	66 ba d4 03          	mov    $0x3d4,%dx
c00022c9:	b0 0e                	mov    $0xe,%al
c00022cb:	ee                   	out    %al,(%dx)
c00022cc:	66 ba d5 03          	mov    $0x3d5,%dx
c00022d0:	ec                   	in     (%dx),%al
c00022d1:	88 c4                	mov    %al,%ah
c00022d3:	66 ba d4 03          	mov    $0x3d4,%dx
c00022d7:	b0 0f                	mov    $0xf,%al
c00022d9:	ee                   	out    %al,(%dx)
c00022da:	66 ba d5 03          	mov    $0x3d5,%dx
c00022de:	ec                   	in     (%dx),%al
c00022df:	66 89 c3             	mov    %ax,%bx
c00022e2:	8b 4c 24 24          	mov    0x24(%esp),%ecx
c00022e6:	80 f9 0d             	cmp    $0xd,%cl
c00022e9:	74 3c                	je     c0002327 <put_char.is_carriage_return>
c00022eb:	80 f9 0a             	cmp    $0xa,%cl
c00022ee:	74 37                	je     c0002327 <put_char.is_carriage_return>
c00022f0:	80 f9 08             	cmp    $0x8,%cl
c00022f3:	74 02                	je     c00022f7 <put_char.is_backspace>
c00022f5:	eb 16                	jmp    c000230d <put_char.put_other>

c00022f7 <put_char.is_backspace>:
put_char.is_backspace():
c00022f7:	66 4b                	dec    %bx
c00022f9:	66 d1 e3             	shl    %bx
c00022fc:	65 67 c6 07 20       	movb   $0x20,%gs:(%bx)
c0002301:	66 43                	inc    %bx
c0002303:	65 67 c6 07 07       	movb   $0x7,%gs:(%bx)
c0002308:	66 d1 eb             	shr    %bx
c000230b:	eb 60                	jmp    c000236d <put_char.set_cursor>

c000230d <put_char.put_other>:
put_char.put_other():
c000230d:	66 d1 e3             	shl    %bx
c0002310:	65 67 88 0f          	mov    %cl,%gs:(%bx)
c0002314:	66 43                	inc    %bx
c0002316:	65 67 c6 07 07       	movb   $0x7,%gs:(%bx)
c000231b:	66 d1 eb             	shr    %bx
c000231e:	66 43                	inc    %bx
c0002320:	66 81 fb d0 07       	cmp    $0x7d0,%bx
c0002325:	7c 46                	jl     c000236d <put_char.set_cursor>

c0002327 <put_char.is_carriage_return>:
put_char.is_line_feed():
c0002327:	66 31 d2             	xor    %dx,%dx
c000232a:	66 89 d8             	mov    %bx,%ax
c000232d:	66 be 50 00          	mov    $0x50,%si
c0002331:	66 f7 f6             	div    %si
c0002334:	66 29 d3             	sub    %dx,%bx

c0002337 <put_char.is_carriage_return_end>:
put_char.is_carriage_return_end():
c0002337:	66 83 c3 50          	add    $0x50,%bx
c000233b:	66 81 fb d0 07       	cmp    $0x7d0,%bx

c0002340 <put_char.is_line_feed_end>:
put_char.is_line_feed_end():
c0002340:	7c 2b                	jl     c000236d <put_char.set_cursor>

c0002342 <put_char.roll_screen>:
put_char.roll_screen():
c0002342:	fc                   	cld    
c0002343:	b9 c0 03 00 00       	mov    $0x3c0,%ecx
c0002348:	be a0 80 0b c0       	mov    $0xc00b80a0,%esi
c000234d:	bf 00 80 0b c0       	mov    $0xc00b8000,%edi
c0002352:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c0002354:	bb 00 0f 00 00       	mov    $0xf00,%ebx
c0002359:	b9 50 00 00 00       	mov    $0x50,%ecx

c000235e <put_char.cls>:
put_char.cls():
c000235e:	65 66 c7 03 20 07    	movw   $0x720,%gs:(%ebx)
c0002364:	83 c3 02             	add    $0x2,%ebx
c0002367:	e2 f5                	loop   c000235e <put_char.cls>
c0002369:	66 bb 80 07          	mov    $0x780,%bx

c000236d <put_char.set_cursor>:
put_char.set_cursor():
c000236d:	66 ba d4 03          	mov    $0x3d4,%dx
c0002371:	b0 0e                	mov    $0xe,%al
c0002373:	ee                   	out    %al,(%dx)
c0002374:	66 ba d5 03          	mov    $0x3d5,%dx
c0002378:	88 f8                	mov    %bh,%al
c000237a:	ee                   	out    %al,(%dx)
c000237b:	66 ba d4 03          	mov    $0x3d4,%dx
c000237f:	b0 0f                	mov    $0xf,%al
c0002381:	ee                   	out    %al,(%dx)
c0002382:	66 ba d5 03          	mov    $0x3d5,%dx
c0002386:	88 d8                	mov    %bl,%al
c0002388:	ee                   	out    %al,(%dx)

c0002389 <put_char.put_char_done>:
put_char.put_char_done():
c0002389:	61                   	popa   
c000238a:	c3                   	ret    

c000238b <cls_screen>:
cls_screen():
c000238b:	60                   	pusha  
c000238c:	66 b8 18 00          	mov    $0x18,%ax
c0002390:	8e e8                	mov    %eax,%gs
c0002392:	bb 00 00 00 00       	mov    $0x0,%ebx
c0002397:	b9 d0 07 00 00       	mov    $0x7d0,%ecx

c000239c <cls_screen.cls>:
cls_screen.cls():
c000239c:	65 66 c7 03 20 07    	movw   $0x720,%gs:(%ebx)
c00023a2:	83 c3 02             	add    $0x2,%ebx
c00023a5:	e2 f5                	loop   c000239c <cls_screen.cls>
c00023a7:	bb 00 00 00 00       	mov    $0x0,%ebx

c00023ac <cls_screen.set_cursor>:
cls_screen.set_cursor():
c00023ac:	66 ba d4 03          	mov    $0x3d4,%dx
c00023b0:	b0 0e                	mov    $0xe,%al
c00023b2:	ee                   	out    %al,(%dx)
c00023b3:	66 ba d5 03          	mov    $0x3d5,%dx
c00023b7:	88 f8                	mov    %bh,%al
c00023b9:	ee                   	out    %al,(%dx)
c00023ba:	66 ba d4 03          	mov    $0x3d4,%dx
c00023be:	b0 0f                	mov    $0xf,%al
c00023c0:	ee                   	out    %al,(%dx)
c00023c1:	66 ba d5 03          	mov    $0x3d5,%dx
c00023c5:	88 d8                	mov    %bl,%al
c00023c7:	ee                   	out    %al,(%dx)
c00023c8:	61                   	popa   
c00023c9:	c3                   	ret    

c00023ca <put_int>:
put_int():
c00023ca:	60                   	pusha  
c00023cb:	89 e5                	mov    %esp,%ebp
c00023cd:	8b 45 24             	mov    0x24(%ebp),%eax
c00023d0:	89 c2                	mov    %eax,%edx
c00023d2:	bf 07 00 00 00       	mov    $0x7,%edi
c00023d7:	b9 08 00 00 00       	mov    $0x8,%ecx
c00023dc:	bb c0 10 01 c0       	mov    $0xc00110c0,%ebx

c00023e1 <put_int.16based_4bits>:
put_int.16based_4bits():
c00023e1:	83 e2 0f             	and    $0xf,%edx
c00023e4:	83 fa 09             	cmp    $0x9,%edx
c00023e7:	7f 05                	jg     c00023ee <put_int.is_A2F>
c00023e9:	83 c2 30             	add    $0x30,%edx
c00023ec:	eb 06                	jmp    c00023f4 <put_int.store>

c00023ee <put_int.is_A2F>:
put_int.is_A2F():
c00023ee:	83 ea 0a             	sub    $0xa,%edx
c00023f1:	83 c2 41             	add    $0x41,%edx

c00023f4 <put_int.store>:
put_int.store():
c00023f4:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
c00023f7:	4f                   	dec    %edi
c00023f8:	c1 e8 04             	shr    $0x4,%eax
c00023fb:	89 c2                	mov    %eax,%edx
c00023fd:	e2 e2                	loop   c00023e1 <put_int.16based_4bits>

c00023ff <put_int.ready_to_print>:
put_int.ready_to_print():
c00023ff:	47                   	inc    %edi

c0002400 <put_int.skip_prefix_0>:
put_int.skip_prefix_0():
c0002400:	83 ff 08             	cmp    $0x8,%edi
c0002403:	74 0f                	je     c0002414 <put_int.full0>

c0002405 <put_int.go_on_skip>:
put_int.go_on_skip():
c0002405:	8a 8f c0 10 01 c0    	mov    -0x3ffeef40(%edi),%cl
c000240b:	47                   	inc    %edi
c000240c:	80 f9 30             	cmp    $0x30,%cl
c000240f:	74 ef                	je     c0002400 <put_int.skip_prefix_0>
c0002411:	4f                   	dec    %edi
c0002412:	eb 02                	jmp    c0002416 <put_int.put_each_num>

c0002414 <put_int.full0>:
put_int.full0():
c0002414:	b1 30                	mov    $0x30,%cl

c0002416 <put_int.put_each_num>:
put_int.put_each_num():
c0002416:	51                   	push   %ecx
c0002417:	e8 a2 fe ff ff       	call   c00022be <put_char>
c000241c:	83 c4 04             	add    $0x4,%esp
c000241f:	47                   	inc    %edi
c0002420:	8a 8f c0 10 01 c0    	mov    -0x3ffeef40(%edi),%cl
c0002426:	83 ff 08             	cmp    $0x8,%edi
c0002429:	7c eb                	jl     c0002416 <put_int.put_each_num>
c000242b:	61                   	popa   
c000242c:	c3                   	ret    

c000242d <set_cursor>:
set_cursor():
c000242d:	60                   	pusha  
c000242e:	66 8b 5c 24 24       	mov    0x24(%esp),%bx
c0002433:	66 ba d4 03          	mov    $0x3d4,%dx
c0002437:	b0 0e                	mov    $0xe,%al
c0002439:	ee                   	out    %al,(%dx)
c000243a:	66 ba d5 03          	mov    $0x3d5,%dx
c000243e:	88 f8                	mov    %bh,%al
c0002440:	ee                   	out    %al,(%dx)
c0002441:	66 ba d4 03          	mov    $0x3d4,%dx
c0002445:	b0 0f                	mov    $0xf,%al
c0002447:	ee                   	out    %al,(%dx)
c0002448:	66 ba d5 03          	mov    $0x3d5,%dx
c000244c:	88 d8                	mov    %bl,%al
c000244e:	ee                   	out    %al,(%dx)
c000244f:	61                   	popa   
c0002450:	c3                   	ret    

c0002451 <panic_spin>:
panic_spin():
/work/x86_os_my/kernel/debug.c:10
/* 打印文件名,行号,函数名,条件并使程序悬停 */
void panic_spin(char* filename,	       \
	        int line,	       \
		const char* func,      \
		const char* condition) \
{
c0002451:	55                   	push   %ebp
c0002452:	89 e5                	mov    %esp,%ebp
c0002454:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/kernel/debug.c:11
   intr_disable();	// 因为有时候会单独调用panic_spin,所以在此处关中断。
c0002457:	e8 11 f6 ff ff       	call   c0001a6d <intr_disable>
/work/x86_os_my/kernel/debug.c:12
   put_str("\n\n\n!!!!! error !!!!!\n");
c000245c:	83 ec 0c             	sub    $0xc,%esp
c000245f:	68 70 cd 00 c0       	push   $0xc000cd70
c0002464:	e8 37 fe ff ff       	call   c00022a0 <put_str>
c0002469:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/debug.c:13
   put_str("filename:");put_str(filename);put_str("\n");
c000246c:	83 ec 0c             	sub    $0xc,%esp
c000246f:	68 86 cd 00 c0       	push   $0xc000cd86
c0002474:	e8 27 fe ff ff       	call   c00022a0 <put_str>
c0002479:	83 c4 10             	add    $0x10,%esp
c000247c:	83 ec 0c             	sub    $0xc,%esp
c000247f:	ff 75 08             	pushl  0x8(%ebp)
c0002482:	e8 19 fe ff ff       	call   c00022a0 <put_str>
c0002487:	83 c4 10             	add    $0x10,%esp
c000248a:	83 ec 0c             	sub    $0xc,%esp
c000248d:	68 90 cd 00 c0       	push   $0xc000cd90
c0002492:	e8 09 fe ff ff       	call   c00022a0 <put_str>
c0002497:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/debug.c:14
   put_str("line:0x");put_int(line);put_str("\n");
c000249a:	83 ec 0c             	sub    $0xc,%esp
c000249d:	68 92 cd 00 c0       	push   $0xc000cd92
c00024a2:	e8 f9 fd ff ff       	call   c00022a0 <put_str>
c00024a7:	83 c4 10             	add    $0x10,%esp
c00024aa:	8b 45 0c             	mov    0xc(%ebp),%eax
c00024ad:	83 ec 0c             	sub    $0xc,%esp
c00024b0:	50                   	push   %eax
c00024b1:	e8 14 ff ff ff       	call   c00023ca <put_int>
c00024b6:	83 c4 10             	add    $0x10,%esp
c00024b9:	83 ec 0c             	sub    $0xc,%esp
c00024bc:	68 90 cd 00 c0       	push   $0xc000cd90
c00024c1:	e8 da fd ff ff       	call   c00022a0 <put_str>
c00024c6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/debug.c:15
   put_str("function:");put_str((char*)func);put_str("\n");
c00024c9:	83 ec 0c             	sub    $0xc,%esp
c00024cc:	68 9a cd 00 c0       	push   $0xc000cd9a
c00024d1:	e8 ca fd ff ff       	call   c00022a0 <put_str>
c00024d6:	83 c4 10             	add    $0x10,%esp
c00024d9:	83 ec 0c             	sub    $0xc,%esp
c00024dc:	ff 75 10             	pushl  0x10(%ebp)
c00024df:	e8 bc fd ff ff       	call   c00022a0 <put_str>
c00024e4:	83 c4 10             	add    $0x10,%esp
c00024e7:	83 ec 0c             	sub    $0xc,%esp
c00024ea:	68 90 cd 00 c0       	push   $0xc000cd90
c00024ef:	e8 ac fd ff ff       	call   c00022a0 <put_str>
c00024f4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/debug.c:16
   put_str("condition:");put_str((char*)condition);put_str("\n");
c00024f7:	83 ec 0c             	sub    $0xc,%esp
c00024fa:	68 a4 cd 00 c0       	push   $0xc000cda4
c00024ff:	e8 9c fd ff ff       	call   c00022a0 <put_str>
c0002504:	83 c4 10             	add    $0x10,%esp
c0002507:	83 ec 0c             	sub    $0xc,%esp
c000250a:	ff 75 14             	pushl  0x14(%ebp)
c000250d:	e8 8e fd ff ff       	call   c00022a0 <put_str>
c0002512:	83 c4 10             	add    $0x10,%esp
c0002515:	83 ec 0c             	sub    $0xc,%esp
c0002518:	68 90 cd 00 c0       	push   $0xc000cd90
c000251d:	e8 7e fd ff ff       	call   c00022a0 <put_str>
c0002522:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/debug.c:17 (discriminator 1)
   while(1);
c0002525:	eb fe                	jmp    c0002525 <panic_spin+0xd4>

c0002527 <bitmap_init>:
bitmap_init():
/work/x86_os_my/lib/kernel/bitmap.c:16
	uint8_t* bits;				位图空间
};
*/

/* 将位图btmp初始化 */
void bitmap_init(struct bitmap* btmp) {
c0002527:	55                   	push   %ebp
c0002528:	89 e5                	mov    %esp,%ebp
c000252a:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/lib/kernel/bitmap.c:17
	memset(btmp->bits, 0, btmp->btmp_bytes_len);   
c000252d:	8b 45 08             	mov    0x8(%ebp),%eax
c0002530:	8b 10                	mov    (%eax),%edx
c0002532:	8b 45 08             	mov    0x8(%ebp),%eax
c0002535:	8b 40 04             	mov    0x4(%eax),%eax
c0002538:	83 ec 04             	sub    $0x4,%esp
c000253b:	52                   	push   %edx
c000253c:	6a 00                	push   $0x0
c000253e:	50                   	push   %eax
c000253f:	e8 af 13 00 00       	call   c00038f3 <memset>
c0002544:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/bitmap.c:18
}
c0002547:	90                   	nop
c0002548:	c9                   	leave  
c0002549:	c3                   	ret    

c000254a <bitmap_scan_test>:
bitmap_scan_test():
/work/x86_os_my/lib/kernel/bitmap.c:23

/* 判断bit_idx位是否为1
若为1则返回true
否则返回false */
bool bitmap_scan_test(struct bitmap* btmp, uint32_t bit_idx) {
c000254a:	55                   	push   %ebp
c000254b:	89 e5                	mov    %esp,%ebp
c000254d:	53                   	push   %ebx
c000254e:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/kernel/bitmap.c:24
	uint32_t byte_idx = bit_idx / 8;    // 向下取整用于索引数组下标
c0002551:	8b 45 0c             	mov    0xc(%ebp),%eax
c0002554:	c1 e8 03             	shr    $0x3,%eax
c0002557:	89 45 f8             	mov    %eax,-0x8(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:25
	uint32_t bit_odd  = bit_idx % 8;    // 取余用于索引数组内的位
c000255a:	8b 45 0c             	mov    0xc(%ebp),%eax
c000255d:	83 e0 07             	and    $0x7,%eax
c0002560:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:26
	return (btmp->bits[byte_idx] & (BITMAP_MASK << bit_odd));
c0002563:	8b 45 08             	mov    0x8(%ebp),%eax
c0002566:	8b 50 04             	mov    0x4(%eax),%edx
c0002569:	8b 45 f8             	mov    -0x8(%ebp),%eax
c000256c:	01 d0                	add    %edx,%eax
c000256e:	0f b6 00             	movzbl (%eax),%eax
c0002571:	0f b6 d0             	movzbl %al,%edx
c0002574:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002577:	bb 01 00 00 00       	mov    $0x1,%ebx
c000257c:	89 c1                	mov    %eax,%ecx
c000257e:	d3 e3                	shl    %cl,%ebx
c0002580:	89 d8                	mov    %ebx,%eax
c0002582:	21 d0                	and    %edx,%eax
/work/x86_os_my/lib/kernel/bitmap.c:27
}
c0002584:	83 c4 10             	add    $0x10,%esp
c0002587:	5b                   	pop    %ebx
c0002588:	5d                   	pop    %ebp
c0002589:	c3                   	ret    

c000258a <bitmap_scan>:
bitmap_scan():
/work/x86_os_my/lib/kernel/bitmap.c:32

/* 在位图中申请连续cnt个位
成功：返回其起始位下标
失败：返回-1 */
int bitmap_scan(struct bitmap* btmp, uint32_t cnt) {
c000258a:	55                   	push   %ebp
c000258b:	89 e5                	mov    %esp,%ebp
c000258d:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/lib/kernel/bitmap.c:33
	uint32_t idx_byte = 0;	 // 用于记录空闲位所在的字节
c0002590:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:35
	/* 先逐字节比较,蛮力法 */
	while (( 0xff == btmp->bits[idx_byte]) && (idx_byte < btmp->btmp_bytes_len)) {
c0002597:	eb 04                	jmp    c000259d <bitmap_scan+0x13>
/work/x86_os_my/lib/kernel/bitmap.c:37
		/* 1表示该位已分配,所以若为0xff,则表示该字节内已无空闲位,向下一字节继续找 */
		idx_byte++;
c0002599:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:35
成功：返回其起始位下标
失败：返回-1 */
int bitmap_scan(struct bitmap* btmp, uint32_t cnt) {
	uint32_t idx_byte = 0;	 // 用于记录空闲位所在的字节
	/* 先逐字节比较,蛮力法 */
	while (( 0xff == btmp->bits[idx_byte]) && (idx_byte < btmp->btmp_bytes_len)) {
c000259d:	8b 45 08             	mov    0x8(%ebp),%eax
c00025a0:	8b 50 04             	mov    0x4(%eax),%edx
c00025a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00025a6:	01 d0                	add    %edx,%eax
c00025a8:	0f b6 00             	movzbl (%eax),%eax
c00025ab:	3c ff                	cmp    $0xff,%al
c00025ad:	75 0a                	jne    c00025b9 <bitmap_scan+0x2f>
/work/x86_os_my/lib/kernel/bitmap.c:35 (discriminator 1)
c00025af:	8b 45 08             	mov    0x8(%ebp),%eax
c00025b2:	8b 00                	mov    (%eax),%eax
c00025b4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c00025b7:	77 e0                	ja     c0002599 <bitmap_scan+0xf>
/work/x86_os_my/lib/kernel/bitmap.c:39
		/* 1表示该位已分配,所以若为0xff,则表示该字节内已无空闲位,向下一字节继续找 */
		idx_byte++;
	}
	ASSERT(idx_byte < btmp->btmp_bytes_len);	//这里应该是"<="
c00025b9:	8b 45 08             	mov    0x8(%ebp),%eax
c00025bc:	8b 00                	mov    (%eax),%eax
c00025be:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c00025c1:	77 19                	ja     c00025dc <bitmap_scan+0x52>
/work/x86_os_my/lib/kernel/bitmap.c:39 (discriminator 1)
c00025c3:	68 b0 cd 00 c0       	push   $0xc000cdb0
c00025c8:	68 04 ce 00 c0       	push   $0xc000ce04
c00025cd:	6a 27                	push   $0x27
c00025cf:	68 d0 cd 00 c0       	push   $0xc000cdd0
c00025d4:	e8 78 fe ff ff       	call   c0002451 <panic_spin>
c00025d9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/bitmap.c:40
	if (idx_byte == btmp->btmp_bytes_len) {		// 若该内存池找不到可用空间		
c00025dc:	8b 45 08             	mov    0x8(%ebp),%eax
c00025df:	8b 00                	mov    (%eax),%eax
c00025e1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c00025e4:	75 0a                	jne    c00025f0 <bitmap_scan+0x66>
/work/x86_os_my/lib/kernel/bitmap.c:41
		return -1;
c00025e6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00025eb:	e9 cd 00 00 00       	jmp    c00026bd <bitmap_scan+0x133>
/work/x86_os_my/lib/kernel/bitmap.c:46
	}

	/* 若在位图数组范围内的某字节内找到了空闲位，
	 * 在该字节内逐位比对,返回空闲位的索引。*/
	int idx_bit = 0;
c00025f0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:48
	/* 和btmp->bits[idx_byte]这个字节逐位对比 */
	while ((uint8_t)(BITMAP_MASK << idx_bit) & btmp->bits[idx_byte]) { 
c00025f7:	eb 04                	jmp    c00025fd <bitmap_scan+0x73>
/work/x86_os_my/lib/kernel/bitmap.c:49
		idx_bit++;
c00025f9:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:48

	/* 若在位图数组范围内的某字节内找到了空闲位，
	 * 在该字节内逐位比对,返回空闲位的索引。*/
	int idx_bit = 0;
	/* 和btmp->bits[idx_byte]这个字节逐位对比 */
	while ((uint8_t)(BITMAP_MASK << idx_bit) & btmp->bits[idx_byte]) { 
c00025fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002600:	ba 01 00 00 00       	mov    $0x1,%edx
c0002605:	89 c1                	mov    %eax,%ecx
c0002607:	d3 e2                	shl    %cl,%edx
c0002609:	89 d0                	mov    %edx,%eax
c000260b:	0f b6 d0             	movzbl %al,%edx
c000260e:	8b 45 08             	mov    0x8(%ebp),%eax
c0002611:	8b 48 04             	mov    0x4(%eax),%ecx
c0002614:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002617:	01 c8                	add    %ecx,%eax
c0002619:	0f b6 00             	movzbl (%eax),%eax
c000261c:	0f b6 c0             	movzbl %al,%eax
c000261f:	21 d0                	and    %edx,%eax
c0002621:	85 c0                	test   %eax,%eax
c0002623:	75 d4                	jne    c00025f9 <bitmap_scan+0x6f>
/work/x86_os_my/lib/kernel/bitmap.c:52
		idx_bit++;
	}
	
	int bit_idx_start = idx_byte * 8 + idx_bit;		// 空闲位在位图内的下标
c0002625:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002628:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c000262f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002632:	01 d0                	add    %edx,%eax
c0002634:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:53
	if (cnt == 1) {
c0002637:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c000263b:	75 05                	jne    c0002642 <bitmap_scan+0xb8>
/work/x86_os_my/lib/kernel/bitmap.c:54
		return bit_idx_start;
c000263d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002640:	eb 7b                	jmp    c00026bd <bitmap_scan+0x133>
/work/x86_os_my/lib/kernel/bitmap.c:57
	}

	uint32_t bit_left = (btmp->btmp_bytes_len * 8 - bit_idx_start);	// 记录还有多少位可以判断
c0002642:	8b 45 08             	mov    0x8(%ebp),%eax
c0002645:	8b 00                	mov    (%eax),%eax
c0002647:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c000264e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002651:	29 c2                	sub    %eax,%edx
c0002653:	89 d0                	mov    %edx,%eax
c0002655:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:58
	uint32_t next_bit = bit_idx_start + 1;
c0002658:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000265b:	83 c0 01             	add    $0x1,%eax
c000265e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:59
	uint32_t count = 1;			// 用于记录找到的空闲位的个数
c0002661:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:61

	bit_idx_start = -1;			// 初始化为-1，若找不到连续的位就直接返回-1
c0002668:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:62
	while (bit_left-- > 0) {
c000266f:	eb 3c                	jmp    c00026ad <bitmap_scan+0x123>
/work/x86_os_my/lib/kernel/bitmap.c:63
		if (!(bitmap_scan_test(btmp, next_bit))) {	// 判断next_bit位是否为1,=1返回true，=0返回false
c0002671:	83 ec 08             	sub    $0x8,%esp
c0002674:	ff 75 e4             	pushl  -0x1c(%ebp)
c0002677:	ff 75 08             	pushl  0x8(%ebp)
c000267a:	e8 cb fe ff ff       	call   c000254a <bitmap_scan_test>
c000267f:	83 c4 10             	add    $0x10,%esp
c0002682:	85 c0                	test   %eax,%eax
c0002684:	75 06                	jne    c000268c <bitmap_scan+0x102>
/work/x86_os_my/lib/kernel/bitmap.c:64
			count++;
c0002686:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
c000268a:	eb 07                	jmp    c0002693 <bitmap_scan+0x109>
/work/x86_os_my/lib/kernel/bitmap.c:66
		} else {
			count = 0;			// 重新从0找cnt个连续的bit
c000268c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:69
		}
		
		if (count == cnt) {		// 已找到连续的cnt个空位
c0002693:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0002696:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0002699:	75 0e                	jne    c00026a9 <bitmap_scan+0x11f>
/work/x86_os_my/lib/kernel/bitmap.c:70
			bit_idx_start = next_bit - cnt + 1;
c000269b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000269e:	2b 45 0c             	sub    0xc(%ebp),%eax
c00026a1:	83 c0 01             	add    $0x1,%eax
c00026a4:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:71
			break;
c00026a7:	eb 11                	jmp    c00026ba <bitmap_scan+0x130>
/work/x86_os_my/lib/kernel/bitmap.c:73
		}
		next_bit++;
c00026a9:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:62
	uint32_t bit_left = (btmp->btmp_bytes_len * 8 - bit_idx_start);	// 记录还有多少位可以判断
	uint32_t next_bit = bit_idx_start + 1;
	uint32_t count = 1;			// 用于记录找到的空闲位的个数

	bit_idx_start = -1;			// 初始化为-1，若找不到连续的位就直接返回-1
	while (bit_left-- > 0) {
c00026ad:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00026b0:	8d 50 ff             	lea    -0x1(%eax),%edx
c00026b3:	89 55 e8             	mov    %edx,-0x18(%ebp)
c00026b6:	85 c0                	test   %eax,%eax
c00026b8:	75 b7                	jne    c0002671 <bitmap_scan+0xe7>
/work/x86_os_my/lib/kernel/bitmap.c:75
			bit_idx_start = next_bit - cnt + 1;
			break;
		}
		next_bit++;
	}
	return bit_idx_start;
c00026ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
/work/x86_os_my/lib/kernel/bitmap.c:76
}
c00026bd:	c9                   	leave  
c00026be:	c3                   	ret    

c00026bf <bitmap_set>:
bitmap_set():
/work/x86_os_my/lib/kernel/bitmap.c:79

/* 将位图btmp的bit_idx位设置为value */
void bitmap_set(struct bitmap* btmp, uint32_t bit_idx, int8_t value) {
c00026bf:	55                   	push   %ebp
c00026c0:	89 e5                	mov    %esp,%ebp
c00026c2:	56                   	push   %esi
c00026c3:	53                   	push   %ebx
c00026c4:	83 ec 20             	sub    $0x20,%esp
c00026c7:	8b 45 10             	mov    0x10(%ebp),%eax
c00026ca:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:80
	ASSERT((value == 0) || (value == 1));
c00026cd:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c00026d1:	74 1f                	je     c00026f2 <bitmap_set+0x33>
/work/x86_os_my/lib/kernel/bitmap.c:80 (discriminator 1)
c00026d3:	80 7d e4 01          	cmpb   $0x1,-0x1c(%ebp)
c00026d7:	74 19                	je     c00026f2 <bitmap_set+0x33>
/work/x86_os_my/lib/kernel/bitmap.c:80 (discriminator 2)
c00026d9:	68 e4 cd 00 c0       	push   $0xc000cde4
c00026de:	68 10 ce 00 c0       	push   $0xc000ce10
c00026e3:	6a 50                	push   $0x50
c00026e5:	68 d0 cd 00 c0       	push   $0xc000cdd0
c00026ea:	e8 62 fd ff ff       	call   c0002451 <panic_spin>
c00026ef:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/bitmap.c:81
	uint32_t byte_idx = bit_idx / 8;    // 向下取整用于索引数组下标
c00026f2:	8b 45 0c             	mov    0xc(%ebp),%eax
c00026f5:	c1 e8 03             	shr    $0x3,%eax
c00026f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:82
	uint32_t bit_odd  = bit_idx % 8;    // 取余用于索引数组内的位
c00026fb:	8b 45 0c             	mov    0xc(%ebp),%eax
c00026fe:	83 e0 07             	and    $0x7,%eax
c0002701:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:86

	/* 一般都会用个0x1这样的数对字节中的位操作,
	* 将1任意移动后再取反,或者先取反再移位,可用来对位置0操作。*/
	if (value) {
c0002704:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c0002708:	74 2f                	je     c0002739 <bitmap_set+0x7a>
/work/x86_os_my/lib/kernel/bitmap.c:87
		btmp->bits[byte_idx] |= (BITMAP_MASK << bit_odd);
c000270a:	8b 45 08             	mov    0x8(%ebp),%eax
c000270d:	8b 50 04             	mov    0x4(%eax),%edx
c0002710:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002713:	01 c2                	add    %eax,%edx
c0002715:	8b 45 08             	mov    0x8(%ebp),%eax
c0002718:	8b 48 04             	mov    0x4(%eax),%ecx
c000271b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000271e:	01 c8                	add    %ecx,%eax
c0002720:	0f b6 00             	movzbl (%eax),%eax
c0002723:	89 c6                	mov    %eax,%esi
c0002725:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002728:	bb 01 00 00 00       	mov    $0x1,%ebx
c000272d:	89 c1                	mov    %eax,%ecx
c000272f:	d3 e3                	shl    %cl,%ebx
c0002731:	89 d8                	mov    %ebx,%eax
c0002733:	09 f0                	or     %esi,%eax
c0002735:	88 02                	mov    %al,(%edx)
/work/x86_os_my/lib/kernel/bitmap.c:91
	} else {
		btmp->bits[byte_idx] &= ~(BITMAP_MASK << bit_odd);
	}
}
c0002737:	eb 2f                	jmp    c0002768 <bitmap_set+0xa9>
/work/x86_os_my/lib/kernel/bitmap.c:89
	/* 一般都会用个0x1这样的数对字节中的位操作,
	* 将1任意移动后再取反,或者先取反再移位,可用来对位置0操作。*/
	if (value) {
		btmp->bits[byte_idx] |= (BITMAP_MASK << bit_odd);
	} else {
		btmp->bits[byte_idx] &= ~(BITMAP_MASK << bit_odd);
c0002739:	8b 45 08             	mov    0x8(%ebp),%eax
c000273c:	8b 50 04             	mov    0x4(%eax),%edx
c000273f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002742:	01 c2                	add    %eax,%edx
c0002744:	8b 45 08             	mov    0x8(%ebp),%eax
c0002747:	8b 48 04             	mov    0x4(%eax),%ecx
c000274a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000274d:	01 c8                	add    %ecx,%eax
c000274f:	0f b6 00             	movzbl (%eax),%eax
c0002752:	89 c3                	mov    %eax,%ebx
c0002754:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002757:	be 01 00 00 00       	mov    $0x1,%esi
c000275c:	89 c1                	mov    %eax,%ecx
c000275e:	d3 e6                	shl    %cl,%esi
c0002760:	89 f0                	mov    %esi,%eax
c0002762:	f7 d0                	not    %eax
c0002764:	21 d8                	and    %ebx,%eax
c0002766:	88 02                	mov    %al,(%edx)
/work/x86_os_my/lib/kernel/bitmap.c:91
	}
}
c0002768:	90                   	nop
c0002769:	8d 65 f8             	lea    -0x8(%ebp),%esp
c000276c:	5b                   	pop    %ebx
c000276d:	5e                   	pop    %esi
c000276e:	5d                   	pop    %ebp
c000276f:	c3                   	ret    

c0002770 <vaddr_get>:
vaddr_get():
/work/x86_os_my/kernel/memory.c:66
struct pool kernel_pool, user_pool;		// 生成内核内存池和用户内存池
struct virtual_addr kernel_vaddr;		// 此结构是用来给内核分配虚拟地址

/* 在pf表示的虚拟内存池中申请pg_cnt个虚拟页,
 * 成功则返回虚拟页的起始地址, 失败则返回NULL */
static void* vaddr_get(enum pool_flags pf, uint32_t pg_cnt) {
c0002770:	55                   	push   %ebp
c0002771:	89 e5                	mov    %esp,%ebp
c0002773:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:67
	int vaddr_start = 0, bit_idx_start = -1;
c0002776:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c000277d:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:68
	uint32_t cnt = 0;
c0002784:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:69
	if (pf == PF_KERNEL) {
c000278b:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c000278f:	75 64                	jne    c00027f5 <vaddr_get+0x85>
/work/x86_os_my/kernel/memory.c:71
		// 在位图中申请连续cnt个位 成功：返回其起始位下标
		bit_idx_start  = bitmap_scan(&kernel_vaddr.vaddr_bitmap, pg_cnt);
c0002791:	83 ec 08             	sub    $0x8,%esp
c0002794:	ff 75 0c             	pushl  0xc(%ebp)
c0002797:	68 88 21 01 c0       	push   $0xc0012188
c000279c:	e8 e9 fd ff ff       	call   c000258a <bitmap_scan>
c00027a1:	83 c4 10             	add    $0x10,%esp
c00027a4:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:72
		if (bit_idx_start == -1) {	//失败
c00027a7:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%ebp)
c00027ab:	75 2b                	jne    c00027d8 <vaddr_get+0x68>
/work/x86_os_my/kernel/memory.c:73
			return NULL;
c00027ad:	b8 00 00 00 00       	mov    $0x0,%eax
c00027b2:	e9 cd 00 00 00       	jmp    c0002884 <vaddr_get+0x114>
/work/x86_os_my/kernel/memory.c:77
		}
		while(cnt < pg_cnt) {
			// 设置位图中的位，表示内存已被占用
			bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 1);
c00027b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00027ba:	8d 50 01             	lea    0x1(%eax),%edx
c00027bd:	89 55 f0             	mov    %edx,-0x10(%ebp)
c00027c0:	8b 55 ec             	mov    -0x14(%ebp),%edx
c00027c3:	01 d0                	add    %edx,%eax
c00027c5:	83 ec 04             	sub    $0x4,%esp
c00027c8:	6a 01                	push   $0x1
c00027ca:	50                   	push   %eax
c00027cb:	68 88 21 01 c0       	push   $0xc0012188
c00027d0:	e8 ea fe ff ff       	call   c00026bf <bitmap_set>
c00027d5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:75
		// 在位图中申请连续cnt个位 成功：返回其起始位下标
		bit_idx_start  = bitmap_scan(&kernel_vaddr.vaddr_bitmap, pg_cnt);
		if (bit_idx_start == -1) {	//失败
			return NULL;
		}
		while(cnt < pg_cnt) {
c00027d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00027db:	3b 45 0c             	cmp    0xc(%ebp),%eax
c00027de:	72 d7                	jb     c00027b7 <vaddr_get+0x47>
/work/x86_os_my/kernel/memory.c:79
			// 设置位图中的位，表示内存已被占用
			bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 1);
		}
		vaddr_start = kernel_vaddr.vaddr_start + bit_idx_start * PG_SIZE;
c00027e0:	a1 90 21 01 c0       	mov    0xc0012190,%eax
c00027e5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c00027e8:	c1 e2 0c             	shl    $0xc,%edx
c00027eb:	01 d0                	add    %edx,%eax
c00027ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00027f0:	e9 8c 00 00 00       	jmp    c0002881 <vaddr_get+0x111>
/work/x86_os_my/kernel/memory.c:81
	} else {
		struct task_struct* cur = running_thread();
c00027f5:	e8 e0 14 00 00       	call   c0003cda <running_thread>
c00027fa:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:82
		bit_idx_start  = bitmap_scan(&cur->userprog_vaddr.vaddr_bitmap, pg_cnt);
c00027fd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002800:	83 c0 58             	add    $0x58,%eax
c0002803:	83 ec 08             	sub    $0x8,%esp
c0002806:	ff 75 0c             	pushl  0xc(%ebp)
c0002809:	50                   	push   %eax
c000280a:	e8 7b fd ff ff       	call   c000258a <bitmap_scan>
c000280f:	83 c4 10             	add    $0x10,%esp
c0002812:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:83
		if (bit_idx_start == -1) {
c0002815:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%ebp)
c0002819:	75 2a                	jne    c0002845 <vaddr_get+0xd5>
/work/x86_os_my/kernel/memory.c:84
			return NULL;
c000281b:	b8 00 00 00 00       	mov    $0x0,%eax
c0002820:	eb 62                	jmp    c0002884 <vaddr_get+0x114>
/work/x86_os_my/kernel/memory.c:87
		}
		while(cnt < pg_cnt) {
			bitmap_set(&cur->userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 1);
c0002822:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002825:	8d 50 01             	lea    0x1(%eax),%edx
c0002828:	89 55 f0             	mov    %edx,-0x10(%ebp)
c000282b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c000282e:	01 c2                	add    %eax,%edx
c0002830:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002833:	83 c0 58             	add    $0x58,%eax
c0002836:	83 ec 04             	sub    $0x4,%esp
c0002839:	6a 01                	push   $0x1
c000283b:	52                   	push   %edx
c000283c:	50                   	push   %eax
c000283d:	e8 7d fe ff ff       	call   c00026bf <bitmap_set>
c0002842:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:86
		struct task_struct* cur = running_thread();
		bit_idx_start  = bitmap_scan(&cur->userprog_vaddr.vaddr_bitmap, pg_cnt);
		if (bit_idx_start == -1) {
			return NULL;
		}
		while(cnt < pg_cnt) {
c0002845:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002848:	3b 45 0c             	cmp    0xc(%ebp),%eax
c000284b:	72 d5                	jb     c0002822 <vaddr_get+0xb2>
/work/x86_os_my/kernel/memory.c:89
			bitmap_set(&cur->userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 1);
		}
		vaddr_start = cur->userprog_vaddr.vaddr_start + bit_idx_start * PG_SIZE;
c000284d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002850:	8b 40 60             	mov    0x60(%eax),%eax
c0002853:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0002856:	c1 e2 0c             	shl    $0xc,%edx
c0002859:	01 d0                	add    %edx,%eax
c000285b:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:92

		/* (0xc0000000 - PG_SIZE)做为用户3级栈已经在start_process被分配 */
		ASSERT((uint32_t)vaddr_start < (0xc0000000 - PG_SIZE));
c000285e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002861:	3d ff ef ff bf       	cmp    $0xbfffefff,%eax
c0002866:	76 19                	jbe    c0002881 <vaddr_get+0x111>
/work/x86_os_my/kernel/memory.c:92 (discriminator 1)
c0002868:	68 1c ce 00 c0       	push   $0xc000ce1c
c000286d:	68 90 d1 00 c0       	push   $0xc000d190
c0002872:	6a 5c                	push   $0x5c
c0002874:	68 4b ce 00 c0       	push   $0xc000ce4b
c0002879:	e8 d3 fb ff ff       	call   c0002451 <panic_spin>
c000287e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:95
		
	}
	return (void*)vaddr_start;
c0002881:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/kernel/memory.c:96
}
c0002884:	c9                   	leave  
c0002885:	c3                   	ret    

c0002886 <pte_ptr>:
pte_ptr():
/work/x86_os_my/kernel/memory.c:103
// 页表项 page table
/* 得到虚拟地址vaddr对应的pte指针*/
// 虚拟地址 vaddr 所在 pte 的"虚拟地址"!!!
// *pte 代表的是 pte 页表项的内容,
// 也就是 vaddr 最终所映射到的物理页框的 32 位地址中的高 20 位和 12 位的"页表项"属性
uint32_t* pte_ptr(uint32_t vaddr) {
c0002886:	55                   	push   %ebp
c0002887:	89 e5                	mov    %esp,%ebp
c0002889:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/memory.c:108
	/* 先找到页目录表 + \
	* 再用vaddr的pde部分做为索引，找到某一个页表 + \
	* 再用vaddr的pte部分作为索引，找到某一个页表项*/
	uint32_t* pte = (uint32_t*)(0xffc00000 + \
					((vaddr & 0xffc00000) >> 10) + \
c000288c:	8b 45 08             	mov    0x8(%ebp),%eax
c000288f:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0002894:	c1 e8 0a             	shr    $0xa,%eax
c0002897:	89 c2                	mov    %eax,%edx
/work/x86_os_my/kernel/memory.c:109
					PTE_IDX(vaddr) * 4);
c0002899:	8b 45 08             	mov    0x8(%ebp),%eax
c000289c:	25 00 f0 3f 00       	and    $0x3ff000,%eax
c00028a1:	c1 e8 0c             	shr    $0xc,%eax
c00028a4:	c1 e0 02             	shl    $0x2,%eax
/work/x86_os_my/kernel/memory.c:108
uint32_t* pte_ptr(uint32_t vaddr) {
	/* 先找到页目录表 + \
	* 再用vaddr的pde部分做为索引，找到某一个页表 + \
	* 再用vaddr的pte部分作为索引，找到某一个页表项*/
	uint32_t* pte = (uint32_t*)(0xffc00000 + \
					((vaddr & 0xffc00000) >> 10) + \
c00028a7:	01 d0                	add    %edx,%eax
c00028a9:	2d 00 00 40 00       	sub    $0x400000,%eax
/work/x86_os_my/kernel/memory.c:107
// 也就是 vaddr 最终所映射到的物理页框的 32 位地址中的高 20 位和 12 位的"页表项"属性
uint32_t* pte_ptr(uint32_t vaddr) {
	/* 先找到页目录表 + \
	* 再用vaddr的pde部分做为索引，找到某一个页表 + \
	* 再用vaddr的pte部分作为索引，找到某一个页表项*/
	uint32_t* pte = (uint32_t*)(0xffc00000 + \
c00028ae:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/kernel/memory.c:110
					((vaddr & 0xffc00000) >> 10) + \
					PTE_IDX(vaddr) * 4);
	return pte;
c00028b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
/work/x86_os_my/kernel/memory.c:111
}
c00028b4:	c9                   	leave  
c00028b5:	c3                   	ret    

c00028b6 <pde_ptr>:
pde_ptr():
/work/x86_os_my/kernel/memory.c:118
// 页目录表项 page Directory table entry
/* 得到虚拟地址vaddr对应的pde的指针 */
// 虚拟地址 vaddr 所在 pde 的"虚拟地址"!!!
// *pde 代表的是 pde 页目录项的内容
// 也就是 vaddr 最终所映射到的物理页框的 32 位地址中的高 20 位和 12 位的"页目录项"属性
uint32_t* pde_ptr(uint32_t vaddr) {
c00028b6:	55                   	push   %ebp
c00028b7:	89 e5                	mov    %esp,%ebp
c00028b9:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/memory.c:120
	/* 0xfffff是用来访问到页目录表本身所在的地址 */
	uint32_t* pde = (uint32_t*)((0xfffff000) + PDE_IDX(vaddr) * 4);
c00028bc:	8b 45 08             	mov    0x8(%ebp),%eax
c00028bf:	c1 e8 16             	shr    $0x16,%eax
c00028c2:	05 00 fc ff 3f       	add    $0x3ffffc00,%eax
c00028c7:	c1 e0 02             	shl    $0x2,%eax
c00028ca:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/kernel/memory.c:121
	return pde;
c00028cd:	8b 45 fc             	mov    -0x4(%ebp),%eax
/work/x86_os_my/kernel/memory.c:122
}
c00028d0:	c9                   	leave  
c00028d1:	c3                   	ret    

c00028d2 <palloc>:
palloc():
/work/x86_os_my/kernel/memory.c:126

/* 在m_pool指向的物理内存池中分配1个物理页,
 * 成功则返回页框的物理地址,失败则返回NULL */
static void* palloc(struct pool* m_pool) {
c00028d2:	55                   	push   %ebp
c00028d3:	89 e5                	mov    %esp,%ebp
c00028d5:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:128
	/* 扫描或设置位图要保证原子操作 */
	int bit_idx = bitmap_scan(&m_pool->pool_bitmap, 1);    // 找一个物理页面
c00028d8:	8b 45 08             	mov    0x8(%ebp),%eax
c00028db:	83 ec 08             	sub    $0x8,%esp
c00028de:	6a 01                	push   $0x1
c00028e0:	50                   	push   %eax
c00028e1:	e8 a4 fc ff ff       	call   c000258a <bitmap_scan>
c00028e6:	83 c4 10             	add    $0x10,%esp
c00028e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:129
	if (bit_idx == -1 ) {
c00028ec:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c00028f0:	75 07                	jne    c00028f9 <palloc+0x27>
/work/x86_os_my/kernel/memory.c:130
		return NULL;
c00028f2:	b8 00 00 00 00       	mov    $0x0,%eax
c00028f7:	eb 2b                	jmp    c0002924 <palloc+0x52>
/work/x86_os_my/kernel/memory.c:132
	}
	bitmap_set(&m_pool->pool_bitmap, bit_idx, 1);	// 将此位bit_idx置1
c00028f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c00028fc:	8b 45 08             	mov    0x8(%ebp),%eax
c00028ff:	83 ec 04             	sub    $0x4,%esp
c0002902:	6a 01                	push   $0x1
c0002904:	52                   	push   %edx
c0002905:	50                   	push   %eax
c0002906:	e8 b4 fd ff ff       	call   c00026bf <bitmap_set>
c000290b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:133
	uint32_t page_phyaddr = ((bit_idx * PG_SIZE) + m_pool->phy_addr_start);
c000290e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002911:	c1 e0 0c             	shl    $0xc,%eax
c0002914:	89 c2                	mov    %eax,%edx
c0002916:	8b 45 08             	mov    0x8(%ebp),%eax
c0002919:	8b 40 08             	mov    0x8(%eax),%eax
c000291c:	01 d0                	add    %edx,%eax
c000291e:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:134
	return (void*)page_phyaddr;
c0002921:	8b 45 f0             	mov    -0x10(%ebp),%eax
/work/x86_os_my/kernel/memory.c:135
}
c0002924:	c9                   	leave  
c0002925:	c3                   	ret    

c0002926 <page_table_add>:
page_table_add():
/work/x86_os_my/kernel/memory.c:138

/* 页表中添加虚拟地址_vaddr与物理地址_page_phyaddr的映射 */
static void page_table_add(void* _vaddr, void* _page_phyaddr) {
c0002926:	55                   	push   %ebp
c0002927:	89 e5                	mov    %esp,%ebp
c0002929:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/kernel/memory.c:139
	uint32_t vaddr = (uint32_t)_vaddr, page_phyaddr = (uint32_t)_page_phyaddr;
c000292c:	8b 45 08             	mov    0x8(%ebp),%eax
c000292f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0002932:	8b 45 0c             	mov    0xc(%ebp),%eax
c0002935:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:140
	uint32_t* pde = pde_ptr(vaddr);	//变量pde是虚拟地址!!!
c0002938:	ff 75 f4             	pushl  -0xc(%ebp)
c000293b:	e8 76 ff ff ff       	call   c00028b6 <pde_ptr>
c0002940:	83 c4 04             	add    $0x4,%esp
c0002943:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:141
	uint32_t* pte = pte_ptr(vaddr);	//变量pte是虚拟地址!!!
c0002946:	ff 75 f4             	pushl  -0xc(%ebp)
c0002949:	e8 38 ff ff ff       	call   c0002886 <pte_ptr>
c000294e:	83 c4 04             	add    $0x4,%esp
c0002951:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:149
	* pde页目录项 pte页表项
	* 执行*pte可能会访问到空的pde。所以确保pde创建完成后才能执行*pte，否则会引发page_fault。
	* 因此在*pde为0时，*pte只能出现在下面else语句块中的*pde后面。
	* *********************************************************/
	/* 先在页目录内判断目录项的P位，若为1,则表示该表已存在 */
	if (*pde & 0x00000001) {			// 页目录项 存在
c0002954:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002957:	8b 00                	mov    (%eax),%eax
c0002959:	83 e0 01             	and    $0x1,%eax
c000295c:	85 c0                	test   %eax,%eax
c000295e:	74 64                	je     c00029c4 <page_table_add+0x9e>
/work/x86_os_my/kernel/memory.c:150
		ASSERT(!(*pte & 0x00000001));	// 页表项不存在才能往下执行，否则panic
c0002960:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002963:	8b 00                	mov    (%eax),%eax
c0002965:	83 e0 01             	and    $0x1,%eax
c0002968:	85 c0                	test   %eax,%eax
c000296a:	74 1c                	je     c0002988 <page_table_add+0x62>
/work/x86_os_my/kernel/memory.c:150 (discriminator 1)
c000296c:	68 5b ce 00 c0       	push   $0xc000ce5b
c0002971:	68 9c d1 00 c0       	push   $0xc000d19c
c0002976:	68 96 00 00 00       	push   $0x96
c000297b:	68 4b ce 00 c0       	push   $0xc000ce4b
c0002980:	e8 cc fa ff ff       	call   c0002451 <panic_spin>
c0002985:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:152

		if (!(*pte & 0x00000001)) {		// 页表项pte不存在，创建PTE
c0002988:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000298b:	8b 00                	mov    (%eax),%eax
c000298d:	83 e0 01             	and    $0x1,%eax
c0002990:	85 c0                	test   %eax,%eax
c0002992:	75 12                	jne    c00029a6 <page_table_add+0x80>
/work/x86_os_my/kernel/memory.c:153
			*pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);		// 物理地址 | US=1,RW=1,P=1
c0002994:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002997:	83 c8 07             	or     $0x7,%eax
c000299a:	89 c2                	mov    %eax,%edx
c000299c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000299f:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/kernel/memory.c:173
		memset((void*)((int)pte & 0xfffff000), 0, PG_SIZE);

		ASSERT(!(*pte & 0x00000001));	// 页表项不存在才能往下执行，否则panic
		*pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);			// 物理地址 | US=1,RW=1,P=1
	}
}
c00029a1:	e9 8e 00 00 00       	jmp    c0002a34 <page_table_add+0x10e>
/work/x86_os_my/kernel/memory.c:155
		ASSERT(!(*pte & 0x00000001));	// 页表项不存在才能往下执行，否则panic

		if (!(*pte & 0x00000001)) {		// 页表项pte不存在，创建PTE
			*pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);		// 物理地址 | US=1,RW=1,P=1
		} else {						// 不会执行到这，因为上面的ASSERT
			PANIC("pte repeat");
c00029a6:	68 70 ce 00 c0       	push   $0xc000ce70
c00029ab:	68 9c d1 00 c0       	push   $0xc000d19c
c00029b0:	68 9b 00 00 00       	push   $0x9b
c00029b5:	68 4b ce 00 c0       	push   $0xc000ce4b
c00029ba:	e8 92 fa ff ff       	call   c0002451 <panic_spin>
c00029bf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:173
		memset((void*)((int)pte & 0xfffff000), 0, PG_SIZE);

		ASSERT(!(*pte & 0x00000001));	// 页表项不存在才能往下执行，否则panic
		*pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);			// 物理地址 | US=1,RW=1,P=1
	}
}
c00029c2:	eb 70                	jmp    c0002a34 <page_table_add+0x10e>
/work/x86_os_my/kernel/memory.c:159
		} else {						// 不会执行到这，因为上面的ASSERT
			PANIC("pte repeat");
		}
	} else {							// 页目录项不存在，先创建页目录，再创建页表项
		/* 页表中用到的页一律从内核空间分配 */
		uint32_t pde_phyaddr = (uint32_t)palloc(&kernel_pool);
c00029c4:	83 ec 0c             	sub    $0xc,%esp
c00029c7:	68 a0 21 01 c0       	push   $0xc00121a0
c00029cc:	e8 01 ff ff ff       	call   c00028d2 <palloc>
c00029d1:	83 c4 10             	add    $0x10,%esp
c00029d4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/kernel/memory.c:160
		*pde = (pde_phyaddr | PG_US_U | PG_RW_W | PG_P_1);			// 注意这行是pde_phyaddr，不是page_phyaddr!!!
c00029d7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00029da:	83 c8 07             	or     $0x7,%eax
c00029dd:	89 c2                	mov    %eax,%edx
c00029df:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00029e2:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/kernel/memory.c:168
		 * 访问物理地址 pde_phyaddr，需要找到它的虚拟地址！
		 * 只要用_vaddr的 PTE 取高20位即可。
		   搞得这么难理解，其实就是0xffc00000找到页目录表，然后加上vaddr的PDE在页目录表中的索引
		   (uint32_t*)(0xffc00000 + ((vaddr & 0xffc00000) >> 10))
		 */
		memset((void*)((int)pte & 0xfffff000), 0, PG_SIZE);
c00029e4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00029e7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c00029ec:	83 ec 04             	sub    $0x4,%esp
c00029ef:	68 00 10 00 00       	push   $0x1000
c00029f4:	6a 00                	push   $0x0
c00029f6:	50                   	push   %eax
c00029f7:	e8 f7 0e 00 00       	call   c00038f3 <memset>
c00029fc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:170

		ASSERT(!(*pte & 0x00000001));	// 页表项不存在才能往下执行，否则panic
c00029ff:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002a02:	8b 00                	mov    (%eax),%eax
c0002a04:	83 e0 01             	and    $0x1,%eax
c0002a07:	85 c0                	test   %eax,%eax
c0002a09:	74 1c                	je     c0002a27 <page_table_add+0x101>
/work/x86_os_my/kernel/memory.c:170 (discriminator 1)
c0002a0b:	68 5b ce 00 c0       	push   $0xc000ce5b
c0002a10:	68 9c d1 00 c0       	push   $0xc000d19c
c0002a15:	68 aa 00 00 00       	push   $0xaa
c0002a1a:	68 4b ce 00 c0       	push   $0xc000ce4b
c0002a1f:	e8 2d fa ff ff       	call   c0002451 <panic_spin>
c0002a24:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:171
		*pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);			// 物理地址 | US=1,RW=1,P=1
c0002a27:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002a2a:	83 c8 07             	or     $0x7,%eax
c0002a2d:	89 c2                	mov    %eax,%edx
c0002a2f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002a32:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/kernel/memory.c:173
	}
}
c0002a34:	90                   	nop
c0002a35:	c9                   	leave  
c0002a36:	c3                   	ret    

c0002a37 <malloc_page>:
malloc_page():
/work/x86_os_my/kernel/memory.c:176

/* 分配pg_cnt个页空间,成功则返回起始虚拟地址,失败时返回NULL */
void* malloc_page(enum pool_flags pf, uint32_t pg_cnt) {
c0002a37:	55                   	push   %ebp
c0002a38:	89 e5                	mov    %esp,%ebp
c0002a3a:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/kernel/memory.c:177
	ASSERT(pg_cnt > 0 && pg_cnt < 3840);
c0002a3d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0002a41:	74 09                	je     c0002a4c <malloc_page+0x15>
/work/x86_os_my/kernel/memory.c:177 (discriminator 1)
c0002a43:	81 7d 0c ff 0e 00 00 	cmpl   $0xeff,0xc(%ebp)
c0002a4a:	76 1c                	jbe    c0002a68 <malloc_page+0x31>
/work/x86_os_my/kernel/memory.c:177 (discriminator 3)
c0002a4c:	68 7b ce 00 c0       	push   $0xc000ce7b
c0002a51:	68 ac d1 00 c0       	push   $0xc000d1ac
c0002a56:	68 b1 00 00 00       	push   $0xb1
c0002a5b:	68 4b ce 00 c0       	push   $0xc000ce4b
c0002a60:	e8 ec f9 ff ff       	call   c0002451 <panic_spin>
c0002a65:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:183
	/***********   malloc_page的原理是三个动作的合成:   ***********
		1 通过vaddr_get在虚拟内存池中申请虚拟地址
		2 通过palloc在物理内存池中申请物理页
		3 通过page_table_add将以上得到的虚拟地址和物理地址在页表中完成映射
	***************************************************************/
	void* vaddr_start = vaddr_get(pf, pg_cnt);
c0002a68:	83 ec 08             	sub    $0x8,%esp
c0002a6b:	ff 75 0c             	pushl  0xc(%ebp)
c0002a6e:	ff 75 08             	pushl  0x8(%ebp)
c0002a71:	e8 fa fc ff ff       	call   c0002770 <vaddr_get>
c0002a76:	83 c4 10             	add    $0x10,%esp
c0002a79:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:184
	if (vaddr_start == NULL) {
c0002a7c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0002a80:	75 07                	jne    c0002a89 <malloc_page+0x52>
/work/x86_os_my/kernel/memory.c:185
		return NULL;
c0002a82:	b8 00 00 00 00       	mov    $0x0,%eax
c0002a87:	eb 6e                	jmp    c0002af7 <malloc_page+0xc0>
/work/x86_os_my/kernel/memory.c:188
	}

	uint32_t vaddr = (uint32_t)vaddr_start, cnt = pg_cnt;
c0002a89:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002a8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0002a8f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0002a92:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:189
	struct pool* mem_pool = pf & PF_KERNEL ? &kernel_pool : &user_pool;
c0002a95:	8b 45 08             	mov    0x8(%ebp),%eax
c0002a98:	83 e0 01             	and    $0x1,%eax
c0002a9b:	85 c0                	test   %eax,%eax
c0002a9d:	74 07                	je     c0002aa6 <malloc_page+0x6f>
/work/x86_os_my/kernel/memory.c:189 (discriminator 1)
c0002a9f:	b8 a0 21 01 c0       	mov    $0xc00121a0,%eax
c0002aa4:	eb 05                	jmp    c0002aab <malloc_page+0x74>
/work/x86_os_my/kernel/memory.c:189 (discriminator 2)
c0002aa6:	b8 a0 20 01 c0       	mov    $0xc00120a0,%eax
/work/x86_os_my/kernel/memory.c:189 (discriminator 4)
c0002aab:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:192 (discriminator 4)

	/* 因为虚拟地址是连续的,但物理地址可以是不连续的,所以逐个做映射*/
	while (cnt-- > 0) {
c0002aae:	eb 37                	jmp    c0002ae7 <malloc_page+0xb0>
/work/x86_os_my/kernel/memory.c:193
		void* page_phyaddr = palloc(mem_pool);
c0002ab0:	83 ec 0c             	sub    $0xc,%esp
c0002ab3:	ff 75 e8             	pushl  -0x18(%ebp)
c0002ab6:	e8 17 fe ff ff       	call   c00028d2 <palloc>
c0002abb:	83 c4 10             	add    $0x10,%esp
c0002abe:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/kernel/memory.c:194
		if (page_phyaddr == NULL) {  // 失败时要将曾经已申请的虚拟地址和物理页全部回滚，在将来完成内存回收时再补充
c0002ac1:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0002ac5:	75 07                	jne    c0002ace <malloc_page+0x97>
/work/x86_os_my/kernel/memory.c:195
			return NULL;
c0002ac7:	b8 00 00 00 00       	mov    $0x0,%eax
c0002acc:	eb 29                	jmp    c0002af7 <malloc_page+0xc0>
/work/x86_os_my/kernel/memory.c:197
		}
		page_table_add((void*)vaddr, page_phyaddr); // 在页表中做映射 
c0002ace:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002ad1:	83 ec 08             	sub    $0x8,%esp
c0002ad4:	ff 75 e4             	pushl  -0x1c(%ebp)
c0002ad7:	50                   	push   %eax
c0002ad8:	e8 49 fe ff ff       	call   c0002926 <page_table_add>
c0002add:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:198
		vaddr += PG_SIZE;		 // 下一个虚拟页
c0002ae0:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:192

	uint32_t vaddr = (uint32_t)vaddr_start, cnt = pg_cnt;
	struct pool* mem_pool = pf & PF_KERNEL ? &kernel_pool : &user_pool;

	/* 因为虚拟地址是连续的,但物理地址可以是不连续的,所以逐个做映射*/
	while (cnt-- > 0) {
c0002ae7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002aea:	8d 50 ff             	lea    -0x1(%eax),%edx
c0002aed:	89 55 f0             	mov    %edx,-0x10(%ebp)
c0002af0:	85 c0                	test   %eax,%eax
c0002af2:	75 bc                	jne    c0002ab0 <malloc_page+0x79>
/work/x86_os_my/kernel/memory.c:200
			return NULL;
		}
		page_table_add((void*)vaddr, page_phyaddr); // 在页表中做映射 
		vaddr += PG_SIZE;		 // 下一个虚拟页
	}
	return vaddr_start;
c0002af4:	8b 45 ec             	mov    -0x14(%ebp),%eax
/work/x86_os_my/kernel/memory.c:201
}
c0002af7:	c9                   	leave  
c0002af8:	c3                   	ret    

c0002af9 <get_kernel_pages>:
get_kernel_pages():
/work/x86_os_my/kernel/memory.c:204

/* 从内核物理内存池中申请pg_cnt页内存,成功则返回其虚拟地址,失败则返回NULL */
void* get_kernel_pages(uint32_t pg_cnt) {
c0002af9:	55                   	push   %ebp
c0002afa:	89 e5                	mov    %esp,%ebp
c0002afc:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:205
	lock_acquire(&kernel_pool.lock);
c0002aff:	83 ec 0c             	sub    $0xc,%esp
c0002b02:	68 b0 21 01 c0       	push   $0xc00121b0
c0002b07:	e8 a3 20 00 00       	call   c0004baf <lock_acquire>
c0002b0c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:206
	void* vaddr =  malloc_page(PF_KERNEL, pg_cnt);
c0002b0f:	83 ec 08             	sub    $0x8,%esp
c0002b12:	ff 75 08             	pushl  0x8(%ebp)
c0002b15:	6a 01                	push   $0x1
c0002b17:	e8 1b ff ff ff       	call   c0002a37 <malloc_page>
c0002b1c:	83 c4 10             	add    $0x10,%esp
c0002b1f:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:207
	if (vaddr != NULL) {
c0002b22:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0002b26:	74 17                	je     c0002b3f <get_kernel_pages+0x46>
/work/x86_os_my/kernel/memory.c:208
		memset(vaddr, 0, pg_cnt * PG_SIZE);
c0002b28:	8b 45 08             	mov    0x8(%ebp),%eax
c0002b2b:	c1 e0 0c             	shl    $0xc,%eax
c0002b2e:	83 ec 04             	sub    $0x4,%esp
c0002b31:	50                   	push   %eax
c0002b32:	6a 00                	push   $0x0
c0002b34:	ff 75 f4             	pushl  -0xc(%ebp)
c0002b37:	e8 b7 0d 00 00       	call   c00038f3 <memset>
c0002b3c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:210
	}
	lock_release(&kernel_pool.lock);
c0002b3f:	83 ec 0c             	sub    $0xc,%esp
c0002b42:	68 b0 21 01 c0       	push   $0xc00121b0
c0002b47:	e8 da 20 00 00       	call   c0004c26 <lock_release>
c0002b4c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:211
	return vaddr;
c0002b4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/kernel/memory.c:212
}
c0002b52:	c9                   	leave  
c0002b53:	c3                   	ret    

c0002b54 <get_user_pages>:
get_user_pages():
/work/x86_os_my/kernel/memory.c:215

/* 在用户空间中申请4k内存,并返回其虚拟地址 */
void* get_user_pages(uint32_t pg_cnt) {
c0002b54:	55                   	push   %ebp
c0002b55:	89 e5                	mov    %esp,%ebp
c0002b57:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:216
	lock_acquire(&user_pool.lock);
c0002b5a:	83 ec 0c             	sub    $0xc,%esp
c0002b5d:	68 b0 20 01 c0       	push   $0xc00120b0
c0002b62:	e8 48 20 00 00       	call   c0004baf <lock_acquire>
c0002b67:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:217
	void* vaddr = malloc_page(PF_USER, pg_cnt);
c0002b6a:	83 ec 08             	sub    $0x8,%esp
c0002b6d:	ff 75 08             	pushl  0x8(%ebp)
c0002b70:	6a 02                	push   $0x2
c0002b72:	e8 c0 fe ff ff       	call   c0002a37 <malloc_page>
c0002b77:	83 c4 10             	add    $0x10,%esp
c0002b7a:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:218
	if (vaddr != NULL) {
c0002b7d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0002b81:	74 17                	je     c0002b9a <get_user_pages+0x46>
/work/x86_os_my/kernel/memory.c:219
		memset(vaddr, 0, pg_cnt * PG_SIZE);
c0002b83:	8b 45 08             	mov    0x8(%ebp),%eax
c0002b86:	c1 e0 0c             	shl    $0xc,%eax
c0002b89:	83 ec 04             	sub    $0x4,%esp
c0002b8c:	50                   	push   %eax
c0002b8d:	6a 00                	push   $0x0
c0002b8f:	ff 75 f4             	pushl  -0xc(%ebp)
c0002b92:	e8 5c 0d 00 00       	call   c00038f3 <memset>
c0002b97:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:221
	}
	lock_release(&user_pool.lock);
c0002b9a:	83 ec 0c             	sub    $0xc,%esp
c0002b9d:	68 b0 20 01 c0       	push   $0xc00120b0
c0002ba2:	e8 7f 20 00 00       	call   c0004c26 <lock_release>
c0002ba7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:222
	return vaddr;
c0002baa:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/kernel/memory.c:223
}
c0002bad:	c9                   	leave  
c0002bae:	c3                   	ret    

c0002baf <get_a_page>:
get_a_page():
/work/x86_os_my/kernel/memory.c:227

/* 将虚拟地址vaddr与pf池中的物理地址关联,仅支持一页空间分配
 * 功能是，可以指定虚拟地址的内存分配 */
void* get_a_page(enum pool_flags pf, uint32_t vaddr) {
c0002baf:	55                   	push   %ebp
c0002bb0:	89 e5                	mov    %esp,%ebp
c0002bb2:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:228
	struct pool* mem_pool = pf & PF_KERNEL ? &kernel_pool : &user_pool;
c0002bb5:	8b 45 08             	mov    0x8(%ebp),%eax
c0002bb8:	83 e0 01             	and    $0x1,%eax
c0002bbb:	85 c0                	test   %eax,%eax
c0002bbd:	74 07                	je     c0002bc6 <get_a_page+0x17>
/work/x86_os_my/kernel/memory.c:228 (discriminator 1)
c0002bbf:	b8 a0 21 01 c0       	mov    $0xc00121a0,%eax
c0002bc4:	eb 05                	jmp    c0002bcb <get_a_page+0x1c>
/work/x86_os_my/kernel/memory.c:228 (discriminator 2)
c0002bc6:	b8 a0 20 01 c0       	mov    $0xc00120a0,%eax
/work/x86_os_my/kernel/memory.c:228 (discriminator 4)
c0002bcb:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:229 (discriminator 4)
	lock_acquire(&mem_pool->lock);
c0002bce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002bd1:	83 c0 10             	add    $0x10,%eax
c0002bd4:	83 ec 0c             	sub    $0xc,%esp
c0002bd7:	50                   	push   %eax
c0002bd8:	e8 d2 1f 00 00       	call   c0004baf <lock_acquire>
c0002bdd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:232 (discriminator 4)

	/* 先将虚拟地址对应的位图置1 */
	struct task_struct* cur = running_thread();
c0002be0:	e8 f5 10 00 00       	call   c0003cda <running_thread>
c0002be5:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:233 (discriminator 4)
	int32_t bit_idx = -1;
c0002be8:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:235 (discriminator 4)

	if (cur->pgdir != NULL && pf == PF_USER) {
c0002bef:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002bf2:	8b 40 54             	mov    0x54(%eax),%eax
c0002bf5:	85 c0                	test   %eax,%eax
c0002bf7:	74 55                	je     c0002c4e <get_a_page+0x9f>
/work/x86_os_my/kernel/memory.c:235 (discriminator 1)
c0002bf9:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c0002bfd:	75 4f                	jne    c0002c4e <get_a_page+0x9f>
/work/x86_os_my/kernel/memory.c:237
		/* 若当前是用户进程申请用户内存,就修改用户进程自己的虚拟地址池的 位图 */
		bit_idx = (vaddr - cur->userprog_vaddr.vaddr_start) / PG_SIZE;
c0002bff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002c02:	8b 40 60             	mov    0x60(%eax),%eax
c0002c05:	8b 55 0c             	mov    0xc(%ebp),%edx
c0002c08:	29 c2                	sub    %eax,%edx
c0002c0a:	89 d0                	mov    %edx,%eax
c0002c0c:	c1 e8 0c             	shr    $0xc,%eax
c0002c0f:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:238
		ASSERT(bit_idx >= 0);
c0002c12:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0002c16:	79 1c                	jns    c0002c34 <get_a_page+0x85>
/work/x86_os_my/kernel/memory.c:238 (discriminator 1)
c0002c18:	68 97 ce 00 c0       	push   $0xc000ce97
c0002c1d:	68 b8 d1 00 c0       	push   $0xc000d1b8
c0002c22:	68 ee 00 00 00       	push   $0xee
c0002c27:	68 4b ce 00 c0       	push   $0xc000ce4b
c0002c2c:	e8 20 f8 ff ff       	call   c0002451 <panic_spin>
c0002c31:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:239
		bitmap_set(&cur->userprog_vaddr.vaddr_bitmap, bit_idx, 1);
c0002c34:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002c37:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0002c3a:	83 c2 58             	add    $0x58,%edx
c0002c3d:	83 ec 04             	sub    $0x4,%esp
c0002c40:	6a 01                	push   $0x1
c0002c42:	50                   	push   %eax
c0002c43:	52                   	push   %edx
c0002c44:	e8 76 fa ff ff       	call   c00026bf <bitmap_set>
c0002c49:	83 c4 10             	add    $0x10,%esp
c0002c4c:	eb 78                	jmp    c0002cc6 <get_a_page+0x117>
/work/x86_os_my/kernel/memory.c:241

	} else if (cur->pgdir == NULL && pf == PF_KERNEL) {
c0002c4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002c51:	8b 40 54             	mov    0x54(%eax),%eax
c0002c54:	85 c0                	test   %eax,%eax
c0002c56:	75 52                	jne    c0002caa <get_a_page+0xfb>
/work/x86_os_my/kernel/memory.c:241 (discriminator 1)
c0002c58:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c0002c5c:	75 4c                	jne    c0002caa <get_a_page+0xfb>
/work/x86_os_my/kernel/memory.c:243
		/* 如果是内核线程申请内核内存,就修改 kernel_vaddr */
		bit_idx = (vaddr - kernel_vaddr.vaddr_start) / PG_SIZE;
c0002c5e:	a1 90 21 01 c0       	mov    0xc0012190,%eax
c0002c63:	8b 55 0c             	mov    0xc(%ebp),%edx
c0002c66:	29 c2                	sub    %eax,%edx
c0002c68:	89 d0                	mov    %edx,%eax
c0002c6a:	c1 e8 0c             	shr    $0xc,%eax
c0002c6d:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:244
		ASSERT(bit_idx > 0);
c0002c70:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0002c74:	7f 1c                	jg     c0002c92 <get_a_page+0xe3>
/work/x86_os_my/kernel/memory.c:244 (discriminator 1)
c0002c76:	68 a4 ce 00 c0       	push   $0xc000cea4
c0002c7b:	68 b8 d1 00 c0       	push   $0xc000d1b8
c0002c80:	68 f4 00 00 00       	push   $0xf4
c0002c85:	68 4b ce 00 c0       	push   $0xc000ce4b
c0002c8a:	e8 c2 f7 ff ff       	call   c0002451 <panic_spin>
c0002c8f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:245
		bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx, 1);
c0002c92:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002c95:	83 ec 04             	sub    $0x4,%esp
c0002c98:	6a 01                	push   $0x1
c0002c9a:	50                   	push   %eax
c0002c9b:	68 88 21 01 c0       	push   $0xc0012188
c0002ca0:	e8 1a fa ff ff       	call   c00026bf <bitmap_set>
c0002ca5:	83 c4 10             	add    $0x10,%esp
c0002ca8:	eb 1c                	jmp    c0002cc6 <get_a_page+0x117>
/work/x86_os_my/kernel/memory.c:248

	} else {
		PANIC("get_a_page:not allow kernel alloc userspace or user alloc kernelspace by get_a_page");
c0002caa:	68 b0 ce 00 c0       	push   $0xc000ceb0
c0002caf:	68 b8 d1 00 c0       	push   $0xc000d1b8
c0002cb4:	68 f8 00 00 00       	push   $0xf8
c0002cb9:	68 4b ce 00 c0       	push   $0xc000ce4b
c0002cbe:	e8 8e f7 ff ff       	call   c0002451 <panic_spin>
c0002cc3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:251
	}

	void* page_phyaddr = palloc(mem_pool);
c0002cc6:	83 ec 0c             	sub    $0xc,%esp
c0002cc9:	ff 75 f4             	pushl  -0xc(%ebp)
c0002ccc:	e8 01 fc ff ff       	call   c00028d2 <palloc>
c0002cd1:	83 c4 10             	add    $0x10,%esp
c0002cd4:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:252
	if (page_phyaddr == NULL) {
c0002cd7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0002cdb:	75 19                	jne    c0002cf6 <get_a_page+0x147>
/work/x86_os_my/kernel/memory.c:253
		lock_release(&mem_pool->lock);	//哈哈
c0002cdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002ce0:	83 c0 10             	add    $0x10,%eax
c0002ce3:	83 ec 0c             	sub    $0xc,%esp
c0002ce6:	50                   	push   %eax
c0002ce7:	e8 3a 1f 00 00       	call   c0004c26 <lock_release>
c0002cec:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:254
		return NULL;
c0002cef:	b8 00 00 00 00       	mov    $0x0,%eax
c0002cf4:	eb 27                	jmp    c0002d1d <get_a_page+0x16e>
/work/x86_os_my/kernel/memory.c:256
	}
	page_table_add((void*)vaddr, page_phyaddr);
c0002cf6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0002cf9:	83 ec 08             	sub    $0x8,%esp
c0002cfc:	ff 75 e8             	pushl  -0x18(%ebp)
c0002cff:	50                   	push   %eax
c0002d00:	e8 21 fc ff ff       	call   c0002926 <page_table_add>
c0002d05:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:258
	
	lock_release(&mem_pool->lock);
c0002d08:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002d0b:	83 c0 10             	add    $0x10,%eax
c0002d0e:	83 ec 0c             	sub    $0xc,%esp
c0002d11:	50                   	push   %eax
c0002d12:	e8 0f 1f 00 00       	call   c0004c26 <lock_release>
c0002d17:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:259
	return (void*)vaddr;
c0002d1a:	8b 45 0c             	mov    0xc(%ebp),%eax
/work/x86_os_my/kernel/memory.c:260
}
c0002d1d:	c9                   	leave  
c0002d1e:	c3                   	ret    

c0002d1f <get_a_page_without_opvaddrbitmap>:
get_a_page_without_opvaddrbitmap():
/work/x86_os_my/kernel/memory.c:265

/* 安装1页大小的vaddr，专门针对fork时不修改虚拟地址位图的情况
 * 函数功能和 get_a_page 类似，为 vaddr 分配一物理页，只是少了虚拟地址池位图的操作
 */
void* get_a_page_without_opvaddrbitmap(enum pool_flags pf, uint32_t vaddr) {
c0002d1f:	55                   	push   %ebp
c0002d20:	89 e5                	mov    %esp,%ebp
c0002d22:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:266
	struct pool* mem_pool = pf & PF_KERNEL ? &kernel_pool : &user_pool;
c0002d25:	8b 45 08             	mov    0x8(%ebp),%eax
c0002d28:	83 e0 01             	and    $0x1,%eax
c0002d2b:	85 c0                	test   %eax,%eax
c0002d2d:	74 07                	je     c0002d36 <get_a_page_without_opvaddrbitmap+0x17>
/work/x86_os_my/kernel/memory.c:266 (discriminator 1)
c0002d2f:	b8 a0 21 01 c0       	mov    $0xc00121a0,%eax
c0002d34:	eb 05                	jmp    c0002d3b <get_a_page_without_opvaddrbitmap+0x1c>
/work/x86_os_my/kernel/memory.c:266 (discriminator 2)
c0002d36:	b8 a0 20 01 c0       	mov    $0xc00120a0,%eax
/work/x86_os_my/kernel/memory.c:266 (discriminator 4)
c0002d3b:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:267 (discriminator 4)
	lock_acquire(&mem_pool->lock);
c0002d3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002d41:	83 c0 10             	add    $0x10,%eax
c0002d44:	83 ec 0c             	sub    $0xc,%esp
c0002d47:	50                   	push   %eax
c0002d48:	e8 62 1e 00 00       	call   c0004baf <lock_acquire>
c0002d4d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:268 (discriminator 4)
	void* page_phyaddr = palloc(mem_pool);
c0002d50:	83 ec 0c             	sub    $0xc,%esp
c0002d53:	ff 75 f4             	pushl  -0xc(%ebp)
c0002d56:	e8 77 fb ff ff       	call   c00028d2 <palloc>
c0002d5b:	83 c4 10             	add    $0x10,%esp
c0002d5e:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:269 (discriminator 4)
	if (page_phyaddr == NULL) {
c0002d61:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0002d65:	75 19                	jne    c0002d80 <get_a_page_without_opvaddrbitmap+0x61>
/work/x86_os_my/kernel/memory.c:270
		lock_release(&mem_pool->lock);
c0002d67:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002d6a:	83 c0 10             	add    $0x10,%eax
c0002d6d:	83 ec 0c             	sub    $0xc,%esp
c0002d70:	50                   	push   %eax
c0002d71:	e8 b0 1e 00 00       	call   c0004c26 <lock_release>
c0002d76:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:271
		return NULL;
c0002d79:	b8 00 00 00 00       	mov    $0x0,%eax
c0002d7e:	eb 27                	jmp    c0002da7 <get_a_page_without_opvaddrbitmap+0x88>
/work/x86_os_my/kernel/memory.c:273
	}
	page_table_add((void*)vaddr, page_phyaddr);
c0002d80:	8b 45 0c             	mov    0xc(%ebp),%eax
c0002d83:	83 ec 08             	sub    $0x8,%esp
c0002d86:	ff 75 f0             	pushl  -0x10(%ebp)
c0002d89:	50                   	push   %eax
c0002d8a:	e8 97 fb ff ff       	call   c0002926 <page_table_add>
c0002d8f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:274
	lock_release(&mem_pool->lock);
c0002d92:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002d95:	83 c0 10             	add    $0x10,%eax
c0002d98:	83 ec 0c             	sub    $0xc,%esp
c0002d9b:	50                   	push   %eax
c0002d9c:	e8 85 1e 00 00       	call   c0004c26 <lock_release>
c0002da1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:275
	return (void*)vaddr;
c0002da4:	8b 45 0c             	mov    0xc(%ebp),%eax
/work/x86_os_my/kernel/memory.c:276
}
c0002da7:	c9                   	leave  
c0002da8:	c3                   	ret    

c0002da9 <addr_v2p>:
addr_v2p():
/work/x86_os_my/kernel/memory.c:279

/* 得到虚拟地址映射到的物理地址 */
uint32_t addr_v2p(uint32_t vaddr) {
c0002da9:	55                   	push   %ebp
c0002daa:	89 e5                	mov    %esp,%ebp
c0002dac:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/memory.c:280
	uint32_t* pte = pte_ptr(vaddr);
c0002daf:	ff 75 08             	pushl  0x8(%ebp)
c0002db2:	e8 cf fa ff ff       	call   c0002886 <pte_ptr>
c0002db7:	83 c4 04             	add    $0x4,%esp
c0002dba:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/kernel/memory.c:284
	/* (*pte)的内容是 vaddr 所在 pte 的内容，也就是 vaddr 最终所映射到的物理页框的 32 位地址中的高 20 位和 12 位的页表项属性，
	 * 因为页框都是自然页，低 12 位地址是 0，所以页表项 pte（和页目录项 pde）中只需要记录页框的高 20 位地址即可。
	 */
	return ((*pte & 0xfffff000) + (vaddr & 0x00000fff));
c0002dbd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0002dc0:	8b 00                	mov    (%eax),%eax
c0002dc2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0002dc7:	89 c2                	mov    %eax,%edx
c0002dc9:	8b 45 08             	mov    0x8(%ebp),%eax
c0002dcc:	25 ff 0f 00 00       	and    $0xfff,%eax
c0002dd1:	01 d0                	add    %edx,%eax
/work/x86_os_my/kernel/memory.c:285
}
c0002dd3:	c9                   	leave  
c0002dd4:	c3                   	ret    

c0002dd5 <arena2block>:
arena2block():
/work/x86_os_my/kernel/memory.c:299
|                     |
| +-----------------+ |
+-+  mem_block_desc |←+
  +-----------------+
*/
static struct mem_block* arena2block(struct arena* a, uint32_t idx) {
c0002dd5:	55                   	push   %ebp
c0002dd6:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/kernel/memory.c:300
	return (struct mem_block*)((uint32_t)a + sizeof(struct arena) + idx * a->desc->block_size);
c0002dd8:	8b 45 08             	mov    0x8(%ebp),%eax
c0002ddb:	8b 00                	mov    (%eax),%eax
c0002ddd:	8b 00                	mov    (%eax),%eax
c0002ddf:	0f af 45 0c          	imul   0xc(%ebp),%eax
c0002de3:	89 c2                	mov    %eax,%edx
c0002de5:	8b 45 08             	mov    0x8(%ebp),%eax
c0002de8:	01 d0                	add    %edx,%eax
c0002dea:	83 c0 0c             	add    $0xc,%eax
/work/x86_os_my/kernel/memory.c:301
}
c0002ded:	5d                   	pop    %ebp
c0002dee:	c3                   	ret    

c0002def <block2arena>:
block2arena():
/work/x86_os_my/kernel/memory.c:306

/* 返回内存块mem_block所在的arena地址
 * 取到了虚拟地址mem_block那一整页的地址
 */
static struct arena* block2arena(struct mem_block* b) {
c0002def:	55                   	push   %ebp
c0002df0:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/kernel/memory.c:307
	return (struct arena*)((uint32_t)b & 0xfffff000);
c0002df2:	8b 45 08             	mov    0x8(%ebp),%eax
c0002df5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
/work/x86_os_my/kernel/memory.c:308
}
c0002dfa:	5d                   	pop    %ebp
c0002dfb:	c3                   	ret    

c0002dfc <sys_malloc>:
sys_malloc():
/work/x86_os_my/kernel/memory.c:319
 * 3.内存块地址被返回给用户后，用户可以自由使用此内存块 mem_block
 *   会把此内存块中的 list_elem 型变量 free_elem 覆盖
 *   不过 arena->mem_block_desc->free_list 中的元素已经记录了 mem_block->list_elem 的地址
 *   使用时覆盖的，只是 mem_block 的内容。
 */
void* sys_malloc(uint32_t size) {
c0002dfc:	55                   	push   %ebp
c0002dfd:	89 e5                	mov    %esp,%ebp
c0002dff:	83 ec 38             	sub    $0x38,%esp
/work/x86_os_my/kernel/memory.c:324
	enum pool_flags PF;
	struct pool* mem_pool;
	uint32_t pool_size;
	struct mem_block_desc* descs;
	struct task_struct* cur_thread = running_thread();
c0002e02:	e8 d3 0e 00 00       	call   c0003cda <running_thread>
c0002e07:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/kernel/memory.c:327

	/* 判断用哪个内存池*/
	if (cur_thread->pgdir == NULL) {	// 是内核线程
c0002e0a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0002e0d:	8b 40 54             	mov    0x54(%eax),%eax
c0002e10:	85 c0                	test   %eax,%eax
c0002e12:	75 1f                	jne    c0002e33 <sys_malloc+0x37>
/work/x86_os_my/kernel/memory.c:328
		PF = PF_KERNEL;
c0002e14:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:329
		pool_size = kernel_pool.pool_size;
c0002e1b:	a1 ac 21 01 c0       	mov    0xc00121ac,%eax
c0002e20:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:330
		mem_pool = &kernel_pool;
c0002e23:	c7 45 f0 a0 21 01 c0 	movl   $0xc00121a0,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:331
		descs = k_block_descs;
c0002e2a:	c7 45 e8 e0 20 01 c0 	movl   $0xc00120e0,-0x18(%ebp)
c0002e31:	eb 1f                	jmp    c0002e52 <sys_malloc+0x56>
/work/x86_os_my/kernel/memory.c:333
	} else {							// 用户进程pcb中的pgdir（页目录表）会在为其分配页表时创建【create_page_dir】
		PF = PF_USER;
c0002e33:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:334
		pool_size = user_pool.pool_size;
c0002e3a:	a1 ac 20 01 c0       	mov    0xc00120ac,%eax
c0002e3f:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:335
		mem_pool = &user_pool;
c0002e42:	c7 45 f0 a0 20 01 c0 	movl   $0xc00120a0,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:336
		descs = cur_thread->u_block_desc;
c0002e49:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0002e4c:	83 c0 64             	add    $0x64,%eax
c0002e4f:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:340
	}

	/* 若申请的内存不在内存池容量范围内则直接返回NULL */
	if (!(size > 0 && size < pool_size)) {
c0002e52:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0002e56:	74 08                	je     c0002e60 <sys_malloc+0x64>
/work/x86_os_my/kernel/memory.c:340 (discriminator 1)
c0002e58:	8b 45 08             	mov    0x8(%ebp),%eax
c0002e5b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0002e5e:	72 0a                	jb     c0002e6a <sys_malloc+0x6e>
/work/x86_os_my/kernel/memory.c:341
		return NULL;
c0002e60:	b8 00 00 00 00       	mov    $0x0,%eax
c0002e65:	e9 c5 02 00 00       	jmp    c000312f <sys_malloc+0x333>
/work/x86_os_my/kernel/memory.c:346
	}

	struct arena* a;
	struct mem_block* b;
	lock_acquire(&mem_pool->lock);
c0002e6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002e6d:	83 c0 10             	add    $0x10,%eax
c0002e70:	83 ec 0c             	sub    $0xc,%esp
c0002e73:	50                   	push   %eax
c0002e74:	e8 36 1d 00 00       	call   c0004baf <lock_acquire>
c0002e79:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:349

	/* 超过最大内存块1024, 就分配页框 */
	if (size > 1024) {
c0002e7c:	81 7d 08 00 04 00 00 	cmpl   $0x400,0x8(%ebp)
c0002e83:	0f 86 94 00 00 00    	jbe    c0002f1d <sys_malloc+0x121>
/work/x86_os_my/kernel/memory.c:350
		uint32_t page_cnt = DIV_ROUND_UP(size + sizeof(struct arena), PG_SIZE);	// 向上取整需要的页框数
c0002e89:	8b 45 08             	mov    0x8(%ebp),%eax
c0002e8c:	05 0b 10 00 00       	add    $0x100b,%eax
c0002e91:	c1 e8 0c             	shr    $0xc,%eax
c0002e94:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/kernel/memory.c:352

		a = malloc_page(PF, page_cnt);
c0002e97:	83 ec 08             	sub    $0x8,%esp
c0002e9a:	ff 75 d8             	pushl  -0x28(%ebp)
c0002e9d:	ff 75 f4             	pushl  -0xc(%ebp)
c0002ea0:	e8 92 fb ff ff       	call   c0002a37 <malloc_page>
c0002ea5:	83 c4 10             	add    $0x10,%esp
c0002ea8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/kernel/memory.c:353
		if (a != NULL) {
c0002eab:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0002eaf:	74 50                	je     c0002f01 <sys_malloc+0x105>
/work/x86_os_my/kernel/memory.c:354
			memset(a, 0, page_cnt * PG_SIZE);
c0002eb1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0002eb4:	c1 e0 0c             	shl    $0xc,%eax
c0002eb7:	83 ec 04             	sub    $0x4,%esp
c0002eba:	50                   	push   %eax
c0002ebb:	6a 00                	push   $0x0
c0002ebd:	ff 75 d4             	pushl  -0x2c(%ebp)
c0002ec0:	e8 2e 0a 00 00       	call   c00038f3 <memset>
c0002ec5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:358

			// 【arena结构体初始化，情况1】
			/* 对于分配的大块页框,将desc置为NULL, cnt置为页框数, large置为true */
			a->desc = NULL;
c0002ec8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002ecb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/kernel/memory.c:359
			a->cnt = page_cnt;
c0002ed1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002ed4:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0002ed7:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/kernel/memory.c:360
			a->large = true;
c0002eda:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002edd:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/kernel/memory.c:362

			lock_release(&mem_pool->lock);
c0002ee4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002ee7:	83 c0 10             	add    $0x10,%eax
c0002eea:	83 ec 0c             	sub    $0xc,%esp
c0002eed:	50                   	push   %eax
c0002eee:	e8 33 1d 00 00       	call   c0004c26 <lock_release>
c0002ef3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:363
			return (void*)(a + 1);	// 跨过arena大小，把剩下的内存返回
c0002ef6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002ef9:	83 c0 0c             	add    $0xc,%eax
c0002efc:	e9 2e 02 00 00       	jmp    c000312f <sys_malloc+0x333>
/work/x86_os_my/kernel/memory.c:365
		} else {
			lock_release(&mem_pool->lock);
c0002f01:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002f04:	83 c0 10             	add    $0x10,%eax
c0002f07:	83 ec 0c             	sub    $0xc,%esp
c0002f0a:	50                   	push   %eax
c0002f0b:	e8 16 1d 00 00       	call   c0004c26 <lock_release>
c0002f10:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:366
			return NULL;
c0002f13:	b8 00 00 00 00       	mov    $0x0,%eax
c0002f18:	e9 12 02 00 00       	jmp    c000312f <sys_malloc+0x333>
/work/x86_os_my/kernel/memory.c:374
	} else {
	/* 若申请的内存小于等于1024,可在各种规格的mem_block_desc中去适配 */
		uint8_t desc_idx;

		/* 从内存块描述符中匹配合适的内存块规格 */
		for (desc_idx = 0; desc_idx < DESC_CNT; desc_idx++) {
c0002f1d:	c6 45 e7 00          	movb   $0x0,-0x19(%ebp)
c0002f21:	eb 25                	jmp    c0002f48 <sys_malloc+0x14c>
/work/x86_os_my/kernel/memory.c:375
			if (size <= descs[desc_idx].block_size) {	// 从小往大后,找到后退出
c0002f23:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0002f27:	89 d0                	mov    %edx,%eax
c0002f29:	01 c0                	add    %eax,%eax
c0002f2b:	01 d0                	add    %edx,%eax
c0002f2d:	c1 e0 03             	shl    $0x3,%eax
c0002f30:	89 c2                	mov    %eax,%edx
c0002f32:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002f35:	01 d0                	add    %edx,%eax
c0002f37:	8b 00                	mov    (%eax),%eax
c0002f39:	3b 45 08             	cmp    0x8(%ebp),%eax
c0002f3c:	73 12                	jae    c0002f50 <sys_malloc+0x154>
/work/x86_os_my/kernel/memory.c:374 (discriminator 2)
	} else {
	/* 若申请的内存小于等于1024,可在各种规格的mem_block_desc中去适配 */
		uint8_t desc_idx;

		/* 从内存块描述符中匹配合适的内存块规格 */
		for (desc_idx = 0; desc_idx < DESC_CNT; desc_idx++) {
c0002f3e:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c0002f42:	83 c0 01             	add    $0x1,%eax
c0002f45:	88 45 e7             	mov    %al,-0x19(%ebp)
/work/x86_os_my/kernel/memory.c:374 (discriminator 1)
c0002f48:	80 7d e7 06          	cmpb   $0x6,-0x19(%ebp)
c0002f4c:	76 d5                	jbe    c0002f23 <sys_malloc+0x127>
c0002f4e:	eb 01                	jmp    c0002f51 <sys_malloc+0x155>
/work/x86_os_my/kernel/memory.c:376
			if (size <= descs[desc_idx].block_size) {	// 从小往大后,找到后退出
				break;
c0002f50:	90                   	nop
/work/x86_os_my/kernel/memory.c:382
			}
		}

		/* 若mem_block_desc的free_list中已经没有可用的mem_block,
		 * 就创建新的arena提供mem_block */
		if (list_empty(&descs[desc_idx].free_list)) {
c0002f51:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0002f55:	89 d0                	mov    %edx,%eax
c0002f57:	01 c0                	add    %eax,%eax
c0002f59:	01 d0                	add    %edx,%eax
c0002f5b:	c1 e0 03             	shl    $0x3,%eax
c0002f5e:	89 c2                	mov    %eax,%edx
c0002f60:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002f63:	01 d0                	add    %edx,%eax
c0002f65:	83 c0 08             	add    $0x8,%eax
c0002f68:	83 ec 0c             	sub    $0xc,%esp
c0002f6b:	50                   	push   %eax
c0002f6c:	e8 48 19 00 00       	call   c00048b9 <list_empty>
c0002f71:	83 c4 10             	add    $0x10,%esp
c0002f74:	85 c0                	test   %eax,%eax
c0002f76:	0f 84 31 01 00 00    	je     c00030ad <sys_malloc+0x2b1>
/work/x86_os_my/kernel/memory.c:383
			a = malloc_page(PF, 1);       // 分配1页框做为arena
c0002f7c:	83 ec 08             	sub    $0x8,%esp
c0002f7f:	6a 01                	push   $0x1
c0002f81:	ff 75 f4             	pushl  -0xc(%ebp)
c0002f84:	e8 ae fa ff ff       	call   c0002a37 <malloc_page>
c0002f89:	83 c4 10             	add    $0x10,%esp
c0002f8c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/kernel/memory.c:384
			if (a == NULL) {
c0002f8f:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0002f93:	75 1c                	jne    c0002fb1 <sys_malloc+0x1b5>
/work/x86_os_my/kernel/memory.c:385
				lock_release(&mem_pool->lock);
c0002f95:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002f98:	83 c0 10             	add    $0x10,%eax
c0002f9b:	83 ec 0c             	sub    $0xc,%esp
c0002f9e:	50                   	push   %eax
c0002f9f:	e8 82 1c 00 00       	call   c0004c26 <lock_release>
c0002fa4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:386
				return NULL;
c0002fa7:	b8 00 00 00 00       	mov    $0x0,%eax
c0002fac:	e9 7e 01 00 00       	jmp    c000312f <sys_malloc+0x333>
/work/x86_os_my/kernel/memory.c:388
			}
			memset(a, 0, PG_SIZE);
c0002fb1:	83 ec 04             	sub    $0x4,%esp
c0002fb4:	68 00 10 00 00       	push   $0x1000
c0002fb9:	6a 00                	push   $0x0
c0002fbb:	ff 75 d4             	pushl  -0x2c(%ebp)
c0002fbe:	e8 30 09 00 00       	call   c00038f3 <memset>
c0002fc3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:392

			// 【arena结构体初始化，情况2】
			/* 对于分配的小块内存,将desc置为相应内存块描述符, cnt置为此arena可用的内存块数, large置为false */
			a->desc = &descs[desc_idx];
c0002fc6:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0002fca:	89 d0                	mov    %edx,%eax
c0002fcc:	01 c0                	add    %eax,%eax
c0002fce:	01 d0                	add    %edx,%eax
c0002fd0:	c1 e0 03             	shl    $0x3,%eax
c0002fd3:	89 c2                	mov    %eax,%edx
c0002fd5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002fd8:	01 c2                	add    %eax,%edx
c0002fda:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002fdd:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/kernel/memory.c:393
			a->large = false;
c0002fdf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002fe2:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
/work/x86_os_my/kernel/memory.c:394
			a->cnt = descs[desc_idx].blocks_per_arena;
c0002fe9:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0002fed:	89 d0                	mov    %edx,%eax
c0002fef:	01 c0                	add    %eax,%eax
c0002ff1:	01 d0                	add    %edx,%eax
c0002ff3:	c1 e0 03             	shl    $0x3,%eax
c0002ff6:	89 c2                	mov    %eax,%edx
c0002ff8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002ffb:	01 d0                	add    %edx,%eax
c0002ffd:	8b 50 04             	mov    0x4(%eax),%edx
c0003000:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0003003:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/kernel/memory.c:396

			enum intr_status old_status = intr_disable();
c0003006:	e8 62 ea ff ff       	call   c0001a6d <intr_disable>
c000300b:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/kernel/memory.c:399
			/* 开始将arena拆分成内存块,并添加到内存块描述符的free_list中 */
			uint32_t block_idx;
			for (block_idx = 0; block_idx < descs[desc_idx].blocks_per_arena; block_idx++) {
c000300e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c0003015:	eb 68                	jmp    c000307f <sys_malloc+0x283>
/work/x86_os_my/kernel/memory.c:400
				b = arena2block(a, block_idx);
c0003017:	83 ec 08             	sub    $0x8,%esp
c000301a:	ff 75 e0             	pushl  -0x20(%ebp)
c000301d:	ff 75 d4             	pushl  -0x2c(%ebp)
c0003020:	e8 b0 fd ff ff       	call   c0002dd5 <arena2block>
c0003025:	83 c4 10             	add    $0x10,%esp
c0003028:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/kernel/memory.c:401
				ASSERT(!elem_find(&a->desc->free_list, &b->free_elem));
c000302b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c000302e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0003031:	8b 12                	mov    (%edx),%edx
c0003033:	83 c2 08             	add    $0x8,%edx
c0003036:	83 ec 08             	sub    $0x8,%esp
c0003039:	50                   	push   %eax
c000303a:	52                   	push   %edx
c000303b:	e8 ac 17 00 00       	call   c00047ec <elem_find>
c0003040:	83 c4 10             	add    $0x10,%esp
c0003043:	85 c0                	test   %eax,%eax
c0003045:	74 1c                	je     c0003063 <sys_malloc+0x267>
/work/x86_os_my/kernel/memory.c:401 (discriminator 1)
c0003047:	68 04 cf 00 c0       	push   $0xc000cf04
c000304c:	68 c4 d1 00 c0       	push   $0xc000d1c4
c0003051:	68 91 01 00 00       	push   $0x191
c0003056:	68 4b ce 00 c0       	push   $0xc000ce4b
c000305b:	e8 f1 f3 ff ff       	call   c0002451 <panic_spin>
c0003060:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:402 (discriminator 2)
				list_append(&a->desc->free_list, &b->free_elem);
c0003063:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0003066:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0003069:	8b 12                	mov    (%edx),%edx
c000306b:	83 c2 08             	add    $0x8,%edx
c000306e:	83 ec 08             	sub    $0x8,%esp
c0003071:	50                   	push   %eax
c0003072:	52                   	push   %edx
c0003073:	e8 fa 16 00 00       	call   c0004772 <list_append>
c0003078:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:399 (discriminator 2)
			a->cnt = descs[desc_idx].blocks_per_arena;

			enum intr_status old_status = intr_disable();
			/* 开始将arena拆分成内存块,并添加到内存块描述符的free_list中 */
			uint32_t block_idx;
			for (block_idx = 0; block_idx < descs[desc_idx].blocks_per_arena; block_idx++) {
c000307b:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
/work/x86_os_my/kernel/memory.c:399 (discriminator 1)
c000307f:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0003083:	89 d0                	mov    %edx,%eax
c0003085:	01 c0                	add    %eax,%eax
c0003087:	01 d0                	add    %edx,%eax
c0003089:	c1 e0 03             	shl    $0x3,%eax
c000308c:	89 c2                	mov    %eax,%edx
c000308e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0003091:	01 d0                	add    %edx,%eax
c0003093:	8b 40 04             	mov    0x4(%eax),%eax
c0003096:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0003099:	0f 87 78 ff ff ff    	ja     c0003017 <sys_malloc+0x21b>
/work/x86_os_my/kernel/memory.c:404
				b = arena2block(a, block_idx);
				ASSERT(!elem_find(&a->desc->free_list, &b->free_elem));
				list_append(&a->desc->free_list, &b->free_elem);
			}
			intr_set_status(old_status);
c000309f:	83 ec 0c             	sub    $0xc,%esp
c00030a2:	ff 75 d0             	pushl  -0x30(%ebp)
c00030a5:	e8 ec e9 ff ff       	call   c0001a96 <intr_set_status>
c00030aa:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:408
		}

		/* 开始分配内存块 */
		b = elem2entry(struct mem_block, free_elem, list_pop(&(descs[desc_idx].free_list)));
c00030ad:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c00030b1:	89 d0                	mov    %edx,%eax
c00030b3:	01 c0                	add    %eax,%eax
c00030b5:	01 d0                	add    %edx,%eax
c00030b7:	c1 e0 03             	shl    $0x3,%eax
c00030ba:	89 c2                	mov    %eax,%edx
c00030bc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00030bf:	01 d0                	add    %edx,%eax
c00030c1:	83 c0 08             	add    $0x8,%eax
c00030c4:	83 ec 0c             	sub    $0xc,%esp
c00030c7:	50                   	push   %eax
c00030c8:	e8 fd 16 00 00       	call   c00047ca <list_pop>
c00030cd:	83 c4 10             	add    $0x10,%esp
c00030d0:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/kernel/memory.c:409
		memset(b, 0, descs[desc_idx].block_size);
c00030d3:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c00030d7:	89 d0                	mov    %edx,%eax
c00030d9:	01 c0                	add    %eax,%eax
c00030db:	01 d0                	add    %edx,%eax
c00030dd:	c1 e0 03             	shl    $0x3,%eax
c00030e0:	89 c2                	mov    %eax,%edx
c00030e2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00030e5:	01 d0                	add    %edx,%eax
c00030e7:	8b 00                	mov    (%eax),%eax
c00030e9:	83 ec 04             	sub    $0x4,%esp
c00030ec:	50                   	push   %eax
c00030ed:	6a 00                	push   $0x0
c00030ef:	ff 75 cc             	pushl  -0x34(%ebp)
c00030f2:	e8 fc 07 00 00       	call   c00038f3 <memset>
c00030f7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:411

		a = block2arena(b);	// 获取内存块b所在的arena
c00030fa:	83 ec 0c             	sub    $0xc,%esp
c00030fd:	ff 75 cc             	pushl  -0x34(%ebp)
c0003100:	e8 ea fc ff ff       	call   c0002def <block2arena>
c0003105:	83 c4 10             	add    $0x10,%esp
c0003108:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/kernel/memory.c:412
		a->cnt--;			// 将此arena中的空闲内存块数减1
c000310b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000310e:	8b 40 04             	mov    0x4(%eax),%eax
c0003111:	8d 50 ff             	lea    -0x1(%eax),%edx
c0003114:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0003117:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/kernel/memory.c:414

		lock_release(&mem_pool->lock);
c000311a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000311d:	83 c0 10             	add    $0x10,%eax
c0003120:	83 ec 0c             	sub    $0xc,%esp
c0003123:	50                   	push   %eax
c0003124:	e8 fd 1a 00 00       	call   c0004c26 <lock_release>
c0003129:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:415
		return (void*)b;
c000312c:	8b 45 cc             	mov    -0x34(%ebp),%eax
/work/x86_os_my/kernel/memory.c:417
	}
}
c000312f:	c9                   	leave  
c0003130:	c3                   	ret    

c0003131 <pfree>:
pfree():
/work/x86_os_my/kernel/memory.c:422

/* 将物理地址pg_phy_addr回收到物理内存池
 * 清理物理地址池位图
 */
void pfree(uint32_t pg_phy_addr) {
c0003131:	55                   	push   %ebp
c0003132:	89 e5                	mov    %esp,%ebp
c0003134:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:424
	struct pool* mem_pool;
	uint32_t bit_idx = 0;
c0003137:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:425
	if (pg_phy_addr >= user_pool.phy_addr_start) {	// 用户物理内存池
c000313e:	a1 a8 20 01 c0       	mov    0xc00120a8,%eax
c0003143:	3b 45 08             	cmp    0x8(%ebp),%eax
c0003146:	77 1b                	ja     c0003163 <pfree+0x32>
/work/x86_os_my/kernel/memory.c:426
		mem_pool = &user_pool;
c0003148:	c7 45 f4 a0 20 01 c0 	movl   $0xc00120a0,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:427
		bit_idx = (pg_phy_addr - user_pool.phy_addr_start) / PG_SIZE;
c000314f:	a1 a8 20 01 c0       	mov    0xc00120a8,%eax
c0003154:	8b 55 08             	mov    0x8(%ebp),%edx
c0003157:	29 c2                	sub    %eax,%edx
c0003159:	89 d0                	mov    %edx,%eax
c000315b:	c1 e8 0c             	shr    $0xc,%eax
c000315e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0003161:	eb 19                	jmp    c000317c <pfree+0x4b>
/work/x86_os_my/kernel/memory.c:429
	} else {	// 内核物理内存池
		mem_pool = &kernel_pool;
c0003163:	c7 45 f4 a0 21 01 c0 	movl   $0xc00121a0,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:430
		bit_idx = (pg_phy_addr - kernel_pool.phy_addr_start) / PG_SIZE;
c000316a:	a1 a8 21 01 c0       	mov    0xc00121a8,%eax
c000316f:	8b 55 08             	mov    0x8(%ebp),%edx
c0003172:	29 c2                	sub    %eax,%edx
c0003174:	89 d0                	mov    %edx,%eax
c0003176:	c1 e8 0c             	shr    $0xc,%eax
c0003179:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:432
	}
	bitmap_set(&mem_pool->pool_bitmap, bit_idx, 0);	// 将位图中该位清0
c000317c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000317f:	83 ec 04             	sub    $0x4,%esp
c0003182:	6a 00                	push   $0x0
c0003184:	ff 75 f0             	pushl  -0x10(%ebp)
c0003187:	50                   	push   %eax
c0003188:	e8 32 f5 ff ff       	call   c00026bf <bitmap_set>
c000318d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:433
}
c0003190:	90                   	nop
c0003191:	c9                   	leave  
c0003192:	c3                   	ret    

c0003193 <page_table_pte_remove>:
page_table_pte_remove():
/work/x86_os_my/kernel/memory.c:436

/* 去掉页表中虚拟地址vaddr的映射,只去掉vaddr对应的pte */
static void page_table_pte_remove(uint32_t vaddr) {
c0003193:	55                   	push   %ebp
c0003194:	89 e5                	mov    %esp,%ebp
c0003196:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/memory.c:437
	uint32_t* pte = pte_ptr(vaddr);
c0003199:	8b 45 08             	mov    0x8(%ebp),%eax
c000319c:	50                   	push   %eax
c000319d:	e8 e4 f6 ff ff       	call   c0002886 <pte_ptr>
c00031a2:	83 c4 04             	add    $0x4,%esp
c00031a5:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/kernel/memory.c:438
	*pte &= ~PG_P_1;	// 将页表项pte的P位置0
c00031a8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c00031ab:	8b 00                	mov    (%eax),%eax
c00031ad:	83 e0 fe             	and    $0xfffffffe,%eax
c00031b0:	89 c2                	mov    %eax,%edx
c00031b2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c00031b5:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/kernel/memory.c:439
	asm volatile ("invlpg %0"::"m" (vaddr):"memory");	//更新tlb
c00031b7:	0f 01 7d 08          	invlpg 0x8(%ebp)
/work/x86_os_my/kernel/memory.c:442
	/*更新 TLB 有两种方式，一是用 invlpg 指令更新单条虚拟地址条目，
	另外一个是重新加载 cr3 寄存器，这将直接清空 TLB，相当于更新整个页表。*/
}
c00031bb:	90                   	nop
c00031bc:	c9                   	leave  
c00031bd:	c3                   	ret    

c00031be <vaddr_remove>:
vaddr_remove():
/work/x86_os_my/kernel/memory.c:447

/* 在虚拟地址池中释放以_vaddr起始的连续pg_cnt个虚拟页地址
 * 清理虚拟地址池位图
 */
static void vaddr_remove(enum pool_flags pf, void* _vaddr, uint32_t pg_cnt) {
c00031be:	55                   	push   %ebp
c00031bf:	89 e5                	mov    %esp,%ebp
c00031c1:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:448
	uint32_t bit_idx_start = 0, vaddr = (uint32_t)_vaddr, cnt = 0;
c00031c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c00031cb:	8b 45 0c             	mov    0xc(%ebp),%eax
c00031ce:	89 45 ec             	mov    %eax,-0x14(%ebp)
c00031d1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:450

	if (pf == PF_KERNEL) {	// 内核虚拟内存池
c00031d8:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c00031dc:	75 3f                	jne    c000321d <vaddr_remove+0x5f>
/work/x86_os_my/kernel/memory.c:451
		bit_idx_start = (vaddr - kernel_vaddr.vaddr_start) / PG_SIZE;
c00031de:	a1 90 21 01 c0       	mov    0xc0012190,%eax
c00031e3:	8b 55 ec             	mov    -0x14(%ebp),%edx
c00031e6:	29 c2                	sub    %eax,%edx
c00031e8:	89 d0                	mov    %edx,%eax
c00031ea:	c1 e8 0c             	shr    $0xc,%eax
c00031ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:452
		while(cnt < pg_cnt) {
c00031f0:	eb 21                	jmp    c0003213 <vaddr_remove+0x55>
/work/x86_os_my/kernel/memory.c:453
			bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
c00031f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00031f5:	8d 50 01             	lea    0x1(%eax),%edx
c00031f8:	89 55 f4             	mov    %edx,-0xc(%ebp)
c00031fb:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00031fe:	01 d0                	add    %edx,%eax
c0003200:	83 ec 04             	sub    $0x4,%esp
c0003203:	6a 00                	push   $0x0
c0003205:	50                   	push   %eax
c0003206:	68 88 21 01 c0       	push   $0xc0012188
c000320b:	e8 af f4 ff ff       	call   c00026bf <bitmap_set>
c0003210:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:452
static void vaddr_remove(enum pool_flags pf, void* _vaddr, uint32_t pg_cnt) {
	uint32_t bit_idx_start = 0, vaddr = (uint32_t)_vaddr, cnt = 0;

	if (pf == PF_KERNEL) {	// 内核虚拟内存池
		bit_idx_start = (vaddr - kernel_vaddr.vaddr_start) / PG_SIZE;
		while(cnt < pg_cnt) {
c0003213:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003216:	3b 45 10             	cmp    0x10(%ebp),%eax
c0003219:	72 d7                	jb     c00031f2 <vaddr_remove+0x34>
/work/x86_os_my/kernel/memory.c:462
		bit_idx_start = (vaddr - cur_thread->userprog_vaddr.vaddr_start) / PG_SIZE;
		while(cnt < pg_cnt) {
			bitmap_set(&cur_thread->userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
		}
	}
}
c000321b:	eb 48                	jmp    c0003265 <vaddr_remove+0xa7>
/work/x86_os_my/kernel/memory.c:456
		bit_idx_start = (vaddr - kernel_vaddr.vaddr_start) / PG_SIZE;
		while(cnt < pg_cnt) {
			bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
		}
	} else {	// 用户虚拟内存池
		struct task_struct* cur_thread = running_thread();
c000321d:	e8 b8 0a 00 00       	call   c0003cda <running_thread>
c0003222:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:457
		bit_idx_start = (vaddr - cur_thread->userprog_vaddr.vaddr_start) / PG_SIZE;
c0003225:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0003228:	8b 40 60             	mov    0x60(%eax),%eax
c000322b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c000322e:	29 c2                	sub    %eax,%edx
c0003230:	89 d0                	mov    %edx,%eax
c0003232:	c1 e8 0c             	shr    $0xc,%eax
c0003235:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:458
		while(cnt < pg_cnt) {
c0003238:	eb 23                	jmp    c000325d <vaddr_remove+0x9f>
/work/x86_os_my/kernel/memory.c:459
			bitmap_set(&cur_thread->userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
c000323a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000323d:	8d 50 01             	lea    0x1(%eax),%edx
c0003240:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0003243:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0003246:	01 c2                	add    %eax,%edx
c0003248:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000324b:	83 c0 58             	add    $0x58,%eax
c000324e:	83 ec 04             	sub    $0x4,%esp
c0003251:	6a 00                	push   $0x0
c0003253:	52                   	push   %edx
c0003254:	50                   	push   %eax
c0003255:	e8 65 f4 ff ff       	call   c00026bf <bitmap_set>
c000325a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:458
			bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
		}
	} else {	// 用户虚拟内存池
		struct task_struct* cur_thread = running_thread();
		bit_idx_start = (vaddr - cur_thread->userprog_vaddr.vaddr_start) / PG_SIZE;
		while(cnt < pg_cnt) {
c000325d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003260:	3b 45 10             	cmp    0x10(%ebp),%eax
c0003263:	72 d5                	jb     c000323a <vaddr_remove+0x7c>
/work/x86_os_my/kernel/memory.c:462
			bitmap_set(&cur_thread->userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
		}
	}
}
c0003265:	90                   	nop
c0003266:	c9                   	leave  
c0003267:	c3                   	ret    

c0003268 <mfree_page>:
mfree_page():
/work/x86_os_my/kernel/memory.c:465

/* 释放以虚拟地址vaddr为起始的cnt个物理页框 */
void mfree_page(enum pool_flags pf, void* _vaddr, uint32_t pg_cnt) {
c0003268:	55                   	push   %ebp
c0003269:	89 e5                	mov    %esp,%ebp
c000326b:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:467
	uint32_t pg_phy_addr;
	uint32_t vaddr = (int32_t)_vaddr, page_cnt = 0;
c000326e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003271:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0003274:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:468
	ASSERT(pg_cnt >=1 && vaddr % PG_SIZE == 0);
c000327b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c000327f:	74 0c                	je     c000328d <mfree_page+0x25>
/work/x86_os_my/kernel/memory.c:468 (discriminator 1)
c0003281:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003284:	25 ff 0f 00 00       	and    $0xfff,%eax
c0003289:	85 c0                	test   %eax,%eax
c000328b:	74 1c                	je     c00032a9 <mfree_page+0x41>
/work/x86_os_my/kernel/memory.c:468 (discriminator 3)
c000328d:	68 34 cf 00 c0       	push   $0xc000cf34
c0003292:	68 d0 d1 00 c0       	push   $0xc000d1d0
c0003297:	68 d4 01 00 00       	push   $0x1d4
c000329c:	68 4b ce 00 c0       	push   $0xc000ce4b
c00032a1:	e8 ab f1 ff ff       	call   c0002451 <panic_spin>
c00032a6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:469
	pg_phy_addr = addr_v2p(vaddr);
c00032a9:	83 ec 0c             	sub    $0xc,%esp
c00032ac:	ff 75 f4             	pushl  -0xc(%ebp)
c00032af:	e8 f5 fa ff ff       	call   c0002da9 <addr_v2p>
c00032b4:	83 c4 10             	add    $0x10,%esp
c00032b7:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:472

	/* 确保待释放的物理内存在低端1M+1k大小的页目录+1k大小的页表地址范围外【内核空间】 */
	ASSERT((pg_phy_addr % PG_SIZE) == 0 && pg_phy_addr >= 0x102000);
c00032ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00032bd:	25 ff 0f 00 00       	and    $0xfff,%eax
c00032c2:	85 c0                	test   %eax,%eax
c00032c4:	75 09                	jne    c00032cf <mfree_page+0x67>
/work/x86_os_my/kernel/memory.c:472 (discriminator 1)
c00032c6:	81 7d ec ff 1f 10 00 	cmpl   $0x101fff,-0x14(%ebp)
c00032cd:	77 1c                	ja     c00032eb <mfree_page+0x83>
/work/x86_os_my/kernel/memory.c:472 (discriminator 3)
c00032cf:	68 58 cf 00 c0       	push   $0xc000cf58
c00032d4:	68 d0 d1 00 c0       	push   $0xc000d1d0
c00032d9:	68 d8 01 00 00       	push   $0x1d8
c00032de:	68 4b ce 00 c0       	push   $0xc000ce4b
c00032e3:	e8 69 f1 ff ff       	call   c0002451 <panic_spin>
c00032e8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:476

	/* 判断pg_phy_addr属于用户物理内存池还是内核物理内存池 */
	/* 位于user_pool内存池 */
	if (pg_phy_addr >= user_pool.phy_addr_start) {
c00032eb:	a1 a8 20 01 c0       	mov    0xc00120a8,%eax
c00032f0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c00032f3:	0f 87 94 00 00 00    	ja     c000338d <mfree_page+0x125>
/work/x86_os_my/kernel/memory.c:477
		vaddr -= PG_SIZE;
c00032f9:	81 6d f4 00 10 00 00 	subl   $0x1000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:478
		while (page_cnt < pg_cnt) {
c0003300:	eb 6a                	jmp    c000336c <mfree_page+0x104>
/work/x86_os_my/kernel/memory.c:479
			vaddr += PG_SIZE;
c0003302:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:480
			pg_phy_addr = addr_v2p(vaddr);
c0003309:	83 ec 0c             	sub    $0xc,%esp
c000330c:	ff 75 f4             	pushl  -0xc(%ebp)
c000330f:	e8 95 fa ff ff       	call   c0002da9 <addr_v2p>
c0003314:	83 c4 10             	add    $0x10,%esp
c0003317:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:483

			/* 确保物理地址属于用户物理内存池 */
			ASSERT((pg_phy_addr % PG_SIZE) == 0 && pg_phy_addr >= user_pool.phy_addr_start);
c000331a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000331d:	25 ff 0f 00 00       	and    $0xfff,%eax
c0003322:	85 c0                	test   %eax,%eax
c0003324:	75 0a                	jne    c0003330 <mfree_page+0xc8>
/work/x86_os_my/kernel/memory.c:483 (discriminator 1)
c0003326:	a1 a8 20 01 c0       	mov    0xc00120a8,%eax
c000332b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c000332e:	76 1c                	jbe    c000334c <mfree_page+0xe4>
/work/x86_os_my/kernel/memory.c:483 (discriminator 3)
c0003330:	68 90 cf 00 c0       	push   $0xc000cf90
c0003335:	68 d0 d1 00 c0       	push   $0xc000d1d0
c000333a:	68 e3 01 00 00       	push   $0x1e3
c000333f:	68 4b ce 00 c0       	push   $0xc000ce4b
c0003344:	e8 08 f1 ff ff       	call   c0002451 <panic_spin>
c0003349:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:486

			/* 先将对应的物理页框归还到内存池 */
			pfree(pg_phy_addr);
c000334c:	83 ec 0c             	sub    $0xc,%esp
c000334f:	ff 75 ec             	pushl  -0x14(%ebp)
c0003352:	e8 da fd ff ff       	call   c0003131 <pfree>
c0003357:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:489

			/* 再从页表中清除此虚拟地址所在的页表项pte */
			page_table_pte_remove(vaddr);
c000335a:	83 ec 0c             	sub    $0xc,%esp
c000335d:	ff 75 f4             	pushl  -0xc(%ebp)
c0003360:	e8 2e fe ff ff       	call   c0003193 <page_table_pte_remove>
c0003365:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:491

			page_cnt++;
c0003368:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:478

	/* 判断pg_phy_addr属于用户物理内存池还是内核物理内存池 */
	/* 位于user_pool内存池 */
	if (pg_phy_addr >= user_pool.phy_addr_start) {
		vaddr -= PG_SIZE;
		while (page_cnt < pg_cnt) {
c000336c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000336f:	3b 45 10             	cmp    0x10(%ebp),%eax
c0003372:	72 8e                	jb     c0003302 <mfree_page+0x9a>
/work/x86_os_my/kernel/memory.c:494
			page_table_pte_remove(vaddr);

			page_cnt++;
		}
		/* 清空虚拟地址的位图中的相应位 */
		vaddr_remove(pf, _vaddr, pg_cnt);
c0003374:	83 ec 04             	sub    $0x4,%esp
c0003377:	ff 75 10             	pushl  0x10(%ebp)
c000337a:	ff 75 0c             	pushl  0xc(%ebp)
c000337d:	ff 75 08             	pushl  0x8(%ebp)
c0003380:	e8 39 fe ff ff       	call   c00031be <vaddr_remove>
c0003385:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:518
			page_cnt++;
		}
		/* 清空虚拟地址的位图中的相应位 */
		vaddr_remove(pf, _vaddr, pg_cnt);
	}
}
c0003388:	e9 99 00 00 00       	jmp    c0003426 <mfree_page+0x1be>
/work/x86_os_my/kernel/memory.c:498
		/* 清空虚拟地址的位图中的相应位 */
		vaddr_remove(pf, _vaddr, pg_cnt);

	} else {
		/* 位于kernel_pool内存池 */
		vaddr -= PG_SIZE;
c000338d:	81 6d f4 00 10 00 00 	subl   $0x1000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:499
		while (page_cnt < pg_cnt) {
c0003394:	eb 74                	jmp    c000340a <mfree_page+0x1a2>
/work/x86_os_my/kernel/memory.c:500
			vaddr += PG_SIZE;
c0003396:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:501
			pg_phy_addr = addr_v2p(vaddr);
c000339d:	83 ec 0c             	sub    $0xc,%esp
c00033a0:	ff 75 f4             	pushl  -0xc(%ebp)
c00033a3:	e8 01 fa ff ff       	call   c0002da9 <addr_v2p>
c00033a8:	83 c4 10             	add    $0x10,%esp
c00033ab:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:504

			/* 确保待释放的物理内存只属于内核物理内存池 */
			ASSERT((pg_phy_addr % PG_SIZE) == 0 && pg_phy_addr >= kernel_pool.phy_addr_start && \
c00033ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00033b1:	25 ff 0f 00 00       	and    $0xfff,%eax
c00033b6:	85 c0                	test   %eax,%eax
c00033b8:	75 14                	jne    c00033ce <mfree_page+0x166>
/work/x86_os_my/kernel/memory.c:504 (discriminator 1)
c00033ba:	a1 a8 21 01 c0       	mov    0xc00121a8,%eax
c00033bf:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c00033c2:	77 0a                	ja     c00033ce <mfree_page+0x166>
/work/x86_os_my/kernel/memory.c:504 (discriminator 3)
c00033c4:	a1 a8 20 01 c0       	mov    0xc00120a8,%eax
c00033c9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c00033cc:	77 1c                	ja     c00033ea <mfree_page+0x182>
/work/x86_os_my/kernel/memory.c:504 (discriminator 5)
c00033ce:	68 d8 cf 00 c0       	push   $0xc000cfd8
c00033d3:	68 d0 d1 00 c0       	push   $0xc000d1d0
c00033d8:	68 f9 01 00 00       	push   $0x1f9
c00033dd:	68 4b ce 00 c0       	push   $0xc000ce4b
c00033e2:	e8 6a f0 ff ff       	call   c0002451 <panic_spin>
c00033e7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:508
					pg_phy_addr < user_pool.phy_addr_start);

			/* 先将对应的物理页框归还到内存池 */
			pfree(pg_phy_addr);
c00033ea:	83 ec 0c             	sub    $0xc,%esp
c00033ed:	ff 75 ec             	pushl  -0x14(%ebp)
c00033f0:	e8 3c fd ff ff       	call   c0003131 <pfree>
c00033f5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:511

			/* 再从页表中清除此虚拟地址所在的页表项pte */
			page_table_pte_remove(vaddr);
c00033f8:	83 ec 0c             	sub    $0xc,%esp
c00033fb:	ff 75 f4             	pushl  -0xc(%ebp)
c00033fe:	e8 90 fd ff ff       	call   c0003193 <page_table_pte_remove>
c0003403:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:513

			page_cnt++;
c0003406:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:499
		vaddr_remove(pf, _vaddr, pg_cnt);

	} else {
		/* 位于kernel_pool内存池 */
		vaddr -= PG_SIZE;
		while (page_cnt < pg_cnt) {
c000340a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000340d:	3b 45 10             	cmp    0x10(%ebp),%eax
c0003410:	72 84                	jb     c0003396 <mfree_page+0x12e>
/work/x86_os_my/kernel/memory.c:516
			page_table_pte_remove(vaddr);

			page_cnt++;
		}
		/* 清空虚拟地址的位图中的相应位 */
		vaddr_remove(pf, _vaddr, pg_cnt);
c0003412:	83 ec 04             	sub    $0x4,%esp
c0003415:	ff 75 10             	pushl  0x10(%ebp)
c0003418:	ff 75 0c             	pushl  0xc(%ebp)
c000341b:	ff 75 08             	pushl  0x8(%ebp)
c000341e:	e8 9b fd ff ff       	call   c00031be <vaddr_remove>
c0003423:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:518
	}
}
c0003426:	90                   	nop
c0003427:	c9                   	leave  
c0003428:	c3                   	ret    

c0003429 <sys_free>:
sys_free():
/work/x86_os_my/kernel/memory.c:521

/* 回收内存ptr */
void sys_free(void* ptr) {
c0003429:	55                   	push   %ebp
c000342a:	89 e5                	mov    %esp,%ebp
c000342c:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/kernel/memory.c:522
	ASSERT(ptr != NULL);
c000342f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003433:	75 1c                	jne    c0003451 <sys_free+0x28>
/work/x86_os_my/kernel/memory.c:522 (discriminator 1)
c0003435:	68 4c d0 00 c0       	push   $0xc000d04c
c000343a:	68 dc d1 00 c0       	push   $0xc000d1dc
c000343f:	68 0a 02 00 00       	push   $0x20a
c0003444:	68 4b ce 00 c0       	push   $0xc000ce4b
c0003449:	e8 03 f0 ff ff       	call   c0002451 <panic_spin>
c000344e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:523
	if (ptr != NULL) {
c0003451:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003455:	0f 84 b2 01 00 00    	je     c000360d <sys_free+0x1e4>
/work/x86_os_my/kernel/memory.c:528
		enum pool_flags PF;
		struct pool* mem_pool;

		/* 判断是线程还是进程 */
		if (running_thread()->pgdir == NULL) {
c000345b:	e8 7a 08 00 00       	call   c0003cda <running_thread>
c0003460:	8b 40 54             	mov    0x54(%eax),%eax
c0003463:	85 c0                	test   %eax,%eax
c0003465:	75 36                	jne    c000349d <sys_free+0x74>
/work/x86_os_my/kernel/memory.c:529
			ASSERT((uint32_t)ptr >= K_HEAP_START);
c0003467:	8b 45 08             	mov    0x8(%ebp),%eax
c000346a:	3d ff ff 0f c0       	cmp    $0xc00fffff,%eax
c000346f:	77 1c                	ja     c000348d <sys_free+0x64>
/work/x86_os_my/kernel/memory.c:529 (discriminator 1)
c0003471:	68 58 d0 00 c0       	push   $0xc000d058
c0003476:	68 dc d1 00 c0       	push   $0xc000d1dc
c000347b:	68 11 02 00 00       	push   $0x211
c0003480:	68 4b ce 00 c0       	push   $0xc000ce4b
c0003485:	e8 c7 ef ff ff       	call   c0002451 <panic_spin>
c000348a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:530
			PF = PF_KERNEL;
c000348d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:531
			mem_pool = &kernel_pool;
c0003494:	c7 45 f0 a0 21 01 c0 	movl   $0xc00121a0,-0x10(%ebp)
c000349b:	eb 0e                	jmp    c00034ab <sys_free+0x82>
/work/x86_os_my/kernel/memory.c:533
		} else {
			PF = PF_USER;
c000349d:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:534
			mem_pool = &user_pool;
c00034a4:	c7 45 f0 a0 20 01 c0 	movl   $0xc00120a0,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:537
		}

		lock_acquire(&mem_pool->lock);
c00034ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00034ae:	83 c0 10             	add    $0x10,%eax
c00034b1:	83 ec 0c             	sub    $0xc,%esp
c00034b4:	50                   	push   %eax
c00034b5:	e8 f5 16 00 00       	call   c0004baf <lock_acquire>
c00034ba:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:538
		struct mem_block* b = ptr;
c00034bd:	8b 45 08             	mov    0x8(%ebp),%eax
c00034c0:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:539
		struct arena* a = block2arena(b);			// 把mem_block转换成arena,获取元信息
c00034c3:	83 ec 0c             	sub    $0xc,%esp
c00034c6:	ff 75 e8             	pushl  -0x18(%ebp)
c00034c9:	e8 21 f9 ff ff       	call   c0002def <block2arena>
c00034ce:	83 c4 10             	add    $0x10,%esp
c00034d1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/kernel/memory.c:540
		ASSERT(a->large == 0 || a->large == 1);
c00034d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00034d7:	8b 40 08             	mov    0x8(%eax),%eax
c00034da:	85 c0                	test   %eax,%eax
c00034dc:	74 27                	je     c0003505 <sys_free+0xdc>
/work/x86_os_my/kernel/memory.c:540 (discriminator 1)
c00034de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00034e1:	8b 40 08             	mov    0x8(%eax),%eax
c00034e4:	83 f8 01             	cmp    $0x1,%eax
c00034e7:	74 1c                	je     c0003505 <sys_free+0xdc>
/work/x86_os_my/kernel/memory.c:540 (discriminator 2)
c00034e9:	68 78 d0 00 c0       	push   $0xc000d078
c00034ee:	68 dc d1 00 c0       	push   $0xc000d1dc
c00034f3:	68 1c 02 00 00       	push   $0x21c
c00034f8:	68 4b ce 00 c0       	push   $0xc000ce4b
c00034fd:	e8 4f ef ff ff       	call   c0002451 <panic_spin>
c0003502:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:541
		if (a->desc == NULL && a->large == true) {	// 大于1024的内存
c0003505:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0003508:	8b 00                	mov    (%eax),%eax
c000350a:	85 c0                	test   %eax,%eax
c000350c:	75 28                	jne    c0003536 <sys_free+0x10d>
/work/x86_os_my/kernel/memory.c:541 (discriminator 1)
c000350e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0003511:	8b 40 08             	mov    0x8(%eax),%eax
c0003514:	83 f8 01             	cmp    $0x1,%eax
c0003517:	75 1d                	jne    c0003536 <sys_free+0x10d>
/work/x86_os_my/kernel/memory.c:542
			mfree_page(PF, a, a->cnt);
c0003519:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000351c:	8b 40 04             	mov    0x4(%eax),%eax
c000351f:	83 ec 04             	sub    $0x4,%esp
c0003522:	50                   	push   %eax
c0003523:	ff 75 e4             	pushl  -0x1c(%ebp)
c0003526:	ff 75 f4             	pushl  -0xc(%ebp)
c0003529:	e8 3a fd ff ff       	call   c0003268 <mfree_page>
c000352e:	83 c4 10             	add    $0x10,%esp
c0003531:	e9 c5 00 00 00       	jmp    c00035fb <sys_free+0x1d2>
/work/x86_os_my/kernel/memory.c:546
		} else {									// 小于等于1024的内存块
			/* 先将内存块回收到free_list */
			// &b->free_elem == &b
			list_append(&a->desc->free_list, &b->free_elem);
c0003536:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0003539:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c000353c:	8b 12                	mov    (%edx),%edx
c000353e:	83 c2 08             	add    $0x8,%edx
c0003541:	83 ec 08             	sub    $0x8,%esp
c0003544:	50                   	push   %eax
c0003545:	52                   	push   %edx
c0003546:	e8 27 12 00 00       	call   c0004772 <list_append>
c000354b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:549

			/* 再判断此arena中的内存块是否都是空闲,如果是就释放arena */
			if (++a->cnt == a->desc->blocks_per_arena) {
c000354e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0003551:	8b 40 04             	mov    0x4(%eax),%eax
c0003554:	8d 50 01             	lea    0x1(%eax),%edx
c0003557:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000355a:	89 50 04             	mov    %edx,0x4(%eax)
c000355d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0003560:	8b 50 04             	mov    0x4(%eax),%edx
c0003563:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0003566:	8b 00                	mov    (%eax),%eax
c0003568:	8b 40 04             	mov    0x4(%eax),%eax
c000356b:	39 c2                	cmp    %eax,%edx
c000356d:	0f 85 88 00 00 00    	jne    c00035fb <sys_free+0x1d2>
/work/x86_os_my/kernel/memory.c:551
				uint32_t block_idx;
				for (block_idx = 0; block_idx < a->desc->blocks_per_arena; block_idx++) {
c0003573:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c000357a:	eb 5f                	jmp    c00035db <sys_free+0x1b2>
/work/x86_os_my/kernel/memory.c:552
					struct mem_block*  b = arena2block(a, block_idx);
c000357c:	83 ec 08             	sub    $0x8,%esp
c000357f:	ff 75 ec             	pushl  -0x14(%ebp)
c0003582:	ff 75 e4             	pushl  -0x1c(%ebp)
c0003585:	e8 4b f8 ff ff       	call   c0002dd5 <arena2block>
c000358a:	83 c4 10             	add    $0x10,%esp
c000358d:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/kernel/memory.c:553
					ASSERT(elem_find(&a->desc->free_list, &b->free_elem));
c0003590:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0003593:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0003596:	8b 12                	mov    (%edx),%edx
c0003598:	83 c2 08             	add    $0x8,%edx
c000359b:	83 ec 08             	sub    $0x8,%esp
c000359e:	50                   	push   %eax
c000359f:	52                   	push   %edx
c00035a0:	e8 47 12 00 00       	call   c00047ec <elem_find>
c00035a5:	83 c4 10             	add    $0x10,%esp
c00035a8:	85 c0                	test   %eax,%eax
c00035aa:	75 1c                	jne    c00035c8 <sys_free+0x19f>
/work/x86_os_my/kernel/memory.c:553 (discriminator 1)
c00035ac:	68 98 d0 00 c0       	push   $0xc000d098
c00035b1:	68 dc d1 00 c0       	push   $0xc000d1dc
c00035b6:	68 29 02 00 00       	push   $0x229
c00035bb:	68 4b ce 00 c0       	push   $0xc000ce4b
c00035c0:	e8 8c ee ff ff       	call   c0002451 <panic_spin>
c00035c5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:554 (discriminator 2)
					list_remove(&b->free_elem);
c00035c8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00035cb:	83 ec 0c             	sub    $0xc,%esp
c00035ce:	50                   	push   %eax
c00035cf:	e8 bc 11 00 00       	call   c0004790 <list_remove>
c00035d4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:551 (discriminator 2)
			list_append(&a->desc->free_list, &b->free_elem);

			/* 再判断此arena中的内存块是否都是空闲,如果是就释放arena */
			if (++a->cnt == a->desc->blocks_per_arena) {
				uint32_t block_idx;
				for (block_idx = 0; block_idx < a->desc->blocks_per_arena; block_idx++) {
c00035d7:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:551 (discriminator 1)
c00035db:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00035de:	8b 00                	mov    (%eax),%eax
c00035e0:	8b 40 04             	mov    0x4(%eax),%eax
c00035e3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c00035e6:	77 94                	ja     c000357c <sys_free+0x153>
/work/x86_os_my/kernel/memory.c:556
					struct mem_block*  b = arena2block(a, block_idx);
					ASSERT(elem_find(&a->desc->free_list, &b->free_elem));
					list_remove(&b->free_elem);
				}
				mfree_page(PF, a, 1);
c00035e8:	83 ec 04             	sub    $0x4,%esp
c00035eb:	6a 01                	push   $0x1
c00035ed:	ff 75 e4             	pushl  -0x1c(%ebp)
c00035f0:	ff 75 f4             	pushl  -0xc(%ebp)
c00035f3:	e8 70 fc ff ff       	call   c0003268 <mfree_page>
c00035f8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:559
			}
		}
		lock_release(&mem_pool->lock);
c00035fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00035fe:	83 c0 10             	add    $0x10,%eax
c0003601:	83 ec 0c             	sub    $0xc,%esp
c0003604:	50                   	push   %eax
c0003605:	e8 1c 16 00 00       	call   c0004c26 <lock_release>
c000360a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:561
	}
}
c000360d:	90                   	nop
c000360e:	c9                   	leave  
c000360f:	c3                   	ret    

c0003610 <mem_pool_init>:
mem_pool_init():
/work/x86_os_my/kernel/memory.c:564

/* 初始化内存池 */
static void mem_pool_init(uint32_t all_mem) {
c0003610:	55                   	push   %ebp
c0003611:	89 e5                	mov    %esp,%ebp
c0003613:	83 ec 38             	sub    $0x38,%esp
/work/x86_os_my/kernel/memory.c:565
	put_str("   mem_pool_init start\n");
c0003616:	83 ec 0c             	sub    $0xc,%esp
c0003619:	68 c6 d0 00 c0       	push   $0xc000d0c6
c000361e:	e8 7d ec ff ff       	call   c00022a0 <put_str>
c0003623:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:566
	uint32_t page_table_size = PG_SIZE * 256;		// 页表大小= 1页的页目录表+第0和第768个页目录项指向同一个页表+
c0003626:	c7 45 f4 00 00 10 00 	movl   $0x100000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:568
													// 第769~1022个页目录项共指向254个页表,共256个页框
	uint32_t used_mem = page_table_size + 0x100000;	// 0x100000为低端1M内存
c000362d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003630:	05 00 00 10 00       	add    $0x100000,%eax
c0003635:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:569
	uint32_t free_mem = all_mem - used_mem;
c0003638:	8b 45 08             	mov    0x8(%ebp),%eax
c000363b:	2b 45 f0             	sub    -0x10(%ebp),%eax
c000363e:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:570
	uint16_t all_free_pages = free_mem / PG_SIZE;	// 1页为4k,不管总内存是不是4k的倍数,
c0003641:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0003644:	c1 e8 0c             	shr    $0xc,%eax
c0003647:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
/work/x86_os_my/kernel/memory.c:572
													// 对于以页为单位的内存分配策略，不足1页的内存不用考虑了。
	uint16_t kernel_free_pages = all_free_pages / 2;
c000364b:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c000364f:	66 d1 e8             	shr    %ax
c0003652:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:573
	uint16_t user_free_pages = all_free_pages - kernel_free_pages;
c0003656:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c000365a:	66 2b 45 e8          	sub    -0x18(%ebp),%ax
c000365e:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
/work/x86_os_my/kernel/memory.c:577

	/* 为简化位图操作，余数不处理，坏处是这样做会丢内存。
	好处是不用做内存的越界检查,因为位图表示的内存少于实际物理内存*/
	uint32_t kbm_length = kernel_free_pages / 8;	// Kernel BitMap的长度,位图中的一位表示一页,以字节为单位
c0003662:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
c0003666:	66 c1 e8 03          	shr    $0x3,%ax
c000366a:	0f b7 c0             	movzwl %ax,%eax
c000366d:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/kernel/memory.c:578
	uint32_t ubm_length = user_free_pages / 8;		// User BitMap的长度.
c0003670:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0003674:	66 c1 e8 03          	shr    $0x3,%ax
c0003678:	0f b7 c0             	movzwl %ax,%eax
c000367b:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/kernel/memory.c:580

	uint32_t kp_start = used_mem;								// Kernel Pool start,内核内存池的起始地址
c000367e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003681:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/kernel/memory.c:581
	uint32_t up_start = kp_start + kernel_free_pages * PG_SIZE;	// User Pool start,用户内存池的起始地址
c0003684:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
c0003688:	c1 e0 0c             	shl    $0xc,%eax
c000368b:	89 c2                	mov    %eax,%edx
c000368d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0003690:	01 d0                	add    %edx,%eax
c0003692:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/kernel/memory.c:583

	kernel_pool.phy_addr_start = kp_start;
c0003695:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0003698:	a3 a8 21 01 c0       	mov    %eax,0xc00121a8
/work/x86_os_my/kernel/memory.c:584
	user_pool.phy_addr_start   = up_start;
c000369d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c00036a0:	a3 a8 20 01 c0       	mov    %eax,0xc00120a8
/work/x86_os_my/kernel/memory.c:586

	kernel_pool.pool_size = kernel_free_pages * PG_SIZE;
c00036a5:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
c00036a9:	c1 e0 0c             	shl    $0xc,%eax
c00036ac:	a3 ac 21 01 c0       	mov    %eax,0xc00121ac
/work/x86_os_my/kernel/memory.c:587
	user_pool.pool_size	 = user_free_pages * PG_SIZE;
c00036b1:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c00036b5:	c1 e0 0c             	shl    $0xc,%eax
c00036b8:	a3 ac 20 01 c0       	mov    %eax,0xc00120ac
/work/x86_os_my/kernel/memory.c:589

	kernel_pool.pool_bitmap.btmp_bytes_len = kbm_length;
c00036bd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00036c0:	a3 a0 21 01 c0       	mov    %eax,0xc00121a0
/work/x86_os_my/kernel/memory.c:590
	user_pool.pool_bitmap.btmp_bytes_len	  = ubm_length;
c00036c5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c00036c8:	a3 a0 20 01 c0       	mov    %eax,0xc00120a0
/work/x86_os_my/kernel/memory.c:599
	*	而我们需要根据总内存大小在运行时，计算出位图的数组需要多少字节。
	*   所以改为指定一块内存来生成位图.
	*   ************************************************/
	// 内核使用的最高地址是0xc009f000,这是主线程的栈地址.(内核的大小预计为70K左右)
	// 32M内存占用的位图是2k.内核内存池的位图先定在MEM_BITMAP_BASE(0xc009a000)处.
	kernel_pool.pool_bitmap.bits = (void*)MEM_BITMAP_BASE;
c00036cd:	c7 05 a4 21 01 c0 00 	movl   $0xc009a000,0xc00121a4
c00036d4:	a0 09 c0 
/work/x86_os_my/kernel/memory.c:601
	/* 用户内存池的位图紧跟在内核内存池位图之后 */
	user_pool.pool_bitmap.bits = (void*)(MEM_BITMAP_BASE + kbm_length);
c00036d7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00036da:	2d 00 60 f6 3f       	sub    $0x3ff66000,%eax
c00036df:	a3 a4 20 01 c0       	mov    %eax,0xc00120a4
/work/x86_os_my/kernel/memory.c:604
	
	/******************** 输出内存池信息 **********************/
	put_str("      kernel_pool_bitmap_start:");put_int((int)kernel_pool.pool_bitmap.bits);
c00036e4:	83 ec 0c             	sub    $0xc,%esp
c00036e7:	68 e0 d0 00 c0       	push   $0xc000d0e0
c00036ec:	e8 af eb ff ff       	call   c00022a0 <put_str>
c00036f1:	83 c4 10             	add    $0x10,%esp
c00036f4:	a1 a4 21 01 c0       	mov    0xc00121a4,%eax
c00036f9:	83 ec 0c             	sub    $0xc,%esp
c00036fc:	50                   	push   %eax
c00036fd:	e8 c8 ec ff ff       	call   c00023ca <put_int>
c0003702:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:605
	put_str(" kernel_pool_phy_addr_start:");put_int(kernel_pool.phy_addr_start);
c0003705:	83 ec 0c             	sub    $0xc,%esp
c0003708:	68 00 d1 00 c0       	push   $0xc000d100
c000370d:	e8 8e eb ff ff       	call   c00022a0 <put_str>
c0003712:	83 c4 10             	add    $0x10,%esp
c0003715:	a1 a8 21 01 c0       	mov    0xc00121a8,%eax
c000371a:	83 ec 0c             	sub    $0xc,%esp
c000371d:	50                   	push   %eax
c000371e:	e8 a7 ec ff ff       	call   c00023ca <put_int>
c0003723:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:606
	put_str("\n");
c0003726:	83 ec 0c             	sub    $0xc,%esp
c0003729:	68 1d d1 00 c0       	push   $0xc000d11d
c000372e:	e8 6d eb ff ff       	call   c00022a0 <put_str>
c0003733:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:607
	put_str("      user_pool_bitmap_start:");put_int((int)user_pool.pool_bitmap.bits);
c0003736:	83 ec 0c             	sub    $0xc,%esp
c0003739:	68 1f d1 00 c0       	push   $0xc000d11f
c000373e:	e8 5d eb ff ff       	call   c00022a0 <put_str>
c0003743:	83 c4 10             	add    $0x10,%esp
c0003746:	a1 a4 20 01 c0       	mov    0xc00120a4,%eax
c000374b:	83 ec 0c             	sub    $0xc,%esp
c000374e:	50                   	push   %eax
c000374f:	e8 76 ec ff ff       	call   c00023ca <put_int>
c0003754:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:608
	put_str(" user_pool_phy_addr_start:");put_int(user_pool.phy_addr_start);
c0003757:	83 ec 0c             	sub    $0xc,%esp
c000375a:	68 3d d1 00 c0       	push   $0xc000d13d
c000375f:	e8 3c eb ff ff       	call   c00022a0 <put_str>
c0003764:	83 c4 10             	add    $0x10,%esp
c0003767:	a1 a8 20 01 c0       	mov    0xc00120a8,%eax
c000376c:	83 ec 0c             	sub    $0xc,%esp
c000376f:	50                   	push   %eax
c0003770:	e8 55 ec ff ff       	call   c00023ca <put_int>
c0003775:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:609
	put_str("\n");
c0003778:	83 ec 0c             	sub    $0xc,%esp
c000377b:	68 1d d1 00 c0       	push   $0xc000d11d
c0003780:	e8 1b eb ff ff       	call   c00022a0 <put_str>
c0003785:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:612

	/* 将位图置0*/
	bitmap_init(&kernel_pool.pool_bitmap);
c0003788:	83 ec 0c             	sub    $0xc,%esp
c000378b:	68 a0 21 01 c0       	push   $0xc00121a0
c0003790:	e8 92 ed ff ff       	call   c0002527 <bitmap_init>
c0003795:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:613
	bitmap_init(&user_pool.pool_bitmap);
c0003798:	83 ec 0c             	sub    $0xc,%esp
c000379b:	68 a0 20 01 c0       	push   $0xc00120a0
c00037a0:	e8 82 ed ff ff       	call   c0002527 <bitmap_init>
c00037a5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:615

	lock_init(&kernel_pool.lock);
c00037a8:	83 ec 0c             	sub    $0xc,%esp
c00037ab:	68 b0 21 01 c0       	push   $0xc00121b0
c00037b0:	e8 20 12 00 00       	call   c00049d5 <lock_init>
c00037b5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:616
	lock_init(&user_pool.lock);
c00037b8:	83 ec 0c             	sub    $0xc,%esp
c00037bb:	68 b0 20 01 c0       	push   $0xc00120b0
c00037c0:	e8 10 12 00 00       	call   c00049d5 <lock_init>
c00037c5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:620
	
	/* 下面初始化内核虚拟地址的位图(bp_len + bits数组),按实际物理内存大小生成数组。*/
	// 用于维护内核堆的虚拟地址,所以要和内核内存池大小一致
	kernel_vaddr.vaddr_bitmap.btmp_bytes_len = kbm_length;
c00037c8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00037cb:	a3 88 21 01 c0       	mov    %eax,0xc0012188
/work/x86_os_my/kernel/memory.c:622
	/* 位图的数组指向一块未使用的内存,目前定位在内核内存池和用户内存池之外*/
	kernel_vaddr.vaddr_bitmap.bits = (void*)(MEM_BITMAP_BASE + kbm_length + ubm_length);
c00037d0:	8b 55 e0             	mov    -0x20(%ebp),%edx
c00037d3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c00037d6:	01 d0                	add    %edx,%eax
c00037d8:	2d 00 60 f6 3f       	sub    $0x3ff66000,%eax
c00037dd:	a3 8c 21 01 c0       	mov    %eax,0xc001218c
/work/x86_os_my/kernel/memory.c:624

	kernel_vaddr.vaddr_start = K_HEAP_START;
c00037e2:	c7 05 90 21 01 c0 00 	movl   $0xc0100000,0xc0012190
c00037e9:	00 10 c0 
/work/x86_os_my/kernel/memory.c:625
	bitmap_init(&kernel_vaddr.vaddr_bitmap);
c00037ec:	83 ec 0c             	sub    $0xc,%esp
c00037ef:	68 88 21 01 c0       	push   $0xc0012188
c00037f4:	e8 2e ed ff ff       	call   c0002527 <bitmap_init>
c00037f9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:626
	put_str("   mem_pool_init done\n");
c00037fc:	83 ec 0c             	sub    $0xc,%esp
c00037ff:	68 58 d1 00 c0       	push   $0xc000d158
c0003804:	e8 97 ea ff ff       	call   c00022a0 <put_str>
c0003809:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:627
}
c000380c:	90                   	nop
c000380d:	c9                   	leave  
c000380e:	c3                   	ret    

c000380f <block_desc_init>:
block_desc_init():
/work/x86_os_my/kernel/memory.c:630

/* 为malloc做准备 */
void block_desc_init(struct mem_block_desc* desc_array) {
c000380f:	55                   	push   %ebp
c0003810:	89 e5                	mov    %esp,%ebp
c0003812:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:631
   uint16_t desc_idx, block_size = 16;
c0003815:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:634

   /* 初始化每个mem_block_desc描述符 */
   for (desc_idx = 0; desc_idx < DESC_CNT; desc_idx++) {
c000381b:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c0003821:	eb 75                	jmp    c0003898 <block_desc_init+0x89>
/work/x86_os_my/kernel/memory.c:635 (discriminator 3)
      desc_array[desc_idx].block_size = block_size;
c0003823:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0003827:	89 d0                	mov    %edx,%eax
c0003829:	01 c0                	add    %eax,%eax
c000382b:	01 d0                	add    %edx,%eax
c000382d:	c1 e0 03             	shl    $0x3,%eax
c0003830:	89 c2                	mov    %eax,%edx
c0003832:	8b 45 08             	mov    0x8(%ebp),%eax
c0003835:	01 c2                	add    %eax,%edx
c0003837:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c000383b:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/kernel/memory.c:638 (discriminator 3)

      /* 初始化arena中的内存块数量【注意计算方法】 */
      desc_array[desc_idx].blocks_per_arena = (PG_SIZE - sizeof(struct arena)) / block_size;
c000383d:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0003841:	89 d0                	mov    %edx,%eax
c0003843:	01 c0                	add    %eax,%eax
c0003845:	01 d0                	add    %edx,%eax
c0003847:	c1 e0 03             	shl    $0x3,%eax
c000384a:	89 c2                	mov    %eax,%edx
c000384c:	8b 45 08             	mov    0x8(%ebp),%eax
c000384f:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
c0003852:	b8 f4 0f 00 00       	mov    $0xff4,%eax
c0003857:	ba 00 00 00 00       	mov    $0x0,%edx
c000385c:	66 f7 75 f4          	divw   -0xc(%ebp)
c0003860:	0f b7 c0             	movzwl %ax,%eax
c0003863:	89 41 04             	mov    %eax,0x4(%ecx)
/work/x86_os_my/kernel/memory.c:640 (discriminator 3)

      list_init(&desc_array[desc_idx].free_list);
c0003866:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c000386a:	89 d0                	mov    %edx,%eax
c000386c:	01 c0                	add    %eax,%eax
c000386e:	01 d0                	add    %edx,%eax
c0003870:	c1 e0 03             	shl    $0x3,%eax
c0003873:	89 c2                	mov    %eax,%edx
c0003875:	8b 45 08             	mov    0x8(%ebp),%eax
c0003878:	01 d0                	add    %edx,%eax
c000387a:	83 c0 08             	add    $0x8,%eax
c000387d:	83 ec 0c             	sub    $0xc,%esp
c0003880:	50                   	push   %eax
c0003881:	e8 5b 0e 00 00       	call   c00046e1 <list_init>
c0003886:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:642 (discriminator 3)

      block_size *= 2;		// 下一个规格内存块！
c0003889:	66 d1 65 f4          	shlw   -0xc(%ebp)
/work/x86_os_my/kernel/memory.c:634 (discriminator 3)
/* 为malloc做准备 */
void block_desc_init(struct mem_block_desc* desc_array) {
   uint16_t desc_idx, block_size = 16;

   /* 初始化每个mem_block_desc描述符 */
   for (desc_idx = 0; desc_idx < DESC_CNT; desc_idx++) {
c000388d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0003891:	83 c0 01             	add    $0x1,%eax
c0003894:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
/work/x86_os_my/kernel/memory.c:634 (discriminator 1)
c0003898:	66 83 7d f6 06       	cmpw   $0x6,-0xa(%ebp)
c000389d:	76 84                	jbe    c0003823 <block_desc_init+0x14>
/work/x86_os_my/kernel/memory.c:645
      list_init(&desc_array[desc_idx].free_list);

      block_size *= 2;		// 下一个规格内存块！
	  // 16/32/64/128/256/512/1024 总共 7 种规格
   }
}
c000389f:	90                   	nop
c00038a0:	c9                   	leave  
c00038a1:	c3                   	ret    

c00038a2 <mem_init>:
mem_init():
/work/x86_os_my/kernel/memory.c:648

/* 内存管理部分初始化入口 */
void mem_init() {
c00038a2:	55                   	push   %ebp
c00038a3:	89 e5                	mov    %esp,%ebp
c00038a5:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:649
	put_str("mem_init start\n");
c00038a8:	83 ec 0c             	sub    $0xc,%esp
c00038ab:	68 6f d1 00 c0       	push   $0xc000d16f
c00038b0:	e8 eb e9 ff ff       	call   c00022a0 <put_str>
c00038b5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:650
	uint32_t mem_bytes_total = (*(uint32_t*)(0xb00));	//内存总数在汇编中获取，放到了地址0xb00处。
c00038b8:	b8 00 0b 00 00       	mov    $0xb00,%eax
c00038bd:	8b 00                	mov    (%eax),%eax
c00038bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:651
	mem_pool_init(mem_bytes_total);	// 初始化内存池
c00038c2:	83 ec 0c             	sub    $0xc,%esp
c00038c5:	ff 75 f4             	pushl  -0xc(%ebp)
c00038c8:	e8 43 fd ff ff       	call   c0003610 <mem_pool_init>
c00038cd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:652
	block_desc_init(k_block_descs);	// 初始化mem_block_desc数组descs,为malloc做准备
c00038d0:	83 ec 0c             	sub    $0xc,%esp
c00038d3:	68 e0 20 01 c0       	push   $0xc00120e0
c00038d8:	e8 32 ff ff ff       	call   c000380f <block_desc_init>
c00038dd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:653
	put_str("mem_init done\n");
c00038e0:	83 ec 0c             	sub    $0xc,%esp
c00038e3:	68 7f d1 00 c0       	push   $0xc000d17f
c00038e8:	e8 b3 e9 ff ff       	call   c00022a0 <put_str>
c00038ed:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:654
}
c00038f0:	90                   	nop
c00038f1:	c9                   	leave  
c00038f2:	c3                   	ret    

c00038f3 <memset>:
memset():
/work/x86_os_my/lib/string.c:6
#include "string.h"
//#include "global.h"
#include "assert.h"

/* 将dst_起始的size个字节置为value */
void memset(void* dst_, uint8_t value, uint32_t size) {
c00038f3:	55                   	push   %ebp
c00038f4:	89 e5                	mov    %esp,%ebp
c00038f6:	83 ec 28             	sub    $0x28,%esp
c00038f9:	8b 45 0c             	mov    0xc(%ebp),%eax
c00038fc:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/lib/string.c:7
   assert(dst_ != NULL);
c00038ff:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003903:	75 19                	jne    c000391e <memset+0x2b>
/work/x86_os_my/lib/string.c:7 (discriminator 1)
c0003905:	68 e8 d1 00 c0       	push   $0xc000d1e8
c000390a:	68 5c d2 00 c0       	push   $0xc000d25c
c000390f:	6a 07                	push   $0x7
c0003911:	68 f5 d1 00 c0       	push   $0xc000d1f5
c0003916:	e8 31 84 00 00       	call   c000bd4c <user_spin>
c000391b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:8
   uint8_t* dst = (uint8_t*)dst_;
c000391e:	8b 45 08             	mov    0x8(%ebp),%eax
c0003921:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:9
   while (size-- > 0)
c0003924:	eb 0f                	jmp    c0003935 <memset+0x42>
/work/x86_os_my/lib/string.c:10
      *dst++ = value;
c0003926:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003929:	8d 50 01             	lea    0x1(%eax),%edx
c000392c:	89 55 f4             	mov    %edx,-0xc(%ebp)
c000392f:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c0003933:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/string.c:9

/* 将dst_起始的size个字节置为value */
void memset(void* dst_, uint8_t value, uint32_t size) {
   assert(dst_ != NULL);
   uint8_t* dst = (uint8_t*)dst_;
   while (size-- > 0)
c0003935:	8b 45 10             	mov    0x10(%ebp),%eax
c0003938:	8d 50 ff             	lea    -0x1(%eax),%edx
c000393b:	89 55 10             	mov    %edx,0x10(%ebp)
c000393e:	85 c0                	test   %eax,%eax
c0003940:	75 e4                	jne    c0003926 <memset+0x33>
/work/x86_os_my/lib/string.c:11
      *dst++ = value;
}
c0003942:	90                   	nop
c0003943:	c9                   	leave  
c0003944:	c3                   	ret    

c0003945 <memcpy>:
memcpy():
/work/x86_os_my/lib/string.c:14

/* 将src_起始的size个字节复制到dst_ */
void memcpy(void* dst_, const void* src_, uint32_t size) {
c0003945:	55                   	push   %ebp
c0003946:	89 e5                	mov    %esp,%ebp
c0003948:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/string.c:15
   assert(dst_ != NULL && src_ != NULL);
c000394b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c000394f:	74 06                	je     c0003957 <memcpy+0x12>
/work/x86_os_my/lib/string.c:15 (discriminator 2)
c0003951:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0003955:	75 19                	jne    c0003970 <memcpy+0x2b>
/work/x86_os_my/lib/string.c:15 (discriminator 3)
c0003957:	68 02 d2 00 c0       	push   $0xc000d202
c000395c:	68 64 d2 00 c0       	push   $0xc000d264
c0003961:	6a 0f                	push   $0xf
c0003963:	68 f5 d1 00 c0       	push   $0xc000d1f5
c0003968:	e8 df 83 00 00       	call   c000bd4c <user_spin>
c000396d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:16
   uint8_t* dst = dst_;
c0003970:	8b 45 08             	mov    0x8(%ebp),%eax
c0003973:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:17
   const uint8_t* src = src_;
c0003976:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003979:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/string.c:18
   while (size-- > 0)
c000397c:	eb 17                	jmp    c0003995 <memcpy+0x50>
/work/x86_os_my/lib/string.c:19
      *dst++ = *src++;
c000397e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003981:	8d 50 01             	lea    0x1(%eax),%edx
c0003984:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0003987:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000398a:	8d 4a 01             	lea    0x1(%edx),%ecx
c000398d:	89 4d f0             	mov    %ecx,-0x10(%ebp)
c0003990:	0f b6 12             	movzbl (%edx),%edx
c0003993:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/string.c:18
/* 将src_起始的size个字节复制到dst_ */
void memcpy(void* dst_, const void* src_, uint32_t size) {
   assert(dst_ != NULL && src_ != NULL);
   uint8_t* dst = dst_;
   const uint8_t* src = src_;
   while (size-- > 0)
c0003995:	8b 45 10             	mov    0x10(%ebp),%eax
c0003998:	8d 50 ff             	lea    -0x1(%eax),%edx
c000399b:	89 55 10             	mov    %edx,0x10(%ebp)
c000399e:	85 c0                	test   %eax,%eax
c00039a0:	75 dc                	jne    c000397e <memcpy+0x39>
/work/x86_os_my/lib/string.c:20
      *dst++ = *src++;
}
c00039a2:	90                   	nop
c00039a3:	c9                   	leave  
c00039a4:	c3                   	ret    

c00039a5 <memcmp>:
memcmp():
/work/x86_os_my/lib/string.c:23

/* 连续比较以地址a_和地址b_开头的size个字节,若相等则返回0,若a_大于b_返回+1,否则返回-1 */
int memcmp(const void* a_, const void* b_, uint32_t size) {
c00039a5:	55                   	push   %ebp
c00039a6:	89 e5                	mov    %esp,%ebp
c00039a8:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/string.c:24
   const char* a = a_;
c00039ab:	8b 45 08             	mov    0x8(%ebp),%eax
c00039ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:25
   const char* b = b_;
c00039b1:	8b 45 0c             	mov    0xc(%ebp),%eax
c00039b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/string.c:26
   assert(a != NULL || b != NULL);
c00039b7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c00039bb:	75 57                	jne    c0003a14 <memcmp+0x6f>
/work/x86_os_my/lib/string.c:26 (discriminator 1)
c00039bd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c00039c1:	75 51                	jne    c0003a14 <memcmp+0x6f>
/work/x86_os_my/lib/string.c:26 (discriminator 2)
c00039c3:	68 1f d2 00 c0       	push   $0xc000d21f
c00039c8:	68 6c d2 00 c0       	push   $0xc000d26c
c00039cd:	6a 1a                	push   $0x1a
c00039cf:	68 f5 d1 00 c0       	push   $0xc000d1f5
c00039d4:	e8 73 83 00 00       	call   c000bd4c <user_spin>
c00039d9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:27 (discriminator 2)
   while (size-- > 0) {
c00039dc:	eb 36                	jmp    c0003a14 <memcmp+0x6f>
/work/x86_os_my/lib/string.c:28
      if(*a != *b) {
c00039de:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00039e1:	0f b6 10             	movzbl (%eax),%edx
c00039e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00039e7:	0f b6 00             	movzbl (%eax),%eax
c00039ea:	38 c2                	cmp    %al,%dl
c00039ec:	74 1e                	je     c0003a0c <memcmp+0x67>
/work/x86_os_my/lib/string.c:29
	 return *a > *b ? 1 : -1; 
c00039ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00039f1:	0f b6 10             	movzbl (%eax),%edx
c00039f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00039f7:	0f b6 00             	movzbl (%eax),%eax
c00039fa:	38 c2                	cmp    %al,%dl
c00039fc:	7e 07                	jle    c0003a05 <memcmp+0x60>
/work/x86_os_my/lib/string.c:29 (discriminator 1)
c00039fe:	b8 01 00 00 00       	mov    $0x1,%eax
c0003a03:	eb 21                	jmp    c0003a26 <memcmp+0x81>
/work/x86_os_my/lib/string.c:29 (discriminator 2)
c0003a05:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0003a0a:	eb 1a                	jmp    c0003a26 <memcmp+0x81>
/work/x86_os_my/lib/string.c:31
      }
      a++;
c0003a0c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/lib/string.c:32
      b++;
c0003a10:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/lib/string.c:27
/* 连续比较以地址a_和地址b_开头的size个字节,若相等则返回0,若a_大于b_返回+1,否则返回-1 */
int memcmp(const void* a_, const void* b_, uint32_t size) {
   const char* a = a_;
   const char* b = b_;
   assert(a != NULL || b != NULL);
   while (size-- > 0) {
c0003a14:	8b 45 10             	mov    0x10(%ebp),%eax
c0003a17:	8d 50 ff             	lea    -0x1(%eax),%edx
c0003a1a:	89 55 10             	mov    %edx,0x10(%ebp)
c0003a1d:	85 c0                	test   %eax,%eax
c0003a1f:	75 bd                	jne    c00039de <memcmp+0x39>
/work/x86_os_my/lib/string.c:34
	 return *a > *b ? 1 : -1; 
      }
      a++;
      b++;
   }
   return 0;
c0003a21:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/lib/string.c:35
}
c0003a26:	c9                   	leave  
c0003a27:	c3                   	ret    

c0003a28 <strcpy>:
strcpy():
/work/x86_os_my/lib/string.c:38

/* 将字符串从src_复制到dst_ */
char* strcpy(char* dst_, const char* src_) {
c0003a28:	55                   	push   %ebp
c0003a29:	89 e5                	mov    %esp,%ebp
c0003a2b:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/string.c:39
   assert(dst_ != NULL && src_ != NULL);
c0003a2e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003a32:	74 06                	je     c0003a3a <strcpy+0x12>
/work/x86_os_my/lib/string.c:39 (discriminator 2)
c0003a34:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0003a38:	75 19                	jne    c0003a53 <strcpy+0x2b>
/work/x86_os_my/lib/string.c:39 (discriminator 3)
c0003a3a:	68 02 d2 00 c0       	push   $0xc000d202
c0003a3f:	68 74 d2 00 c0       	push   $0xc000d274
c0003a44:	6a 27                	push   $0x27
c0003a46:	68 f5 d1 00 c0       	push   $0xc000d1f5
c0003a4b:	e8 fc 82 00 00       	call   c000bd4c <user_spin>
c0003a50:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:40
   char* r = dst_;		       // 用来返回目的字符串起始地址
c0003a53:	8b 45 08             	mov    0x8(%ebp),%eax
c0003a56:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:41
   while((*dst_++ = *src_++));
c0003a59:	90                   	nop
/work/x86_os_my/lib/string.c:41 (discriminator 1)
c0003a5a:	8b 45 08             	mov    0x8(%ebp),%eax
c0003a5d:	8d 50 01             	lea    0x1(%eax),%edx
c0003a60:	89 55 08             	mov    %edx,0x8(%ebp)
c0003a63:	8b 55 0c             	mov    0xc(%ebp),%edx
c0003a66:	8d 4a 01             	lea    0x1(%edx),%ecx
c0003a69:	89 4d 0c             	mov    %ecx,0xc(%ebp)
c0003a6c:	0f b6 12             	movzbl (%edx),%edx
c0003a6f:	88 10                	mov    %dl,(%eax)
c0003a71:	0f b6 00             	movzbl (%eax),%eax
c0003a74:	84 c0                	test   %al,%al
c0003a76:	75 e2                	jne    c0003a5a <strcpy+0x32>
/work/x86_os_my/lib/string.c:42
   return r;
c0003a78:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/lib/string.c:43
}
c0003a7b:	c9                   	leave  
c0003a7c:	c3                   	ret    

c0003a7d <strlen>:
strlen():
/work/x86_os_my/lib/string.c:46

/* 返回字符串长度 */
uint32_t strlen(const char* str) {
c0003a7d:	55                   	push   %ebp
c0003a7e:	89 e5                	mov    %esp,%ebp
c0003a80:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/string.c:47
   assert(str != NULL);
c0003a83:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003a87:	75 19                	jne    c0003aa2 <strlen+0x25>
/work/x86_os_my/lib/string.c:47 (discriminator 1)
c0003a89:	68 36 d2 00 c0       	push   $0xc000d236
c0003a8e:	68 7c d2 00 c0       	push   $0xc000d27c
c0003a93:	6a 2f                	push   $0x2f
c0003a95:	68 f5 d1 00 c0       	push   $0xc000d1f5
c0003a9a:	e8 ad 82 00 00       	call   c000bd4c <user_spin>
c0003a9f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:48
   const char* p = str;
c0003aa2:	8b 45 08             	mov    0x8(%ebp),%eax
c0003aa5:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:49
   while(*p++);
c0003aa8:	90                   	nop
/work/x86_os_my/lib/string.c:49 (discriminator 1)
c0003aa9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003aac:	8d 50 01             	lea    0x1(%eax),%edx
c0003aaf:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0003ab2:	0f b6 00             	movzbl (%eax),%eax
c0003ab5:	84 c0                	test   %al,%al
c0003ab7:	75 f0                	jne    c0003aa9 <strlen+0x2c>
/work/x86_os_my/lib/string.c:50
   return (p - str - 1);
c0003ab9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0003abc:	8b 45 08             	mov    0x8(%ebp),%eax
c0003abf:	29 c2                	sub    %eax,%edx
c0003ac1:	89 d0                	mov    %edx,%eax
c0003ac3:	83 e8 01             	sub    $0x1,%eax
/work/x86_os_my/lib/string.c:51
}
c0003ac6:	c9                   	leave  
c0003ac7:	c3                   	ret    

c0003ac8 <strcmp>:
strcmp():
/work/x86_os_my/lib/string.c:54

/* 比较两个字符串,若a_中的字符大于b_中的字符返回1,相等时返回0,否则返回-1. */
int8_t strcmp (const char* a, const char* b) {
c0003ac8:	55                   	push   %ebp
c0003ac9:	89 e5                	mov    %esp,%ebp
c0003acb:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/lib/string.c:55
   assert(a != NULL && b != NULL);
c0003ace:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003ad2:	74 06                	je     c0003ada <strcmp+0x12>
/work/x86_os_my/lib/string.c:55 (discriminator 2)
c0003ad4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0003ad8:	75 23                	jne    c0003afd <strcmp+0x35>
/work/x86_os_my/lib/string.c:55 (discriminator 3)
c0003ada:	68 42 d2 00 c0       	push   $0xc000d242
c0003adf:	68 84 d2 00 c0       	push   $0xc000d284
c0003ae4:	6a 37                	push   $0x37
c0003ae6:	68 f5 d1 00 c0       	push   $0xc000d1f5
c0003aeb:	e8 5c 82 00 00       	call   c000bd4c <user_spin>
c0003af0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:56 (discriminator 3)
   while (*a != 0 && *a == *b) {
c0003af3:	eb 08                	jmp    c0003afd <strcmp+0x35>
/work/x86_os_my/lib/string.c:57
      a++;
c0003af5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
/work/x86_os_my/lib/string.c:58
      b++;
c0003af9:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
/work/x86_os_my/lib/string.c:56
}

/* 比较两个字符串,若a_中的字符大于b_中的字符返回1,相等时返回0,否则返回-1. */
int8_t strcmp (const char* a, const char* b) {
   assert(a != NULL && b != NULL);
   while (*a != 0 && *a == *b) {
c0003afd:	8b 45 08             	mov    0x8(%ebp),%eax
c0003b00:	0f b6 00             	movzbl (%eax),%eax
c0003b03:	84 c0                	test   %al,%al
c0003b05:	74 10                	je     c0003b17 <strcmp+0x4f>
/work/x86_os_my/lib/string.c:56 (discriminator 1)
c0003b07:	8b 45 08             	mov    0x8(%ebp),%eax
c0003b0a:	0f b6 10             	movzbl (%eax),%edx
c0003b0d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003b10:	0f b6 00             	movzbl (%eax),%eax
c0003b13:	38 c2                	cmp    %al,%dl
c0003b15:	74 de                	je     c0003af5 <strcmp+0x2d>
/work/x86_os_my/lib/string.c:62
      a++;
      b++;
   }
/* 如果*a小于*b就返回-1,否则就属于*a大于等于*b的情况。在后面的布尔表达式"*a > *b"中,
 * 若*a大于*b,表达式就等于1,否则就表达式不成立,也就是布尔值为0,恰恰表示*a等于*b */
   return *a < *b ? -1 : *a > *b;
c0003b17:	8b 45 08             	mov    0x8(%ebp),%eax
c0003b1a:	0f b6 10             	movzbl (%eax),%edx
c0003b1d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003b20:	0f b6 00             	movzbl (%eax),%eax
c0003b23:	38 c2                	cmp    %al,%dl
c0003b25:	7c 13                	jl     c0003b3a <strcmp+0x72>
/work/x86_os_my/lib/string.c:62 (discriminator 1)
c0003b27:	8b 45 08             	mov    0x8(%ebp),%eax
c0003b2a:	0f b6 10             	movzbl (%eax),%edx
c0003b2d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003b30:	0f b6 00             	movzbl (%eax),%eax
c0003b33:	38 c2                	cmp    %al,%dl
c0003b35:	0f 9f c0             	setg   %al
c0003b38:	eb 05                	jmp    c0003b3f <strcmp+0x77>
/work/x86_os_my/lib/string.c:62 (discriminator 2)
c0003b3a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
/work/x86_os_my/lib/string.c:63 (discriminator 5)
}
c0003b3f:	c9                   	leave  
c0003b40:	c3                   	ret    

c0003b41 <strchr>:
strchr():
/work/x86_os_my/lib/string.c:66

/* 从左到右查找字符串str中首次出现字符ch的地址(不是下标,是地址) */
char* strchr(const char* str, const uint8_t ch) {
c0003b41:	55                   	push   %ebp
c0003b42:	89 e5                	mov    %esp,%ebp
c0003b44:	83 ec 18             	sub    $0x18,%esp
c0003b47:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003b4a:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/lib/string.c:67
   assert(str != NULL);
c0003b4d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003b51:	75 35                	jne    c0003b88 <strchr+0x47>
/work/x86_os_my/lib/string.c:67 (discriminator 1)
c0003b53:	68 36 d2 00 c0       	push   $0xc000d236
c0003b58:	68 8c d2 00 c0       	push   $0xc000d28c
c0003b5d:	6a 43                	push   $0x43
c0003b5f:	68 f5 d1 00 c0       	push   $0xc000d1f5
c0003b64:	e8 e3 81 00 00       	call   c000bd4c <user_spin>
c0003b69:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:68 (discriminator 1)
   while (*str != 0) {
c0003b6c:	eb 1a                	jmp    c0003b88 <strchr+0x47>
/work/x86_os_my/lib/string.c:69
      if (*str == ch) {
c0003b6e:	8b 45 08             	mov    0x8(%ebp),%eax
c0003b71:	0f b6 00             	movzbl (%eax),%eax
c0003b74:	0f be d0             	movsbl %al,%edx
c0003b77:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0003b7b:	39 c2                	cmp    %eax,%edx
c0003b7d:	75 05                	jne    c0003b84 <strchr+0x43>
/work/x86_os_my/lib/string.c:70
	 return (char*)str;	    // 需要强制转化成和返回值类型一样,否则编译器会报const属性丢失,下同.
c0003b7f:	8b 45 08             	mov    0x8(%ebp),%eax
c0003b82:	eb 13                	jmp    c0003b97 <strchr+0x56>
/work/x86_os_my/lib/string.c:72
      }
      str++;
c0003b84:	83 45 08 01          	addl   $0x1,0x8(%ebp)
/work/x86_os_my/lib/string.c:68
}

/* 从左到右查找字符串str中首次出现字符ch的地址(不是下标,是地址) */
char* strchr(const char* str, const uint8_t ch) {
   assert(str != NULL);
   while (*str != 0) {
c0003b88:	8b 45 08             	mov    0x8(%ebp),%eax
c0003b8b:	0f b6 00             	movzbl (%eax),%eax
c0003b8e:	84 c0                	test   %al,%al
c0003b90:	75 dc                	jne    c0003b6e <strchr+0x2d>
/work/x86_os_my/lib/string.c:74
      if (*str == ch) {
	 return (char*)str;	    // 需要强制转化成和返回值类型一样,否则编译器会报const属性丢失,下同.
      }
      str++;
   }
   return NULL;
c0003b92:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/lib/string.c:75
}
c0003b97:	c9                   	leave  
c0003b98:	c3                   	ret    

c0003b99 <strrchr>:
strrchr():
/work/x86_os_my/lib/string.c:78

/* 从后往前查找字符串str中首次出现字符ch的地址(不是下标,是地址) */
char* strrchr(const char* str, const uint8_t ch) {
c0003b99:	55                   	push   %ebp
c0003b9a:	89 e5                	mov    %esp,%ebp
c0003b9c:	83 ec 28             	sub    $0x28,%esp
c0003b9f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003ba2:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/lib/string.c:79
   assert(str != NULL);
c0003ba5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003ba9:	75 19                	jne    c0003bc4 <strrchr+0x2b>
/work/x86_os_my/lib/string.c:79 (discriminator 1)
c0003bab:	68 36 d2 00 c0       	push   $0xc000d236
c0003bb0:	68 94 d2 00 c0       	push   $0xc000d294
c0003bb5:	6a 4f                	push   $0x4f
c0003bb7:	68 f5 d1 00 c0       	push   $0xc000d1f5
c0003bbc:	e8 8b 81 00 00       	call   c000bd4c <user_spin>
c0003bc1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:80
   const char* last_char = NULL;
c0003bc4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/string.c:82
   /* 从头到尾遍历一次,若存在ch字符,last_char总是该字符最后一次出现在串中的地址(不是下标,是地址)*/
   while (*str != 0) {
c0003bcb:	eb 1b                	jmp    c0003be8 <strrchr+0x4f>
/work/x86_os_my/lib/string.c:83
      if (*str == ch) {
c0003bcd:	8b 45 08             	mov    0x8(%ebp),%eax
c0003bd0:	0f b6 00             	movzbl (%eax),%eax
c0003bd3:	0f be d0             	movsbl %al,%edx
c0003bd6:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0003bda:	39 c2                	cmp    %eax,%edx
c0003bdc:	75 06                	jne    c0003be4 <strrchr+0x4b>
/work/x86_os_my/lib/string.c:84
	 last_char = str;
c0003bde:	8b 45 08             	mov    0x8(%ebp),%eax
c0003be1:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:86
      }
      str++;
c0003be4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
/work/x86_os_my/lib/string.c:82
/* 从后往前查找字符串str中首次出现字符ch的地址(不是下标,是地址) */
char* strrchr(const char* str, const uint8_t ch) {
   assert(str != NULL);
   const char* last_char = NULL;
   /* 从头到尾遍历一次,若存在ch字符,last_char总是该字符最后一次出现在串中的地址(不是下标,是地址)*/
   while (*str != 0) {
c0003be8:	8b 45 08             	mov    0x8(%ebp),%eax
c0003beb:	0f b6 00             	movzbl (%eax),%eax
c0003bee:	84 c0                	test   %al,%al
c0003bf0:	75 db                	jne    c0003bcd <strrchr+0x34>
/work/x86_os_my/lib/string.c:88
      if (*str == ch) {
	 last_char = str;
      }
      str++;
   }
   return (char*)last_char;
c0003bf2:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/lib/string.c:89
}
c0003bf5:	c9                   	leave  
c0003bf6:	c3                   	ret    

c0003bf7 <strcat>:
strcat():
/work/x86_os_my/lib/string.c:92

/* 将字符串src_拼接到dst_后,将回拼接的串地址 */
char* strcat(char* dst_, const char* src_) {
c0003bf7:	55                   	push   %ebp
c0003bf8:	89 e5                	mov    %esp,%ebp
c0003bfa:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/string.c:93
   assert(dst_ != NULL && src_ != NULL);
c0003bfd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003c01:	74 06                	je     c0003c09 <strcat+0x12>
/work/x86_os_my/lib/string.c:93 (discriminator 2)
c0003c03:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0003c07:	75 19                	jne    c0003c22 <strcat+0x2b>
/work/x86_os_my/lib/string.c:93 (discriminator 3)
c0003c09:	68 02 d2 00 c0       	push   $0xc000d202
c0003c0e:	68 9c d2 00 c0       	push   $0xc000d29c
c0003c13:	6a 5d                	push   $0x5d
c0003c15:	68 f5 d1 00 c0       	push   $0xc000d1f5
c0003c1a:	e8 2d 81 00 00       	call   c000bd4c <user_spin>
c0003c1f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:94
   char* str = dst_;
c0003c22:	8b 45 08             	mov    0x8(%ebp),%eax
c0003c25:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:95
   while (*str++);
c0003c28:	90                   	nop
/work/x86_os_my/lib/string.c:95 (discriminator 1)
c0003c29:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003c2c:	8d 50 01             	lea    0x1(%eax),%edx
c0003c2f:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0003c32:	0f b6 00             	movzbl (%eax),%eax
c0003c35:	84 c0                	test   %al,%al
c0003c37:	75 f0                	jne    c0003c29 <strcat+0x32>
/work/x86_os_my/lib/string.c:96
   --str;      // 别看错了，--str是独立的一句，并不是while的循环体
c0003c39:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
/work/x86_os_my/lib/string.c:97
   while((*str++ = *src_++));	 // 当*str被赋值为0时,此时表达式不成立,正好添加了字符串结尾的0.
c0003c3d:	90                   	nop
/work/x86_os_my/lib/string.c:97 (discriminator 1)
c0003c3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003c41:	8d 50 01             	lea    0x1(%eax),%edx
c0003c44:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0003c47:	8b 55 0c             	mov    0xc(%ebp),%edx
c0003c4a:	8d 4a 01             	lea    0x1(%edx),%ecx
c0003c4d:	89 4d 0c             	mov    %ecx,0xc(%ebp)
c0003c50:	0f b6 12             	movzbl (%edx),%edx
c0003c53:	88 10                	mov    %dl,(%eax)
c0003c55:	0f b6 00             	movzbl (%eax),%eax
c0003c58:	84 c0                	test   %al,%al
c0003c5a:	75 e2                	jne    c0003c3e <strcat+0x47>
/work/x86_os_my/lib/string.c:98
   return dst_;
c0003c5c:	8b 45 08             	mov    0x8(%ebp),%eax
/work/x86_os_my/lib/string.c:99
}
c0003c5f:	c9                   	leave  
c0003c60:	c3                   	ret    

c0003c61 <strchrs>:
strchrs():
/work/x86_os_my/lib/string.c:102

/* 在字符串str中查找指定字符ch出现的次数 */
uint32_t strchrs(const char* str, uint8_t ch) {
c0003c61:	55                   	push   %ebp
c0003c62:	89 e5                	mov    %esp,%ebp
c0003c64:	83 ec 28             	sub    $0x28,%esp
c0003c67:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003c6a:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/lib/string.c:103
   assert(str != NULL);
c0003c6d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003c71:	75 19                	jne    c0003c8c <strchrs+0x2b>
/work/x86_os_my/lib/string.c:103 (discriminator 1)
c0003c73:	68 36 d2 00 c0       	push   $0xc000d236
c0003c78:	68 a4 d2 00 c0       	push   $0xc000d2a4
c0003c7d:	6a 67                	push   $0x67
c0003c7f:	68 f5 d1 00 c0       	push   $0xc000d1f5
c0003c84:	e8 c3 80 00 00       	call   c000bd4c <user_spin>
c0003c89:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:104
   uint32_t ch_cnt = 0;
c0003c8c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/string.c:105
   const char* p = str;
c0003c93:	8b 45 08             	mov    0x8(%ebp),%eax
c0003c96:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/string.c:106
   while(*p != 0) {
c0003c99:	eb 19                	jmp    c0003cb4 <strchrs+0x53>
/work/x86_os_my/lib/string.c:107
      if (*p == ch) {
c0003c9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003c9e:	0f b6 00             	movzbl (%eax),%eax
c0003ca1:	0f be d0             	movsbl %al,%edx
c0003ca4:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0003ca8:	39 c2                	cmp    %eax,%edx
c0003caa:	75 04                	jne    c0003cb0 <strchrs+0x4f>
/work/x86_os_my/lib/string.c:108
	 ch_cnt++;
c0003cac:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/lib/string.c:110
      }
      p++;
c0003cb0:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/lib/string.c:106
/* 在字符串str中查找指定字符ch出现的次数 */
uint32_t strchrs(const char* str, uint8_t ch) {
   assert(str != NULL);
   uint32_t ch_cnt = 0;
   const char* p = str;
   while(*p != 0) {
c0003cb4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003cb7:	0f b6 00             	movzbl (%eax),%eax
c0003cba:	84 c0                	test   %al,%al
c0003cbc:	75 dd                	jne    c0003c9b <strchrs+0x3a>
/work/x86_os_my/lib/string.c:112
      if (*p == ch) {
	 ch_cnt++;
      }
      p++;
   }
   return ch_cnt;
c0003cbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/lib/string.c:113
}
c0003cc1:	c9                   	leave  
c0003cc2:	c3                   	ret    

c0003cc3 <idle>:
idle():
/work/x86_os_my/thread/thread.c:26

extern void switch_to(struct task_struct* cur, struct task_struct* next);
extern void init(void);

/* idle线程 */
static void idle(void* arg UNUSED) {
c0003cc3:	55                   	push   %ebp
c0003cc4:	89 e5                	mov    %esp,%ebp
c0003cc6:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:28 (discriminator 1)
	while(1) {
		thread_block(TASK_BLOCKED);
c0003cc9:	83 ec 0c             	sub    $0xc,%esp
c0003ccc:	6a 02                	push   $0x2
c0003cce:	e8 aa 04 00 00       	call   c000417d <thread_block>
c0003cd3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:32 (discriminator 1)
		//CPU停机
		//唯一能唤醒处理器的就是外部中断
		//执行hlt时必须要保证目前处在开中断的情况下
		asm volatile ("sti; hlt" : : : "memory");
c0003cd6:	fb                   	sti    
c0003cd7:	f4                   	hlt    
/work/x86_os_my/thread/thread.c:33 (discriminator 1)
	}
c0003cd8:	eb ef                	jmp    c0003cc9 <idle+0x6>

c0003cda <running_thread>:
running_thread():
/work/x86_os_my/thread/thread.c:40

/* 返回线程 PCB 地址。
 * 各个线程所用的 0 级栈都是在自己的 PCB 当中，
 * 取当前栈指针的高 20 位，就是当前运行线程的 PCB（PCB是在自然页的起始地址！）
 */
struct task_struct* running_thread() {
c0003cda:	55                   	push   %ebp
c0003cdb:	89 e5                	mov    %esp,%ebp
c0003cdd:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/thread/thread.c:42
	uint32_t esp;
	asm ("mov %%esp, %0" : "=g" (esp));	//esp寄存器的值，放入变量esp
c0003ce0:	89 e0                	mov    %esp,%eax
c0003ce2:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/thread/thread.c:43
	return (struct task_struct*)(esp & 0xfffff000);
c0003ce5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003ce8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
/work/x86_os_my/thread/thread.c:44
}
c0003ced:	c9                   	leave  
c0003cee:	c3                   	ret    

c0003cef <kernel_thread>:
kernel_thread():
/work/x86_os_my/thread/thread.c:47

/* 由kernel_thread去执行function(func_arg) */
static void kernel_thread(thread_func* function, void* func_arg) {
c0003cef:	55                   	push   %ebp
c0003cf0:	89 e5                	mov    %esp,%ebp
c0003cf2:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:53
	/* 线程的首次运行是由时钟中断处理函数调用任务调度器 schedule 完成的，
	 * 进入中断后处理器会自动关中断，
	 * 因此在执行 function 前要打开中断，否则 kernel_thread 中的 function 在关中断的情况下运行，
	 * 也就是时钟中断被屏蔽了，再也不会调度到新的线程，function 会独享处理器。
	 */
	intr_enable();
c0003cf5:	e8 4a dd ff ff       	call   c0001a44 <intr_enable>
/work/x86_os_my/thread/thread.c:54
	function(func_arg); 
c0003cfa:	83 ec 0c             	sub    $0xc,%esp
c0003cfd:	ff 75 0c             	pushl  0xc(%ebp)
c0003d00:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d03:	ff d0                	call   *%eax
c0003d05:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:55
}
c0003d08:	90                   	nop
c0003d09:	c9                   	leave  
c0003d0a:	c3                   	ret    

c0003d0b <allocate_pid>:
allocate_pid():
/work/x86_os_my/thread/thread.c:58

/* 分配pid */
static pid_t allocate_pid(void) {
c0003d0b:	55                   	push   %ebp
c0003d0c:	89 e5                	mov    %esp,%ebp
c0003d0e:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:60
   static pid_t next_pid = 0;
   lock_acquire(&pid_lock);
c0003d11:	83 ec 0c             	sub    $0xc,%esp
c0003d14:	68 f4 21 01 c0       	push   $0xc00121f4
c0003d19:	e8 91 0e 00 00       	call   c0004baf <lock_acquire>
c0003d1e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:61
   next_pid++;
c0003d21:	0f b7 05 6c 15 01 c0 	movzwl 0xc001156c,%eax
c0003d28:	83 c0 01             	add    $0x1,%eax
c0003d2b:	66 a3 6c 15 01 c0    	mov    %ax,0xc001156c
/work/x86_os_my/thread/thread.c:62
   lock_release(&pid_lock);
c0003d31:	83 ec 0c             	sub    $0xc,%esp
c0003d34:	68 f4 21 01 c0       	push   $0xc00121f4
c0003d39:	e8 e8 0e 00 00       	call   c0004c26 <lock_release>
c0003d3e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:63
   return next_pid;
c0003d41:	0f b7 05 6c 15 01 c0 	movzwl 0xc001156c,%eax
/work/x86_os_my/thread/thread.c:64
}
c0003d48:	c9                   	leave  
c0003d49:	c3                   	ret    

c0003d4a <fork_pid>:
fork_pid():
/work/x86_os_my/thread/thread.c:67

/* fork进程时为其分配pid，只是再封装一次 allocate_pid */
pid_t fork_pid(void) {
c0003d4a:	55                   	push   %ebp
c0003d4b:	89 e5                	mov    %esp,%ebp
c0003d4d:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:68
	return allocate_pid();
c0003d50:	e8 b6 ff ff ff       	call   c0003d0b <allocate_pid>
/work/x86_os_my/thread/thread.c:69
}
c0003d55:	c9                   	leave  
c0003d56:	c3                   	ret    

c0003d57 <thread_create>:
thread_create():
/work/x86_os_my/thread/thread.c:72

/* 初始化线程栈结构体 struct thread_stack */
void thread_create(struct task_struct* pthread, thread_func function, void* func_arg) {
c0003d57:	55                   	push   %ebp
c0003d58:	89 e5                	mov    %esp,%ebp
c0003d5a:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/thread/thread.c:76
	/* 先预留中断使用栈的空间 
	 *（1）将来线程进入中断后，位于 kernel.S 中的中断代码会通过此栈来保存上下文。
	 *（2）将来实现用户进程时，会将用户进程的初始信息放在中断栈中。*/
	pthread->self_kstack -= sizeof(struct intr_stack);
c0003d5d:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d60:	8b 00                	mov    (%eax),%eax
c0003d62:	8d 90 d0 fe ff ff    	lea    -0x130(%eax),%edx
c0003d68:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d6b:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/thread/thread.c:79

	/* 再留出线程栈空间（unused_retaddr 所在的栈）*/
	pthread->self_kstack -= sizeof(struct thread_stack);
c0003d6d:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d70:	8b 00                	mov    (%eax),%eax
c0003d72:	8d 50 80             	lea    -0x80(%eax),%edx
c0003d75:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d78:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/thread/thread.c:80
	struct thread_stack* kthread_stack = (struct thread_stack*)pthread->self_kstack;
c0003d7a:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d7d:	8b 00                	mov    (%eax),%eax
c0003d7f:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/thread/thread.c:88
	 * kernel_thread 并不是通过 call 指令调用的，而是通过 ret 来执行的，
	 * 因此无法按照正常的函数调用形式传递 kernel_thread 所需要的参数，
	 * 这样调用是不行的： kernel_thread(function, func_arg)，
	 * 只能将参数放在 kernel_thread 所用的栈中，即处理器进入 kernel_thread 函数体时，
	 * 栈顶为返回地址，栈顶+4 为参数function，栈顶+8 为参数func_arg */
	kthread_stack->eip = kernel_thread;
c0003d82:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003d85:	c7 40 10 ef 3c 00 c0 	movl   $0xc0003cef,0x10(%eax)
/work/x86_os_my/thread/thread.c:89
	kthread_stack->function = function;
c0003d8c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003d8f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0003d92:	89 50 18             	mov    %edx,0x18(%eax)
/work/x86_os_my/thread/thread.c:90
	kthread_stack->func_arg = func_arg;
c0003d95:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003d98:	8b 55 10             	mov    0x10(%ebp),%edx
c0003d9b:	89 50 1c             	mov    %edx,0x1c(%eax)
/work/x86_os_my/thread/thread.c:91
	kthread_stack->ebp = kthread_stack->ebx = kthread_stack->esi = kthread_stack->edi = 0;
c0003d9e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003da1:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0003da8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003dab:	8b 50 08             	mov    0x8(%eax),%edx
c0003dae:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003db1:	89 50 0c             	mov    %edx,0xc(%eax)
c0003db4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003db7:	8b 50 0c             	mov    0xc(%eax),%edx
c0003dba:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003dbd:	89 50 04             	mov    %edx,0x4(%eax)
c0003dc0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003dc3:	8b 50 04             	mov    0x4(%eax),%edx
c0003dc6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003dc9:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/thread/thread.c:92
}
c0003dcb:	90                   	nop
c0003dcc:	c9                   	leave  
c0003dcd:	c3                   	ret    

c0003dce <init_thread>:
init_thread():
/work/x86_os_my/thread/thread.c:95

/* 初始化线程PCB结构体 struct task_struct */
void init_thread(struct task_struct* pthread, char* name, int prio) {
c0003dce:	55                   	push   %ebp
c0003dcf:	89 e5                	mov    %esp,%ebp
c0003dd1:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:96
	memset(pthread, 0, sizeof(*pthread));	//清空PCB
c0003dd4:	83 ec 04             	sub    $0x4,%esp
c0003dd7:	68 18 01 00 00       	push   $0x118
c0003ddc:	6a 00                	push   $0x0
c0003dde:	ff 75 08             	pushl  0x8(%ebp)
c0003de1:	e8 0d fb ff ff       	call   c00038f3 <memset>
c0003de6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:97
	pthread->pid = allocate_pid();
c0003de9:	e8 1d ff ff ff       	call   c0003d0b <allocate_pid>
c0003dee:	89 c2                	mov    %eax,%edx
c0003df0:	8b 45 08             	mov    0x8(%ebp),%eax
c0003df3:	66 89 50 04          	mov    %dx,0x4(%eax)
/work/x86_os_my/thread/thread.c:98
	strcpy(pthread->name, name);
c0003df7:	8b 45 08             	mov    0x8(%ebp),%eax
c0003dfa:	83 c0 0c             	add    $0xc,%eax
c0003dfd:	83 ec 08             	sub    $0x8,%esp
c0003e00:	ff 75 0c             	pushl  0xc(%ebp)
c0003e03:	50                   	push   %eax
c0003e04:	e8 1f fc ff ff       	call   c0003a28 <strcpy>
c0003e09:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:100

	if (pthread == g_main_thread) {
c0003e0c:	a1 f0 21 01 c0       	mov    0xc00121f0,%eax
c0003e11:	39 45 08             	cmp    %eax,0x8(%ebp)
c0003e14:	75 0c                	jne    c0003e22 <init_thread+0x54>
/work/x86_os_my/thread/thread.c:102
		/* 由于把main函数也封装成一个线程,并且它一直是运行的,故将其直接设为TASK_RUNNING */
		pthread->status = TASK_RUNNING;
c0003e16:	8b 45 08             	mov    0x8(%ebp),%eax
c0003e19:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0003e20:	eb 0a                	jmp    c0003e2c <init_thread+0x5e>
/work/x86_os_my/thread/thread.c:104
	} else {
		pthread->status = TASK_READY;
c0003e22:	8b 45 08             	mov    0x8(%ebp),%eax
c0003e25:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/thread/thread.c:110
	}

	/* self_kstack是线程自己在内核态下使用的栈顶地址 
	 * 线程自己在 0 特权级下所用的栈，在线程创建之初，
	 * 它被初始化为线程 PCB 的最顶端，即(uint32_t)pthread + PG_SIZE。*/
	pthread->self_kstack = (uint32_t*)((uint32_t)pthread + PG_SIZE);
c0003e2c:	8b 45 08             	mov    0x8(%ebp),%eax
c0003e2f:	05 00 10 00 00       	add    $0x1000,%eax
c0003e34:	89 c2                	mov    %eax,%edx
c0003e36:	8b 45 08             	mov    0x8(%ebp),%eax
c0003e39:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/thread/thread.c:111
	pthread->priority = prio;
c0003e3b:	8b 45 10             	mov    0x10(%ebp),%eax
c0003e3e:	89 c2                	mov    %eax,%edx
c0003e40:	8b 45 08             	mov    0x8(%ebp),%eax
c0003e43:	88 50 1c             	mov    %dl,0x1c(%eax)
/work/x86_os_my/thread/thread.c:112
	pthread->ticks = prio;
c0003e46:	8b 45 10             	mov    0x10(%ebp),%eax
c0003e49:	89 c2                	mov    %eax,%edx
c0003e4b:	8b 45 08             	mov    0x8(%ebp),%eax
c0003e4e:	88 50 1d             	mov    %dl,0x1d(%eax)
/work/x86_os_my/thread/thread.c:113
	pthread->elapsed_ticks = 0;
c0003e51:	8b 45 08             	mov    0x8(%ebp),%eax
c0003e54:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
/work/x86_os_my/thread/thread.c:114
	pthread->pgdir = NULL;
c0003e5b:	8b 45 08             	mov    0x8(%ebp),%eax
c0003e5e:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
/work/x86_os_my/thread/thread.c:117

	/* 预留标准输入输出 */
	pthread->fd_table[0] = 0;
c0003e65:	8b 45 08             	mov    0x8(%ebp),%eax
c0003e68:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
/work/x86_os_my/thread/thread.c:118
	pthread->fd_table[1] = 1;
c0003e6f:	8b 45 08             	mov    0x8(%ebp),%eax
c0003e72:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
/work/x86_os_my/thread/thread.c:119
	pthread->fd_table[2] = 2;
c0003e79:	8b 45 08             	mov    0x8(%ebp),%eax
c0003e7c:	c7 40 2c 02 00 00 00 	movl   $0x2,0x2c(%eax)
/work/x86_os_my/thread/thread.c:121
	/* 其余的全置为-1 */
	uint8_t fd_idx = 3;
c0003e83:	c6 45 f7 03          	movb   $0x3,-0x9(%ebp)
/work/x86_os_my/thread/thread.c:122
	while (fd_idx < MAX_FILES_OPEN_PER_PROC) {
c0003e87:	eb 1c                	jmp    c0003ea5 <init_thread+0xd7>
/work/x86_os_my/thread/thread.c:123
		pthread->fd_table[fd_idx] = -1;
c0003e89:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c0003e8d:	8b 45 08             	mov    0x8(%ebp),%eax
c0003e90:	83 c2 08             	add    $0x8,%edx
c0003e93:	c7 44 90 04 ff ff ff 	movl   $0xffffffff,0x4(%eax,%edx,4)
c0003e9a:	ff 
/work/x86_os_my/thread/thread.c:124
		fd_idx++;
c0003e9b:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0003e9f:	83 c0 01             	add    $0x1,%eax
c0003ea2:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/thread/thread.c:122
	pthread->fd_table[0] = 0;
	pthread->fd_table[1] = 1;
	pthread->fd_table[2] = 2;
	/* 其余的全置为-1 */
	uint8_t fd_idx = 3;
	while (fd_idx < MAX_FILES_OPEN_PER_PROC) {
c0003ea5:	80 7d f7 07          	cmpb   $0x7,-0x9(%ebp)
c0003ea9:	76 de                	jbe    c0003e89 <init_thread+0xbb>
/work/x86_os_my/thread/thread.c:127
		pthread->fd_table[fd_idx] = -1;
		fd_idx++;
	}

	pthread->cwd_inode_nr = 0;			// 以根目录做为默认工作路径
c0003eab:	8b 45 08             	mov    0x8(%ebp),%eax
c0003eae:	c7 80 0c 01 00 00 00 	movl   $0x0,0x10c(%eax)
c0003eb5:	00 00 00 
/work/x86_os_my/thread/thread.c:128
	pthread->parent_pid = -1;			// -1表示没有父进程
c0003eb8:	8b 45 08             	mov    0x8(%ebp),%eax
c0003ebb:	66 c7 80 10 01 00 00 	movw   $0xffff,0x110(%eax)
c0003ec2:	ff ff 
/work/x86_os_my/thread/thread.c:129
	pthread->stack_magic = 0x19870916;	// 自定义的魔数
c0003ec4:	8b 45 08             	mov    0x8(%ebp),%eax
c0003ec7:	c7 80 14 01 00 00 16 	movl   $0x19870916,0x114(%eax)
c0003ece:	09 87 19 
/work/x86_os_my/thread/thread.c:130
}
c0003ed1:	90                   	nop
c0003ed2:	c9                   	leave  
c0003ed3:	c3                   	ret    

c0003ed4 <thread_start>:
thread_start():
/work/x86_os_my/thread/thread.c:133

/* 创建线程 */
struct task_struct* thread_start(char* name, int prio, thread_func function, void* func_arg) {
c0003ed4:	55                   	push   %ebp
c0003ed5:	89 e5                	mov    %esp,%ebp
c0003ed7:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:135
	/* pcb都位于内核空间,包括用户进程的pcb也是在内核空间 */
	struct task_struct* thread = get_kernel_pages(1);
c0003eda:	83 ec 0c             	sub    $0xc,%esp
c0003edd:	6a 01                	push   $0x1
c0003edf:	e8 15 ec ff ff       	call   c0002af9 <get_kernel_pages>
c0003ee4:	83 c4 10             	add    $0x10,%esp
c0003ee7:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:137

	init_thread(thread, name, prio);			//初始化线程PCB
c0003eea:	83 ec 04             	sub    $0x4,%esp
c0003eed:	ff 75 0c             	pushl  0xc(%ebp)
c0003ef0:	ff 75 08             	pushl  0x8(%ebp)
c0003ef3:	ff 75 f4             	pushl  -0xc(%ebp)
c0003ef6:	e8 d3 fe ff ff       	call   c0003dce <init_thread>
c0003efb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:138
	thread_create(thread, function, func_arg);	//初始化线程栈结构体
c0003efe:	83 ec 04             	sub    $0x4,%esp
c0003f01:	ff 75 14             	pushl  0x14(%ebp)
c0003f04:	ff 75 10             	pushl  0x10(%ebp)
c0003f07:	ff 75 f4             	pushl  -0xc(%ebp)
c0003f0a:	e8 48 fe ff ff       	call   c0003d57 <thread_create>
c0003f0f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:140
	
	ASSERT(!elem_find(&thread_ready_list, &thread->general_tag));	// 确保之前不在队列中
c0003f12:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003f15:	83 c0 44             	add    $0x44,%eax
c0003f18:	83 ec 08             	sub    $0x8,%esp
c0003f1b:	50                   	push   %eax
c0003f1c:	68 cc 21 01 c0       	push   $0xc00121cc
c0003f21:	e8 c6 08 00 00       	call   c00047ec <elem_find>
c0003f26:	83 c4 10             	add    $0x10,%esp
c0003f29:	85 c0                	test   %eax,%eax
c0003f2b:	74 1c                	je     c0003f49 <thread_start+0x75>
/work/x86_os_my/thread/thread.c:140 (discriminator 1)
c0003f2d:	68 ac d2 00 c0       	push   $0xc000d2ac
c0003f32:	68 e8 d5 00 c0       	push   $0xc000d5e8
c0003f37:	68 8c 00 00 00       	push   $0x8c
c0003f3c:	68 e1 d2 00 c0       	push   $0xc000d2e1
c0003f41:	e8 0b e5 ff ff       	call   c0002451 <panic_spin>
c0003f46:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:141
	list_append(&thread_ready_list, &thread->general_tag);			// 加入就绪线程队列
c0003f49:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003f4c:	83 c0 44             	add    $0x44,%eax
c0003f4f:	83 ec 08             	sub    $0x8,%esp
c0003f52:	50                   	push   %eax
c0003f53:	68 cc 21 01 c0       	push   $0xc00121cc
c0003f58:	e8 15 08 00 00       	call   c0004772 <list_append>
c0003f5d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:143

	ASSERT(!elem_find(&thread_all_list, &thread->all_list_tag));
c0003f60:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003f63:	83 c0 4c             	add    $0x4c,%eax
c0003f66:	83 ec 08             	sub    $0x8,%esp
c0003f69:	50                   	push   %eax
c0003f6a:	68 dc 21 01 c0       	push   $0xc00121dc
c0003f6f:	e8 78 08 00 00       	call   c00047ec <elem_find>
c0003f74:	83 c4 10             	add    $0x10,%esp
c0003f77:	85 c0                	test   %eax,%eax
c0003f79:	74 1c                	je     c0003f97 <thread_start+0xc3>
/work/x86_os_my/thread/thread.c:143 (discriminator 1)
c0003f7b:	68 f4 d2 00 c0       	push   $0xc000d2f4
c0003f80:	68 e8 d5 00 c0       	push   $0xc000d5e8
c0003f85:	68 8f 00 00 00       	push   $0x8f
c0003f8a:	68 e1 d2 00 c0       	push   $0xc000d2e1
c0003f8f:	e8 bd e4 ff ff       	call   c0002451 <panic_spin>
c0003f94:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:144
	list_append(&thread_all_list, &thread->all_list_tag);			// 加入全部线程队列
c0003f97:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003f9a:	83 c0 4c             	add    $0x4c,%eax
c0003f9d:	83 ec 08             	sub    $0x8,%esp
c0003fa0:	50                   	push   %eax
c0003fa1:	68 dc 21 01 c0       	push   $0xc00121dc
c0003fa6:	e8 c7 07 00 00       	call   c0004772 <list_append>
c0003fab:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:160
	 * 在执行 ret 后，esp 指向的数值被弹岀到 eip。
	 * 处理器会去执行 kernel_thread 函数。
	 * 在执行 kernel_thread 时，处理器以为栈顶是返回地址，其实只是一个假的占位置的变量 unused_retaddr！
	 * 接着会调用函数 function(func_arg) */
	//asm volatile ("movl %0, %%esp; pop %%ebp; pop %%ebx; pop %%edi; pop %%esi; ret" : : "g" (thread->self_kstack) : "memory");
	return thread;
c0003fae:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/thread/thread.c:161
}
c0003fb1:	c9                   	leave  
c0003fb2:	c3                   	ret    

c0003fb3 <make_main_thread>:
make_main_thread():
/work/x86_os_my/thread/thread.c:165


/* 将kernel中的main函数完善为主线程 */
static void make_main_thread(void) {
c0003fb3:	55                   	push   %ebp
c0003fb4:	89 e5                	mov    %esp,%ebp
c0003fb6:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:170
	/* 因为main线程早已运行,咱们在loader.S中进入内核时的mov esp, 0xc009f000设置了栈顶，也预留了pcb, 地址为0xc009e000
	 * 主线程不需要再为PCB申请页，只需要通过 init_thread 填充PCB成员：名称和优先级等。
	 * 也不需要再通过 thread_create 构造它的线程栈。
	 */
	g_main_thread = running_thread();	//用栈指针的高20位，当做当前线程的PCB
c0003fb9:	e8 1c fd ff ff       	call   c0003cda <running_thread>
c0003fbe:	a3 f0 21 01 c0       	mov    %eax,0xc00121f0
/work/x86_os_my/thread/thread.c:171
	init_thread(g_main_thread, "main", 31);
c0003fc3:	a1 f0 21 01 c0       	mov    0xc00121f0,%eax
c0003fc8:	83 ec 04             	sub    $0x4,%esp
c0003fcb:	6a 1f                	push   $0x1f
c0003fcd:	68 28 d3 00 c0       	push   $0xc000d328
c0003fd2:	50                   	push   %eax
c0003fd3:	e8 f6 fd ff ff       	call   c0003dce <init_thread>
c0003fd8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:175

	/* main函数是当前线程,当前线程不在thread_ready_list中,
	 * 所以只将其加在thread_all_list中. */
	ASSERT(!elem_find(&thread_all_list, &g_main_thread->all_list_tag));
c0003fdb:	a1 f0 21 01 c0       	mov    0xc00121f0,%eax
c0003fe0:	83 c0 4c             	add    $0x4c,%eax
c0003fe3:	83 ec 08             	sub    $0x8,%esp
c0003fe6:	50                   	push   %eax
c0003fe7:	68 dc 21 01 c0       	push   $0xc00121dc
c0003fec:	e8 fb 07 00 00       	call   c00047ec <elem_find>
c0003ff1:	83 c4 10             	add    $0x10,%esp
c0003ff4:	85 c0                	test   %eax,%eax
c0003ff6:	74 1c                	je     c0004014 <make_main_thread+0x61>
/work/x86_os_my/thread/thread.c:175 (discriminator 1)
c0003ff8:	68 30 d3 00 c0       	push   $0xc000d330
c0003ffd:	68 f8 d5 00 c0       	push   $0xc000d5f8
c0004002:	68 af 00 00 00       	push   $0xaf
c0004007:	68 e1 d2 00 c0       	push   $0xc000d2e1
c000400c:	e8 40 e4 ff ff       	call   c0002451 <panic_spin>
c0004011:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:176
	list_append(&thread_all_list, &g_main_thread->all_list_tag);
c0004014:	a1 f0 21 01 c0       	mov    0xc00121f0,%eax
c0004019:	83 c0 4c             	add    $0x4c,%eax
c000401c:	83 ec 08             	sub    $0x8,%esp
c000401f:	50                   	push   %eax
c0004020:	68 dc 21 01 c0       	push   $0xc00121dc
c0004025:	e8 48 07 00 00       	call   c0004772 <list_append>
c000402a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:177
}
c000402d:	90                   	nop
c000402e:	c9                   	leave  
c000402f:	c3                   	ret    

c0004030 <schedule>:
schedule():
/work/x86_os_my/thread/thread.c:187
（2）调度器 schedule。
（3）任务切换函数 switch_to。
*/
/* 实现任务调度 */
void schedule()
{
c0004030:	55                   	push   %ebp
c0004031:	89 e5                	mov    %esp,%ebp
c0004033:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:188
	ASSERT(intr_get_status() == INTR_OFF);
c0004036:	e8 79 da ff ff       	call   c0001ab4 <intr_get_status>
c000403b:	85 c0                	test   %eax,%eax
c000403d:	74 1c                	je     c000405b <schedule+0x2b>
/work/x86_os_my/thread/thread.c:188 (discriminator 1)
c000403f:	68 6b d3 00 c0       	push   $0xc000d36b
c0004044:	68 0c d6 00 c0       	push   $0xc000d60c
c0004049:	68 bc 00 00 00       	push   $0xbc
c000404e:	68 e1 d2 00 c0       	push   $0xc000d2e1
c0004053:	e8 f9 e3 ff ff       	call   c0002451 <panic_spin>
c0004058:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:191

	/* 换下 */
	struct task_struct* cur = running_thread(); 
c000405b:	e8 7a fc ff ff       	call   c0003cda <running_thread>
c0004060:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:192
	if (cur->status == TASK_RUNNING) { // 若此线程只是cpu时间片到了,将其加入到就绪队列尾
c0004063:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004066:	8b 40 08             	mov    0x8(%eax),%eax
c0004069:	85 c0                	test   %eax,%eax
c000406b:	75 65                	jne    c00040d2 <schedule+0xa2>
/work/x86_os_my/thread/thread.c:193
		ASSERT(!elem_find(&thread_ready_list, &cur->general_tag));
c000406d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004070:	83 c0 44             	add    $0x44,%eax
c0004073:	83 ec 08             	sub    $0x8,%esp
c0004076:	50                   	push   %eax
c0004077:	68 cc 21 01 c0       	push   $0xc00121cc
c000407c:	e8 6b 07 00 00       	call   c00047ec <elem_find>
c0004081:	83 c4 10             	add    $0x10,%esp
c0004084:	85 c0                	test   %eax,%eax
c0004086:	74 1c                	je     c00040a4 <schedule+0x74>
/work/x86_os_my/thread/thread.c:193 (discriminator 1)
c0004088:	68 8c d3 00 c0       	push   $0xc000d38c
c000408d:	68 0c d6 00 c0       	push   $0xc000d60c
c0004092:	68 c1 00 00 00       	push   $0xc1
c0004097:	68 e1 d2 00 c0       	push   $0xc000d2e1
c000409c:	e8 b0 e3 ff ff       	call   c0002451 <panic_spin>
c00040a1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:194
		list_append(&thread_ready_list, &cur->general_tag);
c00040a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00040a7:	83 c0 44             	add    $0x44,%eax
c00040aa:	83 ec 08             	sub    $0x8,%esp
c00040ad:	50                   	push   %eax
c00040ae:	68 cc 21 01 c0       	push   $0xc00121cc
c00040b3:	e8 ba 06 00 00       	call   c0004772 <list_append>
c00040b8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:195
		cur->ticks = cur->priority;     // 重新将当前线程的ticks再重置为其priority;
c00040bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00040be:	0f b6 50 1c          	movzbl 0x1c(%eax),%edx
c00040c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00040c5:	88 50 1d             	mov    %dl,0x1d(%eax)
/work/x86_os_my/thread/thread.c:196
		cur->status = TASK_READY;
c00040c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00040cb:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/thread/thread.c:203
		/* 若此线程需要某事件发生后才能继续上cpu运行,
		不需要将其加入队列,因为当前线程不在就绪队列中。*/
	}

	/* 如果就绪队列中没有可运行的任务,就唤醒idle */
	if (list_empty(&thread_ready_list)) {
c00040d2:	83 ec 0c             	sub    $0xc,%esp
c00040d5:	68 cc 21 01 c0       	push   $0xc00121cc
c00040da:	e8 da 07 00 00       	call   c00048b9 <list_empty>
c00040df:	83 c4 10             	add    $0x10,%esp
c00040e2:	85 c0                	test   %eax,%eax
c00040e4:	74 11                	je     c00040f7 <schedule+0xc7>
/work/x86_os_my/thread/thread.c:204
		thread_unblock(idle_thread);
c00040e6:	a1 ec 21 01 c0       	mov    0xc00121ec,%eax
c00040eb:	83 ec 0c             	sub    $0xc,%esp
c00040ee:	50                   	push   %eax
c00040ef:	e8 ec 00 00 00       	call   c00041e0 <thread_unblock>
c00040f4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:208
	}
	
	/* 换上 */
	ASSERT(!list_empty(&thread_ready_list));
c00040f7:	83 ec 0c             	sub    $0xc,%esp
c00040fa:	68 cc 21 01 c0       	push   $0xc00121cc
c00040ff:	e8 b5 07 00 00       	call   c00048b9 <list_empty>
c0004104:	83 c4 10             	add    $0x10,%esp
c0004107:	85 c0                	test   %eax,%eax
c0004109:	74 1c                	je     c0004127 <schedule+0xf7>
/work/x86_os_my/thread/thread.c:208 (discriminator 1)
c000410b:	68 c0 d3 00 c0       	push   $0xc000d3c0
c0004110:	68 0c d6 00 c0       	push   $0xc000d60c
c0004115:	68 d0 00 00 00       	push   $0xd0
c000411a:	68 e1 d2 00 c0       	push   $0xc000d2e1
c000411f:	e8 2d e3 ff ff       	call   c0002451 <panic_spin>
c0004124:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:209
	g_thread_tag = NULL;	  // g_thread_tag清空
c0004127:	c7 05 68 15 01 c0 00 	movl   $0x0,0xc0011568
c000412e:	00 00 00 
/work/x86_os_my/thread/thread.c:211
	/* 将thread_ready_list队列中的第一个就绪线程弹出,准备将其调度上cpu. */
	g_thread_tag = list_pop(&thread_ready_list);   
c0004131:	83 ec 0c             	sub    $0xc,%esp
c0004134:	68 cc 21 01 c0       	push   $0xc00121cc
c0004139:	e8 8c 06 00 00       	call   c00047ca <list_pop>
c000413e:	83 c4 10             	add    $0x10,%esp
c0004141:	a3 68 15 01 c0       	mov    %eax,0xc0011568
/work/x86_os_my/thread/thread.c:212
	struct task_struct* next = elem2entry(struct task_struct, general_tag, g_thread_tag);
c0004146:	a1 68 15 01 c0       	mov    0xc0011568,%eax
c000414b:	83 e8 44             	sub    $0x44,%eax
c000414e:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/thread/thread.c:213
	next->status = TASK_RUNNING;
c0004151:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0004154:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
/work/x86_os_my/thread/thread.c:217
	
	/* 1.激活线程或进程的页表,【更新CR3寄存器】
	 * 2.用户进程，更新tss中的esp0为进程的特权级0的栈 */
	process_activate(next);
c000415b:	83 ec 0c             	sub    $0xc,%esp
c000415e:	ff 75 f0             	pushl  -0x10(%ebp)
c0004161:	e8 0c 14 00 00       	call   c0005572 <process_activate>
c0004166:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:219

	switch_to(cur, next);
c0004169:	83 ec 08             	sub    $0x8,%esp
c000416c:	ff 75 f0             	pushl  -0x10(%ebp)
c000416f:	ff 75 f4             	pushl  -0xc(%ebp)
c0004172:	e8 69 07 00 00       	call   c00048e0 <switch_to>
c0004177:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:220
}
c000417a:	90                   	nop
c000417b:	c9                   	leave  
c000417c:	c3                   	ret    

c000417d <thread_block>:
thread_block():
/work/x86_os_my/thread/thread.c:223

/* 当前线程将自己阻塞,标志其状态为stat. */
void thread_block(enum task_status stat) {
c000417d:	55                   	push   %ebp
c000417e:	89 e5                	mov    %esp,%ebp
c0004180:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:225
	/* stat取值为TASK_BLOCKED,TASK_WAITING,TASK_HANGING,也就是只有这三种状态才不会被调度*/
	ASSERT(((stat == TASK_BLOCKED) || (stat == TASK_WAITING) || (stat == TASK_HANGING)));
c0004183:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c0004187:	74 28                	je     c00041b1 <thread_block+0x34>
/work/x86_os_my/thread/thread.c:225 (discriminator 1)
c0004189:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
c000418d:	74 22                	je     c00041b1 <thread_block+0x34>
/work/x86_os_my/thread/thread.c:225 (discriminator 2)
c000418f:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
c0004193:	74 1c                	je     c00041b1 <thread_block+0x34>
/work/x86_os_my/thread/thread.c:225 (discriminator 3)
c0004195:	68 e0 d3 00 c0       	push   $0xc000d3e0
c000419a:	68 18 d6 00 c0       	push   $0xc000d618
c000419f:	68 e1 00 00 00       	push   $0xe1
c00041a4:	68 e1 d2 00 c0       	push   $0xc000d2e1
c00041a9:	e8 a3 e2 ff ff       	call   c0002451 <panic_spin>
c00041ae:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:226
	enum intr_status old_status = intr_disable();
c00041b1:	e8 b7 d8 ff ff       	call   c0001a6d <intr_disable>
c00041b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:228
	
	struct task_struct* cur_thread = running_thread();
c00041b9:	e8 1c fb ff ff       	call   c0003cda <running_thread>
c00041be:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/thread/thread.c:229
	cur_thread->status = stat;
c00041c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00041c4:	8b 55 08             	mov    0x8(%ebp),%edx
c00041c7:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/thread/thread.c:230
	schedule();
c00041ca:	e8 61 fe ff ff       	call   c0004030 <schedule>
/work/x86_os_my/thread/thread.c:233
	
	/* 待当前线程被解除阻塞后才继续运行下面的intr_set_status */
	intr_set_status(old_status);
c00041cf:	83 ec 0c             	sub    $0xc,%esp
c00041d2:	ff 75 f4             	pushl  -0xc(%ebp)
c00041d5:	e8 bc d8 ff ff       	call   c0001a96 <intr_set_status>
c00041da:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:234
}
c00041dd:	90                   	nop
c00041de:	c9                   	leave  
c00041df:	c3                   	ret    

c00041e0 <thread_unblock>:
thread_unblock():
/work/x86_os_my/thread/thread.c:237

/* 将线程pthread解除阻塞 */
void thread_unblock(struct task_struct* pthread) {
c00041e0:	55                   	push   %ebp
c00041e1:	89 e5                	mov    %esp,%ebp
c00041e3:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:238
	enum intr_status old_status = intr_disable();
c00041e6:	e8 82 d8 ff ff       	call   c0001a6d <intr_disable>
c00041eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:239
	ASSERT(((pthread->status == TASK_BLOCKED) || (pthread->status == TASK_WAITING) || (pthread->status == TASK_HANGING)));
c00041ee:	8b 45 08             	mov    0x8(%ebp),%eax
c00041f1:	8b 40 08             	mov    0x8(%eax),%eax
c00041f4:	83 f8 02             	cmp    $0x2,%eax
c00041f7:	74 32                	je     c000422b <thread_unblock+0x4b>
/work/x86_os_my/thread/thread.c:239 (discriminator 1)
c00041f9:	8b 45 08             	mov    0x8(%ebp),%eax
c00041fc:	8b 40 08             	mov    0x8(%eax),%eax
c00041ff:	83 f8 03             	cmp    $0x3,%eax
c0004202:	74 27                	je     c000422b <thread_unblock+0x4b>
/work/x86_os_my/thread/thread.c:239 (discriminator 2)
c0004204:	8b 45 08             	mov    0x8(%ebp),%eax
c0004207:	8b 40 08             	mov    0x8(%eax),%eax
c000420a:	83 f8 04             	cmp    $0x4,%eax
c000420d:	74 1c                	je     c000422b <thread_unblock+0x4b>
/work/x86_os_my/thread/thread.c:239 (discriminator 3)
c000420f:	68 30 d4 00 c0       	push   $0xc000d430
c0004214:	68 28 d6 00 c0       	push   $0xc000d628
c0004219:	68 ef 00 00 00       	push   $0xef
c000421e:	68 e1 d2 00 c0       	push   $0xc000d2e1
c0004223:	e8 29 e2 ff ff       	call   c0002451 <panic_spin>
c0004228:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:241
	
	if (pthread->status != TASK_READY) {
c000422b:	8b 45 08             	mov    0x8(%ebp),%eax
c000422e:	8b 40 08             	mov    0x8(%eax),%eax
c0004231:	83 f8 01             	cmp    $0x1,%eax
c0004234:	0f 84 8f 00 00 00    	je     c00042c9 <thread_unblock+0xe9>
/work/x86_os_my/thread/thread.c:242
		ASSERT(!elem_find(&thread_ready_list, &pthread->general_tag));
c000423a:	8b 45 08             	mov    0x8(%ebp),%eax
c000423d:	83 c0 44             	add    $0x44,%eax
c0004240:	83 ec 08             	sub    $0x8,%esp
c0004243:	50                   	push   %eax
c0004244:	68 cc 21 01 c0       	push   $0xc00121cc
c0004249:	e8 9e 05 00 00       	call   c00047ec <elem_find>
c000424e:	83 c4 10             	add    $0x10,%esp
c0004251:	85 c0                	test   %eax,%eax
c0004253:	74 1c                	je     c0004271 <thread_unblock+0x91>
/work/x86_os_my/thread/thread.c:242 (discriminator 1)
c0004255:	68 a0 d4 00 c0       	push   $0xc000d4a0
c000425a:	68 28 d6 00 c0       	push   $0xc000d628
c000425f:	68 f2 00 00 00       	push   $0xf2
c0004264:	68 e1 d2 00 c0       	push   $0xc000d2e1
c0004269:	e8 e3 e1 ff ff       	call   c0002451 <panic_spin>
c000426e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:243
		if (elem_find(&thread_ready_list, &pthread->general_tag)) {
c0004271:	8b 45 08             	mov    0x8(%ebp),%eax
c0004274:	83 c0 44             	add    $0x44,%eax
c0004277:	83 ec 08             	sub    $0x8,%esp
c000427a:	50                   	push   %eax
c000427b:	68 cc 21 01 c0       	push   $0xc00121cc
c0004280:	e8 67 05 00 00       	call   c00047ec <elem_find>
c0004285:	83 c4 10             	add    $0x10,%esp
c0004288:	85 c0                	test   %eax,%eax
c000428a:	74 1c                	je     c00042a8 <thread_unblock+0xc8>
/work/x86_os_my/thread/thread.c:244
			PANIC("thread_unblock: blocked thread in ready_list\n");
c000428c:	68 d8 d4 00 c0       	push   $0xc000d4d8
c0004291:	68 28 d6 00 c0       	push   $0xc000d628
c0004296:	68 f4 00 00 00       	push   $0xf4
c000429b:	68 e1 d2 00 c0       	push   $0xc000d2e1
c00042a0:	e8 ac e1 ff ff       	call   c0002451 <panic_spin>
c00042a5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:246
		}
		list_push(&thread_ready_list, &pthread->general_tag);	// 放到队列的最前面,使其尽快得到调度
c00042a8:	8b 45 08             	mov    0x8(%ebp),%eax
c00042ab:	83 c0 44             	add    $0x44,%eax
c00042ae:	83 ec 08             	sub    $0x8,%esp
c00042b1:	50                   	push   %eax
c00042b2:	68 cc 21 01 c0       	push   $0xc00121cc
c00042b7:	e8 98 04 00 00       	call   c0004754 <list_push>
c00042bc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:247
		pthread->status = TASK_READY;
c00042bf:	8b 45 08             	mov    0x8(%ebp),%eax
c00042c2:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/thread/thread.c:250
	}
	
	intr_set_status(old_status);
c00042c9:	83 ec 0c             	sub    $0xc,%esp
c00042cc:	ff 75 f4             	pushl  -0xc(%ebp)
c00042cf:	e8 c2 d7 ff ff       	call   c0001a96 <intr_set_status>
c00042d4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:251
}
c00042d7:	90                   	nop
c00042d8:	c9                   	leave  
c00042d9:	c3                   	ret    

c00042da <thread_yield>:
thread_yield():
/work/x86_os_my/thread/thread.c:254

/* 主动让出cpu，换其它线程运行，但状态仍是ready */
void thread_yield(void) {
c00042da:	55                   	push   %ebp
c00042db:	89 e5                	mov    %esp,%ebp
c00042dd:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:255
	struct task_struct* cur = running_thread();
c00042e0:	e8 f5 f9 ff ff       	call   c0003cda <running_thread>
c00042e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:256
	enum intr_status old_status = intr_disable();
c00042e8:	e8 80 d7 ff ff       	call   c0001a6d <intr_disable>
c00042ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/thread/thread.c:257
	ASSERT(!elem_find(&thread_ready_list, &cur->general_tag));
c00042f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00042f3:	83 c0 44             	add    $0x44,%eax
c00042f6:	83 ec 08             	sub    $0x8,%esp
c00042f9:	50                   	push   %eax
c00042fa:	68 cc 21 01 c0       	push   $0xc00121cc
c00042ff:	e8 e8 04 00 00       	call   c00047ec <elem_find>
c0004304:	83 c4 10             	add    $0x10,%esp
c0004307:	85 c0                	test   %eax,%eax
c0004309:	74 1c                	je     c0004327 <thread_yield+0x4d>
/work/x86_os_my/thread/thread.c:257 (discriminator 1)
c000430b:	68 8c d3 00 c0       	push   $0xc000d38c
c0004310:	68 38 d6 00 c0       	push   $0xc000d638
c0004315:	68 01 01 00 00       	push   $0x101
c000431a:	68 e1 d2 00 c0       	push   $0xc000d2e1
c000431f:	e8 2d e1 ff ff       	call   c0002451 <panic_spin>
c0004324:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:258
	list_append(&thread_ready_list, &cur->general_tag);
c0004327:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000432a:	83 c0 44             	add    $0x44,%eax
c000432d:	83 ec 08             	sub    $0x8,%esp
c0004330:	50                   	push   %eax
c0004331:	68 cc 21 01 c0       	push   $0xc00121cc
c0004336:	e8 37 04 00 00       	call   c0004772 <list_append>
c000433b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:259
	cur->status = TASK_READY;
c000433e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004341:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/thread/thread.c:260
	schedule();
c0004348:	e8 e3 fc ff ff       	call   c0004030 <schedule>
/work/x86_os_my/thread/thread.c:261
	intr_set_status(old_status);
c000434d:	83 ec 0c             	sub    $0xc,%esp
c0004350:	ff 75 f0             	pushl  -0x10(%ebp)
c0004353:	e8 3e d7 ff ff       	call   c0001a96 <intr_set_status>
c0004358:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:262
}
c000435b:	90                   	nop
c000435c:	c9                   	leave  
c000435d:	c3                   	ret    

c000435e <pad_print>:
pad_print():
/work/x86_os_my/thread/thread.c:266


/* 前边填充空格 后边按format格式输出ptr的内容 输出的总长度都是buf_len个字符 */
static void pad_print(char* buf, int32_t buf_len, void* ptr, char format) {
c000435e:	55                   	push   %ebp
c000435f:	89 e5                	mov    %esp,%ebp
c0004361:	83 ec 28             	sub    $0x28,%esp
c0004364:	8b 45 14             	mov    0x14(%ebp),%eax
c0004367:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/thread/thread.c:267
	memset(buf, 0, buf_len);
c000436a:	8b 45 0c             	mov    0xc(%ebp),%eax
c000436d:	83 ec 04             	sub    $0x4,%esp
c0004370:	50                   	push   %eax
c0004371:	6a 00                	push   $0x0
c0004373:	ff 75 08             	pushl  0x8(%ebp)
c0004376:	e8 78 f5 ff ff       	call   c00038f3 <memset>
c000437b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:268
	uint8_t out_pad_0idx = 0;
c000437e:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/thread/thread.c:269
	switch(format) {
c0004382:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
c0004386:	83 f8 73             	cmp    $0x73,%eax
c0004389:	74 0c                	je     c0004397 <pad_print+0x39>
c000438b:	83 f8 78             	cmp    $0x78,%eax
c000438e:	74 40                	je     c00043d0 <pad_print+0x72>
c0004390:	83 f8 64             	cmp    $0x64,%eax
c0004393:	74 1d                	je     c00043b2 <pad_print+0x54>
c0004395:	eb 55                	jmp    c00043ec <pad_print+0x8e>
/work/x86_os_my/thread/thread.c:271
		case 's':
		out_pad_0idx = sprintf(buf, "%s", ptr);
c0004397:	83 ec 04             	sub    $0x4,%esp
c000439a:	ff 75 10             	pushl  0x10(%ebp)
c000439d:	68 06 d5 00 c0       	push   $0xc000d506
c00043a2:	ff 75 08             	pushl  0x8(%ebp)
c00043a5:	e8 dc 19 00 00       	call   c0005d86 <sprintf>
c00043aa:	83 c4 10             	add    $0x10,%esp
c00043ad:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/thread/thread.c:272
		break;
c00043b0:	eb 3a                	jmp    c00043ec <pad_print+0x8e>
/work/x86_os_my/thread/thread.c:274
		case 'd':
		out_pad_0idx = sprintf(buf, "%d", *((int16_t*)ptr));
c00043b2:	8b 45 10             	mov    0x10(%ebp),%eax
c00043b5:	0f b7 00             	movzwl (%eax),%eax
c00043b8:	98                   	cwtl   
c00043b9:	83 ec 04             	sub    $0x4,%esp
c00043bc:	50                   	push   %eax
c00043bd:	68 09 d5 00 c0       	push   $0xc000d509
c00043c2:	ff 75 08             	pushl  0x8(%ebp)
c00043c5:	e8 bc 19 00 00       	call   c0005d86 <sprintf>
c00043ca:	83 c4 10             	add    $0x10,%esp
c00043cd:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/thread/thread.c:276
		case 'x':
		out_pad_0idx = sprintf(buf, "%x", *((uint32_t*)ptr));
c00043d0:	8b 45 10             	mov    0x10(%ebp),%eax
c00043d3:	8b 00                	mov    (%eax),%eax
c00043d5:	83 ec 04             	sub    $0x4,%esp
c00043d8:	50                   	push   %eax
c00043d9:	68 0c d5 00 c0       	push   $0xc000d50c
c00043de:	ff 75 08             	pushl  0x8(%ebp)
c00043e1:	e8 a0 19 00 00       	call   c0005d86 <sprintf>
c00043e6:	83 c4 10             	add    $0x10,%esp
c00043e9:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/thread/thread.c:278
	}
	while(out_pad_0idx < buf_len) { // 以空格填充
c00043ec:	eb 16                	jmp    c0004404 <pad_print+0xa6>
/work/x86_os_my/thread/thread.c:279
		buf[out_pad_0idx] = ' ';
c00043ee:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c00043f2:	8b 45 08             	mov    0x8(%ebp),%eax
c00043f5:	01 d0                	add    %edx,%eax
c00043f7:	c6 00 20             	movb   $0x20,(%eax)
/work/x86_os_my/thread/thread.c:280
		out_pad_0idx++;
c00043fa:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00043fe:	83 c0 01             	add    $0x1,%eax
c0004401:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/thread/thread.c:278
		case 'd':
		out_pad_0idx = sprintf(buf, "%d", *((int16_t*)ptr));
		case 'x':
		out_pad_0idx = sprintf(buf, "%x", *((uint32_t*)ptr));
	}
	while(out_pad_0idx < buf_len) { // 以空格填充
c0004404:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0004408:	3b 45 0c             	cmp    0xc(%ebp),%eax
c000440b:	7c e1                	jl     c00043ee <pad_print+0x90>
/work/x86_os_my/thread/thread.c:282
		buf[out_pad_0idx] = ' ';
		out_pad_0idx++;
	}
	sys_write(stdout_no, buf, buf_len - 1);
c000440d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0004410:	83 e8 01             	sub    $0x1,%eax
c0004413:	83 ec 04             	sub    $0x4,%esp
c0004416:	50                   	push   %eax
c0004417:	ff 75 08             	pushl  0x8(%ebp)
c000441a:	6a 01                	push   $0x1
c000441c:	e8 b4 34 00 00       	call   c00078d5 <sys_write>
c0004421:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:283
}
c0004424:	90                   	nop
c0004425:	c9                   	leave  
c0004426:	c3                   	ret    

c0004427 <elem2thread_info>:
elem2thread_info():
/work/x86_os_my/thread/thread.c:286

/* 用于在list_traversal函数中的回调函数,用于针对线程队列的处理 */
static bool elem2thread_info(struct list_elem* pelem, int arg UNUSED) {
c0004427:	55                   	push   %ebp
c0004428:	89 e5                	mov    %esp,%ebp
c000442a:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/thread/thread.c:287
	struct task_struct* pthread = elem2entry(struct task_struct, all_list_tag, pelem);
c000442d:	8b 45 08             	mov    0x8(%ebp),%eax
c0004430:	83 e8 4c             	sub    $0x4c,%eax
c0004433:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:288
	char out_pad[16] = {0};
c0004436:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c000443d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0004444:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c000444b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/thread/thread.c:290

	pad_print(out_pad, 16, &pthread->pid, 'd');
c0004452:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004455:	83 c0 04             	add    $0x4,%eax
c0004458:	6a 64                	push   $0x64
c000445a:	50                   	push   %eax
c000445b:	6a 10                	push   $0x10
c000445d:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0004460:	50                   	push   %eax
c0004461:	e8 f8 fe ff ff       	call   c000435e <pad_print>
c0004466:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:292

	if (pthread->parent_pid == -1) {
c0004469:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000446c:	0f b7 80 10 01 00 00 	movzwl 0x110(%eax),%eax
c0004473:	66 83 f8 ff          	cmp    $0xffff,%ax
c0004477:	75 17                	jne    c0004490 <elem2thread_info+0x69>
/work/x86_os_my/thread/thread.c:293
		pad_print(out_pad, 16, "NULL", 's');
c0004479:	6a 73                	push   $0x73
c000447b:	68 0f d5 00 c0       	push   $0xc000d50f
c0004480:	6a 10                	push   $0x10
c0004482:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0004485:	50                   	push   %eax
c0004486:	e8 d3 fe ff ff       	call   c000435e <pad_print>
c000448b:	83 c4 10             	add    $0x10,%esp
c000448e:	eb 19                	jmp    c00044a9 <elem2thread_info+0x82>
/work/x86_os_my/thread/thread.c:295
	} else {
		pad_print(out_pad, 16, &pthread->parent_pid, 'd');
c0004490:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004493:	05 10 01 00 00       	add    $0x110,%eax
c0004498:	6a 64                	push   $0x64
c000449a:	50                   	push   %eax
c000449b:	6a 10                	push   $0x10
c000449d:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c00044a0:	50                   	push   %eax
c00044a1:	e8 b8 fe ff ff       	call   c000435e <pad_print>
c00044a6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:298
	}

	switch (pthread->status) {
c00044a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00044ac:	8b 40 08             	mov    0x8(%eax),%eax
c00044af:	83 f8 05             	cmp    $0x5,%eax
c00044b2:	0f 87 91 00 00 00    	ja     c0004549 <elem2thread_info+0x122>
c00044b8:	8b 04 85 5c d5 00 c0 	mov    -0x3fff2aa4(,%eax,4),%eax
c00044bf:	ff e0                	jmp    *%eax
/work/x86_os_my/thread/thread.c:300
		case 0:
		pad_print(out_pad, 16, "RUNNING", 's');
c00044c1:	6a 73                	push   $0x73
c00044c3:	68 14 d5 00 c0       	push   $0xc000d514
c00044c8:	6a 10                	push   $0x10
c00044ca:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c00044cd:	50                   	push   %eax
c00044ce:	e8 8b fe ff ff       	call   c000435e <pad_print>
c00044d3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:301
		break;
c00044d6:	eb 71                	jmp    c0004549 <elem2thread_info+0x122>
/work/x86_os_my/thread/thread.c:303
		case 1:
		pad_print(out_pad, 16, "READY", 's');
c00044d8:	6a 73                	push   $0x73
c00044da:	68 1c d5 00 c0       	push   $0xc000d51c
c00044df:	6a 10                	push   $0x10
c00044e1:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c00044e4:	50                   	push   %eax
c00044e5:	e8 74 fe ff ff       	call   c000435e <pad_print>
c00044ea:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:304
		break;
c00044ed:	eb 5a                	jmp    c0004549 <elem2thread_info+0x122>
/work/x86_os_my/thread/thread.c:306
		case 2:
		pad_print(out_pad, 16, "BLOCKED", 's');
c00044ef:	6a 73                	push   $0x73
c00044f1:	68 22 d5 00 c0       	push   $0xc000d522
c00044f6:	6a 10                	push   $0x10
c00044f8:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c00044fb:	50                   	push   %eax
c00044fc:	e8 5d fe ff ff       	call   c000435e <pad_print>
c0004501:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:307
		break;
c0004504:	eb 43                	jmp    c0004549 <elem2thread_info+0x122>
/work/x86_os_my/thread/thread.c:309
		case 3:
		pad_print(out_pad, 16, "WAITING", 's');
c0004506:	6a 73                	push   $0x73
c0004508:	68 2a d5 00 c0       	push   $0xc000d52a
c000450d:	6a 10                	push   $0x10
c000450f:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0004512:	50                   	push   %eax
c0004513:	e8 46 fe ff ff       	call   c000435e <pad_print>
c0004518:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:310
		break;
c000451b:	eb 2c                	jmp    c0004549 <elem2thread_info+0x122>
/work/x86_os_my/thread/thread.c:312
		case 4:
		pad_print(out_pad, 16, "HANGING", 's');
c000451d:	6a 73                	push   $0x73
c000451f:	68 32 d5 00 c0       	push   $0xc000d532
c0004524:	6a 10                	push   $0x10
c0004526:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0004529:	50                   	push   %eax
c000452a:	e8 2f fe ff ff       	call   c000435e <pad_print>
c000452f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:313
		break;
c0004532:	eb 15                	jmp    c0004549 <elem2thread_info+0x122>
/work/x86_os_my/thread/thread.c:315
		case 5:
		pad_print(out_pad, 16, "DIED", 's');
c0004534:	6a 73                	push   $0x73
c0004536:	68 3a d5 00 c0       	push   $0xc000d53a
c000453b:	6a 10                	push   $0x10
c000453d:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0004540:	50                   	push   %eax
c0004541:	e8 18 fe ff ff       	call   c000435e <pad_print>
c0004546:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:317
	}
	pad_print(out_pad, 16, &pthread->elapsed_ticks, 'x');
c0004549:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000454c:	83 c0 20             	add    $0x20,%eax
c000454f:	6a 78                	push   $0x78
c0004551:	50                   	push   %eax
c0004552:	6a 10                	push   $0x10
c0004554:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0004557:	50                   	push   %eax
c0004558:	e8 01 fe ff ff       	call   c000435e <pad_print>
c000455d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:319

	memset(out_pad, 0, 16);
c0004560:	83 ec 04             	sub    $0x4,%esp
c0004563:	6a 10                	push   $0x10
c0004565:	6a 00                	push   $0x0
c0004567:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c000456a:	50                   	push   %eax
c000456b:	e8 83 f3 ff ff       	call   c00038f3 <memset>
c0004570:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:320
	ASSERT(strlen(pthread->name) < 17);
c0004573:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004576:	83 c0 0c             	add    $0xc,%eax
c0004579:	83 ec 0c             	sub    $0xc,%esp
c000457c:	50                   	push   %eax
c000457d:	e8 fb f4 ff ff       	call   c0003a7d <strlen>
c0004582:	83 c4 10             	add    $0x10,%esp
c0004585:	83 f8 10             	cmp    $0x10,%eax
c0004588:	76 1c                	jbe    c00045a6 <elem2thread_info+0x17f>
/work/x86_os_my/thread/thread.c:320 (discriminator 1)
c000458a:	68 3f d5 00 c0       	push   $0xc000d53f
c000458f:	68 48 d6 00 c0       	push   $0xc000d648
c0004594:	68 40 01 00 00       	push   $0x140
c0004599:	68 e1 d2 00 c0       	push   $0xc000d2e1
c000459e:	e8 ae de ff ff       	call   c0002451 <panic_spin>
c00045a3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:321
	memcpy(out_pad, pthread->name, strlen(pthread->name));
c00045a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00045a9:	83 c0 0c             	add    $0xc,%eax
c00045ac:	83 ec 0c             	sub    $0xc,%esp
c00045af:	50                   	push   %eax
c00045b0:	e8 c8 f4 ff ff       	call   c0003a7d <strlen>
c00045b5:	83 c4 10             	add    $0x10,%esp
c00045b8:	89 c2                	mov    %eax,%edx
c00045ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00045bd:	83 c0 0c             	add    $0xc,%eax
c00045c0:	83 ec 04             	sub    $0x4,%esp
c00045c3:	52                   	push   %edx
c00045c4:	50                   	push   %eax
c00045c5:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c00045c8:	50                   	push   %eax
c00045c9:	e8 77 f3 ff ff       	call   c0003945 <memcpy>
c00045ce:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:322
	strcat(out_pad, "\n");
c00045d1:	83 ec 08             	sub    $0x8,%esp
c00045d4:	68 5a d5 00 c0       	push   $0xc000d55a
c00045d9:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c00045dc:	50                   	push   %eax
c00045dd:	e8 15 f6 ff ff       	call   c0003bf7 <strcat>
c00045e2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:323
	sys_write(stdout_no, out_pad, strlen(out_pad));
c00045e5:	83 ec 0c             	sub    $0xc,%esp
c00045e8:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c00045eb:	50                   	push   %eax
c00045ec:	e8 8c f4 ff ff       	call   c0003a7d <strlen>
c00045f1:	83 c4 10             	add    $0x10,%esp
c00045f4:	83 ec 04             	sub    $0x4,%esp
c00045f7:	50                   	push   %eax
c00045f8:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c00045fb:	50                   	push   %eax
c00045fc:	6a 01                	push   $0x1
c00045fe:	e8 d2 32 00 00       	call   c00078d5 <sys_write>
c0004603:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:324
	return false;	// 此处返回false是为了迎合主调函数list_traversal,只有回调函数返回false时才会继续调用此函数
c0004606:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/thread/thread.c:325
}
c000460b:	c9                   	leave  
c000460c:	c3                   	ret    

c000460d <sys_ps>:
sys_ps():
/work/x86_os_my/thread/thread.c:328

/* 打印任务列表 */
void sys_ps(void) {
c000460d:	55                   	push   %ebp
c000460e:	89 e5                	mov    %esp,%ebp
c0004610:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:330
	///////////////   |<--   15  -->||<--   15  -->||<--   15  -->||<--   15  -->||<-7->|
	char* ps_title = "PID            PPID           STAT           TICKS          COMMAND\n";
c0004613:	c7 45 f4 74 d5 00 c0 	movl   $0xc000d574,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:331
	sys_write(stdout_no, ps_title, strlen(ps_title));
c000461a:	83 ec 0c             	sub    $0xc,%esp
c000461d:	ff 75 f4             	pushl  -0xc(%ebp)
c0004620:	e8 58 f4 ff ff       	call   c0003a7d <strlen>
c0004625:	83 c4 10             	add    $0x10,%esp
c0004628:	83 ec 04             	sub    $0x4,%esp
c000462b:	50                   	push   %eax
c000462c:	ff 75 f4             	pushl  -0xc(%ebp)
c000462f:	6a 01                	push   $0x1
c0004631:	e8 9f 32 00 00       	call   c00078d5 <sys_write>
c0004636:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:332
	list_traversal(&thread_all_list, elem2thread_info, 0);
c0004639:	83 ec 04             	sub    $0x4,%esp
c000463c:	6a 00                	push   $0x0
c000463e:	68 27 44 00 c0       	push   $0xc0004427
c0004643:	68 dc 21 01 c0       	push   $0xc00121dc
c0004648:	e8 da 01 00 00       	call   c0004827 <list_traversal>
c000464d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:333
}
c0004650:	90                   	nop
c0004651:	c9                   	leave  
c0004652:	c3                   	ret    

c0004653 <thread_init>:
thread_init():
/work/x86_os_my/thread/thread.c:337


/* 初始化线程环境 */
void thread_init(void) {
c0004653:	55                   	push   %ebp
c0004654:	89 e5                	mov    %esp,%ebp
c0004656:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:338
	put_str("thread_init start\n");
c0004659:	83 ec 0c             	sub    $0xc,%esp
c000465c:	68 b9 d5 00 c0       	push   $0xc000d5b9
c0004661:	e8 3a dc ff ff       	call   c00022a0 <put_str>
c0004666:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:339
	list_init(&thread_ready_list);
c0004669:	83 ec 0c             	sub    $0xc,%esp
c000466c:	68 cc 21 01 c0       	push   $0xc00121cc
c0004671:	e8 6b 00 00 00       	call   c00046e1 <list_init>
c0004676:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:340
	list_init(&thread_all_list);
c0004679:	83 ec 0c             	sub    $0xc,%esp
c000467c:	68 dc 21 01 c0       	push   $0xc00121dc
c0004681:	e8 5b 00 00 00       	call   c00046e1 <list_init>
c0004686:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:341
	lock_init(&pid_lock);
c0004689:	83 ec 0c             	sub    $0xc,%esp
c000468c:	68 f4 21 01 c0       	push   $0xc00121f4
c0004691:	e8 3f 03 00 00       	call   c00049d5 <lock_init>
c0004696:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:343
	/* 先创建第一个用户进程:init */
	process_execute(init, "init");	// 放在第一个初始化,这是第一个进程,init进程的pid为1
c0004699:	83 ec 08             	sub    $0x8,%esp
c000469c:	68 cc d5 00 c0       	push   $0xc000d5cc
c00046a1:	68 6a 16 00 c0       	push   $0xc000166a
c00046a6:	e8 d9 0f 00 00       	call   c0005684 <process_execute>
c00046ab:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:345
	/* 将当前main函数创建为线程 */
	make_main_thread();
c00046ae:	e8 00 f9 ff ff       	call   c0003fb3 <make_main_thread>
/work/x86_os_my/thread/thread.c:347
	/* 创建idle线程 */
	idle_thread = thread_start("idle", 10, idle, NULL);
c00046b3:	6a 00                	push   $0x0
c00046b5:	68 c3 3c 00 c0       	push   $0xc0003cc3
c00046ba:	6a 0a                	push   $0xa
c00046bc:	68 d1 d5 00 c0       	push   $0xc000d5d1
c00046c1:	e8 0e f8 ff ff       	call   c0003ed4 <thread_start>
c00046c6:	83 c4 10             	add    $0x10,%esp
c00046c9:	a3 ec 21 01 c0       	mov    %eax,0xc00121ec
/work/x86_os_my/thread/thread.c:348
	put_str("thread_init done\n");
c00046ce:	83 ec 0c             	sub    $0xc,%esp
c00046d1:	68 d6 d5 00 c0       	push   $0xc000d5d6
c00046d6:	e8 c5 db ff ff       	call   c00022a0 <put_str>
c00046db:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:349
}
c00046de:	90                   	nop
c00046df:	c9                   	leave  
c00046e0:	c3                   	ret    

c00046e1 <list_init>:
list_init():
/work/x86_os_my/lib/kernel/list.c:6
#include "list.h"
#include "interrupt.h"
/* 注意关中断的操作：临界区 */

/* 初始化双向链表list */
void list_init (struct list* list) {
c00046e1:	55                   	push   %ebp
c00046e2:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/lib/kernel/list.c:7
	list->head.prev = NULL;
c00046e4:	8b 45 08             	mov    0x8(%ebp),%eax
c00046e7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/lib/kernel/list.c:8
	list->head.next = &list->tail;
c00046ed:	8b 45 08             	mov    0x8(%ebp),%eax
c00046f0:	8d 50 08             	lea    0x8(%eax),%edx
c00046f3:	8b 45 08             	mov    0x8(%ebp),%eax
c00046f6:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/lib/kernel/list.c:9
	list->tail.prev = &list->head;
c00046f9:	8b 55 08             	mov    0x8(%ebp),%edx
c00046fc:	8b 45 08             	mov    0x8(%ebp),%eax
c00046ff:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/lib/kernel/list.c:10
	list->tail.next = NULL;
c0004702:	8b 45 08             	mov    0x8(%ebp),%eax
c0004705:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
/work/x86_os_my/lib/kernel/list.c:11
}
c000470c:	90                   	nop
c000470d:	5d                   	pop    %ebp
c000470e:	c3                   	ret    

c000470f <list_insert_before>:
list_insert_before():
/work/x86_os_my/lib/kernel/list.c:14

/* 把链表元素elem插入在元素before之前 */
void list_insert_before(struct list_elem* before, struct list_elem* elem) { 
c000470f:	55                   	push   %ebp
c0004710:	89 e5                	mov    %esp,%ebp
c0004712:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/kernel/list.c:15
	enum intr_status old_status = intr_disable();
c0004715:	e8 53 d3 ff ff       	call   c0001a6d <intr_disable>
c000471a:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/list.c:18

	/* 将before前驱元素的后继元素更新为elem, 暂时使before脱离链表*/ 
	before->prev->next = elem; 
c000471d:	8b 45 08             	mov    0x8(%ebp),%eax
c0004720:	8b 00                	mov    (%eax),%eax
c0004722:	8b 55 0c             	mov    0xc(%ebp),%edx
c0004725:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/lib/kernel/list.c:22

	/* 更新elem自己的前驱结点为before的前驱,
	* 更新elem自己的后继结点为before, 于是before又回到链表 */
	elem->prev = before->prev;
c0004728:	8b 45 08             	mov    0x8(%ebp),%eax
c000472b:	8b 10                	mov    (%eax),%edx
c000472d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0004730:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/lib/kernel/list.c:23
	elem->next = before;
c0004732:	8b 45 0c             	mov    0xc(%ebp),%eax
c0004735:	8b 55 08             	mov    0x8(%ebp),%edx
c0004738:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/lib/kernel/list.c:26

	/* 更新before的前驱结点为elem */
	before->prev = elem;
c000473b:	8b 45 08             	mov    0x8(%ebp),%eax
c000473e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0004741:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/lib/kernel/list.c:28

	intr_set_status(old_status);
c0004743:	83 ec 0c             	sub    $0xc,%esp
c0004746:	ff 75 f4             	pushl  -0xc(%ebp)
c0004749:	e8 48 d3 ff ff       	call   c0001a96 <intr_set_status>
c000474e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:29
}
c0004751:	90                   	nop
c0004752:	c9                   	leave  
c0004753:	c3                   	ret    

c0004754 <list_push>:
list_push():
/work/x86_os_my/lib/kernel/list.c:32

/* 添加元素到列表队首,类似栈push操作 */
void list_push(struct list* plist, struct list_elem* elem) {
c0004754:	55                   	push   %ebp
c0004755:	89 e5                	mov    %esp,%ebp
c0004757:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/lib/kernel/list.c:33
	list_insert_before(plist->head.next, elem); // 在队头插入elem
c000475a:	8b 45 08             	mov    0x8(%ebp),%eax
c000475d:	8b 40 04             	mov    0x4(%eax),%eax
c0004760:	83 ec 08             	sub    $0x8,%esp
c0004763:	ff 75 0c             	pushl  0xc(%ebp)
c0004766:	50                   	push   %eax
c0004767:	e8 a3 ff ff ff       	call   c000470f <list_insert_before>
c000476c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:34
}
c000476f:	90                   	nop
c0004770:	c9                   	leave  
c0004771:	c3                   	ret    

c0004772 <list_append>:
list_append():
/work/x86_os_my/lib/kernel/list.c:37

/* 追加元素到链表队尾,类似队列的先进先出操作 */
void list_append(struct list* plist, struct list_elem* elem) {
c0004772:	55                   	push   %ebp
c0004773:	89 e5                	mov    %esp,%ebp
c0004775:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/lib/kernel/list.c:38
	list_insert_before(&plist->tail, elem);     // 在队尾的前面插入
c0004778:	8b 45 08             	mov    0x8(%ebp),%eax
c000477b:	83 c0 08             	add    $0x8,%eax
c000477e:	83 ec 08             	sub    $0x8,%esp
c0004781:	ff 75 0c             	pushl  0xc(%ebp)
c0004784:	50                   	push   %eax
c0004785:	e8 85 ff ff ff       	call   c000470f <list_insert_before>
c000478a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:39
}
c000478d:	90                   	nop
c000478e:	c9                   	leave  
c000478f:	c3                   	ret    

c0004790 <list_remove>:
list_remove():
/work/x86_os_my/lib/kernel/list.c:42

/* 使元素pelem脱离链表 */
void list_remove(struct list_elem* pelem) {
c0004790:	55                   	push   %ebp
c0004791:	89 e5                	mov    %esp,%ebp
c0004793:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/kernel/list.c:43
	enum intr_status old_status = intr_disable();
c0004796:	e8 d2 d2 ff ff       	call   c0001a6d <intr_disable>
c000479b:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/list.c:45

	pelem->prev->next = pelem->next;
c000479e:	8b 45 08             	mov    0x8(%ebp),%eax
c00047a1:	8b 00                	mov    (%eax),%eax
c00047a3:	8b 55 08             	mov    0x8(%ebp),%edx
c00047a6:	8b 52 04             	mov    0x4(%edx),%edx
c00047a9:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/lib/kernel/list.c:46
	pelem->next->prev = pelem->prev;
c00047ac:	8b 45 08             	mov    0x8(%ebp),%eax
c00047af:	8b 40 04             	mov    0x4(%eax),%eax
c00047b2:	8b 55 08             	mov    0x8(%ebp),%edx
c00047b5:	8b 12                	mov    (%edx),%edx
c00047b7:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/lib/kernel/list.c:48

	intr_set_status(old_status);
c00047b9:	83 ec 0c             	sub    $0xc,%esp
c00047bc:	ff 75 f4             	pushl  -0xc(%ebp)
c00047bf:	e8 d2 d2 ff ff       	call   c0001a96 <intr_set_status>
c00047c4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:49
}
c00047c7:	90                   	nop
c00047c8:	c9                   	leave  
c00047c9:	c3                   	ret    

c00047ca <list_pop>:
list_pop():
/work/x86_os_my/lib/kernel/list.c:52

/* 将链表第一个元素弹出并返回,类似栈的pop操作 */
struct list_elem* list_pop(struct list* plist) {
c00047ca:	55                   	push   %ebp
c00047cb:	89 e5                	mov    %esp,%ebp
c00047cd:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/kernel/list.c:53
	struct list_elem* elem = plist->head.next;
c00047d0:	8b 45 08             	mov    0x8(%ebp),%eax
c00047d3:	8b 40 04             	mov    0x4(%eax),%eax
c00047d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/list.c:54
	list_remove(elem);
c00047d9:	83 ec 0c             	sub    $0xc,%esp
c00047dc:	ff 75 f4             	pushl  -0xc(%ebp)
c00047df:	e8 ac ff ff ff       	call   c0004790 <list_remove>
c00047e4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:55
	return elem;
c00047e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/lib/kernel/list.c:56
} 
c00047ea:	c9                   	leave  
c00047eb:	c3                   	ret    

c00047ec <elem_find>:
elem_find():
/work/x86_os_my/lib/kernel/list.c:59

/* 从链表中查找元素obj_elem,成功时返回true,失败时返回false */
bool elem_find(struct list* plist, struct list_elem* obj_elem) {
c00047ec:	55                   	push   %ebp
c00047ed:	89 e5                	mov    %esp,%ebp
c00047ef:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:60
	struct list_elem* elem = plist->head.next;
c00047f2:	8b 45 08             	mov    0x8(%ebp),%eax
c00047f5:	8b 40 04             	mov    0x4(%eax),%eax
c00047f8:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/kernel/list.c:61
	while (elem != &plist->tail) {
c00047fb:	eb 18                	jmp    c0004815 <elem_find+0x29>
/work/x86_os_my/lib/kernel/list.c:62
	if (elem == obj_elem) {
c00047fd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0004800:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0004803:	75 07                	jne    c000480c <elem_find+0x20>
/work/x86_os_my/lib/kernel/list.c:63
		return true;
c0004805:	b8 01 00 00 00       	mov    $0x1,%eax
c000480a:	eb 19                	jmp    c0004825 <elem_find+0x39>
/work/x86_os_my/lib/kernel/list.c:65
	}
		elem = elem->next;
c000480c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000480f:	8b 40 04             	mov    0x4(%eax),%eax
c0004812:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/kernel/list.c:61
} 

/* 从链表中查找元素obj_elem,成功时返回true,失败时返回false */
bool elem_find(struct list* plist, struct list_elem* obj_elem) {
	struct list_elem* elem = plist->head.next;
	while (elem != &plist->tail) {
c0004815:	8b 45 08             	mov    0x8(%ebp),%eax
c0004818:	83 c0 08             	add    $0x8,%eax
c000481b:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c000481e:	75 dd                	jne    c00047fd <elem_find+0x11>
/work/x86_os_my/lib/kernel/list.c:67
	if (elem == obj_elem) {
		return true;
	}
		elem = elem->next;
	}
	return false;
c0004820:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/lib/kernel/list.c:68
}
c0004825:	c9                   	leave  
c0004826:	c3                   	ret    

c0004827 <list_traversal>:
list_traversal():
/work/x86_os_my/lib/kernel/list.c:74

/* 把列表plist中的每个元素elem和arg传给回调函数func,
 * arg给func用来判断elem是否符合条件.
 * 本函数的功能是遍历列表内所有元素,逐个判断是否有符合条件的元素。
 * 找到符合条件的元素返回元素指针,否则返回NULL. */
struct list_elem* list_traversal(struct list* plist, function func, int arg) {
c0004827:	55                   	push   %ebp
c0004828:	89 e5                	mov    %esp,%ebp
c000482a:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/kernel/list.c:75
	struct list_elem* elem = plist->head.next;
c000482d:	8b 45 08             	mov    0x8(%ebp),%eax
c0004830:	8b 40 04             	mov    0x4(%eax),%eax
c0004833:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/list.c:77
	/* 如果队列为空,就必然没有符合条件的结点,故直接返回NULL */
	if (list_empty(plist)) { 
c0004836:	83 ec 0c             	sub    $0xc,%esp
c0004839:	ff 75 08             	pushl  0x8(%ebp)
c000483c:	e8 78 00 00 00       	call   c00048b9 <list_empty>
c0004841:	83 c4 10             	add    $0x10,%esp
c0004844:	85 c0                	test   %eax,%eax
c0004846:	74 2a                	je     c0004872 <list_traversal+0x4b>
/work/x86_os_my/lib/kernel/list.c:78
		return NULL;
c0004848:	b8 00 00 00 00       	mov    $0x0,%eax
c000484d:	eb 33                	jmp    c0004882 <list_traversal+0x5b>
/work/x86_os_my/lib/kernel/list.c:82
	}

	while (elem != &plist->tail) {
	if (func(elem, arg)) {		// func返回ture则认为该元素在回调函数中符合条件,命中,故停止继续遍历
c000484f:	83 ec 08             	sub    $0x8,%esp
c0004852:	ff 75 10             	pushl  0x10(%ebp)
c0004855:	ff 75 f4             	pushl  -0xc(%ebp)
c0004858:	8b 45 0c             	mov    0xc(%ebp),%eax
c000485b:	ff d0                	call   *%eax
c000485d:	83 c4 10             	add    $0x10,%esp
c0004860:	85 c0                	test   %eax,%eax
c0004862:	74 05                	je     c0004869 <list_traversal+0x42>
/work/x86_os_my/lib/kernel/list.c:83
		return elem;
c0004864:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004867:	eb 19                	jmp    c0004882 <list_traversal+0x5b>
/work/x86_os_my/lib/kernel/list.c:85
	}
		elem = elem->next;		// 若回调函数func返回false,则继续遍历
c0004869:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000486c:	8b 40 04             	mov    0x4(%eax),%eax
c000486f:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/list.c:81
	/* 如果队列为空,就必然没有符合条件的结点,故直接返回NULL */
	if (list_empty(plist)) { 
		return NULL;
	}

	while (elem != &plist->tail) {
c0004872:	8b 45 08             	mov    0x8(%ebp),%eax
c0004875:	83 c0 08             	add    $0x8,%eax
c0004878:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c000487b:	75 d2                	jne    c000484f <list_traversal+0x28>
/work/x86_os_my/lib/kernel/list.c:87
	if (func(elem, arg)) {		// func返回ture则认为该元素在回调函数中符合条件,命中,故停止继续遍历
		return elem;
	}
		elem = elem->next;		// 若回调函数func返回false,则继续遍历
	}
	return NULL;
c000487d:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/lib/kernel/list.c:88
}
c0004882:	c9                   	leave  
c0004883:	c3                   	ret    

c0004884 <list_len>:
list_len():
/work/x86_os_my/lib/kernel/list.c:91

/* 返回链表长度 */
uint32_t list_len(struct list* plist) {
c0004884:	55                   	push   %ebp
c0004885:	89 e5                	mov    %esp,%ebp
c0004887:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:92
	struct list_elem* elem = plist->head.next;
c000488a:	8b 45 08             	mov    0x8(%ebp),%eax
c000488d:	8b 40 04             	mov    0x4(%eax),%eax
c0004890:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/kernel/list.c:93
	uint32_t length = 0;
c0004893:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
/work/x86_os_my/lib/kernel/list.c:94
	while (elem != &plist->tail) {
c000489a:	eb 0d                	jmp    c00048a9 <list_len+0x25>
/work/x86_os_my/lib/kernel/list.c:95
		length++; 
c000489c:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
/work/x86_os_my/lib/kernel/list.c:96
		elem = elem->next;
c00048a0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c00048a3:	8b 40 04             	mov    0x4(%eax),%eax
c00048a6:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/kernel/list.c:94

/* 返回链表长度 */
uint32_t list_len(struct list* plist) {
	struct list_elem* elem = plist->head.next;
	uint32_t length = 0;
	while (elem != &plist->tail) {
c00048a9:	8b 45 08             	mov    0x8(%ebp),%eax
c00048ac:	83 c0 08             	add    $0x8,%eax
c00048af:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c00048b2:	75 e8                	jne    c000489c <list_len+0x18>
/work/x86_os_my/lib/kernel/list.c:98
		length++; 
		elem = elem->next;
	}
	return length;
c00048b4:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/kernel/list.c:99
}
c00048b7:	c9                   	leave  
c00048b8:	c3                   	ret    

c00048b9 <list_empty>:
list_empty():
/work/x86_os_my/lib/kernel/list.c:102

/* 判断链表是否为空,空时返回true,否则返回false */
bool list_empty(struct list* plist) {		// 判断队列是否为空
c00048b9:	55                   	push   %ebp
c00048ba:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/lib/kernel/list.c:103
	return (plist->head.next == &plist->tail ? true : false);
c00048bc:	8b 45 08             	mov    0x8(%ebp),%eax
c00048bf:	8b 40 04             	mov    0x4(%eax),%eax
c00048c2:	8b 55 08             	mov    0x8(%ebp),%edx
c00048c5:	83 c2 08             	add    $0x8,%edx
c00048c8:	39 d0                	cmp    %edx,%eax
c00048ca:	0f 94 c0             	sete   %al
c00048cd:	0f b6 c0             	movzbl %al,%eax
/work/x86_os_my/lib/kernel/list.c:104
}
c00048d0:	5d                   	pop    %ebp
c00048d1:	c3                   	ret    
c00048d2:	66 90                	xchg   %ax,%ax
c00048d4:	66 90                	xchg   %ax,%ax
c00048d6:	66 90                	xchg   %ax,%ax
c00048d8:	66 90                	xchg   %ax,%ax
c00048da:	66 90                	xchg   %ax,%ax
c00048dc:	66 90                	xchg   %ax,%ax
c00048de:	66 90                	xchg   %ax,%ax

c00048e0 <switch_to>:
switch_to():
c00048e0:	56                   	push   %esi
c00048e1:	57                   	push   %edi
c00048e2:	53                   	push   %ebx
c00048e3:	55                   	push   %ebp
c00048e4:	8b 44 24 14          	mov    0x14(%esp),%eax
c00048e8:	89 20                	mov    %esp,(%eax)
c00048ea:	8b 44 24 18          	mov    0x18(%esp),%eax
c00048ee:	8b 20                	mov    (%eax),%esp
c00048f0:	5d                   	pop    %ebp
c00048f1:	5b                   	pop    %ebx
c00048f2:	5f                   	pop    %edi
c00048f3:	5e                   	pop    %esi
c00048f4:	c3                   	ret    

c00048f5 <console_init>:
console_init():
/work/x86_os_my/device/console.c:9
#include "sync.h"
#include "thread.h"
static struct lock console_lock;	// 控制台锁

/* 初始化终端 */
void console_init() {
c00048f5:	55                   	push   %ebp
c00048f6:	89 e5                	mov    %esp,%ebp
c00048f8:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/console.c:10
	lock_init(&console_lock);
c00048fb:	83 ec 0c             	sub    $0xc,%esp
c00048fe:	68 70 15 01 c0       	push   $0xc0011570
c0004903:	e8 cd 00 00 00       	call   c00049d5 <lock_init>
c0004908:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:11
}
c000490b:	90                   	nop
c000490c:	c9                   	leave  
c000490d:	c3                   	ret    

c000490e <console_acquire>:
console_acquire():
/work/x86_os_my/device/console.c:14

/* 获取终端 */
void console_acquire() {
c000490e:	55                   	push   %ebp
c000490f:	89 e5                	mov    %esp,%ebp
c0004911:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/console.c:15
	lock_acquire(&console_lock);
c0004914:	83 ec 0c             	sub    $0xc,%esp
c0004917:	68 70 15 01 c0       	push   $0xc0011570
c000491c:	e8 8e 02 00 00       	call   c0004baf <lock_acquire>
c0004921:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:16
}
c0004924:	90                   	nop
c0004925:	c9                   	leave  
c0004926:	c3                   	ret    

c0004927 <console_release>:
console_release():
/work/x86_os_my/device/console.c:19

/* 释放终端 */
void console_release() {
c0004927:	55                   	push   %ebp
c0004928:	89 e5                	mov    %esp,%ebp
c000492a:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/console.c:20
	lock_release(&console_lock);
c000492d:	83 ec 0c             	sub    $0xc,%esp
c0004930:	68 70 15 01 c0       	push   $0xc0011570
c0004935:	e8 ec 02 00 00       	call   c0004c26 <lock_release>
c000493a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:21
}
c000493d:	90                   	nop
c000493e:	c9                   	leave  
c000493f:	c3                   	ret    

c0004940 <console_put_str>:
console_put_str():
/work/x86_os_my/device/console.c:24

/* 终端中输出字符串 */
void console_put_str(char* str) {
c0004940:	55                   	push   %ebp
c0004941:	89 e5                	mov    %esp,%ebp
c0004943:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/console.c:25
	console_acquire();
c0004946:	e8 c3 ff ff ff       	call   c000490e <console_acquire>
/work/x86_os_my/device/console.c:26
	put_str(str);
c000494b:	83 ec 0c             	sub    $0xc,%esp
c000494e:	ff 75 08             	pushl  0x8(%ebp)
c0004951:	e8 4a d9 ff ff       	call   c00022a0 <put_str>
c0004956:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:27
	console_release();
c0004959:	e8 c9 ff ff ff       	call   c0004927 <console_release>
/work/x86_os_my/device/console.c:28
}
c000495e:	90                   	nop
c000495f:	c9                   	leave  
c0004960:	c3                   	ret    

c0004961 <console_put_char>:
console_put_char():
/work/x86_os_my/device/console.c:31

/* 终端中输出字符 */
void console_put_char(uint8_t char_asci) {
c0004961:	55                   	push   %ebp
c0004962:	89 e5                	mov    %esp,%ebp
c0004964:	83 ec 18             	sub    $0x18,%esp
c0004967:	8b 45 08             	mov    0x8(%ebp),%eax
c000496a:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/device/console.c:32
	console_acquire();
c000496d:	e8 9c ff ff ff       	call   c000490e <console_acquire>
/work/x86_os_my/device/console.c:33
	put_char(char_asci);
c0004972:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0004976:	83 ec 0c             	sub    $0xc,%esp
c0004979:	50                   	push   %eax
c000497a:	e8 3f d9 ff ff       	call   c00022be <put_char>
c000497f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:34
	console_release();
c0004982:	e8 a0 ff ff ff       	call   c0004927 <console_release>
/work/x86_os_my/device/console.c:35
}
c0004987:	90                   	nop
c0004988:	c9                   	leave  
c0004989:	c3                   	ret    

c000498a <console_put_int>:
console_put_int():
/work/x86_os_my/device/console.c:38

/* 终端中输出16进制整数 */
void console_put_int(uint32_t num) {
c000498a:	55                   	push   %ebp
c000498b:	89 e5                	mov    %esp,%ebp
c000498d:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/console.c:39
	console_acquire();
c0004990:	e8 79 ff ff ff       	call   c000490e <console_acquire>
/work/x86_os_my/device/console.c:40
	put_int(num);
c0004995:	83 ec 0c             	sub    $0xc,%esp
c0004998:	ff 75 08             	pushl  0x8(%ebp)
c000499b:	e8 2a da ff ff       	call   c00023ca <put_int>
c00049a0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:41
	console_release();
c00049a3:	e8 7f ff ff ff       	call   c0004927 <console_release>
/work/x86_os_my/device/console.c:42
}
c00049a8:	90                   	nop
c00049a9:	c9                   	leave  
c00049aa:	c3                   	ret    

c00049ab <sema_init>:
sema_init():
/work/x86_os_my/thread/sync.c:8
#include "global.h"
#include "debug.h"
#include "interrupt.h"

/* 初始化信号量 */
void sema_init(struct semaphore* psema, uint8_t value) {
c00049ab:	55                   	push   %ebp
c00049ac:	89 e5                	mov    %esp,%ebp
c00049ae:	83 ec 18             	sub    $0x18,%esp
c00049b1:	8b 45 0c             	mov    0xc(%ebp),%eax
c00049b4:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/thread/sync.c:9
	psema->value = value;       // 为信号量赋初值
c00049b7:	8b 45 08             	mov    0x8(%ebp),%eax
c00049ba:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
c00049be:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/thread/sync.c:10
	list_init(&psema->waiters); //初始化信号量的等待队列
c00049c0:	8b 45 08             	mov    0x8(%ebp),%eax
c00049c3:	83 c0 04             	add    $0x4,%eax
c00049c6:	83 ec 0c             	sub    $0xc,%esp
c00049c9:	50                   	push   %eax
c00049ca:	e8 12 fd ff ff       	call   c00046e1 <list_init>
c00049cf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:11
}
c00049d2:	90                   	nop
c00049d3:	c9                   	leave  
c00049d4:	c3                   	ret    

c00049d5 <lock_init>:
lock_init():
/work/x86_os_my/thread/sync.c:14

/* 初始化锁plock */
void lock_init(struct lock* plock) {
c00049d5:	55                   	push   %ebp
c00049d6:	89 e5                	mov    %esp,%ebp
c00049d8:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/sync.c:15
	plock->holder = NULL;
c00049db:	8b 45 08             	mov    0x8(%ebp),%eax
c00049de:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/thread/sync.c:16
	plock->holder_repeat_nr = 0;
c00049e4:	8b 45 08             	mov    0x8(%ebp),%eax
c00049e7:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
/work/x86_os_my/thread/sync.c:17
	sema_init(&plock->semaphore, 1);  // 信号量初值为1
c00049ee:	8b 45 08             	mov    0x8(%ebp),%eax
c00049f1:	83 c0 04             	add    $0x4,%eax
c00049f4:	83 ec 08             	sub    $0x8,%esp
c00049f7:	6a 01                	push   $0x1
c00049f9:	50                   	push   %eax
c00049fa:	e8 ac ff ff ff       	call   c00049ab <sema_init>
c00049ff:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:18
}
c0004a02:	90                   	nop
c0004a03:	c9                   	leave  
c0004a04:	c3                   	ret    

c0004a05 <sema_down>:
sema_down():
/work/x86_os_my/thread/sync.c:21

/* 信号量down操作 */
void sema_down(struct semaphore* psema) {
c0004a05:	55                   	push   %ebp
c0004a06:	89 e5                	mov    %esp,%ebp
c0004a08:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/sync.c:23
	/* 关中断来保证原子操作 */
	enum intr_status old_status = intr_disable();
c0004a0b:	e8 5d d0 ff ff       	call   c0001a6d <intr_disable>
c0004a10:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/sync.c:25
	
	while(psema->value == 0) {			// 若value为0,表示已经被别人持有【while多次判断】
c0004a13:	e9 98 00 00 00       	jmp    c0004ab0 <sema_down+0xab>
/work/x86_os_my/thread/sync.c:26
		ASSERT(!elem_find(&psema->waiters, &running_thread()->general_tag));
c0004a18:	e8 bd f2 ff ff       	call   c0003cda <running_thread>
c0004a1d:	8d 50 44             	lea    0x44(%eax),%edx
c0004a20:	8b 45 08             	mov    0x8(%ebp),%eax
c0004a23:	83 c0 04             	add    $0x4,%eax
c0004a26:	83 ec 08             	sub    $0x8,%esp
c0004a29:	52                   	push   %edx
c0004a2a:	50                   	push   %eax
c0004a2b:	e8 bc fd ff ff       	call   c00047ec <elem_find>
c0004a30:	83 c4 10             	add    $0x10,%esp
c0004a33:	85 c0                	test   %eax,%eax
c0004a35:	74 19                	je     c0004a50 <sema_down+0x4b>
/work/x86_os_my/thread/sync.c:26 (discriminator 1)
c0004a37:	68 5c d6 00 c0       	push   $0xc000d65c
c0004a3c:	68 60 d7 00 c0       	push   $0xc000d760
c0004a41:	6a 1a                	push   $0x1a
c0004a43:	68 98 d6 00 c0       	push   $0xc000d698
c0004a48:	e8 04 da ff ff       	call   c0002451 <panic_spin>
c0004a4d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:28
		/* 当前线程不应该已在信号量的waiters队列中 */
		if (elem_find(&psema->waiters, &running_thread()->general_tag)) {
c0004a50:	e8 85 f2 ff ff       	call   c0003cda <running_thread>
c0004a55:	8d 50 44             	lea    0x44(%eax),%edx
c0004a58:	8b 45 08             	mov    0x8(%ebp),%eax
c0004a5b:	83 c0 04             	add    $0x4,%eax
c0004a5e:	83 ec 08             	sub    $0x8,%esp
c0004a61:	52                   	push   %edx
c0004a62:	50                   	push   %eax
c0004a63:	e8 84 fd ff ff       	call   c00047ec <elem_find>
c0004a68:	83 c4 10             	add    $0x10,%esp
c0004a6b:	85 c0                	test   %eax,%eax
c0004a6d:	74 19                	je     c0004a88 <sema_down+0x83>
/work/x86_os_my/thread/sync.c:29
			PANIC("sema_down: thread blocked has been in waiters_list\n");
c0004a6f:	68 a8 d6 00 c0       	push   $0xc000d6a8
c0004a74:	68 60 d7 00 c0       	push   $0xc000d760
c0004a79:	6a 1d                	push   $0x1d
c0004a7b:	68 98 d6 00 c0       	push   $0xc000d698
c0004a80:	e8 cc d9 ff ff       	call   c0002451 <panic_spin>
c0004a85:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:32
		}
		/* 若信号量的值等于0,则当前线程把自己加入该锁的等待队列,然后阻塞自己 */
		list_append(&psema->waiters, &running_thread()->general_tag);
c0004a88:	e8 4d f2 ff ff       	call   c0003cda <running_thread>
c0004a8d:	8d 50 44             	lea    0x44(%eax),%edx
c0004a90:	8b 45 08             	mov    0x8(%ebp),%eax
c0004a93:	83 c0 04             	add    $0x4,%eax
c0004a96:	83 ec 08             	sub    $0x8,%esp
c0004a99:	52                   	push   %edx
c0004a9a:	50                   	push   %eax
c0004a9b:	e8 d2 fc ff ff       	call   c0004772 <list_append>
c0004aa0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:33
		thread_block(TASK_BLOCKED);		// 阻塞线程,直到被唤醒
c0004aa3:	83 ec 0c             	sub    $0xc,%esp
c0004aa6:	6a 02                	push   $0x2
c0004aa8:	e8 d0 f6 ff ff       	call   c000417d <thread_block>
c0004aad:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:25
/* 信号量down操作 */
void sema_down(struct semaphore* psema) {
	/* 关中断来保证原子操作 */
	enum intr_status old_status = intr_disable();
	
	while(psema->value == 0) {			// 若value为0,表示已经被别人持有【while多次判断】
c0004ab0:	8b 45 08             	mov    0x8(%ebp),%eax
c0004ab3:	0f b6 00             	movzbl (%eax),%eax
c0004ab6:	84 c0                	test   %al,%al
c0004ab8:	0f 84 5a ff ff ff    	je     c0004a18 <sema_down+0x13>
/work/x86_os_my/thread/sync.c:36
		/* 若信号量的值等于0,则当前线程把自己加入该锁的等待队列,然后阻塞自己 */
		list_append(&psema->waiters, &running_thread()->general_tag);
		thread_block(TASK_BLOCKED);		// 阻塞线程,直到被唤醒
	}
	/* 若value为1或被唤醒后,会执行下面的代码,也就是获得了锁。*/
	psema->value--;
c0004abe:	8b 45 08             	mov    0x8(%ebp),%eax
c0004ac1:	0f b6 00             	movzbl (%eax),%eax
c0004ac4:	8d 50 ff             	lea    -0x1(%eax),%edx
c0004ac7:	8b 45 08             	mov    0x8(%ebp),%eax
c0004aca:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/thread/sync.c:37
	ASSERT(psema->value == 0);
c0004acc:	8b 45 08             	mov    0x8(%ebp),%eax
c0004acf:	0f b6 00             	movzbl (%eax),%eax
c0004ad2:	84 c0                	test   %al,%al
c0004ad4:	74 19                	je     c0004aef <sema_down+0xea>
/work/x86_os_my/thread/sync.c:37 (discriminator 1)
c0004ad6:	68 dc d6 00 c0       	push   $0xc000d6dc
c0004adb:	68 60 d7 00 c0       	push   $0xc000d760
c0004ae0:	6a 25                	push   $0x25
c0004ae2:	68 98 d6 00 c0       	push   $0xc000d698
c0004ae7:	e8 65 d9 ff ff       	call   c0002451 <panic_spin>
c0004aec:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:40
	
	/* 恢复之前的中断状态 */
	intr_set_status(old_status);
c0004aef:	83 ec 0c             	sub    $0xc,%esp
c0004af2:	ff 75 f4             	pushl  -0xc(%ebp)
c0004af5:	e8 9c cf ff ff       	call   c0001a96 <intr_set_status>
c0004afa:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:41
}
c0004afd:	90                   	nop
c0004afe:	c9                   	leave  
c0004aff:	c3                   	ret    

c0004b00 <sema_up>:
sema_up():
/work/x86_os_my/thread/sync.c:44

/* 信号量的up操作 */
void sema_up(struct semaphore* psema) {
c0004b00:	55                   	push   %ebp
c0004b01:	89 e5                	mov    %esp,%ebp
c0004b03:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/sync.c:46
	/* 关中断,保证原子操作 */
	enum intr_status old_status = intr_disable();
c0004b06:	e8 62 cf ff ff       	call   c0001a6d <intr_disable>
c0004b0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/sync.c:48
	
	ASSERT(psema->value == 0);
c0004b0e:	8b 45 08             	mov    0x8(%ebp),%eax
c0004b11:	0f b6 00             	movzbl (%eax),%eax
c0004b14:	84 c0                	test   %al,%al
c0004b16:	74 19                	je     c0004b31 <sema_up+0x31>
/work/x86_os_my/thread/sync.c:48 (discriminator 1)
c0004b18:	68 dc d6 00 c0       	push   $0xc000d6dc
c0004b1d:	68 6c d7 00 c0       	push   $0xc000d76c
c0004b22:	6a 30                	push   $0x30
c0004b24:	68 98 d6 00 c0       	push   $0xc000d698
c0004b29:	e8 23 d9 ff ff       	call   c0002451 <panic_spin>
c0004b2e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:49
	if (!list_empty(&psema->waiters)) {
c0004b31:	8b 45 08             	mov    0x8(%ebp),%eax
c0004b34:	83 c0 04             	add    $0x4,%eax
c0004b37:	83 ec 0c             	sub    $0xc,%esp
c0004b3a:	50                   	push   %eax
c0004b3b:	e8 79 fd ff ff       	call   c00048b9 <list_empty>
c0004b40:	83 c4 10             	add    $0x10,%esp
c0004b43:	85 c0                	test   %eax,%eax
c0004b45:	75 26                	jne    c0004b6d <sema_up+0x6d>
/work/x86_os_my/thread/sync.c:50
		struct task_struct* thread_blocked = elem2entry(struct task_struct, general_tag, list_pop(&psema->waiters));
c0004b47:	8b 45 08             	mov    0x8(%ebp),%eax
c0004b4a:	83 c0 04             	add    $0x4,%eax
c0004b4d:	83 ec 0c             	sub    $0xc,%esp
c0004b50:	50                   	push   %eax
c0004b51:	e8 74 fc ff ff       	call   c00047ca <list_pop>
c0004b56:	83 c4 10             	add    $0x10,%esp
c0004b59:	83 e8 44             	sub    $0x44,%eax
c0004b5c:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/thread/sync.c:51
		thread_unblock(thread_blocked);
c0004b5f:	83 ec 0c             	sub    $0xc,%esp
c0004b62:	ff 75 f0             	pushl  -0x10(%ebp)
c0004b65:	e8 76 f6 ff ff       	call   c00041e0 <thread_unblock>
c0004b6a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:53
	}
	psema->value++;
c0004b6d:	8b 45 08             	mov    0x8(%ebp),%eax
c0004b70:	0f b6 00             	movzbl (%eax),%eax
c0004b73:	8d 50 01             	lea    0x1(%eax),%edx
c0004b76:	8b 45 08             	mov    0x8(%ebp),%eax
c0004b79:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/thread/sync.c:54
	ASSERT(psema->value == 1);
c0004b7b:	8b 45 08             	mov    0x8(%ebp),%eax
c0004b7e:	0f b6 00             	movzbl (%eax),%eax
c0004b81:	3c 01                	cmp    $0x1,%al
c0004b83:	74 19                	je     c0004b9e <sema_up+0x9e>
/work/x86_os_my/thread/sync.c:54 (discriminator 1)
c0004b85:	68 ee d6 00 c0       	push   $0xc000d6ee
c0004b8a:	68 6c d7 00 c0       	push   $0xc000d76c
c0004b8f:	6a 36                	push   $0x36
c0004b91:	68 98 d6 00 c0       	push   $0xc000d698
c0004b96:	e8 b6 d8 ff ff       	call   c0002451 <panic_spin>
c0004b9b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:57
	
	/* 恢复之前的中断状态 */
	intr_set_status(old_status);
c0004b9e:	83 ec 0c             	sub    $0xc,%esp
c0004ba1:	ff 75 f4             	pushl  -0xc(%ebp)
c0004ba4:	e8 ed ce ff ff       	call   c0001a96 <intr_set_status>
c0004ba9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:58
}
c0004bac:	90                   	nop
c0004bad:	c9                   	leave  
c0004bae:	c3                   	ret    

c0004baf <lock_acquire>:
lock_acquire():
/work/x86_os_my/thread/sync.c:61

/* 获取锁plock */
void lock_acquire(struct lock* plock) {
c0004baf:	55                   	push   %ebp
c0004bb0:	89 e5                	mov    %esp,%ebp
c0004bb2:	53                   	push   %ebx
c0004bb3:	83 ec 04             	sub    $0x4,%esp
/work/x86_os_my/thread/sync.c:63
	/* 排除曾经自己已经持有锁但还未将其释放的情况。*/
	if (plock->holder != running_thread()) {
c0004bb6:	8b 45 08             	mov    0x8(%ebp),%eax
c0004bb9:	8b 18                	mov    (%eax),%ebx
c0004bbb:	e8 1a f1 ff ff       	call   c0003cda <running_thread>
c0004bc0:	39 c3                	cmp    %eax,%ebx
c0004bc2:	74 4d                	je     c0004c11 <lock_acquire+0x62>
/work/x86_os_my/thread/sync.c:64
		sema_down(&plock->semaphore);	// 对信号量P操作,原子操作
c0004bc4:	8b 45 08             	mov    0x8(%ebp),%eax
c0004bc7:	83 c0 04             	add    $0x4,%eax
c0004bca:	83 ec 0c             	sub    $0xc,%esp
c0004bcd:	50                   	push   %eax
c0004bce:	e8 32 fe ff ff       	call   c0004a05 <sema_down>
c0004bd3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:65
		plock->holder = running_thread();
c0004bd6:	e8 ff f0 ff ff       	call   c0003cda <running_thread>
c0004bdb:	89 c2                	mov    %eax,%edx
c0004bdd:	8b 45 08             	mov    0x8(%ebp),%eax
c0004be0:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/thread/sync.c:66
		ASSERT(plock->holder_repeat_nr == 0);
c0004be2:	8b 45 08             	mov    0x8(%ebp),%eax
c0004be5:	8b 40 18             	mov    0x18(%eax),%eax
c0004be8:	85 c0                	test   %eax,%eax
c0004bea:	74 19                	je     c0004c05 <lock_acquire+0x56>
/work/x86_os_my/thread/sync.c:66 (discriminator 1)
c0004bec:	68 00 d7 00 c0       	push   $0xc000d700
c0004bf1:	68 74 d7 00 c0       	push   $0xc000d774
c0004bf6:	6a 42                	push   $0x42
c0004bf8:	68 98 d6 00 c0       	push   $0xc000d698
c0004bfd:	e8 4f d8 ff ff       	call   c0002451 <panic_spin>
c0004c02:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:67
		plock->holder_repeat_nr = 1;
c0004c05:	8b 45 08             	mov    0x8(%ebp),%eax
c0004c08:	c7 40 18 01 00 00 00 	movl   $0x1,0x18(%eax)
/work/x86_os_my/thread/sync.c:71
	} else {
		plock->holder_repeat_nr++;
	}
}
c0004c0f:	eb 0f                	jmp    c0004c20 <lock_acquire+0x71>
/work/x86_os_my/thread/sync.c:69
		sema_down(&plock->semaphore);	// 对信号量P操作,原子操作
		plock->holder = running_thread();
		ASSERT(plock->holder_repeat_nr == 0);
		plock->holder_repeat_nr = 1;
	} else {
		plock->holder_repeat_nr++;
c0004c11:	8b 45 08             	mov    0x8(%ebp),%eax
c0004c14:	8b 40 18             	mov    0x18(%eax),%eax
c0004c17:	8d 50 01             	lea    0x1(%eax),%edx
c0004c1a:	8b 45 08             	mov    0x8(%ebp),%eax
c0004c1d:	89 50 18             	mov    %edx,0x18(%eax)
/work/x86_os_my/thread/sync.c:71
	}
}
c0004c20:	90                   	nop
c0004c21:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0004c24:	c9                   	leave  
c0004c25:	c3                   	ret    

c0004c26 <lock_release>:
lock_release():
/work/x86_os_my/thread/sync.c:74

/* 释放锁plock */
void lock_release(struct lock* plock) {
c0004c26:	55                   	push   %ebp
c0004c27:	89 e5                	mov    %esp,%ebp
c0004c29:	53                   	push   %ebx
c0004c2a:	83 ec 04             	sub    $0x4,%esp
/work/x86_os_my/thread/sync.c:75
	ASSERT(plock->holder == running_thread());
c0004c2d:	8b 45 08             	mov    0x8(%ebp),%eax
c0004c30:	8b 18                	mov    (%eax),%ebx
c0004c32:	e8 a3 f0 ff ff       	call   c0003cda <running_thread>
c0004c37:	39 c3                	cmp    %eax,%ebx
c0004c39:	74 19                	je     c0004c54 <lock_release+0x2e>
/work/x86_os_my/thread/sync.c:75 (discriminator 1)
c0004c3b:	68 20 d7 00 c0       	push   $0xc000d720
c0004c40:	68 84 d7 00 c0       	push   $0xc000d784
c0004c45:	6a 4b                	push   $0x4b
c0004c47:	68 98 d6 00 c0       	push   $0xc000d698
c0004c4c:	e8 00 d8 ff ff       	call   c0002451 <panic_spin>
c0004c51:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:76
	if (plock->holder_repeat_nr > 1) {
c0004c54:	8b 45 08             	mov    0x8(%ebp),%eax
c0004c57:	8b 40 18             	mov    0x18(%eax),%eax
c0004c5a:	83 f8 01             	cmp    $0x1,%eax
c0004c5d:	76 11                	jbe    c0004c70 <lock_release+0x4a>
/work/x86_os_my/thread/sync.c:77
		plock->holder_repeat_nr--;
c0004c5f:	8b 45 08             	mov    0x8(%ebp),%eax
c0004c62:	8b 40 18             	mov    0x18(%eax),%eax
c0004c65:	8d 50 ff             	lea    -0x1(%eax),%edx
c0004c68:	8b 45 08             	mov    0x8(%ebp),%eax
c0004c6b:	89 50 18             	mov    %edx,0x18(%eax)
/work/x86_os_my/thread/sync.c:78
		return;
c0004c6e:	eb 49                	jmp    c0004cb9 <lock_release+0x93>
/work/x86_os_my/thread/sync.c:80
	}
	ASSERT(plock->holder_repeat_nr == 1);
c0004c70:	8b 45 08             	mov    0x8(%ebp),%eax
c0004c73:	8b 40 18             	mov    0x18(%eax),%eax
c0004c76:	83 f8 01             	cmp    $0x1,%eax
c0004c79:	74 19                	je     c0004c94 <lock_release+0x6e>
/work/x86_os_my/thread/sync.c:80 (discriminator 1)
c0004c7b:	68 42 d7 00 c0       	push   $0xc000d742
c0004c80:	68 84 d7 00 c0       	push   $0xc000d784
c0004c85:	6a 50                	push   $0x50
c0004c87:	68 98 d6 00 c0       	push   $0xc000d698
c0004c8c:	e8 c0 d7 ff ff       	call   c0002451 <panic_spin>
c0004c91:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:82

	plock->holder = NULL;			// 把锁的持有者置空放在V操作之前
c0004c94:	8b 45 08             	mov    0x8(%ebp),%eax
c0004c97:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/thread/sync.c:83
	plock->holder_repeat_nr = 0;
c0004c9d:	8b 45 08             	mov    0x8(%ebp),%eax
c0004ca0:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
/work/x86_os_my/thread/sync.c:84
	sema_up(&plock->semaphore);		// 信号量的V操作,也是原子操作
c0004ca7:	8b 45 08             	mov    0x8(%ebp),%eax
c0004caa:	83 c0 04             	add    $0x4,%eax
c0004cad:	83 ec 0c             	sub    $0xc,%esp
c0004cb0:	50                   	push   %eax
c0004cb1:	e8 4a fe ff ff       	call   c0004b00 <sema_up>
c0004cb6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:85
}
c0004cb9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0004cbc:	c9                   	leave  
c0004cbd:	c3                   	ret    

c0004cbe <inb>:
inb():
/work/x86_os_my/lib/kernel/io.h:36
   asm volatile ("cld; rep outsw" : "+S" (addr), "+c" (word_cnt) : "d" (port));
/******************************************************/
}

/* 将从端口port读入的一个字节返回 */
static inline uint8_t inb(uint16_t port) {
c0004cbe:	55                   	push   %ebp
c0004cbf:	89 e5                	mov    %esp,%ebp
c0004cc1:	83 ec 14             	sub    $0x14,%esp
c0004cc4:	8b 45 08             	mov    0x8(%ebp),%eax
c0004cc7:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
/work/x86_os_my/lib/kernel/io.h:38
   uint8_t data;
   asm volatile ("inb %w1, %b0" : "=a" (data) : "Nd" (port));
c0004ccb:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0004ccf:	89 c2                	mov    %eax,%edx
c0004cd1:	ec                   	in     (%dx),%al
c0004cd2:	88 45 ff             	mov    %al,-0x1(%ebp)
/work/x86_os_my/lib/kernel/io.h:39
   return data;
c0004cd5:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
/work/x86_os_my/lib/kernel/io.h:40
}
c0004cd9:	c9                   	leave  
c0004cda:	c3                   	ret    

c0004cdb <intr_keyboard_handler>:
intr_keyboard_handler():
/work/x86_os_my/device/keyboard.c:111
/* 0x3A */	{caps_lock_char, caps_lock_char}
/*其它按键暂不处理*/
};

/* 键盘中断处理程序 */
static void intr_keyboard_handler(void) {
c0004cdb:	55                   	push   %ebp
c0004cdc:	89 e5                	mov    %esp,%ebp
c0004cde:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/device/keyboard.c:114

/* 这次中断发生前的上一次中断,以下任意三个键是否有按下 */
   bool ctrl_down_last = ctrl_status;	  
c0004ce1:	a1 8c 15 01 c0       	mov    0xc001158c,%eax
c0004ce6:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/device/keyboard.c:115
   bool shift_down_last = shift_status;
c0004ce9:	a1 90 15 01 c0       	mov    0xc0011590,%eax
c0004cee:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/device/keyboard.c:116
   bool caps_lock_last = caps_lock_status;
c0004cf1:	a1 98 15 01 c0       	mov    0xc0011598,%eax
c0004cf6:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/device/keyboard.c:119

   bool break_code;
   uint16_t scancode = inb(KBD_BUF_PORT);
c0004cf9:	6a 60                	push   $0x60
c0004cfb:	e8 be ff ff ff       	call   c0004cbe <inb>
c0004d00:	83 c4 04             	add    $0x4,%esp
c0004d03:	0f b6 c0             	movzbl %al,%eax
c0004d06:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
/work/x86_os_my/device/keyboard.c:123

/* 若扫描码是e0开头的,表示此键的按下将产生多个扫描码,
 * 所以马上结束此次中断处理函数,等待下一个扫描码进来*/ 
   if (scancode == 0xe0) { 
c0004d0a:	66 81 7d f6 e0 00    	cmpw   $0xe0,-0xa(%ebp)
c0004d10:	75 0f                	jne    c0004d21 <intr_keyboard_handler+0x46>
/work/x86_os_my/device/keyboard.c:124
      ext_scancode = true;    // 打开e0标记
c0004d12:	c7 05 9c 15 01 c0 01 	movl   $0x1,0xc001159c
c0004d19:	00 00 00 
/work/x86_os_my/device/keyboard.c:125
      return;
c0004d1c:	e9 50 02 00 00       	jmp    c0004f71 <intr_keyboard_handler+0x296>
/work/x86_os_my/device/keyboard.c:129
   }

/* 如果上次是以0xe0开头,将扫描码合并 */
   if (ext_scancode) {
c0004d21:	a1 9c 15 01 c0       	mov    0xc001159c,%eax
c0004d26:	85 c0                	test   %eax,%eax
c0004d28:	74 10                	je     c0004d3a <intr_keyboard_handler+0x5f>
/work/x86_os_my/device/keyboard.c:130
      scancode = ((0xe000) | scancode);
c0004d2a:	66 81 4d f6 00 e0    	orw    $0xe000,-0xa(%ebp)
/work/x86_os_my/device/keyboard.c:131
      ext_scancode = false;   // 关闭e0标记
c0004d30:	c7 05 9c 15 01 c0 00 	movl   $0x0,0xc001159c
c0004d37:	00 00 00 
/work/x86_os_my/device/keyboard.c:134
   }   

   break_code = ((scancode & 0x0080) != 0);   // 获取break_code
c0004d3a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0004d3e:	25 80 00 00 00       	and    $0x80,%eax
c0004d43:	85 c0                	test   %eax,%eax
c0004d45:	0f 95 c0             	setne  %al
c0004d48:	0f b6 c0             	movzbl %al,%eax
c0004d4b:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/device/keyboard.c:136
   
   if (break_code) {   // 若是断码break_code(按键弹起时产生的扫描码)
c0004d4e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0004d52:	74 6a                	je     c0004dbe <intr_keyboard_handler+0xe3>
/work/x86_os_my/device/keyboard.c:140

   /* 由于ctrl_r 和alt_r的make_code和break_code都是两字节,
   所以可用下面的方法取make_code,多字节的扫描码暂不处理 */
      uint16_t make_code = (scancode &= 0xff7f);   // 得到其make_code(按键按下时产生的扫描码)
c0004d54:	66 81 65 f6 7f ff    	andw   $0xff7f,-0xa(%ebp)
c0004d5a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0004d5e:	66 89 45 da          	mov    %ax,-0x26(%ebp)
/work/x86_os_my/device/keyboard.c:143

   /* 若是任意以下三个键弹起了,将状态置为false */
      if (make_code == ctrl_l_make || make_code == ctrl_r_make) {
c0004d62:	66 83 7d da 1d       	cmpw   $0x1d,-0x26(%ebp)
c0004d67:	74 08                	je     c0004d71 <intr_keyboard_handler+0x96>
/work/x86_os_my/device/keyboard.c:143 (discriminator 1)
c0004d69:	66 81 7d da 1d e0    	cmpw   $0xe01d,-0x26(%ebp)
c0004d6f:	75 0c                	jne    c0004d7d <intr_keyboard_handler+0xa2>
/work/x86_os_my/device/keyboard.c:144
	 ctrl_status = false;
c0004d71:	c7 05 8c 15 01 c0 00 	movl   $0x0,0xc001158c
c0004d78:	00 00 00 
c0004d7b:	eb 3c                	jmp    c0004db9 <intr_keyboard_handler+0xde>
/work/x86_os_my/device/keyboard.c:145
      } else if (make_code == shift_l_make || make_code == shift_r_make) {
c0004d7d:	66 83 7d da 2a       	cmpw   $0x2a,-0x26(%ebp)
c0004d82:	74 07                	je     c0004d8b <intr_keyboard_handler+0xb0>
/work/x86_os_my/device/keyboard.c:145 (discriminator 1)
c0004d84:	66 83 7d da 36       	cmpw   $0x36,-0x26(%ebp)
c0004d89:	75 0c                	jne    c0004d97 <intr_keyboard_handler+0xbc>
/work/x86_os_my/device/keyboard.c:146
	 shift_status = false;
c0004d8b:	c7 05 90 15 01 c0 00 	movl   $0x0,0xc0011590
c0004d92:	00 00 00 
c0004d95:	eb 22                	jmp    c0004db9 <intr_keyboard_handler+0xde>
/work/x86_os_my/device/keyboard.c:147
      } else if (make_code == alt_l_make || make_code == alt_r_make) {
c0004d97:	66 83 7d da 38       	cmpw   $0x38,-0x26(%ebp)
c0004d9c:	74 0c                	je     c0004daa <intr_keyboard_handler+0xcf>
/work/x86_os_my/device/keyboard.c:147 (discriminator 1)
c0004d9e:	66 81 7d da 38 e0    	cmpw   $0xe038,-0x26(%ebp)
c0004da4:	0f 85 c0 01 00 00    	jne    c0004f6a <intr_keyboard_handler+0x28f>
/work/x86_os_my/device/keyboard.c:148
	 alt_status = false;
c0004daa:	c7 05 94 15 01 c0 00 	movl   $0x0,0xc0011594
c0004db1:	00 00 00 
/work/x86_os_my/device/keyboard.c:151
      } /* 由于caps_lock不是弹起后关闭,所以需要单独处理 */

      return;   // 直接返回结束此次中断处理程序
c0004db4:	e9 b1 01 00 00       	jmp    c0004f6a <intr_keyboard_handler+0x28f>
c0004db9:	e9 ac 01 00 00       	jmp    c0004f6a <intr_keyboard_handler+0x28f>
/work/x86_os_my/device/keyboard.c:155

   } 
   /* 若为通码,只处理数组中定义的键以及alt_right和ctrl键,全是make_code */
   else if ((scancode > 0x00 && scancode < 0x3b) || \
c0004dbe:	66 83 7d f6 00       	cmpw   $0x0,-0xa(%ebp)
c0004dc3:	74 07                	je     c0004dcc <intr_keyboard_handler+0xf1>
/work/x86_os_my/device/keyboard.c:155 (discriminator 1)
c0004dc5:	66 83 7d f6 3a       	cmpw   $0x3a,-0xa(%ebp)
c0004dca:	76 14                	jbe    c0004de0 <intr_keyboard_handler+0x105>
/work/x86_os_my/device/keyboard.c:155 (discriminator 3)
c0004dcc:	66 81 7d f6 38 e0    	cmpw   $0xe038,-0xa(%ebp)
c0004dd2:	74 0c                	je     c0004de0 <intr_keyboard_handler+0x105>
/work/x86_os_my/device/keyboard.c:156
	       (scancode == alt_r_make) || \
c0004dd4:	66 81 7d f6 1d e0    	cmpw   $0xe01d,-0xa(%ebp)
c0004dda:	0f 85 78 01 00 00    	jne    c0004f58 <intr_keyboard_handler+0x27d>
/work/x86_os_my/device/keyboard.c:158
	       (scancode == ctrl_r_make)) {
      bool shift = false;  // 判断是否与shift组合,用来在一维数组中索引对应的字符
c0004de0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/device/keyboard.c:159
      if ((scancode < 0x0e) || (scancode == 0x29) || \
c0004de7:	66 83 7d f6 0d       	cmpw   $0xd,-0xa(%ebp)
c0004dec:	76 3f                	jbe    c0004e2d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:159 (discriminator 1)
c0004dee:	66 83 7d f6 29       	cmpw   $0x29,-0xa(%ebp)
c0004df3:	74 38                	je     c0004e2d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:159 (discriminator 2)
c0004df5:	66 83 7d f6 1a       	cmpw   $0x1a,-0xa(%ebp)
c0004dfa:	74 31                	je     c0004e2d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:160
	 (scancode == 0x1a) || (scancode == 0x1b) || \
c0004dfc:	66 83 7d f6 1b       	cmpw   $0x1b,-0xa(%ebp)
c0004e01:	74 2a                	je     c0004e2d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:160 (discriminator 1)
c0004e03:	66 83 7d f6 2b       	cmpw   $0x2b,-0xa(%ebp)
c0004e08:	74 23                	je     c0004e2d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:161
	 (scancode == 0x2b) || (scancode == 0x27) || \
c0004e0a:	66 83 7d f6 27       	cmpw   $0x27,-0xa(%ebp)
c0004e0f:	74 1c                	je     c0004e2d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:161 (discriminator 1)
c0004e11:	66 83 7d f6 28       	cmpw   $0x28,-0xa(%ebp)
c0004e16:	74 15                	je     c0004e2d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:162
	 (scancode == 0x28) || (scancode == 0x33) || \
c0004e18:	66 83 7d f6 33       	cmpw   $0x33,-0xa(%ebp)
c0004e1d:	74 0e                	je     c0004e2d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:162 (discriminator 1)
c0004e1f:	66 83 7d f6 34       	cmpw   $0x34,-0xa(%ebp)
c0004e24:	74 07                	je     c0004e2d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:163
	 (scancode == 0x34) || (scancode == 0x35)) {  
c0004e26:	66 83 7d f6 35       	cmpw   $0x35,-0xa(%ebp)
c0004e2b:	75 0f                	jne    c0004e3c <intr_keyboard_handler+0x161>
/work/x86_os_my/device/keyboard.c:176
		     0x28 字符'\''
		     0x33 字符','
		     0x34 字符'.'
		     0x35 字符'/' 
	    *******************************/
	 if (shift_down_last) {  // 如果同时按下了shift键
c0004e2d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0004e31:	74 3a                	je     c0004e6d <intr_keyboard_handler+0x192>
/work/x86_os_my/device/keyboard.c:177
	    shift = true;
c0004e33:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
/work/x86_os_my/device/keyboard.c:176
		     0x28 字符'\''
		     0x33 字符','
		     0x34 字符'.'
		     0x35 字符'/' 
	    *******************************/
	 if (shift_down_last) {  // 如果同时按下了shift键
c0004e3a:	eb 31                	jmp    c0004e6d <intr_keyboard_handler+0x192>
/work/x86_os_my/device/keyboard.c:180
	    shift = true;
	 }
      } else {	  // 默认为字母键
	 if (shift_down_last && caps_lock_last) {  // 如果shift和capslock同时按下
c0004e3c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0004e40:	74 0f                	je     c0004e51 <intr_keyboard_handler+0x176>
/work/x86_os_my/device/keyboard.c:180 (discriminator 1)
c0004e42:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0004e46:	74 09                	je     c0004e51 <intr_keyboard_handler+0x176>
/work/x86_os_my/device/keyboard.c:181
	    shift = false;
c0004e48:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0004e4f:	eb 1c                	jmp    c0004e6d <intr_keyboard_handler+0x192>
/work/x86_os_my/device/keyboard.c:182
	 } else if (shift_down_last || caps_lock_last) { // 如果shift和capslock任意被按下
c0004e51:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0004e55:	75 06                	jne    c0004e5d <intr_keyboard_handler+0x182>
/work/x86_os_my/device/keyboard.c:182 (discriminator 1)
c0004e57:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0004e5b:	74 09                	je     c0004e66 <intr_keyboard_handler+0x18b>
/work/x86_os_my/device/keyboard.c:183
	    shift = true;
c0004e5d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c0004e64:	eb 07                	jmp    c0004e6d <intr_keyboard_handler+0x192>
/work/x86_os_my/device/keyboard.c:185
	 } else {
	    shift = false;
c0004e66:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/device/keyboard.c:189
	 }
      }

      uint8_t index = (scancode &= 0x00ff);  // 将扫描码的高字节置0,主要是针对高字节是e0的扫描码.
c0004e6d:	66 81 65 f6 ff 00    	andw   $0xff,-0xa(%ebp)
c0004e73:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0004e77:	88 45 d9             	mov    %al,-0x27(%ebp)
/work/x86_os_my/device/keyboard.c:190
      char cur_char = keymap[index][shift];  // 在数组中找到对应的字符
c0004e7a:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0004e7e:	8d 14 00             	lea    (%eax,%eax,1),%edx
c0004e81:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0004e84:	01 d0                	add    %edx,%eax
c0004e86:	05 e0 10 01 c0       	add    $0xc00110e0,%eax
c0004e8b:	0f b6 00             	movzbl (%eax),%eax
c0004e8e:	88 45 ef             	mov    %al,-0x11(%ebp)
/work/x86_os_my/device/keyboard.c:193

   /* 如果cur_char不为0,也就是ascii码为除'\0'外的字符就加入键盘缓冲区中 */
      if (cur_char) {
c0004e91:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
c0004e95:	74 54                	je     c0004eeb <intr_keyboard_handler+0x210>
/work/x86_os_my/device/keyboard.c:200
     /*****************  快捷键ctrl+l和ctrl+u的处理 *********************
      * 下面是把ctrl+l和ctrl+u这两种组合键产生的字符置为:
      * cur_char的asc码-字符a的asc码, 此差值比较小,
      * 属于asc码表中不可见的字符部分.故不会产生可见字符.
      * 我们在shell中将ascii值为l-a和u-a的分别处理为清屏和删除输入的快捷键*/
	 if ((ctrl_down_last && cur_char == 'l') || (ctrl_down_last && cur_char == 'u')) {
c0004e97:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0004e9b:	74 06                	je     c0004ea3 <intr_keyboard_handler+0x1c8>
/work/x86_os_my/device/keyboard.c:200 (discriminator 1)
c0004e9d:	80 7d ef 6c          	cmpb   $0x6c,-0x11(%ebp)
c0004ea1:	74 0c                	je     c0004eaf <intr_keyboard_handler+0x1d4>
/work/x86_os_my/device/keyboard.c:200 (discriminator 3)
c0004ea3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0004ea7:	74 10                	je     c0004eb9 <intr_keyboard_handler+0x1de>
/work/x86_os_my/device/keyboard.c:200 (discriminator 4)
c0004ea9:	80 7d ef 75          	cmpb   $0x75,-0x11(%ebp)
c0004ead:	75 0a                	jne    c0004eb9 <intr_keyboard_handler+0x1de>
/work/x86_os_my/device/keyboard.c:201
	    cur_char -= 'a';
c0004eaf:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c0004eb3:	83 e8 61             	sub    $0x61,%eax
c0004eb6:	88 45 ef             	mov    %al,-0x11(%ebp)
/work/x86_os_my/device/keyboard.c:207
	 }
      /****************************************************************/
      
   /* 若kbd_buf中未满并且待加入的cur_char不为0,
    * 则将其加入到缓冲区kbd_buf中 */
	 if (!ioq_full(&kbd_buf)) {
c0004eb9:	83 ec 0c             	sub    $0xc,%esp
c0004ebc:	68 20 22 01 c0       	push   $0xc0012220
c0004ec1:	e8 58 01 00 00       	call   c000501e <ioq_full>
c0004ec6:	83 c4 10             	add    $0x10,%esp
c0004ec9:	85 c0                	test   %eax,%eax
c0004ecb:	0f 85 9c 00 00 00    	jne    c0004f6d <intr_keyboard_handler+0x292>
/work/x86_os_my/device/keyboard.c:208
	    ioq_putchar(&kbd_buf, cur_char);
c0004ed1:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
c0004ed5:	83 ec 08             	sub    $0x8,%esp
c0004ed8:	50                   	push   %eax
c0004ed9:	68 20 22 01 c0       	push   $0xc0012220
c0004ede:	e8 0d 03 00 00       	call   c00051f0 <ioq_putchar>
c0004ee3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/keyboard.c:210
	 }
	 return;
c0004ee6:	e9 82 00 00 00       	jmp    c0004f6d <intr_keyboard_handler+0x292>
/work/x86_os_my/device/keyboard.c:214
      }

      /* 记录本次是否按下了下面几类控制键之一,供下次键入时判断组合键 */
      if (scancode == ctrl_l_make || scancode == ctrl_r_make) {
c0004eeb:	66 83 7d f6 1d       	cmpw   $0x1d,-0xa(%ebp)
c0004ef0:	74 08                	je     c0004efa <intr_keyboard_handler+0x21f>
/work/x86_os_my/device/keyboard.c:214 (discriminator 1)
c0004ef2:	66 81 7d f6 1d e0    	cmpw   $0xe01d,-0xa(%ebp)
c0004ef8:	75 0c                	jne    c0004f06 <intr_keyboard_handler+0x22b>
/work/x86_os_my/device/keyboard.c:215
	 ctrl_status = true;
c0004efa:	c7 05 8c 15 01 c0 01 	movl   $0x1,0xc001158c
c0004f01:	00 00 00 
c0004f04:	eb 50                	jmp    c0004f56 <intr_keyboard_handler+0x27b>
/work/x86_os_my/device/keyboard.c:216
      } else if (scancode == shift_l_make || scancode == shift_r_make) {
c0004f06:	66 83 7d f6 2a       	cmpw   $0x2a,-0xa(%ebp)
c0004f0b:	74 07                	je     c0004f14 <intr_keyboard_handler+0x239>
/work/x86_os_my/device/keyboard.c:216 (discriminator 1)
c0004f0d:	66 83 7d f6 36       	cmpw   $0x36,-0xa(%ebp)
c0004f12:	75 0c                	jne    c0004f20 <intr_keyboard_handler+0x245>
/work/x86_os_my/device/keyboard.c:217
	 shift_status = true;
c0004f14:	c7 05 90 15 01 c0 01 	movl   $0x1,0xc0011590
c0004f1b:	00 00 00 
c0004f1e:	eb 36                	jmp    c0004f56 <intr_keyboard_handler+0x27b>
/work/x86_os_my/device/keyboard.c:218
      } else if (scancode == alt_l_make || scancode == alt_r_make) {
c0004f20:	66 83 7d f6 38       	cmpw   $0x38,-0xa(%ebp)
c0004f25:	74 08                	je     c0004f2f <intr_keyboard_handler+0x254>
/work/x86_os_my/device/keyboard.c:218 (discriminator 1)
c0004f27:	66 81 7d f6 38 e0    	cmpw   $0xe038,-0xa(%ebp)
c0004f2d:	75 0c                	jne    c0004f3b <intr_keyboard_handler+0x260>
/work/x86_os_my/device/keyboard.c:219
	 alt_status = true;
c0004f2f:	c7 05 94 15 01 c0 01 	movl   $0x1,0xc0011594
c0004f36:	00 00 00 
c0004f39:	eb 1b                	jmp    c0004f56 <intr_keyboard_handler+0x27b>
/work/x86_os_my/device/keyboard.c:220
      } else if (scancode == caps_lock_make) {
c0004f3b:	66 83 7d f6 3a       	cmpw   $0x3a,-0xa(%ebp)
c0004f40:	75 2e                	jne    c0004f70 <intr_keyboard_handler+0x295>
/work/x86_os_my/device/keyboard.c:223
      /* 不管之前是否有按下caps_lock键,当再次按下时则状态取反,
       * 即:已经开启时,再按下同样的键是关闭。关闭时按下表示开启。*/
	 caps_lock_status = !caps_lock_status;
c0004f42:	a1 98 15 01 c0       	mov    0xc0011598,%eax
c0004f47:	85 c0                	test   %eax,%eax
c0004f49:	0f 94 c0             	sete   %al
c0004f4c:	0f b6 c0             	movzbl %al,%eax
c0004f4f:	a3 98 15 01 c0       	mov    %eax,0xc0011598
/work/x86_os_my/device/keyboard.c:157

   } 
   /* 若为通码,只处理数组中定义的键以及alt_right和ctrl键,全是make_code */
   else if ((scancode > 0x00 && scancode < 0x3b) || \
	       (scancode == alt_r_make) || \
	       (scancode == ctrl_r_make)) {
c0004f54:	eb 1a                	jmp    c0004f70 <intr_keyboard_handler+0x295>
/work/x86_os_my/device/keyboard.c:157 (discriminator 3)
c0004f56:	eb 18                	jmp    c0004f70 <intr_keyboard_handler+0x295>
/work/x86_os_my/device/keyboard.c:226
      /* 不管之前是否有按下caps_lock键,当再次按下时则状态取反,
       * 即:已经开启时,再按下同样的键是关闭。关闭时按下表示开启。*/
	 caps_lock_status = !caps_lock_status;
      }
   } else {
      put_str("unknown key\n");
c0004f58:	83 ec 0c             	sub    $0xc,%esp
c0004f5b:	68 91 d7 00 c0       	push   $0xc000d791
c0004f60:	e8 3b d3 ff ff       	call   c00022a0 <put_str>
c0004f65:	83 c4 10             	add    $0x10,%esp
c0004f68:	eb 07                	jmp    c0004f71 <intr_keyboard_handler+0x296>
/work/x86_os_my/device/keyboard.c:151
	 shift_status = false;
      } else if (make_code == alt_l_make || make_code == alt_r_make) {
	 alt_status = false;
      } /* 由于caps_lock不是弹起后关闭,所以需要单独处理 */

      return;   // 直接返回结束此次中断处理程序
c0004f6a:	90                   	nop
c0004f6b:	eb 04                	jmp    c0004f71 <intr_keyboard_handler+0x296>
/work/x86_os_my/device/keyboard.c:210
   /* 若kbd_buf中未满并且待加入的cur_char不为0,
    * 则将其加入到缓冲区kbd_buf中 */
	 if (!ioq_full(&kbd_buf)) {
	    ioq_putchar(&kbd_buf, cur_char);
	 }
	 return;
c0004f6d:	90                   	nop
c0004f6e:	eb 01                	jmp    c0004f71 <intr_keyboard_handler+0x296>
/work/x86_os_my/device/keyboard.c:157

   } 
   /* 若为通码,只处理数组中定义的键以及alt_right和ctrl键,全是make_code */
   else if ((scancode > 0x00 && scancode < 0x3b) || \
	       (scancode == alt_r_make) || \
	       (scancode == ctrl_r_make)) {
c0004f70:	90                   	nop
/work/x86_os_my/device/keyboard.c:228
	 caps_lock_status = !caps_lock_status;
      }
   } else {
      put_str("unknown key\n");
   }
}
c0004f71:	c9                   	leave  
c0004f72:	c3                   	ret    

c0004f73 <keyboard_init>:
keyboard_init():
/work/x86_os_my/device/keyboard.c:231

/* 键盘初始化 */
void keyboard_init() {
c0004f73:	55                   	push   %ebp
c0004f74:	89 e5                	mov    %esp,%ebp
c0004f76:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/keyboard.c:232
   put_str("keyboard init start\n");
c0004f79:	83 ec 0c             	sub    $0xc,%esp
c0004f7c:	68 9e d7 00 c0       	push   $0xc000d79e
c0004f81:	e8 1a d3 ff ff       	call   c00022a0 <put_str>
c0004f86:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/keyboard.c:233
   ioqueue_init(&kbd_buf);
c0004f89:	83 ec 0c             	sub    $0xc,%esp
c0004f8c:	68 20 22 01 c0       	push   $0xc0012220
c0004f91:	e8 28 00 00 00       	call   c0004fbe <ioqueue_init>
c0004f96:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/keyboard.c:234
   register_handler(0x21, intr_keyboard_handler);
c0004f99:	83 ec 08             	sub    $0x8,%esp
c0004f9c:	68 db 4c 00 c0       	push   $0xc0004cdb
c0004fa1:	6a 21                	push   $0x21
c0004fa3:	e8 30 cb ff ff       	call   c0001ad8 <register_handler>
c0004fa8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/keyboard.c:235
   put_str("keyboard init done\n");
c0004fab:	83 ec 0c             	sub    $0xc,%esp
c0004fae:	68 b3 d7 00 c0       	push   $0xc000d7b3
c0004fb3:	e8 e8 d2 ff ff       	call   c00022a0 <put_str>
c0004fb8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/keyboard.c:236
}
c0004fbb:	90                   	nop
c0004fbc:	c9                   	leave  
c0004fbd:	c3                   	ret    

c0004fbe <ioqueue_init>:
ioqueue_init():
/work/x86_os_my/device/ioqueue.c:7
#include "interrupt.h"
#include "global.h"
#include "debug.h"

/* 初始化io队列ioq */
void ioqueue_init(struct ioqueue* ioq) {
c0004fbe:	55                   	push   %ebp
c0004fbf:	89 e5                	mov    %esp,%ebp
c0004fc1:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/ioqueue.c:8
   lock_init(&ioq->lock);     // 初始化io队列的锁
c0004fc4:	8b 45 08             	mov    0x8(%ebp),%eax
c0004fc7:	83 ec 0c             	sub    $0xc,%esp
c0004fca:	50                   	push   %eax
c0004fcb:	e8 05 fa ff ff       	call   c00049d5 <lock_init>
c0004fd0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:9
   ioq->producer = ioq->consumer = NULL;  // 生产者和消费者置空
c0004fd3:	8b 45 08             	mov    0x8(%ebp),%eax
c0004fd6:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
c0004fdd:	8b 45 08             	mov    0x8(%ebp),%eax
c0004fe0:	8b 50 20             	mov    0x20(%eax),%edx
c0004fe3:	8b 45 08             	mov    0x8(%ebp),%eax
c0004fe6:	89 50 1c             	mov    %edx,0x1c(%eax)
/work/x86_os_my/device/ioqueue.c:10
   ioq->head = ioq->tail = 0; // 队列的首尾指针指向缓冲区数组第0个位置
c0004fe9:	8b 45 08             	mov    0x8(%ebp),%eax
c0004fec:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)
c0004ff3:	8b 45 08             	mov    0x8(%ebp),%eax
c0004ff6:	8b 50 68             	mov    0x68(%eax),%edx
c0004ff9:	8b 45 08             	mov    0x8(%ebp),%eax
c0004ffc:	89 50 64             	mov    %edx,0x64(%eax)
/work/x86_os_my/device/ioqueue.c:11
}
c0004fff:	90                   	nop
c0005000:	c9                   	leave  
c0005001:	c3                   	ret    

c0005002 <next_pos>:
next_pos():
/work/x86_os_my/device/ioqueue.c:14

/* 返回pos在缓冲区中的下一个位置值 */
static int32_t next_pos(int32_t pos) {
c0005002:	55                   	push   %ebp
c0005003:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/device/ioqueue.c:15
   return (pos + 1) % bufsize; 
c0005005:	8b 45 08             	mov    0x8(%ebp),%eax
c0005008:	8d 50 01             	lea    0x1(%eax),%edx
c000500b:	89 d0                	mov    %edx,%eax
c000500d:	c1 f8 1f             	sar    $0x1f,%eax
c0005010:	c1 e8 1a             	shr    $0x1a,%eax
c0005013:	01 c2                	add    %eax,%edx
c0005015:	83 e2 3f             	and    $0x3f,%edx
c0005018:	29 c2                	sub    %eax,%edx
c000501a:	89 d0                	mov    %edx,%eax
/work/x86_os_my/device/ioqueue.c:16
}
c000501c:	5d                   	pop    %ebp
c000501d:	c3                   	ret    

c000501e <ioq_full>:
ioq_full():
/work/x86_os_my/device/ioqueue.c:19

/* 判断队列是否已满 */
bool ioq_full(struct ioqueue* ioq) {
c000501e:	55                   	push   %ebp
c000501f:	89 e5                	mov    %esp,%ebp
c0005021:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/ioqueue.c:20
   ASSERT(intr_get_status() == INTR_OFF);
c0005024:	e8 8b ca ff ff       	call   c0001ab4 <intr_get_status>
c0005029:	85 c0                	test   %eax,%eax
c000502b:	74 19                	je     c0005046 <ioq_full+0x28>
/work/x86_os_my/device/ioqueue.c:20 (discriminator 1)
c000502d:	68 c8 d7 00 c0       	push   $0xc000d7c8
c0005032:	68 2c d8 00 c0       	push   $0xc000d82c
c0005037:	6a 14                	push   $0x14
c0005039:	68 e6 d7 00 c0       	push   $0xc000d7e6
c000503e:	e8 0e d4 ff ff       	call   c0002451 <panic_spin>
c0005043:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:21
   return next_pos(ioq->head) == ioq->tail;
c0005046:	8b 45 08             	mov    0x8(%ebp),%eax
c0005049:	8b 40 64             	mov    0x64(%eax),%eax
c000504c:	83 ec 0c             	sub    $0xc,%esp
c000504f:	50                   	push   %eax
c0005050:	e8 ad ff ff ff       	call   c0005002 <next_pos>
c0005055:	83 c4 10             	add    $0x10,%esp
c0005058:	89 c2                	mov    %eax,%edx
c000505a:	8b 45 08             	mov    0x8(%ebp),%eax
c000505d:	8b 40 68             	mov    0x68(%eax),%eax
c0005060:	39 c2                	cmp    %eax,%edx
c0005062:	0f 94 c0             	sete   %al
c0005065:	0f b6 c0             	movzbl %al,%eax
/work/x86_os_my/device/ioqueue.c:22
}
c0005068:	c9                   	leave  
c0005069:	c3                   	ret    

c000506a <ioq_empty>:
ioq_empty():
/work/x86_os_my/device/ioqueue.c:25

/* 判断队列是否已空 */
static bool ioq_empty(struct ioqueue* ioq) {
c000506a:	55                   	push   %ebp
c000506b:	89 e5                	mov    %esp,%ebp
c000506d:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/ioqueue.c:26
   ASSERT(intr_get_status() == INTR_OFF);
c0005070:	e8 3f ca ff ff       	call   c0001ab4 <intr_get_status>
c0005075:	85 c0                	test   %eax,%eax
c0005077:	74 19                	je     c0005092 <ioq_empty+0x28>
/work/x86_os_my/device/ioqueue.c:26 (discriminator 1)
c0005079:	68 c8 d7 00 c0       	push   $0xc000d7c8
c000507e:	68 38 d8 00 c0       	push   $0xc000d838
c0005083:	6a 1a                	push   $0x1a
c0005085:	68 e6 d7 00 c0       	push   $0xc000d7e6
c000508a:	e8 c2 d3 ff ff       	call   c0002451 <panic_spin>
c000508f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:27
   return ioq->head == ioq->tail;
c0005092:	8b 45 08             	mov    0x8(%ebp),%eax
c0005095:	8b 50 64             	mov    0x64(%eax),%edx
c0005098:	8b 45 08             	mov    0x8(%ebp),%eax
c000509b:	8b 40 68             	mov    0x68(%eax),%eax
c000509e:	39 c2                	cmp    %eax,%edx
c00050a0:	0f 94 c0             	sete   %al
c00050a3:	0f b6 c0             	movzbl %al,%eax
/work/x86_os_my/device/ioqueue.c:28
}
c00050a6:	c9                   	leave  
c00050a7:	c3                   	ret    

c00050a8 <ioq_wait>:
ioq_wait():
/work/x86_os_my/device/ioqueue.c:31

/* 使当前生产者或消费者在此缓冲区上等待 */
static void ioq_wait(struct task_struct** waiter) {
c00050a8:	55                   	push   %ebp
c00050a9:	89 e5                	mov    %esp,%ebp
c00050ab:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/ioqueue.c:32
   ASSERT(*waiter == NULL && waiter != NULL);
c00050ae:	8b 45 08             	mov    0x8(%ebp),%eax
c00050b1:	8b 00                	mov    (%eax),%eax
c00050b3:	85 c0                	test   %eax,%eax
c00050b5:	75 06                	jne    c00050bd <ioq_wait+0x15>
/work/x86_os_my/device/ioqueue.c:32 (discriminator 1)
c00050b7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00050bb:	75 19                	jne    c00050d6 <ioq_wait+0x2e>
/work/x86_os_my/device/ioqueue.c:32 (discriminator 3)
c00050bd:	68 f8 d7 00 c0       	push   $0xc000d7f8
c00050c2:	68 44 d8 00 c0       	push   $0xc000d844
c00050c7:	6a 20                	push   $0x20
c00050c9:	68 e6 d7 00 c0       	push   $0xc000d7e6
c00050ce:	e8 7e d3 ff ff       	call   c0002451 <panic_spin>
c00050d3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:33
   *waiter = running_thread();
c00050d6:	e8 ff eb ff ff       	call   c0003cda <running_thread>
c00050db:	89 c2                	mov    %eax,%edx
c00050dd:	8b 45 08             	mov    0x8(%ebp),%eax
c00050e0:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/device/ioqueue.c:34
   thread_block(TASK_BLOCKED);
c00050e2:	83 ec 0c             	sub    $0xc,%esp
c00050e5:	6a 02                	push   $0x2
c00050e7:	e8 91 f0 ff ff       	call   c000417d <thread_block>
c00050ec:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:35
}
c00050ef:	90                   	nop
c00050f0:	c9                   	leave  
c00050f1:	c3                   	ret    

c00050f2 <wakeup>:
wakeup():
/work/x86_os_my/device/ioqueue.c:38

/* 唤醒waiter */
static void wakeup(struct task_struct** waiter) {
c00050f2:	55                   	push   %ebp
c00050f3:	89 e5                	mov    %esp,%ebp
c00050f5:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/ioqueue.c:39
   ASSERT(*waiter != NULL);
c00050f8:	8b 45 08             	mov    0x8(%ebp),%eax
c00050fb:	8b 00                	mov    (%eax),%eax
c00050fd:	85 c0                	test   %eax,%eax
c00050ff:	75 19                	jne    c000511a <wakeup+0x28>
/work/x86_os_my/device/ioqueue.c:39 (discriminator 1)
c0005101:	68 1a d8 00 c0       	push   $0xc000d81a
c0005106:	68 50 d8 00 c0       	push   $0xc000d850
c000510b:	6a 27                	push   $0x27
c000510d:	68 e6 d7 00 c0       	push   $0xc000d7e6
c0005112:	e8 3a d3 ff ff       	call   c0002451 <panic_spin>
c0005117:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:40
   thread_unblock(*waiter); 
c000511a:	8b 45 08             	mov    0x8(%ebp),%eax
c000511d:	8b 00                	mov    (%eax),%eax
c000511f:	83 ec 0c             	sub    $0xc,%esp
c0005122:	50                   	push   %eax
c0005123:	e8 b8 f0 ff ff       	call   c00041e0 <thread_unblock>
c0005128:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:41
   *waiter = NULL;
c000512b:	8b 45 08             	mov    0x8(%ebp),%eax
c000512e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/device/ioqueue.c:42
}
c0005134:	90                   	nop
c0005135:	c9                   	leave  
c0005136:	c3                   	ret    

c0005137 <ioq_getchar>:
ioq_getchar():
/work/x86_os_my/device/ioqueue.c:45

/* 消费者从ioq队列中获取一个字符 */
char ioq_getchar(struct ioqueue* ioq) {
c0005137:	55                   	push   %ebp
c0005138:	89 e5                	mov    %esp,%ebp
c000513a:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/ioqueue.c:46
   ASSERT(intr_get_status() == INTR_OFF);
c000513d:	e8 72 c9 ff ff       	call   c0001ab4 <intr_get_status>
c0005142:	85 c0                	test   %eax,%eax
c0005144:	74 4b                	je     c0005191 <ioq_getchar+0x5a>
/work/x86_os_my/device/ioqueue.c:46 (discriminator 1)
c0005146:	68 c8 d7 00 c0       	push   $0xc000d7c8
c000514b:	68 58 d8 00 c0       	push   $0xc000d858
c0005150:	6a 2e                	push   $0x2e
c0005152:	68 e6 d7 00 c0       	push   $0xc000d7e6
c0005157:	e8 f5 d2 ff ff       	call   c0002451 <panic_spin>
c000515c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:51 (discriminator 1)

/* 若缓冲区(队列)为空,把消费者ioq->consumer记为当前线程自己,
 * 目的是将来生产者往缓冲区里装商品后,生产者知道唤醒哪个消费者,
 * 也就是唤醒当前线程自己*/
   while (ioq_empty(ioq)) {
c000515f:	eb 30                	jmp    c0005191 <ioq_getchar+0x5a>
/work/x86_os_my/device/ioqueue.c:52
      lock_acquire(&ioq->lock);	 
c0005161:	8b 45 08             	mov    0x8(%ebp),%eax
c0005164:	83 ec 0c             	sub    $0xc,%esp
c0005167:	50                   	push   %eax
c0005168:	e8 42 fa ff ff       	call   c0004baf <lock_acquire>
c000516d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:53
      ioq_wait(&ioq->consumer);
c0005170:	8b 45 08             	mov    0x8(%ebp),%eax
c0005173:	83 c0 20             	add    $0x20,%eax
c0005176:	83 ec 0c             	sub    $0xc,%esp
c0005179:	50                   	push   %eax
c000517a:	e8 29 ff ff ff       	call   c00050a8 <ioq_wait>
c000517f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:54
      lock_release(&ioq->lock);
c0005182:	8b 45 08             	mov    0x8(%ebp),%eax
c0005185:	83 ec 0c             	sub    $0xc,%esp
c0005188:	50                   	push   %eax
c0005189:	e8 98 fa ff ff       	call   c0004c26 <lock_release>
c000518e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:51
   ASSERT(intr_get_status() == INTR_OFF);

/* 若缓冲区(队列)为空,把消费者ioq->consumer记为当前线程自己,
 * 目的是将来生产者往缓冲区里装商品后,生产者知道唤醒哪个消费者,
 * 也就是唤醒当前线程自己*/
   while (ioq_empty(ioq)) {
c0005191:	83 ec 0c             	sub    $0xc,%esp
c0005194:	ff 75 08             	pushl  0x8(%ebp)
c0005197:	e8 ce fe ff ff       	call   c000506a <ioq_empty>
c000519c:	83 c4 10             	add    $0x10,%esp
c000519f:	85 c0                	test   %eax,%eax
c00051a1:	75 be                	jne    c0005161 <ioq_getchar+0x2a>
/work/x86_os_my/device/ioqueue.c:57
      lock_acquire(&ioq->lock);	 
      ioq_wait(&ioq->consumer);
      lock_release(&ioq->lock);
   }

   char byte = ioq->buf[ioq->tail];	  // 从缓冲区中取出
c00051a3:	8b 45 08             	mov    0x8(%ebp),%eax
c00051a6:	8b 40 68             	mov    0x68(%eax),%eax
c00051a9:	8b 55 08             	mov    0x8(%ebp),%edx
c00051ac:	0f b6 44 02 24       	movzbl 0x24(%edx,%eax,1),%eax
c00051b1:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/device/ioqueue.c:58
   ioq->tail = next_pos(ioq->tail);	  // 把读游标移到下一位置
c00051b4:	8b 45 08             	mov    0x8(%ebp),%eax
c00051b7:	8b 40 68             	mov    0x68(%eax),%eax
c00051ba:	83 ec 0c             	sub    $0xc,%esp
c00051bd:	50                   	push   %eax
c00051be:	e8 3f fe ff ff       	call   c0005002 <next_pos>
c00051c3:	83 c4 10             	add    $0x10,%esp
c00051c6:	89 c2                	mov    %eax,%edx
c00051c8:	8b 45 08             	mov    0x8(%ebp),%eax
c00051cb:	89 50 68             	mov    %edx,0x68(%eax)
/work/x86_os_my/device/ioqueue.c:60

   if (ioq->producer != NULL) {
c00051ce:	8b 45 08             	mov    0x8(%ebp),%eax
c00051d1:	8b 40 1c             	mov    0x1c(%eax),%eax
c00051d4:	85 c0                	test   %eax,%eax
c00051d6:	74 12                	je     c00051ea <ioq_getchar+0xb3>
/work/x86_os_my/device/ioqueue.c:61
      wakeup(&ioq->producer);		  // 唤醒生产者
c00051d8:	8b 45 08             	mov    0x8(%ebp),%eax
c00051db:	83 c0 1c             	add    $0x1c,%eax
c00051de:	83 ec 0c             	sub    $0xc,%esp
c00051e1:	50                   	push   %eax
c00051e2:	e8 0b ff ff ff       	call   c00050f2 <wakeup>
c00051e7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:64
   }

   return byte; 
c00051ea:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
/work/x86_os_my/device/ioqueue.c:65
}
c00051ee:	c9                   	leave  
c00051ef:	c3                   	ret    

c00051f0 <ioq_putchar>:
ioq_putchar():
/work/x86_os_my/device/ioqueue.c:68

/* 生产者往ioq队列中写入一个字符byte */
void ioq_putchar(struct ioqueue* ioq, char byte) {
c00051f0:	55                   	push   %ebp
c00051f1:	89 e5                	mov    %esp,%ebp
c00051f3:	83 ec 18             	sub    $0x18,%esp
c00051f6:	8b 45 0c             	mov    0xc(%ebp),%eax
c00051f9:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/device/ioqueue.c:69
   ASSERT(intr_get_status() == INTR_OFF);
c00051fc:	e8 b3 c8 ff ff       	call   c0001ab4 <intr_get_status>
c0005201:	85 c0                	test   %eax,%eax
c0005203:	74 4b                	je     c0005250 <ioq_putchar+0x60>
/work/x86_os_my/device/ioqueue.c:69 (discriminator 1)
c0005205:	68 c8 d7 00 c0       	push   $0xc000d7c8
c000520a:	68 64 d8 00 c0       	push   $0xc000d864
c000520f:	6a 45                	push   $0x45
c0005211:	68 e6 d7 00 c0       	push   $0xc000d7e6
c0005216:	e8 36 d2 ff ff       	call   c0002451 <panic_spin>
c000521b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:74 (discriminator 1)

/* 若缓冲区(队列)已经满了,把生产者ioq->producer记为自己,
 * 为的是当缓冲区里的东西被消费者取完后让消费者知道唤醒哪个生产者,
 * 也就是唤醒当前线程自己*/
   while (ioq_full(ioq)) {
c000521e:	eb 30                	jmp    c0005250 <ioq_putchar+0x60>
/work/x86_os_my/device/ioqueue.c:75
      lock_acquire(&ioq->lock);
c0005220:	8b 45 08             	mov    0x8(%ebp),%eax
c0005223:	83 ec 0c             	sub    $0xc,%esp
c0005226:	50                   	push   %eax
c0005227:	e8 83 f9 ff ff       	call   c0004baf <lock_acquire>
c000522c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:76
      ioq_wait(&ioq->producer);
c000522f:	8b 45 08             	mov    0x8(%ebp),%eax
c0005232:	83 c0 1c             	add    $0x1c,%eax
c0005235:	83 ec 0c             	sub    $0xc,%esp
c0005238:	50                   	push   %eax
c0005239:	e8 6a fe ff ff       	call   c00050a8 <ioq_wait>
c000523e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:77
      lock_release(&ioq->lock);
c0005241:	8b 45 08             	mov    0x8(%ebp),%eax
c0005244:	83 ec 0c             	sub    $0xc,%esp
c0005247:	50                   	push   %eax
c0005248:	e8 d9 f9 ff ff       	call   c0004c26 <lock_release>
c000524d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:74
   ASSERT(intr_get_status() == INTR_OFF);

/* 若缓冲区(队列)已经满了,把生产者ioq->producer记为自己,
 * 为的是当缓冲区里的东西被消费者取完后让消费者知道唤醒哪个生产者,
 * 也就是唤醒当前线程自己*/
   while (ioq_full(ioq)) {
c0005250:	83 ec 0c             	sub    $0xc,%esp
c0005253:	ff 75 08             	pushl  0x8(%ebp)
c0005256:	e8 c3 fd ff ff       	call   c000501e <ioq_full>
c000525b:	83 c4 10             	add    $0x10,%esp
c000525e:	85 c0                	test   %eax,%eax
c0005260:	75 be                	jne    c0005220 <ioq_putchar+0x30>
/work/x86_os_my/device/ioqueue.c:79
      lock_acquire(&ioq->lock);
      ioq_wait(&ioq->producer);
      lock_release(&ioq->lock);
   }
   ioq->buf[ioq->head] = byte;      // 把字节放入缓冲区中
c0005262:	8b 45 08             	mov    0x8(%ebp),%eax
c0005265:	8b 40 64             	mov    0x64(%eax),%eax
c0005268:	8b 55 08             	mov    0x8(%ebp),%edx
c000526b:	0f b6 4d f4          	movzbl -0xc(%ebp),%ecx
c000526f:	88 4c 02 24          	mov    %cl,0x24(%edx,%eax,1)
/work/x86_os_my/device/ioqueue.c:80
   ioq->head = next_pos(ioq->head); // 把写游标移到下一位置
c0005273:	8b 45 08             	mov    0x8(%ebp),%eax
c0005276:	8b 40 64             	mov    0x64(%eax),%eax
c0005279:	83 ec 0c             	sub    $0xc,%esp
c000527c:	50                   	push   %eax
c000527d:	e8 80 fd ff ff       	call   c0005002 <next_pos>
c0005282:	83 c4 10             	add    $0x10,%esp
c0005285:	89 c2                	mov    %eax,%edx
c0005287:	8b 45 08             	mov    0x8(%ebp),%eax
c000528a:	89 50 64             	mov    %edx,0x64(%eax)
/work/x86_os_my/device/ioqueue.c:82

   if (ioq->consumer != NULL) {
c000528d:	8b 45 08             	mov    0x8(%ebp),%eax
c0005290:	8b 40 20             	mov    0x20(%eax),%eax
c0005293:	85 c0                	test   %eax,%eax
c0005295:	74 12                	je     c00052a9 <ioq_putchar+0xb9>
/work/x86_os_my/device/ioqueue.c:83
      wakeup(&ioq->consumer);          // 唤醒消费者
c0005297:	8b 45 08             	mov    0x8(%ebp),%eax
c000529a:	83 c0 20             	add    $0x20,%eax
c000529d:	83 ec 0c             	sub    $0xc,%esp
c00052a0:	50                   	push   %eax
c00052a1:	e8 4c fe ff ff       	call   c00050f2 <wakeup>
c00052a6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:85
   }
}
c00052a9:	90                   	nop
c00052aa:	c9                   	leave  
c00052ab:	c3                   	ret    

c00052ac <update_tss_esp>:
update_tss_esp():
/work/x86_os_my/userprog/tss.c:40
	uint32_t io_base;
}; 
static struct tss g_tss;

/* 更新tss中esp0字段的值为pthread的0级栈 */
void update_tss_esp(struct task_struct* pthread) {
c00052ac:	55                   	push   %ebp
c00052ad:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/userprog/tss.c:41
	g_tss.esp0 = (uint32_t*)((uint32_t)pthread + PG_SIZE);
c00052af:	8b 45 08             	mov    0x8(%ebp),%eax
c00052b2:	05 00 10 00 00       	add    $0x1000,%eax
c00052b7:	a3 a4 15 01 c0       	mov    %eax,0xc00115a4
/work/x86_os_my/userprog/tss.c:42
}
c00052bc:	90                   	nop
c00052bd:	5d                   	pop    %ebp
c00052be:	c3                   	ret    

c00052bf <make_gdt_desc>:
make_gdt_desc():
/work/x86_os_my/userprog/tss.c:45

/* c语言方式，创建gdt描述符 */
static struct gdt_desc make_gdt_desc(uint32_t* desc_addr, uint32_t limit, uint8_t attr_low, uint8_t attr_high) {
c00052bf:	55                   	push   %ebp
c00052c0:	89 e5                	mov    %esp,%ebp
c00052c2:	83 ec 18             	sub    $0x18,%esp
c00052c5:	8b 55 14             	mov    0x14(%ebp),%edx
c00052c8:	8b 45 18             	mov    0x18(%ebp),%eax
c00052cb:	88 55 ec             	mov    %dl,-0x14(%ebp)
c00052ce:	88 45 e8             	mov    %al,-0x18(%ebp)
/work/x86_os_my/userprog/tss.c:46
	uint32_t desc_base = (uint32_t)desc_addr;
c00052d1:	8b 45 0c             	mov    0xc(%ebp),%eax
c00052d4:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/userprog/tss.c:48
	struct gdt_desc desc;
	desc.limit_low_word = limit & 0x0000ffff;
c00052d7:	8b 45 10             	mov    0x10(%ebp),%eax
c00052da:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
/work/x86_os_my/userprog/tss.c:49
	desc.base_low_word = desc_base & 0x0000ffff;
c00052de:	8b 45 fc             	mov    -0x4(%ebp),%eax
c00052e1:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
/work/x86_os_my/userprog/tss.c:50
	desc.base_mid_byte = ((desc_base & 0x00ff0000) >> 16);
c00052e5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c00052e8:	25 00 00 ff 00       	and    $0xff0000,%eax
c00052ed:	c1 e8 10             	shr    $0x10,%eax
c00052f0:	88 45 f8             	mov    %al,-0x8(%ebp)
/work/x86_os_my/userprog/tss.c:51
	desc.attr_low_byte = (uint8_t)(attr_low);
c00052f3:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c00052f7:	88 45 f9             	mov    %al,-0x7(%ebp)
/work/x86_os_my/userprog/tss.c:52
	desc.limit_high_attr_high = (((limit & 0x000f0000) >> 16) + (uint8_t)(attr_high));
c00052fa:	8b 45 10             	mov    0x10(%ebp),%eax
c00052fd:	25 00 00 0f 00       	and    $0xf0000,%eax
c0005302:	c1 e8 10             	shr    $0x10,%eax
c0005305:	89 c2                	mov    %eax,%edx
c0005307:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c000530b:	01 d0                	add    %edx,%eax
c000530d:	88 45 fa             	mov    %al,-0x6(%ebp)
/work/x86_os_my/userprog/tss.c:53
	desc.base_high_byte = desc_base >> 24;
c0005310:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0005313:	c1 e8 18             	shr    $0x18,%eax
c0005316:	88 45 fb             	mov    %al,-0x5(%ebp)
/work/x86_os_my/userprog/tss.c:54
	return desc;
c0005319:	8b 4d 08             	mov    0x8(%ebp),%ecx
c000531c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000531f:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0005322:	89 01                	mov    %eax,(%ecx)
c0005324:	89 51 04             	mov    %edx,0x4(%ecx)
/work/x86_os_my/userprog/tss.c:55
}
c0005327:	8b 45 08             	mov    0x8(%ebp),%eax
c000532a:	c9                   	leave  
c000532b:	c2 04 00             	ret    $0x4

c000532e <tss_init>:
tss_init():
/work/x86_os_my/userprog/tss.c:61

/* 在gdt中创建tss描述符
 * 重新加载 gdt
 * 加载 tr
 */
void tss_init() {
c000532e:	55                   	push   %ebp
c000532f:	89 e5                	mov    %esp,%ebp
c0005331:	53                   	push   %ebx
c0005332:	83 ec 24             	sub    $0x24,%esp
/work/x86_os_my/userprog/tss.c:62
	put_str("tss_init start\n");
c0005335:	83 ec 0c             	sub    $0xc,%esp
c0005338:	68 70 d8 00 c0       	push   $0xc000d870
c000533d:	e8 5e cf ff ff       	call   c00022a0 <put_str>
c0005342:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/tss.c:63
	uint32_t tss_size = sizeof(g_tss);
c0005345:	c7 45 f4 6c 00 00 00 	movl   $0x6c,-0xc(%ebp)
/work/x86_os_my/userprog/tss.c:64
	memset(&g_tss, 0, tss_size);
c000534c:	83 ec 04             	sub    $0x4,%esp
c000534f:	ff 75 f4             	pushl  -0xc(%ebp)
c0005352:	6a 00                	push   $0x0
c0005354:	68 a0 15 01 c0       	push   $0xc00115a0
c0005359:	e8 95 e5 ff ff       	call   c00038f3 <memset>
c000535e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/tss.c:66
	
	g_tss.ss0 = SELECTOR_K_STACK;	// 0 级栈段的选择子 
c0005361:	c7 05 a8 15 01 c0 10 	movl   $0x10,0xc00115a8
c0005368:	00 00 00 
/work/x86_os_my/userprog/tss.c:67
	g_tss.io_base = tss_size;		// 当 IO 位图的偏移地址大于等于 TSS 大小减 1 时，就表示没有 IO 位图。
c000536b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000536e:	a3 08 16 01 c0       	mov    %eax,0xc0011608
/work/x86_os_my/userprog/tss.c:75
	 * 内核地址 0xC000_0900 是映射到 0x900 的 
	 * 在GDT中，第 0 个段描述符不可用，第 1 个为代码段，第 2 个为数据段和栈，第 3 个为显存段
	 */

	/* 在gdt中添加dpl为0的TSS描述符 */
	*((struct gdt_desc*)0xc0000920) = make_gdt_desc((uint32_t*)&g_tss, tss_size - 1, TSS_ATTR_LOW, TSS_ATTR_HIGH);
c0005373:	bb 20 09 00 c0       	mov    $0xc0000920,%ebx
c0005378:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000537b:	8d 50 ff             	lea    -0x1(%eax),%edx
c000537e:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0005381:	83 ec 0c             	sub    $0xc,%esp
c0005384:	68 80 00 00 00       	push   $0x80
c0005389:	68 89 00 00 00       	push   $0x89
c000538e:	52                   	push   %edx
c000538f:	68 a0 15 01 c0       	push   $0xc00115a0
c0005394:	50                   	push   %eax
c0005395:	e8 25 ff ff ff       	call   c00052bf <make_gdt_desc>
c000539a:	83 c4 1c             	add    $0x1c,%esp
c000539d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00053a0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c00053a3:	89 03                	mov    %eax,(%ebx)
c00053a5:	89 53 04             	mov    %edx,0x4(%ebx)
/work/x86_os_my/userprog/tss.c:78

	/* 在gdt中添加dpl为3的,用户级,数据段和代码段描述符 */
	*((struct gdt_desc*)0xc0000928) = make_gdt_desc((uint32_t*)0, 0xfffff, GDT_CODE_ATTR_LOW_DPL3, GDT_ATTR_HIGH);
c00053a8:	bb 28 09 00 c0       	mov    $0xc0000928,%ebx
c00053ad:	8d 45 e0             	lea    -0x20(%ebp),%eax
c00053b0:	83 ec 0c             	sub    $0xc,%esp
c00053b3:	68 c0 00 00 00       	push   $0xc0
c00053b8:	68 f8 00 00 00       	push   $0xf8
c00053bd:	68 ff ff 0f 00       	push   $0xfffff
c00053c2:	6a 00                	push   $0x0
c00053c4:	50                   	push   %eax
c00053c5:	e8 f5 fe ff ff       	call   c00052bf <make_gdt_desc>
c00053ca:	83 c4 1c             	add    $0x1c,%esp
c00053cd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00053d0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c00053d3:	89 03                	mov    %eax,(%ebx)
c00053d5:	89 53 04             	mov    %edx,0x4(%ebx)
/work/x86_os_my/userprog/tss.c:79
	*((struct gdt_desc*)0xc0000930) = make_gdt_desc((uint32_t*)0, 0xfffff, GDT_DATA_ATTR_LOW_DPL3, GDT_ATTR_HIGH);
c00053d8:	bb 30 09 00 c0       	mov    $0xc0000930,%ebx
c00053dd:	8d 45 e0             	lea    -0x20(%ebp),%eax
c00053e0:	83 ec 0c             	sub    $0xc,%esp
c00053e3:	68 c0 00 00 00       	push   $0xc0
c00053e8:	68 f2 00 00 00       	push   $0xf2
c00053ed:	68 ff ff 0f 00       	push   $0xfffff
c00053f2:	6a 00                	push   $0x0
c00053f4:	50                   	push   %eax
c00053f5:	e8 c5 fe ff ff       	call   c00052bf <make_gdt_desc>
c00053fa:	83 c4 1c             	add    $0x1c,%esp
c00053fd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0005400:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0005403:	89 03                	mov    %eax,(%ebx)
c0005405:	89 53 04             	mov    %edx,0x4(%ebx)
/work/x86_os_my/userprog/tss.c:83

	/* GDTR 16位的limit、32位的段基址 */
	// 先转换成 uint32_t 后，再将其转换成 uint64_t 位（不可一步到位转为 uint64_t）
	uint64_t gdt_operand = ((8 * 7 - 1) | ((uint64_t)(uint32_t)0xc0000900 << 16));   // 7个描述符大小
c0005408:	c7 45 e8 37 00 00 09 	movl   $0x9000037,-0x18(%ebp)
c000540f:	c7 45 ec 00 c0 00 00 	movl   $0xc000,-0x14(%ebp)
/work/x86_os_my/userprog/tss.c:84
	asm volatile ("lgdt %0" : : "m" (gdt_operand));
c0005416:	0f 01 55 e8          	lgdtl  -0x18(%ebp)
/work/x86_os_my/userprog/tss.c:85
	asm volatile ("ltr %w0" : : "r" (SELECTOR_TSS));
c000541a:	b8 20 00 00 00       	mov    $0x20,%eax
c000541f:	0f 00 d8             	ltr    %ax
/work/x86_os_my/userprog/tss.c:86
	put_str("tss_init and ltr done\n");
c0005422:	83 ec 0c             	sub    $0xc,%esp
c0005425:	68 80 d8 00 c0       	push   $0xc000d880
c000542a:	e8 71 ce ff ff       	call   c00022a0 <put_str>
c000542f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/tss.c:87
}
c0005432:	90                   	nop
c0005433:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0005436:	c9                   	leave  
c0005437:	c3                   	ret    

c0005438 <start_process>:
start_process():
/work/x86_os_my/userprog/process.c:17
extern void intr_exit(void);

/* 构建用户进程初始上下文信息
 * 填充用户进程的中断栈，并将中断栈的信息，利用iretd填充到 CPU 中
 */
void start_process(void* filename_) {
c0005438:	55                   	push   %ebp
c0005439:	89 e5                	mov    %esp,%ebp
c000543b:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/process.c:18
	void* function = filename_;
c000543e:	8b 45 08             	mov    0x8(%ebp),%eax
c0005441:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:19
	struct task_struct* cur = running_thread();
c0005444:	e8 91 e8 ff ff       	call   c0003cda <running_thread>
c0005449:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/process.c:20
	cur->self_kstack += sizeof(struct thread_stack);
c000544c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000544f:	8b 00                	mov    (%eax),%eax
c0005451:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
c0005457:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000545a:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/userprog/process.c:21
	struct intr_stack* proc_stack = (struct intr_stack*)cur->self_kstack;	 
c000545c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000545f:	8b 00                	mov    (%eax),%eax
c0005461:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/userprog/process.c:22
	proc_stack->edi = proc_stack->esi = proc_stack->ebp = proc_stack->esp_dummy = 0;
c0005464:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005467:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
c000546e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005471:	8b 50 10             	mov    0x10(%eax),%edx
c0005474:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005477:	89 50 0c             	mov    %edx,0xc(%eax)
c000547a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000547d:	8b 50 0c             	mov    0xc(%eax),%edx
c0005480:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005483:	89 50 08             	mov    %edx,0x8(%eax)
c0005486:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005489:	8b 50 08             	mov    0x8(%eax),%edx
c000548c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000548f:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/userprog/process.c:23
	proc_stack->ebx = proc_stack->edx = proc_stack->ecx = proc_stack->eax = 0;
c0005492:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005495:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
c000549c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000549f:	8b 50 20             	mov    0x20(%eax),%edx
c00054a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00054a5:	89 50 1c             	mov    %edx,0x1c(%eax)
c00054a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00054ab:	8b 50 1c             	mov    0x1c(%eax),%edx
c00054ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00054b1:	89 50 18             	mov    %edx,0x18(%eax)
c00054b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00054b7:	8b 50 18             	mov    0x18(%eax),%edx
c00054ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00054bd:	89 50 14             	mov    %edx,0x14(%eax)
/work/x86_os_my/userprog/process.c:28
	/* 在iretd返回时，如果发现未来的 CPL（也就是内核栈中 CS.RPL，或者说是返回到的用户进程的代码段CS.CPL）
	 * 权限低于（数值上大于） CPU 中段寄存器（如 DS、 ES、 FS、 GS）中选择子指向的内存段的 DPL，
	 * CPU 会自动将相应段寄存器的选择子置为 0 
	 * 这里gs的选择子在iretd返回后，会被自动清零。*/
	proc_stack->gs = 0;					// 用户态用不上,直接初始为0
c00054c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00054c3:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
/work/x86_os_my/userprog/process.c:29
	proc_stack->ds = proc_stack->es = proc_stack->fs = SELECTOR_U_DATA;		// 用户级数据段
c00054ca:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00054cd:	c7 40 28 33 00 00 00 	movl   $0x33,0x28(%eax)
c00054d4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00054d7:	8b 50 28             	mov    0x28(%eax),%edx
c00054da:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00054dd:	89 50 2c             	mov    %edx,0x2c(%eax)
c00054e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00054e3:	8b 50 2c             	mov    0x2c(%eax),%edx
c00054e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00054e9:	89 50 30             	mov    %edx,0x30(%eax)
/work/x86_os_my/userprog/process.c:33

	/* 中断栈中，上边几个是中断处理函数手动压栈的，下边几个是硬件自动压栈的 */

	proc_stack->eip = function;			// 待执行的用户程序地址
c00054ec:	8b 55 f4             	mov    -0xc(%ebp),%edx
c00054ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00054f2:	89 50 38             	mov    %edx,0x38(%eax)
/work/x86_os_my/userprog/process.c:34
	proc_stack->cs = SELECTOR_U_CODE;	// 用户级代码段
c00054f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00054f8:	c7 40 3c 2b 00 00 00 	movl   $0x2b,0x3c(%eax)
/work/x86_os_my/userprog/process.c:35
	proc_stack->eflags = (EFLAGS_IOPL_0 | EFLAGS_MBS | EFLAGS_IF_1);
c00054ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005502:	c7 40 40 02 02 00 00 	movl   $0x202,0x40(%eax)
/work/x86_os_my/userprog/process.c:44
	 * process_activate 使用户进程页表生效【已经把CR3寄存器 更新为 用户进程的页表了】
	 * start_process    为用户进程创建3特权级栈【所以申请的内存空间来自用户进程的页表】
	 * 
	 * USER_STACK3_VADDR=(0xc0000000 - 0x1000)
	 */
	proc_stack->esp = (void*)((uint32_t)get_a_page(PF_USER, USER_STACK3_VADDR) + PG_SIZE) ;
c0005509:	83 ec 08             	sub    $0x8,%esp
c000550c:	68 00 f0 ff bf       	push   $0xbffff000
c0005511:	6a 02                	push   $0x2
c0005513:	e8 97 d6 ff ff       	call   c0002baf <get_a_page>
c0005518:	83 c4 10             	add    $0x10,%esp
c000551b:	05 00 10 00 00       	add    $0x1000,%eax
c0005520:	89 c2                	mov    %eax,%edx
c0005522:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005525:	89 50 44             	mov    %edx,0x44(%eax)
/work/x86_os_my/userprog/process.c:45
	proc_stack->ss = SELECTOR_U_DATA;
c0005528:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000552b:	c7 40 48 33 00 00 00 	movl   $0x33,0x48(%eax)
/work/x86_os_my/userprog/process.c:52
	/* 将 esp 替换为 proc_stack
	 * 通过 jmp intr_exit 那里的一系列 pop 指令和 iretd 指令，
	 * 将 proc_stack 中的数据载入 CPU 的寄存器，
	 * 从而使程序“假装”退出中断，进入特权级 3
	 */
	asm volatile ("movl %0, %%esp; jmp intr_exit" : : "g" (proc_stack) : "memory");
c0005532:	8b 65 ec             	mov    -0x14(%ebp),%esp
c0005535:	e9 06 c8 ff ff       	jmp    c0001d40 <intr_exit>
/work/x86_os_my/userprog/process.c:53
}
c000553a:	90                   	nop
c000553b:	c9                   	leave  
c000553c:	c3                   	ret    

c000553d <page_dir_activate>:
page_dir_activate():
/work/x86_os_my/userprog/process.c:56

/* 更新CR3寄存器，激活页目录表 */
void page_dir_activate(struct task_struct* p_thread) {
c000553d:	55                   	push   %ebp
c000553e:	89 e5                	mov    %esp,%ebp
c0005540:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/process.c:59
	
	/* 若为"内核线程",需要重新填充页表为0x100000 */
	uint32_t pagedir_phy_addr = 0x100000;	// 默认为内核的页目录物理地址,也就是内核线程所用的页目录表
c0005543:	c7 45 f4 00 00 10 00 	movl   $0x100000,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:62
	
	/* "用户态进程"有自己的页目录表 */
	if (p_thread->pgdir != NULL) {
c000554a:	8b 45 08             	mov    0x8(%ebp),%eax
c000554d:	8b 40 54             	mov    0x54(%eax),%eax
c0005550:	85 c0                	test   %eax,%eax
c0005552:	74 15                	je     c0005569 <page_dir_activate+0x2c>
/work/x86_os_my/userprog/process.c:63
		pagedir_phy_addr = addr_v2p((uint32_t)p_thread->pgdir);
c0005554:	8b 45 08             	mov    0x8(%ebp),%eax
c0005557:	8b 40 54             	mov    0x54(%eax),%eax
c000555a:	83 ec 0c             	sub    $0xc,%esp
c000555d:	50                   	push   %eax
c000555e:	e8 46 d8 ff ff       	call   c0002da9 <addr_v2p>
c0005563:	83 c4 10             	add    $0x10,%esp
c0005566:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:69
	}

	/* 更新页目录寄存器cr3,使新页表生效
	 * 实现进程间，虚拟地址空间的隔离。
	 */
	asm volatile ("movl %0, %%cr3" : : "r" (pagedir_phy_addr) : "memory");
c0005569:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000556c:	0f 22 d8             	mov    %eax,%cr3
/work/x86_os_my/userprog/process.c:70
}
c000556f:	90                   	nop
c0005570:	c9                   	leave  
c0005571:	c3                   	ret    

c0005572 <process_activate>:
process_activate():
/work/x86_os_my/userprog/process.c:76

/* 1.激活线程或进程的页表,【更新CR3寄存器】
 * 2.用户进程，更新tss中的esp0为进程的特权级0的栈
 * 【只有在任务调度时（中断时），才会切换页表及更新 0 级栈，因此 process_activate 是被"中断执行流"的 schedule 调用的！】
 */
void process_activate(struct task_struct* p_thread) {
c0005572:	55                   	push   %ebp
c0005573:	89 e5                	mov    %esp,%ebp
c0005575:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/userprog/process.c:77
	ASSERT(p_thread != NULL);
c0005578:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c000557c:	75 19                	jne    c0005597 <process_activate+0x25>
/work/x86_os_my/userprog/process.c:77 (discriminator 1)
c000557e:	68 98 d8 00 c0       	push   $0xc000d898
c0005583:	68 54 d9 00 c0       	push   $0xc000d954
c0005588:	6a 4d                	push   $0x4d
c000558a:	68 a9 d8 00 c0       	push   $0xc000d8a9
c000558f:	e8 bd ce ff ff       	call   c0002451 <panic_spin>
c0005594:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:80
	
	/* 激活该进程或线程的页目录表【重新加载了CR3】 */
	page_dir_activate(p_thread);
c0005597:	83 ec 0c             	sub    $0xc,%esp
c000559a:	ff 75 08             	pushl  0x8(%ebp)
c000559d:	e8 9b ff ff ff       	call   c000553d <page_dir_activate>
c00055a2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:83

	/* 内核线程特权级本身就是0,处理器进入中断时并不会从tss中获取0特权级栈地址,故不需要更新esp0 */
	if (p_thread->pgdir != NULL) {
c00055a5:	8b 45 08             	mov    0x8(%ebp),%eax
c00055a8:	8b 40 54             	mov    0x54(%eax),%eax
c00055ab:	85 c0                	test   %eax,%eax
c00055ad:	74 0e                	je     c00055bd <process_activate+0x4b>
/work/x86_os_my/userprog/process.c:86
		/* 若为用户进程,更新该进程的esp0,用于此进程被中断时保留上下文 
		 * 需要从tss中获取0特权级栈地址 */
		update_tss_esp(p_thread);	//就一行：g_tss.esp0 = (uint32_t*)((uint32_t)pthread + PG_SIZE);
c00055af:	83 ec 0c             	sub    $0xc,%esp
c00055b2:	ff 75 08             	pushl  0x8(%ebp)
c00055b5:	e8 f2 fc ff ff       	call   c00052ac <update_tss_esp>
c00055ba:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:88
	}
}
c00055bd:	90                   	nop
c00055be:	c9                   	leave  
c00055bf:	c3                   	ret    

c00055c0 <create_page_dir>:
create_page_dir():
/work/x86_os_my/userprog/process.c:97
 * 
 * 要确保用户进程，在自己的地址空间中，能够访问到内核。
 * 即：任意进程的页目录表中，用户进程占第 0~767 个页目录项，内核占第 768~1023 个页目录项。
 * 0x300 = 768
 */
uint32_t* create_page_dir(void) {
c00055c0:	55                   	push   %ebp
c00055c1:	89 e5                	mov    %esp,%ebp
c00055c3:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/process.c:100

	/* 用户进程的页表不能让用户直接访问到,所以在内核空间来申请 */
	uint32_t* page_dir_vaddr = get_kernel_pages(1);
c00055c6:	83 ec 0c             	sub    $0xc,%esp
c00055c9:	6a 01                	push   $0x1
c00055cb:	e8 29 d5 ff ff       	call   c0002af9 <get_kernel_pages>
c00055d0:	83 c4 10             	add    $0x10,%esp
c00055d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:101
	if (page_dir_vaddr == NULL) {
c00055d6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c00055da:	75 17                	jne    c00055f3 <create_page_dir+0x33>
/work/x86_os_my/userprog/process.c:102
		console_put_str("create_page_dir: get_kernel_page failed!");
c00055dc:	83 ec 0c             	sub    $0xc,%esp
c00055df:	68 bc d8 00 c0       	push   $0xc000d8bc
c00055e4:	e8 57 f3 ff ff       	call   c0004940 <console_put_str>
c00055e9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:103
		return NULL;
c00055ec:	b8 00 00 00 00       	mov    $0x0,%eax
c00055f1:	eb 43                	jmp    c0005636 <create_page_dir+0x76>
/work/x86_os_my/userprog/process.c:109
	}

	/*** 1 复制内核的页目录表  ***/
	// page_dir_vaddr + 0x300*4 是内核页目录的第768项
	// 复制的页目录项个数=1024/4
	memcpy((uint32_t*)((uint32_t)page_dir_vaddr + 0x300*4), (uint32_t*)(0xfffff000+0x300*4), 1024);
c00055f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00055f6:	05 00 0c 00 00       	add    $0xc00,%eax
c00055fb:	83 ec 04             	sub    $0x4,%esp
c00055fe:	68 00 04 00 00       	push   $0x400
c0005603:	68 00 fc ff ff       	push   $0xfffffc00
c0005608:	50                   	push   %eax
c0005609:	e8 37 e3 ff ff       	call   c0003945 <memcpy>
c000560e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:113

	/*** 2 更新页目录表地址 ***/
	// 页目录表地址是页目录的最后一项
	uint32_t new_page_dir_phy_addr = addr_v2p((uint32_t)page_dir_vaddr);
c0005611:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005614:	83 ec 0c             	sub    $0xc,%esp
c0005617:	50                   	push   %eax
c0005618:	e8 8c d7 ff ff       	call   c0002da9 <addr_v2p>
c000561d:	83 c4 10             	add    $0x10,%esp
c0005620:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/process.c:114
	page_dir_vaddr[1023] = new_page_dir_phy_addr | PG_US_U | PG_RW_W | PG_P_1;
c0005623:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005626:	05 fc 0f 00 00       	add    $0xffc,%eax
c000562b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000562e:	83 ca 07             	or     $0x7,%edx
c0005631:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/userprog/process.c:116

	return page_dir_vaddr;
c0005633:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/userprog/process.c:117
}
c0005636:	c9                   	leave  
c0005637:	c3                   	ret    

c0005638 <create_user_vaddr_bitmap>:
create_user_vaddr_bitmap():
/work/x86_os_my/userprog/process.c:120

/* 创建用户进程虚拟地址位图 */
void create_user_vaddr_bitmap(struct task_struct* user_prog) {
c0005638:	55                   	push   %ebp
c0005639:	89 e5                	mov    %esp,%ebp
c000563b:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/process.c:121
   user_prog->userprog_vaddr.vaddr_start = USER_VADDR_START;	// linux用户程序入口地址 0x80480000
c000563e:	8b 45 08             	mov    0x8(%ebp),%eax
c0005641:	c7 40 60 00 80 04 08 	movl   $0x8048000,0x60(%eax)
/work/x86_os_my/userprog/process.c:122
   uint32_t bitmap_pg_cnt = DIV_ROUND_UP((0xc0000000 - USER_VADDR_START) / PG_SIZE / 8 , PG_SIZE);
c0005648:	c7 45 f4 17 00 00 00 	movl   $0x17,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:123
   user_prog->userprog_vaddr.vaddr_bitmap.bits = get_kernel_pages(bitmap_pg_cnt);
c000564f:	83 ec 0c             	sub    $0xc,%esp
c0005652:	ff 75 f4             	pushl  -0xc(%ebp)
c0005655:	e8 9f d4 ff ff       	call   c0002af9 <get_kernel_pages>
c000565a:	83 c4 10             	add    $0x10,%esp
c000565d:	89 c2                	mov    %eax,%edx
c000565f:	8b 45 08             	mov    0x8(%ebp),%eax
c0005662:	89 50 5c             	mov    %edx,0x5c(%eax)
/work/x86_os_my/userprog/process.c:124
   user_prog->userprog_vaddr.vaddr_bitmap.btmp_bytes_len = (0xc0000000 - USER_VADDR_START) / PG_SIZE / 8;
c0005665:	8b 45 08             	mov    0x8(%ebp),%eax
c0005668:	c7 40 58 f7 6f 01 00 	movl   $0x16ff7,0x58(%eax)
/work/x86_os_my/userprog/process.c:125
   bitmap_init(&user_prog->userprog_vaddr.vaddr_bitmap);
c000566f:	8b 45 08             	mov    0x8(%ebp),%eax
c0005672:	83 c0 58             	add    $0x58,%eax
c0005675:	83 ec 0c             	sub    $0xc,%esp
c0005678:	50                   	push   %eax
c0005679:	e8 a9 ce ff ff       	call   c0002527 <bitmap_init>
c000567e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:126
}
c0005681:	90                   	nop
c0005682:	c9                   	leave  
c0005683:	c3                   	ret    

c0005684 <process_execute>:
process_execute():
/work/x86_os_my/userprog/process.c:129

/* 创建用户进程 */
void process_execute(void* filename, char* name) {
c0005684:	55                   	push   %ebp
c0005685:	89 e5                	mov    %esp,%ebp
c0005687:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/process.c:131
   /* pcb内核的数据结构,由内核来维护进程信息,因此要在内核内存池中申请 */
   struct task_struct* thread = get_kernel_pages(1);
c000568a:	83 ec 0c             	sub    $0xc,%esp
c000568d:	6a 01                	push   $0x1
c000568f:	e8 65 d4 ff ff       	call   c0002af9 <get_kernel_pages>
c0005694:	83 c4 10             	add    $0x10,%esp
c0005697:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:132
   init_thread(thread, name, default_prio);			//初始化线程PCB结构体 struct task_struct
c000569a:	83 ec 04             	sub    $0x4,%esp
c000569d:	6a 1f                	push   $0x1f
c000569f:	ff 75 0c             	pushl  0xc(%ebp)
c00056a2:	ff 75 f4             	pushl  -0xc(%ebp)
c00056a5:	e8 24 e7 ff ff       	call   c0003dce <init_thread>
c00056aa:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:133
   create_user_vaddr_bitmap(thread);				//【进程新增】创建用户进程，虚拟地址空间位图
c00056ad:	83 ec 0c             	sub    $0xc,%esp
c00056b0:	ff 75 f4             	pushl  -0xc(%ebp)
c00056b3:	e8 80 ff ff ff       	call   c0005638 <create_user_vaddr_bitmap>
c00056b8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:134
   thread_create(thread, start_process, filename);	//初始化线程栈结构体 struct thread_stack
c00056bb:	83 ec 04             	sub    $0x4,%esp
c00056be:	ff 75 08             	pushl  0x8(%ebp)
c00056c1:	68 38 54 00 c0       	push   $0xc0005438
c00056c6:	ff 75 f4             	pushl  -0xc(%ebp)
c00056c9:	e8 89 e6 ff ff       	call   c0003d57 <thread_create>
c00056ce:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:135
   thread->pgdir = create_page_dir();				//【进程新增】创建用户进程，页目录表
c00056d1:	e8 ea fe ff ff       	call   c00055c0 <create_page_dir>
c00056d6:	89 c2                	mov    %eax,%edx
c00056d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00056db:	89 50 54             	mov    %edx,0x54(%eax)
/work/x86_os_my/userprog/process.c:136
   block_desc_init(thread->u_block_desc);
c00056de:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00056e1:	83 c0 64             	add    $0x64,%eax
c00056e4:	83 ec 0c             	sub    $0xc,%esp
c00056e7:	50                   	push   %eax
c00056e8:	e8 22 e1 ff ff       	call   c000380f <block_desc_init>
c00056ed:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:138
   
   enum intr_status old_status = intr_disable();
c00056f0:	e8 78 c3 ff ff       	call   c0001a6d <intr_disable>
c00056f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/process.c:139
   ASSERT(!elem_find(&thread_ready_list, &thread->general_tag));
c00056f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00056fb:	83 c0 44             	add    $0x44,%eax
c00056fe:	83 ec 08             	sub    $0x8,%esp
c0005701:	50                   	push   %eax
c0005702:	68 cc 21 01 c0       	push   $0xc00121cc
c0005707:	e8 e0 f0 ff ff       	call   c00047ec <elem_find>
c000570c:	83 c4 10             	add    $0x10,%esp
c000570f:	85 c0                	test   %eax,%eax
c0005711:	74 1c                	je     c000572f <process_execute+0xab>
/work/x86_os_my/userprog/process.c:139 (discriminator 1)
c0005713:	68 e8 d8 00 c0       	push   $0xc000d8e8
c0005718:	68 68 d9 00 c0       	push   $0xc000d968
c000571d:	68 8b 00 00 00       	push   $0x8b
c0005722:	68 a9 d8 00 c0       	push   $0xc000d8a9
c0005727:	e8 25 cd ff ff       	call   c0002451 <panic_spin>
c000572c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:140
   list_append(&thread_ready_list, &thread->general_tag);
c000572f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005732:	83 c0 44             	add    $0x44,%eax
c0005735:	83 ec 08             	sub    $0x8,%esp
c0005738:	50                   	push   %eax
c0005739:	68 cc 21 01 c0       	push   $0xc00121cc
c000573e:	e8 2f f0 ff ff       	call   c0004772 <list_append>
c0005743:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:141
   ASSERT(!elem_find(&thread_all_list, &thread->all_list_tag));
c0005746:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005749:	83 c0 4c             	add    $0x4c,%eax
c000574c:	83 ec 08             	sub    $0x8,%esp
c000574f:	50                   	push   %eax
c0005750:	68 dc 21 01 c0       	push   $0xc00121dc
c0005755:	e8 92 f0 ff ff       	call   c00047ec <elem_find>
c000575a:	83 c4 10             	add    $0x10,%esp
c000575d:	85 c0                	test   %eax,%eax
c000575f:	74 1c                	je     c000577d <process_execute+0xf9>
/work/x86_os_my/userprog/process.c:141 (discriminator 1)
c0005761:	68 20 d9 00 c0       	push   $0xc000d920
c0005766:	68 68 d9 00 c0       	push   $0xc000d968
c000576b:	68 8d 00 00 00       	push   $0x8d
c0005770:	68 a9 d8 00 c0       	push   $0xc000d8a9
c0005775:	e8 d7 cc ff ff       	call   c0002451 <panic_spin>
c000577a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:142
   list_append(&thread_all_list, &thread->all_list_tag);
c000577d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005780:	83 c0 4c             	add    $0x4c,%eax
c0005783:	83 ec 08             	sub    $0x8,%esp
c0005786:	50                   	push   %eax
c0005787:	68 dc 21 01 c0       	push   $0xc00121dc
c000578c:	e8 e1 ef ff ff       	call   c0004772 <list_append>
c0005791:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:143
   intr_set_status(old_status);
c0005794:	83 ec 0c             	sub    $0xc,%esp
c0005797:	ff 75 f0             	pushl  -0x10(%ebp)
c000579a:	e8 f7 c2 ff ff       	call   c0001a96 <intr_set_status>
c000579f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:144
}
c00057a2:	90                   	nop
c00057a3:	c9                   	leave  
c00057a4:	c3                   	ret    

c00057a5 <getpid>:
getpid():
/work/x86_os_my/lib/user/syscall.c:53
   );							       \
   retval;						       \
})

/* 返回当前任务pid */
uint32_t getpid() {
c00057a5:	55                   	push   %ebp
c00057a6:	89 e5                	mov    %esp,%ebp
c00057a8:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:54
	return _syscall0(SYS_GETPID);
c00057ab:	b8 00 00 00 00       	mov    $0x0,%eax
c00057b0:	cd 80                	int    $0x80
c00057b2:	89 45 fc             	mov    %eax,-0x4(%ebp)
c00057b5:	8b 45 fc             	mov    -0x4(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:55
}
c00057b8:	c9                   	leave  
c00057b9:	c3                   	ret    

c00057ba <write>:
write():
/work/x86_os_my/lib/user/syscall.c:58

/* 把buf中count个字符写入文件描述符fd */
uint32_t write(int32_t fd, const void* buf, uint32_t count) {
c00057ba:	55                   	push   %ebp
c00057bb:	89 e5                	mov    %esp,%ebp
c00057bd:	53                   	push   %ebx
c00057be:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:59
	return _syscall3(SYS_WRITE, fd, buf, count);
c00057c1:	b8 01 00 00 00       	mov    $0x1,%eax
c00057c6:	8b 5d 08             	mov    0x8(%ebp),%ebx
c00057c9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c00057cc:	8b 55 10             	mov    0x10(%ebp),%edx
c00057cf:	cd 80                	int    $0x80
c00057d1:	89 45 f8             	mov    %eax,-0x8(%ebp)
c00057d4:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:60
}
c00057d7:	83 c4 10             	add    $0x10,%esp
c00057da:	5b                   	pop    %ebx
c00057db:	5d                   	pop    %ebp
c00057dc:	c3                   	ret    

c00057dd <malloc>:
malloc():
/work/x86_os_my/lib/user/syscall.c:63

/* 申请size字节大小的内存,并返回结果 */
void* malloc(uint32_t size) {
c00057dd:	55                   	push   %ebp
c00057de:	89 e5                	mov    %esp,%ebp
c00057e0:	53                   	push   %ebx
c00057e1:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:64
	return (void*)_syscall1(SYS_MALLOC, size);
c00057e4:	b8 02 00 00 00       	mov    $0x2,%eax
c00057e9:	8b 55 08             	mov    0x8(%ebp),%edx
c00057ec:	89 d3                	mov    %edx,%ebx
c00057ee:	cd 80                	int    $0x80
c00057f0:	89 45 f8             	mov    %eax,-0x8(%ebp)
c00057f3:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:65
}
c00057f6:	83 c4 10             	add    $0x10,%esp
c00057f9:	5b                   	pop    %ebx
c00057fa:	5d                   	pop    %ebp
c00057fb:	c3                   	ret    

c00057fc <free>:
free():
/work/x86_os_my/lib/user/syscall.c:68

/* 释放ptr指向的内存 */
void free(void* ptr) {
c00057fc:	55                   	push   %ebp
c00057fd:	89 e5                	mov    %esp,%ebp
c00057ff:	53                   	push   %ebx
c0005800:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:69
	_syscall1(SYS_FREE, ptr);
c0005803:	b8 03 00 00 00       	mov    $0x3,%eax
c0005808:	8b 55 08             	mov    0x8(%ebp),%edx
c000580b:	89 d3                	mov    %edx,%ebx
c000580d:	cd 80                	int    $0x80
c000580f:	89 45 f8             	mov    %eax,-0x8(%ebp)
/work/x86_os_my/lib/user/syscall.c:70
}
c0005812:	90                   	nop
c0005813:	83 c4 10             	add    $0x10,%esp
c0005816:	5b                   	pop    %ebx
c0005817:	5d                   	pop    %ebp
c0005818:	c3                   	ret    

c0005819 <fork>:
fork():
/work/x86_os_my/lib/user/syscall.c:73

/* 派生子进程,返回子进程pid */
pid_t fork(void){
c0005819:	55                   	push   %ebp
c000581a:	89 e5                	mov    %esp,%ebp
c000581c:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:74
	return _syscall0(SYS_FORK);
c000581f:	b8 04 00 00 00       	mov    $0x4,%eax
c0005824:	cd 80                	int    $0x80
c0005826:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0005829:	8b 45 fc             	mov    -0x4(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:75
}
c000582c:	c9                   	leave  
c000582d:	c3                   	ret    

c000582e <read>:
read():
/work/x86_os_my/lib/user/syscall.c:78

/* 从文件描述符fd中读取count个字节到buf */
int32_t read(int32_t fd, void* buf, uint32_t count) {
c000582e:	55                   	push   %ebp
c000582f:	89 e5                	mov    %esp,%ebp
c0005831:	53                   	push   %ebx
c0005832:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:79
	return _syscall3(SYS_READ, fd, buf, count);
c0005835:	b8 05 00 00 00       	mov    $0x5,%eax
c000583a:	8b 5d 08             	mov    0x8(%ebp),%ebx
c000583d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0005840:	8b 55 10             	mov    0x10(%ebp),%edx
c0005843:	cd 80                	int    $0x80
c0005845:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0005848:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:80
}
c000584b:	83 c4 10             	add    $0x10,%esp
c000584e:	5b                   	pop    %ebx
c000584f:	5d                   	pop    %ebp
c0005850:	c3                   	ret    

c0005851 <putchar>:
putchar():
/work/x86_os_my/lib/user/syscall.c:83

/* 输出一个字符 */
void putchar(char char_asci) {
c0005851:	55                   	push   %ebp
c0005852:	89 e5                	mov    %esp,%ebp
c0005854:	53                   	push   %ebx
c0005855:	83 ec 14             	sub    $0x14,%esp
c0005858:	8b 45 08             	mov    0x8(%ebp),%eax
c000585b:	88 45 e8             	mov    %al,-0x18(%ebp)
/work/x86_os_my/lib/user/syscall.c:84
	_syscall1(SYS_PUTCHAR, char_asci);
c000585e:	b8 06 00 00 00       	mov    $0x6,%eax
c0005863:	0f b6 55 e8          	movzbl -0x18(%ebp),%edx
c0005867:	89 d3                	mov    %edx,%ebx
c0005869:	cd 80                	int    $0x80
c000586b:	89 45 f8             	mov    %eax,-0x8(%ebp)
/work/x86_os_my/lib/user/syscall.c:85
}
c000586e:	90                   	nop
c000586f:	83 c4 14             	add    $0x14,%esp
c0005872:	5b                   	pop    %ebx
c0005873:	5d                   	pop    %ebp
c0005874:	c3                   	ret    

c0005875 <clear>:
clear():
/work/x86_os_my/lib/user/syscall.c:88

/* 清空屏幕 */
void clear(void) {
c0005875:	55                   	push   %ebp
c0005876:	89 e5                	mov    %esp,%ebp
c0005878:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:89
	_syscall0(SYS_CLEAR);
c000587b:	b8 07 00 00 00       	mov    $0x7,%eax
c0005880:	cd 80                	int    $0x80
c0005882:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/user/syscall.c:90
}
c0005885:	90                   	nop
c0005886:	c9                   	leave  
c0005887:	c3                   	ret    

c0005888 <getcwd>:
getcwd():
/work/x86_os_my/lib/user/syscall.c:93

/* 获取当前工作目录 */
char* getcwd(char* buf, uint32_t size) {
c0005888:	55                   	push   %ebp
c0005889:	89 e5                	mov    %esp,%ebp
c000588b:	53                   	push   %ebx
c000588c:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:94
	return (char*)_syscall2(SYS_GETCWD, buf, size);
c000588f:	b8 08 00 00 00       	mov    $0x8,%eax
c0005894:	8b 55 08             	mov    0x8(%ebp),%edx
c0005897:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c000589a:	89 d3                	mov    %edx,%ebx
c000589c:	cd 80                	int    $0x80
c000589e:	89 45 f8             	mov    %eax,-0x8(%ebp)
c00058a1:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:95
}
c00058a4:	83 c4 10             	add    $0x10,%esp
c00058a7:	5b                   	pop    %ebx
c00058a8:	5d                   	pop    %ebp
c00058a9:	c3                   	ret    

c00058aa <open>:
open():
/work/x86_os_my/lib/user/syscall.c:98

/* 以flag方式打开文件pathname */
int32_t open(char* pathname, uint8_t flag) {
c00058aa:	55                   	push   %ebp
c00058ab:	89 e5                	mov    %esp,%ebp
c00058ad:	53                   	push   %ebx
c00058ae:	83 ec 14             	sub    $0x14,%esp
c00058b1:	8b 45 0c             	mov    0xc(%ebp),%eax
c00058b4:	88 45 e8             	mov    %al,-0x18(%ebp)
/work/x86_os_my/lib/user/syscall.c:99
	return _syscall2(SYS_OPEN, pathname, flag);
c00058b7:	b8 09 00 00 00       	mov    $0x9,%eax
c00058bc:	8b 55 08             	mov    0x8(%ebp),%edx
c00058bf:	0f b6 4d e8          	movzbl -0x18(%ebp),%ecx
c00058c3:	89 d3                	mov    %edx,%ebx
c00058c5:	cd 80                	int    $0x80
c00058c7:	89 45 f8             	mov    %eax,-0x8(%ebp)
c00058ca:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:100
}
c00058cd:	83 c4 14             	add    $0x14,%esp
c00058d0:	5b                   	pop    %ebx
c00058d1:	5d                   	pop    %ebp
c00058d2:	c3                   	ret    

c00058d3 <close>:
close():
/work/x86_os_my/lib/user/syscall.c:103

/* 关闭文件fd */
int32_t close(int32_t fd) {
c00058d3:	55                   	push   %ebp
c00058d4:	89 e5                	mov    %esp,%ebp
c00058d6:	53                   	push   %ebx
c00058d7:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:104
	return _syscall1(SYS_CLOSE, fd);
c00058da:	b8 0a 00 00 00       	mov    $0xa,%eax
c00058df:	8b 55 08             	mov    0x8(%ebp),%edx
c00058e2:	89 d3                	mov    %edx,%ebx
c00058e4:	cd 80                	int    $0x80
c00058e6:	89 45 f8             	mov    %eax,-0x8(%ebp)
c00058e9:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:105
}
c00058ec:	83 c4 10             	add    $0x10,%esp
c00058ef:	5b                   	pop    %ebx
c00058f0:	5d                   	pop    %ebp
c00058f1:	c3                   	ret    

c00058f2 <lseek>:
lseek():
/work/x86_os_my/lib/user/syscall.c:108

/* 设置文件偏移量 */
int32_t lseek(int32_t fd, int32_t offset, uint8_t whence) {
c00058f2:	55                   	push   %ebp
c00058f3:	89 e5                	mov    %esp,%ebp
c00058f5:	53                   	push   %ebx
c00058f6:	83 ec 14             	sub    $0x14,%esp
c00058f9:	8b 45 10             	mov    0x10(%ebp),%eax
c00058fc:	88 45 e8             	mov    %al,-0x18(%ebp)
/work/x86_os_my/lib/user/syscall.c:109
	return _syscall3(SYS_LSEEK, fd, offset, whence);
c00058ff:	b8 0b 00 00 00       	mov    $0xb,%eax
c0005904:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0005907:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c000590a:	0f b6 55 e8          	movzbl -0x18(%ebp),%edx
c000590e:	cd 80                	int    $0x80
c0005910:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0005913:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:110
}
c0005916:	83 c4 14             	add    $0x14,%esp
c0005919:	5b                   	pop    %ebx
c000591a:	5d                   	pop    %ebp
c000591b:	c3                   	ret    

c000591c <unlink>:
unlink():
/work/x86_os_my/lib/user/syscall.c:113

/* 删除文件pathname */
int32_t unlink(const char* pathname) {
c000591c:	55                   	push   %ebp
c000591d:	89 e5                	mov    %esp,%ebp
c000591f:	53                   	push   %ebx
c0005920:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:114
	return _syscall1(SYS_UNLINK, pathname);
c0005923:	b8 0c 00 00 00       	mov    $0xc,%eax
c0005928:	8b 55 08             	mov    0x8(%ebp),%edx
c000592b:	89 d3                	mov    %edx,%ebx
c000592d:	cd 80                	int    $0x80
c000592f:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0005932:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:115
}
c0005935:	83 c4 10             	add    $0x10,%esp
c0005938:	5b                   	pop    %ebx
c0005939:	5d                   	pop    %ebp
c000593a:	c3                   	ret    

c000593b <mkdir>:
mkdir():
/work/x86_os_my/lib/user/syscall.c:118

/* 创建目录pathname */
int32_t mkdir(const char* pathname) {
c000593b:	55                   	push   %ebp
c000593c:	89 e5                	mov    %esp,%ebp
c000593e:	53                   	push   %ebx
c000593f:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:119
	return _syscall1(SYS_MKDIR, pathname);
c0005942:	b8 0d 00 00 00       	mov    $0xd,%eax
c0005947:	8b 55 08             	mov    0x8(%ebp),%edx
c000594a:	89 d3                	mov    %edx,%ebx
c000594c:	cd 80                	int    $0x80
c000594e:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0005951:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:120
}
c0005954:	83 c4 10             	add    $0x10,%esp
c0005957:	5b                   	pop    %ebx
c0005958:	5d                   	pop    %ebp
c0005959:	c3                   	ret    

c000595a <opendir>:
opendir():
/work/x86_os_my/lib/user/syscall.c:123

/* 打开目录name */
struct dir* opendir(const char* name) {
c000595a:	55                   	push   %ebp
c000595b:	89 e5                	mov    %esp,%ebp
c000595d:	53                   	push   %ebx
c000595e:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:124
	return (struct dir*)_syscall1(SYS_OPENDIR, name);
c0005961:	b8 0e 00 00 00       	mov    $0xe,%eax
c0005966:	8b 55 08             	mov    0x8(%ebp),%edx
c0005969:	89 d3                	mov    %edx,%ebx
c000596b:	cd 80                	int    $0x80
c000596d:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0005970:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:125
}
c0005973:	83 c4 10             	add    $0x10,%esp
c0005976:	5b                   	pop    %ebx
c0005977:	5d                   	pop    %ebp
c0005978:	c3                   	ret    

c0005979 <closedir>:
closedir():
/work/x86_os_my/lib/user/syscall.c:128

/* 关闭目录dir */
int32_t closedir(struct dir* dir) {
c0005979:	55                   	push   %ebp
c000597a:	89 e5                	mov    %esp,%ebp
c000597c:	53                   	push   %ebx
c000597d:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:129
	return _syscall1(SYS_CLOSEDIR, dir);
c0005980:	b8 0f 00 00 00       	mov    $0xf,%eax
c0005985:	8b 55 08             	mov    0x8(%ebp),%edx
c0005988:	89 d3                	mov    %edx,%ebx
c000598a:	cd 80                	int    $0x80
c000598c:	89 45 f8             	mov    %eax,-0x8(%ebp)
c000598f:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:130
}
c0005992:	83 c4 10             	add    $0x10,%esp
c0005995:	5b                   	pop    %ebx
c0005996:	5d                   	pop    %ebp
c0005997:	c3                   	ret    

c0005998 <rmdir>:
rmdir():
/work/x86_os_my/lib/user/syscall.c:133

/* 删除目录pathname */
int32_t rmdir(const char* pathname) {
c0005998:	55                   	push   %ebp
c0005999:	89 e5                	mov    %esp,%ebp
c000599b:	53                   	push   %ebx
c000599c:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:134
	return _syscall1(SYS_RMDIR, pathname);
c000599f:	b8 11 00 00 00       	mov    $0x11,%eax
c00059a4:	8b 55 08             	mov    0x8(%ebp),%edx
c00059a7:	89 d3                	mov    %edx,%ebx
c00059a9:	cd 80                	int    $0x80
c00059ab:	89 45 f8             	mov    %eax,-0x8(%ebp)
c00059ae:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:135
}
c00059b1:	83 c4 10             	add    $0x10,%esp
c00059b4:	5b                   	pop    %ebx
c00059b5:	5d                   	pop    %ebp
c00059b6:	c3                   	ret    

c00059b7 <readdir>:
readdir():
/work/x86_os_my/lib/user/syscall.c:138

/* 读取目录dir */
struct dir_entry* readdir(struct dir* dir) {
c00059b7:	55                   	push   %ebp
c00059b8:	89 e5                	mov    %esp,%ebp
c00059ba:	53                   	push   %ebx
c00059bb:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:139
	return (struct dir_entry*)_syscall1(SYS_READDIR, dir);
c00059be:	b8 12 00 00 00       	mov    $0x12,%eax
c00059c3:	8b 55 08             	mov    0x8(%ebp),%edx
c00059c6:	89 d3                	mov    %edx,%ebx
c00059c8:	cd 80                	int    $0x80
c00059ca:	89 45 f8             	mov    %eax,-0x8(%ebp)
c00059cd:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:140
}
c00059d0:	83 c4 10             	add    $0x10,%esp
c00059d3:	5b                   	pop    %ebx
c00059d4:	5d                   	pop    %ebp
c00059d5:	c3                   	ret    

c00059d6 <rewinddir>:
rewinddir():
/work/x86_os_my/lib/user/syscall.c:143

/* 回归目录指针 */
void rewinddir(struct dir* dir) {
c00059d6:	55                   	push   %ebp
c00059d7:	89 e5                	mov    %esp,%ebp
c00059d9:	53                   	push   %ebx
c00059da:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:144
	_syscall1(SYS_REWINDDIR, dir);
c00059dd:	b8 13 00 00 00       	mov    $0x13,%eax
c00059e2:	8b 55 08             	mov    0x8(%ebp),%edx
c00059e5:	89 d3                	mov    %edx,%ebx
c00059e7:	cd 80                	int    $0x80
c00059e9:	89 45 f8             	mov    %eax,-0x8(%ebp)
/work/x86_os_my/lib/user/syscall.c:145
}
c00059ec:	90                   	nop
c00059ed:	83 c4 10             	add    $0x10,%esp
c00059f0:	5b                   	pop    %ebx
c00059f1:	5d                   	pop    %ebp
c00059f2:	c3                   	ret    

c00059f3 <stat>:
stat():
/work/x86_os_my/lib/user/syscall.c:148

/* 获取path属性到buf中 */
int32_t stat(const char* path, struct stat* buf) {
c00059f3:	55                   	push   %ebp
c00059f4:	89 e5                	mov    %esp,%ebp
c00059f6:	53                   	push   %ebx
c00059f7:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:149
	return _syscall2(SYS_STAT, path, buf);
c00059fa:	b8 14 00 00 00       	mov    $0x14,%eax
c00059ff:	8b 55 08             	mov    0x8(%ebp),%edx
c0005a02:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0005a05:	89 d3                	mov    %edx,%ebx
c0005a07:	cd 80                	int    $0x80
c0005a09:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0005a0c:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:150
}
c0005a0f:	83 c4 10             	add    $0x10,%esp
c0005a12:	5b                   	pop    %ebx
c0005a13:	5d                   	pop    %ebp
c0005a14:	c3                   	ret    

c0005a15 <chdir>:
chdir():
/work/x86_os_my/lib/user/syscall.c:153

/* 改变工作目录为path */
int32_t chdir(const char* path) {
c0005a15:	55                   	push   %ebp
c0005a16:	89 e5                	mov    %esp,%ebp
c0005a18:	53                   	push   %ebx
c0005a19:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:154
	return _syscall1(SYS_CHDIR, path);
c0005a1c:	b8 10 00 00 00       	mov    $0x10,%eax
c0005a21:	8b 55 08             	mov    0x8(%ebp),%edx
c0005a24:	89 d3                	mov    %edx,%ebx
c0005a26:	cd 80                	int    $0x80
c0005a28:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0005a2b:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:155
}
c0005a2e:	83 c4 10             	add    $0x10,%esp
c0005a31:	5b                   	pop    %ebx
c0005a32:	5d                   	pop    %ebp
c0005a33:	c3                   	ret    

c0005a34 <ps>:
ps():
/work/x86_os_my/lib/user/syscall.c:158

/* 显示任务列表 */
void ps(void) {
c0005a34:	55                   	push   %ebp
c0005a35:	89 e5                	mov    %esp,%ebp
c0005a37:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:159
	_syscall0(SYS_PS);
c0005a3a:	b8 15 00 00 00       	mov    $0x15,%eax
c0005a3f:	cd 80                	int    $0x80
c0005a41:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/user/syscall.c:160
}
c0005a44:	90                   	nop
c0005a45:	c9                   	leave  
c0005a46:	c3                   	ret    

c0005a47 <execv>:
execv():
/work/x86_os_my/lib/user/syscall.c:162

int execv(const char* pathname, char** argv) {
c0005a47:	55                   	push   %ebp
c0005a48:	89 e5                	mov    %esp,%ebp
c0005a4a:	53                   	push   %ebx
c0005a4b:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:163
	return _syscall2(SYS_EXECV, pathname, argv);
c0005a4e:	b8 16 00 00 00       	mov    $0x16,%eax
c0005a53:	8b 55 08             	mov    0x8(%ebp),%edx
c0005a56:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0005a59:	89 d3                	mov    %edx,%ebx
c0005a5b:	cd 80                	int    $0x80
c0005a5d:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0005a60:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:164
}
c0005a63:	83 c4 10             	add    $0x10,%esp
c0005a66:	5b                   	pop    %ebx
c0005a67:	5d                   	pop    %ebp
c0005a68:	c3                   	ret    

c0005a69 <sys_getpid>:
sys_getpid():
/work/x86_os_my/userprog/syscall-init.c:18
#define syscall_nr 32 
typedef void* syscall;
syscall syscall_table[syscall_nr];

/* 返回当前任务的pid */
uint32_t sys_getpid(void) {
c0005a69:	55                   	push   %ebp
c0005a6a:	89 e5                	mov    %esp,%ebp
c0005a6c:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/userprog/syscall-init.c:19
	return running_thread()->pid;
c0005a6f:	e8 66 e2 ff ff       	call   c0003cda <running_thread>
c0005a74:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0005a78:	98                   	cwtl   
/work/x86_os_my/userprog/syscall-init.c:20
}
c0005a79:	c9                   	leave  
c0005a7a:	c3                   	ret    

c0005a7b <syscall_init>:
syscall_init():
/work/x86_os_my/userprog/syscall-init.c:23

/* 初始化系统调用 */
void syscall_init(void) {
c0005a7b:	55                   	push   %ebp
c0005a7c:	89 e5                	mov    %esp,%ebp
c0005a7e:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/userprog/syscall-init.c:24
	put_str("syscall_init start\n");
c0005a81:	83 ec 0c             	sub    $0xc,%esp
c0005a84:	68 78 d9 00 c0       	push   $0xc000d978
c0005a89:	e8 12 c8 ff ff       	call   c00022a0 <put_str>
c0005a8e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/syscall-init.c:25
	syscall_table[SYS_GETPID]	= sys_getpid;
c0005a91:	c7 05 a0 22 01 c0 69 	movl   $0xc0005a69,0xc00122a0
c0005a98:	5a 00 c0 
/work/x86_os_my/userprog/syscall-init.c:26
	syscall_table[SYS_WRITE]	= sys_write;
c0005a9b:	c7 05 a4 22 01 c0 d5 	movl   $0xc00078d5,0xc00122a4
c0005aa2:	78 00 c0 
/work/x86_os_my/userprog/syscall-init.c:27
	syscall_table[SYS_MALLOC]	= sys_malloc;
c0005aa5:	c7 05 a8 22 01 c0 fc 	movl   $0xc0002dfc,0xc00122a8
c0005aac:	2d 00 c0 
/work/x86_os_my/userprog/syscall-init.c:28
	syscall_table[SYS_FREE]		= sys_free;
c0005aaf:	c7 05 ac 22 01 c0 29 	movl   $0xc0003429,0xc00122ac
c0005ab6:	34 00 c0 
/work/x86_os_my/userprog/syscall-init.c:29
	syscall_table[SYS_FORK]		= sys_fork;
c0005ab9:	c7 05 b0 22 01 c0 c1 	movl   $0xc000b6c1,0xc00122b0
c0005ac0:	b6 00 c0 
/work/x86_os_my/userprog/syscall-init.c:30
	syscall_table[SYS_READ]		= sys_read;
c0005ac3:	c7 05 b4 22 01 c0 be 	movl   $0xc00079be,0xc00122b4
c0005aca:	79 00 c0 
/work/x86_os_my/userprog/syscall-init.c:31
	syscall_table[SYS_PUTCHAR]	= sys_putchar;
c0005acd:	c7 05 b8 22 01 c0 5c 	movl   $0xc0008a5c,0xc00122b8
c0005ad4:	8a 00 c0 
/work/x86_os_my/userprog/syscall-init.c:32
	syscall_table[SYS_CLEAR]	= cls_screen;
c0005ad7:	c7 05 bc 22 01 c0 8b 	movl   $0xc000238b,0xc00122bc
c0005ade:	23 00 c0 
/work/x86_os_my/userprog/syscall-init.c:33
	syscall_table[SYS_GETCWD]	= sys_getcwd;
c0005ae1:	c7 05 c0 22 01 c0 af 	movl   $0xc00086af,0xc00122c0
c0005ae8:	86 00 c0 
/work/x86_os_my/userprog/syscall-init.c:34
	syscall_table[SYS_OPEN]		= sys_open;
c0005aeb:	c7 05 c4 22 01 c0 c9 	movl   $0xc00075c9,0xc00122c4
c0005af2:	75 00 c0 
/work/x86_os_my/userprog/syscall-init.c:35
	syscall_table[SYS_CLOSE]	= sys_close;
c0005af5:	c7 05 c8 22 01 c0 76 	movl   $0xc0007876,0xc00122c8
c0005afc:	78 00 c0 
/work/x86_os_my/userprog/syscall-init.c:36
	syscall_table[SYS_LSEEK]	= sys_lseek;
c0005aff:	c7 05 cc 22 01 c0 a2 	movl   $0xc0007aa2,0xc00122cc
c0005b06:	7a 00 c0 
/work/x86_os_my/userprog/syscall-init.c:37
	syscall_table[SYS_UNLINK]	= sys_unlink;
c0005b09:	c7 05 d0 22 01 c0 8d 	movl   $0xc0007b8d,0xc00122d0
c0005b10:	7b 00 c0 
/work/x86_os_my/userprog/syscall-init.c:38
	syscall_table[SYS_MKDIR]	= sys_mkdir;
c0005b13:	c7 05 d4 22 01 c0 b0 	movl   $0xc0007db0,0xc00122d4
c0005b1a:	7d 00 c0 
/work/x86_os_my/userprog/syscall-init.c:39
	syscall_table[SYS_OPENDIR]	= sys_opendir;
c0005b1d:	c7 05 d8 22 01 c0 a0 	movl   $0xc00081a0,0xc00122d8
c0005b24:	81 00 c0 
/work/x86_os_my/userprog/syscall-init.c:40
	syscall_table[SYS_CLOSEDIR]	= sys_closedir;
c0005b27:	c7 05 dc 22 01 c0 b0 	movl   $0xc00082b0,0xc00122dc
c0005b2e:	82 00 c0 
/work/x86_os_my/userprog/syscall-init.c:41
	syscall_table[SYS_CHDIR]	= sys_chdir;
c0005b31:	c7 05 e0 22 01 c0 a3 	movl   $0xc00088a3,0xc00122e0
c0005b38:	88 00 c0 
/work/x86_os_my/userprog/syscall-init.c:42
	syscall_table[SYS_RMDIR]	= sys_rmdir;
c0005b3b:	c7 05 e4 22 01 c0 25 	movl   $0xc0008325,0xc00122e4
c0005b42:	83 00 c0 
/work/x86_os_my/userprog/syscall-init.c:43
	syscall_table[SYS_READDIR]	= sys_readdir;
c0005b45:	c7 05 e8 22 01 c0 dd 	movl   $0xc00082dd,0xc00122e8
c0005b4c:	82 00 c0 
/work/x86_os_my/userprog/syscall-init.c:44
	syscall_table[SYS_REWINDDIR]	= sys_rewinddir;
c0005b4f:	c7 05 ec 22 01 c0 15 	movl   $0xc0008315,0xc00122ec
c0005b56:	83 00 c0 
/work/x86_os_my/userprog/syscall-init.c:45
	syscall_table[SYS_STAT]		= sys_stat;
c0005b59:	c7 05 f0 22 01 c0 32 	movl   $0xc0008932,0xc00122f0
c0005b60:	89 00 c0 
/work/x86_os_my/userprog/syscall-init.c:46
	syscall_table[SYS_PS]		= sys_ps;
c0005b63:	c7 05 f4 22 01 c0 0d 	movl   $0xc000460d,0xc00122f4
c0005b6a:	46 00 c0 
/work/x86_os_my/userprog/syscall-init.c:47
	syscall_table[SYS_EXECV]	= sys_execv;
c0005b6d:	c7 05 f8 22 01 c0 d1 	movl   $0xc000c8d1,0xc00122f8
c0005b74:	c8 00 c0 
/work/x86_os_my/userprog/syscall-init.c:48
	put_str("syscall_init done\n");
c0005b77:	83 ec 0c             	sub    $0xc,%esp
c0005b7a:	68 8c d9 00 c0       	push   $0xc000d98c
c0005b7f:	e8 1c c7 ff ff       	call   c00022a0 <put_str>
c0005b84:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/syscall-init.c:49
}
c0005b87:	90                   	nop
c0005b88:	c9                   	leave  
c0005b89:	c3                   	ret    

c0005b8a <itoa>:
itoa():
/work/x86_os_my/lib/stdio.c:13
#define va_start(ap, v) ap = (va_list)&v	// 把ap指向第一个固定参数v
#define va_arg(ap, t) *((t*)(ap += 4))		// ap指向下一个参数并返回其值
#define va_end(ap) ap = NULL				// 清除ap

/* 将整型转换成字符(integer to ascii) */
static void itoa(uint32_t value, char** buf_ptr_addr, uint8_t base) {
c0005b8a:	55                   	push   %ebp
c0005b8b:	89 e5                	mov    %esp,%ebp
c0005b8d:	83 ec 28             	sub    $0x28,%esp
c0005b90:	8b 45 10             	mov    0x10(%ebp),%eax
c0005b93:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/lib/stdio.c:14
	uint32_t m = value % base;	// 求模,最先掉下来的是最低位【比如base是16代表16进制】 
c0005b96:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
c0005b9a:	8b 45 08             	mov    0x8(%ebp),%eax
c0005b9d:	ba 00 00 00 00       	mov    $0x0,%edx
c0005ba2:	f7 f1                	div    %ecx
c0005ba4:	89 55 f4             	mov    %edx,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:15
	uint32_t i = value / base;	// 取整
c0005ba7:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
c0005bab:	8b 45 08             	mov    0x8(%ebp),%eax
c0005bae:	ba 00 00 00 00       	mov    $0x0,%edx
c0005bb3:	f7 f1                	div    %ecx
c0005bb5:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/stdio.c:16
	if (i) {
c0005bb8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0005bbc:	74 16                	je     c0005bd4 <itoa+0x4a>
/work/x86_os_my/lib/stdio.c:17
		itoa(i, buf_ptr_addr, base);	// 如果倍数不为0则递归调用。
c0005bbe:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0005bc2:	83 ec 04             	sub    $0x4,%esp
c0005bc5:	50                   	push   %eax
c0005bc6:	ff 75 0c             	pushl  0xc(%ebp)
c0005bc9:	ff 75 f0             	pushl  -0x10(%ebp)
c0005bcc:	e8 b9 ff ff ff       	call   c0005b8a <itoa>
c0005bd1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:19
	}
	if (m < 10) {	// 如果余数是0~9
c0005bd4:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
c0005bd8:	77 17                	ja     c0005bf1 <itoa+0x67>
/work/x86_os_my/lib/stdio.c:20
		*((*buf_ptr_addr)++) = m + '0';			// 将数字0~9转换为字符'0'~'9'
c0005bda:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005bdd:	8b 00                	mov    (%eax),%eax
c0005bdf:	8d 48 01             	lea    0x1(%eax),%ecx
c0005be2:	8b 55 0c             	mov    0xc(%ebp),%edx
c0005be5:	89 0a                	mov    %ecx,(%edx)
c0005be7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0005bea:	83 c2 30             	add    $0x30,%edx
c0005bed:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/stdio.c:24
	} else {		// 否则余数是A~F
		*((*buf_ptr_addr)++) = m - 10 + 'A';	// 将数字A~F转换为字符'A'~'F'
	}
}
c0005bef:	eb 15                	jmp    c0005c06 <itoa+0x7c>
/work/x86_os_my/lib/stdio.c:22
		itoa(i, buf_ptr_addr, base);	// 如果倍数不为0则递归调用。
	}
	if (m < 10) {	// 如果余数是0~9
		*((*buf_ptr_addr)++) = m + '0';			// 将数字0~9转换为字符'0'~'9'
	} else {		// 否则余数是A~F
		*((*buf_ptr_addr)++) = m - 10 + 'A';	// 将数字A~F转换为字符'A'~'F'
c0005bf1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005bf4:	8b 00                	mov    (%eax),%eax
c0005bf6:	8d 48 01             	lea    0x1(%eax),%ecx
c0005bf9:	8b 55 0c             	mov    0xc(%ebp),%edx
c0005bfc:	89 0a                	mov    %ecx,(%edx)
c0005bfe:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0005c01:	83 c2 37             	add    $0x37,%edx
c0005c04:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/stdio.c:24
	}
}
c0005c06:	90                   	nop
c0005c07:	c9                   	leave  
c0005c08:	c3                   	ret    

c0005c09 <vsprintf>:
vsprintf():
/work/x86_os_my/lib/stdio.c:27

/* 将参数ap按照格式format输出到字符串str,并返回替换后str长度 */
uint32_t vsprintf(char* str, const char* format, va_list ap) {
c0005c09:	55                   	push   %ebp
c0005c0a:	89 e5                	mov    %esp,%ebp
c0005c0c:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/lib/stdio.c:28
	char* buf_ptr = str;
c0005c0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0005c12:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/lib/stdio.c:29
	const char* index_ptr = format;
c0005c15:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005c18:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:30
	char index_char = *index_ptr;
c0005c1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005c1e:	0f b6 00             	movzbl (%eax),%eax
c0005c21:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:33
	int32_t arg_int;
	char* arg_str;
	while(index_char) {
c0005c24:	e9 43 01 00 00       	jmp    c0005d6c <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:34
		if (index_char != '%') {
c0005c29:	80 7d f3 25          	cmpb   $0x25,-0xd(%ebp)
c0005c2d:	74 21                	je     c0005c50 <vsprintf+0x47>
/work/x86_os_my/lib/stdio.c:35
			*(buf_ptr++) = index_char;
c0005c2f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0005c32:	8d 50 01             	lea    0x1(%eax),%edx
c0005c35:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0005c38:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
c0005c3c:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/stdio.c:36
			index_char = *(++index_ptr);
c0005c3e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0005c42:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005c45:	0f b6 00             	movzbl (%eax),%eax
c0005c48:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:37
			continue;
c0005c4b:	e9 1c 01 00 00       	jmp    c0005d6c <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:39
		}
		index_char = *(++index_ptr);	 // 得到%后面的字符
c0005c50:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0005c54:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005c57:	0f b6 00             	movzbl (%eax),%eax
c0005c5a:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:40
		switch(index_char) {
c0005c5d:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c0005c61:	83 f8 64             	cmp    $0x64,%eax
c0005c64:	0f 84 8e 00 00 00    	je     c0005cf8 <vsprintf+0xef>
c0005c6a:	83 f8 64             	cmp    $0x64,%eax
c0005c6d:	7f 0a                	jg     c0005c79 <vsprintf+0x70>
c0005c6f:	83 f8 63             	cmp    $0x63,%eax
c0005c72:	74 60                	je     c0005cd4 <vsprintf+0xcb>
c0005c74:	e9 f3 00 00 00       	jmp    c0005d6c <vsprintf+0x163>
c0005c79:	83 f8 73             	cmp    $0x73,%eax
c0005c7c:	74 0e                	je     c0005c8c <vsprintf+0x83>
c0005c7e:	83 f8 78             	cmp    $0x78,%eax
c0005c81:	0f 84 b6 00 00 00    	je     c0005d3d <vsprintf+0x134>
c0005c87:	e9 e0 00 00 00       	jmp    c0005d6c <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:42
			case 's':
			arg_str = va_arg(ap, char*);
c0005c8c:	83 45 10 04          	addl   $0x4,0x10(%ebp)
c0005c90:	8b 45 10             	mov    0x10(%ebp),%eax
c0005c93:	8b 00                	mov    (%eax),%eax
c0005c95:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/lib/stdio.c:43
			strcpy(buf_ptr, arg_str);
c0005c98:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0005c9b:	83 ec 08             	sub    $0x8,%esp
c0005c9e:	ff 75 e8             	pushl  -0x18(%ebp)
c0005ca1:	50                   	push   %eax
c0005ca2:	e8 81 dd ff ff       	call   c0003a28 <strcpy>
c0005ca7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:44
			buf_ptr += strlen(arg_str);
c0005caa:	83 ec 0c             	sub    $0xc,%esp
c0005cad:	ff 75 e8             	pushl  -0x18(%ebp)
c0005cb0:	e8 c8 dd ff ff       	call   c0003a7d <strlen>
c0005cb5:	83 c4 10             	add    $0x10,%esp
c0005cb8:	89 c2                	mov    %eax,%edx
c0005cba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0005cbd:	01 d0                	add    %edx,%eax
c0005cbf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/lib/stdio.c:45
			index_char = *(++index_ptr);
c0005cc2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0005cc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005cc9:	0f b6 00             	movzbl (%eax),%eax
c0005ccc:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:46
			break;
c0005ccf:	e9 98 00 00 00       	jmp    c0005d6c <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:49

			case 'c':
			*(buf_ptr++) = va_arg(ap, char);
c0005cd4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0005cd7:	8d 50 01             	lea    0x1(%eax),%edx
c0005cda:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0005cdd:	83 45 10 04          	addl   $0x4,0x10(%ebp)
c0005ce1:	8b 55 10             	mov    0x10(%ebp),%edx
c0005ce4:	0f b6 12             	movzbl (%edx),%edx
c0005ce7:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/stdio.c:50
			index_char = *(++index_ptr);
c0005ce9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0005ced:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005cf0:	0f b6 00             	movzbl (%eax),%eax
c0005cf3:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:51
			break;
c0005cf6:	eb 74                	jmp    c0005d6c <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:54

			case 'd':
			arg_int = va_arg(ap, int);
c0005cf8:	83 45 10 04          	addl   $0x4,0x10(%ebp)
c0005cfc:	8b 45 10             	mov    0x10(%ebp),%eax
c0005cff:	8b 00                	mov    (%eax),%eax
c0005d01:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/lib/stdio.c:56
			/* 若是负数, 将其转为正数后,再正数前面输出个负号'-'. */
			if (arg_int < 0) {
c0005d04:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0005d08:	79 0f                	jns    c0005d19 <vsprintf+0x110>
/work/x86_os_my/lib/stdio.c:57
				arg_int = 0 - arg_int;
c0005d0a:	f7 5d ec             	negl   -0x14(%ebp)
/work/x86_os_my/lib/stdio.c:58
				*buf_ptr++ = '-';
c0005d0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0005d10:	8d 50 01             	lea    0x1(%eax),%edx
c0005d13:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0005d16:	c6 00 2d             	movb   $0x2d,(%eax)
/work/x86_os_my/lib/stdio.c:60
			}
			itoa(arg_int, &buf_ptr, 10); 
c0005d19:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005d1c:	83 ec 04             	sub    $0x4,%esp
c0005d1f:	6a 0a                	push   $0xa
c0005d21:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0005d24:	52                   	push   %edx
c0005d25:	50                   	push   %eax
c0005d26:	e8 5f fe ff ff       	call   c0005b8a <itoa>
c0005d2b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:61
			index_char = *(++index_ptr);
c0005d2e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0005d32:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005d35:	0f b6 00             	movzbl (%eax),%eax
c0005d38:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:62
			break;
c0005d3b:	eb 2f                	jmp    c0005d6c <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:65

			case 'x':
			arg_int = va_arg(ap, int);
c0005d3d:	83 45 10 04          	addl   $0x4,0x10(%ebp)
c0005d41:	8b 45 10             	mov    0x10(%ebp),%eax
c0005d44:	8b 00                	mov    (%eax),%eax
c0005d46:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/lib/stdio.c:66
			itoa(arg_int, &buf_ptr, 16); 
c0005d49:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005d4c:	83 ec 04             	sub    $0x4,%esp
c0005d4f:	6a 10                	push   $0x10
c0005d51:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0005d54:	52                   	push   %edx
c0005d55:	50                   	push   %eax
c0005d56:	e8 2f fe ff ff       	call   c0005b8a <itoa>
c0005d5b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:67
			index_char = *(++index_ptr); // 跳过格式字符并更新index_char
c0005d5e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0005d62:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005d65:	0f b6 00             	movzbl (%eax),%eax
c0005d68:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:68
			break;
c0005d6b:	90                   	nop
/work/x86_os_my/lib/stdio.c:33
	char* buf_ptr = str;
	const char* index_ptr = format;
	char index_char = *index_ptr;
	int32_t arg_int;
	char* arg_str;
	while(index_char) {
c0005d6c:	80 7d f3 00          	cmpb   $0x0,-0xd(%ebp)
c0005d70:	0f 85 b3 fe ff ff    	jne    c0005c29 <vsprintf+0x20>
/work/x86_os_my/lib/stdio.c:71
			itoa(arg_int, &buf_ptr, 16); 
			index_char = *(++index_ptr); // 跳过格式字符并更新index_char
			break;
		}
	}
	return strlen(str);
c0005d76:	83 ec 0c             	sub    $0xc,%esp
c0005d79:	ff 75 08             	pushl  0x8(%ebp)
c0005d7c:	e8 fc dc ff ff       	call   c0003a7d <strlen>
c0005d81:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:72
}
c0005d84:	c9                   	leave  
c0005d85:	c3                   	ret    

c0005d86 <sprintf>:
sprintf():
/work/x86_os_my/lib/stdio.c:75

/* 同printf不同的地方就是字符串不是写到终端,而是写到buf中 */
uint32_t sprintf(char* buf, const char* format, ...) {
c0005d86:	55                   	push   %ebp
c0005d87:	89 e5                	mov    %esp,%ebp
c0005d89:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/stdio.c:78
	va_list args;
	uint32_t retval;
	va_start(args, format);
c0005d8c:	8d 45 0c             	lea    0xc(%ebp),%eax
c0005d8f:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:79
	retval = vsprintf(buf, format, args);
c0005d92:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005d95:	83 ec 04             	sub    $0x4,%esp
c0005d98:	ff 75 f4             	pushl  -0xc(%ebp)
c0005d9b:	50                   	push   %eax
c0005d9c:	ff 75 08             	pushl  0x8(%ebp)
c0005d9f:	e8 65 fe ff ff       	call   c0005c09 <vsprintf>
c0005da4:	83 c4 10             	add    $0x10,%esp
c0005da7:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/stdio.c:80
	va_end(args);
c0005daa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:81
	return retval;
c0005db1:	8b 45 f0             	mov    -0x10(%ebp),%eax
/work/x86_os_my/lib/stdio.c:82
}
c0005db4:	c9                   	leave  
c0005db5:	c3                   	ret    

c0005db6 <printf>:
printf():
/work/x86_os_my/lib/stdio.c:85

/* 格式化输出字符串format */
uint32_t printf(const char* format, ...) {
c0005db6:	55                   	push   %ebp
c0005db7:	89 e5                	mov    %esp,%ebp
c0005db9:	57                   	push   %edi
c0005dba:	81 ec 14 04 00 00    	sub    $0x414,%esp
/work/x86_os_my/lib/stdio.c:87
	va_list args;
	va_start(args, format);	       // 使args指向format
c0005dc0:	8d 45 08             	lea    0x8(%ebp),%eax
c0005dc3:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:88
	char buf[1024] = {0};	       // 用于存储拼接后的字符串
c0005dc6:	8d 95 f4 fb ff ff    	lea    -0x40c(%ebp),%edx
c0005dcc:	b8 00 00 00 00       	mov    $0x0,%eax
c0005dd1:	b9 00 01 00 00       	mov    $0x100,%ecx
c0005dd6:	89 d7                	mov    %edx,%edi
c0005dd8:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/lib/stdio.c:89
	vsprintf(buf, format, args);
c0005dda:	8b 45 08             	mov    0x8(%ebp),%eax
c0005ddd:	83 ec 04             	sub    $0x4,%esp
c0005de0:	ff 75 f4             	pushl  -0xc(%ebp)
c0005de3:	50                   	push   %eax
c0005de4:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c0005dea:	50                   	push   %eax
c0005deb:	e8 19 fe ff ff       	call   c0005c09 <vsprintf>
c0005df0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:90
	va_end(args);
c0005df3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:91
	return write(1, buf, strlen(buf));
c0005dfa:	83 ec 0c             	sub    $0xc,%esp
c0005dfd:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c0005e03:	50                   	push   %eax
c0005e04:	e8 74 dc ff ff       	call   c0003a7d <strlen>
c0005e09:	83 c4 10             	add    $0x10,%esp
c0005e0c:	83 ec 04             	sub    $0x4,%esp
c0005e0f:	50                   	push   %eax
c0005e10:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c0005e16:	50                   	push   %eax
c0005e17:	6a 01                	push   $0x1
c0005e19:	e8 9c f9 ff ff       	call   c00057ba <write>
c0005e1e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:92
}
c0005e21:	8b 7d fc             	mov    -0x4(%ebp),%edi
c0005e24:	c9                   	leave  
c0005e25:	c3                   	ret    

c0005e26 <outb>:
outb():
/work/x86_os_my/lib/kernel/io.h:17
#define __LIB_IO_H
#include "stdint.h"
//inline省去了函数调用开支

/* 向端口port写入一个字节*/
static inline void outb(uint16_t port, uint8_t data) {
c0005e26:	55                   	push   %ebp
c0005e27:	89 e5                	mov    %esp,%ebp
c0005e29:	83 ec 08             	sub    $0x8,%esp
c0005e2c:	8b 55 08             	mov    0x8(%ebp),%edx
c0005e2f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005e32:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c0005e36:	88 45 f8             	mov    %al,-0x8(%ebp)
/work/x86_os_my/lib/kernel/io.h:21
/*********************************************************
 a表示用寄存器al或ax或eax,对端口指定N表示0~255, d表示用dx存储端口号, 
 %b0表示对应al,%w1表示对应dx */ 
   asm volatile ( "outb %b0, %w1" : : "a" (data), "Nd" (port));    
c0005e39:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c0005e3d:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0005e41:	ee                   	out    %al,(%dx)
/work/x86_os_my/lib/kernel/io.h:23
/******************************************************/
}
c0005e42:	90                   	nop
c0005e43:	c9                   	leave  
c0005e44:	c3                   	ret    

c0005e45 <outsw>:
outsw():
/work/x86_os_my/lib/kernel/io.h:26

/* 将addr处起始的word_cnt个字写入端口port */
static inline void outsw(uint16_t port, const void* addr, uint32_t word_cnt) {
c0005e45:	55                   	push   %ebp
c0005e46:	89 e5                	mov    %esp,%ebp
c0005e48:	56                   	push   %esi
c0005e49:	53                   	push   %ebx
c0005e4a:	83 ec 04             	sub    $0x4,%esp
c0005e4d:	8b 45 08             	mov    0x8(%ebp),%eax
c0005e50:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/io.h:31
/*********************************************************
   +表示此限制即做输入又做输出.
   outsw是把ds:esi处的16位的内容写入port端口, 我们在设置段描述符时, 
   已经将ds,es,ss段的选择子都设置为相同的值了,此时不用担心数据错乱。*/
   asm volatile ("cld; rep outsw" : "+S" (addr), "+c" (word_cnt) : "d" (port));
c0005e54:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c0005e58:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0005e5b:	8b 45 10             	mov    0x10(%ebp),%eax
c0005e5e:	89 cb                	mov    %ecx,%ebx
c0005e60:	89 de                	mov    %ebx,%esi
c0005e62:	89 c1                	mov    %eax,%ecx
c0005e64:	fc                   	cld    
c0005e65:	66 f3 6f             	rep outsw %ds:(%esi),(%dx)
c0005e68:	89 c8                	mov    %ecx,%eax
c0005e6a:	89 f3                	mov    %esi,%ebx
c0005e6c:	89 5d 0c             	mov    %ebx,0xc(%ebp)
c0005e6f:	89 45 10             	mov    %eax,0x10(%ebp)
/work/x86_os_my/lib/kernel/io.h:33
/******************************************************/
}
c0005e72:	90                   	nop
c0005e73:	83 c4 04             	add    $0x4,%esp
c0005e76:	5b                   	pop    %ebx
c0005e77:	5e                   	pop    %esi
c0005e78:	5d                   	pop    %ebp
c0005e79:	c3                   	ret    

c0005e7a <inb>:
inb():
/work/x86_os_my/lib/kernel/io.h:36

/* 将从端口port读入的一个字节返回 */
static inline uint8_t inb(uint16_t port) {
c0005e7a:	55                   	push   %ebp
c0005e7b:	89 e5                	mov    %esp,%ebp
c0005e7d:	83 ec 14             	sub    $0x14,%esp
c0005e80:	8b 45 08             	mov    0x8(%ebp),%eax
c0005e83:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
/work/x86_os_my/lib/kernel/io.h:38
   uint8_t data;
   asm volatile ("inb %w1, %b0" : "=a" (data) : "Nd" (port));
c0005e87:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0005e8b:	89 c2                	mov    %eax,%edx
c0005e8d:	ec                   	in     (%dx),%al
c0005e8e:	88 45 ff             	mov    %al,-0x1(%ebp)
/work/x86_os_my/lib/kernel/io.h:39
   return data;
c0005e91:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
/work/x86_os_my/lib/kernel/io.h:40
}
c0005e95:	c9                   	leave  
c0005e96:	c3                   	ret    

c0005e97 <insw>:
insw():
/work/x86_os_my/lib/kernel/io.h:43

/* 将从端口port读入的word_cnt个字写入addr */
static inline void insw(uint16_t port, void* addr, uint32_t word_cnt) {
c0005e97:	55                   	push   %ebp
c0005e98:	89 e5                	mov    %esp,%ebp
c0005e9a:	57                   	push   %edi
c0005e9b:	53                   	push   %ebx
c0005e9c:	83 ec 04             	sub    $0x4,%esp
c0005e9f:	8b 45 08             	mov    0x8(%ebp),%eax
c0005ea2:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/io.h:48
/******************************************************
   insw是将从端口port处读入的16位内容写入es:edi指向的内存,
   我们在设置段描述符时, 已经将ds,es,ss段的选择子都设置为相同的值了,
   此时不用担心数据错乱。*/
   asm volatile ("cld; rep insw" : "+D" (addr), "+c" (word_cnt) : "d" (port) : "memory");
c0005ea6:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c0005eaa:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0005ead:	8b 45 10             	mov    0x10(%ebp),%eax
c0005eb0:	89 cb                	mov    %ecx,%ebx
c0005eb2:	89 df                	mov    %ebx,%edi
c0005eb4:	89 c1                	mov    %eax,%ecx
c0005eb6:	fc                   	cld    
c0005eb7:	66 f3 6d             	rep insw (%dx),%es:(%edi)
c0005eba:	89 c8                	mov    %ecx,%eax
c0005ebc:	89 fb                	mov    %edi,%ebx
c0005ebe:	89 5d 0c             	mov    %ebx,0xc(%ebp)
c0005ec1:	89 45 10             	mov    %eax,0x10(%ebp)
/work/x86_os_my/lib/kernel/io.h:50
/******************************************************/
}
c0005ec4:	90                   	nop
c0005ec5:	83 c4 04             	add    $0x4,%esp
c0005ec8:	5b                   	pop    %ebx
c0005ec9:	5f                   	pop    %edi
c0005eca:	5d                   	pop    %ebp
c0005ecb:	c3                   	ret    

c0005ecc <select_disk>:
select_disk():
/work/x86_os_my/device/ide.c:78
} __attribute__ ((packed));


/////////////////////////////////////// ide驱动部分 ////////////////////////////////////////////////
/* 选择读写的硬盘 */
static void select_disk(struct disk* hd) {
c0005ecc:	55                   	push   %ebp
c0005ecd:	89 e5                	mov    %esp,%ebp
c0005ecf:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/device/ide.c:79
	uint8_t reg_device = BIT_DEV_MBS | BIT_DEV_LBA;
c0005ed2:	c6 45 ff e0          	movb   $0xe0,-0x1(%ebp)
/work/x86_os_my/device/ide.c:80
	if (hd->dev_no == 1) {	// 若是从盘就置DEV位为1
c0005ed6:	8b 45 08             	mov    0x8(%ebp),%eax
c0005ed9:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
c0005edd:	3c 01                	cmp    $0x1,%al
c0005edf:	75 04                	jne    c0005ee5 <select_disk+0x19>
/work/x86_os_my/device/ide.c:81
		reg_device |= BIT_DEV_DEV;
c0005ee1:	80 4d ff 10          	orb    $0x10,-0x1(%ebp)
/work/x86_os_my/device/ide.c:83
	}
	outb(reg_dev(hd->my_channel), reg_device);
c0005ee5:	0f b6 55 ff          	movzbl -0x1(%ebp),%edx
c0005ee9:	8b 45 08             	mov    0x8(%ebp),%eax
c0005eec:	8b 40 08             	mov    0x8(%eax),%eax
c0005eef:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005ef3:	83 c0 06             	add    $0x6,%eax
c0005ef6:	0f b7 c0             	movzwl %ax,%eax
c0005ef9:	52                   	push   %edx
c0005efa:	50                   	push   %eax
c0005efb:	e8 26 ff ff ff       	call   c0005e26 <outb>
c0005f00:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/ide.c:84
}
c0005f03:	90                   	nop
c0005f04:	c9                   	leave  
c0005f05:	c3                   	ret    

c0005f06 <select_sector>:
select_sector():
/work/x86_os_my/device/ide.c:87

/* 向硬盘控制器写入起始扇区地址及要读写的扇区数 */
static void select_sector(struct disk* hd, uint32_t lba, uint8_t sec_cnt) {
c0005f06:	55                   	push   %ebp
c0005f07:	89 e5                	mov    %esp,%ebp
c0005f09:	83 ec 28             	sub    $0x28,%esp
c0005f0c:	8b 45 10             	mov    0x10(%ebp),%eax
c0005f0f:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/device/ide.c:88
	ASSERT(lba <= max_lba);
c0005f12:	81 7d 0c ff 7f 02 00 	cmpl   $0x27fff,0xc(%ebp)
c0005f19:	76 19                	jbe    c0005f34 <select_sector+0x2e>
/work/x86_os_my/device/ide.c:88 (discriminator 1)
c0005f1b:	68 a0 d9 00 c0       	push   $0xc000d9a0
c0005f20:	68 38 db 00 c0       	push   $0xc000db38
c0005f25:	6a 58                	push   $0x58
c0005f27:	68 af d9 00 c0       	push   $0xc000d9af
c0005f2c:	e8 20 c5 ff ff       	call   c0002451 <panic_spin>
c0005f31:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:89
	struct ide_channel* channel = hd->my_channel;
c0005f34:	8b 45 08             	mov    0x8(%ebp),%eax
c0005f37:	8b 40 08             	mov    0x8(%eax),%eax
c0005f3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/ide.c:92

	/* 写入要读写的扇区数*/
	outb(reg_sect_cnt(channel), sec_cnt);	// 如果sec_cnt为0,则表示写入256个扇区
c0005f3d:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c0005f41:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005f44:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005f48:	83 c0 02             	add    $0x2,%eax
c0005f4b:	0f b7 c0             	movzwl %ax,%eax
c0005f4e:	83 ec 08             	sub    $0x8,%esp
c0005f51:	52                   	push   %edx
c0005f52:	50                   	push   %eax
c0005f53:	e8 ce fe ff ff       	call   c0005e26 <outb>
c0005f58:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:95

	/* 写入lba地址(即扇区号) */
	outb(reg_lba_l(channel), lba);			// lba地址的低8位,不用单独取出低8位.outb函数中的汇编指令outb %b0, %w1会只用al。
c0005f5b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005f5e:	0f b6 d0             	movzbl %al,%edx
c0005f61:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005f64:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005f68:	83 c0 03             	add    $0x3,%eax
c0005f6b:	0f b7 c0             	movzwl %ax,%eax
c0005f6e:	83 ec 08             	sub    $0x8,%esp
c0005f71:	52                   	push   %edx
c0005f72:	50                   	push   %eax
c0005f73:	e8 ae fe ff ff       	call   c0005e26 <outb>
c0005f78:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:96
	outb(reg_lba_m(channel), lba >> 8);		// lba地址的8~15位
c0005f7b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005f7e:	c1 e8 08             	shr    $0x8,%eax
c0005f81:	0f b6 d0             	movzbl %al,%edx
c0005f84:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005f87:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005f8b:	83 c0 04             	add    $0x4,%eax
c0005f8e:	0f b7 c0             	movzwl %ax,%eax
c0005f91:	83 ec 08             	sub    $0x8,%esp
c0005f94:	52                   	push   %edx
c0005f95:	50                   	push   %eax
c0005f96:	e8 8b fe ff ff       	call   c0005e26 <outb>
c0005f9b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:97
	outb(reg_lba_h(channel), lba >> 16);	// lba地址的16~23位
c0005f9e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005fa1:	c1 e8 10             	shr    $0x10,%eax
c0005fa4:	0f b6 d0             	movzbl %al,%edx
c0005fa7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005faa:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005fae:	83 c0 05             	add    $0x5,%eax
c0005fb1:	0f b7 c0             	movzwl %ax,%eax
c0005fb4:	83 ec 08             	sub    $0x8,%esp
c0005fb7:	52                   	push   %edx
c0005fb8:	50                   	push   %eax
c0005fb9:	e8 68 fe ff ff       	call   c0005e26 <outb>
c0005fbe:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:101

	/* 因为lba地址的24~27位要存储在device寄存器的0～3位,
	* 无法单独写入这4位,所以在此处把device寄存器再重新写入一次*/
	outb(reg_dev(channel), BIT_DEV_MBS | BIT_DEV_LBA | (hd->dev_no == 1 ? BIT_DEV_DEV : 0) | lba >> 24);
c0005fc1:	8b 45 08             	mov    0x8(%ebp),%eax
c0005fc4:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
c0005fc8:	3c 01                	cmp    $0x1,%al
c0005fca:	75 07                	jne    c0005fd3 <select_sector+0xcd>
/work/x86_os_my/device/ide.c:101 (discriminator 1)
c0005fcc:	ba f0 ff ff ff       	mov    $0xfffffff0,%edx
c0005fd1:	eb 05                	jmp    c0005fd8 <select_sector+0xd2>
/work/x86_os_my/device/ide.c:101 (discriminator 2)
c0005fd3:	ba e0 ff ff ff       	mov    $0xffffffe0,%edx
/work/x86_os_my/device/ide.c:101 (discriminator 4)
c0005fd8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005fdb:	c1 e8 18             	shr    $0x18,%eax
c0005fde:	09 d0                	or     %edx,%eax
c0005fe0:	0f b6 d0             	movzbl %al,%edx
c0005fe3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005fe6:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005fea:	83 c0 06             	add    $0x6,%eax
c0005fed:	0f b7 c0             	movzwl %ax,%eax
c0005ff0:	83 ec 08             	sub    $0x8,%esp
c0005ff3:	52                   	push   %edx
c0005ff4:	50                   	push   %eax
c0005ff5:	e8 2c fe ff ff       	call   c0005e26 <outb>
c0005ffa:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:102 (discriminator 4)
}
c0005ffd:	90                   	nop
c0005ffe:	c9                   	leave  
c0005fff:	c3                   	ret    

c0006000 <cmd_out>:
cmd_out():
/work/x86_os_my/device/ide.c:105

/* 向通道channel发命令cmd */
static void cmd_out(struct ide_channel* channel, uint8_t cmd) {
c0006000:	55                   	push   %ebp
c0006001:	89 e5                	mov    %esp,%ebp
c0006003:	83 ec 04             	sub    $0x4,%esp
c0006006:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006009:	88 45 fc             	mov    %al,-0x4(%ebp)
/work/x86_os_my/device/ide.c:107
	/* 只要向硬盘发出了命令便将此标记置为true,硬盘中断处理程序需要根据它来判断 */
	channel->expecting_intr = true;
c000600c:	8b 45 08             	mov    0x8(%ebp),%eax
c000600f:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
/work/x86_os_my/device/ide.c:108
	outb(reg_cmd(channel), cmd);
c0006016:	0f b6 55 fc          	movzbl -0x4(%ebp),%edx
c000601a:	8b 45 08             	mov    0x8(%ebp),%eax
c000601d:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0006021:	83 c0 07             	add    $0x7,%eax
c0006024:	0f b7 c0             	movzwl %ax,%eax
c0006027:	52                   	push   %edx
c0006028:	50                   	push   %eax
c0006029:	e8 f8 fd ff ff       	call   c0005e26 <outb>
c000602e:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/ide.c:109
}
c0006031:	90                   	nop
c0006032:	c9                   	leave  
c0006033:	c3                   	ret    

c0006034 <read_from_sector>:
read_from_sector():
/work/x86_os_my/device/ide.c:112

/* 硬盘读入sec_cnt个扇区的数据到buf */
static void read_from_sector(struct disk* hd, void* buf, uint8_t sec_cnt) {
c0006034:	55                   	push   %ebp
c0006035:	89 e5                	mov    %esp,%ebp
c0006037:	83 ec 14             	sub    $0x14,%esp
c000603a:	8b 45 10             	mov    0x10(%ebp),%eax
c000603d:	88 45 ec             	mov    %al,-0x14(%ebp)
/work/x86_os_my/device/ide.c:114
	uint32_t size_in_byte;
	if (sec_cnt == 0) {
c0006040:	80 7d ec 00          	cmpb   $0x0,-0x14(%ebp)
c0006044:	75 09                	jne    c000604f <read_from_sector+0x1b>
/work/x86_os_my/device/ide.c:116
		/* 因为sec_cnt是8位变量,由主调函数将其赋值时,若为256则会将最高位的1丢掉变为0 */
		size_in_byte = 256 * 512;
c0006046:	c7 45 fc 00 00 02 00 	movl   $0x20000,-0x4(%ebp)
c000604d:	eb 0a                	jmp    c0006059 <read_from_sector+0x25>
/work/x86_os_my/device/ide.c:118
	} else { 
		size_in_byte = sec_cnt * 512; 
c000604f:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0006053:	c1 e0 09             	shl    $0x9,%eax
c0006056:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/device/ide.c:120
	}
	insw(reg_data(hd->my_channel), buf, size_in_byte / 2);
c0006059:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000605c:	d1 e8                	shr    %eax
c000605e:	89 c2                	mov    %eax,%edx
c0006060:	8b 45 08             	mov    0x8(%ebp),%eax
c0006063:	8b 40 08             	mov    0x8(%eax),%eax
c0006066:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c000606a:	0f b7 c0             	movzwl %ax,%eax
c000606d:	52                   	push   %edx
c000606e:	ff 75 0c             	pushl  0xc(%ebp)
c0006071:	50                   	push   %eax
c0006072:	e8 20 fe ff ff       	call   c0005e97 <insw>
c0006077:	83 c4 0c             	add    $0xc,%esp
/work/x86_os_my/device/ide.c:121
}
c000607a:	90                   	nop
c000607b:	c9                   	leave  
c000607c:	c3                   	ret    

c000607d <write2sector>:
write2sector():
/work/x86_os_my/device/ide.c:124

/* 将buf中sec_cnt扇区的数据写入硬盘 */
static void write2sector(struct disk* hd, void* buf, uint8_t sec_cnt) {
c000607d:	55                   	push   %ebp
c000607e:	89 e5                	mov    %esp,%ebp
c0006080:	83 ec 14             	sub    $0x14,%esp
c0006083:	8b 45 10             	mov    0x10(%ebp),%eax
c0006086:	88 45 ec             	mov    %al,-0x14(%ebp)
/work/x86_os_my/device/ide.c:126
	uint32_t size_in_byte;
	if (sec_cnt == 0) {
c0006089:	80 7d ec 00          	cmpb   $0x0,-0x14(%ebp)
c000608d:	75 09                	jne    c0006098 <write2sector+0x1b>
/work/x86_os_my/device/ide.c:128
		/* 因为sec_cnt是8位变量,由主调函数将其赋值时,若为256则会将最高位的1丢掉变为0 */
		size_in_byte = 256 * 512;
c000608f:	c7 45 fc 00 00 02 00 	movl   $0x20000,-0x4(%ebp)
c0006096:	eb 0a                	jmp    c00060a2 <write2sector+0x25>
/work/x86_os_my/device/ide.c:130
	} else { 
		size_in_byte = sec_cnt * 512; 
c0006098:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c000609c:	c1 e0 09             	shl    $0x9,%eax
c000609f:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/device/ide.c:132
	}
	outsw(reg_data(hd->my_channel), buf, size_in_byte / 2);
c00060a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c00060a5:	d1 e8                	shr    %eax
c00060a7:	89 c2                	mov    %eax,%edx
c00060a9:	8b 45 08             	mov    0x8(%ebp),%eax
c00060ac:	8b 40 08             	mov    0x8(%eax),%eax
c00060af:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c00060b3:	0f b7 c0             	movzwl %ax,%eax
c00060b6:	52                   	push   %edx
c00060b7:	ff 75 0c             	pushl  0xc(%ebp)
c00060ba:	50                   	push   %eax
c00060bb:	e8 85 fd ff ff       	call   c0005e45 <outsw>
c00060c0:	83 c4 0c             	add    $0xc,%esp
/work/x86_os_my/device/ide.c:133
}
c00060c3:	90                   	nop
c00060c4:	c9                   	leave  
c00060c5:	c3                   	ret    

c00060c6 <busy_wait>:
busy_wait():
/work/x86_os_my/device/ide.c:136

/* 等待30秒 */
static bool busy_wait(struct disk* hd) {
c00060c6:	55                   	push   %ebp
c00060c7:	89 e5                	mov    %esp,%ebp
c00060c9:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/ide.c:137
	struct ide_channel* channel = hd->my_channel;
c00060cc:	8b 45 08             	mov    0x8(%ebp),%eax
c00060cf:	8b 40 08             	mov    0x8(%eax),%eax
c00060d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:138
	uint16_t time_limit = 30 * 1000;	// 可以等待30000毫秒
c00060d5:	66 c7 45 f6 30 75    	movw   $0x7530,-0xa(%ebp)
/work/x86_os_my/device/ide.c:139
	while (time_limit -= 10 >= 0) {
c00060db:	eb 45                	jmp    c0006122 <busy_wait+0x5c>
/work/x86_os_my/device/ide.c:140
		if (!(inb(reg_status(channel)) & BIT_STAT_BSY)) {
c00060dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00060e0:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c00060e4:	83 c0 07             	add    $0x7,%eax
c00060e7:	0f b7 c0             	movzwl %ax,%eax
c00060ea:	50                   	push   %eax
c00060eb:	e8 8a fd ff ff       	call   c0005e7a <inb>
c00060f0:	83 c4 04             	add    $0x4,%esp
c00060f3:	84 c0                	test   %al,%al
c00060f5:	78 1e                	js     c0006115 <busy_wait+0x4f>
/work/x86_os_my/device/ide.c:141
			return (inb(reg_status(channel)) & BIT_STAT_DRQ);
c00060f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00060fa:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c00060fe:	83 c0 07             	add    $0x7,%eax
c0006101:	0f b7 c0             	movzwl %ax,%eax
c0006104:	50                   	push   %eax
c0006105:	e8 70 fd ff ff       	call   c0005e7a <inb>
c000610a:	83 c4 04             	add    $0x4,%esp
c000610d:	0f b6 c0             	movzbl %al,%eax
c0006110:	83 e0 08             	and    $0x8,%eax
c0006113:	eb 1e                	jmp    c0006133 <busy_wait+0x6d>
/work/x86_os_my/device/ide.c:143
		} else {
			mtime_sleep(10);			// 睡眠10毫秒
c0006115:	83 ec 0c             	sub    $0xc,%esp
c0006118:	6a 0a                	push   $0xa
c000611a:	e8 78 bb ff ff       	call   c0001c97 <mtime_sleep>
c000611f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:139

/* 等待30秒 */
static bool busy_wait(struct disk* hd) {
	struct ide_channel* channel = hd->my_channel;
	uint16_t time_limit = 30 * 1000;	// 可以等待30000毫秒
	while (time_limit -= 10 >= 0) {
c0006122:	66 83 6d f6 01       	subw   $0x1,-0xa(%ebp)
c0006127:	66 83 7d f6 00       	cmpw   $0x0,-0xa(%ebp)
c000612c:	75 af                	jne    c00060dd <busy_wait+0x17>
/work/x86_os_my/device/ide.c:146
			return (inb(reg_status(channel)) & BIT_STAT_DRQ);
		} else {
			mtime_sleep(10);			// 睡眠10毫秒
		}
	}
	return false;
c000612e:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/device/ide.c:147
}
c0006133:	c9                   	leave  
c0006134:	c3                   	ret    

c0006135 <ide_read>:
ide_read():
/work/x86_os_my/device/ide.c:150

/* 从硬盘读取sec_cnt个扇区到buf */
void ide_read(struct disk* hd, uint32_t lba, void* buf, uint32_t sec_cnt) { 
c0006135:	55                   	push   %ebp
c0006136:	89 e5                	mov    %esp,%ebp
c0006138:	83 ec 58             	sub    $0x58,%esp
/work/x86_os_my/device/ide.c:151
	ASSERT(lba <= max_lba);
c000613b:	81 7d 0c ff 7f 02 00 	cmpl   $0x27fff,0xc(%ebp)
c0006142:	76 1c                	jbe    c0006160 <ide_read+0x2b>
/work/x86_os_my/device/ide.c:151 (discriminator 1)
c0006144:	68 a0 d9 00 c0       	push   $0xc000d9a0
c0006149:	68 48 db 00 c0       	push   $0xc000db48
c000614e:	68 97 00 00 00       	push   $0x97
c0006153:	68 af d9 00 c0       	push   $0xc000d9af
c0006158:	e8 f4 c2 ff ff       	call   c0002451 <panic_spin>
c000615d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:152
	ASSERT(sec_cnt > 0);
c0006160:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0006164:	75 1c                	jne    c0006182 <ide_read+0x4d>
/work/x86_os_my/device/ide.c:152 (discriminator 1)
c0006166:	68 bc d9 00 c0       	push   $0xc000d9bc
c000616b:	68 48 db 00 c0       	push   $0xc000db48
c0006170:	68 98 00 00 00       	push   $0x98
c0006175:	68 af d9 00 c0       	push   $0xc000d9af
c000617a:	e8 d2 c2 ff ff       	call   c0002451 <panic_spin>
c000617f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:153
	lock_acquire (&hd->my_channel->lock);
c0006182:	8b 45 08             	mov    0x8(%ebp),%eax
c0006185:	8b 40 08             	mov    0x8(%eax),%eax
c0006188:	83 c0 0c             	add    $0xc,%eax
c000618b:	83 ec 0c             	sub    $0xc,%esp
c000618e:	50                   	push   %eax
c000618f:	e8 1b ea ff ff       	call   c0004baf <lock_acquire>
c0006194:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:156

	/* 1 先选择操作的硬盘 */
	select_disk(hd);
c0006197:	83 ec 0c             	sub    $0xc,%esp
c000619a:	ff 75 08             	pushl  0x8(%ebp)
c000619d:	e8 2a fd ff ff       	call   c0005ecc <select_disk>
c00061a2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:159

	uint32_t secs_op;		// 每次操作的扇区数
	uint32_t secs_done = 0;	// 已完成的扇区数
c00061a5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/device/ide.c:160
	while(secs_done < sec_cnt) {
c00061ac:	e9 d4 00 00 00       	jmp    c0006285 <ide_read+0x150>
/work/x86_os_my/device/ide.c:161
		if ((secs_done + 256) <= sec_cnt) {
c00061b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00061b4:	05 00 01 00 00       	add    $0x100,%eax
c00061b9:	3b 45 14             	cmp    0x14(%ebp),%eax
c00061bc:	77 09                	ja     c00061c7 <ide_read+0x92>
/work/x86_os_my/device/ide.c:162
			secs_op = 256;
c00061be:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
c00061c5:	eb 09                	jmp    c00061d0 <ide_read+0x9b>
/work/x86_os_my/device/ide.c:164
		} else {
			secs_op = sec_cnt - secs_done;
c00061c7:	8b 45 14             	mov    0x14(%ebp),%eax
c00061ca:	2b 45 f0             	sub    -0x10(%ebp),%eax
c00061cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/ide.c:168
		}

		/* 2 写入待读入的扇区数和起始扇区号 */
		select_sector(hd, lba + secs_done, secs_op);
c00061d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00061d3:	0f b6 c0             	movzbl %al,%eax
c00061d6:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c00061d9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00061dc:	01 ca                	add    %ecx,%edx
c00061de:	83 ec 04             	sub    $0x4,%esp
c00061e1:	50                   	push   %eax
c00061e2:	52                   	push   %edx
c00061e3:	ff 75 08             	pushl  0x8(%ebp)
c00061e6:	e8 1b fd ff ff       	call   c0005f06 <select_sector>
c00061eb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:171

		/* 3 执行的命令写入reg_cmd寄存器 */
		cmd_out(hd->my_channel, CMD_READ_SECTOR);	// 准备开始读数据
c00061ee:	8b 45 08             	mov    0x8(%ebp),%eax
c00061f1:	8b 40 08             	mov    0x8(%eax),%eax
c00061f4:	83 ec 08             	sub    $0x8,%esp
c00061f7:	6a 20                	push   $0x20
c00061f9:	50                   	push   %eax
c00061fa:	e8 01 fe ff ff       	call   c0006000 <cmd_out>
c00061ff:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:176

		/*********************   阻塞自己的时机  ***********************
		在硬盘已经开始工作(开始在内部读数据或写数据)后才能阻塞自己,现在硬盘已经开始忙了,
		将自己阻塞,等待硬盘完成读操作后通过中断处理程序唤醒自己*/
		sema_down(&hd->my_channel->disk_done);
c0006202:	8b 45 08             	mov    0x8(%ebp),%eax
c0006205:	8b 40 08             	mov    0x8(%eax),%eax
c0006208:	83 c0 2c             	add    $0x2c,%eax
c000620b:	83 ec 0c             	sub    $0xc,%esp
c000620e:	50                   	push   %eax
c000620f:	e8 f1 e7 ff ff       	call   c0004a05 <sema_down>
c0006214:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:181
		/*************************************************************/

		/* 4 检测硬盘状态是否可读 */
		/* 醒来后开始执行下面代码*/
		if (!busy_wait(hd)) {	// 若失败
c0006217:	83 ec 0c             	sub    $0xc,%esp
c000621a:	ff 75 08             	pushl  0x8(%ebp)
c000621d:	e8 a4 fe ff ff       	call   c00060c6 <busy_wait>
c0006222:	83 c4 10             	add    $0x10,%esp
c0006225:	85 c0                	test   %eax,%eax
c0006227:	75 33                	jne    c000625c <ide_read+0x127>
/work/x86_os_my/device/ide.c:183
			char error[64];
			sprintf(error, "%s read sector %d failed!!!!!!\n", hd->name, lba);
c0006229:	8b 45 08             	mov    0x8(%ebp),%eax
c000622c:	ff 75 0c             	pushl  0xc(%ebp)
c000622f:	50                   	push   %eax
c0006230:	68 c8 d9 00 c0       	push   $0xc000d9c8
c0006235:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0006238:	50                   	push   %eax
c0006239:	e8 48 fb ff ff       	call   c0005d86 <sprintf>
c000623e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:184
			PANIC(error);
c0006241:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0006244:	50                   	push   %eax
c0006245:	68 48 db 00 c0       	push   $0xc000db48
c000624a:	68 b8 00 00 00       	push   $0xb8
c000624f:	68 af d9 00 c0       	push   $0xc000d9af
c0006254:	e8 f8 c1 ff ff       	call   c0002451 <panic_spin>
c0006259:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:188
		}

		/* 5 把数据从硬盘的缓冲区中读出 */
		read_from_sector(hd, (void*)((uint32_t)buf + secs_done * 512), secs_op);
c000625c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000625f:	0f b6 c0             	movzbl %al,%eax
c0006262:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0006265:	89 d1                	mov    %edx,%ecx
c0006267:	c1 e1 09             	shl    $0x9,%ecx
c000626a:	8b 55 10             	mov    0x10(%ebp),%edx
c000626d:	01 ca                	add    %ecx,%edx
c000626f:	83 ec 04             	sub    $0x4,%esp
c0006272:	50                   	push   %eax
c0006273:	52                   	push   %edx
c0006274:	ff 75 08             	pushl  0x8(%ebp)
c0006277:	e8 b8 fd ff ff       	call   c0006034 <read_from_sector>
c000627c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:189
		secs_done += secs_op;
c000627f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0006282:	01 45 f0             	add    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:160
	/* 1 先选择操作的硬盘 */
	select_disk(hd);

	uint32_t secs_op;		// 每次操作的扇区数
	uint32_t secs_done = 0;	// 已完成的扇区数
	while(secs_done < sec_cnt) {
c0006285:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006288:	3b 45 14             	cmp    0x14(%ebp),%eax
c000628b:	0f 82 20 ff ff ff    	jb     c00061b1 <ide_read+0x7c>
/work/x86_os_my/device/ide.c:191

		/* 5 把数据从硬盘的缓冲区中读出 */
		read_from_sector(hd, (void*)((uint32_t)buf + secs_done * 512), secs_op);
		secs_done += secs_op;
	}
	lock_release(&hd->my_channel->lock);
c0006291:	8b 45 08             	mov    0x8(%ebp),%eax
c0006294:	8b 40 08             	mov    0x8(%eax),%eax
c0006297:	83 c0 0c             	add    $0xc,%eax
c000629a:	83 ec 0c             	sub    $0xc,%esp
c000629d:	50                   	push   %eax
c000629e:	e8 83 e9 ff ff       	call   c0004c26 <lock_release>
c00062a3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:192
}
c00062a6:	90                   	nop
c00062a7:	c9                   	leave  
c00062a8:	c3                   	ret    

c00062a9 <ide_write>:
ide_write():
/work/x86_os_my/device/ide.c:195

/* 将buf中sec_cnt扇区数据写入硬盘 */
void ide_write(struct disk* hd, uint32_t lba, void* buf, uint32_t sec_cnt) {
c00062a9:	55                   	push   %ebp
c00062aa:	89 e5                	mov    %esp,%ebp
c00062ac:	83 ec 58             	sub    $0x58,%esp
/work/x86_os_my/device/ide.c:196
	ASSERT(lba <= max_lba);
c00062af:	81 7d 0c ff 7f 02 00 	cmpl   $0x27fff,0xc(%ebp)
c00062b6:	76 1c                	jbe    c00062d4 <ide_write+0x2b>
/work/x86_os_my/device/ide.c:196 (discriminator 1)
c00062b8:	68 a0 d9 00 c0       	push   $0xc000d9a0
c00062bd:	68 54 db 00 c0       	push   $0xc000db54
c00062c2:	68 c4 00 00 00       	push   $0xc4
c00062c7:	68 af d9 00 c0       	push   $0xc000d9af
c00062cc:	e8 80 c1 ff ff       	call   c0002451 <panic_spin>
c00062d1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:197
	ASSERT(sec_cnt > 0);
c00062d4:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c00062d8:	75 1c                	jne    c00062f6 <ide_write+0x4d>
/work/x86_os_my/device/ide.c:197 (discriminator 1)
c00062da:	68 bc d9 00 c0       	push   $0xc000d9bc
c00062df:	68 54 db 00 c0       	push   $0xc000db54
c00062e4:	68 c5 00 00 00       	push   $0xc5
c00062e9:	68 af d9 00 c0       	push   $0xc000d9af
c00062ee:	e8 5e c1 ff ff       	call   c0002451 <panic_spin>
c00062f3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:198
	lock_acquire (&hd->my_channel->lock);
c00062f6:	8b 45 08             	mov    0x8(%ebp),%eax
c00062f9:	8b 40 08             	mov    0x8(%eax),%eax
c00062fc:	83 c0 0c             	add    $0xc,%eax
c00062ff:	83 ec 0c             	sub    $0xc,%esp
c0006302:	50                   	push   %eax
c0006303:	e8 a7 e8 ff ff       	call   c0004baf <lock_acquire>
c0006308:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:201

	/* 1 先选择操作的硬盘 */
	select_disk(hd);
c000630b:	83 ec 0c             	sub    $0xc,%esp
c000630e:	ff 75 08             	pushl  0x8(%ebp)
c0006311:	e8 b6 fb ff ff       	call   c0005ecc <select_disk>
c0006316:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:204

	uint32_t secs_op;		// 每次操作的扇区数
	uint32_t secs_done = 0;	// 已完成的扇区数
c0006319:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/device/ide.c:205
	while(secs_done < sec_cnt) {
c0006320:	e9 d4 00 00 00       	jmp    c00063f9 <ide_write+0x150>
/work/x86_os_my/device/ide.c:206
		if ((secs_done + 256) <= sec_cnt) {
c0006325:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006328:	05 00 01 00 00       	add    $0x100,%eax
c000632d:	3b 45 14             	cmp    0x14(%ebp),%eax
c0006330:	77 09                	ja     c000633b <ide_write+0x92>
/work/x86_os_my/device/ide.c:207
			secs_op = 256;
c0006332:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
c0006339:	eb 09                	jmp    c0006344 <ide_write+0x9b>
/work/x86_os_my/device/ide.c:209
		} else {
			secs_op = sec_cnt - secs_done;
c000633b:	8b 45 14             	mov    0x14(%ebp),%eax
c000633e:	2b 45 f0             	sub    -0x10(%ebp),%eax
c0006341:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/ide.c:213
		}

		/* 2 写入待写入的扇区数和起始扇区号 */
		select_sector(hd, lba + secs_done, secs_op);
c0006344:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0006347:	0f b6 c0             	movzbl %al,%eax
c000634a:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c000634d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0006350:	01 ca                	add    %ecx,%edx
c0006352:	83 ec 04             	sub    $0x4,%esp
c0006355:	50                   	push   %eax
c0006356:	52                   	push   %edx
c0006357:	ff 75 08             	pushl  0x8(%ebp)
c000635a:	e8 a7 fb ff ff       	call   c0005f06 <select_sector>
c000635f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:216

		/* 3 执行的命令写入reg_cmd寄存器 */
		cmd_out(hd->my_channel, CMD_WRITE_SECTOR);	// 准备开始写数据
c0006362:	8b 45 08             	mov    0x8(%ebp),%eax
c0006365:	8b 40 08             	mov    0x8(%eax),%eax
c0006368:	83 ec 08             	sub    $0x8,%esp
c000636b:	6a 30                	push   $0x30
c000636d:	50                   	push   %eax
c000636e:	e8 8d fc ff ff       	call   c0006000 <cmd_out>
c0006373:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:219

		/* 4 检测硬盘状态是否可读 */
		if (!busy_wait(hd)) {	// 若失败
c0006376:	83 ec 0c             	sub    $0xc,%esp
c0006379:	ff 75 08             	pushl  0x8(%ebp)
c000637c:	e8 45 fd ff ff       	call   c00060c6 <busy_wait>
c0006381:	83 c4 10             	add    $0x10,%esp
c0006384:	85 c0                	test   %eax,%eax
c0006386:	75 33                	jne    c00063bb <ide_write+0x112>
/work/x86_os_my/device/ide.c:221
			char error[64];
			sprintf(error, "%s write sector %d failed!!!!!!\n", hd->name, lba);
c0006388:	8b 45 08             	mov    0x8(%ebp),%eax
c000638b:	ff 75 0c             	pushl  0xc(%ebp)
c000638e:	50                   	push   %eax
c000638f:	68 e8 d9 00 c0       	push   $0xc000d9e8
c0006394:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0006397:	50                   	push   %eax
c0006398:	e8 e9 f9 ff ff       	call   c0005d86 <sprintf>
c000639d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:222
			PANIC(error);
c00063a0:	8d 45 b0             	lea    -0x50(%ebp),%eax
c00063a3:	50                   	push   %eax
c00063a4:	68 54 db 00 c0       	push   $0xc000db54
c00063a9:	68 de 00 00 00       	push   $0xde
c00063ae:	68 af d9 00 c0       	push   $0xc000d9af
c00063b3:	e8 99 c0 ff ff       	call   c0002451 <panic_spin>
c00063b8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:226
		}

		/* 5 将数据写入硬盘 */
		write2sector(hd, (void*)((uint32_t)buf + secs_done * 512), secs_op);
c00063bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00063be:	0f b6 c0             	movzbl %al,%eax
c00063c1:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00063c4:	89 d1                	mov    %edx,%ecx
c00063c6:	c1 e1 09             	shl    $0x9,%ecx
c00063c9:	8b 55 10             	mov    0x10(%ebp),%edx
c00063cc:	01 ca                	add    %ecx,%edx
c00063ce:	83 ec 04             	sub    $0x4,%esp
c00063d1:	50                   	push   %eax
c00063d2:	52                   	push   %edx
c00063d3:	ff 75 08             	pushl  0x8(%ebp)
c00063d6:	e8 a2 fc ff ff       	call   c000607d <write2sector>
c00063db:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:229

		/* 在硬盘响应期间阻塞自己 */
		sema_down(&hd->my_channel->disk_done);
c00063de:	8b 45 08             	mov    0x8(%ebp),%eax
c00063e1:	8b 40 08             	mov    0x8(%eax),%eax
c00063e4:	83 c0 2c             	add    $0x2c,%eax
c00063e7:	83 ec 0c             	sub    $0xc,%esp
c00063ea:	50                   	push   %eax
c00063eb:	e8 15 e6 ff ff       	call   c0004a05 <sema_down>
c00063f0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:230
		secs_done += secs_op;
c00063f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00063f6:	01 45 f0             	add    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:205
	/* 1 先选择操作的硬盘 */
	select_disk(hd);

	uint32_t secs_op;		// 每次操作的扇区数
	uint32_t secs_done = 0;	// 已完成的扇区数
	while(secs_done < sec_cnt) {
c00063f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00063fc:	3b 45 14             	cmp    0x14(%ebp),%eax
c00063ff:	0f 82 20 ff ff ff    	jb     c0006325 <ide_write+0x7c>
/work/x86_os_my/device/ide.c:233
		/* 在硬盘响应期间阻塞自己 */
		sema_down(&hd->my_channel->disk_done);
		secs_done += secs_op;
	}
	/* 醒来后开始释放锁*/
	lock_release(&hd->my_channel->lock);
c0006405:	8b 45 08             	mov    0x8(%ebp),%eax
c0006408:	8b 40 08             	mov    0x8(%eax),%eax
c000640b:	83 c0 0c             	add    $0xc,%eax
c000640e:	83 ec 0c             	sub    $0xc,%esp
c0006411:	50                   	push   %eax
c0006412:	e8 0f e8 ff ff       	call   c0004c26 <lock_release>
c0006417:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:234
}
c000641a:	90                   	nop
c000641b:	c9                   	leave  
c000641c:	c3                   	ret    

c000641d <swap_pairs_bytes>:
swap_pairs_bytes():
/work/x86_os_my/device/ide.c:238

/////////////////////////////////////// 读取分区表部分 ////////////////////////////////////////////////
/* 将dst中len个相邻字节交换位置后存入buf */
static void swap_pairs_bytes(const char* dst, char* buf, uint32_t len) {
c000641d:	55                   	push   %ebp
c000641e:	89 e5                	mov    %esp,%ebp
c0006420:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/device/ide.c:240
	uint8_t idx;
	for (idx = 0; idx < len; idx += 2) {
c0006423:	c6 45 ff 00          	movb   $0x0,-0x1(%ebp)
c0006427:	eb 37                	jmp    c0006460 <swap_pairs_bytes+0x43>
/work/x86_os_my/device/ide.c:242 (discriminator 3)
		/* buf中存储dst中两相邻元素交换位置后的字符串*/
		buf[idx + 1] = *dst++;
c0006429:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
c000642d:	8d 50 01             	lea    0x1(%eax),%edx
c0006430:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006433:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
c0006436:	8b 45 08             	mov    0x8(%ebp),%eax
c0006439:	8d 50 01             	lea    0x1(%eax),%edx
c000643c:	89 55 08             	mov    %edx,0x8(%ebp)
c000643f:	0f b6 00             	movzbl (%eax),%eax
c0006442:	88 01                	mov    %al,(%ecx)
/work/x86_os_my/device/ide.c:243 (discriminator 3)
		buf[idx]     = *dst++;
c0006444:	0f b6 55 ff          	movzbl -0x1(%ebp),%edx
c0006448:	8b 45 0c             	mov    0xc(%ebp),%eax
c000644b:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
c000644e:	8b 45 08             	mov    0x8(%ebp),%eax
c0006451:	8d 50 01             	lea    0x1(%eax),%edx
c0006454:	89 55 08             	mov    %edx,0x8(%ebp)
c0006457:	0f b6 00             	movzbl (%eax),%eax
c000645a:	88 01                	mov    %al,(%ecx)
/work/x86_os_my/device/ide.c:240 (discriminator 3)

/////////////////////////////////////// 读取分区表部分 ////////////////////////////////////////////////
/* 将dst中len个相邻字节交换位置后存入buf */
static void swap_pairs_bytes(const char* dst, char* buf, uint32_t len) {
	uint8_t idx;
	for (idx = 0; idx < len; idx += 2) {
c000645c:	80 45 ff 02          	addb   $0x2,-0x1(%ebp)
/work/x86_os_my/device/ide.c:240 (discriminator 1)
c0006460:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
c0006464:	3b 45 10             	cmp    0x10(%ebp),%eax
c0006467:	72 c0                	jb     c0006429 <swap_pairs_bytes+0xc>
/work/x86_os_my/device/ide.c:245
		/* buf中存储dst中两相邻元素交换位置后的字符串*/
		buf[idx + 1] = *dst++;
		buf[idx]     = *dst++;
	}
	buf[idx] = '\0';
c0006469:	0f b6 55 ff          	movzbl -0x1(%ebp),%edx
c000646d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006470:	01 d0                	add    %edx,%eax
c0006472:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/device/ide.c:246
}
c0006475:	90                   	nop
c0006476:	c9                   	leave  
c0006477:	c3                   	ret    

c0006478 <identify_disk>:
identify_disk():
/work/x86_os_my/device/ide.c:249

/* 获得硬盘参数信息 */
static void identify_disk(struct disk* hd) {
c0006478:	55                   	push   %ebp
c0006479:	89 e5                	mov    %esp,%ebp
c000647b:	81 ec 98 02 00 00    	sub    $0x298,%esp
/work/x86_os_my/device/ide.c:251
	char id_info[512];
	select_disk(hd);
c0006481:	ff 75 08             	pushl  0x8(%ebp)
c0006484:	e8 43 fa ff ff       	call   c0005ecc <select_disk>
c0006489:	83 c4 04             	add    $0x4,%esp
/work/x86_os_my/device/ide.c:252
	cmd_out(hd->my_channel, CMD_IDENTIFY);
c000648c:	8b 45 08             	mov    0x8(%ebp),%eax
c000648f:	8b 40 08             	mov    0x8(%eax),%eax
c0006492:	68 ec 00 00 00       	push   $0xec
c0006497:	50                   	push   %eax
c0006498:	e8 63 fb ff ff       	call   c0006000 <cmd_out>
c000649d:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/ide.c:255
	/* 向硬盘发送指令后便通过信号量阻塞自己,
	* 待硬盘处理完成后,通过中断处理程序将自己唤醒 */
	sema_down(&hd->my_channel->disk_done);
c00064a0:	8b 45 08             	mov    0x8(%ebp),%eax
c00064a3:	8b 40 08             	mov    0x8(%eax),%eax
c00064a6:	83 c0 2c             	add    $0x2c,%eax
c00064a9:	83 ec 0c             	sub    $0xc,%esp
c00064ac:	50                   	push   %eax
c00064ad:	e8 53 e5 ff ff       	call   c0004a05 <sema_down>
c00064b2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:258

	/* 醒来后开始执行下面代码*/
	if (!busy_wait(hd)) {     //  若失败
c00064b5:	83 ec 0c             	sub    $0xc,%esp
c00064b8:	ff 75 08             	pushl  0x8(%ebp)
c00064bb:	e8 06 fc ff ff       	call   c00060c6 <busy_wait>
c00064c0:	83 c4 10             	add    $0x10,%esp
c00064c3:	85 c0                	test   %eax,%eax
c00064c5:	75 39                	jne    c0006500 <identify_disk+0x88>
/work/x86_os_my/device/ide.c:260
		char error[64];
		sprintf(error, "%s identify failed!!!!!!\n", hd->name);
c00064c7:	8b 45 08             	mov    0x8(%ebp),%eax
c00064ca:	83 ec 04             	sub    $0x4,%esp
c00064cd:	50                   	push   %eax
c00064ce:	68 09 da 00 c0       	push   $0xc000da09
c00064d3:	8d 85 70 fd ff ff    	lea    -0x290(%ebp),%eax
c00064d9:	50                   	push   %eax
c00064da:	e8 a7 f8 ff ff       	call   c0005d86 <sprintf>
c00064df:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:261
		PANIC(error);
c00064e2:	8d 85 70 fd ff ff    	lea    -0x290(%ebp),%eax
c00064e8:	50                   	push   %eax
c00064e9:	68 60 db 00 c0       	push   $0xc000db60
c00064ee:	68 05 01 00 00       	push   $0x105
c00064f3:	68 af d9 00 c0       	push   $0xc000d9af
c00064f8:	e8 54 bf ff ff       	call   c0002451 <panic_spin>
c00064fd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:263
	}
	read_from_sector(hd, id_info, 1);
c0006500:	83 ec 04             	sub    $0x4,%esp
c0006503:	6a 01                	push   $0x1
c0006505:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
c000650b:	50                   	push   %eax
c000650c:	ff 75 08             	pushl  0x8(%ebp)
c000650f:	e8 20 fb ff ff       	call   c0006034 <read_from_sector>
c0006514:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:266

	char buf[64];
	uint8_t sn_start = 10 * 2, sn_len = 20, md_start = 27 * 2, md_len = 40;
c0006517:	c6 45 f7 14          	movb   $0x14,-0x9(%ebp)
c000651b:	c6 45 f6 14          	movb   $0x14,-0xa(%ebp)
c000651f:	c6 45 f5 36          	movb   $0x36,-0xb(%ebp)
c0006523:	c6 45 f4 28          	movb   $0x28,-0xc(%ebp)
/work/x86_os_my/device/ide.c:267
	swap_pairs_bytes(&id_info[sn_start], buf, sn_len);
c0006527:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c000652b:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c000652f:	8d 8d f0 fd ff ff    	lea    -0x210(%ebp),%ecx
c0006535:	01 ca                	add    %ecx,%edx
c0006537:	83 ec 04             	sub    $0x4,%esp
c000653a:	50                   	push   %eax
c000653b:	8d 85 b0 fd ff ff    	lea    -0x250(%ebp),%eax
c0006541:	50                   	push   %eax
c0006542:	52                   	push   %edx
c0006543:	e8 d5 fe ff ff       	call   c000641d <swap_pairs_bytes>
c0006548:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:268
	printk("   disk %s info:\n      SN: %s\n", hd->name, buf);
c000654b:	8b 45 08             	mov    0x8(%ebp),%eax
c000654e:	83 ec 04             	sub    $0x4,%esp
c0006551:	8d 95 b0 fd ff ff    	lea    -0x250(%ebp),%edx
c0006557:	52                   	push   %edx
c0006558:	50                   	push   %eax
c0006559:	68 24 da 00 c0       	push   $0xc000da24
c000655e:	e8 4b 06 00 00       	call   c0006bae <printk>
c0006563:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:269
	memset(buf, 0, sizeof(buf));
c0006566:	83 ec 04             	sub    $0x4,%esp
c0006569:	6a 40                	push   $0x40
c000656b:	6a 00                	push   $0x0
c000656d:	8d 85 b0 fd ff ff    	lea    -0x250(%ebp),%eax
c0006573:	50                   	push   %eax
c0006574:	e8 7a d3 ff ff       	call   c00038f3 <memset>
c0006579:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:270
	swap_pairs_bytes(&id_info[md_start], buf, md_len);
c000657c:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0006580:	0f b6 55 f5          	movzbl -0xb(%ebp),%edx
c0006584:	8d 8d f0 fd ff ff    	lea    -0x210(%ebp),%ecx
c000658a:	01 ca                	add    %ecx,%edx
c000658c:	83 ec 04             	sub    $0x4,%esp
c000658f:	50                   	push   %eax
c0006590:	8d 85 b0 fd ff ff    	lea    -0x250(%ebp),%eax
c0006596:	50                   	push   %eax
c0006597:	52                   	push   %edx
c0006598:	e8 80 fe ff ff       	call   c000641d <swap_pairs_bytes>
c000659d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:271
	printk("      MODULE: %s\n", buf);
c00065a0:	83 ec 08             	sub    $0x8,%esp
c00065a3:	8d 85 b0 fd ff ff    	lea    -0x250(%ebp),%eax
c00065a9:	50                   	push   %eax
c00065aa:	68 43 da 00 c0       	push   $0xc000da43
c00065af:	e8 fa 05 00 00       	call   c0006bae <printk>
c00065b4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:272
	uint32_t sectors = *(uint32_t*)&id_info[60 * 2];
c00065b7:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
c00065bd:	83 c0 78             	add    $0x78,%eax
c00065c0:	8b 00                	mov    (%eax),%eax
c00065c2:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:273
	printk("      SECTORS: %d\n", sectors);
c00065c5:	83 ec 08             	sub    $0x8,%esp
c00065c8:	ff 75 f0             	pushl  -0x10(%ebp)
c00065cb:	68 55 da 00 c0       	push   $0xc000da55
c00065d0:	e8 d9 05 00 00       	call   c0006bae <printk>
c00065d5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:274
	printk("      CAPACITY: %dMB\n", sectors * 512 / 1024 / 1024);
c00065d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00065db:	c1 e0 09             	shl    $0x9,%eax
c00065de:	c1 e8 14             	shr    $0x14,%eax
c00065e1:	83 ec 08             	sub    $0x8,%esp
c00065e4:	50                   	push   %eax
c00065e5:	68 68 da 00 c0       	push   $0xc000da68
c00065ea:	e8 bf 05 00 00       	call   c0006bae <printk>
c00065ef:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:275
}
c00065f2:	90                   	nop
c00065f3:	c9                   	leave  
c00065f4:	c3                   	ret    

c00065f5 <partition_scan>:
partition_scan():
/work/x86_os_my/device/ide.c:278

/* 扫描硬盘hd中地址为ext_lba的扇区中的所有分区 */
static void partition_scan(struct disk* hd, uint32_t ext_lba) {
c00065f5:	55                   	push   %ebp
c00065f6:	89 e5                	mov    %esp,%ebp
c00065f8:	53                   	push   %ebx
c00065f9:	83 ec 14             	sub    $0x14,%esp
/work/x86_os_my/device/ide.c:279
	struct boot_sector* bs = sys_malloc(sizeof(struct boot_sector));
c00065fc:	83 ec 0c             	sub    $0xc,%esp
c00065ff:	68 00 02 00 00       	push   $0x200
c0006604:	e8 f3 c7 ff ff       	call   c0002dfc <sys_malloc>
c0006609:	83 c4 10             	add    $0x10,%esp
c000660c:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/device/ide.c:280
	ide_read(hd, ext_lba, bs, 1);
c000660f:	6a 01                	push   $0x1
c0006611:	ff 75 ec             	pushl  -0x14(%ebp)
c0006614:	ff 75 0c             	pushl  0xc(%ebp)
c0006617:	ff 75 08             	pushl  0x8(%ebp)
c000661a:	e8 16 fb ff ff       	call   c0006135 <ide_read>
c000661f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:281
	uint8_t part_idx = 0;
c0006622:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/device/ide.c:282
	struct partition_table_entry* p = bs->partition_table;
c0006626:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0006629:	05 be 01 00 00       	add    $0x1be,%eax
c000662e:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:285

	/* 遍历分区表4个分区表项 */
	while (part_idx++ < 4) {
c0006631:	e9 53 02 00 00       	jmp    c0006889 <partition_scan+0x294>
/work/x86_os_my/device/ide.c:286
		if (p->fs_type == 0x5) {	// 若为扩展分区
c0006636:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006639:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c000663d:	3c 05                	cmp    $0x5,%al
c000663f:	75 50                	jne    c0006691 <partition_scan+0x9c>
/work/x86_os_my/device/ide.c:287
			if (ext_lba_base != 0) {
c0006641:	a1 0c 16 01 c0       	mov    0xc001160c,%eax
c0006646:	85 c0                	test   %eax,%eax
c0006648:	74 22                	je     c000666c <partition_scan+0x77>
/work/x86_os_my/device/ide.c:289
				/* 子扩展分区的start_lba是相对于主引导扇区中的总扩展分区地址 */
				partition_scan(hd, p->start_lba + ext_lba_base);
c000664a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000664d:	8b 40 08             	mov    0x8(%eax),%eax
c0006650:	8b 15 0c 16 01 c0    	mov    0xc001160c,%edx
c0006656:	01 d0                	add    %edx,%eax
c0006658:	83 ec 08             	sub    $0x8,%esp
c000665b:	50                   	push   %eax
c000665c:	ff 75 08             	pushl  0x8(%ebp)
c000665f:	e8 91 ff ff ff       	call   c00065f5 <partition_scan>
c0006664:	83 c4 10             	add    $0x10,%esp
c0006667:	e9 19 02 00 00       	jmp    c0006885 <partition_scan+0x290>
/work/x86_os_my/device/ide.c:292
			} else {	// ext_lba_base为0表示是第一次读取引导块,也就是主引导记录所在的扇区
				/* 记录下扩展分区的起始lba地址,后面所有的扩展分区地址都相对于此 */
				ext_lba_base = p->start_lba;
c000666c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000666f:	8b 40 08             	mov    0x8(%eax),%eax
c0006672:	a3 0c 16 01 c0       	mov    %eax,0xc001160c
/work/x86_os_my/device/ide.c:293
				partition_scan(hd, p->start_lba);
c0006677:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000667a:	8b 40 08             	mov    0x8(%eax),%eax
c000667d:	83 ec 08             	sub    $0x8,%esp
c0006680:	50                   	push   %eax
c0006681:	ff 75 08             	pushl  0x8(%ebp)
c0006684:	e8 6c ff ff ff       	call   c00065f5 <partition_scan>
c0006689:	83 c4 10             	add    $0x10,%esp
c000668c:	e9 f4 01 00 00       	jmp    c0006885 <partition_scan+0x290>
/work/x86_os_my/device/ide.c:295
			}
		} else if (p->fs_type != 0) {	// 若是有效的分区类型
c0006691:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006694:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0006698:	84 c0                	test   %al,%al
c000669a:	0f 84 e5 01 00 00    	je     c0006885 <partition_scan+0x290>
/work/x86_os_my/device/ide.c:296
			if (ext_lba == 0) {	// 此时全是主分区
c00066a0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c00066a4:	0f 85 f9 00 00 00    	jne    c00067a3 <partition_scan+0x1ae>
/work/x86_os_my/device/ide.c:297
				hd->prim_parts[p_no].start_lba = ext_lba + p->start_lba;
c00066aa:	0f b6 05 10 16 01 c0 	movzbl 0xc0011610,%eax
c00066b1:	0f b6 c8             	movzbl %al,%ecx
c00066b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00066b7:	8b 50 08             	mov    0x8(%eax),%edx
c00066ba:	8b 45 0c             	mov    0xc(%ebp),%eax
c00066bd:	01 c2                	add    %eax,%edx
c00066bf:	8b 45 08             	mov    0x8(%ebp),%eax
c00066c2:	c1 e1 06             	shl    $0x6,%ecx
c00066c5:	01 c8                	add    %ecx,%eax
c00066c7:	83 c0 10             	add    $0x10,%eax
c00066ca:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/device/ide.c:298
				hd->prim_parts[p_no].sec_cnt = p->sec_cnt;
c00066cc:	0f b6 05 10 16 01 c0 	movzbl 0xc0011610,%eax
c00066d3:	0f b6 c8             	movzbl %al,%ecx
c00066d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00066d9:	8b 40 0c             	mov    0xc(%eax),%eax
c00066dc:	8b 55 08             	mov    0x8(%ebp),%edx
c00066df:	c1 e1 06             	shl    $0x6,%ecx
c00066e2:	01 ca                	add    %ecx,%edx
c00066e4:	83 c2 14             	add    $0x14,%edx
c00066e7:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/device/ide.c:299
				hd->prim_parts[p_no].my_disk = hd;
c00066e9:	0f b6 05 10 16 01 c0 	movzbl 0xc0011610,%eax
c00066f0:	0f b6 d0             	movzbl %al,%edx
c00066f3:	8b 45 08             	mov    0x8(%ebp),%eax
c00066f6:	c1 e2 06             	shl    $0x6,%edx
c00066f9:	01 d0                	add    %edx,%eax
c00066fb:	8d 50 18             	lea    0x18(%eax),%edx
c00066fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0006701:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/device/ide.c:300
				list_append(&partition_list, &hd->prim_parts[p_no].part_tag);
c0006703:	0f b6 05 10 16 01 c0 	movzbl 0xc0011610,%eax
c000670a:	0f b6 c0             	movzbl %al,%eax
c000670d:	c1 e0 06             	shl    $0x6,%eax
c0006710:	8d 50 10             	lea    0x10(%eax),%edx
c0006713:	8b 45 08             	mov    0x8(%ebp),%eax
c0006716:	01 d0                	add    %edx,%eax
c0006718:	83 c0 0c             	add    $0xc,%eax
c000671b:	83 ec 08             	sub    $0x8,%esp
c000671e:	50                   	push   %eax
c000671f:	68 00 30 01 c0       	push   $0xc0013000
c0006724:	e8 49 e0 ff ff       	call   c0004772 <list_append>
c0006729:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:301
				sprintf(hd->prim_parts[p_no].name, "%s%d", hd->name, p_no + 1);
c000672c:	0f b6 05 10 16 01 c0 	movzbl 0xc0011610,%eax
c0006733:	0f b6 c0             	movzbl %al,%eax
c0006736:	8d 48 01             	lea    0x1(%eax),%ecx
c0006739:	8b 45 08             	mov    0x8(%ebp),%eax
c000673c:	0f b6 15 10 16 01 c0 	movzbl 0xc0011610,%edx
c0006743:	0f b6 d2             	movzbl %dl,%edx
c0006746:	c1 e2 06             	shl    $0x6,%edx
c0006749:	8d 5a 20             	lea    0x20(%edx),%ebx
c000674c:	8b 55 08             	mov    0x8(%ebp),%edx
c000674f:	01 da                	add    %ebx,%edx
c0006751:	83 c2 04             	add    $0x4,%edx
c0006754:	51                   	push   %ecx
c0006755:	50                   	push   %eax
c0006756:	68 7e da 00 c0       	push   $0xc000da7e
c000675b:	52                   	push   %edx
c000675c:	e8 25 f6 ff ff       	call   c0005d86 <sprintf>
c0006761:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:302
				p_no++;
c0006764:	0f b6 05 10 16 01 c0 	movzbl 0xc0011610,%eax
c000676b:	83 c0 01             	add    $0x1,%eax
c000676e:	a2 10 16 01 c0       	mov    %al,0xc0011610
/work/x86_os_my/device/ide.c:303
				ASSERT(p_no < 4);	// 0,1,2,3
c0006773:	0f b6 05 10 16 01 c0 	movzbl 0xc0011610,%eax
c000677a:	3c 03                	cmp    $0x3,%al
c000677c:	0f 86 03 01 00 00    	jbe    c0006885 <partition_scan+0x290>
/work/x86_os_my/device/ide.c:303 (discriminator 1)
c0006782:	68 83 da 00 c0       	push   $0xc000da83
c0006787:	68 70 db 00 c0       	push   $0xc000db70
c000678c:	68 2f 01 00 00       	push   $0x12f
c0006791:	68 af d9 00 c0       	push   $0xc000d9af
c0006796:	e8 b6 bc ff ff       	call   c0002451 <panic_spin>
c000679b:	83 c4 10             	add    $0x10,%esp
c000679e:	e9 e2 00 00 00       	jmp    c0006885 <partition_scan+0x290>
/work/x86_os_my/device/ide.c:305
			} else {
				hd->logic_parts[l_no].start_lba = ext_lba + p->start_lba;
c00067a3:	0f b6 05 11 16 01 c0 	movzbl 0xc0011611,%eax
c00067aa:	0f b6 c8             	movzbl %al,%ecx
c00067ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00067b0:	8b 50 08             	mov    0x8(%eax),%edx
c00067b3:	8b 45 0c             	mov    0xc(%ebp),%eax
c00067b6:	01 c2                	add    %eax,%edx
c00067b8:	8b 45 08             	mov    0x8(%ebp),%eax
c00067bb:	c1 e1 06             	shl    $0x6,%ecx
c00067be:	01 c8                	add    %ecx,%eax
c00067c0:	05 10 01 00 00       	add    $0x110,%eax
c00067c5:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/device/ide.c:306
				hd->logic_parts[l_no].sec_cnt = p->sec_cnt;
c00067c7:	0f b6 05 11 16 01 c0 	movzbl 0xc0011611,%eax
c00067ce:	0f b6 c8             	movzbl %al,%ecx
c00067d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00067d4:	8b 40 0c             	mov    0xc(%eax),%eax
c00067d7:	8b 55 08             	mov    0x8(%ebp),%edx
c00067da:	c1 e1 06             	shl    $0x6,%ecx
c00067dd:	01 ca                	add    %ecx,%edx
c00067df:	81 c2 14 01 00 00    	add    $0x114,%edx
c00067e5:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/device/ide.c:307
				hd->logic_parts[l_no].my_disk = hd;
c00067e7:	0f b6 05 11 16 01 c0 	movzbl 0xc0011611,%eax
c00067ee:	0f b6 d0             	movzbl %al,%edx
c00067f1:	8b 45 08             	mov    0x8(%ebp),%eax
c00067f4:	c1 e2 06             	shl    $0x6,%edx
c00067f7:	01 d0                	add    %edx,%eax
c00067f9:	8d 90 18 01 00 00    	lea    0x118(%eax),%edx
c00067ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0006802:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/device/ide.c:308
				list_append(&partition_list, &hd->logic_parts[l_no].part_tag);
c0006804:	0f b6 05 11 16 01 c0 	movzbl 0xc0011611,%eax
c000680b:	0f b6 c0             	movzbl %al,%eax
c000680e:	c1 e0 06             	shl    $0x6,%eax
c0006811:	8d 90 10 01 00 00    	lea    0x110(%eax),%edx
c0006817:	8b 45 08             	mov    0x8(%ebp),%eax
c000681a:	01 d0                	add    %edx,%eax
c000681c:	83 c0 0c             	add    $0xc,%eax
c000681f:	83 ec 08             	sub    $0x8,%esp
c0006822:	50                   	push   %eax
c0006823:	68 00 30 01 c0       	push   $0xc0013000
c0006828:	e8 45 df ff ff       	call   c0004772 <list_append>
c000682d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:309
				sprintf(hd->logic_parts[l_no].name, "%s%d", hd->name, l_no + 5);	// 逻辑分区数字是从5开始,主分区是1～4.
c0006830:	0f b6 05 11 16 01 c0 	movzbl 0xc0011611,%eax
c0006837:	0f b6 c0             	movzbl %al,%eax
c000683a:	8d 48 05             	lea    0x5(%eax),%ecx
c000683d:	8b 45 08             	mov    0x8(%ebp),%eax
c0006840:	0f b6 15 11 16 01 c0 	movzbl 0xc0011611,%edx
c0006847:	0f b6 d2             	movzbl %dl,%edx
c000684a:	c1 e2 06             	shl    $0x6,%edx
c000684d:	8d 9a 20 01 00 00    	lea    0x120(%edx),%ebx
c0006853:	8b 55 08             	mov    0x8(%ebp),%edx
c0006856:	01 da                	add    %ebx,%edx
c0006858:	83 c2 04             	add    $0x4,%edx
c000685b:	51                   	push   %ecx
c000685c:	50                   	push   %eax
c000685d:	68 7e da 00 c0       	push   $0xc000da7e
c0006862:	52                   	push   %edx
c0006863:	e8 1e f5 ff ff       	call   c0005d86 <sprintf>
c0006868:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:310
				l_no++;
c000686b:	0f b6 05 11 16 01 c0 	movzbl 0xc0011611,%eax
c0006872:	83 c0 01             	add    $0x1,%eax
c0006875:	a2 11 16 01 c0       	mov    %al,0xc0011611
/work/x86_os_my/device/ide.c:311
				if (l_no >= 8)	// 只支持8个逻辑分区,避免数组越界
c000687a:	0f b6 05 11 16 01 c0 	movzbl 0xc0011611,%eax
c0006881:	3c 07                	cmp    $0x7,%al
c0006883:	77 26                	ja     c00068ab <partition_scan+0x2b6>
/work/x86_os_my/device/ide.c:315
					return;
			}
		}
		p++;
c0006885:	83 45 f0 10          	addl   $0x10,-0x10(%ebp)
/work/x86_os_my/device/ide.c:285
	ide_read(hd, ext_lba, bs, 1);
	uint8_t part_idx = 0;
	struct partition_table_entry* p = bs->partition_table;

	/* 遍历分区表4个分区表项 */
	while (part_idx++ < 4) {
c0006889:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000688d:	8d 50 01             	lea    0x1(%eax),%edx
c0006890:	88 55 f7             	mov    %dl,-0x9(%ebp)
c0006893:	3c 03                	cmp    $0x3,%al
c0006895:	0f 86 9b fd ff ff    	jbe    c0006636 <partition_scan+0x41>
/work/x86_os_my/device/ide.c:317
					return;
			}
		}
		p++;
	}
	sys_free(bs);
c000689b:	83 ec 0c             	sub    $0xc,%esp
c000689e:	ff 75 ec             	pushl  -0x14(%ebp)
c00068a1:	e8 83 cb ff ff       	call   c0003429 <sys_free>
c00068a6:	83 c4 10             	add    $0x10,%esp
c00068a9:	eb 01                	jmp    c00068ac <partition_scan+0x2b7>
/work/x86_os_my/device/ide.c:312
				hd->logic_parts[l_no].my_disk = hd;
				list_append(&partition_list, &hd->logic_parts[l_no].part_tag);
				sprintf(hd->logic_parts[l_no].name, "%s%d", hd->name, l_no + 5);	// 逻辑分区数字是从5开始,主分区是1～4.
				l_no++;
				if (l_no >= 8)	// 只支持8个逻辑分区,避免数组越界
					return;
c00068ab:	90                   	nop
/work/x86_os_my/device/ide.c:318
			}
		}
		p++;
	}
	sys_free(bs);
}
c00068ac:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c00068af:	c9                   	leave  
c00068b0:	c3                   	ret    

c00068b1 <partition_info>:
partition_info():
/work/x86_os_my/device/ide.c:321

/* 打印分区信息 */
static bool partition_info(struct list_elem* pelem, int arg UNUSED) {
c00068b1:	55                   	push   %ebp
c00068b2:	89 e5                	mov    %esp,%ebp
c00068b4:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/ide.c:322
	struct partition* part = elem2entry(struct partition, part_tag, pelem);
c00068b7:	8b 45 08             	mov    0x8(%ebp),%eax
c00068ba:	83 e8 0c             	sub    $0xc,%eax
c00068bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/ide.c:323
	printk("   %s start_lba:0x%x, sec_cnt:0x%x\n",part->name, part->start_lba, part->sec_cnt);
c00068c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00068c3:	8b 50 04             	mov    0x4(%eax),%edx
c00068c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00068c9:	8b 00                	mov    (%eax),%eax
c00068cb:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c00068ce:	83 c1 14             	add    $0x14,%ecx
c00068d1:	52                   	push   %edx
c00068d2:	50                   	push   %eax
c00068d3:	51                   	push   %ecx
c00068d4:	68 8c da 00 c0       	push   $0xc000da8c
c00068d9:	e8 d0 02 00 00       	call   c0006bae <printk>
c00068de:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:327

	/* 在此处return false与函数本身功能无关,
	 * 只是为了让主调函数list_traversal继续向下遍历元素 */
	return false;
c00068e1:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/device/ide.c:328
}
c00068e6:	c9                   	leave  
c00068e7:	c3                   	ret    

c00068e8 <intr_hd_handler>:
intr_hd_handler():
/work/x86_os_my/device/ide.c:331

/* 硬盘中断处理程序 */
void intr_hd_handler(uint8_t irq_no) {
c00068e8:	55                   	push   %ebp
c00068e9:	89 e5                	mov    %esp,%ebp
c00068eb:	83 ec 28             	sub    $0x28,%esp
c00068ee:	8b 45 08             	mov    0x8(%ebp),%eax
c00068f1:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/device/ide.c:332
	ASSERT(irq_no == 0x2e || irq_no == 0x2f);
c00068f4:	80 7d e4 2e          	cmpb   $0x2e,-0x1c(%ebp)
c00068f8:	74 22                	je     c000691c <intr_hd_handler+0x34>
/work/x86_os_my/device/ide.c:332 (discriminator 1)
c00068fa:	80 7d e4 2f          	cmpb   $0x2f,-0x1c(%ebp)
c00068fe:	74 1c                	je     c000691c <intr_hd_handler+0x34>
/work/x86_os_my/device/ide.c:332 (discriminator 2)
c0006900:	68 b0 da 00 c0       	push   $0xc000dab0
c0006905:	68 80 db 00 c0       	push   $0xc000db80
c000690a:	68 4c 01 00 00       	push   $0x14c
c000690f:	68 af d9 00 c0       	push   $0xc000d9af
c0006914:	e8 38 bb ff ff       	call   c0002451 <panic_spin>
c0006919:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:333
	uint8_t ch_no = irq_no - 0x2e;
c000691c:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0006920:	83 e8 2e             	sub    $0x2e,%eax
c0006923:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/device/ide.c:334
	struct ide_channel* channel = &channels[ch_no];
c0006926:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000692a:	69 c0 60 06 00 00    	imul   $0x660,%eax,%eax
c0006930:	05 40 23 01 c0       	add    $0xc0012340,%eax
c0006935:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:335
	ASSERT(channel->irq_no == irq_no);
c0006938:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000693b:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
c000693f:	3a 45 e4             	cmp    -0x1c(%ebp),%al
c0006942:	74 1c                	je     c0006960 <intr_hd_handler+0x78>
/work/x86_os_my/device/ide.c:335 (discriminator 1)
c0006944:	68 d1 da 00 c0       	push   $0xc000dad1
c0006949:	68 80 db 00 c0       	push   $0xc000db80
c000694e:	68 4f 01 00 00       	push   $0x14f
c0006953:	68 af d9 00 c0       	push   $0xc000d9af
c0006958:	e8 f4 ba ff ff       	call   c0002451 <panic_spin>
c000695d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:338
	/* 不必担心此中断是否对应的是这一次的expecting_intr,
	* 每次读写硬盘时会申请锁,从而保证了同步一致性 */
	if (channel->expecting_intr) {
c0006960:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006963:	8b 40 28             	mov    0x28(%eax),%eax
c0006966:	85 c0                	test   %eax,%eax
c0006968:	74 35                	je     c000699f <intr_hd_handler+0xb7>
/work/x86_os_my/device/ide.c:339
		channel->expecting_intr = false;
c000696a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000696d:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
/work/x86_os_my/device/ide.c:340
		sema_up(&channel->disk_done);
c0006974:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006977:	83 c0 2c             	add    $0x2c,%eax
c000697a:	83 ec 0c             	sub    $0xc,%esp
c000697d:	50                   	push   %eax
c000697e:	e8 7d e1 ff ff       	call   c0004b00 <sema_up>
c0006983:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:343

		/* 读取状态寄存器使硬盘控制器认为此次的中断已被处理,从而硬盘可以继续执行新的读写 */
		inb(reg_status(channel));
c0006986:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006989:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c000698d:	83 c0 07             	add    $0x7,%eax
c0006990:	0f b7 c0             	movzwl %ax,%eax
c0006993:	83 ec 0c             	sub    $0xc,%esp
c0006996:	50                   	push   %eax
c0006997:	e8 de f4 ff ff       	call   c0005e7a <inb>
c000699c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:345
	}
}
c000699f:	90                   	nop
c00069a0:	c9                   	leave  
c00069a1:	c3                   	ret    

c00069a2 <ide_init>:
ide_init():
/work/x86_os_my/device/ide.c:348

/* 硬盘数据结构初始化 */
void ide_init() {
c00069a2:	55                   	push   %ebp
c00069a3:	89 e5                	mov    %esp,%ebp
c00069a5:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/ide.c:349
	printk("ide_init start\n");
c00069a8:	83 ec 0c             	sub    $0xc,%esp
c00069ab:	68 eb da 00 c0       	push   $0xc000daeb
c00069b0:	e8 f9 01 00 00       	call   c0006bae <printk>
c00069b5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:350
	uint8_t hd_cnt = *((uint8_t*)(0x475));	// 获取硬盘的数量
c00069b8:	b8 75 04 00 00       	mov    $0x475,%eax
c00069bd:	0f b6 00             	movzbl (%eax),%eax
c00069c0:	88 45 f5             	mov    %al,-0xb(%ebp)
/work/x86_os_my/device/ide.c:351
	ASSERT(hd_cnt > 0);
c00069c3:	80 7d f5 00          	cmpb   $0x0,-0xb(%ebp)
c00069c7:	75 1c                	jne    c00069e5 <ide_init+0x43>
/work/x86_os_my/device/ide.c:351 (discriminator 1)
c00069c9:	68 fb da 00 c0       	push   $0xc000dafb
c00069ce:	68 90 db 00 c0       	push   $0xc000db90
c00069d3:	68 5f 01 00 00       	push   $0x15f
c00069d8:	68 af d9 00 c0       	push   $0xc000d9af
c00069dd:	e8 6f ba ff ff       	call   c0002451 <panic_spin>
c00069e2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:352
	list_init(&partition_list);
c00069e5:	83 ec 0c             	sub    $0xc,%esp
c00069e8:	68 00 30 01 c0       	push   $0xc0013000
c00069ed:	e8 ef dc ff ff       	call   c00046e1 <list_init>
c00069f2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:353
	channel_cnt = DIV_ROUND_UP(hd_cnt, 2);	// 一个ide通道上有两个硬盘,根据硬盘数量反推有几个ide通道
c00069f5:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c00069f9:	83 c0 01             	add    $0x1,%eax
c00069fc:	89 c2                	mov    %eax,%edx
c00069fe:	c1 ea 1f             	shr    $0x1f,%edx
c0006a01:	01 d0                	add    %edx,%eax
c0006a03:	d1 f8                	sar    %eax
c0006a05:	a2 20 23 01 c0       	mov    %al,0xc0012320
/work/x86_os_my/device/ide.c:355
	struct ide_channel* channel;
	uint8_t channel_no = 0, dev_no = 0;
c0006a0a:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
c0006a0e:	c6 45 f6 00          	movb   $0x0,-0xa(%ebp)
/work/x86_os_my/device/ide.c:358

	/* 处理每个通道上的硬盘 */
	while (channel_no < channel_cnt) {
c0006a12:	e9 4d 01 00 00       	jmp    c0006b64 <ide_init+0x1c2>
/work/x86_os_my/device/ide.c:359
		channel = &channels[channel_no];
c0006a17:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0006a1b:	69 c0 60 06 00 00    	imul   $0x660,%eax,%eax
c0006a21:	05 40 23 01 c0       	add    $0xc0012340,%eax
c0006a26:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:360
		sprintf(channel->name, "ide%d", channel_no);
c0006a29:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c0006a2d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006a30:	83 ec 04             	sub    $0x4,%esp
c0006a33:	52                   	push   %edx
c0006a34:	68 06 db 00 c0       	push   $0xc000db06
c0006a39:	50                   	push   %eax
c0006a3a:	e8 47 f3 ff ff       	call   c0005d86 <sprintf>
c0006a3f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:363

		/* 为每个ide通道初始化端口基址及中断向量 */
		switch (channel_no) {
c0006a42:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0006a46:	85 c0                	test   %eax,%eax
c0006a48:	74 07                	je     c0006a51 <ide_init+0xaf>
c0006a4a:	83 f8 01             	cmp    $0x1,%eax
c0006a4d:	74 14                	je     c0006a63 <ide_init+0xc1>
c0006a4f:	eb 23                	jmp    c0006a74 <ide_init+0xd2>
/work/x86_os_my/device/ide.c:365
			case 0:
			channel->port_base	 = 0x1f0;	// ide0通道的起始端口号是0x1f0
c0006a51:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006a54:	66 c7 40 08 f0 01    	movw   $0x1f0,0x8(%eax)
/work/x86_os_my/device/ide.c:366
			channel->irq_no	 = 0x20 + 14;	// 从片8259a上倒数第二的中断引脚,温盘,也就是ide0通道的的中断向量号
c0006a5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006a5d:	c6 40 0a 2e          	movb   $0x2e,0xa(%eax)
/work/x86_os_my/device/ide.c:367
			break;
c0006a61:	eb 11                	jmp    c0006a74 <ide_init+0xd2>
/work/x86_os_my/device/ide.c:370
			
			case 1:
			channel->port_base	 = 0x170;	// ide1通道的起始端口号是0x170
c0006a63:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006a66:	66 c7 40 08 70 01    	movw   $0x170,0x8(%eax)
/work/x86_os_my/device/ide.c:371
			channel->irq_no	 = 0x20 + 15;	// 从8259A上的最后一个中断引脚,我们用来响应ide1通道上的硬盘中断
c0006a6c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006a6f:	c6 40 0a 2f          	movb   $0x2f,0xa(%eax)
/work/x86_os_my/device/ide.c:372
			break;
c0006a73:	90                   	nop
/work/x86_os_my/device/ide.c:375
		}

		channel->expecting_intr = false;	// 未向硬盘写入指令时不期待硬盘的中断
c0006a74:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006a77:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
/work/x86_os_my/device/ide.c:376
		lock_init(&channel->lock);
c0006a7e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006a81:	83 c0 0c             	add    $0xc,%eax
c0006a84:	83 ec 0c             	sub    $0xc,%esp
c0006a87:	50                   	push   %eax
c0006a88:	e8 48 df ff ff       	call   c00049d5 <lock_init>
c0006a8d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:380

		/* 初始化为0,目的是向硬盘控制器请求数据后,硬盘驱动sema_down此信号量会阻塞线程,
		直到硬盘完成后通过发中断,由中断处理程序将此信号量sema_up,唤醒线程. */
		sema_init(&channel->disk_done, 0);
c0006a90:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006a93:	83 c0 2c             	add    $0x2c,%eax
c0006a96:	83 ec 08             	sub    $0x8,%esp
c0006a99:	6a 00                	push   $0x0
c0006a9b:	50                   	push   %eax
c0006a9c:	e8 0a df ff ff       	call   c00049ab <sema_init>
c0006aa1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:381
		register_handler(channel->irq_no, intr_hd_handler);
c0006aa4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006aa7:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
c0006aab:	0f b6 c0             	movzbl %al,%eax
c0006aae:	83 ec 08             	sub    $0x8,%esp
c0006ab1:	68 e8 68 00 c0       	push   $0xc00068e8
c0006ab6:	50                   	push   %eax
c0006ab7:	e8 1c b0 ff ff       	call   c0001ad8 <register_handler>
c0006abc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:384

		/* 分别获取两个硬盘的参数及分区信息 */
		while (dev_no < 2) {
c0006abf:	e9 88 00 00 00       	jmp    c0006b4c <ide_init+0x1aa>
/work/x86_os_my/device/ide.c:385
			struct disk* hd = &channel->devices[dev_no];
c0006ac4:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0006ac8:	69 c0 10 03 00 00    	imul   $0x310,%eax,%eax
c0006ace:	8d 50 40             	lea    0x40(%eax),%edx
c0006ad1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006ad4:	01 d0                	add    %edx,%eax
c0006ad6:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/device/ide.c:386
			hd->my_channel = channel;
c0006ad9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0006adc:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0006adf:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/device/ide.c:387
			hd->dev_no = dev_no;
c0006ae2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0006ae5:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
c0006ae9:	88 50 0c             	mov    %dl,0xc(%eax)
/work/x86_os_my/device/ide.c:388
			sprintf(hd->name, "sd%c", 'a' + channel_no * 2 + dev_no);
c0006aec:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0006af0:	01 c0                	add    %eax,%eax
c0006af2:	8d 50 61             	lea    0x61(%eax),%edx
c0006af5:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0006af9:	01 c2                	add    %eax,%edx
c0006afb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0006afe:	83 ec 04             	sub    $0x4,%esp
c0006b01:	52                   	push   %edx
c0006b02:	68 0c db 00 c0       	push   $0xc000db0c
c0006b07:	50                   	push   %eax
c0006b08:	e8 79 f2 ff ff       	call   c0005d86 <sprintf>
c0006b0d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:389
			identify_disk(hd);		// 获取硬盘参数
c0006b10:	83 ec 0c             	sub    $0xc,%esp
c0006b13:	ff 75 ec             	pushl  -0x14(%ebp)
c0006b16:	e8 5d f9 ff ff       	call   c0006478 <identify_disk>
c0006b1b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:390
			if (dev_no != 0) {		// 内核本身的裸硬盘(hd60M.img)不处理
c0006b1e:	80 7d f6 00          	cmpb   $0x0,-0xa(%ebp)
c0006b22:	74 10                	je     c0006b34 <ide_init+0x192>
/work/x86_os_my/device/ide.c:391
				partition_scan(hd, 0);	// 扫描该硬盘上的分区
c0006b24:	83 ec 08             	sub    $0x8,%esp
c0006b27:	6a 00                	push   $0x0
c0006b29:	ff 75 ec             	pushl  -0x14(%ebp)
c0006b2c:	e8 c4 fa ff ff       	call   c00065f5 <partition_scan>
c0006b31:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:393
			}
			p_no = 0, l_no = 0;
c0006b34:	c6 05 10 16 01 c0 00 	movb   $0x0,0xc0011610
c0006b3b:	c6 05 11 16 01 c0 00 	movb   $0x0,0xc0011611
/work/x86_os_my/device/ide.c:394
			dev_no++;
c0006b42:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0006b46:	83 c0 01             	add    $0x1,%eax
c0006b49:	88 45 f6             	mov    %al,-0xa(%ebp)
/work/x86_os_my/device/ide.c:384
		直到硬盘完成后通过发中断,由中断处理程序将此信号量sema_up,唤醒线程. */
		sema_init(&channel->disk_done, 0);
		register_handler(channel->irq_no, intr_hd_handler);

		/* 分别获取两个硬盘的参数及分区信息 */
		while (dev_no < 2) {
c0006b4c:	80 7d f6 01          	cmpb   $0x1,-0xa(%ebp)
c0006b50:	0f 86 6e ff ff ff    	jbe    c0006ac4 <ide_init+0x122>
/work/x86_os_my/device/ide.c:396
				partition_scan(hd, 0);	// 扫描该硬盘上的分区
			}
			p_no = 0, l_no = 0;
			dev_no++;
		}
		dev_no = 0;		// 将硬盘驱动器号置0,为下一个channel的两个硬盘初始化。
c0006b56:	c6 45 f6 00          	movb   $0x0,-0xa(%ebp)
/work/x86_os_my/device/ide.c:397
		channel_no++;	// 下一个channel
c0006b5a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0006b5e:	83 c0 01             	add    $0x1,%eax
c0006b61:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/device/ide.c:358
	channel_cnt = DIV_ROUND_UP(hd_cnt, 2);	// 一个ide通道上有两个硬盘,根据硬盘数量反推有几个ide通道
	struct ide_channel* channel;
	uint8_t channel_no = 0, dev_no = 0;

	/* 处理每个通道上的硬盘 */
	while (channel_no < channel_cnt) {
c0006b64:	0f b6 05 20 23 01 c0 	movzbl 0xc0012320,%eax
c0006b6b:	38 45 f7             	cmp    %al,-0x9(%ebp)
c0006b6e:	0f 82 a3 fe ff ff    	jb     c0006a17 <ide_init+0x75>
/work/x86_os_my/device/ide.c:400
		}
		dev_no = 0;		// 将硬盘驱动器号置0,为下一个channel的两个硬盘初始化。
		channel_no++;	// 下一个channel
	}

	printk("\n   all partition info\n");
c0006b74:	83 ec 0c             	sub    $0xc,%esp
c0006b77:	68 11 db 00 c0       	push   $0xc000db11
c0006b7c:	e8 2d 00 00 00       	call   c0006bae <printk>
c0006b81:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:402
	/* 打印所有分区信息 */
	list_traversal(&partition_list, partition_info, (int)NULL);
c0006b84:	83 ec 04             	sub    $0x4,%esp
c0006b87:	6a 00                	push   $0x0
c0006b89:	68 b1 68 00 c0       	push   $0xc00068b1
c0006b8e:	68 00 30 01 c0       	push   $0xc0013000
c0006b93:	e8 8f dc ff ff       	call   c0004827 <list_traversal>
c0006b98:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:403
	printk("ide_init done\n");
c0006b9b:	83 ec 0c             	sub    $0xc,%esp
c0006b9e:	68 29 db 00 c0       	push   $0xc000db29
c0006ba3:	e8 06 00 00 00       	call   c0006bae <printk>
c0006ba8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:404
}
c0006bab:	90                   	nop
c0006bac:	c9                   	leave  
c0006bad:	c3                   	ret    

c0006bae <printk>:
printk():
/work/x86_os_my/lib/kernel/stdio-kernel.c:11

#define va_start(args, first_fix) args = (va_list)&first_fix
#define va_end(args) args = NULL

/* 供内核使用的格式化输出函数 */
void printk(const char* format, ...) {
c0006bae:	55                   	push   %ebp
c0006baf:	89 e5                	mov    %esp,%ebp
c0006bb1:	57                   	push   %edi
c0006bb2:	81 ec 14 04 00 00    	sub    $0x414,%esp
/work/x86_os_my/lib/kernel/stdio-kernel.c:13
	va_list args;
	va_start(args, format);
c0006bb8:	8d 45 08             	lea    0x8(%ebp),%eax
c0006bbb:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/stdio-kernel.c:14
	char buf[1024] = {0};
c0006bbe:	8d 95 f4 fb ff ff    	lea    -0x40c(%ebp),%edx
c0006bc4:	b8 00 00 00 00       	mov    $0x0,%eax
c0006bc9:	b9 00 01 00 00       	mov    $0x100,%ecx
c0006bce:	89 d7                	mov    %edx,%edi
c0006bd0:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/lib/kernel/stdio-kernel.c:15
	vsprintf(buf, format, args);
c0006bd2:	8b 45 08             	mov    0x8(%ebp),%eax
c0006bd5:	83 ec 04             	sub    $0x4,%esp
c0006bd8:	ff 75 f4             	pushl  -0xc(%ebp)
c0006bdb:	50                   	push   %eax
c0006bdc:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c0006be2:	50                   	push   %eax
c0006be3:	e8 21 f0 ff ff       	call   c0005c09 <vsprintf>
c0006be8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/stdio-kernel.c:16
	va_end(args);
c0006beb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/kernel/stdio-kernel.c:17
	console_put_str(buf);
c0006bf2:	83 ec 0c             	sub    $0xc,%esp
c0006bf5:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c0006bfb:	50                   	push   %eax
c0006bfc:	e8 3f dd ff ff       	call   c0004940 <console_put_str>
c0006c01:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/stdio-kernel.c:18
}
c0006c04:	90                   	nop
c0006c05:	8b 7d fc             	mov    -0x4(%ebp),%edi
c0006c08:	c9                   	leave  
c0006c09:	c3                   	ret    

c0006c0a <mount_partition>:
mount_partition():
/work/x86_os_my/fs/fs.c:27
把该分区文件系统的元信息从硬盘上读出来加载到内存中，
这样硬盘资源的变化都用内存中元信息来跟踪，
如果有写操作，及时将内存中的元信息同步写入到硬盘以持久化。
*/
//sb_buf没释放！
static bool mount_partition(struct list_elem* pelem, int arg) {
c0006c0a:	55                   	push   %ebp
c0006c0b:	89 e5                	mov    %esp,%ebp
c0006c0d:	53                   	push   %ebx
c0006c0e:	83 ec 14             	sub    $0x14,%esp
/work/x86_os_my/fs/fs.c:28
	char* part_name = (char*)arg;	// sdb1
c0006c11:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006c14:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:29
	struct partition* part = elem2entry(struct partition, part_tag, pelem);	// 根据pelem找到partition
c0006c17:	8b 45 08             	mov    0x8(%ebp),%eax
c0006c1a:	83 e8 0c             	sub    $0xc,%eax
c0006c1d:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:30
	if (!strcmp(part->name, part_name)) {	//名字一致
c0006c20:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006c23:	83 c0 14             	add    $0x14,%eax
c0006c26:	83 ec 08             	sub    $0x8,%esp
c0006c29:	ff 75 f4             	pushl  -0xc(%ebp)
c0006c2c:	50                   	push   %eax
c0006c2d:	e8 96 ce ff ff       	call   c0003ac8 <strcmp>
c0006c32:	83 c4 10             	add    $0x10,%esp
c0006c35:	84 c0                	test   %al,%al
c0006c37:	0f 85 ce 01 00 00    	jne    c0006e0b <mount_partition+0x201>
/work/x86_os_my/fs/fs.c:31
		cur_part = part;
c0006c3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006c40:	a3 10 30 01 c0       	mov    %eax,0xc0013010
/work/x86_os_my/fs/fs.c:32
		struct disk* hd = cur_part->my_disk;
c0006c45:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0006c4a:	8b 40 08             	mov    0x8(%eax),%eax
c0006c4d:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:33
		struct super_block* sb_buf = (struct super_block*)sys_malloc(SECTOR_SIZE);
c0006c50:	83 ec 0c             	sub    $0xc,%esp
c0006c53:	68 00 02 00 00       	push   $0x200
c0006c58:	e8 9f c1 ff ff       	call   c0002dfc <sys_malloc>
c0006c5d:	83 c4 10             	add    $0x10,%esp
c0006c60:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:37

		/* 在内存中创建分区cur_part的超级块 */
		// super_block 占用了1个扇区，但是它后边有很多数据是pad只做填充用
		cur_part->sb = (struct super_block*)sys_malloc(sizeof(struct super_block));
c0006c63:	8b 1d 10 30 01 c0    	mov    0xc0013010,%ebx
c0006c69:	83 ec 0c             	sub    $0xc,%esp
c0006c6c:	68 00 02 00 00       	push   $0x200
c0006c71:	e8 86 c1 ff ff       	call   c0002dfc <sys_malloc>
c0006c76:	83 c4 10             	add    $0x10,%esp
c0006c79:	89 43 1c             	mov    %eax,0x1c(%ebx)
/work/x86_os_my/fs/fs.c:38
		if (cur_part->sb == NULL) {
c0006c7c:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0006c81:	8b 40 1c             	mov    0x1c(%eax),%eax
c0006c84:	85 c0                	test   %eax,%eax
c0006c86:	75 19                	jne    c0006ca1 <mount_partition+0x97>
/work/x86_os_my/fs/fs.c:39
			PANIC("alloc memory failed!");
c0006c88:	68 9c db 00 c0       	push   $0xc000db9c
c0006c8d:	68 70 e3 00 c0       	push   $0xc000e370
c0006c92:	6a 27                	push   $0x27
c0006c94:	68 b1 db 00 c0       	push   $0xc000dbb1
c0006c99:	e8 b3 b7 ff ff       	call   c0002451 <panic_spin>
c0006c9e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:43
		}

		/* 读入超级块 */
		memset(sb_buf, 0, SECTOR_SIZE);
c0006ca1:	83 ec 04             	sub    $0x4,%esp
c0006ca4:	68 00 02 00 00       	push   $0x200
c0006ca9:	6a 00                	push   $0x0
c0006cab:	ff 75 e8             	pushl  -0x18(%ebp)
c0006cae:	e8 40 cc ff ff       	call   c00038f3 <memset>
c0006cb3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:44
		ide_read(hd, cur_part->start_lba + 1, sb_buf, 1);
c0006cb6:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0006cbb:	8b 00                	mov    (%eax),%eax
c0006cbd:	83 c0 01             	add    $0x1,%eax
c0006cc0:	6a 01                	push   $0x1
c0006cc2:	ff 75 e8             	pushl  -0x18(%ebp)
c0006cc5:	50                   	push   %eax
c0006cc6:	ff 75 ec             	pushl  -0x14(%ebp)
c0006cc9:	e8 67 f4 ff ff       	call   c0006135 <ide_read>
c0006cce:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:46
		// 拷贝给 cur_part->sb
		memcpy(cur_part->sb, sb_buf, sizeof(struct super_block));
c0006cd1:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0006cd6:	8b 40 1c             	mov    0x1c(%eax),%eax
c0006cd9:	83 ec 04             	sub    $0x4,%esp
c0006cdc:	68 00 02 00 00       	push   $0x200
c0006ce1:	ff 75 e8             	pushl  -0x18(%ebp)
c0006ce4:	50                   	push   %eax
c0006ce5:	e8 5b cc ff ff       	call   c0003945 <memcpy>
c0006cea:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:49

		/* 读入块位图 */
		cur_part->block_bitmap.bits = (uint8_t*)sys_malloc(sb_buf->block_bitmap_sects * SECTOR_SIZE);
c0006ced:	8b 1d 10 30 01 c0    	mov    0xc0013010,%ebx
c0006cf3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0006cf6:	8b 40 14             	mov    0x14(%eax),%eax
c0006cf9:	c1 e0 09             	shl    $0x9,%eax
c0006cfc:	83 ec 0c             	sub    $0xc,%esp
c0006cff:	50                   	push   %eax
c0006d00:	e8 f7 c0 ff ff       	call   c0002dfc <sys_malloc>
c0006d05:	83 c4 10             	add    $0x10,%esp
c0006d08:	89 43 24             	mov    %eax,0x24(%ebx)
/work/x86_os_my/fs/fs.c:50
		if (cur_part->block_bitmap.bits == NULL) {
c0006d0b:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0006d10:	8b 40 24             	mov    0x24(%eax),%eax
c0006d13:	85 c0                	test   %eax,%eax
c0006d15:	75 19                	jne    c0006d30 <mount_partition+0x126>
/work/x86_os_my/fs/fs.c:51
			PANIC("alloc memory failed!");
c0006d17:	68 9c db 00 c0       	push   $0xc000db9c
c0006d1c:	68 70 e3 00 c0       	push   $0xc000e370
c0006d21:	6a 33                	push   $0x33
c0006d23:	68 b1 db 00 c0       	push   $0xc000dbb1
c0006d28:	e8 24 b7 ff ff       	call   c0002451 <panic_spin>
c0006d2d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:53
		}
		cur_part->block_bitmap.btmp_bytes_len = sb_buf->block_bitmap_sects * SECTOR_SIZE;
c0006d30:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0006d35:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0006d38:	8b 52 14             	mov    0x14(%edx),%edx
c0006d3b:	c1 e2 09             	shl    $0x9,%edx
c0006d3e:	89 50 20             	mov    %edx,0x20(%eax)
/work/x86_os_my/fs/fs.c:54
		ide_read(hd, sb_buf->block_bitmap_lba, cur_part->block_bitmap.bits, sb_buf->block_bitmap_sects);
c0006d41:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0006d44:	8b 48 14             	mov    0x14(%eax),%ecx
c0006d47:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0006d4c:	8b 50 24             	mov    0x24(%eax),%edx
c0006d4f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0006d52:	8b 40 10             	mov    0x10(%eax),%eax
c0006d55:	51                   	push   %ecx
c0006d56:	52                   	push   %edx
c0006d57:	50                   	push   %eax
c0006d58:	ff 75 ec             	pushl  -0x14(%ebp)
c0006d5b:	e8 d5 f3 ff ff       	call   c0006135 <ide_read>
c0006d60:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:57

		/* 读入inode位图 */
		cur_part->inode_bitmap.bits = (uint8_t*)sys_malloc(sb_buf->inode_bitmap_sects * SECTOR_SIZE);
c0006d63:	8b 1d 10 30 01 c0    	mov    0xc0013010,%ebx
c0006d69:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0006d6c:	8b 40 1c             	mov    0x1c(%eax),%eax
c0006d6f:	c1 e0 09             	shl    $0x9,%eax
c0006d72:	83 ec 0c             	sub    $0xc,%esp
c0006d75:	50                   	push   %eax
c0006d76:	e8 81 c0 ff ff       	call   c0002dfc <sys_malloc>
c0006d7b:	83 c4 10             	add    $0x10,%esp
c0006d7e:	89 43 2c             	mov    %eax,0x2c(%ebx)
/work/x86_os_my/fs/fs.c:58
		if (cur_part->inode_bitmap.bits == NULL) {
c0006d81:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0006d86:	8b 40 2c             	mov    0x2c(%eax),%eax
c0006d89:	85 c0                	test   %eax,%eax
c0006d8b:	75 19                	jne    c0006da6 <mount_partition+0x19c>
/work/x86_os_my/fs/fs.c:59
			PANIC("alloc memory failed!");
c0006d8d:	68 9c db 00 c0       	push   $0xc000db9c
c0006d92:	68 70 e3 00 c0       	push   $0xc000e370
c0006d97:	6a 3b                	push   $0x3b
c0006d99:	68 b1 db 00 c0       	push   $0xc000dbb1
c0006d9e:	e8 ae b6 ff ff       	call   c0002451 <panic_spin>
c0006da3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:61
		}
		cur_part->inode_bitmap.btmp_bytes_len = sb_buf->inode_bitmap_sects * SECTOR_SIZE;
c0006da6:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0006dab:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0006dae:	8b 52 1c             	mov    0x1c(%edx),%edx
c0006db1:	c1 e2 09             	shl    $0x9,%edx
c0006db4:	89 50 28             	mov    %edx,0x28(%eax)
/work/x86_os_my/fs/fs.c:62
		ide_read(hd, sb_buf->inode_bitmap_lba, cur_part->inode_bitmap.bits, sb_buf->inode_bitmap_sects);
c0006db7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0006dba:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0006dbd:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0006dc2:	8b 50 2c             	mov    0x2c(%eax),%edx
c0006dc5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0006dc8:	8b 40 18             	mov    0x18(%eax),%eax
c0006dcb:	51                   	push   %ecx
c0006dcc:	52                   	push   %edx
c0006dcd:	50                   	push   %eax
c0006dce:	ff 75 ec             	pushl  -0x14(%ebp)
c0006dd1:	e8 5f f3 ff ff       	call   c0006135 <ide_read>
c0006dd6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:65


		list_init(&cur_part->open_inodes);	// 本分区打开的inode队列！
c0006dd9:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0006dde:	83 c0 30             	add    $0x30,%eax
c0006de1:	83 ec 0c             	sub    $0xc,%esp
c0006de4:	50                   	push   %eax
c0006de5:	e8 f7 d8 ff ff       	call   c00046e1 <list_init>
c0006dea:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:68


		printk("mount %s done!\n", part->name);
c0006ded:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006df0:	83 c0 14             	add    $0x14,%eax
c0006df3:	83 ec 08             	sub    $0x8,%esp
c0006df6:	50                   	push   %eax
c0006df7:	68 b9 db 00 c0       	push   $0xc000dbb9
c0006dfc:	e8 ad fd ff ff       	call   c0006bae <printk>
c0006e01:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:70
		/* 返回true时list_traversal才会停止遍历,减少了后面元素无意义的遍历. */
		return true;
c0006e04:	b8 01 00 00 00       	mov    $0x1,%eax
c0006e09:	eb 05                	jmp    c0006e10 <mount_partition+0x206>
/work/x86_os_my/fs/fs.c:72
	}//if (!strcmp(part->name, part_name))
	return false;	// list_traversal继续遍历
c0006e0b:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/fs.c:73
}
c0006e10:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0006e13:	c9                   	leave  
c0006e14:	c3                   	ret    

c0006e15 <partition_format>:
partition_format():
/work/x86_os_my/fs/fs.c:89
	| 操作系统引导块，超级块，空闲块位图，inode位图，inode数组，根目录，空闲块区域 |
	+------------------------------------------------------------------------------+
	partition结构见ide.h
	MAX_FILES_PER_PART == 4096
****************************************************************************************/
static void partition_format(struct partition* part) {
c0006e15:	55                   	push   %ebp
c0006e16:	89 e5                	mov    %esp,%ebp
c0006e18:	57                   	push   %edi
c0006e19:	56                   	push   %esi
c0006e1a:	53                   	push   %ebx
c0006e1b:	81 ec 7c 02 00 00    	sub    $0x27c,%esp
/work/x86_os_my/fs/fs.c:91
	/* 为方便实现，inode管理的数据块，一个块大小是一扇区 */
	uint32_t boot_sector_sects = 1;		//引导块
c0006e21:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
/work/x86_os_my/fs/fs.c:92
	uint32_t super_block_sects = 1;		//超级块
c0006e28:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
/work/x86_os_my/fs/fs.c:93
	uint32_t inode_bitmap_sects = DIV_ROUND_UP(MAX_FILES_PER_PART, BITS_PER_SECTOR);	// inode位图占几个扇区.最多支持4096个文件
c0006e2f:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
/work/x86_os_my/fs/fs.c:94
	uint32_t inode_table_sects = DIV_ROUND_UP((sizeof(struct inode) * MAX_FILES_PER_PART), SECTOR_SIZE);	//inode数组占几个扇区
c0006e36:	c7 45 d4 60 02 00 00 	movl   $0x260,-0x2c(%ebp)
/work/x86_os_my/fs/fs.c:95
	uint32_t used_sects = boot_sector_sects + super_block_sects + inode_bitmap_sects + inode_table_sects;
c0006e3d:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0006e40:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0006e43:	01 c2                	add    %eax,%edx
c0006e45:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0006e48:	01 c2                	add    %eax,%edx
c0006e4a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0006e4d:	01 d0                	add    %edx,%eax
c0006e4f:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/fs/fs.c:96
	uint32_t free_sects = part->sec_cnt - used_sects;  
c0006e52:	8b 45 08             	mov    0x8(%ebp),%eax
c0006e55:	8b 40 04             	mov    0x4(%eax),%eax
c0006e58:	2b 45 d0             	sub    -0x30(%ebp),%eax
c0006e5b:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/fs/fs.c:100

	/************** 简单处理块位图占据的扇区数 ***************/
	uint32_t block_bitmap_sects;	//空闲块位图占几个扇区
	block_bitmap_sects = DIV_ROUND_UP(free_sects, BITS_PER_SECTOR);		//free_sects空闲块位图要占几个扇区
c0006e5e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0006e61:	05 ff 0f 00 00       	add    $0xfff,%eax
c0006e66:	c1 e8 0c             	shr    $0xc,%eax
c0006e69:	89 45 c8             	mov    %eax,-0x38(%ebp)
/work/x86_os_my/fs/fs.c:102
	/* 再算一次空闲块数量 */
	uint32_t block_bitmap_bit_len = free_sects - block_bitmap_sects;	//block_bitmap_bit_len 是位图长度，也是空闲块数量
c0006e6c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0006e6f:	2b 45 c8             	sub    -0x38(%ebp),%eax
c0006e72:	89 45 c4             	mov    %eax,-0x3c(%ebp)
/work/x86_os_my/fs/fs.c:103
	block_bitmap_sects = DIV_ROUND_UP(block_bitmap_bit_len, BITS_PER_SECTOR); 
c0006e75:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0006e78:	05 ff 0f 00 00       	add    $0xfff,%eax
c0006e7d:	c1 e8 0c             	shr    $0xc,%eax
c0006e80:	89 45 c8             	mov    %eax,-0x38(%ebp)
/work/x86_os_my/fs/fs.c:108
	/*********************************************************/

	/* 超级块初始化 */
	struct super_block sb;		//局部变量在栈中512字节
	sb.magic = 0x19590318;
c0006e83:	c7 85 a4 fd ff ff 18 	movl   $0x19590318,-0x25c(%ebp)
c0006e8a:	03 59 19 
/work/x86_os_my/fs/fs.c:109
	sb.sec_cnt = part->sec_cnt;
c0006e8d:	8b 45 08             	mov    0x8(%ebp),%eax
c0006e90:	8b 40 04             	mov    0x4(%eax),%eax
c0006e93:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
/work/x86_os_my/fs/fs.c:110
	sb.inode_cnt = MAX_FILES_PER_PART;
c0006e99:	c7 85 ac fd ff ff 00 	movl   $0x1000,-0x254(%ebp)
c0006ea0:	10 00 00 
/work/x86_os_my/fs/fs.c:111
	sb.part_lba_base = part->start_lba;
c0006ea3:	8b 45 08             	mov    0x8(%ebp),%eax
c0006ea6:	8b 00                	mov    (%eax),%eax
c0006ea8:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
/work/x86_os_my/fs/fs.c:113

	sb.block_bitmap_lba = sb.part_lba_base + 2;	// 第0块是引导块,第1块是超级块
c0006eae:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
c0006eb4:	83 c0 02             	add    $0x2,%eax
c0006eb7:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
/work/x86_os_my/fs/fs.c:114
	sb.block_bitmap_sects = block_bitmap_sects;	// 空闲块位图占几个扇区
c0006ebd:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0006ec0:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
/work/x86_os_my/fs/fs.c:116

	sb.inode_bitmap_lba = sb.block_bitmap_lba + sb.block_bitmap_sects;
c0006ec6:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
c0006ecc:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
c0006ed2:	01 d0                	add    %edx,%eax
c0006ed4:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
/work/x86_os_my/fs/fs.c:117
	sb.inode_bitmap_sects = inode_bitmap_sects;	// inode位图占几个扇区
c0006eda:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0006edd:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
/work/x86_os_my/fs/fs.c:119

	sb.inode_table_lba = sb.inode_bitmap_lba + sb.inode_bitmap_sects;
c0006ee3:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
c0006ee9:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
c0006eef:	01 d0                	add    %edx,%eax
c0006ef1:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
/work/x86_os_my/fs/fs.c:120
	sb.inode_table_sects = inode_table_sects;	// inode数组占几个扇区
c0006ef7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0006efa:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
/work/x86_os_my/fs/fs.c:122

	sb.data_start_lba = sb.inode_table_lba + sb.inode_table_sects;	// 数据区开始的第一个扇区号
c0006f00:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
c0006f06:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
c0006f0c:	01 d0                	add    %edx,%eax
c0006f0e:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
/work/x86_os_my/fs/fs.c:124

	sb.root_inode_no = 0;	//根目录的inode号是0
c0006f14:	c7 85 d0 fd ff ff 00 	movl   $0x0,-0x230(%ebp)
c0006f1b:	00 00 00 
/work/x86_os_my/fs/fs.c:125
	sb.dir_entry_size = sizeof(struct dir_entry);
c0006f1e:	c7 85 d4 fd ff ff 18 	movl   $0x18,-0x22c(%ebp)
c0006f25:	00 00 00 
/work/x86_os_my/fs/fs.c:127

	printk("%s info:\n", part->name);
c0006f28:	8b 45 08             	mov    0x8(%ebp),%eax
c0006f2b:	83 c0 14             	add    $0x14,%eax
c0006f2e:	83 ec 08             	sub    $0x8,%esp
c0006f31:	50                   	push   %eax
c0006f32:	68 c9 db 00 c0       	push   $0xc000dbc9
c0006f37:	e8 72 fc ff ff       	call   c0006bae <printk>
c0006f3c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:128
	printk("   magic:0x%x\n   part_lba_base:0x%x\n   all_sectors:0x%x\n   inode_cnt:0x%x\n   block_bitmap_lba:0x%x\n   block_bitmap_sectors:0x%x\n   inode_bitmap_lba:0x%x\n   inode_bitmap_sectors:0x%x\n   inode_table_lba:0x%x\n   inode_table_sectors:0x%x\n   data_start_lba:0x%x\n", sb.magic, sb.part_lba_base, sb.sec_cnt, sb.inode_cnt, sb.block_bitmap_lba, sb.block_bitmap_sects, sb.inode_bitmap_lba, sb.inode_bitmap_sects, sb.inode_table_lba, sb.inode_table_sects, sb.data_start_lba);
c0006f3f:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
c0006f45:	8b 9d c8 fd ff ff    	mov    -0x238(%ebp),%ebx
c0006f4b:	8b bd c4 fd ff ff    	mov    -0x23c(%ebp),%edi
c0006f51:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
c0006f57:	89 85 94 fd ff ff    	mov    %eax,-0x26c(%ebp)
c0006f5d:	8b b5 bc fd ff ff    	mov    -0x244(%ebp),%esi
c0006f63:	89 b5 90 fd ff ff    	mov    %esi,-0x270(%ebp)
c0006f69:	8b 8d b8 fd ff ff    	mov    -0x248(%ebp),%ecx
c0006f6f:	89 8d 8c fd ff ff    	mov    %ecx,-0x274(%ebp)
c0006f75:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
c0006f7b:	89 85 88 fd ff ff    	mov    %eax,-0x278(%ebp)
c0006f81:	8b b5 ac fd ff ff    	mov    -0x254(%ebp),%esi
c0006f87:	89 b5 84 fd ff ff    	mov    %esi,-0x27c(%ebp)
c0006f8d:	8b b5 a8 fd ff ff    	mov    -0x258(%ebp),%esi
c0006f93:	8b 8d b0 fd ff ff    	mov    -0x250(%ebp),%ecx
c0006f99:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
c0006f9f:	52                   	push   %edx
c0006fa0:	53                   	push   %ebx
c0006fa1:	57                   	push   %edi
c0006fa2:	ff b5 94 fd ff ff    	pushl  -0x26c(%ebp)
c0006fa8:	ff b5 90 fd ff ff    	pushl  -0x270(%ebp)
c0006fae:	ff b5 8c fd ff ff    	pushl  -0x274(%ebp)
c0006fb4:	ff b5 88 fd ff ff    	pushl  -0x278(%ebp)
c0006fba:	ff b5 84 fd ff ff    	pushl  -0x27c(%ebp)
c0006fc0:	56                   	push   %esi
c0006fc1:	51                   	push   %ecx
c0006fc2:	50                   	push   %eax
c0006fc3:	68 d4 db 00 c0       	push   $0xc000dbd4
c0006fc8:	e8 e1 fb ff ff       	call   c0006bae <printk>
c0006fcd:	83 c4 30             	add    $0x30,%esp
/work/x86_os_my/fs/fs.c:132


	/***** 1 将超级块写入本分区的1号扇区 *****/
	struct disk* hd = part->my_disk;	// 分区所属的硬盘
c0006fd0:	8b 45 08             	mov    0x8(%ebp),%eax
c0006fd3:	8b 40 08             	mov    0x8(%eax),%eax
c0006fd6:	89 45 c0             	mov    %eax,-0x40(%ebp)
/work/x86_os_my/fs/fs.c:134
	// void ide_write(struct disk* hd, uint32_t lba, void* buf, uint32_t sec_cnt);
	ide_write(hd, part->start_lba + 1, &sb, 1);
c0006fd9:	8b 45 08             	mov    0x8(%ebp),%eax
c0006fdc:	8b 00                	mov    (%eax),%eax
c0006fde:	8d 50 01             	lea    0x1(%eax),%edx
c0006fe1:	6a 01                	push   $0x1
c0006fe3:	8d 85 a4 fd ff ff    	lea    -0x25c(%ebp),%eax
c0006fe9:	50                   	push   %eax
c0006fea:	52                   	push   %edx
c0006feb:	ff 75 c0             	pushl  -0x40(%ebp)
c0006fee:	e8 b6 f2 ff ff       	call   c00062a9 <ide_write>
c0006ff3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:135
	printk("   super_block_lba:0x%x\n", part->start_lba + 1);
c0006ff6:	8b 45 08             	mov    0x8(%ebp),%eax
c0006ff9:	8b 00                	mov    (%eax),%eax
c0006ffb:	83 c0 01             	add    $0x1,%eax
c0006ffe:	83 ec 08             	sub    $0x8,%esp
c0007001:	50                   	push   %eax
c0007002:	68 d6 dc 00 c0       	push   $0xc000dcd6
c0007007:	e8 a2 fb ff ff       	call   c0006bae <printk>
c000700c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:139


	/* 他们三个写到硬盘上：block_bitmap_sects/inode_bitmap_sects/inode_table_sects 缓冲区选三者最大的 */
	uint32_t buf_size = (sb.block_bitmap_sects >= sb.inode_bitmap_sects ? sb.block_bitmap_sects : sb.inode_bitmap_sects);
c000700f:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
c0007015:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
c000701b:	39 c2                	cmp    %eax,%edx
c000701d:	0f 43 c2             	cmovae %edx,%eax
c0007020:	89 45 bc             	mov    %eax,-0x44(%ebp)
/work/x86_os_my/fs/fs.c:140
	buf_size = (buf_size >= sb.inode_table_sects ? buf_size : sb.inode_table_sects) * SECTOR_SIZE;
c0007023:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
c0007029:	8b 45 bc             	mov    -0x44(%ebp),%eax
c000702c:	39 c2                	cmp    %eax,%edx
c000702e:	0f 43 c2             	cmovae %edx,%eax
c0007031:	c1 e0 09             	shl    $0x9,%eax
c0007034:	89 45 bc             	mov    %eax,-0x44(%ebp)
/work/x86_os_my/fs/fs.c:141
	uint8_t* buf = (uint8_t*)sys_malloc(buf_size);	// 申请的内存由内存管理系统清0后返回
c0007037:	83 ec 0c             	sub    $0xc,%esp
c000703a:	ff 75 bc             	pushl  -0x44(%ebp)
c000703d:	e8 ba bd ff ff       	call   c0002dfc <sys_malloc>
c0007042:	83 c4 10             	add    $0x10,%esp
c0007045:	89 45 b8             	mov    %eax,-0x48(%ebp)
/work/x86_os_my/fs/fs.c:146


	/***** 2 将块位图初始化并写入sb.block_bitmap_lba *****/
	/* 初始化块位图 block_bitmap */
	buf[0] |= 0x01;	// 第0个块预留给根目录,位图中先占位
c0007048:	8b 45 b8             	mov    -0x48(%ebp),%eax
c000704b:	0f b6 00             	movzbl (%eax),%eax
c000704e:	83 c8 01             	or     $0x1,%eax
c0007051:	89 c2                	mov    %eax,%edx
c0007053:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0007056:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/fs/fs.c:147
	uint32_t block_bitmap_last_byte = block_bitmap_bit_len / 8;		//block_bitmap_bit_len 是位图长度，也是空闲块数量
c0007058:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c000705b:	c1 e8 03             	shr    $0x3,%eax
c000705e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
/work/x86_os_my/fs/fs.c:148
	uint8_t  block_bitmap_last_bit  = block_bitmap_bit_len % 8;
c0007061:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0007064:	83 e0 07             	and    $0x7,%eax
c0007067:	88 45 b3             	mov    %al,-0x4d(%ebp)
/work/x86_os_my/fs/fs.c:149
	uint32_t last_size = SECTOR_SIZE - (block_bitmap_last_byte % SECTOR_SIZE);	// last_size是位图占用的最后一个扇区中，不足一扇区的空闲部分
c000706a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c000706d:	25 ff 01 00 00       	and    $0x1ff,%eax
c0007072:	ba 00 02 00 00       	mov    $0x200,%edx
c0007077:	29 c2                	sub    %eax,%edx
c0007079:	89 d0                	mov    %edx,%eax
c000707b:	89 45 ac             	mov    %eax,-0x54(%ebp)
/work/x86_os_my/fs/fs.c:152

	// 1 空闲块位图最后一字节，到最后一字节所在扇区的末尾，全置为占用（空闲块位图所在扇区的空闲部分）
	memset(&buf[block_bitmap_last_byte], 0xff, last_size);
c000707e:	8b 55 b8             	mov    -0x48(%ebp),%edx
c0007081:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0007084:	01 d0                	add    %edx,%eax
c0007086:	83 ec 04             	sub    $0x4,%esp
c0007089:	ff 75 ac             	pushl  -0x54(%ebp)
c000708c:	68 ff 00 00 00       	push   $0xff
c0007091:	50                   	push   %eax
c0007092:	e8 5c c8 ff ff       	call   c00038f3 <memset>
c0007097:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:155

	// 2 上一步中最后一字节内，有效的位重新置0
	uint8_t bit_idx = 0;
c000709a:	c6 45 e7 00          	movb   $0x0,-0x19(%ebp)
/work/x86_os_my/fs/fs.c:156
	while (bit_idx <= block_bitmap_last_bit) {
c000709e:	eb 37                	jmp    c00070d7 <partition_format+0x2c2>
/work/x86_os_my/fs/fs.c:157
		buf[block_bitmap_last_byte] &= ~(1 << bit_idx++);
c00070a0:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c00070a4:	8d 50 01             	lea    0x1(%eax),%edx
c00070a7:	88 55 e7             	mov    %dl,-0x19(%ebp)
c00070aa:	0f b6 c0             	movzbl %al,%eax
c00070ad:	ba 01 00 00 00       	mov    $0x1,%edx
c00070b2:	89 c1                	mov    %eax,%ecx
c00070b4:	d3 e2                	shl    %cl,%edx
c00070b6:	89 d0                	mov    %edx,%eax
c00070b8:	f7 d0                	not    %eax
c00070ba:	89 c3                	mov    %eax,%ebx
c00070bc:	8b 55 b8             	mov    -0x48(%ebp),%edx
c00070bf:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c00070c2:	01 d0                	add    %edx,%eax
c00070c4:	8b 4d b8             	mov    -0x48(%ebp),%ecx
c00070c7:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c00070ca:	01 ca                	add    %ecx,%edx
c00070cc:	0f b6 12             	movzbl (%edx),%edx
c00070cf:	89 d1                	mov    %edx,%ecx
c00070d1:	89 da                	mov    %ebx,%edx
c00070d3:	21 ca                	and    %ecx,%edx
c00070d5:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/fs/fs.c:156
	// 1 空闲块位图最后一字节，到最后一字节所在扇区的末尾，全置为占用（空闲块位图所在扇区的空闲部分）
	memset(&buf[block_bitmap_last_byte], 0xff, last_size);

	// 2 上一步中最后一字节内，有效的位重新置0
	uint8_t bit_idx = 0;
	while (bit_idx <= block_bitmap_last_bit) {
c00070d7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c00070db:	3a 45 b3             	cmp    -0x4d(%ebp),%al
c00070de:	76 c0                	jbe    c00070a0 <partition_format+0x28b>
/work/x86_os_my/fs/fs.c:160
		buf[block_bitmap_last_byte] &= ~(1 << bit_idx++);
	}
	// 3 写回到硬盘 空闲块位图 区域
	ide_write(hd, sb.block_bitmap_lba, buf, sb.block_bitmap_sects);
c00070e0:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
c00070e6:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
c00070ec:	52                   	push   %edx
c00070ed:	ff 75 b8             	pushl  -0x48(%ebp)
c00070f0:	50                   	push   %eax
c00070f1:	ff 75 c0             	pushl  -0x40(%ebp)
c00070f4:	e8 b0 f1 ff ff       	call   c00062a9 <ide_write>
c00070f9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:164


	/***** 3 将inode位图初始化并写入sb.inode_bitmap_lba *****/
	memset(buf, 0, buf_size);
c00070fc:	83 ec 04             	sub    $0x4,%esp
c00070ff:	ff 75 bc             	pushl  -0x44(%ebp)
c0007102:	6a 00                	push   $0x0
c0007104:	ff 75 b8             	pushl  -0x48(%ebp)
c0007107:	e8 e7 c7 ff ff       	call   c00038f3 <memset>
c000710c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:165
	buf[0] |= 0x1;	// 第0个inode分给了根目录
c000710f:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0007112:	0f b6 00             	movzbl (%eax),%eax
c0007115:	83 c8 01             	or     $0x1,%eax
c0007118:	89 c2                	mov    %eax,%edx
c000711a:	8b 45 b8             	mov    -0x48(%ebp),%eax
c000711d:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/fs/fs.c:169
	/* 最多4096个文件，inode位图4096个bit，正好占用1扇区，inode_bitmap_sects等于1
	 * 不像block_bitmap，在inode_bitmap的扇区中，没有多余的空闲无效位 */
	// 写回到硬盘 inode位图 区域
	ide_write(hd, sb.inode_bitmap_lba, buf, sb.inode_bitmap_sects);
c000711f:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
c0007125:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
c000712b:	52                   	push   %edx
c000712c:	ff 75 b8             	pushl  -0x48(%ebp)
c000712f:	50                   	push   %eax
c0007130:	ff 75 c0             	pushl  -0x40(%ebp)
c0007133:	e8 71 f1 ff ff       	call   c00062a9 <ide_write>
c0007138:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:174


	/***** 4 将inode数组初始化并写入sb.inode_table_lba *****/
	/* 处理inode_table中的第0项，即根目录所在的inode */
	memset(buf, 0, buf_size);
c000713b:	83 ec 04             	sub    $0x4,%esp
c000713e:	ff 75 bc             	pushl  -0x44(%ebp)
c0007141:	6a 00                	push   $0x0
c0007143:	ff 75 b8             	pushl  -0x48(%ebp)
c0007146:	e8 a8 c7 ff ff       	call   c00038f3 <memset>
c000714b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:175
	struct inode* i = (struct inode*)buf;
c000714e:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0007151:	89 45 a8             	mov    %eax,-0x58(%ebp)
/work/x86_os_my/fs/fs.c:176
	i->i_size = sb.dir_entry_size * 2;		// .和..	// 所有目录项大小之和
c0007154:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
c000715a:	8d 14 00             	lea    (%eax,%eax,1),%edx
c000715d:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0007160:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/fs.c:177
	i->i_no = 0;   // 根目录占inode数组中第0个inode
c0007163:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0007166:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/fs/fs.c:181
	// inode管理的是数据块（对于我们来说就是扇区）
	// 此处是指定根目录这个inode管理的数据块的位置
	// i_sectors数组后边的元素都是0 没用到
	i->i_sectors[0] = sb.data_start_lba;
c000716c:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
c0007172:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0007175:	89 50 10             	mov    %edx,0x10(%eax)
/work/x86_os_my/fs/fs.c:184
	// 写到硬盘 inode数组
	// 其实我们只处理了第0项
	ide_write(hd, sb.inode_table_lba, buf, sb.inode_table_sects);
c0007178:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
c000717e:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
c0007184:	52                   	push   %edx
c0007185:	ff 75 b8             	pushl  -0x48(%ebp)
c0007188:	50                   	push   %eax
c0007189:	ff 75 c0             	pushl  -0x40(%ebp)
c000718c:	e8 18 f1 ff ff       	call   c00062a9 <ide_write>
c0007191:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:190


	/***** 5 将根目录初始化并写入sb.data_start_lba *****/
	/* 写入根目录的两个目录项.和.. */
	// inode不知道数据块中是普通文件，还是目录。但是目录项知道。
	memset(buf, 0, buf_size);
c0007194:	83 ec 04             	sub    $0x4,%esp
c0007197:	ff 75 bc             	pushl  -0x44(%ebp)
c000719a:	6a 00                	push   $0x0
c000719c:	ff 75 b8             	pushl  -0x48(%ebp)
c000719f:	e8 4f c7 ff ff       	call   c00038f3 <memset>
c00071a4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:191
	struct dir_entry* p_de = (struct dir_entry*)buf;
c00071a7:	8b 45 b8             	mov    -0x48(%ebp),%eax
c00071aa:	89 45 a4             	mov    %eax,-0x5c(%ebp)
/work/x86_os_my/fs/fs.c:194

	/* 初始化当前目录"." */
	memcpy(p_de->filename, ".", 1);
c00071ad:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c00071b0:	83 ec 04             	sub    $0x4,%esp
c00071b3:	6a 01                	push   $0x1
c00071b5:	68 ef dc 00 c0       	push   $0xc000dcef
c00071ba:	50                   	push   %eax
c00071bb:	e8 85 c7 ff ff       	call   c0003945 <memcpy>
c00071c0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:195
	p_de->i_no = 0;	// 目录或文件对应的inode编号
c00071c3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c00071c6:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
/work/x86_os_my/fs/fs.c:196
	p_de->f_type = FT_DIRECTORY;
c00071cd:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c00071d0:	c7 40 14 02 00 00 00 	movl   $0x2,0x14(%eax)
/work/x86_os_my/fs/fs.c:198

	p_de++;
c00071d7:	83 45 a4 18          	addl   $0x18,-0x5c(%ebp)
/work/x86_os_my/fs/fs.c:201

	/* 初始化当前目录父目录".." */
	memcpy(p_de->filename, "..", 2);
c00071db:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c00071de:	83 ec 04             	sub    $0x4,%esp
c00071e1:	6a 02                	push   $0x2
c00071e3:	68 f1 dc 00 c0       	push   $0xc000dcf1
c00071e8:	50                   	push   %eax
c00071e9:	e8 57 c7 ff ff       	call   c0003945 <memcpy>
c00071ee:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:202
	p_de->i_no = 0;	// 根目录的父目录依然是根目录自己
c00071f1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c00071f4:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
/work/x86_os_my/fs/fs.c:203
	p_de->f_type = FT_DIRECTORY;
c00071fb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c00071fe:	c7 40 14 02 00 00 00 	movl   $0x2,0x14(%eax)
/work/x86_os_my/fs/fs.c:206

	/* sb.data_start_lba已经分配给了根目录，我们把根目录的目录项放进去 */
	ide_write(hd, sb.data_start_lba, buf, 1);
c0007205:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
c000720b:	6a 01                	push   $0x1
c000720d:	ff 75 b8             	pushl  -0x48(%ebp)
c0007210:	50                   	push   %eax
c0007211:	ff 75 c0             	pushl  -0x40(%ebp)
c0007214:	e8 90 f0 ff ff       	call   c00062a9 <ide_write>
c0007219:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:209


	printk("   root_dir_lba:0x%x\n", sb.data_start_lba);
c000721c:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
c0007222:	83 ec 08             	sub    $0x8,%esp
c0007225:	50                   	push   %eax
c0007226:	68 f4 dc 00 c0       	push   $0xc000dcf4
c000722b:	e8 7e f9 ff ff       	call   c0006bae <printk>
c0007230:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:210
	printk("%s format done\n", part->name);
c0007233:	8b 45 08             	mov    0x8(%ebp),%eax
c0007236:	83 c0 14             	add    $0x14,%eax
c0007239:	83 ec 08             	sub    $0x8,%esp
c000723c:	50                   	push   %eax
c000723d:	68 0a dd 00 c0       	push   $0xc000dd0a
c0007242:	e8 67 f9 ff ff       	call   c0006bae <printk>
c0007247:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:211
	sys_free(buf);
c000724a:	83 ec 0c             	sub    $0xc,%esp
c000724d:	ff 75 b8             	pushl  -0x48(%ebp)
c0007250:	e8 d4 c1 ff ff       	call   c0003429 <sys_free>
c0007255:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:212
}
c0007258:	90                   	nop
c0007259:	8d 65 f4             	lea    -0xc(%ebp),%esp
c000725c:	5b                   	pop    %ebx
c000725d:	5e                   	pop    %esi
c000725e:	5f                   	pop    %edi
c000725f:	5d                   	pop    %ebp
c0007260:	c3                   	ret    

c0007261 <path_parse>:
path_parse():
/work/x86_os_my/fs/fs.c:217


/* 将最上层路径名称解析出来，比如pathname="a/b/c"得到name_store="a"
 * 返回剩下的目录 "b/c" */
char* path_parse(char* pathname, char* name_store) {
c0007261:	55                   	push   %ebp
c0007262:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/fs/fs.c:218
	if (pathname[0] == '/') {	// 根目录不需要单独解析
c0007264:	8b 45 08             	mov    0x8(%ebp),%eax
c0007267:	0f b6 00             	movzbl (%eax),%eax
c000726a:	3c 2f                	cmp    $0x2f,%al
c000726c:	75 27                	jne    c0007295 <path_parse+0x34>
/work/x86_os_my/fs/fs.c:220 (discriminator 1)
		/* 路径中出现1个或多个连续的字符'/',将这些'/'跳过,如"///a/b" */
		while(*(++pathname) == '/');
c000726e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0007272:	8b 45 08             	mov    0x8(%ebp),%eax
c0007275:	0f b6 00             	movzbl (%eax),%eax
c0007278:	3c 2f                	cmp    $0x2f,%al
c000727a:	74 f2                	je     c000726e <path_parse+0xd>
/work/x86_os_my/fs/fs.c:224
	}

	/* 开始一般的路径解析 */
	while (*pathname != '/' && *pathname != 0) {
c000727c:	eb 17                	jmp    c0007295 <path_parse+0x34>
/work/x86_os_my/fs/fs.c:225
		*name_store++ = *pathname++;
c000727e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007281:	8d 50 01             	lea    0x1(%eax),%edx
c0007284:	89 55 0c             	mov    %edx,0xc(%ebp)
c0007287:	8b 55 08             	mov    0x8(%ebp),%edx
c000728a:	8d 4a 01             	lea    0x1(%edx),%ecx
c000728d:	89 4d 08             	mov    %ecx,0x8(%ebp)
c0007290:	0f b6 12             	movzbl (%edx),%edx
c0007293:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/fs/fs.c:224
		/* 路径中出现1个或多个连续的字符'/',将这些'/'跳过,如"///a/b" */
		while(*(++pathname) == '/');
	}

	/* 开始一般的路径解析 */
	while (*pathname != '/' && *pathname != 0) {
c0007295:	8b 45 08             	mov    0x8(%ebp),%eax
c0007298:	0f b6 00             	movzbl (%eax),%eax
c000729b:	3c 2f                	cmp    $0x2f,%al
c000729d:	74 0a                	je     c00072a9 <path_parse+0x48>
/work/x86_os_my/fs/fs.c:224 (discriminator 1)
c000729f:	8b 45 08             	mov    0x8(%ebp),%eax
c00072a2:	0f b6 00             	movzbl (%eax),%eax
c00072a5:	84 c0                	test   %al,%al
c00072a7:	75 d5                	jne    c000727e <path_parse+0x1d>
/work/x86_os_my/fs/fs.c:228
		*name_store++ = *pathname++;
	}

	if (pathname[0] == 0) {   // 若路径字符串为空则返回NULL
c00072a9:	8b 45 08             	mov    0x8(%ebp),%eax
c00072ac:	0f b6 00             	movzbl (%eax),%eax
c00072af:	84 c0                	test   %al,%al
c00072b1:	75 07                	jne    c00072ba <path_parse+0x59>
/work/x86_os_my/fs/fs.c:229
		return NULL;
c00072b3:	b8 00 00 00 00       	mov    $0x0,%eax
c00072b8:	eb 03                	jmp    c00072bd <path_parse+0x5c>
/work/x86_os_my/fs/fs.c:231
	}
	return pathname;
c00072ba:	8b 45 08             	mov    0x8(%ebp),%eax
/work/x86_os_my/fs/fs.c:232
}
c00072bd:	5d                   	pop    %ebp
c00072be:	c3                   	ret    

c00072bf <path_depth_cnt>:
path_depth_cnt():
/work/x86_os_my/fs/fs.c:235

/* 返回路径深度,比如/a/b/c,深度为3 */
int32_t path_depth_cnt(char* pathname) {
c00072bf:	55                   	push   %ebp
c00072c0:	89 e5                	mov    %esp,%ebp
c00072c2:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/fs/fs.c:236
	ASSERT(pathname != NULL);
c00072c5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00072c9:	75 1c                	jne    c00072e7 <path_depth_cnt+0x28>
/work/x86_os_my/fs/fs.c:236 (discriminator 1)
c00072cb:	68 1a dd 00 c0       	push   $0xc000dd1a
c00072d0:	68 80 e3 00 c0       	push   $0xc000e380
c00072d5:	68 ec 00 00 00       	push   $0xec
c00072da:	68 b1 db 00 c0       	push   $0xc000dbb1
c00072df:	e8 6d b1 ff ff       	call   c0002451 <panic_spin>
c00072e4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:237
	char* p = pathname;
c00072e7:	8b 45 08             	mov    0x8(%ebp),%eax
c00072ea:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:239
	char name[MAX_FILE_NAME_LEN];	// 用于path_parse的参数做路径解析
	uint32_t depth = 0;
c00072ed:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:242

	/* 解析路径,从中拆分出各级名称 */
	p = path_parse(p, name);
c00072f4:	83 ec 08             	sub    $0x8,%esp
c00072f7:	8d 45 e0             	lea    -0x20(%ebp),%eax
c00072fa:	50                   	push   %eax
c00072fb:	ff 75 f4             	pushl  -0xc(%ebp)
c00072fe:	e8 5e ff ff ff       	call   c0007261 <path_parse>
c0007303:	83 c4 10             	add    $0x10,%esp
c0007306:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:243
	while (name[0]) {
c0007309:	eb 32                	jmp    c000733d <path_depth_cnt+0x7e>
/work/x86_os_my/fs/fs.c:244
		depth++;
c000730b:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:245
		memset(name, 0, MAX_FILE_NAME_LEN);
c000730f:	83 ec 04             	sub    $0x4,%esp
c0007312:	6a 10                	push   $0x10
c0007314:	6a 00                	push   $0x0
c0007316:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0007319:	50                   	push   %eax
c000731a:	e8 d4 c5 ff ff       	call   c00038f3 <memset>
c000731f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:246
		if (p) {	// 如果p不等于NULL,继续分析路径
c0007322:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0007326:	74 15                	je     c000733d <path_depth_cnt+0x7e>
/work/x86_os_my/fs/fs.c:247
			p  = path_parse(p, name);
c0007328:	83 ec 08             	sub    $0x8,%esp
c000732b:	8d 45 e0             	lea    -0x20(%ebp),%eax
c000732e:	50                   	push   %eax
c000732f:	ff 75 f4             	pushl  -0xc(%ebp)
c0007332:	e8 2a ff ff ff       	call   c0007261 <path_parse>
c0007337:	83 c4 10             	add    $0x10,%esp
c000733a:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:243
	char name[MAX_FILE_NAME_LEN];	// 用于path_parse的参数做路径解析
	uint32_t depth = 0;

	/* 解析路径,从中拆分出各级名称 */
	p = path_parse(p, name);
	while (name[0]) {
c000733d:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c0007341:	84 c0                	test   %al,%al
c0007343:	75 c6                	jne    c000730b <path_depth_cnt+0x4c>
/work/x86_os_my/fs/fs.c:250
		memset(name, 0, MAX_FILE_NAME_LEN);
		if (p) {	// 如果p不等于NULL,继续分析路径
			p  = path_parse(p, name);
		}
	}
	return depth;
c0007345:	8b 45 f0             	mov    -0x10(%ebp),%eax
/work/x86_os_my/fs/fs.c:251
}
c0007348:	c9                   	leave  
c0007349:	c3                   	ret    

c000734a <search_file>:
search_file():
/work/x86_os_my/fs/fs.c:260
 * 全局变量 struct dir root_dir 定义在 dir.c
 * 也支持 /./a 或者 /../b 会把.和..当做一个目录项继续往下层找
 * /a/b/c若c不存在，那么 searched_record.searched_path 是 /a/b/c
 * 注意下边三种return的地方，是三种情况！
 */
static int search_file(const char* pathname, struct path_search_record* searched_record) {
c000734a:	55                   	push   %ebp
c000734b:	89 e5                	mov    %esp,%ebp
c000734d:	83 ec 48             	sub    $0x48,%esp
/work/x86_os_my/fs/fs.c:262
	/* 如果待查找的是根目录,为避免下面无用的查找,直接返回已知根目录信息 */
	if (!strcmp(pathname, "/") || !strcmp(pathname, "/.") || !strcmp(pathname, "/..")) {
c0007350:	83 ec 08             	sub    $0x8,%esp
c0007353:	68 2b dd 00 c0       	push   $0xc000dd2b
c0007358:	ff 75 08             	pushl  0x8(%ebp)
c000735b:	e8 68 c7 ff ff       	call   c0003ac8 <strcmp>
c0007360:	83 c4 10             	add    $0x10,%esp
c0007363:	84 c0                	test   %al,%al
c0007365:	74 2e                	je     c0007395 <search_file+0x4b>
/work/x86_os_my/fs/fs.c:262 (discriminator 1)
c0007367:	83 ec 08             	sub    $0x8,%esp
c000736a:	68 2d dd 00 c0       	push   $0xc000dd2d
c000736f:	ff 75 08             	pushl  0x8(%ebp)
c0007372:	e8 51 c7 ff ff       	call   c0003ac8 <strcmp>
c0007377:	83 c4 10             	add    $0x10,%esp
c000737a:	84 c0                	test   %al,%al
c000737c:	74 17                	je     c0007395 <search_file+0x4b>
/work/x86_os_my/fs/fs.c:262 (discriminator 2)
c000737e:	83 ec 08             	sub    $0x8,%esp
c0007381:	68 30 dd 00 c0       	push   $0xc000dd30
c0007386:	ff 75 08             	pushl  0x8(%ebp)
c0007389:	e8 3a c7 ff ff       	call   c0003ac8 <strcmp>
c000738e:	83 c4 10             	add    $0x10,%esp
c0007391:	84 c0                	test   %al,%al
c0007393:	75 2a                	jne    c00073bf <search_file+0x75>
/work/x86_os_my/fs/fs.c:263
		searched_record->parent_dir = &root_dir;	// 直接父目录
c0007395:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007398:	c7 80 00 02 00 00 a0 	movl   $0xc00131a0,0x200(%eax)
c000739f:	31 01 c0 
/work/x86_os_my/fs/fs.c:264
		searched_record->file_type = FT_DIRECTORY;	// FT_UNKNOWN代表没找到，找到才有类型是文件或目录
c00073a2:	8b 45 0c             	mov    0xc(%ebp),%eax
c00073a5:	c7 80 04 02 00 00 02 	movl   $0x2,0x204(%eax)
c00073ac:	00 00 00 
/work/x86_os_my/fs/fs.c:265
		searched_record->searched_path[0] = 0;		// 搜索过的路径置空
c00073af:	8b 45 0c             	mov    0xc(%ebp),%eax
c00073b2:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/fs/fs.c:266
		return 0;
c00073b5:	b8 00 00 00 00       	mov    $0x0,%eax
c00073ba:	e9 08 02 00 00       	jmp    c00075c7 <search_file+0x27d>
/work/x86_os_my/fs/fs.c:269
	}

	uint32_t path_len = strlen(pathname);
c00073bf:	83 ec 0c             	sub    $0xc,%esp
c00073c2:	ff 75 08             	pushl  0x8(%ebp)
c00073c5:	e8 b3 c6 ff ff       	call   c0003a7d <strlen>
c00073ca:	83 c4 10             	add    $0x10,%esp
c00073cd:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:271
	/* 保证pathname至少是这样的路径/x且小于最大长度 */
	ASSERT(pathname[0] == '/' && path_len > 1 && path_len < MAX_PATH_LEN);
c00073d0:	8b 45 08             	mov    0x8(%ebp),%eax
c00073d3:	0f b6 00             	movzbl (%eax),%eax
c00073d6:	3c 2f                	cmp    $0x2f,%al
c00073d8:	75 0f                	jne    c00073e9 <search_file+0x9f>
/work/x86_os_my/fs/fs.c:271 (discriminator 1)
c00073da:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
c00073de:	76 09                	jbe    c00073e9 <search_file+0x9f>
/work/x86_os_my/fs/fs.c:271 (discriminator 3)
c00073e0:	81 7d e8 ff 01 00 00 	cmpl   $0x1ff,-0x18(%ebp)
c00073e7:	76 1c                	jbe    c0007405 <search_file+0xbb>
/work/x86_os_my/fs/fs.c:271 (discriminator 5)
c00073e9:	68 34 dd 00 c0       	push   $0xc000dd34
c00073ee:	68 90 e3 00 c0       	push   $0xc000e390
c00073f3:	68 0f 01 00 00       	push   $0x10f
c00073f8:	68 b1 db 00 c0       	push   $0xc000dbb1
c00073fd:	e8 4f b0 ff ff       	call   c0002451 <panic_spin>
c0007402:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:272
	char* sub_path = (char*)pathname;
c0007405:	8b 45 08             	mov    0x8(%ebp),%eax
c0007408:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:273
	struct dir* parent_dir = &root_dir;
c000740b:	c7 45 f0 a0 31 01 c0 	movl   $0xc00131a0,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:277
	struct dir_entry dir_e;

	/* 数组name每次的值分别是各级目录的名字："a","b","c" */
	char name[MAX_FILE_NAME_LEN] = {0};
c0007412:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
c0007419:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
c0007420:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
c0007427:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
/work/x86_os_my/fs/fs.c:279

	searched_record->parent_dir = parent_dir;	// 直接父目录
c000742e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007431:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0007434:	89 90 00 02 00 00    	mov    %edx,0x200(%eax)
/work/x86_os_my/fs/fs.c:280
	searched_record->file_type = FT_UNKNOWN;	// 初始值代表没找到，找到才有类型是文件或目录
c000743a:	8b 45 0c             	mov    0xc(%ebp),%eax
c000743d:	c7 80 04 02 00 00 00 	movl   $0x0,0x204(%eax)
c0007444:	00 00 00 
/work/x86_os_my/fs/fs.c:281
	uint32_t parent_inode_no = 0;  // 备份各层解析出来的路径，的父目录，的inode号
c0007447:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:283

	sub_path = path_parse(sub_path, name);
c000744e:	83 ec 08             	sub    $0x8,%esp
c0007451:	8d 45 c0             	lea    -0x40(%ebp),%eax
c0007454:	50                   	push   %eax
c0007455:	ff 75 f4             	pushl  -0xc(%ebp)
c0007458:	e8 04 fe ff ff       	call   c0007261 <path_parse>
c000745d:	83 c4 10             	add    $0x10,%esp
c0007460:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:284
	while (name[0]) {	   // 若第一个字符就是结束符,结束循环
c0007463:	e9 0f 01 00 00       	jmp    c0007577 <search_file+0x22d>
/work/x86_os_my/fs/fs.c:286
		/* 记录查找过的路径,但不能超过searched_path的长度512字节 */
		ASSERT(strlen(searched_record->searched_path) < 512);
c0007468:	8b 45 0c             	mov    0xc(%ebp),%eax
c000746b:	83 ec 0c             	sub    $0xc,%esp
c000746e:	50                   	push   %eax
c000746f:	e8 09 c6 ff ff       	call   c0003a7d <strlen>
c0007474:	83 c4 10             	add    $0x10,%esp
c0007477:	3d ff 01 00 00       	cmp    $0x1ff,%eax
c000747c:	76 1c                	jbe    c000749a <search_file+0x150>
/work/x86_os_my/fs/fs.c:286 (discriminator 1)
c000747e:	68 74 dd 00 c0       	push   $0xc000dd74
c0007483:	68 90 e3 00 c0       	push   $0xc000e390
c0007488:	68 1e 01 00 00       	push   $0x11e
c000748d:	68 b1 db 00 c0       	push   $0xc000dbb1
c0007492:	e8 ba af ff ff       	call   c0002451 <panic_spin>
c0007497:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:289

		/* 追加到已存在的父目录 */
		strcat(searched_record->searched_path, "/");
c000749a:	8b 45 0c             	mov    0xc(%ebp),%eax
c000749d:	83 ec 08             	sub    $0x8,%esp
c00074a0:	68 2b dd 00 c0       	push   $0xc000dd2b
c00074a5:	50                   	push   %eax
c00074a6:	e8 4c c7 ff ff       	call   c0003bf7 <strcat>
c00074ab:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:290
		strcat(searched_record->searched_path, name);
c00074ae:	8b 45 0c             	mov    0xc(%ebp),%eax
c00074b1:	83 ec 08             	sub    $0x8,%esp
c00074b4:	8d 55 c0             	lea    -0x40(%ebp),%edx
c00074b7:	52                   	push   %edx
c00074b8:	50                   	push   %eax
c00074b9:	e8 39 c7 ff ff       	call   c0003bf7 <strcat>
c00074be:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:293

		/* 在所给的目录中查找目录项，找到后将目录项填入dir_e */
		if (false != search_dir_entry(cur_part, parent_dir, name, &dir_e)) {
c00074c1:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c00074c6:	8d 55 d0             	lea    -0x30(%ebp),%edx
c00074c9:	52                   	push   %edx
c00074ca:	8d 55 c0             	lea    -0x40(%ebp),%edx
c00074cd:	52                   	push   %edx
c00074ce:	ff 75 f0             	pushl  -0x10(%ebp)
c00074d1:	50                   	push   %eax
c00074d2:	e8 70 30 00 00       	call   c000a547 <search_dir_entry>
c00074d7:	83 c4 10             	add    $0x10,%esp
c00074da:	85 c0                	test   %eax,%eax
c00074dc:	0f 84 8e 00 00 00    	je     c0007570 <search_file+0x226>
/work/x86_os_my/fs/fs.c:294
			memset(name, 0, MAX_FILE_NAME_LEN);
c00074e2:	83 ec 04             	sub    $0x4,%esp
c00074e5:	6a 10                	push   $0x10
c00074e7:	6a 00                	push   $0x0
c00074e9:	8d 45 c0             	lea    -0x40(%ebp),%eax
c00074ec:	50                   	push   %eax
c00074ed:	e8 01 c4 ff ff       	call   c00038f3 <memset>
c00074f2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:296
			/* 若sub_path不等于NULL，也就是搜索未结束，继续拆分路径 */
			if (sub_path) {
c00074f5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c00074f9:	74 15                	je     c0007510 <search_file+0x1c6>
/work/x86_os_my/fs/fs.c:297
				sub_path = path_parse(sub_path, name);
c00074fb:	83 ec 08             	sub    $0x8,%esp
c00074fe:	8d 45 c0             	lea    -0x40(%ebp),%eax
c0007501:	50                   	push   %eax
c0007502:	ff 75 f4             	pushl  -0xc(%ebp)
c0007505:	e8 57 fd ff ff       	call   c0007261 <path_parse>
c000750a:	83 c4 10             	add    $0x10,%esp
c000750d:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:300
			}

			if (FT_DIRECTORY == dir_e.f_type) {			// 如果被打开的是目录
c0007510:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0007513:	83 f8 02             	cmp    $0x2,%eax
c0007516:	75 3e                	jne    c0007556 <search_file+0x20c>
/work/x86_os_my/fs/fs.c:301
				parent_inode_no = parent_dir->inode->i_no;
c0007518:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000751b:	8b 00                	mov    (%eax),%eax
c000751d:	8b 00                	mov    (%eax),%eax
c000751f:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:302
				dir_close(parent_dir);
c0007522:	83 ec 0c             	sub    $0xc,%esp
c0007525:	ff 75 f0             	pushl  -0x10(%ebp)
c0007528:	e8 f2 31 00 00       	call   c000a71f <dir_close>
c000752d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:304

				parent_dir = dir_open(cur_part, dir_e.i_no);
c0007530:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0007533:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0007538:	83 ec 08             	sub    $0x8,%esp
c000753b:	52                   	push   %edx
c000753c:	50                   	push   %eax
c000753d:	e8 c5 2f 00 00       	call   c000a507 <dir_open>
c0007542:	83 c4 10             	add    $0x10,%esp
c0007545:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:305
				searched_record->parent_dir = parent_dir;	// 更新直接父目录
c0007548:	8b 45 0c             	mov    0xc(%ebp),%eax
c000754b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000754e:	89 90 00 02 00 00    	mov    %edx,0x200(%eax)
/work/x86_os_my/fs/fs.c:306
				continue;
c0007554:	eb 21                	jmp    c0007577 <search_file+0x22d>
/work/x86_os_my/fs/fs.c:307
			} else if (FT_REGULAR == dir_e.f_type) {	// 若是普通文件
c0007556:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0007559:	83 f8 01             	cmp    $0x1,%eax
c000755c:	75 19                	jne    c0007577 <search_file+0x22d>
/work/x86_os_my/fs/fs.c:312
				/* 如果搜索路径为 /a/b 但是目录下只有文件a 此时也会返回文件a的inode号【中间某个目录不存在】
				 * 由主调函数根据 searched_record.searched_path 判断："提供的 pathname 是否正确，是否处理完了"
				 * 【情况1】
				 */
				searched_record->file_type = FT_REGULAR;
c000755e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007561:	c7 80 04 02 00 00 01 	movl   $0x1,0x204(%eax)
c0007568:	00 00 00 
/work/x86_os_my/fs/fs.c:313
				return dir_e.i_no;
c000756b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000756e:	eb 57                	jmp    c00075c7 <search_file+0x27d>
/work/x86_os_my/fs/fs.c:321
			/* 找不到目录项时，要留着 parent_dir 不要关闭，
			 * 主调函数需要据此知道在哪个目录中创建文件，此时的 searched_record->parent_dir 指向父目录，主调函数负责关闭该目录
			 * 主调函数，创建新文件的话需要在 parent_dir 中创建
			 * 【情况2】
			 */
			return -1;
c0007570:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007575:	eb 50                	jmp    c00075c7 <search_file+0x27d>
/work/x86_os_my/fs/fs.c:284
	searched_record->parent_dir = parent_dir;	// 直接父目录
	searched_record->file_type = FT_UNKNOWN;	// 初始值代表没找到，找到才有类型是文件或目录
	uint32_t parent_inode_no = 0;  // 备份各层解析出来的路径，的父目录，的inode号

	sub_path = path_parse(sub_path, name);
	while (name[0]) {	   // 若第一个字符就是结束符,结束循环
c0007577:	0f b6 45 c0          	movzbl -0x40(%ebp),%eax
c000757b:	84 c0                	test   %al,%al
c000757d:	0f 85 e5 fe ff ff    	jne    c0007468 <search_file+0x11e>
/work/x86_os_my/fs/fs.c:332
	 * 此时 searched_record-> parent_dir 是路径 pathname 中的最后一级目录 c，并不是倒数第二级的父目录 b
	 * 要保证，无论搜索目标是普通文件，还是目录，searched_record->parent_dir 中记录的都应该是父目录！
	 * 因此要关闭目录c，重新打开目录b
	 * 【情况3】
	 */
	dir_close(searched_record->parent_dir);
c0007583:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007586:	8b 80 00 02 00 00    	mov    0x200(%eax),%eax
c000758c:	83 ec 0c             	sub    $0xc,%esp
c000758f:	50                   	push   %eax
c0007590:	e8 8a 31 00 00       	call   c000a71f <dir_close>
c0007595:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:333
	searched_record->parent_dir = dir_open(cur_part, parent_inode_no);
c0007598:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c000759d:	83 ec 08             	sub    $0x8,%esp
c00075a0:	ff 75 ec             	pushl  -0x14(%ebp)
c00075a3:	50                   	push   %eax
c00075a4:	e8 5e 2f 00 00       	call   c000a507 <dir_open>
c00075a9:	83 c4 10             	add    $0x10,%esp
c00075ac:	89 c2                	mov    %eax,%edx
c00075ae:	8b 45 0c             	mov    0xc(%ebp),%eax
c00075b1:	89 90 00 02 00 00    	mov    %edx,0x200(%eax)
/work/x86_os_my/fs/fs.c:334
	searched_record->file_type = FT_DIRECTORY;
c00075b7:	8b 45 0c             	mov    0xc(%ebp),%eax
c00075ba:	c7 80 04 02 00 00 02 	movl   $0x2,0x204(%eax)
c00075c1:	00 00 00 
/work/x86_os_my/fs/fs.c:335
	return dir_e.i_no;	//目录c的inode号
c00075c4:	8b 45 e0             	mov    -0x20(%ebp),%eax
/work/x86_os_my/fs/fs.c:336 (discriminator 1)
}
c00075c7:	c9                   	leave  
c00075c8:	c3                   	ret    

c00075c9 <sys_open>:
sys_open():
/work/x86_os_my/fs/fs.c:343
/* 打开或创建文件成功后,返回文件描述符,否则返回-1
 * 对应 file.c 中的 file_create
 *
 * open(const char * pathname, (O_CREAT|O_WRONLY|O_TRUNC));
 */
int32_t sys_open(const char* pathname, uint8_t flags) {
c00075c9:	55                   	push   %ebp
c00075ca:	89 e5                	mov    %esp,%ebp
c00075cc:	53                   	push   %ebx
c00075cd:	81 ec 34 02 00 00    	sub    $0x234,%esp
c00075d3:	8b 45 0c             	mov    0xc(%ebp),%eax
c00075d6:	88 85 d4 fd ff ff    	mov    %al,-0x22c(%ebp)
/work/x86_os_my/fs/fs.c:345
	/* 对目录要用dir_open,这里只有open文件 */
	if (pathname[strlen(pathname) - 1] == '/') {
c00075dc:	83 ec 0c             	sub    $0xc,%esp
c00075df:	ff 75 08             	pushl  0x8(%ebp)
c00075e2:	e8 96 c4 ff ff       	call   c0003a7d <strlen>
c00075e7:	83 c4 10             	add    $0x10,%esp
c00075ea:	8d 50 ff             	lea    -0x1(%eax),%edx
c00075ed:	8b 45 08             	mov    0x8(%ebp),%eax
c00075f0:	01 d0                	add    %edx,%eax
c00075f2:	0f b6 00             	movzbl (%eax),%eax
c00075f5:	3c 2f                	cmp    $0x2f,%al
c00075f7:	75 1d                	jne    c0007616 <sys_open+0x4d>
/work/x86_os_my/fs/fs.c:346
		printk("can`t open a directory %s\n", pathname);
c00075f9:	83 ec 08             	sub    $0x8,%esp
c00075fc:	ff 75 08             	pushl  0x8(%ebp)
c00075ff:	68 a1 dd 00 c0       	push   $0xc000dda1
c0007604:	e8 a5 f5 ff ff       	call   c0006bae <printk>
c0007609:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:347
		return -1;
c000760c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007611:	e9 10 02 00 00       	jmp    c0007826 <sys_open+0x25d>
/work/x86_os_my/fs/fs.c:349
	}
	ASSERT(flags <= 7);
c0007616:	80 bd d4 fd ff ff 07 	cmpb   $0x7,-0x22c(%ebp)
c000761d:	76 1c                	jbe    c000763b <sys_open+0x72>
/work/x86_os_my/fs/fs.c:349 (discriminator 1)
c000761f:	68 bc dd 00 c0       	push   $0xc000ddbc
c0007624:	68 9c e3 00 c0       	push   $0xc000e39c
c0007629:	68 5d 01 00 00       	push   $0x15d
c000762e:	68 b1 db 00 c0       	push   $0xc000dbb1
c0007633:	e8 19 ae ff ff       	call   c0002451 <panic_spin>
c0007638:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:350
	int32_t fd = -1;	// 默认为找不到
c000763b:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:353

	struct path_search_record searched_record;
	memset(&searched_record, 0, sizeof(struct path_search_record));
c0007642:	83 ec 04             	sub    $0x4,%esp
c0007645:	68 08 02 00 00       	push   $0x208
c000764a:	6a 00                	push   $0x0
c000764c:	8d 85 dc fd ff ff    	lea    -0x224(%ebp),%eax
c0007652:	50                   	push   %eax
c0007653:	e8 9b c2 ff ff       	call   c00038f3 <memset>
c0007658:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:356

	/* 记录目录深度.帮助判断中间某个目录不存在的情况 */
	uint32_t pathname_depth = path_depth_cnt((char*)pathname);
c000765b:	83 ec 0c             	sub    $0xc,%esp
c000765e:	ff 75 08             	pushl  0x8(%ebp)
c0007661:	e8 59 fc ff ff       	call   c00072bf <path_depth_cnt>
c0007666:	83 c4 10             	add    $0x10,%esp
c0007669:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:359

	/* 先检查文件是否存在 */
	int inode_no = search_file(pathname, &searched_record);
c000766c:	83 ec 08             	sub    $0x8,%esp
c000766f:	8d 85 dc fd ff ff    	lea    -0x224(%ebp),%eax
c0007675:	50                   	push   %eax
c0007676:	ff 75 08             	pushl  0x8(%ebp)
c0007679:	e8 cc fc ff ff       	call   c000734a <search_file>
c000767e:	83 c4 10             	add    $0x10,%esp
c0007681:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:360
	bool found = (inode_no != -1 ? true : false);
c0007684:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%ebp)
c0007688:	0f 95 c0             	setne  %al
c000768b:	0f b6 c0             	movzbl %al,%eax
c000768e:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:362

	if (searched_record.file_type == FT_DIRECTORY) {
c0007691:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0007694:	83 f8 02             	cmp    $0x2,%eax
c0007697:	75 29                	jne    c00076c2 <sys_open+0xf9>
/work/x86_os_my/fs/fs.c:363
		printk("can`t open a direcotry with open(), use opendir() to instead\n");
c0007699:	83 ec 0c             	sub    $0xc,%esp
c000769c:	68 c8 dd 00 c0       	push   $0xc000ddc8
c00076a1:	e8 08 f5 ff ff       	call   c0006bae <printk>
c00076a6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:364
		dir_close(searched_record.parent_dir);	//主调函数负责关闭该目录
c00076a9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c00076ac:	83 ec 0c             	sub    $0xc,%esp
c00076af:	50                   	push   %eax
c00076b0:	e8 6a 30 00 00       	call   c000a71f <dir_close>
c00076b5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:365
		return -1;
c00076b8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00076bd:	e9 64 01 00 00       	jmp    c0007826 <sys_open+0x25d>
/work/x86_os_my/fs/fs.c:368
	}

	uint32_t path_searched_depth = path_depth_cnt(searched_record.searched_path);
c00076c2:	83 ec 0c             	sub    $0xc,%esp
c00076c5:	8d 85 dc fd ff ff    	lea    -0x224(%ebp),%eax
c00076cb:	50                   	push   %eax
c00076cc:	e8 ee fb ff ff       	call   c00072bf <path_depth_cnt>
c00076d1:	83 c4 10             	add    $0x10,%esp
c00076d4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/fs.c:372

	/* 先判断是否把pathname的各层目录都访问到了 */
	// 【search_file情况1】说明并没有访问到全部的路径,某个中间目录是不存在的【是一个同名的普通文件】
	if (pathname_depth != path_searched_depth) {
c00076d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00076da:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c00076dd:	74 33                	je     c0007712 <sys_open+0x149>
/work/x86_os_my/fs/fs.c:373
		printk("cannot access %s: Not a directory, subpath %s is`t exist\n",
c00076df:	83 ec 04             	sub    $0x4,%esp
c00076e2:	8d 85 dc fd ff ff    	lea    -0x224(%ebp),%eax
c00076e8:	50                   	push   %eax
c00076e9:	ff 75 08             	pushl  0x8(%ebp)
c00076ec:	68 08 de 00 c0       	push   $0xc000de08
c00076f1:	e8 b8 f4 ff ff       	call   c0006bae <printk>
c00076f6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:375
			pathname, searched_record.searched_path);
		dir_close(searched_record.parent_dir);
c00076f9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c00076fc:	83 ec 0c             	sub    $0xc,%esp
c00076ff:	50                   	push   %eax
c0007700:	e8 1a 30 00 00       	call   c000a71f <dir_close>
c0007705:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:376
		return -1;
c0007708:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000770d:	e9 14 01 00 00       	jmp    c0007826 <sys_open+0x25d>
/work/x86_os_my/fs/fs.c:381
	}

	// 【search_file情况2】若是在最后一个路径上没找到
	// 并且此时也不是要创建文件,直接返回-1 */
	if (!found && !(flags & O_CREAT)) {
c0007712:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0007716:	75 56                	jne    c000776e <sys_open+0x1a5>
/work/x86_os_my/fs/fs.c:381 (discriminator 1)
c0007718:	0f b6 85 d4 fd ff ff 	movzbl -0x22c(%ebp),%eax
c000771f:	83 e0 04             	and    $0x4,%eax
c0007722:	85 c0                	test   %eax,%eax
c0007724:	75 48                	jne    c000776e <sys_open+0x1a5>
/work/x86_os_my/fs/fs.c:383
		printk("in path %s, file %s is`t exist\n",
			searched_record.searched_path, (strrchr(searched_record.searched_path, '/') + 1));
c0007726:	83 ec 08             	sub    $0x8,%esp
c0007729:	6a 2f                	push   $0x2f
c000772b:	8d 85 dc fd ff ff    	lea    -0x224(%ebp),%eax
c0007731:	50                   	push   %eax
c0007732:	e8 62 c4 ff ff       	call   c0003b99 <strrchr>
c0007737:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:382
	}

	// 【search_file情况2】若是在最后一个路径上没找到
	// 并且此时也不是要创建文件,直接返回-1 */
	if (!found && !(flags & O_CREAT)) {
		printk("in path %s, file %s is`t exist\n",
c000773a:	83 c0 01             	add    $0x1,%eax
c000773d:	83 ec 04             	sub    $0x4,%esp
c0007740:	50                   	push   %eax
c0007741:	8d 85 dc fd ff ff    	lea    -0x224(%ebp),%eax
c0007747:	50                   	push   %eax
c0007748:	68 44 de 00 c0       	push   $0xc000de44
c000774d:	e8 5c f4 ff ff       	call   c0006bae <printk>
c0007752:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:384
			searched_record.searched_path, (strrchr(searched_record.searched_path, '/') + 1));
		dir_close(searched_record.parent_dir);
c0007755:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0007758:	83 ec 0c             	sub    $0xc,%esp
c000775b:	50                   	push   %eax
c000775c:	e8 be 2f 00 00       	call   c000a71f <dir_close>
c0007761:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:385
		return -1;
c0007764:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007769:	e9 b8 00 00 00       	jmp    c0007826 <sys_open+0x25d>
/work/x86_os_my/fs/fs.c:386
	} else if (found && flags & O_CREAT) {	// 若要创建的文件已存在，相同目录下不可以有同名文件，返回-1
c000776e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0007772:	74 37                	je     c00077ab <sys_open+0x1e2>
/work/x86_os_my/fs/fs.c:386 (discriminator 1)
c0007774:	0f b6 85 d4 fd ff ff 	movzbl -0x22c(%ebp),%eax
c000777b:	83 e0 04             	and    $0x4,%eax
c000777e:	85 c0                	test   %eax,%eax
c0007780:	74 29                	je     c00077ab <sys_open+0x1e2>
/work/x86_os_my/fs/fs.c:387
		printk("%s has already exist!\n", pathname);
c0007782:	83 ec 08             	sub    $0x8,%esp
c0007785:	ff 75 08             	pushl  0x8(%ebp)
c0007788:	68 64 de 00 c0       	push   $0xc000de64
c000778d:	e8 1c f4 ff ff       	call   c0006bae <printk>
c0007792:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:388
		dir_close(searched_record.parent_dir);
c0007795:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0007798:	83 ec 0c             	sub    $0xc,%esp
c000779b:	50                   	push   %eax
c000779c:	e8 7e 2f 00 00       	call   c000a71f <dir_close>
c00077a1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:389
		return -1;
c00077a4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00077a9:	eb 7b                	jmp    c0007826 <sys_open+0x25d>
/work/x86_os_my/fs/fs.c:392
	}

	switch (flags & O_CREAT) {	// sys_open("xxx", O_CREAT|O_XXX)
c00077ab:	0f b6 85 d4 fd ff ff 	movzbl -0x22c(%ebp),%eax
c00077b2:	83 e0 04             	and    $0x4,%eax
c00077b5:	83 f8 04             	cmp    $0x4,%eax
c00077b8:	75 4f                	jne    c0007809 <sys_open+0x240>
/work/x86_os_my/fs/fs.c:394
		case O_CREAT:
		printk("creating file\n");
c00077ba:	83 ec 0c             	sub    $0xc,%esp
c00077bd:	68 7b de 00 c0       	push   $0xc000de7b
c00077c2:	e8 e7 f3 ff ff       	call   c0006bae <printk>
c00077c7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:396
		// 【search_file情况3】主调函数用到此目录，在该目录下创建文件
		fd = file_create(searched_record.parent_dir, (strrchr(pathname, '/') + 1), flags);
c00077ca:	0f b6 9d d4 fd ff ff 	movzbl -0x22c(%ebp),%ebx
c00077d1:	83 ec 08             	sub    $0x8,%esp
c00077d4:	6a 2f                	push   $0x2f
c00077d6:	ff 75 08             	pushl  0x8(%ebp)
c00077d9:	e8 bb c3 ff ff       	call   c0003b99 <strrchr>
c00077de:	83 c4 10             	add    $0x10,%esp
c00077e1:	8d 50 01             	lea    0x1(%eax),%edx
c00077e4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c00077e7:	83 ec 04             	sub    $0x4,%esp
c00077ea:	53                   	push   %ebx
c00077eb:	52                   	push   %edx
c00077ec:	50                   	push   %eax
c00077ed:	e8 8a 1d 00 00       	call   c000957c <file_create>
c00077f2:	83 c4 10             	add    $0x10,%esp
c00077f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:397
		dir_close(searched_record.parent_dir);
c00077f8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c00077fb:	83 ec 0c             	sub    $0xc,%esp
c00077fe:	50                   	push   %eax
c00077ff:	e8 1b 2f 00 00       	call   c000a71f <dir_close>
c0007804:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:398
		break;
c0007807:	eb 1a                	jmp    c0007823 <sys_open+0x25a>
/work/x86_os_my/fs/fs.c:402

		default:
		/* 其余情况均为打开已存在文件: O_RDONLY,O_WRONLY,O_RDWR */
		fd = file_open(inode_no, flags);
c0007809:	0f b6 95 d4 fd ff ff 	movzbl -0x22c(%ebp),%edx
c0007810:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0007813:	83 ec 08             	sub    $0x8,%esp
c0007816:	52                   	push   %edx
c0007817:	50                   	push   %eax
c0007818:	e8 21 20 00 00       	call   c000983e <file_open>
c000781d:	83 c4 10             	add    $0x10,%esp
c0007820:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:407
	}

	/* 此fd是指任务pcb->fd_table数组中的元素下标,
	 * 并不是指全局file_table中的下标 */
	return fd;
c0007823:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:408 (discriminator 1)
}
c0007826:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0007829:	c9                   	leave  
c000782a:	c3                   	ret    

c000782b <fd_local2global>:
fd_local2global():
/work/x86_os_my/fs/fs.c:411

/* 将文件描述符转化为文件表的下标 */
static uint32_t fd_local2global(uint32_t local_fd) {
c000782b:	55                   	push   %ebp
c000782c:	89 e5                	mov    %esp,%ebp
c000782e:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/fs.c:412
	struct task_struct* cur = running_thread();
c0007831:	e8 a4 c4 ff ff       	call   c0003cda <running_thread>
c0007836:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:413
	int32_t global_fd = cur->fd_table[local_fd];
c0007839:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000783c:	8b 55 08             	mov    0x8(%ebp),%edx
c000783f:	83 c2 08             	add    $0x8,%edx
c0007842:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
c0007846:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:414
	ASSERT(global_fd >= 0 && global_fd < MAX_FILE_OPEN);
c0007849:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c000784d:	78 06                	js     c0007855 <fd_local2global+0x2a>
/work/x86_os_my/fs/fs.c:414 (discriminator 1)
c000784f:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c0007853:	7e 1c                	jle    c0007871 <fd_local2global+0x46>
/work/x86_os_my/fs/fs.c:414 (discriminator 3)
c0007855:	68 8c de 00 c0       	push   $0xc000de8c
c000785a:	68 a8 e3 00 c0       	push   $0xc000e3a8
c000785f:	68 9e 01 00 00       	push   $0x19e
c0007864:	68 b1 db 00 c0       	push   $0xc000dbb1
c0007869:	e8 e3 ab ff ff       	call   c0002451 <panic_spin>
c000786e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:415
	return (uint32_t)global_fd;
c0007871:	8b 45 f0             	mov    -0x10(%ebp),%eax
/work/x86_os_my/fs/fs.c:416
}
c0007874:	c9                   	leave  
c0007875:	c3                   	ret    

c0007876 <sys_close>:
sys_close():
/work/x86_os_my/fs/fs.c:419

/* 关闭文件描述符fd指向的文件,成功返回0,否则返回-1 */
int32_t sys_close(int32_t fd) {
c0007876:	55                   	push   %ebp
c0007877:	89 e5                	mov    %esp,%ebp
c0007879:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/fs.c:420
	int32_t ret = -1;   // 返回值默认为-1,即失败
c000787c:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:421
	if (fd > 2) {
c0007883:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c0007887:	7e 47                	jle    c00078d0 <sys_close+0x5a>
/work/x86_os_my/fs/fs.c:422
		uint32_t _fd = fd_local2global(fd);
c0007889:	8b 45 08             	mov    0x8(%ebp),%eax
c000788c:	83 ec 0c             	sub    $0xc,%esp
c000788f:	50                   	push   %eax
c0007890:	e8 96 ff ff ff       	call   c000782b <fd_local2global>
c0007895:	83 c4 10             	add    $0x10,%esp
c0007898:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:423
		ret = file_close(&file_table[_fd]);
c000789b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000789e:	89 d0                	mov    %edx,%eax
c00078a0:	01 c0                	add    %eax,%eax
c00078a2:	01 d0                	add    %edx,%eax
c00078a4:	c1 e0 02             	shl    $0x2,%eax
c00078a7:	05 20 30 01 c0       	add    $0xc0013020,%eax
c00078ac:	83 ec 0c             	sub    $0xc,%esp
c00078af:	50                   	push   %eax
c00078b0:	e8 a2 20 00 00       	call   c0009957 <file_close>
c00078b5:	83 c4 10             	add    $0x10,%esp
c00078b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:424
		running_thread()->fd_table[fd] = -1; // 使该文件描述符位可用
c00078bb:	e8 1a c4 ff ff       	call   c0003cda <running_thread>
c00078c0:	89 c2                	mov    %eax,%edx
c00078c2:	8b 45 08             	mov    0x8(%ebp),%eax
c00078c5:	83 c0 08             	add    $0x8,%eax
c00078c8:	c7 44 82 04 ff ff ff 	movl   $0xffffffff,0x4(%edx,%eax,4)
c00078cf:	ff 
/work/x86_os_my/fs/fs.c:426
	}
	return ret;
c00078d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:427
}
c00078d3:	c9                   	leave  
c00078d4:	c3                   	ret    

c00078d5 <sys_write>:
sys_write():
/work/x86_os_my/fs/fs.c:430

/* 将buf中连续count个字节写入文件描述符fd,成功则返回写入的字节数,失败返回-1 */
int32_t sys_write(int32_t fd, const void* buf, uint32_t count) {
c00078d5:	55                   	push   %ebp
c00078d6:	89 e5                	mov    %esp,%ebp
c00078d8:	57                   	push   %edi
c00078d9:	81 ec 14 04 00 00    	sub    $0x414,%esp
/work/x86_os_my/fs/fs.c:431
   if (fd < 0) {
c00078df:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00078e3:	79 1a                	jns    c00078ff <sys_write+0x2a>
/work/x86_os_my/fs/fs.c:432
      printk("sys_write: fd error\n");
c00078e5:	83 ec 0c             	sub    $0xc,%esp
c00078e8:	68 b8 de 00 c0       	push   $0xc000deb8
c00078ed:	e8 bc f2 ff ff       	call   c0006bae <printk>
c00078f2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:433
      return -1;
c00078f5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00078fa:	e9 ba 00 00 00       	jmp    c00079b9 <sys_write+0xe4>
/work/x86_os_my/fs/fs.c:435
   }
   if (fd == stdout_no) {
c00078ff:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c0007903:	75 43                	jne    c0007948 <sys_write+0x73>
/work/x86_os_my/fs/fs.c:436
      char tmp_buf[1024] = {0};
c0007905:	8d 95 ec fb ff ff    	lea    -0x414(%ebp),%edx
c000790b:	b8 00 00 00 00       	mov    $0x0,%eax
c0007910:	b9 00 01 00 00       	mov    $0x100,%ecx
c0007915:	89 d7                	mov    %edx,%edi
c0007917:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/fs/fs.c:437
      memcpy(tmp_buf, buf, count);
c0007919:	83 ec 04             	sub    $0x4,%esp
c000791c:	ff 75 10             	pushl  0x10(%ebp)
c000791f:	ff 75 0c             	pushl  0xc(%ebp)
c0007922:	8d 85 ec fb ff ff    	lea    -0x414(%ebp),%eax
c0007928:	50                   	push   %eax
c0007929:	e8 17 c0 ff ff       	call   c0003945 <memcpy>
c000792e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:438
      console_put_str(tmp_buf);
c0007931:	83 ec 0c             	sub    $0xc,%esp
c0007934:	8d 85 ec fb ff ff    	lea    -0x414(%ebp),%eax
c000793a:	50                   	push   %eax
c000793b:	e8 00 d0 ff ff       	call   c0004940 <console_put_str>
c0007940:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:439
      return count;
c0007943:	8b 45 10             	mov    0x10(%ebp),%eax
c0007946:	eb 71                	jmp    c00079b9 <sys_write+0xe4>
/work/x86_os_my/fs/fs.c:441
   }
   uint32_t _fd = fd_local2global(fd);
c0007948:	8b 45 08             	mov    0x8(%ebp),%eax
c000794b:	83 ec 0c             	sub    $0xc,%esp
c000794e:	50                   	push   %eax
c000794f:	e8 d7 fe ff ff       	call   c000782b <fd_local2global>
c0007954:	83 c4 10             	add    $0x10,%esp
c0007957:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:442
   struct file* wr_file = &file_table[_fd];
c000795a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000795d:	89 d0                	mov    %edx,%eax
c000795f:	01 c0                	add    %eax,%eax
c0007961:	01 d0                	add    %edx,%eax
c0007963:	c1 e0 02             	shl    $0x2,%eax
c0007966:	05 20 30 01 c0       	add    $0xc0013020,%eax
c000796b:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:443
   if (wr_file->fd_flag & O_WRONLY || wr_file->fd_flag & O_RDWR) {
c000796e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0007971:	8b 40 04             	mov    0x4(%eax),%eax
c0007974:	83 e0 01             	and    $0x1,%eax
c0007977:	85 c0                	test   %eax,%eax
c0007979:	75 0d                	jne    c0007988 <sys_write+0xb3>
/work/x86_os_my/fs/fs.c:443 (discriminator 1)
c000797b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000797e:	8b 40 04             	mov    0x4(%eax),%eax
c0007981:	83 e0 02             	and    $0x2,%eax
c0007984:	85 c0                	test   %eax,%eax
c0007986:	74 1c                	je     c00079a4 <sys_write+0xcf>
/work/x86_os_my/fs/fs.c:444
      uint32_t bytes_written  = file_write(wr_file, buf, count);
c0007988:	83 ec 04             	sub    $0x4,%esp
c000798b:	ff 75 10             	pushl  0x10(%ebp)
c000798e:	ff 75 0c             	pushl  0xc(%ebp)
c0007991:	ff 75 f0             	pushl  -0x10(%ebp)
c0007994:	e8 01 20 00 00       	call   c000999a <file_write>
c0007999:	83 c4 10             	add    $0x10,%esp
c000799c:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:445
      return bytes_written;
c000799f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00079a2:	eb 15                	jmp    c00079b9 <sys_write+0xe4>
/work/x86_os_my/fs/fs.c:447
   } else {
      console_put_str("sys_write: not allowed to write file without flag O_RDWR or O_WRONLY\n");
c00079a4:	83 ec 0c             	sub    $0xc,%esp
c00079a7:	68 d0 de 00 c0       	push   $0xc000ded0
c00079ac:	e8 8f cf ff ff       	call   c0004940 <console_put_str>
c00079b1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:448
      return -1;
c00079b4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
/work/x86_os_my/fs/fs.c:450 (discriminator 1)
   }
}
c00079b9:	8b 7d fc             	mov    -0x4(%ebp),%edi
c00079bc:	c9                   	leave  
c00079bd:	c3                   	ret    

c00079be <sys_read>:
sys_read():
/work/x86_os_my/fs/fs.c:453

/* 从文件描述符fd指向的文件中读取count个字节到buf,若成功则返回读出的字节数,到文件尾则返回-1 */
int32_t sys_read(int32_t fd, void* buf, uint32_t count) {
c00079be:	55                   	push   %ebp
c00079bf:	89 e5                	mov    %esp,%ebp
c00079c1:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/fs.c:454
	ASSERT(buf != NULL);
c00079c4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c00079c8:	75 1c                	jne    c00079e6 <sys_read+0x28>
/work/x86_os_my/fs/fs.c:454 (discriminator 1)
c00079ca:	68 16 df 00 c0       	push   $0xc000df16
c00079cf:	68 b8 e3 00 c0       	push   $0xc000e3b8
c00079d4:	68 c6 01 00 00       	push   $0x1c6
c00079d9:	68 b1 db 00 c0       	push   $0xc000dbb1
c00079de:	e8 6e aa ff ff       	call   c0002451 <panic_spin>
c00079e3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:455
	int32_t ret = -1;
c00079e6:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:456
	if (fd < 0 || fd == stdout_no || fd == stderr_no) {
c00079ed:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00079f1:	78 0c                	js     c00079ff <sys_read+0x41>
/work/x86_os_my/fs/fs.c:456 (discriminator 1)
c00079f3:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c00079f7:	74 06                	je     c00079ff <sys_read+0x41>
/work/x86_os_my/fs/fs.c:456 (discriminator 2)
c00079f9:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c00079fd:	75 15                	jne    c0007a14 <sys_read+0x56>
/work/x86_os_my/fs/fs.c:457
		printk("sys_read: fd error\n");
c00079ff:	83 ec 0c             	sub    $0xc,%esp
c0007a02:	68 22 df 00 c0       	push   $0xc000df22
c0007a07:	e8 a2 f1 ff ff       	call   c0006bae <printk>
c0007a0c:	83 c4 10             	add    $0x10,%esp
c0007a0f:	e9 89 00 00 00       	jmp    c0007a9d <sys_read+0xdf>
/work/x86_os_my/fs/fs.c:458
	} else if (fd == stdin_no) {
c0007a14:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0007a18:	75 4b                	jne    c0007a65 <sys_read+0xa7>
/work/x86_os_my/fs/fs.c:459
		char* buffer = buf;
c0007a1a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007a1d:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:460
		uint32_t bytes_read = 0;
c0007a20:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:461
		while (bytes_read < count) {
c0007a27:	eb 1f                	jmp    c0007a48 <sys_read+0x8a>
/work/x86_os_my/fs/fs.c:462
			*buffer = ioq_getchar(&kbd_buf);
c0007a29:	83 ec 0c             	sub    $0xc,%esp
c0007a2c:	68 20 22 01 c0       	push   $0xc0012220
c0007a31:	e8 01 d7 ff ff       	call   c0005137 <ioq_getchar>
c0007a36:	83 c4 10             	add    $0x10,%esp
c0007a39:	89 c2                	mov    %eax,%edx
c0007a3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0007a3e:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/fs/fs.c:463
			bytes_read++;
c0007a40:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:464
			buffer++;
c0007a44:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:461
	if (fd < 0 || fd == stdout_no || fd == stderr_no) {
		printk("sys_read: fd error\n");
	} else if (fd == stdin_no) {
		char* buffer = buf;
		uint32_t bytes_read = 0;
		while (bytes_read < count) {
c0007a48:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0007a4b:	3b 45 10             	cmp    0x10(%ebp),%eax
c0007a4e:	72 d9                	jb     c0007a29 <sys_read+0x6b>
/work/x86_os_my/fs/fs.c:466
			*buffer = ioq_getchar(&kbd_buf);
			bytes_read++;
			buffer++;
		}
		ret = (bytes_read == 0 ? -1 : (int32_t)bytes_read);
c0007a50:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0007a54:	74 05                	je     c0007a5b <sys_read+0x9d>
/work/x86_os_my/fs/fs.c:466 (discriminator 1)
c0007a56:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0007a59:	eb 05                	jmp    c0007a60 <sys_read+0xa2>
/work/x86_os_my/fs/fs.c:466 (discriminator 2)
c0007a5b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
/work/x86_os_my/fs/fs.c:466 (discriminator 4)
c0007a60:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0007a63:	eb 38                	jmp    c0007a9d <sys_read+0xdf>
/work/x86_os_my/fs/fs.c:468
	} else {
		uint32_t _fd = fd_local2global(fd);
c0007a65:	8b 45 08             	mov    0x8(%ebp),%eax
c0007a68:	83 ec 0c             	sub    $0xc,%esp
c0007a6b:	50                   	push   %eax
c0007a6c:	e8 ba fd ff ff       	call   c000782b <fd_local2global>
c0007a71:	83 c4 10             	add    $0x10,%esp
c0007a74:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:469
		ret = file_read(&file_table[_fd], buf, count);
c0007a77:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0007a7a:	89 d0                	mov    %edx,%eax
c0007a7c:	01 c0                	add    %eax,%eax
c0007a7e:	01 d0                	add    %edx,%eax
c0007a80:	c1 e0 02             	shl    $0x2,%eax
c0007a83:	05 20 30 01 c0       	add    $0xc0013020,%eax
c0007a88:	83 ec 04             	sub    $0x4,%esp
c0007a8b:	ff 75 10             	pushl  0x10(%ebp)
c0007a8e:	ff 75 0c             	pushl  0xc(%ebp)
c0007a91:	50                   	push   %eax
c0007a92:	e8 97 26 00 00       	call   c000a12e <file_read>
c0007a97:	83 c4 10             	add    $0x10,%esp
c0007a9a:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:471
	}
	return ret;
c0007a9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:472
}
c0007aa0:	c9                   	leave  
c0007aa1:	c3                   	ret    

c0007aa2 <sys_lseek>:
sys_lseek():
/work/x86_os_my/fs/fs.c:476


/* 重置用于文件读写指针,成功时返回新的偏移量,出错时返回-1 */
int32_t sys_lseek(int32_t fd, int32_t offset, uint8_t whence) {
c0007aa2:	55                   	push   %ebp
c0007aa3:	89 e5                	mov    %esp,%ebp
c0007aa5:	83 ec 28             	sub    $0x28,%esp
c0007aa8:	8b 45 10             	mov    0x10(%ebp),%eax
c0007aab:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/fs/fs.c:477
	if (fd < 0) {
c0007aae:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0007ab2:	79 1a                	jns    c0007ace <sys_lseek+0x2c>
/work/x86_os_my/fs/fs.c:478
		printk("sys_lseek: fd error\n");
c0007ab4:	83 ec 0c             	sub    $0xc,%esp
c0007ab7:	68 36 df 00 c0       	push   $0xc000df36
c0007abc:	e8 ed f0 ff ff       	call   c0006bae <printk>
c0007ac1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:479
		return -1;
c0007ac4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007ac9:	e9 bd 00 00 00       	jmp    c0007b8b <sys_lseek+0xe9>
/work/x86_os_my/fs/fs.c:481
	}
	ASSERT(whence > 0 && whence < 4);
c0007ace:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c0007ad2:	74 06                	je     c0007ada <sys_lseek+0x38>
/work/x86_os_my/fs/fs.c:481 (discriminator 1)
c0007ad4:	80 7d e4 03          	cmpb   $0x3,-0x1c(%ebp)
c0007ad8:	76 1c                	jbe    c0007af6 <sys_lseek+0x54>
/work/x86_os_my/fs/fs.c:481 (discriminator 3)
c0007ada:	68 4b df 00 c0       	push   $0xc000df4b
c0007adf:	68 c4 e3 00 c0       	push   $0xc000e3c4
c0007ae4:	68 e1 01 00 00       	push   $0x1e1
c0007ae9:	68 b1 db 00 c0       	push   $0xc000dbb1
c0007aee:	e8 5e a9 ff ff       	call   c0002451 <panic_spin>
c0007af3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:482
	uint32_t _fd = fd_local2global(fd);
c0007af6:	8b 45 08             	mov    0x8(%ebp),%eax
c0007af9:	83 ec 0c             	sub    $0xc,%esp
c0007afc:	50                   	push   %eax
c0007afd:	e8 29 fd ff ff       	call   c000782b <fd_local2global>
c0007b02:	83 c4 10             	add    $0x10,%esp
c0007b05:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:483
	struct file* pf = &file_table[_fd];
c0007b08:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0007b0b:	89 d0                	mov    %edx,%eax
c0007b0d:	01 c0                	add    %eax,%eax
c0007b0f:	01 d0                	add    %edx,%eax
c0007b11:	c1 e0 02             	shl    $0x2,%eax
c0007b14:	05 20 30 01 c0       	add    $0xc0013020,%eax
c0007b19:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:484
	int32_t new_pos = 0;	//新的偏移量必须位于文件大小之内
c0007b1c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:485
	int32_t file_size = (int32_t)pf->fd_inode->i_size;
c0007b23:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0007b26:	8b 40 08             	mov    0x8(%eax),%eax
c0007b29:	8b 40 04             	mov    0x4(%eax),%eax
c0007b2c:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:486
	switch (whence) {
c0007b2f:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0007b33:	83 f8 02             	cmp    $0x2,%eax
c0007b36:	74 12                	je     c0007b4a <sys_lseek+0xa8>
c0007b38:	83 f8 03             	cmp    $0x3,%eax
c0007b3b:	74 1e                	je     c0007b5b <sys_lseek+0xb9>
c0007b3d:	83 f8 01             	cmp    $0x1,%eax
c0007b40:	75 24                	jne    c0007b66 <sys_lseek+0xc4>
/work/x86_os_my/fs/fs.c:489
		/* SEEK_SET 新的读写位置是相对于文件开头再增加offset个位移量 */
		case SEEK_SET:
		new_pos = offset;
c0007b42:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007b45:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:490
		break;
c0007b48:	eb 1c                	jmp    c0007b66 <sys_lseek+0xc4>
/work/x86_os_my/fs/fs.c:494

		/* SEEK_CUR 新的读写位置是相对于当前的位置增加offset个位移量 */
		case SEEK_CUR:	// offse可正可负
		new_pos = (int32_t)pf->fd_pos + offset;
c0007b4a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0007b4d:	8b 00                	mov    (%eax),%eax
c0007b4f:	89 c2                	mov    %eax,%edx
c0007b51:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007b54:	01 d0                	add    %edx,%eax
c0007b56:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:495
		break;
c0007b59:	eb 0b                	jmp    c0007b66 <sys_lseek+0xc4>
/work/x86_os_my/fs/fs.c:499

		/* SEEK_END 新的读写位置是相对于文件尺寸再增加offset个位移量 */
		case SEEK_END:	// 此情况下,offset应该为负值
		new_pos = file_size + offset;
c0007b5b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0007b5e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007b61:	01 d0                	add    %edx,%eax
c0007b63:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:501
	}
	if (new_pos < 0 || new_pos > (file_size - 1)) {
c0007b66:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0007b6a:	78 0b                	js     c0007b77 <sys_lseek+0xd5>
/work/x86_os_my/fs/fs.c:501 (discriminator 1)
c0007b6c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0007b6f:	83 e8 01             	sub    $0x1,%eax
c0007b72:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0007b75:	7d 07                	jge    c0007b7e <sys_lseek+0xdc>
/work/x86_os_my/fs/fs.c:502
		return -1;
c0007b77:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007b7c:	eb 0d                	jmp    c0007b8b <sys_lseek+0xe9>
/work/x86_os_my/fs/fs.c:504
	}
	pf->fd_pos = new_pos;
c0007b7e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0007b81:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0007b84:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/fs/fs.c:505
	return pf->fd_pos;
c0007b86:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0007b89:	8b 00                	mov    (%eax),%eax
/work/x86_os_my/fs/fs.c:506
}
c0007b8b:	c9                   	leave  
c0007b8c:	c3                   	ret    

c0007b8d <sys_unlink>:
sys_unlink():
/work/x86_os_my/fs/fs.c:510

/* 删除文件(非目录),成功返回0,失败返回-1 */
// 全局变量 file_table 定义在 file.h
int32_t sys_unlink(const char* pathname) {
c0007b8d:	55                   	push   %ebp
c0007b8e:	89 e5                	mov    %esp,%ebp
c0007b90:	81 ec 28 02 00 00    	sub    $0x228,%esp
/work/x86_os_my/fs/fs.c:511
	ASSERT(strlen(pathname) < MAX_PATH_LEN);
c0007b96:	83 ec 0c             	sub    $0xc,%esp
c0007b99:	ff 75 08             	pushl  0x8(%ebp)
c0007b9c:	e8 dc be ff ff       	call   c0003a7d <strlen>
c0007ba1:	83 c4 10             	add    $0x10,%esp
c0007ba4:	3d ff 01 00 00       	cmp    $0x1ff,%eax
c0007ba9:	76 1c                	jbe    c0007bc7 <sys_unlink+0x3a>
/work/x86_os_my/fs/fs.c:511 (discriminator 1)
c0007bab:	68 64 df 00 c0       	push   $0xc000df64
c0007bb0:	68 d0 e3 00 c0       	push   $0xc000e3d0
c0007bb5:	68 ff 01 00 00       	push   $0x1ff
c0007bba:	68 b1 db 00 c0       	push   $0xc000dbb1
c0007bbf:	e8 8d a8 ff ff       	call   c0002451 <panic_spin>
c0007bc4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:515

	/* 先检查待删除的文件是否存在 */
	struct path_search_record searched_record;
	memset(&searched_record, 0, sizeof(struct path_search_record));
c0007bc7:	83 ec 04             	sub    $0x4,%esp
c0007bca:	68 08 02 00 00       	push   $0x208
c0007bcf:	6a 00                	push   $0x0
c0007bd1:	8d 85 e0 fd ff ff    	lea    -0x220(%ebp),%eax
c0007bd7:	50                   	push   %eax
c0007bd8:	e8 16 bd ff ff       	call   c00038f3 <memset>
c0007bdd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:516
	int inode_no = search_file(pathname, &searched_record);
c0007be0:	83 ec 08             	sub    $0x8,%esp
c0007be3:	8d 85 e0 fd ff ff    	lea    -0x220(%ebp),%eax
c0007be9:	50                   	push   %eax
c0007bea:	ff 75 08             	pushl  0x8(%ebp)
c0007bed:	e8 58 f7 ff ff       	call   c000734a <search_file>
c0007bf2:	83 c4 10             	add    $0x10,%esp
c0007bf5:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:517
	ASSERT(inode_no != 0);
c0007bf8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0007bfc:	75 1c                	jne    c0007c1a <sys_unlink+0x8d>
/work/x86_os_my/fs/fs.c:517 (discriminator 1)
c0007bfe:	68 84 df 00 c0       	push   $0xc000df84
c0007c03:	68 d0 e3 00 c0       	push   $0xc000e3d0
c0007c08:	68 05 02 00 00       	push   $0x205
c0007c0d:	68 b1 db 00 c0       	push   $0xc000dbb1
c0007c12:	e8 3a a8 ff ff       	call   c0002451 <panic_spin>
c0007c17:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:518
	if (inode_no == -1) {
c0007c1a:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c0007c1e:	75 2c                	jne    c0007c4c <sys_unlink+0xbf>
/work/x86_os_my/fs/fs.c:519
		printk("file %s not found!\n", pathname);
c0007c20:	83 ec 08             	sub    $0x8,%esp
c0007c23:	ff 75 08             	pushl  0x8(%ebp)
c0007c26:	68 92 df 00 c0       	push   $0xc000df92
c0007c2b:	e8 7e ef ff ff       	call   c0006bae <printk>
c0007c30:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:520
		dir_close(searched_record.parent_dir);
c0007c33:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0007c36:	83 ec 0c             	sub    $0xc,%esp
c0007c39:	50                   	push   %eax
c0007c3a:	e8 e0 2a 00 00       	call   c000a71f <dir_close>
c0007c3f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:521
		return -1;
c0007c42:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007c47:	e9 62 01 00 00       	jmp    c0007dae <sys_unlink+0x221>
/work/x86_os_my/fs/fs.c:523
	}
	if (searched_record.file_type == FT_DIRECTORY) {	//存在同名的目录，而不是文件
c0007c4c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0007c4f:	83 f8 02             	cmp    $0x2,%eax
c0007c52:	75 29                	jne    c0007c7d <sys_unlink+0xf0>
/work/x86_os_my/fs/fs.c:524
		printk("can`t delete a direcotry with unlink(), use rmdir() to instead\n");
c0007c54:	83 ec 0c             	sub    $0xc,%esp
c0007c57:	68 a8 df 00 c0       	push   $0xc000dfa8
c0007c5c:	e8 4d ef ff ff       	call   c0006bae <printk>
c0007c61:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:525
		dir_close(searched_record.parent_dir);
c0007c64:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0007c67:	83 ec 0c             	sub    $0xc,%esp
c0007c6a:	50                   	push   %eax
c0007c6b:	e8 af 2a 00 00       	call   c000a71f <dir_close>
c0007c70:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:526
		return -1;
c0007c73:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007c78:	e9 31 01 00 00       	jmp    c0007dae <sys_unlink+0x221>
/work/x86_os_my/fs/fs.c:530
	}

	/* 检查是否在已打开文件列表(文件表)中 */
	uint32_t file_idx = 0;
c0007c7d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:531
	while (file_idx < MAX_FILE_OPEN) {
c0007c84:	eb 37                	jmp    c0007cbd <sys_unlink+0x130>
/work/x86_os_my/fs/fs.c:532
		if (file_table[file_idx].fd_inode != NULL && (uint32_t)inode_no == file_table[file_idx].fd_inode->i_no) {
c0007c86:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0007c89:	89 d0                	mov    %edx,%eax
c0007c8b:	01 c0                	add    %eax,%eax
c0007c8d:	01 d0                	add    %edx,%eax
c0007c8f:	c1 e0 02             	shl    $0x2,%eax
c0007c92:	05 28 30 01 c0       	add    $0xc0013028,%eax
c0007c97:	8b 00                	mov    (%eax),%eax
c0007c99:	85 c0                	test   %eax,%eax
c0007c9b:	74 1c                	je     c0007cb9 <sys_unlink+0x12c>
/work/x86_os_my/fs/fs.c:532 (discriminator 1)
c0007c9d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0007ca0:	89 d0                	mov    %edx,%eax
c0007ca2:	01 c0                	add    %eax,%eax
c0007ca4:	01 d0                	add    %edx,%eax
c0007ca6:	c1 e0 02             	shl    $0x2,%eax
c0007ca9:	05 28 30 01 c0       	add    $0xc0013028,%eax
c0007cae:	8b 00                	mov    (%eax),%eax
c0007cb0:	8b 10                	mov    (%eax),%edx
c0007cb2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0007cb5:	39 c2                	cmp    %eax,%edx
c0007cb7:	74 0c                	je     c0007cc5 <sys_unlink+0x138>
/work/x86_os_my/fs/fs.c:535
			break;
		}
		file_idx++;
c0007cb9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:531
		return -1;
	}

	/* 检查是否在已打开文件列表(文件表)中 */
	uint32_t file_idx = 0;
	while (file_idx < MAX_FILE_OPEN) {
c0007cbd:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c0007cc1:	76 c3                	jbe    c0007c86 <sys_unlink+0xf9>
c0007cc3:	eb 01                	jmp    c0007cc6 <sys_unlink+0x139>
/work/x86_os_my/fs/fs.c:533
		if (file_table[file_idx].fd_inode != NULL && (uint32_t)inode_no == file_table[file_idx].fd_inode->i_no) {
			break;
c0007cc5:	90                   	nop
/work/x86_os_my/fs/fs.c:537
		}
		file_idx++;
	}
	if (file_idx < MAX_FILE_OPEN) {
c0007cc6:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c0007cca:	77 2c                	ja     c0007cf8 <sys_unlink+0x16b>
/work/x86_os_my/fs/fs.c:538
		dir_close(searched_record.parent_dir);
c0007ccc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0007ccf:	83 ec 0c             	sub    $0xc,%esp
c0007cd2:	50                   	push   %eax
c0007cd3:	e8 47 2a 00 00       	call   c000a71f <dir_close>
c0007cd8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:539
		printk("file %s is in use, not allow to delete!\n", pathname);
c0007cdb:	83 ec 08             	sub    $0x8,%esp
c0007cde:	ff 75 08             	pushl  0x8(%ebp)
c0007ce1:	68 e8 df 00 c0       	push   $0xc000dfe8
c0007ce6:	e8 c3 ee ff ff       	call   c0006bae <printk>
c0007ceb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:540
		return -1;
c0007cee:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007cf3:	e9 b6 00 00 00       	jmp    c0007dae <sys_unlink+0x221>
/work/x86_os_my/fs/fs.c:542
	}
	ASSERT(file_idx == MAX_FILE_OPEN);
c0007cf8:	83 7d f4 20          	cmpl   $0x20,-0xc(%ebp)
c0007cfc:	74 1c                	je     c0007d1a <sys_unlink+0x18d>
/work/x86_os_my/fs/fs.c:542 (discriminator 1)
c0007cfe:	68 11 e0 00 c0       	push   $0xc000e011
c0007d03:	68 d0 e3 00 c0       	push   $0xc000e3d0
c0007d08:	68 1e 02 00 00       	push   $0x21e
c0007d0d:	68 b1 db 00 c0       	push   $0xc000dbb1
c0007d12:	e8 3a a7 ff ff       	call   c0002451 <panic_spin>
c0007d17:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:545

	/* 为delete_dir_entry申请缓冲区 */
	void* io_buf = sys_malloc(SECTOR_SIZE + SECTOR_SIZE);
c0007d1a:	83 ec 0c             	sub    $0xc,%esp
c0007d1d:	68 00 04 00 00       	push   $0x400
c0007d22:	e8 d5 b0 ff ff       	call   c0002dfc <sys_malloc>
c0007d27:	83 c4 10             	add    $0x10,%esp
c0007d2a:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:546
	if (io_buf == NULL) {
c0007d2d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0007d31:	75 26                	jne    c0007d59 <sys_unlink+0x1cc>
/work/x86_os_my/fs/fs.c:547
		dir_close(searched_record.parent_dir);
c0007d33:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0007d36:	83 ec 0c             	sub    $0xc,%esp
c0007d39:	50                   	push   %eax
c0007d3a:	e8 e0 29 00 00       	call   c000a71f <dir_close>
c0007d3f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:548
		printk("sys_unlink: malloc for io_buf failed\n");
c0007d42:	83 ec 0c             	sub    $0xc,%esp
c0007d45:	68 2c e0 00 c0       	push   $0xc000e02c
c0007d4a:	e8 5f ee ff ff       	call   c0006bae <printk>
c0007d4f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:549
		return -1;
c0007d52:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007d57:	eb 55                	jmp    c0007dae <sys_unlink+0x221>
/work/x86_os_my/fs/fs.c:552
	}

	struct dir* parent_dir = searched_record.parent_dir;
c0007d59:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0007d5c:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:553
	delete_dir_entry(cur_part, parent_dir, inode_no, io_buf);	// 删除目录项 dir.c
c0007d5f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0007d62:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0007d67:	ff 75 ec             	pushl  -0x14(%ebp)
c0007d6a:	52                   	push   %edx
c0007d6b:	ff 75 e8             	pushl  -0x18(%ebp)
c0007d6e:	50                   	push   %eax
c0007d6f:	e8 6a 2e 00 00       	call   c000abde <delete_dir_entry>
c0007d74:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:554
	inode_release(cur_part, inode_no);							// 删除inode inode.c
c0007d77:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0007d7a:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0007d7f:	83 ec 08             	sub    $0x8,%esp
c0007d82:	52                   	push   %edx
c0007d83:	50                   	push   %eax
c0007d84:	e8 81 13 00 00       	call   c000910a <inode_release>
c0007d89:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:555
	sys_free(io_buf);
c0007d8c:	83 ec 0c             	sub    $0xc,%esp
c0007d8f:	ff 75 ec             	pushl  -0x14(%ebp)
c0007d92:	e8 92 b6 ff ff       	call   c0003429 <sys_free>
c0007d97:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:556
	dir_close(searched_record.parent_dir);
c0007d9a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0007d9d:	83 ec 0c             	sub    $0xc,%esp
c0007da0:	50                   	push   %eax
c0007da1:	e8 79 29 00 00       	call   c000a71f <dir_close>
c0007da6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:557
	return 0;	// 成功删除文件
c0007da9:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/fs.c:558 (discriminator 1)
}
c0007dae:	c9                   	leave  
c0007daf:	c3                   	ret    

c0007db0 <sys_mkdir>:
sys_mkdir():
/work/x86_os_my/fs/fs.c:569
（3）为新目录分配 1 个块存储该目录中的目录项。
（4）在新目录中创建两个目录项“.”和“..”，这是每个目录都必须存在的两个目录项。
（5）在新目录的父目录中添加新目录的目录项。
（6）将以上资源的变更同步到硬盘。
 */
int32_t sys_mkdir(const char* pathname) {
c0007db0:	55                   	push   %ebp
c0007db1:	89 e5                	mov    %esp,%ebp
c0007db3:	81 ec a8 02 00 00    	sub    $0x2a8,%esp
/work/x86_os_my/fs/fs.c:570
	uint8_t rollback_step = 0;	       // 用于操作失败时回滚各资源状态
c0007db9:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:571
	void* io_buf = sys_malloc(SECTOR_SIZE * 2);
c0007dbd:	83 ec 0c             	sub    $0xc,%esp
c0007dc0:	68 00 04 00 00       	push   $0x400
c0007dc5:	e8 32 b0 ff ff       	call   c0002dfc <sys_malloc>
c0007dca:	83 c4 10             	add    $0x10,%esp
c0007dcd:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:572
	if (io_buf == NULL) {
c0007dd0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0007dd4:	75 1a                	jne    c0007df0 <sys_mkdir+0x40>
/work/x86_os_my/fs/fs.c:573
		printk("sys_mkdir: sys_malloc for io_buf failed\n");
c0007dd6:	83 ec 0c             	sub    $0xc,%esp
c0007dd9:	68 54 e0 00 c0       	push   $0xc000e054
c0007dde:	e8 cb ed ff ff       	call   c0006bae <printk>
c0007de3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:574
		return -1;
c0007de6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007deb:	e9 ae 03 00 00       	jmp    c000819e <sys_mkdir+0x3ee>
/work/x86_os_my/fs/fs.c:578
	}

	struct path_search_record searched_record;
	memset(&searched_record, 0, sizeof(struct path_search_record));
c0007df0:	83 ec 04             	sub    $0x4,%esp
c0007df3:	68 08 02 00 00       	push   $0x208
c0007df8:	6a 00                	push   $0x0
c0007dfa:	8d 85 c8 fd ff ff    	lea    -0x238(%ebp),%eax
c0007e00:	50                   	push   %eax
c0007e01:	e8 ed ba ff ff       	call   c00038f3 <memset>
c0007e06:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:579
	int inode_no = -1;
c0007e09:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:580
	inode_no = search_file(pathname, &searched_record);
c0007e10:	83 ec 08             	sub    $0x8,%esp
c0007e13:	8d 85 c8 fd ff ff    	lea    -0x238(%ebp),%eax
c0007e19:	50                   	push   %eax
c0007e1a:	ff 75 08             	pushl  0x8(%ebp)
c0007e1d:	e8 28 f5 ff ff       	call   c000734a <search_file>
c0007e22:	83 c4 10             	add    $0x10,%esp
c0007e25:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:581
	if (inode_no != -1) {      // 如果找到了同名目录或文件,失败返回
c0007e28:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c0007e2c:	74 1c                	je     c0007e4a <sys_mkdir+0x9a>
/work/x86_os_my/fs/fs.c:582
		printk("sys_mkdir: file or directory %s exist!\n", pathname);
c0007e2e:	83 ec 08             	sub    $0x8,%esp
c0007e31:	ff 75 08             	pushl  0x8(%ebp)
c0007e34:	68 80 e0 00 c0       	push   $0xc000e080
c0007e39:	e8 70 ed ff ff       	call   c0006bae <printk>
c0007e3e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:583
		rollback_step = 1;
c0007e41:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:584
		goto rollback;
c0007e45:	e9 08 03 00 00       	jmp    c0008152 <sys_mkdir+0x3a2>
/work/x86_os_my/fs/fs.c:586
	} else {	     // 若未找到,也要判断是在最终目录没找到还是某个中间目录不存在
		uint32_t pathname_depth = path_depth_cnt((char*)pathname);
c0007e4a:	83 ec 0c             	sub    $0xc,%esp
c0007e4d:	ff 75 08             	pushl  0x8(%ebp)
c0007e50:	e8 6a f4 ff ff       	call   c00072bf <path_depth_cnt>
c0007e55:	83 c4 10             	add    $0x10,%esp
c0007e58:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:587
		uint32_t path_searched_depth = path_depth_cnt(searched_record.searched_path);
c0007e5b:	83 ec 0c             	sub    $0xc,%esp
c0007e5e:	8d 85 c8 fd ff ff    	lea    -0x238(%ebp),%eax
c0007e64:	50                   	push   %eax
c0007e65:	e8 55 f4 ff ff       	call   c00072bf <path_depth_cnt>
c0007e6a:	83 c4 10             	add    $0x10,%esp
c0007e6d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/fs.c:589
		/* 先判断是否把pathname的各层目录都访问到了,即是否在某个中间目录就失败了 */
		if (pathname_depth != path_searched_depth) {   // 说明并没有访问到全部的路径,某个中间目录是不存在的
c0007e70:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0007e73:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c0007e76:	74 23                	je     c0007e9b <sys_mkdir+0xeb>
/work/x86_os_my/fs/fs.c:590
			printk("sys_mkdir: can`t access %s, subpath %s is`t exist\n", pathname, searched_record.searched_path);
c0007e78:	83 ec 04             	sub    $0x4,%esp
c0007e7b:	8d 85 c8 fd ff ff    	lea    -0x238(%ebp),%eax
c0007e81:	50                   	push   %eax
c0007e82:	ff 75 08             	pushl  0x8(%ebp)
c0007e85:	68 a8 e0 00 c0       	push   $0xc000e0a8
c0007e8a:	e8 1f ed ff ff       	call   c0006bae <printk>
c0007e8f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:591
			rollback_step = 1;
c0007e92:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:592
			goto rollback;
c0007e96:	e9 b7 02 00 00       	jmp    c0008152 <sys_mkdir+0x3a2>
/work/x86_os_my/fs/fs.c:596
		}
	}

	struct dir* parent_dir = searched_record.parent_dir;	//被创建目录所在的父目录
c0007e9b:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0007e9e:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/fs.c:598
	/* 目录名称后可能会有字符'/',所以最好直接用searched_record.searched_path,无'/' */
	char* dirname = strrchr(searched_record.searched_path, '/') + 1;	//获取 pathname 的最后一级目录名
c0007ea1:	83 ec 08             	sub    $0x8,%esp
c0007ea4:	6a 2f                	push   $0x2f
c0007ea6:	8d 85 c8 fd ff ff    	lea    -0x238(%ebp),%eax
c0007eac:	50                   	push   %eax
c0007ead:	e8 e7 bc ff ff       	call   c0003b99 <strrchr>
c0007eb2:	83 c4 10             	add    $0x10,%esp
c0007eb5:	83 c0 01             	add    $0x1,%eax
c0007eb8:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/fs.c:600

	inode_no = inode_bitmap_alloc(cur_part);
c0007ebb:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0007ec0:	83 ec 0c             	sub    $0xc,%esp
c0007ec3:	50                   	push   %eax
c0007ec4:	e8 92 15 00 00       	call   c000945b <inode_bitmap_alloc>
c0007ec9:	83 c4 10             	add    $0x10,%esp
c0007ecc:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:601
	if (inode_no == -1) {
c0007ecf:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c0007ed3:	75 19                	jne    c0007eee <sys_mkdir+0x13e>
/work/x86_os_my/fs/fs.c:602
		printk("sys_mkdir: allocate inode failed\n");
c0007ed5:	83 ec 0c             	sub    $0xc,%esp
c0007ed8:	68 dc e0 00 c0       	push   $0xc000e0dc
c0007edd:	e8 cc ec ff ff       	call   c0006bae <printk>
c0007ee2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:603
		rollback_step = 1;
c0007ee5:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:604
		goto rollback;
c0007ee9:	e9 64 02 00 00       	jmp    c0008152 <sys_mkdir+0x3a2>
/work/x86_os_my/fs/fs.c:608
	}

	struct inode new_dir_inode;
	inode_init(inode_no, &new_dir_inode);	    // 初始化i结点
c0007eee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0007ef1:	83 ec 08             	sub    $0x8,%esp
c0007ef4:	8d 95 7c fd ff ff    	lea    -0x284(%ebp),%edx
c0007efa:	52                   	push   %edx
c0007efb:	50                   	push   %eax
c0007efc:	e8 42 14 00 00       	call   c0009343 <inode_init>
c0007f01:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:610

	uint32_t block_bitmap_idx = 0;     // 用来记录block对应于block_bitmap中的索引
c0007f04:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
/work/x86_os_my/fs/fs.c:611
	int32_t block_lba = -1;
c0007f0b:	c7 45 d4 ff ff ff ff 	movl   $0xffffffff,-0x2c(%ebp)
/work/x86_os_my/fs/fs.c:613
	/* 为目录分配一个块,用来写入目录.和.. */
	block_lba = block_bitmap_alloc(cur_part);
c0007f12:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0007f17:	83 ec 0c             	sub    $0xc,%esp
c0007f1a:	50                   	push   %eax
c0007f1b:	e8 82 15 00 00       	call   c00094a2 <block_bitmap_alloc>
c0007f20:	83 c4 10             	add    $0x10,%esp
c0007f23:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/fs/fs.c:614
	if (block_lba == -1) {
c0007f26:	83 7d d4 ff          	cmpl   $0xffffffff,-0x2c(%ebp)
c0007f2a:	75 19                	jne    c0007f45 <sys_mkdir+0x195>
/work/x86_os_my/fs/fs.c:615
		printk("sys_mkdir: block_bitmap_alloc for create directory failed\n");
c0007f2c:	83 ec 0c             	sub    $0xc,%esp
c0007f2f:	68 00 e1 00 c0       	push   $0xc000e100
c0007f34:	e8 75 ec ff ff       	call   c0006bae <printk>
c0007f39:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:616
		rollback_step = 2;
c0007f3c:	c6 45 f7 02          	movb   $0x2,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:617
		goto rollback;
c0007f40:	e9 0d 02 00 00       	jmp    c0008152 <sys_mkdir+0x3a2>
/work/x86_os_my/fs/fs.c:619
	}
	new_dir_inode.i_sectors[0] = block_lba;
c0007f45:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0007f48:	89 85 8c fd ff ff    	mov    %eax,-0x274(%ebp)
/work/x86_os_my/fs/fs.c:621
	/* 每分配一个块就将位图同步到硬盘 */
	block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
c0007f4e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0007f51:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0007f56:	8b 40 1c             	mov    0x1c(%eax),%eax
c0007f59:	8b 40 28             	mov    0x28(%eax),%eax
c0007f5c:	29 c2                	sub    %eax,%edx
c0007f5e:	89 d0                	mov    %edx,%eax
c0007f60:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/fs.c:622
	ASSERT(block_bitmap_idx != 0);
c0007f63:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0007f67:	75 1c                	jne    c0007f85 <sys_mkdir+0x1d5>
/work/x86_os_my/fs/fs.c:622 (discriminator 1)
c0007f69:	68 3b e1 00 c0       	push   $0xc000e13b
c0007f6e:	68 dc e3 00 c0       	push   $0xc000e3dc
c0007f73:	68 6e 02 00 00       	push   $0x26e
c0007f78:	68 b1 db 00 c0       	push   $0xc000dbb1
c0007f7d:	e8 cf a4 ff ff       	call   c0002451 <panic_spin>
c0007f82:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:623
	bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c0007f85:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0007f8a:	83 ec 04             	sub    $0x4,%esp
c0007f8d:	6a 01                	push   $0x1
c0007f8f:	ff 75 d8             	pushl  -0x28(%ebp)
c0007f92:	50                   	push   %eax
c0007f93:	e8 5c 15 00 00       	call   c00094f4 <bitmap_sync>
c0007f98:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:626

	/* 将当前目录的目录项'.'和'..'写入目录 */
	memset(io_buf, 0, SECTOR_SIZE * 2);	 // 清空io_buf
c0007f9b:	83 ec 04             	sub    $0x4,%esp
c0007f9e:	68 00 04 00 00       	push   $0x400
c0007fa3:	6a 00                	push   $0x0
c0007fa5:	ff 75 ec             	pushl  -0x14(%ebp)
c0007fa8:	e8 46 b9 ff ff       	call   c00038f3 <memset>
c0007fad:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:627
	struct dir_entry* p_de = (struct dir_entry*)io_buf;
c0007fb0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0007fb3:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/fs/fs.c:630

	/* 初始化当前目录"." */
	memcpy(p_de->filename, ".", 1);
c0007fb6:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0007fb9:	83 ec 04             	sub    $0x4,%esp
c0007fbc:	6a 01                	push   $0x1
c0007fbe:	68 ef dc 00 c0       	push   $0xc000dcef
c0007fc3:	50                   	push   %eax
c0007fc4:	e8 7c b9 ff ff       	call   c0003945 <memcpy>
c0007fc9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:631
	p_de->i_no = inode_no ;
c0007fcc:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0007fcf:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0007fd2:	89 50 10             	mov    %edx,0x10(%eax)
/work/x86_os_my/fs/fs.c:632
	p_de->f_type = FT_DIRECTORY;
c0007fd5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0007fd8:	c7 40 14 02 00 00 00 	movl   $0x2,0x14(%eax)
/work/x86_os_my/fs/fs.c:634

	p_de++;
c0007fdf:	83 45 d0 18          	addl   $0x18,-0x30(%ebp)
/work/x86_os_my/fs/fs.c:636
	/* 初始化当前目录".." */
	memcpy(p_de->filename, "..", 2);
c0007fe3:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0007fe6:	83 ec 04             	sub    $0x4,%esp
c0007fe9:	6a 02                	push   $0x2
c0007feb:	68 f1 dc 00 c0       	push   $0xc000dcf1
c0007ff0:	50                   	push   %eax
c0007ff1:	e8 4f b9 ff ff       	call   c0003945 <memcpy>
c0007ff6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:637
	p_de->i_no = parent_dir->inode->i_no;
c0007ff9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0007ffc:	8b 00                	mov    (%eax),%eax
c0007ffe:	8b 10                	mov    (%eax),%edx
c0008000:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0008003:	89 50 10             	mov    %edx,0x10(%eax)
/work/x86_os_my/fs/fs.c:638
	p_de->f_type = FT_DIRECTORY;
c0008006:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0008009:	c7 40 14 02 00 00 00 	movl   $0x2,0x14(%eax)
/work/x86_os_my/fs/fs.c:639
	ide_write(cur_part->my_disk, new_dir_inode.i_sectors[0], io_buf, 1);
c0008010:	8b 95 8c fd ff ff    	mov    -0x274(%ebp),%edx
c0008016:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c000801b:	8b 40 08             	mov    0x8(%eax),%eax
c000801e:	6a 01                	push   $0x1
c0008020:	ff 75 ec             	pushl  -0x14(%ebp)
c0008023:	52                   	push   %edx
c0008024:	50                   	push   %eax
c0008025:	e8 7f e2 ff ff       	call   c00062a9 <ide_write>
c000802a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:641

	new_dir_inode.i_size = 2 * cur_part->sb->dir_entry_size;
c000802d:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0008032:	8b 40 1c             	mov    0x1c(%eax),%eax
c0008035:	8b 40 30             	mov    0x30(%eax),%eax
c0008038:	01 c0                	add    %eax,%eax
c000803a:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)
/work/x86_os_my/fs/fs.c:645

	/* 在父目录中添加自己的目录项 */
	struct dir_entry new_dir_entry;
	memset(&new_dir_entry, 0, sizeof(struct dir_entry));
c0008040:	83 ec 04             	sub    $0x4,%esp
c0008043:	6a 18                	push   $0x18
c0008045:	6a 00                	push   $0x0
c0008047:	8d 85 64 fd ff ff    	lea    -0x29c(%ebp),%eax
c000804d:	50                   	push   %eax
c000804e:	e8 a0 b8 ff ff       	call   c00038f3 <memset>
c0008053:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:646
	create_dir_entry(dirname, inode_no, FT_DIRECTORY, &new_dir_entry);
c0008056:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008059:	8d 95 64 fd ff ff    	lea    -0x29c(%ebp),%edx
c000805f:	52                   	push   %edx
c0008060:	6a 02                	push   $0x2
c0008062:	50                   	push   %eax
c0008063:	ff 75 dc             	pushl  -0x24(%ebp)
c0008066:	e8 e7 26 00 00       	call   c000a752 <create_dir_entry>
c000806b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:647
	memset(io_buf, 0, SECTOR_SIZE * 2);	 // 清空io_buf
c000806e:	83 ec 04             	sub    $0x4,%esp
c0008071:	68 00 04 00 00       	push   $0x400
c0008076:	6a 00                	push   $0x0
c0008078:	ff 75 ec             	pushl  -0x14(%ebp)
c000807b:	e8 73 b8 ff ff       	call   c00038f3 <memset>
c0008080:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:648
	if (!sync_dir_entry(parent_dir, &new_dir_entry, io_buf)) {	  // sync_dir_entry中将block_bitmap通过bitmap_sync同步到硬盘
c0008083:	83 ec 04             	sub    $0x4,%esp
c0008086:	ff 75 ec             	pushl  -0x14(%ebp)
c0008089:	8d 85 64 fd ff ff    	lea    -0x29c(%ebp),%eax
c000808f:	50                   	push   %eax
c0008090:	ff 75 e0             	pushl  -0x20(%ebp)
c0008093:	e8 2b 27 00 00       	call   c000a7c3 <sync_dir_entry>
c0008098:	83 c4 10             	add    $0x10,%esp
c000809b:	85 c0                	test   %eax,%eax
c000809d:	75 19                	jne    c00080b8 <sys_mkdir+0x308>
/work/x86_os_my/fs/fs.c:649
		printk("sys_mkdir: sync_dir_entry to disk failed!\n");
c000809f:	83 ec 0c             	sub    $0xc,%esp
c00080a2:	68 54 e1 00 c0       	push   $0xc000e154
c00080a7:	e8 02 eb ff ff       	call   c0006bae <printk>
c00080ac:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:650
		rollback_step = 2;
c00080af:	c6 45 f7 02          	movb   $0x2,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:651
		goto rollback;
c00080b3:	e9 9a 00 00 00       	jmp    c0008152 <sys_mkdir+0x3a2>
/work/x86_os_my/fs/fs.c:655
	}

	/* 父目录的inode同步到硬盘 */
	memset(io_buf, 0, SECTOR_SIZE * 2);
c00080b8:	83 ec 04             	sub    $0x4,%esp
c00080bb:	68 00 04 00 00       	push   $0x400
c00080c0:	6a 00                	push   $0x0
c00080c2:	ff 75 ec             	pushl  -0x14(%ebp)
c00080c5:	e8 29 b8 ff ff       	call   c00038f3 <memset>
c00080ca:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:656
	inode_sync(cur_part, parent_dir->inode, io_buf);
c00080cd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00080d0:	8b 10                	mov    (%eax),%edx
c00080d2:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c00080d7:	83 ec 04             	sub    $0x4,%esp
c00080da:	ff 75 ec             	pushl  -0x14(%ebp)
c00080dd:	52                   	push   %edx
c00080de:	50                   	push   %eax
c00080df:	e8 2b 0c 00 00       	call   c0008d0f <inode_sync>
c00080e4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:659

	/* 将新创建目录的inode同步到硬盘 */
	memset(io_buf, 0, SECTOR_SIZE * 2);
c00080e7:	83 ec 04             	sub    $0x4,%esp
c00080ea:	68 00 04 00 00       	push   $0x400
c00080ef:	6a 00                	push   $0x0
c00080f1:	ff 75 ec             	pushl  -0x14(%ebp)
c00080f4:	e8 fa b7 ff ff       	call   c00038f3 <memset>
c00080f9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:660
	inode_sync(cur_part, &new_dir_inode, io_buf);
c00080fc:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0008101:	83 ec 04             	sub    $0x4,%esp
c0008104:	ff 75 ec             	pushl  -0x14(%ebp)
c0008107:	8d 95 7c fd ff ff    	lea    -0x284(%ebp),%edx
c000810d:	52                   	push   %edx
c000810e:	50                   	push   %eax
c000810f:	e8 fb 0b 00 00       	call   c0008d0f <inode_sync>
c0008114:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:663

	/* 将inode位图同步到硬盘 */
	bitmap_sync(cur_part, inode_no, INODE_BITMAP);
c0008117:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000811a:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c000811f:	83 ec 04             	sub    $0x4,%esp
c0008122:	6a 00                	push   $0x0
c0008124:	52                   	push   %edx
c0008125:	50                   	push   %eax
c0008126:	e8 c9 13 00 00       	call   c00094f4 <bitmap_sync>
c000812b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:665

	sys_free(io_buf);
c000812e:	83 ec 0c             	sub    $0xc,%esp
c0008131:	ff 75 ec             	pushl  -0x14(%ebp)
c0008134:	e8 f0 b2 ff ff       	call   c0003429 <sys_free>
c0008139:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:668

	/* 关闭所创建目录的父目录 */
	dir_close(searched_record.parent_dir);
c000813c:	8b 45 c8             	mov    -0x38(%ebp),%eax
c000813f:	83 ec 0c             	sub    $0xc,%esp
c0008142:	50                   	push   %eax
c0008143:	e8 d7 25 00 00       	call   c000a71f <dir_close>
c0008148:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:669
	return 0;
c000814b:	b8 00 00 00 00       	mov    $0x0,%eax
c0008150:	eb 4c                	jmp    c000819e <sys_mkdir+0x3ee>
/work/x86_os_my/fs/fs.c:673

	/*创建文件或目录需要创建相关的多个资源,若某步失败则会执行到下面的回滚步骤 */
rollback:	     // 因为某步骤操作失败而回滚
	switch (rollback_step) {
c0008152:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0008156:	83 f8 01             	cmp    $0x1,%eax
c0008159:	74 20                	je     c000817b <sys_mkdir+0x3cb>
c000815b:	83 f8 02             	cmp    $0x2,%eax
c000815e:	75 2b                	jne    c000818b <sys_mkdir+0x3db>
/work/x86_os_my/fs/fs.c:675
		case 2:
		bitmap_set(&cur_part->inode_bitmap, inode_no, 0);	 // 如果新文件的inode创建失败,之前位图中分配的inode_no也要恢复
c0008160:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008163:	8b 15 10 30 01 c0    	mov    0xc0013010,%edx
c0008169:	83 c2 28             	add    $0x28,%edx
c000816c:	83 ec 04             	sub    $0x4,%esp
c000816f:	6a 00                	push   $0x0
c0008171:	50                   	push   %eax
c0008172:	52                   	push   %edx
c0008173:	e8 47 a5 ff ff       	call   c00026bf <bitmap_set>
c0008178:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:678
		case 1:
		/* 关闭所创建目录的父目录 */
		dir_close(searched_record.parent_dir);
c000817b:	8b 45 c8             	mov    -0x38(%ebp),%eax
c000817e:	83 ec 0c             	sub    $0xc,%esp
c0008181:	50                   	push   %eax
c0008182:	e8 98 25 00 00       	call   c000a71f <dir_close>
c0008187:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:679
		break;
c000818a:	90                   	nop
/work/x86_os_my/fs/fs.c:681
	}
	sys_free(io_buf);
c000818b:	83 ec 0c             	sub    $0xc,%esp
c000818e:	ff 75 ec             	pushl  -0x14(%ebp)
c0008191:	e8 93 b2 ff ff       	call   c0003429 <sys_free>
c0008196:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:682
	return -1;
c0008199:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
/work/x86_os_my/fs/fs.c:683 (discriminator 1)
}
c000819e:	c9                   	leave  
c000819f:	c3                   	ret    

c00081a0 <sys_opendir>:
sys_opendir():
/work/x86_os_my/fs/fs.c:686

/* 目录打开成功后返回目录指针,失败返回NULL */
struct dir* sys_opendir(const char* name) {
c00081a0:	55                   	push   %ebp
c00081a1:	89 e5                	mov    %esp,%ebp
c00081a3:	81 ec 18 02 00 00    	sub    $0x218,%esp
/work/x86_os_my/fs/fs.c:687
	ASSERT(strlen(name) < MAX_PATH_LEN);
c00081a9:	83 ec 0c             	sub    $0xc,%esp
c00081ac:	ff 75 08             	pushl  0x8(%ebp)
c00081af:	e8 c9 b8 ff ff       	call   c0003a7d <strlen>
c00081b4:	83 c4 10             	add    $0x10,%esp
c00081b7:	3d ff 01 00 00       	cmp    $0x1ff,%eax
c00081bc:	76 1c                	jbe    c00081da <sys_opendir+0x3a>
/work/x86_os_my/fs/fs.c:687 (discriminator 1)
c00081be:	68 7f e1 00 c0       	push   $0xc000e17f
c00081c3:	68 e8 e3 00 c0       	push   $0xc000e3e8
c00081c8:	68 af 02 00 00       	push   $0x2af
c00081cd:	68 b1 db 00 c0       	push   $0xc000dbb1
c00081d2:	e8 7a a2 ff ff       	call   c0002451 <panic_spin>
c00081d7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:689
	/* 如果是根目录'/',直接返回&root_dir */
	if (name[0] == '/' && (name[1] == 0 || name[0] == '.')) {
c00081da:	8b 45 08             	mov    0x8(%ebp),%eax
c00081dd:	0f b6 00             	movzbl (%eax),%eax
c00081e0:	3c 2f                	cmp    $0x2f,%al
c00081e2:	75 21                	jne    c0008205 <sys_opendir+0x65>
/work/x86_os_my/fs/fs.c:689 (discriminator 1)
c00081e4:	8b 45 08             	mov    0x8(%ebp),%eax
c00081e7:	83 c0 01             	add    $0x1,%eax
c00081ea:	0f b6 00             	movzbl (%eax),%eax
c00081ed:	84 c0                	test   %al,%al
c00081ef:	74 0a                	je     c00081fb <sys_opendir+0x5b>
/work/x86_os_my/fs/fs.c:689 (discriminator 2)
c00081f1:	8b 45 08             	mov    0x8(%ebp),%eax
c00081f4:	0f b6 00             	movzbl (%eax),%eax
c00081f7:	3c 2e                	cmp    $0x2e,%al
c00081f9:	75 0a                	jne    c0008205 <sys_opendir+0x65>
/work/x86_os_my/fs/fs.c:690
		return &root_dir;
c00081fb:	b8 a0 31 01 c0       	mov    $0xc00131a0,%eax
c0008200:	e9 a9 00 00 00       	jmp    c00082ae <sys_opendir+0x10e>
/work/x86_os_my/fs/fs.c:695
	}

	/* 先检查待打开的目录是否存在 */
	struct path_search_record searched_record;
	memset(&searched_record, 0, sizeof(struct path_search_record));
c0008205:	83 ec 04             	sub    $0x4,%esp
c0008208:	68 08 02 00 00       	push   $0x208
c000820d:	6a 00                	push   $0x0
c000820f:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
c0008215:	50                   	push   %eax
c0008216:	e8 d8 b6 ff ff       	call   c00038f3 <memset>
c000821b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:696
	int inode_no = search_file(name, &searched_record);
c000821e:	83 ec 08             	sub    $0x8,%esp
c0008221:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
c0008227:	50                   	push   %eax
c0008228:	ff 75 08             	pushl  0x8(%ebp)
c000822b:	e8 1a f1 ff ff       	call   c000734a <search_file>
c0008230:	83 c4 10             	add    $0x10,%esp
c0008233:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:697
	struct dir* ret = NULL;
c0008236:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:698
	if (inode_no == -1) {	 // 如果找不到目录,提示不存在的路径
c000823d:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c0008241:	75 1c                	jne    c000825f <sys_opendir+0xbf>
/work/x86_os_my/fs/fs.c:699
		printk("In %s, sub path %s not exist\n", name, searched_record.searched_path);
c0008243:	83 ec 04             	sub    $0x4,%esp
c0008246:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
c000824c:	50                   	push   %eax
c000824d:	ff 75 08             	pushl  0x8(%ebp)
c0008250:	68 9b e1 00 c0       	push   $0xc000e19b
c0008255:	e8 54 e9 ff ff       	call   c0006bae <printk>
c000825a:	83 c4 10             	add    $0x10,%esp
c000825d:	eb 3d                	jmp    c000829c <sys_opendir+0xfc>
/work/x86_os_my/fs/fs.c:701
	} else {
		if (searched_record.file_type == FT_REGULAR) {
c000825f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008262:	83 f8 01             	cmp    $0x1,%eax
c0008265:	75 15                	jne    c000827c <sys_opendir+0xdc>
/work/x86_os_my/fs/fs.c:702
			printk("%s is regular file!\n", name);
c0008267:	83 ec 08             	sub    $0x8,%esp
c000826a:	ff 75 08             	pushl  0x8(%ebp)
c000826d:	68 b9 e1 00 c0       	push   $0xc000e1b9
c0008272:	e8 37 e9 ff ff       	call   c0006bae <printk>
c0008277:	83 c4 10             	add    $0x10,%esp
c000827a:	eb 20                	jmp    c000829c <sys_opendir+0xfc>
/work/x86_os_my/fs/fs.c:703
		} else if (searched_record.file_type == FT_DIRECTORY) {
c000827c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000827f:	83 f8 02             	cmp    $0x2,%eax
c0008282:	75 18                	jne    c000829c <sys_opendir+0xfc>
/work/x86_os_my/fs/fs.c:704
			ret = dir_open(cur_part, inode_no);
c0008284:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0008287:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c000828c:	83 ec 08             	sub    $0x8,%esp
c000828f:	52                   	push   %edx
c0008290:	50                   	push   %eax
c0008291:	e8 71 22 00 00       	call   c000a507 <dir_open>
c0008296:	83 c4 10             	add    $0x10,%esp
c0008299:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:707
		}
	}
	dir_close(searched_record.parent_dir);
c000829c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000829f:	83 ec 0c             	sub    $0xc,%esp
c00082a2:	50                   	push   %eax
c00082a3:	e8 77 24 00 00       	call   c000a71f <dir_close>
c00082a8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:708
	return ret;
c00082ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:709 (discriminator 1)
}
c00082ae:	c9                   	leave  
c00082af:	c3                   	ret    

c00082b0 <sys_closedir>:
sys_closedir():
/work/x86_os_my/fs/fs.c:712

/* 成功关闭目录dir返回0,失败返回-1 */
int32_t sys_closedir(struct dir* dir) {
c00082b0:	55                   	push   %ebp
c00082b1:	89 e5                	mov    %esp,%ebp
c00082b3:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/fs.c:713
	int32_t ret = -1;
c00082b6:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:714
	if (dir != NULL) {
c00082bd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00082c1:	74 15                	je     c00082d8 <sys_closedir+0x28>
/work/x86_os_my/fs/fs.c:715
		dir_close(dir);
c00082c3:	83 ec 0c             	sub    $0xc,%esp
c00082c6:	ff 75 08             	pushl  0x8(%ebp)
c00082c9:	e8 51 24 00 00       	call   c000a71f <dir_close>
c00082ce:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:716
		ret = 0;
c00082d1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:718
	}
	return ret;
c00082d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:719
}
c00082db:	c9                   	leave  
c00082dc:	c3                   	ret    

c00082dd <sys_readdir>:
sys_readdir():
/work/x86_os_my/fs/fs.c:722

/* 读取目录dir的1个目录项,成功后返回其目录项地址,到目录尾时或出错时返回NULL */
struct dir_entry* sys_readdir(struct dir* dir) {
c00082dd:	55                   	push   %ebp
c00082de:	89 e5                	mov    %esp,%ebp
c00082e0:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/fs/fs.c:723
	ASSERT(dir != NULL);
c00082e3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00082e7:	75 1c                	jne    c0008305 <sys_readdir+0x28>
/work/x86_os_my/fs/fs.c:723 (discriminator 1)
c00082e9:	68 ce e1 00 c0       	push   $0xc000e1ce
c00082ee:	68 f4 e3 00 c0       	push   $0xc000e3f4
c00082f3:	68 d3 02 00 00       	push   $0x2d3
c00082f8:	68 b1 db 00 c0       	push   $0xc000dbb1
c00082fd:	e8 4f a1 ff ff       	call   c0002451 <panic_spin>
c0008302:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:724
	return dir_read(dir);
c0008305:	83 ec 0c             	sub    $0xc,%esp
c0008308:	ff 75 08             	pushl  0x8(%ebp)
c000830b:	e8 36 2d 00 00       	call   c000b046 <dir_read>
c0008310:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:725
}
c0008313:	c9                   	leave  
c0008314:	c3                   	ret    

c0008315 <sys_rewinddir>:
sys_rewinddir():
/work/x86_os_my/fs/fs.c:728

/* 把目录dir的指针dir_pos置0 */
void sys_rewinddir(struct dir* dir) {
c0008315:	55                   	push   %ebp
c0008316:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/fs/fs.c:729
	dir->dir_pos = 0;
c0008318:	8b 45 08             	mov    0x8(%ebp),%eax
c000831b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
/work/x86_os_my/fs/fs.c:730
}
c0008322:	90                   	nop
c0008323:	5d                   	pop    %ebp
c0008324:	c3                   	ret    

c0008325 <sys_rmdir>:
sys_rmdir():
/work/x86_os_my/fs/fs.c:733

/* 删除空目录,成功时返回0,失败时返回-1*/
int32_t sys_rmdir(const char* pathname) {
c0008325:	55                   	push   %ebp
c0008326:	89 e5                	mov    %esp,%ebp
c0008328:	81 ec 28 02 00 00    	sub    $0x228,%esp
/work/x86_os_my/fs/fs.c:736
	/* 先检查待删除的文件是否存在 */
	struct path_search_record searched_record;
	memset(&searched_record, 0, sizeof(struct path_search_record));
c000832e:	83 ec 04             	sub    $0x4,%esp
c0008331:	68 08 02 00 00       	push   $0x208
c0008336:	6a 00                	push   $0x0
c0008338:	8d 85 e4 fd ff ff    	lea    -0x21c(%ebp),%eax
c000833e:	50                   	push   %eax
c000833f:	e8 af b5 ff ff       	call   c00038f3 <memset>
c0008344:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:737
	int32_t inode_no = search_file(pathname, &searched_record);
c0008347:	83 ec 08             	sub    $0x8,%esp
c000834a:	8d 85 e4 fd ff ff    	lea    -0x21c(%ebp),%eax
c0008350:	50                   	push   %eax
c0008351:	ff 75 08             	pushl  0x8(%ebp)
c0008354:	e8 f1 ef ff ff       	call   c000734a <search_file>
c0008359:	83 c4 10             	add    $0x10,%esp
c000835c:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:738
	ASSERT(inode_no != 0);
c000835f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0008363:	75 1c                	jne    c0008381 <sys_rmdir+0x5c>
/work/x86_os_my/fs/fs.c:738 (discriminator 1)
c0008365:	68 84 df 00 c0       	push   $0xc000df84
c000836a:	68 00 e4 00 c0       	push   $0xc000e400
c000836f:	68 e2 02 00 00       	push   $0x2e2
c0008374:	68 b1 db 00 c0       	push   $0xc000dbb1
c0008379:	e8 d3 a0 ff ff       	call   c0002451 <panic_spin>
c000837e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:739
	int32_t retval = -1;	// 默认返回值
c0008381:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:740
	if (inode_no == -1) {
c0008388:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c000838c:	75 1f                	jne    c00083ad <sys_rmdir+0x88>
/work/x86_os_my/fs/fs.c:741
		printk("In %s, sub path %s not exist\n", pathname, searched_record.searched_path);
c000838e:	83 ec 04             	sub    $0x4,%esp
c0008391:	8d 85 e4 fd ff ff    	lea    -0x21c(%ebp),%eax
c0008397:	50                   	push   %eax
c0008398:	ff 75 08             	pushl  0x8(%ebp)
c000839b:	68 9b e1 00 c0       	push   $0xc000e19b
c00083a0:	e8 09 e8 ff ff       	call   c0006bae <printk>
c00083a5:	83 c4 10             	add    $0x10,%esp
c00083a8:	e9 87 00 00 00       	jmp    c0008434 <sys_rmdir+0x10f>
/work/x86_os_my/fs/fs.c:743
	} else {
		if (searched_record.file_type == FT_REGULAR) {
c00083ad:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00083b0:	83 f8 01             	cmp    $0x1,%eax
c00083b3:	75 15                	jne    c00083ca <sys_rmdir+0xa5>
/work/x86_os_my/fs/fs.c:744
			printk("%s is regular file!\n", pathname);
c00083b5:	83 ec 08             	sub    $0x8,%esp
c00083b8:	ff 75 08             	pushl  0x8(%ebp)
c00083bb:	68 b9 e1 00 c0       	push   $0xc000e1b9
c00083c0:	e8 e9 e7 ff ff       	call   c0006bae <printk>
c00083c5:	83 c4 10             	add    $0x10,%esp
c00083c8:	eb 6a                	jmp    c0008434 <sys_rmdir+0x10f>
/work/x86_os_my/fs/fs.c:746
		} else {
			struct dir* dir = dir_open(cur_part, inode_no);
c00083ca:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00083cd:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c00083d2:	83 ec 08             	sub    $0x8,%esp
c00083d5:	52                   	push   %edx
c00083d6:	50                   	push   %eax
c00083d7:	e8 2b 21 00 00       	call   c000a507 <dir_open>
c00083dc:	83 c4 10             	add    $0x10,%esp
c00083df:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:747
			if (!dir_is_empty(dir)) {	 // 非空目录不可删除
c00083e2:	83 ec 0c             	sub    $0xc,%esp
c00083e5:	ff 75 ec             	pushl  -0x14(%ebp)
c00083e8:	e8 41 2e 00 00       	call   c000b22e <dir_is_empty>
c00083ed:	83 c4 10             	add    $0x10,%esp
c00083f0:	85 c0                	test   %eax,%eax
c00083f2:	75 15                	jne    c0008409 <sys_rmdir+0xe4>
/work/x86_os_my/fs/fs.c:748
				printk("dir %s is not empty, it is not allowed to delete a nonempty directory!\n", pathname);
c00083f4:	83 ec 08             	sub    $0x8,%esp
c00083f7:	ff 75 08             	pushl  0x8(%ebp)
c00083fa:	68 dc e1 00 c0       	push   $0xc000e1dc
c00083ff:	e8 aa e7 ff ff       	call   c0006bae <printk>
c0008404:	83 c4 10             	add    $0x10,%esp
c0008407:	eb 1d                	jmp    c0008426 <sys_rmdir+0x101>
/work/x86_os_my/fs/fs.c:750
			} else {
				if (!dir_remove(searched_record.parent_dir, dir)) {
c0008409:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000840c:	83 ec 08             	sub    $0x8,%esp
c000840f:	ff 75 ec             	pushl  -0x14(%ebp)
c0008412:	50                   	push   %eax
c0008413:	e8 41 2e 00 00       	call   c000b259 <dir_remove>
c0008418:	83 c4 10             	add    $0x10,%esp
c000841b:	85 c0                	test   %eax,%eax
c000841d:	75 07                	jne    c0008426 <sys_rmdir+0x101>
/work/x86_os_my/fs/fs.c:751
					retval = 0;
c000841f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:754
				}
			}
			dir_close(dir);
c0008426:	83 ec 0c             	sub    $0xc,%esp
c0008429:	ff 75 ec             	pushl  -0x14(%ebp)
c000842c:	e8 ee 22 00 00       	call   c000a71f <dir_close>
c0008431:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:757
		}
	}
	dir_close(searched_record.parent_dir);
c0008434:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0008437:	83 ec 0c             	sub    $0xc,%esp
c000843a:	50                   	push   %eax
c000843b:	e8 df 22 00 00       	call   c000a71f <dir_close>
c0008440:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:758
	return retval;
c0008443:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:759
}
c0008446:	c9                   	leave  
c0008447:	c3                   	ret    

c0008448 <get_parent_dir_inode_nr>:
get_parent_dir_inode_nr():
/work/x86_os_my/fs/fs.c:762

/* 获得父目录的inode编号 */
static uint32_t get_parent_dir_inode_nr(uint32_t child_inode_nr, void* io_buf) {
c0008448:	55                   	push   %ebp
c0008449:	89 e5                	mov    %esp,%ebp
c000844b:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/fs.c:763
   struct inode* child_dir_inode = inode_open(cur_part, child_inode_nr);
c000844e:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0008453:	83 ec 08             	sub    $0x8,%esp
c0008456:	ff 75 08             	pushl  0x8(%ebp)
c0008459:	50                   	push   %eax
c000845a:	e8 d7 09 00 00       	call   c0008e36 <inode_open>
c000845f:	83 c4 10             	add    $0x10,%esp
c0008462:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:765
   /* 目录中的目录项".."中包括父目录inode编号,".."位于目录的第0块 */
   uint32_t block_lba = child_dir_inode->i_sectors[0];
c0008465:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0008468:	8b 40 10             	mov    0x10(%eax),%eax
c000846b:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:766
   ASSERT(block_lba >= cur_part->sb->data_start_lba);
c000846e:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0008473:	8b 40 1c             	mov    0x1c(%eax),%eax
c0008476:	8b 40 28             	mov    0x28(%eax),%eax
c0008479:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c000847c:	76 1c                	jbe    c000849a <get_parent_dir_inode_nr+0x52>
/work/x86_os_my/fs/fs.c:766 (discriminator 1)
c000847e:	68 24 e2 00 c0       	push   $0xc000e224
c0008483:	68 0c e4 00 c0       	push   $0xc000e40c
c0008488:	68 fe 02 00 00       	push   $0x2fe
c000848d:	68 b1 db 00 c0       	push   $0xc000dbb1
c0008492:	e8 ba 9f ff ff       	call   c0002451 <panic_spin>
c0008497:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:767
   inode_close(child_dir_inode);
c000849a:	83 ec 0c             	sub    $0xc,%esp
c000849d:	ff 75 f4             	pushl  -0xc(%ebp)
c00084a0:	e8 d7 0a 00 00       	call   c0008f7c <inode_close>
c00084a5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:768
   ide_read(cur_part->my_disk, block_lba, io_buf, 1);
c00084a8:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c00084ad:	8b 40 08             	mov    0x8(%eax),%eax
c00084b0:	6a 01                	push   $0x1
c00084b2:	ff 75 0c             	pushl  0xc(%ebp)
c00084b5:	ff 75 f0             	pushl  -0x10(%ebp)
c00084b8:	50                   	push   %eax
c00084b9:	e8 77 dc ff ff       	call   c0006135 <ide_read>
c00084be:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:769
   struct dir_entry* dir_e = (struct dir_entry*)io_buf;
c00084c1:	8b 45 0c             	mov    0xc(%ebp),%eax
c00084c4:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:771
   /* 第0个目录项是".",第1个目录项是".." */
   ASSERT(dir_e[1].i_no < 4096 && dir_e[1].f_type == FT_DIRECTORY);
c00084c7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00084ca:	83 c0 18             	add    $0x18,%eax
c00084cd:	8b 40 10             	mov    0x10(%eax),%eax
c00084d0:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c00084d5:	77 0e                	ja     c00084e5 <get_parent_dir_inode_nr+0x9d>
/work/x86_os_my/fs/fs.c:771 (discriminator 1)
c00084d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00084da:	83 c0 18             	add    $0x18,%eax
c00084dd:	8b 40 14             	mov    0x14(%eax),%eax
c00084e0:	83 f8 02             	cmp    $0x2,%eax
c00084e3:	74 1c                	je     c0008501 <get_parent_dir_inode_nr+0xb9>
/work/x86_os_my/fs/fs.c:771 (discriminator 3)
c00084e5:	68 50 e2 00 c0       	push   $0xc000e250
c00084ea:	68 0c e4 00 c0       	push   $0xc000e40c
c00084ef:	68 03 03 00 00       	push   $0x303
c00084f4:	68 b1 db 00 c0       	push   $0xc000dbb1
c00084f9:	e8 53 9f ff ff       	call   c0002451 <panic_spin>
c00084fe:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:772
   return dir_e[1].i_no;	// 返回..即父目录的inode编号
c0008501:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008504:	83 c0 18             	add    $0x18,%eax
c0008507:	8b 40 10             	mov    0x10(%eax),%eax
/work/x86_os_my/fs/fs.c:773
}
c000850a:	c9                   	leave  
c000850b:	c3                   	ret    

c000850c <get_child_dir_name>:
get_child_dir_name():
/work/x86_os_my/fs/fs.c:777

/* 在inode编号为p_inode_nr的目录中查找inode编号为c_inode_nr的子目录的名字,
 * 将名字存入缓冲区path.成功返回0,失败返-1 */
static int get_child_dir_name(uint32_t p_inode_nr, uint32_t c_inode_nr, char* path, void* io_buf) {
c000850c:	55                   	push   %ebp
c000850d:	89 e5                	mov    %esp,%ebp
c000850f:	57                   	push   %edi
c0008510:	81 ec 54 02 00 00    	sub    $0x254,%esp
/work/x86_os_my/fs/fs.c:778
	struct inode* parent_dir_inode = inode_open(cur_part, p_inode_nr);
c0008516:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c000851b:	83 ec 08             	sub    $0x8,%esp
c000851e:	ff 75 08             	pushl  0x8(%ebp)
c0008521:	50                   	push   %eax
c0008522:	e8 0f 09 00 00       	call   c0008e36 <inode_open>
c0008527:	83 c4 10             	add    $0x10,%esp
c000852a:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:780
	/* 填充all_blocks,将该目录的所占扇区地址全部写入all_blocks */
	uint8_t block_idx = 0;
c000852d:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:781
	uint32_t all_blocks[140] = {0}, block_cnt = 12;
c0008531:	8d 95 ac fd ff ff    	lea    -0x254(%ebp),%edx
c0008537:	b8 00 00 00 00       	mov    $0x0,%eax
c000853c:	b9 8c 00 00 00       	mov    $0x8c,%ecx
c0008541:	89 d7                	mov    %edx,%edi
c0008543:	f3 ab                	rep stos %eax,%es:(%edi)
c0008545:	c7 45 f0 0c 00 00 00 	movl   $0xc,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:782
	while (block_idx < 12) {
c000854c:	eb 22                	jmp    c0008570 <get_child_dir_name+0x64>
/work/x86_os_my/fs/fs.c:783
		all_blocks[block_idx] = parent_dir_inode->i_sectors[block_idx];
c000854e:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0008552:	0f b6 4d f7          	movzbl -0x9(%ebp),%ecx
c0008556:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0008559:	83 c1 04             	add    $0x4,%ecx
c000855c:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
c000855f:	89 94 85 ac fd ff ff 	mov    %edx,-0x254(%ebp,%eax,4)
/work/x86_os_my/fs/fs.c:784
		block_idx++;
c0008566:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000856a:	83 c0 01             	add    $0x1,%eax
c000856d:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:782
static int get_child_dir_name(uint32_t p_inode_nr, uint32_t c_inode_nr, char* path, void* io_buf) {
	struct inode* parent_dir_inode = inode_open(cur_part, p_inode_nr);
	/* 填充all_blocks,将该目录的所占扇区地址全部写入all_blocks */
	uint8_t block_idx = 0;
	uint32_t all_blocks[140] = {0}, block_cnt = 12;
	while (block_idx < 12) {
c0008570:	80 7d f7 0b          	cmpb   $0xb,-0x9(%ebp)
c0008574:	76 d8                	jbe    c000854e <get_child_dir_name+0x42>
/work/x86_os_my/fs/fs.c:786
		all_blocks[block_idx] = parent_dir_inode->i_sectors[block_idx];
		block_idx++;
	}
	if (parent_dir_inode->i_sectors[12]) {	// 若包含了一级间接块表,将共读入all_blocks.
c0008576:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0008579:	8b 40 40             	mov    0x40(%eax),%eax
c000857c:	85 c0                	test   %eax,%eax
c000857e:	74 2c                	je     c00085ac <get_child_dir_name+0xa0>
/work/x86_os_my/fs/fs.c:787
		ide_read(cur_part->my_disk, parent_dir_inode->i_sectors[12], all_blocks + 12, 1);
c0008580:	8d 85 ac fd ff ff    	lea    -0x254(%ebp),%eax
c0008586:	83 c0 30             	add    $0x30,%eax
c0008589:	8b 55 e8             	mov    -0x18(%ebp),%edx
c000858c:	8b 4a 40             	mov    0x40(%edx),%ecx
c000858f:	8b 15 10 30 01 c0    	mov    0xc0013010,%edx
c0008595:	8b 52 08             	mov    0x8(%edx),%edx
c0008598:	6a 01                	push   $0x1
c000859a:	50                   	push   %eax
c000859b:	51                   	push   %ecx
c000859c:	52                   	push   %edx
c000859d:	e8 93 db ff ff       	call   c0006135 <ide_read>
c00085a2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:788
		block_cnt = 140;
c00085a5:	c7 45 f0 8c 00 00 00 	movl   $0x8c,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:790
	}
	inode_close(parent_dir_inode);
c00085ac:	83 ec 0c             	sub    $0xc,%esp
c00085af:	ff 75 e8             	pushl  -0x18(%ebp)
c00085b2:	e8 c5 09 00 00       	call   c0008f7c <inode_close>
c00085b7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:792

	struct dir_entry* dir_e = (struct dir_entry*)io_buf;
c00085ba:	8b 45 14             	mov    0x14(%ebp),%eax
c00085bd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/fs.c:793
	uint32_t dir_entry_size = cur_part->sb->dir_entry_size;
c00085c0:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c00085c5:	8b 40 1c             	mov    0x1c(%eax),%eax
c00085c8:	8b 40 30             	mov    0x30(%eax),%eax
c00085cb:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/fs.c:794
	uint32_t dir_entrys_per_sec = (512 / dir_entry_size);
c00085ce:	b8 00 02 00 00       	mov    $0x200,%eax
c00085d3:	ba 00 00 00 00       	mov    $0x0,%edx
c00085d8:	f7 75 e0             	divl   -0x20(%ebp)
c00085db:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/fs.c:795
	block_idx = 0;
c00085de:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:797
	/* 遍历所有块 */
	while(block_idx < block_cnt) {
c00085e2:	e9 b1 00 00 00       	jmp    c0008698 <get_child_dir_name+0x18c>
/work/x86_os_my/fs/fs.c:798
		if(all_blocks[block_idx]) {      // 如果相应块不为空则读入相应块
c00085e7:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00085eb:	8b 84 85 ac fd ff ff 	mov    -0x254(%ebp,%eax,4),%eax
c00085f2:	85 c0                	test   %eax,%eax
c00085f4:	0f 84 94 00 00 00    	je     c000868e <get_child_dir_name+0x182>
/work/x86_os_my/fs/fs.c:799
			ide_read(cur_part->my_disk, all_blocks[block_idx], io_buf, 1);
c00085fa:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00085fe:	8b 94 85 ac fd ff ff 	mov    -0x254(%ebp,%eax,4),%edx
c0008605:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c000860a:	8b 40 08             	mov    0x8(%eax),%eax
c000860d:	6a 01                	push   $0x1
c000860f:	ff 75 14             	pushl  0x14(%ebp)
c0008612:	52                   	push   %edx
c0008613:	50                   	push   %eax
c0008614:	e8 1c db ff ff       	call   c0006135 <ide_read>
c0008619:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:800
			uint8_t dir_e_idx = 0;
c000861c:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
/work/x86_os_my/fs/fs.c:802
			/* 遍历每个目录项 */
			while(dir_e_idx < dir_entrys_per_sec) {
c0008620:	eb 63                	jmp    c0008685 <get_child_dir_name+0x179>
/work/x86_os_my/fs/fs.c:803
				if ((dir_e + dir_e_idx)->i_no == c_inode_nr) {
c0008622:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c0008626:	89 d0                	mov    %edx,%eax
c0008628:	01 c0                	add    %eax,%eax
c000862a:	01 d0                	add    %edx,%eax
c000862c:	c1 e0 03             	shl    $0x3,%eax
c000862f:	89 c2                	mov    %eax,%edx
c0008631:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0008634:	01 d0                	add    %edx,%eax
c0008636:	8b 40 10             	mov    0x10(%eax),%eax
c0008639:	3b 45 0c             	cmp    0xc(%ebp),%eax
c000863c:	75 3d                	jne    c000867b <get_child_dir_name+0x16f>
/work/x86_os_my/fs/fs.c:804
					strcat(path, "/");
c000863e:	83 ec 08             	sub    $0x8,%esp
c0008641:	68 2b dd 00 c0       	push   $0xc000dd2b
c0008646:	ff 75 10             	pushl  0x10(%ebp)
c0008649:	e8 a9 b5 ff ff       	call   c0003bf7 <strcat>
c000864e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:805
					strcat(path, (dir_e + dir_e_idx)->filename);
c0008651:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c0008655:	89 d0                	mov    %edx,%eax
c0008657:	01 c0                	add    %eax,%eax
c0008659:	01 d0                	add    %edx,%eax
c000865b:	c1 e0 03             	shl    $0x3,%eax
c000865e:	89 c2                	mov    %eax,%edx
c0008660:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0008663:	01 d0                	add    %edx,%eax
c0008665:	83 ec 08             	sub    $0x8,%esp
c0008668:	50                   	push   %eax
c0008669:	ff 75 10             	pushl  0x10(%ebp)
c000866c:	e8 86 b5 ff ff       	call   c0003bf7 <strcat>
c0008671:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:806
					return 0;
c0008674:	b8 00 00 00 00       	mov    $0x0,%eax
c0008679:	eb 2f                	jmp    c00086aa <get_child_dir_name+0x19e>
/work/x86_os_my/fs/fs.c:808
				}
				dir_e_idx++;
c000867b:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c000867f:	83 c0 01             	add    $0x1,%eax
c0008682:	88 45 ef             	mov    %al,-0x11(%ebp)
/work/x86_os_my/fs/fs.c:802
	while(block_idx < block_cnt) {
		if(all_blocks[block_idx]) {      // 如果相应块不为空则读入相应块
			ide_read(cur_part->my_disk, all_blocks[block_idx], io_buf, 1);
			uint8_t dir_e_idx = 0;
			/* 遍历每个目录项 */
			while(dir_e_idx < dir_entrys_per_sec) {
c0008685:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c0008689:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c000868c:	72 94                	jb     c0008622 <get_child_dir_name+0x116>
/work/x86_os_my/fs/fs.c:811
					return 0;
				}
				dir_e_idx++;
			}
		}
		block_idx++;
c000868e:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0008692:	83 c0 01             	add    $0x1,%eax
c0008695:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:797
	struct dir_entry* dir_e = (struct dir_entry*)io_buf;
	uint32_t dir_entry_size = cur_part->sb->dir_entry_size;
	uint32_t dir_entrys_per_sec = (512 / dir_entry_size);
	block_idx = 0;
	/* 遍历所有块 */
	while(block_idx < block_cnt) {
c0008698:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000869c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c000869f:	0f 82 42 ff ff ff    	jb     c00085e7 <get_child_dir_name+0xdb>
/work/x86_os_my/fs/fs.c:813
				dir_e_idx++;
			}
		}
		block_idx++;
	}
	return -1;
c00086a5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
/work/x86_os_my/fs/fs.c:814 (discriminator 1)
}
c00086aa:	8b 7d fc             	mov    -0x4(%ebp),%edi
c00086ad:	c9                   	leave  
c00086ae:	c3                   	ret    

c00086af <sys_getcwd>:
sys_getcwd():
/work/x86_os_my/fs/fs.c:819

/* 把当前工作目录绝对路径写入buf, size是buf的大小.
 当buf为NULL时,由操作系统分配存储工作路径的空间并返回地址
 失败则返回NULL */
char* sys_getcwd(char* buf, uint32_t size) {
c00086af:	55                   	push   %ebp
c00086b0:	89 e5                	mov    %esp,%ebp
c00086b2:	57                   	push   %edi
c00086b3:	53                   	push   %ebx
c00086b4:	81 ec 20 02 00 00    	sub    $0x220,%esp
/work/x86_os_my/fs/fs.c:822
	/* 确保buf不为空,若用户进程提供的buf为NULL,
	系统调用getcwd中要为用户进程通过malloc分配内存 */
	ASSERT(buf != NULL);
c00086ba:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00086be:	75 1c                	jne    c00086dc <sys_getcwd+0x2d>
/work/x86_os_my/fs/fs.c:822 (discriminator 1)
c00086c0:	68 16 df 00 c0       	push   $0xc000df16
c00086c5:	68 24 e4 00 c0       	push   $0xc000e424
c00086ca:	68 36 03 00 00       	push   $0x336
c00086cf:	68 b1 db 00 c0       	push   $0xc000dbb1
c00086d4:	e8 78 9d ff ff       	call   c0002451 <panic_spin>
c00086d9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:823
	void* io_buf = sys_malloc(SECTOR_SIZE);
c00086dc:	83 ec 0c             	sub    $0xc,%esp
c00086df:	68 00 02 00 00       	push   $0x200
c00086e4:	e8 13 a7 ff ff       	call   c0002dfc <sys_malloc>
c00086e9:	83 c4 10             	add    $0x10,%esp
c00086ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:824
	if (io_buf == NULL) {
c00086ef:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c00086f3:	75 0a                	jne    c00086ff <sys_getcwd+0x50>
/work/x86_os_my/fs/fs.c:825
		return NULL;
c00086f5:	b8 00 00 00 00       	mov    $0x0,%eax
c00086fa:	e9 9d 01 00 00       	jmp    c000889c <sys_getcwd+0x1ed>
/work/x86_os_my/fs/fs.c:828
	}

	struct task_struct* cur_thread = running_thread();
c00086ff:	e8 d6 b5 ff ff       	call   c0003cda <running_thread>
c0008704:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:829
	int32_t parent_inode_nr = 0;
c0008707:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:830
	int32_t child_inode_nr = cur_thread->cwd_inode_nr;
c000870e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008711:	8b 80 0c 01 00 00    	mov    0x10c(%eax),%eax
c0008717:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:831
	ASSERT(child_inode_nr >= 0 && child_inode_nr < 4096);	// inode位图，最大支持4096个inode
c000871a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c000871e:	78 09                	js     c0008729 <sys_getcwd+0x7a>
/work/x86_os_my/fs/fs.c:831 (discriminator 1)
c0008720:	81 7d f4 ff 0f 00 00 	cmpl   $0xfff,-0xc(%ebp)
c0008727:	7e 1c                	jle    c0008745 <sys_getcwd+0x96>
/work/x86_os_my/fs/fs.c:831 (discriminator 3)
c0008729:	68 88 e2 00 c0       	push   $0xc000e288
c000872e:	68 24 e4 00 c0       	push   $0xc000e424
c0008733:	68 3f 03 00 00       	push   $0x33f
c0008738:	68 b1 db 00 c0       	push   $0xc000dbb1
c000873d:	e8 0f 9d ff ff       	call   c0002451 <panic_spin>
c0008742:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:833
	/* 若当前目录是根目录,直接返回'/' */
	if (child_inode_nr == 0) {
c0008745:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0008749:	75 25                	jne    c0008770 <sys_getcwd+0xc1>
/work/x86_os_my/fs/fs.c:834
		buf[0] = '/';
c000874b:	8b 45 08             	mov    0x8(%ebp),%eax
c000874e:	c6 00 2f             	movb   $0x2f,(%eax)
/work/x86_os_my/fs/fs.c:835
		buf[1] = 0;
c0008751:	8b 45 08             	mov    0x8(%ebp),%eax
c0008754:	83 c0 01             	add    $0x1,%eax
c0008757:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/fs/fs.c:836
		sys_free(io_buf);
c000875a:	83 ec 0c             	sub    $0xc,%esp
c000875d:	ff 75 f0             	pushl  -0x10(%ebp)
c0008760:	e8 c4 ac ff ff       	call   c0003429 <sys_free>
c0008765:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:837
		return buf;
c0008768:	8b 45 08             	mov    0x8(%ebp),%eax
c000876b:	e9 2c 01 00 00       	jmp    c000889c <sys_getcwd+0x1ed>
/work/x86_os_my/fs/fs.c:840
	}

	memset(buf, 0, size);
c0008770:	83 ec 04             	sub    $0x4,%esp
c0008773:	ff 75 0c             	pushl  0xc(%ebp)
c0008776:	6a 00                	push   $0x0
c0008778:	ff 75 08             	pushl  0x8(%ebp)
c000877b:	e8 73 b1 ff ff       	call   c00038f3 <memset>
c0008780:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:841
	char full_path_reverse[MAX_PATH_LEN] = {0};	// 用来做全路径缓冲区
c0008783:	8d 85 e2 fd ff ff    	lea    -0x21e(%ebp),%eax
c0008789:	b9 00 02 00 00       	mov    $0x200,%ecx
c000878e:	bb 00 00 00 00       	mov    $0x0,%ebx
c0008793:	89 18                	mov    %ebx,(%eax)
c0008795:	89 5c 08 fc          	mov    %ebx,-0x4(%eax,%ecx,1)
c0008799:	8d 50 04             	lea    0x4(%eax),%edx
c000879c:	83 e2 fc             	and    $0xfffffffc,%edx
c000879f:	29 d0                	sub    %edx,%eax
c00087a1:	01 c1                	add    %eax,%ecx
c00087a3:	83 e1 fc             	and    $0xfffffffc,%ecx
c00087a6:	c1 e9 02             	shr    $0x2,%ecx
c00087a9:	89 d7                	mov    %edx,%edi
c00087ab:	89 d8                	mov    %ebx,%eax
c00087ad:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/fs/fs.c:846

	/* 从下往上逐层找父目录,直到找到根目录为止.
	 * 当child_inode_nr为根目录的inode编号(0)时停止,
	 * 即已经查看完根目录中的目录项 */
	while ((child_inode_nr)) {
c00087af:	eb 52                	jmp    c0008803 <sys_getcwd+0x154>
/work/x86_os_my/fs/fs.c:847
		parent_inode_nr = get_parent_dir_inode_nr(child_inode_nr, io_buf);
c00087b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00087b4:	83 ec 08             	sub    $0x8,%esp
c00087b7:	ff 75 f0             	pushl  -0x10(%ebp)
c00087ba:	50                   	push   %eax
c00087bb:	e8 88 fc ff ff       	call   c0008448 <get_parent_dir_inode_nr>
c00087c0:	83 c4 10             	add    $0x10,%esp
c00087c3:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:848
		if (get_child_dir_name(parent_inode_nr, child_inode_nr, full_path_reverse, io_buf) == -1) {	// 或未找到名字,失败退出
c00087c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c00087c9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00087cc:	ff 75 f0             	pushl  -0x10(%ebp)
c00087cf:	8d 8d e2 fd ff ff    	lea    -0x21e(%ebp),%ecx
c00087d5:	51                   	push   %ecx
c00087d6:	52                   	push   %edx
c00087d7:	50                   	push   %eax
c00087d8:	e8 2f fd ff ff       	call   c000850c <get_child_dir_name>
c00087dd:	83 c4 10             	add    $0x10,%esp
c00087e0:	83 f8 ff             	cmp    $0xffffffff,%eax
c00087e3:	75 18                	jne    c00087fd <sys_getcwd+0x14e>
/work/x86_os_my/fs/fs.c:849
			sys_free(io_buf);
c00087e5:	83 ec 0c             	sub    $0xc,%esp
c00087e8:	ff 75 f0             	pushl  -0x10(%ebp)
c00087eb:	e8 39 ac ff ff       	call   c0003429 <sys_free>
c00087f0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:850
			return NULL;
c00087f3:	b8 00 00 00 00       	mov    $0x0,%eax
c00087f8:	e9 9f 00 00 00       	jmp    c000889c <sys_getcwd+0x1ed>
/work/x86_os_my/fs/fs.c:852
		}
		child_inode_nr = parent_inode_nr;
c00087fd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0008800:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:846
	char full_path_reverse[MAX_PATH_LEN] = {0};	// 用来做全路径缓冲区

	/* 从下往上逐层找父目录,直到找到根目录为止.
	 * 当child_inode_nr为根目录的inode编号(0)时停止,
	 * 即已经查看完根目录中的目录项 */
	while ((child_inode_nr)) {
c0008803:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0008807:	75 a8                	jne    c00087b1 <sys_getcwd+0x102>
/work/x86_os_my/fs/fs.c:854
			sys_free(io_buf);
			return NULL;
		}
		child_inode_nr = parent_inode_nr;
	}
	ASSERT(strlen(full_path_reverse) <= size);
c0008809:	83 ec 0c             	sub    $0xc,%esp
c000880c:	8d 85 e2 fd ff ff    	lea    -0x21e(%ebp),%eax
c0008812:	50                   	push   %eax
c0008813:	e8 65 b2 ff ff       	call   c0003a7d <strlen>
c0008818:	83 c4 10             	add    $0x10,%esp
c000881b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c000881e:	76 4e                	jbe    c000886e <sys_getcwd+0x1bf>
/work/x86_os_my/fs/fs.c:854 (discriminator 1)
c0008820:	68 b8 e2 00 c0       	push   $0xc000e2b8
c0008825:	68 24 e4 00 c0       	push   $0xc000e424
c000882a:	68 56 03 00 00       	push   $0x356
c000882f:	68 b1 db 00 c0       	push   $0xc000dbb1
c0008834:	e8 18 9c ff ff       	call   c0002451 <panic_spin>
c0008839:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:859 (discriminator 1)
	/* 至此 full_path_reverse 中的路径是反着的,
	 * 即子目录在前(左),父目录在后(右) ,
	 * 现将full_path_reverse中的路径反置 */
	char* last_slash;	// 用于记录字符串中最后一个斜杠地址
	while ((last_slash = strrchr(full_path_reverse, '/'))) {
c000883c:	eb 30                	jmp    c000886e <sys_getcwd+0x1bf>
/work/x86_os_my/fs/fs.c:860
		uint16_t len = strlen(buf);
c000883e:	83 ec 0c             	sub    $0xc,%esp
c0008841:	ff 75 08             	pushl  0x8(%ebp)
c0008844:	e8 34 b2 ff ff       	call   c0003a7d <strlen>
c0008849:	83 c4 10             	add    $0x10,%esp
c000884c:	66 89 45 e2          	mov    %ax,-0x1e(%ebp)
/work/x86_os_my/fs/fs.c:861
		strcpy(buf + len, last_slash);
c0008850:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0008854:	8b 45 08             	mov    0x8(%ebp),%eax
c0008857:	01 d0                	add    %edx,%eax
c0008859:	83 ec 08             	sub    $0x8,%esp
c000885c:	ff 75 e4             	pushl  -0x1c(%ebp)
c000885f:	50                   	push   %eax
c0008860:	e8 c3 b1 ff ff       	call   c0003a28 <strcpy>
c0008865:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:863
		/* 在full_path_reverse中添加结束字符,做为下一次执行strcpy中last_slash的边界 */
		*last_slash = 0;
c0008868:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000886b:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/fs/fs.c:859
	ASSERT(strlen(full_path_reverse) <= size);
	/* 至此 full_path_reverse 中的路径是反着的,
	 * 即子目录在前(左),父目录在后(右) ,
	 * 现将full_path_reverse中的路径反置 */
	char* last_slash;	// 用于记录字符串中最后一个斜杠地址
	while ((last_slash = strrchr(full_path_reverse, '/'))) {
c000886e:	83 ec 08             	sub    $0x8,%esp
c0008871:	6a 2f                	push   $0x2f
c0008873:	8d 85 e2 fd ff ff    	lea    -0x21e(%ebp),%eax
c0008879:	50                   	push   %eax
c000887a:	e8 1a b3 ff ff       	call   c0003b99 <strrchr>
c000887f:	83 c4 10             	add    $0x10,%esp
c0008882:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0008885:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0008889:	75 b3                	jne    c000883e <sys_getcwd+0x18f>
/work/x86_os_my/fs/fs.c:865
		uint16_t len = strlen(buf);
		strcpy(buf + len, last_slash);
		/* 在full_path_reverse中添加结束字符,做为下一次执行strcpy中last_slash的边界 */
		*last_slash = 0;
	}
	sys_free(io_buf);
c000888b:	83 ec 0c             	sub    $0xc,%esp
c000888e:	ff 75 f0             	pushl  -0x10(%ebp)
c0008891:	e8 93 ab ff ff       	call   c0003429 <sys_free>
c0008896:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:866
	return buf;
c0008899:	8b 45 08             	mov    0x8(%ebp),%eax
/work/x86_os_my/fs/fs.c:867 (discriminator 2)
}
c000889c:	8d 65 f8             	lea    -0x8(%ebp),%esp
c000889f:	5b                   	pop    %ebx
c00088a0:	5f                   	pop    %edi
c00088a1:	5d                   	pop    %ebp
c00088a2:	c3                   	ret    

c00088a3 <sys_chdir>:
sys_chdir():
/work/x86_os_my/fs/fs.c:870

/* 更改当前工作目录为绝对路径path,成功则返回0,失败返回-1 */
int32_t sys_chdir(const char* path) {
c00088a3:	55                   	push   %ebp
c00088a4:	89 e5                	mov    %esp,%ebp
c00088a6:	81 ec 18 02 00 00    	sub    $0x218,%esp
/work/x86_os_my/fs/fs.c:871
	int32_t ret = -1;
c00088ac:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:873
	struct path_search_record searched_record;
	memset(&searched_record, 0, sizeof(struct path_search_record));
c00088b3:	83 ec 04             	sub    $0x4,%esp
c00088b6:	68 08 02 00 00       	push   $0x208
c00088bb:	6a 00                	push   $0x0
c00088bd:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
c00088c3:	50                   	push   %eax
c00088c4:	e8 2a b0 ff ff       	call   c00038f3 <memset>
c00088c9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:874
	int inode_no = search_file(path, &searched_record);
c00088cc:	83 ec 08             	sub    $0x8,%esp
c00088cf:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
c00088d5:	50                   	push   %eax
c00088d6:	ff 75 08             	pushl  0x8(%ebp)
c00088d9:	e8 6c ea ff ff       	call   c000734a <search_file>
c00088de:	83 c4 10             	add    $0x10,%esp
c00088e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:875
	if (inode_no != -1) {
c00088e4:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c00088e8:	74 34                	je     c000891e <sys_chdir+0x7b>
/work/x86_os_my/fs/fs.c:876
		if (searched_record.file_type == FT_DIRECTORY) {
c00088ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00088ed:	83 f8 02             	cmp    $0x2,%eax
c00088f0:	75 19                	jne    c000890b <sys_chdir+0x68>
/work/x86_os_my/fs/fs.c:877
			running_thread()->cwd_inode_nr = inode_no;
c00088f2:	e8 e3 b3 ff ff       	call   c0003cda <running_thread>
c00088f7:	89 c2                	mov    %eax,%edx
c00088f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00088fc:	89 82 0c 01 00 00    	mov    %eax,0x10c(%edx)
/work/x86_os_my/fs/fs.c:878
			ret = 0;
c0008902:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0008909:	eb 13                	jmp    c000891e <sys_chdir+0x7b>
/work/x86_os_my/fs/fs.c:880
		} else {
			printk("sys_chdir: %s is regular file or other!\n", path);
c000890b:	83 ec 08             	sub    $0x8,%esp
c000890e:	ff 75 08             	pushl  0x8(%ebp)
c0008911:	68 dc e2 00 c0       	push   $0xc000e2dc
c0008916:	e8 93 e2 ff ff       	call   c0006bae <printk>
c000891b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:883
		}
	}
	dir_close(searched_record.parent_dir);
c000891e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0008921:	83 ec 0c             	sub    $0xc,%esp
c0008924:	50                   	push   %eax
c0008925:	e8 f5 1d 00 00       	call   c000a71f <dir_close>
c000892a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:884
	return ret;
c000892d:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:885
}
c0008930:	c9                   	leave  
c0008931:	c3                   	ret    

c0008932 <sys_stat>:
sys_stat():
/work/x86_os_my/fs/fs.c:888

/* 在buf中填充文件结构相关信息,成功时返回0,失败返回-1 */
int32_t sys_stat(const char* path, struct stat* buf) {
c0008932:	55                   	push   %ebp
c0008933:	89 e5                	mov    %esp,%ebp
c0008935:	81 ec 28 02 00 00    	sub    $0x228,%esp
/work/x86_os_my/fs/fs.c:890
	/* 若直接查看根目录'/' */
	if (!strcmp(path, "/") || !strcmp(path, "/.") || !strcmp(path, "/..")) {
c000893b:	83 ec 08             	sub    $0x8,%esp
c000893e:	68 2b dd 00 c0       	push   $0xc000dd2b
c0008943:	ff 75 08             	pushl  0x8(%ebp)
c0008946:	e8 7d b1 ff ff       	call   c0003ac8 <strcmp>
c000894b:	83 c4 10             	add    $0x10,%esp
c000894e:	84 c0                	test   %al,%al
c0008950:	74 2e                	je     c0008980 <sys_stat+0x4e>
/work/x86_os_my/fs/fs.c:890 (discriminator 1)
c0008952:	83 ec 08             	sub    $0x8,%esp
c0008955:	68 2d dd 00 c0       	push   $0xc000dd2d
c000895a:	ff 75 08             	pushl  0x8(%ebp)
c000895d:	e8 66 b1 ff ff       	call   c0003ac8 <strcmp>
c0008962:	83 c4 10             	add    $0x10,%esp
c0008965:	84 c0                	test   %al,%al
c0008967:	74 17                	je     c0008980 <sys_stat+0x4e>
/work/x86_os_my/fs/fs.c:890 (discriminator 2)
c0008969:	83 ec 08             	sub    $0x8,%esp
c000896c:	68 30 dd 00 c0       	push   $0xc000dd30
c0008971:	ff 75 08             	pushl  0x8(%ebp)
c0008974:	e8 4f b1 ff ff       	call   c0003ac8 <strcmp>
c0008979:	83 c4 10             	add    $0x10,%esp
c000897c:	84 c0                	test   %al,%al
c000897e:	75 2b                	jne    c00089ab <sys_stat+0x79>
/work/x86_os_my/fs/fs.c:891
		buf->st_filetype = FT_DIRECTORY;
c0008980:	8b 45 0c             	mov    0xc(%ebp),%eax
c0008983:	c7 40 08 02 00 00 00 	movl   $0x2,0x8(%eax)
/work/x86_os_my/fs/fs.c:892
		buf->st_ino = 0;
c000898a:	8b 45 0c             	mov    0xc(%ebp),%eax
c000898d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/fs/fs.c:893
		buf->st_size = root_dir.inode->i_size;
c0008993:	a1 a0 31 01 c0       	mov    0xc00131a0,%eax
c0008998:	8b 50 04             	mov    0x4(%eax),%edx
c000899b:	8b 45 0c             	mov    0xc(%ebp),%eax
c000899e:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/fs.c:894
		return 0;
c00089a1:	b8 00 00 00 00       	mov    $0x0,%eax
c00089a6:	e9 af 00 00 00       	jmp    c0008a5a <sys_stat+0x128>
/work/x86_os_my/fs/fs.c:897
	}

	int32_t ret = -1;	// 默认返回值
c00089ab:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:899
	struct path_search_record searched_record;
	memset(&searched_record, 0, sizeof(struct path_search_record));   // 记得初始化或清0,否则栈中信息不知道是什么
c00089b2:	83 ec 04             	sub    $0x4,%esp
c00089b5:	68 08 02 00 00       	push   $0x208
c00089ba:	6a 00                	push   $0x0
c00089bc:	8d 85 e4 fd ff ff    	lea    -0x21c(%ebp),%eax
c00089c2:	50                   	push   %eax
c00089c3:	e8 2b af ff ff       	call   c00038f3 <memset>
c00089c8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:900
	int inode_no = search_file(path, &searched_record);
c00089cb:	83 ec 08             	sub    $0x8,%esp
c00089ce:	8d 85 e4 fd ff ff    	lea    -0x21c(%ebp),%eax
c00089d4:	50                   	push   %eax
c00089d5:	ff 75 08             	pushl  0x8(%ebp)
c00089d8:	e8 6d e9 ff ff       	call   c000734a <search_file>
c00089dd:	83 c4 10             	add    $0x10,%esp
c00089e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:901
	if (inode_no != -1) {
c00089e3:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c00089e7:	74 4c                	je     c0008a35 <sys_stat+0x103>
/work/x86_os_my/fs/fs.c:902
		struct inode* obj_inode = inode_open(cur_part, inode_no);   // 只为获得文件大小
c00089e9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00089ec:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c00089f1:	83 ec 08             	sub    $0x8,%esp
c00089f4:	52                   	push   %edx
c00089f5:	50                   	push   %eax
c00089f6:	e8 3b 04 00 00       	call   c0008e36 <inode_open>
c00089fb:	83 c4 10             	add    $0x10,%esp
c00089fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:903
		buf->st_size = obj_inode->i_size;
c0008a01:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008a04:	8b 50 04             	mov    0x4(%eax),%edx
c0008a07:	8b 45 0c             	mov    0xc(%ebp),%eax
c0008a0a:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/fs.c:904
		inode_close(obj_inode);
c0008a0d:	83 ec 0c             	sub    $0xc,%esp
c0008a10:	ff 75 ec             	pushl  -0x14(%ebp)
c0008a13:	e8 64 05 00 00       	call   c0008f7c <inode_close>
c0008a18:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:905
		buf->st_filetype = searched_record.file_type;
c0008a1b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0008a1e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0008a21:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/fs/fs.c:906
		buf->st_ino = inode_no;
c0008a24:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0008a27:	8b 45 0c             	mov    0xc(%ebp),%eax
c0008a2a:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/fs/fs.c:907
		ret = 0;
c0008a2c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0008a33:	eb 13                	jmp    c0008a48 <sys_stat+0x116>
/work/x86_os_my/fs/fs.c:909
	} else {
		printk("sys_stat: %s not found\n", path);
c0008a35:	83 ec 08             	sub    $0x8,%esp
c0008a38:	ff 75 08             	pushl  0x8(%ebp)
c0008a3b:	68 05 e3 00 c0       	push   $0xc000e305
c0008a40:	e8 69 e1 ff ff       	call   c0006bae <printk>
c0008a45:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:911
	}
	dir_close(searched_record.parent_dir);
c0008a48:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0008a4b:	83 ec 0c             	sub    $0xc,%esp
c0008a4e:	50                   	push   %eax
c0008a4f:	e8 cb 1c 00 00       	call   c000a71f <dir_close>
c0008a54:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:912
	return ret;
c0008a57:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:913 (discriminator 1)
}
c0008a5a:	c9                   	leave  
c0008a5b:	c3                   	ret    

c0008a5c <sys_putchar>:
sys_putchar():
/work/x86_os_my/fs/fs.c:916

/* 向屏幕输出一个字符 */
void sys_putchar(char char_asci) {
c0008a5c:	55                   	push   %ebp
c0008a5d:	89 e5                	mov    %esp,%ebp
c0008a5f:	83 ec 18             	sub    $0x18,%esp
c0008a62:	8b 45 08             	mov    0x8(%ebp),%eax
c0008a65:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:917
	console_put_char(char_asci);
c0008a68:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0008a6c:	0f b6 c0             	movzbl %al,%eax
c0008a6f:	83 ec 0c             	sub    $0xc,%esp
c0008a72:	50                   	push   %eax
c0008a73:	e8 e9 be ff ff       	call   c0004961 <console_put_char>
c0008a78:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:918
}
c0008a7b:	90                   	nop
c0008a7c:	c9                   	leave  
c0008a7d:	c3                   	ret    

c0008a7e <filesys_init>:
filesys_init():
/work/x86_os_my/fs/fs.c:930
 * 只支持 partition_format 函数创建的文件系统，其魔数等于 0x19590318
 * 三层循环：遍历通道，遍历通道中的硬盘，遍历硬盘上的分区
 * 全局变量 channel_cnt 通道数，定义在 ide.c
 * 全局变量 channels 结构体，定义在 ide.c
 */
void filesys_init() {
c0008a7e:	55                   	push   %ebp
c0008a7f:	89 e5                	mov    %esp,%ebp
c0008a81:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/fs/fs.c:931
	uint8_t channel_no = 0, dev_no, part_idx = 0;
c0008a84:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
c0008a88:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
/work/x86_os_my/fs/fs.c:934

	/* sb_buf用来存储从硬盘上读入的超级块 */
	struct super_block* sb_buf = (struct super_block*)sys_malloc(SECTOR_SIZE);
c0008a8c:	83 ec 0c             	sub    $0xc,%esp
c0008a8f:	68 00 02 00 00       	push   $0x200
c0008a94:	e8 63 a3 ff ff       	call   c0002dfc <sys_malloc>
c0008a99:	83 c4 10             	add    $0x10,%esp
c0008a9c:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:935
	if (sb_buf == NULL) {
c0008a9f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0008aa3:	75 1c                	jne    c0008ac1 <filesys_init+0x43>
/work/x86_os_my/fs/fs.c:936
		PANIC("alloc memory failed!");
c0008aa5:	68 9c db 00 c0       	push   $0xc000db9c
c0008aaa:	68 30 e4 00 c0       	push   $0xc000e430
c0008aaf:	68 a8 03 00 00       	push   $0x3a8
c0008ab4:	68 b1 db 00 c0       	push   $0xc000dbb1
c0008ab9:	e8 93 99 ff ff       	call   c0002451 <panic_spin>
c0008abe:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:939
	}

	printk("searching filesystem......\n");
c0008ac1:	83 ec 0c             	sub    $0xc,%esp
c0008ac4:	68 1d e3 00 c0       	push   $0xc000e31d
c0008ac9:	e8 e0 e0 ff ff       	call   c0006bae <printk>
c0008ace:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:941
	/* 遍历通道 */
	while (channel_no < channel_cnt) {
c0008ad1:	e9 1a 01 00 00       	jmp    c0008bf0 <filesys_init+0x172>
/work/x86_os_my/fs/fs.c:942
		dev_no = 0;
c0008ad6:	c6 45 f6 00          	movb   $0x0,-0xa(%ebp)
/work/x86_os_my/fs/fs.c:944
		/* 遍历通道里的硬盘 */
		while(dev_no < 2) {
c0008ada:	e9 fd 00 00 00       	jmp    c0008bdc <filesys_init+0x15e>
/work/x86_os_my/fs/fs.c:945
			if (dev_no == 0) {		// 跨过裸盘hd60M.img
c0008adf:	80 7d f6 00          	cmpb   $0x0,-0xa(%ebp)
c0008ae3:	75 0f                	jne    c0008af4 <filesys_init+0x76>
/work/x86_os_my/fs/fs.c:946
				dev_no++;
c0008ae5:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0008ae9:	83 c0 01             	add    $0x1,%eax
c0008aec:	88 45 f6             	mov    %al,-0xa(%ebp)
/work/x86_os_my/fs/fs.c:947
				continue;
c0008aef:	e9 e8 00 00 00       	jmp    c0008bdc <filesys_init+0x15e>
/work/x86_os_my/fs/fs.c:949
			}
			struct disk* hd = &channels[channel_no].devices[dev_no];
c0008af4:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0008af8:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
c0008afc:	69 d2 10 03 00 00    	imul   $0x310,%edx,%edx
c0008b02:	69 c0 60 06 00 00    	imul   $0x660,%eax,%eax
c0008b08:	01 d0                	add    %edx,%eax
c0008b0a:	83 c0 40             	add    $0x40,%eax
c0008b0d:	05 40 23 01 c0       	add    $0xc0012340,%eax
c0008b12:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/fs.c:950
			struct partition* part = hd->prim_parts;	// 主分区数组
c0008b15:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0008b18:	83 c0 10             	add    $0x10,%eax
c0008b1b:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:952
			/* 遍历硬盘里的分区 */
			while(part_idx < 12) {						// 4个主分区+8个逻辑
c0008b1e:	e9 a5 00 00 00       	jmp    c0008bc8 <filesys_init+0x14a>
/work/x86_os_my/fs/fs.c:953
				if (part_idx == 4) {
c0008b23:	80 7d f5 04          	cmpb   $0x4,-0xb(%ebp)
c0008b27:	75 0b                	jne    c0008b34 <filesys_init+0xb6>
/work/x86_os_my/fs/fs.c:954
					part = hd->logic_parts;				// 逻辑分区数组
c0008b29:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0008b2c:	05 10 01 00 00       	add    $0x110,%eax
c0008b31:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:959
				}

				/* channels数组是全局变量,默认值为0
				 * 固 channels.disk.partition.sec_cnt 在未初始化时，也为0 */
				if (part->sec_cnt != 0) {	// 如果分区存在，以sec_cnt是否为0当判断依据
c0008b34:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008b37:	8b 40 04             	mov    0x4(%eax),%eax
c0008b3a:	85 c0                	test   %eax,%eax
c0008b3c:	74 7c                	je     c0008bba <filesys_init+0x13c>
/work/x86_os_my/fs/fs.c:960
					memset(sb_buf, 0, SECTOR_SIZE);
c0008b3e:	83 ec 04             	sub    $0x4,%esp
c0008b41:	68 00 02 00 00       	push   $0x200
c0008b46:	6a 00                	push   $0x0
c0008b48:	ff 75 e8             	pushl  -0x18(%ebp)
c0008b4b:	e8 a3 ad ff ff       	call   c00038f3 <memset>
c0008b50:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:963

					/* 读出分区的超级块，根据魔数判断是否存在我们定义的文件系统  */
					ide_read(hd, part->start_lba + 1, sb_buf, 1);
c0008b53:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008b56:	8b 00                	mov    (%eax),%eax
c0008b58:	83 c0 01             	add    $0x1,%eax
c0008b5b:	6a 01                	push   $0x1
c0008b5d:	ff 75 e8             	pushl  -0x18(%ebp)
c0008b60:	50                   	push   %eax
c0008b61:	ff 75 e4             	pushl  -0x1c(%ebp)
c0008b64:	e8 cc d5 ff ff       	call   c0006135 <ide_read>
c0008b69:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:964
					if (sb_buf->magic == 0x19590318) {
c0008b6c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0008b6f:	8b 00                	mov    (%eax),%eax
c0008b71:	3d 18 03 59 19       	cmp    $0x19590318,%eax
c0008b76:	75 19                	jne    c0008b91 <filesys_init+0x113>
/work/x86_os_my/fs/fs.c:965
						printk("%s has filesystem\n", part->name);
c0008b78:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008b7b:	83 c0 14             	add    $0x14,%eax
c0008b7e:	83 ec 08             	sub    $0x8,%esp
c0008b81:	50                   	push   %eax
c0008b82:	68 39 e3 00 c0       	push   $0xc000e339
c0008b87:	e8 22 e0 ff ff       	call   c0006bae <printk>
c0008b8c:	83 c4 10             	add    $0x10,%esp
c0008b8f:	eb 29                	jmp    c0008bba <filesys_init+0x13c>
/work/x86_os_my/fs/fs.c:968
					} else {
						// 不存在我们的文件系统，则进行格式化
						printk("formatting %s`s partition %s......\n", hd->name, part->name);
c0008b91:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008b94:	8d 50 14             	lea    0x14(%eax),%edx
c0008b97:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0008b9a:	83 ec 04             	sub    $0x4,%esp
c0008b9d:	52                   	push   %edx
c0008b9e:	50                   	push   %eax
c0008b9f:	68 4c e3 00 c0       	push   $0xc000e34c
c0008ba4:	e8 05 e0 ff ff       	call   c0006bae <printk>
c0008ba9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:969
						partition_format(part);
c0008bac:	83 ec 0c             	sub    $0xc,%esp
c0008baf:	ff 75 f0             	pushl  -0x10(%ebp)
c0008bb2:	e8 5e e2 ff ff       	call   c0006e15 <partition_format>
c0008bb7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:972
					}
				}
				part_idx++;
c0008bba:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0008bbe:	83 c0 01             	add    $0x1,%eax
c0008bc1:	88 45 f5             	mov    %al,-0xb(%ebp)
/work/x86_os_my/fs/fs.c:973
				part++;
c0008bc4:	83 45 f0 40          	addl   $0x40,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:952
				continue;
			}
			struct disk* hd = &channels[channel_no].devices[dev_no];
			struct partition* part = hd->prim_parts;	// 主分区数组
			/* 遍历硬盘里的分区 */
			while(part_idx < 12) {						// 4个主分区+8个逻辑
c0008bc8:	80 7d f5 0b          	cmpb   $0xb,-0xb(%ebp)
c0008bcc:	0f 86 51 ff ff ff    	jbe    c0008b23 <filesys_init+0xa5>
/work/x86_os_my/fs/fs.c:975
					}
				}
				part_idx++;
				part++;
			}	/* end of 遍历分区 */
			dev_no++;
c0008bd2:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0008bd6:	83 c0 01             	add    $0x1,%eax
c0008bd9:	88 45 f6             	mov    %al,-0xa(%ebp)
/work/x86_os_my/fs/fs.c:944
	printk("searching filesystem......\n");
	/* 遍历通道 */
	while (channel_no < channel_cnt) {
		dev_no = 0;
		/* 遍历通道里的硬盘 */
		while(dev_no < 2) {
c0008bdc:	80 7d f6 01          	cmpb   $0x1,-0xa(%ebp)
c0008be0:	0f 86 f9 fe ff ff    	jbe    c0008adf <filesys_init+0x61>
/work/x86_os_my/fs/fs.c:977
				part_idx++;
				part++;
			}	/* end of 遍历分区 */
			dev_no++;
		}	/* end of 遍历硬盘 */
		channel_no++;
c0008be6:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0008bea:	83 c0 01             	add    $0x1,%eax
c0008bed:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:941
		PANIC("alloc memory failed!");
	}

	printk("searching filesystem......\n");
	/* 遍历通道 */
	while (channel_no < channel_cnt) {
c0008bf0:	0f b6 05 20 23 01 c0 	movzbl 0xc0012320,%eax
c0008bf7:	38 45 f7             	cmp    %al,-0x9(%ebp)
c0008bfa:	0f 82 d6 fe ff ff    	jb     c0008ad6 <filesys_init+0x58>
/work/x86_os_my/fs/fs.c:979
			}	/* end of 遍历分区 */
			dev_no++;
		}	/* end of 遍历硬盘 */
		channel_no++;
	}	/* end of 遍历通道 */
	sys_free(sb_buf);
c0008c00:	83 ec 0c             	sub    $0xc,%esp
c0008c03:	ff 75 e8             	pushl  -0x18(%ebp)
c0008c06:	e8 1e a8 ff ff       	call   c0003429 <sys_free>
c0008c0b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:984


	/* 挂载分区 */
	/* 默认操作的分区 */
	char default_part[8] = "sdb1";
c0008c0e:	c7 45 dc 73 64 62 31 	movl   $0x31626473,-0x24(%ebp)
c0008c15:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
/work/x86_os_my/fs/fs.c:995
	参数：
	partition_list 是所有分区的链表
	mount_partition 是挂载分区的函数
	(int)default_part 将数组地址转换成整型作为 mount_partition 的参数
	*/
	list_traversal(&partition_list, mount_partition, (int)default_part);
c0008c1c:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0008c1f:	83 ec 04             	sub    $0x4,%esp
c0008c22:	50                   	push   %eax
c0008c23:	68 0a 6c 00 c0       	push   $0xc0006c0a
c0008c28:	68 00 30 01 c0       	push   $0xc0013000
c0008c2d:	e8 f5 bb ff ff       	call   c0004827 <list_traversal>
c0008c32:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:999


	/* 将当前分区的根目录打开 + 初始化文件表 */
	open_root_dir(cur_part);
c0008c35:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0008c3a:	83 ec 0c             	sub    $0xc,%esp
c0008c3d:	50                   	push   %eax
c0008c3e:	e8 94 18 00 00       	call   c000a4d7 <open_root_dir>
c0008c43:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:1000
	uint32_t fd_idx = 0;
c0008c46:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:1001
	while (fd_idx < MAX_FILE_OPEN) {
c0008c4d:	eb 1d                	jmp    c0008c6c <filesys_init+0x1ee>
/work/x86_os_my/fs/fs.c:1002
		file_table[fd_idx++].fd_inode = NULL;
c0008c4f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0008c52:	8d 42 01             	lea    0x1(%edx),%eax
c0008c55:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0008c58:	89 d0                	mov    %edx,%eax
c0008c5a:	01 c0                	add    %eax,%eax
c0008c5c:	01 d0                	add    %edx,%eax
c0008c5e:	c1 e0 02             	shl    $0x2,%eax
c0008c61:	05 28 30 01 c0       	add    $0xc0013028,%eax
c0008c66:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/fs/fs.c:1001


	/* 将当前分区的根目录打开 + 初始化文件表 */
	open_root_dir(cur_part);
	uint32_t fd_idx = 0;
	while (fd_idx < MAX_FILE_OPEN) {
c0008c6c:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
c0008c70:	76 dd                	jbe    c0008c4f <filesys_init+0x1d1>
/work/x86_os_my/fs/fs.c:1004
		file_table[fd_idx++].fd_inode = NULL;
	}
}
c0008c72:	90                   	nop
c0008c73:	c9                   	leave  
c0008c74:	c3                   	ret    

c0008c75 <inode_locate>:
inode_locate():
/work/x86_os_my/fs/inode.c:23
};

/* 获取inode所在的扇区和扇区内的偏移量
 * out: inode_pos
 */
static void inode_locate(struct partition* part, uint32_t inode_no, struct inode_position* inode_pos) {
c0008c75:	55                   	push   %ebp
c0008c76:	89 e5                	mov    %esp,%ebp
c0008c78:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/fs/inode.c:25
	/* inode_table在硬盘上是连续的 */
	ASSERT(inode_no < 4096);
c0008c7b:	81 7d 0c ff 0f 00 00 	cmpl   $0xfff,0xc(%ebp)
c0008c82:	76 19                	jbe    c0008c9d <inode_locate+0x28>
/work/x86_os_my/fs/inode.c:25 (discriminator 1)
c0008c84:	68 40 e4 00 c0       	push   $0xc000e440
c0008c89:	68 c8 e4 00 c0       	push   $0xc000e4c8
c0008c8e:	6a 19                	push   $0x19
c0008c90:	68 50 e4 00 c0       	push   $0xc000e450
c0008c95:	e8 b7 97 ff ff       	call   c0002451 <panic_spin>
c0008c9a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:26
	uint32_t inode_table_lba = part->sb->inode_table_lba;
c0008c9d:	8b 45 08             	mov    0x8(%ebp),%eax
c0008ca0:	8b 40 1c             	mov    0x1c(%eax),%eax
c0008ca3:	8b 40 20             	mov    0x20(%eax),%eax
c0008ca6:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/inode.c:28

	uint32_t inode_size = sizeof(struct inode);
c0008ca9:	c7 45 f0 4c 00 00 00 	movl   $0x4c,-0x10(%ebp)
/work/x86_os_my/fs/inode.c:29
	uint32_t off_size = inode_no * inode_size;	// 第inode_no号inode相对于inode_table_lba的字节偏移量
c0008cb0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0008cb3:	0f af 45 f0          	imul   -0x10(%ebp),%eax
c0008cb7:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/inode.c:30
	uint32_t off_sec  = off_size / 512;			// 第inode_no号inode相对于inode_table_lba的扇区偏移量
c0008cba:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008cbd:	c1 e8 09             	shr    $0x9,%eax
c0008cc0:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/inode.c:31
	uint32_t off_size_in_sec = off_size % 512;	// 待查找的inode所在扇区中的起始地址
c0008cc3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008cc6:	25 ff 01 00 00       	and    $0x1ff,%eax
c0008ccb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/inode.c:34

	/* 判断此inode是否跨越2个扇区 */
	uint32_t left_in_sec = 512 - off_size_in_sec;
c0008cce:	b8 00 02 00 00       	mov    $0x200,%eax
c0008cd3:	2b 45 e4             	sub    -0x1c(%ebp),%eax
c0008cd6:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/inode.c:36
	// 若扇区内剩下的空间不足以容纳一个inode,必然是inode跨越了2个扇区
	if (left_in_sec < inode_size ) {
c0008cd9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0008cdc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0008cdf:	73 0b                	jae    c0008cec <inode_locate+0x77>
/work/x86_os_my/fs/inode.c:37
		inode_pos->two_sec = true;	//跨越了
c0008ce1:	8b 45 10             	mov    0x10(%ebp),%eax
c0008ce4:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0008cea:	eb 09                	jmp    c0008cf5 <inode_locate+0x80>
/work/x86_os_my/fs/inode.c:39
	} else {
		inode_pos->two_sec = false;
c0008cec:	8b 45 10             	mov    0x10(%ebp),%eax
c0008cef:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/fs/inode.c:41
	}
	inode_pos->sec_lba = inode_table_lba + off_sec;
c0008cf5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0008cf8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0008cfb:	01 c2                	add    %eax,%edx
c0008cfd:	8b 45 10             	mov    0x10(%ebp),%eax
c0008d00:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/inode.c:42
	inode_pos->off_size = off_size_in_sec;
c0008d03:	8b 45 10             	mov    0x10(%ebp),%eax
c0008d06:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0008d09:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/fs/inode.c:43
}
c0008d0c:	90                   	nop
c0008d0d:	c9                   	leave  
c0008d0e:	c3                   	ret    

c0008d0f <inode_sync>:
inode_sync():
/work/x86_os_my/fs/inode.c:51
io_buf是用于硬盘io的缓冲区，它由主调函数提供！
原因是
一般情况下把内存中的数据同步到硬盘都是最后的操作，其前已经做了大量工作，
若到这最后一步时才申请内存失败，前面的所有操作都白费了，还要回滚到之前的旧状态，代价太大
*/
void inode_sync(struct partition* part, struct inode* inode, void* io_buf) {
c0008d0f:	55                   	push   %ebp
c0008d10:	89 e5                	mov    %esp,%ebp
c0008d12:	83 ec 68             	sub    $0x68,%esp
/work/x86_os_my/fs/inode.c:52
	uint8_t inode_no = inode->i_no;
c0008d15:	8b 45 0c             	mov    0xc(%ebp),%eax
c0008d18:	8b 00                	mov    (%eax),%eax
c0008d1a:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/inode.c:54
	struct inode_position inode_pos;
	inode_locate(part, inode_no, &inode_pos);	// inode位置信息会存入inode_pos
c0008d1d:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0008d21:	83 ec 04             	sub    $0x4,%esp
c0008d24:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0008d27:	52                   	push   %edx
c0008d28:	50                   	push   %eax
c0008d29:	ff 75 08             	pushl  0x8(%ebp)
c0008d2c:	e8 44 ff ff ff       	call   c0008c75 <inode_locate>
c0008d31:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:55
	ASSERT(inode_pos.sec_lba <= (part->start_lba + part->sec_cnt));
c0008d34:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0008d37:	8b 45 08             	mov    0x8(%ebp),%eax
c0008d3a:	8b 08                	mov    (%eax),%ecx
c0008d3c:	8b 45 08             	mov    0x8(%ebp),%eax
c0008d3f:	8b 40 04             	mov    0x4(%eax),%eax
c0008d42:	01 c8                	add    %ecx,%eax
c0008d44:	39 c2                	cmp    %eax,%edx
c0008d46:	76 19                	jbe    c0008d61 <inode_sync+0x52>
/work/x86_os_my/fs/inode.c:55 (discriminator 1)
c0008d48:	68 5c e4 00 c0       	push   $0xc000e45c
c0008d4d:	68 d8 e4 00 c0       	push   $0xc000e4d8
c0008d52:	6a 37                	push   $0x37
c0008d54:	68 50 e4 00 c0       	push   $0xc000e450
c0008d59:	e8 f3 96 ff ff       	call   c0002451 <panic_spin>
c0008d5e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:62
	/* 硬盘中的inode中的成员inode_tag和i_open_cnts是不需要的，
	* 它们只在内存中有效，记录链表位置和被多少进程共享，
	* 将inode同步到硬盘时,清掉这三项即可。
	*/
	struct inode pure_inode;
	memcpy(&pure_inode, inode, sizeof(struct inode));
c0008d61:	83 ec 04             	sub    $0x4,%esp
c0008d64:	6a 4c                	push   $0x4c
c0008d66:	ff 75 0c             	pushl  0xc(%ebp)
c0008d69:	8d 45 98             	lea    -0x68(%ebp),%eax
c0008d6c:	50                   	push   %eax
c0008d6d:	e8 d3 ab ff ff       	call   c0003945 <memcpy>
c0008d72:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:63
	pure_inode.i_open_cnts = 0;
c0008d75:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
/work/x86_os_my/fs/inode.c:64
	pure_inode.write_deny = false;	// 置为false,以保证在硬盘中读出时为可写
c0008d7c:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
/work/x86_os_my/fs/inode.c:65
	pure_inode.inode_tag.prev = pure_inode.inode_tag.next = NULL;
c0008d83:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c0008d8a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0008d8d:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/inode.c:67

	char* inode_buf = (char*)io_buf;
c0008d90:	8b 45 10             	mov    0x10(%ebp),%eax
c0008d93:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/inode.c:69
	// 若inode结构，跨了两个扇区,就要读出两个扇区再写入两个扇区
	if (inode_pos.two_sec) {
c0008d96:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0008d99:	85 c0                	test   %eax,%eax
c0008d9b:	74 4c                	je     c0008de9 <inode_sync+0xda>
/work/x86_os_my/fs/inode.c:72
		/* 读写硬盘是以扇区为单位的
		所以需要将待写入的inode结构拼入到这2个扇区的中间位置 */
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 2);	// inode_table在格式化时，写入硬盘是连续写入的，所以读入2块扇区
c0008d9d:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0008da0:	8b 45 08             	mov    0x8(%ebp),%eax
c0008da3:	8b 40 08             	mov    0x8(%eax),%eax
c0008da6:	6a 02                	push   $0x2
c0008da8:	ff 75 f0             	pushl  -0x10(%ebp)
c0008dab:	52                   	push   %edx
c0008dac:	50                   	push   %eax
c0008dad:	e8 83 d3 ff ff       	call   c0006135 <ide_read>
c0008db2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:73
		memcpy((inode_buf + inode_pos.off_size), &pure_inode, sizeof(struct inode));	// inode_buf+inode在扇区中的偏移
c0008db5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0008db8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008dbb:	01 c2                	add    %eax,%edx
c0008dbd:	83 ec 04             	sub    $0x4,%esp
c0008dc0:	6a 4c                	push   $0x4c
c0008dc2:	8d 45 98             	lea    -0x68(%ebp),%eax
c0008dc5:	50                   	push   %eax
c0008dc6:	52                   	push   %edx
c0008dc7:	e8 79 ab ff ff       	call   c0003945 <memcpy>
c0008dcc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:74
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 2);
c0008dcf:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0008dd2:	8b 45 08             	mov    0x8(%ebp),%eax
c0008dd5:	8b 40 08             	mov    0x8(%eax),%eax
c0008dd8:	6a 02                	push   $0x2
c0008dda:	ff 75 f0             	pushl  -0x10(%ebp)
c0008ddd:	52                   	push   %edx
c0008dde:	50                   	push   %eax
c0008ddf:	e8 c5 d4 ff ff       	call   c00062a9 <ide_write>
c0008de4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:81
		// 若inode结构，只在一个扇区中
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
		memcpy((inode_buf + inode_pos.off_size), &pure_inode, sizeof(struct inode));	// inode_buf+inode在扇区中的偏移
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
	}
}
c0008de7:	eb 4a                	jmp    c0008e33 <inode_sync+0x124>
/work/x86_os_my/fs/inode.c:77
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 2);	// inode_table在格式化时，写入硬盘是连续写入的，所以读入2块扇区
		memcpy((inode_buf + inode_pos.off_size), &pure_inode, sizeof(struct inode));	// inode_buf+inode在扇区中的偏移
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 2);
	} else {
		// 若inode结构，只在一个扇区中
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
c0008de9:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0008dec:	8b 45 08             	mov    0x8(%ebp),%eax
c0008def:	8b 40 08             	mov    0x8(%eax),%eax
c0008df2:	6a 01                	push   $0x1
c0008df4:	ff 75 f0             	pushl  -0x10(%ebp)
c0008df7:	52                   	push   %edx
c0008df8:	50                   	push   %eax
c0008df9:	e8 37 d3 ff ff       	call   c0006135 <ide_read>
c0008dfe:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:78
		memcpy((inode_buf + inode_pos.off_size), &pure_inode, sizeof(struct inode));	// inode_buf+inode在扇区中的偏移
c0008e01:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0008e04:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008e07:	01 c2                	add    %eax,%edx
c0008e09:	83 ec 04             	sub    $0x4,%esp
c0008e0c:	6a 4c                	push   $0x4c
c0008e0e:	8d 45 98             	lea    -0x68(%ebp),%eax
c0008e11:	50                   	push   %eax
c0008e12:	52                   	push   %edx
c0008e13:	e8 2d ab ff ff       	call   c0003945 <memcpy>
c0008e18:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:79
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
c0008e1b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0008e1e:	8b 45 08             	mov    0x8(%ebp),%eax
c0008e21:	8b 40 08             	mov    0x8(%eax),%eax
c0008e24:	6a 01                	push   $0x1
c0008e26:	ff 75 f0             	pushl  -0x10(%ebp)
c0008e29:	52                   	push   %edx
c0008e2a:	50                   	push   %eax
c0008e2b:	e8 79 d4 ff ff       	call   c00062a9 <ide_write>
c0008e30:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:81
	}
}
c0008e33:	90                   	nop
c0008e34:	c9                   	leave  
c0008e35:	c3                   	ret    

c0008e36 <inode_open>:
inode_open():
/work/x86_os_my/fs/inode.c:84

/* 根据i结点号，获取到相应的inode结构，插入到inode缓存队列，并返回它 */
struct inode* inode_open(struct partition* part, uint32_t inode_no) {
c0008e36:	55                   	push   %ebp
c0008e37:	89 e5                	mov    %esp,%ebp
c0008e39:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/fs/inode.c:86
	/* 1.先在已打开inode链表中找inode，此链表作用是提速 */
	struct list_elem* elem = part->open_inodes.head.next;
c0008e3c:	8b 45 08             	mov    0x8(%ebp),%eax
c0008e3f:	8b 40 34             	mov    0x34(%eax),%eax
c0008e42:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/inode.c:88
	struct inode* inode_found;
	while (elem != &part->open_inodes.tail) {
c0008e45:	eb 33                	jmp    c0008e7a <inode_open+0x44>
/work/x86_os_my/fs/inode.c:89
		inode_found = elem2entry(struct inode, inode_tag, elem);
c0008e47:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0008e4a:	83 e8 44             	sub    $0x44,%eax
c0008e4d:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/inode.c:90
		if (inode_found->i_no == inode_no) {
c0008e50:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008e53:	8b 00                	mov    (%eax),%eax
c0008e55:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0008e58:	75 17                	jne    c0008e71 <inode_open+0x3b>
/work/x86_os_my/fs/inode.c:91
			inode_found->i_open_cnts++;
c0008e5a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008e5d:	8b 40 08             	mov    0x8(%eax),%eax
c0008e60:	8d 50 01             	lea    0x1(%eax),%edx
c0008e63:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008e66:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/fs/inode.c:92
			return inode_found;
c0008e69:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008e6c:	e9 09 01 00 00       	jmp    c0008f7a <inode_open+0x144>
/work/x86_os_my/fs/inode.c:94
		}
		elem = elem->next;
c0008e71:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0008e74:	8b 40 04             	mov    0x4(%eax),%eax
c0008e77:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/inode.c:88
/* 根据i结点号，获取到相应的inode结构，插入到inode缓存队列，并返回它 */
struct inode* inode_open(struct partition* part, uint32_t inode_no) {
	/* 1.先在已打开inode链表中找inode，此链表作用是提速 */
	struct list_elem* elem = part->open_inodes.head.next;
	struct inode* inode_found;
	while (elem != &part->open_inodes.tail) {
c0008e7a:	8b 45 08             	mov    0x8(%ebp),%eax
c0008e7d:	83 c0 38             	add    $0x38,%eax
c0008e80:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0008e83:	75 c2                	jne    c0008e47 <inode_open+0x11>
/work/x86_os_my/fs/inode.c:100
	}

	
	/* 2.open_inodes链表中找不到，从硬盘上读入此inode并加入到inode缓存链表 */
	struct inode_position inode_pos;	// 记录inode位置的结构
	inode_locate(part, inode_no, &inode_pos);
c0008e85:	83 ec 04             	sub    $0x4,%esp
c0008e88:	8d 45 d8             	lea    -0x28(%ebp),%eax
c0008e8b:	50                   	push   %eax
c0008e8c:	ff 75 0c             	pushl  0xc(%ebp)
c0008e8f:	ff 75 08             	pushl  0x8(%ebp)
c0008e92:	e8 de fd ff ff       	call   c0008c75 <inode_locate>
c0008e97:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:104

	/* 为使通过sys_malloc创建的新inode被所有任务共享，需要将inode置于内核空间
	故临时将cur_pbc->pgdir置为NULL，sys_malloc就会以为是从内核空间分配 */
	struct task_struct* cur = running_thread();
c0008e9a:	e8 3b ae ff ff       	call   c0003cda <running_thread>
c0008e9f:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/inode.c:105
	uint32_t* cur_pagedir_bak = cur->pgdir;
c0008ea2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0008ea5:	8b 40 54             	mov    0x54(%eax),%eax
c0008ea8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/inode.c:106
	cur->pgdir = NULL;
c0008eab:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0008eae:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
/work/x86_os_my/fs/inode.c:107
	inode_found = (struct inode*)sys_malloc(sizeof(struct inode));
c0008eb5:	83 ec 0c             	sub    $0xc,%esp
c0008eb8:	6a 4c                	push   $0x4c
c0008eba:	e8 3d 9f ff ff       	call   c0002dfc <sys_malloc>
c0008ebf:	83 c4 10             	add    $0x10,%esp
c0008ec2:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/inode.c:108
	cur->pgdir = cur_pagedir_bak;	// 恢复pgdir
c0008ec5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0008ec8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0008ecb:	89 50 54             	mov    %edx,0x54(%eax)
/work/x86_os_my/fs/inode.c:111

	char* inode_buf;
	if (inode_pos.two_sec) {	// inode结构跨扇区了
c0008ece:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0008ed1:	85 c0                	test   %eax,%eax
c0008ed3:	74 2d                	je     c0008f02 <inode_open+0xcc>
/work/x86_os_my/fs/inode.c:112
		inode_buf = (char*)sys_malloc(1024);
c0008ed5:	83 ec 0c             	sub    $0xc,%esp
c0008ed8:	68 00 04 00 00       	push   $0x400
c0008edd:	e8 1a 9f ff ff       	call   c0002dfc <sys_malloc>
c0008ee2:	83 c4 10             	add    $0x10,%esp
c0008ee5:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/inode.c:114
		// inode_table在格式化时，写入硬盘是连续写入的，所以可以连续读入2块扇区
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 2);
c0008ee8:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0008eeb:	8b 45 08             	mov    0x8(%ebp),%eax
c0008eee:	8b 40 08             	mov    0x8(%eax),%eax
c0008ef1:	6a 02                	push   $0x2
c0008ef3:	ff 75 f0             	pushl  -0x10(%ebp)
c0008ef6:	52                   	push   %edx
c0008ef7:	50                   	push   %eax
c0008ef8:	e8 38 d2 ff ff       	call   c0006135 <ide_read>
c0008efd:	83 c4 10             	add    $0x10,%esp
c0008f00:	eb 2b                	jmp    c0008f2d <inode_open+0xf7>
/work/x86_os_my/fs/inode.c:116
	} else {
		inode_buf = (char*)sys_malloc(512);
c0008f02:	83 ec 0c             	sub    $0xc,%esp
c0008f05:	68 00 02 00 00       	push   $0x200
c0008f0a:	e8 ed 9e ff ff       	call   c0002dfc <sys_malloc>
c0008f0f:	83 c4 10             	add    $0x10,%esp
c0008f12:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/inode.c:117
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
c0008f15:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0008f18:	8b 45 08             	mov    0x8(%ebp),%eax
c0008f1b:	8b 40 08             	mov    0x8(%eax),%eax
c0008f1e:	6a 01                	push   $0x1
c0008f20:	ff 75 f0             	pushl  -0x10(%ebp)
c0008f23:	52                   	push   %edx
c0008f24:	50                   	push   %eax
c0008f25:	e8 0b d2 ff ff       	call   c0006135 <ide_read>
c0008f2a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:119
	}
	memcpy(inode_found, inode_buf + inode_pos.off_size, sizeof(struct inode));	// inode_buf+inode在扇区中的偏移
c0008f2d:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0008f30:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008f33:	01 d0                	add    %edx,%eax
c0008f35:	83 ec 04             	sub    $0x4,%esp
c0008f38:	6a 4c                	push   $0x4c
c0008f3a:	50                   	push   %eax
c0008f3b:	ff 75 ec             	pushl  -0x14(%ebp)
c0008f3e:	e8 02 aa ff ff       	call   c0003945 <memcpy>
c0008f43:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:123

	
	/* 3.马上要用这个inode，固插入到队首 */
	list_push(&part->open_inodes, &inode_found->inode_tag);
c0008f46:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008f49:	8d 50 44             	lea    0x44(%eax),%edx
c0008f4c:	8b 45 08             	mov    0x8(%ebp),%eax
c0008f4f:	83 c0 30             	add    $0x30,%eax
c0008f52:	83 ec 08             	sub    $0x8,%esp
c0008f55:	52                   	push   %edx
c0008f56:	50                   	push   %eax
c0008f57:	e8 f8 b7 ff ff       	call   c0004754 <list_push>
c0008f5c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:124
	inode_found->i_open_cnts = 1;
c0008f5f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008f62:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/fs/inode.c:126

	sys_free(inode_buf);
c0008f69:	83 ec 0c             	sub    $0xc,%esp
c0008f6c:	ff 75 f0             	pushl  -0x10(%ebp)
c0008f6f:	e8 b5 a4 ff ff       	call   c0003429 <sys_free>
c0008f74:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:127
	return inode_found;
c0008f77:	8b 45 ec             	mov    -0x14(%ebp),%eax
/work/x86_os_my/fs/inode.c:128 (discriminator 1)
}
c0008f7a:	c9                   	leave  
c0008f7b:	c3                   	ret    

c0008f7c <inode_close>:
inode_close():
/work/x86_os_my/fs/inode.c:132

/* 关闭inode或减少inode的打开数 */
//1.从inode队列踢掉 2.释放内核内存池中的这个inode内存
void inode_close(struct inode* inode) {
c0008f7c:	55                   	push   %ebp
c0008f7d:	89 e5                	mov    %esp,%ebp
c0008f7f:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/inode.c:134
	/* 若没有进程再打开此文件,将此inode去掉并释放空间 */
	enum intr_status old_status = intr_disable();
c0008f82:	e8 e6 8a ff ff       	call   c0001a6d <intr_disable>
c0008f87:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/inode.c:135
	if (--inode->i_open_cnts == 0) {
c0008f8a:	8b 45 08             	mov    0x8(%ebp),%eax
c0008f8d:	8b 40 08             	mov    0x8(%eax),%eax
c0008f90:	8d 50 ff             	lea    -0x1(%eax),%edx
c0008f93:	8b 45 08             	mov    0x8(%ebp),%eax
c0008f96:	89 50 08             	mov    %edx,0x8(%eax)
c0008f99:	8b 45 08             	mov    0x8(%ebp),%eax
c0008f9c:	8b 40 08             	mov    0x8(%eax),%eax
c0008f9f:	85 c0                	test   %eax,%eax
c0008fa1:	75 44                	jne    c0008fe7 <inode_close+0x6b>
/work/x86_os_my/fs/inode.c:136
		list_remove(&inode->inode_tag);
c0008fa3:	8b 45 08             	mov    0x8(%ebp),%eax
c0008fa6:	83 c0 44             	add    $0x44,%eax
c0008fa9:	83 ec 0c             	sub    $0xc,%esp
c0008fac:	50                   	push   %eax
c0008fad:	e8 de b7 ff ff       	call   c0004790 <list_remove>
c0008fb2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:139
		/* inode结构在内核空间，释放时要释放到内核内存池。
		pgdir为NULL时，sys_free认为是内核空间 */
		struct task_struct* cur = running_thread();
c0008fb5:	e8 20 ad ff ff       	call   c0003cda <running_thread>
c0008fba:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/inode.c:140
		uint32_t* cur_pagedir_bak = cur->pgdir;	// 进程自己页目录表的虚拟地址，加载到cr3时需转成物理地址
c0008fbd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008fc0:	8b 40 54             	mov    0x54(%eax),%eax
c0008fc3:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/inode.c:141
		cur->pgdir = NULL;
c0008fc6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008fc9:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
/work/x86_os_my/fs/inode.c:142
		sys_free(inode);
c0008fd0:	83 ec 0c             	sub    $0xc,%esp
c0008fd3:	ff 75 08             	pushl  0x8(%ebp)
c0008fd6:	e8 4e a4 ff ff       	call   c0003429 <sys_free>
c0008fdb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:143
		cur->pgdir = cur_pagedir_bak;
c0008fde:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008fe1:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0008fe4:	89 50 54             	mov    %edx,0x54(%eax)
/work/x86_os_my/fs/inode.c:145
	}
	intr_set_status(old_status);
c0008fe7:	83 ec 0c             	sub    $0xc,%esp
c0008fea:	ff 75 f4             	pushl  -0xc(%ebp)
c0008fed:	e8 a4 8a ff ff       	call   c0001a96 <intr_set_status>
c0008ff2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:146
}
c0008ff5:	90                   	nop
c0008ff6:	c9                   	leave  
c0008ff7:	c3                   	ret    

c0008ff8 <inode_delete>:
inode_delete():
/work/x86_os_my/fs/inode.c:149

/* 将硬盘分区part上，inode管理的数据块清空 */
void inode_delete(struct partition* part, uint32_t inode_no, void* io_buf) {
c0008ff8:	55                   	push   %ebp
c0008ff9:	89 e5                	mov    %esp,%ebp
c0008ffb:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/inode.c:150
	ASSERT(inode_no < 4096);
c0008ffe:	81 7d 0c ff 0f 00 00 	cmpl   $0xfff,0xc(%ebp)
c0009005:	76 1c                	jbe    c0009023 <inode_delete+0x2b>
/work/x86_os_my/fs/inode.c:150 (discriminator 1)
c0009007:	68 40 e4 00 c0       	push   $0xc000e440
c000900c:	68 e4 e4 00 c0       	push   $0xc000e4e4
c0009011:	68 96 00 00 00       	push   $0x96
c0009016:	68 50 e4 00 c0       	push   $0xc000e450
c000901b:	e8 31 94 ff ff       	call   c0002451 <panic_spin>
c0009020:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:152
	struct inode_position inode_pos;
	inode_locate(part, inode_no, &inode_pos);	// 获取inode所在的扇区和扇区内的偏移量【这里是 inode_table 的空间】
c0009023:	83 ec 04             	sub    $0x4,%esp
c0009026:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0009029:	50                   	push   %eax
c000902a:	ff 75 0c             	pushl  0xc(%ebp)
c000902d:	ff 75 08             	pushl  0x8(%ebp)
c0009030:	e8 40 fc ff ff       	call   c0008c75 <inode_locate>
c0009035:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:153
	ASSERT(inode_pos.sec_lba <= (part->start_lba + part->sec_cnt));
c0009038:	8b 55 ec             	mov    -0x14(%ebp),%edx
c000903b:	8b 45 08             	mov    0x8(%ebp),%eax
c000903e:	8b 08                	mov    (%eax),%ecx
c0009040:	8b 45 08             	mov    0x8(%ebp),%eax
c0009043:	8b 40 04             	mov    0x4(%eax),%eax
c0009046:	01 c8                	add    %ecx,%eax
c0009048:	39 c2                	cmp    %eax,%edx
c000904a:	76 1c                	jbe    c0009068 <inode_delete+0x70>
/work/x86_os_my/fs/inode.c:153 (discriminator 1)
c000904c:	68 5c e4 00 c0       	push   $0xc000e45c
c0009051:	68 e4 e4 00 c0       	push   $0xc000e4e4
c0009056:	68 99 00 00 00       	push   $0x99
c000905b:	68 50 e4 00 c0       	push   $0xc000e450
c0009060:	e8 ec 93 ff ff       	call   c0002451 <panic_spin>
c0009065:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:155

	char* inode_buf = (char*)io_buf;
c0009068:	8b 45 10             	mov    0x10(%ebp),%eax
c000906b:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/inode.c:156
	if (inode_pos.two_sec) {	// inode跨扇区,读入2个扇区
c000906e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0009071:	85 c0                	test   %eax,%eax
c0009073:	74 4a                	je     c00090bf <inode_delete+0xc7>
/work/x86_os_my/fs/inode.c:158
		/* 将原硬盘上的内容先读出来 */
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 2);
c0009075:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0009078:	8b 45 08             	mov    0x8(%ebp),%eax
c000907b:	8b 40 08             	mov    0x8(%eax),%eax
c000907e:	6a 02                	push   $0x2
c0009080:	ff 75 f4             	pushl  -0xc(%ebp)
c0009083:	52                   	push   %edx
c0009084:	50                   	push   %eax
c0009085:	e8 ab d0 ff ff       	call   c0006135 <ide_read>
c000908a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:160
		/* 将inode_buf清0 */
		memset((inode_buf + inode_pos.off_size), 0, sizeof(struct inode));	//清零 inode_table 中的一个 inode 结构
c000908d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0009090:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009093:	01 d0                	add    %edx,%eax
c0009095:	83 ec 04             	sub    $0x4,%esp
c0009098:	6a 4c                	push   $0x4c
c000909a:	6a 00                	push   $0x0
c000909c:	50                   	push   %eax
c000909d:	e8 51 a8 ff ff       	call   c00038f3 <memset>
c00090a2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:162
		/* 用清0的内存数据覆盖磁盘 */
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 2);
c00090a5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c00090a8:	8b 45 08             	mov    0x8(%ebp),%eax
c00090ab:	8b 40 08             	mov    0x8(%eax),%eax
c00090ae:	6a 02                	push   $0x2
c00090b0:	ff 75 f4             	pushl  -0xc(%ebp)
c00090b3:	52                   	push   %edx
c00090b4:	50                   	push   %eax
c00090b5:	e8 ef d1 ff ff       	call   c00062a9 <ide_write>
c00090ba:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:171
		/* 将inode_buf清0 */
		memset((inode_buf + inode_pos.off_size), 0, sizeof(struct inode));
		/* 用清0的内存数据覆盖磁盘 */
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
	}
}
c00090bd:	eb 48                	jmp    c0009107 <inode_delete+0x10f>
/work/x86_os_my/fs/inode.c:165
		memset((inode_buf + inode_pos.off_size), 0, sizeof(struct inode));	//清零 inode_table 中的一个 inode 结构
		/* 用清0的内存数据覆盖磁盘 */
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 2);
	} else {	// 未跨扇区,只读入1个扇区就好
		/* 将原硬盘上的内容先读出来 */
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
c00090bf:	8b 55 ec             	mov    -0x14(%ebp),%edx
c00090c2:	8b 45 08             	mov    0x8(%ebp),%eax
c00090c5:	8b 40 08             	mov    0x8(%eax),%eax
c00090c8:	6a 01                	push   $0x1
c00090ca:	ff 75 f4             	pushl  -0xc(%ebp)
c00090cd:	52                   	push   %edx
c00090ce:	50                   	push   %eax
c00090cf:	e8 61 d0 ff ff       	call   c0006135 <ide_read>
c00090d4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:167
		/* 将inode_buf清0 */
		memset((inode_buf + inode_pos.off_size), 0, sizeof(struct inode));
c00090d7:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00090da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00090dd:	01 d0                	add    %edx,%eax
c00090df:	83 ec 04             	sub    $0x4,%esp
c00090e2:	6a 4c                	push   $0x4c
c00090e4:	6a 00                	push   $0x0
c00090e6:	50                   	push   %eax
c00090e7:	e8 07 a8 ff ff       	call   c00038f3 <memset>
c00090ec:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:169
		/* 用清0的内存数据覆盖磁盘 */
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
c00090ef:	8b 55 ec             	mov    -0x14(%ebp),%edx
c00090f2:	8b 45 08             	mov    0x8(%ebp),%eax
c00090f5:	8b 40 08             	mov    0x8(%eax),%eax
c00090f8:	6a 01                	push   $0x1
c00090fa:	ff 75 f4             	pushl  -0xc(%ebp)
c00090fd:	52                   	push   %edx
c00090fe:	50                   	push   %eax
c00090ff:	e8 a5 d1 ff ff       	call   c00062a9 <ide_write>
c0009104:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:171
	}
}
c0009107:	90                   	nop
c0009108:	c9                   	leave  
c0009109:	c3                   	ret    

c000910a <inode_release>:
inode_release():
/work/x86_os_my/fs/inode.c:179
（1）inode 位图
（2）inode_table
（3）inode 中 i_sectors[0～11]中的直接块和一级间接索引块表 i_sectors[12]中的间接块
（4）一级间接索引块表本身的扇区地址
 */
void inode_release(struct partition* part, uint32_t inode_no) {
c000910a:	55                   	push   %ebp
c000910b:	89 e5                	mov    %esp,%ebp
c000910d:	57                   	push   %edi
c000910e:	81 ec 44 02 00 00    	sub    $0x244,%esp
/work/x86_os_my/fs/inode.c:180
	struct inode* inode_to_del = inode_open(part, inode_no);
c0009114:	83 ec 08             	sub    $0x8,%esp
c0009117:	ff 75 0c             	pushl  0xc(%ebp)
c000911a:	ff 75 08             	pushl  0x8(%ebp)
c000911d:	e8 14 fd ff ff       	call   c0008e36 <inode_open>
c0009122:	83 c4 10             	add    $0x10,%esp
c0009125:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/inode.c:181
	ASSERT(inode_to_del->i_no == inode_no);
c0009128:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000912b:	8b 00                	mov    (%eax),%eax
c000912d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0009130:	74 1c                	je     c000914e <inode_release+0x44>
/work/x86_os_my/fs/inode.c:181 (discriminator 1)
c0009132:	68 94 e4 00 c0       	push   $0xc000e494
c0009137:	68 f4 e4 00 c0       	push   $0xc000e4f4
c000913c:	68 b5 00 00 00       	push   $0xb5
c0009141:	68 50 e4 00 c0       	push   $0xc000e450
c0009146:	e8 06 93 ff ff       	call   c0002451 <panic_spin>
c000914b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:184

	/* 1 回收inode占用的所有块 */
	uint8_t block_idx = 0, block_cnt = 12;
c000914e:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
c0009152:	c6 45 f6 0c          	movb   $0xc,-0xa(%ebp)
/work/x86_os_my/fs/inode.c:186
	uint32_t block_bitmap_idx;
	uint32_t all_blocks[140] = {0};	  //12个直接块+128个间接块
c0009156:	8d 95 b8 fd ff ff    	lea    -0x248(%ebp),%edx
c000915c:	b8 00 00 00 00       	mov    $0x0,%eax
c0009161:	b9 8c 00 00 00       	mov    $0x8c,%ecx
c0009166:	89 d7                	mov    %edx,%edi
c0009168:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/fs/inode.c:189

	/* a 先将前12个直接块存入all_blocks */
	while (block_idx < 12) {
c000916a:	eb 22                	jmp    c000918e <inode_release+0x84>
/work/x86_os_my/fs/inode.c:190
		all_blocks[block_idx] = inode_to_del->i_sectors[block_idx];
c000916c:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0009170:	0f b6 4d f7          	movzbl -0x9(%ebp),%ecx
c0009174:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0009177:	83 c1 04             	add    $0x4,%ecx
c000917a:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
c000917d:	89 94 85 b8 fd ff ff 	mov    %edx,-0x248(%ebp,%eax,4)
/work/x86_os_my/fs/inode.c:191
		block_idx++;
c0009184:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0009188:	83 c0 01             	add    $0x1,%eax
c000918b:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/inode.c:189
	uint8_t block_idx = 0, block_cnt = 12;
	uint32_t block_bitmap_idx;
	uint32_t all_blocks[140] = {0};	  //12个直接块+128个间接块

	/* a 先将前12个直接块存入all_blocks */
	while (block_idx < 12) {
c000918e:	80 7d f7 0b          	cmpb   $0xb,-0x9(%ebp)
c0009192:	76 d8                	jbe    c000916c <inode_release+0x62>
/work/x86_os_my/fs/inode.c:194
		all_blocks[block_idx] = inode_to_del->i_sectors[block_idx];
		block_idx++;
	}
	/* b 如果一级间接块表存在，将其128个间接块读到all_blocks[12~]，并释放一级间接块表所占的扇区 */
	if (inode_to_del->i_sectors[12] != 0) {
c0009194:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0009197:	8b 40 40             	mov    0x40(%eax),%eax
c000919a:	85 c0                	test   %eax,%eax
c000919c:	0f 84 8b 00 00 00    	je     c000922d <inode_release+0x123>
/work/x86_os_my/fs/inode.c:195
		ide_read(part->my_disk, inode_to_del->i_sectors[12], all_blocks + 12, 1);
c00091a2:	8d 85 b8 fd ff ff    	lea    -0x248(%ebp),%eax
c00091a8:	83 c0 30             	add    $0x30,%eax
c00091ab:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00091ae:	8b 4a 40             	mov    0x40(%edx),%ecx
c00091b1:	8b 55 08             	mov    0x8(%ebp),%edx
c00091b4:	8b 52 08             	mov    0x8(%edx),%edx
c00091b7:	6a 01                	push   $0x1
c00091b9:	50                   	push   %eax
c00091ba:	51                   	push   %ecx
c00091bb:	52                   	push   %edx
c00091bc:	e8 74 cf ff ff       	call   c0006135 <ide_read>
c00091c1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:196
		block_cnt = 140;
c00091c4:	c6 45 f6 8c          	movb   $0x8c,-0xa(%ebp)
/work/x86_os_my/fs/inode.c:199

		/* 回收一级间接块表占用的扇区 */
		block_bitmap_idx = inode_to_del->i_sectors[12] - part->sb->data_start_lba;
c00091c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00091cb:	8b 50 40             	mov    0x40(%eax),%edx
c00091ce:	8b 45 08             	mov    0x8(%ebp),%eax
c00091d1:	8b 40 1c             	mov    0x1c(%eax),%eax
c00091d4:	8b 40 28             	mov    0x28(%eax),%eax
c00091d7:	29 c2                	sub    %eax,%edx
c00091d9:	89 d0                	mov    %edx,%eax
c00091db:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/inode.c:200
		ASSERT(block_bitmap_idx > 0);
c00091de:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c00091e2:	75 1c                	jne    c0009200 <inode_release+0xf6>
/work/x86_os_my/fs/inode.c:200 (discriminator 1)
c00091e4:	68 b3 e4 00 c0       	push   $0xc000e4b3
c00091e9:	68 f4 e4 00 c0       	push   $0xc000e4f4
c00091ee:	68 c8 00 00 00       	push   $0xc8
c00091f3:	68 50 e4 00 c0       	push   $0xc000e450
c00091f8:	e8 54 92 ff ff       	call   c0002451 <panic_spin>
c00091fd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:201
		bitmap_set(&part->block_bitmap, block_bitmap_idx, 0);
c0009200:	8b 45 08             	mov    0x8(%ebp),%eax
c0009203:	83 c0 20             	add    $0x20,%eax
c0009206:	83 ec 04             	sub    $0x4,%esp
c0009209:	6a 00                	push   $0x0
c000920b:	ff 75 ec             	pushl  -0x14(%ebp)
c000920e:	50                   	push   %eax
c000920f:	e8 ab 94 ff ff       	call   c00026bf <bitmap_set>
c0009214:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:202
		bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c0009217:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c000921c:	83 ec 04             	sub    $0x4,%esp
c000921f:	6a 01                	push   $0x1
c0009221:	ff 75 ec             	pushl  -0x14(%ebp)
c0009224:	50                   	push   %eax
c0009225:	e8 ca 02 00 00       	call   c00094f4 <bitmap_sync>
c000922a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:205
	}
	/* c inode所有的块地址已经收集到all_blocks中，下面逐个回收 */
	block_idx = 0;
c000922d:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/fs/inode.c:206
	while (block_idx < block_cnt) {
c0009231:	e9 8a 00 00 00       	jmp    c00092c0 <inode_release+0x1b6>
/work/x86_os_my/fs/inode.c:207
		if (all_blocks[block_idx] != 0) {
c0009236:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000923a:	8b 84 85 b8 fd ff ff 	mov    -0x248(%ebp,%eax,4),%eax
c0009241:	85 c0                	test   %eax,%eax
c0009243:	74 71                	je     c00092b6 <inode_release+0x1ac>
/work/x86_os_my/fs/inode.c:208
			block_bitmap_idx = 0;
c0009245:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/inode.c:209
			block_bitmap_idx = all_blocks[block_idx] - part->sb->data_start_lba;
c000924c:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0009250:	8b 94 85 b8 fd ff ff 	mov    -0x248(%ebp,%eax,4),%edx
c0009257:	8b 45 08             	mov    0x8(%ebp),%eax
c000925a:	8b 40 1c             	mov    0x1c(%eax),%eax
c000925d:	8b 40 28             	mov    0x28(%eax),%eax
c0009260:	29 c2                	sub    %eax,%edx
c0009262:	89 d0                	mov    %edx,%eax
c0009264:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/inode.c:210
			ASSERT(block_bitmap_idx > 0);
c0009267:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c000926b:	75 1c                	jne    c0009289 <inode_release+0x17f>
/work/x86_os_my/fs/inode.c:210 (discriminator 1)
c000926d:	68 b3 e4 00 c0       	push   $0xc000e4b3
c0009272:	68 f4 e4 00 c0       	push   $0xc000e4f4
c0009277:	68 d2 00 00 00       	push   $0xd2
c000927c:	68 50 e4 00 c0       	push   $0xc000e450
c0009281:	e8 cb 91 ff ff       	call   c0002451 <panic_spin>
c0009286:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:211
			bitmap_set(&part->block_bitmap, block_bitmap_idx, 0);
c0009289:	8b 45 08             	mov    0x8(%ebp),%eax
c000928c:	83 c0 20             	add    $0x20,%eax
c000928f:	83 ec 04             	sub    $0x4,%esp
c0009292:	6a 00                	push   $0x0
c0009294:	ff 75 ec             	pushl  -0x14(%ebp)
c0009297:	50                   	push   %eax
c0009298:	e8 22 94 ff ff       	call   c00026bf <bitmap_set>
c000929d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:212
			bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c00092a0:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c00092a5:	83 ec 04             	sub    $0x4,%esp
c00092a8:	6a 01                	push   $0x1
c00092aa:	ff 75 ec             	pushl  -0x14(%ebp)
c00092ad:	50                   	push   %eax
c00092ae:	e8 41 02 00 00       	call   c00094f4 <bitmap_sync>
c00092b3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:214
		}
		block_idx++;
c00092b6:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00092ba:	83 c0 01             	add    $0x1,%eax
c00092bd:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/inode.c:206
		bitmap_set(&part->block_bitmap, block_bitmap_idx, 0);
		bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
	}
	/* c inode所有的块地址已经收集到all_blocks中，下面逐个回收 */
	block_idx = 0;
	while (block_idx < block_cnt) {
c00092c0:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00092c4:	3a 45 f6             	cmp    -0xa(%ebp),%al
c00092c7:	0f 82 69 ff ff ff    	jb     c0009236 <inode_release+0x12c>
/work/x86_os_my/fs/inode.c:218
		}
		block_idx++;
	}

	/*2 回收该inode所占用的inode */
	bitmap_set(&part->inode_bitmap, inode_no, 0);
c00092cd:	8b 45 08             	mov    0x8(%ebp),%eax
c00092d0:	83 c0 28             	add    $0x28,%eax
c00092d3:	83 ec 04             	sub    $0x4,%esp
c00092d6:	6a 00                	push   $0x0
c00092d8:	ff 75 0c             	pushl  0xc(%ebp)
c00092db:	50                   	push   %eax
c00092dc:	e8 de 93 ff ff       	call   c00026bf <bitmap_set>
c00092e1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:219
	bitmap_sync(cur_part, inode_no, INODE_BITMAP);
c00092e4:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c00092e9:	83 ec 04             	sub    $0x4,%esp
c00092ec:	6a 00                	push   $0x0
c00092ee:	ff 75 0c             	pushl  0xc(%ebp)
c00092f1:	50                   	push   %eax
c00092f2:	e8 fd 01 00 00       	call   c00094f4 <bitmap_sync>
c00092f7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:225

	/******     以下inode_delete是调试用的    ******
	 * 此函数会在 inode_table 中将此inode清0，
	 * 但实际上只需要在inode位图中清零相应位即可。
	 * 硬盘上的数据更不需要清0，可以直接覆盖 */
	void* io_buf = sys_malloc(1024);
c00092fa:	83 ec 0c             	sub    $0xc,%esp
c00092fd:	68 00 04 00 00       	push   $0x400
c0009302:	e8 f5 9a ff ff       	call   c0002dfc <sys_malloc>
c0009307:	83 c4 10             	add    $0x10,%esp
c000930a:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/inode.c:226
	inode_delete(part, inode_no, io_buf);
c000930d:	83 ec 04             	sub    $0x4,%esp
c0009310:	ff 75 e8             	pushl  -0x18(%ebp)
c0009313:	ff 75 0c             	pushl  0xc(%ebp)
c0009316:	ff 75 08             	pushl  0x8(%ebp)
c0009319:	e8 da fc ff ff       	call   c0008ff8 <inode_delete>
c000931e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:227
	sys_free(io_buf);
c0009321:	83 ec 0c             	sub    $0xc,%esp
c0009324:	ff 75 e8             	pushl  -0x18(%ebp)
c0009327:	e8 fd a0 ff ff       	call   c0003429 <sys_free>
c000932c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:230
	/***********************************************/

	inode_close(inode_to_del);
c000932f:	83 ec 0c             	sub    $0xc,%esp
c0009332:	ff 75 f0             	pushl  -0x10(%ebp)
c0009335:	e8 42 fc ff ff       	call   c0008f7c <inode_close>
c000933a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:231
}
c000933d:	90                   	nop
c000933e:	8b 7d fc             	mov    -0x4(%ebp),%edi
c0009341:	c9                   	leave  
c0009342:	c3                   	ret    

c0009343 <inode_init>:
inode_init():
/work/x86_os_my/fs/inode.c:234

/* 初始化一个inode结构，inode号是inode_no */
void inode_init(uint32_t inode_no, struct inode* new_inode) {
c0009343:	55                   	push   %ebp
c0009344:	89 e5                	mov    %esp,%ebp
c0009346:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/fs/inode.c:235
	new_inode->i_no = inode_no;
c0009349:	8b 45 0c             	mov    0xc(%ebp),%eax
c000934c:	8b 55 08             	mov    0x8(%ebp),%edx
c000934f:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/fs/inode.c:236
	new_inode->i_size = 0;
c0009351:	8b 45 0c             	mov    0xc(%ebp),%eax
c0009354:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
/work/x86_os_my/fs/inode.c:237
	new_inode->i_open_cnts = 0;
c000935b:	8b 45 0c             	mov    0xc(%ebp),%eax
c000935e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
/work/x86_os_my/fs/inode.c:238
	new_inode->write_deny = false;
c0009365:	8b 45 0c             	mov    0xc(%ebp),%eax
c0009368:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
/work/x86_os_my/fs/inode.c:241

	/* 初始化块索引数组i_sector */
	uint8_t sec_idx = 0;
c000936f:	c6 45 ff 00          	movb   $0x0,-0x1(%ebp)
/work/x86_os_my/fs/inode.c:242
	while (sec_idx < 13) {
c0009373:	eb 1b                	jmp    c0009390 <inode_init+0x4d>
/work/x86_os_my/fs/inode.c:244
		/* i_sectors[12]为一级间接块地址 */
		new_inode->i_sectors[sec_idx] = 0;
c0009375:	0f b6 55 ff          	movzbl -0x1(%ebp),%edx
c0009379:	8b 45 0c             	mov    0xc(%ebp),%eax
c000937c:	83 c2 04             	add    $0x4,%edx
c000937f:	c7 04 90 00 00 00 00 	movl   $0x0,(%eax,%edx,4)
/work/x86_os_my/fs/inode.c:245
		sec_idx++;
c0009386:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
c000938a:	83 c0 01             	add    $0x1,%eax
c000938d:	88 45 ff             	mov    %al,-0x1(%ebp)
/work/x86_os_my/fs/inode.c:242
	new_inode->i_open_cnts = 0;
	new_inode->write_deny = false;

	/* 初始化块索引数组i_sector */
	uint8_t sec_idx = 0;
	while (sec_idx < 13) {
c0009390:	80 7d ff 0c          	cmpb   $0xc,-0x1(%ebp)
c0009394:	76 df                	jbe    c0009375 <inode_init+0x32>
/work/x86_os_my/fs/inode.c:250
		sec_idx++;
	}
	/*为什么不提前分配inode管理的数据块（对我们来说是块=扇区）
	1.不知道文件大小，因此不知道分配多少个扇区合适
	2.文件创建后未必马上会写数据*/
}
c0009396:	90                   	nop
c0009397:	c9                   	leave  
c0009398:	c3                   	ret    

c0009399 <get_free_slot_in_global>:
get_free_slot_in_global():
/work/x86_os_my/fs/file.c:19

/* 文件表 */
struct file file_table[MAX_FILE_OPEN];

/* 从文件表 file_table 中获取一个空闲位,成功返回下标,失败返回-1 */
int32_t get_free_slot_in_global(void) {
c0009399:	55                   	push   %ebp
c000939a:	89 e5                	mov    %esp,%ebp
c000939c:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/file.c:20
	uint32_t fd_idx = 3;
c000939f:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
/work/x86_os_my/fs/file.c:21
	while (fd_idx < MAX_FILE_OPEN) {
c00093a6:	eb 1b                	jmp    c00093c3 <get_free_slot_in_global+0x2a>
/work/x86_os_my/fs/file.c:22
		if (file_table[fd_idx].fd_inode == NULL) {
c00093a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c00093ab:	89 d0                	mov    %edx,%eax
c00093ad:	01 c0                	add    %eax,%eax
c00093af:	01 d0                	add    %edx,%eax
c00093b1:	c1 e0 02             	shl    $0x2,%eax
c00093b4:	05 28 30 01 c0       	add    $0xc0013028,%eax
c00093b9:	8b 00                	mov    (%eax),%eax
c00093bb:	85 c0                	test   %eax,%eax
c00093bd:	74 0c                	je     c00093cb <get_free_slot_in_global+0x32>
/work/x86_os_my/fs/file.c:25
			break;
		}
		fd_idx++;
c00093bf:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/file.c:21
struct file file_table[MAX_FILE_OPEN];

/* 从文件表 file_table 中获取一个空闲位,成功返回下标,失败返回-1 */
int32_t get_free_slot_in_global(void) {
	uint32_t fd_idx = 3;
	while (fd_idx < MAX_FILE_OPEN) {
c00093c3:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c00093c7:	76 df                	jbe    c00093a8 <get_free_slot_in_global+0xf>
c00093c9:	eb 01                	jmp    c00093cc <get_free_slot_in_global+0x33>
/work/x86_os_my/fs/file.c:23
		if (file_table[fd_idx].fd_inode == NULL) {
			break;
c00093cb:	90                   	nop
/work/x86_os_my/fs/file.c:27
		}
		fd_idx++;
	}
	if (fd_idx == MAX_FILE_OPEN) {
c00093cc:	83 7d f4 20          	cmpl   $0x20,-0xc(%ebp)
c00093d0:	75 17                	jne    c00093e9 <get_free_slot_in_global+0x50>
/work/x86_os_my/fs/file.c:28
		printk("exceed max open files\n");
c00093d2:	83 ec 0c             	sub    $0xc,%esp
c00093d5:	68 04 e5 00 c0       	push   $0xc000e504
c00093da:	e8 cf d7 ff ff       	call   c0006bae <printk>
c00093df:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:29
		return -1;
c00093e2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00093e7:	eb 03                	jmp    c00093ec <get_free_slot_in_global+0x53>
/work/x86_os_my/fs/file.c:31
	}
	return fd_idx;
c00093e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/file.c:32
}
c00093ec:	c9                   	leave  
c00093ed:	c3                   	ret    

c00093ee <pcb_fd_install>:
pcb_fd_install():
/work/x86_os_my/fs/file.c:36

/* 将 file_table 的下标，安装到，线程PCB中文件描述符数组 fd_table
 * 成功返回 fd_table 的下标（即文件描述符）,失败返回-1 */
int32_t pcb_fd_install(int32_t globa_fd_idx) {
c00093ee:	55                   	push   %ebp
c00093ef:	89 e5                	mov    %esp,%ebp
c00093f1:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/file.c:37
	struct task_struct* cur = running_thread();
c00093f4:	e8 e1 a8 ff ff       	call   c0003cda <running_thread>
c00093f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:38
	uint8_t local_fd_idx = 3;	// 跨过stdin,stdout,stderr
c00093fc:	c6 45 f7 03          	movb   $0x3,-0x9(%ebp)
/work/x86_os_my/fs/file.c:39
	while (local_fd_idx < MAX_FILES_OPEN_PER_PROC) {
c0009400:	eb 30                	jmp    c0009432 <pcb_fd_install+0x44>
/work/x86_os_my/fs/file.c:40
		if (cur->fd_table[local_fd_idx] == -1) {	// -1表示free_slot,可用
c0009402:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c0009406:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0009409:	83 c2 08             	add    $0x8,%edx
c000940c:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
c0009410:	83 f8 ff             	cmp    $0xffffffff,%eax
c0009413:	75 13                	jne    c0009428 <pcb_fd_install+0x3a>
/work/x86_os_my/fs/file.c:41
			cur->fd_table[local_fd_idx] = globa_fd_idx;
c0009415:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c0009419:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000941c:	8d 4a 08             	lea    0x8(%edx),%ecx
c000941f:	8b 55 08             	mov    0x8(%ebp),%edx
c0009422:	89 54 88 04          	mov    %edx,0x4(%eax,%ecx,4)
/work/x86_os_my/fs/file.c:42
			break;
c0009426:	eb 10                	jmp    c0009438 <pcb_fd_install+0x4a>
/work/x86_os_my/fs/file.c:44
		}
		local_fd_idx++;
c0009428:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000942c:	83 c0 01             	add    $0x1,%eax
c000942f:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/file.c:39
/* 将 file_table 的下标，安装到，线程PCB中文件描述符数组 fd_table
 * 成功返回 fd_table 的下标（即文件描述符）,失败返回-1 */
int32_t pcb_fd_install(int32_t globa_fd_idx) {
	struct task_struct* cur = running_thread();
	uint8_t local_fd_idx = 3;	// 跨过stdin,stdout,stderr
	while (local_fd_idx < MAX_FILES_OPEN_PER_PROC) {
c0009432:	80 7d f7 07          	cmpb   $0x7,-0x9(%ebp)
c0009436:	76 ca                	jbe    c0009402 <pcb_fd_install+0x14>
/work/x86_os_my/fs/file.c:46
			cur->fd_table[local_fd_idx] = globa_fd_idx;
			break;
		}
		local_fd_idx++;
	}
	if (local_fd_idx == MAX_FILES_OPEN_PER_PROC) {
c0009438:	80 7d f7 08          	cmpb   $0x8,-0x9(%ebp)
c000943c:	75 17                	jne    c0009455 <pcb_fd_install+0x67>
/work/x86_os_my/fs/file.c:47
		printk("exceed max open files_per_proc\n");
c000943e:	83 ec 0c             	sub    $0xc,%esp
c0009441:	68 1c e5 00 c0       	push   $0xc000e51c
c0009446:	e8 63 d7 ff ff       	call   c0006bae <printk>
c000944b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:48
		return -1;
c000944e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009453:	eb 04                	jmp    c0009459 <pcb_fd_install+0x6b>
/work/x86_os_my/fs/file.c:50
	}
	return local_fd_idx;
c0009455:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
/work/x86_os_my/fs/file.c:51
}
c0009459:	c9                   	leave  
c000945a:	c3                   	ret    

c000945b <inode_bitmap_alloc>:
inode_bitmap_alloc():
/work/x86_os_my/fs/file.c:54

/* 从分区的inode位图中，分配一个i结点，返回"inode号" */
int32_t inode_bitmap_alloc(struct partition* part) {
c000945b:	55                   	push   %ebp
c000945c:	89 e5                	mov    %esp,%ebp
c000945e:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/file.c:55
	int32_t bit_idx = bitmap_scan(&part->inode_bitmap, 1);
c0009461:	8b 45 08             	mov    0x8(%ebp),%eax
c0009464:	83 c0 28             	add    $0x28,%eax
c0009467:	83 ec 08             	sub    $0x8,%esp
c000946a:	6a 01                	push   $0x1
c000946c:	50                   	push   %eax
c000946d:	e8 18 91 ff ff       	call   c000258a <bitmap_scan>
c0009472:	83 c4 10             	add    $0x10,%esp
c0009475:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:56
	if (bit_idx == -1) {
c0009478:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c000947c:	75 07                	jne    c0009485 <inode_bitmap_alloc+0x2a>
/work/x86_os_my/fs/file.c:57
		return -1;
c000947e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009483:	eb 1b                	jmp    c00094a0 <inode_bitmap_alloc+0x45>
/work/x86_os_my/fs/file.c:59
	}
	bitmap_set(&part->inode_bitmap, bit_idx, 1);
c0009485:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009488:	8b 55 08             	mov    0x8(%ebp),%edx
c000948b:	83 c2 28             	add    $0x28,%edx
c000948e:	83 ec 04             	sub    $0x4,%esp
c0009491:	6a 01                	push   $0x1
c0009493:	50                   	push   %eax
c0009494:	52                   	push   %edx
c0009495:	e8 25 92 ff ff       	call   c00026bf <bitmap_set>
c000949a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:60
	return bit_idx;
c000949d:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/file.c:61
}
c00094a0:	c9                   	leave  
c00094a1:	c3                   	ret    

c00094a2 <block_bitmap_alloc>:
block_bitmap_alloc():
/work/x86_os_my/fs/file.c:64
   
/* 从分区的block位图中，分配1个扇区，返回"扇区地址" 【操作的是 空闲块区域 】*/
int32_t block_bitmap_alloc(struct partition* part) {
c00094a2:	55                   	push   %ebp
c00094a3:	89 e5                	mov    %esp,%ebp
c00094a5:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/file.c:65
	int32_t bit_idx = bitmap_scan(&part->block_bitmap, 1);
c00094a8:	8b 45 08             	mov    0x8(%ebp),%eax
c00094ab:	83 c0 20             	add    $0x20,%eax
c00094ae:	83 ec 08             	sub    $0x8,%esp
c00094b1:	6a 01                	push   $0x1
c00094b3:	50                   	push   %eax
c00094b4:	e8 d1 90 ff ff       	call   c000258a <bitmap_scan>
c00094b9:	83 c4 10             	add    $0x10,%esp
c00094bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:66
	if (bit_idx == -1) {
c00094bf:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c00094c3:	75 07                	jne    c00094cc <block_bitmap_alloc+0x2a>
/work/x86_os_my/fs/file.c:67
		return -1;
c00094c5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00094ca:	eb 26                	jmp    c00094f2 <block_bitmap_alloc+0x50>
/work/x86_os_my/fs/file.c:69
	}
	bitmap_set(&part->block_bitmap, bit_idx, 1);
c00094cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00094cf:	8b 55 08             	mov    0x8(%ebp),%edx
c00094d2:	83 c2 20             	add    $0x20,%edx
c00094d5:	83 ec 04             	sub    $0x4,%esp
c00094d8:	6a 01                	push   $0x1
c00094da:	50                   	push   %eax
c00094db:	52                   	push   %edx
c00094dc:	e8 de 91 ff ff       	call   c00026bf <bitmap_set>
c00094e1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:71
	/* 和inode_bitmap_malloc不同,此处返回的不是位图索引,而是具体可用的扇区地址 */
	return (part->sb->data_start_lba + bit_idx);
c00094e4:	8b 45 08             	mov    0x8(%ebp),%eax
c00094e7:	8b 40 1c             	mov    0x1c(%eax),%eax
c00094ea:	8b 50 28             	mov    0x28(%eax),%edx
c00094ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00094f0:	01 d0                	add    %edx,%eax
/work/x86_os_my/fs/file.c:72
} 
c00094f2:	c9                   	leave  
c00094f3:	c3                   	ret    

c00094f4 <bitmap_sync>:
bitmap_sync():
/work/x86_os_my/fs/file.c:76

/* 将内存中bitmap第bit_idx位所在的那个512字节，同步到硬盘中bitmap第bit_idx位所在的扇区 */
// 硬盘以扇区为读写单位
void bitmap_sync(struct partition* part, uint32_t bit_idx, uint8_t btmp_type) {
c00094f4:	55                   	push   %ebp
c00094f5:	89 e5                	mov    %esp,%ebp
c00094f7:	83 ec 28             	sub    $0x28,%esp
c00094fa:	8b 45 10             	mov    0x10(%ebp),%eax
c00094fd:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/fs/file.c:77
	uint32_t off_sec = bit_idx / 4096;			// dst(硬盘中): bit_idx 相对于位图起始lba，在后边的第几个扇区(512*8=4096)
c0009500:	8b 45 0c             	mov    0xc(%ebp),%eax
c0009503:	c1 e8 0c             	shr    $0xc,%eax
c0009506:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/file.c:78
	uint32_t off_size = off_sec * BLOCK_SIZE;	// src(内存中): bit_idx 相对于位图数组bits，以512字节为单位，在后边的第几个单位处
c0009509:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000950c:	c1 e0 09             	shl    $0x9,%eax
c000950f:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/file.c:84
												// off_size是，第 bit_idx位所在位图中以 512 字节为单位的起始地址。BLOCK_SIZE=512
	uint32_t sec_lba;
	uint8_t* bitmap_off;

	/* 需要被同步到硬盘的位图只有inode_bitmap和block_bitmap */
	switch (btmp_type) {
c0009512:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0009516:	85 c0                	test   %eax,%eax
c0009518:	74 07                	je     c0009521 <bitmap_sync+0x2d>
c000951a:	83 f8 01             	cmp    $0x1,%eax
c000951d:	74 23                	je     c0009542 <bitmap_sync+0x4e>
c000951f:	eb 41                	jmp    c0009562 <bitmap_sync+0x6e>
/work/x86_os_my/fs/file.c:86
		case INODE_BITMAP:
		sec_lba = part->sb->inode_bitmap_lba + off_sec;
c0009521:	8b 45 08             	mov    0x8(%ebp),%eax
c0009524:	8b 40 1c             	mov    0x1c(%eax),%eax
c0009527:	8b 50 18             	mov    0x18(%eax),%edx
c000952a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000952d:	01 d0                	add    %edx,%eax
c000952f:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:87
		bitmap_off = part->inode_bitmap.bits + off_size;
c0009532:	8b 45 08             	mov    0x8(%ebp),%eax
c0009535:	8b 50 2c             	mov    0x2c(%eax),%edx
c0009538:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000953b:	01 d0                	add    %edx,%eax
c000953d:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:88
		break;
c0009540:	eb 20                	jmp    c0009562 <bitmap_sync+0x6e>
/work/x86_os_my/fs/file.c:91

		case BLOCK_BITMAP: 
		sec_lba = part->sb->block_bitmap_lba + off_sec;
c0009542:	8b 45 08             	mov    0x8(%ebp),%eax
c0009545:	8b 40 1c             	mov    0x1c(%eax),%eax
c0009548:	8b 50 10             	mov    0x10(%eax),%edx
c000954b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000954e:	01 d0                	add    %edx,%eax
c0009550:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:92
		bitmap_off = part->block_bitmap.bits + off_size;
c0009553:	8b 45 08             	mov    0x8(%ebp),%eax
c0009556:	8b 50 24             	mov    0x24(%eax),%edx
c0009559:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000955c:	01 d0                	add    %edx,%eax
c000955e:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:93
		break;
c0009561:	90                   	nop
/work/x86_os_my/fs/file.c:95
	}
	ide_write(part->my_disk, sec_lba, bitmap_off, 1);	// 将bitmap_off中1个扇区的数据写入硬盘sec_lba处
c0009562:	8b 45 08             	mov    0x8(%ebp),%eax
c0009565:	8b 40 08             	mov    0x8(%eax),%eax
c0009568:	6a 01                	push   $0x1
c000956a:	ff 75 f0             	pushl  -0x10(%ebp)
c000956d:	ff 75 f4             	pushl  -0xc(%ebp)
c0009570:	50                   	push   %eax
c0009571:	e8 33 cd ff ff       	call   c00062a9 <ide_write>
c0009576:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:96
}
c0009579:	90                   	nop
c000957a:	c9                   	leave  
c000957b:	c3                   	ret    

c000957c <file_create>:
file_create():
/work/x86_os_my/fs/file.c:114
此新增加的文件对应的目录项，需要写入该目录的 inode->i_sectors[]中的某个扇区，
原有扇区可能已满，所以有可能要申请新扇区来存储目录项。【sync_dir_entry】
4. 若其中某步操作失败，需要回滚之前已成功的操作。
5. inode_bitmap、 block_bitmap、新文件的 inode 及文件所在目录的 inode，这些位于内存中已经被改变的数据要同步到硬盘。
*/
int32_t file_create(struct dir* parent_dir, char* filename, uint8_t flag) {
c000957c:	55                   	push   %ebp
c000957d:	89 e5                	mov    %esp,%ebp
c000957f:	83 ec 48             	sub    $0x48,%esp
c0009582:	8b 45 10             	mov    0x10(%ebp),%eax
c0009585:	88 45 c4             	mov    %al,-0x3c(%ebp)
/work/x86_os_my/fs/file.c:116
	/* 后续操作的公共缓冲区 */
	void* io_buf = sys_malloc(1024);	//跨扇区的数据，会操作2个扇区
c0009588:	83 ec 0c             	sub    $0xc,%esp
c000958b:	68 00 04 00 00       	push   $0x400
c0009590:	e8 67 98 ff ff       	call   c0002dfc <sys_malloc>
c0009595:	83 c4 10             	add    $0x10,%esp
c0009598:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/file.c:117
	if (io_buf == NULL) {
c000959b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c000959f:	75 1a                	jne    c00095bb <file_create+0x3f>
/work/x86_os_my/fs/file.c:118
		printk("in file_creat: sys_malloc for io_buf failed\n");
c00095a1:	83 ec 0c             	sub    $0xc,%esp
c00095a4:	68 3c e5 00 c0       	push   $0xc000e53c
c00095a9:	e8 00 d6 ff ff       	call   c0006bae <printk>
c00095ae:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:119
		return -1;
c00095b1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00095b6:	e9 81 02 00 00       	jmp    c000983c <file_create+0x2c0>
/work/x86_os_my/fs/file.c:122
	}

	uint8_t rollback_step = 0;	// 用于操作失败时回滚各资源状态
c00095bb:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/fs/file.c:125

	/* 1.为新文件从分区inode位图中，分配inode号 */
	int32_t inode_no = inode_bitmap_alloc(cur_part); 
c00095bf:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c00095c4:	83 ec 0c             	sub    $0xc,%esp
c00095c7:	50                   	push   %eax
c00095c8:	e8 8e fe ff ff       	call   c000945b <inode_bitmap_alloc>
c00095cd:	83 c4 10             	add    $0x10,%esp
c00095d0:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/file.c:126
	if (inode_no == -1) {
c00095d3:	83 7d e8 ff          	cmpl   $0xffffffff,-0x18(%ebp)
c00095d7:	75 1a                	jne    c00095f3 <file_create+0x77>
/work/x86_os_my/fs/file.c:127
		printk("in file_creat: allocate inode failed\n");
c00095d9:	83 ec 0c             	sub    $0xc,%esp
c00095dc:	68 6c e5 00 c0       	push   $0xc000e56c
c00095e1:	e8 c8 d5 ff ff       	call   c0006bae <printk>
c00095e6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:128
		return -1;
c00095e9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00095ee:	e9 49 02 00 00       	jmp    c000983c <file_create+0x2c0>
/work/x86_os_my/fs/file.c:133
	}

	/* 2.堆中分配inode节点，不可以是栈中的局部变量！
	 * 因为 file_table 中的 fd_inode 指针要指向它. */
	struct inode* new_file_inode = (struct inode*)sys_malloc(sizeof(struct inode)); 
c00095f3:	83 ec 0c             	sub    $0xc,%esp
c00095f6:	6a 4c                	push   $0x4c
c00095f8:	e8 ff 97 ff ff       	call   c0002dfc <sys_malloc>
c00095fd:	83 c4 10             	add    $0x10,%esp
c0009600:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/file.c:134
	if (new_file_inode == NULL) {
c0009603:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0009607:	75 19                	jne    c0009622 <file_create+0xa6>
/work/x86_os_my/fs/file.c:135
		printk("file_create: sys_malloc for inode failded\n");
c0009609:	83 ec 0c             	sub    $0xc,%esp
c000960c:	68 94 e5 00 c0       	push   $0xc000e594
c0009611:	e8 98 d5 ff ff       	call   c0006bae <printk>
c0009616:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:136
		rollback_step = 1;
c0009619:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)
/work/x86_os_my/fs/file.c:137
		goto rollback;
c000961d:	e9 a7 01 00 00       	jmp    c00097c9 <file_create+0x24d>
/work/x86_os_my/fs/file.c:139
	}
	inode_init(inode_no, new_file_inode);	    // 初始化inode
c0009622:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0009625:	83 ec 08             	sub    $0x8,%esp
c0009628:	ff 75 e4             	pushl  -0x1c(%ebp)
c000962b:	50                   	push   %eax
c000962c:	e8 12 fd ff ff       	call   c0009343 <inode_init>
c0009631:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:142

	/* 3.申请一个file_table数组的下标 */
	int fd_idx = get_free_slot_in_global();
c0009634:	e8 60 fd ff ff       	call   c0009399 <get_free_slot_in_global>
c0009639:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:143
	if (fd_idx == -1) {
c000963c:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c0009640:	75 19                	jne    c000965b <file_create+0xdf>
/work/x86_os_my/fs/file.c:144
		printk("exceed max open files\n");
c0009642:	83 ec 0c             	sub    $0xc,%esp
c0009645:	68 04 e5 00 c0       	push   $0xc000e504
c000964a:	e8 5f d5 ff ff       	call   c0006bae <printk>
c000964f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:145
		rollback_step = 2;
c0009652:	c6 45 f7 02          	movb   $0x2,-0x9(%ebp)
/work/x86_os_my/fs/file.c:146
		goto rollback;
c0009656:	e9 6e 01 00 00       	jmp    c00097c9 <file_create+0x24d>
/work/x86_os_my/fs/file.c:150
	}

	// 4.填充文件表中的文件结构
	file_table[fd_idx].fd_inode = new_file_inode;
c000965b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000965e:	89 d0                	mov    %edx,%eax
c0009660:	01 c0                	add    %eax,%eax
c0009662:	01 d0                	add    %edx,%eax
c0009664:	c1 e0 02             	shl    $0x2,%eax
c0009667:	8d 90 28 30 01 c0    	lea    -0x3ffecfd8(%eax),%edx
c000966d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0009670:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/file.c:151
	file_table[fd_idx].fd_pos = 0;
c0009672:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0009675:	89 d0                	mov    %edx,%eax
c0009677:	01 c0                	add    %eax,%eax
c0009679:	01 d0                	add    %edx,%eax
c000967b:	c1 e0 02             	shl    $0x2,%eax
c000967e:	05 20 30 01 c0       	add    $0xc0013020,%eax
c0009683:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/fs/file.c:152
	file_table[fd_idx].fd_flag = flag;
c0009689:	0f b6 4d c4          	movzbl -0x3c(%ebp),%ecx
c000968d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0009690:	89 d0                	mov    %edx,%eax
c0009692:	01 c0                	add    %eax,%eax
c0009694:	01 d0                	add    %edx,%eax
c0009696:	c1 e0 02             	shl    $0x2,%eax
c0009699:	05 24 30 01 c0       	add    $0xc0013024,%eax
c000969e:	89 08                	mov    %ecx,(%eax)
/work/x86_os_my/fs/file.c:153
	file_table[fd_idx].fd_inode->write_deny = false;
c00096a0:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00096a3:	89 d0                	mov    %edx,%eax
c00096a5:	01 c0                	add    %eax,%eax
c00096a7:	01 d0                	add    %edx,%eax
c00096a9:	c1 e0 02             	shl    $0x2,%eax
c00096ac:	05 28 30 01 c0       	add    $0xc0013028,%eax
c00096b1:	8b 00                	mov    (%eax),%eax
c00096b3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
/work/x86_os_my/fs/file.c:156

	struct dir_entry new_dir_entry;
	memset(&new_dir_entry, 0, sizeof(struct dir_entry));
c00096ba:	83 ec 04             	sub    $0x4,%esp
c00096bd:	6a 18                	push   $0x18
c00096bf:	6a 00                	push   $0x0
c00096c1:	8d 45 cc             	lea    -0x34(%ebp),%eax
c00096c4:	50                   	push   %eax
c00096c5:	e8 29 a2 ff ff       	call   c00038f3 <memset>
c00096ca:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:159

	// create_dir_entry在内存中初始化目录项p_de，只是内存操作不会返回失败
	create_dir_entry(filename, inode_no, FT_REGULAR, &new_dir_entry);
c00096cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00096d0:	8d 55 cc             	lea    -0x34(%ebp),%edx
c00096d3:	52                   	push   %edx
c00096d4:	6a 01                	push   $0x1
c00096d6:	50                   	push   %eax
c00096d7:	ff 75 0c             	pushl  0xc(%ebp)
c00096da:	e8 73 10 00 00       	call   c000a752 <create_dir_entry>
c00096df:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:164


	/* 同步内存数据到硬盘 */
	/* a 在目录parent_dir下安装目录项new_dir_entry, 写入硬盘后返回true, 否则false【dir.c】 */
	if (!sync_dir_entry(parent_dir, &new_dir_entry, io_buf)) {
c00096e2:	83 ec 04             	sub    $0x4,%esp
c00096e5:	ff 75 ec             	pushl  -0x14(%ebp)
c00096e8:	8d 45 cc             	lea    -0x34(%ebp),%eax
c00096eb:	50                   	push   %eax
c00096ec:	ff 75 08             	pushl  0x8(%ebp)
c00096ef:	e8 cf 10 00 00       	call   c000a7c3 <sync_dir_entry>
c00096f4:	83 c4 10             	add    $0x10,%esp
c00096f7:	85 c0                	test   %eax,%eax
c00096f9:	75 19                	jne    c0009714 <file_create+0x198>
/work/x86_os_my/fs/file.c:165
		printk("sync dir_entry to disk failed\n");
c00096fb:	83 ec 0c             	sub    $0xc,%esp
c00096fe:	68 c0 e5 00 c0       	push   $0xc000e5c0
c0009703:	e8 a6 d4 ff ff       	call   c0006bae <printk>
c0009708:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:166
		rollback_step = 3;
c000970b:	c6 45 f7 03          	movb   $0x3,-0x9(%ebp)
/work/x86_os_my/fs/file.c:167
		goto rollback;
c000970f:	e9 b5 00 00 00       	jmp    c00097c9 <file_create+0x24d>
/work/x86_os_my/fs/file.c:171
	}

	/* b sync_dir_entry 会改变父目录 inode 中的信息，因此，将父目录inode的内容同步到硬盘【inode.c】 */
	memset(io_buf, 0, 1024);
c0009714:	83 ec 04             	sub    $0x4,%esp
c0009717:	68 00 04 00 00       	push   $0x400
c000971c:	6a 00                	push   $0x0
c000971e:	ff 75 ec             	pushl  -0x14(%ebp)
c0009721:	e8 cd a1 ff ff       	call   c00038f3 <memset>
c0009726:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:172
	inode_sync(cur_part, parent_dir->inode, io_buf);
c0009729:	8b 45 08             	mov    0x8(%ebp),%eax
c000972c:	8b 10                	mov    (%eax),%edx
c000972e:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0009733:	83 ec 04             	sub    $0x4,%esp
c0009736:	ff 75 ec             	pushl  -0x14(%ebp)
c0009739:	52                   	push   %edx
c000973a:	50                   	push   %eax
c000973b:	e8 cf f5 ff ff       	call   c0008d0f <inode_sync>
c0009740:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:175

	/* c 将新创建文件的inode内容同步到硬盘 */
	memset(io_buf, 0, 1024);
c0009743:	83 ec 04             	sub    $0x4,%esp
c0009746:	68 00 04 00 00       	push   $0x400
c000974b:	6a 00                	push   $0x0
c000974d:	ff 75 ec             	pushl  -0x14(%ebp)
c0009750:	e8 9e a1 ff ff       	call   c00038f3 <memset>
c0009755:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:176
	inode_sync(cur_part, new_file_inode, io_buf);
c0009758:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c000975d:	83 ec 04             	sub    $0x4,%esp
c0009760:	ff 75 ec             	pushl  -0x14(%ebp)
c0009763:	ff 75 e4             	pushl  -0x1c(%ebp)
c0009766:	50                   	push   %eax
c0009767:	e8 a3 f5 ff ff       	call   c0008d0f <inode_sync>
c000976c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:179

	/* d 将inode_bitmap位图同步到硬盘【file.c】 */
	bitmap_sync(cur_part, inode_no, INODE_BITMAP);
c000976f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0009772:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0009777:	83 ec 04             	sub    $0x4,%esp
c000977a:	6a 00                	push   $0x0
c000977c:	52                   	push   %edx
c000977d:	50                   	push   %eax
c000977e:	e8 71 fd ff ff       	call   c00094f4 <bitmap_sync>
c0009783:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:182

	/* e 将创建的文件i结点添加到open_inodes链表 */
	list_push(&cur_part->open_inodes, &new_file_inode->inode_tag);
c0009786:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0009789:	8d 50 44             	lea    0x44(%eax),%edx
c000978c:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0009791:	83 c0 30             	add    $0x30,%eax
c0009794:	83 ec 08             	sub    $0x8,%esp
c0009797:	52                   	push   %edx
c0009798:	50                   	push   %eax
c0009799:	e8 b6 af ff ff       	call   c0004754 <list_push>
c000979e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:183
	new_file_inode->i_open_cnts = 1;
c00097a1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00097a4:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/fs/file.c:186


	sys_free(io_buf);
c00097ab:	83 ec 0c             	sub    $0xc,%esp
c00097ae:	ff 75 ec             	pushl  -0x14(%ebp)
c00097b1:	e8 73 9c ff ff       	call   c0003429 <sys_free>
c00097b6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:187
	return pcb_fd_install(fd_idx);	// 将 file_table 的下标，安装到，线程PCB中文件描述符数组 fd_table【file.c】
c00097b9:	83 ec 0c             	sub    $0xc,%esp
c00097bc:	ff 75 f0             	pushl  -0x10(%ebp)
c00097bf:	e8 2a fc ff ff       	call   c00093ee <pcb_fd_install>
c00097c4:	83 c4 10             	add    $0x10,%esp
c00097c7:	eb 73                	jmp    c000983c <file_create+0x2c0>
/work/x86_os_my/fs/file.c:191


rollback:
	switch (rollback_step) {
c00097c9:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00097cd:	83 f8 02             	cmp    $0x2,%eax
c00097d0:	74 2d                	je     c00097ff <file_create+0x283>
c00097d2:	83 f8 03             	cmp    $0x3,%eax
c00097d5:	74 07                	je     c00097de <file_create+0x262>
c00097d7:	83 f8 01             	cmp    $0x1,%eax
c00097da:	74 31                	je     c000980d <file_create+0x291>
c00097dc:	eb 4b                	jmp    c0009829 <file_create+0x2ad>
/work/x86_os_my/fs/file.c:194
		case 3:
		/* file_table 相应位清空 */
		memset(&file_table[fd_idx], 0, sizeof(struct file)); 
c00097de:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00097e1:	89 d0                	mov    %edx,%eax
c00097e3:	01 c0                	add    %eax,%eax
c00097e5:	01 d0                	add    %edx,%eax
c00097e7:	c1 e0 02             	shl    $0x2,%eax
c00097ea:	05 20 30 01 c0       	add    $0xc0013020,%eax
c00097ef:	83 ec 04             	sub    $0x4,%esp
c00097f2:	6a 0c                	push   $0xc
c00097f4:	6a 00                	push   $0x0
c00097f6:	50                   	push   %eax
c00097f7:	e8 f7 a0 ff ff       	call   c00038f3 <memset>
c00097fc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:196
		case 2:
		sys_free(new_file_inode);
c00097ff:	83 ec 0c             	sub    $0xc,%esp
c0009802:	ff 75 e4             	pushl  -0x1c(%ebp)
c0009805:	e8 1f 9c ff ff       	call   c0003429 <sys_free>
c000980a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:199
		case 1:
		/* inode位图 恢复 */
		bitmap_set(&cur_part->inode_bitmap, inode_no, 0);
c000980d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0009810:	8b 15 10 30 01 c0    	mov    0xc0013010,%edx
c0009816:	83 c2 28             	add    $0x28,%edx
c0009819:	83 ec 04             	sub    $0x4,%esp
c000981c:	6a 00                	push   $0x0
c000981e:	50                   	push   %eax
c000981f:	52                   	push   %edx
c0009820:	e8 9a 8e ff ff       	call   c00026bf <bitmap_set>
c0009825:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:200
		break;
c0009828:	90                   	nop
/work/x86_os_my/fs/file.c:202
	}
	sys_free(io_buf);
c0009829:	83 ec 0c             	sub    $0xc,%esp
c000982c:	ff 75 ec             	pushl  -0x14(%ebp)
c000982f:	e8 f5 9b ff ff       	call   c0003429 <sys_free>
c0009834:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:203
	return -1;
c0009837:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
/work/x86_os_my/fs/file.c:204 (discriminator 1)
}
c000983c:	c9                   	leave  
c000983d:	c3                   	ret    

c000983e <file_open>:
file_open():
/work/x86_os_my/fs/file.c:207

/* 打开编号为inode_no的inode对应的文件,若成功则返回文件描述符,否则返回-1 */
int32_t file_open(uint32_t inode_no, uint8_t flag) {
c000983e:	55                   	push   %ebp
c000983f:	89 e5                	mov    %esp,%ebp
c0009841:	83 ec 28             	sub    $0x28,%esp
c0009844:	8b 45 0c             	mov    0xc(%ebp),%eax
c0009847:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/fs/file.c:208
	int fd_idx = get_free_slot_in_global();
c000984a:	e8 4a fb ff ff       	call   c0009399 <get_free_slot_in_global>
c000984f:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:209
	if (fd_idx == -1) {
c0009852:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c0009856:	75 1a                	jne    c0009872 <file_open+0x34>
/work/x86_os_my/fs/file.c:210
		printk("exceed max open files\n");
c0009858:	83 ec 0c             	sub    $0xc,%esp
c000985b:	68 04 e5 00 c0       	push   $0xc000e504
c0009860:	e8 49 d3 ff ff       	call   c0006bae <printk>
c0009865:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:211
		return -1;
c0009868:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000986d:	e9 e3 00 00 00       	jmp    c0009955 <file_open+0x117>
/work/x86_os_my/fs/file.c:213
	}
	file_table[fd_idx].fd_inode = inode_open(cur_part, inode_no);
c0009872:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0009877:	83 ec 08             	sub    $0x8,%esp
c000987a:	ff 75 08             	pushl  0x8(%ebp)
c000987d:	50                   	push   %eax
c000987e:	e8 b3 f5 ff ff       	call   c0008e36 <inode_open>
c0009883:	83 c4 10             	add    $0x10,%esp
c0009886:	89 c1                	mov    %eax,%ecx
c0009888:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000988b:	89 d0                	mov    %edx,%eax
c000988d:	01 c0                	add    %eax,%eax
c000988f:	01 d0                	add    %edx,%eax
c0009891:	c1 e0 02             	shl    $0x2,%eax
c0009894:	05 28 30 01 c0       	add    $0xc0013028,%eax
c0009899:	89 08                	mov    %ecx,(%eax)
/work/x86_os_my/fs/file.c:214
	file_table[fd_idx].fd_pos = 0;		// 每次打开文件,要将fd_pos还原为0,即让文件内的指针指向开头
c000989b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000989e:	89 d0                	mov    %edx,%eax
c00098a0:	01 c0                	add    %eax,%eax
c00098a2:	01 d0                	add    %edx,%eax
c00098a4:	c1 e0 02             	shl    $0x2,%eax
c00098a7:	05 20 30 01 c0       	add    $0xc0013020,%eax
c00098ac:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/fs/file.c:215
	file_table[fd_idx].fd_flag = flag;
c00098b2:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
c00098b6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c00098b9:	89 d0                	mov    %edx,%eax
c00098bb:	01 c0                	add    %eax,%eax
c00098bd:	01 d0                	add    %edx,%eax
c00098bf:	c1 e0 02             	shl    $0x2,%eax
c00098c2:	05 24 30 01 c0       	add    $0xc0013024,%eax
c00098c7:	89 08                	mov    %ecx,(%eax)
/work/x86_os_my/fs/file.c:216
	bool* write_deny = &file_table[fd_idx].fd_inode->write_deny;
c00098c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c00098cc:	89 d0                	mov    %edx,%eax
c00098ce:	01 c0                	add    %eax,%eax
c00098d0:	01 d0                	add    %edx,%eax
c00098d2:	c1 e0 02             	shl    $0x2,%eax
c00098d5:	05 28 30 01 c0       	add    $0xc0013028,%eax
c00098da:	8b 00                	mov    (%eax),%eax
c00098dc:	83 c0 0c             	add    $0xc,%eax
c00098df:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:218

	if (flag & O_WRONLY || flag & O_RDWR) {	// 要写文件,需要判断是否有其它进程正写此文件。创建文件、读文件不考虑write_deny。
c00098e2:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c00098e6:	83 e0 01             	and    $0x1,%eax
c00098e9:	85 c0                	test   %eax,%eax
c00098eb:	75 0b                	jne    c00098f8 <file_open+0xba>
/work/x86_os_my/fs/file.c:218 (discriminator 1)
c00098ed:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c00098f1:	83 e0 02             	and    $0x2,%eax
c00098f4:	85 c0                	test   %eax,%eax
c00098f6:	74 4f                	je     c0009947 <file_open+0x109>
/work/x86_os_my/fs/file.c:220
		/* 以下进入临界区前先关中断 */
		enum intr_status old_status = intr_disable();
c00098f8:	e8 70 81 ff ff       	call   c0001a6d <intr_disable>
c00098fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/file.c:221
		if (!(*write_deny)) {	// 若当前没有其它进程写该文件,将其占用.
c0009900:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0009903:	8b 00                	mov    (%eax),%eax
c0009905:	85 c0                	test   %eax,%eax
c0009907:	75 19                	jne    c0009922 <file_open+0xe4>
/work/x86_os_my/fs/file.c:222
			*write_deny = true;
c0009909:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000990c:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
/work/x86_os_my/fs/file.c:223
			intr_set_status(old_status);
c0009912:	83 ec 0c             	sub    $0xc,%esp
c0009915:	ff 75 ec             	pushl  -0x14(%ebp)
c0009918:	e8 79 81 ff ff       	call   c0001a96 <intr_set_status>
c000991d:	83 c4 10             	add    $0x10,%esp
c0009920:	eb 25                	jmp    c0009947 <file_open+0x109>
/work/x86_os_my/fs/file.c:225
		} else {
			intr_set_status(old_status);
c0009922:	83 ec 0c             	sub    $0xc,%esp
c0009925:	ff 75 ec             	pushl  -0x14(%ebp)
c0009928:	e8 69 81 ff ff       	call   c0001a96 <intr_set_status>
c000992d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:226
			printk("file can`t be write now, try again later\n");
c0009930:	83 ec 0c             	sub    $0xc,%esp
c0009933:	68 e0 e5 00 c0       	push   $0xc000e5e0
c0009938:	e8 71 d2 ff ff       	call   c0006bae <printk>
c000993d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:227
			return -1;
c0009940:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009945:	eb 0e                	jmp    c0009955 <file_open+0x117>
/work/x86_os_my/fs/file.c:230
		}
	}
	return pcb_fd_install(fd_idx);
c0009947:	83 ec 0c             	sub    $0xc,%esp
c000994a:	ff 75 f4             	pushl  -0xc(%ebp)
c000994d:	e8 9c fa ff ff       	call   c00093ee <pcb_fd_install>
c0009952:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:231
}
c0009955:	c9                   	leave  
c0009956:	c3                   	ret    

c0009957 <file_close>:
file_close():
/work/x86_os_my/fs/file.c:234

/* 关闭文件 */
int32_t file_close(struct file* file) {
c0009957:	55                   	push   %ebp
c0009958:	89 e5                	mov    %esp,%ebp
c000995a:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/fs/file.c:235
	if (file == NULL) {
c000995d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0009961:	75 07                	jne    c000996a <file_close+0x13>
/work/x86_os_my/fs/file.c:236
		return -1;
c0009963:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009968:	eb 2e                	jmp    c0009998 <file_close+0x41>
/work/x86_os_my/fs/file.c:238
	}
	file->fd_inode->write_deny = false;
c000996a:	8b 45 08             	mov    0x8(%ebp),%eax
c000996d:	8b 40 08             	mov    0x8(%eax),%eax
c0009970:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
/work/x86_os_my/fs/file.c:239
	inode_close(file->fd_inode);
c0009977:	8b 45 08             	mov    0x8(%ebp),%eax
c000997a:	8b 40 08             	mov    0x8(%eax),%eax
c000997d:	83 ec 0c             	sub    $0xc,%esp
c0009980:	50                   	push   %eax
c0009981:	e8 f6 f5 ff ff       	call   c0008f7c <inode_close>
c0009986:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:240
	file->fd_inode = NULL;   // 使文件结构可用
c0009989:	8b 45 08             	mov    0x8(%ebp),%eax
c000998c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
/work/x86_os_my/fs/file.c:241
	return 0;
c0009993:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/file.c:242
}
c0009998:	c9                   	leave  
c0009999:	c3                   	ret    

c000999a <file_write>:
file_write():
/work/x86_os_my/fs/file.c:245

/* 把buf中的count个字节写入file,成功则返回写入的字节数,失败则返回-1 */
int32_t file_write(struct file* file, const void* buf, uint32_t count) {
c000999a:	55                   	push   %ebp
c000999b:	89 e5                	mov    %esp,%ebp
c000999d:	83 ec 58             	sub    $0x58,%esp
/work/x86_os_my/fs/file.c:246
	if ((file->fd_inode->i_size + count) > (BLOCK_SIZE * 140))	{	// 文件目前最大只支持512B*140块=71680字节【12直接块+128间接块】
c00099a0:	8b 45 08             	mov    0x8(%ebp),%eax
c00099a3:	8b 40 08             	mov    0x8(%eax),%eax
c00099a6:	8b 50 04             	mov    0x4(%eax),%edx
c00099a9:	8b 45 10             	mov    0x10(%ebp),%eax
c00099ac:	01 d0                	add    %edx,%eax
c00099ae:	3d 00 18 01 00       	cmp    $0x11800,%eax
c00099b3:	76 1a                	jbe    c00099cf <file_write+0x35>
/work/x86_os_my/fs/file.c:247
		printk("exceed max file_size 71680 bytes, write file failed\n");
c00099b5:	83 ec 0c             	sub    $0xc,%esp
c00099b8:	68 0c e6 00 c0       	push   $0xc000e60c
c00099bd:	e8 ec d1 ff ff       	call   c0006bae <printk>
c00099c2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:248
		return -1;
c00099c5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00099ca:	e9 5d 07 00 00       	jmp    c000a12c <file_write+0x792>
/work/x86_os_my/fs/file.c:250
	}
	uint8_t* io_buf = sys_malloc(BLOCK_SIZE);
c00099cf:	83 ec 0c             	sub    $0xc,%esp
c00099d2:	68 00 02 00 00       	push   $0x200
c00099d7:	e8 20 94 ff ff       	call   c0002dfc <sys_malloc>
c00099dc:	83 c4 10             	add    $0x10,%esp
c00099df:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/file.c:251
	if (io_buf == NULL) {
c00099e2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c00099e6:	75 1a                	jne    c0009a02 <file_write+0x68>
/work/x86_os_my/fs/file.c:252
		printk("file_write: sys_malloc for io_buf failed\n");
c00099e8:	83 ec 0c             	sub    $0xc,%esp
c00099eb:	68 44 e6 00 c0       	push   $0xc000e644
c00099f0:	e8 b9 d1 ff ff       	call   c0006bae <printk>
c00099f5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:253
		return -1;
c00099f8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00099fd:	e9 2a 07 00 00       	jmp    c000a12c <file_write+0x792>
/work/x86_os_my/fs/file.c:255
	}
	uint32_t* all_blocks = (uint32_t*)sys_malloc(BLOCK_SIZE + 48);	  // 用来记录文件所有的块地址【560/4=160】
c0009a02:	83 ec 0c             	sub    $0xc,%esp
c0009a05:	68 30 02 00 00       	push   $0x230
c0009a0a:	e8 ed 93 ff ff       	call   c0002dfc <sys_malloc>
c0009a0f:	83 c4 10             	add    $0x10,%esp
c0009a12:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/file.c:256
	if (all_blocks == NULL) {
c0009a15:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0009a19:	75 1a                	jne    c0009a35 <file_write+0x9b>
/work/x86_os_my/fs/file.c:257
		printk("file_write: sys_malloc for all_blocks failed\n");
c0009a1b:	83 ec 0c             	sub    $0xc,%esp
c0009a1e:	68 70 e6 00 c0       	push   $0xc000e670
c0009a23:	e8 86 d1 ff ff       	call   c0006bae <printk>
c0009a28:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:258
		return -1;
c0009a2b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009a30:	e9 f7 06 00 00       	jmp    c000a12c <file_write+0x792>
/work/x86_os_my/fs/file.c:261
	}

	int32_t block_lba = -1;			// 块地址
c0009a35:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
/work/x86_os_my/fs/file.c:262
	uint32_t block_bitmap_idx = 0;	// block_bitmap中的索引,做为参数传给bitmap_sync
c0009a3c:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
/work/x86_os_my/fs/file.c:267
	int32_t indirect_block_table;	// 一级间接表地址
	uint32_t block_idx;				// 块索引

	/* 判断文件是否是第一次写，如果是，先为其分配一个块 */
	if (file->fd_inode->i_sectors[0] == 0) {
c0009a43:	8b 45 08             	mov    0x8(%ebp),%eax
c0009a46:	8b 40 08             	mov    0x8(%eax),%eax
c0009a49:	8b 40 10             	mov    0x10(%eax),%eax
c0009a4c:	85 c0                	test   %eax,%eax
c0009a4e:	0f 85 8d 00 00 00    	jne    c0009ae1 <file_write+0x147>
/work/x86_os_my/fs/file.c:268
		block_lba = block_bitmap_alloc(cur_part);
c0009a54:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0009a59:	83 ec 0c             	sub    $0xc,%esp
c0009a5c:	50                   	push   %eax
c0009a5d:	e8 40 fa ff ff       	call   c00094a2 <block_bitmap_alloc>
c0009a62:	83 c4 10             	add    $0x10,%esp
c0009a65:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/file.c:269
		if (block_lba == -1) {
c0009a68:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
c0009a6c:	75 1a                	jne    c0009a88 <file_write+0xee>
/work/x86_os_my/fs/file.c:270
			printk("file_write: block_bitmap_alloc failed\n");
c0009a6e:	83 ec 0c             	sub    $0xc,%esp
c0009a71:	68 a0 e6 00 c0       	push   $0xc000e6a0
c0009a76:	e8 33 d1 ff ff       	call   c0006bae <printk>
c0009a7b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:271
			return -1;
c0009a7e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009a83:	e9 a4 06 00 00       	jmp    c000a12c <file_write+0x792>
/work/x86_os_my/fs/file.c:273
		}
		file->fd_inode->i_sectors[0] = block_lba;
c0009a88:	8b 45 08             	mov    0x8(%ebp),%eax
c0009a8b:	8b 40 08             	mov    0x8(%eax),%eax
c0009a8e:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0009a91:	89 50 10             	mov    %edx,0x10(%eax)
/work/x86_os_my/fs/file.c:276

		/* 每分配一个块就将位图同步到硬盘 */
		block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
c0009a94:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0009a97:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0009a9c:	8b 40 1c             	mov    0x1c(%eax),%eax
c0009a9f:	8b 40 28             	mov    0x28(%eax),%eax
c0009aa2:	29 c2                	sub    %eax,%edx
c0009aa4:	89 d0                	mov    %edx,%eax
c0009aa6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/fs/file.c:277
		ASSERT(block_bitmap_idx != 0);
c0009aa9:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0009aad:	75 1c                	jne    c0009acb <file_write+0x131>
/work/x86_os_my/fs/file.c:277 (discriminator 1)
c0009aaf:	68 c7 e6 00 c0       	push   $0xc000e6c7
c0009ab4:	68 0c e9 00 c0       	push   $0xc000e90c
c0009ab9:	68 15 01 00 00       	push   $0x115
c0009abe:	68 dd e6 00 c0       	push   $0xc000e6dd
c0009ac3:	e8 89 89 ff ff       	call   c0002451 <panic_spin>
c0009ac8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:278
		bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c0009acb:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0009ad0:	83 ec 04             	sub    $0x4,%esp
c0009ad3:	6a 01                	push   $0x1
c0009ad5:	ff 75 d4             	pushl  -0x2c(%ebp)
c0009ad8:	50                   	push   %eax
c0009ad9:	e8 16 fa ff ff       	call   c00094f4 <bitmap_sync>
c0009ade:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:282
	}

	/* 写入count个字节前，该文件已占用的块数 */
	uint32_t file_has_used_blocks = file->fd_inode->i_size / BLOCK_SIZE + 1;
c0009ae1:	8b 45 08             	mov    0x8(%ebp),%eax
c0009ae4:	8b 40 08             	mov    0x8(%eax),%eax
c0009ae7:	8b 40 04             	mov    0x4(%eax),%eax
c0009aea:	c1 e8 09             	shr    $0x9,%eax
c0009aed:	83 c0 01             	add    $0x1,%eax
c0009af0:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/fs/file.c:284
	/* 写入count个字节后，该文件将占用的块数 */
	uint32_t file_will_use_blocks = (file->fd_inode->i_size + count) / BLOCK_SIZE + 1;
c0009af3:	8b 45 08             	mov    0x8(%ebp),%eax
c0009af6:	8b 40 08             	mov    0x8(%eax),%eax
c0009af9:	8b 50 04             	mov    0x4(%eax),%edx
c0009afc:	8b 45 10             	mov    0x10(%ebp),%eax
c0009aff:	01 d0                	add    %edx,%eax
c0009b01:	c1 e8 09             	shr    $0x9,%eax
c0009b04:	83 c0 01             	add    $0x1,%eax
c0009b07:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/fs/file.c:285
	ASSERT(file_will_use_blocks <= 140);
c0009b0a:	81 7d cc 8c 00 00 00 	cmpl   $0x8c,-0x34(%ebp)
c0009b11:	76 1c                	jbe    c0009b2f <file_write+0x195>
/work/x86_os_my/fs/file.c:285 (discriminator 1)
c0009b13:	68 e7 e6 00 c0       	push   $0xc000e6e7
c0009b18:	68 0c e9 00 c0       	push   $0xc000e90c
c0009b1d:	68 1d 01 00 00       	push   $0x11d
c0009b22:	68 dd e6 00 c0       	push   $0xc000e6dd
c0009b27:	e8 25 89 ff ff       	call   c0002451 <panic_spin>
c0009b2c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:287
	/* 通过此增量判断是否需要分配扇区，若增量为0，表示原扇区够用 */
	uint32_t add_blocks = file_will_use_blocks - file_has_used_blocks;
c0009b2f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0009b32:	2b 45 d0             	sub    -0x30(%ebp),%eax
c0009b35:	89 45 c8             	mov    %eax,-0x38(%ebp)
/work/x86_os_my/fs/file.c:294
	/* 将文件所有块地址收集到all_blocks，后面都统一在all_blocks中获取要写入的扇区地址
	 * 没有新增的数据块时，只更新 all_blocks
	 * 需要新增数据块时，除了 all_blocks 还要更新 file->fd_inode->i_sectors[x]
	 */
	/* 在同一数据块（扇区）内写入数据，不涉及到分配新扇区 */
	if (add_blocks == 0) {
c0009b38:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0009b3c:	0f 85 8c 00 00 00    	jne    c0009bce <file_write+0x234>
/work/x86_os_my/fs/file.c:295
		if (file_has_used_blocks <= 12 ) {	// 文件数据量将在12块之内
c0009b42:	83 7d d0 0c          	cmpl   $0xc,-0x30(%ebp)
c0009b46:	77 2e                	ja     c0009b76 <file_write+0x1dc>
/work/x86_os_my/fs/file.c:296
			block_idx = file_has_used_blocks - 1;	// 指向最后一个已占用的数据块（扇区）
c0009b48:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0009b4b:	83 e8 01             	sub    $0x1,%eax
c0009b4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:297
			all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];
c0009b51:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009b54:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0009b5b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009b5e:	01 c2                	add    %eax,%edx
c0009b60:	8b 45 08             	mov    0x8(%ebp),%eax
c0009b63:	8b 40 08             	mov    0x8(%eax),%eax
c0009b66:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0009b69:	83 c1 04             	add    $0x4,%ecx
c0009b6c:	8b 04 88             	mov    (%eax,%ecx,4),%eax
c0009b6f:	89 02                	mov    %eax,(%edx)
c0009b71:	e9 4e 04 00 00       	jmp    c0009fc4 <file_write+0x62a>
/work/x86_os_my/fs/file.c:300
		} else {
			/* 未写入新数据之前已经占用了间接块,需要将间接块地址读进来 */
			ASSERT(file->fd_inode->i_sectors[12] != 0);	//一级间接表存在
c0009b76:	8b 45 08             	mov    0x8(%ebp),%eax
c0009b79:	8b 40 08             	mov    0x8(%eax),%eax
c0009b7c:	8b 40 40             	mov    0x40(%eax),%eax
c0009b7f:	85 c0                	test   %eax,%eax
c0009b81:	75 1c                	jne    c0009b9f <file_write+0x205>
/work/x86_os_my/fs/file.c:300 (discriminator 1)
c0009b83:	68 04 e7 00 c0       	push   $0xc000e704
c0009b88:	68 0c e9 00 c0       	push   $0xc000e90c
c0009b8d:	68 2c 01 00 00       	push   $0x12c
c0009b92:	68 dd e6 00 c0       	push   $0xc000e6dd
c0009b97:	e8 b5 88 ff ff       	call   c0002451 <panic_spin>
c0009b9c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:301
			indirect_block_table = file->fd_inode->i_sectors[12];
c0009b9f:	8b 45 08             	mov    0x8(%ebp),%eax
c0009ba2:	8b 40 08             	mov    0x8(%eax),%eax
c0009ba5:	8b 40 40             	mov    0x40(%eax),%eax
c0009ba8:	89 45 c4             	mov    %eax,-0x3c(%ebp)
/work/x86_os_my/fs/file.c:302
			ide_read(cur_part->my_disk, indirect_block_table, all_blocks + 12, 1);	//读出整个一级间接表512字节（128个间接块的地址）
c0009bab:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009bae:	8d 48 30             	lea    0x30(%eax),%ecx
c0009bb1:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0009bb4:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0009bb9:	8b 40 08             	mov    0x8(%eax),%eax
c0009bbc:	6a 01                	push   $0x1
c0009bbe:	51                   	push   %ecx
c0009bbf:	52                   	push   %edx
c0009bc0:	50                   	push   %eax
c0009bc1:	e8 6f c5 ff ff       	call   c0006135 <ide_read>
c0009bc6:	83 c4 10             	add    $0x10,%esp
c0009bc9:	e9 f6 03 00 00       	jmp    c0009fc4 <file_write+0x62a>
/work/x86_os_my/fs/file.c:308
		}
	} else {
	/* 若有增量，便涉及到分配新数据块（扇区），以及是否分配一级间接块表。
	 * 分三种情况处理： */
		/* 第一种情况：12个直接块够用*/
		if (file_will_use_blocks <= 12 ) {
c0009bce:	83 7d cc 0c          	cmpl   $0xc,-0x34(%ebp)
c0009bd2:	0f 87 2b 01 00 00    	ja     c0009d03 <file_write+0x369>
/work/x86_os_my/fs/file.c:310
			/* 将有剩余空间的可继续用的数据块（扇区）地址写入all_blocks */
			block_idx = file_has_used_blocks - 1;	// 指向最后一个已占用的数据块（扇区）
c0009bd8:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0009bdb:	83 e8 01             	sub    $0x1,%eax
c0009bde:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:311
			ASSERT(file->fd_inode->i_sectors[block_idx] != 0);
c0009be1:	8b 45 08             	mov    0x8(%ebp),%eax
c0009be4:	8b 40 08             	mov    0x8(%eax),%eax
c0009be7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0009bea:	83 c2 04             	add    $0x4,%edx
c0009bed:	8b 04 90             	mov    (%eax,%edx,4),%eax
c0009bf0:	85 c0                	test   %eax,%eax
c0009bf2:	75 1c                	jne    c0009c10 <file_write+0x276>
/work/x86_os_my/fs/file.c:311 (discriminator 1)
c0009bf4:	68 28 e7 00 c0       	push   $0xc000e728
c0009bf9:	68 0c e9 00 c0       	push   $0xc000e90c
c0009bfe:	68 37 01 00 00       	push   $0x137
c0009c03:	68 dd e6 00 c0       	push   $0xc000e6dd
c0009c08:	e8 44 88 ff ff       	call   c0002451 <panic_spin>
c0009c0d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:312
			all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];
c0009c10:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009c13:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0009c1a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009c1d:	01 c2                	add    %eax,%edx
c0009c1f:	8b 45 08             	mov    0x8(%ebp),%eax
c0009c22:	8b 40 08             	mov    0x8(%eax),%eax
c0009c25:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0009c28:	83 c1 04             	add    $0x4,%ecx
c0009c2b:	8b 04 88             	mov    (%eax,%ecx,4),%eax
c0009c2e:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/file.c:315

			/* 将未来要用的新数据块（扇区）分配好后写入all_blocks */
			block_idx = file_has_used_blocks;		// 指向第一个要分配的新数据块（扇区）
c0009c30:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0009c33:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:316
			while (block_idx < file_will_use_blocks) {
c0009c36:	e9 b7 00 00 00       	jmp    c0009cf2 <file_write+0x358>
/work/x86_os_my/fs/file.c:317
				block_lba = block_bitmap_alloc(cur_part);
c0009c3b:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0009c40:	83 ec 0c             	sub    $0xc,%esp
c0009c43:	50                   	push   %eax
c0009c44:	e8 59 f8 ff ff       	call   c00094a2 <block_bitmap_alloc>
c0009c49:	83 c4 10             	add    $0x10,%esp
c0009c4c:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/file.c:318
				if (block_lba == -1) {
c0009c4f:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
c0009c53:	75 1a                	jne    c0009c6f <file_write+0x2d5>
/work/x86_os_my/fs/file.c:319
					printk("file_write: block_bitmap_alloc for situation 1 failed\n");
c0009c55:	83 ec 0c             	sub    $0xc,%esp
c0009c58:	68 54 e7 00 c0       	push   $0xc000e754
c0009c5d:	e8 4c cf ff ff       	call   c0006bae <printk>
c0009c62:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:320
					return -1;
c0009c65:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009c6a:	e9 bd 04 00 00       	jmp    c000a12c <file_write+0x792>
/work/x86_os_my/fs/file.c:324
				}

				/* 写文件时，数据块未使用时肯定有 i_sectors[x]==0。因为文件删除时，会把i_sectors[x]里的数据块地址清0 */
				ASSERT(file->fd_inode->i_sectors[block_idx] == 0);	// 确保尚未分配扇区地址
c0009c6f:	8b 45 08             	mov    0x8(%ebp),%eax
c0009c72:	8b 40 08             	mov    0x8(%eax),%eax
c0009c75:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0009c78:	83 c2 04             	add    $0x4,%edx
c0009c7b:	8b 04 90             	mov    (%eax,%edx,4),%eax
c0009c7e:	85 c0                	test   %eax,%eax
c0009c80:	74 1c                	je     c0009c9e <file_write+0x304>
/work/x86_os_my/fs/file.c:324 (discriminator 1)
c0009c82:	68 8c e7 00 c0       	push   $0xc000e78c
c0009c87:	68 0c e9 00 c0       	push   $0xc000e90c
c0009c8c:	68 44 01 00 00       	push   $0x144
c0009c91:	68 dd e6 00 c0       	push   $0xc000e6dd
c0009c96:	e8 b6 87 ff ff       	call   c0002451 <panic_spin>
c0009c9b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:325
				file->fd_inode->i_sectors[block_idx] = all_blocks[block_idx] = block_lba;		//处理直接块
c0009c9e:	8b 45 08             	mov    0x8(%ebp),%eax
c0009ca1:	8b 50 08             	mov    0x8(%eax),%edx
c0009ca4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009ca7:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
c0009cae:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009cb1:	01 c8                	add    %ecx,%eax
c0009cb3:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0009cb6:	89 08                	mov    %ecx,(%eax)
c0009cb8:	8b 00                	mov    (%eax),%eax
c0009cba:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0009cbd:	83 c1 04             	add    $0x4,%ecx
c0009cc0:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
/work/x86_os_my/fs/file.c:328

				/* 每分配一个块就将位图同步到硬盘 */
				block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
c0009cc3:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0009cc6:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0009ccb:	8b 40 1c             	mov    0x1c(%eax),%eax
c0009cce:	8b 40 28             	mov    0x28(%eax),%eax
c0009cd1:	29 c2                	sub    %eax,%edx
c0009cd3:	89 d0                	mov    %edx,%eax
c0009cd5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/fs/file.c:330
				// 这回怎么没有这句了：ASSERT(block_bitmap_idx != 0);
				bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c0009cd8:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0009cdd:	83 ec 04             	sub    $0x4,%esp
c0009ce0:	6a 01                	push   $0x1
c0009ce2:	ff 75 d4             	pushl  -0x2c(%ebp)
c0009ce5:	50                   	push   %eax
c0009ce6:	e8 09 f8 ff ff       	call   c00094f4 <bitmap_sync>
c0009ceb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:332

				block_idx++;   // 下一个分配的新扇区
c0009cee:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/file.c:316
			ASSERT(file->fd_inode->i_sectors[block_idx] != 0);
			all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];

			/* 将未来要用的新数据块（扇区）分配好后写入all_blocks */
			block_idx = file_has_used_blocks;		// 指向第一个要分配的新数据块（扇区）
			while (block_idx < file_will_use_blocks) {
c0009cf2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009cf5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c0009cf8:	0f 82 3d ff ff ff    	jb     c0009c3b <file_write+0x2a1>
c0009cfe:	e9 c1 02 00 00       	jmp    c0009fc4 <file_write+0x62a>
/work/x86_os_my/fs/file.c:334
				// 这回怎么没有这句了：ASSERT(block_bitmap_idx != 0);
				bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);

				block_idx++;   // 下一个分配的新扇区
			}
		} else if (file_has_used_blocks <= 12 && file_will_use_blocks > 12) {
c0009d03:	83 7d d0 0c          	cmpl   $0xc,-0x30(%ebp)
c0009d07:	0f 87 af 01 00 00    	ja     c0009ebc <file_write+0x522>
/work/x86_os_my/fs/file.c:334 (discriminator 1)
c0009d0d:	83 7d cc 0c          	cmpl   $0xc,-0x34(%ebp)
c0009d11:	0f 86 a5 01 00 00    	jbe    c0009ebc <file_write+0x522>
/work/x86_os_my/fs/file.c:338
		/* 第二种情况：旧数据在12个直接块内，新数据将使用间接块【可能也使用一些直接块】 */

			/* 先将有剩余空间的可继续用的扇区地址收集到all_blocks */
			block_idx = file_has_used_blocks - 1;	// 指向最后一个已占用的数据块（扇区）
c0009d17:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0009d1a:	83 e8 01             	sub    $0x1,%eax
c0009d1d:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:339
			all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];						//处理直接块
c0009d20:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009d23:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0009d2a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009d2d:	01 c2                	add    %eax,%edx
c0009d2f:	8b 45 08             	mov    0x8(%ebp),%eax
c0009d32:	8b 40 08             	mov    0x8(%eax),%eax
c0009d35:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0009d38:	83 c1 04             	add    $0x4,%ecx
c0009d3b:	8b 04 88             	mov    (%eax,%ecx,4),%eax
c0009d3e:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/file.c:342

			/* 创建一级间接块表 */
			block_lba = block_bitmap_alloc(cur_part);
c0009d40:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0009d45:	83 ec 0c             	sub    $0xc,%esp
c0009d48:	50                   	push   %eax
c0009d49:	e8 54 f7 ff ff       	call   c00094a2 <block_bitmap_alloc>
c0009d4e:	83 c4 10             	add    $0x10,%esp
c0009d51:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/file.c:343
			if (block_lba == -1) {
c0009d54:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
c0009d58:	75 1a                	jne    c0009d74 <file_write+0x3da>
/work/x86_os_my/fs/file.c:344
				printk("file_write: block_bitmap_alloc for situation 2 failed\n");
c0009d5a:	83 ec 0c             	sub    $0xc,%esp
c0009d5d:	68 b8 e7 00 c0       	push   $0xc000e7b8
c0009d62:	e8 47 ce ff ff       	call   c0006bae <printk>
c0009d67:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:345
				return -1;
c0009d6a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009d6f:	e9 b8 03 00 00       	jmp    c000a12c <file_write+0x792>
/work/x86_os_my/fs/file.c:347
			}
			ASSERT(file->fd_inode->i_sectors[12] == 0);  // 一级间接块表未建立
c0009d74:	8b 45 08             	mov    0x8(%ebp),%eax
c0009d77:	8b 40 08             	mov    0x8(%eax),%eax
c0009d7a:	8b 40 40             	mov    0x40(%eax),%eax
c0009d7d:	85 c0                	test   %eax,%eax
c0009d7f:	74 1c                	je     c0009d9d <file_write+0x403>
/work/x86_os_my/fs/file.c:347 (discriminator 1)
c0009d81:	68 f0 e7 00 c0       	push   $0xc000e7f0
c0009d86:	68 0c e9 00 c0       	push   $0xc000e90c
c0009d8b:	68 5b 01 00 00       	push   $0x15b
c0009d90:	68 dd e6 00 c0       	push   $0xc000e6dd
c0009d95:	e8 b7 86 ff ff       	call   c0002451 <panic_spin>
c0009d9a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:348
			indirect_block_table = file->fd_inode->i_sectors[12] = block_lba;	// 一级间接块索引表建立了！
c0009d9d:	8b 45 08             	mov    0x8(%ebp),%eax
c0009da0:	8b 40 08             	mov    0x8(%eax),%eax
c0009da3:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0009da6:	89 50 40             	mov    %edx,0x40(%eax)
c0009da9:	8b 40 40             	mov    0x40(%eax),%eax
c0009dac:	89 45 c4             	mov    %eax,-0x3c(%ebp)
/work/x86_os_my/fs/file.c:351
			//这里怎么没有同步一级间接块表占用的数据块到硬盘？？不是：每分配一个块就将位图同步到硬盘 吗？

			block_idx = file_has_used_blocks;		// 指向第一个要分配的新数据块（扇区）
c0009daf:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0009db2:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:352
			while (block_idx < file_will_use_blocks) {
c0009db5:	e9 d3 00 00 00       	jmp    c0009e8d <file_write+0x4f3>
/work/x86_os_my/fs/file.c:353
				block_lba = block_bitmap_alloc(cur_part);
c0009dba:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0009dbf:	83 ec 0c             	sub    $0xc,%esp
c0009dc2:	50                   	push   %eax
c0009dc3:	e8 da f6 ff ff       	call   c00094a2 <block_bitmap_alloc>
c0009dc8:	83 c4 10             	add    $0x10,%esp
c0009dcb:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/file.c:354
				if (block_lba == -1) {
c0009dce:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
c0009dd2:	75 1a                	jne    c0009dee <file_write+0x454>
/work/x86_os_my/fs/file.c:355
					printk("file_write: block_bitmap_alloc for situation 2 failed\n");
c0009dd4:	83 ec 0c             	sub    $0xc,%esp
c0009dd7:	68 b8 e7 00 c0       	push   $0xc000e7b8
c0009ddc:	e8 cd cd ff ff       	call   c0006bae <printk>
c0009de1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:356
					return -1;
c0009de4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009de9:	e9 3e 03 00 00       	jmp    c000a12c <file_write+0x792>
/work/x86_os_my/fs/file.c:359
				}

				if (block_idx < 12) {	// 新创建的数据块仍然是直接块！
c0009dee:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
c0009df2:	77 56                	ja     c0009e4a <file_write+0x4b0>
/work/x86_os_my/fs/file.c:360
					ASSERT(file->fd_inode->i_sectors[block_idx] == 0);
c0009df4:	8b 45 08             	mov    0x8(%ebp),%eax
c0009df7:	8b 40 08             	mov    0x8(%eax),%eax
c0009dfa:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0009dfd:	83 c2 04             	add    $0x4,%edx
c0009e00:	8b 04 90             	mov    (%eax,%edx,4),%eax
c0009e03:	85 c0                	test   %eax,%eax
c0009e05:	74 1c                	je     c0009e23 <file_write+0x489>
/work/x86_os_my/fs/file.c:360 (discriminator 1)
c0009e07:	68 8c e7 00 c0       	push   $0xc000e78c
c0009e0c:	68 0c e9 00 c0       	push   $0xc000e90c
c0009e11:	68 68 01 00 00       	push   $0x168
c0009e16:	68 dd e6 00 c0       	push   $0xc000e6dd
c0009e1b:	e8 31 86 ff ff       	call   c0002451 <panic_spin>
c0009e20:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:361
					file->fd_inode->i_sectors[block_idx] = all_blocks[block_idx] = block_lba;	//处理直接块
c0009e23:	8b 45 08             	mov    0x8(%ebp),%eax
c0009e26:	8b 50 08             	mov    0x8(%eax),%edx
c0009e29:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009e2c:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
c0009e33:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009e36:	01 c8                	add    %ecx,%eax
c0009e38:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0009e3b:	89 08                	mov    %ecx,(%eax)
c0009e3d:	8b 00                	mov    (%eax),%eax
c0009e3f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0009e42:	83 c1 04             	add    $0x4,%ecx
c0009e45:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
c0009e48:	eb 14                	jmp    c0009e5e <file_write+0x4c4>
/work/x86_os_my/fs/file.c:363
				} else {	// 新创建的数据块，是间接块。间接块只写入到all_block数组中,待全部分配完成后一次性同步到硬盘
					all_blocks[block_idx] = block_lba;											//处理间接块
c0009e4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009e4d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0009e54:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009e57:	01 c2                	add    %eax,%edx
c0009e59:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0009e5c:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/file.c:367
				}

				/* 每分配一个块就将位图同步到硬盘 */
				block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
c0009e5e:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0009e61:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0009e66:	8b 40 1c             	mov    0x1c(%eax),%eax
c0009e69:	8b 40 28             	mov    0x28(%eax),%eax
c0009e6c:	29 c2                	sub    %eax,%edx
c0009e6e:	89 d0                	mov    %edx,%eax
c0009e70:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/fs/file.c:368
				bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c0009e73:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0009e78:	83 ec 04             	sub    $0x4,%esp
c0009e7b:	6a 01                	push   $0x1
c0009e7d:	ff 75 d4             	pushl  -0x2c(%ebp)
c0009e80:	50                   	push   %eax
c0009e81:	e8 6e f6 ff ff       	call   c00094f4 <bitmap_sync>
c0009e86:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:370

				block_idx++;   // 下一个新扇区
c0009e89:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/file.c:352
			ASSERT(file->fd_inode->i_sectors[12] == 0);  // 一级间接块表未建立
			indirect_block_table = file->fd_inode->i_sectors[12] = block_lba;	// 一级间接块索引表建立了！
			//这里怎么没有同步一级间接块表占用的数据块到硬盘？？不是：每分配一个块就将位图同步到硬盘 吗？

			block_idx = file_has_used_blocks;		// 指向第一个要分配的新数据块（扇区）
			while (block_idx < file_will_use_blocks) {
c0009e8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009e90:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c0009e93:	0f 82 21 ff ff ff    	jb     c0009dba <file_write+0x420>
/work/x86_os_my/fs/file.c:372
				block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
				bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);

				block_idx++;   // 下一个新扇区
			}
			ide_write(cur_part->my_disk, indirect_block_table, all_blocks + 12, 1);	// 整个一级间接块表的内容，同步到硬盘
c0009e99:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009e9c:	8d 48 30             	lea    0x30(%eax),%ecx
c0009e9f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0009ea2:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0009ea7:	8b 40 08             	mov    0x8(%eax),%eax
c0009eaa:	6a 01                	push   $0x1
c0009eac:	51                   	push   %ecx
c0009ead:	52                   	push   %edx
c0009eae:	50                   	push   %eax
c0009eaf:	e8 f5 c3 ff ff       	call   c00062a9 <ide_write>
c0009eb4:	83 c4 10             	add    $0x10,%esp
c0009eb7:	e9 08 01 00 00       	jmp    c0009fc4 <file_write+0x62a>
/work/x86_os_my/fs/file.c:373
		} else if (file_has_used_blocks > 12) {
c0009ebc:	83 7d d0 0c          	cmpl   $0xc,-0x30(%ebp)
c0009ec0:	0f 86 fe 00 00 00    	jbe    c0009fc4 <file_write+0x62a>
/work/x86_os_my/fs/file.c:375
		/* 第三种情况：新数据使用间接块*/
			ASSERT(file->fd_inode->i_sectors[12] != 0);				// 一级间接块表已建立
c0009ec6:	8b 45 08             	mov    0x8(%ebp),%eax
c0009ec9:	8b 40 08             	mov    0x8(%eax),%eax
c0009ecc:	8b 40 40             	mov    0x40(%eax),%eax
c0009ecf:	85 c0                	test   %eax,%eax
c0009ed1:	75 1c                	jne    c0009eef <file_write+0x555>
/work/x86_os_my/fs/file.c:375 (discriminator 1)
c0009ed3:	68 04 e7 00 c0       	push   $0xc000e704
c0009ed8:	68 0c e9 00 c0       	push   $0xc000e90c
c0009edd:	68 77 01 00 00       	push   $0x177
c0009ee2:	68 dd e6 00 c0       	push   $0xc000e6dd
c0009ee7:	e8 65 85 ff ff       	call   c0002451 <panic_spin>
c0009eec:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:376
			indirect_block_table = file->fd_inode->i_sectors[12];	// 一级间接表地址
c0009eef:	8b 45 08             	mov    0x8(%ebp),%eax
c0009ef2:	8b 40 08             	mov    0x8(%eax),%eax
c0009ef5:	8b 40 40             	mov    0x40(%eax),%eax
c0009ef8:	89 45 c4             	mov    %eax,-0x3c(%ebp)
/work/x86_os_my/fs/file.c:379

			/* 已使用的间接块也将被读入all_blocks，无须单独收录 */
			ide_read(cur_part->my_disk, indirect_block_table, all_blocks + 12, 1);	// 获取所有间接块地址
c0009efb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009efe:	8d 48 30             	lea    0x30(%eax),%ecx
c0009f01:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0009f04:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0009f09:	8b 40 08             	mov    0x8(%eax),%eax
c0009f0c:	6a 01                	push   $0x1
c0009f0e:	51                   	push   %ecx
c0009f0f:	52                   	push   %edx
c0009f10:	50                   	push   %eax
c0009f11:	e8 1f c2 ff ff       	call   c0006135 <ide_read>
c0009f16:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:381

			block_idx = file_has_used_blocks;		// 指向第一个要分配的新数据块（扇区）
c0009f19:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0009f1c:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:382
			while (block_idx < file_will_use_blocks) {
c0009f1f:	eb 79                	jmp    c0009f9a <file_write+0x600>
/work/x86_os_my/fs/file.c:383
				block_lba = block_bitmap_alloc(cur_part);
c0009f21:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0009f26:	83 ec 0c             	sub    $0xc,%esp
c0009f29:	50                   	push   %eax
c0009f2a:	e8 73 f5 ff ff       	call   c00094a2 <block_bitmap_alloc>
c0009f2f:	83 c4 10             	add    $0x10,%esp
c0009f32:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/file.c:384
				if (block_lba == -1) {
c0009f35:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
c0009f39:	75 1a                	jne    c0009f55 <file_write+0x5bb>
/work/x86_os_my/fs/file.c:385
					printk("file_write: block_bitmap_alloc for situation 3 failed\n");
c0009f3b:	83 ec 0c             	sub    $0xc,%esp
c0009f3e:	68 14 e8 00 c0       	push   $0xc000e814
c0009f43:	e8 66 cc ff ff       	call   c0006bae <printk>
c0009f48:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:386
					return -1;
c0009f4b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009f50:	e9 d7 01 00 00       	jmp    c000a12c <file_write+0x792>
/work/x86_os_my/fs/file.c:388
				}
				all_blocks[block_idx++] = block_lba;											//处理间接块
c0009f55:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009f58:	8d 50 01             	lea    0x1(%eax),%edx
c0009f5b:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0009f5e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0009f65:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009f68:	01 c2                	add    %eax,%edx
c0009f6a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0009f6d:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/file.c:391

				/* 每分配一个块就将位图同步到硬盘 */
				block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
c0009f6f:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0009f72:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0009f77:	8b 40 1c             	mov    0x1c(%eax),%eax
c0009f7a:	8b 40 28             	mov    0x28(%eax),%eax
c0009f7d:	29 c2                	sub    %eax,%edx
c0009f7f:	89 d0                	mov    %edx,%eax
c0009f81:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/fs/file.c:392
				bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c0009f84:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0009f89:	83 ec 04             	sub    $0x4,%esp
c0009f8c:	6a 01                	push   $0x1
c0009f8e:	ff 75 d4             	pushl  -0x2c(%ebp)
c0009f91:	50                   	push   %eax
c0009f92:	e8 5d f5 ff ff       	call   c00094f4 <bitmap_sync>
c0009f97:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:382

			/* 已使用的间接块也将被读入all_blocks，无须单独收录 */
			ide_read(cur_part->my_disk, indirect_block_table, all_blocks + 12, 1);	// 获取所有间接块地址

			block_idx = file_has_used_blocks;		// 指向第一个要分配的新数据块（扇区）
			while (block_idx < file_will_use_blocks) {
c0009f9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009f9d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c0009fa0:	0f 82 7b ff ff ff    	jb     c0009f21 <file_write+0x587>
/work/x86_os_my/fs/file.c:394

				/* 每分配一个块就将位图同步到硬盘 */
				block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
				bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
			}
			ide_write(cur_part->my_disk, indirect_block_table, all_blocks + 12, 1);	// 整个一级间接块表的内容，同步到硬盘
c0009fa6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009fa9:	8d 48 30             	lea    0x30(%eax),%ecx
c0009fac:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0009faf:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c0009fb4:	8b 40 08             	mov    0x8(%eax),%eax
c0009fb7:	6a 01                	push   $0x1
c0009fb9:	51                   	push   %ecx
c0009fba:	52                   	push   %edx
c0009fbb:	50                   	push   %eax
c0009fbc:	e8 e8 c2 ff ff       	call   c00062a9 <ide_write>
c0009fc1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:400
		}
	}//块地址已经收集到all_blocks中


	/* 写数据 */
	const uint8_t* src = buf;		// 用src指向buf中待写入的数据
c0009fc4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0009fc7:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:401
	uint32_t bytes_written = 0;		// 已写入数据的大小
c0009fca:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/file.c:407
	uint32_t sec_idx;				// 扇区索引
	uint32_t sec_lba;				// 扇区地址
	uint32_t sec_off_bytes;			// 扇区内字节偏移量
	uint32_t sec_left_bytes;		// 扇区内剩余字节量
	uint32_t chunk_size;			// 每次写入硬盘的数据块大小
	uint32_t size_left = count;		// 未写入数据的大小
c0009fd1:	8b 45 10             	mov    0x10(%ebp),%eax
c0009fd4:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/file.c:408
	bool first_write_block = true;	// 数据块（扇区）含有剩余空间的标识
c0009fd7:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
/work/x86_os_my/fs/file.c:409
	file->fd_pos = file->fd_inode->i_size - 1;	// 文件读写指针fd_pos为"文件大小-1"
c0009fde:	8b 45 08             	mov    0x8(%ebp),%eax
c0009fe1:	8b 40 08             	mov    0x8(%eax),%eax
c0009fe4:	8b 40 04             	mov    0x4(%eax),%eax
c0009fe7:	8d 50 ff             	lea    -0x1(%eax),%edx
c0009fea:	8b 45 08             	mov    0x8(%ebp),%eax
c0009fed:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/fs/file.c:410
	while (bytes_written < count) {	// 直到写完所有数据
c0009fef:	e9 f2 00 00 00       	jmp    c000a0e6 <file_write+0x74c>
/work/x86_os_my/fs/file.c:411
		memset(io_buf, 0, BLOCK_SIZE);
c0009ff4:	83 ec 04             	sub    $0x4,%esp
c0009ff7:	68 00 02 00 00       	push   $0x200
c0009ffc:	6a 00                	push   $0x0
c0009ffe:	ff 75 e0             	pushl  -0x20(%ebp)
c000a001:	e8 ed 98 ff ff       	call   c00038f3 <memset>
c000a006:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:412
		sec_idx = file->fd_inode->i_size / BLOCK_SIZE;	// 文件已占用的最后一个数据块
c000a009:	8b 45 08             	mov    0x8(%ebp),%eax
c000a00c:	8b 40 08             	mov    0x8(%eax),%eax
c000a00f:	8b 40 04             	mov    0x4(%eax),%eax
c000a012:	c1 e8 09             	shr    $0x9,%eax
c000a015:	89 45 c0             	mov    %eax,-0x40(%ebp)
/work/x86_os_my/fs/file.c:413
		sec_lba = all_blocks[sec_idx];
c000a018:	8b 45 c0             	mov    -0x40(%ebp),%eax
c000a01b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000a022:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a025:	01 d0                	add    %edx,%eax
c000a027:	8b 00                	mov    (%eax),%eax
c000a029:	89 45 bc             	mov    %eax,-0x44(%ebp)
/work/x86_os_my/fs/file.c:414
		sec_off_bytes = file->fd_inode->i_size % BLOCK_SIZE;
c000a02c:	8b 45 08             	mov    0x8(%ebp),%eax
c000a02f:	8b 40 08             	mov    0x8(%eax),%eax
c000a032:	8b 40 04             	mov    0x4(%eax),%eax
c000a035:	25 ff 01 00 00       	and    $0x1ff,%eax
c000a03a:	89 45 b8             	mov    %eax,-0x48(%ebp)
/work/x86_os_my/fs/file.c:415
		sec_left_bytes = BLOCK_SIZE - sec_off_bytes;
c000a03d:	b8 00 02 00 00       	mov    $0x200,%eax
c000a042:	2b 45 b8             	sub    -0x48(%ebp),%eax
c000a045:	89 45 b4             	mov    %eax,-0x4c(%ebp)
/work/x86_os_my/fs/file.c:418

		/* 判断此次写入硬盘的数据大小 */
		chunk_size = size_left < sec_left_bytes ? size_left : sec_left_bytes;
c000a048:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000a04b:	39 45 b4             	cmp    %eax,-0x4c(%ebp)
c000a04e:	0f 46 45 b4          	cmovbe -0x4c(%ebp),%eax
c000a052:	89 45 b0             	mov    %eax,-0x50(%ebp)
/work/x86_os_my/fs/file.c:419
		if (first_write_block) {
c000a055:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c000a059:	74 20                	je     c000a07b <file_write+0x6e1>
/work/x86_os_my/fs/file.c:420
			ide_read(cur_part->my_disk, sec_lba, io_buf, 1);	//先读出
c000a05b:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c000a060:	8b 40 08             	mov    0x8(%eax),%eax
c000a063:	6a 01                	push   $0x1
c000a065:	ff 75 e0             	pushl  -0x20(%ebp)
c000a068:	ff 75 bc             	pushl  -0x44(%ebp)
c000a06b:	50                   	push   %eax
c000a06c:	e8 c4 c0 ff ff       	call   c0006135 <ide_read>
c000a071:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:421
			first_write_block = false;
c000a074:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
/work/x86_os_my/fs/file.c:423
		}
		memcpy(io_buf + sec_off_bytes, src, chunk_size);		//再写入
c000a07b:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000a07e:	8b 45 b8             	mov    -0x48(%ebp),%eax
c000a081:	01 d0                	add    %edx,%eax
c000a083:	83 ec 04             	sub    $0x4,%esp
c000a086:	ff 75 b0             	pushl  -0x50(%ebp)
c000a089:	ff 75 f0             	pushl  -0x10(%ebp)
c000a08c:	50                   	push   %eax
c000a08d:	e8 b3 98 ff ff       	call   c0003945 <memcpy>
c000a092:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:424
		ide_write(cur_part->my_disk, sec_lba, io_buf, 1);
c000a095:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c000a09a:	8b 40 08             	mov    0x8(%eax),%eax
c000a09d:	6a 01                	push   $0x1
c000a09f:	ff 75 e0             	pushl  -0x20(%ebp)
c000a0a2:	ff 75 bc             	pushl  -0x44(%ebp)
c000a0a5:	50                   	push   %eax
c000a0a6:	e8 fe c1 ff ff       	call   c00062a9 <ide_write>
c000a0ab:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:427
		//printk("file write at lba 0x%x\n", sec_lba);

		src += chunk_size;
c000a0ae:	8b 45 b0             	mov    -0x50(%ebp),%eax
c000a0b1:	01 45 f0             	add    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:428
		file->fd_inode->i_size += chunk_size;	// 文件大小
c000a0b4:	8b 45 08             	mov    0x8(%ebp),%eax
c000a0b7:	8b 40 08             	mov    0x8(%eax),%eax
c000a0ba:	8b 55 08             	mov    0x8(%ebp),%edx
c000a0bd:	8b 52 08             	mov    0x8(%edx),%edx
c000a0c0:	8b 4a 04             	mov    0x4(%edx),%ecx
c000a0c3:	8b 55 b0             	mov    -0x50(%ebp),%edx
c000a0c6:	01 ca                	add    %ecx,%edx
c000a0c8:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/file.c:429
		file->fd_pos += chunk_size;				// 文件指针位置
c000a0cb:	8b 45 08             	mov    0x8(%ebp),%eax
c000a0ce:	8b 10                	mov    (%eax),%edx
c000a0d0:	8b 45 b0             	mov    -0x50(%ebp),%eax
c000a0d3:	01 c2                	add    %eax,%edx
c000a0d5:	8b 45 08             	mov    0x8(%ebp),%eax
c000a0d8:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/fs/file.c:430
		bytes_written += chunk_size;
c000a0da:	8b 45 b0             	mov    -0x50(%ebp),%eax
c000a0dd:	01 45 ec             	add    %eax,-0x14(%ebp)
/work/x86_os_my/fs/file.c:431
		size_left -= chunk_size;
c000a0e0:	8b 45 b0             	mov    -0x50(%ebp),%eax
c000a0e3:	29 45 e8             	sub    %eax,-0x18(%ebp)
/work/x86_os_my/fs/file.c:410
	uint32_t sec_left_bytes;		// 扇区内剩余字节量
	uint32_t chunk_size;			// 每次写入硬盘的数据块大小
	uint32_t size_left = count;		// 未写入数据的大小
	bool first_write_block = true;	// 数据块（扇区）含有剩余空间的标识
	file->fd_pos = file->fd_inode->i_size - 1;	// 文件读写指针fd_pos为"文件大小-1"
	while (bytes_written < count) {	// 直到写完所有数据
c000a0e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000a0e9:	3b 45 10             	cmp    0x10(%ebp),%eax
c000a0ec:	0f 82 02 ff ff ff    	jb     c0009ff4 <file_write+0x65a>
/work/x86_os_my/fs/file.c:433
		file->fd_inode->i_size += chunk_size;	// 文件大小
		file->fd_pos += chunk_size;				// 文件指针位置
		bytes_written += chunk_size;
		size_left -= chunk_size;
	}
	inode_sync(cur_part, file->fd_inode, io_buf);	// 更新文件对应的inode结构，io_buf只是个缓冲区
c000a0f2:	8b 45 08             	mov    0x8(%ebp),%eax
c000a0f5:	8b 50 08             	mov    0x8(%eax),%edx
c000a0f8:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c000a0fd:	83 ec 04             	sub    $0x4,%esp
c000a100:	ff 75 e0             	pushl  -0x20(%ebp)
c000a103:	52                   	push   %edx
c000a104:	50                   	push   %eax
c000a105:	e8 05 ec ff ff       	call   c0008d0f <inode_sync>
c000a10a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:434
	sys_free(all_blocks);
c000a10d:	83 ec 0c             	sub    $0xc,%esp
c000a110:	ff 75 dc             	pushl  -0x24(%ebp)
c000a113:	e8 11 93 ff ff       	call   c0003429 <sys_free>
c000a118:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:435
	sys_free(io_buf);
c000a11b:	83 ec 0c             	sub    $0xc,%esp
c000a11e:	ff 75 e0             	pushl  -0x20(%ebp)
c000a121:	e8 03 93 ff ff       	call   c0003429 <sys_free>
c000a126:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:436
	return bytes_written;
c000a129:	8b 45 ec             	mov    -0x14(%ebp),%eax
/work/x86_os_my/fs/file.c:437
}
c000a12c:	c9                   	leave  
c000a12d:	c3                   	ret    

c000a12e <file_read>:
file_read():
/work/x86_os_my/fs/file.c:441


/* 从文件file中读取count个字节写入buf, 返回读出的字节数,若到文件尾则返回-1 */
int32_t file_read(struct file* file, void* buf, uint32_t count) {
c000a12e:	55                   	push   %ebp
c000a12f:	89 e5                	mov    %esp,%ebp
c000a131:	83 ec 48             	sub    $0x48,%esp
/work/x86_os_my/fs/file.c:442
	uint8_t* buf_dst = (uint8_t*)buf;
c000a134:	8b 45 0c             	mov    0xc(%ebp),%eax
c000a137:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:443
	uint32_t size = count, size_left = size;
c000a13a:	8b 45 10             	mov    0x10(%ebp),%eax
c000a13d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c000a140:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a143:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/file.c:446

	/* 若要读取的字节数超过了文件可读的剩余量, 就用剩余量做为待读取的字节数 */
	if ((file->fd_pos + count) > file->fd_inode->i_size) {
c000a146:	8b 45 08             	mov    0x8(%ebp),%eax
c000a149:	8b 10                	mov    (%eax),%edx
c000a14b:	8b 45 10             	mov    0x10(%ebp),%eax
c000a14e:	01 c2                	add    %eax,%edx
c000a150:	8b 45 08             	mov    0x8(%ebp),%eax
c000a153:	8b 40 08             	mov    0x8(%eax),%eax
c000a156:	8b 40 04             	mov    0x4(%eax),%eax
c000a159:	39 c2                	cmp    %eax,%edx
c000a15b:	76 2b                	jbe    c000a188 <file_read+0x5a>
/work/x86_os_my/fs/file.c:447
		size = file->fd_inode->i_size - file->fd_pos;
c000a15d:	8b 45 08             	mov    0x8(%ebp),%eax
c000a160:	8b 40 08             	mov    0x8(%eax),%eax
c000a163:	8b 50 04             	mov    0x4(%eax),%edx
c000a166:	8b 45 08             	mov    0x8(%ebp),%eax
c000a169:	8b 00                	mov    (%eax),%eax
c000a16b:	29 c2                	sub    %eax,%edx
c000a16d:	89 d0                	mov    %edx,%eax
c000a16f:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:448
		size_left = size;
c000a172:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a175:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/file.c:449
		if (size == 0) {	// 若到文件尾则返回-1
c000a178:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c000a17c:	75 0a                	jne    c000a188 <file_read+0x5a>
/work/x86_os_my/fs/file.c:450
			return -1;
c000a17e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000a183:	e9 4d 03 00 00       	jmp    c000a4d5 <file_read+0x3a7>
/work/x86_os_my/fs/file.c:454
		}
	}

	uint8_t* io_buf = sys_malloc(BLOCK_SIZE);
c000a188:	83 ec 0c             	sub    $0xc,%esp
c000a18b:	68 00 02 00 00       	push   $0x200
c000a190:	e8 67 8c ff ff       	call   c0002dfc <sys_malloc>
c000a195:	83 c4 10             	add    $0x10,%esp
c000a198:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/file.c:455
	if (io_buf == NULL) {
c000a19b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c000a19f:	75 10                	jne    c000a1b1 <file_read+0x83>
/work/x86_os_my/fs/file.c:456
		printk("file_read: sys_malloc for io_buf failed\n");
c000a1a1:	83 ec 0c             	sub    $0xc,%esp
c000a1a4:	68 4c e8 00 c0       	push   $0xc000e84c
c000a1a9:	e8 00 ca ff ff       	call   c0006bae <printk>
c000a1ae:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:458
	}
	uint32_t* all_blocks = (uint32_t*)sys_malloc(BLOCK_SIZE + 48);		// 用来记录文件所有的块地址【140*4=560字节】
c000a1b1:	83 ec 0c             	sub    $0xc,%esp
c000a1b4:	68 30 02 00 00       	push   $0x230
c000a1b9:	e8 3e 8c ff ff       	call   c0002dfc <sys_malloc>
c000a1be:	83 c4 10             	add    $0x10,%esp
c000a1c1:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/file.c:459
	if (all_blocks == NULL) {
c000a1c4:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c000a1c8:	75 1a                	jne    c000a1e4 <file_read+0xb6>
/work/x86_os_my/fs/file.c:460
		printk("file_read: sys_malloc for all_blocks failed\n");
c000a1ca:	83 ec 0c             	sub    $0xc,%esp
c000a1cd:	68 78 e8 00 c0       	push   $0xc000e878
c000a1d2:	e8 d7 c9 ff ff       	call   c0006bae <printk>
c000a1d7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:461
		return -1;
c000a1da:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000a1df:	e9 f1 02 00 00       	jmp    c000a4d5 <file_read+0x3a7>
/work/x86_os_my/fs/file.c:464
	}

	uint32_t block_read_start_idx = file->fd_pos / BLOCK_SIZE;			// 数据所在块的起始地址
c000a1e4:	8b 45 08             	mov    0x8(%ebp),%eax
c000a1e7:	8b 00                	mov    (%eax),%eax
c000a1e9:	c1 e8 09             	shr    $0x9,%eax
c000a1ec:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/file.c:465
	uint32_t block_read_end_idx = (file->fd_pos + size) / BLOCK_SIZE;	// 数据所在块的终止地址
c000a1ef:	8b 45 08             	mov    0x8(%ebp),%eax
c000a1f2:	8b 10                	mov    (%eax),%edx
c000a1f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a1f7:	01 d0                	add    %edx,%eax
c000a1f9:	c1 e8 09             	shr    $0x9,%eax
c000a1fc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/fs/file.c:466
	uint32_t read_blocks = block_read_start_idx - block_read_end_idx;	// 如增量为0,表示数据在同一扇区
c000a1ff:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000a202:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c000a205:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/fs/file.c:467
	ASSERT(block_read_start_idx < 139 && block_read_end_idx < 139);
c000a208:	81 7d d8 8a 00 00 00 	cmpl   $0x8a,-0x28(%ebp)
c000a20f:	77 09                	ja     c000a21a <file_read+0xec>
/work/x86_os_my/fs/file.c:467 (discriminator 1)
c000a211:	81 7d d4 8a 00 00 00 	cmpl   $0x8a,-0x2c(%ebp)
c000a218:	76 1c                	jbe    c000a236 <file_read+0x108>
/work/x86_os_my/fs/file.c:467 (discriminator 3)
c000a21a:	68 a8 e8 00 c0       	push   $0xc000e8a8
c000a21f:	68 18 e9 00 c0       	push   $0xc000e918
c000a224:	68 d3 01 00 00       	push   $0x1d3
c000a229:	68 dd e6 00 c0       	push   $0xc000e6dd
c000a22e:	e8 1e 82 ff ff       	call   c0002451 <panic_spin>
c000a233:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:474
	int32_t indirect_block_table;	// 获取一级间接表地址
	uint32_t block_idx;				// 获取待读的块地址

	/* 以下开始构建all_blocks块地址数组，专门存储用到的块地址 */
	// 在同一扇区内读数据,不涉及到跨扇区读取
	if (read_blocks == 0) {
c000a236:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c000a23a:	0f 85 84 00 00 00    	jne    c000a2c4 <file_read+0x196>
/work/x86_os_my/fs/file.c:475
		ASSERT(block_read_end_idx == block_read_start_idx);
c000a240:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000a243:	3b 45 d8             	cmp    -0x28(%ebp),%eax
c000a246:	74 1c                	je     c000a264 <file_read+0x136>
/work/x86_os_my/fs/file.c:475 (discriminator 1)
c000a248:	68 e0 e8 00 c0       	push   $0xc000e8e0
c000a24d:	68 18 e9 00 c0       	push   $0xc000e918
c000a252:	68 db 01 00 00       	push   $0x1db
c000a257:	68 dd e6 00 c0       	push   $0xc000e6dd
c000a25c:	e8 f0 81 ff ff       	call   c0002451 <panic_spin>
c000a261:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:476
		if (block_read_end_idx < 12 ) {	// 待读的数据在12个直接块之内
c000a264:	83 7d d4 0b          	cmpl   $0xb,-0x2c(%ebp)
c000a268:	77 2b                	ja     c000a295 <file_read+0x167>
/work/x86_os_my/fs/file.c:477
			block_idx = block_read_end_idx;
c000a26a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000a26d:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/file.c:478
			all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];
c000a270:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000a273:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000a27a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a27d:	01 c2                	add    %eax,%edx
c000a27f:	8b 45 08             	mov    0x8(%ebp),%eax
c000a282:	8b 40 08             	mov    0x8(%eax),%eax
c000a285:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c000a288:	83 c1 04             	add    $0x4,%ecx
c000a28b:	8b 04 88             	mov    (%eax,%ecx,4),%eax
c000a28e:	89 02                	mov    %eax,(%edx)
c000a290:	e9 5c 01 00 00       	jmp    c000a3f1 <file_read+0x2c3>
/work/x86_os_my/fs/file.c:480
		} else {	// 若用到了一级间接块表,需要将表中间接块读进来
			indirect_block_table = file->fd_inode->i_sectors[12];
c000a295:	8b 45 08             	mov    0x8(%ebp),%eax
c000a298:	8b 40 08             	mov    0x8(%eax),%eax
c000a29b:	8b 40 40             	mov    0x40(%eax),%eax
c000a29e:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/fs/file.c:481
			ide_read(cur_part->my_disk, indirect_block_table, all_blocks + 12, 1);
c000a2a1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a2a4:	8d 48 30             	lea    0x30(%eax),%ecx
c000a2a7:	8b 55 cc             	mov    -0x34(%ebp),%edx
c000a2aa:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c000a2af:	8b 40 08             	mov    0x8(%eax),%eax
c000a2b2:	6a 01                	push   $0x1
c000a2b4:	51                   	push   %ecx
c000a2b5:	52                   	push   %edx
c000a2b6:	50                   	push   %eax
c000a2b7:	e8 79 be ff ff       	call   c0006135 <ide_read>
c000a2bc:	83 c4 10             	add    $0x10,%esp
c000a2bf:	e9 2d 01 00 00       	jmp    c000a3f1 <file_read+0x2c3>
/work/x86_os_my/fs/file.c:486
		}
	} else {
	// 若要读多个数据块（扇区）
		/* 第一种情况: 起始块和终止块属于直接块*/
		if (block_read_end_idx < 12 ) {	  // 数据结束所在的块属于直接块
c000a2c4:	83 7d d4 0b          	cmpl   $0xb,-0x2c(%ebp)
c000a2c8:	77 39                	ja     c000a303 <file_read+0x1d5>
/work/x86_os_my/fs/file.c:487
			block_idx = block_read_start_idx;
c000a2ca:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000a2cd:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/file.c:488
			while (block_idx <= block_read_end_idx) {
c000a2d0:	eb 24                	jmp    c000a2f6 <file_read+0x1c8>
/work/x86_os_my/fs/file.c:489
				all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];
c000a2d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000a2d5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000a2dc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a2df:	01 c2                	add    %eax,%edx
c000a2e1:	8b 45 08             	mov    0x8(%ebp),%eax
c000a2e4:	8b 40 08             	mov    0x8(%eax),%eax
c000a2e7:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c000a2ea:	83 c1 04             	add    $0x4,%ecx
c000a2ed:	8b 04 88             	mov    (%eax,%ecx,4),%eax
c000a2f0:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/file.c:490
				block_idx++;
c000a2f2:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
/work/x86_os_my/fs/file.c:488
	} else {
	// 若要读多个数据块（扇区）
		/* 第一种情况: 起始块和终止块属于直接块*/
		if (block_read_end_idx < 12 ) {	  // 数据结束所在的块属于直接块
			block_idx = block_read_start_idx;
			while (block_idx <= block_read_end_idx) {
c000a2f6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000a2f9:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c000a2fc:	76 d4                	jbe    c000a2d2 <file_read+0x1a4>
c000a2fe:	e9 ee 00 00 00       	jmp    c000a3f1 <file_read+0x2c3>
/work/x86_os_my/fs/file.c:492
				all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];
				block_idx++;
			}
		} else if (block_read_start_idx < 12 && block_read_end_idx >= 12) {
c000a303:	83 7d d8 0b          	cmpl   $0xb,-0x28(%ebp)
c000a307:	0f 87 91 00 00 00    	ja     c000a39e <file_read+0x270>
/work/x86_os_my/fs/file.c:492 (discriminator 1)
c000a30d:	83 7d d4 0b          	cmpl   $0xb,-0x2c(%ebp)
c000a311:	0f 86 87 00 00 00    	jbe    c000a39e <file_read+0x270>
/work/x86_os_my/fs/file.c:495
		/* 第二种情况: 待读入的数据跨越直接块和间接块两类*/
			/* 先将直接块地址写入all_blocks */
			block_idx = block_read_start_idx;
c000a317:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000a31a:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/file.c:496
			while (block_idx < 12) {
c000a31d:	eb 24                	jmp    c000a343 <file_read+0x215>
/work/x86_os_my/fs/file.c:497
				all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];
c000a31f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000a322:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000a329:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a32c:	01 c2                	add    %eax,%edx
c000a32e:	8b 45 08             	mov    0x8(%ebp),%eax
c000a331:	8b 40 08             	mov    0x8(%eax),%eax
c000a334:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c000a337:	83 c1 04             	add    $0x4,%ecx
c000a33a:	8b 04 88             	mov    (%eax,%ecx,4),%eax
c000a33d:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/file.c:498
				block_idx++;
c000a33f:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
/work/x86_os_my/fs/file.c:496
			}
		} else if (block_read_start_idx < 12 && block_read_end_idx >= 12) {
		/* 第二种情况: 待读入的数据跨越直接块和间接块两类*/
			/* 先将直接块地址写入all_blocks */
			block_idx = block_read_start_idx;
			while (block_idx < 12) {
c000a343:	83 7d e8 0b          	cmpl   $0xb,-0x18(%ebp)
c000a347:	76 d6                	jbe    c000a31f <file_read+0x1f1>
/work/x86_os_my/fs/file.c:500
				all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];
				block_idx++;
			}
			ASSERT(file->fd_inode->i_sectors[12] != 0);	    // 确保已经分配了一级间接块表
c000a349:	8b 45 08             	mov    0x8(%ebp),%eax
c000a34c:	8b 40 08             	mov    0x8(%eax),%eax
c000a34f:	8b 40 40             	mov    0x40(%eax),%eax
c000a352:	85 c0                	test   %eax,%eax
c000a354:	75 1c                	jne    c000a372 <file_read+0x244>
/work/x86_os_my/fs/file.c:500 (discriminator 1)
c000a356:	68 04 e7 00 c0       	push   $0xc000e704
c000a35b:	68 18 e9 00 c0       	push   $0xc000e918
c000a360:	68 f4 01 00 00       	push   $0x1f4
c000a365:	68 dd e6 00 c0       	push   $0xc000e6dd
c000a36a:	e8 e2 80 ff ff       	call   c0002451 <panic_spin>
c000a36f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:503

			/* 再将间接块地址写入all_blocks */
			indirect_block_table = file->fd_inode->i_sectors[12];
c000a372:	8b 45 08             	mov    0x8(%ebp),%eax
c000a375:	8b 40 08             	mov    0x8(%eax),%eax
c000a378:	8b 40 40             	mov    0x40(%eax),%eax
c000a37b:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/fs/file.c:504
			ide_read(cur_part->my_disk, indirect_block_table, all_blocks + 12, 1);	      // 将一级间接块表读进来写入到第13个块的位置之后
c000a37e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a381:	8d 48 30             	lea    0x30(%eax),%ecx
c000a384:	8b 55 cc             	mov    -0x34(%ebp),%edx
c000a387:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c000a38c:	8b 40 08             	mov    0x8(%eax),%eax
c000a38f:	6a 01                	push   $0x1
c000a391:	51                   	push   %ecx
c000a392:	52                   	push   %edx
c000a393:	50                   	push   %eax
c000a394:	e8 9c bd ff ff       	call   c0006135 <ide_read>
c000a399:	83 c4 10             	add    $0x10,%esp
c000a39c:	eb 53                	jmp    c000a3f1 <file_read+0x2c3>
/work/x86_os_my/fs/file.c:507
		} else {
		/* 第三种情况: 数据在间接块中*/
			ASSERT(file->fd_inode->i_sectors[12] != 0);	    // 确保已经分配了一级间接块表
c000a39e:	8b 45 08             	mov    0x8(%ebp),%eax
c000a3a1:	8b 40 08             	mov    0x8(%eax),%eax
c000a3a4:	8b 40 40             	mov    0x40(%eax),%eax
c000a3a7:	85 c0                	test   %eax,%eax
c000a3a9:	75 1c                	jne    c000a3c7 <file_read+0x299>
/work/x86_os_my/fs/file.c:507 (discriminator 1)
c000a3ab:	68 04 e7 00 c0       	push   $0xc000e704
c000a3b0:	68 18 e9 00 c0       	push   $0xc000e918
c000a3b5:	68 fb 01 00 00       	push   $0x1fb
c000a3ba:	68 dd e6 00 c0       	push   $0xc000e6dd
c000a3bf:	e8 8d 80 ff ff       	call   c0002451 <panic_spin>
c000a3c4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:508
			indirect_block_table = file->fd_inode->i_sectors[12];	      // 获取一级间接表地址
c000a3c7:	8b 45 08             	mov    0x8(%ebp),%eax
c000a3ca:	8b 40 08             	mov    0x8(%eax),%eax
c000a3cd:	8b 40 40             	mov    0x40(%eax),%eax
c000a3d0:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/fs/file.c:509
			ide_read(cur_part->my_disk, indirect_block_table, all_blocks + 12, 1);	      // 将一级间接块表读进来写入到第13个块的位置之后
c000a3d3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a3d6:	8d 48 30             	lea    0x30(%eax),%ecx
c000a3d9:	8b 55 cc             	mov    -0x34(%ebp),%edx
c000a3dc:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c000a3e1:	8b 40 08             	mov    0x8(%eax),%eax
c000a3e4:	6a 01                	push   $0x1
c000a3e6:	51                   	push   %ecx
c000a3e7:	52                   	push   %edx
c000a3e8:	50                   	push   %eax
c000a3e9:	e8 47 bd ff ff       	call   c0006135 <ide_read>
c000a3ee:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:516
	}//块地址已经收集到all_blocks中


	/* 读数据 */
	uint32_t sec_idx, sec_lba, sec_off_bytes, sec_left_bytes, chunk_size;
	uint32_t bytes_read = 0;
c000a3f1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
/work/x86_os_my/fs/file.c:517
	while (bytes_read < size) {	// 直到读完为止
c000a3f8:	e9 ad 00 00 00       	jmp    c000a4aa <file_read+0x37c>
/work/x86_os_my/fs/file.c:518
		sec_idx = file->fd_pos / BLOCK_SIZE;
c000a3fd:	8b 45 08             	mov    0x8(%ebp),%eax
c000a400:	8b 00                	mov    (%eax),%eax
c000a402:	c1 e8 09             	shr    $0x9,%eax
c000a405:	89 45 c8             	mov    %eax,-0x38(%ebp)
/work/x86_os_my/fs/file.c:519
		sec_lba = all_blocks[sec_idx];
c000a408:	8b 45 c8             	mov    -0x38(%ebp),%eax
c000a40b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000a412:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a415:	01 d0                	add    %edx,%eax
c000a417:	8b 00                	mov    (%eax),%eax
c000a419:	89 45 c4             	mov    %eax,-0x3c(%ebp)
/work/x86_os_my/fs/file.c:520
		sec_off_bytes = file->fd_pos % BLOCK_SIZE;
c000a41c:	8b 45 08             	mov    0x8(%ebp),%eax
c000a41f:	8b 00                	mov    (%eax),%eax
c000a421:	25 ff 01 00 00       	and    $0x1ff,%eax
c000a426:	89 45 c0             	mov    %eax,-0x40(%ebp)
/work/x86_os_my/fs/file.c:521
		sec_left_bytes = BLOCK_SIZE - sec_off_bytes;
c000a429:	b8 00 02 00 00       	mov    $0x200,%eax
c000a42e:	2b 45 c0             	sub    -0x40(%ebp),%eax
c000a431:	89 45 bc             	mov    %eax,-0x44(%ebp)
/work/x86_os_my/fs/file.c:522
		chunk_size = size_left < sec_left_bytes ? size_left : sec_left_bytes;	// 待读入的数据大小
c000a434:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000a437:	39 45 bc             	cmp    %eax,-0x44(%ebp)
c000a43a:	0f 46 45 bc          	cmovbe -0x44(%ebp),%eax
c000a43e:	89 45 b8             	mov    %eax,-0x48(%ebp)
/work/x86_os_my/fs/file.c:524

		memset(io_buf, 0, BLOCK_SIZE);
c000a441:	83 ec 04             	sub    $0x4,%esp
c000a444:	68 00 02 00 00       	push   $0x200
c000a449:	6a 00                	push   $0x0
c000a44b:	ff 75 e0             	pushl  -0x20(%ebp)
c000a44e:	e8 a0 94 ff ff       	call   c00038f3 <memset>
c000a453:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:525
		ide_read(cur_part->my_disk, sec_lba, io_buf, 1);
c000a456:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c000a45b:	8b 40 08             	mov    0x8(%eax),%eax
c000a45e:	6a 01                	push   $0x1
c000a460:	ff 75 e0             	pushl  -0x20(%ebp)
c000a463:	ff 75 c4             	pushl  -0x3c(%ebp)
c000a466:	50                   	push   %eax
c000a467:	e8 c9 bc ff ff       	call   c0006135 <ide_read>
c000a46c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:526
		memcpy(buf_dst, io_buf + sec_off_bytes, chunk_size);
c000a46f:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000a472:	8b 45 c0             	mov    -0x40(%ebp),%eax
c000a475:	01 d0                	add    %edx,%eax
c000a477:	83 ec 04             	sub    $0x4,%esp
c000a47a:	ff 75 b8             	pushl  -0x48(%ebp)
c000a47d:	50                   	push   %eax
c000a47e:	ff 75 f4             	pushl  -0xc(%ebp)
c000a481:	e8 bf 94 ff ff       	call   c0003945 <memcpy>
c000a486:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:528

		buf_dst += chunk_size;
c000a489:	8b 45 b8             	mov    -0x48(%ebp),%eax
c000a48c:	01 45 f4             	add    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:529
		file->fd_pos += chunk_size;
c000a48f:	8b 45 08             	mov    0x8(%ebp),%eax
c000a492:	8b 10                	mov    (%eax),%edx
c000a494:	8b 45 b8             	mov    -0x48(%ebp),%eax
c000a497:	01 c2                	add    %eax,%edx
c000a499:	8b 45 08             	mov    0x8(%ebp),%eax
c000a49c:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/fs/file.c:530
		bytes_read += chunk_size;
c000a49e:	8b 45 b8             	mov    -0x48(%ebp),%eax
c000a4a1:	01 45 e4             	add    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/file.c:531
		size_left -= chunk_size;
c000a4a4:	8b 45 b8             	mov    -0x48(%ebp),%eax
c000a4a7:	29 45 ec             	sub    %eax,-0x14(%ebp)
/work/x86_os_my/fs/file.c:517


	/* 读数据 */
	uint32_t sec_idx, sec_lba, sec_off_bytes, sec_left_bytes, chunk_size;
	uint32_t bytes_read = 0;
	while (bytes_read < size) {	// 直到读完为止
c000a4aa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000a4ad:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c000a4b0:	0f 82 47 ff ff ff    	jb     c000a3fd <file_read+0x2cf>
/work/x86_os_my/fs/file.c:533
		buf_dst += chunk_size;
		file->fd_pos += chunk_size;
		bytes_read += chunk_size;
		size_left -= chunk_size;
	}
	sys_free(all_blocks);
c000a4b6:	83 ec 0c             	sub    $0xc,%esp
c000a4b9:	ff 75 dc             	pushl  -0x24(%ebp)
c000a4bc:	e8 68 8f ff ff       	call   c0003429 <sys_free>
c000a4c1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:534
	sys_free(io_buf);
c000a4c4:	83 ec 0c             	sub    $0xc,%esp
c000a4c7:	ff 75 e0             	pushl  -0x20(%ebp)
c000a4ca:	e8 5a 8f ff ff       	call   c0003429 <sys_free>
c000a4cf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:535
	return bytes_read;
c000a4d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
/work/x86_os_my/fs/file.c:536
}
c000a4d5:	c9                   	leave  
c000a4d6:	c3                   	ret    

c000a4d7 <open_root_dir>:
open_root_dir():
/work/x86_os_my/fs/dir.c:17
#include "super_block.h"

struct dir root_dir;	// 根目录

/* 打开根目录 */
void open_root_dir(struct partition* part) {
c000a4d7:	55                   	push   %ebp
c000a4d8:	89 e5                	mov    %esp,%ebp
c000a4da:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/fs/dir.c:18
	root_dir.inode = inode_open(part, part->sb->root_inode_no);
c000a4dd:	8b 45 08             	mov    0x8(%ebp),%eax
c000a4e0:	8b 40 1c             	mov    0x1c(%eax),%eax
c000a4e3:	8b 40 2c             	mov    0x2c(%eax),%eax
c000a4e6:	83 ec 08             	sub    $0x8,%esp
c000a4e9:	50                   	push   %eax
c000a4ea:	ff 75 08             	pushl  0x8(%ebp)
c000a4ed:	e8 44 e9 ff ff       	call   c0008e36 <inode_open>
c000a4f2:	83 c4 10             	add    $0x10,%esp
c000a4f5:	a3 a0 31 01 c0       	mov    %eax,0xc00131a0
/work/x86_os_my/fs/dir.c:19
	root_dir.dir_pos = 0;
c000a4fa:	c7 05 a4 31 01 c0 00 	movl   $0x0,0xc00131a4
c000a501:	00 00 00 
/work/x86_os_my/fs/dir.c:20
}
c000a504:	90                   	nop
c000a505:	c9                   	leave  
c000a506:	c3                   	ret    

c000a507 <dir_open>:
dir_open():
/work/x86_os_my/fs/dir.c:23

/* 在分区part上打开i结点为inode_no的目录，并返回目录指针 */
struct dir* dir_open(struct partition* part, uint32_t inode_no) {
c000a507:	55                   	push   %ebp
c000a508:	89 e5                	mov    %esp,%ebp
c000a50a:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/dir.c:24
	struct dir* pdir = (struct dir*)sys_malloc(sizeof(struct dir));	//除根目录以外的其他目录，要分配内存
c000a50d:	83 ec 0c             	sub    $0xc,%esp
c000a510:	68 08 02 00 00       	push   $0x208
c000a515:	e8 e2 88 ff ff       	call   c0002dfc <sys_malloc>
c000a51a:	83 c4 10             	add    $0x10,%esp
c000a51d:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:25
	pdir->inode = inode_open(part, inode_no);
c000a520:	83 ec 08             	sub    $0x8,%esp
c000a523:	ff 75 0c             	pushl  0xc(%ebp)
c000a526:	ff 75 08             	pushl  0x8(%ebp)
c000a529:	e8 08 e9 ff ff       	call   c0008e36 <inode_open>
c000a52e:	83 c4 10             	add    $0x10,%esp
c000a531:	89 c2                	mov    %eax,%edx
c000a533:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000a536:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/fs/dir.c:26
	pdir->dir_pos = 0;
c000a538:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000a53b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
/work/x86_os_my/fs/dir.c:27
	return pdir;
c000a542:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/dir.c:28
}
c000a545:	c9                   	leave  
c000a546:	c3                   	ret    

c000a547 <search_dir_entry>:
search_dir_entry():
/work/x86_os_my/fs/dir.c:32

/* 在part分区内的pdir目录内，寻找名为name的目录项，
 * 找到后返回true，并将其目录项存入dir_e；否则返回false */
bool search_dir_entry(struct partition* part, struct dir* pdir, const char* name, struct dir_entry* dir_e) {
c000a547:	55                   	push   %ebp
c000a548:	89 e5                	mov    %esp,%ebp
c000a54a:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/fs/dir.c:34
	/* 1分配 */
	uint32_t block_cnt = 140;	 // 12个直接块+128个一级间接块 = 目录的inode管理的所有块 = 140块
c000a54d:	c7 45 e8 8c 00 00 00 	movl   $0x8c,-0x18(%ebp)
/work/x86_os_my/fs/dir.c:39

	/* 12个直接块大小+128个间接块,共560字节（140个块，inode需要管理块的地址，每个4字节）
	注意: all_blocks 里面并没有一级间接表的地址，只有直接块+间接块的地址！
	用all_blocks检索inode管理的所有块地址 */
	uint32_t* all_blocks = (uint32_t*)sys_malloc(48 + 512);
c000a554:	83 ec 0c             	sub    $0xc,%esp
c000a557:	68 30 02 00 00       	push   $0x230
c000a55c:	e8 9b 88 ff ff       	call   c0002dfc <sys_malloc>
c000a561:	83 c4 10             	add    $0x10,%esp
c000a564:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/dir.c:40
	if (all_blocks == NULL) {
c000a567:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c000a56b:	75 1a                	jne    c000a587 <search_dir_entry+0x40>
/work/x86_os_my/fs/dir.c:41
		printk("search_dir_entry: sys_malloc for all_blocks failed");
c000a56d:	83 ec 0c             	sub    $0xc,%esp
c000a570:	68 24 e9 00 c0       	push   $0xc000e924
c000a575:	e8 34 c6 ff ff       	call   c0006bae <printk>
c000a57a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:42
		return false;
c000a57d:	b8 00 00 00 00       	mov    $0x0,%eax
c000a582:	e9 96 01 00 00       	jmp    c000a71d <search_dir_entry+0x1d6>
/work/x86_os_my/fs/dir.c:45
	}

	uint32_t block_idx = 0;
c000a587:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:46
	while (block_idx < 12) {
c000a58e:	eb 23                	jmp    c000a5b3 <search_dir_entry+0x6c>
/work/x86_os_my/fs/dir.c:47
		all_blocks[block_idx] = pdir->inode->i_sectors[block_idx];
c000a590:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000a593:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000a59a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000a59d:	01 c2                	add    %eax,%edx
c000a59f:	8b 45 0c             	mov    0xc(%ebp),%eax
c000a5a2:	8b 00                	mov    (%eax),%eax
c000a5a4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c000a5a7:	83 c1 04             	add    $0x4,%ecx
c000a5aa:	8b 04 88             	mov    (%eax,%ecx,4),%eax
c000a5ad:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/dir.c:48
		block_idx++;
c000a5af:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:46
		printk("search_dir_entry: sys_malloc for all_blocks failed");
		return false;
	}

	uint32_t block_idx = 0;
	while (block_idx < 12) {
c000a5b3:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
c000a5b7:	76 d7                	jbe    c000a590 <search_dir_entry+0x49>
/work/x86_os_my/fs/dir.c:50
		all_blocks[block_idx] = pdir->inode->i_sectors[block_idx];
		block_idx++;
	}
	block_idx = 0;
c000a5b9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:52

	if (pdir->inode->i_sectors[12] != 0) {	// i_sectors[12] != 0代表含有一级间接块表
c000a5c0:	8b 45 0c             	mov    0xc(%ebp),%eax
c000a5c3:	8b 00                	mov    (%eax),%eax
c000a5c5:	8b 40 40             	mov    0x40(%eax),%eax
c000a5c8:	85 c0                	test   %eax,%eax
c000a5ca:	74 21                	je     c000a5ed <search_dir_entry+0xa6>
/work/x86_os_my/fs/dir.c:54
		//从硬盘的扇区地址i_sectors[12]处获取 1 扇区数据，就是 128 个间接块的地址，将其复制到 all_blocks+12 处【复制的是整个一级间接表】
		ide_read(part->my_disk, pdir->inode->i_sectors[12], all_blocks + 12, 1);
c000a5cc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000a5cf:	8d 48 30             	lea    0x30(%eax),%ecx
c000a5d2:	8b 45 0c             	mov    0xc(%ebp),%eax
c000a5d5:	8b 00                	mov    (%eax),%eax
c000a5d7:	8b 50 40             	mov    0x40(%eax),%edx
c000a5da:	8b 45 08             	mov    0x8(%ebp),%eax
c000a5dd:	8b 40 08             	mov    0x8(%eax),%eax
c000a5e0:	6a 01                	push   $0x1
c000a5e2:	51                   	push   %ecx
c000a5e3:	52                   	push   %edx
c000a5e4:	50                   	push   %eax
c000a5e5:	e8 4b bb ff ff       	call   c0006135 <ide_read>
c000a5ea:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:62


	/* 2查找 */
	/* 写目录项的时候已保证目录项不跨扇区，这样读目录项时容易处理，只申请容纳1个扇区的内存
	 * 和处理inode_table不同，在往目录中写目录项的时候(sync_dir_entry)，避免了某个目录项 跨扇区的情况 */
	uint8_t* buf = (uint8_t*)sys_malloc(SECTOR_SIZE);
c000a5ed:	83 ec 0c             	sub    $0xc,%esp
c000a5f0:	68 00 02 00 00       	push   $0x200
c000a5f5:	e8 02 88 ff ff       	call   c0002dfc <sys_malloc>
c000a5fa:	83 c4 10             	add    $0x10,%esp
c000a5fd:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/dir.c:63
	struct dir_entry* p_de = (struct dir_entry*)buf;		// p_de为指向目录项的指针,值为buf起始地址
c000a600:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000a603:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:64
	uint32_t dir_entry_size = part->sb->dir_entry_size;
c000a606:	8b 45 08             	mov    0x8(%ebp),%eax
c000a609:	8b 40 1c             	mov    0x1c(%eax),%eax
c000a60c:	8b 40 30             	mov    0x30(%eax),%eax
c000a60f:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:65
	uint32_t dir_entry_cnt = SECTOR_SIZE / dir_entry_size;	// 1扇区内可容纳的目录项个数
c000a612:	b8 00 02 00 00       	mov    $0x200,%eax
c000a617:	ba 00 00 00 00       	mov    $0x0,%edx
c000a61c:	f7 75 dc             	divl   -0x24(%ebp)
c000a61f:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/dir.c:67
	/* 在所有块中查找目录项 */
	while (block_idx < block_cnt) {
c000a622:	e9 c9 00 00 00       	jmp    c000a6f0 <search_dir_entry+0x1a9>
/work/x86_os_my/fs/dir.c:69
		/* 块地址为0时表示该块中无数据,继续在其它块中找 */
		if (all_blocks[block_idx] == 0) {
c000a627:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000a62a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000a631:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000a634:	01 d0                	add    %edx,%eax
c000a636:	8b 00                	mov    (%eax),%eax
c000a638:	85 c0                	test   %eax,%eax
c000a63a:	75 09                	jne    c000a645 <search_dir_entry+0xfe>
/work/x86_os_my/fs/dir.c:70
			block_idx++;
c000a63c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:71
			continue;
c000a640:	e9 ab 00 00 00       	jmp    c000a6f0 <search_dir_entry+0x1a9>
/work/x86_os_my/fs/dir.c:73
		}
		ide_read(part->my_disk, all_blocks[block_idx], buf, 1);
c000a645:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000a648:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000a64f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000a652:	01 d0                	add    %edx,%eax
c000a654:	8b 10                	mov    (%eax),%edx
c000a656:	8b 45 08             	mov    0x8(%ebp),%eax
c000a659:	8b 40 08             	mov    0x8(%eax),%eax
c000a65c:	6a 01                	push   $0x1
c000a65e:	ff 75 e0             	pushl  -0x20(%ebp)
c000a661:	52                   	push   %edx
c000a662:	50                   	push   %eax
c000a663:	e8 cd ba ff ff       	call   c0006135 <ide_read>
c000a668:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:75

		uint32_t dir_entry_idx = 0;
c000a66b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:77
		/* 遍历扇区中所有目录项 */
		while (dir_entry_idx < dir_entry_cnt) {
c000a672:	eb 55                	jmp    c000a6c9 <search_dir_entry+0x182>
/work/x86_os_my/fs/dir.c:79
			/* 若找到了,就直接复制整个目录项 */
			if (!strcmp(p_de->filename, name)) {
c000a674:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a677:	83 ec 08             	sub    $0x8,%esp
c000a67a:	ff 75 10             	pushl  0x10(%ebp)
c000a67d:	50                   	push   %eax
c000a67e:	e8 45 94 ff ff       	call   c0003ac8 <strcmp>
c000a683:	83 c4 10             	add    $0x10,%esp
c000a686:	84 c0                	test   %al,%al
c000a688:	75 37                	jne    c000a6c1 <search_dir_entry+0x17a>
/work/x86_os_my/fs/dir.c:80
				memcpy(dir_e, p_de, dir_entry_size);
c000a68a:	83 ec 04             	sub    $0x4,%esp
c000a68d:	ff 75 dc             	pushl  -0x24(%ebp)
c000a690:	ff 75 f0             	pushl  -0x10(%ebp)
c000a693:	ff 75 14             	pushl  0x14(%ebp)
c000a696:	e8 aa 92 ff ff       	call   c0003945 <memcpy>
c000a69b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:81
				sys_free(buf);
c000a69e:	83 ec 0c             	sub    $0xc,%esp
c000a6a1:	ff 75 e0             	pushl  -0x20(%ebp)
c000a6a4:	e8 80 8d ff ff       	call   c0003429 <sys_free>
c000a6a9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:82
				sys_free(all_blocks);
c000a6ac:	83 ec 0c             	sub    $0xc,%esp
c000a6af:	ff 75 e4             	pushl  -0x1c(%ebp)
c000a6b2:	e8 72 8d ff ff       	call   c0003429 <sys_free>
c000a6b7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:83
				return true;
c000a6ba:	b8 01 00 00 00       	mov    $0x1,%eax
c000a6bf:	eb 5c                	jmp    c000a71d <search_dir_entry+0x1d6>
/work/x86_os_my/fs/dir.c:85
			}
			dir_entry_idx++;
c000a6c1:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:86
			p_de++;
c000a6c5:	83 45 f0 18          	addl   $0x18,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:77
		}
		ide_read(part->my_disk, all_blocks[block_idx], buf, 1);

		uint32_t dir_entry_idx = 0;
		/* 遍历扇区中所有目录项 */
		while (dir_entry_idx < dir_entry_cnt) {
c000a6c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000a6cc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
c000a6cf:	72 a3                	jb     c000a674 <search_dir_entry+0x12d>
/work/x86_os_my/fs/dir.c:89
			}
			dir_entry_idx++;
			p_de++;
		}

		block_idx++;					// 目录inode管理的下一个数据块（扇区）【目录里面是目录项，所以buf赋给p_de】
c000a6d1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:90
		p_de = (struct dir_entry*)buf;	// p_de已经指向上一个扇区内，最后一个目录项，需要恢复p_de指向为buf
c000a6d5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000a6d8:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:91
		memset(buf, 0, SECTOR_SIZE);	// 将buf清0,下次再用
c000a6db:	83 ec 04             	sub    $0x4,%esp
c000a6de:	68 00 02 00 00       	push   $0x200
c000a6e3:	6a 00                	push   $0x0
c000a6e5:	ff 75 e0             	pushl  -0x20(%ebp)
c000a6e8:	e8 06 92 ff ff       	call   c00038f3 <memset>
c000a6ed:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:67
	uint8_t* buf = (uint8_t*)sys_malloc(SECTOR_SIZE);
	struct dir_entry* p_de = (struct dir_entry*)buf;		// p_de为指向目录项的指针,值为buf起始地址
	uint32_t dir_entry_size = part->sb->dir_entry_size;
	uint32_t dir_entry_cnt = SECTOR_SIZE / dir_entry_size;	// 1扇区内可容纳的目录项个数
	/* 在所有块中查找目录项 */
	while (block_idx < block_cnt) {
c000a6f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000a6f3:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c000a6f6:	0f 82 2b ff ff ff    	jb     c000a627 <search_dir_entry+0xe0>
/work/x86_os_my/fs/dir.c:93

		block_idx++;					// 目录inode管理的下一个数据块（扇区）【目录里面是目录项，所以buf赋给p_de】
		p_de = (struct dir_entry*)buf;	// p_de已经指向上一个扇区内，最后一个目录项，需要恢复p_de指向为buf
		memset(buf, 0, SECTOR_SIZE);	// 将buf清0,下次再用
	}
	sys_free(buf);
c000a6fc:	83 ec 0c             	sub    $0xc,%esp
c000a6ff:	ff 75 e0             	pushl  -0x20(%ebp)
c000a702:	e8 22 8d ff ff       	call   c0003429 <sys_free>
c000a707:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:94
	sys_free(all_blocks);
c000a70a:	83 ec 0c             	sub    $0xc,%esp
c000a70d:	ff 75 e4             	pushl  -0x1c(%ebp)
c000a710:	e8 14 8d ff ff       	call   c0003429 <sys_free>
c000a715:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:95
	return false;
c000a718:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/dir.c:96
}
c000a71d:	c9                   	leave  
c000a71e:	c3                   	ret    

c000a71f <dir_close>:
dir_close():
/work/x86_os_my/fs/dir.c:99

/* 关闭目录 */
void dir_close(struct dir* dir) {
c000a71f:	55                   	push   %ebp
c000a720:	89 e5                	mov    %esp,%ebp
c000a722:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/fs/dir.c:103
	/*************      根目录不能关闭     ***************
	*1 根目录自打开后就不应该关闭,否则还需要再次open_root_dir();
	*2 root_dir所在的内存是低端1M之内,并非在堆中,free会出问题 */
	if (dir == &root_dir) {
c000a725:	81 7d 08 a0 31 01 c0 	cmpl   $0xc00131a0,0x8(%ebp)
c000a72c:	74 21                	je     c000a74f <dir_close+0x30>
/work/x86_os_my/fs/dir.c:106
		return;
	}
	inode_close(dir->inode);
c000a72e:	8b 45 08             	mov    0x8(%ebp),%eax
c000a731:	8b 00                	mov    (%eax),%eax
c000a733:	83 ec 0c             	sub    $0xc,%esp
c000a736:	50                   	push   %eax
c000a737:	e8 40 e8 ff ff       	call   c0008f7c <inode_close>
c000a73c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:107
	sys_free(dir);
c000a73f:	83 ec 0c             	sub    $0xc,%esp
c000a742:	ff 75 08             	pushl  0x8(%ebp)
c000a745:	e8 df 8c ff ff       	call   c0003429 <sys_free>
c000a74a:	83 c4 10             	add    $0x10,%esp
c000a74d:	eb 01                	jmp    c000a750 <dir_close+0x31>
/work/x86_os_my/fs/dir.c:104
void dir_close(struct dir* dir) {
	/*************      根目录不能关闭     ***************
	*1 根目录自打开后就不应该关闭,否则还需要再次open_root_dir();
	*2 root_dir所在的内存是低端1M之内,并非在堆中,free会出问题 */
	if (dir == &root_dir) {
		return;
c000a74f:	90                   	nop
/work/x86_os_my/fs/dir.c:108
	}
	inode_close(dir->inode);
	sys_free(dir);
}
c000a750:	c9                   	leave  
c000a751:	c3                   	ret    

c000a752 <create_dir_entry>:
create_dir_entry():
/work/x86_os_my/fs/dir.c:111

/* 在内存中初始化目录项p_de */
void create_dir_entry(char* filename, uint32_t inode_no, uint8_t file_type, struct dir_entry* p_de) {
c000a752:	55                   	push   %ebp
c000a753:	89 e5                	mov    %esp,%ebp
c000a755:	83 ec 18             	sub    $0x18,%esp
c000a758:	8b 45 10             	mov    0x10(%ebp),%eax
c000a75b:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:112
	ASSERT(strlen(filename) <=  MAX_FILE_NAME_LEN);
c000a75e:	83 ec 0c             	sub    $0xc,%esp
c000a761:	ff 75 08             	pushl  0x8(%ebp)
c000a764:	e8 14 93 ff ff       	call   c0003a7d <strlen>
c000a769:	83 c4 10             	add    $0x10,%esp
c000a76c:	83 f8 10             	cmp    $0x10,%eax
c000a76f:	76 19                	jbe    c000a78a <create_dir_entry+0x38>
/work/x86_os_my/fs/dir.c:112 (discriminator 1)
c000a771:	68 58 e9 00 c0       	push   $0xc000e958
c000a776:	68 e4 ea 00 c0       	push   $0xc000eae4
c000a77b:	6a 70                	push   $0x70
c000a77d:	68 7e e9 00 c0       	push   $0xc000e97e
c000a782:	e8 ca 7c ff ff       	call   c0002451 <panic_spin>
c000a787:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:115

	/* 初始化目录项 */
	memcpy(p_de->filename, filename, strlen(filename));
c000a78a:	83 ec 0c             	sub    $0xc,%esp
c000a78d:	ff 75 08             	pushl  0x8(%ebp)
c000a790:	e8 e8 92 ff ff       	call   c0003a7d <strlen>
c000a795:	83 c4 10             	add    $0x10,%esp
c000a798:	89 c2                	mov    %eax,%edx
c000a79a:	8b 45 14             	mov    0x14(%ebp),%eax
c000a79d:	83 ec 04             	sub    $0x4,%esp
c000a7a0:	52                   	push   %edx
c000a7a1:	ff 75 08             	pushl  0x8(%ebp)
c000a7a4:	50                   	push   %eax
c000a7a5:	e8 9b 91 ff ff       	call   c0003945 <memcpy>
c000a7aa:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:116
	p_de->i_no = inode_no;
c000a7ad:	8b 45 14             	mov    0x14(%ebp),%eax
c000a7b0:	8b 55 0c             	mov    0xc(%ebp),%edx
c000a7b3:	89 50 10             	mov    %edx,0x10(%eax)
/work/x86_os_my/fs/dir.c:117
	p_de->f_type = file_type;
c000a7b6:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
c000a7ba:	8b 45 14             	mov    0x14(%ebp),%eax
c000a7bd:	89 50 14             	mov    %edx,0x14(%eax)
/work/x86_os_my/fs/dir.c:118
}
c000a7c0:	90                   	nop
c000a7c1:	c9                   	leave  
c000a7c2:	c3                   	ret    

c000a7c3 <sync_dir_entry>:
sync_dir_entry():
/work/x86_os_my/fs/dir.c:128
 * io_buf是由主调函数提供的，里面是一个一个的目录项
 */
// 全局变量 cur_part 定义在fs.c中
// 临时变量 all_blocks 保存目录中 所有数据块的地址【4*140=560字节，去掉前12个直接块的地址48字节，后边全是间接块，后边正好是512字节】
// 注意: all_blocks 里面并没有一级间接表的地址，只有直接块+间接块的地址！
bool sync_dir_entry(struct dir* parent_dir, struct dir_entry* p_de, void* io_buf) {
c000a7c3:	55                   	push   %ebp
c000a7c4:	89 e5                	mov    %esp,%ebp
c000a7c6:	57                   	push   %edi
c000a7c7:	81 ec 54 02 00 00    	sub    $0x254,%esp
/work/x86_os_my/fs/dir.c:129
	struct inode* dir_inode = parent_dir->inode;	//dir->inode：“已打开的 inode 队列”part->open_inodes 中的节点
c000a7cd:	8b 45 08             	mov    0x8(%ebp),%eax
c000a7d0:	8b 00                	mov    (%eax),%eax
c000a7d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:130
	uint32_t dir_size = dir_inode->i_size;			//inode->i_size：当inode是目录时，代表 目录下所有目录项大小之和
c000a7d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a7d8:	8b 40 04             	mov    0x4(%eax),%eax
c000a7db:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:131
	uint32_t dir_entry_size = cur_part->sb->dir_entry_size;
c000a7de:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c000a7e3:	8b 40 1c             	mov    0x1c(%eax),%eax
c000a7e6:	8b 40 30             	mov    0x30(%eax),%eax
c000a7e9:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/dir.c:133

	ASSERT(dir_size % dir_entry_size == 0);	// dir_size应该是dir_entry_size的整数倍
c000a7ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000a7ef:	ba 00 00 00 00       	mov    $0x0,%edx
c000a7f4:	f7 75 e8             	divl   -0x18(%ebp)
c000a7f7:	89 d0                	mov    %edx,%eax
c000a7f9:	85 c0                	test   %eax,%eax
c000a7fb:	74 1c                	je     c000a819 <sync_dir_entry+0x56>
/work/x86_os_my/fs/dir.c:133 (discriminator 1)
c000a7fd:	68 88 e9 00 c0       	push   $0xc000e988
c000a802:	68 f8 ea 00 c0       	push   $0xc000eaf8
c000a807:	68 85 00 00 00       	push   $0x85
c000a80c:	68 7e e9 00 c0       	push   $0xc000e97e
c000a811:	e8 3b 7c ff ff       	call   c0002451 <panic_spin>
c000a816:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:135

	uint32_t dir_entrys_per_sec = (512 / dir_entry_size);	// 每扇区最多有几个目录项【保证了：写入目录项时不会跨扇区】
c000a819:	b8 00 02 00 00       	mov    $0x200,%eax
c000a81e:	ba 00 00 00 00       	mov    $0x0,%edx
c000a823:	f7 75 e8             	divl   -0x18(%ebp)
c000a826:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/dir.c:136
	int32_t block_lba = -1;
c000a829:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
/work/x86_os_my/fs/dir.c:140


	/* 将该目录inode管理的所有块(扇区)地址(12个直接块+ 128个间接块)存入all_blocks */
	uint8_t block_idx = 0;
c000a830:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/fs/dir.c:143
	// all_blocks 保存目录中 所有数据块的地址【4*140=560字节，去掉前12个直接块的地址48字节，后边全是间接块，后边正好是512字节】
	// 注意: all_blocks 里面并没有一级间接表的地址，只有直接块+间接块的地址！
	uint32_t all_blocks[140] = {0};
c000a834:	8d 95 a8 fd ff ff    	lea    -0x258(%ebp),%edx
c000a83a:	b8 00 00 00 00       	mov    $0x0,%eax
c000a83f:	b9 8c 00 00 00       	mov    $0x8c,%ecx
c000a844:	89 d7                	mov    %edx,%edi
c000a846:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/fs/dir.c:144
	while (block_idx < 12) {
c000a848:	eb 22                	jmp    c000a86c <sync_dir_entry+0xa9>
/work/x86_os_my/fs/dir.c:145
		all_blocks[block_idx] = dir_inode->i_sectors[block_idx];
c000a84a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000a84e:	0f b6 4d f7          	movzbl -0x9(%ebp),%ecx
c000a852:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000a855:	83 c1 04             	add    $0x4,%ecx
c000a858:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
c000a85b:	89 94 85 a8 fd ff ff 	mov    %edx,-0x258(%ebp,%eax,4)
/work/x86_os_my/fs/dir.c:146
		block_idx++;
c000a862:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000a866:	83 c0 01             	add    $0x1,%eax
c000a869:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/dir.c:144
	/* 将该目录inode管理的所有块(扇区)地址(12个直接块+ 128个间接块)存入all_blocks */
	uint8_t block_idx = 0;
	// all_blocks 保存目录中 所有数据块的地址【4*140=560字节，去掉前12个直接块的地址48字节，后边全是间接块，后边正好是512字节】
	// 注意: all_blocks 里面并没有一级间接表的地址，只有直接块+间接块的地址！
	uint32_t all_blocks[140] = {0};
	while (block_idx < 12) {
c000a86c:	80 7d f7 0b          	cmpb   $0xb,-0x9(%ebp)
c000a870:	76 d8                	jbe    c000a84a <sync_dir_entry+0x87>
/work/x86_os_my/fs/dir.c:151
		block_idx++;
	}


	/* 开始遍历所有块以寻找目录项空位 */
	block_idx = 0;
c000a872:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/fs/dir.c:152
	while (block_idx < 140) {	// 文件(包括目录)最多管理140个块
c000a876:	e9 3f 03 00 00       	jmp    c000abba <sync_dir_entry+0x3f7>
/work/x86_os_my/fs/dir.c:155
		/* 一、若inode管理的第block_idx块是不存在的，需要分配。
		   下边是需要分配块的三种情况 @1 @2 @3 */
		int32_t block_bitmap_idx = -1;
c000a87b:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:156
		if (all_blocks[block_idx] == 0) {
c000a882:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000a886:	8b 84 85 a8 fd ff ff 	mov    -0x258(%ebp,%eax,4),%eax
c000a88d:	85 c0                	test   %eax,%eax
c000a88f:	0f 85 58 02 00 00    	jne    c000aaed <sync_dir_entry+0x32a>
/work/x86_os_my/fs/dir.c:157
			block_lba = block_bitmap_alloc(cur_part);	// #1 从分区的block位图中，分配1个扇区，返回"扇区地址"
c000a895:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c000a89a:	83 ec 0c             	sub    $0xc,%esp
c000a89d:	50                   	push   %eax
c000a89e:	e8 ff eb ff ff       	call   c00094a2 <block_bitmap_alloc>
c000a8a3:	83 c4 10             	add    $0x10,%esp
c000a8a6:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/dir.c:158
			if (block_lba == -1) {
c000a8a9:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
c000a8ad:	75 1a                	jne    c000a8c9 <sync_dir_entry+0x106>
/work/x86_os_my/fs/dir.c:159
				printk("alloc block bitmap for sync_dir_entry failed\n");
c000a8af:	83 ec 0c             	sub    $0xc,%esp
c000a8b2:	68 a8 e9 00 c0       	push   $0xc000e9a8
c000a8b7:	e8 f2 c2 ff ff       	call   c0006bae <printk>
c000a8bc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:160
				return false;
c000a8bf:	b8 00 00 00 00       	mov    $0x0,%eax
c000a8c4:	e9 10 03 00 00       	jmp    c000abd9 <sync_dir_entry+0x416>
/work/x86_os_my/fs/dir.c:163
			}
			/* 每分配一个块就同步一次block_bitmap */
			block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
c000a8c9:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000a8cc:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c000a8d1:	8b 40 1c             	mov    0x1c(%eax),%eax
c000a8d4:	8b 40 28             	mov    0x28(%eax),%eax
c000a8d7:	29 c2                	sub    %eax,%edx
c000a8d9:	89 d0                	mov    %edx,%eax
c000a8db:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:164
			ASSERT(block_bitmap_idx != -1);	//怎么可能是-1啊。。。？
c000a8de:	83 7d dc ff          	cmpl   $0xffffffff,-0x24(%ebp)
c000a8e2:	75 1c                	jne    c000a900 <sync_dir_entry+0x13d>
/work/x86_os_my/fs/dir.c:164 (discriminator 1)
c000a8e4:	68 d6 e9 00 c0       	push   $0xc000e9d6
c000a8e9:	68 f8 ea 00 c0       	push   $0xc000eaf8
c000a8ee:	68 a4 00 00 00       	push   $0xa4
c000a8f3:	68 7e e9 00 c0       	push   $0xc000e97e
c000a8f8:	e8 54 7b ff ff       	call   c0002451 <panic_spin>
c000a8fd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:165
			bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c000a900:	8b 55 dc             	mov    -0x24(%ebp),%edx
c000a903:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c000a908:	83 ec 04             	sub    $0x4,%esp
c000a90b:	6a 01                	push   $0x1
c000a90d:	52                   	push   %edx
c000a90e:	50                   	push   %eax
c000a90f:	e8 e0 eb ff ff       	call   c00094f4 <bitmap_sync>
c000a914:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:167

			block_bitmap_idx = -1;
c000a917:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:168
			if (block_idx < 12) {			// @1 若是直接块
c000a91e:	80 7d f7 0b          	cmpb   $0xb,-0x9(%ebp)
c000a922:	77 27                	ja     c000a94b <sync_dir_entry+0x188>
/work/x86_os_my/fs/dir.c:169
				dir_inode->i_sectors[block_idx] = all_blocks[block_idx] = block_lba;
c000a924:	0f b6 4d f7          	movzbl -0x9(%ebp),%ecx
c000a928:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000a92c:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000a92f:	89 94 85 a8 fd ff ff 	mov    %edx,-0x258(%ebp,%eax,4)
c000a936:	8b 94 85 a8 fd ff ff 	mov    -0x258(%ebp,%eax,4),%edx
c000a93d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a940:	83 c1 04             	add    $0x4,%ecx
c000a943:	89 14 88             	mov    %edx,(%eax,%ecx,4)
c000a946:	e9 3c 01 00 00       	jmp    c000aa87 <sync_dir_entry+0x2c4>
/work/x86_os_my/fs/dir.c:170
			} else if (block_idx == 12) {	// @2 若是未分配 一级间接块表(block_idx==12表示第0个间接块)
c000a94b:	80 7d f7 0c          	cmpb   $0xc,-0x9(%ebp)
c000a94f:	0f 85 ff 00 00 00    	jne    c000aa54 <sync_dir_entry+0x291>
/work/x86_os_my/fs/dir.c:171
				dir_inode->i_sectors[12] = block_lba;		// 将 #1 分配的块做为"一级间接块表"地址
c000a955:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000a958:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a95b:	89 50 40             	mov    %edx,0x40(%eax)
/work/x86_os_my/fs/dir.c:173
				
				block_lba = -1;
c000a95e:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
/work/x86_os_my/fs/dir.c:174
				block_lba = block_bitmap_alloc(cur_part);	// #2 再分配一个块做为"第0个间接块"
c000a965:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c000a96a:	83 ec 0c             	sub    $0xc,%esp
c000a96d:	50                   	push   %eax
c000a96e:	e8 2f eb ff ff       	call   c00094a2 <block_bitmap_alloc>
c000a973:	83 c4 10             	add    $0x10,%esp
c000a976:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/dir.c:175
				if (block_lba == -1) {
c000a979:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
c000a97d:	75 57                	jne    c000a9d6 <sync_dir_entry+0x213>
/work/x86_os_my/fs/dir.c:177
					// 回滚block_bitmap
					block_bitmap_idx = dir_inode->i_sectors[12] - cur_part->sb->data_start_lba;
c000a97f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a982:	8b 50 40             	mov    0x40(%eax),%edx
c000a985:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c000a98a:	8b 40 1c             	mov    0x1c(%eax),%eax
c000a98d:	8b 40 28             	mov    0x28(%eax),%eax
c000a990:	29 c2                	sub    %eax,%edx
c000a992:	89 d0                	mov    %edx,%eax
c000a994:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:178
					bitmap_set(&cur_part->block_bitmap, block_bitmap_idx, 0);	//释放 #1
c000a997:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a99a:	8b 15 10 30 01 c0    	mov    0xc0013010,%edx
c000a9a0:	83 c2 20             	add    $0x20,%edx
c000a9a3:	83 ec 04             	sub    $0x4,%esp
c000a9a6:	6a 00                	push   $0x0
c000a9a8:	50                   	push   %eax
c000a9a9:	52                   	push   %edx
c000a9aa:	e8 10 7d ff ff       	call   c00026bf <bitmap_set>
c000a9af:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:180
					// 取消掉这个一级间接块表
					dir_inode->i_sectors[12] = 0;
c000a9b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a9b5:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)
/work/x86_os_my/fs/dir.c:181
					printk("alloc block bitmap for sync_dir_entry failed\n");
c000a9bc:	83 ec 0c             	sub    $0xc,%esp
c000a9bf:	68 a8 e9 00 c0       	push   $0xc000e9a8
c000a9c4:	e8 e5 c1 ff ff       	call   c0006bae <printk>
c000a9c9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:182
					return false;
c000a9cc:	b8 00 00 00 00       	mov    $0x0,%eax
c000a9d1:	e9 03 02 00 00       	jmp    c000abd9 <sync_dir_entry+0x416>
/work/x86_os_my/fs/dir.c:185
				}
				/* 每分配一个块就同步一次block_bitmap */
				block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
c000a9d6:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000a9d9:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c000a9de:	8b 40 1c             	mov    0x1c(%eax),%eax
c000a9e1:	8b 40 28             	mov    0x28(%eax),%eax
c000a9e4:	29 c2                	sub    %eax,%edx
c000a9e6:	89 d0                	mov    %edx,%eax
c000a9e8:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:186
				ASSERT(block_bitmap_idx != -1);
c000a9eb:	83 7d dc ff          	cmpl   $0xffffffff,-0x24(%ebp)
c000a9ef:	75 1c                	jne    c000aa0d <sync_dir_entry+0x24a>
/work/x86_os_my/fs/dir.c:186 (discriminator 1)
c000a9f1:	68 d6 e9 00 c0       	push   $0xc000e9d6
c000a9f6:	68 f8 ea 00 c0       	push   $0xc000eaf8
c000a9fb:	68 ba 00 00 00       	push   $0xba
c000aa00:	68 7e e9 00 c0       	push   $0xc000e97e
c000aa05:	e8 47 7a ff ff       	call   c0002451 <panic_spin>
c000aa0a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:187
				bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c000aa0d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c000aa10:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c000aa15:	83 ec 04             	sub    $0x4,%esp
c000aa18:	6a 01                	push   $0x1
c000aa1a:	52                   	push   %edx
c000aa1b:	50                   	push   %eax
c000aa1c:	e8 d3 ea ff ff       	call   c00094f4 <bitmap_sync>
c000aa21:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:190

				/* 把新分配的"第0个间接块地址"写入硬盘中"一级间接块表" */
				all_blocks[12] = block_lba;
c000aa24:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000aa27:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
/work/x86_os_my/fs/dir.c:194
				// all_blocks 共有4*140=560字节，去掉前12个直接块的地址48字节，后边全是间接块，后边正好是512字节】
				// 注意: all_blocks 里面并没有一级间接表的地址，只有直接块+间接块的地址！
				// 我们的一级间接表大小是和普通数据块大小一样的512字节，可以容纳128个数据块的地址！
				ide_write(cur_part->my_disk, dir_inode->i_sectors[12], all_blocks + 12, 1);
c000aa2d:	8d 85 a8 fd ff ff    	lea    -0x258(%ebp),%eax
c000aa33:	83 c0 30             	add    $0x30,%eax
c000aa36:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000aa39:	8b 4a 40             	mov    0x40(%edx),%ecx
c000aa3c:	8b 15 10 30 01 c0    	mov    0xc0013010,%edx
c000aa42:	8b 52 08             	mov    0x8(%edx),%edx
c000aa45:	6a 01                	push   $0x1
c000aa47:	50                   	push   %eax
c000aa48:	51                   	push   %ecx
c000aa49:	52                   	push   %edx
c000aa4a:	e8 5a b8 ff ff       	call   c00062a9 <ide_write>
c000aa4f:	83 c4 10             	add    $0x10,%esp
c000aa52:	eb 33                	jmp    c000aa87 <sync_dir_entry+0x2c4>
/work/x86_os_my/fs/dir.c:197
			} else {						// @3 若是未分配 间接块【父目录inode管理的只有前13个数据块需要特殊处理，后边的全是间接块】
				/* 把新分配的第(block_idx-12)个间接块地址"写入硬盘中"一级间接块表 */
				all_blocks[block_idx] = block_lba;
c000aa54:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000aa58:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000aa5b:	89 94 85 a8 fd ff ff 	mov    %edx,-0x258(%ebp,%eax,4)
/work/x86_os_my/fs/dir.c:198
				ide_write(cur_part->my_disk, dir_inode->i_sectors[12], all_blocks + 12, 1);
c000aa62:	8d 85 a8 fd ff ff    	lea    -0x258(%ebp),%eax
c000aa68:	83 c0 30             	add    $0x30,%eax
c000aa6b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000aa6e:	8b 4a 40             	mov    0x40(%edx),%ecx
c000aa71:	8b 15 10 30 01 c0    	mov    0xc0013010,%edx
c000aa77:	8b 52 08             	mov    0x8(%edx),%edx
c000aa7a:	6a 01                	push   $0x1
c000aa7c:	50                   	push   %eax
c000aa7d:	51                   	push   %ecx
c000aa7e:	52                   	push   %edx
c000aa7f:	e8 25 b8 ff ff       	call   c00062a9 <ide_write>
c000aa84:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:204
			}


			/* 这里才是重点，前边只是处理，父目录indoe管理的某个数据块为空的情况，需要新分配数据块，包括一级间接块表、间接块 */
			/* 再将硬盘中，新目录项p_de写入新分配的间接块 */
			memset(io_buf, 0, 512);
c000aa87:	83 ec 04             	sub    $0x4,%esp
c000aa8a:	68 00 02 00 00       	push   $0x200
c000aa8f:	6a 00                	push   $0x0
c000aa91:	ff 75 10             	pushl  0x10(%ebp)
c000aa94:	e8 5a 8e ff ff       	call   c00038f3 <memset>
c000aa99:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:205
			memcpy(io_buf, p_de, dir_entry_size);
c000aa9c:	83 ec 04             	sub    $0x4,%esp
c000aa9f:	ff 75 e8             	pushl  -0x18(%ebp)
c000aaa2:	ff 75 0c             	pushl  0xc(%ebp)
c000aaa5:	ff 75 10             	pushl  0x10(%ebp)
c000aaa8:	e8 98 8e ff ff       	call   c0003945 <memcpy>
c000aaad:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:206
			ide_write(cur_part->my_disk, all_blocks[block_idx], io_buf, 1);
c000aab0:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000aab4:	8b 94 85 a8 fd ff ff 	mov    -0x258(%ebp,%eax,4),%edx
c000aabb:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c000aac0:	8b 40 08             	mov    0x8(%eax),%eax
c000aac3:	6a 01                	push   $0x1
c000aac5:	ff 75 10             	pushl  0x10(%ebp)
c000aac8:	52                   	push   %edx
c000aac9:	50                   	push   %eax
c000aaca:	e8 da b7 ff ff       	call   c00062a9 <ide_write>
c000aacf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:207
			dir_inode->i_size += dir_entry_size;	//struct inode* dir_inode = parent_dir->inode;更新的是父目录的inode结构
c000aad2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000aad5:	8b 50 04             	mov    0x4(%eax),%edx
c000aad8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000aadb:	01 c2                	add    %eax,%edx
c000aadd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000aae0:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/dir.c:208
			return true;
c000aae3:	b8 01 00 00 00       	mov    $0x1,%eax
c000aae8:	e9 ec 00 00 00       	jmp    c000abd9 <sync_dir_entry+0x416>
/work/x86_os_my/fs/dir.c:213
		}//if (all_blocks[block_idx] == 0)


		/* 二、若inode管理的第block_idx块是存在的，不需要分配，将其读进内存，然后在该块中查找空目录项，将p_de填入 */
		ide_read(cur_part->my_disk, all_blocks[block_idx], io_buf, 1); 
c000aaed:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000aaf1:	8b 94 85 a8 fd ff ff 	mov    -0x258(%ebp,%eax,4),%edx
c000aaf8:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c000aafd:	8b 40 08             	mov    0x8(%eax),%eax
c000ab00:	6a 01                	push   $0x1
c000ab02:	ff 75 10             	pushl  0x10(%ebp)
c000ab05:	52                   	push   %edx
c000ab06:	50                   	push   %eax
c000ab07:	e8 29 b6 ff ff       	call   c0006135 <ide_read>
c000ab0c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:215
		/* 在扇区内查找空目录项 */
		uint8_t dir_entry_idx = 0;
c000ab0f:	c6 45 f6 00          	movb   $0x0,-0xa(%ebp)
/work/x86_os_my/fs/dir.c:216
		struct dir_entry* dir_e = (struct dir_entry*)io_buf;		// dir_e用来在io_buf中遍历目录项【io_buf里面是一个一个的目录项】
c000ab13:	8b 45 10             	mov    0x10(%ebp),%eax
c000ab16:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/dir.c:217
		while (dir_entry_idx < dir_entrys_per_sec) {
c000ab19:	e9 85 00 00 00       	jmp    c000aba3 <sync_dir_entry+0x3e0>
/work/x86_os_my/fs/dir.c:218
			if ((dir_e + dir_entry_idx)->f_type == FT_UNKNOWN) {	// 无论是初始化或是删除文件，都会将f_type置为FT_UNKNOWN.
c000ab1e:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
c000ab22:	89 d0                	mov    %edx,%eax
c000ab24:	01 c0                	add    %eax,%eax
c000ab26:	01 d0                	add    %edx,%eax
c000ab28:	c1 e0 03             	shl    $0x3,%eax
c000ab2b:	89 c2                	mov    %eax,%edx
c000ab2d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000ab30:	01 d0                	add    %edx,%eax
c000ab32:	8b 40 14             	mov    0x14(%eax),%eax
c000ab35:	85 c0                	test   %eax,%eax
c000ab37:	75 60                	jne    c000ab99 <sync_dir_entry+0x3d6>
/work/x86_os_my/fs/dir.c:219
				memcpy(dir_e + dir_entry_idx, p_de, dir_entry_size);    
c000ab39:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
c000ab3d:	89 d0                	mov    %edx,%eax
c000ab3f:	01 c0                	add    %eax,%eax
c000ab41:	01 d0                	add    %edx,%eax
c000ab43:	c1 e0 03             	shl    $0x3,%eax
c000ab46:	89 c2                	mov    %eax,%edx
c000ab48:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000ab4b:	01 d0                	add    %edx,%eax
c000ab4d:	83 ec 04             	sub    $0x4,%esp
c000ab50:	ff 75 e8             	pushl  -0x18(%ebp)
c000ab53:	ff 75 0c             	pushl  0xc(%ebp)
c000ab56:	50                   	push   %eax
c000ab57:	e8 e9 8d ff ff       	call   c0003945 <memcpy>
c000ab5c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:220
				ide_write(cur_part->my_disk, all_blocks[block_idx], io_buf, 1);
c000ab5f:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000ab63:	8b 94 85 a8 fd ff ff 	mov    -0x258(%ebp,%eax,4),%edx
c000ab6a:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c000ab6f:	8b 40 08             	mov    0x8(%eax),%eax
c000ab72:	6a 01                	push   $0x1
c000ab74:	ff 75 10             	pushl  0x10(%ebp)
c000ab77:	52                   	push   %edx
c000ab78:	50                   	push   %eax
c000ab79:	e8 2b b7 ff ff       	call   c00062a9 <ide_write>
c000ab7e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:222

				dir_inode->i_size += dir_entry_size;
c000ab81:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000ab84:	8b 50 04             	mov    0x4(%eax),%edx
c000ab87:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000ab8a:	01 c2                	add    %eax,%edx
c000ab8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000ab8f:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/dir.c:223
				return true;
c000ab92:	b8 01 00 00 00       	mov    $0x1,%eax
c000ab97:	eb 40                	jmp    c000abd9 <sync_dir_entry+0x416>
/work/x86_os_my/fs/dir.c:225
			}
			dir_entry_idx++;
c000ab99:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c000ab9d:	83 c0 01             	add    $0x1,%eax
c000aba0:	88 45 f6             	mov    %al,-0xa(%ebp)
/work/x86_os_my/fs/dir.c:217
		/* 二、若inode管理的第block_idx块是存在的，不需要分配，将其读进内存，然后在该块中查找空目录项，将p_de填入 */
		ide_read(cur_part->my_disk, all_blocks[block_idx], io_buf, 1); 
		/* 在扇区内查找空目录项 */
		uint8_t dir_entry_idx = 0;
		struct dir_entry* dir_e = (struct dir_entry*)io_buf;		// dir_e用来在io_buf中遍历目录项【io_buf里面是一个一个的目录项】
		while (dir_entry_idx < dir_entrys_per_sec) {
c000aba3:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c000aba7:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c000abaa:	0f 82 6e ff ff ff    	jb     c000ab1e <sync_dir_entry+0x35b>
/work/x86_os_my/fs/dir.c:230
			dir_entry_idx++;
		}


		/* 三、若inode管理的第block_idx块是存在的，不需要分配，但是都不是空闲(FT_UNKNOWN)的 */
		block_idx++;	//下一个inode管理的block
c000abb0:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000abb4:	83 c0 01             	add    $0x1,%eax
c000abb7:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/dir.c:152
	}


	/* 开始遍历所有块以寻找目录项空位 */
	block_idx = 0;
	while (block_idx < 140) {	// 文件(包括目录)最多管理140个块
c000abba:	80 7d f7 8b          	cmpb   $0x8b,-0x9(%ebp)
c000abbe:	0f 86 b7 fc ff ff    	jbe    c000a87b <sync_dir_entry+0xb8>
/work/x86_os_my/fs/dir.c:233

		/* 三、若inode管理的第block_idx块是存在的，不需要分配，但是都不是空闲(FT_UNKNOWN)的 */
		block_idx++;	//下一个inode管理的block
	}//while (block_idx < 140)

	printk("directory is full!\n");
c000abc4:	83 ec 0c             	sub    $0xc,%esp
c000abc7:	68 ed e9 00 c0       	push   $0xc000e9ed
c000abcc:	e8 dd bf ff ff       	call   c0006bae <printk>
c000abd1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:234
	return false;
c000abd4:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/dir.c:235 (discriminator 1)
}
c000abd9:	8b 7d fc             	mov    -0x4(%ebp),%edi
c000abdc:	c9                   	leave  
c000abdd:	c3                   	ret    

c000abde <delete_dir_entry>:
delete_dir_entry():
/work/x86_os_my/fs/dir.c:244
（2）根目录是必须存在的，它是文件读写的根基，不应该被清空，它至少要保留 1 个块。
	 如果目录项独占 1个块，并且该块不是根目录最后一个块的话，将其回收。
（3）目录 inode 的 i_size 是目录项大小的总和，因此还要将 i_size 减去一个目录项的单位大小。
（4）目录 inode 改变后，要同步到硬盘。
 */
bool delete_dir_entry(struct partition* part, struct dir* pdir, uint32_t inode_no, void* io_buf) {
c000abde:	55                   	push   %ebp
c000abdf:	89 e5                	mov    %esp,%ebp
c000abe1:	57                   	push   %edi
c000abe2:	81 ec 64 02 00 00    	sub    $0x264,%esp
/work/x86_os_my/fs/dir.c:245
	struct inode* dir_inode = pdir->inode;
c000abe8:	8b 45 0c             	mov    0xc(%ebp),%eax
c000abeb:	8b 00                	mov    (%eax),%eax
c000abed:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/dir.c:246
	uint32_t block_idx = 0, all_blocks[140] = {0};
c000abf0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c000abf7:	8d 95 9c fd ff ff    	lea    -0x264(%ebp),%edx
c000abfd:	b8 00 00 00 00       	mov    $0x0,%eax
c000ac02:	b9 8c 00 00 00       	mov    $0x8c,%ecx
c000ac07:	89 d7                	mov    %edx,%edi
c000ac09:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/fs/dir.c:249

	/* 收集目录全部块地址，存到到 all_blocks */
	while (block_idx < 12) {
c000ac0b:	eb 1a                	jmp    c000ac27 <delete_dir_entry+0x49>
/work/x86_os_my/fs/dir.c:250
		all_blocks[block_idx] = dir_inode->i_sectors[block_idx];
c000ac0d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000ac10:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000ac13:	83 c2 04             	add    $0x4,%edx
c000ac16:	8b 14 90             	mov    (%eax,%edx,4),%edx
c000ac19:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000ac1c:	89 94 85 9c fd ff ff 	mov    %edx,-0x264(%ebp,%eax,4)
/work/x86_os_my/fs/dir.c:251
		block_idx++;
c000ac23:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:249
bool delete_dir_entry(struct partition* part, struct dir* pdir, uint32_t inode_no, void* io_buf) {
	struct inode* dir_inode = pdir->inode;
	uint32_t block_idx = 0, all_blocks[140] = {0};

	/* 收集目录全部块地址，存到到 all_blocks */
	while (block_idx < 12) {
c000ac27:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
c000ac2b:	76 e0                	jbe    c000ac0d <delete_dir_entry+0x2f>
/work/x86_os_my/fs/dir.c:253
		all_blocks[block_idx] = dir_inode->i_sectors[block_idx];
		block_idx++;
	}
	if (dir_inode->i_sectors[12]) {
c000ac2d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000ac30:	8b 40 40             	mov    0x40(%eax),%eax
c000ac33:	85 c0                	test   %eax,%eax
c000ac35:	74 22                	je     c000ac59 <delete_dir_entry+0x7b>
/work/x86_os_my/fs/dir.c:254
		ide_read(part->my_disk, dir_inode->i_sectors[12], all_blocks + 12, 1);
c000ac37:	8d 85 9c fd ff ff    	lea    -0x264(%ebp),%eax
c000ac3d:	83 c0 30             	add    $0x30,%eax
c000ac40:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000ac43:	8b 4a 40             	mov    0x40(%edx),%ecx
c000ac46:	8b 55 08             	mov    0x8(%ebp),%edx
c000ac49:	8b 52 08             	mov    0x8(%edx),%edx
c000ac4c:	6a 01                	push   $0x1
c000ac4e:	50                   	push   %eax
c000ac4f:	51                   	push   %ecx
c000ac50:	52                   	push   %edx
c000ac51:	e8 df b4 ff ff       	call   c0006135 <ide_read>
c000ac56:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:258
	}

	/* 目录项在存储时保证不会跨扇区 */
	uint32_t dir_entry_size = part->sb->dir_entry_size;
c000ac59:	8b 45 08             	mov    0x8(%ebp),%eax
c000ac5c:	8b 40 1c             	mov    0x1c(%eax),%eax
c000ac5f:	8b 40 30             	mov    0x30(%eax),%eax
c000ac62:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:259
	uint32_t dir_entrys_per_sec = (SECTOR_SIZE / dir_entry_size);	// 每扇区最大的目录项数目
c000ac65:	b8 00 02 00 00       	mov    $0x200,%eax
c000ac6a:	ba 00 00 00 00       	mov    $0x0,%edx
c000ac6f:	f7 75 dc             	divl   -0x24(%ebp)
c000ac72:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/dir.c:260
	struct dir_entry* dir_e = (struct dir_entry*)io_buf;
c000ac75:	8b 45 14             	mov    0x14(%ebp),%eax
c000ac78:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/fs/dir.c:261
	struct dir_entry* dir_entry_found = NULL;
c000ac7b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:263
	uint8_t dir_entry_idx, dir_entry_cnt;
	bool is_dir_first_block = false;	// 目录的第1个块
c000ac82:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
/work/x86_os_my/fs/dir.c:266

	/* 遍历所有块，寻找目录项 */
	block_idx = 0;
c000ac89:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:267
	while (block_idx < 140) {
c000ac90:	e9 9a 03 00 00       	jmp    c000b02f <delete_dir_entry+0x451>
/work/x86_os_my/fs/dir.c:268
		is_dir_first_block = false;
c000ac95:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
/work/x86_os_my/fs/dir.c:269
		if (all_blocks[block_idx] == 0) {
c000ac9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000ac9f:	8b 84 85 9c fd ff ff 	mov    -0x264(%ebp,%eax,4),%eax
c000aca6:	85 c0                	test   %eax,%eax
c000aca8:	75 09                	jne    c000acb3 <delete_dir_entry+0xd5>
/work/x86_os_my/fs/dir.c:270
			block_idx++;
c000acaa:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:271
			continue;
c000acae:	e9 7c 03 00 00       	jmp    c000b02f <delete_dir_entry+0x451>
/work/x86_os_my/fs/dir.c:273
		}
		dir_entry_idx = dir_entry_cnt = 0;
c000acb3:	c6 45 ee 00          	movb   $0x0,-0x12(%ebp)
c000acb7:	0f b6 45 ee          	movzbl -0x12(%ebp),%eax
c000acbb:	88 45 ef             	mov    %al,-0x11(%ebp)
/work/x86_os_my/fs/dir.c:274
		memset(io_buf, 0, SECTOR_SIZE);
c000acbe:	83 ec 04             	sub    $0x4,%esp
c000acc1:	68 00 02 00 00       	push   $0x200
c000acc6:	6a 00                	push   $0x0
c000acc8:	ff 75 14             	pushl  0x14(%ebp)
c000accb:	e8 23 8c ff ff       	call   c00038f3 <memset>
c000acd0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:276
		/* 读取目录inode管理的各个数据块（扇区），里面是目录项 */
		ide_read(part->my_disk, all_blocks[block_idx], io_buf, 1);	//dir_e = io_buf
c000acd3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000acd6:	8b 94 85 9c fd ff ff 	mov    -0x264(%ebp,%eax,4),%edx
c000acdd:	8b 45 08             	mov    0x8(%ebp),%eax
c000ace0:	8b 40 08             	mov    0x8(%eax),%eax
c000ace3:	6a 01                	push   $0x1
c000ace5:	ff 75 14             	pushl  0x14(%ebp)
c000ace8:	52                   	push   %edx
c000ace9:	50                   	push   %eax
c000acea:	e8 46 b4 ff ff       	call   c0006135 <ide_read>
c000acef:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:279

		/* 遍历所有的目录项，统计该扇区的目录项数量 + 是否找到要删除的目录项 */
		while (dir_entry_idx < dir_entrys_per_sec) {
c000acf2:	e9 13 01 00 00       	jmp    c000ae0a <delete_dir_entry+0x22c>
/work/x86_os_my/fs/dir.c:280
			if ((dir_e + dir_entry_idx)->f_type != FT_UNKNOWN) {	// 初始化或是删除文件，会将f_type置为FT_UNKNOWN.
c000acf7:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c000acfb:	89 d0                	mov    %edx,%eax
c000acfd:	01 c0                	add    %eax,%eax
c000acff:	01 d0                	add    %edx,%eax
c000ad01:	c1 e0 03             	shl    $0x3,%eax
c000ad04:	89 c2                	mov    %eax,%edx
c000ad06:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000ad09:	01 d0                	add    %edx,%eax
c000ad0b:	8b 40 14             	mov    0x14(%eax),%eax
c000ad0e:	85 c0                	test   %eax,%eax
c000ad10:	0f 84 ea 00 00 00    	je     c000ae00 <delete_dir_entry+0x222>
/work/x86_os_my/fs/dir.c:281
				if (!strcmp((dir_e + dir_entry_idx)->filename, ".")) {
c000ad16:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c000ad1a:	89 d0                	mov    %edx,%eax
c000ad1c:	01 c0                	add    %eax,%eax
c000ad1e:	01 d0                	add    %edx,%eax
c000ad20:	c1 e0 03             	shl    $0x3,%eax
c000ad23:	89 c2                	mov    %eax,%edx
c000ad25:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000ad28:	01 d0                	add    %edx,%eax
c000ad2a:	83 ec 08             	sub    $0x8,%esp
c000ad2d:	68 01 ea 00 c0       	push   $0xc000ea01
c000ad32:	50                   	push   %eax
c000ad33:	e8 90 8d ff ff       	call   c0003ac8 <strcmp>
c000ad38:	83 c4 10             	add    $0x10,%esp
c000ad3b:	84 c0                	test   %al,%al
c000ad3d:	75 0c                	jne    c000ad4b <delete_dir_entry+0x16d>
/work/x86_os_my/fs/dir.c:282
					is_dir_first_block = true;
c000ad3f:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
c000ad46:	e9 b5 00 00 00       	jmp    c000ae00 <delete_dir_entry+0x222>
/work/x86_os_my/fs/dir.c:283
				} else if (strcmp((dir_e + dir_entry_idx)->filename, ".") && strcmp((dir_e + dir_entry_idx)->filename, "..")) {	//不是.和..
c000ad4b:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c000ad4f:	89 d0                	mov    %edx,%eax
c000ad51:	01 c0                	add    %eax,%eax
c000ad53:	01 d0                	add    %edx,%eax
c000ad55:	c1 e0 03             	shl    $0x3,%eax
c000ad58:	89 c2                	mov    %eax,%edx
c000ad5a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000ad5d:	01 d0                	add    %edx,%eax
c000ad5f:	83 ec 08             	sub    $0x8,%esp
c000ad62:	68 01 ea 00 c0       	push   $0xc000ea01
c000ad67:	50                   	push   %eax
c000ad68:	e8 5b 8d ff ff       	call   c0003ac8 <strcmp>
c000ad6d:	83 c4 10             	add    $0x10,%esp
c000ad70:	84 c0                	test   %al,%al
c000ad72:	0f 84 88 00 00 00    	je     c000ae00 <delete_dir_entry+0x222>
/work/x86_os_my/fs/dir.c:283 (discriminator 1)
c000ad78:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c000ad7c:	89 d0                	mov    %edx,%eax
c000ad7e:	01 c0                	add    %eax,%eax
c000ad80:	01 d0                	add    %edx,%eax
c000ad82:	c1 e0 03             	shl    $0x3,%eax
c000ad85:	89 c2                	mov    %eax,%edx
c000ad87:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000ad8a:	01 d0                	add    %edx,%eax
c000ad8c:	83 ec 08             	sub    $0x8,%esp
c000ad8f:	68 03 ea 00 c0       	push   $0xc000ea03
c000ad94:	50                   	push   %eax
c000ad95:	e8 2e 8d ff ff       	call   c0003ac8 <strcmp>
c000ad9a:	83 c4 10             	add    $0x10,%esp
c000ad9d:	84 c0                	test   %al,%al
c000ad9f:	74 5f                	je     c000ae00 <delete_dir_entry+0x222>
/work/x86_os_my/fs/dir.c:284
					dir_entry_cnt++;     // 统计此扇区内的目录项个数，用来判断删除目录项后是否回收该扇区
c000ada1:	0f b6 45 ee          	movzbl -0x12(%ebp),%eax
c000ada5:	83 c0 01             	add    $0x1,%eax
c000ada8:	88 45 ee             	mov    %al,-0x12(%ebp)
/work/x86_os_my/fs/dir.c:286
					// 目录项的成员inode号和目标inode号一致，就将其记录在dir_entry_found！！！
					if ((dir_e + dir_entry_idx)->i_no == inode_no) {
c000adab:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c000adaf:	89 d0                	mov    %edx,%eax
c000adb1:	01 c0                	add    %eax,%eax
c000adb3:	01 d0                	add    %edx,%eax
c000adb5:	c1 e0 03             	shl    $0x3,%eax
c000adb8:	89 c2                	mov    %eax,%edx
c000adba:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000adbd:	01 d0                	add    %edx,%eax
c000adbf:	8b 40 10             	mov    0x10(%eax),%eax
c000adc2:	3b 45 10             	cmp    0x10(%ebp),%eax
c000adc5:	75 39                	jne    c000ae00 <delete_dir_entry+0x222>
/work/x86_os_my/fs/dir.c:287
						ASSERT(dir_entry_found == NULL);  // 确保目录中只有一个编号为inode_no的inode,找到一次后dir_entry_found就不再是NULL
c000adc7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c000adcb:	74 1c                	je     c000ade9 <delete_dir_entry+0x20b>
/work/x86_os_my/fs/dir.c:287 (discriminator 1)
c000adcd:	68 06 ea 00 c0       	push   $0xc000ea06
c000add2:	68 08 eb 00 c0       	push   $0xc000eb08
c000add7:	68 1f 01 00 00       	push   $0x11f
c000addc:	68 7e e9 00 c0       	push   $0xc000e97e
c000ade1:	e8 6b 76 ff ff       	call   c0002451 <panic_spin>
c000ade6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:288
						dir_entry_found = dir_e + dir_entry_idx;
c000ade9:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c000aded:	89 d0                	mov    %edx,%eax
c000adef:	01 c0                	add    %eax,%eax
c000adf1:	01 d0                	add    %edx,%eax
c000adf3:	c1 e0 03             	shl    $0x3,%eax
c000adf6:	89 c2                	mov    %eax,%edx
c000adf8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000adfb:	01 d0                	add    %edx,%eax
c000adfd:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:293
						/* 找到后也继续遍历,统计总共的目录项数 */
					}
				}
			}
			dir_entry_idx++;
c000ae00:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c000ae04:	83 c0 01             	add    $0x1,%eax
c000ae07:	88 45 ef             	mov    %al,-0x11(%ebp)
/work/x86_os_my/fs/dir.c:279
		memset(io_buf, 0, SECTOR_SIZE);
		/* 读取目录inode管理的各个数据块（扇区），里面是目录项 */
		ide_read(part->my_disk, all_blocks[block_idx], io_buf, 1);	//dir_e = io_buf

		/* 遍历所有的目录项，统计该扇区的目录项数量 + 是否找到要删除的目录项 */
		while (dir_entry_idx < dir_entrys_per_sec) {
c000ae0a:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c000ae0e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
c000ae11:	0f 82 e0 fe ff ff    	jb     c000acf7 <delete_dir_entry+0x119>
/work/x86_os_my/fs/dir.c:297
			}
			dir_entry_idx++;
		}

		/* 若此扇区未找到该目录项,继续在下个扇区中找 */
		if (dir_entry_found == NULL) {
c000ae17:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c000ae1b:	75 09                	jne    c000ae26 <delete_dir_entry+0x248>
/work/x86_os_my/fs/dir.c:298
			block_idx++;
c000ae1d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:299
			continue;
c000ae21:	e9 09 02 00 00       	jmp    c000b02f <delete_dir_entry+0x451>
/work/x86_os_my/fs/dir.c:303
		}

		/* 在此扇区中找到目录项后，清除该目录项并判断是否回收扇区，随后退出循环直接返回 */
		ASSERT(dir_entry_cnt >= 1);	//此扇区内的目录项个数
c000ae26:	80 7d ee 00          	cmpb   $0x0,-0x12(%ebp)
c000ae2a:	75 1c                	jne    c000ae48 <delete_dir_entry+0x26a>
/work/x86_os_my/fs/dir.c:303 (discriminator 1)
c000ae2c:	68 1e ea 00 c0       	push   $0xc000ea1e
c000ae31:	68 08 eb 00 c0       	push   $0xc000eb08
c000ae36:	68 2f 01 00 00       	push   $0x12f
c000ae3b:	68 7e e9 00 c0       	push   $0xc000e97e
c000ae40:	e8 0c 76 ff ff       	call   c0002451 <panic_spin>
c000ae45:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:305
		/* 若该扇区上只有该目录项自己，则将整个扇区回收。如果目录只有第1个扇区，则不能回收 */
		if (dir_entry_cnt == 1 && !is_dir_first_block) {
c000ae48:	80 7d ee 01          	cmpb   $0x1,-0x12(%ebp)
c000ae4c:	0f 85 43 01 00 00    	jne    c000af95 <delete_dir_entry+0x3b7>
/work/x86_os_my/fs/dir.c:305 (discriminator 1)
c000ae52:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c000ae56:	0f 85 39 01 00 00    	jne    c000af95 <delete_dir_entry+0x3b7>
/work/x86_os_my/fs/dir.c:307
			/* a 在块位图中回收该块 */
			uint32_t block_bitmap_idx = all_blocks[block_idx] - part->sb->data_start_lba;
c000ae5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000ae5f:	8b 94 85 9c fd ff ff 	mov    -0x264(%ebp,%eax,4),%edx
c000ae66:	8b 45 08             	mov    0x8(%ebp),%eax
c000ae69:	8b 40 1c             	mov    0x1c(%eax),%eax
c000ae6c:	8b 40 28             	mov    0x28(%eax),%eax
c000ae6f:	29 c2                	sub    %eax,%edx
c000ae71:	89 d0                	mov    %edx,%eax
c000ae73:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/fs/dir.c:308
			bitmap_set(&part->block_bitmap, block_bitmap_idx, 0);
c000ae76:	8b 45 08             	mov    0x8(%ebp),%eax
c000ae79:	83 c0 20             	add    $0x20,%eax
c000ae7c:	83 ec 04             	sub    $0x4,%esp
c000ae7f:	6a 00                	push   $0x0
c000ae81:	ff 75 d0             	pushl  -0x30(%ebp)
c000ae84:	50                   	push   %eax
c000ae85:	e8 35 78 ff ff       	call   c00026bf <bitmap_set>
c000ae8a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:309
			bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c000ae8d:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c000ae92:	83 ec 04             	sub    $0x4,%esp
c000ae95:	6a 01                	push   $0x1
c000ae97:	ff 75 d0             	pushl  -0x30(%ebp)
c000ae9a:	50                   	push   %eax
c000ae9b:	e8 54 e6 ff ff       	call   c00094f4 <bitmap_sync>
c000aea0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:312

			/* b 将块地址从数组 i_sectors 或 从一级间接索引表中去掉 */
			if (block_idx < 12) {	//直接块
c000aea3:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
c000aea7:	77 15                	ja     c000aebe <delete_dir_entry+0x2e0>
/work/x86_os_my/fs/dir.c:313
				dir_inode->i_sectors[block_idx] = 0;
c000aea9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000aeac:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000aeaf:	83 c2 04             	add    $0x4,%edx
c000aeb2:	c7 04 90 00 00 00 00 	movl   $0x0,(%eax,%edx,4)
/work/x86_os_my/fs/dir.c:305
		}

		/* 在此扇区中找到目录项后，清除该目录项并判断是否回收扇区，随后退出循环直接返回 */
		ASSERT(dir_entry_cnt >= 1);	//此扇区内的目录项个数
		/* 若该扇区上只有该目录项自己，则将整个扇区回收。如果目录只有第1个扇区，则不能回收 */
		if (dir_entry_cnt == 1 && !is_dir_first_block) {
c000aeb9:	e9 09 01 00 00       	jmp    c000afc7 <delete_dir_entry+0x3e9>
/work/x86_os_my/fs/dir.c:316
			/* b 将块地址从数组 i_sectors 或 从一级间接索引表中去掉 */
			if (block_idx < 12) {	//直接块
				dir_inode->i_sectors[block_idx] = 0;
			} else {	// 在一级间接索引表中擦除该间接块地址
				/*先判断一级间接索引表中间接块的数量：如果仅有这1个间接块，连同间接索引表所在的块一同回收 */
				uint32_t indirect_blocks = 0;
c000aebe:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
/work/x86_os_my/fs/dir.c:317
				uint32_t indirect_block_idx = 12;
c000aec5:	c7 45 cc 0c 00 00 00 	movl   $0xc,-0x34(%ebp)
/work/x86_os_my/fs/dir.c:318
				while (indirect_block_idx < 140) {
c000aecc:	eb 12                	jmp    c000aee0 <delete_dir_entry+0x302>
/work/x86_os_my/fs/dir.c:319
					if (all_blocks[indirect_block_idx] != 0) {
c000aece:	8b 45 cc             	mov    -0x34(%ebp),%eax
c000aed1:	8b 84 85 9c fd ff ff 	mov    -0x264(%ebp,%eax,4),%eax
c000aed8:	85 c0                	test   %eax,%eax
c000aeda:	74 04                	je     c000aee0 <delete_dir_entry+0x302>
/work/x86_os_my/fs/dir.c:320
						indirect_blocks++;	//间接块的数量
c000aedc:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
/work/x86_os_my/fs/dir.c:318
				dir_inode->i_sectors[block_idx] = 0;
			} else {	// 在一级间接索引表中擦除该间接块地址
				/*先判断一级间接索引表中间接块的数量：如果仅有这1个间接块，连同间接索引表所在的块一同回收 */
				uint32_t indirect_blocks = 0;
				uint32_t indirect_block_idx = 12;
				while (indirect_block_idx < 140) {
c000aee0:	81 7d cc 8b 00 00 00 	cmpl   $0x8b,-0x34(%ebp)
c000aee7:	76 e5                	jbe    c000aece <delete_dir_entry+0x2f0>
/work/x86_os_my/fs/dir.c:323
					if (all_blocks[indirect_block_idx] != 0) {
						indirect_blocks++;	//间接块的数量
					}
				}
				ASSERT(indirect_blocks >= 1);	// 包括当前间接块
c000aee9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c000aeed:	75 1c                	jne    c000af0b <delete_dir_entry+0x32d>
/work/x86_os_my/fs/dir.c:323 (discriminator 1)
c000aeef:	68 31 ea 00 c0       	push   $0xc000ea31
c000aef4:	68 08 eb 00 c0       	push   $0xc000eb08
c000aef9:	68 43 01 00 00       	push   $0x143
c000aefe:	68 7e e9 00 c0       	push   $0xc000e97e
c000af03:	e8 49 75 ff ff       	call   c0002451 <panic_spin>
c000af08:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:325

				if (indirect_blocks > 1) {	  // 一级间接索引表中还包括其它间接块,仅在索引表中擦除当前间接块地址
c000af0b:	83 7d e4 01          	cmpl   $0x1,-0x1c(%ebp)
c000af0f:	76 35                	jbe    c000af46 <delete_dir_entry+0x368>
/work/x86_os_my/fs/dir.c:326
					all_blocks[block_idx] = 0;
c000af11:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000af14:	c7 84 85 9c fd ff ff 	movl   $0x0,-0x264(%ebp,%eax,4)
c000af1b:	00 00 00 00 
/work/x86_os_my/fs/dir.c:327
					ide_write(part->my_disk, dir_inode->i_sectors[12], all_blocks + 12, 1);
c000af1f:	8d 85 9c fd ff ff    	lea    -0x264(%ebp),%eax
c000af25:	83 c0 30             	add    $0x30,%eax
c000af28:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000af2b:	8b 4a 40             	mov    0x40(%edx),%ecx
c000af2e:	8b 55 08             	mov    0x8(%ebp),%edx
c000af31:	8b 52 08             	mov    0x8(%edx),%edx
c000af34:	6a 01                	push   $0x1
c000af36:	50                   	push   %eax
c000af37:	51                   	push   %ecx
c000af38:	52                   	push   %edx
c000af39:	e8 6b b3 ff ff       	call   c00062a9 <ide_write>
c000af3e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:305
		}

		/* 在此扇区中找到目录项后，清除该目录项并判断是否回收扇区，随后退出循环直接返回 */
		ASSERT(dir_entry_cnt >= 1);	//此扇区内的目录项个数
		/* 若该扇区上只有该目录项自己，则将整个扇区回收。如果目录只有第1个扇区，则不能回收 */
		if (dir_entry_cnt == 1 && !is_dir_first_block) {
c000af41:	e9 81 00 00 00       	jmp    c000afc7 <delete_dir_entry+0x3e9>
/work/x86_os_my/fs/dir.c:330
				if (indirect_blocks > 1) {	  // 一级间接索引表中还包括其它间接块,仅在索引表中擦除当前间接块地址
					all_blocks[block_idx] = 0;
					ide_write(part->my_disk, dir_inode->i_sectors[12], all_blocks + 12, 1);
				} else {	// 间接索引表中就当前这1个间接块,直接把间接索引表所在的块回收,然后擦除间接索引表块地址
					/* 回收一级间接索引表所在的块 */
					block_bitmap_idx = dir_inode->i_sectors[12] - part->sb->data_start_lba;
c000af46:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000af49:	8b 50 40             	mov    0x40(%eax),%edx
c000af4c:	8b 45 08             	mov    0x8(%ebp),%eax
c000af4f:	8b 40 1c             	mov    0x1c(%eax),%eax
c000af52:	8b 40 28             	mov    0x28(%eax),%eax
c000af55:	29 c2                	sub    %eax,%edx
c000af57:	89 d0                	mov    %edx,%eax
c000af59:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/fs/dir.c:331
					bitmap_set(&part->block_bitmap, block_bitmap_idx, 0);
c000af5c:	8b 45 08             	mov    0x8(%ebp),%eax
c000af5f:	83 c0 20             	add    $0x20,%eax
c000af62:	83 ec 04             	sub    $0x4,%esp
c000af65:	6a 00                	push   $0x0
c000af67:	ff 75 d0             	pushl  -0x30(%ebp)
c000af6a:	50                   	push   %eax
c000af6b:	e8 4f 77 ff ff       	call   c00026bf <bitmap_set>
c000af70:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:332
					bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c000af73:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c000af78:	83 ec 04             	sub    $0x4,%esp
c000af7b:	6a 01                	push   $0x1
c000af7d:	ff 75 d0             	pushl  -0x30(%ebp)
c000af80:	50                   	push   %eax
c000af81:	e8 6e e5 ff ff       	call   c00094f4 <bitmap_sync>
c000af86:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:335

					/* 将间接索引表地址清0 */
					dir_inode->i_sectors[12] = 0;
c000af89:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000af8c:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)
/work/x86_os_my/fs/dir.c:305
		}

		/* 在此扇区中找到目录项后，清除该目录项并判断是否回收扇区，随后退出循环直接返回 */
		ASSERT(dir_entry_cnt >= 1);	//此扇区内的目录项个数
		/* 若该扇区上只有该目录项自己，则将整个扇区回收。如果目录只有第1个扇区，则不能回收 */
		if (dir_entry_cnt == 1 && !is_dir_first_block) {
c000af93:	eb 32                	jmp    c000afc7 <delete_dir_entry+0x3e9>
/work/x86_os_my/fs/dir.c:340
					dir_inode->i_sectors[12] = 0;
				}
			}
		} else {
		/* 仅将该目录项清空 */
			memset(dir_entry_found, 0, dir_entry_size);	//要删除的目录项在 dir_entry_found 中
c000af95:	83 ec 04             	sub    $0x4,%esp
c000af98:	ff 75 dc             	pushl  -0x24(%ebp)
c000af9b:	6a 00                	push   $0x0
c000af9d:	ff 75 f0             	pushl  -0x10(%ebp)
c000afa0:	e8 4e 89 ff ff       	call   c00038f3 <memset>
c000afa5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:341
			ide_write(part->my_disk, all_blocks[block_idx], io_buf, 1);	//io_buf中是所有的目录项
c000afa8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000afab:	8b 94 85 9c fd ff ff 	mov    -0x264(%ebp,%eax,4),%edx
c000afb2:	8b 45 08             	mov    0x8(%ebp),%eax
c000afb5:	8b 40 08             	mov    0x8(%eax),%eax
c000afb8:	6a 01                	push   $0x1
c000afba:	ff 75 14             	pushl  0x14(%ebp)
c000afbd:	52                   	push   %edx
c000afbe:	50                   	push   %eax
c000afbf:	e8 e5 b2 ff ff       	call   c00062a9 <ide_write>
c000afc4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:345
		}

		/* 更新inode信息并同步到硬盘 */
		ASSERT(dir_inode->i_size >= dir_entry_size);
c000afc7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000afca:	8b 40 04             	mov    0x4(%eax),%eax
c000afcd:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c000afd0:	73 1c                	jae    c000afee <delete_dir_entry+0x410>
/work/x86_os_my/fs/dir.c:345 (discriminator 1)
c000afd2:	68 48 ea 00 c0       	push   $0xc000ea48
c000afd7:	68 08 eb 00 c0       	push   $0xc000eb08
c000afdc:	68 59 01 00 00       	push   $0x159
c000afe1:	68 7e e9 00 c0       	push   $0xc000e97e
c000afe6:	e8 66 74 ff ff       	call   c0002451 <panic_spin>
c000afeb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:346
		dir_inode->i_size -= dir_entry_size;
c000afee:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000aff1:	8b 40 04             	mov    0x4(%eax),%eax
c000aff4:	2b 45 dc             	sub    -0x24(%ebp),%eax
c000aff7:	89 c2                	mov    %eax,%edx
c000aff9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000affc:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/dir.c:347
		memset(io_buf, 0, SECTOR_SIZE * 2);
c000afff:	83 ec 04             	sub    $0x4,%esp
c000b002:	68 00 04 00 00       	push   $0x400
c000b007:	6a 00                	push   $0x0
c000b009:	ff 75 14             	pushl  0x14(%ebp)
c000b00c:	e8 e2 88 ff ff       	call   c00038f3 <memset>
c000b011:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:349
		// 同步目录文件的inode到硬盘
		inode_sync(part, dir_inode, io_buf);
c000b014:	83 ec 04             	sub    $0x4,%esp
c000b017:	ff 75 14             	pushl  0x14(%ebp)
c000b01a:	ff 75 e0             	pushl  -0x20(%ebp)
c000b01d:	ff 75 08             	pushl  0x8(%ebp)
c000b020:	e8 ea dc ff ff       	call   c0008d0f <inode_sync>
c000b025:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:351

		return true;
c000b028:	b8 01 00 00 00       	mov    $0x1,%eax
c000b02d:	eb 12                	jmp    c000b041 <delete_dir_entry+0x463>
/work/x86_os_my/fs/dir.c:267
	uint8_t dir_entry_idx, dir_entry_cnt;
	bool is_dir_first_block = false;	// 目录的第1个块

	/* 遍历所有块，寻找目录项 */
	block_idx = 0;
	while (block_idx < 140) {
c000b02f:	81 7d f4 8b 00 00 00 	cmpl   $0x8b,-0xc(%ebp)
c000b036:	0f 86 59 fc ff ff    	jbe    c000ac95 <delete_dir_entry+0xb7>
/work/x86_os_my/fs/dir.c:355

		return true;
	}//while (block_idx < 140)

	/* 所有块中未找到则返回false，若出现这种情况应该是 serarch_file 出错了 */
	return false;
c000b03c:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/dir.c:356 (discriminator 1)
}
c000b041:	8b 7d fc             	mov    -0x4(%ebp),%edi
c000b044:	c9                   	leave  
c000b045:	c3                   	ret    

c000b046 <dir_read>:
dir_read():
/work/x86_os_my/fs/dir.c:361


/* 读取目录,成功返回1个目录项,失败返回NULL */
// dir->dir_pos 记录遍历目录时，"游标"在目录内的偏移【以前读到的目录项】
struct dir_entry* dir_read(struct dir* dir) {
c000b046:	55                   	push   %ebp
c000b047:	89 e5                	mov    %esp,%ebp
c000b049:	57                   	push   %edi
c000b04a:	81 ec 54 02 00 00    	sub    $0x254,%esp
/work/x86_os_my/fs/dir.c:362
	struct dir_entry* dir_e = (struct dir_entry*)dir->dir_buf;
c000b050:	8b 45 08             	mov    0x8(%ebp),%eax
c000b053:	83 c0 08             	add    $0x8,%eax
c000b056:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/dir.c:363
	struct inode* dir_inode = dir->inode;
c000b059:	8b 45 08             	mov    0x8(%ebp),%eax
c000b05c:	8b 00                	mov    (%eax),%eax
c000b05e:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/dir.c:364
	uint32_t all_blocks[140] = {0}, block_cnt = 12;
c000b061:	8d 95 a8 fd ff ff    	lea    -0x258(%ebp),%edx
c000b067:	b8 00 00 00 00       	mov    $0x0,%eax
c000b06c:	b9 8c 00 00 00       	mov    $0x8c,%ecx
c000b071:	89 d7                	mov    %edx,%edi
c000b073:	f3 ab                	rep stos %eax,%es:(%edi)
c000b075:	c7 45 f4 0c 00 00 00 	movl   $0xc,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:365
	uint32_t block_idx = 0, dir_entry_idx = 0;
c000b07c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c000b083:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:367
	// 所有数据块的地址，汇集到 all_blocks 中
	while (block_idx < 12) {
c000b08a:	eb 1a                	jmp    c000b0a6 <dir_read+0x60>
/work/x86_os_my/fs/dir.c:368
		all_blocks[block_idx] = dir_inode->i_sectors[block_idx];
c000b08c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000b08f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000b092:	83 c2 04             	add    $0x4,%edx
c000b095:	8b 14 90             	mov    (%eax,%edx,4),%edx
c000b098:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b09b:	89 94 85 a8 fd ff ff 	mov    %edx,-0x258(%ebp,%eax,4)
/work/x86_os_my/fs/dir.c:369
		block_idx++;
c000b0a2:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:367
	struct dir_entry* dir_e = (struct dir_entry*)dir->dir_buf;
	struct inode* dir_inode = dir->inode;
	uint32_t all_blocks[140] = {0}, block_cnt = 12;
	uint32_t block_idx = 0, dir_entry_idx = 0;
	// 所有数据块的地址，汇集到 all_blocks 中
	while (block_idx < 12) {
c000b0a6:	83 7d f0 0b          	cmpl   $0xb,-0x10(%ebp)
c000b0aa:	76 e0                	jbe    c000b08c <dir_read+0x46>
/work/x86_os_my/fs/dir.c:371
		all_blocks[block_idx] = dir_inode->i_sectors[block_idx];
		block_idx++;
	}
	if (dir_inode->i_sectors[12] != 0) {
c000b0ac:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000b0af:	8b 40 40             	mov    0x40(%eax),%eax
c000b0b2:	85 c0                	test   %eax,%eax
c000b0b4:	74 2c                	je     c000b0e2 <dir_read+0x9c>
/work/x86_os_my/fs/dir.c:372
		ide_read(cur_part->my_disk, dir_inode->i_sectors[12], all_blocks + 12, 1);
c000b0b6:	8d 85 a8 fd ff ff    	lea    -0x258(%ebp),%eax
c000b0bc:	83 c0 30             	add    $0x30,%eax
c000b0bf:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000b0c2:	8b 4a 40             	mov    0x40(%edx),%ecx
c000b0c5:	8b 15 10 30 01 c0    	mov    0xc0013010,%edx
c000b0cb:	8b 52 08             	mov    0x8(%edx),%edx
c000b0ce:	6a 01                	push   $0x1
c000b0d0:	50                   	push   %eax
c000b0d1:	51                   	push   %ecx
c000b0d2:	52                   	push   %edx
c000b0d3:	e8 5d b0 ff ff       	call   c0006135 <ide_read>
c000b0d8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:373
		block_cnt = 140;
c000b0db:	c7 45 f4 8c 00 00 00 	movl   $0x8c,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:375
	}
	block_idx = 0;
c000b0e2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:377

	uint32_t cur_dir_entry_pos = 0;	// 当前目录项的偏移,此项用来判断是否是之前已经返回过的目录项
c000b0e9:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
/work/x86_os_my/fs/dir.c:378
	uint32_t dir_entry_size = cur_part->sb->dir_entry_size;
c000b0f0:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c000b0f5:	8b 40 1c             	mov    0x1c(%eax),%eax
c000b0f8:	8b 40 30             	mov    0x30(%eax),%eax
c000b0fb:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:379
	uint32_t dir_entrys_per_sec = SECTOR_SIZE / dir_entry_size;	// 1扇区内可容纳的目录项个数
c000b0fe:	b8 00 02 00 00       	mov    $0x200,%eax
c000b103:	ba 00 00 00 00       	mov    $0x0,%edx
c000b108:	f7 75 dc             	divl   -0x24(%ebp)
c000b10b:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/dir.c:381
	/* 因为此目录内可能删除了某些文件或子目录,所以要遍历所有块 */
	while (block_idx < block_cnt) {
c000b10e:	e9 05 01 00 00       	jmp    c000b218 <dir_read+0x1d2>
/work/x86_os_my/fs/dir.c:382
		if (dir->dir_pos >= dir_inode->i_size) {	//dir_pos 记录遍历目录时，"游标"在目录内的偏移
c000b113:	8b 45 08             	mov    0x8(%ebp),%eax
c000b116:	8b 50 04             	mov    0x4(%eax),%edx
c000b119:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000b11c:	8b 40 04             	mov    0x4(%eax),%eax
c000b11f:	39 c2                	cmp    %eax,%edx
c000b121:	72 0a                	jb     c000b12d <dir_read+0xe7>
/work/x86_os_my/fs/dir.c:383
			return NULL;
c000b123:	b8 00 00 00 00       	mov    $0x0,%eax
c000b128:	e9 fc 00 00 00       	jmp    c000b229 <dir_read+0x1e3>
/work/x86_os_my/fs/dir.c:385
		}
		if (all_blocks[block_idx] == 0) {	// 如果此块地址为0,即空块,继续读出下一块
c000b12d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b130:	8b 84 85 a8 fd ff ff 	mov    -0x258(%ebp,%eax,4),%eax
c000b137:	85 c0                	test   %eax,%eax
c000b139:	75 09                	jne    c000b144 <dir_read+0xfe>
/work/x86_os_my/fs/dir.c:386
			block_idx++;
c000b13b:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:387
			continue;
c000b13f:	e9 d4 00 00 00       	jmp    c000b218 <dir_read+0x1d2>
/work/x86_os_my/fs/dir.c:389
		}
		memset(dir_e, 0, SECTOR_SIZE);
c000b144:	83 ec 04             	sub    $0x4,%esp
c000b147:	68 00 02 00 00       	push   $0x200
c000b14c:	6a 00                	push   $0x0
c000b14e:	ff 75 e4             	pushl  -0x1c(%ebp)
c000b151:	e8 9d 87 ff ff       	call   c00038f3 <memset>
c000b156:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:390
		ide_read(cur_part->my_disk, all_blocks[block_idx], dir_e, 1);
c000b159:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b15c:	8b 94 85 a8 fd ff ff 	mov    -0x258(%ebp,%eax,4),%edx
c000b163:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c000b168:	8b 40 08             	mov    0x8(%eax),%eax
c000b16b:	6a 01                	push   $0x1
c000b16d:	ff 75 e4             	pushl  -0x1c(%ebp)
c000b170:	52                   	push   %edx
c000b171:	50                   	push   %eax
c000b172:	e8 be af ff ff       	call   c0006135 <ide_read>
c000b177:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:391
		dir_entry_idx = 0;
c000b17a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:393
		/* 遍历扇区内所有目录项 */
		while (dir_entry_idx < dir_entrys_per_sec) {
c000b181:	e9 82 00 00 00       	jmp    c000b208 <dir_read+0x1c2>
/work/x86_os_my/fs/dir.c:394
			if ((dir_e + dir_entry_idx)->f_type) {	 // 如果f_type不等于0,即不等于FT_UNKNOWN
c000b186:	8b 55 ec             	mov    -0x14(%ebp),%edx
c000b189:	89 d0                	mov    %edx,%eax
c000b18b:	01 c0                	add    %eax,%eax
c000b18d:	01 d0                	add    %edx,%eax
c000b18f:	c1 e0 03             	shl    $0x3,%eax
c000b192:	89 c2                	mov    %eax,%edx
c000b194:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000b197:	01 d0                	add    %edx,%eax
c000b199:	8b 40 14             	mov    0x14(%eax),%eax
c000b19c:	85 c0                	test   %eax,%eax
c000b19e:	74 64                	je     c000b204 <dir_read+0x1be>
/work/x86_os_my/fs/dir.c:396
				/* 判断是不是最新的目录项,避免返回曾经已经返回过的目录项 */
				if (cur_dir_entry_pos < dir->dir_pos) {
c000b1a0:	8b 45 08             	mov    0x8(%ebp),%eax
c000b1a3:	8b 40 04             	mov    0x4(%eax),%eax
c000b1a6:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c000b1a9:	76 0c                	jbe    c000b1b7 <dir_read+0x171>
/work/x86_os_my/fs/dir.c:397
					cur_dir_entry_pos += dir_entry_size;
c000b1ab:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000b1ae:	01 45 e8             	add    %eax,-0x18(%ebp)
/work/x86_os_my/fs/dir.c:398
					dir_entry_idx++;
c000b1b1:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:399
					continue;
c000b1b5:	eb 51                	jmp    c000b208 <dir_read+0x1c2>
/work/x86_os_my/fs/dir.c:401
				}
				ASSERT(cur_dir_entry_pos == dir->dir_pos);
c000b1b7:	8b 45 08             	mov    0x8(%ebp),%eax
c000b1ba:	8b 40 04             	mov    0x4(%eax),%eax
c000b1bd:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c000b1c0:	74 1c                	je     c000b1de <dir_read+0x198>
/work/x86_os_my/fs/dir.c:401 (discriminator 1)
c000b1c2:	68 6c ea 00 c0       	push   $0xc000ea6c
c000b1c7:	68 1c eb 00 c0       	push   $0xc000eb1c
c000b1cc:	68 91 01 00 00       	push   $0x191
c000b1d1:	68 7e e9 00 c0       	push   $0xc000e97e
c000b1d6:	e8 76 72 ff ff       	call   c0002451 <panic_spin>
c000b1db:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:402
				dir->dir_pos += dir_entry_size;	      // 更新为新位置,即下一个返回的目录项地址
c000b1de:	8b 45 08             	mov    0x8(%ebp),%eax
c000b1e1:	8b 50 04             	mov    0x4(%eax),%edx
c000b1e4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000b1e7:	01 c2                	add    %eax,%edx
c000b1e9:	8b 45 08             	mov    0x8(%ebp),%eax
c000b1ec:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/dir.c:403
				return dir_e + dir_entry_idx;
c000b1ef:	8b 55 ec             	mov    -0x14(%ebp),%edx
c000b1f2:	89 d0                	mov    %edx,%eax
c000b1f4:	01 c0                	add    %eax,%eax
c000b1f6:	01 d0                	add    %edx,%eax
c000b1f8:	c1 e0 03             	shl    $0x3,%eax
c000b1fb:	89 c2                	mov    %eax,%edx
c000b1fd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000b200:	01 d0                	add    %edx,%eax
c000b202:	eb 25                	jmp    c000b229 <dir_read+0x1e3>
/work/x86_os_my/fs/dir.c:405
			}
			dir_entry_idx++;
c000b204:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:393
		}
		memset(dir_e, 0, SECTOR_SIZE);
		ide_read(cur_part->my_disk, all_blocks[block_idx], dir_e, 1);
		dir_entry_idx = 0;
		/* 遍历扇区内所有目录项 */
		while (dir_entry_idx < dir_entrys_per_sec) {
c000b208:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000b20b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
c000b20e:	0f 82 72 ff ff ff    	jb     c000b186 <dir_read+0x140>
/work/x86_os_my/fs/dir.c:407
				dir->dir_pos += dir_entry_size;	      // 更新为新位置,即下一个返回的目录项地址
				return dir_e + dir_entry_idx;
			}
			dir_entry_idx++;
		}
		block_idx++;
c000b214:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:381

	uint32_t cur_dir_entry_pos = 0;	// 当前目录项的偏移,此项用来判断是否是之前已经返回过的目录项
	uint32_t dir_entry_size = cur_part->sb->dir_entry_size;
	uint32_t dir_entrys_per_sec = SECTOR_SIZE / dir_entry_size;	// 1扇区内可容纳的目录项个数
	/* 因为此目录内可能删除了某些文件或子目录,所以要遍历所有块 */
	while (block_idx < block_cnt) {
c000b218:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b21b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c000b21e:	0f 82 ef fe ff ff    	jb     c000b113 <dir_read+0xcd>
/work/x86_os_my/fs/dir.c:409
			}
			dir_entry_idx++;
		}
		block_idx++;
	}
	return NULL;
c000b224:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/dir.c:410 (discriminator 1)
}
c000b229:	8b 7d fc             	mov    -0x4(%ebp),%edi
c000b22c:	c9                   	leave  
c000b22d:	c3                   	ret    

c000b22e <dir_is_empty>:
dir_is_empty():
/work/x86_os_my/fs/dir.c:413

/* 判断目录是否为空 */
bool dir_is_empty(struct dir* dir) {
c000b22e:	55                   	push   %ebp
c000b22f:	89 e5                	mov    %esp,%ebp
c000b231:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/fs/dir.c:414
	struct inode* dir_inode = dir->inode;
c000b234:	8b 45 08             	mov    0x8(%ebp),%eax
c000b237:	8b 00                	mov    (%eax),%eax
c000b239:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/fs/dir.c:416
	/* 若目录下只有.和..这两个目录项则目录为空 */
	return (dir_inode->i_size == cur_part->sb->dir_entry_size * 2);
c000b23c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000b23f:	8b 50 04             	mov    0x4(%eax),%edx
c000b242:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c000b247:	8b 40 1c             	mov    0x1c(%eax),%eax
c000b24a:	8b 40 30             	mov    0x30(%eax),%eax
c000b24d:	01 c0                	add    %eax,%eax
c000b24f:	39 c2                	cmp    %eax,%edx
c000b251:	0f 94 c0             	sete   %al
c000b254:	0f b6 c0             	movzbl %al,%eax
/work/x86_os_my/fs/dir.c:417
}
c000b257:	c9                   	leave  
c000b258:	c3                   	ret    

c000b259 <dir_remove>:
dir_remove():
/work/x86_os_my/fs/dir.c:420

/* 在父目录parent_dir中删除child_dir */
int32_t dir_remove(struct dir* parent_dir, struct dir* child_dir) {
c000b259:	55                   	push   %ebp
c000b25a:	89 e5                	mov    %esp,%ebp
c000b25c:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/dir.c:421
	struct inode* child_dir_inode  = child_dir->inode;
c000b25f:	8b 45 0c             	mov    0xc(%ebp),%eax
c000b262:	8b 00                	mov    (%eax),%eax
c000b264:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:423
	/* 空目录只在inode->i_sectors[0]中有扇区,其它扇区都应该为空 */
	int32_t block_idx = 1;
c000b267:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:424
	while (block_idx < 13) {
c000b26e:	eb 30                	jmp    c000b2a0 <dir_remove+0x47>
/work/x86_os_my/fs/dir.c:425
		ASSERT(child_dir_inode->i_sectors[block_idx] == 0);
c000b270:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b273:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000b276:	83 c2 04             	add    $0x4,%edx
c000b279:	8b 04 90             	mov    (%eax,%edx,4),%eax
c000b27c:	85 c0                	test   %eax,%eax
c000b27e:	74 1c                	je     c000b29c <dir_remove+0x43>
/work/x86_os_my/fs/dir.c:425 (discriminator 1)
c000b280:	68 90 ea 00 c0       	push   $0xc000ea90
c000b285:	68 28 eb 00 c0       	push   $0xc000eb28
c000b28a:	68 a9 01 00 00       	push   $0x1a9
c000b28f:	68 7e e9 00 c0       	push   $0xc000e97e
c000b294:	e8 b8 71 ff ff       	call   c0002451 <panic_spin>
c000b299:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:426
		block_idx++;
c000b29c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:424
/* 在父目录parent_dir中删除child_dir */
int32_t dir_remove(struct dir* parent_dir, struct dir* child_dir) {
	struct inode* child_dir_inode  = child_dir->inode;
	/* 空目录只在inode->i_sectors[0]中有扇区,其它扇区都应该为空 */
	int32_t block_idx = 1;
	while (block_idx < 13) {
c000b2a0:	83 7d f4 0c          	cmpl   $0xc,-0xc(%ebp)
c000b2a4:	7e ca                	jle    c000b270 <dir_remove+0x17>
/work/x86_os_my/fs/dir.c:428
		ASSERT(child_dir_inode->i_sectors[block_idx] == 0);
		block_idx++;
	}
	void* io_buf = sys_malloc(SECTOR_SIZE * 2);
c000b2a6:	83 ec 0c             	sub    $0xc,%esp
c000b2a9:	68 00 04 00 00       	push   $0x400
c000b2ae:	e8 49 7b ff ff       	call   c0002dfc <sys_malloc>
c000b2b3:	83 c4 10             	add    $0x10,%esp
c000b2b6:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:429
	if (io_buf == NULL) {
c000b2b9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c000b2bd:	75 17                	jne    c000b2d6 <dir_remove+0x7d>
/work/x86_os_my/fs/dir.c:430
		printk("dir_remove: malloc for io_buf failed\n");
c000b2bf:	83 ec 0c             	sub    $0xc,%esp
c000b2c2:	68 bc ea 00 c0       	push   $0xc000eabc
c000b2c7:	e8 e2 b8 ff ff       	call   c0006bae <printk>
c000b2cc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:431
		return -1;
c000b2cf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000b2d4:	eb 44                	jmp    c000b31a <dir_remove+0xc1>
/work/x86_os_my/fs/dir.c:435
	}

	/* 在父目录parent_dir中删除子目录child_dir对应的"目录项" */
	delete_dir_entry(cur_part, parent_dir, child_dir_inode->i_no, io_buf);
c000b2d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b2d9:	8b 10                	mov    (%eax),%edx
c000b2db:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c000b2e0:	ff 75 ec             	pushl  -0x14(%ebp)
c000b2e3:	52                   	push   %edx
c000b2e4:	ff 75 08             	pushl  0x8(%ebp)
c000b2e7:	50                   	push   %eax
c000b2e8:	e8 f1 f8 ff ff       	call   c000abde <delete_dir_entry>
c000b2ed:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:438

	/* 回收inode中i_secotrs中所占用的扇区,并同步inode_bitmap和block_bitmap */
	inode_release(cur_part, child_dir_inode->i_no);
c000b2f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b2f3:	8b 10                	mov    (%eax),%edx
c000b2f5:	a1 10 30 01 c0       	mov    0xc0013010,%eax
c000b2fa:	83 ec 08             	sub    $0x8,%esp
c000b2fd:	52                   	push   %edx
c000b2fe:	50                   	push   %eax
c000b2ff:	e8 06 de ff ff       	call   c000910a <inode_release>
c000b304:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:439
	sys_free(io_buf);
c000b307:	83 ec 0c             	sub    $0xc,%esp
c000b30a:	ff 75 ec             	pushl  -0x14(%ebp)
c000b30d:	e8 17 81 ff ff       	call   c0003429 <sys_free>
c000b312:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:440
	return 0;
c000b315:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/dir.c:441
}
c000b31a:	c9                   	leave  
c000b31b:	c3                   	ret    

c000b31c <copy_pcb_vaddrbitmap_stack0>:
copy_pcb_vaddrbitmap_stack0():
/work/x86_os_my/userprog/fork.c:13
#include "file.h"

extern void intr_exit(void);

/* 将父进程的pcb、虚拟地址位图拷贝给子进程 */
static int32_t copy_pcb_vaddrbitmap_stack0(struct task_struct* child_thread, struct task_struct* parent_thread) {
c000b31c:	55                   	push   %ebp
c000b31d:	89 e5                	mov    %esp,%ebp
c000b31f:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/fork.c:17
	/* a 复制pcb所在的整个页,里面包含进程pcb信息 + 0特权级的栈
	栈里面包含了返回地址
	然后再单独修改个别部分 */
	memcpy(child_thread, parent_thread, PG_SIZE);
c000b322:	83 ec 04             	sub    $0x4,%esp
c000b325:	68 00 10 00 00       	push   $0x1000
c000b32a:	ff 75 0c             	pushl  0xc(%ebp)
c000b32d:	ff 75 08             	pushl  0x8(%ebp)
c000b330:	e8 10 86 ff ff       	call   c0003945 <memcpy>
c000b335:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:19
	// 初始化PCB部分
	child_thread->pid = fork_pid();
c000b338:	e8 0d 8a ff ff       	call   c0003d4a <fork_pid>
c000b33d:	89 c2                	mov    %eax,%edx
c000b33f:	8b 45 08             	mov    0x8(%ebp),%eax
c000b342:	66 89 50 04          	mov    %dx,0x4(%eax)
/work/x86_os_my/userprog/fork.c:20
	child_thread->elapsed_ticks = 0;
c000b346:	8b 45 08             	mov    0x8(%ebp),%eax
c000b349:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
/work/x86_os_my/userprog/fork.c:21
	child_thread->status = TASK_READY;
c000b350:	8b 45 08             	mov    0x8(%ebp),%eax
c000b353:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/userprog/fork.c:22
	child_thread->ticks = child_thread->priority;   // 为新进程把时间片充满
c000b35a:	8b 45 08             	mov    0x8(%ebp),%eax
c000b35d:	0f b6 50 1c          	movzbl 0x1c(%eax),%edx
c000b361:	8b 45 08             	mov    0x8(%ebp),%eax
c000b364:	88 50 1d             	mov    %dl,0x1d(%eax)
/work/x86_os_my/userprog/fork.c:23
	child_thread->parent_pid = parent_thread->pid;
c000b367:	8b 45 0c             	mov    0xc(%ebp),%eax
c000b36a:	0f b7 50 04          	movzwl 0x4(%eax),%edx
c000b36e:	8b 45 08             	mov    0x8(%ebp),%eax
c000b371:	66 89 90 10 01 00 00 	mov    %dx,0x110(%eax)
/work/x86_os_my/userprog/fork.c:24
	child_thread->general_tag.prev = child_thread->general_tag.next = NULL;
c000b378:	8b 45 08             	mov    0x8(%ebp),%eax
c000b37b:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
c000b382:	8b 45 08             	mov    0x8(%ebp),%eax
c000b385:	8b 50 48             	mov    0x48(%eax),%edx
c000b388:	8b 45 08             	mov    0x8(%ebp),%eax
c000b38b:	89 50 44             	mov    %edx,0x44(%eax)
/work/x86_os_my/userprog/fork.c:25
	child_thread->all_list_tag.prev = child_thread->all_list_tag.next = NULL;
c000b38e:	8b 45 08             	mov    0x8(%ebp),%eax
c000b391:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
c000b398:	8b 45 08             	mov    0x8(%ebp),%eax
c000b39b:	8b 50 50             	mov    0x50(%eax),%edx
c000b39e:	8b 45 08             	mov    0x8(%ebp),%eax
c000b3a1:	89 50 4c             	mov    %edx,0x4c(%eax)
/work/x86_os_my/userprog/fork.c:27
	// 子进程内存块（堆内存）
	block_desc_init(child_thread->u_block_desc);
c000b3a4:	8b 45 08             	mov    0x8(%ebp),%eax
c000b3a7:	83 c0 64             	add    $0x64,%eax
c000b3aa:	83 ec 0c             	sub    $0xc,%esp
c000b3ad:	50                   	push   %eax
c000b3ae:	e8 5c 84 ff ff       	call   c000380f <block_desc_init>
c000b3b3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:29
	/* b 复制父进程的虚拟地址池的位图  可执行程序入口地址：USER_VADDR_START==0x8048000 */
	uint32_t bitmap_pg_cnt = DIV_ROUND_UP((0xc0000000 - USER_VADDR_START) / PG_SIZE / 8 , PG_SIZE);
c000b3b6:	c7 45 f4 17 00 00 00 	movl   $0x17,-0xc(%ebp)
/work/x86_os_my/userprog/fork.c:30
	void* vaddr_btmp = get_kernel_pages(bitmap_pg_cnt);
c000b3bd:	83 ec 0c             	sub    $0xc,%esp
c000b3c0:	ff 75 f4             	pushl  -0xc(%ebp)
c000b3c3:	e8 31 77 ff ff       	call   c0002af9 <get_kernel_pages>
c000b3c8:	83 c4 10             	add    $0x10,%esp
c000b3cb:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/fork.c:31
	if (vaddr_btmp == NULL)
c000b3ce:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c000b3d2:	75 07                	jne    c000b3db <copy_pcb_vaddrbitmap_stack0+0xbf>
/work/x86_os_my/userprog/fork.c:32
		return -1;
c000b3d4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000b3d9:	eb 2c                	jmp    c000b407 <copy_pcb_vaddrbitmap_stack0+0xeb>
/work/x86_os_my/userprog/fork.c:35
	/* 此时child_thread->userprog_vaddr.vaddr_bitmap.bits还是指向父进程虚拟地址的位图地址
	 * 下面将child_thread->userprog_vaddr.vaddr_bitmap.bits指向自己的位图vaddr_btmp */
	memcpy(vaddr_btmp, child_thread->userprog_vaddr.vaddr_bitmap.bits, bitmap_pg_cnt * PG_SIZE);	//复制父进程的虚拟地址位图
c000b3db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b3de:	c1 e0 0c             	shl    $0xc,%eax
c000b3e1:	89 c2                	mov    %eax,%edx
c000b3e3:	8b 45 08             	mov    0x8(%ebp),%eax
c000b3e6:	8b 40 5c             	mov    0x5c(%eax),%eax
c000b3e9:	83 ec 04             	sub    $0x4,%esp
c000b3ec:	52                   	push   %edx
c000b3ed:	50                   	push   %eax
c000b3ee:	ff 75 f0             	pushl  -0x10(%ebp)
c000b3f1:	e8 4f 85 ff ff       	call   c0003945 <memcpy>
c000b3f6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:36
	child_thread->userprog_vaddr.vaddr_bitmap.bits = vaddr_btmp;	//指向子进程自己的了
c000b3f9:	8b 45 08             	mov    0x8(%ebp),%eax
c000b3fc:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000b3ff:	89 50 5c             	mov    %edx,0x5c(%eax)
/work/x86_os_my/userprog/fork.c:38

	return 0;
c000b402:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/userprog/fork.c:39
}
c000b407:	c9                   	leave  
c000b408:	c3                   	ret    

c000b409 <copy_body_stack3>:
copy_body_stack3():
/work/x86_os_my/userprog/fork.c:72
+----------------------+
|          text        |
+----------------------+ 0
    C程序内存布局
*/
static void copy_body_stack3(struct task_struct* child_thread, struct task_struct* parent_thread, void* buf_page) {
c000b409:	55                   	push   %ebp
c000b40a:	89 e5                	mov    %esp,%ebp
c000b40c:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/userprog/fork.c:73
	uint8_t* vaddr_btmp = parent_thread->userprog_vaddr.vaddr_bitmap.bits;
c000b40f:	8b 45 0c             	mov    0xc(%ebp),%eax
c000b412:	8b 40 5c             	mov    0x5c(%eax),%eax
c000b415:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/userprog/fork.c:74
	uint32_t btmp_bytes_len = parent_thread->userprog_vaddr.vaddr_bitmap.btmp_bytes_len;
c000b418:	8b 45 0c             	mov    0xc(%ebp),%eax
c000b41b:	8b 40 58             	mov    0x58(%eax),%eax
c000b41e:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/userprog/fork.c:75
	uint32_t vaddr_start = parent_thread->userprog_vaddr.vaddr_start;
c000b421:	8b 45 0c             	mov    0xc(%ebp),%eax
c000b424:	8b 40 60             	mov    0x60(%eax),%eax
c000b427:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/userprog/fork.c:76
	uint32_t idx_byte = 0;
c000b42a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/userprog/fork.c:77
	uint32_t idx_bit = 0;
c000b431:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/userprog/fork.c:78
	uint32_t prog_vaddr = 0;
c000b438:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
/work/x86_os_my/userprog/fork.c:81

	/* 在父进程的用户空间中查找已有数据的页，按页一一拷贝给子进程 */
	while (idx_byte < btmp_bytes_len) {
c000b43f:	e9 c5 00 00 00       	jmp    c000b509 <copy_body_stack3+0x100>
/work/x86_os_my/userprog/fork.c:82
		if (vaddr_btmp[idx_byte]) {
c000b444:	8b 55 ec             	mov    -0x14(%ebp),%edx
c000b447:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b44a:	01 d0                	add    %edx,%eax
c000b44c:	0f b6 00             	movzbl (%eax),%eax
c000b44f:	84 c0                	test   %al,%al
c000b451:	0f 84 ae 00 00 00    	je     c000b505 <copy_body_stack3+0xfc>
/work/x86_os_my/userprog/fork.c:83
			idx_bit = 0;
c000b457:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/userprog/fork.c:84
			while (idx_bit < 8) {
c000b45e:	e9 98 00 00 00       	jmp    c000b4fb <copy_body_stack3+0xf2>
/work/x86_os_my/userprog/fork.c:85
				if ((BITMAP_MASK << idx_bit) & vaddr_btmp[idx_byte]) {	//BITMAP_MASK=1
c000b463:	8b 55 ec             	mov    -0x14(%ebp),%edx
c000b466:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b469:	01 d0                	add    %edx,%eax
c000b46b:	0f b6 00             	movzbl (%eax),%eax
c000b46e:	0f b6 d0             	movzbl %al,%edx
c000b471:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b474:	89 c1                	mov    %eax,%ecx
c000b476:	d3 fa                	sar    %cl,%edx
c000b478:	89 d0                	mov    %edx,%eax
c000b47a:	83 e0 01             	and    $0x1,%eax
c000b47d:	85 c0                	test   %eax,%eax
c000b47f:	74 76                	je     c000b4f7 <copy_body_stack3+0xee>
/work/x86_os_my/userprog/fork.c:86
					prog_vaddr = (idx_byte * 8 + idx_bit) * PG_SIZE + vaddr_start;
c000b481:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b484:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c000b48b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b48e:	01 d0                	add    %edx,%eax
c000b490:	c1 e0 0c             	shl    $0xc,%eax
c000b493:	89 c2                	mov    %eax,%edx
c000b495:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000b498:	01 d0                	add    %edx,%eax
c000b49a:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/userprog/fork.c:91
					/* 下面的操作是将父进程用户空间中的数据通过内核空间做中转,最终复制到子进程的用户空间 */

					/* a 将父进程在用户空间中的数据复制到"内核缓冲区buf_page"
					目的：下面切换到子进程的页表后,还能访问到父进程的数据*/
					memcpy(buf_page, (void*)prog_vaddr, PG_SIZE);
c000b49d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000b4a0:	83 ec 04             	sub    $0x4,%esp
c000b4a3:	68 00 10 00 00       	push   $0x1000
c000b4a8:	50                   	push   %eax
c000b4a9:	ff 75 10             	pushl  0x10(%ebp)
c000b4ac:	e8 94 84 ff ff       	call   c0003945 <memcpy>
c000b4b1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:94

					/* b 将页表切换到子进程，下面申请内存的函数，将pte及pde安装在子进程的页表中 */
					page_dir_activate(child_thread);
c000b4b4:	83 ec 0c             	sub    $0xc,%esp
c000b4b7:	ff 75 08             	pushl  0x8(%ebp)
c000b4ba:	e8 7e a0 ff ff       	call   c000553d <page_dir_activate>
c000b4bf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:96
					/* c 申请虚拟地址prog_vaddr */
					get_a_page_without_opvaddrbitmap(PF_USER, prog_vaddr);	//位图已经拷贝过了，当然不用再操作了...
c000b4c2:	83 ec 08             	sub    $0x8,%esp
c000b4c5:	ff 75 e0             	pushl  -0x20(%ebp)
c000b4c8:	6a 02                	push   $0x2
c000b4ca:	e8 50 78 ff ff       	call   c0002d1f <get_a_page_without_opvaddrbitmap>
c000b4cf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:99

					/* d 从内核缓冲区中将父进程数据复制到子进程的用户空间 */
					memcpy((void*)prog_vaddr, buf_page, PG_SIZE);
c000b4d2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000b4d5:	83 ec 04             	sub    $0x4,%esp
c000b4d8:	68 00 10 00 00       	push   $0x1000
c000b4dd:	ff 75 10             	pushl  0x10(%ebp)
c000b4e0:	50                   	push   %eax
c000b4e1:	e8 5f 84 ff ff       	call   c0003945 <memcpy>
c000b4e6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:102

					/* e 恢复父进程页表 */
					page_dir_activate(parent_thread);
c000b4e9:	83 ec 0c             	sub    $0xc,%esp
c000b4ec:	ff 75 0c             	pushl  0xc(%ebp)
c000b4ef:	e8 49 a0 ff ff       	call   c000553d <page_dir_activate>
c000b4f4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:104
				}
				idx_bit++;
c000b4f7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/userprog/fork.c:84

	/* 在父进程的用户空间中查找已有数据的页，按页一一拷贝给子进程 */
	while (idx_byte < btmp_bytes_len) {
		if (vaddr_btmp[idx_byte]) {
			idx_bit = 0;
			while (idx_bit < 8) {
c000b4fb:	83 7d f0 07          	cmpl   $0x7,-0x10(%ebp)
c000b4ff:	0f 86 5e ff ff ff    	jbe    c000b463 <copy_body_stack3+0x5a>
/work/x86_os_my/userprog/fork.c:107
					page_dir_activate(parent_thread);
				}
				idx_bit++;
			}
		}
		idx_byte++;
c000b505:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/userprog/fork.c:81
	uint32_t idx_byte = 0;
	uint32_t idx_bit = 0;
	uint32_t prog_vaddr = 0;

	/* 在父进程的用户空间中查找已有数据的页，按页一一拷贝给子进程 */
	while (idx_byte < btmp_bytes_len) {
c000b509:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b50c:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c000b50f:	0f 82 2f ff ff ff    	jb     c000b444 <copy_body_stack3+0x3b>
/work/x86_os_my/userprog/fork.c:109
				idx_bit++;
			}
		}
		idx_byte++;
	}
}
c000b515:	90                   	nop
c000b516:	c9                   	leave  
c000b517:	c3                   	ret    

c000b518 <build_child_stack>:
build_child_stack():
/work/x86_os_my/userprog/fork.c:172
为了让子进程也能继续 fork 之后的代码运行，必须让它同父进程一样，从中断退出，也就是要经过 intr_exit。

子进程是由调度器 schedule 调度执行的，它要用到 switch_to 函数，
而 switch_to 函数要从栈 thread_stack 中恢复上下文，因此我们要想办法构建出合适的 thread_stack
*/
static int32_t build_child_stack(struct task_struct* child_thread) {
c000b518:	55                   	push   %ebp
c000b519:	89 e5                	mov    %esp,%ebp
c000b51b:	83 ec 20             	sub    $0x20,%esp
/work/x86_os_my/userprog/fork.c:175
	/* a 使子进程pid返回值为0 */
	/* 获取子进程0级栈栈顶 */
	struct intr_stack* intr_0_stack = (struct intr_stack*)((uint32_t)child_thread + PG_SIZE - sizeof(struct intr_stack));
c000b51e:	8b 45 08             	mov    0x8(%ebp),%eax
c000b521:	05 b4 0f 00 00       	add    $0xfb4,%eax
c000b526:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/userprog/fork.c:177
	/* 修改子进程的返回值为0 */
	intr_0_stack->eax = 0;	//根据 abi 约定，eax 寄存器中是函数返回值!!!
c000b529:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000b52c:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
/work/x86_os_my/userprog/fork.c:180

	/* b 为 switch_to 构建线程栈 struct thread_stack,将其构建在紧临intr_stack之下的空间*/
	uint32_t* ret_addr_in_thread_stack  = (uint32_t*)intr_0_stack - 1;	// 任务切换后新任务的返回地址 eip
c000b533:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000b536:	83 e8 04             	sub    $0x4,%eax
c000b539:	89 45 f8             	mov    %eax,-0x8(%ebp)
/work/x86_os_my/userprog/fork.c:183

	/***   这三行不是必要的,只是为了梳理 thread_stack 中的关系 ***/
	uint32_t* esi_ptr_in_thread_stack = (uint32_t*)intr_0_stack - 2;
c000b53c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000b53f:	83 e8 08             	sub    $0x8,%eax
c000b542:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/fork.c:184
	uint32_t* edi_ptr_in_thread_stack = (uint32_t*)intr_0_stack - 3;
c000b545:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000b548:	83 e8 0c             	sub    $0xc,%eax
c000b54b:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/fork.c:185
	uint32_t* ebx_ptr_in_thread_stack = (uint32_t*)intr_0_stack - 4;
c000b54e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000b551:	83 e8 10             	sub    $0x10,%eax
c000b554:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/userprog/fork.c:192

	/* ebp 在 thread_stack 中的地址便是当时的esp(0级栈的栈顶)，即栈顶esp = (uint32_t*)intr_0_stack - 5 */
	/* 指针 ebp_ptr_in_thread_stack，它是 thread_stack 的栈顶，
	 * 必须把它的值存放在 pcb 中偏移为 0 的地方，即 task_struct 中的 self_kstack 处，
	 * 将来 switch_to 要用它作为栈顶，并且执行一系列的 pop 来恢复上下文。 */
	uint32_t* ebp_ptr_in_thread_stack = (uint32_t*)intr_0_stack - 5;
c000b557:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000b55a:	83 e8 14             	sub    $0x14,%eax
c000b55d:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/userprog/fork.c:195

	/* switch_to的返回地址更新为intr_exit，直接从中断返回 */
	*ret_addr_in_thread_stack = (uint32_t)intr_exit;	// kernel.S
c000b560:	ba 40 1d 00 c0       	mov    $0xc0001d40,%edx
c000b565:	8b 45 f8             	mov    -0x8(%ebp),%eax
c000b568:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/userprog/fork.c:199

	/* 下面这个赋值只是为了使构建的 thread_stack 更加清晰,其实也不需要,
	 * 因为在进入intr_exit后一系列的pop会把寄存器中的数据覆盖 */
	*ebp_ptr_in_thread_stack = *ebx_ptr_in_thread_stack = *edi_ptr_in_thread_stack = *esi_ptr_in_thread_stack = 0;
c000b56a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b56d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c000b573:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b576:	8b 10                	mov    (%eax),%edx
c000b578:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b57b:	89 10                	mov    %edx,(%eax)
c000b57d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b580:	8b 10                	mov    (%eax),%edx
c000b582:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000b585:	89 10                	mov    %edx,(%eax)
c000b587:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000b58a:	8b 10                	mov    (%eax),%edx
c000b58c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000b58f:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/userprog/fork.c:203
	/*********************************************************/

	/* 把构建的 thread_stack 的栈顶做为 switch_to 恢复数据时的栈顶 */
	child_thread->self_kstack = ebp_ptr_in_thread_stack;	//线程内核栈栈顶 self_kstack 总是和 esp 来回赋值~
c000b591:	8b 45 08             	mov    0x8(%ebp),%eax
c000b594:	8b 55 e8             	mov    -0x18(%ebp),%edx
c000b597:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/userprog/fork.c:210
	在被换下处理器前，我们会把线程的上下文信息保存在 0 特权级栈中，
	self_kstack 便用来记录 0 特权级栈在保存线程上下文后，新的栈顶，
	在下一次此线程又被调度到处理器上时，
	把 self_kstack 的值加载到 esp 寄存器，这样便从 0 特权级栈中获取了线程上下文，从而可以加载到处理器中运行。
	*/
	return 0;
c000b599:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/userprog/fork.c:211
}
c000b59e:	c9                   	leave  
c000b59f:	c3                   	ret    

c000b5a0 <update_inode_open_cnts>:
update_inode_open_cnts():
/work/x86_os_my/userprog/fork.c:214

/* 更新inode打开数 */
static void update_inode_open_cnts(struct task_struct* thread) {
c000b5a0:	55                   	push   %ebp
c000b5a1:	89 e5                	mov    %esp,%ebp
c000b5a3:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/fork.c:215
	int32_t local_fd = 3, global_fd = 0;
c000b5a6:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
c000b5ad:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/userprog/fork.c:216
	while (local_fd < MAX_FILES_OPEN_PER_PROC) {	//遍历线程打开的所有文件
c000b5b4:	eb 58                	jmp    c000b60e <update_inode_open_cnts+0x6e>
/work/x86_os_my/userprog/fork.c:217
		global_fd = thread->fd_table[local_fd];
c000b5b6:	8b 45 08             	mov    0x8(%ebp),%eax
c000b5b9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000b5bc:	83 c2 08             	add    $0x8,%edx
c000b5bf:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
c000b5c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/fork.c:218
		ASSERT(global_fd < MAX_FILE_OPEN);
c000b5c6:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c000b5ca:	7e 1c                	jle    c000b5e8 <update_inode_open_cnts+0x48>
/work/x86_os_my/userprog/fork.c:218 (discriminator 1)
c000b5cc:	68 34 eb 00 c0       	push   $0xc000eb34
c000b5d1:	68 18 ec 00 c0       	push   $0xc000ec18
c000b5d6:	68 da 00 00 00       	push   $0xda
c000b5db:	68 4e eb 00 c0       	push   $0xc000eb4e
c000b5e0:	e8 6c 6e ff ff       	call   c0002451 <panic_spin>
c000b5e5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:219
		if (global_fd != -1) {
c000b5e8:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c000b5ec:	74 1c                	je     c000b60a <update_inode_open_cnts+0x6a>
/work/x86_os_my/userprog/fork.c:220
			file_table[global_fd].fd_inode->i_open_cnts++;	//线程打开的所有文件的inode->open_cnt加一
c000b5ee:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000b5f1:	89 d0                	mov    %edx,%eax
c000b5f3:	01 c0                	add    %eax,%eax
c000b5f5:	01 d0                	add    %edx,%eax
c000b5f7:	c1 e0 02             	shl    $0x2,%eax
c000b5fa:	05 28 30 01 c0       	add    $0xc0013028,%eax
c000b5ff:	8b 00                	mov    (%eax),%eax
c000b601:	8b 50 08             	mov    0x8(%eax),%edx
c000b604:	83 c2 01             	add    $0x1,%edx
c000b607:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/userprog/fork.c:222
		}
		local_fd++;
c000b60a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/userprog/fork.c:216
}

/* 更新inode打开数 */
static void update_inode_open_cnts(struct task_struct* thread) {
	int32_t local_fd = 3, global_fd = 0;
	while (local_fd < MAX_FILES_OPEN_PER_PROC) {	//遍历线程打开的所有文件
c000b60e:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
c000b612:	7e a2                	jle    c000b5b6 <update_inode_open_cnts+0x16>
/work/x86_os_my/userprog/fork.c:224
		if (global_fd != -1) {
			file_table[global_fd].fd_inode->i_open_cnts++;	//线程打开的所有文件的inode->open_cnt加一
		}
		local_fd++;
	}
}
c000b614:	90                   	nop
c000b615:	c9                   	leave  
c000b616:	c3                   	ret    

c000b617 <copy_process>:
copy_process():
/work/x86_os_my/userprog/fork.c:227

/* 拷贝父进程本身所占资源给子进程 */
static int32_t copy_process(struct task_struct* child_thread, struct task_struct* parent_thread) {
c000b617:	55                   	push   %ebp
c000b618:	89 e5                	mov    %esp,%ebp
c000b61a:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/fork.c:229
	/* 内核缓冲区,作为父进程用户空间的数据，复制到子进程用户空间，的中转 */
	void* buf_page = get_kernel_pages(1);
c000b61d:	83 ec 0c             	sub    $0xc,%esp
c000b620:	6a 01                	push   $0x1
c000b622:	e8 d2 74 ff ff       	call   c0002af9 <get_kernel_pages>
c000b627:	83 c4 10             	add    $0x10,%esp
c000b62a:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/fork.c:230
	if (buf_page == NULL) {
c000b62d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c000b631:	75 0a                	jne    c000b63d <copy_process+0x26>
/work/x86_os_my/userprog/fork.c:231
		return -1;
c000b633:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000b638:	e9 82 00 00 00       	jmp    c000b6bf <copy_process+0xa8>
/work/x86_os_my/userprog/fork.c:235
	}

	/* a 复制父进程的pcb、虚拟地址位图、内核栈到子进程 */
	if (copy_pcb_vaddrbitmap_stack0(child_thread, parent_thread) == -1) {
c000b63d:	83 ec 08             	sub    $0x8,%esp
c000b640:	ff 75 0c             	pushl  0xc(%ebp)
c000b643:	ff 75 08             	pushl  0x8(%ebp)
c000b646:	e8 d1 fc ff ff       	call   c000b31c <copy_pcb_vaddrbitmap_stack0>
c000b64b:	83 c4 10             	add    $0x10,%esp
c000b64e:	83 f8 ff             	cmp    $0xffffffff,%eax
c000b651:	75 07                	jne    c000b65a <copy_process+0x43>
/work/x86_os_my/userprog/fork.c:236
		return -1;
c000b653:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000b658:	eb 65                	jmp    c000b6bf <copy_process+0xa8>
/work/x86_os_my/userprog/fork.c:240
	}

	/* b 为子进程创建页表,此页表仅包括内核空间 */
	child_thread->pgdir = create_page_dir();
c000b65a:	e8 61 9f ff ff       	call   c00055c0 <create_page_dir>
c000b65f:	89 c2                	mov    %eax,%edx
c000b661:	8b 45 08             	mov    0x8(%ebp),%eax
c000b664:	89 50 54             	mov    %edx,0x54(%eax)
/work/x86_os_my/userprog/fork.c:241
	if(child_thread->pgdir == NULL) {
c000b667:	8b 45 08             	mov    0x8(%ebp),%eax
c000b66a:	8b 40 54             	mov    0x54(%eax),%eax
c000b66d:	85 c0                	test   %eax,%eax
c000b66f:	75 07                	jne    c000b678 <copy_process+0x61>
/work/x86_os_my/userprog/fork.c:242
		return -1;
c000b671:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000b676:	eb 47                	jmp    c000b6bf <copy_process+0xa8>
/work/x86_os_my/userprog/fork.c:246
	}

	/* c 复制父进程进程体及用户栈给子进程 */
	copy_body_stack3(child_thread, parent_thread, buf_page);
c000b678:	83 ec 04             	sub    $0x4,%esp
c000b67b:	ff 75 f4             	pushl  -0xc(%ebp)
c000b67e:	ff 75 0c             	pushl  0xc(%ebp)
c000b681:	ff 75 08             	pushl  0x8(%ebp)
c000b684:	e8 80 fd ff ff       	call   c000b409 <copy_body_stack3>
c000b689:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:249

	/* d 构建子进程 thread_stack 和修改返回值pid */
	build_child_stack(child_thread);
c000b68c:	83 ec 0c             	sub    $0xc,%esp
c000b68f:	ff 75 08             	pushl  0x8(%ebp)
c000b692:	e8 81 fe ff ff       	call   c000b518 <build_child_stack>
c000b697:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:252

	/* e 更新文件inode的打开数 */
	update_inode_open_cnts(child_thread);
c000b69a:	83 ec 0c             	sub    $0xc,%esp
c000b69d:	ff 75 08             	pushl  0x8(%ebp)
c000b6a0:	e8 fb fe ff ff       	call   c000b5a0 <update_inode_open_cnts>
c000b6a5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:254

	mfree_page(PF_KERNEL, buf_page, 1);
c000b6a8:	83 ec 04             	sub    $0x4,%esp
c000b6ab:	6a 01                	push   $0x1
c000b6ad:	ff 75 f4             	pushl  -0xc(%ebp)
c000b6b0:	6a 01                	push   $0x1
c000b6b2:	e8 b1 7b ff ff       	call   c0003268 <mfree_page>
c000b6b7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:255
	return 0;
c000b6ba:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/userprog/fork.c:256
}
c000b6bf:	c9                   	leave  
c000b6c0:	c3                   	ret    

c000b6c1 <sys_fork>:
sys_fork():
/work/x86_os_my/userprog/fork.c:259

/* fork子进程，内核线程不可直接调用 */
pid_t sys_fork(void) {
c000b6c1:	55                   	push   %ebp
c000b6c2:	89 e5                	mov    %esp,%ebp
c000b6c4:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/fork.c:260
	struct task_struct* parent_thread = running_thread();
c000b6c7:	e8 0e 86 ff ff       	call   c0003cda <running_thread>
c000b6cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/fork.c:261
	struct task_struct* child_thread = get_kernel_pages(1);	// 为子进程创建pcb(task_struct结构)
c000b6cf:	83 ec 0c             	sub    $0xc,%esp
c000b6d2:	6a 01                	push   $0x1
c000b6d4:	e8 20 74 ff ff       	call   c0002af9 <get_kernel_pages>
c000b6d9:	83 c4 10             	add    $0x10,%esp
c000b6dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/fork.c:262
	if (child_thread == NULL) {
c000b6df:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c000b6e3:	75 0a                	jne    c000b6ef <sys_fork+0x2e>
/work/x86_os_my/userprog/fork.c:263
		return -1;
c000b6e5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000b6ea:	e9 f2 00 00 00       	jmp    c000b7e1 <sys_fork+0x120>
/work/x86_os_my/userprog/fork.c:265
	}
	ASSERT(INTR_OFF == intr_get_status() && parent_thread->pgdir != NULL);	//中断关了，并且是用户线程
c000b6ef:	e8 c0 63 ff ff       	call   c0001ab4 <intr_get_status>
c000b6f4:	85 c0                	test   %eax,%eax
c000b6f6:	75 0a                	jne    c000b702 <sys_fork+0x41>
/work/x86_os_my/userprog/fork.c:265 (discriminator 1)
c000b6f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b6fb:	8b 40 54             	mov    0x54(%eax),%eax
c000b6fe:	85 c0                	test   %eax,%eax
c000b700:	75 1c                	jne    c000b71e <sys_fork+0x5d>
/work/x86_os_my/userprog/fork.c:265 (discriminator 3)
c000b702:	68 60 eb 00 c0       	push   $0xc000eb60
c000b707:	68 30 ec 00 c0       	push   $0xc000ec30
c000b70c:	68 09 01 00 00       	push   $0x109
c000b711:	68 4e eb 00 c0       	push   $0xc000eb4e
c000b716:	e8 36 6d ff ff       	call   c0002451 <panic_spin>
c000b71b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:267

	if (copy_process(child_thread, parent_thread) == -1) {
c000b71e:	83 ec 08             	sub    $0x8,%esp
c000b721:	ff 75 f4             	pushl  -0xc(%ebp)
c000b724:	ff 75 f0             	pushl  -0x10(%ebp)
c000b727:	e8 eb fe ff ff       	call   c000b617 <copy_process>
c000b72c:	83 c4 10             	add    $0x10,%esp
c000b72f:	83 f8 ff             	cmp    $0xffffffff,%eax
c000b732:	75 0a                	jne    c000b73e <sys_fork+0x7d>
/work/x86_os_my/userprog/fork.c:268
		return -1;
c000b734:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000b739:	e9 a3 00 00 00       	jmp    c000b7e1 <sys_fork+0x120>
/work/x86_os_my/userprog/fork.c:272
	}

	/* 添加到就绪线程队列和所有线程队列，子进程由调度器安排运行 */
	ASSERT(!elem_find(&thread_ready_list, &child_thread->general_tag));
c000b73e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b741:	83 c0 44             	add    $0x44,%eax
c000b744:	83 ec 08             	sub    $0x8,%esp
c000b747:	50                   	push   %eax
c000b748:	68 cc 21 01 c0       	push   $0xc00121cc
c000b74d:	e8 9a 90 ff ff       	call   c00047ec <elem_find>
c000b752:	83 c4 10             	add    $0x10,%esp
c000b755:	85 c0                	test   %eax,%eax
c000b757:	74 1c                	je     c000b775 <sys_fork+0xb4>
/work/x86_os_my/userprog/fork.c:272 (discriminator 1)
c000b759:	68 a0 eb 00 c0       	push   $0xc000eba0
c000b75e:	68 30 ec 00 c0       	push   $0xc000ec30
c000b763:	68 10 01 00 00       	push   $0x110
c000b768:	68 4e eb 00 c0       	push   $0xc000eb4e
c000b76d:	e8 df 6c ff ff       	call   c0002451 <panic_spin>
c000b772:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:273
	list_append(&thread_ready_list, &child_thread->general_tag);
c000b775:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b778:	83 c0 44             	add    $0x44,%eax
c000b77b:	83 ec 08             	sub    $0x8,%esp
c000b77e:	50                   	push   %eax
c000b77f:	68 cc 21 01 c0       	push   $0xc00121cc
c000b784:	e8 e9 8f ff ff       	call   c0004772 <list_append>
c000b789:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:274
	ASSERT(!elem_find(&thread_all_list, &child_thread->all_list_tag));
c000b78c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b78f:	83 c0 4c             	add    $0x4c,%eax
c000b792:	83 ec 08             	sub    $0x8,%esp
c000b795:	50                   	push   %eax
c000b796:	68 dc 21 01 c0       	push   $0xc00121dc
c000b79b:	e8 4c 90 ff ff       	call   c00047ec <elem_find>
c000b7a0:	83 c4 10             	add    $0x10,%esp
c000b7a3:	85 c0                	test   %eax,%eax
c000b7a5:	74 1c                	je     c000b7c3 <sys_fork+0x102>
/work/x86_os_my/userprog/fork.c:274 (discriminator 1)
c000b7a7:	68 dc eb 00 c0       	push   $0xc000ebdc
c000b7ac:	68 30 ec 00 c0       	push   $0xc000ec30
c000b7b1:	68 12 01 00 00       	push   $0x112
c000b7b6:	68 4e eb 00 c0       	push   $0xc000eb4e
c000b7bb:	e8 91 6c ff ff       	call   c0002451 <panic_spin>
c000b7c0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:275
	list_append(&thread_all_list, &child_thread->all_list_tag);
c000b7c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b7c6:	83 c0 4c             	add    $0x4c,%eax
c000b7c9:	83 ec 08             	sub    $0x8,%esp
c000b7cc:	50                   	push   %eax
c000b7cd:	68 dc 21 01 c0       	push   $0xc00121dc
c000b7d2:	e8 9b 8f ff ff       	call   c0004772 <list_append>
c000b7d7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:277

	return child_thread->pid;	// 父进程返回子进程的pid
c000b7da:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b7dd:	0f b7 40 04          	movzwl 0x4(%eax),%eax
/work/x86_os_my/userprog/fork.c:278
}
c000b7e1:	c9                   	leave  
c000b7e2:	c3                   	ret    

c000b7e3 <print_prompt>:
print_prompt():
/work/x86_os_my/shell/shell.c:21

/* 用来记录当前目录,是当前目录的缓存,每次执行cd命令时会更新此内容 */
char cwd_cache[MAX_PATH_LEN] = {0};

/* 输出提示符 */
void print_prompt(void) {
c000b7e3:	55                   	push   %ebp
c000b7e4:	89 e5                	mov    %esp,%ebp
c000b7e6:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/shell/shell.c:22
	printf("[rabbit@localhost %s]$ ", cwd_cache);
c000b7e9:	83 ec 08             	sub    $0x8,%esp
c000b7ec:	68 20 18 01 c0       	push   $0xc0011820
c000b7f1:	68 3c ec 00 c0       	push   $0xc000ec3c
c000b7f6:	e8 bb a5 ff ff       	call   c0005db6 <printf>
c000b7fb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:23
}
c000b7fe:	90                   	nop
c000b7ff:	c9                   	leave  
c000b800:	c3                   	ret    

c000b801 <readline>:
readline():
/work/x86_os_my/shell/shell.c:26

/* 从键盘缓冲区中最多读入count个字节到buf */
static void readline(char* buf, int32_t count) {
c000b801:	55                   	push   %ebp
c000b802:	89 e5                	mov    %esp,%ebp
c000b804:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/shell/shell.c:27
	assert(buf != NULL && count > 0);
c000b807:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c000b80b:	74 06                	je     c000b813 <readline+0x12>
/work/x86_os_my/shell/shell.c:27 (discriminator 2)
c000b80d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c000b811:	7f 19                	jg     c000b82c <readline+0x2b>
/work/x86_os_my/shell/shell.c:27 (discriminator 3)
c000b813:	68 54 ec 00 c0       	push   $0xc000ec54
c000b818:	68 84 ed 00 c0       	push   $0xc000ed84
c000b81d:	6a 1b                	push   $0x1b
c000b81f:	68 6d ec 00 c0       	push   $0xc000ec6d
c000b824:	e8 23 05 00 00       	call   c000bd4c <user_spin>
c000b829:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:28
	char* pos = buf;
c000b82c:	8b 45 08             	mov    0x8(%ebp),%eax
c000b82f:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/shell/shell.c:29
	while (read(stdin_no, pos, 1) != -1 && (pos - buf) < count) {	// 每次读1个字符。在不出错情况下,直到找到回车符才返回
c000b832:	e9 b5 00 00 00       	jmp    c000b8ec <readline+0xeb>
/work/x86_os_my/shell/shell.c:30
		switch (*pos) {
c000b837:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b83a:	0f b6 00             	movzbl (%eax),%eax
c000b83d:	0f be c0             	movsbl %al,%eax
c000b840:	83 e8 08             	sub    $0x8,%eax
c000b843:	83 f8 0c             	cmp    $0xc,%eax
c000b846:	0f 87 87 00 00 00    	ja     c000b8d3 <readline+0xd2>
c000b84c:	8b 04 85 c8 ec 00 c0 	mov    -0x3fff1338(,%eax,4),%eax
c000b853:	ff e0                	jmp    *%eax
/work/x86_os_my/shell/shell.c:34
			/* 找到回车或换行符后认为键入的命令结束,直接返回 */
			case '\n':
			case '\r':
			*pos = 0;		// 添加cmd_line的终止字符0
c000b855:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b858:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/shell/shell.c:35
			putchar('\n');
c000b85b:	83 ec 0c             	sub    $0xc,%esp
c000b85e:	6a 0a                	push   $0xa
c000b860:	e8 ec 9f ff ff       	call   c0005851 <putchar>
c000b865:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:36
			return;
c000b868:	e9 b9 00 00 00       	jmp    c000b926 <readline+0x125>
/work/x86_os_my/shell/shell.c:39

			case '\b':
			if (cmd_line[0] != '\b') {	// 阻止删除非本次输入的信息
c000b86d:	0f b6 05 60 1a 01 c0 	movzbl 0xc0011a60,%eax
c000b874:	3c 08                	cmp    $0x8,%al
c000b876:	74 74                	je     c000b8ec <readline+0xeb>
/work/x86_os_my/shell/shell.c:40
				--pos;				// 退回到缓冲区cmd_line中上一个字符
c000b878:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
/work/x86_os_my/shell/shell.c:41
				putchar('\b');		// 屏幕显示也删掉前一个字符
c000b87c:	83 ec 0c             	sub    $0xc,%esp
c000b87f:	6a 08                	push   $0x8
c000b881:	e8 cb 9f ff ff       	call   c0005851 <putchar>
c000b886:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:43
			}
			break;
c000b889:	eb 61                	jmp    c000b8ec <readline+0xeb>
/work/x86_os_my/shell/shell.c:48

			/* ctrl+l 清屏 */
			case 'l' - 'a':
			/* 1 先将当前的字符'l'-'a'置为0 */
			*pos = 0;
c000b88b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b88e:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/shell/shell.c:50
			/* 2 再将屏幕清空 */
			clear();
c000b891:	e8 df 9f ff ff       	call   c0005875 <clear>
/work/x86_os_my/shell/shell.c:52
			/* 3 打印提示符 */
			print_prompt();
c000b896:	e8 48 ff ff ff       	call   c000b7e3 <print_prompt>
/work/x86_os_my/shell/shell.c:54
			/* 4 将之前键入的内容再次打印 */
			printf("%s", buf);
c000b89b:	83 ec 08             	sub    $0x8,%esp
c000b89e:	ff 75 08             	pushl  0x8(%ebp)
c000b8a1:	68 7b ec 00 c0       	push   $0xc000ec7b
c000b8a6:	e8 0b a5 ff ff       	call   c0005db6 <printf>
c000b8ab:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:55
			break;
c000b8ae:	eb 3c                	jmp    c000b8ec <readline+0xeb>
/work/x86_os_my/shell/shell.c:60

			/* ctrl+u 清掉输入 */
			case 'u' - 'a':
			while (buf != pos) {
				putchar('\b');
c000b8b0:	83 ec 0c             	sub    $0xc,%esp
c000b8b3:	6a 08                	push   $0x8
c000b8b5:	e8 97 9f ff ff       	call   c0005851 <putchar>
c000b8ba:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:61
				*(pos--) = 0;
c000b8bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b8c0:	8d 50 ff             	lea    -0x1(%eax),%edx
c000b8c3:	89 55 f4             	mov    %edx,-0xc(%ebp)
c000b8c6:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/shell/shell.c:59
			printf("%s", buf);
			break;

			/* ctrl+u 清掉输入 */
			case 'u' - 'a':
			while (buf != pos) {
c000b8c9:	8b 45 08             	mov    0x8(%ebp),%eax
c000b8cc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c000b8cf:	75 df                	jne    c000b8b0 <readline+0xaf>
/work/x86_os_my/shell/shell.c:63
				putchar('\b');
				*(pos--) = 0;
			}
			break;
c000b8d1:	eb 19                	jmp    c000b8ec <readline+0xeb>
/work/x86_os_my/shell/shell.c:67

			/* 非控制键则输出字符 */
			default:
			putchar(*pos);			// 屏幕显示
c000b8d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b8d6:	0f b6 00             	movzbl (%eax),%eax
c000b8d9:	0f be c0             	movsbl %al,%eax
c000b8dc:	83 ec 0c             	sub    $0xc,%esp
c000b8df:	50                   	push   %eax
c000b8e0:	e8 6c 9f ff ff       	call   c0005851 <putchar>
c000b8e5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:68
			pos++;
c000b8e8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/shell/shell.c:29

/* 从键盘缓冲区中最多读入count个字节到buf */
static void readline(char* buf, int32_t count) {
	assert(buf != NULL && count > 0);
	char* pos = buf;
	while (read(stdin_no, pos, 1) != -1 && (pos - buf) < count) {	// 每次读1个字符。在不出错情况下,直到找到回车符才返回
c000b8ec:	83 ec 04             	sub    $0x4,%esp
c000b8ef:	6a 01                	push   $0x1
c000b8f1:	ff 75 f4             	pushl  -0xc(%ebp)
c000b8f4:	6a 00                	push   $0x0
c000b8f6:	e8 33 9f ff ff       	call   c000582e <read>
c000b8fb:	83 c4 10             	add    $0x10,%esp
c000b8fe:	83 f8 ff             	cmp    $0xffffffff,%eax
c000b901:	74 13                	je     c000b916 <readline+0x115>
/work/x86_os_my/shell/shell.c:29 (discriminator 1)
c000b903:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000b906:	8b 45 08             	mov    0x8(%ebp),%eax
c000b909:	29 c2                	sub    %eax,%edx
c000b90b:	89 d0                	mov    %edx,%eax
c000b90d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c000b910:	0f 8c 21 ff ff ff    	jl     c000b837 <readline+0x36>
/work/x86_os_my/shell/shell.c:71
			default:
			putchar(*pos);			// 屏幕显示
			pos++;
		}
	}
	printf("readline: can`t find enter_key in the cmd_line, max num of char is 128\n");
c000b916:	83 ec 0c             	sub    $0xc,%esp
c000b919:	68 80 ec 00 c0       	push   $0xc000ec80
c000b91e:	e8 93 a4 ff ff       	call   c0005db6 <printf>
c000b923:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:72
}
c000b926:	c9                   	leave  
c000b927:	c3                   	ret    

c000b928 <cmd_parse>:
cmd_parse():
/work/x86_os_my/shell/shell.c:75

/* 分析字符串cmd_str中以token为分隔符的单词,将各单词的指针存入argv数组 */
static int32_t cmd_parse(char* cmd_str, char** argv, char token) {
c000b928:	55                   	push   %ebp
c000b929:	89 e5                	mov    %esp,%ebp
c000b92b:	83 ec 28             	sub    $0x28,%esp
c000b92e:	8b 45 10             	mov    0x10(%ebp),%eax
c000b931:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/shell/shell.c:76
	assert(cmd_str != NULL);
c000b934:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c000b938:	75 19                	jne    c000b953 <cmd_parse+0x2b>
/work/x86_os_my/shell/shell.c:76 (discriminator 1)
c000b93a:	68 fc ec 00 c0       	push   $0xc000ecfc
c000b93f:	68 90 ed 00 c0       	push   $0xc000ed90
c000b944:	6a 4c                	push   $0x4c
c000b946:	68 6d ec 00 c0       	push   $0xc000ec6d
c000b94b:	e8 fc 03 00 00       	call   c000bd4c <user_spin>
c000b950:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:77
	int32_t arg_idx = 0;
c000b953:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/shell/shell.c:78
	while(arg_idx < MAX_ARG_NR) {
c000b95a:	eb 19                	jmp    c000b975 <cmd_parse+0x4d>
/work/x86_os_my/shell/shell.c:79
		argv[arg_idx] = NULL;
c000b95c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b95f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000b966:	8b 45 0c             	mov    0xc(%ebp),%eax
c000b969:	01 d0                	add    %edx,%eax
c000b96b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/shell/shell.c:80
		arg_idx++;
c000b971:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/shell/shell.c:78

/* 分析字符串cmd_str中以token为分隔符的单词,将各单词的指针存入argv数组 */
static int32_t cmd_parse(char* cmd_str, char** argv, char token) {
	assert(cmd_str != NULL);
	int32_t arg_idx = 0;
	while(arg_idx < MAX_ARG_NR) {
c000b975:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c000b979:	7e e1                	jle    c000b95c <cmd_parse+0x34>
/work/x86_os_my/shell/shell.c:82
		argv[arg_idx] = NULL;
		arg_idx++;
	}
	char* next = cmd_str;
c000b97b:	8b 45 08             	mov    0x8(%ebp),%eax
c000b97e:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/shell/shell.c:83
	int32_t argc = 0;
c000b981:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/shell/shell.c:85
	/* 外层循环处理整个命令行 */
	while(*next) {
c000b988:	eb 6f                	jmp    c000b9f9 <cmd_parse+0xd1>
/work/x86_os_my/shell/shell.c:88
		/* 去除命令字或参数之间的空格 */
		while(*next == token) {
			next++;
c000b98a:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/shell/shell.c:87
	char* next = cmd_str;
	int32_t argc = 0;
	/* 外层循环处理整个命令行 */
	while(*next) {
		/* 去除命令字或参数之间的空格 */
		while(*next == token) {
c000b98e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b991:	0f b6 00             	movzbl (%eax),%eax
c000b994:	3a 45 e4             	cmp    -0x1c(%ebp),%al
c000b997:	74 f1                	je     c000b98a <cmd_parse+0x62>
/work/x86_os_my/shell/shell.c:91
			next++;
		}
		/* 处理最后一个参数后接空格的情况,如"ls dir2 " */
		if (*next == 0) {
c000b999:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b99c:	0f b6 00             	movzbl (%eax),%eax
c000b99f:	84 c0                	test   %al,%al
c000b9a1:	74 62                	je     c000ba05 <cmd_parse+0xdd>
/work/x86_os_my/shell/shell.c:94
			break;
		}
		argv[argc] = next;
c000b9a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000b9a6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000b9ad:	8b 45 0c             	mov    0xc(%ebp),%eax
c000b9b0:	01 c2                	add    %eax,%edx
c000b9b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b9b5:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/shell/shell.c:97

		/* 内层循环处理命令行中的每个命令字及参数 */
		while (*next && *next != token) {	  // 在字符串结束前找单词分隔符
c000b9b7:	eb 04                	jmp    c000b9bd <cmd_parse+0x95>
/work/x86_os_my/shell/shell.c:98
			next++;
c000b9b9:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/shell/shell.c:97
			break;
		}
		argv[argc] = next;

		/* 内层循环处理命令行中的每个命令字及参数 */
		while (*next && *next != token) {	  // 在字符串结束前找单词分隔符
c000b9bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b9c0:	0f b6 00             	movzbl (%eax),%eax
c000b9c3:	84 c0                	test   %al,%al
c000b9c5:	74 0b                	je     c000b9d2 <cmd_parse+0xaa>
/work/x86_os_my/shell/shell.c:97 (discriminator 1)
c000b9c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b9ca:	0f b6 00             	movzbl (%eax),%eax
c000b9cd:	3a 45 e4             	cmp    -0x1c(%ebp),%al
c000b9d0:	75 e7                	jne    c000b9b9 <cmd_parse+0x91>
/work/x86_os_my/shell/shell.c:102
			next++;
		}

		/* 如果未结束(是token字符),使tocken变成0 */
		if (*next) {
c000b9d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b9d5:	0f b6 00             	movzbl (%eax),%eax
c000b9d8:	84 c0                	test   %al,%al
c000b9da:	74 0c                	je     c000b9e8 <cmd_parse+0xc0>
/work/x86_os_my/shell/shell.c:103
			*next++ = 0;	// 将token字符替换为字符串结束符0,做为一个单词的结束,并将字符指针next指向下一个字符
c000b9dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b9df:	8d 50 01             	lea    0x1(%eax),%edx
c000b9e2:	89 55 f0             	mov    %edx,-0x10(%ebp)
c000b9e5:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/shell/shell.c:107
		}

		/* 避免argv数组访问越界,参数过多则返回0 */
		if (argc > MAX_ARG_NR) {
c000b9e8:	83 7d ec 10          	cmpl   $0x10,-0x14(%ebp)
c000b9ec:	7e 07                	jle    c000b9f5 <cmd_parse+0xcd>
/work/x86_os_my/shell/shell.c:108
			return -1;
c000b9ee:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000b9f3:	eb 14                	jmp    c000ba09 <cmd_parse+0xe1>
/work/x86_os_my/shell/shell.c:110
		}
		argc++;
c000b9f5:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
/work/x86_os_my/shell/shell.c:85
		arg_idx++;
	}
	char* next = cmd_str;
	int32_t argc = 0;
	/* 外层循环处理整个命令行 */
	while(*next) {
c000b9f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b9fc:	0f b6 00             	movzbl (%eax),%eax
c000b9ff:	84 c0                	test   %al,%al
c000ba01:	75 8b                	jne    c000b98e <cmd_parse+0x66>
c000ba03:	eb 01                	jmp    c000ba06 <cmd_parse+0xde>
/work/x86_os_my/shell/shell.c:92
		while(*next == token) {
			next++;
		}
		/* 处理最后一个参数后接空格的情况,如"ls dir2 " */
		if (*next == 0) {
			break;
c000ba05:	90                   	nop
/work/x86_os_my/shell/shell.c:112
		if (argc > MAX_ARG_NR) {
			return -1;
		}
		argc++;
	}
	return argc;
c000ba06:	8b 45 ec             	mov    -0x14(%ebp),%eax
/work/x86_os_my/shell/shell.c:113
}
c000ba09:	c9                   	leave  
c000ba0a:	c3                   	ret    

c000ba0b <my_shell>:
my_shell():
/work/x86_os_my/shell/shell.c:118

char* argv[MAX_ARG_NR] = {NULL};    // argv必须为全局变量，为了以后exec的程序可访问参数
int32_t argc = -1;
/* 简单的shell */
void my_shell(void) {
c000ba0b:	55                   	push   %ebp
c000ba0c:	89 e5                	mov    %esp,%ebp
c000ba0e:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/shell/shell.c:119
	cwd_cache[0] = '/';
c000ba11:	c6 05 20 18 01 c0 2f 	movb   $0x2f,0xc0011820
/work/x86_os_my/shell/shell.c:121
	while (1) {
		print_prompt();
c000ba18:	e8 c6 fd ff ff       	call   c000b7e3 <print_prompt>
/work/x86_os_my/shell/shell.c:122
		memset(final_path, 0, MAX_PATH_LEN);
c000ba1d:	83 ec 04             	sub    $0x4,%esp
c000ba20:	68 00 02 00 00       	push   $0x200
c000ba25:	6a 00                	push   $0x0
c000ba27:	68 20 16 01 c0       	push   $0xc0011620
c000ba2c:	e8 c2 7e ff ff       	call   c00038f3 <memset>
c000ba31:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:123
		memset(cmd_line, 0, MAX_PATH_LEN);
c000ba34:	83 ec 04             	sub    $0x4,%esp
c000ba37:	68 00 02 00 00       	push   $0x200
c000ba3c:	6a 00                	push   $0x0
c000ba3e:	68 60 1a 01 c0       	push   $0xc0011a60
c000ba43:	e8 ab 7e ff ff       	call   c00038f3 <memset>
c000ba48:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:124
		readline(cmd_line, MAX_PATH_LEN);
c000ba4b:	83 ec 08             	sub    $0x8,%esp
c000ba4e:	68 00 02 00 00       	push   $0x200
c000ba53:	68 60 1a 01 c0       	push   $0xc0011a60
c000ba58:	e8 a4 fd ff ff       	call   c000b801 <readline>
c000ba5d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:125
		if (cmd_line[0] == 0) {	 // 若只键入了一个回车
c000ba60:	0f b6 05 60 1a 01 c0 	movzbl 0xc0011a60,%eax
c000ba67:	84 c0                	test   %al,%al
c000ba69:	0f 84 d7 02 00 00    	je     c000bd46 <my_shell+0x33b>
/work/x86_os_my/shell/shell.c:128
			continue;
		}
		argc = -1;
c000ba6f:	c7 05 58 11 01 c0 ff 	movl   $0xffffffff,0xc0011158
c000ba76:	ff ff ff 
/work/x86_os_my/shell/shell.c:129
		argc = cmd_parse(cmd_line, argv, ' ');
c000ba79:	83 ec 04             	sub    $0x4,%esp
c000ba7c:	6a 20                	push   $0x20
c000ba7e:	68 20 1a 01 c0       	push   $0xc0011a20
c000ba83:	68 60 1a 01 c0       	push   $0xc0011a60
c000ba88:	e8 9b fe ff ff       	call   c000b928 <cmd_parse>
c000ba8d:	83 c4 10             	add    $0x10,%esp
c000ba90:	a3 58 11 01 c0       	mov    %eax,0xc0011158
/work/x86_os_my/shell/shell.c:130
		if (argc == -1) {
c000ba95:	a1 58 11 01 c0       	mov    0xc0011158,%eax
c000ba9a:	83 f8 ff             	cmp    $0xffffffff,%eax
c000ba9d:	75 17                	jne    c000bab6 <my_shell+0xab>
/work/x86_os_my/shell/shell.c:131
			printf("num of arguments exceed %d\n", MAX_ARG_NR);
c000ba9f:	83 ec 08             	sub    $0x8,%esp
c000baa2:	6a 10                	push   $0x10
c000baa4:	68 0c ed 00 c0       	push   $0xc000ed0c
c000baa9:	e8 08 a3 ff ff       	call   c0005db6 <printf>
c000baae:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:132
			continue;
c000bab1:	e9 91 02 00 00       	jmp    c000bd47 <my_shell+0x33c>
/work/x86_os_my/shell/shell.c:135
		}

		if (!strcmp("ls", argv[0])) {
c000bab6:	a1 20 1a 01 c0       	mov    0xc0011a20,%eax
c000babb:	83 ec 08             	sub    $0x8,%esp
c000babe:	50                   	push   %eax
c000babf:	68 28 ed 00 c0       	push   $0xc000ed28
c000bac4:	e8 ff 7f ff ff       	call   c0003ac8 <strcmp>
c000bac9:	83 c4 10             	add    $0x10,%esp
c000bacc:	84 c0                	test   %al,%al
c000bace:	75 1b                	jne    c000baeb <my_shell+0xe0>
/work/x86_os_my/shell/shell.c:136
			buildin_ls(argc, argv);
c000bad0:	a1 58 11 01 c0       	mov    0xc0011158,%eax
c000bad5:	83 ec 08             	sub    $0x8,%esp
c000bad8:	68 20 1a 01 c0       	push   $0xc0011a20
c000badd:	50                   	push   %eax
c000bade:	e8 a0 05 00 00       	call   c000c083 <buildin_ls>
c000bae3:	83 c4 10             	add    $0x10,%esp
c000bae6:	e9 35 02 00 00       	jmp    c000bd20 <my_shell+0x315>
/work/x86_os_my/shell/shell.c:137
		} else if (!strcmp("cd", argv[0])) {
c000baeb:	a1 20 1a 01 c0       	mov    0xc0011a20,%eax
c000baf0:	83 ec 08             	sub    $0x8,%esp
c000baf3:	50                   	push   %eax
c000baf4:	68 2b ed 00 c0       	push   $0xc000ed2b
c000baf9:	e8 ca 7f ff ff       	call   c0003ac8 <strcmp>
c000bafe:	83 c4 10             	add    $0x10,%esp
c000bb01:	84 c0                	test   %al,%al
c000bb03:	75 4f                	jne    c000bb54 <my_shell+0x149>
/work/x86_os_my/shell/shell.c:138
			if (buildin_cd(argc, argv) != NULL) {
c000bb05:	a1 58 11 01 c0       	mov    0xc0011158,%eax
c000bb0a:	83 ec 08             	sub    $0x8,%esp
c000bb0d:	68 20 1a 01 c0       	push   $0xc0011a20
c000bb12:	50                   	push   %eax
c000bb13:	e8 e1 04 00 00       	call   c000bff9 <buildin_cd>
c000bb18:	83 c4 10             	add    $0x10,%esp
c000bb1b:	85 c0                	test   %eax,%eax
c000bb1d:	0f 84 fd 01 00 00    	je     c000bd20 <my_shell+0x315>
/work/x86_os_my/shell/shell.c:139
				memset(cwd_cache, 0, MAX_PATH_LEN);
c000bb23:	83 ec 04             	sub    $0x4,%esp
c000bb26:	68 00 02 00 00       	push   $0x200
c000bb2b:	6a 00                	push   $0x0
c000bb2d:	68 20 18 01 c0       	push   $0xc0011820
c000bb32:	e8 bc 7d ff ff       	call   c00038f3 <memset>
c000bb37:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:140
				strcpy(cwd_cache, final_path);
c000bb3a:	83 ec 08             	sub    $0x8,%esp
c000bb3d:	68 20 16 01 c0       	push   $0xc0011620
c000bb42:	68 20 18 01 c0       	push   $0xc0011820
c000bb47:	e8 dc 7e ff ff       	call   c0003a28 <strcpy>
c000bb4c:	83 c4 10             	add    $0x10,%esp
c000bb4f:	e9 cc 01 00 00       	jmp    c000bd20 <my_shell+0x315>
/work/x86_os_my/shell/shell.c:142
			}
		} else if (!strcmp("pwd", argv[0])) {
c000bb54:	a1 20 1a 01 c0       	mov    0xc0011a20,%eax
c000bb59:	83 ec 08             	sub    $0x8,%esp
c000bb5c:	50                   	push   %eax
c000bb5d:	68 2e ed 00 c0       	push   $0xc000ed2e
c000bb62:	e8 61 7f ff ff       	call   c0003ac8 <strcmp>
c000bb67:	83 c4 10             	add    $0x10,%esp
c000bb6a:	84 c0                	test   %al,%al
c000bb6c:	75 1b                	jne    c000bb89 <my_shell+0x17e>
/work/x86_os_my/shell/shell.c:143
			buildin_pwd(argc, argv);
c000bb6e:	a1 58 11 01 c0       	mov    0xc0011158,%eax
c000bb73:	83 ec 08             	sub    $0x8,%esp
c000bb76:	68 20 1a 01 c0       	push   $0xc0011a20
c000bb7b:	50                   	push   %eax
c000bb7c:	e8 18 04 00 00       	call   c000bf99 <buildin_pwd>
c000bb81:	83 c4 10             	add    $0x10,%esp
c000bb84:	e9 97 01 00 00       	jmp    c000bd20 <my_shell+0x315>
/work/x86_os_my/shell/shell.c:144
		} else if (!strcmp("ps", argv[0])) {
c000bb89:	a1 20 1a 01 c0       	mov    0xc0011a20,%eax
c000bb8e:	83 ec 08             	sub    $0x8,%esp
c000bb91:	50                   	push   %eax
c000bb92:	68 32 ed 00 c0       	push   $0xc000ed32
c000bb97:	e8 2c 7f ff ff       	call   c0003ac8 <strcmp>
c000bb9c:	83 c4 10             	add    $0x10,%esp
c000bb9f:	84 c0                	test   %al,%al
c000bba1:	75 1b                	jne    c000bbbe <my_shell+0x1b3>
/work/x86_os_my/shell/shell.c:145
			buildin_ps(argc, argv);
c000bba3:	a1 58 11 01 c0       	mov    0xc0011158,%eax
c000bba8:	83 ec 08             	sub    $0x8,%esp
c000bbab:	68 20 1a 01 c0       	push   $0xc0011a20
c000bbb0:	50                   	push   %eax
c000bbb1:	e8 8e 08 00 00       	call   c000c444 <buildin_ps>
c000bbb6:	83 c4 10             	add    $0x10,%esp
c000bbb9:	e9 62 01 00 00       	jmp    c000bd20 <my_shell+0x315>
/work/x86_os_my/shell/shell.c:146
		} else if (!strcmp("clear", argv[0])) {
c000bbbe:	a1 20 1a 01 c0       	mov    0xc0011a20,%eax
c000bbc3:	83 ec 08             	sub    $0x8,%esp
c000bbc6:	50                   	push   %eax
c000bbc7:	68 35 ed 00 c0       	push   $0xc000ed35
c000bbcc:	e8 f7 7e ff ff       	call   c0003ac8 <strcmp>
c000bbd1:	83 c4 10             	add    $0x10,%esp
c000bbd4:	84 c0                	test   %al,%al
c000bbd6:	75 1b                	jne    c000bbf3 <my_shell+0x1e8>
/work/x86_os_my/shell/shell.c:147
			buildin_clear(argc, argv);
c000bbd8:	a1 58 11 01 c0       	mov    0xc0011158,%eax
c000bbdd:	83 ec 08             	sub    $0x8,%esp
c000bbe0:	68 20 1a 01 c0       	push   $0xc0011a20
c000bbe5:	50                   	push   %eax
c000bbe6:	e8 7e 08 00 00       	call   c000c469 <buildin_clear>
c000bbeb:	83 c4 10             	add    $0x10,%esp
c000bbee:	e9 2d 01 00 00       	jmp    c000bd20 <my_shell+0x315>
/work/x86_os_my/shell/shell.c:148
		} else if (!strcmp("mkdir", argv[0])){
c000bbf3:	a1 20 1a 01 c0       	mov    0xc0011a20,%eax
c000bbf8:	83 ec 08             	sub    $0x8,%esp
c000bbfb:	50                   	push   %eax
c000bbfc:	68 3b ed 00 c0       	push   $0xc000ed3b
c000bc01:	e8 c2 7e ff ff       	call   c0003ac8 <strcmp>
c000bc06:	83 c4 10             	add    $0x10,%esp
c000bc09:	84 c0                	test   %al,%al
c000bc0b:	75 1b                	jne    c000bc28 <my_shell+0x21d>
/work/x86_os_my/shell/shell.c:149
			buildin_mkdir(argc, argv);
c000bc0d:	a1 58 11 01 c0       	mov    0xc0011158,%eax
c000bc12:	83 ec 08             	sub    $0x8,%esp
c000bc15:	68 20 1a 01 c0       	push   $0xc0011a20
c000bc1a:	50                   	push   %eax
c000bc1b:	e8 6e 08 00 00       	call   c000c48e <buildin_mkdir>
c000bc20:	83 c4 10             	add    $0x10,%esp
c000bc23:	e9 f8 00 00 00       	jmp    c000bd20 <my_shell+0x315>
/work/x86_os_my/shell/shell.c:150
		} else if (!strcmp("rmdir", argv[0])){
c000bc28:	a1 20 1a 01 c0       	mov    0xc0011a20,%eax
c000bc2d:	83 ec 08             	sub    $0x8,%esp
c000bc30:	50                   	push   %eax
c000bc31:	68 41 ed 00 c0       	push   $0xc000ed41
c000bc36:	e8 8d 7e ff ff       	call   c0003ac8 <strcmp>
c000bc3b:	83 c4 10             	add    $0x10,%esp
c000bc3e:	84 c0                	test   %al,%al
c000bc40:	75 1b                	jne    c000bc5d <my_shell+0x252>
/work/x86_os_my/shell/shell.c:151
			buildin_rmdir(argc, argv);
c000bc42:	a1 58 11 01 c0       	mov    0xc0011158,%eax
c000bc47:	83 ec 08             	sub    $0x8,%esp
c000bc4a:	68 20 1a 01 c0       	push   $0xc0011a20
c000bc4f:	50                   	push   %eax
c000bc50:	e8 cb 08 00 00       	call   c000c520 <buildin_rmdir>
c000bc55:	83 c4 10             	add    $0x10,%esp
c000bc58:	e9 c3 00 00 00       	jmp    c000bd20 <my_shell+0x315>
/work/x86_os_my/shell/shell.c:152
		} else if (!strcmp("rm", argv[0])) {
c000bc5d:	a1 20 1a 01 c0       	mov    0xc0011a20,%eax
c000bc62:	83 ec 08             	sub    $0x8,%esp
c000bc65:	50                   	push   %eax
c000bc66:	68 47 ed 00 c0       	push   $0xc000ed47
c000bc6b:	e8 58 7e ff ff       	call   c0003ac8 <strcmp>
c000bc70:	83 c4 10             	add    $0x10,%esp
c000bc73:	84 c0                	test   %al,%al
c000bc75:	75 1b                	jne    c000bc92 <my_shell+0x287>
/work/x86_os_my/shell/shell.c:153
			buildin_rm(argc, argv);
c000bc77:	a1 58 11 01 c0       	mov    0xc0011158,%eax
c000bc7c:	83 ec 08             	sub    $0x8,%esp
c000bc7f:	68 20 1a 01 c0       	push   $0xc0011a20
c000bc84:	50                   	push   %eax
c000bc85:	e8 28 09 00 00       	call   c000c5b2 <buildin_rm>
c000bc8a:	83 c4 10             	add    $0x10,%esp
c000bc8d:	e9 8e 00 00 00       	jmp    c000bd20 <my_shell+0x315>
/work/x86_os_my/shell/shell.c:155
		} else {	// 如果是外部命令,需要从磁盘上加载
			int32_t pid = fork();
c000bc92:	e8 82 9b ff ff       	call   c0005819 <fork>
c000bc97:	98                   	cwtl   
c000bc98:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/shell/shell.c:156
			if (pid) {	   // 父进程
c000bc9b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c000bc9f:	74 02                	je     c000bca3 <my_shell+0x298>
/work/x86_os_my/shell/shell.c:159 (discriminator 1)
				/* 下面这个while必须要加上,否则父进程一般情况下会比子进程先执行,
				因此会进行下一轮循环将findl_path清空,这样子进程将无法从final_path中获得参数*/
				while(1);
c000bca1:	eb fe                	jmp    c000bca1 <my_shell+0x296>
/work/x86_os_my/shell/shell.c:161
			} else {	// 子进程
				make_clear_abs_path(argv[0], final_path);
c000bca3:	a1 20 1a 01 c0       	mov    0xc0011a20,%eax
c000bca8:	83 ec 08             	sub    $0x8,%esp
c000bcab:	68 20 16 01 c0       	push   $0xc0011620
c000bcb0:	50                   	push   %eax
c000bcb1:	e8 2a 02 00 00       	call   c000bee0 <make_clear_abs_path>
c000bcb6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:162
				argv[0] = final_path;
c000bcb9:	c7 05 20 1a 01 c0 20 	movl   $0xc0011620,0xc0011a20
c000bcc0:	16 01 c0 
/work/x86_os_my/shell/shell.c:165
				/* 先判断下文件是否存在 */
				struct stat file_stat;
				memset(&file_stat, 0, sizeof(struct stat));
c000bcc3:	83 ec 04             	sub    $0x4,%esp
c000bcc6:	6a 0c                	push   $0xc
c000bcc8:	6a 00                	push   $0x0
c000bcca:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c000bccd:	50                   	push   %eax
c000bcce:	e8 20 7c ff ff       	call   c00038f3 <memset>
c000bcd3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:166
				if (stat(argv[0], &file_stat) == -1) {
c000bcd6:	a1 20 1a 01 c0       	mov    0xc0011a20,%eax
c000bcdb:	83 ec 08             	sub    $0x8,%esp
c000bcde:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c000bce1:	52                   	push   %edx
c000bce2:	50                   	push   %eax
c000bce3:	e8 0b 9d ff ff       	call   c00059f3 <stat>
c000bce8:	83 c4 10             	add    $0x10,%esp
c000bceb:	83 f8 ff             	cmp    $0xffffffff,%eax
c000bcee:	75 18                	jne    c000bd08 <my_shell+0x2fd>
/work/x86_os_my/shell/shell.c:167
					printf("my_shell: cannot access %s: No such file or directory\n", argv[0]);
c000bcf0:	a1 20 1a 01 c0       	mov    0xc0011a20,%eax
c000bcf5:	83 ec 08             	sub    $0x8,%esp
c000bcf8:	50                   	push   %eax
c000bcf9:	68 4c ed 00 c0       	push   $0xc000ed4c
c000bcfe:	e8 b3 a0 ff ff       	call   c0005db6 <printf>
c000bd03:	83 c4 10             	add    $0x10,%esp
c000bd06:	eb 16                	jmp    c000bd1e <my_shell+0x313>
/work/x86_os_my/shell/shell.c:169
				} else {
					execv(argv[0], argv);
c000bd08:	a1 20 1a 01 c0       	mov    0xc0011a20,%eax
c000bd0d:	83 ec 08             	sub    $0x8,%esp
c000bd10:	68 20 1a 01 c0       	push   $0xc0011a20
c000bd15:	50                   	push   %eax
c000bd16:	e8 2c 9d ff ff       	call   c0005a47 <execv>
c000bd1b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:171 (discriminator 2)
				}
				while(1);
c000bd1e:	eb fe                	jmp    c000bd1e <my_shell+0x313>
/work/x86_os_my/shell/shell.c:175
			}
		}

		int32_t arg_idx = 0;
c000bd20:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/shell/shell.c:176
		while(arg_idx < MAX_ARG_NR) {
c000bd27:	eb 12                	jmp    c000bd3b <my_shell+0x330>
/work/x86_os_my/shell/shell.c:177
			argv[arg_idx] = NULL;
c000bd29:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000bd2c:	c7 04 85 20 1a 01 c0 	movl   $0x0,-0x3ffee5e0(,%eax,4)
c000bd33:	00 00 00 00 
/work/x86_os_my/shell/shell.c:178
			arg_idx++;
c000bd37:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/shell/shell.c:176
				while(1);
			}
		}

		int32_t arg_idx = 0;
		while(arg_idx < MAX_ARG_NR) {
c000bd3b:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c000bd3f:	7e e8                	jle    c000bd29 <my_shell+0x31e>
c000bd41:	e9 d2 fc ff ff       	jmp    c000ba18 <my_shell+0xd>
/work/x86_os_my/shell/shell.c:126
		print_prompt();
		memset(final_path, 0, MAX_PATH_LEN);
		memset(cmd_line, 0, MAX_PATH_LEN);
		readline(cmd_line, MAX_PATH_LEN);
		if (cmd_line[0] == 0) {	 // 若只键入了一个回车
			continue;
c000bd46:	90                   	nop
/work/x86_os_my/shell/shell.c:180
		int32_t arg_idx = 0;
		while(arg_idx < MAX_ARG_NR) {
			argv[arg_idx] = NULL;
			arg_idx++;
		}
	}
c000bd47:	e9 cc fc ff ff       	jmp    c000ba18 <my_shell+0xd>

c000bd4c <user_spin>:
user_spin():
/work/x86_os_my/lib/user/assert.c:3
#include "assert.h"
#include "stdio.h"
void user_spin(char* filename, int line, const char* func, const char* condition) {
c000bd4c:	55                   	push   %ebp
c000bd4d:	89 e5                	mov    %esp,%ebp
c000bd4f:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/lib/user/assert.c:4
	printf("\n\n\n\nfilename %s\nline %d\nfunction %s\ncondition %s\n", filename, line, func, condition);
c000bd52:	83 ec 0c             	sub    $0xc,%esp
c000bd55:	ff 75 14             	pushl  0x14(%ebp)
c000bd58:	ff 75 10             	pushl  0x10(%ebp)
c000bd5b:	ff 75 0c             	pushl  0xc(%ebp)
c000bd5e:	ff 75 08             	pushl  0x8(%ebp)
c000bd61:	68 9c ed 00 c0       	push   $0xc000ed9c
c000bd66:	e8 4b a0 ff ff       	call   c0005db6 <printf>
c000bd6b:	83 c4 20             	add    $0x20,%esp
/work/x86_os_my/lib/user/assert.c:5 (discriminator 1)
	while(1);
c000bd6e:	eb fe                	jmp    c000bd6e <user_spin+0x22>

c000bd70 <wash_path>:
wash_path():
/work/x86_os_my/shell/buildin_cmd.c:16
/* 将路径old_abs_path中的..和.转换为实际路径后存入new_abs_path */
// 从左到右解析 old_abs_path 路径中的每一层，
// 若解析出来的目录名不是“..”，就将其连接到 new_abs_path
// 若是“ ..” , 就将 new_abs_path 的最后一层目录去掉。
// 若是“ . ” , 就什么都不做
static void wash_path(char* old_abs_path, char* new_abs_path) {
c000bd70:	55                   	push   %ebp
c000bd71:	89 e5                	mov    %esp,%ebp
c000bd73:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/shell/buildin_cmd.c:17
	assert(old_abs_path[0] == '/');
c000bd76:	8b 45 08             	mov    0x8(%ebp),%eax
c000bd79:	0f b6 00             	movzbl (%eax),%eax
c000bd7c:	3c 2f                	cmp    $0x2f,%al
c000bd7e:	74 19                	je     c000bd99 <wash_path+0x29>
/work/x86_os_my/shell/buildin_cmd.c:17 (discriminator 1)
c000bd80:	68 d0 ed 00 c0       	push   $0xc000edd0
c000bd85:	68 c4 f0 00 c0       	push   $0xc000f0c4
c000bd8a:	6a 11                	push   $0x11
c000bd8c:	68 e7 ed 00 c0       	push   $0xc000ede7
c000bd91:	e8 b6 ff ff ff       	call   c000bd4c <user_spin>
c000bd96:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:18
	char name[MAX_FILE_NAME_LEN] = {0};    
c000bd99:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c000bda0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c000bda7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c000bdae:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:19
	char* sub_path = old_abs_path;
c000bdb5:	8b 45 08             	mov    0x8(%ebp),%eax
c000bdb8:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:20
	sub_path = path_parse(sub_path, name);
c000bdbb:	83 ec 08             	sub    $0x8,%esp
c000bdbe:	8d 45 e0             	lea    -0x20(%ebp),%eax
c000bdc1:	50                   	push   %eax
c000bdc2:	ff 75 f4             	pushl  -0xc(%ebp)
c000bdc5:	e8 97 b4 ff ff       	call   c0007261 <path_parse>
c000bdca:	83 c4 10             	add    $0x10,%esp
c000bdcd:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:21
	if (name[0] == 0) {	// 若只键入了"/",直接将"/"存入new_abs_path后返回 
c000bdd0:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c000bdd4:	84 c0                	test   %al,%al
c000bdd6:	75 14                	jne    c000bdec <wash_path+0x7c>
/work/x86_os_my/shell/buildin_cmd.c:22
		new_abs_path[0] = '/';
c000bdd8:	8b 45 0c             	mov    0xc(%ebp),%eax
c000bddb:	c6 00 2f             	movb   $0x2f,(%eax)
/work/x86_os_my/shell/buildin_cmd.c:23
		new_abs_path[1] = 0;
c000bdde:	8b 45 0c             	mov    0xc(%ebp),%eax
c000bde1:	83 c0 01             	add    $0x1,%eax
c000bde4:	c6 00 00             	movb   $0x0,(%eax)
c000bde7:	e9 f2 00 00 00       	jmp    c000bede <wash_path+0x16e>
/work/x86_os_my/shell/buildin_cmd.c:26
		return;
	}
	new_abs_path[0] = 0;	// 避免传给new_abs_path的缓冲区不干净
c000bdec:	8b 45 0c             	mov    0xc(%ebp),%eax
c000bdef:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/shell/buildin_cmd.c:27
	strcat(new_abs_path, "/");
c000bdf2:	83 ec 08             	sub    $0x8,%esp
c000bdf5:	68 fb ed 00 c0       	push   $0xc000edfb
c000bdfa:	ff 75 0c             	pushl  0xc(%ebp)
c000bdfd:	e8 f5 7d ff ff       	call   c0003bf7 <strcat>
c000be02:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:28
	while (name[0]) {
c000be05:	e9 c8 00 00 00       	jmp    c000bed2 <wash_path+0x162>
/work/x86_os_my/shell/buildin_cmd.c:30
		/* 如果是上一级目录“..” */
		if (!strcmp("..", name)) {
c000be0a:	83 ec 08             	sub    $0x8,%esp
c000be0d:	8d 45 e0             	lea    -0x20(%ebp),%eax
c000be10:	50                   	push   %eax
c000be11:	68 fd ed 00 c0       	push   $0xc000edfd
c000be16:	e8 ad 7c ff ff       	call   c0003ac8 <strcmp>
c000be1b:	83 c4 10             	add    $0x10,%esp
c000be1e:	84 c0                	test   %al,%al
c000be20:	75 2e                	jne    c000be50 <wash_path+0xe0>
/work/x86_os_my/shell/buildin_cmd.c:31
			char* slash_ptr =  strrchr(new_abs_path, '/');
c000be22:	83 ec 08             	sub    $0x8,%esp
c000be25:	6a 2f                	push   $0x2f
c000be27:	ff 75 0c             	pushl  0xc(%ebp)
c000be2a:	e8 6a 7d ff ff       	call   c0003b99 <strrchr>
c000be2f:	83 c4 10             	add    $0x10,%esp
c000be32:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:34
			/*如果未到new_abs_path中的顶层目录,就将最右边的'/'替换为0,
			这样便去除了new_abs_path中最后一层路径,相当于到了上一级目录 */
			if (slash_ptr != new_abs_path) {	// 如new_abs_path为“/a/b”,".."之后则变为“/a”
c000be35:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000be38:	3b 45 0c             	cmp    0xc(%ebp),%eax
c000be3b:	74 08                	je     c000be45 <wash_path+0xd5>
/work/x86_os_my/shell/buildin_cmd.c:35
				*slash_ptr = 0;
c000be3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000be40:	c6 00 00             	movb   $0x0,(%eax)
c000be43:	eb 5f                	jmp    c000bea4 <wash_path+0x134>
/work/x86_os_my/shell/buildin_cmd.c:39
			} else {	// 如new_abs_path为"/a",".."之后则变为"/"
				/* 若new_abs_path中只有1个'/',即表示已经到了顶层目录,
				就将下一个字符置为结束符0. */
				*(slash_ptr + 1) = 0;
c000be45:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000be48:	83 c0 01             	add    $0x1,%eax
c000be4b:	c6 00 00             	movb   $0x0,(%eax)
c000be4e:	eb 54                	jmp    c000bea4 <wash_path+0x134>
/work/x86_os_my/shell/buildin_cmd.c:41
			}
		} else if (strcmp(".", name)) {	// 如果路径不是‘.’,就将name拼接到new_abs_path
c000be50:	83 ec 08             	sub    $0x8,%esp
c000be53:	8d 45 e0             	lea    -0x20(%ebp),%eax
c000be56:	50                   	push   %eax
c000be57:	68 00 ee 00 c0       	push   $0xc000ee00
c000be5c:	e8 67 7c ff ff       	call   c0003ac8 <strcmp>
c000be61:	83 c4 10             	add    $0x10,%esp
c000be64:	84 c0                	test   %al,%al
c000be66:	74 3c                	je     c000bea4 <wash_path+0x134>
/work/x86_os_my/shell/buildin_cmd.c:42
			if (strcmp(new_abs_path, "/")) {	// 如果new_abs_path不是"/",就拼接一个"/",此处的判断是为了避免路径开头变成这样"//"
c000be68:	83 ec 08             	sub    $0x8,%esp
c000be6b:	68 fb ed 00 c0       	push   $0xc000edfb
c000be70:	ff 75 0c             	pushl  0xc(%ebp)
c000be73:	e8 50 7c ff ff       	call   c0003ac8 <strcmp>
c000be78:	83 c4 10             	add    $0x10,%esp
c000be7b:	84 c0                	test   %al,%al
c000be7d:	74 13                	je     c000be92 <wash_path+0x122>
/work/x86_os_my/shell/buildin_cmd.c:43
				strcat(new_abs_path, "/");
c000be7f:	83 ec 08             	sub    $0x8,%esp
c000be82:	68 fb ed 00 c0       	push   $0xc000edfb
c000be87:	ff 75 0c             	pushl  0xc(%ebp)
c000be8a:	e8 68 7d ff ff       	call   c0003bf7 <strcat>
c000be8f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:45
			}
			strcat(new_abs_path, name);
c000be92:	83 ec 08             	sub    $0x8,%esp
c000be95:	8d 45 e0             	lea    -0x20(%ebp),%eax
c000be98:	50                   	push   %eax
c000be99:	ff 75 0c             	pushl  0xc(%ebp)
c000be9c:	e8 56 7d ff ff       	call   c0003bf7 <strcat>
c000bea1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:49
		}	// 若name为当前目录".",无须处理new_abs_path

		/* 继续遍历下一层路径 */
		memset(name, 0, MAX_FILE_NAME_LEN);
c000bea4:	83 ec 04             	sub    $0x4,%esp
c000bea7:	6a 10                	push   $0x10
c000bea9:	6a 00                	push   $0x0
c000beab:	8d 45 e0             	lea    -0x20(%ebp),%eax
c000beae:	50                   	push   %eax
c000beaf:	e8 3f 7a ff ff       	call   c00038f3 <memset>
c000beb4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:50
		if (sub_path) {
c000beb7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c000bebb:	74 15                	je     c000bed2 <wash_path+0x162>
/work/x86_os_my/shell/buildin_cmd.c:51
			sub_path = path_parse(sub_path, name);
c000bebd:	83 ec 08             	sub    $0x8,%esp
c000bec0:	8d 45 e0             	lea    -0x20(%ebp),%eax
c000bec3:	50                   	push   %eax
c000bec4:	ff 75 f4             	pushl  -0xc(%ebp)
c000bec7:	e8 95 b3 ff ff       	call   c0007261 <path_parse>
c000becc:	83 c4 10             	add    $0x10,%esp
c000becf:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:28
		new_abs_path[1] = 0;
		return;
	}
	new_abs_path[0] = 0;	// 避免传给new_abs_path的缓冲区不干净
	strcat(new_abs_path, "/");
	while (name[0]) {
c000bed2:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c000bed6:	84 c0                	test   %al,%al
c000bed8:	0f 85 2c ff ff ff    	jne    c000be0a <wash_path+0x9a>
/work/x86_os_my/shell/buildin_cmd.c:54
		memset(name, 0, MAX_FILE_NAME_LEN);
		if (sub_path) {
			sub_path = path_parse(sub_path, name);
		}
	}
}
c000bede:	c9                   	leave  
c000bedf:	c3                   	ret    

c000bee0 <make_clear_abs_path>:
make_clear_abs_path():
/work/x86_os_my/shell/buildin_cmd.c:60

/* 相对路径，转换成绝对路径，应该给用户层做，陷入内核态之后的操作不应该过长。
 * 当前工作路径 + 相对路径 = 绝对路径
 */
/* 将path处理成不含..和.的绝对路径,存储在final_path */
void make_clear_abs_path(char* path, char* final_path) {
c000bee0:	55                   	push   %ebp
c000bee1:	89 e5                	mov    %esp,%ebp
c000bee3:	57                   	push   %edi
c000bee4:	81 ec 04 02 00 00    	sub    $0x204,%esp
/work/x86_os_my/shell/buildin_cmd.c:61
	char abs_path[MAX_PATH_LEN] = {0};
c000beea:	8d 95 f8 fd ff ff    	lea    -0x208(%ebp),%edx
c000bef0:	b8 00 00 00 00       	mov    $0x0,%eax
c000bef5:	b9 80 00 00 00       	mov    $0x80,%ecx
c000befa:	89 d7                	mov    %edx,%edi
c000befc:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/shell/buildin_cmd.c:63
	/* 先判断是否输入的是绝对路径 */
	if (path[0] != '/') {	// 若输入的不是绝对路径,就拼接成绝对路径
c000befe:	8b 45 08             	mov    0x8(%ebp),%eax
c000bf01:	0f b6 00             	movzbl (%eax),%eax
c000bf04:	3c 2f                	cmp    $0x2f,%al
c000bf06:	74 61                	je     c000bf69 <make_clear_abs_path+0x89>
/work/x86_os_my/shell/buildin_cmd.c:64
		memset(abs_path, 0, MAX_PATH_LEN);
c000bf08:	83 ec 04             	sub    $0x4,%esp
c000bf0b:	68 00 02 00 00       	push   $0x200
c000bf10:	6a 00                	push   $0x0
c000bf12:	8d 85 f8 fd ff ff    	lea    -0x208(%ebp),%eax
c000bf18:	50                   	push   %eax
c000bf19:	e8 d5 79 ff ff       	call   c00038f3 <memset>
c000bf1e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:65
		if (getcwd(abs_path, MAX_PATH_LEN) != NULL) {
c000bf21:	83 ec 08             	sub    $0x8,%esp
c000bf24:	68 00 02 00 00       	push   $0x200
c000bf29:	8d 85 f8 fd ff ff    	lea    -0x208(%ebp),%eax
c000bf2f:	50                   	push   %eax
c000bf30:	e8 53 99 ff ff       	call   c0005888 <getcwd>
c000bf35:	83 c4 10             	add    $0x10,%esp
c000bf38:	85 c0                	test   %eax,%eax
c000bf3a:	74 2d                	je     c000bf69 <make_clear_abs_path+0x89>
/work/x86_os_my/shell/buildin_cmd.c:66
			if (!((abs_path[0] == '/') && (abs_path[1] == 0))) {	// 若abs_path表示的当前目录不是根目录/
c000bf3c:	0f b6 85 f8 fd ff ff 	movzbl -0x208(%ebp),%eax
c000bf43:	3c 2f                	cmp    $0x2f,%al
c000bf45:	75 0b                	jne    c000bf52 <make_clear_abs_path+0x72>
/work/x86_os_my/shell/buildin_cmd.c:66 (discriminator 1)
c000bf47:	0f b6 85 f9 fd ff ff 	movzbl -0x207(%ebp),%eax
c000bf4e:	84 c0                	test   %al,%al
c000bf50:	74 17                	je     c000bf69 <make_clear_abs_path+0x89>
/work/x86_os_my/shell/buildin_cmd.c:67
				strcat(abs_path, "/");
c000bf52:	83 ec 08             	sub    $0x8,%esp
c000bf55:	68 fb ed 00 c0       	push   $0xc000edfb
c000bf5a:	8d 85 f8 fd ff ff    	lea    -0x208(%ebp),%eax
c000bf60:	50                   	push   %eax
c000bf61:	e8 91 7c ff ff       	call   c0003bf7 <strcat>
c000bf66:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:71
			}
		}
	}
	strcat(abs_path, path);
c000bf69:	83 ec 08             	sub    $0x8,%esp
c000bf6c:	ff 75 08             	pushl  0x8(%ebp)
c000bf6f:	8d 85 f8 fd ff ff    	lea    -0x208(%ebp),%eax
c000bf75:	50                   	push   %eax
c000bf76:	e8 7c 7c ff ff       	call   c0003bf7 <strcat>
c000bf7b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:72
	wash_path(abs_path, final_path);
c000bf7e:	83 ec 08             	sub    $0x8,%esp
c000bf81:	ff 75 0c             	pushl  0xc(%ebp)
c000bf84:	8d 85 f8 fd ff ff    	lea    -0x208(%ebp),%eax
c000bf8a:	50                   	push   %eax
c000bf8b:	e8 e0 fd ff ff       	call   c000bd70 <wash_path>
c000bf90:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:73
}
c000bf93:	90                   	nop
c000bf94:	8b 7d fc             	mov    -0x4(%ebp),%edi
c000bf97:	c9                   	leave  
c000bf98:	c3                   	ret    

c000bf99 <buildin_pwd>:
buildin_pwd():
/work/x86_os_my/shell/buildin_cmd.c:77


/* pwd命令的内建函数 */
void buildin_pwd(uint32_t argc, char** argv UNUSED) {
c000bf99:	55                   	push   %ebp
c000bf9a:	89 e5                	mov    %esp,%ebp
c000bf9c:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/shell/buildin_cmd.c:78
	if (argc != 1) {
c000bf9f:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c000bfa3:	74 12                	je     c000bfb7 <buildin_pwd+0x1e>
/work/x86_os_my/shell/buildin_cmd.c:79
		printf("pwd: no argument support!\n");
c000bfa5:	83 ec 0c             	sub    $0xc,%esp
c000bfa8:	68 02 ee 00 c0       	push   $0xc000ee02
c000bfad:	e8 04 9e ff ff       	call   c0005db6 <printf>
c000bfb2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:80
		return;
c000bfb5:	eb 40                	jmp    c000bff7 <buildin_pwd+0x5e>
/work/x86_os_my/shell/buildin_cmd.c:82
	} else {
		if (NULL != getcwd(final_path, MAX_PATH_LEN)) {
c000bfb7:	83 ec 08             	sub    $0x8,%esp
c000bfba:	68 00 02 00 00       	push   $0x200
c000bfbf:	68 20 16 01 c0       	push   $0xc0011620
c000bfc4:	e8 bf 98 ff ff       	call   c0005888 <getcwd>
c000bfc9:	83 c4 10             	add    $0x10,%esp
c000bfcc:	85 c0                	test   %eax,%eax
c000bfce:	74 17                	je     c000bfe7 <buildin_pwd+0x4e>
/work/x86_os_my/shell/buildin_cmd.c:83
			printf("%s\n", final_path);
c000bfd0:	83 ec 08             	sub    $0x8,%esp
c000bfd3:	68 20 16 01 c0       	push   $0xc0011620
c000bfd8:	68 1d ee 00 c0       	push   $0xc000ee1d
c000bfdd:	e8 d4 9d ff ff       	call   c0005db6 <printf>
c000bfe2:	83 c4 10             	add    $0x10,%esp
c000bfe5:	eb 10                	jmp    c000bff7 <buildin_pwd+0x5e>
/work/x86_os_my/shell/buildin_cmd.c:85
		} else {
			printf("pwd: get current work directory failed.\n");
c000bfe7:	83 ec 0c             	sub    $0xc,%esp
c000bfea:	68 24 ee 00 c0       	push   $0xc000ee24
c000bfef:	e8 c2 9d ff ff       	call   c0005db6 <printf>
c000bff4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:88
		}
	}
}
c000bff7:	c9                   	leave  
c000bff8:	c3                   	ret    

c000bff9 <buildin_cd>:
buildin_cd():
/work/x86_os_my/shell/buildin_cmd.c:91

/* cd命令的内建函数 */
char* buildin_cd(uint32_t argc, char** argv) {
c000bff9:	55                   	push   %ebp
c000bffa:	89 e5                	mov    %esp,%ebp
c000bffc:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/shell/buildin_cmd.c:92
	if (argc > 2) {
c000bfff:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c000c003:	76 17                	jbe    c000c01c <buildin_cd+0x23>
/work/x86_os_my/shell/buildin_cmd.c:93
		printf("cd: only support 1 argument!\n");
c000c005:	83 ec 0c             	sub    $0xc,%esp
c000c008:	68 4d ee 00 c0       	push   $0xc000ee4d
c000c00d:	e8 a4 9d ff ff       	call   c0005db6 <printf>
c000c012:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:94
		return NULL;
c000c015:	b8 00 00 00 00       	mov    $0x0,%eax
c000c01a:	eb 65                	jmp    c000c081 <buildin_cd+0x88>
/work/x86_os_my/shell/buildin_cmd.c:98
	}

	/* 若是只键入cd而无参数,直接返回到根目录. */
	if (argc == 1) {
c000c01c:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c000c020:	75 10                	jne    c000c032 <buildin_cd+0x39>
/work/x86_os_my/shell/buildin_cmd.c:99
		final_path[0] = '/';
c000c022:	c6 05 20 16 01 c0 2f 	movb   $0x2f,0xc0011620
/work/x86_os_my/shell/buildin_cmd.c:100
		final_path[1] = 0;
c000c029:	c6 05 21 16 01 c0 00 	movb   $0x0,0xc0011621
c000c030:	eb 19                	jmp    c000c04b <buildin_cd+0x52>
/work/x86_os_my/shell/buildin_cmd.c:102
	} else {
		make_clear_abs_path(argv[1], final_path);
c000c032:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c035:	83 c0 04             	add    $0x4,%eax
c000c038:	8b 00                	mov    (%eax),%eax
c000c03a:	83 ec 08             	sub    $0x8,%esp
c000c03d:	68 20 16 01 c0       	push   $0xc0011620
c000c042:	50                   	push   %eax
c000c043:	e8 98 fe ff ff       	call   c000bee0 <make_clear_abs_path>
c000c048:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:105
	}

	if (chdir(final_path) == -1) {
c000c04b:	83 ec 0c             	sub    $0xc,%esp
c000c04e:	68 20 16 01 c0       	push   $0xc0011620
c000c053:	e8 bd 99 ff ff       	call   c0005a15 <chdir>
c000c058:	83 c4 10             	add    $0x10,%esp
c000c05b:	83 f8 ff             	cmp    $0xffffffff,%eax
c000c05e:	75 1c                	jne    c000c07c <buildin_cd+0x83>
/work/x86_os_my/shell/buildin_cmd.c:106
		printf("cd: no such directory %s\n", final_path);
c000c060:	83 ec 08             	sub    $0x8,%esp
c000c063:	68 20 16 01 c0       	push   $0xc0011620
c000c068:	68 6b ee 00 c0       	push   $0xc000ee6b
c000c06d:	e8 44 9d ff ff       	call   c0005db6 <printf>
c000c072:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:107
		return NULL;
c000c075:	b8 00 00 00 00       	mov    $0x0,%eax
c000c07a:	eb 05                	jmp    c000c081 <buildin_cd+0x88>
/work/x86_os_my/shell/buildin_cmd.c:109
	}
	return final_path;
c000c07c:	b8 20 16 01 c0       	mov    $0xc0011620,%eax
/work/x86_os_my/shell/buildin_cmd.c:110
}
c000c081:	c9                   	leave  
c000c082:	c3                   	ret    

c000c083 <buildin_ls>:
buildin_ls():
/work/x86_os_my/shell/buildin_cmd.c:113

/* ls命令的内建函数 */
void buildin_ls(uint32_t argc, char** argv) {
c000c083:	55                   	push   %ebp
c000c084:	89 e5                	mov    %esp,%ebp
c000c086:	57                   	push   %edi
c000c087:	53                   	push   %ebx
c000c088:	81 ec 30 02 00 00    	sub    $0x230,%esp
/work/x86_os_my/shell/buildin_cmd.c:114
	char* pathname = NULL;
c000c08e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:116
	struct stat file_stat;
	memset(&file_stat, 0, sizeof(struct stat));
c000c095:	83 ec 04             	sub    $0x4,%esp
c000c098:	6a 0c                	push   $0xc
c000c09a:	6a 00                	push   $0x0
c000c09c:	8d 45 c8             	lea    -0x38(%ebp),%eax
c000c09f:	50                   	push   %eax
c000c0a0:	e8 4e 78 ff ff       	call   c00038f3 <memset>
c000c0a5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:117
	bool long_info = false;
c000c0a8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:118
	uint32_t arg_path_nr = 0;
c000c0af:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:119
	uint32_t arg_idx = 1;   // 跨过argv[0],argv[0]是字符串“ls”
c000c0b6:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:120
	while (arg_idx < argc) {
c000c0bd:	e9 ec 00 00 00       	jmp    c000c1ae <buildin_ls+0x12b>
/work/x86_os_my/shell/buildin_cmd.c:121
		if (argv[arg_idx][0] == '-') {	  // 如果是选项,单词的首字符是-
c000c0c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000c0c5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000c0cc:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c0cf:	01 d0                	add    %edx,%eax
c000c0d1:	8b 00                	mov    (%eax),%eax
c000c0d3:	0f b6 00             	movzbl (%eax),%eax
c000c0d6:	3c 2d                	cmp    $0x2d,%al
c000c0d8:	0f 85 94 00 00 00    	jne    c000c172 <buildin_ls+0xef>
/work/x86_os_my/shell/buildin_cmd.c:122
			if (!strcmp("-l", argv[arg_idx])) {         // 如果是参数-l
c000c0de:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000c0e1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000c0e8:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c0eb:	01 d0                	add    %edx,%eax
c000c0ed:	8b 00                	mov    (%eax),%eax
c000c0ef:	83 ec 08             	sub    $0x8,%esp
c000c0f2:	50                   	push   %eax
c000c0f3:	68 85 ee 00 c0       	push   $0xc000ee85
c000c0f8:	e8 cb 79 ff ff       	call   c0003ac8 <strcmp>
c000c0fd:	83 c4 10             	add    $0x10,%esp
c000c100:	84 c0                	test   %al,%al
c000c102:	75 0c                	jne    c000c110 <buildin_ls+0x8d>
/work/x86_os_my/shell/buildin_cmd.c:123
				long_info = true;
c000c104:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c000c10b:	e9 9a 00 00 00       	jmp    c000c1aa <buildin_ls+0x127>
/work/x86_os_my/shell/buildin_cmd.c:124
			} else if (!strcmp("-h", argv[arg_idx])) {   // 参数-h
c000c110:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000c113:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000c11a:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c11d:	01 d0                	add    %edx,%eax
c000c11f:	8b 00                	mov    (%eax),%eax
c000c121:	83 ec 08             	sub    $0x8,%esp
c000c124:	50                   	push   %eax
c000c125:	68 88 ee 00 c0       	push   $0xc000ee88
c000c12a:	e8 99 79 ff ff       	call   c0003ac8 <strcmp>
c000c12f:	83 c4 10             	add    $0x10,%esp
c000c132:	84 c0                	test   %al,%al
c000c134:	75 15                	jne    c000c14b <buildin_ls+0xc8>
/work/x86_os_my/shell/buildin_cmd.c:125
				printf("usage: -l list all infomation about the file.\n-h for help\nlist all files in the current dirctory if no option\n");
c000c136:	83 ec 0c             	sub    $0xc,%esp
c000c139:	68 8c ee 00 c0       	push   $0xc000ee8c
c000c13e:	e8 73 9c ff ff       	call   c0005db6 <printf>
c000c143:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:126
				return;
c000c146:	e9 f2 02 00 00       	jmp    c000c43d <buildin_ls+0x3ba>
/work/x86_os_my/shell/buildin_cmd.c:128
			} else {	// 只支持-h -l两个选项
				printf("ls: invalid option %s\nTry `ls -h' for more information.\n", argv[arg_idx]);
c000c14b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000c14e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000c155:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c158:	01 d0                	add    %edx,%eax
c000c15a:	8b 00                	mov    (%eax),%eax
c000c15c:	83 ec 08             	sub    $0x8,%esp
c000c15f:	50                   	push   %eax
c000c160:	68 fc ee 00 c0       	push   $0xc000eefc
c000c165:	e8 4c 9c ff ff       	call   c0005db6 <printf>
c000c16a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:129
				return;
c000c16d:	e9 cb 02 00 00       	jmp    c000c43d <buildin_ls+0x3ba>
/work/x86_os_my/shell/buildin_cmd.c:132
			}
		} else {	     // ls的路径参数
			if (arg_path_nr == 0) {
c000c172:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c000c176:	75 1d                	jne    c000c195 <buildin_ls+0x112>
/work/x86_os_my/shell/buildin_cmd.c:133
				pathname = argv[arg_idx];
c000c178:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000c17b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000c182:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c185:	01 d0                	add    %edx,%eax
c000c187:	8b 00                	mov    (%eax),%eax
c000c189:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:134
				arg_path_nr = 1;
c000c18c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
c000c193:	eb 15                	jmp    c000c1aa <buildin_ls+0x127>
/work/x86_os_my/shell/buildin_cmd.c:136
			} else {
				printf("ls: only support one path\n");
c000c195:	83 ec 0c             	sub    $0xc,%esp
c000c198:	68 35 ef 00 c0       	push   $0xc000ef35
c000c19d:	e8 14 9c ff ff       	call   c0005db6 <printf>
c000c1a2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:137
				return;
c000c1a5:	e9 93 02 00 00       	jmp    c000c43d <buildin_ls+0x3ba>
/work/x86_os_my/shell/buildin_cmd.c:140
			}
		}
		arg_idx++;
c000c1aa:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:120
	struct stat file_stat;
	memset(&file_stat, 0, sizeof(struct stat));
	bool long_info = false;
	uint32_t arg_path_nr = 0;
	uint32_t arg_idx = 1;   // 跨过argv[0],argv[0]是字符串“ls”
	while (arg_idx < argc) {
c000c1ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000c1b1:	3b 45 08             	cmp    0x8(%ebp),%eax
c000c1b4:	0f 82 08 ff ff ff    	jb     c000c0c2 <buildin_ls+0x3f>
/work/x86_os_my/shell/buildin_cmd.c:143
			}
		}
		arg_idx++;
	}

	if (pathname == NULL) {	 // 若只输入了ls 或 ls -l,没有输入操作路径,默认以当前路径的绝对路径为参数.
c000c1ba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c000c1be:	75 37                	jne    c000c1f7 <buildin_ls+0x174>
/work/x86_os_my/shell/buildin_cmd.c:144
		if (NULL != getcwd(final_path, MAX_PATH_LEN)) {
c000c1c0:	83 ec 08             	sub    $0x8,%esp
c000c1c3:	68 00 02 00 00       	push   $0x200
c000c1c8:	68 20 16 01 c0       	push   $0xc0011620
c000c1cd:	e8 b6 96 ff ff       	call   c0005888 <getcwd>
c000c1d2:	83 c4 10             	add    $0x10,%esp
c000c1d5:	85 c0                	test   %eax,%eax
c000c1d7:	74 09                	je     c000c1e2 <buildin_ls+0x15f>
/work/x86_os_my/shell/buildin_cmd.c:145
			pathname = final_path;
c000c1d9:	c7 45 f4 20 16 01 c0 	movl   $0xc0011620,-0xc(%ebp)
c000c1e0:	eb 2f                	jmp    c000c211 <buildin_ls+0x18e>
/work/x86_os_my/shell/buildin_cmd.c:147
		} else {
			printf("ls: getcwd for default path failed\n");
c000c1e2:	83 ec 0c             	sub    $0xc,%esp
c000c1e5:	68 50 ef 00 c0       	push   $0xc000ef50
c000c1ea:	e8 c7 9b ff ff       	call   c0005db6 <printf>
c000c1ef:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:148
			return;
c000c1f2:	e9 46 02 00 00       	jmp    c000c43d <buildin_ls+0x3ba>
/work/x86_os_my/shell/buildin_cmd.c:151
		}
	} else {
		make_clear_abs_path(pathname, final_path);
c000c1f7:	83 ec 08             	sub    $0x8,%esp
c000c1fa:	68 20 16 01 c0       	push   $0xc0011620
c000c1ff:	ff 75 f4             	pushl  -0xc(%ebp)
c000c202:	e8 d9 fc ff ff       	call   c000bee0 <make_clear_abs_path>
c000c207:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:152
		pathname = final_path;
c000c20a:	c7 45 f4 20 16 01 c0 	movl   $0xc0011620,-0xc(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:155
	}

	if (stat(pathname, &file_stat) == -1) {
c000c211:	83 ec 08             	sub    $0x8,%esp
c000c214:	8d 45 c8             	lea    -0x38(%ebp),%eax
c000c217:	50                   	push   %eax
c000c218:	ff 75 f4             	pushl  -0xc(%ebp)
c000c21b:	e8 d3 97 ff ff       	call   c00059f3 <stat>
c000c220:	83 c4 10             	add    $0x10,%esp
c000c223:	83 f8 ff             	cmp    $0xffffffff,%eax
c000c226:	75 18                	jne    c000c240 <buildin_ls+0x1bd>
/work/x86_os_my/shell/buildin_cmd.c:156
		printf("ls: cannot access %s: No such file or directory\n", pathname);
c000c228:	83 ec 08             	sub    $0x8,%esp
c000c22b:	ff 75 f4             	pushl  -0xc(%ebp)
c000c22e:	68 74 ef 00 c0       	push   $0xc000ef74
c000c233:	e8 7e 9b ff ff       	call   c0005db6 <printf>
c000c238:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:157
		return;
c000c23b:	e9 fd 01 00 00       	jmp    c000c43d <buildin_ls+0x3ba>
/work/x86_os_my/shell/buildin_cmd.c:159
	}
	if (file_stat.st_filetype == FT_DIRECTORY) {
c000c240:	8b 45 d0             	mov    -0x30(%ebp),%eax
c000c243:	83 f8 02             	cmp    $0x2,%eax
c000c246:	0f 85 be 01 00 00    	jne    c000c40a <buildin_ls+0x387>
/work/x86_os_my/shell/buildin_cmd.c:160
		struct dir* dir = opendir(pathname);
c000c24c:	83 ec 0c             	sub    $0xc,%esp
c000c24f:	ff 75 f4             	pushl  -0xc(%ebp)
c000c252:	e8 03 97 ff ff       	call   c000595a <opendir>
c000c257:	83 c4 10             	add    $0x10,%esp
c000c25a:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:161
		struct dir_entry* dir_e = NULL;
c000c25d:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:162
		char sub_pathname[MAX_PATH_LEN] = {0};
c000c264:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
c000c26a:	b8 00 00 00 00       	mov    $0x0,%eax
c000c26f:	b9 80 00 00 00       	mov    $0x80,%ecx
c000c274:	89 d7                	mov    %edx,%edi
c000c276:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/shell/buildin_cmd.c:163
		uint32_t pathname_len = strlen(pathname);
c000c278:	83 ec 0c             	sub    $0xc,%esp
c000c27b:	ff 75 f4             	pushl  -0xc(%ebp)
c000c27e:	e8 fa 77 ff ff       	call   c0003a7d <strlen>
c000c283:	83 c4 10             	add    $0x10,%esp
c000c286:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:164
		uint32_t last_char_idx = pathname_len - 1;
c000c289:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000c28c:	83 e8 01             	sub    $0x1,%eax
c000c28f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:165
		memcpy(sub_pathname, pathname, pathname_len);
c000c292:	83 ec 04             	sub    $0x4,%esp
c000c295:	ff 75 e4             	pushl  -0x1c(%ebp)
c000c298:	ff 75 f4             	pushl  -0xc(%ebp)
c000c29b:	8d 85 c8 fd ff ff    	lea    -0x238(%ebp),%eax
c000c2a1:	50                   	push   %eax
c000c2a2:	e8 9e 76 ff ff       	call   c0003945 <memcpy>
c000c2a7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:166
		if (sub_pathname[last_char_idx] != '/') {
c000c2aa:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
c000c2b0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000c2b3:	01 d0                	add    %edx,%eax
c000c2b5:	0f b6 00             	movzbl (%eax),%eax
c000c2b8:	3c 2f                	cmp    $0x2f,%al
c000c2ba:	74 12                	je     c000c2ce <buildin_ls+0x24b>
/work/x86_os_my/shell/buildin_cmd.c:167
			sub_pathname[pathname_len] = '/';
c000c2bc:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
c000c2c2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000c2c5:	01 d0                	add    %edx,%eax
c000c2c7:	c6 00 2f             	movb   $0x2f,(%eax)
/work/x86_os_my/shell/buildin_cmd.c:168
			pathname_len++;
c000c2ca:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:170
		}
		rewinddir(dir);
c000c2ce:	83 ec 0c             	sub    $0xc,%esp
c000c2d1:	ff 75 dc             	pushl  -0x24(%ebp)
c000c2d4:	e8 fd 96 ff ff       	call   c00059d6 <rewinddir>
c000c2d9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:171
		if (long_info) {
c000c2dc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c000c2e0:	0f 84 ed 00 00 00    	je     c000c3d3 <buildin_ls+0x350>
/work/x86_os_my/shell/buildin_cmd.c:173
			char ftype;
			printf("total: %d\n", file_stat.st_size);
c000c2e6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c000c2e9:	83 ec 08             	sub    $0x8,%esp
c000c2ec:	50                   	push   %eax
c000c2ed:	68 a5 ef 00 c0       	push   $0xc000efa5
c000c2f2:	e8 bf 9a ff ff       	call   c0005db6 <printf>
c000c2f7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:174
			while((dir_e = readdir(dir))) {
c000c2fa:	e9 a3 00 00 00       	jmp    c000c3a2 <buildin_ls+0x31f>
/work/x86_os_my/shell/buildin_cmd.c:175
				ftype = 'd';
c000c2ff:	c6 45 e3 64          	movb   $0x64,-0x1d(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:176
				if (dir_e->f_type == FT_REGULAR) {
c000c303:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000c306:	8b 40 14             	mov    0x14(%eax),%eax
c000c309:	83 f8 01             	cmp    $0x1,%eax
c000c30c:	75 04                	jne    c000c312 <buildin_ls+0x28f>
/work/x86_os_my/shell/buildin_cmd.c:177
					ftype = '-';
c000c30e:	c6 45 e3 2d          	movb   $0x2d,-0x1d(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:179
				}
				sub_pathname[pathname_len] = 0;
c000c312:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
c000c318:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000c31b:	01 d0                	add    %edx,%eax
c000c31d:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/shell/buildin_cmd.c:180
				strcat(sub_pathname, dir_e->filename);
c000c320:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000c323:	83 ec 08             	sub    $0x8,%esp
c000c326:	50                   	push   %eax
c000c327:	8d 85 c8 fd ff ff    	lea    -0x238(%ebp),%eax
c000c32d:	50                   	push   %eax
c000c32e:	e8 c4 78 ff ff       	call   c0003bf7 <strcat>
c000c333:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:181
				memset(&file_stat, 0, sizeof(struct stat));
c000c336:	83 ec 04             	sub    $0x4,%esp
c000c339:	6a 0c                	push   $0xc
c000c33b:	6a 00                	push   $0x0
c000c33d:	8d 45 c8             	lea    -0x38(%ebp),%eax
c000c340:	50                   	push   %eax
c000c341:	e8 ad 75 ff ff       	call   c00038f3 <memset>
c000c346:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:182
				if (stat(sub_pathname, &file_stat) == -1) {
c000c349:	83 ec 08             	sub    $0x8,%esp
c000c34c:	8d 45 c8             	lea    -0x38(%ebp),%eax
c000c34f:	50                   	push   %eax
c000c350:	8d 85 c8 fd ff ff    	lea    -0x238(%ebp),%eax
c000c356:	50                   	push   %eax
c000c357:	e8 97 96 ff ff       	call   c00059f3 <stat>
c000c35c:	83 c4 10             	add    $0x10,%esp
c000c35f:	83 f8 ff             	cmp    $0xffffffff,%eax
c000c362:	75 1a                	jne    c000c37e <buildin_ls+0x2fb>
/work/x86_os_my/shell/buildin_cmd.c:183
					printf("ls: cannot access %s: No such file or directory\n", dir_e->filename);
c000c364:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000c367:	83 ec 08             	sub    $0x8,%esp
c000c36a:	50                   	push   %eax
c000c36b:	68 74 ef 00 c0       	push   $0xc000ef74
c000c370:	e8 41 9a ff ff       	call   c0005db6 <printf>
c000c375:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:184
					return;
c000c378:	90                   	nop
c000c379:	e9 bf 00 00 00       	jmp    c000c43d <buildin_ls+0x3ba>
/work/x86_os_my/shell/buildin_cmd.c:186
				}
				printf("%c  %d  %d  %s\n", ftype, dir_e->i_no, file_stat.st_size, dir_e->filename);
c000c37e:	8b 5d d8             	mov    -0x28(%ebp),%ebx
c000c381:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c000c384:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000c387:	8b 50 10             	mov    0x10(%eax),%edx
c000c38a:	0f be 45 e3          	movsbl -0x1d(%ebp),%eax
c000c38e:	83 ec 0c             	sub    $0xc,%esp
c000c391:	53                   	push   %ebx
c000c392:	51                   	push   %ecx
c000c393:	52                   	push   %edx
c000c394:	50                   	push   %eax
c000c395:	68 b0 ef 00 c0       	push   $0xc000efb0
c000c39a:	e8 17 9a ff ff       	call   c0005db6 <printf>
c000c39f:	83 c4 20             	add    $0x20,%esp
/work/x86_os_my/shell/buildin_cmd.c:174
		}
		rewinddir(dir);
		if (long_info) {
			char ftype;
			printf("total: %d\n", file_stat.st_size);
			while((dir_e = readdir(dir))) {
c000c3a2:	83 ec 0c             	sub    $0xc,%esp
c000c3a5:	ff 75 dc             	pushl  -0x24(%ebp)
c000c3a8:	e8 0a 96 ff ff       	call   c00059b7 <readdir>
c000c3ad:	83 c4 10             	add    $0x10,%esp
c000c3b0:	89 45 d8             	mov    %eax,-0x28(%ebp)
c000c3b3:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c000c3b7:	0f 85 42 ff ff ff    	jne    c000c2ff <buildin_ls+0x27c>
c000c3bd:	eb 3b                	jmp    c000c3fa <buildin_ls+0x377>
/work/x86_os_my/shell/buildin_cmd.c:190
				}
				printf("%c  %d  %d  %s\n", ftype, dir_e->i_no, file_stat.st_size, dir_e->filename);
			}
		} else {
			while((dir_e = readdir(dir))) {
				printf("%s ", dir_e->filename);
c000c3bf:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000c3c2:	83 ec 08             	sub    $0x8,%esp
c000c3c5:	50                   	push   %eax
c000c3c6:	68 c0 ef 00 c0       	push   $0xc000efc0
c000c3cb:	e8 e6 99 ff ff       	call   c0005db6 <printf>
c000c3d0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:189
					return;
				}
				printf("%c  %d  %d  %s\n", ftype, dir_e->i_no, file_stat.st_size, dir_e->filename);
			}
		} else {
			while((dir_e = readdir(dir))) {
c000c3d3:	83 ec 0c             	sub    $0xc,%esp
c000c3d6:	ff 75 dc             	pushl  -0x24(%ebp)
c000c3d9:	e8 d9 95 ff ff       	call   c00059b7 <readdir>
c000c3de:	83 c4 10             	add    $0x10,%esp
c000c3e1:	89 45 d8             	mov    %eax,-0x28(%ebp)
c000c3e4:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c000c3e8:	75 d5                	jne    c000c3bf <buildin_ls+0x33c>
/work/x86_os_my/shell/buildin_cmd.c:192
				printf("%s ", dir_e->filename);
			}
			printf("\n");
c000c3ea:	83 ec 0c             	sub    $0xc,%esp
c000c3ed:	68 c4 ef 00 c0       	push   $0xc000efc4
c000c3f2:	e8 bf 99 ff ff       	call   c0005db6 <printf>
c000c3f7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:194 (discriminator 1)
		}
		closedir(dir);
c000c3fa:	83 ec 0c             	sub    $0xc,%esp
c000c3fd:	ff 75 dc             	pushl  -0x24(%ebp)
c000c400:	e8 74 95 ff ff       	call   c0005979 <closedir>
c000c405:	83 c4 10             	add    $0x10,%esp
c000c408:	eb 33                	jmp    c000c43d <buildin_ls+0x3ba>
/work/x86_os_my/shell/buildin_cmd.c:196
	} else {
		if (long_info) {
c000c40a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c000c40e:	74 1a                	je     c000c42a <buildin_ls+0x3a7>
/work/x86_os_my/shell/buildin_cmd.c:197
			printf("-  %d  %d  %s\n", file_stat.st_ino, file_stat.st_size, pathname);
c000c410:	8b 55 cc             	mov    -0x34(%ebp),%edx
c000c413:	8b 45 c8             	mov    -0x38(%ebp),%eax
c000c416:	ff 75 f4             	pushl  -0xc(%ebp)
c000c419:	52                   	push   %edx
c000c41a:	50                   	push   %eax
c000c41b:	68 c6 ef 00 c0       	push   $0xc000efc6
c000c420:	e8 91 99 ff ff       	call   c0005db6 <printf>
c000c425:	83 c4 10             	add    $0x10,%esp
c000c428:	eb 13                	jmp    c000c43d <buildin_ls+0x3ba>
/work/x86_os_my/shell/buildin_cmd.c:199
		} else {
			printf("%s\n", pathname);
c000c42a:	83 ec 08             	sub    $0x8,%esp
c000c42d:	ff 75 f4             	pushl  -0xc(%ebp)
c000c430:	68 1d ee 00 c0       	push   $0xc000ee1d
c000c435:	e8 7c 99 ff ff       	call   c0005db6 <printf>
c000c43a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:202
		}
	}
}
c000c43d:	8d 65 f8             	lea    -0x8(%ebp),%esp
c000c440:	5b                   	pop    %ebx
c000c441:	5f                   	pop    %edi
c000c442:	5d                   	pop    %ebp
c000c443:	c3                   	ret    

c000c444 <buildin_ps>:
buildin_ps():
/work/x86_os_my/shell/buildin_cmd.c:205

/* ps命令内建函数 */
void buildin_ps(uint32_t argc, char** argv UNUSED) {
c000c444:	55                   	push   %ebp
c000c445:	89 e5                	mov    %esp,%ebp
c000c447:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/shell/buildin_cmd.c:206
	if (argc != 1) {
c000c44a:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c000c44e:	74 12                	je     c000c462 <buildin_ps+0x1e>
/work/x86_os_my/shell/buildin_cmd.c:207
		printf("ps: no argument support!\n");
c000c450:	83 ec 0c             	sub    $0xc,%esp
c000c453:	68 d5 ef 00 c0       	push   $0xc000efd5
c000c458:	e8 59 99 ff ff       	call   c0005db6 <printf>
c000c45d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:208
		return;
c000c460:	eb 05                	jmp    c000c467 <buildin_ps+0x23>
/work/x86_os_my/shell/buildin_cmd.c:210
	}
	ps();
c000c462:	e8 cd 95 ff ff       	call   c0005a34 <ps>
/work/x86_os_my/shell/buildin_cmd.c:211
}
c000c467:	c9                   	leave  
c000c468:	c3                   	ret    

c000c469 <buildin_clear>:
buildin_clear():
/work/x86_os_my/shell/buildin_cmd.c:214

/* clear命令内建函数 */
void buildin_clear(uint32_t argc, char** argv UNUSED) {
c000c469:	55                   	push   %ebp
c000c46a:	89 e5                	mov    %esp,%ebp
c000c46c:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/shell/buildin_cmd.c:215
	if (argc != 1) {
c000c46f:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c000c473:	74 12                	je     c000c487 <buildin_clear+0x1e>
/work/x86_os_my/shell/buildin_cmd.c:216
		printf("clear: no argument support!\n");
c000c475:	83 ec 0c             	sub    $0xc,%esp
c000c478:	68 ef ef 00 c0       	push   $0xc000efef
c000c47d:	e8 34 99 ff ff       	call   c0005db6 <printf>
c000c482:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:217
		return;
c000c485:	eb 05                	jmp    c000c48c <buildin_clear+0x23>
/work/x86_os_my/shell/buildin_cmd.c:219
	}
	clear();
c000c487:	e8 e9 93 ff ff       	call   c0005875 <clear>
/work/x86_os_my/shell/buildin_cmd.c:220
}
c000c48c:	c9                   	leave  
c000c48d:	c3                   	ret    

c000c48e <buildin_mkdir>:
buildin_mkdir():
/work/x86_os_my/shell/buildin_cmd.c:223

/* mkdir命令内建函数 */
int32_t buildin_mkdir(uint32_t argc, char** argv) {
c000c48e:	55                   	push   %ebp
c000c48f:	89 e5                	mov    %esp,%ebp
c000c491:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/shell/buildin_cmd.c:224
	int32_t ret = -1;
c000c494:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:225
	if (argc != 2) {
c000c49b:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c000c49f:	74 12                	je     c000c4b3 <buildin_mkdir+0x25>
/work/x86_os_my/shell/buildin_cmd.c:226
		printf("mkdir: only support 1 argument!\n");
c000c4a1:	83 ec 0c             	sub    $0xc,%esp
c000c4a4:	68 0c f0 00 c0       	push   $0xc000f00c
c000c4a9:	e8 08 99 ff ff       	call   c0005db6 <printf>
c000c4ae:	83 c4 10             	add    $0x10,%esp
c000c4b1:	eb 68                	jmp    c000c51b <buildin_mkdir+0x8d>
/work/x86_os_my/shell/buildin_cmd.c:228
	} else {
		make_clear_abs_path(argv[1], final_path);
c000c4b3:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c4b6:	83 c0 04             	add    $0x4,%eax
c000c4b9:	8b 00                	mov    (%eax),%eax
c000c4bb:	83 ec 08             	sub    $0x8,%esp
c000c4be:	68 20 16 01 c0       	push   $0xc0011620
c000c4c3:	50                   	push   %eax
c000c4c4:	e8 17 fa ff ff       	call   c000bee0 <make_clear_abs_path>
c000c4c9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:230
		/* 若创建的不是根目录 */
		if (strcmp("/", final_path)) {
c000c4cc:	83 ec 08             	sub    $0x8,%esp
c000c4cf:	68 20 16 01 c0       	push   $0xc0011620
c000c4d4:	68 fb ed 00 c0       	push   $0xc000edfb
c000c4d9:	e8 ea 75 ff ff       	call   c0003ac8 <strcmp>
c000c4de:	83 c4 10             	add    $0x10,%esp
c000c4e1:	84 c0                	test   %al,%al
c000c4e3:	74 36                	je     c000c51b <buildin_mkdir+0x8d>
/work/x86_os_my/shell/buildin_cmd.c:231
			if (mkdir(final_path) == 0) {
c000c4e5:	83 ec 0c             	sub    $0xc,%esp
c000c4e8:	68 20 16 01 c0       	push   $0xc0011620
c000c4ed:	e8 49 94 ff ff       	call   c000593b <mkdir>
c000c4f2:	83 c4 10             	add    $0x10,%esp
c000c4f5:	85 c0                	test   %eax,%eax
c000c4f7:	75 09                	jne    c000c502 <buildin_mkdir+0x74>
/work/x86_os_my/shell/buildin_cmd.c:232
				ret = 0;
c000c4f9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c000c500:	eb 19                	jmp    c000c51b <buildin_mkdir+0x8d>
/work/x86_os_my/shell/buildin_cmd.c:234
			} else {
				printf("mkdir: create directory %s failed.\n", argv[1]);
c000c502:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c505:	83 c0 04             	add    $0x4,%eax
c000c508:	8b 00                	mov    (%eax),%eax
c000c50a:	83 ec 08             	sub    $0x8,%esp
c000c50d:	50                   	push   %eax
c000c50e:	68 30 f0 00 c0       	push   $0xc000f030
c000c513:	e8 9e 98 ff ff       	call   c0005db6 <printf>
c000c518:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:238
			}
		}
	}
	return ret;
c000c51b:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/shell/buildin_cmd.c:239
}
c000c51e:	c9                   	leave  
c000c51f:	c3                   	ret    

c000c520 <buildin_rmdir>:
buildin_rmdir():
/work/x86_os_my/shell/buildin_cmd.c:242

/* rmdir命令内建函数 */
int32_t buildin_rmdir(uint32_t argc, char** argv) {
c000c520:	55                   	push   %ebp
c000c521:	89 e5                	mov    %esp,%ebp
c000c523:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/shell/buildin_cmd.c:243
	int32_t ret = -1;
c000c526:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:244
	if (argc != 2) {
c000c52d:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c000c531:	74 12                	je     c000c545 <buildin_rmdir+0x25>
/work/x86_os_my/shell/buildin_cmd.c:245
	printf("rmdir: only support 1 argument!\n");
c000c533:	83 ec 0c             	sub    $0xc,%esp
c000c536:	68 54 f0 00 c0       	push   $0xc000f054
c000c53b:	e8 76 98 ff ff       	call   c0005db6 <printf>
c000c540:	83 c4 10             	add    $0x10,%esp
c000c543:	eb 68                	jmp    c000c5ad <buildin_rmdir+0x8d>
/work/x86_os_my/shell/buildin_cmd.c:247
	} else {
		make_clear_abs_path(argv[1], final_path);
c000c545:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c548:	83 c0 04             	add    $0x4,%eax
c000c54b:	8b 00                	mov    (%eax),%eax
c000c54d:	83 ec 08             	sub    $0x8,%esp
c000c550:	68 20 16 01 c0       	push   $0xc0011620
c000c555:	50                   	push   %eax
c000c556:	e8 85 f9 ff ff       	call   c000bee0 <make_clear_abs_path>
c000c55b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:249
		/* 若删除的不是根目录 */
		if (strcmp("/", final_path)) {
c000c55e:	83 ec 08             	sub    $0x8,%esp
c000c561:	68 20 16 01 c0       	push   $0xc0011620
c000c566:	68 fb ed 00 c0       	push   $0xc000edfb
c000c56b:	e8 58 75 ff ff       	call   c0003ac8 <strcmp>
c000c570:	83 c4 10             	add    $0x10,%esp
c000c573:	84 c0                	test   %al,%al
c000c575:	74 36                	je     c000c5ad <buildin_rmdir+0x8d>
/work/x86_os_my/shell/buildin_cmd.c:250
			if (rmdir(final_path) == 0) {
c000c577:	83 ec 0c             	sub    $0xc,%esp
c000c57a:	68 20 16 01 c0       	push   $0xc0011620
c000c57f:	e8 14 94 ff ff       	call   c0005998 <rmdir>
c000c584:	83 c4 10             	add    $0x10,%esp
c000c587:	85 c0                	test   %eax,%eax
c000c589:	75 09                	jne    c000c594 <buildin_rmdir+0x74>
/work/x86_os_my/shell/buildin_cmd.c:251
				ret = 0;
c000c58b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c000c592:	eb 19                	jmp    c000c5ad <buildin_rmdir+0x8d>
/work/x86_os_my/shell/buildin_cmd.c:253
			} else {
				printf("rmdir: remove %s failed.\n", argv[1]);
c000c594:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c597:	83 c0 04             	add    $0x4,%eax
c000c59a:	8b 00                	mov    (%eax),%eax
c000c59c:	83 ec 08             	sub    $0x8,%esp
c000c59f:	50                   	push   %eax
c000c5a0:	68 75 f0 00 c0       	push   $0xc000f075
c000c5a5:	e8 0c 98 ff ff       	call   c0005db6 <printf>
c000c5aa:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:257
			}
		}
	}
	return ret;
c000c5ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/shell/buildin_cmd.c:258
}
c000c5b0:	c9                   	leave  
c000c5b1:	c3                   	ret    

c000c5b2 <buildin_rm>:
buildin_rm():
/work/x86_os_my/shell/buildin_cmd.c:261

/* rm命令内建函数 */
int32_t buildin_rm(uint32_t argc, char** argv) {
c000c5b2:	55                   	push   %ebp
c000c5b3:	89 e5                	mov    %esp,%ebp
c000c5b5:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/shell/buildin_cmd.c:262
	int32_t ret = -1;
c000c5b8:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:263
	if (argc != 2) {
c000c5bf:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c000c5c3:	74 12                	je     c000c5d7 <buildin_rm+0x25>
/work/x86_os_my/shell/buildin_cmd.c:264
		printf("rm: only support 1 argument!\n");
c000c5c5:	83 ec 0c             	sub    $0xc,%esp
c000c5c8:	68 8f f0 00 c0       	push   $0xc000f08f
c000c5cd:	e8 e4 97 ff ff       	call   c0005db6 <printf>
c000c5d2:	83 c4 10             	add    $0x10,%esp
c000c5d5:	eb 68                	jmp    c000c63f <buildin_rm+0x8d>
/work/x86_os_my/shell/buildin_cmd.c:266
	} else {
		make_clear_abs_path(argv[1], final_path);
c000c5d7:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c5da:	83 c0 04             	add    $0x4,%eax
c000c5dd:	8b 00                	mov    (%eax),%eax
c000c5df:	83 ec 08             	sub    $0x8,%esp
c000c5e2:	68 20 16 01 c0       	push   $0xc0011620
c000c5e7:	50                   	push   %eax
c000c5e8:	e8 f3 f8 ff ff       	call   c000bee0 <make_clear_abs_path>
c000c5ed:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:268
		/* 若删除的不是根目录 */
		if (strcmp("/", final_path)) {
c000c5f0:	83 ec 08             	sub    $0x8,%esp
c000c5f3:	68 20 16 01 c0       	push   $0xc0011620
c000c5f8:	68 fb ed 00 c0       	push   $0xc000edfb
c000c5fd:	e8 c6 74 ff ff       	call   c0003ac8 <strcmp>
c000c602:	83 c4 10             	add    $0x10,%esp
c000c605:	84 c0                	test   %al,%al
c000c607:	74 36                	je     c000c63f <buildin_rm+0x8d>
/work/x86_os_my/shell/buildin_cmd.c:269
			if (unlink(final_path) == 0) {
c000c609:	83 ec 0c             	sub    $0xc,%esp
c000c60c:	68 20 16 01 c0       	push   $0xc0011620
c000c611:	e8 06 93 ff ff       	call   c000591c <unlink>
c000c616:	83 c4 10             	add    $0x10,%esp
c000c619:	85 c0                	test   %eax,%eax
c000c61b:	75 09                	jne    c000c626 <buildin_rm+0x74>
/work/x86_os_my/shell/buildin_cmd.c:270
				ret = 0;
c000c61d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c000c624:	eb 19                	jmp    c000c63f <buildin_rm+0x8d>
/work/x86_os_my/shell/buildin_cmd.c:272
			} else {
				printf("rm: delete %s failed.\n", argv[1]);
c000c626:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c629:	83 c0 04             	add    $0x4,%eax
c000c62c:	8b 00                	mov    (%eax),%eax
c000c62e:	83 ec 08             	sub    $0x8,%esp
c000c631:	50                   	push   %eax
c000c632:	68 ad f0 00 c0       	push   $0xc000f0ad
c000c637:	e8 7a 97 ff ff       	call   c0005db6 <printf>
c000c63c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:276
			}
		}
	}
	return ret;
c000c63f:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/shell/buildin_cmd.c:277
}
c000c642:	c9                   	leave  
c000c643:	c3                   	ret    

c000c644 <segment_load>:
segment_load():
/work/x86_os_my/userprog/exec.c:57
};

/*
参数：文件描述符 fd、段在文件中的字节偏移量 offset、段大小 filesz、段被加载到的虚拟地址 vaddr
功能：将文件描述符 fd 指向的文件中，偏移为 offset，大小为 filesz 的一个"段"，加载到虚拟地址为 vaddr 的内存空间。*/
static bool segment_load(int32_t fd, uint32_t offset, uint32_t filesz, uint32_t vaddr) {
c000c644:	55                   	push   %ebp
c000c645:	89 e5                	mov    %esp,%ebp
c000c647:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/userprog/exec.c:59
	// vaddr地址所在的页的指针（指针的地址是虚拟空间的地址）（指向的空间包含:页的物理地址和属性）指针
	uint32_t vaddr_first_page = vaddr & 0xfffff000;
c000c64a:	8b 45 14             	mov    0x14(%ebp),%eax
c000c64d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c000c652:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/userprog/exec.c:60
	uint32_t size_in_first_page = PG_SIZE - (vaddr & 0x00000fff);	// 第一个页中可以用的空间
c000c655:	8b 45 14             	mov    0x14(%ebp),%eax
c000c658:	25 ff 0f 00 00       	and    $0xfff,%eax
c000c65d:	ba 00 10 00 00       	mov    $0x1000,%edx
c000c662:	29 c2                	sub    %eax,%edx
c000c664:	89 d0                	mov    %edx,%eax
c000c666:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/userprog/exec.c:61
	uint32_t occupy_pages = 0;
c000c669:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/userprog/exec.c:63
	/* 若一个页框容不下该段 */
	if (filesz > size_in_first_page) {
c000c670:	8b 45 10             	mov    0x10(%ebp),%eax
c000c673:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c000c676:	76 1c                	jbe    c000c694 <segment_load+0x50>
/work/x86_os_my/userprog/exec.c:64
		uint32_t left_size = filesz - size_in_first_page;
c000c678:	8b 45 10             	mov    0x10(%ebp),%eax
c000c67b:	2b 45 e4             	sub    -0x1c(%ebp),%eax
c000c67e:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/userprog/exec.c:65
		occupy_pages = DIV_ROUND_UP(left_size, PG_SIZE) + 1;		// 1是指vaddr_first_page
c000c681:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000c684:	05 ff 0f 00 00       	add    $0xfff,%eax
c000c689:	c1 e8 0c             	shr    $0xc,%eax
c000c68c:	83 c0 01             	add    $0x1,%eax
c000c68f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c000c692:	eb 07                	jmp    c000c69b <segment_load+0x57>
/work/x86_os_my/userprog/exec.c:67
	} else {
		occupy_pages = 1;
c000c694:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
/work/x86_os_my/userprog/exec.c:71
	}

	/* 为进程分配内存 */
	uint32_t page_idx = 0;
c000c69b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/userprog/exec.c:72
	uint32_t vaddr_page = vaddr_first_page;
c000c6a2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000c6a5:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/userprog/exec.c:73
	while (page_idx < occupy_pages) {
c000c6a8:	eb 60                	jmp    c000c70a <segment_load+0xc6>
/work/x86_os_my/userprog/exec.c:74
		uint32_t* pde = pde_ptr(vaddr_page);	//虚拟地址，指向 页目录项 的指针，指向的空间含：地址和属性
c000c6aa:	83 ec 0c             	sub    $0xc,%esp
c000c6ad:	ff 75 ec             	pushl  -0x14(%ebp)
c000c6b0:	e8 01 62 ff ff       	call   c00028b6 <pde_ptr>
c000c6b5:	83 c4 10             	add    $0x10,%esp
c000c6b8:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/userprog/exec.c:75
		uint32_t* pte = pte_ptr(vaddr_page);	//虚拟地址，指向 页表项   的指针
c000c6bb:	83 ec 0c             	sub    $0xc,%esp
c000c6be:	ff 75 ec             	pushl  -0x14(%ebp)
c000c6c1:	e8 c0 61 ff ff       	call   c0002886 <pte_ptr>
c000c6c6:	83 c4 10             	add    $0x10,%esp
c000c6c9:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/userprog/exec.c:80

		/* 如果pde不存在,或者pte不存在就分配内存.
		 * pde的判断要在pte之前,否则pde若不存在会导致
		 * 判断pte时缺页异常 */
		if (!(*pde & 0x00000001) || !(*pte & 0x00000001)) {	//页目录项或者页表项不存在
c000c6cc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000c6cf:	8b 00                	mov    (%eax),%eax
c000c6d1:	83 e0 01             	and    $0x1,%eax
c000c6d4:	85 c0                	test   %eax,%eax
c000c6d6:	74 0c                	je     c000c6e4 <segment_load+0xa0>
/work/x86_os_my/userprog/exec.c:80 (discriminator 1)
c000c6d8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000c6db:	8b 00                	mov    (%eax),%eax
c000c6dd:	83 e0 01             	and    $0x1,%eax
c000c6e0:	85 c0                	test   %eax,%eax
c000c6e2:	75 1b                	jne    c000c6ff <segment_load+0xbb>
/work/x86_os_my/userprog/exec.c:81
			if (get_a_page(PF_USER, vaddr_page) == NULL) {
c000c6e4:	83 ec 08             	sub    $0x8,%esp
c000c6e7:	ff 75 ec             	pushl  -0x14(%ebp)
c000c6ea:	6a 02                	push   $0x2
c000c6ec:	e8 be 64 ff ff       	call   c0002baf <get_a_page>
c000c6f1:	83 c4 10             	add    $0x10,%esp
c000c6f4:	85 c0                	test   %eax,%eax
c000c6f6:	75 07                	jne    c000c6ff <segment_load+0xbb>
/work/x86_os_my/userprog/exec.c:82
				return false;
c000c6f8:	b8 00 00 00 00       	mov    $0x0,%eax
c000c6fd:	eb 41                	jmp    c000c740 <segment_load+0xfc>
/work/x86_os_my/userprog/exec.c:85
			}
		} // 如果原进程的页表已经分配了,利用现有的物理页,直接覆盖进程体
		vaddr_page += PG_SIZE;	//下一页
c000c6ff:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
/work/x86_os_my/userprog/exec.c:86
		page_idx++;
c000c706:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/userprog/exec.c:73
	}

	/* 为进程分配内存 */
	uint32_t page_idx = 0;
	uint32_t vaddr_page = vaddr_first_page;
	while (page_idx < occupy_pages) {
c000c70a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000c70d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c000c710:	72 98                	jb     c000c6aa <segment_load+0x66>
/work/x86_os_my/userprog/exec.c:88
			}
		} // 如果原进程的页表已经分配了,利用现有的物理页,直接覆盖进程体
		vaddr_page += PG_SIZE;	//下一页
		page_idx++;
	}
	sys_lseek(fd, offset, SEEK_SET);
c000c712:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c715:	83 ec 04             	sub    $0x4,%esp
c000c718:	6a 01                	push   $0x1
c000c71a:	50                   	push   %eax
c000c71b:	ff 75 08             	pushl  0x8(%ebp)
c000c71e:	e8 7f b3 ff ff       	call   c0007aa2 <sys_lseek>
c000c723:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/exec.c:89
	sys_read(fd, (void*)vaddr, filesz);	//读到vaddr处
c000c726:	8b 45 14             	mov    0x14(%ebp),%eax
c000c729:	83 ec 04             	sub    $0x4,%esp
c000c72c:	ff 75 10             	pushl  0x10(%ebp)
c000c72f:	50                   	push   %eax
c000c730:	ff 75 08             	pushl  0x8(%ebp)
c000c733:	e8 86 b2 ff ff       	call   c00079be <sys_read>
c000c738:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/exec.c:90
	return true;
c000c73b:	b8 01 00 00 00       	mov    $0x1,%eax
/work/x86_os_my/userprog/exec.c:91
}
c000c740:	c9                   	leave  
c000c741:	c3                   	ret    

c000c742 <load>:
load():
/work/x86_os_my/userprog/exec.c:95

/* 从文件系统上加载用户程序pathname
 * 成功则返回程序的起始地址，否则返回-1 */
static int32_t load(const char* pathname) {
c000c742:	55                   	push   %ebp
c000c743:	89 e5                	mov    %esp,%ebp
c000c745:	83 ec 78             	sub    $0x78,%esp
/work/x86_os_my/userprog/exec.c:96
	int32_t ret = -1;
c000c748:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/userprog/exec.c:99
	struct Elf32_Ehdr elf_header;
	struct Elf32_Phdr prog_header;
	memset(&elf_header, 0, sizeof(struct Elf32_Ehdr));
c000c74f:	83 ec 04             	sub    $0x4,%esp
c000c752:	6a 34                	push   $0x34
c000c754:	6a 00                	push   $0x0
c000c756:	8d 45 b0             	lea    -0x50(%ebp),%eax
c000c759:	50                   	push   %eax
c000c75a:	e8 94 71 ff ff       	call   c00038f3 <memset>
c000c75f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/exec.c:101

	int32_t fd = sys_open(pathname, O_RDONLY);
c000c762:	83 ec 08             	sub    $0x8,%esp
c000c765:	6a 00                	push   $0x0
c000c767:	ff 75 08             	pushl  0x8(%ebp)
c000c76a:	e8 5a ae ff ff       	call   c00075c9 <sys_open>
c000c76f:	83 c4 10             	add    $0x10,%esp
c000c772:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/userprog/exec.c:102
	if (fd == -1) {
c000c775:	83 7d e8 ff          	cmpl   $0xffffffff,-0x18(%ebp)
c000c779:	75 0a                	jne    c000c785 <load+0x43>
/work/x86_os_my/userprog/exec.c:103
		return -1;
c000c77b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000c780:	e9 4a 01 00 00       	jmp    c000c8cf <load+0x18d>
/work/x86_os_my/userprog/exec.c:106
	}

	if (sys_read(fd, &elf_header, sizeof(struct Elf32_Ehdr)) != sizeof(struct Elf32_Ehdr)) {
c000c785:	83 ec 04             	sub    $0x4,%esp
c000c788:	6a 34                	push   $0x34
c000c78a:	8d 45 b0             	lea    -0x50(%ebp),%eax
c000c78d:	50                   	push   %eax
c000c78e:	ff 75 e8             	pushl  -0x18(%ebp)
c000c791:	e8 28 b2 ff ff       	call   c00079be <sys_read>
c000c796:	83 c4 10             	add    $0x10,%esp
c000c799:	83 f8 34             	cmp    $0x34,%eax
c000c79c:	74 0c                	je     c000c7aa <load+0x68>
/work/x86_os_my/userprog/exec.c:107
		ret = -1;
c000c79e:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/userprog/exec.c:108
		goto done;
c000c7a5:	e9 14 01 00 00       	jmp    c000c8be <load+0x17c>
/work/x86_os_my/userprog/exec.c:116
	/* 校验32位的elf头 */
	/* 
	e_phnum == 程序头表中条目的数量，也就是段的个数
	e_phentsize == 程序头表中每个条目的字节大小，即 描述段的数据结构的大小 == sizeof(struct Elf32_Phdr)
	细节见readme */
	if (memcmp(elf_header.e_ident, "\177ELF\1\1\1", 7) \
c000c7aa:	83 ec 04             	sub    $0x4,%esp
c000c7ad:	6a 07                	push   $0x7
c000c7af:	68 ce f0 00 c0       	push   $0xc000f0ce
c000c7b4:	8d 45 b0             	lea    -0x50(%ebp),%eax
c000c7b7:	50                   	push   %eax
c000c7b8:	e8 e8 71 ff ff       	call   c00039a5 <memcmp>
c000c7bd:	83 c4 10             	add    $0x10,%esp
c000c7c0:	85 c0                	test   %eax,%eax
c000c7c2:	75 30                	jne    c000c7f4 <load+0xb2>
/work/x86_os_my/userprog/exec.c:117
			|| elf_header.e_type != 2 \
c000c7c4:	0f b7 45 c0          	movzwl -0x40(%ebp),%eax
c000c7c8:	66 83 f8 02          	cmp    $0x2,%ax
c000c7cc:	75 26                	jne    c000c7f4 <load+0xb2>
/work/x86_os_my/userprog/exec.c:118
			|| elf_header.e_machine != 3 \
c000c7ce:	0f b7 45 c2          	movzwl -0x3e(%ebp),%eax
c000c7d2:	66 83 f8 03          	cmp    $0x3,%ax
c000c7d6:	75 1c                	jne    c000c7f4 <load+0xb2>
/work/x86_os_my/userprog/exec.c:119
			|| elf_header.e_version != 1 \
c000c7d8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c000c7db:	83 f8 01             	cmp    $0x1,%eax
c000c7de:	75 14                	jne    c000c7f4 <load+0xb2>
/work/x86_os_my/userprog/exec.c:120
			|| elf_header.e_phnum > 1024 \
c000c7e0:	0f b7 45 dc          	movzwl -0x24(%ebp),%eax
c000c7e4:	66 3d 00 04          	cmp    $0x400,%ax
c000c7e8:	77 0a                	ja     c000c7f4 <load+0xb2>
/work/x86_os_my/userprog/exec.c:121
			|| elf_header.e_phentsize != sizeof(struct Elf32_Phdr)) {
c000c7ea:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c000c7ee:	66 83 f8 20          	cmp    $0x20,%ax
c000c7f2:	74 0c                	je     c000c800 <load+0xbe>
/work/x86_os_my/userprog/exec.c:122
		ret = -1;
c000c7f4:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/userprog/exec.c:123
		goto done;
c000c7fb:	e9 be 00 00 00       	jmp    c000c8be <load+0x17c>
/work/x86_os_my/userprog/exec.c:126
	}

	Elf32_Off prog_header_offset = elf_header.e_phoff;		// 程序头的起始地址
c000c800:	8b 45 cc             	mov    -0x34(%ebp),%eax
c000c803:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/exec.c:127
	Elf32_Half prog_header_size = elf_header.e_phentsize;	// 描述段的数据结构的大小 == sizeof(struct Elf32_Phdr)
c000c806:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c000c80a:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
/work/x86_os_my/userprog/exec.c:130

	/* 遍历所有程序头 */
	uint32_t prog_idx = 0;
c000c80e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/userprog/exec.c:131
	while (prog_idx < elf_header.e_phnum) {	//段的个数
c000c815:	e9 8e 00 00 00       	jmp    c000c8a8 <load+0x166>
/work/x86_os_my/userprog/exec.c:132
		memset(&prog_header, 0, prog_header_size);
c000c81a:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c000c81e:	83 ec 04             	sub    $0x4,%esp
c000c821:	50                   	push   %eax
c000c822:	6a 00                	push   $0x0
c000c824:	8d 45 90             	lea    -0x70(%ebp),%eax
c000c827:	50                   	push   %eax
c000c828:	e8 c6 70 ff ff       	call   c00038f3 <memset>
c000c82d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/exec.c:135

		/* 将文件的指针定位到程序头 */
		sys_lseek(fd, prog_header_offset, SEEK_SET);
c000c830:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000c833:	83 ec 04             	sub    $0x4,%esp
c000c836:	6a 01                	push   $0x1
c000c838:	50                   	push   %eax
c000c839:	ff 75 e8             	pushl  -0x18(%ebp)
c000c83c:	e8 61 b2 ff ff       	call   c0007aa2 <sys_lseek>
c000c841:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/exec.c:138

		/* 只获取程序头 */
		if (sys_read(fd, &prog_header, prog_header_size) != prog_header_size) {
c000c844:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c000c848:	83 ec 04             	sub    $0x4,%esp
c000c84b:	50                   	push   %eax
c000c84c:	8d 45 90             	lea    -0x70(%ebp),%eax
c000c84f:	50                   	push   %eax
c000c850:	ff 75 e8             	pushl  -0x18(%ebp)
c000c853:	e8 66 b1 ff ff       	call   c00079be <sys_read>
c000c858:	83 c4 10             	add    $0x10,%esp
c000c85b:	89 c2                	mov    %eax,%edx
c000c85d:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c000c861:	39 c2                	cmp    %eax,%edx
c000c863:	74 09                	je     c000c86e <load+0x12c>
/work/x86_os_my/userprog/exec.c:139
			ret = -1;
c000c865:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/userprog/exec.c:140
			goto done;
c000c86c:	eb 50                	jmp    c000c8be <load+0x17c>
/work/x86_os_my/userprog/exec.c:144
		}

		/* 如果是可加载段就调用 segment_load 加载到内存 */
		if (PT_LOAD == prog_header.p_type) {
c000c86e:	8b 45 90             	mov    -0x70(%ebp),%eax
c000c871:	83 f8 01             	cmp    $0x1,%eax
c000c874:	75 24                	jne    c000c89a <load+0x158>
/work/x86_os_my/userprog/exec.c:145
			if (!segment_load(fd, prog_header.p_offset, prog_header.p_filesz, prog_header.p_vaddr)) {
c000c876:	8b 4d 98             	mov    -0x68(%ebp),%ecx
c000c879:	8b 55 a0             	mov    -0x60(%ebp),%edx
c000c87c:	8b 45 94             	mov    -0x6c(%ebp),%eax
c000c87f:	51                   	push   %ecx
c000c880:	52                   	push   %edx
c000c881:	50                   	push   %eax
c000c882:	ff 75 e8             	pushl  -0x18(%ebp)
c000c885:	e8 ba fd ff ff       	call   c000c644 <segment_load>
c000c88a:	83 c4 10             	add    $0x10,%esp
c000c88d:	85 c0                	test   %eax,%eax
c000c88f:	75 09                	jne    c000c89a <load+0x158>
/work/x86_os_my/userprog/exec.c:146
				ret = -1;
c000c891:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/userprog/exec.c:147
				goto done;
c000c898:	eb 24                	jmp    c000c8be <load+0x17c>
/work/x86_os_my/userprog/exec.c:152
			}
		}

		/* 更新下一个程序头的偏移 */
		prog_header_offset += elf_header.e_phentsize;
c000c89a:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c000c89e:	0f b7 c0             	movzwl %ax,%eax
c000c8a1:	01 45 f0             	add    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/exec.c:153
		prog_idx++;
c000c8a4:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
/work/x86_os_my/userprog/exec.c:131
	Elf32_Off prog_header_offset = elf_header.e_phoff;		// 程序头的起始地址
	Elf32_Half prog_header_size = elf_header.e_phentsize;	// 描述段的数据结构的大小 == sizeof(struct Elf32_Phdr)

	/* 遍历所有程序头 */
	uint32_t prog_idx = 0;
	while (prog_idx < elf_header.e_phnum) {	//段的个数
c000c8a8:	0f b7 45 dc          	movzwl -0x24(%ebp),%eax
c000c8ac:	0f b7 c0             	movzwl %ax,%eax
c000c8af:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c000c8b2:	0f 87 62 ff ff ff    	ja     c000c81a <load+0xd8>
/work/x86_os_my/userprog/exec.c:155

		/* 更新下一个程序头的偏移 */
		prog_header_offset += elf_header.e_phentsize;
		prog_idx++;
	}
	ret = elf_header.e_entry;
c000c8b8:	8b 45 c8             	mov    -0x38(%ebp),%eax
c000c8bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/exec.c:157
done:
	sys_close(fd);
c000c8be:	83 ec 0c             	sub    $0xc,%esp
c000c8c1:	ff 75 e8             	pushl  -0x18(%ebp)
c000c8c4:	e8 ad af ff ff       	call   c0007876 <sys_close>
c000c8c9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/exec.c:158
	return ret;
c000c8cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/userprog/exec.c:159 (discriminator 1)
}
c000c8cf:	c9                   	leave  
c000c8d0:	c3                   	ret    

c000c8d1 <sys_execv>:
sys_execv():
/work/x86_os_my/userprog/exec.c:162

/* 用path指向的程序替换当前进程 */
int32_t sys_execv(const char* path, const char* argv[]) {
c000c8d1:	55                   	push   %ebp
c000c8d2:	89 e5                	mov    %esp,%ebp
c000c8d4:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/exec.c:163
	uint32_t argc = 0;
c000c8d7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/userprog/exec.c:164
	while (argv[argc]) {
c000c8de:	eb 04                	jmp    c000c8e4 <sys_execv+0x13>
/work/x86_os_my/userprog/exec.c:165
		argc++;
c000c8e0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/userprog/exec.c:164
}

/* 用path指向的程序替换当前进程 */
int32_t sys_execv(const char* path, const char* argv[]) {
	uint32_t argc = 0;
	while (argv[argc]) {
c000c8e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000c8e7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000c8ee:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c8f1:	01 d0                	add    %edx,%eax
c000c8f3:	8b 00                	mov    (%eax),%eax
c000c8f5:	85 c0                	test   %eax,%eax
c000c8f7:	75 e7                	jne    c000c8e0 <sys_execv+0xf>
/work/x86_os_my/userprog/exec.c:168
		argc++;
	}
	// 以前是用汇编加载的elf格式的内核，现在使用C语言方式加载elf格式的应用程序。
	int32_t entry_point = load(path);     
c000c8f9:	83 ec 0c             	sub    $0xc,%esp
c000c8fc:	ff 75 08             	pushl  0x8(%ebp)
c000c8ff:	e8 3e fe ff ff       	call   c000c742 <load>
c000c904:	83 c4 10             	add    $0x10,%esp
c000c907:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/exec.c:169
	if (entry_point == -1) {	 // 若加载失败则返回-1
c000c90a:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c000c90e:	75 07                	jne    c000c917 <sys_execv+0x46>
/work/x86_os_my/userprog/exec.c:170
		return -1;
c000c910:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000c915:	eb 63                	jmp    c000c97a <sys_execv+0xa9>
/work/x86_os_my/userprog/exec.c:173
	}

	struct task_struct* cur = running_thread();
c000c917:	e8 be 73 ff ff       	call   c0003cda <running_thread>
c000c91c:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/userprog/exec.c:175
	/* 修改进程名 */
	memcpy(cur->name, path, TASK_NAME_LEN);
c000c91f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000c922:	83 c0 0c             	add    $0xc,%eax
c000c925:	83 ec 04             	sub    $0x4,%esp
c000c928:	6a 10                	push   $0x10
c000c92a:	ff 75 08             	pushl  0x8(%ebp)
c000c92d:	50                   	push   %eax
c000c92e:	e8 12 70 ff ff       	call   c0003945 <memcpy>
c000c933:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/exec.c:176
	cur->name[TASK_NAME_LEN-1] = 0;
c000c936:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000c939:	c6 40 1b 00          	movb   $0x0,0x1b(%eax)
/work/x86_os_my/userprog/exec.c:178

	struct intr_stack* intr_0_stack = (struct intr_stack*)((uint32_t)cur + PG_SIZE - sizeof(struct intr_stack));
c000c93d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000c940:	05 b4 0f 00 00       	add    $0xfb4,%eax
c000c945:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/userprog/exec.c:187
	习惯用法：
	ebx 经常做基址寄存器，argv 本来就是所有参数的基地址，
	ecx 经常做循环控制次数寄存器，argc 本来就是 argv 的参数个数，也就是循环次数
	现在把参数放在哪个寄存器中，将来在获取参数时就从哪些寄存器中取，
	将来实现简易版 c 运行库，那会涉及到从寄存器中获取参数。*/
	intr_0_stack->ebx = (int32_t)argv;
c000c948:	8b 55 0c             	mov    0xc(%ebp),%edx
c000c94b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000c94e:	89 50 14             	mov    %edx,0x14(%eax)
/work/x86_os_my/userprog/exec.c:188
	intr_0_stack->ecx = argc;
c000c951:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000c954:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000c957:	89 50 1c             	mov    %edx,0x1c(%eax)
/work/x86_os_my/userprog/exec.c:189
	intr_0_stack->eip = (void*)entry_point;
c000c95a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000c95d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000c960:	89 50 38             	mov    %edx,0x38(%eax)
/work/x86_os_my/userprog/exec.c:193
	/* 使新用户进程的栈地址为最高用户空间地址 */
	/* 1. 老进程用户栈中的数据只适用于老进程，对新进程没用，故新进程的用户栈应该从新开始。
	   2. 为了后续传入参数做准备：用户空间的最高处用于存储命令行参数。*/
	intr_0_stack->esp = (void*)0xc0000000;
c000c963:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000c966:	c7 40 44 00 00 00 c0 	movl   $0xc0000000,0x44(%eax)
/work/x86_os_my/userprog/exec.c:197

	/* exec不同于fork,为使新进程更快被执行,直接从中断返回 */
	/* 将新进程内核栈地址赋值给 esp 寄存器，然后跳转到 intr_exit，假装从中断返回，实现了新进程的运行。 */
	asm volatile ("movl %0, %%esp; jmp intr_exit" : : "g" (intr_0_stack) : "memory");
c000c96d:	8b 65 e8             	mov    -0x18(%ebp),%esp
c000c970:	e9 cb 53 ff ff       	jmp    c0001d40 <intr_exit>
/work/x86_os_my/userprog/exec.c:200

	//并不会从这里返回
	return 0;
c000c975:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/userprog/exec.c:201
}
c000c97a:	c9                   	leave  
c000c97b:	c3                   	ret    
