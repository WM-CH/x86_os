
./build/kernel.bin:     file format elf32-i386


Disassembly of section .text:

c0001500 <main>:
main():
/work/x86_os_my/kernel/main.c:32
void k_thread_a(void*);
void k_thread_b(void*);
void u_prog_a(void);
void u_prog_b(void);

int main(void) {
c0001500:	8d 4c 24 04          	lea    0x4(%esp),%ecx
c0001504:	83 e4 f0             	and    $0xfffffff0,%esp
c0001507:	ff 71 fc             	pushl  -0x4(%ecx)
c000150a:	55                   	push   %ebp
c000150b:	89 e5                	mov    %esp,%ebp
c000150d:	51                   	push   %ecx
c000150e:	83 ec 04             	sub    $0x4,%esp
/work/x86_os_my/kernel/main.c:33
	put_str("I am kernel\n");
c0001511:	83 ec 0c             	sub    $0xc,%esp
c0001514:	68 48 6e 00 c0       	push   $0xc0006e48
c0001519:	e8 02 0f 00 00       	call   c0002420 <put_str>
c000151e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:34
	init_all();
c0001521:	e8 fc 02 00 00       	call   c0001822 <init_all>
/work/x86_os_my/kernel/main.c:35 (discriminator 1)
	while(1);
c0001526:	eb fe                	jmp    c0001526 <main+0x26>

c0001528 <k_thread_a>:
k_thread_a():
/work/x86_os_my/kernel/main.c:45
	while(1);
	return 0;
}

/* 在线程中运行的函数 */
void k_thread_a(void* arg) {     
c0001528:	55                   	push   %ebp
c0001529:	89 e5                	mov    %esp,%ebp
c000152b:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/main.c:46
	void* addr1 = sys_malloc(256);
c000152e:	83 ec 0c             	sub    $0xc,%esp
c0001531:	68 00 01 00 00       	push   $0x100
c0001536:	e8 78 19 00 00       	call   c0002eb3 <sys_malloc>
c000153b:	83 c4 10             	add    $0x10,%esp
c000153e:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/main.c:47
	void* addr2 = sys_malloc(255);
c0001541:	83 ec 0c             	sub    $0xc,%esp
c0001544:	68 ff 00 00 00       	push   $0xff
c0001549:	e8 65 19 00 00       	call   c0002eb3 <sys_malloc>
c000154e:	83 c4 10             	add    $0x10,%esp
c0001551:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/main.c:48
	void* addr3 = sys_malloc(254);
c0001554:	83 ec 0c             	sub    $0xc,%esp
c0001557:	68 fe 00 00 00       	push   $0xfe
c000155c:	e8 52 19 00 00       	call   c0002eb3 <sys_malloc>
c0001561:	83 c4 10             	add    $0x10,%esp
c0001564:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/main.c:49
	console_put_str(" thread_a malloc addr:0x");
c0001567:	83 ec 0c             	sub    $0xc,%esp
c000156a:	68 55 6e 00 c0       	push   $0xc0006e55
c000156f:	e8 fc 30 00 00       	call   c0004670 <console_put_str>
c0001574:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:50
	console_put_int((int)addr1);
c0001577:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000157a:	83 ec 0c             	sub    $0xc,%esp
c000157d:	50                   	push   %eax
c000157e:	e8 37 31 00 00       	call   c00046ba <console_put_int>
c0001583:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:51
	console_put_char(',');
c0001586:	83 ec 0c             	sub    $0xc,%esp
c0001589:	6a 2c                	push   $0x2c
c000158b:	e8 01 31 00 00       	call   c0004691 <console_put_char>
c0001590:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:52
	console_put_int((int)addr2);
c0001593:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0001596:	83 ec 0c             	sub    $0xc,%esp
c0001599:	50                   	push   %eax
c000159a:	e8 1b 31 00 00       	call   c00046ba <console_put_int>
c000159f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:53
	console_put_char(',');
c00015a2:	83 ec 0c             	sub    $0xc,%esp
c00015a5:	6a 2c                	push   $0x2c
c00015a7:	e8 e5 30 00 00       	call   c0004691 <console_put_char>
c00015ac:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:54
	console_put_int((int)addr3);
c00015af:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00015b2:	83 ec 0c             	sub    $0xc,%esp
c00015b5:	50                   	push   %eax
c00015b6:	e8 ff 30 00 00       	call   c00046ba <console_put_int>
c00015bb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:55
	console_put_char('\n');
c00015be:	83 ec 0c             	sub    $0xc,%esp
c00015c1:	6a 0a                	push   $0xa
c00015c3:	e8 c9 30 00 00       	call   c0004691 <console_put_char>
c00015c8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:57

	int cpu_delay = 100000;
c00015cb:	c7 45 f4 a0 86 01 00 	movl   $0x186a0,-0xc(%ebp)
/work/x86_os_my/kernel/main.c:58
	while(cpu_delay-- > 0);
c00015d2:	90                   	nop
/work/x86_os_my/kernel/main.c:58 (discriminator 1)
c00015d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00015d6:	8d 50 ff             	lea    -0x1(%eax),%edx
c00015d9:	89 55 f4             	mov    %edx,-0xc(%ebp)
c00015dc:	85 c0                	test   %eax,%eax
c00015de:	7f f3                	jg     c00015d3 <k_thread_a+0xab>
/work/x86_os_my/kernel/main.c:59
	sys_free(addr1);
c00015e0:	83 ec 0c             	sub    $0xc,%esp
c00015e3:	ff 75 f0             	pushl  -0x10(%ebp)
c00015e6:	e8 f5 1e 00 00       	call   c00034e0 <sys_free>
c00015eb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:60
	sys_free(addr2);
c00015ee:	83 ec 0c             	sub    $0xc,%esp
c00015f1:	ff 75 ec             	pushl  -0x14(%ebp)
c00015f4:	e8 e7 1e 00 00       	call   c00034e0 <sys_free>
c00015f9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:61
	sys_free(addr3);
c00015fc:	83 ec 0c             	sub    $0xc,%esp
c00015ff:	ff 75 e8             	pushl  -0x18(%ebp)
c0001602:	e8 d9 1e 00 00       	call   c00034e0 <sys_free>
c0001607:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:62 (discriminator 1)
	while(1);
c000160a:	eb fe                	jmp    c000160a <k_thread_a+0xe2>

c000160c <k_thread_b>:
k_thread_b():
/work/x86_os_my/kernel/main.c:66
}

/* 在线程中运行的函数 */
void k_thread_b(void* arg) {     
c000160c:	55                   	push   %ebp
c000160d:	89 e5                	mov    %esp,%ebp
c000160f:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/main.c:67
	void* addr1 = sys_malloc(256);
c0001612:	83 ec 0c             	sub    $0xc,%esp
c0001615:	68 00 01 00 00       	push   $0x100
c000161a:	e8 94 18 00 00       	call   c0002eb3 <sys_malloc>
c000161f:	83 c4 10             	add    $0x10,%esp
c0001622:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/main.c:68
	void* addr2 = sys_malloc(255);
c0001625:	83 ec 0c             	sub    $0xc,%esp
c0001628:	68 ff 00 00 00       	push   $0xff
c000162d:	e8 81 18 00 00       	call   c0002eb3 <sys_malloc>
c0001632:	83 c4 10             	add    $0x10,%esp
c0001635:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/main.c:69
	void* addr3 = sys_malloc(254);
c0001638:	83 ec 0c             	sub    $0xc,%esp
c000163b:	68 fe 00 00 00       	push   $0xfe
c0001640:	e8 6e 18 00 00       	call   c0002eb3 <sys_malloc>
c0001645:	83 c4 10             	add    $0x10,%esp
c0001648:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/main.c:70
	console_put_str(" thread_b malloc addr:0x");
c000164b:	83 ec 0c             	sub    $0xc,%esp
c000164e:	68 6e 6e 00 c0       	push   $0xc0006e6e
c0001653:	e8 18 30 00 00       	call   c0004670 <console_put_str>
c0001658:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:71
	console_put_int((int)addr1);
c000165b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000165e:	83 ec 0c             	sub    $0xc,%esp
c0001661:	50                   	push   %eax
c0001662:	e8 53 30 00 00       	call   c00046ba <console_put_int>
c0001667:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:72
	console_put_char(',');
c000166a:	83 ec 0c             	sub    $0xc,%esp
c000166d:	6a 2c                	push   $0x2c
c000166f:	e8 1d 30 00 00       	call   c0004691 <console_put_char>
c0001674:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:73
	console_put_int((int)addr2);
c0001677:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000167a:	83 ec 0c             	sub    $0xc,%esp
c000167d:	50                   	push   %eax
c000167e:	e8 37 30 00 00       	call   c00046ba <console_put_int>
c0001683:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:74
	console_put_char(',');
c0001686:	83 ec 0c             	sub    $0xc,%esp
c0001689:	6a 2c                	push   $0x2c
c000168b:	e8 01 30 00 00       	call   c0004691 <console_put_char>
c0001690:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:75
	console_put_int((int)addr3);
c0001693:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0001696:	83 ec 0c             	sub    $0xc,%esp
c0001699:	50                   	push   %eax
c000169a:	e8 1b 30 00 00       	call   c00046ba <console_put_int>
c000169f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:76
	console_put_char('\n');
c00016a2:	83 ec 0c             	sub    $0xc,%esp
c00016a5:	6a 0a                	push   $0xa
c00016a7:	e8 e5 2f 00 00       	call   c0004691 <console_put_char>
c00016ac:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:78

	int cpu_delay = 100000;
c00016af:	c7 45 f4 a0 86 01 00 	movl   $0x186a0,-0xc(%ebp)
/work/x86_os_my/kernel/main.c:79
	while(cpu_delay-- > 0);
c00016b6:	90                   	nop
/work/x86_os_my/kernel/main.c:79 (discriminator 1)
c00016b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00016ba:	8d 50 ff             	lea    -0x1(%eax),%edx
c00016bd:	89 55 f4             	mov    %edx,-0xc(%ebp)
c00016c0:	85 c0                	test   %eax,%eax
c00016c2:	7f f3                	jg     c00016b7 <k_thread_b+0xab>
/work/x86_os_my/kernel/main.c:80
	sys_free(addr1);
c00016c4:	83 ec 0c             	sub    $0xc,%esp
c00016c7:	ff 75 f0             	pushl  -0x10(%ebp)
c00016ca:	e8 11 1e 00 00       	call   c00034e0 <sys_free>
c00016cf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:81
	sys_free(addr2);
c00016d2:	83 ec 0c             	sub    $0xc,%esp
c00016d5:	ff 75 ec             	pushl  -0x14(%ebp)
c00016d8:	e8 03 1e 00 00       	call   c00034e0 <sys_free>
c00016dd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:82
	sys_free(addr3);
c00016e0:	83 ec 0c             	sub    $0xc,%esp
c00016e3:	ff 75 e8             	pushl  -0x18(%ebp)
c00016e6:	e8 f5 1d 00 00       	call   c00034e0 <sys_free>
c00016eb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:83 (discriminator 1)
	while(1);
c00016ee:	eb fe                	jmp    c00016ee <k_thread_b+0xe2>

c00016f0 <u_prog_a>:
u_prog_a():
/work/x86_os_my/kernel/main.c:87
}

/* 测试用户进程 */
void u_prog_a(void) {
c00016f0:	55                   	push   %ebp
c00016f1:	89 e5                	mov    %esp,%ebp
c00016f3:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/main.c:88
	void* addr1 = malloc(256);
c00016f6:	83 ec 0c             	sub    $0xc,%esp
c00016f9:	68 00 01 00 00       	push   $0x100
c00016fe:	e8 06 3e 00 00       	call   c0005509 <malloc>
c0001703:	83 c4 10             	add    $0x10,%esp
c0001706:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/main.c:89
	void* addr2 = malloc(255);
c0001709:	83 ec 0c             	sub    $0xc,%esp
c000170c:	68 ff 00 00 00       	push   $0xff
c0001711:	e8 f3 3d 00 00       	call   c0005509 <malloc>
c0001716:	83 c4 10             	add    $0x10,%esp
c0001719:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/main.c:90
	void* addr3 = malloc(254);
c000171c:	83 ec 0c             	sub    $0xc,%esp
c000171f:	68 fe 00 00 00       	push   $0xfe
c0001724:	e8 e0 3d 00 00       	call   c0005509 <malloc>
c0001729:	83 c4 10             	add    $0x10,%esp
c000172c:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/main.c:91
	printf(" prog_a malloc addr:0x%x,0x%x,0x%x\n", (int)addr1, (int)addr2, (int)addr3);
c000172f:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0001732:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0001735:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0001738:	51                   	push   %ecx
c0001739:	52                   	push   %edx
c000173a:	50                   	push   %eax
c000173b:	68 88 6e 00 c0       	push   $0xc0006e88
c0001740:	e8 b3 40 00 00       	call   c00057f8 <printf>
c0001745:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:93

	int cpu_delay = 100000;
c0001748:	c7 45 f4 a0 86 01 00 	movl   $0x186a0,-0xc(%ebp)
/work/x86_os_my/kernel/main.c:94
	while(cpu_delay-- > 0);
c000174f:	90                   	nop
/work/x86_os_my/kernel/main.c:94 (discriminator 1)
c0001750:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001753:	8d 50 ff             	lea    -0x1(%eax),%edx
c0001756:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0001759:	85 c0                	test   %eax,%eax
c000175b:	7f f3                	jg     c0001750 <u_prog_a+0x60>
/work/x86_os_my/kernel/main.c:95
	free(addr1);
c000175d:	83 ec 0c             	sub    $0xc,%esp
c0001760:	ff 75 f0             	pushl  -0x10(%ebp)
c0001763:	e8 c0 3d 00 00       	call   c0005528 <free>
c0001768:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:96
	free(addr2);
c000176b:	83 ec 0c             	sub    $0xc,%esp
c000176e:	ff 75 ec             	pushl  -0x14(%ebp)
c0001771:	e8 b2 3d 00 00       	call   c0005528 <free>
c0001776:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:97
	free(addr3);
c0001779:	83 ec 0c             	sub    $0xc,%esp
c000177c:	ff 75 e8             	pushl  -0x18(%ebp)
c000177f:	e8 a4 3d 00 00       	call   c0005528 <free>
c0001784:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:98 (discriminator 1)
	while(1);
c0001787:	eb fe                	jmp    c0001787 <u_prog_a+0x97>

c0001789 <u_prog_b>:
u_prog_b():
/work/x86_os_my/kernel/main.c:102
}

/* 测试用户进程 */
void u_prog_b(void) {
c0001789:	55                   	push   %ebp
c000178a:	89 e5                	mov    %esp,%ebp
c000178c:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/main.c:103
	void* addr1 = malloc(256);
c000178f:	83 ec 0c             	sub    $0xc,%esp
c0001792:	68 00 01 00 00       	push   $0x100
c0001797:	e8 6d 3d 00 00       	call   c0005509 <malloc>
c000179c:	83 c4 10             	add    $0x10,%esp
c000179f:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/main.c:104
	void* addr2 = malloc(255);
c00017a2:	83 ec 0c             	sub    $0xc,%esp
c00017a5:	68 ff 00 00 00       	push   $0xff
c00017aa:	e8 5a 3d 00 00       	call   c0005509 <malloc>
c00017af:	83 c4 10             	add    $0x10,%esp
c00017b2:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/main.c:105
	void* addr3 = malloc(254);
c00017b5:	83 ec 0c             	sub    $0xc,%esp
c00017b8:	68 fe 00 00 00       	push   $0xfe
c00017bd:	e8 47 3d 00 00       	call   c0005509 <malloc>
c00017c2:	83 c4 10             	add    $0x10,%esp
c00017c5:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/main.c:106
	printf(" prog_b malloc addr:0x%x,0x%x,0x%x\n", (int)addr1, (int)addr2, (int)addr3);
c00017c8:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c00017cb:	8b 55 ec             	mov    -0x14(%ebp),%edx
c00017ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00017d1:	51                   	push   %ecx
c00017d2:	52                   	push   %edx
c00017d3:	50                   	push   %eax
c00017d4:	68 ac 6e 00 c0       	push   $0xc0006eac
c00017d9:	e8 1a 40 00 00       	call   c00057f8 <printf>
c00017de:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:108

	int cpu_delay = 100000;
c00017e1:	c7 45 f4 a0 86 01 00 	movl   $0x186a0,-0xc(%ebp)
/work/x86_os_my/kernel/main.c:109
	while(cpu_delay-- > 0);
c00017e8:	90                   	nop
/work/x86_os_my/kernel/main.c:109 (discriminator 1)
c00017e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00017ec:	8d 50 ff             	lea    -0x1(%eax),%edx
c00017ef:	89 55 f4             	mov    %edx,-0xc(%ebp)
c00017f2:	85 c0                	test   %eax,%eax
c00017f4:	7f f3                	jg     c00017e9 <u_prog_b+0x60>
/work/x86_os_my/kernel/main.c:110
	free(addr1);
c00017f6:	83 ec 0c             	sub    $0xc,%esp
c00017f9:	ff 75 f0             	pushl  -0x10(%ebp)
c00017fc:	e8 27 3d 00 00       	call   c0005528 <free>
c0001801:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:111
	free(addr2);
c0001804:	83 ec 0c             	sub    $0xc,%esp
c0001807:	ff 75 ec             	pushl  -0x14(%ebp)
c000180a:	e8 19 3d 00 00       	call   c0005528 <free>
c000180f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:112
	free(addr3);
c0001812:	83 ec 0c             	sub    $0xc,%esp
c0001815:	ff 75 e8             	pushl  -0x18(%ebp)
c0001818:	e8 0b 3d 00 00       	call   c0005528 <free>
c000181d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:113 (discriminator 1)
	while(1);
c0001820:	eb fe                	jmp    c0001820 <u_prog_b+0x97>

c0001822 <init_all>:
init_all():
/work/x86_os_my/kernel/init.c:15
#include "syscall-init.h"
#include "ide.h"
#include "fs.h"

/*负责初始化所有模块 */
void init_all() {
c0001822:	55                   	push   %ebp
c0001823:	89 e5                	mov    %esp,%ebp
c0001825:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/kernel/init.c:16
	put_str("init_all\n");
c0001828:	83 ec 0c             	sub    $0xc,%esp
c000182b:	68 d0 6e 00 c0       	push   $0xc0006ed0
c0001830:	e8 eb 0b 00 00       	call   c0002420 <put_str>
c0001835:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/init.c:17
	idt_init();			// 初始化中断
c0001838:	e8 38 04 00 00       	call   c0001c75 <idt_init>
/work/x86_os_my/kernel/init.c:18
	mem_init();			// 初始化内存管理系统
c000183d:	e8 17 21 00 00       	call   c0003959 <mem_init>
/work/x86_os_my/kernel/init.c:19
	thread_init();		// 初始化线程相关结构
c0001842:	e8 5c 2b 00 00       	call   c00043a3 <thread_init>
/work/x86_os_my/kernel/init.c:20
	timer_init();		// 初始化PIT
c0001847:	e8 16 06 00 00       	call   c0001e62 <timer_init>
/work/x86_os_my/kernel/init.c:21
	console_init();		// 控制台初始化最好放在开中断之前
c000184c:	e8 d4 2d 00 00       	call   c0004625 <console_init>
/work/x86_os_my/kernel/init.c:22
	keyboard_init();	// 键盘初始化
c0001851:	e8 4d 34 00 00       	call   c0004ca3 <keyboard_init>
/work/x86_os_my/kernel/init.c:23
	tss_init();			// tss初始化
c0001856:	e8 03 38 00 00       	call   c000505e <tss_init>
/work/x86_os_my/kernel/init.c:24
	syscall_init();		// 初始化系统调用
c000185b:	e8 1b 3d 00 00       	call   c000557b <syscall_init>
/work/x86_os_my/kernel/init.c:25
	intr_enable();		// 后面的ide_init需要打开中断
c0001860:	e8 5f 03 00 00       	call   c0001bc4 <intr_enable>
/work/x86_os_my/kernel/init.c:26
	ide_init();			// 初始化硬盘
c0001865:	e8 65 4b 00 00       	call   c00063cf <ide_init>
/work/x86_os_my/kernel/init.c:27
	filesys_init();		// 初始化文件系统
c000186a:	e8 1f 54 00 00       	call   c0006c8e <filesys_init>
/work/x86_os_my/kernel/init.c:28
}
c000186f:	90                   	nop
c0001870:	c9                   	leave  
c0001871:	c3                   	ret    

c0001872 <outb>:
outb():
/work/x86_os_my/lib/kernel/io.h:17
#define __LIB_IO_H
#include "stdint.h"
//inline省去了函数调用开支

/* 向端口port写入一个字节*/
static inline void outb(uint16_t port, uint8_t data) {
c0001872:	55                   	push   %ebp
c0001873:	89 e5                	mov    %esp,%ebp
c0001875:	83 ec 08             	sub    $0x8,%esp
c0001878:	8b 55 08             	mov    0x8(%ebp),%edx
c000187b:	8b 45 0c             	mov    0xc(%ebp),%eax
c000187e:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c0001882:	88 45 f8             	mov    %al,-0x8(%ebp)
/work/x86_os_my/lib/kernel/io.h:21
/*********************************************************
 a表示用寄存器al或ax或eax,对端口指定N表示0~255, d表示用dx存储端口号, 
 %b0表示对应al,%w1表示对应dx */ 
   asm volatile ( "outb %b0, %w1" : : "a" (data), "Nd" (port));    
c0001885:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c0001889:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c000188d:	ee                   	out    %al,(%dx)
/work/x86_os_my/lib/kernel/io.h:23
/******************************************************/
}
c000188e:	90                   	nop
c000188f:	c9                   	leave  
c0001890:	c3                   	ret    

c0001891 <pic_init>:
pic_init():
/work/x86_os_my/kernel/interrupt.c:41
//自定义类型 intr_handler = void*
extern intr_handler intr_entry_table[IDT_DESC_CNT];	    // 声明引用汇编kernel.S中的中断处理函数入口数组

/* 初始化可编程中断控制器8259A */
// outb 来着 lib/kernel/io.h 内联汇编写法
static void pic_init(void) {
c0001891:	55                   	push   %ebp
c0001892:	89 e5                	mov    %esp,%ebp
c0001894:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:43
	/* 初始化主片 */
	outb (PIC_M_CTRL, 0x11);	// ICW1: 边沿触发,级联8259, 需要ICW4.
c0001897:	6a 11                	push   $0x11
c0001899:	6a 20                	push   $0x20
c000189b:	e8 d2 ff ff ff       	call   c0001872 <outb>
c00018a0:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:44
	outb (PIC_M_DATA, 0x20);	// ICW2: 起始中断向量号为0x20,也就是IR[0-7] 为 0x20 ~ 0x27.
c00018a3:	6a 20                	push   $0x20
c00018a5:	6a 21                	push   $0x21
c00018a7:	e8 c6 ff ff ff       	call   c0001872 <outb>
c00018ac:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:45
	outb (PIC_M_DATA, 0x04);	// ICW3: IR2接从片. 
c00018af:	6a 04                	push   $0x4
c00018b1:	6a 21                	push   $0x21
c00018b3:	e8 ba ff ff ff       	call   c0001872 <outb>
c00018b8:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:46
	outb (PIC_M_DATA, 0x01);	// ICW4: 8086模式, 正常EOI
c00018bb:	6a 01                	push   $0x1
c00018bd:	6a 21                	push   $0x21
c00018bf:	e8 ae ff ff ff       	call   c0001872 <outb>
c00018c4:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:49

	/* 初始化从片 */
	outb (PIC_S_CTRL, 0x11);	// ICW1: 边沿触发,级联8259, 需要ICW4.
c00018c7:	6a 11                	push   $0x11
c00018c9:	68 a0 00 00 00       	push   $0xa0
c00018ce:	e8 9f ff ff ff       	call   c0001872 <outb>
c00018d3:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:50
	outb (PIC_S_DATA, 0x28);	// ICW2: 起始中断向量号为0x28,也就是IR[8-15] 为 0x28 ~ 0x2F.
c00018d6:	6a 28                	push   $0x28
c00018d8:	68 a1 00 00 00       	push   $0xa1
c00018dd:	e8 90 ff ff ff       	call   c0001872 <outb>
c00018e2:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:51
	outb (PIC_S_DATA, 0x02);	// ICW3: 设置从片连接到主片的IR2引脚
c00018e5:	6a 02                	push   $0x2
c00018e7:	68 a1 00 00 00       	push   $0xa1
c00018ec:	e8 81 ff ff ff       	call   c0001872 <outb>
c00018f1:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:52
	outb (PIC_S_DATA, 0x01);	// ICW4: 8086模式, 正常EOI
c00018f4:	6a 01                	push   $0x1
c00018f6:	68 a1 00 00 00       	push   $0xa1
c00018fb:	e8 72 ff ff ff       	call   c0001872 <outb>
c0001900:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:56

	/* IRQ2用于级联从片,必须打开,否则无法响应从片上的中断
	主片上打开的中断有IRQ0的时钟,IRQ1的键盘和级联从片的IRQ2,其它全部关闭 */
	outb (PIC_M_DATA, 0xf8);
c0001903:	68 f8 00 00 00       	push   $0xf8
c0001908:	6a 21                	push   $0x21
c000190a:	e8 63 ff ff ff       	call   c0001872 <outb>
c000190f:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:58
	/* 打开从片上的IRQ14,此引脚接收硬盘控制器的中断 */
	outb (PIC_S_DATA, 0xbf);
c0001912:	68 bf 00 00 00       	push   $0xbf
c0001917:	68 a1 00 00 00       	push   $0xa1
c000191c:	e8 51 ff ff ff       	call   c0001872 <outb>
c0001921:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:60

	put_str("   pic_init done\n");
c0001924:	83 ec 0c             	sub    $0xc,%esp
c0001927:	68 dc 6e 00 c0       	push   $0xc0006edc
c000192c:	e8 ef 0a 00 00       	call   c0002420 <put_str>
c0001931:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:61
}
c0001934:	90                   	nop
c0001935:	c9                   	leave  
c0001936:	c3                   	ret    

c0001937 <make_idt_desc>:
make_idt_desc():
/work/x86_os_my/kernel/interrupt.c:64

/* 创建中断门描述符 */
static void make_idt_desc(struct gate_desc* p_gdesc, uint8_t attr, intr_handler function) { 
c0001937:	55                   	push   %ebp
c0001938:	89 e5                	mov    %esp,%ebp
c000193a:	83 ec 04             	sub    $0x4,%esp
c000193d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0001940:	88 45 fc             	mov    %al,-0x4(%ebp)
/work/x86_os_my/kernel/interrupt.c:65
	p_gdesc->func_offset_low_word = (uint32_t)function & 0x0000FFFF;
c0001943:	8b 45 10             	mov    0x10(%ebp),%eax
c0001946:	89 c2                	mov    %eax,%edx
c0001948:	8b 45 08             	mov    0x8(%ebp),%eax
c000194b:	66 89 10             	mov    %dx,(%eax)
/work/x86_os_my/kernel/interrupt.c:66
	p_gdesc->selector = SELECTOR_K_CODE;
c000194e:	8b 45 08             	mov    0x8(%ebp),%eax
c0001951:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
/work/x86_os_my/kernel/interrupt.c:67
	p_gdesc->dcount = 0;
c0001957:	8b 45 08             	mov    0x8(%ebp),%eax
c000195a:	c6 40 04 00          	movb   $0x0,0x4(%eax)
/work/x86_os_my/kernel/interrupt.c:68
	p_gdesc->attribute = attr;
c000195e:	8b 45 08             	mov    0x8(%ebp),%eax
c0001961:	0f b6 55 fc          	movzbl -0x4(%ebp),%edx
c0001965:	88 50 05             	mov    %dl,0x5(%eax)
/work/x86_os_my/kernel/interrupt.c:69
	p_gdesc->func_offset_high_word = ((uint32_t)function & 0xFFFF0000) >> 16;
c0001968:	8b 45 10             	mov    0x10(%ebp),%eax
c000196b:	c1 e8 10             	shr    $0x10,%eax
c000196e:	89 c2                	mov    %eax,%edx
c0001970:	8b 45 08             	mov    0x8(%ebp),%eax
c0001973:	66 89 50 06          	mov    %dx,0x6(%eax)
/work/x86_os_my/kernel/interrupt.c:70
}
c0001977:	90                   	nop
c0001978:	c9                   	leave  
c0001979:	c3                   	ret    

c000197a <idt_desc_init>:
idt_desc_init():
/work/x86_os_my/kernel/interrupt.c:73

/*初始化中断描述符表*/
static void idt_desc_init(void) {
c000197a:	55                   	push   %ebp
c000197b:	89 e5                	mov    %esp,%ebp
c000197d:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/interrupt.c:75
	int i;
	int lastindex = IDT_DESC_CNT - 1;
c0001980:	c7 45 f0 80 00 00 00 	movl   $0x80,-0x10(%ebp)
/work/x86_os_my/kernel/interrupt.c:76
	for (i = 0; i < IDT_DESC_CNT; i++) {
c0001987:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c000198e:	eb 29                	jmp    c00019b9 <idt_desc_init+0x3f>
/work/x86_os_my/kernel/interrupt.c:77 (discriminator 3)
		make_idt_desc(&idt[i], IDT_DESC_ATTR_DPL0, intr_entry_table[i]); 
c0001990:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001993:	8b 04 85 80 a4 00 c0 	mov    -0x3fff5b80(,%eax,4),%eax
c000199a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000199d:	c1 e2 03             	shl    $0x3,%edx
c00019a0:	81 c2 e0 a5 00 c0    	add    $0xc000a5e0,%edx
c00019a6:	50                   	push   %eax
c00019a7:	68 8e 00 00 00       	push   $0x8e
c00019ac:	52                   	push   %edx
c00019ad:	e8 85 ff ff ff       	call   c0001937 <make_idt_desc>
c00019b2:	83 c4 0c             	add    $0xc,%esp
/work/x86_os_my/kernel/interrupt.c:76 (discriminator 3)

/*初始化中断描述符表*/
static void idt_desc_init(void) {
	int i;
	int lastindex = IDT_DESC_CNT - 1;
	for (i = 0; i < IDT_DESC_CNT; i++) {
c00019b5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:76 (discriminator 1)
c00019b9:	81 7d f4 80 00 00 00 	cmpl   $0x80,-0xc(%ebp)
c00019c0:	7e ce                	jle    c0001990 <idt_desc_init+0x16>
/work/x86_os_my/kernel/interrupt.c:81
		make_idt_desc(&idt[i], IDT_DESC_ATTR_DPL0, intr_entry_table[i]); 
	}
	/* 系统调用对应的中断门dpl为3！
	 * 中断处理程序为单独的syscall_handler */
	make_idt_desc(&idt[lastindex], IDT_DESC_ATTR_DPL3, syscall_handler);
c00019c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00019c5:	c1 e0 03             	shl    $0x3,%eax
c00019c8:	05 e0 a5 00 c0       	add    $0xc000a5e0,%eax
c00019cd:	68 f7 23 00 c0       	push   $0xc00023f7
c00019d2:	68 ee 00 00 00       	push   $0xee
c00019d7:	50                   	push   %eax
c00019d8:	e8 5a ff ff ff       	call   c0001937 <make_idt_desc>
c00019dd:	83 c4 0c             	add    $0xc,%esp
/work/x86_os_my/kernel/interrupt.c:82
	put_str("   idt_desc_init done\n");
c00019e0:	83 ec 0c             	sub    $0xc,%esp
c00019e3:	68 ee 6e 00 c0       	push   $0xc0006eee
c00019e8:	e8 33 0a 00 00       	call   c0002420 <put_str>
c00019ed:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:83
}
c00019f0:	90                   	nop
c00019f1:	c9                   	leave  
c00019f2:	c3                   	ret    

c00019f3 <general_intr_handler>:
general_intr_handler():
/work/x86_os_my/kernel/interrupt.c:86

/* 通用的中断处理函数,一般用在异常出现时的处理 */
static void general_intr_handler(uint8_t vec_nr) {
c00019f3:	55                   	push   %ebp
c00019f4:	89 e5                	mov    %esp,%ebp
c00019f6:	83 ec 28             	sub    $0x28,%esp
c00019f9:	8b 45 08             	mov    0x8(%ebp),%eax
c00019fc:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/kernel/interrupt.c:87
	if (vec_nr == 0x27 || vec_nr == 0x2f) {	// 0x2f是从片8259A上的最后一个irq引脚，保留
c00019ff:	80 7d e4 27          	cmpb   $0x27,-0x1c(%ebp)
c0001a03:	0f 84 bf 00 00 00    	je     c0001ac8 <general_intr_handler+0xd5>
/work/x86_os_my/kernel/interrupt.c:87 (discriminator 1)
c0001a09:	80 7d e4 2f          	cmpb   $0x2f,-0x1c(%ebp)
c0001a0d:	0f 84 b5 00 00 00    	je     c0001ac8 <general_intr_handler+0xd5>
/work/x86_os_my/kernel/interrupt.c:92
		return;	//IRQ7和IRQ15会产生伪中断(spurious interrupt),无须处理。
	}
	
	/* 将光标置为左上角 并清空一片区域 */
	set_cursor(0);
c0001a13:	83 ec 0c             	sub    $0xc,%esp
c0001a16:	6a 00                	push   $0x0
c0001a18:	e8 51 0b 00 00       	call   c000256e <set_cursor>
c0001a1d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:93
	int cursor_pos = 0;
c0001a20:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:94
	while(cursor_pos < 320) {
c0001a27:	eb 11                	jmp    c0001a3a <general_intr_handler+0x47>
/work/x86_os_my/kernel/interrupt.c:95
		put_char(' ');
c0001a29:	83 ec 0c             	sub    $0xc,%esp
c0001a2c:	6a 20                	push   $0x20
c0001a2e:	e8 0b 0a 00 00       	call   c000243e <put_char>
c0001a33:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:96
		cursor_pos++;
c0001a36:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:94
	}
	
	/* 将光标置为左上角 并清空一片区域 */
	set_cursor(0);
	int cursor_pos = 0;
	while(cursor_pos < 320) {
c0001a3a:	81 7d f4 3f 01 00 00 	cmpl   $0x13f,-0xc(%ebp)
c0001a41:	7e e6                	jle    c0001a29 <general_intr_handler+0x36>
/work/x86_os_my/kernel/interrupt.c:100
		put_char(' ');
		cursor_pos++;
	}

	/* 将光标置为左上角 打印信息 */
	set_cursor(0);
c0001a43:	83 ec 0c             	sub    $0xc,%esp
c0001a46:	6a 00                	push   $0x0
c0001a48:	e8 21 0b 00 00       	call   c000256e <set_cursor>
c0001a4d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:101
	put_str("!!!!!!!      excetion message begin  !!!!!!!!\n");
c0001a50:	83 ec 0c             	sub    $0xc,%esp
c0001a53:	68 08 6f 00 c0       	push   $0xc0006f08
c0001a58:	e8 c3 09 00 00       	call   c0002420 <put_str>
c0001a5d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:102
	set_cursor(88);			// 第2行第8个字符
c0001a60:	83 ec 0c             	sub    $0xc,%esp
c0001a63:	6a 58                	push   $0x58
c0001a65:	e8 04 0b 00 00       	call   c000256e <set_cursor>
c0001a6a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:103
	put_str(intr_name[vec_nr]);
c0001a6d:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0001a71:	8b 04 85 a0 aa 00 c0 	mov    -0x3fff5560(,%eax,4),%eax
c0001a78:	83 ec 0c             	sub    $0xc,%esp
c0001a7b:	50                   	push   %eax
c0001a7c:	e8 9f 09 00 00       	call   c0002420 <put_str>
c0001a81:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:104
	if (vec_nr == 14) {		// 若为Pagefault,将缺失的地址打印出来并悬停
c0001a84:	80 7d e4 0e          	cmpb   $0xe,-0x1c(%ebp)
c0001a88:	75 2c                	jne    c0001ab6 <general_intr_handler+0xc3>
/work/x86_os_my/kernel/interrupt.c:105
		int page_fault_vaddr = 0; 
c0001a8a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/kernel/interrupt.c:106
		asm ("movl %%cr2, %0" : "=r" (page_fault_vaddr));	  // cr2是存放造成page_fault的地址
c0001a91:	0f 20 d0             	mov    %cr2,%eax
c0001a94:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/interrupt.c:107
		put_str("\npage fault addr is ");
c0001a97:	83 ec 0c             	sub    $0xc,%esp
c0001a9a:	68 37 6f 00 c0       	push   $0xc0006f37
c0001a9f:	e8 7c 09 00 00       	call   c0002420 <put_str>
c0001aa4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:108
		put_int(page_fault_vaddr); 
c0001aa7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0001aaa:	83 ec 0c             	sub    $0xc,%esp
c0001aad:	50                   	push   %eax
c0001aae:	e8 58 0a 00 00       	call   c000250b <put_int>
c0001ab3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:110
	}
	put_str("\n!!!!!!!      excetion message end    !!!!!!!!\n");
c0001ab6:	83 ec 0c             	sub    $0xc,%esp
c0001ab9:	68 4c 6f 00 c0       	push   $0xc0006f4c
c0001abe:	e8 5d 09 00 00       	call   c0002420 <put_str>
c0001ac3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:113 (discriminator 1)
	// 能进入中断处理程序就表示已经处在关中断情况下, IF=0
	// 不会出现调度进程的情况。故下面的死循环不会再被中断，会卡死在这里。
	while(1);
c0001ac6:	eb fe                	jmp    c0001ac6 <general_intr_handler+0xd3>
/work/x86_os_my/kernel/interrupt.c:88
}

/* 通用的中断处理函数,一般用在异常出现时的处理 */
static void general_intr_handler(uint8_t vec_nr) {
	if (vec_nr == 0x27 || vec_nr == 0x2f) {	// 0x2f是从片8259A上的最后一个irq引脚，保留
		return;	//IRQ7和IRQ15会产生伪中断(spurious interrupt),无须处理。
c0001ac8:	90                   	nop
/work/x86_os_my/kernel/interrupt.c:114
	}
	put_str("\n!!!!!!!      excetion message end    !!!!!!!!\n");
	// 能进入中断处理程序就表示已经处在关中断情况下, IF=0
	// 不会出现调度进程的情况。故下面的死循环不会再被中断，会卡死在这里。
	while(1);
}
c0001ac9:	c9                   	leave  
c0001aca:	c3                   	ret    

c0001acb <exception_init>:
exception_init():
/work/x86_os_my/kernel/interrupt.c:117

/* 完成一般中断处理函数注册及异常名称注册 */
static void exception_init(void) {
c0001acb:	55                   	push   %ebp
c0001acc:	89 e5                	mov    %esp,%ebp
c0001ace:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:119
	int i;
	for (i = 0; i < IDT_DESC_CNT; i++) {
c0001ad1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0001ad8:	eb 20                	jmp    c0001afa <exception_init+0x2f>
/work/x86_os_my/kernel/interrupt.c:122 (discriminator 3)
	/* idt_table数组中的函数是在进入中断后根据中断向量号调用的,
	 * 见kernel/kernel.S的call [idt_table + %1*4] */
		idt_table[i] = general_intr_handler;		// 默认为general_intr_handler，以后会由register_handler来注册具体处理函数。
c0001ada:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0001add:	c7 04 85 c0 ac 00 c0 	movl   $0xc00019f3,-0x3fff5340(,%eax,4)
c0001ae4:	f3 19 00 c0 
/work/x86_os_my/kernel/interrupt.c:123 (discriminator 3)
		intr_name[i] = "unknown";					// 先统一赋值为unknown 
c0001ae8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0001aeb:	c7 04 85 a0 aa 00 c0 	movl   $0xc0006f7c,-0x3fff5560(,%eax,4)
c0001af2:	7c 6f 00 c0 
/work/x86_os_my/kernel/interrupt.c:119 (discriminator 3)
}

/* 完成一般中断处理函数注册及异常名称注册 */
static void exception_init(void) {
	int i;
	for (i = 0; i < IDT_DESC_CNT; i++) {
c0001af6:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
/work/x86_os_my/kernel/interrupt.c:119 (discriminator 1)
c0001afa:	81 7d fc 80 00 00 00 	cmpl   $0x80,-0x4(%ebp)
c0001b01:	7e d7                	jle    c0001ada <exception_init+0xf>
/work/x86_os_my/kernel/interrupt.c:125
	/* idt_table数组中的函数是在进入中断后根据中断向量号调用的,
	 * 见kernel/kernel.S的call [idt_table + %1*4] */
		idt_table[i] = general_intr_handler;		// 默认为general_intr_handler，以后会由register_handler来注册具体处理函数。
		intr_name[i] = "unknown";					// 先统一赋值为unknown 
	}
	intr_name[0] = "#DE Divide Error";
c0001b03:	c7 05 a0 aa 00 c0 84 	movl   $0xc0006f84,0xc000aaa0
c0001b0a:	6f 00 c0 
/work/x86_os_my/kernel/interrupt.c:126
	intr_name[1] = "#DB Debug Exception";
c0001b0d:	c7 05 a4 aa 00 c0 95 	movl   $0xc0006f95,0xc000aaa4
c0001b14:	6f 00 c0 
/work/x86_os_my/kernel/interrupt.c:127
	intr_name[2] = "NMI Interrupt";
c0001b17:	c7 05 a8 aa 00 c0 a9 	movl   $0xc0006fa9,0xc000aaa8
c0001b1e:	6f 00 c0 
/work/x86_os_my/kernel/interrupt.c:128
	intr_name[3] = "#BP Breakpoint Exception";
c0001b21:	c7 05 ac aa 00 c0 b7 	movl   $0xc0006fb7,0xc000aaac
c0001b28:	6f 00 c0 
/work/x86_os_my/kernel/interrupt.c:129
	intr_name[4] = "#OF Overflow Exception";
c0001b2b:	c7 05 b0 aa 00 c0 d0 	movl   $0xc0006fd0,0xc000aab0
c0001b32:	6f 00 c0 
/work/x86_os_my/kernel/interrupt.c:130
	intr_name[5] = "#BR BOUND Range Exceeded Exception";
c0001b35:	c7 05 b4 aa 00 c0 e8 	movl   $0xc0006fe8,0xc000aab4
c0001b3c:	6f 00 c0 
/work/x86_os_my/kernel/interrupt.c:131
	intr_name[6] = "#UD Invalid Opcode Exception";
c0001b3f:	c7 05 b8 aa 00 c0 0b 	movl   $0xc000700b,0xc000aab8
c0001b46:	70 00 c0 
/work/x86_os_my/kernel/interrupt.c:132
	intr_name[7] = "#NM Device Not Available Exception";
c0001b49:	c7 05 bc aa 00 c0 28 	movl   $0xc0007028,0xc000aabc
c0001b50:	70 00 c0 
/work/x86_os_my/kernel/interrupt.c:133
	intr_name[8] = "#DF Double Fault Exception";
c0001b53:	c7 05 c0 aa 00 c0 4b 	movl   $0xc000704b,0xc000aac0
c0001b5a:	70 00 c0 
/work/x86_os_my/kernel/interrupt.c:134
	intr_name[9] = "Coprocessor Segment Overrun";
c0001b5d:	c7 05 c4 aa 00 c0 66 	movl   $0xc0007066,0xc000aac4
c0001b64:	70 00 c0 
/work/x86_os_my/kernel/interrupt.c:135
	intr_name[10] = "#TS Invalid TSS Exception";
c0001b67:	c7 05 c8 aa 00 c0 82 	movl   $0xc0007082,0xc000aac8
c0001b6e:	70 00 c0 
/work/x86_os_my/kernel/interrupt.c:136
	intr_name[11] = "#NP Segment Not Present";
c0001b71:	c7 05 cc aa 00 c0 9c 	movl   $0xc000709c,0xc000aacc
c0001b78:	70 00 c0 
/work/x86_os_my/kernel/interrupt.c:137
	intr_name[12] = "#SS Stack Fault Exception";
c0001b7b:	c7 05 d0 aa 00 c0 b4 	movl   $0xc00070b4,0xc000aad0
c0001b82:	70 00 c0 
/work/x86_os_my/kernel/interrupt.c:138
	intr_name[13] = "#GP General Protection Exception";
c0001b85:	c7 05 d4 aa 00 c0 d0 	movl   $0xc00070d0,0xc000aad4
c0001b8c:	70 00 c0 
/work/x86_os_my/kernel/interrupt.c:139
	intr_name[14] = "#PF Page-Fault Exception";
c0001b8f:	c7 05 d8 aa 00 c0 f1 	movl   $0xc00070f1,0xc000aad8
c0001b96:	70 00 c0 
/work/x86_os_my/kernel/interrupt.c:141
	// intr_name[15] 第15项是intel保留项，未使用
	intr_name[16] = "#MF x87 FPU Floating-Point Error";
c0001b99:	c7 05 e0 aa 00 c0 0c 	movl   $0xc000710c,0xc000aae0
c0001ba0:	71 00 c0 
/work/x86_os_my/kernel/interrupt.c:142
	intr_name[17] = "#AC Alignment Check Exception";
c0001ba3:	c7 05 e4 aa 00 c0 2d 	movl   $0xc000712d,0xc000aae4
c0001baa:	71 00 c0 
/work/x86_os_my/kernel/interrupt.c:143
	intr_name[18] = "#MC Machine-Check Exception";
c0001bad:	c7 05 e8 aa 00 c0 4b 	movl   $0xc000714b,0xc000aae8
c0001bb4:	71 00 c0 
/work/x86_os_my/kernel/interrupt.c:144
	intr_name[19] = "#XF SIMD Floating-Point Exception";
c0001bb7:	c7 05 ec aa 00 c0 68 	movl   $0xc0007168,0xc000aaec
c0001bbe:	71 00 c0 
/work/x86_os_my/kernel/interrupt.c:145
}
c0001bc1:	90                   	nop
c0001bc2:	c9                   	leave  
c0001bc3:	c3                   	ret    

c0001bc4 <intr_enable>:
intr_enable():
/work/x86_os_my/kernel/interrupt.c:148

/* 开中断并返回开中断前的状态*/
enum intr_status intr_enable() {
c0001bc4:	55                   	push   %ebp
c0001bc5:	89 e5                	mov    %esp,%ebp
c0001bc7:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/interrupt.c:150
	enum intr_status old_status;
	if (INTR_ON == intr_get_status()) {
c0001bca:	e8 65 00 00 00       	call   c0001c34 <intr_get_status>
c0001bcf:	83 f8 01             	cmp    $0x1,%eax
c0001bd2:	75 0c                	jne    c0001be0 <intr_enable+0x1c>
/work/x86_os_my/kernel/interrupt.c:151
		old_status = INTR_ON;
c0001bd4:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:152
		return old_status;
c0001bdb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001bde:	eb 0b                	jmp    c0001beb <intr_enable+0x27>
/work/x86_os_my/kernel/interrupt.c:154
	} else {
		old_status = INTR_OFF;
c0001be0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:155
		asm volatile("sti");	 // 开中断,sti指令将IF位置1
c0001be7:	fb                   	sti    
/work/x86_os_my/kernel/interrupt.c:156
		return old_status;
c0001be8:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/kernel/interrupt.c:158
	}
}
c0001beb:	c9                   	leave  
c0001bec:	c3                   	ret    

c0001bed <intr_disable>:
intr_disable():
/work/x86_os_my/kernel/interrupt.c:161

/* 关中断,并且返回关中断前的状态 */
enum intr_status intr_disable() {     
c0001bed:	55                   	push   %ebp
c0001bee:	89 e5                	mov    %esp,%ebp
c0001bf0:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/interrupt.c:163
	enum intr_status old_status;
	if (INTR_ON == intr_get_status()) {
c0001bf3:	e8 3c 00 00 00       	call   c0001c34 <intr_get_status>
c0001bf8:	83 f8 01             	cmp    $0x1,%eax
c0001bfb:	75 0d                	jne    c0001c0a <intr_disable+0x1d>
/work/x86_os_my/kernel/interrupt.c:164
		old_status = INTR_ON;
c0001bfd:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:165
		asm volatile("cli" : : : "memory"); // 关中断,cli指令将IF位置0
c0001c04:	fa                   	cli    
/work/x86_os_my/kernel/interrupt.c:166
		return old_status;
c0001c05:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001c08:	eb 0a                	jmp    c0001c14 <intr_disable+0x27>
/work/x86_os_my/kernel/interrupt.c:168
	} else {
		old_status = INTR_OFF;
c0001c0a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:169
		return old_status;
c0001c11:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/kernel/interrupt.c:171
	}
}
c0001c14:	c9                   	leave  
c0001c15:	c3                   	ret    

c0001c16 <intr_set_status>:
intr_set_status():
/work/x86_os_my/kernel/interrupt.c:174

/* 将中断状态设置为status */
enum intr_status intr_set_status(enum intr_status status) {
c0001c16:	55                   	push   %ebp
c0001c17:	89 e5                	mov    %esp,%ebp
c0001c19:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:175
	return status & INTR_ON ? intr_enable() : intr_disable();
c0001c1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0001c1f:	83 e0 01             	and    $0x1,%eax
c0001c22:	85 c0                	test   %eax,%eax
c0001c24:	74 07                	je     c0001c2d <intr_set_status+0x17>
/work/x86_os_my/kernel/interrupt.c:175 (discriminator 1)
c0001c26:	e8 99 ff ff ff       	call   c0001bc4 <intr_enable>
c0001c2b:	eb 05                	jmp    c0001c32 <intr_set_status+0x1c>
/work/x86_os_my/kernel/interrupt.c:175 (discriminator 2)
c0001c2d:	e8 bb ff ff ff       	call   c0001bed <intr_disable>
/work/x86_os_my/kernel/interrupt.c:176 (discriminator 5)
}
c0001c32:	c9                   	leave  
c0001c33:	c3                   	ret    

c0001c34 <intr_get_status>:
intr_get_status():
/work/x86_os_my/kernel/interrupt.c:179

/* 获取当前中断状态 */
enum intr_status intr_get_status() {
c0001c34:	55                   	push   %ebp
c0001c35:	89 e5                	mov    %esp,%ebp
c0001c37:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:180
	uint32_t eflags = 0; 
c0001c3a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
/work/x86_os_my/kernel/interrupt.c:181
	GET_EFLAGS(eflags);
c0001c41:	9c                   	pushf  
c0001c42:	58                   	pop    %eax
c0001c43:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/kernel/interrupt.c:182
	return (EFLAGS_IF & eflags) ? INTR_ON : INTR_OFF;
c0001c46:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0001c49:	25 00 02 00 00       	and    $0x200,%eax
c0001c4e:	85 c0                	test   %eax,%eax
c0001c50:	0f 95 c0             	setne  %al
c0001c53:	0f b6 c0             	movzbl %al,%eax
/work/x86_os_my/kernel/interrupt.c:183
}
c0001c56:	c9                   	leave  
c0001c57:	c3                   	ret    

c0001c58 <register_handler>:
register_handler():
/work/x86_os_my/kernel/interrupt.c:186

/* 在中断处理程序数组第vector_no个元素中注册安装中断处理程序function */
void register_handler(uint8_t vector_no, intr_handler function) {
c0001c58:	55                   	push   %ebp
c0001c59:	89 e5                	mov    %esp,%ebp
c0001c5b:	83 ec 04             	sub    $0x4,%esp
c0001c5e:	8b 45 08             	mov    0x8(%ebp),%eax
c0001c61:	88 45 fc             	mov    %al,-0x4(%ebp)
/work/x86_os_my/kernel/interrupt.c:189
/* idt_table数组中的函数是在进入中断后根据中断向量号调用的,
 * 见kernel/kernel.S的call [idt_table + %1*4] */
   idt_table[vector_no] = function; 
c0001c64:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c0001c68:	8b 55 0c             	mov    0xc(%ebp),%edx
c0001c6b:	89 14 85 c0 ac 00 c0 	mov    %edx,-0x3fff5340(,%eax,4)
/work/x86_os_my/kernel/interrupt.c:190
}
c0001c72:	90                   	nop
c0001c73:	c9                   	leave  
c0001c74:	c3                   	ret    

c0001c75 <idt_init>:
idt_init():
/work/x86_os_my/kernel/interrupt.c:193

/*完成有关中断的所有初始化工作*/
void idt_init() {
c0001c75:	55                   	push   %ebp
c0001c76:	89 e5                	mov    %esp,%ebp
c0001c78:	56                   	push   %esi
c0001c79:	53                   	push   %ebx
c0001c7a:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:194
	put_str("idt_init start\n");
c0001c7d:	83 ec 0c             	sub    $0xc,%esp
c0001c80:	68 8a 71 00 c0       	push   $0xc000718a
c0001c85:	e8 96 07 00 00       	call   c0002420 <put_str>
c0001c8a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:195
	idt_desc_init();	// 初始化中断描述符表
c0001c8d:	e8 e8 fc ff ff       	call   c000197a <idt_desc_init>
/work/x86_os_my/kernel/interrupt.c:196
	exception_init();	// 异常名初始化并注册通常的中断处理函数
c0001c92:	e8 34 fe ff ff       	call   c0001acb <exception_init>
/work/x86_os_my/kernel/interrupt.c:197
	pic_init();			// 初始化8259A
c0001c97:	e8 f5 fb ff ff       	call   c0001891 <pic_init>
/work/x86_os_my/kernel/interrupt.c:201

	/* 加载idt */
	// IDTR 是 48 位的寄存器，低 16 位是 IDT 的界限 = IDT 尺寸大小-1，高 32 位是 IDT 的线性基地址
	uint64_t idt_operand = ((sizeof(idt) - 1) | ((uint64_t)(uint32_t)idt << 16));
c0001c9c:	b8 e0 a5 00 c0       	mov    $0xc000a5e0,%eax
c0001ca1:	ba 00 00 00 00       	mov    $0x0,%edx
c0001ca6:	0f a4 c2 10          	shld   $0x10,%eax,%edx
c0001caa:	c1 e0 10             	shl    $0x10,%eax
c0001cad:	89 c1                	mov    %eax,%ecx
c0001caf:	81 c9 07 04 00 00    	or     $0x407,%ecx
c0001cb5:	89 cb                	mov    %ecx,%ebx
c0001cb7:	89 d0                	mov    %edx,%eax
c0001cb9:	80 cc 00             	or     $0x0,%ah
c0001cbc:	89 c6                	mov    %eax,%esi
c0001cbe:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c0001cc1:	89 75 f4             	mov    %esi,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:202
	asm volatile("lidt %0" : : "m" (idt_operand));
c0001cc4:	0f 01 5d f0          	lidtl  -0x10(%ebp)
/work/x86_os_my/kernel/interrupt.c:203
	put_str("idt_init done\n");
c0001cc8:	83 ec 0c             	sub    $0xc,%esp
c0001ccb:	68 9a 71 00 c0       	push   $0xc000719a
c0001cd0:	e8 4b 07 00 00       	call   c0002420 <put_str>
c0001cd5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:204
}
c0001cd8:	90                   	nop
c0001cd9:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0001cdc:	5b                   	pop    %ebx
c0001cdd:	5e                   	pop    %esi
c0001cde:	5d                   	pop    %ebp
c0001cdf:	c3                   	ret    

c0001ce0 <outb>:
outb():
/work/x86_os_my/lib/kernel/io.h:17
#define __LIB_IO_H
#include "stdint.h"
//inline省去了函数调用开支

/* 向端口port写入一个字节*/
static inline void outb(uint16_t port, uint8_t data) {
c0001ce0:	55                   	push   %ebp
c0001ce1:	89 e5                	mov    %esp,%ebp
c0001ce3:	83 ec 08             	sub    $0x8,%esp
c0001ce6:	8b 55 08             	mov    0x8(%ebp),%edx
c0001ce9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0001cec:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c0001cf0:	88 45 f8             	mov    %al,-0x8(%ebp)
/work/x86_os_my/lib/kernel/io.h:21
/*********************************************************
 a表示用寄存器al或ax或eax,对端口指定N表示0~255, d表示用dx存储端口号, 
 %b0表示对应al,%w1表示对应dx */ 
   asm volatile ( "outb %b0, %w1" : : "a" (data), "Nd" (port));    
c0001cf3:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c0001cf7:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0001cfb:	ee                   	out    %al,(%dx)
/work/x86_os_my/lib/kernel/io.h:23
/******************************************************/
}
c0001cfc:	90                   	nop
c0001cfd:	c9                   	leave  
c0001cfe:	c3                   	ret    

c0001cff <frequency_set>:
frequency_set():
/work/x86_os_my/device/timer.c:27
/* 把操作的计数器counter_no、读写锁属性rwl、计数器模式counter_mode写入模式控制寄存器并赋予初始值counter_value */
static void frequency_set(uint8_t counter_port, \
		uint8_t counter_no, \
		uint8_t rwl, \
		uint8_t counter_mode, \
		uint16_t counter_value) {
c0001cff:	55                   	push   %ebp
c0001d00:	89 e5                	mov    %esp,%ebp
c0001d02:	56                   	push   %esi
c0001d03:	53                   	push   %ebx
c0001d04:	83 ec 14             	sub    $0x14,%esp
c0001d07:	8b 45 08             	mov    0x8(%ebp),%eax
c0001d0a:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c0001d0d:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0001d10:	8b 55 14             	mov    0x14(%ebp),%edx
c0001d13:	8b 75 18             	mov    0x18(%ebp),%esi
c0001d16:	88 45 f4             	mov    %al,-0xc(%ebp)
c0001d19:	88 5d f0             	mov    %bl,-0x10(%ebp)
c0001d1c:	88 4d ec             	mov    %cl,-0x14(%ebp)
c0001d1f:	88 55 e8             	mov    %dl,-0x18(%ebp)
c0001d22:	66 89 75 e4          	mov    %si,-0x1c(%ebp)
/work/x86_os_my/device/timer.c:29
	/* 往控制字寄存器端口0x43中写入控制字 */
	outb(PIT_CONTROL_PORT, (uint8_t)(counter_no << 6 | rwl << 4 | counter_mode << 1));
c0001d26:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c0001d2a:	c1 e0 06             	shl    $0x6,%eax
c0001d2d:	89 c2                	mov    %eax,%edx
c0001d2f:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0001d33:	c1 e0 04             	shl    $0x4,%eax
c0001d36:	09 c2                	or     %eax,%edx
c0001d38:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c0001d3c:	01 c0                	add    %eax,%eax
c0001d3e:	09 d0                	or     %edx,%eax
c0001d40:	0f b6 c0             	movzbl %al,%eax
c0001d43:	50                   	push   %eax
c0001d44:	6a 43                	push   $0x43
c0001d46:	e8 95 ff ff ff       	call   c0001ce0 <outb>
c0001d4b:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/timer.c:31
	/* 先写入counter_value的低8位 */
	outb(counter_port, (uint8_t)counter_value);
c0001d4e:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
c0001d52:	0f b6 d0             	movzbl %al,%edx
c0001d55:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0001d59:	52                   	push   %edx
c0001d5a:	50                   	push   %eax
c0001d5b:	e8 80 ff ff ff       	call   c0001ce0 <outb>
c0001d60:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/timer.c:33
	/* 再写入counter_value的高8位 */
	outb(counter_port, (uint8_t)counter_value >> 8);
c0001d63:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0001d67:	6a 00                	push   $0x0
c0001d69:	50                   	push   %eax
c0001d6a:	e8 71 ff ff ff       	call   c0001ce0 <outb>
c0001d6f:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/timer.c:34
}
c0001d72:	90                   	nop
c0001d73:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0001d76:	5b                   	pop    %ebx
c0001d77:	5e                   	pop    %esi
c0001d78:	5d                   	pop    %ebp
c0001d79:	c3                   	ret    

c0001d7a <intr_timer_handler>:
intr_timer_handler():
/work/x86_os_my/device/timer.c:37

/* 时钟的中断处理函数 */
static void intr_timer_handler(void) {
c0001d7a:	55                   	push   %ebp
c0001d7b:	89 e5                	mov    %esp,%ebp
c0001d7d:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/timer.c:38
	struct task_struct* cur_thread = running_thread();		// 返回线程PCB
c0001d80:	e8 0c 20 00 00       	call   c0003d91 <running_thread>
c0001d85:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/timer.c:40

	ASSERT(cur_thread->stack_magic == 0x19870916);			// 检查栈是否溢出
c0001d88:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001d8b:	8b 80 ec 00 00 00    	mov    0xec(%eax),%eax
c0001d91:	3d 16 09 87 19       	cmp    $0x19870916,%eax
c0001d96:	74 19                	je     c0001db1 <intr_timer_handler+0x37>
/work/x86_os_my/device/timer.c:40 (discriminator 1)
c0001d98:	68 ac 71 00 c0       	push   $0xc00071ac
c0001d9d:	68 14 72 00 c0       	push   $0xc0007214
c0001da2:	6a 28                	push   $0x28
c0001da4:	68 d2 71 00 c0       	push   $0xc00071d2
c0001da9:	e8 e4 07 00 00       	call   c0002592 <panic_spin>
c0001dae:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:42

	cur_thread->elapsed_ticks++;// 记录此线程占用的cpu时间
c0001db1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001db4:	8b 40 20             	mov    0x20(%eax),%eax
c0001db7:	8d 50 01             	lea    0x1(%eax),%edx
c0001dba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001dbd:	89 50 20             	mov    %edx,0x20(%eax)
/work/x86_os_my/device/timer.c:43
	ticks++;	//从内核第一次处理时间中断开始,至今的滴哒数,是内核态和用户态总共的嘀哒数
c0001dc0:	a1 c4 ae 00 c0       	mov    0xc000aec4,%eax
c0001dc5:	83 c0 01             	add    $0x1,%eax
c0001dc8:	a3 c4 ae 00 c0       	mov    %eax,0xc000aec4
/work/x86_os_my/device/timer.c:45

	if (cur_thread->ticks == 0) {
c0001dcd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001dd0:	0f b6 40 1d          	movzbl 0x1d(%eax),%eax
c0001dd4:	84 c0                	test   %al,%al
c0001dd6:	75 07                	jne    c0001ddf <intr_timer_handler+0x65>
/work/x86_os_my/device/timer.c:46
		schedule();				// 若进程时间片用完就开始调度新的进程上cpu
c0001dd8:	e8 98 22 00 00       	call   c0004075 <schedule>
/work/x86_os_my/device/timer.c:50
	} else {
		cur_thread->ticks--;	// 将当前进程的时间片-1
	}
}
c0001ddd:	eb 10                	jmp    c0001def <intr_timer_handler+0x75>
/work/x86_os_my/device/timer.c:48
	ticks++;	//从内核第一次处理时间中断开始,至今的滴哒数,是内核态和用户态总共的嘀哒数

	if (cur_thread->ticks == 0) {
		schedule();				// 若进程时间片用完就开始调度新的进程上cpu
	} else {
		cur_thread->ticks--;	// 将当前进程的时间片-1
c0001ddf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001de2:	0f b6 40 1d          	movzbl 0x1d(%eax),%eax
c0001de6:	8d 50 ff             	lea    -0x1(%eax),%edx
c0001de9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001dec:	88 50 1d             	mov    %dl,0x1d(%eax)
/work/x86_os_my/device/timer.c:50
	}
}
c0001def:	90                   	nop
c0001df0:	c9                   	leave  
c0001df1:	c3                   	ret    

c0001df2 <ticks_to_sleep>:
ticks_to_sleep():
/work/x86_os_my/device/timer.c:53

/* 以tick为单位的sleep,任何时间形式的sleep会转换此ticks形式 */
static void ticks_to_sleep(uint32_t sleep_ticks) {
c0001df2:	55                   	push   %ebp
c0001df3:	89 e5                	mov    %esp,%ebp
c0001df5:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/timer.c:54
	uint32_t start_tick = ticks;
c0001df8:	a1 c4 ae 00 c0       	mov    0xc000aec4,%eax
c0001dfd:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/timer.c:57

	/* 若间隔的ticks数不够便让出cpu */
	while (ticks - start_tick < sleep_ticks) {
c0001e00:	eb 05                	jmp    c0001e07 <ticks_to_sleep+0x15>
/work/x86_os_my/device/timer.c:58
		thread_yield();
c0001e02:	e8 18 25 00 00       	call   c000431f <thread_yield>
/work/x86_os_my/device/timer.c:57
/* 以tick为单位的sleep,任何时间形式的sleep会转换此ticks形式 */
static void ticks_to_sleep(uint32_t sleep_ticks) {
	uint32_t start_tick = ticks;

	/* 若间隔的ticks数不够便让出cpu */
	while (ticks - start_tick < sleep_ticks) {
c0001e07:	a1 c4 ae 00 c0       	mov    0xc000aec4,%eax
c0001e0c:	2b 45 f4             	sub    -0xc(%ebp),%eax
c0001e0f:	3b 45 08             	cmp    0x8(%ebp),%eax
c0001e12:	72 ee                	jb     c0001e02 <ticks_to_sleep+0x10>
/work/x86_os_my/device/timer.c:60
		thread_yield();
	}
}
c0001e14:	90                   	nop
c0001e15:	c9                   	leave  
c0001e16:	c3                   	ret    

c0001e17 <mtime_sleep>:
mtime_sleep():
/work/x86_os_my/device/timer.c:62

void mtime_sleep(uint32_t m_seconds) {
c0001e17:	55                   	push   %ebp
c0001e18:	89 e5                	mov    %esp,%ebp
c0001e1a:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/timer.c:63
	uint32_t sleep_ticks = DIV_ROUND_UP(m_seconds, mil_seconds_per_intr);
c0001e1d:	8b 45 08             	mov    0x8(%ebp),%eax
c0001e20:	83 c0 09             	add    $0x9,%eax
c0001e23:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
c0001e28:	f7 e2                	mul    %edx
c0001e2a:	89 d0                	mov    %edx,%eax
c0001e2c:	c1 e8 03             	shr    $0x3,%eax
c0001e2f:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/timer.c:64
	ASSERT(sleep_ticks > 0);
c0001e32:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0001e36:	75 19                	jne    c0001e51 <mtime_sleep+0x3a>
/work/x86_os_my/device/timer.c:64 (discriminator 1)
c0001e38:	68 e1 71 00 c0       	push   $0xc00071e1
c0001e3d:	68 28 72 00 c0       	push   $0xc0007228
c0001e42:	6a 40                	push   $0x40
c0001e44:	68 d2 71 00 c0       	push   $0xc00071d2
c0001e49:	e8 44 07 00 00       	call   c0002592 <panic_spin>
c0001e4e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:65
	ticks_to_sleep(sleep_ticks); 
c0001e51:	83 ec 0c             	sub    $0xc,%esp
c0001e54:	ff 75 f4             	pushl  -0xc(%ebp)
c0001e57:	e8 96 ff ff ff       	call   c0001df2 <ticks_to_sleep>
c0001e5c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:66
}
c0001e5f:	90                   	nop
c0001e60:	c9                   	leave  
c0001e61:	c3                   	ret    

c0001e62 <timer_init>:
timer_init():
/work/x86_os_my/device/timer.c:69

/* 初始化PIT8253 */
void timer_init() {
c0001e62:	55                   	push   %ebp
c0001e63:	89 e5                	mov    %esp,%ebp
c0001e65:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/timer.c:70
	put_str("timer_init start\n");
c0001e68:	83 ec 0c             	sub    $0xc,%esp
c0001e6b:	68 f1 71 00 c0       	push   $0xc00071f1
c0001e70:	e8 ab 05 00 00       	call   c0002420 <put_str>
c0001e75:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:72
	/* 设置8253的定时周期,也就是发中断的周期 */
	frequency_set(CONTRER0_PORT, COUNTER0_NO, READ_WRITE_LATCH, COUNTER_MODE, COUNTER0_VALUE);
c0001e78:	83 ec 0c             	sub    $0xc,%esp
c0001e7b:	68 9b 2e 00 00       	push   $0x2e9b
c0001e80:	6a 02                	push   $0x2
c0001e82:	6a 03                	push   $0x3
c0001e84:	6a 00                	push   $0x0
c0001e86:	6a 40                	push   $0x40
c0001e88:	e8 72 fe ff ff       	call   c0001cff <frequency_set>
c0001e8d:	83 c4 20             	add    $0x20,%esp
/work/x86_os_my/device/timer.c:73
	register_handler(0x20, intr_timer_handler);
c0001e90:	83 ec 08             	sub    $0x8,%esp
c0001e93:	68 7a 1d 00 c0       	push   $0xc0001d7a
c0001e98:	6a 20                	push   $0x20
c0001e9a:	e8 b9 fd ff ff       	call   c0001c58 <register_handler>
c0001e9f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:74
	put_str("timer_init done\n");
c0001ea2:	83 ec 0c             	sub    $0xc,%esp
c0001ea5:	68 03 72 00 c0       	push   $0xc0007203
c0001eaa:	e8 71 05 00 00       	call   c0002420 <put_str>
c0001eaf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:75
}
c0001eb2:	90                   	nop
c0001eb3:	c9                   	leave  
c0001eb4:	c3                   	ret    
c0001eb5:	66 90                	xchg   %ax,%ax
c0001eb7:	66 90                	xchg   %ax,%ax
c0001eb9:	66 90                	xchg   %ax,%ax
c0001ebb:	66 90                	xchg   %ax,%ax
c0001ebd:	66 90                	xchg   %ax,%ax
c0001ebf:	90                   	nop

c0001ec0 <intr_exit>:
intr_exit():
c0001ec0:	83 c4 04             	add    $0x4,%esp
c0001ec3:	61                   	popa   
c0001ec4:	0f a9                	pop    %gs
c0001ec6:	0f a1                	pop    %fs
c0001ec8:	07                   	pop    %es
c0001ec9:	1f                   	pop    %ds
c0001eca:	83 c4 04             	add    $0x4,%esp
c0001ecd:	cf                   	iret   

c0001ece <intr0x00entry>:
intr0x00entry():
c0001ece:	6a 00                	push   $0x0
c0001ed0:	1e                   	push   %ds
c0001ed1:	06                   	push   %es
c0001ed2:	0f a0                	push   %fs
c0001ed4:	0f a8                	push   %gs
c0001ed6:	60                   	pusha  
c0001ed7:	b0 20                	mov    $0x20,%al
c0001ed9:	e6 a0                	out    %al,$0xa0
c0001edb:	e6 20                	out    %al,$0x20
c0001edd:	6a 00                	push   $0x0
c0001edf:	ff 15 c0 ac 00 c0    	call   *0xc000acc0
c0001ee5:	eb d9                	jmp    c0001ec0 <intr_exit>

c0001ee7 <intr0x01entry>:
intr0x01entry():
c0001ee7:	6a 00                	push   $0x0
c0001ee9:	1e                   	push   %ds
c0001eea:	06                   	push   %es
c0001eeb:	0f a0                	push   %fs
c0001eed:	0f a8                	push   %gs
c0001eef:	60                   	pusha  
c0001ef0:	b0 20                	mov    $0x20,%al
c0001ef2:	e6 a0                	out    %al,$0xa0
c0001ef4:	e6 20                	out    %al,$0x20
c0001ef6:	6a 01                	push   $0x1
c0001ef8:	ff 15 c4 ac 00 c0    	call   *0xc000acc4
c0001efe:	eb c0                	jmp    c0001ec0 <intr_exit>

c0001f00 <intr0x02entry>:
intr0x02entry():
c0001f00:	6a 00                	push   $0x0
c0001f02:	1e                   	push   %ds
c0001f03:	06                   	push   %es
c0001f04:	0f a0                	push   %fs
c0001f06:	0f a8                	push   %gs
c0001f08:	60                   	pusha  
c0001f09:	b0 20                	mov    $0x20,%al
c0001f0b:	e6 a0                	out    %al,$0xa0
c0001f0d:	e6 20                	out    %al,$0x20
c0001f0f:	6a 02                	push   $0x2
c0001f11:	ff 15 c8 ac 00 c0    	call   *0xc000acc8
c0001f17:	eb a7                	jmp    c0001ec0 <intr_exit>

c0001f19 <intr0x03entry>:
intr0x03entry():
c0001f19:	6a 00                	push   $0x0
c0001f1b:	1e                   	push   %ds
c0001f1c:	06                   	push   %es
c0001f1d:	0f a0                	push   %fs
c0001f1f:	0f a8                	push   %gs
c0001f21:	60                   	pusha  
c0001f22:	b0 20                	mov    $0x20,%al
c0001f24:	e6 a0                	out    %al,$0xa0
c0001f26:	e6 20                	out    %al,$0x20
c0001f28:	6a 03                	push   $0x3
c0001f2a:	ff 15 cc ac 00 c0    	call   *0xc000accc
c0001f30:	eb 8e                	jmp    c0001ec0 <intr_exit>

c0001f32 <intr0x04entry>:
intr0x04entry():
c0001f32:	6a 00                	push   $0x0
c0001f34:	1e                   	push   %ds
c0001f35:	06                   	push   %es
c0001f36:	0f a0                	push   %fs
c0001f38:	0f a8                	push   %gs
c0001f3a:	60                   	pusha  
c0001f3b:	b0 20                	mov    $0x20,%al
c0001f3d:	e6 a0                	out    %al,$0xa0
c0001f3f:	e6 20                	out    %al,$0x20
c0001f41:	6a 04                	push   $0x4
c0001f43:	ff 15 d0 ac 00 c0    	call   *0xc000acd0
c0001f49:	e9 72 ff ff ff       	jmp    c0001ec0 <intr_exit>

c0001f4e <intr0x05entry>:
intr0x05entry():
c0001f4e:	6a 00                	push   $0x0
c0001f50:	1e                   	push   %ds
c0001f51:	06                   	push   %es
c0001f52:	0f a0                	push   %fs
c0001f54:	0f a8                	push   %gs
c0001f56:	60                   	pusha  
c0001f57:	b0 20                	mov    $0x20,%al
c0001f59:	e6 a0                	out    %al,$0xa0
c0001f5b:	e6 20                	out    %al,$0x20
c0001f5d:	6a 05                	push   $0x5
c0001f5f:	ff 15 d4 ac 00 c0    	call   *0xc000acd4
c0001f65:	e9 56 ff ff ff       	jmp    c0001ec0 <intr_exit>

c0001f6a <intr0x06entry>:
intr0x06entry():
c0001f6a:	6a 00                	push   $0x0
c0001f6c:	1e                   	push   %ds
c0001f6d:	06                   	push   %es
c0001f6e:	0f a0                	push   %fs
c0001f70:	0f a8                	push   %gs
c0001f72:	60                   	pusha  
c0001f73:	b0 20                	mov    $0x20,%al
c0001f75:	e6 a0                	out    %al,$0xa0
c0001f77:	e6 20                	out    %al,$0x20
c0001f79:	6a 06                	push   $0x6
c0001f7b:	ff 15 d8 ac 00 c0    	call   *0xc000acd8
c0001f81:	e9 3a ff ff ff       	jmp    c0001ec0 <intr_exit>

c0001f86 <intr0x07entry>:
intr0x07entry():
c0001f86:	6a 00                	push   $0x0
c0001f88:	1e                   	push   %ds
c0001f89:	06                   	push   %es
c0001f8a:	0f a0                	push   %fs
c0001f8c:	0f a8                	push   %gs
c0001f8e:	60                   	pusha  
c0001f8f:	b0 20                	mov    $0x20,%al
c0001f91:	e6 a0                	out    %al,$0xa0
c0001f93:	e6 20                	out    %al,$0x20
c0001f95:	6a 07                	push   $0x7
c0001f97:	ff 15 dc ac 00 c0    	call   *0xc000acdc
c0001f9d:	e9 1e ff ff ff       	jmp    c0001ec0 <intr_exit>

c0001fa2 <intr0x08entry>:
intr0x08entry():
c0001fa2:	90                   	nop
c0001fa3:	1e                   	push   %ds
c0001fa4:	06                   	push   %es
c0001fa5:	0f a0                	push   %fs
c0001fa7:	0f a8                	push   %gs
c0001fa9:	60                   	pusha  
c0001faa:	b0 20                	mov    $0x20,%al
c0001fac:	e6 a0                	out    %al,$0xa0
c0001fae:	e6 20                	out    %al,$0x20
c0001fb0:	6a 08                	push   $0x8
c0001fb2:	ff 15 e0 ac 00 c0    	call   *0xc000ace0
c0001fb8:	e9 03 ff ff ff       	jmp    c0001ec0 <intr_exit>

c0001fbd <intr0x09entry>:
intr0x09entry():
c0001fbd:	6a 00                	push   $0x0
c0001fbf:	1e                   	push   %ds
c0001fc0:	06                   	push   %es
c0001fc1:	0f a0                	push   %fs
c0001fc3:	0f a8                	push   %gs
c0001fc5:	60                   	pusha  
c0001fc6:	b0 20                	mov    $0x20,%al
c0001fc8:	e6 a0                	out    %al,$0xa0
c0001fca:	e6 20                	out    %al,$0x20
c0001fcc:	6a 09                	push   $0x9
c0001fce:	ff 15 e4 ac 00 c0    	call   *0xc000ace4
c0001fd4:	e9 e7 fe ff ff       	jmp    c0001ec0 <intr_exit>

c0001fd9 <intr0x0aentry>:
intr0x0aentry():
c0001fd9:	90                   	nop
c0001fda:	1e                   	push   %ds
c0001fdb:	06                   	push   %es
c0001fdc:	0f a0                	push   %fs
c0001fde:	0f a8                	push   %gs
c0001fe0:	60                   	pusha  
c0001fe1:	b0 20                	mov    $0x20,%al
c0001fe3:	e6 a0                	out    %al,$0xa0
c0001fe5:	e6 20                	out    %al,$0x20
c0001fe7:	6a 0a                	push   $0xa
c0001fe9:	ff 15 e8 ac 00 c0    	call   *0xc000ace8
c0001fef:	e9 cc fe ff ff       	jmp    c0001ec0 <intr_exit>

c0001ff4 <intr0x0bentry>:
intr0x0bentry():
c0001ff4:	90                   	nop
c0001ff5:	1e                   	push   %ds
c0001ff6:	06                   	push   %es
c0001ff7:	0f a0                	push   %fs
c0001ff9:	0f a8                	push   %gs
c0001ffb:	60                   	pusha  
c0001ffc:	b0 20                	mov    $0x20,%al
c0001ffe:	e6 a0                	out    %al,$0xa0
c0002000:	e6 20                	out    %al,$0x20
c0002002:	6a 0b                	push   $0xb
c0002004:	ff 15 ec ac 00 c0    	call   *0xc000acec
c000200a:	e9 b1 fe ff ff       	jmp    c0001ec0 <intr_exit>

c000200f <intr0x0centry>:
intr0x0centry():
c000200f:	6a 00                	push   $0x0
c0002011:	1e                   	push   %ds
c0002012:	06                   	push   %es
c0002013:	0f a0                	push   %fs
c0002015:	0f a8                	push   %gs
c0002017:	60                   	pusha  
c0002018:	b0 20                	mov    $0x20,%al
c000201a:	e6 a0                	out    %al,$0xa0
c000201c:	e6 20                	out    %al,$0x20
c000201e:	6a 0c                	push   $0xc
c0002020:	ff 15 f0 ac 00 c0    	call   *0xc000acf0
c0002026:	e9 95 fe ff ff       	jmp    c0001ec0 <intr_exit>

c000202b <intr0x0dentry>:
intr0x0dentry():
c000202b:	90                   	nop
c000202c:	1e                   	push   %ds
c000202d:	06                   	push   %es
c000202e:	0f a0                	push   %fs
c0002030:	0f a8                	push   %gs
c0002032:	60                   	pusha  
c0002033:	b0 20                	mov    $0x20,%al
c0002035:	e6 a0                	out    %al,$0xa0
c0002037:	e6 20                	out    %al,$0x20
c0002039:	6a 0d                	push   $0xd
c000203b:	ff 15 f4 ac 00 c0    	call   *0xc000acf4
c0002041:	e9 7a fe ff ff       	jmp    c0001ec0 <intr_exit>

c0002046 <intr0x0eentry>:
intr0x0eentry():
c0002046:	90                   	nop
c0002047:	1e                   	push   %ds
c0002048:	06                   	push   %es
c0002049:	0f a0                	push   %fs
c000204b:	0f a8                	push   %gs
c000204d:	60                   	pusha  
c000204e:	b0 20                	mov    $0x20,%al
c0002050:	e6 a0                	out    %al,$0xa0
c0002052:	e6 20                	out    %al,$0x20
c0002054:	6a 0e                	push   $0xe
c0002056:	ff 15 f8 ac 00 c0    	call   *0xc000acf8
c000205c:	e9 5f fe ff ff       	jmp    c0001ec0 <intr_exit>

c0002061 <intr0x0fentry>:
intr0x0fentry():
c0002061:	6a 00                	push   $0x0
c0002063:	1e                   	push   %ds
c0002064:	06                   	push   %es
c0002065:	0f a0                	push   %fs
c0002067:	0f a8                	push   %gs
c0002069:	60                   	pusha  
c000206a:	b0 20                	mov    $0x20,%al
c000206c:	e6 a0                	out    %al,$0xa0
c000206e:	e6 20                	out    %al,$0x20
c0002070:	6a 0f                	push   $0xf
c0002072:	ff 15 fc ac 00 c0    	call   *0xc000acfc
c0002078:	e9 43 fe ff ff       	jmp    c0001ec0 <intr_exit>

c000207d <intr0x10entry>:
intr0x10entry():
c000207d:	6a 00                	push   $0x0
c000207f:	1e                   	push   %ds
c0002080:	06                   	push   %es
c0002081:	0f a0                	push   %fs
c0002083:	0f a8                	push   %gs
c0002085:	60                   	pusha  
c0002086:	b0 20                	mov    $0x20,%al
c0002088:	e6 a0                	out    %al,$0xa0
c000208a:	e6 20                	out    %al,$0x20
c000208c:	6a 10                	push   $0x10
c000208e:	ff 15 00 ad 00 c0    	call   *0xc000ad00
c0002094:	e9 27 fe ff ff       	jmp    c0001ec0 <intr_exit>

c0002099 <intr0x11entry>:
intr0x11entry():
c0002099:	90                   	nop
c000209a:	1e                   	push   %ds
c000209b:	06                   	push   %es
c000209c:	0f a0                	push   %fs
c000209e:	0f a8                	push   %gs
c00020a0:	60                   	pusha  
c00020a1:	b0 20                	mov    $0x20,%al
c00020a3:	e6 a0                	out    %al,$0xa0
c00020a5:	e6 20                	out    %al,$0x20
c00020a7:	6a 11                	push   $0x11
c00020a9:	ff 15 04 ad 00 c0    	call   *0xc000ad04
c00020af:	e9 0c fe ff ff       	jmp    c0001ec0 <intr_exit>

c00020b4 <intr0x12entry>:
intr0x12entry():
c00020b4:	6a 00                	push   $0x0
c00020b6:	1e                   	push   %ds
c00020b7:	06                   	push   %es
c00020b8:	0f a0                	push   %fs
c00020ba:	0f a8                	push   %gs
c00020bc:	60                   	pusha  
c00020bd:	b0 20                	mov    $0x20,%al
c00020bf:	e6 a0                	out    %al,$0xa0
c00020c1:	e6 20                	out    %al,$0x20
c00020c3:	6a 12                	push   $0x12
c00020c5:	ff 15 08 ad 00 c0    	call   *0xc000ad08
c00020cb:	e9 f0 fd ff ff       	jmp    c0001ec0 <intr_exit>

c00020d0 <intr0x13entry>:
intr0x13entry():
c00020d0:	6a 00                	push   $0x0
c00020d2:	1e                   	push   %ds
c00020d3:	06                   	push   %es
c00020d4:	0f a0                	push   %fs
c00020d6:	0f a8                	push   %gs
c00020d8:	60                   	pusha  
c00020d9:	b0 20                	mov    $0x20,%al
c00020db:	e6 a0                	out    %al,$0xa0
c00020dd:	e6 20                	out    %al,$0x20
c00020df:	6a 13                	push   $0x13
c00020e1:	ff 15 0c ad 00 c0    	call   *0xc000ad0c
c00020e7:	e9 d4 fd ff ff       	jmp    c0001ec0 <intr_exit>

c00020ec <intr0x14entry>:
intr0x14entry():
c00020ec:	6a 00                	push   $0x0
c00020ee:	1e                   	push   %ds
c00020ef:	06                   	push   %es
c00020f0:	0f a0                	push   %fs
c00020f2:	0f a8                	push   %gs
c00020f4:	60                   	pusha  
c00020f5:	b0 20                	mov    $0x20,%al
c00020f7:	e6 a0                	out    %al,$0xa0
c00020f9:	e6 20                	out    %al,$0x20
c00020fb:	6a 14                	push   $0x14
c00020fd:	ff 15 10 ad 00 c0    	call   *0xc000ad10
c0002103:	e9 b8 fd ff ff       	jmp    c0001ec0 <intr_exit>

c0002108 <intr0x15entry>:
intr0x15entry():
c0002108:	6a 00                	push   $0x0
c000210a:	1e                   	push   %ds
c000210b:	06                   	push   %es
c000210c:	0f a0                	push   %fs
c000210e:	0f a8                	push   %gs
c0002110:	60                   	pusha  
c0002111:	b0 20                	mov    $0x20,%al
c0002113:	e6 a0                	out    %al,$0xa0
c0002115:	e6 20                	out    %al,$0x20
c0002117:	6a 15                	push   $0x15
c0002119:	ff 15 14 ad 00 c0    	call   *0xc000ad14
c000211f:	e9 9c fd ff ff       	jmp    c0001ec0 <intr_exit>

c0002124 <intr0x16entry>:
intr0x16entry():
c0002124:	6a 00                	push   $0x0
c0002126:	1e                   	push   %ds
c0002127:	06                   	push   %es
c0002128:	0f a0                	push   %fs
c000212a:	0f a8                	push   %gs
c000212c:	60                   	pusha  
c000212d:	b0 20                	mov    $0x20,%al
c000212f:	e6 a0                	out    %al,$0xa0
c0002131:	e6 20                	out    %al,$0x20
c0002133:	6a 16                	push   $0x16
c0002135:	ff 15 18 ad 00 c0    	call   *0xc000ad18
c000213b:	e9 80 fd ff ff       	jmp    c0001ec0 <intr_exit>

c0002140 <intr0x17entry>:
intr0x17entry():
c0002140:	6a 00                	push   $0x0
c0002142:	1e                   	push   %ds
c0002143:	06                   	push   %es
c0002144:	0f a0                	push   %fs
c0002146:	0f a8                	push   %gs
c0002148:	60                   	pusha  
c0002149:	b0 20                	mov    $0x20,%al
c000214b:	e6 a0                	out    %al,$0xa0
c000214d:	e6 20                	out    %al,$0x20
c000214f:	6a 17                	push   $0x17
c0002151:	ff 15 1c ad 00 c0    	call   *0xc000ad1c
c0002157:	e9 64 fd ff ff       	jmp    c0001ec0 <intr_exit>

c000215c <intr0x18entry>:
intr0x18entry():
c000215c:	90                   	nop
c000215d:	1e                   	push   %ds
c000215e:	06                   	push   %es
c000215f:	0f a0                	push   %fs
c0002161:	0f a8                	push   %gs
c0002163:	60                   	pusha  
c0002164:	b0 20                	mov    $0x20,%al
c0002166:	e6 a0                	out    %al,$0xa0
c0002168:	e6 20                	out    %al,$0x20
c000216a:	6a 18                	push   $0x18
c000216c:	ff 15 20 ad 00 c0    	call   *0xc000ad20
c0002172:	e9 49 fd ff ff       	jmp    c0001ec0 <intr_exit>

c0002177 <intr0x19entry>:
intr0x19entry():
c0002177:	6a 00                	push   $0x0
c0002179:	1e                   	push   %ds
c000217a:	06                   	push   %es
c000217b:	0f a0                	push   %fs
c000217d:	0f a8                	push   %gs
c000217f:	60                   	pusha  
c0002180:	b0 20                	mov    $0x20,%al
c0002182:	e6 a0                	out    %al,$0xa0
c0002184:	e6 20                	out    %al,$0x20
c0002186:	6a 19                	push   $0x19
c0002188:	ff 15 24 ad 00 c0    	call   *0xc000ad24
c000218e:	e9 2d fd ff ff       	jmp    c0001ec0 <intr_exit>

c0002193 <intr0x1aentry>:
intr0x1aentry():
c0002193:	90                   	nop
c0002194:	1e                   	push   %ds
c0002195:	06                   	push   %es
c0002196:	0f a0                	push   %fs
c0002198:	0f a8                	push   %gs
c000219a:	60                   	pusha  
c000219b:	b0 20                	mov    $0x20,%al
c000219d:	e6 a0                	out    %al,$0xa0
c000219f:	e6 20                	out    %al,$0x20
c00021a1:	6a 1a                	push   $0x1a
c00021a3:	ff 15 28 ad 00 c0    	call   *0xc000ad28
c00021a9:	e9 12 fd ff ff       	jmp    c0001ec0 <intr_exit>

c00021ae <intr0x1bentry>:
intr0x1bentry():
c00021ae:	90                   	nop
c00021af:	1e                   	push   %ds
c00021b0:	06                   	push   %es
c00021b1:	0f a0                	push   %fs
c00021b3:	0f a8                	push   %gs
c00021b5:	60                   	pusha  
c00021b6:	b0 20                	mov    $0x20,%al
c00021b8:	e6 a0                	out    %al,$0xa0
c00021ba:	e6 20                	out    %al,$0x20
c00021bc:	6a 1b                	push   $0x1b
c00021be:	ff 15 2c ad 00 c0    	call   *0xc000ad2c
c00021c4:	e9 f7 fc ff ff       	jmp    c0001ec0 <intr_exit>

c00021c9 <intr0x1centry>:
intr0x1centry():
c00021c9:	6a 00                	push   $0x0
c00021cb:	1e                   	push   %ds
c00021cc:	06                   	push   %es
c00021cd:	0f a0                	push   %fs
c00021cf:	0f a8                	push   %gs
c00021d1:	60                   	pusha  
c00021d2:	b0 20                	mov    $0x20,%al
c00021d4:	e6 a0                	out    %al,$0xa0
c00021d6:	e6 20                	out    %al,$0x20
c00021d8:	6a 1c                	push   $0x1c
c00021da:	ff 15 30 ad 00 c0    	call   *0xc000ad30
c00021e0:	e9 db fc ff ff       	jmp    c0001ec0 <intr_exit>

c00021e5 <intr0x1dentry>:
intr0x1dentry():
c00021e5:	90                   	nop
c00021e6:	1e                   	push   %ds
c00021e7:	06                   	push   %es
c00021e8:	0f a0                	push   %fs
c00021ea:	0f a8                	push   %gs
c00021ec:	60                   	pusha  
c00021ed:	b0 20                	mov    $0x20,%al
c00021ef:	e6 a0                	out    %al,$0xa0
c00021f1:	e6 20                	out    %al,$0x20
c00021f3:	6a 1d                	push   $0x1d
c00021f5:	ff 15 34 ad 00 c0    	call   *0xc000ad34
c00021fb:	e9 c0 fc ff ff       	jmp    c0001ec0 <intr_exit>

c0002200 <intr0x1eentry>:
intr0x1eentry():
c0002200:	90                   	nop
c0002201:	1e                   	push   %ds
c0002202:	06                   	push   %es
c0002203:	0f a0                	push   %fs
c0002205:	0f a8                	push   %gs
c0002207:	60                   	pusha  
c0002208:	b0 20                	mov    $0x20,%al
c000220a:	e6 a0                	out    %al,$0xa0
c000220c:	e6 20                	out    %al,$0x20
c000220e:	6a 1e                	push   $0x1e
c0002210:	ff 15 38 ad 00 c0    	call   *0xc000ad38
c0002216:	e9 a5 fc ff ff       	jmp    c0001ec0 <intr_exit>

c000221b <intr0x1fentry>:
intr0x1fentry():
c000221b:	6a 00                	push   $0x0
c000221d:	1e                   	push   %ds
c000221e:	06                   	push   %es
c000221f:	0f a0                	push   %fs
c0002221:	0f a8                	push   %gs
c0002223:	60                   	pusha  
c0002224:	b0 20                	mov    $0x20,%al
c0002226:	e6 a0                	out    %al,$0xa0
c0002228:	e6 20                	out    %al,$0x20
c000222a:	6a 1f                	push   $0x1f
c000222c:	ff 15 3c ad 00 c0    	call   *0xc000ad3c
c0002232:	e9 89 fc ff ff       	jmp    c0001ec0 <intr_exit>

c0002237 <intr0x20entry>:
intr0x20entry():
c0002237:	6a 00                	push   $0x0
c0002239:	1e                   	push   %ds
c000223a:	06                   	push   %es
c000223b:	0f a0                	push   %fs
c000223d:	0f a8                	push   %gs
c000223f:	60                   	pusha  
c0002240:	b0 20                	mov    $0x20,%al
c0002242:	e6 a0                	out    %al,$0xa0
c0002244:	e6 20                	out    %al,$0x20
c0002246:	6a 20                	push   $0x20
c0002248:	ff 15 40 ad 00 c0    	call   *0xc000ad40
c000224e:	e9 6d fc ff ff       	jmp    c0001ec0 <intr_exit>

c0002253 <intr0x21entry>:
intr0x21entry():
c0002253:	6a 00                	push   $0x0
c0002255:	1e                   	push   %ds
c0002256:	06                   	push   %es
c0002257:	0f a0                	push   %fs
c0002259:	0f a8                	push   %gs
c000225b:	60                   	pusha  
c000225c:	b0 20                	mov    $0x20,%al
c000225e:	e6 a0                	out    %al,$0xa0
c0002260:	e6 20                	out    %al,$0x20
c0002262:	6a 21                	push   $0x21
c0002264:	ff 15 44 ad 00 c0    	call   *0xc000ad44
c000226a:	e9 51 fc ff ff       	jmp    c0001ec0 <intr_exit>

c000226f <intr0x22entry>:
intr0x22entry():
c000226f:	6a 00                	push   $0x0
c0002271:	1e                   	push   %ds
c0002272:	06                   	push   %es
c0002273:	0f a0                	push   %fs
c0002275:	0f a8                	push   %gs
c0002277:	60                   	pusha  
c0002278:	b0 20                	mov    $0x20,%al
c000227a:	e6 a0                	out    %al,$0xa0
c000227c:	e6 20                	out    %al,$0x20
c000227e:	6a 22                	push   $0x22
c0002280:	ff 15 48 ad 00 c0    	call   *0xc000ad48
c0002286:	e9 35 fc ff ff       	jmp    c0001ec0 <intr_exit>

c000228b <intr0x23entry>:
intr0x23entry():
c000228b:	6a 00                	push   $0x0
c000228d:	1e                   	push   %ds
c000228e:	06                   	push   %es
c000228f:	0f a0                	push   %fs
c0002291:	0f a8                	push   %gs
c0002293:	60                   	pusha  
c0002294:	b0 20                	mov    $0x20,%al
c0002296:	e6 a0                	out    %al,$0xa0
c0002298:	e6 20                	out    %al,$0x20
c000229a:	6a 23                	push   $0x23
c000229c:	ff 15 4c ad 00 c0    	call   *0xc000ad4c
c00022a2:	e9 19 fc ff ff       	jmp    c0001ec0 <intr_exit>

c00022a7 <intr0x24entry>:
intr0x24entry():
c00022a7:	6a 00                	push   $0x0
c00022a9:	1e                   	push   %ds
c00022aa:	06                   	push   %es
c00022ab:	0f a0                	push   %fs
c00022ad:	0f a8                	push   %gs
c00022af:	60                   	pusha  
c00022b0:	b0 20                	mov    $0x20,%al
c00022b2:	e6 a0                	out    %al,$0xa0
c00022b4:	e6 20                	out    %al,$0x20
c00022b6:	6a 24                	push   $0x24
c00022b8:	ff 15 50 ad 00 c0    	call   *0xc000ad50
c00022be:	e9 fd fb ff ff       	jmp    c0001ec0 <intr_exit>

c00022c3 <intr0x25entry>:
intr0x25entry():
c00022c3:	6a 00                	push   $0x0
c00022c5:	1e                   	push   %ds
c00022c6:	06                   	push   %es
c00022c7:	0f a0                	push   %fs
c00022c9:	0f a8                	push   %gs
c00022cb:	60                   	pusha  
c00022cc:	b0 20                	mov    $0x20,%al
c00022ce:	e6 a0                	out    %al,$0xa0
c00022d0:	e6 20                	out    %al,$0x20
c00022d2:	6a 25                	push   $0x25
c00022d4:	ff 15 54 ad 00 c0    	call   *0xc000ad54
c00022da:	e9 e1 fb ff ff       	jmp    c0001ec0 <intr_exit>

c00022df <intr0x26entry>:
intr0x26entry():
c00022df:	6a 00                	push   $0x0
c00022e1:	1e                   	push   %ds
c00022e2:	06                   	push   %es
c00022e3:	0f a0                	push   %fs
c00022e5:	0f a8                	push   %gs
c00022e7:	60                   	pusha  
c00022e8:	b0 20                	mov    $0x20,%al
c00022ea:	e6 a0                	out    %al,$0xa0
c00022ec:	e6 20                	out    %al,$0x20
c00022ee:	6a 26                	push   $0x26
c00022f0:	ff 15 58 ad 00 c0    	call   *0xc000ad58
c00022f6:	e9 c5 fb ff ff       	jmp    c0001ec0 <intr_exit>

c00022fb <intr0x27entry>:
intr0x27entry():
c00022fb:	6a 00                	push   $0x0
c00022fd:	1e                   	push   %ds
c00022fe:	06                   	push   %es
c00022ff:	0f a0                	push   %fs
c0002301:	0f a8                	push   %gs
c0002303:	60                   	pusha  
c0002304:	b0 20                	mov    $0x20,%al
c0002306:	e6 a0                	out    %al,$0xa0
c0002308:	e6 20                	out    %al,$0x20
c000230a:	6a 27                	push   $0x27
c000230c:	ff 15 5c ad 00 c0    	call   *0xc000ad5c
c0002312:	e9 a9 fb ff ff       	jmp    c0001ec0 <intr_exit>

c0002317 <intr0x28entry>:
intr0x28entry():
c0002317:	6a 00                	push   $0x0
c0002319:	1e                   	push   %ds
c000231a:	06                   	push   %es
c000231b:	0f a0                	push   %fs
c000231d:	0f a8                	push   %gs
c000231f:	60                   	pusha  
c0002320:	b0 20                	mov    $0x20,%al
c0002322:	e6 a0                	out    %al,$0xa0
c0002324:	e6 20                	out    %al,$0x20
c0002326:	6a 28                	push   $0x28
c0002328:	ff 15 60 ad 00 c0    	call   *0xc000ad60
c000232e:	e9 8d fb ff ff       	jmp    c0001ec0 <intr_exit>

c0002333 <intr0x29entry>:
intr0x29entry():
c0002333:	6a 00                	push   $0x0
c0002335:	1e                   	push   %ds
c0002336:	06                   	push   %es
c0002337:	0f a0                	push   %fs
c0002339:	0f a8                	push   %gs
c000233b:	60                   	pusha  
c000233c:	b0 20                	mov    $0x20,%al
c000233e:	e6 a0                	out    %al,$0xa0
c0002340:	e6 20                	out    %al,$0x20
c0002342:	6a 29                	push   $0x29
c0002344:	ff 15 64 ad 00 c0    	call   *0xc000ad64
c000234a:	e9 71 fb ff ff       	jmp    c0001ec0 <intr_exit>

c000234f <intr0x2aentry>:
intr0x2aentry():
c000234f:	6a 00                	push   $0x0
c0002351:	1e                   	push   %ds
c0002352:	06                   	push   %es
c0002353:	0f a0                	push   %fs
c0002355:	0f a8                	push   %gs
c0002357:	60                   	pusha  
c0002358:	b0 20                	mov    $0x20,%al
c000235a:	e6 a0                	out    %al,$0xa0
c000235c:	e6 20                	out    %al,$0x20
c000235e:	6a 2a                	push   $0x2a
c0002360:	ff 15 68 ad 00 c0    	call   *0xc000ad68
c0002366:	e9 55 fb ff ff       	jmp    c0001ec0 <intr_exit>

c000236b <intr0x2bentry>:
intr0x2bentry():
c000236b:	6a 00                	push   $0x0
c000236d:	1e                   	push   %ds
c000236e:	06                   	push   %es
c000236f:	0f a0                	push   %fs
c0002371:	0f a8                	push   %gs
c0002373:	60                   	pusha  
c0002374:	b0 20                	mov    $0x20,%al
c0002376:	e6 a0                	out    %al,$0xa0
c0002378:	e6 20                	out    %al,$0x20
c000237a:	6a 2b                	push   $0x2b
c000237c:	ff 15 6c ad 00 c0    	call   *0xc000ad6c
c0002382:	e9 39 fb ff ff       	jmp    c0001ec0 <intr_exit>

c0002387 <intr0x2centry>:
intr0x2centry():
c0002387:	6a 00                	push   $0x0
c0002389:	1e                   	push   %ds
c000238a:	06                   	push   %es
c000238b:	0f a0                	push   %fs
c000238d:	0f a8                	push   %gs
c000238f:	60                   	pusha  
c0002390:	b0 20                	mov    $0x20,%al
c0002392:	e6 a0                	out    %al,$0xa0
c0002394:	e6 20                	out    %al,$0x20
c0002396:	6a 2c                	push   $0x2c
c0002398:	ff 15 70 ad 00 c0    	call   *0xc000ad70
c000239e:	e9 1d fb ff ff       	jmp    c0001ec0 <intr_exit>

c00023a3 <intr0x2dentry>:
intr0x2dentry():
c00023a3:	6a 00                	push   $0x0
c00023a5:	1e                   	push   %ds
c00023a6:	06                   	push   %es
c00023a7:	0f a0                	push   %fs
c00023a9:	0f a8                	push   %gs
c00023ab:	60                   	pusha  
c00023ac:	b0 20                	mov    $0x20,%al
c00023ae:	e6 a0                	out    %al,$0xa0
c00023b0:	e6 20                	out    %al,$0x20
c00023b2:	6a 2d                	push   $0x2d
c00023b4:	ff 15 74 ad 00 c0    	call   *0xc000ad74
c00023ba:	e9 01 fb ff ff       	jmp    c0001ec0 <intr_exit>

c00023bf <intr0x2eentry>:
intr0x2eentry():
c00023bf:	6a 00                	push   $0x0
c00023c1:	1e                   	push   %ds
c00023c2:	06                   	push   %es
c00023c3:	0f a0                	push   %fs
c00023c5:	0f a8                	push   %gs
c00023c7:	60                   	pusha  
c00023c8:	b0 20                	mov    $0x20,%al
c00023ca:	e6 a0                	out    %al,$0xa0
c00023cc:	e6 20                	out    %al,$0x20
c00023ce:	6a 2e                	push   $0x2e
c00023d0:	ff 15 78 ad 00 c0    	call   *0xc000ad78
c00023d6:	e9 e5 fa ff ff       	jmp    c0001ec0 <intr_exit>

c00023db <intr0x2fentry>:
intr0x2fentry():
c00023db:	6a 00                	push   $0x0
c00023dd:	1e                   	push   %ds
c00023de:	06                   	push   %es
c00023df:	0f a0                	push   %fs
c00023e1:	0f a8                	push   %gs
c00023e3:	60                   	pusha  
c00023e4:	b0 20                	mov    $0x20,%al
c00023e6:	e6 a0                	out    %al,$0xa0
c00023e8:	e6 20                	out    %al,$0x20
c00023ea:	6a 2f                	push   $0x2f
c00023ec:	ff 15 7c ad 00 c0    	call   *0xc000ad7c
c00023f2:	e9 c9 fa ff ff       	jmp    c0001ec0 <intr_exit>

c00023f7 <syscall_handler>:
syscall_handler():
c00023f7:	6a 00                	push   $0x0
c00023f9:	1e                   	push   %ds
c00023fa:	06                   	push   %es
c00023fb:	0f a0                	push   %fs
c00023fd:	0f a8                	push   %gs
c00023ff:	60                   	pusha  
c0002400:	68 80 00 00 00       	push   $0x80
c0002405:	52                   	push   %edx
c0002406:	51                   	push   %ecx
c0002407:	53                   	push   %ebx
c0002408:	ff 14 85 e0 b0 00 c0 	call   *-0x3fff4f20(,%eax,4)
c000240f:	83 c4 0c             	add    $0xc,%esp
c0002412:	89 44 24 20          	mov    %eax,0x20(%esp)
c0002416:	e9 a5 fa ff ff       	jmp    c0001ec0 <intr_exit>
c000241b:	66 90                	xchg   %ax,%ax
c000241d:	66 90                	xchg   %ax,%ax
c000241f:	90                   	nop

c0002420 <put_str>:
put_str():
c0002420:	53                   	push   %ebx
c0002421:	51                   	push   %ecx
c0002422:	31 c9                	xor    %ecx,%ecx
c0002424:	8b 5c 24 0c          	mov    0xc(%esp),%ebx

c0002428 <put_str.goon>:
put_str.goon():
c0002428:	8a 0b                	mov    (%ebx),%cl
c000242a:	80 f9 00             	cmp    $0x0,%cl
c000242d:	74 0c                	je     c000243b <put_str.str_over>
c000242f:	51                   	push   %ecx
c0002430:	e8 09 00 00 00       	call   c000243e <put_char>
c0002435:	83 c4 04             	add    $0x4,%esp
c0002438:	43                   	inc    %ebx
c0002439:	eb ed                	jmp    c0002428 <put_str.goon>

c000243b <put_str.str_over>:
put_str.str_over():
c000243b:	59                   	pop    %ecx
c000243c:	5b                   	pop    %ebx
c000243d:	c3                   	ret    

c000243e <put_char>:
put_char():
c000243e:	60                   	pusha  
c000243f:	66 b8 18 00          	mov    $0x18,%ax
c0002443:	8e e8                	mov    %eax,%gs
c0002445:	66 ba d4 03          	mov    $0x3d4,%dx
c0002449:	b0 0e                	mov    $0xe,%al
c000244b:	ee                   	out    %al,(%dx)
c000244c:	66 ba d5 03          	mov    $0x3d5,%dx
c0002450:	ec                   	in     (%dx),%al
c0002451:	88 c4                	mov    %al,%ah
c0002453:	66 ba d4 03          	mov    $0x3d4,%dx
c0002457:	b0 0f                	mov    $0xf,%al
c0002459:	ee                   	out    %al,(%dx)
c000245a:	66 ba d5 03          	mov    $0x3d5,%dx
c000245e:	ec                   	in     (%dx),%al
c000245f:	66 89 c3             	mov    %ax,%bx
c0002462:	8b 4c 24 24          	mov    0x24(%esp),%ecx
c0002466:	80 f9 0d             	cmp    $0xd,%cl
c0002469:	74 3c                	je     c00024a7 <put_char.is_carriage_return>
c000246b:	80 f9 0a             	cmp    $0xa,%cl
c000246e:	74 37                	je     c00024a7 <put_char.is_carriage_return>
c0002470:	80 f9 08             	cmp    $0x8,%cl
c0002473:	74 02                	je     c0002477 <put_char.is_backspace>
c0002475:	eb 16                	jmp    c000248d <put_char.put_other>

c0002477 <put_char.is_backspace>:
put_char.is_backspace():
c0002477:	66 4b                	dec    %bx
c0002479:	66 d1 e3             	shl    %bx
c000247c:	65 67 c6 07 20       	movb   $0x20,%gs:(%bx)
c0002481:	66 43                	inc    %bx
c0002483:	65 67 c6 07 07       	movb   $0x7,%gs:(%bx)
c0002488:	66 d1 eb             	shr    %bx
c000248b:	eb 60                	jmp    c00024ed <put_char.set_cursor>

c000248d <put_char.put_other>:
put_char.put_other():
c000248d:	66 d1 e3             	shl    %bx
c0002490:	65 67 88 0f          	mov    %cl,%gs:(%bx)
c0002494:	66 43                	inc    %bx
c0002496:	65 67 c6 07 07       	movb   $0x7,%gs:(%bx)
c000249b:	66 d1 eb             	shr    %bx
c000249e:	66 43                	inc    %bx
c00024a0:	66 81 fb d0 07       	cmp    $0x7d0,%bx
c00024a5:	7c 46                	jl     c00024ed <put_char.set_cursor>

c00024a7 <put_char.is_carriage_return>:
put_char.is_line_feed():
c00024a7:	66 31 d2             	xor    %dx,%dx
c00024aa:	66 89 d8             	mov    %bx,%ax
c00024ad:	66 be 50 00          	mov    $0x50,%si
c00024b1:	66 f7 f6             	div    %si
c00024b4:	66 29 d3             	sub    %dx,%bx

c00024b7 <put_char.is_carriage_return_end>:
put_char.is_carriage_return_end():
c00024b7:	66 83 c3 50          	add    $0x50,%bx
c00024bb:	66 81 fb d0 07       	cmp    $0x7d0,%bx

c00024c0 <put_char.is_line_feed_end>:
put_char.is_line_feed_end():
c00024c0:	7c 2b                	jl     c00024ed <put_char.set_cursor>

c00024c2 <put_char.roll_screen>:
put_char.roll_screen():
c00024c2:	fc                   	cld    
c00024c3:	b9 c0 03 00 00       	mov    $0x3c0,%ecx
c00024c8:	be a0 80 0b c0       	mov    $0xc00b80a0,%esi
c00024cd:	bf 00 80 0b c0       	mov    $0xc00b8000,%edi
c00024d2:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c00024d4:	bb 00 0f 00 00       	mov    $0xf00,%ebx
c00024d9:	b9 50 00 00 00       	mov    $0x50,%ecx

c00024de <put_char.cls>:
put_char.cls():
c00024de:	65 66 c7 03 20 07    	movw   $0x720,%gs:(%ebx)
c00024e4:	83 c3 02             	add    $0x2,%ebx
c00024e7:	e2 f5                	loop   c00024de <put_char.cls>
c00024e9:	66 bb 80 07          	mov    $0x780,%bx

c00024ed <put_char.set_cursor>:
put_char.set_cursor():
c00024ed:	66 ba d4 03          	mov    $0x3d4,%dx
c00024f1:	b0 0e                	mov    $0xe,%al
c00024f3:	ee                   	out    %al,(%dx)
c00024f4:	66 ba d5 03          	mov    $0x3d5,%dx
c00024f8:	88 f8                	mov    %bh,%al
c00024fa:	ee                   	out    %al,(%dx)
c00024fb:	66 ba d4 03          	mov    $0x3d4,%dx
c00024ff:	b0 0f                	mov    $0xf,%al
c0002501:	ee                   	out    %al,(%dx)
c0002502:	66 ba d5 03          	mov    $0x3d5,%dx
c0002506:	88 d8                	mov    %bl,%al
c0002508:	ee                   	out    %al,(%dx)

c0002509 <put_char.put_char_done>:
put_char.put_char_done():
c0002509:	61                   	popa   
c000250a:	c3                   	ret    

c000250b <put_int>:
put_int():
c000250b:	60                   	pusha  
c000250c:	89 e5                	mov    %esp,%ebp
c000250e:	8b 45 24             	mov    0x24(%ebp),%eax
c0002511:	89 c2                	mov    %eax,%edx
c0002513:	bf 07 00 00 00       	mov    $0x7,%edi
c0002518:	b9 08 00 00 00       	mov    $0x8,%ecx
c000251d:	bb 40 a5 00 c0       	mov    $0xc000a540,%ebx

c0002522 <put_int.16based_4bits>:
put_int.16based_4bits():
c0002522:	83 e2 0f             	and    $0xf,%edx
c0002525:	83 fa 09             	cmp    $0x9,%edx
c0002528:	7f 05                	jg     c000252f <put_int.is_A2F>
c000252a:	83 c2 30             	add    $0x30,%edx
c000252d:	eb 06                	jmp    c0002535 <put_int.store>

c000252f <put_int.is_A2F>:
put_int.is_A2F():
c000252f:	83 ea 0a             	sub    $0xa,%edx
c0002532:	83 c2 41             	add    $0x41,%edx

c0002535 <put_int.store>:
put_int.store():
c0002535:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
c0002538:	4f                   	dec    %edi
c0002539:	c1 e8 04             	shr    $0x4,%eax
c000253c:	89 c2                	mov    %eax,%edx
c000253e:	e2 e2                	loop   c0002522 <put_int.16based_4bits>

c0002540 <put_int.ready_to_print>:
put_int.ready_to_print():
c0002540:	47                   	inc    %edi

c0002541 <put_int.skip_prefix_0>:
put_int.skip_prefix_0():
c0002541:	83 ff 08             	cmp    $0x8,%edi
c0002544:	74 0f                	je     c0002555 <put_int.full0>

c0002546 <put_int.go_on_skip>:
put_int.go_on_skip():
c0002546:	8a 8f 40 a5 00 c0    	mov    -0x3fff5ac0(%edi),%cl
c000254c:	47                   	inc    %edi
c000254d:	80 f9 30             	cmp    $0x30,%cl
c0002550:	74 ef                	je     c0002541 <put_int.skip_prefix_0>
c0002552:	4f                   	dec    %edi
c0002553:	eb 02                	jmp    c0002557 <put_int.put_each_num>

c0002555 <put_int.full0>:
put_int.full0():
c0002555:	b1 30                	mov    $0x30,%cl

c0002557 <put_int.put_each_num>:
put_int.put_each_num():
c0002557:	51                   	push   %ecx
c0002558:	e8 e1 fe ff ff       	call   c000243e <put_char>
c000255d:	83 c4 04             	add    $0x4,%esp
c0002560:	47                   	inc    %edi
c0002561:	8a 8f 40 a5 00 c0    	mov    -0x3fff5ac0(%edi),%cl
c0002567:	83 ff 08             	cmp    $0x8,%edi
c000256a:	7c eb                	jl     c0002557 <put_int.put_each_num>
c000256c:	61                   	popa   
c000256d:	c3                   	ret    

c000256e <set_cursor>:
set_cursor():
c000256e:	60                   	pusha  
c000256f:	66 8b 5c 24 24       	mov    0x24(%esp),%bx
c0002574:	66 ba d4 03          	mov    $0x3d4,%dx
c0002578:	b0 0e                	mov    $0xe,%al
c000257a:	ee                   	out    %al,(%dx)
c000257b:	66 ba d5 03          	mov    $0x3d5,%dx
c000257f:	88 f8                	mov    %bh,%al
c0002581:	ee                   	out    %al,(%dx)
c0002582:	66 ba d4 03          	mov    $0x3d4,%dx
c0002586:	b0 0f                	mov    $0xf,%al
c0002588:	ee                   	out    %al,(%dx)
c0002589:	66 ba d5 03          	mov    $0x3d5,%dx
c000258d:	88 d8                	mov    %bl,%al
c000258f:	ee                   	out    %al,(%dx)
c0002590:	61                   	popa   
c0002591:	c3                   	ret    

c0002592 <panic_spin>:
panic_spin():
/work/x86_os_my/kernel/debug.c:10
/* 打印文件名,行号,函数名,条件并使程序悬停 */
void panic_spin(char* filename,	       \
	        int line,	       \
		const char* func,      \
		const char* condition) \
{
c0002592:	55                   	push   %ebp
c0002593:	89 e5                	mov    %esp,%ebp
c0002595:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/kernel/debug.c:11
   intr_disable();	// 因为有时候会单独调用panic_spin,所以在此处关中断。
c0002598:	e8 50 f6 ff ff       	call   c0001bed <intr_disable>
/work/x86_os_my/kernel/debug.c:12
   put_str("\n\n\n!!!!! error !!!!!\n");
c000259d:	83 ec 0c             	sub    $0xc,%esp
c00025a0:	68 34 72 00 c0       	push   $0xc0007234
c00025a5:	e8 76 fe ff ff       	call   c0002420 <put_str>
c00025aa:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/debug.c:13
   put_str("filename:");put_str(filename);put_str("\n");
c00025ad:	83 ec 0c             	sub    $0xc,%esp
c00025b0:	68 4a 72 00 c0       	push   $0xc000724a
c00025b5:	e8 66 fe ff ff       	call   c0002420 <put_str>
c00025ba:	83 c4 10             	add    $0x10,%esp
c00025bd:	83 ec 0c             	sub    $0xc,%esp
c00025c0:	ff 75 08             	pushl  0x8(%ebp)
c00025c3:	e8 58 fe ff ff       	call   c0002420 <put_str>
c00025c8:	83 c4 10             	add    $0x10,%esp
c00025cb:	83 ec 0c             	sub    $0xc,%esp
c00025ce:	68 54 72 00 c0       	push   $0xc0007254
c00025d3:	e8 48 fe ff ff       	call   c0002420 <put_str>
c00025d8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/debug.c:14
   put_str("line:0x");put_int(line);put_str("\n");
c00025db:	83 ec 0c             	sub    $0xc,%esp
c00025de:	68 56 72 00 c0       	push   $0xc0007256
c00025e3:	e8 38 fe ff ff       	call   c0002420 <put_str>
c00025e8:	83 c4 10             	add    $0x10,%esp
c00025eb:	8b 45 0c             	mov    0xc(%ebp),%eax
c00025ee:	83 ec 0c             	sub    $0xc,%esp
c00025f1:	50                   	push   %eax
c00025f2:	e8 14 ff ff ff       	call   c000250b <put_int>
c00025f7:	83 c4 10             	add    $0x10,%esp
c00025fa:	83 ec 0c             	sub    $0xc,%esp
c00025fd:	68 54 72 00 c0       	push   $0xc0007254
c0002602:	e8 19 fe ff ff       	call   c0002420 <put_str>
c0002607:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/debug.c:15
   put_str("function:");put_str((char*)func);put_str("\n");
c000260a:	83 ec 0c             	sub    $0xc,%esp
c000260d:	68 5e 72 00 c0       	push   $0xc000725e
c0002612:	e8 09 fe ff ff       	call   c0002420 <put_str>
c0002617:	83 c4 10             	add    $0x10,%esp
c000261a:	83 ec 0c             	sub    $0xc,%esp
c000261d:	ff 75 10             	pushl  0x10(%ebp)
c0002620:	e8 fb fd ff ff       	call   c0002420 <put_str>
c0002625:	83 c4 10             	add    $0x10,%esp
c0002628:	83 ec 0c             	sub    $0xc,%esp
c000262b:	68 54 72 00 c0       	push   $0xc0007254
c0002630:	e8 eb fd ff ff       	call   c0002420 <put_str>
c0002635:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/debug.c:16
   put_str("condition:");put_str((char*)condition);put_str("\n");
c0002638:	83 ec 0c             	sub    $0xc,%esp
c000263b:	68 68 72 00 c0       	push   $0xc0007268
c0002640:	e8 db fd ff ff       	call   c0002420 <put_str>
c0002645:	83 c4 10             	add    $0x10,%esp
c0002648:	83 ec 0c             	sub    $0xc,%esp
c000264b:	ff 75 14             	pushl  0x14(%ebp)
c000264e:	e8 cd fd ff ff       	call   c0002420 <put_str>
c0002653:	83 c4 10             	add    $0x10,%esp
c0002656:	83 ec 0c             	sub    $0xc,%esp
c0002659:	68 54 72 00 c0       	push   $0xc0007254
c000265e:	e8 bd fd ff ff       	call   c0002420 <put_str>
c0002663:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/debug.c:17 (discriminator 1)
   while(1);
c0002666:	eb fe                	jmp    c0002666 <panic_spin+0xd4>

c0002668 <bitmap_init>:
bitmap_init():
/work/x86_os_my/lib/kernel/bitmap.c:16
	uint8_t* bits;				位图空间
};
*/

/* 将位图btmp初始化 */
void bitmap_init(struct bitmap* btmp) {
c0002668:	55                   	push   %ebp
c0002669:	89 e5                	mov    %esp,%ebp
c000266b:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/lib/kernel/bitmap.c:17
	memset(btmp->bits, 0, btmp->btmp_bytes_len);   
c000266e:	8b 45 08             	mov    0x8(%ebp),%eax
c0002671:	8b 10                	mov    (%eax),%edx
c0002673:	8b 45 08             	mov    0x8(%ebp),%eax
c0002676:	8b 40 04             	mov    0x4(%eax),%eax
c0002679:	83 ec 04             	sub    $0x4,%esp
c000267c:	52                   	push   %edx
c000267d:	6a 00                	push   $0x0
c000267f:	50                   	push   %eax
c0002680:	e8 25 13 00 00       	call   c00039aa <memset>
c0002685:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/bitmap.c:18
}
c0002688:	90                   	nop
c0002689:	c9                   	leave  
c000268a:	c3                   	ret    

c000268b <bitmap_scan_test>:
bitmap_scan_test():
/work/x86_os_my/lib/kernel/bitmap.c:23

/* 判断bit_idx位是否为1
若为1则返回true
否则返回false */
bool bitmap_scan_test(struct bitmap* btmp, uint32_t bit_idx) {
c000268b:	55                   	push   %ebp
c000268c:	89 e5                	mov    %esp,%ebp
c000268e:	53                   	push   %ebx
c000268f:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/kernel/bitmap.c:24
	uint32_t byte_idx = bit_idx / 8;    // 向下取整用于索引数组下标
c0002692:	8b 45 0c             	mov    0xc(%ebp),%eax
c0002695:	c1 e8 03             	shr    $0x3,%eax
c0002698:	89 45 f8             	mov    %eax,-0x8(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:25
	uint32_t bit_odd  = bit_idx % 8;    // 取余用于索引数组内的位
c000269b:	8b 45 0c             	mov    0xc(%ebp),%eax
c000269e:	83 e0 07             	and    $0x7,%eax
c00026a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:26
	return (btmp->bits[byte_idx] & (BITMAP_MASK << bit_odd));
c00026a4:	8b 45 08             	mov    0x8(%ebp),%eax
c00026a7:	8b 50 04             	mov    0x4(%eax),%edx
c00026aa:	8b 45 f8             	mov    -0x8(%ebp),%eax
c00026ad:	01 d0                	add    %edx,%eax
c00026af:	0f b6 00             	movzbl (%eax),%eax
c00026b2:	0f b6 d0             	movzbl %al,%edx
c00026b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00026b8:	bb 01 00 00 00       	mov    $0x1,%ebx
c00026bd:	89 c1                	mov    %eax,%ecx
c00026bf:	d3 e3                	shl    %cl,%ebx
c00026c1:	89 d8                	mov    %ebx,%eax
c00026c3:	21 d0                	and    %edx,%eax
/work/x86_os_my/lib/kernel/bitmap.c:27
}
c00026c5:	83 c4 10             	add    $0x10,%esp
c00026c8:	5b                   	pop    %ebx
c00026c9:	5d                   	pop    %ebp
c00026ca:	c3                   	ret    

c00026cb <bitmap_scan>:
bitmap_scan():
/work/x86_os_my/lib/kernel/bitmap.c:32

/* 在位图中申请连续cnt个位
成功：返回其起始位下标
失败：返回-1 */
int bitmap_scan(struct bitmap* btmp, uint32_t cnt) {
c00026cb:	55                   	push   %ebp
c00026cc:	89 e5                	mov    %esp,%ebp
c00026ce:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/lib/kernel/bitmap.c:33
	uint32_t idx_byte = 0;	 // 用于记录空闲位所在的字节
c00026d1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:35
	/* 先逐字节比较,蛮力法 */
	while (( 0xff == btmp->bits[idx_byte]) && (idx_byte < btmp->btmp_bytes_len)) {
c00026d8:	eb 04                	jmp    c00026de <bitmap_scan+0x13>
/work/x86_os_my/lib/kernel/bitmap.c:37
		/* 1表示该位已分配,所以若为0xff,则表示该字节内已无空闲位,向下一字节继续找 */
		idx_byte++;
c00026da:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:35
成功：返回其起始位下标
失败：返回-1 */
int bitmap_scan(struct bitmap* btmp, uint32_t cnt) {
	uint32_t idx_byte = 0;	 // 用于记录空闲位所在的字节
	/* 先逐字节比较,蛮力法 */
	while (( 0xff == btmp->bits[idx_byte]) && (idx_byte < btmp->btmp_bytes_len)) {
c00026de:	8b 45 08             	mov    0x8(%ebp),%eax
c00026e1:	8b 50 04             	mov    0x4(%eax),%edx
c00026e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00026e7:	01 d0                	add    %edx,%eax
c00026e9:	0f b6 00             	movzbl (%eax),%eax
c00026ec:	3c ff                	cmp    $0xff,%al
c00026ee:	75 0a                	jne    c00026fa <bitmap_scan+0x2f>
/work/x86_os_my/lib/kernel/bitmap.c:35 (discriminator 1)
c00026f0:	8b 45 08             	mov    0x8(%ebp),%eax
c00026f3:	8b 00                	mov    (%eax),%eax
c00026f5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c00026f8:	77 e0                	ja     c00026da <bitmap_scan+0xf>
/work/x86_os_my/lib/kernel/bitmap.c:39
		/* 1表示该位已分配,所以若为0xff,则表示该字节内已无空闲位,向下一字节继续找 */
		idx_byte++;
	}
	ASSERT(idx_byte < btmp->btmp_bytes_len);	//这里应该是"<="
c00026fa:	8b 45 08             	mov    0x8(%ebp),%eax
c00026fd:	8b 00                	mov    (%eax),%eax
c00026ff:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0002702:	77 19                	ja     c000271d <bitmap_scan+0x52>
/work/x86_os_my/lib/kernel/bitmap.c:39 (discriminator 1)
c0002704:	68 74 72 00 c0       	push   $0xc0007274
c0002709:	68 c8 72 00 c0       	push   $0xc00072c8
c000270e:	6a 27                	push   $0x27
c0002710:	68 94 72 00 c0       	push   $0xc0007294
c0002715:	e8 78 fe ff ff       	call   c0002592 <panic_spin>
c000271a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/bitmap.c:40
	if (idx_byte == btmp->btmp_bytes_len) {		// 若该内存池找不到可用空间		
c000271d:	8b 45 08             	mov    0x8(%ebp),%eax
c0002720:	8b 00                	mov    (%eax),%eax
c0002722:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0002725:	75 0a                	jne    c0002731 <bitmap_scan+0x66>
/work/x86_os_my/lib/kernel/bitmap.c:41
		return -1;
c0002727:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000272c:	e9 cd 00 00 00       	jmp    c00027fe <bitmap_scan+0x133>
/work/x86_os_my/lib/kernel/bitmap.c:46
	}

	/* 若在位图数组范围内的某字节内找到了空闲位，
	 * 在该字节内逐位比对,返回空闲位的索引。*/
	int idx_bit = 0;
c0002731:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:48
	/* 和btmp->bits[idx_byte]这个字节逐位对比 */
	while ((uint8_t)(BITMAP_MASK << idx_bit) & btmp->bits[idx_byte]) { 
c0002738:	eb 04                	jmp    c000273e <bitmap_scan+0x73>
/work/x86_os_my/lib/kernel/bitmap.c:49
		idx_bit++;
c000273a:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:48

	/* 若在位图数组范围内的某字节内找到了空闲位，
	 * 在该字节内逐位比对,返回空闲位的索引。*/
	int idx_bit = 0;
	/* 和btmp->bits[idx_byte]这个字节逐位对比 */
	while ((uint8_t)(BITMAP_MASK << idx_bit) & btmp->bits[idx_byte]) { 
c000273e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002741:	ba 01 00 00 00       	mov    $0x1,%edx
c0002746:	89 c1                	mov    %eax,%ecx
c0002748:	d3 e2                	shl    %cl,%edx
c000274a:	89 d0                	mov    %edx,%eax
c000274c:	0f b6 d0             	movzbl %al,%edx
c000274f:	8b 45 08             	mov    0x8(%ebp),%eax
c0002752:	8b 48 04             	mov    0x4(%eax),%ecx
c0002755:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002758:	01 c8                	add    %ecx,%eax
c000275a:	0f b6 00             	movzbl (%eax),%eax
c000275d:	0f b6 c0             	movzbl %al,%eax
c0002760:	21 d0                	and    %edx,%eax
c0002762:	85 c0                	test   %eax,%eax
c0002764:	75 d4                	jne    c000273a <bitmap_scan+0x6f>
/work/x86_os_my/lib/kernel/bitmap.c:52
		idx_bit++;
	}
	
	int bit_idx_start = idx_byte * 8 + idx_bit;		// 空闲位在位图内的下标
c0002766:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002769:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0002770:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002773:	01 d0                	add    %edx,%eax
c0002775:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:53
	if (cnt == 1) {
c0002778:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c000277c:	75 05                	jne    c0002783 <bitmap_scan+0xb8>
/work/x86_os_my/lib/kernel/bitmap.c:54
		return bit_idx_start;
c000277e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002781:	eb 7b                	jmp    c00027fe <bitmap_scan+0x133>
/work/x86_os_my/lib/kernel/bitmap.c:57
	}

	uint32_t bit_left = (btmp->btmp_bytes_len * 8 - bit_idx_start);	// 记录还有多少位可以判断
c0002783:	8b 45 08             	mov    0x8(%ebp),%eax
c0002786:	8b 00                	mov    (%eax),%eax
c0002788:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c000278f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002792:	29 c2                	sub    %eax,%edx
c0002794:	89 d0                	mov    %edx,%eax
c0002796:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:58
	uint32_t next_bit = bit_idx_start + 1;
c0002799:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000279c:	83 c0 01             	add    $0x1,%eax
c000279f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:59
	uint32_t count = 1;			// 用于记录找到的空闲位的个数
c00027a2:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:61

	bit_idx_start = -1;			// 初始化为-1，若找不到连续的位就直接返回-1
c00027a9:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:62
	while (bit_left-- > 0) {
c00027b0:	eb 3c                	jmp    c00027ee <bitmap_scan+0x123>
/work/x86_os_my/lib/kernel/bitmap.c:63
		if (!(bitmap_scan_test(btmp, next_bit))) {	// 判断next_bit位是否为1,=1返回true，=0返回false
c00027b2:	83 ec 08             	sub    $0x8,%esp
c00027b5:	ff 75 e4             	pushl  -0x1c(%ebp)
c00027b8:	ff 75 08             	pushl  0x8(%ebp)
c00027bb:	e8 cb fe ff ff       	call   c000268b <bitmap_scan_test>
c00027c0:	83 c4 10             	add    $0x10,%esp
c00027c3:	85 c0                	test   %eax,%eax
c00027c5:	75 06                	jne    c00027cd <bitmap_scan+0x102>
/work/x86_os_my/lib/kernel/bitmap.c:64
			count++;
c00027c7:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
c00027cb:	eb 07                	jmp    c00027d4 <bitmap_scan+0x109>
/work/x86_os_my/lib/kernel/bitmap.c:66
		} else {
			count = 0;			// 重新从0找cnt个连续的bit
c00027cd:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:69
		}
		
		if (count == cnt) {		// 已找到连续的cnt个空位
c00027d4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00027d7:	3b 45 0c             	cmp    0xc(%ebp),%eax
c00027da:	75 0e                	jne    c00027ea <bitmap_scan+0x11f>
/work/x86_os_my/lib/kernel/bitmap.c:70
			bit_idx_start = next_bit - cnt + 1;
c00027dc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00027df:	2b 45 0c             	sub    0xc(%ebp),%eax
c00027e2:	83 c0 01             	add    $0x1,%eax
c00027e5:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:71
			break;
c00027e8:	eb 11                	jmp    c00027fb <bitmap_scan+0x130>
/work/x86_os_my/lib/kernel/bitmap.c:73
		}
		next_bit++;
c00027ea:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:62
	uint32_t bit_left = (btmp->btmp_bytes_len * 8 - bit_idx_start);	// 记录还有多少位可以判断
	uint32_t next_bit = bit_idx_start + 1;
	uint32_t count = 1;			// 用于记录找到的空闲位的个数

	bit_idx_start = -1;			// 初始化为-1，若找不到连续的位就直接返回-1
	while (bit_left-- > 0) {
c00027ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00027f1:	8d 50 ff             	lea    -0x1(%eax),%edx
c00027f4:	89 55 e8             	mov    %edx,-0x18(%ebp)
c00027f7:	85 c0                	test   %eax,%eax
c00027f9:	75 b7                	jne    c00027b2 <bitmap_scan+0xe7>
/work/x86_os_my/lib/kernel/bitmap.c:75
			bit_idx_start = next_bit - cnt + 1;
			break;
		}
		next_bit++;
	}
	return bit_idx_start;
c00027fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
/work/x86_os_my/lib/kernel/bitmap.c:76
}
c00027fe:	c9                   	leave  
c00027ff:	c3                   	ret    

c0002800 <bitmap_set>:
bitmap_set():
/work/x86_os_my/lib/kernel/bitmap.c:79

/* 将位图btmp的bit_idx位设置为value */
void bitmap_set(struct bitmap* btmp, uint32_t bit_idx, int8_t value) {
c0002800:	55                   	push   %ebp
c0002801:	89 e5                	mov    %esp,%ebp
c0002803:	56                   	push   %esi
c0002804:	53                   	push   %ebx
c0002805:	83 ec 20             	sub    $0x20,%esp
c0002808:	8b 45 10             	mov    0x10(%ebp),%eax
c000280b:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:80
	ASSERT((value == 0) || (value == 1));
c000280e:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c0002812:	74 1f                	je     c0002833 <bitmap_set+0x33>
/work/x86_os_my/lib/kernel/bitmap.c:80 (discriminator 1)
c0002814:	80 7d e4 01          	cmpb   $0x1,-0x1c(%ebp)
c0002818:	74 19                	je     c0002833 <bitmap_set+0x33>
/work/x86_os_my/lib/kernel/bitmap.c:80 (discriminator 2)
c000281a:	68 a8 72 00 c0       	push   $0xc00072a8
c000281f:	68 d4 72 00 c0       	push   $0xc00072d4
c0002824:	6a 50                	push   $0x50
c0002826:	68 94 72 00 c0       	push   $0xc0007294
c000282b:	e8 62 fd ff ff       	call   c0002592 <panic_spin>
c0002830:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/bitmap.c:81
	uint32_t byte_idx = bit_idx / 8;    // 向下取整用于索引数组下标
c0002833:	8b 45 0c             	mov    0xc(%ebp),%eax
c0002836:	c1 e8 03             	shr    $0x3,%eax
c0002839:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:82
	uint32_t bit_odd  = bit_idx % 8;    // 取余用于索引数组内的位
c000283c:	8b 45 0c             	mov    0xc(%ebp),%eax
c000283f:	83 e0 07             	and    $0x7,%eax
c0002842:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:86

	/* 一般都会用个0x1这样的数对字节中的位操作,
	* 将1任意移动后再取反,或者先取反再移位,可用来对位置0操作。*/
	if (value) {
c0002845:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c0002849:	74 2f                	je     c000287a <bitmap_set+0x7a>
/work/x86_os_my/lib/kernel/bitmap.c:87
		btmp->bits[byte_idx] |= (BITMAP_MASK << bit_odd);
c000284b:	8b 45 08             	mov    0x8(%ebp),%eax
c000284e:	8b 50 04             	mov    0x4(%eax),%edx
c0002851:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002854:	01 c2                	add    %eax,%edx
c0002856:	8b 45 08             	mov    0x8(%ebp),%eax
c0002859:	8b 48 04             	mov    0x4(%eax),%ecx
c000285c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000285f:	01 c8                	add    %ecx,%eax
c0002861:	0f b6 00             	movzbl (%eax),%eax
c0002864:	89 c6                	mov    %eax,%esi
c0002866:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002869:	bb 01 00 00 00       	mov    $0x1,%ebx
c000286e:	89 c1                	mov    %eax,%ecx
c0002870:	d3 e3                	shl    %cl,%ebx
c0002872:	89 d8                	mov    %ebx,%eax
c0002874:	09 f0                	or     %esi,%eax
c0002876:	88 02                	mov    %al,(%edx)
/work/x86_os_my/lib/kernel/bitmap.c:91
	} else {
		btmp->bits[byte_idx] &= ~(BITMAP_MASK << bit_odd);
	}
}
c0002878:	eb 2f                	jmp    c00028a9 <bitmap_set+0xa9>
/work/x86_os_my/lib/kernel/bitmap.c:89
	/* 一般都会用个0x1这样的数对字节中的位操作,
	* 将1任意移动后再取反,或者先取反再移位,可用来对位置0操作。*/
	if (value) {
		btmp->bits[byte_idx] |= (BITMAP_MASK << bit_odd);
	} else {
		btmp->bits[byte_idx] &= ~(BITMAP_MASK << bit_odd);
c000287a:	8b 45 08             	mov    0x8(%ebp),%eax
c000287d:	8b 50 04             	mov    0x4(%eax),%edx
c0002880:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002883:	01 c2                	add    %eax,%edx
c0002885:	8b 45 08             	mov    0x8(%ebp),%eax
c0002888:	8b 48 04             	mov    0x4(%eax),%ecx
c000288b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000288e:	01 c8                	add    %ecx,%eax
c0002890:	0f b6 00             	movzbl (%eax),%eax
c0002893:	89 c3                	mov    %eax,%ebx
c0002895:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002898:	be 01 00 00 00       	mov    $0x1,%esi
c000289d:	89 c1                	mov    %eax,%ecx
c000289f:	d3 e6                	shl    %cl,%esi
c00028a1:	89 f0                	mov    %esi,%eax
c00028a3:	f7 d0                	not    %eax
c00028a5:	21 d8                	and    %ebx,%eax
c00028a7:	88 02                	mov    %al,(%edx)
/work/x86_os_my/lib/kernel/bitmap.c:91
	}
}
c00028a9:	90                   	nop
c00028aa:	8d 65 f8             	lea    -0x8(%ebp),%esp
c00028ad:	5b                   	pop    %ebx
c00028ae:	5e                   	pop    %esi
c00028af:	5d                   	pop    %ebp
c00028b0:	c3                   	ret    

c00028b1 <vaddr_get>:
vaddr_get():
/work/x86_os_my/kernel/memory.c:66
struct pool kernel_pool, user_pool;		// 生成内核内存池和用户内存池
struct virtual_addr kernel_vaddr;		// 此结构是用来给内核分配虚拟地址

/* 在pf表示的虚拟内存池中申请pg_cnt个虚拟页,
 * 成功则返回虚拟页的起始地址, 失败则返回NULL */
static void* vaddr_get(enum pool_flags pf, uint32_t pg_cnt) {
c00028b1:	55                   	push   %ebp
c00028b2:	89 e5                	mov    %esp,%ebp
c00028b4:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:67
	int vaddr_start = 0, bit_idx_start = -1;
c00028b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c00028be:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:68
	uint32_t cnt = 0;
c00028c5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:69
	if (pf == PF_KERNEL) {
c00028cc:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c00028d0:	75 64                	jne    c0002936 <vaddr_get+0x85>
/work/x86_os_my/kernel/memory.c:71
		// 在位图中申请连续cnt个位 成功：返回其起始位下标
		bit_idx_start  = bitmap_scan(&kernel_vaddr.vaddr_bitmap, pg_cnt);
c00028d2:	83 ec 08             	sub    $0x8,%esp
c00028d5:	ff 75 0c             	pushl  0xc(%ebp)
c00028d8:	68 c8 af 00 c0       	push   $0xc000afc8
c00028dd:	e8 e9 fd ff ff       	call   c00026cb <bitmap_scan>
c00028e2:	83 c4 10             	add    $0x10,%esp
c00028e5:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:72
		if (bit_idx_start == -1) {	//失败
c00028e8:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%ebp)
c00028ec:	75 2b                	jne    c0002919 <vaddr_get+0x68>
/work/x86_os_my/kernel/memory.c:73
			return NULL;
c00028ee:	b8 00 00 00 00       	mov    $0x0,%eax
c00028f3:	e9 cd 00 00 00       	jmp    c00029c5 <vaddr_get+0x114>
/work/x86_os_my/kernel/memory.c:77
		}
		while(cnt < pg_cnt) {
			// 设置位图中的位，表示内存已被占用
			bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 1);
c00028f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00028fb:	8d 50 01             	lea    0x1(%eax),%edx
c00028fe:	89 55 f0             	mov    %edx,-0x10(%ebp)
c0002901:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0002904:	01 d0                	add    %edx,%eax
c0002906:	83 ec 04             	sub    $0x4,%esp
c0002909:	6a 01                	push   $0x1
c000290b:	50                   	push   %eax
c000290c:	68 c8 af 00 c0       	push   $0xc000afc8
c0002911:	e8 ea fe ff ff       	call   c0002800 <bitmap_set>
c0002916:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:75
		// 在位图中申请连续cnt个位 成功：返回其起始位下标
		bit_idx_start  = bitmap_scan(&kernel_vaddr.vaddr_bitmap, pg_cnt);
		if (bit_idx_start == -1) {	//失败
			return NULL;
		}
		while(cnt < pg_cnt) {
c0002919:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000291c:	3b 45 0c             	cmp    0xc(%ebp),%eax
c000291f:	72 d7                	jb     c00028f8 <vaddr_get+0x47>
/work/x86_os_my/kernel/memory.c:79
			// 设置位图中的位，表示内存已被占用
			bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 1);
		}
		vaddr_start = kernel_vaddr.vaddr_start + bit_idx_start * PG_SIZE;
c0002921:	a1 d0 af 00 c0       	mov    0xc000afd0,%eax
c0002926:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0002929:	c1 e2 0c             	shl    $0xc,%edx
c000292c:	01 d0                	add    %edx,%eax
c000292e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0002931:	e9 8c 00 00 00       	jmp    c00029c2 <vaddr_get+0x111>
/work/x86_os_my/kernel/memory.c:81
	} else {
		struct task_struct* cur = running_thread();
c0002936:	e8 56 14 00 00       	call   c0003d91 <running_thread>
c000293b:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:82
		bit_idx_start  = bitmap_scan(&cur->userprog_vaddr.vaddr_bitmap, pg_cnt);
c000293e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002941:	83 c0 38             	add    $0x38,%eax
c0002944:	83 ec 08             	sub    $0x8,%esp
c0002947:	ff 75 0c             	pushl  0xc(%ebp)
c000294a:	50                   	push   %eax
c000294b:	e8 7b fd ff ff       	call   c00026cb <bitmap_scan>
c0002950:	83 c4 10             	add    $0x10,%esp
c0002953:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:83
		if (bit_idx_start == -1) {
c0002956:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%ebp)
c000295a:	75 2a                	jne    c0002986 <vaddr_get+0xd5>
/work/x86_os_my/kernel/memory.c:84
			return NULL;
c000295c:	b8 00 00 00 00       	mov    $0x0,%eax
c0002961:	eb 62                	jmp    c00029c5 <vaddr_get+0x114>
/work/x86_os_my/kernel/memory.c:87
		}
		while(cnt < pg_cnt) {
			bitmap_set(&cur->userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 1);
c0002963:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002966:	8d 50 01             	lea    0x1(%eax),%edx
c0002969:	89 55 f0             	mov    %edx,-0x10(%ebp)
c000296c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c000296f:	01 c2                	add    %eax,%edx
c0002971:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002974:	83 c0 38             	add    $0x38,%eax
c0002977:	83 ec 04             	sub    $0x4,%esp
c000297a:	6a 01                	push   $0x1
c000297c:	52                   	push   %edx
c000297d:	50                   	push   %eax
c000297e:	e8 7d fe ff ff       	call   c0002800 <bitmap_set>
c0002983:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:86
		struct task_struct* cur = running_thread();
		bit_idx_start  = bitmap_scan(&cur->userprog_vaddr.vaddr_bitmap, pg_cnt);
		if (bit_idx_start == -1) {
			return NULL;
		}
		while(cnt < pg_cnt) {
c0002986:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002989:	3b 45 0c             	cmp    0xc(%ebp),%eax
c000298c:	72 d5                	jb     c0002963 <vaddr_get+0xb2>
/work/x86_os_my/kernel/memory.c:89
			bitmap_set(&cur->userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 1);
		}
		vaddr_start = cur->userprog_vaddr.vaddr_start + bit_idx_start * PG_SIZE;
c000298e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002991:	8b 40 40             	mov    0x40(%eax),%eax
c0002994:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0002997:	c1 e2 0c             	shl    $0xc,%edx
c000299a:	01 d0                	add    %edx,%eax
c000299c:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:92

		/* (0xc0000000 - PG_SIZE)做为用户3级栈已经在start_process被分配 */
		ASSERT((uint32_t)vaddr_start < (0xc0000000 - PG_SIZE));
c000299f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00029a2:	3d ff ef ff bf       	cmp    $0xbfffefff,%eax
c00029a7:	76 19                	jbe    c00029c2 <vaddr_get+0x111>
/work/x86_os_my/kernel/memory.c:92 (discriminator 1)
c00029a9:	68 e0 72 00 c0       	push   $0xc00072e0
c00029ae:	68 48 76 00 c0       	push   $0xc0007648
c00029b3:	6a 5c                	push   $0x5c
c00029b5:	68 0f 73 00 c0       	push   $0xc000730f
c00029ba:	e8 d3 fb ff ff       	call   c0002592 <panic_spin>
c00029bf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:95
		
	}
	return (void*)vaddr_start;
c00029c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/kernel/memory.c:96
}
c00029c5:	c9                   	leave  
c00029c6:	c3                   	ret    

c00029c7 <pte_ptr>:
pte_ptr():
/work/x86_os_my/kernel/memory.c:103
// 页表项 page table
/* 得到虚拟地址vaddr对应的pte指针*/
// 虚拟地址 vaddr 所在 pte 的"虚拟地址"!!!
// *pte 代表的是 pte 页表项的内容,
// 也就是 vaddr 最终所映射到的物理页框的 32 位地址中的高 20 位和 12 位的"页表项"属性
uint32_t* pte_ptr(uint32_t vaddr) {
c00029c7:	55                   	push   %ebp
c00029c8:	89 e5                	mov    %esp,%ebp
c00029ca:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/memory.c:108
	/* 先找到页目录表 + \
	* 再用vaddr的pde部分做为索引，找到某一个页表 + \
	* 再用vaddr的pte部分作为索引，找到某一个页表项*/
	uint32_t* pte = (uint32_t*)(0xffc00000 + \
					((vaddr & 0xffc00000) >> 10) + \
c00029cd:	8b 45 08             	mov    0x8(%ebp),%eax
c00029d0:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c00029d5:	c1 e8 0a             	shr    $0xa,%eax
c00029d8:	89 c2                	mov    %eax,%edx
/work/x86_os_my/kernel/memory.c:109
					PTE_IDX(vaddr) * 4);
c00029da:	8b 45 08             	mov    0x8(%ebp),%eax
c00029dd:	25 00 f0 3f 00       	and    $0x3ff000,%eax
c00029e2:	c1 e8 0c             	shr    $0xc,%eax
c00029e5:	c1 e0 02             	shl    $0x2,%eax
/work/x86_os_my/kernel/memory.c:108
uint32_t* pte_ptr(uint32_t vaddr) {
	/* 先找到页目录表 + \
	* 再用vaddr的pde部分做为索引，找到某一个页表 + \
	* 再用vaddr的pte部分作为索引，找到某一个页表项*/
	uint32_t* pte = (uint32_t*)(0xffc00000 + \
					((vaddr & 0xffc00000) >> 10) + \
c00029e8:	01 d0                	add    %edx,%eax
c00029ea:	2d 00 00 40 00       	sub    $0x400000,%eax
/work/x86_os_my/kernel/memory.c:107
// 也就是 vaddr 最终所映射到的物理页框的 32 位地址中的高 20 位和 12 位的"页表项"属性
uint32_t* pte_ptr(uint32_t vaddr) {
	/* 先找到页目录表 + \
	* 再用vaddr的pde部分做为索引，找到某一个页表 + \
	* 再用vaddr的pte部分作为索引，找到某一个页表项*/
	uint32_t* pte = (uint32_t*)(0xffc00000 + \
c00029ef:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/kernel/memory.c:110
					((vaddr & 0xffc00000) >> 10) + \
					PTE_IDX(vaddr) * 4);
	return pte;
c00029f2:	8b 45 fc             	mov    -0x4(%ebp),%eax
/work/x86_os_my/kernel/memory.c:111
}
c00029f5:	c9                   	leave  
c00029f6:	c3                   	ret    

c00029f7 <pde_ptr>:
pde_ptr():
/work/x86_os_my/kernel/memory.c:118
// 页目录表项 page Directory table entry
/* 得到虚拟地址vaddr对应的pde的指针 */
// 虚拟地址 vaddr 所在 pde 的"虚拟地址"!!!
// *pde 代表的是 pde 页目录项的内容
// 也就是 vaddr 最终所映射到的物理页框的 32 位地址中的高 20 位和 12 位的"页目录项"属性
uint32_t* pde_ptr(uint32_t vaddr) {
c00029f7:	55                   	push   %ebp
c00029f8:	89 e5                	mov    %esp,%ebp
c00029fa:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/memory.c:120
	/* 0xfffff是用来访问到页目录表本身所在的地址 */
	uint32_t* pde = (uint32_t*)((0xfffff000) + PDE_IDX(vaddr) * 4);
c00029fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0002a00:	c1 e8 16             	shr    $0x16,%eax
c0002a03:	05 00 fc ff 3f       	add    $0x3ffffc00,%eax
c0002a08:	c1 e0 02             	shl    $0x2,%eax
c0002a0b:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/kernel/memory.c:121
	return pde;
c0002a0e:	8b 45 fc             	mov    -0x4(%ebp),%eax
/work/x86_os_my/kernel/memory.c:122
}
c0002a11:	c9                   	leave  
c0002a12:	c3                   	ret    

c0002a13 <palloc>:
palloc():
/work/x86_os_my/kernel/memory.c:126

/* 在m_pool指向的物理内存池中分配1个物理页,
 * 成功则返回页框的物理地址,失败则返回NULL */
static void* palloc(struct pool* m_pool) {
c0002a13:	55                   	push   %ebp
c0002a14:	89 e5                	mov    %esp,%ebp
c0002a16:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:128
	/* 扫描或设置位图要保证原子操作 */
	int bit_idx = bitmap_scan(&m_pool->pool_bitmap, 1);    // 找一个物理页面
c0002a19:	8b 45 08             	mov    0x8(%ebp),%eax
c0002a1c:	83 ec 08             	sub    $0x8,%esp
c0002a1f:	6a 01                	push   $0x1
c0002a21:	50                   	push   %eax
c0002a22:	e8 a4 fc ff ff       	call   c00026cb <bitmap_scan>
c0002a27:	83 c4 10             	add    $0x10,%esp
c0002a2a:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:129
	if (bit_idx == -1 ) {
c0002a2d:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c0002a31:	75 07                	jne    c0002a3a <palloc+0x27>
/work/x86_os_my/kernel/memory.c:130
		return NULL;
c0002a33:	b8 00 00 00 00       	mov    $0x0,%eax
c0002a38:	eb 2b                	jmp    c0002a65 <palloc+0x52>
/work/x86_os_my/kernel/memory.c:132
	}
	bitmap_set(&m_pool->pool_bitmap, bit_idx, 1);	// 将此位bit_idx置1
c0002a3a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0002a3d:	8b 45 08             	mov    0x8(%ebp),%eax
c0002a40:	83 ec 04             	sub    $0x4,%esp
c0002a43:	6a 01                	push   $0x1
c0002a45:	52                   	push   %edx
c0002a46:	50                   	push   %eax
c0002a47:	e8 b4 fd ff ff       	call   c0002800 <bitmap_set>
c0002a4c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:133
	uint32_t page_phyaddr = ((bit_idx * PG_SIZE) + m_pool->phy_addr_start);
c0002a4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002a52:	c1 e0 0c             	shl    $0xc,%eax
c0002a55:	89 c2                	mov    %eax,%edx
c0002a57:	8b 45 08             	mov    0x8(%ebp),%eax
c0002a5a:	8b 40 08             	mov    0x8(%eax),%eax
c0002a5d:	01 d0                	add    %edx,%eax
c0002a5f:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:134
	return (void*)page_phyaddr;
c0002a62:	8b 45 f0             	mov    -0x10(%ebp),%eax
/work/x86_os_my/kernel/memory.c:135
}
c0002a65:	c9                   	leave  
c0002a66:	c3                   	ret    

c0002a67 <page_table_add>:
page_table_add():
/work/x86_os_my/kernel/memory.c:138

/* 页表中添加虚拟地址_vaddr与物理地址_page_phyaddr的映射 */
static void page_table_add(void* _vaddr, void* _page_phyaddr) {
c0002a67:	55                   	push   %ebp
c0002a68:	89 e5                	mov    %esp,%ebp
c0002a6a:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/kernel/memory.c:139
	uint32_t vaddr = (uint32_t)_vaddr, page_phyaddr = (uint32_t)_page_phyaddr;
c0002a6d:	8b 45 08             	mov    0x8(%ebp),%eax
c0002a70:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0002a73:	8b 45 0c             	mov    0xc(%ebp),%eax
c0002a76:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:140
	uint32_t* pde = pde_ptr(vaddr);	//变量pde是虚拟地址!!!
c0002a79:	ff 75 f4             	pushl  -0xc(%ebp)
c0002a7c:	e8 76 ff ff ff       	call   c00029f7 <pde_ptr>
c0002a81:	83 c4 04             	add    $0x4,%esp
c0002a84:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:141
	uint32_t* pte = pte_ptr(vaddr);	//变量pte是虚拟地址!!!
c0002a87:	ff 75 f4             	pushl  -0xc(%ebp)
c0002a8a:	e8 38 ff ff ff       	call   c00029c7 <pte_ptr>
c0002a8f:	83 c4 04             	add    $0x4,%esp
c0002a92:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:149
	* pde页目录项 pte页表项
	* 执行*pte可能会访问到空的pde。所以确保pde创建完成后才能执行*pte，否则会引发page_fault。
	* 因此在*pde为0时，*pte只能出现在下面else语句块中的*pde后面。
	* *********************************************************/
	/* 先在页目录内判断目录项的P位，若为1,则表示该表已存在 */
	if (*pde & 0x00000001) {			// 页目录项 存在
c0002a95:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002a98:	8b 00                	mov    (%eax),%eax
c0002a9a:	83 e0 01             	and    $0x1,%eax
c0002a9d:	85 c0                	test   %eax,%eax
c0002a9f:	74 64                	je     c0002b05 <page_table_add+0x9e>
/work/x86_os_my/kernel/memory.c:150
		ASSERT(!(*pte & 0x00000001));	// 页表项不存在才能往下执行，否则panic
c0002aa1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002aa4:	8b 00                	mov    (%eax),%eax
c0002aa6:	83 e0 01             	and    $0x1,%eax
c0002aa9:	85 c0                	test   %eax,%eax
c0002aab:	74 1c                	je     c0002ac9 <page_table_add+0x62>
/work/x86_os_my/kernel/memory.c:150 (discriminator 1)
c0002aad:	68 1f 73 00 c0       	push   $0xc000731f
c0002ab2:	68 54 76 00 c0       	push   $0xc0007654
c0002ab7:	68 96 00 00 00       	push   $0x96
c0002abc:	68 0f 73 00 c0       	push   $0xc000730f
c0002ac1:	e8 cc fa ff ff       	call   c0002592 <panic_spin>
c0002ac6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:152

		if (!(*pte & 0x00000001)) {		// 页表项pte不存在，创建PTE
c0002ac9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002acc:	8b 00                	mov    (%eax),%eax
c0002ace:	83 e0 01             	and    $0x1,%eax
c0002ad1:	85 c0                	test   %eax,%eax
c0002ad3:	75 12                	jne    c0002ae7 <page_table_add+0x80>
/work/x86_os_my/kernel/memory.c:153
			*pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);		// 物理地址 | US=1,RW=1,P=1
c0002ad5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002ad8:	83 c8 07             	or     $0x7,%eax
c0002adb:	89 c2                	mov    %eax,%edx
c0002add:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002ae0:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/kernel/memory.c:173
		memset((void*)((int)pte & 0xfffff000), 0, PG_SIZE);

		ASSERT(!(*pte & 0x00000001));	// 页表项不存在才能往下执行，否则panic
		*pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);			// 物理地址 | US=1,RW=1,P=1
	}
}
c0002ae2:	e9 8e 00 00 00       	jmp    c0002b75 <page_table_add+0x10e>
/work/x86_os_my/kernel/memory.c:155
		ASSERT(!(*pte & 0x00000001));	// 页表项不存在才能往下执行，否则panic

		if (!(*pte & 0x00000001)) {		// 页表项pte不存在，创建PTE
			*pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);		// 物理地址 | US=1,RW=1,P=1
		} else {						// 不会执行到这，因为上面的ASSERT
			PANIC("pte repeat");
c0002ae7:	68 34 73 00 c0       	push   $0xc0007334
c0002aec:	68 54 76 00 c0       	push   $0xc0007654
c0002af1:	68 9b 00 00 00       	push   $0x9b
c0002af6:	68 0f 73 00 c0       	push   $0xc000730f
c0002afb:	e8 92 fa ff ff       	call   c0002592 <panic_spin>
c0002b00:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:173
		memset((void*)((int)pte & 0xfffff000), 0, PG_SIZE);

		ASSERT(!(*pte & 0x00000001));	// 页表项不存在才能往下执行，否则panic
		*pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);			// 物理地址 | US=1,RW=1,P=1
	}
}
c0002b03:	eb 70                	jmp    c0002b75 <page_table_add+0x10e>
/work/x86_os_my/kernel/memory.c:159
		} else {						// 不会执行到这，因为上面的ASSERT
			PANIC("pte repeat");
		}
	} else {							// 页目录项不存在，先创建页目录，再创建页表项
		/* 页表中用到的页一律从内核空间分配 */
		uint32_t pde_phyaddr = (uint32_t)palloc(&kernel_pool);
c0002b05:	83 ec 0c             	sub    $0xc,%esp
c0002b08:	68 e0 af 00 c0       	push   $0xc000afe0
c0002b0d:	e8 01 ff ff ff       	call   c0002a13 <palloc>
c0002b12:	83 c4 10             	add    $0x10,%esp
c0002b15:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/kernel/memory.c:160
		*pde = (pde_phyaddr | PG_US_U | PG_RW_W | PG_P_1);			// 注意这行是pde_phyaddr，不是page_phyaddr!!!
c0002b18:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0002b1b:	83 c8 07             	or     $0x7,%eax
c0002b1e:	89 c2                	mov    %eax,%edx
c0002b20:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002b23:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/kernel/memory.c:168
		 * 访问物理地址 pde_phyaddr，需要找到它的虚拟地址！
		 * 只要用_vaddr的 PTE 取高20位即可。
		   搞得这么难理解，其实就是0xffc00000找到页目录表，然后加上vaddr的PDE在页目录表中的索引
		   (uint32_t*)(0xffc00000 + ((vaddr & 0xffc00000) >> 10))
		 */
		memset((void*)((int)pte & 0xfffff000), 0, PG_SIZE);
c0002b25:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002b28:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0002b2d:	83 ec 04             	sub    $0x4,%esp
c0002b30:	68 00 10 00 00       	push   $0x1000
c0002b35:	6a 00                	push   $0x0
c0002b37:	50                   	push   %eax
c0002b38:	e8 6d 0e 00 00       	call   c00039aa <memset>
c0002b3d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:170

		ASSERT(!(*pte & 0x00000001));	// 页表项不存在才能往下执行，否则panic
c0002b40:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002b43:	8b 00                	mov    (%eax),%eax
c0002b45:	83 e0 01             	and    $0x1,%eax
c0002b48:	85 c0                	test   %eax,%eax
c0002b4a:	74 1c                	je     c0002b68 <page_table_add+0x101>
/work/x86_os_my/kernel/memory.c:170 (discriminator 1)
c0002b4c:	68 1f 73 00 c0       	push   $0xc000731f
c0002b51:	68 54 76 00 c0       	push   $0xc0007654
c0002b56:	68 aa 00 00 00       	push   $0xaa
c0002b5b:	68 0f 73 00 c0       	push   $0xc000730f
c0002b60:	e8 2d fa ff ff       	call   c0002592 <panic_spin>
c0002b65:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:171
		*pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);			// 物理地址 | US=1,RW=1,P=1
c0002b68:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002b6b:	83 c8 07             	or     $0x7,%eax
c0002b6e:	89 c2                	mov    %eax,%edx
c0002b70:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002b73:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/kernel/memory.c:173
	}
}
c0002b75:	90                   	nop
c0002b76:	c9                   	leave  
c0002b77:	c3                   	ret    

c0002b78 <malloc_page>:
malloc_page():
/work/x86_os_my/kernel/memory.c:176

/* 分配pg_cnt个页空间,成功则返回起始虚拟地址,失败时返回NULL */
void* malloc_page(enum pool_flags pf, uint32_t pg_cnt) {
c0002b78:	55                   	push   %ebp
c0002b79:	89 e5                	mov    %esp,%ebp
c0002b7b:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/kernel/memory.c:177
	ASSERT(pg_cnt > 0 && pg_cnt < 3840);
c0002b7e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0002b82:	74 09                	je     c0002b8d <malloc_page+0x15>
/work/x86_os_my/kernel/memory.c:177 (discriminator 1)
c0002b84:	81 7d 0c ff 0e 00 00 	cmpl   $0xeff,0xc(%ebp)
c0002b8b:	76 1c                	jbe    c0002ba9 <malloc_page+0x31>
/work/x86_os_my/kernel/memory.c:177 (discriminator 3)
c0002b8d:	68 3f 73 00 c0       	push   $0xc000733f
c0002b92:	68 64 76 00 c0       	push   $0xc0007664
c0002b97:	68 b1 00 00 00       	push   $0xb1
c0002b9c:	68 0f 73 00 c0       	push   $0xc000730f
c0002ba1:	e8 ec f9 ff ff       	call   c0002592 <panic_spin>
c0002ba6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:183
	/***********   malloc_page的原理是三个动作的合成:   ***********
		1 通过vaddr_get在虚拟内存池中申请虚拟地址
		2 通过palloc在物理内存池中申请物理页
		3 通过page_table_add将以上得到的虚拟地址和物理地址在页表中完成映射
	***************************************************************/
	void* vaddr_start = vaddr_get(pf, pg_cnt);
c0002ba9:	83 ec 08             	sub    $0x8,%esp
c0002bac:	ff 75 0c             	pushl  0xc(%ebp)
c0002baf:	ff 75 08             	pushl  0x8(%ebp)
c0002bb2:	e8 fa fc ff ff       	call   c00028b1 <vaddr_get>
c0002bb7:	83 c4 10             	add    $0x10,%esp
c0002bba:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:184
	if (vaddr_start == NULL) {
c0002bbd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0002bc1:	75 07                	jne    c0002bca <malloc_page+0x52>
/work/x86_os_my/kernel/memory.c:185
		return NULL;
c0002bc3:	b8 00 00 00 00       	mov    $0x0,%eax
c0002bc8:	eb 6e                	jmp    c0002c38 <malloc_page+0xc0>
/work/x86_os_my/kernel/memory.c:188
	}

	uint32_t vaddr = (uint32_t)vaddr_start, cnt = pg_cnt;
c0002bca:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002bcd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0002bd0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0002bd3:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:189
	struct pool* mem_pool = pf & PF_KERNEL ? &kernel_pool : &user_pool;
c0002bd6:	8b 45 08             	mov    0x8(%ebp),%eax
c0002bd9:	83 e0 01             	and    $0x1,%eax
c0002bdc:	85 c0                	test   %eax,%eax
c0002bde:	74 07                	je     c0002be7 <malloc_page+0x6f>
/work/x86_os_my/kernel/memory.c:189 (discriminator 1)
c0002be0:	b8 e0 af 00 c0       	mov    $0xc000afe0,%eax
c0002be5:	eb 05                	jmp    c0002bec <malloc_page+0x74>
/work/x86_os_my/kernel/memory.c:189 (discriminator 2)
c0002be7:	b8 e0 ae 00 c0       	mov    $0xc000aee0,%eax
/work/x86_os_my/kernel/memory.c:189 (discriminator 4)
c0002bec:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:192 (discriminator 4)

	/* 因为虚拟地址是连续的,但物理地址可以是不连续的,所以逐个做映射*/
	while (cnt-- > 0) {
c0002bef:	eb 37                	jmp    c0002c28 <malloc_page+0xb0>
/work/x86_os_my/kernel/memory.c:193
		void* page_phyaddr = palloc(mem_pool);
c0002bf1:	83 ec 0c             	sub    $0xc,%esp
c0002bf4:	ff 75 e8             	pushl  -0x18(%ebp)
c0002bf7:	e8 17 fe ff ff       	call   c0002a13 <palloc>
c0002bfc:	83 c4 10             	add    $0x10,%esp
c0002bff:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/kernel/memory.c:194
		if (page_phyaddr == NULL) {  // 失败时要将曾经已申请的虚拟地址和物理页全部回滚，在将来完成内存回收时再补充
c0002c02:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0002c06:	75 07                	jne    c0002c0f <malloc_page+0x97>
/work/x86_os_my/kernel/memory.c:195
			return NULL;
c0002c08:	b8 00 00 00 00       	mov    $0x0,%eax
c0002c0d:	eb 29                	jmp    c0002c38 <malloc_page+0xc0>
/work/x86_os_my/kernel/memory.c:197
		}
		page_table_add((void*)vaddr, page_phyaddr); // 在页表中做映射 
c0002c0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002c12:	83 ec 08             	sub    $0x8,%esp
c0002c15:	ff 75 e4             	pushl  -0x1c(%ebp)
c0002c18:	50                   	push   %eax
c0002c19:	e8 49 fe ff ff       	call   c0002a67 <page_table_add>
c0002c1e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:198
		vaddr += PG_SIZE;		 // 下一个虚拟页
c0002c21:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:192

	uint32_t vaddr = (uint32_t)vaddr_start, cnt = pg_cnt;
	struct pool* mem_pool = pf & PF_KERNEL ? &kernel_pool : &user_pool;

	/* 因为虚拟地址是连续的,但物理地址可以是不连续的,所以逐个做映射*/
	while (cnt-- > 0) {
c0002c28:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002c2b:	8d 50 ff             	lea    -0x1(%eax),%edx
c0002c2e:	89 55 f0             	mov    %edx,-0x10(%ebp)
c0002c31:	85 c0                	test   %eax,%eax
c0002c33:	75 bc                	jne    c0002bf1 <malloc_page+0x79>
/work/x86_os_my/kernel/memory.c:200
			return NULL;
		}
		page_table_add((void*)vaddr, page_phyaddr); // 在页表中做映射 
		vaddr += PG_SIZE;		 // 下一个虚拟页
	}
	return vaddr_start;
c0002c35:	8b 45 ec             	mov    -0x14(%ebp),%eax
/work/x86_os_my/kernel/memory.c:201
}
c0002c38:	c9                   	leave  
c0002c39:	c3                   	ret    

c0002c3a <get_kernel_pages>:
get_kernel_pages():
/work/x86_os_my/kernel/memory.c:204

/* 从内核物理内存池中申请pg_cnt页内存,成功则返回其虚拟地址,失败则返回NULL */
void* get_kernel_pages(uint32_t pg_cnt) {
c0002c3a:	55                   	push   %ebp
c0002c3b:	89 e5                	mov    %esp,%ebp
c0002c3d:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:205
	lock_acquire(&kernel_pool.lock);
c0002c40:	83 ec 0c             	sub    $0xc,%esp
c0002c43:	68 f0 af 00 c0       	push   $0xc000aff0
c0002c48:	e8 92 1c 00 00       	call   c00048df <lock_acquire>
c0002c4d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:206
	void* vaddr =  malloc_page(PF_KERNEL, pg_cnt);
c0002c50:	83 ec 08             	sub    $0x8,%esp
c0002c53:	ff 75 08             	pushl  0x8(%ebp)
c0002c56:	6a 01                	push   $0x1
c0002c58:	e8 1b ff ff ff       	call   c0002b78 <malloc_page>
c0002c5d:	83 c4 10             	add    $0x10,%esp
c0002c60:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:207
	if (vaddr != NULL) {
c0002c63:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0002c67:	74 17                	je     c0002c80 <get_kernel_pages+0x46>
/work/x86_os_my/kernel/memory.c:208
		memset(vaddr, 0, pg_cnt * PG_SIZE);
c0002c69:	8b 45 08             	mov    0x8(%ebp),%eax
c0002c6c:	c1 e0 0c             	shl    $0xc,%eax
c0002c6f:	83 ec 04             	sub    $0x4,%esp
c0002c72:	50                   	push   %eax
c0002c73:	6a 00                	push   $0x0
c0002c75:	ff 75 f4             	pushl  -0xc(%ebp)
c0002c78:	e8 2d 0d 00 00       	call   c00039aa <memset>
c0002c7d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:210
	}
	lock_release(&kernel_pool.lock);
c0002c80:	83 ec 0c             	sub    $0xc,%esp
c0002c83:	68 f0 af 00 c0       	push   $0xc000aff0
c0002c88:	e8 c9 1c 00 00       	call   c0004956 <lock_release>
c0002c8d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:211
	return vaddr;
c0002c90:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/kernel/memory.c:212
}
c0002c93:	c9                   	leave  
c0002c94:	c3                   	ret    

c0002c95 <get_user_pages>:
get_user_pages():
/work/x86_os_my/kernel/memory.c:215

/* 在用户空间中申请4k内存,并返回其虚拟地址 */
void* get_user_pages(uint32_t pg_cnt) {
c0002c95:	55                   	push   %ebp
c0002c96:	89 e5                	mov    %esp,%ebp
c0002c98:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:216
	lock_acquire(&user_pool.lock);
c0002c9b:	83 ec 0c             	sub    $0xc,%esp
c0002c9e:	68 f0 ae 00 c0       	push   $0xc000aef0
c0002ca3:	e8 37 1c 00 00       	call   c00048df <lock_acquire>
c0002ca8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:217
	void* vaddr = malloc_page(PF_USER, pg_cnt);
c0002cab:	83 ec 08             	sub    $0x8,%esp
c0002cae:	ff 75 08             	pushl  0x8(%ebp)
c0002cb1:	6a 02                	push   $0x2
c0002cb3:	e8 c0 fe ff ff       	call   c0002b78 <malloc_page>
c0002cb8:	83 c4 10             	add    $0x10,%esp
c0002cbb:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:218
	if (vaddr != NULL) {
c0002cbe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0002cc2:	74 17                	je     c0002cdb <get_user_pages+0x46>
/work/x86_os_my/kernel/memory.c:219
		memset(vaddr, 0, pg_cnt * PG_SIZE);
c0002cc4:	8b 45 08             	mov    0x8(%ebp),%eax
c0002cc7:	c1 e0 0c             	shl    $0xc,%eax
c0002cca:	83 ec 04             	sub    $0x4,%esp
c0002ccd:	50                   	push   %eax
c0002cce:	6a 00                	push   $0x0
c0002cd0:	ff 75 f4             	pushl  -0xc(%ebp)
c0002cd3:	e8 d2 0c 00 00       	call   c00039aa <memset>
c0002cd8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:221
	}
	lock_release(&user_pool.lock);
c0002cdb:	83 ec 0c             	sub    $0xc,%esp
c0002cde:	68 f0 ae 00 c0       	push   $0xc000aef0
c0002ce3:	e8 6e 1c 00 00       	call   c0004956 <lock_release>
c0002ce8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:222
	return vaddr;
c0002ceb:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/kernel/memory.c:223
}
c0002cee:	c9                   	leave  
c0002cef:	c3                   	ret    

c0002cf0 <get_a_page>:
get_a_page():
/work/x86_os_my/kernel/memory.c:227

/* 将虚拟地址vaddr与pf池中的物理地址关联,仅支持一页空间分配
 * 功能是，可以指定虚拟地址的内存分配 */
void* get_a_page(enum pool_flags pf, uint32_t vaddr) {
c0002cf0:	55                   	push   %ebp
c0002cf1:	89 e5                	mov    %esp,%ebp
c0002cf3:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:228
	struct pool* mem_pool = pf & PF_KERNEL ? &kernel_pool : &user_pool;
c0002cf6:	8b 45 08             	mov    0x8(%ebp),%eax
c0002cf9:	83 e0 01             	and    $0x1,%eax
c0002cfc:	85 c0                	test   %eax,%eax
c0002cfe:	74 07                	je     c0002d07 <get_a_page+0x17>
/work/x86_os_my/kernel/memory.c:228 (discriminator 1)
c0002d00:	b8 e0 af 00 c0       	mov    $0xc000afe0,%eax
c0002d05:	eb 05                	jmp    c0002d0c <get_a_page+0x1c>
/work/x86_os_my/kernel/memory.c:228 (discriminator 2)
c0002d07:	b8 e0 ae 00 c0       	mov    $0xc000aee0,%eax
/work/x86_os_my/kernel/memory.c:228 (discriminator 4)
c0002d0c:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:229 (discriminator 4)
	lock_acquire(&mem_pool->lock);
c0002d0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002d12:	83 c0 10             	add    $0x10,%eax
c0002d15:	83 ec 0c             	sub    $0xc,%esp
c0002d18:	50                   	push   %eax
c0002d19:	e8 c1 1b 00 00       	call   c00048df <lock_acquire>
c0002d1e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:232 (discriminator 4)

	/* 先将虚拟地址对应的位图置1 */
	struct task_struct* cur = running_thread();
c0002d21:	e8 6b 10 00 00       	call   c0003d91 <running_thread>
c0002d26:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:233 (discriminator 4)
	int32_t bit_idx = -1;
c0002d29:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:235 (discriminator 4)

	if (cur->pgdir != NULL && pf == PF_USER) {
c0002d30:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002d33:	8b 40 34             	mov    0x34(%eax),%eax
c0002d36:	85 c0                	test   %eax,%eax
c0002d38:	74 55                	je     c0002d8f <get_a_page+0x9f>
/work/x86_os_my/kernel/memory.c:235 (discriminator 1)
c0002d3a:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c0002d3e:	75 4f                	jne    c0002d8f <get_a_page+0x9f>
/work/x86_os_my/kernel/memory.c:237
		/* 若当前是用户进程申请用户内存,就修改用户进程自己的虚拟地址池的 位图 */
		bit_idx = (vaddr - cur->userprog_vaddr.vaddr_start) / PG_SIZE;
c0002d40:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002d43:	8b 40 40             	mov    0x40(%eax),%eax
c0002d46:	8b 55 0c             	mov    0xc(%ebp),%edx
c0002d49:	29 c2                	sub    %eax,%edx
c0002d4b:	89 d0                	mov    %edx,%eax
c0002d4d:	c1 e8 0c             	shr    $0xc,%eax
c0002d50:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:238
		ASSERT(bit_idx > 0);
c0002d53:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0002d57:	7f 1c                	jg     c0002d75 <get_a_page+0x85>
/work/x86_os_my/kernel/memory.c:238 (discriminator 1)
c0002d59:	68 5b 73 00 c0       	push   $0xc000735b
c0002d5e:	68 70 76 00 c0       	push   $0xc0007670
c0002d63:	68 ee 00 00 00       	push   $0xee
c0002d68:	68 0f 73 00 c0       	push   $0xc000730f
c0002d6d:	e8 20 f8 ff ff       	call   c0002592 <panic_spin>
c0002d72:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:239
		bitmap_set(&cur->userprog_vaddr.vaddr_bitmap, bit_idx, 1);
c0002d75:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002d78:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0002d7b:	83 c2 38             	add    $0x38,%edx
c0002d7e:	83 ec 04             	sub    $0x4,%esp
c0002d81:	6a 01                	push   $0x1
c0002d83:	50                   	push   %eax
c0002d84:	52                   	push   %edx
c0002d85:	e8 76 fa ff ff       	call   c0002800 <bitmap_set>
c0002d8a:	83 c4 10             	add    $0x10,%esp
c0002d8d:	eb 78                	jmp    c0002e07 <get_a_page+0x117>
/work/x86_os_my/kernel/memory.c:241

	} else if (cur->pgdir == NULL && pf == PF_KERNEL) {
c0002d8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002d92:	8b 40 34             	mov    0x34(%eax),%eax
c0002d95:	85 c0                	test   %eax,%eax
c0002d97:	75 52                	jne    c0002deb <get_a_page+0xfb>
/work/x86_os_my/kernel/memory.c:241 (discriminator 1)
c0002d99:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c0002d9d:	75 4c                	jne    c0002deb <get_a_page+0xfb>
/work/x86_os_my/kernel/memory.c:243
		/* 如果是内核线程申请内核内存,就修改 kernel_vaddr */
		bit_idx = (vaddr - kernel_vaddr.vaddr_start) / PG_SIZE;
c0002d9f:	a1 d0 af 00 c0       	mov    0xc000afd0,%eax
c0002da4:	8b 55 0c             	mov    0xc(%ebp),%edx
c0002da7:	29 c2                	sub    %eax,%edx
c0002da9:	89 d0                	mov    %edx,%eax
c0002dab:	c1 e8 0c             	shr    $0xc,%eax
c0002dae:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:244
		ASSERT(bit_idx > 0);
c0002db1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0002db5:	7f 1c                	jg     c0002dd3 <get_a_page+0xe3>
/work/x86_os_my/kernel/memory.c:244 (discriminator 1)
c0002db7:	68 5b 73 00 c0       	push   $0xc000735b
c0002dbc:	68 70 76 00 c0       	push   $0xc0007670
c0002dc1:	68 f4 00 00 00       	push   $0xf4
c0002dc6:	68 0f 73 00 c0       	push   $0xc000730f
c0002dcb:	e8 c2 f7 ff ff       	call   c0002592 <panic_spin>
c0002dd0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:245
		bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx, 1);
c0002dd3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002dd6:	83 ec 04             	sub    $0x4,%esp
c0002dd9:	6a 01                	push   $0x1
c0002ddb:	50                   	push   %eax
c0002ddc:	68 c8 af 00 c0       	push   $0xc000afc8
c0002de1:	e8 1a fa ff ff       	call   c0002800 <bitmap_set>
c0002de6:	83 c4 10             	add    $0x10,%esp
c0002de9:	eb 1c                	jmp    c0002e07 <get_a_page+0x117>
/work/x86_os_my/kernel/memory.c:248

	} else {
		PANIC("get_a_page:not allow kernel alloc userspace or user alloc kernelspace by get_a_page");
c0002deb:	68 68 73 00 c0       	push   $0xc0007368
c0002df0:	68 70 76 00 c0       	push   $0xc0007670
c0002df5:	68 f8 00 00 00       	push   $0xf8
c0002dfa:	68 0f 73 00 c0       	push   $0xc000730f
c0002dff:	e8 8e f7 ff ff       	call   c0002592 <panic_spin>
c0002e04:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:251
	}

	void* page_phyaddr = palloc(mem_pool);
c0002e07:	83 ec 0c             	sub    $0xc,%esp
c0002e0a:	ff 75 f4             	pushl  -0xc(%ebp)
c0002e0d:	e8 01 fc ff ff       	call   c0002a13 <palloc>
c0002e12:	83 c4 10             	add    $0x10,%esp
c0002e15:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:252
	if (page_phyaddr == NULL) {
c0002e18:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0002e1c:	75 19                	jne    c0002e37 <get_a_page+0x147>
/work/x86_os_my/kernel/memory.c:253
		lock_release(&mem_pool->lock);	//哈哈
c0002e1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002e21:	83 c0 10             	add    $0x10,%eax
c0002e24:	83 ec 0c             	sub    $0xc,%esp
c0002e27:	50                   	push   %eax
c0002e28:	e8 29 1b 00 00       	call   c0004956 <lock_release>
c0002e2d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:254
		return NULL;
c0002e30:	b8 00 00 00 00       	mov    $0x0,%eax
c0002e35:	eb 27                	jmp    c0002e5e <get_a_page+0x16e>
/work/x86_os_my/kernel/memory.c:256
	}
	page_table_add((void*)vaddr, page_phyaddr);
c0002e37:	8b 45 0c             	mov    0xc(%ebp),%eax
c0002e3a:	83 ec 08             	sub    $0x8,%esp
c0002e3d:	ff 75 e8             	pushl  -0x18(%ebp)
c0002e40:	50                   	push   %eax
c0002e41:	e8 21 fc ff ff       	call   c0002a67 <page_table_add>
c0002e46:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:258
	
	lock_release(&mem_pool->lock);
c0002e49:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002e4c:	83 c0 10             	add    $0x10,%eax
c0002e4f:	83 ec 0c             	sub    $0xc,%esp
c0002e52:	50                   	push   %eax
c0002e53:	e8 fe 1a 00 00       	call   c0004956 <lock_release>
c0002e58:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:259
	return (void*)vaddr;
c0002e5b:	8b 45 0c             	mov    0xc(%ebp),%eax
/work/x86_os_my/kernel/memory.c:260
}
c0002e5e:	c9                   	leave  
c0002e5f:	c3                   	ret    

c0002e60 <addr_v2p>:
addr_v2p():
/work/x86_os_my/kernel/memory.c:263

/* 得到虚拟地址映射到的物理地址 */
uint32_t addr_v2p(uint32_t vaddr) {
c0002e60:	55                   	push   %ebp
c0002e61:	89 e5                	mov    %esp,%ebp
c0002e63:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/memory.c:264
	uint32_t* pte = pte_ptr(vaddr);
c0002e66:	ff 75 08             	pushl  0x8(%ebp)
c0002e69:	e8 59 fb ff ff       	call   c00029c7 <pte_ptr>
c0002e6e:	83 c4 04             	add    $0x4,%esp
c0002e71:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/kernel/memory.c:268
	/* (*pte)的内容是 vaddr 所在 pte 的内容，也就是 vaddr 最终所映射到的物理页框的 32 位地址中的高 20 位和 12 位的页表项属性，
	 * 因为页框都是自然页，低 12 位地址是 0，所以页表项 pte（和页目录项 pde）中只需要记录页框的高 20 位地址即可。
	 */
	return ((*pte & 0xfffff000) + (vaddr & 0x00000fff));
c0002e74:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0002e77:	8b 00                	mov    (%eax),%eax
c0002e79:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0002e7e:	89 c2                	mov    %eax,%edx
c0002e80:	8b 45 08             	mov    0x8(%ebp),%eax
c0002e83:	25 ff 0f 00 00       	and    $0xfff,%eax
c0002e88:	01 d0                	add    %edx,%eax
/work/x86_os_my/kernel/memory.c:269
}
c0002e8a:	c9                   	leave  
c0002e8b:	c3                   	ret    

c0002e8c <arena2block>:
arena2block():
/work/x86_os_my/kernel/memory.c:283
|                     |
| +-----------------+ |
+-+  mem_block_desc |←+
  +-----------------+
*/
static struct mem_block* arena2block(struct arena* a, uint32_t idx) {
c0002e8c:	55                   	push   %ebp
c0002e8d:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/kernel/memory.c:284
	return (struct mem_block*)((uint32_t)a + sizeof(struct arena) + idx * a->desc->block_size);
c0002e8f:	8b 45 08             	mov    0x8(%ebp),%eax
c0002e92:	8b 00                	mov    (%eax),%eax
c0002e94:	8b 00                	mov    (%eax),%eax
c0002e96:	0f af 45 0c          	imul   0xc(%ebp),%eax
c0002e9a:	89 c2                	mov    %eax,%edx
c0002e9c:	8b 45 08             	mov    0x8(%ebp),%eax
c0002e9f:	01 d0                	add    %edx,%eax
c0002ea1:	83 c0 0c             	add    $0xc,%eax
/work/x86_os_my/kernel/memory.c:285
}
c0002ea4:	5d                   	pop    %ebp
c0002ea5:	c3                   	ret    

c0002ea6 <block2arena>:
block2arena():
/work/x86_os_my/kernel/memory.c:290

/* 返回内存块mem_block所在的arena地址
 * 取到了虚拟地址mem_block那一整页的地址
 */
static struct arena* block2arena(struct mem_block* b) {
c0002ea6:	55                   	push   %ebp
c0002ea7:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/kernel/memory.c:291
	return (struct arena*)((uint32_t)b & 0xfffff000);
c0002ea9:	8b 45 08             	mov    0x8(%ebp),%eax
c0002eac:	25 00 f0 ff ff       	and    $0xfffff000,%eax
/work/x86_os_my/kernel/memory.c:292
}
c0002eb1:	5d                   	pop    %ebp
c0002eb2:	c3                   	ret    

c0002eb3 <sys_malloc>:
sys_malloc():
/work/x86_os_my/kernel/memory.c:303
 * 3.内存块地址被返回给用户后，用户可以自由使用此内存块 mem_block
 *   会把此内存块中的 list_elem 型变量 free_elem 覆盖
 *   不过 arena->mem_block_desc->free_list 中的元素已经记录了 mem_block->list_elem 的地址
 *   使用时覆盖的，只是 mem_block 的内容。
 */
void* sys_malloc(uint32_t size) {
c0002eb3:	55                   	push   %ebp
c0002eb4:	89 e5                	mov    %esp,%ebp
c0002eb6:	83 ec 38             	sub    $0x38,%esp
/work/x86_os_my/kernel/memory.c:308
	enum pool_flags PF;
	struct pool* mem_pool;
	uint32_t pool_size;
	struct mem_block_desc* descs;
	struct task_struct* cur_thread = running_thread();
c0002eb9:	e8 d3 0e 00 00       	call   c0003d91 <running_thread>
c0002ebe:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/kernel/memory.c:311

	/* 判断用哪个内存池*/
	if (cur_thread->pgdir == NULL) {	// 是内核线程
c0002ec1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0002ec4:	8b 40 34             	mov    0x34(%eax),%eax
c0002ec7:	85 c0                	test   %eax,%eax
c0002ec9:	75 1f                	jne    c0002eea <sys_malloc+0x37>
/work/x86_os_my/kernel/memory.c:312
		PF = PF_KERNEL;
c0002ecb:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:313
		pool_size = kernel_pool.pool_size;
c0002ed2:	a1 ec af 00 c0       	mov    0xc000afec,%eax
c0002ed7:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:314
		mem_pool = &kernel_pool;
c0002eda:	c7 45 f0 e0 af 00 c0 	movl   $0xc000afe0,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:315
		descs = k_block_descs;
c0002ee1:	c7 45 e8 20 af 00 c0 	movl   $0xc000af20,-0x18(%ebp)
c0002ee8:	eb 1f                	jmp    c0002f09 <sys_malloc+0x56>
/work/x86_os_my/kernel/memory.c:317
	} else {							// 用户进程pcb中的pgdir（页目录表）会在为其分配页表时创建【create_page_dir】
		PF = PF_USER;
c0002eea:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:318
		pool_size = user_pool.pool_size;
c0002ef1:	a1 ec ae 00 c0       	mov    0xc000aeec,%eax
c0002ef6:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:319
		mem_pool = &user_pool;
c0002ef9:	c7 45 f0 e0 ae 00 c0 	movl   $0xc000aee0,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:320
		descs = cur_thread->u_block_desc;
c0002f00:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0002f03:	83 c0 44             	add    $0x44,%eax
c0002f06:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:324
	}

	/* 若申请的内存不在内存池容量范围内则直接返回NULL */
	if (!(size > 0 && size < pool_size)) {
c0002f09:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0002f0d:	74 08                	je     c0002f17 <sys_malloc+0x64>
/work/x86_os_my/kernel/memory.c:324 (discriminator 1)
c0002f0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0002f12:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0002f15:	72 0a                	jb     c0002f21 <sys_malloc+0x6e>
/work/x86_os_my/kernel/memory.c:325
		return NULL;
c0002f17:	b8 00 00 00 00       	mov    $0x0,%eax
c0002f1c:	e9 c5 02 00 00       	jmp    c00031e6 <sys_malloc+0x333>
/work/x86_os_my/kernel/memory.c:330
	}

	struct arena* a;
	struct mem_block* b;
	lock_acquire(&mem_pool->lock);
c0002f21:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002f24:	83 c0 10             	add    $0x10,%eax
c0002f27:	83 ec 0c             	sub    $0xc,%esp
c0002f2a:	50                   	push   %eax
c0002f2b:	e8 af 19 00 00       	call   c00048df <lock_acquire>
c0002f30:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:333

	/* 超过最大内存块1024, 就分配页框 */
	if (size > 1024) {
c0002f33:	81 7d 08 00 04 00 00 	cmpl   $0x400,0x8(%ebp)
c0002f3a:	0f 86 94 00 00 00    	jbe    c0002fd4 <sys_malloc+0x121>
/work/x86_os_my/kernel/memory.c:334
		uint32_t page_cnt = DIV_ROUND_UP(size + sizeof(struct arena), PG_SIZE);	// 向上取整需要的页框数
c0002f40:	8b 45 08             	mov    0x8(%ebp),%eax
c0002f43:	05 0b 10 00 00       	add    $0x100b,%eax
c0002f48:	c1 e8 0c             	shr    $0xc,%eax
c0002f4b:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/kernel/memory.c:336

		a = malloc_page(PF, page_cnt);
c0002f4e:	83 ec 08             	sub    $0x8,%esp
c0002f51:	ff 75 d8             	pushl  -0x28(%ebp)
c0002f54:	ff 75 f4             	pushl  -0xc(%ebp)
c0002f57:	e8 1c fc ff ff       	call   c0002b78 <malloc_page>
c0002f5c:	83 c4 10             	add    $0x10,%esp
c0002f5f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/kernel/memory.c:337
		if (a != NULL) {
c0002f62:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0002f66:	74 50                	je     c0002fb8 <sys_malloc+0x105>
/work/x86_os_my/kernel/memory.c:338
			memset(a, 0, page_cnt * PG_SIZE);
c0002f68:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0002f6b:	c1 e0 0c             	shl    $0xc,%eax
c0002f6e:	83 ec 04             	sub    $0x4,%esp
c0002f71:	50                   	push   %eax
c0002f72:	6a 00                	push   $0x0
c0002f74:	ff 75 d4             	pushl  -0x2c(%ebp)
c0002f77:	e8 2e 0a 00 00       	call   c00039aa <memset>
c0002f7c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:342

			// 【arena结构体初始化，情况1】
			/* 对于分配的大块页框,将desc置为NULL, cnt置为页框数, large置为true */
			a->desc = NULL;
c0002f7f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002f82:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/kernel/memory.c:343
			a->cnt = page_cnt;
c0002f88:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002f8b:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0002f8e:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/kernel/memory.c:344
			a->large = true;
c0002f91:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002f94:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/kernel/memory.c:346

			lock_release(&mem_pool->lock);
c0002f9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002f9e:	83 c0 10             	add    $0x10,%eax
c0002fa1:	83 ec 0c             	sub    $0xc,%esp
c0002fa4:	50                   	push   %eax
c0002fa5:	e8 ac 19 00 00       	call   c0004956 <lock_release>
c0002faa:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:347
			return (void*)(a + 1);	// 跨过arena大小，把剩下的内存返回
c0002fad:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002fb0:	83 c0 0c             	add    $0xc,%eax
c0002fb3:	e9 2e 02 00 00       	jmp    c00031e6 <sys_malloc+0x333>
/work/x86_os_my/kernel/memory.c:349
		} else {
			lock_release(&mem_pool->lock);
c0002fb8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002fbb:	83 c0 10             	add    $0x10,%eax
c0002fbe:	83 ec 0c             	sub    $0xc,%esp
c0002fc1:	50                   	push   %eax
c0002fc2:	e8 8f 19 00 00       	call   c0004956 <lock_release>
c0002fc7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:350
			return NULL;
c0002fca:	b8 00 00 00 00       	mov    $0x0,%eax
c0002fcf:	e9 12 02 00 00       	jmp    c00031e6 <sys_malloc+0x333>
/work/x86_os_my/kernel/memory.c:358
	} else {
	/* 若申请的内存小于等于1024,可在各种规格的mem_block_desc中去适配 */
		uint8_t desc_idx;

		/* 从内存块描述符中匹配合适的内存块规格 */
		for (desc_idx = 0; desc_idx < DESC_CNT; desc_idx++) {
c0002fd4:	c6 45 e7 00          	movb   $0x0,-0x19(%ebp)
c0002fd8:	eb 25                	jmp    c0002fff <sys_malloc+0x14c>
/work/x86_os_my/kernel/memory.c:359
			if (size <= descs[desc_idx].block_size) {	// 从小往大后,找到后退出
c0002fda:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0002fde:	89 d0                	mov    %edx,%eax
c0002fe0:	01 c0                	add    %eax,%eax
c0002fe2:	01 d0                	add    %edx,%eax
c0002fe4:	c1 e0 03             	shl    $0x3,%eax
c0002fe7:	89 c2                	mov    %eax,%edx
c0002fe9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002fec:	01 d0                	add    %edx,%eax
c0002fee:	8b 00                	mov    (%eax),%eax
c0002ff0:	3b 45 08             	cmp    0x8(%ebp),%eax
c0002ff3:	73 12                	jae    c0003007 <sys_malloc+0x154>
/work/x86_os_my/kernel/memory.c:358 (discriminator 2)
	} else {
	/* 若申请的内存小于等于1024,可在各种规格的mem_block_desc中去适配 */
		uint8_t desc_idx;

		/* 从内存块描述符中匹配合适的内存块规格 */
		for (desc_idx = 0; desc_idx < DESC_CNT; desc_idx++) {
c0002ff5:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c0002ff9:	83 c0 01             	add    $0x1,%eax
c0002ffc:	88 45 e7             	mov    %al,-0x19(%ebp)
/work/x86_os_my/kernel/memory.c:358 (discriminator 1)
c0002fff:	80 7d e7 06          	cmpb   $0x6,-0x19(%ebp)
c0003003:	76 d5                	jbe    c0002fda <sys_malloc+0x127>
c0003005:	eb 01                	jmp    c0003008 <sys_malloc+0x155>
/work/x86_os_my/kernel/memory.c:360
			if (size <= descs[desc_idx].block_size) {	// 从小往大后,找到后退出
				break;
c0003007:	90                   	nop
/work/x86_os_my/kernel/memory.c:366
			}
		}

		/* 若mem_block_desc的free_list中已经没有可用的mem_block,
		 * 就创建新的arena提供mem_block */
		if (list_empty(&descs[desc_idx].free_list)) {
c0003008:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c000300c:	89 d0                	mov    %edx,%eax
c000300e:	01 c0                	add    %eax,%eax
c0003010:	01 d0                	add    %edx,%eax
c0003012:	c1 e0 03             	shl    $0x3,%eax
c0003015:	89 c2                	mov    %eax,%edx
c0003017:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000301a:	01 d0                	add    %edx,%eax
c000301c:	83 c0 08             	add    $0x8,%eax
c000301f:	83 ec 0c             	sub    $0xc,%esp
c0003022:	50                   	push   %eax
c0003023:	e8 cc 15 00 00       	call   c00045f4 <list_empty>
c0003028:	83 c4 10             	add    $0x10,%esp
c000302b:	85 c0                	test   %eax,%eax
c000302d:	0f 84 31 01 00 00    	je     c0003164 <sys_malloc+0x2b1>
/work/x86_os_my/kernel/memory.c:367
			a = malloc_page(PF, 1);       // 分配1页框做为arena
c0003033:	83 ec 08             	sub    $0x8,%esp
c0003036:	6a 01                	push   $0x1
c0003038:	ff 75 f4             	pushl  -0xc(%ebp)
c000303b:	e8 38 fb ff ff       	call   c0002b78 <malloc_page>
c0003040:	83 c4 10             	add    $0x10,%esp
c0003043:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/kernel/memory.c:368
			if (a == NULL) {
c0003046:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c000304a:	75 1c                	jne    c0003068 <sys_malloc+0x1b5>
/work/x86_os_my/kernel/memory.c:369
				lock_release(&mem_pool->lock);
c000304c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000304f:	83 c0 10             	add    $0x10,%eax
c0003052:	83 ec 0c             	sub    $0xc,%esp
c0003055:	50                   	push   %eax
c0003056:	e8 fb 18 00 00       	call   c0004956 <lock_release>
c000305b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:370
				return NULL;
c000305e:	b8 00 00 00 00       	mov    $0x0,%eax
c0003063:	e9 7e 01 00 00       	jmp    c00031e6 <sys_malloc+0x333>
/work/x86_os_my/kernel/memory.c:372
			}
			memset(a, 0, PG_SIZE);
c0003068:	83 ec 04             	sub    $0x4,%esp
c000306b:	68 00 10 00 00       	push   $0x1000
c0003070:	6a 00                	push   $0x0
c0003072:	ff 75 d4             	pushl  -0x2c(%ebp)
c0003075:	e8 30 09 00 00       	call   c00039aa <memset>
c000307a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:376

			// 【arena结构体初始化，情况2】
			/* 对于分配的小块内存,将desc置为相应内存块描述符, cnt置为此arena可用的内存块数, large置为false */
			a->desc = &descs[desc_idx];
c000307d:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0003081:	89 d0                	mov    %edx,%eax
c0003083:	01 c0                	add    %eax,%eax
c0003085:	01 d0                	add    %edx,%eax
c0003087:	c1 e0 03             	shl    $0x3,%eax
c000308a:	89 c2                	mov    %eax,%edx
c000308c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000308f:	01 c2                	add    %eax,%edx
c0003091:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0003094:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/kernel/memory.c:377
			a->large = false;
c0003096:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0003099:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
/work/x86_os_my/kernel/memory.c:378
			a->cnt = descs[desc_idx].blocks_per_arena;
c00030a0:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c00030a4:	89 d0                	mov    %edx,%eax
c00030a6:	01 c0                	add    %eax,%eax
c00030a8:	01 d0                	add    %edx,%eax
c00030aa:	c1 e0 03             	shl    $0x3,%eax
c00030ad:	89 c2                	mov    %eax,%edx
c00030af:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00030b2:	01 d0                	add    %edx,%eax
c00030b4:	8b 50 04             	mov    0x4(%eax),%edx
c00030b7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c00030ba:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/kernel/memory.c:380

			enum intr_status old_status = intr_disable();
c00030bd:	e8 2b eb ff ff       	call   c0001bed <intr_disable>
c00030c2:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/kernel/memory.c:383
			/* 开始将arena拆分成内存块,并添加到内存块描述符的free_list中 */
			uint32_t block_idx;
			for (block_idx = 0; block_idx < descs[desc_idx].blocks_per_arena; block_idx++) {
c00030c5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c00030cc:	eb 68                	jmp    c0003136 <sys_malloc+0x283>
/work/x86_os_my/kernel/memory.c:384
				b = arena2block(a, block_idx);
c00030ce:	83 ec 08             	sub    $0x8,%esp
c00030d1:	ff 75 e0             	pushl  -0x20(%ebp)
c00030d4:	ff 75 d4             	pushl  -0x2c(%ebp)
c00030d7:	e8 b0 fd ff ff       	call   c0002e8c <arena2block>
c00030dc:	83 c4 10             	add    $0x10,%esp
c00030df:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/kernel/memory.c:385
				ASSERT(!elem_find(&a->desc->free_list, &b->free_elem));
c00030e2:	8b 45 cc             	mov    -0x34(%ebp),%eax
c00030e5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c00030e8:	8b 12                	mov    (%edx),%edx
c00030ea:	83 c2 08             	add    $0x8,%edx
c00030ed:	83 ec 08             	sub    $0x8,%esp
c00030f0:	50                   	push   %eax
c00030f1:	52                   	push   %edx
c00030f2:	e8 30 14 00 00       	call   c0004527 <elem_find>
c00030f7:	83 c4 10             	add    $0x10,%esp
c00030fa:	85 c0                	test   %eax,%eax
c00030fc:	74 1c                	je     c000311a <sys_malloc+0x267>
/work/x86_os_my/kernel/memory.c:385 (discriminator 1)
c00030fe:	68 bc 73 00 c0       	push   $0xc00073bc
c0003103:	68 7c 76 00 c0       	push   $0xc000767c
c0003108:	68 81 01 00 00       	push   $0x181
c000310d:	68 0f 73 00 c0       	push   $0xc000730f
c0003112:	e8 7b f4 ff ff       	call   c0002592 <panic_spin>
c0003117:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:386 (discriminator 2)
				list_append(&a->desc->free_list, &b->free_elem);
c000311a:	8b 45 cc             	mov    -0x34(%ebp),%eax
c000311d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0003120:	8b 12                	mov    (%edx),%edx
c0003122:	83 c2 08             	add    $0x8,%edx
c0003125:	83 ec 08             	sub    $0x8,%esp
c0003128:	50                   	push   %eax
c0003129:	52                   	push   %edx
c000312a:	e8 7e 13 00 00       	call   c00044ad <list_append>
c000312f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:383 (discriminator 2)
			a->cnt = descs[desc_idx].blocks_per_arena;

			enum intr_status old_status = intr_disable();
			/* 开始将arena拆分成内存块,并添加到内存块描述符的free_list中 */
			uint32_t block_idx;
			for (block_idx = 0; block_idx < descs[desc_idx].blocks_per_arena; block_idx++) {
c0003132:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
/work/x86_os_my/kernel/memory.c:383 (discriminator 1)
c0003136:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c000313a:	89 d0                	mov    %edx,%eax
c000313c:	01 c0                	add    %eax,%eax
c000313e:	01 d0                	add    %edx,%eax
c0003140:	c1 e0 03             	shl    $0x3,%eax
c0003143:	89 c2                	mov    %eax,%edx
c0003145:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0003148:	01 d0                	add    %edx,%eax
c000314a:	8b 40 04             	mov    0x4(%eax),%eax
c000314d:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0003150:	0f 87 78 ff ff ff    	ja     c00030ce <sys_malloc+0x21b>
/work/x86_os_my/kernel/memory.c:388
				b = arena2block(a, block_idx);
				ASSERT(!elem_find(&a->desc->free_list, &b->free_elem));
				list_append(&a->desc->free_list, &b->free_elem);
			}
			intr_set_status(old_status);
c0003156:	83 ec 0c             	sub    $0xc,%esp
c0003159:	ff 75 d0             	pushl  -0x30(%ebp)
c000315c:	e8 b5 ea ff ff       	call   c0001c16 <intr_set_status>
c0003161:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:392
		}

		/* 开始分配内存块 */
		b = elem2entry(struct mem_block, free_elem, list_pop(&(descs[desc_idx].free_list)));
c0003164:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0003168:	89 d0                	mov    %edx,%eax
c000316a:	01 c0                	add    %eax,%eax
c000316c:	01 d0                	add    %edx,%eax
c000316e:	c1 e0 03             	shl    $0x3,%eax
c0003171:	89 c2                	mov    %eax,%edx
c0003173:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0003176:	01 d0                	add    %edx,%eax
c0003178:	83 c0 08             	add    $0x8,%eax
c000317b:	83 ec 0c             	sub    $0xc,%esp
c000317e:	50                   	push   %eax
c000317f:	e8 81 13 00 00       	call   c0004505 <list_pop>
c0003184:	83 c4 10             	add    $0x10,%esp
c0003187:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/kernel/memory.c:393
		memset(b, 0, descs[desc_idx].block_size);
c000318a:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c000318e:	89 d0                	mov    %edx,%eax
c0003190:	01 c0                	add    %eax,%eax
c0003192:	01 d0                	add    %edx,%eax
c0003194:	c1 e0 03             	shl    $0x3,%eax
c0003197:	89 c2                	mov    %eax,%edx
c0003199:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000319c:	01 d0                	add    %edx,%eax
c000319e:	8b 00                	mov    (%eax),%eax
c00031a0:	83 ec 04             	sub    $0x4,%esp
c00031a3:	50                   	push   %eax
c00031a4:	6a 00                	push   $0x0
c00031a6:	ff 75 cc             	pushl  -0x34(%ebp)
c00031a9:	e8 fc 07 00 00       	call   c00039aa <memset>
c00031ae:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:395

		a = block2arena(b);	// 获取内存块b所在的arena
c00031b1:	83 ec 0c             	sub    $0xc,%esp
c00031b4:	ff 75 cc             	pushl  -0x34(%ebp)
c00031b7:	e8 ea fc ff ff       	call   c0002ea6 <block2arena>
c00031bc:	83 c4 10             	add    $0x10,%esp
c00031bf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/kernel/memory.c:396
		a->cnt--;			// 将此arena中的空闲内存块数减1
c00031c2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c00031c5:	8b 40 04             	mov    0x4(%eax),%eax
c00031c8:	8d 50 ff             	lea    -0x1(%eax),%edx
c00031cb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c00031ce:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/kernel/memory.c:398

		lock_release(&mem_pool->lock);
c00031d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00031d4:	83 c0 10             	add    $0x10,%eax
c00031d7:	83 ec 0c             	sub    $0xc,%esp
c00031da:	50                   	push   %eax
c00031db:	e8 76 17 00 00       	call   c0004956 <lock_release>
c00031e0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:399
		return (void*)b;
c00031e3:	8b 45 cc             	mov    -0x34(%ebp),%eax
/work/x86_os_my/kernel/memory.c:401
	}
}
c00031e6:	c9                   	leave  
c00031e7:	c3                   	ret    

c00031e8 <pfree>:
pfree():
/work/x86_os_my/kernel/memory.c:406

/* 将物理地址pg_phy_addr回收到物理内存池
 * 清理物理地址池位图
 */
void pfree(uint32_t pg_phy_addr) {
c00031e8:	55                   	push   %ebp
c00031e9:	89 e5                	mov    %esp,%ebp
c00031eb:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:408
	struct pool* mem_pool;
	uint32_t bit_idx = 0;
c00031ee:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:409
	if (pg_phy_addr >= user_pool.phy_addr_start) {	// 用户物理内存池
c00031f5:	a1 e8 ae 00 c0       	mov    0xc000aee8,%eax
c00031fa:	3b 45 08             	cmp    0x8(%ebp),%eax
c00031fd:	77 1b                	ja     c000321a <pfree+0x32>
/work/x86_os_my/kernel/memory.c:410
		mem_pool = &user_pool;
c00031ff:	c7 45 f4 e0 ae 00 c0 	movl   $0xc000aee0,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:411
		bit_idx = (pg_phy_addr - user_pool.phy_addr_start) / PG_SIZE;
c0003206:	a1 e8 ae 00 c0       	mov    0xc000aee8,%eax
c000320b:	8b 55 08             	mov    0x8(%ebp),%edx
c000320e:	29 c2                	sub    %eax,%edx
c0003210:	89 d0                	mov    %edx,%eax
c0003212:	c1 e8 0c             	shr    $0xc,%eax
c0003215:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0003218:	eb 19                	jmp    c0003233 <pfree+0x4b>
/work/x86_os_my/kernel/memory.c:413
	} else {	// 内核物理内存池
		mem_pool = &kernel_pool;
c000321a:	c7 45 f4 e0 af 00 c0 	movl   $0xc000afe0,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:414
		bit_idx = (pg_phy_addr - kernel_pool.phy_addr_start) / PG_SIZE;
c0003221:	a1 e8 af 00 c0       	mov    0xc000afe8,%eax
c0003226:	8b 55 08             	mov    0x8(%ebp),%edx
c0003229:	29 c2                	sub    %eax,%edx
c000322b:	89 d0                	mov    %edx,%eax
c000322d:	c1 e8 0c             	shr    $0xc,%eax
c0003230:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:416
	}
	bitmap_set(&mem_pool->pool_bitmap, bit_idx, 0);	// 将位图中该位清0
c0003233:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003236:	83 ec 04             	sub    $0x4,%esp
c0003239:	6a 00                	push   $0x0
c000323b:	ff 75 f0             	pushl  -0x10(%ebp)
c000323e:	50                   	push   %eax
c000323f:	e8 bc f5 ff ff       	call   c0002800 <bitmap_set>
c0003244:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:417
}
c0003247:	90                   	nop
c0003248:	c9                   	leave  
c0003249:	c3                   	ret    

c000324a <page_table_pte_remove>:
page_table_pte_remove():
/work/x86_os_my/kernel/memory.c:420

/* 去掉页表中虚拟地址vaddr的映射,只去掉vaddr对应的pte */
static void page_table_pte_remove(uint32_t vaddr) {
c000324a:	55                   	push   %ebp
c000324b:	89 e5                	mov    %esp,%ebp
c000324d:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/memory.c:421
	uint32_t* pte = pte_ptr(vaddr);
c0003250:	8b 45 08             	mov    0x8(%ebp),%eax
c0003253:	50                   	push   %eax
c0003254:	e8 6e f7 ff ff       	call   c00029c7 <pte_ptr>
c0003259:	83 c4 04             	add    $0x4,%esp
c000325c:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/kernel/memory.c:422
	*pte &= ~PG_P_1;	// 将页表项pte的P位置0
c000325f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003262:	8b 00                	mov    (%eax),%eax
c0003264:	83 e0 fe             	and    $0xfffffffe,%eax
c0003267:	89 c2                	mov    %eax,%edx
c0003269:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000326c:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/kernel/memory.c:423
	asm volatile ("invlpg %0"::"m" (vaddr):"memory");	//更新tlb
c000326e:	0f 01 7d 08          	invlpg 0x8(%ebp)
/work/x86_os_my/kernel/memory.c:426
	/*更新 TLB 有两种方式，一是用 invlpg 指令更新单条虚拟地址条目，
	另外一个是重新加载 cr3 寄存器，这将直接清空 TLB，相当于更新整个页表。*/
}
c0003272:	90                   	nop
c0003273:	c9                   	leave  
c0003274:	c3                   	ret    

c0003275 <vaddr_remove>:
vaddr_remove():
/work/x86_os_my/kernel/memory.c:431

/* 在虚拟地址池中释放以_vaddr起始的连续pg_cnt个虚拟页地址
 * 清理虚拟地址池位图
 */
static void vaddr_remove(enum pool_flags pf, void* _vaddr, uint32_t pg_cnt) {
c0003275:	55                   	push   %ebp
c0003276:	89 e5                	mov    %esp,%ebp
c0003278:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:432
	uint32_t bit_idx_start = 0, vaddr = (uint32_t)_vaddr, cnt = 0;
c000327b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0003282:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003285:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0003288:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:434

	if (pf == PF_KERNEL) {	// 内核虚拟内存池
c000328f:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c0003293:	75 3f                	jne    c00032d4 <vaddr_remove+0x5f>
/work/x86_os_my/kernel/memory.c:435
		bit_idx_start = (vaddr - kernel_vaddr.vaddr_start) / PG_SIZE;
c0003295:	a1 d0 af 00 c0       	mov    0xc000afd0,%eax
c000329a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c000329d:	29 c2                	sub    %eax,%edx
c000329f:	89 d0                	mov    %edx,%eax
c00032a1:	c1 e8 0c             	shr    $0xc,%eax
c00032a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:436
		while(cnt < pg_cnt) {
c00032a7:	eb 21                	jmp    c00032ca <vaddr_remove+0x55>
/work/x86_os_my/kernel/memory.c:437
			bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
c00032a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00032ac:	8d 50 01             	lea    0x1(%eax),%edx
c00032af:	89 55 f4             	mov    %edx,-0xc(%ebp)
c00032b2:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00032b5:	01 d0                	add    %edx,%eax
c00032b7:	83 ec 04             	sub    $0x4,%esp
c00032ba:	6a 00                	push   $0x0
c00032bc:	50                   	push   %eax
c00032bd:	68 c8 af 00 c0       	push   $0xc000afc8
c00032c2:	e8 39 f5 ff ff       	call   c0002800 <bitmap_set>
c00032c7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:436
static void vaddr_remove(enum pool_flags pf, void* _vaddr, uint32_t pg_cnt) {
	uint32_t bit_idx_start = 0, vaddr = (uint32_t)_vaddr, cnt = 0;

	if (pf == PF_KERNEL) {	// 内核虚拟内存池
		bit_idx_start = (vaddr - kernel_vaddr.vaddr_start) / PG_SIZE;
		while(cnt < pg_cnt) {
c00032ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00032cd:	3b 45 10             	cmp    0x10(%ebp),%eax
c00032d0:	72 d7                	jb     c00032a9 <vaddr_remove+0x34>
/work/x86_os_my/kernel/memory.c:446
		bit_idx_start = (vaddr - cur_thread->userprog_vaddr.vaddr_start) / PG_SIZE;
		while(cnt < pg_cnt) {
			bitmap_set(&cur_thread->userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
		}
	}
}
c00032d2:	eb 48                	jmp    c000331c <vaddr_remove+0xa7>
/work/x86_os_my/kernel/memory.c:440
		bit_idx_start = (vaddr - kernel_vaddr.vaddr_start) / PG_SIZE;
		while(cnt < pg_cnt) {
			bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
		}
	} else {	// 用户虚拟内存池
		struct task_struct* cur_thread = running_thread();
c00032d4:	e8 b8 0a 00 00       	call   c0003d91 <running_thread>
c00032d9:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:441
		bit_idx_start = (vaddr - cur_thread->userprog_vaddr.vaddr_start) / PG_SIZE;
c00032dc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00032df:	8b 40 40             	mov    0x40(%eax),%eax
c00032e2:	8b 55 ec             	mov    -0x14(%ebp),%edx
c00032e5:	29 c2                	sub    %eax,%edx
c00032e7:	89 d0                	mov    %edx,%eax
c00032e9:	c1 e8 0c             	shr    $0xc,%eax
c00032ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:442
		while(cnt < pg_cnt) {
c00032ef:	eb 23                	jmp    c0003314 <vaddr_remove+0x9f>
/work/x86_os_my/kernel/memory.c:443
			bitmap_set(&cur_thread->userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
c00032f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00032f4:	8d 50 01             	lea    0x1(%eax),%edx
c00032f7:	89 55 f4             	mov    %edx,-0xc(%ebp)
c00032fa:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00032fd:	01 c2                	add    %eax,%edx
c00032ff:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0003302:	83 c0 38             	add    $0x38,%eax
c0003305:	83 ec 04             	sub    $0x4,%esp
c0003308:	6a 00                	push   $0x0
c000330a:	52                   	push   %edx
c000330b:	50                   	push   %eax
c000330c:	e8 ef f4 ff ff       	call   c0002800 <bitmap_set>
c0003311:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:442
			bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
		}
	} else {	// 用户虚拟内存池
		struct task_struct* cur_thread = running_thread();
		bit_idx_start = (vaddr - cur_thread->userprog_vaddr.vaddr_start) / PG_SIZE;
		while(cnt < pg_cnt) {
c0003314:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003317:	3b 45 10             	cmp    0x10(%ebp),%eax
c000331a:	72 d5                	jb     c00032f1 <vaddr_remove+0x7c>
/work/x86_os_my/kernel/memory.c:446
			bitmap_set(&cur_thread->userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
		}
	}
}
c000331c:	90                   	nop
c000331d:	c9                   	leave  
c000331e:	c3                   	ret    

c000331f <mfree_page>:
mfree_page():
/work/x86_os_my/kernel/memory.c:449

/* 释放以虚拟地址vaddr为起始的cnt个物理页框 */
void mfree_page(enum pool_flags pf, void* _vaddr, uint32_t pg_cnt) {
c000331f:	55                   	push   %ebp
c0003320:	89 e5                	mov    %esp,%ebp
c0003322:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:451
	uint32_t pg_phy_addr;
	uint32_t vaddr = (int32_t)_vaddr, page_cnt = 0;
c0003325:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003328:	89 45 f4             	mov    %eax,-0xc(%ebp)
c000332b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:452
	ASSERT(pg_cnt >=1 && vaddr % PG_SIZE == 0);
c0003332:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0003336:	74 0c                	je     c0003344 <mfree_page+0x25>
/work/x86_os_my/kernel/memory.c:452 (discriminator 1)
c0003338:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000333b:	25 ff 0f 00 00       	and    $0xfff,%eax
c0003340:	85 c0                	test   %eax,%eax
c0003342:	74 1c                	je     c0003360 <mfree_page+0x41>
/work/x86_os_my/kernel/memory.c:452 (discriminator 3)
c0003344:	68 ec 73 00 c0       	push   $0xc00073ec
c0003349:	68 88 76 00 c0       	push   $0xc0007688
c000334e:	68 c4 01 00 00       	push   $0x1c4
c0003353:	68 0f 73 00 c0       	push   $0xc000730f
c0003358:	e8 35 f2 ff ff       	call   c0002592 <panic_spin>
c000335d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:453
	pg_phy_addr = addr_v2p(vaddr);
c0003360:	83 ec 0c             	sub    $0xc,%esp
c0003363:	ff 75 f4             	pushl  -0xc(%ebp)
c0003366:	e8 f5 fa ff ff       	call   c0002e60 <addr_v2p>
c000336b:	83 c4 10             	add    $0x10,%esp
c000336e:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:456

	/* 确保待释放的物理内存在低端1M+1k大小的页目录+1k大小的页表地址范围外【内核空间】 */
	ASSERT((pg_phy_addr % PG_SIZE) == 0 && pg_phy_addr >= 0x102000);
c0003371:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0003374:	25 ff 0f 00 00       	and    $0xfff,%eax
c0003379:	85 c0                	test   %eax,%eax
c000337b:	75 09                	jne    c0003386 <mfree_page+0x67>
/work/x86_os_my/kernel/memory.c:456 (discriminator 1)
c000337d:	81 7d ec ff 1f 10 00 	cmpl   $0x101fff,-0x14(%ebp)
c0003384:	77 1c                	ja     c00033a2 <mfree_page+0x83>
/work/x86_os_my/kernel/memory.c:456 (discriminator 3)
c0003386:	68 10 74 00 c0       	push   $0xc0007410
c000338b:	68 88 76 00 c0       	push   $0xc0007688
c0003390:	68 c8 01 00 00       	push   $0x1c8
c0003395:	68 0f 73 00 c0       	push   $0xc000730f
c000339a:	e8 f3 f1 ff ff       	call   c0002592 <panic_spin>
c000339f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:460

	/* 判断pg_phy_addr属于用户物理内存池还是内核物理内存池 */
	/* 位于user_pool内存池 */
	if (pg_phy_addr >= user_pool.phy_addr_start) {
c00033a2:	a1 e8 ae 00 c0       	mov    0xc000aee8,%eax
c00033a7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c00033aa:	0f 87 94 00 00 00    	ja     c0003444 <mfree_page+0x125>
/work/x86_os_my/kernel/memory.c:461
		vaddr -= PG_SIZE;
c00033b0:	81 6d f4 00 10 00 00 	subl   $0x1000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:462
		while (page_cnt < pg_cnt) {
c00033b7:	eb 6a                	jmp    c0003423 <mfree_page+0x104>
/work/x86_os_my/kernel/memory.c:463
			vaddr += PG_SIZE;
c00033b9:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:464
			pg_phy_addr = addr_v2p(vaddr);
c00033c0:	83 ec 0c             	sub    $0xc,%esp
c00033c3:	ff 75 f4             	pushl  -0xc(%ebp)
c00033c6:	e8 95 fa ff ff       	call   c0002e60 <addr_v2p>
c00033cb:	83 c4 10             	add    $0x10,%esp
c00033ce:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:467

			/* 确保物理地址属于用户物理内存池 */
			ASSERT((pg_phy_addr % PG_SIZE) == 0 && pg_phy_addr >= user_pool.phy_addr_start);
c00033d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00033d4:	25 ff 0f 00 00       	and    $0xfff,%eax
c00033d9:	85 c0                	test   %eax,%eax
c00033db:	75 0a                	jne    c00033e7 <mfree_page+0xc8>
/work/x86_os_my/kernel/memory.c:467 (discriminator 1)
c00033dd:	a1 e8 ae 00 c0       	mov    0xc000aee8,%eax
c00033e2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c00033e5:	76 1c                	jbe    c0003403 <mfree_page+0xe4>
/work/x86_os_my/kernel/memory.c:467 (discriminator 3)
c00033e7:	68 48 74 00 c0       	push   $0xc0007448
c00033ec:	68 88 76 00 c0       	push   $0xc0007688
c00033f1:	68 d3 01 00 00       	push   $0x1d3
c00033f6:	68 0f 73 00 c0       	push   $0xc000730f
c00033fb:	e8 92 f1 ff ff       	call   c0002592 <panic_spin>
c0003400:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:470

			/* 先将对应的物理页框归还到内存池 */
			pfree(pg_phy_addr);
c0003403:	83 ec 0c             	sub    $0xc,%esp
c0003406:	ff 75 ec             	pushl  -0x14(%ebp)
c0003409:	e8 da fd ff ff       	call   c00031e8 <pfree>
c000340e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:473

			/* 再从页表中清除此虚拟地址所在的页表项pte */
			page_table_pte_remove(vaddr);
c0003411:	83 ec 0c             	sub    $0xc,%esp
c0003414:	ff 75 f4             	pushl  -0xc(%ebp)
c0003417:	e8 2e fe ff ff       	call   c000324a <page_table_pte_remove>
c000341c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:475

			page_cnt++;
c000341f:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:462

	/* 判断pg_phy_addr属于用户物理内存池还是内核物理内存池 */
	/* 位于user_pool内存池 */
	if (pg_phy_addr >= user_pool.phy_addr_start) {
		vaddr -= PG_SIZE;
		while (page_cnt < pg_cnt) {
c0003423:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003426:	3b 45 10             	cmp    0x10(%ebp),%eax
c0003429:	72 8e                	jb     c00033b9 <mfree_page+0x9a>
/work/x86_os_my/kernel/memory.c:478
			page_table_pte_remove(vaddr);

			page_cnt++;
		}
		/* 清空虚拟地址的位图中的相应位 */
		vaddr_remove(pf, _vaddr, pg_cnt);
c000342b:	83 ec 04             	sub    $0x4,%esp
c000342e:	ff 75 10             	pushl  0x10(%ebp)
c0003431:	ff 75 0c             	pushl  0xc(%ebp)
c0003434:	ff 75 08             	pushl  0x8(%ebp)
c0003437:	e8 39 fe ff ff       	call   c0003275 <vaddr_remove>
c000343c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:502
			page_cnt++;
		}
		/* 清空虚拟地址的位图中的相应位 */
		vaddr_remove(pf, _vaddr, pg_cnt);
	}
}
c000343f:	e9 99 00 00 00       	jmp    c00034dd <mfree_page+0x1be>
/work/x86_os_my/kernel/memory.c:482
		/* 清空虚拟地址的位图中的相应位 */
		vaddr_remove(pf, _vaddr, pg_cnt);

	} else {
		/* 位于kernel_pool内存池 */
		vaddr -= PG_SIZE;
c0003444:	81 6d f4 00 10 00 00 	subl   $0x1000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:483
		while (page_cnt < pg_cnt) {
c000344b:	eb 74                	jmp    c00034c1 <mfree_page+0x1a2>
/work/x86_os_my/kernel/memory.c:484
			vaddr += PG_SIZE;
c000344d:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:485
			pg_phy_addr = addr_v2p(vaddr);
c0003454:	83 ec 0c             	sub    $0xc,%esp
c0003457:	ff 75 f4             	pushl  -0xc(%ebp)
c000345a:	e8 01 fa ff ff       	call   c0002e60 <addr_v2p>
c000345f:	83 c4 10             	add    $0x10,%esp
c0003462:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:488

			/* 确保待释放的物理内存只属于内核物理内存池 */
			ASSERT((pg_phy_addr % PG_SIZE) == 0 && pg_phy_addr >= kernel_pool.phy_addr_start && \
c0003465:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0003468:	25 ff 0f 00 00       	and    $0xfff,%eax
c000346d:	85 c0                	test   %eax,%eax
c000346f:	75 14                	jne    c0003485 <mfree_page+0x166>
/work/x86_os_my/kernel/memory.c:488 (discriminator 1)
c0003471:	a1 e8 af 00 c0       	mov    0xc000afe8,%eax
c0003476:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0003479:	77 0a                	ja     c0003485 <mfree_page+0x166>
/work/x86_os_my/kernel/memory.c:488 (discriminator 3)
c000347b:	a1 e8 ae 00 c0       	mov    0xc000aee8,%eax
c0003480:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0003483:	77 1c                	ja     c00034a1 <mfree_page+0x182>
/work/x86_os_my/kernel/memory.c:488 (discriminator 5)
c0003485:	68 90 74 00 c0       	push   $0xc0007490
c000348a:	68 88 76 00 c0       	push   $0xc0007688
c000348f:	68 e9 01 00 00       	push   $0x1e9
c0003494:	68 0f 73 00 c0       	push   $0xc000730f
c0003499:	e8 f4 f0 ff ff       	call   c0002592 <panic_spin>
c000349e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:492
					pg_phy_addr < user_pool.phy_addr_start);

			/* 先将对应的物理页框归还到内存池 */
			pfree(pg_phy_addr);
c00034a1:	83 ec 0c             	sub    $0xc,%esp
c00034a4:	ff 75 ec             	pushl  -0x14(%ebp)
c00034a7:	e8 3c fd ff ff       	call   c00031e8 <pfree>
c00034ac:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:495

			/* 再从页表中清除此虚拟地址所在的页表项pte */
			page_table_pte_remove(vaddr);
c00034af:	83 ec 0c             	sub    $0xc,%esp
c00034b2:	ff 75 f4             	pushl  -0xc(%ebp)
c00034b5:	e8 90 fd ff ff       	call   c000324a <page_table_pte_remove>
c00034ba:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:497

			page_cnt++;
c00034bd:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:483
		vaddr_remove(pf, _vaddr, pg_cnt);

	} else {
		/* 位于kernel_pool内存池 */
		vaddr -= PG_SIZE;
		while (page_cnt < pg_cnt) {
c00034c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00034c4:	3b 45 10             	cmp    0x10(%ebp),%eax
c00034c7:	72 84                	jb     c000344d <mfree_page+0x12e>
/work/x86_os_my/kernel/memory.c:500
			page_table_pte_remove(vaddr);

			page_cnt++;
		}
		/* 清空虚拟地址的位图中的相应位 */
		vaddr_remove(pf, _vaddr, pg_cnt);
c00034c9:	83 ec 04             	sub    $0x4,%esp
c00034cc:	ff 75 10             	pushl  0x10(%ebp)
c00034cf:	ff 75 0c             	pushl  0xc(%ebp)
c00034d2:	ff 75 08             	pushl  0x8(%ebp)
c00034d5:	e8 9b fd ff ff       	call   c0003275 <vaddr_remove>
c00034da:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:502
	}
}
c00034dd:	90                   	nop
c00034de:	c9                   	leave  
c00034df:	c3                   	ret    

c00034e0 <sys_free>:
sys_free():
/work/x86_os_my/kernel/memory.c:505

/* 回收内存ptr */
void sys_free(void* ptr) {
c00034e0:	55                   	push   %ebp
c00034e1:	89 e5                	mov    %esp,%ebp
c00034e3:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/kernel/memory.c:506
	ASSERT(ptr != NULL);
c00034e6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00034ea:	75 1c                	jne    c0003508 <sys_free+0x28>
/work/x86_os_my/kernel/memory.c:506 (discriminator 1)
c00034ec:	68 04 75 00 c0       	push   $0xc0007504
c00034f1:	68 94 76 00 c0       	push   $0xc0007694
c00034f6:	68 fa 01 00 00       	push   $0x1fa
c00034fb:	68 0f 73 00 c0       	push   $0xc000730f
c0003500:	e8 8d f0 ff ff       	call   c0002592 <panic_spin>
c0003505:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:507
	if (ptr != NULL) {
c0003508:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c000350c:	0f 84 b2 01 00 00    	je     c00036c4 <sys_free+0x1e4>
/work/x86_os_my/kernel/memory.c:512
		enum pool_flags PF;
		struct pool* mem_pool;

		/* 判断是线程还是进程 */
		if (running_thread()->pgdir == NULL) {
c0003512:	e8 7a 08 00 00       	call   c0003d91 <running_thread>
c0003517:	8b 40 34             	mov    0x34(%eax),%eax
c000351a:	85 c0                	test   %eax,%eax
c000351c:	75 36                	jne    c0003554 <sys_free+0x74>
/work/x86_os_my/kernel/memory.c:513
			ASSERT((uint32_t)ptr >= K_HEAP_START);
c000351e:	8b 45 08             	mov    0x8(%ebp),%eax
c0003521:	3d ff ff 0f c0       	cmp    $0xc00fffff,%eax
c0003526:	77 1c                	ja     c0003544 <sys_free+0x64>
/work/x86_os_my/kernel/memory.c:513 (discriminator 1)
c0003528:	68 10 75 00 c0       	push   $0xc0007510
c000352d:	68 94 76 00 c0       	push   $0xc0007694
c0003532:	68 01 02 00 00       	push   $0x201
c0003537:	68 0f 73 00 c0       	push   $0xc000730f
c000353c:	e8 51 f0 ff ff       	call   c0002592 <panic_spin>
c0003541:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:514
			PF = PF_KERNEL;
c0003544:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:515
			mem_pool = &kernel_pool;
c000354b:	c7 45 f0 e0 af 00 c0 	movl   $0xc000afe0,-0x10(%ebp)
c0003552:	eb 0e                	jmp    c0003562 <sys_free+0x82>
/work/x86_os_my/kernel/memory.c:517
		} else {
			PF = PF_USER;
c0003554:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:518
			mem_pool = &user_pool;
c000355b:	c7 45 f0 e0 ae 00 c0 	movl   $0xc000aee0,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:521
		}

		lock_acquire(&mem_pool->lock);
c0003562:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003565:	83 c0 10             	add    $0x10,%eax
c0003568:	83 ec 0c             	sub    $0xc,%esp
c000356b:	50                   	push   %eax
c000356c:	e8 6e 13 00 00       	call   c00048df <lock_acquire>
c0003571:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:522
		struct mem_block* b = ptr;
c0003574:	8b 45 08             	mov    0x8(%ebp),%eax
c0003577:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:523
		struct arena* a = block2arena(b);			// 把mem_block转换成arena,获取元信息
c000357a:	83 ec 0c             	sub    $0xc,%esp
c000357d:	ff 75 e8             	pushl  -0x18(%ebp)
c0003580:	e8 21 f9 ff ff       	call   c0002ea6 <block2arena>
c0003585:	83 c4 10             	add    $0x10,%esp
c0003588:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/kernel/memory.c:524
		ASSERT(a->large == 0 || a->large == 1);
c000358b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000358e:	8b 40 08             	mov    0x8(%eax),%eax
c0003591:	85 c0                	test   %eax,%eax
c0003593:	74 27                	je     c00035bc <sys_free+0xdc>
/work/x86_os_my/kernel/memory.c:524 (discriminator 1)
c0003595:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0003598:	8b 40 08             	mov    0x8(%eax),%eax
c000359b:	83 f8 01             	cmp    $0x1,%eax
c000359e:	74 1c                	je     c00035bc <sys_free+0xdc>
/work/x86_os_my/kernel/memory.c:524 (discriminator 2)
c00035a0:	68 30 75 00 c0       	push   $0xc0007530
c00035a5:	68 94 76 00 c0       	push   $0xc0007694
c00035aa:	68 0c 02 00 00       	push   $0x20c
c00035af:	68 0f 73 00 c0       	push   $0xc000730f
c00035b4:	e8 d9 ef ff ff       	call   c0002592 <panic_spin>
c00035b9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:525
		if (a->desc == NULL && a->large == true) {	// 大于1024的内存
c00035bc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00035bf:	8b 00                	mov    (%eax),%eax
c00035c1:	85 c0                	test   %eax,%eax
c00035c3:	75 28                	jne    c00035ed <sys_free+0x10d>
/work/x86_os_my/kernel/memory.c:525 (discriminator 1)
c00035c5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00035c8:	8b 40 08             	mov    0x8(%eax),%eax
c00035cb:	83 f8 01             	cmp    $0x1,%eax
c00035ce:	75 1d                	jne    c00035ed <sys_free+0x10d>
/work/x86_os_my/kernel/memory.c:526
			mfree_page(PF, a, a->cnt);
c00035d0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00035d3:	8b 40 04             	mov    0x4(%eax),%eax
c00035d6:	83 ec 04             	sub    $0x4,%esp
c00035d9:	50                   	push   %eax
c00035da:	ff 75 e4             	pushl  -0x1c(%ebp)
c00035dd:	ff 75 f4             	pushl  -0xc(%ebp)
c00035e0:	e8 3a fd ff ff       	call   c000331f <mfree_page>
c00035e5:	83 c4 10             	add    $0x10,%esp
c00035e8:	e9 c5 00 00 00       	jmp    c00036b2 <sys_free+0x1d2>
/work/x86_os_my/kernel/memory.c:530
		} else {									// 小于等于1024的内存块
			/* 先将内存块回收到free_list */
			// &b->free_elem == &b
			list_append(&a->desc->free_list, &b->free_elem);
c00035ed:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00035f0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c00035f3:	8b 12                	mov    (%edx),%edx
c00035f5:	83 c2 08             	add    $0x8,%edx
c00035f8:	83 ec 08             	sub    $0x8,%esp
c00035fb:	50                   	push   %eax
c00035fc:	52                   	push   %edx
c00035fd:	e8 ab 0e 00 00       	call   c00044ad <list_append>
c0003602:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:533

			/* 再判断此arena中的内存块是否都是空闲,如果是就释放arena */
			if (++a->cnt == a->desc->blocks_per_arena) {
c0003605:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0003608:	8b 40 04             	mov    0x4(%eax),%eax
c000360b:	8d 50 01             	lea    0x1(%eax),%edx
c000360e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0003611:	89 50 04             	mov    %edx,0x4(%eax)
c0003614:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0003617:	8b 50 04             	mov    0x4(%eax),%edx
c000361a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000361d:	8b 00                	mov    (%eax),%eax
c000361f:	8b 40 04             	mov    0x4(%eax),%eax
c0003622:	39 c2                	cmp    %eax,%edx
c0003624:	0f 85 88 00 00 00    	jne    c00036b2 <sys_free+0x1d2>
/work/x86_os_my/kernel/memory.c:535
				uint32_t block_idx;
				for (block_idx = 0; block_idx < a->desc->blocks_per_arena; block_idx++) {
c000362a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0003631:	eb 5f                	jmp    c0003692 <sys_free+0x1b2>
/work/x86_os_my/kernel/memory.c:536
					struct mem_block*  b = arena2block(a, block_idx);
c0003633:	83 ec 08             	sub    $0x8,%esp
c0003636:	ff 75 ec             	pushl  -0x14(%ebp)
c0003639:	ff 75 e4             	pushl  -0x1c(%ebp)
c000363c:	e8 4b f8 ff ff       	call   c0002e8c <arena2block>
c0003641:	83 c4 10             	add    $0x10,%esp
c0003644:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/kernel/memory.c:537
					ASSERT(elem_find(&a->desc->free_list, &b->free_elem));
c0003647:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000364a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c000364d:	8b 12                	mov    (%edx),%edx
c000364f:	83 c2 08             	add    $0x8,%edx
c0003652:	83 ec 08             	sub    $0x8,%esp
c0003655:	50                   	push   %eax
c0003656:	52                   	push   %edx
c0003657:	e8 cb 0e 00 00       	call   c0004527 <elem_find>
c000365c:	83 c4 10             	add    $0x10,%esp
c000365f:	85 c0                	test   %eax,%eax
c0003661:	75 1c                	jne    c000367f <sys_free+0x19f>
/work/x86_os_my/kernel/memory.c:537 (discriminator 1)
c0003663:	68 50 75 00 c0       	push   $0xc0007550
c0003668:	68 94 76 00 c0       	push   $0xc0007694
c000366d:	68 19 02 00 00       	push   $0x219
c0003672:	68 0f 73 00 c0       	push   $0xc000730f
c0003677:	e8 16 ef ff ff       	call   c0002592 <panic_spin>
c000367c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:538 (discriminator 2)
					list_remove(&b->free_elem);
c000367f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0003682:	83 ec 0c             	sub    $0xc,%esp
c0003685:	50                   	push   %eax
c0003686:	e8 40 0e 00 00       	call   c00044cb <list_remove>
c000368b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:535 (discriminator 2)
			list_append(&a->desc->free_list, &b->free_elem);

			/* 再判断此arena中的内存块是否都是空闲,如果是就释放arena */
			if (++a->cnt == a->desc->blocks_per_arena) {
				uint32_t block_idx;
				for (block_idx = 0; block_idx < a->desc->blocks_per_arena; block_idx++) {
c000368e:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:535 (discriminator 1)
c0003692:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0003695:	8b 00                	mov    (%eax),%eax
c0003697:	8b 40 04             	mov    0x4(%eax),%eax
c000369a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c000369d:	77 94                	ja     c0003633 <sys_free+0x153>
/work/x86_os_my/kernel/memory.c:540
					struct mem_block*  b = arena2block(a, block_idx);
					ASSERT(elem_find(&a->desc->free_list, &b->free_elem));
					list_remove(&b->free_elem);
				}
				mfree_page(PF, a, 1);
c000369f:	83 ec 04             	sub    $0x4,%esp
c00036a2:	6a 01                	push   $0x1
c00036a4:	ff 75 e4             	pushl  -0x1c(%ebp)
c00036a7:	ff 75 f4             	pushl  -0xc(%ebp)
c00036aa:	e8 70 fc ff ff       	call   c000331f <mfree_page>
c00036af:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:543
			}
		}
		lock_release(&mem_pool->lock);
c00036b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00036b5:	83 c0 10             	add    $0x10,%eax
c00036b8:	83 ec 0c             	sub    $0xc,%esp
c00036bb:	50                   	push   %eax
c00036bc:	e8 95 12 00 00       	call   c0004956 <lock_release>
c00036c1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:545
	}
}
c00036c4:	90                   	nop
c00036c5:	c9                   	leave  
c00036c6:	c3                   	ret    

c00036c7 <mem_pool_init>:
mem_pool_init():
/work/x86_os_my/kernel/memory.c:548

/* 初始化内存池 */
static void mem_pool_init(uint32_t all_mem) {
c00036c7:	55                   	push   %ebp
c00036c8:	89 e5                	mov    %esp,%ebp
c00036ca:	83 ec 38             	sub    $0x38,%esp
/work/x86_os_my/kernel/memory.c:549
	put_str("   mem_pool_init start\n");
c00036cd:	83 ec 0c             	sub    $0xc,%esp
c00036d0:	68 7e 75 00 c0       	push   $0xc000757e
c00036d5:	e8 46 ed ff ff       	call   c0002420 <put_str>
c00036da:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:550
	uint32_t page_table_size = PG_SIZE * 256;		// 页表大小= 1页的页目录表+第0和第768个页目录项指向同一个页表+
c00036dd:	c7 45 f4 00 00 10 00 	movl   $0x100000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:552
													// 第769~1022个页目录项共指向254个页表,共256个页框
	uint32_t used_mem = page_table_size + 0x100000;	// 0x100000为低端1M内存
c00036e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00036e7:	05 00 00 10 00       	add    $0x100000,%eax
c00036ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:553
	uint32_t free_mem = all_mem - used_mem;
c00036ef:	8b 45 08             	mov    0x8(%ebp),%eax
c00036f2:	2b 45 f0             	sub    -0x10(%ebp),%eax
c00036f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:554
	uint16_t all_free_pages = free_mem / PG_SIZE;	// 1页为4k,不管总内存是不是4k的倍数,
c00036f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00036fb:	c1 e8 0c             	shr    $0xc,%eax
c00036fe:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
/work/x86_os_my/kernel/memory.c:556
													// 对于以页为单位的内存分配策略，不足1页的内存不用考虑了。
	uint16_t kernel_free_pages = all_free_pages / 2;
c0003702:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0003706:	66 d1 e8             	shr    %ax
c0003709:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:557
	uint16_t user_free_pages = all_free_pages - kernel_free_pages;
c000370d:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0003711:	66 2b 45 e8          	sub    -0x18(%ebp),%ax
c0003715:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
/work/x86_os_my/kernel/memory.c:561

	/* 为简化位图操作，余数不处理，坏处是这样做会丢内存。
	好处是不用做内存的越界检查,因为位图表示的内存少于实际物理内存*/
	uint32_t kbm_length = kernel_free_pages / 8;	// Kernel BitMap的长度,位图中的一位表示一页,以字节为单位
c0003719:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
c000371d:	66 c1 e8 03          	shr    $0x3,%ax
c0003721:	0f b7 c0             	movzwl %ax,%eax
c0003724:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/kernel/memory.c:562
	uint32_t ubm_length = user_free_pages / 8;		// User BitMap的长度.
c0003727:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c000372b:	66 c1 e8 03          	shr    $0x3,%ax
c000372f:	0f b7 c0             	movzwl %ax,%eax
c0003732:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/kernel/memory.c:564

	uint32_t kp_start = used_mem;								// Kernel Pool start,内核内存池的起始地址
c0003735:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003738:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/kernel/memory.c:565
	uint32_t up_start = kp_start + kernel_free_pages * PG_SIZE;	// User Pool start,用户内存池的起始地址
c000373b:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
c000373f:	c1 e0 0c             	shl    $0xc,%eax
c0003742:	89 c2                	mov    %eax,%edx
c0003744:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0003747:	01 d0                	add    %edx,%eax
c0003749:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/kernel/memory.c:567

	kernel_pool.phy_addr_start = kp_start;
c000374c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000374f:	a3 e8 af 00 c0       	mov    %eax,0xc000afe8
/work/x86_os_my/kernel/memory.c:568
	user_pool.phy_addr_start   = up_start;
c0003754:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0003757:	a3 e8 ae 00 c0       	mov    %eax,0xc000aee8
/work/x86_os_my/kernel/memory.c:570

	kernel_pool.pool_size = kernel_free_pages * PG_SIZE;
c000375c:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
c0003760:	c1 e0 0c             	shl    $0xc,%eax
c0003763:	a3 ec af 00 c0       	mov    %eax,0xc000afec
/work/x86_os_my/kernel/memory.c:571
	user_pool.pool_size	 = user_free_pages * PG_SIZE;
c0003768:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c000376c:	c1 e0 0c             	shl    $0xc,%eax
c000376f:	a3 ec ae 00 c0       	mov    %eax,0xc000aeec
/work/x86_os_my/kernel/memory.c:573

	kernel_pool.pool_bitmap.btmp_bytes_len = kbm_length;
c0003774:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0003777:	a3 e0 af 00 c0       	mov    %eax,0xc000afe0
/work/x86_os_my/kernel/memory.c:574
	user_pool.pool_bitmap.btmp_bytes_len	  = ubm_length;
c000377c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000377f:	a3 e0 ae 00 c0       	mov    %eax,0xc000aee0
/work/x86_os_my/kernel/memory.c:583
	*	而我们需要根据总内存大小在运行时，计算出位图的数组需要多少字节。
	*   所以改为指定一块内存来生成位图.
	*   ************************************************/
	// 内核使用的最高地址是0xc009f000,这是主线程的栈地址.(内核的大小预计为70K左右)
	// 32M内存占用的位图是2k.内核内存池的位图先定在MEM_BITMAP_BASE(0xc009a000)处.
	kernel_pool.pool_bitmap.bits = (void*)MEM_BITMAP_BASE;
c0003784:	c7 05 e4 af 00 c0 00 	movl   $0xc009a000,0xc000afe4
c000378b:	a0 09 c0 
/work/x86_os_my/kernel/memory.c:585
	/* 用户内存池的位图紧跟在内核内存池位图之后 */
	user_pool.pool_bitmap.bits = (void*)(MEM_BITMAP_BASE + kbm_length);
c000378e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0003791:	2d 00 60 f6 3f       	sub    $0x3ff66000,%eax
c0003796:	a3 e4 ae 00 c0       	mov    %eax,0xc000aee4
/work/x86_os_my/kernel/memory.c:588
	
	/******************** 输出内存池信息 **********************/
	put_str("      kernel_pool_bitmap_start:");put_int((int)kernel_pool.pool_bitmap.bits);
c000379b:	83 ec 0c             	sub    $0xc,%esp
c000379e:	68 98 75 00 c0       	push   $0xc0007598
c00037a3:	e8 78 ec ff ff       	call   c0002420 <put_str>
c00037a8:	83 c4 10             	add    $0x10,%esp
c00037ab:	a1 e4 af 00 c0       	mov    0xc000afe4,%eax
c00037b0:	83 ec 0c             	sub    $0xc,%esp
c00037b3:	50                   	push   %eax
c00037b4:	e8 52 ed ff ff       	call   c000250b <put_int>
c00037b9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:589
	put_str(" kernel_pool_phy_addr_start:");put_int(kernel_pool.phy_addr_start);
c00037bc:	83 ec 0c             	sub    $0xc,%esp
c00037bf:	68 b8 75 00 c0       	push   $0xc00075b8
c00037c4:	e8 57 ec ff ff       	call   c0002420 <put_str>
c00037c9:	83 c4 10             	add    $0x10,%esp
c00037cc:	a1 e8 af 00 c0       	mov    0xc000afe8,%eax
c00037d1:	83 ec 0c             	sub    $0xc,%esp
c00037d4:	50                   	push   %eax
c00037d5:	e8 31 ed ff ff       	call   c000250b <put_int>
c00037da:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:590
	put_str("\n");
c00037dd:	83 ec 0c             	sub    $0xc,%esp
c00037e0:	68 d5 75 00 c0       	push   $0xc00075d5
c00037e5:	e8 36 ec ff ff       	call   c0002420 <put_str>
c00037ea:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:591
	put_str("      user_pool_bitmap_start:");put_int((int)user_pool.pool_bitmap.bits);
c00037ed:	83 ec 0c             	sub    $0xc,%esp
c00037f0:	68 d7 75 00 c0       	push   $0xc00075d7
c00037f5:	e8 26 ec ff ff       	call   c0002420 <put_str>
c00037fa:	83 c4 10             	add    $0x10,%esp
c00037fd:	a1 e4 ae 00 c0       	mov    0xc000aee4,%eax
c0003802:	83 ec 0c             	sub    $0xc,%esp
c0003805:	50                   	push   %eax
c0003806:	e8 00 ed ff ff       	call   c000250b <put_int>
c000380b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:592
	put_str(" user_pool_phy_addr_start:");put_int(user_pool.phy_addr_start);
c000380e:	83 ec 0c             	sub    $0xc,%esp
c0003811:	68 f5 75 00 c0       	push   $0xc00075f5
c0003816:	e8 05 ec ff ff       	call   c0002420 <put_str>
c000381b:	83 c4 10             	add    $0x10,%esp
c000381e:	a1 e8 ae 00 c0       	mov    0xc000aee8,%eax
c0003823:	83 ec 0c             	sub    $0xc,%esp
c0003826:	50                   	push   %eax
c0003827:	e8 df ec ff ff       	call   c000250b <put_int>
c000382c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:593
	put_str("\n");
c000382f:	83 ec 0c             	sub    $0xc,%esp
c0003832:	68 d5 75 00 c0       	push   $0xc00075d5
c0003837:	e8 e4 eb ff ff       	call   c0002420 <put_str>
c000383c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:596

	/* 将位图置0*/
	bitmap_init(&kernel_pool.pool_bitmap);
c000383f:	83 ec 0c             	sub    $0xc,%esp
c0003842:	68 e0 af 00 c0       	push   $0xc000afe0
c0003847:	e8 1c ee ff ff       	call   c0002668 <bitmap_init>
c000384c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:597
	bitmap_init(&user_pool.pool_bitmap);
c000384f:	83 ec 0c             	sub    $0xc,%esp
c0003852:	68 e0 ae 00 c0       	push   $0xc000aee0
c0003857:	e8 0c ee ff ff       	call   c0002668 <bitmap_init>
c000385c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:599

	lock_init(&kernel_pool.lock);
c000385f:	83 ec 0c             	sub    $0xc,%esp
c0003862:	68 f0 af 00 c0       	push   $0xc000aff0
c0003867:	e8 99 0e 00 00       	call   c0004705 <lock_init>
c000386c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:600
	lock_init(&user_pool.lock);
c000386f:	83 ec 0c             	sub    $0xc,%esp
c0003872:	68 f0 ae 00 c0       	push   $0xc000aef0
c0003877:	e8 89 0e 00 00       	call   c0004705 <lock_init>
c000387c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:604
	
	/* 下面初始化内核虚拟地址的位图(bp_len + bits数组),按实际物理内存大小生成数组。*/
	// 用于维护内核堆的虚拟地址,所以要和内核内存池大小一致
	kernel_vaddr.vaddr_bitmap.btmp_bytes_len = kbm_length;
c000387f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0003882:	a3 c8 af 00 c0       	mov    %eax,0xc000afc8
/work/x86_os_my/kernel/memory.c:606
	/* 位图的数组指向一块未使用的内存,目前定位在内核内存池和用户内存池之外*/
	kernel_vaddr.vaddr_bitmap.bits = (void*)(MEM_BITMAP_BASE + kbm_length + ubm_length);
c0003887:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000388a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000388d:	01 d0                	add    %edx,%eax
c000388f:	2d 00 60 f6 3f       	sub    $0x3ff66000,%eax
c0003894:	a3 cc af 00 c0       	mov    %eax,0xc000afcc
/work/x86_os_my/kernel/memory.c:608

	kernel_vaddr.vaddr_start = K_HEAP_START;
c0003899:	c7 05 d0 af 00 c0 00 	movl   $0xc0100000,0xc000afd0
c00038a0:	00 10 c0 
/work/x86_os_my/kernel/memory.c:609
	bitmap_init(&kernel_vaddr.vaddr_bitmap);
c00038a3:	83 ec 0c             	sub    $0xc,%esp
c00038a6:	68 c8 af 00 c0       	push   $0xc000afc8
c00038ab:	e8 b8 ed ff ff       	call   c0002668 <bitmap_init>
c00038b0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:610
	put_str("   mem_pool_init done\n");
c00038b3:	83 ec 0c             	sub    $0xc,%esp
c00038b6:	68 10 76 00 c0       	push   $0xc0007610
c00038bb:	e8 60 eb ff ff       	call   c0002420 <put_str>
c00038c0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:611
}
c00038c3:	90                   	nop
c00038c4:	c9                   	leave  
c00038c5:	c3                   	ret    

c00038c6 <block_desc_init>:
block_desc_init():
/work/x86_os_my/kernel/memory.c:614

/* 为malloc做准备 */
void block_desc_init(struct mem_block_desc* desc_array) {
c00038c6:	55                   	push   %ebp
c00038c7:	89 e5                	mov    %esp,%ebp
c00038c9:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:615
   uint16_t desc_idx, block_size = 16;
c00038cc:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:618

   /* 初始化每个mem_block_desc描述符 */
   for (desc_idx = 0; desc_idx < DESC_CNT; desc_idx++) {
c00038d2:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c00038d8:	eb 75                	jmp    c000394f <block_desc_init+0x89>
/work/x86_os_my/kernel/memory.c:619 (discriminator 3)
      desc_array[desc_idx].block_size = block_size;
c00038da:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c00038de:	89 d0                	mov    %edx,%eax
c00038e0:	01 c0                	add    %eax,%eax
c00038e2:	01 d0                	add    %edx,%eax
c00038e4:	c1 e0 03             	shl    $0x3,%eax
c00038e7:	89 c2                	mov    %eax,%edx
c00038e9:	8b 45 08             	mov    0x8(%ebp),%eax
c00038ec:	01 c2                	add    %eax,%edx
c00038ee:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c00038f2:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/kernel/memory.c:622 (discriminator 3)

      /* 初始化arena中的内存块数量【注意计算方法】 */
      desc_array[desc_idx].blocks_per_arena = (PG_SIZE - sizeof(struct arena)) / block_size;
c00038f4:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c00038f8:	89 d0                	mov    %edx,%eax
c00038fa:	01 c0                	add    %eax,%eax
c00038fc:	01 d0                	add    %edx,%eax
c00038fe:	c1 e0 03             	shl    $0x3,%eax
c0003901:	89 c2                	mov    %eax,%edx
c0003903:	8b 45 08             	mov    0x8(%ebp),%eax
c0003906:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
c0003909:	b8 f4 0f 00 00       	mov    $0xff4,%eax
c000390e:	ba 00 00 00 00       	mov    $0x0,%edx
c0003913:	66 f7 75 f4          	divw   -0xc(%ebp)
c0003917:	0f b7 c0             	movzwl %ax,%eax
c000391a:	89 41 04             	mov    %eax,0x4(%ecx)
/work/x86_os_my/kernel/memory.c:624 (discriminator 3)

      list_init(&desc_array[desc_idx].free_list);
c000391d:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0003921:	89 d0                	mov    %edx,%eax
c0003923:	01 c0                	add    %eax,%eax
c0003925:	01 d0                	add    %edx,%eax
c0003927:	c1 e0 03             	shl    $0x3,%eax
c000392a:	89 c2                	mov    %eax,%edx
c000392c:	8b 45 08             	mov    0x8(%ebp),%eax
c000392f:	01 d0                	add    %edx,%eax
c0003931:	83 c0 08             	add    $0x8,%eax
c0003934:	83 ec 0c             	sub    $0xc,%esp
c0003937:	50                   	push   %eax
c0003938:	e8 df 0a 00 00       	call   c000441c <list_init>
c000393d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:626 (discriminator 3)

      block_size *= 2;		// 下一个规格内存块！
c0003940:	66 d1 65 f4          	shlw   -0xc(%ebp)
/work/x86_os_my/kernel/memory.c:618 (discriminator 3)
/* 为malloc做准备 */
void block_desc_init(struct mem_block_desc* desc_array) {
   uint16_t desc_idx, block_size = 16;

   /* 初始化每个mem_block_desc描述符 */
   for (desc_idx = 0; desc_idx < DESC_CNT; desc_idx++) {
c0003944:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0003948:	83 c0 01             	add    $0x1,%eax
c000394b:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
/work/x86_os_my/kernel/memory.c:618 (discriminator 1)
c000394f:	66 83 7d f6 06       	cmpw   $0x6,-0xa(%ebp)
c0003954:	76 84                	jbe    c00038da <block_desc_init+0x14>
/work/x86_os_my/kernel/memory.c:629
      list_init(&desc_array[desc_idx].free_list);

      block_size *= 2;		// 下一个规格内存块！
	  // 16/32/64/128/256/512/1024 总共 7 种规格
   }
}
c0003956:	90                   	nop
c0003957:	c9                   	leave  
c0003958:	c3                   	ret    

c0003959 <mem_init>:
mem_init():
/work/x86_os_my/kernel/memory.c:632

/* 内存管理部分初始化入口 */
void mem_init() {
c0003959:	55                   	push   %ebp
c000395a:	89 e5                	mov    %esp,%ebp
c000395c:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:633
	put_str("mem_init start\n");
c000395f:	83 ec 0c             	sub    $0xc,%esp
c0003962:	68 27 76 00 c0       	push   $0xc0007627
c0003967:	e8 b4 ea ff ff       	call   c0002420 <put_str>
c000396c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:634
	uint32_t mem_bytes_total = (*(uint32_t*)(0xb00));	//内存总数在汇编中获取，放到了地址0xb00处。
c000396f:	b8 00 0b 00 00       	mov    $0xb00,%eax
c0003974:	8b 00                	mov    (%eax),%eax
c0003976:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:635
	mem_pool_init(mem_bytes_total);	// 初始化内存池
c0003979:	83 ec 0c             	sub    $0xc,%esp
c000397c:	ff 75 f4             	pushl  -0xc(%ebp)
c000397f:	e8 43 fd ff ff       	call   c00036c7 <mem_pool_init>
c0003984:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:636
	block_desc_init(k_block_descs);	// 初始化mem_block_desc数组descs,为malloc做准备
c0003987:	83 ec 0c             	sub    $0xc,%esp
c000398a:	68 20 af 00 c0       	push   $0xc000af20
c000398f:	e8 32 ff ff ff       	call   c00038c6 <block_desc_init>
c0003994:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:637
	put_str("mem_init done\n");
c0003997:	83 ec 0c             	sub    $0xc,%esp
c000399a:	68 37 76 00 c0       	push   $0xc0007637
c000399f:	e8 7c ea ff ff       	call   c0002420 <put_str>
c00039a4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:638
}
c00039a7:	90                   	nop
c00039a8:	c9                   	leave  
c00039a9:	c3                   	ret    

c00039aa <memset>:
memset():
/work/x86_os_my/lib/string.c:6
#include "string.h"
#include "global.h"
#include "debug.h"

/* 将dst_起始的size个字节置为value */
void memset(void* dst_, uint8_t value, uint32_t size) {
c00039aa:	55                   	push   %ebp
c00039ab:	89 e5                	mov    %esp,%ebp
c00039ad:	83 ec 28             	sub    $0x28,%esp
c00039b0:	8b 45 0c             	mov    0xc(%ebp),%eax
c00039b3:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/lib/string.c:7
   ASSERT(dst_ != NULL);
c00039b6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00039ba:	75 19                	jne    c00039d5 <memset+0x2b>
/work/x86_os_my/lib/string.c:7 (discriminator 1)
c00039bc:	68 a0 76 00 c0       	push   $0xc00076a0
c00039c1:	68 14 77 00 c0       	push   $0xc0007714
c00039c6:	6a 07                	push   $0x7
c00039c8:	68 ad 76 00 c0       	push   $0xc00076ad
c00039cd:	e8 c0 eb ff ff       	call   c0002592 <panic_spin>
c00039d2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:8
   uint8_t* dst = (uint8_t*)dst_;
c00039d5:	8b 45 08             	mov    0x8(%ebp),%eax
c00039d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:9
   while (size-- > 0)
c00039db:	eb 0f                	jmp    c00039ec <memset+0x42>
/work/x86_os_my/lib/string.c:10
      *dst++ = value;
c00039dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00039e0:	8d 50 01             	lea    0x1(%eax),%edx
c00039e3:	89 55 f4             	mov    %edx,-0xc(%ebp)
c00039e6:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c00039ea:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/string.c:9

/* 将dst_起始的size个字节置为value */
void memset(void* dst_, uint8_t value, uint32_t size) {
   ASSERT(dst_ != NULL);
   uint8_t* dst = (uint8_t*)dst_;
   while (size-- > 0)
c00039ec:	8b 45 10             	mov    0x10(%ebp),%eax
c00039ef:	8d 50 ff             	lea    -0x1(%eax),%edx
c00039f2:	89 55 10             	mov    %edx,0x10(%ebp)
c00039f5:	85 c0                	test   %eax,%eax
c00039f7:	75 e4                	jne    c00039dd <memset+0x33>
/work/x86_os_my/lib/string.c:11
      *dst++ = value;
}
c00039f9:	90                   	nop
c00039fa:	c9                   	leave  
c00039fb:	c3                   	ret    

c00039fc <memcpy>:
memcpy():
/work/x86_os_my/lib/string.c:14

/* 将src_起始的size个字节复制到dst_ */
void memcpy(void* dst_, const void* src_, uint32_t size) {
c00039fc:	55                   	push   %ebp
c00039fd:	89 e5                	mov    %esp,%ebp
c00039ff:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/string.c:15
   ASSERT(dst_ != NULL && src_ != NULL);
c0003a02:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003a06:	74 06                	je     c0003a0e <memcpy+0x12>
/work/x86_os_my/lib/string.c:15 (discriminator 1)
c0003a08:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0003a0c:	75 19                	jne    c0003a27 <memcpy+0x2b>
/work/x86_os_my/lib/string.c:15 (discriminator 3)
c0003a0e:	68 ba 76 00 c0       	push   $0xc00076ba
c0003a13:	68 1c 77 00 c0       	push   $0xc000771c
c0003a18:	6a 0f                	push   $0xf
c0003a1a:	68 ad 76 00 c0       	push   $0xc00076ad
c0003a1f:	e8 6e eb ff ff       	call   c0002592 <panic_spin>
c0003a24:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:16
   uint8_t* dst = dst_;
c0003a27:	8b 45 08             	mov    0x8(%ebp),%eax
c0003a2a:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:17
   const uint8_t* src = src_;
c0003a2d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003a30:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/string.c:18
   while (size-- > 0)
c0003a33:	eb 17                	jmp    c0003a4c <memcpy+0x50>
/work/x86_os_my/lib/string.c:19
      *dst++ = *src++;
c0003a35:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003a38:	8d 50 01             	lea    0x1(%eax),%edx
c0003a3b:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0003a3e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0003a41:	8d 4a 01             	lea    0x1(%edx),%ecx
c0003a44:	89 4d f0             	mov    %ecx,-0x10(%ebp)
c0003a47:	0f b6 12             	movzbl (%edx),%edx
c0003a4a:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/string.c:18
/* 将src_起始的size个字节复制到dst_ */
void memcpy(void* dst_, const void* src_, uint32_t size) {
   ASSERT(dst_ != NULL && src_ != NULL);
   uint8_t* dst = dst_;
   const uint8_t* src = src_;
   while (size-- > 0)
c0003a4c:	8b 45 10             	mov    0x10(%ebp),%eax
c0003a4f:	8d 50 ff             	lea    -0x1(%eax),%edx
c0003a52:	89 55 10             	mov    %edx,0x10(%ebp)
c0003a55:	85 c0                	test   %eax,%eax
c0003a57:	75 dc                	jne    c0003a35 <memcpy+0x39>
/work/x86_os_my/lib/string.c:20
      *dst++ = *src++;
}
c0003a59:	90                   	nop
c0003a5a:	c9                   	leave  
c0003a5b:	c3                   	ret    

c0003a5c <memcmp>:
memcmp():
/work/x86_os_my/lib/string.c:23

/* 连续比较以地址a_和地址b_开头的size个字节,若相等则返回0,若a_大于b_返回+1,否则返回-1 */
int memcmp(const void* a_, const void* b_, uint32_t size) {
c0003a5c:	55                   	push   %ebp
c0003a5d:	89 e5                	mov    %esp,%ebp
c0003a5f:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/string.c:24
   const char* a = a_;
c0003a62:	8b 45 08             	mov    0x8(%ebp),%eax
c0003a65:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:25
   const char* b = b_;
c0003a68:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003a6b:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/string.c:26
   ASSERT(a != NULL || b != NULL);
c0003a6e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0003a72:	75 57                	jne    c0003acb <memcmp+0x6f>
/work/x86_os_my/lib/string.c:26 (discriminator 1)
c0003a74:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0003a78:	75 51                	jne    c0003acb <memcmp+0x6f>
/work/x86_os_my/lib/string.c:26 (discriminator 2)
c0003a7a:	68 d7 76 00 c0       	push   $0xc00076d7
c0003a7f:	68 24 77 00 c0       	push   $0xc0007724
c0003a84:	6a 1a                	push   $0x1a
c0003a86:	68 ad 76 00 c0       	push   $0xc00076ad
c0003a8b:	e8 02 eb ff ff       	call   c0002592 <panic_spin>
c0003a90:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:27 (discriminator 2)
   while (size-- > 0) {
c0003a93:	eb 36                	jmp    c0003acb <memcmp+0x6f>
/work/x86_os_my/lib/string.c:28
      if(*a != *b) {
c0003a95:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003a98:	0f b6 10             	movzbl (%eax),%edx
c0003a9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003a9e:	0f b6 00             	movzbl (%eax),%eax
c0003aa1:	38 c2                	cmp    %al,%dl
c0003aa3:	74 1e                	je     c0003ac3 <memcmp+0x67>
/work/x86_os_my/lib/string.c:29
	 return *a > *b ? 1 : -1; 
c0003aa5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003aa8:	0f b6 10             	movzbl (%eax),%edx
c0003aab:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003aae:	0f b6 00             	movzbl (%eax),%eax
c0003ab1:	38 c2                	cmp    %al,%dl
c0003ab3:	7e 07                	jle    c0003abc <memcmp+0x60>
/work/x86_os_my/lib/string.c:29 (discriminator 1)
c0003ab5:	b8 01 00 00 00       	mov    $0x1,%eax
c0003aba:	eb 21                	jmp    c0003add <memcmp+0x81>
/work/x86_os_my/lib/string.c:29 (discriminator 2)
c0003abc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0003ac1:	eb 1a                	jmp    c0003add <memcmp+0x81>
/work/x86_os_my/lib/string.c:31
      }
      a++;
c0003ac3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/lib/string.c:32
      b++;
c0003ac7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/lib/string.c:27
/* 连续比较以地址a_和地址b_开头的size个字节,若相等则返回0,若a_大于b_返回+1,否则返回-1 */
int memcmp(const void* a_, const void* b_, uint32_t size) {
   const char* a = a_;
   const char* b = b_;
   ASSERT(a != NULL || b != NULL);
   while (size-- > 0) {
c0003acb:	8b 45 10             	mov    0x10(%ebp),%eax
c0003ace:	8d 50 ff             	lea    -0x1(%eax),%edx
c0003ad1:	89 55 10             	mov    %edx,0x10(%ebp)
c0003ad4:	85 c0                	test   %eax,%eax
c0003ad6:	75 bd                	jne    c0003a95 <memcmp+0x39>
/work/x86_os_my/lib/string.c:34
	 return *a > *b ? 1 : -1; 
      }
      a++;
      b++;
   }
   return 0;
c0003ad8:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/lib/string.c:35
}
c0003add:	c9                   	leave  
c0003ade:	c3                   	ret    

c0003adf <strcpy>:
strcpy():
/work/x86_os_my/lib/string.c:38

/* 将字符串从src_复制到dst_ */
char* strcpy(char* dst_, const char* src_) {
c0003adf:	55                   	push   %ebp
c0003ae0:	89 e5                	mov    %esp,%ebp
c0003ae2:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/string.c:39
   ASSERT(dst_ != NULL && src_ != NULL);
c0003ae5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003ae9:	74 06                	je     c0003af1 <strcpy+0x12>
/work/x86_os_my/lib/string.c:39 (discriminator 1)
c0003aeb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0003aef:	75 19                	jne    c0003b0a <strcpy+0x2b>
/work/x86_os_my/lib/string.c:39 (discriminator 3)
c0003af1:	68 ba 76 00 c0       	push   $0xc00076ba
c0003af6:	68 2c 77 00 c0       	push   $0xc000772c
c0003afb:	6a 27                	push   $0x27
c0003afd:	68 ad 76 00 c0       	push   $0xc00076ad
c0003b02:	e8 8b ea ff ff       	call   c0002592 <panic_spin>
c0003b07:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:40
   char* r = dst_;		       // 用来返回目的字符串起始地址
c0003b0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0003b0d:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:41
   while((*dst_++ = *src_++));
c0003b10:	90                   	nop
/work/x86_os_my/lib/string.c:41 (discriminator 1)
c0003b11:	8b 45 08             	mov    0x8(%ebp),%eax
c0003b14:	8d 50 01             	lea    0x1(%eax),%edx
c0003b17:	89 55 08             	mov    %edx,0x8(%ebp)
c0003b1a:	8b 55 0c             	mov    0xc(%ebp),%edx
c0003b1d:	8d 4a 01             	lea    0x1(%edx),%ecx
c0003b20:	89 4d 0c             	mov    %ecx,0xc(%ebp)
c0003b23:	0f b6 12             	movzbl (%edx),%edx
c0003b26:	88 10                	mov    %dl,(%eax)
c0003b28:	0f b6 00             	movzbl (%eax),%eax
c0003b2b:	84 c0                	test   %al,%al
c0003b2d:	75 e2                	jne    c0003b11 <strcpy+0x32>
/work/x86_os_my/lib/string.c:42
   return r;
c0003b2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/lib/string.c:43
}
c0003b32:	c9                   	leave  
c0003b33:	c3                   	ret    

c0003b34 <strlen>:
strlen():
/work/x86_os_my/lib/string.c:46

/* 返回字符串长度 */
uint32_t strlen(const char* str) {
c0003b34:	55                   	push   %ebp
c0003b35:	89 e5                	mov    %esp,%ebp
c0003b37:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/string.c:47
   ASSERT(str != NULL);
c0003b3a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003b3e:	75 19                	jne    c0003b59 <strlen+0x25>
/work/x86_os_my/lib/string.c:47 (discriminator 1)
c0003b40:	68 ee 76 00 c0       	push   $0xc00076ee
c0003b45:	68 34 77 00 c0       	push   $0xc0007734
c0003b4a:	6a 2f                	push   $0x2f
c0003b4c:	68 ad 76 00 c0       	push   $0xc00076ad
c0003b51:	e8 3c ea ff ff       	call   c0002592 <panic_spin>
c0003b56:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:48
   const char* p = str;
c0003b59:	8b 45 08             	mov    0x8(%ebp),%eax
c0003b5c:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:49
   while(*p++);
c0003b5f:	90                   	nop
/work/x86_os_my/lib/string.c:49 (discriminator 1)
c0003b60:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003b63:	8d 50 01             	lea    0x1(%eax),%edx
c0003b66:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0003b69:	0f b6 00             	movzbl (%eax),%eax
c0003b6c:	84 c0                	test   %al,%al
c0003b6e:	75 f0                	jne    c0003b60 <strlen+0x2c>
/work/x86_os_my/lib/string.c:50
   return (p - str - 1);
c0003b70:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0003b73:	8b 45 08             	mov    0x8(%ebp),%eax
c0003b76:	29 c2                	sub    %eax,%edx
c0003b78:	89 d0                	mov    %edx,%eax
c0003b7a:	83 e8 01             	sub    $0x1,%eax
/work/x86_os_my/lib/string.c:51
}
c0003b7d:	c9                   	leave  
c0003b7e:	c3                   	ret    

c0003b7f <strcmp>:
strcmp():
/work/x86_os_my/lib/string.c:54

/* 比较两个字符串,若a_中的字符大于b_中的字符返回1,相等时返回0,否则返回-1. */
int8_t strcmp (const char* a, const char* b) {
c0003b7f:	55                   	push   %ebp
c0003b80:	89 e5                	mov    %esp,%ebp
c0003b82:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/lib/string.c:55
   ASSERT(a != NULL && b != NULL);
c0003b85:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003b89:	74 06                	je     c0003b91 <strcmp+0x12>
/work/x86_os_my/lib/string.c:55 (discriminator 1)
c0003b8b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0003b8f:	75 19                	jne    c0003baa <strcmp+0x2b>
/work/x86_os_my/lib/string.c:55 (discriminator 3)
c0003b91:	68 fa 76 00 c0       	push   $0xc00076fa
c0003b96:	68 3c 77 00 c0       	push   $0xc000773c
c0003b9b:	6a 37                	push   $0x37
c0003b9d:	68 ad 76 00 c0       	push   $0xc00076ad
c0003ba2:	e8 eb e9 ff ff       	call   c0002592 <panic_spin>
c0003ba7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:56 (discriminator 1)
   while (*a != 0 && *a == *b) {
c0003baa:	eb 08                	jmp    c0003bb4 <strcmp+0x35>
/work/x86_os_my/lib/string.c:57
      a++;
c0003bac:	83 45 08 01          	addl   $0x1,0x8(%ebp)
/work/x86_os_my/lib/string.c:58
      b++;
c0003bb0:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
/work/x86_os_my/lib/string.c:56
}

/* 比较两个字符串,若a_中的字符大于b_中的字符返回1,相等时返回0,否则返回-1. */
int8_t strcmp (const char* a, const char* b) {
   ASSERT(a != NULL && b != NULL);
   while (*a != 0 && *a == *b) {
c0003bb4:	8b 45 08             	mov    0x8(%ebp),%eax
c0003bb7:	0f b6 00             	movzbl (%eax),%eax
c0003bba:	84 c0                	test   %al,%al
c0003bbc:	74 10                	je     c0003bce <strcmp+0x4f>
/work/x86_os_my/lib/string.c:56 (discriminator 1)
c0003bbe:	8b 45 08             	mov    0x8(%ebp),%eax
c0003bc1:	0f b6 10             	movzbl (%eax),%edx
c0003bc4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003bc7:	0f b6 00             	movzbl (%eax),%eax
c0003bca:	38 c2                	cmp    %al,%dl
c0003bcc:	74 de                	je     c0003bac <strcmp+0x2d>
/work/x86_os_my/lib/string.c:62
      a++;
      b++;
   }
/* 如果*a小于*b就返回-1,否则就属于*a大于等于*b的情况。在后面的布尔表达式"*a > *b"中,
 * 若*a大于*b,表达式就等于1,否则就表达式不成立,也就是布尔值为0,恰恰表示*a等于*b */
   return *a < *b ? -1 : *a > *b;
c0003bce:	8b 45 08             	mov    0x8(%ebp),%eax
c0003bd1:	0f b6 10             	movzbl (%eax),%edx
c0003bd4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003bd7:	0f b6 00             	movzbl (%eax),%eax
c0003bda:	38 c2                	cmp    %al,%dl
c0003bdc:	7c 13                	jl     c0003bf1 <strcmp+0x72>
/work/x86_os_my/lib/string.c:62 (discriminator 1)
c0003bde:	8b 45 08             	mov    0x8(%ebp),%eax
c0003be1:	0f b6 10             	movzbl (%eax),%edx
c0003be4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003be7:	0f b6 00             	movzbl (%eax),%eax
c0003bea:	38 c2                	cmp    %al,%dl
c0003bec:	0f 9f c0             	setg   %al
c0003bef:	eb 05                	jmp    c0003bf6 <strcmp+0x77>
/work/x86_os_my/lib/string.c:62 (discriminator 2)
c0003bf1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
/work/x86_os_my/lib/string.c:63 (discriminator 5)
}
c0003bf6:	c9                   	leave  
c0003bf7:	c3                   	ret    

c0003bf8 <strchr>:
strchr():
/work/x86_os_my/lib/string.c:66

/* 从左到右查找字符串str中首次出现字符ch的地址(不是下标,是地址) */
char* strchr(const char* str, const uint8_t ch) {
c0003bf8:	55                   	push   %ebp
c0003bf9:	89 e5                	mov    %esp,%ebp
c0003bfb:	83 ec 18             	sub    $0x18,%esp
c0003bfe:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003c01:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/lib/string.c:67
   ASSERT(str != NULL);
c0003c04:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003c08:	75 35                	jne    c0003c3f <strchr+0x47>
/work/x86_os_my/lib/string.c:67 (discriminator 1)
c0003c0a:	68 ee 76 00 c0       	push   $0xc00076ee
c0003c0f:	68 44 77 00 c0       	push   $0xc0007744
c0003c14:	6a 43                	push   $0x43
c0003c16:	68 ad 76 00 c0       	push   $0xc00076ad
c0003c1b:	e8 72 e9 ff ff       	call   c0002592 <panic_spin>
c0003c20:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:68 (discriminator 1)
   while (*str != 0) {
c0003c23:	eb 1a                	jmp    c0003c3f <strchr+0x47>
/work/x86_os_my/lib/string.c:69
      if (*str == ch) {
c0003c25:	8b 45 08             	mov    0x8(%ebp),%eax
c0003c28:	0f b6 00             	movzbl (%eax),%eax
c0003c2b:	0f be d0             	movsbl %al,%edx
c0003c2e:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0003c32:	39 c2                	cmp    %eax,%edx
c0003c34:	75 05                	jne    c0003c3b <strchr+0x43>
/work/x86_os_my/lib/string.c:70
	 return (char*)str;	    // 需要强制转化成和返回值类型一样,否则编译器会报const属性丢失,下同.
c0003c36:	8b 45 08             	mov    0x8(%ebp),%eax
c0003c39:	eb 13                	jmp    c0003c4e <strchr+0x56>
/work/x86_os_my/lib/string.c:72
      }
      str++;
c0003c3b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
/work/x86_os_my/lib/string.c:68
}

/* 从左到右查找字符串str中首次出现字符ch的地址(不是下标,是地址) */
char* strchr(const char* str, const uint8_t ch) {
   ASSERT(str != NULL);
   while (*str != 0) {
c0003c3f:	8b 45 08             	mov    0x8(%ebp),%eax
c0003c42:	0f b6 00             	movzbl (%eax),%eax
c0003c45:	84 c0                	test   %al,%al
c0003c47:	75 dc                	jne    c0003c25 <strchr+0x2d>
/work/x86_os_my/lib/string.c:74
      if (*str == ch) {
	 return (char*)str;	    // 需要强制转化成和返回值类型一样,否则编译器会报const属性丢失,下同.
      }
      str++;
   }
   return NULL;
c0003c49:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/lib/string.c:75
}
c0003c4e:	c9                   	leave  
c0003c4f:	c3                   	ret    

c0003c50 <strrchr>:
strrchr():
/work/x86_os_my/lib/string.c:78

/* 从后往前查找字符串str中首次出现字符ch的地址(不是下标,是地址) */
char* strrchr(const char* str, const uint8_t ch) {
c0003c50:	55                   	push   %ebp
c0003c51:	89 e5                	mov    %esp,%ebp
c0003c53:	83 ec 28             	sub    $0x28,%esp
c0003c56:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003c59:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/lib/string.c:79
   ASSERT(str != NULL);
c0003c5c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003c60:	75 19                	jne    c0003c7b <strrchr+0x2b>
/work/x86_os_my/lib/string.c:79 (discriminator 1)
c0003c62:	68 ee 76 00 c0       	push   $0xc00076ee
c0003c67:	68 4c 77 00 c0       	push   $0xc000774c
c0003c6c:	6a 4f                	push   $0x4f
c0003c6e:	68 ad 76 00 c0       	push   $0xc00076ad
c0003c73:	e8 1a e9 ff ff       	call   c0002592 <panic_spin>
c0003c78:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:80
   const char* last_char = NULL;
c0003c7b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/string.c:82
   /* 从头到尾遍历一次,若存在ch字符,last_char总是该字符最后一次出现在串中的地址(不是下标,是地址)*/
   while (*str != 0) {
c0003c82:	eb 1b                	jmp    c0003c9f <strrchr+0x4f>
/work/x86_os_my/lib/string.c:83
      if (*str == ch) {
c0003c84:	8b 45 08             	mov    0x8(%ebp),%eax
c0003c87:	0f b6 00             	movzbl (%eax),%eax
c0003c8a:	0f be d0             	movsbl %al,%edx
c0003c8d:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0003c91:	39 c2                	cmp    %eax,%edx
c0003c93:	75 06                	jne    c0003c9b <strrchr+0x4b>
/work/x86_os_my/lib/string.c:84
	 last_char = str;
c0003c95:	8b 45 08             	mov    0x8(%ebp),%eax
c0003c98:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:86
      }
      str++;
c0003c9b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
/work/x86_os_my/lib/string.c:82
/* 从后往前查找字符串str中首次出现字符ch的地址(不是下标,是地址) */
char* strrchr(const char* str, const uint8_t ch) {
   ASSERT(str != NULL);
   const char* last_char = NULL;
   /* 从头到尾遍历一次,若存在ch字符,last_char总是该字符最后一次出现在串中的地址(不是下标,是地址)*/
   while (*str != 0) {
c0003c9f:	8b 45 08             	mov    0x8(%ebp),%eax
c0003ca2:	0f b6 00             	movzbl (%eax),%eax
c0003ca5:	84 c0                	test   %al,%al
c0003ca7:	75 db                	jne    c0003c84 <strrchr+0x34>
/work/x86_os_my/lib/string.c:88
      if (*str == ch) {
	 last_char = str;
      }
      str++;
   }
   return (char*)last_char;
c0003ca9:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/lib/string.c:89
}
c0003cac:	c9                   	leave  
c0003cad:	c3                   	ret    

c0003cae <strcat>:
strcat():
/work/x86_os_my/lib/string.c:92

/* 将字符串src_拼接到dst_后,将回拼接的串地址 */
char* strcat(char* dst_, const char* src_) {
c0003cae:	55                   	push   %ebp
c0003caf:	89 e5                	mov    %esp,%ebp
c0003cb1:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/string.c:93
   ASSERT(dst_ != NULL && src_ != NULL);
c0003cb4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003cb8:	74 06                	je     c0003cc0 <strcat+0x12>
/work/x86_os_my/lib/string.c:93 (discriminator 1)
c0003cba:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0003cbe:	75 19                	jne    c0003cd9 <strcat+0x2b>
/work/x86_os_my/lib/string.c:93 (discriminator 3)
c0003cc0:	68 ba 76 00 c0       	push   $0xc00076ba
c0003cc5:	68 54 77 00 c0       	push   $0xc0007754
c0003cca:	6a 5d                	push   $0x5d
c0003ccc:	68 ad 76 00 c0       	push   $0xc00076ad
c0003cd1:	e8 bc e8 ff ff       	call   c0002592 <panic_spin>
c0003cd6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:94
   char* str = dst_;
c0003cd9:	8b 45 08             	mov    0x8(%ebp),%eax
c0003cdc:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:95
   while (*str++);
c0003cdf:	90                   	nop
/work/x86_os_my/lib/string.c:95 (discriminator 1)
c0003ce0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003ce3:	8d 50 01             	lea    0x1(%eax),%edx
c0003ce6:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0003ce9:	0f b6 00             	movzbl (%eax),%eax
c0003cec:	84 c0                	test   %al,%al
c0003cee:	75 f0                	jne    c0003ce0 <strcat+0x32>
/work/x86_os_my/lib/string.c:96
   --str;      // 别看错了，--str是独立的一句，并不是while的循环体
c0003cf0:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
/work/x86_os_my/lib/string.c:97
   while((*str++ = *src_++));	 // 当*str被赋值为0时,此时表达式不成立,正好添加了字符串结尾的0.
c0003cf4:	90                   	nop
/work/x86_os_my/lib/string.c:97 (discriminator 1)
c0003cf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003cf8:	8d 50 01             	lea    0x1(%eax),%edx
c0003cfb:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0003cfe:	8b 55 0c             	mov    0xc(%ebp),%edx
c0003d01:	8d 4a 01             	lea    0x1(%edx),%ecx
c0003d04:	89 4d 0c             	mov    %ecx,0xc(%ebp)
c0003d07:	0f b6 12             	movzbl (%edx),%edx
c0003d0a:	88 10                	mov    %dl,(%eax)
c0003d0c:	0f b6 00             	movzbl (%eax),%eax
c0003d0f:	84 c0                	test   %al,%al
c0003d11:	75 e2                	jne    c0003cf5 <strcat+0x47>
/work/x86_os_my/lib/string.c:98
   return dst_;
c0003d13:	8b 45 08             	mov    0x8(%ebp),%eax
/work/x86_os_my/lib/string.c:99
}
c0003d16:	c9                   	leave  
c0003d17:	c3                   	ret    

c0003d18 <strchrs>:
strchrs():
/work/x86_os_my/lib/string.c:102

/* 在字符串str中查找指定字符ch出现的次数 */
uint32_t strchrs(const char* str, uint8_t ch) {
c0003d18:	55                   	push   %ebp
c0003d19:	89 e5                	mov    %esp,%ebp
c0003d1b:	83 ec 28             	sub    $0x28,%esp
c0003d1e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003d21:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/lib/string.c:103
   ASSERT(str != NULL);
c0003d24:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003d28:	75 19                	jne    c0003d43 <strchrs+0x2b>
/work/x86_os_my/lib/string.c:103 (discriminator 1)
c0003d2a:	68 ee 76 00 c0       	push   $0xc00076ee
c0003d2f:	68 5c 77 00 c0       	push   $0xc000775c
c0003d34:	6a 67                	push   $0x67
c0003d36:	68 ad 76 00 c0       	push   $0xc00076ad
c0003d3b:	e8 52 e8 ff ff       	call   c0002592 <panic_spin>
c0003d40:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:104
   uint32_t ch_cnt = 0;
c0003d43:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/string.c:105
   const char* p = str;
c0003d4a:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d4d:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/string.c:106
   while(*p != 0) {
c0003d50:	eb 19                	jmp    c0003d6b <strchrs+0x53>
/work/x86_os_my/lib/string.c:107
      if (*p == ch) {
c0003d52:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003d55:	0f b6 00             	movzbl (%eax),%eax
c0003d58:	0f be d0             	movsbl %al,%edx
c0003d5b:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0003d5f:	39 c2                	cmp    %eax,%edx
c0003d61:	75 04                	jne    c0003d67 <strchrs+0x4f>
/work/x86_os_my/lib/string.c:108
	 ch_cnt++;
c0003d63:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/lib/string.c:110
      }
      p++;
c0003d67:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/lib/string.c:106
/* 在字符串str中查找指定字符ch出现的次数 */
uint32_t strchrs(const char* str, uint8_t ch) {
   ASSERT(str != NULL);
   uint32_t ch_cnt = 0;
   const char* p = str;
   while(*p != 0) {
c0003d6b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003d6e:	0f b6 00             	movzbl (%eax),%eax
c0003d71:	84 c0                	test   %al,%al
c0003d73:	75 dd                	jne    c0003d52 <strchrs+0x3a>
/work/x86_os_my/lib/string.c:112
      if (*p == ch) {
	 ch_cnt++;
      }
      p++;
   }
   return ch_cnt;
c0003d75:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/lib/string.c:113
}
c0003d78:	c9                   	leave  
c0003d79:	c3                   	ret    

c0003d7a <idle>:
idle():
/work/x86_os_my/thread/thread.c:22
static struct list_elem* g_thread_tag;// 用于临时保存队列中的线程结点

extern void switch_to(struct task_struct* cur, struct task_struct* next);

/* idle线程 */
static void idle(void* arg UNUSED) {
c0003d7a:	55                   	push   %ebp
c0003d7b:	89 e5                	mov    %esp,%ebp
c0003d7d:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:24 (discriminator 1)
	while(1) {
		thread_block(TASK_BLOCKED);
c0003d80:	83 ec 0c             	sub    $0xc,%esp
c0003d83:	6a 02                	push   $0x2
c0003d85:	e8 38 04 00 00       	call   c00041c2 <thread_block>
c0003d8a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:28 (discriminator 1)
		//CPU停机
		//唯一能唤醒处理器的就是外部中断
		//执行hlt时必须要保证目前处在开中断的情况下
		asm volatile ("sti; hlt" : : : "memory");
c0003d8d:	fb                   	sti    
c0003d8e:	f4                   	hlt    
/work/x86_os_my/thread/thread.c:29 (discriminator 1)
	}
c0003d8f:	eb ef                	jmp    c0003d80 <idle+0x6>

c0003d91 <running_thread>:
running_thread():
/work/x86_os_my/thread/thread.c:36

/* 返回线程 PCB 地址。
 * 各个线程所用的 0 级栈都是在自己的 PCB 当中，
 * 取当前栈指针的高 20 位，就是当前运行线程的 PCB（PCB是在自然页的起始地址！）
 */
struct task_struct* running_thread() {
c0003d91:	55                   	push   %ebp
c0003d92:	89 e5                	mov    %esp,%ebp
c0003d94:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/thread/thread.c:38
	uint32_t esp;
	asm ("mov %%esp, %0" : "=g" (esp));	//esp寄存器的值，放入变量esp
c0003d97:	89 e0                	mov    %esp,%eax
c0003d99:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/thread/thread.c:39
	return (struct task_struct*)(esp & 0xfffff000);
c0003d9c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003d9f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
/work/x86_os_my/thread/thread.c:40
}
c0003da4:	c9                   	leave  
c0003da5:	c3                   	ret    

c0003da6 <kernel_thread>:
kernel_thread():
/work/x86_os_my/thread/thread.c:43

/* 由kernel_thread去执行function(func_arg) */
static void kernel_thread(thread_func* function, void* func_arg) {
c0003da6:	55                   	push   %ebp
c0003da7:	89 e5                	mov    %esp,%ebp
c0003da9:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:49
	/* 线程的首次运行是由时钟中断处理函数调用任务调度器 schedule 完成的，
	 * 进入中断后处理器会自动关中断，
	 * 因此在执行 function 前要打开中断，否则 kernel_thread 中的 function 在关中断的情况下运行，
	 * 也就是时钟中断被屏蔽了，再也不会调度到新的线程，function 会独享处理器。
	 */
	intr_enable();
c0003dac:	e8 13 de ff ff       	call   c0001bc4 <intr_enable>
/work/x86_os_my/thread/thread.c:50
	function(func_arg); 
c0003db1:	83 ec 0c             	sub    $0xc,%esp
c0003db4:	ff 75 0c             	pushl  0xc(%ebp)
c0003db7:	8b 45 08             	mov    0x8(%ebp),%eax
c0003dba:	ff d0                	call   *%eax
c0003dbc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:51
}
c0003dbf:	90                   	nop
c0003dc0:	c9                   	leave  
c0003dc1:	c3                   	ret    

c0003dc2 <allocate_pid>:
allocate_pid():
/work/x86_os_my/thread/thread.c:54

/* 分配pid */
static pid_t allocate_pid(void) {
c0003dc2:	55                   	push   %ebp
c0003dc3:	89 e5                	mov    %esp,%ebp
c0003dc5:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:56
   static pid_t next_pid = 0;
   lock_acquire(&pid_lock);
c0003dc8:	83 ec 0c             	sub    $0xc,%esp
c0003dcb:	68 34 b0 00 c0       	push   $0xc000b034
c0003dd0:	e8 0a 0b 00 00       	call   c00048df <lock_acquire>
c0003dd5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:57
   next_pid++;
c0003dd8:	0f b7 05 ec a9 00 c0 	movzwl 0xc000a9ec,%eax
c0003ddf:	83 c0 01             	add    $0x1,%eax
c0003de2:	66 a3 ec a9 00 c0    	mov    %ax,0xc000a9ec
/work/x86_os_my/thread/thread.c:58
   lock_release(&pid_lock);
c0003de8:	83 ec 0c             	sub    $0xc,%esp
c0003deb:	68 34 b0 00 c0       	push   $0xc000b034
c0003df0:	e8 61 0b 00 00       	call   c0004956 <lock_release>
c0003df5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:59
   return next_pid;
c0003df8:	0f b7 05 ec a9 00 c0 	movzwl 0xc000a9ec,%eax
/work/x86_os_my/thread/thread.c:60
}
c0003dff:	c9                   	leave  
c0003e00:	c3                   	ret    

c0003e01 <thread_create>:
thread_create():
/work/x86_os_my/thread/thread.c:63

/* 初始化线程栈结构体 struct thread_stack */
void thread_create(struct task_struct* pthread, thread_func function, void* func_arg) {
c0003e01:	55                   	push   %ebp
c0003e02:	89 e5                	mov    %esp,%ebp
c0003e04:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/thread/thread.c:67
	/* 先预留中断使用栈的空间 
	 *（1）将来线程进入中断后，位于 kernel.S 中的中断代码会通过此栈来保存上下文。
	 *（2）将来实现用户进程时，会将用户进程的初始信息放在中断栈中。*/
	pthread->self_kstack -= sizeof(struct intr_stack);
c0003e07:	8b 45 08             	mov    0x8(%ebp),%eax
c0003e0a:	8b 00                	mov    (%eax),%eax
c0003e0c:	8d 90 d0 fe ff ff    	lea    -0x130(%eax),%edx
c0003e12:	8b 45 08             	mov    0x8(%ebp),%eax
c0003e15:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/thread/thread.c:70

	/* 再留出线程栈空间（unused_retaddr 所在的栈）*/
	pthread->self_kstack -= sizeof(struct thread_stack);
c0003e17:	8b 45 08             	mov    0x8(%ebp),%eax
c0003e1a:	8b 00                	mov    (%eax),%eax
c0003e1c:	8d 50 80             	lea    -0x80(%eax),%edx
c0003e1f:	8b 45 08             	mov    0x8(%ebp),%eax
c0003e22:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/thread/thread.c:71
	struct thread_stack* kthread_stack = (struct thread_stack*)pthread->self_kstack;
c0003e24:	8b 45 08             	mov    0x8(%ebp),%eax
c0003e27:	8b 00                	mov    (%eax),%eax
c0003e29:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/thread/thread.c:79
	 * kernel_thread 并不是通过 call 指令调用的，而是通过 ret 来执行的，
	 * 因此无法按照正常的函数调用形式传递 kernel_thread 所需要的参数，
	 * 这样调用是不行的： kernel_thread(function, func_arg)，
	 * 只能将参数放在 kernel_thread 所用的栈中，即处理器进入 kernel_thread 函数体时，
	 * 栈顶为返回地址，栈顶+4 为参数function，栈顶+8 为参数func_arg */
	kthread_stack->eip = kernel_thread;
c0003e2c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003e2f:	c7 40 10 a6 3d 00 c0 	movl   $0xc0003da6,0x10(%eax)
/work/x86_os_my/thread/thread.c:80
	kthread_stack->function = function;
c0003e36:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003e39:	8b 55 0c             	mov    0xc(%ebp),%edx
c0003e3c:	89 50 18             	mov    %edx,0x18(%eax)
/work/x86_os_my/thread/thread.c:81
	kthread_stack->func_arg = func_arg;
c0003e3f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003e42:	8b 55 10             	mov    0x10(%ebp),%edx
c0003e45:	89 50 1c             	mov    %edx,0x1c(%eax)
/work/x86_os_my/thread/thread.c:82
	kthread_stack->ebp = kthread_stack->ebx = kthread_stack->esi = kthread_stack->edi = 0;
c0003e48:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003e4b:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0003e52:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003e55:	8b 50 08             	mov    0x8(%eax),%edx
c0003e58:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003e5b:	89 50 0c             	mov    %edx,0xc(%eax)
c0003e5e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003e61:	8b 50 0c             	mov    0xc(%eax),%edx
c0003e64:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003e67:	89 50 04             	mov    %edx,0x4(%eax)
c0003e6a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003e6d:	8b 50 04             	mov    0x4(%eax),%edx
c0003e70:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003e73:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/thread/thread.c:83
}
c0003e75:	90                   	nop
c0003e76:	c9                   	leave  
c0003e77:	c3                   	ret    

c0003e78 <init_thread>:
init_thread():
/work/x86_os_my/thread/thread.c:86

/* 初始化线程PCB结构体 struct task_struct */
void init_thread(struct task_struct* pthread, char* name, int prio) {
c0003e78:	55                   	push   %ebp
c0003e79:	89 e5                	mov    %esp,%ebp
c0003e7b:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:87
	memset(pthread, 0, sizeof(*pthread));	//清空PCB
c0003e7e:	83 ec 04             	sub    $0x4,%esp
c0003e81:	68 f0 00 00 00       	push   $0xf0
c0003e86:	6a 00                	push   $0x0
c0003e88:	ff 75 08             	pushl  0x8(%ebp)
c0003e8b:	e8 1a fb ff ff       	call   c00039aa <memset>
c0003e90:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:88
	pthread->pid = allocate_pid();
c0003e93:	e8 2a ff ff ff       	call   c0003dc2 <allocate_pid>
c0003e98:	89 c2                	mov    %eax,%edx
c0003e9a:	8b 45 08             	mov    0x8(%ebp),%eax
c0003e9d:	66 89 50 04          	mov    %dx,0x4(%eax)
/work/x86_os_my/thread/thread.c:89
	strcpy(pthread->name, name);
c0003ea1:	8b 45 08             	mov    0x8(%ebp),%eax
c0003ea4:	83 c0 0c             	add    $0xc,%eax
c0003ea7:	83 ec 08             	sub    $0x8,%esp
c0003eaa:	ff 75 0c             	pushl  0xc(%ebp)
c0003ead:	50                   	push   %eax
c0003eae:	e8 2c fc ff ff       	call   c0003adf <strcpy>
c0003eb3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:91

	if (pthread == g_main_thread) {
c0003eb6:	a1 30 b0 00 c0       	mov    0xc000b030,%eax
c0003ebb:	39 45 08             	cmp    %eax,0x8(%ebp)
c0003ebe:	75 0c                	jne    c0003ecc <init_thread+0x54>
/work/x86_os_my/thread/thread.c:93
		/* 由于把main函数也封装成一个线程,并且它一直是运行的,故将其直接设为TASK_RUNNING */
		pthread->status = TASK_RUNNING;
c0003ec0:	8b 45 08             	mov    0x8(%ebp),%eax
c0003ec3:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0003eca:	eb 0a                	jmp    c0003ed6 <init_thread+0x5e>
/work/x86_os_my/thread/thread.c:95
	} else {
		pthread->status = TASK_READY;
c0003ecc:	8b 45 08             	mov    0x8(%ebp),%eax
c0003ecf:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/thread/thread.c:101
	}

	/* self_kstack是线程自己在内核态下使用的栈顶地址 
	 * 线程自己在 0 特权级下所用的栈，在线程创建之初，
	 * 它被初始化为线程 PCB 的最顶端，即(uint32_t)pthread + PG_SIZE。*/
	pthread->self_kstack = (uint32_t*)((uint32_t)pthread + PG_SIZE);
c0003ed6:	8b 45 08             	mov    0x8(%ebp),%eax
c0003ed9:	05 00 10 00 00       	add    $0x1000,%eax
c0003ede:	89 c2                	mov    %eax,%edx
c0003ee0:	8b 45 08             	mov    0x8(%ebp),%eax
c0003ee3:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/thread/thread.c:102
	pthread->priority = prio;
c0003ee5:	8b 45 10             	mov    0x10(%ebp),%eax
c0003ee8:	89 c2                	mov    %eax,%edx
c0003eea:	8b 45 08             	mov    0x8(%ebp),%eax
c0003eed:	88 50 1c             	mov    %dl,0x1c(%eax)
/work/x86_os_my/thread/thread.c:103
	pthread->ticks = prio;
c0003ef0:	8b 45 10             	mov    0x10(%ebp),%eax
c0003ef3:	89 c2                	mov    %eax,%edx
c0003ef5:	8b 45 08             	mov    0x8(%ebp),%eax
c0003ef8:	88 50 1d             	mov    %dl,0x1d(%eax)
/work/x86_os_my/thread/thread.c:104
	pthread->elapsed_ticks = 0;
c0003efb:	8b 45 08             	mov    0x8(%ebp),%eax
c0003efe:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
/work/x86_os_my/thread/thread.c:105
	pthread->pgdir = NULL;
c0003f05:	8b 45 08             	mov    0x8(%ebp),%eax
c0003f08:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
/work/x86_os_my/thread/thread.c:106
	pthread->stack_magic = 0x19870916;	  // 自定义的魔数
c0003f0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0003f12:	c7 80 ec 00 00 00 16 	movl   $0x19870916,0xec(%eax)
c0003f19:	09 87 19 
/work/x86_os_my/thread/thread.c:107
}
c0003f1c:	90                   	nop
c0003f1d:	c9                   	leave  
c0003f1e:	c3                   	ret    

c0003f1f <thread_start>:
thread_start():
/work/x86_os_my/thread/thread.c:110

/* 创建线程 */
struct task_struct* thread_start(char* name, int prio, thread_func function, void* func_arg) {
c0003f1f:	55                   	push   %ebp
c0003f20:	89 e5                	mov    %esp,%ebp
c0003f22:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:112
	/* pcb都位于内核空间,包括用户进程的pcb也是在内核空间 */
	struct task_struct* thread = get_kernel_pages(1);
c0003f25:	83 ec 0c             	sub    $0xc,%esp
c0003f28:	6a 01                	push   $0x1
c0003f2a:	e8 0b ed ff ff       	call   c0002c3a <get_kernel_pages>
c0003f2f:	83 c4 10             	add    $0x10,%esp
c0003f32:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:114

	init_thread(thread, name, prio);			//初始化线程PCB
c0003f35:	83 ec 04             	sub    $0x4,%esp
c0003f38:	ff 75 0c             	pushl  0xc(%ebp)
c0003f3b:	ff 75 08             	pushl  0x8(%ebp)
c0003f3e:	ff 75 f4             	pushl  -0xc(%ebp)
c0003f41:	e8 32 ff ff ff       	call   c0003e78 <init_thread>
c0003f46:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:115
	thread_create(thread, function, func_arg);	//初始化线程栈结构体
c0003f49:	83 ec 04             	sub    $0x4,%esp
c0003f4c:	ff 75 14             	pushl  0x14(%ebp)
c0003f4f:	ff 75 10             	pushl  0x10(%ebp)
c0003f52:	ff 75 f4             	pushl  -0xc(%ebp)
c0003f55:	e8 a7 fe ff ff       	call   c0003e01 <thread_create>
c0003f5a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:117
	
	ASSERT(!elem_find(&thread_ready_list, &thread->general_tag));	// 确保之前不在队列中
c0003f5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003f60:	83 c0 24             	add    $0x24,%eax
c0003f63:	83 ec 08             	sub    $0x8,%esp
c0003f66:	50                   	push   %eax
c0003f67:	68 0c b0 00 c0       	push   $0xc000b00c
c0003f6c:	e8 b6 05 00 00       	call   c0004527 <elem_find>
c0003f71:	83 c4 10             	add    $0x10,%esp
c0003f74:	85 c0                	test   %eax,%eax
c0003f76:	74 19                	je     c0003f91 <thread_start+0x72>
/work/x86_os_my/thread/thread.c:117 (discriminator 1)
c0003f78:	68 64 77 00 c0       	push   $0xc0007764
c0003f7d:	68 e8 79 00 c0       	push   $0xc00079e8
c0003f82:	6a 75                	push   $0x75
c0003f84:	68 99 77 00 c0       	push   $0xc0007799
c0003f89:	e8 04 e6 ff ff       	call   c0002592 <panic_spin>
c0003f8e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:118
	list_append(&thread_ready_list, &thread->general_tag);			// 加入就绪线程队列
c0003f91:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003f94:	83 c0 24             	add    $0x24,%eax
c0003f97:	83 ec 08             	sub    $0x8,%esp
c0003f9a:	50                   	push   %eax
c0003f9b:	68 0c b0 00 c0       	push   $0xc000b00c
c0003fa0:	e8 08 05 00 00       	call   c00044ad <list_append>
c0003fa5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:120

	ASSERT(!elem_find(&thread_all_list, &thread->all_list_tag));
c0003fa8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003fab:	83 c0 2c             	add    $0x2c,%eax
c0003fae:	83 ec 08             	sub    $0x8,%esp
c0003fb1:	50                   	push   %eax
c0003fb2:	68 1c b0 00 c0       	push   $0xc000b01c
c0003fb7:	e8 6b 05 00 00       	call   c0004527 <elem_find>
c0003fbc:	83 c4 10             	add    $0x10,%esp
c0003fbf:	85 c0                	test   %eax,%eax
c0003fc1:	74 19                	je     c0003fdc <thread_start+0xbd>
/work/x86_os_my/thread/thread.c:120 (discriminator 1)
c0003fc3:	68 ac 77 00 c0       	push   $0xc00077ac
c0003fc8:	68 e8 79 00 c0       	push   $0xc00079e8
c0003fcd:	6a 78                	push   $0x78
c0003fcf:	68 99 77 00 c0       	push   $0xc0007799
c0003fd4:	e8 b9 e5 ff ff       	call   c0002592 <panic_spin>
c0003fd9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:121
	list_append(&thread_all_list, &thread->all_list_tag);			// 加入全部线程队列
c0003fdc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003fdf:	83 c0 2c             	add    $0x2c,%eax
c0003fe2:	83 ec 08             	sub    $0x8,%esp
c0003fe5:	50                   	push   %eax
c0003fe6:	68 1c b0 00 c0       	push   $0xc000b01c
c0003feb:	e8 bd 04 00 00       	call   c00044ad <list_append>
c0003ff0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:137
	 * 在执行 ret 后，esp 指向的数值被弹岀到 eip。
	 * 处理器会去执行 kernel_thread 函数。
	 * 在执行 kernel_thread 时，处理器以为栈顶是返回地址，其实只是一个假的占位置的变量 unused_retaddr！
	 * 接着会调用函数 function(func_arg) */
	//asm volatile ("movl %0, %%esp; pop %%ebp; pop %%ebx; pop %%edi; pop %%esi; ret" : : "g" (thread->self_kstack) : "memory");
	return thread;
c0003ff3:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/thread/thread.c:138
}
c0003ff6:	c9                   	leave  
c0003ff7:	c3                   	ret    

c0003ff8 <make_main_thread>:
make_main_thread():
/work/x86_os_my/thread/thread.c:142


/* 将kernel中的main函数完善为主线程 */
static void make_main_thread(void) {
c0003ff8:	55                   	push   %ebp
c0003ff9:	89 e5                	mov    %esp,%ebp
c0003ffb:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:147
	/* 因为main线程早已运行,咱们在loader.S中进入内核时的mov esp, 0xc009f000设置了栈顶，也预留了pcb, 地址为0xc009e000
	 * 主线程不需要再为PCB申请页，只需要通过 init_thread 填充PCB成员：名称和优先级等。
	 * 也不需要再通过 thread_create 构造它的线程栈。
	 */
	g_main_thread = running_thread();	//用栈指针的高20位，当做当前线程的PCB
c0003ffe:	e8 8e fd ff ff       	call   c0003d91 <running_thread>
c0004003:	a3 30 b0 00 c0       	mov    %eax,0xc000b030
/work/x86_os_my/thread/thread.c:148
	init_thread(g_main_thread, "main", 31);
c0004008:	a1 30 b0 00 c0       	mov    0xc000b030,%eax
c000400d:	83 ec 04             	sub    $0x4,%esp
c0004010:	6a 1f                	push   $0x1f
c0004012:	68 e0 77 00 c0       	push   $0xc00077e0
c0004017:	50                   	push   %eax
c0004018:	e8 5b fe ff ff       	call   c0003e78 <init_thread>
c000401d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:152

	/* main函数是当前线程,当前线程不在thread_ready_list中,
	 * 所以只将其加在thread_all_list中. */
	ASSERT(!elem_find(&thread_all_list, &g_main_thread->all_list_tag));
c0004020:	a1 30 b0 00 c0       	mov    0xc000b030,%eax
c0004025:	83 c0 2c             	add    $0x2c,%eax
c0004028:	83 ec 08             	sub    $0x8,%esp
c000402b:	50                   	push   %eax
c000402c:	68 1c b0 00 c0       	push   $0xc000b01c
c0004031:	e8 f1 04 00 00       	call   c0004527 <elem_find>
c0004036:	83 c4 10             	add    $0x10,%esp
c0004039:	85 c0                	test   %eax,%eax
c000403b:	74 1c                	je     c0004059 <make_main_thread+0x61>
/work/x86_os_my/thread/thread.c:152 (discriminator 1)
c000403d:	68 e8 77 00 c0       	push   $0xc00077e8
c0004042:	68 f8 79 00 c0       	push   $0xc00079f8
c0004047:	68 98 00 00 00       	push   $0x98
c000404c:	68 99 77 00 c0       	push   $0xc0007799
c0004051:	e8 3c e5 ff ff       	call   c0002592 <panic_spin>
c0004056:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:153
	list_append(&thread_all_list, &g_main_thread->all_list_tag);
c0004059:	a1 30 b0 00 c0       	mov    0xc000b030,%eax
c000405e:	83 c0 2c             	add    $0x2c,%eax
c0004061:	83 ec 08             	sub    $0x8,%esp
c0004064:	50                   	push   %eax
c0004065:	68 1c b0 00 c0       	push   $0xc000b01c
c000406a:	e8 3e 04 00 00       	call   c00044ad <list_append>
c000406f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:154
}
c0004072:	90                   	nop
c0004073:	c9                   	leave  
c0004074:	c3                   	ret    

c0004075 <schedule>:
schedule():
/work/x86_os_my/thread/thread.c:164
（2）调度器 schedule。
（3）任务切换函数 switch_to。
*/
/* 实现任务调度 */
void schedule()
{
c0004075:	55                   	push   %ebp
c0004076:	89 e5                	mov    %esp,%ebp
c0004078:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:165
	ASSERT(intr_get_status() == INTR_OFF);
c000407b:	e8 b4 db ff ff       	call   c0001c34 <intr_get_status>
c0004080:	85 c0                	test   %eax,%eax
c0004082:	74 1c                	je     c00040a0 <schedule+0x2b>
/work/x86_os_my/thread/thread.c:165 (discriminator 1)
c0004084:	68 23 78 00 c0       	push   $0xc0007823
c0004089:	68 0c 7a 00 c0       	push   $0xc0007a0c
c000408e:	68 a5 00 00 00       	push   $0xa5
c0004093:	68 99 77 00 c0       	push   $0xc0007799
c0004098:	e8 f5 e4 ff ff       	call   c0002592 <panic_spin>
c000409d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:168

	/* 换下 */
	struct task_struct* cur = running_thread(); 
c00040a0:	e8 ec fc ff ff       	call   c0003d91 <running_thread>
c00040a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:169
	if (cur->status == TASK_RUNNING) { // 若此线程只是cpu时间片到了,将其加入到就绪队列尾
c00040a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00040ab:	8b 40 08             	mov    0x8(%eax),%eax
c00040ae:	85 c0                	test   %eax,%eax
c00040b0:	75 65                	jne    c0004117 <schedule+0xa2>
/work/x86_os_my/thread/thread.c:170
		ASSERT(!elem_find(&thread_ready_list, &cur->general_tag));
c00040b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00040b5:	83 c0 24             	add    $0x24,%eax
c00040b8:	83 ec 08             	sub    $0x8,%esp
c00040bb:	50                   	push   %eax
c00040bc:	68 0c b0 00 c0       	push   $0xc000b00c
c00040c1:	e8 61 04 00 00       	call   c0004527 <elem_find>
c00040c6:	83 c4 10             	add    $0x10,%esp
c00040c9:	85 c0                	test   %eax,%eax
c00040cb:	74 1c                	je     c00040e9 <schedule+0x74>
/work/x86_os_my/thread/thread.c:170 (discriminator 1)
c00040cd:	68 44 78 00 c0       	push   $0xc0007844
c00040d2:	68 0c 7a 00 c0       	push   $0xc0007a0c
c00040d7:	68 aa 00 00 00       	push   $0xaa
c00040dc:	68 99 77 00 c0       	push   $0xc0007799
c00040e1:	e8 ac e4 ff ff       	call   c0002592 <panic_spin>
c00040e6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:171
		list_append(&thread_ready_list, &cur->general_tag);
c00040e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00040ec:	83 c0 24             	add    $0x24,%eax
c00040ef:	83 ec 08             	sub    $0x8,%esp
c00040f2:	50                   	push   %eax
c00040f3:	68 0c b0 00 c0       	push   $0xc000b00c
c00040f8:	e8 b0 03 00 00       	call   c00044ad <list_append>
c00040fd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:172
		cur->ticks = cur->priority;     // 重新将当前线程的ticks再重置为其priority;
c0004100:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004103:	0f b6 50 1c          	movzbl 0x1c(%eax),%edx
c0004107:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000410a:	88 50 1d             	mov    %dl,0x1d(%eax)
/work/x86_os_my/thread/thread.c:173
		cur->status = TASK_READY;
c000410d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004110:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/thread/thread.c:180
		/* 若此线程需要某事件发生后才能继续上cpu运行,
		不需要将其加入队列,因为当前线程不在就绪队列中。*/
	}

	/* 如果就绪队列中没有可运行的任务,就唤醒idle */
	if (list_empty(&thread_ready_list)) {
c0004117:	83 ec 0c             	sub    $0xc,%esp
c000411a:	68 0c b0 00 c0       	push   $0xc000b00c
c000411f:	e8 d0 04 00 00       	call   c00045f4 <list_empty>
c0004124:	83 c4 10             	add    $0x10,%esp
c0004127:	85 c0                	test   %eax,%eax
c0004129:	74 11                	je     c000413c <schedule+0xc7>
/work/x86_os_my/thread/thread.c:181
		thread_unblock(idle_thread);
c000412b:	a1 2c b0 00 c0       	mov    0xc000b02c,%eax
c0004130:	83 ec 0c             	sub    $0xc,%esp
c0004133:	50                   	push   %eax
c0004134:	e8 ec 00 00 00       	call   c0004225 <thread_unblock>
c0004139:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:185
	}
	
	/* 换上 */
	ASSERT(!list_empty(&thread_ready_list));
c000413c:	83 ec 0c             	sub    $0xc,%esp
c000413f:	68 0c b0 00 c0       	push   $0xc000b00c
c0004144:	e8 ab 04 00 00       	call   c00045f4 <list_empty>
c0004149:	83 c4 10             	add    $0x10,%esp
c000414c:	85 c0                	test   %eax,%eax
c000414e:	74 1c                	je     c000416c <schedule+0xf7>
/work/x86_os_my/thread/thread.c:185 (discriminator 1)
c0004150:	68 78 78 00 c0       	push   $0xc0007878
c0004155:	68 0c 7a 00 c0       	push   $0xc0007a0c
c000415a:	68 b9 00 00 00       	push   $0xb9
c000415f:	68 99 77 00 c0       	push   $0xc0007799
c0004164:	e8 29 e4 ff ff       	call   c0002592 <panic_spin>
c0004169:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:186
	g_thread_tag = NULL;	  // g_thread_tag清空
c000416c:	c7 05 e8 a9 00 c0 00 	movl   $0x0,0xc000a9e8
c0004173:	00 00 00 
/work/x86_os_my/thread/thread.c:188
	/* 将thread_ready_list队列中的第一个就绪线程弹出,准备将其调度上cpu. */
	g_thread_tag = list_pop(&thread_ready_list);   
c0004176:	83 ec 0c             	sub    $0xc,%esp
c0004179:	68 0c b0 00 c0       	push   $0xc000b00c
c000417e:	e8 82 03 00 00       	call   c0004505 <list_pop>
c0004183:	83 c4 10             	add    $0x10,%esp
c0004186:	a3 e8 a9 00 c0       	mov    %eax,0xc000a9e8
/work/x86_os_my/thread/thread.c:189
	struct task_struct* next = elem2entry(struct task_struct, general_tag, g_thread_tag);
c000418b:	a1 e8 a9 00 c0       	mov    0xc000a9e8,%eax
c0004190:	83 e8 24             	sub    $0x24,%eax
c0004193:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/thread/thread.c:190
	next->status = TASK_RUNNING;
c0004196:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0004199:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
/work/x86_os_my/thread/thread.c:194
	
	/* 1.激活线程或进程的页表,【更新CR3寄存器】
	 * 2.用户进程，更新tss中的esp0为进程的特权级0的栈 */
	process_activate(next);
c00041a0:	83 ec 0c             	sub    $0xc,%esp
c00041a3:	ff 75 f0             	pushl  -0x10(%ebp)
c00041a6:	e8 f7 10 00 00       	call   c00052a2 <process_activate>
c00041ab:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:196

	switch_to(cur, next);
c00041ae:	83 ec 08             	sub    $0x8,%esp
c00041b1:	ff 75 f0             	pushl  -0x10(%ebp)
c00041b4:	ff 75 f4             	pushl  -0xc(%ebp)
c00041b7:	e8 54 04 00 00       	call   c0004610 <switch_to>
c00041bc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:197
}
c00041bf:	90                   	nop
c00041c0:	c9                   	leave  
c00041c1:	c3                   	ret    

c00041c2 <thread_block>:
thread_block():
/work/x86_os_my/thread/thread.c:200

/* 当前线程将自己阻塞,标志其状态为stat. */
void thread_block(enum task_status stat) {
c00041c2:	55                   	push   %ebp
c00041c3:	89 e5                	mov    %esp,%ebp
c00041c5:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:202
	/* stat取值为TASK_BLOCKED,TASK_WAITING,TASK_HANGING,也就是只有这三种状态才不会被调度*/
	ASSERT(((stat == TASK_BLOCKED) || (stat == TASK_WAITING) || (stat == TASK_HANGING)));
c00041c8:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c00041cc:	74 28                	je     c00041f6 <thread_block+0x34>
/work/x86_os_my/thread/thread.c:202 (discriminator 1)
c00041ce:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
c00041d2:	74 22                	je     c00041f6 <thread_block+0x34>
/work/x86_os_my/thread/thread.c:202 (discriminator 2)
c00041d4:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
c00041d8:	74 1c                	je     c00041f6 <thread_block+0x34>
/work/x86_os_my/thread/thread.c:202 (discriminator 3)
c00041da:	68 98 78 00 c0       	push   $0xc0007898
c00041df:	68 18 7a 00 c0       	push   $0xc0007a18
c00041e4:	68 ca 00 00 00       	push   $0xca
c00041e9:	68 99 77 00 c0       	push   $0xc0007799
c00041ee:	e8 9f e3 ff ff       	call   c0002592 <panic_spin>
c00041f3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:203
	enum intr_status old_status = intr_disable();
c00041f6:	e8 f2 d9 ff ff       	call   c0001bed <intr_disable>
c00041fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:205
	
	struct task_struct* cur_thread = running_thread();
c00041fe:	e8 8e fb ff ff       	call   c0003d91 <running_thread>
c0004203:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/thread/thread.c:206
	cur_thread->status = stat;
c0004206:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0004209:	8b 55 08             	mov    0x8(%ebp),%edx
c000420c:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/thread/thread.c:207
	schedule();
c000420f:	e8 61 fe ff ff       	call   c0004075 <schedule>
/work/x86_os_my/thread/thread.c:210
	
	/* 待当前线程被解除阻塞后才继续运行下面的intr_set_status */
	intr_set_status(old_status);
c0004214:	83 ec 0c             	sub    $0xc,%esp
c0004217:	ff 75 f4             	pushl  -0xc(%ebp)
c000421a:	e8 f7 d9 ff ff       	call   c0001c16 <intr_set_status>
c000421f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:211
}
c0004222:	90                   	nop
c0004223:	c9                   	leave  
c0004224:	c3                   	ret    

c0004225 <thread_unblock>:
thread_unblock():
/work/x86_os_my/thread/thread.c:214

/* 将线程pthread解除阻塞 */
void thread_unblock(struct task_struct* pthread) {
c0004225:	55                   	push   %ebp
c0004226:	89 e5                	mov    %esp,%ebp
c0004228:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:215
	enum intr_status old_status = intr_disable();
c000422b:	e8 bd d9 ff ff       	call   c0001bed <intr_disable>
c0004230:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:216
	ASSERT(((pthread->status == TASK_BLOCKED) || (pthread->status == TASK_WAITING) || (pthread->status == TASK_HANGING)));
c0004233:	8b 45 08             	mov    0x8(%ebp),%eax
c0004236:	8b 40 08             	mov    0x8(%eax),%eax
c0004239:	83 f8 02             	cmp    $0x2,%eax
c000423c:	74 32                	je     c0004270 <thread_unblock+0x4b>
/work/x86_os_my/thread/thread.c:216 (discriminator 1)
c000423e:	8b 45 08             	mov    0x8(%ebp),%eax
c0004241:	8b 40 08             	mov    0x8(%eax),%eax
c0004244:	83 f8 03             	cmp    $0x3,%eax
c0004247:	74 27                	je     c0004270 <thread_unblock+0x4b>
/work/x86_os_my/thread/thread.c:216 (discriminator 2)
c0004249:	8b 45 08             	mov    0x8(%ebp),%eax
c000424c:	8b 40 08             	mov    0x8(%eax),%eax
c000424f:	83 f8 04             	cmp    $0x4,%eax
c0004252:	74 1c                	je     c0004270 <thread_unblock+0x4b>
/work/x86_os_my/thread/thread.c:216 (discriminator 3)
c0004254:	68 e8 78 00 c0       	push   $0xc00078e8
c0004259:	68 28 7a 00 c0       	push   $0xc0007a28
c000425e:	68 d8 00 00 00       	push   $0xd8
c0004263:	68 99 77 00 c0       	push   $0xc0007799
c0004268:	e8 25 e3 ff ff       	call   c0002592 <panic_spin>
c000426d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:218
	
	if (pthread->status != TASK_READY) {
c0004270:	8b 45 08             	mov    0x8(%ebp),%eax
c0004273:	8b 40 08             	mov    0x8(%eax),%eax
c0004276:	83 f8 01             	cmp    $0x1,%eax
c0004279:	0f 84 8f 00 00 00    	je     c000430e <thread_unblock+0xe9>
/work/x86_os_my/thread/thread.c:219
		ASSERT(!elem_find(&thread_ready_list, &pthread->general_tag));
c000427f:	8b 45 08             	mov    0x8(%ebp),%eax
c0004282:	83 c0 24             	add    $0x24,%eax
c0004285:	83 ec 08             	sub    $0x8,%esp
c0004288:	50                   	push   %eax
c0004289:	68 0c b0 00 c0       	push   $0xc000b00c
c000428e:	e8 94 02 00 00       	call   c0004527 <elem_find>
c0004293:	83 c4 10             	add    $0x10,%esp
c0004296:	85 c0                	test   %eax,%eax
c0004298:	74 1c                	je     c00042b6 <thread_unblock+0x91>
/work/x86_os_my/thread/thread.c:219 (discriminator 1)
c000429a:	68 58 79 00 c0       	push   $0xc0007958
c000429f:	68 28 7a 00 c0       	push   $0xc0007a28
c00042a4:	68 db 00 00 00       	push   $0xdb
c00042a9:	68 99 77 00 c0       	push   $0xc0007799
c00042ae:	e8 df e2 ff ff       	call   c0002592 <panic_spin>
c00042b3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:220
		if (elem_find(&thread_ready_list, &pthread->general_tag)) {
c00042b6:	8b 45 08             	mov    0x8(%ebp),%eax
c00042b9:	83 c0 24             	add    $0x24,%eax
c00042bc:	83 ec 08             	sub    $0x8,%esp
c00042bf:	50                   	push   %eax
c00042c0:	68 0c b0 00 c0       	push   $0xc000b00c
c00042c5:	e8 5d 02 00 00       	call   c0004527 <elem_find>
c00042ca:	83 c4 10             	add    $0x10,%esp
c00042cd:	85 c0                	test   %eax,%eax
c00042cf:	74 1c                	je     c00042ed <thread_unblock+0xc8>
/work/x86_os_my/thread/thread.c:221
			PANIC("thread_unblock: blocked thread in ready_list\n");
c00042d1:	68 90 79 00 c0       	push   $0xc0007990
c00042d6:	68 28 7a 00 c0       	push   $0xc0007a28
c00042db:	68 dd 00 00 00       	push   $0xdd
c00042e0:	68 99 77 00 c0       	push   $0xc0007799
c00042e5:	e8 a8 e2 ff ff       	call   c0002592 <panic_spin>
c00042ea:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:223
		}
		list_push(&thread_ready_list, &pthread->general_tag);	// 放到队列的最前面,使其尽快得到调度
c00042ed:	8b 45 08             	mov    0x8(%ebp),%eax
c00042f0:	83 c0 24             	add    $0x24,%eax
c00042f3:	83 ec 08             	sub    $0x8,%esp
c00042f6:	50                   	push   %eax
c00042f7:	68 0c b0 00 c0       	push   $0xc000b00c
c00042fc:	e8 8e 01 00 00       	call   c000448f <list_push>
c0004301:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:224
		pthread->status = TASK_READY;
c0004304:	8b 45 08             	mov    0x8(%ebp),%eax
c0004307:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/thread/thread.c:227
	}
	
	intr_set_status(old_status);
c000430e:	83 ec 0c             	sub    $0xc,%esp
c0004311:	ff 75 f4             	pushl  -0xc(%ebp)
c0004314:	e8 fd d8 ff ff       	call   c0001c16 <intr_set_status>
c0004319:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:228
}
c000431c:	90                   	nop
c000431d:	c9                   	leave  
c000431e:	c3                   	ret    

c000431f <thread_yield>:
thread_yield():
/work/x86_os_my/thread/thread.c:231

/* 主动让出cpu，换其它线程运行，但状态仍是ready */
void thread_yield(void) {
c000431f:	55                   	push   %ebp
c0004320:	89 e5                	mov    %esp,%ebp
c0004322:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:232
	struct task_struct* cur = running_thread();
c0004325:	e8 67 fa ff ff       	call   c0003d91 <running_thread>
c000432a:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:233
	enum intr_status old_status = intr_disable();
c000432d:	e8 bb d8 ff ff       	call   c0001bed <intr_disable>
c0004332:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/thread/thread.c:234
	ASSERT(!elem_find(&thread_ready_list, &cur->general_tag));
c0004335:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004338:	83 c0 24             	add    $0x24,%eax
c000433b:	83 ec 08             	sub    $0x8,%esp
c000433e:	50                   	push   %eax
c000433f:	68 0c b0 00 c0       	push   $0xc000b00c
c0004344:	e8 de 01 00 00       	call   c0004527 <elem_find>
c0004349:	83 c4 10             	add    $0x10,%esp
c000434c:	85 c0                	test   %eax,%eax
c000434e:	74 1c                	je     c000436c <thread_yield+0x4d>
/work/x86_os_my/thread/thread.c:234 (discriminator 1)
c0004350:	68 44 78 00 c0       	push   $0xc0007844
c0004355:	68 38 7a 00 c0       	push   $0xc0007a38
c000435a:	68 ea 00 00 00       	push   $0xea
c000435f:	68 99 77 00 c0       	push   $0xc0007799
c0004364:	e8 29 e2 ff ff       	call   c0002592 <panic_spin>
c0004369:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:235
	list_append(&thread_ready_list, &cur->general_tag);
c000436c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000436f:	83 c0 24             	add    $0x24,%eax
c0004372:	83 ec 08             	sub    $0x8,%esp
c0004375:	50                   	push   %eax
c0004376:	68 0c b0 00 c0       	push   $0xc000b00c
c000437b:	e8 2d 01 00 00       	call   c00044ad <list_append>
c0004380:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:236
	cur->status = TASK_READY;
c0004383:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004386:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/thread/thread.c:237
	schedule();
c000438d:	e8 e3 fc ff ff       	call   c0004075 <schedule>
/work/x86_os_my/thread/thread.c:238
	intr_set_status(old_status);
c0004392:	83 ec 0c             	sub    $0xc,%esp
c0004395:	ff 75 f0             	pushl  -0x10(%ebp)
c0004398:	e8 79 d8 ff ff       	call   c0001c16 <intr_set_status>
c000439d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:239
}
c00043a0:	90                   	nop
c00043a1:	c9                   	leave  
c00043a2:	c3                   	ret    

c00043a3 <thread_init>:
thread_init():
/work/x86_os_my/thread/thread.c:242

/* 初始化线程环境 */
void thread_init(void) {
c00043a3:	55                   	push   %ebp
c00043a4:	89 e5                	mov    %esp,%ebp
c00043a6:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:243
	put_str("thread_init start\n");
c00043a9:	83 ec 0c             	sub    $0xc,%esp
c00043ac:	68 be 79 00 c0       	push   $0xc00079be
c00043b1:	e8 6a e0 ff ff       	call   c0002420 <put_str>
c00043b6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:244
	list_init(&thread_ready_list);
c00043b9:	83 ec 0c             	sub    $0xc,%esp
c00043bc:	68 0c b0 00 c0       	push   $0xc000b00c
c00043c1:	e8 56 00 00 00       	call   c000441c <list_init>
c00043c6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:245
	list_init(&thread_all_list);
c00043c9:	83 ec 0c             	sub    $0xc,%esp
c00043cc:	68 1c b0 00 c0       	push   $0xc000b01c
c00043d1:	e8 46 00 00 00       	call   c000441c <list_init>
c00043d6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:246
	lock_init(&pid_lock);
c00043d9:	83 ec 0c             	sub    $0xc,%esp
c00043dc:	68 34 b0 00 c0       	push   $0xc000b034
c00043e1:	e8 1f 03 00 00       	call   c0004705 <lock_init>
c00043e6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:248
	/* 将当前main函数创建为线程 */
	make_main_thread();
c00043e9:	e8 0a fc ff ff       	call   c0003ff8 <make_main_thread>
/work/x86_os_my/thread/thread.c:250
	/* 创建idle线程 */
	idle_thread = thread_start("idle", 10, idle, NULL);
c00043ee:	6a 00                	push   $0x0
c00043f0:	68 7a 3d 00 c0       	push   $0xc0003d7a
c00043f5:	6a 0a                	push   $0xa
c00043f7:	68 d1 79 00 c0       	push   $0xc00079d1
c00043fc:	e8 1e fb ff ff       	call   c0003f1f <thread_start>
c0004401:	83 c4 10             	add    $0x10,%esp
c0004404:	a3 2c b0 00 c0       	mov    %eax,0xc000b02c
/work/x86_os_my/thread/thread.c:251
	put_str("thread_init done\n");
c0004409:	83 ec 0c             	sub    $0xc,%esp
c000440c:	68 d6 79 00 c0       	push   $0xc00079d6
c0004411:	e8 0a e0 ff ff       	call   c0002420 <put_str>
c0004416:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:252
}
c0004419:	90                   	nop
c000441a:	c9                   	leave  
c000441b:	c3                   	ret    

c000441c <list_init>:
list_init():
/work/x86_os_my/lib/kernel/list.c:6
#include "list.h"
#include "interrupt.h"
/* 注意关中断的操作：临界区 */

/* 初始化双向链表list */
void list_init (struct list* list) {
c000441c:	55                   	push   %ebp
c000441d:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/lib/kernel/list.c:7
	list->head.prev = NULL;
c000441f:	8b 45 08             	mov    0x8(%ebp),%eax
c0004422:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/lib/kernel/list.c:8
	list->head.next = &list->tail;
c0004428:	8b 45 08             	mov    0x8(%ebp),%eax
c000442b:	8d 50 08             	lea    0x8(%eax),%edx
c000442e:	8b 45 08             	mov    0x8(%ebp),%eax
c0004431:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/lib/kernel/list.c:9
	list->tail.prev = &list->head;
c0004434:	8b 55 08             	mov    0x8(%ebp),%edx
c0004437:	8b 45 08             	mov    0x8(%ebp),%eax
c000443a:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/lib/kernel/list.c:10
	list->tail.next = NULL;
c000443d:	8b 45 08             	mov    0x8(%ebp),%eax
c0004440:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
/work/x86_os_my/lib/kernel/list.c:11
}
c0004447:	90                   	nop
c0004448:	5d                   	pop    %ebp
c0004449:	c3                   	ret    

c000444a <list_insert_before>:
list_insert_before():
/work/x86_os_my/lib/kernel/list.c:14

/* 把链表元素elem插入在元素before之前 */
void list_insert_before(struct list_elem* before, struct list_elem* elem) { 
c000444a:	55                   	push   %ebp
c000444b:	89 e5                	mov    %esp,%ebp
c000444d:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/kernel/list.c:15
	enum intr_status old_status = intr_disable();
c0004450:	e8 98 d7 ff ff       	call   c0001bed <intr_disable>
c0004455:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/list.c:18

	/* 将before前驱元素的后继元素更新为elem, 暂时使before脱离链表*/ 
	before->prev->next = elem; 
c0004458:	8b 45 08             	mov    0x8(%ebp),%eax
c000445b:	8b 00                	mov    (%eax),%eax
c000445d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0004460:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/lib/kernel/list.c:22

	/* 更新elem自己的前驱结点为before的前驱,
	* 更新elem自己的后继结点为before, 于是before又回到链表 */
	elem->prev = before->prev;
c0004463:	8b 45 08             	mov    0x8(%ebp),%eax
c0004466:	8b 10                	mov    (%eax),%edx
c0004468:	8b 45 0c             	mov    0xc(%ebp),%eax
c000446b:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/lib/kernel/list.c:23
	elem->next = before;
c000446d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0004470:	8b 55 08             	mov    0x8(%ebp),%edx
c0004473:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/lib/kernel/list.c:26

	/* 更新before的前驱结点为elem */
	before->prev = elem;
c0004476:	8b 45 08             	mov    0x8(%ebp),%eax
c0004479:	8b 55 0c             	mov    0xc(%ebp),%edx
c000447c:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/lib/kernel/list.c:28

	intr_set_status(old_status);
c000447e:	83 ec 0c             	sub    $0xc,%esp
c0004481:	ff 75 f4             	pushl  -0xc(%ebp)
c0004484:	e8 8d d7 ff ff       	call   c0001c16 <intr_set_status>
c0004489:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:29
}
c000448c:	90                   	nop
c000448d:	c9                   	leave  
c000448e:	c3                   	ret    

c000448f <list_push>:
list_push():
/work/x86_os_my/lib/kernel/list.c:32

/* 添加元素到列表队首,类似栈push操作 */
void list_push(struct list* plist, struct list_elem* elem) {
c000448f:	55                   	push   %ebp
c0004490:	89 e5                	mov    %esp,%ebp
c0004492:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/lib/kernel/list.c:33
	list_insert_before(plist->head.next, elem); // 在队头插入elem
c0004495:	8b 45 08             	mov    0x8(%ebp),%eax
c0004498:	8b 40 04             	mov    0x4(%eax),%eax
c000449b:	83 ec 08             	sub    $0x8,%esp
c000449e:	ff 75 0c             	pushl  0xc(%ebp)
c00044a1:	50                   	push   %eax
c00044a2:	e8 a3 ff ff ff       	call   c000444a <list_insert_before>
c00044a7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:34
}
c00044aa:	90                   	nop
c00044ab:	c9                   	leave  
c00044ac:	c3                   	ret    

c00044ad <list_append>:
list_append():
/work/x86_os_my/lib/kernel/list.c:37

/* 追加元素到链表队尾,类似队列的先进先出操作 */
void list_append(struct list* plist, struct list_elem* elem) {
c00044ad:	55                   	push   %ebp
c00044ae:	89 e5                	mov    %esp,%ebp
c00044b0:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/lib/kernel/list.c:38
	list_insert_before(&plist->tail, elem);     // 在队尾的前面插入
c00044b3:	8b 45 08             	mov    0x8(%ebp),%eax
c00044b6:	83 c0 08             	add    $0x8,%eax
c00044b9:	83 ec 08             	sub    $0x8,%esp
c00044bc:	ff 75 0c             	pushl  0xc(%ebp)
c00044bf:	50                   	push   %eax
c00044c0:	e8 85 ff ff ff       	call   c000444a <list_insert_before>
c00044c5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:39
}
c00044c8:	90                   	nop
c00044c9:	c9                   	leave  
c00044ca:	c3                   	ret    

c00044cb <list_remove>:
list_remove():
/work/x86_os_my/lib/kernel/list.c:42

/* 使元素pelem脱离链表 */
void list_remove(struct list_elem* pelem) {
c00044cb:	55                   	push   %ebp
c00044cc:	89 e5                	mov    %esp,%ebp
c00044ce:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/kernel/list.c:43
	enum intr_status old_status = intr_disable();
c00044d1:	e8 17 d7 ff ff       	call   c0001bed <intr_disable>
c00044d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/list.c:45

	pelem->prev->next = pelem->next;
c00044d9:	8b 45 08             	mov    0x8(%ebp),%eax
c00044dc:	8b 00                	mov    (%eax),%eax
c00044de:	8b 55 08             	mov    0x8(%ebp),%edx
c00044e1:	8b 52 04             	mov    0x4(%edx),%edx
c00044e4:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/lib/kernel/list.c:46
	pelem->next->prev = pelem->prev;
c00044e7:	8b 45 08             	mov    0x8(%ebp),%eax
c00044ea:	8b 40 04             	mov    0x4(%eax),%eax
c00044ed:	8b 55 08             	mov    0x8(%ebp),%edx
c00044f0:	8b 12                	mov    (%edx),%edx
c00044f2:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/lib/kernel/list.c:48

	intr_set_status(old_status);
c00044f4:	83 ec 0c             	sub    $0xc,%esp
c00044f7:	ff 75 f4             	pushl  -0xc(%ebp)
c00044fa:	e8 17 d7 ff ff       	call   c0001c16 <intr_set_status>
c00044ff:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:49
}
c0004502:	90                   	nop
c0004503:	c9                   	leave  
c0004504:	c3                   	ret    

c0004505 <list_pop>:
list_pop():
/work/x86_os_my/lib/kernel/list.c:52

/* 将链表第一个元素弹出并返回,类似栈的pop操作 */
struct list_elem* list_pop(struct list* plist) {
c0004505:	55                   	push   %ebp
c0004506:	89 e5                	mov    %esp,%ebp
c0004508:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/kernel/list.c:53
	struct list_elem* elem = plist->head.next;
c000450b:	8b 45 08             	mov    0x8(%ebp),%eax
c000450e:	8b 40 04             	mov    0x4(%eax),%eax
c0004511:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/list.c:54
	list_remove(elem);
c0004514:	83 ec 0c             	sub    $0xc,%esp
c0004517:	ff 75 f4             	pushl  -0xc(%ebp)
c000451a:	e8 ac ff ff ff       	call   c00044cb <list_remove>
c000451f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:55
	return elem;
c0004522:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/lib/kernel/list.c:56
} 
c0004525:	c9                   	leave  
c0004526:	c3                   	ret    

c0004527 <elem_find>:
elem_find():
/work/x86_os_my/lib/kernel/list.c:59

/* 从链表中查找元素obj_elem,成功时返回true,失败时返回false */
bool elem_find(struct list* plist, struct list_elem* obj_elem) {
c0004527:	55                   	push   %ebp
c0004528:	89 e5                	mov    %esp,%ebp
c000452a:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:60
	struct list_elem* elem = plist->head.next;
c000452d:	8b 45 08             	mov    0x8(%ebp),%eax
c0004530:	8b 40 04             	mov    0x4(%eax),%eax
c0004533:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/kernel/list.c:61
	while (elem != &plist->tail) {
c0004536:	eb 18                	jmp    c0004550 <elem_find+0x29>
/work/x86_os_my/lib/kernel/list.c:62
	if (elem == obj_elem) {
c0004538:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000453b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c000453e:	75 07                	jne    c0004547 <elem_find+0x20>
/work/x86_os_my/lib/kernel/list.c:63
		return true;
c0004540:	b8 01 00 00 00       	mov    $0x1,%eax
c0004545:	eb 19                	jmp    c0004560 <elem_find+0x39>
/work/x86_os_my/lib/kernel/list.c:65
	}
		elem = elem->next;
c0004547:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000454a:	8b 40 04             	mov    0x4(%eax),%eax
c000454d:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/kernel/list.c:61
} 

/* 从链表中查找元素obj_elem,成功时返回true,失败时返回false */
bool elem_find(struct list* plist, struct list_elem* obj_elem) {
	struct list_elem* elem = plist->head.next;
	while (elem != &plist->tail) {
c0004550:	8b 45 08             	mov    0x8(%ebp),%eax
c0004553:	83 c0 08             	add    $0x8,%eax
c0004556:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0004559:	75 dd                	jne    c0004538 <elem_find+0x11>
/work/x86_os_my/lib/kernel/list.c:67
	if (elem == obj_elem) {
		return true;
	}
		elem = elem->next;
	}
	return false;
c000455b:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/lib/kernel/list.c:68
}
c0004560:	c9                   	leave  
c0004561:	c3                   	ret    

c0004562 <list_traversal>:
list_traversal():
/work/x86_os_my/lib/kernel/list.c:74

/* 把列表plist中的每个元素elem和arg传给回调函数func,
 * arg给func用来判断elem是否符合条件.
 * 本函数的功能是遍历列表内所有元素,逐个判断是否有符合条件的元素。
 * 找到符合条件的元素返回元素指针,否则返回NULL. */
struct list_elem* list_traversal(struct list* plist, function func, int arg) {
c0004562:	55                   	push   %ebp
c0004563:	89 e5                	mov    %esp,%ebp
c0004565:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/kernel/list.c:75
	struct list_elem* elem = plist->head.next;
c0004568:	8b 45 08             	mov    0x8(%ebp),%eax
c000456b:	8b 40 04             	mov    0x4(%eax),%eax
c000456e:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/list.c:77
	/* 如果队列为空,就必然没有符合条件的结点,故直接返回NULL */
	if (list_empty(plist)) { 
c0004571:	83 ec 0c             	sub    $0xc,%esp
c0004574:	ff 75 08             	pushl  0x8(%ebp)
c0004577:	e8 78 00 00 00       	call   c00045f4 <list_empty>
c000457c:	83 c4 10             	add    $0x10,%esp
c000457f:	85 c0                	test   %eax,%eax
c0004581:	74 2a                	je     c00045ad <list_traversal+0x4b>
/work/x86_os_my/lib/kernel/list.c:78
		return NULL;
c0004583:	b8 00 00 00 00       	mov    $0x0,%eax
c0004588:	eb 33                	jmp    c00045bd <list_traversal+0x5b>
/work/x86_os_my/lib/kernel/list.c:82
	}

	while (elem != &plist->tail) {
	if (func(elem, arg)) {		  // func返回ture则认为该元素在回调函数中符合条件,命中,故停止继续遍历
c000458a:	83 ec 08             	sub    $0x8,%esp
c000458d:	ff 75 10             	pushl  0x10(%ebp)
c0004590:	ff 75 f4             	pushl  -0xc(%ebp)
c0004593:	8b 45 0c             	mov    0xc(%ebp),%eax
c0004596:	ff d0                	call   *%eax
c0004598:	83 c4 10             	add    $0x10,%esp
c000459b:	85 c0                	test   %eax,%eax
c000459d:	74 05                	je     c00045a4 <list_traversal+0x42>
/work/x86_os_my/lib/kernel/list.c:83
		return elem;
c000459f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00045a2:	eb 19                	jmp    c00045bd <list_traversal+0x5b>
/work/x86_os_my/lib/kernel/list.c:85
	}					  // 若回调函数func返回true,则继续遍历
		elem = elem->next;	       
c00045a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00045a7:	8b 40 04             	mov    0x4(%eax),%eax
c00045aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/list.c:81
	/* 如果队列为空,就必然没有符合条件的结点,故直接返回NULL */
	if (list_empty(plist)) { 
		return NULL;
	}

	while (elem != &plist->tail) {
c00045ad:	8b 45 08             	mov    0x8(%ebp),%eax
c00045b0:	83 c0 08             	add    $0x8,%eax
c00045b3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c00045b6:	75 d2                	jne    c000458a <list_traversal+0x28>
/work/x86_os_my/lib/kernel/list.c:87
	if (func(elem, arg)) {		  // func返回ture则认为该元素在回调函数中符合条件,命中,故停止继续遍历
		return elem;
	}					  // 若回调函数func返回true,则继续遍历
		elem = elem->next;	       
	}
	return NULL;
c00045b8:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/lib/kernel/list.c:88
}
c00045bd:	c9                   	leave  
c00045be:	c3                   	ret    

c00045bf <list_len>:
list_len():
/work/x86_os_my/lib/kernel/list.c:91

/* 返回链表长度 */
uint32_t list_len(struct list* plist) {
c00045bf:	55                   	push   %ebp
c00045c0:	89 e5                	mov    %esp,%ebp
c00045c2:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:92
	struct list_elem* elem = plist->head.next;
c00045c5:	8b 45 08             	mov    0x8(%ebp),%eax
c00045c8:	8b 40 04             	mov    0x4(%eax),%eax
c00045cb:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/kernel/list.c:93
	uint32_t length = 0;
c00045ce:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
/work/x86_os_my/lib/kernel/list.c:94
	while (elem != &plist->tail) {
c00045d5:	eb 0d                	jmp    c00045e4 <list_len+0x25>
/work/x86_os_my/lib/kernel/list.c:95
		length++; 
c00045d7:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
/work/x86_os_my/lib/kernel/list.c:96
		elem = elem->next;
c00045db:	8b 45 fc             	mov    -0x4(%ebp),%eax
c00045de:	8b 40 04             	mov    0x4(%eax),%eax
c00045e1:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/kernel/list.c:94

/* 返回链表长度 */
uint32_t list_len(struct list* plist) {
	struct list_elem* elem = plist->head.next;
	uint32_t length = 0;
	while (elem != &plist->tail) {
c00045e4:	8b 45 08             	mov    0x8(%ebp),%eax
c00045e7:	83 c0 08             	add    $0x8,%eax
c00045ea:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c00045ed:	75 e8                	jne    c00045d7 <list_len+0x18>
/work/x86_os_my/lib/kernel/list.c:98
		length++; 
		elem = elem->next;
	}
	return length;
c00045ef:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/kernel/list.c:99
}
c00045f2:	c9                   	leave  
c00045f3:	c3                   	ret    

c00045f4 <list_empty>:
list_empty():
/work/x86_os_my/lib/kernel/list.c:102

/* 判断链表是否为空,空时返回true,否则返回false */
bool list_empty(struct list* plist) {		// 判断队列是否为空
c00045f4:	55                   	push   %ebp
c00045f5:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/lib/kernel/list.c:103
	return (plist->head.next == &plist->tail ? true : false);
c00045f7:	8b 45 08             	mov    0x8(%ebp),%eax
c00045fa:	8b 40 04             	mov    0x4(%eax),%eax
c00045fd:	8b 55 08             	mov    0x8(%ebp),%edx
c0004600:	83 c2 08             	add    $0x8,%edx
c0004603:	39 d0                	cmp    %edx,%eax
c0004605:	0f 94 c0             	sete   %al
c0004608:	0f b6 c0             	movzbl %al,%eax
/work/x86_os_my/lib/kernel/list.c:104
}
c000460b:	5d                   	pop    %ebp
c000460c:	c3                   	ret    
c000460d:	66 90                	xchg   %ax,%ax
c000460f:	90                   	nop

c0004610 <switch_to>:
switch_to():
c0004610:	56                   	push   %esi
c0004611:	57                   	push   %edi
c0004612:	53                   	push   %ebx
c0004613:	55                   	push   %ebp
c0004614:	8b 44 24 14          	mov    0x14(%esp),%eax
c0004618:	89 20                	mov    %esp,(%eax)
c000461a:	8b 44 24 18          	mov    0x18(%esp),%eax
c000461e:	8b 20                	mov    (%eax),%esp
c0004620:	5d                   	pop    %ebp
c0004621:	5b                   	pop    %ebx
c0004622:	5f                   	pop    %edi
c0004623:	5e                   	pop    %esi
c0004624:	c3                   	ret    

c0004625 <console_init>:
console_init():
/work/x86_os_my/device/console.c:9
#include "sync.h"
#include "thread.h"
static struct lock console_lock;	// 控制台锁

/* 初始化终端 */
void console_init() {
c0004625:	55                   	push   %ebp
c0004626:	89 e5                	mov    %esp,%ebp
c0004628:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/console.c:10
	lock_init(&console_lock);
c000462b:	83 ec 0c             	sub    $0xc,%esp
c000462e:	68 f0 a9 00 c0       	push   $0xc000a9f0
c0004633:	e8 cd 00 00 00       	call   c0004705 <lock_init>
c0004638:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:11
}
c000463b:	90                   	nop
c000463c:	c9                   	leave  
c000463d:	c3                   	ret    

c000463e <console_acquire>:
console_acquire():
/work/x86_os_my/device/console.c:14

/* 获取终端 */
void console_acquire() {
c000463e:	55                   	push   %ebp
c000463f:	89 e5                	mov    %esp,%ebp
c0004641:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/console.c:15
	lock_acquire(&console_lock);
c0004644:	83 ec 0c             	sub    $0xc,%esp
c0004647:	68 f0 a9 00 c0       	push   $0xc000a9f0
c000464c:	e8 8e 02 00 00       	call   c00048df <lock_acquire>
c0004651:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:16
}
c0004654:	90                   	nop
c0004655:	c9                   	leave  
c0004656:	c3                   	ret    

c0004657 <console_release>:
console_release():
/work/x86_os_my/device/console.c:19

/* 释放终端 */
void console_release() {
c0004657:	55                   	push   %ebp
c0004658:	89 e5                	mov    %esp,%ebp
c000465a:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/console.c:20
	lock_release(&console_lock);
c000465d:	83 ec 0c             	sub    $0xc,%esp
c0004660:	68 f0 a9 00 c0       	push   $0xc000a9f0
c0004665:	e8 ec 02 00 00       	call   c0004956 <lock_release>
c000466a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:21
}
c000466d:	90                   	nop
c000466e:	c9                   	leave  
c000466f:	c3                   	ret    

c0004670 <console_put_str>:
console_put_str():
/work/x86_os_my/device/console.c:24

/* 终端中输出字符串 */
void console_put_str(char* str) {
c0004670:	55                   	push   %ebp
c0004671:	89 e5                	mov    %esp,%ebp
c0004673:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/console.c:25
	console_acquire();
c0004676:	e8 c3 ff ff ff       	call   c000463e <console_acquire>
/work/x86_os_my/device/console.c:26
	put_str(str);
c000467b:	83 ec 0c             	sub    $0xc,%esp
c000467e:	ff 75 08             	pushl  0x8(%ebp)
c0004681:	e8 9a dd ff ff       	call   c0002420 <put_str>
c0004686:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:27
	console_release();
c0004689:	e8 c9 ff ff ff       	call   c0004657 <console_release>
/work/x86_os_my/device/console.c:28
}
c000468e:	90                   	nop
c000468f:	c9                   	leave  
c0004690:	c3                   	ret    

c0004691 <console_put_char>:
console_put_char():
/work/x86_os_my/device/console.c:31

/* 终端中输出字符 */
void console_put_char(uint8_t char_asci) {
c0004691:	55                   	push   %ebp
c0004692:	89 e5                	mov    %esp,%ebp
c0004694:	83 ec 18             	sub    $0x18,%esp
c0004697:	8b 45 08             	mov    0x8(%ebp),%eax
c000469a:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/device/console.c:32
	console_acquire();
c000469d:	e8 9c ff ff ff       	call   c000463e <console_acquire>
/work/x86_os_my/device/console.c:33
	put_char(char_asci);
c00046a2:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c00046a6:	83 ec 0c             	sub    $0xc,%esp
c00046a9:	50                   	push   %eax
c00046aa:	e8 8f dd ff ff       	call   c000243e <put_char>
c00046af:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:34
	console_release();
c00046b2:	e8 a0 ff ff ff       	call   c0004657 <console_release>
/work/x86_os_my/device/console.c:35
}
c00046b7:	90                   	nop
c00046b8:	c9                   	leave  
c00046b9:	c3                   	ret    

c00046ba <console_put_int>:
console_put_int():
/work/x86_os_my/device/console.c:38

/* 终端中输出16进制整数 */
void console_put_int(uint32_t num) {
c00046ba:	55                   	push   %ebp
c00046bb:	89 e5                	mov    %esp,%ebp
c00046bd:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/console.c:39
	console_acquire();
c00046c0:	e8 79 ff ff ff       	call   c000463e <console_acquire>
/work/x86_os_my/device/console.c:40
	put_int(num);
c00046c5:	83 ec 0c             	sub    $0xc,%esp
c00046c8:	ff 75 08             	pushl  0x8(%ebp)
c00046cb:	e8 3b de ff ff       	call   c000250b <put_int>
c00046d0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:41
	console_release();
c00046d3:	e8 7f ff ff ff       	call   c0004657 <console_release>
/work/x86_os_my/device/console.c:42
}
c00046d8:	90                   	nop
c00046d9:	c9                   	leave  
c00046da:	c3                   	ret    

c00046db <sema_init>:
sema_init():
/work/x86_os_my/thread/sync.c:8
#include "global.h"
#include "debug.h"
#include "interrupt.h"

/* 初始化信号量 */
void sema_init(struct semaphore* psema, uint8_t value) {
c00046db:	55                   	push   %ebp
c00046dc:	89 e5                	mov    %esp,%ebp
c00046de:	83 ec 18             	sub    $0x18,%esp
c00046e1:	8b 45 0c             	mov    0xc(%ebp),%eax
c00046e4:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/thread/sync.c:9
	psema->value = value;       // 为信号量赋初值
c00046e7:	8b 45 08             	mov    0x8(%ebp),%eax
c00046ea:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
c00046ee:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/thread/sync.c:10
	list_init(&psema->waiters); //初始化信号量的等待队列
c00046f0:	8b 45 08             	mov    0x8(%ebp),%eax
c00046f3:	83 c0 04             	add    $0x4,%eax
c00046f6:	83 ec 0c             	sub    $0xc,%esp
c00046f9:	50                   	push   %eax
c00046fa:	e8 1d fd ff ff       	call   c000441c <list_init>
c00046ff:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:11
}
c0004702:	90                   	nop
c0004703:	c9                   	leave  
c0004704:	c3                   	ret    

c0004705 <lock_init>:
lock_init():
/work/x86_os_my/thread/sync.c:14

/* 初始化锁plock */
void lock_init(struct lock* plock) {
c0004705:	55                   	push   %ebp
c0004706:	89 e5                	mov    %esp,%ebp
c0004708:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/sync.c:15
	plock->holder = NULL;
c000470b:	8b 45 08             	mov    0x8(%ebp),%eax
c000470e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/thread/sync.c:16
	plock->holder_repeat_nr = 0;
c0004714:	8b 45 08             	mov    0x8(%ebp),%eax
c0004717:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
/work/x86_os_my/thread/sync.c:17
	sema_init(&plock->semaphore, 1);  // 信号量初值为1
c000471e:	8b 45 08             	mov    0x8(%ebp),%eax
c0004721:	83 c0 04             	add    $0x4,%eax
c0004724:	83 ec 08             	sub    $0x8,%esp
c0004727:	6a 01                	push   $0x1
c0004729:	50                   	push   %eax
c000472a:	e8 ac ff ff ff       	call   c00046db <sema_init>
c000472f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:18
}
c0004732:	90                   	nop
c0004733:	c9                   	leave  
c0004734:	c3                   	ret    

c0004735 <sema_down>:
sema_down():
/work/x86_os_my/thread/sync.c:21

/* 信号量down操作 */
void sema_down(struct semaphore* psema) {
c0004735:	55                   	push   %ebp
c0004736:	89 e5                	mov    %esp,%ebp
c0004738:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/sync.c:23
	/* 关中断来保证原子操作 */
	enum intr_status old_status = intr_disable();
c000473b:	e8 ad d4 ff ff       	call   c0001bed <intr_disable>
c0004740:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/sync.c:25
	
	while(psema->value == 0) {			// 若value为0,表示已经被别人持有【while多次判断】
c0004743:	e9 98 00 00 00       	jmp    c00047e0 <sema_down+0xab>
/work/x86_os_my/thread/sync.c:26
		ASSERT(!elem_find(&psema->waiters, &running_thread()->general_tag));
c0004748:	e8 44 f6 ff ff       	call   c0003d91 <running_thread>
c000474d:	8d 50 24             	lea    0x24(%eax),%edx
c0004750:	8b 45 08             	mov    0x8(%ebp),%eax
c0004753:	83 c0 04             	add    $0x4,%eax
c0004756:	83 ec 08             	sub    $0x8,%esp
c0004759:	52                   	push   %edx
c000475a:	50                   	push   %eax
c000475b:	e8 c7 fd ff ff       	call   c0004527 <elem_find>
c0004760:	83 c4 10             	add    $0x10,%esp
c0004763:	85 c0                	test   %eax,%eax
c0004765:	74 19                	je     c0004780 <sema_down+0x4b>
/work/x86_os_my/thread/sync.c:26 (discriminator 1)
c0004767:	68 48 7a 00 c0       	push   $0xc0007a48
c000476c:	68 4c 7b 00 c0       	push   $0xc0007b4c
c0004771:	6a 1a                	push   $0x1a
c0004773:	68 84 7a 00 c0       	push   $0xc0007a84
c0004778:	e8 15 de ff ff       	call   c0002592 <panic_spin>
c000477d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:28
		/* 当前线程不应该已在信号量的waiters队列中 */
		if (elem_find(&psema->waiters, &running_thread()->general_tag)) {
c0004780:	e8 0c f6 ff ff       	call   c0003d91 <running_thread>
c0004785:	8d 50 24             	lea    0x24(%eax),%edx
c0004788:	8b 45 08             	mov    0x8(%ebp),%eax
c000478b:	83 c0 04             	add    $0x4,%eax
c000478e:	83 ec 08             	sub    $0x8,%esp
c0004791:	52                   	push   %edx
c0004792:	50                   	push   %eax
c0004793:	e8 8f fd ff ff       	call   c0004527 <elem_find>
c0004798:	83 c4 10             	add    $0x10,%esp
c000479b:	85 c0                	test   %eax,%eax
c000479d:	74 19                	je     c00047b8 <sema_down+0x83>
/work/x86_os_my/thread/sync.c:29
			PANIC("sema_down: thread blocked has been in waiters_list\n");
c000479f:	68 94 7a 00 c0       	push   $0xc0007a94
c00047a4:	68 4c 7b 00 c0       	push   $0xc0007b4c
c00047a9:	6a 1d                	push   $0x1d
c00047ab:	68 84 7a 00 c0       	push   $0xc0007a84
c00047b0:	e8 dd dd ff ff       	call   c0002592 <panic_spin>
c00047b5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:32
		}
		/* 若信号量的值等于0,则当前线程把自己加入该锁的等待队列,然后阻塞自己 */
		list_append(&psema->waiters, &running_thread()->general_tag);
c00047b8:	e8 d4 f5 ff ff       	call   c0003d91 <running_thread>
c00047bd:	8d 50 24             	lea    0x24(%eax),%edx
c00047c0:	8b 45 08             	mov    0x8(%ebp),%eax
c00047c3:	83 c0 04             	add    $0x4,%eax
c00047c6:	83 ec 08             	sub    $0x8,%esp
c00047c9:	52                   	push   %edx
c00047ca:	50                   	push   %eax
c00047cb:	e8 dd fc ff ff       	call   c00044ad <list_append>
c00047d0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:33
		thread_block(TASK_BLOCKED);		// 阻塞线程,直到被唤醒
c00047d3:	83 ec 0c             	sub    $0xc,%esp
c00047d6:	6a 02                	push   $0x2
c00047d8:	e8 e5 f9 ff ff       	call   c00041c2 <thread_block>
c00047dd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:25
/* 信号量down操作 */
void sema_down(struct semaphore* psema) {
	/* 关中断来保证原子操作 */
	enum intr_status old_status = intr_disable();
	
	while(psema->value == 0) {			// 若value为0,表示已经被别人持有【while多次判断】
c00047e0:	8b 45 08             	mov    0x8(%ebp),%eax
c00047e3:	0f b6 00             	movzbl (%eax),%eax
c00047e6:	84 c0                	test   %al,%al
c00047e8:	0f 84 5a ff ff ff    	je     c0004748 <sema_down+0x13>
/work/x86_os_my/thread/sync.c:36
		/* 若信号量的值等于0,则当前线程把自己加入该锁的等待队列,然后阻塞自己 */
		list_append(&psema->waiters, &running_thread()->general_tag);
		thread_block(TASK_BLOCKED);		// 阻塞线程,直到被唤醒
	}
	/* 若value为1或被唤醒后,会执行下面的代码,也就是获得了锁。*/
	psema->value--;
c00047ee:	8b 45 08             	mov    0x8(%ebp),%eax
c00047f1:	0f b6 00             	movzbl (%eax),%eax
c00047f4:	8d 50 ff             	lea    -0x1(%eax),%edx
c00047f7:	8b 45 08             	mov    0x8(%ebp),%eax
c00047fa:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/thread/sync.c:37
	ASSERT(psema->value == 0);
c00047fc:	8b 45 08             	mov    0x8(%ebp),%eax
c00047ff:	0f b6 00             	movzbl (%eax),%eax
c0004802:	84 c0                	test   %al,%al
c0004804:	74 19                	je     c000481f <sema_down+0xea>
/work/x86_os_my/thread/sync.c:37 (discriminator 1)
c0004806:	68 c8 7a 00 c0       	push   $0xc0007ac8
c000480b:	68 4c 7b 00 c0       	push   $0xc0007b4c
c0004810:	6a 25                	push   $0x25
c0004812:	68 84 7a 00 c0       	push   $0xc0007a84
c0004817:	e8 76 dd ff ff       	call   c0002592 <panic_spin>
c000481c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:40
	
	/* 恢复之前的中断状态 */
	intr_set_status(old_status);
c000481f:	83 ec 0c             	sub    $0xc,%esp
c0004822:	ff 75 f4             	pushl  -0xc(%ebp)
c0004825:	e8 ec d3 ff ff       	call   c0001c16 <intr_set_status>
c000482a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:41
}
c000482d:	90                   	nop
c000482e:	c9                   	leave  
c000482f:	c3                   	ret    

c0004830 <sema_up>:
sema_up():
/work/x86_os_my/thread/sync.c:44

/* 信号量的up操作 */
void sema_up(struct semaphore* psema) {
c0004830:	55                   	push   %ebp
c0004831:	89 e5                	mov    %esp,%ebp
c0004833:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/sync.c:46
	/* 关中断,保证原子操作 */
	enum intr_status old_status = intr_disable();
c0004836:	e8 b2 d3 ff ff       	call   c0001bed <intr_disable>
c000483b:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/sync.c:48
	
	ASSERT(psema->value == 0);
c000483e:	8b 45 08             	mov    0x8(%ebp),%eax
c0004841:	0f b6 00             	movzbl (%eax),%eax
c0004844:	84 c0                	test   %al,%al
c0004846:	74 19                	je     c0004861 <sema_up+0x31>
/work/x86_os_my/thread/sync.c:48 (discriminator 1)
c0004848:	68 c8 7a 00 c0       	push   $0xc0007ac8
c000484d:	68 58 7b 00 c0       	push   $0xc0007b58
c0004852:	6a 30                	push   $0x30
c0004854:	68 84 7a 00 c0       	push   $0xc0007a84
c0004859:	e8 34 dd ff ff       	call   c0002592 <panic_spin>
c000485e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:49
	if (!list_empty(&psema->waiters)) {
c0004861:	8b 45 08             	mov    0x8(%ebp),%eax
c0004864:	83 c0 04             	add    $0x4,%eax
c0004867:	83 ec 0c             	sub    $0xc,%esp
c000486a:	50                   	push   %eax
c000486b:	e8 84 fd ff ff       	call   c00045f4 <list_empty>
c0004870:	83 c4 10             	add    $0x10,%esp
c0004873:	85 c0                	test   %eax,%eax
c0004875:	75 26                	jne    c000489d <sema_up+0x6d>
/work/x86_os_my/thread/sync.c:50
		struct task_struct* thread_blocked = elem2entry(struct task_struct, general_tag, list_pop(&psema->waiters));
c0004877:	8b 45 08             	mov    0x8(%ebp),%eax
c000487a:	83 c0 04             	add    $0x4,%eax
c000487d:	83 ec 0c             	sub    $0xc,%esp
c0004880:	50                   	push   %eax
c0004881:	e8 7f fc ff ff       	call   c0004505 <list_pop>
c0004886:	83 c4 10             	add    $0x10,%esp
c0004889:	83 e8 24             	sub    $0x24,%eax
c000488c:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/thread/sync.c:51
		thread_unblock(thread_blocked);
c000488f:	83 ec 0c             	sub    $0xc,%esp
c0004892:	ff 75 f0             	pushl  -0x10(%ebp)
c0004895:	e8 8b f9 ff ff       	call   c0004225 <thread_unblock>
c000489a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:53
	}
	psema->value++;
c000489d:	8b 45 08             	mov    0x8(%ebp),%eax
c00048a0:	0f b6 00             	movzbl (%eax),%eax
c00048a3:	8d 50 01             	lea    0x1(%eax),%edx
c00048a6:	8b 45 08             	mov    0x8(%ebp),%eax
c00048a9:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/thread/sync.c:54
	ASSERT(psema->value == 1);
c00048ab:	8b 45 08             	mov    0x8(%ebp),%eax
c00048ae:	0f b6 00             	movzbl (%eax),%eax
c00048b1:	3c 01                	cmp    $0x1,%al
c00048b3:	74 19                	je     c00048ce <sema_up+0x9e>
/work/x86_os_my/thread/sync.c:54 (discriminator 1)
c00048b5:	68 da 7a 00 c0       	push   $0xc0007ada
c00048ba:	68 58 7b 00 c0       	push   $0xc0007b58
c00048bf:	6a 36                	push   $0x36
c00048c1:	68 84 7a 00 c0       	push   $0xc0007a84
c00048c6:	e8 c7 dc ff ff       	call   c0002592 <panic_spin>
c00048cb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:57
	
	/* 恢复之前的中断状态 */
	intr_set_status(old_status);
c00048ce:	83 ec 0c             	sub    $0xc,%esp
c00048d1:	ff 75 f4             	pushl  -0xc(%ebp)
c00048d4:	e8 3d d3 ff ff       	call   c0001c16 <intr_set_status>
c00048d9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:58
}
c00048dc:	90                   	nop
c00048dd:	c9                   	leave  
c00048de:	c3                   	ret    

c00048df <lock_acquire>:
lock_acquire():
/work/x86_os_my/thread/sync.c:61

/* 获取锁plock */
void lock_acquire(struct lock* plock) {
c00048df:	55                   	push   %ebp
c00048e0:	89 e5                	mov    %esp,%ebp
c00048e2:	53                   	push   %ebx
c00048e3:	83 ec 04             	sub    $0x4,%esp
/work/x86_os_my/thread/sync.c:63
	/* 排除曾经自己已经持有锁但还未将其释放的情况。*/
	if (plock->holder != running_thread()) {
c00048e6:	8b 45 08             	mov    0x8(%ebp),%eax
c00048e9:	8b 18                	mov    (%eax),%ebx
c00048eb:	e8 a1 f4 ff ff       	call   c0003d91 <running_thread>
c00048f0:	39 c3                	cmp    %eax,%ebx
c00048f2:	74 4d                	je     c0004941 <lock_acquire+0x62>
/work/x86_os_my/thread/sync.c:64
		sema_down(&plock->semaphore);	// 对信号量P操作,原子操作
c00048f4:	8b 45 08             	mov    0x8(%ebp),%eax
c00048f7:	83 c0 04             	add    $0x4,%eax
c00048fa:	83 ec 0c             	sub    $0xc,%esp
c00048fd:	50                   	push   %eax
c00048fe:	e8 32 fe ff ff       	call   c0004735 <sema_down>
c0004903:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:65
		plock->holder = running_thread();
c0004906:	e8 86 f4 ff ff       	call   c0003d91 <running_thread>
c000490b:	89 c2                	mov    %eax,%edx
c000490d:	8b 45 08             	mov    0x8(%ebp),%eax
c0004910:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/thread/sync.c:66
		ASSERT(plock->holder_repeat_nr == 0);
c0004912:	8b 45 08             	mov    0x8(%ebp),%eax
c0004915:	8b 40 18             	mov    0x18(%eax),%eax
c0004918:	85 c0                	test   %eax,%eax
c000491a:	74 19                	je     c0004935 <lock_acquire+0x56>
/work/x86_os_my/thread/sync.c:66 (discriminator 1)
c000491c:	68 ec 7a 00 c0       	push   $0xc0007aec
c0004921:	68 60 7b 00 c0       	push   $0xc0007b60
c0004926:	6a 42                	push   $0x42
c0004928:	68 84 7a 00 c0       	push   $0xc0007a84
c000492d:	e8 60 dc ff ff       	call   c0002592 <panic_spin>
c0004932:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:67
		plock->holder_repeat_nr = 1;
c0004935:	8b 45 08             	mov    0x8(%ebp),%eax
c0004938:	c7 40 18 01 00 00 00 	movl   $0x1,0x18(%eax)
/work/x86_os_my/thread/sync.c:71
	} else {
		plock->holder_repeat_nr++;
	}
}
c000493f:	eb 0f                	jmp    c0004950 <lock_acquire+0x71>
/work/x86_os_my/thread/sync.c:69
		sema_down(&plock->semaphore);	// 对信号量P操作,原子操作
		plock->holder = running_thread();
		ASSERT(plock->holder_repeat_nr == 0);
		plock->holder_repeat_nr = 1;
	} else {
		plock->holder_repeat_nr++;
c0004941:	8b 45 08             	mov    0x8(%ebp),%eax
c0004944:	8b 40 18             	mov    0x18(%eax),%eax
c0004947:	8d 50 01             	lea    0x1(%eax),%edx
c000494a:	8b 45 08             	mov    0x8(%ebp),%eax
c000494d:	89 50 18             	mov    %edx,0x18(%eax)
/work/x86_os_my/thread/sync.c:71
	}
}
c0004950:	90                   	nop
c0004951:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0004954:	c9                   	leave  
c0004955:	c3                   	ret    

c0004956 <lock_release>:
lock_release():
/work/x86_os_my/thread/sync.c:74

/* 释放锁plock */
void lock_release(struct lock* plock) {
c0004956:	55                   	push   %ebp
c0004957:	89 e5                	mov    %esp,%ebp
c0004959:	53                   	push   %ebx
c000495a:	83 ec 04             	sub    $0x4,%esp
/work/x86_os_my/thread/sync.c:75
	ASSERT(plock->holder == running_thread());
c000495d:	8b 45 08             	mov    0x8(%ebp),%eax
c0004960:	8b 18                	mov    (%eax),%ebx
c0004962:	e8 2a f4 ff ff       	call   c0003d91 <running_thread>
c0004967:	39 c3                	cmp    %eax,%ebx
c0004969:	74 19                	je     c0004984 <lock_release+0x2e>
/work/x86_os_my/thread/sync.c:75 (discriminator 1)
c000496b:	68 0c 7b 00 c0       	push   $0xc0007b0c
c0004970:	68 70 7b 00 c0       	push   $0xc0007b70
c0004975:	6a 4b                	push   $0x4b
c0004977:	68 84 7a 00 c0       	push   $0xc0007a84
c000497c:	e8 11 dc ff ff       	call   c0002592 <panic_spin>
c0004981:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:76
	if (plock->holder_repeat_nr > 1) {
c0004984:	8b 45 08             	mov    0x8(%ebp),%eax
c0004987:	8b 40 18             	mov    0x18(%eax),%eax
c000498a:	83 f8 01             	cmp    $0x1,%eax
c000498d:	76 11                	jbe    c00049a0 <lock_release+0x4a>
/work/x86_os_my/thread/sync.c:77
		plock->holder_repeat_nr--;
c000498f:	8b 45 08             	mov    0x8(%ebp),%eax
c0004992:	8b 40 18             	mov    0x18(%eax),%eax
c0004995:	8d 50 ff             	lea    -0x1(%eax),%edx
c0004998:	8b 45 08             	mov    0x8(%ebp),%eax
c000499b:	89 50 18             	mov    %edx,0x18(%eax)
/work/x86_os_my/thread/sync.c:78
		return;
c000499e:	eb 49                	jmp    c00049e9 <lock_release+0x93>
/work/x86_os_my/thread/sync.c:80
	}
	ASSERT(plock->holder_repeat_nr == 1);
c00049a0:	8b 45 08             	mov    0x8(%ebp),%eax
c00049a3:	8b 40 18             	mov    0x18(%eax),%eax
c00049a6:	83 f8 01             	cmp    $0x1,%eax
c00049a9:	74 19                	je     c00049c4 <lock_release+0x6e>
/work/x86_os_my/thread/sync.c:80 (discriminator 1)
c00049ab:	68 2e 7b 00 c0       	push   $0xc0007b2e
c00049b0:	68 70 7b 00 c0       	push   $0xc0007b70
c00049b5:	6a 50                	push   $0x50
c00049b7:	68 84 7a 00 c0       	push   $0xc0007a84
c00049bc:	e8 d1 db ff ff       	call   c0002592 <panic_spin>
c00049c1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:82

	plock->holder = NULL;			// 把锁的持有者置空放在V操作之前
c00049c4:	8b 45 08             	mov    0x8(%ebp),%eax
c00049c7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/thread/sync.c:83
	plock->holder_repeat_nr = 0;
c00049cd:	8b 45 08             	mov    0x8(%ebp),%eax
c00049d0:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
/work/x86_os_my/thread/sync.c:84
	sema_up(&plock->semaphore);		// 信号量的V操作,也是原子操作
c00049d7:	8b 45 08             	mov    0x8(%ebp),%eax
c00049da:	83 c0 04             	add    $0x4,%eax
c00049dd:	83 ec 0c             	sub    $0xc,%esp
c00049e0:	50                   	push   %eax
c00049e1:	e8 4a fe ff ff       	call   c0004830 <sema_up>
c00049e6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:85
}
c00049e9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c00049ec:	c9                   	leave  
c00049ed:	c3                   	ret    

c00049ee <inb>:
inb():
/work/x86_os_my/lib/kernel/io.h:36
   asm volatile ("cld; rep outsw" : "+S" (addr), "+c" (word_cnt) : "d" (port));
/******************************************************/
}

/* 将从端口port读入的一个字节返回 */
static inline uint8_t inb(uint16_t port) {
c00049ee:	55                   	push   %ebp
c00049ef:	89 e5                	mov    %esp,%ebp
c00049f1:	83 ec 14             	sub    $0x14,%esp
c00049f4:	8b 45 08             	mov    0x8(%ebp),%eax
c00049f7:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
/work/x86_os_my/lib/kernel/io.h:38
   uint8_t data;
   asm volatile ("inb %w1, %b0" : "=a" (data) : "Nd" (port));
c00049fb:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c00049ff:	89 c2                	mov    %eax,%edx
c0004a01:	ec                   	in     (%dx),%al
c0004a02:	88 45 ff             	mov    %al,-0x1(%ebp)
/work/x86_os_my/lib/kernel/io.h:39
   return data;
c0004a05:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
/work/x86_os_my/lib/kernel/io.h:40
}
c0004a09:	c9                   	leave  
c0004a0a:	c3                   	ret    

c0004a0b <intr_keyboard_handler>:
intr_keyboard_handler():
/work/x86_os_my/device/keyboard.c:111
/* 0x3A */	{caps_lock_char, caps_lock_char}
/*其它按键暂不处理*/
};

/* 键盘中断处理程序 */
static void intr_keyboard_handler(void) {
c0004a0b:	55                   	push   %ebp
c0004a0c:	89 e5                	mov    %esp,%ebp
c0004a0e:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/device/keyboard.c:114

/* 这次中断发生前的上一次中断,以下任意三个键是否有按下 */
   bool ctrl_down_last = ctrl_status;	  
c0004a11:	a1 0c aa 00 c0       	mov    0xc000aa0c,%eax
c0004a16:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/device/keyboard.c:115
   bool shift_down_last = shift_status;
c0004a19:	a1 10 aa 00 c0       	mov    0xc000aa10,%eax
c0004a1e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/device/keyboard.c:116
   bool caps_lock_last = caps_lock_status;
c0004a21:	a1 18 aa 00 c0       	mov    0xc000aa18,%eax
c0004a26:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/device/keyboard.c:119

   bool break_code;
   uint16_t scancode = inb(KBD_BUF_PORT);
c0004a29:	6a 60                	push   $0x60
c0004a2b:	e8 be ff ff ff       	call   c00049ee <inb>
c0004a30:	83 c4 04             	add    $0x4,%esp
c0004a33:	0f b6 c0             	movzbl %al,%eax
c0004a36:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
/work/x86_os_my/device/keyboard.c:123

/* 若扫描码是e0开头的,表示此键的按下将产生多个扫描码,
 * 所以马上结束此次中断处理函数,等待下一个扫描码进来*/ 
   if (scancode == 0xe0) { 
c0004a3a:	66 81 7d f6 e0 00    	cmpw   $0xe0,-0xa(%ebp)
c0004a40:	75 0f                	jne    c0004a51 <intr_keyboard_handler+0x46>
/work/x86_os_my/device/keyboard.c:124
      ext_scancode = true;    // 打开e0标记
c0004a42:	c7 05 1c aa 00 c0 01 	movl   $0x1,0xc000aa1c
c0004a49:	00 00 00 
/work/x86_os_my/device/keyboard.c:125
      return;
c0004a4c:	e9 50 02 00 00       	jmp    c0004ca1 <intr_keyboard_handler+0x296>
/work/x86_os_my/device/keyboard.c:129
   }

/* 如果上次是以0xe0开头,将扫描码合并 */
   if (ext_scancode) {
c0004a51:	a1 1c aa 00 c0       	mov    0xc000aa1c,%eax
c0004a56:	85 c0                	test   %eax,%eax
c0004a58:	74 10                	je     c0004a6a <intr_keyboard_handler+0x5f>
/work/x86_os_my/device/keyboard.c:130
      scancode = ((0xe000) | scancode);
c0004a5a:	66 81 4d f6 00 e0    	orw    $0xe000,-0xa(%ebp)
/work/x86_os_my/device/keyboard.c:131
      ext_scancode = false;   // 关闭e0标记
c0004a60:	c7 05 1c aa 00 c0 00 	movl   $0x0,0xc000aa1c
c0004a67:	00 00 00 
/work/x86_os_my/device/keyboard.c:134
   }   

   break_code = ((scancode & 0x0080) != 0);   // 获取break_code
c0004a6a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0004a6e:	25 80 00 00 00       	and    $0x80,%eax
c0004a73:	85 c0                	test   %eax,%eax
c0004a75:	0f 95 c0             	setne  %al
c0004a78:	0f b6 c0             	movzbl %al,%eax
c0004a7b:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/device/keyboard.c:136
   
   if (break_code) {   // 若是断码break_code(按键弹起时产生的扫描码)
c0004a7e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0004a82:	74 6a                	je     c0004aee <intr_keyboard_handler+0xe3>
/work/x86_os_my/device/keyboard.c:140

   /* 由于ctrl_r 和alt_r的make_code和break_code都是两字节,
   所以可用下面的方法取make_code,多字节的扫描码暂不处理 */
      uint16_t make_code = (scancode &= 0xff7f);   // 得到其make_code(按键按下时产生的扫描码)
c0004a84:	66 81 65 f6 7f ff    	andw   $0xff7f,-0xa(%ebp)
c0004a8a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0004a8e:	66 89 45 da          	mov    %ax,-0x26(%ebp)
/work/x86_os_my/device/keyboard.c:143

   /* 若是任意以下三个键弹起了,将状态置为false */
      if (make_code == ctrl_l_make || make_code == ctrl_r_make) {
c0004a92:	66 83 7d da 1d       	cmpw   $0x1d,-0x26(%ebp)
c0004a97:	74 08                	je     c0004aa1 <intr_keyboard_handler+0x96>
/work/x86_os_my/device/keyboard.c:143 (discriminator 1)
c0004a99:	66 81 7d da 1d e0    	cmpw   $0xe01d,-0x26(%ebp)
c0004a9f:	75 0c                	jne    c0004aad <intr_keyboard_handler+0xa2>
/work/x86_os_my/device/keyboard.c:144
	 ctrl_status = false;
c0004aa1:	c7 05 0c aa 00 c0 00 	movl   $0x0,0xc000aa0c
c0004aa8:	00 00 00 
c0004aab:	eb 3c                	jmp    c0004ae9 <intr_keyboard_handler+0xde>
/work/x86_os_my/device/keyboard.c:145
      } else if (make_code == shift_l_make || make_code == shift_r_make) {
c0004aad:	66 83 7d da 2a       	cmpw   $0x2a,-0x26(%ebp)
c0004ab2:	74 07                	je     c0004abb <intr_keyboard_handler+0xb0>
/work/x86_os_my/device/keyboard.c:145 (discriminator 1)
c0004ab4:	66 83 7d da 36       	cmpw   $0x36,-0x26(%ebp)
c0004ab9:	75 0c                	jne    c0004ac7 <intr_keyboard_handler+0xbc>
/work/x86_os_my/device/keyboard.c:146
	 shift_status = false;
c0004abb:	c7 05 10 aa 00 c0 00 	movl   $0x0,0xc000aa10
c0004ac2:	00 00 00 
c0004ac5:	eb 22                	jmp    c0004ae9 <intr_keyboard_handler+0xde>
/work/x86_os_my/device/keyboard.c:147
      } else if (make_code == alt_l_make || make_code == alt_r_make) {
c0004ac7:	66 83 7d da 38       	cmpw   $0x38,-0x26(%ebp)
c0004acc:	74 0c                	je     c0004ada <intr_keyboard_handler+0xcf>
/work/x86_os_my/device/keyboard.c:147 (discriminator 1)
c0004ace:	66 81 7d da 38 e0    	cmpw   $0xe038,-0x26(%ebp)
c0004ad4:	0f 85 c0 01 00 00    	jne    c0004c9a <intr_keyboard_handler+0x28f>
/work/x86_os_my/device/keyboard.c:148
	 alt_status = false;
c0004ada:	c7 05 14 aa 00 c0 00 	movl   $0x0,0xc000aa14
c0004ae1:	00 00 00 
/work/x86_os_my/device/keyboard.c:151
      } /* 由于caps_lock不是弹起后关闭,所以需要单独处理 */

      return;   // 直接返回结束此次中断处理程序
c0004ae4:	e9 b1 01 00 00       	jmp    c0004c9a <intr_keyboard_handler+0x28f>
c0004ae9:	e9 ac 01 00 00       	jmp    c0004c9a <intr_keyboard_handler+0x28f>
/work/x86_os_my/device/keyboard.c:155

   } 
   /* 若为通码,只处理数组中定义的键以及alt_right和ctrl键,全是make_code */
   else if ((scancode > 0x00 && scancode < 0x3b) || \
c0004aee:	66 83 7d f6 00       	cmpw   $0x0,-0xa(%ebp)
c0004af3:	74 07                	je     c0004afc <intr_keyboard_handler+0xf1>
/work/x86_os_my/device/keyboard.c:155 (discriminator 1)
c0004af5:	66 83 7d f6 3a       	cmpw   $0x3a,-0xa(%ebp)
c0004afa:	76 14                	jbe    c0004b10 <intr_keyboard_handler+0x105>
/work/x86_os_my/device/keyboard.c:155 (discriminator 3)
c0004afc:	66 81 7d f6 38 e0    	cmpw   $0xe038,-0xa(%ebp)
c0004b02:	74 0c                	je     c0004b10 <intr_keyboard_handler+0x105>
/work/x86_os_my/device/keyboard.c:156
	       (scancode == alt_r_make) || \
c0004b04:	66 81 7d f6 1d e0    	cmpw   $0xe01d,-0xa(%ebp)
c0004b0a:	0f 85 78 01 00 00    	jne    c0004c88 <intr_keyboard_handler+0x27d>
/work/x86_os_my/device/keyboard.c:158
	       (scancode == ctrl_r_make)) {
      bool shift = false;  // 判断是否与shift组合,用来在一维数组中索引对应的字符
c0004b10:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/device/keyboard.c:159
      if ((scancode < 0x0e) || (scancode == 0x29) || \
c0004b17:	66 83 7d f6 0d       	cmpw   $0xd,-0xa(%ebp)
c0004b1c:	76 3f                	jbe    c0004b5d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:159 (discriminator 1)
c0004b1e:	66 83 7d f6 29       	cmpw   $0x29,-0xa(%ebp)
c0004b23:	74 38                	je     c0004b5d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:159 (discriminator 2)
c0004b25:	66 83 7d f6 1a       	cmpw   $0x1a,-0xa(%ebp)
c0004b2a:	74 31                	je     c0004b5d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:160
	 (scancode == 0x1a) || (scancode == 0x1b) || \
c0004b2c:	66 83 7d f6 1b       	cmpw   $0x1b,-0xa(%ebp)
c0004b31:	74 2a                	je     c0004b5d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:160 (discriminator 1)
c0004b33:	66 83 7d f6 2b       	cmpw   $0x2b,-0xa(%ebp)
c0004b38:	74 23                	je     c0004b5d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:161
	 (scancode == 0x2b) || (scancode == 0x27) || \
c0004b3a:	66 83 7d f6 27       	cmpw   $0x27,-0xa(%ebp)
c0004b3f:	74 1c                	je     c0004b5d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:161 (discriminator 1)
c0004b41:	66 83 7d f6 28       	cmpw   $0x28,-0xa(%ebp)
c0004b46:	74 15                	je     c0004b5d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:162
	 (scancode == 0x28) || (scancode == 0x33) || \
c0004b48:	66 83 7d f6 33       	cmpw   $0x33,-0xa(%ebp)
c0004b4d:	74 0e                	je     c0004b5d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:162 (discriminator 1)
c0004b4f:	66 83 7d f6 34       	cmpw   $0x34,-0xa(%ebp)
c0004b54:	74 07                	je     c0004b5d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:163
	 (scancode == 0x34) || (scancode == 0x35)) {  
c0004b56:	66 83 7d f6 35       	cmpw   $0x35,-0xa(%ebp)
c0004b5b:	75 0f                	jne    c0004b6c <intr_keyboard_handler+0x161>
/work/x86_os_my/device/keyboard.c:176
		     0x28 字符'\''
		     0x33 字符','
		     0x34 字符'.'
		     0x35 字符'/' 
	    *******************************/
	 if (shift_down_last) {  // 如果同时按下了shift键
c0004b5d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0004b61:	74 3a                	je     c0004b9d <intr_keyboard_handler+0x192>
/work/x86_os_my/device/keyboard.c:177
	    shift = true;
c0004b63:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
/work/x86_os_my/device/keyboard.c:176
		     0x28 字符'\''
		     0x33 字符','
		     0x34 字符'.'
		     0x35 字符'/' 
	    *******************************/
	 if (shift_down_last) {  // 如果同时按下了shift键
c0004b6a:	eb 31                	jmp    c0004b9d <intr_keyboard_handler+0x192>
/work/x86_os_my/device/keyboard.c:180
	    shift = true;
	 }
      } else {	  // 默认为字母键
	 if (shift_down_last && caps_lock_last) {  // 如果shift和capslock同时按下
c0004b6c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0004b70:	74 0f                	je     c0004b81 <intr_keyboard_handler+0x176>
/work/x86_os_my/device/keyboard.c:180 (discriminator 1)
c0004b72:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0004b76:	74 09                	je     c0004b81 <intr_keyboard_handler+0x176>
/work/x86_os_my/device/keyboard.c:181
	    shift = false;
c0004b78:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0004b7f:	eb 1c                	jmp    c0004b9d <intr_keyboard_handler+0x192>
/work/x86_os_my/device/keyboard.c:182
	 } else if (shift_down_last || caps_lock_last) { // 如果shift和capslock任意被按下
c0004b81:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0004b85:	75 06                	jne    c0004b8d <intr_keyboard_handler+0x182>
/work/x86_os_my/device/keyboard.c:182 (discriminator 1)
c0004b87:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0004b8b:	74 09                	je     c0004b96 <intr_keyboard_handler+0x18b>
/work/x86_os_my/device/keyboard.c:183
	    shift = true;
c0004b8d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c0004b94:	eb 07                	jmp    c0004b9d <intr_keyboard_handler+0x192>
/work/x86_os_my/device/keyboard.c:185
	 } else {
	    shift = false;
c0004b96:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/device/keyboard.c:189
	 }
      }

      uint8_t index = (scancode &= 0x00ff);  // 将扫描码的高字节置0,主要是针对高字节是e0的扫描码.
c0004b9d:	66 81 65 f6 ff 00    	andw   $0xff,-0xa(%ebp)
c0004ba3:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0004ba7:	88 45 d9             	mov    %al,-0x27(%ebp)
/work/x86_os_my/device/keyboard.c:190
      char cur_char = keymap[index][shift];  // 在数组中找到对应的字符
c0004baa:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0004bae:	8d 14 00             	lea    (%eax,%eax,1),%edx
c0004bb1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0004bb4:	01 d0                	add    %edx,%eax
c0004bb6:	05 60 a5 00 c0       	add    $0xc000a560,%eax
c0004bbb:	0f b6 00             	movzbl (%eax),%eax
c0004bbe:	88 45 ef             	mov    %al,-0x11(%ebp)
/work/x86_os_my/device/keyboard.c:193

   /* 如果cur_char不为0,也就是ascii码为除'\0'外的字符就加入键盘缓冲区中 */
      if (cur_char) {
c0004bc1:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
c0004bc5:	74 54                	je     c0004c1b <intr_keyboard_handler+0x210>
/work/x86_os_my/device/keyboard.c:200
     /*****************  快捷键ctrl+l和ctrl+u的处理 *********************
      * 下面是把ctrl+l和ctrl+u这两种组合键产生的字符置为:
      * cur_char的asc码-字符a的asc码, 此差值比较小,
      * 属于asc码表中不可见的字符部分.故不会产生可见字符.
      * 我们在shell中将ascii值为l-a和u-a的分别处理为清屏和删除输入的快捷键*/
	 if ((ctrl_down_last && cur_char == 'l') || (ctrl_down_last && cur_char == 'u')) {
c0004bc7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0004bcb:	74 06                	je     c0004bd3 <intr_keyboard_handler+0x1c8>
/work/x86_os_my/device/keyboard.c:200 (discriminator 1)
c0004bcd:	80 7d ef 6c          	cmpb   $0x6c,-0x11(%ebp)
c0004bd1:	74 0c                	je     c0004bdf <intr_keyboard_handler+0x1d4>
/work/x86_os_my/device/keyboard.c:200 (discriminator 3)
c0004bd3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0004bd7:	74 10                	je     c0004be9 <intr_keyboard_handler+0x1de>
/work/x86_os_my/device/keyboard.c:200 (discriminator 4)
c0004bd9:	80 7d ef 75          	cmpb   $0x75,-0x11(%ebp)
c0004bdd:	75 0a                	jne    c0004be9 <intr_keyboard_handler+0x1de>
/work/x86_os_my/device/keyboard.c:201
	    cur_char -= 'a';
c0004bdf:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c0004be3:	83 e8 61             	sub    $0x61,%eax
c0004be6:	88 45 ef             	mov    %al,-0x11(%ebp)
/work/x86_os_my/device/keyboard.c:207
	 }
      /****************************************************************/
      
   /* 若kbd_buf中未满并且待加入的cur_char不为0,
    * 则将其加入到缓冲区kbd_buf中 */
	 if (!ioq_full(&kbd_buf)) {
c0004be9:	83 ec 0c             	sub    $0xc,%esp
c0004bec:	68 60 b0 00 c0       	push   $0xc000b060
c0004bf1:	e8 58 01 00 00       	call   c0004d4e <ioq_full>
c0004bf6:	83 c4 10             	add    $0x10,%esp
c0004bf9:	85 c0                	test   %eax,%eax
c0004bfb:	0f 85 9c 00 00 00    	jne    c0004c9d <intr_keyboard_handler+0x292>
/work/x86_os_my/device/keyboard.c:208
	    ioq_putchar(&kbd_buf, cur_char);
c0004c01:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
c0004c05:	83 ec 08             	sub    $0x8,%esp
c0004c08:	50                   	push   %eax
c0004c09:	68 60 b0 00 c0       	push   $0xc000b060
c0004c0e:	e8 0d 03 00 00       	call   c0004f20 <ioq_putchar>
c0004c13:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/keyboard.c:210
	 }
	 return;
c0004c16:	e9 82 00 00 00       	jmp    c0004c9d <intr_keyboard_handler+0x292>
/work/x86_os_my/device/keyboard.c:214
      }

      /* 记录本次是否按下了下面几类控制键之一,供下次键入时判断组合键 */
      if (scancode == ctrl_l_make || scancode == ctrl_r_make) {
c0004c1b:	66 83 7d f6 1d       	cmpw   $0x1d,-0xa(%ebp)
c0004c20:	74 08                	je     c0004c2a <intr_keyboard_handler+0x21f>
/work/x86_os_my/device/keyboard.c:214 (discriminator 1)
c0004c22:	66 81 7d f6 1d e0    	cmpw   $0xe01d,-0xa(%ebp)
c0004c28:	75 0c                	jne    c0004c36 <intr_keyboard_handler+0x22b>
/work/x86_os_my/device/keyboard.c:215
	 ctrl_status = true;
c0004c2a:	c7 05 0c aa 00 c0 01 	movl   $0x1,0xc000aa0c
c0004c31:	00 00 00 
c0004c34:	eb 50                	jmp    c0004c86 <intr_keyboard_handler+0x27b>
/work/x86_os_my/device/keyboard.c:216
      } else if (scancode == shift_l_make || scancode == shift_r_make) {
c0004c36:	66 83 7d f6 2a       	cmpw   $0x2a,-0xa(%ebp)
c0004c3b:	74 07                	je     c0004c44 <intr_keyboard_handler+0x239>
/work/x86_os_my/device/keyboard.c:216 (discriminator 1)
c0004c3d:	66 83 7d f6 36       	cmpw   $0x36,-0xa(%ebp)
c0004c42:	75 0c                	jne    c0004c50 <intr_keyboard_handler+0x245>
/work/x86_os_my/device/keyboard.c:217
	 shift_status = true;
c0004c44:	c7 05 10 aa 00 c0 01 	movl   $0x1,0xc000aa10
c0004c4b:	00 00 00 
c0004c4e:	eb 36                	jmp    c0004c86 <intr_keyboard_handler+0x27b>
/work/x86_os_my/device/keyboard.c:218
      } else if (scancode == alt_l_make || scancode == alt_r_make) {
c0004c50:	66 83 7d f6 38       	cmpw   $0x38,-0xa(%ebp)
c0004c55:	74 08                	je     c0004c5f <intr_keyboard_handler+0x254>
/work/x86_os_my/device/keyboard.c:218 (discriminator 1)
c0004c57:	66 81 7d f6 38 e0    	cmpw   $0xe038,-0xa(%ebp)
c0004c5d:	75 0c                	jne    c0004c6b <intr_keyboard_handler+0x260>
/work/x86_os_my/device/keyboard.c:219
	 alt_status = true;
c0004c5f:	c7 05 14 aa 00 c0 01 	movl   $0x1,0xc000aa14
c0004c66:	00 00 00 
c0004c69:	eb 1b                	jmp    c0004c86 <intr_keyboard_handler+0x27b>
/work/x86_os_my/device/keyboard.c:220
      } else if (scancode == caps_lock_make) {
c0004c6b:	66 83 7d f6 3a       	cmpw   $0x3a,-0xa(%ebp)
c0004c70:	75 2e                	jne    c0004ca0 <intr_keyboard_handler+0x295>
/work/x86_os_my/device/keyboard.c:223
      /* 不管之前是否有按下caps_lock键,当再次按下时则状态取反,
       * 即:已经开启时,再按下同样的键是关闭。关闭时按下表示开启。*/
	 caps_lock_status = !caps_lock_status;
c0004c72:	a1 18 aa 00 c0       	mov    0xc000aa18,%eax
c0004c77:	85 c0                	test   %eax,%eax
c0004c79:	0f 94 c0             	sete   %al
c0004c7c:	0f b6 c0             	movzbl %al,%eax
c0004c7f:	a3 18 aa 00 c0       	mov    %eax,0xc000aa18
/work/x86_os_my/device/keyboard.c:157

   } 
   /* 若为通码,只处理数组中定义的键以及alt_right和ctrl键,全是make_code */
   else if ((scancode > 0x00 && scancode < 0x3b) || \
	       (scancode == alt_r_make) || \
	       (scancode == ctrl_r_make)) {
c0004c84:	eb 1a                	jmp    c0004ca0 <intr_keyboard_handler+0x295>
/work/x86_os_my/device/keyboard.c:157 (discriminator 3)
c0004c86:	eb 18                	jmp    c0004ca0 <intr_keyboard_handler+0x295>
/work/x86_os_my/device/keyboard.c:226
      /* 不管之前是否有按下caps_lock键,当再次按下时则状态取反,
       * 即:已经开启时,再按下同样的键是关闭。关闭时按下表示开启。*/
	 caps_lock_status = !caps_lock_status;
      }
   } else {
      put_str("unknown key\n");
c0004c88:	83 ec 0c             	sub    $0xc,%esp
c0004c8b:	68 7d 7b 00 c0       	push   $0xc0007b7d
c0004c90:	e8 8b d7 ff ff       	call   c0002420 <put_str>
c0004c95:	83 c4 10             	add    $0x10,%esp
c0004c98:	eb 07                	jmp    c0004ca1 <intr_keyboard_handler+0x296>
/work/x86_os_my/device/keyboard.c:151
	 shift_status = false;
      } else if (make_code == alt_l_make || make_code == alt_r_make) {
	 alt_status = false;
      } /* 由于caps_lock不是弹起后关闭,所以需要单独处理 */

      return;   // 直接返回结束此次中断处理程序
c0004c9a:	90                   	nop
c0004c9b:	eb 04                	jmp    c0004ca1 <intr_keyboard_handler+0x296>
/work/x86_os_my/device/keyboard.c:210
   /* 若kbd_buf中未满并且待加入的cur_char不为0,
    * 则将其加入到缓冲区kbd_buf中 */
	 if (!ioq_full(&kbd_buf)) {
	    ioq_putchar(&kbd_buf, cur_char);
	 }
	 return;
c0004c9d:	90                   	nop
c0004c9e:	eb 01                	jmp    c0004ca1 <intr_keyboard_handler+0x296>
/work/x86_os_my/device/keyboard.c:157

   } 
   /* 若为通码,只处理数组中定义的键以及alt_right和ctrl键,全是make_code */
   else if ((scancode > 0x00 && scancode < 0x3b) || \
	       (scancode == alt_r_make) || \
	       (scancode == ctrl_r_make)) {
c0004ca0:	90                   	nop
/work/x86_os_my/device/keyboard.c:228
	 caps_lock_status = !caps_lock_status;
      }
   } else {
      put_str("unknown key\n");
   }
}
c0004ca1:	c9                   	leave  
c0004ca2:	c3                   	ret    

c0004ca3 <keyboard_init>:
keyboard_init():
/work/x86_os_my/device/keyboard.c:231

/* 键盘初始化 */
void keyboard_init() {
c0004ca3:	55                   	push   %ebp
c0004ca4:	89 e5                	mov    %esp,%ebp
c0004ca6:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/keyboard.c:232
   put_str("keyboard init start\n");
c0004ca9:	83 ec 0c             	sub    $0xc,%esp
c0004cac:	68 8a 7b 00 c0       	push   $0xc0007b8a
c0004cb1:	e8 6a d7 ff ff       	call   c0002420 <put_str>
c0004cb6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/keyboard.c:233
   ioqueue_init(&kbd_buf);
c0004cb9:	83 ec 0c             	sub    $0xc,%esp
c0004cbc:	68 60 b0 00 c0       	push   $0xc000b060
c0004cc1:	e8 28 00 00 00       	call   c0004cee <ioqueue_init>
c0004cc6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/keyboard.c:234
   register_handler(0x21, intr_keyboard_handler);
c0004cc9:	83 ec 08             	sub    $0x8,%esp
c0004ccc:	68 0b 4a 00 c0       	push   $0xc0004a0b
c0004cd1:	6a 21                	push   $0x21
c0004cd3:	e8 80 cf ff ff       	call   c0001c58 <register_handler>
c0004cd8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/keyboard.c:235
   put_str("keyboard init done\n");
c0004cdb:	83 ec 0c             	sub    $0xc,%esp
c0004cde:	68 9f 7b 00 c0       	push   $0xc0007b9f
c0004ce3:	e8 38 d7 ff ff       	call   c0002420 <put_str>
c0004ce8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/keyboard.c:236
}
c0004ceb:	90                   	nop
c0004cec:	c9                   	leave  
c0004ced:	c3                   	ret    

c0004cee <ioqueue_init>:
ioqueue_init():
/work/x86_os_my/device/ioqueue.c:7
#include "interrupt.h"
#include "global.h"
#include "debug.h"

/* 初始化io队列ioq */
void ioqueue_init(struct ioqueue* ioq) {
c0004cee:	55                   	push   %ebp
c0004cef:	89 e5                	mov    %esp,%ebp
c0004cf1:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/ioqueue.c:8
   lock_init(&ioq->lock);     // 初始化io队列的锁
c0004cf4:	8b 45 08             	mov    0x8(%ebp),%eax
c0004cf7:	83 ec 0c             	sub    $0xc,%esp
c0004cfa:	50                   	push   %eax
c0004cfb:	e8 05 fa ff ff       	call   c0004705 <lock_init>
c0004d00:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:9
   ioq->producer = ioq->consumer = NULL;  // 生产者和消费者置空
c0004d03:	8b 45 08             	mov    0x8(%ebp),%eax
c0004d06:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
c0004d0d:	8b 45 08             	mov    0x8(%ebp),%eax
c0004d10:	8b 50 20             	mov    0x20(%eax),%edx
c0004d13:	8b 45 08             	mov    0x8(%ebp),%eax
c0004d16:	89 50 1c             	mov    %edx,0x1c(%eax)
/work/x86_os_my/device/ioqueue.c:10
   ioq->head = ioq->tail = 0; // 队列的首尾指针指向缓冲区数组第0个位置
c0004d19:	8b 45 08             	mov    0x8(%ebp),%eax
c0004d1c:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)
c0004d23:	8b 45 08             	mov    0x8(%ebp),%eax
c0004d26:	8b 50 68             	mov    0x68(%eax),%edx
c0004d29:	8b 45 08             	mov    0x8(%ebp),%eax
c0004d2c:	89 50 64             	mov    %edx,0x64(%eax)
/work/x86_os_my/device/ioqueue.c:11
}
c0004d2f:	90                   	nop
c0004d30:	c9                   	leave  
c0004d31:	c3                   	ret    

c0004d32 <next_pos>:
next_pos():
/work/x86_os_my/device/ioqueue.c:14

/* 返回pos在缓冲区中的下一个位置值 */
static int32_t next_pos(int32_t pos) {
c0004d32:	55                   	push   %ebp
c0004d33:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/device/ioqueue.c:15
   return (pos + 1) % bufsize; 
c0004d35:	8b 45 08             	mov    0x8(%ebp),%eax
c0004d38:	8d 50 01             	lea    0x1(%eax),%edx
c0004d3b:	89 d0                	mov    %edx,%eax
c0004d3d:	c1 f8 1f             	sar    $0x1f,%eax
c0004d40:	c1 e8 1a             	shr    $0x1a,%eax
c0004d43:	01 c2                	add    %eax,%edx
c0004d45:	83 e2 3f             	and    $0x3f,%edx
c0004d48:	29 c2                	sub    %eax,%edx
c0004d4a:	89 d0                	mov    %edx,%eax
/work/x86_os_my/device/ioqueue.c:16
}
c0004d4c:	5d                   	pop    %ebp
c0004d4d:	c3                   	ret    

c0004d4e <ioq_full>:
ioq_full():
/work/x86_os_my/device/ioqueue.c:19

/* 判断队列是否已满 */
bool ioq_full(struct ioqueue* ioq) {
c0004d4e:	55                   	push   %ebp
c0004d4f:	89 e5                	mov    %esp,%ebp
c0004d51:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/ioqueue.c:20
   ASSERT(intr_get_status() == INTR_OFF);
c0004d54:	e8 db ce ff ff       	call   c0001c34 <intr_get_status>
c0004d59:	85 c0                	test   %eax,%eax
c0004d5b:	74 19                	je     c0004d76 <ioq_full+0x28>
/work/x86_os_my/device/ioqueue.c:20 (discriminator 1)
c0004d5d:	68 b4 7b 00 c0       	push   $0xc0007bb4
c0004d62:	68 18 7c 00 c0       	push   $0xc0007c18
c0004d67:	6a 14                	push   $0x14
c0004d69:	68 d2 7b 00 c0       	push   $0xc0007bd2
c0004d6e:	e8 1f d8 ff ff       	call   c0002592 <panic_spin>
c0004d73:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:21
   return next_pos(ioq->head) == ioq->tail;
c0004d76:	8b 45 08             	mov    0x8(%ebp),%eax
c0004d79:	8b 40 64             	mov    0x64(%eax),%eax
c0004d7c:	83 ec 0c             	sub    $0xc,%esp
c0004d7f:	50                   	push   %eax
c0004d80:	e8 ad ff ff ff       	call   c0004d32 <next_pos>
c0004d85:	83 c4 10             	add    $0x10,%esp
c0004d88:	89 c2                	mov    %eax,%edx
c0004d8a:	8b 45 08             	mov    0x8(%ebp),%eax
c0004d8d:	8b 40 68             	mov    0x68(%eax),%eax
c0004d90:	39 c2                	cmp    %eax,%edx
c0004d92:	0f 94 c0             	sete   %al
c0004d95:	0f b6 c0             	movzbl %al,%eax
/work/x86_os_my/device/ioqueue.c:22
}
c0004d98:	c9                   	leave  
c0004d99:	c3                   	ret    

c0004d9a <ioq_empty>:
ioq_empty():
/work/x86_os_my/device/ioqueue.c:25

/* 判断队列是否已空 */
static bool ioq_empty(struct ioqueue* ioq) {
c0004d9a:	55                   	push   %ebp
c0004d9b:	89 e5                	mov    %esp,%ebp
c0004d9d:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/ioqueue.c:26
   ASSERT(intr_get_status() == INTR_OFF);
c0004da0:	e8 8f ce ff ff       	call   c0001c34 <intr_get_status>
c0004da5:	85 c0                	test   %eax,%eax
c0004da7:	74 19                	je     c0004dc2 <ioq_empty+0x28>
/work/x86_os_my/device/ioqueue.c:26 (discriminator 1)
c0004da9:	68 b4 7b 00 c0       	push   $0xc0007bb4
c0004dae:	68 24 7c 00 c0       	push   $0xc0007c24
c0004db3:	6a 1a                	push   $0x1a
c0004db5:	68 d2 7b 00 c0       	push   $0xc0007bd2
c0004dba:	e8 d3 d7 ff ff       	call   c0002592 <panic_spin>
c0004dbf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:27
   return ioq->head == ioq->tail;
c0004dc2:	8b 45 08             	mov    0x8(%ebp),%eax
c0004dc5:	8b 50 64             	mov    0x64(%eax),%edx
c0004dc8:	8b 45 08             	mov    0x8(%ebp),%eax
c0004dcb:	8b 40 68             	mov    0x68(%eax),%eax
c0004dce:	39 c2                	cmp    %eax,%edx
c0004dd0:	0f 94 c0             	sete   %al
c0004dd3:	0f b6 c0             	movzbl %al,%eax
/work/x86_os_my/device/ioqueue.c:28
}
c0004dd6:	c9                   	leave  
c0004dd7:	c3                   	ret    

c0004dd8 <ioq_wait>:
ioq_wait():
/work/x86_os_my/device/ioqueue.c:31

/* 使当前生产者或消费者在此缓冲区上等待 */
static void ioq_wait(struct task_struct** waiter) {
c0004dd8:	55                   	push   %ebp
c0004dd9:	89 e5                	mov    %esp,%ebp
c0004ddb:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/ioqueue.c:32
   ASSERT(*waiter == NULL && waiter != NULL);
c0004dde:	8b 45 08             	mov    0x8(%ebp),%eax
c0004de1:	8b 00                	mov    (%eax),%eax
c0004de3:	85 c0                	test   %eax,%eax
c0004de5:	75 06                	jne    c0004ded <ioq_wait+0x15>
/work/x86_os_my/device/ioqueue.c:32 (discriminator 1)
c0004de7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0004deb:	75 19                	jne    c0004e06 <ioq_wait+0x2e>
/work/x86_os_my/device/ioqueue.c:32 (discriminator 3)
c0004ded:	68 e4 7b 00 c0       	push   $0xc0007be4
c0004df2:	68 30 7c 00 c0       	push   $0xc0007c30
c0004df7:	6a 20                	push   $0x20
c0004df9:	68 d2 7b 00 c0       	push   $0xc0007bd2
c0004dfe:	e8 8f d7 ff ff       	call   c0002592 <panic_spin>
c0004e03:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:33
   *waiter = running_thread();
c0004e06:	e8 86 ef ff ff       	call   c0003d91 <running_thread>
c0004e0b:	89 c2                	mov    %eax,%edx
c0004e0d:	8b 45 08             	mov    0x8(%ebp),%eax
c0004e10:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/device/ioqueue.c:34
   thread_block(TASK_BLOCKED);
c0004e12:	83 ec 0c             	sub    $0xc,%esp
c0004e15:	6a 02                	push   $0x2
c0004e17:	e8 a6 f3 ff ff       	call   c00041c2 <thread_block>
c0004e1c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:35
}
c0004e1f:	90                   	nop
c0004e20:	c9                   	leave  
c0004e21:	c3                   	ret    

c0004e22 <wakeup>:
wakeup():
/work/x86_os_my/device/ioqueue.c:38

/* 唤醒waiter */
static void wakeup(struct task_struct** waiter) {
c0004e22:	55                   	push   %ebp
c0004e23:	89 e5                	mov    %esp,%ebp
c0004e25:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/ioqueue.c:39
   ASSERT(*waiter != NULL);
c0004e28:	8b 45 08             	mov    0x8(%ebp),%eax
c0004e2b:	8b 00                	mov    (%eax),%eax
c0004e2d:	85 c0                	test   %eax,%eax
c0004e2f:	75 19                	jne    c0004e4a <wakeup+0x28>
/work/x86_os_my/device/ioqueue.c:39 (discriminator 1)
c0004e31:	68 06 7c 00 c0       	push   $0xc0007c06
c0004e36:	68 3c 7c 00 c0       	push   $0xc0007c3c
c0004e3b:	6a 27                	push   $0x27
c0004e3d:	68 d2 7b 00 c0       	push   $0xc0007bd2
c0004e42:	e8 4b d7 ff ff       	call   c0002592 <panic_spin>
c0004e47:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:40
   thread_unblock(*waiter); 
c0004e4a:	8b 45 08             	mov    0x8(%ebp),%eax
c0004e4d:	8b 00                	mov    (%eax),%eax
c0004e4f:	83 ec 0c             	sub    $0xc,%esp
c0004e52:	50                   	push   %eax
c0004e53:	e8 cd f3 ff ff       	call   c0004225 <thread_unblock>
c0004e58:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:41
   *waiter = NULL;
c0004e5b:	8b 45 08             	mov    0x8(%ebp),%eax
c0004e5e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/device/ioqueue.c:42
}
c0004e64:	90                   	nop
c0004e65:	c9                   	leave  
c0004e66:	c3                   	ret    

c0004e67 <ioq_getchar>:
ioq_getchar():
/work/x86_os_my/device/ioqueue.c:45

/* 消费者从ioq队列中获取一个字符 */
char ioq_getchar(struct ioqueue* ioq) {
c0004e67:	55                   	push   %ebp
c0004e68:	89 e5                	mov    %esp,%ebp
c0004e6a:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/ioqueue.c:46
   ASSERT(intr_get_status() == INTR_OFF);
c0004e6d:	e8 c2 cd ff ff       	call   c0001c34 <intr_get_status>
c0004e72:	85 c0                	test   %eax,%eax
c0004e74:	74 4b                	je     c0004ec1 <ioq_getchar+0x5a>
/work/x86_os_my/device/ioqueue.c:46 (discriminator 1)
c0004e76:	68 b4 7b 00 c0       	push   $0xc0007bb4
c0004e7b:	68 44 7c 00 c0       	push   $0xc0007c44
c0004e80:	6a 2e                	push   $0x2e
c0004e82:	68 d2 7b 00 c0       	push   $0xc0007bd2
c0004e87:	e8 06 d7 ff ff       	call   c0002592 <panic_spin>
c0004e8c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:51 (discriminator 1)

/* 若缓冲区(队列)为空,把消费者ioq->consumer记为当前线程自己,
 * 目的是将来生产者往缓冲区里装商品后,生产者知道唤醒哪个消费者,
 * 也就是唤醒当前线程自己*/
   while (ioq_empty(ioq)) {
c0004e8f:	eb 30                	jmp    c0004ec1 <ioq_getchar+0x5a>
/work/x86_os_my/device/ioqueue.c:52
      lock_acquire(&ioq->lock);	 
c0004e91:	8b 45 08             	mov    0x8(%ebp),%eax
c0004e94:	83 ec 0c             	sub    $0xc,%esp
c0004e97:	50                   	push   %eax
c0004e98:	e8 42 fa ff ff       	call   c00048df <lock_acquire>
c0004e9d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:53
      ioq_wait(&ioq->consumer);
c0004ea0:	8b 45 08             	mov    0x8(%ebp),%eax
c0004ea3:	83 c0 20             	add    $0x20,%eax
c0004ea6:	83 ec 0c             	sub    $0xc,%esp
c0004ea9:	50                   	push   %eax
c0004eaa:	e8 29 ff ff ff       	call   c0004dd8 <ioq_wait>
c0004eaf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:54
      lock_release(&ioq->lock);
c0004eb2:	8b 45 08             	mov    0x8(%ebp),%eax
c0004eb5:	83 ec 0c             	sub    $0xc,%esp
c0004eb8:	50                   	push   %eax
c0004eb9:	e8 98 fa ff ff       	call   c0004956 <lock_release>
c0004ebe:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:51
   ASSERT(intr_get_status() == INTR_OFF);

/* 若缓冲区(队列)为空,把消费者ioq->consumer记为当前线程自己,
 * 目的是将来生产者往缓冲区里装商品后,生产者知道唤醒哪个消费者,
 * 也就是唤醒当前线程自己*/
   while (ioq_empty(ioq)) {
c0004ec1:	83 ec 0c             	sub    $0xc,%esp
c0004ec4:	ff 75 08             	pushl  0x8(%ebp)
c0004ec7:	e8 ce fe ff ff       	call   c0004d9a <ioq_empty>
c0004ecc:	83 c4 10             	add    $0x10,%esp
c0004ecf:	85 c0                	test   %eax,%eax
c0004ed1:	75 be                	jne    c0004e91 <ioq_getchar+0x2a>
/work/x86_os_my/device/ioqueue.c:57
      lock_acquire(&ioq->lock);	 
      ioq_wait(&ioq->consumer);
      lock_release(&ioq->lock);
   }

   char byte = ioq->buf[ioq->tail];	  // 从缓冲区中取出
c0004ed3:	8b 45 08             	mov    0x8(%ebp),%eax
c0004ed6:	8b 40 68             	mov    0x68(%eax),%eax
c0004ed9:	8b 55 08             	mov    0x8(%ebp),%edx
c0004edc:	0f b6 44 02 24       	movzbl 0x24(%edx,%eax,1),%eax
c0004ee1:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/device/ioqueue.c:58
   ioq->tail = next_pos(ioq->tail);	  // 把读游标移到下一位置
c0004ee4:	8b 45 08             	mov    0x8(%ebp),%eax
c0004ee7:	8b 40 68             	mov    0x68(%eax),%eax
c0004eea:	83 ec 0c             	sub    $0xc,%esp
c0004eed:	50                   	push   %eax
c0004eee:	e8 3f fe ff ff       	call   c0004d32 <next_pos>
c0004ef3:	83 c4 10             	add    $0x10,%esp
c0004ef6:	89 c2                	mov    %eax,%edx
c0004ef8:	8b 45 08             	mov    0x8(%ebp),%eax
c0004efb:	89 50 68             	mov    %edx,0x68(%eax)
/work/x86_os_my/device/ioqueue.c:60

   if (ioq->producer != NULL) {
c0004efe:	8b 45 08             	mov    0x8(%ebp),%eax
c0004f01:	8b 40 1c             	mov    0x1c(%eax),%eax
c0004f04:	85 c0                	test   %eax,%eax
c0004f06:	74 12                	je     c0004f1a <ioq_getchar+0xb3>
/work/x86_os_my/device/ioqueue.c:61
      wakeup(&ioq->producer);		  // 唤醒生产者
c0004f08:	8b 45 08             	mov    0x8(%ebp),%eax
c0004f0b:	83 c0 1c             	add    $0x1c,%eax
c0004f0e:	83 ec 0c             	sub    $0xc,%esp
c0004f11:	50                   	push   %eax
c0004f12:	e8 0b ff ff ff       	call   c0004e22 <wakeup>
c0004f17:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:64
   }

   return byte; 
c0004f1a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
/work/x86_os_my/device/ioqueue.c:65
}
c0004f1e:	c9                   	leave  
c0004f1f:	c3                   	ret    

c0004f20 <ioq_putchar>:
ioq_putchar():
/work/x86_os_my/device/ioqueue.c:68

/* 生产者往ioq队列中写入一个字符byte */
void ioq_putchar(struct ioqueue* ioq, char byte) {
c0004f20:	55                   	push   %ebp
c0004f21:	89 e5                	mov    %esp,%ebp
c0004f23:	83 ec 18             	sub    $0x18,%esp
c0004f26:	8b 45 0c             	mov    0xc(%ebp),%eax
c0004f29:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/device/ioqueue.c:69
   ASSERT(intr_get_status() == INTR_OFF);
c0004f2c:	e8 03 cd ff ff       	call   c0001c34 <intr_get_status>
c0004f31:	85 c0                	test   %eax,%eax
c0004f33:	74 4b                	je     c0004f80 <ioq_putchar+0x60>
/work/x86_os_my/device/ioqueue.c:69 (discriminator 1)
c0004f35:	68 b4 7b 00 c0       	push   $0xc0007bb4
c0004f3a:	68 50 7c 00 c0       	push   $0xc0007c50
c0004f3f:	6a 45                	push   $0x45
c0004f41:	68 d2 7b 00 c0       	push   $0xc0007bd2
c0004f46:	e8 47 d6 ff ff       	call   c0002592 <panic_spin>
c0004f4b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:74 (discriminator 1)

/* 若缓冲区(队列)已经满了,把生产者ioq->producer记为自己,
 * 为的是当缓冲区里的东西被消费者取完后让消费者知道唤醒哪个生产者,
 * 也就是唤醒当前线程自己*/
   while (ioq_full(ioq)) {
c0004f4e:	eb 30                	jmp    c0004f80 <ioq_putchar+0x60>
/work/x86_os_my/device/ioqueue.c:75
      lock_acquire(&ioq->lock);
c0004f50:	8b 45 08             	mov    0x8(%ebp),%eax
c0004f53:	83 ec 0c             	sub    $0xc,%esp
c0004f56:	50                   	push   %eax
c0004f57:	e8 83 f9 ff ff       	call   c00048df <lock_acquire>
c0004f5c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:76
      ioq_wait(&ioq->producer);
c0004f5f:	8b 45 08             	mov    0x8(%ebp),%eax
c0004f62:	83 c0 1c             	add    $0x1c,%eax
c0004f65:	83 ec 0c             	sub    $0xc,%esp
c0004f68:	50                   	push   %eax
c0004f69:	e8 6a fe ff ff       	call   c0004dd8 <ioq_wait>
c0004f6e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:77
      lock_release(&ioq->lock);
c0004f71:	8b 45 08             	mov    0x8(%ebp),%eax
c0004f74:	83 ec 0c             	sub    $0xc,%esp
c0004f77:	50                   	push   %eax
c0004f78:	e8 d9 f9 ff ff       	call   c0004956 <lock_release>
c0004f7d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:74
   ASSERT(intr_get_status() == INTR_OFF);

/* 若缓冲区(队列)已经满了,把生产者ioq->producer记为自己,
 * 为的是当缓冲区里的东西被消费者取完后让消费者知道唤醒哪个生产者,
 * 也就是唤醒当前线程自己*/
   while (ioq_full(ioq)) {
c0004f80:	83 ec 0c             	sub    $0xc,%esp
c0004f83:	ff 75 08             	pushl  0x8(%ebp)
c0004f86:	e8 c3 fd ff ff       	call   c0004d4e <ioq_full>
c0004f8b:	83 c4 10             	add    $0x10,%esp
c0004f8e:	85 c0                	test   %eax,%eax
c0004f90:	75 be                	jne    c0004f50 <ioq_putchar+0x30>
/work/x86_os_my/device/ioqueue.c:79
      lock_acquire(&ioq->lock);
      ioq_wait(&ioq->producer);
      lock_release(&ioq->lock);
   }
   ioq->buf[ioq->head] = byte;      // 把字节放入缓冲区中
c0004f92:	8b 45 08             	mov    0x8(%ebp),%eax
c0004f95:	8b 40 64             	mov    0x64(%eax),%eax
c0004f98:	8b 55 08             	mov    0x8(%ebp),%edx
c0004f9b:	0f b6 4d f4          	movzbl -0xc(%ebp),%ecx
c0004f9f:	88 4c 02 24          	mov    %cl,0x24(%edx,%eax,1)
/work/x86_os_my/device/ioqueue.c:80
   ioq->head = next_pos(ioq->head); // 把写游标移到下一位置
c0004fa3:	8b 45 08             	mov    0x8(%ebp),%eax
c0004fa6:	8b 40 64             	mov    0x64(%eax),%eax
c0004fa9:	83 ec 0c             	sub    $0xc,%esp
c0004fac:	50                   	push   %eax
c0004fad:	e8 80 fd ff ff       	call   c0004d32 <next_pos>
c0004fb2:	83 c4 10             	add    $0x10,%esp
c0004fb5:	89 c2                	mov    %eax,%edx
c0004fb7:	8b 45 08             	mov    0x8(%ebp),%eax
c0004fba:	89 50 64             	mov    %edx,0x64(%eax)
/work/x86_os_my/device/ioqueue.c:82

   if (ioq->consumer != NULL) {
c0004fbd:	8b 45 08             	mov    0x8(%ebp),%eax
c0004fc0:	8b 40 20             	mov    0x20(%eax),%eax
c0004fc3:	85 c0                	test   %eax,%eax
c0004fc5:	74 12                	je     c0004fd9 <ioq_putchar+0xb9>
/work/x86_os_my/device/ioqueue.c:83
      wakeup(&ioq->consumer);          // 唤醒消费者
c0004fc7:	8b 45 08             	mov    0x8(%ebp),%eax
c0004fca:	83 c0 20             	add    $0x20,%eax
c0004fcd:	83 ec 0c             	sub    $0xc,%esp
c0004fd0:	50                   	push   %eax
c0004fd1:	e8 4c fe ff ff       	call   c0004e22 <wakeup>
c0004fd6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:85
   }
}
c0004fd9:	90                   	nop
c0004fda:	c9                   	leave  
c0004fdb:	c3                   	ret    

c0004fdc <update_tss_esp>:
update_tss_esp():
/work/x86_os_my/userprog/tss.c:40
	uint32_t io_base;
}; 
static struct tss g_tss;

/* 更新tss中esp0字段的值为pthread的0级栈 */
void update_tss_esp(struct task_struct* pthread) {
c0004fdc:	55                   	push   %ebp
c0004fdd:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/userprog/tss.c:41
	g_tss.esp0 = (uint32_t*)((uint32_t)pthread + PG_SIZE);
c0004fdf:	8b 45 08             	mov    0x8(%ebp),%eax
c0004fe2:	05 00 10 00 00       	add    $0x1000,%eax
c0004fe7:	a3 24 aa 00 c0       	mov    %eax,0xc000aa24
/work/x86_os_my/userprog/tss.c:42
}
c0004fec:	90                   	nop
c0004fed:	5d                   	pop    %ebp
c0004fee:	c3                   	ret    

c0004fef <make_gdt_desc>:
make_gdt_desc():
/work/x86_os_my/userprog/tss.c:45

/* c语言方式，创建gdt描述符 */
static struct gdt_desc make_gdt_desc(uint32_t* desc_addr, uint32_t limit, uint8_t attr_low, uint8_t attr_high) {
c0004fef:	55                   	push   %ebp
c0004ff0:	89 e5                	mov    %esp,%ebp
c0004ff2:	83 ec 18             	sub    $0x18,%esp
c0004ff5:	8b 55 14             	mov    0x14(%ebp),%edx
c0004ff8:	8b 45 18             	mov    0x18(%ebp),%eax
c0004ffb:	88 55 ec             	mov    %dl,-0x14(%ebp)
c0004ffe:	88 45 e8             	mov    %al,-0x18(%ebp)
/work/x86_os_my/userprog/tss.c:46
	uint32_t desc_base = (uint32_t)desc_addr;
c0005001:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005004:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/userprog/tss.c:48
	struct gdt_desc desc;
	desc.limit_low_word = limit & 0x0000ffff;
c0005007:	8b 45 10             	mov    0x10(%ebp),%eax
c000500a:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
/work/x86_os_my/userprog/tss.c:49
	desc.base_low_word = desc_base & 0x0000ffff;
c000500e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0005011:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
/work/x86_os_my/userprog/tss.c:50
	desc.base_mid_byte = ((desc_base & 0x00ff0000) >> 16);
c0005015:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0005018:	25 00 00 ff 00       	and    $0xff0000,%eax
c000501d:	c1 e8 10             	shr    $0x10,%eax
c0005020:	88 45 f8             	mov    %al,-0x8(%ebp)
/work/x86_os_my/userprog/tss.c:51
	desc.attr_low_byte = (uint8_t)(attr_low);
c0005023:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0005027:	88 45 f9             	mov    %al,-0x7(%ebp)
/work/x86_os_my/userprog/tss.c:52
	desc.limit_high_attr_high = (((limit & 0x000f0000) >> 16) + (uint8_t)(attr_high));
c000502a:	8b 45 10             	mov    0x10(%ebp),%eax
c000502d:	25 00 00 0f 00       	and    $0xf0000,%eax
c0005032:	c1 e8 10             	shr    $0x10,%eax
c0005035:	89 c2                	mov    %eax,%edx
c0005037:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c000503b:	01 d0                	add    %edx,%eax
c000503d:	88 45 fa             	mov    %al,-0x6(%ebp)
/work/x86_os_my/userprog/tss.c:53
	desc.base_high_byte = desc_base >> 24;
c0005040:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0005043:	c1 e8 18             	shr    $0x18,%eax
c0005046:	88 45 fb             	mov    %al,-0x5(%ebp)
/work/x86_os_my/userprog/tss.c:54
	return desc;
c0005049:	8b 4d 08             	mov    0x8(%ebp),%ecx
c000504c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000504f:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0005052:	89 01                	mov    %eax,(%ecx)
c0005054:	89 51 04             	mov    %edx,0x4(%ecx)
/work/x86_os_my/userprog/tss.c:55
}
c0005057:	8b 45 08             	mov    0x8(%ebp),%eax
c000505a:	c9                   	leave  
c000505b:	c2 04 00             	ret    $0x4

c000505e <tss_init>:
tss_init():
/work/x86_os_my/userprog/tss.c:61

/* 在gdt中创建tss描述符
 * 重新加载 gdt
 * 加载 tr
 */
void tss_init() {
c000505e:	55                   	push   %ebp
c000505f:	89 e5                	mov    %esp,%ebp
c0005061:	53                   	push   %ebx
c0005062:	83 ec 24             	sub    $0x24,%esp
/work/x86_os_my/userprog/tss.c:62
	put_str("tss_init start\n");
c0005065:	83 ec 0c             	sub    $0xc,%esp
c0005068:	68 5c 7c 00 c0       	push   $0xc0007c5c
c000506d:	e8 ae d3 ff ff       	call   c0002420 <put_str>
c0005072:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/tss.c:63
	uint32_t tss_size = sizeof(g_tss);
c0005075:	c7 45 f4 6c 00 00 00 	movl   $0x6c,-0xc(%ebp)
/work/x86_os_my/userprog/tss.c:64
	memset(&g_tss, 0, tss_size);
c000507c:	83 ec 04             	sub    $0x4,%esp
c000507f:	ff 75 f4             	pushl  -0xc(%ebp)
c0005082:	6a 00                	push   $0x0
c0005084:	68 20 aa 00 c0       	push   $0xc000aa20
c0005089:	e8 1c e9 ff ff       	call   c00039aa <memset>
c000508e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/tss.c:66
	
	g_tss.ss0 = SELECTOR_K_STACK;	// 0 级栈段的选择子 
c0005091:	c7 05 28 aa 00 c0 10 	movl   $0x10,0xc000aa28
c0005098:	00 00 00 
/work/x86_os_my/userprog/tss.c:67
	g_tss.io_base = tss_size;		// 当 IO 位图的偏移地址大于等于 TSS 大小减 1 时，就表示没有 IO 位图。
c000509b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000509e:	a3 88 aa 00 c0       	mov    %eax,0xc000aa88
/work/x86_os_my/userprog/tss.c:75
	 * 内核地址 0xC000_0900 是映射到 0x900 的 
	 * 在GDT中，第 0 个段描述符不可用，第 1 个为代码段，第 2 个为数据段和栈，第 3 个为显存段
	 */

	/* 在gdt中添加dpl为0的TSS描述符 */
	*((struct gdt_desc*)0xc0000920) = make_gdt_desc((uint32_t*)&g_tss, tss_size - 1, TSS_ATTR_LOW, TSS_ATTR_HIGH);
c00050a3:	bb 20 09 00 c0       	mov    $0xc0000920,%ebx
c00050a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00050ab:	8d 50 ff             	lea    -0x1(%eax),%edx
c00050ae:	8d 45 e0             	lea    -0x20(%ebp),%eax
c00050b1:	83 ec 0c             	sub    $0xc,%esp
c00050b4:	68 80 00 00 00       	push   $0x80
c00050b9:	68 89 00 00 00       	push   $0x89
c00050be:	52                   	push   %edx
c00050bf:	68 20 aa 00 c0       	push   $0xc000aa20
c00050c4:	50                   	push   %eax
c00050c5:	e8 25 ff ff ff       	call   c0004fef <make_gdt_desc>
c00050ca:	83 c4 1c             	add    $0x1c,%esp
c00050cd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00050d0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c00050d3:	89 03                	mov    %eax,(%ebx)
c00050d5:	89 53 04             	mov    %edx,0x4(%ebx)
/work/x86_os_my/userprog/tss.c:78

	/* 在gdt中添加dpl为3的,用户级,数据段和代码段描述符 */
	*((struct gdt_desc*)0xc0000928) = make_gdt_desc((uint32_t*)0, 0xfffff, GDT_CODE_ATTR_LOW_DPL3, GDT_ATTR_HIGH);
c00050d8:	bb 28 09 00 c0       	mov    $0xc0000928,%ebx
c00050dd:	8d 45 e0             	lea    -0x20(%ebp),%eax
c00050e0:	83 ec 0c             	sub    $0xc,%esp
c00050e3:	68 c0 00 00 00       	push   $0xc0
c00050e8:	68 f8 00 00 00       	push   $0xf8
c00050ed:	68 ff ff 0f 00       	push   $0xfffff
c00050f2:	6a 00                	push   $0x0
c00050f4:	50                   	push   %eax
c00050f5:	e8 f5 fe ff ff       	call   c0004fef <make_gdt_desc>
c00050fa:	83 c4 1c             	add    $0x1c,%esp
c00050fd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0005100:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0005103:	89 03                	mov    %eax,(%ebx)
c0005105:	89 53 04             	mov    %edx,0x4(%ebx)
/work/x86_os_my/userprog/tss.c:79
	*((struct gdt_desc*)0xc0000930) = make_gdt_desc((uint32_t*)0, 0xfffff, GDT_DATA_ATTR_LOW_DPL3, GDT_ATTR_HIGH);
c0005108:	bb 30 09 00 c0       	mov    $0xc0000930,%ebx
c000510d:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0005110:	83 ec 0c             	sub    $0xc,%esp
c0005113:	68 c0 00 00 00       	push   $0xc0
c0005118:	68 f2 00 00 00       	push   $0xf2
c000511d:	68 ff ff 0f 00       	push   $0xfffff
c0005122:	6a 00                	push   $0x0
c0005124:	50                   	push   %eax
c0005125:	e8 c5 fe ff ff       	call   c0004fef <make_gdt_desc>
c000512a:	83 c4 1c             	add    $0x1c,%esp
c000512d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0005130:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0005133:	89 03                	mov    %eax,(%ebx)
c0005135:	89 53 04             	mov    %edx,0x4(%ebx)
/work/x86_os_my/userprog/tss.c:83

	/* GDTR 16位的limit、32位的段基址 */
	// 先转换成 uint32_t 后，再将其转换成 uint64_t 位（不可一步到位转为 uint64_t）
	uint64_t gdt_operand = ((8 * 7 - 1) | ((uint64_t)(uint32_t)0xc0000900 << 16));   // 7个描述符大小
c0005138:	c7 45 e8 37 00 00 09 	movl   $0x9000037,-0x18(%ebp)
c000513f:	c7 45 ec 00 c0 00 00 	movl   $0xc000,-0x14(%ebp)
/work/x86_os_my/userprog/tss.c:84
	asm volatile ("lgdt %0" : : "m" (gdt_operand));
c0005146:	0f 01 55 e8          	lgdtl  -0x18(%ebp)
/work/x86_os_my/userprog/tss.c:85
	asm volatile ("ltr %w0" : : "r" (SELECTOR_TSS));
c000514a:	b8 20 00 00 00       	mov    $0x20,%eax
c000514f:	0f 00 d8             	ltr    %ax
/work/x86_os_my/userprog/tss.c:86
	put_str("tss_init and ltr done\n");
c0005152:	83 ec 0c             	sub    $0xc,%esp
c0005155:	68 6c 7c 00 c0       	push   $0xc0007c6c
c000515a:	e8 c1 d2 ff ff       	call   c0002420 <put_str>
c000515f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/tss.c:87
}
c0005162:	90                   	nop
c0005163:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0005166:	c9                   	leave  
c0005167:	c3                   	ret    

c0005168 <start_process>:
start_process():
/work/x86_os_my/userprog/process.c:17
extern void intr_exit(void);

/* 构建用户进程初始上下文信息
 * 填充用户进程的中断栈，并将中断栈的信息，利用iretd填充到 CPU 中
 */
void start_process(void* filename_) {
c0005168:	55                   	push   %ebp
c0005169:	89 e5                	mov    %esp,%ebp
c000516b:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/process.c:18
	void* function = filename_;
c000516e:	8b 45 08             	mov    0x8(%ebp),%eax
c0005171:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:19
	struct task_struct* cur = running_thread();
c0005174:	e8 18 ec ff ff       	call   c0003d91 <running_thread>
c0005179:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/process.c:20
	cur->self_kstack += sizeof(struct thread_stack);
c000517c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000517f:	8b 00                	mov    (%eax),%eax
c0005181:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
c0005187:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000518a:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/userprog/process.c:21
	struct intr_stack* proc_stack = (struct intr_stack*)cur->self_kstack;	 
c000518c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000518f:	8b 00                	mov    (%eax),%eax
c0005191:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/userprog/process.c:22
	proc_stack->edi = proc_stack->esi = proc_stack->ebp = proc_stack->esp_dummy = 0;
c0005194:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005197:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
c000519e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00051a1:	8b 50 10             	mov    0x10(%eax),%edx
c00051a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00051a7:	89 50 0c             	mov    %edx,0xc(%eax)
c00051aa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00051ad:	8b 50 0c             	mov    0xc(%eax),%edx
c00051b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00051b3:	89 50 08             	mov    %edx,0x8(%eax)
c00051b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00051b9:	8b 50 08             	mov    0x8(%eax),%edx
c00051bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00051bf:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/userprog/process.c:23
	proc_stack->ebx = proc_stack->edx = proc_stack->ecx = proc_stack->eax = 0;
c00051c2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00051c5:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
c00051cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00051cf:	8b 50 20             	mov    0x20(%eax),%edx
c00051d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00051d5:	89 50 1c             	mov    %edx,0x1c(%eax)
c00051d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00051db:	8b 50 1c             	mov    0x1c(%eax),%edx
c00051de:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00051e1:	89 50 18             	mov    %edx,0x18(%eax)
c00051e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00051e7:	8b 50 18             	mov    0x18(%eax),%edx
c00051ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00051ed:	89 50 14             	mov    %edx,0x14(%eax)
/work/x86_os_my/userprog/process.c:28
	/* 在iretd返回时，如果发现未来的 CPL（也就是内核栈中 CS.RPL，或者说是返回到的用户进程的代码段CS.CPL）
	 * 权限低于（数值上大于） CPU 中段寄存器（如 DS、 ES、 FS、 GS）中选择子指向的内存段的 DPL，
	 * CPU 会自动将相应段寄存器的选择子置为 0 
	 * 这里gs的选择子在iretd返回后，会被自动清零。*/
	proc_stack->gs = 0;					// 用户态用不上,直接初始为0
c00051f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00051f3:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
/work/x86_os_my/userprog/process.c:29
	proc_stack->ds = proc_stack->es = proc_stack->fs = SELECTOR_U_DATA;		// 用户级数据段
c00051fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00051fd:	c7 40 28 33 00 00 00 	movl   $0x33,0x28(%eax)
c0005204:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005207:	8b 50 28             	mov    0x28(%eax),%edx
c000520a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000520d:	89 50 2c             	mov    %edx,0x2c(%eax)
c0005210:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005213:	8b 50 2c             	mov    0x2c(%eax),%edx
c0005216:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005219:	89 50 30             	mov    %edx,0x30(%eax)
/work/x86_os_my/userprog/process.c:30
	proc_stack->eip = function;			// 待执行的用户程序地址
c000521c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000521f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005222:	89 50 38             	mov    %edx,0x38(%eax)
/work/x86_os_my/userprog/process.c:31
	proc_stack->cs = SELECTOR_U_CODE;	// 用户级代码段
c0005225:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005228:	c7 40 3c 2b 00 00 00 	movl   $0x2b,0x3c(%eax)
/work/x86_os_my/userprog/process.c:32
	proc_stack->eflags = (EFLAGS_IOPL_0 | EFLAGS_MBS | EFLAGS_IF_1);
c000522f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005232:	c7 40 40 02 02 00 00 	movl   $0x202,0x40(%eax)
/work/x86_os_my/userprog/process.c:41
	 * process_activate 使用户进程页表生效【已经把CR3寄存器 更新为 用户进程的页表了】
	 * start_process    为用户进程创建3特权级栈【所以申请的内存空间来自用户进程的页表】
	 * 
	 * USER_STACK3_VADDR=(0xc0000000 - 0x1000)
	 */
	proc_stack->esp = (void*)((uint32_t)get_a_page(PF_USER, USER_STACK3_VADDR) + PG_SIZE) ;
c0005239:	83 ec 08             	sub    $0x8,%esp
c000523c:	68 00 f0 ff bf       	push   $0xbffff000
c0005241:	6a 02                	push   $0x2
c0005243:	e8 a8 da ff ff       	call   c0002cf0 <get_a_page>
c0005248:	83 c4 10             	add    $0x10,%esp
c000524b:	05 00 10 00 00       	add    $0x1000,%eax
c0005250:	89 c2                	mov    %eax,%edx
c0005252:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005255:	89 50 44             	mov    %edx,0x44(%eax)
/work/x86_os_my/userprog/process.c:42
	proc_stack->ss = SELECTOR_U_DATA;
c0005258:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000525b:	c7 40 48 33 00 00 00 	movl   $0x33,0x48(%eax)
/work/x86_os_my/userprog/process.c:49
	/* 将 esp 替换为 proc_stack
	 * 通过 jmp intr_exit 那里的一系列 pop 指令和 iretd 指令，
	 * 将 proc_stack 中的数据载入 CPU 的寄存器，
	 * 从而使程序“假装”退出中断，进入特权级 3
	 */
	asm volatile ("movl %0, %%esp; jmp intr_exit" : : "g" (proc_stack) : "memory");
c0005262:	8b 65 ec             	mov    -0x14(%ebp),%esp
c0005265:	e9 56 cc ff ff       	jmp    c0001ec0 <intr_exit>
/work/x86_os_my/userprog/process.c:50
}
c000526a:	90                   	nop
c000526b:	c9                   	leave  
c000526c:	c3                   	ret    

c000526d <page_dir_activate>:
page_dir_activate():
/work/x86_os_my/userprog/process.c:53

/* 更新CR3寄存器，激活页目录表 */
void page_dir_activate(struct task_struct* p_thread) {
c000526d:	55                   	push   %ebp
c000526e:	89 e5                	mov    %esp,%ebp
c0005270:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/process.c:56
	
	/* 若为"内核线程",需要重新填充页表为0x100000 */
	uint32_t pagedir_phy_addr = 0x100000;	// 默认为内核的页目录物理地址,也就是内核线程所用的页目录表
c0005273:	c7 45 f4 00 00 10 00 	movl   $0x100000,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:59
	
	/* "用户态进程"有自己的页目录表 */
	if (p_thread->pgdir != NULL) {
c000527a:	8b 45 08             	mov    0x8(%ebp),%eax
c000527d:	8b 40 34             	mov    0x34(%eax),%eax
c0005280:	85 c0                	test   %eax,%eax
c0005282:	74 15                	je     c0005299 <page_dir_activate+0x2c>
/work/x86_os_my/userprog/process.c:60
		pagedir_phy_addr = addr_v2p((uint32_t)p_thread->pgdir);
c0005284:	8b 45 08             	mov    0x8(%ebp),%eax
c0005287:	8b 40 34             	mov    0x34(%eax),%eax
c000528a:	83 ec 0c             	sub    $0xc,%esp
c000528d:	50                   	push   %eax
c000528e:	e8 cd db ff ff       	call   c0002e60 <addr_v2p>
c0005293:	83 c4 10             	add    $0x10,%esp
c0005296:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:66
	}

	/* 更新页目录寄存器cr3,使新页表生效
	 * 实现进程间，虚拟地址空间的隔离。
	 */
	asm volatile ("movl %0, %%cr3" : : "r" (pagedir_phy_addr) : "memory");
c0005299:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000529c:	0f 22 d8             	mov    %eax,%cr3
/work/x86_os_my/userprog/process.c:67
}
c000529f:	90                   	nop
c00052a0:	c9                   	leave  
c00052a1:	c3                   	ret    

c00052a2 <process_activate>:
process_activate():
/work/x86_os_my/userprog/process.c:73

/* 1.激活线程或进程的页表,【更新CR3寄存器】
 * 2.用户进程，更新tss中的esp0为进程的特权级0的栈
 * 【只有在任务调度时（中断时），才会切换页表及更新 0 级栈，因此 process_activate 是被"中断执行流"的 schedule 调用的！】
 */
void process_activate(struct task_struct* p_thread) {
c00052a2:	55                   	push   %ebp
c00052a3:	89 e5                	mov    %esp,%ebp
c00052a5:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/userprog/process.c:74
	ASSERT(p_thread != NULL);
c00052a8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00052ac:	75 19                	jne    c00052c7 <process_activate+0x25>
/work/x86_os_my/userprog/process.c:74 (discriminator 1)
c00052ae:	68 84 7c 00 c0       	push   $0xc0007c84
c00052b3:	68 40 7d 00 c0       	push   $0xc0007d40
c00052b8:	6a 4a                	push   $0x4a
c00052ba:	68 95 7c 00 c0       	push   $0xc0007c95
c00052bf:	e8 ce d2 ff ff       	call   c0002592 <panic_spin>
c00052c4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:77
	
	/* 激活该进程或线程的页目录表【重新加载了CR3】 */
	page_dir_activate(p_thread);
c00052c7:	83 ec 0c             	sub    $0xc,%esp
c00052ca:	ff 75 08             	pushl  0x8(%ebp)
c00052cd:	e8 9b ff ff ff       	call   c000526d <page_dir_activate>
c00052d2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:80

	/* 内核线程特权级本身就是0,处理器进入中断时并不会从tss中获取0特权级栈地址,故不需要更新esp0 */
	if (p_thread->pgdir != NULL) {
c00052d5:	8b 45 08             	mov    0x8(%ebp),%eax
c00052d8:	8b 40 34             	mov    0x34(%eax),%eax
c00052db:	85 c0                	test   %eax,%eax
c00052dd:	74 0e                	je     c00052ed <process_activate+0x4b>
/work/x86_os_my/userprog/process.c:83
		/* 若为用户进程,更新该进程的esp0,用于此进程被中断时保留上下文 
		 * 需要从tss中获取0特权级栈地址 */
		update_tss_esp(p_thread);	//就一行：g_tss.esp0 = (uint32_t*)((uint32_t)pthread + PG_SIZE);
c00052df:	83 ec 0c             	sub    $0xc,%esp
c00052e2:	ff 75 08             	pushl  0x8(%ebp)
c00052e5:	e8 f2 fc ff ff       	call   c0004fdc <update_tss_esp>
c00052ea:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:85
	}
}
c00052ed:	90                   	nop
c00052ee:	c9                   	leave  
c00052ef:	c3                   	ret    

c00052f0 <create_page_dir>:
create_page_dir():
/work/x86_os_my/userprog/process.c:94
 * 
 * 要确保用户进程，在自己的地址空间中，能够访问到内核。
 * 即：任意进程的页目录表中，用户进程占第 0~767 个页目录项，内核占第 768~1023 个页目录项。
 * 0x300 = 768
 */
uint32_t* create_page_dir(void) {
c00052f0:	55                   	push   %ebp
c00052f1:	89 e5                	mov    %esp,%ebp
c00052f3:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/process.c:97

	/* 用户进程的页表不能让用户直接访问到,所以在内核空间来申请 */
	uint32_t* page_dir_vaddr = get_kernel_pages(1);
c00052f6:	83 ec 0c             	sub    $0xc,%esp
c00052f9:	6a 01                	push   $0x1
c00052fb:	e8 3a d9 ff ff       	call   c0002c3a <get_kernel_pages>
c0005300:	83 c4 10             	add    $0x10,%esp
c0005303:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:98
	if (page_dir_vaddr == NULL) {
c0005306:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c000530a:	75 17                	jne    c0005323 <create_page_dir+0x33>
/work/x86_os_my/userprog/process.c:99
		console_put_str("create_page_dir: get_kernel_page failed!");
c000530c:	83 ec 0c             	sub    $0xc,%esp
c000530f:	68 a8 7c 00 c0       	push   $0xc0007ca8
c0005314:	e8 57 f3 ff ff       	call   c0004670 <console_put_str>
c0005319:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:100
		return NULL;
c000531c:	b8 00 00 00 00       	mov    $0x0,%eax
c0005321:	eb 43                	jmp    c0005366 <create_page_dir+0x76>
/work/x86_os_my/userprog/process.c:106
	}

	/*** 1 复制内核的页目录表  ***/
	// page_dir_vaddr + 0x300*4 是内核页目录的第768项
	// 复制的页目录项个数=1024/4
	memcpy((uint32_t*)((uint32_t)page_dir_vaddr + 0x300*4), (uint32_t*)(0xfffff000+0x300*4), 1024);
c0005323:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005326:	05 00 0c 00 00       	add    $0xc00,%eax
c000532b:	83 ec 04             	sub    $0x4,%esp
c000532e:	68 00 04 00 00       	push   $0x400
c0005333:	68 00 fc ff ff       	push   $0xfffffc00
c0005338:	50                   	push   %eax
c0005339:	e8 be e6 ff ff       	call   c00039fc <memcpy>
c000533e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:110

	/*** 2 更新页目录表地址 ***/
	// 页目录表地址是页目录的最后一项
	uint32_t new_page_dir_phy_addr = addr_v2p((uint32_t)page_dir_vaddr);
c0005341:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005344:	83 ec 0c             	sub    $0xc,%esp
c0005347:	50                   	push   %eax
c0005348:	e8 13 db ff ff       	call   c0002e60 <addr_v2p>
c000534d:	83 c4 10             	add    $0x10,%esp
c0005350:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/process.c:111
	page_dir_vaddr[1023] = new_page_dir_phy_addr | PG_US_U | PG_RW_W | PG_P_1;
c0005353:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005356:	05 fc 0f 00 00       	add    $0xffc,%eax
c000535b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000535e:	83 ca 07             	or     $0x7,%edx
c0005361:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/userprog/process.c:113

	return page_dir_vaddr;
c0005363:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/userprog/process.c:114
}
c0005366:	c9                   	leave  
c0005367:	c3                   	ret    

c0005368 <create_user_vaddr_bitmap>:
create_user_vaddr_bitmap():
/work/x86_os_my/userprog/process.c:117

/* 创建用户进程虚拟地址位图 */
void create_user_vaddr_bitmap(struct task_struct* user_prog) {
c0005368:	55                   	push   %ebp
c0005369:	89 e5                	mov    %esp,%ebp
c000536b:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/process.c:118
   user_prog->userprog_vaddr.vaddr_start = USER_VADDR_START;	// linux用户程序入口地址 0x80480000
c000536e:	8b 45 08             	mov    0x8(%ebp),%eax
c0005371:	c7 40 40 00 80 04 08 	movl   $0x8048000,0x40(%eax)
/work/x86_os_my/userprog/process.c:119
   uint32_t bitmap_pg_cnt = DIV_ROUND_UP((0xc0000000 - USER_VADDR_START) / PG_SIZE / 8 , PG_SIZE);
c0005378:	c7 45 f4 17 00 00 00 	movl   $0x17,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:120
   user_prog->userprog_vaddr.vaddr_bitmap.bits = get_kernel_pages(bitmap_pg_cnt);
c000537f:	83 ec 0c             	sub    $0xc,%esp
c0005382:	ff 75 f4             	pushl  -0xc(%ebp)
c0005385:	e8 b0 d8 ff ff       	call   c0002c3a <get_kernel_pages>
c000538a:	83 c4 10             	add    $0x10,%esp
c000538d:	89 c2                	mov    %eax,%edx
c000538f:	8b 45 08             	mov    0x8(%ebp),%eax
c0005392:	89 50 3c             	mov    %edx,0x3c(%eax)
/work/x86_os_my/userprog/process.c:121
   user_prog->userprog_vaddr.vaddr_bitmap.btmp_bytes_len = (0xc0000000 - USER_VADDR_START) / PG_SIZE / 8;
c0005395:	8b 45 08             	mov    0x8(%ebp),%eax
c0005398:	c7 40 38 f7 6f 01 00 	movl   $0x16ff7,0x38(%eax)
/work/x86_os_my/userprog/process.c:122
   bitmap_init(&user_prog->userprog_vaddr.vaddr_bitmap);
c000539f:	8b 45 08             	mov    0x8(%ebp),%eax
c00053a2:	83 c0 38             	add    $0x38,%eax
c00053a5:	83 ec 0c             	sub    $0xc,%esp
c00053a8:	50                   	push   %eax
c00053a9:	e8 ba d2 ff ff       	call   c0002668 <bitmap_init>
c00053ae:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:123
}
c00053b1:	90                   	nop
c00053b2:	c9                   	leave  
c00053b3:	c3                   	ret    

c00053b4 <process_execute>:
process_execute():
/work/x86_os_my/userprog/process.c:126

/* 创建用户进程 */
void process_execute(void* filename, char* name) {
c00053b4:	55                   	push   %ebp
c00053b5:	89 e5                	mov    %esp,%ebp
c00053b7:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/process.c:128
   /* pcb内核的数据结构,由内核来维护进程信息,因此要在内核内存池中申请 */
   struct task_struct* thread = get_kernel_pages(1);
c00053ba:	83 ec 0c             	sub    $0xc,%esp
c00053bd:	6a 01                	push   $0x1
c00053bf:	e8 76 d8 ff ff       	call   c0002c3a <get_kernel_pages>
c00053c4:	83 c4 10             	add    $0x10,%esp
c00053c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:129
   init_thread(thread, name, default_prio);			//初始化线程PCB结构体 struct task_struct
c00053ca:	83 ec 04             	sub    $0x4,%esp
c00053cd:	6a 1f                	push   $0x1f
c00053cf:	ff 75 0c             	pushl  0xc(%ebp)
c00053d2:	ff 75 f4             	pushl  -0xc(%ebp)
c00053d5:	e8 9e ea ff ff       	call   c0003e78 <init_thread>
c00053da:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:130
   create_user_vaddr_bitmap(thread);				//【进程新增】创建用户进程，虚拟地址空间位图
c00053dd:	83 ec 0c             	sub    $0xc,%esp
c00053e0:	ff 75 f4             	pushl  -0xc(%ebp)
c00053e3:	e8 80 ff ff ff       	call   c0005368 <create_user_vaddr_bitmap>
c00053e8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:131
   thread_create(thread, start_process, filename);	//初始化线程栈结构体 struct thread_stack
c00053eb:	83 ec 04             	sub    $0x4,%esp
c00053ee:	ff 75 08             	pushl  0x8(%ebp)
c00053f1:	68 68 51 00 c0       	push   $0xc0005168
c00053f6:	ff 75 f4             	pushl  -0xc(%ebp)
c00053f9:	e8 03 ea ff ff       	call   c0003e01 <thread_create>
c00053fe:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:132
   thread->pgdir = create_page_dir();				//【进程新增】创建用户进程，页目录表
c0005401:	e8 ea fe ff ff       	call   c00052f0 <create_page_dir>
c0005406:	89 c2                	mov    %eax,%edx
c0005408:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000540b:	89 50 34             	mov    %edx,0x34(%eax)
/work/x86_os_my/userprog/process.c:133
   block_desc_init(thread->u_block_desc);
c000540e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005411:	83 c0 44             	add    $0x44,%eax
c0005414:	83 ec 0c             	sub    $0xc,%esp
c0005417:	50                   	push   %eax
c0005418:	e8 a9 e4 ff ff       	call   c00038c6 <block_desc_init>
c000541d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:135
   
   enum intr_status old_status = intr_disable();
c0005420:	e8 c8 c7 ff ff       	call   c0001bed <intr_disable>
c0005425:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/process.c:136
   ASSERT(!elem_find(&thread_ready_list, &thread->general_tag));
c0005428:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000542b:	83 c0 24             	add    $0x24,%eax
c000542e:	83 ec 08             	sub    $0x8,%esp
c0005431:	50                   	push   %eax
c0005432:	68 0c b0 00 c0       	push   $0xc000b00c
c0005437:	e8 eb f0 ff ff       	call   c0004527 <elem_find>
c000543c:	83 c4 10             	add    $0x10,%esp
c000543f:	85 c0                	test   %eax,%eax
c0005441:	74 1c                	je     c000545f <process_execute+0xab>
/work/x86_os_my/userprog/process.c:136 (discriminator 1)
c0005443:	68 d4 7c 00 c0       	push   $0xc0007cd4
c0005448:	68 54 7d 00 c0       	push   $0xc0007d54
c000544d:	68 88 00 00 00       	push   $0x88
c0005452:	68 95 7c 00 c0       	push   $0xc0007c95
c0005457:	e8 36 d1 ff ff       	call   c0002592 <panic_spin>
c000545c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:137
   list_append(&thread_ready_list, &thread->general_tag);
c000545f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005462:	83 c0 24             	add    $0x24,%eax
c0005465:	83 ec 08             	sub    $0x8,%esp
c0005468:	50                   	push   %eax
c0005469:	68 0c b0 00 c0       	push   $0xc000b00c
c000546e:	e8 3a f0 ff ff       	call   c00044ad <list_append>
c0005473:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:138
   ASSERT(!elem_find(&thread_all_list, &thread->all_list_tag));
c0005476:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005479:	83 c0 2c             	add    $0x2c,%eax
c000547c:	83 ec 08             	sub    $0x8,%esp
c000547f:	50                   	push   %eax
c0005480:	68 1c b0 00 c0       	push   $0xc000b01c
c0005485:	e8 9d f0 ff ff       	call   c0004527 <elem_find>
c000548a:	83 c4 10             	add    $0x10,%esp
c000548d:	85 c0                	test   %eax,%eax
c000548f:	74 1c                	je     c00054ad <process_execute+0xf9>
/work/x86_os_my/userprog/process.c:138 (discriminator 1)
c0005491:	68 0c 7d 00 c0       	push   $0xc0007d0c
c0005496:	68 54 7d 00 c0       	push   $0xc0007d54
c000549b:	68 8a 00 00 00       	push   $0x8a
c00054a0:	68 95 7c 00 c0       	push   $0xc0007c95
c00054a5:	e8 e8 d0 ff ff       	call   c0002592 <panic_spin>
c00054aa:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:139
   list_append(&thread_all_list, &thread->all_list_tag);
c00054ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00054b0:	83 c0 2c             	add    $0x2c,%eax
c00054b3:	83 ec 08             	sub    $0x8,%esp
c00054b6:	50                   	push   %eax
c00054b7:	68 1c b0 00 c0       	push   $0xc000b01c
c00054bc:	e8 ec ef ff ff       	call   c00044ad <list_append>
c00054c1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:140
   intr_set_status(old_status);
c00054c4:	83 ec 0c             	sub    $0xc,%esp
c00054c7:	ff 75 f0             	pushl  -0x10(%ebp)
c00054ca:	e8 47 c7 ff ff       	call   c0001c16 <intr_set_status>
c00054cf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:141
}
c00054d2:	90                   	nop
c00054d3:	c9                   	leave  
c00054d4:	c3                   	ret    

c00054d5 <getpid>:
getpid():
/work/x86_os_my/lib/user/syscall.c:52
   );							       \
   retval;						       \
})

/* 返回当前任务pid */
uint32_t getpid() {
c00054d5:	55                   	push   %ebp
c00054d6:	89 e5                	mov    %esp,%ebp
c00054d8:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:53
   return _syscall0(SYS_GETPID);
c00054db:	b8 00 00 00 00       	mov    $0x0,%eax
c00054e0:	cd 80                	int    $0x80
c00054e2:	89 45 fc             	mov    %eax,-0x4(%ebp)
c00054e5:	8b 45 fc             	mov    -0x4(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:54
}
c00054e8:	c9                   	leave  
c00054e9:	c3                   	ret    

c00054ea <write>:
write():
/work/x86_os_my/lib/user/syscall.c:57

/* 打印字符串str */
uint32_t write(char* str) {
c00054ea:	55                   	push   %ebp
c00054eb:	89 e5                	mov    %esp,%ebp
c00054ed:	53                   	push   %ebx
c00054ee:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:58
	return _syscall1(SYS_WRITE, str);
c00054f1:	b8 01 00 00 00       	mov    $0x1,%eax
c00054f6:	8b 55 08             	mov    0x8(%ebp),%edx
c00054f9:	89 d3                	mov    %edx,%ebx
c00054fb:	cd 80                	int    $0x80
c00054fd:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0005500:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:59
}
c0005503:	83 c4 10             	add    $0x10,%esp
c0005506:	5b                   	pop    %ebx
c0005507:	5d                   	pop    %ebp
c0005508:	c3                   	ret    

c0005509 <malloc>:
malloc():
/work/x86_os_my/lib/user/syscall.c:62

/* 申请size字节大小的内存,并返回结果 */
void* malloc(uint32_t size) {
c0005509:	55                   	push   %ebp
c000550a:	89 e5                	mov    %esp,%ebp
c000550c:	53                   	push   %ebx
c000550d:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:63
	return (void*)_syscall1(SYS_MALLOC, size);
c0005510:	b8 02 00 00 00       	mov    $0x2,%eax
c0005515:	8b 55 08             	mov    0x8(%ebp),%edx
c0005518:	89 d3                	mov    %edx,%ebx
c000551a:	cd 80                	int    $0x80
c000551c:	89 45 f8             	mov    %eax,-0x8(%ebp)
c000551f:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:64
}
c0005522:	83 c4 10             	add    $0x10,%esp
c0005525:	5b                   	pop    %ebx
c0005526:	5d                   	pop    %ebp
c0005527:	c3                   	ret    

c0005528 <free>:
free():
/work/x86_os_my/lib/user/syscall.c:67

/* 释放ptr指向的内存 */
void free(void* ptr) {
c0005528:	55                   	push   %ebp
c0005529:	89 e5                	mov    %esp,%ebp
c000552b:	53                   	push   %ebx
c000552c:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:68
	_syscall1(SYS_FREE, ptr);
c000552f:	b8 03 00 00 00       	mov    $0x3,%eax
c0005534:	8b 55 08             	mov    0x8(%ebp),%edx
c0005537:	89 d3                	mov    %edx,%ebx
c0005539:	cd 80                	int    $0x80
c000553b:	89 45 f8             	mov    %eax,-0x8(%ebp)
/work/x86_os_my/lib/user/syscall.c:69
}
c000553e:	90                   	nop
c000553f:	83 c4 10             	add    $0x10,%esp
c0005542:	5b                   	pop    %ebx
c0005543:	5d                   	pop    %ebp
c0005544:	c3                   	ret    

c0005545 <sys_getpid>:
sys_getpid():
/work/x86_os_my/userprog/syscall-init.c:15
#define syscall_nr 32 
typedef void* syscall;
syscall syscall_table[syscall_nr];

/* 返回当前任务的pid */
uint32_t sys_getpid(void) {
c0005545:	55                   	push   %ebp
c0005546:	89 e5                	mov    %esp,%ebp
c0005548:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/userprog/syscall-init.c:16
	return running_thread()->pid;
c000554b:	e8 41 e8 ff ff       	call   c0003d91 <running_thread>
c0005550:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0005554:	98                   	cwtl   
/work/x86_os_my/userprog/syscall-init.c:17
}
c0005555:	c9                   	leave  
c0005556:	c3                   	ret    

c0005557 <sys_write>:
sys_write():
/work/x86_os_my/userprog/syscall-init.c:20

/* 打印字符串str(未实现文件系统前的版本) */
uint32_t sys_write(char* str) {
c0005557:	55                   	push   %ebp
c0005558:	89 e5                	mov    %esp,%ebp
c000555a:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/userprog/syscall-init.c:21
	console_put_str(str);
c000555d:	83 ec 0c             	sub    $0xc,%esp
c0005560:	ff 75 08             	pushl  0x8(%ebp)
c0005563:	e8 08 f1 ff ff       	call   c0004670 <console_put_str>
c0005568:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/syscall-init.c:22
	return strlen(str);
c000556b:	83 ec 0c             	sub    $0xc,%esp
c000556e:	ff 75 08             	pushl  0x8(%ebp)
c0005571:	e8 be e5 ff ff       	call   c0003b34 <strlen>
c0005576:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/syscall-init.c:23
}
c0005579:	c9                   	leave  
c000557a:	c3                   	ret    

c000557b <syscall_init>:
syscall_init():
/work/x86_os_my/userprog/syscall-init.c:26

/* 初始化系统调用 */
void syscall_init(void) {
c000557b:	55                   	push   %ebp
c000557c:	89 e5                	mov    %esp,%ebp
c000557e:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/userprog/syscall-init.c:27
	put_str("syscall_init start\n");
c0005581:	83 ec 0c             	sub    $0xc,%esp
c0005584:	68 64 7d 00 c0       	push   $0xc0007d64
c0005589:	e8 92 ce ff ff       	call   c0002420 <put_str>
c000558e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/syscall-init.c:28
	syscall_table[SYS_GETPID] = sys_getpid;
c0005591:	c7 05 e0 b0 00 c0 45 	movl   $0xc0005545,0xc000b0e0
c0005598:	55 00 c0 
/work/x86_os_my/userprog/syscall-init.c:29
	syscall_table[SYS_WRITE] = sys_write;
c000559b:	c7 05 e4 b0 00 c0 57 	movl   $0xc0005557,0xc000b0e4
c00055a2:	55 00 c0 
/work/x86_os_my/userprog/syscall-init.c:30
	syscall_table[SYS_MALLOC] = sys_malloc;
c00055a5:	c7 05 e8 b0 00 c0 b3 	movl   $0xc0002eb3,0xc000b0e8
c00055ac:	2e 00 c0 
/work/x86_os_my/userprog/syscall-init.c:31
	syscall_table[SYS_FREE] = sys_free;
c00055af:	c7 05 ec b0 00 c0 e0 	movl   $0xc00034e0,0xc000b0ec
c00055b6:	34 00 c0 
/work/x86_os_my/userprog/syscall-init.c:32
	put_str("syscall_init done\n");
c00055b9:	83 ec 0c             	sub    $0xc,%esp
c00055bc:	68 78 7d 00 c0       	push   $0xc0007d78
c00055c1:	e8 5a ce ff ff       	call   c0002420 <put_str>
c00055c6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/syscall-init.c:33
}
c00055c9:	90                   	nop
c00055ca:	c9                   	leave  
c00055cb:	c3                   	ret    

c00055cc <itoa>:
itoa():
/work/x86_os_my/lib/stdio.c:13
#define va_start(ap, v) ap = (va_list)&v	// 把ap指向第一个固定参数v
#define va_arg(ap, t) *((t*)(ap += 4))		// ap指向下一个参数并返回其值
#define va_end(ap) ap = NULL				// 清除ap

/* 将整型转换成字符(integer to ascii) */
static void itoa(uint32_t value, char** buf_ptr_addr, uint8_t base) {
c00055cc:	55                   	push   %ebp
c00055cd:	89 e5                	mov    %esp,%ebp
c00055cf:	83 ec 28             	sub    $0x28,%esp
c00055d2:	8b 45 10             	mov    0x10(%ebp),%eax
c00055d5:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/lib/stdio.c:14
	uint32_t m = value % base;	// 求模,最先掉下来的是最低位【比如base是16代表16进制】 
c00055d8:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
c00055dc:	8b 45 08             	mov    0x8(%ebp),%eax
c00055df:	ba 00 00 00 00       	mov    $0x0,%edx
c00055e4:	f7 f1                	div    %ecx
c00055e6:	89 55 f4             	mov    %edx,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:15
	uint32_t i = value / base;	// 取整
c00055e9:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
c00055ed:	8b 45 08             	mov    0x8(%ebp),%eax
c00055f0:	ba 00 00 00 00       	mov    $0x0,%edx
c00055f5:	f7 f1                	div    %ecx
c00055f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/stdio.c:16
	if (i) {
c00055fa:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c00055fe:	74 16                	je     c0005616 <itoa+0x4a>
/work/x86_os_my/lib/stdio.c:17
		itoa(i, buf_ptr_addr, base);	// 如果倍数不为0则递归调用。
c0005600:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0005604:	83 ec 04             	sub    $0x4,%esp
c0005607:	50                   	push   %eax
c0005608:	ff 75 0c             	pushl  0xc(%ebp)
c000560b:	ff 75 f0             	pushl  -0x10(%ebp)
c000560e:	e8 b9 ff ff ff       	call   c00055cc <itoa>
c0005613:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:19
	}
	if (m < 10) {	// 如果余数是0~9
c0005616:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
c000561a:	77 17                	ja     c0005633 <itoa+0x67>
/work/x86_os_my/lib/stdio.c:20
		*((*buf_ptr_addr)++) = m + '0';			// 将数字0~9转换为字符'0'~'9'
c000561c:	8b 45 0c             	mov    0xc(%ebp),%eax
c000561f:	8b 00                	mov    (%eax),%eax
c0005621:	8d 48 01             	lea    0x1(%eax),%ecx
c0005624:	8b 55 0c             	mov    0xc(%ebp),%edx
c0005627:	89 0a                	mov    %ecx,(%edx)
c0005629:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000562c:	83 c2 30             	add    $0x30,%edx
c000562f:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/stdio.c:24
	} else {		// 否则余数是A~F
		*((*buf_ptr_addr)++) = m - 10 + 'A';	// 将数字A~F转换为字符'A'~'F'
	}
}
c0005631:	eb 15                	jmp    c0005648 <itoa+0x7c>
/work/x86_os_my/lib/stdio.c:22
		itoa(i, buf_ptr_addr, base);	// 如果倍数不为0则递归调用。
	}
	if (m < 10) {	// 如果余数是0~9
		*((*buf_ptr_addr)++) = m + '0';			// 将数字0~9转换为字符'0'~'9'
	} else {		// 否则余数是A~F
		*((*buf_ptr_addr)++) = m - 10 + 'A';	// 将数字A~F转换为字符'A'~'F'
c0005633:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005636:	8b 00                	mov    (%eax),%eax
c0005638:	8d 48 01             	lea    0x1(%eax),%ecx
c000563b:	8b 55 0c             	mov    0xc(%ebp),%edx
c000563e:	89 0a                	mov    %ecx,(%edx)
c0005640:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0005643:	83 c2 37             	add    $0x37,%edx
c0005646:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/stdio.c:24
	}
}
c0005648:	90                   	nop
c0005649:	c9                   	leave  
c000564a:	c3                   	ret    

c000564b <vsprintf>:
vsprintf():
/work/x86_os_my/lib/stdio.c:27

/* 将参数ap按照格式format输出到字符串str,并返回替换后str长度 */
uint32_t vsprintf(char* str, const char* format, va_list ap) {
c000564b:	55                   	push   %ebp
c000564c:	89 e5                	mov    %esp,%ebp
c000564e:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/lib/stdio.c:28
	char* buf_ptr = str;
c0005651:	8b 45 08             	mov    0x8(%ebp),%eax
c0005654:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/lib/stdio.c:29
	const char* index_ptr = format;
c0005657:	8b 45 0c             	mov    0xc(%ebp),%eax
c000565a:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:30
	char index_char = *index_ptr;
c000565d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005660:	0f b6 00             	movzbl (%eax),%eax
c0005663:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:33
	int32_t arg_int;
	char* arg_str;
	while(index_char) {
c0005666:	e9 43 01 00 00       	jmp    c00057ae <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:34
		if (index_char != '%') {
c000566b:	80 7d f3 25          	cmpb   $0x25,-0xd(%ebp)
c000566f:	74 21                	je     c0005692 <vsprintf+0x47>
/work/x86_os_my/lib/stdio.c:35
			*(buf_ptr++) = index_char;
c0005671:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0005674:	8d 50 01             	lea    0x1(%eax),%edx
c0005677:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c000567a:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
c000567e:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/stdio.c:36
			index_char = *(++index_ptr);
c0005680:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0005684:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005687:	0f b6 00             	movzbl (%eax),%eax
c000568a:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:37
			continue;
c000568d:	e9 1c 01 00 00       	jmp    c00057ae <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:39
		}
		index_char = *(++index_ptr);	 // 得到%后面的字符
c0005692:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0005696:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005699:	0f b6 00             	movzbl (%eax),%eax
c000569c:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:40
		switch(index_char) {
c000569f:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c00056a3:	83 f8 64             	cmp    $0x64,%eax
c00056a6:	0f 84 8e 00 00 00    	je     c000573a <vsprintf+0xef>
c00056ac:	83 f8 64             	cmp    $0x64,%eax
c00056af:	7f 0a                	jg     c00056bb <vsprintf+0x70>
c00056b1:	83 f8 63             	cmp    $0x63,%eax
c00056b4:	74 60                	je     c0005716 <vsprintf+0xcb>
c00056b6:	e9 f3 00 00 00       	jmp    c00057ae <vsprintf+0x163>
c00056bb:	83 f8 73             	cmp    $0x73,%eax
c00056be:	74 0e                	je     c00056ce <vsprintf+0x83>
c00056c0:	83 f8 78             	cmp    $0x78,%eax
c00056c3:	0f 84 b6 00 00 00    	je     c000577f <vsprintf+0x134>
c00056c9:	e9 e0 00 00 00       	jmp    c00057ae <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:42
			case 's':
			arg_str = va_arg(ap, char*);
c00056ce:	83 45 10 04          	addl   $0x4,0x10(%ebp)
c00056d2:	8b 45 10             	mov    0x10(%ebp),%eax
c00056d5:	8b 00                	mov    (%eax),%eax
c00056d7:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/lib/stdio.c:43
			strcpy(buf_ptr, arg_str);
c00056da:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00056dd:	83 ec 08             	sub    $0x8,%esp
c00056e0:	ff 75 e8             	pushl  -0x18(%ebp)
c00056e3:	50                   	push   %eax
c00056e4:	e8 f6 e3 ff ff       	call   c0003adf <strcpy>
c00056e9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:44
			buf_ptr += strlen(arg_str);
c00056ec:	83 ec 0c             	sub    $0xc,%esp
c00056ef:	ff 75 e8             	pushl  -0x18(%ebp)
c00056f2:	e8 3d e4 ff ff       	call   c0003b34 <strlen>
c00056f7:	83 c4 10             	add    $0x10,%esp
c00056fa:	89 c2                	mov    %eax,%edx
c00056fc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00056ff:	01 d0                	add    %edx,%eax
c0005701:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/lib/stdio.c:45
			index_char = *(++index_ptr);
c0005704:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0005708:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000570b:	0f b6 00             	movzbl (%eax),%eax
c000570e:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:46
			break;
c0005711:	e9 98 00 00 00       	jmp    c00057ae <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:49

			case 'c':
			*(buf_ptr++) = va_arg(ap, char);
c0005716:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0005719:	8d 50 01             	lea    0x1(%eax),%edx
c000571c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c000571f:	83 45 10 04          	addl   $0x4,0x10(%ebp)
c0005723:	8b 55 10             	mov    0x10(%ebp),%edx
c0005726:	0f b6 12             	movzbl (%edx),%edx
c0005729:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/stdio.c:50
			index_char = *(++index_ptr);
c000572b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c000572f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005732:	0f b6 00             	movzbl (%eax),%eax
c0005735:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:51
			break;
c0005738:	eb 74                	jmp    c00057ae <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:54

			case 'd':
			arg_int = va_arg(ap, int);
c000573a:	83 45 10 04          	addl   $0x4,0x10(%ebp)
c000573e:	8b 45 10             	mov    0x10(%ebp),%eax
c0005741:	8b 00                	mov    (%eax),%eax
c0005743:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/lib/stdio.c:56
			/* 若是负数, 将其转为正数后,再正数前面输出个负号'-'. */
			if (arg_int < 0) {
c0005746:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c000574a:	79 0f                	jns    c000575b <vsprintf+0x110>
/work/x86_os_my/lib/stdio.c:57
				arg_int = 0 - arg_int;
c000574c:	f7 5d ec             	negl   -0x14(%ebp)
/work/x86_os_my/lib/stdio.c:58
				*buf_ptr++ = '-';
c000574f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0005752:	8d 50 01             	lea    0x1(%eax),%edx
c0005755:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0005758:	c6 00 2d             	movb   $0x2d,(%eax)
/work/x86_os_my/lib/stdio.c:60
			}
			itoa(arg_int, &buf_ptr, 10); 
c000575b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000575e:	83 ec 04             	sub    $0x4,%esp
c0005761:	6a 0a                	push   $0xa
c0005763:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0005766:	52                   	push   %edx
c0005767:	50                   	push   %eax
c0005768:	e8 5f fe ff ff       	call   c00055cc <itoa>
c000576d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:61
			index_char = *(++index_ptr);
c0005770:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0005774:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005777:	0f b6 00             	movzbl (%eax),%eax
c000577a:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:62
			break;
c000577d:	eb 2f                	jmp    c00057ae <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:65

			case 'x':
			arg_int = va_arg(ap, int);
c000577f:	83 45 10 04          	addl   $0x4,0x10(%ebp)
c0005783:	8b 45 10             	mov    0x10(%ebp),%eax
c0005786:	8b 00                	mov    (%eax),%eax
c0005788:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/lib/stdio.c:66
			itoa(arg_int, &buf_ptr, 16); 
c000578b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000578e:	83 ec 04             	sub    $0x4,%esp
c0005791:	6a 10                	push   $0x10
c0005793:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0005796:	52                   	push   %edx
c0005797:	50                   	push   %eax
c0005798:	e8 2f fe ff ff       	call   c00055cc <itoa>
c000579d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:67
			index_char = *(++index_ptr); // 跳过格式字符并更新index_char
c00057a0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c00057a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00057a7:	0f b6 00             	movzbl (%eax),%eax
c00057aa:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:68
			break;
c00057ad:	90                   	nop
/work/x86_os_my/lib/stdio.c:33
	char* buf_ptr = str;
	const char* index_ptr = format;
	char index_char = *index_ptr;
	int32_t arg_int;
	char* arg_str;
	while(index_char) {
c00057ae:	80 7d f3 00          	cmpb   $0x0,-0xd(%ebp)
c00057b2:	0f 85 b3 fe ff ff    	jne    c000566b <vsprintf+0x20>
/work/x86_os_my/lib/stdio.c:71
			itoa(arg_int, &buf_ptr, 16); 
			index_char = *(++index_ptr); // 跳过格式字符并更新index_char
			break;
		}
	}
	return strlen(str);
c00057b8:	83 ec 0c             	sub    $0xc,%esp
c00057bb:	ff 75 08             	pushl  0x8(%ebp)
c00057be:	e8 71 e3 ff ff       	call   c0003b34 <strlen>
c00057c3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:72
}
c00057c6:	c9                   	leave  
c00057c7:	c3                   	ret    

c00057c8 <sprintf>:
sprintf():
/work/x86_os_my/lib/stdio.c:75

/* 同printf不同的地方就是字符串不是写到终端,而是写到buf中 */
uint32_t sprintf(char* buf, const char* format, ...) {
c00057c8:	55                   	push   %ebp
c00057c9:	89 e5                	mov    %esp,%ebp
c00057cb:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/stdio.c:78
	va_list args;
	uint32_t retval;
	va_start(args, format);
c00057ce:	8d 45 0c             	lea    0xc(%ebp),%eax
c00057d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:79
	retval = vsprintf(buf, format, args);
c00057d4:	8b 45 0c             	mov    0xc(%ebp),%eax
c00057d7:	83 ec 04             	sub    $0x4,%esp
c00057da:	ff 75 f4             	pushl  -0xc(%ebp)
c00057dd:	50                   	push   %eax
c00057de:	ff 75 08             	pushl  0x8(%ebp)
c00057e1:	e8 65 fe ff ff       	call   c000564b <vsprintf>
c00057e6:	83 c4 10             	add    $0x10,%esp
c00057e9:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/stdio.c:80
	va_end(args);
c00057ec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:81
	return retval;
c00057f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
/work/x86_os_my/lib/stdio.c:82
}
c00057f6:	c9                   	leave  
c00057f7:	c3                   	ret    

c00057f8 <printf>:
printf():
/work/x86_os_my/lib/stdio.c:85

/* 格式化输出字符串format */
uint32_t printf(const char* format, ...) {
c00057f8:	55                   	push   %ebp
c00057f9:	89 e5                	mov    %esp,%ebp
c00057fb:	57                   	push   %edi
c00057fc:	81 ec 14 04 00 00    	sub    $0x414,%esp
/work/x86_os_my/lib/stdio.c:87
	va_list args;
	va_start(args, format);	       // 使args指向format
c0005802:	8d 45 08             	lea    0x8(%ebp),%eax
c0005805:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:88
	char buf[1024] = {0};	       // 用于存储拼接后的字符串
c0005808:	8d 95 f4 fb ff ff    	lea    -0x40c(%ebp),%edx
c000580e:	b8 00 00 00 00       	mov    $0x0,%eax
c0005813:	b9 00 01 00 00       	mov    $0x100,%ecx
c0005818:	89 d7                	mov    %edx,%edi
c000581a:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/lib/stdio.c:89
	vsprintf(buf, format, args);
c000581c:	8b 45 08             	mov    0x8(%ebp),%eax
c000581f:	83 ec 04             	sub    $0x4,%esp
c0005822:	ff 75 f4             	pushl  -0xc(%ebp)
c0005825:	50                   	push   %eax
c0005826:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c000582c:	50                   	push   %eax
c000582d:	e8 19 fe ff ff       	call   c000564b <vsprintf>
c0005832:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:90
	va_end(args);
c0005835:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:91
	return write(buf);
c000583c:	83 ec 0c             	sub    $0xc,%esp
c000583f:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c0005845:	50                   	push   %eax
c0005846:	e8 9f fc ff ff       	call   c00054ea <write>
c000584b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:92
}
c000584e:	8b 7d fc             	mov    -0x4(%ebp),%edi
c0005851:	c9                   	leave  
c0005852:	c3                   	ret    

c0005853 <outb>:
outb():
/work/x86_os_my/lib/kernel/io.h:17
#define __LIB_IO_H
#include "stdint.h"
//inline省去了函数调用开支

/* 向端口port写入一个字节*/
static inline void outb(uint16_t port, uint8_t data) {
c0005853:	55                   	push   %ebp
c0005854:	89 e5                	mov    %esp,%ebp
c0005856:	83 ec 08             	sub    $0x8,%esp
c0005859:	8b 55 08             	mov    0x8(%ebp),%edx
c000585c:	8b 45 0c             	mov    0xc(%ebp),%eax
c000585f:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c0005863:	88 45 f8             	mov    %al,-0x8(%ebp)
/work/x86_os_my/lib/kernel/io.h:21
/*********************************************************
 a表示用寄存器al或ax或eax,对端口指定N表示0~255, d表示用dx存储端口号, 
 %b0表示对应al,%w1表示对应dx */ 
   asm volatile ( "outb %b0, %w1" : : "a" (data), "Nd" (port));    
c0005866:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c000586a:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c000586e:	ee                   	out    %al,(%dx)
/work/x86_os_my/lib/kernel/io.h:23
/******************************************************/
}
c000586f:	90                   	nop
c0005870:	c9                   	leave  
c0005871:	c3                   	ret    

c0005872 <outsw>:
outsw():
/work/x86_os_my/lib/kernel/io.h:26

/* 将addr处起始的word_cnt个字写入端口port */
static inline void outsw(uint16_t port, const void* addr, uint32_t word_cnt) {
c0005872:	55                   	push   %ebp
c0005873:	89 e5                	mov    %esp,%ebp
c0005875:	56                   	push   %esi
c0005876:	53                   	push   %ebx
c0005877:	83 ec 04             	sub    $0x4,%esp
c000587a:	8b 45 08             	mov    0x8(%ebp),%eax
c000587d:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/io.h:31
/*********************************************************
   +表示此限制即做输入又做输出.
   outsw是把ds:esi处的16位的内容写入port端口, 我们在设置段描述符时, 
   已经将ds,es,ss段的选择子都设置为相同的值了,此时不用担心数据错乱。*/
   asm volatile ("cld; rep outsw" : "+S" (addr), "+c" (word_cnt) : "d" (port));
c0005881:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c0005885:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0005888:	8b 45 10             	mov    0x10(%ebp),%eax
c000588b:	89 cb                	mov    %ecx,%ebx
c000588d:	89 de                	mov    %ebx,%esi
c000588f:	89 c1                	mov    %eax,%ecx
c0005891:	fc                   	cld    
c0005892:	66 f3 6f             	rep outsw %ds:(%esi),(%dx)
c0005895:	89 c8                	mov    %ecx,%eax
c0005897:	89 f3                	mov    %esi,%ebx
c0005899:	89 5d 0c             	mov    %ebx,0xc(%ebp)
c000589c:	89 45 10             	mov    %eax,0x10(%ebp)
/work/x86_os_my/lib/kernel/io.h:33
/******************************************************/
}
c000589f:	90                   	nop
c00058a0:	83 c4 04             	add    $0x4,%esp
c00058a3:	5b                   	pop    %ebx
c00058a4:	5e                   	pop    %esi
c00058a5:	5d                   	pop    %ebp
c00058a6:	c3                   	ret    

c00058a7 <inb>:
inb():
/work/x86_os_my/lib/kernel/io.h:36

/* 将从端口port读入的一个字节返回 */
static inline uint8_t inb(uint16_t port) {
c00058a7:	55                   	push   %ebp
c00058a8:	89 e5                	mov    %esp,%ebp
c00058aa:	83 ec 14             	sub    $0x14,%esp
c00058ad:	8b 45 08             	mov    0x8(%ebp),%eax
c00058b0:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
/work/x86_os_my/lib/kernel/io.h:38
   uint8_t data;
   asm volatile ("inb %w1, %b0" : "=a" (data) : "Nd" (port));
c00058b4:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c00058b8:	89 c2                	mov    %eax,%edx
c00058ba:	ec                   	in     (%dx),%al
c00058bb:	88 45 ff             	mov    %al,-0x1(%ebp)
/work/x86_os_my/lib/kernel/io.h:39
   return data;
c00058be:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
/work/x86_os_my/lib/kernel/io.h:40
}
c00058c2:	c9                   	leave  
c00058c3:	c3                   	ret    

c00058c4 <insw>:
insw():
/work/x86_os_my/lib/kernel/io.h:43

/* 将从端口port读入的word_cnt个字写入addr */
static inline void insw(uint16_t port, void* addr, uint32_t word_cnt) {
c00058c4:	55                   	push   %ebp
c00058c5:	89 e5                	mov    %esp,%ebp
c00058c7:	57                   	push   %edi
c00058c8:	53                   	push   %ebx
c00058c9:	83 ec 04             	sub    $0x4,%esp
c00058cc:	8b 45 08             	mov    0x8(%ebp),%eax
c00058cf:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/io.h:48
/******************************************************
   insw是将从端口port处读入的16位内容写入es:edi指向的内存,
   我们在设置段描述符时, 已经将ds,es,ss段的选择子都设置为相同的值了,
   此时不用担心数据错乱。*/
   asm volatile ("cld; rep insw" : "+D" (addr), "+c" (word_cnt) : "d" (port) : "memory");
c00058d3:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c00058d7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c00058da:	8b 45 10             	mov    0x10(%ebp),%eax
c00058dd:	89 cb                	mov    %ecx,%ebx
c00058df:	89 df                	mov    %ebx,%edi
c00058e1:	89 c1                	mov    %eax,%ecx
c00058e3:	fc                   	cld    
c00058e4:	66 f3 6d             	rep insw (%dx),%es:(%edi)
c00058e7:	89 c8                	mov    %ecx,%eax
c00058e9:	89 fb                	mov    %edi,%ebx
c00058eb:	89 5d 0c             	mov    %ebx,0xc(%ebp)
c00058ee:	89 45 10             	mov    %eax,0x10(%ebp)
/work/x86_os_my/lib/kernel/io.h:50
/******************************************************/
}
c00058f1:	90                   	nop
c00058f2:	83 c4 04             	add    $0x4,%esp
c00058f5:	5b                   	pop    %ebx
c00058f6:	5f                   	pop    %edi
c00058f7:	5d                   	pop    %ebp
c00058f8:	c3                   	ret    

c00058f9 <select_disk>:
select_disk():
/work/x86_os_my/device/ide.c:78
} __attribute__ ((packed));


/////////////////////////////////////// ide驱动部分 ////////////////////////////////////////////////
/* 选择读写的硬盘 */
static void select_disk(struct disk* hd) {
c00058f9:	55                   	push   %ebp
c00058fa:	89 e5                	mov    %esp,%ebp
c00058fc:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/device/ide.c:79
	uint8_t reg_device = BIT_DEV_MBS | BIT_DEV_LBA;
c00058ff:	c6 45 ff e0          	movb   $0xe0,-0x1(%ebp)
/work/x86_os_my/device/ide.c:80
	if (hd->dev_no == 1) {	// 若是从盘就置DEV位为1
c0005903:	8b 45 08             	mov    0x8(%ebp),%eax
c0005906:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
c000590a:	3c 01                	cmp    $0x1,%al
c000590c:	75 04                	jne    c0005912 <select_disk+0x19>
/work/x86_os_my/device/ide.c:81
		reg_device |= BIT_DEV_DEV;
c000590e:	80 4d ff 10          	orb    $0x10,-0x1(%ebp)
/work/x86_os_my/device/ide.c:83
	}
	outb(reg_dev(hd->my_channel), reg_device);
c0005912:	0f b6 55 ff          	movzbl -0x1(%ebp),%edx
c0005916:	8b 45 08             	mov    0x8(%ebp),%eax
c0005919:	8b 40 08             	mov    0x8(%eax),%eax
c000591c:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005920:	83 c0 06             	add    $0x6,%eax
c0005923:	0f b7 c0             	movzwl %ax,%eax
c0005926:	52                   	push   %edx
c0005927:	50                   	push   %eax
c0005928:	e8 26 ff ff ff       	call   c0005853 <outb>
c000592d:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/ide.c:84
}
c0005930:	90                   	nop
c0005931:	c9                   	leave  
c0005932:	c3                   	ret    

c0005933 <select_sector>:
select_sector():
/work/x86_os_my/device/ide.c:87

/* 向硬盘控制器写入起始扇区地址及要读写的扇区数 */
static void select_sector(struct disk* hd, uint32_t lba, uint8_t sec_cnt) {
c0005933:	55                   	push   %ebp
c0005934:	89 e5                	mov    %esp,%ebp
c0005936:	83 ec 28             	sub    $0x28,%esp
c0005939:	8b 45 10             	mov    0x10(%ebp),%eax
c000593c:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/device/ide.c:88
	ASSERT(lba <= max_lba);
c000593f:	81 7d 0c ff 7f 02 00 	cmpl   $0x27fff,0xc(%ebp)
c0005946:	76 19                	jbe    c0005961 <select_sector+0x2e>
/work/x86_os_my/device/ide.c:88 (discriminator 1)
c0005948:	68 8c 7d 00 c0       	push   $0xc0007d8c
c000594d:	68 24 7f 00 c0       	push   $0xc0007f24
c0005952:	6a 58                	push   $0x58
c0005954:	68 9b 7d 00 c0       	push   $0xc0007d9b
c0005959:	e8 34 cc ff ff       	call   c0002592 <panic_spin>
c000595e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:89
	struct ide_channel* channel = hd->my_channel;
c0005961:	8b 45 08             	mov    0x8(%ebp),%eax
c0005964:	8b 40 08             	mov    0x8(%eax),%eax
c0005967:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/ide.c:92

	/* 写入要读写的扇区数*/
	outb(reg_sect_cnt(channel), sec_cnt);	// 如果sec_cnt为0,则表示写入256个扇区
c000596a:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c000596e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005971:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005975:	83 c0 02             	add    $0x2,%eax
c0005978:	0f b7 c0             	movzwl %ax,%eax
c000597b:	83 ec 08             	sub    $0x8,%esp
c000597e:	52                   	push   %edx
c000597f:	50                   	push   %eax
c0005980:	e8 ce fe ff ff       	call   c0005853 <outb>
c0005985:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:95

	/* 写入lba地址(即扇区号) */
	outb(reg_lba_l(channel), lba);			// lba地址的低8位,不用单独取出低8位.outb函数中的汇编指令outb %b0, %w1会只用al。
c0005988:	8b 45 0c             	mov    0xc(%ebp),%eax
c000598b:	0f b6 d0             	movzbl %al,%edx
c000598e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005991:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005995:	83 c0 03             	add    $0x3,%eax
c0005998:	0f b7 c0             	movzwl %ax,%eax
c000599b:	83 ec 08             	sub    $0x8,%esp
c000599e:	52                   	push   %edx
c000599f:	50                   	push   %eax
c00059a0:	e8 ae fe ff ff       	call   c0005853 <outb>
c00059a5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:96
	outb(reg_lba_m(channel), lba >> 8);		// lba地址的8~15位
c00059a8:	8b 45 0c             	mov    0xc(%ebp),%eax
c00059ab:	c1 e8 08             	shr    $0x8,%eax
c00059ae:	0f b6 d0             	movzbl %al,%edx
c00059b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00059b4:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c00059b8:	83 c0 04             	add    $0x4,%eax
c00059bb:	0f b7 c0             	movzwl %ax,%eax
c00059be:	83 ec 08             	sub    $0x8,%esp
c00059c1:	52                   	push   %edx
c00059c2:	50                   	push   %eax
c00059c3:	e8 8b fe ff ff       	call   c0005853 <outb>
c00059c8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:97
	outb(reg_lba_h(channel), lba >> 16);	// lba地址的16~23位
c00059cb:	8b 45 0c             	mov    0xc(%ebp),%eax
c00059ce:	c1 e8 10             	shr    $0x10,%eax
c00059d1:	0f b6 d0             	movzbl %al,%edx
c00059d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00059d7:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c00059db:	83 c0 05             	add    $0x5,%eax
c00059de:	0f b7 c0             	movzwl %ax,%eax
c00059e1:	83 ec 08             	sub    $0x8,%esp
c00059e4:	52                   	push   %edx
c00059e5:	50                   	push   %eax
c00059e6:	e8 68 fe ff ff       	call   c0005853 <outb>
c00059eb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:101

	/* 因为lba地址的24~27位要存储在device寄存器的0～3位,
	* 无法单独写入这4位,所以在此处把device寄存器再重新写入一次*/
	outb(reg_dev(channel), BIT_DEV_MBS | BIT_DEV_LBA | (hd->dev_no == 1 ? BIT_DEV_DEV : 0) | lba >> 24);
c00059ee:	8b 45 08             	mov    0x8(%ebp),%eax
c00059f1:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
c00059f5:	3c 01                	cmp    $0x1,%al
c00059f7:	75 07                	jne    c0005a00 <select_sector+0xcd>
/work/x86_os_my/device/ide.c:101 (discriminator 1)
c00059f9:	ba f0 ff ff ff       	mov    $0xfffffff0,%edx
c00059fe:	eb 05                	jmp    c0005a05 <select_sector+0xd2>
/work/x86_os_my/device/ide.c:101 (discriminator 2)
c0005a00:	ba e0 ff ff ff       	mov    $0xffffffe0,%edx
/work/x86_os_my/device/ide.c:101 (discriminator 4)
c0005a05:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005a08:	c1 e8 18             	shr    $0x18,%eax
c0005a0b:	09 d0                	or     %edx,%eax
c0005a0d:	0f b6 d0             	movzbl %al,%edx
c0005a10:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005a13:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005a17:	83 c0 06             	add    $0x6,%eax
c0005a1a:	0f b7 c0             	movzwl %ax,%eax
c0005a1d:	83 ec 08             	sub    $0x8,%esp
c0005a20:	52                   	push   %edx
c0005a21:	50                   	push   %eax
c0005a22:	e8 2c fe ff ff       	call   c0005853 <outb>
c0005a27:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:102 (discriminator 4)
}
c0005a2a:	90                   	nop
c0005a2b:	c9                   	leave  
c0005a2c:	c3                   	ret    

c0005a2d <cmd_out>:
cmd_out():
/work/x86_os_my/device/ide.c:105

/* 向通道channel发命令cmd */
static void cmd_out(struct ide_channel* channel, uint8_t cmd) {
c0005a2d:	55                   	push   %ebp
c0005a2e:	89 e5                	mov    %esp,%ebp
c0005a30:	83 ec 04             	sub    $0x4,%esp
c0005a33:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005a36:	88 45 fc             	mov    %al,-0x4(%ebp)
/work/x86_os_my/device/ide.c:107
	/* 只要向硬盘发出了命令便将此标记置为true,硬盘中断处理程序需要根据它来判断 */
	channel->expecting_intr = true;
c0005a39:	8b 45 08             	mov    0x8(%ebp),%eax
c0005a3c:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
/work/x86_os_my/device/ide.c:108
	outb(reg_cmd(channel), cmd);
c0005a43:	0f b6 55 fc          	movzbl -0x4(%ebp),%edx
c0005a47:	8b 45 08             	mov    0x8(%ebp),%eax
c0005a4a:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005a4e:	83 c0 07             	add    $0x7,%eax
c0005a51:	0f b7 c0             	movzwl %ax,%eax
c0005a54:	52                   	push   %edx
c0005a55:	50                   	push   %eax
c0005a56:	e8 f8 fd ff ff       	call   c0005853 <outb>
c0005a5b:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/ide.c:109
}
c0005a5e:	90                   	nop
c0005a5f:	c9                   	leave  
c0005a60:	c3                   	ret    

c0005a61 <read_from_sector>:
read_from_sector():
/work/x86_os_my/device/ide.c:112

/* 硬盘读入sec_cnt个扇区的数据到buf */
static void read_from_sector(struct disk* hd, void* buf, uint8_t sec_cnt) {
c0005a61:	55                   	push   %ebp
c0005a62:	89 e5                	mov    %esp,%ebp
c0005a64:	83 ec 14             	sub    $0x14,%esp
c0005a67:	8b 45 10             	mov    0x10(%ebp),%eax
c0005a6a:	88 45 ec             	mov    %al,-0x14(%ebp)
/work/x86_os_my/device/ide.c:114
	uint32_t size_in_byte;
	if (sec_cnt == 0) {
c0005a6d:	80 7d ec 00          	cmpb   $0x0,-0x14(%ebp)
c0005a71:	75 09                	jne    c0005a7c <read_from_sector+0x1b>
/work/x86_os_my/device/ide.c:116
		/* 因为sec_cnt是8位变量,由主调函数将其赋值时,若为256则会将最高位的1丢掉变为0 */
		size_in_byte = 256 * 512;
c0005a73:	c7 45 fc 00 00 02 00 	movl   $0x20000,-0x4(%ebp)
c0005a7a:	eb 0a                	jmp    c0005a86 <read_from_sector+0x25>
/work/x86_os_my/device/ide.c:118
	} else { 
		size_in_byte = sec_cnt * 512; 
c0005a7c:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0005a80:	c1 e0 09             	shl    $0x9,%eax
c0005a83:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/device/ide.c:120
	}
	insw(reg_data(hd->my_channel), buf, size_in_byte / 2);
c0005a86:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0005a89:	d1 e8                	shr    %eax
c0005a8b:	89 c2                	mov    %eax,%edx
c0005a8d:	8b 45 08             	mov    0x8(%ebp),%eax
c0005a90:	8b 40 08             	mov    0x8(%eax),%eax
c0005a93:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005a97:	0f b7 c0             	movzwl %ax,%eax
c0005a9a:	52                   	push   %edx
c0005a9b:	ff 75 0c             	pushl  0xc(%ebp)
c0005a9e:	50                   	push   %eax
c0005a9f:	e8 20 fe ff ff       	call   c00058c4 <insw>
c0005aa4:	83 c4 0c             	add    $0xc,%esp
/work/x86_os_my/device/ide.c:121
}
c0005aa7:	90                   	nop
c0005aa8:	c9                   	leave  
c0005aa9:	c3                   	ret    

c0005aaa <write2sector>:
write2sector():
/work/x86_os_my/device/ide.c:124

/* 将buf中sec_cnt扇区的数据写入硬盘 */
static void write2sector(struct disk* hd, void* buf, uint8_t sec_cnt) {
c0005aaa:	55                   	push   %ebp
c0005aab:	89 e5                	mov    %esp,%ebp
c0005aad:	83 ec 14             	sub    $0x14,%esp
c0005ab0:	8b 45 10             	mov    0x10(%ebp),%eax
c0005ab3:	88 45 ec             	mov    %al,-0x14(%ebp)
/work/x86_os_my/device/ide.c:126
	uint32_t size_in_byte;
	if (sec_cnt == 0) {
c0005ab6:	80 7d ec 00          	cmpb   $0x0,-0x14(%ebp)
c0005aba:	75 09                	jne    c0005ac5 <write2sector+0x1b>
/work/x86_os_my/device/ide.c:128
		/* 因为sec_cnt是8位变量,由主调函数将其赋值时,若为256则会将最高位的1丢掉变为0 */
		size_in_byte = 256 * 512;
c0005abc:	c7 45 fc 00 00 02 00 	movl   $0x20000,-0x4(%ebp)
c0005ac3:	eb 0a                	jmp    c0005acf <write2sector+0x25>
/work/x86_os_my/device/ide.c:130
	} else { 
		size_in_byte = sec_cnt * 512; 
c0005ac5:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0005ac9:	c1 e0 09             	shl    $0x9,%eax
c0005acc:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/device/ide.c:132
	}
	outsw(reg_data(hd->my_channel), buf, size_in_byte / 2);
c0005acf:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0005ad2:	d1 e8                	shr    %eax
c0005ad4:	89 c2                	mov    %eax,%edx
c0005ad6:	8b 45 08             	mov    0x8(%ebp),%eax
c0005ad9:	8b 40 08             	mov    0x8(%eax),%eax
c0005adc:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005ae0:	0f b7 c0             	movzwl %ax,%eax
c0005ae3:	52                   	push   %edx
c0005ae4:	ff 75 0c             	pushl  0xc(%ebp)
c0005ae7:	50                   	push   %eax
c0005ae8:	e8 85 fd ff ff       	call   c0005872 <outsw>
c0005aed:	83 c4 0c             	add    $0xc,%esp
/work/x86_os_my/device/ide.c:133
}
c0005af0:	90                   	nop
c0005af1:	c9                   	leave  
c0005af2:	c3                   	ret    

c0005af3 <busy_wait>:
busy_wait():
/work/x86_os_my/device/ide.c:136

/* 等待30秒 */
static bool busy_wait(struct disk* hd) {
c0005af3:	55                   	push   %ebp
c0005af4:	89 e5                	mov    %esp,%ebp
c0005af6:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/ide.c:137
	struct ide_channel* channel = hd->my_channel;
c0005af9:	8b 45 08             	mov    0x8(%ebp),%eax
c0005afc:	8b 40 08             	mov    0x8(%eax),%eax
c0005aff:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:138
	uint16_t time_limit = 30 * 1000;	// 可以等待30000毫秒
c0005b02:	66 c7 45 f6 30 75    	movw   $0x7530,-0xa(%ebp)
/work/x86_os_my/device/ide.c:139
	while (time_limit -= 10 >= 0) {
c0005b08:	eb 45                	jmp    c0005b4f <busy_wait+0x5c>
/work/x86_os_my/device/ide.c:140
		if (!(inb(reg_status(channel)) & BIT_STAT_BSY)) {
c0005b0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0005b0d:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005b11:	83 c0 07             	add    $0x7,%eax
c0005b14:	0f b7 c0             	movzwl %ax,%eax
c0005b17:	50                   	push   %eax
c0005b18:	e8 8a fd ff ff       	call   c00058a7 <inb>
c0005b1d:	83 c4 04             	add    $0x4,%esp
c0005b20:	84 c0                	test   %al,%al
c0005b22:	78 1e                	js     c0005b42 <busy_wait+0x4f>
/work/x86_os_my/device/ide.c:141
			return (inb(reg_status(channel)) & BIT_STAT_DRQ);
c0005b24:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0005b27:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005b2b:	83 c0 07             	add    $0x7,%eax
c0005b2e:	0f b7 c0             	movzwl %ax,%eax
c0005b31:	50                   	push   %eax
c0005b32:	e8 70 fd ff ff       	call   c00058a7 <inb>
c0005b37:	83 c4 04             	add    $0x4,%esp
c0005b3a:	0f b6 c0             	movzbl %al,%eax
c0005b3d:	83 e0 08             	and    $0x8,%eax
c0005b40:	eb 1e                	jmp    c0005b60 <busy_wait+0x6d>
/work/x86_os_my/device/ide.c:143
		} else {
			mtime_sleep(10);			// 睡眠10毫秒
c0005b42:	83 ec 0c             	sub    $0xc,%esp
c0005b45:	6a 0a                	push   $0xa
c0005b47:	e8 cb c2 ff ff       	call   c0001e17 <mtime_sleep>
c0005b4c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:139

/* 等待30秒 */
static bool busy_wait(struct disk* hd) {
	struct ide_channel* channel = hd->my_channel;
	uint16_t time_limit = 30 * 1000;	// 可以等待30000毫秒
	while (time_limit -= 10 >= 0) {
c0005b4f:	66 83 6d f6 01       	subw   $0x1,-0xa(%ebp)
c0005b54:	66 83 7d f6 00       	cmpw   $0x0,-0xa(%ebp)
c0005b59:	75 af                	jne    c0005b0a <busy_wait+0x17>
/work/x86_os_my/device/ide.c:146
			return (inb(reg_status(channel)) & BIT_STAT_DRQ);
		} else {
			mtime_sleep(10);			// 睡眠10毫秒
		}
	}
	return false;
c0005b5b:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/device/ide.c:147
}
c0005b60:	c9                   	leave  
c0005b61:	c3                   	ret    

c0005b62 <ide_read>:
ide_read():
/work/x86_os_my/device/ide.c:150

/* 从硬盘读取sec_cnt个扇区到buf */
void ide_read(struct disk* hd, uint32_t lba, void* buf, uint32_t sec_cnt) { 
c0005b62:	55                   	push   %ebp
c0005b63:	89 e5                	mov    %esp,%ebp
c0005b65:	83 ec 58             	sub    $0x58,%esp
/work/x86_os_my/device/ide.c:151
	ASSERT(lba <= max_lba);
c0005b68:	81 7d 0c ff 7f 02 00 	cmpl   $0x27fff,0xc(%ebp)
c0005b6f:	76 1c                	jbe    c0005b8d <ide_read+0x2b>
/work/x86_os_my/device/ide.c:151 (discriminator 1)
c0005b71:	68 8c 7d 00 c0       	push   $0xc0007d8c
c0005b76:	68 34 7f 00 c0       	push   $0xc0007f34
c0005b7b:	68 97 00 00 00       	push   $0x97
c0005b80:	68 9b 7d 00 c0       	push   $0xc0007d9b
c0005b85:	e8 08 ca ff ff       	call   c0002592 <panic_spin>
c0005b8a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:152
	ASSERT(sec_cnt > 0);
c0005b8d:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0005b91:	75 1c                	jne    c0005baf <ide_read+0x4d>
/work/x86_os_my/device/ide.c:152 (discriminator 1)
c0005b93:	68 a8 7d 00 c0       	push   $0xc0007da8
c0005b98:	68 34 7f 00 c0       	push   $0xc0007f34
c0005b9d:	68 98 00 00 00       	push   $0x98
c0005ba2:	68 9b 7d 00 c0       	push   $0xc0007d9b
c0005ba7:	e8 e6 c9 ff ff       	call   c0002592 <panic_spin>
c0005bac:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:153
	lock_acquire (&hd->my_channel->lock);
c0005baf:	8b 45 08             	mov    0x8(%ebp),%eax
c0005bb2:	8b 40 08             	mov    0x8(%eax),%eax
c0005bb5:	83 c0 0c             	add    $0xc,%eax
c0005bb8:	83 ec 0c             	sub    $0xc,%esp
c0005bbb:	50                   	push   %eax
c0005bbc:	e8 1e ed ff ff       	call   c00048df <lock_acquire>
c0005bc1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:156

	/* 1 先选择操作的硬盘 */
	select_disk(hd);
c0005bc4:	83 ec 0c             	sub    $0xc,%esp
c0005bc7:	ff 75 08             	pushl  0x8(%ebp)
c0005bca:	e8 2a fd ff ff       	call   c00058f9 <select_disk>
c0005bcf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:159

	uint32_t secs_op;		// 每次操作的扇区数
	uint32_t secs_done = 0;	// 已完成的扇区数
c0005bd2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/device/ide.c:160
	while(secs_done < sec_cnt) {
c0005bd9:	e9 d4 00 00 00       	jmp    c0005cb2 <ide_read+0x150>
/work/x86_os_my/device/ide.c:161
		if ((secs_done + 256) <= sec_cnt) {
c0005bde:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0005be1:	05 00 01 00 00       	add    $0x100,%eax
c0005be6:	3b 45 14             	cmp    0x14(%ebp),%eax
c0005be9:	77 09                	ja     c0005bf4 <ide_read+0x92>
/work/x86_os_my/device/ide.c:162
			secs_op = 256;
c0005beb:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
c0005bf2:	eb 09                	jmp    c0005bfd <ide_read+0x9b>
/work/x86_os_my/device/ide.c:164
		} else {
			secs_op = sec_cnt - secs_done;
c0005bf4:	8b 45 14             	mov    0x14(%ebp),%eax
c0005bf7:	2b 45 f0             	sub    -0x10(%ebp),%eax
c0005bfa:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/ide.c:168
		}

		/* 2 写入待读入的扇区数和起始扇区号 */
		select_sector(hd, lba + secs_done, secs_op);
c0005bfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005c00:	0f b6 c0             	movzbl %al,%eax
c0005c03:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0005c06:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0005c09:	01 ca                	add    %ecx,%edx
c0005c0b:	83 ec 04             	sub    $0x4,%esp
c0005c0e:	50                   	push   %eax
c0005c0f:	52                   	push   %edx
c0005c10:	ff 75 08             	pushl  0x8(%ebp)
c0005c13:	e8 1b fd ff ff       	call   c0005933 <select_sector>
c0005c18:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:171

		/* 3 执行的命令写入reg_cmd寄存器 */
		cmd_out(hd->my_channel, CMD_READ_SECTOR);	// 准备开始读数据
c0005c1b:	8b 45 08             	mov    0x8(%ebp),%eax
c0005c1e:	8b 40 08             	mov    0x8(%eax),%eax
c0005c21:	83 ec 08             	sub    $0x8,%esp
c0005c24:	6a 20                	push   $0x20
c0005c26:	50                   	push   %eax
c0005c27:	e8 01 fe ff ff       	call   c0005a2d <cmd_out>
c0005c2c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:176

		/*********************   阻塞自己的时机  ***********************
		在硬盘已经开始工作(开始在内部读数据或写数据)后才能阻塞自己,现在硬盘已经开始忙了,
		将自己阻塞,等待硬盘完成读操作后通过中断处理程序唤醒自己*/
		sema_down(&hd->my_channel->disk_done);
c0005c2f:	8b 45 08             	mov    0x8(%ebp),%eax
c0005c32:	8b 40 08             	mov    0x8(%eax),%eax
c0005c35:	83 c0 2c             	add    $0x2c,%eax
c0005c38:	83 ec 0c             	sub    $0xc,%esp
c0005c3b:	50                   	push   %eax
c0005c3c:	e8 f4 ea ff ff       	call   c0004735 <sema_down>
c0005c41:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:181
		/*************************************************************/

		/* 4 检测硬盘状态是否可读 */
		/* 醒来后开始执行下面代码*/
		if (!busy_wait(hd)) {	// 若失败
c0005c44:	83 ec 0c             	sub    $0xc,%esp
c0005c47:	ff 75 08             	pushl  0x8(%ebp)
c0005c4a:	e8 a4 fe ff ff       	call   c0005af3 <busy_wait>
c0005c4f:	83 c4 10             	add    $0x10,%esp
c0005c52:	85 c0                	test   %eax,%eax
c0005c54:	75 33                	jne    c0005c89 <ide_read+0x127>
/work/x86_os_my/device/ide.c:183
			char error[64];
			sprintf(error, "%s read sector %d failed!!!!!!\n", hd->name, lba);
c0005c56:	8b 45 08             	mov    0x8(%ebp),%eax
c0005c59:	ff 75 0c             	pushl  0xc(%ebp)
c0005c5c:	50                   	push   %eax
c0005c5d:	68 b4 7d 00 c0       	push   $0xc0007db4
c0005c62:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0005c65:	50                   	push   %eax
c0005c66:	e8 5d fb ff ff       	call   c00057c8 <sprintf>
c0005c6b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:184
			PANIC(error);
c0005c6e:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0005c71:	50                   	push   %eax
c0005c72:	68 34 7f 00 c0       	push   $0xc0007f34
c0005c77:	68 b8 00 00 00       	push   $0xb8
c0005c7c:	68 9b 7d 00 c0       	push   $0xc0007d9b
c0005c81:	e8 0c c9 ff ff       	call   c0002592 <panic_spin>
c0005c86:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:188
		}

		/* 5 把数据从硬盘的缓冲区中读出 */
		read_from_sector(hd, (void*)((uint32_t)buf + secs_done * 512), secs_op);
c0005c89:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005c8c:	0f b6 c0             	movzbl %al,%eax
c0005c8f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0005c92:	89 d1                	mov    %edx,%ecx
c0005c94:	c1 e1 09             	shl    $0x9,%ecx
c0005c97:	8b 55 10             	mov    0x10(%ebp),%edx
c0005c9a:	01 ca                	add    %ecx,%edx
c0005c9c:	83 ec 04             	sub    $0x4,%esp
c0005c9f:	50                   	push   %eax
c0005ca0:	52                   	push   %edx
c0005ca1:	ff 75 08             	pushl  0x8(%ebp)
c0005ca4:	e8 b8 fd ff ff       	call   c0005a61 <read_from_sector>
c0005ca9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:189
		secs_done += secs_op;
c0005cac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005caf:	01 45 f0             	add    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:160
	/* 1 先选择操作的硬盘 */
	select_disk(hd);

	uint32_t secs_op;		// 每次操作的扇区数
	uint32_t secs_done = 0;	// 已完成的扇区数
	while(secs_done < sec_cnt) {
c0005cb2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0005cb5:	3b 45 14             	cmp    0x14(%ebp),%eax
c0005cb8:	0f 82 20 ff ff ff    	jb     c0005bde <ide_read+0x7c>
/work/x86_os_my/device/ide.c:191

		/* 5 把数据从硬盘的缓冲区中读出 */
		read_from_sector(hd, (void*)((uint32_t)buf + secs_done * 512), secs_op);
		secs_done += secs_op;
	}
	lock_release(&hd->my_channel->lock);
c0005cbe:	8b 45 08             	mov    0x8(%ebp),%eax
c0005cc1:	8b 40 08             	mov    0x8(%eax),%eax
c0005cc4:	83 c0 0c             	add    $0xc,%eax
c0005cc7:	83 ec 0c             	sub    $0xc,%esp
c0005cca:	50                   	push   %eax
c0005ccb:	e8 86 ec ff ff       	call   c0004956 <lock_release>
c0005cd0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:192
}
c0005cd3:	90                   	nop
c0005cd4:	c9                   	leave  
c0005cd5:	c3                   	ret    

c0005cd6 <ide_write>:
ide_write():
/work/x86_os_my/device/ide.c:195

/* 将buf中sec_cnt扇区数据写入硬盘 */
void ide_write(struct disk* hd, uint32_t lba, void* buf, uint32_t sec_cnt) {
c0005cd6:	55                   	push   %ebp
c0005cd7:	89 e5                	mov    %esp,%ebp
c0005cd9:	83 ec 58             	sub    $0x58,%esp
/work/x86_os_my/device/ide.c:196
	ASSERT(lba <= max_lba);
c0005cdc:	81 7d 0c ff 7f 02 00 	cmpl   $0x27fff,0xc(%ebp)
c0005ce3:	76 1c                	jbe    c0005d01 <ide_write+0x2b>
/work/x86_os_my/device/ide.c:196 (discriminator 1)
c0005ce5:	68 8c 7d 00 c0       	push   $0xc0007d8c
c0005cea:	68 40 7f 00 c0       	push   $0xc0007f40
c0005cef:	68 c4 00 00 00       	push   $0xc4
c0005cf4:	68 9b 7d 00 c0       	push   $0xc0007d9b
c0005cf9:	e8 94 c8 ff ff       	call   c0002592 <panic_spin>
c0005cfe:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:197
	ASSERT(sec_cnt > 0);
c0005d01:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0005d05:	75 1c                	jne    c0005d23 <ide_write+0x4d>
/work/x86_os_my/device/ide.c:197 (discriminator 1)
c0005d07:	68 a8 7d 00 c0       	push   $0xc0007da8
c0005d0c:	68 40 7f 00 c0       	push   $0xc0007f40
c0005d11:	68 c5 00 00 00       	push   $0xc5
c0005d16:	68 9b 7d 00 c0       	push   $0xc0007d9b
c0005d1b:	e8 72 c8 ff ff       	call   c0002592 <panic_spin>
c0005d20:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:198
	lock_acquire (&hd->my_channel->lock);
c0005d23:	8b 45 08             	mov    0x8(%ebp),%eax
c0005d26:	8b 40 08             	mov    0x8(%eax),%eax
c0005d29:	83 c0 0c             	add    $0xc,%eax
c0005d2c:	83 ec 0c             	sub    $0xc,%esp
c0005d2f:	50                   	push   %eax
c0005d30:	e8 aa eb ff ff       	call   c00048df <lock_acquire>
c0005d35:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:201

	/* 1 先选择操作的硬盘 */
	select_disk(hd);
c0005d38:	83 ec 0c             	sub    $0xc,%esp
c0005d3b:	ff 75 08             	pushl  0x8(%ebp)
c0005d3e:	e8 b6 fb ff ff       	call   c00058f9 <select_disk>
c0005d43:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:204

	uint32_t secs_op;		// 每次操作的扇区数
	uint32_t secs_done = 0;	// 已完成的扇区数
c0005d46:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/device/ide.c:205
	while(secs_done < sec_cnt) {
c0005d4d:	e9 d4 00 00 00       	jmp    c0005e26 <ide_write+0x150>
/work/x86_os_my/device/ide.c:206
		if ((secs_done + 256) <= sec_cnt) {
c0005d52:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0005d55:	05 00 01 00 00       	add    $0x100,%eax
c0005d5a:	3b 45 14             	cmp    0x14(%ebp),%eax
c0005d5d:	77 09                	ja     c0005d68 <ide_write+0x92>
/work/x86_os_my/device/ide.c:207
			secs_op = 256;
c0005d5f:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
c0005d66:	eb 09                	jmp    c0005d71 <ide_write+0x9b>
/work/x86_os_my/device/ide.c:209
		} else {
			secs_op = sec_cnt - secs_done;
c0005d68:	8b 45 14             	mov    0x14(%ebp),%eax
c0005d6b:	2b 45 f0             	sub    -0x10(%ebp),%eax
c0005d6e:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/ide.c:213
		}

		/* 2 写入待写入的扇区数和起始扇区号 */
		select_sector(hd, lba + secs_done, secs_op);
c0005d71:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005d74:	0f b6 c0             	movzbl %al,%eax
c0005d77:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0005d7a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0005d7d:	01 ca                	add    %ecx,%edx
c0005d7f:	83 ec 04             	sub    $0x4,%esp
c0005d82:	50                   	push   %eax
c0005d83:	52                   	push   %edx
c0005d84:	ff 75 08             	pushl  0x8(%ebp)
c0005d87:	e8 a7 fb ff ff       	call   c0005933 <select_sector>
c0005d8c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:216

		/* 3 执行的命令写入reg_cmd寄存器 */
		cmd_out(hd->my_channel, CMD_WRITE_SECTOR);	// 准备开始写数据
c0005d8f:	8b 45 08             	mov    0x8(%ebp),%eax
c0005d92:	8b 40 08             	mov    0x8(%eax),%eax
c0005d95:	83 ec 08             	sub    $0x8,%esp
c0005d98:	6a 30                	push   $0x30
c0005d9a:	50                   	push   %eax
c0005d9b:	e8 8d fc ff ff       	call   c0005a2d <cmd_out>
c0005da0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:219

		/* 4 检测硬盘状态是否可读 */
		if (!busy_wait(hd)) {	// 若失败
c0005da3:	83 ec 0c             	sub    $0xc,%esp
c0005da6:	ff 75 08             	pushl  0x8(%ebp)
c0005da9:	e8 45 fd ff ff       	call   c0005af3 <busy_wait>
c0005dae:	83 c4 10             	add    $0x10,%esp
c0005db1:	85 c0                	test   %eax,%eax
c0005db3:	75 33                	jne    c0005de8 <ide_write+0x112>
/work/x86_os_my/device/ide.c:221
			char error[64];
			sprintf(error, "%s write sector %d failed!!!!!!\n", hd->name, lba);
c0005db5:	8b 45 08             	mov    0x8(%ebp),%eax
c0005db8:	ff 75 0c             	pushl  0xc(%ebp)
c0005dbb:	50                   	push   %eax
c0005dbc:	68 d4 7d 00 c0       	push   $0xc0007dd4
c0005dc1:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0005dc4:	50                   	push   %eax
c0005dc5:	e8 fe f9 ff ff       	call   c00057c8 <sprintf>
c0005dca:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:222
			PANIC(error);
c0005dcd:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0005dd0:	50                   	push   %eax
c0005dd1:	68 40 7f 00 c0       	push   $0xc0007f40
c0005dd6:	68 de 00 00 00       	push   $0xde
c0005ddb:	68 9b 7d 00 c0       	push   $0xc0007d9b
c0005de0:	e8 ad c7 ff ff       	call   c0002592 <panic_spin>
c0005de5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:226
		}

		/* 5 将数据写入硬盘 */
		write2sector(hd, (void*)((uint32_t)buf + secs_done * 512), secs_op);
c0005de8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005deb:	0f b6 c0             	movzbl %al,%eax
c0005dee:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0005df1:	89 d1                	mov    %edx,%ecx
c0005df3:	c1 e1 09             	shl    $0x9,%ecx
c0005df6:	8b 55 10             	mov    0x10(%ebp),%edx
c0005df9:	01 ca                	add    %ecx,%edx
c0005dfb:	83 ec 04             	sub    $0x4,%esp
c0005dfe:	50                   	push   %eax
c0005dff:	52                   	push   %edx
c0005e00:	ff 75 08             	pushl  0x8(%ebp)
c0005e03:	e8 a2 fc ff ff       	call   c0005aaa <write2sector>
c0005e08:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:229

		/* 在硬盘响应期间阻塞自己 */
		sema_down(&hd->my_channel->disk_done);
c0005e0b:	8b 45 08             	mov    0x8(%ebp),%eax
c0005e0e:	8b 40 08             	mov    0x8(%eax),%eax
c0005e11:	83 c0 2c             	add    $0x2c,%eax
c0005e14:	83 ec 0c             	sub    $0xc,%esp
c0005e17:	50                   	push   %eax
c0005e18:	e8 18 e9 ff ff       	call   c0004735 <sema_down>
c0005e1d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:230
		secs_done += secs_op;
c0005e20:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005e23:	01 45 f0             	add    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:205
	/* 1 先选择操作的硬盘 */
	select_disk(hd);

	uint32_t secs_op;		// 每次操作的扇区数
	uint32_t secs_done = 0;	// 已完成的扇区数
	while(secs_done < sec_cnt) {
c0005e26:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0005e29:	3b 45 14             	cmp    0x14(%ebp),%eax
c0005e2c:	0f 82 20 ff ff ff    	jb     c0005d52 <ide_write+0x7c>
/work/x86_os_my/device/ide.c:233
		/* 在硬盘响应期间阻塞自己 */
		sema_down(&hd->my_channel->disk_done);
		secs_done += secs_op;
	}
	/* 醒来后开始释放锁*/
	lock_release(&hd->my_channel->lock);
c0005e32:	8b 45 08             	mov    0x8(%ebp),%eax
c0005e35:	8b 40 08             	mov    0x8(%eax),%eax
c0005e38:	83 c0 0c             	add    $0xc,%eax
c0005e3b:	83 ec 0c             	sub    $0xc,%esp
c0005e3e:	50                   	push   %eax
c0005e3f:	e8 12 eb ff ff       	call   c0004956 <lock_release>
c0005e44:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:234
}
c0005e47:	90                   	nop
c0005e48:	c9                   	leave  
c0005e49:	c3                   	ret    

c0005e4a <swap_pairs_bytes>:
swap_pairs_bytes():
/work/x86_os_my/device/ide.c:238

/////////////////////////////////////// 读取分区表部分 ////////////////////////////////////////////////
/* 将dst中len个相邻字节交换位置后存入buf */
static void swap_pairs_bytes(const char* dst, char* buf, uint32_t len) {
c0005e4a:	55                   	push   %ebp
c0005e4b:	89 e5                	mov    %esp,%ebp
c0005e4d:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/device/ide.c:240
	uint8_t idx;
	for (idx = 0; idx < len; idx += 2) {
c0005e50:	c6 45 ff 00          	movb   $0x0,-0x1(%ebp)
c0005e54:	eb 37                	jmp    c0005e8d <swap_pairs_bytes+0x43>
/work/x86_os_my/device/ide.c:242 (discriminator 3)
		/* buf中存储dst中两相邻元素交换位置后的字符串*/
		buf[idx + 1] = *dst++;
c0005e56:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
c0005e5a:	8d 50 01             	lea    0x1(%eax),%edx
c0005e5d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005e60:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
c0005e63:	8b 45 08             	mov    0x8(%ebp),%eax
c0005e66:	8d 50 01             	lea    0x1(%eax),%edx
c0005e69:	89 55 08             	mov    %edx,0x8(%ebp)
c0005e6c:	0f b6 00             	movzbl (%eax),%eax
c0005e6f:	88 01                	mov    %al,(%ecx)
/work/x86_os_my/device/ide.c:243 (discriminator 3)
		buf[idx]     = *dst++;
c0005e71:	0f b6 55 ff          	movzbl -0x1(%ebp),%edx
c0005e75:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005e78:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
c0005e7b:	8b 45 08             	mov    0x8(%ebp),%eax
c0005e7e:	8d 50 01             	lea    0x1(%eax),%edx
c0005e81:	89 55 08             	mov    %edx,0x8(%ebp)
c0005e84:	0f b6 00             	movzbl (%eax),%eax
c0005e87:	88 01                	mov    %al,(%ecx)
/work/x86_os_my/device/ide.c:240 (discriminator 3)

/////////////////////////////////////// 读取分区表部分 ////////////////////////////////////////////////
/* 将dst中len个相邻字节交换位置后存入buf */
static void swap_pairs_bytes(const char* dst, char* buf, uint32_t len) {
	uint8_t idx;
	for (idx = 0; idx < len; idx += 2) {
c0005e89:	80 45 ff 02          	addb   $0x2,-0x1(%ebp)
/work/x86_os_my/device/ide.c:240 (discriminator 1)
c0005e8d:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
c0005e91:	3b 45 10             	cmp    0x10(%ebp),%eax
c0005e94:	72 c0                	jb     c0005e56 <swap_pairs_bytes+0xc>
/work/x86_os_my/device/ide.c:245
		/* buf中存储dst中两相邻元素交换位置后的字符串*/
		buf[idx + 1] = *dst++;
		buf[idx]     = *dst++;
	}
	buf[idx] = '\0';
c0005e96:	0f b6 55 ff          	movzbl -0x1(%ebp),%edx
c0005e9a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005e9d:	01 d0                	add    %edx,%eax
c0005e9f:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/device/ide.c:246
}
c0005ea2:	90                   	nop
c0005ea3:	c9                   	leave  
c0005ea4:	c3                   	ret    

c0005ea5 <identify_disk>:
identify_disk():
/work/x86_os_my/device/ide.c:249

/* 获得硬盘参数信息 */
static void identify_disk(struct disk* hd) {
c0005ea5:	55                   	push   %ebp
c0005ea6:	89 e5                	mov    %esp,%ebp
c0005ea8:	81 ec 98 02 00 00    	sub    $0x298,%esp
/work/x86_os_my/device/ide.c:251
	char id_info[512];
	select_disk(hd);
c0005eae:	ff 75 08             	pushl  0x8(%ebp)
c0005eb1:	e8 43 fa ff ff       	call   c00058f9 <select_disk>
c0005eb6:	83 c4 04             	add    $0x4,%esp
/work/x86_os_my/device/ide.c:252
	cmd_out(hd->my_channel, CMD_IDENTIFY);
c0005eb9:	8b 45 08             	mov    0x8(%ebp),%eax
c0005ebc:	8b 40 08             	mov    0x8(%eax),%eax
c0005ebf:	68 ec 00 00 00       	push   $0xec
c0005ec4:	50                   	push   %eax
c0005ec5:	e8 63 fb ff ff       	call   c0005a2d <cmd_out>
c0005eca:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/ide.c:255
	/* 向硬盘发送指令后便通过信号量阻塞自己,
	* 待硬盘处理完成后,通过中断处理程序将自己唤醒 */
	sema_down(&hd->my_channel->disk_done);
c0005ecd:	8b 45 08             	mov    0x8(%ebp),%eax
c0005ed0:	8b 40 08             	mov    0x8(%eax),%eax
c0005ed3:	83 c0 2c             	add    $0x2c,%eax
c0005ed6:	83 ec 0c             	sub    $0xc,%esp
c0005ed9:	50                   	push   %eax
c0005eda:	e8 56 e8 ff ff       	call   c0004735 <sema_down>
c0005edf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:258

	/* 醒来后开始执行下面代码*/
	if (!busy_wait(hd)) {     //  若失败
c0005ee2:	83 ec 0c             	sub    $0xc,%esp
c0005ee5:	ff 75 08             	pushl  0x8(%ebp)
c0005ee8:	e8 06 fc ff ff       	call   c0005af3 <busy_wait>
c0005eed:	83 c4 10             	add    $0x10,%esp
c0005ef0:	85 c0                	test   %eax,%eax
c0005ef2:	75 39                	jne    c0005f2d <identify_disk+0x88>
/work/x86_os_my/device/ide.c:260
		char error[64];
		sprintf(error, "%s identify failed!!!!!!\n", hd->name);
c0005ef4:	8b 45 08             	mov    0x8(%ebp),%eax
c0005ef7:	83 ec 04             	sub    $0x4,%esp
c0005efa:	50                   	push   %eax
c0005efb:	68 f5 7d 00 c0       	push   $0xc0007df5
c0005f00:	8d 85 70 fd ff ff    	lea    -0x290(%ebp),%eax
c0005f06:	50                   	push   %eax
c0005f07:	e8 bc f8 ff ff       	call   c00057c8 <sprintf>
c0005f0c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:261
		PANIC(error);
c0005f0f:	8d 85 70 fd ff ff    	lea    -0x290(%ebp),%eax
c0005f15:	50                   	push   %eax
c0005f16:	68 4c 7f 00 c0       	push   $0xc0007f4c
c0005f1b:	68 05 01 00 00       	push   $0x105
c0005f20:	68 9b 7d 00 c0       	push   $0xc0007d9b
c0005f25:	e8 68 c6 ff ff       	call   c0002592 <panic_spin>
c0005f2a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:263
	}
	read_from_sector(hd, id_info, 1);
c0005f2d:	83 ec 04             	sub    $0x4,%esp
c0005f30:	6a 01                	push   $0x1
c0005f32:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
c0005f38:	50                   	push   %eax
c0005f39:	ff 75 08             	pushl  0x8(%ebp)
c0005f3c:	e8 20 fb ff ff       	call   c0005a61 <read_from_sector>
c0005f41:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:266

	char buf[64];
	uint8_t sn_start = 10 * 2, sn_len = 20, md_start = 27 * 2, md_len = 40;
c0005f44:	c6 45 f7 14          	movb   $0x14,-0x9(%ebp)
c0005f48:	c6 45 f6 14          	movb   $0x14,-0xa(%ebp)
c0005f4c:	c6 45 f5 36          	movb   $0x36,-0xb(%ebp)
c0005f50:	c6 45 f4 28          	movb   $0x28,-0xc(%ebp)
/work/x86_os_my/device/ide.c:267
	swap_pairs_bytes(&id_info[sn_start], buf, sn_len);
c0005f54:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0005f58:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c0005f5c:	8d 8d f0 fd ff ff    	lea    -0x210(%ebp),%ecx
c0005f62:	01 ca                	add    %ecx,%edx
c0005f64:	83 ec 04             	sub    $0x4,%esp
c0005f67:	50                   	push   %eax
c0005f68:	8d 85 b0 fd ff ff    	lea    -0x250(%ebp),%eax
c0005f6e:	50                   	push   %eax
c0005f6f:	52                   	push   %edx
c0005f70:	e8 d5 fe ff ff       	call   c0005e4a <swap_pairs_bytes>
c0005f75:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:268
	printk("   disk %s info:\n      SN: %s\n", hd->name, buf);
c0005f78:	8b 45 08             	mov    0x8(%ebp),%eax
c0005f7b:	83 ec 04             	sub    $0x4,%esp
c0005f7e:	8d 95 b0 fd ff ff    	lea    -0x250(%ebp),%edx
c0005f84:	52                   	push   %edx
c0005f85:	50                   	push   %eax
c0005f86:	68 10 7e 00 c0       	push   $0xc0007e10
c0005f8b:	e8 4b 06 00 00       	call   c00065db <printk>
c0005f90:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:269
	memset(buf, 0, sizeof(buf));
c0005f93:	83 ec 04             	sub    $0x4,%esp
c0005f96:	6a 40                	push   $0x40
c0005f98:	6a 00                	push   $0x0
c0005f9a:	8d 85 b0 fd ff ff    	lea    -0x250(%ebp),%eax
c0005fa0:	50                   	push   %eax
c0005fa1:	e8 04 da ff ff       	call   c00039aa <memset>
c0005fa6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:270
	swap_pairs_bytes(&id_info[md_start], buf, md_len);
c0005fa9:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0005fad:	0f b6 55 f5          	movzbl -0xb(%ebp),%edx
c0005fb1:	8d 8d f0 fd ff ff    	lea    -0x210(%ebp),%ecx
c0005fb7:	01 ca                	add    %ecx,%edx
c0005fb9:	83 ec 04             	sub    $0x4,%esp
c0005fbc:	50                   	push   %eax
c0005fbd:	8d 85 b0 fd ff ff    	lea    -0x250(%ebp),%eax
c0005fc3:	50                   	push   %eax
c0005fc4:	52                   	push   %edx
c0005fc5:	e8 80 fe ff ff       	call   c0005e4a <swap_pairs_bytes>
c0005fca:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:271
	printk("      MODULE: %s\n", buf);
c0005fcd:	83 ec 08             	sub    $0x8,%esp
c0005fd0:	8d 85 b0 fd ff ff    	lea    -0x250(%ebp),%eax
c0005fd6:	50                   	push   %eax
c0005fd7:	68 2f 7e 00 c0       	push   $0xc0007e2f
c0005fdc:	e8 fa 05 00 00       	call   c00065db <printk>
c0005fe1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:272
	uint32_t sectors = *(uint32_t*)&id_info[60 * 2];
c0005fe4:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
c0005fea:	83 c0 78             	add    $0x78,%eax
c0005fed:	8b 00                	mov    (%eax),%eax
c0005fef:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:273
	printk("      SECTORS: %d\n", sectors);
c0005ff2:	83 ec 08             	sub    $0x8,%esp
c0005ff5:	ff 75 f0             	pushl  -0x10(%ebp)
c0005ff8:	68 41 7e 00 c0       	push   $0xc0007e41
c0005ffd:	e8 d9 05 00 00       	call   c00065db <printk>
c0006002:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:274
	printk("      CAPACITY: %dMB\n", sectors * 512 / 1024 / 1024);
c0006005:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006008:	c1 e0 09             	shl    $0x9,%eax
c000600b:	c1 e8 14             	shr    $0x14,%eax
c000600e:	83 ec 08             	sub    $0x8,%esp
c0006011:	50                   	push   %eax
c0006012:	68 54 7e 00 c0       	push   $0xc0007e54
c0006017:	e8 bf 05 00 00       	call   c00065db <printk>
c000601c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:275
}
c000601f:	90                   	nop
c0006020:	c9                   	leave  
c0006021:	c3                   	ret    

c0006022 <partition_scan>:
partition_scan():
/work/x86_os_my/device/ide.c:278

/* 扫描硬盘hd中地址为ext_lba的扇区中的所有分区 */
static void partition_scan(struct disk* hd, uint32_t ext_lba) {
c0006022:	55                   	push   %ebp
c0006023:	89 e5                	mov    %esp,%ebp
c0006025:	53                   	push   %ebx
c0006026:	83 ec 14             	sub    $0x14,%esp
/work/x86_os_my/device/ide.c:279
	struct boot_sector* bs = sys_malloc(sizeof(struct boot_sector));
c0006029:	83 ec 0c             	sub    $0xc,%esp
c000602c:	68 00 02 00 00       	push   $0x200
c0006031:	e8 7d ce ff ff       	call   c0002eb3 <sys_malloc>
c0006036:	83 c4 10             	add    $0x10,%esp
c0006039:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/device/ide.c:280
	ide_read(hd, ext_lba, bs, 1);
c000603c:	6a 01                	push   $0x1
c000603e:	ff 75 ec             	pushl  -0x14(%ebp)
c0006041:	ff 75 0c             	pushl  0xc(%ebp)
c0006044:	ff 75 08             	pushl  0x8(%ebp)
c0006047:	e8 16 fb ff ff       	call   c0005b62 <ide_read>
c000604c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:281
	uint8_t part_idx = 0;
c000604f:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/device/ide.c:282
	struct partition_table_entry* p = bs->partition_table;
c0006053:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0006056:	05 be 01 00 00       	add    $0x1be,%eax
c000605b:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:285

	/* 遍历分区表4个分区表项 */
	while (part_idx++ < 4) {
c000605e:	e9 53 02 00 00       	jmp    c00062b6 <partition_scan+0x294>
/work/x86_os_my/device/ide.c:286
		if (p->fs_type == 0x5) {	// 若为扩展分区
c0006063:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006066:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c000606a:	3c 05                	cmp    $0x5,%al
c000606c:	75 50                	jne    c00060be <partition_scan+0x9c>
/work/x86_os_my/device/ide.c:287
			if (ext_lba_base != 0) {
c000606e:	a1 8c aa 00 c0       	mov    0xc000aa8c,%eax
c0006073:	85 c0                	test   %eax,%eax
c0006075:	74 22                	je     c0006099 <partition_scan+0x77>
/work/x86_os_my/device/ide.c:289
				/* 子扩展分区的start_lba是相对于主引导扇区中的总扩展分区地址 */
				partition_scan(hd, p->start_lba + ext_lba_base);
c0006077:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000607a:	8b 40 08             	mov    0x8(%eax),%eax
c000607d:	8b 15 8c aa 00 c0    	mov    0xc000aa8c,%edx
c0006083:	01 d0                	add    %edx,%eax
c0006085:	83 ec 08             	sub    $0x8,%esp
c0006088:	50                   	push   %eax
c0006089:	ff 75 08             	pushl  0x8(%ebp)
c000608c:	e8 91 ff ff ff       	call   c0006022 <partition_scan>
c0006091:	83 c4 10             	add    $0x10,%esp
c0006094:	e9 19 02 00 00       	jmp    c00062b2 <partition_scan+0x290>
/work/x86_os_my/device/ide.c:292
			} else {	// ext_lba_base为0表示是第一次读取引导块,也就是主引导记录所在的扇区
				/* 记录下扩展分区的起始lba地址,后面所有的扩展分区地址都相对于此 */
				ext_lba_base = p->start_lba;
c0006099:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000609c:	8b 40 08             	mov    0x8(%eax),%eax
c000609f:	a3 8c aa 00 c0       	mov    %eax,0xc000aa8c
/work/x86_os_my/device/ide.c:293
				partition_scan(hd, p->start_lba);
c00060a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00060a7:	8b 40 08             	mov    0x8(%eax),%eax
c00060aa:	83 ec 08             	sub    $0x8,%esp
c00060ad:	50                   	push   %eax
c00060ae:	ff 75 08             	pushl  0x8(%ebp)
c00060b1:	e8 6c ff ff ff       	call   c0006022 <partition_scan>
c00060b6:	83 c4 10             	add    $0x10,%esp
c00060b9:	e9 f4 01 00 00       	jmp    c00062b2 <partition_scan+0x290>
/work/x86_os_my/device/ide.c:295
			}
		} else if (p->fs_type != 0) {	// 若是有效的分区类型
c00060be:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00060c1:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c00060c5:	84 c0                	test   %al,%al
c00060c7:	0f 84 e5 01 00 00    	je     c00062b2 <partition_scan+0x290>
/work/x86_os_my/device/ide.c:296
			if (ext_lba == 0) {	// 此时全是主分区
c00060cd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c00060d1:	0f 85 f9 00 00 00    	jne    c00061d0 <partition_scan+0x1ae>
/work/x86_os_my/device/ide.c:297
				hd->prim_parts[p_no].start_lba = ext_lba + p->start_lba;
c00060d7:	0f b6 05 90 aa 00 c0 	movzbl 0xc000aa90,%eax
c00060de:	0f b6 c8             	movzbl %al,%ecx
c00060e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00060e4:	8b 50 08             	mov    0x8(%eax),%edx
c00060e7:	8b 45 0c             	mov    0xc(%ebp),%eax
c00060ea:	01 c2                	add    %eax,%edx
c00060ec:	8b 45 08             	mov    0x8(%ebp),%eax
c00060ef:	c1 e1 06             	shl    $0x6,%ecx
c00060f2:	01 c8                	add    %ecx,%eax
c00060f4:	83 c0 10             	add    $0x10,%eax
c00060f7:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/device/ide.c:298
				hd->prim_parts[p_no].sec_cnt = p->sec_cnt;
c00060f9:	0f b6 05 90 aa 00 c0 	movzbl 0xc000aa90,%eax
c0006100:	0f b6 c8             	movzbl %al,%ecx
c0006103:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006106:	8b 40 0c             	mov    0xc(%eax),%eax
c0006109:	8b 55 08             	mov    0x8(%ebp),%edx
c000610c:	c1 e1 06             	shl    $0x6,%ecx
c000610f:	01 ca                	add    %ecx,%edx
c0006111:	83 c2 14             	add    $0x14,%edx
c0006114:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/device/ide.c:299
				hd->prim_parts[p_no].my_disk = hd;
c0006116:	0f b6 05 90 aa 00 c0 	movzbl 0xc000aa90,%eax
c000611d:	0f b6 d0             	movzbl %al,%edx
c0006120:	8b 45 08             	mov    0x8(%ebp),%eax
c0006123:	c1 e2 06             	shl    $0x6,%edx
c0006126:	01 d0                	add    %edx,%eax
c0006128:	8d 50 18             	lea    0x18(%eax),%edx
c000612b:	8b 45 08             	mov    0x8(%ebp),%eax
c000612e:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/device/ide.c:300
				list_append(&partition_list, &hd->prim_parts[p_no].part_tag);
c0006130:	0f b6 05 90 aa 00 c0 	movzbl 0xc000aa90,%eax
c0006137:	0f b6 c0             	movzbl %al,%eax
c000613a:	c1 e0 06             	shl    $0x6,%eax
c000613d:	8d 50 10             	lea    0x10(%eax),%edx
c0006140:	8b 45 08             	mov    0x8(%ebp),%eax
c0006143:	01 d0                	add    %edx,%eax
c0006145:	83 c0 0c             	add    $0xc,%eax
c0006148:	83 ec 08             	sub    $0x8,%esp
c000614b:	50                   	push   %eax
c000614c:	68 40 be 00 c0       	push   $0xc000be40
c0006151:	e8 57 e3 ff ff       	call   c00044ad <list_append>
c0006156:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:301
				sprintf(hd->prim_parts[p_no].name, "%s%d", hd->name, p_no + 1);
c0006159:	0f b6 05 90 aa 00 c0 	movzbl 0xc000aa90,%eax
c0006160:	0f b6 c0             	movzbl %al,%eax
c0006163:	8d 48 01             	lea    0x1(%eax),%ecx
c0006166:	8b 45 08             	mov    0x8(%ebp),%eax
c0006169:	0f b6 15 90 aa 00 c0 	movzbl 0xc000aa90,%edx
c0006170:	0f b6 d2             	movzbl %dl,%edx
c0006173:	c1 e2 06             	shl    $0x6,%edx
c0006176:	8d 5a 20             	lea    0x20(%edx),%ebx
c0006179:	8b 55 08             	mov    0x8(%ebp),%edx
c000617c:	01 da                	add    %ebx,%edx
c000617e:	83 c2 04             	add    $0x4,%edx
c0006181:	51                   	push   %ecx
c0006182:	50                   	push   %eax
c0006183:	68 6a 7e 00 c0       	push   $0xc0007e6a
c0006188:	52                   	push   %edx
c0006189:	e8 3a f6 ff ff       	call   c00057c8 <sprintf>
c000618e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:302
				p_no++;
c0006191:	0f b6 05 90 aa 00 c0 	movzbl 0xc000aa90,%eax
c0006198:	83 c0 01             	add    $0x1,%eax
c000619b:	a2 90 aa 00 c0       	mov    %al,0xc000aa90
/work/x86_os_my/device/ide.c:303
				ASSERT(p_no < 4);	// 0,1,2,3
c00061a0:	0f b6 05 90 aa 00 c0 	movzbl 0xc000aa90,%eax
c00061a7:	3c 03                	cmp    $0x3,%al
c00061a9:	0f 86 03 01 00 00    	jbe    c00062b2 <partition_scan+0x290>
/work/x86_os_my/device/ide.c:303 (discriminator 1)
c00061af:	68 6f 7e 00 c0       	push   $0xc0007e6f
c00061b4:	68 5c 7f 00 c0       	push   $0xc0007f5c
c00061b9:	68 2f 01 00 00       	push   $0x12f
c00061be:	68 9b 7d 00 c0       	push   $0xc0007d9b
c00061c3:	e8 ca c3 ff ff       	call   c0002592 <panic_spin>
c00061c8:	83 c4 10             	add    $0x10,%esp
c00061cb:	e9 e2 00 00 00       	jmp    c00062b2 <partition_scan+0x290>
/work/x86_os_my/device/ide.c:305
			} else {
				hd->logic_parts[l_no].start_lba = ext_lba + p->start_lba;
c00061d0:	0f b6 05 91 aa 00 c0 	movzbl 0xc000aa91,%eax
c00061d7:	0f b6 c8             	movzbl %al,%ecx
c00061da:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00061dd:	8b 50 08             	mov    0x8(%eax),%edx
c00061e0:	8b 45 0c             	mov    0xc(%ebp),%eax
c00061e3:	01 c2                	add    %eax,%edx
c00061e5:	8b 45 08             	mov    0x8(%ebp),%eax
c00061e8:	c1 e1 06             	shl    $0x6,%ecx
c00061eb:	01 c8                	add    %ecx,%eax
c00061ed:	05 10 01 00 00       	add    $0x110,%eax
c00061f2:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/device/ide.c:306
				hd->logic_parts[l_no].sec_cnt = p->sec_cnt;
c00061f4:	0f b6 05 91 aa 00 c0 	movzbl 0xc000aa91,%eax
c00061fb:	0f b6 c8             	movzbl %al,%ecx
c00061fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006201:	8b 40 0c             	mov    0xc(%eax),%eax
c0006204:	8b 55 08             	mov    0x8(%ebp),%edx
c0006207:	c1 e1 06             	shl    $0x6,%ecx
c000620a:	01 ca                	add    %ecx,%edx
c000620c:	81 c2 14 01 00 00    	add    $0x114,%edx
c0006212:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/device/ide.c:307
				hd->logic_parts[l_no].my_disk = hd;
c0006214:	0f b6 05 91 aa 00 c0 	movzbl 0xc000aa91,%eax
c000621b:	0f b6 d0             	movzbl %al,%edx
c000621e:	8b 45 08             	mov    0x8(%ebp),%eax
c0006221:	c1 e2 06             	shl    $0x6,%edx
c0006224:	01 d0                	add    %edx,%eax
c0006226:	8d 90 18 01 00 00    	lea    0x118(%eax),%edx
c000622c:	8b 45 08             	mov    0x8(%ebp),%eax
c000622f:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/device/ide.c:308
				list_append(&partition_list, &hd->logic_parts[l_no].part_tag);
c0006231:	0f b6 05 91 aa 00 c0 	movzbl 0xc000aa91,%eax
c0006238:	0f b6 c0             	movzbl %al,%eax
c000623b:	c1 e0 06             	shl    $0x6,%eax
c000623e:	8d 90 10 01 00 00    	lea    0x110(%eax),%edx
c0006244:	8b 45 08             	mov    0x8(%ebp),%eax
c0006247:	01 d0                	add    %edx,%eax
c0006249:	83 c0 0c             	add    $0xc,%eax
c000624c:	83 ec 08             	sub    $0x8,%esp
c000624f:	50                   	push   %eax
c0006250:	68 40 be 00 c0       	push   $0xc000be40
c0006255:	e8 53 e2 ff ff       	call   c00044ad <list_append>
c000625a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:309
				sprintf(hd->logic_parts[l_no].name, "%s%d", hd->name, l_no + 5);	// 逻辑分区数字是从5开始,主分区是1～4.
c000625d:	0f b6 05 91 aa 00 c0 	movzbl 0xc000aa91,%eax
c0006264:	0f b6 c0             	movzbl %al,%eax
c0006267:	8d 48 05             	lea    0x5(%eax),%ecx
c000626a:	8b 45 08             	mov    0x8(%ebp),%eax
c000626d:	0f b6 15 91 aa 00 c0 	movzbl 0xc000aa91,%edx
c0006274:	0f b6 d2             	movzbl %dl,%edx
c0006277:	c1 e2 06             	shl    $0x6,%edx
c000627a:	8d 9a 20 01 00 00    	lea    0x120(%edx),%ebx
c0006280:	8b 55 08             	mov    0x8(%ebp),%edx
c0006283:	01 da                	add    %ebx,%edx
c0006285:	83 c2 04             	add    $0x4,%edx
c0006288:	51                   	push   %ecx
c0006289:	50                   	push   %eax
c000628a:	68 6a 7e 00 c0       	push   $0xc0007e6a
c000628f:	52                   	push   %edx
c0006290:	e8 33 f5 ff ff       	call   c00057c8 <sprintf>
c0006295:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:310
				l_no++;
c0006298:	0f b6 05 91 aa 00 c0 	movzbl 0xc000aa91,%eax
c000629f:	83 c0 01             	add    $0x1,%eax
c00062a2:	a2 91 aa 00 c0       	mov    %al,0xc000aa91
/work/x86_os_my/device/ide.c:311
				if (l_no >= 8)	// 只支持8个逻辑分区,避免数组越界
c00062a7:	0f b6 05 91 aa 00 c0 	movzbl 0xc000aa91,%eax
c00062ae:	3c 07                	cmp    $0x7,%al
c00062b0:	77 26                	ja     c00062d8 <partition_scan+0x2b6>
/work/x86_os_my/device/ide.c:315
					return;
			}
		}
		p++;
c00062b2:	83 45 f0 10          	addl   $0x10,-0x10(%ebp)
/work/x86_os_my/device/ide.c:285
	ide_read(hd, ext_lba, bs, 1);
	uint8_t part_idx = 0;
	struct partition_table_entry* p = bs->partition_table;

	/* 遍历分区表4个分区表项 */
	while (part_idx++ < 4) {
c00062b6:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00062ba:	8d 50 01             	lea    0x1(%eax),%edx
c00062bd:	88 55 f7             	mov    %dl,-0x9(%ebp)
c00062c0:	3c 03                	cmp    $0x3,%al
c00062c2:	0f 86 9b fd ff ff    	jbe    c0006063 <partition_scan+0x41>
/work/x86_os_my/device/ide.c:317
					return;
			}
		}
		p++;
	}
	sys_free(bs);
c00062c8:	83 ec 0c             	sub    $0xc,%esp
c00062cb:	ff 75 ec             	pushl  -0x14(%ebp)
c00062ce:	e8 0d d2 ff ff       	call   c00034e0 <sys_free>
c00062d3:	83 c4 10             	add    $0x10,%esp
c00062d6:	eb 01                	jmp    c00062d9 <partition_scan+0x2b7>
/work/x86_os_my/device/ide.c:312
				hd->logic_parts[l_no].my_disk = hd;
				list_append(&partition_list, &hd->logic_parts[l_no].part_tag);
				sprintf(hd->logic_parts[l_no].name, "%s%d", hd->name, l_no + 5);	// 逻辑分区数字是从5开始,主分区是1～4.
				l_no++;
				if (l_no >= 8)	// 只支持8个逻辑分区,避免数组越界
					return;
c00062d8:	90                   	nop
/work/x86_os_my/device/ide.c:318
			}
		}
		p++;
	}
	sys_free(bs);
}
c00062d9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c00062dc:	c9                   	leave  
c00062dd:	c3                   	ret    

c00062de <partition_info>:
partition_info():
/work/x86_os_my/device/ide.c:321

/* 打印分区信息 */
static bool partition_info(struct list_elem* pelem, int arg UNUSED) {
c00062de:	55                   	push   %ebp
c00062df:	89 e5                	mov    %esp,%ebp
c00062e1:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/ide.c:322
	struct partition* part = elem2entry(struct partition, part_tag, pelem);
c00062e4:	8b 45 08             	mov    0x8(%ebp),%eax
c00062e7:	83 e8 0c             	sub    $0xc,%eax
c00062ea:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/ide.c:323
	printk("   %s start_lba:0x%x, sec_cnt:0x%x\n",part->name, part->start_lba, part->sec_cnt);
c00062ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00062f0:	8b 50 04             	mov    0x4(%eax),%edx
c00062f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00062f6:	8b 00                	mov    (%eax),%eax
c00062f8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c00062fb:	83 c1 14             	add    $0x14,%ecx
c00062fe:	52                   	push   %edx
c00062ff:	50                   	push   %eax
c0006300:	51                   	push   %ecx
c0006301:	68 78 7e 00 c0       	push   $0xc0007e78
c0006306:	e8 d0 02 00 00       	call   c00065db <printk>
c000630b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:327

	/* 在此处return false与函数本身功能无关,
	 * 只是为了让主调函数list_traversal继续向下遍历元素 */
	return false;
c000630e:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/device/ide.c:328
}
c0006313:	c9                   	leave  
c0006314:	c3                   	ret    

c0006315 <intr_hd_handler>:
intr_hd_handler():
/work/x86_os_my/device/ide.c:331

/* 硬盘中断处理程序 */
void intr_hd_handler(uint8_t irq_no) {
c0006315:	55                   	push   %ebp
c0006316:	89 e5                	mov    %esp,%ebp
c0006318:	83 ec 28             	sub    $0x28,%esp
c000631b:	8b 45 08             	mov    0x8(%ebp),%eax
c000631e:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/device/ide.c:332
	ASSERT(irq_no == 0x2e || irq_no == 0x2f);
c0006321:	80 7d e4 2e          	cmpb   $0x2e,-0x1c(%ebp)
c0006325:	74 22                	je     c0006349 <intr_hd_handler+0x34>
/work/x86_os_my/device/ide.c:332 (discriminator 1)
c0006327:	80 7d e4 2f          	cmpb   $0x2f,-0x1c(%ebp)
c000632b:	74 1c                	je     c0006349 <intr_hd_handler+0x34>
/work/x86_os_my/device/ide.c:332 (discriminator 2)
c000632d:	68 9c 7e 00 c0       	push   $0xc0007e9c
c0006332:	68 6c 7f 00 c0       	push   $0xc0007f6c
c0006337:	68 4c 01 00 00       	push   $0x14c
c000633c:	68 9b 7d 00 c0       	push   $0xc0007d9b
c0006341:	e8 4c c2 ff ff       	call   c0002592 <panic_spin>
c0006346:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:333
	uint8_t ch_no = irq_no - 0x2e;
c0006349:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c000634d:	83 e8 2e             	sub    $0x2e,%eax
c0006350:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/device/ide.c:334
	struct ide_channel* channel = &channels[ch_no];
c0006353:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0006357:	69 c0 60 06 00 00    	imul   $0x660,%eax,%eax
c000635d:	05 80 b1 00 c0       	add    $0xc000b180,%eax
c0006362:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:335
	ASSERT(channel->irq_no == irq_no);
c0006365:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006368:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
c000636c:	3a 45 e4             	cmp    -0x1c(%ebp),%al
c000636f:	74 1c                	je     c000638d <intr_hd_handler+0x78>
/work/x86_os_my/device/ide.c:335 (discriminator 1)
c0006371:	68 bd 7e 00 c0       	push   $0xc0007ebd
c0006376:	68 6c 7f 00 c0       	push   $0xc0007f6c
c000637b:	68 4f 01 00 00       	push   $0x14f
c0006380:	68 9b 7d 00 c0       	push   $0xc0007d9b
c0006385:	e8 08 c2 ff ff       	call   c0002592 <panic_spin>
c000638a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:338
	/* 不必担心此中断是否对应的是这一次的expecting_intr,
	* 每次读写硬盘时会申请锁,从而保证了同步一致性 */
	if (channel->expecting_intr) {
c000638d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006390:	8b 40 28             	mov    0x28(%eax),%eax
c0006393:	85 c0                	test   %eax,%eax
c0006395:	74 35                	je     c00063cc <intr_hd_handler+0xb7>
/work/x86_os_my/device/ide.c:339
		channel->expecting_intr = false;
c0006397:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000639a:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
/work/x86_os_my/device/ide.c:340
		sema_up(&channel->disk_done);
c00063a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00063a4:	83 c0 2c             	add    $0x2c,%eax
c00063a7:	83 ec 0c             	sub    $0xc,%esp
c00063aa:	50                   	push   %eax
c00063ab:	e8 80 e4 ff ff       	call   c0004830 <sema_up>
c00063b0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:343

		/* 读取状态寄存器使硬盘控制器认为此次的中断已被处理,从而硬盘可以继续执行新的读写 */
		inb(reg_status(channel));
c00063b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00063b6:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c00063ba:	83 c0 07             	add    $0x7,%eax
c00063bd:	0f b7 c0             	movzwl %ax,%eax
c00063c0:	83 ec 0c             	sub    $0xc,%esp
c00063c3:	50                   	push   %eax
c00063c4:	e8 de f4 ff ff       	call   c00058a7 <inb>
c00063c9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:345
	}
}
c00063cc:	90                   	nop
c00063cd:	c9                   	leave  
c00063ce:	c3                   	ret    

c00063cf <ide_init>:
ide_init():
/work/x86_os_my/device/ide.c:348

/* 硬盘数据结构初始化 */
void ide_init() {
c00063cf:	55                   	push   %ebp
c00063d0:	89 e5                	mov    %esp,%ebp
c00063d2:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/ide.c:349
	printk("ide_init start\n");
c00063d5:	83 ec 0c             	sub    $0xc,%esp
c00063d8:	68 d7 7e 00 c0       	push   $0xc0007ed7
c00063dd:	e8 f9 01 00 00       	call   c00065db <printk>
c00063e2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:350
	uint8_t hd_cnt = *((uint8_t*)(0x475));	// 获取硬盘的数量
c00063e5:	b8 75 04 00 00       	mov    $0x475,%eax
c00063ea:	0f b6 00             	movzbl (%eax),%eax
c00063ed:	88 45 f5             	mov    %al,-0xb(%ebp)
/work/x86_os_my/device/ide.c:351
	ASSERT(hd_cnt > 0);
c00063f0:	80 7d f5 00          	cmpb   $0x0,-0xb(%ebp)
c00063f4:	75 1c                	jne    c0006412 <ide_init+0x43>
/work/x86_os_my/device/ide.c:351 (discriminator 1)
c00063f6:	68 e7 7e 00 c0       	push   $0xc0007ee7
c00063fb:	68 7c 7f 00 c0       	push   $0xc0007f7c
c0006400:	68 5f 01 00 00       	push   $0x15f
c0006405:	68 9b 7d 00 c0       	push   $0xc0007d9b
c000640a:	e8 83 c1 ff ff       	call   c0002592 <panic_spin>
c000640f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:352
	list_init(&partition_list);
c0006412:	83 ec 0c             	sub    $0xc,%esp
c0006415:	68 40 be 00 c0       	push   $0xc000be40
c000641a:	e8 fd df ff ff       	call   c000441c <list_init>
c000641f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:353
	channel_cnt = DIV_ROUND_UP(hd_cnt, 2);	// 一个ide通道上有两个硬盘,根据硬盘数量反推有几个ide通道
c0006422:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0006426:	83 c0 01             	add    $0x1,%eax
c0006429:	89 c2                	mov    %eax,%edx
c000642b:	c1 ea 1f             	shr    $0x1f,%edx
c000642e:	01 d0                	add    %edx,%eax
c0006430:	d1 f8                	sar    %eax
c0006432:	a2 60 b1 00 c0       	mov    %al,0xc000b160
/work/x86_os_my/device/ide.c:355
	struct ide_channel* channel;
	uint8_t channel_no = 0, dev_no = 0;
c0006437:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
c000643b:	c6 45 f6 00          	movb   $0x0,-0xa(%ebp)
/work/x86_os_my/device/ide.c:358

	/* 处理每个通道上的硬盘 */
	while (channel_no < channel_cnt) {
c000643f:	e9 4d 01 00 00       	jmp    c0006591 <ide_init+0x1c2>
/work/x86_os_my/device/ide.c:359
		channel = &channels[channel_no];
c0006444:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0006448:	69 c0 60 06 00 00    	imul   $0x660,%eax,%eax
c000644e:	05 80 b1 00 c0       	add    $0xc000b180,%eax
c0006453:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:360
		sprintf(channel->name, "ide%d", channel_no);
c0006456:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c000645a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000645d:	83 ec 04             	sub    $0x4,%esp
c0006460:	52                   	push   %edx
c0006461:	68 f2 7e 00 c0       	push   $0xc0007ef2
c0006466:	50                   	push   %eax
c0006467:	e8 5c f3 ff ff       	call   c00057c8 <sprintf>
c000646c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:363

		/* 为每个ide通道初始化端口基址及中断向量 */
		switch (channel_no) {
c000646f:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0006473:	85 c0                	test   %eax,%eax
c0006475:	74 07                	je     c000647e <ide_init+0xaf>
c0006477:	83 f8 01             	cmp    $0x1,%eax
c000647a:	74 14                	je     c0006490 <ide_init+0xc1>
c000647c:	eb 23                	jmp    c00064a1 <ide_init+0xd2>
/work/x86_os_my/device/ide.c:365
			case 0:
			channel->port_base	 = 0x1f0;	// ide0通道的起始端口号是0x1f0
c000647e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006481:	66 c7 40 08 f0 01    	movw   $0x1f0,0x8(%eax)
/work/x86_os_my/device/ide.c:366
			channel->irq_no	 = 0x20 + 14;	// 从片8259a上倒数第二的中断引脚,温盘,也就是ide0通道的的中断向量号
c0006487:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000648a:	c6 40 0a 2e          	movb   $0x2e,0xa(%eax)
/work/x86_os_my/device/ide.c:367
			break;
c000648e:	eb 11                	jmp    c00064a1 <ide_init+0xd2>
/work/x86_os_my/device/ide.c:370
			
			case 1:
			channel->port_base	 = 0x170;	// ide1通道的起始端口号是0x170
c0006490:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006493:	66 c7 40 08 70 01    	movw   $0x170,0x8(%eax)
/work/x86_os_my/device/ide.c:371
			channel->irq_no	 = 0x20 + 15;	// 从8259A上的最后一个中断引脚,我们用来响应ide1通道上的硬盘中断
c0006499:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000649c:	c6 40 0a 2f          	movb   $0x2f,0xa(%eax)
/work/x86_os_my/device/ide.c:372
			break;
c00064a0:	90                   	nop
/work/x86_os_my/device/ide.c:375
		}

		channel->expecting_intr = false;	// 未向硬盘写入指令时不期待硬盘的中断
c00064a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00064a4:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
/work/x86_os_my/device/ide.c:376
		lock_init(&channel->lock);
c00064ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00064ae:	83 c0 0c             	add    $0xc,%eax
c00064b1:	83 ec 0c             	sub    $0xc,%esp
c00064b4:	50                   	push   %eax
c00064b5:	e8 4b e2 ff ff       	call   c0004705 <lock_init>
c00064ba:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:380

		/* 初始化为0,目的是向硬盘控制器请求数据后,硬盘驱动sema_down此信号量会阻塞线程,
		直到硬盘完成后通过发中断,由中断处理程序将此信号量sema_up,唤醒线程. */
		sema_init(&channel->disk_done, 0);
c00064bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00064c0:	83 c0 2c             	add    $0x2c,%eax
c00064c3:	83 ec 08             	sub    $0x8,%esp
c00064c6:	6a 00                	push   $0x0
c00064c8:	50                   	push   %eax
c00064c9:	e8 0d e2 ff ff       	call   c00046db <sema_init>
c00064ce:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:381
		register_handler(channel->irq_no, intr_hd_handler);
c00064d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00064d4:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
c00064d8:	0f b6 c0             	movzbl %al,%eax
c00064db:	83 ec 08             	sub    $0x8,%esp
c00064de:	68 15 63 00 c0       	push   $0xc0006315
c00064e3:	50                   	push   %eax
c00064e4:	e8 6f b7 ff ff       	call   c0001c58 <register_handler>
c00064e9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:384

		/* 分别获取两个硬盘的参数及分区信息 */
		while (dev_no < 2) {
c00064ec:	e9 88 00 00 00       	jmp    c0006579 <ide_init+0x1aa>
/work/x86_os_my/device/ide.c:385
			struct disk* hd = &channel->devices[dev_no];
c00064f1:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c00064f5:	69 c0 10 03 00 00    	imul   $0x310,%eax,%eax
c00064fb:	8d 50 40             	lea    0x40(%eax),%edx
c00064fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006501:	01 d0                	add    %edx,%eax
c0006503:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/device/ide.c:386
			hd->my_channel = channel;
c0006506:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0006509:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000650c:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/device/ide.c:387
			hd->dev_no = dev_no;
c000650f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0006512:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
c0006516:	88 50 0c             	mov    %dl,0xc(%eax)
/work/x86_os_my/device/ide.c:388
			sprintf(hd->name, "sd%c", 'a' + channel_no * 2 + dev_no);
c0006519:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000651d:	01 c0                	add    %eax,%eax
c000651f:	8d 50 61             	lea    0x61(%eax),%edx
c0006522:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0006526:	01 c2                	add    %eax,%edx
c0006528:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000652b:	83 ec 04             	sub    $0x4,%esp
c000652e:	52                   	push   %edx
c000652f:	68 f8 7e 00 c0       	push   $0xc0007ef8
c0006534:	50                   	push   %eax
c0006535:	e8 8e f2 ff ff       	call   c00057c8 <sprintf>
c000653a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:389
			identify_disk(hd);		// 获取硬盘参数
c000653d:	83 ec 0c             	sub    $0xc,%esp
c0006540:	ff 75 ec             	pushl  -0x14(%ebp)
c0006543:	e8 5d f9 ff ff       	call   c0005ea5 <identify_disk>
c0006548:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:390
			if (dev_no != 0) {		// 内核本身的裸硬盘(hd60M.img)不处理
c000654b:	80 7d f6 00          	cmpb   $0x0,-0xa(%ebp)
c000654f:	74 10                	je     c0006561 <ide_init+0x192>
/work/x86_os_my/device/ide.c:391
				partition_scan(hd, 0);	// 扫描该硬盘上的分区
c0006551:	83 ec 08             	sub    $0x8,%esp
c0006554:	6a 00                	push   $0x0
c0006556:	ff 75 ec             	pushl  -0x14(%ebp)
c0006559:	e8 c4 fa ff ff       	call   c0006022 <partition_scan>
c000655e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:393
			}
			p_no = 0, l_no = 0;
c0006561:	c6 05 90 aa 00 c0 00 	movb   $0x0,0xc000aa90
c0006568:	c6 05 91 aa 00 c0 00 	movb   $0x0,0xc000aa91
/work/x86_os_my/device/ide.c:394
			dev_no++;
c000656f:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0006573:	83 c0 01             	add    $0x1,%eax
c0006576:	88 45 f6             	mov    %al,-0xa(%ebp)
/work/x86_os_my/device/ide.c:384
		直到硬盘完成后通过发中断,由中断处理程序将此信号量sema_up,唤醒线程. */
		sema_init(&channel->disk_done, 0);
		register_handler(channel->irq_no, intr_hd_handler);

		/* 分别获取两个硬盘的参数及分区信息 */
		while (dev_no < 2) {
c0006579:	80 7d f6 01          	cmpb   $0x1,-0xa(%ebp)
c000657d:	0f 86 6e ff ff ff    	jbe    c00064f1 <ide_init+0x122>
/work/x86_os_my/device/ide.c:396
				partition_scan(hd, 0);	// 扫描该硬盘上的分区
			}
			p_no = 0, l_no = 0;
			dev_no++;
		}
		dev_no = 0;		// 将硬盘驱动器号置0,为下一个channel的两个硬盘初始化。
c0006583:	c6 45 f6 00          	movb   $0x0,-0xa(%ebp)
/work/x86_os_my/device/ide.c:397
		channel_no++;	// 下一个channel
c0006587:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000658b:	83 c0 01             	add    $0x1,%eax
c000658e:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/device/ide.c:358
	channel_cnt = DIV_ROUND_UP(hd_cnt, 2);	// 一个ide通道上有两个硬盘,根据硬盘数量反推有几个ide通道
	struct ide_channel* channel;
	uint8_t channel_no = 0, dev_no = 0;

	/* 处理每个通道上的硬盘 */
	while (channel_no < channel_cnt) {
c0006591:	0f b6 05 60 b1 00 c0 	movzbl 0xc000b160,%eax
c0006598:	38 45 f7             	cmp    %al,-0x9(%ebp)
c000659b:	0f 82 a3 fe ff ff    	jb     c0006444 <ide_init+0x75>
/work/x86_os_my/device/ide.c:400
		}
		dev_no = 0;		// 将硬盘驱动器号置0,为下一个channel的两个硬盘初始化。
		channel_no++;	// 下一个channel
	}

	printk("\n   all partition info\n");
c00065a1:	83 ec 0c             	sub    $0xc,%esp
c00065a4:	68 fd 7e 00 c0       	push   $0xc0007efd
c00065a9:	e8 2d 00 00 00       	call   c00065db <printk>
c00065ae:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:402
	/* 打印所有分区信息 */
	list_traversal(&partition_list, partition_info, (int)NULL);
c00065b1:	83 ec 04             	sub    $0x4,%esp
c00065b4:	6a 00                	push   $0x0
c00065b6:	68 de 62 00 c0       	push   $0xc00062de
c00065bb:	68 40 be 00 c0       	push   $0xc000be40
c00065c0:	e8 9d df ff ff       	call   c0004562 <list_traversal>
c00065c5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:403
	printk("ide_init done\n");
c00065c8:	83 ec 0c             	sub    $0xc,%esp
c00065cb:	68 15 7f 00 c0       	push   $0xc0007f15
c00065d0:	e8 06 00 00 00       	call   c00065db <printk>
c00065d5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:404
}
c00065d8:	90                   	nop
c00065d9:	c9                   	leave  
c00065da:	c3                   	ret    

c00065db <printk>:
printk():
/work/x86_os_my/lib/kernel/stdio-kernel.c:11

#define va_start(args, first_fix) args = (va_list)&first_fix
#define va_end(args) args = NULL

/* 供内核使用的格式化输出函数 */
void printk(const char* format, ...) {
c00065db:	55                   	push   %ebp
c00065dc:	89 e5                	mov    %esp,%ebp
c00065de:	57                   	push   %edi
c00065df:	81 ec 14 04 00 00    	sub    $0x414,%esp
/work/x86_os_my/lib/kernel/stdio-kernel.c:13
	va_list args;
	va_start(args, format);
c00065e5:	8d 45 08             	lea    0x8(%ebp),%eax
c00065e8:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/stdio-kernel.c:14
	char buf[1024] = {0};
c00065eb:	8d 95 f4 fb ff ff    	lea    -0x40c(%ebp),%edx
c00065f1:	b8 00 00 00 00       	mov    $0x0,%eax
c00065f6:	b9 00 01 00 00       	mov    $0x100,%ecx
c00065fb:	89 d7                	mov    %edx,%edi
c00065fd:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/lib/kernel/stdio-kernel.c:15
	vsprintf(buf, format, args);
c00065ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0006602:	83 ec 04             	sub    $0x4,%esp
c0006605:	ff 75 f4             	pushl  -0xc(%ebp)
c0006608:	50                   	push   %eax
c0006609:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c000660f:	50                   	push   %eax
c0006610:	e8 36 f0 ff ff       	call   c000564b <vsprintf>
c0006615:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/stdio-kernel.c:16
	va_end(args);
c0006618:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/kernel/stdio-kernel.c:17
	console_put_str(buf);
c000661f:	83 ec 0c             	sub    $0xc,%esp
c0006622:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c0006628:	50                   	push   %eax
c0006629:	e8 42 e0 ff ff       	call   c0004670 <console_put_str>
c000662e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/stdio-kernel.c:18
}
c0006631:	90                   	nop
c0006632:	8b 7d fc             	mov    -0x4(%ebp),%edi
c0006635:	c9                   	leave  
c0006636:	c3                   	ret    

c0006637 <mount_partition>:
mount_partition():


struct partition* cur_part;	 // 默认情况下操作的是哪个分区

/* 在分区链表中找到名为part_name的分区,并将其指针赋值给cur_part */
static bool mount_partition(struct list_elem* pelem, int arg) {
c0006637:	55                   	push   %ebp
c0006638:	89 e5                	mov    %esp,%ebp
c000663a:	53                   	push   %ebx
c000663b:	83 ec 14             	sub    $0x14,%esp
/work/x86_os_my/fs/fs.c:19
	char* part_name = (char*)arg;
c000663e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006641:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:20
	struct partition* part = elem2entry(struct partition, part_tag, pelem);
c0006644:	8b 45 08             	mov    0x8(%ebp),%eax
c0006647:	83 e8 0c             	sub    $0xc,%eax
c000664a:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:21
	if (!strcmp(part->name, part_name)) {
c000664d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006650:	83 c0 14             	add    $0x14,%eax
c0006653:	83 ec 08             	sub    $0x8,%esp
c0006656:	ff 75 f4             	pushl  -0xc(%ebp)
c0006659:	50                   	push   %eax
c000665a:	e8 20 d5 ff ff       	call   c0003b7f <strcmp>
c000665f:	83 c4 10             	add    $0x10,%esp
c0006662:	84 c0                	test   %al,%al
c0006664:	0f 85 ce 01 00 00    	jne    c0006838 <mount_partition+0x201>
/work/x86_os_my/fs/fs.c:22
		cur_part = part;
c000666a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000666d:	a3 50 be 00 c0       	mov    %eax,0xc000be50
/work/x86_os_my/fs/fs.c:23
		struct disk* hd = cur_part->my_disk;
c0006672:	a1 50 be 00 c0       	mov    0xc000be50,%eax
c0006677:	8b 40 08             	mov    0x8(%eax),%eax
c000667a:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:26

		/* sb_buf用来存储从硬盘上读入的超级块 */
		struct super_block* sb_buf = (struct super_block*)sys_malloc(SECTOR_SIZE);
c000667d:	83 ec 0c             	sub    $0xc,%esp
c0006680:	68 00 02 00 00       	push   $0x200
c0006685:	e8 29 c8 ff ff       	call   c0002eb3 <sys_malloc>
c000668a:	83 c4 10             	add    $0x10,%esp
c000668d:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:29

		/* 在内存中创建分区cur_part的超级块 */
		cur_part->sb = (struct super_block*)sys_malloc(sizeof(struct super_block));
c0006690:	8b 1d 50 be 00 c0    	mov    0xc000be50,%ebx
c0006696:	83 ec 0c             	sub    $0xc,%esp
c0006699:	68 00 02 00 00       	push   $0x200
c000669e:	e8 10 c8 ff ff       	call   c0002eb3 <sys_malloc>
c00066a3:	83 c4 10             	add    $0x10,%esp
c00066a6:	89 43 1c             	mov    %eax,0x1c(%ebx)
/work/x86_os_my/fs/fs.c:30
		if (cur_part->sb == NULL) {
c00066a9:	a1 50 be 00 c0       	mov    0xc000be50,%eax
c00066ae:	8b 40 1c             	mov    0x1c(%eax),%eax
c00066b1:	85 c0                	test   %eax,%eax
c00066b3:	75 19                	jne    c00066ce <mount_partition+0x97>
/work/x86_os_my/fs/fs.c:31
			PANIC("alloc memory failed!");
c00066b5:	68 88 7f 00 c0       	push   $0xc0007f88
c00066ba:	68 5c 81 00 c0       	push   $0xc000815c
c00066bf:	6a 1f                	push   $0x1f
c00066c1:	68 9d 7f 00 c0       	push   $0xc0007f9d
c00066c6:	e8 c7 be ff ff       	call   c0002592 <panic_spin>
c00066cb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:35
		}

		/* 读入超级块 */
		memset(sb_buf, 0, SECTOR_SIZE);
c00066ce:	83 ec 04             	sub    $0x4,%esp
c00066d1:	68 00 02 00 00       	push   $0x200
c00066d6:	6a 00                	push   $0x0
c00066d8:	ff 75 e8             	pushl  -0x18(%ebp)
c00066db:	e8 ca d2 ff ff       	call   c00039aa <memset>
c00066e0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:36
		ide_read(hd, cur_part->start_lba + 1, sb_buf, 1);   
c00066e3:	a1 50 be 00 c0       	mov    0xc000be50,%eax
c00066e8:	8b 00                	mov    (%eax),%eax
c00066ea:	83 c0 01             	add    $0x1,%eax
c00066ed:	6a 01                	push   $0x1
c00066ef:	ff 75 e8             	pushl  -0x18(%ebp)
c00066f2:	50                   	push   %eax
c00066f3:	ff 75 ec             	pushl  -0x14(%ebp)
c00066f6:	e8 67 f4 ff ff       	call   c0005b62 <ide_read>
c00066fb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:39

		/* 把sb_buf中超级块的信息复制到分区的超级块sb中。*/
		memcpy(cur_part->sb, sb_buf, sizeof(struct super_block)); 
c00066fe:	a1 50 be 00 c0       	mov    0xc000be50,%eax
c0006703:	8b 40 1c             	mov    0x1c(%eax),%eax
c0006706:	83 ec 04             	sub    $0x4,%esp
c0006709:	68 00 02 00 00       	push   $0x200
c000670e:	ff 75 e8             	pushl  -0x18(%ebp)
c0006711:	50                   	push   %eax
c0006712:	e8 e5 d2 ff ff       	call   c00039fc <memcpy>
c0006717:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:42

		/**********     将硬盘上的块位图读入到内存    ****************/
		cur_part->block_bitmap.bits = (uint8_t*)sys_malloc(sb_buf->block_bitmap_sects * SECTOR_SIZE);
c000671a:	8b 1d 50 be 00 c0    	mov    0xc000be50,%ebx
c0006720:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0006723:	8b 40 14             	mov    0x14(%eax),%eax
c0006726:	c1 e0 09             	shl    $0x9,%eax
c0006729:	83 ec 0c             	sub    $0xc,%esp
c000672c:	50                   	push   %eax
c000672d:	e8 81 c7 ff ff       	call   c0002eb3 <sys_malloc>
c0006732:	83 c4 10             	add    $0x10,%esp
c0006735:	89 43 24             	mov    %eax,0x24(%ebx)
/work/x86_os_my/fs/fs.c:43
		if (cur_part->block_bitmap.bits == NULL) {
c0006738:	a1 50 be 00 c0       	mov    0xc000be50,%eax
c000673d:	8b 40 24             	mov    0x24(%eax),%eax
c0006740:	85 c0                	test   %eax,%eax
c0006742:	75 19                	jne    c000675d <mount_partition+0x126>
/work/x86_os_my/fs/fs.c:44
			PANIC("alloc memory failed!");
c0006744:	68 88 7f 00 c0       	push   $0xc0007f88
c0006749:	68 5c 81 00 c0       	push   $0xc000815c
c000674e:	6a 2c                	push   $0x2c
c0006750:	68 9d 7f 00 c0       	push   $0xc0007f9d
c0006755:	e8 38 be ff ff       	call   c0002592 <panic_spin>
c000675a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:46
		}
		cur_part->block_bitmap.btmp_bytes_len = sb_buf->block_bitmap_sects * SECTOR_SIZE;
c000675d:	a1 50 be 00 c0       	mov    0xc000be50,%eax
c0006762:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0006765:	8b 52 14             	mov    0x14(%edx),%edx
c0006768:	c1 e2 09             	shl    $0x9,%edx
c000676b:	89 50 20             	mov    %edx,0x20(%eax)
/work/x86_os_my/fs/fs.c:48
		/* 从硬盘上读入块位图到分区的block_bitmap.bits */
		ide_read(hd, sb_buf->block_bitmap_lba, cur_part->block_bitmap.bits, sb_buf->block_bitmap_sects);   
c000676e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0006771:	8b 48 14             	mov    0x14(%eax),%ecx
c0006774:	a1 50 be 00 c0       	mov    0xc000be50,%eax
c0006779:	8b 50 24             	mov    0x24(%eax),%edx
c000677c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000677f:	8b 40 10             	mov    0x10(%eax),%eax
c0006782:	51                   	push   %ecx
c0006783:	52                   	push   %edx
c0006784:	50                   	push   %eax
c0006785:	ff 75 ec             	pushl  -0x14(%ebp)
c0006788:	e8 d5 f3 ff ff       	call   c0005b62 <ide_read>
c000678d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:52
		/*************************************************************/

		/**********     将硬盘上的inode位图读入到内存    ************/
		cur_part->inode_bitmap.bits = (uint8_t*)sys_malloc(sb_buf->inode_bitmap_sects * SECTOR_SIZE);
c0006790:	8b 1d 50 be 00 c0    	mov    0xc000be50,%ebx
c0006796:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0006799:	8b 40 1c             	mov    0x1c(%eax),%eax
c000679c:	c1 e0 09             	shl    $0x9,%eax
c000679f:	83 ec 0c             	sub    $0xc,%esp
c00067a2:	50                   	push   %eax
c00067a3:	e8 0b c7 ff ff       	call   c0002eb3 <sys_malloc>
c00067a8:	83 c4 10             	add    $0x10,%esp
c00067ab:	89 43 2c             	mov    %eax,0x2c(%ebx)
/work/x86_os_my/fs/fs.c:53
		if (cur_part->inode_bitmap.bits == NULL) {
c00067ae:	a1 50 be 00 c0       	mov    0xc000be50,%eax
c00067b3:	8b 40 2c             	mov    0x2c(%eax),%eax
c00067b6:	85 c0                	test   %eax,%eax
c00067b8:	75 19                	jne    c00067d3 <mount_partition+0x19c>
/work/x86_os_my/fs/fs.c:54
			PANIC("alloc memory failed!");
c00067ba:	68 88 7f 00 c0       	push   $0xc0007f88
c00067bf:	68 5c 81 00 c0       	push   $0xc000815c
c00067c4:	6a 36                	push   $0x36
c00067c6:	68 9d 7f 00 c0       	push   $0xc0007f9d
c00067cb:	e8 c2 bd ff ff       	call   c0002592 <panic_spin>
c00067d0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:56
		}
		cur_part->inode_bitmap.btmp_bytes_len = sb_buf->inode_bitmap_sects * SECTOR_SIZE;
c00067d3:	a1 50 be 00 c0       	mov    0xc000be50,%eax
c00067d8:	8b 55 e8             	mov    -0x18(%ebp),%edx
c00067db:	8b 52 1c             	mov    0x1c(%edx),%edx
c00067de:	c1 e2 09             	shl    $0x9,%edx
c00067e1:	89 50 28             	mov    %edx,0x28(%eax)
/work/x86_os_my/fs/fs.c:58
		/* 从硬盘上读入inode位图到分区的inode_bitmap.bits */
		ide_read(hd, sb_buf->inode_bitmap_lba, cur_part->inode_bitmap.bits, sb_buf->inode_bitmap_sects);   
c00067e4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00067e7:	8b 48 1c             	mov    0x1c(%eax),%ecx
c00067ea:	a1 50 be 00 c0       	mov    0xc000be50,%eax
c00067ef:	8b 50 2c             	mov    0x2c(%eax),%edx
c00067f2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00067f5:	8b 40 18             	mov    0x18(%eax),%eax
c00067f8:	51                   	push   %ecx
c00067f9:	52                   	push   %edx
c00067fa:	50                   	push   %eax
c00067fb:	ff 75 ec             	pushl  -0x14(%ebp)
c00067fe:	e8 5f f3 ff ff       	call   c0005b62 <ide_read>
c0006803:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:61
		/*************************************************************/

		list_init(&cur_part->open_inodes);
c0006806:	a1 50 be 00 c0       	mov    0xc000be50,%eax
c000680b:	83 c0 30             	add    $0x30,%eax
c000680e:	83 ec 0c             	sub    $0xc,%esp
c0006811:	50                   	push   %eax
c0006812:	e8 05 dc ff ff       	call   c000441c <list_init>
c0006817:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:62
		printk("mount %s done!\n", part->name);
c000681a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000681d:	83 c0 14             	add    $0x14,%eax
c0006820:	83 ec 08             	sub    $0x8,%esp
c0006823:	50                   	push   %eax
c0006824:	68 a5 7f 00 c0       	push   $0xc0007fa5
c0006829:	e8 ad fd ff ff       	call   c00065db <printk>
c000682e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:66

		/* 此处返回true是为了迎合主调函数list_traversal的实现,与函数本身功能无关。
		只有返回true时list_traversal才会停止遍历,减少了后面元素无意义的遍历.*/
		return true;
c0006831:	b8 01 00 00 00       	mov    $0x1,%eax
c0006836:	eb 05                	jmp    c000683d <mount_partition+0x206>
/work/x86_os_my/fs/fs.c:68
	}
	return false;	// 使list_traversal继续遍历
c0006838:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/fs.c:69
}
c000683d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0006840:	c9                   	leave  
c0006841:	c3                   	ret    

c0006842 <partition_format>:
partition_format():
/work/x86_os_my/fs/fs.c:72

/* 格式化分区, 创建文件系统 */
static void partition_format(struct partition* part) {
c0006842:	55                   	push   %ebp
c0006843:	89 e5                	mov    %esp,%ebp
c0006845:	57                   	push   %edi
c0006846:	56                   	push   %esi
c0006847:	53                   	push   %ebx
c0006848:	81 ec 7c 02 00 00    	sub    $0x27c,%esp
/work/x86_os_my/fs/fs.c:74
	/* 为方便实现,一个块大小是一扇区 */
	uint32_t boot_sector_sects = 1;		//引导块
c000684e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
/work/x86_os_my/fs/fs.c:75
	uint32_t super_block_sects = 1;		//超级块
c0006855:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
/work/x86_os_my/fs/fs.c:76
	uint32_t inode_bitmap_sects = DIV_ROUND_UP(MAX_FILES_PER_PART, BITS_PER_SECTOR);	// inode位图占用的扇区数.最多支持4096个文件
c000685c:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
/work/x86_os_my/fs/fs.c:77
	uint32_t inode_table_sects = DIV_ROUND_UP((sizeof(struct inode) * MAX_FILES_PER_PART), SECTOR_SIZE);
c0006863:	c7 45 d4 60 02 00 00 	movl   $0x260,-0x2c(%ebp)
/work/x86_os_my/fs/fs.c:78
	uint32_t used_sects = boot_sector_sects + super_block_sects + inode_bitmap_sects + inode_table_sects;
c000686a:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000686d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0006870:	01 c2                	add    %eax,%edx
c0006872:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0006875:	01 c2                	add    %eax,%edx
c0006877:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000687a:	01 d0                	add    %edx,%eax
c000687c:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/fs/fs.c:79
	uint32_t free_sects = part->sec_cnt - used_sects;  
c000687f:	8b 45 08             	mov    0x8(%ebp),%eax
c0006882:	8b 40 04             	mov    0x4(%eax),%eax
c0006885:	2b 45 d0             	sub    -0x30(%ebp),%eax
c0006888:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/fs/fs.c:83

	/************** 简单处理块位图占据的扇区数 ***************/
	uint32_t block_bitmap_sects;
	block_bitmap_sects = DIV_ROUND_UP(free_sects, BITS_PER_SECTOR);		//free_sects空闲块位图要占几个扇区
c000688b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c000688e:	05 ff 0f 00 00       	add    $0xfff,%eax
c0006893:	c1 e8 0c             	shr    $0xc,%eax
c0006896:	89 45 c8             	mov    %eax,-0x38(%ebp)
/work/x86_os_my/fs/fs.c:85
	/* 再算一次空闲块数量 */
	uint32_t block_bitmap_bit_len = free_sects - block_bitmap_sects;	//block_bitmap_bit_len 是位图长度，也是空闲块的数量
c0006899:	8b 45 cc             	mov    -0x34(%ebp),%eax
c000689c:	2b 45 c8             	sub    -0x38(%ebp),%eax
c000689f:	89 45 c4             	mov    %eax,-0x3c(%ebp)
/work/x86_os_my/fs/fs.c:86
	block_bitmap_sects = DIV_ROUND_UP(block_bitmap_bit_len, BITS_PER_SECTOR); 
c00068a2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c00068a5:	05 ff 0f 00 00       	add    $0xfff,%eax
c00068aa:	c1 e8 0c             	shr    $0xc,%eax
c00068ad:	89 45 c8             	mov    %eax,-0x38(%ebp)
/work/x86_os_my/fs/fs.c:91
	/*********************************************************/

	/* 超级块初始化 */
	struct super_block sb;		//局部变量在栈中512字节
	sb.magic = 0x19590318;
c00068b0:	c7 85 a4 fd ff ff 18 	movl   $0x19590318,-0x25c(%ebp)
c00068b7:	03 59 19 
/work/x86_os_my/fs/fs.c:92
	sb.sec_cnt = part->sec_cnt;
c00068ba:	8b 45 08             	mov    0x8(%ebp),%eax
c00068bd:	8b 40 04             	mov    0x4(%eax),%eax
c00068c0:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
/work/x86_os_my/fs/fs.c:93
	sb.inode_cnt = MAX_FILES_PER_PART;
c00068c6:	c7 85 ac fd ff ff 00 	movl   $0x1000,-0x254(%ebp)
c00068cd:	10 00 00 
/work/x86_os_my/fs/fs.c:94
	sb.part_lba_base = part->start_lba;
c00068d0:	8b 45 08             	mov    0x8(%ebp),%eax
c00068d3:	8b 00                	mov    (%eax),%eax
c00068d5:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
/work/x86_os_my/fs/fs.c:96

	sb.block_bitmap_lba = sb.part_lba_base + 2;	// 第0块是引导块,第1块是超级块
c00068db:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
c00068e1:	83 c0 02             	add    $0x2,%eax
c00068e4:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
/work/x86_os_my/fs/fs.c:97
	sb.block_bitmap_sects = block_bitmap_sects;
c00068ea:	8b 45 c8             	mov    -0x38(%ebp),%eax
c00068ed:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
/work/x86_os_my/fs/fs.c:99

	sb.inode_bitmap_lba = sb.block_bitmap_lba + sb.block_bitmap_sects;
c00068f3:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
c00068f9:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
c00068ff:	01 d0                	add    %edx,%eax
c0006901:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
/work/x86_os_my/fs/fs.c:100
	sb.inode_bitmap_sects = inode_bitmap_sects;
c0006907:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000690a:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
/work/x86_os_my/fs/fs.c:102

	sb.inode_table_lba = sb.inode_bitmap_lba + sb.inode_bitmap_sects;
c0006910:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
c0006916:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
c000691c:	01 d0                	add    %edx,%eax
c000691e:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
/work/x86_os_my/fs/fs.c:103
	sb.inode_table_sects = inode_table_sects; 
c0006924:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0006927:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
/work/x86_os_my/fs/fs.c:105

	sb.data_start_lba = sb.inode_table_lba + sb.inode_table_sects;
c000692d:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
c0006933:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
c0006939:	01 d0                	add    %edx,%eax
c000693b:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
/work/x86_os_my/fs/fs.c:106
	sb.root_inode_no = 0;	//根目录的inode号是0
c0006941:	c7 85 d0 fd ff ff 00 	movl   $0x0,-0x230(%ebp)
c0006948:	00 00 00 
/work/x86_os_my/fs/fs.c:107
	sb.dir_entry_size = sizeof(struct dir_entry);
c000694b:	c7 85 d4 fd ff ff 18 	movl   $0x18,-0x22c(%ebp)
c0006952:	00 00 00 
/work/x86_os_my/fs/fs.c:109

	printk("%s info:\n", part->name);
c0006955:	8b 45 08             	mov    0x8(%ebp),%eax
c0006958:	83 c0 14             	add    $0x14,%eax
c000695b:	83 ec 08             	sub    $0x8,%esp
c000695e:	50                   	push   %eax
c000695f:	68 b5 7f 00 c0       	push   $0xc0007fb5
c0006964:	e8 72 fc ff ff       	call   c00065db <printk>
c0006969:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:110
	printk("   magic:0x%x\n   part_lba_base:0x%x\n   all_sectors:0x%x\n   inode_cnt:0x%x\n   block_bitmap_lba:0x%x\n   block_bitmap_sectors:0x%x\n   inode_bitmap_lba:0x%x\n   inode_bitmap_sectors:0x%x\n   inode_table_lba:0x%x\n   inode_table_sectors:0x%x\n   data_start_lba:0x%x\n", sb.magic, sb.part_lba_base, sb.sec_cnt, sb.inode_cnt, sb.block_bitmap_lba, sb.block_bitmap_sects, sb.inode_bitmap_lba, sb.inode_bitmap_sects, sb.inode_table_lba, sb.inode_table_sects, sb.data_start_lba);
c000696c:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
c0006972:	8b 9d c8 fd ff ff    	mov    -0x238(%ebp),%ebx
c0006978:	8b bd c4 fd ff ff    	mov    -0x23c(%ebp),%edi
c000697e:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
c0006984:	89 85 94 fd ff ff    	mov    %eax,-0x26c(%ebp)
c000698a:	8b b5 bc fd ff ff    	mov    -0x244(%ebp),%esi
c0006990:	89 b5 90 fd ff ff    	mov    %esi,-0x270(%ebp)
c0006996:	8b 8d b8 fd ff ff    	mov    -0x248(%ebp),%ecx
c000699c:	89 8d 8c fd ff ff    	mov    %ecx,-0x274(%ebp)
c00069a2:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
c00069a8:	89 85 88 fd ff ff    	mov    %eax,-0x278(%ebp)
c00069ae:	8b b5 ac fd ff ff    	mov    -0x254(%ebp),%esi
c00069b4:	89 b5 84 fd ff ff    	mov    %esi,-0x27c(%ebp)
c00069ba:	8b b5 a8 fd ff ff    	mov    -0x258(%ebp),%esi
c00069c0:	8b 8d b0 fd ff ff    	mov    -0x250(%ebp),%ecx
c00069c6:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
c00069cc:	52                   	push   %edx
c00069cd:	53                   	push   %ebx
c00069ce:	57                   	push   %edi
c00069cf:	ff b5 94 fd ff ff    	pushl  -0x26c(%ebp)
c00069d5:	ff b5 90 fd ff ff    	pushl  -0x270(%ebp)
c00069db:	ff b5 8c fd ff ff    	pushl  -0x274(%ebp)
c00069e1:	ff b5 88 fd ff ff    	pushl  -0x278(%ebp)
c00069e7:	ff b5 84 fd ff ff    	pushl  -0x27c(%ebp)
c00069ed:	56                   	push   %esi
c00069ee:	51                   	push   %ecx
c00069ef:	50                   	push   %eax
c00069f0:	68 c0 7f 00 c0       	push   $0xc0007fc0
c00069f5:	e8 e1 fb ff ff       	call   c00065db <printk>
c00069fa:	83 c4 30             	add    $0x30,%esp
/work/x86_os_my/fs/fs.c:112

	struct disk* hd = part->my_disk;
c00069fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0006a00:	8b 40 08             	mov    0x8(%eax),%eax
c0006a03:	89 45 c0             	mov    %eax,-0x40(%ebp)
/work/x86_os_my/fs/fs.c:114
	/***** 1 将超级块写入本分区的1号扇区 *****/
	ide_write(hd, part->start_lba + 1, &sb, 1);
c0006a06:	8b 45 08             	mov    0x8(%ebp),%eax
c0006a09:	8b 00                	mov    (%eax),%eax
c0006a0b:	8d 50 01             	lea    0x1(%eax),%edx
c0006a0e:	6a 01                	push   $0x1
c0006a10:	8d 85 a4 fd ff ff    	lea    -0x25c(%ebp),%eax
c0006a16:	50                   	push   %eax
c0006a17:	52                   	push   %edx
c0006a18:	ff 75 c0             	pushl  -0x40(%ebp)
c0006a1b:	e8 b6 f2 ff ff       	call   c0005cd6 <ide_write>
c0006a20:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:115
	printk("   super_block_lba:0x%x\n", part->start_lba + 1);
c0006a23:	8b 45 08             	mov    0x8(%ebp),%eax
c0006a26:	8b 00                	mov    (%eax),%eax
c0006a28:	83 c0 01             	add    $0x1,%eax
c0006a2b:	83 ec 08             	sub    $0x8,%esp
c0006a2e:	50                   	push   %eax
c0006a2f:	68 c2 80 00 c0       	push   $0xc00080c2
c0006a34:	e8 a2 fb ff ff       	call   c00065db <printk>
c0006a39:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:118

	/* 找出数据量最大的元信息,用其尺寸做存储缓冲区*/
	uint32_t buf_size = (sb.block_bitmap_sects >= sb.inode_bitmap_sects ? sb.block_bitmap_sects : sb.inode_bitmap_sects);
c0006a3c:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
c0006a42:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
c0006a48:	39 c2                	cmp    %eax,%edx
c0006a4a:	0f 43 c2             	cmovae %edx,%eax
c0006a4d:	89 45 bc             	mov    %eax,-0x44(%ebp)
/work/x86_os_my/fs/fs.c:119
	buf_size = (buf_size >= sb.inode_table_sects ? buf_size : sb.inode_table_sects) * SECTOR_SIZE;
c0006a50:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
c0006a56:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0006a59:	39 c2                	cmp    %eax,%edx
c0006a5b:	0f 43 c2             	cmovae %edx,%eax
c0006a5e:	c1 e0 09             	shl    $0x9,%eax
c0006a61:	89 45 bc             	mov    %eax,-0x44(%ebp)
/work/x86_os_my/fs/fs.c:120
	uint8_t* buf = (uint8_t*)sys_malloc(buf_size);	// 申请的内存由内存管理系统清0后返回
c0006a64:	83 ec 0c             	sub    $0xc,%esp
c0006a67:	ff 75 bc             	pushl  -0x44(%ebp)
c0006a6a:	e8 44 c4 ff ff       	call   c0002eb3 <sys_malloc>
c0006a6f:	83 c4 10             	add    $0x10,%esp
c0006a72:	89 45 b8             	mov    %eax,-0x48(%ebp)
/work/x86_os_my/fs/fs.c:124

	/***** 2 将块位图初始化并写入sb.block_bitmap_lba *****/
	/* 初始化块位图block_bitmap */
	buf[0] |= 0x01;	// 第0个块预留给根目录,位图中先占位
c0006a75:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0006a78:	0f b6 00             	movzbl (%eax),%eax
c0006a7b:	83 c8 01             	or     $0x1,%eax
c0006a7e:	89 c2                	mov    %eax,%edx
c0006a80:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0006a83:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/fs/fs.c:125
	uint32_t block_bitmap_last_byte = block_bitmap_bit_len / 8;
c0006a85:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0006a88:	c1 e8 03             	shr    $0x3,%eax
c0006a8b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
/work/x86_os_my/fs/fs.c:126
	uint8_t  block_bitmap_last_bit  = block_bitmap_bit_len % 8;
c0006a8e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0006a91:	83 e0 07             	and    $0x7,%eax
c0006a94:	88 45 b3             	mov    %al,-0x4d(%ebp)
/work/x86_os_my/fs/fs.c:127
	uint32_t last_size = SECTOR_SIZE - (block_bitmap_last_byte % SECTOR_SIZE);	// last_size是位图所在最后一个扇区中，不足一扇区的其余部分
c0006a97:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0006a9a:	25 ff 01 00 00       	and    $0x1ff,%eax
c0006a9f:	ba 00 02 00 00       	mov    $0x200,%edx
c0006aa4:	29 c2                	sub    %eax,%edx
c0006aa6:	89 d0                	mov    %edx,%eax
c0006aa8:	89 45 ac             	mov    %eax,-0x54(%ebp)
/work/x86_os_my/fs/fs.c:130

	/* 1 先将位图最后一字节到其所在的扇区的结束全置为1,即超出实际块数的部分直接置为已占用*/
	memset(&buf[block_bitmap_last_byte], 0xff, last_size);
c0006aab:	8b 55 b8             	mov    -0x48(%ebp),%edx
c0006aae:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0006ab1:	01 d0                	add    %edx,%eax
c0006ab3:	83 ec 04             	sub    $0x4,%esp
c0006ab6:	ff 75 ac             	pushl  -0x54(%ebp)
c0006ab9:	68 ff 00 00 00       	push   $0xff
c0006abe:	50                   	push   %eax
c0006abf:	e8 e6 ce ff ff       	call   c00039aa <memset>
c0006ac4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:133

	/* 2 再将上一步中覆盖的最后一字节内的有效位重新置0 */
	uint8_t bit_idx = 0;
c0006ac7:	c6 45 e7 00          	movb   $0x0,-0x19(%ebp)
/work/x86_os_my/fs/fs.c:134
	while (bit_idx <= block_bitmap_last_bit) {
c0006acb:	eb 37                	jmp    c0006b04 <partition_format+0x2c2>
/work/x86_os_my/fs/fs.c:135
		buf[block_bitmap_last_byte] &= ~(1 << bit_idx++);
c0006acd:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c0006ad1:	8d 50 01             	lea    0x1(%eax),%edx
c0006ad4:	88 55 e7             	mov    %dl,-0x19(%ebp)
c0006ad7:	0f b6 c0             	movzbl %al,%eax
c0006ada:	ba 01 00 00 00       	mov    $0x1,%edx
c0006adf:	89 c1                	mov    %eax,%ecx
c0006ae1:	d3 e2                	shl    %cl,%edx
c0006ae3:	89 d0                	mov    %edx,%eax
c0006ae5:	f7 d0                	not    %eax
c0006ae7:	89 c3                	mov    %eax,%ebx
c0006ae9:	8b 55 b8             	mov    -0x48(%ebp),%edx
c0006aec:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0006aef:	01 d0                	add    %edx,%eax
c0006af1:	8b 4d b8             	mov    -0x48(%ebp),%ecx
c0006af4:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0006af7:	01 ca                	add    %ecx,%edx
c0006af9:	0f b6 12             	movzbl (%edx),%edx
c0006afc:	89 d1                	mov    %edx,%ecx
c0006afe:	89 da                	mov    %ebx,%edx
c0006b00:	21 ca                	and    %ecx,%edx
c0006b02:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/fs/fs.c:134
	/* 1 先将位图最后一字节到其所在的扇区的结束全置为1,即超出实际块数的部分直接置为已占用*/
	memset(&buf[block_bitmap_last_byte], 0xff, last_size);

	/* 2 再将上一步中覆盖的最后一字节内的有效位重新置0 */
	uint8_t bit_idx = 0;
	while (bit_idx <= block_bitmap_last_bit) {
c0006b04:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c0006b08:	3a 45 b3             	cmp    -0x4d(%ebp),%al
c0006b0b:	76 c0                	jbe    c0006acd <partition_format+0x28b>
/work/x86_os_my/fs/fs.c:137
		buf[block_bitmap_last_byte] &= ~(1 << bit_idx++);
	}
	ide_write(hd, sb.block_bitmap_lba, buf, sb.block_bitmap_sects);
c0006b0d:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
c0006b13:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
c0006b19:	52                   	push   %edx
c0006b1a:	ff 75 b8             	pushl  -0x48(%ebp)
c0006b1d:	50                   	push   %eax
c0006b1e:	ff 75 c0             	pushl  -0x40(%ebp)
c0006b21:	e8 b0 f1 ff ff       	call   c0005cd6 <ide_write>
c0006b26:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:141

	/***** 3 将inode位图初始化并写入sb.inode_bitmap_lba *****/
	/* 先清空缓冲区*/
	memset(buf, 0, buf_size);
c0006b29:	83 ec 04             	sub    $0x4,%esp
c0006b2c:	ff 75 bc             	pushl  -0x44(%ebp)
c0006b2f:	6a 00                	push   $0x0
c0006b31:	ff 75 b8             	pushl  -0x48(%ebp)
c0006b34:	e8 71 ce ff ff       	call   c00039aa <memset>
c0006b39:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:142
	buf[0] |= 0x1;      // 第0个inode分给了根目录
c0006b3c:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0006b3f:	0f b6 00             	movzbl (%eax),%eax
c0006b42:	83 c8 01             	or     $0x1,%eax
c0006b45:	89 c2                	mov    %eax,%edx
c0006b47:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0006b4a:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/fs/fs.c:147
	/* 由于inode_table中共4096个inode,位图inode_bitmap正好占用1扇区,
	 * 即inode_bitmap_sects等于1, 所以位图中的位全都代表inode_table中的inode,
	 * 无须再像block_bitmap那样单独处理最后一扇区的剩余部分,
	 * inode_bitmap所在的扇区中没有多余的无效位 */
	ide_write(hd, sb.inode_bitmap_lba, buf, sb.inode_bitmap_sects);
c0006b4c:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
c0006b52:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
c0006b58:	52                   	push   %edx
c0006b59:	ff 75 b8             	pushl  -0x48(%ebp)
c0006b5c:	50                   	push   %eax
c0006b5d:	ff 75 c0             	pushl  -0x40(%ebp)
c0006b60:	e8 71 f1 ff ff       	call   c0005cd6 <ide_write>
c0006b65:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:151

	/***** 4 将inode数组初始化并写入sb.inode_table_lba *****/
	/* 准备写inode_table中的第0项,即根目录所在的inode */
	memset(buf, 0, buf_size);				// 先清空缓冲区buf
c0006b68:	83 ec 04             	sub    $0x4,%esp
c0006b6b:	ff 75 bc             	pushl  -0x44(%ebp)
c0006b6e:	6a 00                	push   $0x0
c0006b70:	ff 75 b8             	pushl  -0x48(%ebp)
c0006b73:	e8 32 ce ff ff       	call   c00039aa <memset>
c0006b78:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:152
	struct inode* i = (struct inode*)buf; 
c0006b7b:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0006b7e:	89 45 a8             	mov    %eax,-0x58(%ebp)
/work/x86_os_my/fs/fs.c:153
	i->i_size = sb.dir_entry_size * 2;		// .和..
c0006b81:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
c0006b87:	8d 14 00             	lea    (%eax,%eax,1),%edx
c0006b8a:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0006b8d:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/fs.c:154
	i->i_no = 0;   // 根目录占inode数组中第0个inode
c0006b90:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0006b93:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/fs/fs.c:155
	i->i_sectors[0] = sb.data_start_lba;	// 由于上面的memset,i_sectors数组的其它元素都初始化为0 
c0006b99:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
c0006b9f:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0006ba2:	89 50 10             	mov    %edx,0x10(%eax)
/work/x86_os_my/fs/fs.c:156
	ide_write(hd, sb.inode_table_lba, buf, sb.inode_table_sects);
c0006ba5:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
c0006bab:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
c0006bb1:	52                   	push   %edx
c0006bb2:	ff 75 b8             	pushl  -0x48(%ebp)
c0006bb5:	50                   	push   %eax
c0006bb6:	ff 75 c0             	pushl  -0x40(%ebp)
c0006bb9:	e8 18 f1 ff ff       	call   c0005cd6 <ide_write>
c0006bbe:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:160

	/***** 5 将根目录初始化并写入sb.data_start_lba *****/
	/* 写入根目录的两个目录项.和.. */
	memset(buf, 0, buf_size);
c0006bc1:	83 ec 04             	sub    $0x4,%esp
c0006bc4:	ff 75 bc             	pushl  -0x44(%ebp)
c0006bc7:	6a 00                	push   $0x0
c0006bc9:	ff 75 b8             	pushl  -0x48(%ebp)
c0006bcc:	e8 d9 cd ff ff       	call   c00039aa <memset>
c0006bd1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:161
	struct dir_entry* p_de = (struct dir_entry*)buf;
c0006bd4:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0006bd7:	89 45 a4             	mov    %eax,-0x5c(%ebp)
/work/x86_os_my/fs/fs.c:164

	/* 初始化当前目录"." */
	memcpy(p_de->filename, ".", 1);
c0006bda:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0006bdd:	83 ec 04             	sub    $0x4,%esp
c0006be0:	6a 01                	push   $0x1
c0006be2:	68 db 80 00 c0       	push   $0xc00080db
c0006be7:	50                   	push   %eax
c0006be8:	e8 0f ce ff ff       	call   c00039fc <memcpy>
c0006bed:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:165
	p_de->i_no = 0;
c0006bf0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0006bf3:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
/work/x86_os_my/fs/fs.c:166
	p_de->f_type = FT_DIRECTORY;
c0006bfa:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0006bfd:	c7 40 14 02 00 00 00 	movl   $0x2,0x14(%eax)
/work/x86_os_my/fs/fs.c:167
	p_de++;
c0006c04:	83 45 a4 18          	addl   $0x18,-0x5c(%ebp)
/work/x86_os_my/fs/fs.c:170

	/* 初始化当前目录父目录".." */
	memcpy(p_de->filename, "..", 2);
c0006c08:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0006c0b:	83 ec 04             	sub    $0x4,%esp
c0006c0e:	6a 02                	push   $0x2
c0006c10:	68 dd 80 00 c0       	push   $0xc00080dd
c0006c15:	50                   	push   %eax
c0006c16:	e8 e1 cd ff ff       	call   c00039fc <memcpy>
c0006c1b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:171
	p_de->i_no = 0;	// 根目录的父目录依然是根目录自己
c0006c1e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0006c21:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
/work/x86_os_my/fs/fs.c:172
	p_de->f_type = FT_DIRECTORY;
c0006c28:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0006c2b:	c7 40 14 02 00 00 00 	movl   $0x2,0x14(%eax)
/work/x86_os_my/fs/fs.c:175

	/* sb.data_start_lba已经分配给了根目录,里面是根目录的目录项 */
	ide_write(hd, sb.data_start_lba, buf, 1);
c0006c32:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
c0006c38:	6a 01                	push   $0x1
c0006c3a:	ff 75 b8             	pushl  -0x48(%ebp)
c0006c3d:	50                   	push   %eax
c0006c3e:	ff 75 c0             	pushl  -0x40(%ebp)
c0006c41:	e8 90 f0 ff ff       	call   c0005cd6 <ide_write>
c0006c46:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:177

	printk("   root_dir_lba:0x%x\n", sb.data_start_lba);
c0006c49:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
c0006c4f:	83 ec 08             	sub    $0x8,%esp
c0006c52:	50                   	push   %eax
c0006c53:	68 e0 80 00 c0       	push   $0xc00080e0
c0006c58:	e8 7e f9 ff ff       	call   c00065db <printk>
c0006c5d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:178
	printk("%s format done\n", part->name);
c0006c60:	8b 45 08             	mov    0x8(%ebp),%eax
c0006c63:	83 c0 14             	add    $0x14,%eax
c0006c66:	83 ec 08             	sub    $0x8,%esp
c0006c69:	50                   	push   %eax
c0006c6a:	68 f6 80 00 c0       	push   $0xc00080f6
c0006c6f:	e8 67 f9 ff ff       	call   c00065db <printk>
c0006c74:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:179
	sys_free(buf);
c0006c77:	83 ec 0c             	sub    $0xc,%esp
c0006c7a:	ff 75 b8             	pushl  -0x48(%ebp)
c0006c7d:	e8 5e c8 ff ff       	call   c00034e0 <sys_free>
c0006c82:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:180
}
c0006c85:	90                   	nop
c0006c86:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0006c89:	5b                   	pop    %ebx
c0006c8a:	5e                   	pop    %esi
c0006c8b:	5f                   	pop    %edi
c0006c8c:	5d                   	pop    %ebp
c0006c8d:	c3                   	ret    

c0006c8e <filesys_init>:
filesys_init():
/work/x86_os_my/fs/fs.c:183

/* 在磁盘上搜索文件系统,若没有则格式化分区创建文件系统 */
void filesys_init() {
c0006c8e:	55                   	push   %ebp
c0006c8f:	89 e5                	mov    %esp,%ebp
c0006c91:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/fs/fs.c:184
	uint8_t channel_no = 0, dev_no, part_idx = 0;
c0006c94:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
c0006c98:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
/work/x86_os_my/fs/fs.c:187

	/* sb_buf用来存储从硬盘上读入的超级块 */
	struct super_block* sb_buf = (struct super_block*)sys_malloc(SECTOR_SIZE);
c0006c9c:	83 ec 0c             	sub    $0xc,%esp
c0006c9f:	68 00 02 00 00       	push   $0x200
c0006ca4:	e8 0a c2 ff ff       	call   c0002eb3 <sys_malloc>
c0006ca9:	83 c4 10             	add    $0x10,%esp
c0006cac:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:189

	if (sb_buf == NULL) {
c0006caf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0006cb3:	75 1c                	jne    c0006cd1 <filesys_init+0x43>
/work/x86_os_my/fs/fs.c:190
	PANIC("alloc memory failed!");
c0006cb5:	68 88 7f 00 c0       	push   $0xc0007f88
c0006cba:	68 6c 81 00 c0       	push   $0xc000816c
c0006cbf:	68 be 00 00 00       	push   $0xbe
c0006cc4:	68 9d 7f 00 c0       	push   $0xc0007f9d
c0006cc9:	e8 c4 b8 ff ff       	call   c0002592 <panic_spin>
c0006cce:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:192
	}
	printk("searching filesystem......\n");
c0006cd1:	83 ec 0c             	sub    $0xc,%esp
c0006cd4:	68 06 81 00 c0       	push   $0xc0008106
c0006cd9:	e8 fd f8 ff ff       	call   c00065db <printk>
c0006cde:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:193
	while (channel_no < channel_cnt) {
c0006ce1:	e9 1a 01 00 00       	jmp    c0006e00 <filesys_init+0x172>
/work/x86_os_my/fs/fs.c:194
		dev_no = 0;
c0006ce6:	c6 45 f6 00          	movb   $0x0,-0xa(%ebp)
/work/x86_os_my/fs/fs.c:195
		while(dev_no < 2) {
c0006cea:	e9 fd 00 00 00       	jmp    c0006dec <filesys_init+0x15e>
/work/x86_os_my/fs/fs.c:196
			if (dev_no == 0) {		// 跨过裸盘hd60M.img
c0006cef:	80 7d f6 00          	cmpb   $0x0,-0xa(%ebp)
c0006cf3:	75 0f                	jne    c0006d04 <filesys_init+0x76>
/work/x86_os_my/fs/fs.c:197
				dev_no++;
c0006cf5:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0006cf9:	83 c0 01             	add    $0x1,%eax
c0006cfc:	88 45 f6             	mov    %al,-0xa(%ebp)
/work/x86_os_my/fs/fs.c:198
				continue;
c0006cff:	e9 e8 00 00 00       	jmp    c0006dec <filesys_init+0x15e>
/work/x86_os_my/fs/fs.c:200
			}
			struct disk* hd = &channels[channel_no].devices[dev_no];
c0006d04:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0006d08:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
c0006d0c:	69 d2 10 03 00 00    	imul   $0x310,%edx,%edx
c0006d12:	69 c0 60 06 00 00    	imul   $0x660,%eax,%eax
c0006d18:	01 d0                	add    %edx,%eax
c0006d1a:	83 c0 40             	add    $0x40,%eax
c0006d1d:	05 80 b1 00 c0       	add    $0xc000b180,%eax
c0006d22:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:201
			struct partition* part = hd->prim_parts;
c0006d25:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0006d28:	83 c0 10             	add    $0x10,%eax
c0006d2b:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:202
			while(part_idx < 12) {		// 4个主分区+8个逻辑
c0006d2e:	e9 a5 00 00 00       	jmp    c0006dd8 <filesys_init+0x14a>
/work/x86_os_my/fs/fs.c:203
				if (part_idx == 4) {	// 开始处理逻辑分区
c0006d33:	80 7d f5 04          	cmpb   $0x4,-0xb(%ebp)
c0006d37:	75 0b                	jne    c0006d44 <filesys_init+0xb6>
/work/x86_os_my/fs/fs.c:204
					part = hd->logic_parts;
c0006d39:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0006d3c:	05 10 01 00 00       	add    $0x110,%eax
c0006d41:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:211

				/* channels数组是全局变量,默认值为0,disk属于其嵌套结构,
				* partition又为disk的嵌套结构,因此partition中的成员默认也为0.
				* 若partition未初始化,则partition中的成员仍为0. 
				* 下面处理存在的分区. */
				if (part->sec_cnt != 0) {	// 如果分区存在
c0006d44:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006d47:	8b 40 04             	mov    0x4(%eax),%eax
c0006d4a:	85 c0                	test   %eax,%eax
c0006d4c:	74 7c                	je     c0006dca <filesys_init+0x13c>
/work/x86_os_my/fs/fs.c:212
					memset(sb_buf, 0, SECTOR_SIZE);
c0006d4e:	83 ec 04             	sub    $0x4,%esp
c0006d51:	68 00 02 00 00       	push   $0x200
c0006d56:	6a 00                	push   $0x0
c0006d58:	ff 75 ec             	pushl  -0x14(%ebp)
c0006d5b:	e8 4a cc ff ff       	call   c00039aa <memset>
c0006d60:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:215

					/* 读出分区的超级块,根据魔数是否正确来判断是否存在文件系统 */
					ide_read(hd, part->start_lba + 1, sb_buf, 1);   
c0006d63:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006d66:	8b 00                	mov    (%eax),%eax
c0006d68:	83 c0 01             	add    $0x1,%eax
c0006d6b:	6a 01                	push   $0x1
c0006d6d:	ff 75 ec             	pushl  -0x14(%ebp)
c0006d70:	50                   	push   %eax
c0006d71:	ff 75 e8             	pushl  -0x18(%ebp)
c0006d74:	e8 e9 ed ff ff       	call   c0005b62 <ide_read>
c0006d79:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:218

					/* 只支持自己的文件系统.若磁盘上已经有文件系统就不再格式化了 */
					if (sb_buf->magic == 0x19590318) {
c0006d7c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0006d7f:	8b 00                	mov    (%eax),%eax
c0006d81:	3d 18 03 59 19       	cmp    $0x19590318,%eax
c0006d86:	75 19                	jne    c0006da1 <filesys_init+0x113>
/work/x86_os_my/fs/fs.c:219
						printk("%s has filesystem\n", part->name);
c0006d88:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006d8b:	83 c0 14             	add    $0x14,%eax
c0006d8e:	83 ec 08             	sub    $0x8,%esp
c0006d91:	50                   	push   %eax
c0006d92:	68 22 81 00 c0       	push   $0xc0008122
c0006d97:	e8 3f f8 ff ff       	call   c00065db <printk>
c0006d9c:	83 c4 10             	add    $0x10,%esp
c0006d9f:	eb 29                	jmp    c0006dca <filesys_init+0x13c>
/work/x86_os_my/fs/fs.c:221
					} else {	// 其它文件系统不支持,一律按无文件系统处理
						printk("formatting %s`s partition %s......\n", hd->name, part->name);
c0006da1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006da4:	8d 50 14             	lea    0x14(%eax),%edx
c0006da7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0006daa:	83 ec 04             	sub    $0x4,%esp
c0006dad:	52                   	push   %edx
c0006dae:	50                   	push   %eax
c0006daf:	68 38 81 00 c0       	push   $0xc0008138
c0006db4:	e8 22 f8 ff ff       	call   c00065db <printk>
c0006db9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:222
						partition_format(part);
c0006dbc:	83 ec 0c             	sub    $0xc,%esp
c0006dbf:	ff 75 f0             	pushl  -0x10(%ebp)
c0006dc2:	e8 7b fa ff ff       	call   c0006842 <partition_format>
c0006dc7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:225
					}
				}
				part_idx++;
c0006dca:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0006dce:	83 c0 01             	add    $0x1,%eax
c0006dd1:	88 45 f5             	mov    %al,-0xb(%ebp)
/work/x86_os_my/fs/fs.c:226
				part++;	// 下一分区
c0006dd4:	83 45 f0 40          	addl   $0x40,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:202
				dev_no++;
				continue;
			}
			struct disk* hd = &channels[channel_no].devices[dev_no];
			struct partition* part = hd->prim_parts;
			while(part_idx < 12) {		// 4个主分区+8个逻辑
c0006dd8:	80 7d f5 0b          	cmpb   $0xb,-0xb(%ebp)
c0006ddc:	0f 86 51 ff ff ff    	jbe    c0006d33 <filesys_init+0xa5>
/work/x86_os_my/fs/fs.c:228
					}
				}
				part_idx++;
				part++;	// 下一分区
			}
			dev_no++;	// 下一磁盘
c0006de2:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0006de6:	83 c0 01             	add    $0x1,%eax
c0006de9:	88 45 f6             	mov    %al,-0xa(%ebp)
/work/x86_os_my/fs/fs.c:195
	PANIC("alloc memory failed!");
	}
	printk("searching filesystem......\n");
	while (channel_no < channel_cnt) {
		dev_no = 0;
		while(dev_no < 2) {
c0006dec:	80 7d f6 01          	cmpb   $0x1,-0xa(%ebp)
c0006df0:	0f 86 f9 fe ff ff    	jbe    c0006cef <filesys_init+0x61>
/work/x86_os_my/fs/fs.c:230
				part_idx++;
				part++;	// 下一分区
			}
			dev_no++;	// 下一磁盘
		}
		channel_no++;	// 下一通道
c0006df6:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0006dfa:	83 c0 01             	add    $0x1,%eax
c0006dfd:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:193

	if (sb_buf == NULL) {
	PANIC("alloc memory failed!");
	}
	printk("searching filesystem......\n");
	while (channel_no < channel_cnt) {
c0006e00:	0f b6 05 60 b1 00 c0 	movzbl 0xc000b160,%eax
c0006e07:	38 45 f7             	cmp    %al,-0x9(%ebp)
c0006e0a:	0f 82 d6 fe ff ff    	jb     c0006ce6 <filesys_init+0x58>
/work/x86_os_my/fs/fs.c:232
			}
			dev_no++;	// 下一磁盘
		}
		channel_no++;	// 下一通道
	}
	sys_free(sb_buf);
c0006e10:	83 ec 0c             	sub    $0xc,%esp
c0006e13:	ff 75 ec             	pushl  -0x14(%ebp)
c0006e16:	e8 c5 c6 ff ff       	call   c00034e0 <sys_free>
c0006e1b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:235

	/* 确定默认操作的分区 */
	char default_part[8] = "sdb1";
c0006e1e:	c7 45 e0 73 64 62 31 	movl   $0x31626473,-0x20(%ebp)
c0006e25:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
/work/x86_os_my/fs/fs.c:241
	/* 挂载分区 */
	/*  partition_list 是所有分区的列表， mount_partition 是挂载分区的函数，
	(int)default_part 将数组地址转换成整型作为 mount_partition 的参数，
	参数转换为整型的原因是 list_traversal 原型是“ struct list_elem* list_traversal(struct list* plist, function func, int arg)”
	其功能是遍历 plist 中所有元素， 直到 func(arg)返回 true 或者列表元素全部遍历结束。*/
	list_traversal(&partition_list, mount_partition, (int)default_part);
c0006e2c:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0006e2f:	83 ec 04             	sub    $0x4,%esp
c0006e32:	50                   	push   %eax
c0006e33:	68 37 66 00 c0       	push   $0xc0006637
c0006e38:	68 40 be 00 c0       	push   $0xc000be40
c0006e3d:	e8 20 d7 ff ff       	call   c0004562 <list_traversal>
c0006e42:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:242
}
c0006e45:	90                   	nop
c0006e46:	c9                   	leave  
c0006e47:	c3                   	ret    
