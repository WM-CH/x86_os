
./build/kernel.bin:     file format elf32-i386


Disassembly of section .text:

c0001500 <main>:
main():
/work/x86_os_my/kernel/main.c:36
用户进程
u_prog_a 的地址是在 0xc0000000 以上，位于内核空间，但这并不表示它无法模拟用户进程。
*/
void init(void);

int main(void) {
c0001500:	8d 4c 24 04          	lea    0x4(%esp),%ecx
c0001504:	83 e4 f0             	and    $0xfffffff0,%esp
c0001507:	ff 71 fc             	pushl  -0x4(%ecx)
c000150a:	55                   	push   %ebp
c000150b:	89 e5                	mov    %esp,%ebp
c000150d:	51                   	push   %ecx
c000150e:	83 ec 24             	sub    $0x24,%esp
/work/x86_os_my/kernel/main.c:37
	put_str("I am kernel\n");
c0001511:	83 ec 0c             	sub    $0xc,%esp
c0001514:	68 dc c8 00 c0       	push   $0xc000c8dc
c0001519:	e8 e2 0c 00 00       	call   c0002200 <put_str>
c000151e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:38
	init_all();
c0001521:	e8 d8 00 00 00       	call   c00015fe <init_all>
/work/x86_os_my/kernel/main.c:42

	/*************    写入应用程序    *************/
	// 就第一次写入到hd80M.img就行，之后注释掉这块代码。
	uint32_t file_size = 4777;
c0001526:	c7 45 f4 a9 12 00 00 	movl   $0x12a9,-0xc(%ebp)
/work/x86_os_my/kernel/main.c:43
	uint32_t sec_cnt = DIV_ROUND_UP(file_size, 512);
c000152d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001530:	05 ff 01 00 00       	add    $0x1ff,%eax
c0001535:	c1 e8 09             	shr    $0x9,%eax
c0001538:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/main.c:44
	struct disk* sda = &channels[0].devices[0];
c000153b:	c7 45 ec 40 23 01 c0 	movl   $0xc0012340,-0x14(%ebp)
/work/x86_os_my/kernel/main.c:45
	void* prog_buf = sys_malloc(file_size);
c0001542:	83 ec 0c             	sub    $0xc,%esp
c0001545:	ff 75 f4             	pushl  -0xc(%ebp)
c0001548:	e8 0f 18 00 00       	call   c0002d5c <sys_malloc>
c000154d:	83 c4 10             	add    $0x10,%esp
c0001550:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/main.c:46
	ide_read(sda, 300, prog_buf, sec_cnt);
c0001553:	ff 75 f0             	pushl  -0x10(%ebp)
c0001556:	ff 75 e8             	pushl  -0x18(%ebp)
c0001559:	68 2c 01 00 00       	push   $0x12c
c000155e:	ff 75 ec             	pushl  -0x14(%ebp)
c0001561:	e8 2f 4b 00 00       	call   c0006095 <ide_read>
c0001566:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:47
	int32_t fd = sys_open("/prog_no_arg", O_CREAT|O_RDWR);
c0001569:	83 ec 08             	sub    $0x8,%esp
c000156c:	6a 06                	push   $0x6
c000156e:	68 e9 c8 00 c0       	push   $0xc000c8e9
c0001573:	e8 b1 5f 00 00       	call   c0007529 <sys_open>
c0001578:	83 c4 10             	add    $0x10,%esp
c000157b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/kernel/main.c:48
	if (fd != -1) {
c000157e:	83 7d e4 ff          	cmpl   $0xffffffff,-0x1c(%ebp)
c0001582:	74 2b                	je     c00015af <main+0xaf>
/work/x86_os_my/kernel/main.c:49
		if(sys_write(fd, prog_buf, file_size) == -1) {
c0001584:	83 ec 04             	sub    $0x4,%esp
c0001587:	ff 75 f4             	pushl  -0xc(%ebp)
c000158a:	ff 75 e8             	pushl  -0x18(%ebp)
c000158d:	ff 75 e4             	pushl  -0x1c(%ebp)
c0001590:	e8 a0 62 00 00       	call   c0007835 <sys_write>
c0001595:	83 c4 10             	add    $0x10,%esp
c0001598:	83 f8 ff             	cmp    $0xffffffff,%eax
c000159b:	75 12                	jne    c00015af <main+0xaf>
/work/x86_os_my/kernel/main.c:50
			printk("file write error!\n");
c000159d:	83 ec 0c             	sub    $0xc,%esp
c00015a0:	68 f6 c8 00 c0       	push   $0xc000c8f6
c00015a5:	e8 64 55 00 00       	call   c0006b0e <printk>
c00015aa:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:51 (discriminator 1)
			while(1);
c00015ad:	eb fe                	jmp    c00015ad <main+0xad>
/work/x86_os_my/kernel/main.c:55
		}
	}
	/*************    写入应用程序结束   *************/
	cls_screen();
c00015af:	e8 37 0d 00 00       	call   c00022eb <cls_screen>
/work/x86_os_my/kernel/main.c:56
	console_put_str("[rabbit@localhost /]$ ");
c00015b4:	83 ec 0c             	sub    $0xc,%esp
c00015b7:	68 09 c9 00 c0       	push   $0xc000c909
c00015bc:	e8 df 32 00 00       	call   c00048a0 <console_put_str>
c00015c1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:57 (discriminator 2)
	while(1);
c00015c4:	eb fe                	jmp    c00015c4 <main+0xc4>

c00015c6 <init>:
init():
/work/x86_os_my/kernel/main.c:62
	return 0;
}

/* init进程 */
void init(void) {
c00015c6:	55                   	push   %ebp
c00015c7:	89 e5                	mov    %esp,%ebp
c00015c9:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/main.c:63
   uint32_t ret_pid = fork();
c00015cc:	e8 a8 41 00 00       	call   c0005779 <fork>
c00015d1:	98                   	cwtl   
c00015d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/main.c:64
   if(ret_pid) {  // 父进程
c00015d5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c00015d9:	74 02                	je     c00015dd <init+0x17>
/work/x86_os_my/kernel/main.c:65 (discriminator 1)
      while(1);
c00015db:	eb fe                	jmp    c00015db <init+0x15>
/work/x86_os_my/kernel/main.c:67
   } else {	  // 子进程
      my_shell();
c00015dd:	e8 89 a3 00 00       	call   c000b96b <my_shell>
/work/x86_os_my/kernel/main.c:69
   }
   panic("init: should not be here");
c00015e2:	68 20 c9 00 c0       	push   $0xc000c920
c00015e7:	68 48 c9 00 c0       	push   $0xc000c948
c00015ec:	6a 45                	push   $0x45
c00015ee:	68 39 c9 00 c0       	push   $0xc000c939
c00015f3:	e8 b4 a6 00 00       	call   c000bcac <user_spin>
c00015f8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/main.c:70
}
c00015fb:	90                   	nop
c00015fc:	c9                   	leave  
c00015fd:	c3                   	ret    

c00015fe <init_all>:
init_all():
/work/x86_os_my/kernel/init.c:15
#include "syscall-init.h"
#include "ide.h"
#include "fs.h"

/*负责初始化所有模块 */
void init_all() {
c00015fe:	55                   	push   %ebp
c00015ff:	89 e5                	mov    %esp,%ebp
c0001601:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/kernel/init.c:16
	put_str("init_all\n");
c0001604:	83 ec 0c             	sub    $0xc,%esp
c0001607:	68 4d c9 00 c0       	push   $0xc000c94d
c000160c:	e8 ef 0b 00 00       	call   c0002200 <put_str>
c0001611:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/init.c:17
	idt_init();			// 初始化中断
c0001614:	e8 38 04 00 00       	call   c0001a51 <idt_init>
/work/x86_os_my/kernel/init.c:18
	mem_init();			// 初始化内存管理系统
c0001619:	e8 e4 21 00 00       	call   c0003802 <mem_init>
/work/x86_os_my/kernel/init.c:19
	thread_init();		// 初始化线程相关结构
c000161e:	e8 90 2f 00 00       	call   c00045b3 <thread_init>
/work/x86_os_my/kernel/init.c:20
	timer_init();		// 初始化PIT
c0001623:	e8 16 06 00 00       	call   c0001c3e <timer_init>
/work/x86_os_my/kernel/init.c:21
	console_init();		// 控制台初始化最好放在开中断之前
c0001628:	e8 28 32 00 00       	call   c0004855 <console_init>
/work/x86_os_my/kernel/init.c:22
	keyboard_init();	// 键盘初始化
c000162d:	e8 a1 38 00 00       	call   c0004ed3 <keyboard_init>
/work/x86_os_my/kernel/init.c:23
	tss_init();			// tss初始化
c0001632:	e8 57 3c 00 00       	call   c000528e <tss_init>
/work/x86_os_my/kernel/init.c:24
	syscall_init();		// 初始化系统调用
c0001637:	e8 9f 43 00 00       	call   c00059db <syscall_init>
/work/x86_os_my/kernel/init.c:25
	intr_enable();		// 后面的ide_init需要打开中断
c000163c:	e8 5f 03 00 00       	call   c00019a0 <intr_enable>
/work/x86_os_my/kernel/init.c:26
	ide_init();			// 初始化硬盘
c0001641:	e8 bc 52 00 00       	call   c0006902 <ide_init>
/work/x86_os_my/kernel/init.c:27
	filesys_init();		// 初始化文件系统
c0001646:	e8 93 73 00 00       	call   c00089de <filesys_init>
/work/x86_os_my/kernel/init.c:28
}
c000164b:	90                   	nop
c000164c:	c9                   	leave  
c000164d:	c3                   	ret    

c000164e <outb>:
outb():
/work/x86_os_my/lib/kernel/io.h:17
#define __LIB_IO_H
#include "stdint.h"
//inline省去了函数调用开支

/* 向端口port写入一个字节*/
static inline void outb(uint16_t port, uint8_t data) {
c000164e:	55                   	push   %ebp
c000164f:	89 e5                	mov    %esp,%ebp
c0001651:	83 ec 08             	sub    $0x8,%esp
c0001654:	8b 55 08             	mov    0x8(%ebp),%edx
c0001657:	8b 45 0c             	mov    0xc(%ebp),%eax
c000165a:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c000165e:	88 45 f8             	mov    %al,-0x8(%ebp)
/work/x86_os_my/lib/kernel/io.h:21
/*********************************************************
 a表示用寄存器al或ax或eax,对端口指定N表示0~255, d表示用dx存储端口号, 
 %b0表示对应al,%w1表示对应dx */ 
   asm volatile ( "outb %b0, %w1" : : "a" (data), "Nd" (port));    
c0001661:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c0001665:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0001669:	ee                   	out    %al,(%dx)
/work/x86_os_my/lib/kernel/io.h:23
/******************************************************/
}
c000166a:	90                   	nop
c000166b:	c9                   	leave  
c000166c:	c3                   	ret    

c000166d <pic_init>:
pic_init():
/work/x86_os_my/kernel/interrupt.c:41
//自定义类型 intr_handler = void*
extern intr_handler intr_entry_table[IDT_DESC_CNT];	    // 声明引用汇编kernel.S中的中断处理函数入口数组

/* 初始化可编程中断控制器8259A */
// outb 来着 lib/kernel/io.h 内联汇编写法
static void pic_init(void) {
c000166d:	55                   	push   %ebp
c000166e:	89 e5                	mov    %esp,%ebp
c0001670:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:43
	/* 初始化主片 */
	outb (PIC_M_CTRL, 0x11);	// ICW1: 边沿触发,级联8259, 需要ICW4.
c0001673:	6a 11                	push   $0x11
c0001675:	6a 20                	push   $0x20
c0001677:	e8 d2 ff ff ff       	call   c000164e <outb>
c000167c:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:44
	outb (PIC_M_DATA, 0x20);	// ICW2: 起始中断向量号为0x20,也就是IR[0-7] 为 0x20 ~ 0x27.
c000167f:	6a 20                	push   $0x20
c0001681:	6a 21                	push   $0x21
c0001683:	e8 c6 ff ff ff       	call   c000164e <outb>
c0001688:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:45
	outb (PIC_M_DATA, 0x04);	// ICW3: IR2接从片. 
c000168b:	6a 04                	push   $0x4
c000168d:	6a 21                	push   $0x21
c000168f:	e8 ba ff ff ff       	call   c000164e <outb>
c0001694:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:46
	outb (PIC_M_DATA, 0x01);	// ICW4: 8086模式, 正常EOI
c0001697:	6a 01                	push   $0x1
c0001699:	6a 21                	push   $0x21
c000169b:	e8 ae ff ff ff       	call   c000164e <outb>
c00016a0:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:49

	/* 初始化从片 */
	outb (PIC_S_CTRL, 0x11);	// ICW1: 边沿触发,级联8259, 需要ICW4.
c00016a3:	6a 11                	push   $0x11
c00016a5:	68 a0 00 00 00       	push   $0xa0
c00016aa:	e8 9f ff ff ff       	call   c000164e <outb>
c00016af:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:50
	outb (PIC_S_DATA, 0x28);	// ICW2: 起始中断向量号为0x28,也就是IR[8-15] 为 0x28 ~ 0x2F.
c00016b2:	6a 28                	push   $0x28
c00016b4:	68 a1 00 00 00       	push   $0xa1
c00016b9:	e8 90 ff ff ff       	call   c000164e <outb>
c00016be:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:51
	outb (PIC_S_DATA, 0x02);	// ICW3: 设置从片连接到主片的IR2引脚
c00016c1:	6a 02                	push   $0x2
c00016c3:	68 a1 00 00 00       	push   $0xa1
c00016c8:	e8 81 ff ff ff       	call   c000164e <outb>
c00016cd:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:52
	outb (PIC_S_DATA, 0x01);	// ICW4: 8086模式, 正常EOI
c00016d0:	6a 01                	push   $0x1
c00016d2:	68 a1 00 00 00       	push   $0xa1
c00016d7:	e8 72 ff ff ff       	call   c000164e <outb>
c00016dc:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:56

	/* IRQ2用于级联从片,必须打开,否则无法响应从片上的中断
	主片上打开的中断有IRQ0的时钟,IRQ1的键盘和级联从片的IRQ2,其它全部关闭 */
	outb (PIC_M_DATA, 0xf8);
c00016df:	68 f8 00 00 00       	push   $0xf8
c00016e4:	6a 21                	push   $0x21
c00016e6:	e8 63 ff ff ff       	call   c000164e <outb>
c00016eb:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:58
	/* 打开从片上的IRQ14,此引脚接收硬盘控制器的中断 */
	outb (PIC_S_DATA, 0xbf);
c00016ee:	68 bf 00 00 00       	push   $0xbf
c00016f3:	68 a1 00 00 00       	push   $0xa1
c00016f8:	e8 51 ff ff ff       	call   c000164e <outb>
c00016fd:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:60

	put_str("   pic_init done\n");
c0001700:	83 ec 0c             	sub    $0xc,%esp
c0001703:	68 58 c9 00 c0       	push   $0xc000c958
c0001708:	e8 f3 0a 00 00       	call   c0002200 <put_str>
c000170d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:61
}
c0001710:	90                   	nop
c0001711:	c9                   	leave  
c0001712:	c3                   	ret    

c0001713 <make_idt_desc>:
make_idt_desc():
/work/x86_os_my/kernel/interrupt.c:64

/* 创建中断门描述符 */
static void make_idt_desc(struct gate_desc* p_gdesc, uint8_t attr, intr_handler function) { 
c0001713:	55                   	push   %ebp
c0001714:	89 e5                	mov    %esp,%ebp
c0001716:	83 ec 04             	sub    $0x4,%esp
c0001719:	8b 45 0c             	mov    0xc(%ebp),%eax
c000171c:	88 45 fc             	mov    %al,-0x4(%ebp)
/work/x86_os_my/kernel/interrupt.c:65
	p_gdesc->func_offset_low_word = (uint32_t)function & 0x0000FFFF;
c000171f:	8b 45 10             	mov    0x10(%ebp),%eax
c0001722:	89 c2                	mov    %eax,%edx
c0001724:	8b 45 08             	mov    0x8(%ebp),%eax
c0001727:	66 89 10             	mov    %dx,(%eax)
/work/x86_os_my/kernel/interrupt.c:66
	p_gdesc->selector = SELECTOR_K_CODE;
c000172a:	8b 45 08             	mov    0x8(%ebp),%eax
c000172d:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
/work/x86_os_my/kernel/interrupt.c:67
	p_gdesc->dcount = 0;
c0001733:	8b 45 08             	mov    0x8(%ebp),%eax
c0001736:	c6 40 04 00          	movb   $0x0,0x4(%eax)
/work/x86_os_my/kernel/interrupt.c:68
	p_gdesc->attribute = attr;
c000173a:	8b 45 08             	mov    0x8(%ebp),%eax
c000173d:	0f b6 55 fc          	movzbl -0x4(%ebp),%edx
c0001741:	88 50 05             	mov    %dl,0x5(%eax)
/work/x86_os_my/kernel/interrupt.c:69
	p_gdesc->func_offset_high_word = ((uint32_t)function & 0xFFFF0000) >> 16;
c0001744:	8b 45 10             	mov    0x10(%ebp),%eax
c0001747:	c1 e8 10             	shr    $0x10,%eax
c000174a:	89 c2                	mov    %eax,%edx
c000174c:	8b 45 08             	mov    0x8(%ebp),%eax
c000174f:	66 89 50 06          	mov    %dx,0x6(%eax)
/work/x86_os_my/kernel/interrupt.c:70
}
c0001753:	90                   	nop
c0001754:	c9                   	leave  
c0001755:	c3                   	ret    

c0001756 <idt_desc_init>:
idt_desc_init():
/work/x86_os_my/kernel/interrupt.c:73

/*初始化中断描述符表*/
static void idt_desc_init(void) {
c0001756:	55                   	push   %ebp
c0001757:	89 e5                	mov    %esp,%ebp
c0001759:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/interrupt.c:75
	int i;
	int lastindex = IDT_DESC_CNT - 1;
c000175c:	c7 45 f0 80 00 00 00 	movl   $0x80,-0x10(%ebp)
/work/x86_os_my/kernel/interrupt.c:76
	for (i = 0; i < IDT_DESC_CNT; i++) {
c0001763:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c000176a:	eb 29                	jmp    c0001795 <idt_desc_init+0x3f>
/work/x86_os_my/kernel/interrupt.c:77 (discriminator 3)
		make_idt_desc(&idt[i], IDT_DESC_ATTR_DPL0, intr_entry_table[i]); 
c000176c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000176f:	8b 04 85 00 10 01 c0 	mov    -0x3ffef000(,%eax,4),%eax
c0001776:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0001779:	c1 e2 03             	shl    $0x3,%edx
c000177c:	81 c2 60 11 01 c0    	add    $0xc0011160,%edx
c0001782:	50                   	push   %eax
c0001783:	68 8e 00 00 00       	push   $0x8e
c0001788:	52                   	push   %edx
c0001789:	e8 85 ff ff ff       	call   c0001713 <make_idt_desc>
c000178e:	83 c4 0c             	add    $0xc,%esp
/work/x86_os_my/kernel/interrupt.c:76 (discriminator 3)

/*初始化中断描述符表*/
static void idt_desc_init(void) {
	int i;
	int lastindex = IDT_DESC_CNT - 1;
	for (i = 0; i < IDT_DESC_CNT; i++) {
c0001791:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:76 (discriminator 1)
c0001795:	81 7d f4 80 00 00 00 	cmpl   $0x80,-0xc(%ebp)
c000179c:	7e ce                	jle    c000176c <idt_desc_init+0x16>
/work/x86_os_my/kernel/interrupt.c:81
		make_idt_desc(&idt[i], IDT_DESC_ATTR_DPL0, intr_entry_table[i]); 
	}
	/* 系统调用对应的中断门dpl为3！
	 * 中断处理程序为单独的syscall_handler */
	make_idt_desc(&idt[lastindex], IDT_DESC_ATTR_DPL3, syscall_handler);
c000179e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00017a1:	c1 e0 03             	shl    $0x3,%eax
c00017a4:	05 60 11 01 c0       	add    $0xc0011160,%eax
c00017a9:	68 d7 21 00 c0       	push   $0xc00021d7
c00017ae:	68 ee 00 00 00       	push   $0xee
c00017b3:	50                   	push   %eax
c00017b4:	e8 5a ff ff ff       	call   c0001713 <make_idt_desc>
c00017b9:	83 c4 0c             	add    $0xc,%esp
/work/x86_os_my/kernel/interrupt.c:82
	put_str("   idt_desc_init done\n");
c00017bc:	83 ec 0c             	sub    $0xc,%esp
c00017bf:	68 6a c9 00 c0       	push   $0xc000c96a
c00017c4:	e8 37 0a 00 00       	call   c0002200 <put_str>
c00017c9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:83
}
c00017cc:	90                   	nop
c00017cd:	c9                   	leave  
c00017ce:	c3                   	ret    

c00017cf <general_intr_handler>:
general_intr_handler():
/work/x86_os_my/kernel/interrupt.c:86

/* 通用的中断处理函数,一般用在异常出现时的处理 */
static void general_intr_handler(uint8_t vec_nr) {
c00017cf:	55                   	push   %ebp
c00017d0:	89 e5                	mov    %esp,%ebp
c00017d2:	83 ec 28             	sub    $0x28,%esp
c00017d5:	8b 45 08             	mov    0x8(%ebp),%eax
c00017d8:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/kernel/interrupt.c:87
	if (vec_nr == 0x27 || vec_nr == 0x2f) {	// 0x2f是从片8259A上的最后一个irq引脚，保留
c00017db:	80 7d e4 27          	cmpb   $0x27,-0x1c(%ebp)
c00017df:	0f 84 bf 00 00 00    	je     c00018a4 <general_intr_handler+0xd5>
/work/x86_os_my/kernel/interrupt.c:87 (discriminator 1)
c00017e5:	80 7d e4 2f          	cmpb   $0x2f,-0x1c(%ebp)
c00017e9:	0f 84 b5 00 00 00    	je     c00018a4 <general_intr_handler+0xd5>
/work/x86_os_my/kernel/interrupt.c:92
		return;	//IRQ7和IRQ15会产生伪中断(spurious interrupt),无须处理。
	}
	
	/* 将光标置为左上角 并清空一片区域 */
	set_cursor(0);
c00017ef:	83 ec 0c             	sub    $0xc,%esp
c00017f2:	6a 00                	push   $0x0
c00017f4:	e8 94 0b 00 00       	call   c000238d <set_cursor>
c00017f9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:93
	int cursor_pos = 0;
c00017fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:94
	while(cursor_pos < 320) {
c0001803:	eb 11                	jmp    c0001816 <general_intr_handler+0x47>
/work/x86_os_my/kernel/interrupt.c:95
		put_char(' ');
c0001805:	83 ec 0c             	sub    $0xc,%esp
c0001808:	6a 20                	push   $0x20
c000180a:	e8 0f 0a 00 00       	call   c000221e <put_char>
c000180f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:96
		cursor_pos++;
c0001812:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:94
	}
	
	/* 将光标置为左上角 并清空一片区域 */
	set_cursor(0);
	int cursor_pos = 0;
	while(cursor_pos < 320) {
c0001816:	81 7d f4 3f 01 00 00 	cmpl   $0x13f,-0xc(%ebp)
c000181d:	7e e6                	jle    c0001805 <general_intr_handler+0x36>
/work/x86_os_my/kernel/interrupt.c:100
		put_char(' ');
		cursor_pos++;
	}

	/* 将光标置为左上角 打印信息 */
	set_cursor(0);
c000181f:	83 ec 0c             	sub    $0xc,%esp
c0001822:	6a 00                	push   $0x0
c0001824:	e8 64 0b 00 00       	call   c000238d <set_cursor>
c0001829:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:101
	put_str("!!!!!!!      excetion message begin  !!!!!!!!\n");
c000182c:	83 ec 0c             	sub    $0xc,%esp
c000182f:	68 84 c9 00 c0       	push   $0xc000c984
c0001834:	e8 c7 09 00 00       	call   c0002200 <put_str>
c0001839:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:102
	set_cursor(88);			// 第2行第8个字符
c000183c:	83 ec 0c             	sub    $0xc,%esp
c000183f:	6a 58                	push   $0x58
c0001841:	e8 47 0b 00 00       	call   c000238d <set_cursor>
c0001846:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:103
	put_str(intr_name[vec_nr]);
c0001849:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c000184d:	8b 04 85 20 1c 01 c0 	mov    -0x3ffee3e0(,%eax,4),%eax
c0001854:	83 ec 0c             	sub    $0xc,%esp
c0001857:	50                   	push   %eax
c0001858:	e8 a3 09 00 00       	call   c0002200 <put_str>
c000185d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:104
	if (vec_nr == 14) {		// 若为Pagefault,将缺失的地址打印出来并悬停
c0001860:	80 7d e4 0e          	cmpb   $0xe,-0x1c(%ebp)
c0001864:	75 2c                	jne    c0001892 <general_intr_handler+0xc3>
/work/x86_os_my/kernel/interrupt.c:105
		int page_fault_vaddr = 0; 
c0001866:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/kernel/interrupt.c:106
		asm ("movl %%cr2, %0" : "=r" (page_fault_vaddr));	  // cr2是存放造成page_fault的地址
c000186d:	0f 20 d0             	mov    %cr2,%eax
c0001870:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/interrupt.c:107
		put_str("\npage fault addr is 0x");
c0001873:	83 ec 0c             	sub    $0xc,%esp
c0001876:	68 b3 c9 00 c0       	push   $0xc000c9b3
c000187b:	e8 80 09 00 00       	call   c0002200 <put_str>
c0001880:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:108
		put_int(page_fault_vaddr); 
c0001883:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0001886:	83 ec 0c             	sub    $0xc,%esp
c0001889:	50                   	push   %eax
c000188a:	e8 9b 0a 00 00       	call   c000232a <put_int>
c000188f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:110
	}
	put_str("\n!!!!!!!      excetion message end    !!!!!!!!\n");
c0001892:	83 ec 0c             	sub    $0xc,%esp
c0001895:	68 cc c9 00 c0       	push   $0xc000c9cc
c000189a:	e8 61 09 00 00       	call   c0002200 <put_str>
c000189f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:113 (discriminator 1)
	// 能进入中断处理程序就表示已经处在关中断情况下, IF=0
	// 不会出现调度进程的情况。故下面的死循环不会再被中断，会卡死在这里。
	while(1);
c00018a2:	eb fe                	jmp    c00018a2 <general_intr_handler+0xd3>
/work/x86_os_my/kernel/interrupt.c:88
}

/* 通用的中断处理函数,一般用在异常出现时的处理 */
static void general_intr_handler(uint8_t vec_nr) {
	if (vec_nr == 0x27 || vec_nr == 0x2f) {	// 0x2f是从片8259A上的最后一个irq引脚，保留
		return;	//IRQ7和IRQ15会产生伪中断(spurious interrupt),无须处理。
c00018a4:	90                   	nop
/work/x86_os_my/kernel/interrupt.c:114
	}
	put_str("\n!!!!!!!      excetion message end    !!!!!!!!\n");
	// 能进入中断处理程序就表示已经处在关中断情况下, IF=0
	// 不会出现调度进程的情况。故下面的死循环不会再被中断，会卡死在这里。
	while(1);
}
c00018a5:	c9                   	leave  
c00018a6:	c3                   	ret    

c00018a7 <exception_init>:
exception_init():
/work/x86_os_my/kernel/interrupt.c:117

/* 完成一般中断处理函数注册及异常名称注册 */
static void exception_init(void) {
c00018a7:	55                   	push   %ebp
c00018a8:	89 e5                	mov    %esp,%ebp
c00018aa:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:119
	int i;
	for (i = 0; i < IDT_DESC_CNT; i++) {
c00018ad:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c00018b4:	eb 20                	jmp    c00018d6 <exception_init+0x2f>
/work/x86_os_my/kernel/interrupt.c:122 (discriminator 3)
	/* idt_table数组中的函数是在进入中断后根据中断向量号调用的,
	 * 见kernel/kernel.S的call [idt_table + %1*4] */
		idt_table[i] = general_intr_handler;		// 默认为general_intr_handler，以后会由register_handler来注册具体处理函数。
c00018b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c00018b9:	c7 04 85 40 1e 01 c0 	movl   $0xc00017cf,-0x3ffee1c0(,%eax,4)
c00018c0:	cf 17 00 c0 
/work/x86_os_my/kernel/interrupt.c:123 (discriminator 3)
		intr_name[i] = "unknown";					// 先统一赋值为unknown 
c00018c4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c00018c7:	c7 04 85 20 1c 01 c0 	movl   $0xc000c9fc,-0x3ffee3e0(,%eax,4)
c00018ce:	fc c9 00 c0 
/work/x86_os_my/kernel/interrupt.c:119 (discriminator 3)
}

/* 完成一般中断处理函数注册及异常名称注册 */
static void exception_init(void) {
	int i;
	for (i = 0; i < IDT_DESC_CNT; i++) {
c00018d2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
/work/x86_os_my/kernel/interrupt.c:119 (discriminator 1)
c00018d6:	81 7d fc 80 00 00 00 	cmpl   $0x80,-0x4(%ebp)
c00018dd:	7e d7                	jle    c00018b6 <exception_init+0xf>
/work/x86_os_my/kernel/interrupt.c:125
	/* idt_table数组中的函数是在进入中断后根据中断向量号调用的,
	 * 见kernel/kernel.S的call [idt_table + %1*4] */
		idt_table[i] = general_intr_handler;		// 默认为general_intr_handler，以后会由register_handler来注册具体处理函数。
		intr_name[i] = "unknown";					// 先统一赋值为unknown 
	}
	intr_name[0] = "#DE Divide Error";
c00018df:	c7 05 20 1c 01 c0 04 	movl   $0xc000ca04,0xc0011c20
c00018e6:	ca 00 c0 
/work/x86_os_my/kernel/interrupt.c:126
	intr_name[1] = "#DB Debug Exception";
c00018e9:	c7 05 24 1c 01 c0 15 	movl   $0xc000ca15,0xc0011c24
c00018f0:	ca 00 c0 
/work/x86_os_my/kernel/interrupt.c:127
	intr_name[2] = "NMI Interrupt";
c00018f3:	c7 05 28 1c 01 c0 29 	movl   $0xc000ca29,0xc0011c28
c00018fa:	ca 00 c0 
/work/x86_os_my/kernel/interrupt.c:128
	intr_name[3] = "#BP Breakpoint Exception";
c00018fd:	c7 05 2c 1c 01 c0 37 	movl   $0xc000ca37,0xc0011c2c
c0001904:	ca 00 c0 
/work/x86_os_my/kernel/interrupt.c:129
	intr_name[4] = "#OF Overflow Exception";
c0001907:	c7 05 30 1c 01 c0 50 	movl   $0xc000ca50,0xc0011c30
c000190e:	ca 00 c0 
/work/x86_os_my/kernel/interrupt.c:130
	intr_name[5] = "#BR BOUND Range Exceeded Exception";
c0001911:	c7 05 34 1c 01 c0 68 	movl   $0xc000ca68,0xc0011c34
c0001918:	ca 00 c0 
/work/x86_os_my/kernel/interrupt.c:131
	intr_name[6] = "#UD Invalid Opcode Exception";
c000191b:	c7 05 38 1c 01 c0 8b 	movl   $0xc000ca8b,0xc0011c38
c0001922:	ca 00 c0 
/work/x86_os_my/kernel/interrupt.c:132
	intr_name[7] = "#NM Device Not Available Exception";
c0001925:	c7 05 3c 1c 01 c0 a8 	movl   $0xc000caa8,0xc0011c3c
c000192c:	ca 00 c0 
/work/x86_os_my/kernel/interrupt.c:133
	intr_name[8] = "#DF Double Fault Exception";
c000192f:	c7 05 40 1c 01 c0 cb 	movl   $0xc000cacb,0xc0011c40
c0001936:	ca 00 c0 
/work/x86_os_my/kernel/interrupt.c:134
	intr_name[9] = "Coprocessor Segment Overrun";
c0001939:	c7 05 44 1c 01 c0 e6 	movl   $0xc000cae6,0xc0011c44
c0001940:	ca 00 c0 
/work/x86_os_my/kernel/interrupt.c:135
	intr_name[10] = "#TS Invalid TSS Exception";
c0001943:	c7 05 48 1c 01 c0 02 	movl   $0xc000cb02,0xc0011c48
c000194a:	cb 00 c0 
/work/x86_os_my/kernel/interrupt.c:136
	intr_name[11] = "#NP Segment Not Present";
c000194d:	c7 05 4c 1c 01 c0 1c 	movl   $0xc000cb1c,0xc0011c4c
c0001954:	cb 00 c0 
/work/x86_os_my/kernel/interrupt.c:137
	intr_name[12] = "#SS Stack Fault Exception";
c0001957:	c7 05 50 1c 01 c0 34 	movl   $0xc000cb34,0xc0011c50
c000195e:	cb 00 c0 
/work/x86_os_my/kernel/interrupt.c:138
	intr_name[13] = "#GP General Protection Exception";
c0001961:	c7 05 54 1c 01 c0 50 	movl   $0xc000cb50,0xc0011c54
c0001968:	cb 00 c0 
/work/x86_os_my/kernel/interrupt.c:139
	intr_name[14] = "#PF Page-Fault Exception";
c000196b:	c7 05 58 1c 01 c0 71 	movl   $0xc000cb71,0xc0011c58
c0001972:	cb 00 c0 
/work/x86_os_my/kernel/interrupt.c:141
	// intr_name[15] 第15项是intel保留项，未使用
	intr_name[16] = "#MF x87 FPU Floating-Point Error";
c0001975:	c7 05 60 1c 01 c0 8c 	movl   $0xc000cb8c,0xc0011c60
c000197c:	cb 00 c0 
/work/x86_os_my/kernel/interrupt.c:142
	intr_name[17] = "#AC Alignment Check Exception";
c000197f:	c7 05 64 1c 01 c0 ad 	movl   $0xc000cbad,0xc0011c64
c0001986:	cb 00 c0 
/work/x86_os_my/kernel/interrupt.c:143
	intr_name[18] = "#MC Machine-Check Exception";
c0001989:	c7 05 68 1c 01 c0 cb 	movl   $0xc000cbcb,0xc0011c68
c0001990:	cb 00 c0 
/work/x86_os_my/kernel/interrupt.c:144
	intr_name[19] = "#XF SIMD Floating-Point Exception";
c0001993:	c7 05 6c 1c 01 c0 e8 	movl   $0xc000cbe8,0xc0011c6c
c000199a:	cb 00 c0 
/work/x86_os_my/kernel/interrupt.c:145
}
c000199d:	90                   	nop
c000199e:	c9                   	leave  
c000199f:	c3                   	ret    

c00019a0 <intr_enable>:
intr_enable():
/work/x86_os_my/kernel/interrupt.c:148

/* 开中断并返回开中断前的状态*/
enum intr_status intr_enable() {
c00019a0:	55                   	push   %ebp
c00019a1:	89 e5                	mov    %esp,%ebp
c00019a3:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/interrupt.c:150
	enum intr_status old_status;
	if (INTR_ON == intr_get_status()) {
c00019a6:	e8 65 00 00 00       	call   c0001a10 <intr_get_status>
c00019ab:	83 f8 01             	cmp    $0x1,%eax
c00019ae:	75 0c                	jne    c00019bc <intr_enable+0x1c>
/work/x86_os_my/kernel/interrupt.c:151
		old_status = INTR_ON;
c00019b0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:152
		return old_status;
c00019b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00019ba:	eb 0b                	jmp    c00019c7 <intr_enable+0x27>
/work/x86_os_my/kernel/interrupt.c:154
	} else {
		old_status = INTR_OFF;
c00019bc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:155
		asm volatile("sti");	 // 开中断,sti指令将IF位置1
c00019c3:	fb                   	sti    
/work/x86_os_my/kernel/interrupt.c:156
		return old_status;
c00019c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/kernel/interrupt.c:158
	}
}
c00019c7:	c9                   	leave  
c00019c8:	c3                   	ret    

c00019c9 <intr_disable>:
intr_disable():
/work/x86_os_my/kernel/interrupt.c:161

/* 关中断,并且返回关中断前的状态 */
enum intr_status intr_disable() {     
c00019c9:	55                   	push   %ebp
c00019ca:	89 e5                	mov    %esp,%ebp
c00019cc:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/interrupt.c:163
	enum intr_status old_status;
	if (INTR_ON == intr_get_status()) {
c00019cf:	e8 3c 00 00 00       	call   c0001a10 <intr_get_status>
c00019d4:	83 f8 01             	cmp    $0x1,%eax
c00019d7:	75 0d                	jne    c00019e6 <intr_disable+0x1d>
/work/x86_os_my/kernel/interrupt.c:164
		old_status = INTR_ON;
c00019d9:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:165
		asm volatile("cli" : : : "memory"); // 关中断,cli指令将IF位置0
c00019e0:	fa                   	cli    
/work/x86_os_my/kernel/interrupt.c:166
		return old_status;
c00019e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00019e4:	eb 0a                	jmp    c00019f0 <intr_disable+0x27>
/work/x86_os_my/kernel/interrupt.c:168
	} else {
		old_status = INTR_OFF;
c00019e6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:169
		return old_status;
c00019ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/kernel/interrupt.c:171
	}
}
c00019f0:	c9                   	leave  
c00019f1:	c3                   	ret    

c00019f2 <intr_set_status>:
intr_set_status():
/work/x86_os_my/kernel/interrupt.c:174

/* 将中断状态设置为status */
enum intr_status intr_set_status(enum intr_status status) {
c00019f2:	55                   	push   %ebp
c00019f3:	89 e5                	mov    %esp,%ebp
c00019f5:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/kernel/interrupt.c:175
	return status & INTR_ON ? intr_enable() : intr_disable();
c00019f8:	8b 45 08             	mov    0x8(%ebp),%eax
c00019fb:	83 e0 01             	and    $0x1,%eax
c00019fe:	85 c0                	test   %eax,%eax
c0001a00:	74 07                	je     c0001a09 <intr_set_status+0x17>
/work/x86_os_my/kernel/interrupt.c:175 (discriminator 1)
c0001a02:	e8 99 ff ff ff       	call   c00019a0 <intr_enable>
c0001a07:	eb 05                	jmp    c0001a0e <intr_set_status+0x1c>
/work/x86_os_my/kernel/interrupt.c:175 (discriminator 2)
c0001a09:	e8 bb ff ff ff       	call   c00019c9 <intr_disable>
/work/x86_os_my/kernel/interrupt.c:176 (discriminator 5)
}
c0001a0e:	c9                   	leave  
c0001a0f:	c3                   	ret    

c0001a10 <intr_get_status>:
intr_get_status():
/work/x86_os_my/kernel/interrupt.c:179

/* 获取当前中断状态 */
enum intr_status intr_get_status() {
c0001a10:	55                   	push   %ebp
c0001a11:	89 e5                	mov    %esp,%ebp
c0001a13:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:180
	uint32_t eflags = 0; 
c0001a16:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
/work/x86_os_my/kernel/interrupt.c:181
	GET_EFLAGS(eflags);
c0001a1d:	9c                   	pushf  
c0001a1e:	58                   	pop    %eax
c0001a1f:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/kernel/interrupt.c:182
	return (EFLAGS_IF & eflags) ? INTR_ON : INTR_OFF;
c0001a22:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0001a25:	25 00 02 00 00       	and    $0x200,%eax
c0001a2a:	85 c0                	test   %eax,%eax
c0001a2c:	0f 95 c0             	setne  %al
c0001a2f:	0f b6 c0             	movzbl %al,%eax
/work/x86_os_my/kernel/interrupt.c:183
}
c0001a32:	c9                   	leave  
c0001a33:	c3                   	ret    

c0001a34 <register_handler>:
register_handler():
/work/x86_os_my/kernel/interrupt.c:186

/* 在中断处理程序数组第vector_no个元素中注册安装中断处理程序function */
void register_handler(uint8_t vector_no, intr_handler function) {
c0001a34:	55                   	push   %ebp
c0001a35:	89 e5                	mov    %esp,%ebp
c0001a37:	83 ec 04             	sub    $0x4,%esp
c0001a3a:	8b 45 08             	mov    0x8(%ebp),%eax
c0001a3d:	88 45 fc             	mov    %al,-0x4(%ebp)
/work/x86_os_my/kernel/interrupt.c:189
/* idt_table数组中的函数是在进入中断后根据中断向量号调用的,
 * 见kernel/kernel.S的call [idt_table + %1*4] */
   idt_table[vector_no] = function; 
c0001a40:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c0001a44:	8b 55 0c             	mov    0xc(%ebp),%edx
c0001a47:	89 14 85 40 1e 01 c0 	mov    %edx,-0x3ffee1c0(,%eax,4)
/work/x86_os_my/kernel/interrupt.c:190
}
c0001a4e:	90                   	nop
c0001a4f:	c9                   	leave  
c0001a50:	c3                   	ret    

c0001a51 <idt_init>:
idt_init():
/work/x86_os_my/kernel/interrupt.c:193

/*完成有关中断的所有初始化工作*/
void idt_init() {
c0001a51:	55                   	push   %ebp
c0001a52:	89 e5                	mov    %esp,%ebp
c0001a54:	56                   	push   %esi
c0001a55:	53                   	push   %ebx
c0001a56:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:194
	put_str("idt_init start\n");
c0001a59:	83 ec 0c             	sub    $0xc,%esp
c0001a5c:	68 0a cc 00 c0       	push   $0xc000cc0a
c0001a61:	e8 9a 07 00 00       	call   c0002200 <put_str>
c0001a66:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:195
	idt_desc_init();	// 初始化中断描述符表
c0001a69:	e8 e8 fc ff ff       	call   c0001756 <idt_desc_init>
/work/x86_os_my/kernel/interrupt.c:196
	exception_init();	// 异常名初始化并注册通常的中断处理函数
c0001a6e:	e8 34 fe ff ff       	call   c00018a7 <exception_init>
/work/x86_os_my/kernel/interrupt.c:197
	pic_init();			// 初始化8259A
c0001a73:	e8 f5 fb ff ff       	call   c000166d <pic_init>
/work/x86_os_my/kernel/interrupt.c:201

	/* 加载idt */
	// IDTR 是 48 位的寄存器，低 16 位是 IDT 的界限 = IDT 尺寸大小-1，高 32 位是 IDT 的线性基地址
	uint64_t idt_operand = ((sizeof(idt) - 1) | ((uint64_t)(uint32_t)idt << 16));
c0001a78:	b8 60 11 01 c0       	mov    $0xc0011160,%eax
c0001a7d:	ba 00 00 00 00       	mov    $0x0,%edx
c0001a82:	0f a4 c2 10          	shld   $0x10,%eax,%edx
c0001a86:	c1 e0 10             	shl    $0x10,%eax
c0001a89:	89 c1                	mov    %eax,%ecx
c0001a8b:	81 c9 07 04 00 00    	or     $0x407,%ecx
c0001a91:	89 cb                	mov    %ecx,%ebx
c0001a93:	89 d0                	mov    %edx,%eax
c0001a95:	80 cc 00             	or     $0x0,%ah
c0001a98:	89 c6                	mov    %eax,%esi
c0001a9a:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c0001a9d:	89 75 f4             	mov    %esi,-0xc(%ebp)
/work/x86_os_my/kernel/interrupt.c:202
	asm volatile("lidt %0" : : "m" (idt_operand));
c0001aa0:	0f 01 5d f0          	lidtl  -0x10(%ebp)
/work/x86_os_my/kernel/interrupt.c:203
	put_str("idt_init done\n");
c0001aa4:	83 ec 0c             	sub    $0xc,%esp
c0001aa7:	68 1a cc 00 c0       	push   $0xc000cc1a
c0001aac:	e8 4f 07 00 00       	call   c0002200 <put_str>
c0001ab1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/interrupt.c:204
}
c0001ab4:	90                   	nop
c0001ab5:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0001ab8:	5b                   	pop    %ebx
c0001ab9:	5e                   	pop    %esi
c0001aba:	5d                   	pop    %ebp
c0001abb:	c3                   	ret    

c0001abc <outb>:
outb():
/work/x86_os_my/lib/kernel/io.h:17
#define __LIB_IO_H
#include "stdint.h"
//inline省去了函数调用开支

/* 向端口port写入一个字节*/
static inline void outb(uint16_t port, uint8_t data) {
c0001abc:	55                   	push   %ebp
c0001abd:	89 e5                	mov    %esp,%ebp
c0001abf:	83 ec 08             	sub    $0x8,%esp
c0001ac2:	8b 55 08             	mov    0x8(%ebp),%edx
c0001ac5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0001ac8:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c0001acc:	88 45 f8             	mov    %al,-0x8(%ebp)
/work/x86_os_my/lib/kernel/io.h:21
/*********************************************************
 a表示用寄存器al或ax或eax,对端口指定N表示0~255, d表示用dx存储端口号, 
 %b0表示对应al,%w1表示对应dx */ 
   asm volatile ( "outb %b0, %w1" : : "a" (data), "Nd" (port));    
c0001acf:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c0001ad3:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0001ad7:	ee                   	out    %al,(%dx)
/work/x86_os_my/lib/kernel/io.h:23
/******************************************************/
}
c0001ad8:	90                   	nop
c0001ad9:	c9                   	leave  
c0001ada:	c3                   	ret    

c0001adb <frequency_set>:
frequency_set():
/work/x86_os_my/device/timer.c:27
/* 把操作的计数器counter_no、读写锁属性rwl、计数器模式counter_mode写入模式控制寄存器并赋予初始值counter_value */
static void frequency_set(uint8_t counter_port, \
		uint8_t counter_no, \
		uint8_t rwl, \
		uint8_t counter_mode, \
		uint16_t counter_value) {
c0001adb:	55                   	push   %ebp
c0001adc:	89 e5                	mov    %esp,%ebp
c0001ade:	56                   	push   %esi
c0001adf:	53                   	push   %ebx
c0001ae0:	83 ec 14             	sub    $0x14,%esp
c0001ae3:	8b 45 08             	mov    0x8(%ebp),%eax
c0001ae6:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c0001ae9:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0001aec:	8b 55 14             	mov    0x14(%ebp),%edx
c0001aef:	8b 75 18             	mov    0x18(%ebp),%esi
c0001af2:	88 45 f4             	mov    %al,-0xc(%ebp)
c0001af5:	88 5d f0             	mov    %bl,-0x10(%ebp)
c0001af8:	88 4d ec             	mov    %cl,-0x14(%ebp)
c0001afb:	88 55 e8             	mov    %dl,-0x18(%ebp)
c0001afe:	66 89 75 e4          	mov    %si,-0x1c(%ebp)
/work/x86_os_my/device/timer.c:29
	/* 往控制字寄存器端口0x43中写入控制字 */
	outb(PIT_CONTROL_PORT, (uint8_t)(counter_no << 6 | rwl << 4 | counter_mode << 1));
c0001b02:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c0001b06:	c1 e0 06             	shl    $0x6,%eax
c0001b09:	89 c2                	mov    %eax,%edx
c0001b0b:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0001b0f:	c1 e0 04             	shl    $0x4,%eax
c0001b12:	09 c2                	or     %eax,%edx
c0001b14:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c0001b18:	01 c0                	add    %eax,%eax
c0001b1a:	09 d0                	or     %edx,%eax
c0001b1c:	0f b6 c0             	movzbl %al,%eax
c0001b1f:	50                   	push   %eax
c0001b20:	6a 43                	push   $0x43
c0001b22:	e8 95 ff ff ff       	call   c0001abc <outb>
c0001b27:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/timer.c:31
	/* 先写入counter_value的低8位 */
	outb(counter_port, (uint8_t)counter_value);
c0001b2a:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
c0001b2e:	0f b6 d0             	movzbl %al,%edx
c0001b31:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0001b35:	52                   	push   %edx
c0001b36:	50                   	push   %eax
c0001b37:	e8 80 ff ff ff       	call   c0001abc <outb>
c0001b3c:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/timer.c:33
	/* 再写入counter_value的高8位 */
	outb(counter_port, (uint8_t)counter_value >> 8);
c0001b3f:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0001b43:	6a 00                	push   $0x0
c0001b45:	50                   	push   %eax
c0001b46:	e8 71 ff ff ff       	call   c0001abc <outb>
c0001b4b:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/timer.c:34
}
c0001b4e:	90                   	nop
c0001b4f:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0001b52:	5b                   	pop    %ebx
c0001b53:	5e                   	pop    %esi
c0001b54:	5d                   	pop    %ebp
c0001b55:	c3                   	ret    

c0001b56 <intr_timer_handler>:
intr_timer_handler():
/work/x86_os_my/device/timer.c:37

/* 时钟的中断处理函数 */
static void intr_timer_handler(void) {
c0001b56:	55                   	push   %ebp
c0001b57:	89 e5                	mov    %esp,%ebp
c0001b59:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/timer.c:38
	struct task_struct* cur_thread = running_thread();		// 返回线程PCB
c0001b5c:	e8 d9 20 00 00       	call   c0003c3a <running_thread>
c0001b61:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/timer.c:40

	ASSERT(cur_thread->stack_magic == 0x19870916);			// 检查栈是否溢出
c0001b64:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001b67:	8b 80 14 01 00 00    	mov    0x114(%eax),%eax
c0001b6d:	3d 16 09 87 19       	cmp    $0x19870916,%eax
c0001b72:	74 19                	je     c0001b8d <intr_timer_handler+0x37>
/work/x86_os_my/device/timer.c:40 (discriminator 1)
c0001b74:	68 2c cc 00 c0       	push   $0xc000cc2c
c0001b79:	68 94 cc 00 c0       	push   $0xc000cc94
c0001b7e:	6a 28                	push   $0x28
c0001b80:	68 52 cc 00 c0       	push   $0xc000cc52
c0001b85:	e8 27 08 00 00       	call   c00023b1 <panic_spin>
c0001b8a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:42

	cur_thread->elapsed_ticks++;// 记录此线程占用的cpu时间
c0001b8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001b90:	8b 40 20             	mov    0x20(%eax),%eax
c0001b93:	8d 50 01             	lea    0x1(%eax),%edx
c0001b96:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001b99:	89 50 20             	mov    %edx,0x20(%eax)
/work/x86_os_my/device/timer.c:43
	ticks++;	//从内核第一次处理时间中断开始,至今的滴哒数,是内核态和用户态总共的嘀哒数
c0001b9c:	a1 44 20 01 c0       	mov    0xc0012044,%eax
c0001ba1:	83 c0 01             	add    $0x1,%eax
c0001ba4:	a3 44 20 01 c0       	mov    %eax,0xc0012044
/work/x86_os_my/device/timer.c:45

	if (cur_thread->ticks == 0) {
c0001ba9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001bac:	0f b6 40 1d          	movzbl 0x1d(%eax),%eax
c0001bb0:	84 c0                	test   %al,%al
c0001bb2:	75 07                	jne    c0001bbb <intr_timer_handler+0x65>
/work/x86_os_my/device/timer.c:46
		schedule();				// 若进程时间片用完就开始调度新的进程上cpu
c0001bb4:	e8 d7 23 00 00       	call   c0003f90 <schedule>
/work/x86_os_my/device/timer.c:50
	} else {
		cur_thread->ticks--;	// 将当前进程的时间片-1
	}
}
c0001bb9:	eb 10                	jmp    c0001bcb <intr_timer_handler+0x75>
/work/x86_os_my/device/timer.c:48
	ticks++;	//从内核第一次处理时间中断开始,至今的滴哒数,是内核态和用户态总共的嘀哒数

	if (cur_thread->ticks == 0) {
		schedule();				// 若进程时间片用完就开始调度新的进程上cpu
	} else {
		cur_thread->ticks--;	// 将当前进程的时间片-1
c0001bbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001bbe:	0f b6 40 1d          	movzbl 0x1d(%eax),%eax
c0001bc2:	8d 50 ff             	lea    -0x1(%eax),%edx
c0001bc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0001bc8:	88 50 1d             	mov    %dl,0x1d(%eax)
/work/x86_os_my/device/timer.c:50
	}
}
c0001bcb:	90                   	nop
c0001bcc:	c9                   	leave  
c0001bcd:	c3                   	ret    

c0001bce <ticks_to_sleep>:
ticks_to_sleep():
/work/x86_os_my/device/timer.c:53

/* 以tick为单位的sleep,任何时间形式的sleep会转换此ticks形式 */
static void ticks_to_sleep(uint32_t sleep_ticks) {
c0001bce:	55                   	push   %ebp
c0001bcf:	89 e5                	mov    %esp,%ebp
c0001bd1:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/timer.c:54
	uint32_t start_tick = ticks;
c0001bd4:	a1 44 20 01 c0       	mov    0xc0012044,%eax
c0001bd9:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/timer.c:57

	/* 若间隔的ticks数不够便让出cpu */
	while (ticks - start_tick < sleep_ticks) {
c0001bdc:	eb 05                	jmp    c0001be3 <ticks_to_sleep+0x15>
/work/x86_os_my/device/timer.c:58
		thread_yield();
c0001bde:	e8 57 26 00 00       	call   c000423a <thread_yield>
/work/x86_os_my/device/timer.c:57
/* 以tick为单位的sleep,任何时间形式的sleep会转换此ticks形式 */
static void ticks_to_sleep(uint32_t sleep_ticks) {
	uint32_t start_tick = ticks;

	/* 若间隔的ticks数不够便让出cpu */
	while (ticks - start_tick < sleep_ticks) {
c0001be3:	a1 44 20 01 c0       	mov    0xc0012044,%eax
c0001be8:	2b 45 f4             	sub    -0xc(%ebp),%eax
c0001beb:	3b 45 08             	cmp    0x8(%ebp),%eax
c0001bee:	72 ee                	jb     c0001bde <ticks_to_sleep+0x10>
/work/x86_os_my/device/timer.c:60
		thread_yield();
	}
}
c0001bf0:	90                   	nop
c0001bf1:	c9                   	leave  
c0001bf2:	c3                   	ret    

c0001bf3 <mtime_sleep>:
mtime_sleep():
/work/x86_os_my/device/timer.c:62

void mtime_sleep(uint32_t m_seconds) {
c0001bf3:	55                   	push   %ebp
c0001bf4:	89 e5                	mov    %esp,%ebp
c0001bf6:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/timer.c:63
	uint32_t sleep_ticks = DIV_ROUND_UP(m_seconds, mil_seconds_per_intr);
c0001bf9:	8b 45 08             	mov    0x8(%ebp),%eax
c0001bfc:	83 c0 09             	add    $0x9,%eax
c0001bff:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
c0001c04:	f7 e2                	mul    %edx
c0001c06:	89 d0                	mov    %edx,%eax
c0001c08:	c1 e8 03             	shr    $0x3,%eax
c0001c0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/timer.c:64
	ASSERT(sleep_ticks > 0);
c0001c0e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0001c12:	75 19                	jne    c0001c2d <mtime_sleep+0x3a>
/work/x86_os_my/device/timer.c:64 (discriminator 1)
c0001c14:	68 61 cc 00 c0       	push   $0xc000cc61
c0001c19:	68 a8 cc 00 c0       	push   $0xc000cca8
c0001c1e:	6a 40                	push   $0x40
c0001c20:	68 52 cc 00 c0       	push   $0xc000cc52
c0001c25:	e8 87 07 00 00       	call   c00023b1 <panic_spin>
c0001c2a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:65
	ticks_to_sleep(sleep_ticks); 
c0001c2d:	83 ec 0c             	sub    $0xc,%esp
c0001c30:	ff 75 f4             	pushl  -0xc(%ebp)
c0001c33:	e8 96 ff ff ff       	call   c0001bce <ticks_to_sleep>
c0001c38:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:66
}
c0001c3b:	90                   	nop
c0001c3c:	c9                   	leave  
c0001c3d:	c3                   	ret    

c0001c3e <timer_init>:
timer_init():
/work/x86_os_my/device/timer.c:69

/* 初始化PIT8253 */
void timer_init() {
c0001c3e:	55                   	push   %ebp
c0001c3f:	89 e5                	mov    %esp,%ebp
c0001c41:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/timer.c:70
	put_str("timer_init start\n");
c0001c44:	83 ec 0c             	sub    $0xc,%esp
c0001c47:	68 71 cc 00 c0       	push   $0xc000cc71
c0001c4c:	e8 af 05 00 00       	call   c0002200 <put_str>
c0001c51:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:72
	/* 设置8253的定时周期,也就是发中断的周期 */
	frequency_set(CONTRER0_PORT, COUNTER0_NO, READ_WRITE_LATCH, COUNTER_MODE, COUNTER0_VALUE);
c0001c54:	83 ec 0c             	sub    $0xc,%esp
c0001c57:	68 9b 2e 00 00       	push   $0x2e9b
c0001c5c:	6a 02                	push   $0x2
c0001c5e:	6a 03                	push   $0x3
c0001c60:	6a 00                	push   $0x0
c0001c62:	6a 40                	push   $0x40
c0001c64:	e8 72 fe ff ff       	call   c0001adb <frequency_set>
c0001c69:	83 c4 20             	add    $0x20,%esp
/work/x86_os_my/device/timer.c:73
	register_handler(0x20, intr_timer_handler);
c0001c6c:	83 ec 08             	sub    $0x8,%esp
c0001c6f:	68 56 1b 00 c0       	push   $0xc0001b56
c0001c74:	6a 20                	push   $0x20
c0001c76:	e8 b9 fd ff ff       	call   c0001a34 <register_handler>
c0001c7b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:74
	put_str("timer_init done\n");
c0001c7e:	83 ec 0c             	sub    $0xc,%esp
c0001c81:	68 83 cc 00 c0       	push   $0xc000cc83
c0001c86:	e8 75 05 00 00       	call   c0002200 <put_str>
c0001c8b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/timer.c:75
}
c0001c8e:	90                   	nop
c0001c8f:	c9                   	leave  
c0001c90:	c3                   	ret    
c0001c91:	66 90                	xchg   %ax,%ax
c0001c93:	66 90                	xchg   %ax,%ax
c0001c95:	66 90                	xchg   %ax,%ax
c0001c97:	66 90                	xchg   %ax,%ax
c0001c99:	66 90                	xchg   %ax,%ax
c0001c9b:	66 90                	xchg   %ax,%ax
c0001c9d:	66 90                	xchg   %ax,%ax
c0001c9f:	90                   	nop

c0001ca0 <intr_exit>:
intr_exit():
c0001ca0:	83 c4 04             	add    $0x4,%esp
c0001ca3:	61                   	popa   
c0001ca4:	0f a9                	pop    %gs
c0001ca6:	0f a1                	pop    %fs
c0001ca8:	07                   	pop    %es
c0001ca9:	1f                   	pop    %ds
c0001caa:	83 c4 04             	add    $0x4,%esp
c0001cad:	cf                   	iret   

c0001cae <intr0x00entry>:
intr0x00entry():
c0001cae:	6a 00                	push   $0x0
c0001cb0:	1e                   	push   %ds
c0001cb1:	06                   	push   %es
c0001cb2:	0f a0                	push   %fs
c0001cb4:	0f a8                	push   %gs
c0001cb6:	60                   	pusha  
c0001cb7:	b0 20                	mov    $0x20,%al
c0001cb9:	e6 a0                	out    %al,$0xa0
c0001cbb:	e6 20                	out    %al,$0x20
c0001cbd:	6a 00                	push   $0x0
c0001cbf:	ff 15 40 1e 01 c0    	call   *0xc0011e40
c0001cc5:	eb d9                	jmp    c0001ca0 <intr_exit>

c0001cc7 <intr0x01entry>:
intr0x01entry():
c0001cc7:	6a 00                	push   $0x0
c0001cc9:	1e                   	push   %ds
c0001cca:	06                   	push   %es
c0001ccb:	0f a0                	push   %fs
c0001ccd:	0f a8                	push   %gs
c0001ccf:	60                   	pusha  
c0001cd0:	b0 20                	mov    $0x20,%al
c0001cd2:	e6 a0                	out    %al,$0xa0
c0001cd4:	e6 20                	out    %al,$0x20
c0001cd6:	6a 01                	push   $0x1
c0001cd8:	ff 15 44 1e 01 c0    	call   *0xc0011e44
c0001cde:	eb c0                	jmp    c0001ca0 <intr_exit>

c0001ce0 <intr0x02entry>:
intr0x02entry():
c0001ce0:	6a 00                	push   $0x0
c0001ce2:	1e                   	push   %ds
c0001ce3:	06                   	push   %es
c0001ce4:	0f a0                	push   %fs
c0001ce6:	0f a8                	push   %gs
c0001ce8:	60                   	pusha  
c0001ce9:	b0 20                	mov    $0x20,%al
c0001ceb:	e6 a0                	out    %al,$0xa0
c0001ced:	e6 20                	out    %al,$0x20
c0001cef:	6a 02                	push   $0x2
c0001cf1:	ff 15 48 1e 01 c0    	call   *0xc0011e48
c0001cf7:	eb a7                	jmp    c0001ca0 <intr_exit>

c0001cf9 <intr0x03entry>:
intr0x03entry():
c0001cf9:	6a 00                	push   $0x0
c0001cfb:	1e                   	push   %ds
c0001cfc:	06                   	push   %es
c0001cfd:	0f a0                	push   %fs
c0001cff:	0f a8                	push   %gs
c0001d01:	60                   	pusha  
c0001d02:	b0 20                	mov    $0x20,%al
c0001d04:	e6 a0                	out    %al,$0xa0
c0001d06:	e6 20                	out    %al,$0x20
c0001d08:	6a 03                	push   $0x3
c0001d0a:	ff 15 4c 1e 01 c0    	call   *0xc0011e4c
c0001d10:	eb 8e                	jmp    c0001ca0 <intr_exit>

c0001d12 <intr0x04entry>:
intr0x04entry():
c0001d12:	6a 00                	push   $0x0
c0001d14:	1e                   	push   %ds
c0001d15:	06                   	push   %es
c0001d16:	0f a0                	push   %fs
c0001d18:	0f a8                	push   %gs
c0001d1a:	60                   	pusha  
c0001d1b:	b0 20                	mov    $0x20,%al
c0001d1d:	e6 a0                	out    %al,$0xa0
c0001d1f:	e6 20                	out    %al,$0x20
c0001d21:	6a 04                	push   $0x4
c0001d23:	ff 15 50 1e 01 c0    	call   *0xc0011e50
c0001d29:	e9 72 ff ff ff       	jmp    c0001ca0 <intr_exit>

c0001d2e <intr0x05entry>:
intr0x05entry():
c0001d2e:	6a 00                	push   $0x0
c0001d30:	1e                   	push   %ds
c0001d31:	06                   	push   %es
c0001d32:	0f a0                	push   %fs
c0001d34:	0f a8                	push   %gs
c0001d36:	60                   	pusha  
c0001d37:	b0 20                	mov    $0x20,%al
c0001d39:	e6 a0                	out    %al,$0xa0
c0001d3b:	e6 20                	out    %al,$0x20
c0001d3d:	6a 05                	push   $0x5
c0001d3f:	ff 15 54 1e 01 c0    	call   *0xc0011e54
c0001d45:	e9 56 ff ff ff       	jmp    c0001ca0 <intr_exit>

c0001d4a <intr0x06entry>:
intr0x06entry():
c0001d4a:	6a 00                	push   $0x0
c0001d4c:	1e                   	push   %ds
c0001d4d:	06                   	push   %es
c0001d4e:	0f a0                	push   %fs
c0001d50:	0f a8                	push   %gs
c0001d52:	60                   	pusha  
c0001d53:	b0 20                	mov    $0x20,%al
c0001d55:	e6 a0                	out    %al,$0xa0
c0001d57:	e6 20                	out    %al,$0x20
c0001d59:	6a 06                	push   $0x6
c0001d5b:	ff 15 58 1e 01 c0    	call   *0xc0011e58
c0001d61:	e9 3a ff ff ff       	jmp    c0001ca0 <intr_exit>

c0001d66 <intr0x07entry>:
intr0x07entry():
c0001d66:	6a 00                	push   $0x0
c0001d68:	1e                   	push   %ds
c0001d69:	06                   	push   %es
c0001d6a:	0f a0                	push   %fs
c0001d6c:	0f a8                	push   %gs
c0001d6e:	60                   	pusha  
c0001d6f:	b0 20                	mov    $0x20,%al
c0001d71:	e6 a0                	out    %al,$0xa0
c0001d73:	e6 20                	out    %al,$0x20
c0001d75:	6a 07                	push   $0x7
c0001d77:	ff 15 5c 1e 01 c0    	call   *0xc0011e5c
c0001d7d:	e9 1e ff ff ff       	jmp    c0001ca0 <intr_exit>

c0001d82 <intr0x08entry>:
intr0x08entry():
c0001d82:	90                   	nop
c0001d83:	1e                   	push   %ds
c0001d84:	06                   	push   %es
c0001d85:	0f a0                	push   %fs
c0001d87:	0f a8                	push   %gs
c0001d89:	60                   	pusha  
c0001d8a:	b0 20                	mov    $0x20,%al
c0001d8c:	e6 a0                	out    %al,$0xa0
c0001d8e:	e6 20                	out    %al,$0x20
c0001d90:	6a 08                	push   $0x8
c0001d92:	ff 15 60 1e 01 c0    	call   *0xc0011e60
c0001d98:	e9 03 ff ff ff       	jmp    c0001ca0 <intr_exit>

c0001d9d <intr0x09entry>:
intr0x09entry():
c0001d9d:	6a 00                	push   $0x0
c0001d9f:	1e                   	push   %ds
c0001da0:	06                   	push   %es
c0001da1:	0f a0                	push   %fs
c0001da3:	0f a8                	push   %gs
c0001da5:	60                   	pusha  
c0001da6:	b0 20                	mov    $0x20,%al
c0001da8:	e6 a0                	out    %al,$0xa0
c0001daa:	e6 20                	out    %al,$0x20
c0001dac:	6a 09                	push   $0x9
c0001dae:	ff 15 64 1e 01 c0    	call   *0xc0011e64
c0001db4:	e9 e7 fe ff ff       	jmp    c0001ca0 <intr_exit>

c0001db9 <intr0x0aentry>:
intr0x0aentry():
c0001db9:	90                   	nop
c0001dba:	1e                   	push   %ds
c0001dbb:	06                   	push   %es
c0001dbc:	0f a0                	push   %fs
c0001dbe:	0f a8                	push   %gs
c0001dc0:	60                   	pusha  
c0001dc1:	b0 20                	mov    $0x20,%al
c0001dc3:	e6 a0                	out    %al,$0xa0
c0001dc5:	e6 20                	out    %al,$0x20
c0001dc7:	6a 0a                	push   $0xa
c0001dc9:	ff 15 68 1e 01 c0    	call   *0xc0011e68
c0001dcf:	e9 cc fe ff ff       	jmp    c0001ca0 <intr_exit>

c0001dd4 <intr0x0bentry>:
intr0x0bentry():
c0001dd4:	90                   	nop
c0001dd5:	1e                   	push   %ds
c0001dd6:	06                   	push   %es
c0001dd7:	0f a0                	push   %fs
c0001dd9:	0f a8                	push   %gs
c0001ddb:	60                   	pusha  
c0001ddc:	b0 20                	mov    $0x20,%al
c0001dde:	e6 a0                	out    %al,$0xa0
c0001de0:	e6 20                	out    %al,$0x20
c0001de2:	6a 0b                	push   $0xb
c0001de4:	ff 15 6c 1e 01 c0    	call   *0xc0011e6c
c0001dea:	e9 b1 fe ff ff       	jmp    c0001ca0 <intr_exit>

c0001def <intr0x0centry>:
intr0x0centry():
c0001def:	6a 00                	push   $0x0
c0001df1:	1e                   	push   %ds
c0001df2:	06                   	push   %es
c0001df3:	0f a0                	push   %fs
c0001df5:	0f a8                	push   %gs
c0001df7:	60                   	pusha  
c0001df8:	b0 20                	mov    $0x20,%al
c0001dfa:	e6 a0                	out    %al,$0xa0
c0001dfc:	e6 20                	out    %al,$0x20
c0001dfe:	6a 0c                	push   $0xc
c0001e00:	ff 15 70 1e 01 c0    	call   *0xc0011e70
c0001e06:	e9 95 fe ff ff       	jmp    c0001ca0 <intr_exit>

c0001e0b <intr0x0dentry>:
intr0x0dentry():
c0001e0b:	90                   	nop
c0001e0c:	1e                   	push   %ds
c0001e0d:	06                   	push   %es
c0001e0e:	0f a0                	push   %fs
c0001e10:	0f a8                	push   %gs
c0001e12:	60                   	pusha  
c0001e13:	b0 20                	mov    $0x20,%al
c0001e15:	e6 a0                	out    %al,$0xa0
c0001e17:	e6 20                	out    %al,$0x20
c0001e19:	6a 0d                	push   $0xd
c0001e1b:	ff 15 74 1e 01 c0    	call   *0xc0011e74
c0001e21:	e9 7a fe ff ff       	jmp    c0001ca0 <intr_exit>

c0001e26 <intr0x0eentry>:
intr0x0eentry():
c0001e26:	90                   	nop
c0001e27:	1e                   	push   %ds
c0001e28:	06                   	push   %es
c0001e29:	0f a0                	push   %fs
c0001e2b:	0f a8                	push   %gs
c0001e2d:	60                   	pusha  
c0001e2e:	b0 20                	mov    $0x20,%al
c0001e30:	e6 a0                	out    %al,$0xa0
c0001e32:	e6 20                	out    %al,$0x20
c0001e34:	6a 0e                	push   $0xe
c0001e36:	ff 15 78 1e 01 c0    	call   *0xc0011e78
c0001e3c:	e9 5f fe ff ff       	jmp    c0001ca0 <intr_exit>

c0001e41 <intr0x0fentry>:
intr0x0fentry():
c0001e41:	6a 00                	push   $0x0
c0001e43:	1e                   	push   %ds
c0001e44:	06                   	push   %es
c0001e45:	0f a0                	push   %fs
c0001e47:	0f a8                	push   %gs
c0001e49:	60                   	pusha  
c0001e4a:	b0 20                	mov    $0x20,%al
c0001e4c:	e6 a0                	out    %al,$0xa0
c0001e4e:	e6 20                	out    %al,$0x20
c0001e50:	6a 0f                	push   $0xf
c0001e52:	ff 15 7c 1e 01 c0    	call   *0xc0011e7c
c0001e58:	e9 43 fe ff ff       	jmp    c0001ca0 <intr_exit>

c0001e5d <intr0x10entry>:
intr0x10entry():
c0001e5d:	6a 00                	push   $0x0
c0001e5f:	1e                   	push   %ds
c0001e60:	06                   	push   %es
c0001e61:	0f a0                	push   %fs
c0001e63:	0f a8                	push   %gs
c0001e65:	60                   	pusha  
c0001e66:	b0 20                	mov    $0x20,%al
c0001e68:	e6 a0                	out    %al,$0xa0
c0001e6a:	e6 20                	out    %al,$0x20
c0001e6c:	6a 10                	push   $0x10
c0001e6e:	ff 15 80 1e 01 c0    	call   *0xc0011e80
c0001e74:	e9 27 fe ff ff       	jmp    c0001ca0 <intr_exit>

c0001e79 <intr0x11entry>:
intr0x11entry():
c0001e79:	90                   	nop
c0001e7a:	1e                   	push   %ds
c0001e7b:	06                   	push   %es
c0001e7c:	0f a0                	push   %fs
c0001e7e:	0f a8                	push   %gs
c0001e80:	60                   	pusha  
c0001e81:	b0 20                	mov    $0x20,%al
c0001e83:	e6 a0                	out    %al,$0xa0
c0001e85:	e6 20                	out    %al,$0x20
c0001e87:	6a 11                	push   $0x11
c0001e89:	ff 15 84 1e 01 c0    	call   *0xc0011e84
c0001e8f:	e9 0c fe ff ff       	jmp    c0001ca0 <intr_exit>

c0001e94 <intr0x12entry>:
intr0x12entry():
c0001e94:	6a 00                	push   $0x0
c0001e96:	1e                   	push   %ds
c0001e97:	06                   	push   %es
c0001e98:	0f a0                	push   %fs
c0001e9a:	0f a8                	push   %gs
c0001e9c:	60                   	pusha  
c0001e9d:	b0 20                	mov    $0x20,%al
c0001e9f:	e6 a0                	out    %al,$0xa0
c0001ea1:	e6 20                	out    %al,$0x20
c0001ea3:	6a 12                	push   $0x12
c0001ea5:	ff 15 88 1e 01 c0    	call   *0xc0011e88
c0001eab:	e9 f0 fd ff ff       	jmp    c0001ca0 <intr_exit>

c0001eb0 <intr0x13entry>:
intr0x13entry():
c0001eb0:	6a 00                	push   $0x0
c0001eb2:	1e                   	push   %ds
c0001eb3:	06                   	push   %es
c0001eb4:	0f a0                	push   %fs
c0001eb6:	0f a8                	push   %gs
c0001eb8:	60                   	pusha  
c0001eb9:	b0 20                	mov    $0x20,%al
c0001ebb:	e6 a0                	out    %al,$0xa0
c0001ebd:	e6 20                	out    %al,$0x20
c0001ebf:	6a 13                	push   $0x13
c0001ec1:	ff 15 8c 1e 01 c0    	call   *0xc0011e8c
c0001ec7:	e9 d4 fd ff ff       	jmp    c0001ca0 <intr_exit>

c0001ecc <intr0x14entry>:
intr0x14entry():
c0001ecc:	6a 00                	push   $0x0
c0001ece:	1e                   	push   %ds
c0001ecf:	06                   	push   %es
c0001ed0:	0f a0                	push   %fs
c0001ed2:	0f a8                	push   %gs
c0001ed4:	60                   	pusha  
c0001ed5:	b0 20                	mov    $0x20,%al
c0001ed7:	e6 a0                	out    %al,$0xa0
c0001ed9:	e6 20                	out    %al,$0x20
c0001edb:	6a 14                	push   $0x14
c0001edd:	ff 15 90 1e 01 c0    	call   *0xc0011e90
c0001ee3:	e9 b8 fd ff ff       	jmp    c0001ca0 <intr_exit>

c0001ee8 <intr0x15entry>:
intr0x15entry():
c0001ee8:	6a 00                	push   $0x0
c0001eea:	1e                   	push   %ds
c0001eeb:	06                   	push   %es
c0001eec:	0f a0                	push   %fs
c0001eee:	0f a8                	push   %gs
c0001ef0:	60                   	pusha  
c0001ef1:	b0 20                	mov    $0x20,%al
c0001ef3:	e6 a0                	out    %al,$0xa0
c0001ef5:	e6 20                	out    %al,$0x20
c0001ef7:	6a 15                	push   $0x15
c0001ef9:	ff 15 94 1e 01 c0    	call   *0xc0011e94
c0001eff:	e9 9c fd ff ff       	jmp    c0001ca0 <intr_exit>

c0001f04 <intr0x16entry>:
intr0x16entry():
c0001f04:	6a 00                	push   $0x0
c0001f06:	1e                   	push   %ds
c0001f07:	06                   	push   %es
c0001f08:	0f a0                	push   %fs
c0001f0a:	0f a8                	push   %gs
c0001f0c:	60                   	pusha  
c0001f0d:	b0 20                	mov    $0x20,%al
c0001f0f:	e6 a0                	out    %al,$0xa0
c0001f11:	e6 20                	out    %al,$0x20
c0001f13:	6a 16                	push   $0x16
c0001f15:	ff 15 98 1e 01 c0    	call   *0xc0011e98
c0001f1b:	e9 80 fd ff ff       	jmp    c0001ca0 <intr_exit>

c0001f20 <intr0x17entry>:
intr0x17entry():
c0001f20:	6a 00                	push   $0x0
c0001f22:	1e                   	push   %ds
c0001f23:	06                   	push   %es
c0001f24:	0f a0                	push   %fs
c0001f26:	0f a8                	push   %gs
c0001f28:	60                   	pusha  
c0001f29:	b0 20                	mov    $0x20,%al
c0001f2b:	e6 a0                	out    %al,$0xa0
c0001f2d:	e6 20                	out    %al,$0x20
c0001f2f:	6a 17                	push   $0x17
c0001f31:	ff 15 9c 1e 01 c0    	call   *0xc0011e9c
c0001f37:	e9 64 fd ff ff       	jmp    c0001ca0 <intr_exit>

c0001f3c <intr0x18entry>:
intr0x18entry():
c0001f3c:	90                   	nop
c0001f3d:	1e                   	push   %ds
c0001f3e:	06                   	push   %es
c0001f3f:	0f a0                	push   %fs
c0001f41:	0f a8                	push   %gs
c0001f43:	60                   	pusha  
c0001f44:	b0 20                	mov    $0x20,%al
c0001f46:	e6 a0                	out    %al,$0xa0
c0001f48:	e6 20                	out    %al,$0x20
c0001f4a:	6a 18                	push   $0x18
c0001f4c:	ff 15 a0 1e 01 c0    	call   *0xc0011ea0
c0001f52:	e9 49 fd ff ff       	jmp    c0001ca0 <intr_exit>

c0001f57 <intr0x19entry>:
intr0x19entry():
c0001f57:	6a 00                	push   $0x0
c0001f59:	1e                   	push   %ds
c0001f5a:	06                   	push   %es
c0001f5b:	0f a0                	push   %fs
c0001f5d:	0f a8                	push   %gs
c0001f5f:	60                   	pusha  
c0001f60:	b0 20                	mov    $0x20,%al
c0001f62:	e6 a0                	out    %al,$0xa0
c0001f64:	e6 20                	out    %al,$0x20
c0001f66:	6a 19                	push   $0x19
c0001f68:	ff 15 a4 1e 01 c0    	call   *0xc0011ea4
c0001f6e:	e9 2d fd ff ff       	jmp    c0001ca0 <intr_exit>

c0001f73 <intr0x1aentry>:
intr0x1aentry():
c0001f73:	90                   	nop
c0001f74:	1e                   	push   %ds
c0001f75:	06                   	push   %es
c0001f76:	0f a0                	push   %fs
c0001f78:	0f a8                	push   %gs
c0001f7a:	60                   	pusha  
c0001f7b:	b0 20                	mov    $0x20,%al
c0001f7d:	e6 a0                	out    %al,$0xa0
c0001f7f:	e6 20                	out    %al,$0x20
c0001f81:	6a 1a                	push   $0x1a
c0001f83:	ff 15 a8 1e 01 c0    	call   *0xc0011ea8
c0001f89:	e9 12 fd ff ff       	jmp    c0001ca0 <intr_exit>

c0001f8e <intr0x1bentry>:
intr0x1bentry():
c0001f8e:	90                   	nop
c0001f8f:	1e                   	push   %ds
c0001f90:	06                   	push   %es
c0001f91:	0f a0                	push   %fs
c0001f93:	0f a8                	push   %gs
c0001f95:	60                   	pusha  
c0001f96:	b0 20                	mov    $0x20,%al
c0001f98:	e6 a0                	out    %al,$0xa0
c0001f9a:	e6 20                	out    %al,$0x20
c0001f9c:	6a 1b                	push   $0x1b
c0001f9e:	ff 15 ac 1e 01 c0    	call   *0xc0011eac
c0001fa4:	e9 f7 fc ff ff       	jmp    c0001ca0 <intr_exit>

c0001fa9 <intr0x1centry>:
intr0x1centry():
c0001fa9:	6a 00                	push   $0x0
c0001fab:	1e                   	push   %ds
c0001fac:	06                   	push   %es
c0001fad:	0f a0                	push   %fs
c0001faf:	0f a8                	push   %gs
c0001fb1:	60                   	pusha  
c0001fb2:	b0 20                	mov    $0x20,%al
c0001fb4:	e6 a0                	out    %al,$0xa0
c0001fb6:	e6 20                	out    %al,$0x20
c0001fb8:	6a 1c                	push   $0x1c
c0001fba:	ff 15 b0 1e 01 c0    	call   *0xc0011eb0
c0001fc0:	e9 db fc ff ff       	jmp    c0001ca0 <intr_exit>

c0001fc5 <intr0x1dentry>:
intr0x1dentry():
c0001fc5:	90                   	nop
c0001fc6:	1e                   	push   %ds
c0001fc7:	06                   	push   %es
c0001fc8:	0f a0                	push   %fs
c0001fca:	0f a8                	push   %gs
c0001fcc:	60                   	pusha  
c0001fcd:	b0 20                	mov    $0x20,%al
c0001fcf:	e6 a0                	out    %al,$0xa0
c0001fd1:	e6 20                	out    %al,$0x20
c0001fd3:	6a 1d                	push   $0x1d
c0001fd5:	ff 15 b4 1e 01 c0    	call   *0xc0011eb4
c0001fdb:	e9 c0 fc ff ff       	jmp    c0001ca0 <intr_exit>

c0001fe0 <intr0x1eentry>:
intr0x1eentry():
c0001fe0:	90                   	nop
c0001fe1:	1e                   	push   %ds
c0001fe2:	06                   	push   %es
c0001fe3:	0f a0                	push   %fs
c0001fe5:	0f a8                	push   %gs
c0001fe7:	60                   	pusha  
c0001fe8:	b0 20                	mov    $0x20,%al
c0001fea:	e6 a0                	out    %al,$0xa0
c0001fec:	e6 20                	out    %al,$0x20
c0001fee:	6a 1e                	push   $0x1e
c0001ff0:	ff 15 b8 1e 01 c0    	call   *0xc0011eb8
c0001ff6:	e9 a5 fc ff ff       	jmp    c0001ca0 <intr_exit>

c0001ffb <intr0x1fentry>:
intr0x1fentry():
c0001ffb:	6a 00                	push   $0x0
c0001ffd:	1e                   	push   %ds
c0001ffe:	06                   	push   %es
c0001fff:	0f a0                	push   %fs
c0002001:	0f a8                	push   %gs
c0002003:	60                   	pusha  
c0002004:	b0 20                	mov    $0x20,%al
c0002006:	e6 a0                	out    %al,$0xa0
c0002008:	e6 20                	out    %al,$0x20
c000200a:	6a 1f                	push   $0x1f
c000200c:	ff 15 bc 1e 01 c0    	call   *0xc0011ebc
c0002012:	e9 89 fc ff ff       	jmp    c0001ca0 <intr_exit>

c0002017 <intr0x20entry>:
intr0x20entry():
c0002017:	6a 00                	push   $0x0
c0002019:	1e                   	push   %ds
c000201a:	06                   	push   %es
c000201b:	0f a0                	push   %fs
c000201d:	0f a8                	push   %gs
c000201f:	60                   	pusha  
c0002020:	b0 20                	mov    $0x20,%al
c0002022:	e6 a0                	out    %al,$0xa0
c0002024:	e6 20                	out    %al,$0x20
c0002026:	6a 20                	push   $0x20
c0002028:	ff 15 c0 1e 01 c0    	call   *0xc0011ec0
c000202e:	e9 6d fc ff ff       	jmp    c0001ca0 <intr_exit>

c0002033 <intr0x21entry>:
intr0x21entry():
c0002033:	6a 00                	push   $0x0
c0002035:	1e                   	push   %ds
c0002036:	06                   	push   %es
c0002037:	0f a0                	push   %fs
c0002039:	0f a8                	push   %gs
c000203b:	60                   	pusha  
c000203c:	b0 20                	mov    $0x20,%al
c000203e:	e6 a0                	out    %al,$0xa0
c0002040:	e6 20                	out    %al,$0x20
c0002042:	6a 21                	push   $0x21
c0002044:	ff 15 c4 1e 01 c0    	call   *0xc0011ec4
c000204a:	e9 51 fc ff ff       	jmp    c0001ca0 <intr_exit>

c000204f <intr0x22entry>:
intr0x22entry():
c000204f:	6a 00                	push   $0x0
c0002051:	1e                   	push   %ds
c0002052:	06                   	push   %es
c0002053:	0f a0                	push   %fs
c0002055:	0f a8                	push   %gs
c0002057:	60                   	pusha  
c0002058:	b0 20                	mov    $0x20,%al
c000205a:	e6 a0                	out    %al,$0xa0
c000205c:	e6 20                	out    %al,$0x20
c000205e:	6a 22                	push   $0x22
c0002060:	ff 15 c8 1e 01 c0    	call   *0xc0011ec8
c0002066:	e9 35 fc ff ff       	jmp    c0001ca0 <intr_exit>

c000206b <intr0x23entry>:
intr0x23entry():
c000206b:	6a 00                	push   $0x0
c000206d:	1e                   	push   %ds
c000206e:	06                   	push   %es
c000206f:	0f a0                	push   %fs
c0002071:	0f a8                	push   %gs
c0002073:	60                   	pusha  
c0002074:	b0 20                	mov    $0x20,%al
c0002076:	e6 a0                	out    %al,$0xa0
c0002078:	e6 20                	out    %al,$0x20
c000207a:	6a 23                	push   $0x23
c000207c:	ff 15 cc 1e 01 c0    	call   *0xc0011ecc
c0002082:	e9 19 fc ff ff       	jmp    c0001ca0 <intr_exit>

c0002087 <intr0x24entry>:
intr0x24entry():
c0002087:	6a 00                	push   $0x0
c0002089:	1e                   	push   %ds
c000208a:	06                   	push   %es
c000208b:	0f a0                	push   %fs
c000208d:	0f a8                	push   %gs
c000208f:	60                   	pusha  
c0002090:	b0 20                	mov    $0x20,%al
c0002092:	e6 a0                	out    %al,$0xa0
c0002094:	e6 20                	out    %al,$0x20
c0002096:	6a 24                	push   $0x24
c0002098:	ff 15 d0 1e 01 c0    	call   *0xc0011ed0
c000209e:	e9 fd fb ff ff       	jmp    c0001ca0 <intr_exit>

c00020a3 <intr0x25entry>:
intr0x25entry():
c00020a3:	6a 00                	push   $0x0
c00020a5:	1e                   	push   %ds
c00020a6:	06                   	push   %es
c00020a7:	0f a0                	push   %fs
c00020a9:	0f a8                	push   %gs
c00020ab:	60                   	pusha  
c00020ac:	b0 20                	mov    $0x20,%al
c00020ae:	e6 a0                	out    %al,$0xa0
c00020b0:	e6 20                	out    %al,$0x20
c00020b2:	6a 25                	push   $0x25
c00020b4:	ff 15 d4 1e 01 c0    	call   *0xc0011ed4
c00020ba:	e9 e1 fb ff ff       	jmp    c0001ca0 <intr_exit>

c00020bf <intr0x26entry>:
intr0x26entry():
c00020bf:	6a 00                	push   $0x0
c00020c1:	1e                   	push   %ds
c00020c2:	06                   	push   %es
c00020c3:	0f a0                	push   %fs
c00020c5:	0f a8                	push   %gs
c00020c7:	60                   	pusha  
c00020c8:	b0 20                	mov    $0x20,%al
c00020ca:	e6 a0                	out    %al,$0xa0
c00020cc:	e6 20                	out    %al,$0x20
c00020ce:	6a 26                	push   $0x26
c00020d0:	ff 15 d8 1e 01 c0    	call   *0xc0011ed8
c00020d6:	e9 c5 fb ff ff       	jmp    c0001ca0 <intr_exit>

c00020db <intr0x27entry>:
intr0x27entry():
c00020db:	6a 00                	push   $0x0
c00020dd:	1e                   	push   %ds
c00020de:	06                   	push   %es
c00020df:	0f a0                	push   %fs
c00020e1:	0f a8                	push   %gs
c00020e3:	60                   	pusha  
c00020e4:	b0 20                	mov    $0x20,%al
c00020e6:	e6 a0                	out    %al,$0xa0
c00020e8:	e6 20                	out    %al,$0x20
c00020ea:	6a 27                	push   $0x27
c00020ec:	ff 15 dc 1e 01 c0    	call   *0xc0011edc
c00020f2:	e9 a9 fb ff ff       	jmp    c0001ca0 <intr_exit>

c00020f7 <intr0x28entry>:
intr0x28entry():
c00020f7:	6a 00                	push   $0x0
c00020f9:	1e                   	push   %ds
c00020fa:	06                   	push   %es
c00020fb:	0f a0                	push   %fs
c00020fd:	0f a8                	push   %gs
c00020ff:	60                   	pusha  
c0002100:	b0 20                	mov    $0x20,%al
c0002102:	e6 a0                	out    %al,$0xa0
c0002104:	e6 20                	out    %al,$0x20
c0002106:	6a 28                	push   $0x28
c0002108:	ff 15 e0 1e 01 c0    	call   *0xc0011ee0
c000210e:	e9 8d fb ff ff       	jmp    c0001ca0 <intr_exit>

c0002113 <intr0x29entry>:
intr0x29entry():
c0002113:	6a 00                	push   $0x0
c0002115:	1e                   	push   %ds
c0002116:	06                   	push   %es
c0002117:	0f a0                	push   %fs
c0002119:	0f a8                	push   %gs
c000211b:	60                   	pusha  
c000211c:	b0 20                	mov    $0x20,%al
c000211e:	e6 a0                	out    %al,$0xa0
c0002120:	e6 20                	out    %al,$0x20
c0002122:	6a 29                	push   $0x29
c0002124:	ff 15 e4 1e 01 c0    	call   *0xc0011ee4
c000212a:	e9 71 fb ff ff       	jmp    c0001ca0 <intr_exit>

c000212f <intr0x2aentry>:
intr0x2aentry():
c000212f:	6a 00                	push   $0x0
c0002131:	1e                   	push   %ds
c0002132:	06                   	push   %es
c0002133:	0f a0                	push   %fs
c0002135:	0f a8                	push   %gs
c0002137:	60                   	pusha  
c0002138:	b0 20                	mov    $0x20,%al
c000213a:	e6 a0                	out    %al,$0xa0
c000213c:	e6 20                	out    %al,$0x20
c000213e:	6a 2a                	push   $0x2a
c0002140:	ff 15 e8 1e 01 c0    	call   *0xc0011ee8
c0002146:	e9 55 fb ff ff       	jmp    c0001ca0 <intr_exit>

c000214b <intr0x2bentry>:
intr0x2bentry():
c000214b:	6a 00                	push   $0x0
c000214d:	1e                   	push   %ds
c000214e:	06                   	push   %es
c000214f:	0f a0                	push   %fs
c0002151:	0f a8                	push   %gs
c0002153:	60                   	pusha  
c0002154:	b0 20                	mov    $0x20,%al
c0002156:	e6 a0                	out    %al,$0xa0
c0002158:	e6 20                	out    %al,$0x20
c000215a:	6a 2b                	push   $0x2b
c000215c:	ff 15 ec 1e 01 c0    	call   *0xc0011eec
c0002162:	e9 39 fb ff ff       	jmp    c0001ca0 <intr_exit>

c0002167 <intr0x2centry>:
intr0x2centry():
c0002167:	6a 00                	push   $0x0
c0002169:	1e                   	push   %ds
c000216a:	06                   	push   %es
c000216b:	0f a0                	push   %fs
c000216d:	0f a8                	push   %gs
c000216f:	60                   	pusha  
c0002170:	b0 20                	mov    $0x20,%al
c0002172:	e6 a0                	out    %al,$0xa0
c0002174:	e6 20                	out    %al,$0x20
c0002176:	6a 2c                	push   $0x2c
c0002178:	ff 15 f0 1e 01 c0    	call   *0xc0011ef0
c000217e:	e9 1d fb ff ff       	jmp    c0001ca0 <intr_exit>

c0002183 <intr0x2dentry>:
intr0x2dentry():
c0002183:	6a 00                	push   $0x0
c0002185:	1e                   	push   %ds
c0002186:	06                   	push   %es
c0002187:	0f a0                	push   %fs
c0002189:	0f a8                	push   %gs
c000218b:	60                   	pusha  
c000218c:	b0 20                	mov    $0x20,%al
c000218e:	e6 a0                	out    %al,$0xa0
c0002190:	e6 20                	out    %al,$0x20
c0002192:	6a 2d                	push   $0x2d
c0002194:	ff 15 f4 1e 01 c0    	call   *0xc0011ef4
c000219a:	e9 01 fb ff ff       	jmp    c0001ca0 <intr_exit>

c000219f <intr0x2eentry>:
intr0x2eentry():
c000219f:	6a 00                	push   $0x0
c00021a1:	1e                   	push   %ds
c00021a2:	06                   	push   %es
c00021a3:	0f a0                	push   %fs
c00021a5:	0f a8                	push   %gs
c00021a7:	60                   	pusha  
c00021a8:	b0 20                	mov    $0x20,%al
c00021aa:	e6 a0                	out    %al,$0xa0
c00021ac:	e6 20                	out    %al,$0x20
c00021ae:	6a 2e                	push   $0x2e
c00021b0:	ff 15 f8 1e 01 c0    	call   *0xc0011ef8
c00021b6:	e9 e5 fa ff ff       	jmp    c0001ca0 <intr_exit>

c00021bb <intr0x2fentry>:
intr0x2fentry():
c00021bb:	6a 00                	push   $0x0
c00021bd:	1e                   	push   %ds
c00021be:	06                   	push   %es
c00021bf:	0f a0                	push   %fs
c00021c1:	0f a8                	push   %gs
c00021c3:	60                   	pusha  
c00021c4:	b0 20                	mov    $0x20,%al
c00021c6:	e6 a0                	out    %al,$0xa0
c00021c8:	e6 20                	out    %al,$0x20
c00021ca:	6a 2f                	push   $0x2f
c00021cc:	ff 15 fc 1e 01 c0    	call   *0xc0011efc
c00021d2:	e9 c9 fa ff ff       	jmp    c0001ca0 <intr_exit>

c00021d7 <syscall_handler>:
syscall_handler():
c00021d7:	6a 00                	push   $0x0
c00021d9:	1e                   	push   %ds
c00021da:	06                   	push   %es
c00021db:	0f a0                	push   %fs
c00021dd:	0f a8                	push   %gs
c00021df:	60                   	pusha  
c00021e0:	68 80 00 00 00       	push   $0x80
c00021e5:	52                   	push   %edx
c00021e6:	51                   	push   %ecx
c00021e7:	53                   	push   %ebx
c00021e8:	ff 14 85 60 22 01 c0 	call   *-0x3ffedda0(,%eax,4)
c00021ef:	83 c4 0c             	add    $0xc,%esp
c00021f2:	89 44 24 20          	mov    %eax,0x20(%esp)
c00021f6:	e9 a5 fa ff ff       	jmp    c0001ca0 <intr_exit>
c00021fb:	66 90                	xchg   %ax,%ax
c00021fd:	66 90                	xchg   %ax,%ax
c00021ff:	90                   	nop

c0002200 <put_str>:
put_str():
c0002200:	53                   	push   %ebx
c0002201:	51                   	push   %ecx
c0002202:	31 c9                	xor    %ecx,%ecx
c0002204:	8b 5c 24 0c          	mov    0xc(%esp),%ebx

c0002208 <put_str.goon>:
put_str.goon():
c0002208:	8a 0b                	mov    (%ebx),%cl
c000220a:	80 f9 00             	cmp    $0x0,%cl
c000220d:	74 0c                	je     c000221b <put_str.str_over>
c000220f:	51                   	push   %ecx
c0002210:	e8 09 00 00 00       	call   c000221e <put_char>
c0002215:	83 c4 04             	add    $0x4,%esp
c0002218:	43                   	inc    %ebx
c0002219:	eb ed                	jmp    c0002208 <put_str.goon>

c000221b <put_str.str_over>:
put_str.str_over():
c000221b:	59                   	pop    %ecx
c000221c:	5b                   	pop    %ebx
c000221d:	c3                   	ret    

c000221e <put_char>:
put_char():
c000221e:	60                   	pusha  
c000221f:	66 b8 18 00          	mov    $0x18,%ax
c0002223:	8e e8                	mov    %eax,%gs
c0002225:	66 ba d4 03          	mov    $0x3d4,%dx
c0002229:	b0 0e                	mov    $0xe,%al
c000222b:	ee                   	out    %al,(%dx)
c000222c:	66 ba d5 03          	mov    $0x3d5,%dx
c0002230:	ec                   	in     (%dx),%al
c0002231:	88 c4                	mov    %al,%ah
c0002233:	66 ba d4 03          	mov    $0x3d4,%dx
c0002237:	b0 0f                	mov    $0xf,%al
c0002239:	ee                   	out    %al,(%dx)
c000223a:	66 ba d5 03          	mov    $0x3d5,%dx
c000223e:	ec                   	in     (%dx),%al
c000223f:	66 89 c3             	mov    %ax,%bx
c0002242:	8b 4c 24 24          	mov    0x24(%esp),%ecx
c0002246:	80 f9 0d             	cmp    $0xd,%cl
c0002249:	74 3c                	je     c0002287 <put_char.is_carriage_return>
c000224b:	80 f9 0a             	cmp    $0xa,%cl
c000224e:	74 37                	je     c0002287 <put_char.is_carriage_return>
c0002250:	80 f9 08             	cmp    $0x8,%cl
c0002253:	74 02                	je     c0002257 <put_char.is_backspace>
c0002255:	eb 16                	jmp    c000226d <put_char.put_other>

c0002257 <put_char.is_backspace>:
put_char.is_backspace():
c0002257:	66 4b                	dec    %bx
c0002259:	66 d1 e3             	shl    %bx
c000225c:	65 67 c6 07 20       	movb   $0x20,%gs:(%bx)
c0002261:	66 43                	inc    %bx
c0002263:	65 67 c6 07 07       	movb   $0x7,%gs:(%bx)
c0002268:	66 d1 eb             	shr    %bx
c000226b:	eb 60                	jmp    c00022cd <put_char.set_cursor>

c000226d <put_char.put_other>:
put_char.put_other():
c000226d:	66 d1 e3             	shl    %bx
c0002270:	65 67 88 0f          	mov    %cl,%gs:(%bx)
c0002274:	66 43                	inc    %bx
c0002276:	65 67 c6 07 07       	movb   $0x7,%gs:(%bx)
c000227b:	66 d1 eb             	shr    %bx
c000227e:	66 43                	inc    %bx
c0002280:	66 81 fb d0 07       	cmp    $0x7d0,%bx
c0002285:	7c 46                	jl     c00022cd <put_char.set_cursor>

c0002287 <put_char.is_carriage_return>:
put_char.is_line_feed():
c0002287:	66 31 d2             	xor    %dx,%dx
c000228a:	66 89 d8             	mov    %bx,%ax
c000228d:	66 be 50 00          	mov    $0x50,%si
c0002291:	66 f7 f6             	div    %si
c0002294:	66 29 d3             	sub    %dx,%bx

c0002297 <put_char.is_carriage_return_end>:
put_char.is_carriage_return_end():
c0002297:	66 83 c3 50          	add    $0x50,%bx
c000229b:	66 81 fb d0 07       	cmp    $0x7d0,%bx

c00022a0 <put_char.is_line_feed_end>:
put_char.is_line_feed_end():
c00022a0:	7c 2b                	jl     c00022cd <put_char.set_cursor>

c00022a2 <put_char.roll_screen>:
put_char.roll_screen():
c00022a2:	fc                   	cld    
c00022a3:	b9 c0 03 00 00       	mov    $0x3c0,%ecx
c00022a8:	be a0 80 0b c0       	mov    $0xc00b80a0,%esi
c00022ad:	bf 00 80 0b c0       	mov    $0xc00b8000,%edi
c00022b2:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c00022b4:	bb 00 0f 00 00       	mov    $0xf00,%ebx
c00022b9:	b9 50 00 00 00       	mov    $0x50,%ecx

c00022be <put_char.cls>:
put_char.cls():
c00022be:	65 66 c7 03 20 07    	movw   $0x720,%gs:(%ebx)
c00022c4:	83 c3 02             	add    $0x2,%ebx
c00022c7:	e2 f5                	loop   c00022be <put_char.cls>
c00022c9:	66 bb 80 07          	mov    $0x780,%bx

c00022cd <put_char.set_cursor>:
put_char.set_cursor():
c00022cd:	66 ba d4 03          	mov    $0x3d4,%dx
c00022d1:	b0 0e                	mov    $0xe,%al
c00022d3:	ee                   	out    %al,(%dx)
c00022d4:	66 ba d5 03          	mov    $0x3d5,%dx
c00022d8:	88 f8                	mov    %bh,%al
c00022da:	ee                   	out    %al,(%dx)
c00022db:	66 ba d4 03          	mov    $0x3d4,%dx
c00022df:	b0 0f                	mov    $0xf,%al
c00022e1:	ee                   	out    %al,(%dx)
c00022e2:	66 ba d5 03          	mov    $0x3d5,%dx
c00022e6:	88 d8                	mov    %bl,%al
c00022e8:	ee                   	out    %al,(%dx)

c00022e9 <put_char.put_char_done>:
put_char.put_char_done():
c00022e9:	61                   	popa   
c00022ea:	c3                   	ret    

c00022eb <cls_screen>:
cls_screen():
c00022eb:	60                   	pusha  
c00022ec:	66 b8 18 00          	mov    $0x18,%ax
c00022f0:	8e e8                	mov    %eax,%gs
c00022f2:	bb 00 00 00 00       	mov    $0x0,%ebx
c00022f7:	b9 d0 07 00 00       	mov    $0x7d0,%ecx

c00022fc <cls_screen.cls>:
cls_screen.cls():
c00022fc:	65 66 c7 03 20 07    	movw   $0x720,%gs:(%ebx)
c0002302:	83 c3 02             	add    $0x2,%ebx
c0002305:	e2 f5                	loop   c00022fc <cls_screen.cls>
c0002307:	bb 00 00 00 00       	mov    $0x0,%ebx

c000230c <cls_screen.set_cursor>:
cls_screen.set_cursor():
c000230c:	66 ba d4 03          	mov    $0x3d4,%dx
c0002310:	b0 0e                	mov    $0xe,%al
c0002312:	ee                   	out    %al,(%dx)
c0002313:	66 ba d5 03          	mov    $0x3d5,%dx
c0002317:	88 f8                	mov    %bh,%al
c0002319:	ee                   	out    %al,(%dx)
c000231a:	66 ba d4 03          	mov    $0x3d4,%dx
c000231e:	b0 0f                	mov    $0xf,%al
c0002320:	ee                   	out    %al,(%dx)
c0002321:	66 ba d5 03          	mov    $0x3d5,%dx
c0002325:	88 d8                	mov    %bl,%al
c0002327:	ee                   	out    %al,(%dx)
c0002328:	61                   	popa   
c0002329:	c3                   	ret    

c000232a <put_int>:
put_int():
c000232a:	60                   	pusha  
c000232b:	89 e5                	mov    %esp,%ebp
c000232d:	8b 45 24             	mov    0x24(%ebp),%eax
c0002330:	89 c2                	mov    %eax,%edx
c0002332:	bf 07 00 00 00       	mov    $0x7,%edi
c0002337:	b9 08 00 00 00       	mov    $0x8,%ecx
c000233c:	bb c0 10 01 c0       	mov    $0xc00110c0,%ebx

c0002341 <put_int.16based_4bits>:
put_int.16based_4bits():
c0002341:	83 e2 0f             	and    $0xf,%edx
c0002344:	83 fa 09             	cmp    $0x9,%edx
c0002347:	7f 05                	jg     c000234e <put_int.is_A2F>
c0002349:	83 c2 30             	add    $0x30,%edx
c000234c:	eb 06                	jmp    c0002354 <put_int.store>

c000234e <put_int.is_A2F>:
put_int.is_A2F():
c000234e:	83 ea 0a             	sub    $0xa,%edx
c0002351:	83 c2 41             	add    $0x41,%edx

c0002354 <put_int.store>:
put_int.store():
c0002354:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
c0002357:	4f                   	dec    %edi
c0002358:	c1 e8 04             	shr    $0x4,%eax
c000235b:	89 c2                	mov    %eax,%edx
c000235d:	e2 e2                	loop   c0002341 <put_int.16based_4bits>

c000235f <put_int.ready_to_print>:
put_int.ready_to_print():
c000235f:	47                   	inc    %edi

c0002360 <put_int.skip_prefix_0>:
put_int.skip_prefix_0():
c0002360:	83 ff 08             	cmp    $0x8,%edi
c0002363:	74 0f                	je     c0002374 <put_int.full0>

c0002365 <put_int.go_on_skip>:
put_int.go_on_skip():
c0002365:	8a 8f c0 10 01 c0    	mov    -0x3ffeef40(%edi),%cl
c000236b:	47                   	inc    %edi
c000236c:	80 f9 30             	cmp    $0x30,%cl
c000236f:	74 ef                	je     c0002360 <put_int.skip_prefix_0>
c0002371:	4f                   	dec    %edi
c0002372:	eb 02                	jmp    c0002376 <put_int.put_each_num>

c0002374 <put_int.full0>:
put_int.full0():
c0002374:	b1 30                	mov    $0x30,%cl

c0002376 <put_int.put_each_num>:
put_int.put_each_num():
c0002376:	51                   	push   %ecx
c0002377:	e8 a2 fe ff ff       	call   c000221e <put_char>
c000237c:	83 c4 04             	add    $0x4,%esp
c000237f:	47                   	inc    %edi
c0002380:	8a 8f c0 10 01 c0    	mov    -0x3ffeef40(%edi),%cl
c0002386:	83 ff 08             	cmp    $0x8,%edi
c0002389:	7c eb                	jl     c0002376 <put_int.put_each_num>
c000238b:	61                   	popa   
c000238c:	c3                   	ret    

c000238d <set_cursor>:
set_cursor():
c000238d:	60                   	pusha  
c000238e:	66 8b 5c 24 24       	mov    0x24(%esp),%bx
c0002393:	66 ba d4 03          	mov    $0x3d4,%dx
c0002397:	b0 0e                	mov    $0xe,%al
c0002399:	ee                   	out    %al,(%dx)
c000239a:	66 ba d5 03          	mov    $0x3d5,%dx
c000239e:	88 f8                	mov    %bh,%al
c00023a0:	ee                   	out    %al,(%dx)
c00023a1:	66 ba d4 03          	mov    $0x3d4,%dx
c00023a5:	b0 0f                	mov    $0xf,%al
c00023a7:	ee                   	out    %al,(%dx)
c00023a8:	66 ba d5 03          	mov    $0x3d5,%dx
c00023ac:	88 d8                	mov    %bl,%al
c00023ae:	ee                   	out    %al,(%dx)
c00023af:	61                   	popa   
c00023b0:	c3                   	ret    

c00023b1 <panic_spin>:
panic_spin():
/work/x86_os_my/kernel/debug.c:10
/* 打印文件名,行号,函数名,条件并使程序悬停 */
void panic_spin(char* filename,	       \
	        int line,	       \
		const char* func,      \
		const char* condition) \
{
c00023b1:	55                   	push   %ebp
c00023b2:	89 e5                	mov    %esp,%ebp
c00023b4:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/kernel/debug.c:11
   intr_disable();	// 因为有时候会单独调用panic_spin,所以在此处关中断。
c00023b7:	e8 0d f6 ff ff       	call   c00019c9 <intr_disable>
/work/x86_os_my/kernel/debug.c:12
   put_str("\n\n\n!!!!! error !!!!!\n");
c00023bc:	83 ec 0c             	sub    $0xc,%esp
c00023bf:	68 b4 cc 00 c0       	push   $0xc000ccb4
c00023c4:	e8 37 fe ff ff       	call   c0002200 <put_str>
c00023c9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/debug.c:13
   put_str("filename:");put_str(filename);put_str("\n");
c00023cc:	83 ec 0c             	sub    $0xc,%esp
c00023cf:	68 ca cc 00 c0       	push   $0xc000ccca
c00023d4:	e8 27 fe ff ff       	call   c0002200 <put_str>
c00023d9:	83 c4 10             	add    $0x10,%esp
c00023dc:	83 ec 0c             	sub    $0xc,%esp
c00023df:	ff 75 08             	pushl  0x8(%ebp)
c00023e2:	e8 19 fe ff ff       	call   c0002200 <put_str>
c00023e7:	83 c4 10             	add    $0x10,%esp
c00023ea:	83 ec 0c             	sub    $0xc,%esp
c00023ed:	68 d4 cc 00 c0       	push   $0xc000ccd4
c00023f2:	e8 09 fe ff ff       	call   c0002200 <put_str>
c00023f7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/debug.c:14
   put_str("line:0x");put_int(line);put_str("\n");
c00023fa:	83 ec 0c             	sub    $0xc,%esp
c00023fd:	68 d6 cc 00 c0       	push   $0xc000ccd6
c0002402:	e8 f9 fd ff ff       	call   c0002200 <put_str>
c0002407:	83 c4 10             	add    $0x10,%esp
c000240a:	8b 45 0c             	mov    0xc(%ebp),%eax
c000240d:	83 ec 0c             	sub    $0xc,%esp
c0002410:	50                   	push   %eax
c0002411:	e8 14 ff ff ff       	call   c000232a <put_int>
c0002416:	83 c4 10             	add    $0x10,%esp
c0002419:	83 ec 0c             	sub    $0xc,%esp
c000241c:	68 d4 cc 00 c0       	push   $0xc000ccd4
c0002421:	e8 da fd ff ff       	call   c0002200 <put_str>
c0002426:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/debug.c:15
   put_str("function:");put_str((char*)func);put_str("\n");
c0002429:	83 ec 0c             	sub    $0xc,%esp
c000242c:	68 de cc 00 c0       	push   $0xc000ccde
c0002431:	e8 ca fd ff ff       	call   c0002200 <put_str>
c0002436:	83 c4 10             	add    $0x10,%esp
c0002439:	83 ec 0c             	sub    $0xc,%esp
c000243c:	ff 75 10             	pushl  0x10(%ebp)
c000243f:	e8 bc fd ff ff       	call   c0002200 <put_str>
c0002444:	83 c4 10             	add    $0x10,%esp
c0002447:	83 ec 0c             	sub    $0xc,%esp
c000244a:	68 d4 cc 00 c0       	push   $0xc000ccd4
c000244f:	e8 ac fd ff ff       	call   c0002200 <put_str>
c0002454:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/debug.c:16
   put_str("condition:");put_str((char*)condition);put_str("\n");
c0002457:	83 ec 0c             	sub    $0xc,%esp
c000245a:	68 e8 cc 00 c0       	push   $0xc000cce8
c000245f:	e8 9c fd ff ff       	call   c0002200 <put_str>
c0002464:	83 c4 10             	add    $0x10,%esp
c0002467:	83 ec 0c             	sub    $0xc,%esp
c000246a:	ff 75 14             	pushl  0x14(%ebp)
c000246d:	e8 8e fd ff ff       	call   c0002200 <put_str>
c0002472:	83 c4 10             	add    $0x10,%esp
c0002475:	83 ec 0c             	sub    $0xc,%esp
c0002478:	68 d4 cc 00 c0       	push   $0xc000ccd4
c000247d:	e8 7e fd ff ff       	call   c0002200 <put_str>
c0002482:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/debug.c:17 (discriminator 1)
   while(1);
c0002485:	eb fe                	jmp    c0002485 <panic_spin+0xd4>

c0002487 <bitmap_init>:
bitmap_init():
/work/x86_os_my/lib/kernel/bitmap.c:16
	uint8_t* bits;				位图空间
};
*/

/* 将位图btmp初始化 */
void bitmap_init(struct bitmap* btmp) {
c0002487:	55                   	push   %ebp
c0002488:	89 e5                	mov    %esp,%ebp
c000248a:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/lib/kernel/bitmap.c:17
	memset(btmp->bits, 0, btmp->btmp_bytes_len);   
c000248d:	8b 45 08             	mov    0x8(%ebp),%eax
c0002490:	8b 10                	mov    (%eax),%edx
c0002492:	8b 45 08             	mov    0x8(%ebp),%eax
c0002495:	8b 40 04             	mov    0x4(%eax),%eax
c0002498:	83 ec 04             	sub    $0x4,%esp
c000249b:	52                   	push   %edx
c000249c:	6a 00                	push   $0x0
c000249e:	50                   	push   %eax
c000249f:	e8 af 13 00 00       	call   c0003853 <memset>
c00024a4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/bitmap.c:18
}
c00024a7:	90                   	nop
c00024a8:	c9                   	leave  
c00024a9:	c3                   	ret    

c00024aa <bitmap_scan_test>:
bitmap_scan_test():
/work/x86_os_my/lib/kernel/bitmap.c:23

/* 判断bit_idx位是否为1
若为1则返回true
否则返回false */
bool bitmap_scan_test(struct bitmap* btmp, uint32_t bit_idx) {
c00024aa:	55                   	push   %ebp
c00024ab:	89 e5                	mov    %esp,%ebp
c00024ad:	53                   	push   %ebx
c00024ae:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/kernel/bitmap.c:24
	uint32_t byte_idx = bit_idx / 8;    // 向下取整用于索引数组下标
c00024b1:	8b 45 0c             	mov    0xc(%ebp),%eax
c00024b4:	c1 e8 03             	shr    $0x3,%eax
c00024b7:	89 45 f8             	mov    %eax,-0x8(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:25
	uint32_t bit_odd  = bit_idx % 8;    // 取余用于索引数组内的位
c00024ba:	8b 45 0c             	mov    0xc(%ebp),%eax
c00024bd:	83 e0 07             	and    $0x7,%eax
c00024c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:26
	return (btmp->bits[byte_idx] & (BITMAP_MASK << bit_odd));
c00024c3:	8b 45 08             	mov    0x8(%ebp),%eax
c00024c6:	8b 50 04             	mov    0x4(%eax),%edx
c00024c9:	8b 45 f8             	mov    -0x8(%ebp),%eax
c00024cc:	01 d0                	add    %edx,%eax
c00024ce:	0f b6 00             	movzbl (%eax),%eax
c00024d1:	0f b6 d0             	movzbl %al,%edx
c00024d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00024d7:	bb 01 00 00 00       	mov    $0x1,%ebx
c00024dc:	89 c1                	mov    %eax,%ecx
c00024de:	d3 e3                	shl    %cl,%ebx
c00024e0:	89 d8                	mov    %ebx,%eax
c00024e2:	21 d0                	and    %edx,%eax
/work/x86_os_my/lib/kernel/bitmap.c:27
}
c00024e4:	83 c4 10             	add    $0x10,%esp
c00024e7:	5b                   	pop    %ebx
c00024e8:	5d                   	pop    %ebp
c00024e9:	c3                   	ret    

c00024ea <bitmap_scan>:
bitmap_scan():
/work/x86_os_my/lib/kernel/bitmap.c:32

/* 在位图中申请连续cnt个位
成功：返回其起始位下标
失败：返回-1 */
int bitmap_scan(struct bitmap* btmp, uint32_t cnt) {
c00024ea:	55                   	push   %ebp
c00024eb:	89 e5                	mov    %esp,%ebp
c00024ed:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/lib/kernel/bitmap.c:33
	uint32_t idx_byte = 0;	 // 用于记录空闲位所在的字节
c00024f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:35
	/* 先逐字节比较,蛮力法 */
	while (( 0xff == btmp->bits[idx_byte]) && (idx_byte < btmp->btmp_bytes_len)) {
c00024f7:	eb 04                	jmp    c00024fd <bitmap_scan+0x13>
/work/x86_os_my/lib/kernel/bitmap.c:37
		/* 1表示该位已分配,所以若为0xff,则表示该字节内已无空闲位,向下一字节继续找 */
		idx_byte++;
c00024f9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:35
成功：返回其起始位下标
失败：返回-1 */
int bitmap_scan(struct bitmap* btmp, uint32_t cnt) {
	uint32_t idx_byte = 0;	 // 用于记录空闲位所在的字节
	/* 先逐字节比较,蛮力法 */
	while (( 0xff == btmp->bits[idx_byte]) && (idx_byte < btmp->btmp_bytes_len)) {
c00024fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0002500:	8b 50 04             	mov    0x4(%eax),%edx
c0002503:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002506:	01 d0                	add    %edx,%eax
c0002508:	0f b6 00             	movzbl (%eax),%eax
c000250b:	3c ff                	cmp    $0xff,%al
c000250d:	75 0a                	jne    c0002519 <bitmap_scan+0x2f>
/work/x86_os_my/lib/kernel/bitmap.c:35 (discriminator 1)
c000250f:	8b 45 08             	mov    0x8(%ebp),%eax
c0002512:	8b 00                	mov    (%eax),%eax
c0002514:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0002517:	77 e0                	ja     c00024f9 <bitmap_scan+0xf>
/work/x86_os_my/lib/kernel/bitmap.c:39
		/* 1表示该位已分配,所以若为0xff,则表示该字节内已无空闲位,向下一字节继续找 */
		idx_byte++;
	}
	ASSERT(idx_byte < btmp->btmp_bytes_len);	//这里应该是"<="
c0002519:	8b 45 08             	mov    0x8(%ebp),%eax
c000251c:	8b 00                	mov    (%eax),%eax
c000251e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0002521:	77 19                	ja     c000253c <bitmap_scan+0x52>
/work/x86_os_my/lib/kernel/bitmap.c:39 (discriminator 1)
c0002523:	68 f4 cc 00 c0       	push   $0xc000ccf4
c0002528:	68 48 cd 00 c0       	push   $0xc000cd48
c000252d:	6a 27                	push   $0x27
c000252f:	68 14 cd 00 c0       	push   $0xc000cd14
c0002534:	e8 78 fe ff ff       	call   c00023b1 <panic_spin>
c0002539:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/bitmap.c:40
	if (idx_byte == btmp->btmp_bytes_len) {		// 若该内存池找不到可用空间		
c000253c:	8b 45 08             	mov    0x8(%ebp),%eax
c000253f:	8b 00                	mov    (%eax),%eax
c0002541:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0002544:	75 0a                	jne    c0002550 <bitmap_scan+0x66>
/work/x86_os_my/lib/kernel/bitmap.c:41
		return -1;
c0002546:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000254b:	e9 cd 00 00 00       	jmp    c000261d <bitmap_scan+0x133>
/work/x86_os_my/lib/kernel/bitmap.c:46
	}

	/* 若在位图数组范围内的某字节内找到了空闲位，
	 * 在该字节内逐位比对,返回空闲位的索引。*/
	int idx_bit = 0;
c0002550:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:48
	/* 和btmp->bits[idx_byte]这个字节逐位对比 */
	while ((uint8_t)(BITMAP_MASK << idx_bit) & btmp->bits[idx_byte]) { 
c0002557:	eb 04                	jmp    c000255d <bitmap_scan+0x73>
/work/x86_os_my/lib/kernel/bitmap.c:49
		idx_bit++;
c0002559:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:48

	/* 若在位图数组范围内的某字节内找到了空闲位，
	 * 在该字节内逐位比对,返回空闲位的索引。*/
	int idx_bit = 0;
	/* 和btmp->bits[idx_byte]这个字节逐位对比 */
	while ((uint8_t)(BITMAP_MASK << idx_bit) & btmp->bits[idx_byte]) { 
c000255d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002560:	ba 01 00 00 00       	mov    $0x1,%edx
c0002565:	89 c1                	mov    %eax,%ecx
c0002567:	d3 e2                	shl    %cl,%edx
c0002569:	89 d0                	mov    %edx,%eax
c000256b:	0f b6 d0             	movzbl %al,%edx
c000256e:	8b 45 08             	mov    0x8(%ebp),%eax
c0002571:	8b 48 04             	mov    0x4(%eax),%ecx
c0002574:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002577:	01 c8                	add    %ecx,%eax
c0002579:	0f b6 00             	movzbl (%eax),%eax
c000257c:	0f b6 c0             	movzbl %al,%eax
c000257f:	21 d0                	and    %edx,%eax
c0002581:	85 c0                	test   %eax,%eax
c0002583:	75 d4                	jne    c0002559 <bitmap_scan+0x6f>
/work/x86_os_my/lib/kernel/bitmap.c:52
		idx_bit++;
	}
	
	int bit_idx_start = idx_byte * 8 + idx_bit;		// 空闲位在位图内的下标
c0002585:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002588:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c000258f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002592:	01 d0                	add    %edx,%eax
c0002594:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:53
	if (cnt == 1) {
c0002597:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c000259b:	75 05                	jne    c00025a2 <bitmap_scan+0xb8>
/work/x86_os_my/lib/kernel/bitmap.c:54
		return bit_idx_start;
c000259d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00025a0:	eb 7b                	jmp    c000261d <bitmap_scan+0x133>
/work/x86_os_my/lib/kernel/bitmap.c:57
	}

	uint32_t bit_left = (btmp->btmp_bytes_len * 8 - bit_idx_start);	// 记录还有多少位可以判断
c00025a2:	8b 45 08             	mov    0x8(%ebp),%eax
c00025a5:	8b 00                	mov    (%eax),%eax
c00025a7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c00025ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00025b1:	29 c2                	sub    %eax,%edx
c00025b3:	89 d0                	mov    %edx,%eax
c00025b5:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:58
	uint32_t next_bit = bit_idx_start + 1;
c00025b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00025bb:	83 c0 01             	add    $0x1,%eax
c00025be:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:59
	uint32_t count = 1;			// 用于记录找到的空闲位的个数
c00025c1:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:61

	bit_idx_start = -1;			// 初始化为-1，若找不到连续的位就直接返回-1
c00025c8:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:62
	while (bit_left-- > 0) {
c00025cf:	eb 3c                	jmp    c000260d <bitmap_scan+0x123>
/work/x86_os_my/lib/kernel/bitmap.c:63
		if (!(bitmap_scan_test(btmp, next_bit))) {	// 判断next_bit位是否为1,=1返回true，=0返回false
c00025d1:	83 ec 08             	sub    $0x8,%esp
c00025d4:	ff 75 e4             	pushl  -0x1c(%ebp)
c00025d7:	ff 75 08             	pushl  0x8(%ebp)
c00025da:	e8 cb fe ff ff       	call   c00024aa <bitmap_scan_test>
c00025df:	83 c4 10             	add    $0x10,%esp
c00025e2:	85 c0                	test   %eax,%eax
c00025e4:	75 06                	jne    c00025ec <bitmap_scan+0x102>
/work/x86_os_my/lib/kernel/bitmap.c:64
			count++;
c00025e6:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
c00025ea:	eb 07                	jmp    c00025f3 <bitmap_scan+0x109>
/work/x86_os_my/lib/kernel/bitmap.c:66
		} else {
			count = 0;			// 重新从0找cnt个连续的bit
c00025ec:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:69
		}
		
		if (count == cnt) {		// 已找到连续的cnt个空位
c00025f3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00025f6:	3b 45 0c             	cmp    0xc(%ebp),%eax
c00025f9:	75 0e                	jne    c0002609 <bitmap_scan+0x11f>
/work/x86_os_my/lib/kernel/bitmap.c:70
			bit_idx_start = next_bit - cnt + 1;
c00025fb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00025fe:	2b 45 0c             	sub    0xc(%ebp),%eax
c0002601:	83 c0 01             	add    $0x1,%eax
c0002604:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:71
			break;
c0002607:	eb 11                	jmp    c000261a <bitmap_scan+0x130>
/work/x86_os_my/lib/kernel/bitmap.c:73
		}
		next_bit++;
c0002609:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:62
	uint32_t bit_left = (btmp->btmp_bytes_len * 8 - bit_idx_start);	// 记录还有多少位可以判断
	uint32_t next_bit = bit_idx_start + 1;
	uint32_t count = 1;			// 用于记录找到的空闲位的个数

	bit_idx_start = -1;			// 初始化为-1，若找不到连续的位就直接返回-1
	while (bit_left-- > 0) {
c000260d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002610:	8d 50 ff             	lea    -0x1(%eax),%edx
c0002613:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0002616:	85 c0                	test   %eax,%eax
c0002618:	75 b7                	jne    c00025d1 <bitmap_scan+0xe7>
/work/x86_os_my/lib/kernel/bitmap.c:75
			bit_idx_start = next_bit - cnt + 1;
			break;
		}
		next_bit++;
	}
	return bit_idx_start;
c000261a:	8b 45 ec             	mov    -0x14(%ebp),%eax
/work/x86_os_my/lib/kernel/bitmap.c:76
}
c000261d:	c9                   	leave  
c000261e:	c3                   	ret    

c000261f <bitmap_set>:
bitmap_set():
/work/x86_os_my/lib/kernel/bitmap.c:79

/* 将位图btmp的bit_idx位设置为value */
void bitmap_set(struct bitmap* btmp, uint32_t bit_idx, int8_t value) {
c000261f:	55                   	push   %ebp
c0002620:	89 e5                	mov    %esp,%ebp
c0002622:	56                   	push   %esi
c0002623:	53                   	push   %ebx
c0002624:	83 ec 20             	sub    $0x20,%esp
c0002627:	8b 45 10             	mov    0x10(%ebp),%eax
c000262a:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:80
	ASSERT((value == 0) || (value == 1));
c000262d:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c0002631:	74 1f                	je     c0002652 <bitmap_set+0x33>
/work/x86_os_my/lib/kernel/bitmap.c:80 (discriminator 1)
c0002633:	80 7d e4 01          	cmpb   $0x1,-0x1c(%ebp)
c0002637:	74 19                	je     c0002652 <bitmap_set+0x33>
/work/x86_os_my/lib/kernel/bitmap.c:80 (discriminator 2)
c0002639:	68 28 cd 00 c0       	push   $0xc000cd28
c000263e:	68 54 cd 00 c0       	push   $0xc000cd54
c0002643:	6a 50                	push   $0x50
c0002645:	68 14 cd 00 c0       	push   $0xc000cd14
c000264a:	e8 62 fd ff ff       	call   c00023b1 <panic_spin>
c000264f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/bitmap.c:81
	uint32_t byte_idx = bit_idx / 8;    // 向下取整用于索引数组下标
c0002652:	8b 45 0c             	mov    0xc(%ebp),%eax
c0002655:	c1 e8 03             	shr    $0x3,%eax
c0002658:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:82
	uint32_t bit_odd  = bit_idx % 8;    // 取余用于索引数组内的位
c000265b:	8b 45 0c             	mov    0xc(%ebp),%eax
c000265e:	83 e0 07             	and    $0x7,%eax
c0002661:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/kernel/bitmap.c:86

	/* 一般都会用个0x1这样的数对字节中的位操作,
	* 将1任意移动后再取反,或者先取反再移位,可用来对位置0操作。*/
	if (value) {
c0002664:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c0002668:	74 2f                	je     c0002699 <bitmap_set+0x7a>
/work/x86_os_my/lib/kernel/bitmap.c:87
		btmp->bits[byte_idx] |= (BITMAP_MASK << bit_odd);
c000266a:	8b 45 08             	mov    0x8(%ebp),%eax
c000266d:	8b 50 04             	mov    0x4(%eax),%edx
c0002670:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002673:	01 c2                	add    %eax,%edx
c0002675:	8b 45 08             	mov    0x8(%ebp),%eax
c0002678:	8b 48 04             	mov    0x4(%eax),%ecx
c000267b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000267e:	01 c8                	add    %ecx,%eax
c0002680:	0f b6 00             	movzbl (%eax),%eax
c0002683:	89 c6                	mov    %eax,%esi
c0002685:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002688:	bb 01 00 00 00       	mov    $0x1,%ebx
c000268d:	89 c1                	mov    %eax,%ecx
c000268f:	d3 e3                	shl    %cl,%ebx
c0002691:	89 d8                	mov    %ebx,%eax
c0002693:	09 f0                	or     %esi,%eax
c0002695:	88 02                	mov    %al,(%edx)
/work/x86_os_my/lib/kernel/bitmap.c:91
	} else {
		btmp->bits[byte_idx] &= ~(BITMAP_MASK << bit_odd);
	}
}
c0002697:	eb 2f                	jmp    c00026c8 <bitmap_set+0xa9>
/work/x86_os_my/lib/kernel/bitmap.c:89
	/* 一般都会用个0x1这样的数对字节中的位操作,
	* 将1任意移动后再取反,或者先取反再移位,可用来对位置0操作。*/
	if (value) {
		btmp->bits[byte_idx] |= (BITMAP_MASK << bit_odd);
	} else {
		btmp->bits[byte_idx] &= ~(BITMAP_MASK << bit_odd);
c0002699:	8b 45 08             	mov    0x8(%ebp),%eax
c000269c:	8b 50 04             	mov    0x4(%eax),%edx
c000269f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00026a2:	01 c2                	add    %eax,%edx
c00026a4:	8b 45 08             	mov    0x8(%ebp),%eax
c00026a7:	8b 48 04             	mov    0x4(%eax),%ecx
c00026aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00026ad:	01 c8                	add    %ecx,%eax
c00026af:	0f b6 00             	movzbl (%eax),%eax
c00026b2:	89 c3                	mov    %eax,%ebx
c00026b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00026b7:	be 01 00 00 00       	mov    $0x1,%esi
c00026bc:	89 c1                	mov    %eax,%ecx
c00026be:	d3 e6                	shl    %cl,%esi
c00026c0:	89 f0                	mov    %esi,%eax
c00026c2:	f7 d0                	not    %eax
c00026c4:	21 d8                	and    %ebx,%eax
c00026c6:	88 02                	mov    %al,(%edx)
/work/x86_os_my/lib/kernel/bitmap.c:91
	}
}
c00026c8:	90                   	nop
c00026c9:	8d 65 f8             	lea    -0x8(%ebp),%esp
c00026cc:	5b                   	pop    %ebx
c00026cd:	5e                   	pop    %esi
c00026ce:	5d                   	pop    %ebp
c00026cf:	c3                   	ret    

c00026d0 <vaddr_get>:
vaddr_get():
/work/x86_os_my/kernel/memory.c:66
struct pool kernel_pool, user_pool;		// 生成内核内存池和用户内存池
struct virtual_addr kernel_vaddr;		// 此结构是用来给内核分配虚拟地址

/* 在pf表示的虚拟内存池中申请pg_cnt个虚拟页,
 * 成功则返回虚拟页的起始地址, 失败则返回NULL */
static void* vaddr_get(enum pool_flags pf, uint32_t pg_cnt) {
c00026d0:	55                   	push   %ebp
c00026d1:	89 e5                	mov    %esp,%ebp
c00026d3:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:67
	int vaddr_start = 0, bit_idx_start = -1;
c00026d6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c00026dd:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:68
	uint32_t cnt = 0;
c00026e4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:69
	if (pf == PF_KERNEL) {
c00026eb:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c00026ef:	75 64                	jne    c0002755 <vaddr_get+0x85>
/work/x86_os_my/kernel/memory.c:71
		// 在位图中申请连续cnt个位 成功：返回其起始位下标
		bit_idx_start  = bitmap_scan(&kernel_vaddr.vaddr_bitmap, pg_cnt);
c00026f1:	83 ec 08             	sub    $0x8,%esp
c00026f4:	ff 75 0c             	pushl  0xc(%ebp)
c00026f7:	68 48 21 01 c0       	push   $0xc0012148
c00026fc:	e8 e9 fd ff ff       	call   c00024ea <bitmap_scan>
c0002701:	83 c4 10             	add    $0x10,%esp
c0002704:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:72
		if (bit_idx_start == -1) {	//失败
c0002707:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%ebp)
c000270b:	75 2b                	jne    c0002738 <vaddr_get+0x68>
/work/x86_os_my/kernel/memory.c:73
			return NULL;
c000270d:	b8 00 00 00 00       	mov    $0x0,%eax
c0002712:	e9 cd 00 00 00       	jmp    c00027e4 <vaddr_get+0x114>
/work/x86_os_my/kernel/memory.c:77
		}
		while(cnt < pg_cnt) {
			// 设置位图中的位，表示内存已被占用
			bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 1);
c0002717:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000271a:	8d 50 01             	lea    0x1(%eax),%edx
c000271d:	89 55 f0             	mov    %edx,-0x10(%ebp)
c0002720:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0002723:	01 d0                	add    %edx,%eax
c0002725:	83 ec 04             	sub    $0x4,%esp
c0002728:	6a 01                	push   $0x1
c000272a:	50                   	push   %eax
c000272b:	68 48 21 01 c0       	push   $0xc0012148
c0002730:	e8 ea fe ff ff       	call   c000261f <bitmap_set>
c0002735:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:75
		// 在位图中申请连续cnt个位 成功：返回其起始位下标
		bit_idx_start  = bitmap_scan(&kernel_vaddr.vaddr_bitmap, pg_cnt);
		if (bit_idx_start == -1) {	//失败
			return NULL;
		}
		while(cnt < pg_cnt) {
c0002738:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000273b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c000273e:	72 d7                	jb     c0002717 <vaddr_get+0x47>
/work/x86_os_my/kernel/memory.c:79
			// 设置位图中的位，表示内存已被占用
			bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 1);
		}
		vaddr_start = kernel_vaddr.vaddr_start + bit_idx_start * PG_SIZE;
c0002740:	a1 50 21 01 c0       	mov    0xc0012150,%eax
c0002745:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0002748:	c1 e2 0c             	shl    $0xc,%edx
c000274b:	01 d0                	add    %edx,%eax
c000274d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0002750:	e9 8c 00 00 00       	jmp    c00027e1 <vaddr_get+0x111>
/work/x86_os_my/kernel/memory.c:81
	} else {
		struct task_struct* cur = running_thread();
c0002755:	e8 e0 14 00 00       	call   c0003c3a <running_thread>
c000275a:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:82
		bit_idx_start  = bitmap_scan(&cur->userprog_vaddr.vaddr_bitmap, pg_cnt);
c000275d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002760:	83 c0 58             	add    $0x58,%eax
c0002763:	83 ec 08             	sub    $0x8,%esp
c0002766:	ff 75 0c             	pushl  0xc(%ebp)
c0002769:	50                   	push   %eax
c000276a:	e8 7b fd ff ff       	call   c00024ea <bitmap_scan>
c000276f:	83 c4 10             	add    $0x10,%esp
c0002772:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:83
		if (bit_idx_start == -1) {
c0002775:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%ebp)
c0002779:	75 2a                	jne    c00027a5 <vaddr_get+0xd5>
/work/x86_os_my/kernel/memory.c:84
			return NULL;
c000277b:	b8 00 00 00 00       	mov    $0x0,%eax
c0002780:	eb 62                	jmp    c00027e4 <vaddr_get+0x114>
/work/x86_os_my/kernel/memory.c:87
		}
		while(cnt < pg_cnt) {
			bitmap_set(&cur->userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 1);
c0002782:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002785:	8d 50 01             	lea    0x1(%eax),%edx
c0002788:	89 55 f0             	mov    %edx,-0x10(%ebp)
c000278b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c000278e:	01 c2                	add    %eax,%edx
c0002790:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002793:	83 c0 58             	add    $0x58,%eax
c0002796:	83 ec 04             	sub    $0x4,%esp
c0002799:	6a 01                	push   $0x1
c000279b:	52                   	push   %edx
c000279c:	50                   	push   %eax
c000279d:	e8 7d fe ff ff       	call   c000261f <bitmap_set>
c00027a2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:86
		struct task_struct* cur = running_thread();
		bit_idx_start  = bitmap_scan(&cur->userprog_vaddr.vaddr_bitmap, pg_cnt);
		if (bit_idx_start == -1) {
			return NULL;
		}
		while(cnt < pg_cnt) {
c00027a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00027a8:	3b 45 0c             	cmp    0xc(%ebp),%eax
c00027ab:	72 d5                	jb     c0002782 <vaddr_get+0xb2>
/work/x86_os_my/kernel/memory.c:89
			bitmap_set(&cur->userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 1);
		}
		vaddr_start = cur->userprog_vaddr.vaddr_start + bit_idx_start * PG_SIZE;
c00027ad:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00027b0:	8b 40 60             	mov    0x60(%eax),%eax
c00027b3:	8b 55 ec             	mov    -0x14(%ebp),%edx
c00027b6:	c1 e2 0c             	shl    $0xc,%edx
c00027b9:	01 d0                	add    %edx,%eax
c00027bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:92

		/* (0xc0000000 - PG_SIZE)做为用户3级栈已经在start_process被分配 */
		ASSERT((uint32_t)vaddr_start < (0xc0000000 - PG_SIZE));
c00027be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00027c1:	3d ff ef ff bf       	cmp    $0xbfffefff,%eax
c00027c6:	76 19                	jbe    c00027e1 <vaddr_get+0x111>
/work/x86_os_my/kernel/memory.c:92 (discriminator 1)
c00027c8:	68 60 cd 00 c0       	push   $0xc000cd60
c00027cd:	68 d4 d0 00 c0       	push   $0xc000d0d4
c00027d2:	6a 5c                	push   $0x5c
c00027d4:	68 8f cd 00 c0       	push   $0xc000cd8f
c00027d9:	e8 d3 fb ff ff       	call   c00023b1 <panic_spin>
c00027de:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:95
		
	}
	return (void*)vaddr_start;
c00027e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/kernel/memory.c:96
}
c00027e4:	c9                   	leave  
c00027e5:	c3                   	ret    

c00027e6 <pte_ptr>:
pte_ptr():
/work/x86_os_my/kernel/memory.c:103
// 页表项 page table
/* 得到虚拟地址vaddr对应的pte指针*/
// 虚拟地址 vaddr 所在 pte 的"虚拟地址"!!!
// *pte 代表的是 pte 页表项的内容,
// 也就是 vaddr 最终所映射到的物理页框的 32 位地址中的高 20 位和 12 位的"页表项"属性
uint32_t* pte_ptr(uint32_t vaddr) {
c00027e6:	55                   	push   %ebp
c00027e7:	89 e5                	mov    %esp,%ebp
c00027e9:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/memory.c:108
	/* 先找到页目录表 + \
	* 再用vaddr的pde部分做为索引，找到某一个页表 + \
	* 再用vaddr的pte部分作为索引，找到某一个页表项*/
	uint32_t* pte = (uint32_t*)(0xffc00000 + \
					((vaddr & 0xffc00000) >> 10) + \
c00027ec:	8b 45 08             	mov    0x8(%ebp),%eax
c00027ef:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c00027f4:	c1 e8 0a             	shr    $0xa,%eax
c00027f7:	89 c2                	mov    %eax,%edx
/work/x86_os_my/kernel/memory.c:109
					PTE_IDX(vaddr) * 4);
c00027f9:	8b 45 08             	mov    0x8(%ebp),%eax
c00027fc:	25 00 f0 3f 00       	and    $0x3ff000,%eax
c0002801:	c1 e8 0c             	shr    $0xc,%eax
c0002804:	c1 e0 02             	shl    $0x2,%eax
/work/x86_os_my/kernel/memory.c:108
uint32_t* pte_ptr(uint32_t vaddr) {
	/* 先找到页目录表 + \
	* 再用vaddr的pde部分做为索引，找到某一个页表 + \
	* 再用vaddr的pte部分作为索引，找到某一个页表项*/
	uint32_t* pte = (uint32_t*)(0xffc00000 + \
					((vaddr & 0xffc00000) >> 10) + \
c0002807:	01 d0                	add    %edx,%eax
c0002809:	2d 00 00 40 00       	sub    $0x400000,%eax
/work/x86_os_my/kernel/memory.c:107
// 也就是 vaddr 最终所映射到的物理页框的 32 位地址中的高 20 位和 12 位的"页表项"属性
uint32_t* pte_ptr(uint32_t vaddr) {
	/* 先找到页目录表 + \
	* 再用vaddr的pde部分做为索引，找到某一个页表 + \
	* 再用vaddr的pte部分作为索引，找到某一个页表项*/
	uint32_t* pte = (uint32_t*)(0xffc00000 + \
c000280e:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/kernel/memory.c:110
					((vaddr & 0xffc00000) >> 10) + \
					PTE_IDX(vaddr) * 4);
	return pte;
c0002811:	8b 45 fc             	mov    -0x4(%ebp),%eax
/work/x86_os_my/kernel/memory.c:111
}
c0002814:	c9                   	leave  
c0002815:	c3                   	ret    

c0002816 <pde_ptr>:
pde_ptr():
/work/x86_os_my/kernel/memory.c:118
// 页目录表项 page Directory table entry
/* 得到虚拟地址vaddr对应的pde的指针 */
// 虚拟地址 vaddr 所在 pde 的"虚拟地址"!!!
// *pde 代表的是 pde 页目录项的内容
// 也就是 vaddr 最终所映射到的物理页框的 32 位地址中的高 20 位和 12 位的"页目录项"属性
uint32_t* pde_ptr(uint32_t vaddr) {
c0002816:	55                   	push   %ebp
c0002817:	89 e5                	mov    %esp,%ebp
c0002819:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/memory.c:120
	/* 0xfffff是用来访问到页目录表本身所在的地址 */
	uint32_t* pde = (uint32_t*)((0xfffff000) + PDE_IDX(vaddr) * 4);
c000281c:	8b 45 08             	mov    0x8(%ebp),%eax
c000281f:	c1 e8 16             	shr    $0x16,%eax
c0002822:	05 00 fc ff 3f       	add    $0x3ffffc00,%eax
c0002827:	c1 e0 02             	shl    $0x2,%eax
c000282a:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/kernel/memory.c:121
	return pde;
c000282d:	8b 45 fc             	mov    -0x4(%ebp),%eax
/work/x86_os_my/kernel/memory.c:122
}
c0002830:	c9                   	leave  
c0002831:	c3                   	ret    

c0002832 <palloc>:
palloc():
/work/x86_os_my/kernel/memory.c:126

/* 在m_pool指向的物理内存池中分配1个物理页,
 * 成功则返回页框的物理地址,失败则返回NULL */
static void* palloc(struct pool* m_pool) {
c0002832:	55                   	push   %ebp
c0002833:	89 e5                	mov    %esp,%ebp
c0002835:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:128
	/* 扫描或设置位图要保证原子操作 */
	int bit_idx = bitmap_scan(&m_pool->pool_bitmap, 1);    // 找一个物理页面
c0002838:	8b 45 08             	mov    0x8(%ebp),%eax
c000283b:	83 ec 08             	sub    $0x8,%esp
c000283e:	6a 01                	push   $0x1
c0002840:	50                   	push   %eax
c0002841:	e8 a4 fc ff ff       	call   c00024ea <bitmap_scan>
c0002846:	83 c4 10             	add    $0x10,%esp
c0002849:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:129
	if (bit_idx == -1 ) {
c000284c:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c0002850:	75 07                	jne    c0002859 <palloc+0x27>
/work/x86_os_my/kernel/memory.c:130
		return NULL;
c0002852:	b8 00 00 00 00       	mov    $0x0,%eax
c0002857:	eb 2b                	jmp    c0002884 <palloc+0x52>
/work/x86_os_my/kernel/memory.c:132
	}
	bitmap_set(&m_pool->pool_bitmap, bit_idx, 1);	// 将此位bit_idx置1
c0002859:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000285c:	8b 45 08             	mov    0x8(%ebp),%eax
c000285f:	83 ec 04             	sub    $0x4,%esp
c0002862:	6a 01                	push   $0x1
c0002864:	52                   	push   %edx
c0002865:	50                   	push   %eax
c0002866:	e8 b4 fd ff ff       	call   c000261f <bitmap_set>
c000286b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:133
	uint32_t page_phyaddr = ((bit_idx * PG_SIZE) + m_pool->phy_addr_start);
c000286e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002871:	c1 e0 0c             	shl    $0xc,%eax
c0002874:	89 c2                	mov    %eax,%edx
c0002876:	8b 45 08             	mov    0x8(%ebp),%eax
c0002879:	8b 40 08             	mov    0x8(%eax),%eax
c000287c:	01 d0                	add    %edx,%eax
c000287e:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:134
	return (void*)page_phyaddr;
c0002881:	8b 45 f0             	mov    -0x10(%ebp),%eax
/work/x86_os_my/kernel/memory.c:135
}
c0002884:	c9                   	leave  
c0002885:	c3                   	ret    

c0002886 <page_table_add>:
page_table_add():
/work/x86_os_my/kernel/memory.c:138

/* 页表中添加虚拟地址_vaddr与物理地址_page_phyaddr的映射 */
static void page_table_add(void* _vaddr, void* _page_phyaddr) {
c0002886:	55                   	push   %ebp
c0002887:	89 e5                	mov    %esp,%ebp
c0002889:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/kernel/memory.c:139
	uint32_t vaddr = (uint32_t)_vaddr, page_phyaddr = (uint32_t)_page_phyaddr;
c000288c:	8b 45 08             	mov    0x8(%ebp),%eax
c000288f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0002892:	8b 45 0c             	mov    0xc(%ebp),%eax
c0002895:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:140
	uint32_t* pde = pde_ptr(vaddr);	//变量pde是虚拟地址!!!
c0002898:	ff 75 f4             	pushl  -0xc(%ebp)
c000289b:	e8 76 ff ff ff       	call   c0002816 <pde_ptr>
c00028a0:	83 c4 04             	add    $0x4,%esp
c00028a3:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:141
	uint32_t* pte = pte_ptr(vaddr);	//变量pte是虚拟地址!!!
c00028a6:	ff 75 f4             	pushl  -0xc(%ebp)
c00028a9:	e8 38 ff ff ff       	call   c00027e6 <pte_ptr>
c00028ae:	83 c4 04             	add    $0x4,%esp
c00028b1:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:149
	* pde页目录项 pte页表项
	* 执行*pte可能会访问到空的pde。所以确保pde创建完成后才能执行*pte，否则会引发page_fault。
	* 因此在*pde为0时，*pte只能出现在下面else语句块中的*pde后面。
	* *********************************************************/
	/* 先在页目录内判断目录项的P位，若为1,则表示该表已存在 */
	if (*pde & 0x00000001) {			// 页目录项 存在
c00028b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00028b7:	8b 00                	mov    (%eax),%eax
c00028b9:	83 e0 01             	and    $0x1,%eax
c00028bc:	85 c0                	test   %eax,%eax
c00028be:	74 64                	je     c0002924 <page_table_add+0x9e>
/work/x86_os_my/kernel/memory.c:150
		ASSERT(!(*pte & 0x00000001));	// 页表项不存在才能往下执行，否则panic
c00028c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00028c3:	8b 00                	mov    (%eax),%eax
c00028c5:	83 e0 01             	and    $0x1,%eax
c00028c8:	85 c0                	test   %eax,%eax
c00028ca:	74 1c                	je     c00028e8 <page_table_add+0x62>
/work/x86_os_my/kernel/memory.c:150 (discriminator 1)
c00028cc:	68 9f cd 00 c0       	push   $0xc000cd9f
c00028d1:	68 e0 d0 00 c0       	push   $0xc000d0e0
c00028d6:	68 96 00 00 00       	push   $0x96
c00028db:	68 8f cd 00 c0       	push   $0xc000cd8f
c00028e0:	e8 cc fa ff ff       	call   c00023b1 <panic_spin>
c00028e5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:152

		if (!(*pte & 0x00000001)) {		// 页表项pte不存在，创建PTE
c00028e8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00028eb:	8b 00                	mov    (%eax),%eax
c00028ed:	83 e0 01             	and    $0x1,%eax
c00028f0:	85 c0                	test   %eax,%eax
c00028f2:	75 12                	jne    c0002906 <page_table_add+0x80>
/work/x86_os_my/kernel/memory.c:153
			*pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);		// 物理地址 | US=1,RW=1,P=1
c00028f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00028f7:	83 c8 07             	or     $0x7,%eax
c00028fa:	89 c2                	mov    %eax,%edx
c00028fc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00028ff:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/kernel/memory.c:173
		memset((void*)((int)pte & 0xfffff000), 0, PG_SIZE);

		ASSERT(!(*pte & 0x00000001));	// 页表项不存在才能往下执行，否则panic
		*pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);			// 物理地址 | US=1,RW=1,P=1
	}
}
c0002901:	e9 8e 00 00 00       	jmp    c0002994 <page_table_add+0x10e>
/work/x86_os_my/kernel/memory.c:155
		ASSERT(!(*pte & 0x00000001));	// 页表项不存在才能往下执行，否则panic

		if (!(*pte & 0x00000001)) {		// 页表项pte不存在，创建PTE
			*pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);		// 物理地址 | US=1,RW=1,P=1
		} else {						// 不会执行到这，因为上面的ASSERT
			PANIC("pte repeat");
c0002906:	68 b4 cd 00 c0       	push   $0xc000cdb4
c000290b:	68 e0 d0 00 c0       	push   $0xc000d0e0
c0002910:	68 9b 00 00 00       	push   $0x9b
c0002915:	68 8f cd 00 c0       	push   $0xc000cd8f
c000291a:	e8 92 fa ff ff       	call   c00023b1 <panic_spin>
c000291f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:173
		memset((void*)((int)pte & 0xfffff000), 0, PG_SIZE);

		ASSERT(!(*pte & 0x00000001));	// 页表项不存在才能往下执行，否则panic
		*pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);			// 物理地址 | US=1,RW=1,P=1
	}
}
c0002922:	eb 70                	jmp    c0002994 <page_table_add+0x10e>
/work/x86_os_my/kernel/memory.c:159
		} else {						// 不会执行到这，因为上面的ASSERT
			PANIC("pte repeat");
		}
	} else {							// 页目录项不存在，先创建页目录，再创建页表项
		/* 页表中用到的页一律从内核空间分配 */
		uint32_t pde_phyaddr = (uint32_t)palloc(&kernel_pool);
c0002924:	83 ec 0c             	sub    $0xc,%esp
c0002927:	68 60 21 01 c0       	push   $0xc0012160
c000292c:	e8 01 ff ff ff       	call   c0002832 <palloc>
c0002931:	83 c4 10             	add    $0x10,%esp
c0002934:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/kernel/memory.c:160
		*pde = (pde_phyaddr | PG_US_U | PG_RW_W | PG_P_1);			// 注意这行是pde_phyaddr，不是page_phyaddr!!!
c0002937:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000293a:	83 c8 07             	or     $0x7,%eax
c000293d:	89 c2                	mov    %eax,%edx
c000293f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002942:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/kernel/memory.c:168
		 * 访问物理地址 pde_phyaddr，需要找到它的虚拟地址！
		 * 只要用_vaddr的 PTE 取高20位即可。
		   搞得这么难理解，其实就是0xffc00000找到页目录表，然后加上vaddr的PDE在页目录表中的索引
		   (uint32_t*)(0xffc00000 + ((vaddr & 0xffc00000) >> 10))
		 */
		memset((void*)((int)pte & 0xfffff000), 0, PG_SIZE);
c0002944:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002947:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c000294c:	83 ec 04             	sub    $0x4,%esp
c000294f:	68 00 10 00 00       	push   $0x1000
c0002954:	6a 00                	push   $0x0
c0002956:	50                   	push   %eax
c0002957:	e8 f7 0e 00 00       	call   c0003853 <memset>
c000295c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:170

		ASSERT(!(*pte & 0x00000001));	// 页表项不存在才能往下执行，否则panic
c000295f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002962:	8b 00                	mov    (%eax),%eax
c0002964:	83 e0 01             	and    $0x1,%eax
c0002967:	85 c0                	test   %eax,%eax
c0002969:	74 1c                	je     c0002987 <page_table_add+0x101>
/work/x86_os_my/kernel/memory.c:170 (discriminator 1)
c000296b:	68 9f cd 00 c0       	push   $0xc000cd9f
c0002970:	68 e0 d0 00 c0       	push   $0xc000d0e0
c0002975:	68 aa 00 00 00       	push   $0xaa
c000297a:	68 8f cd 00 c0       	push   $0xc000cd8f
c000297f:	e8 2d fa ff ff       	call   c00023b1 <panic_spin>
c0002984:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:171
		*pte = (page_phyaddr | PG_US_U | PG_RW_W | PG_P_1);			// 物理地址 | US=1,RW=1,P=1
c0002987:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000298a:	83 c8 07             	or     $0x7,%eax
c000298d:	89 c2                	mov    %eax,%edx
c000298f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002992:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/kernel/memory.c:173
	}
}
c0002994:	90                   	nop
c0002995:	c9                   	leave  
c0002996:	c3                   	ret    

c0002997 <malloc_page>:
malloc_page():
/work/x86_os_my/kernel/memory.c:176

/* 分配pg_cnt个页空间,成功则返回起始虚拟地址,失败时返回NULL */
void* malloc_page(enum pool_flags pf, uint32_t pg_cnt) {
c0002997:	55                   	push   %ebp
c0002998:	89 e5                	mov    %esp,%ebp
c000299a:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/kernel/memory.c:177
	ASSERT(pg_cnt > 0 && pg_cnt < 3840);
c000299d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c00029a1:	74 09                	je     c00029ac <malloc_page+0x15>
/work/x86_os_my/kernel/memory.c:177 (discriminator 1)
c00029a3:	81 7d 0c ff 0e 00 00 	cmpl   $0xeff,0xc(%ebp)
c00029aa:	76 1c                	jbe    c00029c8 <malloc_page+0x31>
/work/x86_os_my/kernel/memory.c:177 (discriminator 3)
c00029ac:	68 bf cd 00 c0       	push   $0xc000cdbf
c00029b1:	68 f0 d0 00 c0       	push   $0xc000d0f0
c00029b6:	68 b1 00 00 00       	push   $0xb1
c00029bb:	68 8f cd 00 c0       	push   $0xc000cd8f
c00029c0:	e8 ec f9 ff ff       	call   c00023b1 <panic_spin>
c00029c5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:183
	/***********   malloc_page的原理是三个动作的合成:   ***********
		1 通过vaddr_get在虚拟内存池中申请虚拟地址
		2 通过palloc在物理内存池中申请物理页
		3 通过page_table_add将以上得到的虚拟地址和物理地址在页表中完成映射
	***************************************************************/
	void* vaddr_start = vaddr_get(pf, pg_cnt);
c00029c8:	83 ec 08             	sub    $0x8,%esp
c00029cb:	ff 75 0c             	pushl  0xc(%ebp)
c00029ce:	ff 75 08             	pushl  0x8(%ebp)
c00029d1:	e8 fa fc ff ff       	call   c00026d0 <vaddr_get>
c00029d6:	83 c4 10             	add    $0x10,%esp
c00029d9:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:184
	if (vaddr_start == NULL) {
c00029dc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c00029e0:	75 07                	jne    c00029e9 <malloc_page+0x52>
/work/x86_os_my/kernel/memory.c:185
		return NULL;
c00029e2:	b8 00 00 00 00       	mov    $0x0,%eax
c00029e7:	eb 6e                	jmp    c0002a57 <malloc_page+0xc0>
/work/x86_os_my/kernel/memory.c:188
	}

	uint32_t vaddr = (uint32_t)vaddr_start, cnt = pg_cnt;
c00029e9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00029ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00029ef:	8b 45 0c             	mov    0xc(%ebp),%eax
c00029f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:189
	struct pool* mem_pool = pf & PF_KERNEL ? &kernel_pool : &user_pool;
c00029f5:	8b 45 08             	mov    0x8(%ebp),%eax
c00029f8:	83 e0 01             	and    $0x1,%eax
c00029fb:	85 c0                	test   %eax,%eax
c00029fd:	74 07                	je     c0002a06 <malloc_page+0x6f>
/work/x86_os_my/kernel/memory.c:189 (discriminator 1)
c00029ff:	b8 60 21 01 c0       	mov    $0xc0012160,%eax
c0002a04:	eb 05                	jmp    c0002a0b <malloc_page+0x74>
/work/x86_os_my/kernel/memory.c:189 (discriminator 2)
c0002a06:	b8 60 20 01 c0       	mov    $0xc0012060,%eax
/work/x86_os_my/kernel/memory.c:189 (discriminator 4)
c0002a0b:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:192 (discriminator 4)

	/* 因为虚拟地址是连续的,但物理地址可以是不连续的,所以逐个做映射*/
	while (cnt-- > 0) {
c0002a0e:	eb 37                	jmp    c0002a47 <malloc_page+0xb0>
/work/x86_os_my/kernel/memory.c:193
		void* page_phyaddr = palloc(mem_pool);
c0002a10:	83 ec 0c             	sub    $0xc,%esp
c0002a13:	ff 75 e8             	pushl  -0x18(%ebp)
c0002a16:	e8 17 fe ff ff       	call   c0002832 <palloc>
c0002a1b:	83 c4 10             	add    $0x10,%esp
c0002a1e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/kernel/memory.c:194
		if (page_phyaddr == NULL) {  // 失败时要将曾经已申请的虚拟地址和物理页全部回滚，在将来完成内存回收时再补充
c0002a21:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0002a25:	75 07                	jne    c0002a2e <malloc_page+0x97>
/work/x86_os_my/kernel/memory.c:195
			return NULL;
c0002a27:	b8 00 00 00 00       	mov    $0x0,%eax
c0002a2c:	eb 29                	jmp    c0002a57 <malloc_page+0xc0>
/work/x86_os_my/kernel/memory.c:197
		}
		page_table_add((void*)vaddr, page_phyaddr); // 在页表中做映射 
c0002a2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002a31:	83 ec 08             	sub    $0x8,%esp
c0002a34:	ff 75 e4             	pushl  -0x1c(%ebp)
c0002a37:	50                   	push   %eax
c0002a38:	e8 49 fe ff ff       	call   c0002886 <page_table_add>
c0002a3d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:198
		vaddr += PG_SIZE;		 // 下一个虚拟页
c0002a40:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:192

	uint32_t vaddr = (uint32_t)vaddr_start, cnt = pg_cnt;
	struct pool* mem_pool = pf & PF_KERNEL ? &kernel_pool : &user_pool;

	/* 因为虚拟地址是连续的,但物理地址可以是不连续的,所以逐个做映射*/
	while (cnt-- > 0) {
c0002a47:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002a4a:	8d 50 ff             	lea    -0x1(%eax),%edx
c0002a4d:	89 55 f0             	mov    %edx,-0x10(%ebp)
c0002a50:	85 c0                	test   %eax,%eax
c0002a52:	75 bc                	jne    c0002a10 <malloc_page+0x79>
/work/x86_os_my/kernel/memory.c:200
			return NULL;
		}
		page_table_add((void*)vaddr, page_phyaddr); // 在页表中做映射 
		vaddr += PG_SIZE;		 // 下一个虚拟页
	}
	return vaddr_start;
c0002a54:	8b 45 ec             	mov    -0x14(%ebp),%eax
/work/x86_os_my/kernel/memory.c:201
}
c0002a57:	c9                   	leave  
c0002a58:	c3                   	ret    

c0002a59 <get_kernel_pages>:
get_kernel_pages():
/work/x86_os_my/kernel/memory.c:204

/* 从内核物理内存池中申请pg_cnt页内存,成功则返回其虚拟地址,失败则返回NULL */
void* get_kernel_pages(uint32_t pg_cnt) {
c0002a59:	55                   	push   %ebp
c0002a5a:	89 e5                	mov    %esp,%ebp
c0002a5c:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:205
	lock_acquire(&kernel_pool.lock);
c0002a5f:	83 ec 0c             	sub    $0xc,%esp
c0002a62:	68 70 21 01 c0       	push   $0xc0012170
c0002a67:	e8 a3 20 00 00       	call   c0004b0f <lock_acquire>
c0002a6c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:206
	void* vaddr =  malloc_page(PF_KERNEL, pg_cnt);
c0002a6f:	83 ec 08             	sub    $0x8,%esp
c0002a72:	ff 75 08             	pushl  0x8(%ebp)
c0002a75:	6a 01                	push   $0x1
c0002a77:	e8 1b ff ff ff       	call   c0002997 <malloc_page>
c0002a7c:	83 c4 10             	add    $0x10,%esp
c0002a7f:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:207
	if (vaddr != NULL) {
c0002a82:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0002a86:	74 17                	je     c0002a9f <get_kernel_pages+0x46>
/work/x86_os_my/kernel/memory.c:208
		memset(vaddr, 0, pg_cnt * PG_SIZE);
c0002a88:	8b 45 08             	mov    0x8(%ebp),%eax
c0002a8b:	c1 e0 0c             	shl    $0xc,%eax
c0002a8e:	83 ec 04             	sub    $0x4,%esp
c0002a91:	50                   	push   %eax
c0002a92:	6a 00                	push   $0x0
c0002a94:	ff 75 f4             	pushl  -0xc(%ebp)
c0002a97:	e8 b7 0d 00 00       	call   c0003853 <memset>
c0002a9c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:210
	}
	lock_release(&kernel_pool.lock);
c0002a9f:	83 ec 0c             	sub    $0xc,%esp
c0002aa2:	68 70 21 01 c0       	push   $0xc0012170
c0002aa7:	e8 da 20 00 00       	call   c0004b86 <lock_release>
c0002aac:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:211
	return vaddr;
c0002aaf:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/kernel/memory.c:212
}
c0002ab2:	c9                   	leave  
c0002ab3:	c3                   	ret    

c0002ab4 <get_user_pages>:
get_user_pages():
/work/x86_os_my/kernel/memory.c:215

/* 在用户空间中申请4k内存,并返回其虚拟地址 */
void* get_user_pages(uint32_t pg_cnt) {
c0002ab4:	55                   	push   %ebp
c0002ab5:	89 e5                	mov    %esp,%ebp
c0002ab7:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:216
	lock_acquire(&user_pool.lock);
c0002aba:	83 ec 0c             	sub    $0xc,%esp
c0002abd:	68 70 20 01 c0       	push   $0xc0012070
c0002ac2:	e8 48 20 00 00       	call   c0004b0f <lock_acquire>
c0002ac7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:217
	void* vaddr = malloc_page(PF_USER, pg_cnt);
c0002aca:	83 ec 08             	sub    $0x8,%esp
c0002acd:	ff 75 08             	pushl  0x8(%ebp)
c0002ad0:	6a 02                	push   $0x2
c0002ad2:	e8 c0 fe ff ff       	call   c0002997 <malloc_page>
c0002ad7:	83 c4 10             	add    $0x10,%esp
c0002ada:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:218
	if (vaddr != NULL) {
c0002add:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0002ae1:	74 17                	je     c0002afa <get_user_pages+0x46>
/work/x86_os_my/kernel/memory.c:219
		memset(vaddr, 0, pg_cnt * PG_SIZE);
c0002ae3:	8b 45 08             	mov    0x8(%ebp),%eax
c0002ae6:	c1 e0 0c             	shl    $0xc,%eax
c0002ae9:	83 ec 04             	sub    $0x4,%esp
c0002aec:	50                   	push   %eax
c0002aed:	6a 00                	push   $0x0
c0002aef:	ff 75 f4             	pushl  -0xc(%ebp)
c0002af2:	e8 5c 0d 00 00       	call   c0003853 <memset>
c0002af7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:221
	}
	lock_release(&user_pool.lock);
c0002afa:	83 ec 0c             	sub    $0xc,%esp
c0002afd:	68 70 20 01 c0       	push   $0xc0012070
c0002b02:	e8 7f 20 00 00       	call   c0004b86 <lock_release>
c0002b07:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:222
	return vaddr;
c0002b0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/kernel/memory.c:223
}
c0002b0d:	c9                   	leave  
c0002b0e:	c3                   	ret    

c0002b0f <get_a_page>:
get_a_page():
/work/x86_os_my/kernel/memory.c:227

/* 将虚拟地址vaddr与pf池中的物理地址关联,仅支持一页空间分配
 * 功能是，可以指定虚拟地址的内存分配 */
void* get_a_page(enum pool_flags pf, uint32_t vaddr) {
c0002b0f:	55                   	push   %ebp
c0002b10:	89 e5                	mov    %esp,%ebp
c0002b12:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:228
	struct pool* mem_pool = pf & PF_KERNEL ? &kernel_pool : &user_pool;
c0002b15:	8b 45 08             	mov    0x8(%ebp),%eax
c0002b18:	83 e0 01             	and    $0x1,%eax
c0002b1b:	85 c0                	test   %eax,%eax
c0002b1d:	74 07                	je     c0002b26 <get_a_page+0x17>
/work/x86_os_my/kernel/memory.c:228 (discriminator 1)
c0002b1f:	b8 60 21 01 c0       	mov    $0xc0012160,%eax
c0002b24:	eb 05                	jmp    c0002b2b <get_a_page+0x1c>
/work/x86_os_my/kernel/memory.c:228 (discriminator 2)
c0002b26:	b8 60 20 01 c0       	mov    $0xc0012060,%eax
/work/x86_os_my/kernel/memory.c:228 (discriminator 4)
c0002b2b:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:229 (discriminator 4)
	lock_acquire(&mem_pool->lock);
c0002b2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002b31:	83 c0 10             	add    $0x10,%eax
c0002b34:	83 ec 0c             	sub    $0xc,%esp
c0002b37:	50                   	push   %eax
c0002b38:	e8 d2 1f 00 00       	call   c0004b0f <lock_acquire>
c0002b3d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:232 (discriminator 4)

	/* 先将虚拟地址对应的位图置1 */
	struct task_struct* cur = running_thread();
c0002b40:	e8 f5 10 00 00       	call   c0003c3a <running_thread>
c0002b45:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:233 (discriminator 4)
	int32_t bit_idx = -1;
c0002b48:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:235 (discriminator 4)

	if (cur->pgdir != NULL && pf == PF_USER) {
c0002b4f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002b52:	8b 40 54             	mov    0x54(%eax),%eax
c0002b55:	85 c0                	test   %eax,%eax
c0002b57:	74 55                	je     c0002bae <get_a_page+0x9f>
/work/x86_os_my/kernel/memory.c:235 (discriminator 1)
c0002b59:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c0002b5d:	75 4f                	jne    c0002bae <get_a_page+0x9f>
/work/x86_os_my/kernel/memory.c:237
		/* 若当前是用户进程申请用户内存,就修改用户进程自己的虚拟地址池的 位图 */
		bit_idx = (vaddr - cur->userprog_vaddr.vaddr_start) / PG_SIZE;
c0002b5f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002b62:	8b 40 60             	mov    0x60(%eax),%eax
c0002b65:	8b 55 0c             	mov    0xc(%ebp),%edx
c0002b68:	29 c2                	sub    %eax,%edx
c0002b6a:	89 d0                	mov    %edx,%eax
c0002b6c:	c1 e8 0c             	shr    $0xc,%eax
c0002b6f:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:238
		ASSERT(bit_idx >= 0);
c0002b72:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0002b76:	79 1c                	jns    c0002b94 <get_a_page+0x85>
/work/x86_os_my/kernel/memory.c:238 (discriminator 1)
c0002b78:	68 db cd 00 c0       	push   $0xc000cddb
c0002b7d:	68 fc d0 00 c0       	push   $0xc000d0fc
c0002b82:	68 ee 00 00 00       	push   $0xee
c0002b87:	68 8f cd 00 c0       	push   $0xc000cd8f
c0002b8c:	e8 20 f8 ff ff       	call   c00023b1 <panic_spin>
c0002b91:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:239
		bitmap_set(&cur->userprog_vaddr.vaddr_bitmap, bit_idx, 1);
c0002b94:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002b97:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0002b9a:	83 c2 58             	add    $0x58,%edx
c0002b9d:	83 ec 04             	sub    $0x4,%esp
c0002ba0:	6a 01                	push   $0x1
c0002ba2:	50                   	push   %eax
c0002ba3:	52                   	push   %edx
c0002ba4:	e8 76 fa ff ff       	call   c000261f <bitmap_set>
c0002ba9:	83 c4 10             	add    $0x10,%esp
c0002bac:	eb 78                	jmp    c0002c26 <get_a_page+0x117>
/work/x86_os_my/kernel/memory.c:241

	} else if (cur->pgdir == NULL && pf == PF_KERNEL) {
c0002bae:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002bb1:	8b 40 54             	mov    0x54(%eax),%eax
c0002bb4:	85 c0                	test   %eax,%eax
c0002bb6:	75 52                	jne    c0002c0a <get_a_page+0xfb>
/work/x86_os_my/kernel/memory.c:241 (discriminator 1)
c0002bb8:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c0002bbc:	75 4c                	jne    c0002c0a <get_a_page+0xfb>
/work/x86_os_my/kernel/memory.c:243
		/* 如果是内核线程申请内核内存,就修改 kernel_vaddr */
		bit_idx = (vaddr - kernel_vaddr.vaddr_start) / PG_SIZE;
c0002bbe:	a1 50 21 01 c0       	mov    0xc0012150,%eax
c0002bc3:	8b 55 0c             	mov    0xc(%ebp),%edx
c0002bc6:	29 c2                	sub    %eax,%edx
c0002bc8:	89 d0                	mov    %edx,%eax
c0002bca:	c1 e8 0c             	shr    $0xc,%eax
c0002bcd:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:244
		ASSERT(bit_idx > 0);
c0002bd0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0002bd4:	7f 1c                	jg     c0002bf2 <get_a_page+0xe3>
/work/x86_os_my/kernel/memory.c:244 (discriminator 1)
c0002bd6:	68 e8 cd 00 c0       	push   $0xc000cde8
c0002bdb:	68 fc d0 00 c0       	push   $0xc000d0fc
c0002be0:	68 f4 00 00 00       	push   $0xf4
c0002be5:	68 8f cd 00 c0       	push   $0xc000cd8f
c0002bea:	e8 c2 f7 ff ff       	call   c00023b1 <panic_spin>
c0002bef:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:245
		bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx, 1);
c0002bf2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0002bf5:	83 ec 04             	sub    $0x4,%esp
c0002bf8:	6a 01                	push   $0x1
c0002bfa:	50                   	push   %eax
c0002bfb:	68 48 21 01 c0       	push   $0xc0012148
c0002c00:	e8 1a fa ff ff       	call   c000261f <bitmap_set>
c0002c05:	83 c4 10             	add    $0x10,%esp
c0002c08:	eb 1c                	jmp    c0002c26 <get_a_page+0x117>
/work/x86_os_my/kernel/memory.c:248

	} else {
		PANIC("get_a_page:not allow kernel alloc userspace or user alloc kernelspace by get_a_page");
c0002c0a:	68 f4 cd 00 c0       	push   $0xc000cdf4
c0002c0f:	68 fc d0 00 c0       	push   $0xc000d0fc
c0002c14:	68 f8 00 00 00       	push   $0xf8
c0002c19:	68 8f cd 00 c0       	push   $0xc000cd8f
c0002c1e:	e8 8e f7 ff ff       	call   c00023b1 <panic_spin>
c0002c23:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:251
	}

	void* page_phyaddr = palloc(mem_pool);
c0002c26:	83 ec 0c             	sub    $0xc,%esp
c0002c29:	ff 75 f4             	pushl  -0xc(%ebp)
c0002c2c:	e8 01 fc ff ff       	call   c0002832 <palloc>
c0002c31:	83 c4 10             	add    $0x10,%esp
c0002c34:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:252
	if (page_phyaddr == NULL) {
c0002c37:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0002c3b:	75 19                	jne    c0002c56 <get_a_page+0x147>
/work/x86_os_my/kernel/memory.c:253
		lock_release(&mem_pool->lock);	//哈哈
c0002c3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002c40:	83 c0 10             	add    $0x10,%eax
c0002c43:	83 ec 0c             	sub    $0xc,%esp
c0002c46:	50                   	push   %eax
c0002c47:	e8 3a 1f 00 00       	call   c0004b86 <lock_release>
c0002c4c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:254
		return NULL;
c0002c4f:	b8 00 00 00 00       	mov    $0x0,%eax
c0002c54:	eb 27                	jmp    c0002c7d <get_a_page+0x16e>
/work/x86_os_my/kernel/memory.c:256
	}
	page_table_add((void*)vaddr, page_phyaddr);
c0002c56:	8b 45 0c             	mov    0xc(%ebp),%eax
c0002c59:	83 ec 08             	sub    $0x8,%esp
c0002c5c:	ff 75 e8             	pushl  -0x18(%ebp)
c0002c5f:	50                   	push   %eax
c0002c60:	e8 21 fc ff ff       	call   c0002886 <page_table_add>
c0002c65:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:258
	
	lock_release(&mem_pool->lock);
c0002c68:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002c6b:	83 c0 10             	add    $0x10,%eax
c0002c6e:	83 ec 0c             	sub    $0xc,%esp
c0002c71:	50                   	push   %eax
c0002c72:	e8 0f 1f 00 00       	call   c0004b86 <lock_release>
c0002c77:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:259
	return (void*)vaddr;
c0002c7a:	8b 45 0c             	mov    0xc(%ebp),%eax
/work/x86_os_my/kernel/memory.c:260
}
c0002c7d:	c9                   	leave  
c0002c7e:	c3                   	ret    

c0002c7f <get_a_page_without_opvaddrbitmap>:
get_a_page_without_opvaddrbitmap():
/work/x86_os_my/kernel/memory.c:265

/* 安装1页大小的vaddr，专门针对fork时不修改虚拟地址位图的情况
 * 函数功能和 get_a_page 类似，为 vaddr 分配一物理页，只是少了虚拟地址池位图的操作
 */
void* get_a_page_without_opvaddrbitmap(enum pool_flags pf, uint32_t vaddr) {
c0002c7f:	55                   	push   %ebp
c0002c80:	89 e5                	mov    %esp,%ebp
c0002c82:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:266
	struct pool* mem_pool = pf & PF_KERNEL ? &kernel_pool : &user_pool;
c0002c85:	8b 45 08             	mov    0x8(%ebp),%eax
c0002c88:	83 e0 01             	and    $0x1,%eax
c0002c8b:	85 c0                	test   %eax,%eax
c0002c8d:	74 07                	je     c0002c96 <get_a_page_without_opvaddrbitmap+0x17>
/work/x86_os_my/kernel/memory.c:266 (discriminator 1)
c0002c8f:	b8 60 21 01 c0       	mov    $0xc0012160,%eax
c0002c94:	eb 05                	jmp    c0002c9b <get_a_page_without_opvaddrbitmap+0x1c>
/work/x86_os_my/kernel/memory.c:266 (discriminator 2)
c0002c96:	b8 60 20 01 c0       	mov    $0xc0012060,%eax
/work/x86_os_my/kernel/memory.c:266 (discriminator 4)
c0002c9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:267 (discriminator 4)
	lock_acquire(&mem_pool->lock);
c0002c9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002ca1:	83 c0 10             	add    $0x10,%eax
c0002ca4:	83 ec 0c             	sub    $0xc,%esp
c0002ca7:	50                   	push   %eax
c0002ca8:	e8 62 1e 00 00       	call   c0004b0f <lock_acquire>
c0002cad:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:268 (discriminator 4)
	void* page_phyaddr = palloc(mem_pool);
c0002cb0:	83 ec 0c             	sub    $0xc,%esp
c0002cb3:	ff 75 f4             	pushl  -0xc(%ebp)
c0002cb6:	e8 77 fb ff ff       	call   c0002832 <palloc>
c0002cbb:	83 c4 10             	add    $0x10,%esp
c0002cbe:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:269 (discriminator 4)
	if (page_phyaddr == NULL) {
c0002cc1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0002cc5:	75 19                	jne    c0002ce0 <get_a_page_without_opvaddrbitmap+0x61>
/work/x86_os_my/kernel/memory.c:270
		lock_release(&mem_pool->lock);
c0002cc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002cca:	83 c0 10             	add    $0x10,%eax
c0002ccd:	83 ec 0c             	sub    $0xc,%esp
c0002cd0:	50                   	push   %eax
c0002cd1:	e8 b0 1e 00 00       	call   c0004b86 <lock_release>
c0002cd6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:271
		return NULL;
c0002cd9:	b8 00 00 00 00       	mov    $0x0,%eax
c0002cde:	eb 27                	jmp    c0002d07 <get_a_page_without_opvaddrbitmap+0x88>
/work/x86_os_my/kernel/memory.c:273
	}
	page_table_add((void*)vaddr, page_phyaddr);
c0002ce0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0002ce3:	83 ec 08             	sub    $0x8,%esp
c0002ce6:	ff 75 f0             	pushl  -0x10(%ebp)
c0002ce9:	50                   	push   %eax
c0002cea:	e8 97 fb ff ff       	call   c0002886 <page_table_add>
c0002cef:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:274
	lock_release(&mem_pool->lock);
c0002cf2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0002cf5:	83 c0 10             	add    $0x10,%eax
c0002cf8:	83 ec 0c             	sub    $0xc,%esp
c0002cfb:	50                   	push   %eax
c0002cfc:	e8 85 1e 00 00       	call   c0004b86 <lock_release>
c0002d01:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:275
	return (void*)vaddr;
c0002d04:	8b 45 0c             	mov    0xc(%ebp),%eax
/work/x86_os_my/kernel/memory.c:276
}
c0002d07:	c9                   	leave  
c0002d08:	c3                   	ret    

c0002d09 <addr_v2p>:
addr_v2p():
/work/x86_os_my/kernel/memory.c:279

/* 得到虚拟地址映射到的物理地址 */
uint32_t addr_v2p(uint32_t vaddr) {
c0002d09:	55                   	push   %ebp
c0002d0a:	89 e5                	mov    %esp,%ebp
c0002d0c:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/memory.c:280
	uint32_t* pte = pte_ptr(vaddr);
c0002d0f:	ff 75 08             	pushl  0x8(%ebp)
c0002d12:	e8 cf fa ff ff       	call   c00027e6 <pte_ptr>
c0002d17:	83 c4 04             	add    $0x4,%esp
c0002d1a:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/kernel/memory.c:284
	/* (*pte)的内容是 vaddr 所在 pte 的内容，也就是 vaddr 最终所映射到的物理页框的 32 位地址中的高 20 位和 12 位的页表项属性，
	 * 因为页框都是自然页，低 12 位地址是 0，所以页表项 pte（和页目录项 pde）中只需要记录页框的高 20 位地址即可。
	 */
	return ((*pte & 0xfffff000) + (vaddr & 0x00000fff));
c0002d1d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0002d20:	8b 00                	mov    (%eax),%eax
c0002d22:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0002d27:	89 c2                	mov    %eax,%edx
c0002d29:	8b 45 08             	mov    0x8(%ebp),%eax
c0002d2c:	25 ff 0f 00 00       	and    $0xfff,%eax
c0002d31:	01 d0                	add    %edx,%eax
/work/x86_os_my/kernel/memory.c:285
}
c0002d33:	c9                   	leave  
c0002d34:	c3                   	ret    

c0002d35 <arena2block>:
arena2block():
/work/x86_os_my/kernel/memory.c:299
|                     |
| +-----------------+ |
+-+  mem_block_desc |←+
  +-----------------+
*/
static struct mem_block* arena2block(struct arena* a, uint32_t idx) {
c0002d35:	55                   	push   %ebp
c0002d36:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/kernel/memory.c:300
	return (struct mem_block*)((uint32_t)a + sizeof(struct arena) + idx * a->desc->block_size);
c0002d38:	8b 45 08             	mov    0x8(%ebp),%eax
c0002d3b:	8b 00                	mov    (%eax),%eax
c0002d3d:	8b 00                	mov    (%eax),%eax
c0002d3f:	0f af 45 0c          	imul   0xc(%ebp),%eax
c0002d43:	89 c2                	mov    %eax,%edx
c0002d45:	8b 45 08             	mov    0x8(%ebp),%eax
c0002d48:	01 d0                	add    %edx,%eax
c0002d4a:	83 c0 0c             	add    $0xc,%eax
/work/x86_os_my/kernel/memory.c:301
}
c0002d4d:	5d                   	pop    %ebp
c0002d4e:	c3                   	ret    

c0002d4f <block2arena>:
block2arena():
/work/x86_os_my/kernel/memory.c:306

/* 返回内存块mem_block所在的arena地址
 * 取到了虚拟地址mem_block那一整页的地址
 */
static struct arena* block2arena(struct mem_block* b) {
c0002d4f:	55                   	push   %ebp
c0002d50:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/kernel/memory.c:307
	return (struct arena*)((uint32_t)b & 0xfffff000);
c0002d52:	8b 45 08             	mov    0x8(%ebp),%eax
c0002d55:	25 00 f0 ff ff       	and    $0xfffff000,%eax
/work/x86_os_my/kernel/memory.c:308
}
c0002d5a:	5d                   	pop    %ebp
c0002d5b:	c3                   	ret    

c0002d5c <sys_malloc>:
sys_malloc():
/work/x86_os_my/kernel/memory.c:319
 * 3.内存块地址被返回给用户后，用户可以自由使用此内存块 mem_block
 *   会把此内存块中的 list_elem 型变量 free_elem 覆盖
 *   不过 arena->mem_block_desc->free_list 中的元素已经记录了 mem_block->list_elem 的地址
 *   使用时覆盖的，只是 mem_block 的内容。
 */
void* sys_malloc(uint32_t size) {
c0002d5c:	55                   	push   %ebp
c0002d5d:	89 e5                	mov    %esp,%ebp
c0002d5f:	83 ec 38             	sub    $0x38,%esp
/work/x86_os_my/kernel/memory.c:324
	enum pool_flags PF;
	struct pool* mem_pool;
	uint32_t pool_size;
	struct mem_block_desc* descs;
	struct task_struct* cur_thread = running_thread();
c0002d62:	e8 d3 0e 00 00       	call   c0003c3a <running_thread>
c0002d67:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/kernel/memory.c:327

	/* 判断用哪个内存池*/
	if (cur_thread->pgdir == NULL) {	// 是内核线程
c0002d6a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0002d6d:	8b 40 54             	mov    0x54(%eax),%eax
c0002d70:	85 c0                	test   %eax,%eax
c0002d72:	75 1f                	jne    c0002d93 <sys_malloc+0x37>
/work/x86_os_my/kernel/memory.c:328
		PF = PF_KERNEL;
c0002d74:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:329
		pool_size = kernel_pool.pool_size;
c0002d7b:	a1 6c 21 01 c0       	mov    0xc001216c,%eax
c0002d80:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:330
		mem_pool = &kernel_pool;
c0002d83:	c7 45 f0 60 21 01 c0 	movl   $0xc0012160,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:331
		descs = k_block_descs;
c0002d8a:	c7 45 e8 a0 20 01 c0 	movl   $0xc00120a0,-0x18(%ebp)
c0002d91:	eb 1f                	jmp    c0002db2 <sys_malloc+0x56>
/work/x86_os_my/kernel/memory.c:333
	} else {							// 用户进程pcb中的pgdir（页目录表）会在为其分配页表时创建【create_page_dir】
		PF = PF_USER;
c0002d93:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:334
		pool_size = user_pool.pool_size;
c0002d9a:	a1 6c 20 01 c0       	mov    0xc001206c,%eax
c0002d9f:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:335
		mem_pool = &user_pool;
c0002da2:	c7 45 f0 60 20 01 c0 	movl   $0xc0012060,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:336
		descs = cur_thread->u_block_desc;
c0002da9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0002dac:	83 c0 64             	add    $0x64,%eax
c0002daf:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:340
	}

	/* 若申请的内存不在内存池容量范围内则直接返回NULL */
	if (!(size > 0 && size < pool_size)) {
c0002db2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0002db6:	74 08                	je     c0002dc0 <sys_malloc+0x64>
/work/x86_os_my/kernel/memory.c:340 (discriminator 1)
c0002db8:	8b 45 08             	mov    0x8(%ebp),%eax
c0002dbb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0002dbe:	72 0a                	jb     c0002dca <sys_malloc+0x6e>
/work/x86_os_my/kernel/memory.c:341
		return NULL;
c0002dc0:	b8 00 00 00 00       	mov    $0x0,%eax
c0002dc5:	e9 c5 02 00 00       	jmp    c000308f <sys_malloc+0x333>
/work/x86_os_my/kernel/memory.c:346
	}

	struct arena* a;
	struct mem_block* b;
	lock_acquire(&mem_pool->lock);
c0002dca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002dcd:	83 c0 10             	add    $0x10,%eax
c0002dd0:	83 ec 0c             	sub    $0xc,%esp
c0002dd3:	50                   	push   %eax
c0002dd4:	e8 36 1d 00 00       	call   c0004b0f <lock_acquire>
c0002dd9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:349

	/* 超过最大内存块1024, 就分配页框 */
	if (size > 1024) {
c0002ddc:	81 7d 08 00 04 00 00 	cmpl   $0x400,0x8(%ebp)
c0002de3:	0f 86 94 00 00 00    	jbe    c0002e7d <sys_malloc+0x121>
/work/x86_os_my/kernel/memory.c:350
		uint32_t page_cnt = DIV_ROUND_UP(size + sizeof(struct arena), PG_SIZE);	// 向上取整需要的页框数
c0002de9:	8b 45 08             	mov    0x8(%ebp),%eax
c0002dec:	05 0b 10 00 00       	add    $0x100b,%eax
c0002df1:	c1 e8 0c             	shr    $0xc,%eax
c0002df4:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/kernel/memory.c:352

		a = malloc_page(PF, page_cnt);
c0002df7:	83 ec 08             	sub    $0x8,%esp
c0002dfa:	ff 75 d8             	pushl  -0x28(%ebp)
c0002dfd:	ff 75 f4             	pushl  -0xc(%ebp)
c0002e00:	e8 92 fb ff ff       	call   c0002997 <malloc_page>
c0002e05:	83 c4 10             	add    $0x10,%esp
c0002e08:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/kernel/memory.c:353
		if (a != NULL) {
c0002e0b:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0002e0f:	74 50                	je     c0002e61 <sys_malloc+0x105>
/work/x86_os_my/kernel/memory.c:354
			memset(a, 0, page_cnt * PG_SIZE);
c0002e11:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0002e14:	c1 e0 0c             	shl    $0xc,%eax
c0002e17:	83 ec 04             	sub    $0x4,%esp
c0002e1a:	50                   	push   %eax
c0002e1b:	6a 00                	push   $0x0
c0002e1d:	ff 75 d4             	pushl  -0x2c(%ebp)
c0002e20:	e8 2e 0a 00 00       	call   c0003853 <memset>
c0002e25:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:358

			// 【arena结构体初始化，情况1】
			/* 对于分配的大块页框,将desc置为NULL, cnt置为页框数, large置为true */
			a->desc = NULL;
c0002e28:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002e2b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/kernel/memory.c:359
			a->cnt = page_cnt;
c0002e31:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002e34:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0002e37:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/kernel/memory.c:360
			a->large = true;
c0002e3a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002e3d:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/kernel/memory.c:362

			lock_release(&mem_pool->lock);
c0002e44:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002e47:	83 c0 10             	add    $0x10,%eax
c0002e4a:	83 ec 0c             	sub    $0xc,%esp
c0002e4d:	50                   	push   %eax
c0002e4e:	e8 33 1d 00 00       	call   c0004b86 <lock_release>
c0002e53:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:363
			return (void*)(a + 1);	// 跨过arena大小，把剩下的内存返回
c0002e56:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002e59:	83 c0 0c             	add    $0xc,%eax
c0002e5c:	e9 2e 02 00 00       	jmp    c000308f <sys_malloc+0x333>
/work/x86_os_my/kernel/memory.c:365
		} else {
			lock_release(&mem_pool->lock);
c0002e61:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002e64:	83 c0 10             	add    $0x10,%eax
c0002e67:	83 ec 0c             	sub    $0xc,%esp
c0002e6a:	50                   	push   %eax
c0002e6b:	e8 16 1d 00 00       	call   c0004b86 <lock_release>
c0002e70:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:366
			return NULL;
c0002e73:	b8 00 00 00 00       	mov    $0x0,%eax
c0002e78:	e9 12 02 00 00       	jmp    c000308f <sys_malloc+0x333>
/work/x86_os_my/kernel/memory.c:374
	} else {
	/* 若申请的内存小于等于1024,可在各种规格的mem_block_desc中去适配 */
		uint8_t desc_idx;

		/* 从内存块描述符中匹配合适的内存块规格 */
		for (desc_idx = 0; desc_idx < DESC_CNT; desc_idx++) {
c0002e7d:	c6 45 e7 00          	movb   $0x0,-0x19(%ebp)
c0002e81:	eb 25                	jmp    c0002ea8 <sys_malloc+0x14c>
/work/x86_os_my/kernel/memory.c:375
			if (size <= descs[desc_idx].block_size) {	// 从小往大后,找到后退出
c0002e83:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0002e87:	89 d0                	mov    %edx,%eax
c0002e89:	01 c0                	add    %eax,%eax
c0002e8b:	01 d0                	add    %edx,%eax
c0002e8d:	c1 e0 03             	shl    $0x3,%eax
c0002e90:	89 c2                	mov    %eax,%edx
c0002e92:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002e95:	01 d0                	add    %edx,%eax
c0002e97:	8b 00                	mov    (%eax),%eax
c0002e99:	3b 45 08             	cmp    0x8(%ebp),%eax
c0002e9c:	73 12                	jae    c0002eb0 <sys_malloc+0x154>
/work/x86_os_my/kernel/memory.c:374 (discriminator 2)
	} else {
	/* 若申请的内存小于等于1024,可在各种规格的mem_block_desc中去适配 */
		uint8_t desc_idx;

		/* 从内存块描述符中匹配合适的内存块规格 */
		for (desc_idx = 0; desc_idx < DESC_CNT; desc_idx++) {
c0002e9e:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c0002ea2:	83 c0 01             	add    $0x1,%eax
c0002ea5:	88 45 e7             	mov    %al,-0x19(%ebp)
/work/x86_os_my/kernel/memory.c:374 (discriminator 1)
c0002ea8:	80 7d e7 06          	cmpb   $0x6,-0x19(%ebp)
c0002eac:	76 d5                	jbe    c0002e83 <sys_malloc+0x127>
c0002eae:	eb 01                	jmp    c0002eb1 <sys_malloc+0x155>
/work/x86_os_my/kernel/memory.c:376
			if (size <= descs[desc_idx].block_size) {	// 从小往大后,找到后退出
				break;
c0002eb0:	90                   	nop
/work/x86_os_my/kernel/memory.c:382
			}
		}

		/* 若mem_block_desc的free_list中已经没有可用的mem_block,
		 * 就创建新的arena提供mem_block */
		if (list_empty(&descs[desc_idx].free_list)) {
c0002eb1:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0002eb5:	89 d0                	mov    %edx,%eax
c0002eb7:	01 c0                	add    %eax,%eax
c0002eb9:	01 d0                	add    %edx,%eax
c0002ebb:	c1 e0 03             	shl    $0x3,%eax
c0002ebe:	89 c2                	mov    %eax,%edx
c0002ec0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002ec3:	01 d0                	add    %edx,%eax
c0002ec5:	83 c0 08             	add    $0x8,%eax
c0002ec8:	83 ec 0c             	sub    $0xc,%esp
c0002ecb:	50                   	push   %eax
c0002ecc:	e8 48 19 00 00       	call   c0004819 <list_empty>
c0002ed1:	83 c4 10             	add    $0x10,%esp
c0002ed4:	85 c0                	test   %eax,%eax
c0002ed6:	0f 84 31 01 00 00    	je     c000300d <sys_malloc+0x2b1>
/work/x86_os_my/kernel/memory.c:383
			a = malloc_page(PF, 1);       // 分配1页框做为arena
c0002edc:	83 ec 08             	sub    $0x8,%esp
c0002edf:	6a 01                	push   $0x1
c0002ee1:	ff 75 f4             	pushl  -0xc(%ebp)
c0002ee4:	e8 ae fa ff ff       	call   c0002997 <malloc_page>
c0002ee9:	83 c4 10             	add    $0x10,%esp
c0002eec:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/kernel/memory.c:384
			if (a == NULL) {
c0002eef:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0002ef3:	75 1c                	jne    c0002f11 <sys_malloc+0x1b5>
/work/x86_os_my/kernel/memory.c:385
				lock_release(&mem_pool->lock);
c0002ef5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0002ef8:	83 c0 10             	add    $0x10,%eax
c0002efb:	83 ec 0c             	sub    $0xc,%esp
c0002efe:	50                   	push   %eax
c0002eff:	e8 82 1c 00 00       	call   c0004b86 <lock_release>
c0002f04:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:386
				return NULL;
c0002f07:	b8 00 00 00 00       	mov    $0x0,%eax
c0002f0c:	e9 7e 01 00 00       	jmp    c000308f <sys_malloc+0x333>
/work/x86_os_my/kernel/memory.c:388
			}
			memset(a, 0, PG_SIZE);
c0002f11:	83 ec 04             	sub    $0x4,%esp
c0002f14:	68 00 10 00 00       	push   $0x1000
c0002f19:	6a 00                	push   $0x0
c0002f1b:	ff 75 d4             	pushl  -0x2c(%ebp)
c0002f1e:	e8 30 09 00 00       	call   c0003853 <memset>
c0002f23:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:392

			// 【arena结构体初始化，情况2】
			/* 对于分配的小块内存,将desc置为相应内存块描述符, cnt置为此arena可用的内存块数, large置为false */
			a->desc = &descs[desc_idx];
c0002f26:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0002f2a:	89 d0                	mov    %edx,%eax
c0002f2c:	01 c0                	add    %eax,%eax
c0002f2e:	01 d0                	add    %edx,%eax
c0002f30:	c1 e0 03             	shl    $0x3,%eax
c0002f33:	89 c2                	mov    %eax,%edx
c0002f35:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002f38:	01 c2                	add    %eax,%edx
c0002f3a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002f3d:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/kernel/memory.c:393
			a->large = false;
c0002f3f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002f42:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
/work/x86_os_my/kernel/memory.c:394
			a->cnt = descs[desc_idx].blocks_per_arena;
c0002f49:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0002f4d:	89 d0                	mov    %edx,%eax
c0002f4f:	01 c0                	add    %eax,%eax
c0002f51:	01 d0                	add    %edx,%eax
c0002f53:	c1 e0 03             	shl    $0x3,%eax
c0002f56:	89 c2                	mov    %eax,%edx
c0002f58:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002f5b:	01 d0                	add    %edx,%eax
c0002f5d:	8b 50 04             	mov    0x4(%eax),%edx
c0002f60:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0002f63:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/kernel/memory.c:396

			enum intr_status old_status = intr_disable();
c0002f66:	e8 5e ea ff ff       	call   c00019c9 <intr_disable>
c0002f6b:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/kernel/memory.c:399
			/* 开始将arena拆分成内存块,并添加到内存块描述符的free_list中 */
			uint32_t block_idx;
			for (block_idx = 0; block_idx < descs[desc_idx].blocks_per_arena; block_idx++) {
c0002f6e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c0002f75:	eb 68                	jmp    c0002fdf <sys_malloc+0x283>
/work/x86_os_my/kernel/memory.c:400
				b = arena2block(a, block_idx);
c0002f77:	83 ec 08             	sub    $0x8,%esp
c0002f7a:	ff 75 e0             	pushl  -0x20(%ebp)
c0002f7d:	ff 75 d4             	pushl  -0x2c(%ebp)
c0002f80:	e8 b0 fd ff ff       	call   c0002d35 <arena2block>
c0002f85:	83 c4 10             	add    $0x10,%esp
c0002f88:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/kernel/memory.c:401
				ASSERT(!elem_find(&a->desc->free_list, &b->free_elem));
c0002f8b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0002f8e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0002f91:	8b 12                	mov    (%edx),%edx
c0002f93:	83 c2 08             	add    $0x8,%edx
c0002f96:	83 ec 08             	sub    $0x8,%esp
c0002f99:	50                   	push   %eax
c0002f9a:	52                   	push   %edx
c0002f9b:	e8 ac 17 00 00       	call   c000474c <elem_find>
c0002fa0:	83 c4 10             	add    $0x10,%esp
c0002fa3:	85 c0                	test   %eax,%eax
c0002fa5:	74 1c                	je     c0002fc3 <sys_malloc+0x267>
/work/x86_os_my/kernel/memory.c:401 (discriminator 1)
c0002fa7:	68 48 ce 00 c0       	push   $0xc000ce48
c0002fac:	68 08 d1 00 c0       	push   $0xc000d108
c0002fb1:	68 91 01 00 00       	push   $0x191
c0002fb6:	68 8f cd 00 c0       	push   $0xc000cd8f
c0002fbb:	e8 f1 f3 ff ff       	call   c00023b1 <panic_spin>
c0002fc0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:402 (discriminator 2)
				list_append(&a->desc->free_list, &b->free_elem);
c0002fc3:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0002fc6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0002fc9:	8b 12                	mov    (%edx),%edx
c0002fcb:	83 c2 08             	add    $0x8,%edx
c0002fce:	83 ec 08             	sub    $0x8,%esp
c0002fd1:	50                   	push   %eax
c0002fd2:	52                   	push   %edx
c0002fd3:	e8 fa 16 00 00       	call   c00046d2 <list_append>
c0002fd8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:399 (discriminator 2)
			a->cnt = descs[desc_idx].blocks_per_arena;

			enum intr_status old_status = intr_disable();
			/* 开始将arena拆分成内存块,并添加到内存块描述符的free_list中 */
			uint32_t block_idx;
			for (block_idx = 0; block_idx < descs[desc_idx].blocks_per_arena; block_idx++) {
c0002fdb:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
/work/x86_os_my/kernel/memory.c:399 (discriminator 1)
c0002fdf:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0002fe3:	89 d0                	mov    %edx,%eax
c0002fe5:	01 c0                	add    %eax,%eax
c0002fe7:	01 d0                	add    %edx,%eax
c0002fe9:	c1 e0 03             	shl    $0x3,%eax
c0002fec:	89 c2                	mov    %eax,%edx
c0002fee:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0002ff1:	01 d0                	add    %edx,%eax
c0002ff3:	8b 40 04             	mov    0x4(%eax),%eax
c0002ff6:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0002ff9:	0f 87 78 ff ff ff    	ja     c0002f77 <sys_malloc+0x21b>
/work/x86_os_my/kernel/memory.c:404
				b = arena2block(a, block_idx);
				ASSERT(!elem_find(&a->desc->free_list, &b->free_elem));
				list_append(&a->desc->free_list, &b->free_elem);
			}
			intr_set_status(old_status);
c0002fff:	83 ec 0c             	sub    $0xc,%esp
c0003002:	ff 75 d0             	pushl  -0x30(%ebp)
c0003005:	e8 e8 e9 ff ff       	call   c00019f2 <intr_set_status>
c000300a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:408
		}

		/* 开始分配内存块 */
		b = elem2entry(struct mem_block, free_elem, list_pop(&(descs[desc_idx].free_list)));
c000300d:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0003011:	89 d0                	mov    %edx,%eax
c0003013:	01 c0                	add    %eax,%eax
c0003015:	01 d0                	add    %edx,%eax
c0003017:	c1 e0 03             	shl    $0x3,%eax
c000301a:	89 c2                	mov    %eax,%edx
c000301c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000301f:	01 d0                	add    %edx,%eax
c0003021:	83 c0 08             	add    $0x8,%eax
c0003024:	83 ec 0c             	sub    $0xc,%esp
c0003027:	50                   	push   %eax
c0003028:	e8 fd 16 00 00       	call   c000472a <list_pop>
c000302d:	83 c4 10             	add    $0x10,%esp
c0003030:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/kernel/memory.c:409
		memset(b, 0, descs[desc_idx].block_size);
c0003033:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
c0003037:	89 d0                	mov    %edx,%eax
c0003039:	01 c0                	add    %eax,%eax
c000303b:	01 d0                	add    %edx,%eax
c000303d:	c1 e0 03             	shl    $0x3,%eax
c0003040:	89 c2                	mov    %eax,%edx
c0003042:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0003045:	01 d0                	add    %edx,%eax
c0003047:	8b 00                	mov    (%eax),%eax
c0003049:	83 ec 04             	sub    $0x4,%esp
c000304c:	50                   	push   %eax
c000304d:	6a 00                	push   $0x0
c000304f:	ff 75 cc             	pushl  -0x34(%ebp)
c0003052:	e8 fc 07 00 00       	call   c0003853 <memset>
c0003057:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:411

		a = block2arena(b);	// 获取内存块b所在的arena
c000305a:	83 ec 0c             	sub    $0xc,%esp
c000305d:	ff 75 cc             	pushl  -0x34(%ebp)
c0003060:	e8 ea fc ff ff       	call   c0002d4f <block2arena>
c0003065:	83 c4 10             	add    $0x10,%esp
c0003068:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/kernel/memory.c:412
		a->cnt--;			// 将此arena中的空闲内存块数减1
c000306b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000306e:	8b 40 04             	mov    0x4(%eax),%eax
c0003071:	8d 50 ff             	lea    -0x1(%eax),%edx
c0003074:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0003077:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/kernel/memory.c:414

		lock_release(&mem_pool->lock);
c000307a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000307d:	83 c0 10             	add    $0x10,%eax
c0003080:	83 ec 0c             	sub    $0xc,%esp
c0003083:	50                   	push   %eax
c0003084:	e8 fd 1a 00 00       	call   c0004b86 <lock_release>
c0003089:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:415
		return (void*)b;
c000308c:	8b 45 cc             	mov    -0x34(%ebp),%eax
/work/x86_os_my/kernel/memory.c:417
	}
}
c000308f:	c9                   	leave  
c0003090:	c3                   	ret    

c0003091 <pfree>:
pfree():
/work/x86_os_my/kernel/memory.c:422

/* 将物理地址pg_phy_addr回收到物理内存池
 * 清理物理地址池位图
 */
void pfree(uint32_t pg_phy_addr) {
c0003091:	55                   	push   %ebp
c0003092:	89 e5                	mov    %esp,%ebp
c0003094:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:424
	struct pool* mem_pool;
	uint32_t bit_idx = 0;
c0003097:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:425
	if (pg_phy_addr >= user_pool.phy_addr_start) {	// 用户物理内存池
c000309e:	a1 68 20 01 c0       	mov    0xc0012068,%eax
c00030a3:	3b 45 08             	cmp    0x8(%ebp),%eax
c00030a6:	77 1b                	ja     c00030c3 <pfree+0x32>
/work/x86_os_my/kernel/memory.c:426
		mem_pool = &user_pool;
c00030a8:	c7 45 f4 60 20 01 c0 	movl   $0xc0012060,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:427
		bit_idx = (pg_phy_addr - user_pool.phy_addr_start) / PG_SIZE;
c00030af:	a1 68 20 01 c0       	mov    0xc0012068,%eax
c00030b4:	8b 55 08             	mov    0x8(%ebp),%edx
c00030b7:	29 c2                	sub    %eax,%edx
c00030b9:	89 d0                	mov    %edx,%eax
c00030bb:	c1 e8 0c             	shr    $0xc,%eax
c00030be:	89 45 f0             	mov    %eax,-0x10(%ebp)
c00030c1:	eb 19                	jmp    c00030dc <pfree+0x4b>
/work/x86_os_my/kernel/memory.c:429
	} else {	// 内核物理内存池
		mem_pool = &kernel_pool;
c00030c3:	c7 45 f4 60 21 01 c0 	movl   $0xc0012160,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:430
		bit_idx = (pg_phy_addr - kernel_pool.phy_addr_start) / PG_SIZE;
c00030ca:	a1 68 21 01 c0       	mov    0xc0012168,%eax
c00030cf:	8b 55 08             	mov    0x8(%ebp),%edx
c00030d2:	29 c2                	sub    %eax,%edx
c00030d4:	89 d0                	mov    %edx,%eax
c00030d6:	c1 e8 0c             	shr    $0xc,%eax
c00030d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:432
	}
	bitmap_set(&mem_pool->pool_bitmap, bit_idx, 0);	// 将位图中该位清0
c00030dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00030df:	83 ec 04             	sub    $0x4,%esp
c00030e2:	6a 00                	push   $0x0
c00030e4:	ff 75 f0             	pushl  -0x10(%ebp)
c00030e7:	50                   	push   %eax
c00030e8:	e8 32 f5 ff ff       	call   c000261f <bitmap_set>
c00030ed:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:433
}
c00030f0:	90                   	nop
c00030f1:	c9                   	leave  
c00030f2:	c3                   	ret    

c00030f3 <page_table_pte_remove>:
page_table_pte_remove():
/work/x86_os_my/kernel/memory.c:436

/* 去掉页表中虚拟地址vaddr的映射,只去掉vaddr对应的pte */
static void page_table_pte_remove(uint32_t vaddr) {
c00030f3:	55                   	push   %ebp
c00030f4:	89 e5                	mov    %esp,%ebp
c00030f6:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/kernel/memory.c:437
	uint32_t* pte = pte_ptr(vaddr);
c00030f9:	8b 45 08             	mov    0x8(%ebp),%eax
c00030fc:	50                   	push   %eax
c00030fd:	e8 e4 f6 ff ff       	call   c00027e6 <pte_ptr>
c0003102:	83 c4 04             	add    $0x4,%esp
c0003105:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/kernel/memory.c:438
	*pte &= ~PG_P_1;	// 将页表项pte的P位置0
c0003108:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000310b:	8b 00                	mov    (%eax),%eax
c000310d:	83 e0 fe             	and    $0xfffffffe,%eax
c0003110:	89 c2                	mov    %eax,%edx
c0003112:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003115:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/kernel/memory.c:439
	asm volatile ("invlpg %0"::"m" (vaddr):"memory");	//更新tlb
c0003117:	0f 01 7d 08          	invlpg 0x8(%ebp)
/work/x86_os_my/kernel/memory.c:442
	/*更新 TLB 有两种方式，一是用 invlpg 指令更新单条虚拟地址条目，
	另外一个是重新加载 cr3 寄存器，这将直接清空 TLB，相当于更新整个页表。*/
}
c000311b:	90                   	nop
c000311c:	c9                   	leave  
c000311d:	c3                   	ret    

c000311e <vaddr_remove>:
vaddr_remove():
/work/x86_os_my/kernel/memory.c:447

/* 在虚拟地址池中释放以_vaddr起始的连续pg_cnt个虚拟页地址
 * 清理虚拟地址池位图
 */
static void vaddr_remove(enum pool_flags pf, void* _vaddr, uint32_t pg_cnt) {
c000311e:	55                   	push   %ebp
c000311f:	89 e5                	mov    %esp,%ebp
c0003121:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:448
	uint32_t bit_idx_start = 0, vaddr = (uint32_t)_vaddr, cnt = 0;
c0003124:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c000312b:	8b 45 0c             	mov    0xc(%ebp),%eax
c000312e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0003131:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:450

	if (pf == PF_KERNEL) {	// 内核虚拟内存池
c0003138:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c000313c:	75 3f                	jne    c000317d <vaddr_remove+0x5f>
/work/x86_os_my/kernel/memory.c:451
		bit_idx_start = (vaddr - kernel_vaddr.vaddr_start) / PG_SIZE;
c000313e:	a1 50 21 01 c0       	mov    0xc0012150,%eax
c0003143:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0003146:	29 c2                	sub    %eax,%edx
c0003148:	89 d0                	mov    %edx,%eax
c000314a:	c1 e8 0c             	shr    $0xc,%eax
c000314d:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:452
		while(cnt < pg_cnt) {
c0003150:	eb 21                	jmp    c0003173 <vaddr_remove+0x55>
/work/x86_os_my/kernel/memory.c:453
			bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
c0003152:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003155:	8d 50 01             	lea    0x1(%eax),%edx
c0003158:	89 55 f4             	mov    %edx,-0xc(%ebp)
c000315b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000315e:	01 d0                	add    %edx,%eax
c0003160:	83 ec 04             	sub    $0x4,%esp
c0003163:	6a 00                	push   $0x0
c0003165:	50                   	push   %eax
c0003166:	68 48 21 01 c0       	push   $0xc0012148
c000316b:	e8 af f4 ff ff       	call   c000261f <bitmap_set>
c0003170:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:452
static void vaddr_remove(enum pool_flags pf, void* _vaddr, uint32_t pg_cnt) {
	uint32_t bit_idx_start = 0, vaddr = (uint32_t)_vaddr, cnt = 0;

	if (pf == PF_KERNEL) {	// 内核虚拟内存池
		bit_idx_start = (vaddr - kernel_vaddr.vaddr_start) / PG_SIZE;
		while(cnt < pg_cnt) {
c0003173:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003176:	3b 45 10             	cmp    0x10(%ebp),%eax
c0003179:	72 d7                	jb     c0003152 <vaddr_remove+0x34>
/work/x86_os_my/kernel/memory.c:462
		bit_idx_start = (vaddr - cur_thread->userprog_vaddr.vaddr_start) / PG_SIZE;
		while(cnt < pg_cnt) {
			bitmap_set(&cur_thread->userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
		}
	}
}
c000317b:	eb 48                	jmp    c00031c5 <vaddr_remove+0xa7>
/work/x86_os_my/kernel/memory.c:456
		bit_idx_start = (vaddr - kernel_vaddr.vaddr_start) / PG_SIZE;
		while(cnt < pg_cnt) {
			bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
		}
	} else {	// 用户虚拟内存池
		struct task_struct* cur_thread = running_thread();
c000317d:	e8 b8 0a 00 00       	call   c0003c3a <running_thread>
c0003182:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:457
		bit_idx_start = (vaddr - cur_thread->userprog_vaddr.vaddr_start) / PG_SIZE;
c0003185:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0003188:	8b 40 60             	mov    0x60(%eax),%eax
c000318b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c000318e:	29 c2                	sub    %eax,%edx
c0003190:	89 d0                	mov    %edx,%eax
c0003192:	c1 e8 0c             	shr    $0xc,%eax
c0003195:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:458
		while(cnt < pg_cnt) {
c0003198:	eb 23                	jmp    c00031bd <vaddr_remove+0x9f>
/work/x86_os_my/kernel/memory.c:459
			bitmap_set(&cur_thread->userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
c000319a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000319d:	8d 50 01             	lea    0x1(%eax),%edx
c00031a0:	89 55 f4             	mov    %edx,-0xc(%ebp)
c00031a3:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00031a6:	01 c2                	add    %eax,%edx
c00031a8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00031ab:	83 c0 58             	add    $0x58,%eax
c00031ae:	83 ec 04             	sub    $0x4,%esp
c00031b1:	6a 00                	push   $0x0
c00031b3:	52                   	push   %edx
c00031b4:	50                   	push   %eax
c00031b5:	e8 65 f4 ff ff       	call   c000261f <bitmap_set>
c00031ba:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:458
			bitmap_set(&kernel_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
		}
	} else {	// 用户虚拟内存池
		struct task_struct* cur_thread = running_thread();
		bit_idx_start = (vaddr - cur_thread->userprog_vaddr.vaddr_start) / PG_SIZE;
		while(cnt < pg_cnt) {
c00031bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00031c0:	3b 45 10             	cmp    0x10(%ebp),%eax
c00031c3:	72 d5                	jb     c000319a <vaddr_remove+0x7c>
/work/x86_os_my/kernel/memory.c:462
			bitmap_set(&cur_thread->userprog_vaddr.vaddr_bitmap, bit_idx_start + cnt++, 0);
		}
	}
}
c00031c5:	90                   	nop
c00031c6:	c9                   	leave  
c00031c7:	c3                   	ret    

c00031c8 <mfree_page>:
mfree_page():
/work/x86_os_my/kernel/memory.c:465

/* 释放以虚拟地址vaddr为起始的cnt个物理页框 */
void mfree_page(enum pool_flags pf, void* _vaddr, uint32_t pg_cnt) {
c00031c8:	55                   	push   %ebp
c00031c9:	89 e5                	mov    %esp,%ebp
c00031cb:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:467
	uint32_t pg_phy_addr;
	uint32_t vaddr = (int32_t)_vaddr, page_cnt = 0;
c00031ce:	8b 45 0c             	mov    0xc(%ebp),%eax
c00031d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00031d4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:468
	ASSERT(pg_cnt >=1 && vaddr % PG_SIZE == 0);
c00031db:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c00031df:	74 0c                	je     c00031ed <mfree_page+0x25>
/work/x86_os_my/kernel/memory.c:468 (discriminator 1)
c00031e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00031e4:	25 ff 0f 00 00       	and    $0xfff,%eax
c00031e9:	85 c0                	test   %eax,%eax
c00031eb:	74 1c                	je     c0003209 <mfree_page+0x41>
/work/x86_os_my/kernel/memory.c:468 (discriminator 3)
c00031ed:	68 78 ce 00 c0       	push   $0xc000ce78
c00031f2:	68 14 d1 00 c0       	push   $0xc000d114
c00031f7:	68 d4 01 00 00       	push   $0x1d4
c00031fc:	68 8f cd 00 c0       	push   $0xc000cd8f
c0003201:	e8 ab f1 ff ff       	call   c00023b1 <panic_spin>
c0003206:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:469
	pg_phy_addr = addr_v2p(vaddr);
c0003209:	83 ec 0c             	sub    $0xc,%esp
c000320c:	ff 75 f4             	pushl  -0xc(%ebp)
c000320f:	e8 f5 fa ff ff       	call   c0002d09 <addr_v2p>
c0003214:	83 c4 10             	add    $0x10,%esp
c0003217:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:472

	/* 确保待释放的物理内存在低端1M+1k大小的页目录+1k大小的页表地址范围外【内核空间】 */
	ASSERT((pg_phy_addr % PG_SIZE) == 0 && pg_phy_addr >= 0x102000);
c000321a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000321d:	25 ff 0f 00 00       	and    $0xfff,%eax
c0003222:	85 c0                	test   %eax,%eax
c0003224:	75 09                	jne    c000322f <mfree_page+0x67>
/work/x86_os_my/kernel/memory.c:472 (discriminator 1)
c0003226:	81 7d ec ff 1f 10 00 	cmpl   $0x101fff,-0x14(%ebp)
c000322d:	77 1c                	ja     c000324b <mfree_page+0x83>
/work/x86_os_my/kernel/memory.c:472 (discriminator 3)
c000322f:	68 9c ce 00 c0       	push   $0xc000ce9c
c0003234:	68 14 d1 00 c0       	push   $0xc000d114
c0003239:	68 d8 01 00 00       	push   $0x1d8
c000323e:	68 8f cd 00 c0       	push   $0xc000cd8f
c0003243:	e8 69 f1 ff ff       	call   c00023b1 <panic_spin>
c0003248:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:476

	/* 判断pg_phy_addr属于用户物理内存池还是内核物理内存池 */
	/* 位于user_pool内存池 */
	if (pg_phy_addr >= user_pool.phy_addr_start) {
c000324b:	a1 68 20 01 c0       	mov    0xc0012068,%eax
c0003250:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0003253:	0f 87 94 00 00 00    	ja     c00032ed <mfree_page+0x125>
/work/x86_os_my/kernel/memory.c:477
		vaddr -= PG_SIZE;
c0003259:	81 6d f4 00 10 00 00 	subl   $0x1000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:478
		while (page_cnt < pg_cnt) {
c0003260:	eb 6a                	jmp    c00032cc <mfree_page+0x104>
/work/x86_os_my/kernel/memory.c:479
			vaddr += PG_SIZE;
c0003262:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:480
			pg_phy_addr = addr_v2p(vaddr);
c0003269:	83 ec 0c             	sub    $0xc,%esp
c000326c:	ff 75 f4             	pushl  -0xc(%ebp)
c000326f:	e8 95 fa ff ff       	call   c0002d09 <addr_v2p>
c0003274:	83 c4 10             	add    $0x10,%esp
c0003277:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:483

			/* 确保物理地址属于用户物理内存池 */
			ASSERT((pg_phy_addr % PG_SIZE) == 0 && pg_phy_addr >= user_pool.phy_addr_start);
c000327a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000327d:	25 ff 0f 00 00       	and    $0xfff,%eax
c0003282:	85 c0                	test   %eax,%eax
c0003284:	75 0a                	jne    c0003290 <mfree_page+0xc8>
/work/x86_os_my/kernel/memory.c:483 (discriminator 1)
c0003286:	a1 68 20 01 c0       	mov    0xc0012068,%eax
c000328b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c000328e:	76 1c                	jbe    c00032ac <mfree_page+0xe4>
/work/x86_os_my/kernel/memory.c:483 (discriminator 3)
c0003290:	68 d4 ce 00 c0       	push   $0xc000ced4
c0003295:	68 14 d1 00 c0       	push   $0xc000d114
c000329a:	68 e3 01 00 00       	push   $0x1e3
c000329f:	68 8f cd 00 c0       	push   $0xc000cd8f
c00032a4:	e8 08 f1 ff ff       	call   c00023b1 <panic_spin>
c00032a9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:486

			/* 先将对应的物理页框归还到内存池 */
			pfree(pg_phy_addr);
c00032ac:	83 ec 0c             	sub    $0xc,%esp
c00032af:	ff 75 ec             	pushl  -0x14(%ebp)
c00032b2:	e8 da fd ff ff       	call   c0003091 <pfree>
c00032b7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:489

			/* 再从页表中清除此虚拟地址所在的页表项pte */
			page_table_pte_remove(vaddr);
c00032ba:	83 ec 0c             	sub    $0xc,%esp
c00032bd:	ff 75 f4             	pushl  -0xc(%ebp)
c00032c0:	e8 2e fe ff ff       	call   c00030f3 <page_table_pte_remove>
c00032c5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:491

			page_cnt++;
c00032c8:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:478

	/* 判断pg_phy_addr属于用户物理内存池还是内核物理内存池 */
	/* 位于user_pool内存池 */
	if (pg_phy_addr >= user_pool.phy_addr_start) {
		vaddr -= PG_SIZE;
		while (page_cnt < pg_cnt) {
c00032cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00032cf:	3b 45 10             	cmp    0x10(%ebp),%eax
c00032d2:	72 8e                	jb     c0003262 <mfree_page+0x9a>
/work/x86_os_my/kernel/memory.c:494
			page_table_pte_remove(vaddr);

			page_cnt++;
		}
		/* 清空虚拟地址的位图中的相应位 */
		vaddr_remove(pf, _vaddr, pg_cnt);
c00032d4:	83 ec 04             	sub    $0x4,%esp
c00032d7:	ff 75 10             	pushl  0x10(%ebp)
c00032da:	ff 75 0c             	pushl  0xc(%ebp)
c00032dd:	ff 75 08             	pushl  0x8(%ebp)
c00032e0:	e8 39 fe ff ff       	call   c000311e <vaddr_remove>
c00032e5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:518
			page_cnt++;
		}
		/* 清空虚拟地址的位图中的相应位 */
		vaddr_remove(pf, _vaddr, pg_cnt);
	}
}
c00032e8:	e9 99 00 00 00       	jmp    c0003386 <mfree_page+0x1be>
/work/x86_os_my/kernel/memory.c:498
		/* 清空虚拟地址的位图中的相应位 */
		vaddr_remove(pf, _vaddr, pg_cnt);

	} else {
		/* 位于kernel_pool内存池 */
		vaddr -= PG_SIZE;
c00032ed:	81 6d f4 00 10 00 00 	subl   $0x1000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:499
		while (page_cnt < pg_cnt) {
c00032f4:	eb 74                	jmp    c000336a <mfree_page+0x1a2>
/work/x86_os_my/kernel/memory.c:500
			vaddr += PG_SIZE;
c00032f6:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:501
			pg_phy_addr = addr_v2p(vaddr);
c00032fd:	83 ec 0c             	sub    $0xc,%esp
c0003300:	ff 75 f4             	pushl  -0xc(%ebp)
c0003303:	e8 01 fa ff ff       	call   c0002d09 <addr_v2p>
c0003308:	83 c4 10             	add    $0x10,%esp
c000330b:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:504

			/* 确保待释放的物理内存只属于内核物理内存池 */
			ASSERT((pg_phy_addr % PG_SIZE) == 0 && pg_phy_addr >= kernel_pool.phy_addr_start && \
c000330e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0003311:	25 ff 0f 00 00       	and    $0xfff,%eax
c0003316:	85 c0                	test   %eax,%eax
c0003318:	75 14                	jne    c000332e <mfree_page+0x166>
/work/x86_os_my/kernel/memory.c:504 (discriminator 1)
c000331a:	a1 68 21 01 c0       	mov    0xc0012168,%eax
c000331f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0003322:	77 0a                	ja     c000332e <mfree_page+0x166>
/work/x86_os_my/kernel/memory.c:504 (discriminator 3)
c0003324:	a1 68 20 01 c0       	mov    0xc0012068,%eax
c0003329:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c000332c:	77 1c                	ja     c000334a <mfree_page+0x182>
/work/x86_os_my/kernel/memory.c:504 (discriminator 5)
c000332e:	68 1c cf 00 c0       	push   $0xc000cf1c
c0003333:	68 14 d1 00 c0       	push   $0xc000d114
c0003338:	68 f9 01 00 00       	push   $0x1f9
c000333d:	68 8f cd 00 c0       	push   $0xc000cd8f
c0003342:	e8 6a f0 ff ff       	call   c00023b1 <panic_spin>
c0003347:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:508
					pg_phy_addr < user_pool.phy_addr_start);

			/* 先将对应的物理页框归还到内存池 */
			pfree(pg_phy_addr);
c000334a:	83 ec 0c             	sub    $0xc,%esp
c000334d:	ff 75 ec             	pushl  -0x14(%ebp)
c0003350:	e8 3c fd ff ff       	call   c0003091 <pfree>
c0003355:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:511

			/* 再从页表中清除此虚拟地址所在的页表项pte */
			page_table_pte_remove(vaddr);
c0003358:	83 ec 0c             	sub    $0xc,%esp
c000335b:	ff 75 f4             	pushl  -0xc(%ebp)
c000335e:	e8 90 fd ff ff       	call   c00030f3 <page_table_pte_remove>
c0003363:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:513

			page_cnt++;
c0003366:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:499
		vaddr_remove(pf, _vaddr, pg_cnt);

	} else {
		/* 位于kernel_pool内存池 */
		vaddr -= PG_SIZE;
		while (page_cnt < pg_cnt) {
c000336a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000336d:	3b 45 10             	cmp    0x10(%ebp),%eax
c0003370:	72 84                	jb     c00032f6 <mfree_page+0x12e>
/work/x86_os_my/kernel/memory.c:516
			page_table_pte_remove(vaddr);

			page_cnt++;
		}
		/* 清空虚拟地址的位图中的相应位 */
		vaddr_remove(pf, _vaddr, pg_cnt);
c0003372:	83 ec 04             	sub    $0x4,%esp
c0003375:	ff 75 10             	pushl  0x10(%ebp)
c0003378:	ff 75 0c             	pushl  0xc(%ebp)
c000337b:	ff 75 08             	pushl  0x8(%ebp)
c000337e:	e8 9b fd ff ff       	call   c000311e <vaddr_remove>
c0003383:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:518
	}
}
c0003386:	90                   	nop
c0003387:	c9                   	leave  
c0003388:	c3                   	ret    

c0003389 <sys_free>:
sys_free():
/work/x86_os_my/kernel/memory.c:521

/* 回收内存ptr */
void sys_free(void* ptr) {
c0003389:	55                   	push   %ebp
c000338a:	89 e5                	mov    %esp,%ebp
c000338c:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/kernel/memory.c:522
	ASSERT(ptr != NULL);
c000338f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003393:	75 1c                	jne    c00033b1 <sys_free+0x28>
/work/x86_os_my/kernel/memory.c:522 (discriminator 1)
c0003395:	68 90 cf 00 c0       	push   $0xc000cf90
c000339a:	68 20 d1 00 c0       	push   $0xc000d120
c000339f:	68 0a 02 00 00       	push   $0x20a
c00033a4:	68 8f cd 00 c0       	push   $0xc000cd8f
c00033a9:	e8 03 f0 ff ff       	call   c00023b1 <panic_spin>
c00033ae:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:523
	if (ptr != NULL) {
c00033b1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00033b5:	0f 84 b2 01 00 00    	je     c000356d <sys_free+0x1e4>
/work/x86_os_my/kernel/memory.c:528
		enum pool_flags PF;
		struct pool* mem_pool;

		/* 判断是线程还是进程 */
		if (running_thread()->pgdir == NULL) {
c00033bb:	e8 7a 08 00 00       	call   c0003c3a <running_thread>
c00033c0:	8b 40 54             	mov    0x54(%eax),%eax
c00033c3:	85 c0                	test   %eax,%eax
c00033c5:	75 36                	jne    c00033fd <sys_free+0x74>
/work/x86_os_my/kernel/memory.c:529
			ASSERT((uint32_t)ptr >= K_HEAP_START);
c00033c7:	8b 45 08             	mov    0x8(%ebp),%eax
c00033ca:	3d ff ff 0f c0       	cmp    $0xc00fffff,%eax
c00033cf:	77 1c                	ja     c00033ed <sys_free+0x64>
/work/x86_os_my/kernel/memory.c:529 (discriminator 1)
c00033d1:	68 9c cf 00 c0       	push   $0xc000cf9c
c00033d6:	68 20 d1 00 c0       	push   $0xc000d120
c00033db:	68 11 02 00 00       	push   $0x211
c00033e0:	68 8f cd 00 c0       	push   $0xc000cd8f
c00033e5:	e8 c7 ef ff ff       	call   c00023b1 <panic_spin>
c00033ea:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:530
			PF = PF_KERNEL;
c00033ed:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:531
			mem_pool = &kernel_pool;
c00033f4:	c7 45 f0 60 21 01 c0 	movl   $0xc0012160,-0x10(%ebp)
c00033fb:	eb 0e                	jmp    c000340b <sys_free+0x82>
/work/x86_os_my/kernel/memory.c:533
		} else {
			PF = PF_USER;
c00033fd:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:534
			mem_pool = &user_pool;
c0003404:	c7 45 f0 60 20 01 c0 	movl   $0xc0012060,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:537
		}

		lock_acquire(&mem_pool->lock);
c000340b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000340e:	83 c0 10             	add    $0x10,%eax
c0003411:	83 ec 0c             	sub    $0xc,%esp
c0003414:	50                   	push   %eax
c0003415:	e8 f5 16 00 00       	call   c0004b0f <lock_acquire>
c000341a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:538
		struct mem_block* b = ptr;
c000341d:	8b 45 08             	mov    0x8(%ebp),%eax
c0003420:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:539
		struct arena* a = block2arena(b);			// 把mem_block转换成arena,获取元信息
c0003423:	83 ec 0c             	sub    $0xc,%esp
c0003426:	ff 75 e8             	pushl  -0x18(%ebp)
c0003429:	e8 21 f9 ff ff       	call   c0002d4f <block2arena>
c000342e:	83 c4 10             	add    $0x10,%esp
c0003431:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/kernel/memory.c:540
		ASSERT(a->large == 0 || a->large == 1);
c0003434:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0003437:	8b 40 08             	mov    0x8(%eax),%eax
c000343a:	85 c0                	test   %eax,%eax
c000343c:	74 27                	je     c0003465 <sys_free+0xdc>
/work/x86_os_my/kernel/memory.c:540 (discriminator 1)
c000343e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0003441:	8b 40 08             	mov    0x8(%eax),%eax
c0003444:	83 f8 01             	cmp    $0x1,%eax
c0003447:	74 1c                	je     c0003465 <sys_free+0xdc>
/work/x86_os_my/kernel/memory.c:540 (discriminator 2)
c0003449:	68 bc cf 00 c0       	push   $0xc000cfbc
c000344e:	68 20 d1 00 c0       	push   $0xc000d120
c0003453:	68 1c 02 00 00       	push   $0x21c
c0003458:	68 8f cd 00 c0       	push   $0xc000cd8f
c000345d:	e8 4f ef ff ff       	call   c00023b1 <panic_spin>
c0003462:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:541
		if (a->desc == NULL && a->large == true) {	// 大于1024的内存
c0003465:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0003468:	8b 00                	mov    (%eax),%eax
c000346a:	85 c0                	test   %eax,%eax
c000346c:	75 28                	jne    c0003496 <sys_free+0x10d>
/work/x86_os_my/kernel/memory.c:541 (discriminator 1)
c000346e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0003471:	8b 40 08             	mov    0x8(%eax),%eax
c0003474:	83 f8 01             	cmp    $0x1,%eax
c0003477:	75 1d                	jne    c0003496 <sys_free+0x10d>
/work/x86_os_my/kernel/memory.c:542
			mfree_page(PF, a, a->cnt);
c0003479:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000347c:	8b 40 04             	mov    0x4(%eax),%eax
c000347f:	83 ec 04             	sub    $0x4,%esp
c0003482:	50                   	push   %eax
c0003483:	ff 75 e4             	pushl  -0x1c(%ebp)
c0003486:	ff 75 f4             	pushl  -0xc(%ebp)
c0003489:	e8 3a fd ff ff       	call   c00031c8 <mfree_page>
c000348e:	83 c4 10             	add    $0x10,%esp
c0003491:	e9 c5 00 00 00       	jmp    c000355b <sys_free+0x1d2>
/work/x86_os_my/kernel/memory.c:546
		} else {									// 小于等于1024的内存块
			/* 先将内存块回收到free_list */
			// &b->free_elem == &b
			list_append(&a->desc->free_list, &b->free_elem);
c0003496:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0003499:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c000349c:	8b 12                	mov    (%edx),%edx
c000349e:	83 c2 08             	add    $0x8,%edx
c00034a1:	83 ec 08             	sub    $0x8,%esp
c00034a4:	50                   	push   %eax
c00034a5:	52                   	push   %edx
c00034a6:	e8 27 12 00 00       	call   c00046d2 <list_append>
c00034ab:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:549

			/* 再判断此arena中的内存块是否都是空闲,如果是就释放arena */
			if (++a->cnt == a->desc->blocks_per_arena) {
c00034ae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00034b1:	8b 40 04             	mov    0x4(%eax),%eax
c00034b4:	8d 50 01             	lea    0x1(%eax),%edx
c00034b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00034ba:	89 50 04             	mov    %edx,0x4(%eax)
c00034bd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00034c0:	8b 50 04             	mov    0x4(%eax),%edx
c00034c3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00034c6:	8b 00                	mov    (%eax),%eax
c00034c8:	8b 40 04             	mov    0x4(%eax),%eax
c00034cb:	39 c2                	cmp    %eax,%edx
c00034cd:	0f 85 88 00 00 00    	jne    c000355b <sys_free+0x1d2>
/work/x86_os_my/kernel/memory.c:551
				uint32_t block_idx;
				for (block_idx = 0; block_idx < a->desc->blocks_per_arena; block_idx++) {
c00034d3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c00034da:	eb 5f                	jmp    c000353b <sys_free+0x1b2>
/work/x86_os_my/kernel/memory.c:552
					struct mem_block*  b = arena2block(a, block_idx);
c00034dc:	83 ec 08             	sub    $0x8,%esp
c00034df:	ff 75 ec             	pushl  -0x14(%ebp)
c00034e2:	ff 75 e4             	pushl  -0x1c(%ebp)
c00034e5:	e8 4b f8 ff ff       	call   c0002d35 <arena2block>
c00034ea:	83 c4 10             	add    $0x10,%esp
c00034ed:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/kernel/memory.c:553
					ASSERT(elem_find(&a->desc->free_list, &b->free_elem));
c00034f0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00034f3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c00034f6:	8b 12                	mov    (%edx),%edx
c00034f8:	83 c2 08             	add    $0x8,%edx
c00034fb:	83 ec 08             	sub    $0x8,%esp
c00034fe:	50                   	push   %eax
c00034ff:	52                   	push   %edx
c0003500:	e8 47 12 00 00       	call   c000474c <elem_find>
c0003505:	83 c4 10             	add    $0x10,%esp
c0003508:	85 c0                	test   %eax,%eax
c000350a:	75 1c                	jne    c0003528 <sys_free+0x19f>
/work/x86_os_my/kernel/memory.c:553 (discriminator 1)
c000350c:	68 dc cf 00 c0       	push   $0xc000cfdc
c0003511:	68 20 d1 00 c0       	push   $0xc000d120
c0003516:	68 29 02 00 00       	push   $0x229
c000351b:	68 8f cd 00 c0       	push   $0xc000cd8f
c0003520:	e8 8c ee ff ff       	call   c00023b1 <panic_spin>
c0003525:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:554 (discriminator 2)
					list_remove(&b->free_elem);
c0003528:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000352b:	83 ec 0c             	sub    $0xc,%esp
c000352e:	50                   	push   %eax
c000352f:	e8 bc 11 00 00       	call   c00046f0 <list_remove>
c0003534:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:551 (discriminator 2)
			list_append(&a->desc->free_list, &b->free_elem);

			/* 再判断此arena中的内存块是否都是空闲,如果是就释放arena */
			if (++a->cnt == a->desc->blocks_per_arena) {
				uint32_t block_idx;
				for (block_idx = 0; block_idx < a->desc->blocks_per_arena; block_idx++) {
c0003537:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:551 (discriminator 1)
c000353b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000353e:	8b 00                	mov    (%eax),%eax
c0003540:	8b 40 04             	mov    0x4(%eax),%eax
c0003543:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0003546:	77 94                	ja     c00034dc <sys_free+0x153>
/work/x86_os_my/kernel/memory.c:556
					struct mem_block*  b = arena2block(a, block_idx);
					ASSERT(elem_find(&a->desc->free_list, &b->free_elem));
					list_remove(&b->free_elem);
				}
				mfree_page(PF, a, 1);
c0003548:	83 ec 04             	sub    $0x4,%esp
c000354b:	6a 01                	push   $0x1
c000354d:	ff 75 e4             	pushl  -0x1c(%ebp)
c0003550:	ff 75 f4             	pushl  -0xc(%ebp)
c0003553:	e8 70 fc ff ff       	call   c00031c8 <mfree_page>
c0003558:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:559
			}
		}
		lock_release(&mem_pool->lock);
c000355b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000355e:	83 c0 10             	add    $0x10,%eax
c0003561:	83 ec 0c             	sub    $0xc,%esp
c0003564:	50                   	push   %eax
c0003565:	e8 1c 16 00 00       	call   c0004b86 <lock_release>
c000356a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:561
	}
}
c000356d:	90                   	nop
c000356e:	c9                   	leave  
c000356f:	c3                   	ret    

c0003570 <mem_pool_init>:
mem_pool_init():
/work/x86_os_my/kernel/memory.c:564

/* 初始化内存池 */
static void mem_pool_init(uint32_t all_mem) {
c0003570:	55                   	push   %ebp
c0003571:	89 e5                	mov    %esp,%ebp
c0003573:	83 ec 38             	sub    $0x38,%esp
/work/x86_os_my/kernel/memory.c:565
	put_str("   mem_pool_init start\n");
c0003576:	83 ec 0c             	sub    $0xc,%esp
c0003579:	68 0a d0 00 c0       	push   $0xc000d00a
c000357e:	e8 7d ec ff ff       	call   c0002200 <put_str>
c0003583:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:566
	uint32_t page_table_size = PG_SIZE * 256;		// 页表大小= 1页的页目录表+第0和第768个页目录项指向同一个页表+
c0003586:	c7 45 f4 00 00 10 00 	movl   $0x100000,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:568
													// 第769~1022个页目录项共指向254个页表,共256个页框
	uint32_t used_mem = page_table_size + 0x100000;	// 0x100000为低端1M内存
c000358d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003590:	05 00 00 10 00       	add    $0x100000,%eax
c0003595:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/kernel/memory.c:569
	uint32_t free_mem = all_mem - used_mem;
c0003598:	8b 45 08             	mov    0x8(%ebp),%eax
c000359b:	2b 45 f0             	sub    -0x10(%ebp),%eax
c000359e:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/kernel/memory.c:570
	uint16_t all_free_pages = free_mem / PG_SIZE;	// 1页为4k,不管总内存是不是4k的倍数,
c00035a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00035a4:	c1 e8 0c             	shr    $0xc,%eax
c00035a7:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
/work/x86_os_my/kernel/memory.c:572
													// 对于以页为单位的内存分配策略，不足1页的内存不用考虑了。
	uint16_t kernel_free_pages = all_free_pages / 2;
c00035ab:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c00035af:	66 d1 e8             	shr    %ax
c00035b2:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
/work/x86_os_my/kernel/memory.c:573
	uint16_t user_free_pages = all_free_pages - kernel_free_pages;
c00035b6:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c00035ba:	66 2b 45 e8          	sub    -0x18(%ebp),%ax
c00035be:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
/work/x86_os_my/kernel/memory.c:577

	/* 为简化位图操作，余数不处理，坏处是这样做会丢内存。
	好处是不用做内存的越界检查,因为位图表示的内存少于实际物理内存*/
	uint32_t kbm_length = kernel_free_pages / 8;	// Kernel BitMap的长度,位图中的一位表示一页,以字节为单位
c00035c2:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
c00035c6:	66 c1 e8 03          	shr    $0x3,%ax
c00035ca:	0f b7 c0             	movzwl %ax,%eax
c00035cd:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/kernel/memory.c:578
	uint32_t ubm_length = user_free_pages / 8;		// User BitMap的长度.
c00035d0:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c00035d4:	66 c1 e8 03          	shr    $0x3,%ax
c00035d8:	0f b7 c0             	movzwl %ax,%eax
c00035db:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/kernel/memory.c:580

	uint32_t kp_start = used_mem;								// Kernel Pool start,内核内存池的起始地址
c00035de:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00035e1:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/kernel/memory.c:581
	uint32_t up_start = kp_start + kernel_free_pages * PG_SIZE;	// User Pool start,用户内存池的起始地址
c00035e4:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
c00035e8:	c1 e0 0c             	shl    $0xc,%eax
c00035eb:	89 c2                	mov    %eax,%edx
c00035ed:	8b 45 d8             	mov    -0x28(%ebp),%eax
c00035f0:	01 d0                	add    %edx,%eax
c00035f2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/kernel/memory.c:583

	kernel_pool.phy_addr_start = kp_start;
c00035f5:	8b 45 d8             	mov    -0x28(%ebp),%eax
c00035f8:	a3 68 21 01 c0       	mov    %eax,0xc0012168
/work/x86_os_my/kernel/memory.c:584
	user_pool.phy_addr_start   = up_start;
c00035fd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0003600:	a3 68 20 01 c0       	mov    %eax,0xc0012068
/work/x86_os_my/kernel/memory.c:586

	kernel_pool.pool_size = kernel_free_pages * PG_SIZE;
c0003605:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
c0003609:	c1 e0 0c             	shl    $0xc,%eax
c000360c:	a3 6c 21 01 c0       	mov    %eax,0xc001216c
/work/x86_os_my/kernel/memory.c:587
	user_pool.pool_size	 = user_free_pages * PG_SIZE;
c0003611:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0003615:	c1 e0 0c             	shl    $0xc,%eax
c0003618:	a3 6c 20 01 c0       	mov    %eax,0xc001206c
/work/x86_os_my/kernel/memory.c:589

	kernel_pool.pool_bitmap.btmp_bytes_len = kbm_length;
c000361d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0003620:	a3 60 21 01 c0       	mov    %eax,0xc0012160
/work/x86_os_my/kernel/memory.c:590
	user_pool.pool_bitmap.btmp_bytes_len	  = ubm_length;
c0003625:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0003628:	a3 60 20 01 c0       	mov    %eax,0xc0012060
/work/x86_os_my/kernel/memory.c:599
	*	而我们需要根据总内存大小在运行时，计算出位图的数组需要多少字节。
	*   所以改为指定一块内存来生成位图.
	*   ************************************************/
	// 内核使用的最高地址是0xc009f000,这是主线程的栈地址.(内核的大小预计为70K左右)
	// 32M内存占用的位图是2k.内核内存池的位图先定在MEM_BITMAP_BASE(0xc009a000)处.
	kernel_pool.pool_bitmap.bits = (void*)MEM_BITMAP_BASE;
c000362d:	c7 05 64 21 01 c0 00 	movl   $0xc009a000,0xc0012164
c0003634:	a0 09 c0 
/work/x86_os_my/kernel/memory.c:601
	/* 用户内存池的位图紧跟在内核内存池位图之后 */
	user_pool.pool_bitmap.bits = (void*)(MEM_BITMAP_BASE + kbm_length);
c0003637:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000363a:	2d 00 60 f6 3f       	sub    $0x3ff66000,%eax
c000363f:	a3 64 20 01 c0       	mov    %eax,0xc0012064
/work/x86_os_my/kernel/memory.c:604
	
	/******************** 输出内存池信息 **********************/
	put_str("      kernel_pool_bitmap_start:");put_int((int)kernel_pool.pool_bitmap.bits);
c0003644:	83 ec 0c             	sub    $0xc,%esp
c0003647:	68 24 d0 00 c0       	push   $0xc000d024
c000364c:	e8 af eb ff ff       	call   c0002200 <put_str>
c0003651:	83 c4 10             	add    $0x10,%esp
c0003654:	a1 64 21 01 c0       	mov    0xc0012164,%eax
c0003659:	83 ec 0c             	sub    $0xc,%esp
c000365c:	50                   	push   %eax
c000365d:	e8 c8 ec ff ff       	call   c000232a <put_int>
c0003662:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:605
	put_str(" kernel_pool_phy_addr_start:");put_int(kernel_pool.phy_addr_start);
c0003665:	83 ec 0c             	sub    $0xc,%esp
c0003668:	68 44 d0 00 c0       	push   $0xc000d044
c000366d:	e8 8e eb ff ff       	call   c0002200 <put_str>
c0003672:	83 c4 10             	add    $0x10,%esp
c0003675:	a1 68 21 01 c0       	mov    0xc0012168,%eax
c000367a:	83 ec 0c             	sub    $0xc,%esp
c000367d:	50                   	push   %eax
c000367e:	e8 a7 ec ff ff       	call   c000232a <put_int>
c0003683:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:606
	put_str("\n");
c0003686:	83 ec 0c             	sub    $0xc,%esp
c0003689:	68 61 d0 00 c0       	push   $0xc000d061
c000368e:	e8 6d eb ff ff       	call   c0002200 <put_str>
c0003693:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:607
	put_str("      user_pool_bitmap_start:");put_int((int)user_pool.pool_bitmap.bits);
c0003696:	83 ec 0c             	sub    $0xc,%esp
c0003699:	68 63 d0 00 c0       	push   $0xc000d063
c000369e:	e8 5d eb ff ff       	call   c0002200 <put_str>
c00036a3:	83 c4 10             	add    $0x10,%esp
c00036a6:	a1 64 20 01 c0       	mov    0xc0012064,%eax
c00036ab:	83 ec 0c             	sub    $0xc,%esp
c00036ae:	50                   	push   %eax
c00036af:	e8 76 ec ff ff       	call   c000232a <put_int>
c00036b4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:608
	put_str(" user_pool_phy_addr_start:");put_int(user_pool.phy_addr_start);
c00036b7:	83 ec 0c             	sub    $0xc,%esp
c00036ba:	68 81 d0 00 c0       	push   $0xc000d081
c00036bf:	e8 3c eb ff ff       	call   c0002200 <put_str>
c00036c4:	83 c4 10             	add    $0x10,%esp
c00036c7:	a1 68 20 01 c0       	mov    0xc0012068,%eax
c00036cc:	83 ec 0c             	sub    $0xc,%esp
c00036cf:	50                   	push   %eax
c00036d0:	e8 55 ec ff ff       	call   c000232a <put_int>
c00036d5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:609
	put_str("\n");
c00036d8:	83 ec 0c             	sub    $0xc,%esp
c00036db:	68 61 d0 00 c0       	push   $0xc000d061
c00036e0:	e8 1b eb ff ff       	call   c0002200 <put_str>
c00036e5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:612

	/* 将位图置0*/
	bitmap_init(&kernel_pool.pool_bitmap);
c00036e8:	83 ec 0c             	sub    $0xc,%esp
c00036eb:	68 60 21 01 c0       	push   $0xc0012160
c00036f0:	e8 92 ed ff ff       	call   c0002487 <bitmap_init>
c00036f5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:613
	bitmap_init(&user_pool.pool_bitmap);
c00036f8:	83 ec 0c             	sub    $0xc,%esp
c00036fb:	68 60 20 01 c0       	push   $0xc0012060
c0003700:	e8 82 ed ff ff       	call   c0002487 <bitmap_init>
c0003705:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:615

	lock_init(&kernel_pool.lock);
c0003708:	83 ec 0c             	sub    $0xc,%esp
c000370b:	68 70 21 01 c0       	push   $0xc0012170
c0003710:	e8 20 12 00 00       	call   c0004935 <lock_init>
c0003715:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:616
	lock_init(&user_pool.lock);
c0003718:	83 ec 0c             	sub    $0xc,%esp
c000371b:	68 70 20 01 c0       	push   $0xc0012070
c0003720:	e8 10 12 00 00       	call   c0004935 <lock_init>
c0003725:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:620
	
	/* 下面初始化内核虚拟地址的位图(bp_len + bits数组),按实际物理内存大小生成数组。*/
	// 用于维护内核堆的虚拟地址,所以要和内核内存池大小一致
	kernel_vaddr.vaddr_bitmap.btmp_bytes_len = kbm_length;
c0003728:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000372b:	a3 48 21 01 c0       	mov    %eax,0xc0012148
/work/x86_os_my/kernel/memory.c:622
	/* 位图的数组指向一块未使用的内存,目前定位在内核内存池和用户内存池之外*/
	kernel_vaddr.vaddr_bitmap.bits = (void*)(MEM_BITMAP_BASE + kbm_length + ubm_length);
c0003730:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0003733:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0003736:	01 d0                	add    %edx,%eax
c0003738:	2d 00 60 f6 3f       	sub    $0x3ff66000,%eax
c000373d:	a3 4c 21 01 c0       	mov    %eax,0xc001214c
/work/x86_os_my/kernel/memory.c:624

	kernel_vaddr.vaddr_start = K_HEAP_START;
c0003742:	c7 05 50 21 01 c0 00 	movl   $0xc0100000,0xc0012150
c0003749:	00 10 c0 
/work/x86_os_my/kernel/memory.c:625
	bitmap_init(&kernel_vaddr.vaddr_bitmap);
c000374c:	83 ec 0c             	sub    $0xc,%esp
c000374f:	68 48 21 01 c0       	push   $0xc0012148
c0003754:	e8 2e ed ff ff       	call   c0002487 <bitmap_init>
c0003759:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:626
	put_str("   mem_pool_init done\n");
c000375c:	83 ec 0c             	sub    $0xc,%esp
c000375f:	68 9c d0 00 c0       	push   $0xc000d09c
c0003764:	e8 97 ea ff ff       	call   c0002200 <put_str>
c0003769:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:627
}
c000376c:	90                   	nop
c000376d:	c9                   	leave  
c000376e:	c3                   	ret    

c000376f <block_desc_init>:
block_desc_init():
/work/x86_os_my/kernel/memory.c:630

/* 为malloc做准备 */
void block_desc_init(struct mem_block_desc* desc_array) {
c000376f:	55                   	push   %ebp
c0003770:	89 e5                	mov    %esp,%ebp
c0003772:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:631
   uint16_t desc_idx, block_size = 16;
c0003775:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:634

   /* 初始化每个mem_block_desc描述符 */
   for (desc_idx = 0; desc_idx < DESC_CNT; desc_idx++) {
c000377b:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c0003781:	eb 75                	jmp    c00037f8 <block_desc_init+0x89>
/work/x86_os_my/kernel/memory.c:635 (discriminator 3)
      desc_array[desc_idx].block_size = block_size;
c0003783:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0003787:	89 d0                	mov    %edx,%eax
c0003789:	01 c0                	add    %eax,%eax
c000378b:	01 d0                	add    %edx,%eax
c000378d:	c1 e0 03             	shl    $0x3,%eax
c0003790:	89 c2                	mov    %eax,%edx
c0003792:	8b 45 08             	mov    0x8(%ebp),%eax
c0003795:	01 c2                	add    %eax,%edx
c0003797:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c000379b:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/kernel/memory.c:638 (discriminator 3)

      /* 初始化arena中的内存块数量【注意计算方法】 */
      desc_array[desc_idx].blocks_per_arena = (PG_SIZE - sizeof(struct arena)) / block_size;
c000379d:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c00037a1:	89 d0                	mov    %edx,%eax
c00037a3:	01 c0                	add    %eax,%eax
c00037a5:	01 d0                	add    %edx,%eax
c00037a7:	c1 e0 03             	shl    $0x3,%eax
c00037aa:	89 c2                	mov    %eax,%edx
c00037ac:	8b 45 08             	mov    0x8(%ebp),%eax
c00037af:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
c00037b2:	b8 f4 0f 00 00       	mov    $0xff4,%eax
c00037b7:	ba 00 00 00 00       	mov    $0x0,%edx
c00037bc:	66 f7 75 f4          	divw   -0xc(%ebp)
c00037c0:	0f b7 c0             	movzwl %ax,%eax
c00037c3:	89 41 04             	mov    %eax,0x4(%ecx)
/work/x86_os_my/kernel/memory.c:640 (discriminator 3)

      list_init(&desc_array[desc_idx].free_list);
c00037c6:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c00037ca:	89 d0                	mov    %edx,%eax
c00037cc:	01 c0                	add    %eax,%eax
c00037ce:	01 d0                	add    %edx,%eax
c00037d0:	c1 e0 03             	shl    $0x3,%eax
c00037d3:	89 c2                	mov    %eax,%edx
c00037d5:	8b 45 08             	mov    0x8(%ebp),%eax
c00037d8:	01 d0                	add    %edx,%eax
c00037da:	83 c0 08             	add    $0x8,%eax
c00037dd:	83 ec 0c             	sub    $0xc,%esp
c00037e0:	50                   	push   %eax
c00037e1:	e8 5b 0e 00 00       	call   c0004641 <list_init>
c00037e6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:642 (discriminator 3)

      block_size *= 2;		// 下一个规格内存块！
c00037e9:	66 d1 65 f4          	shlw   -0xc(%ebp)
/work/x86_os_my/kernel/memory.c:634 (discriminator 3)
/* 为malloc做准备 */
void block_desc_init(struct mem_block_desc* desc_array) {
   uint16_t desc_idx, block_size = 16;

   /* 初始化每个mem_block_desc描述符 */
   for (desc_idx = 0; desc_idx < DESC_CNT; desc_idx++) {
c00037ed:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c00037f1:	83 c0 01             	add    $0x1,%eax
c00037f4:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
/work/x86_os_my/kernel/memory.c:634 (discriminator 1)
c00037f8:	66 83 7d f6 06       	cmpw   $0x6,-0xa(%ebp)
c00037fd:	76 84                	jbe    c0003783 <block_desc_init+0x14>
/work/x86_os_my/kernel/memory.c:645
      list_init(&desc_array[desc_idx].free_list);

      block_size *= 2;		// 下一个规格内存块！
	  // 16/32/64/128/256/512/1024 总共 7 种规格
   }
}
c00037ff:	90                   	nop
c0003800:	c9                   	leave  
c0003801:	c3                   	ret    

c0003802 <mem_init>:
mem_init():
/work/x86_os_my/kernel/memory.c:648

/* 内存管理部分初始化入口 */
void mem_init() {
c0003802:	55                   	push   %ebp
c0003803:	89 e5                	mov    %esp,%ebp
c0003805:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/kernel/memory.c:649
	put_str("mem_init start\n");
c0003808:	83 ec 0c             	sub    $0xc,%esp
c000380b:	68 b3 d0 00 c0       	push   $0xc000d0b3
c0003810:	e8 eb e9 ff ff       	call   c0002200 <put_str>
c0003815:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:650
	uint32_t mem_bytes_total = (*(uint32_t*)(0xb00));	//内存总数在汇编中获取，放到了地址0xb00处。
c0003818:	b8 00 0b 00 00       	mov    $0xb00,%eax
c000381d:	8b 00                	mov    (%eax),%eax
c000381f:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/kernel/memory.c:651
	mem_pool_init(mem_bytes_total);	// 初始化内存池
c0003822:	83 ec 0c             	sub    $0xc,%esp
c0003825:	ff 75 f4             	pushl  -0xc(%ebp)
c0003828:	e8 43 fd ff ff       	call   c0003570 <mem_pool_init>
c000382d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:652
	block_desc_init(k_block_descs);	// 初始化mem_block_desc数组descs,为malloc做准备
c0003830:	83 ec 0c             	sub    $0xc,%esp
c0003833:	68 a0 20 01 c0       	push   $0xc00120a0
c0003838:	e8 32 ff ff ff       	call   c000376f <block_desc_init>
c000383d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:653
	put_str("mem_init done\n");
c0003840:	83 ec 0c             	sub    $0xc,%esp
c0003843:	68 c3 d0 00 c0       	push   $0xc000d0c3
c0003848:	e8 b3 e9 ff ff       	call   c0002200 <put_str>
c000384d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/kernel/memory.c:654
}
c0003850:	90                   	nop
c0003851:	c9                   	leave  
c0003852:	c3                   	ret    

c0003853 <memset>:
memset():
/work/x86_os_my/lib/string.c:6
#include "string.h"
//#include "global.h"
#include "assert.h"

/* 将dst_起始的size个字节置为value */
void memset(void* dst_, uint8_t value, uint32_t size) {
c0003853:	55                   	push   %ebp
c0003854:	89 e5                	mov    %esp,%ebp
c0003856:	83 ec 28             	sub    $0x28,%esp
c0003859:	8b 45 0c             	mov    0xc(%ebp),%eax
c000385c:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/lib/string.c:7
   assert(dst_ != NULL);
c000385f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003863:	75 19                	jne    c000387e <memset+0x2b>
/work/x86_os_my/lib/string.c:7 (discriminator 1)
c0003865:	68 2c d1 00 c0       	push   $0xc000d12c
c000386a:	68 a0 d1 00 c0       	push   $0xc000d1a0
c000386f:	6a 07                	push   $0x7
c0003871:	68 39 d1 00 c0       	push   $0xc000d139
c0003876:	e8 31 84 00 00       	call   c000bcac <user_spin>
c000387b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:8
   uint8_t* dst = (uint8_t*)dst_;
c000387e:	8b 45 08             	mov    0x8(%ebp),%eax
c0003881:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:9
   while (size-- > 0)
c0003884:	eb 0f                	jmp    c0003895 <memset+0x42>
/work/x86_os_my/lib/string.c:10
      *dst++ = value;
c0003886:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003889:	8d 50 01             	lea    0x1(%eax),%edx
c000388c:	89 55 f4             	mov    %edx,-0xc(%ebp)
c000388f:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c0003893:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/string.c:9

/* 将dst_起始的size个字节置为value */
void memset(void* dst_, uint8_t value, uint32_t size) {
   assert(dst_ != NULL);
   uint8_t* dst = (uint8_t*)dst_;
   while (size-- > 0)
c0003895:	8b 45 10             	mov    0x10(%ebp),%eax
c0003898:	8d 50 ff             	lea    -0x1(%eax),%edx
c000389b:	89 55 10             	mov    %edx,0x10(%ebp)
c000389e:	85 c0                	test   %eax,%eax
c00038a0:	75 e4                	jne    c0003886 <memset+0x33>
/work/x86_os_my/lib/string.c:11
      *dst++ = value;
}
c00038a2:	90                   	nop
c00038a3:	c9                   	leave  
c00038a4:	c3                   	ret    

c00038a5 <memcpy>:
memcpy():
/work/x86_os_my/lib/string.c:14

/* 将src_起始的size个字节复制到dst_ */
void memcpy(void* dst_, const void* src_, uint32_t size) {
c00038a5:	55                   	push   %ebp
c00038a6:	89 e5                	mov    %esp,%ebp
c00038a8:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/string.c:15
   assert(dst_ != NULL && src_ != NULL);
c00038ab:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00038af:	74 06                	je     c00038b7 <memcpy+0x12>
/work/x86_os_my/lib/string.c:15 (discriminator 2)
c00038b1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c00038b5:	75 19                	jne    c00038d0 <memcpy+0x2b>
/work/x86_os_my/lib/string.c:15 (discriminator 3)
c00038b7:	68 46 d1 00 c0       	push   $0xc000d146
c00038bc:	68 a8 d1 00 c0       	push   $0xc000d1a8
c00038c1:	6a 0f                	push   $0xf
c00038c3:	68 39 d1 00 c0       	push   $0xc000d139
c00038c8:	e8 df 83 00 00       	call   c000bcac <user_spin>
c00038cd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:16
   uint8_t* dst = dst_;
c00038d0:	8b 45 08             	mov    0x8(%ebp),%eax
c00038d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:17
   const uint8_t* src = src_;
c00038d6:	8b 45 0c             	mov    0xc(%ebp),%eax
c00038d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/string.c:18
   while (size-- > 0)
c00038dc:	eb 17                	jmp    c00038f5 <memcpy+0x50>
/work/x86_os_my/lib/string.c:19
      *dst++ = *src++;
c00038de:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00038e1:	8d 50 01             	lea    0x1(%eax),%edx
c00038e4:	89 55 f4             	mov    %edx,-0xc(%ebp)
c00038e7:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00038ea:	8d 4a 01             	lea    0x1(%edx),%ecx
c00038ed:	89 4d f0             	mov    %ecx,-0x10(%ebp)
c00038f0:	0f b6 12             	movzbl (%edx),%edx
c00038f3:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/string.c:18
/* 将src_起始的size个字节复制到dst_ */
void memcpy(void* dst_, const void* src_, uint32_t size) {
   assert(dst_ != NULL && src_ != NULL);
   uint8_t* dst = dst_;
   const uint8_t* src = src_;
   while (size-- > 0)
c00038f5:	8b 45 10             	mov    0x10(%ebp),%eax
c00038f8:	8d 50 ff             	lea    -0x1(%eax),%edx
c00038fb:	89 55 10             	mov    %edx,0x10(%ebp)
c00038fe:	85 c0                	test   %eax,%eax
c0003900:	75 dc                	jne    c00038de <memcpy+0x39>
/work/x86_os_my/lib/string.c:20
      *dst++ = *src++;
}
c0003902:	90                   	nop
c0003903:	c9                   	leave  
c0003904:	c3                   	ret    

c0003905 <memcmp>:
memcmp():
/work/x86_os_my/lib/string.c:23

/* 连续比较以地址a_和地址b_开头的size个字节,若相等则返回0,若a_大于b_返回+1,否则返回-1 */
int memcmp(const void* a_, const void* b_, uint32_t size) {
c0003905:	55                   	push   %ebp
c0003906:	89 e5                	mov    %esp,%ebp
c0003908:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/string.c:24
   const char* a = a_;
c000390b:	8b 45 08             	mov    0x8(%ebp),%eax
c000390e:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:25
   const char* b = b_;
c0003911:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003914:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/string.c:26
   assert(a != NULL || b != NULL);
c0003917:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c000391b:	75 57                	jne    c0003974 <memcmp+0x6f>
/work/x86_os_my/lib/string.c:26 (discriminator 1)
c000391d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0003921:	75 51                	jne    c0003974 <memcmp+0x6f>
/work/x86_os_my/lib/string.c:26 (discriminator 2)
c0003923:	68 63 d1 00 c0       	push   $0xc000d163
c0003928:	68 b0 d1 00 c0       	push   $0xc000d1b0
c000392d:	6a 1a                	push   $0x1a
c000392f:	68 39 d1 00 c0       	push   $0xc000d139
c0003934:	e8 73 83 00 00       	call   c000bcac <user_spin>
c0003939:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:27 (discriminator 2)
   while (size-- > 0) {
c000393c:	eb 36                	jmp    c0003974 <memcmp+0x6f>
/work/x86_os_my/lib/string.c:28
      if(*a != *b) {
c000393e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003941:	0f b6 10             	movzbl (%eax),%edx
c0003944:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003947:	0f b6 00             	movzbl (%eax),%eax
c000394a:	38 c2                	cmp    %al,%dl
c000394c:	74 1e                	je     c000396c <memcmp+0x67>
/work/x86_os_my/lib/string.c:29
	 return *a > *b ? 1 : -1; 
c000394e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003951:	0f b6 10             	movzbl (%eax),%edx
c0003954:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003957:	0f b6 00             	movzbl (%eax),%eax
c000395a:	38 c2                	cmp    %al,%dl
c000395c:	7e 07                	jle    c0003965 <memcmp+0x60>
/work/x86_os_my/lib/string.c:29 (discriminator 1)
c000395e:	b8 01 00 00 00       	mov    $0x1,%eax
c0003963:	eb 21                	jmp    c0003986 <memcmp+0x81>
/work/x86_os_my/lib/string.c:29 (discriminator 2)
c0003965:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000396a:	eb 1a                	jmp    c0003986 <memcmp+0x81>
/work/x86_os_my/lib/string.c:31
      }
      a++;
c000396c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/lib/string.c:32
      b++;
c0003970:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/lib/string.c:27
/* 连续比较以地址a_和地址b_开头的size个字节,若相等则返回0,若a_大于b_返回+1,否则返回-1 */
int memcmp(const void* a_, const void* b_, uint32_t size) {
   const char* a = a_;
   const char* b = b_;
   assert(a != NULL || b != NULL);
   while (size-- > 0) {
c0003974:	8b 45 10             	mov    0x10(%ebp),%eax
c0003977:	8d 50 ff             	lea    -0x1(%eax),%edx
c000397a:	89 55 10             	mov    %edx,0x10(%ebp)
c000397d:	85 c0                	test   %eax,%eax
c000397f:	75 bd                	jne    c000393e <memcmp+0x39>
/work/x86_os_my/lib/string.c:34
	 return *a > *b ? 1 : -1; 
      }
      a++;
      b++;
   }
   return 0;
c0003981:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/lib/string.c:35
}
c0003986:	c9                   	leave  
c0003987:	c3                   	ret    

c0003988 <strcpy>:
strcpy():
/work/x86_os_my/lib/string.c:38

/* 将字符串从src_复制到dst_ */
char* strcpy(char* dst_, const char* src_) {
c0003988:	55                   	push   %ebp
c0003989:	89 e5                	mov    %esp,%ebp
c000398b:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/string.c:39
   assert(dst_ != NULL && src_ != NULL);
c000398e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003992:	74 06                	je     c000399a <strcpy+0x12>
/work/x86_os_my/lib/string.c:39 (discriminator 2)
c0003994:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0003998:	75 19                	jne    c00039b3 <strcpy+0x2b>
/work/x86_os_my/lib/string.c:39 (discriminator 3)
c000399a:	68 46 d1 00 c0       	push   $0xc000d146
c000399f:	68 b8 d1 00 c0       	push   $0xc000d1b8
c00039a4:	6a 27                	push   $0x27
c00039a6:	68 39 d1 00 c0       	push   $0xc000d139
c00039ab:	e8 fc 82 00 00       	call   c000bcac <user_spin>
c00039b0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:40
   char* r = dst_;		       // 用来返回目的字符串起始地址
c00039b3:	8b 45 08             	mov    0x8(%ebp),%eax
c00039b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:41
   while((*dst_++ = *src_++));
c00039b9:	90                   	nop
/work/x86_os_my/lib/string.c:41 (discriminator 1)
c00039ba:	8b 45 08             	mov    0x8(%ebp),%eax
c00039bd:	8d 50 01             	lea    0x1(%eax),%edx
c00039c0:	89 55 08             	mov    %edx,0x8(%ebp)
c00039c3:	8b 55 0c             	mov    0xc(%ebp),%edx
c00039c6:	8d 4a 01             	lea    0x1(%edx),%ecx
c00039c9:	89 4d 0c             	mov    %ecx,0xc(%ebp)
c00039cc:	0f b6 12             	movzbl (%edx),%edx
c00039cf:	88 10                	mov    %dl,(%eax)
c00039d1:	0f b6 00             	movzbl (%eax),%eax
c00039d4:	84 c0                	test   %al,%al
c00039d6:	75 e2                	jne    c00039ba <strcpy+0x32>
/work/x86_os_my/lib/string.c:42
   return r;
c00039d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/lib/string.c:43
}
c00039db:	c9                   	leave  
c00039dc:	c3                   	ret    

c00039dd <strlen>:
strlen():
/work/x86_os_my/lib/string.c:46

/* 返回字符串长度 */
uint32_t strlen(const char* str) {
c00039dd:	55                   	push   %ebp
c00039de:	89 e5                	mov    %esp,%ebp
c00039e0:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/string.c:47
   assert(str != NULL);
c00039e3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00039e7:	75 19                	jne    c0003a02 <strlen+0x25>
/work/x86_os_my/lib/string.c:47 (discriminator 1)
c00039e9:	68 7a d1 00 c0       	push   $0xc000d17a
c00039ee:	68 c0 d1 00 c0       	push   $0xc000d1c0
c00039f3:	6a 2f                	push   $0x2f
c00039f5:	68 39 d1 00 c0       	push   $0xc000d139
c00039fa:	e8 ad 82 00 00       	call   c000bcac <user_spin>
c00039ff:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:48
   const char* p = str;
c0003a02:	8b 45 08             	mov    0x8(%ebp),%eax
c0003a05:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:49
   while(*p++);
c0003a08:	90                   	nop
/work/x86_os_my/lib/string.c:49 (discriminator 1)
c0003a09:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003a0c:	8d 50 01             	lea    0x1(%eax),%edx
c0003a0f:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0003a12:	0f b6 00             	movzbl (%eax),%eax
c0003a15:	84 c0                	test   %al,%al
c0003a17:	75 f0                	jne    c0003a09 <strlen+0x2c>
/work/x86_os_my/lib/string.c:50
   return (p - str - 1);
c0003a19:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0003a1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0003a1f:	29 c2                	sub    %eax,%edx
c0003a21:	89 d0                	mov    %edx,%eax
c0003a23:	83 e8 01             	sub    $0x1,%eax
/work/x86_os_my/lib/string.c:51
}
c0003a26:	c9                   	leave  
c0003a27:	c3                   	ret    

c0003a28 <strcmp>:
strcmp():
/work/x86_os_my/lib/string.c:54

/* 比较两个字符串,若a_中的字符大于b_中的字符返回1,相等时返回0,否则返回-1. */
int8_t strcmp (const char* a, const char* b) {
c0003a28:	55                   	push   %ebp
c0003a29:	89 e5                	mov    %esp,%ebp
c0003a2b:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/lib/string.c:55
   assert(a != NULL && b != NULL);
c0003a2e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003a32:	74 06                	je     c0003a3a <strcmp+0x12>
/work/x86_os_my/lib/string.c:55 (discriminator 2)
c0003a34:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0003a38:	75 23                	jne    c0003a5d <strcmp+0x35>
/work/x86_os_my/lib/string.c:55 (discriminator 3)
c0003a3a:	68 86 d1 00 c0       	push   $0xc000d186
c0003a3f:	68 c8 d1 00 c0       	push   $0xc000d1c8
c0003a44:	6a 37                	push   $0x37
c0003a46:	68 39 d1 00 c0       	push   $0xc000d139
c0003a4b:	e8 5c 82 00 00       	call   c000bcac <user_spin>
c0003a50:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:56 (discriminator 3)
   while (*a != 0 && *a == *b) {
c0003a53:	eb 08                	jmp    c0003a5d <strcmp+0x35>
/work/x86_os_my/lib/string.c:57
      a++;
c0003a55:	83 45 08 01          	addl   $0x1,0x8(%ebp)
/work/x86_os_my/lib/string.c:58
      b++;
c0003a59:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
/work/x86_os_my/lib/string.c:56
}

/* 比较两个字符串,若a_中的字符大于b_中的字符返回1,相等时返回0,否则返回-1. */
int8_t strcmp (const char* a, const char* b) {
   assert(a != NULL && b != NULL);
   while (*a != 0 && *a == *b) {
c0003a5d:	8b 45 08             	mov    0x8(%ebp),%eax
c0003a60:	0f b6 00             	movzbl (%eax),%eax
c0003a63:	84 c0                	test   %al,%al
c0003a65:	74 10                	je     c0003a77 <strcmp+0x4f>
/work/x86_os_my/lib/string.c:56 (discriminator 1)
c0003a67:	8b 45 08             	mov    0x8(%ebp),%eax
c0003a6a:	0f b6 10             	movzbl (%eax),%edx
c0003a6d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003a70:	0f b6 00             	movzbl (%eax),%eax
c0003a73:	38 c2                	cmp    %al,%dl
c0003a75:	74 de                	je     c0003a55 <strcmp+0x2d>
/work/x86_os_my/lib/string.c:62
      a++;
      b++;
   }
/* 如果*a小于*b就返回-1,否则就属于*a大于等于*b的情况。在后面的布尔表达式"*a > *b"中,
 * 若*a大于*b,表达式就等于1,否则就表达式不成立,也就是布尔值为0,恰恰表示*a等于*b */
   return *a < *b ? -1 : *a > *b;
c0003a77:	8b 45 08             	mov    0x8(%ebp),%eax
c0003a7a:	0f b6 10             	movzbl (%eax),%edx
c0003a7d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003a80:	0f b6 00             	movzbl (%eax),%eax
c0003a83:	38 c2                	cmp    %al,%dl
c0003a85:	7c 13                	jl     c0003a9a <strcmp+0x72>
/work/x86_os_my/lib/string.c:62 (discriminator 1)
c0003a87:	8b 45 08             	mov    0x8(%ebp),%eax
c0003a8a:	0f b6 10             	movzbl (%eax),%edx
c0003a8d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003a90:	0f b6 00             	movzbl (%eax),%eax
c0003a93:	38 c2                	cmp    %al,%dl
c0003a95:	0f 9f c0             	setg   %al
c0003a98:	eb 05                	jmp    c0003a9f <strcmp+0x77>
/work/x86_os_my/lib/string.c:62 (discriminator 2)
c0003a9a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
/work/x86_os_my/lib/string.c:63 (discriminator 5)
}
c0003a9f:	c9                   	leave  
c0003aa0:	c3                   	ret    

c0003aa1 <strchr>:
strchr():
/work/x86_os_my/lib/string.c:66

/* 从左到右查找字符串str中首次出现字符ch的地址(不是下标,是地址) */
char* strchr(const char* str, const uint8_t ch) {
c0003aa1:	55                   	push   %ebp
c0003aa2:	89 e5                	mov    %esp,%ebp
c0003aa4:	83 ec 18             	sub    $0x18,%esp
c0003aa7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003aaa:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/lib/string.c:67
   assert(str != NULL);
c0003aad:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003ab1:	75 35                	jne    c0003ae8 <strchr+0x47>
/work/x86_os_my/lib/string.c:67 (discriminator 1)
c0003ab3:	68 7a d1 00 c0       	push   $0xc000d17a
c0003ab8:	68 d0 d1 00 c0       	push   $0xc000d1d0
c0003abd:	6a 43                	push   $0x43
c0003abf:	68 39 d1 00 c0       	push   $0xc000d139
c0003ac4:	e8 e3 81 00 00       	call   c000bcac <user_spin>
c0003ac9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:68 (discriminator 1)
   while (*str != 0) {
c0003acc:	eb 1a                	jmp    c0003ae8 <strchr+0x47>
/work/x86_os_my/lib/string.c:69
      if (*str == ch) {
c0003ace:	8b 45 08             	mov    0x8(%ebp),%eax
c0003ad1:	0f b6 00             	movzbl (%eax),%eax
c0003ad4:	0f be d0             	movsbl %al,%edx
c0003ad7:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0003adb:	39 c2                	cmp    %eax,%edx
c0003add:	75 05                	jne    c0003ae4 <strchr+0x43>
/work/x86_os_my/lib/string.c:70
	 return (char*)str;	    // 需要强制转化成和返回值类型一样,否则编译器会报const属性丢失,下同.
c0003adf:	8b 45 08             	mov    0x8(%ebp),%eax
c0003ae2:	eb 13                	jmp    c0003af7 <strchr+0x56>
/work/x86_os_my/lib/string.c:72
      }
      str++;
c0003ae4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
/work/x86_os_my/lib/string.c:68
}

/* 从左到右查找字符串str中首次出现字符ch的地址(不是下标,是地址) */
char* strchr(const char* str, const uint8_t ch) {
   assert(str != NULL);
   while (*str != 0) {
c0003ae8:	8b 45 08             	mov    0x8(%ebp),%eax
c0003aeb:	0f b6 00             	movzbl (%eax),%eax
c0003aee:	84 c0                	test   %al,%al
c0003af0:	75 dc                	jne    c0003ace <strchr+0x2d>
/work/x86_os_my/lib/string.c:74
      if (*str == ch) {
	 return (char*)str;	    // 需要强制转化成和返回值类型一样,否则编译器会报const属性丢失,下同.
      }
      str++;
   }
   return NULL;
c0003af2:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/lib/string.c:75
}
c0003af7:	c9                   	leave  
c0003af8:	c3                   	ret    

c0003af9 <strrchr>:
strrchr():
/work/x86_os_my/lib/string.c:78

/* 从后往前查找字符串str中首次出现字符ch的地址(不是下标,是地址) */
char* strrchr(const char* str, const uint8_t ch) {
c0003af9:	55                   	push   %ebp
c0003afa:	89 e5                	mov    %esp,%ebp
c0003afc:	83 ec 28             	sub    $0x28,%esp
c0003aff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003b02:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/lib/string.c:79
   assert(str != NULL);
c0003b05:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003b09:	75 19                	jne    c0003b24 <strrchr+0x2b>
/work/x86_os_my/lib/string.c:79 (discriminator 1)
c0003b0b:	68 7a d1 00 c0       	push   $0xc000d17a
c0003b10:	68 d8 d1 00 c0       	push   $0xc000d1d8
c0003b15:	6a 4f                	push   $0x4f
c0003b17:	68 39 d1 00 c0       	push   $0xc000d139
c0003b1c:	e8 8b 81 00 00       	call   c000bcac <user_spin>
c0003b21:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:80
   const char* last_char = NULL;
c0003b24:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/string.c:82
   /* 从头到尾遍历一次,若存在ch字符,last_char总是该字符最后一次出现在串中的地址(不是下标,是地址)*/
   while (*str != 0) {
c0003b2b:	eb 1b                	jmp    c0003b48 <strrchr+0x4f>
/work/x86_os_my/lib/string.c:83
      if (*str == ch) {
c0003b2d:	8b 45 08             	mov    0x8(%ebp),%eax
c0003b30:	0f b6 00             	movzbl (%eax),%eax
c0003b33:	0f be d0             	movsbl %al,%edx
c0003b36:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0003b3a:	39 c2                	cmp    %eax,%edx
c0003b3c:	75 06                	jne    c0003b44 <strrchr+0x4b>
/work/x86_os_my/lib/string.c:84
	 last_char = str;
c0003b3e:	8b 45 08             	mov    0x8(%ebp),%eax
c0003b41:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:86
      }
      str++;
c0003b44:	83 45 08 01          	addl   $0x1,0x8(%ebp)
/work/x86_os_my/lib/string.c:82
/* 从后往前查找字符串str中首次出现字符ch的地址(不是下标,是地址) */
char* strrchr(const char* str, const uint8_t ch) {
   assert(str != NULL);
   const char* last_char = NULL;
   /* 从头到尾遍历一次,若存在ch字符,last_char总是该字符最后一次出现在串中的地址(不是下标,是地址)*/
   while (*str != 0) {
c0003b48:	8b 45 08             	mov    0x8(%ebp),%eax
c0003b4b:	0f b6 00             	movzbl (%eax),%eax
c0003b4e:	84 c0                	test   %al,%al
c0003b50:	75 db                	jne    c0003b2d <strrchr+0x34>
/work/x86_os_my/lib/string.c:88
      if (*str == ch) {
	 last_char = str;
      }
      str++;
   }
   return (char*)last_char;
c0003b52:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/lib/string.c:89
}
c0003b55:	c9                   	leave  
c0003b56:	c3                   	ret    

c0003b57 <strcat>:
strcat():
/work/x86_os_my/lib/string.c:92

/* 将字符串src_拼接到dst_后,将回拼接的串地址 */
char* strcat(char* dst_, const char* src_) {
c0003b57:	55                   	push   %ebp
c0003b58:	89 e5                	mov    %esp,%ebp
c0003b5a:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/string.c:93
   assert(dst_ != NULL && src_ != NULL);
c0003b5d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003b61:	74 06                	je     c0003b69 <strcat+0x12>
/work/x86_os_my/lib/string.c:93 (discriminator 2)
c0003b63:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0003b67:	75 19                	jne    c0003b82 <strcat+0x2b>
/work/x86_os_my/lib/string.c:93 (discriminator 3)
c0003b69:	68 46 d1 00 c0       	push   $0xc000d146
c0003b6e:	68 e0 d1 00 c0       	push   $0xc000d1e0
c0003b73:	6a 5d                	push   $0x5d
c0003b75:	68 39 d1 00 c0       	push   $0xc000d139
c0003b7a:	e8 2d 81 00 00       	call   c000bcac <user_spin>
c0003b7f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:94
   char* str = dst_;
c0003b82:	8b 45 08             	mov    0x8(%ebp),%eax
c0003b85:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/string.c:95
   while (*str++);
c0003b88:	90                   	nop
/work/x86_os_my/lib/string.c:95 (discriminator 1)
c0003b89:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003b8c:	8d 50 01             	lea    0x1(%eax),%edx
c0003b8f:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0003b92:	0f b6 00             	movzbl (%eax),%eax
c0003b95:	84 c0                	test   %al,%al
c0003b97:	75 f0                	jne    c0003b89 <strcat+0x32>
/work/x86_os_my/lib/string.c:96
   --str;      // 别看错了，--str是独立的一句，并不是while的循环体
c0003b99:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
/work/x86_os_my/lib/string.c:97
   while((*str++ = *src_++));	 // 当*str被赋值为0时,此时表达式不成立,正好添加了字符串结尾的0.
c0003b9d:	90                   	nop
/work/x86_os_my/lib/string.c:97 (discriminator 1)
c0003b9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003ba1:	8d 50 01             	lea    0x1(%eax),%edx
c0003ba4:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0003ba7:	8b 55 0c             	mov    0xc(%ebp),%edx
c0003baa:	8d 4a 01             	lea    0x1(%edx),%ecx
c0003bad:	89 4d 0c             	mov    %ecx,0xc(%ebp)
c0003bb0:	0f b6 12             	movzbl (%edx),%edx
c0003bb3:	88 10                	mov    %dl,(%eax)
c0003bb5:	0f b6 00             	movzbl (%eax),%eax
c0003bb8:	84 c0                	test   %al,%al
c0003bba:	75 e2                	jne    c0003b9e <strcat+0x47>
/work/x86_os_my/lib/string.c:98
   return dst_;
c0003bbc:	8b 45 08             	mov    0x8(%ebp),%eax
/work/x86_os_my/lib/string.c:99
}
c0003bbf:	c9                   	leave  
c0003bc0:	c3                   	ret    

c0003bc1 <strchrs>:
strchrs():
/work/x86_os_my/lib/string.c:102

/* 在字符串str中查找指定字符ch出现的次数 */
uint32_t strchrs(const char* str, uint8_t ch) {
c0003bc1:	55                   	push   %ebp
c0003bc2:	89 e5                	mov    %esp,%ebp
c0003bc4:	83 ec 28             	sub    $0x28,%esp
c0003bc7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0003bca:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/lib/string.c:103
   assert(str != NULL);
c0003bcd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0003bd1:	75 19                	jne    c0003bec <strchrs+0x2b>
/work/x86_os_my/lib/string.c:103 (discriminator 1)
c0003bd3:	68 7a d1 00 c0       	push   $0xc000d17a
c0003bd8:	68 e8 d1 00 c0       	push   $0xc000d1e8
c0003bdd:	6a 67                	push   $0x67
c0003bdf:	68 39 d1 00 c0       	push   $0xc000d139
c0003be4:	e8 c3 80 00 00       	call   c000bcac <user_spin>
c0003be9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/string.c:104
   uint32_t ch_cnt = 0;
c0003bec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/string.c:105
   const char* p = str;
c0003bf3:	8b 45 08             	mov    0x8(%ebp),%eax
c0003bf6:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/string.c:106
   while(*p != 0) {
c0003bf9:	eb 19                	jmp    c0003c14 <strchrs+0x53>
/work/x86_os_my/lib/string.c:107
      if (*p == ch) {
c0003bfb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003bfe:	0f b6 00             	movzbl (%eax),%eax
c0003c01:	0f be d0             	movsbl %al,%edx
c0003c04:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0003c08:	39 c2                	cmp    %eax,%edx
c0003c0a:	75 04                	jne    c0003c10 <strchrs+0x4f>
/work/x86_os_my/lib/string.c:108
	 ch_cnt++;
c0003c0c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/lib/string.c:110
      }
      p++;
c0003c10:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/lib/string.c:106
/* 在字符串str中查找指定字符ch出现的次数 */
uint32_t strchrs(const char* str, uint8_t ch) {
   assert(str != NULL);
   uint32_t ch_cnt = 0;
   const char* p = str;
   while(*p != 0) {
c0003c14:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0003c17:	0f b6 00             	movzbl (%eax),%eax
c0003c1a:	84 c0                	test   %al,%al
c0003c1c:	75 dd                	jne    c0003bfb <strchrs+0x3a>
/work/x86_os_my/lib/string.c:112
      if (*p == ch) {
	 ch_cnt++;
      }
      p++;
   }
   return ch_cnt;
c0003c1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/lib/string.c:113
}
c0003c21:	c9                   	leave  
c0003c22:	c3                   	ret    

c0003c23 <idle>:
idle():
/work/x86_os_my/thread/thread.c:26

extern void switch_to(struct task_struct* cur, struct task_struct* next);
extern void init(void);

/* idle线程 */
static void idle(void* arg UNUSED) {
c0003c23:	55                   	push   %ebp
c0003c24:	89 e5                	mov    %esp,%ebp
c0003c26:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:28 (discriminator 1)
	while(1) {
		thread_block(TASK_BLOCKED);
c0003c29:	83 ec 0c             	sub    $0xc,%esp
c0003c2c:	6a 02                	push   $0x2
c0003c2e:	e8 aa 04 00 00       	call   c00040dd <thread_block>
c0003c33:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:32 (discriminator 1)
		//CPU停机
		//唯一能唤醒处理器的就是外部中断
		//执行hlt时必须要保证目前处在开中断的情况下
		asm volatile ("sti; hlt" : : : "memory");
c0003c36:	fb                   	sti    
c0003c37:	f4                   	hlt    
/work/x86_os_my/thread/thread.c:33 (discriminator 1)
	}
c0003c38:	eb ef                	jmp    c0003c29 <idle+0x6>

c0003c3a <running_thread>:
running_thread():
/work/x86_os_my/thread/thread.c:40

/* 返回线程 PCB 地址。
 * 各个线程所用的 0 级栈都是在自己的 PCB 当中，
 * 取当前栈指针的高 20 位，就是当前运行线程的 PCB（PCB是在自然页的起始地址！）
 */
struct task_struct* running_thread() {
c0003c3a:	55                   	push   %ebp
c0003c3b:	89 e5                	mov    %esp,%ebp
c0003c3d:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/thread/thread.c:42
	uint32_t esp;
	asm ("mov %%esp, %0" : "=g" (esp));	//esp寄存器的值，放入变量esp
c0003c40:	89 e0                	mov    %esp,%eax
c0003c42:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/thread/thread.c:43
	return (struct task_struct*)(esp & 0xfffff000);
c0003c45:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003c48:	25 00 f0 ff ff       	and    $0xfffff000,%eax
/work/x86_os_my/thread/thread.c:44
}
c0003c4d:	c9                   	leave  
c0003c4e:	c3                   	ret    

c0003c4f <kernel_thread>:
kernel_thread():
/work/x86_os_my/thread/thread.c:47

/* 由kernel_thread去执行function(func_arg) */
static void kernel_thread(thread_func* function, void* func_arg) {
c0003c4f:	55                   	push   %ebp
c0003c50:	89 e5                	mov    %esp,%ebp
c0003c52:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:53
	/* 线程的首次运行是由时钟中断处理函数调用任务调度器 schedule 完成的，
	 * 进入中断后处理器会自动关中断，
	 * 因此在执行 function 前要打开中断，否则 kernel_thread 中的 function 在关中断的情况下运行，
	 * 也就是时钟中断被屏蔽了，再也不会调度到新的线程，function 会独享处理器。
	 */
	intr_enable();
c0003c55:	e8 46 dd ff ff       	call   c00019a0 <intr_enable>
/work/x86_os_my/thread/thread.c:54
	function(func_arg); 
c0003c5a:	83 ec 0c             	sub    $0xc,%esp
c0003c5d:	ff 75 0c             	pushl  0xc(%ebp)
c0003c60:	8b 45 08             	mov    0x8(%ebp),%eax
c0003c63:	ff d0                	call   *%eax
c0003c65:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:55
}
c0003c68:	90                   	nop
c0003c69:	c9                   	leave  
c0003c6a:	c3                   	ret    

c0003c6b <allocate_pid>:
allocate_pid():
/work/x86_os_my/thread/thread.c:58

/* 分配pid */
static pid_t allocate_pid(void) {
c0003c6b:	55                   	push   %ebp
c0003c6c:	89 e5                	mov    %esp,%ebp
c0003c6e:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:60
   static pid_t next_pid = 0;
   lock_acquire(&pid_lock);
c0003c71:	83 ec 0c             	sub    $0xc,%esp
c0003c74:	68 b4 21 01 c0       	push   $0xc00121b4
c0003c79:	e8 91 0e 00 00       	call   c0004b0f <lock_acquire>
c0003c7e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:61
   next_pid++;
c0003c81:	0f b7 05 6c 15 01 c0 	movzwl 0xc001156c,%eax
c0003c88:	83 c0 01             	add    $0x1,%eax
c0003c8b:	66 a3 6c 15 01 c0    	mov    %ax,0xc001156c
/work/x86_os_my/thread/thread.c:62
   lock_release(&pid_lock);
c0003c91:	83 ec 0c             	sub    $0xc,%esp
c0003c94:	68 b4 21 01 c0       	push   $0xc00121b4
c0003c99:	e8 e8 0e 00 00       	call   c0004b86 <lock_release>
c0003c9e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:63
   return next_pid;
c0003ca1:	0f b7 05 6c 15 01 c0 	movzwl 0xc001156c,%eax
/work/x86_os_my/thread/thread.c:64
}
c0003ca8:	c9                   	leave  
c0003ca9:	c3                   	ret    

c0003caa <fork_pid>:
fork_pid():
/work/x86_os_my/thread/thread.c:67

/* fork进程时为其分配pid，只是再封装一次 allocate_pid */
pid_t fork_pid(void) {
c0003caa:	55                   	push   %ebp
c0003cab:	89 e5                	mov    %esp,%ebp
c0003cad:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:68
	return allocate_pid();
c0003cb0:	e8 b6 ff ff ff       	call   c0003c6b <allocate_pid>
/work/x86_os_my/thread/thread.c:69
}
c0003cb5:	c9                   	leave  
c0003cb6:	c3                   	ret    

c0003cb7 <thread_create>:
thread_create():
/work/x86_os_my/thread/thread.c:72

/* 初始化线程栈结构体 struct thread_stack */
void thread_create(struct task_struct* pthread, thread_func function, void* func_arg) {
c0003cb7:	55                   	push   %ebp
c0003cb8:	89 e5                	mov    %esp,%ebp
c0003cba:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/thread/thread.c:76
	/* 先预留中断使用栈的空间 
	 *（1）将来线程进入中断后，位于 kernel.S 中的中断代码会通过此栈来保存上下文。
	 *（2）将来实现用户进程时，会将用户进程的初始信息放在中断栈中。*/
	pthread->self_kstack -= sizeof(struct intr_stack);
c0003cbd:	8b 45 08             	mov    0x8(%ebp),%eax
c0003cc0:	8b 00                	mov    (%eax),%eax
c0003cc2:	8d 90 d0 fe ff ff    	lea    -0x130(%eax),%edx
c0003cc8:	8b 45 08             	mov    0x8(%ebp),%eax
c0003ccb:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/thread/thread.c:79

	/* 再留出线程栈空间（unused_retaddr 所在的栈）*/
	pthread->self_kstack -= sizeof(struct thread_stack);
c0003ccd:	8b 45 08             	mov    0x8(%ebp),%eax
c0003cd0:	8b 00                	mov    (%eax),%eax
c0003cd2:	8d 50 80             	lea    -0x80(%eax),%edx
c0003cd5:	8b 45 08             	mov    0x8(%ebp),%eax
c0003cd8:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/thread/thread.c:80
	struct thread_stack* kthread_stack = (struct thread_stack*)pthread->self_kstack;
c0003cda:	8b 45 08             	mov    0x8(%ebp),%eax
c0003cdd:	8b 00                	mov    (%eax),%eax
c0003cdf:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/thread/thread.c:88
	 * kernel_thread 并不是通过 call 指令调用的，而是通过 ret 来执行的，
	 * 因此无法按照正常的函数调用形式传递 kernel_thread 所需要的参数，
	 * 这样调用是不行的： kernel_thread(function, func_arg)，
	 * 只能将参数放在 kernel_thread 所用的栈中，即处理器进入 kernel_thread 函数体时，
	 * 栈顶为返回地址，栈顶+4 为参数function，栈顶+8 为参数func_arg */
	kthread_stack->eip = kernel_thread;
c0003ce2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003ce5:	c7 40 10 4f 3c 00 c0 	movl   $0xc0003c4f,0x10(%eax)
/work/x86_os_my/thread/thread.c:89
	kthread_stack->function = function;
c0003cec:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003cef:	8b 55 0c             	mov    0xc(%ebp),%edx
c0003cf2:	89 50 18             	mov    %edx,0x18(%eax)
/work/x86_os_my/thread/thread.c:90
	kthread_stack->func_arg = func_arg;
c0003cf5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003cf8:	8b 55 10             	mov    0x10(%ebp),%edx
c0003cfb:	89 50 1c             	mov    %edx,0x1c(%eax)
/work/x86_os_my/thread/thread.c:91
	kthread_stack->ebp = kthread_stack->ebx = kthread_stack->esi = kthread_stack->edi = 0;
c0003cfe:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003d01:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0003d08:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003d0b:	8b 50 08             	mov    0x8(%eax),%edx
c0003d0e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003d11:	89 50 0c             	mov    %edx,0xc(%eax)
c0003d14:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003d17:	8b 50 0c             	mov    0xc(%eax),%edx
c0003d1a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003d1d:	89 50 04             	mov    %edx,0x4(%eax)
c0003d20:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003d23:	8b 50 04             	mov    0x4(%eax),%edx
c0003d26:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0003d29:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/thread/thread.c:92
}
c0003d2b:	90                   	nop
c0003d2c:	c9                   	leave  
c0003d2d:	c3                   	ret    

c0003d2e <init_thread>:
init_thread():
/work/x86_os_my/thread/thread.c:95

/* 初始化线程PCB结构体 struct task_struct */
void init_thread(struct task_struct* pthread, char* name, int prio) {
c0003d2e:	55                   	push   %ebp
c0003d2f:	89 e5                	mov    %esp,%ebp
c0003d31:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:96
	memset(pthread, 0, sizeof(*pthread));	//清空PCB
c0003d34:	83 ec 04             	sub    $0x4,%esp
c0003d37:	68 18 01 00 00       	push   $0x118
c0003d3c:	6a 00                	push   $0x0
c0003d3e:	ff 75 08             	pushl  0x8(%ebp)
c0003d41:	e8 0d fb ff ff       	call   c0003853 <memset>
c0003d46:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:97
	pthread->pid = allocate_pid();
c0003d49:	e8 1d ff ff ff       	call   c0003c6b <allocate_pid>
c0003d4e:	89 c2                	mov    %eax,%edx
c0003d50:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d53:	66 89 50 04          	mov    %dx,0x4(%eax)
/work/x86_os_my/thread/thread.c:98
	strcpy(pthread->name, name);
c0003d57:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d5a:	83 c0 0c             	add    $0xc,%eax
c0003d5d:	83 ec 08             	sub    $0x8,%esp
c0003d60:	ff 75 0c             	pushl  0xc(%ebp)
c0003d63:	50                   	push   %eax
c0003d64:	e8 1f fc ff ff       	call   c0003988 <strcpy>
c0003d69:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:100

	if (pthread == g_main_thread) {
c0003d6c:	a1 b0 21 01 c0       	mov    0xc00121b0,%eax
c0003d71:	39 45 08             	cmp    %eax,0x8(%ebp)
c0003d74:	75 0c                	jne    c0003d82 <init_thread+0x54>
/work/x86_os_my/thread/thread.c:102
		/* 由于把main函数也封装成一个线程,并且它一直是运行的,故将其直接设为TASK_RUNNING */
		pthread->status = TASK_RUNNING;
c0003d76:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d79:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0003d80:	eb 0a                	jmp    c0003d8c <init_thread+0x5e>
/work/x86_os_my/thread/thread.c:104
	} else {
		pthread->status = TASK_READY;
c0003d82:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d85:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/thread/thread.c:110
	}

	/* self_kstack是线程自己在内核态下使用的栈顶地址 
	 * 线程自己在 0 特权级下所用的栈，在线程创建之初，
	 * 它被初始化为线程 PCB 的最顶端，即(uint32_t)pthread + PG_SIZE。*/
	pthread->self_kstack = (uint32_t*)((uint32_t)pthread + PG_SIZE);
c0003d8c:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d8f:	05 00 10 00 00       	add    $0x1000,%eax
c0003d94:	89 c2                	mov    %eax,%edx
c0003d96:	8b 45 08             	mov    0x8(%ebp),%eax
c0003d99:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/thread/thread.c:111
	pthread->priority = prio;
c0003d9b:	8b 45 10             	mov    0x10(%ebp),%eax
c0003d9e:	89 c2                	mov    %eax,%edx
c0003da0:	8b 45 08             	mov    0x8(%ebp),%eax
c0003da3:	88 50 1c             	mov    %dl,0x1c(%eax)
/work/x86_os_my/thread/thread.c:112
	pthread->ticks = prio;
c0003da6:	8b 45 10             	mov    0x10(%ebp),%eax
c0003da9:	89 c2                	mov    %eax,%edx
c0003dab:	8b 45 08             	mov    0x8(%ebp),%eax
c0003dae:	88 50 1d             	mov    %dl,0x1d(%eax)
/work/x86_os_my/thread/thread.c:113
	pthread->elapsed_ticks = 0;
c0003db1:	8b 45 08             	mov    0x8(%ebp),%eax
c0003db4:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
/work/x86_os_my/thread/thread.c:114
	pthread->pgdir = NULL;
c0003dbb:	8b 45 08             	mov    0x8(%ebp),%eax
c0003dbe:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
/work/x86_os_my/thread/thread.c:117

	/* 预留标准输入输出 */
	pthread->fd_table[0] = 0;
c0003dc5:	8b 45 08             	mov    0x8(%ebp),%eax
c0003dc8:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
/work/x86_os_my/thread/thread.c:118
	pthread->fd_table[1] = 1;
c0003dcf:	8b 45 08             	mov    0x8(%ebp),%eax
c0003dd2:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
/work/x86_os_my/thread/thread.c:119
	pthread->fd_table[2] = 2;
c0003dd9:	8b 45 08             	mov    0x8(%ebp),%eax
c0003ddc:	c7 40 2c 02 00 00 00 	movl   $0x2,0x2c(%eax)
/work/x86_os_my/thread/thread.c:121
	/* 其余的全置为-1 */
	uint8_t fd_idx = 3;
c0003de3:	c6 45 f7 03          	movb   $0x3,-0x9(%ebp)
/work/x86_os_my/thread/thread.c:122
	while (fd_idx < MAX_FILES_OPEN_PER_PROC) {
c0003de7:	eb 1c                	jmp    c0003e05 <init_thread+0xd7>
/work/x86_os_my/thread/thread.c:123
		pthread->fd_table[fd_idx] = -1;
c0003de9:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c0003ded:	8b 45 08             	mov    0x8(%ebp),%eax
c0003df0:	83 c2 08             	add    $0x8,%edx
c0003df3:	c7 44 90 04 ff ff ff 	movl   $0xffffffff,0x4(%eax,%edx,4)
c0003dfa:	ff 
/work/x86_os_my/thread/thread.c:124
		fd_idx++;
c0003dfb:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0003dff:	83 c0 01             	add    $0x1,%eax
c0003e02:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/thread/thread.c:122
	pthread->fd_table[0] = 0;
	pthread->fd_table[1] = 1;
	pthread->fd_table[2] = 2;
	/* 其余的全置为-1 */
	uint8_t fd_idx = 3;
	while (fd_idx < MAX_FILES_OPEN_PER_PROC) {
c0003e05:	80 7d f7 07          	cmpb   $0x7,-0x9(%ebp)
c0003e09:	76 de                	jbe    c0003de9 <init_thread+0xbb>
/work/x86_os_my/thread/thread.c:127
		pthread->fd_table[fd_idx] = -1;
		fd_idx++;
	}

	pthread->cwd_inode_nr = 0;			// 以根目录做为默认工作路径
c0003e0b:	8b 45 08             	mov    0x8(%ebp),%eax
c0003e0e:	c7 80 0c 01 00 00 00 	movl   $0x0,0x10c(%eax)
c0003e15:	00 00 00 
/work/x86_os_my/thread/thread.c:128
	pthread->parent_pid = -1;			// -1表示没有父进程
c0003e18:	8b 45 08             	mov    0x8(%ebp),%eax
c0003e1b:	66 c7 80 10 01 00 00 	movw   $0xffff,0x110(%eax)
c0003e22:	ff ff 
/work/x86_os_my/thread/thread.c:129
	pthread->stack_magic = 0x19870916;	// 自定义的魔数
c0003e24:	8b 45 08             	mov    0x8(%ebp),%eax
c0003e27:	c7 80 14 01 00 00 16 	movl   $0x19870916,0x114(%eax)
c0003e2e:	09 87 19 
/work/x86_os_my/thread/thread.c:130
}
c0003e31:	90                   	nop
c0003e32:	c9                   	leave  
c0003e33:	c3                   	ret    

c0003e34 <thread_start>:
thread_start():
/work/x86_os_my/thread/thread.c:133

/* 创建线程 */
struct task_struct* thread_start(char* name, int prio, thread_func function, void* func_arg) {
c0003e34:	55                   	push   %ebp
c0003e35:	89 e5                	mov    %esp,%ebp
c0003e37:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:135
	/* pcb都位于内核空间,包括用户进程的pcb也是在内核空间 */
	struct task_struct* thread = get_kernel_pages(1);
c0003e3a:	83 ec 0c             	sub    $0xc,%esp
c0003e3d:	6a 01                	push   $0x1
c0003e3f:	e8 15 ec ff ff       	call   c0002a59 <get_kernel_pages>
c0003e44:	83 c4 10             	add    $0x10,%esp
c0003e47:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:137

	init_thread(thread, name, prio);			//初始化线程PCB
c0003e4a:	83 ec 04             	sub    $0x4,%esp
c0003e4d:	ff 75 0c             	pushl  0xc(%ebp)
c0003e50:	ff 75 08             	pushl  0x8(%ebp)
c0003e53:	ff 75 f4             	pushl  -0xc(%ebp)
c0003e56:	e8 d3 fe ff ff       	call   c0003d2e <init_thread>
c0003e5b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:138
	thread_create(thread, function, func_arg);	//初始化线程栈结构体
c0003e5e:	83 ec 04             	sub    $0x4,%esp
c0003e61:	ff 75 14             	pushl  0x14(%ebp)
c0003e64:	ff 75 10             	pushl  0x10(%ebp)
c0003e67:	ff 75 f4             	pushl  -0xc(%ebp)
c0003e6a:	e8 48 fe ff ff       	call   c0003cb7 <thread_create>
c0003e6f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:140
	
	ASSERT(!elem_find(&thread_ready_list, &thread->general_tag));	// 确保之前不在队列中
c0003e72:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003e75:	83 c0 44             	add    $0x44,%eax
c0003e78:	83 ec 08             	sub    $0x8,%esp
c0003e7b:	50                   	push   %eax
c0003e7c:	68 8c 21 01 c0       	push   $0xc001218c
c0003e81:	e8 c6 08 00 00       	call   c000474c <elem_find>
c0003e86:	83 c4 10             	add    $0x10,%esp
c0003e89:	85 c0                	test   %eax,%eax
c0003e8b:	74 1c                	je     c0003ea9 <thread_start+0x75>
/work/x86_os_my/thread/thread.c:140 (discriminator 1)
c0003e8d:	68 f0 d1 00 c0       	push   $0xc000d1f0
c0003e92:	68 2c d5 00 c0       	push   $0xc000d52c
c0003e97:	68 8c 00 00 00       	push   $0x8c
c0003e9c:	68 25 d2 00 c0       	push   $0xc000d225
c0003ea1:	e8 0b e5 ff ff       	call   c00023b1 <panic_spin>
c0003ea6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:141
	list_append(&thread_ready_list, &thread->general_tag);			// 加入就绪线程队列
c0003ea9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003eac:	83 c0 44             	add    $0x44,%eax
c0003eaf:	83 ec 08             	sub    $0x8,%esp
c0003eb2:	50                   	push   %eax
c0003eb3:	68 8c 21 01 c0       	push   $0xc001218c
c0003eb8:	e8 15 08 00 00       	call   c00046d2 <list_append>
c0003ebd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:143

	ASSERT(!elem_find(&thread_all_list, &thread->all_list_tag));
c0003ec0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003ec3:	83 c0 4c             	add    $0x4c,%eax
c0003ec6:	83 ec 08             	sub    $0x8,%esp
c0003ec9:	50                   	push   %eax
c0003eca:	68 9c 21 01 c0       	push   $0xc001219c
c0003ecf:	e8 78 08 00 00       	call   c000474c <elem_find>
c0003ed4:	83 c4 10             	add    $0x10,%esp
c0003ed7:	85 c0                	test   %eax,%eax
c0003ed9:	74 1c                	je     c0003ef7 <thread_start+0xc3>
/work/x86_os_my/thread/thread.c:143 (discriminator 1)
c0003edb:	68 38 d2 00 c0       	push   $0xc000d238
c0003ee0:	68 2c d5 00 c0       	push   $0xc000d52c
c0003ee5:	68 8f 00 00 00       	push   $0x8f
c0003eea:	68 25 d2 00 c0       	push   $0xc000d225
c0003eef:	e8 bd e4 ff ff       	call   c00023b1 <panic_spin>
c0003ef4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:144
	list_append(&thread_all_list, &thread->all_list_tag);			// 加入全部线程队列
c0003ef7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003efa:	83 c0 4c             	add    $0x4c,%eax
c0003efd:	83 ec 08             	sub    $0x8,%esp
c0003f00:	50                   	push   %eax
c0003f01:	68 9c 21 01 c0       	push   $0xc001219c
c0003f06:	e8 c7 07 00 00       	call   c00046d2 <list_append>
c0003f0b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:160
	 * 在执行 ret 后，esp 指向的数值被弹岀到 eip。
	 * 处理器会去执行 kernel_thread 函数。
	 * 在执行 kernel_thread 时，处理器以为栈顶是返回地址，其实只是一个假的占位置的变量 unused_retaddr！
	 * 接着会调用函数 function(func_arg) */
	//asm volatile ("movl %0, %%esp; pop %%ebp; pop %%ebx; pop %%edi; pop %%esi; ret" : : "g" (thread->self_kstack) : "memory");
	return thread;
c0003f0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/thread/thread.c:161
}
c0003f11:	c9                   	leave  
c0003f12:	c3                   	ret    

c0003f13 <make_main_thread>:
make_main_thread():
/work/x86_os_my/thread/thread.c:165


/* 将kernel中的main函数完善为主线程 */
static void make_main_thread(void) {
c0003f13:	55                   	push   %ebp
c0003f14:	89 e5                	mov    %esp,%ebp
c0003f16:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:170
	/* 因为main线程早已运行,咱们在loader.S中进入内核时的mov esp, 0xc009f000设置了栈顶，也预留了pcb, 地址为0xc009e000
	 * 主线程不需要再为PCB申请页，只需要通过 init_thread 填充PCB成员：名称和优先级等。
	 * 也不需要再通过 thread_create 构造它的线程栈。
	 */
	g_main_thread = running_thread();	//用栈指针的高20位，当做当前线程的PCB
c0003f19:	e8 1c fd ff ff       	call   c0003c3a <running_thread>
c0003f1e:	a3 b0 21 01 c0       	mov    %eax,0xc00121b0
/work/x86_os_my/thread/thread.c:171
	init_thread(g_main_thread, "main", 31);
c0003f23:	a1 b0 21 01 c0       	mov    0xc00121b0,%eax
c0003f28:	83 ec 04             	sub    $0x4,%esp
c0003f2b:	6a 1f                	push   $0x1f
c0003f2d:	68 6c d2 00 c0       	push   $0xc000d26c
c0003f32:	50                   	push   %eax
c0003f33:	e8 f6 fd ff ff       	call   c0003d2e <init_thread>
c0003f38:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:175

	/* main函数是当前线程,当前线程不在thread_ready_list中,
	 * 所以只将其加在thread_all_list中. */
	ASSERT(!elem_find(&thread_all_list, &g_main_thread->all_list_tag));
c0003f3b:	a1 b0 21 01 c0       	mov    0xc00121b0,%eax
c0003f40:	83 c0 4c             	add    $0x4c,%eax
c0003f43:	83 ec 08             	sub    $0x8,%esp
c0003f46:	50                   	push   %eax
c0003f47:	68 9c 21 01 c0       	push   $0xc001219c
c0003f4c:	e8 fb 07 00 00       	call   c000474c <elem_find>
c0003f51:	83 c4 10             	add    $0x10,%esp
c0003f54:	85 c0                	test   %eax,%eax
c0003f56:	74 1c                	je     c0003f74 <make_main_thread+0x61>
/work/x86_os_my/thread/thread.c:175 (discriminator 1)
c0003f58:	68 74 d2 00 c0       	push   $0xc000d274
c0003f5d:	68 3c d5 00 c0       	push   $0xc000d53c
c0003f62:	68 af 00 00 00       	push   $0xaf
c0003f67:	68 25 d2 00 c0       	push   $0xc000d225
c0003f6c:	e8 40 e4 ff ff       	call   c00023b1 <panic_spin>
c0003f71:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:176
	list_append(&thread_all_list, &g_main_thread->all_list_tag);
c0003f74:	a1 b0 21 01 c0       	mov    0xc00121b0,%eax
c0003f79:	83 c0 4c             	add    $0x4c,%eax
c0003f7c:	83 ec 08             	sub    $0x8,%esp
c0003f7f:	50                   	push   %eax
c0003f80:	68 9c 21 01 c0       	push   $0xc001219c
c0003f85:	e8 48 07 00 00       	call   c00046d2 <list_append>
c0003f8a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:177
}
c0003f8d:	90                   	nop
c0003f8e:	c9                   	leave  
c0003f8f:	c3                   	ret    

c0003f90 <schedule>:
schedule():
/work/x86_os_my/thread/thread.c:187
（2）调度器 schedule。
（3）任务切换函数 switch_to。
*/
/* 实现任务调度 */
void schedule()
{
c0003f90:	55                   	push   %ebp
c0003f91:	89 e5                	mov    %esp,%ebp
c0003f93:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:188
	ASSERT(intr_get_status() == INTR_OFF);
c0003f96:	e8 75 da ff ff       	call   c0001a10 <intr_get_status>
c0003f9b:	85 c0                	test   %eax,%eax
c0003f9d:	74 1c                	je     c0003fbb <schedule+0x2b>
/work/x86_os_my/thread/thread.c:188 (discriminator 1)
c0003f9f:	68 af d2 00 c0       	push   $0xc000d2af
c0003fa4:	68 50 d5 00 c0       	push   $0xc000d550
c0003fa9:	68 bc 00 00 00       	push   $0xbc
c0003fae:	68 25 d2 00 c0       	push   $0xc000d225
c0003fb3:	e8 f9 e3 ff ff       	call   c00023b1 <panic_spin>
c0003fb8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:191

	/* 换下 */
	struct task_struct* cur = running_thread(); 
c0003fbb:	e8 7a fc ff ff       	call   c0003c3a <running_thread>
c0003fc0:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:192
	if (cur->status == TASK_RUNNING) { // 若此线程只是cpu时间片到了,将其加入到就绪队列尾
c0003fc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003fc6:	8b 40 08             	mov    0x8(%eax),%eax
c0003fc9:	85 c0                	test   %eax,%eax
c0003fcb:	75 65                	jne    c0004032 <schedule+0xa2>
/work/x86_os_my/thread/thread.c:193
		ASSERT(!elem_find(&thread_ready_list, &cur->general_tag));
c0003fcd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0003fd0:	83 c0 44             	add    $0x44,%eax
c0003fd3:	83 ec 08             	sub    $0x8,%esp
c0003fd6:	50                   	push   %eax
c0003fd7:	68 8c 21 01 c0       	push   $0xc001218c
c0003fdc:	e8 6b 07 00 00       	call   c000474c <elem_find>
c0003fe1:	83 c4 10             	add    $0x10,%esp
c0003fe4:	85 c0                	test   %eax,%eax
c0003fe6:	74 1c                	je     c0004004 <schedule+0x74>
/work/x86_os_my/thread/thread.c:193 (discriminator 1)
c0003fe8:	68 d0 d2 00 c0       	push   $0xc000d2d0
c0003fed:	68 50 d5 00 c0       	push   $0xc000d550
c0003ff2:	68 c1 00 00 00       	push   $0xc1
c0003ff7:	68 25 d2 00 c0       	push   $0xc000d225
c0003ffc:	e8 b0 e3 ff ff       	call   c00023b1 <panic_spin>
c0004001:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:194
		list_append(&thread_ready_list, &cur->general_tag);
c0004004:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004007:	83 c0 44             	add    $0x44,%eax
c000400a:	83 ec 08             	sub    $0x8,%esp
c000400d:	50                   	push   %eax
c000400e:	68 8c 21 01 c0       	push   $0xc001218c
c0004013:	e8 ba 06 00 00       	call   c00046d2 <list_append>
c0004018:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:195
		cur->ticks = cur->priority;     // 重新将当前线程的ticks再重置为其priority;
c000401b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000401e:	0f b6 50 1c          	movzbl 0x1c(%eax),%edx
c0004022:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004025:	88 50 1d             	mov    %dl,0x1d(%eax)
/work/x86_os_my/thread/thread.c:196
		cur->status = TASK_READY;
c0004028:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000402b:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/thread/thread.c:203
		/* 若此线程需要某事件发生后才能继续上cpu运行,
		不需要将其加入队列,因为当前线程不在就绪队列中。*/
	}

	/* 如果就绪队列中没有可运行的任务,就唤醒idle */
	if (list_empty(&thread_ready_list)) {
c0004032:	83 ec 0c             	sub    $0xc,%esp
c0004035:	68 8c 21 01 c0       	push   $0xc001218c
c000403a:	e8 da 07 00 00       	call   c0004819 <list_empty>
c000403f:	83 c4 10             	add    $0x10,%esp
c0004042:	85 c0                	test   %eax,%eax
c0004044:	74 11                	je     c0004057 <schedule+0xc7>
/work/x86_os_my/thread/thread.c:204
		thread_unblock(idle_thread);
c0004046:	a1 ac 21 01 c0       	mov    0xc00121ac,%eax
c000404b:	83 ec 0c             	sub    $0xc,%esp
c000404e:	50                   	push   %eax
c000404f:	e8 ec 00 00 00       	call   c0004140 <thread_unblock>
c0004054:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:208
	}
	
	/* 换上 */
	ASSERT(!list_empty(&thread_ready_list));
c0004057:	83 ec 0c             	sub    $0xc,%esp
c000405a:	68 8c 21 01 c0       	push   $0xc001218c
c000405f:	e8 b5 07 00 00       	call   c0004819 <list_empty>
c0004064:	83 c4 10             	add    $0x10,%esp
c0004067:	85 c0                	test   %eax,%eax
c0004069:	74 1c                	je     c0004087 <schedule+0xf7>
/work/x86_os_my/thread/thread.c:208 (discriminator 1)
c000406b:	68 04 d3 00 c0       	push   $0xc000d304
c0004070:	68 50 d5 00 c0       	push   $0xc000d550
c0004075:	68 d0 00 00 00       	push   $0xd0
c000407a:	68 25 d2 00 c0       	push   $0xc000d225
c000407f:	e8 2d e3 ff ff       	call   c00023b1 <panic_spin>
c0004084:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:209
	g_thread_tag = NULL;	  // g_thread_tag清空
c0004087:	c7 05 68 15 01 c0 00 	movl   $0x0,0xc0011568
c000408e:	00 00 00 
/work/x86_os_my/thread/thread.c:211
	/* 将thread_ready_list队列中的第一个就绪线程弹出,准备将其调度上cpu. */
	g_thread_tag = list_pop(&thread_ready_list);   
c0004091:	83 ec 0c             	sub    $0xc,%esp
c0004094:	68 8c 21 01 c0       	push   $0xc001218c
c0004099:	e8 8c 06 00 00       	call   c000472a <list_pop>
c000409e:	83 c4 10             	add    $0x10,%esp
c00040a1:	a3 68 15 01 c0       	mov    %eax,0xc0011568
/work/x86_os_my/thread/thread.c:212
	struct task_struct* next = elem2entry(struct task_struct, general_tag, g_thread_tag);
c00040a6:	a1 68 15 01 c0       	mov    0xc0011568,%eax
c00040ab:	83 e8 44             	sub    $0x44,%eax
c00040ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/thread/thread.c:213
	next->status = TASK_RUNNING;
c00040b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00040b4:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
/work/x86_os_my/thread/thread.c:217
	
	/* 1.激活线程或进程的页表,【更新CR3寄存器】
	 * 2.用户进程，更新tss中的esp0为进程的特权级0的栈 */
	process_activate(next);
c00040bb:	83 ec 0c             	sub    $0xc,%esp
c00040be:	ff 75 f0             	pushl  -0x10(%ebp)
c00040c1:	e8 0c 14 00 00       	call   c00054d2 <process_activate>
c00040c6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:219

	switch_to(cur, next);
c00040c9:	83 ec 08             	sub    $0x8,%esp
c00040cc:	ff 75 f0             	pushl  -0x10(%ebp)
c00040cf:	ff 75 f4             	pushl  -0xc(%ebp)
c00040d2:	e8 69 07 00 00       	call   c0004840 <switch_to>
c00040d7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:220
}
c00040da:	90                   	nop
c00040db:	c9                   	leave  
c00040dc:	c3                   	ret    

c00040dd <thread_block>:
thread_block():
/work/x86_os_my/thread/thread.c:223

/* 当前线程将自己阻塞,标志其状态为stat. */
void thread_block(enum task_status stat) {
c00040dd:	55                   	push   %ebp
c00040de:	89 e5                	mov    %esp,%ebp
c00040e0:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:225
	/* stat取值为TASK_BLOCKED,TASK_WAITING,TASK_HANGING,也就是只有这三种状态才不会被调度*/
	ASSERT(((stat == TASK_BLOCKED) || (stat == TASK_WAITING) || (stat == TASK_HANGING)));
c00040e3:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c00040e7:	74 28                	je     c0004111 <thread_block+0x34>
/work/x86_os_my/thread/thread.c:225 (discriminator 1)
c00040e9:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
c00040ed:	74 22                	je     c0004111 <thread_block+0x34>
/work/x86_os_my/thread/thread.c:225 (discriminator 2)
c00040ef:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
c00040f3:	74 1c                	je     c0004111 <thread_block+0x34>
/work/x86_os_my/thread/thread.c:225 (discriminator 3)
c00040f5:	68 24 d3 00 c0       	push   $0xc000d324
c00040fa:	68 5c d5 00 c0       	push   $0xc000d55c
c00040ff:	68 e1 00 00 00       	push   $0xe1
c0004104:	68 25 d2 00 c0       	push   $0xc000d225
c0004109:	e8 a3 e2 ff ff       	call   c00023b1 <panic_spin>
c000410e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:226
	enum intr_status old_status = intr_disable();
c0004111:	e8 b3 d8 ff ff       	call   c00019c9 <intr_disable>
c0004116:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:228
	
	struct task_struct* cur_thread = running_thread();
c0004119:	e8 1c fb ff ff       	call   c0003c3a <running_thread>
c000411e:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/thread/thread.c:229
	cur_thread->status = stat;
c0004121:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0004124:	8b 55 08             	mov    0x8(%ebp),%edx
c0004127:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/thread/thread.c:230
	schedule();
c000412a:	e8 61 fe ff ff       	call   c0003f90 <schedule>
/work/x86_os_my/thread/thread.c:233
	
	/* 待当前线程被解除阻塞后才继续运行下面的intr_set_status */
	intr_set_status(old_status);
c000412f:	83 ec 0c             	sub    $0xc,%esp
c0004132:	ff 75 f4             	pushl  -0xc(%ebp)
c0004135:	e8 b8 d8 ff ff       	call   c00019f2 <intr_set_status>
c000413a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:234
}
c000413d:	90                   	nop
c000413e:	c9                   	leave  
c000413f:	c3                   	ret    

c0004140 <thread_unblock>:
thread_unblock():
/work/x86_os_my/thread/thread.c:237

/* 将线程pthread解除阻塞 */
void thread_unblock(struct task_struct* pthread) {
c0004140:	55                   	push   %ebp
c0004141:	89 e5                	mov    %esp,%ebp
c0004143:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:238
	enum intr_status old_status = intr_disable();
c0004146:	e8 7e d8 ff ff       	call   c00019c9 <intr_disable>
c000414b:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:239
	ASSERT(((pthread->status == TASK_BLOCKED) || (pthread->status == TASK_WAITING) || (pthread->status == TASK_HANGING)));
c000414e:	8b 45 08             	mov    0x8(%ebp),%eax
c0004151:	8b 40 08             	mov    0x8(%eax),%eax
c0004154:	83 f8 02             	cmp    $0x2,%eax
c0004157:	74 32                	je     c000418b <thread_unblock+0x4b>
/work/x86_os_my/thread/thread.c:239 (discriminator 1)
c0004159:	8b 45 08             	mov    0x8(%ebp),%eax
c000415c:	8b 40 08             	mov    0x8(%eax),%eax
c000415f:	83 f8 03             	cmp    $0x3,%eax
c0004162:	74 27                	je     c000418b <thread_unblock+0x4b>
/work/x86_os_my/thread/thread.c:239 (discriminator 2)
c0004164:	8b 45 08             	mov    0x8(%ebp),%eax
c0004167:	8b 40 08             	mov    0x8(%eax),%eax
c000416a:	83 f8 04             	cmp    $0x4,%eax
c000416d:	74 1c                	je     c000418b <thread_unblock+0x4b>
/work/x86_os_my/thread/thread.c:239 (discriminator 3)
c000416f:	68 74 d3 00 c0       	push   $0xc000d374
c0004174:	68 6c d5 00 c0       	push   $0xc000d56c
c0004179:	68 ef 00 00 00       	push   $0xef
c000417e:	68 25 d2 00 c0       	push   $0xc000d225
c0004183:	e8 29 e2 ff ff       	call   c00023b1 <panic_spin>
c0004188:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:241
	
	if (pthread->status != TASK_READY) {
c000418b:	8b 45 08             	mov    0x8(%ebp),%eax
c000418e:	8b 40 08             	mov    0x8(%eax),%eax
c0004191:	83 f8 01             	cmp    $0x1,%eax
c0004194:	0f 84 8f 00 00 00    	je     c0004229 <thread_unblock+0xe9>
/work/x86_os_my/thread/thread.c:242
		ASSERT(!elem_find(&thread_ready_list, &pthread->general_tag));
c000419a:	8b 45 08             	mov    0x8(%ebp),%eax
c000419d:	83 c0 44             	add    $0x44,%eax
c00041a0:	83 ec 08             	sub    $0x8,%esp
c00041a3:	50                   	push   %eax
c00041a4:	68 8c 21 01 c0       	push   $0xc001218c
c00041a9:	e8 9e 05 00 00       	call   c000474c <elem_find>
c00041ae:	83 c4 10             	add    $0x10,%esp
c00041b1:	85 c0                	test   %eax,%eax
c00041b3:	74 1c                	je     c00041d1 <thread_unblock+0x91>
/work/x86_os_my/thread/thread.c:242 (discriminator 1)
c00041b5:	68 e4 d3 00 c0       	push   $0xc000d3e4
c00041ba:	68 6c d5 00 c0       	push   $0xc000d56c
c00041bf:	68 f2 00 00 00       	push   $0xf2
c00041c4:	68 25 d2 00 c0       	push   $0xc000d225
c00041c9:	e8 e3 e1 ff ff       	call   c00023b1 <panic_spin>
c00041ce:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:243
		if (elem_find(&thread_ready_list, &pthread->general_tag)) {
c00041d1:	8b 45 08             	mov    0x8(%ebp),%eax
c00041d4:	83 c0 44             	add    $0x44,%eax
c00041d7:	83 ec 08             	sub    $0x8,%esp
c00041da:	50                   	push   %eax
c00041db:	68 8c 21 01 c0       	push   $0xc001218c
c00041e0:	e8 67 05 00 00       	call   c000474c <elem_find>
c00041e5:	83 c4 10             	add    $0x10,%esp
c00041e8:	85 c0                	test   %eax,%eax
c00041ea:	74 1c                	je     c0004208 <thread_unblock+0xc8>
/work/x86_os_my/thread/thread.c:244
			PANIC("thread_unblock: blocked thread in ready_list\n");
c00041ec:	68 1c d4 00 c0       	push   $0xc000d41c
c00041f1:	68 6c d5 00 c0       	push   $0xc000d56c
c00041f6:	68 f4 00 00 00       	push   $0xf4
c00041fb:	68 25 d2 00 c0       	push   $0xc000d225
c0004200:	e8 ac e1 ff ff       	call   c00023b1 <panic_spin>
c0004205:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:246
		}
		list_push(&thread_ready_list, &pthread->general_tag);	// 放到队列的最前面,使其尽快得到调度
c0004208:	8b 45 08             	mov    0x8(%ebp),%eax
c000420b:	83 c0 44             	add    $0x44,%eax
c000420e:	83 ec 08             	sub    $0x8,%esp
c0004211:	50                   	push   %eax
c0004212:	68 8c 21 01 c0       	push   $0xc001218c
c0004217:	e8 98 04 00 00       	call   c00046b4 <list_push>
c000421c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:247
		pthread->status = TASK_READY;
c000421f:	8b 45 08             	mov    0x8(%ebp),%eax
c0004222:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/thread/thread.c:250
	}
	
	intr_set_status(old_status);
c0004229:	83 ec 0c             	sub    $0xc,%esp
c000422c:	ff 75 f4             	pushl  -0xc(%ebp)
c000422f:	e8 be d7 ff ff       	call   c00019f2 <intr_set_status>
c0004234:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:251
}
c0004237:	90                   	nop
c0004238:	c9                   	leave  
c0004239:	c3                   	ret    

c000423a <thread_yield>:
thread_yield():
/work/x86_os_my/thread/thread.c:254

/* 主动让出cpu，换其它线程运行，但状态仍是ready */
void thread_yield(void) {
c000423a:	55                   	push   %ebp
c000423b:	89 e5                	mov    %esp,%ebp
c000423d:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:255
	struct task_struct* cur = running_thread();
c0004240:	e8 f5 f9 ff ff       	call   c0003c3a <running_thread>
c0004245:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:256
	enum intr_status old_status = intr_disable();
c0004248:	e8 7c d7 ff ff       	call   c00019c9 <intr_disable>
c000424d:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/thread/thread.c:257
	ASSERT(!elem_find(&thread_ready_list, &cur->general_tag));
c0004250:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004253:	83 c0 44             	add    $0x44,%eax
c0004256:	83 ec 08             	sub    $0x8,%esp
c0004259:	50                   	push   %eax
c000425a:	68 8c 21 01 c0       	push   $0xc001218c
c000425f:	e8 e8 04 00 00       	call   c000474c <elem_find>
c0004264:	83 c4 10             	add    $0x10,%esp
c0004267:	85 c0                	test   %eax,%eax
c0004269:	74 1c                	je     c0004287 <thread_yield+0x4d>
/work/x86_os_my/thread/thread.c:257 (discriminator 1)
c000426b:	68 d0 d2 00 c0       	push   $0xc000d2d0
c0004270:	68 7c d5 00 c0       	push   $0xc000d57c
c0004275:	68 01 01 00 00       	push   $0x101
c000427a:	68 25 d2 00 c0       	push   $0xc000d225
c000427f:	e8 2d e1 ff ff       	call   c00023b1 <panic_spin>
c0004284:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:258
	list_append(&thread_ready_list, &cur->general_tag);
c0004287:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000428a:	83 c0 44             	add    $0x44,%eax
c000428d:	83 ec 08             	sub    $0x8,%esp
c0004290:	50                   	push   %eax
c0004291:	68 8c 21 01 c0       	push   $0xc001218c
c0004296:	e8 37 04 00 00       	call   c00046d2 <list_append>
c000429b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:259
	cur->status = TASK_READY;
c000429e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00042a1:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/thread/thread.c:260
	schedule();
c00042a8:	e8 e3 fc ff ff       	call   c0003f90 <schedule>
/work/x86_os_my/thread/thread.c:261
	intr_set_status(old_status);
c00042ad:	83 ec 0c             	sub    $0xc,%esp
c00042b0:	ff 75 f0             	pushl  -0x10(%ebp)
c00042b3:	e8 3a d7 ff ff       	call   c00019f2 <intr_set_status>
c00042b8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:262
}
c00042bb:	90                   	nop
c00042bc:	c9                   	leave  
c00042bd:	c3                   	ret    

c00042be <pad_print>:
pad_print():
/work/x86_os_my/thread/thread.c:266


/* 前边填充空格 后边按format格式输出ptr的内容 输出的总长度都是buf_len个字符 */
static void pad_print(char* buf, int32_t buf_len, void* ptr, char format) {
c00042be:	55                   	push   %ebp
c00042bf:	89 e5                	mov    %esp,%ebp
c00042c1:	83 ec 28             	sub    $0x28,%esp
c00042c4:	8b 45 14             	mov    0x14(%ebp),%eax
c00042c7:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/thread/thread.c:267
	memset(buf, 0, buf_len);
c00042ca:	8b 45 0c             	mov    0xc(%ebp),%eax
c00042cd:	83 ec 04             	sub    $0x4,%esp
c00042d0:	50                   	push   %eax
c00042d1:	6a 00                	push   $0x0
c00042d3:	ff 75 08             	pushl  0x8(%ebp)
c00042d6:	e8 78 f5 ff ff       	call   c0003853 <memset>
c00042db:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:268
	uint8_t out_pad_0idx = 0;
c00042de:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/thread/thread.c:269
	switch(format) {
c00042e2:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
c00042e6:	83 f8 73             	cmp    $0x73,%eax
c00042e9:	74 0c                	je     c00042f7 <pad_print+0x39>
c00042eb:	83 f8 78             	cmp    $0x78,%eax
c00042ee:	74 40                	je     c0004330 <pad_print+0x72>
c00042f0:	83 f8 64             	cmp    $0x64,%eax
c00042f3:	74 1d                	je     c0004312 <pad_print+0x54>
c00042f5:	eb 55                	jmp    c000434c <pad_print+0x8e>
/work/x86_os_my/thread/thread.c:271
		case 's':
		out_pad_0idx = sprintf(buf, "%s", ptr);
c00042f7:	83 ec 04             	sub    $0x4,%esp
c00042fa:	ff 75 10             	pushl  0x10(%ebp)
c00042fd:	68 4a d4 00 c0       	push   $0xc000d44a
c0004302:	ff 75 08             	pushl  0x8(%ebp)
c0004305:	e8 dc 19 00 00       	call   c0005ce6 <sprintf>
c000430a:	83 c4 10             	add    $0x10,%esp
c000430d:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/thread/thread.c:272
		break;
c0004310:	eb 3a                	jmp    c000434c <pad_print+0x8e>
/work/x86_os_my/thread/thread.c:274
		case 'd':
		out_pad_0idx = sprintf(buf, "%d", *((int16_t*)ptr));
c0004312:	8b 45 10             	mov    0x10(%ebp),%eax
c0004315:	0f b7 00             	movzwl (%eax),%eax
c0004318:	98                   	cwtl   
c0004319:	83 ec 04             	sub    $0x4,%esp
c000431c:	50                   	push   %eax
c000431d:	68 4d d4 00 c0       	push   $0xc000d44d
c0004322:	ff 75 08             	pushl  0x8(%ebp)
c0004325:	e8 bc 19 00 00       	call   c0005ce6 <sprintf>
c000432a:	83 c4 10             	add    $0x10,%esp
c000432d:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/thread/thread.c:276
		case 'x':
		out_pad_0idx = sprintf(buf, "%x", *((uint32_t*)ptr));
c0004330:	8b 45 10             	mov    0x10(%ebp),%eax
c0004333:	8b 00                	mov    (%eax),%eax
c0004335:	83 ec 04             	sub    $0x4,%esp
c0004338:	50                   	push   %eax
c0004339:	68 50 d4 00 c0       	push   $0xc000d450
c000433e:	ff 75 08             	pushl  0x8(%ebp)
c0004341:	e8 a0 19 00 00       	call   c0005ce6 <sprintf>
c0004346:	83 c4 10             	add    $0x10,%esp
c0004349:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/thread/thread.c:278
	}
	while(out_pad_0idx < buf_len) { // 以空格填充
c000434c:	eb 16                	jmp    c0004364 <pad_print+0xa6>
/work/x86_os_my/thread/thread.c:279
		buf[out_pad_0idx] = ' ';
c000434e:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c0004352:	8b 45 08             	mov    0x8(%ebp),%eax
c0004355:	01 d0                	add    %edx,%eax
c0004357:	c6 00 20             	movb   $0x20,(%eax)
/work/x86_os_my/thread/thread.c:280
		out_pad_0idx++;
c000435a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000435e:	83 c0 01             	add    $0x1,%eax
c0004361:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/thread/thread.c:278
		case 'd':
		out_pad_0idx = sprintf(buf, "%d", *((int16_t*)ptr));
		case 'x':
		out_pad_0idx = sprintf(buf, "%x", *((uint32_t*)ptr));
	}
	while(out_pad_0idx < buf_len) { // 以空格填充
c0004364:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0004368:	3b 45 0c             	cmp    0xc(%ebp),%eax
c000436b:	7c e1                	jl     c000434e <pad_print+0x90>
/work/x86_os_my/thread/thread.c:282
		buf[out_pad_0idx] = ' ';
		out_pad_0idx++;
	}
	sys_write(stdout_no, buf, buf_len - 1);
c000436d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0004370:	83 e8 01             	sub    $0x1,%eax
c0004373:	83 ec 04             	sub    $0x4,%esp
c0004376:	50                   	push   %eax
c0004377:	ff 75 08             	pushl  0x8(%ebp)
c000437a:	6a 01                	push   $0x1
c000437c:	e8 b4 34 00 00       	call   c0007835 <sys_write>
c0004381:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:283
}
c0004384:	90                   	nop
c0004385:	c9                   	leave  
c0004386:	c3                   	ret    

c0004387 <elem2thread_info>:
elem2thread_info():
/work/x86_os_my/thread/thread.c:286

/* 用于在list_traversal函数中的回调函数,用于针对线程队列的处理 */
static bool elem2thread_info(struct list_elem* pelem, int arg UNUSED) {
c0004387:	55                   	push   %ebp
c0004388:	89 e5                	mov    %esp,%ebp
c000438a:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/thread/thread.c:287
	struct task_struct* pthread = elem2entry(struct task_struct, all_list_tag, pelem);
c000438d:	8b 45 08             	mov    0x8(%ebp),%eax
c0004390:	83 e8 4c             	sub    $0x4c,%eax
c0004393:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:288
	char out_pad[16] = {0};
c0004396:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c000439d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c00043a4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c00043ab:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/thread/thread.c:290

	pad_print(out_pad, 16, &pthread->pid, 'd');
c00043b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00043b5:	83 c0 04             	add    $0x4,%eax
c00043b8:	6a 64                	push   $0x64
c00043ba:	50                   	push   %eax
c00043bb:	6a 10                	push   $0x10
c00043bd:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c00043c0:	50                   	push   %eax
c00043c1:	e8 f8 fe ff ff       	call   c00042be <pad_print>
c00043c6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:292

	if (pthread->parent_pid == -1) {
c00043c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00043cc:	0f b7 80 10 01 00 00 	movzwl 0x110(%eax),%eax
c00043d3:	66 83 f8 ff          	cmp    $0xffff,%ax
c00043d7:	75 17                	jne    c00043f0 <elem2thread_info+0x69>
/work/x86_os_my/thread/thread.c:293
		pad_print(out_pad, 16, "NULL", 's');
c00043d9:	6a 73                	push   $0x73
c00043db:	68 53 d4 00 c0       	push   $0xc000d453
c00043e0:	6a 10                	push   $0x10
c00043e2:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c00043e5:	50                   	push   %eax
c00043e6:	e8 d3 fe ff ff       	call   c00042be <pad_print>
c00043eb:	83 c4 10             	add    $0x10,%esp
c00043ee:	eb 19                	jmp    c0004409 <elem2thread_info+0x82>
/work/x86_os_my/thread/thread.c:295
	} else {
		pad_print(out_pad, 16, &pthread->parent_pid, 'd');
c00043f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00043f3:	05 10 01 00 00       	add    $0x110,%eax
c00043f8:	6a 64                	push   $0x64
c00043fa:	50                   	push   %eax
c00043fb:	6a 10                	push   $0x10
c00043fd:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0004400:	50                   	push   %eax
c0004401:	e8 b8 fe ff ff       	call   c00042be <pad_print>
c0004406:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:298
	}

	switch (pthread->status) {
c0004409:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000440c:	8b 40 08             	mov    0x8(%eax),%eax
c000440f:	83 f8 05             	cmp    $0x5,%eax
c0004412:	0f 87 91 00 00 00    	ja     c00044a9 <elem2thread_info+0x122>
c0004418:	8b 04 85 a0 d4 00 c0 	mov    -0x3fff2b60(,%eax,4),%eax
c000441f:	ff e0                	jmp    *%eax
/work/x86_os_my/thread/thread.c:300
		case 0:
		pad_print(out_pad, 16, "RUNNING", 's');
c0004421:	6a 73                	push   $0x73
c0004423:	68 58 d4 00 c0       	push   $0xc000d458
c0004428:	6a 10                	push   $0x10
c000442a:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c000442d:	50                   	push   %eax
c000442e:	e8 8b fe ff ff       	call   c00042be <pad_print>
c0004433:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:301
		break;
c0004436:	eb 71                	jmp    c00044a9 <elem2thread_info+0x122>
/work/x86_os_my/thread/thread.c:303
		case 1:
		pad_print(out_pad, 16, "READY", 's');
c0004438:	6a 73                	push   $0x73
c000443a:	68 60 d4 00 c0       	push   $0xc000d460
c000443f:	6a 10                	push   $0x10
c0004441:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0004444:	50                   	push   %eax
c0004445:	e8 74 fe ff ff       	call   c00042be <pad_print>
c000444a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:304
		break;
c000444d:	eb 5a                	jmp    c00044a9 <elem2thread_info+0x122>
/work/x86_os_my/thread/thread.c:306
		case 2:
		pad_print(out_pad, 16, "BLOCKED", 's');
c000444f:	6a 73                	push   $0x73
c0004451:	68 66 d4 00 c0       	push   $0xc000d466
c0004456:	6a 10                	push   $0x10
c0004458:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c000445b:	50                   	push   %eax
c000445c:	e8 5d fe ff ff       	call   c00042be <pad_print>
c0004461:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:307
		break;
c0004464:	eb 43                	jmp    c00044a9 <elem2thread_info+0x122>
/work/x86_os_my/thread/thread.c:309
		case 3:
		pad_print(out_pad, 16, "WAITING", 's');
c0004466:	6a 73                	push   $0x73
c0004468:	68 6e d4 00 c0       	push   $0xc000d46e
c000446d:	6a 10                	push   $0x10
c000446f:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0004472:	50                   	push   %eax
c0004473:	e8 46 fe ff ff       	call   c00042be <pad_print>
c0004478:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:310
		break;
c000447b:	eb 2c                	jmp    c00044a9 <elem2thread_info+0x122>
/work/x86_os_my/thread/thread.c:312
		case 4:
		pad_print(out_pad, 16, "HANGING", 's');
c000447d:	6a 73                	push   $0x73
c000447f:	68 76 d4 00 c0       	push   $0xc000d476
c0004484:	6a 10                	push   $0x10
c0004486:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0004489:	50                   	push   %eax
c000448a:	e8 2f fe ff ff       	call   c00042be <pad_print>
c000448f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:313
		break;
c0004492:	eb 15                	jmp    c00044a9 <elem2thread_info+0x122>
/work/x86_os_my/thread/thread.c:315
		case 5:
		pad_print(out_pad, 16, "DIED", 's');
c0004494:	6a 73                	push   $0x73
c0004496:	68 7e d4 00 c0       	push   $0xc000d47e
c000449b:	6a 10                	push   $0x10
c000449d:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c00044a0:	50                   	push   %eax
c00044a1:	e8 18 fe ff ff       	call   c00042be <pad_print>
c00044a6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:317
	}
	pad_print(out_pad, 16, &pthread->elapsed_ticks, 'x');
c00044a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00044ac:	83 c0 20             	add    $0x20,%eax
c00044af:	6a 78                	push   $0x78
c00044b1:	50                   	push   %eax
c00044b2:	6a 10                	push   $0x10
c00044b4:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c00044b7:	50                   	push   %eax
c00044b8:	e8 01 fe ff ff       	call   c00042be <pad_print>
c00044bd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:319

	memset(out_pad, 0, 16);
c00044c0:	83 ec 04             	sub    $0x4,%esp
c00044c3:	6a 10                	push   $0x10
c00044c5:	6a 00                	push   $0x0
c00044c7:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c00044ca:	50                   	push   %eax
c00044cb:	e8 83 f3 ff ff       	call   c0003853 <memset>
c00044d0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:320
	ASSERT(strlen(pthread->name) < 17);
c00044d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00044d6:	83 c0 0c             	add    $0xc,%eax
c00044d9:	83 ec 0c             	sub    $0xc,%esp
c00044dc:	50                   	push   %eax
c00044dd:	e8 fb f4 ff ff       	call   c00039dd <strlen>
c00044e2:	83 c4 10             	add    $0x10,%esp
c00044e5:	83 f8 10             	cmp    $0x10,%eax
c00044e8:	76 1c                	jbe    c0004506 <elem2thread_info+0x17f>
/work/x86_os_my/thread/thread.c:320 (discriminator 1)
c00044ea:	68 83 d4 00 c0       	push   $0xc000d483
c00044ef:	68 8c d5 00 c0       	push   $0xc000d58c
c00044f4:	68 40 01 00 00       	push   $0x140
c00044f9:	68 25 d2 00 c0       	push   $0xc000d225
c00044fe:	e8 ae de ff ff       	call   c00023b1 <panic_spin>
c0004503:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:321
	memcpy(out_pad, pthread->name, strlen(pthread->name));
c0004506:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0004509:	83 c0 0c             	add    $0xc,%eax
c000450c:	83 ec 0c             	sub    $0xc,%esp
c000450f:	50                   	push   %eax
c0004510:	e8 c8 f4 ff ff       	call   c00039dd <strlen>
c0004515:	83 c4 10             	add    $0x10,%esp
c0004518:	89 c2                	mov    %eax,%edx
c000451a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000451d:	83 c0 0c             	add    $0xc,%eax
c0004520:	83 ec 04             	sub    $0x4,%esp
c0004523:	52                   	push   %edx
c0004524:	50                   	push   %eax
c0004525:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0004528:	50                   	push   %eax
c0004529:	e8 77 f3 ff ff       	call   c00038a5 <memcpy>
c000452e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:322
	strcat(out_pad, "\n");
c0004531:	83 ec 08             	sub    $0x8,%esp
c0004534:	68 9e d4 00 c0       	push   $0xc000d49e
c0004539:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c000453c:	50                   	push   %eax
c000453d:	e8 15 f6 ff ff       	call   c0003b57 <strcat>
c0004542:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:323
	sys_write(stdout_no, out_pad, strlen(out_pad));
c0004545:	83 ec 0c             	sub    $0xc,%esp
c0004548:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c000454b:	50                   	push   %eax
c000454c:	e8 8c f4 ff ff       	call   c00039dd <strlen>
c0004551:	83 c4 10             	add    $0x10,%esp
c0004554:	83 ec 04             	sub    $0x4,%esp
c0004557:	50                   	push   %eax
c0004558:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c000455b:	50                   	push   %eax
c000455c:	6a 01                	push   $0x1
c000455e:	e8 d2 32 00 00       	call   c0007835 <sys_write>
c0004563:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:324
	return false;	// 此处返回false是为了迎合主调函数list_traversal,只有回调函数返回false时才会继续调用此函数
c0004566:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/thread/thread.c:325
}
c000456b:	c9                   	leave  
c000456c:	c3                   	ret    

c000456d <sys_ps>:
sys_ps():
/work/x86_os_my/thread/thread.c:328

/* 打印任务列表 */
void sys_ps(void) {
c000456d:	55                   	push   %ebp
c000456e:	89 e5                	mov    %esp,%ebp
c0004570:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/thread.c:330
	///////////////   |<--   15  -->||<--   15  -->||<--   15  -->||<--   15  -->||<-7->|
	char* ps_title = "PID            PPID           STAT           TICKS          COMMAND\n";
c0004573:	c7 45 f4 b8 d4 00 c0 	movl   $0xc000d4b8,-0xc(%ebp)
/work/x86_os_my/thread/thread.c:331
	sys_write(stdout_no, ps_title, strlen(ps_title));
c000457a:	83 ec 0c             	sub    $0xc,%esp
c000457d:	ff 75 f4             	pushl  -0xc(%ebp)
c0004580:	e8 58 f4 ff ff       	call   c00039dd <strlen>
c0004585:	83 c4 10             	add    $0x10,%esp
c0004588:	83 ec 04             	sub    $0x4,%esp
c000458b:	50                   	push   %eax
c000458c:	ff 75 f4             	pushl  -0xc(%ebp)
c000458f:	6a 01                	push   $0x1
c0004591:	e8 9f 32 00 00       	call   c0007835 <sys_write>
c0004596:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:332
	list_traversal(&thread_all_list, elem2thread_info, 0);
c0004599:	83 ec 04             	sub    $0x4,%esp
c000459c:	6a 00                	push   $0x0
c000459e:	68 87 43 00 c0       	push   $0xc0004387
c00045a3:	68 9c 21 01 c0       	push   $0xc001219c
c00045a8:	e8 da 01 00 00       	call   c0004787 <list_traversal>
c00045ad:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:333
}
c00045b0:	90                   	nop
c00045b1:	c9                   	leave  
c00045b2:	c3                   	ret    

c00045b3 <thread_init>:
thread_init():
/work/x86_os_my/thread/thread.c:337


/* 初始化线程环境 */
void thread_init(void) {
c00045b3:	55                   	push   %ebp
c00045b4:	89 e5                	mov    %esp,%ebp
c00045b6:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/thread.c:338
	put_str("thread_init start\n");
c00045b9:	83 ec 0c             	sub    $0xc,%esp
c00045bc:	68 fd d4 00 c0       	push   $0xc000d4fd
c00045c1:	e8 3a dc ff ff       	call   c0002200 <put_str>
c00045c6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:339
	list_init(&thread_ready_list);
c00045c9:	83 ec 0c             	sub    $0xc,%esp
c00045cc:	68 8c 21 01 c0       	push   $0xc001218c
c00045d1:	e8 6b 00 00 00       	call   c0004641 <list_init>
c00045d6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:340
	list_init(&thread_all_list);
c00045d9:	83 ec 0c             	sub    $0xc,%esp
c00045dc:	68 9c 21 01 c0       	push   $0xc001219c
c00045e1:	e8 5b 00 00 00       	call   c0004641 <list_init>
c00045e6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:341
	lock_init(&pid_lock);
c00045e9:	83 ec 0c             	sub    $0xc,%esp
c00045ec:	68 b4 21 01 c0       	push   $0xc00121b4
c00045f1:	e8 3f 03 00 00       	call   c0004935 <lock_init>
c00045f6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:343
	/* 先创建第一个用户进程:init */
	process_execute(init, "init");	// 放在第一个初始化,这是第一个进程,init进程的pid为1
c00045f9:	83 ec 08             	sub    $0x8,%esp
c00045fc:	68 10 d5 00 c0       	push   $0xc000d510
c0004601:	68 c6 15 00 c0       	push   $0xc00015c6
c0004606:	e8 d9 0f 00 00       	call   c00055e4 <process_execute>
c000460b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:345
	/* 将当前main函数创建为线程 */
	make_main_thread();
c000460e:	e8 00 f9 ff ff       	call   c0003f13 <make_main_thread>
/work/x86_os_my/thread/thread.c:347
	/* 创建idle线程 */
	idle_thread = thread_start("idle", 10, idle, NULL);
c0004613:	6a 00                	push   $0x0
c0004615:	68 23 3c 00 c0       	push   $0xc0003c23
c000461a:	6a 0a                	push   $0xa
c000461c:	68 15 d5 00 c0       	push   $0xc000d515
c0004621:	e8 0e f8 ff ff       	call   c0003e34 <thread_start>
c0004626:	83 c4 10             	add    $0x10,%esp
c0004629:	a3 ac 21 01 c0       	mov    %eax,0xc00121ac
/work/x86_os_my/thread/thread.c:348
	put_str("thread_init done\n");
c000462e:	83 ec 0c             	sub    $0xc,%esp
c0004631:	68 1a d5 00 c0       	push   $0xc000d51a
c0004636:	e8 c5 db ff ff       	call   c0002200 <put_str>
c000463b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/thread.c:349
}
c000463e:	90                   	nop
c000463f:	c9                   	leave  
c0004640:	c3                   	ret    

c0004641 <list_init>:
list_init():
/work/x86_os_my/lib/kernel/list.c:6
#include "list.h"
#include "interrupt.h"
/* 注意关中断的操作：临界区 */

/* 初始化双向链表list */
void list_init (struct list* list) {
c0004641:	55                   	push   %ebp
c0004642:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/lib/kernel/list.c:7
	list->head.prev = NULL;
c0004644:	8b 45 08             	mov    0x8(%ebp),%eax
c0004647:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/lib/kernel/list.c:8
	list->head.next = &list->tail;
c000464d:	8b 45 08             	mov    0x8(%ebp),%eax
c0004650:	8d 50 08             	lea    0x8(%eax),%edx
c0004653:	8b 45 08             	mov    0x8(%ebp),%eax
c0004656:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/lib/kernel/list.c:9
	list->tail.prev = &list->head;
c0004659:	8b 55 08             	mov    0x8(%ebp),%edx
c000465c:	8b 45 08             	mov    0x8(%ebp),%eax
c000465f:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/lib/kernel/list.c:10
	list->tail.next = NULL;
c0004662:	8b 45 08             	mov    0x8(%ebp),%eax
c0004665:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
/work/x86_os_my/lib/kernel/list.c:11
}
c000466c:	90                   	nop
c000466d:	5d                   	pop    %ebp
c000466e:	c3                   	ret    

c000466f <list_insert_before>:
list_insert_before():
/work/x86_os_my/lib/kernel/list.c:14

/* 把链表元素elem插入在元素before之前 */
void list_insert_before(struct list_elem* before, struct list_elem* elem) { 
c000466f:	55                   	push   %ebp
c0004670:	89 e5                	mov    %esp,%ebp
c0004672:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/kernel/list.c:15
	enum intr_status old_status = intr_disable();
c0004675:	e8 4f d3 ff ff       	call   c00019c9 <intr_disable>
c000467a:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/list.c:18

	/* 将before前驱元素的后继元素更新为elem, 暂时使before脱离链表*/ 
	before->prev->next = elem; 
c000467d:	8b 45 08             	mov    0x8(%ebp),%eax
c0004680:	8b 00                	mov    (%eax),%eax
c0004682:	8b 55 0c             	mov    0xc(%ebp),%edx
c0004685:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/lib/kernel/list.c:22

	/* 更新elem自己的前驱结点为before的前驱,
	* 更新elem自己的后继结点为before, 于是before又回到链表 */
	elem->prev = before->prev;
c0004688:	8b 45 08             	mov    0x8(%ebp),%eax
c000468b:	8b 10                	mov    (%eax),%edx
c000468d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0004690:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/lib/kernel/list.c:23
	elem->next = before;
c0004692:	8b 45 0c             	mov    0xc(%ebp),%eax
c0004695:	8b 55 08             	mov    0x8(%ebp),%edx
c0004698:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/lib/kernel/list.c:26

	/* 更新before的前驱结点为elem */
	before->prev = elem;
c000469b:	8b 45 08             	mov    0x8(%ebp),%eax
c000469e:	8b 55 0c             	mov    0xc(%ebp),%edx
c00046a1:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/lib/kernel/list.c:28

	intr_set_status(old_status);
c00046a3:	83 ec 0c             	sub    $0xc,%esp
c00046a6:	ff 75 f4             	pushl  -0xc(%ebp)
c00046a9:	e8 44 d3 ff ff       	call   c00019f2 <intr_set_status>
c00046ae:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:29
}
c00046b1:	90                   	nop
c00046b2:	c9                   	leave  
c00046b3:	c3                   	ret    

c00046b4 <list_push>:
list_push():
/work/x86_os_my/lib/kernel/list.c:32

/* 添加元素到列表队首,类似栈push操作 */
void list_push(struct list* plist, struct list_elem* elem) {
c00046b4:	55                   	push   %ebp
c00046b5:	89 e5                	mov    %esp,%ebp
c00046b7:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/lib/kernel/list.c:33
	list_insert_before(plist->head.next, elem); // 在队头插入elem
c00046ba:	8b 45 08             	mov    0x8(%ebp),%eax
c00046bd:	8b 40 04             	mov    0x4(%eax),%eax
c00046c0:	83 ec 08             	sub    $0x8,%esp
c00046c3:	ff 75 0c             	pushl  0xc(%ebp)
c00046c6:	50                   	push   %eax
c00046c7:	e8 a3 ff ff ff       	call   c000466f <list_insert_before>
c00046cc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:34
}
c00046cf:	90                   	nop
c00046d0:	c9                   	leave  
c00046d1:	c3                   	ret    

c00046d2 <list_append>:
list_append():
/work/x86_os_my/lib/kernel/list.c:37

/* 追加元素到链表队尾,类似队列的先进先出操作 */
void list_append(struct list* plist, struct list_elem* elem) {
c00046d2:	55                   	push   %ebp
c00046d3:	89 e5                	mov    %esp,%ebp
c00046d5:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/lib/kernel/list.c:38
	list_insert_before(&plist->tail, elem);     // 在队尾的前面插入
c00046d8:	8b 45 08             	mov    0x8(%ebp),%eax
c00046db:	83 c0 08             	add    $0x8,%eax
c00046de:	83 ec 08             	sub    $0x8,%esp
c00046e1:	ff 75 0c             	pushl  0xc(%ebp)
c00046e4:	50                   	push   %eax
c00046e5:	e8 85 ff ff ff       	call   c000466f <list_insert_before>
c00046ea:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:39
}
c00046ed:	90                   	nop
c00046ee:	c9                   	leave  
c00046ef:	c3                   	ret    

c00046f0 <list_remove>:
list_remove():
/work/x86_os_my/lib/kernel/list.c:42

/* 使元素pelem脱离链表 */
void list_remove(struct list_elem* pelem) {
c00046f0:	55                   	push   %ebp
c00046f1:	89 e5                	mov    %esp,%ebp
c00046f3:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/kernel/list.c:43
	enum intr_status old_status = intr_disable();
c00046f6:	e8 ce d2 ff ff       	call   c00019c9 <intr_disable>
c00046fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/list.c:45

	pelem->prev->next = pelem->next;
c00046fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0004701:	8b 00                	mov    (%eax),%eax
c0004703:	8b 55 08             	mov    0x8(%ebp),%edx
c0004706:	8b 52 04             	mov    0x4(%edx),%edx
c0004709:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/lib/kernel/list.c:46
	pelem->next->prev = pelem->prev;
c000470c:	8b 45 08             	mov    0x8(%ebp),%eax
c000470f:	8b 40 04             	mov    0x4(%eax),%eax
c0004712:	8b 55 08             	mov    0x8(%ebp),%edx
c0004715:	8b 12                	mov    (%edx),%edx
c0004717:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/lib/kernel/list.c:48

	intr_set_status(old_status);
c0004719:	83 ec 0c             	sub    $0xc,%esp
c000471c:	ff 75 f4             	pushl  -0xc(%ebp)
c000471f:	e8 ce d2 ff ff       	call   c00019f2 <intr_set_status>
c0004724:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:49
}
c0004727:	90                   	nop
c0004728:	c9                   	leave  
c0004729:	c3                   	ret    

c000472a <list_pop>:
list_pop():
/work/x86_os_my/lib/kernel/list.c:52

/* 将链表第一个元素弹出并返回,类似栈的pop操作 */
struct list_elem* list_pop(struct list* plist) {
c000472a:	55                   	push   %ebp
c000472b:	89 e5                	mov    %esp,%ebp
c000472d:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/kernel/list.c:53
	struct list_elem* elem = plist->head.next;
c0004730:	8b 45 08             	mov    0x8(%ebp),%eax
c0004733:	8b 40 04             	mov    0x4(%eax),%eax
c0004736:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/list.c:54
	list_remove(elem);
c0004739:	83 ec 0c             	sub    $0xc,%esp
c000473c:	ff 75 f4             	pushl  -0xc(%ebp)
c000473f:	e8 ac ff ff ff       	call   c00046f0 <list_remove>
c0004744:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:55
	return elem;
c0004747:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/lib/kernel/list.c:56
} 
c000474a:	c9                   	leave  
c000474b:	c3                   	ret    

c000474c <elem_find>:
elem_find():
/work/x86_os_my/lib/kernel/list.c:59

/* 从链表中查找元素obj_elem,成功时返回true,失败时返回false */
bool elem_find(struct list* plist, struct list_elem* obj_elem) {
c000474c:	55                   	push   %ebp
c000474d:	89 e5                	mov    %esp,%ebp
c000474f:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:60
	struct list_elem* elem = plist->head.next;
c0004752:	8b 45 08             	mov    0x8(%ebp),%eax
c0004755:	8b 40 04             	mov    0x4(%eax),%eax
c0004758:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/kernel/list.c:61
	while (elem != &plist->tail) {
c000475b:	eb 18                	jmp    c0004775 <elem_find+0x29>
/work/x86_os_my/lib/kernel/list.c:62
	if (elem == obj_elem) {
c000475d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0004760:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0004763:	75 07                	jne    c000476c <elem_find+0x20>
/work/x86_os_my/lib/kernel/list.c:63
		return true;
c0004765:	b8 01 00 00 00       	mov    $0x1,%eax
c000476a:	eb 19                	jmp    c0004785 <elem_find+0x39>
/work/x86_os_my/lib/kernel/list.c:65
	}
		elem = elem->next;
c000476c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000476f:	8b 40 04             	mov    0x4(%eax),%eax
c0004772:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/kernel/list.c:61
} 

/* 从链表中查找元素obj_elem,成功时返回true,失败时返回false */
bool elem_find(struct list* plist, struct list_elem* obj_elem) {
	struct list_elem* elem = plist->head.next;
	while (elem != &plist->tail) {
c0004775:	8b 45 08             	mov    0x8(%ebp),%eax
c0004778:	83 c0 08             	add    $0x8,%eax
c000477b:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c000477e:	75 dd                	jne    c000475d <elem_find+0x11>
/work/x86_os_my/lib/kernel/list.c:67
	if (elem == obj_elem) {
		return true;
	}
		elem = elem->next;
	}
	return false;
c0004780:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/lib/kernel/list.c:68
}
c0004785:	c9                   	leave  
c0004786:	c3                   	ret    

c0004787 <list_traversal>:
list_traversal():
/work/x86_os_my/lib/kernel/list.c:74

/* 把列表plist中的每个元素elem和arg传给回调函数func,
 * arg给func用来判断elem是否符合条件.
 * 本函数的功能是遍历列表内所有元素,逐个判断是否有符合条件的元素。
 * 找到符合条件的元素返回元素指针,否则返回NULL. */
struct list_elem* list_traversal(struct list* plist, function func, int arg) {
c0004787:	55                   	push   %ebp
c0004788:	89 e5                	mov    %esp,%ebp
c000478a:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/kernel/list.c:75
	struct list_elem* elem = plist->head.next;
c000478d:	8b 45 08             	mov    0x8(%ebp),%eax
c0004790:	8b 40 04             	mov    0x4(%eax),%eax
c0004793:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/list.c:77
	/* 如果队列为空,就必然没有符合条件的结点,故直接返回NULL */
	if (list_empty(plist)) { 
c0004796:	83 ec 0c             	sub    $0xc,%esp
c0004799:	ff 75 08             	pushl  0x8(%ebp)
c000479c:	e8 78 00 00 00       	call   c0004819 <list_empty>
c00047a1:	83 c4 10             	add    $0x10,%esp
c00047a4:	85 c0                	test   %eax,%eax
c00047a6:	74 2a                	je     c00047d2 <list_traversal+0x4b>
/work/x86_os_my/lib/kernel/list.c:78
		return NULL;
c00047a8:	b8 00 00 00 00       	mov    $0x0,%eax
c00047ad:	eb 33                	jmp    c00047e2 <list_traversal+0x5b>
/work/x86_os_my/lib/kernel/list.c:82
	}

	while (elem != &plist->tail) {
	if (func(elem, arg)) {		// func返回ture则认为该元素在回调函数中符合条件,命中,故停止继续遍历
c00047af:	83 ec 08             	sub    $0x8,%esp
c00047b2:	ff 75 10             	pushl  0x10(%ebp)
c00047b5:	ff 75 f4             	pushl  -0xc(%ebp)
c00047b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c00047bb:	ff d0                	call   *%eax
c00047bd:	83 c4 10             	add    $0x10,%esp
c00047c0:	85 c0                	test   %eax,%eax
c00047c2:	74 05                	je     c00047c9 <list_traversal+0x42>
/work/x86_os_my/lib/kernel/list.c:83
		return elem;
c00047c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00047c7:	eb 19                	jmp    c00047e2 <list_traversal+0x5b>
/work/x86_os_my/lib/kernel/list.c:85
	}
		elem = elem->next;		// 若回调函数func返回false,则继续遍历
c00047c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00047cc:	8b 40 04             	mov    0x4(%eax),%eax
c00047cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/list.c:81
	/* 如果队列为空,就必然没有符合条件的结点,故直接返回NULL */
	if (list_empty(plist)) { 
		return NULL;
	}

	while (elem != &plist->tail) {
c00047d2:	8b 45 08             	mov    0x8(%ebp),%eax
c00047d5:	83 c0 08             	add    $0x8,%eax
c00047d8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c00047db:	75 d2                	jne    c00047af <list_traversal+0x28>
/work/x86_os_my/lib/kernel/list.c:87
	if (func(elem, arg)) {		// func返回ture则认为该元素在回调函数中符合条件,命中,故停止继续遍历
		return elem;
	}
		elem = elem->next;		// 若回调函数func返回false,则继续遍历
	}
	return NULL;
c00047dd:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/lib/kernel/list.c:88
}
c00047e2:	c9                   	leave  
c00047e3:	c3                   	ret    

c00047e4 <list_len>:
list_len():
/work/x86_os_my/lib/kernel/list.c:91

/* 返回链表长度 */
uint32_t list_len(struct list* plist) {
c00047e4:	55                   	push   %ebp
c00047e5:	89 e5                	mov    %esp,%ebp
c00047e7:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/kernel/list.c:92
	struct list_elem* elem = plist->head.next;
c00047ea:	8b 45 08             	mov    0x8(%ebp),%eax
c00047ed:	8b 40 04             	mov    0x4(%eax),%eax
c00047f0:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/kernel/list.c:93
	uint32_t length = 0;
c00047f3:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
/work/x86_os_my/lib/kernel/list.c:94
	while (elem != &plist->tail) {
c00047fa:	eb 0d                	jmp    c0004809 <list_len+0x25>
/work/x86_os_my/lib/kernel/list.c:95
		length++; 
c00047fc:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
/work/x86_os_my/lib/kernel/list.c:96
		elem = elem->next;
c0004800:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0004803:	8b 40 04             	mov    0x4(%eax),%eax
c0004806:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/kernel/list.c:94

/* 返回链表长度 */
uint32_t list_len(struct list* plist) {
	struct list_elem* elem = plist->head.next;
	uint32_t length = 0;
	while (elem != &plist->tail) {
c0004809:	8b 45 08             	mov    0x8(%ebp),%eax
c000480c:	83 c0 08             	add    $0x8,%eax
c000480f:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0004812:	75 e8                	jne    c00047fc <list_len+0x18>
/work/x86_os_my/lib/kernel/list.c:98
		length++; 
		elem = elem->next;
	}
	return length;
c0004814:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/kernel/list.c:99
}
c0004817:	c9                   	leave  
c0004818:	c3                   	ret    

c0004819 <list_empty>:
list_empty():
/work/x86_os_my/lib/kernel/list.c:102

/* 判断链表是否为空,空时返回true,否则返回false */
bool list_empty(struct list* plist) {		// 判断队列是否为空
c0004819:	55                   	push   %ebp
c000481a:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/lib/kernel/list.c:103
	return (plist->head.next == &plist->tail ? true : false);
c000481c:	8b 45 08             	mov    0x8(%ebp),%eax
c000481f:	8b 40 04             	mov    0x4(%eax),%eax
c0004822:	8b 55 08             	mov    0x8(%ebp),%edx
c0004825:	83 c2 08             	add    $0x8,%edx
c0004828:	39 d0                	cmp    %edx,%eax
c000482a:	0f 94 c0             	sete   %al
c000482d:	0f b6 c0             	movzbl %al,%eax
/work/x86_os_my/lib/kernel/list.c:104
}
c0004830:	5d                   	pop    %ebp
c0004831:	c3                   	ret    
c0004832:	66 90                	xchg   %ax,%ax
c0004834:	66 90                	xchg   %ax,%ax
c0004836:	66 90                	xchg   %ax,%ax
c0004838:	66 90                	xchg   %ax,%ax
c000483a:	66 90                	xchg   %ax,%ax
c000483c:	66 90                	xchg   %ax,%ax
c000483e:	66 90                	xchg   %ax,%ax

c0004840 <switch_to>:
switch_to():
c0004840:	56                   	push   %esi
c0004841:	57                   	push   %edi
c0004842:	53                   	push   %ebx
c0004843:	55                   	push   %ebp
c0004844:	8b 44 24 14          	mov    0x14(%esp),%eax
c0004848:	89 20                	mov    %esp,(%eax)
c000484a:	8b 44 24 18          	mov    0x18(%esp),%eax
c000484e:	8b 20                	mov    (%eax),%esp
c0004850:	5d                   	pop    %ebp
c0004851:	5b                   	pop    %ebx
c0004852:	5f                   	pop    %edi
c0004853:	5e                   	pop    %esi
c0004854:	c3                   	ret    

c0004855 <console_init>:
console_init():
/work/x86_os_my/device/console.c:9
#include "sync.h"
#include "thread.h"
static struct lock console_lock;	// 控制台锁

/* 初始化终端 */
void console_init() {
c0004855:	55                   	push   %ebp
c0004856:	89 e5                	mov    %esp,%ebp
c0004858:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/console.c:10
	lock_init(&console_lock);
c000485b:	83 ec 0c             	sub    $0xc,%esp
c000485e:	68 70 15 01 c0       	push   $0xc0011570
c0004863:	e8 cd 00 00 00       	call   c0004935 <lock_init>
c0004868:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:11
}
c000486b:	90                   	nop
c000486c:	c9                   	leave  
c000486d:	c3                   	ret    

c000486e <console_acquire>:
console_acquire():
/work/x86_os_my/device/console.c:14

/* 获取终端 */
void console_acquire() {
c000486e:	55                   	push   %ebp
c000486f:	89 e5                	mov    %esp,%ebp
c0004871:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/console.c:15
	lock_acquire(&console_lock);
c0004874:	83 ec 0c             	sub    $0xc,%esp
c0004877:	68 70 15 01 c0       	push   $0xc0011570
c000487c:	e8 8e 02 00 00       	call   c0004b0f <lock_acquire>
c0004881:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:16
}
c0004884:	90                   	nop
c0004885:	c9                   	leave  
c0004886:	c3                   	ret    

c0004887 <console_release>:
console_release():
/work/x86_os_my/device/console.c:19

/* 释放终端 */
void console_release() {
c0004887:	55                   	push   %ebp
c0004888:	89 e5                	mov    %esp,%ebp
c000488a:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/console.c:20
	lock_release(&console_lock);
c000488d:	83 ec 0c             	sub    $0xc,%esp
c0004890:	68 70 15 01 c0       	push   $0xc0011570
c0004895:	e8 ec 02 00 00       	call   c0004b86 <lock_release>
c000489a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:21
}
c000489d:	90                   	nop
c000489e:	c9                   	leave  
c000489f:	c3                   	ret    

c00048a0 <console_put_str>:
console_put_str():
/work/x86_os_my/device/console.c:24

/* 终端中输出字符串 */
void console_put_str(char* str) {
c00048a0:	55                   	push   %ebp
c00048a1:	89 e5                	mov    %esp,%ebp
c00048a3:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/console.c:25
	console_acquire();
c00048a6:	e8 c3 ff ff ff       	call   c000486e <console_acquire>
/work/x86_os_my/device/console.c:26
	put_str(str);
c00048ab:	83 ec 0c             	sub    $0xc,%esp
c00048ae:	ff 75 08             	pushl  0x8(%ebp)
c00048b1:	e8 4a d9 ff ff       	call   c0002200 <put_str>
c00048b6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:27
	console_release();
c00048b9:	e8 c9 ff ff ff       	call   c0004887 <console_release>
/work/x86_os_my/device/console.c:28
}
c00048be:	90                   	nop
c00048bf:	c9                   	leave  
c00048c0:	c3                   	ret    

c00048c1 <console_put_char>:
console_put_char():
/work/x86_os_my/device/console.c:31

/* 终端中输出字符 */
void console_put_char(uint8_t char_asci) {
c00048c1:	55                   	push   %ebp
c00048c2:	89 e5                	mov    %esp,%ebp
c00048c4:	83 ec 18             	sub    $0x18,%esp
c00048c7:	8b 45 08             	mov    0x8(%ebp),%eax
c00048ca:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/device/console.c:32
	console_acquire();
c00048cd:	e8 9c ff ff ff       	call   c000486e <console_acquire>
/work/x86_os_my/device/console.c:33
	put_char(char_asci);
c00048d2:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c00048d6:	83 ec 0c             	sub    $0xc,%esp
c00048d9:	50                   	push   %eax
c00048da:	e8 3f d9 ff ff       	call   c000221e <put_char>
c00048df:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:34
	console_release();
c00048e2:	e8 a0 ff ff ff       	call   c0004887 <console_release>
/work/x86_os_my/device/console.c:35
}
c00048e7:	90                   	nop
c00048e8:	c9                   	leave  
c00048e9:	c3                   	ret    

c00048ea <console_put_int>:
console_put_int():
/work/x86_os_my/device/console.c:38

/* 终端中输出16进制整数 */
void console_put_int(uint32_t num) {
c00048ea:	55                   	push   %ebp
c00048eb:	89 e5                	mov    %esp,%ebp
c00048ed:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/console.c:39
	console_acquire();
c00048f0:	e8 79 ff ff ff       	call   c000486e <console_acquire>
/work/x86_os_my/device/console.c:40
	put_int(num);
c00048f5:	83 ec 0c             	sub    $0xc,%esp
c00048f8:	ff 75 08             	pushl  0x8(%ebp)
c00048fb:	e8 2a da ff ff       	call   c000232a <put_int>
c0004900:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/console.c:41
	console_release();
c0004903:	e8 7f ff ff ff       	call   c0004887 <console_release>
/work/x86_os_my/device/console.c:42
}
c0004908:	90                   	nop
c0004909:	c9                   	leave  
c000490a:	c3                   	ret    

c000490b <sema_init>:
sema_init():
/work/x86_os_my/thread/sync.c:8
#include "global.h"
#include "debug.h"
#include "interrupt.h"

/* 初始化信号量 */
void sema_init(struct semaphore* psema, uint8_t value) {
c000490b:	55                   	push   %ebp
c000490c:	89 e5                	mov    %esp,%ebp
c000490e:	83 ec 18             	sub    $0x18,%esp
c0004911:	8b 45 0c             	mov    0xc(%ebp),%eax
c0004914:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/thread/sync.c:9
	psema->value = value;       // 为信号量赋初值
c0004917:	8b 45 08             	mov    0x8(%ebp),%eax
c000491a:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
c000491e:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/thread/sync.c:10
	list_init(&psema->waiters); //初始化信号量的等待队列
c0004920:	8b 45 08             	mov    0x8(%ebp),%eax
c0004923:	83 c0 04             	add    $0x4,%eax
c0004926:	83 ec 0c             	sub    $0xc,%esp
c0004929:	50                   	push   %eax
c000492a:	e8 12 fd ff ff       	call   c0004641 <list_init>
c000492f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:11
}
c0004932:	90                   	nop
c0004933:	c9                   	leave  
c0004934:	c3                   	ret    

c0004935 <lock_init>:
lock_init():
/work/x86_os_my/thread/sync.c:14

/* 初始化锁plock */
void lock_init(struct lock* plock) {
c0004935:	55                   	push   %ebp
c0004936:	89 e5                	mov    %esp,%ebp
c0004938:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/thread/sync.c:15
	plock->holder = NULL;
c000493b:	8b 45 08             	mov    0x8(%ebp),%eax
c000493e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/thread/sync.c:16
	plock->holder_repeat_nr = 0;
c0004944:	8b 45 08             	mov    0x8(%ebp),%eax
c0004947:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
/work/x86_os_my/thread/sync.c:17
	sema_init(&plock->semaphore, 1);  // 信号量初值为1
c000494e:	8b 45 08             	mov    0x8(%ebp),%eax
c0004951:	83 c0 04             	add    $0x4,%eax
c0004954:	83 ec 08             	sub    $0x8,%esp
c0004957:	6a 01                	push   $0x1
c0004959:	50                   	push   %eax
c000495a:	e8 ac ff ff ff       	call   c000490b <sema_init>
c000495f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:18
}
c0004962:	90                   	nop
c0004963:	c9                   	leave  
c0004964:	c3                   	ret    

c0004965 <sema_down>:
sema_down():
/work/x86_os_my/thread/sync.c:21

/* 信号量down操作 */
void sema_down(struct semaphore* psema) {
c0004965:	55                   	push   %ebp
c0004966:	89 e5                	mov    %esp,%ebp
c0004968:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/sync.c:23
	/* 关中断来保证原子操作 */
	enum intr_status old_status = intr_disable();
c000496b:	e8 59 d0 ff ff       	call   c00019c9 <intr_disable>
c0004970:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/sync.c:25
	
	while(psema->value == 0) {			// 若value为0,表示已经被别人持有【while多次判断】
c0004973:	e9 98 00 00 00       	jmp    c0004a10 <sema_down+0xab>
/work/x86_os_my/thread/sync.c:26
		ASSERT(!elem_find(&psema->waiters, &running_thread()->general_tag));
c0004978:	e8 bd f2 ff ff       	call   c0003c3a <running_thread>
c000497d:	8d 50 44             	lea    0x44(%eax),%edx
c0004980:	8b 45 08             	mov    0x8(%ebp),%eax
c0004983:	83 c0 04             	add    $0x4,%eax
c0004986:	83 ec 08             	sub    $0x8,%esp
c0004989:	52                   	push   %edx
c000498a:	50                   	push   %eax
c000498b:	e8 bc fd ff ff       	call   c000474c <elem_find>
c0004990:	83 c4 10             	add    $0x10,%esp
c0004993:	85 c0                	test   %eax,%eax
c0004995:	74 19                	je     c00049b0 <sema_down+0x4b>
/work/x86_os_my/thread/sync.c:26 (discriminator 1)
c0004997:	68 a0 d5 00 c0       	push   $0xc000d5a0
c000499c:	68 a4 d6 00 c0       	push   $0xc000d6a4
c00049a1:	6a 1a                	push   $0x1a
c00049a3:	68 dc d5 00 c0       	push   $0xc000d5dc
c00049a8:	e8 04 da ff ff       	call   c00023b1 <panic_spin>
c00049ad:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:28
		/* 当前线程不应该已在信号量的waiters队列中 */
		if (elem_find(&psema->waiters, &running_thread()->general_tag)) {
c00049b0:	e8 85 f2 ff ff       	call   c0003c3a <running_thread>
c00049b5:	8d 50 44             	lea    0x44(%eax),%edx
c00049b8:	8b 45 08             	mov    0x8(%ebp),%eax
c00049bb:	83 c0 04             	add    $0x4,%eax
c00049be:	83 ec 08             	sub    $0x8,%esp
c00049c1:	52                   	push   %edx
c00049c2:	50                   	push   %eax
c00049c3:	e8 84 fd ff ff       	call   c000474c <elem_find>
c00049c8:	83 c4 10             	add    $0x10,%esp
c00049cb:	85 c0                	test   %eax,%eax
c00049cd:	74 19                	je     c00049e8 <sema_down+0x83>
/work/x86_os_my/thread/sync.c:29
			PANIC("sema_down: thread blocked has been in waiters_list\n");
c00049cf:	68 ec d5 00 c0       	push   $0xc000d5ec
c00049d4:	68 a4 d6 00 c0       	push   $0xc000d6a4
c00049d9:	6a 1d                	push   $0x1d
c00049db:	68 dc d5 00 c0       	push   $0xc000d5dc
c00049e0:	e8 cc d9 ff ff       	call   c00023b1 <panic_spin>
c00049e5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:32
		}
		/* 若信号量的值等于0,则当前线程把自己加入该锁的等待队列,然后阻塞自己 */
		list_append(&psema->waiters, &running_thread()->general_tag);
c00049e8:	e8 4d f2 ff ff       	call   c0003c3a <running_thread>
c00049ed:	8d 50 44             	lea    0x44(%eax),%edx
c00049f0:	8b 45 08             	mov    0x8(%ebp),%eax
c00049f3:	83 c0 04             	add    $0x4,%eax
c00049f6:	83 ec 08             	sub    $0x8,%esp
c00049f9:	52                   	push   %edx
c00049fa:	50                   	push   %eax
c00049fb:	e8 d2 fc ff ff       	call   c00046d2 <list_append>
c0004a00:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:33
		thread_block(TASK_BLOCKED);		// 阻塞线程,直到被唤醒
c0004a03:	83 ec 0c             	sub    $0xc,%esp
c0004a06:	6a 02                	push   $0x2
c0004a08:	e8 d0 f6 ff ff       	call   c00040dd <thread_block>
c0004a0d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:25
/* 信号量down操作 */
void sema_down(struct semaphore* psema) {
	/* 关中断来保证原子操作 */
	enum intr_status old_status = intr_disable();
	
	while(psema->value == 0) {			// 若value为0,表示已经被别人持有【while多次判断】
c0004a10:	8b 45 08             	mov    0x8(%ebp),%eax
c0004a13:	0f b6 00             	movzbl (%eax),%eax
c0004a16:	84 c0                	test   %al,%al
c0004a18:	0f 84 5a ff ff ff    	je     c0004978 <sema_down+0x13>
/work/x86_os_my/thread/sync.c:36
		/* 若信号量的值等于0,则当前线程把自己加入该锁的等待队列,然后阻塞自己 */
		list_append(&psema->waiters, &running_thread()->general_tag);
		thread_block(TASK_BLOCKED);		// 阻塞线程,直到被唤醒
	}
	/* 若value为1或被唤醒后,会执行下面的代码,也就是获得了锁。*/
	psema->value--;
c0004a1e:	8b 45 08             	mov    0x8(%ebp),%eax
c0004a21:	0f b6 00             	movzbl (%eax),%eax
c0004a24:	8d 50 ff             	lea    -0x1(%eax),%edx
c0004a27:	8b 45 08             	mov    0x8(%ebp),%eax
c0004a2a:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/thread/sync.c:37
	ASSERT(psema->value == 0);
c0004a2c:	8b 45 08             	mov    0x8(%ebp),%eax
c0004a2f:	0f b6 00             	movzbl (%eax),%eax
c0004a32:	84 c0                	test   %al,%al
c0004a34:	74 19                	je     c0004a4f <sema_down+0xea>
/work/x86_os_my/thread/sync.c:37 (discriminator 1)
c0004a36:	68 20 d6 00 c0       	push   $0xc000d620
c0004a3b:	68 a4 d6 00 c0       	push   $0xc000d6a4
c0004a40:	6a 25                	push   $0x25
c0004a42:	68 dc d5 00 c0       	push   $0xc000d5dc
c0004a47:	e8 65 d9 ff ff       	call   c00023b1 <panic_spin>
c0004a4c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:40
	
	/* 恢复之前的中断状态 */
	intr_set_status(old_status);
c0004a4f:	83 ec 0c             	sub    $0xc,%esp
c0004a52:	ff 75 f4             	pushl  -0xc(%ebp)
c0004a55:	e8 98 cf ff ff       	call   c00019f2 <intr_set_status>
c0004a5a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:41
}
c0004a5d:	90                   	nop
c0004a5e:	c9                   	leave  
c0004a5f:	c3                   	ret    

c0004a60 <sema_up>:
sema_up():
/work/x86_os_my/thread/sync.c:44

/* 信号量的up操作 */
void sema_up(struct semaphore* psema) {
c0004a60:	55                   	push   %ebp
c0004a61:	89 e5                	mov    %esp,%ebp
c0004a63:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/thread/sync.c:46
	/* 关中断,保证原子操作 */
	enum intr_status old_status = intr_disable();
c0004a66:	e8 5e cf ff ff       	call   c00019c9 <intr_disable>
c0004a6b:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/thread/sync.c:48
	
	ASSERT(psema->value == 0);
c0004a6e:	8b 45 08             	mov    0x8(%ebp),%eax
c0004a71:	0f b6 00             	movzbl (%eax),%eax
c0004a74:	84 c0                	test   %al,%al
c0004a76:	74 19                	je     c0004a91 <sema_up+0x31>
/work/x86_os_my/thread/sync.c:48 (discriminator 1)
c0004a78:	68 20 d6 00 c0       	push   $0xc000d620
c0004a7d:	68 b0 d6 00 c0       	push   $0xc000d6b0
c0004a82:	6a 30                	push   $0x30
c0004a84:	68 dc d5 00 c0       	push   $0xc000d5dc
c0004a89:	e8 23 d9 ff ff       	call   c00023b1 <panic_spin>
c0004a8e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:49
	if (!list_empty(&psema->waiters)) {
c0004a91:	8b 45 08             	mov    0x8(%ebp),%eax
c0004a94:	83 c0 04             	add    $0x4,%eax
c0004a97:	83 ec 0c             	sub    $0xc,%esp
c0004a9a:	50                   	push   %eax
c0004a9b:	e8 79 fd ff ff       	call   c0004819 <list_empty>
c0004aa0:	83 c4 10             	add    $0x10,%esp
c0004aa3:	85 c0                	test   %eax,%eax
c0004aa5:	75 26                	jne    c0004acd <sema_up+0x6d>
/work/x86_os_my/thread/sync.c:50
		struct task_struct* thread_blocked = elem2entry(struct task_struct, general_tag, list_pop(&psema->waiters));
c0004aa7:	8b 45 08             	mov    0x8(%ebp),%eax
c0004aaa:	83 c0 04             	add    $0x4,%eax
c0004aad:	83 ec 0c             	sub    $0xc,%esp
c0004ab0:	50                   	push   %eax
c0004ab1:	e8 74 fc ff ff       	call   c000472a <list_pop>
c0004ab6:	83 c4 10             	add    $0x10,%esp
c0004ab9:	83 e8 44             	sub    $0x44,%eax
c0004abc:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/thread/sync.c:51
		thread_unblock(thread_blocked);
c0004abf:	83 ec 0c             	sub    $0xc,%esp
c0004ac2:	ff 75 f0             	pushl  -0x10(%ebp)
c0004ac5:	e8 76 f6 ff ff       	call   c0004140 <thread_unblock>
c0004aca:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:53
	}
	psema->value++;
c0004acd:	8b 45 08             	mov    0x8(%ebp),%eax
c0004ad0:	0f b6 00             	movzbl (%eax),%eax
c0004ad3:	8d 50 01             	lea    0x1(%eax),%edx
c0004ad6:	8b 45 08             	mov    0x8(%ebp),%eax
c0004ad9:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/thread/sync.c:54
	ASSERT(psema->value == 1);
c0004adb:	8b 45 08             	mov    0x8(%ebp),%eax
c0004ade:	0f b6 00             	movzbl (%eax),%eax
c0004ae1:	3c 01                	cmp    $0x1,%al
c0004ae3:	74 19                	je     c0004afe <sema_up+0x9e>
/work/x86_os_my/thread/sync.c:54 (discriminator 1)
c0004ae5:	68 32 d6 00 c0       	push   $0xc000d632
c0004aea:	68 b0 d6 00 c0       	push   $0xc000d6b0
c0004aef:	6a 36                	push   $0x36
c0004af1:	68 dc d5 00 c0       	push   $0xc000d5dc
c0004af6:	e8 b6 d8 ff ff       	call   c00023b1 <panic_spin>
c0004afb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:57
	
	/* 恢复之前的中断状态 */
	intr_set_status(old_status);
c0004afe:	83 ec 0c             	sub    $0xc,%esp
c0004b01:	ff 75 f4             	pushl  -0xc(%ebp)
c0004b04:	e8 e9 ce ff ff       	call   c00019f2 <intr_set_status>
c0004b09:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:58
}
c0004b0c:	90                   	nop
c0004b0d:	c9                   	leave  
c0004b0e:	c3                   	ret    

c0004b0f <lock_acquire>:
lock_acquire():
/work/x86_os_my/thread/sync.c:61

/* 获取锁plock */
void lock_acquire(struct lock* plock) {
c0004b0f:	55                   	push   %ebp
c0004b10:	89 e5                	mov    %esp,%ebp
c0004b12:	53                   	push   %ebx
c0004b13:	83 ec 04             	sub    $0x4,%esp
/work/x86_os_my/thread/sync.c:63
	/* 排除曾经自己已经持有锁但还未将其释放的情况。*/
	if (plock->holder != running_thread()) {
c0004b16:	8b 45 08             	mov    0x8(%ebp),%eax
c0004b19:	8b 18                	mov    (%eax),%ebx
c0004b1b:	e8 1a f1 ff ff       	call   c0003c3a <running_thread>
c0004b20:	39 c3                	cmp    %eax,%ebx
c0004b22:	74 4d                	je     c0004b71 <lock_acquire+0x62>
/work/x86_os_my/thread/sync.c:64
		sema_down(&plock->semaphore);	// 对信号量P操作,原子操作
c0004b24:	8b 45 08             	mov    0x8(%ebp),%eax
c0004b27:	83 c0 04             	add    $0x4,%eax
c0004b2a:	83 ec 0c             	sub    $0xc,%esp
c0004b2d:	50                   	push   %eax
c0004b2e:	e8 32 fe ff ff       	call   c0004965 <sema_down>
c0004b33:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:65
		plock->holder = running_thread();
c0004b36:	e8 ff f0 ff ff       	call   c0003c3a <running_thread>
c0004b3b:	89 c2                	mov    %eax,%edx
c0004b3d:	8b 45 08             	mov    0x8(%ebp),%eax
c0004b40:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/thread/sync.c:66
		ASSERT(plock->holder_repeat_nr == 0);
c0004b42:	8b 45 08             	mov    0x8(%ebp),%eax
c0004b45:	8b 40 18             	mov    0x18(%eax),%eax
c0004b48:	85 c0                	test   %eax,%eax
c0004b4a:	74 19                	je     c0004b65 <lock_acquire+0x56>
/work/x86_os_my/thread/sync.c:66 (discriminator 1)
c0004b4c:	68 44 d6 00 c0       	push   $0xc000d644
c0004b51:	68 b8 d6 00 c0       	push   $0xc000d6b8
c0004b56:	6a 42                	push   $0x42
c0004b58:	68 dc d5 00 c0       	push   $0xc000d5dc
c0004b5d:	e8 4f d8 ff ff       	call   c00023b1 <panic_spin>
c0004b62:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:67
		plock->holder_repeat_nr = 1;
c0004b65:	8b 45 08             	mov    0x8(%ebp),%eax
c0004b68:	c7 40 18 01 00 00 00 	movl   $0x1,0x18(%eax)
/work/x86_os_my/thread/sync.c:71
	} else {
		plock->holder_repeat_nr++;
	}
}
c0004b6f:	eb 0f                	jmp    c0004b80 <lock_acquire+0x71>
/work/x86_os_my/thread/sync.c:69
		sema_down(&plock->semaphore);	// 对信号量P操作,原子操作
		plock->holder = running_thread();
		ASSERT(plock->holder_repeat_nr == 0);
		plock->holder_repeat_nr = 1;
	} else {
		plock->holder_repeat_nr++;
c0004b71:	8b 45 08             	mov    0x8(%ebp),%eax
c0004b74:	8b 40 18             	mov    0x18(%eax),%eax
c0004b77:	8d 50 01             	lea    0x1(%eax),%edx
c0004b7a:	8b 45 08             	mov    0x8(%ebp),%eax
c0004b7d:	89 50 18             	mov    %edx,0x18(%eax)
/work/x86_os_my/thread/sync.c:71
	}
}
c0004b80:	90                   	nop
c0004b81:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0004b84:	c9                   	leave  
c0004b85:	c3                   	ret    

c0004b86 <lock_release>:
lock_release():
/work/x86_os_my/thread/sync.c:74

/* 释放锁plock */
void lock_release(struct lock* plock) {
c0004b86:	55                   	push   %ebp
c0004b87:	89 e5                	mov    %esp,%ebp
c0004b89:	53                   	push   %ebx
c0004b8a:	83 ec 04             	sub    $0x4,%esp
/work/x86_os_my/thread/sync.c:75
	ASSERT(plock->holder == running_thread());
c0004b8d:	8b 45 08             	mov    0x8(%ebp),%eax
c0004b90:	8b 18                	mov    (%eax),%ebx
c0004b92:	e8 a3 f0 ff ff       	call   c0003c3a <running_thread>
c0004b97:	39 c3                	cmp    %eax,%ebx
c0004b99:	74 19                	je     c0004bb4 <lock_release+0x2e>
/work/x86_os_my/thread/sync.c:75 (discriminator 1)
c0004b9b:	68 64 d6 00 c0       	push   $0xc000d664
c0004ba0:	68 c8 d6 00 c0       	push   $0xc000d6c8
c0004ba5:	6a 4b                	push   $0x4b
c0004ba7:	68 dc d5 00 c0       	push   $0xc000d5dc
c0004bac:	e8 00 d8 ff ff       	call   c00023b1 <panic_spin>
c0004bb1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:76
	if (plock->holder_repeat_nr > 1) {
c0004bb4:	8b 45 08             	mov    0x8(%ebp),%eax
c0004bb7:	8b 40 18             	mov    0x18(%eax),%eax
c0004bba:	83 f8 01             	cmp    $0x1,%eax
c0004bbd:	76 11                	jbe    c0004bd0 <lock_release+0x4a>
/work/x86_os_my/thread/sync.c:77
		plock->holder_repeat_nr--;
c0004bbf:	8b 45 08             	mov    0x8(%ebp),%eax
c0004bc2:	8b 40 18             	mov    0x18(%eax),%eax
c0004bc5:	8d 50 ff             	lea    -0x1(%eax),%edx
c0004bc8:	8b 45 08             	mov    0x8(%ebp),%eax
c0004bcb:	89 50 18             	mov    %edx,0x18(%eax)
/work/x86_os_my/thread/sync.c:78
		return;
c0004bce:	eb 49                	jmp    c0004c19 <lock_release+0x93>
/work/x86_os_my/thread/sync.c:80
	}
	ASSERT(plock->holder_repeat_nr == 1);
c0004bd0:	8b 45 08             	mov    0x8(%ebp),%eax
c0004bd3:	8b 40 18             	mov    0x18(%eax),%eax
c0004bd6:	83 f8 01             	cmp    $0x1,%eax
c0004bd9:	74 19                	je     c0004bf4 <lock_release+0x6e>
/work/x86_os_my/thread/sync.c:80 (discriminator 1)
c0004bdb:	68 86 d6 00 c0       	push   $0xc000d686
c0004be0:	68 c8 d6 00 c0       	push   $0xc000d6c8
c0004be5:	6a 50                	push   $0x50
c0004be7:	68 dc d5 00 c0       	push   $0xc000d5dc
c0004bec:	e8 c0 d7 ff ff       	call   c00023b1 <panic_spin>
c0004bf1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:82

	plock->holder = NULL;			// 把锁的持有者置空放在V操作之前
c0004bf4:	8b 45 08             	mov    0x8(%ebp),%eax
c0004bf7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/thread/sync.c:83
	plock->holder_repeat_nr = 0;
c0004bfd:	8b 45 08             	mov    0x8(%ebp),%eax
c0004c00:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
/work/x86_os_my/thread/sync.c:84
	sema_up(&plock->semaphore);		// 信号量的V操作,也是原子操作
c0004c07:	8b 45 08             	mov    0x8(%ebp),%eax
c0004c0a:	83 c0 04             	add    $0x4,%eax
c0004c0d:	83 ec 0c             	sub    $0xc,%esp
c0004c10:	50                   	push   %eax
c0004c11:	e8 4a fe ff ff       	call   c0004a60 <sema_up>
c0004c16:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/thread/sync.c:85
}
c0004c19:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0004c1c:	c9                   	leave  
c0004c1d:	c3                   	ret    

c0004c1e <inb>:
inb():
/work/x86_os_my/lib/kernel/io.h:36
   asm volatile ("cld; rep outsw" : "+S" (addr), "+c" (word_cnt) : "d" (port));
/******************************************************/
}

/* 将从端口port读入的一个字节返回 */
static inline uint8_t inb(uint16_t port) {
c0004c1e:	55                   	push   %ebp
c0004c1f:	89 e5                	mov    %esp,%ebp
c0004c21:	83 ec 14             	sub    $0x14,%esp
c0004c24:	8b 45 08             	mov    0x8(%ebp),%eax
c0004c27:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
/work/x86_os_my/lib/kernel/io.h:38
   uint8_t data;
   asm volatile ("inb %w1, %b0" : "=a" (data) : "Nd" (port));
c0004c2b:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0004c2f:	89 c2                	mov    %eax,%edx
c0004c31:	ec                   	in     (%dx),%al
c0004c32:	88 45 ff             	mov    %al,-0x1(%ebp)
/work/x86_os_my/lib/kernel/io.h:39
   return data;
c0004c35:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
/work/x86_os_my/lib/kernel/io.h:40
}
c0004c39:	c9                   	leave  
c0004c3a:	c3                   	ret    

c0004c3b <intr_keyboard_handler>:
intr_keyboard_handler():
/work/x86_os_my/device/keyboard.c:111
/* 0x3A */	{caps_lock_char, caps_lock_char}
/*其它按键暂不处理*/
};

/* 键盘中断处理程序 */
static void intr_keyboard_handler(void) {
c0004c3b:	55                   	push   %ebp
c0004c3c:	89 e5                	mov    %esp,%ebp
c0004c3e:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/device/keyboard.c:114

/* 这次中断发生前的上一次中断,以下任意三个键是否有按下 */
   bool ctrl_down_last = ctrl_status;	  
c0004c41:	a1 8c 15 01 c0       	mov    0xc001158c,%eax
c0004c46:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/device/keyboard.c:115
   bool shift_down_last = shift_status;
c0004c49:	a1 90 15 01 c0       	mov    0xc0011590,%eax
c0004c4e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/device/keyboard.c:116
   bool caps_lock_last = caps_lock_status;
c0004c51:	a1 98 15 01 c0       	mov    0xc0011598,%eax
c0004c56:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/device/keyboard.c:119

   bool break_code;
   uint16_t scancode = inb(KBD_BUF_PORT);
c0004c59:	6a 60                	push   $0x60
c0004c5b:	e8 be ff ff ff       	call   c0004c1e <inb>
c0004c60:	83 c4 04             	add    $0x4,%esp
c0004c63:	0f b6 c0             	movzbl %al,%eax
c0004c66:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
/work/x86_os_my/device/keyboard.c:123

/* 若扫描码是e0开头的,表示此键的按下将产生多个扫描码,
 * 所以马上结束此次中断处理函数,等待下一个扫描码进来*/ 
   if (scancode == 0xe0) { 
c0004c6a:	66 81 7d f6 e0 00    	cmpw   $0xe0,-0xa(%ebp)
c0004c70:	75 0f                	jne    c0004c81 <intr_keyboard_handler+0x46>
/work/x86_os_my/device/keyboard.c:124
      ext_scancode = true;    // 打开e0标记
c0004c72:	c7 05 9c 15 01 c0 01 	movl   $0x1,0xc001159c
c0004c79:	00 00 00 
/work/x86_os_my/device/keyboard.c:125
      return;
c0004c7c:	e9 50 02 00 00       	jmp    c0004ed1 <intr_keyboard_handler+0x296>
/work/x86_os_my/device/keyboard.c:129
   }

/* 如果上次是以0xe0开头,将扫描码合并 */
   if (ext_scancode) {
c0004c81:	a1 9c 15 01 c0       	mov    0xc001159c,%eax
c0004c86:	85 c0                	test   %eax,%eax
c0004c88:	74 10                	je     c0004c9a <intr_keyboard_handler+0x5f>
/work/x86_os_my/device/keyboard.c:130
      scancode = ((0xe000) | scancode);
c0004c8a:	66 81 4d f6 00 e0    	orw    $0xe000,-0xa(%ebp)
/work/x86_os_my/device/keyboard.c:131
      ext_scancode = false;   // 关闭e0标记
c0004c90:	c7 05 9c 15 01 c0 00 	movl   $0x0,0xc001159c
c0004c97:	00 00 00 
/work/x86_os_my/device/keyboard.c:134
   }   

   break_code = ((scancode & 0x0080) != 0);   // 获取break_code
c0004c9a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0004c9e:	25 80 00 00 00       	and    $0x80,%eax
c0004ca3:	85 c0                	test   %eax,%eax
c0004ca5:	0f 95 c0             	setne  %al
c0004ca8:	0f b6 c0             	movzbl %al,%eax
c0004cab:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/device/keyboard.c:136
   
   if (break_code) {   // 若是断码break_code(按键弹起时产生的扫描码)
c0004cae:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0004cb2:	74 6a                	je     c0004d1e <intr_keyboard_handler+0xe3>
/work/x86_os_my/device/keyboard.c:140

   /* 由于ctrl_r 和alt_r的make_code和break_code都是两字节,
   所以可用下面的方法取make_code,多字节的扫描码暂不处理 */
      uint16_t make_code = (scancode &= 0xff7f);   // 得到其make_code(按键按下时产生的扫描码)
c0004cb4:	66 81 65 f6 7f ff    	andw   $0xff7f,-0xa(%ebp)
c0004cba:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0004cbe:	66 89 45 da          	mov    %ax,-0x26(%ebp)
/work/x86_os_my/device/keyboard.c:143

   /* 若是任意以下三个键弹起了,将状态置为false */
      if (make_code == ctrl_l_make || make_code == ctrl_r_make) {
c0004cc2:	66 83 7d da 1d       	cmpw   $0x1d,-0x26(%ebp)
c0004cc7:	74 08                	je     c0004cd1 <intr_keyboard_handler+0x96>
/work/x86_os_my/device/keyboard.c:143 (discriminator 1)
c0004cc9:	66 81 7d da 1d e0    	cmpw   $0xe01d,-0x26(%ebp)
c0004ccf:	75 0c                	jne    c0004cdd <intr_keyboard_handler+0xa2>
/work/x86_os_my/device/keyboard.c:144
	 ctrl_status = false;
c0004cd1:	c7 05 8c 15 01 c0 00 	movl   $0x0,0xc001158c
c0004cd8:	00 00 00 
c0004cdb:	eb 3c                	jmp    c0004d19 <intr_keyboard_handler+0xde>
/work/x86_os_my/device/keyboard.c:145
      } else if (make_code == shift_l_make || make_code == shift_r_make) {
c0004cdd:	66 83 7d da 2a       	cmpw   $0x2a,-0x26(%ebp)
c0004ce2:	74 07                	je     c0004ceb <intr_keyboard_handler+0xb0>
/work/x86_os_my/device/keyboard.c:145 (discriminator 1)
c0004ce4:	66 83 7d da 36       	cmpw   $0x36,-0x26(%ebp)
c0004ce9:	75 0c                	jne    c0004cf7 <intr_keyboard_handler+0xbc>
/work/x86_os_my/device/keyboard.c:146
	 shift_status = false;
c0004ceb:	c7 05 90 15 01 c0 00 	movl   $0x0,0xc0011590
c0004cf2:	00 00 00 
c0004cf5:	eb 22                	jmp    c0004d19 <intr_keyboard_handler+0xde>
/work/x86_os_my/device/keyboard.c:147
      } else if (make_code == alt_l_make || make_code == alt_r_make) {
c0004cf7:	66 83 7d da 38       	cmpw   $0x38,-0x26(%ebp)
c0004cfc:	74 0c                	je     c0004d0a <intr_keyboard_handler+0xcf>
/work/x86_os_my/device/keyboard.c:147 (discriminator 1)
c0004cfe:	66 81 7d da 38 e0    	cmpw   $0xe038,-0x26(%ebp)
c0004d04:	0f 85 c0 01 00 00    	jne    c0004eca <intr_keyboard_handler+0x28f>
/work/x86_os_my/device/keyboard.c:148
	 alt_status = false;
c0004d0a:	c7 05 94 15 01 c0 00 	movl   $0x0,0xc0011594
c0004d11:	00 00 00 
/work/x86_os_my/device/keyboard.c:151
      } /* 由于caps_lock不是弹起后关闭,所以需要单独处理 */

      return;   // 直接返回结束此次中断处理程序
c0004d14:	e9 b1 01 00 00       	jmp    c0004eca <intr_keyboard_handler+0x28f>
c0004d19:	e9 ac 01 00 00       	jmp    c0004eca <intr_keyboard_handler+0x28f>
/work/x86_os_my/device/keyboard.c:155

   } 
   /* 若为通码,只处理数组中定义的键以及alt_right和ctrl键,全是make_code */
   else if ((scancode > 0x00 && scancode < 0x3b) || \
c0004d1e:	66 83 7d f6 00       	cmpw   $0x0,-0xa(%ebp)
c0004d23:	74 07                	je     c0004d2c <intr_keyboard_handler+0xf1>
/work/x86_os_my/device/keyboard.c:155 (discriminator 1)
c0004d25:	66 83 7d f6 3a       	cmpw   $0x3a,-0xa(%ebp)
c0004d2a:	76 14                	jbe    c0004d40 <intr_keyboard_handler+0x105>
/work/x86_os_my/device/keyboard.c:155 (discriminator 3)
c0004d2c:	66 81 7d f6 38 e0    	cmpw   $0xe038,-0xa(%ebp)
c0004d32:	74 0c                	je     c0004d40 <intr_keyboard_handler+0x105>
/work/x86_os_my/device/keyboard.c:156
	       (scancode == alt_r_make) || \
c0004d34:	66 81 7d f6 1d e0    	cmpw   $0xe01d,-0xa(%ebp)
c0004d3a:	0f 85 78 01 00 00    	jne    c0004eb8 <intr_keyboard_handler+0x27d>
/work/x86_os_my/device/keyboard.c:158
	       (scancode == ctrl_r_make)) {
      bool shift = false;  // 判断是否与shift组合,用来在一维数组中索引对应的字符
c0004d40:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/device/keyboard.c:159
      if ((scancode < 0x0e) || (scancode == 0x29) || \
c0004d47:	66 83 7d f6 0d       	cmpw   $0xd,-0xa(%ebp)
c0004d4c:	76 3f                	jbe    c0004d8d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:159 (discriminator 1)
c0004d4e:	66 83 7d f6 29       	cmpw   $0x29,-0xa(%ebp)
c0004d53:	74 38                	je     c0004d8d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:159 (discriminator 2)
c0004d55:	66 83 7d f6 1a       	cmpw   $0x1a,-0xa(%ebp)
c0004d5a:	74 31                	je     c0004d8d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:160
	 (scancode == 0x1a) || (scancode == 0x1b) || \
c0004d5c:	66 83 7d f6 1b       	cmpw   $0x1b,-0xa(%ebp)
c0004d61:	74 2a                	je     c0004d8d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:160 (discriminator 1)
c0004d63:	66 83 7d f6 2b       	cmpw   $0x2b,-0xa(%ebp)
c0004d68:	74 23                	je     c0004d8d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:161
	 (scancode == 0x2b) || (scancode == 0x27) || \
c0004d6a:	66 83 7d f6 27       	cmpw   $0x27,-0xa(%ebp)
c0004d6f:	74 1c                	je     c0004d8d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:161 (discriminator 1)
c0004d71:	66 83 7d f6 28       	cmpw   $0x28,-0xa(%ebp)
c0004d76:	74 15                	je     c0004d8d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:162
	 (scancode == 0x28) || (scancode == 0x33) || \
c0004d78:	66 83 7d f6 33       	cmpw   $0x33,-0xa(%ebp)
c0004d7d:	74 0e                	je     c0004d8d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:162 (discriminator 1)
c0004d7f:	66 83 7d f6 34       	cmpw   $0x34,-0xa(%ebp)
c0004d84:	74 07                	je     c0004d8d <intr_keyboard_handler+0x152>
/work/x86_os_my/device/keyboard.c:163
	 (scancode == 0x34) || (scancode == 0x35)) {  
c0004d86:	66 83 7d f6 35       	cmpw   $0x35,-0xa(%ebp)
c0004d8b:	75 0f                	jne    c0004d9c <intr_keyboard_handler+0x161>
/work/x86_os_my/device/keyboard.c:176
		     0x28 字符'\''
		     0x33 字符','
		     0x34 字符'.'
		     0x35 字符'/' 
	    *******************************/
	 if (shift_down_last) {  // 如果同时按下了shift键
c0004d8d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0004d91:	74 3a                	je     c0004dcd <intr_keyboard_handler+0x192>
/work/x86_os_my/device/keyboard.c:177
	    shift = true;
c0004d93:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
/work/x86_os_my/device/keyboard.c:176
		     0x28 字符'\''
		     0x33 字符','
		     0x34 字符'.'
		     0x35 字符'/' 
	    *******************************/
	 if (shift_down_last) {  // 如果同时按下了shift键
c0004d9a:	eb 31                	jmp    c0004dcd <intr_keyboard_handler+0x192>
/work/x86_os_my/device/keyboard.c:180
	    shift = true;
	 }
      } else {	  // 默认为字母键
	 if (shift_down_last && caps_lock_last) {  // 如果shift和capslock同时按下
c0004d9c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0004da0:	74 0f                	je     c0004db1 <intr_keyboard_handler+0x176>
/work/x86_os_my/device/keyboard.c:180 (discriminator 1)
c0004da2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0004da6:	74 09                	je     c0004db1 <intr_keyboard_handler+0x176>
/work/x86_os_my/device/keyboard.c:181
	    shift = false;
c0004da8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0004daf:	eb 1c                	jmp    c0004dcd <intr_keyboard_handler+0x192>
/work/x86_os_my/device/keyboard.c:182
	 } else if (shift_down_last || caps_lock_last) { // 如果shift和capslock任意被按下
c0004db1:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0004db5:	75 06                	jne    c0004dbd <intr_keyboard_handler+0x182>
/work/x86_os_my/device/keyboard.c:182 (discriminator 1)
c0004db7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0004dbb:	74 09                	je     c0004dc6 <intr_keyboard_handler+0x18b>
/work/x86_os_my/device/keyboard.c:183
	    shift = true;
c0004dbd:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c0004dc4:	eb 07                	jmp    c0004dcd <intr_keyboard_handler+0x192>
/work/x86_os_my/device/keyboard.c:185
	 } else {
	    shift = false;
c0004dc6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/device/keyboard.c:189
	 }
      }

      uint8_t index = (scancode &= 0x00ff);  // 将扫描码的高字节置0,主要是针对高字节是e0的扫描码.
c0004dcd:	66 81 65 f6 ff 00    	andw   $0xff,-0xa(%ebp)
c0004dd3:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0004dd7:	88 45 d9             	mov    %al,-0x27(%ebp)
/work/x86_os_my/device/keyboard.c:190
      char cur_char = keymap[index][shift];  // 在数组中找到对应的字符
c0004dda:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0004dde:	8d 14 00             	lea    (%eax,%eax,1),%edx
c0004de1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0004de4:	01 d0                	add    %edx,%eax
c0004de6:	05 e0 10 01 c0       	add    $0xc00110e0,%eax
c0004deb:	0f b6 00             	movzbl (%eax),%eax
c0004dee:	88 45 ef             	mov    %al,-0x11(%ebp)
/work/x86_os_my/device/keyboard.c:193

   /* 如果cur_char不为0,也就是ascii码为除'\0'外的字符就加入键盘缓冲区中 */
      if (cur_char) {
c0004df1:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
c0004df5:	74 54                	je     c0004e4b <intr_keyboard_handler+0x210>
/work/x86_os_my/device/keyboard.c:200
     /*****************  快捷键ctrl+l和ctrl+u的处理 *********************
      * 下面是把ctrl+l和ctrl+u这两种组合键产生的字符置为:
      * cur_char的asc码-字符a的asc码, 此差值比较小,
      * 属于asc码表中不可见的字符部分.故不会产生可见字符.
      * 我们在shell中将ascii值为l-a和u-a的分别处理为清屏和删除输入的快捷键*/
	 if ((ctrl_down_last && cur_char == 'l') || (ctrl_down_last && cur_char == 'u')) {
c0004df7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0004dfb:	74 06                	je     c0004e03 <intr_keyboard_handler+0x1c8>
/work/x86_os_my/device/keyboard.c:200 (discriminator 1)
c0004dfd:	80 7d ef 6c          	cmpb   $0x6c,-0x11(%ebp)
c0004e01:	74 0c                	je     c0004e0f <intr_keyboard_handler+0x1d4>
/work/x86_os_my/device/keyboard.c:200 (discriminator 3)
c0004e03:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0004e07:	74 10                	je     c0004e19 <intr_keyboard_handler+0x1de>
/work/x86_os_my/device/keyboard.c:200 (discriminator 4)
c0004e09:	80 7d ef 75          	cmpb   $0x75,-0x11(%ebp)
c0004e0d:	75 0a                	jne    c0004e19 <intr_keyboard_handler+0x1de>
/work/x86_os_my/device/keyboard.c:201
	    cur_char -= 'a';
c0004e0f:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c0004e13:	83 e8 61             	sub    $0x61,%eax
c0004e16:	88 45 ef             	mov    %al,-0x11(%ebp)
/work/x86_os_my/device/keyboard.c:207
	 }
      /****************************************************************/
      
   /* 若kbd_buf中未满并且待加入的cur_char不为0,
    * 则将其加入到缓冲区kbd_buf中 */
	 if (!ioq_full(&kbd_buf)) {
c0004e19:	83 ec 0c             	sub    $0xc,%esp
c0004e1c:	68 e0 21 01 c0       	push   $0xc00121e0
c0004e21:	e8 58 01 00 00       	call   c0004f7e <ioq_full>
c0004e26:	83 c4 10             	add    $0x10,%esp
c0004e29:	85 c0                	test   %eax,%eax
c0004e2b:	0f 85 9c 00 00 00    	jne    c0004ecd <intr_keyboard_handler+0x292>
/work/x86_os_my/device/keyboard.c:208
	    ioq_putchar(&kbd_buf, cur_char);
c0004e31:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
c0004e35:	83 ec 08             	sub    $0x8,%esp
c0004e38:	50                   	push   %eax
c0004e39:	68 e0 21 01 c0       	push   $0xc00121e0
c0004e3e:	e8 0d 03 00 00       	call   c0005150 <ioq_putchar>
c0004e43:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/keyboard.c:210
	 }
	 return;
c0004e46:	e9 82 00 00 00       	jmp    c0004ecd <intr_keyboard_handler+0x292>
/work/x86_os_my/device/keyboard.c:214
      }

      /* 记录本次是否按下了下面几类控制键之一,供下次键入时判断组合键 */
      if (scancode == ctrl_l_make || scancode == ctrl_r_make) {
c0004e4b:	66 83 7d f6 1d       	cmpw   $0x1d,-0xa(%ebp)
c0004e50:	74 08                	je     c0004e5a <intr_keyboard_handler+0x21f>
/work/x86_os_my/device/keyboard.c:214 (discriminator 1)
c0004e52:	66 81 7d f6 1d e0    	cmpw   $0xe01d,-0xa(%ebp)
c0004e58:	75 0c                	jne    c0004e66 <intr_keyboard_handler+0x22b>
/work/x86_os_my/device/keyboard.c:215
	 ctrl_status = true;
c0004e5a:	c7 05 8c 15 01 c0 01 	movl   $0x1,0xc001158c
c0004e61:	00 00 00 
c0004e64:	eb 50                	jmp    c0004eb6 <intr_keyboard_handler+0x27b>
/work/x86_os_my/device/keyboard.c:216
      } else if (scancode == shift_l_make || scancode == shift_r_make) {
c0004e66:	66 83 7d f6 2a       	cmpw   $0x2a,-0xa(%ebp)
c0004e6b:	74 07                	je     c0004e74 <intr_keyboard_handler+0x239>
/work/x86_os_my/device/keyboard.c:216 (discriminator 1)
c0004e6d:	66 83 7d f6 36       	cmpw   $0x36,-0xa(%ebp)
c0004e72:	75 0c                	jne    c0004e80 <intr_keyboard_handler+0x245>
/work/x86_os_my/device/keyboard.c:217
	 shift_status = true;
c0004e74:	c7 05 90 15 01 c0 01 	movl   $0x1,0xc0011590
c0004e7b:	00 00 00 
c0004e7e:	eb 36                	jmp    c0004eb6 <intr_keyboard_handler+0x27b>
/work/x86_os_my/device/keyboard.c:218
      } else if (scancode == alt_l_make || scancode == alt_r_make) {
c0004e80:	66 83 7d f6 38       	cmpw   $0x38,-0xa(%ebp)
c0004e85:	74 08                	je     c0004e8f <intr_keyboard_handler+0x254>
/work/x86_os_my/device/keyboard.c:218 (discriminator 1)
c0004e87:	66 81 7d f6 38 e0    	cmpw   $0xe038,-0xa(%ebp)
c0004e8d:	75 0c                	jne    c0004e9b <intr_keyboard_handler+0x260>
/work/x86_os_my/device/keyboard.c:219
	 alt_status = true;
c0004e8f:	c7 05 94 15 01 c0 01 	movl   $0x1,0xc0011594
c0004e96:	00 00 00 
c0004e99:	eb 1b                	jmp    c0004eb6 <intr_keyboard_handler+0x27b>
/work/x86_os_my/device/keyboard.c:220
      } else if (scancode == caps_lock_make) {
c0004e9b:	66 83 7d f6 3a       	cmpw   $0x3a,-0xa(%ebp)
c0004ea0:	75 2e                	jne    c0004ed0 <intr_keyboard_handler+0x295>
/work/x86_os_my/device/keyboard.c:223
      /* 不管之前是否有按下caps_lock键,当再次按下时则状态取反,
       * 即:已经开启时,再按下同样的键是关闭。关闭时按下表示开启。*/
	 caps_lock_status = !caps_lock_status;
c0004ea2:	a1 98 15 01 c0       	mov    0xc0011598,%eax
c0004ea7:	85 c0                	test   %eax,%eax
c0004ea9:	0f 94 c0             	sete   %al
c0004eac:	0f b6 c0             	movzbl %al,%eax
c0004eaf:	a3 98 15 01 c0       	mov    %eax,0xc0011598
/work/x86_os_my/device/keyboard.c:157

   } 
   /* 若为通码,只处理数组中定义的键以及alt_right和ctrl键,全是make_code */
   else if ((scancode > 0x00 && scancode < 0x3b) || \
	       (scancode == alt_r_make) || \
	       (scancode == ctrl_r_make)) {
c0004eb4:	eb 1a                	jmp    c0004ed0 <intr_keyboard_handler+0x295>
/work/x86_os_my/device/keyboard.c:157 (discriminator 3)
c0004eb6:	eb 18                	jmp    c0004ed0 <intr_keyboard_handler+0x295>
/work/x86_os_my/device/keyboard.c:226
      /* 不管之前是否有按下caps_lock键,当再次按下时则状态取反,
       * 即:已经开启时,再按下同样的键是关闭。关闭时按下表示开启。*/
	 caps_lock_status = !caps_lock_status;
      }
   } else {
      put_str("unknown key\n");
c0004eb8:	83 ec 0c             	sub    $0xc,%esp
c0004ebb:	68 d5 d6 00 c0       	push   $0xc000d6d5
c0004ec0:	e8 3b d3 ff ff       	call   c0002200 <put_str>
c0004ec5:	83 c4 10             	add    $0x10,%esp
c0004ec8:	eb 07                	jmp    c0004ed1 <intr_keyboard_handler+0x296>
/work/x86_os_my/device/keyboard.c:151
	 shift_status = false;
      } else if (make_code == alt_l_make || make_code == alt_r_make) {
	 alt_status = false;
      } /* 由于caps_lock不是弹起后关闭,所以需要单独处理 */

      return;   // 直接返回结束此次中断处理程序
c0004eca:	90                   	nop
c0004ecb:	eb 04                	jmp    c0004ed1 <intr_keyboard_handler+0x296>
/work/x86_os_my/device/keyboard.c:210
   /* 若kbd_buf中未满并且待加入的cur_char不为0,
    * 则将其加入到缓冲区kbd_buf中 */
	 if (!ioq_full(&kbd_buf)) {
	    ioq_putchar(&kbd_buf, cur_char);
	 }
	 return;
c0004ecd:	90                   	nop
c0004ece:	eb 01                	jmp    c0004ed1 <intr_keyboard_handler+0x296>
/work/x86_os_my/device/keyboard.c:157

   } 
   /* 若为通码,只处理数组中定义的键以及alt_right和ctrl键,全是make_code */
   else if ((scancode > 0x00 && scancode < 0x3b) || \
	       (scancode == alt_r_make) || \
	       (scancode == ctrl_r_make)) {
c0004ed0:	90                   	nop
/work/x86_os_my/device/keyboard.c:228
	 caps_lock_status = !caps_lock_status;
      }
   } else {
      put_str("unknown key\n");
   }
}
c0004ed1:	c9                   	leave  
c0004ed2:	c3                   	ret    

c0004ed3 <keyboard_init>:
keyboard_init():
/work/x86_os_my/device/keyboard.c:231

/* 键盘初始化 */
void keyboard_init() {
c0004ed3:	55                   	push   %ebp
c0004ed4:	89 e5                	mov    %esp,%ebp
c0004ed6:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/keyboard.c:232
   put_str("keyboard init start\n");
c0004ed9:	83 ec 0c             	sub    $0xc,%esp
c0004edc:	68 e2 d6 00 c0       	push   $0xc000d6e2
c0004ee1:	e8 1a d3 ff ff       	call   c0002200 <put_str>
c0004ee6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/keyboard.c:233
   ioqueue_init(&kbd_buf);
c0004ee9:	83 ec 0c             	sub    $0xc,%esp
c0004eec:	68 e0 21 01 c0       	push   $0xc00121e0
c0004ef1:	e8 28 00 00 00       	call   c0004f1e <ioqueue_init>
c0004ef6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/keyboard.c:234
   register_handler(0x21, intr_keyboard_handler);
c0004ef9:	83 ec 08             	sub    $0x8,%esp
c0004efc:	68 3b 4c 00 c0       	push   $0xc0004c3b
c0004f01:	6a 21                	push   $0x21
c0004f03:	e8 2c cb ff ff       	call   c0001a34 <register_handler>
c0004f08:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/keyboard.c:235
   put_str("keyboard init done\n");
c0004f0b:	83 ec 0c             	sub    $0xc,%esp
c0004f0e:	68 f7 d6 00 c0       	push   $0xc000d6f7
c0004f13:	e8 e8 d2 ff ff       	call   c0002200 <put_str>
c0004f18:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/keyboard.c:236
}
c0004f1b:	90                   	nop
c0004f1c:	c9                   	leave  
c0004f1d:	c3                   	ret    

c0004f1e <ioqueue_init>:
ioqueue_init():
/work/x86_os_my/device/ioqueue.c:7
#include "interrupt.h"
#include "global.h"
#include "debug.h"

/* 初始化io队列ioq */
void ioqueue_init(struct ioqueue* ioq) {
c0004f1e:	55                   	push   %ebp
c0004f1f:	89 e5                	mov    %esp,%ebp
c0004f21:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/ioqueue.c:8
   lock_init(&ioq->lock);     // 初始化io队列的锁
c0004f24:	8b 45 08             	mov    0x8(%ebp),%eax
c0004f27:	83 ec 0c             	sub    $0xc,%esp
c0004f2a:	50                   	push   %eax
c0004f2b:	e8 05 fa ff ff       	call   c0004935 <lock_init>
c0004f30:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:9
   ioq->producer = ioq->consumer = NULL;  // 生产者和消费者置空
c0004f33:	8b 45 08             	mov    0x8(%ebp),%eax
c0004f36:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
c0004f3d:	8b 45 08             	mov    0x8(%ebp),%eax
c0004f40:	8b 50 20             	mov    0x20(%eax),%edx
c0004f43:	8b 45 08             	mov    0x8(%ebp),%eax
c0004f46:	89 50 1c             	mov    %edx,0x1c(%eax)
/work/x86_os_my/device/ioqueue.c:10
   ioq->head = ioq->tail = 0; // 队列的首尾指针指向缓冲区数组第0个位置
c0004f49:	8b 45 08             	mov    0x8(%ebp),%eax
c0004f4c:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)
c0004f53:	8b 45 08             	mov    0x8(%ebp),%eax
c0004f56:	8b 50 68             	mov    0x68(%eax),%edx
c0004f59:	8b 45 08             	mov    0x8(%ebp),%eax
c0004f5c:	89 50 64             	mov    %edx,0x64(%eax)
/work/x86_os_my/device/ioqueue.c:11
}
c0004f5f:	90                   	nop
c0004f60:	c9                   	leave  
c0004f61:	c3                   	ret    

c0004f62 <next_pos>:
next_pos():
/work/x86_os_my/device/ioqueue.c:14

/* 返回pos在缓冲区中的下一个位置值 */
static int32_t next_pos(int32_t pos) {
c0004f62:	55                   	push   %ebp
c0004f63:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/device/ioqueue.c:15
   return (pos + 1) % bufsize; 
c0004f65:	8b 45 08             	mov    0x8(%ebp),%eax
c0004f68:	8d 50 01             	lea    0x1(%eax),%edx
c0004f6b:	89 d0                	mov    %edx,%eax
c0004f6d:	c1 f8 1f             	sar    $0x1f,%eax
c0004f70:	c1 e8 1a             	shr    $0x1a,%eax
c0004f73:	01 c2                	add    %eax,%edx
c0004f75:	83 e2 3f             	and    $0x3f,%edx
c0004f78:	29 c2                	sub    %eax,%edx
c0004f7a:	89 d0                	mov    %edx,%eax
/work/x86_os_my/device/ioqueue.c:16
}
c0004f7c:	5d                   	pop    %ebp
c0004f7d:	c3                   	ret    

c0004f7e <ioq_full>:
ioq_full():
/work/x86_os_my/device/ioqueue.c:19

/* 判断队列是否已满 */
bool ioq_full(struct ioqueue* ioq) {
c0004f7e:	55                   	push   %ebp
c0004f7f:	89 e5                	mov    %esp,%ebp
c0004f81:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/ioqueue.c:20
   ASSERT(intr_get_status() == INTR_OFF);
c0004f84:	e8 87 ca ff ff       	call   c0001a10 <intr_get_status>
c0004f89:	85 c0                	test   %eax,%eax
c0004f8b:	74 19                	je     c0004fa6 <ioq_full+0x28>
/work/x86_os_my/device/ioqueue.c:20 (discriminator 1)
c0004f8d:	68 0c d7 00 c0       	push   $0xc000d70c
c0004f92:	68 70 d7 00 c0       	push   $0xc000d770
c0004f97:	6a 14                	push   $0x14
c0004f99:	68 2a d7 00 c0       	push   $0xc000d72a
c0004f9e:	e8 0e d4 ff ff       	call   c00023b1 <panic_spin>
c0004fa3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:21
   return next_pos(ioq->head) == ioq->tail;
c0004fa6:	8b 45 08             	mov    0x8(%ebp),%eax
c0004fa9:	8b 40 64             	mov    0x64(%eax),%eax
c0004fac:	83 ec 0c             	sub    $0xc,%esp
c0004faf:	50                   	push   %eax
c0004fb0:	e8 ad ff ff ff       	call   c0004f62 <next_pos>
c0004fb5:	83 c4 10             	add    $0x10,%esp
c0004fb8:	89 c2                	mov    %eax,%edx
c0004fba:	8b 45 08             	mov    0x8(%ebp),%eax
c0004fbd:	8b 40 68             	mov    0x68(%eax),%eax
c0004fc0:	39 c2                	cmp    %eax,%edx
c0004fc2:	0f 94 c0             	sete   %al
c0004fc5:	0f b6 c0             	movzbl %al,%eax
/work/x86_os_my/device/ioqueue.c:22
}
c0004fc8:	c9                   	leave  
c0004fc9:	c3                   	ret    

c0004fca <ioq_empty>:
ioq_empty():
/work/x86_os_my/device/ioqueue.c:25

/* 判断队列是否已空 */
static bool ioq_empty(struct ioqueue* ioq) {
c0004fca:	55                   	push   %ebp
c0004fcb:	89 e5                	mov    %esp,%ebp
c0004fcd:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/ioqueue.c:26
   ASSERT(intr_get_status() == INTR_OFF);
c0004fd0:	e8 3b ca ff ff       	call   c0001a10 <intr_get_status>
c0004fd5:	85 c0                	test   %eax,%eax
c0004fd7:	74 19                	je     c0004ff2 <ioq_empty+0x28>
/work/x86_os_my/device/ioqueue.c:26 (discriminator 1)
c0004fd9:	68 0c d7 00 c0       	push   $0xc000d70c
c0004fde:	68 7c d7 00 c0       	push   $0xc000d77c
c0004fe3:	6a 1a                	push   $0x1a
c0004fe5:	68 2a d7 00 c0       	push   $0xc000d72a
c0004fea:	e8 c2 d3 ff ff       	call   c00023b1 <panic_spin>
c0004fef:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:27
   return ioq->head == ioq->tail;
c0004ff2:	8b 45 08             	mov    0x8(%ebp),%eax
c0004ff5:	8b 50 64             	mov    0x64(%eax),%edx
c0004ff8:	8b 45 08             	mov    0x8(%ebp),%eax
c0004ffb:	8b 40 68             	mov    0x68(%eax),%eax
c0004ffe:	39 c2                	cmp    %eax,%edx
c0005000:	0f 94 c0             	sete   %al
c0005003:	0f b6 c0             	movzbl %al,%eax
/work/x86_os_my/device/ioqueue.c:28
}
c0005006:	c9                   	leave  
c0005007:	c3                   	ret    

c0005008 <ioq_wait>:
ioq_wait():
/work/x86_os_my/device/ioqueue.c:31

/* 使当前生产者或消费者在此缓冲区上等待 */
static void ioq_wait(struct task_struct** waiter) {
c0005008:	55                   	push   %ebp
c0005009:	89 e5                	mov    %esp,%ebp
c000500b:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/ioqueue.c:32
   ASSERT(*waiter == NULL && waiter != NULL);
c000500e:	8b 45 08             	mov    0x8(%ebp),%eax
c0005011:	8b 00                	mov    (%eax),%eax
c0005013:	85 c0                	test   %eax,%eax
c0005015:	75 06                	jne    c000501d <ioq_wait+0x15>
/work/x86_os_my/device/ioqueue.c:32 (discriminator 1)
c0005017:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c000501b:	75 19                	jne    c0005036 <ioq_wait+0x2e>
/work/x86_os_my/device/ioqueue.c:32 (discriminator 3)
c000501d:	68 3c d7 00 c0       	push   $0xc000d73c
c0005022:	68 88 d7 00 c0       	push   $0xc000d788
c0005027:	6a 20                	push   $0x20
c0005029:	68 2a d7 00 c0       	push   $0xc000d72a
c000502e:	e8 7e d3 ff ff       	call   c00023b1 <panic_spin>
c0005033:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:33
   *waiter = running_thread();
c0005036:	e8 ff eb ff ff       	call   c0003c3a <running_thread>
c000503b:	89 c2                	mov    %eax,%edx
c000503d:	8b 45 08             	mov    0x8(%ebp),%eax
c0005040:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/device/ioqueue.c:34
   thread_block(TASK_BLOCKED);
c0005042:	83 ec 0c             	sub    $0xc,%esp
c0005045:	6a 02                	push   $0x2
c0005047:	e8 91 f0 ff ff       	call   c00040dd <thread_block>
c000504c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:35
}
c000504f:	90                   	nop
c0005050:	c9                   	leave  
c0005051:	c3                   	ret    

c0005052 <wakeup>:
wakeup():
/work/x86_os_my/device/ioqueue.c:38

/* 唤醒waiter */
static void wakeup(struct task_struct** waiter) {
c0005052:	55                   	push   %ebp
c0005053:	89 e5                	mov    %esp,%ebp
c0005055:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/device/ioqueue.c:39
   ASSERT(*waiter != NULL);
c0005058:	8b 45 08             	mov    0x8(%ebp),%eax
c000505b:	8b 00                	mov    (%eax),%eax
c000505d:	85 c0                	test   %eax,%eax
c000505f:	75 19                	jne    c000507a <wakeup+0x28>
/work/x86_os_my/device/ioqueue.c:39 (discriminator 1)
c0005061:	68 5e d7 00 c0       	push   $0xc000d75e
c0005066:	68 94 d7 00 c0       	push   $0xc000d794
c000506b:	6a 27                	push   $0x27
c000506d:	68 2a d7 00 c0       	push   $0xc000d72a
c0005072:	e8 3a d3 ff ff       	call   c00023b1 <panic_spin>
c0005077:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:40
   thread_unblock(*waiter); 
c000507a:	8b 45 08             	mov    0x8(%ebp),%eax
c000507d:	8b 00                	mov    (%eax),%eax
c000507f:	83 ec 0c             	sub    $0xc,%esp
c0005082:	50                   	push   %eax
c0005083:	e8 b8 f0 ff ff       	call   c0004140 <thread_unblock>
c0005088:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:41
   *waiter = NULL;
c000508b:	8b 45 08             	mov    0x8(%ebp),%eax
c000508e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/device/ioqueue.c:42
}
c0005094:	90                   	nop
c0005095:	c9                   	leave  
c0005096:	c3                   	ret    

c0005097 <ioq_getchar>:
ioq_getchar():
/work/x86_os_my/device/ioqueue.c:45

/* 消费者从ioq队列中获取一个字符 */
char ioq_getchar(struct ioqueue* ioq) {
c0005097:	55                   	push   %ebp
c0005098:	89 e5                	mov    %esp,%ebp
c000509a:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/ioqueue.c:46
   ASSERT(intr_get_status() == INTR_OFF);
c000509d:	e8 6e c9 ff ff       	call   c0001a10 <intr_get_status>
c00050a2:	85 c0                	test   %eax,%eax
c00050a4:	74 4b                	je     c00050f1 <ioq_getchar+0x5a>
/work/x86_os_my/device/ioqueue.c:46 (discriminator 1)
c00050a6:	68 0c d7 00 c0       	push   $0xc000d70c
c00050ab:	68 9c d7 00 c0       	push   $0xc000d79c
c00050b0:	6a 2e                	push   $0x2e
c00050b2:	68 2a d7 00 c0       	push   $0xc000d72a
c00050b7:	e8 f5 d2 ff ff       	call   c00023b1 <panic_spin>
c00050bc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:51 (discriminator 1)

/* 若缓冲区(队列)为空,把消费者ioq->consumer记为当前线程自己,
 * 目的是将来生产者往缓冲区里装商品后,生产者知道唤醒哪个消费者,
 * 也就是唤醒当前线程自己*/
   while (ioq_empty(ioq)) {
c00050bf:	eb 30                	jmp    c00050f1 <ioq_getchar+0x5a>
/work/x86_os_my/device/ioqueue.c:52
      lock_acquire(&ioq->lock);	 
c00050c1:	8b 45 08             	mov    0x8(%ebp),%eax
c00050c4:	83 ec 0c             	sub    $0xc,%esp
c00050c7:	50                   	push   %eax
c00050c8:	e8 42 fa ff ff       	call   c0004b0f <lock_acquire>
c00050cd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:53
      ioq_wait(&ioq->consumer);
c00050d0:	8b 45 08             	mov    0x8(%ebp),%eax
c00050d3:	83 c0 20             	add    $0x20,%eax
c00050d6:	83 ec 0c             	sub    $0xc,%esp
c00050d9:	50                   	push   %eax
c00050da:	e8 29 ff ff ff       	call   c0005008 <ioq_wait>
c00050df:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:54
      lock_release(&ioq->lock);
c00050e2:	8b 45 08             	mov    0x8(%ebp),%eax
c00050e5:	83 ec 0c             	sub    $0xc,%esp
c00050e8:	50                   	push   %eax
c00050e9:	e8 98 fa ff ff       	call   c0004b86 <lock_release>
c00050ee:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:51
   ASSERT(intr_get_status() == INTR_OFF);

/* 若缓冲区(队列)为空,把消费者ioq->consumer记为当前线程自己,
 * 目的是将来生产者往缓冲区里装商品后,生产者知道唤醒哪个消费者,
 * 也就是唤醒当前线程自己*/
   while (ioq_empty(ioq)) {
c00050f1:	83 ec 0c             	sub    $0xc,%esp
c00050f4:	ff 75 08             	pushl  0x8(%ebp)
c00050f7:	e8 ce fe ff ff       	call   c0004fca <ioq_empty>
c00050fc:	83 c4 10             	add    $0x10,%esp
c00050ff:	85 c0                	test   %eax,%eax
c0005101:	75 be                	jne    c00050c1 <ioq_getchar+0x2a>
/work/x86_os_my/device/ioqueue.c:57
      lock_acquire(&ioq->lock);	 
      ioq_wait(&ioq->consumer);
      lock_release(&ioq->lock);
   }

   char byte = ioq->buf[ioq->tail];	  // 从缓冲区中取出
c0005103:	8b 45 08             	mov    0x8(%ebp),%eax
c0005106:	8b 40 68             	mov    0x68(%eax),%eax
c0005109:	8b 55 08             	mov    0x8(%ebp),%edx
c000510c:	0f b6 44 02 24       	movzbl 0x24(%edx,%eax,1),%eax
c0005111:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/device/ioqueue.c:58
   ioq->tail = next_pos(ioq->tail);	  // 把读游标移到下一位置
c0005114:	8b 45 08             	mov    0x8(%ebp),%eax
c0005117:	8b 40 68             	mov    0x68(%eax),%eax
c000511a:	83 ec 0c             	sub    $0xc,%esp
c000511d:	50                   	push   %eax
c000511e:	e8 3f fe ff ff       	call   c0004f62 <next_pos>
c0005123:	83 c4 10             	add    $0x10,%esp
c0005126:	89 c2                	mov    %eax,%edx
c0005128:	8b 45 08             	mov    0x8(%ebp),%eax
c000512b:	89 50 68             	mov    %edx,0x68(%eax)
/work/x86_os_my/device/ioqueue.c:60

   if (ioq->producer != NULL) {
c000512e:	8b 45 08             	mov    0x8(%ebp),%eax
c0005131:	8b 40 1c             	mov    0x1c(%eax),%eax
c0005134:	85 c0                	test   %eax,%eax
c0005136:	74 12                	je     c000514a <ioq_getchar+0xb3>
/work/x86_os_my/device/ioqueue.c:61
      wakeup(&ioq->producer);		  // 唤醒生产者
c0005138:	8b 45 08             	mov    0x8(%ebp),%eax
c000513b:	83 c0 1c             	add    $0x1c,%eax
c000513e:	83 ec 0c             	sub    $0xc,%esp
c0005141:	50                   	push   %eax
c0005142:	e8 0b ff ff ff       	call   c0005052 <wakeup>
c0005147:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:64
   }

   return byte; 
c000514a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
/work/x86_os_my/device/ioqueue.c:65
}
c000514e:	c9                   	leave  
c000514f:	c3                   	ret    

c0005150 <ioq_putchar>:
ioq_putchar():
/work/x86_os_my/device/ioqueue.c:68

/* 生产者往ioq队列中写入一个字符byte */
void ioq_putchar(struct ioqueue* ioq, char byte) {
c0005150:	55                   	push   %ebp
c0005151:	89 e5                	mov    %esp,%ebp
c0005153:	83 ec 18             	sub    $0x18,%esp
c0005156:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005159:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/device/ioqueue.c:69
   ASSERT(intr_get_status() == INTR_OFF);
c000515c:	e8 af c8 ff ff       	call   c0001a10 <intr_get_status>
c0005161:	85 c0                	test   %eax,%eax
c0005163:	74 4b                	je     c00051b0 <ioq_putchar+0x60>
/work/x86_os_my/device/ioqueue.c:69 (discriminator 1)
c0005165:	68 0c d7 00 c0       	push   $0xc000d70c
c000516a:	68 a8 d7 00 c0       	push   $0xc000d7a8
c000516f:	6a 45                	push   $0x45
c0005171:	68 2a d7 00 c0       	push   $0xc000d72a
c0005176:	e8 36 d2 ff ff       	call   c00023b1 <panic_spin>
c000517b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:74 (discriminator 1)

/* 若缓冲区(队列)已经满了,把生产者ioq->producer记为自己,
 * 为的是当缓冲区里的东西被消费者取完后让消费者知道唤醒哪个生产者,
 * 也就是唤醒当前线程自己*/
   while (ioq_full(ioq)) {
c000517e:	eb 30                	jmp    c00051b0 <ioq_putchar+0x60>
/work/x86_os_my/device/ioqueue.c:75
      lock_acquire(&ioq->lock);
c0005180:	8b 45 08             	mov    0x8(%ebp),%eax
c0005183:	83 ec 0c             	sub    $0xc,%esp
c0005186:	50                   	push   %eax
c0005187:	e8 83 f9 ff ff       	call   c0004b0f <lock_acquire>
c000518c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:76
      ioq_wait(&ioq->producer);
c000518f:	8b 45 08             	mov    0x8(%ebp),%eax
c0005192:	83 c0 1c             	add    $0x1c,%eax
c0005195:	83 ec 0c             	sub    $0xc,%esp
c0005198:	50                   	push   %eax
c0005199:	e8 6a fe ff ff       	call   c0005008 <ioq_wait>
c000519e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:77
      lock_release(&ioq->lock);
c00051a1:	8b 45 08             	mov    0x8(%ebp),%eax
c00051a4:	83 ec 0c             	sub    $0xc,%esp
c00051a7:	50                   	push   %eax
c00051a8:	e8 d9 f9 ff ff       	call   c0004b86 <lock_release>
c00051ad:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:74
   ASSERT(intr_get_status() == INTR_OFF);

/* 若缓冲区(队列)已经满了,把生产者ioq->producer记为自己,
 * 为的是当缓冲区里的东西被消费者取完后让消费者知道唤醒哪个生产者,
 * 也就是唤醒当前线程自己*/
   while (ioq_full(ioq)) {
c00051b0:	83 ec 0c             	sub    $0xc,%esp
c00051b3:	ff 75 08             	pushl  0x8(%ebp)
c00051b6:	e8 c3 fd ff ff       	call   c0004f7e <ioq_full>
c00051bb:	83 c4 10             	add    $0x10,%esp
c00051be:	85 c0                	test   %eax,%eax
c00051c0:	75 be                	jne    c0005180 <ioq_putchar+0x30>
/work/x86_os_my/device/ioqueue.c:79
      lock_acquire(&ioq->lock);
      ioq_wait(&ioq->producer);
      lock_release(&ioq->lock);
   }
   ioq->buf[ioq->head] = byte;      // 把字节放入缓冲区中
c00051c2:	8b 45 08             	mov    0x8(%ebp),%eax
c00051c5:	8b 40 64             	mov    0x64(%eax),%eax
c00051c8:	8b 55 08             	mov    0x8(%ebp),%edx
c00051cb:	0f b6 4d f4          	movzbl -0xc(%ebp),%ecx
c00051cf:	88 4c 02 24          	mov    %cl,0x24(%edx,%eax,1)
/work/x86_os_my/device/ioqueue.c:80
   ioq->head = next_pos(ioq->head); // 把写游标移到下一位置
c00051d3:	8b 45 08             	mov    0x8(%ebp),%eax
c00051d6:	8b 40 64             	mov    0x64(%eax),%eax
c00051d9:	83 ec 0c             	sub    $0xc,%esp
c00051dc:	50                   	push   %eax
c00051dd:	e8 80 fd ff ff       	call   c0004f62 <next_pos>
c00051e2:	83 c4 10             	add    $0x10,%esp
c00051e5:	89 c2                	mov    %eax,%edx
c00051e7:	8b 45 08             	mov    0x8(%ebp),%eax
c00051ea:	89 50 64             	mov    %edx,0x64(%eax)
/work/x86_os_my/device/ioqueue.c:82

   if (ioq->consumer != NULL) {
c00051ed:	8b 45 08             	mov    0x8(%ebp),%eax
c00051f0:	8b 40 20             	mov    0x20(%eax),%eax
c00051f3:	85 c0                	test   %eax,%eax
c00051f5:	74 12                	je     c0005209 <ioq_putchar+0xb9>
/work/x86_os_my/device/ioqueue.c:83
      wakeup(&ioq->consumer);          // 唤醒消费者
c00051f7:	8b 45 08             	mov    0x8(%ebp),%eax
c00051fa:	83 c0 20             	add    $0x20,%eax
c00051fd:	83 ec 0c             	sub    $0xc,%esp
c0005200:	50                   	push   %eax
c0005201:	e8 4c fe ff ff       	call   c0005052 <wakeup>
c0005206:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ioqueue.c:85
   }
}
c0005209:	90                   	nop
c000520a:	c9                   	leave  
c000520b:	c3                   	ret    

c000520c <update_tss_esp>:
update_tss_esp():
/work/x86_os_my/userprog/tss.c:40
	uint32_t io_base;
}; 
static struct tss g_tss;

/* 更新tss中esp0字段的值为pthread的0级栈 */
void update_tss_esp(struct task_struct* pthread) {
c000520c:	55                   	push   %ebp
c000520d:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/userprog/tss.c:41
	g_tss.esp0 = (uint32_t*)((uint32_t)pthread + PG_SIZE);
c000520f:	8b 45 08             	mov    0x8(%ebp),%eax
c0005212:	05 00 10 00 00       	add    $0x1000,%eax
c0005217:	a3 a4 15 01 c0       	mov    %eax,0xc00115a4
/work/x86_os_my/userprog/tss.c:42
}
c000521c:	90                   	nop
c000521d:	5d                   	pop    %ebp
c000521e:	c3                   	ret    

c000521f <make_gdt_desc>:
make_gdt_desc():
/work/x86_os_my/userprog/tss.c:45

/* c语言方式，创建gdt描述符 */
static struct gdt_desc make_gdt_desc(uint32_t* desc_addr, uint32_t limit, uint8_t attr_low, uint8_t attr_high) {
c000521f:	55                   	push   %ebp
c0005220:	89 e5                	mov    %esp,%ebp
c0005222:	83 ec 18             	sub    $0x18,%esp
c0005225:	8b 55 14             	mov    0x14(%ebp),%edx
c0005228:	8b 45 18             	mov    0x18(%ebp),%eax
c000522b:	88 55 ec             	mov    %dl,-0x14(%ebp)
c000522e:	88 45 e8             	mov    %al,-0x18(%ebp)
/work/x86_os_my/userprog/tss.c:46
	uint32_t desc_base = (uint32_t)desc_addr;
c0005231:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005234:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/userprog/tss.c:48
	struct gdt_desc desc;
	desc.limit_low_word = limit & 0x0000ffff;
c0005237:	8b 45 10             	mov    0x10(%ebp),%eax
c000523a:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
/work/x86_os_my/userprog/tss.c:49
	desc.base_low_word = desc_base & 0x0000ffff;
c000523e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0005241:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
/work/x86_os_my/userprog/tss.c:50
	desc.base_mid_byte = ((desc_base & 0x00ff0000) >> 16);
c0005245:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0005248:	25 00 00 ff 00       	and    $0xff0000,%eax
c000524d:	c1 e8 10             	shr    $0x10,%eax
c0005250:	88 45 f8             	mov    %al,-0x8(%ebp)
/work/x86_os_my/userprog/tss.c:51
	desc.attr_low_byte = (uint8_t)(attr_low);
c0005253:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0005257:	88 45 f9             	mov    %al,-0x7(%ebp)
/work/x86_os_my/userprog/tss.c:52
	desc.limit_high_attr_high = (((limit & 0x000f0000) >> 16) + (uint8_t)(attr_high));
c000525a:	8b 45 10             	mov    0x10(%ebp),%eax
c000525d:	25 00 00 0f 00       	and    $0xf0000,%eax
c0005262:	c1 e8 10             	shr    $0x10,%eax
c0005265:	89 c2                	mov    %eax,%edx
c0005267:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c000526b:	01 d0                	add    %edx,%eax
c000526d:	88 45 fa             	mov    %al,-0x6(%ebp)
/work/x86_os_my/userprog/tss.c:53
	desc.base_high_byte = desc_base >> 24;
c0005270:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0005273:	c1 e8 18             	shr    $0x18,%eax
c0005276:	88 45 fb             	mov    %al,-0x5(%ebp)
/work/x86_os_my/userprog/tss.c:54
	return desc;
c0005279:	8b 4d 08             	mov    0x8(%ebp),%ecx
c000527c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000527f:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0005282:	89 01                	mov    %eax,(%ecx)
c0005284:	89 51 04             	mov    %edx,0x4(%ecx)
/work/x86_os_my/userprog/tss.c:55
}
c0005287:	8b 45 08             	mov    0x8(%ebp),%eax
c000528a:	c9                   	leave  
c000528b:	c2 04 00             	ret    $0x4

c000528e <tss_init>:
tss_init():
/work/x86_os_my/userprog/tss.c:61

/* 在gdt中创建tss描述符
 * 重新加载 gdt
 * 加载 tr
 */
void tss_init() {
c000528e:	55                   	push   %ebp
c000528f:	89 e5                	mov    %esp,%ebp
c0005291:	53                   	push   %ebx
c0005292:	83 ec 24             	sub    $0x24,%esp
/work/x86_os_my/userprog/tss.c:62
	put_str("tss_init start\n");
c0005295:	83 ec 0c             	sub    $0xc,%esp
c0005298:	68 b4 d7 00 c0       	push   $0xc000d7b4
c000529d:	e8 5e cf ff ff       	call   c0002200 <put_str>
c00052a2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/tss.c:63
	uint32_t tss_size = sizeof(g_tss);
c00052a5:	c7 45 f4 6c 00 00 00 	movl   $0x6c,-0xc(%ebp)
/work/x86_os_my/userprog/tss.c:64
	memset(&g_tss, 0, tss_size);
c00052ac:	83 ec 04             	sub    $0x4,%esp
c00052af:	ff 75 f4             	pushl  -0xc(%ebp)
c00052b2:	6a 00                	push   $0x0
c00052b4:	68 a0 15 01 c0       	push   $0xc00115a0
c00052b9:	e8 95 e5 ff ff       	call   c0003853 <memset>
c00052be:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/tss.c:66
	
	g_tss.ss0 = SELECTOR_K_STACK;	// 0 级栈段的选择子 
c00052c1:	c7 05 a8 15 01 c0 10 	movl   $0x10,0xc00115a8
c00052c8:	00 00 00 
/work/x86_os_my/userprog/tss.c:67
	g_tss.io_base = tss_size;		// 当 IO 位图的偏移地址大于等于 TSS 大小减 1 时，就表示没有 IO 位图。
c00052cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00052ce:	a3 08 16 01 c0       	mov    %eax,0xc0011608
/work/x86_os_my/userprog/tss.c:75
	 * 内核地址 0xC000_0900 是映射到 0x900 的 
	 * 在GDT中，第 0 个段描述符不可用，第 1 个为代码段，第 2 个为数据段和栈，第 3 个为显存段
	 */

	/* 在gdt中添加dpl为0的TSS描述符 */
	*((struct gdt_desc*)0xc0000920) = make_gdt_desc((uint32_t*)&g_tss, tss_size - 1, TSS_ATTR_LOW, TSS_ATTR_HIGH);
c00052d3:	bb 20 09 00 c0       	mov    $0xc0000920,%ebx
c00052d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00052db:	8d 50 ff             	lea    -0x1(%eax),%edx
c00052de:	8d 45 e0             	lea    -0x20(%ebp),%eax
c00052e1:	83 ec 0c             	sub    $0xc,%esp
c00052e4:	68 80 00 00 00       	push   $0x80
c00052e9:	68 89 00 00 00       	push   $0x89
c00052ee:	52                   	push   %edx
c00052ef:	68 a0 15 01 c0       	push   $0xc00115a0
c00052f4:	50                   	push   %eax
c00052f5:	e8 25 ff ff ff       	call   c000521f <make_gdt_desc>
c00052fa:	83 c4 1c             	add    $0x1c,%esp
c00052fd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0005300:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0005303:	89 03                	mov    %eax,(%ebx)
c0005305:	89 53 04             	mov    %edx,0x4(%ebx)
/work/x86_os_my/userprog/tss.c:78

	/* 在gdt中添加dpl为3的,用户级,数据段和代码段描述符 */
	*((struct gdt_desc*)0xc0000928) = make_gdt_desc((uint32_t*)0, 0xfffff, GDT_CODE_ATTR_LOW_DPL3, GDT_ATTR_HIGH);
c0005308:	bb 28 09 00 c0       	mov    $0xc0000928,%ebx
c000530d:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0005310:	83 ec 0c             	sub    $0xc,%esp
c0005313:	68 c0 00 00 00       	push   $0xc0
c0005318:	68 f8 00 00 00       	push   $0xf8
c000531d:	68 ff ff 0f 00       	push   $0xfffff
c0005322:	6a 00                	push   $0x0
c0005324:	50                   	push   %eax
c0005325:	e8 f5 fe ff ff       	call   c000521f <make_gdt_desc>
c000532a:	83 c4 1c             	add    $0x1c,%esp
c000532d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0005330:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0005333:	89 03                	mov    %eax,(%ebx)
c0005335:	89 53 04             	mov    %edx,0x4(%ebx)
/work/x86_os_my/userprog/tss.c:79
	*((struct gdt_desc*)0xc0000930) = make_gdt_desc((uint32_t*)0, 0xfffff, GDT_DATA_ATTR_LOW_DPL3, GDT_ATTR_HIGH);
c0005338:	bb 30 09 00 c0       	mov    $0xc0000930,%ebx
c000533d:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0005340:	83 ec 0c             	sub    $0xc,%esp
c0005343:	68 c0 00 00 00       	push   $0xc0
c0005348:	68 f2 00 00 00       	push   $0xf2
c000534d:	68 ff ff 0f 00       	push   $0xfffff
c0005352:	6a 00                	push   $0x0
c0005354:	50                   	push   %eax
c0005355:	e8 c5 fe ff ff       	call   c000521f <make_gdt_desc>
c000535a:	83 c4 1c             	add    $0x1c,%esp
c000535d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0005360:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0005363:	89 03                	mov    %eax,(%ebx)
c0005365:	89 53 04             	mov    %edx,0x4(%ebx)
/work/x86_os_my/userprog/tss.c:83

	/* GDTR 16位的limit、32位的段基址 */
	// 先转换成 uint32_t 后，再将其转换成 uint64_t 位（不可一步到位转为 uint64_t）
	uint64_t gdt_operand = ((8 * 7 - 1) | ((uint64_t)(uint32_t)0xc0000900 << 16));   // 7个描述符大小
c0005368:	c7 45 e8 37 00 00 09 	movl   $0x9000037,-0x18(%ebp)
c000536f:	c7 45 ec 00 c0 00 00 	movl   $0xc000,-0x14(%ebp)
/work/x86_os_my/userprog/tss.c:84
	asm volatile ("lgdt %0" : : "m" (gdt_operand));
c0005376:	0f 01 55 e8          	lgdtl  -0x18(%ebp)
/work/x86_os_my/userprog/tss.c:85
	asm volatile ("ltr %w0" : : "r" (SELECTOR_TSS));
c000537a:	b8 20 00 00 00       	mov    $0x20,%eax
c000537f:	0f 00 d8             	ltr    %ax
/work/x86_os_my/userprog/tss.c:86
	put_str("tss_init and ltr done\n");
c0005382:	83 ec 0c             	sub    $0xc,%esp
c0005385:	68 c4 d7 00 c0       	push   $0xc000d7c4
c000538a:	e8 71 ce ff ff       	call   c0002200 <put_str>
c000538f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/tss.c:87
}
c0005392:	90                   	nop
c0005393:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0005396:	c9                   	leave  
c0005397:	c3                   	ret    

c0005398 <start_process>:
start_process():
/work/x86_os_my/userprog/process.c:17
extern void intr_exit(void);

/* 构建用户进程初始上下文信息
 * 填充用户进程的中断栈，并将中断栈的信息，利用iretd填充到 CPU 中
 */
void start_process(void* filename_) {
c0005398:	55                   	push   %ebp
c0005399:	89 e5                	mov    %esp,%ebp
c000539b:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/process.c:18
	void* function = filename_;
c000539e:	8b 45 08             	mov    0x8(%ebp),%eax
c00053a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:19
	struct task_struct* cur = running_thread();
c00053a4:	e8 91 e8 ff ff       	call   c0003c3a <running_thread>
c00053a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/process.c:20
	cur->self_kstack += sizeof(struct thread_stack);
c00053ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00053af:	8b 00                	mov    (%eax),%eax
c00053b1:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
c00053b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00053ba:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/userprog/process.c:21
	struct intr_stack* proc_stack = (struct intr_stack*)cur->self_kstack;	 
c00053bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00053bf:	8b 00                	mov    (%eax),%eax
c00053c1:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/userprog/process.c:22
	proc_stack->edi = proc_stack->esi = proc_stack->ebp = proc_stack->esp_dummy = 0;
c00053c4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00053c7:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
c00053ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00053d1:	8b 50 10             	mov    0x10(%eax),%edx
c00053d4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00053d7:	89 50 0c             	mov    %edx,0xc(%eax)
c00053da:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00053dd:	8b 50 0c             	mov    0xc(%eax),%edx
c00053e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00053e3:	89 50 08             	mov    %edx,0x8(%eax)
c00053e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00053e9:	8b 50 08             	mov    0x8(%eax),%edx
c00053ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00053ef:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/userprog/process.c:23
	proc_stack->ebx = proc_stack->edx = proc_stack->ecx = proc_stack->eax = 0;
c00053f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00053f5:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
c00053fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00053ff:	8b 50 20             	mov    0x20(%eax),%edx
c0005402:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005405:	89 50 1c             	mov    %edx,0x1c(%eax)
c0005408:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000540b:	8b 50 1c             	mov    0x1c(%eax),%edx
c000540e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005411:	89 50 18             	mov    %edx,0x18(%eax)
c0005414:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005417:	8b 50 18             	mov    0x18(%eax),%edx
c000541a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000541d:	89 50 14             	mov    %edx,0x14(%eax)
/work/x86_os_my/userprog/process.c:28
	/* 在iretd返回时，如果发现未来的 CPL（也就是内核栈中 CS.RPL，或者说是返回到的用户进程的代码段CS.CPL）
	 * 权限低于（数值上大于） CPU 中段寄存器（如 DS、 ES、 FS、 GS）中选择子指向的内存段的 DPL，
	 * CPU 会自动将相应段寄存器的选择子置为 0 
	 * 这里gs的选择子在iretd返回后，会被自动清零。*/
	proc_stack->gs = 0;					// 用户态用不上,直接初始为0
c0005420:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005423:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
/work/x86_os_my/userprog/process.c:29
	proc_stack->ds = proc_stack->es = proc_stack->fs = SELECTOR_U_DATA;		// 用户级数据段
c000542a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000542d:	c7 40 28 33 00 00 00 	movl   $0x33,0x28(%eax)
c0005434:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005437:	8b 50 28             	mov    0x28(%eax),%edx
c000543a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000543d:	89 50 2c             	mov    %edx,0x2c(%eax)
c0005440:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005443:	8b 50 2c             	mov    0x2c(%eax),%edx
c0005446:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005449:	89 50 30             	mov    %edx,0x30(%eax)
/work/x86_os_my/userprog/process.c:33

	/* 中断栈中，上边几个是中断处理函数手动压栈的，下边几个是硬件自动压栈的 */

	proc_stack->eip = function;			// 待执行的用户程序地址
c000544c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000544f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005452:	89 50 38             	mov    %edx,0x38(%eax)
/work/x86_os_my/userprog/process.c:34
	proc_stack->cs = SELECTOR_U_CODE;	// 用户级代码段
c0005455:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005458:	c7 40 3c 2b 00 00 00 	movl   $0x2b,0x3c(%eax)
/work/x86_os_my/userprog/process.c:35
	proc_stack->eflags = (EFLAGS_IOPL_0 | EFLAGS_MBS | EFLAGS_IF_1);
c000545f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005462:	c7 40 40 02 02 00 00 	movl   $0x202,0x40(%eax)
/work/x86_os_my/userprog/process.c:44
	 * process_activate 使用户进程页表生效【已经把CR3寄存器 更新为 用户进程的页表了】
	 * start_process    为用户进程创建3特权级栈【所以申请的内存空间来自用户进程的页表】
	 * 
	 * USER_STACK3_VADDR=(0xc0000000 - 0x1000)
	 */
	proc_stack->esp = (void*)((uint32_t)get_a_page(PF_USER, USER_STACK3_VADDR) + PG_SIZE) ;
c0005469:	83 ec 08             	sub    $0x8,%esp
c000546c:	68 00 f0 ff bf       	push   $0xbffff000
c0005471:	6a 02                	push   $0x2
c0005473:	e8 97 d6 ff ff       	call   c0002b0f <get_a_page>
c0005478:	83 c4 10             	add    $0x10,%esp
c000547b:	05 00 10 00 00       	add    $0x1000,%eax
c0005480:	89 c2                	mov    %eax,%edx
c0005482:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005485:	89 50 44             	mov    %edx,0x44(%eax)
/work/x86_os_my/userprog/process.c:45
	proc_stack->ss = SELECTOR_U_DATA;
c0005488:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000548b:	c7 40 48 33 00 00 00 	movl   $0x33,0x48(%eax)
/work/x86_os_my/userprog/process.c:52
	/* 将 esp 替换为 proc_stack
	 * 通过 jmp intr_exit 那里的一系列 pop 指令和 iretd 指令，
	 * 将 proc_stack 中的数据载入 CPU 的寄存器，
	 * 从而使程序“假装”退出中断，进入特权级 3
	 */
	asm volatile ("movl %0, %%esp; jmp intr_exit" : : "g" (proc_stack) : "memory");
c0005492:	8b 65 ec             	mov    -0x14(%ebp),%esp
c0005495:	e9 06 c8 ff ff       	jmp    c0001ca0 <intr_exit>
/work/x86_os_my/userprog/process.c:53
}
c000549a:	90                   	nop
c000549b:	c9                   	leave  
c000549c:	c3                   	ret    

c000549d <page_dir_activate>:
page_dir_activate():
/work/x86_os_my/userprog/process.c:56

/* 更新CR3寄存器，激活页目录表 */
void page_dir_activate(struct task_struct* p_thread) {
c000549d:	55                   	push   %ebp
c000549e:	89 e5                	mov    %esp,%ebp
c00054a0:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/process.c:59
	
	/* 若为"内核线程",需要重新填充页表为0x100000 */
	uint32_t pagedir_phy_addr = 0x100000;	// 默认为内核的页目录物理地址,也就是内核线程所用的页目录表
c00054a3:	c7 45 f4 00 00 10 00 	movl   $0x100000,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:62
	
	/* "用户态进程"有自己的页目录表 */
	if (p_thread->pgdir != NULL) {
c00054aa:	8b 45 08             	mov    0x8(%ebp),%eax
c00054ad:	8b 40 54             	mov    0x54(%eax),%eax
c00054b0:	85 c0                	test   %eax,%eax
c00054b2:	74 15                	je     c00054c9 <page_dir_activate+0x2c>
/work/x86_os_my/userprog/process.c:63
		pagedir_phy_addr = addr_v2p((uint32_t)p_thread->pgdir);
c00054b4:	8b 45 08             	mov    0x8(%ebp),%eax
c00054b7:	8b 40 54             	mov    0x54(%eax),%eax
c00054ba:	83 ec 0c             	sub    $0xc,%esp
c00054bd:	50                   	push   %eax
c00054be:	e8 46 d8 ff ff       	call   c0002d09 <addr_v2p>
c00054c3:	83 c4 10             	add    $0x10,%esp
c00054c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:69
	}

	/* 更新页目录寄存器cr3,使新页表生效
	 * 实现进程间，虚拟地址空间的隔离。
	 */
	asm volatile ("movl %0, %%cr3" : : "r" (pagedir_phy_addr) : "memory");
c00054c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00054cc:	0f 22 d8             	mov    %eax,%cr3
/work/x86_os_my/userprog/process.c:70
}
c00054cf:	90                   	nop
c00054d0:	c9                   	leave  
c00054d1:	c3                   	ret    

c00054d2 <process_activate>:
process_activate():
/work/x86_os_my/userprog/process.c:76

/* 1.激活线程或进程的页表,【更新CR3寄存器】
 * 2.用户进程，更新tss中的esp0为进程的特权级0的栈
 * 【只有在任务调度时（中断时），才会切换页表及更新 0 级栈，因此 process_activate 是被"中断执行流"的 schedule 调用的！】
 */
void process_activate(struct task_struct* p_thread) {
c00054d2:	55                   	push   %ebp
c00054d3:	89 e5                	mov    %esp,%ebp
c00054d5:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/userprog/process.c:77
	ASSERT(p_thread != NULL);
c00054d8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00054dc:	75 19                	jne    c00054f7 <process_activate+0x25>
/work/x86_os_my/userprog/process.c:77 (discriminator 1)
c00054de:	68 dc d7 00 c0       	push   $0xc000d7dc
c00054e3:	68 98 d8 00 c0       	push   $0xc000d898
c00054e8:	6a 4d                	push   $0x4d
c00054ea:	68 ed d7 00 c0       	push   $0xc000d7ed
c00054ef:	e8 bd ce ff ff       	call   c00023b1 <panic_spin>
c00054f4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:80
	
	/* 激活该进程或线程的页目录表【重新加载了CR3】 */
	page_dir_activate(p_thread);
c00054f7:	83 ec 0c             	sub    $0xc,%esp
c00054fa:	ff 75 08             	pushl  0x8(%ebp)
c00054fd:	e8 9b ff ff ff       	call   c000549d <page_dir_activate>
c0005502:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:83

	/* 内核线程特权级本身就是0,处理器进入中断时并不会从tss中获取0特权级栈地址,故不需要更新esp0 */
	if (p_thread->pgdir != NULL) {
c0005505:	8b 45 08             	mov    0x8(%ebp),%eax
c0005508:	8b 40 54             	mov    0x54(%eax),%eax
c000550b:	85 c0                	test   %eax,%eax
c000550d:	74 0e                	je     c000551d <process_activate+0x4b>
/work/x86_os_my/userprog/process.c:86
		/* 若为用户进程,更新该进程的esp0,用于此进程被中断时保留上下文 
		 * 需要从tss中获取0特权级栈地址 */
		update_tss_esp(p_thread);	//就一行：g_tss.esp0 = (uint32_t*)((uint32_t)pthread + PG_SIZE);
c000550f:	83 ec 0c             	sub    $0xc,%esp
c0005512:	ff 75 08             	pushl  0x8(%ebp)
c0005515:	e8 f2 fc ff ff       	call   c000520c <update_tss_esp>
c000551a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:88
	}
}
c000551d:	90                   	nop
c000551e:	c9                   	leave  
c000551f:	c3                   	ret    

c0005520 <create_page_dir>:
create_page_dir():
/work/x86_os_my/userprog/process.c:97
 * 
 * 要确保用户进程，在自己的地址空间中，能够访问到内核。
 * 即：任意进程的页目录表中，用户进程占第 0~767 个页目录项，内核占第 768~1023 个页目录项。
 * 0x300 = 768
 */
uint32_t* create_page_dir(void) {
c0005520:	55                   	push   %ebp
c0005521:	89 e5                	mov    %esp,%ebp
c0005523:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/process.c:100

	/* 用户进程的页表不能让用户直接访问到,所以在内核空间来申请 */
	uint32_t* page_dir_vaddr = get_kernel_pages(1);
c0005526:	83 ec 0c             	sub    $0xc,%esp
c0005529:	6a 01                	push   $0x1
c000552b:	e8 29 d5 ff ff       	call   c0002a59 <get_kernel_pages>
c0005530:	83 c4 10             	add    $0x10,%esp
c0005533:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:101
	if (page_dir_vaddr == NULL) {
c0005536:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c000553a:	75 17                	jne    c0005553 <create_page_dir+0x33>
/work/x86_os_my/userprog/process.c:102
		console_put_str("create_page_dir: get_kernel_page failed!");
c000553c:	83 ec 0c             	sub    $0xc,%esp
c000553f:	68 00 d8 00 c0       	push   $0xc000d800
c0005544:	e8 57 f3 ff ff       	call   c00048a0 <console_put_str>
c0005549:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:103
		return NULL;
c000554c:	b8 00 00 00 00       	mov    $0x0,%eax
c0005551:	eb 43                	jmp    c0005596 <create_page_dir+0x76>
/work/x86_os_my/userprog/process.c:109
	}

	/*** 1 复制内核的页目录表  ***/
	// page_dir_vaddr + 0x300*4 是内核页目录的第768项
	// 复制的页目录项个数=1024/4
	memcpy((uint32_t*)((uint32_t)page_dir_vaddr + 0x300*4), (uint32_t*)(0xfffff000+0x300*4), 1024);
c0005553:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005556:	05 00 0c 00 00       	add    $0xc00,%eax
c000555b:	83 ec 04             	sub    $0x4,%esp
c000555e:	68 00 04 00 00       	push   $0x400
c0005563:	68 00 fc ff ff       	push   $0xfffffc00
c0005568:	50                   	push   %eax
c0005569:	e8 37 e3 ff ff       	call   c00038a5 <memcpy>
c000556e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:113

	/*** 2 更新页目录表地址 ***/
	// 页目录表地址是页目录的最后一项
	uint32_t new_page_dir_phy_addr = addr_v2p((uint32_t)page_dir_vaddr);
c0005571:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005574:	83 ec 0c             	sub    $0xc,%esp
c0005577:	50                   	push   %eax
c0005578:	e8 8c d7 ff ff       	call   c0002d09 <addr_v2p>
c000557d:	83 c4 10             	add    $0x10,%esp
c0005580:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/process.c:114
	page_dir_vaddr[1023] = new_page_dir_phy_addr | PG_US_U | PG_RW_W | PG_P_1;
c0005583:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005586:	05 fc 0f 00 00       	add    $0xffc,%eax
c000558b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000558e:	83 ca 07             	or     $0x7,%edx
c0005591:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/userprog/process.c:116

	return page_dir_vaddr;
c0005593:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/userprog/process.c:117
}
c0005596:	c9                   	leave  
c0005597:	c3                   	ret    

c0005598 <create_user_vaddr_bitmap>:
create_user_vaddr_bitmap():
/work/x86_os_my/userprog/process.c:120

/* 创建用户进程虚拟地址位图 */
void create_user_vaddr_bitmap(struct task_struct* user_prog) {
c0005598:	55                   	push   %ebp
c0005599:	89 e5                	mov    %esp,%ebp
c000559b:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/process.c:121
   user_prog->userprog_vaddr.vaddr_start = USER_VADDR_START;	// linux用户程序入口地址 0x80480000
c000559e:	8b 45 08             	mov    0x8(%ebp),%eax
c00055a1:	c7 40 60 00 80 04 08 	movl   $0x8048000,0x60(%eax)
/work/x86_os_my/userprog/process.c:122
   uint32_t bitmap_pg_cnt = DIV_ROUND_UP((0xc0000000 - USER_VADDR_START) / PG_SIZE / 8 , PG_SIZE);
c00055a8:	c7 45 f4 17 00 00 00 	movl   $0x17,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:123
   user_prog->userprog_vaddr.vaddr_bitmap.bits = get_kernel_pages(bitmap_pg_cnt);
c00055af:	83 ec 0c             	sub    $0xc,%esp
c00055b2:	ff 75 f4             	pushl  -0xc(%ebp)
c00055b5:	e8 9f d4 ff ff       	call   c0002a59 <get_kernel_pages>
c00055ba:	83 c4 10             	add    $0x10,%esp
c00055bd:	89 c2                	mov    %eax,%edx
c00055bf:	8b 45 08             	mov    0x8(%ebp),%eax
c00055c2:	89 50 5c             	mov    %edx,0x5c(%eax)
/work/x86_os_my/userprog/process.c:124
   user_prog->userprog_vaddr.vaddr_bitmap.btmp_bytes_len = (0xc0000000 - USER_VADDR_START) / PG_SIZE / 8;
c00055c5:	8b 45 08             	mov    0x8(%ebp),%eax
c00055c8:	c7 40 58 f7 6f 01 00 	movl   $0x16ff7,0x58(%eax)
/work/x86_os_my/userprog/process.c:125
   bitmap_init(&user_prog->userprog_vaddr.vaddr_bitmap);
c00055cf:	8b 45 08             	mov    0x8(%ebp),%eax
c00055d2:	83 c0 58             	add    $0x58,%eax
c00055d5:	83 ec 0c             	sub    $0xc,%esp
c00055d8:	50                   	push   %eax
c00055d9:	e8 a9 ce ff ff       	call   c0002487 <bitmap_init>
c00055de:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:126
}
c00055e1:	90                   	nop
c00055e2:	c9                   	leave  
c00055e3:	c3                   	ret    

c00055e4 <process_execute>:
process_execute():
/work/x86_os_my/userprog/process.c:129

/* 创建用户进程 */
void process_execute(void* filename, char* name) {
c00055e4:	55                   	push   %ebp
c00055e5:	89 e5                	mov    %esp,%ebp
c00055e7:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/process.c:131
   /* pcb内核的数据结构,由内核来维护进程信息,因此要在内核内存池中申请 */
   struct task_struct* thread = get_kernel_pages(1);
c00055ea:	83 ec 0c             	sub    $0xc,%esp
c00055ed:	6a 01                	push   $0x1
c00055ef:	e8 65 d4 ff ff       	call   c0002a59 <get_kernel_pages>
c00055f4:	83 c4 10             	add    $0x10,%esp
c00055f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/process.c:132
   init_thread(thread, name, default_prio);			//初始化线程PCB结构体 struct task_struct
c00055fa:	83 ec 04             	sub    $0x4,%esp
c00055fd:	6a 1f                	push   $0x1f
c00055ff:	ff 75 0c             	pushl  0xc(%ebp)
c0005602:	ff 75 f4             	pushl  -0xc(%ebp)
c0005605:	e8 24 e7 ff ff       	call   c0003d2e <init_thread>
c000560a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:133
   create_user_vaddr_bitmap(thread);				//【进程新增】创建用户进程，虚拟地址空间位图
c000560d:	83 ec 0c             	sub    $0xc,%esp
c0005610:	ff 75 f4             	pushl  -0xc(%ebp)
c0005613:	e8 80 ff ff ff       	call   c0005598 <create_user_vaddr_bitmap>
c0005618:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:134
   thread_create(thread, start_process, filename);	//初始化线程栈结构体 struct thread_stack
c000561b:	83 ec 04             	sub    $0x4,%esp
c000561e:	ff 75 08             	pushl  0x8(%ebp)
c0005621:	68 98 53 00 c0       	push   $0xc0005398
c0005626:	ff 75 f4             	pushl  -0xc(%ebp)
c0005629:	e8 89 e6 ff ff       	call   c0003cb7 <thread_create>
c000562e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:135
   thread->pgdir = create_page_dir();				//【进程新增】创建用户进程，页目录表
c0005631:	e8 ea fe ff ff       	call   c0005520 <create_page_dir>
c0005636:	89 c2                	mov    %eax,%edx
c0005638:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000563b:	89 50 54             	mov    %edx,0x54(%eax)
/work/x86_os_my/userprog/process.c:136
   block_desc_init(thread->u_block_desc);
c000563e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005641:	83 c0 64             	add    $0x64,%eax
c0005644:	83 ec 0c             	sub    $0xc,%esp
c0005647:	50                   	push   %eax
c0005648:	e8 22 e1 ff ff       	call   c000376f <block_desc_init>
c000564d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:138
   
   enum intr_status old_status = intr_disable();
c0005650:	e8 74 c3 ff ff       	call   c00019c9 <intr_disable>
c0005655:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/process.c:139
   ASSERT(!elem_find(&thread_ready_list, &thread->general_tag));
c0005658:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000565b:	83 c0 44             	add    $0x44,%eax
c000565e:	83 ec 08             	sub    $0x8,%esp
c0005661:	50                   	push   %eax
c0005662:	68 8c 21 01 c0       	push   $0xc001218c
c0005667:	e8 e0 f0 ff ff       	call   c000474c <elem_find>
c000566c:	83 c4 10             	add    $0x10,%esp
c000566f:	85 c0                	test   %eax,%eax
c0005671:	74 1c                	je     c000568f <process_execute+0xab>
/work/x86_os_my/userprog/process.c:139 (discriminator 1)
c0005673:	68 2c d8 00 c0       	push   $0xc000d82c
c0005678:	68 ac d8 00 c0       	push   $0xc000d8ac
c000567d:	68 8b 00 00 00       	push   $0x8b
c0005682:	68 ed d7 00 c0       	push   $0xc000d7ed
c0005687:	e8 25 cd ff ff       	call   c00023b1 <panic_spin>
c000568c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:140
   list_append(&thread_ready_list, &thread->general_tag);
c000568f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005692:	83 c0 44             	add    $0x44,%eax
c0005695:	83 ec 08             	sub    $0x8,%esp
c0005698:	50                   	push   %eax
c0005699:	68 8c 21 01 c0       	push   $0xc001218c
c000569e:	e8 2f f0 ff ff       	call   c00046d2 <list_append>
c00056a3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:141
   ASSERT(!elem_find(&thread_all_list, &thread->all_list_tag));
c00056a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00056a9:	83 c0 4c             	add    $0x4c,%eax
c00056ac:	83 ec 08             	sub    $0x8,%esp
c00056af:	50                   	push   %eax
c00056b0:	68 9c 21 01 c0       	push   $0xc001219c
c00056b5:	e8 92 f0 ff ff       	call   c000474c <elem_find>
c00056ba:	83 c4 10             	add    $0x10,%esp
c00056bd:	85 c0                	test   %eax,%eax
c00056bf:	74 1c                	je     c00056dd <process_execute+0xf9>
/work/x86_os_my/userprog/process.c:141 (discriminator 1)
c00056c1:	68 64 d8 00 c0       	push   $0xc000d864
c00056c6:	68 ac d8 00 c0       	push   $0xc000d8ac
c00056cb:	68 8d 00 00 00       	push   $0x8d
c00056d0:	68 ed d7 00 c0       	push   $0xc000d7ed
c00056d5:	e8 d7 cc ff ff       	call   c00023b1 <panic_spin>
c00056da:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:142
   list_append(&thread_all_list, &thread->all_list_tag);
c00056dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00056e0:	83 c0 4c             	add    $0x4c,%eax
c00056e3:	83 ec 08             	sub    $0x8,%esp
c00056e6:	50                   	push   %eax
c00056e7:	68 9c 21 01 c0       	push   $0xc001219c
c00056ec:	e8 e1 ef ff ff       	call   c00046d2 <list_append>
c00056f1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:143
   intr_set_status(old_status);
c00056f4:	83 ec 0c             	sub    $0xc,%esp
c00056f7:	ff 75 f0             	pushl  -0x10(%ebp)
c00056fa:	e8 f3 c2 ff ff       	call   c00019f2 <intr_set_status>
c00056ff:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/process.c:144
}
c0005702:	90                   	nop
c0005703:	c9                   	leave  
c0005704:	c3                   	ret    

c0005705 <getpid>:
getpid():
/work/x86_os_my/lib/user/syscall.c:53
   );							       \
   retval;						       \
})

/* 返回当前任务pid */
uint32_t getpid() {
c0005705:	55                   	push   %ebp
c0005706:	89 e5                	mov    %esp,%ebp
c0005708:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:54
	return _syscall0(SYS_GETPID);
c000570b:	b8 00 00 00 00       	mov    $0x0,%eax
c0005710:	cd 80                	int    $0x80
c0005712:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0005715:	8b 45 fc             	mov    -0x4(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:55
}
c0005718:	c9                   	leave  
c0005719:	c3                   	ret    

c000571a <write>:
write():
/work/x86_os_my/lib/user/syscall.c:58

/* 把buf中count个字符写入文件描述符fd */
uint32_t write(int32_t fd, const void* buf, uint32_t count) {
c000571a:	55                   	push   %ebp
c000571b:	89 e5                	mov    %esp,%ebp
c000571d:	53                   	push   %ebx
c000571e:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:59
	return _syscall3(SYS_WRITE, fd, buf, count);
c0005721:	b8 01 00 00 00       	mov    $0x1,%eax
c0005726:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0005729:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c000572c:	8b 55 10             	mov    0x10(%ebp),%edx
c000572f:	cd 80                	int    $0x80
c0005731:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0005734:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:60
}
c0005737:	83 c4 10             	add    $0x10,%esp
c000573a:	5b                   	pop    %ebx
c000573b:	5d                   	pop    %ebp
c000573c:	c3                   	ret    

c000573d <malloc>:
malloc():
/work/x86_os_my/lib/user/syscall.c:63

/* 申请size字节大小的内存,并返回结果 */
void* malloc(uint32_t size) {
c000573d:	55                   	push   %ebp
c000573e:	89 e5                	mov    %esp,%ebp
c0005740:	53                   	push   %ebx
c0005741:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:64
	return (void*)_syscall1(SYS_MALLOC, size);
c0005744:	b8 02 00 00 00       	mov    $0x2,%eax
c0005749:	8b 55 08             	mov    0x8(%ebp),%edx
c000574c:	89 d3                	mov    %edx,%ebx
c000574e:	cd 80                	int    $0x80
c0005750:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0005753:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:65
}
c0005756:	83 c4 10             	add    $0x10,%esp
c0005759:	5b                   	pop    %ebx
c000575a:	5d                   	pop    %ebp
c000575b:	c3                   	ret    

c000575c <free>:
free():
/work/x86_os_my/lib/user/syscall.c:68

/* 释放ptr指向的内存 */
void free(void* ptr) {
c000575c:	55                   	push   %ebp
c000575d:	89 e5                	mov    %esp,%ebp
c000575f:	53                   	push   %ebx
c0005760:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:69
	_syscall1(SYS_FREE, ptr);
c0005763:	b8 03 00 00 00       	mov    $0x3,%eax
c0005768:	8b 55 08             	mov    0x8(%ebp),%edx
c000576b:	89 d3                	mov    %edx,%ebx
c000576d:	cd 80                	int    $0x80
c000576f:	89 45 f8             	mov    %eax,-0x8(%ebp)
/work/x86_os_my/lib/user/syscall.c:70
}
c0005772:	90                   	nop
c0005773:	83 c4 10             	add    $0x10,%esp
c0005776:	5b                   	pop    %ebx
c0005777:	5d                   	pop    %ebp
c0005778:	c3                   	ret    

c0005779 <fork>:
fork():
/work/x86_os_my/lib/user/syscall.c:73

/* 派生子进程,返回子进程pid */
pid_t fork(void){
c0005779:	55                   	push   %ebp
c000577a:	89 e5                	mov    %esp,%ebp
c000577c:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:74
	return _syscall0(SYS_FORK);
c000577f:	b8 04 00 00 00       	mov    $0x4,%eax
c0005784:	cd 80                	int    $0x80
c0005786:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0005789:	8b 45 fc             	mov    -0x4(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:75
}
c000578c:	c9                   	leave  
c000578d:	c3                   	ret    

c000578e <read>:
read():
/work/x86_os_my/lib/user/syscall.c:78

/* 从文件描述符fd中读取count个字节到buf */
int32_t read(int32_t fd, void* buf, uint32_t count) {
c000578e:	55                   	push   %ebp
c000578f:	89 e5                	mov    %esp,%ebp
c0005791:	53                   	push   %ebx
c0005792:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:79
	return _syscall3(SYS_READ, fd, buf, count);
c0005795:	b8 05 00 00 00       	mov    $0x5,%eax
c000579a:	8b 5d 08             	mov    0x8(%ebp),%ebx
c000579d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c00057a0:	8b 55 10             	mov    0x10(%ebp),%edx
c00057a3:	cd 80                	int    $0x80
c00057a5:	89 45 f8             	mov    %eax,-0x8(%ebp)
c00057a8:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:80
}
c00057ab:	83 c4 10             	add    $0x10,%esp
c00057ae:	5b                   	pop    %ebx
c00057af:	5d                   	pop    %ebp
c00057b0:	c3                   	ret    

c00057b1 <putchar>:
putchar():
/work/x86_os_my/lib/user/syscall.c:83

/* 输出一个字符 */
void putchar(char char_asci) {
c00057b1:	55                   	push   %ebp
c00057b2:	89 e5                	mov    %esp,%ebp
c00057b4:	53                   	push   %ebx
c00057b5:	83 ec 14             	sub    $0x14,%esp
c00057b8:	8b 45 08             	mov    0x8(%ebp),%eax
c00057bb:	88 45 e8             	mov    %al,-0x18(%ebp)
/work/x86_os_my/lib/user/syscall.c:84
	_syscall1(SYS_PUTCHAR, char_asci);
c00057be:	b8 06 00 00 00       	mov    $0x6,%eax
c00057c3:	0f b6 55 e8          	movzbl -0x18(%ebp),%edx
c00057c7:	89 d3                	mov    %edx,%ebx
c00057c9:	cd 80                	int    $0x80
c00057cb:	89 45 f8             	mov    %eax,-0x8(%ebp)
/work/x86_os_my/lib/user/syscall.c:85
}
c00057ce:	90                   	nop
c00057cf:	83 c4 14             	add    $0x14,%esp
c00057d2:	5b                   	pop    %ebx
c00057d3:	5d                   	pop    %ebp
c00057d4:	c3                   	ret    

c00057d5 <clear>:
clear():
/work/x86_os_my/lib/user/syscall.c:88

/* 清空屏幕 */
void clear(void) {
c00057d5:	55                   	push   %ebp
c00057d6:	89 e5                	mov    %esp,%ebp
c00057d8:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:89
	_syscall0(SYS_CLEAR);
c00057db:	b8 07 00 00 00       	mov    $0x7,%eax
c00057e0:	cd 80                	int    $0x80
c00057e2:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/user/syscall.c:90
}
c00057e5:	90                   	nop
c00057e6:	c9                   	leave  
c00057e7:	c3                   	ret    

c00057e8 <getcwd>:
getcwd():
/work/x86_os_my/lib/user/syscall.c:93

/* 获取当前工作目录 */
char* getcwd(char* buf, uint32_t size) {
c00057e8:	55                   	push   %ebp
c00057e9:	89 e5                	mov    %esp,%ebp
c00057eb:	53                   	push   %ebx
c00057ec:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:94
	return (char*)_syscall2(SYS_GETCWD, buf, size);
c00057ef:	b8 08 00 00 00       	mov    $0x8,%eax
c00057f4:	8b 55 08             	mov    0x8(%ebp),%edx
c00057f7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c00057fa:	89 d3                	mov    %edx,%ebx
c00057fc:	cd 80                	int    $0x80
c00057fe:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0005801:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:95
}
c0005804:	83 c4 10             	add    $0x10,%esp
c0005807:	5b                   	pop    %ebx
c0005808:	5d                   	pop    %ebp
c0005809:	c3                   	ret    

c000580a <open>:
open():
/work/x86_os_my/lib/user/syscall.c:98

/* 以flag方式打开文件pathname */
int32_t open(char* pathname, uint8_t flag) {
c000580a:	55                   	push   %ebp
c000580b:	89 e5                	mov    %esp,%ebp
c000580d:	53                   	push   %ebx
c000580e:	83 ec 14             	sub    $0x14,%esp
c0005811:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005814:	88 45 e8             	mov    %al,-0x18(%ebp)
/work/x86_os_my/lib/user/syscall.c:99
	return _syscall2(SYS_OPEN, pathname, flag);
c0005817:	b8 09 00 00 00       	mov    $0x9,%eax
c000581c:	8b 55 08             	mov    0x8(%ebp),%edx
c000581f:	0f b6 4d e8          	movzbl -0x18(%ebp),%ecx
c0005823:	89 d3                	mov    %edx,%ebx
c0005825:	cd 80                	int    $0x80
c0005827:	89 45 f8             	mov    %eax,-0x8(%ebp)
c000582a:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:100
}
c000582d:	83 c4 14             	add    $0x14,%esp
c0005830:	5b                   	pop    %ebx
c0005831:	5d                   	pop    %ebp
c0005832:	c3                   	ret    

c0005833 <close>:
close():
/work/x86_os_my/lib/user/syscall.c:103

/* 关闭文件fd */
int32_t close(int32_t fd) {
c0005833:	55                   	push   %ebp
c0005834:	89 e5                	mov    %esp,%ebp
c0005836:	53                   	push   %ebx
c0005837:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:104
	return _syscall1(SYS_CLOSE, fd);
c000583a:	b8 0a 00 00 00       	mov    $0xa,%eax
c000583f:	8b 55 08             	mov    0x8(%ebp),%edx
c0005842:	89 d3                	mov    %edx,%ebx
c0005844:	cd 80                	int    $0x80
c0005846:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0005849:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:105
}
c000584c:	83 c4 10             	add    $0x10,%esp
c000584f:	5b                   	pop    %ebx
c0005850:	5d                   	pop    %ebp
c0005851:	c3                   	ret    

c0005852 <lseek>:
lseek():
/work/x86_os_my/lib/user/syscall.c:108

/* 设置文件偏移量 */
int32_t lseek(int32_t fd, int32_t offset, uint8_t whence) {
c0005852:	55                   	push   %ebp
c0005853:	89 e5                	mov    %esp,%ebp
c0005855:	53                   	push   %ebx
c0005856:	83 ec 14             	sub    $0x14,%esp
c0005859:	8b 45 10             	mov    0x10(%ebp),%eax
c000585c:	88 45 e8             	mov    %al,-0x18(%ebp)
/work/x86_os_my/lib/user/syscall.c:109
	return _syscall3(SYS_LSEEK, fd, offset, whence);
c000585f:	b8 0b 00 00 00       	mov    $0xb,%eax
c0005864:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0005867:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c000586a:	0f b6 55 e8          	movzbl -0x18(%ebp),%edx
c000586e:	cd 80                	int    $0x80
c0005870:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0005873:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:110
}
c0005876:	83 c4 14             	add    $0x14,%esp
c0005879:	5b                   	pop    %ebx
c000587a:	5d                   	pop    %ebp
c000587b:	c3                   	ret    

c000587c <unlink>:
unlink():
/work/x86_os_my/lib/user/syscall.c:113

/* 删除文件pathname */
int32_t unlink(const char* pathname) {
c000587c:	55                   	push   %ebp
c000587d:	89 e5                	mov    %esp,%ebp
c000587f:	53                   	push   %ebx
c0005880:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:114
	return _syscall1(SYS_UNLINK, pathname);
c0005883:	b8 0c 00 00 00       	mov    $0xc,%eax
c0005888:	8b 55 08             	mov    0x8(%ebp),%edx
c000588b:	89 d3                	mov    %edx,%ebx
c000588d:	cd 80                	int    $0x80
c000588f:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0005892:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:115
}
c0005895:	83 c4 10             	add    $0x10,%esp
c0005898:	5b                   	pop    %ebx
c0005899:	5d                   	pop    %ebp
c000589a:	c3                   	ret    

c000589b <mkdir>:
mkdir():
/work/x86_os_my/lib/user/syscall.c:118

/* 创建目录pathname */
int32_t mkdir(const char* pathname) {
c000589b:	55                   	push   %ebp
c000589c:	89 e5                	mov    %esp,%ebp
c000589e:	53                   	push   %ebx
c000589f:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:119
	return _syscall1(SYS_MKDIR, pathname);
c00058a2:	b8 0d 00 00 00       	mov    $0xd,%eax
c00058a7:	8b 55 08             	mov    0x8(%ebp),%edx
c00058aa:	89 d3                	mov    %edx,%ebx
c00058ac:	cd 80                	int    $0x80
c00058ae:	89 45 f8             	mov    %eax,-0x8(%ebp)
c00058b1:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:120
}
c00058b4:	83 c4 10             	add    $0x10,%esp
c00058b7:	5b                   	pop    %ebx
c00058b8:	5d                   	pop    %ebp
c00058b9:	c3                   	ret    

c00058ba <opendir>:
opendir():
/work/x86_os_my/lib/user/syscall.c:123

/* 打开目录name */
struct dir* opendir(const char* name) {
c00058ba:	55                   	push   %ebp
c00058bb:	89 e5                	mov    %esp,%ebp
c00058bd:	53                   	push   %ebx
c00058be:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:124
	return (struct dir*)_syscall1(SYS_OPENDIR, name);
c00058c1:	b8 0e 00 00 00       	mov    $0xe,%eax
c00058c6:	8b 55 08             	mov    0x8(%ebp),%edx
c00058c9:	89 d3                	mov    %edx,%ebx
c00058cb:	cd 80                	int    $0x80
c00058cd:	89 45 f8             	mov    %eax,-0x8(%ebp)
c00058d0:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:125
}
c00058d3:	83 c4 10             	add    $0x10,%esp
c00058d6:	5b                   	pop    %ebx
c00058d7:	5d                   	pop    %ebp
c00058d8:	c3                   	ret    

c00058d9 <closedir>:
closedir():
/work/x86_os_my/lib/user/syscall.c:128

/* 关闭目录dir */
int32_t closedir(struct dir* dir) {
c00058d9:	55                   	push   %ebp
c00058da:	89 e5                	mov    %esp,%ebp
c00058dc:	53                   	push   %ebx
c00058dd:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:129
	return _syscall1(SYS_CLOSEDIR, dir);
c00058e0:	b8 0f 00 00 00       	mov    $0xf,%eax
c00058e5:	8b 55 08             	mov    0x8(%ebp),%edx
c00058e8:	89 d3                	mov    %edx,%ebx
c00058ea:	cd 80                	int    $0x80
c00058ec:	89 45 f8             	mov    %eax,-0x8(%ebp)
c00058ef:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:130
}
c00058f2:	83 c4 10             	add    $0x10,%esp
c00058f5:	5b                   	pop    %ebx
c00058f6:	5d                   	pop    %ebp
c00058f7:	c3                   	ret    

c00058f8 <rmdir>:
rmdir():
/work/x86_os_my/lib/user/syscall.c:133

/* 删除目录pathname */
int32_t rmdir(const char* pathname) {
c00058f8:	55                   	push   %ebp
c00058f9:	89 e5                	mov    %esp,%ebp
c00058fb:	53                   	push   %ebx
c00058fc:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:134
	return _syscall1(SYS_RMDIR, pathname);
c00058ff:	b8 11 00 00 00       	mov    $0x11,%eax
c0005904:	8b 55 08             	mov    0x8(%ebp),%edx
c0005907:	89 d3                	mov    %edx,%ebx
c0005909:	cd 80                	int    $0x80
c000590b:	89 45 f8             	mov    %eax,-0x8(%ebp)
c000590e:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:135
}
c0005911:	83 c4 10             	add    $0x10,%esp
c0005914:	5b                   	pop    %ebx
c0005915:	5d                   	pop    %ebp
c0005916:	c3                   	ret    

c0005917 <readdir>:
readdir():
/work/x86_os_my/lib/user/syscall.c:138

/* 读取目录dir */
struct dir_entry* readdir(struct dir* dir) {
c0005917:	55                   	push   %ebp
c0005918:	89 e5                	mov    %esp,%ebp
c000591a:	53                   	push   %ebx
c000591b:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:139
	return (struct dir_entry*)_syscall1(SYS_READDIR, dir);
c000591e:	b8 12 00 00 00       	mov    $0x12,%eax
c0005923:	8b 55 08             	mov    0x8(%ebp),%edx
c0005926:	89 d3                	mov    %edx,%ebx
c0005928:	cd 80                	int    $0x80
c000592a:	89 45 f8             	mov    %eax,-0x8(%ebp)
c000592d:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:140
}
c0005930:	83 c4 10             	add    $0x10,%esp
c0005933:	5b                   	pop    %ebx
c0005934:	5d                   	pop    %ebp
c0005935:	c3                   	ret    

c0005936 <rewinddir>:
rewinddir():
/work/x86_os_my/lib/user/syscall.c:143

/* 回归目录指针 */
void rewinddir(struct dir* dir) {
c0005936:	55                   	push   %ebp
c0005937:	89 e5                	mov    %esp,%ebp
c0005939:	53                   	push   %ebx
c000593a:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:144
	_syscall1(SYS_REWINDDIR, dir);
c000593d:	b8 13 00 00 00       	mov    $0x13,%eax
c0005942:	8b 55 08             	mov    0x8(%ebp),%edx
c0005945:	89 d3                	mov    %edx,%ebx
c0005947:	cd 80                	int    $0x80
c0005949:	89 45 f8             	mov    %eax,-0x8(%ebp)
/work/x86_os_my/lib/user/syscall.c:145
}
c000594c:	90                   	nop
c000594d:	83 c4 10             	add    $0x10,%esp
c0005950:	5b                   	pop    %ebx
c0005951:	5d                   	pop    %ebp
c0005952:	c3                   	ret    

c0005953 <stat>:
stat():
/work/x86_os_my/lib/user/syscall.c:148

/* 获取path属性到buf中 */
int32_t stat(const char* path, struct stat* buf) {
c0005953:	55                   	push   %ebp
c0005954:	89 e5                	mov    %esp,%ebp
c0005956:	53                   	push   %ebx
c0005957:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:149
	return _syscall2(SYS_STAT, path, buf);
c000595a:	b8 14 00 00 00       	mov    $0x14,%eax
c000595f:	8b 55 08             	mov    0x8(%ebp),%edx
c0005962:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0005965:	89 d3                	mov    %edx,%ebx
c0005967:	cd 80                	int    $0x80
c0005969:	89 45 f8             	mov    %eax,-0x8(%ebp)
c000596c:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:150
}
c000596f:	83 c4 10             	add    $0x10,%esp
c0005972:	5b                   	pop    %ebx
c0005973:	5d                   	pop    %ebp
c0005974:	c3                   	ret    

c0005975 <chdir>:
chdir():
/work/x86_os_my/lib/user/syscall.c:153

/* 改变工作目录为path */
int32_t chdir(const char* path) {
c0005975:	55                   	push   %ebp
c0005976:	89 e5                	mov    %esp,%ebp
c0005978:	53                   	push   %ebx
c0005979:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:154
	return _syscall1(SYS_CHDIR, path);
c000597c:	b8 10 00 00 00       	mov    $0x10,%eax
c0005981:	8b 55 08             	mov    0x8(%ebp),%edx
c0005984:	89 d3                	mov    %edx,%ebx
c0005986:	cd 80                	int    $0x80
c0005988:	89 45 f8             	mov    %eax,-0x8(%ebp)
c000598b:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:155
}
c000598e:	83 c4 10             	add    $0x10,%esp
c0005991:	5b                   	pop    %ebx
c0005992:	5d                   	pop    %ebp
c0005993:	c3                   	ret    

c0005994 <ps>:
ps():
/work/x86_os_my/lib/user/syscall.c:158

/* 显示任务列表 */
void ps(void) {
c0005994:	55                   	push   %ebp
c0005995:	89 e5                	mov    %esp,%ebp
c0005997:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:159
	_syscall0(SYS_PS);
c000599a:	b8 15 00 00 00       	mov    $0x15,%eax
c000599f:	cd 80                	int    $0x80
c00059a1:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/lib/user/syscall.c:160
}
c00059a4:	90                   	nop
c00059a5:	c9                   	leave  
c00059a6:	c3                   	ret    

c00059a7 <execv>:
execv():
/work/x86_os_my/lib/user/syscall.c:162

int execv(const char* pathname, char** argv) {
c00059a7:	55                   	push   %ebp
c00059a8:	89 e5                	mov    %esp,%ebp
c00059aa:	53                   	push   %ebx
c00059ab:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/lib/user/syscall.c:163
	return _syscall2(SYS_EXECV, pathname, argv);
c00059ae:	b8 16 00 00 00       	mov    $0x16,%eax
c00059b3:	8b 55 08             	mov    0x8(%ebp),%edx
c00059b6:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c00059b9:	89 d3                	mov    %edx,%ebx
c00059bb:	cd 80                	int    $0x80
c00059bd:	89 45 f8             	mov    %eax,-0x8(%ebp)
c00059c0:	8b 45 f8             	mov    -0x8(%ebp),%eax
/work/x86_os_my/lib/user/syscall.c:164
}
c00059c3:	83 c4 10             	add    $0x10,%esp
c00059c6:	5b                   	pop    %ebx
c00059c7:	5d                   	pop    %ebp
c00059c8:	c3                   	ret    

c00059c9 <sys_getpid>:
sys_getpid():
/work/x86_os_my/userprog/syscall-init.c:18
#define syscall_nr 32 
typedef void* syscall;
syscall syscall_table[syscall_nr];

/* 返回当前任务的pid */
uint32_t sys_getpid(void) {
c00059c9:	55                   	push   %ebp
c00059ca:	89 e5                	mov    %esp,%ebp
c00059cc:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/userprog/syscall-init.c:19
	return running_thread()->pid;
c00059cf:	e8 66 e2 ff ff       	call   c0003c3a <running_thread>
c00059d4:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c00059d8:	98                   	cwtl   
/work/x86_os_my/userprog/syscall-init.c:20
}
c00059d9:	c9                   	leave  
c00059da:	c3                   	ret    

c00059db <syscall_init>:
syscall_init():
/work/x86_os_my/userprog/syscall-init.c:23

/* 初始化系统调用 */
void syscall_init(void) {
c00059db:	55                   	push   %ebp
c00059dc:	89 e5                	mov    %esp,%ebp
c00059de:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/userprog/syscall-init.c:24
	put_str("syscall_init start\n");
c00059e1:	83 ec 0c             	sub    $0xc,%esp
c00059e4:	68 bc d8 00 c0       	push   $0xc000d8bc
c00059e9:	e8 12 c8 ff ff       	call   c0002200 <put_str>
c00059ee:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/syscall-init.c:25
	syscall_table[SYS_GETPID]	= sys_getpid;
c00059f1:	c7 05 60 22 01 c0 c9 	movl   $0xc00059c9,0xc0012260
c00059f8:	59 00 c0 
/work/x86_os_my/userprog/syscall-init.c:26
	syscall_table[SYS_WRITE]	= sys_write;
c00059fb:	c7 05 64 22 01 c0 35 	movl   $0xc0007835,0xc0012264
c0005a02:	78 00 c0 
/work/x86_os_my/userprog/syscall-init.c:27
	syscall_table[SYS_MALLOC]	= sys_malloc;
c0005a05:	c7 05 68 22 01 c0 5c 	movl   $0xc0002d5c,0xc0012268
c0005a0c:	2d 00 c0 
/work/x86_os_my/userprog/syscall-init.c:28
	syscall_table[SYS_FREE]		= sys_free;
c0005a0f:	c7 05 6c 22 01 c0 89 	movl   $0xc0003389,0xc001226c
c0005a16:	33 00 c0 
/work/x86_os_my/userprog/syscall-init.c:29
	syscall_table[SYS_FORK]		= sys_fork;
c0005a19:	c7 05 70 22 01 c0 21 	movl   $0xc000b621,0xc0012270
c0005a20:	b6 00 c0 
/work/x86_os_my/userprog/syscall-init.c:30
	syscall_table[SYS_READ]		= sys_read;
c0005a23:	c7 05 74 22 01 c0 1e 	movl   $0xc000791e,0xc0012274
c0005a2a:	79 00 c0 
/work/x86_os_my/userprog/syscall-init.c:31
	syscall_table[SYS_PUTCHAR]	= sys_putchar;
c0005a2d:	c7 05 78 22 01 c0 bc 	movl   $0xc00089bc,0xc0012278
c0005a34:	89 00 c0 
/work/x86_os_my/userprog/syscall-init.c:32
	syscall_table[SYS_CLEAR]	= cls_screen;
c0005a37:	c7 05 7c 22 01 c0 eb 	movl   $0xc00022eb,0xc001227c
c0005a3e:	22 00 c0 
/work/x86_os_my/userprog/syscall-init.c:33
	syscall_table[SYS_GETCWD]	= sys_getcwd;
c0005a41:	c7 05 80 22 01 c0 0f 	movl   $0xc000860f,0xc0012280
c0005a48:	86 00 c0 
/work/x86_os_my/userprog/syscall-init.c:34
	syscall_table[SYS_OPEN]		= sys_open;
c0005a4b:	c7 05 84 22 01 c0 29 	movl   $0xc0007529,0xc0012284
c0005a52:	75 00 c0 
/work/x86_os_my/userprog/syscall-init.c:35
	syscall_table[SYS_CLOSE]	= sys_close;
c0005a55:	c7 05 88 22 01 c0 d6 	movl   $0xc00077d6,0xc0012288
c0005a5c:	77 00 c0 
/work/x86_os_my/userprog/syscall-init.c:36
	syscall_table[SYS_LSEEK]	= sys_lseek;
c0005a5f:	c7 05 8c 22 01 c0 02 	movl   $0xc0007a02,0xc001228c
c0005a66:	7a 00 c0 
/work/x86_os_my/userprog/syscall-init.c:37
	syscall_table[SYS_UNLINK]	= sys_unlink;
c0005a69:	c7 05 90 22 01 c0 ed 	movl   $0xc0007aed,0xc0012290
c0005a70:	7a 00 c0 
/work/x86_os_my/userprog/syscall-init.c:38
	syscall_table[SYS_MKDIR]	= sys_mkdir;
c0005a73:	c7 05 94 22 01 c0 10 	movl   $0xc0007d10,0xc0012294
c0005a7a:	7d 00 c0 
/work/x86_os_my/userprog/syscall-init.c:39
	syscall_table[SYS_OPENDIR]	= sys_opendir;
c0005a7d:	c7 05 98 22 01 c0 00 	movl   $0xc0008100,0xc0012298
c0005a84:	81 00 c0 
/work/x86_os_my/userprog/syscall-init.c:40
	syscall_table[SYS_CLOSEDIR]	= sys_closedir;
c0005a87:	c7 05 9c 22 01 c0 10 	movl   $0xc0008210,0xc001229c
c0005a8e:	82 00 c0 
/work/x86_os_my/userprog/syscall-init.c:41
	syscall_table[SYS_CHDIR]	= sys_chdir;
c0005a91:	c7 05 a0 22 01 c0 03 	movl   $0xc0008803,0xc00122a0
c0005a98:	88 00 c0 
/work/x86_os_my/userprog/syscall-init.c:42
	syscall_table[SYS_RMDIR]	= sys_rmdir;
c0005a9b:	c7 05 a4 22 01 c0 85 	movl   $0xc0008285,0xc00122a4
c0005aa2:	82 00 c0 
/work/x86_os_my/userprog/syscall-init.c:43
	syscall_table[SYS_READDIR]	= sys_readdir;
c0005aa5:	c7 05 a8 22 01 c0 3d 	movl   $0xc000823d,0xc00122a8
c0005aac:	82 00 c0 
/work/x86_os_my/userprog/syscall-init.c:44
	syscall_table[SYS_REWINDDIR]	= sys_rewinddir;
c0005aaf:	c7 05 ac 22 01 c0 75 	movl   $0xc0008275,0xc00122ac
c0005ab6:	82 00 c0 
/work/x86_os_my/userprog/syscall-init.c:45
	syscall_table[SYS_STAT]		= sys_stat;
c0005ab9:	c7 05 b0 22 01 c0 92 	movl   $0xc0008892,0xc00122b0
c0005ac0:	88 00 c0 
/work/x86_os_my/userprog/syscall-init.c:46
	syscall_table[SYS_PS]		= sys_ps;
c0005ac3:	c7 05 b4 22 01 c0 6d 	movl   $0xc000456d,0xc00122b4
c0005aca:	45 00 c0 
/work/x86_os_my/userprog/syscall-init.c:47
	syscall_table[SYS_EXECV]	= sys_execv;
c0005acd:	c7 05 b8 22 01 c0 31 	movl   $0xc000c831,0xc00122b8
c0005ad4:	c8 00 c0 
/work/x86_os_my/userprog/syscall-init.c:48
	put_str("syscall_init done\n");
c0005ad7:	83 ec 0c             	sub    $0xc,%esp
c0005ada:	68 d0 d8 00 c0       	push   $0xc000d8d0
c0005adf:	e8 1c c7 ff ff       	call   c0002200 <put_str>
c0005ae4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/syscall-init.c:49
}
c0005ae7:	90                   	nop
c0005ae8:	c9                   	leave  
c0005ae9:	c3                   	ret    

c0005aea <itoa>:
itoa():
/work/x86_os_my/lib/stdio.c:13
#define va_start(ap, v) ap = (va_list)&v	// 把ap指向第一个固定参数v
#define va_arg(ap, t) *((t*)(ap += 4))		// ap指向下一个参数并返回其值
#define va_end(ap) ap = NULL				// 清除ap

/* 将整型转换成字符(integer to ascii) */
static void itoa(uint32_t value, char** buf_ptr_addr, uint8_t base) {
c0005aea:	55                   	push   %ebp
c0005aeb:	89 e5                	mov    %esp,%ebp
c0005aed:	83 ec 28             	sub    $0x28,%esp
c0005af0:	8b 45 10             	mov    0x10(%ebp),%eax
c0005af3:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/lib/stdio.c:14
	uint32_t m = value % base;	// 求模,最先掉下来的是最低位【比如base是16代表16进制】 
c0005af6:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
c0005afa:	8b 45 08             	mov    0x8(%ebp),%eax
c0005afd:	ba 00 00 00 00       	mov    $0x0,%edx
c0005b02:	f7 f1                	div    %ecx
c0005b04:	89 55 f4             	mov    %edx,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:15
	uint32_t i = value / base;	// 取整
c0005b07:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
c0005b0b:	8b 45 08             	mov    0x8(%ebp),%eax
c0005b0e:	ba 00 00 00 00       	mov    $0x0,%edx
c0005b13:	f7 f1                	div    %ecx
c0005b15:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/stdio.c:16
	if (i) {
c0005b18:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0005b1c:	74 16                	je     c0005b34 <itoa+0x4a>
/work/x86_os_my/lib/stdio.c:17
		itoa(i, buf_ptr_addr, base);	// 如果倍数不为0则递归调用。
c0005b1e:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0005b22:	83 ec 04             	sub    $0x4,%esp
c0005b25:	50                   	push   %eax
c0005b26:	ff 75 0c             	pushl  0xc(%ebp)
c0005b29:	ff 75 f0             	pushl  -0x10(%ebp)
c0005b2c:	e8 b9 ff ff ff       	call   c0005aea <itoa>
c0005b31:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:19
	}
	if (m < 10) {	// 如果余数是0~9
c0005b34:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
c0005b38:	77 17                	ja     c0005b51 <itoa+0x67>
/work/x86_os_my/lib/stdio.c:20
		*((*buf_ptr_addr)++) = m + '0';			// 将数字0~9转换为字符'0'~'9'
c0005b3a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005b3d:	8b 00                	mov    (%eax),%eax
c0005b3f:	8d 48 01             	lea    0x1(%eax),%ecx
c0005b42:	8b 55 0c             	mov    0xc(%ebp),%edx
c0005b45:	89 0a                	mov    %ecx,(%edx)
c0005b47:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0005b4a:	83 c2 30             	add    $0x30,%edx
c0005b4d:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/stdio.c:24
	} else {		// 否则余数是A~F
		*((*buf_ptr_addr)++) = m - 10 + 'A';	// 将数字A~F转换为字符'A'~'F'
	}
}
c0005b4f:	eb 15                	jmp    c0005b66 <itoa+0x7c>
/work/x86_os_my/lib/stdio.c:22
		itoa(i, buf_ptr_addr, base);	// 如果倍数不为0则递归调用。
	}
	if (m < 10) {	// 如果余数是0~9
		*((*buf_ptr_addr)++) = m + '0';			// 将数字0~9转换为字符'0'~'9'
	} else {		// 否则余数是A~F
		*((*buf_ptr_addr)++) = m - 10 + 'A';	// 将数字A~F转换为字符'A'~'F'
c0005b51:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005b54:	8b 00                	mov    (%eax),%eax
c0005b56:	8d 48 01             	lea    0x1(%eax),%ecx
c0005b59:	8b 55 0c             	mov    0xc(%ebp),%edx
c0005b5c:	89 0a                	mov    %ecx,(%edx)
c0005b5e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0005b61:	83 c2 37             	add    $0x37,%edx
c0005b64:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/stdio.c:24
	}
}
c0005b66:	90                   	nop
c0005b67:	c9                   	leave  
c0005b68:	c3                   	ret    

c0005b69 <vsprintf>:
vsprintf():
/work/x86_os_my/lib/stdio.c:27

/* 将参数ap按照格式format输出到字符串str,并返回替换后str长度 */
uint32_t vsprintf(char* str, const char* format, va_list ap) {
c0005b69:	55                   	push   %ebp
c0005b6a:	89 e5                	mov    %esp,%ebp
c0005b6c:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/lib/stdio.c:28
	char* buf_ptr = str;
c0005b6f:	8b 45 08             	mov    0x8(%ebp),%eax
c0005b72:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/lib/stdio.c:29
	const char* index_ptr = format;
c0005b75:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005b78:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:30
	char index_char = *index_ptr;
c0005b7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005b7e:	0f b6 00             	movzbl (%eax),%eax
c0005b81:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:33
	int32_t arg_int;
	char* arg_str;
	while(index_char) {
c0005b84:	e9 43 01 00 00       	jmp    c0005ccc <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:34
		if (index_char != '%') {
c0005b89:	80 7d f3 25          	cmpb   $0x25,-0xd(%ebp)
c0005b8d:	74 21                	je     c0005bb0 <vsprintf+0x47>
/work/x86_os_my/lib/stdio.c:35
			*(buf_ptr++) = index_char;
c0005b8f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0005b92:	8d 50 01             	lea    0x1(%eax),%edx
c0005b95:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0005b98:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
c0005b9c:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/stdio.c:36
			index_char = *(++index_ptr);
c0005b9e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0005ba2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005ba5:	0f b6 00             	movzbl (%eax),%eax
c0005ba8:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:37
			continue;
c0005bab:	e9 1c 01 00 00       	jmp    c0005ccc <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:39
		}
		index_char = *(++index_ptr);	 // 得到%后面的字符
c0005bb0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0005bb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005bb7:	0f b6 00             	movzbl (%eax),%eax
c0005bba:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:40
		switch(index_char) {
c0005bbd:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c0005bc1:	83 f8 64             	cmp    $0x64,%eax
c0005bc4:	0f 84 8e 00 00 00    	je     c0005c58 <vsprintf+0xef>
c0005bca:	83 f8 64             	cmp    $0x64,%eax
c0005bcd:	7f 0a                	jg     c0005bd9 <vsprintf+0x70>
c0005bcf:	83 f8 63             	cmp    $0x63,%eax
c0005bd2:	74 60                	je     c0005c34 <vsprintf+0xcb>
c0005bd4:	e9 f3 00 00 00       	jmp    c0005ccc <vsprintf+0x163>
c0005bd9:	83 f8 73             	cmp    $0x73,%eax
c0005bdc:	74 0e                	je     c0005bec <vsprintf+0x83>
c0005bde:	83 f8 78             	cmp    $0x78,%eax
c0005be1:	0f 84 b6 00 00 00    	je     c0005c9d <vsprintf+0x134>
c0005be7:	e9 e0 00 00 00       	jmp    c0005ccc <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:42
			case 's':
			arg_str = va_arg(ap, char*);
c0005bec:	83 45 10 04          	addl   $0x4,0x10(%ebp)
c0005bf0:	8b 45 10             	mov    0x10(%ebp),%eax
c0005bf3:	8b 00                	mov    (%eax),%eax
c0005bf5:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/lib/stdio.c:43
			strcpy(buf_ptr, arg_str);
c0005bf8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0005bfb:	83 ec 08             	sub    $0x8,%esp
c0005bfe:	ff 75 e8             	pushl  -0x18(%ebp)
c0005c01:	50                   	push   %eax
c0005c02:	e8 81 dd ff ff       	call   c0003988 <strcpy>
c0005c07:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:44
			buf_ptr += strlen(arg_str);
c0005c0a:	83 ec 0c             	sub    $0xc,%esp
c0005c0d:	ff 75 e8             	pushl  -0x18(%ebp)
c0005c10:	e8 c8 dd ff ff       	call   c00039dd <strlen>
c0005c15:	83 c4 10             	add    $0x10,%esp
c0005c18:	89 c2                	mov    %eax,%edx
c0005c1a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0005c1d:	01 d0                	add    %edx,%eax
c0005c1f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/lib/stdio.c:45
			index_char = *(++index_ptr);
c0005c22:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0005c26:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005c29:	0f b6 00             	movzbl (%eax),%eax
c0005c2c:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:46
			break;
c0005c2f:	e9 98 00 00 00       	jmp    c0005ccc <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:49

			case 'c':
			*(buf_ptr++) = va_arg(ap, char);
c0005c34:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0005c37:	8d 50 01             	lea    0x1(%eax),%edx
c0005c3a:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0005c3d:	83 45 10 04          	addl   $0x4,0x10(%ebp)
c0005c41:	8b 55 10             	mov    0x10(%ebp),%edx
c0005c44:	0f b6 12             	movzbl (%edx),%edx
c0005c47:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/lib/stdio.c:50
			index_char = *(++index_ptr);
c0005c49:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0005c4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005c50:	0f b6 00             	movzbl (%eax),%eax
c0005c53:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:51
			break;
c0005c56:	eb 74                	jmp    c0005ccc <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:54

			case 'd':
			arg_int = va_arg(ap, int);
c0005c58:	83 45 10 04          	addl   $0x4,0x10(%ebp)
c0005c5c:	8b 45 10             	mov    0x10(%ebp),%eax
c0005c5f:	8b 00                	mov    (%eax),%eax
c0005c61:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/lib/stdio.c:56
			/* 若是负数, 将其转为正数后,再正数前面输出个负号'-'. */
			if (arg_int < 0) {
c0005c64:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0005c68:	79 0f                	jns    c0005c79 <vsprintf+0x110>
/work/x86_os_my/lib/stdio.c:57
				arg_int = 0 - arg_int;
c0005c6a:	f7 5d ec             	negl   -0x14(%ebp)
/work/x86_os_my/lib/stdio.c:58
				*buf_ptr++ = '-';
c0005c6d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0005c70:	8d 50 01             	lea    0x1(%eax),%edx
c0005c73:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0005c76:	c6 00 2d             	movb   $0x2d,(%eax)
/work/x86_os_my/lib/stdio.c:60
			}
			itoa(arg_int, &buf_ptr, 10); 
c0005c79:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005c7c:	83 ec 04             	sub    $0x4,%esp
c0005c7f:	6a 0a                	push   $0xa
c0005c81:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0005c84:	52                   	push   %edx
c0005c85:	50                   	push   %eax
c0005c86:	e8 5f fe ff ff       	call   c0005aea <itoa>
c0005c8b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:61
			index_char = *(++index_ptr);
c0005c8e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0005c92:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005c95:	0f b6 00             	movzbl (%eax),%eax
c0005c98:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:62
			break;
c0005c9b:	eb 2f                	jmp    c0005ccc <vsprintf+0x163>
/work/x86_os_my/lib/stdio.c:65

			case 'x':
			arg_int = va_arg(ap, int);
c0005c9d:	83 45 10 04          	addl   $0x4,0x10(%ebp)
c0005ca1:	8b 45 10             	mov    0x10(%ebp),%eax
c0005ca4:	8b 00                	mov    (%eax),%eax
c0005ca6:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/lib/stdio.c:66
			itoa(arg_int, &buf_ptr, 16); 
c0005ca9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0005cac:	83 ec 04             	sub    $0x4,%esp
c0005caf:	6a 10                	push   $0x10
c0005cb1:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0005cb4:	52                   	push   %edx
c0005cb5:	50                   	push   %eax
c0005cb6:	e8 2f fe ff ff       	call   c0005aea <itoa>
c0005cbb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:67
			index_char = *(++index_ptr); // 跳过格式字符并更新index_char
c0005cbe:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0005cc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005cc5:	0f b6 00             	movzbl (%eax),%eax
c0005cc8:	88 45 f3             	mov    %al,-0xd(%ebp)
/work/x86_os_my/lib/stdio.c:68
			break;
c0005ccb:	90                   	nop
/work/x86_os_my/lib/stdio.c:33
	char* buf_ptr = str;
	const char* index_ptr = format;
	char index_char = *index_ptr;
	int32_t arg_int;
	char* arg_str;
	while(index_char) {
c0005ccc:	80 7d f3 00          	cmpb   $0x0,-0xd(%ebp)
c0005cd0:	0f 85 b3 fe ff ff    	jne    c0005b89 <vsprintf+0x20>
/work/x86_os_my/lib/stdio.c:71
			itoa(arg_int, &buf_ptr, 16); 
			index_char = *(++index_ptr); // 跳过格式字符并更新index_char
			break;
		}
	}
	return strlen(str);
c0005cd6:	83 ec 0c             	sub    $0xc,%esp
c0005cd9:	ff 75 08             	pushl  0x8(%ebp)
c0005cdc:	e8 fc dc ff ff       	call   c00039dd <strlen>
c0005ce1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:72
}
c0005ce4:	c9                   	leave  
c0005ce5:	c3                   	ret    

c0005ce6 <sprintf>:
sprintf():
/work/x86_os_my/lib/stdio.c:75

/* 同printf不同的地方就是字符串不是写到终端,而是写到buf中 */
uint32_t sprintf(char* buf, const char* format, ...) {
c0005ce6:	55                   	push   %ebp
c0005ce7:	89 e5                	mov    %esp,%ebp
c0005ce9:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/lib/stdio.c:78
	va_list args;
	uint32_t retval;
	va_start(args, format);
c0005cec:	8d 45 0c             	lea    0xc(%ebp),%eax
c0005cef:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:79
	retval = vsprintf(buf, format, args);
c0005cf2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005cf5:	83 ec 04             	sub    $0x4,%esp
c0005cf8:	ff 75 f4             	pushl  -0xc(%ebp)
c0005cfb:	50                   	push   %eax
c0005cfc:	ff 75 08             	pushl  0x8(%ebp)
c0005cff:	e8 65 fe ff ff       	call   c0005b69 <vsprintf>
c0005d04:	83 c4 10             	add    $0x10,%esp
c0005d07:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/lib/stdio.c:80
	va_end(args);
c0005d0a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:81
	return retval;
c0005d11:	8b 45 f0             	mov    -0x10(%ebp),%eax
/work/x86_os_my/lib/stdio.c:82
}
c0005d14:	c9                   	leave  
c0005d15:	c3                   	ret    

c0005d16 <printf>:
printf():
/work/x86_os_my/lib/stdio.c:85

/* 格式化输出字符串format */
uint32_t printf(const char* format, ...) {
c0005d16:	55                   	push   %ebp
c0005d17:	89 e5                	mov    %esp,%ebp
c0005d19:	57                   	push   %edi
c0005d1a:	81 ec 14 04 00 00    	sub    $0x414,%esp
/work/x86_os_my/lib/stdio.c:87
	va_list args;
	va_start(args, format);	       // 使args指向format
c0005d20:	8d 45 08             	lea    0x8(%ebp),%eax
c0005d23:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:88
	char buf[1024] = {0};	       // 用于存储拼接后的字符串
c0005d26:	8d 95 f4 fb ff ff    	lea    -0x40c(%ebp),%edx
c0005d2c:	b8 00 00 00 00       	mov    $0x0,%eax
c0005d31:	b9 00 01 00 00       	mov    $0x100,%ecx
c0005d36:	89 d7                	mov    %edx,%edi
c0005d38:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/lib/stdio.c:89
	vsprintf(buf, format, args);
c0005d3a:	8b 45 08             	mov    0x8(%ebp),%eax
c0005d3d:	83 ec 04             	sub    $0x4,%esp
c0005d40:	ff 75 f4             	pushl  -0xc(%ebp)
c0005d43:	50                   	push   %eax
c0005d44:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c0005d4a:	50                   	push   %eax
c0005d4b:	e8 19 fe ff ff       	call   c0005b69 <vsprintf>
c0005d50:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:90
	va_end(args);
c0005d53:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/stdio.c:91
	return write(1, buf, strlen(buf));
c0005d5a:	83 ec 0c             	sub    $0xc,%esp
c0005d5d:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c0005d63:	50                   	push   %eax
c0005d64:	e8 74 dc ff ff       	call   c00039dd <strlen>
c0005d69:	83 c4 10             	add    $0x10,%esp
c0005d6c:	83 ec 04             	sub    $0x4,%esp
c0005d6f:	50                   	push   %eax
c0005d70:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c0005d76:	50                   	push   %eax
c0005d77:	6a 01                	push   $0x1
c0005d79:	e8 9c f9 ff ff       	call   c000571a <write>
c0005d7e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/stdio.c:92
}
c0005d81:	8b 7d fc             	mov    -0x4(%ebp),%edi
c0005d84:	c9                   	leave  
c0005d85:	c3                   	ret    

c0005d86 <outb>:
outb():
/work/x86_os_my/lib/kernel/io.h:17
#define __LIB_IO_H
#include "stdint.h"
//inline省去了函数调用开支

/* 向端口port写入一个字节*/
static inline void outb(uint16_t port, uint8_t data) {
c0005d86:	55                   	push   %ebp
c0005d87:	89 e5                	mov    %esp,%ebp
c0005d89:	83 ec 08             	sub    $0x8,%esp
c0005d8c:	8b 55 08             	mov    0x8(%ebp),%edx
c0005d8f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005d92:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c0005d96:	88 45 f8             	mov    %al,-0x8(%ebp)
/work/x86_os_my/lib/kernel/io.h:21
/*********************************************************
 a表示用寄存器al或ax或eax,对端口指定N表示0~255, d表示用dx存储端口号, 
 %b0表示对应al,%w1表示对应dx */ 
   asm volatile ( "outb %b0, %w1" : : "a" (data), "Nd" (port));    
c0005d99:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c0005d9d:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0005da1:	ee                   	out    %al,(%dx)
/work/x86_os_my/lib/kernel/io.h:23
/******************************************************/
}
c0005da2:	90                   	nop
c0005da3:	c9                   	leave  
c0005da4:	c3                   	ret    

c0005da5 <outsw>:
outsw():
/work/x86_os_my/lib/kernel/io.h:26

/* 将addr处起始的word_cnt个字写入端口port */
static inline void outsw(uint16_t port, const void* addr, uint32_t word_cnt) {
c0005da5:	55                   	push   %ebp
c0005da6:	89 e5                	mov    %esp,%ebp
c0005da8:	56                   	push   %esi
c0005da9:	53                   	push   %ebx
c0005daa:	83 ec 04             	sub    $0x4,%esp
c0005dad:	8b 45 08             	mov    0x8(%ebp),%eax
c0005db0:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/io.h:31
/*********************************************************
   +表示此限制即做输入又做输出.
   outsw是把ds:esi处的16位的内容写入port端口, 我们在设置段描述符时, 
   已经将ds,es,ss段的选择子都设置为相同的值了,此时不用担心数据错乱。*/
   asm volatile ("cld; rep outsw" : "+S" (addr), "+c" (word_cnt) : "d" (port));
c0005db4:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c0005db8:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0005dbb:	8b 45 10             	mov    0x10(%ebp),%eax
c0005dbe:	89 cb                	mov    %ecx,%ebx
c0005dc0:	89 de                	mov    %ebx,%esi
c0005dc2:	89 c1                	mov    %eax,%ecx
c0005dc4:	fc                   	cld    
c0005dc5:	66 f3 6f             	rep outsw %ds:(%esi),(%dx)
c0005dc8:	89 c8                	mov    %ecx,%eax
c0005dca:	89 f3                	mov    %esi,%ebx
c0005dcc:	89 5d 0c             	mov    %ebx,0xc(%ebp)
c0005dcf:	89 45 10             	mov    %eax,0x10(%ebp)
/work/x86_os_my/lib/kernel/io.h:33
/******************************************************/
}
c0005dd2:	90                   	nop
c0005dd3:	83 c4 04             	add    $0x4,%esp
c0005dd6:	5b                   	pop    %ebx
c0005dd7:	5e                   	pop    %esi
c0005dd8:	5d                   	pop    %ebp
c0005dd9:	c3                   	ret    

c0005dda <inb>:
inb():
/work/x86_os_my/lib/kernel/io.h:36

/* 将从端口port读入的一个字节返回 */
static inline uint8_t inb(uint16_t port) {
c0005dda:	55                   	push   %ebp
c0005ddb:	89 e5                	mov    %esp,%ebp
c0005ddd:	83 ec 14             	sub    $0x14,%esp
c0005de0:	8b 45 08             	mov    0x8(%ebp),%eax
c0005de3:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
/work/x86_os_my/lib/kernel/io.h:38
   uint8_t data;
   asm volatile ("inb %w1, %b0" : "=a" (data) : "Nd" (port));
c0005de7:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0005deb:	89 c2                	mov    %eax,%edx
c0005ded:	ec                   	in     (%dx),%al
c0005dee:	88 45 ff             	mov    %al,-0x1(%ebp)
/work/x86_os_my/lib/kernel/io.h:39
   return data;
c0005df1:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
/work/x86_os_my/lib/kernel/io.h:40
}
c0005df5:	c9                   	leave  
c0005df6:	c3                   	ret    

c0005df7 <insw>:
insw():
/work/x86_os_my/lib/kernel/io.h:43

/* 将从端口port读入的word_cnt个字写入addr */
static inline void insw(uint16_t port, void* addr, uint32_t word_cnt) {
c0005df7:	55                   	push   %ebp
c0005df8:	89 e5                	mov    %esp,%ebp
c0005dfa:	57                   	push   %edi
c0005dfb:	53                   	push   %ebx
c0005dfc:	83 ec 04             	sub    $0x4,%esp
c0005dff:	8b 45 08             	mov    0x8(%ebp),%eax
c0005e02:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/io.h:48
/******************************************************
   insw是将从端口port处读入的16位内容写入es:edi指向的内存,
   我们在设置段描述符时, 已经将ds,es,ss段的选择子都设置为相同的值了,
   此时不用担心数据错乱。*/
   asm volatile ("cld; rep insw" : "+D" (addr), "+c" (word_cnt) : "d" (port) : "memory");
c0005e06:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c0005e0a:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0005e0d:	8b 45 10             	mov    0x10(%ebp),%eax
c0005e10:	89 cb                	mov    %ecx,%ebx
c0005e12:	89 df                	mov    %ebx,%edi
c0005e14:	89 c1                	mov    %eax,%ecx
c0005e16:	fc                   	cld    
c0005e17:	66 f3 6d             	rep insw (%dx),%es:(%edi)
c0005e1a:	89 c8                	mov    %ecx,%eax
c0005e1c:	89 fb                	mov    %edi,%ebx
c0005e1e:	89 5d 0c             	mov    %ebx,0xc(%ebp)
c0005e21:	89 45 10             	mov    %eax,0x10(%ebp)
/work/x86_os_my/lib/kernel/io.h:50
/******************************************************/
}
c0005e24:	90                   	nop
c0005e25:	83 c4 04             	add    $0x4,%esp
c0005e28:	5b                   	pop    %ebx
c0005e29:	5f                   	pop    %edi
c0005e2a:	5d                   	pop    %ebp
c0005e2b:	c3                   	ret    

c0005e2c <select_disk>:
select_disk():
/work/x86_os_my/device/ide.c:78
} __attribute__ ((packed));


/////////////////////////////////////// ide驱动部分 ////////////////////////////////////////////////
/* 选择读写的硬盘 */
static void select_disk(struct disk* hd) {
c0005e2c:	55                   	push   %ebp
c0005e2d:	89 e5                	mov    %esp,%ebp
c0005e2f:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/device/ide.c:79
	uint8_t reg_device = BIT_DEV_MBS | BIT_DEV_LBA;
c0005e32:	c6 45 ff e0          	movb   $0xe0,-0x1(%ebp)
/work/x86_os_my/device/ide.c:80
	if (hd->dev_no == 1) {	// 若是从盘就置DEV位为1
c0005e36:	8b 45 08             	mov    0x8(%ebp),%eax
c0005e39:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
c0005e3d:	3c 01                	cmp    $0x1,%al
c0005e3f:	75 04                	jne    c0005e45 <select_disk+0x19>
/work/x86_os_my/device/ide.c:81
		reg_device |= BIT_DEV_DEV;
c0005e41:	80 4d ff 10          	orb    $0x10,-0x1(%ebp)
/work/x86_os_my/device/ide.c:83
	}
	outb(reg_dev(hd->my_channel), reg_device);
c0005e45:	0f b6 55 ff          	movzbl -0x1(%ebp),%edx
c0005e49:	8b 45 08             	mov    0x8(%ebp),%eax
c0005e4c:	8b 40 08             	mov    0x8(%eax),%eax
c0005e4f:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005e53:	83 c0 06             	add    $0x6,%eax
c0005e56:	0f b7 c0             	movzwl %ax,%eax
c0005e59:	52                   	push   %edx
c0005e5a:	50                   	push   %eax
c0005e5b:	e8 26 ff ff ff       	call   c0005d86 <outb>
c0005e60:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/ide.c:84
}
c0005e63:	90                   	nop
c0005e64:	c9                   	leave  
c0005e65:	c3                   	ret    

c0005e66 <select_sector>:
select_sector():
/work/x86_os_my/device/ide.c:87

/* 向硬盘控制器写入起始扇区地址及要读写的扇区数 */
static void select_sector(struct disk* hd, uint32_t lba, uint8_t sec_cnt) {
c0005e66:	55                   	push   %ebp
c0005e67:	89 e5                	mov    %esp,%ebp
c0005e69:	83 ec 28             	sub    $0x28,%esp
c0005e6c:	8b 45 10             	mov    0x10(%ebp),%eax
c0005e6f:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/device/ide.c:88
	ASSERT(lba <= max_lba);
c0005e72:	81 7d 0c ff 7f 02 00 	cmpl   $0x27fff,0xc(%ebp)
c0005e79:	76 19                	jbe    c0005e94 <select_sector+0x2e>
/work/x86_os_my/device/ide.c:88 (discriminator 1)
c0005e7b:	68 e4 d8 00 c0       	push   $0xc000d8e4
c0005e80:	68 7c da 00 c0       	push   $0xc000da7c
c0005e85:	6a 58                	push   $0x58
c0005e87:	68 f3 d8 00 c0       	push   $0xc000d8f3
c0005e8c:	e8 20 c5 ff ff       	call   c00023b1 <panic_spin>
c0005e91:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:89
	struct ide_channel* channel = hd->my_channel;
c0005e94:	8b 45 08             	mov    0x8(%ebp),%eax
c0005e97:	8b 40 08             	mov    0x8(%eax),%eax
c0005e9a:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/ide.c:92

	/* 写入要读写的扇区数*/
	outb(reg_sect_cnt(channel), sec_cnt);	// 如果sec_cnt为0,则表示写入256个扇区
c0005e9d:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c0005ea1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005ea4:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005ea8:	83 c0 02             	add    $0x2,%eax
c0005eab:	0f b7 c0             	movzwl %ax,%eax
c0005eae:	83 ec 08             	sub    $0x8,%esp
c0005eb1:	52                   	push   %edx
c0005eb2:	50                   	push   %eax
c0005eb3:	e8 ce fe ff ff       	call   c0005d86 <outb>
c0005eb8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:95

	/* 写入lba地址(即扇区号) */
	outb(reg_lba_l(channel), lba);			// lba地址的低8位,不用单独取出低8位.outb函数中的汇编指令outb %b0, %w1会只用al。
c0005ebb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005ebe:	0f b6 d0             	movzbl %al,%edx
c0005ec1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005ec4:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005ec8:	83 c0 03             	add    $0x3,%eax
c0005ecb:	0f b7 c0             	movzwl %ax,%eax
c0005ece:	83 ec 08             	sub    $0x8,%esp
c0005ed1:	52                   	push   %edx
c0005ed2:	50                   	push   %eax
c0005ed3:	e8 ae fe ff ff       	call   c0005d86 <outb>
c0005ed8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:96
	outb(reg_lba_m(channel), lba >> 8);		// lba地址的8~15位
c0005edb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005ede:	c1 e8 08             	shr    $0x8,%eax
c0005ee1:	0f b6 d0             	movzbl %al,%edx
c0005ee4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005ee7:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005eeb:	83 c0 04             	add    $0x4,%eax
c0005eee:	0f b7 c0             	movzwl %ax,%eax
c0005ef1:	83 ec 08             	sub    $0x8,%esp
c0005ef4:	52                   	push   %edx
c0005ef5:	50                   	push   %eax
c0005ef6:	e8 8b fe ff ff       	call   c0005d86 <outb>
c0005efb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:97
	outb(reg_lba_h(channel), lba >> 16);	// lba地址的16~23位
c0005efe:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005f01:	c1 e8 10             	shr    $0x10,%eax
c0005f04:	0f b6 d0             	movzbl %al,%edx
c0005f07:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005f0a:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005f0e:	83 c0 05             	add    $0x5,%eax
c0005f11:	0f b7 c0             	movzwl %ax,%eax
c0005f14:	83 ec 08             	sub    $0x8,%esp
c0005f17:	52                   	push   %edx
c0005f18:	50                   	push   %eax
c0005f19:	e8 68 fe ff ff       	call   c0005d86 <outb>
c0005f1e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:101

	/* 因为lba地址的24~27位要存储在device寄存器的0～3位,
	* 无法单独写入这4位,所以在此处把device寄存器再重新写入一次*/
	outb(reg_dev(channel), BIT_DEV_MBS | BIT_DEV_LBA | (hd->dev_no == 1 ? BIT_DEV_DEV : 0) | lba >> 24);
c0005f21:	8b 45 08             	mov    0x8(%ebp),%eax
c0005f24:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
c0005f28:	3c 01                	cmp    $0x1,%al
c0005f2a:	75 07                	jne    c0005f33 <select_sector+0xcd>
/work/x86_os_my/device/ide.c:101 (discriminator 1)
c0005f2c:	ba f0 ff ff ff       	mov    $0xfffffff0,%edx
c0005f31:	eb 05                	jmp    c0005f38 <select_sector+0xd2>
/work/x86_os_my/device/ide.c:101 (discriminator 2)
c0005f33:	ba e0 ff ff ff       	mov    $0xffffffe0,%edx
/work/x86_os_my/device/ide.c:101 (discriminator 4)
c0005f38:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005f3b:	c1 e8 18             	shr    $0x18,%eax
c0005f3e:	09 d0                	or     %edx,%eax
c0005f40:	0f b6 d0             	movzbl %al,%edx
c0005f43:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0005f46:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005f4a:	83 c0 06             	add    $0x6,%eax
c0005f4d:	0f b7 c0             	movzwl %ax,%eax
c0005f50:	83 ec 08             	sub    $0x8,%esp
c0005f53:	52                   	push   %edx
c0005f54:	50                   	push   %eax
c0005f55:	e8 2c fe ff ff       	call   c0005d86 <outb>
c0005f5a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:102 (discriminator 4)
}
c0005f5d:	90                   	nop
c0005f5e:	c9                   	leave  
c0005f5f:	c3                   	ret    

c0005f60 <cmd_out>:
cmd_out():
/work/x86_os_my/device/ide.c:105

/* 向通道channel发命令cmd */
static void cmd_out(struct ide_channel* channel, uint8_t cmd) {
c0005f60:	55                   	push   %ebp
c0005f61:	89 e5                	mov    %esp,%ebp
c0005f63:	83 ec 04             	sub    $0x4,%esp
c0005f66:	8b 45 0c             	mov    0xc(%ebp),%eax
c0005f69:	88 45 fc             	mov    %al,-0x4(%ebp)
/work/x86_os_my/device/ide.c:107
	/* 只要向硬盘发出了命令便将此标记置为true,硬盘中断处理程序需要根据它来判断 */
	channel->expecting_intr = true;
c0005f6c:	8b 45 08             	mov    0x8(%ebp),%eax
c0005f6f:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
/work/x86_os_my/device/ide.c:108
	outb(reg_cmd(channel), cmd);
c0005f76:	0f b6 55 fc          	movzbl -0x4(%ebp),%edx
c0005f7a:	8b 45 08             	mov    0x8(%ebp),%eax
c0005f7d:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005f81:	83 c0 07             	add    $0x7,%eax
c0005f84:	0f b7 c0             	movzwl %ax,%eax
c0005f87:	52                   	push   %edx
c0005f88:	50                   	push   %eax
c0005f89:	e8 f8 fd ff ff       	call   c0005d86 <outb>
c0005f8e:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/ide.c:109
}
c0005f91:	90                   	nop
c0005f92:	c9                   	leave  
c0005f93:	c3                   	ret    

c0005f94 <read_from_sector>:
read_from_sector():
/work/x86_os_my/device/ide.c:112

/* 硬盘读入sec_cnt个扇区的数据到buf */
static void read_from_sector(struct disk* hd, void* buf, uint8_t sec_cnt) {
c0005f94:	55                   	push   %ebp
c0005f95:	89 e5                	mov    %esp,%ebp
c0005f97:	83 ec 14             	sub    $0x14,%esp
c0005f9a:	8b 45 10             	mov    0x10(%ebp),%eax
c0005f9d:	88 45 ec             	mov    %al,-0x14(%ebp)
/work/x86_os_my/device/ide.c:114
	uint32_t size_in_byte;
	if (sec_cnt == 0) {
c0005fa0:	80 7d ec 00          	cmpb   $0x0,-0x14(%ebp)
c0005fa4:	75 09                	jne    c0005faf <read_from_sector+0x1b>
/work/x86_os_my/device/ide.c:116
		/* 因为sec_cnt是8位变量,由主调函数将其赋值时,若为256则会将最高位的1丢掉变为0 */
		size_in_byte = 256 * 512;
c0005fa6:	c7 45 fc 00 00 02 00 	movl   $0x20000,-0x4(%ebp)
c0005fad:	eb 0a                	jmp    c0005fb9 <read_from_sector+0x25>
/work/x86_os_my/device/ide.c:118
	} else { 
		size_in_byte = sec_cnt * 512; 
c0005faf:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0005fb3:	c1 e0 09             	shl    $0x9,%eax
c0005fb6:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/device/ide.c:120
	}
	insw(reg_data(hd->my_channel), buf, size_in_byte / 2);
c0005fb9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0005fbc:	d1 e8                	shr    %eax
c0005fbe:	89 c2                	mov    %eax,%edx
c0005fc0:	8b 45 08             	mov    0x8(%ebp),%eax
c0005fc3:	8b 40 08             	mov    0x8(%eax),%eax
c0005fc6:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0005fca:	0f b7 c0             	movzwl %ax,%eax
c0005fcd:	52                   	push   %edx
c0005fce:	ff 75 0c             	pushl  0xc(%ebp)
c0005fd1:	50                   	push   %eax
c0005fd2:	e8 20 fe ff ff       	call   c0005df7 <insw>
c0005fd7:	83 c4 0c             	add    $0xc,%esp
/work/x86_os_my/device/ide.c:121
}
c0005fda:	90                   	nop
c0005fdb:	c9                   	leave  
c0005fdc:	c3                   	ret    

c0005fdd <write2sector>:
write2sector():
/work/x86_os_my/device/ide.c:124

/* 将buf中sec_cnt扇区的数据写入硬盘 */
static void write2sector(struct disk* hd, void* buf, uint8_t sec_cnt) {
c0005fdd:	55                   	push   %ebp
c0005fde:	89 e5                	mov    %esp,%ebp
c0005fe0:	83 ec 14             	sub    $0x14,%esp
c0005fe3:	8b 45 10             	mov    0x10(%ebp),%eax
c0005fe6:	88 45 ec             	mov    %al,-0x14(%ebp)
/work/x86_os_my/device/ide.c:126
	uint32_t size_in_byte;
	if (sec_cnt == 0) {
c0005fe9:	80 7d ec 00          	cmpb   $0x0,-0x14(%ebp)
c0005fed:	75 09                	jne    c0005ff8 <write2sector+0x1b>
/work/x86_os_my/device/ide.c:128
		/* 因为sec_cnt是8位变量,由主调函数将其赋值时,若为256则会将最高位的1丢掉变为0 */
		size_in_byte = 256 * 512;
c0005fef:	c7 45 fc 00 00 02 00 	movl   $0x20000,-0x4(%ebp)
c0005ff6:	eb 0a                	jmp    c0006002 <write2sector+0x25>
/work/x86_os_my/device/ide.c:130
	} else { 
		size_in_byte = sec_cnt * 512; 
c0005ff8:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0005ffc:	c1 e0 09             	shl    $0x9,%eax
c0005fff:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/device/ide.c:132
	}
	outsw(reg_data(hd->my_channel), buf, size_in_byte / 2);
c0006002:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0006005:	d1 e8                	shr    %eax
c0006007:	89 c2                	mov    %eax,%edx
c0006009:	8b 45 08             	mov    0x8(%ebp),%eax
c000600c:	8b 40 08             	mov    0x8(%eax),%eax
c000600f:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0006013:	0f b7 c0             	movzwl %ax,%eax
c0006016:	52                   	push   %edx
c0006017:	ff 75 0c             	pushl  0xc(%ebp)
c000601a:	50                   	push   %eax
c000601b:	e8 85 fd ff ff       	call   c0005da5 <outsw>
c0006020:	83 c4 0c             	add    $0xc,%esp
/work/x86_os_my/device/ide.c:133
}
c0006023:	90                   	nop
c0006024:	c9                   	leave  
c0006025:	c3                   	ret    

c0006026 <busy_wait>:
busy_wait():
/work/x86_os_my/device/ide.c:136

/* 等待30秒 */
static bool busy_wait(struct disk* hd) {
c0006026:	55                   	push   %ebp
c0006027:	89 e5                	mov    %esp,%ebp
c0006029:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/ide.c:137
	struct ide_channel* channel = hd->my_channel;
c000602c:	8b 45 08             	mov    0x8(%ebp),%eax
c000602f:	8b 40 08             	mov    0x8(%eax),%eax
c0006032:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:138
	uint16_t time_limit = 30 * 1000;	// 可以等待30000毫秒
c0006035:	66 c7 45 f6 30 75    	movw   $0x7530,-0xa(%ebp)
/work/x86_os_my/device/ide.c:139
	while (time_limit -= 10 >= 0) {
c000603b:	eb 45                	jmp    c0006082 <busy_wait+0x5c>
/work/x86_os_my/device/ide.c:140
		if (!(inb(reg_status(channel)) & BIT_STAT_BSY)) {
c000603d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006040:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0006044:	83 c0 07             	add    $0x7,%eax
c0006047:	0f b7 c0             	movzwl %ax,%eax
c000604a:	50                   	push   %eax
c000604b:	e8 8a fd ff ff       	call   c0005dda <inb>
c0006050:	83 c4 04             	add    $0x4,%esp
c0006053:	84 c0                	test   %al,%al
c0006055:	78 1e                	js     c0006075 <busy_wait+0x4f>
/work/x86_os_my/device/ide.c:141
			return (inb(reg_status(channel)) & BIT_STAT_DRQ);
c0006057:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000605a:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c000605e:	83 c0 07             	add    $0x7,%eax
c0006061:	0f b7 c0             	movzwl %ax,%eax
c0006064:	50                   	push   %eax
c0006065:	e8 70 fd ff ff       	call   c0005dda <inb>
c000606a:	83 c4 04             	add    $0x4,%esp
c000606d:	0f b6 c0             	movzbl %al,%eax
c0006070:	83 e0 08             	and    $0x8,%eax
c0006073:	eb 1e                	jmp    c0006093 <busy_wait+0x6d>
/work/x86_os_my/device/ide.c:143
		} else {
			mtime_sleep(10);			// 睡眠10毫秒
c0006075:	83 ec 0c             	sub    $0xc,%esp
c0006078:	6a 0a                	push   $0xa
c000607a:	e8 74 bb ff ff       	call   c0001bf3 <mtime_sleep>
c000607f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:139

/* 等待30秒 */
static bool busy_wait(struct disk* hd) {
	struct ide_channel* channel = hd->my_channel;
	uint16_t time_limit = 30 * 1000;	// 可以等待30000毫秒
	while (time_limit -= 10 >= 0) {
c0006082:	66 83 6d f6 01       	subw   $0x1,-0xa(%ebp)
c0006087:	66 83 7d f6 00       	cmpw   $0x0,-0xa(%ebp)
c000608c:	75 af                	jne    c000603d <busy_wait+0x17>
/work/x86_os_my/device/ide.c:146
			return (inb(reg_status(channel)) & BIT_STAT_DRQ);
		} else {
			mtime_sleep(10);			// 睡眠10毫秒
		}
	}
	return false;
c000608e:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/device/ide.c:147
}
c0006093:	c9                   	leave  
c0006094:	c3                   	ret    

c0006095 <ide_read>:
ide_read():
/work/x86_os_my/device/ide.c:150

/* 从硬盘读取sec_cnt个扇区到buf */
void ide_read(struct disk* hd, uint32_t lba, void* buf, uint32_t sec_cnt) { 
c0006095:	55                   	push   %ebp
c0006096:	89 e5                	mov    %esp,%ebp
c0006098:	83 ec 58             	sub    $0x58,%esp
/work/x86_os_my/device/ide.c:151
	ASSERT(lba <= max_lba);
c000609b:	81 7d 0c ff 7f 02 00 	cmpl   $0x27fff,0xc(%ebp)
c00060a2:	76 1c                	jbe    c00060c0 <ide_read+0x2b>
/work/x86_os_my/device/ide.c:151 (discriminator 1)
c00060a4:	68 e4 d8 00 c0       	push   $0xc000d8e4
c00060a9:	68 8c da 00 c0       	push   $0xc000da8c
c00060ae:	68 97 00 00 00       	push   $0x97
c00060b3:	68 f3 d8 00 c0       	push   $0xc000d8f3
c00060b8:	e8 f4 c2 ff ff       	call   c00023b1 <panic_spin>
c00060bd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:152
	ASSERT(sec_cnt > 0);
c00060c0:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c00060c4:	75 1c                	jne    c00060e2 <ide_read+0x4d>
/work/x86_os_my/device/ide.c:152 (discriminator 1)
c00060c6:	68 00 d9 00 c0       	push   $0xc000d900
c00060cb:	68 8c da 00 c0       	push   $0xc000da8c
c00060d0:	68 98 00 00 00       	push   $0x98
c00060d5:	68 f3 d8 00 c0       	push   $0xc000d8f3
c00060da:	e8 d2 c2 ff ff       	call   c00023b1 <panic_spin>
c00060df:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:153
	lock_acquire (&hd->my_channel->lock);
c00060e2:	8b 45 08             	mov    0x8(%ebp),%eax
c00060e5:	8b 40 08             	mov    0x8(%eax),%eax
c00060e8:	83 c0 0c             	add    $0xc,%eax
c00060eb:	83 ec 0c             	sub    $0xc,%esp
c00060ee:	50                   	push   %eax
c00060ef:	e8 1b ea ff ff       	call   c0004b0f <lock_acquire>
c00060f4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:156

	/* 1 先选择操作的硬盘 */
	select_disk(hd);
c00060f7:	83 ec 0c             	sub    $0xc,%esp
c00060fa:	ff 75 08             	pushl  0x8(%ebp)
c00060fd:	e8 2a fd ff ff       	call   c0005e2c <select_disk>
c0006102:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:159

	uint32_t secs_op;		// 每次操作的扇区数
	uint32_t secs_done = 0;	// 已完成的扇区数
c0006105:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/device/ide.c:160
	while(secs_done < sec_cnt) {
c000610c:	e9 d4 00 00 00       	jmp    c00061e5 <ide_read+0x150>
/work/x86_os_my/device/ide.c:161
		if ((secs_done + 256) <= sec_cnt) {
c0006111:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006114:	05 00 01 00 00       	add    $0x100,%eax
c0006119:	3b 45 14             	cmp    0x14(%ebp),%eax
c000611c:	77 09                	ja     c0006127 <ide_read+0x92>
/work/x86_os_my/device/ide.c:162
			secs_op = 256;
c000611e:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
c0006125:	eb 09                	jmp    c0006130 <ide_read+0x9b>
/work/x86_os_my/device/ide.c:164
		} else {
			secs_op = sec_cnt - secs_done;
c0006127:	8b 45 14             	mov    0x14(%ebp),%eax
c000612a:	2b 45 f0             	sub    -0x10(%ebp),%eax
c000612d:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/ide.c:168
		}

		/* 2 写入待读入的扇区数和起始扇区号 */
		select_sector(hd, lba + secs_done, secs_op);
c0006130:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0006133:	0f b6 c0             	movzbl %al,%eax
c0006136:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0006139:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000613c:	01 ca                	add    %ecx,%edx
c000613e:	83 ec 04             	sub    $0x4,%esp
c0006141:	50                   	push   %eax
c0006142:	52                   	push   %edx
c0006143:	ff 75 08             	pushl  0x8(%ebp)
c0006146:	e8 1b fd ff ff       	call   c0005e66 <select_sector>
c000614b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:171

		/* 3 执行的命令写入reg_cmd寄存器 */
		cmd_out(hd->my_channel, CMD_READ_SECTOR);	// 准备开始读数据
c000614e:	8b 45 08             	mov    0x8(%ebp),%eax
c0006151:	8b 40 08             	mov    0x8(%eax),%eax
c0006154:	83 ec 08             	sub    $0x8,%esp
c0006157:	6a 20                	push   $0x20
c0006159:	50                   	push   %eax
c000615a:	e8 01 fe ff ff       	call   c0005f60 <cmd_out>
c000615f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:176

		/*********************   阻塞自己的时机  ***********************
		在硬盘已经开始工作(开始在内部读数据或写数据)后才能阻塞自己,现在硬盘已经开始忙了,
		将自己阻塞,等待硬盘完成读操作后通过中断处理程序唤醒自己*/
		sema_down(&hd->my_channel->disk_done);
c0006162:	8b 45 08             	mov    0x8(%ebp),%eax
c0006165:	8b 40 08             	mov    0x8(%eax),%eax
c0006168:	83 c0 2c             	add    $0x2c,%eax
c000616b:	83 ec 0c             	sub    $0xc,%esp
c000616e:	50                   	push   %eax
c000616f:	e8 f1 e7 ff ff       	call   c0004965 <sema_down>
c0006174:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:181
		/*************************************************************/

		/* 4 检测硬盘状态是否可读 */
		/* 醒来后开始执行下面代码*/
		if (!busy_wait(hd)) {	// 若失败
c0006177:	83 ec 0c             	sub    $0xc,%esp
c000617a:	ff 75 08             	pushl  0x8(%ebp)
c000617d:	e8 a4 fe ff ff       	call   c0006026 <busy_wait>
c0006182:	83 c4 10             	add    $0x10,%esp
c0006185:	85 c0                	test   %eax,%eax
c0006187:	75 33                	jne    c00061bc <ide_read+0x127>
/work/x86_os_my/device/ide.c:183
			char error[64];
			sprintf(error, "%s read sector %d failed!!!!!!\n", hd->name, lba);
c0006189:	8b 45 08             	mov    0x8(%ebp),%eax
c000618c:	ff 75 0c             	pushl  0xc(%ebp)
c000618f:	50                   	push   %eax
c0006190:	68 0c d9 00 c0       	push   $0xc000d90c
c0006195:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0006198:	50                   	push   %eax
c0006199:	e8 48 fb ff ff       	call   c0005ce6 <sprintf>
c000619e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:184
			PANIC(error);
c00061a1:	8d 45 b0             	lea    -0x50(%ebp),%eax
c00061a4:	50                   	push   %eax
c00061a5:	68 8c da 00 c0       	push   $0xc000da8c
c00061aa:	68 b8 00 00 00       	push   $0xb8
c00061af:	68 f3 d8 00 c0       	push   $0xc000d8f3
c00061b4:	e8 f8 c1 ff ff       	call   c00023b1 <panic_spin>
c00061b9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:188
		}

		/* 5 把数据从硬盘的缓冲区中读出 */
		read_from_sector(hd, (void*)((uint32_t)buf + secs_done * 512), secs_op);
c00061bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00061bf:	0f b6 c0             	movzbl %al,%eax
c00061c2:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00061c5:	89 d1                	mov    %edx,%ecx
c00061c7:	c1 e1 09             	shl    $0x9,%ecx
c00061ca:	8b 55 10             	mov    0x10(%ebp),%edx
c00061cd:	01 ca                	add    %ecx,%edx
c00061cf:	83 ec 04             	sub    $0x4,%esp
c00061d2:	50                   	push   %eax
c00061d3:	52                   	push   %edx
c00061d4:	ff 75 08             	pushl  0x8(%ebp)
c00061d7:	e8 b8 fd ff ff       	call   c0005f94 <read_from_sector>
c00061dc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:189
		secs_done += secs_op;
c00061df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00061e2:	01 45 f0             	add    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:160
	/* 1 先选择操作的硬盘 */
	select_disk(hd);

	uint32_t secs_op;		// 每次操作的扇区数
	uint32_t secs_done = 0;	// 已完成的扇区数
	while(secs_done < sec_cnt) {
c00061e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00061e8:	3b 45 14             	cmp    0x14(%ebp),%eax
c00061eb:	0f 82 20 ff ff ff    	jb     c0006111 <ide_read+0x7c>
/work/x86_os_my/device/ide.c:191

		/* 5 把数据从硬盘的缓冲区中读出 */
		read_from_sector(hd, (void*)((uint32_t)buf + secs_done * 512), secs_op);
		secs_done += secs_op;
	}
	lock_release(&hd->my_channel->lock);
c00061f1:	8b 45 08             	mov    0x8(%ebp),%eax
c00061f4:	8b 40 08             	mov    0x8(%eax),%eax
c00061f7:	83 c0 0c             	add    $0xc,%eax
c00061fa:	83 ec 0c             	sub    $0xc,%esp
c00061fd:	50                   	push   %eax
c00061fe:	e8 83 e9 ff ff       	call   c0004b86 <lock_release>
c0006203:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:192
}
c0006206:	90                   	nop
c0006207:	c9                   	leave  
c0006208:	c3                   	ret    

c0006209 <ide_write>:
ide_write():
/work/x86_os_my/device/ide.c:195

/* 将buf中sec_cnt扇区数据写入硬盘 */
void ide_write(struct disk* hd, uint32_t lba, void* buf, uint32_t sec_cnt) {
c0006209:	55                   	push   %ebp
c000620a:	89 e5                	mov    %esp,%ebp
c000620c:	83 ec 58             	sub    $0x58,%esp
/work/x86_os_my/device/ide.c:196
	ASSERT(lba <= max_lba);
c000620f:	81 7d 0c ff 7f 02 00 	cmpl   $0x27fff,0xc(%ebp)
c0006216:	76 1c                	jbe    c0006234 <ide_write+0x2b>
/work/x86_os_my/device/ide.c:196 (discriminator 1)
c0006218:	68 e4 d8 00 c0       	push   $0xc000d8e4
c000621d:	68 98 da 00 c0       	push   $0xc000da98
c0006222:	68 c4 00 00 00       	push   $0xc4
c0006227:	68 f3 d8 00 c0       	push   $0xc000d8f3
c000622c:	e8 80 c1 ff ff       	call   c00023b1 <panic_spin>
c0006231:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:197
	ASSERT(sec_cnt > 0);
c0006234:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0006238:	75 1c                	jne    c0006256 <ide_write+0x4d>
/work/x86_os_my/device/ide.c:197 (discriminator 1)
c000623a:	68 00 d9 00 c0       	push   $0xc000d900
c000623f:	68 98 da 00 c0       	push   $0xc000da98
c0006244:	68 c5 00 00 00       	push   $0xc5
c0006249:	68 f3 d8 00 c0       	push   $0xc000d8f3
c000624e:	e8 5e c1 ff ff       	call   c00023b1 <panic_spin>
c0006253:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:198
	lock_acquire (&hd->my_channel->lock);
c0006256:	8b 45 08             	mov    0x8(%ebp),%eax
c0006259:	8b 40 08             	mov    0x8(%eax),%eax
c000625c:	83 c0 0c             	add    $0xc,%eax
c000625f:	83 ec 0c             	sub    $0xc,%esp
c0006262:	50                   	push   %eax
c0006263:	e8 a7 e8 ff ff       	call   c0004b0f <lock_acquire>
c0006268:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:201

	/* 1 先选择操作的硬盘 */
	select_disk(hd);
c000626b:	83 ec 0c             	sub    $0xc,%esp
c000626e:	ff 75 08             	pushl  0x8(%ebp)
c0006271:	e8 b6 fb ff ff       	call   c0005e2c <select_disk>
c0006276:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:204

	uint32_t secs_op;		// 每次操作的扇区数
	uint32_t secs_done = 0;	// 已完成的扇区数
c0006279:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/device/ide.c:205
	while(secs_done < sec_cnt) {
c0006280:	e9 d4 00 00 00       	jmp    c0006359 <ide_write+0x150>
/work/x86_os_my/device/ide.c:206
		if ((secs_done + 256) <= sec_cnt) {
c0006285:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006288:	05 00 01 00 00       	add    $0x100,%eax
c000628d:	3b 45 14             	cmp    0x14(%ebp),%eax
c0006290:	77 09                	ja     c000629b <ide_write+0x92>
/work/x86_os_my/device/ide.c:207
			secs_op = 256;
c0006292:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
c0006299:	eb 09                	jmp    c00062a4 <ide_write+0x9b>
/work/x86_os_my/device/ide.c:209
		} else {
			secs_op = sec_cnt - secs_done;
c000629b:	8b 45 14             	mov    0x14(%ebp),%eax
c000629e:	2b 45 f0             	sub    -0x10(%ebp),%eax
c00062a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/ide.c:213
		}

		/* 2 写入待写入的扇区数和起始扇区号 */
		select_sector(hd, lba + secs_done, secs_op);
c00062a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00062a7:	0f b6 c0             	movzbl %al,%eax
c00062aa:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c00062ad:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00062b0:	01 ca                	add    %ecx,%edx
c00062b2:	83 ec 04             	sub    $0x4,%esp
c00062b5:	50                   	push   %eax
c00062b6:	52                   	push   %edx
c00062b7:	ff 75 08             	pushl  0x8(%ebp)
c00062ba:	e8 a7 fb ff ff       	call   c0005e66 <select_sector>
c00062bf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:216

		/* 3 执行的命令写入reg_cmd寄存器 */
		cmd_out(hd->my_channel, CMD_WRITE_SECTOR);	// 准备开始写数据
c00062c2:	8b 45 08             	mov    0x8(%ebp),%eax
c00062c5:	8b 40 08             	mov    0x8(%eax),%eax
c00062c8:	83 ec 08             	sub    $0x8,%esp
c00062cb:	6a 30                	push   $0x30
c00062cd:	50                   	push   %eax
c00062ce:	e8 8d fc ff ff       	call   c0005f60 <cmd_out>
c00062d3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:219

		/* 4 检测硬盘状态是否可读 */
		if (!busy_wait(hd)) {	// 若失败
c00062d6:	83 ec 0c             	sub    $0xc,%esp
c00062d9:	ff 75 08             	pushl  0x8(%ebp)
c00062dc:	e8 45 fd ff ff       	call   c0006026 <busy_wait>
c00062e1:	83 c4 10             	add    $0x10,%esp
c00062e4:	85 c0                	test   %eax,%eax
c00062e6:	75 33                	jne    c000631b <ide_write+0x112>
/work/x86_os_my/device/ide.c:221
			char error[64];
			sprintf(error, "%s write sector %d failed!!!!!!\n", hd->name, lba);
c00062e8:	8b 45 08             	mov    0x8(%ebp),%eax
c00062eb:	ff 75 0c             	pushl  0xc(%ebp)
c00062ee:	50                   	push   %eax
c00062ef:	68 2c d9 00 c0       	push   $0xc000d92c
c00062f4:	8d 45 b0             	lea    -0x50(%ebp),%eax
c00062f7:	50                   	push   %eax
c00062f8:	e8 e9 f9 ff ff       	call   c0005ce6 <sprintf>
c00062fd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:222
			PANIC(error);
c0006300:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0006303:	50                   	push   %eax
c0006304:	68 98 da 00 c0       	push   $0xc000da98
c0006309:	68 de 00 00 00       	push   $0xde
c000630e:	68 f3 d8 00 c0       	push   $0xc000d8f3
c0006313:	e8 99 c0 ff ff       	call   c00023b1 <panic_spin>
c0006318:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:226
		}

		/* 5 将数据写入硬盘 */
		write2sector(hd, (void*)((uint32_t)buf + secs_done * 512), secs_op);
c000631b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000631e:	0f b6 c0             	movzbl %al,%eax
c0006321:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0006324:	89 d1                	mov    %edx,%ecx
c0006326:	c1 e1 09             	shl    $0x9,%ecx
c0006329:	8b 55 10             	mov    0x10(%ebp),%edx
c000632c:	01 ca                	add    %ecx,%edx
c000632e:	83 ec 04             	sub    $0x4,%esp
c0006331:	50                   	push   %eax
c0006332:	52                   	push   %edx
c0006333:	ff 75 08             	pushl  0x8(%ebp)
c0006336:	e8 a2 fc ff ff       	call   c0005fdd <write2sector>
c000633b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:229

		/* 在硬盘响应期间阻塞自己 */
		sema_down(&hd->my_channel->disk_done);
c000633e:	8b 45 08             	mov    0x8(%ebp),%eax
c0006341:	8b 40 08             	mov    0x8(%eax),%eax
c0006344:	83 c0 2c             	add    $0x2c,%eax
c0006347:	83 ec 0c             	sub    $0xc,%esp
c000634a:	50                   	push   %eax
c000634b:	e8 15 e6 ff ff       	call   c0004965 <sema_down>
c0006350:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:230
		secs_done += secs_op;
c0006353:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0006356:	01 45 f0             	add    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:205
	/* 1 先选择操作的硬盘 */
	select_disk(hd);

	uint32_t secs_op;		// 每次操作的扇区数
	uint32_t secs_done = 0;	// 已完成的扇区数
	while(secs_done < sec_cnt) {
c0006359:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000635c:	3b 45 14             	cmp    0x14(%ebp),%eax
c000635f:	0f 82 20 ff ff ff    	jb     c0006285 <ide_write+0x7c>
/work/x86_os_my/device/ide.c:233
		/* 在硬盘响应期间阻塞自己 */
		sema_down(&hd->my_channel->disk_done);
		secs_done += secs_op;
	}
	/* 醒来后开始释放锁*/
	lock_release(&hd->my_channel->lock);
c0006365:	8b 45 08             	mov    0x8(%ebp),%eax
c0006368:	8b 40 08             	mov    0x8(%eax),%eax
c000636b:	83 c0 0c             	add    $0xc,%eax
c000636e:	83 ec 0c             	sub    $0xc,%esp
c0006371:	50                   	push   %eax
c0006372:	e8 0f e8 ff ff       	call   c0004b86 <lock_release>
c0006377:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:234
}
c000637a:	90                   	nop
c000637b:	c9                   	leave  
c000637c:	c3                   	ret    

c000637d <swap_pairs_bytes>:
swap_pairs_bytes():
/work/x86_os_my/device/ide.c:238

/////////////////////////////////////// 读取分区表部分 ////////////////////////////////////////////////
/* 将dst中len个相邻字节交换位置后存入buf */
static void swap_pairs_bytes(const char* dst, char* buf, uint32_t len) {
c000637d:	55                   	push   %ebp
c000637e:	89 e5                	mov    %esp,%ebp
c0006380:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/device/ide.c:240
	uint8_t idx;
	for (idx = 0; idx < len; idx += 2) {
c0006383:	c6 45 ff 00          	movb   $0x0,-0x1(%ebp)
c0006387:	eb 37                	jmp    c00063c0 <swap_pairs_bytes+0x43>
/work/x86_os_my/device/ide.c:242 (discriminator 3)
		/* buf中存储dst中两相邻元素交换位置后的字符串*/
		buf[idx + 1] = *dst++;
c0006389:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
c000638d:	8d 50 01             	lea    0x1(%eax),%edx
c0006390:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006393:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
c0006396:	8b 45 08             	mov    0x8(%ebp),%eax
c0006399:	8d 50 01             	lea    0x1(%eax),%edx
c000639c:	89 55 08             	mov    %edx,0x8(%ebp)
c000639f:	0f b6 00             	movzbl (%eax),%eax
c00063a2:	88 01                	mov    %al,(%ecx)
/work/x86_os_my/device/ide.c:243 (discriminator 3)
		buf[idx]     = *dst++;
c00063a4:	0f b6 55 ff          	movzbl -0x1(%ebp),%edx
c00063a8:	8b 45 0c             	mov    0xc(%ebp),%eax
c00063ab:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
c00063ae:	8b 45 08             	mov    0x8(%ebp),%eax
c00063b1:	8d 50 01             	lea    0x1(%eax),%edx
c00063b4:	89 55 08             	mov    %edx,0x8(%ebp)
c00063b7:	0f b6 00             	movzbl (%eax),%eax
c00063ba:	88 01                	mov    %al,(%ecx)
/work/x86_os_my/device/ide.c:240 (discriminator 3)

/////////////////////////////////////// 读取分区表部分 ////////////////////////////////////////////////
/* 将dst中len个相邻字节交换位置后存入buf */
static void swap_pairs_bytes(const char* dst, char* buf, uint32_t len) {
	uint8_t idx;
	for (idx = 0; idx < len; idx += 2) {
c00063bc:	80 45 ff 02          	addb   $0x2,-0x1(%ebp)
/work/x86_os_my/device/ide.c:240 (discriminator 1)
c00063c0:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
c00063c4:	3b 45 10             	cmp    0x10(%ebp),%eax
c00063c7:	72 c0                	jb     c0006389 <swap_pairs_bytes+0xc>
/work/x86_os_my/device/ide.c:245
		/* buf中存储dst中两相邻元素交换位置后的字符串*/
		buf[idx + 1] = *dst++;
		buf[idx]     = *dst++;
	}
	buf[idx] = '\0';
c00063c9:	0f b6 55 ff          	movzbl -0x1(%ebp),%edx
c00063cd:	8b 45 0c             	mov    0xc(%ebp),%eax
c00063d0:	01 d0                	add    %edx,%eax
c00063d2:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/device/ide.c:246
}
c00063d5:	90                   	nop
c00063d6:	c9                   	leave  
c00063d7:	c3                   	ret    

c00063d8 <identify_disk>:
identify_disk():
/work/x86_os_my/device/ide.c:249

/* 获得硬盘参数信息 */
static void identify_disk(struct disk* hd) {
c00063d8:	55                   	push   %ebp
c00063d9:	89 e5                	mov    %esp,%ebp
c00063db:	81 ec 98 02 00 00    	sub    $0x298,%esp
/work/x86_os_my/device/ide.c:251
	char id_info[512];
	select_disk(hd);
c00063e1:	ff 75 08             	pushl  0x8(%ebp)
c00063e4:	e8 43 fa ff ff       	call   c0005e2c <select_disk>
c00063e9:	83 c4 04             	add    $0x4,%esp
/work/x86_os_my/device/ide.c:252
	cmd_out(hd->my_channel, CMD_IDENTIFY);
c00063ec:	8b 45 08             	mov    0x8(%ebp),%eax
c00063ef:	8b 40 08             	mov    0x8(%eax),%eax
c00063f2:	68 ec 00 00 00       	push   $0xec
c00063f7:	50                   	push   %eax
c00063f8:	e8 63 fb ff ff       	call   c0005f60 <cmd_out>
c00063fd:	83 c4 08             	add    $0x8,%esp
/work/x86_os_my/device/ide.c:255
	/* 向硬盘发送指令后便通过信号量阻塞自己,
	* 待硬盘处理完成后,通过中断处理程序将自己唤醒 */
	sema_down(&hd->my_channel->disk_done);
c0006400:	8b 45 08             	mov    0x8(%ebp),%eax
c0006403:	8b 40 08             	mov    0x8(%eax),%eax
c0006406:	83 c0 2c             	add    $0x2c,%eax
c0006409:	83 ec 0c             	sub    $0xc,%esp
c000640c:	50                   	push   %eax
c000640d:	e8 53 e5 ff ff       	call   c0004965 <sema_down>
c0006412:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:258

	/* 醒来后开始执行下面代码*/
	if (!busy_wait(hd)) {     //  若失败
c0006415:	83 ec 0c             	sub    $0xc,%esp
c0006418:	ff 75 08             	pushl  0x8(%ebp)
c000641b:	e8 06 fc ff ff       	call   c0006026 <busy_wait>
c0006420:	83 c4 10             	add    $0x10,%esp
c0006423:	85 c0                	test   %eax,%eax
c0006425:	75 39                	jne    c0006460 <identify_disk+0x88>
/work/x86_os_my/device/ide.c:260
		char error[64];
		sprintf(error, "%s identify failed!!!!!!\n", hd->name);
c0006427:	8b 45 08             	mov    0x8(%ebp),%eax
c000642a:	83 ec 04             	sub    $0x4,%esp
c000642d:	50                   	push   %eax
c000642e:	68 4d d9 00 c0       	push   $0xc000d94d
c0006433:	8d 85 70 fd ff ff    	lea    -0x290(%ebp),%eax
c0006439:	50                   	push   %eax
c000643a:	e8 a7 f8 ff ff       	call   c0005ce6 <sprintf>
c000643f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:261
		PANIC(error);
c0006442:	8d 85 70 fd ff ff    	lea    -0x290(%ebp),%eax
c0006448:	50                   	push   %eax
c0006449:	68 a4 da 00 c0       	push   $0xc000daa4
c000644e:	68 05 01 00 00       	push   $0x105
c0006453:	68 f3 d8 00 c0       	push   $0xc000d8f3
c0006458:	e8 54 bf ff ff       	call   c00023b1 <panic_spin>
c000645d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:263
	}
	read_from_sector(hd, id_info, 1);
c0006460:	83 ec 04             	sub    $0x4,%esp
c0006463:	6a 01                	push   $0x1
c0006465:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
c000646b:	50                   	push   %eax
c000646c:	ff 75 08             	pushl  0x8(%ebp)
c000646f:	e8 20 fb ff ff       	call   c0005f94 <read_from_sector>
c0006474:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:266

	char buf[64];
	uint8_t sn_start = 10 * 2, sn_len = 20, md_start = 27 * 2, md_len = 40;
c0006477:	c6 45 f7 14          	movb   $0x14,-0x9(%ebp)
c000647b:	c6 45 f6 14          	movb   $0x14,-0xa(%ebp)
c000647f:	c6 45 f5 36          	movb   $0x36,-0xb(%ebp)
c0006483:	c6 45 f4 28          	movb   $0x28,-0xc(%ebp)
/work/x86_os_my/device/ide.c:267
	swap_pairs_bytes(&id_info[sn_start], buf, sn_len);
c0006487:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c000648b:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c000648f:	8d 8d f0 fd ff ff    	lea    -0x210(%ebp),%ecx
c0006495:	01 ca                	add    %ecx,%edx
c0006497:	83 ec 04             	sub    $0x4,%esp
c000649a:	50                   	push   %eax
c000649b:	8d 85 b0 fd ff ff    	lea    -0x250(%ebp),%eax
c00064a1:	50                   	push   %eax
c00064a2:	52                   	push   %edx
c00064a3:	e8 d5 fe ff ff       	call   c000637d <swap_pairs_bytes>
c00064a8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:268
	printk("   disk %s info:\n      SN: %s\n", hd->name, buf);
c00064ab:	8b 45 08             	mov    0x8(%ebp),%eax
c00064ae:	83 ec 04             	sub    $0x4,%esp
c00064b1:	8d 95 b0 fd ff ff    	lea    -0x250(%ebp),%edx
c00064b7:	52                   	push   %edx
c00064b8:	50                   	push   %eax
c00064b9:	68 68 d9 00 c0       	push   $0xc000d968
c00064be:	e8 4b 06 00 00       	call   c0006b0e <printk>
c00064c3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:269
	memset(buf, 0, sizeof(buf));
c00064c6:	83 ec 04             	sub    $0x4,%esp
c00064c9:	6a 40                	push   $0x40
c00064cb:	6a 00                	push   $0x0
c00064cd:	8d 85 b0 fd ff ff    	lea    -0x250(%ebp),%eax
c00064d3:	50                   	push   %eax
c00064d4:	e8 7a d3 ff ff       	call   c0003853 <memset>
c00064d9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:270
	swap_pairs_bytes(&id_info[md_start], buf, md_len);
c00064dc:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c00064e0:	0f b6 55 f5          	movzbl -0xb(%ebp),%edx
c00064e4:	8d 8d f0 fd ff ff    	lea    -0x210(%ebp),%ecx
c00064ea:	01 ca                	add    %ecx,%edx
c00064ec:	83 ec 04             	sub    $0x4,%esp
c00064ef:	50                   	push   %eax
c00064f0:	8d 85 b0 fd ff ff    	lea    -0x250(%ebp),%eax
c00064f6:	50                   	push   %eax
c00064f7:	52                   	push   %edx
c00064f8:	e8 80 fe ff ff       	call   c000637d <swap_pairs_bytes>
c00064fd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:271
	printk("      MODULE: %s\n", buf);
c0006500:	83 ec 08             	sub    $0x8,%esp
c0006503:	8d 85 b0 fd ff ff    	lea    -0x250(%ebp),%eax
c0006509:	50                   	push   %eax
c000650a:	68 87 d9 00 c0       	push   $0xc000d987
c000650f:	e8 fa 05 00 00       	call   c0006b0e <printk>
c0006514:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:272
	uint32_t sectors = *(uint32_t*)&id_info[60 * 2];
c0006517:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
c000651d:	83 c0 78             	add    $0x78,%eax
c0006520:	8b 00                	mov    (%eax),%eax
c0006522:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:273
	printk("      SECTORS: %d\n", sectors);
c0006525:	83 ec 08             	sub    $0x8,%esp
c0006528:	ff 75 f0             	pushl  -0x10(%ebp)
c000652b:	68 99 d9 00 c0       	push   $0xc000d999
c0006530:	e8 d9 05 00 00       	call   c0006b0e <printk>
c0006535:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:274
	printk("      CAPACITY: %dMB\n", sectors * 512 / 1024 / 1024);
c0006538:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000653b:	c1 e0 09             	shl    $0x9,%eax
c000653e:	c1 e8 14             	shr    $0x14,%eax
c0006541:	83 ec 08             	sub    $0x8,%esp
c0006544:	50                   	push   %eax
c0006545:	68 ac d9 00 c0       	push   $0xc000d9ac
c000654a:	e8 bf 05 00 00       	call   c0006b0e <printk>
c000654f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:275
}
c0006552:	90                   	nop
c0006553:	c9                   	leave  
c0006554:	c3                   	ret    

c0006555 <partition_scan>:
partition_scan():
/work/x86_os_my/device/ide.c:278

/* 扫描硬盘hd中地址为ext_lba的扇区中的所有分区 */
static void partition_scan(struct disk* hd, uint32_t ext_lba) {
c0006555:	55                   	push   %ebp
c0006556:	89 e5                	mov    %esp,%ebp
c0006558:	53                   	push   %ebx
c0006559:	83 ec 14             	sub    $0x14,%esp
/work/x86_os_my/device/ide.c:279
	struct boot_sector* bs = sys_malloc(sizeof(struct boot_sector));
c000655c:	83 ec 0c             	sub    $0xc,%esp
c000655f:	68 00 02 00 00       	push   $0x200
c0006564:	e8 f3 c7 ff ff       	call   c0002d5c <sys_malloc>
c0006569:	83 c4 10             	add    $0x10,%esp
c000656c:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/device/ide.c:280
	ide_read(hd, ext_lba, bs, 1);
c000656f:	6a 01                	push   $0x1
c0006571:	ff 75 ec             	pushl  -0x14(%ebp)
c0006574:	ff 75 0c             	pushl  0xc(%ebp)
c0006577:	ff 75 08             	pushl  0x8(%ebp)
c000657a:	e8 16 fb ff ff       	call   c0006095 <ide_read>
c000657f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:281
	uint8_t part_idx = 0;
c0006582:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/device/ide.c:282
	struct partition_table_entry* p = bs->partition_table;
c0006586:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0006589:	05 be 01 00 00       	add    $0x1be,%eax
c000658e:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:285

	/* 遍历分区表4个分区表项 */
	while (part_idx++ < 4) {
c0006591:	e9 53 02 00 00       	jmp    c00067e9 <partition_scan+0x294>
/work/x86_os_my/device/ide.c:286
		if (p->fs_type == 0x5) {	// 若为扩展分区
c0006596:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006599:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c000659d:	3c 05                	cmp    $0x5,%al
c000659f:	75 50                	jne    c00065f1 <partition_scan+0x9c>
/work/x86_os_my/device/ide.c:287
			if (ext_lba_base != 0) {
c00065a1:	a1 0c 16 01 c0       	mov    0xc001160c,%eax
c00065a6:	85 c0                	test   %eax,%eax
c00065a8:	74 22                	je     c00065cc <partition_scan+0x77>
/work/x86_os_my/device/ide.c:289
				/* 子扩展分区的start_lba是相对于主引导扇区中的总扩展分区地址 */
				partition_scan(hd, p->start_lba + ext_lba_base);
c00065aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00065ad:	8b 40 08             	mov    0x8(%eax),%eax
c00065b0:	8b 15 0c 16 01 c0    	mov    0xc001160c,%edx
c00065b6:	01 d0                	add    %edx,%eax
c00065b8:	83 ec 08             	sub    $0x8,%esp
c00065bb:	50                   	push   %eax
c00065bc:	ff 75 08             	pushl  0x8(%ebp)
c00065bf:	e8 91 ff ff ff       	call   c0006555 <partition_scan>
c00065c4:	83 c4 10             	add    $0x10,%esp
c00065c7:	e9 19 02 00 00       	jmp    c00067e5 <partition_scan+0x290>
/work/x86_os_my/device/ide.c:292
			} else {	// ext_lba_base为0表示是第一次读取引导块,也就是主引导记录所在的扇区
				/* 记录下扩展分区的起始lba地址,后面所有的扩展分区地址都相对于此 */
				ext_lba_base = p->start_lba;
c00065cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00065cf:	8b 40 08             	mov    0x8(%eax),%eax
c00065d2:	a3 0c 16 01 c0       	mov    %eax,0xc001160c
/work/x86_os_my/device/ide.c:293
				partition_scan(hd, p->start_lba);
c00065d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00065da:	8b 40 08             	mov    0x8(%eax),%eax
c00065dd:	83 ec 08             	sub    $0x8,%esp
c00065e0:	50                   	push   %eax
c00065e1:	ff 75 08             	pushl  0x8(%ebp)
c00065e4:	e8 6c ff ff ff       	call   c0006555 <partition_scan>
c00065e9:	83 c4 10             	add    $0x10,%esp
c00065ec:	e9 f4 01 00 00       	jmp    c00067e5 <partition_scan+0x290>
/work/x86_os_my/device/ide.c:295
			}
		} else if (p->fs_type != 0) {	// 若是有效的分区类型
c00065f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00065f4:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c00065f8:	84 c0                	test   %al,%al
c00065fa:	0f 84 e5 01 00 00    	je     c00067e5 <partition_scan+0x290>
/work/x86_os_my/device/ide.c:296
			if (ext_lba == 0) {	// 此时全是主分区
c0006600:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0006604:	0f 85 f9 00 00 00    	jne    c0006703 <partition_scan+0x1ae>
/work/x86_os_my/device/ide.c:297
				hd->prim_parts[p_no].start_lba = ext_lba + p->start_lba;
c000660a:	0f b6 05 10 16 01 c0 	movzbl 0xc0011610,%eax
c0006611:	0f b6 c8             	movzbl %al,%ecx
c0006614:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006617:	8b 50 08             	mov    0x8(%eax),%edx
c000661a:	8b 45 0c             	mov    0xc(%ebp),%eax
c000661d:	01 c2                	add    %eax,%edx
c000661f:	8b 45 08             	mov    0x8(%ebp),%eax
c0006622:	c1 e1 06             	shl    $0x6,%ecx
c0006625:	01 c8                	add    %ecx,%eax
c0006627:	83 c0 10             	add    $0x10,%eax
c000662a:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/device/ide.c:298
				hd->prim_parts[p_no].sec_cnt = p->sec_cnt;
c000662c:	0f b6 05 10 16 01 c0 	movzbl 0xc0011610,%eax
c0006633:	0f b6 c8             	movzbl %al,%ecx
c0006636:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006639:	8b 40 0c             	mov    0xc(%eax),%eax
c000663c:	8b 55 08             	mov    0x8(%ebp),%edx
c000663f:	c1 e1 06             	shl    $0x6,%ecx
c0006642:	01 ca                	add    %ecx,%edx
c0006644:	83 c2 14             	add    $0x14,%edx
c0006647:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/device/ide.c:299
				hd->prim_parts[p_no].my_disk = hd;
c0006649:	0f b6 05 10 16 01 c0 	movzbl 0xc0011610,%eax
c0006650:	0f b6 d0             	movzbl %al,%edx
c0006653:	8b 45 08             	mov    0x8(%ebp),%eax
c0006656:	c1 e2 06             	shl    $0x6,%edx
c0006659:	01 d0                	add    %edx,%eax
c000665b:	8d 50 18             	lea    0x18(%eax),%edx
c000665e:	8b 45 08             	mov    0x8(%ebp),%eax
c0006661:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/device/ide.c:300
				list_append(&partition_list, &hd->prim_parts[p_no].part_tag);
c0006663:	0f b6 05 10 16 01 c0 	movzbl 0xc0011610,%eax
c000666a:	0f b6 c0             	movzbl %al,%eax
c000666d:	c1 e0 06             	shl    $0x6,%eax
c0006670:	8d 50 10             	lea    0x10(%eax),%edx
c0006673:	8b 45 08             	mov    0x8(%ebp),%eax
c0006676:	01 d0                	add    %edx,%eax
c0006678:	83 c0 0c             	add    $0xc,%eax
c000667b:	83 ec 08             	sub    $0x8,%esp
c000667e:	50                   	push   %eax
c000667f:	68 c0 2f 01 c0       	push   $0xc0012fc0
c0006684:	e8 49 e0 ff ff       	call   c00046d2 <list_append>
c0006689:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:301
				sprintf(hd->prim_parts[p_no].name, "%s%d", hd->name, p_no + 1);
c000668c:	0f b6 05 10 16 01 c0 	movzbl 0xc0011610,%eax
c0006693:	0f b6 c0             	movzbl %al,%eax
c0006696:	8d 48 01             	lea    0x1(%eax),%ecx
c0006699:	8b 45 08             	mov    0x8(%ebp),%eax
c000669c:	0f b6 15 10 16 01 c0 	movzbl 0xc0011610,%edx
c00066a3:	0f b6 d2             	movzbl %dl,%edx
c00066a6:	c1 e2 06             	shl    $0x6,%edx
c00066a9:	8d 5a 20             	lea    0x20(%edx),%ebx
c00066ac:	8b 55 08             	mov    0x8(%ebp),%edx
c00066af:	01 da                	add    %ebx,%edx
c00066b1:	83 c2 04             	add    $0x4,%edx
c00066b4:	51                   	push   %ecx
c00066b5:	50                   	push   %eax
c00066b6:	68 c2 d9 00 c0       	push   $0xc000d9c2
c00066bb:	52                   	push   %edx
c00066bc:	e8 25 f6 ff ff       	call   c0005ce6 <sprintf>
c00066c1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:302
				p_no++;
c00066c4:	0f b6 05 10 16 01 c0 	movzbl 0xc0011610,%eax
c00066cb:	83 c0 01             	add    $0x1,%eax
c00066ce:	a2 10 16 01 c0       	mov    %al,0xc0011610
/work/x86_os_my/device/ide.c:303
				ASSERT(p_no < 4);	// 0,1,2,3
c00066d3:	0f b6 05 10 16 01 c0 	movzbl 0xc0011610,%eax
c00066da:	3c 03                	cmp    $0x3,%al
c00066dc:	0f 86 03 01 00 00    	jbe    c00067e5 <partition_scan+0x290>
/work/x86_os_my/device/ide.c:303 (discriminator 1)
c00066e2:	68 c7 d9 00 c0       	push   $0xc000d9c7
c00066e7:	68 b4 da 00 c0       	push   $0xc000dab4
c00066ec:	68 2f 01 00 00       	push   $0x12f
c00066f1:	68 f3 d8 00 c0       	push   $0xc000d8f3
c00066f6:	e8 b6 bc ff ff       	call   c00023b1 <panic_spin>
c00066fb:	83 c4 10             	add    $0x10,%esp
c00066fe:	e9 e2 00 00 00       	jmp    c00067e5 <partition_scan+0x290>
/work/x86_os_my/device/ide.c:305
			} else {
				hd->logic_parts[l_no].start_lba = ext_lba + p->start_lba;
c0006703:	0f b6 05 11 16 01 c0 	movzbl 0xc0011611,%eax
c000670a:	0f b6 c8             	movzbl %al,%ecx
c000670d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006710:	8b 50 08             	mov    0x8(%eax),%edx
c0006713:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006716:	01 c2                	add    %eax,%edx
c0006718:	8b 45 08             	mov    0x8(%ebp),%eax
c000671b:	c1 e1 06             	shl    $0x6,%ecx
c000671e:	01 c8                	add    %ecx,%eax
c0006720:	05 10 01 00 00       	add    $0x110,%eax
c0006725:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/device/ide.c:306
				hd->logic_parts[l_no].sec_cnt = p->sec_cnt;
c0006727:	0f b6 05 11 16 01 c0 	movzbl 0xc0011611,%eax
c000672e:	0f b6 c8             	movzbl %al,%ecx
c0006731:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006734:	8b 40 0c             	mov    0xc(%eax),%eax
c0006737:	8b 55 08             	mov    0x8(%ebp),%edx
c000673a:	c1 e1 06             	shl    $0x6,%ecx
c000673d:	01 ca                	add    %ecx,%edx
c000673f:	81 c2 14 01 00 00    	add    $0x114,%edx
c0006745:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/device/ide.c:307
				hd->logic_parts[l_no].my_disk = hd;
c0006747:	0f b6 05 11 16 01 c0 	movzbl 0xc0011611,%eax
c000674e:	0f b6 d0             	movzbl %al,%edx
c0006751:	8b 45 08             	mov    0x8(%ebp),%eax
c0006754:	c1 e2 06             	shl    $0x6,%edx
c0006757:	01 d0                	add    %edx,%eax
c0006759:	8d 90 18 01 00 00    	lea    0x118(%eax),%edx
c000675f:	8b 45 08             	mov    0x8(%ebp),%eax
c0006762:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/device/ide.c:308
				list_append(&partition_list, &hd->logic_parts[l_no].part_tag);
c0006764:	0f b6 05 11 16 01 c0 	movzbl 0xc0011611,%eax
c000676b:	0f b6 c0             	movzbl %al,%eax
c000676e:	c1 e0 06             	shl    $0x6,%eax
c0006771:	8d 90 10 01 00 00    	lea    0x110(%eax),%edx
c0006777:	8b 45 08             	mov    0x8(%ebp),%eax
c000677a:	01 d0                	add    %edx,%eax
c000677c:	83 c0 0c             	add    $0xc,%eax
c000677f:	83 ec 08             	sub    $0x8,%esp
c0006782:	50                   	push   %eax
c0006783:	68 c0 2f 01 c0       	push   $0xc0012fc0
c0006788:	e8 45 df ff ff       	call   c00046d2 <list_append>
c000678d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:309
				sprintf(hd->logic_parts[l_no].name, "%s%d", hd->name, l_no + 5);	// 逻辑分区数字是从5开始,主分区是1～4.
c0006790:	0f b6 05 11 16 01 c0 	movzbl 0xc0011611,%eax
c0006797:	0f b6 c0             	movzbl %al,%eax
c000679a:	8d 48 05             	lea    0x5(%eax),%ecx
c000679d:	8b 45 08             	mov    0x8(%ebp),%eax
c00067a0:	0f b6 15 11 16 01 c0 	movzbl 0xc0011611,%edx
c00067a7:	0f b6 d2             	movzbl %dl,%edx
c00067aa:	c1 e2 06             	shl    $0x6,%edx
c00067ad:	8d 9a 20 01 00 00    	lea    0x120(%edx),%ebx
c00067b3:	8b 55 08             	mov    0x8(%ebp),%edx
c00067b6:	01 da                	add    %ebx,%edx
c00067b8:	83 c2 04             	add    $0x4,%edx
c00067bb:	51                   	push   %ecx
c00067bc:	50                   	push   %eax
c00067bd:	68 c2 d9 00 c0       	push   $0xc000d9c2
c00067c2:	52                   	push   %edx
c00067c3:	e8 1e f5 ff ff       	call   c0005ce6 <sprintf>
c00067c8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:310
				l_no++;
c00067cb:	0f b6 05 11 16 01 c0 	movzbl 0xc0011611,%eax
c00067d2:	83 c0 01             	add    $0x1,%eax
c00067d5:	a2 11 16 01 c0       	mov    %al,0xc0011611
/work/x86_os_my/device/ide.c:311
				if (l_no >= 8)	// 只支持8个逻辑分区,避免数组越界
c00067da:	0f b6 05 11 16 01 c0 	movzbl 0xc0011611,%eax
c00067e1:	3c 07                	cmp    $0x7,%al
c00067e3:	77 26                	ja     c000680b <partition_scan+0x2b6>
/work/x86_os_my/device/ide.c:315
					return;
			}
		}
		p++;
c00067e5:	83 45 f0 10          	addl   $0x10,-0x10(%ebp)
/work/x86_os_my/device/ide.c:285
	ide_read(hd, ext_lba, bs, 1);
	uint8_t part_idx = 0;
	struct partition_table_entry* p = bs->partition_table;

	/* 遍历分区表4个分区表项 */
	while (part_idx++ < 4) {
c00067e9:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00067ed:	8d 50 01             	lea    0x1(%eax),%edx
c00067f0:	88 55 f7             	mov    %dl,-0x9(%ebp)
c00067f3:	3c 03                	cmp    $0x3,%al
c00067f5:	0f 86 9b fd ff ff    	jbe    c0006596 <partition_scan+0x41>
/work/x86_os_my/device/ide.c:317
					return;
			}
		}
		p++;
	}
	sys_free(bs);
c00067fb:	83 ec 0c             	sub    $0xc,%esp
c00067fe:	ff 75 ec             	pushl  -0x14(%ebp)
c0006801:	e8 83 cb ff ff       	call   c0003389 <sys_free>
c0006806:	83 c4 10             	add    $0x10,%esp
c0006809:	eb 01                	jmp    c000680c <partition_scan+0x2b7>
/work/x86_os_my/device/ide.c:312
				hd->logic_parts[l_no].my_disk = hd;
				list_append(&partition_list, &hd->logic_parts[l_no].part_tag);
				sprintf(hd->logic_parts[l_no].name, "%s%d", hd->name, l_no + 5);	// 逻辑分区数字是从5开始,主分区是1～4.
				l_no++;
				if (l_no >= 8)	// 只支持8个逻辑分区,避免数组越界
					return;
c000680b:	90                   	nop
/work/x86_os_my/device/ide.c:318
			}
		}
		p++;
	}
	sys_free(bs);
}
c000680c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c000680f:	c9                   	leave  
c0006810:	c3                   	ret    

c0006811 <partition_info>:
partition_info():
/work/x86_os_my/device/ide.c:321

/* 打印分区信息 */
static bool partition_info(struct list_elem* pelem, int arg UNUSED) {
c0006811:	55                   	push   %ebp
c0006812:	89 e5                	mov    %esp,%ebp
c0006814:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/ide.c:322
	struct partition* part = elem2entry(struct partition, part_tag, pelem);
c0006817:	8b 45 08             	mov    0x8(%ebp),%eax
c000681a:	83 e8 0c             	sub    $0xc,%eax
c000681d:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/device/ide.c:323
	printk("   %s start_lba:0x%x, sec_cnt:0x%x\n",part->name, part->start_lba, part->sec_cnt);
c0006820:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0006823:	8b 50 04             	mov    0x4(%eax),%edx
c0006826:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0006829:	8b 00                	mov    (%eax),%eax
c000682b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c000682e:	83 c1 14             	add    $0x14,%ecx
c0006831:	52                   	push   %edx
c0006832:	50                   	push   %eax
c0006833:	51                   	push   %ecx
c0006834:	68 d0 d9 00 c0       	push   $0xc000d9d0
c0006839:	e8 d0 02 00 00       	call   c0006b0e <printk>
c000683e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:327

	/* 在此处return false与函数本身功能无关,
	 * 只是为了让主调函数list_traversal继续向下遍历元素 */
	return false;
c0006841:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/device/ide.c:328
}
c0006846:	c9                   	leave  
c0006847:	c3                   	ret    

c0006848 <intr_hd_handler>:
intr_hd_handler():
/work/x86_os_my/device/ide.c:331

/* 硬盘中断处理程序 */
void intr_hd_handler(uint8_t irq_no) {
c0006848:	55                   	push   %ebp
c0006849:	89 e5                	mov    %esp,%ebp
c000684b:	83 ec 28             	sub    $0x28,%esp
c000684e:	8b 45 08             	mov    0x8(%ebp),%eax
c0006851:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/device/ide.c:332
	ASSERT(irq_no == 0x2e || irq_no == 0x2f);
c0006854:	80 7d e4 2e          	cmpb   $0x2e,-0x1c(%ebp)
c0006858:	74 22                	je     c000687c <intr_hd_handler+0x34>
/work/x86_os_my/device/ide.c:332 (discriminator 1)
c000685a:	80 7d e4 2f          	cmpb   $0x2f,-0x1c(%ebp)
c000685e:	74 1c                	je     c000687c <intr_hd_handler+0x34>
/work/x86_os_my/device/ide.c:332 (discriminator 2)
c0006860:	68 f4 d9 00 c0       	push   $0xc000d9f4
c0006865:	68 c4 da 00 c0       	push   $0xc000dac4
c000686a:	68 4c 01 00 00       	push   $0x14c
c000686f:	68 f3 d8 00 c0       	push   $0xc000d8f3
c0006874:	e8 38 bb ff ff       	call   c00023b1 <panic_spin>
c0006879:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:333
	uint8_t ch_no = irq_no - 0x2e;
c000687c:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0006880:	83 e8 2e             	sub    $0x2e,%eax
c0006883:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/device/ide.c:334
	struct ide_channel* channel = &channels[ch_no];
c0006886:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000688a:	69 c0 60 06 00 00    	imul   $0x660,%eax,%eax
c0006890:	05 00 23 01 c0       	add    $0xc0012300,%eax
c0006895:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:335
	ASSERT(channel->irq_no == irq_no);
c0006898:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000689b:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
c000689f:	3a 45 e4             	cmp    -0x1c(%ebp),%al
c00068a2:	74 1c                	je     c00068c0 <intr_hd_handler+0x78>
/work/x86_os_my/device/ide.c:335 (discriminator 1)
c00068a4:	68 15 da 00 c0       	push   $0xc000da15
c00068a9:	68 c4 da 00 c0       	push   $0xc000dac4
c00068ae:	68 4f 01 00 00       	push   $0x14f
c00068b3:	68 f3 d8 00 c0       	push   $0xc000d8f3
c00068b8:	e8 f4 ba ff ff       	call   c00023b1 <panic_spin>
c00068bd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:338
	/* 不必担心此中断是否对应的是这一次的expecting_intr,
	* 每次读写硬盘时会申请锁,从而保证了同步一致性 */
	if (channel->expecting_intr) {
c00068c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00068c3:	8b 40 28             	mov    0x28(%eax),%eax
c00068c6:	85 c0                	test   %eax,%eax
c00068c8:	74 35                	je     c00068ff <intr_hd_handler+0xb7>
/work/x86_os_my/device/ide.c:339
		channel->expecting_intr = false;
c00068ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00068cd:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
/work/x86_os_my/device/ide.c:340
		sema_up(&channel->disk_done);
c00068d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00068d7:	83 c0 2c             	add    $0x2c,%eax
c00068da:	83 ec 0c             	sub    $0xc,%esp
c00068dd:	50                   	push   %eax
c00068de:	e8 7d e1 ff ff       	call   c0004a60 <sema_up>
c00068e3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:343

		/* 读取状态寄存器使硬盘控制器认为此次的中断已被处理,从而硬盘可以继续执行新的读写 */
		inb(reg_status(channel));
c00068e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00068e9:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c00068ed:	83 c0 07             	add    $0x7,%eax
c00068f0:	0f b7 c0             	movzwl %ax,%eax
c00068f3:	83 ec 0c             	sub    $0xc,%esp
c00068f6:	50                   	push   %eax
c00068f7:	e8 de f4 ff ff       	call   c0005dda <inb>
c00068fc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:345
	}
}
c00068ff:	90                   	nop
c0006900:	c9                   	leave  
c0006901:	c3                   	ret    

c0006902 <ide_init>:
ide_init():
/work/x86_os_my/device/ide.c:348

/* 硬盘数据结构初始化 */
void ide_init() {
c0006902:	55                   	push   %ebp
c0006903:	89 e5                	mov    %esp,%ebp
c0006905:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/device/ide.c:349
	printk("ide_init start\n");
c0006908:	83 ec 0c             	sub    $0xc,%esp
c000690b:	68 2f da 00 c0       	push   $0xc000da2f
c0006910:	e8 f9 01 00 00       	call   c0006b0e <printk>
c0006915:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:350
	uint8_t hd_cnt = *((uint8_t*)(0x475));	// 获取硬盘的数量
c0006918:	b8 75 04 00 00       	mov    $0x475,%eax
c000691d:	0f b6 00             	movzbl (%eax),%eax
c0006920:	88 45 f5             	mov    %al,-0xb(%ebp)
/work/x86_os_my/device/ide.c:351
	ASSERT(hd_cnt > 0);
c0006923:	80 7d f5 00          	cmpb   $0x0,-0xb(%ebp)
c0006927:	75 1c                	jne    c0006945 <ide_init+0x43>
/work/x86_os_my/device/ide.c:351 (discriminator 1)
c0006929:	68 3f da 00 c0       	push   $0xc000da3f
c000692e:	68 d4 da 00 c0       	push   $0xc000dad4
c0006933:	68 5f 01 00 00       	push   $0x15f
c0006938:	68 f3 d8 00 c0       	push   $0xc000d8f3
c000693d:	e8 6f ba ff ff       	call   c00023b1 <panic_spin>
c0006942:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:352
	list_init(&partition_list);
c0006945:	83 ec 0c             	sub    $0xc,%esp
c0006948:	68 c0 2f 01 c0       	push   $0xc0012fc0
c000694d:	e8 ef dc ff ff       	call   c0004641 <list_init>
c0006952:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:353
	channel_cnt = DIV_ROUND_UP(hd_cnt, 2);	// 一个ide通道上有两个硬盘,根据硬盘数量反推有几个ide通道
c0006955:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0006959:	83 c0 01             	add    $0x1,%eax
c000695c:	89 c2                	mov    %eax,%edx
c000695e:	c1 ea 1f             	shr    $0x1f,%edx
c0006961:	01 d0                	add    %edx,%eax
c0006963:	d1 f8                	sar    %eax
c0006965:	a2 e0 22 01 c0       	mov    %al,0xc00122e0
/work/x86_os_my/device/ide.c:355
	struct ide_channel* channel;
	uint8_t channel_no = 0, dev_no = 0;
c000696a:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
c000696e:	c6 45 f6 00          	movb   $0x0,-0xa(%ebp)
/work/x86_os_my/device/ide.c:358

	/* 处理每个通道上的硬盘 */
	while (channel_no < channel_cnt) {
c0006972:	e9 4d 01 00 00       	jmp    c0006ac4 <ide_init+0x1c2>
/work/x86_os_my/device/ide.c:359
		channel = &channels[channel_no];
c0006977:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000697b:	69 c0 60 06 00 00    	imul   $0x660,%eax,%eax
c0006981:	05 00 23 01 c0       	add    $0xc0012300,%eax
c0006986:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/device/ide.c:360
		sprintf(channel->name, "ide%d", channel_no);
c0006989:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c000698d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006990:	83 ec 04             	sub    $0x4,%esp
c0006993:	52                   	push   %edx
c0006994:	68 4a da 00 c0       	push   $0xc000da4a
c0006999:	50                   	push   %eax
c000699a:	e8 47 f3 ff ff       	call   c0005ce6 <sprintf>
c000699f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:363

		/* 为每个ide通道初始化端口基址及中断向量 */
		switch (channel_no) {
c00069a2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00069a6:	85 c0                	test   %eax,%eax
c00069a8:	74 07                	je     c00069b1 <ide_init+0xaf>
c00069aa:	83 f8 01             	cmp    $0x1,%eax
c00069ad:	74 14                	je     c00069c3 <ide_init+0xc1>
c00069af:	eb 23                	jmp    c00069d4 <ide_init+0xd2>
/work/x86_os_my/device/ide.c:365
			case 0:
			channel->port_base	 = 0x1f0;	// ide0通道的起始端口号是0x1f0
c00069b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00069b4:	66 c7 40 08 f0 01    	movw   $0x1f0,0x8(%eax)
/work/x86_os_my/device/ide.c:366
			channel->irq_no	 = 0x20 + 14;	// 从片8259a上倒数第二的中断引脚,温盘,也就是ide0通道的的中断向量号
c00069ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00069bd:	c6 40 0a 2e          	movb   $0x2e,0xa(%eax)
/work/x86_os_my/device/ide.c:367
			break;
c00069c1:	eb 11                	jmp    c00069d4 <ide_init+0xd2>
/work/x86_os_my/device/ide.c:370
			
			case 1:
			channel->port_base	 = 0x170;	// ide1通道的起始端口号是0x170
c00069c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00069c6:	66 c7 40 08 70 01    	movw   $0x170,0x8(%eax)
/work/x86_os_my/device/ide.c:371
			channel->irq_no	 = 0x20 + 15;	// 从8259A上的最后一个中断引脚,我们用来响应ide1通道上的硬盘中断
c00069cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00069cf:	c6 40 0a 2f          	movb   $0x2f,0xa(%eax)
/work/x86_os_my/device/ide.c:372
			break;
c00069d3:	90                   	nop
/work/x86_os_my/device/ide.c:375
		}

		channel->expecting_intr = false;	// 未向硬盘写入指令时不期待硬盘的中断
c00069d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00069d7:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
/work/x86_os_my/device/ide.c:376
		lock_init(&channel->lock);
c00069de:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00069e1:	83 c0 0c             	add    $0xc,%eax
c00069e4:	83 ec 0c             	sub    $0xc,%esp
c00069e7:	50                   	push   %eax
c00069e8:	e8 48 df ff ff       	call   c0004935 <lock_init>
c00069ed:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:380

		/* 初始化为0,目的是向硬盘控制器请求数据后,硬盘驱动sema_down此信号量会阻塞线程,
		直到硬盘完成后通过发中断,由中断处理程序将此信号量sema_up,唤醒线程. */
		sema_init(&channel->disk_done, 0);
c00069f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00069f3:	83 c0 2c             	add    $0x2c,%eax
c00069f6:	83 ec 08             	sub    $0x8,%esp
c00069f9:	6a 00                	push   $0x0
c00069fb:	50                   	push   %eax
c00069fc:	e8 0a df ff ff       	call   c000490b <sema_init>
c0006a01:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:381
		register_handler(channel->irq_no, intr_hd_handler);
c0006a04:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006a07:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
c0006a0b:	0f b6 c0             	movzbl %al,%eax
c0006a0e:	83 ec 08             	sub    $0x8,%esp
c0006a11:	68 48 68 00 c0       	push   $0xc0006848
c0006a16:	50                   	push   %eax
c0006a17:	e8 18 b0 ff ff       	call   c0001a34 <register_handler>
c0006a1c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:384

		/* 分别获取两个硬盘的参数及分区信息 */
		while (dev_no < 2) {
c0006a1f:	e9 88 00 00 00       	jmp    c0006aac <ide_init+0x1aa>
/work/x86_os_my/device/ide.c:385
			struct disk* hd = &channel->devices[dev_no];
c0006a24:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0006a28:	69 c0 10 03 00 00    	imul   $0x310,%eax,%eax
c0006a2e:	8d 50 40             	lea    0x40(%eax),%edx
c0006a31:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006a34:	01 d0                	add    %edx,%eax
c0006a36:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/device/ide.c:386
			hd->my_channel = channel;
c0006a39:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0006a3c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0006a3f:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/device/ide.c:387
			hd->dev_no = dev_no;
c0006a42:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0006a45:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
c0006a49:	88 50 0c             	mov    %dl,0xc(%eax)
/work/x86_os_my/device/ide.c:388
			sprintf(hd->name, "sd%c", 'a' + channel_no * 2 + dev_no);
c0006a4c:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0006a50:	01 c0                	add    %eax,%eax
c0006a52:	8d 50 61             	lea    0x61(%eax),%edx
c0006a55:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0006a59:	01 c2                	add    %eax,%edx
c0006a5b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0006a5e:	83 ec 04             	sub    $0x4,%esp
c0006a61:	52                   	push   %edx
c0006a62:	68 50 da 00 c0       	push   $0xc000da50
c0006a67:	50                   	push   %eax
c0006a68:	e8 79 f2 ff ff       	call   c0005ce6 <sprintf>
c0006a6d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:389
			identify_disk(hd);		// 获取硬盘参数
c0006a70:	83 ec 0c             	sub    $0xc,%esp
c0006a73:	ff 75 ec             	pushl  -0x14(%ebp)
c0006a76:	e8 5d f9 ff ff       	call   c00063d8 <identify_disk>
c0006a7b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:390
			if (dev_no != 0) {		// 内核本身的裸硬盘(hd60M.img)不处理
c0006a7e:	80 7d f6 00          	cmpb   $0x0,-0xa(%ebp)
c0006a82:	74 10                	je     c0006a94 <ide_init+0x192>
/work/x86_os_my/device/ide.c:391
				partition_scan(hd, 0);	// 扫描该硬盘上的分区
c0006a84:	83 ec 08             	sub    $0x8,%esp
c0006a87:	6a 00                	push   $0x0
c0006a89:	ff 75 ec             	pushl  -0x14(%ebp)
c0006a8c:	e8 c4 fa ff ff       	call   c0006555 <partition_scan>
c0006a91:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:393
			}
			p_no = 0, l_no = 0;
c0006a94:	c6 05 10 16 01 c0 00 	movb   $0x0,0xc0011610
c0006a9b:	c6 05 11 16 01 c0 00 	movb   $0x0,0xc0011611
/work/x86_os_my/device/ide.c:394
			dev_no++;
c0006aa2:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0006aa6:	83 c0 01             	add    $0x1,%eax
c0006aa9:	88 45 f6             	mov    %al,-0xa(%ebp)
/work/x86_os_my/device/ide.c:384
		直到硬盘完成后通过发中断,由中断处理程序将此信号量sema_up,唤醒线程. */
		sema_init(&channel->disk_done, 0);
		register_handler(channel->irq_no, intr_hd_handler);

		/* 分别获取两个硬盘的参数及分区信息 */
		while (dev_no < 2) {
c0006aac:	80 7d f6 01          	cmpb   $0x1,-0xa(%ebp)
c0006ab0:	0f 86 6e ff ff ff    	jbe    c0006a24 <ide_init+0x122>
/work/x86_os_my/device/ide.c:396
				partition_scan(hd, 0);	// 扫描该硬盘上的分区
			}
			p_no = 0, l_no = 0;
			dev_no++;
		}
		dev_no = 0;		// 将硬盘驱动器号置0,为下一个channel的两个硬盘初始化。
c0006ab6:	c6 45 f6 00          	movb   $0x0,-0xa(%ebp)
/work/x86_os_my/device/ide.c:397
		channel_no++;	// 下一个channel
c0006aba:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0006abe:	83 c0 01             	add    $0x1,%eax
c0006ac1:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/device/ide.c:358
	channel_cnt = DIV_ROUND_UP(hd_cnt, 2);	// 一个ide通道上有两个硬盘,根据硬盘数量反推有几个ide通道
	struct ide_channel* channel;
	uint8_t channel_no = 0, dev_no = 0;

	/* 处理每个通道上的硬盘 */
	while (channel_no < channel_cnt) {
c0006ac4:	0f b6 05 e0 22 01 c0 	movzbl 0xc00122e0,%eax
c0006acb:	38 45 f7             	cmp    %al,-0x9(%ebp)
c0006ace:	0f 82 a3 fe ff ff    	jb     c0006977 <ide_init+0x75>
/work/x86_os_my/device/ide.c:400
		}
		dev_no = 0;		// 将硬盘驱动器号置0,为下一个channel的两个硬盘初始化。
		channel_no++;	// 下一个channel
	}

	printk("\n   all partition info\n");
c0006ad4:	83 ec 0c             	sub    $0xc,%esp
c0006ad7:	68 55 da 00 c0       	push   $0xc000da55
c0006adc:	e8 2d 00 00 00       	call   c0006b0e <printk>
c0006ae1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:402
	/* 打印所有分区信息 */
	list_traversal(&partition_list, partition_info, (int)NULL);
c0006ae4:	83 ec 04             	sub    $0x4,%esp
c0006ae7:	6a 00                	push   $0x0
c0006ae9:	68 11 68 00 c0       	push   $0xc0006811
c0006aee:	68 c0 2f 01 c0       	push   $0xc0012fc0
c0006af3:	e8 8f dc ff ff       	call   c0004787 <list_traversal>
c0006af8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:403
	printk("ide_init done\n");
c0006afb:	83 ec 0c             	sub    $0xc,%esp
c0006afe:	68 6d da 00 c0       	push   $0xc000da6d
c0006b03:	e8 06 00 00 00       	call   c0006b0e <printk>
c0006b08:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/device/ide.c:404
}
c0006b0b:	90                   	nop
c0006b0c:	c9                   	leave  
c0006b0d:	c3                   	ret    

c0006b0e <printk>:
printk():
/work/x86_os_my/lib/kernel/stdio-kernel.c:11

#define va_start(args, first_fix) args = (va_list)&first_fix
#define va_end(args) args = NULL

/* 供内核使用的格式化输出函数 */
void printk(const char* format, ...) {
c0006b0e:	55                   	push   %ebp
c0006b0f:	89 e5                	mov    %esp,%ebp
c0006b11:	57                   	push   %edi
c0006b12:	81 ec 14 04 00 00    	sub    $0x414,%esp
/work/x86_os_my/lib/kernel/stdio-kernel.c:13
	va_list args;
	va_start(args, format);
c0006b18:	8d 45 08             	lea    0x8(%ebp),%eax
c0006b1b:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/lib/kernel/stdio-kernel.c:14
	char buf[1024] = {0};
c0006b1e:	8d 95 f4 fb ff ff    	lea    -0x40c(%ebp),%edx
c0006b24:	b8 00 00 00 00       	mov    $0x0,%eax
c0006b29:	b9 00 01 00 00       	mov    $0x100,%ecx
c0006b2e:	89 d7                	mov    %edx,%edi
c0006b30:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/lib/kernel/stdio-kernel.c:15
	vsprintf(buf, format, args);
c0006b32:	8b 45 08             	mov    0x8(%ebp),%eax
c0006b35:	83 ec 04             	sub    $0x4,%esp
c0006b38:	ff 75 f4             	pushl  -0xc(%ebp)
c0006b3b:	50                   	push   %eax
c0006b3c:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c0006b42:	50                   	push   %eax
c0006b43:	e8 21 f0 ff ff       	call   c0005b69 <vsprintf>
c0006b48:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/stdio-kernel.c:16
	va_end(args);
c0006b4b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/lib/kernel/stdio-kernel.c:17
	console_put_str(buf);
c0006b52:	83 ec 0c             	sub    $0xc,%esp
c0006b55:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c0006b5b:	50                   	push   %eax
c0006b5c:	e8 3f dd ff ff       	call   c00048a0 <console_put_str>
c0006b61:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/lib/kernel/stdio-kernel.c:18
}
c0006b64:	90                   	nop
c0006b65:	8b 7d fc             	mov    -0x4(%ebp),%edi
c0006b68:	c9                   	leave  
c0006b69:	c3                   	ret    

c0006b6a <mount_partition>:
mount_partition():
/work/x86_os_my/fs/fs.c:27
把该分区文件系统的元信息从硬盘上读出来加载到内存中，
这样硬盘资源的变化都用内存中元信息来跟踪，
如果有写操作，及时将内存中的元信息同步写入到硬盘以持久化。
*/
//sb_buf没释放！
static bool mount_partition(struct list_elem* pelem, int arg) {
c0006b6a:	55                   	push   %ebp
c0006b6b:	89 e5                	mov    %esp,%ebp
c0006b6d:	53                   	push   %ebx
c0006b6e:	83 ec 14             	sub    $0x14,%esp
/work/x86_os_my/fs/fs.c:28
	char* part_name = (char*)arg;	// sdb1
c0006b71:	8b 45 0c             	mov    0xc(%ebp),%eax
c0006b74:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:29
	struct partition* part = elem2entry(struct partition, part_tag, pelem);	// 根据pelem找到partition
c0006b77:	8b 45 08             	mov    0x8(%ebp),%eax
c0006b7a:	83 e8 0c             	sub    $0xc,%eax
c0006b7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:30
	if (!strcmp(part->name, part_name)) {	//名字一致
c0006b80:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006b83:	83 c0 14             	add    $0x14,%eax
c0006b86:	83 ec 08             	sub    $0x8,%esp
c0006b89:	ff 75 f4             	pushl  -0xc(%ebp)
c0006b8c:	50                   	push   %eax
c0006b8d:	e8 96 ce ff ff       	call   c0003a28 <strcmp>
c0006b92:	83 c4 10             	add    $0x10,%esp
c0006b95:	84 c0                	test   %al,%al
c0006b97:	0f 85 ce 01 00 00    	jne    c0006d6b <mount_partition+0x201>
/work/x86_os_my/fs/fs.c:31
		cur_part = part;
c0006b9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006ba0:	a3 d0 2f 01 c0       	mov    %eax,0xc0012fd0
/work/x86_os_my/fs/fs.c:32
		struct disk* hd = cur_part->my_disk;
c0006ba5:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0006baa:	8b 40 08             	mov    0x8(%eax),%eax
c0006bad:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:33
		struct super_block* sb_buf = (struct super_block*)sys_malloc(SECTOR_SIZE);
c0006bb0:	83 ec 0c             	sub    $0xc,%esp
c0006bb3:	68 00 02 00 00       	push   $0x200
c0006bb8:	e8 9f c1 ff ff       	call   c0002d5c <sys_malloc>
c0006bbd:	83 c4 10             	add    $0x10,%esp
c0006bc0:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:37

		/* 在内存中创建分区cur_part的超级块 */
		// super_block 占用了1个扇区，但是它后边有很多数据是pad只做填充用
		cur_part->sb = (struct super_block*)sys_malloc(sizeof(struct super_block));
c0006bc3:	8b 1d d0 2f 01 c0    	mov    0xc0012fd0,%ebx
c0006bc9:	83 ec 0c             	sub    $0xc,%esp
c0006bcc:	68 00 02 00 00       	push   $0x200
c0006bd1:	e8 86 c1 ff ff       	call   c0002d5c <sys_malloc>
c0006bd6:	83 c4 10             	add    $0x10,%esp
c0006bd9:	89 43 1c             	mov    %eax,0x1c(%ebx)
/work/x86_os_my/fs/fs.c:38
		if (cur_part->sb == NULL) {
c0006bdc:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0006be1:	8b 40 1c             	mov    0x1c(%eax),%eax
c0006be4:	85 c0                	test   %eax,%eax
c0006be6:	75 19                	jne    c0006c01 <mount_partition+0x97>
/work/x86_os_my/fs/fs.c:39
			PANIC("alloc memory failed!");
c0006be8:	68 e0 da 00 c0       	push   $0xc000dae0
c0006bed:	68 b4 e2 00 c0       	push   $0xc000e2b4
c0006bf2:	6a 27                	push   $0x27
c0006bf4:	68 f5 da 00 c0       	push   $0xc000daf5
c0006bf9:	e8 b3 b7 ff ff       	call   c00023b1 <panic_spin>
c0006bfe:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:43
		}

		/* 读入超级块 */
		memset(sb_buf, 0, SECTOR_SIZE);
c0006c01:	83 ec 04             	sub    $0x4,%esp
c0006c04:	68 00 02 00 00       	push   $0x200
c0006c09:	6a 00                	push   $0x0
c0006c0b:	ff 75 e8             	pushl  -0x18(%ebp)
c0006c0e:	e8 40 cc ff ff       	call   c0003853 <memset>
c0006c13:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:44
		ide_read(hd, cur_part->start_lba + 1, sb_buf, 1);
c0006c16:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0006c1b:	8b 00                	mov    (%eax),%eax
c0006c1d:	83 c0 01             	add    $0x1,%eax
c0006c20:	6a 01                	push   $0x1
c0006c22:	ff 75 e8             	pushl  -0x18(%ebp)
c0006c25:	50                   	push   %eax
c0006c26:	ff 75 ec             	pushl  -0x14(%ebp)
c0006c29:	e8 67 f4 ff ff       	call   c0006095 <ide_read>
c0006c2e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:46
		// 拷贝给 cur_part->sb
		memcpy(cur_part->sb, sb_buf, sizeof(struct super_block));
c0006c31:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0006c36:	8b 40 1c             	mov    0x1c(%eax),%eax
c0006c39:	83 ec 04             	sub    $0x4,%esp
c0006c3c:	68 00 02 00 00       	push   $0x200
c0006c41:	ff 75 e8             	pushl  -0x18(%ebp)
c0006c44:	50                   	push   %eax
c0006c45:	e8 5b cc ff ff       	call   c00038a5 <memcpy>
c0006c4a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:49

		/* 读入块位图 */
		cur_part->block_bitmap.bits = (uint8_t*)sys_malloc(sb_buf->block_bitmap_sects * SECTOR_SIZE);
c0006c4d:	8b 1d d0 2f 01 c0    	mov    0xc0012fd0,%ebx
c0006c53:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0006c56:	8b 40 14             	mov    0x14(%eax),%eax
c0006c59:	c1 e0 09             	shl    $0x9,%eax
c0006c5c:	83 ec 0c             	sub    $0xc,%esp
c0006c5f:	50                   	push   %eax
c0006c60:	e8 f7 c0 ff ff       	call   c0002d5c <sys_malloc>
c0006c65:	83 c4 10             	add    $0x10,%esp
c0006c68:	89 43 24             	mov    %eax,0x24(%ebx)
/work/x86_os_my/fs/fs.c:50
		if (cur_part->block_bitmap.bits == NULL) {
c0006c6b:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0006c70:	8b 40 24             	mov    0x24(%eax),%eax
c0006c73:	85 c0                	test   %eax,%eax
c0006c75:	75 19                	jne    c0006c90 <mount_partition+0x126>
/work/x86_os_my/fs/fs.c:51
			PANIC("alloc memory failed!");
c0006c77:	68 e0 da 00 c0       	push   $0xc000dae0
c0006c7c:	68 b4 e2 00 c0       	push   $0xc000e2b4
c0006c81:	6a 33                	push   $0x33
c0006c83:	68 f5 da 00 c0       	push   $0xc000daf5
c0006c88:	e8 24 b7 ff ff       	call   c00023b1 <panic_spin>
c0006c8d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:53
		}
		cur_part->block_bitmap.btmp_bytes_len = sb_buf->block_bitmap_sects * SECTOR_SIZE;
c0006c90:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0006c95:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0006c98:	8b 52 14             	mov    0x14(%edx),%edx
c0006c9b:	c1 e2 09             	shl    $0x9,%edx
c0006c9e:	89 50 20             	mov    %edx,0x20(%eax)
/work/x86_os_my/fs/fs.c:54
		ide_read(hd, sb_buf->block_bitmap_lba, cur_part->block_bitmap.bits, sb_buf->block_bitmap_sects);
c0006ca1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0006ca4:	8b 48 14             	mov    0x14(%eax),%ecx
c0006ca7:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0006cac:	8b 50 24             	mov    0x24(%eax),%edx
c0006caf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0006cb2:	8b 40 10             	mov    0x10(%eax),%eax
c0006cb5:	51                   	push   %ecx
c0006cb6:	52                   	push   %edx
c0006cb7:	50                   	push   %eax
c0006cb8:	ff 75 ec             	pushl  -0x14(%ebp)
c0006cbb:	e8 d5 f3 ff ff       	call   c0006095 <ide_read>
c0006cc0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:57

		/* 读入inode位图 */
		cur_part->inode_bitmap.bits = (uint8_t*)sys_malloc(sb_buf->inode_bitmap_sects * SECTOR_SIZE);
c0006cc3:	8b 1d d0 2f 01 c0    	mov    0xc0012fd0,%ebx
c0006cc9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0006ccc:	8b 40 1c             	mov    0x1c(%eax),%eax
c0006ccf:	c1 e0 09             	shl    $0x9,%eax
c0006cd2:	83 ec 0c             	sub    $0xc,%esp
c0006cd5:	50                   	push   %eax
c0006cd6:	e8 81 c0 ff ff       	call   c0002d5c <sys_malloc>
c0006cdb:	83 c4 10             	add    $0x10,%esp
c0006cde:	89 43 2c             	mov    %eax,0x2c(%ebx)
/work/x86_os_my/fs/fs.c:58
		if (cur_part->inode_bitmap.bits == NULL) {
c0006ce1:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0006ce6:	8b 40 2c             	mov    0x2c(%eax),%eax
c0006ce9:	85 c0                	test   %eax,%eax
c0006ceb:	75 19                	jne    c0006d06 <mount_partition+0x19c>
/work/x86_os_my/fs/fs.c:59
			PANIC("alloc memory failed!");
c0006ced:	68 e0 da 00 c0       	push   $0xc000dae0
c0006cf2:	68 b4 e2 00 c0       	push   $0xc000e2b4
c0006cf7:	6a 3b                	push   $0x3b
c0006cf9:	68 f5 da 00 c0       	push   $0xc000daf5
c0006cfe:	e8 ae b6 ff ff       	call   c00023b1 <panic_spin>
c0006d03:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:61
		}
		cur_part->inode_bitmap.btmp_bytes_len = sb_buf->inode_bitmap_sects * SECTOR_SIZE;
c0006d06:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0006d0b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0006d0e:	8b 52 1c             	mov    0x1c(%edx),%edx
c0006d11:	c1 e2 09             	shl    $0x9,%edx
c0006d14:	89 50 28             	mov    %edx,0x28(%eax)
/work/x86_os_my/fs/fs.c:62
		ide_read(hd, sb_buf->inode_bitmap_lba, cur_part->inode_bitmap.bits, sb_buf->inode_bitmap_sects);
c0006d17:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0006d1a:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0006d1d:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0006d22:	8b 50 2c             	mov    0x2c(%eax),%edx
c0006d25:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0006d28:	8b 40 18             	mov    0x18(%eax),%eax
c0006d2b:	51                   	push   %ecx
c0006d2c:	52                   	push   %edx
c0006d2d:	50                   	push   %eax
c0006d2e:	ff 75 ec             	pushl  -0x14(%ebp)
c0006d31:	e8 5f f3 ff ff       	call   c0006095 <ide_read>
c0006d36:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:65


		list_init(&cur_part->open_inodes);	// 本分区打开的inode队列！
c0006d39:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0006d3e:	83 c0 30             	add    $0x30,%eax
c0006d41:	83 ec 0c             	sub    $0xc,%esp
c0006d44:	50                   	push   %eax
c0006d45:	e8 f7 d8 ff ff       	call   c0004641 <list_init>
c0006d4a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:68


		printk("mount %s done!\n", part->name);
c0006d4d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0006d50:	83 c0 14             	add    $0x14,%eax
c0006d53:	83 ec 08             	sub    $0x8,%esp
c0006d56:	50                   	push   %eax
c0006d57:	68 fd da 00 c0       	push   $0xc000dafd
c0006d5c:	e8 ad fd ff ff       	call   c0006b0e <printk>
c0006d61:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:70
		/* 返回true时list_traversal才会停止遍历,减少了后面元素无意义的遍历. */
		return true;
c0006d64:	b8 01 00 00 00       	mov    $0x1,%eax
c0006d69:	eb 05                	jmp    c0006d70 <mount_partition+0x206>
/work/x86_os_my/fs/fs.c:72
	}//if (!strcmp(part->name, part_name))
	return false;	// list_traversal继续遍历
c0006d6b:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/fs.c:73
}
c0006d70:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0006d73:	c9                   	leave  
c0006d74:	c3                   	ret    

c0006d75 <partition_format>:
partition_format():
/work/x86_os_my/fs/fs.c:89
	| 操作系统引导块，超级块，空闲块位图，inode位图，inode数组，根目录，空闲块区域 |
	+------------------------------------------------------------------------------+
	partition结构见ide.h
	MAX_FILES_PER_PART == 4096
****************************************************************************************/
static void partition_format(struct partition* part) {
c0006d75:	55                   	push   %ebp
c0006d76:	89 e5                	mov    %esp,%ebp
c0006d78:	57                   	push   %edi
c0006d79:	56                   	push   %esi
c0006d7a:	53                   	push   %ebx
c0006d7b:	81 ec 7c 02 00 00    	sub    $0x27c,%esp
/work/x86_os_my/fs/fs.c:91
	/* 为方便实现，inode管理的数据块，一个块大小是一扇区 */
	uint32_t boot_sector_sects = 1;		//引导块
c0006d81:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
/work/x86_os_my/fs/fs.c:92
	uint32_t super_block_sects = 1;		//超级块
c0006d88:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
/work/x86_os_my/fs/fs.c:93
	uint32_t inode_bitmap_sects = DIV_ROUND_UP(MAX_FILES_PER_PART, BITS_PER_SECTOR);	// inode位图占几个扇区.最多支持4096个文件
c0006d8f:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
/work/x86_os_my/fs/fs.c:94
	uint32_t inode_table_sects = DIV_ROUND_UP((sizeof(struct inode) * MAX_FILES_PER_PART), SECTOR_SIZE);	//inode数组占几个扇区
c0006d96:	c7 45 d4 60 02 00 00 	movl   $0x260,-0x2c(%ebp)
/work/x86_os_my/fs/fs.c:95
	uint32_t used_sects = boot_sector_sects + super_block_sects + inode_bitmap_sects + inode_table_sects;
c0006d9d:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0006da0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0006da3:	01 c2                	add    %eax,%edx
c0006da5:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0006da8:	01 c2                	add    %eax,%edx
c0006daa:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0006dad:	01 d0                	add    %edx,%eax
c0006daf:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/fs/fs.c:96
	uint32_t free_sects = part->sec_cnt - used_sects;  
c0006db2:	8b 45 08             	mov    0x8(%ebp),%eax
c0006db5:	8b 40 04             	mov    0x4(%eax),%eax
c0006db8:	2b 45 d0             	sub    -0x30(%ebp),%eax
c0006dbb:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/fs/fs.c:100

	/************** 简单处理块位图占据的扇区数 ***************/
	uint32_t block_bitmap_sects;	//空闲块位图占几个扇区
	block_bitmap_sects = DIV_ROUND_UP(free_sects, BITS_PER_SECTOR);		//free_sects空闲块位图要占几个扇区
c0006dbe:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0006dc1:	05 ff 0f 00 00       	add    $0xfff,%eax
c0006dc6:	c1 e8 0c             	shr    $0xc,%eax
c0006dc9:	89 45 c8             	mov    %eax,-0x38(%ebp)
/work/x86_os_my/fs/fs.c:102
	/* 再算一次空闲块数量 */
	uint32_t block_bitmap_bit_len = free_sects - block_bitmap_sects;	//block_bitmap_bit_len 是位图长度，也是空闲块数量
c0006dcc:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0006dcf:	2b 45 c8             	sub    -0x38(%ebp),%eax
c0006dd2:	89 45 c4             	mov    %eax,-0x3c(%ebp)
/work/x86_os_my/fs/fs.c:103
	block_bitmap_sects = DIV_ROUND_UP(block_bitmap_bit_len, BITS_PER_SECTOR); 
c0006dd5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0006dd8:	05 ff 0f 00 00       	add    $0xfff,%eax
c0006ddd:	c1 e8 0c             	shr    $0xc,%eax
c0006de0:	89 45 c8             	mov    %eax,-0x38(%ebp)
/work/x86_os_my/fs/fs.c:108
	/*********************************************************/

	/* 超级块初始化 */
	struct super_block sb;		//局部变量在栈中512字节
	sb.magic = 0x19590318;
c0006de3:	c7 85 a4 fd ff ff 18 	movl   $0x19590318,-0x25c(%ebp)
c0006dea:	03 59 19 
/work/x86_os_my/fs/fs.c:109
	sb.sec_cnt = part->sec_cnt;
c0006ded:	8b 45 08             	mov    0x8(%ebp),%eax
c0006df0:	8b 40 04             	mov    0x4(%eax),%eax
c0006df3:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
/work/x86_os_my/fs/fs.c:110
	sb.inode_cnt = MAX_FILES_PER_PART;
c0006df9:	c7 85 ac fd ff ff 00 	movl   $0x1000,-0x254(%ebp)
c0006e00:	10 00 00 
/work/x86_os_my/fs/fs.c:111
	sb.part_lba_base = part->start_lba;
c0006e03:	8b 45 08             	mov    0x8(%ebp),%eax
c0006e06:	8b 00                	mov    (%eax),%eax
c0006e08:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
/work/x86_os_my/fs/fs.c:113

	sb.block_bitmap_lba = sb.part_lba_base + 2;	// 第0块是引导块,第1块是超级块
c0006e0e:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
c0006e14:	83 c0 02             	add    $0x2,%eax
c0006e17:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
/work/x86_os_my/fs/fs.c:114
	sb.block_bitmap_sects = block_bitmap_sects;	// 空闲块位图占几个扇区
c0006e1d:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0006e20:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
/work/x86_os_my/fs/fs.c:116

	sb.inode_bitmap_lba = sb.block_bitmap_lba + sb.block_bitmap_sects;
c0006e26:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
c0006e2c:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
c0006e32:	01 d0                	add    %edx,%eax
c0006e34:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
/work/x86_os_my/fs/fs.c:117
	sb.inode_bitmap_sects = inode_bitmap_sects;	// inode位图占几个扇区
c0006e3a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0006e3d:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
/work/x86_os_my/fs/fs.c:119

	sb.inode_table_lba = sb.inode_bitmap_lba + sb.inode_bitmap_sects;
c0006e43:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
c0006e49:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
c0006e4f:	01 d0                	add    %edx,%eax
c0006e51:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
/work/x86_os_my/fs/fs.c:120
	sb.inode_table_sects = inode_table_sects;	// inode数组占几个扇区
c0006e57:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0006e5a:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
/work/x86_os_my/fs/fs.c:122

	sb.data_start_lba = sb.inode_table_lba + sb.inode_table_sects;	// 数据区开始的第一个扇区号
c0006e60:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
c0006e66:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
c0006e6c:	01 d0                	add    %edx,%eax
c0006e6e:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
/work/x86_os_my/fs/fs.c:124

	sb.root_inode_no = 0;	//根目录的inode号是0
c0006e74:	c7 85 d0 fd ff ff 00 	movl   $0x0,-0x230(%ebp)
c0006e7b:	00 00 00 
/work/x86_os_my/fs/fs.c:125
	sb.dir_entry_size = sizeof(struct dir_entry);
c0006e7e:	c7 85 d4 fd ff ff 18 	movl   $0x18,-0x22c(%ebp)
c0006e85:	00 00 00 
/work/x86_os_my/fs/fs.c:127

	printk("%s info:\n", part->name);
c0006e88:	8b 45 08             	mov    0x8(%ebp),%eax
c0006e8b:	83 c0 14             	add    $0x14,%eax
c0006e8e:	83 ec 08             	sub    $0x8,%esp
c0006e91:	50                   	push   %eax
c0006e92:	68 0d db 00 c0       	push   $0xc000db0d
c0006e97:	e8 72 fc ff ff       	call   c0006b0e <printk>
c0006e9c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:128
	printk("   magic:0x%x\n   part_lba_base:0x%x\n   all_sectors:0x%x\n   inode_cnt:0x%x\n   block_bitmap_lba:0x%x\n   block_bitmap_sectors:0x%x\n   inode_bitmap_lba:0x%x\n   inode_bitmap_sectors:0x%x\n   inode_table_lba:0x%x\n   inode_table_sectors:0x%x\n   data_start_lba:0x%x\n", sb.magic, sb.part_lba_base, sb.sec_cnt, sb.inode_cnt, sb.block_bitmap_lba, sb.block_bitmap_sects, sb.inode_bitmap_lba, sb.inode_bitmap_sects, sb.inode_table_lba, sb.inode_table_sects, sb.data_start_lba);
c0006e9f:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
c0006ea5:	8b 9d c8 fd ff ff    	mov    -0x238(%ebp),%ebx
c0006eab:	8b bd c4 fd ff ff    	mov    -0x23c(%ebp),%edi
c0006eb1:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
c0006eb7:	89 85 94 fd ff ff    	mov    %eax,-0x26c(%ebp)
c0006ebd:	8b b5 bc fd ff ff    	mov    -0x244(%ebp),%esi
c0006ec3:	89 b5 90 fd ff ff    	mov    %esi,-0x270(%ebp)
c0006ec9:	8b 8d b8 fd ff ff    	mov    -0x248(%ebp),%ecx
c0006ecf:	89 8d 8c fd ff ff    	mov    %ecx,-0x274(%ebp)
c0006ed5:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
c0006edb:	89 85 88 fd ff ff    	mov    %eax,-0x278(%ebp)
c0006ee1:	8b b5 ac fd ff ff    	mov    -0x254(%ebp),%esi
c0006ee7:	89 b5 84 fd ff ff    	mov    %esi,-0x27c(%ebp)
c0006eed:	8b b5 a8 fd ff ff    	mov    -0x258(%ebp),%esi
c0006ef3:	8b 8d b0 fd ff ff    	mov    -0x250(%ebp),%ecx
c0006ef9:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
c0006eff:	52                   	push   %edx
c0006f00:	53                   	push   %ebx
c0006f01:	57                   	push   %edi
c0006f02:	ff b5 94 fd ff ff    	pushl  -0x26c(%ebp)
c0006f08:	ff b5 90 fd ff ff    	pushl  -0x270(%ebp)
c0006f0e:	ff b5 8c fd ff ff    	pushl  -0x274(%ebp)
c0006f14:	ff b5 88 fd ff ff    	pushl  -0x278(%ebp)
c0006f1a:	ff b5 84 fd ff ff    	pushl  -0x27c(%ebp)
c0006f20:	56                   	push   %esi
c0006f21:	51                   	push   %ecx
c0006f22:	50                   	push   %eax
c0006f23:	68 18 db 00 c0       	push   $0xc000db18
c0006f28:	e8 e1 fb ff ff       	call   c0006b0e <printk>
c0006f2d:	83 c4 30             	add    $0x30,%esp
/work/x86_os_my/fs/fs.c:132


	/***** 1 将超级块写入本分区的1号扇区 *****/
	struct disk* hd = part->my_disk;	// 分区所属的硬盘
c0006f30:	8b 45 08             	mov    0x8(%ebp),%eax
c0006f33:	8b 40 08             	mov    0x8(%eax),%eax
c0006f36:	89 45 c0             	mov    %eax,-0x40(%ebp)
/work/x86_os_my/fs/fs.c:134
	// void ide_write(struct disk* hd, uint32_t lba, void* buf, uint32_t sec_cnt);
	ide_write(hd, part->start_lba + 1, &sb, 1);
c0006f39:	8b 45 08             	mov    0x8(%ebp),%eax
c0006f3c:	8b 00                	mov    (%eax),%eax
c0006f3e:	8d 50 01             	lea    0x1(%eax),%edx
c0006f41:	6a 01                	push   $0x1
c0006f43:	8d 85 a4 fd ff ff    	lea    -0x25c(%ebp),%eax
c0006f49:	50                   	push   %eax
c0006f4a:	52                   	push   %edx
c0006f4b:	ff 75 c0             	pushl  -0x40(%ebp)
c0006f4e:	e8 b6 f2 ff ff       	call   c0006209 <ide_write>
c0006f53:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:135
	printk("   super_block_lba:0x%x\n", part->start_lba + 1);
c0006f56:	8b 45 08             	mov    0x8(%ebp),%eax
c0006f59:	8b 00                	mov    (%eax),%eax
c0006f5b:	83 c0 01             	add    $0x1,%eax
c0006f5e:	83 ec 08             	sub    $0x8,%esp
c0006f61:	50                   	push   %eax
c0006f62:	68 1a dc 00 c0       	push   $0xc000dc1a
c0006f67:	e8 a2 fb ff ff       	call   c0006b0e <printk>
c0006f6c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:139


	/* 他们三个写到硬盘上：block_bitmap_sects/inode_bitmap_sects/inode_table_sects 缓冲区选三者最大的 */
	uint32_t buf_size = (sb.block_bitmap_sects >= sb.inode_bitmap_sects ? sb.block_bitmap_sects : sb.inode_bitmap_sects);
c0006f6f:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
c0006f75:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
c0006f7b:	39 c2                	cmp    %eax,%edx
c0006f7d:	0f 43 c2             	cmovae %edx,%eax
c0006f80:	89 45 bc             	mov    %eax,-0x44(%ebp)
/work/x86_os_my/fs/fs.c:140
	buf_size = (buf_size >= sb.inode_table_sects ? buf_size : sb.inode_table_sects) * SECTOR_SIZE;
c0006f83:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
c0006f89:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0006f8c:	39 c2                	cmp    %eax,%edx
c0006f8e:	0f 43 c2             	cmovae %edx,%eax
c0006f91:	c1 e0 09             	shl    $0x9,%eax
c0006f94:	89 45 bc             	mov    %eax,-0x44(%ebp)
/work/x86_os_my/fs/fs.c:141
	uint8_t* buf = (uint8_t*)sys_malloc(buf_size);	// 申请的内存由内存管理系统清0后返回
c0006f97:	83 ec 0c             	sub    $0xc,%esp
c0006f9a:	ff 75 bc             	pushl  -0x44(%ebp)
c0006f9d:	e8 ba bd ff ff       	call   c0002d5c <sys_malloc>
c0006fa2:	83 c4 10             	add    $0x10,%esp
c0006fa5:	89 45 b8             	mov    %eax,-0x48(%ebp)
/work/x86_os_my/fs/fs.c:146


	/***** 2 将块位图初始化并写入sb.block_bitmap_lba *****/
	/* 初始化块位图 block_bitmap */
	buf[0] |= 0x01;	// 第0个块预留给根目录,位图中先占位
c0006fa8:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0006fab:	0f b6 00             	movzbl (%eax),%eax
c0006fae:	83 c8 01             	or     $0x1,%eax
c0006fb1:	89 c2                	mov    %eax,%edx
c0006fb3:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0006fb6:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/fs/fs.c:147
	uint32_t block_bitmap_last_byte = block_bitmap_bit_len / 8;		//block_bitmap_bit_len 是位图长度，也是空闲块数量
c0006fb8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0006fbb:	c1 e8 03             	shr    $0x3,%eax
c0006fbe:	89 45 b4             	mov    %eax,-0x4c(%ebp)
/work/x86_os_my/fs/fs.c:148
	uint8_t  block_bitmap_last_bit  = block_bitmap_bit_len % 8;
c0006fc1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0006fc4:	83 e0 07             	and    $0x7,%eax
c0006fc7:	88 45 b3             	mov    %al,-0x4d(%ebp)
/work/x86_os_my/fs/fs.c:149
	uint32_t last_size = SECTOR_SIZE - (block_bitmap_last_byte % SECTOR_SIZE);	// last_size是位图占用的最后一个扇区中，不足一扇区的空闲部分
c0006fca:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0006fcd:	25 ff 01 00 00       	and    $0x1ff,%eax
c0006fd2:	ba 00 02 00 00       	mov    $0x200,%edx
c0006fd7:	29 c2                	sub    %eax,%edx
c0006fd9:	89 d0                	mov    %edx,%eax
c0006fdb:	89 45 ac             	mov    %eax,-0x54(%ebp)
/work/x86_os_my/fs/fs.c:152

	// 1 空闲块位图最后一字节，到最后一字节所在扇区的末尾，全置为占用（空闲块位图所在扇区的空闲部分）
	memset(&buf[block_bitmap_last_byte], 0xff, last_size);
c0006fde:	8b 55 b8             	mov    -0x48(%ebp),%edx
c0006fe1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0006fe4:	01 d0                	add    %edx,%eax
c0006fe6:	83 ec 04             	sub    $0x4,%esp
c0006fe9:	ff 75 ac             	pushl  -0x54(%ebp)
c0006fec:	68 ff 00 00 00       	push   $0xff
c0006ff1:	50                   	push   %eax
c0006ff2:	e8 5c c8 ff ff       	call   c0003853 <memset>
c0006ff7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:155

	// 2 上一步中最后一字节内，有效的位重新置0
	uint8_t bit_idx = 0;
c0006ffa:	c6 45 e7 00          	movb   $0x0,-0x19(%ebp)
/work/x86_os_my/fs/fs.c:156
	while (bit_idx <= block_bitmap_last_bit) {
c0006ffe:	eb 37                	jmp    c0007037 <partition_format+0x2c2>
/work/x86_os_my/fs/fs.c:157
		buf[block_bitmap_last_byte] &= ~(1 << bit_idx++);
c0007000:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c0007004:	8d 50 01             	lea    0x1(%eax),%edx
c0007007:	88 55 e7             	mov    %dl,-0x19(%ebp)
c000700a:	0f b6 c0             	movzbl %al,%eax
c000700d:	ba 01 00 00 00       	mov    $0x1,%edx
c0007012:	89 c1                	mov    %eax,%ecx
c0007014:	d3 e2                	shl    %cl,%edx
c0007016:	89 d0                	mov    %edx,%eax
c0007018:	f7 d0                	not    %eax
c000701a:	89 c3                	mov    %eax,%ebx
c000701c:	8b 55 b8             	mov    -0x48(%ebp),%edx
c000701f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0007022:	01 d0                	add    %edx,%eax
c0007024:	8b 4d b8             	mov    -0x48(%ebp),%ecx
c0007027:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c000702a:	01 ca                	add    %ecx,%edx
c000702c:	0f b6 12             	movzbl (%edx),%edx
c000702f:	89 d1                	mov    %edx,%ecx
c0007031:	89 da                	mov    %ebx,%edx
c0007033:	21 ca                	and    %ecx,%edx
c0007035:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/fs/fs.c:156
	// 1 空闲块位图最后一字节，到最后一字节所在扇区的末尾，全置为占用（空闲块位图所在扇区的空闲部分）
	memset(&buf[block_bitmap_last_byte], 0xff, last_size);

	// 2 上一步中最后一字节内，有效的位重新置0
	uint8_t bit_idx = 0;
	while (bit_idx <= block_bitmap_last_bit) {
c0007037:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c000703b:	3a 45 b3             	cmp    -0x4d(%ebp),%al
c000703e:	76 c0                	jbe    c0007000 <partition_format+0x28b>
/work/x86_os_my/fs/fs.c:160
		buf[block_bitmap_last_byte] &= ~(1 << bit_idx++);
	}
	// 3 写回到硬盘 空闲块位图 区域
	ide_write(hd, sb.block_bitmap_lba, buf, sb.block_bitmap_sects);
c0007040:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
c0007046:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
c000704c:	52                   	push   %edx
c000704d:	ff 75 b8             	pushl  -0x48(%ebp)
c0007050:	50                   	push   %eax
c0007051:	ff 75 c0             	pushl  -0x40(%ebp)
c0007054:	e8 b0 f1 ff ff       	call   c0006209 <ide_write>
c0007059:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:164


	/***** 3 将inode位图初始化并写入sb.inode_bitmap_lba *****/
	memset(buf, 0, buf_size);
c000705c:	83 ec 04             	sub    $0x4,%esp
c000705f:	ff 75 bc             	pushl  -0x44(%ebp)
c0007062:	6a 00                	push   $0x0
c0007064:	ff 75 b8             	pushl  -0x48(%ebp)
c0007067:	e8 e7 c7 ff ff       	call   c0003853 <memset>
c000706c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:165
	buf[0] |= 0x1;	// 第0个inode分给了根目录
c000706f:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0007072:	0f b6 00             	movzbl (%eax),%eax
c0007075:	83 c8 01             	or     $0x1,%eax
c0007078:	89 c2                	mov    %eax,%edx
c000707a:	8b 45 b8             	mov    -0x48(%ebp),%eax
c000707d:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/fs/fs.c:169
	/* 最多4096个文件，inode位图4096个bit，正好占用1扇区，inode_bitmap_sects等于1
	 * 不像block_bitmap，在inode_bitmap的扇区中，没有多余的空闲无效位 */
	// 写回到硬盘 inode位图 区域
	ide_write(hd, sb.inode_bitmap_lba, buf, sb.inode_bitmap_sects);
c000707f:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
c0007085:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
c000708b:	52                   	push   %edx
c000708c:	ff 75 b8             	pushl  -0x48(%ebp)
c000708f:	50                   	push   %eax
c0007090:	ff 75 c0             	pushl  -0x40(%ebp)
c0007093:	e8 71 f1 ff ff       	call   c0006209 <ide_write>
c0007098:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:174


	/***** 4 将inode数组初始化并写入sb.inode_table_lba *****/
	/* 处理inode_table中的第0项，即根目录所在的inode */
	memset(buf, 0, buf_size);
c000709b:	83 ec 04             	sub    $0x4,%esp
c000709e:	ff 75 bc             	pushl  -0x44(%ebp)
c00070a1:	6a 00                	push   $0x0
c00070a3:	ff 75 b8             	pushl  -0x48(%ebp)
c00070a6:	e8 a8 c7 ff ff       	call   c0003853 <memset>
c00070ab:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:175
	struct inode* i = (struct inode*)buf;
c00070ae:	8b 45 b8             	mov    -0x48(%ebp),%eax
c00070b1:	89 45 a8             	mov    %eax,-0x58(%ebp)
/work/x86_os_my/fs/fs.c:176
	i->i_size = sb.dir_entry_size * 2;		// .和..	// 所有目录项大小之和
c00070b4:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
c00070ba:	8d 14 00             	lea    (%eax,%eax,1),%edx
c00070bd:	8b 45 a8             	mov    -0x58(%ebp),%eax
c00070c0:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/fs.c:177
	i->i_no = 0;   // 根目录占inode数组中第0个inode
c00070c3:	8b 45 a8             	mov    -0x58(%ebp),%eax
c00070c6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/fs/fs.c:181
	// inode管理的是数据块（对于我们来说就是扇区）
	// 此处是指定根目录这个inode管理的数据块的位置
	// i_sectors数组后边的元素都是0 没用到
	i->i_sectors[0] = sb.data_start_lba;
c00070cc:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
c00070d2:	8b 45 a8             	mov    -0x58(%ebp),%eax
c00070d5:	89 50 10             	mov    %edx,0x10(%eax)
/work/x86_os_my/fs/fs.c:184
	// 写到硬盘 inode数组
	// 其实我们只处理了第0项
	ide_write(hd, sb.inode_table_lba, buf, sb.inode_table_sects);
c00070d8:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
c00070de:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
c00070e4:	52                   	push   %edx
c00070e5:	ff 75 b8             	pushl  -0x48(%ebp)
c00070e8:	50                   	push   %eax
c00070e9:	ff 75 c0             	pushl  -0x40(%ebp)
c00070ec:	e8 18 f1 ff ff       	call   c0006209 <ide_write>
c00070f1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:190


	/***** 5 将根目录初始化并写入sb.data_start_lba *****/
	/* 写入根目录的两个目录项.和.. */
	// inode不知道数据块中是普通文件，还是目录。但是目录项知道。
	memset(buf, 0, buf_size);
c00070f4:	83 ec 04             	sub    $0x4,%esp
c00070f7:	ff 75 bc             	pushl  -0x44(%ebp)
c00070fa:	6a 00                	push   $0x0
c00070fc:	ff 75 b8             	pushl  -0x48(%ebp)
c00070ff:	e8 4f c7 ff ff       	call   c0003853 <memset>
c0007104:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:191
	struct dir_entry* p_de = (struct dir_entry*)buf;
c0007107:	8b 45 b8             	mov    -0x48(%ebp),%eax
c000710a:	89 45 a4             	mov    %eax,-0x5c(%ebp)
/work/x86_os_my/fs/fs.c:194

	/* 初始化当前目录"." */
	memcpy(p_de->filename, ".", 1);
c000710d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0007110:	83 ec 04             	sub    $0x4,%esp
c0007113:	6a 01                	push   $0x1
c0007115:	68 33 dc 00 c0       	push   $0xc000dc33
c000711a:	50                   	push   %eax
c000711b:	e8 85 c7 ff ff       	call   c00038a5 <memcpy>
c0007120:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:195
	p_de->i_no = 0;	// 目录或文件对应的inode编号
c0007123:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0007126:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
/work/x86_os_my/fs/fs.c:196
	p_de->f_type = FT_DIRECTORY;
c000712d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0007130:	c7 40 14 02 00 00 00 	movl   $0x2,0x14(%eax)
/work/x86_os_my/fs/fs.c:198

	p_de++;
c0007137:	83 45 a4 18          	addl   $0x18,-0x5c(%ebp)
/work/x86_os_my/fs/fs.c:201

	/* 初始化当前目录父目录".." */
	memcpy(p_de->filename, "..", 2);
c000713b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c000713e:	83 ec 04             	sub    $0x4,%esp
c0007141:	6a 02                	push   $0x2
c0007143:	68 35 dc 00 c0       	push   $0xc000dc35
c0007148:	50                   	push   %eax
c0007149:	e8 57 c7 ff ff       	call   c00038a5 <memcpy>
c000714e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:202
	p_de->i_no = 0;	// 根目录的父目录依然是根目录自己
c0007151:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0007154:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
/work/x86_os_my/fs/fs.c:203
	p_de->f_type = FT_DIRECTORY;
c000715b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c000715e:	c7 40 14 02 00 00 00 	movl   $0x2,0x14(%eax)
/work/x86_os_my/fs/fs.c:206

	/* sb.data_start_lba已经分配给了根目录，我们把根目录的目录项放进去 */
	ide_write(hd, sb.data_start_lba, buf, 1);
c0007165:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
c000716b:	6a 01                	push   $0x1
c000716d:	ff 75 b8             	pushl  -0x48(%ebp)
c0007170:	50                   	push   %eax
c0007171:	ff 75 c0             	pushl  -0x40(%ebp)
c0007174:	e8 90 f0 ff ff       	call   c0006209 <ide_write>
c0007179:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:209


	printk("   root_dir_lba:0x%x\n", sb.data_start_lba);
c000717c:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
c0007182:	83 ec 08             	sub    $0x8,%esp
c0007185:	50                   	push   %eax
c0007186:	68 38 dc 00 c0       	push   $0xc000dc38
c000718b:	e8 7e f9 ff ff       	call   c0006b0e <printk>
c0007190:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:210
	printk("%s format done\n", part->name);
c0007193:	8b 45 08             	mov    0x8(%ebp),%eax
c0007196:	83 c0 14             	add    $0x14,%eax
c0007199:	83 ec 08             	sub    $0x8,%esp
c000719c:	50                   	push   %eax
c000719d:	68 4e dc 00 c0       	push   $0xc000dc4e
c00071a2:	e8 67 f9 ff ff       	call   c0006b0e <printk>
c00071a7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:211
	sys_free(buf);
c00071aa:	83 ec 0c             	sub    $0xc,%esp
c00071ad:	ff 75 b8             	pushl  -0x48(%ebp)
c00071b0:	e8 d4 c1 ff ff       	call   c0003389 <sys_free>
c00071b5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:212
}
c00071b8:	90                   	nop
c00071b9:	8d 65 f4             	lea    -0xc(%ebp),%esp
c00071bc:	5b                   	pop    %ebx
c00071bd:	5e                   	pop    %esi
c00071be:	5f                   	pop    %edi
c00071bf:	5d                   	pop    %ebp
c00071c0:	c3                   	ret    

c00071c1 <path_parse>:
path_parse():
/work/x86_os_my/fs/fs.c:217


/* 将最上层路径名称解析出来，比如pathname="a/b/c"得到name_store="a"
 * 返回剩下的目录 "b/c" */
char* path_parse(char* pathname, char* name_store) {
c00071c1:	55                   	push   %ebp
c00071c2:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/fs/fs.c:218
	if (pathname[0] == '/') {	// 根目录不需要单独解析
c00071c4:	8b 45 08             	mov    0x8(%ebp),%eax
c00071c7:	0f b6 00             	movzbl (%eax),%eax
c00071ca:	3c 2f                	cmp    $0x2f,%al
c00071cc:	75 27                	jne    c00071f5 <path_parse+0x34>
/work/x86_os_my/fs/fs.c:220 (discriminator 1)
		/* 路径中出现1个或多个连续的字符'/',将这些'/'跳过,如"///a/b" */
		while(*(++pathname) == '/');
c00071ce:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c00071d2:	8b 45 08             	mov    0x8(%ebp),%eax
c00071d5:	0f b6 00             	movzbl (%eax),%eax
c00071d8:	3c 2f                	cmp    $0x2f,%al
c00071da:	74 f2                	je     c00071ce <path_parse+0xd>
/work/x86_os_my/fs/fs.c:224
	}

	/* 开始一般的路径解析 */
	while (*pathname != '/' && *pathname != 0) {
c00071dc:	eb 17                	jmp    c00071f5 <path_parse+0x34>
/work/x86_os_my/fs/fs.c:225
		*name_store++ = *pathname++;
c00071de:	8b 45 0c             	mov    0xc(%ebp),%eax
c00071e1:	8d 50 01             	lea    0x1(%eax),%edx
c00071e4:	89 55 0c             	mov    %edx,0xc(%ebp)
c00071e7:	8b 55 08             	mov    0x8(%ebp),%edx
c00071ea:	8d 4a 01             	lea    0x1(%edx),%ecx
c00071ed:	89 4d 08             	mov    %ecx,0x8(%ebp)
c00071f0:	0f b6 12             	movzbl (%edx),%edx
c00071f3:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/fs/fs.c:224
		/* 路径中出现1个或多个连续的字符'/',将这些'/'跳过,如"///a/b" */
		while(*(++pathname) == '/');
	}

	/* 开始一般的路径解析 */
	while (*pathname != '/' && *pathname != 0) {
c00071f5:	8b 45 08             	mov    0x8(%ebp),%eax
c00071f8:	0f b6 00             	movzbl (%eax),%eax
c00071fb:	3c 2f                	cmp    $0x2f,%al
c00071fd:	74 0a                	je     c0007209 <path_parse+0x48>
/work/x86_os_my/fs/fs.c:224 (discriminator 1)
c00071ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0007202:	0f b6 00             	movzbl (%eax),%eax
c0007205:	84 c0                	test   %al,%al
c0007207:	75 d5                	jne    c00071de <path_parse+0x1d>
/work/x86_os_my/fs/fs.c:228
		*name_store++ = *pathname++;
	}

	if (pathname[0] == 0) {   // 若路径字符串为空则返回NULL
c0007209:	8b 45 08             	mov    0x8(%ebp),%eax
c000720c:	0f b6 00             	movzbl (%eax),%eax
c000720f:	84 c0                	test   %al,%al
c0007211:	75 07                	jne    c000721a <path_parse+0x59>
/work/x86_os_my/fs/fs.c:229
		return NULL;
c0007213:	b8 00 00 00 00       	mov    $0x0,%eax
c0007218:	eb 03                	jmp    c000721d <path_parse+0x5c>
/work/x86_os_my/fs/fs.c:231
	}
	return pathname;
c000721a:	8b 45 08             	mov    0x8(%ebp),%eax
/work/x86_os_my/fs/fs.c:232
}
c000721d:	5d                   	pop    %ebp
c000721e:	c3                   	ret    

c000721f <path_depth_cnt>:
path_depth_cnt():
/work/x86_os_my/fs/fs.c:235

/* 返回路径深度,比如/a/b/c,深度为3 */
int32_t path_depth_cnt(char* pathname) {
c000721f:	55                   	push   %ebp
c0007220:	89 e5                	mov    %esp,%ebp
c0007222:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/fs/fs.c:236
	ASSERT(pathname != NULL);
c0007225:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0007229:	75 1c                	jne    c0007247 <path_depth_cnt+0x28>
/work/x86_os_my/fs/fs.c:236 (discriminator 1)
c000722b:	68 5e dc 00 c0       	push   $0xc000dc5e
c0007230:	68 c4 e2 00 c0       	push   $0xc000e2c4
c0007235:	68 ec 00 00 00       	push   $0xec
c000723a:	68 f5 da 00 c0       	push   $0xc000daf5
c000723f:	e8 6d b1 ff ff       	call   c00023b1 <panic_spin>
c0007244:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:237
	char* p = pathname;
c0007247:	8b 45 08             	mov    0x8(%ebp),%eax
c000724a:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:239
	char name[MAX_FILE_NAME_LEN];	// 用于path_parse的参数做路径解析
	uint32_t depth = 0;
c000724d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:242

	/* 解析路径,从中拆分出各级名称 */
	p = path_parse(p, name);
c0007254:	83 ec 08             	sub    $0x8,%esp
c0007257:	8d 45 e0             	lea    -0x20(%ebp),%eax
c000725a:	50                   	push   %eax
c000725b:	ff 75 f4             	pushl  -0xc(%ebp)
c000725e:	e8 5e ff ff ff       	call   c00071c1 <path_parse>
c0007263:	83 c4 10             	add    $0x10,%esp
c0007266:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:243
	while (name[0]) {
c0007269:	eb 32                	jmp    c000729d <path_depth_cnt+0x7e>
/work/x86_os_my/fs/fs.c:244
		depth++;
c000726b:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:245
		memset(name, 0, MAX_FILE_NAME_LEN);
c000726f:	83 ec 04             	sub    $0x4,%esp
c0007272:	6a 10                	push   $0x10
c0007274:	6a 00                	push   $0x0
c0007276:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0007279:	50                   	push   %eax
c000727a:	e8 d4 c5 ff ff       	call   c0003853 <memset>
c000727f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:246
		if (p) {	// 如果p不等于NULL,继续分析路径
c0007282:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0007286:	74 15                	je     c000729d <path_depth_cnt+0x7e>
/work/x86_os_my/fs/fs.c:247
			p  = path_parse(p, name);
c0007288:	83 ec 08             	sub    $0x8,%esp
c000728b:	8d 45 e0             	lea    -0x20(%ebp),%eax
c000728e:	50                   	push   %eax
c000728f:	ff 75 f4             	pushl  -0xc(%ebp)
c0007292:	e8 2a ff ff ff       	call   c00071c1 <path_parse>
c0007297:	83 c4 10             	add    $0x10,%esp
c000729a:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:243
	char name[MAX_FILE_NAME_LEN];	// 用于path_parse的参数做路径解析
	uint32_t depth = 0;

	/* 解析路径,从中拆分出各级名称 */
	p = path_parse(p, name);
	while (name[0]) {
c000729d:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c00072a1:	84 c0                	test   %al,%al
c00072a3:	75 c6                	jne    c000726b <path_depth_cnt+0x4c>
/work/x86_os_my/fs/fs.c:250
		memset(name, 0, MAX_FILE_NAME_LEN);
		if (p) {	// 如果p不等于NULL,继续分析路径
			p  = path_parse(p, name);
		}
	}
	return depth;
c00072a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
/work/x86_os_my/fs/fs.c:251
}
c00072a8:	c9                   	leave  
c00072a9:	c3                   	ret    

c00072aa <search_file>:
search_file():
/work/x86_os_my/fs/fs.c:260
 * 全局变量 struct dir root_dir 定义在 dir.c
 * 也支持 /./a 或者 /../b 会把.和..当做一个目录项继续往下层找
 * /a/b/c若c不存在，那么 searched_record.searched_path 是 /a/b/c
 * 注意下边三种return的地方，是三种情况！
 */
static int search_file(const char* pathname, struct path_search_record* searched_record) {
c00072aa:	55                   	push   %ebp
c00072ab:	89 e5                	mov    %esp,%ebp
c00072ad:	83 ec 48             	sub    $0x48,%esp
/work/x86_os_my/fs/fs.c:262
	/* 如果待查找的是根目录,为避免下面无用的查找,直接返回已知根目录信息 */
	if (!strcmp(pathname, "/") || !strcmp(pathname, "/.") || !strcmp(pathname, "/..")) {
c00072b0:	83 ec 08             	sub    $0x8,%esp
c00072b3:	68 6f dc 00 c0       	push   $0xc000dc6f
c00072b8:	ff 75 08             	pushl  0x8(%ebp)
c00072bb:	e8 68 c7 ff ff       	call   c0003a28 <strcmp>
c00072c0:	83 c4 10             	add    $0x10,%esp
c00072c3:	84 c0                	test   %al,%al
c00072c5:	74 2e                	je     c00072f5 <search_file+0x4b>
/work/x86_os_my/fs/fs.c:262 (discriminator 1)
c00072c7:	83 ec 08             	sub    $0x8,%esp
c00072ca:	68 71 dc 00 c0       	push   $0xc000dc71
c00072cf:	ff 75 08             	pushl  0x8(%ebp)
c00072d2:	e8 51 c7 ff ff       	call   c0003a28 <strcmp>
c00072d7:	83 c4 10             	add    $0x10,%esp
c00072da:	84 c0                	test   %al,%al
c00072dc:	74 17                	je     c00072f5 <search_file+0x4b>
/work/x86_os_my/fs/fs.c:262 (discriminator 2)
c00072de:	83 ec 08             	sub    $0x8,%esp
c00072e1:	68 74 dc 00 c0       	push   $0xc000dc74
c00072e6:	ff 75 08             	pushl  0x8(%ebp)
c00072e9:	e8 3a c7 ff ff       	call   c0003a28 <strcmp>
c00072ee:	83 c4 10             	add    $0x10,%esp
c00072f1:	84 c0                	test   %al,%al
c00072f3:	75 2a                	jne    c000731f <search_file+0x75>
/work/x86_os_my/fs/fs.c:263
		searched_record->parent_dir = &root_dir;	// 直接父目录
c00072f5:	8b 45 0c             	mov    0xc(%ebp),%eax
c00072f8:	c7 80 00 02 00 00 60 	movl   $0xc0013160,0x200(%eax)
c00072ff:	31 01 c0 
/work/x86_os_my/fs/fs.c:264
		searched_record->file_type = FT_DIRECTORY;	// FT_UNKNOWN代表没找到，找到才有类型是文件或目录
c0007302:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007305:	c7 80 04 02 00 00 02 	movl   $0x2,0x204(%eax)
c000730c:	00 00 00 
/work/x86_os_my/fs/fs.c:265
		searched_record->searched_path[0] = 0;		// 搜索过的路径置空
c000730f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007312:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/fs/fs.c:266
		return 0;
c0007315:	b8 00 00 00 00       	mov    $0x0,%eax
c000731a:	e9 08 02 00 00       	jmp    c0007527 <search_file+0x27d>
/work/x86_os_my/fs/fs.c:269
	}

	uint32_t path_len = strlen(pathname);
c000731f:	83 ec 0c             	sub    $0xc,%esp
c0007322:	ff 75 08             	pushl  0x8(%ebp)
c0007325:	e8 b3 c6 ff ff       	call   c00039dd <strlen>
c000732a:	83 c4 10             	add    $0x10,%esp
c000732d:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:271
	/* 保证pathname至少是这样的路径/x且小于最大长度 */
	ASSERT(pathname[0] == '/' && path_len > 1 && path_len < MAX_PATH_LEN);
c0007330:	8b 45 08             	mov    0x8(%ebp),%eax
c0007333:	0f b6 00             	movzbl (%eax),%eax
c0007336:	3c 2f                	cmp    $0x2f,%al
c0007338:	75 0f                	jne    c0007349 <search_file+0x9f>
/work/x86_os_my/fs/fs.c:271 (discriminator 1)
c000733a:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
c000733e:	76 09                	jbe    c0007349 <search_file+0x9f>
/work/x86_os_my/fs/fs.c:271 (discriminator 3)
c0007340:	81 7d e8 ff 01 00 00 	cmpl   $0x1ff,-0x18(%ebp)
c0007347:	76 1c                	jbe    c0007365 <search_file+0xbb>
/work/x86_os_my/fs/fs.c:271 (discriminator 5)
c0007349:	68 78 dc 00 c0       	push   $0xc000dc78
c000734e:	68 d4 e2 00 c0       	push   $0xc000e2d4
c0007353:	68 0f 01 00 00       	push   $0x10f
c0007358:	68 f5 da 00 c0       	push   $0xc000daf5
c000735d:	e8 4f b0 ff ff       	call   c00023b1 <panic_spin>
c0007362:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:272
	char* sub_path = (char*)pathname;
c0007365:	8b 45 08             	mov    0x8(%ebp),%eax
c0007368:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:273
	struct dir* parent_dir = &root_dir;
c000736b:	c7 45 f0 60 31 01 c0 	movl   $0xc0013160,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:277
	struct dir_entry dir_e;

	/* 数组name每次的值分别是各级目录的名字："a","b","c" */
	char name[MAX_FILE_NAME_LEN] = {0};
c0007372:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
c0007379:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
c0007380:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
c0007387:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
/work/x86_os_my/fs/fs.c:279

	searched_record->parent_dir = parent_dir;	// 直接父目录
c000738e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007391:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0007394:	89 90 00 02 00 00    	mov    %edx,0x200(%eax)
/work/x86_os_my/fs/fs.c:280
	searched_record->file_type = FT_UNKNOWN;	// 初始值代表没找到，找到才有类型是文件或目录
c000739a:	8b 45 0c             	mov    0xc(%ebp),%eax
c000739d:	c7 80 04 02 00 00 00 	movl   $0x0,0x204(%eax)
c00073a4:	00 00 00 
/work/x86_os_my/fs/fs.c:281
	uint32_t parent_inode_no = 0;  // 备份各层解析出来的路径，的父目录，的inode号
c00073a7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:283

	sub_path = path_parse(sub_path, name);
c00073ae:	83 ec 08             	sub    $0x8,%esp
c00073b1:	8d 45 c0             	lea    -0x40(%ebp),%eax
c00073b4:	50                   	push   %eax
c00073b5:	ff 75 f4             	pushl  -0xc(%ebp)
c00073b8:	e8 04 fe ff ff       	call   c00071c1 <path_parse>
c00073bd:	83 c4 10             	add    $0x10,%esp
c00073c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:284
	while (name[0]) {	   // 若第一个字符就是结束符,结束循环
c00073c3:	e9 0f 01 00 00       	jmp    c00074d7 <search_file+0x22d>
/work/x86_os_my/fs/fs.c:286
		/* 记录查找过的路径,但不能超过searched_path的长度512字节 */
		ASSERT(strlen(searched_record->searched_path) < 512);
c00073c8:	8b 45 0c             	mov    0xc(%ebp),%eax
c00073cb:	83 ec 0c             	sub    $0xc,%esp
c00073ce:	50                   	push   %eax
c00073cf:	e8 09 c6 ff ff       	call   c00039dd <strlen>
c00073d4:	83 c4 10             	add    $0x10,%esp
c00073d7:	3d ff 01 00 00       	cmp    $0x1ff,%eax
c00073dc:	76 1c                	jbe    c00073fa <search_file+0x150>
/work/x86_os_my/fs/fs.c:286 (discriminator 1)
c00073de:	68 b8 dc 00 c0       	push   $0xc000dcb8
c00073e3:	68 d4 e2 00 c0       	push   $0xc000e2d4
c00073e8:	68 1e 01 00 00       	push   $0x11e
c00073ed:	68 f5 da 00 c0       	push   $0xc000daf5
c00073f2:	e8 ba af ff ff       	call   c00023b1 <panic_spin>
c00073f7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:289

		/* 追加到已存在的父目录 */
		strcat(searched_record->searched_path, "/");
c00073fa:	8b 45 0c             	mov    0xc(%ebp),%eax
c00073fd:	83 ec 08             	sub    $0x8,%esp
c0007400:	68 6f dc 00 c0       	push   $0xc000dc6f
c0007405:	50                   	push   %eax
c0007406:	e8 4c c7 ff ff       	call   c0003b57 <strcat>
c000740b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:290
		strcat(searched_record->searched_path, name);
c000740e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007411:	83 ec 08             	sub    $0x8,%esp
c0007414:	8d 55 c0             	lea    -0x40(%ebp),%edx
c0007417:	52                   	push   %edx
c0007418:	50                   	push   %eax
c0007419:	e8 39 c7 ff ff       	call   c0003b57 <strcat>
c000741e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:293

		/* 在所给的目录中查找目录项，找到后将目录项填入dir_e */
		if (false != search_dir_entry(cur_part, parent_dir, name, &dir_e)) {
c0007421:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0007426:	8d 55 d0             	lea    -0x30(%ebp),%edx
c0007429:	52                   	push   %edx
c000742a:	8d 55 c0             	lea    -0x40(%ebp),%edx
c000742d:	52                   	push   %edx
c000742e:	ff 75 f0             	pushl  -0x10(%ebp)
c0007431:	50                   	push   %eax
c0007432:	e8 70 30 00 00       	call   c000a4a7 <search_dir_entry>
c0007437:	83 c4 10             	add    $0x10,%esp
c000743a:	85 c0                	test   %eax,%eax
c000743c:	0f 84 8e 00 00 00    	je     c00074d0 <search_file+0x226>
/work/x86_os_my/fs/fs.c:294
			memset(name, 0, MAX_FILE_NAME_LEN);
c0007442:	83 ec 04             	sub    $0x4,%esp
c0007445:	6a 10                	push   $0x10
c0007447:	6a 00                	push   $0x0
c0007449:	8d 45 c0             	lea    -0x40(%ebp),%eax
c000744c:	50                   	push   %eax
c000744d:	e8 01 c4 ff ff       	call   c0003853 <memset>
c0007452:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:296
			/* 若sub_path不等于NULL，也就是搜索未结束，继续拆分路径 */
			if (sub_path) {
c0007455:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0007459:	74 15                	je     c0007470 <search_file+0x1c6>
/work/x86_os_my/fs/fs.c:297
				sub_path = path_parse(sub_path, name);
c000745b:	83 ec 08             	sub    $0x8,%esp
c000745e:	8d 45 c0             	lea    -0x40(%ebp),%eax
c0007461:	50                   	push   %eax
c0007462:	ff 75 f4             	pushl  -0xc(%ebp)
c0007465:	e8 57 fd ff ff       	call   c00071c1 <path_parse>
c000746a:	83 c4 10             	add    $0x10,%esp
c000746d:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:300
			}

			if (FT_DIRECTORY == dir_e.f_type) {			// 如果被打开的是目录
c0007470:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0007473:	83 f8 02             	cmp    $0x2,%eax
c0007476:	75 3e                	jne    c00074b6 <search_file+0x20c>
/work/x86_os_my/fs/fs.c:301
				parent_inode_no = parent_dir->inode->i_no;
c0007478:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000747b:	8b 00                	mov    (%eax),%eax
c000747d:	8b 00                	mov    (%eax),%eax
c000747f:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:302
				dir_close(parent_dir);
c0007482:	83 ec 0c             	sub    $0xc,%esp
c0007485:	ff 75 f0             	pushl  -0x10(%ebp)
c0007488:	e8 f2 31 00 00       	call   c000a67f <dir_close>
c000748d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:304

				parent_dir = dir_open(cur_part, dir_e.i_no);
c0007490:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0007493:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0007498:	83 ec 08             	sub    $0x8,%esp
c000749b:	52                   	push   %edx
c000749c:	50                   	push   %eax
c000749d:	e8 c5 2f 00 00       	call   c000a467 <dir_open>
c00074a2:	83 c4 10             	add    $0x10,%esp
c00074a5:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:305
				searched_record->parent_dir = parent_dir;	// 更新直接父目录
c00074a8:	8b 45 0c             	mov    0xc(%ebp),%eax
c00074ab:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00074ae:	89 90 00 02 00 00    	mov    %edx,0x200(%eax)
/work/x86_os_my/fs/fs.c:306
				continue;
c00074b4:	eb 21                	jmp    c00074d7 <search_file+0x22d>
/work/x86_os_my/fs/fs.c:307
			} else if (FT_REGULAR == dir_e.f_type) {	// 若是普通文件
c00074b6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00074b9:	83 f8 01             	cmp    $0x1,%eax
c00074bc:	75 19                	jne    c00074d7 <search_file+0x22d>
/work/x86_os_my/fs/fs.c:312
				/* 如果搜索路径为 /a/b 但是目录下只有文件a 此时也会返回文件a的inode号【中间某个目录不存在】
				 * 由主调函数根据 searched_record.searched_path 判断："提供的 pathname 是否正确，是否处理完了"
				 * 【情况1】
				 */
				searched_record->file_type = FT_REGULAR;
c00074be:	8b 45 0c             	mov    0xc(%ebp),%eax
c00074c1:	c7 80 04 02 00 00 01 	movl   $0x1,0x204(%eax)
c00074c8:	00 00 00 
/work/x86_os_my/fs/fs.c:313
				return dir_e.i_no;
c00074cb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00074ce:	eb 57                	jmp    c0007527 <search_file+0x27d>
/work/x86_os_my/fs/fs.c:321
			/* 找不到目录项时，要留着 parent_dir 不要关闭，
			 * 主调函数需要据此知道在哪个目录中创建文件，此时的 searched_record->parent_dir 指向父目录，主调函数负责关闭该目录
			 * 主调函数，创建新文件的话需要在 parent_dir 中创建
			 * 【情况2】
			 */
			return -1;
c00074d0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00074d5:	eb 50                	jmp    c0007527 <search_file+0x27d>
/work/x86_os_my/fs/fs.c:284
	searched_record->parent_dir = parent_dir;	// 直接父目录
	searched_record->file_type = FT_UNKNOWN;	// 初始值代表没找到，找到才有类型是文件或目录
	uint32_t parent_inode_no = 0;  // 备份各层解析出来的路径，的父目录，的inode号

	sub_path = path_parse(sub_path, name);
	while (name[0]) {	   // 若第一个字符就是结束符,结束循环
c00074d7:	0f b6 45 c0          	movzbl -0x40(%ebp),%eax
c00074db:	84 c0                	test   %al,%al
c00074dd:	0f 85 e5 fe ff ff    	jne    c00073c8 <search_file+0x11e>
/work/x86_os_my/fs/fs.c:332
	 * 此时 searched_record-> parent_dir 是路径 pathname 中的最后一级目录 c，并不是倒数第二级的父目录 b
	 * 要保证，无论搜索目标是普通文件，还是目录，searched_record->parent_dir 中记录的都应该是父目录！
	 * 因此要关闭目录c，重新打开目录b
	 * 【情况3】
	 */
	dir_close(searched_record->parent_dir);
c00074e3:	8b 45 0c             	mov    0xc(%ebp),%eax
c00074e6:	8b 80 00 02 00 00    	mov    0x200(%eax),%eax
c00074ec:	83 ec 0c             	sub    $0xc,%esp
c00074ef:	50                   	push   %eax
c00074f0:	e8 8a 31 00 00       	call   c000a67f <dir_close>
c00074f5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:333
	searched_record->parent_dir = dir_open(cur_part, parent_inode_no);
c00074f8:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c00074fd:	83 ec 08             	sub    $0x8,%esp
c0007500:	ff 75 ec             	pushl  -0x14(%ebp)
c0007503:	50                   	push   %eax
c0007504:	e8 5e 2f 00 00       	call   c000a467 <dir_open>
c0007509:	83 c4 10             	add    $0x10,%esp
c000750c:	89 c2                	mov    %eax,%edx
c000750e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007511:	89 90 00 02 00 00    	mov    %edx,0x200(%eax)
/work/x86_os_my/fs/fs.c:334
	searched_record->file_type = FT_DIRECTORY;
c0007517:	8b 45 0c             	mov    0xc(%ebp),%eax
c000751a:	c7 80 04 02 00 00 02 	movl   $0x2,0x204(%eax)
c0007521:	00 00 00 
/work/x86_os_my/fs/fs.c:335
	return dir_e.i_no;	//目录c的inode号
c0007524:	8b 45 e0             	mov    -0x20(%ebp),%eax
/work/x86_os_my/fs/fs.c:336 (discriminator 1)
}
c0007527:	c9                   	leave  
c0007528:	c3                   	ret    

c0007529 <sys_open>:
sys_open():
/work/x86_os_my/fs/fs.c:343
/* 打开或创建文件成功后,返回文件描述符,否则返回-1
 * 对应 file.c 中的 file_create
 *
 * open(const char * pathname, (O_CREAT|O_WRONLY|O_TRUNC));
 */
int32_t sys_open(const char* pathname, uint8_t flags) {
c0007529:	55                   	push   %ebp
c000752a:	89 e5                	mov    %esp,%ebp
c000752c:	53                   	push   %ebx
c000752d:	81 ec 34 02 00 00    	sub    $0x234,%esp
c0007533:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007536:	88 85 d4 fd ff ff    	mov    %al,-0x22c(%ebp)
/work/x86_os_my/fs/fs.c:345
	/* 对目录要用dir_open,这里只有open文件 */
	if (pathname[strlen(pathname) - 1] == '/') {
c000753c:	83 ec 0c             	sub    $0xc,%esp
c000753f:	ff 75 08             	pushl  0x8(%ebp)
c0007542:	e8 96 c4 ff ff       	call   c00039dd <strlen>
c0007547:	83 c4 10             	add    $0x10,%esp
c000754a:	8d 50 ff             	lea    -0x1(%eax),%edx
c000754d:	8b 45 08             	mov    0x8(%ebp),%eax
c0007550:	01 d0                	add    %edx,%eax
c0007552:	0f b6 00             	movzbl (%eax),%eax
c0007555:	3c 2f                	cmp    $0x2f,%al
c0007557:	75 1d                	jne    c0007576 <sys_open+0x4d>
/work/x86_os_my/fs/fs.c:346
		printk("can`t open a directory %s\n", pathname);
c0007559:	83 ec 08             	sub    $0x8,%esp
c000755c:	ff 75 08             	pushl  0x8(%ebp)
c000755f:	68 e5 dc 00 c0       	push   $0xc000dce5
c0007564:	e8 a5 f5 ff ff       	call   c0006b0e <printk>
c0007569:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:347
		return -1;
c000756c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007571:	e9 10 02 00 00       	jmp    c0007786 <sys_open+0x25d>
/work/x86_os_my/fs/fs.c:349
	}
	ASSERT(flags <= 7);
c0007576:	80 bd d4 fd ff ff 07 	cmpb   $0x7,-0x22c(%ebp)
c000757d:	76 1c                	jbe    c000759b <sys_open+0x72>
/work/x86_os_my/fs/fs.c:349 (discriminator 1)
c000757f:	68 00 dd 00 c0       	push   $0xc000dd00
c0007584:	68 e0 e2 00 c0       	push   $0xc000e2e0
c0007589:	68 5d 01 00 00       	push   $0x15d
c000758e:	68 f5 da 00 c0       	push   $0xc000daf5
c0007593:	e8 19 ae ff ff       	call   c00023b1 <panic_spin>
c0007598:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:350
	int32_t fd = -1;	// 默认为找不到
c000759b:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:353

	struct path_search_record searched_record;
	memset(&searched_record, 0, sizeof(struct path_search_record));
c00075a2:	83 ec 04             	sub    $0x4,%esp
c00075a5:	68 08 02 00 00       	push   $0x208
c00075aa:	6a 00                	push   $0x0
c00075ac:	8d 85 dc fd ff ff    	lea    -0x224(%ebp),%eax
c00075b2:	50                   	push   %eax
c00075b3:	e8 9b c2 ff ff       	call   c0003853 <memset>
c00075b8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:356

	/* 记录目录深度.帮助判断中间某个目录不存在的情况 */
	uint32_t pathname_depth = path_depth_cnt((char*)pathname);
c00075bb:	83 ec 0c             	sub    $0xc,%esp
c00075be:	ff 75 08             	pushl  0x8(%ebp)
c00075c1:	e8 59 fc ff ff       	call   c000721f <path_depth_cnt>
c00075c6:	83 c4 10             	add    $0x10,%esp
c00075c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:359

	/* 先检查文件是否存在 */
	int inode_no = search_file(pathname, &searched_record);
c00075cc:	83 ec 08             	sub    $0x8,%esp
c00075cf:	8d 85 dc fd ff ff    	lea    -0x224(%ebp),%eax
c00075d5:	50                   	push   %eax
c00075d6:	ff 75 08             	pushl  0x8(%ebp)
c00075d9:	e8 cc fc ff ff       	call   c00072aa <search_file>
c00075de:	83 c4 10             	add    $0x10,%esp
c00075e1:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:360
	bool found = (inode_no != -1 ? true : false);
c00075e4:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%ebp)
c00075e8:	0f 95 c0             	setne  %al
c00075eb:	0f b6 c0             	movzbl %al,%eax
c00075ee:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:362

	if (searched_record.file_type == FT_DIRECTORY) {
c00075f1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c00075f4:	83 f8 02             	cmp    $0x2,%eax
c00075f7:	75 29                	jne    c0007622 <sys_open+0xf9>
/work/x86_os_my/fs/fs.c:363
		printk("can`t open a direcotry with open(), use opendir() to instead\n");
c00075f9:	83 ec 0c             	sub    $0xc,%esp
c00075fc:	68 0c dd 00 c0       	push   $0xc000dd0c
c0007601:	e8 08 f5 ff ff       	call   c0006b0e <printk>
c0007606:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:364
		dir_close(searched_record.parent_dir);	//主调函数负责关闭该目录
c0007609:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000760c:	83 ec 0c             	sub    $0xc,%esp
c000760f:	50                   	push   %eax
c0007610:	e8 6a 30 00 00       	call   c000a67f <dir_close>
c0007615:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:365
		return -1;
c0007618:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000761d:	e9 64 01 00 00       	jmp    c0007786 <sys_open+0x25d>
/work/x86_os_my/fs/fs.c:368
	}

	uint32_t path_searched_depth = path_depth_cnt(searched_record.searched_path);
c0007622:	83 ec 0c             	sub    $0xc,%esp
c0007625:	8d 85 dc fd ff ff    	lea    -0x224(%ebp),%eax
c000762b:	50                   	push   %eax
c000762c:	e8 ee fb ff ff       	call   c000721f <path_depth_cnt>
c0007631:	83 c4 10             	add    $0x10,%esp
c0007634:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/fs.c:372

	/* 先判断是否把pathname的各层目录都访问到了 */
	// 【search_file情况1】说明并没有访问到全部的路径,某个中间目录是不存在的【是一个同名的普通文件】
	if (pathname_depth != path_searched_depth) {
c0007637:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000763a:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c000763d:	74 33                	je     c0007672 <sys_open+0x149>
/work/x86_os_my/fs/fs.c:373
		printk("cannot access %s: Not a directory, subpath %s is`t exist\n",
c000763f:	83 ec 04             	sub    $0x4,%esp
c0007642:	8d 85 dc fd ff ff    	lea    -0x224(%ebp),%eax
c0007648:	50                   	push   %eax
c0007649:	ff 75 08             	pushl  0x8(%ebp)
c000764c:	68 4c dd 00 c0       	push   $0xc000dd4c
c0007651:	e8 b8 f4 ff ff       	call   c0006b0e <printk>
c0007656:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:375
			pathname, searched_record.searched_path);
		dir_close(searched_record.parent_dir);
c0007659:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000765c:	83 ec 0c             	sub    $0xc,%esp
c000765f:	50                   	push   %eax
c0007660:	e8 1a 30 00 00       	call   c000a67f <dir_close>
c0007665:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:376
		return -1;
c0007668:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000766d:	e9 14 01 00 00       	jmp    c0007786 <sys_open+0x25d>
/work/x86_os_my/fs/fs.c:381
	}

	// 【search_file情况2】若是在最后一个路径上没找到
	// 并且此时也不是要创建文件,直接返回-1 */
	if (!found && !(flags & O_CREAT)) {
c0007672:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0007676:	75 56                	jne    c00076ce <sys_open+0x1a5>
/work/x86_os_my/fs/fs.c:381 (discriminator 1)
c0007678:	0f b6 85 d4 fd ff ff 	movzbl -0x22c(%ebp),%eax
c000767f:	83 e0 04             	and    $0x4,%eax
c0007682:	85 c0                	test   %eax,%eax
c0007684:	75 48                	jne    c00076ce <sys_open+0x1a5>
/work/x86_os_my/fs/fs.c:383
		printk("in path %s, file %s is`t exist\n",
			searched_record.searched_path, (strrchr(searched_record.searched_path, '/') + 1));
c0007686:	83 ec 08             	sub    $0x8,%esp
c0007689:	6a 2f                	push   $0x2f
c000768b:	8d 85 dc fd ff ff    	lea    -0x224(%ebp),%eax
c0007691:	50                   	push   %eax
c0007692:	e8 62 c4 ff ff       	call   c0003af9 <strrchr>
c0007697:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:382
	}

	// 【search_file情况2】若是在最后一个路径上没找到
	// 并且此时也不是要创建文件,直接返回-1 */
	if (!found && !(flags & O_CREAT)) {
		printk("in path %s, file %s is`t exist\n",
c000769a:	83 c0 01             	add    $0x1,%eax
c000769d:	83 ec 04             	sub    $0x4,%esp
c00076a0:	50                   	push   %eax
c00076a1:	8d 85 dc fd ff ff    	lea    -0x224(%ebp),%eax
c00076a7:	50                   	push   %eax
c00076a8:	68 88 dd 00 c0       	push   $0xc000dd88
c00076ad:	e8 5c f4 ff ff       	call   c0006b0e <printk>
c00076b2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:384
			searched_record.searched_path, (strrchr(searched_record.searched_path, '/') + 1));
		dir_close(searched_record.parent_dir);
c00076b5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c00076b8:	83 ec 0c             	sub    $0xc,%esp
c00076bb:	50                   	push   %eax
c00076bc:	e8 be 2f 00 00       	call   c000a67f <dir_close>
c00076c1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:385
		return -1;
c00076c4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00076c9:	e9 b8 00 00 00       	jmp    c0007786 <sys_open+0x25d>
/work/x86_os_my/fs/fs.c:386
	} else if (found && flags & O_CREAT) {	// 若要创建的文件已存在，相同目录下不可以有同名文件，返回-1
c00076ce:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c00076d2:	74 37                	je     c000770b <sys_open+0x1e2>
/work/x86_os_my/fs/fs.c:386 (discriminator 1)
c00076d4:	0f b6 85 d4 fd ff ff 	movzbl -0x22c(%ebp),%eax
c00076db:	83 e0 04             	and    $0x4,%eax
c00076de:	85 c0                	test   %eax,%eax
c00076e0:	74 29                	je     c000770b <sys_open+0x1e2>
/work/x86_os_my/fs/fs.c:387
		printk("%s has already exist!\n", pathname);
c00076e2:	83 ec 08             	sub    $0x8,%esp
c00076e5:	ff 75 08             	pushl  0x8(%ebp)
c00076e8:	68 a8 dd 00 c0       	push   $0xc000dda8
c00076ed:	e8 1c f4 ff ff       	call   c0006b0e <printk>
c00076f2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:388
		dir_close(searched_record.parent_dir);
c00076f5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c00076f8:	83 ec 0c             	sub    $0xc,%esp
c00076fb:	50                   	push   %eax
c00076fc:	e8 7e 2f 00 00       	call   c000a67f <dir_close>
c0007701:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:389
		return -1;
c0007704:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007709:	eb 7b                	jmp    c0007786 <sys_open+0x25d>
/work/x86_os_my/fs/fs.c:392
	}

	switch (flags & O_CREAT) {	// sys_open("xxx", O_CREAT|O_XXX)
c000770b:	0f b6 85 d4 fd ff ff 	movzbl -0x22c(%ebp),%eax
c0007712:	83 e0 04             	and    $0x4,%eax
c0007715:	83 f8 04             	cmp    $0x4,%eax
c0007718:	75 4f                	jne    c0007769 <sys_open+0x240>
/work/x86_os_my/fs/fs.c:394
		case O_CREAT:
		printk("creating file\n");
c000771a:	83 ec 0c             	sub    $0xc,%esp
c000771d:	68 bf dd 00 c0       	push   $0xc000ddbf
c0007722:	e8 e7 f3 ff ff       	call   c0006b0e <printk>
c0007727:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:396
		// 【search_file情况3】主调函数用到此目录，在该目录下创建文件
		fd = file_create(searched_record.parent_dir, (strrchr(pathname, '/') + 1), flags);
c000772a:	0f b6 9d d4 fd ff ff 	movzbl -0x22c(%ebp),%ebx
c0007731:	83 ec 08             	sub    $0x8,%esp
c0007734:	6a 2f                	push   $0x2f
c0007736:	ff 75 08             	pushl  0x8(%ebp)
c0007739:	e8 bb c3 ff ff       	call   c0003af9 <strrchr>
c000773e:	83 c4 10             	add    $0x10,%esp
c0007741:	8d 50 01             	lea    0x1(%eax),%edx
c0007744:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0007747:	83 ec 04             	sub    $0x4,%esp
c000774a:	53                   	push   %ebx
c000774b:	52                   	push   %edx
c000774c:	50                   	push   %eax
c000774d:	e8 8a 1d 00 00       	call   c00094dc <file_create>
c0007752:	83 c4 10             	add    $0x10,%esp
c0007755:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:397
		dir_close(searched_record.parent_dir);
c0007758:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000775b:	83 ec 0c             	sub    $0xc,%esp
c000775e:	50                   	push   %eax
c000775f:	e8 1b 2f 00 00       	call   c000a67f <dir_close>
c0007764:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:398
		break;
c0007767:	eb 1a                	jmp    c0007783 <sys_open+0x25a>
/work/x86_os_my/fs/fs.c:402

		default:
		/* 其余情况均为打开已存在文件: O_RDONLY,O_WRONLY,O_RDWR */
		fd = file_open(inode_no, flags);
c0007769:	0f b6 95 d4 fd ff ff 	movzbl -0x22c(%ebp),%edx
c0007770:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0007773:	83 ec 08             	sub    $0x8,%esp
c0007776:	52                   	push   %edx
c0007777:	50                   	push   %eax
c0007778:	e8 21 20 00 00       	call   c000979e <file_open>
c000777d:	83 c4 10             	add    $0x10,%esp
c0007780:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:407
	}

	/* 此fd是指任务pcb->fd_table数组中的元素下标,
	 * 并不是指全局file_table中的下标 */
	return fd;
c0007783:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:408 (discriminator 1)
}
c0007786:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0007789:	c9                   	leave  
c000778a:	c3                   	ret    

c000778b <fd_local2global>:
fd_local2global():
/work/x86_os_my/fs/fs.c:411

/* 将文件描述符转化为文件表的下标 */
static uint32_t fd_local2global(uint32_t local_fd) {
c000778b:	55                   	push   %ebp
c000778c:	89 e5                	mov    %esp,%ebp
c000778e:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/fs.c:412
	struct task_struct* cur = running_thread();
c0007791:	e8 a4 c4 ff ff       	call   c0003c3a <running_thread>
c0007796:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:413
	int32_t global_fd = cur->fd_table[local_fd];
c0007799:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000779c:	8b 55 08             	mov    0x8(%ebp),%edx
c000779f:	83 c2 08             	add    $0x8,%edx
c00077a2:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
c00077a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:414
	ASSERT(global_fd >= 0 && global_fd < MAX_FILE_OPEN);
c00077a9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c00077ad:	78 06                	js     c00077b5 <fd_local2global+0x2a>
/work/x86_os_my/fs/fs.c:414 (discriminator 1)
c00077af:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c00077b3:	7e 1c                	jle    c00077d1 <fd_local2global+0x46>
/work/x86_os_my/fs/fs.c:414 (discriminator 3)
c00077b5:	68 d0 dd 00 c0       	push   $0xc000ddd0
c00077ba:	68 ec e2 00 c0       	push   $0xc000e2ec
c00077bf:	68 9e 01 00 00       	push   $0x19e
c00077c4:	68 f5 da 00 c0       	push   $0xc000daf5
c00077c9:	e8 e3 ab ff ff       	call   c00023b1 <panic_spin>
c00077ce:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:415
	return (uint32_t)global_fd;
c00077d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
/work/x86_os_my/fs/fs.c:416
}
c00077d4:	c9                   	leave  
c00077d5:	c3                   	ret    

c00077d6 <sys_close>:
sys_close():
/work/x86_os_my/fs/fs.c:419

/* 关闭文件描述符fd指向的文件,成功返回0,否则返回-1 */
int32_t sys_close(int32_t fd) {
c00077d6:	55                   	push   %ebp
c00077d7:	89 e5                	mov    %esp,%ebp
c00077d9:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/fs.c:420
	int32_t ret = -1;   // 返回值默认为-1,即失败
c00077dc:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:421
	if (fd > 2) {
c00077e3:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c00077e7:	7e 47                	jle    c0007830 <sys_close+0x5a>
/work/x86_os_my/fs/fs.c:422
		uint32_t _fd = fd_local2global(fd);
c00077e9:	8b 45 08             	mov    0x8(%ebp),%eax
c00077ec:	83 ec 0c             	sub    $0xc,%esp
c00077ef:	50                   	push   %eax
c00077f0:	e8 96 ff ff ff       	call   c000778b <fd_local2global>
c00077f5:	83 c4 10             	add    $0x10,%esp
c00077f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:423
		ret = file_close(&file_table[_fd]);
c00077fb:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00077fe:	89 d0                	mov    %edx,%eax
c0007800:	01 c0                	add    %eax,%eax
c0007802:	01 d0                	add    %edx,%eax
c0007804:	c1 e0 02             	shl    $0x2,%eax
c0007807:	05 e0 2f 01 c0       	add    $0xc0012fe0,%eax
c000780c:	83 ec 0c             	sub    $0xc,%esp
c000780f:	50                   	push   %eax
c0007810:	e8 a2 20 00 00       	call   c00098b7 <file_close>
c0007815:	83 c4 10             	add    $0x10,%esp
c0007818:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:424
		running_thread()->fd_table[fd] = -1; // 使该文件描述符位可用
c000781b:	e8 1a c4 ff ff       	call   c0003c3a <running_thread>
c0007820:	89 c2                	mov    %eax,%edx
c0007822:	8b 45 08             	mov    0x8(%ebp),%eax
c0007825:	83 c0 08             	add    $0x8,%eax
c0007828:	c7 44 82 04 ff ff ff 	movl   $0xffffffff,0x4(%edx,%eax,4)
c000782f:	ff 
/work/x86_os_my/fs/fs.c:426
	}
	return ret;
c0007830:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:427
}
c0007833:	c9                   	leave  
c0007834:	c3                   	ret    

c0007835 <sys_write>:
sys_write():
/work/x86_os_my/fs/fs.c:430

/* 将buf中连续count个字节写入文件描述符fd,成功则返回写入的字节数,失败返回-1 */
int32_t sys_write(int32_t fd, const void* buf, uint32_t count) {
c0007835:	55                   	push   %ebp
c0007836:	89 e5                	mov    %esp,%ebp
c0007838:	57                   	push   %edi
c0007839:	81 ec 14 04 00 00    	sub    $0x414,%esp
/work/x86_os_my/fs/fs.c:431
   if (fd < 0) {
c000783f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0007843:	79 1a                	jns    c000785f <sys_write+0x2a>
/work/x86_os_my/fs/fs.c:432
      printk("sys_write: fd error\n");
c0007845:	83 ec 0c             	sub    $0xc,%esp
c0007848:	68 fc dd 00 c0       	push   $0xc000ddfc
c000784d:	e8 bc f2 ff ff       	call   c0006b0e <printk>
c0007852:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:433
      return -1;
c0007855:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000785a:	e9 ba 00 00 00       	jmp    c0007919 <sys_write+0xe4>
/work/x86_os_my/fs/fs.c:435
   }
   if (fd == stdout_no) {
c000785f:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c0007863:	75 43                	jne    c00078a8 <sys_write+0x73>
/work/x86_os_my/fs/fs.c:436
      char tmp_buf[1024] = {0};
c0007865:	8d 95 ec fb ff ff    	lea    -0x414(%ebp),%edx
c000786b:	b8 00 00 00 00       	mov    $0x0,%eax
c0007870:	b9 00 01 00 00       	mov    $0x100,%ecx
c0007875:	89 d7                	mov    %edx,%edi
c0007877:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/fs/fs.c:437
      memcpy(tmp_buf, buf, count);
c0007879:	83 ec 04             	sub    $0x4,%esp
c000787c:	ff 75 10             	pushl  0x10(%ebp)
c000787f:	ff 75 0c             	pushl  0xc(%ebp)
c0007882:	8d 85 ec fb ff ff    	lea    -0x414(%ebp),%eax
c0007888:	50                   	push   %eax
c0007889:	e8 17 c0 ff ff       	call   c00038a5 <memcpy>
c000788e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:438
      console_put_str(tmp_buf);
c0007891:	83 ec 0c             	sub    $0xc,%esp
c0007894:	8d 85 ec fb ff ff    	lea    -0x414(%ebp),%eax
c000789a:	50                   	push   %eax
c000789b:	e8 00 d0 ff ff       	call   c00048a0 <console_put_str>
c00078a0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:439
      return count;
c00078a3:	8b 45 10             	mov    0x10(%ebp),%eax
c00078a6:	eb 71                	jmp    c0007919 <sys_write+0xe4>
/work/x86_os_my/fs/fs.c:441
   }
   uint32_t _fd = fd_local2global(fd);
c00078a8:	8b 45 08             	mov    0x8(%ebp),%eax
c00078ab:	83 ec 0c             	sub    $0xc,%esp
c00078ae:	50                   	push   %eax
c00078af:	e8 d7 fe ff ff       	call   c000778b <fd_local2global>
c00078b4:	83 c4 10             	add    $0x10,%esp
c00078b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:442
   struct file* wr_file = &file_table[_fd];
c00078ba:	8b 55 f4             	mov    -0xc(%ebp),%edx
c00078bd:	89 d0                	mov    %edx,%eax
c00078bf:	01 c0                	add    %eax,%eax
c00078c1:	01 d0                	add    %edx,%eax
c00078c3:	c1 e0 02             	shl    $0x2,%eax
c00078c6:	05 e0 2f 01 c0       	add    $0xc0012fe0,%eax
c00078cb:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:443
   if (wr_file->fd_flag & O_WRONLY || wr_file->fd_flag & O_RDWR) {
c00078ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00078d1:	8b 40 04             	mov    0x4(%eax),%eax
c00078d4:	83 e0 01             	and    $0x1,%eax
c00078d7:	85 c0                	test   %eax,%eax
c00078d9:	75 0d                	jne    c00078e8 <sys_write+0xb3>
/work/x86_os_my/fs/fs.c:443 (discriminator 1)
c00078db:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00078de:	8b 40 04             	mov    0x4(%eax),%eax
c00078e1:	83 e0 02             	and    $0x2,%eax
c00078e4:	85 c0                	test   %eax,%eax
c00078e6:	74 1c                	je     c0007904 <sys_write+0xcf>
/work/x86_os_my/fs/fs.c:444
      uint32_t bytes_written  = file_write(wr_file, buf, count);
c00078e8:	83 ec 04             	sub    $0x4,%esp
c00078eb:	ff 75 10             	pushl  0x10(%ebp)
c00078ee:	ff 75 0c             	pushl  0xc(%ebp)
c00078f1:	ff 75 f0             	pushl  -0x10(%ebp)
c00078f4:	e8 01 20 00 00       	call   c00098fa <file_write>
c00078f9:	83 c4 10             	add    $0x10,%esp
c00078fc:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:445
      return bytes_written;
c00078ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0007902:	eb 15                	jmp    c0007919 <sys_write+0xe4>
/work/x86_os_my/fs/fs.c:447
   } else {
      console_put_str("sys_write: not allowed to write file without flag O_RDWR or O_WRONLY\n");
c0007904:	83 ec 0c             	sub    $0xc,%esp
c0007907:	68 14 de 00 c0       	push   $0xc000de14
c000790c:	e8 8f cf ff ff       	call   c00048a0 <console_put_str>
c0007911:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:448
      return -1;
c0007914:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
/work/x86_os_my/fs/fs.c:450 (discriminator 1)
   }
}
c0007919:	8b 7d fc             	mov    -0x4(%ebp),%edi
c000791c:	c9                   	leave  
c000791d:	c3                   	ret    

c000791e <sys_read>:
sys_read():
/work/x86_os_my/fs/fs.c:453

/* 从文件描述符fd指向的文件中读取count个字节到buf,若成功则返回读出的字节数,到文件尾则返回-1 */
int32_t sys_read(int32_t fd, void* buf, uint32_t count) {
c000791e:	55                   	push   %ebp
c000791f:	89 e5                	mov    %esp,%ebp
c0007921:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/fs.c:454
	ASSERT(buf != NULL);
c0007924:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0007928:	75 1c                	jne    c0007946 <sys_read+0x28>
/work/x86_os_my/fs/fs.c:454 (discriminator 1)
c000792a:	68 5a de 00 c0       	push   $0xc000de5a
c000792f:	68 fc e2 00 c0       	push   $0xc000e2fc
c0007934:	68 c6 01 00 00       	push   $0x1c6
c0007939:	68 f5 da 00 c0       	push   $0xc000daf5
c000793e:	e8 6e aa ff ff       	call   c00023b1 <panic_spin>
c0007943:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:455
	int32_t ret = -1;
c0007946:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:456
	if (fd < 0 || fd == stdout_no || fd == stderr_no) {
c000794d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0007951:	78 0c                	js     c000795f <sys_read+0x41>
/work/x86_os_my/fs/fs.c:456 (discriminator 1)
c0007953:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c0007957:	74 06                	je     c000795f <sys_read+0x41>
/work/x86_os_my/fs/fs.c:456 (discriminator 2)
c0007959:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c000795d:	75 15                	jne    c0007974 <sys_read+0x56>
/work/x86_os_my/fs/fs.c:457
		printk("sys_read: fd error\n");
c000795f:	83 ec 0c             	sub    $0xc,%esp
c0007962:	68 66 de 00 c0       	push   $0xc000de66
c0007967:	e8 a2 f1 ff ff       	call   c0006b0e <printk>
c000796c:	83 c4 10             	add    $0x10,%esp
c000796f:	e9 89 00 00 00       	jmp    c00079fd <sys_read+0xdf>
/work/x86_os_my/fs/fs.c:458
	} else if (fd == stdin_no) {
c0007974:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0007978:	75 4b                	jne    c00079c5 <sys_read+0xa7>
/work/x86_os_my/fs/fs.c:459
		char* buffer = buf;
c000797a:	8b 45 0c             	mov    0xc(%ebp),%eax
c000797d:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:460
		uint32_t bytes_read = 0;
c0007980:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:461
		while (bytes_read < count) {
c0007987:	eb 1f                	jmp    c00079a8 <sys_read+0x8a>
/work/x86_os_my/fs/fs.c:462
			*buffer = ioq_getchar(&kbd_buf);
c0007989:	83 ec 0c             	sub    $0xc,%esp
c000798c:	68 e0 21 01 c0       	push   $0xc00121e0
c0007991:	e8 01 d7 ff ff       	call   c0005097 <ioq_getchar>
c0007996:	83 c4 10             	add    $0x10,%esp
c0007999:	89 c2                	mov    %eax,%edx
c000799b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000799e:	88 10                	mov    %dl,(%eax)
/work/x86_os_my/fs/fs.c:463
			bytes_read++;
c00079a0:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:464
			buffer++;
c00079a4:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:461
	if (fd < 0 || fd == stdout_no || fd == stderr_no) {
		printk("sys_read: fd error\n");
	} else if (fd == stdin_no) {
		char* buffer = buf;
		uint32_t bytes_read = 0;
		while (bytes_read < count) {
c00079a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00079ab:	3b 45 10             	cmp    0x10(%ebp),%eax
c00079ae:	72 d9                	jb     c0007989 <sys_read+0x6b>
/work/x86_os_my/fs/fs.c:466
			*buffer = ioq_getchar(&kbd_buf);
			bytes_read++;
			buffer++;
		}
		ret = (bytes_read == 0 ? -1 : (int32_t)bytes_read);
c00079b0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c00079b4:	74 05                	je     c00079bb <sys_read+0x9d>
/work/x86_os_my/fs/fs.c:466 (discriminator 1)
c00079b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00079b9:	eb 05                	jmp    c00079c0 <sys_read+0xa2>
/work/x86_os_my/fs/fs.c:466 (discriminator 2)
c00079bb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
/work/x86_os_my/fs/fs.c:466 (discriminator 4)
c00079c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c00079c3:	eb 38                	jmp    c00079fd <sys_read+0xdf>
/work/x86_os_my/fs/fs.c:468
	} else {
		uint32_t _fd = fd_local2global(fd);
c00079c5:	8b 45 08             	mov    0x8(%ebp),%eax
c00079c8:	83 ec 0c             	sub    $0xc,%esp
c00079cb:	50                   	push   %eax
c00079cc:	e8 ba fd ff ff       	call   c000778b <fd_local2global>
c00079d1:	83 c4 10             	add    $0x10,%esp
c00079d4:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:469
		ret = file_read(&file_table[_fd], buf, count);
c00079d7:	8b 55 e8             	mov    -0x18(%ebp),%edx
c00079da:	89 d0                	mov    %edx,%eax
c00079dc:	01 c0                	add    %eax,%eax
c00079de:	01 d0                	add    %edx,%eax
c00079e0:	c1 e0 02             	shl    $0x2,%eax
c00079e3:	05 e0 2f 01 c0       	add    $0xc0012fe0,%eax
c00079e8:	83 ec 04             	sub    $0x4,%esp
c00079eb:	ff 75 10             	pushl  0x10(%ebp)
c00079ee:	ff 75 0c             	pushl  0xc(%ebp)
c00079f1:	50                   	push   %eax
c00079f2:	e8 97 26 00 00       	call   c000a08e <file_read>
c00079f7:	83 c4 10             	add    $0x10,%esp
c00079fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:471
	}
	return ret;
c00079fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:472
}
c0007a00:	c9                   	leave  
c0007a01:	c3                   	ret    

c0007a02 <sys_lseek>:
sys_lseek():
/work/x86_os_my/fs/fs.c:476


/* 重置用于文件读写指针,成功时返回新的偏移量,出错时返回-1 */
int32_t sys_lseek(int32_t fd, int32_t offset, uint8_t whence) {
c0007a02:	55                   	push   %ebp
c0007a03:	89 e5                	mov    %esp,%ebp
c0007a05:	83 ec 28             	sub    $0x28,%esp
c0007a08:	8b 45 10             	mov    0x10(%ebp),%eax
c0007a0b:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/fs/fs.c:477
	if (fd < 0) {
c0007a0e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0007a12:	79 1a                	jns    c0007a2e <sys_lseek+0x2c>
/work/x86_os_my/fs/fs.c:478
		printk("sys_lseek: fd error\n");
c0007a14:	83 ec 0c             	sub    $0xc,%esp
c0007a17:	68 7a de 00 c0       	push   $0xc000de7a
c0007a1c:	e8 ed f0 ff ff       	call   c0006b0e <printk>
c0007a21:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:479
		return -1;
c0007a24:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007a29:	e9 bd 00 00 00       	jmp    c0007aeb <sys_lseek+0xe9>
/work/x86_os_my/fs/fs.c:481
	}
	ASSERT(whence > 0 && whence < 4);
c0007a2e:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c0007a32:	74 06                	je     c0007a3a <sys_lseek+0x38>
/work/x86_os_my/fs/fs.c:481 (discriminator 1)
c0007a34:	80 7d e4 03          	cmpb   $0x3,-0x1c(%ebp)
c0007a38:	76 1c                	jbe    c0007a56 <sys_lseek+0x54>
/work/x86_os_my/fs/fs.c:481 (discriminator 3)
c0007a3a:	68 8f de 00 c0       	push   $0xc000de8f
c0007a3f:	68 08 e3 00 c0       	push   $0xc000e308
c0007a44:	68 e1 01 00 00       	push   $0x1e1
c0007a49:	68 f5 da 00 c0       	push   $0xc000daf5
c0007a4e:	e8 5e a9 ff ff       	call   c00023b1 <panic_spin>
c0007a53:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:482
	uint32_t _fd = fd_local2global(fd);
c0007a56:	8b 45 08             	mov    0x8(%ebp),%eax
c0007a59:	83 ec 0c             	sub    $0xc,%esp
c0007a5c:	50                   	push   %eax
c0007a5d:	e8 29 fd ff ff       	call   c000778b <fd_local2global>
c0007a62:	83 c4 10             	add    $0x10,%esp
c0007a65:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:483
	struct file* pf = &file_table[_fd];
c0007a68:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0007a6b:	89 d0                	mov    %edx,%eax
c0007a6d:	01 c0                	add    %eax,%eax
c0007a6f:	01 d0                	add    %edx,%eax
c0007a71:	c1 e0 02             	shl    $0x2,%eax
c0007a74:	05 e0 2f 01 c0       	add    $0xc0012fe0,%eax
c0007a79:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:484
	int32_t new_pos = 0;	//新的偏移量必须位于文件大小之内
c0007a7c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:485
	int32_t file_size = (int32_t)pf->fd_inode->i_size;
c0007a83:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0007a86:	8b 40 08             	mov    0x8(%eax),%eax
c0007a89:	8b 40 04             	mov    0x4(%eax),%eax
c0007a8c:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:486
	switch (whence) {
c0007a8f:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0007a93:	83 f8 02             	cmp    $0x2,%eax
c0007a96:	74 12                	je     c0007aaa <sys_lseek+0xa8>
c0007a98:	83 f8 03             	cmp    $0x3,%eax
c0007a9b:	74 1e                	je     c0007abb <sys_lseek+0xb9>
c0007a9d:	83 f8 01             	cmp    $0x1,%eax
c0007aa0:	75 24                	jne    c0007ac6 <sys_lseek+0xc4>
/work/x86_os_my/fs/fs.c:489
		/* SEEK_SET 新的读写位置是相对于文件开头再增加offset个位移量 */
		case SEEK_SET:
		new_pos = offset;
c0007aa2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007aa5:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:490
		break;
c0007aa8:	eb 1c                	jmp    c0007ac6 <sys_lseek+0xc4>
/work/x86_os_my/fs/fs.c:494

		/* SEEK_CUR 新的读写位置是相对于当前的位置增加offset个位移量 */
		case SEEK_CUR:	// offse可正可负
		new_pos = (int32_t)pf->fd_pos + offset;
c0007aaa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0007aad:	8b 00                	mov    (%eax),%eax
c0007aaf:	89 c2                	mov    %eax,%edx
c0007ab1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007ab4:	01 d0                	add    %edx,%eax
c0007ab6:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:495
		break;
c0007ab9:	eb 0b                	jmp    c0007ac6 <sys_lseek+0xc4>
/work/x86_os_my/fs/fs.c:499

		/* SEEK_END 新的读写位置是相对于文件尺寸再增加offset个位移量 */
		case SEEK_END:	// 此情况下,offset应该为负值
		new_pos = file_size + offset;
c0007abb:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0007abe:	8b 45 0c             	mov    0xc(%ebp),%eax
c0007ac1:	01 d0                	add    %edx,%eax
c0007ac3:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:501
	}
	if (new_pos < 0 || new_pos > (file_size - 1)) {
c0007ac6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0007aca:	78 0b                	js     c0007ad7 <sys_lseek+0xd5>
/work/x86_os_my/fs/fs.c:501 (discriminator 1)
c0007acc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0007acf:	83 e8 01             	sub    $0x1,%eax
c0007ad2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0007ad5:	7d 07                	jge    c0007ade <sys_lseek+0xdc>
/work/x86_os_my/fs/fs.c:502
		return -1;
c0007ad7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007adc:	eb 0d                	jmp    c0007aeb <sys_lseek+0xe9>
/work/x86_os_my/fs/fs.c:504
	}
	pf->fd_pos = new_pos;
c0007ade:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0007ae1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0007ae4:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/fs/fs.c:505
	return pf->fd_pos;
c0007ae6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0007ae9:	8b 00                	mov    (%eax),%eax
/work/x86_os_my/fs/fs.c:506
}
c0007aeb:	c9                   	leave  
c0007aec:	c3                   	ret    

c0007aed <sys_unlink>:
sys_unlink():
/work/x86_os_my/fs/fs.c:510

/* 删除文件(非目录),成功返回0,失败返回-1 */
// 全局变量 file_table 定义在 file.h
int32_t sys_unlink(const char* pathname) {
c0007aed:	55                   	push   %ebp
c0007aee:	89 e5                	mov    %esp,%ebp
c0007af0:	81 ec 28 02 00 00    	sub    $0x228,%esp
/work/x86_os_my/fs/fs.c:511
	ASSERT(strlen(pathname) < MAX_PATH_LEN);
c0007af6:	83 ec 0c             	sub    $0xc,%esp
c0007af9:	ff 75 08             	pushl  0x8(%ebp)
c0007afc:	e8 dc be ff ff       	call   c00039dd <strlen>
c0007b01:	83 c4 10             	add    $0x10,%esp
c0007b04:	3d ff 01 00 00       	cmp    $0x1ff,%eax
c0007b09:	76 1c                	jbe    c0007b27 <sys_unlink+0x3a>
/work/x86_os_my/fs/fs.c:511 (discriminator 1)
c0007b0b:	68 a8 de 00 c0       	push   $0xc000dea8
c0007b10:	68 14 e3 00 c0       	push   $0xc000e314
c0007b15:	68 ff 01 00 00       	push   $0x1ff
c0007b1a:	68 f5 da 00 c0       	push   $0xc000daf5
c0007b1f:	e8 8d a8 ff ff       	call   c00023b1 <panic_spin>
c0007b24:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:515

	/* 先检查待删除的文件是否存在 */
	struct path_search_record searched_record;
	memset(&searched_record, 0, sizeof(struct path_search_record));
c0007b27:	83 ec 04             	sub    $0x4,%esp
c0007b2a:	68 08 02 00 00       	push   $0x208
c0007b2f:	6a 00                	push   $0x0
c0007b31:	8d 85 e0 fd ff ff    	lea    -0x220(%ebp),%eax
c0007b37:	50                   	push   %eax
c0007b38:	e8 16 bd ff ff       	call   c0003853 <memset>
c0007b3d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:516
	int inode_no = search_file(pathname, &searched_record);
c0007b40:	83 ec 08             	sub    $0x8,%esp
c0007b43:	8d 85 e0 fd ff ff    	lea    -0x220(%ebp),%eax
c0007b49:	50                   	push   %eax
c0007b4a:	ff 75 08             	pushl  0x8(%ebp)
c0007b4d:	e8 58 f7 ff ff       	call   c00072aa <search_file>
c0007b52:	83 c4 10             	add    $0x10,%esp
c0007b55:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:517
	ASSERT(inode_no != 0);
c0007b58:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0007b5c:	75 1c                	jne    c0007b7a <sys_unlink+0x8d>
/work/x86_os_my/fs/fs.c:517 (discriminator 1)
c0007b5e:	68 c8 de 00 c0       	push   $0xc000dec8
c0007b63:	68 14 e3 00 c0       	push   $0xc000e314
c0007b68:	68 05 02 00 00       	push   $0x205
c0007b6d:	68 f5 da 00 c0       	push   $0xc000daf5
c0007b72:	e8 3a a8 ff ff       	call   c00023b1 <panic_spin>
c0007b77:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:518
	if (inode_no == -1) {
c0007b7a:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c0007b7e:	75 2c                	jne    c0007bac <sys_unlink+0xbf>
/work/x86_os_my/fs/fs.c:519
		printk("file %s not found!\n", pathname);
c0007b80:	83 ec 08             	sub    $0x8,%esp
c0007b83:	ff 75 08             	pushl  0x8(%ebp)
c0007b86:	68 d6 de 00 c0       	push   $0xc000ded6
c0007b8b:	e8 7e ef ff ff       	call   c0006b0e <printk>
c0007b90:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:520
		dir_close(searched_record.parent_dir);
c0007b93:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0007b96:	83 ec 0c             	sub    $0xc,%esp
c0007b99:	50                   	push   %eax
c0007b9a:	e8 e0 2a 00 00       	call   c000a67f <dir_close>
c0007b9f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:521
		return -1;
c0007ba2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007ba7:	e9 62 01 00 00       	jmp    c0007d0e <sys_unlink+0x221>
/work/x86_os_my/fs/fs.c:523
	}
	if (searched_record.file_type == FT_DIRECTORY) {	//存在同名的目录，而不是文件
c0007bac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0007baf:	83 f8 02             	cmp    $0x2,%eax
c0007bb2:	75 29                	jne    c0007bdd <sys_unlink+0xf0>
/work/x86_os_my/fs/fs.c:524
		printk("can`t delete a direcotry with unlink(), use rmdir() to instead\n");
c0007bb4:	83 ec 0c             	sub    $0xc,%esp
c0007bb7:	68 ec de 00 c0       	push   $0xc000deec
c0007bbc:	e8 4d ef ff ff       	call   c0006b0e <printk>
c0007bc1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:525
		dir_close(searched_record.parent_dir);
c0007bc4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0007bc7:	83 ec 0c             	sub    $0xc,%esp
c0007bca:	50                   	push   %eax
c0007bcb:	e8 af 2a 00 00       	call   c000a67f <dir_close>
c0007bd0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:526
		return -1;
c0007bd3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007bd8:	e9 31 01 00 00       	jmp    c0007d0e <sys_unlink+0x221>
/work/x86_os_my/fs/fs.c:530
	}

	/* 检查是否在已打开文件列表(文件表)中 */
	uint32_t file_idx = 0;
c0007bdd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:531
	while (file_idx < MAX_FILE_OPEN) {
c0007be4:	eb 37                	jmp    c0007c1d <sys_unlink+0x130>
/work/x86_os_my/fs/fs.c:532
		if (file_table[file_idx].fd_inode != NULL && (uint32_t)inode_no == file_table[file_idx].fd_inode->i_no) {
c0007be6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0007be9:	89 d0                	mov    %edx,%eax
c0007beb:	01 c0                	add    %eax,%eax
c0007bed:	01 d0                	add    %edx,%eax
c0007bef:	c1 e0 02             	shl    $0x2,%eax
c0007bf2:	05 e8 2f 01 c0       	add    $0xc0012fe8,%eax
c0007bf7:	8b 00                	mov    (%eax),%eax
c0007bf9:	85 c0                	test   %eax,%eax
c0007bfb:	74 1c                	je     c0007c19 <sys_unlink+0x12c>
/work/x86_os_my/fs/fs.c:532 (discriminator 1)
c0007bfd:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0007c00:	89 d0                	mov    %edx,%eax
c0007c02:	01 c0                	add    %eax,%eax
c0007c04:	01 d0                	add    %edx,%eax
c0007c06:	c1 e0 02             	shl    $0x2,%eax
c0007c09:	05 e8 2f 01 c0       	add    $0xc0012fe8,%eax
c0007c0e:	8b 00                	mov    (%eax),%eax
c0007c10:	8b 10                	mov    (%eax),%edx
c0007c12:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0007c15:	39 c2                	cmp    %eax,%edx
c0007c17:	74 0c                	je     c0007c25 <sys_unlink+0x138>
/work/x86_os_my/fs/fs.c:535
			break;
		}
		file_idx++;
c0007c19:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:531
		return -1;
	}

	/* 检查是否在已打开文件列表(文件表)中 */
	uint32_t file_idx = 0;
	while (file_idx < MAX_FILE_OPEN) {
c0007c1d:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c0007c21:	76 c3                	jbe    c0007be6 <sys_unlink+0xf9>
c0007c23:	eb 01                	jmp    c0007c26 <sys_unlink+0x139>
/work/x86_os_my/fs/fs.c:533
		if (file_table[file_idx].fd_inode != NULL && (uint32_t)inode_no == file_table[file_idx].fd_inode->i_no) {
			break;
c0007c25:	90                   	nop
/work/x86_os_my/fs/fs.c:537
		}
		file_idx++;
	}
	if (file_idx < MAX_FILE_OPEN) {
c0007c26:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c0007c2a:	77 2c                	ja     c0007c58 <sys_unlink+0x16b>
/work/x86_os_my/fs/fs.c:538
		dir_close(searched_record.parent_dir);
c0007c2c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0007c2f:	83 ec 0c             	sub    $0xc,%esp
c0007c32:	50                   	push   %eax
c0007c33:	e8 47 2a 00 00       	call   c000a67f <dir_close>
c0007c38:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:539
		printk("file %s is in use, not allow to delete!\n", pathname);
c0007c3b:	83 ec 08             	sub    $0x8,%esp
c0007c3e:	ff 75 08             	pushl  0x8(%ebp)
c0007c41:	68 2c df 00 c0       	push   $0xc000df2c
c0007c46:	e8 c3 ee ff ff       	call   c0006b0e <printk>
c0007c4b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:540
		return -1;
c0007c4e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007c53:	e9 b6 00 00 00       	jmp    c0007d0e <sys_unlink+0x221>
/work/x86_os_my/fs/fs.c:542
	}
	ASSERT(file_idx == MAX_FILE_OPEN);
c0007c58:	83 7d f4 20          	cmpl   $0x20,-0xc(%ebp)
c0007c5c:	74 1c                	je     c0007c7a <sys_unlink+0x18d>
/work/x86_os_my/fs/fs.c:542 (discriminator 1)
c0007c5e:	68 55 df 00 c0       	push   $0xc000df55
c0007c63:	68 14 e3 00 c0       	push   $0xc000e314
c0007c68:	68 1e 02 00 00       	push   $0x21e
c0007c6d:	68 f5 da 00 c0       	push   $0xc000daf5
c0007c72:	e8 3a a7 ff ff       	call   c00023b1 <panic_spin>
c0007c77:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:545

	/* 为delete_dir_entry申请缓冲区 */
	void* io_buf = sys_malloc(SECTOR_SIZE + SECTOR_SIZE);
c0007c7a:	83 ec 0c             	sub    $0xc,%esp
c0007c7d:	68 00 04 00 00       	push   $0x400
c0007c82:	e8 d5 b0 ff ff       	call   c0002d5c <sys_malloc>
c0007c87:	83 c4 10             	add    $0x10,%esp
c0007c8a:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:546
	if (io_buf == NULL) {
c0007c8d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0007c91:	75 26                	jne    c0007cb9 <sys_unlink+0x1cc>
/work/x86_os_my/fs/fs.c:547
		dir_close(searched_record.parent_dir);
c0007c93:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0007c96:	83 ec 0c             	sub    $0xc,%esp
c0007c99:	50                   	push   %eax
c0007c9a:	e8 e0 29 00 00       	call   c000a67f <dir_close>
c0007c9f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:548
		printk("sys_unlink: malloc for io_buf failed\n");
c0007ca2:	83 ec 0c             	sub    $0xc,%esp
c0007ca5:	68 70 df 00 c0       	push   $0xc000df70
c0007caa:	e8 5f ee ff ff       	call   c0006b0e <printk>
c0007caf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:549
		return -1;
c0007cb2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007cb7:	eb 55                	jmp    c0007d0e <sys_unlink+0x221>
/work/x86_os_my/fs/fs.c:552
	}

	struct dir* parent_dir = searched_record.parent_dir;
c0007cb9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0007cbc:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:553
	delete_dir_entry(cur_part, parent_dir, inode_no, io_buf);	// 删除目录项 dir.c
c0007cbf:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0007cc2:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0007cc7:	ff 75 ec             	pushl  -0x14(%ebp)
c0007cca:	52                   	push   %edx
c0007ccb:	ff 75 e8             	pushl  -0x18(%ebp)
c0007cce:	50                   	push   %eax
c0007ccf:	e8 6a 2e 00 00       	call   c000ab3e <delete_dir_entry>
c0007cd4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:554
	inode_release(cur_part, inode_no);							// 删除inode inode.c
c0007cd7:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0007cda:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0007cdf:	83 ec 08             	sub    $0x8,%esp
c0007ce2:	52                   	push   %edx
c0007ce3:	50                   	push   %eax
c0007ce4:	e8 81 13 00 00       	call   c000906a <inode_release>
c0007ce9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:555
	sys_free(io_buf);
c0007cec:	83 ec 0c             	sub    $0xc,%esp
c0007cef:	ff 75 ec             	pushl  -0x14(%ebp)
c0007cf2:	e8 92 b6 ff ff       	call   c0003389 <sys_free>
c0007cf7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:556
	dir_close(searched_record.parent_dir);
c0007cfa:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0007cfd:	83 ec 0c             	sub    $0xc,%esp
c0007d00:	50                   	push   %eax
c0007d01:	e8 79 29 00 00       	call   c000a67f <dir_close>
c0007d06:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:557
	return 0;	// 成功删除文件
c0007d09:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/fs.c:558 (discriminator 1)
}
c0007d0e:	c9                   	leave  
c0007d0f:	c3                   	ret    

c0007d10 <sys_mkdir>:
sys_mkdir():
/work/x86_os_my/fs/fs.c:569
（3）为新目录分配 1 个块存储该目录中的目录项。
（4）在新目录中创建两个目录项“.”和“..”，这是每个目录都必须存在的两个目录项。
（5）在新目录的父目录中添加新目录的目录项。
（6）将以上资源的变更同步到硬盘。
 */
int32_t sys_mkdir(const char* pathname) {
c0007d10:	55                   	push   %ebp
c0007d11:	89 e5                	mov    %esp,%ebp
c0007d13:	81 ec a8 02 00 00    	sub    $0x2a8,%esp
/work/x86_os_my/fs/fs.c:570
	uint8_t rollback_step = 0;	       // 用于操作失败时回滚各资源状态
c0007d19:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:571
	void* io_buf = sys_malloc(SECTOR_SIZE * 2);
c0007d1d:	83 ec 0c             	sub    $0xc,%esp
c0007d20:	68 00 04 00 00       	push   $0x400
c0007d25:	e8 32 b0 ff ff       	call   c0002d5c <sys_malloc>
c0007d2a:	83 c4 10             	add    $0x10,%esp
c0007d2d:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:572
	if (io_buf == NULL) {
c0007d30:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0007d34:	75 1a                	jne    c0007d50 <sys_mkdir+0x40>
/work/x86_os_my/fs/fs.c:573
		printk("sys_mkdir: sys_malloc for io_buf failed\n");
c0007d36:	83 ec 0c             	sub    $0xc,%esp
c0007d39:	68 98 df 00 c0       	push   $0xc000df98
c0007d3e:	e8 cb ed ff ff       	call   c0006b0e <printk>
c0007d43:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:574
		return -1;
c0007d46:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0007d4b:	e9 ae 03 00 00       	jmp    c00080fe <sys_mkdir+0x3ee>
/work/x86_os_my/fs/fs.c:578
	}

	struct path_search_record searched_record;
	memset(&searched_record, 0, sizeof(struct path_search_record));
c0007d50:	83 ec 04             	sub    $0x4,%esp
c0007d53:	68 08 02 00 00       	push   $0x208
c0007d58:	6a 00                	push   $0x0
c0007d5a:	8d 85 c8 fd ff ff    	lea    -0x238(%ebp),%eax
c0007d60:	50                   	push   %eax
c0007d61:	e8 ed ba ff ff       	call   c0003853 <memset>
c0007d66:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:579
	int inode_no = -1;
c0007d69:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:580
	inode_no = search_file(pathname, &searched_record);
c0007d70:	83 ec 08             	sub    $0x8,%esp
c0007d73:	8d 85 c8 fd ff ff    	lea    -0x238(%ebp),%eax
c0007d79:	50                   	push   %eax
c0007d7a:	ff 75 08             	pushl  0x8(%ebp)
c0007d7d:	e8 28 f5 ff ff       	call   c00072aa <search_file>
c0007d82:	83 c4 10             	add    $0x10,%esp
c0007d85:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:581
	if (inode_no != -1) {      // 如果找到了同名目录或文件,失败返回
c0007d88:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c0007d8c:	74 1c                	je     c0007daa <sys_mkdir+0x9a>
/work/x86_os_my/fs/fs.c:582
		printk("sys_mkdir: file or directory %s exist!\n", pathname);
c0007d8e:	83 ec 08             	sub    $0x8,%esp
c0007d91:	ff 75 08             	pushl  0x8(%ebp)
c0007d94:	68 c4 df 00 c0       	push   $0xc000dfc4
c0007d99:	e8 70 ed ff ff       	call   c0006b0e <printk>
c0007d9e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:583
		rollback_step = 1;
c0007da1:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:584
		goto rollback;
c0007da5:	e9 08 03 00 00       	jmp    c00080b2 <sys_mkdir+0x3a2>
/work/x86_os_my/fs/fs.c:586
	} else {	     // 若未找到,也要判断是在最终目录没找到还是某个中间目录不存在
		uint32_t pathname_depth = path_depth_cnt((char*)pathname);
c0007daa:	83 ec 0c             	sub    $0xc,%esp
c0007dad:	ff 75 08             	pushl  0x8(%ebp)
c0007db0:	e8 6a f4 ff ff       	call   c000721f <path_depth_cnt>
c0007db5:	83 c4 10             	add    $0x10,%esp
c0007db8:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:587
		uint32_t path_searched_depth = path_depth_cnt(searched_record.searched_path);
c0007dbb:	83 ec 0c             	sub    $0xc,%esp
c0007dbe:	8d 85 c8 fd ff ff    	lea    -0x238(%ebp),%eax
c0007dc4:	50                   	push   %eax
c0007dc5:	e8 55 f4 ff ff       	call   c000721f <path_depth_cnt>
c0007dca:	83 c4 10             	add    $0x10,%esp
c0007dcd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/fs.c:589
		/* 先判断是否把pathname的各层目录都访问到了,即是否在某个中间目录就失败了 */
		if (pathname_depth != path_searched_depth) {   // 说明并没有访问到全部的路径,某个中间目录是不存在的
c0007dd0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0007dd3:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c0007dd6:	74 23                	je     c0007dfb <sys_mkdir+0xeb>
/work/x86_os_my/fs/fs.c:590
			printk("sys_mkdir: can`t access %s, subpath %s is`t exist\n", pathname, searched_record.searched_path);
c0007dd8:	83 ec 04             	sub    $0x4,%esp
c0007ddb:	8d 85 c8 fd ff ff    	lea    -0x238(%ebp),%eax
c0007de1:	50                   	push   %eax
c0007de2:	ff 75 08             	pushl  0x8(%ebp)
c0007de5:	68 ec df 00 c0       	push   $0xc000dfec
c0007dea:	e8 1f ed ff ff       	call   c0006b0e <printk>
c0007def:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:591
			rollback_step = 1;
c0007df2:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:592
			goto rollback;
c0007df6:	e9 b7 02 00 00       	jmp    c00080b2 <sys_mkdir+0x3a2>
/work/x86_os_my/fs/fs.c:596
		}
	}

	struct dir* parent_dir = searched_record.parent_dir;	//被创建目录所在的父目录
c0007dfb:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0007dfe:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/fs.c:598
	/* 目录名称后可能会有字符'/',所以最好直接用searched_record.searched_path,无'/' */
	char* dirname = strrchr(searched_record.searched_path, '/') + 1;	//获取 pathname 的最后一级目录名
c0007e01:	83 ec 08             	sub    $0x8,%esp
c0007e04:	6a 2f                	push   $0x2f
c0007e06:	8d 85 c8 fd ff ff    	lea    -0x238(%ebp),%eax
c0007e0c:	50                   	push   %eax
c0007e0d:	e8 e7 bc ff ff       	call   c0003af9 <strrchr>
c0007e12:	83 c4 10             	add    $0x10,%esp
c0007e15:	83 c0 01             	add    $0x1,%eax
c0007e18:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/fs.c:600

	inode_no = inode_bitmap_alloc(cur_part);
c0007e1b:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0007e20:	83 ec 0c             	sub    $0xc,%esp
c0007e23:	50                   	push   %eax
c0007e24:	e8 92 15 00 00       	call   c00093bb <inode_bitmap_alloc>
c0007e29:	83 c4 10             	add    $0x10,%esp
c0007e2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:601
	if (inode_no == -1) {
c0007e2f:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c0007e33:	75 19                	jne    c0007e4e <sys_mkdir+0x13e>
/work/x86_os_my/fs/fs.c:602
		printk("sys_mkdir: allocate inode failed\n");
c0007e35:	83 ec 0c             	sub    $0xc,%esp
c0007e38:	68 20 e0 00 c0       	push   $0xc000e020
c0007e3d:	e8 cc ec ff ff       	call   c0006b0e <printk>
c0007e42:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:603
		rollback_step = 1;
c0007e45:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:604
		goto rollback;
c0007e49:	e9 64 02 00 00       	jmp    c00080b2 <sys_mkdir+0x3a2>
/work/x86_os_my/fs/fs.c:608
	}

	struct inode new_dir_inode;
	inode_init(inode_no, &new_dir_inode);	    // 初始化i结点
c0007e4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0007e51:	83 ec 08             	sub    $0x8,%esp
c0007e54:	8d 95 7c fd ff ff    	lea    -0x284(%ebp),%edx
c0007e5a:	52                   	push   %edx
c0007e5b:	50                   	push   %eax
c0007e5c:	e8 42 14 00 00       	call   c00092a3 <inode_init>
c0007e61:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:610

	uint32_t block_bitmap_idx = 0;     // 用来记录block对应于block_bitmap中的索引
c0007e64:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
/work/x86_os_my/fs/fs.c:611
	int32_t block_lba = -1;
c0007e6b:	c7 45 d4 ff ff ff ff 	movl   $0xffffffff,-0x2c(%ebp)
/work/x86_os_my/fs/fs.c:613
	/* 为目录分配一个块,用来写入目录.和.. */
	block_lba = block_bitmap_alloc(cur_part);
c0007e72:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0007e77:	83 ec 0c             	sub    $0xc,%esp
c0007e7a:	50                   	push   %eax
c0007e7b:	e8 82 15 00 00       	call   c0009402 <block_bitmap_alloc>
c0007e80:	83 c4 10             	add    $0x10,%esp
c0007e83:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/fs/fs.c:614
	if (block_lba == -1) {
c0007e86:	83 7d d4 ff          	cmpl   $0xffffffff,-0x2c(%ebp)
c0007e8a:	75 19                	jne    c0007ea5 <sys_mkdir+0x195>
/work/x86_os_my/fs/fs.c:615
		printk("sys_mkdir: block_bitmap_alloc for create directory failed\n");
c0007e8c:	83 ec 0c             	sub    $0xc,%esp
c0007e8f:	68 44 e0 00 c0       	push   $0xc000e044
c0007e94:	e8 75 ec ff ff       	call   c0006b0e <printk>
c0007e99:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:616
		rollback_step = 2;
c0007e9c:	c6 45 f7 02          	movb   $0x2,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:617
		goto rollback;
c0007ea0:	e9 0d 02 00 00       	jmp    c00080b2 <sys_mkdir+0x3a2>
/work/x86_os_my/fs/fs.c:619
	}
	new_dir_inode.i_sectors[0] = block_lba;
c0007ea5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0007ea8:	89 85 8c fd ff ff    	mov    %eax,-0x274(%ebp)
/work/x86_os_my/fs/fs.c:621
	/* 每分配一个块就将位图同步到硬盘 */
	block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
c0007eae:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0007eb1:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0007eb6:	8b 40 1c             	mov    0x1c(%eax),%eax
c0007eb9:	8b 40 28             	mov    0x28(%eax),%eax
c0007ebc:	29 c2                	sub    %eax,%edx
c0007ebe:	89 d0                	mov    %edx,%eax
c0007ec0:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/fs.c:622
	ASSERT(block_bitmap_idx != 0);
c0007ec3:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0007ec7:	75 1c                	jne    c0007ee5 <sys_mkdir+0x1d5>
/work/x86_os_my/fs/fs.c:622 (discriminator 1)
c0007ec9:	68 7f e0 00 c0       	push   $0xc000e07f
c0007ece:	68 20 e3 00 c0       	push   $0xc000e320
c0007ed3:	68 6e 02 00 00       	push   $0x26e
c0007ed8:	68 f5 da 00 c0       	push   $0xc000daf5
c0007edd:	e8 cf a4 ff ff       	call   c00023b1 <panic_spin>
c0007ee2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:623
	bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c0007ee5:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0007eea:	83 ec 04             	sub    $0x4,%esp
c0007eed:	6a 01                	push   $0x1
c0007eef:	ff 75 d8             	pushl  -0x28(%ebp)
c0007ef2:	50                   	push   %eax
c0007ef3:	e8 5c 15 00 00       	call   c0009454 <bitmap_sync>
c0007ef8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:626

	/* 将当前目录的目录项'.'和'..'写入目录 */
	memset(io_buf, 0, SECTOR_SIZE * 2);	 // 清空io_buf
c0007efb:	83 ec 04             	sub    $0x4,%esp
c0007efe:	68 00 04 00 00       	push   $0x400
c0007f03:	6a 00                	push   $0x0
c0007f05:	ff 75 ec             	pushl  -0x14(%ebp)
c0007f08:	e8 46 b9 ff ff       	call   c0003853 <memset>
c0007f0d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:627
	struct dir_entry* p_de = (struct dir_entry*)io_buf;
c0007f10:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0007f13:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/fs/fs.c:630

	/* 初始化当前目录"." */
	memcpy(p_de->filename, ".", 1);
c0007f16:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0007f19:	83 ec 04             	sub    $0x4,%esp
c0007f1c:	6a 01                	push   $0x1
c0007f1e:	68 33 dc 00 c0       	push   $0xc000dc33
c0007f23:	50                   	push   %eax
c0007f24:	e8 7c b9 ff ff       	call   c00038a5 <memcpy>
c0007f29:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:631
	p_de->i_no = inode_no ;
c0007f2c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0007f2f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0007f32:	89 50 10             	mov    %edx,0x10(%eax)
/work/x86_os_my/fs/fs.c:632
	p_de->f_type = FT_DIRECTORY;
c0007f35:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0007f38:	c7 40 14 02 00 00 00 	movl   $0x2,0x14(%eax)
/work/x86_os_my/fs/fs.c:634

	p_de++;
c0007f3f:	83 45 d0 18          	addl   $0x18,-0x30(%ebp)
/work/x86_os_my/fs/fs.c:636
	/* 初始化当前目录".." */
	memcpy(p_de->filename, "..", 2);
c0007f43:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0007f46:	83 ec 04             	sub    $0x4,%esp
c0007f49:	6a 02                	push   $0x2
c0007f4b:	68 35 dc 00 c0       	push   $0xc000dc35
c0007f50:	50                   	push   %eax
c0007f51:	e8 4f b9 ff ff       	call   c00038a5 <memcpy>
c0007f56:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:637
	p_de->i_no = parent_dir->inode->i_no;
c0007f59:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0007f5c:	8b 00                	mov    (%eax),%eax
c0007f5e:	8b 10                	mov    (%eax),%edx
c0007f60:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0007f63:	89 50 10             	mov    %edx,0x10(%eax)
/work/x86_os_my/fs/fs.c:638
	p_de->f_type = FT_DIRECTORY;
c0007f66:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0007f69:	c7 40 14 02 00 00 00 	movl   $0x2,0x14(%eax)
/work/x86_os_my/fs/fs.c:639
	ide_write(cur_part->my_disk, new_dir_inode.i_sectors[0], io_buf, 1);
c0007f70:	8b 95 8c fd ff ff    	mov    -0x274(%ebp),%edx
c0007f76:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0007f7b:	8b 40 08             	mov    0x8(%eax),%eax
c0007f7e:	6a 01                	push   $0x1
c0007f80:	ff 75 ec             	pushl  -0x14(%ebp)
c0007f83:	52                   	push   %edx
c0007f84:	50                   	push   %eax
c0007f85:	e8 7f e2 ff ff       	call   c0006209 <ide_write>
c0007f8a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:641

	new_dir_inode.i_size = 2 * cur_part->sb->dir_entry_size;
c0007f8d:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0007f92:	8b 40 1c             	mov    0x1c(%eax),%eax
c0007f95:	8b 40 30             	mov    0x30(%eax),%eax
c0007f98:	01 c0                	add    %eax,%eax
c0007f9a:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)
/work/x86_os_my/fs/fs.c:645

	/* 在父目录中添加自己的目录项 */
	struct dir_entry new_dir_entry;
	memset(&new_dir_entry, 0, sizeof(struct dir_entry));
c0007fa0:	83 ec 04             	sub    $0x4,%esp
c0007fa3:	6a 18                	push   $0x18
c0007fa5:	6a 00                	push   $0x0
c0007fa7:	8d 85 64 fd ff ff    	lea    -0x29c(%ebp),%eax
c0007fad:	50                   	push   %eax
c0007fae:	e8 a0 b8 ff ff       	call   c0003853 <memset>
c0007fb3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:646
	create_dir_entry(dirname, inode_no, FT_DIRECTORY, &new_dir_entry);
c0007fb6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0007fb9:	8d 95 64 fd ff ff    	lea    -0x29c(%ebp),%edx
c0007fbf:	52                   	push   %edx
c0007fc0:	6a 02                	push   $0x2
c0007fc2:	50                   	push   %eax
c0007fc3:	ff 75 dc             	pushl  -0x24(%ebp)
c0007fc6:	e8 e7 26 00 00       	call   c000a6b2 <create_dir_entry>
c0007fcb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:647
	memset(io_buf, 0, SECTOR_SIZE * 2);	 // 清空io_buf
c0007fce:	83 ec 04             	sub    $0x4,%esp
c0007fd1:	68 00 04 00 00       	push   $0x400
c0007fd6:	6a 00                	push   $0x0
c0007fd8:	ff 75 ec             	pushl  -0x14(%ebp)
c0007fdb:	e8 73 b8 ff ff       	call   c0003853 <memset>
c0007fe0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:648
	if (!sync_dir_entry(parent_dir, &new_dir_entry, io_buf)) {	  // sync_dir_entry中将block_bitmap通过bitmap_sync同步到硬盘
c0007fe3:	83 ec 04             	sub    $0x4,%esp
c0007fe6:	ff 75 ec             	pushl  -0x14(%ebp)
c0007fe9:	8d 85 64 fd ff ff    	lea    -0x29c(%ebp),%eax
c0007fef:	50                   	push   %eax
c0007ff0:	ff 75 e0             	pushl  -0x20(%ebp)
c0007ff3:	e8 2b 27 00 00       	call   c000a723 <sync_dir_entry>
c0007ff8:	83 c4 10             	add    $0x10,%esp
c0007ffb:	85 c0                	test   %eax,%eax
c0007ffd:	75 19                	jne    c0008018 <sys_mkdir+0x308>
/work/x86_os_my/fs/fs.c:649
		printk("sys_mkdir: sync_dir_entry to disk failed!\n");
c0007fff:	83 ec 0c             	sub    $0xc,%esp
c0008002:	68 98 e0 00 c0       	push   $0xc000e098
c0008007:	e8 02 eb ff ff       	call   c0006b0e <printk>
c000800c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:650
		rollback_step = 2;
c000800f:	c6 45 f7 02          	movb   $0x2,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:651
		goto rollback;
c0008013:	e9 9a 00 00 00       	jmp    c00080b2 <sys_mkdir+0x3a2>
/work/x86_os_my/fs/fs.c:655
	}

	/* 父目录的inode同步到硬盘 */
	memset(io_buf, 0, SECTOR_SIZE * 2);
c0008018:	83 ec 04             	sub    $0x4,%esp
c000801b:	68 00 04 00 00       	push   $0x400
c0008020:	6a 00                	push   $0x0
c0008022:	ff 75 ec             	pushl  -0x14(%ebp)
c0008025:	e8 29 b8 ff ff       	call   c0003853 <memset>
c000802a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:656
	inode_sync(cur_part, parent_dir->inode, io_buf);
c000802d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0008030:	8b 10                	mov    (%eax),%edx
c0008032:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0008037:	83 ec 04             	sub    $0x4,%esp
c000803a:	ff 75 ec             	pushl  -0x14(%ebp)
c000803d:	52                   	push   %edx
c000803e:	50                   	push   %eax
c000803f:	e8 2b 0c 00 00       	call   c0008c6f <inode_sync>
c0008044:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:659

	/* 将新创建目录的inode同步到硬盘 */
	memset(io_buf, 0, SECTOR_SIZE * 2);
c0008047:	83 ec 04             	sub    $0x4,%esp
c000804a:	68 00 04 00 00       	push   $0x400
c000804f:	6a 00                	push   $0x0
c0008051:	ff 75 ec             	pushl  -0x14(%ebp)
c0008054:	e8 fa b7 ff ff       	call   c0003853 <memset>
c0008059:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:660
	inode_sync(cur_part, &new_dir_inode, io_buf);
c000805c:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0008061:	83 ec 04             	sub    $0x4,%esp
c0008064:	ff 75 ec             	pushl  -0x14(%ebp)
c0008067:	8d 95 7c fd ff ff    	lea    -0x284(%ebp),%edx
c000806d:	52                   	push   %edx
c000806e:	50                   	push   %eax
c000806f:	e8 fb 0b 00 00       	call   c0008c6f <inode_sync>
c0008074:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:663

	/* 将inode位图同步到硬盘 */
	bitmap_sync(cur_part, inode_no, INODE_BITMAP);
c0008077:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000807a:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c000807f:	83 ec 04             	sub    $0x4,%esp
c0008082:	6a 00                	push   $0x0
c0008084:	52                   	push   %edx
c0008085:	50                   	push   %eax
c0008086:	e8 c9 13 00 00       	call   c0009454 <bitmap_sync>
c000808b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:665

	sys_free(io_buf);
c000808e:	83 ec 0c             	sub    $0xc,%esp
c0008091:	ff 75 ec             	pushl  -0x14(%ebp)
c0008094:	e8 f0 b2 ff ff       	call   c0003389 <sys_free>
c0008099:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:668

	/* 关闭所创建目录的父目录 */
	dir_close(searched_record.parent_dir);
c000809c:	8b 45 c8             	mov    -0x38(%ebp),%eax
c000809f:	83 ec 0c             	sub    $0xc,%esp
c00080a2:	50                   	push   %eax
c00080a3:	e8 d7 25 00 00       	call   c000a67f <dir_close>
c00080a8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:669
	return 0;
c00080ab:	b8 00 00 00 00       	mov    $0x0,%eax
c00080b0:	eb 4c                	jmp    c00080fe <sys_mkdir+0x3ee>
/work/x86_os_my/fs/fs.c:673

	/*创建文件或目录需要创建相关的多个资源,若某步失败则会执行到下面的回滚步骤 */
rollback:	     // 因为某步骤操作失败而回滚
	switch (rollback_step) {
c00080b2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00080b6:	83 f8 01             	cmp    $0x1,%eax
c00080b9:	74 20                	je     c00080db <sys_mkdir+0x3cb>
c00080bb:	83 f8 02             	cmp    $0x2,%eax
c00080be:	75 2b                	jne    c00080eb <sys_mkdir+0x3db>
/work/x86_os_my/fs/fs.c:675
		case 2:
		bitmap_set(&cur_part->inode_bitmap, inode_no, 0);	 // 如果新文件的inode创建失败,之前位图中分配的inode_no也要恢复
c00080c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00080c3:	8b 15 d0 2f 01 c0    	mov    0xc0012fd0,%edx
c00080c9:	83 c2 28             	add    $0x28,%edx
c00080cc:	83 ec 04             	sub    $0x4,%esp
c00080cf:	6a 00                	push   $0x0
c00080d1:	50                   	push   %eax
c00080d2:	52                   	push   %edx
c00080d3:	e8 47 a5 ff ff       	call   c000261f <bitmap_set>
c00080d8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:678
		case 1:
		/* 关闭所创建目录的父目录 */
		dir_close(searched_record.parent_dir);
c00080db:	8b 45 c8             	mov    -0x38(%ebp),%eax
c00080de:	83 ec 0c             	sub    $0xc,%esp
c00080e1:	50                   	push   %eax
c00080e2:	e8 98 25 00 00       	call   c000a67f <dir_close>
c00080e7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:679
		break;
c00080ea:	90                   	nop
/work/x86_os_my/fs/fs.c:681
	}
	sys_free(io_buf);
c00080eb:	83 ec 0c             	sub    $0xc,%esp
c00080ee:	ff 75 ec             	pushl  -0x14(%ebp)
c00080f1:	e8 93 b2 ff ff       	call   c0003389 <sys_free>
c00080f6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:682
	return -1;
c00080f9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
/work/x86_os_my/fs/fs.c:683 (discriminator 1)
}
c00080fe:	c9                   	leave  
c00080ff:	c3                   	ret    

c0008100 <sys_opendir>:
sys_opendir():
/work/x86_os_my/fs/fs.c:686

/* 目录打开成功后返回目录指针,失败返回NULL */
struct dir* sys_opendir(const char* name) {
c0008100:	55                   	push   %ebp
c0008101:	89 e5                	mov    %esp,%ebp
c0008103:	81 ec 18 02 00 00    	sub    $0x218,%esp
/work/x86_os_my/fs/fs.c:687
	ASSERT(strlen(name) < MAX_PATH_LEN);
c0008109:	83 ec 0c             	sub    $0xc,%esp
c000810c:	ff 75 08             	pushl  0x8(%ebp)
c000810f:	e8 c9 b8 ff ff       	call   c00039dd <strlen>
c0008114:	83 c4 10             	add    $0x10,%esp
c0008117:	3d ff 01 00 00       	cmp    $0x1ff,%eax
c000811c:	76 1c                	jbe    c000813a <sys_opendir+0x3a>
/work/x86_os_my/fs/fs.c:687 (discriminator 1)
c000811e:	68 c3 e0 00 c0       	push   $0xc000e0c3
c0008123:	68 2c e3 00 c0       	push   $0xc000e32c
c0008128:	68 af 02 00 00       	push   $0x2af
c000812d:	68 f5 da 00 c0       	push   $0xc000daf5
c0008132:	e8 7a a2 ff ff       	call   c00023b1 <panic_spin>
c0008137:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:689
	/* 如果是根目录'/',直接返回&root_dir */
	if (name[0] == '/' && (name[1] == 0 || name[0] == '.')) {
c000813a:	8b 45 08             	mov    0x8(%ebp),%eax
c000813d:	0f b6 00             	movzbl (%eax),%eax
c0008140:	3c 2f                	cmp    $0x2f,%al
c0008142:	75 21                	jne    c0008165 <sys_opendir+0x65>
/work/x86_os_my/fs/fs.c:689 (discriminator 1)
c0008144:	8b 45 08             	mov    0x8(%ebp),%eax
c0008147:	83 c0 01             	add    $0x1,%eax
c000814a:	0f b6 00             	movzbl (%eax),%eax
c000814d:	84 c0                	test   %al,%al
c000814f:	74 0a                	je     c000815b <sys_opendir+0x5b>
/work/x86_os_my/fs/fs.c:689 (discriminator 2)
c0008151:	8b 45 08             	mov    0x8(%ebp),%eax
c0008154:	0f b6 00             	movzbl (%eax),%eax
c0008157:	3c 2e                	cmp    $0x2e,%al
c0008159:	75 0a                	jne    c0008165 <sys_opendir+0x65>
/work/x86_os_my/fs/fs.c:690
		return &root_dir;
c000815b:	b8 60 31 01 c0       	mov    $0xc0013160,%eax
c0008160:	e9 a9 00 00 00       	jmp    c000820e <sys_opendir+0x10e>
/work/x86_os_my/fs/fs.c:695
	}

	/* 先检查待打开的目录是否存在 */
	struct path_search_record searched_record;
	memset(&searched_record, 0, sizeof(struct path_search_record));
c0008165:	83 ec 04             	sub    $0x4,%esp
c0008168:	68 08 02 00 00       	push   $0x208
c000816d:	6a 00                	push   $0x0
c000816f:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
c0008175:	50                   	push   %eax
c0008176:	e8 d8 b6 ff ff       	call   c0003853 <memset>
c000817b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:696
	int inode_no = search_file(name, &searched_record);
c000817e:	83 ec 08             	sub    $0x8,%esp
c0008181:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
c0008187:	50                   	push   %eax
c0008188:	ff 75 08             	pushl  0x8(%ebp)
c000818b:	e8 1a f1 ff ff       	call   c00072aa <search_file>
c0008190:	83 c4 10             	add    $0x10,%esp
c0008193:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:697
	struct dir* ret = NULL;
c0008196:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:698
	if (inode_no == -1) {	 // 如果找不到目录,提示不存在的路径
c000819d:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c00081a1:	75 1c                	jne    c00081bf <sys_opendir+0xbf>
/work/x86_os_my/fs/fs.c:699
		printk("In %s, sub path %s not exist\n", name, searched_record.searched_path);
c00081a3:	83 ec 04             	sub    $0x4,%esp
c00081a6:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
c00081ac:	50                   	push   %eax
c00081ad:	ff 75 08             	pushl  0x8(%ebp)
c00081b0:	68 df e0 00 c0       	push   $0xc000e0df
c00081b5:	e8 54 e9 ff ff       	call   c0006b0e <printk>
c00081ba:	83 c4 10             	add    $0x10,%esp
c00081bd:	eb 3d                	jmp    c00081fc <sys_opendir+0xfc>
/work/x86_os_my/fs/fs.c:701
	} else {
		if (searched_record.file_type == FT_REGULAR) {
c00081bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00081c2:	83 f8 01             	cmp    $0x1,%eax
c00081c5:	75 15                	jne    c00081dc <sys_opendir+0xdc>
/work/x86_os_my/fs/fs.c:702
			printk("%s is regular file!\n", name);
c00081c7:	83 ec 08             	sub    $0x8,%esp
c00081ca:	ff 75 08             	pushl  0x8(%ebp)
c00081cd:	68 fd e0 00 c0       	push   $0xc000e0fd
c00081d2:	e8 37 e9 ff ff       	call   c0006b0e <printk>
c00081d7:	83 c4 10             	add    $0x10,%esp
c00081da:	eb 20                	jmp    c00081fc <sys_opendir+0xfc>
/work/x86_os_my/fs/fs.c:703
		} else if (searched_record.file_type == FT_DIRECTORY) {
c00081dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00081df:	83 f8 02             	cmp    $0x2,%eax
c00081e2:	75 18                	jne    c00081fc <sys_opendir+0xfc>
/work/x86_os_my/fs/fs.c:704
			ret = dir_open(cur_part, inode_no);
c00081e4:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00081e7:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c00081ec:	83 ec 08             	sub    $0x8,%esp
c00081ef:	52                   	push   %edx
c00081f0:	50                   	push   %eax
c00081f1:	e8 71 22 00 00       	call   c000a467 <dir_open>
c00081f6:	83 c4 10             	add    $0x10,%esp
c00081f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:707
		}
	}
	dir_close(searched_record.parent_dir);
c00081fc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00081ff:	83 ec 0c             	sub    $0xc,%esp
c0008202:	50                   	push   %eax
c0008203:	e8 77 24 00 00       	call   c000a67f <dir_close>
c0008208:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:708
	return ret;
c000820b:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:709 (discriminator 1)
}
c000820e:	c9                   	leave  
c000820f:	c3                   	ret    

c0008210 <sys_closedir>:
sys_closedir():
/work/x86_os_my/fs/fs.c:712

/* 成功关闭目录dir返回0,失败返回-1 */
int32_t sys_closedir(struct dir* dir) {
c0008210:	55                   	push   %ebp
c0008211:	89 e5                	mov    %esp,%ebp
c0008213:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/fs.c:713
	int32_t ret = -1;
c0008216:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:714
	if (dir != NULL) {
c000821d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0008221:	74 15                	je     c0008238 <sys_closedir+0x28>
/work/x86_os_my/fs/fs.c:715
		dir_close(dir);
c0008223:	83 ec 0c             	sub    $0xc,%esp
c0008226:	ff 75 08             	pushl  0x8(%ebp)
c0008229:	e8 51 24 00 00       	call   c000a67f <dir_close>
c000822e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:716
		ret = 0;
c0008231:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:718
	}
	return ret;
c0008238:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:719
}
c000823b:	c9                   	leave  
c000823c:	c3                   	ret    

c000823d <sys_readdir>:
sys_readdir():
/work/x86_os_my/fs/fs.c:722

/* 读取目录dir的1个目录项,成功后返回其目录项地址,到目录尾时或出错时返回NULL */
struct dir_entry* sys_readdir(struct dir* dir) {
c000823d:	55                   	push   %ebp
c000823e:	89 e5                	mov    %esp,%ebp
c0008240:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/fs/fs.c:723
	ASSERT(dir != NULL);
c0008243:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0008247:	75 1c                	jne    c0008265 <sys_readdir+0x28>
/work/x86_os_my/fs/fs.c:723 (discriminator 1)
c0008249:	68 12 e1 00 c0       	push   $0xc000e112
c000824e:	68 38 e3 00 c0       	push   $0xc000e338
c0008253:	68 d3 02 00 00       	push   $0x2d3
c0008258:	68 f5 da 00 c0       	push   $0xc000daf5
c000825d:	e8 4f a1 ff ff       	call   c00023b1 <panic_spin>
c0008262:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:724
	return dir_read(dir);
c0008265:	83 ec 0c             	sub    $0xc,%esp
c0008268:	ff 75 08             	pushl  0x8(%ebp)
c000826b:	e8 36 2d 00 00       	call   c000afa6 <dir_read>
c0008270:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:725
}
c0008273:	c9                   	leave  
c0008274:	c3                   	ret    

c0008275 <sys_rewinddir>:
sys_rewinddir():
/work/x86_os_my/fs/fs.c:728

/* 把目录dir的指针dir_pos置0 */
void sys_rewinddir(struct dir* dir) {
c0008275:	55                   	push   %ebp
c0008276:	89 e5                	mov    %esp,%ebp
/work/x86_os_my/fs/fs.c:729
	dir->dir_pos = 0;
c0008278:	8b 45 08             	mov    0x8(%ebp),%eax
c000827b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
/work/x86_os_my/fs/fs.c:730
}
c0008282:	90                   	nop
c0008283:	5d                   	pop    %ebp
c0008284:	c3                   	ret    

c0008285 <sys_rmdir>:
sys_rmdir():
/work/x86_os_my/fs/fs.c:733

/* 删除空目录,成功时返回0,失败时返回-1*/
int32_t sys_rmdir(const char* pathname) {
c0008285:	55                   	push   %ebp
c0008286:	89 e5                	mov    %esp,%ebp
c0008288:	81 ec 28 02 00 00    	sub    $0x228,%esp
/work/x86_os_my/fs/fs.c:736
	/* 先检查待删除的文件是否存在 */
	struct path_search_record searched_record;
	memset(&searched_record, 0, sizeof(struct path_search_record));
c000828e:	83 ec 04             	sub    $0x4,%esp
c0008291:	68 08 02 00 00       	push   $0x208
c0008296:	6a 00                	push   $0x0
c0008298:	8d 85 e4 fd ff ff    	lea    -0x21c(%ebp),%eax
c000829e:	50                   	push   %eax
c000829f:	e8 af b5 ff ff       	call   c0003853 <memset>
c00082a4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:737
	int32_t inode_no = search_file(pathname, &searched_record);
c00082a7:	83 ec 08             	sub    $0x8,%esp
c00082aa:	8d 85 e4 fd ff ff    	lea    -0x21c(%ebp),%eax
c00082b0:	50                   	push   %eax
c00082b1:	ff 75 08             	pushl  0x8(%ebp)
c00082b4:	e8 f1 ef ff ff       	call   c00072aa <search_file>
c00082b9:	83 c4 10             	add    $0x10,%esp
c00082bc:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:738
	ASSERT(inode_no != 0);
c00082bf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c00082c3:	75 1c                	jne    c00082e1 <sys_rmdir+0x5c>
/work/x86_os_my/fs/fs.c:738 (discriminator 1)
c00082c5:	68 c8 de 00 c0       	push   $0xc000dec8
c00082ca:	68 44 e3 00 c0       	push   $0xc000e344
c00082cf:	68 e2 02 00 00       	push   $0x2e2
c00082d4:	68 f5 da 00 c0       	push   $0xc000daf5
c00082d9:	e8 d3 a0 ff ff       	call   c00023b1 <panic_spin>
c00082de:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:739
	int32_t retval = -1;	// 默认返回值
c00082e1:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:740
	if (inode_no == -1) {
c00082e8:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c00082ec:	75 1f                	jne    c000830d <sys_rmdir+0x88>
/work/x86_os_my/fs/fs.c:741
		printk("In %s, sub path %s not exist\n", pathname, searched_record.searched_path);
c00082ee:	83 ec 04             	sub    $0x4,%esp
c00082f1:	8d 85 e4 fd ff ff    	lea    -0x21c(%ebp),%eax
c00082f7:	50                   	push   %eax
c00082f8:	ff 75 08             	pushl  0x8(%ebp)
c00082fb:	68 df e0 00 c0       	push   $0xc000e0df
c0008300:	e8 09 e8 ff ff       	call   c0006b0e <printk>
c0008305:	83 c4 10             	add    $0x10,%esp
c0008308:	e9 87 00 00 00       	jmp    c0008394 <sys_rmdir+0x10f>
/work/x86_os_my/fs/fs.c:743
	} else {
		if (searched_record.file_type == FT_REGULAR) {
c000830d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0008310:	83 f8 01             	cmp    $0x1,%eax
c0008313:	75 15                	jne    c000832a <sys_rmdir+0xa5>
/work/x86_os_my/fs/fs.c:744
			printk("%s is regular file!\n", pathname);
c0008315:	83 ec 08             	sub    $0x8,%esp
c0008318:	ff 75 08             	pushl  0x8(%ebp)
c000831b:	68 fd e0 00 c0       	push   $0xc000e0fd
c0008320:	e8 e9 e7 ff ff       	call   c0006b0e <printk>
c0008325:	83 c4 10             	add    $0x10,%esp
c0008328:	eb 6a                	jmp    c0008394 <sys_rmdir+0x10f>
/work/x86_os_my/fs/fs.c:746
		} else {
			struct dir* dir = dir_open(cur_part, inode_no);
c000832a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000832d:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0008332:	83 ec 08             	sub    $0x8,%esp
c0008335:	52                   	push   %edx
c0008336:	50                   	push   %eax
c0008337:	e8 2b 21 00 00       	call   c000a467 <dir_open>
c000833c:	83 c4 10             	add    $0x10,%esp
c000833f:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:747
			if (!dir_is_empty(dir)) {	 // 非空目录不可删除
c0008342:	83 ec 0c             	sub    $0xc,%esp
c0008345:	ff 75 ec             	pushl  -0x14(%ebp)
c0008348:	e8 41 2e 00 00       	call   c000b18e <dir_is_empty>
c000834d:	83 c4 10             	add    $0x10,%esp
c0008350:	85 c0                	test   %eax,%eax
c0008352:	75 15                	jne    c0008369 <sys_rmdir+0xe4>
/work/x86_os_my/fs/fs.c:748
				printk("dir %s is not empty, it is not allowed to delete a nonempty directory!\n", pathname);
c0008354:	83 ec 08             	sub    $0x8,%esp
c0008357:	ff 75 08             	pushl  0x8(%ebp)
c000835a:	68 20 e1 00 c0       	push   $0xc000e120
c000835f:	e8 aa e7 ff ff       	call   c0006b0e <printk>
c0008364:	83 c4 10             	add    $0x10,%esp
c0008367:	eb 1d                	jmp    c0008386 <sys_rmdir+0x101>
/work/x86_os_my/fs/fs.c:750
			} else {
				if (!dir_remove(searched_record.parent_dir, dir)) {
c0008369:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000836c:	83 ec 08             	sub    $0x8,%esp
c000836f:	ff 75 ec             	pushl  -0x14(%ebp)
c0008372:	50                   	push   %eax
c0008373:	e8 41 2e 00 00       	call   c000b1b9 <dir_remove>
c0008378:	83 c4 10             	add    $0x10,%esp
c000837b:	85 c0                	test   %eax,%eax
c000837d:	75 07                	jne    c0008386 <sys_rmdir+0x101>
/work/x86_os_my/fs/fs.c:751
					retval = 0;
c000837f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:754
				}
			}
			dir_close(dir);
c0008386:	83 ec 0c             	sub    $0xc,%esp
c0008389:	ff 75 ec             	pushl  -0x14(%ebp)
c000838c:	e8 ee 22 00 00       	call   c000a67f <dir_close>
c0008391:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:757
		}
	}
	dir_close(searched_record.parent_dir);
c0008394:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0008397:	83 ec 0c             	sub    $0xc,%esp
c000839a:	50                   	push   %eax
c000839b:	e8 df 22 00 00       	call   c000a67f <dir_close>
c00083a0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:758
	return retval;
c00083a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:759
}
c00083a6:	c9                   	leave  
c00083a7:	c3                   	ret    

c00083a8 <get_parent_dir_inode_nr>:
get_parent_dir_inode_nr():
/work/x86_os_my/fs/fs.c:762

/* 获得父目录的inode编号 */
static uint32_t get_parent_dir_inode_nr(uint32_t child_inode_nr, void* io_buf) {
c00083a8:	55                   	push   %ebp
c00083a9:	89 e5                	mov    %esp,%ebp
c00083ab:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/fs.c:763
   struct inode* child_dir_inode = inode_open(cur_part, child_inode_nr);
c00083ae:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c00083b3:	83 ec 08             	sub    $0x8,%esp
c00083b6:	ff 75 08             	pushl  0x8(%ebp)
c00083b9:	50                   	push   %eax
c00083ba:	e8 d7 09 00 00       	call   c0008d96 <inode_open>
c00083bf:	83 c4 10             	add    $0x10,%esp
c00083c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:765
   /* 目录中的目录项".."中包括父目录inode编号,".."位于目录的第0块 */
   uint32_t block_lba = child_dir_inode->i_sectors[0];
c00083c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00083c8:	8b 40 10             	mov    0x10(%eax),%eax
c00083cb:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:766
   ASSERT(block_lba >= cur_part->sb->data_start_lba);
c00083ce:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c00083d3:	8b 40 1c             	mov    0x1c(%eax),%eax
c00083d6:	8b 40 28             	mov    0x28(%eax),%eax
c00083d9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c00083dc:	76 1c                	jbe    c00083fa <get_parent_dir_inode_nr+0x52>
/work/x86_os_my/fs/fs.c:766 (discriminator 1)
c00083de:	68 68 e1 00 c0       	push   $0xc000e168
c00083e3:	68 50 e3 00 c0       	push   $0xc000e350
c00083e8:	68 fe 02 00 00       	push   $0x2fe
c00083ed:	68 f5 da 00 c0       	push   $0xc000daf5
c00083f2:	e8 ba 9f ff ff       	call   c00023b1 <panic_spin>
c00083f7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:767
   inode_close(child_dir_inode);
c00083fa:	83 ec 0c             	sub    $0xc,%esp
c00083fd:	ff 75 f4             	pushl  -0xc(%ebp)
c0008400:	e8 d7 0a 00 00       	call   c0008edc <inode_close>
c0008405:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:768
   ide_read(cur_part->my_disk, block_lba, io_buf, 1);
c0008408:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c000840d:	8b 40 08             	mov    0x8(%eax),%eax
c0008410:	6a 01                	push   $0x1
c0008412:	ff 75 0c             	pushl  0xc(%ebp)
c0008415:	ff 75 f0             	pushl  -0x10(%ebp)
c0008418:	50                   	push   %eax
c0008419:	e8 77 dc ff ff       	call   c0006095 <ide_read>
c000841e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:769
   struct dir_entry* dir_e = (struct dir_entry*)io_buf;
c0008421:	8b 45 0c             	mov    0xc(%ebp),%eax
c0008424:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:771
   /* 第0个目录项是".",第1个目录项是".." */
   ASSERT(dir_e[1].i_no < 4096 && dir_e[1].f_type == FT_DIRECTORY);
c0008427:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000842a:	83 c0 18             	add    $0x18,%eax
c000842d:	8b 40 10             	mov    0x10(%eax),%eax
c0008430:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0008435:	77 0e                	ja     c0008445 <get_parent_dir_inode_nr+0x9d>
/work/x86_os_my/fs/fs.c:771 (discriminator 1)
c0008437:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000843a:	83 c0 18             	add    $0x18,%eax
c000843d:	8b 40 14             	mov    0x14(%eax),%eax
c0008440:	83 f8 02             	cmp    $0x2,%eax
c0008443:	74 1c                	je     c0008461 <get_parent_dir_inode_nr+0xb9>
/work/x86_os_my/fs/fs.c:771 (discriminator 3)
c0008445:	68 94 e1 00 c0       	push   $0xc000e194
c000844a:	68 50 e3 00 c0       	push   $0xc000e350
c000844f:	68 03 03 00 00       	push   $0x303
c0008454:	68 f5 da 00 c0       	push   $0xc000daf5
c0008459:	e8 53 9f ff ff       	call   c00023b1 <panic_spin>
c000845e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:772
   return dir_e[1].i_no;	// 返回..即父目录的inode编号
c0008461:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008464:	83 c0 18             	add    $0x18,%eax
c0008467:	8b 40 10             	mov    0x10(%eax),%eax
/work/x86_os_my/fs/fs.c:773
}
c000846a:	c9                   	leave  
c000846b:	c3                   	ret    

c000846c <get_child_dir_name>:
get_child_dir_name():
/work/x86_os_my/fs/fs.c:777

/* 在inode编号为p_inode_nr的目录中查找inode编号为c_inode_nr的子目录的名字,
 * 将名字存入缓冲区path.成功返回0,失败返-1 */
static int get_child_dir_name(uint32_t p_inode_nr, uint32_t c_inode_nr, char* path, void* io_buf) {
c000846c:	55                   	push   %ebp
c000846d:	89 e5                	mov    %esp,%ebp
c000846f:	57                   	push   %edi
c0008470:	81 ec 54 02 00 00    	sub    $0x254,%esp
/work/x86_os_my/fs/fs.c:778
	struct inode* parent_dir_inode = inode_open(cur_part, p_inode_nr);
c0008476:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c000847b:	83 ec 08             	sub    $0x8,%esp
c000847e:	ff 75 08             	pushl  0x8(%ebp)
c0008481:	50                   	push   %eax
c0008482:	e8 0f 09 00 00       	call   c0008d96 <inode_open>
c0008487:	83 c4 10             	add    $0x10,%esp
c000848a:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:780
	/* 填充all_blocks,将该目录的所占扇区地址全部写入all_blocks */
	uint8_t block_idx = 0;
c000848d:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:781
	uint32_t all_blocks[140] = {0}, block_cnt = 12;
c0008491:	8d 95 ac fd ff ff    	lea    -0x254(%ebp),%edx
c0008497:	b8 00 00 00 00       	mov    $0x0,%eax
c000849c:	b9 8c 00 00 00       	mov    $0x8c,%ecx
c00084a1:	89 d7                	mov    %edx,%edi
c00084a3:	f3 ab                	rep stos %eax,%es:(%edi)
c00084a5:	c7 45 f0 0c 00 00 00 	movl   $0xc,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:782
	while (block_idx < 12) {
c00084ac:	eb 22                	jmp    c00084d0 <get_child_dir_name+0x64>
/work/x86_os_my/fs/fs.c:783
		all_blocks[block_idx] = parent_dir_inode->i_sectors[block_idx];
c00084ae:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00084b2:	0f b6 4d f7          	movzbl -0x9(%ebp),%ecx
c00084b6:	8b 55 e8             	mov    -0x18(%ebp),%edx
c00084b9:	83 c1 04             	add    $0x4,%ecx
c00084bc:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
c00084bf:	89 94 85 ac fd ff ff 	mov    %edx,-0x254(%ebp,%eax,4)
/work/x86_os_my/fs/fs.c:784
		block_idx++;
c00084c6:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00084ca:	83 c0 01             	add    $0x1,%eax
c00084cd:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:782
static int get_child_dir_name(uint32_t p_inode_nr, uint32_t c_inode_nr, char* path, void* io_buf) {
	struct inode* parent_dir_inode = inode_open(cur_part, p_inode_nr);
	/* 填充all_blocks,将该目录的所占扇区地址全部写入all_blocks */
	uint8_t block_idx = 0;
	uint32_t all_blocks[140] = {0}, block_cnt = 12;
	while (block_idx < 12) {
c00084d0:	80 7d f7 0b          	cmpb   $0xb,-0x9(%ebp)
c00084d4:	76 d8                	jbe    c00084ae <get_child_dir_name+0x42>
/work/x86_os_my/fs/fs.c:786
		all_blocks[block_idx] = parent_dir_inode->i_sectors[block_idx];
		block_idx++;
	}
	if (parent_dir_inode->i_sectors[12]) {	// 若包含了一级间接块表,将共读入all_blocks.
c00084d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00084d9:	8b 40 40             	mov    0x40(%eax),%eax
c00084dc:	85 c0                	test   %eax,%eax
c00084de:	74 2c                	je     c000850c <get_child_dir_name+0xa0>
/work/x86_os_my/fs/fs.c:787
		ide_read(cur_part->my_disk, parent_dir_inode->i_sectors[12], all_blocks + 12, 1);
c00084e0:	8d 85 ac fd ff ff    	lea    -0x254(%ebp),%eax
c00084e6:	83 c0 30             	add    $0x30,%eax
c00084e9:	8b 55 e8             	mov    -0x18(%ebp),%edx
c00084ec:	8b 4a 40             	mov    0x40(%edx),%ecx
c00084ef:	8b 15 d0 2f 01 c0    	mov    0xc0012fd0,%edx
c00084f5:	8b 52 08             	mov    0x8(%edx),%edx
c00084f8:	6a 01                	push   $0x1
c00084fa:	50                   	push   %eax
c00084fb:	51                   	push   %ecx
c00084fc:	52                   	push   %edx
c00084fd:	e8 93 db ff ff       	call   c0006095 <ide_read>
c0008502:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:788
		block_cnt = 140;
c0008505:	c7 45 f0 8c 00 00 00 	movl   $0x8c,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:790
	}
	inode_close(parent_dir_inode);
c000850c:	83 ec 0c             	sub    $0xc,%esp
c000850f:	ff 75 e8             	pushl  -0x18(%ebp)
c0008512:	e8 c5 09 00 00       	call   c0008edc <inode_close>
c0008517:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:792

	struct dir_entry* dir_e = (struct dir_entry*)io_buf;
c000851a:	8b 45 14             	mov    0x14(%ebp),%eax
c000851d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/fs.c:793
	uint32_t dir_entry_size = cur_part->sb->dir_entry_size;
c0008520:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0008525:	8b 40 1c             	mov    0x1c(%eax),%eax
c0008528:	8b 40 30             	mov    0x30(%eax),%eax
c000852b:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/fs.c:794
	uint32_t dir_entrys_per_sec = (512 / dir_entry_size);
c000852e:	b8 00 02 00 00       	mov    $0x200,%eax
c0008533:	ba 00 00 00 00       	mov    $0x0,%edx
c0008538:	f7 75 e0             	divl   -0x20(%ebp)
c000853b:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/fs.c:795
	block_idx = 0;
c000853e:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:797
	/* 遍历所有块 */
	while(block_idx < block_cnt) {
c0008542:	e9 b1 00 00 00       	jmp    c00085f8 <get_child_dir_name+0x18c>
/work/x86_os_my/fs/fs.c:798
		if(all_blocks[block_idx]) {      // 如果相应块不为空则读入相应块
c0008547:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000854b:	8b 84 85 ac fd ff ff 	mov    -0x254(%ebp,%eax,4),%eax
c0008552:	85 c0                	test   %eax,%eax
c0008554:	0f 84 94 00 00 00    	je     c00085ee <get_child_dir_name+0x182>
/work/x86_os_my/fs/fs.c:799
			ide_read(cur_part->my_disk, all_blocks[block_idx], io_buf, 1);
c000855a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000855e:	8b 94 85 ac fd ff ff 	mov    -0x254(%ebp,%eax,4),%edx
c0008565:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c000856a:	8b 40 08             	mov    0x8(%eax),%eax
c000856d:	6a 01                	push   $0x1
c000856f:	ff 75 14             	pushl  0x14(%ebp)
c0008572:	52                   	push   %edx
c0008573:	50                   	push   %eax
c0008574:	e8 1c db ff ff       	call   c0006095 <ide_read>
c0008579:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:800
			uint8_t dir_e_idx = 0;
c000857c:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
/work/x86_os_my/fs/fs.c:802
			/* 遍历每个目录项 */
			while(dir_e_idx < dir_entrys_per_sec) {
c0008580:	eb 63                	jmp    c00085e5 <get_child_dir_name+0x179>
/work/x86_os_my/fs/fs.c:803
				if ((dir_e + dir_e_idx)->i_no == c_inode_nr) {
c0008582:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c0008586:	89 d0                	mov    %edx,%eax
c0008588:	01 c0                	add    %eax,%eax
c000858a:	01 d0                	add    %edx,%eax
c000858c:	c1 e0 03             	shl    $0x3,%eax
c000858f:	89 c2                	mov    %eax,%edx
c0008591:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0008594:	01 d0                	add    %edx,%eax
c0008596:	8b 40 10             	mov    0x10(%eax),%eax
c0008599:	3b 45 0c             	cmp    0xc(%ebp),%eax
c000859c:	75 3d                	jne    c00085db <get_child_dir_name+0x16f>
/work/x86_os_my/fs/fs.c:804
					strcat(path, "/");
c000859e:	83 ec 08             	sub    $0x8,%esp
c00085a1:	68 6f dc 00 c0       	push   $0xc000dc6f
c00085a6:	ff 75 10             	pushl  0x10(%ebp)
c00085a9:	e8 a9 b5 ff ff       	call   c0003b57 <strcat>
c00085ae:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:805
					strcat(path, (dir_e + dir_e_idx)->filename);
c00085b1:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c00085b5:	89 d0                	mov    %edx,%eax
c00085b7:	01 c0                	add    %eax,%eax
c00085b9:	01 d0                	add    %edx,%eax
c00085bb:	c1 e0 03             	shl    $0x3,%eax
c00085be:	89 c2                	mov    %eax,%edx
c00085c0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00085c3:	01 d0                	add    %edx,%eax
c00085c5:	83 ec 08             	sub    $0x8,%esp
c00085c8:	50                   	push   %eax
c00085c9:	ff 75 10             	pushl  0x10(%ebp)
c00085cc:	e8 86 b5 ff ff       	call   c0003b57 <strcat>
c00085d1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:806
					return 0;
c00085d4:	b8 00 00 00 00       	mov    $0x0,%eax
c00085d9:	eb 2f                	jmp    c000860a <get_child_dir_name+0x19e>
/work/x86_os_my/fs/fs.c:808
				}
				dir_e_idx++;
c00085db:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c00085df:	83 c0 01             	add    $0x1,%eax
c00085e2:	88 45 ef             	mov    %al,-0x11(%ebp)
/work/x86_os_my/fs/fs.c:802
	while(block_idx < block_cnt) {
		if(all_blocks[block_idx]) {      // 如果相应块不为空则读入相应块
			ide_read(cur_part->my_disk, all_blocks[block_idx], io_buf, 1);
			uint8_t dir_e_idx = 0;
			/* 遍历每个目录项 */
			while(dir_e_idx < dir_entrys_per_sec) {
c00085e5:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c00085e9:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c00085ec:	72 94                	jb     c0008582 <get_child_dir_name+0x116>
/work/x86_os_my/fs/fs.c:811
					return 0;
				}
				dir_e_idx++;
			}
		}
		block_idx++;
c00085ee:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00085f2:	83 c0 01             	add    $0x1,%eax
c00085f5:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:797
	struct dir_entry* dir_e = (struct dir_entry*)io_buf;
	uint32_t dir_entry_size = cur_part->sb->dir_entry_size;
	uint32_t dir_entrys_per_sec = (512 / dir_entry_size);
	block_idx = 0;
	/* 遍历所有块 */
	while(block_idx < block_cnt) {
c00085f8:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00085fc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c00085ff:	0f 82 42 ff ff ff    	jb     c0008547 <get_child_dir_name+0xdb>
/work/x86_os_my/fs/fs.c:813
				dir_e_idx++;
			}
		}
		block_idx++;
	}
	return -1;
c0008605:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
/work/x86_os_my/fs/fs.c:814 (discriminator 1)
}
c000860a:	8b 7d fc             	mov    -0x4(%ebp),%edi
c000860d:	c9                   	leave  
c000860e:	c3                   	ret    

c000860f <sys_getcwd>:
sys_getcwd():
/work/x86_os_my/fs/fs.c:819

/* 把当前工作目录绝对路径写入buf, size是buf的大小.
 当buf为NULL时,由操作系统分配存储工作路径的空间并返回地址
 失败则返回NULL */
char* sys_getcwd(char* buf, uint32_t size) {
c000860f:	55                   	push   %ebp
c0008610:	89 e5                	mov    %esp,%ebp
c0008612:	57                   	push   %edi
c0008613:	53                   	push   %ebx
c0008614:	81 ec 20 02 00 00    	sub    $0x220,%esp
/work/x86_os_my/fs/fs.c:822
	/* 确保buf不为空,若用户进程提供的buf为NULL,
	系统调用getcwd中要为用户进程通过malloc分配内存 */
	ASSERT(buf != NULL);
c000861a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c000861e:	75 1c                	jne    c000863c <sys_getcwd+0x2d>
/work/x86_os_my/fs/fs.c:822 (discriminator 1)
c0008620:	68 5a de 00 c0       	push   $0xc000de5a
c0008625:	68 68 e3 00 c0       	push   $0xc000e368
c000862a:	68 36 03 00 00       	push   $0x336
c000862f:	68 f5 da 00 c0       	push   $0xc000daf5
c0008634:	e8 78 9d ff ff       	call   c00023b1 <panic_spin>
c0008639:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:823
	void* io_buf = sys_malloc(SECTOR_SIZE);
c000863c:	83 ec 0c             	sub    $0xc,%esp
c000863f:	68 00 02 00 00       	push   $0x200
c0008644:	e8 13 a7 ff ff       	call   c0002d5c <sys_malloc>
c0008649:	83 c4 10             	add    $0x10,%esp
c000864c:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:824
	if (io_buf == NULL) {
c000864f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0008653:	75 0a                	jne    c000865f <sys_getcwd+0x50>
/work/x86_os_my/fs/fs.c:825
		return NULL;
c0008655:	b8 00 00 00 00       	mov    $0x0,%eax
c000865a:	e9 9d 01 00 00       	jmp    c00087fc <sys_getcwd+0x1ed>
/work/x86_os_my/fs/fs.c:828
	}

	struct task_struct* cur_thread = running_thread();
c000865f:	e8 d6 b5 ff ff       	call   c0003c3a <running_thread>
c0008664:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:829
	int32_t parent_inode_nr = 0;
c0008667:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:830
	int32_t child_inode_nr = cur_thread->cwd_inode_nr;
c000866e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008671:	8b 80 0c 01 00 00    	mov    0x10c(%eax),%eax
c0008677:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:831
	ASSERT(child_inode_nr >= 0 && child_inode_nr < 4096);	// inode位图，最大支持4096个inode
c000867a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c000867e:	78 09                	js     c0008689 <sys_getcwd+0x7a>
/work/x86_os_my/fs/fs.c:831 (discriminator 1)
c0008680:	81 7d f4 ff 0f 00 00 	cmpl   $0xfff,-0xc(%ebp)
c0008687:	7e 1c                	jle    c00086a5 <sys_getcwd+0x96>
/work/x86_os_my/fs/fs.c:831 (discriminator 3)
c0008689:	68 cc e1 00 c0       	push   $0xc000e1cc
c000868e:	68 68 e3 00 c0       	push   $0xc000e368
c0008693:	68 3f 03 00 00       	push   $0x33f
c0008698:	68 f5 da 00 c0       	push   $0xc000daf5
c000869d:	e8 0f 9d ff ff       	call   c00023b1 <panic_spin>
c00086a2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:833
	/* 若当前目录是根目录,直接返回'/' */
	if (child_inode_nr == 0) {
c00086a5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c00086a9:	75 25                	jne    c00086d0 <sys_getcwd+0xc1>
/work/x86_os_my/fs/fs.c:834
		buf[0] = '/';
c00086ab:	8b 45 08             	mov    0x8(%ebp),%eax
c00086ae:	c6 00 2f             	movb   $0x2f,(%eax)
/work/x86_os_my/fs/fs.c:835
		buf[1] = 0;
c00086b1:	8b 45 08             	mov    0x8(%ebp),%eax
c00086b4:	83 c0 01             	add    $0x1,%eax
c00086b7:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/fs/fs.c:836
		sys_free(io_buf);
c00086ba:	83 ec 0c             	sub    $0xc,%esp
c00086bd:	ff 75 f0             	pushl  -0x10(%ebp)
c00086c0:	e8 c4 ac ff ff       	call   c0003389 <sys_free>
c00086c5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:837
		return buf;
c00086c8:	8b 45 08             	mov    0x8(%ebp),%eax
c00086cb:	e9 2c 01 00 00       	jmp    c00087fc <sys_getcwd+0x1ed>
/work/x86_os_my/fs/fs.c:840
	}

	memset(buf, 0, size);
c00086d0:	83 ec 04             	sub    $0x4,%esp
c00086d3:	ff 75 0c             	pushl  0xc(%ebp)
c00086d6:	6a 00                	push   $0x0
c00086d8:	ff 75 08             	pushl  0x8(%ebp)
c00086db:	e8 73 b1 ff ff       	call   c0003853 <memset>
c00086e0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:841
	char full_path_reverse[MAX_PATH_LEN] = {0};	// 用来做全路径缓冲区
c00086e3:	8d 85 e2 fd ff ff    	lea    -0x21e(%ebp),%eax
c00086e9:	b9 00 02 00 00       	mov    $0x200,%ecx
c00086ee:	bb 00 00 00 00       	mov    $0x0,%ebx
c00086f3:	89 18                	mov    %ebx,(%eax)
c00086f5:	89 5c 08 fc          	mov    %ebx,-0x4(%eax,%ecx,1)
c00086f9:	8d 50 04             	lea    0x4(%eax),%edx
c00086fc:	83 e2 fc             	and    $0xfffffffc,%edx
c00086ff:	29 d0                	sub    %edx,%eax
c0008701:	01 c1                	add    %eax,%ecx
c0008703:	83 e1 fc             	and    $0xfffffffc,%ecx
c0008706:	c1 e9 02             	shr    $0x2,%ecx
c0008709:	89 d7                	mov    %edx,%edi
c000870b:	89 d8                	mov    %ebx,%eax
c000870d:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/fs/fs.c:846

	/* 从下往上逐层找父目录,直到找到根目录为止.
	 * 当child_inode_nr为根目录的inode编号(0)时停止,
	 * 即已经查看完根目录中的目录项 */
	while ((child_inode_nr)) {
c000870f:	eb 52                	jmp    c0008763 <sys_getcwd+0x154>
/work/x86_os_my/fs/fs.c:847
		parent_inode_nr = get_parent_dir_inode_nr(child_inode_nr, io_buf);
c0008711:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0008714:	83 ec 08             	sub    $0x8,%esp
c0008717:	ff 75 f0             	pushl  -0x10(%ebp)
c000871a:	50                   	push   %eax
c000871b:	e8 88 fc ff ff       	call   c00083a8 <get_parent_dir_inode_nr>
c0008720:	83 c4 10             	add    $0x10,%esp
c0008723:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:848
		if (get_child_dir_name(parent_inode_nr, child_inode_nr, full_path_reverse, io_buf) == -1) {	// 或未找到名字,失败退出
c0008726:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0008729:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000872c:	ff 75 f0             	pushl  -0x10(%ebp)
c000872f:	8d 8d e2 fd ff ff    	lea    -0x21e(%ebp),%ecx
c0008735:	51                   	push   %ecx
c0008736:	52                   	push   %edx
c0008737:	50                   	push   %eax
c0008738:	e8 2f fd ff ff       	call   c000846c <get_child_dir_name>
c000873d:	83 c4 10             	add    $0x10,%esp
c0008740:	83 f8 ff             	cmp    $0xffffffff,%eax
c0008743:	75 18                	jne    c000875d <sys_getcwd+0x14e>
/work/x86_os_my/fs/fs.c:849
			sys_free(io_buf);
c0008745:	83 ec 0c             	sub    $0xc,%esp
c0008748:	ff 75 f0             	pushl  -0x10(%ebp)
c000874b:	e8 39 ac ff ff       	call   c0003389 <sys_free>
c0008750:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:850
			return NULL;
c0008753:	b8 00 00 00 00       	mov    $0x0,%eax
c0008758:	e9 9f 00 00 00       	jmp    c00087fc <sys_getcwd+0x1ed>
/work/x86_os_my/fs/fs.c:852
		}
		child_inode_nr = parent_inode_nr;
c000875d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0008760:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:846
	char full_path_reverse[MAX_PATH_LEN] = {0};	// 用来做全路径缓冲区

	/* 从下往上逐层找父目录,直到找到根目录为止.
	 * 当child_inode_nr为根目录的inode编号(0)时停止,
	 * 即已经查看完根目录中的目录项 */
	while ((child_inode_nr)) {
c0008763:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0008767:	75 a8                	jne    c0008711 <sys_getcwd+0x102>
/work/x86_os_my/fs/fs.c:854
			sys_free(io_buf);
			return NULL;
		}
		child_inode_nr = parent_inode_nr;
	}
	ASSERT(strlen(full_path_reverse) <= size);
c0008769:	83 ec 0c             	sub    $0xc,%esp
c000876c:	8d 85 e2 fd ff ff    	lea    -0x21e(%ebp),%eax
c0008772:	50                   	push   %eax
c0008773:	e8 65 b2 ff ff       	call   c00039dd <strlen>
c0008778:	83 c4 10             	add    $0x10,%esp
c000877b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c000877e:	76 4e                	jbe    c00087ce <sys_getcwd+0x1bf>
/work/x86_os_my/fs/fs.c:854 (discriminator 1)
c0008780:	68 fc e1 00 c0       	push   $0xc000e1fc
c0008785:	68 68 e3 00 c0       	push   $0xc000e368
c000878a:	68 56 03 00 00       	push   $0x356
c000878f:	68 f5 da 00 c0       	push   $0xc000daf5
c0008794:	e8 18 9c ff ff       	call   c00023b1 <panic_spin>
c0008799:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:859 (discriminator 1)
	/* 至此 full_path_reverse 中的路径是反着的,
	 * 即子目录在前(左),父目录在后(右) ,
	 * 现将full_path_reverse中的路径反置 */
	char* last_slash;	// 用于记录字符串中最后一个斜杠地址
	while ((last_slash = strrchr(full_path_reverse, '/'))) {
c000879c:	eb 30                	jmp    c00087ce <sys_getcwd+0x1bf>
/work/x86_os_my/fs/fs.c:860
		uint16_t len = strlen(buf);
c000879e:	83 ec 0c             	sub    $0xc,%esp
c00087a1:	ff 75 08             	pushl  0x8(%ebp)
c00087a4:	e8 34 b2 ff ff       	call   c00039dd <strlen>
c00087a9:	83 c4 10             	add    $0x10,%esp
c00087ac:	66 89 45 e2          	mov    %ax,-0x1e(%ebp)
/work/x86_os_my/fs/fs.c:861
		strcpy(buf + len, last_slash);
c00087b0:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c00087b4:	8b 45 08             	mov    0x8(%ebp),%eax
c00087b7:	01 d0                	add    %edx,%eax
c00087b9:	83 ec 08             	sub    $0x8,%esp
c00087bc:	ff 75 e4             	pushl  -0x1c(%ebp)
c00087bf:	50                   	push   %eax
c00087c0:	e8 c3 b1 ff ff       	call   c0003988 <strcpy>
c00087c5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:863
		/* 在full_path_reverse中添加结束字符,做为下一次执行strcpy中last_slash的边界 */
		*last_slash = 0;
c00087c8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00087cb:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/fs/fs.c:859
	ASSERT(strlen(full_path_reverse) <= size);
	/* 至此 full_path_reverse 中的路径是反着的,
	 * 即子目录在前(左),父目录在后(右) ,
	 * 现将full_path_reverse中的路径反置 */
	char* last_slash;	// 用于记录字符串中最后一个斜杠地址
	while ((last_slash = strrchr(full_path_reverse, '/'))) {
c00087ce:	83 ec 08             	sub    $0x8,%esp
c00087d1:	6a 2f                	push   $0x2f
c00087d3:	8d 85 e2 fd ff ff    	lea    -0x21e(%ebp),%eax
c00087d9:	50                   	push   %eax
c00087da:	e8 1a b3 ff ff       	call   c0003af9 <strrchr>
c00087df:	83 c4 10             	add    $0x10,%esp
c00087e2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c00087e5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c00087e9:	75 b3                	jne    c000879e <sys_getcwd+0x18f>
/work/x86_os_my/fs/fs.c:865
		uint16_t len = strlen(buf);
		strcpy(buf + len, last_slash);
		/* 在full_path_reverse中添加结束字符,做为下一次执行strcpy中last_slash的边界 */
		*last_slash = 0;
	}
	sys_free(io_buf);
c00087eb:	83 ec 0c             	sub    $0xc,%esp
c00087ee:	ff 75 f0             	pushl  -0x10(%ebp)
c00087f1:	e8 93 ab ff ff       	call   c0003389 <sys_free>
c00087f6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:866
	return buf;
c00087f9:	8b 45 08             	mov    0x8(%ebp),%eax
/work/x86_os_my/fs/fs.c:867 (discriminator 2)
}
c00087fc:	8d 65 f8             	lea    -0x8(%ebp),%esp
c00087ff:	5b                   	pop    %ebx
c0008800:	5f                   	pop    %edi
c0008801:	5d                   	pop    %ebp
c0008802:	c3                   	ret    

c0008803 <sys_chdir>:
sys_chdir():
/work/x86_os_my/fs/fs.c:870

/* 更改当前工作目录为绝对路径path,成功则返回0,失败返回-1 */
int32_t sys_chdir(const char* path) {
c0008803:	55                   	push   %ebp
c0008804:	89 e5                	mov    %esp,%ebp
c0008806:	81 ec 18 02 00 00    	sub    $0x218,%esp
/work/x86_os_my/fs/fs.c:871
	int32_t ret = -1;
c000880c:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:873
	struct path_search_record searched_record;
	memset(&searched_record, 0, sizeof(struct path_search_record));
c0008813:	83 ec 04             	sub    $0x4,%esp
c0008816:	68 08 02 00 00       	push   $0x208
c000881b:	6a 00                	push   $0x0
c000881d:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
c0008823:	50                   	push   %eax
c0008824:	e8 2a b0 ff ff       	call   c0003853 <memset>
c0008829:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:874
	int inode_no = search_file(path, &searched_record);
c000882c:	83 ec 08             	sub    $0x8,%esp
c000882f:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
c0008835:	50                   	push   %eax
c0008836:	ff 75 08             	pushl  0x8(%ebp)
c0008839:	e8 6c ea ff ff       	call   c00072aa <search_file>
c000883e:	83 c4 10             	add    $0x10,%esp
c0008841:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:875
	if (inode_no != -1) {
c0008844:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c0008848:	74 34                	je     c000887e <sys_chdir+0x7b>
/work/x86_os_my/fs/fs.c:876
		if (searched_record.file_type == FT_DIRECTORY) {
c000884a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000884d:	83 f8 02             	cmp    $0x2,%eax
c0008850:	75 19                	jne    c000886b <sys_chdir+0x68>
/work/x86_os_my/fs/fs.c:877
			running_thread()->cwd_inode_nr = inode_no;
c0008852:	e8 e3 b3 ff ff       	call   c0003c3a <running_thread>
c0008857:	89 c2                	mov    %eax,%edx
c0008859:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000885c:	89 82 0c 01 00 00    	mov    %eax,0x10c(%edx)
/work/x86_os_my/fs/fs.c:878
			ret = 0;
c0008862:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0008869:	eb 13                	jmp    c000887e <sys_chdir+0x7b>
/work/x86_os_my/fs/fs.c:880
		} else {
			printk("sys_chdir: %s is regular file or other!\n", path);
c000886b:	83 ec 08             	sub    $0x8,%esp
c000886e:	ff 75 08             	pushl  0x8(%ebp)
c0008871:	68 20 e2 00 c0       	push   $0xc000e220
c0008876:	e8 93 e2 ff ff       	call   c0006b0e <printk>
c000887b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:883
		}
	}
	dir_close(searched_record.parent_dir);
c000887e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0008881:	83 ec 0c             	sub    $0xc,%esp
c0008884:	50                   	push   %eax
c0008885:	e8 f5 1d 00 00       	call   c000a67f <dir_close>
c000888a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:884
	return ret;
c000888d:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:885
}
c0008890:	c9                   	leave  
c0008891:	c3                   	ret    

c0008892 <sys_stat>:
sys_stat():
/work/x86_os_my/fs/fs.c:888

/* 在buf中填充文件结构相关信息,成功时返回0,失败返回-1 */
int32_t sys_stat(const char* path, struct stat* buf) {
c0008892:	55                   	push   %ebp
c0008893:	89 e5                	mov    %esp,%ebp
c0008895:	81 ec 28 02 00 00    	sub    $0x228,%esp
/work/x86_os_my/fs/fs.c:890
	/* 若直接查看根目录'/' */
	if (!strcmp(path, "/") || !strcmp(path, "/.") || !strcmp(path, "/..")) {
c000889b:	83 ec 08             	sub    $0x8,%esp
c000889e:	68 6f dc 00 c0       	push   $0xc000dc6f
c00088a3:	ff 75 08             	pushl  0x8(%ebp)
c00088a6:	e8 7d b1 ff ff       	call   c0003a28 <strcmp>
c00088ab:	83 c4 10             	add    $0x10,%esp
c00088ae:	84 c0                	test   %al,%al
c00088b0:	74 2e                	je     c00088e0 <sys_stat+0x4e>
/work/x86_os_my/fs/fs.c:890 (discriminator 1)
c00088b2:	83 ec 08             	sub    $0x8,%esp
c00088b5:	68 71 dc 00 c0       	push   $0xc000dc71
c00088ba:	ff 75 08             	pushl  0x8(%ebp)
c00088bd:	e8 66 b1 ff ff       	call   c0003a28 <strcmp>
c00088c2:	83 c4 10             	add    $0x10,%esp
c00088c5:	84 c0                	test   %al,%al
c00088c7:	74 17                	je     c00088e0 <sys_stat+0x4e>
/work/x86_os_my/fs/fs.c:890 (discriminator 2)
c00088c9:	83 ec 08             	sub    $0x8,%esp
c00088cc:	68 74 dc 00 c0       	push   $0xc000dc74
c00088d1:	ff 75 08             	pushl  0x8(%ebp)
c00088d4:	e8 4f b1 ff ff       	call   c0003a28 <strcmp>
c00088d9:	83 c4 10             	add    $0x10,%esp
c00088dc:	84 c0                	test   %al,%al
c00088de:	75 2b                	jne    c000890b <sys_stat+0x79>
/work/x86_os_my/fs/fs.c:891
		buf->st_filetype = FT_DIRECTORY;
c00088e0:	8b 45 0c             	mov    0xc(%ebp),%eax
c00088e3:	c7 40 08 02 00 00 00 	movl   $0x2,0x8(%eax)
/work/x86_os_my/fs/fs.c:892
		buf->st_ino = 0;
c00088ea:	8b 45 0c             	mov    0xc(%ebp),%eax
c00088ed:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/fs/fs.c:893
		buf->st_size = root_dir.inode->i_size;
c00088f3:	a1 60 31 01 c0       	mov    0xc0013160,%eax
c00088f8:	8b 50 04             	mov    0x4(%eax),%edx
c00088fb:	8b 45 0c             	mov    0xc(%ebp),%eax
c00088fe:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/fs.c:894
		return 0;
c0008901:	b8 00 00 00 00       	mov    $0x0,%eax
c0008906:	e9 af 00 00 00       	jmp    c00089ba <sys_stat+0x128>
/work/x86_os_my/fs/fs.c:897
	}

	int32_t ret = -1;	// 默认返回值
c000890b:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:899
	struct path_search_record searched_record;
	memset(&searched_record, 0, sizeof(struct path_search_record));   // 记得初始化或清0,否则栈中信息不知道是什么
c0008912:	83 ec 04             	sub    $0x4,%esp
c0008915:	68 08 02 00 00       	push   $0x208
c000891a:	6a 00                	push   $0x0
c000891c:	8d 85 e4 fd ff ff    	lea    -0x21c(%ebp),%eax
c0008922:	50                   	push   %eax
c0008923:	e8 2b af ff ff       	call   c0003853 <memset>
c0008928:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:900
	int inode_no = search_file(path, &searched_record);
c000892b:	83 ec 08             	sub    $0x8,%esp
c000892e:	8d 85 e4 fd ff ff    	lea    -0x21c(%ebp),%eax
c0008934:	50                   	push   %eax
c0008935:	ff 75 08             	pushl  0x8(%ebp)
c0008938:	e8 6d e9 ff ff       	call   c00072aa <search_file>
c000893d:	83 c4 10             	add    $0x10,%esp
c0008940:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:901
	if (inode_no != -1) {
c0008943:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c0008947:	74 4c                	je     c0008995 <sys_stat+0x103>
/work/x86_os_my/fs/fs.c:902
		struct inode* obj_inode = inode_open(cur_part, inode_no);   // 只为获得文件大小
c0008949:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000894c:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0008951:	83 ec 08             	sub    $0x8,%esp
c0008954:	52                   	push   %edx
c0008955:	50                   	push   %eax
c0008956:	e8 3b 04 00 00       	call   c0008d96 <inode_open>
c000895b:	83 c4 10             	add    $0x10,%esp
c000895e:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:903
		buf->st_size = obj_inode->i_size;
c0008961:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008964:	8b 50 04             	mov    0x4(%eax),%edx
c0008967:	8b 45 0c             	mov    0xc(%ebp),%eax
c000896a:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/fs.c:904
		inode_close(obj_inode);
c000896d:	83 ec 0c             	sub    $0xc,%esp
c0008970:	ff 75 ec             	pushl  -0x14(%ebp)
c0008973:	e8 64 05 00 00       	call   c0008edc <inode_close>
c0008978:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:905
		buf->st_filetype = searched_record.file_type;
c000897b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c000897e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0008981:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/fs/fs.c:906
		buf->st_ino = inode_no;
c0008984:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0008987:	8b 45 0c             	mov    0xc(%ebp),%eax
c000898a:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/fs/fs.c:907
		ret = 0;
c000898c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0008993:	eb 13                	jmp    c00089a8 <sys_stat+0x116>
/work/x86_os_my/fs/fs.c:909
	} else {
		printk("sys_stat: %s not found\n", path);
c0008995:	83 ec 08             	sub    $0x8,%esp
c0008998:	ff 75 08             	pushl  0x8(%ebp)
c000899b:	68 49 e2 00 c0       	push   $0xc000e249
c00089a0:	e8 69 e1 ff ff       	call   c0006b0e <printk>
c00089a5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:911
	}
	dir_close(searched_record.parent_dir);
c00089a8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00089ab:	83 ec 0c             	sub    $0xc,%esp
c00089ae:	50                   	push   %eax
c00089af:	e8 cb 1c 00 00       	call   c000a67f <dir_close>
c00089b4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:912
	return ret;
c00089b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/fs.c:913 (discriminator 1)
}
c00089ba:	c9                   	leave  
c00089bb:	c3                   	ret    

c00089bc <sys_putchar>:
sys_putchar():
/work/x86_os_my/fs/fs.c:916

/* 向屏幕输出一个字符 */
void sys_putchar(char char_asci) {
c00089bc:	55                   	push   %ebp
c00089bd:	89 e5                	mov    %esp,%ebp
c00089bf:	83 ec 18             	sub    $0x18,%esp
c00089c2:	8b 45 08             	mov    0x8(%ebp),%eax
c00089c5:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/fs/fs.c:917
	console_put_char(char_asci);
c00089c8:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c00089cc:	0f b6 c0             	movzbl %al,%eax
c00089cf:	83 ec 0c             	sub    $0xc,%esp
c00089d2:	50                   	push   %eax
c00089d3:	e8 e9 be ff ff       	call   c00048c1 <console_put_char>
c00089d8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:918
}
c00089db:	90                   	nop
c00089dc:	c9                   	leave  
c00089dd:	c3                   	ret    

c00089de <filesys_init>:
filesys_init():
/work/x86_os_my/fs/fs.c:930
 * 只支持 partition_format 函数创建的文件系统，其魔数等于 0x19590318
 * 三层循环：遍历通道，遍历通道中的硬盘，遍历硬盘上的分区
 * 全局变量 channel_cnt 通道数，定义在 ide.c
 * 全局变量 channels 结构体，定义在 ide.c
 */
void filesys_init() {
c00089de:	55                   	push   %ebp
c00089df:	89 e5                	mov    %esp,%ebp
c00089e1:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/fs/fs.c:931
	uint8_t channel_no = 0, dev_no, part_idx = 0;
c00089e4:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
c00089e8:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
/work/x86_os_my/fs/fs.c:934

	/* sb_buf用来存储从硬盘上读入的超级块 */
	struct super_block* sb_buf = (struct super_block*)sys_malloc(SECTOR_SIZE);
c00089ec:	83 ec 0c             	sub    $0xc,%esp
c00089ef:	68 00 02 00 00       	push   $0x200
c00089f4:	e8 63 a3 ff ff       	call   c0002d5c <sys_malloc>
c00089f9:	83 c4 10             	add    $0x10,%esp
c00089fc:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/fs.c:935
	if (sb_buf == NULL) {
c00089ff:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0008a03:	75 1c                	jne    c0008a21 <filesys_init+0x43>
/work/x86_os_my/fs/fs.c:936
		PANIC("alloc memory failed!");
c0008a05:	68 e0 da 00 c0       	push   $0xc000dae0
c0008a0a:	68 74 e3 00 c0       	push   $0xc000e374
c0008a0f:	68 a8 03 00 00       	push   $0x3a8
c0008a14:	68 f5 da 00 c0       	push   $0xc000daf5
c0008a19:	e8 93 99 ff ff       	call   c00023b1 <panic_spin>
c0008a1e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:939
	}

	printk("searching filesystem......\n");
c0008a21:	83 ec 0c             	sub    $0xc,%esp
c0008a24:	68 61 e2 00 c0       	push   $0xc000e261
c0008a29:	e8 e0 e0 ff ff       	call   c0006b0e <printk>
c0008a2e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:941
	/* 遍历通道 */
	while (channel_no < channel_cnt) {
c0008a31:	e9 1a 01 00 00       	jmp    c0008b50 <filesys_init+0x172>
/work/x86_os_my/fs/fs.c:942
		dev_no = 0;
c0008a36:	c6 45 f6 00          	movb   $0x0,-0xa(%ebp)
/work/x86_os_my/fs/fs.c:944
		/* 遍历通道里的硬盘 */
		while(dev_no < 2) {
c0008a3a:	e9 fd 00 00 00       	jmp    c0008b3c <filesys_init+0x15e>
/work/x86_os_my/fs/fs.c:945
			if (dev_no == 0) {		// 跨过裸盘hd60M.img
c0008a3f:	80 7d f6 00          	cmpb   $0x0,-0xa(%ebp)
c0008a43:	75 0f                	jne    c0008a54 <filesys_init+0x76>
/work/x86_os_my/fs/fs.c:946
				dev_no++;
c0008a45:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0008a49:	83 c0 01             	add    $0x1,%eax
c0008a4c:	88 45 f6             	mov    %al,-0xa(%ebp)
/work/x86_os_my/fs/fs.c:947
				continue;
c0008a4f:	e9 e8 00 00 00       	jmp    c0008b3c <filesys_init+0x15e>
/work/x86_os_my/fs/fs.c:949
			}
			struct disk* hd = &channels[channel_no].devices[dev_no];
c0008a54:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0008a58:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
c0008a5c:	69 d2 10 03 00 00    	imul   $0x310,%edx,%edx
c0008a62:	69 c0 60 06 00 00    	imul   $0x660,%eax,%eax
c0008a68:	01 d0                	add    %edx,%eax
c0008a6a:	83 c0 40             	add    $0x40,%eax
c0008a6d:	05 00 23 01 c0       	add    $0xc0012300,%eax
c0008a72:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/fs.c:950
			struct partition* part = hd->prim_parts;	// 主分区数组
c0008a75:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0008a78:	83 c0 10             	add    $0x10,%eax
c0008a7b:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:952
			/* 遍历硬盘里的分区 */
			while(part_idx < 12) {						// 4个主分区+8个逻辑
c0008a7e:	e9 a5 00 00 00       	jmp    c0008b28 <filesys_init+0x14a>
/work/x86_os_my/fs/fs.c:953
				if (part_idx == 4) {
c0008a83:	80 7d f5 04          	cmpb   $0x4,-0xb(%ebp)
c0008a87:	75 0b                	jne    c0008a94 <filesys_init+0xb6>
/work/x86_os_my/fs/fs.c:954
					part = hd->logic_parts;				// 逻辑分区数组
c0008a89:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0008a8c:	05 10 01 00 00       	add    $0x110,%eax
c0008a91:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:959
				}

				/* channels数组是全局变量,默认值为0
				 * 固 channels.disk.partition.sec_cnt 在未初始化时，也为0 */
				if (part->sec_cnt != 0) {	// 如果分区存在，以sec_cnt是否为0当判断依据
c0008a94:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008a97:	8b 40 04             	mov    0x4(%eax),%eax
c0008a9a:	85 c0                	test   %eax,%eax
c0008a9c:	74 7c                	je     c0008b1a <filesys_init+0x13c>
/work/x86_os_my/fs/fs.c:960
					memset(sb_buf, 0, SECTOR_SIZE);
c0008a9e:	83 ec 04             	sub    $0x4,%esp
c0008aa1:	68 00 02 00 00       	push   $0x200
c0008aa6:	6a 00                	push   $0x0
c0008aa8:	ff 75 e8             	pushl  -0x18(%ebp)
c0008aab:	e8 a3 ad ff ff       	call   c0003853 <memset>
c0008ab0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:963

					/* 读出分区的超级块，根据魔数判断是否存在我们定义的文件系统  */
					ide_read(hd, part->start_lba + 1, sb_buf, 1);
c0008ab3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008ab6:	8b 00                	mov    (%eax),%eax
c0008ab8:	83 c0 01             	add    $0x1,%eax
c0008abb:	6a 01                	push   $0x1
c0008abd:	ff 75 e8             	pushl  -0x18(%ebp)
c0008ac0:	50                   	push   %eax
c0008ac1:	ff 75 e4             	pushl  -0x1c(%ebp)
c0008ac4:	e8 cc d5 ff ff       	call   c0006095 <ide_read>
c0008ac9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:964
					if (sb_buf->magic == 0x19590318) {
c0008acc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0008acf:	8b 00                	mov    (%eax),%eax
c0008ad1:	3d 18 03 59 19       	cmp    $0x19590318,%eax
c0008ad6:	75 19                	jne    c0008af1 <filesys_init+0x113>
/work/x86_os_my/fs/fs.c:965
						printk("%s has filesystem\n", part->name);
c0008ad8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008adb:	83 c0 14             	add    $0x14,%eax
c0008ade:	83 ec 08             	sub    $0x8,%esp
c0008ae1:	50                   	push   %eax
c0008ae2:	68 7d e2 00 c0       	push   $0xc000e27d
c0008ae7:	e8 22 e0 ff ff       	call   c0006b0e <printk>
c0008aec:	83 c4 10             	add    $0x10,%esp
c0008aef:	eb 29                	jmp    c0008b1a <filesys_init+0x13c>
/work/x86_os_my/fs/fs.c:968
					} else {
						// 不存在我们的文件系统，则进行格式化
						printk("formatting %s`s partition %s......\n", hd->name, part->name);
c0008af1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008af4:	8d 50 14             	lea    0x14(%eax),%edx
c0008af7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0008afa:	83 ec 04             	sub    $0x4,%esp
c0008afd:	52                   	push   %edx
c0008afe:	50                   	push   %eax
c0008aff:	68 90 e2 00 c0       	push   $0xc000e290
c0008b04:	e8 05 e0 ff ff       	call   c0006b0e <printk>
c0008b09:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:969
						partition_format(part);
c0008b0c:	83 ec 0c             	sub    $0xc,%esp
c0008b0f:	ff 75 f0             	pushl  -0x10(%ebp)
c0008b12:	e8 5e e2 ff ff       	call   c0006d75 <partition_format>
c0008b17:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:972
					}
				}
				part_idx++;
c0008b1a:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0008b1e:	83 c0 01             	add    $0x1,%eax
c0008b21:	88 45 f5             	mov    %al,-0xb(%ebp)
/work/x86_os_my/fs/fs.c:973
				part++;
c0008b24:	83 45 f0 40          	addl   $0x40,-0x10(%ebp)
/work/x86_os_my/fs/fs.c:952
				continue;
			}
			struct disk* hd = &channels[channel_no].devices[dev_no];
			struct partition* part = hd->prim_parts;	// 主分区数组
			/* 遍历硬盘里的分区 */
			while(part_idx < 12) {						// 4个主分区+8个逻辑
c0008b28:	80 7d f5 0b          	cmpb   $0xb,-0xb(%ebp)
c0008b2c:	0f 86 51 ff ff ff    	jbe    c0008a83 <filesys_init+0xa5>
/work/x86_os_my/fs/fs.c:975
					}
				}
				part_idx++;
				part++;
			}	/* end of 遍历分区 */
			dev_no++;
c0008b32:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0008b36:	83 c0 01             	add    $0x1,%eax
c0008b39:	88 45 f6             	mov    %al,-0xa(%ebp)
/work/x86_os_my/fs/fs.c:944
	printk("searching filesystem......\n");
	/* 遍历通道 */
	while (channel_no < channel_cnt) {
		dev_no = 0;
		/* 遍历通道里的硬盘 */
		while(dev_no < 2) {
c0008b3c:	80 7d f6 01          	cmpb   $0x1,-0xa(%ebp)
c0008b40:	0f 86 f9 fe ff ff    	jbe    c0008a3f <filesys_init+0x61>
/work/x86_os_my/fs/fs.c:977
				part_idx++;
				part++;
			}	/* end of 遍历分区 */
			dev_no++;
		}	/* end of 遍历硬盘 */
		channel_no++;
c0008b46:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0008b4a:	83 c0 01             	add    $0x1,%eax
c0008b4d:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/fs.c:941
		PANIC("alloc memory failed!");
	}

	printk("searching filesystem......\n");
	/* 遍历通道 */
	while (channel_no < channel_cnt) {
c0008b50:	0f b6 05 e0 22 01 c0 	movzbl 0xc00122e0,%eax
c0008b57:	38 45 f7             	cmp    %al,-0x9(%ebp)
c0008b5a:	0f 82 d6 fe ff ff    	jb     c0008a36 <filesys_init+0x58>
/work/x86_os_my/fs/fs.c:979
			}	/* end of 遍历分区 */
			dev_no++;
		}	/* end of 遍历硬盘 */
		channel_no++;
	}	/* end of 遍历通道 */
	sys_free(sb_buf);
c0008b60:	83 ec 0c             	sub    $0xc,%esp
c0008b63:	ff 75 e8             	pushl  -0x18(%ebp)
c0008b66:	e8 1e a8 ff ff       	call   c0003389 <sys_free>
c0008b6b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:984


	/* 挂载分区 */
	/* 默认操作的分区 */
	char default_part[8] = "sdb1";
c0008b6e:	c7 45 dc 73 64 62 31 	movl   $0x31626473,-0x24(%ebp)
c0008b75:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
/work/x86_os_my/fs/fs.c:995
	参数：
	partition_list 是所有分区的链表
	mount_partition 是挂载分区的函数
	(int)default_part 将数组地址转换成整型作为 mount_partition 的参数
	*/
	list_traversal(&partition_list, mount_partition, (int)default_part);
c0008b7c:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0008b7f:	83 ec 04             	sub    $0x4,%esp
c0008b82:	50                   	push   %eax
c0008b83:	68 6a 6b 00 c0       	push   $0xc0006b6a
c0008b88:	68 c0 2f 01 c0       	push   $0xc0012fc0
c0008b8d:	e8 f5 bb ff ff       	call   c0004787 <list_traversal>
c0008b92:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:999


	/* 将当前分区的根目录打开 + 初始化文件表 */
	open_root_dir(cur_part);
c0008b95:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0008b9a:	83 ec 0c             	sub    $0xc,%esp
c0008b9d:	50                   	push   %eax
c0008b9e:	e8 94 18 00 00       	call   c000a437 <open_root_dir>
c0008ba3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/fs.c:1000
	uint32_t fd_idx = 0;
c0008ba6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/fs.c:1001
	while (fd_idx < MAX_FILE_OPEN) {
c0008bad:	eb 1d                	jmp    c0008bcc <filesys_init+0x1ee>
/work/x86_os_my/fs/fs.c:1002
		file_table[fd_idx++].fd_inode = NULL;
c0008baf:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0008bb2:	8d 42 01             	lea    0x1(%edx),%eax
c0008bb5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0008bb8:	89 d0                	mov    %edx,%eax
c0008bba:	01 c0                	add    %eax,%eax
c0008bbc:	01 d0                	add    %edx,%eax
c0008bbe:	c1 e0 02             	shl    $0x2,%eax
c0008bc1:	05 e8 2f 01 c0       	add    $0xc0012fe8,%eax
c0008bc6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/fs/fs.c:1001


	/* 将当前分区的根目录打开 + 初始化文件表 */
	open_root_dir(cur_part);
	uint32_t fd_idx = 0;
	while (fd_idx < MAX_FILE_OPEN) {
c0008bcc:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
c0008bd0:	76 dd                	jbe    c0008baf <filesys_init+0x1d1>
/work/x86_os_my/fs/fs.c:1004
		file_table[fd_idx++].fd_inode = NULL;
	}
}
c0008bd2:	90                   	nop
c0008bd3:	c9                   	leave  
c0008bd4:	c3                   	ret    

c0008bd5 <inode_locate>:
inode_locate():
/work/x86_os_my/fs/inode.c:23
};

/* 获取inode所在的扇区和扇区内的偏移量
 * out: inode_pos
 */
static void inode_locate(struct partition* part, uint32_t inode_no, struct inode_position* inode_pos) {
c0008bd5:	55                   	push   %ebp
c0008bd6:	89 e5                	mov    %esp,%ebp
c0008bd8:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/fs/inode.c:25
	/* inode_table在硬盘上是连续的 */
	ASSERT(inode_no < 4096);
c0008bdb:	81 7d 0c ff 0f 00 00 	cmpl   $0xfff,0xc(%ebp)
c0008be2:	76 19                	jbe    c0008bfd <inode_locate+0x28>
/work/x86_os_my/fs/inode.c:25 (discriminator 1)
c0008be4:	68 84 e3 00 c0       	push   $0xc000e384
c0008be9:	68 0c e4 00 c0       	push   $0xc000e40c
c0008bee:	6a 19                	push   $0x19
c0008bf0:	68 94 e3 00 c0       	push   $0xc000e394
c0008bf5:	e8 b7 97 ff ff       	call   c00023b1 <panic_spin>
c0008bfa:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:26
	uint32_t inode_table_lba = part->sb->inode_table_lba;
c0008bfd:	8b 45 08             	mov    0x8(%ebp),%eax
c0008c00:	8b 40 1c             	mov    0x1c(%eax),%eax
c0008c03:	8b 40 20             	mov    0x20(%eax),%eax
c0008c06:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/inode.c:28

	uint32_t inode_size = sizeof(struct inode);
c0008c09:	c7 45 f0 4c 00 00 00 	movl   $0x4c,-0x10(%ebp)
/work/x86_os_my/fs/inode.c:29
	uint32_t off_size = inode_no * inode_size;	// 第inode_no号inode相对于inode_table_lba的字节偏移量
c0008c10:	8b 45 0c             	mov    0xc(%ebp),%eax
c0008c13:	0f af 45 f0          	imul   -0x10(%ebp),%eax
c0008c17:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/inode.c:30
	uint32_t off_sec  = off_size / 512;			// 第inode_no号inode相对于inode_table_lba的扇区偏移量
c0008c1a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008c1d:	c1 e8 09             	shr    $0x9,%eax
c0008c20:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/inode.c:31
	uint32_t off_size_in_sec = off_size % 512;	// 待查找的inode所在扇区中的起始地址
c0008c23:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008c26:	25 ff 01 00 00       	and    $0x1ff,%eax
c0008c2b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/inode.c:34

	/* 判断此inode是否跨越2个扇区 */
	uint32_t left_in_sec = 512 - off_size_in_sec;
c0008c2e:	b8 00 02 00 00       	mov    $0x200,%eax
c0008c33:	2b 45 e4             	sub    -0x1c(%ebp),%eax
c0008c36:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/inode.c:36
	// 若扇区内剩下的空间不足以容纳一个inode,必然是inode跨越了2个扇区
	if (left_in_sec < inode_size ) {
c0008c39:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0008c3c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0008c3f:	73 0b                	jae    c0008c4c <inode_locate+0x77>
/work/x86_os_my/fs/inode.c:37
		inode_pos->two_sec = true;	//跨越了
c0008c41:	8b 45 10             	mov    0x10(%ebp),%eax
c0008c44:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0008c4a:	eb 09                	jmp    c0008c55 <inode_locate+0x80>
/work/x86_os_my/fs/inode.c:39
	} else {
		inode_pos->two_sec = false;
c0008c4c:	8b 45 10             	mov    0x10(%ebp),%eax
c0008c4f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/fs/inode.c:41
	}
	inode_pos->sec_lba = inode_table_lba + off_sec;
c0008c55:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0008c58:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0008c5b:	01 c2                	add    %eax,%edx
c0008c5d:	8b 45 10             	mov    0x10(%ebp),%eax
c0008c60:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/inode.c:42
	inode_pos->off_size = off_size_in_sec;
c0008c63:	8b 45 10             	mov    0x10(%ebp),%eax
c0008c66:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0008c69:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/fs/inode.c:43
}
c0008c6c:	90                   	nop
c0008c6d:	c9                   	leave  
c0008c6e:	c3                   	ret    

c0008c6f <inode_sync>:
inode_sync():
/work/x86_os_my/fs/inode.c:51
io_buf是用于硬盘io的缓冲区，它由主调函数提供！
原因是
一般情况下把内存中的数据同步到硬盘都是最后的操作，其前已经做了大量工作，
若到这最后一步时才申请内存失败，前面的所有操作都白费了，还要回滚到之前的旧状态，代价太大
*/
void inode_sync(struct partition* part, struct inode* inode, void* io_buf) {
c0008c6f:	55                   	push   %ebp
c0008c70:	89 e5                	mov    %esp,%ebp
c0008c72:	83 ec 68             	sub    $0x68,%esp
/work/x86_os_my/fs/inode.c:52
	uint8_t inode_no = inode->i_no;
c0008c75:	8b 45 0c             	mov    0xc(%ebp),%eax
c0008c78:	8b 00                	mov    (%eax),%eax
c0008c7a:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/inode.c:54
	struct inode_position inode_pos;
	inode_locate(part, inode_no, &inode_pos);	// inode位置信息会存入inode_pos
c0008c7d:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0008c81:	83 ec 04             	sub    $0x4,%esp
c0008c84:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0008c87:	52                   	push   %edx
c0008c88:	50                   	push   %eax
c0008c89:	ff 75 08             	pushl  0x8(%ebp)
c0008c8c:	e8 44 ff ff ff       	call   c0008bd5 <inode_locate>
c0008c91:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:55
	ASSERT(inode_pos.sec_lba <= (part->start_lba + part->sec_cnt));
c0008c94:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0008c97:	8b 45 08             	mov    0x8(%ebp),%eax
c0008c9a:	8b 08                	mov    (%eax),%ecx
c0008c9c:	8b 45 08             	mov    0x8(%ebp),%eax
c0008c9f:	8b 40 04             	mov    0x4(%eax),%eax
c0008ca2:	01 c8                	add    %ecx,%eax
c0008ca4:	39 c2                	cmp    %eax,%edx
c0008ca6:	76 19                	jbe    c0008cc1 <inode_sync+0x52>
/work/x86_os_my/fs/inode.c:55 (discriminator 1)
c0008ca8:	68 a0 e3 00 c0       	push   $0xc000e3a0
c0008cad:	68 1c e4 00 c0       	push   $0xc000e41c
c0008cb2:	6a 37                	push   $0x37
c0008cb4:	68 94 e3 00 c0       	push   $0xc000e394
c0008cb9:	e8 f3 96 ff ff       	call   c00023b1 <panic_spin>
c0008cbe:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:62
	/* 硬盘中的inode中的成员inode_tag和i_open_cnts是不需要的，
	* 它们只在内存中有效，记录链表位置和被多少进程共享，
	* 将inode同步到硬盘时,清掉这三项即可。
	*/
	struct inode pure_inode;
	memcpy(&pure_inode, inode, sizeof(struct inode));
c0008cc1:	83 ec 04             	sub    $0x4,%esp
c0008cc4:	6a 4c                	push   $0x4c
c0008cc6:	ff 75 0c             	pushl  0xc(%ebp)
c0008cc9:	8d 45 98             	lea    -0x68(%ebp),%eax
c0008ccc:	50                   	push   %eax
c0008ccd:	e8 d3 ab ff ff       	call   c00038a5 <memcpy>
c0008cd2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:63
	pure_inode.i_open_cnts = 0;
c0008cd5:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
/work/x86_os_my/fs/inode.c:64
	pure_inode.write_deny = false;	// 置为false,以保证在硬盘中读出时为可写
c0008cdc:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
/work/x86_os_my/fs/inode.c:65
	pure_inode.inode_tag.prev = pure_inode.inode_tag.next = NULL;
c0008ce3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c0008cea:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0008ced:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/inode.c:67

	char* inode_buf = (char*)io_buf;
c0008cf0:	8b 45 10             	mov    0x10(%ebp),%eax
c0008cf3:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/inode.c:69
	// 若inode结构，跨了两个扇区,就要读出两个扇区再写入两个扇区
	if (inode_pos.two_sec) {
c0008cf6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0008cf9:	85 c0                	test   %eax,%eax
c0008cfb:	74 4c                	je     c0008d49 <inode_sync+0xda>
/work/x86_os_my/fs/inode.c:72
		/* 读写硬盘是以扇区为单位的
		所以需要将待写入的inode结构拼入到这2个扇区的中间位置 */
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 2);	// inode_table在格式化时，写入硬盘是连续写入的，所以读入2块扇区
c0008cfd:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0008d00:	8b 45 08             	mov    0x8(%ebp),%eax
c0008d03:	8b 40 08             	mov    0x8(%eax),%eax
c0008d06:	6a 02                	push   $0x2
c0008d08:	ff 75 f0             	pushl  -0x10(%ebp)
c0008d0b:	52                   	push   %edx
c0008d0c:	50                   	push   %eax
c0008d0d:	e8 83 d3 ff ff       	call   c0006095 <ide_read>
c0008d12:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:73
		memcpy((inode_buf + inode_pos.off_size), &pure_inode, sizeof(struct inode));	// inode_buf+inode在扇区中的偏移
c0008d15:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0008d18:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008d1b:	01 c2                	add    %eax,%edx
c0008d1d:	83 ec 04             	sub    $0x4,%esp
c0008d20:	6a 4c                	push   $0x4c
c0008d22:	8d 45 98             	lea    -0x68(%ebp),%eax
c0008d25:	50                   	push   %eax
c0008d26:	52                   	push   %edx
c0008d27:	e8 79 ab ff ff       	call   c00038a5 <memcpy>
c0008d2c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:74
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 2);
c0008d2f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0008d32:	8b 45 08             	mov    0x8(%ebp),%eax
c0008d35:	8b 40 08             	mov    0x8(%eax),%eax
c0008d38:	6a 02                	push   $0x2
c0008d3a:	ff 75 f0             	pushl  -0x10(%ebp)
c0008d3d:	52                   	push   %edx
c0008d3e:	50                   	push   %eax
c0008d3f:	e8 c5 d4 ff ff       	call   c0006209 <ide_write>
c0008d44:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:81
		// 若inode结构，只在一个扇区中
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
		memcpy((inode_buf + inode_pos.off_size), &pure_inode, sizeof(struct inode));	// inode_buf+inode在扇区中的偏移
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
	}
}
c0008d47:	eb 4a                	jmp    c0008d93 <inode_sync+0x124>
/work/x86_os_my/fs/inode.c:77
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 2);	// inode_table在格式化时，写入硬盘是连续写入的，所以读入2块扇区
		memcpy((inode_buf + inode_pos.off_size), &pure_inode, sizeof(struct inode));	// inode_buf+inode在扇区中的偏移
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 2);
	} else {
		// 若inode结构，只在一个扇区中
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
c0008d49:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0008d4c:	8b 45 08             	mov    0x8(%ebp),%eax
c0008d4f:	8b 40 08             	mov    0x8(%eax),%eax
c0008d52:	6a 01                	push   $0x1
c0008d54:	ff 75 f0             	pushl  -0x10(%ebp)
c0008d57:	52                   	push   %edx
c0008d58:	50                   	push   %eax
c0008d59:	e8 37 d3 ff ff       	call   c0006095 <ide_read>
c0008d5e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:78
		memcpy((inode_buf + inode_pos.off_size), &pure_inode, sizeof(struct inode));	// inode_buf+inode在扇区中的偏移
c0008d61:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0008d64:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008d67:	01 c2                	add    %eax,%edx
c0008d69:	83 ec 04             	sub    $0x4,%esp
c0008d6c:	6a 4c                	push   $0x4c
c0008d6e:	8d 45 98             	lea    -0x68(%ebp),%eax
c0008d71:	50                   	push   %eax
c0008d72:	52                   	push   %edx
c0008d73:	e8 2d ab ff ff       	call   c00038a5 <memcpy>
c0008d78:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:79
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
c0008d7b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0008d7e:	8b 45 08             	mov    0x8(%ebp),%eax
c0008d81:	8b 40 08             	mov    0x8(%eax),%eax
c0008d84:	6a 01                	push   $0x1
c0008d86:	ff 75 f0             	pushl  -0x10(%ebp)
c0008d89:	52                   	push   %edx
c0008d8a:	50                   	push   %eax
c0008d8b:	e8 79 d4 ff ff       	call   c0006209 <ide_write>
c0008d90:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:81
	}
}
c0008d93:	90                   	nop
c0008d94:	c9                   	leave  
c0008d95:	c3                   	ret    

c0008d96 <inode_open>:
inode_open():
/work/x86_os_my/fs/inode.c:84

/* 根据i结点号，获取到相应的inode结构，插入到inode缓存队列，并返回它 */
struct inode* inode_open(struct partition* part, uint32_t inode_no) {
c0008d96:	55                   	push   %ebp
c0008d97:	89 e5                	mov    %esp,%ebp
c0008d99:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/fs/inode.c:86
	/* 1.先在已打开inode链表中找inode，此链表作用是提速 */
	struct list_elem* elem = part->open_inodes.head.next;
c0008d9c:	8b 45 08             	mov    0x8(%ebp),%eax
c0008d9f:	8b 40 34             	mov    0x34(%eax),%eax
c0008da2:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/inode.c:88
	struct inode* inode_found;
	while (elem != &part->open_inodes.tail) {
c0008da5:	eb 33                	jmp    c0008dda <inode_open+0x44>
/work/x86_os_my/fs/inode.c:89
		inode_found = elem2entry(struct inode, inode_tag, elem);
c0008da7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0008daa:	83 e8 44             	sub    $0x44,%eax
c0008dad:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/inode.c:90
		if (inode_found->i_no == inode_no) {
c0008db0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008db3:	8b 00                	mov    (%eax),%eax
c0008db5:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0008db8:	75 17                	jne    c0008dd1 <inode_open+0x3b>
/work/x86_os_my/fs/inode.c:91
			inode_found->i_open_cnts++;
c0008dba:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008dbd:	8b 40 08             	mov    0x8(%eax),%eax
c0008dc0:	8d 50 01             	lea    0x1(%eax),%edx
c0008dc3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008dc6:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/fs/inode.c:92
			return inode_found;
c0008dc9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008dcc:	e9 09 01 00 00       	jmp    c0008eda <inode_open+0x144>
/work/x86_os_my/fs/inode.c:94
		}
		elem = elem->next;
c0008dd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0008dd4:	8b 40 04             	mov    0x4(%eax),%eax
c0008dd7:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/inode.c:88
/* 根据i结点号，获取到相应的inode结构，插入到inode缓存队列，并返回它 */
struct inode* inode_open(struct partition* part, uint32_t inode_no) {
	/* 1.先在已打开inode链表中找inode，此链表作用是提速 */
	struct list_elem* elem = part->open_inodes.head.next;
	struct inode* inode_found;
	while (elem != &part->open_inodes.tail) {
c0008dda:	8b 45 08             	mov    0x8(%ebp),%eax
c0008ddd:	83 c0 38             	add    $0x38,%eax
c0008de0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0008de3:	75 c2                	jne    c0008da7 <inode_open+0x11>
/work/x86_os_my/fs/inode.c:100
	}

	
	/* 2.open_inodes链表中找不到，从硬盘上读入此inode并加入到inode缓存链表 */
	struct inode_position inode_pos;	// 记录inode位置的结构
	inode_locate(part, inode_no, &inode_pos);
c0008de5:	83 ec 04             	sub    $0x4,%esp
c0008de8:	8d 45 d8             	lea    -0x28(%ebp),%eax
c0008deb:	50                   	push   %eax
c0008dec:	ff 75 0c             	pushl  0xc(%ebp)
c0008def:	ff 75 08             	pushl  0x8(%ebp)
c0008df2:	e8 de fd ff ff       	call   c0008bd5 <inode_locate>
c0008df7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:104

	/* 为使通过sys_malloc创建的新inode被所有任务共享，需要将inode置于内核空间
	故临时将cur_pbc->pgdir置为NULL，sys_malloc就会以为是从内核空间分配 */
	struct task_struct* cur = running_thread();
c0008dfa:	e8 3b ae ff ff       	call   c0003c3a <running_thread>
c0008dff:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/inode.c:105
	uint32_t* cur_pagedir_bak = cur->pgdir;
c0008e02:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0008e05:	8b 40 54             	mov    0x54(%eax),%eax
c0008e08:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/inode.c:106
	cur->pgdir = NULL;
c0008e0b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0008e0e:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
/work/x86_os_my/fs/inode.c:107
	inode_found = (struct inode*)sys_malloc(sizeof(struct inode));
c0008e15:	83 ec 0c             	sub    $0xc,%esp
c0008e18:	6a 4c                	push   $0x4c
c0008e1a:	e8 3d 9f ff ff       	call   c0002d5c <sys_malloc>
c0008e1f:	83 c4 10             	add    $0x10,%esp
c0008e22:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/inode.c:108
	cur->pgdir = cur_pagedir_bak;	// 恢复pgdir
c0008e25:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0008e28:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0008e2b:	89 50 54             	mov    %edx,0x54(%eax)
/work/x86_os_my/fs/inode.c:111

	char* inode_buf;
	if (inode_pos.two_sec) {	// inode结构跨扇区了
c0008e2e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0008e31:	85 c0                	test   %eax,%eax
c0008e33:	74 2d                	je     c0008e62 <inode_open+0xcc>
/work/x86_os_my/fs/inode.c:112
		inode_buf = (char*)sys_malloc(1024);
c0008e35:	83 ec 0c             	sub    $0xc,%esp
c0008e38:	68 00 04 00 00       	push   $0x400
c0008e3d:	e8 1a 9f ff ff       	call   c0002d5c <sys_malloc>
c0008e42:	83 c4 10             	add    $0x10,%esp
c0008e45:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/inode.c:114
		// inode_table在格式化时，写入硬盘是连续写入的，所以可以连续读入2块扇区
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 2);
c0008e48:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0008e4b:	8b 45 08             	mov    0x8(%ebp),%eax
c0008e4e:	8b 40 08             	mov    0x8(%eax),%eax
c0008e51:	6a 02                	push   $0x2
c0008e53:	ff 75 f0             	pushl  -0x10(%ebp)
c0008e56:	52                   	push   %edx
c0008e57:	50                   	push   %eax
c0008e58:	e8 38 d2 ff ff       	call   c0006095 <ide_read>
c0008e5d:	83 c4 10             	add    $0x10,%esp
c0008e60:	eb 2b                	jmp    c0008e8d <inode_open+0xf7>
/work/x86_os_my/fs/inode.c:116
	} else {
		inode_buf = (char*)sys_malloc(512);
c0008e62:	83 ec 0c             	sub    $0xc,%esp
c0008e65:	68 00 02 00 00       	push   $0x200
c0008e6a:	e8 ed 9e ff ff       	call   c0002d5c <sys_malloc>
c0008e6f:	83 c4 10             	add    $0x10,%esp
c0008e72:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/inode.c:117
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
c0008e75:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0008e78:	8b 45 08             	mov    0x8(%ebp),%eax
c0008e7b:	8b 40 08             	mov    0x8(%eax),%eax
c0008e7e:	6a 01                	push   $0x1
c0008e80:	ff 75 f0             	pushl  -0x10(%ebp)
c0008e83:	52                   	push   %edx
c0008e84:	50                   	push   %eax
c0008e85:	e8 0b d2 ff ff       	call   c0006095 <ide_read>
c0008e8a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:119
	}
	memcpy(inode_found, inode_buf + inode_pos.off_size, sizeof(struct inode));	// inode_buf+inode在扇区中的偏移
c0008e8d:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0008e90:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008e93:	01 d0                	add    %edx,%eax
c0008e95:	83 ec 04             	sub    $0x4,%esp
c0008e98:	6a 4c                	push   $0x4c
c0008e9a:	50                   	push   %eax
c0008e9b:	ff 75 ec             	pushl  -0x14(%ebp)
c0008e9e:	e8 02 aa ff ff       	call   c00038a5 <memcpy>
c0008ea3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:123

	
	/* 3.马上要用这个inode，固插入到队首 */
	list_push(&part->open_inodes, &inode_found->inode_tag);
c0008ea6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008ea9:	8d 50 44             	lea    0x44(%eax),%edx
c0008eac:	8b 45 08             	mov    0x8(%ebp),%eax
c0008eaf:	83 c0 30             	add    $0x30,%eax
c0008eb2:	83 ec 08             	sub    $0x8,%esp
c0008eb5:	52                   	push   %edx
c0008eb6:	50                   	push   %eax
c0008eb7:	e8 f8 b7 ff ff       	call   c00046b4 <list_push>
c0008ebc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:124
	inode_found->i_open_cnts = 1;
c0008ebf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0008ec2:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/fs/inode.c:126

	sys_free(inode_buf);
c0008ec9:	83 ec 0c             	sub    $0xc,%esp
c0008ecc:	ff 75 f0             	pushl  -0x10(%ebp)
c0008ecf:	e8 b5 a4 ff ff       	call   c0003389 <sys_free>
c0008ed4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:127
	return inode_found;
c0008ed7:	8b 45 ec             	mov    -0x14(%ebp),%eax
/work/x86_os_my/fs/inode.c:128 (discriminator 1)
}
c0008eda:	c9                   	leave  
c0008edb:	c3                   	ret    

c0008edc <inode_close>:
inode_close():
/work/x86_os_my/fs/inode.c:132

/* 关闭inode或减少inode的打开数 */
//1.从inode队列踢掉 2.释放内核内存池中的这个inode内存
void inode_close(struct inode* inode) {
c0008edc:	55                   	push   %ebp
c0008edd:	89 e5                	mov    %esp,%ebp
c0008edf:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/inode.c:134
	/* 若没有进程再打开此文件,将此inode去掉并释放空间 */
	enum intr_status old_status = intr_disable();
c0008ee2:	e8 e2 8a ff ff       	call   c00019c9 <intr_disable>
c0008ee7:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/inode.c:135
	if (--inode->i_open_cnts == 0) {
c0008eea:	8b 45 08             	mov    0x8(%ebp),%eax
c0008eed:	8b 40 08             	mov    0x8(%eax),%eax
c0008ef0:	8d 50 ff             	lea    -0x1(%eax),%edx
c0008ef3:	8b 45 08             	mov    0x8(%ebp),%eax
c0008ef6:	89 50 08             	mov    %edx,0x8(%eax)
c0008ef9:	8b 45 08             	mov    0x8(%ebp),%eax
c0008efc:	8b 40 08             	mov    0x8(%eax),%eax
c0008eff:	85 c0                	test   %eax,%eax
c0008f01:	75 44                	jne    c0008f47 <inode_close+0x6b>
/work/x86_os_my/fs/inode.c:136
		list_remove(&inode->inode_tag);
c0008f03:	8b 45 08             	mov    0x8(%ebp),%eax
c0008f06:	83 c0 44             	add    $0x44,%eax
c0008f09:	83 ec 0c             	sub    $0xc,%esp
c0008f0c:	50                   	push   %eax
c0008f0d:	e8 de b7 ff ff       	call   c00046f0 <list_remove>
c0008f12:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:139
		/* inode结构在内核空间，释放时要释放到内核内存池。
		pgdir为NULL时，sys_free认为是内核空间 */
		struct task_struct* cur = running_thread();
c0008f15:	e8 20 ad ff ff       	call   c0003c3a <running_thread>
c0008f1a:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/inode.c:140
		uint32_t* cur_pagedir_bak = cur->pgdir;	// 进程自己页目录表的虚拟地址，加载到cr3时需转成物理地址
c0008f1d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008f20:	8b 40 54             	mov    0x54(%eax),%eax
c0008f23:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/inode.c:141
		cur->pgdir = NULL;
c0008f26:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008f29:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
/work/x86_os_my/fs/inode.c:142
		sys_free(inode);
c0008f30:	83 ec 0c             	sub    $0xc,%esp
c0008f33:	ff 75 08             	pushl  0x8(%ebp)
c0008f36:	e8 4e a4 ff ff       	call   c0003389 <sys_free>
c0008f3b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:143
		cur->pgdir = cur_pagedir_bak;
c0008f3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0008f41:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0008f44:	89 50 54             	mov    %edx,0x54(%eax)
/work/x86_os_my/fs/inode.c:145
	}
	intr_set_status(old_status);
c0008f47:	83 ec 0c             	sub    $0xc,%esp
c0008f4a:	ff 75 f4             	pushl  -0xc(%ebp)
c0008f4d:	e8 a0 8a ff ff       	call   c00019f2 <intr_set_status>
c0008f52:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:146
}
c0008f55:	90                   	nop
c0008f56:	c9                   	leave  
c0008f57:	c3                   	ret    

c0008f58 <inode_delete>:
inode_delete():
/work/x86_os_my/fs/inode.c:149

/* 将硬盘分区part上，inode管理的数据块清空 */
void inode_delete(struct partition* part, uint32_t inode_no, void* io_buf) {
c0008f58:	55                   	push   %ebp
c0008f59:	89 e5                	mov    %esp,%ebp
c0008f5b:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/inode.c:150
	ASSERT(inode_no < 4096);
c0008f5e:	81 7d 0c ff 0f 00 00 	cmpl   $0xfff,0xc(%ebp)
c0008f65:	76 1c                	jbe    c0008f83 <inode_delete+0x2b>
/work/x86_os_my/fs/inode.c:150 (discriminator 1)
c0008f67:	68 84 e3 00 c0       	push   $0xc000e384
c0008f6c:	68 28 e4 00 c0       	push   $0xc000e428
c0008f71:	68 96 00 00 00       	push   $0x96
c0008f76:	68 94 e3 00 c0       	push   $0xc000e394
c0008f7b:	e8 31 94 ff ff       	call   c00023b1 <panic_spin>
c0008f80:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:152
	struct inode_position inode_pos;
	inode_locate(part, inode_no, &inode_pos);	// 获取inode所在的扇区和扇区内的偏移量【这里是 inode_table 的空间】
c0008f83:	83 ec 04             	sub    $0x4,%esp
c0008f86:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0008f89:	50                   	push   %eax
c0008f8a:	ff 75 0c             	pushl  0xc(%ebp)
c0008f8d:	ff 75 08             	pushl  0x8(%ebp)
c0008f90:	e8 40 fc ff ff       	call   c0008bd5 <inode_locate>
c0008f95:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:153
	ASSERT(inode_pos.sec_lba <= (part->start_lba + part->sec_cnt));
c0008f98:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0008f9b:	8b 45 08             	mov    0x8(%ebp),%eax
c0008f9e:	8b 08                	mov    (%eax),%ecx
c0008fa0:	8b 45 08             	mov    0x8(%ebp),%eax
c0008fa3:	8b 40 04             	mov    0x4(%eax),%eax
c0008fa6:	01 c8                	add    %ecx,%eax
c0008fa8:	39 c2                	cmp    %eax,%edx
c0008faa:	76 1c                	jbe    c0008fc8 <inode_delete+0x70>
/work/x86_os_my/fs/inode.c:153 (discriminator 1)
c0008fac:	68 a0 e3 00 c0       	push   $0xc000e3a0
c0008fb1:	68 28 e4 00 c0       	push   $0xc000e428
c0008fb6:	68 99 00 00 00       	push   $0x99
c0008fbb:	68 94 e3 00 c0       	push   $0xc000e394
c0008fc0:	e8 ec 93 ff ff       	call   c00023b1 <panic_spin>
c0008fc5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:155

	char* inode_buf = (char*)io_buf;
c0008fc8:	8b 45 10             	mov    0x10(%ebp),%eax
c0008fcb:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/inode.c:156
	if (inode_pos.two_sec) {	// inode跨扇区,读入2个扇区
c0008fce:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0008fd1:	85 c0                	test   %eax,%eax
c0008fd3:	74 4a                	je     c000901f <inode_delete+0xc7>
/work/x86_os_my/fs/inode.c:158
		/* 将原硬盘上的内容先读出来 */
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 2);
c0008fd5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0008fd8:	8b 45 08             	mov    0x8(%ebp),%eax
c0008fdb:	8b 40 08             	mov    0x8(%eax),%eax
c0008fde:	6a 02                	push   $0x2
c0008fe0:	ff 75 f4             	pushl  -0xc(%ebp)
c0008fe3:	52                   	push   %edx
c0008fe4:	50                   	push   %eax
c0008fe5:	e8 ab d0 ff ff       	call   c0006095 <ide_read>
c0008fea:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:160
		/* 将inode_buf清0 */
		memset((inode_buf + inode_pos.off_size), 0, sizeof(struct inode));	//清零 inode_table 中的一个 inode 结构
c0008fed:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0008ff0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0008ff3:	01 d0                	add    %edx,%eax
c0008ff5:	83 ec 04             	sub    $0x4,%esp
c0008ff8:	6a 4c                	push   $0x4c
c0008ffa:	6a 00                	push   $0x0
c0008ffc:	50                   	push   %eax
c0008ffd:	e8 51 a8 ff ff       	call   c0003853 <memset>
c0009002:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:162
		/* 用清0的内存数据覆盖磁盘 */
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 2);
c0009005:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0009008:	8b 45 08             	mov    0x8(%ebp),%eax
c000900b:	8b 40 08             	mov    0x8(%eax),%eax
c000900e:	6a 02                	push   $0x2
c0009010:	ff 75 f4             	pushl  -0xc(%ebp)
c0009013:	52                   	push   %edx
c0009014:	50                   	push   %eax
c0009015:	e8 ef d1 ff ff       	call   c0006209 <ide_write>
c000901a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:171
		/* 将inode_buf清0 */
		memset((inode_buf + inode_pos.off_size), 0, sizeof(struct inode));
		/* 用清0的内存数据覆盖磁盘 */
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
	}
}
c000901d:	eb 48                	jmp    c0009067 <inode_delete+0x10f>
/work/x86_os_my/fs/inode.c:165
		memset((inode_buf + inode_pos.off_size), 0, sizeof(struct inode));	//清零 inode_table 中的一个 inode 结构
		/* 用清0的内存数据覆盖磁盘 */
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 2);
	} else {	// 未跨扇区,只读入1个扇区就好
		/* 将原硬盘上的内容先读出来 */
		ide_read(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
c000901f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0009022:	8b 45 08             	mov    0x8(%ebp),%eax
c0009025:	8b 40 08             	mov    0x8(%eax),%eax
c0009028:	6a 01                	push   $0x1
c000902a:	ff 75 f4             	pushl  -0xc(%ebp)
c000902d:	52                   	push   %edx
c000902e:	50                   	push   %eax
c000902f:	e8 61 d0 ff ff       	call   c0006095 <ide_read>
c0009034:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:167
		/* 将inode_buf清0 */
		memset((inode_buf + inode_pos.off_size), 0, sizeof(struct inode));
c0009037:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000903a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000903d:	01 d0                	add    %edx,%eax
c000903f:	83 ec 04             	sub    $0x4,%esp
c0009042:	6a 4c                	push   $0x4c
c0009044:	6a 00                	push   $0x0
c0009046:	50                   	push   %eax
c0009047:	e8 07 a8 ff ff       	call   c0003853 <memset>
c000904c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:169
		/* 用清0的内存数据覆盖磁盘 */
		ide_write(part->my_disk, inode_pos.sec_lba, inode_buf, 1);
c000904f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0009052:	8b 45 08             	mov    0x8(%ebp),%eax
c0009055:	8b 40 08             	mov    0x8(%eax),%eax
c0009058:	6a 01                	push   $0x1
c000905a:	ff 75 f4             	pushl  -0xc(%ebp)
c000905d:	52                   	push   %edx
c000905e:	50                   	push   %eax
c000905f:	e8 a5 d1 ff ff       	call   c0006209 <ide_write>
c0009064:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:171
	}
}
c0009067:	90                   	nop
c0009068:	c9                   	leave  
c0009069:	c3                   	ret    

c000906a <inode_release>:
inode_release():
/work/x86_os_my/fs/inode.c:179
（1）inode 位图
（2）inode_table
（3）inode 中 i_sectors[0～11]中的直接块和一级间接索引块表 i_sectors[12]中的间接块
（4）一级间接索引块表本身的扇区地址
 */
void inode_release(struct partition* part, uint32_t inode_no) {
c000906a:	55                   	push   %ebp
c000906b:	89 e5                	mov    %esp,%ebp
c000906d:	57                   	push   %edi
c000906e:	81 ec 44 02 00 00    	sub    $0x244,%esp
/work/x86_os_my/fs/inode.c:180
	struct inode* inode_to_del = inode_open(part, inode_no);
c0009074:	83 ec 08             	sub    $0x8,%esp
c0009077:	ff 75 0c             	pushl  0xc(%ebp)
c000907a:	ff 75 08             	pushl  0x8(%ebp)
c000907d:	e8 14 fd ff ff       	call   c0008d96 <inode_open>
c0009082:	83 c4 10             	add    $0x10,%esp
c0009085:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/inode.c:181
	ASSERT(inode_to_del->i_no == inode_no);
c0009088:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000908b:	8b 00                	mov    (%eax),%eax
c000908d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0009090:	74 1c                	je     c00090ae <inode_release+0x44>
/work/x86_os_my/fs/inode.c:181 (discriminator 1)
c0009092:	68 d8 e3 00 c0       	push   $0xc000e3d8
c0009097:	68 38 e4 00 c0       	push   $0xc000e438
c000909c:	68 b5 00 00 00       	push   $0xb5
c00090a1:	68 94 e3 00 c0       	push   $0xc000e394
c00090a6:	e8 06 93 ff ff       	call   c00023b1 <panic_spin>
c00090ab:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:184

	/* 1 回收inode占用的所有块 */
	uint8_t block_idx = 0, block_cnt = 12;
c00090ae:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
c00090b2:	c6 45 f6 0c          	movb   $0xc,-0xa(%ebp)
/work/x86_os_my/fs/inode.c:186
	uint32_t block_bitmap_idx;
	uint32_t all_blocks[140] = {0};	  //12个直接块+128个间接块
c00090b6:	8d 95 b8 fd ff ff    	lea    -0x248(%ebp),%edx
c00090bc:	b8 00 00 00 00       	mov    $0x0,%eax
c00090c1:	b9 8c 00 00 00       	mov    $0x8c,%ecx
c00090c6:	89 d7                	mov    %edx,%edi
c00090c8:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/fs/inode.c:189

	/* a 先将前12个直接块存入all_blocks */
	while (block_idx < 12) {
c00090ca:	eb 22                	jmp    c00090ee <inode_release+0x84>
/work/x86_os_my/fs/inode.c:190
		all_blocks[block_idx] = inode_to_del->i_sectors[block_idx];
c00090cc:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00090d0:	0f b6 4d f7          	movzbl -0x9(%ebp),%ecx
c00090d4:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00090d7:	83 c1 04             	add    $0x4,%ecx
c00090da:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
c00090dd:	89 94 85 b8 fd ff ff 	mov    %edx,-0x248(%ebp,%eax,4)
/work/x86_os_my/fs/inode.c:191
		block_idx++;
c00090e4:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00090e8:	83 c0 01             	add    $0x1,%eax
c00090eb:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/inode.c:189
	uint8_t block_idx = 0, block_cnt = 12;
	uint32_t block_bitmap_idx;
	uint32_t all_blocks[140] = {0};	  //12个直接块+128个间接块

	/* a 先将前12个直接块存入all_blocks */
	while (block_idx < 12) {
c00090ee:	80 7d f7 0b          	cmpb   $0xb,-0x9(%ebp)
c00090f2:	76 d8                	jbe    c00090cc <inode_release+0x62>
/work/x86_os_my/fs/inode.c:194
		all_blocks[block_idx] = inode_to_del->i_sectors[block_idx];
		block_idx++;
	}
	/* b 如果一级间接块表存在，将其128个间接块读到all_blocks[12~]，并释放一级间接块表所占的扇区 */
	if (inode_to_del->i_sectors[12] != 0) {
c00090f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c00090f7:	8b 40 40             	mov    0x40(%eax),%eax
c00090fa:	85 c0                	test   %eax,%eax
c00090fc:	0f 84 8b 00 00 00    	je     c000918d <inode_release+0x123>
/work/x86_os_my/fs/inode.c:195
		ide_read(part->my_disk, inode_to_del->i_sectors[12], all_blocks + 12, 1);
c0009102:	8d 85 b8 fd ff ff    	lea    -0x248(%ebp),%eax
c0009108:	83 c0 30             	add    $0x30,%eax
c000910b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000910e:	8b 4a 40             	mov    0x40(%edx),%ecx
c0009111:	8b 55 08             	mov    0x8(%ebp),%edx
c0009114:	8b 52 08             	mov    0x8(%edx),%edx
c0009117:	6a 01                	push   $0x1
c0009119:	50                   	push   %eax
c000911a:	51                   	push   %ecx
c000911b:	52                   	push   %edx
c000911c:	e8 74 cf ff ff       	call   c0006095 <ide_read>
c0009121:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:196
		block_cnt = 140;
c0009124:	c6 45 f6 8c          	movb   $0x8c,-0xa(%ebp)
/work/x86_os_my/fs/inode.c:199

		/* 回收一级间接块表占用的扇区 */
		block_bitmap_idx = inode_to_del->i_sectors[12] - part->sb->data_start_lba;
c0009128:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000912b:	8b 50 40             	mov    0x40(%eax),%edx
c000912e:	8b 45 08             	mov    0x8(%ebp),%eax
c0009131:	8b 40 1c             	mov    0x1c(%eax),%eax
c0009134:	8b 40 28             	mov    0x28(%eax),%eax
c0009137:	29 c2                	sub    %eax,%edx
c0009139:	89 d0                	mov    %edx,%eax
c000913b:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/inode.c:200
		ASSERT(block_bitmap_idx > 0);
c000913e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0009142:	75 1c                	jne    c0009160 <inode_release+0xf6>
/work/x86_os_my/fs/inode.c:200 (discriminator 1)
c0009144:	68 f7 e3 00 c0       	push   $0xc000e3f7
c0009149:	68 38 e4 00 c0       	push   $0xc000e438
c000914e:	68 c8 00 00 00       	push   $0xc8
c0009153:	68 94 e3 00 c0       	push   $0xc000e394
c0009158:	e8 54 92 ff ff       	call   c00023b1 <panic_spin>
c000915d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:201
		bitmap_set(&part->block_bitmap, block_bitmap_idx, 0);
c0009160:	8b 45 08             	mov    0x8(%ebp),%eax
c0009163:	83 c0 20             	add    $0x20,%eax
c0009166:	83 ec 04             	sub    $0x4,%esp
c0009169:	6a 00                	push   $0x0
c000916b:	ff 75 ec             	pushl  -0x14(%ebp)
c000916e:	50                   	push   %eax
c000916f:	e8 ab 94 ff ff       	call   c000261f <bitmap_set>
c0009174:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:202
		bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c0009177:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c000917c:	83 ec 04             	sub    $0x4,%esp
c000917f:	6a 01                	push   $0x1
c0009181:	ff 75 ec             	pushl  -0x14(%ebp)
c0009184:	50                   	push   %eax
c0009185:	e8 ca 02 00 00       	call   c0009454 <bitmap_sync>
c000918a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:205
	}
	/* c inode所有的块地址已经收集到all_blocks中，下面逐个回收 */
	block_idx = 0;
c000918d:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/fs/inode.c:206
	while (block_idx < block_cnt) {
c0009191:	e9 8a 00 00 00       	jmp    c0009220 <inode_release+0x1b6>
/work/x86_os_my/fs/inode.c:207
		if (all_blocks[block_idx] != 0) {
c0009196:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000919a:	8b 84 85 b8 fd ff ff 	mov    -0x248(%ebp,%eax,4),%eax
c00091a1:	85 c0                	test   %eax,%eax
c00091a3:	74 71                	je     c0009216 <inode_release+0x1ac>
/work/x86_os_my/fs/inode.c:208
			block_bitmap_idx = 0;
c00091a5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/inode.c:209
			block_bitmap_idx = all_blocks[block_idx] - part->sb->data_start_lba;
c00091ac:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c00091b0:	8b 94 85 b8 fd ff ff 	mov    -0x248(%ebp,%eax,4),%edx
c00091b7:	8b 45 08             	mov    0x8(%ebp),%eax
c00091ba:	8b 40 1c             	mov    0x1c(%eax),%eax
c00091bd:	8b 40 28             	mov    0x28(%eax),%eax
c00091c0:	29 c2                	sub    %eax,%edx
c00091c2:	89 d0                	mov    %edx,%eax
c00091c4:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/inode.c:210
			ASSERT(block_bitmap_idx > 0);
c00091c7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c00091cb:	75 1c                	jne    c00091e9 <inode_release+0x17f>
/work/x86_os_my/fs/inode.c:210 (discriminator 1)
c00091cd:	68 f7 e3 00 c0       	push   $0xc000e3f7
c00091d2:	68 38 e4 00 c0       	push   $0xc000e438
c00091d7:	68 d2 00 00 00       	push   $0xd2
c00091dc:	68 94 e3 00 c0       	push   $0xc000e394
c00091e1:	e8 cb 91 ff ff       	call   c00023b1 <panic_spin>
c00091e6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:211
			bitmap_set(&part->block_bitmap, block_bitmap_idx, 0);
c00091e9:	8b 45 08             	mov    0x8(%ebp),%eax
c00091ec:	83 c0 20             	add    $0x20,%eax
c00091ef:	83 ec 04             	sub    $0x4,%esp
c00091f2:	6a 00                	push   $0x0
c00091f4:	ff 75 ec             	pushl  -0x14(%ebp)
c00091f7:	50                   	push   %eax
c00091f8:	e8 22 94 ff ff       	call   c000261f <bitmap_set>
c00091fd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:212
			bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c0009200:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0009205:	83 ec 04             	sub    $0x4,%esp
c0009208:	6a 01                	push   $0x1
c000920a:	ff 75 ec             	pushl  -0x14(%ebp)
c000920d:	50                   	push   %eax
c000920e:	e8 41 02 00 00       	call   c0009454 <bitmap_sync>
c0009213:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:214
		}
		block_idx++;
c0009216:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000921a:	83 c0 01             	add    $0x1,%eax
c000921d:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/inode.c:206
		bitmap_set(&part->block_bitmap, block_bitmap_idx, 0);
		bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
	}
	/* c inode所有的块地址已经收集到all_blocks中，下面逐个回收 */
	block_idx = 0;
	while (block_idx < block_cnt) {
c0009220:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0009224:	3a 45 f6             	cmp    -0xa(%ebp),%al
c0009227:	0f 82 69 ff ff ff    	jb     c0009196 <inode_release+0x12c>
/work/x86_os_my/fs/inode.c:218
		}
		block_idx++;
	}

	/*2 回收该inode所占用的inode */
	bitmap_set(&part->inode_bitmap, inode_no, 0);
c000922d:	8b 45 08             	mov    0x8(%ebp),%eax
c0009230:	83 c0 28             	add    $0x28,%eax
c0009233:	83 ec 04             	sub    $0x4,%esp
c0009236:	6a 00                	push   $0x0
c0009238:	ff 75 0c             	pushl  0xc(%ebp)
c000923b:	50                   	push   %eax
c000923c:	e8 de 93 ff ff       	call   c000261f <bitmap_set>
c0009241:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:219
	bitmap_sync(cur_part, inode_no, INODE_BITMAP);
c0009244:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0009249:	83 ec 04             	sub    $0x4,%esp
c000924c:	6a 00                	push   $0x0
c000924e:	ff 75 0c             	pushl  0xc(%ebp)
c0009251:	50                   	push   %eax
c0009252:	e8 fd 01 00 00       	call   c0009454 <bitmap_sync>
c0009257:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:225

	/******     以下inode_delete是调试用的    ******
	 * 此函数会在 inode_table 中将此inode清0，
	 * 但实际上只需要在inode位图中清零相应位即可。
	 * 硬盘上的数据更不需要清0，可以直接覆盖 */
	void* io_buf = sys_malloc(1024);
c000925a:	83 ec 0c             	sub    $0xc,%esp
c000925d:	68 00 04 00 00       	push   $0x400
c0009262:	e8 f5 9a ff ff       	call   c0002d5c <sys_malloc>
c0009267:	83 c4 10             	add    $0x10,%esp
c000926a:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/inode.c:226
	inode_delete(part, inode_no, io_buf);
c000926d:	83 ec 04             	sub    $0x4,%esp
c0009270:	ff 75 e8             	pushl  -0x18(%ebp)
c0009273:	ff 75 0c             	pushl  0xc(%ebp)
c0009276:	ff 75 08             	pushl  0x8(%ebp)
c0009279:	e8 da fc ff ff       	call   c0008f58 <inode_delete>
c000927e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:227
	sys_free(io_buf);
c0009281:	83 ec 0c             	sub    $0xc,%esp
c0009284:	ff 75 e8             	pushl  -0x18(%ebp)
c0009287:	e8 fd a0 ff ff       	call   c0003389 <sys_free>
c000928c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:230
	/***********************************************/

	inode_close(inode_to_del);
c000928f:	83 ec 0c             	sub    $0xc,%esp
c0009292:	ff 75 f0             	pushl  -0x10(%ebp)
c0009295:	e8 42 fc ff ff       	call   c0008edc <inode_close>
c000929a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/inode.c:231
}
c000929d:	90                   	nop
c000929e:	8b 7d fc             	mov    -0x4(%ebp),%edi
c00092a1:	c9                   	leave  
c00092a2:	c3                   	ret    

c00092a3 <inode_init>:
inode_init():
/work/x86_os_my/fs/inode.c:234

/* 初始化一个inode结构，inode号是inode_no */
void inode_init(uint32_t inode_no, struct inode* new_inode) {
c00092a3:	55                   	push   %ebp
c00092a4:	89 e5                	mov    %esp,%ebp
c00092a6:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/fs/inode.c:235
	new_inode->i_no = inode_no;
c00092a9:	8b 45 0c             	mov    0xc(%ebp),%eax
c00092ac:	8b 55 08             	mov    0x8(%ebp),%edx
c00092af:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/fs/inode.c:236
	new_inode->i_size = 0;
c00092b1:	8b 45 0c             	mov    0xc(%ebp),%eax
c00092b4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
/work/x86_os_my/fs/inode.c:237
	new_inode->i_open_cnts = 0;
c00092bb:	8b 45 0c             	mov    0xc(%ebp),%eax
c00092be:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
/work/x86_os_my/fs/inode.c:238
	new_inode->write_deny = false;
c00092c5:	8b 45 0c             	mov    0xc(%ebp),%eax
c00092c8:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
/work/x86_os_my/fs/inode.c:241

	/* 初始化块索引数组i_sector */
	uint8_t sec_idx = 0;
c00092cf:	c6 45 ff 00          	movb   $0x0,-0x1(%ebp)
/work/x86_os_my/fs/inode.c:242
	while (sec_idx < 13) {
c00092d3:	eb 1b                	jmp    c00092f0 <inode_init+0x4d>
/work/x86_os_my/fs/inode.c:244
		/* i_sectors[12]为一级间接块地址 */
		new_inode->i_sectors[sec_idx] = 0;
c00092d5:	0f b6 55 ff          	movzbl -0x1(%ebp),%edx
c00092d9:	8b 45 0c             	mov    0xc(%ebp),%eax
c00092dc:	83 c2 04             	add    $0x4,%edx
c00092df:	c7 04 90 00 00 00 00 	movl   $0x0,(%eax,%edx,4)
/work/x86_os_my/fs/inode.c:245
		sec_idx++;
c00092e6:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
c00092ea:	83 c0 01             	add    $0x1,%eax
c00092ed:	88 45 ff             	mov    %al,-0x1(%ebp)
/work/x86_os_my/fs/inode.c:242
	new_inode->i_open_cnts = 0;
	new_inode->write_deny = false;

	/* 初始化块索引数组i_sector */
	uint8_t sec_idx = 0;
	while (sec_idx < 13) {
c00092f0:	80 7d ff 0c          	cmpb   $0xc,-0x1(%ebp)
c00092f4:	76 df                	jbe    c00092d5 <inode_init+0x32>
/work/x86_os_my/fs/inode.c:250
		sec_idx++;
	}
	/*为什么不提前分配inode管理的数据块（对我们来说是块=扇区）
	1.不知道文件大小，因此不知道分配多少个扇区合适
	2.文件创建后未必马上会写数据*/
}
c00092f6:	90                   	nop
c00092f7:	c9                   	leave  
c00092f8:	c3                   	ret    

c00092f9 <get_free_slot_in_global>:
get_free_slot_in_global():
/work/x86_os_my/fs/file.c:19

/* 文件表 */
struct file file_table[MAX_FILE_OPEN];

/* 从文件表 file_table 中获取一个空闲位,成功返回下标,失败返回-1 */
int32_t get_free_slot_in_global(void) {
c00092f9:	55                   	push   %ebp
c00092fa:	89 e5                	mov    %esp,%ebp
c00092fc:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/file.c:20
	uint32_t fd_idx = 3;
c00092ff:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
/work/x86_os_my/fs/file.c:21
	while (fd_idx < MAX_FILE_OPEN) {
c0009306:	eb 1b                	jmp    c0009323 <get_free_slot_in_global+0x2a>
/work/x86_os_my/fs/file.c:22
		if (file_table[fd_idx].fd_inode == NULL) {
c0009308:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000930b:	89 d0                	mov    %edx,%eax
c000930d:	01 c0                	add    %eax,%eax
c000930f:	01 d0                	add    %edx,%eax
c0009311:	c1 e0 02             	shl    $0x2,%eax
c0009314:	05 e8 2f 01 c0       	add    $0xc0012fe8,%eax
c0009319:	8b 00                	mov    (%eax),%eax
c000931b:	85 c0                	test   %eax,%eax
c000931d:	74 0c                	je     c000932b <get_free_slot_in_global+0x32>
/work/x86_os_my/fs/file.c:25
			break;
		}
		fd_idx++;
c000931f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/file.c:21
struct file file_table[MAX_FILE_OPEN];

/* 从文件表 file_table 中获取一个空闲位,成功返回下标,失败返回-1 */
int32_t get_free_slot_in_global(void) {
	uint32_t fd_idx = 3;
	while (fd_idx < MAX_FILE_OPEN) {
c0009323:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c0009327:	76 df                	jbe    c0009308 <get_free_slot_in_global+0xf>
c0009329:	eb 01                	jmp    c000932c <get_free_slot_in_global+0x33>
/work/x86_os_my/fs/file.c:23
		if (file_table[fd_idx].fd_inode == NULL) {
			break;
c000932b:	90                   	nop
/work/x86_os_my/fs/file.c:27
		}
		fd_idx++;
	}
	if (fd_idx == MAX_FILE_OPEN) {
c000932c:	83 7d f4 20          	cmpl   $0x20,-0xc(%ebp)
c0009330:	75 17                	jne    c0009349 <get_free_slot_in_global+0x50>
/work/x86_os_my/fs/file.c:28
		printk("exceed max open files\n");
c0009332:	83 ec 0c             	sub    $0xc,%esp
c0009335:	68 48 e4 00 c0       	push   $0xc000e448
c000933a:	e8 cf d7 ff ff       	call   c0006b0e <printk>
c000933f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:29
		return -1;
c0009342:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009347:	eb 03                	jmp    c000934c <get_free_slot_in_global+0x53>
/work/x86_os_my/fs/file.c:31
	}
	return fd_idx;
c0009349:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/file.c:32
}
c000934c:	c9                   	leave  
c000934d:	c3                   	ret    

c000934e <pcb_fd_install>:
pcb_fd_install():
/work/x86_os_my/fs/file.c:36

/* 将 file_table 的下标，安装到，线程PCB中文件描述符数组 fd_table
 * 成功返回 fd_table 的下标（即文件描述符）,失败返回-1 */
int32_t pcb_fd_install(int32_t globa_fd_idx) {
c000934e:	55                   	push   %ebp
c000934f:	89 e5                	mov    %esp,%ebp
c0009351:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/file.c:37
	struct task_struct* cur = running_thread();
c0009354:	e8 e1 a8 ff ff       	call   c0003c3a <running_thread>
c0009359:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:38
	uint8_t local_fd_idx = 3;	// 跨过stdin,stdout,stderr
c000935c:	c6 45 f7 03          	movb   $0x3,-0x9(%ebp)
/work/x86_os_my/fs/file.c:39
	while (local_fd_idx < MAX_FILES_OPEN_PER_PROC) {
c0009360:	eb 30                	jmp    c0009392 <pcb_fd_install+0x44>
/work/x86_os_my/fs/file.c:40
		if (cur->fd_table[local_fd_idx] == -1) {	// -1表示free_slot,可用
c0009362:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c0009366:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0009369:	83 c2 08             	add    $0x8,%edx
c000936c:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
c0009370:	83 f8 ff             	cmp    $0xffffffff,%eax
c0009373:	75 13                	jne    c0009388 <pcb_fd_install+0x3a>
/work/x86_os_my/fs/file.c:41
			cur->fd_table[local_fd_idx] = globa_fd_idx;
c0009375:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c0009379:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000937c:	8d 4a 08             	lea    0x8(%edx),%ecx
c000937f:	8b 55 08             	mov    0x8(%ebp),%edx
c0009382:	89 54 88 04          	mov    %edx,0x4(%eax,%ecx,4)
/work/x86_os_my/fs/file.c:42
			break;
c0009386:	eb 10                	jmp    c0009398 <pcb_fd_install+0x4a>
/work/x86_os_my/fs/file.c:44
		}
		local_fd_idx++;
c0009388:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000938c:	83 c0 01             	add    $0x1,%eax
c000938f:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/file.c:39
/* 将 file_table 的下标，安装到，线程PCB中文件描述符数组 fd_table
 * 成功返回 fd_table 的下标（即文件描述符）,失败返回-1 */
int32_t pcb_fd_install(int32_t globa_fd_idx) {
	struct task_struct* cur = running_thread();
	uint8_t local_fd_idx = 3;	// 跨过stdin,stdout,stderr
	while (local_fd_idx < MAX_FILES_OPEN_PER_PROC) {
c0009392:	80 7d f7 07          	cmpb   $0x7,-0x9(%ebp)
c0009396:	76 ca                	jbe    c0009362 <pcb_fd_install+0x14>
/work/x86_os_my/fs/file.c:46
			cur->fd_table[local_fd_idx] = globa_fd_idx;
			break;
		}
		local_fd_idx++;
	}
	if (local_fd_idx == MAX_FILES_OPEN_PER_PROC) {
c0009398:	80 7d f7 08          	cmpb   $0x8,-0x9(%ebp)
c000939c:	75 17                	jne    c00093b5 <pcb_fd_install+0x67>
/work/x86_os_my/fs/file.c:47
		printk("exceed max open files_per_proc\n");
c000939e:	83 ec 0c             	sub    $0xc,%esp
c00093a1:	68 60 e4 00 c0       	push   $0xc000e460
c00093a6:	e8 63 d7 ff ff       	call   c0006b0e <printk>
c00093ab:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:48
		return -1;
c00093ae:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00093b3:	eb 04                	jmp    c00093b9 <pcb_fd_install+0x6b>
/work/x86_os_my/fs/file.c:50
	}
	return local_fd_idx;
c00093b5:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
/work/x86_os_my/fs/file.c:51
}
c00093b9:	c9                   	leave  
c00093ba:	c3                   	ret    

c00093bb <inode_bitmap_alloc>:
inode_bitmap_alloc():
/work/x86_os_my/fs/file.c:54

/* 从分区的inode位图中，分配一个i结点，返回"inode号" */
int32_t inode_bitmap_alloc(struct partition* part) {
c00093bb:	55                   	push   %ebp
c00093bc:	89 e5                	mov    %esp,%ebp
c00093be:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/file.c:55
	int32_t bit_idx = bitmap_scan(&part->inode_bitmap, 1);
c00093c1:	8b 45 08             	mov    0x8(%ebp),%eax
c00093c4:	83 c0 28             	add    $0x28,%eax
c00093c7:	83 ec 08             	sub    $0x8,%esp
c00093ca:	6a 01                	push   $0x1
c00093cc:	50                   	push   %eax
c00093cd:	e8 18 91 ff ff       	call   c00024ea <bitmap_scan>
c00093d2:	83 c4 10             	add    $0x10,%esp
c00093d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:56
	if (bit_idx == -1) {
c00093d8:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c00093dc:	75 07                	jne    c00093e5 <inode_bitmap_alloc+0x2a>
/work/x86_os_my/fs/file.c:57
		return -1;
c00093de:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00093e3:	eb 1b                	jmp    c0009400 <inode_bitmap_alloc+0x45>
/work/x86_os_my/fs/file.c:59
	}
	bitmap_set(&part->inode_bitmap, bit_idx, 1);
c00093e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c00093e8:	8b 55 08             	mov    0x8(%ebp),%edx
c00093eb:	83 c2 28             	add    $0x28,%edx
c00093ee:	83 ec 04             	sub    $0x4,%esp
c00093f1:	6a 01                	push   $0x1
c00093f3:	50                   	push   %eax
c00093f4:	52                   	push   %edx
c00093f5:	e8 25 92 ff ff       	call   c000261f <bitmap_set>
c00093fa:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:60
	return bit_idx;
c00093fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/file.c:61
}
c0009400:	c9                   	leave  
c0009401:	c3                   	ret    

c0009402 <block_bitmap_alloc>:
block_bitmap_alloc():
/work/x86_os_my/fs/file.c:64
   
/* 从分区的block位图中，分配1个扇区，返回"扇区地址" 【操作的是 空闲块区域 】*/
int32_t block_bitmap_alloc(struct partition* part) {
c0009402:	55                   	push   %ebp
c0009403:	89 e5                	mov    %esp,%ebp
c0009405:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/file.c:65
	int32_t bit_idx = bitmap_scan(&part->block_bitmap, 1);
c0009408:	8b 45 08             	mov    0x8(%ebp),%eax
c000940b:	83 c0 20             	add    $0x20,%eax
c000940e:	83 ec 08             	sub    $0x8,%esp
c0009411:	6a 01                	push   $0x1
c0009413:	50                   	push   %eax
c0009414:	e8 d1 90 ff ff       	call   c00024ea <bitmap_scan>
c0009419:	83 c4 10             	add    $0x10,%esp
c000941c:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:66
	if (bit_idx == -1) {
c000941f:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c0009423:	75 07                	jne    c000942c <block_bitmap_alloc+0x2a>
/work/x86_os_my/fs/file.c:67
		return -1;
c0009425:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000942a:	eb 26                	jmp    c0009452 <block_bitmap_alloc+0x50>
/work/x86_os_my/fs/file.c:69
	}
	bitmap_set(&part->block_bitmap, bit_idx, 1);
c000942c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000942f:	8b 55 08             	mov    0x8(%ebp),%edx
c0009432:	83 c2 20             	add    $0x20,%edx
c0009435:	83 ec 04             	sub    $0x4,%esp
c0009438:	6a 01                	push   $0x1
c000943a:	50                   	push   %eax
c000943b:	52                   	push   %edx
c000943c:	e8 de 91 ff ff       	call   c000261f <bitmap_set>
c0009441:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:71
	/* 和inode_bitmap_malloc不同,此处返回的不是位图索引,而是具体可用的扇区地址 */
	return (part->sb->data_start_lba + bit_idx);
c0009444:	8b 45 08             	mov    0x8(%ebp),%eax
c0009447:	8b 40 1c             	mov    0x1c(%eax),%eax
c000944a:	8b 50 28             	mov    0x28(%eax),%edx
c000944d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009450:	01 d0                	add    %edx,%eax
/work/x86_os_my/fs/file.c:72
} 
c0009452:	c9                   	leave  
c0009453:	c3                   	ret    

c0009454 <bitmap_sync>:
bitmap_sync():
/work/x86_os_my/fs/file.c:76

/* 将内存中bitmap第bit_idx位所在的那个512字节，同步到硬盘中bitmap第bit_idx位所在的扇区 */
// 硬盘以扇区为读写单位
void bitmap_sync(struct partition* part, uint32_t bit_idx, uint8_t btmp_type) {
c0009454:	55                   	push   %ebp
c0009455:	89 e5                	mov    %esp,%ebp
c0009457:	83 ec 28             	sub    $0x28,%esp
c000945a:	8b 45 10             	mov    0x10(%ebp),%eax
c000945d:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/fs/file.c:77
	uint32_t off_sec = bit_idx / 4096;			// dst(硬盘中): bit_idx 相对于位图起始lba，在后边的第几个扇区(512*8=4096)
c0009460:	8b 45 0c             	mov    0xc(%ebp),%eax
c0009463:	c1 e8 0c             	shr    $0xc,%eax
c0009466:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/file.c:78
	uint32_t off_size = off_sec * BLOCK_SIZE;	// src(内存中): bit_idx 相对于位图数组bits，以512字节为单位，在后边的第几个单位处
c0009469:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000946c:	c1 e0 09             	shl    $0x9,%eax
c000946f:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/file.c:84
												// off_size是，第 bit_idx位所在位图中以 512 字节为单位的起始地址。BLOCK_SIZE=512
	uint32_t sec_lba;
	uint8_t* bitmap_off;

	/* 需要被同步到硬盘的位图只有inode_bitmap和block_bitmap */
	switch (btmp_type) {
c0009472:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0009476:	85 c0                	test   %eax,%eax
c0009478:	74 07                	je     c0009481 <bitmap_sync+0x2d>
c000947a:	83 f8 01             	cmp    $0x1,%eax
c000947d:	74 23                	je     c00094a2 <bitmap_sync+0x4e>
c000947f:	eb 41                	jmp    c00094c2 <bitmap_sync+0x6e>
/work/x86_os_my/fs/file.c:86
		case INODE_BITMAP:
		sec_lba = part->sb->inode_bitmap_lba + off_sec;
c0009481:	8b 45 08             	mov    0x8(%ebp),%eax
c0009484:	8b 40 1c             	mov    0x1c(%eax),%eax
c0009487:	8b 50 18             	mov    0x18(%eax),%edx
c000948a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000948d:	01 d0                	add    %edx,%eax
c000948f:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:87
		bitmap_off = part->inode_bitmap.bits + off_size;
c0009492:	8b 45 08             	mov    0x8(%ebp),%eax
c0009495:	8b 50 2c             	mov    0x2c(%eax),%edx
c0009498:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000949b:	01 d0                	add    %edx,%eax
c000949d:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:88
		break;
c00094a0:	eb 20                	jmp    c00094c2 <bitmap_sync+0x6e>
/work/x86_os_my/fs/file.c:91

		case BLOCK_BITMAP: 
		sec_lba = part->sb->block_bitmap_lba + off_sec;
c00094a2:	8b 45 08             	mov    0x8(%ebp),%eax
c00094a5:	8b 40 1c             	mov    0x1c(%eax),%eax
c00094a8:	8b 50 10             	mov    0x10(%eax),%edx
c00094ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
c00094ae:	01 d0                	add    %edx,%eax
c00094b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:92
		bitmap_off = part->block_bitmap.bits + off_size;
c00094b3:	8b 45 08             	mov    0x8(%ebp),%eax
c00094b6:	8b 50 24             	mov    0x24(%eax),%edx
c00094b9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c00094bc:	01 d0                	add    %edx,%eax
c00094be:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:93
		break;
c00094c1:	90                   	nop
/work/x86_os_my/fs/file.c:95
	}
	ide_write(part->my_disk, sec_lba, bitmap_off, 1);	// 将bitmap_off中1个扇区的数据写入硬盘sec_lba处
c00094c2:	8b 45 08             	mov    0x8(%ebp),%eax
c00094c5:	8b 40 08             	mov    0x8(%eax),%eax
c00094c8:	6a 01                	push   $0x1
c00094ca:	ff 75 f0             	pushl  -0x10(%ebp)
c00094cd:	ff 75 f4             	pushl  -0xc(%ebp)
c00094d0:	50                   	push   %eax
c00094d1:	e8 33 cd ff ff       	call   c0006209 <ide_write>
c00094d6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:96
}
c00094d9:	90                   	nop
c00094da:	c9                   	leave  
c00094db:	c3                   	ret    

c00094dc <file_create>:
file_create():
/work/x86_os_my/fs/file.c:114
此新增加的文件对应的目录项，需要写入该目录的 inode->i_sectors[]中的某个扇区，
原有扇区可能已满，所以有可能要申请新扇区来存储目录项。【sync_dir_entry】
4. 若其中某步操作失败，需要回滚之前已成功的操作。
5. inode_bitmap、 block_bitmap、新文件的 inode 及文件所在目录的 inode，这些位于内存中已经被改变的数据要同步到硬盘。
*/
int32_t file_create(struct dir* parent_dir, char* filename, uint8_t flag) {
c00094dc:	55                   	push   %ebp
c00094dd:	89 e5                	mov    %esp,%ebp
c00094df:	83 ec 48             	sub    $0x48,%esp
c00094e2:	8b 45 10             	mov    0x10(%ebp),%eax
c00094e5:	88 45 c4             	mov    %al,-0x3c(%ebp)
/work/x86_os_my/fs/file.c:116
	/* 后续操作的公共缓冲区 */
	void* io_buf = sys_malloc(1024);	//跨扇区的数据，会操作2个扇区
c00094e8:	83 ec 0c             	sub    $0xc,%esp
c00094eb:	68 00 04 00 00       	push   $0x400
c00094f0:	e8 67 98 ff ff       	call   c0002d5c <sys_malloc>
c00094f5:	83 c4 10             	add    $0x10,%esp
c00094f8:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/file.c:117
	if (io_buf == NULL) {
c00094fb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c00094ff:	75 1a                	jne    c000951b <file_create+0x3f>
/work/x86_os_my/fs/file.c:118
		printk("in file_creat: sys_malloc for io_buf failed\n");
c0009501:	83 ec 0c             	sub    $0xc,%esp
c0009504:	68 80 e4 00 c0       	push   $0xc000e480
c0009509:	e8 00 d6 ff ff       	call   c0006b0e <printk>
c000950e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:119
		return -1;
c0009511:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009516:	e9 81 02 00 00       	jmp    c000979c <file_create+0x2c0>
/work/x86_os_my/fs/file.c:122
	}

	uint8_t rollback_step = 0;	// 用于操作失败时回滚各资源状态
c000951b:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/fs/file.c:125

	/* 1.为新文件从分区inode位图中，分配inode号 */
	int32_t inode_no = inode_bitmap_alloc(cur_part); 
c000951f:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0009524:	83 ec 0c             	sub    $0xc,%esp
c0009527:	50                   	push   %eax
c0009528:	e8 8e fe ff ff       	call   c00093bb <inode_bitmap_alloc>
c000952d:	83 c4 10             	add    $0x10,%esp
c0009530:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/file.c:126
	if (inode_no == -1) {
c0009533:	83 7d e8 ff          	cmpl   $0xffffffff,-0x18(%ebp)
c0009537:	75 1a                	jne    c0009553 <file_create+0x77>
/work/x86_os_my/fs/file.c:127
		printk("in file_creat: allocate inode failed\n");
c0009539:	83 ec 0c             	sub    $0xc,%esp
c000953c:	68 b0 e4 00 c0       	push   $0xc000e4b0
c0009541:	e8 c8 d5 ff ff       	call   c0006b0e <printk>
c0009546:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:128
		return -1;
c0009549:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000954e:	e9 49 02 00 00       	jmp    c000979c <file_create+0x2c0>
/work/x86_os_my/fs/file.c:133
	}

	/* 2.堆中分配inode节点，不可以是栈中的局部变量！
	 * 因为 file_table 中的 fd_inode 指针要指向它. */
	struct inode* new_file_inode = (struct inode*)sys_malloc(sizeof(struct inode)); 
c0009553:	83 ec 0c             	sub    $0xc,%esp
c0009556:	6a 4c                	push   $0x4c
c0009558:	e8 ff 97 ff ff       	call   c0002d5c <sys_malloc>
c000955d:	83 c4 10             	add    $0x10,%esp
c0009560:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/file.c:134
	if (new_file_inode == NULL) {
c0009563:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0009567:	75 19                	jne    c0009582 <file_create+0xa6>
/work/x86_os_my/fs/file.c:135
		printk("file_create: sys_malloc for inode failded\n");
c0009569:	83 ec 0c             	sub    $0xc,%esp
c000956c:	68 d8 e4 00 c0       	push   $0xc000e4d8
c0009571:	e8 98 d5 ff ff       	call   c0006b0e <printk>
c0009576:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:136
		rollback_step = 1;
c0009579:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)
/work/x86_os_my/fs/file.c:137
		goto rollback;
c000957d:	e9 a7 01 00 00       	jmp    c0009729 <file_create+0x24d>
/work/x86_os_my/fs/file.c:139
	}
	inode_init(inode_no, new_file_inode);	    // 初始化inode
c0009582:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0009585:	83 ec 08             	sub    $0x8,%esp
c0009588:	ff 75 e4             	pushl  -0x1c(%ebp)
c000958b:	50                   	push   %eax
c000958c:	e8 12 fd ff ff       	call   c00092a3 <inode_init>
c0009591:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:142

	/* 3.申请一个file_table数组的下标 */
	int fd_idx = get_free_slot_in_global();
c0009594:	e8 60 fd ff ff       	call   c00092f9 <get_free_slot_in_global>
c0009599:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:143
	if (fd_idx == -1) {
c000959c:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c00095a0:	75 19                	jne    c00095bb <file_create+0xdf>
/work/x86_os_my/fs/file.c:144
		printk("exceed max open files\n");
c00095a2:	83 ec 0c             	sub    $0xc,%esp
c00095a5:	68 48 e4 00 c0       	push   $0xc000e448
c00095aa:	e8 5f d5 ff ff       	call   c0006b0e <printk>
c00095af:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:145
		rollback_step = 2;
c00095b2:	c6 45 f7 02          	movb   $0x2,-0x9(%ebp)
/work/x86_os_my/fs/file.c:146
		goto rollback;
c00095b6:	e9 6e 01 00 00       	jmp    c0009729 <file_create+0x24d>
/work/x86_os_my/fs/file.c:150
	}

	// 4.填充文件表中的文件结构
	file_table[fd_idx].fd_inode = new_file_inode;
c00095bb:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00095be:	89 d0                	mov    %edx,%eax
c00095c0:	01 c0                	add    %eax,%eax
c00095c2:	01 d0                	add    %edx,%eax
c00095c4:	c1 e0 02             	shl    $0x2,%eax
c00095c7:	8d 90 e8 2f 01 c0    	lea    -0x3ffed018(%eax),%edx
c00095cd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00095d0:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/file.c:151
	file_table[fd_idx].fd_pos = 0;
c00095d2:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00095d5:	89 d0                	mov    %edx,%eax
c00095d7:	01 c0                	add    %eax,%eax
c00095d9:	01 d0                	add    %edx,%eax
c00095db:	c1 e0 02             	shl    $0x2,%eax
c00095de:	05 e0 2f 01 c0       	add    $0xc0012fe0,%eax
c00095e3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/fs/file.c:152
	file_table[fd_idx].fd_flag = flag;
c00095e9:	0f b6 4d c4          	movzbl -0x3c(%ebp),%ecx
c00095ed:	8b 55 f0             	mov    -0x10(%ebp),%edx
c00095f0:	89 d0                	mov    %edx,%eax
c00095f2:	01 c0                	add    %eax,%eax
c00095f4:	01 d0                	add    %edx,%eax
c00095f6:	c1 e0 02             	shl    $0x2,%eax
c00095f9:	05 e4 2f 01 c0       	add    $0xc0012fe4,%eax
c00095fe:	89 08                	mov    %ecx,(%eax)
/work/x86_os_my/fs/file.c:153
	file_table[fd_idx].fd_inode->write_deny = false;
c0009600:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0009603:	89 d0                	mov    %edx,%eax
c0009605:	01 c0                	add    %eax,%eax
c0009607:	01 d0                	add    %edx,%eax
c0009609:	c1 e0 02             	shl    $0x2,%eax
c000960c:	05 e8 2f 01 c0       	add    $0xc0012fe8,%eax
c0009611:	8b 00                	mov    (%eax),%eax
c0009613:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
/work/x86_os_my/fs/file.c:156

	struct dir_entry new_dir_entry;
	memset(&new_dir_entry, 0, sizeof(struct dir_entry));
c000961a:	83 ec 04             	sub    $0x4,%esp
c000961d:	6a 18                	push   $0x18
c000961f:	6a 00                	push   $0x0
c0009621:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0009624:	50                   	push   %eax
c0009625:	e8 29 a2 ff ff       	call   c0003853 <memset>
c000962a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:159

	// create_dir_entry在内存中初始化目录项p_de，只是内存操作不会返回失败
	create_dir_entry(filename, inode_no, FT_REGULAR, &new_dir_entry);
c000962d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0009630:	8d 55 cc             	lea    -0x34(%ebp),%edx
c0009633:	52                   	push   %edx
c0009634:	6a 01                	push   $0x1
c0009636:	50                   	push   %eax
c0009637:	ff 75 0c             	pushl  0xc(%ebp)
c000963a:	e8 73 10 00 00       	call   c000a6b2 <create_dir_entry>
c000963f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:164


	/* 同步内存数据到硬盘 */
	/* a 在目录parent_dir下安装目录项new_dir_entry, 写入硬盘后返回true, 否则false【dir.c】 */
	if (!sync_dir_entry(parent_dir, &new_dir_entry, io_buf)) {
c0009642:	83 ec 04             	sub    $0x4,%esp
c0009645:	ff 75 ec             	pushl  -0x14(%ebp)
c0009648:	8d 45 cc             	lea    -0x34(%ebp),%eax
c000964b:	50                   	push   %eax
c000964c:	ff 75 08             	pushl  0x8(%ebp)
c000964f:	e8 cf 10 00 00       	call   c000a723 <sync_dir_entry>
c0009654:	83 c4 10             	add    $0x10,%esp
c0009657:	85 c0                	test   %eax,%eax
c0009659:	75 19                	jne    c0009674 <file_create+0x198>
/work/x86_os_my/fs/file.c:165
		printk("sync dir_entry to disk failed\n");
c000965b:	83 ec 0c             	sub    $0xc,%esp
c000965e:	68 04 e5 00 c0       	push   $0xc000e504
c0009663:	e8 a6 d4 ff ff       	call   c0006b0e <printk>
c0009668:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:166
		rollback_step = 3;
c000966b:	c6 45 f7 03          	movb   $0x3,-0x9(%ebp)
/work/x86_os_my/fs/file.c:167
		goto rollback;
c000966f:	e9 b5 00 00 00       	jmp    c0009729 <file_create+0x24d>
/work/x86_os_my/fs/file.c:171
	}

	/* b sync_dir_entry 会改变父目录 inode 中的信息，因此，将父目录inode的内容同步到硬盘【inode.c】 */
	memset(io_buf, 0, 1024);
c0009674:	83 ec 04             	sub    $0x4,%esp
c0009677:	68 00 04 00 00       	push   $0x400
c000967c:	6a 00                	push   $0x0
c000967e:	ff 75 ec             	pushl  -0x14(%ebp)
c0009681:	e8 cd a1 ff ff       	call   c0003853 <memset>
c0009686:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:172
	inode_sync(cur_part, parent_dir->inode, io_buf);
c0009689:	8b 45 08             	mov    0x8(%ebp),%eax
c000968c:	8b 10                	mov    (%eax),%edx
c000968e:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0009693:	83 ec 04             	sub    $0x4,%esp
c0009696:	ff 75 ec             	pushl  -0x14(%ebp)
c0009699:	52                   	push   %edx
c000969a:	50                   	push   %eax
c000969b:	e8 cf f5 ff ff       	call   c0008c6f <inode_sync>
c00096a0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:175

	/* c 将新创建文件的inode内容同步到硬盘 */
	memset(io_buf, 0, 1024);
c00096a3:	83 ec 04             	sub    $0x4,%esp
c00096a6:	68 00 04 00 00       	push   $0x400
c00096ab:	6a 00                	push   $0x0
c00096ad:	ff 75 ec             	pushl  -0x14(%ebp)
c00096b0:	e8 9e a1 ff ff       	call   c0003853 <memset>
c00096b5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:176
	inode_sync(cur_part, new_file_inode, io_buf);
c00096b8:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c00096bd:	83 ec 04             	sub    $0x4,%esp
c00096c0:	ff 75 ec             	pushl  -0x14(%ebp)
c00096c3:	ff 75 e4             	pushl  -0x1c(%ebp)
c00096c6:	50                   	push   %eax
c00096c7:	e8 a3 f5 ff ff       	call   c0008c6f <inode_sync>
c00096cc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:179

	/* d 将inode_bitmap位图同步到硬盘【file.c】 */
	bitmap_sync(cur_part, inode_no, INODE_BITMAP);
c00096cf:	8b 55 e8             	mov    -0x18(%ebp),%edx
c00096d2:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c00096d7:	83 ec 04             	sub    $0x4,%esp
c00096da:	6a 00                	push   $0x0
c00096dc:	52                   	push   %edx
c00096dd:	50                   	push   %eax
c00096de:	e8 71 fd ff ff       	call   c0009454 <bitmap_sync>
c00096e3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:182

	/* e 将创建的文件i结点添加到open_inodes链表 */
	list_push(&cur_part->open_inodes, &new_file_inode->inode_tag);
c00096e6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c00096e9:	8d 50 44             	lea    0x44(%eax),%edx
c00096ec:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c00096f1:	83 c0 30             	add    $0x30,%eax
c00096f4:	83 ec 08             	sub    $0x8,%esp
c00096f7:	52                   	push   %edx
c00096f8:	50                   	push   %eax
c00096f9:	e8 b6 af ff ff       	call   c00046b4 <list_push>
c00096fe:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:183
	new_file_inode->i_open_cnts = 1;
c0009701:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0009704:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/fs/file.c:186


	sys_free(io_buf);
c000970b:	83 ec 0c             	sub    $0xc,%esp
c000970e:	ff 75 ec             	pushl  -0x14(%ebp)
c0009711:	e8 73 9c ff ff       	call   c0003389 <sys_free>
c0009716:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:187
	return pcb_fd_install(fd_idx);	// 将 file_table 的下标，安装到，线程PCB中文件描述符数组 fd_table【file.c】
c0009719:	83 ec 0c             	sub    $0xc,%esp
c000971c:	ff 75 f0             	pushl  -0x10(%ebp)
c000971f:	e8 2a fc ff ff       	call   c000934e <pcb_fd_install>
c0009724:	83 c4 10             	add    $0x10,%esp
c0009727:	eb 73                	jmp    c000979c <file_create+0x2c0>
/work/x86_os_my/fs/file.c:191


rollback:
	switch (rollback_step) {
c0009729:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000972d:	83 f8 02             	cmp    $0x2,%eax
c0009730:	74 2d                	je     c000975f <file_create+0x283>
c0009732:	83 f8 03             	cmp    $0x3,%eax
c0009735:	74 07                	je     c000973e <file_create+0x262>
c0009737:	83 f8 01             	cmp    $0x1,%eax
c000973a:	74 31                	je     c000976d <file_create+0x291>
c000973c:	eb 4b                	jmp    c0009789 <file_create+0x2ad>
/work/x86_os_my/fs/file.c:194
		case 3:
		/* file_table 相应位清空 */
		memset(&file_table[fd_idx], 0, sizeof(struct file)); 
c000973e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0009741:	89 d0                	mov    %edx,%eax
c0009743:	01 c0                	add    %eax,%eax
c0009745:	01 d0                	add    %edx,%eax
c0009747:	c1 e0 02             	shl    $0x2,%eax
c000974a:	05 e0 2f 01 c0       	add    $0xc0012fe0,%eax
c000974f:	83 ec 04             	sub    $0x4,%esp
c0009752:	6a 0c                	push   $0xc
c0009754:	6a 00                	push   $0x0
c0009756:	50                   	push   %eax
c0009757:	e8 f7 a0 ff ff       	call   c0003853 <memset>
c000975c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:196
		case 2:
		sys_free(new_file_inode);
c000975f:	83 ec 0c             	sub    $0xc,%esp
c0009762:	ff 75 e4             	pushl  -0x1c(%ebp)
c0009765:	e8 1f 9c ff ff       	call   c0003389 <sys_free>
c000976a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:199
		case 1:
		/* inode位图 恢复 */
		bitmap_set(&cur_part->inode_bitmap, inode_no, 0);
c000976d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0009770:	8b 15 d0 2f 01 c0    	mov    0xc0012fd0,%edx
c0009776:	83 c2 28             	add    $0x28,%edx
c0009779:	83 ec 04             	sub    $0x4,%esp
c000977c:	6a 00                	push   $0x0
c000977e:	50                   	push   %eax
c000977f:	52                   	push   %edx
c0009780:	e8 9a 8e ff ff       	call   c000261f <bitmap_set>
c0009785:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:200
		break;
c0009788:	90                   	nop
/work/x86_os_my/fs/file.c:202
	}
	sys_free(io_buf);
c0009789:	83 ec 0c             	sub    $0xc,%esp
c000978c:	ff 75 ec             	pushl  -0x14(%ebp)
c000978f:	e8 f5 9b ff ff       	call   c0003389 <sys_free>
c0009794:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:203
	return -1;
c0009797:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
/work/x86_os_my/fs/file.c:204 (discriminator 1)
}
c000979c:	c9                   	leave  
c000979d:	c3                   	ret    

c000979e <file_open>:
file_open():
/work/x86_os_my/fs/file.c:207

/* 打开编号为inode_no的inode对应的文件,若成功则返回文件描述符,否则返回-1 */
int32_t file_open(uint32_t inode_no, uint8_t flag) {
c000979e:	55                   	push   %ebp
c000979f:	89 e5                	mov    %esp,%ebp
c00097a1:	83 ec 28             	sub    $0x28,%esp
c00097a4:	8b 45 0c             	mov    0xc(%ebp),%eax
c00097a7:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/fs/file.c:208
	int fd_idx = get_free_slot_in_global();
c00097aa:	e8 4a fb ff ff       	call   c00092f9 <get_free_slot_in_global>
c00097af:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:209
	if (fd_idx == -1) {
c00097b2:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c00097b6:	75 1a                	jne    c00097d2 <file_open+0x34>
/work/x86_os_my/fs/file.c:210
		printk("exceed max open files\n");
c00097b8:	83 ec 0c             	sub    $0xc,%esp
c00097bb:	68 48 e4 00 c0       	push   $0xc000e448
c00097c0:	e8 49 d3 ff ff       	call   c0006b0e <printk>
c00097c5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:211
		return -1;
c00097c8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00097cd:	e9 e3 00 00 00       	jmp    c00098b5 <file_open+0x117>
/work/x86_os_my/fs/file.c:213
	}
	file_table[fd_idx].fd_inode = inode_open(cur_part, inode_no);
c00097d2:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c00097d7:	83 ec 08             	sub    $0x8,%esp
c00097da:	ff 75 08             	pushl  0x8(%ebp)
c00097dd:	50                   	push   %eax
c00097de:	e8 b3 f5 ff ff       	call   c0008d96 <inode_open>
c00097e3:	83 c4 10             	add    $0x10,%esp
c00097e6:	89 c1                	mov    %eax,%ecx
c00097e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c00097eb:	89 d0                	mov    %edx,%eax
c00097ed:	01 c0                	add    %eax,%eax
c00097ef:	01 d0                	add    %edx,%eax
c00097f1:	c1 e0 02             	shl    $0x2,%eax
c00097f4:	05 e8 2f 01 c0       	add    $0xc0012fe8,%eax
c00097f9:	89 08                	mov    %ecx,(%eax)
/work/x86_os_my/fs/file.c:214
	file_table[fd_idx].fd_pos = 0;		// 每次打开文件,要将fd_pos还原为0,即让文件内的指针指向开头
c00097fb:	8b 55 f4             	mov    -0xc(%ebp),%edx
c00097fe:	89 d0                	mov    %edx,%eax
c0009800:	01 c0                	add    %eax,%eax
c0009802:	01 d0                	add    %edx,%eax
c0009804:	c1 e0 02             	shl    $0x2,%eax
c0009807:	05 e0 2f 01 c0       	add    $0xc0012fe0,%eax
c000980c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/fs/file.c:215
	file_table[fd_idx].fd_flag = flag;
c0009812:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
c0009816:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0009819:	89 d0                	mov    %edx,%eax
c000981b:	01 c0                	add    %eax,%eax
c000981d:	01 d0                	add    %edx,%eax
c000981f:	c1 e0 02             	shl    $0x2,%eax
c0009822:	05 e4 2f 01 c0       	add    $0xc0012fe4,%eax
c0009827:	89 08                	mov    %ecx,(%eax)
/work/x86_os_my/fs/file.c:216
	bool* write_deny = &file_table[fd_idx].fd_inode->write_deny;
c0009829:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000982c:	89 d0                	mov    %edx,%eax
c000982e:	01 c0                	add    %eax,%eax
c0009830:	01 d0                	add    %edx,%eax
c0009832:	c1 e0 02             	shl    $0x2,%eax
c0009835:	05 e8 2f 01 c0       	add    $0xc0012fe8,%eax
c000983a:	8b 00                	mov    (%eax),%eax
c000983c:	83 c0 0c             	add    $0xc,%eax
c000983f:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:218

	if (flag & O_WRONLY || flag & O_RDWR) {	// 要写文件,需要判断是否有其它进程正写此文件。创建文件、读文件不考虑write_deny。
c0009842:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0009846:	83 e0 01             	and    $0x1,%eax
c0009849:	85 c0                	test   %eax,%eax
c000984b:	75 0b                	jne    c0009858 <file_open+0xba>
/work/x86_os_my/fs/file.c:218 (discriminator 1)
c000984d:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0009851:	83 e0 02             	and    $0x2,%eax
c0009854:	85 c0                	test   %eax,%eax
c0009856:	74 4f                	je     c00098a7 <file_open+0x109>
/work/x86_os_my/fs/file.c:220
		/* 以下进入临界区前先关中断 */
		enum intr_status old_status = intr_disable();
c0009858:	e8 6c 81 ff ff       	call   c00019c9 <intr_disable>
c000985d:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/file.c:221
		if (!(*write_deny)) {	// 若当前没有其它进程写该文件,将其占用.
c0009860:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0009863:	8b 00                	mov    (%eax),%eax
c0009865:	85 c0                	test   %eax,%eax
c0009867:	75 19                	jne    c0009882 <file_open+0xe4>
/work/x86_os_my/fs/file.c:222
			*write_deny = true;
c0009869:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000986c:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
/work/x86_os_my/fs/file.c:223
			intr_set_status(old_status);
c0009872:	83 ec 0c             	sub    $0xc,%esp
c0009875:	ff 75 ec             	pushl  -0x14(%ebp)
c0009878:	e8 75 81 ff ff       	call   c00019f2 <intr_set_status>
c000987d:	83 c4 10             	add    $0x10,%esp
c0009880:	eb 25                	jmp    c00098a7 <file_open+0x109>
/work/x86_os_my/fs/file.c:225
		} else {
			intr_set_status(old_status);
c0009882:	83 ec 0c             	sub    $0xc,%esp
c0009885:	ff 75 ec             	pushl  -0x14(%ebp)
c0009888:	e8 65 81 ff ff       	call   c00019f2 <intr_set_status>
c000988d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:226
			printk("file can`t be write now, try again later\n");
c0009890:	83 ec 0c             	sub    $0xc,%esp
c0009893:	68 24 e5 00 c0       	push   $0xc000e524
c0009898:	e8 71 d2 ff ff       	call   c0006b0e <printk>
c000989d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:227
			return -1;
c00098a0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00098a5:	eb 0e                	jmp    c00098b5 <file_open+0x117>
/work/x86_os_my/fs/file.c:230
		}
	}
	return pcb_fd_install(fd_idx);
c00098a7:	83 ec 0c             	sub    $0xc,%esp
c00098aa:	ff 75 f4             	pushl  -0xc(%ebp)
c00098ad:	e8 9c fa ff ff       	call   c000934e <pcb_fd_install>
c00098b2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:231
}
c00098b5:	c9                   	leave  
c00098b6:	c3                   	ret    

c00098b7 <file_close>:
file_close():
/work/x86_os_my/fs/file.c:234

/* 关闭文件 */
int32_t file_close(struct file* file) {
c00098b7:	55                   	push   %ebp
c00098b8:	89 e5                	mov    %esp,%ebp
c00098ba:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/fs/file.c:235
	if (file == NULL) {
c00098bd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c00098c1:	75 07                	jne    c00098ca <file_close+0x13>
/work/x86_os_my/fs/file.c:236
		return -1;
c00098c3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00098c8:	eb 2e                	jmp    c00098f8 <file_close+0x41>
/work/x86_os_my/fs/file.c:238
	}
	file->fd_inode->write_deny = false;
c00098ca:	8b 45 08             	mov    0x8(%ebp),%eax
c00098cd:	8b 40 08             	mov    0x8(%eax),%eax
c00098d0:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
/work/x86_os_my/fs/file.c:239
	inode_close(file->fd_inode);
c00098d7:	8b 45 08             	mov    0x8(%ebp),%eax
c00098da:	8b 40 08             	mov    0x8(%eax),%eax
c00098dd:	83 ec 0c             	sub    $0xc,%esp
c00098e0:	50                   	push   %eax
c00098e1:	e8 f6 f5 ff ff       	call   c0008edc <inode_close>
c00098e6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:240
	file->fd_inode = NULL;   // 使文件结构可用
c00098e9:	8b 45 08             	mov    0x8(%ebp),%eax
c00098ec:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
/work/x86_os_my/fs/file.c:241
	return 0;
c00098f3:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/file.c:242
}
c00098f8:	c9                   	leave  
c00098f9:	c3                   	ret    

c00098fa <file_write>:
file_write():
/work/x86_os_my/fs/file.c:245

/* 把buf中的count个字节写入file,成功则返回写入的字节数,失败则返回-1 */
int32_t file_write(struct file* file, const void* buf, uint32_t count) {
c00098fa:	55                   	push   %ebp
c00098fb:	89 e5                	mov    %esp,%ebp
c00098fd:	83 ec 58             	sub    $0x58,%esp
/work/x86_os_my/fs/file.c:246
	if ((file->fd_inode->i_size + count) > (BLOCK_SIZE * 140))	{	// 文件目前最大只支持512B*140块=71680字节【12直接块+128间接块】
c0009900:	8b 45 08             	mov    0x8(%ebp),%eax
c0009903:	8b 40 08             	mov    0x8(%eax),%eax
c0009906:	8b 50 04             	mov    0x4(%eax),%edx
c0009909:	8b 45 10             	mov    0x10(%ebp),%eax
c000990c:	01 d0                	add    %edx,%eax
c000990e:	3d 00 18 01 00       	cmp    $0x11800,%eax
c0009913:	76 1a                	jbe    c000992f <file_write+0x35>
/work/x86_os_my/fs/file.c:247
		printk("exceed max file_size 71680 bytes, write file failed\n");
c0009915:	83 ec 0c             	sub    $0xc,%esp
c0009918:	68 50 e5 00 c0       	push   $0xc000e550
c000991d:	e8 ec d1 ff ff       	call   c0006b0e <printk>
c0009922:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:248
		return -1;
c0009925:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000992a:	e9 5d 07 00 00       	jmp    c000a08c <file_write+0x792>
/work/x86_os_my/fs/file.c:250
	}
	uint8_t* io_buf = sys_malloc(BLOCK_SIZE);
c000992f:	83 ec 0c             	sub    $0xc,%esp
c0009932:	68 00 02 00 00       	push   $0x200
c0009937:	e8 20 94 ff ff       	call   c0002d5c <sys_malloc>
c000993c:	83 c4 10             	add    $0x10,%esp
c000993f:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/file.c:251
	if (io_buf == NULL) {
c0009942:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0009946:	75 1a                	jne    c0009962 <file_write+0x68>
/work/x86_os_my/fs/file.c:252
		printk("file_write: sys_malloc for io_buf failed\n");
c0009948:	83 ec 0c             	sub    $0xc,%esp
c000994b:	68 88 e5 00 c0       	push   $0xc000e588
c0009950:	e8 b9 d1 ff ff       	call   c0006b0e <printk>
c0009955:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:253
		return -1;
c0009958:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000995d:	e9 2a 07 00 00       	jmp    c000a08c <file_write+0x792>
/work/x86_os_my/fs/file.c:255
	}
	uint32_t* all_blocks = (uint32_t*)sys_malloc(BLOCK_SIZE + 48);	  // 用来记录文件所有的块地址【560/4=160】
c0009962:	83 ec 0c             	sub    $0xc,%esp
c0009965:	68 30 02 00 00       	push   $0x230
c000996a:	e8 ed 93 ff ff       	call   c0002d5c <sys_malloc>
c000996f:	83 c4 10             	add    $0x10,%esp
c0009972:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/file.c:256
	if (all_blocks == NULL) {
c0009975:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0009979:	75 1a                	jne    c0009995 <file_write+0x9b>
/work/x86_os_my/fs/file.c:257
		printk("file_write: sys_malloc for all_blocks failed\n");
c000997b:	83 ec 0c             	sub    $0xc,%esp
c000997e:	68 b4 e5 00 c0       	push   $0xc000e5b4
c0009983:	e8 86 d1 ff ff       	call   c0006b0e <printk>
c0009988:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:258
		return -1;
c000998b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009990:	e9 f7 06 00 00       	jmp    c000a08c <file_write+0x792>
/work/x86_os_my/fs/file.c:261
	}

	int32_t block_lba = -1;			// 块地址
c0009995:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
/work/x86_os_my/fs/file.c:262
	uint32_t block_bitmap_idx = 0;	// block_bitmap中的索引,做为参数传给bitmap_sync
c000999c:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
/work/x86_os_my/fs/file.c:267
	int32_t indirect_block_table;	// 一级间接表地址
	uint32_t block_idx;				// 块索引

	/* 判断文件是否是第一次写，如果是，先为其分配一个块 */
	if (file->fd_inode->i_sectors[0] == 0) {
c00099a3:	8b 45 08             	mov    0x8(%ebp),%eax
c00099a6:	8b 40 08             	mov    0x8(%eax),%eax
c00099a9:	8b 40 10             	mov    0x10(%eax),%eax
c00099ac:	85 c0                	test   %eax,%eax
c00099ae:	0f 85 8d 00 00 00    	jne    c0009a41 <file_write+0x147>
/work/x86_os_my/fs/file.c:268
		block_lba = block_bitmap_alloc(cur_part);
c00099b4:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c00099b9:	83 ec 0c             	sub    $0xc,%esp
c00099bc:	50                   	push   %eax
c00099bd:	e8 40 fa ff ff       	call   c0009402 <block_bitmap_alloc>
c00099c2:	83 c4 10             	add    $0x10,%esp
c00099c5:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/file.c:269
		if (block_lba == -1) {
c00099c8:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
c00099cc:	75 1a                	jne    c00099e8 <file_write+0xee>
/work/x86_os_my/fs/file.c:270
			printk("file_write: block_bitmap_alloc failed\n");
c00099ce:	83 ec 0c             	sub    $0xc,%esp
c00099d1:	68 e4 e5 00 c0       	push   $0xc000e5e4
c00099d6:	e8 33 d1 ff ff       	call   c0006b0e <printk>
c00099db:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:271
			return -1;
c00099de:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c00099e3:	e9 a4 06 00 00       	jmp    c000a08c <file_write+0x792>
/work/x86_os_my/fs/file.c:273
		}
		file->fd_inode->i_sectors[0] = block_lba;
c00099e8:	8b 45 08             	mov    0x8(%ebp),%eax
c00099eb:	8b 40 08             	mov    0x8(%eax),%eax
c00099ee:	8b 55 d8             	mov    -0x28(%ebp),%edx
c00099f1:	89 50 10             	mov    %edx,0x10(%eax)
/work/x86_os_my/fs/file.c:276

		/* 每分配一个块就将位图同步到硬盘 */
		block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
c00099f4:	8b 55 d8             	mov    -0x28(%ebp),%edx
c00099f7:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c00099fc:	8b 40 1c             	mov    0x1c(%eax),%eax
c00099ff:	8b 40 28             	mov    0x28(%eax),%eax
c0009a02:	29 c2                	sub    %eax,%edx
c0009a04:	89 d0                	mov    %edx,%eax
c0009a06:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/fs/file.c:277
		ASSERT(block_bitmap_idx != 0);
c0009a09:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0009a0d:	75 1c                	jne    c0009a2b <file_write+0x131>
/work/x86_os_my/fs/file.c:277 (discriminator 1)
c0009a0f:	68 0b e6 00 c0       	push   $0xc000e60b
c0009a14:	68 50 e8 00 c0       	push   $0xc000e850
c0009a19:	68 15 01 00 00       	push   $0x115
c0009a1e:	68 21 e6 00 c0       	push   $0xc000e621
c0009a23:	e8 89 89 ff ff       	call   c00023b1 <panic_spin>
c0009a28:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:278
		bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c0009a2b:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0009a30:	83 ec 04             	sub    $0x4,%esp
c0009a33:	6a 01                	push   $0x1
c0009a35:	ff 75 d4             	pushl  -0x2c(%ebp)
c0009a38:	50                   	push   %eax
c0009a39:	e8 16 fa ff ff       	call   c0009454 <bitmap_sync>
c0009a3e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:282
	}

	/* 写入count个字节前，该文件已占用的块数 */
	uint32_t file_has_used_blocks = file->fd_inode->i_size / BLOCK_SIZE + 1;
c0009a41:	8b 45 08             	mov    0x8(%ebp),%eax
c0009a44:	8b 40 08             	mov    0x8(%eax),%eax
c0009a47:	8b 40 04             	mov    0x4(%eax),%eax
c0009a4a:	c1 e8 09             	shr    $0x9,%eax
c0009a4d:	83 c0 01             	add    $0x1,%eax
c0009a50:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/fs/file.c:284
	/* 写入count个字节后，该文件将占用的块数 */
	uint32_t file_will_use_blocks = (file->fd_inode->i_size + count) / BLOCK_SIZE + 1;
c0009a53:	8b 45 08             	mov    0x8(%ebp),%eax
c0009a56:	8b 40 08             	mov    0x8(%eax),%eax
c0009a59:	8b 50 04             	mov    0x4(%eax),%edx
c0009a5c:	8b 45 10             	mov    0x10(%ebp),%eax
c0009a5f:	01 d0                	add    %edx,%eax
c0009a61:	c1 e8 09             	shr    $0x9,%eax
c0009a64:	83 c0 01             	add    $0x1,%eax
c0009a67:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/fs/file.c:285
	ASSERT(file_will_use_blocks <= 140);
c0009a6a:	81 7d cc 8c 00 00 00 	cmpl   $0x8c,-0x34(%ebp)
c0009a71:	76 1c                	jbe    c0009a8f <file_write+0x195>
/work/x86_os_my/fs/file.c:285 (discriminator 1)
c0009a73:	68 2b e6 00 c0       	push   $0xc000e62b
c0009a78:	68 50 e8 00 c0       	push   $0xc000e850
c0009a7d:	68 1d 01 00 00       	push   $0x11d
c0009a82:	68 21 e6 00 c0       	push   $0xc000e621
c0009a87:	e8 25 89 ff ff       	call   c00023b1 <panic_spin>
c0009a8c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:287
	/* 通过此增量判断是否需要分配扇区，若增量为0，表示原扇区够用 */
	uint32_t add_blocks = file_will_use_blocks - file_has_used_blocks;
c0009a8f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0009a92:	2b 45 d0             	sub    -0x30(%ebp),%eax
c0009a95:	89 45 c8             	mov    %eax,-0x38(%ebp)
/work/x86_os_my/fs/file.c:294
	/* 将文件所有块地址收集到all_blocks，后面都统一在all_blocks中获取要写入的扇区地址
	 * 没有新增的数据块时，只更新 all_blocks
	 * 需要新增数据块时，除了 all_blocks 还要更新 file->fd_inode->i_sectors[x]
	 */
	/* 在同一数据块（扇区）内写入数据，不涉及到分配新扇区 */
	if (add_blocks == 0) {
c0009a98:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0009a9c:	0f 85 8c 00 00 00    	jne    c0009b2e <file_write+0x234>
/work/x86_os_my/fs/file.c:295
		if (file_has_used_blocks <= 12 ) {	// 文件数据量将在12块之内
c0009aa2:	83 7d d0 0c          	cmpl   $0xc,-0x30(%ebp)
c0009aa6:	77 2e                	ja     c0009ad6 <file_write+0x1dc>
/work/x86_os_my/fs/file.c:296
			block_idx = file_has_used_blocks - 1;	// 指向最后一个已占用的数据块（扇区）
c0009aa8:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0009aab:	83 e8 01             	sub    $0x1,%eax
c0009aae:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:297
			all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];
c0009ab1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009ab4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0009abb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009abe:	01 c2                	add    %eax,%edx
c0009ac0:	8b 45 08             	mov    0x8(%ebp),%eax
c0009ac3:	8b 40 08             	mov    0x8(%eax),%eax
c0009ac6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0009ac9:	83 c1 04             	add    $0x4,%ecx
c0009acc:	8b 04 88             	mov    (%eax,%ecx,4),%eax
c0009acf:	89 02                	mov    %eax,(%edx)
c0009ad1:	e9 4e 04 00 00       	jmp    c0009f24 <file_write+0x62a>
/work/x86_os_my/fs/file.c:300
		} else {
			/* 未写入新数据之前已经占用了间接块,需要将间接块地址读进来 */
			ASSERT(file->fd_inode->i_sectors[12] != 0);	//一级间接表存在
c0009ad6:	8b 45 08             	mov    0x8(%ebp),%eax
c0009ad9:	8b 40 08             	mov    0x8(%eax),%eax
c0009adc:	8b 40 40             	mov    0x40(%eax),%eax
c0009adf:	85 c0                	test   %eax,%eax
c0009ae1:	75 1c                	jne    c0009aff <file_write+0x205>
/work/x86_os_my/fs/file.c:300 (discriminator 1)
c0009ae3:	68 48 e6 00 c0       	push   $0xc000e648
c0009ae8:	68 50 e8 00 c0       	push   $0xc000e850
c0009aed:	68 2c 01 00 00       	push   $0x12c
c0009af2:	68 21 e6 00 c0       	push   $0xc000e621
c0009af7:	e8 b5 88 ff ff       	call   c00023b1 <panic_spin>
c0009afc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:301
			indirect_block_table = file->fd_inode->i_sectors[12];
c0009aff:	8b 45 08             	mov    0x8(%ebp),%eax
c0009b02:	8b 40 08             	mov    0x8(%eax),%eax
c0009b05:	8b 40 40             	mov    0x40(%eax),%eax
c0009b08:	89 45 c4             	mov    %eax,-0x3c(%ebp)
/work/x86_os_my/fs/file.c:302
			ide_read(cur_part->my_disk, indirect_block_table, all_blocks + 12, 1);	//读出整个一级间接表512字节（128个间接块的地址）
c0009b0b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009b0e:	8d 48 30             	lea    0x30(%eax),%ecx
c0009b11:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0009b14:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0009b19:	8b 40 08             	mov    0x8(%eax),%eax
c0009b1c:	6a 01                	push   $0x1
c0009b1e:	51                   	push   %ecx
c0009b1f:	52                   	push   %edx
c0009b20:	50                   	push   %eax
c0009b21:	e8 6f c5 ff ff       	call   c0006095 <ide_read>
c0009b26:	83 c4 10             	add    $0x10,%esp
c0009b29:	e9 f6 03 00 00       	jmp    c0009f24 <file_write+0x62a>
/work/x86_os_my/fs/file.c:308
		}
	} else {
	/* 若有增量，便涉及到分配新数据块（扇区），以及是否分配一级间接块表。
	 * 分三种情况处理： */
		/* 第一种情况：12个直接块够用*/
		if (file_will_use_blocks <= 12 ) {
c0009b2e:	83 7d cc 0c          	cmpl   $0xc,-0x34(%ebp)
c0009b32:	0f 87 2b 01 00 00    	ja     c0009c63 <file_write+0x369>
/work/x86_os_my/fs/file.c:310
			/* 将有剩余空间的可继续用的数据块（扇区）地址写入all_blocks */
			block_idx = file_has_used_blocks - 1;	// 指向最后一个已占用的数据块（扇区）
c0009b38:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0009b3b:	83 e8 01             	sub    $0x1,%eax
c0009b3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:311
			ASSERT(file->fd_inode->i_sectors[block_idx] != 0);
c0009b41:	8b 45 08             	mov    0x8(%ebp),%eax
c0009b44:	8b 40 08             	mov    0x8(%eax),%eax
c0009b47:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0009b4a:	83 c2 04             	add    $0x4,%edx
c0009b4d:	8b 04 90             	mov    (%eax,%edx,4),%eax
c0009b50:	85 c0                	test   %eax,%eax
c0009b52:	75 1c                	jne    c0009b70 <file_write+0x276>
/work/x86_os_my/fs/file.c:311 (discriminator 1)
c0009b54:	68 6c e6 00 c0       	push   $0xc000e66c
c0009b59:	68 50 e8 00 c0       	push   $0xc000e850
c0009b5e:	68 37 01 00 00       	push   $0x137
c0009b63:	68 21 e6 00 c0       	push   $0xc000e621
c0009b68:	e8 44 88 ff ff       	call   c00023b1 <panic_spin>
c0009b6d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:312
			all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];
c0009b70:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009b73:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0009b7a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009b7d:	01 c2                	add    %eax,%edx
c0009b7f:	8b 45 08             	mov    0x8(%ebp),%eax
c0009b82:	8b 40 08             	mov    0x8(%eax),%eax
c0009b85:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0009b88:	83 c1 04             	add    $0x4,%ecx
c0009b8b:	8b 04 88             	mov    (%eax,%ecx,4),%eax
c0009b8e:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/file.c:315

			/* 将未来要用的新数据块（扇区）分配好后写入all_blocks */
			block_idx = file_has_used_blocks;		// 指向第一个要分配的新数据块（扇区）
c0009b90:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0009b93:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:316
			while (block_idx < file_will_use_blocks) {
c0009b96:	e9 b7 00 00 00       	jmp    c0009c52 <file_write+0x358>
/work/x86_os_my/fs/file.c:317
				block_lba = block_bitmap_alloc(cur_part);
c0009b9b:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0009ba0:	83 ec 0c             	sub    $0xc,%esp
c0009ba3:	50                   	push   %eax
c0009ba4:	e8 59 f8 ff ff       	call   c0009402 <block_bitmap_alloc>
c0009ba9:	83 c4 10             	add    $0x10,%esp
c0009bac:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/file.c:318
				if (block_lba == -1) {
c0009baf:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
c0009bb3:	75 1a                	jne    c0009bcf <file_write+0x2d5>
/work/x86_os_my/fs/file.c:319
					printk("file_write: block_bitmap_alloc for situation 1 failed\n");
c0009bb5:	83 ec 0c             	sub    $0xc,%esp
c0009bb8:	68 98 e6 00 c0       	push   $0xc000e698
c0009bbd:	e8 4c cf ff ff       	call   c0006b0e <printk>
c0009bc2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:320
					return -1;
c0009bc5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009bca:	e9 bd 04 00 00       	jmp    c000a08c <file_write+0x792>
/work/x86_os_my/fs/file.c:324
				}

				/* 写文件时，数据块未使用时肯定有 i_sectors[x]==0。因为文件删除时，会把i_sectors[x]里的数据块地址清0 */
				ASSERT(file->fd_inode->i_sectors[block_idx] == 0);	// 确保尚未分配扇区地址
c0009bcf:	8b 45 08             	mov    0x8(%ebp),%eax
c0009bd2:	8b 40 08             	mov    0x8(%eax),%eax
c0009bd5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0009bd8:	83 c2 04             	add    $0x4,%edx
c0009bdb:	8b 04 90             	mov    (%eax,%edx,4),%eax
c0009bde:	85 c0                	test   %eax,%eax
c0009be0:	74 1c                	je     c0009bfe <file_write+0x304>
/work/x86_os_my/fs/file.c:324 (discriminator 1)
c0009be2:	68 d0 e6 00 c0       	push   $0xc000e6d0
c0009be7:	68 50 e8 00 c0       	push   $0xc000e850
c0009bec:	68 44 01 00 00       	push   $0x144
c0009bf1:	68 21 e6 00 c0       	push   $0xc000e621
c0009bf6:	e8 b6 87 ff ff       	call   c00023b1 <panic_spin>
c0009bfb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:325
				file->fd_inode->i_sectors[block_idx] = all_blocks[block_idx] = block_lba;		//处理直接块
c0009bfe:	8b 45 08             	mov    0x8(%ebp),%eax
c0009c01:	8b 50 08             	mov    0x8(%eax),%edx
c0009c04:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009c07:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
c0009c0e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009c11:	01 c8                	add    %ecx,%eax
c0009c13:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0009c16:	89 08                	mov    %ecx,(%eax)
c0009c18:	8b 00                	mov    (%eax),%eax
c0009c1a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0009c1d:	83 c1 04             	add    $0x4,%ecx
c0009c20:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
/work/x86_os_my/fs/file.c:328

				/* 每分配一个块就将位图同步到硬盘 */
				block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
c0009c23:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0009c26:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0009c2b:	8b 40 1c             	mov    0x1c(%eax),%eax
c0009c2e:	8b 40 28             	mov    0x28(%eax),%eax
c0009c31:	29 c2                	sub    %eax,%edx
c0009c33:	89 d0                	mov    %edx,%eax
c0009c35:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/fs/file.c:330
				// 这回怎么没有这句了：ASSERT(block_bitmap_idx != 0);
				bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c0009c38:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0009c3d:	83 ec 04             	sub    $0x4,%esp
c0009c40:	6a 01                	push   $0x1
c0009c42:	ff 75 d4             	pushl  -0x2c(%ebp)
c0009c45:	50                   	push   %eax
c0009c46:	e8 09 f8 ff ff       	call   c0009454 <bitmap_sync>
c0009c4b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:332

				block_idx++;   // 下一个分配的新扇区
c0009c4e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/file.c:316
			ASSERT(file->fd_inode->i_sectors[block_idx] != 0);
			all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];

			/* 将未来要用的新数据块（扇区）分配好后写入all_blocks */
			block_idx = file_has_used_blocks;		// 指向第一个要分配的新数据块（扇区）
			while (block_idx < file_will_use_blocks) {
c0009c52:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009c55:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c0009c58:	0f 82 3d ff ff ff    	jb     c0009b9b <file_write+0x2a1>
c0009c5e:	e9 c1 02 00 00       	jmp    c0009f24 <file_write+0x62a>
/work/x86_os_my/fs/file.c:334
				// 这回怎么没有这句了：ASSERT(block_bitmap_idx != 0);
				bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);

				block_idx++;   // 下一个分配的新扇区
			}
		} else if (file_has_used_blocks <= 12 && file_will_use_blocks > 12) {
c0009c63:	83 7d d0 0c          	cmpl   $0xc,-0x30(%ebp)
c0009c67:	0f 87 af 01 00 00    	ja     c0009e1c <file_write+0x522>
/work/x86_os_my/fs/file.c:334 (discriminator 1)
c0009c6d:	83 7d cc 0c          	cmpl   $0xc,-0x34(%ebp)
c0009c71:	0f 86 a5 01 00 00    	jbe    c0009e1c <file_write+0x522>
/work/x86_os_my/fs/file.c:338
		/* 第二种情况：旧数据在12个直接块内，新数据将使用间接块【可能也使用一些直接块】 */

			/* 先将有剩余空间的可继续用的扇区地址收集到all_blocks */
			block_idx = file_has_used_blocks - 1;	// 指向最后一个已占用的数据块（扇区）
c0009c77:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0009c7a:	83 e8 01             	sub    $0x1,%eax
c0009c7d:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:339
			all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];						//处理直接块
c0009c80:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009c83:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0009c8a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009c8d:	01 c2                	add    %eax,%edx
c0009c8f:	8b 45 08             	mov    0x8(%ebp),%eax
c0009c92:	8b 40 08             	mov    0x8(%eax),%eax
c0009c95:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0009c98:	83 c1 04             	add    $0x4,%ecx
c0009c9b:	8b 04 88             	mov    (%eax,%ecx,4),%eax
c0009c9e:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/file.c:342

			/* 创建一级间接块表 */
			block_lba = block_bitmap_alloc(cur_part);
c0009ca0:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0009ca5:	83 ec 0c             	sub    $0xc,%esp
c0009ca8:	50                   	push   %eax
c0009ca9:	e8 54 f7 ff ff       	call   c0009402 <block_bitmap_alloc>
c0009cae:	83 c4 10             	add    $0x10,%esp
c0009cb1:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/file.c:343
			if (block_lba == -1) {
c0009cb4:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
c0009cb8:	75 1a                	jne    c0009cd4 <file_write+0x3da>
/work/x86_os_my/fs/file.c:344
				printk("file_write: block_bitmap_alloc for situation 2 failed\n");
c0009cba:	83 ec 0c             	sub    $0xc,%esp
c0009cbd:	68 fc e6 00 c0       	push   $0xc000e6fc
c0009cc2:	e8 47 ce ff ff       	call   c0006b0e <printk>
c0009cc7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:345
				return -1;
c0009cca:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009ccf:	e9 b8 03 00 00       	jmp    c000a08c <file_write+0x792>
/work/x86_os_my/fs/file.c:347
			}
			ASSERT(file->fd_inode->i_sectors[12] == 0);  // 一级间接块表未建立
c0009cd4:	8b 45 08             	mov    0x8(%ebp),%eax
c0009cd7:	8b 40 08             	mov    0x8(%eax),%eax
c0009cda:	8b 40 40             	mov    0x40(%eax),%eax
c0009cdd:	85 c0                	test   %eax,%eax
c0009cdf:	74 1c                	je     c0009cfd <file_write+0x403>
/work/x86_os_my/fs/file.c:347 (discriminator 1)
c0009ce1:	68 34 e7 00 c0       	push   $0xc000e734
c0009ce6:	68 50 e8 00 c0       	push   $0xc000e850
c0009ceb:	68 5b 01 00 00       	push   $0x15b
c0009cf0:	68 21 e6 00 c0       	push   $0xc000e621
c0009cf5:	e8 b7 86 ff ff       	call   c00023b1 <panic_spin>
c0009cfa:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:348
			indirect_block_table = file->fd_inode->i_sectors[12] = block_lba;	// 一级间接块索引表建立了！
c0009cfd:	8b 45 08             	mov    0x8(%ebp),%eax
c0009d00:	8b 40 08             	mov    0x8(%eax),%eax
c0009d03:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0009d06:	89 50 40             	mov    %edx,0x40(%eax)
c0009d09:	8b 40 40             	mov    0x40(%eax),%eax
c0009d0c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
/work/x86_os_my/fs/file.c:351
			//这里怎么没有同步一级间接块表占用的数据块到硬盘？？不是：每分配一个块就将位图同步到硬盘 吗？

			block_idx = file_has_used_blocks;		// 指向第一个要分配的新数据块（扇区）
c0009d0f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0009d12:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:352
			while (block_idx < file_will_use_blocks) {
c0009d15:	e9 d3 00 00 00       	jmp    c0009ded <file_write+0x4f3>
/work/x86_os_my/fs/file.c:353
				block_lba = block_bitmap_alloc(cur_part);
c0009d1a:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0009d1f:	83 ec 0c             	sub    $0xc,%esp
c0009d22:	50                   	push   %eax
c0009d23:	e8 da f6 ff ff       	call   c0009402 <block_bitmap_alloc>
c0009d28:	83 c4 10             	add    $0x10,%esp
c0009d2b:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/file.c:354
				if (block_lba == -1) {
c0009d2e:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
c0009d32:	75 1a                	jne    c0009d4e <file_write+0x454>
/work/x86_os_my/fs/file.c:355
					printk("file_write: block_bitmap_alloc for situation 2 failed\n");
c0009d34:	83 ec 0c             	sub    $0xc,%esp
c0009d37:	68 fc e6 00 c0       	push   $0xc000e6fc
c0009d3c:	e8 cd cd ff ff       	call   c0006b0e <printk>
c0009d41:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:356
					return -1;
c0009d44:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009d49:	e9 3e 03 00 00       	jmp    c000a08c <file_write+0x792>
/work/x86_os_my/fs/file.c:359
				}

				if (block_idx < 12) {	// 新创建的数据块仍然是直接块！
c0009d4e:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
c0009d52:	77 56                	ja     c0009daa <file_write+0x4b0>
/work/x86_os_my/fs/file.c:360
					ASSERT(file->fd_inode->i_sectors[block_idx] == 0);
c0009d54:	8b 45 08             	mov    0x8(%ebp),%eax
c0009d57:	8b 40 08             	mov    0x8(%eax),%eax
c0009d5a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0009d5d:	83 c2 04             	add    $0x4,%edx
c0009d60:	8b 04 90             	mov    (%eax,%edx,4),%eax
c0009d63:	85 c0                	test   %eax,%eax
c0009d65:	74 1c                	je     c0009d83 <file_write+0x489>
/work/x86_os_my/fs/file.c:360 (discriminator 1)
c0009d67:	68 d0 e6 00 c0       	push   $0xc000e6d0
c0009d6c:	68 50 e8 00 c0       	push   $0xc000e850
c0009d71:	68 68 01 00 00       	push   $0x168
c0009d76:	68 21 e6 00 c0       	push   $0xc000e621
c0009d7b:	e8 31 86 ff ff       	call   c00023b1 <panic_spin>
c0009d80:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:361
					file->fd_inode->i_sectors[block_idx] = all_blocks[block_idx] = block_lba;	//处理直接块
c0009d83:	8b 45 08             	mov    0x8(%ebp),%eax
c0009d86:	8b 50 08             	mov    0x8(%eax),%edx
c0009d89:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009d8c:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
c0009d93:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009d96:	01 c8                	add    %ecx,%eax
c0009d98:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0009d9b:	89 08                	mov    %ecx,(%eax)
c0009d9d:	8b 00                	mov    (%eax),%eax
c0009d9f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0009da2:	83 c1 04             	add    $0x4,%ecx
c0009da5:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
c0009da8:	eb 14                	jmp    c0009dbe <file_write+0x4c4>
/work/x86_os_my/fs/file.c:363
				} else {	// 新创建的数据块，是间接块。间接块只写入到all_block数组中,待全部分配完成后一次性同步到硬盘
					all_blocks[block_idx] = block_lba;											//处理间接块
c0009daa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009dad:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0009db4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009db7:	01 c2                	add    %eax,%edx
c0009db9:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0009dbc:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/file.c:367
				}

				/* 每分配一个块就将位图同步到硬盘 */
				block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
c0009dbe:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0009dc1:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0009dc6:	8b 40 1c             	mov    0x1c(%eax),%eax
c0009dc9:	8b 40 28             	mov    0x28(%eax),%eax
c0009dcc:	29 c2                	sub    %eax,%edx
c0009dce:	89 d0                	mov    %edx,%eax
c0009dd0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/fs/file.c:368
				bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c0009dd3:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0009dd8:	83 ec 04             	sub    $0x4,%esp
c0009ddb:	6a 01                	push   $0x1
c0009ddd:	ff 75 d4             	pushl  -0x2c(%ebp)
c0009de0:	50                   	push   %eax
c0009de1:	e8 6e f6 ff ff       	call   c0009454 <bitmap_sync>
c0009de6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:370

				block_idx++;   // 下一个新扇区
c0009de9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/file.c:352
			ASSERT(file->fd_inode->i_sectors[12] == 0);  // 一级间接块表未建立
			indirect_block_table = file->fd_inode->i_sectors[12] = block_lba;	// 一级间接块索引表建立了！
			//这里怎么没有同步一级间接块表占用的数据块到硬盘？？不是：每分配一个块就将位图同步到硬盘 吗？

			block_idx = file_has_used_blocks;		// 指向第一个要分配的新数据块（扇区）
			while (block_idx < file_will_use_blocks) {
c0009ded:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009df0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c0009df3:	0f 82 21 ff ff ff    	jb     c0009d1a <file_write+0x420>
/work/x86_os_my/fs/file.c:372
				block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
				bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);

				block_idx++;   // 下一个新扇区
			}
			ide_write(cur_part->my_disk, indirect_block_table, all_blocks + 12, 1);	// 整个一级间接块表的内容，同步到硬盘
c0009df9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009dfc:	8d 48 30             	lea    0x30(%eax),%ecx
c0009dff:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0009e02:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0009e07:	8b 40 08             	mov    0x8(%eax),%eax
c0009e0a:	6a 01                	push   $0x1
c0009e0c:	51                   	push   %ecx
c0009e0d:	52                   	push   %edx
c0009e0e:	50                   	push   %eax
c0009e0f:	e8 f5 c3 ff ff       	call   c0006209 <ide_write>
c0009e14:	83 c4 10             	add    $0x10,%esp
c0009e17:	e9 08 01 00 00       	jmp    c0009f24 <file_write+0x62a>
/work/x86_os_my/fs/file.c:373
		} else if (file_has_used_blocks > 12) {
c0009e1c:	83 7d d0 0c          	cmpl   $0xc,-0x30(%ebp)
c0009e20:	0f 86 fe 00 00 00    	jbe    c0009f24 <file_write+0x62a>
/work/x86_os_my/fs/file.c:375
		/* 第三种情况：新数据使用间接块*/
			ASSERT(file->fd_inode->i_sectors[12] != 0);				// 一级间接块表已建立
c0009e26:	8b 45 08             	mov    0x8(%ebp),%eax
c0009e29:	8b 40 08             	mov    0x8(%eax),%eax
c0009e2c:	8b 40 40             	mov    0x40(%eax),%eax
c0009e2f:	85 c0                	test   %eax,%eax
c0009e31:	75 1c                	jne    c0009e4f <file_write+0x555>
/work/x86_os_my/fs/file.c:375 (discriminator 1)
c0009e33:	68 48 e6 00 c0       	push   $0xc000e648
c0009e38:	68 50 e8 00 c0       	push   $0xc000e850
c0009e3d:	68 77 01 00 00       	push   $0x177
c0009e42:	68 21 e6 00 c0       	push   $0xc000e621
c0009e47:	e8 65 85 ff ff       	call   c00023b1 <panic_spin>
c0009e4c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:376
			indirect_block_table = file->fd_inode->i_sectors[12];	// 一级间接表地址
c0009e4f:	8b 45 08             	mov    0x8(%ebp),%eax
c0009e52:	8b 40 08             	mov    0x8(%eax),%eax
c0009e55:	8b 40 40             	mov    0x40(%eax),%eax
c0009e58:	89 45 c4             	mov    %eax,-0x3c(%ebp)
/work/x86_os_my/fs/file.c:379

			/* 已使用的间接块也将被读入all_blocks，无须单独收录 */
			ide_read(cur_part->my_disk, indirect_block_table, all_blocks + 12, 1);	// 获取所有间接块地址
c0009e5b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009e5e:	8d 48 30             	lea    0x30(%eax),%ecx
c0009e61:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0009e64:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0009e69:	8b 40 08             	mov    0x8(%eax),%eax
c0009e6c:	6a 01                	push   $0x1
c0009e6e:	51                   	push   %ecx
c0009e6f:	52                   	push   %edx
c0009e70:	50                   	push   %eax
c0009e71:	e8 1f c2 ff ff       	call   c0006095 <ide_read>
c0009e76:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:381

			block_idx = file_has_used_blocks;		// 指向第一个要分配的新数据块（扇区）
c0009e79:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0009e7c:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:382
			while (block_idx < file_will_use_blocks) {
c0009e7f:	eb 79                	jmp    c0009efa <file_write+0x600>
/work/x86_os_my/fs/file.c:383
				block_lba = block_bitmap_alloc(cur_part);
c0009e81:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0009e86:	83 ec 0c             	sub    $0xc,%esp
c0009e89:	50                   	push   %eax
c0009e8a:	e8 73 f5 ff ff       	call   c0009402 <block_bitmap_alloc>
c0009e8f:	83 c4 10             	add    $0x10,%esp
c0009e92:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/file.c:384
				if (block_lba == -1) {
c0009e95:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
c0009e99:	75 1a                	jne    c0009eb5 <file_write+0x5bb>
/work/x86_os_my/fs/file.c:385
					printk("file_write: block_bitmap_alloc for situation 3 failed\n");
c0009e9b:	83 ec 0c             	sub    $0xc,%esp
c0009e9e:	68 58 e7 00 c0       	push   $0xc000e758
c0009ea3:	e8 66 cc ff ff       	call   c0006b0e <printk>
c0009ea8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:386
					return -1;
c0009eab:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0009eb0:	e9 d7 01 00 00       	jmp    c000a08c <file_write+0x792>
/work/x86_os_my/fs/file.c:388
				}
				all_blocks[block_idx++] = block_lba;											//处理间接块
c0009eb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009eb8:	8d 50 01             	lea    0x1(%eax),%edx
c0009ebb:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0009ebe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0009ec5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009ec8:	01 c2                	add    %eax,%edx
c0009eca:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0009ecd:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/file.c:391

				/* 每分配一个块就将位图同步到硬盘 */
				block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
c0009ecf:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0009ed2:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0009ed7:	8b 40 1c             	mov    0x1c(%eax),%eax
c0009eda:	8b 40 28             	mov    0x28(%eax),%eax
c0009edd:	29 c2                	sub    %eax,%edx
c0009edf:	89 d0                	mov    %edx,%eax
c0009ee1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/fs/file.c:392
				bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c0009ee4:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0009ee9:	83 ec 04             	sub    $0x4,%esp
c0009eec:	6a 01                	push   $0x1
c0009eee:	ff 75 d4             	pushl  -0x2c(%ebp)
c0009ef1:	50                   	push   %eax
c0009ef2:	e8 5d f5 ff ff       	call   c0009454 <bitmap_sync>
c0009ef7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:382

			/* 已使用的间接块也将被读入all_blocks，无须单独收录 */
			ide_read(cur_part->my_disk, indirect_block_table, all_blocks + 12, 1);	// 获取所有间接块地址

			block_idx = file_has_used_blocks;		// 指向第一个要分配的新数据块（扇区）
			while (block_idx < file_will_use_blocks) {
c0009efa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0009efd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c0009f00:	0f 82 7b ff ff ff    	jb     c0009e81 <file_write+0x587>
/work/x86_os_my/fs/file.c:394

				/* 每分配一个块就将位图同步到硬盘 */
				block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
				bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
			}
			ide_write(cur_part->my_disk, indirect_block_table, all_blocks + 12, 1);	// 整个一级间接块表的内容，同步到硬盘
c0009f06:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009f09:	8d 48 30             	lea    0x30(%eax),%ecx
c0009f0c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0009f0f:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0009f14:	8b 40 08             	mov    0x8(%eax),%eax
c0009f17:	6a 01                	push   $0x1
c0009f19:	51                   	push   %ecx
c0009f1a:	52                   	push   %edx
c0009f1b:	50                   	push   %eax
c0009f1c:	e8 e8 c2 ff ff       	call   c0006209 <ide_write>
c0009f21:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:400
		}
	}//块地址已经收集到all_blocks中


	/* 写数据 */
	const uint8_t* src = buf;		// 用src指向buf中待写入的数据
c0009f24:	8b 45 0c             	mov    0xc(%ebp),%eax
c0009f27:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:401
	uint32_t bytes_written = 0;		// 已写入数据的大小
c0009f2a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/file.c:407
	uint32_t sec_idx;				// 扇区索引
	uint32_t sec_lba;				// 扇区地址
	uint32_t sec_off_bytes;			// 扇区内字节偏移量
	uint32_t sec_left_bytes;		// 扇区内剩余字节量
	uint32_t chunk_size;			// 每次写入硬盘的数据块大小
	uint32_t size_left = count;		// 未写入数据的大小
c0009f31:	8b 45 10             	mov    0x10(%ebp),%eax
c0009f34:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/file.c:408
	bool first_write_block = true;	// 数据块（扇区）含有剩余空间的标识
c0009f37:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
/work/x86_os_my/fs/file.c:409
	file->fd_pos = file->fd_inode->i_size - 1;	// 文件读写指针fd_pos为"文件大小-1"
c0009f3e:	8b 45 08             	mov    0x8(%ebp),%eax
c0009f41:	8b 40 08             	mov    0x8(%eax),%eax
c0009f44:	8b 40 04             	mov    0x4(%eax),%eax
c0009f47:	8d 50 ff             	lea    -0x1(%eax),%edx
c0009f4a:	8b 45 08             	mov    0x8(%ebp),%eax
c0009f4d:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/fs/file.c:410
	while (bytes_written < count) {	// 直到写完所有数据
c0009f4f:	e9 f2 00 00 00       	jmp    c000a046 <file_write+0x74c>
/work/x86_os_my/fs/file.c:411
		memset(io_buf, 0, BLOCK_SIZE);
c0009f54:	83 ec 04             	sub    $0x4,%esp
c0009f57:	68 00 02 00 00       	push   $0x200
c0009f5c:	6a 00                	push   $0x0
c0009f5e:	ff 75 e0             	pushl  -0x20(%ebp)
c0009f61:	e8 ed 98 ff ff       	call   c0003853 <memset>
c0009f66:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:412
		sec_idx = file->fd_inode->i_size / BLOCK_SIZE;	// 文件已占用的最后一个数据块
c0009f69:	8b 45 08             	mov    0x8(%ebp),%eax
c0009f6c:	8b 40 08             	mov    0x8(%eax),%eax
c0009f6f:	8b 40 04             	mov    0x4(%eax),%eax
c0009f72:	c1 e8 09             	shr    $0x9,%eax
c0009f75:	89 45 c0             	mov    %eax,-0x40(%ebp)
/work/x86_os_my/fs/file.c:413
		sec_lba = all_blocks[sec_idx];
c0009f78:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0009f7b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0009f82:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0009f85:	01 d0                	add    %edx,%eax
c0009f87:	8b 00                	mov    (%eax),%eax
c0009f89:	89 45 bc             	mov    %eax,-0x44(%ebp)
/work/x86_os_my/fs/file.c:414
		sec_off_bytes = file->fd_inode->i_size % BLOCK_SIZE;
c0009f8c:	8b 45 08             	mov    0x8(%ebp),%eax
c0009f8f:	8b 40 08             	mov    0x8(%eax),%eax
c0009f92:	8b 40 04             	mov    0x4(%eax),%eax
c0009f95:	25 ff 01 00 00       	and    $0x1ff,%eax
c0009f9a:	89 45 b8             	mov    %eax,-0x48(%ebp)
/work/x86_os_my/fs/file.c:415
		sec_left_bytes = BLOCK_SIZE - sec_off_bytes;
c0009f9d:	b8 00 02 00 00       	mov    $0x200,%eax
c0009fa2:	2b 45 b8             	sub    -0x48(%ebp),%eax
c0009fa5:	89 45 b4             	mov    %eax,-0x4c(%ebp)
/work/x86_os_my/fs/file.c:418

		/* 判断此次写入硬盘的数据大小 */
		chunk_size = size_left < sec_left_bytes ? size_left : sec_left_bytes;
c0009fa8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0009fab:	39 45 b4             	cmp    %eax,-0x4c(%ebp)
c0009fae:	0f 46 45 b4          	cmovbe -0x4c(%ebp),%eax
c0009fb2:	89 45 b0             	mov    %eax,-0x50(%ebp)
/work/x86_os_my/fs/file.c:419
		if (first_write_block) {
c0009fb5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0009fb9:	74 20                	je     c0009fdb <file_write+0x6e1>
/work/x86_os_my/fs/file.c:420
			ide_read(cur_part->my_disk, sec_lba, io_buf, 1);	//先读出
c0009fbb:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0009fc0:	8b 40 08             	mov    0x8(%eax),%eax
c0009fc3:	6a 01                	push   $0x1
c0009fc5:	ff 75 e0             	pushl  -0x20(%ebp)
c0009fc8:	ff 75 bc             	pushl  -0x44(%ebp)
c0009fcb:	50                   	push   %eax
c0009fcc:	e8 c4 c0 ff ff       	call   c0006095 <ide_read>
c0009fd1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:421
			first_write_block = false;
c0009fd4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
/work/x86_os_my/fs/file.c:423
		}
		memcpy(io_buf + sec_off_bytes, src, chunk_size);		//再写入
c0009fdb:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0009fde:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0009fe1:	01 d0                	add    %edx,%eax
c0009fe3:	83 ec 04             	sub    $0x4,%esp
c0009fe6:	ff 75 b0             	pushl  -0x50(%ebp)
c0009fe9:	ff 75 f0             	pushl  -0x10(%ebp)
c0009fec:	50                   	push   %eax
c0009fed:	e8 b3 98 ff ff       	call   c00038a5 <memcpy>
c0009ff2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:424
		ide_write(cur_part->my_disk, sec_lba, io_buf, 1);
c0009ff5:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c0009ffa:	8b 40 08             	mov    0x8(%eax),%eax
c0009ffd:	6a 01                	push   $0x1
c0009fff:	ff 75 e0             	pushl  -0x20(%ebp)
c000a002:	ff 75 bc             	pushl  -0x44(%ebp)
c000a005:	50                   	push   %eax
c000a006:	e8 fe c1 ff ff       	call   c0006209 <ide_write>
c000a00b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:427
		//printk("file write at lba 0x%x\n", sec_lba);

		src += chunk_size;
c000a00e:	8b 45 b0             	mov    -0x50(%ebp),%eax
c000a011:	01 45 f0             	add    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:428
		file->fd_inode->i_size += chunk_size;	// 文件大小
c000a014:	8b 45 08             	mov    0x8(%ebp),%eax
c000a017:	8b 40 08             	mov    0x8(%eax),%eax
c000a01a:	8b 55 08             	mov    0x8(%ebp),%edx
c000a01d:	8b 52 08             	mov    0x8(%edx),%edx
c000a020:	8b 4a 04             	mov    0x4(%edx),%ecx
c000a023:	8b 55 b0             	mov    -0x50(%ebp),%edx
c000a026:	01 ca                	add    %ecx,%edx
c000a028:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/file.c:429
		file->fd_pos += chunk_size;				// 文件指针位置
c000a02b:	8b 45 08             	mov    0x8(%ebp),%eax
c000a02e:	8b 10                	mov    (%eax),%edx
c000a030:	8b 45 b0             	mov    -0x50(%ebp),%eax
c000a033:	01 c2                	add    %eax,%edx
c000a035:	8b 45 08             	mov    0x8(%ebp),%eax
c000a038:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/fs/file.c:430
		bytes_written += chunk_size;
c000a03a:	8b 45 b0             	mov    -0x50(%ebp),%eax
c000a03d:	01 45 ec             	add    %eax,-0x14(%ebp)
/work/x86_os_my/fs/file.c:431
		size_left -= chunk_size;
c000a040:	8b 45 b0             	mov    -0x50(%ebp),%eax
c000a043:	29 45 e8             	sub    %eax,-0x18(%ebp)
/work/x86_os_my/fs/file.c:410
	uint32_t sec_left_bytes;		// 扇区内剩余字节量
	uint32_t chunk_size;			// 每次写入硬盘的数据块大小
	uint32_t size_left = count;		// 未写入数据的大小
	bool first_write_block = true;	// 数据块（扇区）含有剩余空间的标识
	file->fd_pos = file->fd_inode->i_size - 1;	// 文件读写指针fd_pos为"文件大小-1"
	while (bytes_written < count) {	// 直到写完所有数据
c000a046:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000a049:	3b 45 10             	cmp    0x10(%ebp),%eax
c000a04c:	0f 82 02 ff ff ff    	jb     c0009f54 <file_write+0x65a>
/work/x86_os_my/fs/file.c:433
		file->fd_inode->i_size += chunk_size;	// 文件大小
		file->fd_pos += chunk_size;				// 文件指针位置
		bytes_written += chunk_size;
		size_left -= chunk_size;
	}
	inode_sync(cur_part, file->fd_inode, io_buf);	// 更新文件对应的inode结构，io_buf只是个缓冲区
c000a052:	8b 45 08             	mov    0x8(%ebp),%eax
c000a055:	8b 50 08             	mov    0x8(%eax),%edx
c000a058:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c000a05d:	83 ec 04             	sub    $0x4,%esp
c000a060:	ff 75 e0             	pushl  -0x20(%ebp)
c000a063:	52                   	push   %edx
c000a064:	50                   	push   %eax
c000a065:	e8 05 ec ff ff       	call   c0008c6f <inode_sync>
c000a06a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:434
	sys_free(all_blocks);
c000a06d:	83 ec 0c             	sub    $0xc,%esp
c000a070:	ff 75 dc             	pushl  -0x24(%ebp)
c000a073:	e8 11 93 ff ff       	call   c0003389 <sys_free>
c000a078:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:435
	sys_free(io_buf);
c000a07b:	83 ec 0c             	sub    $0xc,%esp
c000a07e:	ff 75 e0             	pushl  -0x20(%ebp)
c000a081:	e8 03 93 ff ff       	call   c0003389 <sys_free>
c000a086:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:436
	return bytes_written;
c000a089:	8b 45 ec             	mov    -0x14(%ebp),%eax
/work/x86_os_my/fs/file.c:437
}
c000a08c:	c9                   	leave  
c000a08d:	c3                   	ret    

c000a08e <file_read>:
file_read():
/work/x86_os_my/fs/file.c:441


/* 从文件file中读取count个字节写入buf, 返回读出的字节数,若到文件尾则返回-1 */
int32_t file_read(struct file* file, void* buf, uint32_t count) {
c000a08e:	55                   	push   %ebp
c000a08f:	89 e5                	mov    %esp,%ebp
c000a091:	83 ec 48             	sub    $0x48,%esp
/work/x86_os_my/fs/file.c:442
	uint8_t* buf_dst = (uint8_t*)buf;
c000a094:	8b 45 0c             	mov    0xc(%ebp),%eax
c000a097:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:443
	uint32_t size = count, size_left = size;
c000a09a:	8b 45 10             	mov    0x10(%ebp),%eax
c000a09d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c000a0a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a0a3:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/file.c:446

	/* 若要读取的字节数超过了文件可读的剩余量, 就用剩余量做为待读取的字节数 */
	if ((file->fd_pos + count) > file->fd_inode->i_size) {
c000a0a6:	8b 45 08             	mov    0x8(%ebp),%eax
c000a0a9:	8b 10                	mov    (%eax),%edx
c000a0ab:	8b 45 10             	mov    0x10(%ebp),%eax
c000a0ae:	01 c2                	add    %eax,%edx
c000a0b0:	8b 45 08             	mov    0x8(%ebp),%eax
c000a0b3:	8b 40 08             	mov    0x8(%eax),%eax
c000a0b6:	8b 40 04             	mov    0x4(%eax),%eax
c000a0b9:	39 c2                	cmp    %eax,%edx
c000a0bb:	76 2b                	jbe    c000a0e8 <file_read+0x5a>
/work/x86_os_my/fs/file.c:447
		size = file->fd_inode->i_size - file->fd_pos;
c000a0bd:	8b 45 08             	mov    0x8(%ebp),%eax
c000a0c0:	8b 40 08             	mov    0x8(%eax),%eax
c000a0c3:	8b 50 04             	mov    0x4(%eax),%edx
c000a0c6:	8b 45 08             	mov    0x8(%ebp),%eax
c000a0c9:	8b 00                	mov    (%eax),%eax
c000a0cb:	29 c2                	sub    %eax,%edx
c000a0cd:	89 d0                	mov    %edx,%eax
c000a0cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/file.c:448
		size_left = size;
c000a0d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a0d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/file.c:449
		if (size == 0) {	// 若到文件尾则返回-1
c000a0d8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c000a0dc:	75 0a                	jne    c000a0e8 <file_read+0x5a>
/work/x86_os_my/fs/file.c:450
			return -1;
c000a0de:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000a0e3:	e9 4d 03 00 00       	jmp    c000a435 <file_read+0x3a7>
/work/x86_os_my/fs/file.c:454
		}
	}

	uint8_t* io_buf = sys_malloc(BLOCK_SIZE);
c000a0e8:	83 ec 0c             	sub    $0xc,%esp
c000a0eb:	68 00 02 00 00       	push   $0x200
c000a0f0:	e8 67 8c ff ff       	call   c0002d5c <sys_malloc>
c000a0f5:	83 c4 10             	add    $0x10,%esp
c000a0f8:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/file.c:455
	if (io_buf == NULL) {
c000a0fb:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c000a0ff:	75 10                	jne    c000a111 <file_read+0x83>
/work/x86_os_my/fs/file.c:456
		printk("file_read: sys_malloc for io_buf failed\n");
c000a101:	83 ec 0c             	sub    $0xc,%esp
c000a104:	68 90 e7 00 c0       	push   $0xc000e790
c000a109:	e8 00 ca ff ff       	call   c0006b0e <printk>
c000a10e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:458
	}
	uint32_t* all_blocks = (uint32_t*)sys_malloc(BLOCK_SIZE + 48);		// 用来记录文件所有的块地址【140*4=560字节】
c000a111:	83 ec 0c             	sub    $0xc,%esp
c000a114:	68 30 02 00 00       	push   $0x230
c000a119:	e8 3e 8c ff ff       	call   c0002d5c <sys_malloc>
c000a11e:	83 c4 10             	add    $0x10,%esp
c000a121:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/file.c:459
	if (all_blocks == NULL) {
c000a124:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c000a128:	75 1a                	jne    c000a144 <file_read+0xb6>
/work/x86_os_my/fs/file.c:460
		printk("file_read: sys_malloc for all_blocks failed\n");
c000a12a:	83 ec 0c             	sub    $0xc,%esp
c000a12d:	68 bc e7 00 c0       	push   $0xc000e7bc
c000a132:	e8 d7 c9 ff ff       	call   c0006b0e <printk>
c000a137:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:461
		return -1;
c000a13a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000a13f:	e9 f1 02 00 00       	jmp    c000a435 <file_read+0x3a7>
/work/x86_os_my/fs/file.c:464
	}

	uint32_t block_read_start_idx = file->fd_pos / BLOCK_SIZE;			// 数据所在块的起始地址
c000a144:	8b 45 08             	mov    0x8(%ebp),%eax
c000a147:	8b 00                	mov    (%eax),%eax
c000a149:	c1 e8 09             	shr    $0x9,%eax
c000a14c:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/file.c:465
	uint32_t block_read_end_idx = (file->fd_pos + size) / BLOCK_SIZE;	// 数据所在块的终止地址
c000a14f:	8b 45 08             	mov    0x8(%ebp),%eax
c000a152:	8b 10                	mov    (%eax),%edx
c000a154:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a157:	01 d0                	add    %edx,%eax
c000a159:	c1 e8 09             	shr    $0x9,%eax
c000a15c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/fs/file.c:466
	uint32_t read_blocks = block_read_start_idx - block_read_end_idx;	// 如增量为0,表示数据在同一扇区
c000a15f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000a162:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c000a165:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/fs/file.c:467
	ASSERT(block_read_start_idx < 139 && block_read_end_idx < 139);
c000a168:	81 7d d8 8a 00 00 00 	cmpl   $0x8a,-0x28(%ebp)
c000a16f:	77 09                	ja     c000a17a <file_read+0xec>
/work/x86_os_my/fs/file.c:467 (discriminator 1)
c000a171:	81 7d d4 8a 00 00 00 	cmpl   $0x8a,-0x2c(%ebp)
c000a178:	76 1c                	jbe    c000a196 <file_read+0x108>
/work/x86_os_my/fs/file.c:467 (discriminator 3)
c000a17a:	68 ec e7 00 c0       	push   $0xc000e7ec
c000a17f:	68 5c e8 00 c0       	push   $0xc000e85c
c000a184:	68 d3 01 00 00       	push   $0x1d3
c000a189:	68 21 e6 00 c0       	push   $0xc000e621
c000a18e:	e8 1e 82 ff ff       	call   c00023b1 <panic_spin>
c000a193:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:474
	int32_t indirect_block_table;	// 获取一级间接表地址
	uint32_t block_idx;				// 获取待读的块地址

	/* 以下开始构建all_blocks块地址数组，专门存储用到的块地址 */
	// 在同一扇区内读数据,不涉及到跨扇区读取
	if (read_blocks == 0) {
c000a196:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c000a19a:	0f 85 84 00 00 00    	jne    c000a224 <file_read+0x196>
/work/x86_os_my/fs/file.c:475
		ASSERT(block_read_end_idx == block_read_start_idx);
c000a1a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000a1a3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
c000a1a6:	74 1c                	je     c000a1c4 <file_read+0x136>
/work/x86_os_my/fs/file.c:475 (discriminator 1)
c000a1a8:	68 24 e8 00 c0       	push   $0xc000e824
c000a1ad:	68 5c e8 00 c0       	push   $0xc000e85c
c000a1b2:	68 db 01 00 00       	push   $0x1db
c000a1b7:	68 21 e6 00 c0       	push   $0xc000e621
c000a1bc:	e8 f0 81 ff ff       	call   c00023b1 <panic_spin>
c000a1c1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:476
		if (block_read_end_idx < 12 ) {	// 待读的数据在12个直接块之内
c000a1c4:	83 7d d4 0b          	cmpl   $0xb,-0x2c(%ebp)
c000a1c8:	77 2b                	ja     c000a1f5 <file_read+0x167>
/work/x86_os_my/fs/file.c:477
			block_idx = block_read_end_idx;
c000a1ca:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000a1cd:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/file.c:478
			all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];
c000a1d0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000a1d3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000a1da:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a1dd:	01 c2                	add    %eax,%edx
c000a1df:	8b 45 08             	mov    0x8(%ebp),%eax
c000a1e2:	8b 40 08             	mov    0x8(%eax),%eax
c000a1e5:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c000a1e8:	83 c1 04             	add    $0x4,%ecx
c000a1eb:	8b 04 88             	mov    (%eax,%ecx,4),%eax
c000a1ee:	89 02                	mov    %eax,(%edx)
c000a1f0:	e9 5c 01 00 00       	jmp    c000a351 <file_read+0x2c3>
/work/x86_os_my/fs/file.c:480
		} else {	// 若用到了一级间接块表,需要将表中间接块读进来
			indirect_block_table = file->fd_inode->i_sectors[12];
c000a1f5:	8b 45 08             	mov    0x8(%ebp),%eax
c000a1f8:	8b 40 08             	mov    0x8(%eax),%eax
c000a1fb:	8b 40 40             	mov    0x40(%eax),%eax
c000a1fe:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/fs/file.c:481
			ide_read(cur_part->my_disk, indirect_block_table, all_blocks + 12, 1);
c000a201:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a204:	8d 48 30             	lea    0x30(%eax),%ecx
c000a207:	8b 55 cc             	mov    -0x34(%ebp),%edx
c000a20a:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c000a20f:	8b 40 08             	mov    0x8(%eax),%eax
c000a212:	6a 01                	push   $0x1
c000a214:	51                   	push   %ecx
c000a215:	52                   	push   %edx
c000a216:	50                   	push   %eax
c000a217:	e8 79 be ff ff       	call   c0006095 <ide_read>
c000a21c:	83 c4 10             	add    $0x10,%esp
c000a21f:	e9 2d 01 00 00       	jmp    c000a351 <file_read+0x2c3>
/work/x86_os_my/fs/file.c:486
		}
	} else {
	// 若要读多个数据块（扇区）
		/* 第一种情况: 起始块和终止块属于直接块*/
		if (block_read_end_idx < 12 ) {	  // 数据结束所在的块属于直接块
c000a224:	83 7d d4 0b          	cmpl   $0xb,-0x2c(%ebp)
c000a228:	77 39                	ja     c000a263 <file_read+0x1d5>
/work/x86_os_my/fs/file.c:487
			block_idx = block_read_start_idx;
c000a22a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000a22d:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/file.c:488
			while (block_idx <= block_read_end_idx) {
c000a230:	eb 24                	jmp    c000a256 <file_read+0x1c8>
/work/x86_os_my/fs/file.c:489
				all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];
c000a232:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000a235:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000a23c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a23f:	01 c2                	add    %eax,%edx
c000a241:	8b 45 08             	mov    0x8(%ebp),%eax
c000a244:	8b 40 08             	mov    0x8(%eax),%eax
c000a247:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c000a24a:	83 c1 04             	add    $0x4,%ecx
c000a24d:	8b 04 88             	mov    (%eax,%ecx,4),%eax
c000a250:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/file.c:490
				block_idx++;
c000a252:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
/work/x86_os_my/fs/file.c:488
	} else {
	// 若要读多个数据块（扇区）
		/* 第一种情况: 起始块和终止块属于直接块*/
		if (block_read_end_idx < 12 ) {	  // 数据结束所在的块属于直接块
			block_idx = block_read_start_idx;
			while (block_idx <= block_read_end_idx) {
c000a256:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000a259:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c000a25c:	76 d4                	jbe    c000a232 <file_read+0x1a4>
c000a25e:	e9 ee 00 00 00       	jmp    c000a351 <file_read+0x2c3>
/work/x86_os_my/fs/file.c:492
				all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];
				block_idx++;
			}
		} else if (block_read_start_idx < 12 && block_read_end_idx >= 12) {
c000a263:	83 7d d8 0b          	cmpl   $0xb,-0x28(%ebp)
c000a267:	0f 87 91 00 00 00    	ja     c000a2fe <file_read+0x270>
/work/x86_os_my/fs/file.c:492 (discriminator 1)
c000a26d:	83 7d d4 0b          	cmpl   $0xb,-0x2c(%ebp)
c000a271:	0f 86 87 00 00 00    	jbe    c000a2fe <file_read+0x270>
/work/x86_os_my/fs/file.c:495
		/* 第二种情况: 待读入的数据跨越直接块和间接块两类*/
			/* 先将直接块地址写入all_blocks */
			block_idx = block_read_start_idx;
c000a277:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000a27a:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/file.c:496
			while (block_idx < 12) {
c000a27d:	eb 24                	jmp    c000a2a3 <file_read+0x215>
/work/x86_os_my/fs/file.c:497
				all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];
c000a27f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000a282:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000a289:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a28c:	01 c2                	add    %eax,%edx
c000a28e:	8b 45 08             	mov    0x8(%ebp),%eax
c000a291:	8b 40 08             	mov    0x8(%eax),%eax
c000a294:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c000a297:	83 c1 04             	add    $0x4,%ecx
c000a29a:	8b 04 88             	mov    (%eax,%ecx,4),%eax
c000a29d:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/file.c:498
				block_idx++;
c000a29f:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
/work/x86_os_my/fs/file.c:496
			}
		} else if (block_read_start_idx < 12 && block_read_end_idx >= 12) {
		/* 第二种情况: 待读入的数据跨越直接块和间接块两类*/
			/* 先将直接块地址写入all_blocks */
			block_idx = block_read_start_idx;
			while (block_idx < 12) {
c000a2a3:	83 7d e8 0b          	cmpl   $0xb,-0x18(%ebp)
c000a2a7:	76 d6                	jbe    c000a27f <file_read+0x1f1>
/work/x86_os_my/fs/file.c:500
				all_blocks[block_idx] = file->fd_inode->i_sectors[block_idx];
				block_idx++;
			}
			ASSERT(file->fd_inode->i_sectors[12] != 0);	    // 确保已经分配了一级间接块表
c000a2a9:	8b 45 08             	mov    0x8(%ebp),%eax
c000a2ac:	8b 40 08             	mov    0x8(%eax),%eax
c000a2af:	8b 40 40             	mov    0x40(%eax),%eax
c000a2b2:	85 c0                	test   %eax,%eax
c000a2b4:	75 1c                	jne    c000a2d2 <file_read+0x244>
/work/x86_os_my/fs/file.c:500 (discriminator 1)
c000a2b6:	68 48 e6 00 c0       	push   $0xc000e648
c000a2bb:	68 5c e8 00 c0       	push   $0xc000e85c
c000a2c0:	68 f4 01 00 00       	push   $0x1f4
c000a2c5:	68 21 e6 00 c0       	push   $0xc000e621
c000a2ca:	e8 e2 80 ff ff       	call   c00023b1 <panic_spin>
c000a2cf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:503

			/* 再将间接块地址写入all_blocks */
			indirect_block_table = file->fd_inode->i_sectors[12];
c000a2d2:	8b 45 08             	mov    0x8(%ebp),%eax
c000a2d5:	8b 40 08             	mov    0x8(%eax),%eax
c000a2d8:	8b 40 40             	mov    0x40(%eax),%eax
c000a2db:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/fs/file.c:504
			ide_read(cur_part->my_disk, indirect_block_table, all_blocks + 12, 1);	      // 将一级间接块表读进来写入到第13个块的位置之后
c000a2de:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a2e1:	8d 48 30             	lea    0x30(%eax),%ecx
c000a2e4:	8b 55 cc             	mov    -0x34(%ebp),%edx
c000a2e7:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c000a2ec:	8b 40 08             	mov    0x8(%eax),%eax
c000a2ef:	6a 01                	push   $0x1
c000a2f1:	51                   	push   %ecx
c000a2f2:	52                   	push   %edx
c000a2f3:	50                   	push   %eax
c000a2f4:	e8 9c bd ff ff       	call   c0006095 <ide_read>
c000a2f9:	83 c4 10             	add    $0x10,%esp
c000a2fc:	eb 53                	jmp    c000a351 <file_read+0x2c3>
/work/x86_os_my/fs/file.c:507
		} else {
		/* 第三种情况: 数据在间接块中*/
			ASSERT(file->fd_inode->i_sectors[12] != 0);	    // 确保已经分配了一级间接块表
c000a2fe:	8b 45 08             	mov    0x8(%ebp),%eax
c000a301:	8b 40 08             	mov    0x8(%eax),%eax
c000a304:	8b 40 40             	mov    0x40(%eax),%eax
c000a307:	85 c0                	test   %eax,%eax
c000a309:	75 1c                	jne    c000a327 <file_read+0x299>
/work/x86_os_my/fs/file.c:507 (discriminator 1)
c000a30b:	68 48 e6 00 c0       	push   $0xc000e648
c000a310:	68 5c e8 00 c0       	push   $0xc000e85c
c000a315:	68 fb 01 00 00       	push   $0x1fb
c000a31a:	68 21 e6 00 c0       	push   $0xc000e621
c000a31f:	e8 8d 80 ff ff       	call   c00023b1 <panic_spin>
c000a324:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:508
			indirect_block_table = file->fd_inode->i_sectors[12];	      // 获取一级间接表地址
c000a327:	8b 45 08             	mov    0x8(%ebp),%eax
c000a32a:	8b 40 08             	mov    0x8(%eax),%eax
c000a32d:	8b 40 40             	mov    0x40(%eax),%eax
c000a330:	89 45 cc             	mov    %eax,-0x34(%ebp)
/work/x86_os_my/fs/file.c:509
			ide_read(cur_part->my_disk, indirect_block_table, all_blocks + 12, 1);	      // 将一级间接块表读进来写入到第13个块的位置之后
c000a333:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a336:	8d 48 30             	lea    0x30(%eax),%ecx
c000a339:	8b 55 cc             	mov    -0x34(%ebp),%edx
c000a33c:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c000a341:	8b 40 08             	mov    0x8(%eax),%eax
c000a344:	6a 01                	push   $0x1
c000a346:	51                   	push   %ecx
c000a347:	52                   	push   %edx
c000a348:	50                   	push   %eax
c000a349:	e8 47 bd ff ff       	call   c0006095 <ide_read>
c000a34e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:516
	}//块地址已经收集到all_blocks中


	/* 读数据 */
	uint32_t sec_idx, sec_lba, sec_off_bytes, sec_left_bytes, chunk_size;
	uint32_t bytes_read = 0;
c000a351:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
/work/x86_os_my/fs/file.c:517
	while (bytes_read < size) {	// 直到读完为止
c000a358:	e9 ad 00 00 00       	jmp    c000a40a <file_read+0x37c>
/work/x86_os_my/fs/file.c:518
		sec_idx = file->fd_pos / BLOCK_SIZE;
c000a35d:	8b 45 08             	mov    0x8(%ebp),%eax
c000a360:	8b 00                	mov    (%eax),%eax
c000a362:	c1 e8 09             	shr    $0x9,%eax
c000a365:	89 45 c8             	mov    %eax,-0x38(%ebp)
/work/x86_os_my/fs/file.c:519
		sec_lba = all_blocks[sec_idx];
c000a368:	8b 45 c8             	mov    -0x38(%ebp),%eax
c000a36b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000a372:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a375:	01 d0                	add    %edx,%eax
c000a377:	8b 00                	mov    (%eax),%eax
c000a379:	89 45 c4             	mov    %eax,-0x3c(%ebp)
/work/x86_os_my/fs/file.c:520
		sec_off_bytes = file->fd_pos % BLOCK_SIZE;
c000a37c:	8b 45 08             	mov    0x8(%ebp),%eax
c000a37f:	8b 00                	mov    (%eax),%eax
c000a381:	25 ff 01 00 00       	and    $0x1ff,%eax
c000a386:	89 45 c0             	mov    %eax,-0x40(%ebp)
/work/x86_os_my/fs/file.c:521
		sec_left_bytes = BLOCK_SIZE - sec_off_bytes;
c000a389:	b8 00 02 00 00       	mov    $0x200,%eax
c000a38e:	2b 45 c0             	sub    -0x40(%ebp),%eax
c000a391:	89 45 bc             	mov    %eax,-0x44(%ebp)
/work/x86_os_my/fs/file.c:522
		chunk_size = size_left < sec_left_bytes ? size_left : sec_left_bytes;	// 待读入的数据大小
c000a394:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000a397:	39 45 bc             	cmp    %eax,-0x44(%ebp)
c000a39a:	0f 46 45 bc          	cmovbe -0x44(%ebp),%eax
c000a39e:	89 45 b8             	mov    %eax,-0x48(%ebp)
/work/x86_os_my/fs/file.c:524

		memset(io_buf, 0, BLOCK_SIZE);
c000a3a1:	83 ec 04             	sub    $0x4,%esp
c000a3a4:	68 00 02 00 00       	push   $0x200
c000a3a9:	6a 00                	push   $0x0
c000a3ab:	ff 75 e0             	pushl  -0x20(%ebp)
c000a3ae:	e8 a0 94 ff ff       	call   c0003853 <memset>
c000a3b3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:525
		ide_read(cur_part->my_disk, sec_lba, io_buf, 1);
c000a3b6:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c000a3bb:	8b 40 08             	mov    0x8(%eax),%eax
c000a3be:	6a 01                	push   $0x1
c000a3c0:	ff 75 e0             	pushl  -0x20(%ebp)
c000a3c3:	ff 75 c4             	pushl  -0x3c(%ebp)
c000a3c6:	50                   	push   %eax
c000a3c7:	e8 c9 bc ff ff       	call   c0006095 <ide_read>
c000a3cc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:526
		memcpy(buf_dst, io_buf + sec_off_bytes, chunk_size);
c000a3cf:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000a3d2:	8b 45 c0             	mov    -0x40(%ebp),%eax
c000a3d5:	01 d0                	add    %edx,%eax
c000a3d7:	83 ec 04             	sub    $0x4,%esp
c000a3da:	ff 75 b8             	pushl  -0x48(%ebp)
c000a3dd:	50                   	push   %eax
c000a3de:	ff 75 f4             	pushl  -0xc(%ebp)
c000a3e1:	e8 bf 94 ff ff       	call   c00038a5 <memcpy>
c000a3e6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:528

		buf_dst += chunk_size;
c000a3e9:	8b 45 b8             	mov    -0x48(%ebp),%eax
c000a3ec:	01 45 f4             	add    %eax,-0xc(%ebp)
/work/x86_os_my/fs/file.c:529
		file->fd_pos += chunk_size;
c000a3ef:	8b 45 08             	mov    0x8(%ebp),%eax
c000a3f2:	8b 10                	mov    (%eax),%edx
c000a3f4:	8b 45 b8             	mov    -0x48(%ebp),%eax
c000a3f7:	01 c2                	add    %eax,%edx
c000a3f9:	8b 45 08             	mov    0x8(%ebp),%eax
c000a3fc:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/fs/file.c:530
		bytes_read += chunk_size;
c000a3fe:	8b 45 b8             	mov    -0x48(%ebp),%eax
c000a401:	01 45 e4             	add    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/file.c:531
		size_left -= chunk_size;
c000a404:	8b 45 b8             	mov    -0x48(%ebp),%eax
c000a407:	29 45 ec             	sub    %eax,-0x14(%ebp)
/work/x86_os_my/fs/file.c:517


	/* 读数据 */
	uint32_t sec_idx, sec_lba, sec_off_bytes, sec_left_bytes, chunk_size;
	uint32_t bytes_read = 0;
	while (bytes_read < size) {	// 直到读完为止
c000a40a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000a40d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c000a410:	0f 82 47 ff ff ff    	jb     c000a35d <file_read+0x2cf>
/work/x86_os_my/fs/file.c:533
		buf_dst += chunk_size;
		file->fd_pos += chunk_size;
		bytes_read += chunk_size;
		size_left -= chunk_size;
	}
	sys_free(all_blocks);
c000a416:	83 ec 0c             	sub    $0xc,%esp
c000a419:	ff 75 dc             	pushl  -0x24(%ebp)
c000a41c:	e8 68 8f ff ff       	call   c0003389 <sys_free>
c000a421:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:534
	sys_free(io_buf);
c000a424:	83 ec 0c             	sub    $0xc,%esp
c000a427:	ff 75 e0             	pushl  -0x20(%ebp)
c000a42a:	e8 5a 8f ff ff       	call   c0003389 <sys_free>
c000a42f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/file.c:535
	return bytes_read;
c000a432:	8b 45 e4             	mov    -0x1c(%ebp),%eax
/work/x86_os_my/fs/file.c:536
}
c000a435:	c9                   	leave  
c000a436:	c3                   	ret    

c000a437 <open_root_dir>:
open_root_dir():
/work/x86_os_my/fs/dir.c:17
#include "super_block.h"

struct dir root_dir;	// 根目录

/* 打开根目录 */
void open_root_dir(struct partition* part) {
c000a437:	55                   	push   %ebp
c000a438:	89 e5                	mov    %esp,%ebp
c000a43a:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/fs/dir.c:18
	root_dir.inode = inode_open(part, part->sb->root_inode_no);
c000a43d:	8b 45 08             	mov    0x8(%ebp),%eax
c000a440:	8b 40 1c             	mov    0x1c(%eax),%eax
c000a443:	8b 40 2c             	mov    0x2c(%eax),%eax
c000a446:	83 ec 08             	sub    $0x8,%esp
c000a449:	50                   	push   %eax
c000a44a:	ff 75 08             	pushl  0x8(%ebp)
c000a44d:	e8 44 e9 ff ff       	call   c0008d96 <inode_open>
c000a452:	83 c4 10             	add    $0x10,%esp
c000a455:	a3 60 31 01 c0       	mov    %eax,0xc0013160
/work/x86_os_my/fs/dir.c:19
	root_dir.dir_pos = 0;
c000a45a:	c7 05 64 31 01 c0 00 	movl   $0x0,0xc0013164
c000a461:	00 00 00 
/work/x86_os_my/fs/dir.c:20
}
c000a464:	90                   	nop
c000a465:	c9                   	leave  
c000a466:	c3                   	ret    

c000a467 <dir_open>:
dir_open():
/work/x86_os_my/fs/dir.c:23

/* 在分区part上打开i结点为inode_no的目录，并返回目录指针 */
struct dir* dir_open(struct partition* part, uint32_t inode_no) {
c000a467:	55                   	push   %ebp
c000a468:	89 e5                	mov    %esp,%ebp
c000a46a:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/dir.c:24
	struct dir* pdir = (struct dir*)sys_malloc(sizeof(struct dir));	//除根目录以外的其他目录，要分配内存
c000a46d:	83 ec 0c             	sub    $0xc,%esp
c000a470:	68 08 02 00 00       	push   $0x208
c000a475:	e8 e2 88 ff ff       	call   c0002d5c <sys_malloc>
c000a47a:	83 c4 10             	add    $0x10,%esp
c000a47d:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:25
	pdir->inode = inode_open(part, inode_no);
c000a480:	83 ec 08             	sub    $0x8,%esp
c000a483:	ff 75 0c             	pushl  0xc(%ebp)
c000a486:	ff 75 08             	pushl  0x8(%ebp)
c000a489:	e8 08 e9 ff ff       	call   c0008d96 <inode_open>
c000a48e:	83 c4 10             	add    $0x10,%esp
c000a491:	89 c2                	mov    %eax,%edx
c000a493:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000a496:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/fs/dir.c:26
	pdir->dir_pos = 0;
c000a498:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000a49b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
/work/x86_os_my/fs/dir.c:27
	return pdir;
c000a4a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/fs/dir.c:28
}
c000a4a5:	c9                   	leave  
c000a4a6:	c3                   	ret    

c000a4a7 <search_dir_entry>:
search_dir_entry():
/work/x86_os_my/fs/dir.c:32

/* 在part分区内的pdir目录内，寻找名为name的目录项，
 * 找到后返回true，并将其目录项存入dir_e；否则返回false */
bool search_dir_entry(struct partition* part, struct dir* pdir, const char* name, struct dir_entry* dir_e) {
c000a4a7:	55                   	push   %ebp
c000a4a8:	89 e5                	mov    %esp,%ebp
c000a4aa:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/fs/dir.c:34
	/* 1分配 */
	uint32_t block_cnt = 140;	 // 12个直接块+128个一级间接块 = 目录的inode管理的所有块 = 140块
c000a4ad:	c7 45 e8 8c 00 00 00 	movl   $0x8c,-0x18(%ebp)
/work/x86_os_my/fs/dir.c:39

	/* 12个直接块大小+128个间接块,共560字节（140个块，inode需要管理块的地址，每个4字节）
	注意: all_blocks 里面并没有一级间接表的地址，只有直接块+间接块的地址！
	用all_blocks检索inode管理的所有块地址 */
	uint32_t* all_blocks = (uint32_t*)sys_malloc(48 + 512);
c000a4b4:	83 ec 0c             	sub    $0xc,%esp
c000a4b7:	68 30 02 00 00       	push   $0x230
c000a4bc:	e8 9b 88 ff ff       	call   c0002d5c <sys_malloc>
c000a4c1:	83 c4 10             	add    $0x10,%esp
c000a4c4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/dir.c:40
	if (all_blocks == NULL) {
c000a4c7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c000a4cb:	75 1a                	jne    c000a4e7 <search_dir_entry+0x40>
/work/x86_os_my/fs/dir.c:41
		printk("search_dir_entry: sys_malloc for all_blocks failed");
c000a4cd:	83 ec 0c             	sub    $0xc,%esp
c000a4d0:	68 68 e8 00 c0       	push   $0xc000e868
c000a4d5:	e8 34 c6 ff ff       	call   c0006b0e <printk>
c000a4da:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:42
		return false;
c000a4dd:	b8 00 00 00 00       	mov    $0x0,%eax
c000a4e2:	e9 96 01 00 00       	jmp    c000a67d <search_dir_entry+0x1d6>
/work/x86_os_my/fs/dir.c:45
	}

	uint32_t block_idx = 0;
c000a4e7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:46
	while (block_idx < 12) {
c000a4ee:	eb 23                	jmp    c000a513 <search_dir_entry+0x6c>
/work/x86_os_my/fs/dir.c:47
		all_blocks[block_idx] = pdir->inode->i_sectors[block_idx];
c000a4f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000a4f3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000a4fa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000a4fd:	01 c2                	add    %eax,%edx
c000a4ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c000a502:	8b 00                	mov    (%eax),%eax
c000a504:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c000a507:	83 c1 04             	add    $0x4,%ecx
c000a50a:	8b 04 88             	mov    (%eax,%ecx,4),%eax
c000a50d:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/fs/dir.c:48
		block_idx++;
c000a50f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:46
		printk("search_dir_entry: sys_malloc for all_blocks failed");
		return false;
	}

	uint32_t block_idx = 0;
	while (block_idx < 12) {
c000a513:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
c000a517:	76 d7                	jbe    c000a4f0 <search_dir_entry+0x49>
/work/x86_os_my/fs/dir.c:50
		all_blocks[block_idx] = pdir->inode->i_sectors[block_idx];
		block_idx++;
	}
	block_idx = 0;
c000a519:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:52

	if (pdir->inode->i_sectors[12] != 0) {	// i_sectors[12] != 0代表含有一级间接块表
c000a520:	8b 45 0c             	mov    0xc(%ebp),%eax
c000a523:	8b 00                	mov    (%eax),%eax
c000a525:	8b 40 40             	mov    0x40(%eax),%eax
c000a528:	85 c0                	test   %eax,%eax
c000a52a:	74 21                	je     c000a54d <search_dir_entry+0xa6>
/work/x86_os_my/fs/dir.c:54
		//从硬盘的扇区地址i_sectors[12]处获取 1 扇区数据，就是 128 个间接块的地址，将其复制到 all_blocks+12 处【复制的是整个一级间接表】
		ide_read(part->my_disk, pdir->inode->i_sectors[12], all_blocks + 12, 1);
c000a52c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000a52f:	8d 48 30             	lea    0x30(%eax),%ecx
c000a532:	8b 45 0c             	mov    0xc(%ebp),%eax
c000a535:	8b 00                	mov    (%eax),%eax
c000a537:	8b 50 40             	mov    0x40(%eax),%edx
c000a53a:	8b 45 08             	mov    0x8(%ebp),%eax
c000a53d:	8b 40 08             	mov    0x8(%eax),%eax
c000a540:	6a 01                	push   $0x1
c000a542:	51                   	push   %ecx
c000a543:	52                   	push   %edx
c000a544:	50                   	push   %eax
c000a545:	e8 4b bb ff ff       	call   c0006095 <ide_read>
c000a54a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:62


	/* 2查找 */
	/* 写目录项的时候已保证目录项不跨扇区，这样读目录项时容易处理，只申请容纳1个扇区的内存
	 * 和处理inode_table不同，在往目录中写目录项的时候(sync_dir_entry)，避免了某个目录项 跨扇区的情况 */
	uint8_t* buf = (uint8_t*)sys_malloc(SECTOR_SIZE);
c000a54d:	83 ec 0c             	sub    $0xc,%esp
c000a550:	68 00 02 00 00       	push   $0x200
c000a555:	e8 02 88 ff ff       	call   c0002d5c <sys_malloc>
c000a55a:	83 c4 10             	add    $0x10,%esp
c000a55d:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/dir.c:63
	struct dir_entry* p_de = (struct dir_entry*)buf;		// p_de为指向目录项的指针,值为buf起始地址
c000a560:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000a563:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:64
	uint32_t dir_entry_size = part->sb->dir_entry_size;
c000a566:	8b 45 08             	mov    0x8(%ebp),%eax
c000a569:	8b 40 1c             	mov    0x1c(%eax),%eax
c000a56c:	8b 40 30             	mov    0x30(%eax),%eax
c000a56f:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:65
	uint32_t dir_entry_cnt = SECTOR_SIZE / dir_entry_size;	// 1扇区内可容纳的目录项个数
c000a572:	b8 00 02 00 00       	mov    $0x200,%eax
c000a577:	ba 00 00 00 00       	mov    $0x0,%edx
c000a57c:	f7 75 dc             	divl   -0x24(%ebp)
c000a57f:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/dir.c:67
	/* 在所有块中查找目录项 */
	while (block_idx < block_cnt) {
c000a582:	e9 c9 00 00 00       	jmp    c000a650 <search_dir_entry+0x1a9>
/work/x86_os_my/fs/dir.c:69
		/* 块地址为0时表示该块中无数据,继续在其它块中找 */
		if (all_blocks[block_idx] == 0) {
c000a587:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000a58a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000a591:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000a594:	01 d0                	add    %edx,%eax
c000a596:	8b 00                	mov    (%eax),%eax
c000a598:	85 c0                	test   %eax,%eax
c000a59a:	75 09                	jne    c000a5a5 <search_dir_entry+0xfe>
/work/x86_os_my/fs/dir.c:70
			block_idx++;
c000a59c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:71
			continue;
c000a5a0:	e9 ab 00 00 00       	jmp    c000a650 <search_dir_entry+0x1a9>
/work/x86_os_my/fs/dir.c:73
		}
		ide_read(part->my_disk, all_blocks[block_idx], buf, 1);
c000a5a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000a5a8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000a5af:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000a5b2:	01 d0                	add    %edx,%eax
c000a5b4:	8b 10                	mov    (%eax),%edx
c000a5b6:	8b 45 08             	mov    0x8(%ebp),%eax
c000a5b9:	8b 40 08             	mov    0x8(%eax),%eax
c000a5bc:	6a 01                	push   $0x1
c000a5be:	ff 75 e0             	pushl  -0x20(%ebp)
c000a5c1:	52                   	push   %edx
c000a5c2:	50                   	push   %eax
c000a5c3:	e8 cd ba ff ff       	call   c0006095 <ide_read>
c000a5c8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:75

		uint32_t dir_entry_idx = 0;
c000a5cb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:77
		/* 遍历扇区中所有目录项 */
		while (dir_entry_idx < dir_entry_cnt) {
c000a5d2:	eb 55                	jmp    c000a629 <search_dir_entry+0x182>
/work/x86_os_my/fs/dir.c:79
			/* 若找到了,就直接复制整个目录项 */
			if (!strcmp(p_de->filename, name)) {
c000a5d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a5d7:	83 ec 08             	sub    $0x8,%esp
c000a5da:	ff 75 10             	pushl  0x10(%ebp)
c000a5dd:	50                   	push   %eax
c000a5de:	e8 45 94 ff ff       	call   c0003a28 <strcmp>
c000a5e3:	83 c4 10             	add    $0x10,%esp
c000a5e6:	84 c0                	test   %al,%al
c000a5e8:	75 37                	jne    c000a621 <search_dir_entry+0x17a>
/work/x86_os_my/fs/dir.c:80
				memcpy(dir_e, p_de, dir_entry_size);
c000a5ea:	83 ec 04             	sub    $0x4,%esp
c000a5ed:	ff 75 dc             	pushl  -0x24(%ebp)
c000a5f0:	ff 75 f0             	pushl  -0x10(%ebp)
c000a5f3:	ff 75 14             	pushl  0x14(%ebp)
c000a5f6:	e8 aa 92 ff ff       	call   c00038a5 <memcpy>
c000a5fb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:81
				sys_free(buf);
c000a5fe:	83 ec 0c             	sub    $0xc,%esp
c000a601:	ff 75 e0             	pushl  -0x20(%ebp)
c000a604:	e8 80 8d ff ff       	call   c0003389 <sys_free>
c000a609:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:82
				sys_free(all_blocks);
c000a60c:	83 ec 0c             	sub    $0xc,%esp
c000a60f:	ff 75 e4             	pushl  -0x1c(%ebp)
c000a612:	e8 72 8d ff ff       	call   c0003389 <sys_free>
c000a617:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:83
				return true;
c000a61a:	b8 01 00 00 00       	mov    $0x1,%eax
c000a61f:	eb 5c                	jmp    c000a67d <search_dir_entry+0x1d6>
/work/x86_os_my/fs/dir.c:85
			}
			dir_entry_idx++;
c000a621:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:86
			p_de++;
c000a625:	83 45 f0 18          	addl   $0x18,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:77
		}
		ide_read(part->my_disk, all_blocks[block_idx], buf, 1);

		uint32_t dir_entry_idx = 0;
		/* 遍历扇区中所有目录项 */
		while (dir_entry_idx < dir_entry_cnt) {
c000a629:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000a62c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
c000a62f:	72 a3                	jb     c000a5d4 <search_dir_entry+0x12d>
/work/x86_os_my/fs/dir.c:89
			}
			dir_entry_idx++;
			p_de++;
		}

		block_idx++;					// 目录inode管理的下一个数据块（扇区）【目录里面是目录项，所以buf赋给p_de】
c000a631:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:90
		p_de = (struct dir_entry*)buf;	// p_de已经指向上一个扇区内，最后一个目录项，需要恢复p_de指向为buf
c000a635:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000a638:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:91
		memset(buf, 0, SECTOR_SIZE);	// 将buf清0,下次再用
c000a63b:	83 ec 04             	sub    $0x4,%esp
c000a63e:	68 00 02 00 00       	push   $0x200
c000a643:	6a 00                	push   $0x0
c000a645:	ff 75 e0             	pushl  -0x20(%ebp)
c000a648:	e8 06 92 ff ff       	call   c0003853 <memset>
c000a64d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:67
	uint8_t* buf = (uint8_t*)sys_malloc(SECTOR_SIZE);
	struct dir_entry* p_de = (struct dir_entry*)buf;		// p_de为指向目录项的指针,值为buf起始地址
	uint32_t dir_entry_size = part->sb->dir_entry_size;
	uint32_t dir_entry_cnt = SECTOR_SIZE / dir_entry_size;	// 1扇区内可容纳的目录项个数
	/* 在所有块中查找目录项 */
	while (block_idx < block_cnt) {
c000a650:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000a653:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c000a656:	0f 82 2b ff ff ff    	jb     c000a587 <search_dir_entry+0xe0>
/work/x86_os_my/fs/dir.c:93

		block_idx++;					// 目录inode管理的下一个数据块（扇区）【目录里面是目录项，所以buf赋给p_de】
		p_de = (struct dir_entry*)buf;	// p_de已经指向上一个扇区内，最后一个目录项，需要恢复p_de指向为buf
		memset(buf, 0, SECTOR_SIZE);	// 将buf清0,下次再用
	}
	sys_free(buf);
c000a65c:	83 ec 0c             	sub    $0xc,%esp
c000a65f:	ff 75 e0             	pushl  -0x20(%ebp)
c000a662:	e8 22 8d ff ff       	call   c0003389 <sys_free>
c000a667:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:94
	sys_free(all_blocks);
c000a66a:	83 ec 0c             	sub    $0xc,%esp
c000a66d:	ff 75 e4             	pushl  -0x1c(%ebp)
c000a670:	e8 14 8d ff ff       	call   c0003389 <sys_free>
c000a675:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:95
	return false;
c000a678:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/dir.c:96
}
c000a67d:	c9                   	leave  
c000a67e:	c3                   	ret    

c000a67f <dir_close>:
dir_close():
/work/x86_os_my/fs/dir.c:99

/* 关闭目录 */
void dir_close(struct dir* dir) {
c000a67f:	55                   	push   %ebp
c000a680:	89 e5                	mov    %esp,%ebp
c000a682:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/fs/dir.c:103
	/*************      根目录不能关闭     ***************
	*1 根目录自打开后就不应该关闭,否则还需要再次open_root_dir();
	*2 root_dir所在的内存是低端1M之内,并非在堆中,free会出问题 */
	if (dir == &root_dir) {
c000a685:	81 7d 08 60 31 01 c0 	cmpl   $0xc0013160,0x8(%ebp)
c000a68c:	74 21                	je     c000a6af <dir_close+0x30>
/work/x86_os_my/fs/dir.c:106
		return;
	}
	inode_close(dir->inode);
c000a68e:	8b 45 08             	mov    0x8(%ebp),%eax
c000a691:	8b 00                	mov    (%eax),%eax
c000a693:	83 ec 0c             	sub    $0xc,%esp
c000a696:	50                   	push   %eax
c000a697:	e8 40 e8 ff ff       	call   c0008edc <inode_close>
c000a69c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:107
	sys_free(dir);
c000a69f:	83 ec 0c             	sub    $0xc,%esp
c000a6a2:	ff 75 08             	pushl  0x8(%ebp)
c000a6a5:	e8 df 8c ff ff       	call   c0003389 <sys_free>
c000a6aa:	83 c4 10             	add    $0x10,%esp
c000a6ad:	eb 01                	jmp    c000a6b0 <dir_close+0x31>
/work/x86_os_my/fs/dir.c:104
void dir_close(struct dir* dir) {
	/*************      根目录不能关闭     ***************
	*1 根目录自打开后就不应该关闭,否则还需要再次open_root_dir();
	*2 root_dir所在的内存是低端1M之内,并非在堆中,free会出问题 */
	if (dir == &root_dir) {
		return;
c000a6af:	90                   	nop
/work/x86_os_my/fs/dir.c:108
	}
	inode_close(dir->inode);
	sys_free(dir);
}
c000a6b0:	c9                   	leave  
c000a6b1:	c3                   	ret    

c000a6b2 <create_dir_entry>:
create_dir_entry():
/work/x86_os_my/fs/dir.c:111

/* 在内存中初始化目录项p_de */
void create_dir_entry(char* filename, uint32_t inode_no, uint8_t file_type, struct dir_entry* p_de) {
c000a6b2:	55                   	push   %ebp
c000a6b3:	89 e5                	mov    %esp,%ebp
c000a6b5:	83 ec 18             	sub    $0x18,%esp
c000a6b8:	8b 45 10             	mov    0x10(%ebp),%eax
c000a6bb:	88 45 f4             	mov    %al,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:112
	ASSERT(strlen(filename) <=  MAX_FILE_NAME_LEN);
c000a6be:	83 ec 0c             	sub    $0xc,%esp
c000a6c1:	ff 75 08             	pushl  0x8(%ebp)
c000a6c4:	e8 14 93 ff ff       	call   c00039dd <strlen>
c000a6c9:	83 c4 10             	add    $0x10,%esp
c000a6cc:	83 f8 10             	cmp    $0x10,%eax
c000a6cf:	76 19                	jbe    c000a6ea <create_dir_entry+0x38>
/work/x86_os_my/fs/dir.c:112 (discriminator 1)
c000a6d1:	68 9c e8 00 c0       	push   $0xc000e89c
c000a6d6:	68 28 ea 00 c0       	push   $0xc000ea28
c000a6db:	6a 70                	push   $0x70
c000a6dd:	68 c2 e8 00 c0       	push   $0xc000e8c2
c000a6e2:	e8 ca 7c ff ff       	call   c00023b1 <panic_spin>
c000a6e7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:115

	/* 初始化目录项 */
	memcpy(p_de->filename, filename, strlen(filename));
c000a6ea:	83 ec 0c             	sub    $0xc,%esp
c000a6ed:	ff 75 08             	pushl  0x8(%ebp)
c000a6f0:	e8 e8 92 ff ff       	call   c00039dd <strlen>
c000a6f5:	83 c4 10             	add    $0x10,%esp
c000a6f8:	89 c2                	mov    %eax,%edx
c000a6fa:	8b 45 14             	mov    0x14(%ebp),%eax
c000a6fd:	83 ec 04             	sub    $0x4,%esp
c000a700:	52                   	push   %edx
c000a701:	ff 75 08             	pushl  0x8(%ebp)
c000a704:	50                   	push   %eax
c000a705:	e8 9b 91 ff ff       	call   c00038a5 <memcpy>
c000a70a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:116
	p_de->i_no = inode_no;
c000a70d:	8b 45 14             	mov    0x14(%ebp),%eax
c000a710:	8b 55 0c             	mov    0xc(%ebp),%edx
c000a713:	89 50 10             	mov    %edx,0x10(%eax)
/work/x86_os_my/fs/dir.c:117
	p_de->f_type = file_type;
c000a716:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
c000a71a:	8b 45 14             	mov    0x14(%ebp),%eax
c000a71d:	89 50 14             	mov    %edx,0x14(%eax)
/work/x86_os_my/fs/dir.c:118
}
c000a720:	90                   	nop
c000a721:	c9                   	leave  
c000a722:	c3                   	ret    

c000a723 <sync_dir_entry>:
sync_dir_entry():
/work/x86_os_my/fs/dir.c:128
 * io_buf是由主调函数提供的，里面是一个一个的目录项
 */
// 全局变量 cur_part 定义在fs.c中
// 临时变量 all_blocks 保存目录中 所有数据块的地址【4*140=560字节，去掉前12个直接块的地址48字节，后边全是间接块，后边正好是512字节】
// 注意: all_blocks 里面并没有一级间接表的地址，只有直接块+间接块的地址！
bool sync_dir_entry(struct dir* parent_dir, struct dir_entry* p_de, void* io_buf) {
c000a723:	55                   	push   %ebp
c000a724:	89 e5                	mov    %esp,%ebp
c000a726:	57                   	push   %edi
c000a727:	81 ec 54 02 00 00    	sub    $0x254,%esp
/work/x86_os_my/fs/dir.c:129
	struct inode* dir_inode = parent_dir->inode;	//dir->inode：“已打开的 inode 队列”part->open_inodes 中的节点
c000a72d:	8b 45 08             	mov    0x8(%ebp),%eax
c000a730:	8b 00                	mov    (%eax),%eax
c000a732:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:130
	uint32_t dir_size = dir_inode->i_size;			//inode->i_size：当inode是目录时，代表 目录下所有目录项大小之和
c000a735:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a738:	8b 40 04             	mov    0x4(%eax),%eax
c000a73b:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:131
	uint32_t dir_entry_size = cur_part->sb->dir_entry_size;
c000a73e:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c000a743:	8b 40 1c             	mov    0x1c(%eax),%eax
c000a746:	8b 40 30             	mov    0x30(%eax),%eax
c000a749:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/fs/dir.c:133

	ASSERT(dir_size % dir_entry_size == 0);	// dir_size应该是dir_entry_size的整数倍
c000a74c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000a74f:	ba 00 00 00 00       	mov    $0x0,%edx
c000a754:	f7 75 e8             	divl   -0x18(%ebp)
c000a757:	89 d0                	mov    %edx,%eax
c000a759:	85 c0                	test   %eax,%eax
c000a75b:	74 1c                	je     c000a779 <sync_dir_entry+0x56>
/work/x86_os_my/fs/dir.c:133 (discriminator 1)
c000a75d:	68 cc e8 00 c0       	push   $0xc000e8cc
c000a762:	68 3c ea 00 c0       	push   $0xc000ea3c
c000a767:	68 85 00 00 00       	push   $0x85
c000a76c:	68 c2 e8 00 c0       	push   $0xc000e8c2
c000a771:	e8 3b 7c ff ff       	call   c00023b1 <panic_spin>
c000a776:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:135

	uint32_t dir_entrys_per_sec = (512 / dir_entry_size);	// 每扇区最多有几个目录项【保证了：写入目录项时不会跨扇区】
c000a779:	b8 00 02 00 00       	mov    $0x200,%eax
c000a77e:	ba 00 00 00 00       	mov    $0x0,%edx
c000a783:	f7 75 e8             	divl   -0x18(%ebp)
c000a786:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/dir.c:136
	int32_t block_lba = -1;
c000a789:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
/work/x86_os_my/fs/dir.c:140


	/* 将该目录inode管理的所有块(扇区)地址(12个直接块+ 128个间接块)存入all_blocks */
	uint8_t block_idx = 0;
c000a790:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/fs/dir.c:143
	// all_blocks 保存目录中 所有数据块的地址【4*140=560字节，去掉前12个直接块的地址48字节，后边全是间接块，后边正好是512字节】
	// 注意: all_blocks 里面并没有一级间接表的地址，只有直接块+间接块的地址！
	uint32_t all_blocks[140] = {0};
c000a794:	8d 95 a8 fd ff ff    	lea    -0x258(%ebp),%edx
c000a79a:	b8 00 00 00 00       	mov    $0x0,%eax
c000a79f:	b9 8c 00 00 00       	mov    $0x8c,%ecx
c000a7a4:	89 d7                	mov    %edx,%edi
c000a7a6:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/fs/dir.c:144
	while (block_idx < 12) {
c000a7a8:	eb 22                	jmp    c000a7cc <sync_dir_entry+0xa9>
/work/x86_os_my/fs/dir.c:145
		all_blocks[block_idx] = dir_inode->i_sectors[block_idx];
c000a7aa:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000a7ae:	0f b6 4d f7          	movzbl -0x9(%ebp),%ecx
c000a7b2:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000a7b5:	83 c1 04             	add    $0x4,%ecx
c000a7b8:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
c000a7bb:	89 94 85 a8 fd ff ff 	mov    %edx,-0x258(%ebp,%eax,4)
/work/x86_os_my/fs/dir.c:146
		block_idx++;
c000a7c2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000a7c6:	83 c0 01             	add    $0x1,%eax
c000a7c9:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/dir.c:144
	/* 将该目录inode管理的所有块(扇区)地址(12个直接块+ 128个间接块)存入all_blocks */
	uint8_t block_idx = 0;
	// all_blocks 保存目录中 所有数据块的地址【4*140=560字节，去掉前12个直接块的地址48字节，后边全是间接块，后边正好是512字节】
	// 注意: all_blocks 里面并没有一级间接表的地址，只有直接块+间接块的地址！
	uint32_t all_blocks[140] = {0};
	while (block_idx < 12) {
c000a7cc:	80 7d f7 0b          	cmpb   $0xb,-0x9(%ebp)
c000a7d0:	76 d8                	jbe    c000a7aa <sync_dir_entry+0x87>
/work/x86_os_my/fs/dir.c:151
		block_idx++;
	}


	/* 开始遍历所有块以寻找目录项空位 */
	block_idx = 0;
c000a7d2:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
/work/x86_os_my/fs/dir.c:152
	while (block_idx < 140) {	// 文件(包括目录)最多管理140个块
c000a7d6:	e9 3f 03 00 00       	jmp    c000ab1a <sync_dir_entry+0x3f7>
/work/x86_os_my/fs/dir.c:155
		/* 一、若inode管理的第block_idx块是不存在的，需要分配。
		   下边是需要分配块的三种情况 @1 @2 @3 */
		int32_t block_bitmap_idx = -1;
c000a7db:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:156
		if (all_blocks[block_idx] == 0) {
c000a7e2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000a7e6:	8b 84 85 a8 fd ff ff 	mov    -0x258(%ebp,%eax,4),%eax
c000a7ed:	85 c0                	test   %eax,%eax
c000a7ef:	0f 85 58 02 00 00    	jne    c000aa4d <sync_dir_entry+0x32a>
/work/x86_os_my/fs/dir.c:157
			block_lba = block_bitmap_alloc(cur_part);	// #1 从分区的block位图中，分配1个扇区，返回"扇区地址"
c000a7f5:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c000a7fa:	83 ec 0c             	sub    $0xc,%esp
c000a7fd:	50                   	push   %eax
c000a7fe:	e8 ff eb ff ff       	call   c0009402 <block_bitmap_alloc>
c000a803:	83 c4 10             	add    $0x10,%esp
c000a806:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/dir.c:158
			if (block_lba == -1) {
c000a809:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
c000a80d:	75 1a                	jne    c000a829 <sync_dir_entry+0x106>
/work/x86_os_my/fs/dir.c:159
				printk("alloc block bitmap for sync_dir_entry failed\n");
c000a80f:	83 ec 0c             	sub    $0xc,%esp
c000a812:	68 ec e8 00 c0       	push   $0xc000e8ec
c000a817:	e8 f2 c2 ff ff       	call   c0006b0e <printk>
c000a81c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:160
				return false;
c000a81f:	b8 00 00 00 00       	mov    $0x0,%eax
c000a824:	e9 10 03 00 00       	jmp    c000ab39 <sync_dir_entry+0x416>
/work/x86_os_my/fs/dir.c:163
			}
			/* 每分配一个块就同步一次block_bitmap */
			block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
c000a829:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000a82c:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c000a831:	8b 40 1c             	mov    0x1c(%eax),%eax
c000a834:	8b 40 28             	mov    0x28(%eax),%eax
c000a837:	29 c2                	sub    %eax,%edx
c000a839:	89 d0                	mov    %edx,%eax
c000a83b:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:164
			ASSERT(block_bitmap_idx != -1);	//怎么可能是-1啊。。。？
c000a83e:	83 7d dc ff          	cmpl   $0xffffffff,-0x24(%ebp)
c000a842:	75 1c                	jne    c000a860 <sync_dir_entry+0x13d>
/work/x86_os_my/fs/dir.c:164 (discriminator 1)
c000a844:	68 1a e9 00 c0       	push   $0xc000e91a
c000a849:	68 3c ea 00 c0       	push   $0xc000ea3c
c000a84e:	68 a4 00 00 00       	push   $0xa4
c000a853:	68 c2 e8 00 c0       	push   $0xc000e8c2
c000a858:	e8 54 7b ff ff       	call   c00023b1 <panic_spin>
c000a85d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:165
			bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c000a860:	8b 55 dc             	mov    -0x24(%ebp),%edx
c000a863:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c000a868:	83 ec 04             	sub    $0x4,%esp
c000a86b:	6a 01                	push   $0x1
c000a86d:	52                   	push   %edx
c000a86e:	50                   	push   %eax
c000a86f:	e8 e0 eb ff ff       	call   c0009454 <bitmap_sync>
c000a874:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:167

			block_bitmap_idx = -1;
c000a877:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:168
			if (block_idx < 12) {			// @1 若是直接块
c000a87e:	80 7d f7 0b          	cmpb   $0xb,-0x9(%ebp)
c000a882:	77 27                	ja     c000a8ab <sync_dir_entry+0x188>
/work/x86_os_my/fs/dir.c:169
				dir_inode->i_sectors[block_idx] = all_blocks[block_idx] = block_lba;
c000a884:	0f b6 4d f7          	movzbl -0x9(%ebp),%ecx
c000a888:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000a88c:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000a88f:	89 94 85 a8 fd ff ff 	mov    %edx,-0x258(%ebp,%eax,4)
c000a896:	8b 94 85 a8 fd ff ff 	mov    -0x258(%ebp,%eax,4),%edx
c000a89d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a8a0:	83 c1 04             	add    $0x4,%ecx
c000a8a3:	89 14 88             	mov    %edx,(%eax,%ecx,4)
c000a8a6:	e9 3c 01 00 00       	jmp    c000a9e7 <sync_dir_entry+0x2c4>
/work/x86_os_my/fs/dir.c:170
			} else if (block_idx == 12) {	// @2 若是未分配 一级间接块表(block_idx==12表示第0个间接块)
c000a8ab:	80 7d f7 0c          	cmpb   $0xc,-0x9(%ebp)
c000a8af:	0f 85 ff 00 00 00    	jne    c000a9b4 <sync_dir_entry+0x291>
/work/x86_os_my/fs/dir.c:171
				dir_inode->i_sectors[12] = block_lba;		// 将 #1 分配的块做为"一级间接块表"地址
c000a8b5:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000a8b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a8bb:	89 50 40             	mov    %edx,0x40(%eax)
/work/x86_os_my/fs/dir.c:173
				
				block_lba = -1;
c000a8be:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
/work/x86_os_my/fs/dir.c:174
				block_lba = block_bitmap_alloc(cur_part);	// #2 再分配一个块做为"第0个间接块"
c000a8c5:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c000a8ca:	83 ec 0c             	sub    $0xc,%esp
c000a8cd:	50                   	push   %eax
c000a8ce:	e8 2f eb ff ff       	call   c0009402 <block_bitmap_alloc>
c000a8d3:	83 c4 10             	add    $0x10,%esp
c000a8d6:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/dir.c:175
				if (block_lba == -1) {
c000a8d9:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
c000a8dd:	75 57                	jne    c000a936 <sync_dir_entry+0x213>
/work/x86_os_my/fs/dir.c:177
					// 回滚block_bitmap
					block_bitmap_idx = dir_inode->i_sectors[12] - cur_part->sb->data_start_lba;
c000a8df:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a8e2:	8b 50 40             	mov    0x40(%eax),%edx
c000a8e5:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c000a8ea:	8b 40 1c             	mov    0x1c(%eax),%eax
c000a8ed:	8b 40 28             	mov    0x28(%eax),%eax
c000a8f0:	29 c2                	sub    %eax,%edx
c000a8f2:	89 d0                	mov    %edx,%eax
c000a8f4:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:178
					bitmap_set(&cur_part->block_bitmap, block_bitmap_idx, 0);	//释放 #1
c000a8f7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000a8fa:	8b 15 d0 2f 01 c0    	mov    0xc0012fd0,%edx
c000a900:	83 c2 20             	add    $0x20,%edx
c000a903:	83 ec 04             	sub    $0x4,%esp
c000a906:	6a 00                	push   $0x0
c000a908:	50                   	push   %eax
c000a909:	52                   	push   %edx
c000a90a:	e8 10 7d ff ff       	call   c000261f <bitmap_set>
c000a90f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:180
					// 取消掉这个一级间接块表
					dir_inode->i_sectors[12] = 0;
c000a912:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000a915:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)
/work/x86_os_my/fs/dir.c:181
					printk("alloc block bitmap for sync_dir_entry failed\n");
c000a91c:	83 ec 0c             	sub    $0xc,%esp
c000a91f:	68 ec e8 00 c0       	push   $0xc000e8ec
c000a924:	e8 e5 c1 ff ff       	call   c0006b0e <printk>
c000a929:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:182
					return false;
c000a92c:	b8 00 00 00 00       	mov    $0x0,%eax
c000a931:	e9 03 02 00 00       	jmp    c000ab39 <sync_dir_entry+0x416>
/work/x86_os_my/fs/dir.c:185
				}
				/* 每分配一个块就同步一次block_bitmap */
				block_bitmap_idx = block_lba - cur_part->sb->data_start_lba;
c000a936:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000a939:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c000a93e:	8b 40 1c             	mov    0x1c(%eax),%eax
c000a941:	8b 40 28             	mov    0x28(%eax),%eax
c000a944:	29 c2                	sub    %eax,%edx
c000a946:	89 d0                	mov    %edx,%eax
c000a948:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:186
				ASSERT(block_bitmap_idx != -1);
c000a94b:	83 7d dc ff          	cmpl   $0xffffffff,-0x24(%ebp)
c000a94f:	75 1c                	jne    c000a96d <sync_dir_entry+0x24a>
/work/x86_os_my/fs/dir.c:186 (discriminator 1)
c000a951:	68 1a e9 00 c0       	push   $0xc000e91a
c000a956:	68 3c ea 00 c0       	push   $0xc000ea3c
c000a95b:	68 ba 00 00 00       	push   $0xba
c000a960:	68 c2 e8 00 c0       	push   $0xc000e8c2
c000a965:	e8 47 7a ff ff       	call   c00023b1 <panic_spin>
c000a96a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:187
				bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c000a96d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c000a970:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c000a975:	83 ec 04             	sub    $0x4,%esp
c000a978:	6a 01                	push   $0x1
c000a97a:	52                   	push   %edx
c000a97b:	50                   	push   %eax
c000a97c:	e8 d3 ea ff ff       	call   c0009454 <bitmap_sync>
c000a981:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:190

				/* 把新分配的"第0个间接块地址"写入硬盘中"一级间接块表" */
				all_blocks[12] = block_lba;
c000a984:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000a987:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
/work/x86_os_my/fs/dir.c:194
				// all_blocks 共有4*140=560字节，去掉前12个直接块的地址48字节，后边全是间接块，后边正好是512字节】
				// 注意: all_blocks 里面并没有一级间接表的地址，只有直接块+间接块的地址！
				// 我们的一级间接表大小是和普通数据块大小一样的512字节，可以容纳128个数据块的地址！
				ide_write(cur_part->my_disk, dir_inode->i_sectors[12], all_blocks + 12, 1);
c000a98d:	8d 85 a8 fd ff ff    	lea    -0x258(%ebp),%eax
c000a993:	83 c0 30             	add    $0x30,%eax
c000a996:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000a999:	8b 4a 40             	mov    0x40(%edx),%ecx
c000a99c:	8b 15 d0 2f 01 c0    	mov    0xc0012fd0,%edx
c000a9a2:	8b 52 08             	mov    0x8(%edx),%edx
c000a9a5:	6a 01                	push   $0x1
c000a9a7:	50                   	push   %eax
c000a9a8:	51                   	push   %ecx
c000a9a9:	52                   	push   %edx
c000a9aa:	e8 5a b8 ff ff       	call   c0006209 <ide_write>
c000a9af:	83 c4 10             	add    $0x10,%esp
c000a9b2:	eb 33                	jmp    c000a9e7 <sync_dir_entry+0x2c4>
/work/x86_os_my/fs/dir.c:197
			} else {						// @3 若是未分配 间接块【父目录inode管理的只有前13个数据块需要特殊处理，后边的全是间接块】
				/* 把新分配的第(block_idx-12)个间接块地址"写入硬盘中"一级间接块表 */
				all_blocks[block_idx] = block_lba;
c000a9b4:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000a9b8:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000a9bb:	89 94 85 a8 fd ff ff 	mov    %edx,-0x258(%ebp,%eax,4)
/work/x86_os_my/fs/dir.c:198
				ide_write(cur_part->my_disk, dir_inode->i_sectors[12], all_blocks + 12, 1);
c000a9c2:	8d 85 a8 fd ff ff    	lea    -0x258(%ebp),%eax
c000a9c8:	83 c0 30             	add    $0x30,%eax
c000a9cb:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000a9ce:	8b 4a 40             	mov    0x40(%edx),%ecx
c000a9d1:	8b 15 d0 2f 01 c0    	mov    0xc0012fd0,%edx
c000a9d7:	8b 52 08             	mov    0x8(%edx),%edx
c000a9da:	6a 01                	push   $0x1
c000a9dc:	50                   	push   %eax
c000a9dd:	51                   	push   %ecx
c000a9de:	52                   	push   %edx
c000a9df:	e8 25 b8 ff ff       	call   c0006209 <ide_write>
c000a9e4:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:204
			}


			/* 这里才是重点，前边只是处理，父目录indoe管理的某个数据块为空的情况，需要新分配数据块，包括一级间接块表、间接块 */
			/* 再将硬盘中，新目录项p_de写入新分配的间接块 */
			memset(io_buf, 0, 512);
c000a9e7:	83 ec 04             	sub    $0x4,%esp
c000a9ea:	68 00 02 00 00       	push   $0x200
c000a9ef:	6a 00                	push   $0x0
c000a9f1:	ff 75 10             	pushl  0x10(%ebp)
c000a9f4:	e8 5a 8e ff ff       	call   c0003853 <memset>
c000a9f9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:205
			memcpy(io_buf, p_de, dir_entry_size);
c000a9fc:	83 ec 04             	sub    $0x4,%esp
c000a9ff:	ff 75 e8             	pushl  -0x18(%ebp)
c000aa02:	ff 75 0c             	pushl  0xc(%ebp)
c000aa05:	ff 75 10             	pushl  0x10(%ebp)
c000aa08:	e8 98 8e ff ff       	call   c00038a5 <memcpy>
c000aa0d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:206
			ide_write(cur_part->my_disk, all_blocks[block_idx], io_buf, 1);
c000aa10:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000aa14:	8b 94 85 a8 fd ff ff 	mov    -0x258(%ebp,%eax,4),%edx
c000aa1b:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c000aa20:	8b 40 08             	mov    0x8(%eax),%eax
c000aa23:	6a 01                	push   $0x1
c000aa25:	ff 75 10             	pushl  0x10(%ebp)
c000aa28:	52                   	push   %edx
c000aa29:	50                   	push   %eax
c000aa2a:	e8 da b7 ff ff       	call   c0006209 <ide_write>
c000aa2f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:207
			dir_inode->i_size += dir_entry_size;	//struct inode* dir_inode = parent_dir->inode;更新的是父目录的inode结构
c000aa32:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000aa35:	8b 50 04             	mov    0x4(%eax),%edx
c000aa38:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000aa3b:	01 c2                	add    %eax,%edx
c000aa3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000aa40:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/dir.c:208
			return true;
c000aa43:	b8 01 00 00 00       	mov    $0x1,%eax
c000aa48:	e9 ec 00 00 00       	jmp    c000ab39 <sync_dir_entry+0x416>
/work/x86_os_my/fs/dir.c:213
		}//if (all_blocks[block_idx] == 0)


		/* 二、若inode管理的第block_idx块是存在的，不需要分配，将其读进内存，然后在该块中查找空目录项，将p_de填入 */
		ide_read(cur_part->my_disk, all_blocks[block_idx], io_buf, 1); 
c000aa4d:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000aa51:	8b 94 85 a8 fd ff ff 	mov    -0x258(%ebp,%eax,4),%edx
c000aa58:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c000aa5d:	8b 40 08             	mov    0x8(%eax),%eax
c000aa60:	6a 01                	push   $0x1
c000aa62:	ff 75 10             	pushl  0x10(%ebp)
c000aa65:	52                   	push   %edx
c000aa66:	50                   	push   %eax
c000aa67:	e8 29 b6 ff ff       	call   c0006095 <ide_read>
c000aa6c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:215
		/* 在扇区内查找空目录项 */
		uint8_t dir_entry_idx = 0;
c000aa6f:	c6 45 f6 00          	movb   $0x0,-0xa(%ebp)
/work/x86_os_my/fs/dir.c:216
		struct dir_entry* dir_e = (struct dir_entry*)io_buf;		// dir_e用来在io_buf中遍历目录项【io_buf里面是一个一个的目录项】
c000aa73:	8b 45 10             	mov    0x10(%ebp),%eax
c000aa76:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/dir.c:217
		while (dir_entry_idx < dir_entrys_per_sec) {
c000aa79:	e9 85 00 00 00       	jmp    c000ab03 <sync_dir_entry+0x3e0>
/work/x86_os_my/fs/dir.c:218
			if ((dir_e + dir_entry_idx)->f_type == FT_UNKNOWN) {	// 无论是初始化或是删除文件，都会将f_type置为FT_UNKNOWN.
c000aa7e:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
c000aa82:	89 d0                	mov    %edx,%eax
c000aa84:	01 c0                	add    %eax,%eax
c000aa86:	01 d0                	add    %edx,%eax
c000aa88:	c1 e0 03             	shl    $0x3,%eax
c000aa8b:	89 c2                	mov    %eax,%edx
c000aa8d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000aa90:	01 d0                	add    %edx,%eax
c000aa92:	8b 40 14             	mov    0x14(%eax),%eax
c000aa95:	85 c0                	test   %eax,%eax
c000aa97:	75 60                	jne    c000aaf9 <sync_dir_entry+0x3d6>
/work/x86_os_my/fs/dir.c:219
				memcpy(dir_e + dir_entry_idx, p_de, dir_entry_size);    
c000aa99:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
c000aa9d:	89 d0                	mov    %edx,%eax
c000aa9f:	01 c0                	add    %eax,%eax
c000aaa1:	01 d0                	add    %edx,%eax
c000aaa3:	c1 e0 03             	shl    $0x3,%eax
c000aaa6:	89 c2                	mov    %eax,%edx
c000aaa8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000aaab:	01 d0                	add    %edx,%eax
c000aaad:	83 ec 04             	sub    $0x4,%esp
c000aab0:	ff 75 e8             	pushl  -0x18(%ebp)
c000aab3:	ff 75 0c             	pushl  0xc(%ebp)
c000aab6:	50                   	push   %eax
c000aab7:	e8 e9 8d ff ff       	call   c00038a5 <memcpy>
c000aabc:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:220
				ide_write(cur_part->my_disk, all_blocks[block_idx], io_buf, 1);
c000aabf:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000aac3:	8b 94 85 a8 fd ff ff 	mov    -0x258(%ebp,%eax,4),%edx
c000aaca:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c000aacf:	8b 40 08             	mov    0x8(%eax),%eax
c000aad2:	6a 01                	push   $0x1
c000aad4:	ff 75 10             	pushl  0x10(%ebp)
c000aad7:	52                   	push   %edx
c000aad8:	50                   	push   %eax
c000aad9:	e8 2b b7 ff ff       	call   c0006209 <ide_write>
c000aade:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:222

				dir_inode->i_size += dir_entry_size;
c000aae1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000aae4:	8b 50 04             	mov    0x4(%eax),%edx
c000aae7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000aaea:	01 c2                	add    %eax,%edx
c000aaec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000aaef:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/dir.c:223
				return true;
c000aaf2:	b8 01 00 00 00       	mov    $0x1,%eax
c000aaf7:	eb 40                	jmp    c000ab39 <sync_dir_entry+0x416>
/work/x86_os_my/fs/dir.c:225
			}
			dir_entry_idx++;
c000aaf9:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c000aafd:	83 c0 01             	add    $0x1,%eax
c000ab00:	88 45 f6             	mov    %al,-0xa(%ebp)
/work/x86_os_my/fs/dir.c:217
		/* 二、若inode管理的第block_idx块是存在的，不需要分配，将其读进内存，然后在该块中查找空目录项，将p_de填入 */
		ide_read(cur_part->my_disk, all_blocks[block_idx], io_buf, 1); 
		/* 在扇区内查找空目录项 */
		uint8_t dir_entry_idx = 0;
		struct dir_entry* dir_e = (struct dir_entry*)io_buf;		// dir_e用来在io_buf中遍历目录项【io_buf里面是一个一个的目录项】
		while (dir_entry_idx < dir_entrys_per_sec) {
c000ab03:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c000ab07:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c000ab0a:	0f 82 6e ff ff ff    	jb     c000aa7e <sync_dir_entry+0x35b>
/work/x86_os_my/fs/dir.c:230
			dir_entry_idx++;
		}


		/* 三、若inode管理的第block_idx块是存在的，不需要分配，但是都不是空闲(FT_UNKNOWN)的 */
		block_idx++;	//下一个inode管理的block
c000ab10:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c000ab14:	83 c0 01             	add    $0x1,%eax
c000ab17:	88 45 f7             	mov    %al,-0x9(%ebp)
/work/x86_os_my/fs/dir.c:152
	}


	/* 开始遍历所有块以寻找目录项空位 */
	block_idx = 0;
	while (block_idx < 140) {	// 文件(包括目录)最多管理140个块
c000ab1a:	80 7d f7 8b          	cmpb   $0x8b,-0x9(%ebp)
c000ab1e:	0f 86 b7 fc ff ff    	jbe    c000a7db <sync_dir_entry+0xb8>
/work/x86_os_my/fs/dir.c:233

		/* 三、若inode管理的第block_idx块是存在的，不需要分配，但是都不是空闲(FT_UNKNOWN)的 */
		block_idx++;	//下一个inode管理的block
	}//while (block_idx < 140)

	printk("directory is full!\n");
c000ab24:	83 ec 0c             	sub    $0xc,%esp
c000ab27:	68 31 e9 00 c0       	push   $0xc000e931
c000ab2c:	e8 dd bf ff ff       	call   c0006b0e <printk>
c000ab31:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:234
	return false;
c000ab34:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/dir.c:235 (discriminator 1)
}
c000ab39:	8b 7d fc             	mov    -0x4(%ebp),%edi
c000ab3c:	c9                   	leave  
c000ab3d:	c3                   	ret    

c000ab3e <delete_dir_entry>:
delete_dir_entry():
/work/x86_os_my/fs/dir.c:244
（2）根目录是必须存在的，它是文件读写的根基，不应该被清空，它至少要保留 1 个块。
	 如果目录项独占 1个块，并且该块不是根目录最后一个块的话，将其回收。
（3）目录 inode 的 i_size 是目录项大小的总和，因此还要将 i_size 减去一个目录项的单位大小。
（4）目录 inode 改变后，要同步到硬盘。
 */
bool delete_dir_entry(struct partition* part, struct dir* pdir, uint32_t inode_no, void* io_buf) {
c000ab3e:	55                   	push   %ebp
c000ab3f:	89 e5                	mov    %esp,%ebp
c000ab41:	57                   	push   %edi
c000ab42:	81 ec 64 02 00 00    	sub    $0x264,%esp
/work/x86_os_my/fs/dir.c:245
	struct inode* dir_inode = pdir->inode;
c000ab48:	8b 45 0c             	mov    0xc(%ebp),%eax
c000ab4b:	8b 00                	mov    (%eax),%eax
c000ab4d:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/dir.c:246
	uint32_t block_idx = 0, all_blocks[140] = {0};
c000ab50:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c000ab57:	8d 95 9c fd ff ff    	lea    -0x264(%ebp),%edx
c000ab5d:	b8 00 00 00 00       	mov    $0x0,%eax
c000ab62:	b9 8c 00 00 00       	mov    $0x8c,%ecx
c000ab67:	89 d7                	mov    %edx,%edi
c000ab69:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/fs/dir.c:249

	/* 收集目录全部块地址，存到到 all_blocks */
	while (block_idx < 12) {
c000ab6b:	eb 1a                	jmp    c000ab87 <delete_dir_entry+0x49>
/work/x86_os_my/fs/dir.c:250
		all_blocks[block_idx] = dir_inode->i_sectors[block_idx];
c000ab6d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000ab70:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000ab73:	83 c2 04             	add    $0x4,%edx
c000ab76:	8b 14 90             	mov    (%eax,%edx,4),%edx
c000ab79:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000ab7c:	89 94 85 9c fd ff ff 	mov    %edx,-0x264(%ebp,%eax,4)
/work/x86_os_my/fs/dir.c:251
		block_idx++;
c000ab83:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:249
bool delete_dir_entry(struct partition* part, struct dir* pdir, uint32_t inode_no, void* io_buf) {
	struct inode* dir_inode = pdir->inode;
	uint32_t block_idx = 0, all_blocks[140] = {0};

	/* 收集目录全部块地址，存到到 all_blocks */
	while (block_idx < 12) {
c000ab87:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
c000ab8b:	76 e0                	jbe    c000ab6d <delete_dir_entry+0x2f>
/work/x86_os_my/fs/dir.c:253
		all_blocks[block_idx] = dir_inode->i_sectors[block_idx];
		block_idx++;
	}
	if (dir_inode->i_sectors[12]) {
c000ab8d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000ab90:	8b 40 40             	mov    0x40(%eax),%eax
c000ab93:	85 c0                	test   %eax,%eax
c000ab95:	74 22                	je     c000abb9 <delete_dir_entry+0x7b>
/work/x86_os_my/fs/dir.c:254
		ide_read(part->my_disk, dir_inode->i_sectors[12], all_blocks + 12, 1);
c000ab97:	8d 85 9c fd ff ff    	lea    -0x264(%ebp),%eax
c000ab9d:	83 c0 30             	add    $0x30,%eax
c000aba0:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000aba3:	8b 4a 40             	mov    0x40(%edx),%ecx
c000aba6:	8b 55 08             	mov    0x8(%ebp),%edx
c000aba9:	8b 52 08             	mov    0x8(%edx),%edx
c000abac:	6a 01                	push   $0x1
c000abae:	50                   	push   %eax
c000abaf:	51                   	push   %ecx
c000abb0:	52                   	push   %edx
c000abb1:	e8 df b4 ff ff       	call   c0006095 <ide_read>
c000abb6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:258
	}

	/* 目录项在存储时保证不会跨扇区 */
	uint32_t dir_entry_size = part->sb->dir_entry_size;
c000abb9:	8b 45 08             	mov    0x8(%ebp),%eax
c000abbc:	8b 40 1c             	mov    0x1c(%eax),%eax
c000abbf:	8b 40 30             	mov    0x30(%eax),%eax
c000abc2:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:259
	uint32_t dir_entrys_per_sec = (SECTOR_SIZE / dir_entry_size);	// 每扇区最大的目录项数目
c000abc5:	b8 00 02 00 00       	mov    $0x200,%eax
c000abca:	ba 00 00 00 00       	mov    $0x0,%edx
c000abcf:	f7 75 dc             	divl   -0x24(%ebp)
c000abd2:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/dir.c:260
	struct dir_entry* dir_e = (struct dir_entry*)io_buf;
c000abd5:	8b 45 14             	mov    0x14(%ebp),%eax
c000abd8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/fs/dir.c:261
	struct dir_entry* dir_entry_found = NULL;
c000abdb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:263
	uint8_t dir_entry_idx, dir_entry_cnt;
	bool is_dir_first_block = false;	// 目录的第1个块
c000abe2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
/work/x86_os_my/fs/dir.c:266

	/* 遍历所有块，寻找目录项 */
	block_idx = 0;
c000abe9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:267
	while (block_idx < 140) {
c000abf0:	e9 9a 03 00 00       	jmp    c000af8f <delete_dir_entry+0x451>
/work/x86_os_my/fs/dir.c:268
		is_dir_first_block = false;
c000abf5:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
/work/x86_os_my/fs/dir.c:269
		if (all_blocks[block_idx] == 0) {
c000abfc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000abff:	8b 84 85 9c fd ff ff 	mov    -0x264(%ebp,%eax,4),%eax
c000ac06:	85 c0                	test   %eax,%eax
c000ac08:	75 09                	jne    c000ac13 <delete_dir_entry+0xd5>
/work/x86_os_my/fs/dir.c:270
			block_idx++;
c000ac0a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:271
			continue;
c000ac0e:	e9 7c 03 00 00       	jmp    c000af8f <delete_dir_entry+0x451>
/work/x86_os_my/fs/dir.c:273
		}
		dir_entry_idx = dir_entry_cnt = 0;
c000ac13:	c6 45 ee 00          	movb   $0x0,-0x12(%ebp)
c000ac17:	0f b6 45 ee          	movzbl -0x12(%ebp),%eax
c000ac1b:	88 45 ef             	mov    %al,-0x11(%ebp)
/work/x86_os_my/fs/dir.c:274
		memset(io_buf, 0, SECTOR_SIZE);
c000ac1e:	83 ec 04             	sub    $0x4,%esp
c000ac21:	68 00 02 00 00       	push   $0x200
c000ac26:	6a 00                	push   $0x0
c000ac28:	ff 75 14             	pushl  0x14(%ebp)
c000ac2b:	e8 23 8c ff ff       	call   c0003853 <memset>
c000ac30:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:276
		/* 读取目录inode管理的各个数据块（扇区），里面是目录项 */
		ide_read(part->my_disk, all_blocks[block_idx], io_buf, 1);	//dir_e = io_buf
c000ac33:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000ac36:	8b 94 85 9c fd ff ff 	mov    -0x264(%ebp,%eax,4),%edx
c000ac3d:	8b 45 08             	mov    0x8(%ebp),%eax
c000ac40:	8b 40 08             	mov    0x8(%eax),%eax
c000ac43:	6a 01                	push   $0x1
c000ac45:	ff 75 14             	pushl  0x14(%ebp)
c000ac48:	52                   	push   %edx
c000ac49:	50                   	push   %eax
c000ac4a:	e8 46 b4 ff ff       	call   c0006095 <ide_read>
c000ac4f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:279

		/* 遍历所有的目录项，统计该扇区的目录项数量 + 是否找到要删除的目录项 */
		while (dir_entry_idx < dir_entrys_per_sec) {
c000ac52:	e9 13 01 00 00       	jmp    c000ad6a <delete_dir_entry+0x22c>
/work/x86_os_my/fs/dir.c:280
			if ((dir_e + dir_entry_idx)->f_type != FT_UNKNOWN) {	// 初始化或是删除文件，会将f_type置为FT_UNKNOWN.
c000ac57:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c000ac5b:	89 d0                	mov    %edx,%eax
c000ac5d:	01 c0                	add    %eax,%eax
c000ac5f:	01 d0                	add    %edx,%eax
c000ac61:	c1 e0 03             	shl    $0x3,%eax
c000ac64:	89 c2                	mov    %eax,%edx
c000ac66:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000ac69:	01 d0                	add    %edx,%eax
c000ac6b:	8b 40 14             	mov    0x14(%eax),%eax
c000ac6e:	85 c0                	test   %eax,%eax
c000ac70:	0f 84 ea 00 00 00    	je     c000ad60 <delete_dir_entry+0x222>
/work/x86_os_my/fs/dir.c:281
				if (!strcmp((dir_e + dir_entry_idx)->filename, ".")) {
c000ac76:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c000ac7a:	89 d0                	mov    %edx,%eax
c000ac7c:	01 c0                	add    %eax,%eax
c000ac7e:	01 d0                	add    %edx,%eax
c000ac80:	c1 e0 03             	shl    $0x3,%eax
c000ac83:	89 c2                	mov    %eax,%edx
c000ac85:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000ac88:	01 d0                	add    %edx,%eax
c000ac8a:	83 ec 08             	sub    $0x8,%esp
c000ac8d:	68 45 e9 00 c0       	push   $0xc000e945
c000ac92:	50                   	push   %eax
c000ac93:	e8 90 8d ff ff       	call   c0003a28 <strcmp>
c000ac98:	83 c4 10             	add    $0x10,%esp
c000ac9b:	84 c0                	test   %al,%al
c000ac9d:	75 0c                	jne    c000acab <delete_dir_entry+0x16d>
/work/x86_os_my/fs/dir.c:282
					is_dir_first_block = true;
c000ac9f:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
c000aca6:	e9 b5 00 00 00       	jmp    c000ad60 <delete_dir_entry+0x222>
/work/x86_os_my/fs/dir.c:283
				} else if (strcmp((dir_e + dir_entry_idx)->filename, ".") && strcmp((dir_e + dir_entry_idx)->filename, "..")) {	//不是.和..
c000acab:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c000acaf:	89 d0                	mov    %edx,%eax
c000acb1:	01 c0                	add    %eax,%eax
c000acb3:	01 d0                	add    %edx,%eax
c000acb5:	c1 e0 03             	shl    $0x3,%eax
c000acb8:	89 c2                	mov    %eax,%edx
c000acba:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000acbd:	01 d0                	add    %edx,%eax
c000acbf:	83 ec 08             	sub    $0x8,%esp
c000acc2:	68 45 e9 00 c0       	push   $0xc000e945
c000acc7:	50                   	push   %eax
c000acc8:	e8 5b 8d ff ff       	call   c0003a28 <strcmp>
c000accd:	83 c4 10             	add    $0x10,%esp
c000acd0:	84 c0                	test   %al,%al
c000acd2:	0f 84 88 00 00 00    	je     c000ad60 <delete_dir_entry+0x222>
/work/x86_os_my/fs/dir.c:283 (discriminator 1)
c000acd8:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c000acdc:	89 d0                	mov    %edx,%eax
c000acde:	01 c0                	add    %eax,%eax
c000ace0:	01 d0                	add    %edx,%eax
c000ace2:	c1 e0 03             	shl    $0x3,%eax
c000ace5:	89 c2                	mov    %eax,%edx
c000ace7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000acea:	01 d0                	add    %edx,%eax
c000acec:	83 ec 08             	sub    $0x8,%esp
c000acef:	68 47 e9 00 c0       	push   $0xc000e947
c000acf4:	50                   	push   %eax
c000acf5:	e8 2e 8d ff ff       	call   c0003a28 <strcmp>
c000acfa:	83 c4 10             	add    $0x10,%esp
c000acfd:	84 c0                	test   %al,%al
c000acff:	74 5f                	je     c000ad60 <delete_dir_entry+0x222>
/work/x86_os_my/fs/dir.c:284
					dir_entry_cnt++;     // 统计此扇区内的目录项个数，用来判断删除目录项后是否回收该扇区
c000ad01:	0f b6 45 ee          	movzbl -0x12(%ebp),%eax
c000ad05:	83 c0 01             	add    $0x1,%eax
c000ad08:	88 45 ee             	mov    %al,-0x12(%ebp)
/work/x86_os_my/fs/dir.c:286
					// 目录项的成员inode号和目标inode号一致，就将其记录在dir_entry_found！！！
					if ((dir_e + dir_entry_idx)->i_no == inode_no) {
c000ad0b:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c000ad0f:	89 d0                	mov    %edx,%eax
c000ad11:	01 c0                	add    %eax,%eax
c000ad13:	01 d0                	add    %edx,%eax
c000ad15:	c1 e0 03             	shl    $0x3,%eax
c000ad18:	89 c2                	mov    %eax,%edx
c000ad1a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000ad1d:	01 d0                	add    %edx,%eax
c000ad1f:	8b 40 10             	mov    0x10(%eax),%eax
c000ad22:	3b 45 10             	cmp    0x10(%ebp),%eax
c000ad25:	75 39                	jne    c000ad60 <delete_dir_entry+0x222>
/work/x86_os_my/fs/dir.c:287
						ASSERT(dir_entry_found == NULL);  // 确保目录中只有一个编号为inode_no的inode,找到一次后dir_entry_found就不再是NULL
c000ad27:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c000ad2b:	74 1c                	je     c000ad49 <delete_dir_entry+0x20b>
/work/x86_os_my/fs/dir.c:287 (discriminator 1)
c000ad2d:	68 4a e9 00 c0       	push   $0xc000e94a
c000ad32:	68 4c ea 00 c0       	push   $0xc000ea4c
c000ad37:	68 1f 01 00 00       	push   $0x11f
c000ad3c:	68 c2 e8 00 c0       	push   $0xc000e8c2
c000ad41:	e8 6b 76 ff ff       	call   c00023b1 <panic_spin>
c000ad46:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:288
						dir_entry_found = dir_e + dir_entry_idx;
c000ad49:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
c000ad4d:	89 d0                	mov    %edx,%eax
c000ad4f:	01 c0                	add    %eax,%eax
c000ad51:	01 d0                	add    %edx,%eax
c000ad53:	c1 e0 03             	shl    $0x3,%eax
c000ad56:	89 c2                	mov    %eax,%edx
c000ad58:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000ad5b:	01 d0                	add    %edx,%eax
c000ad5d:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:293
						/* 找到后也继续遍历,统计总共的目录项数 */
					}
				}
			}
			dir_entry_idx++;
c000ad60:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c000ad64:	83 c0 01             	add    $0x1,%eax
c000ad67:	88 45 ef             	mov    %al,-0x11(%ebp)
/work/x86_os_my/fs/dir.c:279
		memset(io_buf, 0, SECTOR_SIZE);
		/* 读取目录inode管理的各个数据块（扇区），里面是目录项 */
		ide_read(part->my_disk, all_blocks[block_idx], io_buf, 1);	//dir_e = io_buf

		/* 遍历所有的目录项，统计该扇区的目录项数量 + 是否找到要删除的目录项 */
		while (dir_entry_idx < dir_entrys_per_sec) {
c000ad6a:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c000ad6e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
c000ad71:	0f 82 e0 fe ff ff    	jb     c000ac57 <delete_dir_entry+0x119>
/work/x86_os_my/fs/dir.c:297
			}
			dir_entry_idx++;
		}

		/* 若此扇区未找到该目录项,继续在下个扇区中找 */
		if (dir_entry_found == NULL) {
c000ad77:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c000ad7b:	75 09                	jne    c000ad86 <delete_dir_entry+0x248>
/work/x86_os_my/fs/dir.c:298
			block_idx++;
c000ad7d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:299
			continue;
c000ad81:	e9 09 02 00 00       	jmp    c000af8f <delete_dir_entry+0x451>
/work/x86_os_my/fs/dir.c:303
		}

		/* 在此扇区中找到目录项后，清除该目录项并判断是否回收扇区，随后退出循环直接返回 */
		ASSERT(dir_entry_cnt >= 1);	//此扇区内的目录项个数
c000ad86:	80 7d ee 00          	cmpb   $0x0,-0x12(%ebp)
c000ad8a:	75 1c                	jne    c000ada8 <delete_dir_entry+0x26a>
/work/x86_os_my/fs/dir.c:303 (discriminator 1)
c000ad8c:	68 62 e9 00 c0       	push   $0xc000e962
c000ad91:	68 4c ea 00 c0       	push   $0xc000ea4c
c000ad96:	68 2f 01 00 00       	push   $0x12f
c000ad9b:	68 c2 e8 00 c0       	push   $0xc000e8c2
c000ada0:	e8 0c 76 ff ff       	call   c00023b1 <panic_spin>
c000ada5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:305
		/* 若该扇区上只有该目录项自己，则将整个扇区回收。如果目录只有第1个扇区，则不能回收 */
		if (dir_entry_cnt == 1 && !is_dir_first_block) {
c000ada8:	80 7d ee 01          	cmpb   $0x1,-0x12(%ebp)
c000adac:	0f 85 43 01 00 00    	jne    c000aef5 <delete_dir_entry+0x3b7>
/work/x86_os_my/fs/dir.c:305 (discriminator 1)
c000adb2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c000adb6:	0f 85 39 01 00 00    	jne    c000aef5 <delete_dir_entry+0x3b7>
/work/x86_os_my/fs/dir.c:307
			/* a 在块位图中回收该块 */
			uint32_t block_bitmap_idx = all_blocks[block_idx] - part->sb->data_start_lba;
c000adbc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000adbf:	8b 94 85 9c fd ff ff 	mov    -0x264(%ebp,%eax,4),%edx
c000adc6:	8b 45 08             	mov    0x8(%ebp),%eax
c000adc9:	8b 40 1c             	mov    0x1c(%eax),%eax
c000adcc:	8b 40 28             	mov    0x28(%eax),%eax
c000adcf:	29 c2                	sub    %eax,%edx
c000add1:	89 d0                	mov    %edx,%eax
c000add3:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/fs/dir.c:308
			bitmap_set(&part->block_bitmap, block_bitmap_idx, 0);
c000add6:	8b 45 08             	mov    0x8(%ebp),%eax
c000add9:	83 c0 20             	add    $0x20,%eax
c000addc:	83 ec 04             	sub    $0x4,%esp
c000addf:	6a 00                	push   $0x0
c000ade1:	ff 75 d0             	pushl  -0x30(%ebp)
c000ade4:	50                   	push   %eax
c000ade5:	e8 35 78 ff ff       	call   c000261f <bitmap_set>
c000adea:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:309
			bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c000aded:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c000adf2:	83 ec 04             	sub    $0x4,%esp
c000adf5:	6a 01                	push   $0x1
c000adf7:	ff 75 d0             	pushl  -0x30(%ebp)
c000adfa:	50                   	push   %eax
c000adfb:	e8 54 e6 ff ff       	call   c0009454 <bitmap_sync>
c000ae00:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:312

			/* b 将块地址从数组 i_sectors 或 从一级间接索引表中去掉 */
			if (block_idx < 12) {	//直接块
c000ae03:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
c000ae07:	77 15                	ja     c000ae1e <delete_dir_entry+0x2e0>
/work/x86_os_my/fs/dir.c:313
				dir_inode->i_sectors[block_idx] = 0;
c000ae09:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000ae0c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000ae0f:	83 c2 04             	add    $0x4,%edx
c000ae12:	c7 04 90 00 00 00 00 	movl   $0x0,(%eax,%edx,4)
/work/x86_os_my/fs/dir.c:305
		}

		/* 在此扇区中找到目录项后，清除该目录项并判断是否回收扇区，随后退出循环直接返回 */
		ASSERT(dir_entry_cnt >= 1);	//此扇区内的目录项个数
		/* 若该扇区上只有该目录项自己，则将整个扇区回收。如果目录只有第1个扇区，则不能回收 */
		if (dir_entry_cnt == 1 && !is_dir_first_block) {
c000ae19:	e9 09 01 00 00       	jmp    c000af27 <delete_dir_entry+0x3e9>
/work/x86_os_my/fs/dir.c:316
			/* b 将块地址从数组 i_sectors 或 从一级间接索引表中去掉 */
			if (block_idx < 12) {	//直接块
				dir_inode->i_sectors[block_idx] = 0;
			} else {	// 在一级间接索引表中擦除该间接块地址
				/*先判断一级间接索引表中间接块的数量：如果仅有这1个间接块，连同间接索引表所在的块一同回收 */
				uint32_t indirect_blocks = 0;
c000ae1e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
/work/x86_os_my/fs/dir.c:317
				uint32_t indirect_block_idx = 12;
c000ae25:	c7 45 cc 0c 00 00 00 	movl   $0xc,-0x34(%ebp)
/work/x86_os_my/fs/dir.c:318
				while (indirect_block_idx < 140) {
c000ae2c:	eb 12                	jmp    c000ae40 <delete_dir_entry+0x302>
/work/x86_os_my/fs/dir.c:319
					if (all_blocks[indirect_block_idx] != 0) {
c000ae2e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c000ae31:	8b 84 85 9c fd ff ff 	mov    -0x264(%ebp,%eax,4),%eax
c000ae38:	85 c0                	test   %eax,%eax
c000ae3a:	74 04                	je     c000ae40 <delete_dir_entry+0x302>
/work/x86_os_my/fs/dir.c:320
						indirect_blocks++;	//间接块的数量
c000ae3c:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
/work/x86_os_my/fs/dir.c:318
				dir_inode->i_sectors[block_idx] = 0;
			} else {	// 在一级间接索引表中擦除该间接块地址
				/*先判断一级间接索引表中间接块的数量：如果仅有这1个间接块，连同间接索引表所在的块一同回收 */
				uint32_t indirect_blocks = 0;
				uint32_t indirect_block_idx = 12;
				while (indirect_block_idx < 140) {
c000ae40:	81 7d cc 8b 00 00 00 	cmpl   $0x8b,-0x34(%ebp)
c000ae47:	76 e5                	jbe    c000ae2e <delete_dir_entry+0x2f0>
/work/x86_os_my/fs/dir.c:323
					if (all_blocks[indirect_block_idx] != 0) {
						indirect_blocks++;	//间接块的数量
					}
				}
				ASSERT(indirect_blocks >= 1);	// 包括当前间接块
c000ae49:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c000ae4d:	75 1c                	jne    c000ae6b <delete_dir_entry+0x32d>
/work/x86_os_my/fs/dir.c:323 (discriminator 1)
c000ae4f:	68 75 e9 00 c0       	push   $0xc000e975
c000ae54:	68 4c ea 00 c0       	push   $0xc000ea4c
c000ae59:	68 43 01 00 00       	push   $0x143
c000ae5e:	68 c2 e8 00 c0       	push   $0xc000e8c2
c000ae63:	e8 49 75 ff ff       	call   c00023b1 <panic_spin>
c000ae68:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:325

				if (indirect_blocks > 1) {	  // 一级间接索引表中还包括其它间接块,仅在索引表中擦除当前间接块地址
c000ae6b:	83 7d e4 01          	cmpl   $0x1,-0x1c(%ebp)
c000ae6f:	76 35                	jbe    c000aea6 <delete_dir_entry+0x368>
/work/x86_os_my/fs/dir.c:326
					all_blocks[block_idx] = 0;
c000ae71:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000ae74:	c7 84 85 9c fd ff ff 	movl   $0x0,-0x264(%ebp,%eax,4)
c000ae7b:	00 00 00 00 
/work/x86_os_my/fs/dir.c:327
					ide_write(part->my_disk, dir_inode->i_sectors[12], all_blocks + 12, 1);
c000ae7f:	8d 85 9c fd ff ff    	lea    -0x264(%ebp),%eax
c000ae85:	83 c0 30             	add    $0x30,%eax
c000ae88:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000ae8b:	8b 4a 40             	mov    0x40(%edx),%ecx
c000ae8e:	8b 55 08             	mov    0x8(%ebp),%edx
c000ae91:	8b 52 08             	mov    0x8(%edx),%edx
c000ae94:	6a 01                	push   $0x1
c000ae96:	50                   	push   %eax
c000ae97:	51                   	push   %ecx
c000ae98:	52                   	push   %edx
c000ae99:	e8 6b b3 ff ff       	call   c0006209 <ide_write>
c000ae9e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:305
		}

		/* 在此扇区中找到目录项后，清除该目录项并判断是否回收扇区，随后退出循环直接返回 */
		ASSERT(dir_entry_cnt >= 1);	//此扇区内的目录项个数
		/* 若该扇区上只有该目录项自己，则将整个扇区回收。如果目录只有第1个扇区，则不能回收 */
		if (dir_entry_cnt == 1 && !is_dir_first_block) {
c000aea1:	e9 81 00 00 00       	jmp    c000af27 <delete_dir_entry+0x3e9>
/work/x86_os_my/fs/dir.c:330
				if (indirect_blocks > 1) {	  // 一级间接索引表中还包括其它间接块,仅在索引表中擦除当前间接块地址
					all_blocks[block_idx] = 0;
					ide_write(part->my_disk, dir_inode->i_sectors[12], all_blocks + 12, 1);
				} else {	// 间接索引表中就当前这1个间接块,直接把间接索引表所在的块回收,然后擦除间接索引表块地址
					/* 回收一级间接索引表所在的块 */
					block_bitmap_idx = dir_inode->i_sectors[12] - part->sb->data_start_lba;
c000aea6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000aea9:	8b 50 40             	mov    0x40(%eax),%edx
c000aeac:	8b 45 08             	mov    0x8(%ebp),%eax
c000aeaf:	8b 40 1c             	mov    0x1c(%eax),%eax
c000aeb2:	8b 40 28             	mov    0x28(%eax),%eax
c000aeb5:	29 c2                	sub    %eax,%edx
c000aeb7:	89 d0                	mov    %edx,%eax
c000aeb9:	89 45 d0             	mov    %eax,-0x30(%ebp)
/work/x86_os_my/fs/dir.c:331
					bitmap_set(&part->block_bitmap, block_bitmap_idx, 0);
c000aebc:	8b 45 08             	mov    0x8(%ebp),%eax
c000aebf:	83 c0 20             	add    $0x20,%eax
c000aec2:	83 ec 04             	sub    $0x4,%esp
c000aec5:	6a 00                	push   $0x0
c000aec7:	ff 75 d0             	pushl  -0x30(%ebp)
c000aeca:	50                   	push   %eax
c000aecb:	e8 4f 77 ff ff       	call   c000261f <bitmap_set>
c000aed0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:332
					bitmap_sync(cur_part, block_bitmap_idx, BLOCK_BITMAP);
c000aed3:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c000aed8:	83 ec 04             	sub    $0x4,%esp
c000aedb:	6a 01                	push   $0x1
c000aedd:	ff 75 d0             	pushl  -0x30(%ebp)
c000aee0:	50                   	push   %eax
c000aee1:	e8 6e e5 ff ff       	call   c0009454 <bitmap_sync>
c000aee6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:335

					/* 将间接索引表地址清0 */
					dir_inode->i_sectors[12] = 0;
c000aee9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000aeec:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)
/work/x86_os_my/fs/dir.c:305
		}

		/* 在此扇区中找到目录项后，清除该目录项并判断是否回收扇区，随后退出循环直接返回 */
		ASSERT(dir_entry_cnt >= 1);	//此扇区内的目录项个数
		/* 若该扇区上只有该目录项自己，则将整个扇区回收。如果目录只有第1个扇区，则不能回收 */
		if (dir_entry_cnt == 1 && !is_dir_first_block) {
c000aef3:	eb 32                	jmp    c000af27 <delete_dir_entry+0x3e9>
/work/x86_os_my/fs/dir.c:340
					dir_inode->i_sectors[12] = 0;
				}
			}
		} else {
		/* 仅将该目录项清空 */
			memset(dir_entry_found, 0, dir_entry_size);	//要删除的目录项在 dir_entry_found 中
c000aef5:	83 ec 04             	sub    $0x4,%esp
c000aef8:	ff 75 dc             	pushl  -0x24(%ebp)
c000aefb:	6a 00                	push   $0x0
c000aefd:	ff 75 f0             	pushl  -0x10(%ebp)
c000af00:	e8 4e 89 ff ff       	call   c0003853 <memset>
c000af05:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:341
			ide_write(part->my_disk, all_blocks[block_idx], io_buf, 1);	//io_buf中是所有的目录项
c000af08:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000af0b:	8b 94 85 9c fd ff ff 	mov    -0x264(%ebp,%eax,4),%edx
c000af12:	8b 45 08             	mov    0x8(%ebp),%eax
c000af15:	8b 40 08             	mov    0x8(%eax),%eax
c000af18:	6a 01                	push   $0x1
c000af1a:	ff 75 14             	pushl  0x14(%ebp)
c000af1d:	52                   	push   %edx
c000af1e:	50                   	push   %eax
c000af1f:	e8 e5 b2 ff ff       	call   c0006209 <ide_write>
c000af24:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:345
		}

		/* 更新inode信息并同步到硬盘 */
		ASSERT(dir_inode->i_size >= dir_entry_size);
c000af27:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000af2a:	8b 40 04             	mov    0x4(%eax),%eax
c000af2d:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c000af30:	73 1c                	jae    c000af4e <delete_dir_entry+0x410>
/work/x86_os_my/fs/dir.c:345 (discriminator 1)
c000af32:	68 8c e9 00 c0       	push   $0xc000e98c
c000af37:	68 4c ea 00 c0       	push   $0xc000ea4c
c000af3c:	68 59 01 00 00       	push   $0x159
c000af41:	68 c2 e8 00 c0       	push   $0xc000e8c2
c000af46:	e8 66 74 ff ff       	call   c00023b1 <panic_spin>
c000af4b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:346
		dir_inode->i_size -= dir_entry_size;
c000af4e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000af51:	8b 40 04             	mov    0x4(%eax),%eax
c000af54:	2b 45 dc             	sub    -0x24(%ebp),%eax
c000af57:	89 c2                	mov    %eax,%edx
c000af59:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000af5c:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/dir.c:347
		memset(io_buf, 0, SECTOR_SIZE * 2);
c000af5f:	83 ec 04             	sub    $0x4,%esp
c000af62:	68 00 04 00 00       	push   $0x400
c000af67:	6a 00                	push   $0x0
c000af69:	ff 75 14             	pushl  0x14(%ebp)
c000af6c:	e8 e2 88 ff ff       	call   c0003853 <memset>
c000af71:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:349
		// 同步目录文件的inode到硬盘
		inode_sync(part, dir_inode, io_buf);
c000af74:	83 ec 04             	sub    $0x4,%esp
c000af77:	ff 75 14             	pushl  0x14(%ebp)
c000af7a:	ff 75 e0             	pushl  -0x20(%ebp)
c000af7d:	ff 75 08             	pushl  0x8(%ebp)
c000af80:	e8 ea dc ff ff       	call   c0008c6f <inode_sync>
c000af85:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:351

		return true;
c000af88:	b8 01 00 00 00       	mov    $0x1,%eax
c000af8d:	eb 12                	jmp    c000afa1 <delete_dir_entry+0x463>
/work/x86_os_my/fs/dir.c:267
	uint8_t dir_entry_idx, dir_entry_cnt;
	bool is_dir_first_block = false;	// 目录的第1个块

	/* 遍历所有块，寻找目录项 */
	block_idx = 0;
	while (block_idx < 140) {
c000af8f:	81 7d f4 8b 00 00 00 	cmpl   $0x8b,-0xc(%ebp)
c000af96:	0f 86 59 fc ff ff    	jbe    c000abf5 <delete_dir_entry+0xb7>
/work/x86_os_my/fs/dir.c:355

		return true;
	}//while (block_idx < 140)

	/* 所有块中未找到则返回false，若出现这种情况应该是 serarch_file 出错了 */
	return false;
c000af9c:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/dir.c:356 (discriminator 1)
}
c000afa1:	8b 7d fc             	mov    -0x4(%ebp),%edi
c000afa4:	c9                   	leave  
c000afa5:	c3                   	ret    

c000afa6 <dir_read>:
dir_read():
/work/x86_os_my/fs/dir.c:361


/* 读取目录,成功返回1个目录项,失败返回NULL */
// dir->dir_pos 记录遍历目录时，"游标"在目录内的偏移【以前读到的目录项】
struct dir_entry* dir_read(struct dir* dir) {
c000afa6:	55                   	push   %ebp
c000afa7:	89 e5                	mov    %esp,%ebp
c000afa9:	57                   	push   %edi
c000afaa:	81 ec 54 02 00 00    	sub    $0x254,%esp
/work/x86_os_my/fs/dir.c:362
	struct dir_entry* dir_e = (struct dir_entry*)dir->dir_buf;
c000afb0:	8b 45 08             	mov    0x8(%ebp),%eax
c000afb3:	83 c0 08             	add    $0x8,%eax
c000afb6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/fs/dir.c:363
	struct inode* dir_inode = dir->inode;
c000afb9:	8b 45 08             	mov    0x8(%ebp),%eax
c000afbc:	8b 00                	mov    (%eax),%eax
c000afbe:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/fs/dir.c:364
	uint32_t all_blocks[140] = {0}, block_cnt = 12;
c000afc1:	8d 95 a8 fd ff ff    	lea    -0x258(%ebp),%edx
c000afc7:	b8 00 00 00 00       	mov    $0x0,%eax
c000afcc:	b9 8c 00 00 00       	mov    $0x8c,%ecx
c000afd1:	89 d7                	mov    %edx,%edi
c000afd3:	f3 ab                	rep stos %eax,%es:(%edi)
c000afd5:	c7 45 f4 0c 00 00 00 	movl   $0xc,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:365
	uint32_t block_idx = 0, dir_entry_idx = 0;
c000afdc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c000afe3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:367
	// 所有数据块的地址，汇集到 all_blocks 中
	while (block_idx < 12) {
c000afea:	eb 1a                	jmp    c000b006 <dir_read+0x60>
/work/x86_os_my/fs/dir.c:368
		all_blocks[block_idx] = dir_inode->i_sectors[block_idx];
c000afec:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000afef:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000aff2:	83 c2 04             	add    $0x4,%edx
c000aff5:	8b 14 90             	mov    (%eax,%edx,4),%edx
c000aff8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000affb:	89 94 85 a8 fd ff ff 	mov    %edx,-0x258(%ebp,%eax,4)
/work/x86_os_my/fs/dir.c:369
		block_idx++;
c000b002:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:367
	struct dir_entry* dir_e = (struct dir_entry*)dir->dir_buf;
	struct inode* dir_inode = dir->inode;
	uint32_t all_blocks[140] = {0}, block_cnt = 12;
	uint32_t block_idx = 0, dir_entry_idx = 0;
	// 所有数据块的地址，汇集到 all_blocks 中
	while (block_idx < 12) {
c000b006:	83 7d f0 0b          	cmpl   $0xb,-0x10(%ebp)
c000b00a:	76 e0                	jbe    c000afec <dir_read+0x46>
/work/x86_os_my/fs/dir.c:371
		all_blocks[block_idx] = dir_inode->i_sectors[block_idx];
		block_idx++;
	}
	if (dir_inode->i_sectors[12] != 0) {
c000b00c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000b00f:	8b 40 40             	mov    0x40(%eax),%eax
c000b012:	85 c0                	test   %eax,%eax
c000b014:	74 2c                	je     c000b042 <dir_read+0x9c>
/work/x86_os_my/fs/dir.c:372
		ide_read(cur_part->my_disk, dir_inode->i_sectors[12], all_blocks + 12, 1);
c000b016:	8d 85 a8 fd ff ff    	lea    -0x258(%ebp),%eax
c000b01c:	83 c0 30             	add    $0x30,%eax
c000b01f:	8b 55 e0             	mov    -0x20(%ebp),%edx
c000b022:	8b 4a 40             	mov    0x40(%edx),%ecx
c000b025:	8b 15 d0 2f 01 c0    	mov    0xc0012fd0,%edx
c000b02b:	8b 52 08             	mov    0x8(%edx),%edx
c000b02e:	6a 01                	push   $0x1
c000b030:	50                   	push   %eax
c000b031:	51                   	push   %ecx
c000b032:	52                   	push   %edx
c000b033:	e8 5d b0 ff ff       	call   c0006095 <ide_read>
c000b038:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:373
		block_cnt = 140;
c000b03b:	c7 45 f4 8c 00 00 00 	movl   $0x8c,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:375
	}
	block_idx = 0;
c000b042:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:377

	uint32_t cur_dir_entry_pos = 0;	// 当前目录项的偏移,此项用来判断是否是之前已经返回过的目录项
c000b049:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
/work/x86_os_my/fs/dir.c:378
	uint32_t dir_entry_size = cur_part->sb->dir_entry_size;
c000b050:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c000b055:	8b 40 1c             	mov    0x1c(%eax),%eax
c000b058:	8b 40 30             	mov    0x30(%eax),%eax
c000b05b:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/fs/dir.c:379
	uint32_t dir_entrys_per_sec = SECTOR_SIZE / dir_entry_size;	// 1扇区内可容纳的目录项个数
c000b05e:	b8 00 02 00 00       	mov    $0x200,%eax
c000b063:	ba 00 00 00 00       	mov    $0x0,%edx
c000b068:	f7 75 dc             	divl   -0x24(%ebp)
c000b06b:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/fs/dir.c:381
	/* 因为此目录内可能删除了某些文件或子目录,所以要遍历所有块 */
	while (block_idx < block_cnt) {
c000b06e:	e9 05 01 00 00       	jmp    c000b178 <dir_read+0x1d2>
/work/x86_os_my/fs/dir.c:382
		if (dir->dir_pos >= dir_inode->i_size) {	//dir_pos 记录遍历目录时，"游标"在目录内的偏移
c000b073:	8b 45 08             	mov    0x8(%ebp),%eax
c000b076:	8b 50 04             	mov    0x4(%eax),%edx
c000b079:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000b07c:	8b 40 04             	mov    0x4(%eax),%eax
c000b07f:	39 c2                	cmp    %eax,%edx
c000b081:	72 0a                	jb     c000b08d <dir_read+0xe7>
/work/x86_os_my/fs/dir.c:383
			return NULL;
c000b083:	b8 00 00 00 00       	mov    $0x0,%eax
c000b088:	e9 fc 00 00 00       	jmp    c000b189 <dir_read+0x1e3>
/work/x86_os_my/fs/dir.c:385
		}
		if (all_blocks[block_idx] == 0) {	// 如果此块地址为0,即空块,继续读出下一块
c000b08d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b090:	8b 84 85 a8 fd ff ff 	mov    -0x258(%ebp,%eax,4),%eax
c000b097:	85 c0                	test   %eax,%eax
c000b099:	75 09                	jne    c000b0a4 <dir_read+0xfe>
/work/x86_os_my/fs/dir.c:386
			block_idx++;
c000b09b:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:387
			continue;
c000b09f:	e9 d4 00 00 00       	jmp    c000b178 <dir_read+0x1d2>
/work/x86_os_my/fs/dir.c:389
		}
		memset(dir_e, 0, SECTOR_SIZE);
c000b0a4:	83 ec 04             	sub    $0x4,%esp
c000b0a7:	68 00 02 00 00       	push   $0x200
c000b0ac:	6a 00                	push   $0x0
c000b0ae:	ff 75 e4             	pushl  -0x1c(%ebp)
c000b0b1:	e8 9d 87 ff ff       	call   c0003853 <memset>
c000b0b6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:390
		ide_read(cur_part->my_disk, all_blocks[block_idx], dir_e, 1);
c000b0b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b0bc:	8b 94 85 a8 fd ff ff 	mov    -0x258(%ebp,%eax,4),%edx
c000b0c3:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c000b0c8:	8b 40 08             	mov    0x8(%eax),%eax
c000b0cb:	6a 01                	push   $0x1
c000b0cd:	ff 75 e4             	pushl  -0x1c(%ebp)
c000b0d0:	52                   	push   %edx
c000b0d1:	50                   	push   %eax
c000b0d2:	e8 be af ff ff       	call   c0006095 <ide_read>
c000b0d7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:391
		dir_entry_idx = 0;
c000b0da:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:393
		/* 遍历扇区内所有目录项 */
		while (dir_entry_idx < dir_entrys_per_sec) {
c000b0e1:	e9 82 00 00 00       	jmp    c000b168 <dir_read+0x1c2>
/work/x86_os_my/fs/dir.c:394
			if ((dir_e + dir_entry_idx)->f_type) {	 // 如果f_type不等于0,即不等于FT_UNKNOWN
c000b0e6:	8b 55 ec             	mov    -0x14(%ebp),%edx
c000b0e9:	89 d0                	mov    %edx,%eax
c000b0eb:	01 c0                	add    %eax,%eax
c000b0ed:	01 d0                	add    %edx,%eax
c000b0ef:	c1 e0 03             	shl    $0x3,%eax
c000b0f2:	89 c2                	mov    %eax,%edx
c000b0f4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000b0f7:	01 d0                	add    %edx,%eax
c000b0f9:	8b 40 14             	mov    0x14(%eax),%eax
c000b0fc:	85 c0                	test   %eax,%eax
c000b0fe:	74 64                	je     c000b164 <dir_read+0x1be>
/work/x86_os_my/fs/dir.c:396
				/* 判断是不是最新的目录项,避免返回曾经已经返回过的目录项 */
				if (cur_dir_entry_pos < dir->dir_pos) {
c000b100:	8b 45 08             	mov    0x8(%ebp),%eax
c000b103:	8b 40 04             	mov    0x4(%eax),%eax
c000b106:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c000b109:	76 0c                	jbe    c000b117 <dir_read+0x171>
/work/x86_os_my/fs/dir.c:397
					cur_dir_entry_pos += dir_entry_size;
c000b10b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000b10e:	01 45 e8             	add    %eax,-0x18(%ebp)
/work/x86_os_my/fs/dir.c:398
					dir_entry_idx++;
c000b111:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:399
					continue;
c000b115:	eb 51                	jmp    c000b168 <dir_read+0x1c2>
/work/x86_os_my/fs/dir.c:401
				}
				ASSERT(cur_dir_entry_pos == dir->dir_pos);
c000b117:	8b 45 08             	mov    0x8(%ebp),%eax
c000b11a:	8b 40 04             	mov    0x4(%eax),%eax
c000b11d:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c000b120:	74 1c                	je     c000b13e <dir_read+0x198>
/work/x86_os_my/fs/dir.c:401 (discriminator 1)
c000b122:	68 b0 e9 00 c0       	push   $0xc000e9b0
c000b127:	68 60 ea 00 c0       	push   $0xc000ea60
c000b12c:	68 91 01 00 00       	push   $0x191
c000b131:	68 c2 e8 00 c0       	push   $0xc000e8c2
c000b136:	e8 76 72 ff ff       	call   c00023b1 <panic_spin>
c000b13b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:402
				dir->dir_pos += dir_entry_size;	      // 更新为新位置,即下一个返回的目录项地址
c000b13e:	8b 45 08             	mov    0x8(%ebp),%eax
c000b141:	8b 50 04             	mov    0x4(%eax),%edx
c000b144:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000b147:	01 c2                	add    %eax,%edx
c000b149:	8b 45 08             	mov    0x8(%ebp),%eax
c000b14c:	89 50 04             	mov    %edx,0x4(%eax)
/work/x86_os_my/fs/dir.c:403
				return dir_e + dir_entry_idx;
c000b14f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c000b152:	89 d0                	mov    %edx,%eax
c000b154:	01 c0                	add    %eax,%eax
c000b156:	01 d0                	add    %edx,%eax
c000b158:	c1 e0 03             	shl    $0x3,%eax
c000b15b:	89 c2                	mov    %eax,%edx
c000b15d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000b160:	01 d0                	add    %edx,%eax
c000b162:	eb 25                	jmp    c000b189 <dir_read+0x1e3>
/work/x86_os_my/fs/dir.c:405
			}
			dir_entry_idx++;
c000b164:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:393
		}
		memset(dir_e, 0, SECTOR_SIZE);
		ide_read(cur_part->my_disk, all_blocks[block_idx], dir_e, 1);
		dir_entry_idx = 0;
		/* 遍历扇区内所有目录项 */
		while (dir_entry_idx < dir_entrys_per_sec) {
c000b168:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000b16b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
c000b16e:	0f 82 72 ff ff ff    	jb     c000b0e6 <dir_read+0x140>
/work/x86_os_my/fs/dir.c:407
				dir->dir_pos += dir_entry_size;	      // 更新为新位置,即下一个返回的目录项地址
				return dir_e + dir_entry_idx;
			}
			dir_entry_idx++;
		}
		block_idx++;
c000b174:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:381

	uint32_t cur_dir_entry_pos = 0;	// 当前目录项的偏移,此项用来判断是否是之前已经返回过的目录项
	uint32_t dir_entry_size = cur_part->sb->dir_entry_size;
	uint32_t dir_entrys_per_sec = SECTOR_SIZE / dir_entry_size;	// 1扇区内可容纳的目录项个数
	/* 因为此目录内可能删除了某些文件或子目录,所以要遍历所有块 */
	while (block_idx < block_cnt) {
c000b178:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b17b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c000b17e:	0f 82 ef fe ff ff    	jb     c000b073 <dir_read+0xcd>
/work/x86_os_my/fs/dir.c:409
			}
			dir_entry_idx++;
		}
		block_idx++;
	}
	return NULL;
c000b184:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/dir.c:410 (discriminator 1)
}
c000b189:	8b 7d fc             	mov    -0x4(%ebp),%edi
c000b18c:	c9                   	leave  
c000b18d:	c3                   	ret    

c000b18e <dir_is_empty>:
dir_is_empty():
/work/x86_os_my/fs/dir.c:413

/* 判断目录是否为空 */
bool dir_is_empty(struct dir* dir) {
c000b18e:	55                   	push   %ebp
c000b18f:	89 e5                	mov    %esp,%ebp
c000b191:	83 ec 10             	sub    $0x10,%esp
/work/x86_os_my/fs/dir.c:414
	struct inode* dir_inode = dir->inode;
c000b194:	8b 45 08             	mov    0x8(%ebp),%eax
c000b197:	8b 00                	mov    (%eax),%eax
c000b199:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/fs/dir.c:416
	/* 若目录下只有.和..这两个目录项则目录为空 */
	return (dir_inode->i_size == cur_part->sb->dir_entry_size * 2);
c000b19c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000b19f:	8b 50 04             	mov    0x4(%eax),%edx
c000b1a2:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c000b1a7:	8b 40 1c             	mov    0x1c(%eax),%eax
c000b1aa:	8b 40 30             	mov    0x30(%eax),%eax
c000b1ad:	01 c0                	add    %eax,%eax
c000b1af:	39 c2                	cmp    %eax,%edx
c000b1b1:	0f 94 c0             	sete   %al
c000b1b4:	0f b6 c0             	movzbl %al,%eax
/work/x86_os_my/fs/dir.c:417
}
c000b1b7:	c9                   	leave  
c000b1b8:	c3                   	ret    

c000b1b9 <dir_remove>:
dir_remove():
/work/x86_os_my/fs/dir.c:420

/* 在父目录parent_dir中删除child_dir */
int32_t dir_remove(struct dir* parent_dir, struct dir* child_dir) {
c000b1b9:	55                   	push   %ebp
c000b1ba:	89 e5                	mov    %esp,%ebp
c000b1bc:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/fs/dir.c:421
	struct inode* child_dir_inode  = child_dir->inode;
c000b1bf:	8b 45 0c             	mov    0xc(%ebp),%eax
c000b1c2:	8b 00                	mov    (%eax),%eax
c000b1c4:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/fs/dir.c:423
	/* 空目录只在inode->i_sectors[0]中有扇区,其它扇区都应该为空 */
	int32_t block_idx = 1;
c000b1c7:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:424
	while (block_idx < 13) {
c000b1ce:	eb 30                	jmp    c000b200 <dir_remove+0x47>
/work/x86_os_my/fs/dir.c:425
		ASSERT(child_dir_inode->i_sectors[block_idx] == 0);
c000b1d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b1d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000b1d6:	83 c2 04             	add    $0x4,%edx
c000b1d9:	8b 04 90             	mov    (%eax,%edx,4),%eax
c000b1dc:	85 c0                	test   %eax,%eax
c000b1de:	74 1c                	je     c000b1fc <dir_remove+0x43>
/work/x86_os_my/fs/dir.c:425 (discriminator 1)
c000b1e0:	68 d4 e9 00 c0       	push   $0xc000e9d4
c000b1e5:	68 6c ea 00 c0       	push   $0xc000ea6c
c000b1ea:	68 a9 01 00 00       	push   $0x1a9
c000b1ef:	68 c2 e8 00 c0       	push   $0xc000e8c2
c000b1f4:	e8 b8 71 ff ff       	call   c00023b1 <panic_spin>
c000b1f9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:426
		block_idx++;
c000b1fc:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/fs/dir.c:424
/* 在父目录parent_dir中删除child_dir */
int32_t dir_remove(struct dir* parent_dir, struct dir* child_dir) {
	struct inode* child_dir_inode  = child_dir->inode;
	/* 空目录只在inode->i_sectors[0]中有扇区,其它扇区都应该为空 */
	int32_t block_idx = 1;
	while (block_idx < 13) {
c000b200:	83 7d f4 0c          	cmpl   $0xc,-0xc(%ebp)
c000b204:	7e ca                	jle    c000b1d0 <dir_remove+0x17>
/work/x86_os_my/fs/dir.c:428
		ASSERT(child_dir_inode->i_sectors[block_idx] == 0);
		block_idx++;
	}
	void* io_buf = sys_malloc(SECTOR_SIZE * 2);
c000b206:	83 ec 0c             	sub    $0xc,%esp
c000b209:	68 00 04 00 00       	push   $0x400
c000b20e:	e8 49 7b ff ff       	call   c0002d5c <sys_malloc>
c000b213:	83 c4 10             	add    $0x10,%esp
c000b216:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/fs/dir.c:429
	if (io_buf == NULL) {
c000b219:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c000b21d:	75 17                	jne    c000b236 <dir_remove+0x7d>
/work/x86_os_my/fs/dir.c:430
		printk("dir_remove: malloc for io_buf failed\n");
c000b21f:	83 ec 0c             	sub    $0xc,%esp
c000b222:	68 00 ea 00 c0       	push   $0xc000ea00
c000b227:	e8 e2 b8 ff ff       	call   c0006b0e <printk>
c000b22c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:431
		return -1;
c000b22f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000b234:	eb 44                	jmp    c000b27a <dir_remove+0xc1>
/work/x86_os_my/fs/dir.c:435
	}

	/* 在父目录parent_dir中删除子目录child_dir对应的"目录项" */
	delete_dir_entry(cur_part, parent_dir, child_dir_inode->i_no, io_buf);
c000b236:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b239:	8b 10                	mov    (%eax),%edx
c000b23b:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c000b240:	ff 75 ec             	pushl  -0x14(%ebp)
c000b243:	52                   	push   %edx
c000b244:	ff 75 08             	pushl  0x8(%ebp)
c000b247:	50                   	push   %eax
c000b248:	e8 f1 f8 ff ff       	call   c000ab3e <delete_dir_entry>
c000b24d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:438

	/* 回收inode中i_secotrs中所占用的扇区,并同步inode_bitmap和block_bitmap */
	inode_release(cur_part, child_dir_inode->i_no);
c000b250:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b253:	8b 10                	mov    (%eax),%edx
c000b255:	a1 d0 2f 01 c0       	mov    0xc0012fd0,%eax
c000b25a:	83 ec 08             	sub    $0x8,%esp
c000b25d:	52                   	push   %edx
c000b25e:	50                   	push   %eax
c000b25f:	e8 06 de ff ff       	call   c000906a <inode_release>
c000b264:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:439
	sys_free(io_buf);
c000b267:	83 ec 0c             	sub    $0xc,%esp
c000b26a:	ff 75 ec             	pushl  -0x14(%ebp)
c000b26d:	e8 17 81 ff ff       	call   c0003389 <sys_free>
c000b272:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/fs/dir.c:440
	return 0;
c000b275:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/fs/dir.c:441
}
c000b27a:	c9                   	leave  
c000b27b:	c3                   	ret    

c000b27c <copy_pcb_vaddrbitmap_stack0>:
copy_pcb_vaddrbitmap_stack0():
/work/x86_os_my/userprog/fork.c:13
#include "file.h"

extern void intr_exit(void);

/* 将父进程的pcb、虚拟地址位图拷贝给子进程 */
static int32_t copy_pcb_vaddrbitmap_stack0(struct task_struct* child_thread, struct task_struct* parent_thread) {
c000b27c:	55                   	push   %ebp
c000b27d:	89 e5                	mov    %esp,%ebp
c000b27f:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/fork.c:17
	/* a 复制pcb所在的整个页,里面包含进程pcb信息 + 0特权级的栈
	栈里面包含了返回地址
	然后再单独修改个别部分 */
	memcpy(child_thread, parent_thread, PG_SIZE);
c000b282:	83 ec 04             	sub    $0x4,%esp
c000b285:	68 00 10 00 00       	push   $0x1000
c000b28a:	ff 75 0c             	pushl  0xc(%ebp)
c000b28d:	ff 75 08             	pushl  0x8(%ebp)
c000b290:	e8 10 86 ff ff       	call   c00038a5 <memcpy>
c000b295:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:19
	// 初始化PCB部分
	child_thread->pid = fork_pid();
c000b298:	e8 0d 8a ff ff       	call   c0003caa <fork_pid>
c000b29d:	89 c2                	mov    %eax,%edx
c000b29f:	8b 45 08             	mov    0x8(%ebp),%eax
c000b2a2:	66 89 50 04          	mov    %dx,0x4(%eax)
/work/x86_os_my/userprog/fork.c:20
	child_thread->elapsed_ticks = 0;
c000b2a6:	8b 45 08             	mov    0x8(%ebp),%eax
c000b2a9:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
/work/x86_os_my/userprog/fork.c:21
	child_thread->status = TASK_READY;
c000b2b0:	8b 45 08             	mov    0x8(%ebp),%eax
c000b2b3:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
/work/x86_os_my/userprog/fork.c:22
	child_thread->ticks = child_thread->priority;   // 为新进程把时间片充满
c000b2ba:	8b 45 08             	mov    0x8(%ebp),%eax
c000b2bd:	0f b6 50 1c          	movzbl 0x1c(%eax),%edx
c000b2c1:	8b 45 08             	mov    0x8(%ebp),%eax
c000b2c4:	88 50 1d             	mov    %dl,0x1d(%eax)
/work/x86_os_my/userprog/fork.c:23
	child_thread->parent_pid = parent_thread->pid;
c000b2c7:	8b 45 0c             	mov    0xc(%ebp),%eax
c000b2ca:	0f b7 50 04          	movzwl 0x4(%eax),%edx
c000b2ce:	8b 45 08             	mov    0x8(%ebp),%eax
c000b2d1:	66 89 90 10 01 00 00 	mov    %dx,0x110(%eax)
/work/x86_os_my/userprog/fork.c:24
	child_thread->general_tag.prev = child_thread->general_tag.next = NULL;
c000b2d8:	8b 45 08             	mov    0x8(%ebp),%eax
c000b2db:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
c000b2e2:	8b 45 08             	mov    0x8(%ebp),%eax
c000b2e5:	8b 50 48             	mov    0x48(%eax),%edx
c000b2e8:	8b 45 08             	mov    0x8(%ebp),%eax
c000b2eb:	89 50 44             	mov    %edx,0x44(%eax)
/work/x86_os_my/userprog/fork.c:25
	child_thread->all_list_tag.prev = child_thread->all_list_tag.next = NULL;
c000b2ee:	8b 45 08             	mov    0x8(%ebp),%eax
c000b2f1:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
c000b2f8:	8b 45 08             	mov    0x8(%ebp),%eax
c000b2fb:	8b 50 50             	mov    0x50(%eax),%edx
c000b2fe:	8b 45 08             	mov    0x8(%ebp),%eax
c000b301:	89 50 4c             	mov    %edx,0x4c(%eax)
/work/x86_os_my/userprog/fork.c:27
	// 子进程内存块（堆内存）
	block_desc_init(child_thread->u_block_desc);
c000b304:	8b 45 08             	mov    0x8(%ebp),%eax
c000b307:	83 c0 64             	add    $0x64,%eax
c000b30a:	83 ec 0c             	sub    $0xc,%esp
c000b30d:	50                   	push   %eax
c000b30e:	e8 5c 84 ff ff       	call   c000376f <block_desc_init>
c000b313:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:29
	/* b 复制父进程的虚拟地址池的位图  可执行程序入口地址：USER_VADDR_START==0x8048000 */
	uint32_t bitmap_pg_cnt = DIV_ROUND_UP((0xc0000000 - USER_VADDR_START) / PG_SIZE / 8 , PG_SIZE);
c000b316:	c7 45 f4 17 00 00 00 	movl   $0x17,-0xc(%ebp)
/work/x86_os_my/userprog/fork.c:30
	void* vaddr_btmp = get_kernel_pages(bitmap_pg_cnt);
c000b31d:	83 ec 0c             	sub    $0xc,%esp
c000b320:	ff 75 f4             	pushl  -0xc(%ebp)
c000b323:	e8 31 77 ff ff       	call   c0002a59 <get_kernel_pages>
c000b328:	83 c4 10             	add    $0x10,%esp
c000b32b:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/fork.c:31
	if (vaddr_btmp == NULL)
c000b32e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c000b332:	75 07                	jne    c000b33b <copy_pcb_vaddrbitmap_stack0+0xbf>
/work/x86_os_my/userprog/fork.c:32
		return -1;
c000b334:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000b339:	eb 2c                	jmp    c000b367 <copy_pcb_vaddrbitmap_stack0+0xeb>
/work/x86_os_my/userprog/fork.c:35
	/* 此时child_thread->userprog_vaddr.vaddr_bitmap.bits还是指向父进程虚拟地址的位图地址
	 * 下面将child_thread->userprog_vaddr.vaddr_bitmap.bits指向自己的位图vaddr_btmp */
	memcpy(vaddr_btmp, child_thread->userprog_vaddr.vaddr_bitmap.bits, bitmap_pg_cnt * PG_SIZE);	//复制父进程的虚拟地址位图
c000b33b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b33e:	c1 e0 0c             	shl    $0xc,%eax
c000b341:	89 c2                	mov    %eax,%edx
c000b343:	8b 45 08             	mov    0x8(%ebp),%eax
c000b346:	8b 40 5c             	mov    0x5c(%eax),%eax
c000b349:	83 ec 04             	sub    $0x4,%esp
c000b34c:	52                   	push   %edx
c000b34d:	50                   	push   %eax
c000b34e:	ff 75 f0             	pushl  -0x10(%ebp)
c000b351:	e8 4f 85 ff ff       	call   c00038a5 <memcpy>
c000b356:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:36
	child_thread->userprog_vaddr.vaddr_bitmap.bits = vaddr_btmp;	//指向子进程自己的了
c000b359:	8b 45 08             	mov    0x8(%ebp),%eax
c000b35c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000b35f:	89 50 5c             	mov    %edx,0x5c(%eax)
/work/x86_os_my/userprog/fork.c:38

	return 0;
c000b362:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/userprog/fork.c:39
}
c000b367:	c9                   	leave  
c000b368:	c3                   	ret    

c000b369 <copy_body_stack3>:
copy_body_stack3():
/work/x86_os_my/userprog/fork.c:72
+----------------------+
|          text        |
+----------------------+ 0
    C程序内存布局
*/
static void copy_body_stack3(struct task_struct* child_thread, struct task_struct* parent_thread, void* buf_page) {
c000b369:	55                   	push   %ebp
c000b36a:	89 e5                	mov    %esp,%ebp
c000b36c:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/userprog/fork.c:73
	uint8_t* vaddr_btmp = parent_thread->userprog_vaddr.vaddr_bitmap.bits;
c000b36f:	8b 45 0c             	mov    0xc(%ebp),%eax
c000b372:	8b 40 5c             	mov    0x5c(%eax),%eax
c000b375:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/userprog/fork.c:74
	uint32_t btmp_bytes_len = parent_thread->userprog_vaddr.vaddr_bitmap.btmp_bytes_len;
c000b378:	8b 45 0c             	mov    0xc(%ebp),%eax
c000b37b:	8b 40 58             	mov    0x58(%eax),%eax
c000b37e:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/userprog/fork.c:75
	uint32_t vaddr_start = parent_thread->userprog_vaddr.vaddr_start;
c000b381:	8b 45 0c             	mov    0xc(%ebp),%eax
c000b384:	8b 40 60             	mov    0x60(%eax),%eax
c000b387:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/userprog/fork.c:76
	uint32_t idx_byte = 0;
c000b38a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/userprog/fork.c:77
	uint32_t idx_bit = 0;
c000b391:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/userprog/fork.c:78
	uint32_t prog_vaddr = 0;
c000b398:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
/work/x86_os_my/userprog/fork.c:81

	/* 在父进程的用户空间中查找已有数据的页，按页一一拷贝给子进程 */
	while (idx_byte < btmp_bytes_len) {
c000b39f:	e9 c5 00 00 00       	jmp    c000b469 <copy_body_stack3+0x100>
/work/x86_os_my/userprog/fork.c:82
		if (vaddr_btmp[idx_byte]) {
c000b3a4:	8b 55 ec             	mov    -0x14(%ebp),%edx
c000b3a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b3aa:	01 d0                	add    %edx,%eax
c000b3ac:	0f b6 00             	movzbl (%eax),%eax
c000b3af:	84 c0                	test   %al,%al
c000b3b1:	0f 84 ae 00 00 00    	je     c000b465 <copy_body_stack3+0xfc>
/work/x86_os_my/userprog/fork.c:83
			idx_bit = 0;
c000b3b7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/userprog/fork.c:84
			while (idx_bit < 8) {
c000b3be:	e9 98 00 00 00       	jmp    c000b45b <copy_body_stack3+0xf2>
/work/x86_os_my/userprog/fork.c:85
				if ((BITMAP_MASK << idx_bit) & vaddr_btmp[idx_byte]) {	//BITMAP_MASK=1
c000b3c3:	8b 55 ec             	mov    -0x14(%ebp),%edx
c000b3c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b3c9:	01 d0                	add    %edx,%eax
c000b3cb:	0f b6 00             	movzbl (%eax),%eax
c000b3ce:	0f b6 d0             	movzbl %al,%edx
c000b3d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b3d4:	89 c1                	mov    %eax,%ecx
c000b3d6:	d3 fa                	sar    %cl,%edx
c000b3d8:	89 d0                	mov    %edx,%eax
c000b3da:	83 e0 01             	and    $0x1,%eax
c000b3dd:	85 c0                	test   %eax,%eax
c000b3df:	74 76                	je     c000b457 <copy_body_stack3+0xee>
/work/x86_os_my/userprog/fork.c:86
					prog_vaddr = (idx_byte * 8 + idx_bit) * PG_SIZE + vaddr_start;
c000b3e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b3e4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c000b3eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b3ee:	01 d0                	add    %edx,%eax
c000b3f0:	c1 e0 0c             	shl    $0xc,%eax
c000b3f3:	89 c2                	mov    %eax,%edx
c000b3f5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000b3f8:	01 d0                	add    %edx,%eax
c000b3fa:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/userprog/fork.c:91
					/* 下面的操作是将父进程用户空间中的数据通过内核空间做中转,最终复制到子进程的用户空间 */

					/* a 将父进程在用户空间中的数据复制到"内核缓冲区buf_page"
					目的：下面切换到子进程的页表后,还能访问到父进程的数据*/
					memcpy(buf_page, (void*)prog_vaddr, PG_SIZE);
c000b3fd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000b400:	83 ec 04             	sub    $0x4,%esp
c000b403:	68 00 10 00 00       	push   $0x1000
c000b408:	50                   	push   %eax
c000b409:	ff 75 10             	pushl  0x10(%ebp)
c000b40c:	e8 94 84 ff ff       	call   c00038a5 <memcpy>
c000b411:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:94

					/* b 将页表切换到子进程，下面申请内存的函数，将pte及pde安装在子进程的页表中 */
					page_dir_activate(child_thread);
c000b414:	83 ec 0c             	sub    $0xc,%esp
c000b417:	ff 75 08             	pushl  0x8(%ebp)
c000b41a:	e8 7e a0 ff ff       	call   c000549d <page_dir_activate>
c000b41f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:96
					/* c 申请虚拟地址prog_vaddr */
					get_a_page_without_opvaddrbitmap(PF_USER, prog_vaddr);	//位图已经拷贝过了，当然不用再操作了...
c000b422:	83 ec 08             	sub    $0x8,%esp
c000b425:	ff 75 e0             	pushl  -0x20(%ebp)
c000b428:	6a 02                	push   $0x2
c000b42a:	e8 50 78 ff ff       	call   c0002c7f <get_a_page_without_opvaddrbitmap>
c000b42f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:99

					/* d 从内核缓冲区中将父进程数据复制到子进程的用户空间 */
					memcpy((void*)prog_vaddr, buf_page, PG_SIZE);
c000b432:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000b435:	83 ec 04             	sub    $0x4,%esp
c000b438:	68 00 10 00 00       	push   $0x1000
c000b43d:	ff 75 10             	pushl  0x10(%ebp)
c000b440:	50                   	push   %eax
c000b441:	e8 5f 84 ff ff       	call   c00038a5 <memcpy>
c000b446:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:102

					/* e 恢复父进程页表 */
					page_dir_activate(parent_thread);
c000b449:	83 ec 0c             	sub    $0xc,%esp
c000b44c:	ff 75 0c             	pushl  0xc(%ebp)
c000b44f:	e8 49 a0 ff ff       	call   c000549d <page_dir_activate>
c000b454:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:104
				}
				idx_bit++;
c000b457:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/userprog/fork.c:84

	/* 在父进程的用户空间中查找已有数据的页，按页一一拷贝给子进程 */
	while (idx_byte < btmp_bytes_len) {
		if (vaddr_btmp[idx_byte]) {
			idx_bit = 0;
			while (idx_bit < 8) {
c000b45b:	83 7d f0 07          	cmpl   $0x7,-0x10(%ebp)
c000b45f:	0f 86 5e ff ff ff    	jbe    c000b3c3 <copy_body_stack3+0x5a>
/work/x86_os_my/userprog/fork.c:107
					page_dir_activate(parent_thread);
				}
				idx_bit++;
			}
		}
		idx_byte++;
c000b465:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/userprog/fork.c:81
	uint32_t idx_byte = 0;
	uint32_t idx_bit = 0;
	uint32_t prog_vaddr = 0;

	/* 在父进程的用户空间中查找已有数据的页，按页一一拷贝给子进程 */
	while (idx_byte < btmp_bytes_len) {
c000b469:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b46c:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c000b46f:	0f 82 2f ff ff ff    	jb     c000b3a4 <copy_body_stack3+0x3b>
/work/x86_os_my/userprog/fork.c:109
				idx_bit++;
			}
		}
		idx_byte++;
	}
}
c000b475:	90                   	nop
c000b476:	c9                   	leave  
c000b477:	c3                   	ret    

c000b478 <build_child_stack>:
build_child_stack():
/work/x86_os_my/userprog/fork.c:172
为了让子进程也能继续 fork 之后的代码运行，必须让它同父进程一样，从中断退出，也就是要经过 intr_exit。

子进程是由调度器 schedule 调度执行的，它要用到 switch_to 函数，
而 switch_to 函数要从栈 thread_stack 中恢复上下文，因此我们要想办法构建出合适的 thread_stack
*/
static int32_t build_child_stack(struct task_struct* child_thread) {
c000b478:	55                   	push   %ebp
c000b479:	89 e5                	mov    %esp,%ebp
c000b47b:	83 ec 20             	sub    $0x20,%esp
/work/x86_os_my/userprog/fork.c:175
	/* a 使子进程pid返回值为0 */
	/* 获取子进程0级栈栈顶 */
	struct intr_stack* intr_0_stack = (struct intr_stack*)((uint32_t)child_thread + PG_SIZE - sizeof(struct intr_stack));
c000b47e:	8b 45 08             	mov    0x8(%ebp),%eax
c000b481:	05 b4 0f 00 00       	add    $0xfb4,%eax
c000b486:	89 45 fc             	mov    %eax,-0x4(%ebp)
/work/x86_os_my/userprog/fork.c:177
	/* 修改子进程的返回值为0 */
	intr_0_stack->eax = 0;	//根据 abi 约定，eax 寄存器中是函数返回值!!!
c000b489:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000b48c:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
/work/x86_os_my/userprog/fork.c:180

	/* b 为 switch_to 构建线程栈 struct thread_stack,将其构建在紧临intr_stack之下的空间*/
	uint32_t* ret_addr_in_thread_stack  = (uint32_t*)intr_0_stack - 1;	// 任务切换后新任务的返回地址 eip
c000b493:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000b496:	83 e8 04             	sub    $0x4,%eax
c000b499:	89 45 f8             	mov    %eax,-0x8(%ebp)
/work/x86_os_my/userprog/fork.c:183

	/***   这三行不是必要的,只是为了梳理 thread_stack 中的关系 ***/
	uint32_t* esi_ptr_in_thread_stack = (uint32_t*)intr_0_stack - 2;
c000b49c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000b49f:	83 e8 08             	sub    $0x8,%eax
c000b4a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/fork.c:184
	uint32_t* edi_ptr_in_thread_stack = (uint32_t*)intr_0_stack - 3;
c000b4a5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000b4a8:	83 e8 0c             	sub    $0xc,%eax
c000b4ab:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/fork.c:185
	uint32_t* ebx_ptr_in_thread_stack = (uint32_t*)intr_0_stack - 4;
c000b4ae:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000b4b1:	83 e8 10             	sub    $0x10,%eax
c000b4b4:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/userprog/fork.c:192

	/* ebp 在 thread_stack 中的地址便是当时的esp(0级栈的栈顶)，即栈顶esp = (uint32_t*)intr_0_stack - 5 */
	/* 指针 ebp_ptr_in_thread_stack，它是 thread_stack 的栈顶，
	 * 必须把它的值存放在 pcb 中偏移为 0 的地方，即 task_struct 中的 self_kstack 处，
	 * 将来 switch_to 要用它作为栈顶，并且执行一系列的 pop 来恢复上下文。 */
	uint32_t* ebp_ptr_in_thread_stack = (uint32_t*)intr_0_stack - 5;
c000b4b7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c000b4ba:	83 e8 14             	sub    $0x14,%eax
c000b4bd:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/userprog/fork.c:195

	/* switch_to的返回地址更新为intr_exit，直接从中断返回 */
	*ret_addr_in_thread_stack = (uint32_t)intr_exit;	// kernel.S
c000b4c0:	ba a0 1c 00 c0       	mov    $0xc0001ca0,%edx
c000b4c5:	8b 45 f8             	mov    -0x8(%ebp),%eax
c000b4c8:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/userprog/fork.c:199

	/* 下面这个赋值只是为了使构建的 thread_stack 更加清晰,其实也不需要,
	 * 因为在进入intr_exit后一系列的pop会把寄存器中的数据覆盖 */
	*ebp_ptr_in_thread_stack = *ebx_ptr_in_thread_stack = *edi_ptr_in_thread_stack = *esi_ptr_in_thread_stack = 0;
c000b4ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b4cd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c000b4d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b4d6:	8b 10                	mov    (%eax),%edx
c000b4d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b4db:	89 10                	mov    %edx,(%eax)
c000b4dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b4e0:	8b 10                	mov    (%eax),%edx
c000b4e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000b4e5:	89 10                	mov    %edx,(%eax)
c000b4e7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000b4ea:	8b 10                	mov    (%eax),%edx
c000b4ec:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000b4ef:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/userprog/fork.c:203
	/*********************************************************/

	/* 把构建的 thread_stack 的栈顶做为 switch_to 恢复数据时的栈顶 */
	child_thread->self_kstack = ebp_ptr_in_thread_stack;	//线程内核栈栈顶 self_kstack 总是和 esp 来回赋值~
c000b4f1:	8b 45 08             	mov    0x8(%ebp),%eax
c000b4f4:	8b 55 e8             	mov    -0x18(%ebp),%edx
c000b4f7:	89 10                	mov    %edx,(%eax)
/work/x86_os_my/userprog/fork.c:210
	在被换下处理器前，我们会把线程的上下文信息保存在 0 特权级栈中，
	self_kstack 便用来记录 0 特权级栈在保存线程上下文后，新的栈顶，
	在下一次此线程又被调度到处理器上时，
	把 self_kstack 的值加载到 esp 寄存器，这样便从 0 特权级栈中获取了线程上下文，从而可以加载到处理器中运行。
	*/
	return 0;
c000b4f9:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/userprog/fork.c:211
}
c000b4fe:	c9                   	leave  
c000b4ff:	c3                   	ret    

c000b500 <update_inode_open_cnts>:
update_inode_open_cnts():
/work/x86_os_my/userprog/fork.c:214

/* 更新inode打开数 */
static void update_inode_open_cnts(struct task_struct* thread) {
c000b500:	55                   	push   %ebp
c000b501:	89 e5                	mov    %esp,%ebp
c000b503:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/fork.c:215
	int32_t local_fd = 3, global_fd = 0;
c000b506:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
c000b50d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/userprog/fork.c:216
	while (local_fd < MAX_FILES_OPEN_PER_PROC) {	//遍历线程打开的所有文件
c000b514:	eb 58                	jmp    c000b56e <update_inode_open_cnts+0x6e>
/work/x86_os_my/userprog/fork.c:217
		global_fd = thread->fd_table[local_fd];
c000b516:	8b 45 08             	mov    0x8(%ebp),%eax
c000b519:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000b51c:	83 c2 08             	add    $0x8,%edx
c000b51f:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
c000b523:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/fork.c:218
		ASSERT(global_fd < MAX_FILE_OPEN);
c000b526:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c000b52a:	7e 1c                	jle    c000b548 <update_inode_open_cnts+0x48>
/work/x86_os_my/userprog/fork.c:218 (discriminator 1)
c000b52c:	68 78 ea 00 c0       	push   $0xc000ea78
c000b531:	68 5c eb 00 c0       	push   $0xc000eb5c
c000b536:	68 da 00 00 00       	push   $0xda
c000b53b:	68 92 ea 00 c0       	push   $0xc000ea92
c000b540:	e8 6c 6e ff ff       	call   c00023b1 <panic_spin>
c000b545:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:219
		if (global_fd != -1) {
c000b548:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c000b54c:	74 1c                	je     c000b56a <update_inode_open_cnts+0x6a>
/work/x86_os_my/userprog/fork.c:220
			file_table[global_fd].fd_inode->i_open_cnts++;	//线程打开的所有文件的inode->open_cnt加一
c000b54e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000b551:	89 d0                	mov    %edx,%eax
c000b553:	01 c0                	add    %eax,%eax
c000b555:	01 d0                	add    %edx,%eax
c000b557:	c1 e0 02             	shl    $0x2,%eax
c000b55a:	05 e8 2f 01 c0       	add    $0xc0012fe8,%eax
c000b55f:	8b 00                	mov    (%eax),%eax
c000b561:	8b 50 08             	mov    0x8(%eax),%edx
c000b564:	83 c2 01             	add    $0x1,%edx
c000b567:	89 50 08             	mov    %edx,0x8(%eax)
/work/x86_os_my/userprog/fork.c:222
		}
		local_fd++;
c000b56a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/userprog/fork.c:216
}

/* 更新inode打开数 */
static void update_inode_open_cnts(struct task_struct* thread) {
	int32_t local_fd = 3, global_fd = 0;
	while (local_fd < MAX_FILES_OPEN_PER_PROC) {	//遍历线程打开的所有文件
c000b56e:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
c000b572:	7e a2                	jle    c000b516 <update_inode_open_cnts+0x16>
/work/x86_os_my/userprog/fork.c:224
		if (global_fd != -1) {
			file_table[global_fd].fd_inode->i_open_cnts++;	//线程打开的所有文件的inode->open_cnt加一
		}
		local_fd++;
	}
}
c000b574:	90                   	nop
c000b575:	c9                   	leave  
c000b576:	c3                   	ret    

c000b577 <copy_process>:
copy_process():
/work/x86_os_my/userprog/fork.c:227

/* 拷贝父进程本身所占资源给子进程 */
static int32_t copy_process(struct task_struct* child_thread, struct task_struct* parent_thread) {
c000b577:	55                   	push   %ebp
c000b578:	89 e5                	mov    %esp,%ebp
c000b57a:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/fork.c:229
	/* 内核缓冲区,作为父进程用户空间的数据，复制到子进程用户空间，的中转 */
	void* buf_page = get_kernel_pages(1);
c000b57d:	83 ec 0c             	sub    $0xc,%esp
c000b580:	6a 01                	push   $0x1
c000b582:	e8 d2 74 ff ff       	call   c0002a59 <get_kernel_pages>
c000b587:	83 c4 10             	add    $0x10,%esp
c000b58a:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/fork.c:230
	if (buf_page == NULL) {
c000b58d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c000b591:	75 0a                	jne    c000b59d <copy_process+0x26>
/work/x86_os_my/userprog/fork.c:231
		return -1;
c000b593:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000b598:	e9 82 00 00 00       	jmp    c000b61f <copy_process+0xa8>
/work/x86_os_my/userprog/fork.c:235
	}

	/* a 复制父进程的pcb、虚拟地址位图、内核栈到子进程 */
	if (copy_pcb_vaddrbitmap_stack0(child_thread, parent_thread) == -1) {
c000b59d:	83 ec 08             	sub    $0x8,%esp
c000b5a0:	ff 75 0c             	pushl  0xc(%ebp)
c000b5a3:	ff 75 08             	pushl  0x8(%ebp)
c000b5a6:	e8 d1 fc ff ff       	call   c000b27c <copy_pcb_vaddrbitmap_stack0>
c000b5ab:	83 c4 10             	add    $0x10,%esp
c000b5ae:	83 f8 ff             	cmp    $0xffffffff,%eax
c000b5b1:	75 07                	jne    c000b5ba <copy_process+0x43>
/work/x86_os_my/userprog/fork.c:236
		return -1;
c000b5b3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000b5b8:	eb 65                	jmp    c000b61f <copy_process+0xa8>
/work/x86_os_my/userprog/fork.c:240
	}

	/* b 为子进程创建页表,此页表仅包括内核空间 */
	child_thread->pgdir = create_page_dir();
c000b5ba:	e8 61 9f ff ff       	call   c0005520 <create_page_dir>
c000b5bf:	89 c2                	mov    %eax,%edx
c000b5c1:	8b 45 08             	mov    0x8(%ebp),%eax
c000b5c4:	89 50 54             	mov    %edx,0x54(%eax)
/work/x86_os_my/userprog/fork.c:241
	if(child_thread->pgdir == NULL) {
c000b5c7:	8b 45 08             	mov    0x8(%ebp),%eax
c000b5ca:	8b 40 54             	mov    0x54(%eax),%eax
c000b5cd:	85 c0                	test   %eax,%eax
c000b5cf:	75 07                	jne    c000b5d8 <copy_process+0x61>
/work/x86_os_my/userprog/fork.c:242
		return -1;
c000b5d1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000b5d6:	eb 47                	jmp    c000b61f <copy_process+0xa8>
/work/x86_os_my/userprog/fork.c:246
	}

	/* c 复制父进程进程体及用户栈给子进程 */
	copy_body_stack3(child_thread, parent_thread, buf_page);
c000b5d8:	83 ec 04             	sub    $0x4,%esp
c000b5db:	ff 75 f4             	pushl  -0xc(%ebp)
c000b5de:	ff 75 0c             	pushl  0xc(%ebp)
c000b5e1:	ff 75 08             	pushl  0x8(%ebp)
c000b5e4:	e8 80 fd ff ff       	call   c000b369 <copy_body_stack3>
c000b5e9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:249

	/* d 构建子进程 thread_stack 和修改返回值pid */
	build_child_stack(child_thread);
c000b5ec:	83 ec 0c             	sub    $0xc,%esp
c000b5ef:	ff 75 08             	pushl  0x8(%ebp)
c000b5f2:	e8 81 fe ff ff       	call   c000b478 <build_child_stack>
c000b5f7:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:252

	/* e 更新文件inode的打开数 */
	update_inode_open_cnts(child_thread);
c000b5fa:	83 ec 0c             	sub    $0xc,%esp
c000b5fd:	ff 75 08             	pushl  0x8(%ebp)
c000b600:	e8 fb fe ff ff       	call   c000b500 <update_inode_open_cnts>
c000b605:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:254

	mfree_page(PF_KERNEL, buf_page, 1);
c000b608:	83 ec 04             	sub    $0x4,%esp
c000b60b:	6a 01                	push   $0x1
c000b60d:	ff 75 f4             	pushl  -0xc(%ebp)
c000b610:	6a 01                	push   $0x1
c000b612:	e8 b1 7b ff ff       	call   c00031c8 <mfree_page>
c000b617:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:255
	return 0;
c000b61a:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/userprog/fork.c:256
}
c000b61f:	c9                   	leave  
c000b620:	c3                   	ret    

c000b621 <sys_fork>:
sys_fork():
/work/x86_os_my/userprog/fork.c:259

/* fork子进程，内核线程不可直接调用 */
pid_t sys_fork(void) {
c000b621:	55                   	push   %ebp
c000b622:	89 e5                	mov    %esp,%ebp
c000b624:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/fork.c:260
	struct task_struct* parent_thread = running_thread();
c000b627:	e8 0e 86 ff ff       	call   c0003c3a <running_thread>
c000b62c:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/fork.c:261
	struct task_struct* child_thread = get_kernel_pages(1);	// 为子进程创建pcb(task_struct结构)
c000b62f:	83 ec 0c             	sub    $0xc,%esp
c000b632:	6a 01                	push   $0x1
c000b634:	e8 20 74 ff ff       	call   c0002a59 <get_kernel_pages>
c000b639:	83 c4 10             	add    $0x10,%esp
c000b63c:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/fork.c:262
	if (child_thread == NULL) {
c000b63f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c000b643:	75 0a                	jne    c000b64f <sys_fork+0x2e>
/work/x86_os_my/userprog/fork.c:263
		return -1;
c000b645:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000b64a:	e9 f2 00 00 00       	jmp    c000b741 <sys_fork+0x120>
/work/x86_os_my/userprog/fork.c:265
	}
	ASSERT(INTR_OFF == intr_get_status() && parent_thread->pgdir != NULL);	//中断关了，并且是用户线程
c000b64f:	e8 bc 63 ff ff       	call   c0001a10 <intr_get_status>
c000b654:	85 c0                	test   %eax,%eax
c000b656:	75 0a                	jne    c000b662 <sys_fork+0x41>
/work/x86_os_my/userprog/fork.c:265 (discriminator 1)
c000b658:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b65b:	8b 40 54             	mov    0x54(%eax),%eax
c000b65e:	85 c0                	test   %eax,%eax
c000b660:	75 1c                	jne    c000b67e <sys_fork+0x5d>
/work/x86_os_my/userprog/fork.c:265 (discriminator 3)
c000b662:	68 a4 ea 00 c0       	push   $0xc000eaa4
c000b667:	68 74 eb 00 c0       	push   $0xc000eb74
c000b66c:	68 09 01 00 00       	push   $0x109
c000b671:	68 92 ea 00 c0       	push   $0xc000ea92
c000b676:	e8 36 6d ff ff       	call   c00023b1 <panic_spin>
c000b67b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:267

	if (copy_process(child_thread, parent_thread) == -1) {
c000b67e:	83 ec 08             	sub    $0x8,%esp
c000b681:	ff 75 f4             	pushl  -0xc(%ebp)
c000b684:	ff 75 f0             	pushl  -0x10(%ebp)
c000b687:	e8 eb fe ff ff       	call   c000b577 <copy_process>
c000b68c:	83 c4 10             	add    $0x10,%esp
c000b68f:	83 f8 ff             	cmp    $0xffffffff,%eax
c000b692:	75 0a                	jne    c000b69e <sys_fork+0x7d>
/work/x86_os_my/userprog/fork.c:268
		return -1;
c000b694:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000b699:	e9 a3 00 00 00       	jmp    c000b741 <sys_fork+0x120>
/work/x86_os_my/userprog/fork.c:272
	}

	/* 添加到就绪线程队列和所有线程队列，子进程由调度器安排运行 */
	ASSERT(!elem_find(&thread_ready_list, &child_thread->general_tag));
c000b69e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b6a1:	83 c0 44             	add    $0x44,%eax
c000b6a4:	83 ec 08             	sub    $0x8,%esp
c000b6a7:	50                   	push   %eax
c000b6a8:	68 8c 21 01 c0       	push   $0xc001218c
c000b6ad:	e8 9a 90 ff ff       	call   c000474c <elem_find>
c000b6b2:	83 c4 10             	add    $0x10,%esp
c000b6b5:	85 c0                	test   %eax,%eax
c000b6b7:	74 1c                	je     c000b6d5 <sys_fork+0xb4>
/work/x86_os_my/userprog/fork.c:272 (discriminator 1)
c000b6b9:	68 e4 ea 00 c0       	push   $0xc000eae4
c000b6be:	68 74 eb 00 c0       	push   $0xc000eb74
c000b6c3:	68 10 01 00 00       	push   $0x110
c000b6c8:	68 92 ea 00 c0       	push   $0xc000ea92
c000b6cd:	e8 df 6c ff ff       	call   c00023b1 <panic_spin>
c000b6d2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:273
	list_append(&thread_ready_list, &child_thread->general_tag);
c000b6d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b6d8:	83 c0 44             	add    $0x44,%eax
c000b6db:	83 ec 08             	sub    $0x8,%esp
c000b6de:	50                   	push   %eax
c000b6df:	68 8c 21 01 c0       	push   $0xc001218c
c000b6e4:	e8 e9 8f ff ff       	call   c00046d2 <list_append>
c000b6e9:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:274
	ASSERT(!elem_find(&thread_all_list, &child_thread->all_list_tag));
c000b6ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b6ef:	83 c0 4c             	add    $0x4c,%eax
c000b6f2:	83 ec 08             	sub    $0x8,%esp
c000b6f5:	50                   	push   %eax
c000b6f6:	68 9c 21 01 c0       	push   $0xc001219c
c000b6fb:	e8 4c 90 ff ff       	call   c000474c <elem_find>
c000b700:	83 c4 10             	add    $0x10,%esp
c000b703:	85 c0                	test   %eax,%eax
c000b705:	74 1c                	je     c000b723 <sys_fork+0x102>
/work/x86_os_my/userprog/fork.c:274 (discriminator 1)
c000b707:	68 20 eb 00 c0       	push   $0xc000eb20
c000b70c:	68 74 eb 00 c0       	push   $0xc000eb74
c000b711:	68 12 01 00 00       	push   $0x112
c000b716:	68 92 ea 00 c0       	push   $0xc000ea92
c000b71b:	e8 91 6c ff ff       	call   c00023b1 <panic_spin>
c000b720:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:275
	list_append(&thread_all_list, &child_thread->all_list_tag);
c000b723:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b726:	83 c0 4c             	add    $0x4c,%eax
c000b729:	83 ec 08             	sub    $0x8,%esp
c000b72c:	50                   	push   %eax
c000b72d:	68 9c 21 01 c0       	push   $0xc001219c
c000b732:	e8 9b 8f ff ff       	call   c00046d2 <list_append>
c000b737:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/fork.c:277

	return child_thread->pid;	// 父进程返回子进程的pid
c000b73a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b73d:	0f b7 40 04          	movzwl 0x4(%eax),%eax
/work/x86_os_my/userprog/fork.c:278
}
c000b741:	c9                   	leave  
c000b742:	c3                   	ret    

c000b743 <print_prompt>:
print_prompt():
/work/x86_os_my/shell/shell.c:21

/* 用来记录当前目录,是当前目录的缓存,每次执行cd命令时会更新此内容 */
char cwd_cache[MAX_PATH_LEN] = {0};

/* 输出提示符 */
void print_prompt(void) {
c000b743:	55                   	push   %ebp
c000b744:	89 e5                	mov    %esp,%ebp
c000b746:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/shell/shell.c:22
	printf("[rabbit@localhost %s]$ ", cwd_cache);
c000b749:	83 ec 08             	sub    $0x8,%esp
c000b74c:	68 20 18 01 c0       	push   $0xc0011820
c000b751:	68 80 eb 00 c0       	push   $0xc000eb80
c000b756:	e8 bb a5 ff ff       	call   c0005d16 <printf>
c000b75b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:23
}
c000b75e:	90                   	nop
c000b75f:	c9                   	leave  
c000b760:	c3                   	ret    

c000b761 <readline>:
readline():
/work/x86_os_my/shell/shell.c:26

/* 从键盘缓冲区中最多读入count个字节到buf */
static void readline(char* buf, int32_t count) {
c000b761:	55                   	push   %ebp
c000b762:	89 e5                	mov    %esp,%ebp
c000b764:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/shell/shell.c:27
	assert(buf != NULL && count > 0);
c000b767:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c000b76b:	74 06                	je     c000b773 <readline+0x12>
/work/x86_os_my/shell/shell.c:27 (discriminator 2)
c000b76d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c000b771:	7f 19                	jg     c000b78c <readline+0x2b>
/work/x86_os_my/shell/shell.c:27 (discriminator 3)
c000b773:	68 98 eb 00 c0       	push   $0xc000eb98
c000b778:	68 c8 ec 00 c0       	push   $0xc000ecc8
c000b77d:	6a 1b                	push   $0x1b
c000b77f:	68 b1 eb 00 c0       	push   $0xc000ebb1
c000b784:	e8 23 05 00 00       	call   c000bcac <user_spin>
c000b789:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:28
	char* pos = buf;
c000b78c:	8b 45 08             	mov    0x8(%ebp),%eax
c000b78f:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/shell/shell.c:29
	while (read(stdin_no, pos, 1) != -1 && (pos - buf) < count) {	// 每次读1个字符。在不出错情况下,直到找到回车符才返回
c000b792:	e9 b5 00 00 00       	jmp    c000b84c <readline+0xeb>
/work/x86_os_my/shell/shell.c:30
		switch (*pos) {
c000b797:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b79a:	0f b6 00             	movzbl (%eax),%eax
c000b79d:	0f be c0             	movsbl %al,%eax
c000b7a0:	83 e8 08             	sub    $0x8,%eax
c000b7a3:	83 f8 0c             	cmp    $0xc,%eax
c000b7a6:	0f 87 87 00 00 00    	ja     c000b833 <readline+0xd2>
c000b7ac:	8b 04 85 0c ec 00 c0 	mov    -0x3fff13f4(,%eax,4),%eax
c000b7b3:	ff e0                	jmp    *%eax
/work/x86_os_my/shell/shell.c:34
			/* 找到回车或换行符后认为键入的命令结束,直接返回 */
			case '\n':
			case '\r':
			*pos = 0;		// 添加cmd_line的终止字符0
c000b7b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b7b8:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/shell/shell.c:35
			putchar('\n');
c000b7bb:	83 ec 0c             	sub    $0xc,%esp
c000b7be:	6a 0a                	push   $0xa
c000b7c0:	e8 ec 9f ff ff       	call   c00057b1 <putchar>
c000b7c5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:36
			return;
c000b7c8:	e9 b9 00 00 00       	jmp    c000b886 <readline+0x125>
/work/x86_os_my/shell/shell.c:39

			case '\b':
			if (cmd_line[0] != '\b') {	// 阻止删除非本次输入的信息
c000b7cd:	0f b6 05 20 1a 01 c0 	movzbl 0xc0011a20,%eax
c000b7d4:	3c 08                	cmp    $0x8,%al
c000b7d6:	74 74                	je     c000b84c <readline+0xeb>
/work/x86_os_my/shell/shell.c:40
				--pos;				// 退回到缓冲区cmd_line中上一个字符
c000b7d8:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
/work/x86_os_my/shell/shell.c:41
				putchar('\b');		// 屏幕显示也删掉前一个字符
c000b7dc:	83 ec 0c             	sub    $0xc,%esp
c000b7df:	6a 08                	push   $0x8
c000b7e1:	e8 cb 9f ff ff       	call   c00057b1 <putchar>
c000b7e6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:43
			}
			break;
c000b7e9:	eb 61                	jmp    c000b84c <readline+0xeb>
/work/x86_os_my/shell/shell.c:48

			/* ctrl+l 清屏 */
			case 'l' - 'a':
			/* 1 先将当前的字符'l'-'a'置为0 */
			*pos = 0;
c000b7eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b7ee:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/shell/shell.c:50
			/* 2 再将屏幕清空 */
			clear();
c000b7f1:	e8 df 9f ff ff       	call   c00057d5 <clear>
/work/x86_os_my/shell/shell.c:52
			/* 3 打印提示符 */
			print_prompt();
c000b7f6:	e8 48 ff ff ff       	call   c000b743 <print_prompt>
/work/x86_os_my/shell/shell.c:54
			/* 4 将之前键入的内容再次打印 */
			printf("%s", buf);
c000b7fb:	83 ec 08             	sub    $0x8,%esp
c000b7fe:	ff 75 08             	pushl  0x8(%ebp)
c000b801:	68 bf eb 00 c0       	push   $0xc000ebbf
c000b806:	e8 0b a5 ff ff       	call   c0005d16 <printf>
c000b80b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:55
			break;
c000b80e:	eb 3c                	jmp    c000b84c <readline+0xeb>
/work/x86_os_my/shell/shell.c:60

			/* ctrl+u 清掉输入 */
			case 'u' - 'a':
			while (buf != pos) {
				putchar('\b');
c000b810:	83 ec 0c             	sub    $0xc,%esp
c000b813:	6a 08                	push   $0x8
c000b815:	e8 97 9f ff ff       	call   c00057b1 <putchar>
c000b81a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:61
				*(pos--) = 0;
c000b81d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b820:	8d 50 ff             	lea    -0x1(%eax),%edx
c000b823:	89 55 f4             	mov    %edx,-0xc(%ebp)
c000b826:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/shell/shell.c:59
			printf("%s", buf);
			break;

			/* ctrl+u 清掉输入 */
			case 'u' - 'a':
			while (buf != pos) {
c000b829:	8b 45 08             	mov    0x8(%ebp),%eax
c000b82c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c000b82f:	75 df                	jne    c000b810 <readline+0xaf>
/work/x86_os_my/shell/shell.c:63
				putchar('\b');
				*(pos--) = 0;
			}
			break;
c000b831:	eb 19                	jmp    c000b84c <readline+0xeb>
/work/x86_os_my/shell/shell.c:67

			/* 非控制键则输出字符 */
			default:
			putchar(*pos);			// 屏幕显示
c000b833:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b836:	0f b6 00             	movzbl (%eax),%eax
c000b839:	0f be c0             	movsbl %al,%eax
c000b83c:	83 ec 0c             	sub    $0xc,%esp
c000b83f:	50                   	push   %eax
c000b840:	e8 6c 9f ff ff       	call   c00057b1 <putchar>
c000b845:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:68
			pos++;
c000b848:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/shell/shell.c:29

/* 从键盘缓冲区中最多读入count个字节到buf */
static void readline(char* buf, int32_t count) {
	assert(buf != NULL && count > 0);
	char* pos = buf;
	while (read(stdin_no, pos, 1) != -1 && (pos - buf) < count) {	// 每次读1个字符。在不出错情况下,直到找到回车符才返回
c000b84c:	83 ec 04             	sub    $0x4,%esp
c000b84f:	6a 01                	push   $0x1
c000b851:	ff 75 f4             	pushl  -0xc(%ebp)
c000b854:	6a 00                	push   $0x0
c000b856:	e8 33 9f ff ff       	call   c000578e <read>
c000b85b:	83 c4 10             	add    $0x10,%esp
c000b85e:	83 f8 ff             	cmp    $0xffffffff,%eax
c000b861:	74 13                	je     c000b876 <readline+0x115>
/work/x86_os_my/shell/shell.c:29 (discriminator 1)
c000b863:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000b866:	8b 45 08             	mov    0x8(%ebp),%eax
c000b869:	29 c2                	sub    %eax,%edx
c000b86b:	89 d0                	mov    %edx,%eax
c000b86d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c000b870:	0f 8c 21 ff ff ff    	jl     c000b797 <readline+0x36>
/work/x86_os_my/shell/shell.c:71
			default:
			putchar(*pos);			// 屏幕显示
			pos++;
		}
	}
	printf("readline: can`t find enter_key in the cmd_line, max num of char is 128\n");
c000b876:	83 ec 0c             	sub    $0xc,%esp
c000b879:	68 c4 eb 00 c0       	push   $0xc000ebc4
c000b87e:	e8 93 a4 ff ff       	call   c0005d16 <printf>
c000b883:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:72
}
c000b886:	c9                   	leave  
c000b887:	c3                   	ret    

c000b888 <cmd_parse>:
cmd_parse():
/work/x86_os_my/shell/shell.c:75

/* 分析字符串cmd_str中以token为分隔符的单词,将各单词的指针存入argv数组 */
static int32_t cmd_parse(char* cmd_str, char** argv, char token) {
c000b888:	55                   	push   %ebp
c000b889:	89 e5                	mov    %esp,%ebp
c000b88b:	83 ec 28             	sub    $0x28,%esp
c000b88e:	8b 45 10             	mov    0x10(%ebp),%eax
c000b891:	88 45 e4             	mov    %al,-0x1c(%ebp)
/work/x86_os_my/shell/shell.c:76
	assert(cmd_str != NULL);
c000b894:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c000b898:	75 19                	jne    c000b8b3 <cmd_parse+0x2b>
/work/x86_os_my/shell/shell.c:76 (discriminator 1)
c000b89a:	68 40 ec 00 c0       	push   $0xc000ec40
c000b89f:	68 d4 ec 00 c0       	push   $0xc000ecd4
c000b8a4:	6a 4c                	push   $0x4c
c000b8a6:	68 b1 eb 00 c0       	push   $0xc000ebb1
c000b8ab:	e8 fc 03 00 00       	call   c000bcac <user_spin>
c000b8b0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:77
	int32_t arg_idx = 0;
c000b8b3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/shell/shell.c:78
	while(arg_idx < MAX_ARG_NR) {
c000b8ba:	eb 19                	jmp    c000b8d5 <cmd_parse+0x4d>
/work/x86_os_my/shell/shell.c:79
		argv[arg_idx] = NULL;
c000b8bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000b8bf:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000b8c6:	8b 45 0c             	mov    0xc(%ebp),%eax
c000b8c9:	01 d0                	add    %edx,%eax
c000b8cb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/work/x86_os_my/shell/shell.c:80
		arg_idx++;
c000b8d1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/shell/shell.c:78

/* 分析字符串cmd_str中以token为分隔符的单词,将各单词的指针存入argv数组 */
static int32_t cmd_parse(char* cmd_str, char** argv, char token) {
	assert(cmd_str != NULL);
	int32_t arg_idx = 0;
	while(arg_idx < MAX_ARG_NR) {
c000b8d5:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c000b8d9:	7e e1                	jle    c000b8bc <cmd_parse+0x34>
/work/x86_os_my/shell/shell.c:82
		argv[arg_idx] = NULL;
		arg_idx++;
	}
	char* next = cmd_str;
c000b8db:	8b 45 08             	mov    0x8(%ebp),%eax
c000b8de:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/shell/shell.c:83
	int32_t argc = 0;
c000b8e1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/shell/shell.c:85
	/* 外层循环处理整个命令行 */
	while(*next) {
c000b8e8:	eb 6f                	jmp    c000b959 <cmd_parse+0xd1>
/work/x86_os_my/shell/shell.c:88
		/* 去除命令字或参数之间的空格 */
		while(*next == token) {
			next++;
c000b8ea:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/shell/shell.c:87
	char* next = cmd_str;
	int32_t argc = 0;
	/* 外层循环处理整个命令行 */
	while(*next) {
		/* 去除命令字或参数之间的空格 */
		while(*next == token) {
c000b8ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b8f1:	0f b6 00             	movzbl (%eax),%eax
c000b8f4:	3a 45 e4             	cmp    -0x1c(%ebp),%al
c000b8f7:	74 f1                	je     c000b8ea <cmd_parse+0x62>
/work/x86_os_my/shell/shell.c:91
			next++;
		}
		/* 处理最后一个参数后接空格的情况,如"ls dir2 " */
		if (*next == 0) {
c000b8f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b8fc:	0f b6 00             	movzbl (%eax),%eax
c000b8ff:	84 c0                	test   %al,%al
c000b901:	74 62                	je     c000b965 <cmd_parse+0xdd>
/work/x86_os_my/shell/shell.c:94
			break;
		}
		argv[argc] = next;
c000b903:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000b906:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000b90d:	8b 45 0c             	mov    0xc(%ebp),%eax
c000b910:	01 c2                	add    %eax,%edx
c000b912:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b915:	89 02                	mov    %eax,(%edx)
/work/x86_os_my/shell/shell.c:97

		/* 内层循环处理命令行中的每个命令字及参数 */
		while (*next && *next != token) {	  // 在字符串结束前找单词分隔符
c000b917:	eb 04                	jmp    c000b91d <cmd_parse+0x95>
/work/x86_os_my/shell/shell.c:98
			next++;
c000b919:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/shell/shell.c:97
			break;
		}
		argv[argc] = next;

		/* 内层循环处理命令行中的每个命令字及参数 */
		while (*next && *next != token) {	  // 在字符串结束前找单词分隔符
c000b91d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b920:	0f b6 00             	movzbl (%eax),%eax
c000b923:	84 c0                	test   %al,%al
c000b925:	74 0b                	je     c000b932 <cmd_parse+0xaa>
/work/x86_os_my/shell/shell.c:97 (discriminator 1)
c000b927:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b92a:	0f b6 00             	movzbl (%eax),%eax
c000b92d:	3a 45 e4             	cmp    -0x1c(%ebp),%al
c000b930:	75 e7                	jne    c000b919 <cmd_parse+0x91>
/work/x86_os_my/shell/shell.c:102
			next++;
		}

		/* 如果未结束(是token字符),使tocken变成0 */
		if (*next) {
c000b932:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b935:	0f b6 00             	movzbl (%eax),%eax
c000b938:	84 c0                	test   %al,%al
c000b93a:	74 0c                	je     c000b948 <cmd_parse+0xc0>
/work/x86_os_my/shell/shell.c:103
			*next++ = 0;	// 将token字符替换为字符串结束符0,做为一个单词的结束,并将字符指针next指向下一个字符
c000b93c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b93f:	8d 50 01             	lea    0x1(%eax),%edx
c000b942:	89 55 f0             	mov    %edx,-0x10(%ebp)
c000b945:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/shell/shell.c:107
		}

		/* 避免argv数组访问越界,参数过多则返回0 */
		if (argc > MAX_ARG_NR) {
c000b948:	83 7d ec 10          	cmpl   $0x10,-0x14(%ebp)
c000b94c:	7e 07                	jle    c000b955 <cmd_parse+0xcd>
/work/x86_os_my/shell/shell.c:108
			return -1;
c000b94e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000b953:	eb 14                	jmp    c000b969 <cmd_parse+0xe1>
/work/x86_os_my/shell/shell.c:110
		}
		argc++;
c000b955:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
/work/x86_os_my/shell/shell.c:85
		arg_idx++;
	}
	char* next = cmd_str;
	int32_t argc = 0;
	/* 外层循环处理整个命令行 */
	while(*next) {
c000b959:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000b95c:	0f b6 00             	movzbl (%eax),%eax
c000b95f:	84 c0                	test   %al,%al
c000b961:	75 8b                	jne    c000b8ee <cmd_parse+0x66>
c000b963:	eb 01                	jmp    c000b966 <cmd_parse+0xde>
/work/x86_os_my/shell/shell.c:92
		while(*next == token) {
			next++;
		}
		/* 处理最后一个参数后接空格的情况,如"ls dir2 " */
		if (*next == 0) {
			break;
c000b965:	90                   	nop
/work/x86_os_my/shell/shell.c:112
		if (argc > MAX_ARG_NR) {
			return -1;
		}
		argc++;
	}
	return argc;
c000b966:	8b 45 ec             	mov    -0x14(%ebp),%eax
/work/x86_os_my/shell/shell.c:113
}
c000b969:	c9                   	leave  
c000b96a:	c3                   	ret    

c000b96b <my_shell>:
my_shell():
/work/x86_os_my/shell/shell.c:118

char* argv[MAX_ARG_NR];    // argv必须为全局变量，为了以后exec的程序可访问参数
int32_t argc = -1;
/* 简单的shell */
void my_shell(void) {
c000b96b:	55                   	push   %ebp
c000b96c:	89 e5                	mov    %esp,%ebp
c000b96e:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/shell/shell.c:119
	cwd_cache[0] = '/';
c000b971:	c6 05 20 18 01 c0 2f 	movb   $0x2f,0xc0011820
/work/x86_os_my/shell/shell.c:121
	while (1) {
		print_prompt();
c000b978:	e8 c6 fd ff ff       	call   c000b743 <print_prompt>
/work/x86_os_my/shell/shell.c:122
		memset(final_path, 0, MAX_PATH_LEN);
c000b97d:	83 ec 04             	sub    $0x4,%esp
c000b980:	68 00 02 00 00       	push   $0x200
c000b985:	6a 00                	push   $0x0
c000b987:	68 20 16 01 c0       	push   $0xc0011620
c000b98c:	e8 c2 7e ff ff       	call   c0003853 <memset>
c000b991:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:123
		memset(cmd_line, 0, MAX_PATH_LEN);
c000b994:	83 ec 04             	sub    $0x4,%esp
c000b997:	68 00 02 00 00       	push   $0x200
c000b99c:	6a 00                	push   $0x0
c000b99e:	68 20 1a 01 c0       	push   $0xc0011a20
c000b9a3:	e8 ab 7e ff ff       	call   c0003853 <memset>
c000b9a8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:124
		readline(cmd_line, MAX_PATH_LEN);
c000b9ab:	83 ec 08             	sub    $0x8,%esp
c000b9ae:	68 00 02 00 00       	push   $0x200
c000b9b3:	68 20 1a 01 c0       	push   $0xc0011a20
c000b9b8:	e8 a4 fd ff ff       	call   c000b761 <readline>
c000b9bd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:125
		if (cmd_line[0] == 0) {	 // 若只键入了一个回车
c000b9c0:	0f b6 05 20 1a 01 c0 	movzbl 0xc0011a20,%eax
c000b9c7:	84 c0                	test   %al,%al
c000b9c9:	0f 84 d7 02 00 00    	je     c000bca6 <my_shell+0x33b>
/work/x86_os_my/shell/shell.c:128
			continue;
		}
		argc = -1;
c000b9cf:	c7 05 58 11 01 c0 ff 	movl   $0xffffffff,0xc0011158
c000b9d6:	ff ff ff 
/work/x86_os_my/shell/shell.c:129
		argc = cmd_parse(cmd_line, argv, ' ');
c000b9d9:	83 ec 04             	sub    $0x4,%esp
c000b9dc:	6a 20                	push   $0x20
c000b9de:	68 80 33 01 c0       	push   $0xc0013380
c000b9e3:	68 20 1a 01 c0       	push   $0xc0011a20
c000b9e8:	e8 9b fe ff ff       	call   c000b888 <cmd_parse>
c000b9ed:	83 c4 10             	add    $0x10,%esp
c000b9f0:	a3 58 11 01 c0       	mov    %eax,0xc0011158
/work/x86_os_my/shell/shell.c:130
		if (argc == -1) {
c000b9f5:	a1 58 11 01 c0       	mov    0xc0011158,%eax
c000b9fa:	83 f8 ff             	cmp    $0xffffffff,%eax
c000b9fd:	75 17                	jne    c000ba16 <my_shell+0xab>
/work/x86_os_my/shell/shell.c:131
			printf("num of arguments exceed %d\n", MAX_ARG_NR);
c000b9ff:	83 ec 08             	sub    $0x8,%esp
c000ba02:	6a 10                	push   $0x10
c000ba04:	68 50 ec 00 c0       	push   $0xc000ec50
c000ba09:	e8 08 a3 ff ff       	call   c0005d16 <printf>
c000ba0e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:132
			continue;
c000ba11:	e9 91 02 00 00       	jmp    c000bca7 <my_shell+0x33c>
/work/x86_os_my/shell/shell.c:135
		}

		if (!strcmp("ls", argv[0])) {
c000ba16:	a1 80 33 01 c0       	mov    0xc0013380,%eax
c000ba1b:	83 ec 08             	sub    $0x8,%esp
c000ba1e:	50                   	push   %eax
c000ba1f:	68 6c ec 00 c0       	push   $0xc000ec6c
c000ba24:	e8 ff 7f ff ff       	call   c0003a28 <strcmp>
c000ba29:	83 c4 10             	add    $0x10,%esp
c000ba2c:	84 c0                	test   %al,%al
c000ba2e:	75 1b                	jne    c000ba4b <my_shell+0xe0>
/work/x86_os_my/shell/shell.c:136
			buildin_ls(argc, argv);
c000ba30:	a1 58 11 01 c0       	mov    0xc0011158,%eax
c000ba35:	83 ec 08             	sub    $0x8,%esp
c000ba38:	68 80 33 01 c0       	push   $0xc0013380
c000ba3d:	50                   	push   %eax
c000ba3e:	e8 a0 05 00 00       	call   c000bfe3 <buildin_ls>
c000ba43:	83 c4 10             	add    $0x10,%esp
c000ba46:	e9 35 02 00 00       	jmp    c000bc80 <my_shell+0x315>
/work/x86_os_my/shell/shell.c:137
		} else if (!strcmp("cd", argv[0])) {
c000ba4b:	a1 80 33 01 c0       	mov    0xc0013380,%eax
c000ba50:	83 ec 08             	sub    $0x8,%esp
c000ba53:	50                   	push   %eax
c000ba54:	68 6f ec 00 c0       	push   $0xc000ec6f
c000ba59:	e8 ca 7f ff ff       	call   c0003a28 <strcmp>
c000ba5e:	83 c4 10             	add    $0x10,%esp
c000ba61:	84 c0                	test   %al,%al
c000ba63:	75 4f                	jne    c000bab4 <my_shell+0x149>
/work/x86_os_my/shell/shell.c:138
			if (buildin_cd(argc, argv) != NULL) {
c000ba65:	a1 58 11 01 c0       	mov    0xc0011158,%eax
c000ba6a:	83 ec 08             	sub    $0x8,%esp
c000ba6d:	68 80 33 01 c0       	push   $0xc0013380
c000ba72:	50                   	push   %eax
c000ba73:	e8 e1 04 00 00       	call   c000bf59 <buildin_cd>
c000ba78:	83 c4 10             	add    $0x10,%esp
c000ba7b:	85 c0                	test   %eax,%eax
c000ba7d:	0f 84 fd 01 00 00    	je     c000bc80 <my_shell+0x315>
/work/x86_os_my/shell/shell.c:139
				memset(cwd_cache, 0, MAX_PATH_LEN);
c000ba83:	83 ec 04             	sub    $0x4,%esp
c000ba86:	68 00 02 00 00       	push   $0x200
c000ba8b:	6a 00                	push   $0x0
c000ba8d:	68 20 18 01 c0       	push   $0xc0011820
c000ba92:	e8 bc 7d ff ff       	call   c0003853 <memset>
c000ba97:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:140
				strcpy(cwd_cache, final_path);
c000ba9a:	83 ec 08             	sub    $0x8,%esp
c000ba9d:	68 20 16 01 c0       	push   $0xc0011620
c000baa2:	68 20 18 01 c0       	push   $0xc0011820
c000baa7:	e8 dc 7e ff ff       	call   c0003988 <strcpy>
c000baac:	83 c4 10             	add    $0x10,%esp
c000baaf:	e9 cc 01 00 00       	jmp    c000bc80 <my_shell+0x315>
/work/x86_os_my/shell/shell.c:142
			}
		} else if (!strcmp("pwd", argv[0])) {
c000bab4:	a1 80 33 01 c0       	mov    0xc0013380,%eax
c000bab9:	83 ec 08             	sub    $0x8,%esp
c000babc:	50                   	push   %eax
c000babd:	68 72 ec 00 c0       	push   $0xc000ec72
c000bac2:	e8 61 7f ff ff       	call   c0003a28 <strcmp>
c000bac7:	83 c4 10             	add    $0x10,%esp
c000baca:	84 c0                	test   %al,%al
c000bacc:	75 1b                	jne    c000bae9 <my_shell+0x17e>
/work/x86_os_my/shell/shell.c:143
			buildin_pwd(argc, argv);
c000bace:	a1 58 11 01 c0       	mov    0xc0011158,%eax
c000bad3:	83 ec 08             	sub    $0x8,%esp
c000bad6:	68 80 33 01 c0       	push   $0xc0013380
c000badb:	50                   	push   %eax
c000badc:	e8 18 04 00 00       	call   c000bef9 <buildin_pwd>
c000bae1:	83 c4 10             	add    $0x10,%esp
c000bae4:	e9 97 01 00 00       	jmp    c000bc80 <my_shell+0x315>
/work/x86_os_my/shell/shell.c:144
		} else if (!strcmp("ps", argv[0])) {
c000bae9:	a1 80 33 01 c0       	mov    0xc0013380,%eax
c000baee:	83 ec 08             	sub    $0x8,%esp
c000baf1:	50                   	push   %eax
c000baf2:	68 76 ec 00 c0       	push   $0xc000ec76
c000baf7:	e8 2c 7f ff ff       	call   c0003a28 <strcmp>
c000bafc:	83 c4 10             	add    $0x10,%esp
c000baff:	84 c0                	test   %al,%al
c000bb01:	75 1b                	jne    c000bb1e <my_shell+0x1b3>
/work/x86_os_my/shell/shell.c:145
			buildin_ps(argc, argv);
c000bb03:	a1 58 11 01 c0       	mov    0xc0011158,%eax
c000bb08:	83 ec 08             	sub    $0x8,%esp
c000bb0b:	68 80 33 01 c0       	push   $0xc0013380
c000bb10:	50                   	push   %eax
c000bb11:	e8 8e 08 00 00       	call   c000c3a4 <buildin_ps>
c000bb16:	83 c4 10             	add    $0x10,%esp
c000bb19:	e9 62 01 00 00       	jmp    c000bc80 <my_shell+0x315>
/work/x86_os_my/shell/shell.c:146
		} else if (!strcmp("clear", argv[0])) {
c000bb1e:	a1 80 33 01 c0       	mov    0xc0013380,%eax
c000bb23:	83 ec 08             	sub    $0x8,%esp
c000bb26:	50                   	push   %eax
c000bb27:	68 79 ec 00 c0       	push   $0xc000ec79
c000bb2c:	e8 f7 7e ff ff       	call   c0003a28 <strcmp>
c000bb31:	83 c4 10             	add    $0x10,%esp
c000bb34:	84 c0                	test   %al,%al
c000bb36:	75 1b                	jne    c000bb53 <my_shell+0x1e8>
/work/x86_os_my/shell/shell.c:147
			buildin_clear(argc, argv);
c000bb38:	a1 58 11 01 c0       	mov    0xc0011158,%eax
c000bb3d:	83 ec 08             	sub    $0x8,%esp
c000bb40:	68 80 33 01 c0       	push   $0xc0013380
c000bb45:	50                   	push   %eax
c000bb46:	e8 7e 08 00 00       	call   c000c3c9 <buildin_clear>
c000bb4b:	83 c4 10             	add    $0x10,%esp
c000bb4e:	e9 2d 01 00 00       	jmp    c000bc80 <my_shell+0x315>
/work/x86_os_my/shell/shell.c:148
		} else if (!strcmp("mkdir", argv[0])){
c000bb53:	a1 80 33 01 c0       	mov    0xc0013380,%eax
c000bb58:	83 ec 08             	sub    $0x8,%esp
c000bb5b:	50                   	push   %eax
c000bb5c:	68 7f ec 00 c0       	push   $0xc000ec7f
c000bb61:	e8 c2 7e ff ff       	call   c0003a28 <strcmp>
c000bb66:	83 c4 10             	add    $0x10,%esp
c000bb69:	84 c0                	test   %al,%al
c000bb6b:	75 1b                	jne    c000bb88 <my_shell+0x21d>
/work/x86_os_my/shell/shell.c:149
			buildin_mkdir(argc, argv);
c000bb6d:	a1 58 11 01 c0       	mov    0xc0011158,%eax
c000bb72:	83 ec 08             	sub    $0x8,%esp
c000bb75:	68 80 33 01 c0       	push   $0xc0013380
c000bb7a:	50                   	push   %eax
c000bb7b:	e8 6e 08 00 00       	call   c000c3ee <buildin_mkdir>
c000bb80:	83 c4 10             	add    $0x10,%esp
c000bb83:	e9 f8 00 00 00       	jmp    c000bc80 <my_shell+0x315>
/work/x86_os_my/shell/shell.c:150
		} else if (!strcmp("rmdir", argv[0])){
c000bb88:	a1 80 33 01 c0       	mov    0xc0013380,%eax
c000bb8d:	83 ec 08             	sub    $0x8,%esp
c000bb90:	50                   	push   %eax
c000bb91:	68 85 ec 00 c0       	push   $0xc000ec85
c000bb96:	e8 8d 7e ff ff       	call   c0003a28 <strcmp>
c000bb9b:	83 c4 10             	add    $0x10,%esp
c000bb9e:	84 c0                	test   %al,%al
c000bba0:	75 1b                	jne    c000bbbd <my_shell+0x252>
/work/x86_os_my/shell/shell.c:151
			buildin_rmdir(argc, argv);
c000bba2:	a1 58 11 01 c0       	mov    0xc0011158,%eax
c000bba7:	83 ec 08             	sub    $0x8,%esp
c000bbaa:	68 80 33 01 c0       	push   $0xc0013380
c000bbaf:	50                   	push   %eax
c000bbb0:	e8 cb 08 00 00       	call   c000c480 <buildin_rmdir>
c000bbb5:	83 c4 10             	add    $0x10,%esp
c000bbb8:	e9 c3 00 00 00       	jmp    c000bc80 <my_shell+0x315>
/work/x86_os_my/shell/shell.c:152
		} else if (!strcmp("rm", argv[0])) {
c000bbbd:	a1 80 33 01 c0       	mov    0xc0013380,%eax
c000bbc2:	83 ec 08             	sub    $0x8,%esp
c000bbc5:	50                   	push   %eax
c000bbc6:	68 8b ec 00 c0       	push   $0xc000ec8b
c000bbcb:	e8 58 7e ff ff       	call   c0003a28 <strcmp>
c000bbd0:	83 c4 10             	add    $0x10,%esp
c000bbd3:	84 c0                	test   %al,%al
c000bbd5:	75 1b                	jne    c000bbf2 <my_shell+0x287>
/work/x86_os_my/shell/shell.c:153
			buildin_rm(argc, argv);
c000bbd7:	a1 58 11 01 c0       	mov    0xc0011158,%eax
c000bbdc:	83 ec 08             	sub    $0x8,%esp
c000bbdf:	68 80 33 01 c0       	push   $0xc0013380
c000bbe4:	50                   	push   %eax
c000bbe5:	e8 28 09 00 00       	call   c000c512 <buildin_rm>
c000bbea:	83 c4 10             	add    $0x10,%esp
c000bbed:	e9 8e 00 00 00       	jmp    c000bc80 <my_shell+0x315>
/work/x86_os_my/shell/shell.c:155
		} else {	// 如果是外部命令,需要从磁盘上加载
			int32_t pid = fork();
c000bbf2:	e8 82 9b ff ff       	call   c0005779 <fork>
c000bbf7:	98                   	cwtl   
c000bbf8:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/shell/shell.c:156
			if (pid) {	   // 父进程
c000bbfb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c000bbff:	74 02                	je     c000bc03 <my_shell+0x298>
/work/x86_os_my/shell/shell.c:159 (discriminator 1)
				/* 下面这个while必须要加上,否则父进程一般情况下会比子进程先执行,
				因此会进行下一轮循环将findl_path清空,这样子进程将无法从final_path中获得参数*/
				while(1);
c000bc01:	eb fe                	jmp    c000bc01 <my_shell+0x296>
/work/x86_os_my/shell/shell.c:161
			} else {	// 子进程
				make_clear_abs_path(argv[0], final_path);
c000bc03:	a1 80 33 01 c0       	mov    0xc0013380,%eax
c000bc08:	83 ec 08             	sub    $0x8,%esp
c000bc0b:	68 20 16 01 c0       	push   $0xc0011620
c000bc10:	50                   	push   %eax
c000bc11:	e8 2a 02 00 00       	call   c000be40 <make_clear_abs_path>
c000bc16:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:162
				argv[0] = final_path;
c000bc19:	c7 05 80 33 01 c0 20 	movl   $0xc0011620,0xc0013380
c000bc20:	16 01 c0 
/work/x86_os_my/shell/shell.c:165
				/* 先判断下文件是否存在 */
				struct stat file_stat;
				memset(&file_stat, 0, sizeof(struct stat));
c000bc23:	83 ec 04             	sub    $0x4,%esp
c000bc26:	6a 0c                	push   $0xc
c000bc28:	6a 00                	push   $0x0
c000bc2a:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c000bc2d:	50                   	push   %eax
c000bc2e:	e8 20 7c ff ff       	call   c0003853 <memset>
c000bc33:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:166
				if (stat(argv[0], &file_stat) == -1) {
c000bc36:	a1 80 33 01 c0       	mov    0xc0013380,%eax
c000bc3b:	83 ec 08             	sub    $0x8,%esp
c000bc3e:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c000bc41:	52                   	push   %edx
c000bc42:	50                   	push   %eax
c000bc43:	e8 0b 9d ff ff       	call   c0005953 <stat>
c000bc48:	83 c4 10             	add    $0x10,%esp
c000bc4b:	83 f8 ff             	cmp    $0xffffffff,%eax
c000bc4e:	75 18                	jne    c000bc68 <my_shell+0x2fd>
/work/x86_os_my/shell/shell.c:167
					printf("my_shell: cannot access %s: No such file or directory\n", argv[0]);
c000bc50:	a1 80 33 01 c0       	mov    0xc0013380,%eax
c000bc55:	83 ec 08             	sub    $0x8,%esp
c000bc58:	50                   	push   %eax
c000bc59:	68 90 ec 00 c0       	push   $0xc000ec90
c000bc5e:	e8 b3 a0 ff ff       	call   c0005d16 <printf>
c000bc63:	83 c4 10             	add    $0x10,%esp
c000bc66:	eb 16                	jmp    c000bc7e <my_shell+0x313>
/work/x86_os_my/shell/shell.c:169
				} else {
					execv(argv[0], argv);
c000bc68:	a1 80 33 01 c0       	mov    0xc0013380,%eax
c000bc6d:	83 ec 08             	sub    $0x8,%esp
c000bc70:	68 80 33 01 c0       	push   $0xc0013380
c000bc75:	50                   	push   %eax
c000bc76:	e8 2c 9d ff ff       	call   c00059a7 <execv>
c000bc7b:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/shell.c:171 (discriminator 2)
				}
				while(1);
c000bc7e:	eb fe                	jmp    c000bc7e <my_shell+0x313>
/work/x86_os_my/shell/shell.c:175
			}
		}

		int32_t arg_idx = 0;
c000bc80:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/shell/shell.c:176
		while(arg_idx < MAX_ARG_NR) {
c000bc87:	eb 12                	jmp    c000bc9b <my_shell+0x330>
/work/x86_os_my/shell/shell.c:177
			argv[arg_idx] = NULL;
c000bc89:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000bc8c:	c7 04 85 80 33 01 c0 	movl   $0x0,-0x3ffecc80(,%eax,4)
c000bc93:	00 00 00 00 
/work/x86_os_my/shell/shell.c:178
			arg_idx++;
c000bc97:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/shell/shell.c:176
				while(1);
			}
		}

		int32_t arg_idx = 0;
		while(arg_idx < MAX_ARG_NR) {
c000bc9b:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c000bc9f:	7e e8                	jle    c000bc89 <my_shell+0x31e>
c000bca1:	e9 d2 fc ff ff       	jmp    c000b978 <my_shell+0xd>
/work/x86_os_my/shell/shell.c:126
		print_prompt();
		memset(final_path, 0, MAX_PATH_LEN);
		memset(cmd_line, 0, MAX_PATH_LEN);
		readline(cmd_line, MAX_PATH_LEN);
		if (cmd_line[0] == 0) {	 // 若只键入了一个回车
			continue;
c000bca6:	90                   	nop
/work/x86_os_my/shell/shell.c:180
		int32_t arg_idx = 0;
		while(arg_idx < MAX_ARG_NR) {
			argv[arg_idx] = NULL;
			arg_idx++;
		}
	}
c000bca7:	e9 cc fc ff ff       	jmp    c000b978 <my_shell+0xd>

c000bcac <user_spin>:
user_spin():
/work/x86_os_my/lib/user/assert.c:3
#include "assert.h"
#include "stdio.h"
void user_spin(char* filename, int line, const char* func, const char* condition) {
c000bcac:	55                   	push   %ebp
c000bcad:	89 e5                	mov    %esp,%ebp
c000bcaf:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/lib/user/assert.c:4
	printf("\n\n\n\nfilename %s\nline %d\nfunction %s\ncondition %s\n", filename, line, func, condition);
c000bcb2:	83 ec 0c             	sub    $0xc,%esp
c000bcb5:	ff 75 14             	pushl  0x14(%ebp)
c000bcb8:	ff 75 10             	pushl  0x10(%ebp)
c000bcbb:	ff 75 0c             	pushl  0xc(%ebp)
c000bcbe:	ff 75 08             	pushl  0x8(%ebp)
c000bcc1:	68 e0 ec 00 c0       	push   $0xc000ece0
c000bcc6:	e8 4b a0 ff ff       	call   c0005d16 <printf>
c000bccb:	83 c4 20             	add    $0x20,%esp
/work/x86_os_my/lib/user/assert.c:5 (discriminator 1)
	while(1);
c000bcce:	eb fe                	jmp    c000bcce <user_spin+0x22>

c000bcd0 <wash_path>:
wash_path():
/work/x86_os_my/shell/buildin_cmd.c:16
/* 将路径old_abs_path中的..和.转换为实际路径后存入new_abs_path */
// 从左到右解析 old_abs_path 路径中的每一层，
// 若解析出来的目录名不是“..”，就将其连接到 new_abs_path
// 若是“ ..” , 就将 new_abs_path 的最后一层目录去掉。
// 若是“ . ” , 就什么都不做
static void wash_path(char* old_abs_path, char* new_abs_path) {
c000bcd0:	55                   	push   %ebp
c000bcd1:	89 e5                	mov    %esp,%ebp
c000bcd3:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/shell/buildin_cmd.c:17
	assert(old_abs_path[0] == '/');
c000bcd6:	8b 45 08             	mov    0x8(%ebp),%eax
c000bcd9:	0f b6 00             	movzbl (%eax),%eax
c000bcdc:	3c 2f                	cmp    $0x2f,%al
c000bcde:	74 19                	je     c000bcf9 <wash_path+0x29>
/work/x86_os_my/shell/buildin_cmd.c:17 (discriminator 1)
c000bce0:	68 14 ed 00 c0       	push   $0xc000ed14
c000bce5:	68 08 f0 00 c0       	push   $0xc000f008
c000bcea:	6a 11                	push   $0x11
c000bcec:	68 2b ed 00 c0       	push   $0xc000ed2b
c000bcf1:	e8 b6 ff ff ff       	call   c000bcac <user_spin>
c000bcf6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:18
	char name[MAX_FILE_NAME_LEN] = {0};    
c000bcf9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c000bd00:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c000bd07:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c000bd0e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:19
	char* sub_path = old_abs_path;
c000bd15:	8b 45 08             	mov    0x8(%ebp),%eax
c000bd18:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:20
	sub_path = path_parse(sub_path, name);
c000bd1b:	83 ec 08             	sub    $0x8,%esp
c000bd1e:	8d 45 e0             	lea    -0x20(%ebp),%eax
c000bd21:	50                   	push   %eax
c000bd22:	ff 75 f4             	pushl  -0xc(%ebp)
c000bd25:	e8 97 b4 ff ff       	call   c00071c1 <path_parse>
c000bd2a:	83 c4 10             	add    $0x10,%esp
c000bd2d:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:21
	if (name[0] == 0) {	// 若只键入了"/",直接将"/"存入new_abs_path后返回 
c000bd30:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c000bd34:	84 c0                	test   %al,%al
c000bd36:	75 14                	jne    c000bd4c <wash_path+0x7c>
/work/x86_os_my/shell/buildin_cmd.c:22
		new_abs_path[0] = '/';
c000bd38:	8b 45 0c             	mov    0xc(%ebp),%eax
c000bd3b:	c6 00 2f             	movb   $0x2f,(%eax)
/work/x86_os_my/shell/buildin_cmd.c:23
		new_abs_path[1] = 0;
c000bd3e:	8b 45 0c             	mov    0xc(%ebp),%eax
c000bd41:	83 c0 01             	add    $0x1,%eax
c000bd44:	c6 00 00             	movb   $0x0,(%eax)
c000bd47:	e9 f2 00 00 00       	jmp    c000be3e <wash_path+0x16e>
/work/x86_os_my/shell/buildin_cmd.c:26
		return;
	}
	new_abs_path[0] = 0;	// 避免传给new_abs_path的缓冲区不干净
c000bd4c:	8b 45 0c             	mov    0xc(%ebp),%eax
c000bd4f:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/shell/buildin_cmd.c:27
	strcat(new_abs_path, "/");
c000bd52:	83 ec 08             	sub    $0x8,%esp
c000bd55:	68 3f ed 00 c0       	push   $0xc000ed3f
c000bd5a:	ff 75 0c             	pushl  0xc(%ebp)
c000bd5d:	e8 f5 7d ff ff       	call   c0003b57 <strcat>
c000bd62:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:28
	while (name[0]) {
c000bd65:	e9 c8 00 00 00       	jmp    c000be32 <wash_path+0x162>
/work/x86_os_my/shell/buildin_cmd.c:30
		/* 如果是上一级目录“..” */
		if (!strcmp("..", name)) {
c000bd6a:	83 ec 08             	sub    $0x8,%esp
c000bd6d:	8d 45 e0             	lea    -0x20(%ebp),%eax
c000bd70:	50                   	push   %eax
c000bd71:	68 41 ed 00 c0       	push   $0xc000ed41
c000bd76:	e8 ad 7c ff ff       	call   c0003a28 <strcmp>
c000bd7b:	83 c4 10             	add    $0x10,%esp
c000bd7e:	84 c0                	test   %al,%al
c000bd80:	75 2e                	jne    c000bdb0 <wash_path+0xe0>
/work/x86_os_my/shell/buildin_cmd.c:31
			char* slash_ptr =  strrchr(new_abs_path, '/');
c000bd82:	83 ec 08             	sub    $0x8,%esp
c000bd85:	6a 2f                	push   $0x2f
c000bd87:	ff 75 0c             	pushl  0xc(%ebp)
c000bd8a:	e8 6a 7d ff ff       	call   c0003af9 <strrchr>
c000bd8f:	83 c4 10             	add    $0x10,%esp
c000bd92:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:34
			/*如果未到new_abs_path中的顶层目录,就将最右边的'/'替换为0,
			这样便去除了new_abs_path中最后一层路径,相当于到了上一级目录 */
			if (slash_ptr != new_abs_path) {	// 如new_abs_path为“/a/b”,".."之后则变为“/a”
c000bd95:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000bd98:	3b 45 0c             	cmp    0xc(%ebp),%eax
c000bd9b:	74 08                	je     c000bda5 <wash_path+0xd5>
/work/x86_os_my/shell/buildin_cmd.c:35
				*slash_ptr = 0;
c000bd9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000bda0:	c6 00 00             	movb   $0x0,(%eax)
c000bda3:	eb 5f                	jmp    c000be04 <wash_path+0x134>
/work/x86_os_my/shell/buildin_cmd.c:39
			} else {	// 如new_abs_path为"/a",".."之后则变为"/"
				/* 若new_abs_path中只有1个'/',即表示已经到了顶层目录,
				就将下一个字符置为结束符0. */
				*(slash_ptr + 1) = 0;
c000bda5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000bda8:	83 c0 01             	add    $0x1,%eax
c000bdab:	c6 00 00             	movb   $0x0,(%eax)
c000bdae:	eb 54                	jmp    c000be04 <wash_path+0x134>
/work/x86_os_my/shell/buildin_cmd.c:41
			}
		} else if (strcmp(".", name)) {	// 如果路径不是‘.’,就将name拼接到new_abs_path
c000bdb0:	83 ec 08             	sub    $0x8,%esp
c000bdb3:	8d 45 e0             	lea    -0x20(%ebp),%eax
c000bdb6:	50                   	push   %eax
c000bdb7:	68 44 ed 00 c0       	push   $0xc000ed44
c000bdbc:	e8 67 7c ff ff       	call   c0003a28 <strcmp>
c000bdc1:	83 c4 10             	add    $0x10,%esp
c000bdc4:	84 c0                	test   %al,%al
c000bdc6:	74 3c                	je     c000be04 <wash_path+0x134>
/work/x86_os_my/shell/buildin_cmd.c:42
			if (strcmp(new_abs_path, "/")) {	// 如果new_abs_path不是"/",就拼接一个"/",此处的判断是为了避免路径开头变成这样"//"
c000bdc8:	83 ec 08             	sub    $0x8,%esp
c000bdcb:	68 3f ed 00 c0       	push   $0xc000ed3f
c000bdd0:	ff 75 0c             	pushl  0xc(%ebp)
c000bdd3:	e8 50 7c ff ff       	call   c0003a28 <strcmp>
c000bdd8:	83 c4 10             	add    $0x10,%esp
c000bddb:	84 c0                	test   %al,%al
c000bddd:	74 13                	je     c000bdf2 <wash_path+0x122>
/work/x86_os_my/shell/buildin_cmd.c:43
				strcat(new_abs_path, "/");
c000bddf:	83 ec 08             	sub    $0x8,%esp
c000bde2:	68 3f ed 00 c0       	push   $0xc000ed3f
c000bde7:	ff 75 0c             	pushl  0xc(%ebp)
c000bdea:	e8 68 7d ff ff       	call   c0003b57 <strcat>
c000bdef:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:45
			}
			strcat(new_abs_path, name);
c000bdf2:	83 ec 08             	sub    $0x8,%esp
c000bdf5:	8d 45 e0             	lea    -0x20(%ebp),%eax
c000bdf8:	50                   	push   %eax
c000bdf9:	ff 75 0c             	pushl  0xc(%ebp)
c000bdfc:	e8 56 7d ff ff       	call   c0003b57 <strcat>
c000be01:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:49
		}	// 若name为当前目录".",无须处理new_abs_path

		/* 继续遍历下一层路径 */
		memset(name, 0, MAX_FILE_NAME_LEN);
c000be04:	83 ec 04             	sub    $0x4,%esp
c000be07:	6a 10                	push   $0x10
c000be09:	6a 00                	push   $0x0
c000be0b:	8d 45 e0             	lea    -0x20(%ebp),%eax
c000be0e:	50                   	push   %eax
c000be0f:	e8 3f 7a ff ff       	call   c0003853 <memset>
c000be14:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:50
		if (sub_path) {
c000be17:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c000be1b:	74 15                	je     c000be32 <wash_path+0x162>
/work/x86_os_my/shell/buildin_cmd.c:51
			sub_path = path_parse(sub_path, name);
c000be1d:	83 ec 08             	sub    $0x8,%esp
c000be20:	8d 45 e0             	lea    -0x20(%ebp),%eax
c000be23:	50                   	push   %eax
c000be24:	ff 75 f4             	pushl  -0xc(%ebp)
c000be27:	e8 95 b3 ff ff       	call   c00071c1 <path_parse>
c000be2c:	83 c4 10             	add    $0x10,%esp
c000be2f:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:28
		new_abs_path[1] = 0;
		return;
	}
	new_abs_path[0] = 0;	// 避免传给new_abs_path的缓冲区不干净
	strcat(new_abs_path, "/");
	while (name[0]) {
c000be32:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c000be36:	84 c0                	test   %al,%al
c000be38:	0f 85 2c ff ff ff    	jne    c000bd6a <wash_path+0x9a>
/work/x86_os_my/shell/buildin_cmd.c:54
		memset(name, 0, MAX_FILE_NAME_LEN);
		if (sub_path) {
			sub_path = path_parse(sub_path, name);
		}
	}
}
c000be3e:	c9                   	leave  
c000be3f:	c3                   	ret    

c000be40 <make_clear_abs_path>:
make_clear_abs_path():
/work/x86_os_my/shell/buildin_cmd.c:60

/* 相对路径，转换成绝对路径，应该给用户层做，陷入内核态之后的操作不应该过长。
 * 当前工作路径 + 相对路径 = 绝对路径
 */
/* 将path处理成不含..和.的绝对路径,存储在final_path */
void make_clear_abs_path(char* path, char* final_path) {
c000be40:	55                   	push   %ebp
c000be41:	89 e5                	mov    %esp,%ebp
c000be43:	57                   	push   %edi
c000be44:	81 ec 04 02 00 00    	sub    $0x204,%esp
/work/x86_os_my/shell/buildin_cmd.c:61
	char abs_path[MAX_PATH_LEN] = {0};
c000be4a:	8d 95 f8 fd ff ff    	lea    -0x208(%ebp),%edx
c000be50:	b8 00 00 00 00       	mov    $0x0,%eax
c000be55:	b9 80 00 00 00       	mov    $0x80,%ecx
c000be5a:	89 d7                	mov    %edx,%edi
c000be5c:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/shell/buildin_cmd.c:63
	/* 先判断是否输入的是绝对路径 */
	if (path[0] != '/') {	// 若输入的不是绝对路径,就拼接成绝对路径
c000be5e:	8b 45 08             	mov    0x8(%ebp),%eax
c000be61:	0f b6 00             	movzbl (%eax),%eax
c000be64:	3c 2f                	cmp    $0x2f,%al
c000be66:	74 61                	je     c000bec9 <make_clear_abs_path+0x89>
/work/x86_os_my/shell/buildin_cmd.c:64
		memset(abs_path, 0, MAX_PATH_LEN);
c000be68:	83 ec 04             	sub    $0x4,%esp
c000be6b:	68 00 02 00 00       	push   $0x200
c000be70:	6a 00                	push   $0x0
c000be72:	8d 85 f8 fd ff ff    	lea    -0x208(%ebp),%eax
c000be78:	50                   	push   %eax
c000be79:	e8 d5 79 ff ff       	call   c0003853 <memset>
c000be7e:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:65
		if (getcwd(abs_path, MAX_PATH_LEN) != NULL) {
c000be81:	83 ec 08             	sub    $0x8,%esp
c000be84:	68 00 02 00 00       	push   $0x200
c000be89:	8d 85 f8 fd ff ff    	lea    -0x208(%ebp),%eax
c000be8f:	50                   	push   %eax
c000be90:	e8 53 99 ff ff       	call   c00057e8 <getcwd>
c000be95:	83 c4 10             	add    $0x10,%esp
c000be98:	85 c0                	test   %eax,%eax
c000be9a:	74 2d                	je     c000bec9 <make_clear_abs_path+0x89>
/work/x86_os_my/shell/buildin_cmd.c:66
			if (!((abs_path[0] == '/') && (abs_path[1] == 0))) {	// 若abs_path表示的当前目录不是根目录/
c000be9c:	0f b6 85 f8 fd ff ff 	movzbl -0x208(%ebp),%eax
c000bea3:	3c 2f                	cmp    $0x2f,%al
c000bea5:	75 0b                	jne    c000beb2 <make_clear_abs_path+0x72>
/work/x86_os_my/shell/buildin_cmd.c:66 (discriminator 1)
c000bea7:	0f b6 85 f9 fd ff ff 	movzbl -0x207(%ebp),%eax
c000beae:	84 c0                	test   %al,%al
c000beb0:	74 17                	je     c000bec9 <make_clear_abs_path+0x89>
/work/x86_os_my/shell/buildin_cmd.c:67
				strcat(abs_path, "/");
c000beb2:	83 ec 08             	sub    $0x8,%esp
c000beb5:	68 3f ed 00 c0       	push   $0xc000ed3f
c000beba:	8d 85 f8 fd ff ff    	lea    -0x208(%ebp),%eax
c000bec0:	50                   	push   %eax
c000bec1:	e8 91 7c ff ff       	call   c0003b57 <strcat>
c000bec6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:71
			}
		}
	}
	strcat(abs_path, path);
c000bec9:	83 ec 08             	sub    $0x8,%esp
c000becc:	ff 75 08             	pushl  0x8(%ebp)
c000becf:	8d 85 f8 fd ff ff    	lea    -0x208(%ebp),%eax
c000bed5:	50                   	push   %eax
c000bed6:	e8 7c 7c ff ff       	call   c0003b57 <strcat>
c000bedb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:72
	wash_path(abs_path, final_path);
c000bede:	83 ec 08             	sub    $0x8,%esp
c000bee1:	ff 75 0c             	pushl  0xc(%ebp)
c000bee4:	8d 85 f8 fd ff ff    	lea    -0x208(%ebp),%eax
c000beea:	50                   	push   %eax
c000beeb:	e8 e0 fd ff ff       	call   c000bcd0 <wash_path>
c000bef0:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:73
}
c000bef3:	90                   	nop
c000bef4:	8b 7d fc             	mov    -0x4(%ebp),%edi
c000bef7:	c9                   	leave  
c000bef8:	c3                   	ret    

c000bef9 <buildin_pwd>:
buildin_pwd():
/work/x86_os_my/shell/buildin_cmd.c:77


/* pwd命令的内建函数 */
void buildin_pwd(uint32_t argc, char** argv UNUSED) {
c000bef9:	55                   	push   %ebp
c000befa:	89 e5                	mov    %esp,%ebp
c000befc:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/shell/buildin_cmd.c:78
	if (argc != 1) {
c000beff:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c000bf03:	74 12                	je     c000bf17 <buildin_pwd+0x1e>
/work/x86_os_my/shell/buildin_cmd.c:79
		printf("pwd: no argument support!\n");
c000bf05:	83 ec 0c             	sub    $0xc,%esp
c000bf08:	68 46 ed 00 c0       	push   $0xc000ed46
c000bf0d:	e8 04 9e ff ff       	call   c0005d16 <printf>
c000bf12:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:80
		return;
c000bf15:	eb 40                	jmp    c000bf57 <buildin_pwd+0x5e>
/work/x86_os_my/shell/buildin_cmd.c:82
	} else {
		if (NULL != getcwd(final_path, MAX_PATH_LEN)) {
c000bf17:	83 ec 08             	sub    $0x8,%esp
c000bf1a:	68 00 02 00 00       	push   $0x200
c000bf1f:	68 20 16 01 c0       	push   $0xc0011620
c000bf24:	e8 bf 98 ff ff       	call   c00057e8 <getcwd>
c000bf29:	83 c4 10             	add    $0x10,%esp
c000bf2c:	85 c0                	test   %eax,%eax
c000bf2e:	74 17                	je     c000bf47 <buildin_pwd+0x4e>
/work/x86_os_my/shell/buildin_cmd.c:83
			printf("%s\n", final_path);
c000bf30:	83 ec 08             	sub    $0x8,%esp
c000bf33:	68 20 16 01 c0       	push   $0xc0011620
c000bf38:	68 61 ed 00 c0       	push   $0xc000ed61
c000bf3d:	e8 d4 9d ff ff       	call   c0005d16 <printf>
c000bf42:	83 c4 10             	add    $0x10,%esp
c000bf45:	eb 10                	jmp    c000bf57 <buildin_pwd+0x5e>
/work/x86_os_my/shell/buildin_cmd.c:85
		} else {
			printf("pwd: get current work directory failed.\n");
c000bf47:	83 ec 0c             	sub    $0xc,%esp
c000bf4a:	68 68 ed 00 c0       	push   $0xc000ed68
c000bf4f:	e8 c2 9d ff ff       	call   c0005d16 <printf>
c000bf54:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:88
		}
	}
}
c000bf57:	c9                   	leave  
c000bf58:	c3                   	ret    

c000bf59 <buildin_cd>:
buildin_cd():
/work/x86_os_my/shell/buildin_cmd.c:91

/* cd命令的内建函数 */
char* buildin_cd(uint32_t argc, char** argv) {
c000bf59:	55                   	push   %ebp
c000bf5a:	89 e5                	mov    %esp,%ebp
c000bf5c:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/shell/buildin_cmd.c:92
	if (argc > 2) {
c000bf5f:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c000bf63:	76 17                	jbe    c000bf7c <buildin_cd+0x23>
/work/x86_os_my/shell/buildin_cmd.c:93
		printf("cd: only support 1 argument!\n");
c000bf65:	83 ec 0c             	sub    $0xc,%esp
c000bf68:	68 91 ed 00 c0       	push   $0xc000ed91
c000bf6d:	e8 a4 9d ff ff       	call   c0005d16 <printf>
c000bf72:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:94
		return NULL;
c000bf75:	b8 00 00 00 00       	mov    $0x0,%eax
c000bf7a:	eb 65                	jmp    c000bfe1 <buildin_cd+0x88>
/work/x86_os_my/shell/buildin_cmd.c:98
	}

	/* 若是只键入cd而无参数,直接返回到根目录. */
	if (argc == 1) {
c000bf7c:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c000bf80:	75 10                	jne    c000bf92 <buildin_cd+0x39>
/work/x86_os_my/shell/buildin_cmd.c:99
		final_path[0] = '/';
c000bf82:	c6 05 20 16 01 c0 2f 	movb   $0x2f,0xc0011620
/work/x86_os_my/shell/buildin_cmd.c:100
		final_path[1] = 0;
c000bf89:	c6 05 21 16 01 c0 00 	movb   $0x0,0xc0011621
c000bf90:	eb 19                	jmp    c000bfab <buildin_cd+0x52>
/work/x86_os_my/shell/buildin_cmd.c:102
	} else {
		make_clear_abs_path(argv[1], final_path);
c000bf92:	8b 45 0c             	mov    0xc(%ebp),%eax
c000bf95:	83 c0 04             	add    $0x4,%eax
c000bf98:	8b 00                	mov    (%eax),%eax
c000bf9a:	83 ec 08             	sub    $0x8,%esp
c000bf9d:	68 20 16 01 c0       	push   $0xc0011620
c000bfa2:	50                   	push   %eax
c000bfa3:	e8 98 fe ff ff       	call   c000be40 <make_clear_abs_path>
c000bfa8:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:105
	}

	if (chdir(final_path) == -1) {
c000bfab:	83 ec 0c             	sub    $0xc,%esp
c000bfae:	68 20 16 01 c0       	push   $0xc0011620
c000bfb3:	e8 bd 99 ff ff       	call   c0005975 <chdir>
c000bfb8:	83 c4 10             	add    $0x10,%esp
c000bfbb:	83 f8 ff             	cmp    $0xffffffff,%eax
c000bfbe:	75 1c                	jne    c000bfdc <buildin_cd+0x83>
/work/x86_os_my/shell/buildin_cmd.c:106
		printf("cd: no such directory %s\n", final_path);
c000bfc0:	83 ec 08             	sub    $0x8,%esp
c000bfc3:	68 20 16 01 c0       	push   $0xc0011620
c000bfc8:	68 af ed 00 c0       	push   $0xc000edaf
c000bfcd:	e8 44 9d ff ff       	call   c0005d16 <printf>
c000bfd2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:107
		return NULL;
c000bfd5:	b8 00 00 00 00       	mov    $0x0,%eax
c000bfda:	eb 05                	jmp    c000bfe1 <buildin_cd+0x88>
/work/x86_os_my/shell/buildin_cmd.c:109
	}
	return final_path;
c000bfdc:	b8 20 16 01 c0       	mov    $0xc0011620,%eax
/work/x86_os_my/shell/buildin_cmd.c:110
}
c000bfe1:	c9                   	leave  
c000bfe2:	c3                   	ret    

c000bfe3 <buildin_ls>:
buildin_ls():
/work/x86_os_my/shell/buildin_cmd.c:113

/* ls命令的内建函数 */
void buildin_ls(uint32_t argc, char** argv) {
c000bfe3:	55                   	push   %ebp
c000bfe4:	89 e5                	mov    %esp,%ebp
c000bfe6:	57                   	push   %edi
c000bfe7:	53                   	push   %ebx
c000bfe8:	81 ec 30 02 00 00    	sub    $0x230,%esp
/work/x86_os_my/shell/buildin_cmd.c:114
	char* pathname = NULL;
c000bfee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:116
	struct stat file_stat;
	memset(&file_stat, 0, sizeof(struct stat));
c000bff5:	83 ec 04             	sub    $0x4,%esp
c000bff8:	6a 0c                	push   $0xc
c000bffa:	6a 00                	push   $0x0
c000bffc:	8d 45 c8             	lea    -0x38(%ebp),%eax
c000bfff:	50                   	push   %eax
c000c000:	e8 4e 78 ff ff       	call   c0003853 <memset>
c000c005:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:117
	bool long_info = false;
c000c008:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:118
	uint32_t arg_path_nr = 0;
c000c00f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:119
	uint32_t arg_idx = 1;   // 跨过argv[0],argv[0]是字符串“ls”
c000c016:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:120
	while (arg_idx < argc) {
c000c01d:	e9 ec 00 00 00       	jmp    c000c10e <buildin_ls+0x12b>
/work/x86_os_my/shell/buildin_cmd.c:121
		if (argv[arg_idx][0] == '-') {	  // 如果是选项,单词的首字符是-
c000c022:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000c025:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000c02c:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c02f:	01 d0                	add    %edx,%eax
c000c031:	8b 00                	mov    (%eax),%eax
c000c033:	0f b6 00             	movzbl (%eax),%eax
c000c036:	3c 2d                	cmp    $0x2d,%al
c000c038:	0f 85 94 00 00 00    	jne    c000c0d2 <buildin_ls+0xef>
/work/x86_os_my/shell/buildin_cmd.c:122
			if (!strcmp("-l", argv[arg_idx])) {         // 如果是参数-l
c000c03e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000c041:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000c048:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c04b:	01 d0                	add    %edx,%eax
c000c04d:	8b 00                	mov    (%eax),%eax
c000c04f:	83 ec 08             	sub    $0x8,%esp
c000c052:	50                   	push   %eax
c000c053:	68 c9 ed 00 c0       	push   $0xc000edc9
c000c058:	e8 cb 79 ff ff       	call   c0003a28 <strcmp>
c000c05d:	83 c4 10             	add    $0x10,%esp
c000c060:	84 c0                	test   %al,%al
c000c062:	75 0c                	jne    c000c070 <buildin_ls+0x8d>
/work/x86_os_my/shell/buildin_cmd.c:123
				long_info = true;
c000c064:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c000c06b:	e9 9a 00 00 00       	jmp    c000c10a <buildin_ls+0x127>
/work/x86_os_my/shell/buildin_cmd.c:124
			} else if (!strcmp("-h", argv[arg_idx])) {   // 参数-h
c000c070:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000c073:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000c07a:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c07d:	01 d0                	add    %edx,%eax
c000c07f:	8b 00                	mov    (%eax),%eax
c000c081:	83 ec 08             	sub    $0x8,%esp
c000c084:	50                   	push   %eax
c000c085:	68 cc ed 00 c0       	push   $0xc000edcc
c000c08a:	e8 99 79 ff ff       	call   c0003a28 <strcmp>
c000c08f:	83 c4 10             	add    $0x10,%esp
c000c092:	84 c0                	test   %al,%al
c000c094:	75 15                	jne    c000c0ab <buildin_ls+0xc8>
/work/x86_os_my/shell/buildin_cmd.c:125
				printf("usage: -l list all infomation about the file.\n-h for help\nlist all files in the current dirctory if no option\n");
c000c096:	83 ec 0c             	sub    $0xc,%esp
c000c099:	68 d0 ed 00 c0       	push   $0xc000edd0
c000c09e:	e8 73 9c ff ff       	call   c0005d16 <printf>
c000c0a3:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:126
				return;
c000c0a6:	e9 f2 02 00 00       	jmp    c000c39d <buildin_ls+0x3ba>
/work/x86_os_my/shell/buildin_cmd.c:128
			} else {	// 只支持-h -l两个选项
				printf("ls: invalid option %s\nTry `ls -h' for more information.\n", argv[arg_idx]);
c000c0ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000c0ae:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000c0b5:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c0b8:	01 d0                	add    %edx,%eax
c000c0ba:	8b 00                	mov    (%eax),%eax
c000c0bc:	83 ec 08             	sub    $0x8,%esp
c000c0bf:	50                   	push   %eax
c000c0c0:	68 40 ee 00 c0       	push   $0xc000ee40
c000c0c5:	e8 4c 9c ff ff       	call   c0005d16 <printf>
c000c0ca:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:129
				return;
c000c0cd:	e9 cb 02 00 00       	jmp    c000c39d <buildin_ls+0x3ba>
/work/x86_os_my/shell/buildin_cmd.c:132
			}
		} else {	     // ls的路径参数
			if (arg_path_nr == 0) {
c000c0d2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c000c0d6:	75 1d                	jne    c000c0f5 <buildin_ls+0x112>
/work/x86_os_my/shell/buildin_cmd.c:133
				pathname = argv[arg_idx];
c000c0d8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000c0db:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000c0e2:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c0e5:	01 d0                	add    %edx,%eax
c000c0e7:	8b 00                	mov    (%eax),%eax
c000c0e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:134
				arg_path_nr = 1;
c000c0ec:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
c000c0f3:	eb 15                	jmp    c000c10a <buildin_ls+0x127>
/work/x86_os_my/shell/buildin_cmd.c:136
			} else {
				printf("ls: only support one path\n");
c000c0f5:	83 ec 0c             	sub    $0xc,%esp
c000c0f8:	68 79 ee 00 c0       	push   $0xc000ee79
c000c0fd:	e8 14 9c ff ff       	call   c0005d16 <printf>
c000c102:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:137
				return;
c000c105:	e9 93 02 00 00       	jmp    c000c39d <buildin_ls+0x3ba>
/work/x86_os_my/shell/buildin_cmd.c:140
			}
		}
		arg_idx++;
c000c10a:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:120
	struct stat file_stat;
	memset(&file_stat, 0, sizeof(struct stat));
	bool long_info = false;
	uint32_t arg_path_nr = 0;
	uint32_t arg_idx = 1;   // 跨过argv[0],argv[0]是字符串“ls”
	while (arg_idx < argc) {
c000c10e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000c111:	3b 45 08             	cmp    0x8(%ebp),%eax
c000c114:	0f 82 08 ff ff ff    	jb     c000c022 <buildin_ls+0x3f>
/work/x86_os_my/shell/buildin_cmd.c:143
			}
		}
		arg_idx++;
	}

	if (pathname == NULL) {	 // 若只输入了ls 或 ls -l,没有输入操作路径,默认以当前路径的绝对路径为参数.
c000c11a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c000c11e:	75 37                	jne    c000c157 <buildin_ls+0x174>
/work/x86_os_my/shell/buildin_cmd.c:144
		if (NULL != getcwd(final_path, MAX_PATH_LEN)) {
c000c120:	83 ec 08             	sub    $0x8,%esp
c000c123:	68 00 02 00 00       	push   $0x200
c000c128:	68 20 16 01 c0       	push   $0xc0011620
c000c12d:	e8 b6 96 ff ff       	call   c00057e8 <getcwd>
c000c132:	83 c4 10             	add    $0x10,%esp
c000c135:	85 c0                	test   %eax,%eax
c000c137:	74 09                	je     c000c142 <buildin_ls+0x15f>
/work/x86_os_my/shell/buildin_cmd.c:145
			pathname = final_path;
c000c139:	c7 45 f4 20 16 01 c0 	movl   $0xc0011620,-0xc(%ebp)
c000c140:	eb 2f                	jmp    c000c171 <buildin_ls+0x18e>
/work/x86_os_my/shell/buildin_cmd.c:147
		} else {
			printf("ls: getcwd for default path failed\n");
c000c142:	83 ec 0c             	sub    $0xc,%esp
c000c145:	68 94 ee 00 c0       	push   $0xc000ee94
c000c14a:	e8 c7 9b ff ff       	call   c0005d16 <printf>
c000c14f:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:148
			return;
c000c152:	e9 46 02 00 00       	jmp    c000c39d <buildin_ls+0x3ba>
/work/x86_os_my/shell/buildin_cmd.c:151
		}
	} else {
		make_clear_abs_path(pathname, final_path);
c000c157:	83 ec 08             	sub    $0x8,%esp
c000c15a:	68 20 16 01 c0       	push   $0xc0011620
c000c15f:	ff 75 f4             	pushl  -0xc(%ebp)
c000c162:	e8 d9 fc ff ff       	call   c000be40 <make_clear_abs_path>
c000c167:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:152
		pathname = final_path;
c000c16a:	c7 45 f4 20 16 01 c0 	movl   $0xc0011620,-0xc(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:155
	}

	if (stat(pathname, &file_stat) == -1) {
c000c171:	83 ec 08             	sub    $0x8,%esp
c000c174:	8d 45 c8             	lea    -0x38(%ebp),%eax
c000c177:	50                   	push   %eax
c000c178:	ff 75 f4             	pushl  -0xc(%ebp)
c000c17b:	e8 d3 97 ff ff       	call   c0005953 <stat>
c000c180:	83 c4 10             	add    $0x10,%esp
c000c183:	83 f8 ff             	cmp    $0xffffffff,%eax
c000c186:	75 18                	jne    c000c1a0 <buildin_ls+0x1bd>
/work/x86_os_my/shell/buildin_cmd.c:156
		printf("ls: cannot access %s: No such file or directory\n", pathname);
c000c188:	83 ec 08             	sub    $0x8,%esp
c000c18b:	ff 75 f4             	pushl  -0xc(%ebp)
c000c18e:	68 b8 ee 00 c0       	push   $0xc000eeb8
c000c193:	e8 7e 9b ff ff       	call   c0005d16 <printf>
c000c198:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:157
		return;
c000c19b:	e9 fd 01 00 00       	jmp    c000c39d <buildin_ls+0x3ba>
/work/x86_os_my/shell/buildin_cmd.c:159
	}
	if (file_stat.st_filetype == FT_DIRECTORY) {
c000c1a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
c000c1a3:	83 f8 02             	cmp    $0x2,%eax
c000c1a6:	0f 85 be 01 00 00    	jne    c000c36a <buildin_ls+0x387>
/work/x86_os_my/shell/buildin_cmd.c:160
		struct dir* dir = opendir(pathname);
c000c1ac:	83 ec 0c             	sub    $0xc,%esp
c000c1af:	ff 75 f4             	pushl  -0xc(%ebp)
c000c1b2:	e8 03 97 ff ff       	call   c00058ba <opendir>
c000c1b7:	83 c4 10             	add    $0x10,%esp
c000c1ba:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:161
		struct dir_entry* dir_e = NULL;
c000c1bd:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:162
		char sub_pathname[MAX_PATH_LEN] = {0};
c000c1c4:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
c000c1ca:	b8 00 00 00 00       	mov    $0x0,%eax
c000c1cf:	b9 80 00 00 00       	mov    $0x80,%ecx
c000c1d4:	89 d7                	mov    %edx,%edi
c000c1d6:	f3 ab                	rep stos %eax,%es:(%edi)
/work/x86_os_my/shell/buildin_cmd.c:163
		uint32_t pathname_len = strlen(pathname);
c000c1d8:	83 ec 0c             	sub    $0xc,%esp
c000c1db:	ff 75 f4             	pushl  -0xc(%ebp)
c000c1de:	e8 fa 77 ff ff       	call   c00039dd <strlen>
c000c1e3:	83 c4 10             	add    $0x10,%esp
c000c1e6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:164
		uint32_t last_char_idx = pathname_len - 1;
c000c1e9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000c1ec:	83 e8 01             	sub    $0x1,%eax
c000c1ef:	89 45 d4             	mov    %eax,-0x2c(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:165
		memcpy(sub_pathname, pathname, pathname_len);
c000c1f2:	83 ec 04             	sub    $0x4,%esp
c000c1f5:	ff 75 e4             	pushl  -0x1c(%ebp)
c000c1f8:	ff 75 f4             	pushl  -0xc(%ebp)
c000c1fb:	8d 85 c8 fd ff ff    	lea    -0x238(%ebp),%eax
c000c201:	50                   	push   %eax
c000c202:	e8 9e 76 ff ff       	call   c00038a5 <memcpy>
c000c207:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:166
		if (sub_pathname[last_char_idx] != '/') {
c000c20a:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
c000c210:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c000c213:	01 d0                	add    %edx,%eax
c000c215:	0f b6 00             	movzbl (%eax),%eax
c000c218:	3c 2f                	cmp    $0x2f,%al
c000c21a:	74 12                	je     c000c22e <buildin_ls+0x24b>
/work/x86_os_my/shell/buildin_cmd.c:167
			sub_pathname[pathname_len] = '/';
c000c21c:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
c000c222:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000c225:	01 d0                	add    %edx,%eax
c000c227:	c6 00 2f             	movb   $0x2f,(%eax)
/work/x86_os_my/shell/buildin_cmd.c:168
			pathname_len++;
c000c22a:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:170
		}
		rewinddir(dir);
c000c22e:	83 ec 0c             	sub    $0xc,%esp
c000c231:	ff 75 dc             	pushl  -0x24(%ebp)
c000c234:	e8 fd 96 ff ff       	call   c0005936 <rewinddir>
c000c239:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:171
		if (long_info) {
c000c23c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c000c240:	0f 84 ed 00 00 00    	je     c000c333 <buildin_ls+0x350>
/work/x86_os_my/shell/buildin_cmd.c:173
			char ftype;
			printf("total: %d\n", file_stat.st_size);
c000c246:	8b 45 cc             	mov    -0x34(%ebp),%eax
c000c249:	83 ec 08             	sub    $0x8,%esp
c000c24c:	50                   	push   %eax
c000c24d:	68 e9 ee 00 c0       	push   $0xc000eee9
c000c252:	e8 bf 9a ff ff       	call   c0005d16 <printf>
c000c257:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:174
			while((dir_e = readdir(dir))) {
c000c25a:	e9 a3 00 00 00       	jmp    c000c302 <buildin_ls+0x31f>
/work/x86_os_my/shell/buildin_cmd.c:175
				ftype = 'd';
c000c25f:	c6 45 e3 64          	movb   $0x64,-0x1d(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:176
				if (dir_e->f_type == FT_REGULAR) {
c000c263:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000c266:	8b 40 14             	mov    0x14(%eax),%eax
c000c269:	83 f8 01             	cmp    $0x1,%eax
c000c26c:	75 04                	jne    c000c272 <buildin_ls+0x28f>
/work/x86_os_my/shell/buildin_cmd.c:177
					ftype = '-';
c000c26e:	c6 45 e3 2d          	movb   $0x2d,-0x1d(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:179
				}
				sub_pathname[pathname_len] = 0;
c000c272:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
c000c278:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c000c27b:	01 d0                	add    %edx,%eax
c000c27d:	c6 00 00             	movb   $0x0,(%eax)
/work/x86_os_my/shell/buildin_cmd.c:180
				strcat(sub_pathname, dir_e->filename);
c000c280:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000c283:	83 ec 08             	sub    $0x8,%esp
c000c286:	50                   	push   %eax
c000c287:	8d 85 c8 fd ff ff    	lea    -0x238(%ebp),%eax
c000c28d:	50                   	push   %eax
c000c28e:	e8 c4 78 ff ff       	call   c0003b57 <strcat>
c000c293:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:181
				memset(&file_stat, 0, sizeof(struct stat));
c000c296:	83 ec 04             	sub    $0x4,%esp
c000c299:	6a 0c                	push   $0xc
c000c29b:	6a 00                	push   $0x0
c000c29d:	8d 45 c8             	lea    -0x38(%ebp),%eax
c000c2a0:	50                   	push   %eax
c000c2a1:	e8 ad 75 ff ff       	call   c0003853 <memset>
c000c2a6:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:182
				if (stat(sub_pathname, &file_stat) == -1) {
c000c2a9:	83 ec 08             	sub    $0x8,%esp
c000c2ac:	8d 45 c8             	lea    -0x38(%ebp),%eax
c000c2af:	50                   	push   %eax
c000c2b0:	8d 85 c8 fd ff ff    	lea    -0x238(%ebp),%eax
c000c2b6:	50                   	push   %eax
c000c2b7:	e8 97 96 ff ff       	call   c0005953 <stat>
c000c2bc:	83 c4 10             	add    $0x10,%esp
c000c2bf:	83 f8 ff             	cmp    $0xffffffff,%eax
c000c2c2:	75 1a                	jne    c000c2de <buildin_ls+0x2fb>
/work/x86_os_my/shell/buildin_cmd.c:183
					printf("ls: cannot access %s: No such file or directory\n", dir_e->filename);
c000c2c4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000c2c7:	83 ec 08             	sub    $0x8,%esp
c000c2ca:	50                   	push   %eax
c000c2cb:	68 b8 ee 00 c0       	push   $0xc000eeb8
c000c2d0:	e8 41 9a ff ff       	call   c0005d16 <printf>
c000c2d5:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:184
					return;
c000c2d8:	90                   	nop
c000c2d9:	e9 bf 00 00 00       	jmp    c000c39d <buildin_ls+0x3ba>
/work/x86_os_my/shell/buildin_cmd.c:186
				}
				printf("%c  %d  %d  %s\n", ftype, dir_e->i_no, file_stat.st_size, dir_e->filename);
c000c2de:	8b 5d d8             	mov    -0x28(%ebp),%ebx
c000c2e1:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c000c2e4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000c2e7:	8b 50 10             	mov    0x10(%eax),%edx
c000c2ea:	0f be 45 e3          	movsbl -0x1d(%ebp),%eax
c000c2ee:	83 ec 0c             	sub    $0xc,%esp
c000c2f1:	53                   	push   %ebx
c000c2f2:	51                   	push   %ecx
c000c2f3:	52                   	push   %edx
c000c2f4:	50                   	push   %eax
c000c2f5:	68 f4 ee 00 c0       	push   $0xc000eef4
c000c2fa:	e8 17 9a ff ff       	call   c0005d16 <printf>
c000c2ff:	83 c4 20             	add    $0x20,%esp
/work/x86_os_my/shell/buildin_cmd.c:174
		}
		rewinddir(dir);
		if (long_info) {
			char ftype;
			printf("total: %d\n", file_stat.st_size);
			while((dir_e = readdir(dir))) {
c000c302:	83 ec 0c             	sub    $0xc,%esp
c000c305:	ff 75 dc             	pushl  -0x24(%ebp)
c000c308:	e8 0a 96 ff ff       	call   c0005917 <readdir>
c000c30d:	83 c4 10             	add    $0x10,%esp
c000c310:	89 45 d8             	mov    %eax,-0x28(%ebp)
c000c313:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c000c317:	0f 85 42 ff ff ff    	jne    c000c25f <buildin_ls+0x27c>
c000c31d:	eb 3b                	jmp    c000c35a <buildin_ls+0x377>
/work/x86_os_my/shell/buildin_cmd.c:190
				}
				printf("%c  %d  %d  %s\n", ftype, dir_e->i_no, file_stat.st_size, dir_e->filename);
			}
		} else {
			while((dir_e = readdir(dir))) {
				printf("%s ", dir_e->filename);
c000c31f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000c322:	83 ec 08             	sub    $0x8,%esp
c000c325:	50                   	push   %eax
c000c326:	68 04 ef 00 c0       	push   $0xc000ef04
c000c32b:	e8 e6 99 ff ff       	call   c0005d16 <printf>
c000c330:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:189
					return;
				}
				printf("%c  %d  %d  %s\n", ftype, dir_e->i_no, file_stat.st_size, dir_e->filename);
			}
		} else {
			while((dir_e = readdir(dir))) {
c000c333:	83 ec 0c             	sub    $0xc,%esp
c000c336:	ff 75 dc             	pushl  -0x24(%ebp)
c000c339:	e8 d9 95 ff ff       	call   c0005917 <readdir>
c000c33e:	83 c4 10             	add    $0x10,%esp
c000c341:	89 45 d8             	mov    %eax,-0x28(%ebp)
c000c344:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c000c348:	75 d5                	jne    c000c31f <buildin_ls+0x33c>
/work/x86_os_my/shell/buildin_cmd.c:192
				printf("%s ", dir_e->filename);
			}
			printf("\n");
c000c34a:	83 ec 0c             	sub    $0xc,%esp
c000c34d:	68 08 ef 00 c0       	push   $0xc000ef08
c000c352:	e8 bf 99 ff ff       	call   c0005d16 <printf>
c000c357:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:194 (discriminator 1)
		}
		closedir(dir);
c000c35a:	83 ec 0c             	sub    $0xc,%esp
c000c35d:	ff 75 dc             	pushl  -0x24(%ebp)
c000c360:	e8 74 95 ff ff       	call   c00058d9 <closedir>
c000c365:	83 c4 10             	add    $0x10,%esp
c000c368:	eb 33                	jmp    c000c39d <buildin_ls+0x3ba>
/work/x86_os_my/shell/buildin_cmd.c:196
	} else {
		if (long_info) {
c000c36a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c000c36e:	74 1a                	je     c000c38a <buildin_ls+0x3a7>
/work/x86_os_my/shell/buildin_cmd.c:197
			printf("-  %d  %d  %s\n", file_stat.st_ino, file_stat.st_size, pathname);
c000c370:	8b 55 cc             	mov    -0x34(%ebp),%edx
c000c373:	8b 45 c8             	mov    -0x38(%ebp),%eax
c000c376:	ff 75 f4             	pushl  -0xc(%ebp)
c000c379:	52                   	push   %edx
c000c37a:	50                   	push   %eax
c000c37b:	68 0a ef 00 c0       	push   $0xc000ef0a
c000c380:	e8 91 99 ff ff       	call   c0005d16 <printf>
c000c385:	83 c4 10             	add    $0x10,%esp
c000c388:	eb 13                	jmp    c000c39d <buildin_ls+0x3ba>
/work/x86_os_my/shell/buildin_cmd.c:199
		} else {
			printf("%s\n", pathname);
c000c38a:	83 ec 08             	sub    $0x8,%esp
c000c38d:	ff 75 f4             	pushl  -0xc(%ebp)
c000c390:	68 61 ed 00 c0       	push   $0xc000ed61
c000c395:	e8 7c 99 ff ff       	call   c0005d16 <printf>
c000c39a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:202
		}
	}
}
c000c39d:	8d 65 f8             	lea    -0x8(%ebp),%esp
c000c3a0:	5b                   	pop    %ebx
c000c3a1:	5f                   	pop    %edi
c000c3a2:	5d                   	pop    %ebp
c000c3a3:	c3                   	ret    

c000c3a4 <buildin_ps>:
buildin_ps():
/work/x86_os_my/shell/buildin_cmd.c:205

/* ps命令内建函数 */
void buildin_ps(uint32_t argc, char** argv UNUSED) {
c000c3a4:	55                   	push   %ebp
c000c3a5:	89 e5                	mov    %esp,%ebp
c000c3a7:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/shell/buildin_cmd.c:206
	if (argc != 1) {
c000c3aa:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c000c3ae:	74 12                	je     c000c3c2 <buildin_ps+0x1e>
/work/x86_os_my/shell/buildin_cmd.c:207
		printf("ps: no argument support!\n");
c000c3b0:	83 ec 0c             	sub    $0xc,%esp
c000c3b3:	68 19 ef 00 c0       	push   $0xc000ef19
c000c3b8:	e8 59 99 ff ff       	call   c0005d16 <printf>
c000c3bd:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:208
		return;
c000c3c0:	eb 05                	jmp    c000c3c7 <buildin_ps+0x23>
/work/x86_os_my/shell/buildin_cmd.c:210
	}
	ps();
c000c3c2:	e8 cd 95 ff ff       	call   c0005994 <ps>
/work/x86_os_my/shell/buildin_cmd.c:211
}
c000c3c7:	c9                   	leave  
c000c3c8:	c3                   	ret    

c000c3c9 <buildin_clear>:
buildin_clear():
/work/x86_os_my/shell/buildin_cmd.c:214

/* clear命令内建函数 */
void buildin_clear(uint32_t argc, char** argv UNUSED) {
c000c3c9:	55                   	push   %ebp
c000c3ca:	89 e5                	mov    %esp,%ebp
c000c3cc:	83 ec 08             	sub    $0x8,%esp
/work/x86_os_my/shell/buildin_cmd.c:215
	if (argc != 1) {
c000c3cf:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c000c3d3:	74 12                	je     c000c3e7 <buildin_clear+0x1e>
/work/x86_os_my/shell/buildin_cmd.c:216
		printf("clear: no argument support!\n");
c000c3d5:	83 ec 0c             	sub    $0xc,%esp
c000c3d8:	68 33 ef 00 c0       	push   $0xc000ef33
c000c3dd:	e8 34 99 ff ff       	call   c0005d16 <printf>
c000c3e2:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:217
		return;
c000c3e5:	eb 05                	jmp    c000c3ec <buildin_clear+0x23>
/work/x86_os_my/shell/buildin_cmd.c:219
	}
	clear();
c000c3e7:	e8 e9 93 ff ff       	call   c00057d5 <clear>
/work/x86_os_my/shell/buildin_cmd.c:220
}
c000c3ec:	c9                   	leave  
c000c3ed:	c3                   	ret    

c000c3ee <buildin_mkdir>:
buildin_mkdir():
/work/x86_os_my/shell/buildin_cmd.c:223

/* mkdir命令内建函数 */
int32_t buildin_mkdir(uint32_t argc, char** argv) {
c000c3ee:	55                   	push   %ebp
c000c3ef:	89 e5                	mov    %esp,%ebp
c000c3f1:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/shell/buildin_cmd.c:224
	int32_t ret = -1;
c000c3f4:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:225
	if (argc != 2) {
c000c3fb:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c000c3ff:	74 12                	je     c000c413 <buildin_mkdir+0x25>
/work/x86_os_my/shell/buildin_cmd.c:226
		printf("mkdir: only support 1 argument!\n");
c000c401:	83 ec 0c             	sub    $0xc,%esp
c000c404:	68 50 ef 00 c0       	push   $0xc000ef50
c000c409:	e8 08 99 ff ff       	call   c0005d16 <printf>
c000c40e:	83 c4 10             	add    $0x10,%esp
c000c411:	eb 68                	jmp    c000c47b <buildin_mkdir+0x8d>
/work/x86_os_my/shell/buildin_cmd.c:228
	} else {
		make_clear_abs_path(argv[1], final_path);
c000c413:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c416:	83 c0 04             	add    $0x4,%eax
c000c419:	8b 00                	mov    (%eax),%eax
c000c41b:	83 ec 08             	sub    $0x8,%esp
c000c41e:	68 20 16 01 c0       	push   $0xc0011620
c000c423:	50                   	push   %eax
c000c424:	e8 17 fa ff ff       	call   c000be40 <make_clear_abs_path>
c000c429:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:230
		/* 若创建的不是根目录 */
		if (strcmp("/", final_path)) {
c000c42c:	83 ec 08             	sub    $0x8,%esp
c000c42f:	68 20 16 01 c0       	push   $0xc0011620
c000c434:	68 3f ed 00 c0       	push   $0xc000ed3f
c000c439:	e8 ea 75 ff ff       	call   c0003a28 <strcmp>
c000c43e:	83 c4 10             	add    $0x10,%esp
c000c441:	84 c0                	test   %al,%al
c000c443:	74 36                	je     c000c47b <buildin_mkdir+0x8d>
/work/x86_os_my/shell/buildin_cmd.c:231
			if (mkdir(final_path) == 0) {
c000c445:	83 ec 0c             	sub    $0xc,%esp
c000c448:	68 20 16 01 c0       	push   $0xc0011620
c000c44d:	e8 49 94 ff ff       	call   c000589b <mkdir>
c000c452:	83 c4 10             	add    $0x10,%esp
c000c455:	85 c0                	test   %eax,%eax
c000c457:	75 09                	jne    c000c462 <buildin_mkdir+0x74>
/work/x86_os_my/shell/buildin_cmd.c:232
				ret = 0;
c000c459:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c000c460:	eb 19                	jmp    c000c47b <buildin_mkdir+0x8d>
/work/x86_os_my/shell/buildin_cmd.c:234
			} else {
				printf("mkdir: create directory %s failed.\n", argv[1]);
c000c462:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c465:	83 c0 04             	add    $0x4,%eax
c000c468:	8b 00                	mov    (%eax),%eax
c000c46a:	83 ec 08             	sub    $0x8,%esp
c000c46d:	50                   	push   %eax
c000c46e:	68 74 ef 00 c0       	push   $0xc000ef74
c000c473:	e8 9e 98 ff ff       	call   c0005d16 <printf>
c000c478:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:238
			}
		}
	}
	return ret;
c000c47b:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/shell/buildin_cmd.c:239
}
c000c47e:	c9                   	leave  
c000c47f:	c3                   	ret    

c000c480 <buildin_rmdir>:
buildin_rmdir():
/work/x86_os_my/shell/buildin_cmd.c:242

/* rmdir命令内建函数 */
int32_t buildin_rmdir(uint32_t argc, char** argv) {
c000c480:	55                   	push   %ebp
c000c481:	89 e5                	mov    %esp,%ebp
c000c483:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/shell/buildin_cmd.c:243
	int32_t ret = -1;
c000c486:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:244
	if (argc != 2) {
c000c48d:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c000c491:	74 12                	je     c000c4a5 <buildin_rmdir+0x25>
/work/x86_os_my/shell/buildin_cmd.c:245
	printf("rmdir: only support 1 argument!\n");
c000c493:	83 ec 0c             	sub    $0xc,%esp
c000c496:	68 98 ef 00 c0       	push   $0xc000ef98
c000c49b:	e8 76 98 ff ff       	call   c0005d16 <printf>
c000c4a0:	83 c4 10             	add    $0x10,%esp
c000c4a3:	eb 68                	jmp    c000c50d <buildin_rmdir+0x8d>
/work/x86_os_my/shell/buildin_cmd.c:247
	} else {
		make_clear_abs_path(argv[1], final_path);
c000c4a5:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c4a8:	83 c0 04             	add    $0x4,%eax
c000c4ab:	8b 00                	mov    (%eax),%eax
c000c4ad:	83 ec 08             	sub    $0x8,%esp
c000c4b0:	68 20 16 01 c0       	push   $0xc0011620
c000c4b5:	50                   	push   %eax
c000c4b6:	e8 85 f9 ff ff       	call   c000be40 <make_clear_abs_path>
c000c4bb:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:249
		/* 若删除的不是根目录 */
		if (strcmp("/", final_path)) {
c000c4be:	83 ec 08             	sub    $0x8,%esp
c000c4c1:	68 20 16 01 c0       	push   $0xc0011620
c000c4c6:	68 3f ed 00 c0       	push   $0xc000ed3f
c000c4cb:	e8 58 75 ff ff       	call   c0003a28 <strcmp>
c000c4d0:	83 c4 10             	add    $0x10,%esp
c000c4d3:	84 c0                	test   %al,%al
c000c4d5:	74 36                	je     c000c50d <buildin_rmdir+0x8d>
/work/x86_os_my/shell/buildin_cmd.c:250
			if (rmdir(final_path) == 0) {
c000c4d7:	83 ec 0c             	sub    $0xc,%esp
c000c4da:	68 20 16 01 c0       	push   $0xc0011620
c000c4df:	e8 14 94 ff ff       	call   c00058f8 <rmdir>
c000c4e4:	83 c4 10             	add    $0x10,%esp
c000c4e7:	85 c0                	test   %eax,%eax
c000c4e9:	75 09                	jne    c000c4f4 <buildin_rmdir+0x74>
/work/x86_os_my/shell/buildin_cmd.c:251
				ret = 0;
c000c4eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c000c4f2:	eb 19                	jmp    c000c50d <buildin_rmdir+0x8d>
/work/x86_os_my/shell/buildin_cmd.c:253
			} else {
				printf("rmdir: remove %s failed.\n", argv[1]);
c000c4f4:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c4f7:	83 c0 04             	add    $0x4,%eax
c000c4fa:	8b 00                	mov    (%eax),%eax
c000c4fc:	83 ec 08             	sub    $0x8,%esp
c000c4ff:	50                   	push   %eax
c000c500:	68 b9 ef 00 c0       	push   $0xc000efb9
c000c505:	e8 0c 98 ff ff       	call   c0005d16 <printf>
c000c50a:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:257
			}
		}
	}
	return ret;
c000c50d:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/shell/buildin_cmd.c:258
}
c000c510:	c9                   	leave  
c000c511:	c3                   	ret    

c000c512 <buildin_rm>:
buildin_rm():
/work/x86_os_my/shell/buildin_cmd.c:261

/* rm命令内建函数 */
int32_t buildin_rm(uint32_t argc, char** argv) {
c000c512:	55                   	push   %ebp
c000c513:	89 e5                	mov    %esp,%ebp
c000c515:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/shell/buildin_cmd.c:262
	int32_t ret = -1;
c000c518:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/shell/buildin_cmd.c:263
	if (argc != 2) {
c000c51f:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
c000c523:	74 12                	je     c000c537 <buildin_rm+0x25>
/work/x86_os_my/shell/buildin_cmd.c:264
		printf("rm: only support 1 argument!\n");
c000c525:	83 ec 0c             	sub    $0xc,%esp
c000c528:	68 d3 ef 00 c0       	push   $0xc000efd3
c000c52d:	e8 e4 97 ff ff       	call   c0005d16 <printf>
c000c532:	83 c4 10             	add    $0x10,%esp
c000c535:	eb 68                	jmp    c000c59f <buildin_rm+0x8d>
/work/x86_os_my/shell/buildin_cmd.c:266
	} else {
		make_clear_abs_path(argv[1], final_path);
c000c537:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c53a:	83 c0 04             	add    $0x4,%eax
c000c53d:	8b 00                	mov    (%eax),%eax
c000c53f:	83 ec 08             	sub    $0x8,%esp
c000c542:	68 20 16 01 c0       	push   $0xc0011620
c000c547:	50                   	push   %eax
c000c548:	e8 f3 f8 ff ff       	call   c000be40 <make_clear_abs_path>
c000c54d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:268
		/* 若删除的不是根目录 */
		if (strcmp("/", final_path)) {
c000c550:	83 ec 08             	sub    $0x8,%esp
c000c553:	68 20 16 01 c0       	push   $0xc0011620
c000c558:	68 3f ed 00 c0       	push   $0xc000ed3f
c000c55d:	e8 c6 74 ff ff       	call   c0003a28 <strcmp>
c000c562:	83 c4 10             	add    $0x10,%esp
c000c565:	84 c0                	test   %al,%al
c000c567:	74 36                	je     c000c59f <buildin_rm+0x8d>
/work/x86_os_my/shell/buildin_cmd.c:269
			if (unlink(final_path) == 0) {
c000c569:	83 ec 0c             	sub    $0xc,%esp
c000c56c:	68 20 16 01 c0       	push   $0xc0011620
c000c571:	e8 06 93 ff ff       	call   c000587c <unlink>
c000c576:	83 c4 10             	add    $0x10,%esp
c000c579:	85 c0                	test   %eax,%eax
c000c57b:	75 09                	jne    c000c586 <buildin_rm+0x74>
/work/x86_os_my/shell/buildin_cmd.c:270
				ret = 0;
c000c57d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c000c584:	eb 19                	jmp    c000c59f <buildin_rm+0x8d>
/work/x86_os_my/shell/buildin_cmd.c:272
			} else {
				printf("rm: delete %s failed.\n", argv[1]);
c000c586:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c589:	83 c0 04             	add    $0x4,%eax
c000c58c:	8b 00                	mov    (%eax),%eax
c000c58e:	83 ec 08             	sub    $0x8,%esp
c000c591:	50                   	push   %eax
c000c592:	68 f1 ef 00 c0       	push   $0xc000eff1
c000c597:	e8 7a 97 ff ff       	call   c0005d16 <printf>
c000c59c:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/shell/buildin_cmd.c:276
			}
		}
	}
	return ret;
c000c59f:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/shell/buildin_cmd.c:277
}
c000c5a2:	c9                   	leave  
c000c5a3:	c3                   	ret    

c000c5a4 <segment_load>:
segment_load():
/work/x86_os_my/userprog/exec.c:57
};

/*
参数：文件描述符 fd、段在文件中的字节偏移量 offset、段大小 filesz、段被加载到的虚拟地址 vaddr
功能：将文件描述符 fd 指向的文件中，偏移为 offset，大小为 filesz 的一个"段"，加载到虚拟地址为 vaddr 的内存空间。*/
static bool segment_load(int32_t fd, uint32_t offset, uint32_t filesz, uint32_t vaddr) {
c000c5a4:	55                   	push   %ebp
c000c5a5:	89 e5                	mov    %esp,%ebp
c000c5a7:	83 ec 28             	sub    $0x28,%esp
/work/x86_os_my/userprog/exec.c:59
	// vaddr地址所在的页的指针（指针的地址是虚拟空间的地址）（指向的空间包含:页的物理地址和属性）指针
	uint32_t vaddr_first_page = vaddr & 0xfffff000;
c000c5aa:	8b 45 14             	mov    0x14(%ebp),%eax
c000c5ad:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c000c5b2:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/userprog/exec.c:60
	uint32_t size_in_first_page = PG_SIZE - (vaddr & 0x00000fff);	// 第一个页中可以用的空间
c000c5b5:	8b 45 14             	mov    0x14(%ebp),%eax
c000c5b8:	25 ff 0f 00 00       	and    $0xfff,%eax
c000c5bd:	ba 00 10 00 00       	mov    $0x1000,%edx
c000c5c2:	29 c2                	sub    %eax,%edx
c000c5c4:	89 d0                	mov    %edx,%eax
c000c5c6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/work/x86_os_my/userprog/exec.c:61
	uint32_t occupy_pages = 0;
c000c5c9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/userprog/exec.c:63
	/* 若一个页框容不下该段 */
	if (filesz > size_in_first_page) {
c000c5d0:	8b 45 10             	mov    0x10(%ebp),%eax
c000c5d3:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c000c5d6:	76 1c                	jbe    c000c5f4 <segment_load+0x50>
/work/x86_os_my/userprog/exec.c:64
		uint32_t left_size = filesz - size_in_first_page;
c000c5d8:	8b 45 10             	mov    0x10(%ebp),%eax
c000c5db:	2b 45 e4             	sub    -0x1c(%ebp),%eax
c000c5de:	89 45 e0             	mov    %eax,-0x20(%ebp)
/work/x86_os_my/userprog/exec.c:65
		occupy_pages = DIV_ROUND_UP(left_size, PG_SIZE) + 1;		// 1是指vaddr_first_page
c000c5e1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c000c5e4:	05 ff 0f 00 00       	add    $0xfff,%eax
c000c5e9:	c1 e8 0c             	shr    $0xc,%eax
c000c5ec:	83 c0 01             	add    $0x1,%eax
c000c5ef:	89 45 f4             	mov    %eax,-0xc(%ebp)
c000c5f2:	eb 07                	jmp    c000c5fb <segment_load+0x57>
/work/x86_os_my/userprog/exec.c:67
	} else {
		occupy_pages = 1;
c000c5f4:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
/work/x86_os_my/userprog/exec.c:71
	}

	/* 为进程分配内存 */
	uint32_t page_idx = 0;
c000c5fb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/work/x86_os_my/userprog/exec.c:72
	uint32_t vaddr_page = vaddr_first_page;
c000c602:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000c605:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/userprog/exec.c:73
	while (page_idx < occupy_pages) {
c000c608:	eb 60                	jmp    c000c66a <segment_load+0xc6>
/work/x86_os_my/userprog/exec.c:74
		uint32_t* pde = pde_ptr(vaddr_page);	//虚拟地址，指向 页目录项 的指针，指向的空间含：地址和属性
c000c60a:	83 ec 0c             	sub    $0xc,%esp
c000c60d:	ff 75 ec             	pushl  -0x14(%ebp)
c000c610:	e8 01 62 ff ff       	call   c0002816 <pde_ptr>
c000c615:	83 c4 10             	add    $0x10,%esp
c000c618:	89 45 dc             	mov    %eax,-0x24(%ebp)
/work/x86_os_my/userprog/exec.c:75
		uint32_t* pte = pte_ptr(vaddr_page);	//虚拟地址，指向 页表项   的指针
c000c61b:	83 ec 0c             	sub    $0xc,%esp
c000c61e:	ff 75 ec             	pushl  -0x14(%ebp)
c000c621:	e8 c0 61 ff ff       	call   c00027e6 <pte_ptr>
c000c626:	83 c4 10             	add    $0x10,%esp
c000c629:	89 45 d8             	mov    %eax,-0x28(%ebp)
/work/x86_os_my/userprog/exec.c:80

		/* 如果pde不存在,或者pte不存在就分配内存.
		 * pde的判断要在pte之前,否则pde若不存在会导致
		 * 判断pte时缺页异常 */
		if (!(*pde & 0x00000001) || !(*pte & 0x00000001)) {	//页目录项或者页表项不存在
c000c62c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c000c62f:	8b 00                	mov    (%eax),%eax
c000c631:	83 e0 01             	and    $0x1,%eax
c000c634:	85 c0                	test   %eax,%eax
c000c636:	74 0c                	je     c000c644 <segment_load+0xa0>
/work/x86_os_my/userprog/exec.c:80 (discriminator 1)
c000c638:	8b 45 d8             	mov    -0x28(%ebp),%eax
c000c63b:	8b 00                	mov    (%eax),%eax
c000c63d:	83 e0 01             	and    $0x1,%eax
c000c640:	85 c0                	test   %eax,%eax
c000c642:	75 1b                	jne    c000c65f <segment_load+0xbb>
/work/x86_os_my/userprog/exec.c:81
			if (get_a_page(PF_USER, vaddr_page) == NULL) {
c000c644:	83 ec 08             	sub    $0x8,%esp
c000c647:	ff 75 ec             	pushl  -0x14(%ebp)
c000c64a:	6a 02                	push   $0x2
c000c64c:	e8 be 64 ff ff       	call   c0002b0f <get_a_page>
c000c651:	83 c4 10             	add    $0x10,%esp
c000c654:	85 c0                	test   %eax,%eax
c000c656:	75 07                	jne    c000c65f <segment_load+0xbb>
/work/x86_os_my/userprog/exec.c:82
				return false;
c000c658:	b8 00 00 00 00       	mov    $0x0,%eax
c000c65d:	eb 41                	jmp    c000c6a0 <segment_load+0xfc>
/work/x86_os_my/userprog/exec.c:85
			}
		} // 如果原进程的页表已经分配了,利用现有的物理页,直接覆盖进程体
		vaddr_page += PG_SIZE;	//下一页
c000c65f:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
/work/x86_os_my/userprog/exec.c:86
		page_idx++;
c000c666:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/work/x86_os_my/userprog/exec.c:73
	}

	/* 为进程分配内存 */
	uint32_t page_idx = 0;
	uint32_t vaddr_page = vaddr_first_page;
	while (page_idx < occupy_pages) {
c000c66a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000c66d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c000c670:	72 98                	jb     c000c60a <segment_load+0x66>
/work/x86_os_my/userprog/exec.c:88
			}
		} // 如果原进程的页表已经分配了,利用现有的物理页,直接覆盖进程体
		vaddr_page += PG_SIZE;	//下一页
		page_idx++;
	}
	sys_lseek(fd, offset, SEEK_SET);
c000c672:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c675:	83 ec 04             	sub    $0x4,%esp
c000c678:	6a 01                	push   $0x1
c000c67a:	50                   	push   %eax
c000c67b:	ff 75 08             	pushl  0x8(%ebp)
c000c67e:	e8 7f b3 ff ff       	call   c0007a02 <sys_lseek>
c000c683:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/exec.c:89
	sys_read(fd, (void*)vaddr, filesz);	//读到vaddr处
c000c686:	8b 45 14             	mov    0x14(%ebp),%eax
c000c689:	83 ec 04             	sub    $0x4,%esp
c000c68c:	ff 75 10             	pushl  0x10(%ebp)
c000c68f:	50                   	push   %eax
c000c690:	ff 75 08             	pushl  0x8(%ebp)
c000c693:	e8 86 b2 ff ff       	call   c000791e <sys_read>
c000c698:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/exec.c:90
	return true;
c000c69b:	b8 01 00 00 00       	mov    $0x1,%eax
/work/x86_os_my/userprog/exec.c:91
}
c000c6a0:	c9                   	leave  
c000c6a1:	c3                   	ret    

c000c6a2 <load>:
load():
/work/x86_os_my/userprog/exec.c:95

/* 从文件系统上加载用户程序pathname
 * 成功则返回程序的起始地址，否则返回-1 */
static int32_t load(const char* pathname) {
c000c6a2:	55                   	push   %ebp
c000c6a3:	89 e5                	mov    %esp,%ebp
c000c6a5:	83 ec 78             	sub    $0x78,%esp
/work/x86_os_my/userprog/exec.c:96
	int32_t ret = -1;
c000c6a8:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/userprog/exec.c:99
	struct Elf32_Ehdr elf_header;
	struct Elf32_Phdr prog_header;
	memset(&elf_header, 0, sizeof(struct Elf32_Ehdr));
c000c6af:	83 ec 04             	sub    $0x4,%esp
c000c6b2:	6a 34                	push   $0x34
c000c6b4:	6a 00                	push   $0x0
c000c6b6:	8d 45 b0             	lea    -0x50(%ebp),%eax
c000c6b9:	50                   	push   %eax
c000c6ba:	e8 94 71 ff ff       	call   c0003853 <memset>
c000c6bf:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/exec.c:101

	int32_t fd = sys_open(pathname, O_RDONLY);
c000c6c2:	83 ec 08             	sub    $0x8,%esp
c000c6c5:	6a 00                	push   $0x0
c000c6c7:	ff 75 08             	pushl  0x8(%ebp)
c000c6ca:	e8 5a ae ff ff       	call   c0007529 <sys_open>
c000c6cf:	83 c4 10             	add    $0x10,%esp
c000c6d2:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/userprog/exec.c:102
	if (fd == -1) {
c000c6d5:	83 7d e8 ff          	cmpl   $0xffffffff,-0x18(%ebp)
c000c6d9:	75 0a                	jne    c000c6e5 <load+0x43>
/work/x86_os_my/userprog/exec.c:103
		return -1;
c000c6db:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000c6e0:	e9 4a 01 00 00       	jmp    c000c82f <load+0x18d>
/work/x86_os_my/userprog/exec.c:106
	}

	if (sys_read(fd, &elf_header, sizeof(struct Elf32_Ehdr)) != sizeof(struct Elf32_Ehdr)) {
c000c6e5:	83 ec 04             	sub    $0x4,%esp
c000c6e8:	6a 34                	push   $0x34
c000c6ea:	8d 45 b0             	lea    -0x50(%ebp),%eax
c000c6ed:	50                   	push   %eax
c000c6ee:	ff 75 e8             	pushl  -0x18(%ebp)
c000c6f1:	e8 28 b2 ff ff       	call   c000791e <sys_read>
c000c6f6:	83 c4 10             	add    $0x10,%esp
c000c6f9:	83 f8 34             	cmp    $0x34,%eax
c000c6fc:	74 0c                	je     c000c70a <load+0x68>
/work/x86_os_my/userprog/exec.c:107
		ret = -1;
c000c6fe:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/userprog/exec.c:108
		goto done;
c000c705:	e9 14 01 00 00       	jmp    c000c81e <load+0x17c>
/work/x86_os_my/userprog/exec.c:116
	/* 校验32位的elf头 */
	/* 
	e_phnum == 程序头表中条目的数量，也就是段的个数
	e_phentsize == 程序头表中每个条目的字节大小，即 描述段的数据结构的大小 == sizeof(struct Elf32_Phdr)
	细节见readme */
	if (memcmp(elf_header.e_ident, "\177ELF\1\1\1", 7) \
c000c70a:	83 ec 04             	sub    $0x4,%esp
c000c70d:	6a 07                	push   $0x7
c000c70f:	68 12 f0 00 c0       	push   $0xc000f012
c000c714:	8d 45 b0             	lea    -0x50(%ebp),%eax
c000c717:	50                   	push   %eax
c000c718:	e8 e8 71 ff ff       	call   c0003905 <memcmp>
c000c71d:	83 c4 10             	add    $0x10,%esp
c000c720:	85 c0                	test   %eax,%eax
c000c722:	75 30                	jne    c000c754 <load+0xb2>
/work/x86_os_my/userprog/exec.c:117
			|| elf_header.e_type != 2 \
c000c724:	0f b7 45 c0          	movzwl -0x40(%ebp),%eax
c000c728:	66 83 f8 02          	cmp    $0x2,%ax
c000c72c:	75 26                	jne    c000c754 <load+0xb2>
/work/x86_os_my/userprog/exec.c:118
			|| elf_header.e_machine != 3 \
c000c72e:	0f b7 45 c2          	movzwl -0x3e(%ebp),%eax
c000c732:	66 83 f8 03          	cmp    $0x3,%ax
c000c736:	75 1c                	jne    c000c754 <load+0xb2>
/work/x86_os_my/userprog/exec.c:119
			|| elf_header.e_version != 1 \
c000c738:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c000c73b:	83 f8 01             	cmp    $0x1,%eax
c000c73e:	75 14                	jne    c000c754 <load+0xb2>
/work/x86_os_my/userprog/exec.c:120
			|| elf_header.e_phnum > 1024 \
c000c740:	0f b7 45 dc          	movzwl -0x24(%ebp),%eax
c000c744:	66 3d 00 04          	cmp    $0x400,%ax
c000c748:	77 0a                	ja     c000c754 <load+0xb2>
/work/x86_os_my/userprog/exec.c:121
			|| elf_header.e_phentsize != sizeof(struct Elf32_Phdr)) {
c000c74a:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c000c74e:	66 83 f8 20          	cmp    $0x20,%ax
c000c752:	74 0c                	je     c000c760 <load+0xbe>
/work/x86_os_my/userprog/exec.c:122
		ret = -1;
c000c754:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/userprog/exec.c:123
		goto done;
c000c75b:	e9 be 00 00 00       	jmp    c000c81e <load+0x17c>
/work/x86_os_my/userprog/exec.c:126
	}

	Elf32_Off prog_header_offset = elf_header.e_phoff;		// 程序头的起始地址
c000c760:	8b 45 cc             	mov    -0x34(%ebp),%eax
c000c763:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/exec.c:127
	Elf32_Half prog_header_size = elf_header.e_phentsize;	// 描述段的数据结构的大小 == sizeof(struct Elf32_Phdr)
c000c766:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c000c76a:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
/work/x86_os_my/userprog/exec.c:130

	/* 遍历所有程序头 */
	uint32_t prog_idx = 0;
c000c76e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/work/x86_os_my/userprog/exec.c:131
	while (prog_idx < elf_header.e_phnum) {	//段的个数
c000c775:	e9 8e 00 00 00       	jmp    c000c808 <load+0x166>
/work/x86_os_my/userprog/exec.c:132
		memset(&prog_header, 0, prog_header_size);
c000c77a:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c000c77e:	83 ec 04             	sub    $0x4,%esp
c000c781:	50                   	push   %eax
c000c782:	6a 00                	push   $0x0
c000c784:	8d 45 90             	lea    -0x70(%ebp),%eax
c000c787:	50                   	push   %eax
c000c788:	e8 c6 70 ff ff       	call   c0003853 <memset>
c000c78d:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/exec.c:135

		/* 将文件的指针定位到程序头 */
		sys_lseek(fd, prog_header_offset, SEEK_SET);
c000c790:	8b 45 f0             	mov    -0x10(%ebp),%eax
c000c793:	83 ec 04             	sub    $0x4,%esp
c000c796:	6a 01                	push   $0x1
c000c798:	50                   	push   %eax
c000c799:	ff 75 e8             	pushl  -0x18(%ebp)
c000c79c:	e8 61 b2 ff ff       	call   c0007a02 <sys_lseek>
c000c7a1:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/exec.c:138

		/* 只获取程序头 */
		if (sys_read(fd, &prog_header, prog_header_size) != prog_header_size) {
c000c7a4:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c000c7a8:	83 ec 04             	sub    $0x4,%esp
c000c7ab:	50                   	push   %eax
c000c7ac:	8d 45 90             	lea    -0x70(%ebp),%eax
c000c7af:	50                   	push   %eax
c000c7b0:	ff 75 e8             	pushl  -0x18(%ebp)
c000c7b3:	e8 66 b1 ff ff       	call   c000791e <sys_read>
c000c7b8:	83 c4 10             	add    $0x10,%esp
c000c7bb:	89 c2                	mov    %eax,%edx
c000c7bd:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c000c7c1:	39 c2                	cmp    %eax,%edx
c000c7c3:	74 09                	je     c000c7ce <load+0x12c>
/work/x86_os_my/userprog/exec.c:139
			ret = -1;
c000c7c5:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/userprog/exec.c:140
			goto done;
c000c7cc:	eb 50                	jmp    c000c81e <load+0x17c>
/work/x86_os_my/userprog/exec.c:144
		}

		/* 如果是可加载段就调用 segment_load 加载到内存 */
		if (PT_LOAD == prog_header.p_type) {
c000c7ce:	8b 45 90             	mov    -0x70(%ebp),%eax
c000c7d1:	83 f8 01             	cmp    $0x1,%eax
c000c7d4:	75 24                	jne    c000c7fa <load+0x158>
/work/x86_os_my/userprog/exec.c:145
			if (!segment_load(fd, prog_header.p_offset, prog_header.p_filesz, prog_header.p_vaddr)) {
c000c7d6:	8b 4d 98             	mov    -0x68(%ebp),%ecx
c000c7d9:	8b 55 a0             	mov    -0x60(%ebp),%edx
c000c7dc:	8b 45 94             	mov    -0x6c(%ebp),%eax
c000c7df:	51                   	push   %ecx
c000c7e0:	52                   	push   %edx
c000c7e1:	50                   	push   %eax
c000c7e2:	ff 75 e8             	pushl  -0x18(%ebp)
c000c7e5:	e8 ba fd ff ff       	call   c000c5a4 <segment_load>
c000c7ea:	83 c4 10             	add    $0x10,%esp
c000c7ed:	85 c0                	test   %eax,%eax
c000c7ef:	75 09                	jne    c000c7fa <load+0x158>
/work/x86_os_my/userprog/exec.c:146
				ret = -1;
c000c7f1:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
/work/x86_os_my/userprog/exec.c:147
				goto done;
c000c7f8:	eb 24                	jmp    c000c81e <load+0x17c>
/work/x86_os_my/userprog/exec.c:152
			}
		}

		/* 更新下一个程序头的偏移 */
		prog_header_offset += elf_header.e_phentsize;
c000c7fa:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c000c7fe:	0f b7 c0             	movzwl %ax,%eax
c000c801:	01 45 f0             	add    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/exec.c:153
		prog_idx++;
c000c804:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
/work/x86_os_my/userprog/exec.c:131
	Elf32_Off prog_header_offset = elf_header.e_phoff;		// 程序头的起始地址
	Elf32_Half prog_header_size = elf_header.e_phentsize;	// 描述段的数据结构的大小 == sizeof(struct Elf32_Phdr)

	/* 遍历所有程序头 */
	uint32_t prog_idx = 0;
	while (prog_idx < elf_header.e_phnum) {	//段的个数
c000c808:	0f b7 45 dc          	movzwl -0x24(%ebp),%eax
c000c80c:	0f b7 c0             	movzwl %ax,%eax
c000c80f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c000c812:	0f 87 62 ff ff ff    	ja     c000c77a <load+0xd8>
/work/x86_os_my/userprog/exec.c:155

		/* 更新下一个程序头的偏移 */
		prog_header_offset += elf_header.e_phentsize;
		prog_idx++;
	}
	ret = elf_header.e_entry;
c000c818:	8b 45 c8             	mov    -0x38(%ebp),%eax
c000c81b:	89 45 f4             	mov    %eax,-0xc(%ebp)
/work/x86_os_my/userprog/exec.c:157
done:
	sys_close(fd);
c000c81e:	83 ec 0c             	sub    $0xc,%esp
c000c821:	ff 75 e8             	pushl  -0x18(%ebp)
c000c824:	e8 ad af ff ff       	call   c00077d6 <sys_close>
c000c829:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/exec.c:158
	return ret;
c000c82c:	8b 45 f4             	mov    -0xc(%ebp),%eax
/work/x86_os_my/userprog/exec.c:159 (discriminator 1)
}
c000c82f:	c9                   	leave  
c000c830:	c3                   	ret    

c000c831 <sys_execv>:
sys_execv():
/work/x86_os_my/userprog/exec.c:162

/* 用path指向的程序替换当前进程 */
int32_t sys_execv(const char* path, const char* argv[]) {
c000c831:	55                   	push   %ebp
c000c832:	89 e5                	mov    %esp,%ebp
c000c834:	83 ec 18             	sub    $0x18,%esp
/work/x86_os_my/userprog/exec.c:163
	uint32_t argc = 0;
c000c837:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
/work/x86_os_my/userprog/exec.c:164
	while (argv[argc]) {
c000c83e:	eb 04                	jmp    c000c844 <sys_execv+0x13>
/work/x86_os_my/userprog/exec.c:165
		argc++;
c000c840:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
/work/x86_os_my/userprog/exec.c:164
}

/* 用path指向的程序替换当前进程 */
int32_t sys_execv(const char* path, const char* argv[]) {
	uint32_t argc = 0;
	while (argv[argc]) {
c000c844:	8b 45 f4             	mov    -0xc(%ebp),%eax
c000c847:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c000c84e:	8b 45 0c             	mov    0xc(%ebp),%eax
c000c851:	01 d0                	add    %edx,%eax
c000c853:	8b 00                	mov    (%eax),%eax
c000c855:	85 c0                	test   %eax,%eax
c000c857:	75 e7                	jne    c000c840 <sys_execv+0xf>
/work/x86_os_my/userprog/exec.c:168
		argc++;
	}
	// 以前是用汇编加载的elf格式的内核，现在使用C语言方式加载elf格式的应用程序。
	int32_t entry_point = load(path);     
c000c859:	83 ec 0c             	sub    $0xc,%esp
c000c85c:	ff 75 08             	pushl  0x8(%ebp)
c000c85f:	e8 3e fe ff ff       	call   c000c6a2 <load>
c000c864:	83 c4 10             	add    $0x10,%esp
c000c867:	89 45 f0             	mov    %eax,-0x10(%ebp)
/work/x86_os_my/userprog/exec.c:169
	if (entry_point == -1) {	 // 若加载失败则返回-1
c000c86a:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
c000c86e:	75 07                	jne    c000c877 <sys_execv+0x46>
/work/x86_os_my/userprog/exec.c:170
		return -1;
c000c870:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c000c875:	eb 63                	jmp    c000c8da <sys_execv+0xa9>
/work/x86_os_my/userprog/exec.c:173
	}

	struct task_struct* cur = running_thread();
c000c877:	e8 be 73 ff ff       	call   c0003c3a <running_thread>
c000c87c:	89 45 ec             	mov    %eax,-0x14(%ebp)
/work/x86_os_my/userprog/exec.c:175
	/* 修改进程名 */
	memcpy(cur->name, path, TASK_NAME_LEN);
c000c87f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000c882:	83 c0 0c             	add    $0xc,%eax
c000c885:	83 ec 04             	sub    $0x4,%esp
c000c888:	6a 10                	push   $0x10
c000c88a:	ff 75 08             	pushl  0x8(%ebp)
c000c88d:	50                   	push   %eax
c000c88e:	e8 12 70 ff ff       	call   c00038a5 <memcpy>
c000c893:	83 c4 10             	add    $0x10,%esp
/work/x86_os_my/userprog/exec.c:176
	cur->name[TASK_NAME_LEN-1] = 0;
c000c896:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000c899:	c6 40 1b 00          	movb   $0x0,0x1b(%eax)
/work/x86_os_my/userprog/exec.c:178

	struct intr_stack* intr_0_stack = (struct intr_stack*)((uint32_t)cur + PG_SIZE - sizeof(struct intr_stack));
c000c89d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c000c8a0:	05 b4 0f 00 00       	add    $0xfb4,%eax
c000c8a5:	89 45 e8             	mov    %eax,-0x18(%ebp)
/work/x86_os_my/userprog/exec.c:187
	习惯用法：
	ebx 经常做基址寄存器，argv 本来就是所有参数的基地址，
	ecx 经常做循环控制次数寄存器，argc 本来就是 argv 的参数个数，也就是循环次数
	现在把参数放在哪个寄存器中，将来在获取参数时就从哪些寄存器中取，
	将来实现简易版 c 运行库，那会涉及到从寄存器中获取参数。*/
	intr_0_stack->ebx = (int32_t)argv;
c000c8a8:	8b 55 0c             	mov    0xc(%ebp),%edx
c000c8ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000c8ae:	89 50 14             	mov    %edx,0x14(%eax)
/work/x86_os_my/userprog/exec.c:188
	intr_0_stack->ecx = argc;
c000c8b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000c8b4:	8b 55 f4             	mov    -0xc(%ebp),%edx
c000c8b7:	89 50 1c             	mov    %edx,0x1c(%eax)
/work/x86_os_my/userprog/exec.c:189
	intr_0_stack->eip = (void*)entry_point;
c000c8ba:	8b 55 f0             	mov    -0x10(%ebp),%edx
c000c8bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000c8c0:	89 50 38             	mov    %edx,0x38(%eax)
/work/x86_os_my/userprog/exec.c:193
	/* 使新用户进程的栈地址为最高用户空间地址 */
	/* 1. 老进程用户栈中的数据只适用于老进程，对新进程没用，故新进程的用户栈应该从新开始。
	   2. 为了后续传入参数做准备：用户空间的最高处用于存储命令行参数。*/
	intr_0_stack->esp = (void*)0xc0000000;
c000c8c3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c000c8c6:	c7 40 44 00 00 00 c0 	movl   $0xc0000000,0x44(%eax)
/work/x86_os_my/userprog/exec.c:197

	/* exec不同于fork,为使新进程更快被执行,直接从中断返回 */
	/* 将新进程内核栈地址赋值给 esp 寄存器，然后跳转到 intr_exit，假装从中断返回，实现了新进程的运行。 */
	asm volatile ("movl %0, %%esp; jmp intr_exit" : : "g" (intr_0_stack) : "memory");
c000c8cd:	8b 65 e8             	mov    -0x18(%ebp),%esp
c000c8d0:	e9 cb 53 ff ff       	jmp    c0001ca0 <intr_exit>
/work/x86_os_my/userprog/exec.c:200

	//并不会从这里返回
	return 0;
c000c8d5:	b8 00 00 00 00       	mov    $0x0,%eax
/work/x86_os_my/userprog/exec.c:201
}
c000c8da:	c9                   	leave  
c000c8db:	c3                   	ret    
