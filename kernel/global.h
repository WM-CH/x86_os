#ifndef __KERNEL_GLOBAL_H
#define __KERNEL_GLOBAL_H
#include "stdint.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////  GDT描述符属性  //////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
#define	DESC_G_4K    1
#define	DESC_D_32    1
#define DESC_L	     0	// 64位代码标记，此处标记为0便可。
#define DESC_AVL     0	// cpu不用此位，暂置为0  
#define DESC_P	     1

#define DESC_DPL_0   0
#define DESC_DPL_1   1
#define DESC_DPL_2   2
#define DESC_DPL_3   3

/* 代码段和数据段属于存储段(s=1)，tss和各种门描述符属于系统段(s=0) */
#define DESC_S_CODE	1
#define DESC_S_DATA	DESC_S_CODE
#define DESC_S_SYS	0

#define DESC_TYPE_CODE	8	// x=1,c=0,r=0,a=0 代码段是可执行的,非依从的,不可读的,已访问位a清0.  
#define DESC_TYPE_DATA  2	// x=0,e=0,w=1,a=0 数据段是不可执行的,向上扩展的,可写的,已访问位a清0.
#define DESC_TYPE_TSS   9	// B位为0,不忙


#define	RPL0		0
#define	RPL1		1
#define	RPL2		2
#define	RPL3		3

#define TI_GDT		0
#define TI_LDT		1

#define SELECTOR_K_CODE	   ((1 << 3) + (TI_GDT << 2) + RPL0)
#define SELECTOR_K_DATA	   ((2 << 3) + (TI_GDT << 2) + RPL0)
#define SELECTOR_K_STACK   SELECTOR_K_DATA 
#define SELECTOR_K_GS	   ((3 << 3) + (TI_GDT << 2) + RPL0)
/* 第3个段描述符是显存, 第4个是tss, 5/6/7都是给用户进程的RPL=3 */
#define SELECTOR_U_CODE	   ((5 << 3) + (TI_GDT << 2) + RPL3)
#define SELECTOR_U_DATA	   ((6 << 3) + (TI_GDT << 2) + RPL3)
#define SELECTOR_U_STACK   SELECTOR_U_DATA

/*
8字节段描述符
+----------------------------------------------+--------------------------------------+
|31~24       | 23 | 22 | 21 | 20 | 19~16       | 15 | 14~13 | 12 | 11~8 | 7~0         |   高32位
|段基址31~24 | G  | D/B| L  | AVL| 段界限19~16 | P  | DPL   | S  | Type | 段基址23~16 |
+----------------------------------------------+--------------------------------------+
|31~16                                         |              15~0                    |   低32位
|段基址15~0                                    |              段界限15~0              |
+----------------------------------------------+--------------------------------------+

GDTR寄存器
+--------------------+-----------------+
| 47~16 GDT起始地址  |  15~0 GDT界限   |
+--------------------+-----------------+
起始地址 2^32=4G 范围
容纳 2^16/8=65536/8=8192 个描述符

选择子
+--------------------+------+------------+
| 15~3 描述符索引    | 2 TI |  1~0 RPL   |
+--------------------+------+------------+
索引 2^13=8192 个描述符
*/
//属性4字节中的高2字节high 和低2字节low
#define GDT_ATTR_HIGH				((DESC_G_4K << 7) + (DESC_D_32 << 6) + (DESC_L << 5) + (DESC_AVL << 4))
#define GDT_CODE_ATTR_LOW_DPL3		((DESC_P << 7) + (DESC_DPL_3 << 5) + (DESC_S_CODE << 4) + DESC_TYPE_CODE)
#define GDT_DATA_ATTR_LOW_DPL3		((DESC_P << 7) + (DESC_DPL_3 << 5) + (DESC_S_DATA << 4) + DESC_TYPE_DATA)

/////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////  TSS描述符属性  //////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
#define TSS_DESC_D  0 
/*
TSS结构
31                      16 15                       0  
+-------------------------+-------------------------+
| io位图在TSS中的偏移地址 |                     1:T | 100
+-------------------------+-------------------------+
|||||||||||||||||||||||||||      ldt选择子          | 96
|||||||||||||||||||||||||||      gs                 |
|||||||||||||||||||||||||||      fs                 | 88
|||||||||||||||||||||||||||      ds                 |
|||||||||||||||||||||||||||      ss                 | 80
|||||||||||||||||||||||||||      cs                 |
|||||||||||||||||||||||||||      es                 | 72
|                        edi                        |
|                        esi                        | 64
|                        ebp                        |
|                        esp                        | 56
|                        ebx                        |
|                        edx                        | 48
|                        ecx                        |
|                        eax                        | 40
|                        eflags                     |
|                        eip                        | 32
|                        cr3(pdbr)                  |
|||||||||||||||||||||||||||      ss2                | 24
|                        esp2                       |
|||||||||||||||||||||||||||      ss1                | 16
|                        esp1                       |
|||||||||||||||||||||||||||      ss0                | 8
|                        esp0                       |
|||||||||||||||||||||||||||   上个任务的TSS指针     | 0
+---------------------------------------------------+
CR3：页目录基址寄存器 Page Directory Base Register，PDBR

TR寄存器
+---------------+ +----------------+------------+------+
| 16位TSS选择子 | | 32位线性基地址 | 20位段界限 | 属性 |
+---------------+ +----------------+------------+------+
    选择子                描述符缓冲器

TSS描述符
+----------------------------------------------+-------------------------------------------+
|31~24       | 23 | 22 | 21 | 20 | 19~16       | 15 | 14~13 | 12 | 11~8      | 7~0         |   高32位
|段基址31~24 | G  | D=0| L=0| AVL| 段界限19~16 | P  | DPL   | S=0| type=10B1 | 段基址23~16 |
+----------------------------------------------+-------------------------------------------+
|31~16                                         |              15~0                         |   低32位
|段基址15~0                                    |              段界限15~0                   |
+----------------------------------------------+-------------------------------------------+
B=1：忙，此任务为当前正在 CPU 上运行的任务。
*/
#define TSS_ATTR_HIGH	((DESC_G_4K << 7) + (TSS_DESC_D << 6) + (DESC_L << 5) + (DESC_AVL << 4) + 0x0)
#define TSS_ATTR_LOW	((DESC_P << 7) + (DESC_DPL_0 << 5) + (DESC_S_SYS << 4) + DESC_TYPE_TSS)
#define	SELECTOR_TSS	((4 << 3) + (TI_GDT << 2 ) + RPL0)

/////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////  IDT描述符属性  //////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
#define	IDT_DESC_P			1 
#define	IDT_DESC_DPL0		0
#define	IDT_DESC_DPL3		3
#define	IDT_DESC_32_TYPE	0xE	// 32位的门
#define	IDT_DESC_16_TYPE	0x6	// 16位的门，不用，定义它只为和32位门区分
/*
中断门描述符
D=0,16位模式
D=1,32位模式
+----------------------------------------------+----------------------------------------------+
|31~16                                         | 15 | 14~13 | 12 | 11~8      | 7 6 5 |  4~0   |   高32位
|中断处理程序在目标代码段内的偏移量31~16位     | P  | DPL   | S=0| D110 Type | 0 0 0 | 未使用 |
+----------------------------------------------+----------------------------------------------+
|31~16                                         |              15~0                            |   低32位
|中断处理程序目标代码段描述符选择子            |中断处理程序在目标代码段内的偏移量15~0位      |
+----------------------------------------------+----------------------------------------------+

IDTR寄存器
+--------------------+-----------------+
| 47~16 表基址       |  15~0 表界限    |
+--------------------+-----------------+
起始地址 2^32=4G 范围
容纳 2^16/8=65536/8=8192 个描述符

;着重看 7.4.1 中断时的保护
;下边是 7.4.2 中断时的压栈
; 1）如果发生了"特权级转移"，比如被中断的进程是 3 特权级，中断处理程序是 0 特权级，
;此时要把低特权级的栈段选择子 ss_old 及栈指针 esp_old 保存到栈中。
;没有特权级转义就不需要压栈它俩了。
; 2）压入标志寄存器 eflags
; 3）压入返回地址，先压入 cs，后压入 eip
; 4）如果此中断没有相应的错误码，至此，处理器把寄存器压栈的工作完成.
;    如果此中断有错误码的话，处理器在压入 eip 之后，会压入错误码
; 5）如果栈中有错误码，在 iret 指令执行前必须要把栈中的错误码跨过！！！
; 此后开始使用 0 特权级的栈（ss/esp）
31     16 15      0
+--------+--------+
| 0      | ss_old |
+--------+--------+
|     esp_old     |
+--------+--------+
|     eflags      |
+--------+--------+
| 0      | cs_old |
+--------+--------+
|     eip_old     |
+-----------------+
|     err_code    |
+-----------------+ <---ss_new:esp_new
*/
#define	IDT_DESC_ATTR_DPL0	((IDT_DESC_P << 7) + (IDT_DESC_DPL0 << 5) + IDT_DESC_32_TYPE)
#define	IDT_DESC_ATTR_DPL3	((IDT_DESC_P << 7) + (IDT_DESC_DPL3 << 5) + IDT_DESC_32_TYPE)
/////////////////////////////////////////////////////////////////////////////////////////////////////////


struct gdt_desc {
	uint16_t limit_low_word;
	uint16_t base_low_word;
	uint8_t  base_mid_byte;
	uint8_t  attr_low_byte;
	uint8_t  limit_high_attr_high;
	uint8_t  base_high_byte;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////   eflags属性   /////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
*						Intel 8086 Eflags Register 【长度4字节】
*
*     15|14|13|12|11|10|F|E|D C|B|A|9|8|7|6|5|4|3|2|1|0|
*      |  |  |  |  |  | | |  |  | | | | | | | | | | | '---  CF……Carry Flag
*      |  |  |  |  |  | | |  |  | | | | | | | | | | '---  1 MBS
*      |  |  |  |  |  | | |  |  | | | | | | | | | '---  PF……Parity Flag
*      |  |  |  |  |  | | |  |  | | | | | | | | '---  0
*      |  |  |  |  |  | | |  |  | | | | | | | '---  AF……Auxiliary Flag
*      |  |  |  |  |  | | |  |  | | | | | | '---  0
*      |  |  |  |  |  | | |  |  | | | | | '---  ZF……Zero Flag
*      |  |  |  |  |  | | |  |  | | | | '---  SF……Sign Flag
*      |  |  |  |  |  | | |  |  | | | '---  TF……Trap Flag
*      |  |  |  |  |  | | |  |  | | '---  IF……Interrupt Flag
*      |  |  |  |  |  | | |  |  | '---  DF……Direction Flag
*      |  |  |  |  |  | | |  |  '---  OF……Overflow flag
*      |  |  |  |  |  | | |  '----  IOPL……I/O Privilege Level
*      |  |  |  |  |  | | '-----  NT……Nested Task Flag
*      |  |  |  |  |  | '-----  0
*      |  |  |  |  |  '-----  RF……Resume Flag
*      |  |  |  |  '------  VM……Virtual Mode Flag
*      |  |  |  '-----  AC……Alignment Check
*      |  |  '-----  VIF……Virtual Interrupt Flag  
*      |  '-----  VIP……Virtual Interrupt Pending
*      '-----  ID……ID Flag
*
///////////////////////////////////////////////////////////////////////////////////////////////////////*/
#define EFLAGS_MBS	(1 << 1)	// 此项必须要设置
#define EFLAGS_IF_1	(1 << 9)	// if为1,开中断
#define EFLAGS_IF_0	0			// if为0,关中断
#define EFLAGS_IOPL_3	(3 << 12)	// IOPL3,用于测试用户程序在非系统调用下进行IO
#define EFLAGS_IOPL_0	(0 << 12)	// IOPL0

#define NULL ((void*)0)
#define DIV_ROUND_UP(X, STEP) ((X + STEP - 1) / (STEP))
#define bool int
#define true 1
#define false 0

#define PG_SIZE 4096

#endif
